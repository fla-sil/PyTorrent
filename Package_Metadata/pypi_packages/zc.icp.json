{"info": {"author": "Benji York", "author_email": "benji@zope.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Zope Public License", "Programming Language :: Python"], "description": "====================================\nInternet Cache Protocol (ICP) Server\n====================================\n\nIn multi-machine (or multi-process) web server installations some set of web\nservers will likely be more able to quickly service an HTTP request than\nothers.  HTTP accelerators (reverse proxies) like Squid_ can use ICP_ queries\nto find the most appropriate server(s) to handle a particular request.  This\npackage provides a small UDP server that can respond to ICP queries based on\npluggable policies.\n\n.. [ICP] http://www.faqs.org/rfcs/rfc2186.html\n.. [Squid] http://www.squid-cache.org/\n\n\nChange history\n==============\n\n1.0.0 (2008-02-07)\n------------------\n\nInitial release.\n\n\nWhen ICP is Useful\n==================\n\nWhen generating content dynamically, having all the data available locally to\nfulfil a request can have a profound effect on service time.  One approach to\nhaving the data available is to have one or more caches.  In some situations\nthose caches are not large enough to contain the entire working set required\nfor efficient servicing of incoming requests.  Adding additional request\nhandlers (servers or processes) doesn't help because the time to load the data\nfrom one or more storage servers (e.g., databases) is the dominant factor in\nrequest time.  In those situations the request space can be partitioned such\nthat the portion of the working set a particular handler (server or process) is\nresponsible for can fit in its cache(s).\n\nStatically configuring request space partitioning may be difficult,\nerror-prone, or even impossible.  In those circumstances it would be nice to\nlet the origin servers provide feedback on whether or not they should handle a\nparticular request.  That's where ICP comes in.\n\n\nHits and Misses\n===============\n\nWhen an ICP query request is received, the server can return one of ICP_OP_HIT,\nICP_OP_MISS, ICP_OP_ERR, ICP_OP_MISS_NOFETCH, or ICP_OP_DENIED.  The meanings\nof these result codes are defined in the ICP RFC as below.\n\nICP_OP_HIT\n    An ICP_OP_HIT response indicates that the requested URL exists in\n    this cache and that the requester is allowed to retrieve it.\n\nICP_OP_MISS\n    An ICP_OP_MISS response indicates that the requested URL does not\n    exist in this cache.  The querying cache may still choose to fetch\n    the URL from the replying cache.\n\nICP_OP_ERR\n    An ICP_OP_ERR response indicates some kind of error in parsing or\n    handling the query message (e.g. invalid URL).\n\nICP_OP_MISS_NOFETCH\n    An ICP_OP_MISS_NOFETCH response indicates that this cache is up,\n    but is in a state where it does not want to handle cache misses.\n    An example of such a state is during a startup phase where a cache\n    might be rebuilding its object store.  A cache in such a mode may\n    wish to return ICP_OP_HIT for cache hits, but not ICP_OP_MISS for\n    misses.  ICP_OP_MISS_NOFETCH essentially means \"I am up and\n    running, but please don't fetch this URL from me now.\"\n\n    Note, ICP_OP_MISS_NOFETCH has a different meaning than\n    ICP_OP_MISS.  The ICP_OP_MISS reply is an invitation to fetch the\n    URL from the replying cache (if their relationship allows it), but\n    ICP_OP_MISS_NOFETCH is a request to NOT fetch the URL from the\n    replying cache.\n\nICP_OP_DENIED\n    An ICP_OP_DENIED response indicates that the querying site is not\n    allowed to retrieve the named object from this cache.  Caches and\n    proxies may implement complex access controls.  This reply must be\n    be interpreted to mean \"you are not allowed to request this\n    particular URL from me at this particular time.\"\n\nBecause we want to use ICP to communicate about whether or not an origin server\n(as opposed to a cache server) wants to handle a particular request, we will\nuse slightly different definitions for some of the result codes.\n\nICP_OP_HIT\n    An ICP_OP_HIT response indicates that the queried server would prefer to\n    handle the HTTP request.  The reason the origin server is returning a hit\n    might be that it has recently handled \"similar\" requests, or that it has\n    been configured to handle the partition of the URL space occupied by the\n    given URL.\n\nICP_OP_MISS\n    An ICP_OP_MISS response indicates that the queried server does not have a\n    preference to service the request, but will be able to handle the request\n    nonetheless.  This is normally the default response.\n\nICP_OP_MISS_NOFETCH\n    An ICP_OP_MISS_NOFETCH response indicates that the requesting server may\n    not request the named object from this server.  This may be because the\n    origin server is under heavy load at the time or some other policy\n    indicates that the request must not be forwarded at the moment.\n\nThe response (hit, miss, etc.) to a particular ICP query is based on one or\nmore configured policies.  The mechanics of defining and registering those\npolicies is explained in the next section.\n\nThis package does not implement the deprecated ICP_OP_HIT_OBJ.\n\n\nDefining Policies\n=================\n\nTo use this package one or more polices must be defined and registered.  The\nZope component architecture is used to manage the polices as \"utilities\".\n\nPolicies must implement the IICPPolicy interface.\n\n    >>> from zc.icp.interfaces import IICPPolicy\n    >>> IICPPolicy\n    <InterfaceClass zc.icp.interfaces.IICPPolicy>\n\nAt this point no policy is registered, so any URL will generate a miss.\n\n    >>> import zc.icp\n    >>> zc.icp.check_url('http://example.com/foo')\n    'ICP_OP_MISS'\n\nLet's say we want to return an ICP_OP_HIT for all URLs containing \"foo\", we\ncan define that policy like so:\n\n    >>> def foo_hit_policy(url):\n    ...     if 'foo' in url:\n    ...         return 'ICP_OP_HIT'\n\nWhen registering this policy we have to provide an associated name.  Any\nsubsequent registration with the same name will override the previous\nregistration.  The default name is the empty string.\n\n    >>> import zope.component\n    >>> zope.component.provideUtility(foo_hit_policy, IICPPolicy, 'foo')\n\nThe registered policy is immediately available.\n\n    >>> zc.icp.check_url('http://example.com/foo')\n    'ICP_OP_HIT'\n\nNon-foo URLs are still misses.\n\n    >>> zc.icp.check_url('http://example.com/bar')\n    'ICP_OP_MISS'\n\nNow we can add another policy to indicate that we don't want any requests with\n\"baz\" in them.\n\n    >>> def baz_hit_policy(url):\n    ...     if 'baz' in url:\n    ...         return 'ICP_OP_MISS_NOFETCH'\n    >>> zope.component.provideUtility(baz_hit_policy, IICPPolicy, 'baz')\n\n    >>> zc.icp.check_url('http://example.com/foo')\n    'ICP_OP_HIT'\n    >>> zc.icp.check_url('http://example.com/bar')\n    'ICP_OP_MISS'\n    >>> zc.icp.check_url('http://example.com/baz')\n    'ICP_OP_MISS_NOFETCH'\n\nThe policies are prioritized by name.  The first policy to return a non-None\nresult is followed.  Therefore if we check a URL with both \"foo\" and \"baz\" in\nit, the policy for \"baz\" is followed.\n\n    >>> zc.icp.check_url('http://example.com/foo/baz')\n    'ICP_OP_MISS_NOFETCH'\n\n\nRunning the Server\n==================\n\nStarting the server begins listening on the given port and IP.\n\n    >>> zc.icp.start_server('localhost', 3130)\n    info: ICP server started\n        Address: localhost\n        Port: 3130\n\nNow we can start sending ICP requests and get responses back.  To do so we must\nfirst construct an ICP request.\n\n    >>> import struct\n    >>> query = zc.icp.HEADER_LAYOUT + zc.icp.QUERY_LAYOUT\n    >>> url = 'http://example.com/\\0'\n    >>> format = query % len(url)\n    >>> icp_request = struct.pack(\n    ...     format, 1, 2, struct.calcsize(format), 0xDEADBEEF, 0, 0, 0, 0, url)\n    >>> print zc.icp.format_datagram(icp_request)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |  ICP_OP_QUERY |   Version: 2  |     Message Length: 44        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Request Number: DEADBEEF                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Options: 0                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Option Data: 0                             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Sender Host Address: 0                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                               |\n    |    Payload: \\x00\\x00\\x00\\x00http://example.com/\\x00           |\n    |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nAfter sending the request we get back a response.\n\n    >>> import socket\n    >>> s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    >>> s.connect(('localhost', 3130))\n\n    >>> s.send(icp_request)\n    44\n    >>> icp_response = s.recv(16384)\n    >>> icp_response\n    '\\x03\\x02\\x00(\\xde\\xad\\xbe\\xef\\x00\\x00\\x00\\x00\\...http://example.com/\\x00'\n    >>> print zc.icp.format_datagram(icp_response)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |  ICP_OP_MISS  |   Version: 2  |     Message Length: 40        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Request Number: DEADBEEF                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Options: 0                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Option Data: 0                             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Sender Host Address: 0                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                               |\n    |    Payload: http://example.com/\\x00                           |\n    |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThat was a miss.  We can also provoke a hit by satisfying one of our policies.\n\n    >>> url = 'http://example.com/foo\\0'\n    >>> format = query % len(url)\n    >>> icp_request = struct.pack(\n    ...     format, 1, 2, struct.calcsize(format), 0xDEADBEEF, 0, 0, 0, 0, url)\n    >>> print zc.icp.format_datagram(icp_request)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |  ICP_OP_QUERY |   Version: 2  |     Message Length: 47        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Request Number: DEADBEEF                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Options: 0                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Option Data: 0                             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Sender Host Address: 0                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                               |\n    |    Payload: \\x00\\x00\\x00\\x00http://example.com/foo\\x00        |\n    |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n    >>> s.send(icp_request)\n    47\n    >>> print zc.icp.format_datagram(s.recv(16384))\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |  ICP_OP_HIT   |   Version: 2  |     Message Length: 43        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Request Number: DEADBEEF                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Options: 0                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Option Data: 0                             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                    Sender Host Address: 0                     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                                                               |\n    |    Payload: http://example.com/foo\\x00                        |\n    |                                                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "svn+ssh://svn.zope.com/repos/main/zc.icp", "keywords": null, "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "zc.icp", "package_url": "https://pypi.org/project/zc.icp/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zc.icp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "svn+ssh://svn.zope.com/repos/main/zc.icp"}, "release_url": "https://pypi.org/project/zc.icp/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Small, pluggable ICP (Internet Cache Protocol) server", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>In multi-machine (or multi-process) web server installations some set of web\nservers will likely be more able to quickly service an HTTP request than\nothers.  HTTP accelerators (reverse proxies) like <a href=\"#squid\" rel=\"nofollow\">Squid</a> can use <a href=\"#icp\" rel=\"nofollow\">ICP</a> queries\nto find the most appropriate server(s) to handle a particular request.  This\npackage provides a small UDP server that can respond to ICP queries based on\npluggable policies.</p>\n<table id=\"icp\">\n<col><col>\n<tbody>\n<tr><td>[ICP]</td><td><a href=\"http://www.faqs.org/rfcs/rfc2186.html\" rel=\"nofollow\">http://www.faqs.org/rfcs/rfc2186.html</a></td></tr>\n</tbody>\n</table>\n<table id=\"squid\">\n<col><col>\n<tbody>\n<tr><td>[Squid]</td><td><a href=\"http://www.squid-cache.org/\" rel=\"nofollow\">http://www.squid-cache.org/</a></td></tr>\n</tbody>\n</table>\n<div id=\"change-history\">\n<h2>Change history</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">1.0.0 (2008-02-07)</span></h2>\n<p>Initial release.</p>\n</div>\n<div id=\"when-icp-is-useful\">\n<h2>When ICP is Useful</h2>\n<p>When generating content dynamically, having all the data available locally to\nfulfil a request can have a profound effect on service time.  One approach to\nhaving the data available is to have one or more caches.  In some situations\nthose caches are not large enough to contain the entire working set required\nfor efficient servicing of incoming requests.  Adding additional request\nhandlers (servers or processes) doesn\u2019t help because the time to load the data\nfrom one or more storage servers (e.g., databases) is the dominant factor in\nrequest time.  In those situations the request space can be partitioned such\nthat the portion of the working set a particular handler (server or process) is\nresponsible for can fit in its cache(s).</p>\n<p>Statically configuring request space partitioning may be difficult,\nerror-prone, or even impossible.  In those circumstances it would be nice to\nlet the origin servers provide feedback on whether or not they should handle a\nparticular request.  That\u2019s where ICP comes in.</p>\n</div>\n<div id=\"hits-and-misses\">\n<h2>Hits and Misses</h2>\n<p>When an ICP query request is received, the server can return one of ICP_OP_HIT,\nICP_OP_MISS, ICP_OP_ERR, ICP_OP_MISS_NOFETCH, or ICP_OP_DENIED.  The meanings\nof these result codes are defined in the ICP RFC as below.</p>\n<dl>\n<dt>ICP_OP_HIT</dt>\n<dd>An ICP_OP_HIT response indicates that the requested URL exists in\nthis cache and that the requester is allowed to retrieve it.</dd>\n<dt>ICP_OP_MISS</dt>\n<dd>An ICP_OP_MISS response indicates that the requested URL does not\nexist in this cache.  The querying cache may still choose to fetch\nthe URL from the replying cache.</dd>\n<dt>ICP_OP_ERR</dt>\n<dd>An ICP_OP_ERR response indicates some kind of error in parsing or\nhandling the query message (e.g. invalid URL).</dd>\n<dt>ICP_OP_MISS_NOFETCH</dt>\n<dd><p>An ICP_OP_MISS_NOFETCH response indicates that this cache is up,\nbut is in a state where it does not want to handle cache misses.\nAn example of such a state is during a startup phase where a cache\nmight be rebuilding its object store.  A cache in such a mode may\nwish to return ICP_OP_HIT for cache hits, but not ICP_OP_MISS for\nmisses.  ICP_OP_MISS_NOFETCH essentially means \u201cI am up and\nrunning, but please don\u2019t fetch this URL from me now.\u201d</p>\n<p>Note, ICP_OP_MISS_NOFETCH has a different meaning than\nICP_OP_MISS.  The ICP_OP_MISS reply is an invitation to fetch the\nURL from the replying cache (if their relationship allows it), but\nICP_OP_MISS_NOFETCH is a request to NOT fetch the URL from the\nreplying cache.</p>\n</dd>\n<dt>ICP_OP_DENIED</dt>\n<dd>An ICP_OP_DENIED response indicates that the querying site is not\nallowed to retrieve the named object from this cache.  Caches and\nproxies may implement complex access controls.  This reply must be\nbe interpreted to mean \u201cyou are not allowed to request this\nparticular URL from me at this particular time.\u201d</dd>\n</dl>\n<p>Because we want to use ICP to communicate about whether or not an origin server\n(as opposed to a cache server) wants to handle a particular request, we will\nuse slightly different definitions for some of the result codes.</p>\n<dl>\n<dt>ICP_OP_HIT</dt>\n<dd>An ICP_OP_HIT response indicates that the queried server would prefer to\nhandle the HTTP request.  The reason the origin server is returning a hit\nmight be that it has recently handled \u201csimilar\u201d requests, or that it has\nbeen configured to handle the partition of the URL space occupied by the\ngiven URL.</dd>\n<dt>ICP_OP_MISS</dt>\n<dd>An ICP_OP_MISS response indicates that the queried server does not have a\npreference to service the request, but will be able to handle the request\nnonetheless.  This is normally the default response.</dd>\n<dt>ICP_OP_MISS_NOFETCH</dt>\n<dd>An ICP_OP_MISS_NOFETCH response indicates that the requesting server may\nnot request the named object from this server.  This may be because the\norigin server is under heavy load at the time or some other policy\nindicates that the request must not be forwarded at the moment.</dd>\n</dl>\n<p>The response (hit, miss, etc.) to a particular ICP query is based on one or\nmore configured policies.  The mechanics of defining and registering those\npolicies is explained in the next section.</p>\n<p>This package does not implement the deprecated ICP_OP_HIT_OBJ.</p>\n</div>\n<div id=\"defining-policies\">\n<h2>Defining Policies</h2>\n<p>To use this package one or more polices must be defined and registered.  The\nZope component architecture is used to manage the polices as \u201cutilities\u201d.</p>\n<p>Policies must implement the IICPPolicy interface.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zc.icp.interfaces import IICPPolicy\n&gt;&gt;&gt; IICPPolicy\n&lt;InterfaceClass zc.icp.interfaces.IICPPolicy&gt;\n</pre>\n</blockquote>\n<p>At this point no policy is registered, so any URL will generate a miss.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zc.icp\n&gt;&gt;&gt; zc.icp.check_url('http://example.com/foo')\n'ICP_OP_MISS'\n</pre>\n</blockquote>\n<p>Let\u2019s say we want to return an ICP_OP_HIT for all URLs containing \u201cfoo\u201d, we\ncan define that policy like so:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; def foo_hit_policy(url):\n...     if 'foo' in url:\n...         return 'ICP_OP_HIT'\n</pre>\n</blockquote>\n<p>When registering this policy we have to provide an associated name.  Any\nsubsequent registration with the same name will override the previous\nregistration.  The default name is the empty string.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import zope.component\n&gt;&gt;&gt; zope.component.provideUtility(foo_hit_policy, IICPPolicy, 'foo')\n</pre>\n</blockquote>\n<p>The registered policy is immediately available.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.icp.check_url('http://example.com/foo')\n'ICP_OP_HIT'\n</pre>\n</blockquote>\n<p>Non-foo URLs are still misses.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.icp.check_url('http://example.com/bar')\n'ICP_OP_MISS'\n</pre>\n</blockquote>\n<p>Now we can add another policy to indicate that we don\u2019t want any requests with\n\u201cbaz\u201d in them.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; def baz_hit_policy(url):\n...     if 'baz' in url:\n...         return 'ICP_OP_MISS_NOFETCH'\n&gt;&gt;&gt; zope.component.provideUtility(baz_hit_policy, IICPPolicy, 'baz')\n</pre>\n<pre>&gt;&gt;&gt; zc.icp.check_url('http://example.com/foo')\n'ICP_OP_HIT'\n&gt;&gt;&gt; zc.icp.check_url('http://example.com/bar')\n'ICP_OP_MISS'\n&gt;&gt;&gt; zc.icp.check_url('http://example.com/baz')\n'ICP_OP_MISS_NOFETCH'\n</pre>\n</blockquote>\n<p>The policies are prioritized by name.  The first policy to return a non-None\nresult is followed.  Therefore if we check a URL with both \u201cfoo\u201d and \u201cbaz\u201d in\nit, the policy for \u201cbaz\u201d is followed.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.icp.check_url('http://example.com/foo/baz')\n'ICP_OP_MISS_NOFETCH'\n</pre>\n</blockquote>\n</div>\n<div id=\"running-the-server\">\n<h2>Running the Server</h2>\n<p>Starting the server begins listening on the given port and IP.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; zc.icp.start_server('localhost', 3130)\ninfo: ICP server started\n    Address: localhost\n    Port: 3130\n</pre>\n</blockquote>\n<p>Now we can start sending ICP requests and get responses back.  To do so we must\nfirst construct an ICP request.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import struct\n&gt;&gt;&gt; query = zc.icp.HEADER_LAYOUT + zc.icp.QUERY_LAYOUT\n&gt;&gt;&gt; url = 'http://example.com/\\0'\n&gt;&gt;&gt; format = query % len(url)\n&gt;&gt;&gt; icp_request = struct.pack(\n...     format, 1, 2, struct.calcsize(format), 0xDEADBEEF, 0, 0, 0, 0, url)\n&gt;&gt;&gt; print zc.icp.format_datagram(icp_request)\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  ICP_OP_QUERY |   Version: 2  |     Message Length: 44        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Request Number: DEADBEEF                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Options: 0                                 |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Option Data: 0                             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Sender Host Address: 0                     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n|    Payload: \\x00\\x00\\x00\\x00http://example.com/\\x00           |\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n</pre>\n</blockquote>\n<p>After sending the request we get back a response.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import socket\n&gt;&gt;&gt; s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n&gt;&gt;&gt; s.connect(('localhost', 3130))\n</pre>\n<pre>&gt;&gt;&gt; s.send(icp_request)\n44\n&gt;&gt;&gt; icp_response = s.recv(16384)\n&gt;&gt;&gt; icp_response\n'\\x03\\x02\\x00(\\xde\\xad\\xbe\\xef\\x00\\x00\\x00\\x00\\...http://example.com/\\x00'\n&gt;&gt;&gt; print zc.icp.format_datagram(icp_response)\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  ICP_OP_MISS  |   Version: 2  |     Message Length: 40        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Request Number: DEADBEEF                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Options: 0                                 |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Option Data: 0                             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Sender Host Address: 0                     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n|    Payload: http://example.com/\\x00                           |\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n</pre>\n</blockquote>\n<p>That was a miss.  We can also provoke a hit by satisfying one of our policies.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; url = 'http://example.com/foo\\0'\n&gt;&gt;&gt; format = query % len(url)\n&gt;&gt;&gt; icp_request = struct.pack(\n...     format, 1, 2, struct.calcsize(format), 0xDEADBEEF, 0, 0, 0, 0, url)\n&gt;&gt;&gt; print zc.icp.format_datagram(icp_request)\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  ICP_OP_QUERY |   Version: 2  |     Message Length: 47        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Request Number: DEADBEEF                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Options: 0                                 |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Option Data: 0                             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Sender Host Address: 0                     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n|    Payload: \\x00\\x00\\x00\\x00http://example.com/foo\\x00        |\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n</pre>\n<pre>&gt;&gt;&gt; s.send(icp_request)\n47\n&gt;&gt;&gt; print zc.icp.format_datagram(s.recv(16384))\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  ICP_OP_HIT   |   Version: 2  |     Message Length: 43        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Request Number: DEADBEEF                   |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Options: 0                                 |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Option Data: 0                             |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Sender Host Address: 0                     |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                                                               |\n|    Payload: http://example.com/foo\\x00                        |\n|                                                               |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n</pre>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 802177, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6cc5ace77b4e6463706dacf3c3d84ced", "sha256": "f379638ffd391cb3cef2b912f55587469c873ab5ecf8192b8ef43581671af2ab"}, "downloads": -1, "filename": "zc.icp-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6cc5ace77b4e6463706dacf3c3d84ced", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10036, "upload_time": "2008-02-07T18:32:19", "upload_time_iso_8601": "2008-02-07T18:32:19Z", "url": "https://files.pythonhosted.org/packages/e8/16/637211a0e041158e8177695421e6fcfb1b5cdf3d75b3c77b2bf6c73d03fb/zc.icp-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6cc5ace77b4e6463706dacf3c3d84ced", "sha256": "f379638ffd391cb3cef2b912f55587469c873ab5ecf8192b8ef43581671af2ab"}, "downloads": -1, "filename": "zc.icp-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6cc5ace77b4e6463706dacf3c3d84ced", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10036, "upload_time": "2008-02-07T18:32:19", "upload_time_iso_8601": "2008-02-07T18:32:19Z", "url": "https://files.pythonhosted.org/packages/e8/16/637211a0e041158e8177695421e6fcfb1b5cdf3d75b3c77b2bf6c73d03fb/zc.icp-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:18 2020"}