{"info": {"author": "Matthew Seal", "author_email": "mseal@opengov.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2 :: Only", "Topic :: Utilities"], "description": "GridWalker\r\n==========\r\n\r\nAn iterable multi-dimensional grid used for exhaustive search and\r\ndimensional problem solving.\r\n\r\nDescription\r\n-----------\r\n\r\nDefines a Grid object which allows for efficient iteration across an\r\narbitrary number of dimensions. The grid objects allow for iteration,\r\nmulti-dimensional select, and multi-dimensional slicing.\r\n\r\nAccessing a grid follows the ``__getitem__`` convention of ``[index]``.\r\nTo retrieve a multi-dimensional selection either ``[index1, index2]`` or\r\n``[(index1, index2)]`` may be used to specify the ordered dimensions of\r\nthe grid to subselect. Any of the index requests can be replaced by a\r\nslice object such that ``[index1, start2:end2:step2]`` is a legal\r\nrequest.\r\n\r\nSlices provide SubGrid objects which act as grids, but map their\r\nreferenced data back to the original grid object. This allows for\r\nrepeated slicing of a grid with near constant memory overhead at the\r\ncost of layered slice requests for each change on the original data.\r\n\r\nThere are several provided Grids which are setup for efficiency for the\r\ngiven data type. So far those include IntGrid, FloatGrid, and ObjectGrid\r\n-- the latter of which is a general solution without efficient storage.\r\nThese grid types define the data being stored, rather than the indexing\r\nscheme. All grids use an integer based indexing, though there are plans\r\nto create a float range grid which does the float to index mapping\r\nbehind the interface.\r\n\r\nNote that creating grids with many dimensions can take up an extremely\r\nlarge amount of memory, even when using an efficient scheme. This\r\nextends to a very long iteration times as the number of elements to\r\nvisit grows exponentially. Take a 5 dimensional grid with 10 values for\r\neach dimension. this makes a 10^5 element grid -- which is 100k\r\niterables -- and would take ~400kb of storage space. The same grid with\r\n100 values for each dimension would have 40 billion elements and take\r\nmore than 37GB of memory to store.\r\n\r\nDependencies\r\n------------\r\n\r\n-  pydatawrap\r\n-  numpy\r\n\r\nSetup\r\n-----\r\n\r\nInstallation\r\n~~~~~~~~~~~~\r\n\r\nFrom source:\r\n\r\n::\r\n\r\n    python settup.py install\r\n\r\nFrom pip:\r\n\r\n::\r\n\r\n    pip install gridwalker\r\n\r\nFeatures\r\n--------\r\n\r\n-  Multi-Dimensional grid definitions with arbitrary number of\r\n   dimensions\r\n-  Iteration and assignment through efficient means across any\r\n   dimensional assignment\r\n\r\nNavigating the Repo\r\n-------------------\r\n\r\ngridwalker\r\n~~~~~~~~~~\r\n\r\nThe implementation files for the repository.\r\n\r\ntests\r\n~~~~~\r\n\r\nAll unit tests for the repo.\r\n\r\nLanguage Preferences\r\n--------------------\r\n\r\n-  Google Style Guide\r\n-  Object Oriented (with a few exceptions)\r\n\r\nTODO\r\n----\r\n\r\n-  Create float index grids for floating precision grid iteration\r\n\r\nAuthor\r\n------\r\n\r\nAuthor(s): Matthew Seal\r\n\r\n\u00a9 Copyright 2013, `OpenGov <http://opengov.com>`__", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/OpenGov/grid_walker/tarball/v1.0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/OpenGov/grid_walker", "keywords": "grids,data,iterator,multi-dimensional", "license": "New BSD", "maintainer": null, "maintainer_email": null, "name": "GridWalker", "package_url": "https://pypi.org/project/GridWalker/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/GridWalker/", "project_urls": {"Download": "https://github.com/OpenGov/grid_walker/tarball/v1.0.1", "Homepage": "https://github.com/OpenGov/grid_walker"}, "release_url": "https://pypi.org/project/GridWalker/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "A multi-dimensional grid used for state space searching", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>An iterable multi-dimensional grid used for exhaustive search and\ndimensional problem solving.</p>\n<div id=\"description\">\n<h2>Description</h2>\n<p>Defines a Grid object which allows for efficient iteration across an\narbitrary number of dimensions. The grid objects allow for iteration,\nmulti-dimensional select, and multi-dimensional slicing.</p>\n<p>Accessing a grid follows the <tt>__getitem__</tt> convention of <tt>[index]</tt>.\nTo retrieve a multi-dimensional selection either <tt>[index1, index2]</tt> or\n<tt>[(index1, index2)]</tt> may be used to specify the ordered dimensions of\nthe grid to subselect. Any of the index requests can be replaced by a\nslice object such that <tt>[index1, start2:end2:step2]</tt> is a legal\nrequest.</p>\n<p>Slices provide SubGrid objects which act as grids, but map their\nreferenced data back to the original grid object. This allows for\nrepeated slicing of a grid with near constant memory overhead at the\ncost of layered slice requests for each change on the original data.</p>\n<p>There are several provided Grids which are setup for efficiency for the\ngiven data type. So far those include IntGrid, FloatGrid, and ObjectGrid\n\u2013 the latter of which is a general solution without efficient storage.\nThese grid types define the data being stored, rather than the indexing\nscheme. All grids use an integer based indexing, though there are plans\nto create a float range grid which does the float to index mapping\nbehind the interface.</p>\n<p>Note that creating grids with many dimensions can take up an extremely\nlarge amount of memory, even when using an efficient scheme. This\nextends to a very long iteration times as the number of elements to\nvisit grows exponentially. Take a 5 dimensional grid with 10 values for\neach dimension. this makes a 10^5 element grid \u2013 which is 100k\niterables \u2013 and would take ~400kb of storage space. The same grid with\n100 values for each dimension would have 40 billion elements and take\nmore than 37GB of memory to store.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>pydatawrap</li>\n<li>numpy</li>\n</ul>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<h2 id=\"installation\"><span class=\"section-subtitle\">Installation</span></h2>\n<p>From source:</p>\n<pre>python settup.py install\n</pre>\n<p>From pip:</p>\n<pre>pip install gridwalker\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Multi-Dimensional grid definitions with arbitrary number of\ndimensions</li>\n<li>Iteration and assignment through efficient means across any\ndimensional assignment</li>\n</ul>\n</div>\n<div id=\"navigating-the-repo\">\n<h2>Navigating the Repo</h2>\n<div id=\"id1\">\n<h3>gridwalker</h3>\n<p>The implementation files for the repository.</p>\n</div>\n<div id=\"tests\">\n<h3>tests</h3>\n<p>All unit tests for the repo.</p>\n</div>\n</div>\n<div id=\"language-preferences\">\n<h2>Language Preferences</h2>\n<ul>\n<li>Google Style Guide</li>\n<li>Object Oriented (with a few exceptions)</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Create float index grids for floating precision grid iteration</li>\n</ul>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Author(s): Matthew Seal</p>\n<p>\u00a9 Copyright 2013, <a href=\"http://opengov.com\" rel=\"nofollow\">OpenGov</a></p>\n</div>\n\n          </div>"}, "last_serial": 1451516, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a8d823db796c5f23e1e11e7b2b5bb33a", "sha256": "0671155a8b496e56e6446fa3c5a75489ae8921c7ef29eeb5b17e8fd96e4e9a3f"}, "downloads": -1, "filename": "GridWalker-1.0.0.zip", "has_sig": false, "md5_digest": "a8d823db796c5f23e1e11e7b2b5bb33a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13773, "upload_time": "2014-04-02T16:46:04", "upload_time_iso_8601": "2014-04-02T16:46:04.772500Z", "url": "https://files.pythonhosted.org/packages/52/41/5a4ddc29e464add086b6947bc79b0e9882f030f8c7f3e366654159208dee/GridWalker-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0f112d482784f759ae33e6837457ee68", "sha256": "bbd13eb5398de3d7963d3b32165017eb87bb87269c2dbb6080ff54b2f6d52847"}, "downloads": -1, "filename": "GridWalker-1.0.1.zip", "has_sig": false, "md5_digest": "0f112d482784f759ae33e6837457ee68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13670, "upload_time": "2015-03-06T23:34:50", "upload_time_iso_8601": "2015-03-06T23:34:50.620589Z", "url": "https://files.pythonhosted.org/packages/ae/c2/3f4af2edc212b921fb5e34557d36305615cbfb3114fd1062d1e4dc30a960/GridWalker-1.0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f112d482784f759ae33e6837457ee68", "sha256": "bbd13eb5398de3d7963d3b32165017eb87bb87269c2dbb6080ff54b2f6d52847"}, "downloads": -1, "filename": "GridWalker-1.0.1.zip", "has_sig": false, "md5_digest": "0f112d482784f759ae33e6837457ee68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13670, "upload_time": "2015-03-06T23:34:50", "upload_time_iso_8601": "2015-03-06T23:34:50.620589Z", "url": "https://files.pythonhosted.org/packages/ae/c2/3f4af2edc212b921fb5e34557d36305615cbfb3114fd1062d1e4dc30a960/GridWalker-1.0.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:54:12 2020"}