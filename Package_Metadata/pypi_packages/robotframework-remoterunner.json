{"info": {"author": "Chris Brookes", "author_email": "chris-brookes93@outlook.com", "bugtrack_url": null, "classifiers": ["Framework :: Robot Framework", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Robot Framework Remote Runner\r\n\r\n[![Build Status](https://gitlab.com/chrisBrookes93/robotframework-remoterunner/badges/master/pipeline.svg)](https://gitlab.com/chrisBrookes93/robotframework-remoterunner)\r\n[![PyPI version](https://badge.fury.io/py/robotframework-remoterunner.svg)](https://badge.fury.io/py/robotframework-remoterunner)\r\n\r\nThis library provides a robotframework slave, and accompanying robot executor script that allows you to run \r\nRobot Framework Test Suites remotely. It's designed to be a lightweight agent and can be used as an alternative, \r\nor with a CI Agent (e.g. Jenkins Slave). The executor script parses Test Suites and packages them up with their \r\ndependencies before making an RPC call to the slave. The slave writes all Test Suites and resources to a temporary directory and then executes a \r\nrobot run, returning the test result artifacts back to the invoking host.\r\n\r\n## Installation\r\n\r\nPython Dependencies:\r\n* robotframework < 3.2\r\n* six\r\n\r\nTo install the package run:\r\n```text\r\npip install -r requirements.txt\r\n```\r\nThis package will need to be installed on the slave host, and the host you wish to execute the remote run from.\r\n\r\n## Usage:\r\nThis library contains two scripts:\r\n* *rfslave* - The agent that executes the robot run.\r\n* *rfremoterun* - The script that invokes the slave to execute the robot run.\r\n\r\n### rfslave\r\n\r\nOnce installed the slave can be launched by executing the ```rfremoterunner.runslave``` package:\r\n```text\r\nC:\\>rfslave  -h\r\nusage: rfslave [-h] [-a ADDRESS] [-p PORT] [-d]\r\n\r\nScript to launch the robotframework slave. This opens an RPC port and waits\r\nfor a request to execute a robot framework test execution\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -a ADDRESS, --address ADDRESS\r\n                        Address to bind to. Default is 0.0.0.0\r\n  -p PORT, --port PORT  Port to listen on. Default is 1471\r\n  -d, --debug           Enables debug logging and will not delete the\r\n                        temporary directory after a robot run\r\n```\r\nExample usage:\r\n```text\r\nC:\\rfslave -a 192.168.56.102 -p 1471\r\nListening on 192.168.56.102:1471\r\n```\r\n\r\n### rfremoterun\r\nOnce installed a remote robot running the executable:\r\n```text\r\nC:\\DEV>rfremoterun -h\r\nusage: rfremoterun [-h] [--debug] [-d OUTPUTDIR] [-o OUTPUT] [-l LOG]\r\n                   [-r REPORT] [-F EXTENSION] [-s SUITE] [-t TEST]\r\n                   [-i INCLUDE] [-e EXCLUDE] [-L LOGLEVEL]\r\n                   host suites [suites ...]\r\n\r\nScript to initiate a remote robot framework test execution\r\n\r\npositional arguments:\r\n  host                  IP or Hostname of the server to execute the robot run\r\n                        on. You can optionally specify the port the server is\r\n                        listening on by adding \":<port>\". If not specified the\r\n                        port will be defaulted to 1471\r\n  suites                One or more paths to test suites or directories\r\n                        containing test suites\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  --debug               Run in debug mode. This will enable debug logging and\r\n                        does not cleanup the workspace directory on the remote\r\n                        machine after test execution\r\n  -d OUTPUTDIR, --outputdir OUTPUTDIR\r\n                        Where to create the output files on this machine once\r\n                        they've been retrieved. The default is the directory\r\n                        that this script is run from\r\n  -o OUTPUT, --output OUTPUT\r\n                        Where to save the XML output file on this machine once\r\n                        its been retrieved. Given path, similarly as paths\r\n                        given to --log and --report is path. Other output\r\n                        files are created based on XML output files after the\r\n                        test execution and XML outputs can also be further\r\n                        processed with Rebot tool. Default: remote_output.xml\r\n  -l LOG, --log LOG     Where to save the HTML Log file on this machine once\r\n                        its been retrieved. Default: remote_log.html\r\n  -r REPORT, --report REPORT\r\n                        Where to save the HTML Report file on this machine\r\n                        once its been retrieved. Default: remote_report.html\r\n  -F EXTENSION, --extension EXTENSION\r\n                        Parse only files with this extension when executing a\r\n                        directory. Has no effect when running individual files\r\n                        or when using resource files. If more than one\r\n                        extension is needed, separate them with a colon.\r\n                        Examples: `--extension robot`, `-F robot:txt`\r\n  -s SUITE, --suite SUITE\r\n                        Select test suites to run by name. When this option is\r\n                        used with --test, --include or --exclude, only test\r\n                        cases in matching suites and also matching other\r\n                        filtering criteria are selected. Name can be a simple\r\n                        pattern similarly as with --test and it can contain\r\n                        parent name separated with a dot. You can specify\r\n                        multiple filters by concatenating with a colon. For\r\n                        example `-s X.Y` selects suite `Y` only if its parent\r\n                        is `X`. -s X:Y:Z selects X, Y & Z\r\n  -t TEST, --test TEST  Select test cases to run by name or long name. Name is\r\n                        case insensitive and it can also be a simple pattern\r\n                        where `*` matches anything and `?` matches any char.\r\n                        To specify multiple, concatenate with a colon.\r\n                        Example: -t Foo*:Bar*\r\n  -i INCLUDE, --include INCLUDE\r\n                        Select test cases to run by tag. Similarly as name\r\n                        with --test, tag is case and space insensitive and it\r\n                        is possible to use patterns with `*` and `?` as\r\n                        wildcards. Tags and patterns can also be combined\r\n                        together with `AND`, `OR`, and `NOT` operators.\r\n                        Examples: --include foo, --include bar*, --include\r\n                        fooANDbar*\r\n  -e EXCLUDE, --exclude EXCLUDE\r\n                        Select test cases not to run by tag. These tests are\r\n                        not run even if included with --include. Tags are\r\n                        matched using the rules explained with --include.\r\n  -L LOGLEVEL, --loglevel LOGLEVEL\r\n                        Threshold level for logging. Available levels: TRACE,\r\n                        DEBUG, INFO (default), WARN, NONE (no logging). Use\r\n                        syntax `LOGLEVEL:DEFAULT` to define the default\r\n                        visible log level in log files. Examples: --loglevel\r\n                        DEBUG --loglevel DEBUG:INFO\r\n\r\n```\r\nThe executor script currently supports a subset of the arguments that ```robot.run``` supports.\r\n\r\nExample usage:\r\n```text\r\nC:\\DEV> rfremoterun 192.168.56.102 C:\\DEV\\robotframework-slave\\tests\\robot\\ --loglevel DEBUG --outputdir ./\r\nConnecting to: http://192.168.56.102:1471\r\n\r\nRobot execution response:\r\n==============================================================================\r\nRoot\r\n==============================================================================\r\nRoot.TS1\r\n==============================================================================\r\nTS1.1                                                                 | PASS |\r\n------------------------------------------------------------------------------\r\nRoot.TS1                                                              | PASS |\r\n1 critical test, 1 passed, 0 failed\r\n1 test total, 1 passed, 0 failed\r\n==============================================================================\r\nRoot                                                                  | PASS |\r\n1 critical test, 1 passed, 0 failed\r\n1 test total, 1 passed, 0 failed\r\n==============================================================================\r\nOutput:  c:\\users\\user1\\appdata\\local\\temp\\tmpy26cmp\\output.xml\r\nLog:     c:\\users\\user1\\appdata\\local\\temp\\tmpy26cmp\\log.html\r\nReport:  c:\\users\\user1\\appdata\\local\\temp\\tmpy26cmp\\report.html\r\n\r\nLocal Output:  C:\\DEV\\remote_output.xml\r\nLocal Log:     C:\\DEV\\remote_log.html\r\nLocal Report:  C:\\DEV\\remote_report.html\r\n```\r\n\r\n## Current Limitations:\r\n- HTTPS is not yet supported\r\n- Any Python Keyword libraries' dependencies are not packaged up and sent to the remote host. Any external Python \r\npackages that the Keywords rely on will need to be installed on the remote host.\r\n\r\n## Future Features:\r\n- Extend Executor script to support all ```robot.run``` arguments.\r\n- Add support for Robot Variable files.\r\n- Implement an asynchronous mode with the ability to poll the slave for a status on a particular robot execution.\r\n- Add support to run on multiple hosts (concurrently).\r\n\r\n\r\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/chrisBrookes93/robotframework-remoterunner/archive/1.2.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chrisBrookes93/robotframework-remotrunner", "keywords": "robotframework automation testautomation rpa testing acceptancetesting atdd bdd", "license": "", "maintainer": "", "maintainer_email": "", "name": "robotframework-remoterunner", "package_url": "https://pypi.org/project/robotframework-remoterunner/", "platform": "", "project_url": "https://pypi.org/project/robotframework-remoterunner/", "project_urls": {"Download": "https://github.com/chrisBrookes93/robotframework-remoterunner/archive/1.2.0.tar.gz", "Homepage": "https://github.com/chrisBrookes93/robotframework-remotrunner"}, "release_url": "https://pypi.org/project/robotframework-remoterunner/1.2.0/", "requires_dist": ["robotframework (<3.2)", "six"], "requires_python": "", "summary": "A library that provides the ability to execute RobotFramework test suites on a remote host.", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Robot Framework Remote Runner</h1>\n<p><a href=\"https://gitlab.com/chrisBrookes93/robotframework-remoterunner\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a4778c8f76b7256d61ec4974b78536280461f9d2/68747470733a2f2f6769746c61622e636f6d2f636872697342726f6f6b657339332f726f626f746672616d65776f726b2d72656d6f746572756e6e65722f6261646765732f6d61737465722f706970656c696e652e737667\"></a>\n<a href=\"https://badge.fury.io/py/robotframework-remoterunner\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/511f97ab60ef80d4210047843bc2bb79047f86cf/68747470733a2f2f62616467652e667572792e696f2f70792f726f626f746672616d65776f726b2d72656d6f746572756e6e65722e737667\"></a></p>\n<p>This library provides a robotframework slave, and accompanying robot executor script that allows you to run\nRobot Framework Test Suites remotely. It's designed to be a lightweight agent and can be used as an alternative,\nor with a CI Agent (e.g. Jenkins Slave). The executor script parses Test Suites and packages them up with their\ndependencies before making an RPC call to the slave. The slave writes all Test Suites and resources to a temporary directory and then executes a\nrobot run, returning the test result artifacts back to the invoking host.</p>\n<h2>Installation</h2>\n<p>Python Dependencies:</p>\n<ul>\n<li>robotframework &lt; 3.2</li>\n<li>six</li>\n</ul>\n<p>To install the package run:</p>\n<pre>pip install -r requirements.txt\n</pre>\n<p>This package will need to be installed on the slave host, and the host you wish to execute the remote run from.</p>\n<h2>Usage:</h2>\n<p>This library contains two scripts:</p>\n<ul>\n<li><em>rfslave</em> - The agent that executes the robot run.</li>\n<li><em>rfremoterun</em> - The script that invokes the slave to execute the robot run.</li>\n</ul>\n<h3>rfslave</h3>\n<p>Once installed the slave can be launched by executing the <code>rfremoterunner.runslave</code> package:</p>\n<pre>C:\\&gt;rfslave  -h\nusage: rfslave [-h] [-a ADDRESS] [-p PORT] [-d]\n\nScript to launch the robotframework slave. This opens an RPC port and waits\nfor a request to execute a robot framework test execution\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a ADDRESS, --address ADDRESS\n                        Address to bind to. Default is 0.0.0.0\n  -p PORT, --port PORT  Port to listen on. Default is 1471\n  -d, --debug           Enables debug logging and will not delete the\n                        temporary directory after a robot run\n</pre>\n<p>Example usage:</p>\n<pre>C:\\rfslave -a 192.168.56.102 -p 1471\nListening on 192.168.56.102:1471\n</pre>\n<h3>rfremoterun</h3>\n<p>Once installed a remote robot running the executable:</p>\n<pre>C:\\DEV&gt;rfremoterun -h\nusage: rfremoterun [-h] [--debug] [-d OUTPUTDIR] [-o OUTPUT] [-l LOG]\n                   [-r REPORT] [-F EXTENSION] [-s SUITE] [-t TEST]\n                   [-i INCLUDE] [-e EXCLUDE] [-L LOGLEVEL]\n                   host suites [suites ...]\n\nScript to initiate a remote robot framework test execution\n\npositional arguments:\n  host                  IP or Hostname of the server to execute the robot run\n                        on. You can optionally specify the port the server is\n                        listening on by adding \":&lt;port&gt;\". If not specified the\n                        port will be defaulted to 1471\n  suites                One or more paths to test suites or directories\n                        containing test suites\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --debug               Run in debug mode. This will enable debug logging and\n                        does not cleanup the workspace directory on the remote\n                        machine after test execution\n  -d OUTPUTDIR, --outputdir OUTPUTDIR\n                        Where to create the output files on this machine once\n                        they've been retrieved. The default is the directory\n                        that this script is run from\n  -o OUTPUT, --output OUTPUT\n                        Where to save the XML output file on this machine once\n                        its been retrieved. Given path, similarly as paths\n                        given to --log and --report is path. Other output\n                        files are created based on XML output files after the\n                        test execution and XML outputs can also be further\n                        processed with Rebot tool. Default: remote_output.xml\n  -l LOG, --log LOG     Where to save the HTML Log file on this machine once\n                        its been retrieved. Default: remote_log.html\n  -r REPORT, --report REPORT\n                        Where to save the HTML Report file on this machine\n                        once its been retrieved. Default: remote_report.html\n  -F EXTENSION, --extension EXTENSION\n                        Parse only files with this extension when executing a\n                        directory. Has no effect when running individual files\n                        or when using resource files. If more than one\n                        extension is needed, separate them with a colon.\n                        Examples: `--extension robot`, `-F robot:txt`\n  -s SUITE, --suite SUITE\n                        Select test suites to run by name. When this option is\n                        used with --test, --include or --exclude, only test\n                        cases in matching suites and also matching other\n                        filtering criteria are selected. Name can be a simple\n                        pattern similarly as with --test and it can contain\n                        parent name separated with a dot. You can specify\n                        multiple filters by concatenating with a colon. For\n                        example `-s X.Y` selects suite `Y` only if its parent\n                        is `X`. -s X:Y:Z selects X, Y &amp; Z\n  -t TEST, --test TEST  Select test cases to run by name or long name. Name is\n                        case insensitive and it can also be a simple pattern\n                        where `*` matches anything and `?` matches any char.\n                        To specify multiple, concatenate with a colon.\n                        Example: -t Foo*:Bar*\n  -i INCLUDE, --include INCLUDE\n                        Select test cases to run by tag. Similarly as name\n                        with --test, tag is case and space insensitive and it\n                        is possible to use patterns with `*` and `?` as\n                        wildcards. Tags and patterns can also be combined\n                        together with `AND`, `OR`, and `NOT` operators.\n                        Examples: --include foo, --include bar*, --include\n                        fooANDbar*\n  -e EXCLUDE, --exclude EXCLUDE\n                        Select test cases not to run by tag. These tests are\n                        not run even if included with --include. Tags are\n                        matched using the rules explained with --include.\n  -L LOGLEVEL, --loglevel LOGLEVEL\n                        Threshold level for logging. Available levels: TRACE,\n                        DEBUG, INFO (default), WARN, NONE (no logging). Use\n                        syntax `LOGLEVEL:DEFAULT` to define the default\n                        visible log level in log files. Examples: --loglevel\n                        DEBUG --loglevel DEBUG:INFO\n</pre>\n<p>The executor script currently supports a subset of the arguments that <code>robot.run</code> supports.</p>\n<p>Example usage:</p>\n<pre>C:\\DEV&gt; rfremoterun 192.168.56.102 C:\\DEV\\robotframework-slave\\tests\\robot\\ --loglevel DEBUG --outputdir ./\nConnecting to: http://192.168.56.102:1471\n\nRobot execution response:\n==============================================================================\nRoot\n==============================================================================\nRoot.TS1\n==============================================================================\nTS1.1                                                                 | PASS |\n------------------------------------------------------------------------------\nRoot.TS1                                                              | PASS |\n1 critical test, 1 passed, 0 failed\n1 test total, 1 passed, 0 failed\n==============================================================================\nRoot                                                                  | PASS |\n1 critical test, 1 passed, 0 failed\n1 test total, 1 passed, 0 failed\n==============================================================================\nOutput:  c:\\users\\user1\\appdata\\local\\temp\\tmpy26cmp\\output.xml\nLog:     c:\\users\\user1\\appdata\\local\\temp\\tmpy26cmp\\log.html\nReport:  c:\\users\\user1\\appdata\\local\\temp\\tmpy26cmp\\report.html\n\nLocal Output:  C:\\DEV\\remote_output.xml\nLocal Log:     C:\\DEV\\remote_log.html\nLocal Report:  C:\\DEV\\remote_report.html\n</pre>\n<h2>Current Limitations:</h2>\n<ul>\n<li>HTTPS is not yet supported</li>\n<li>Any Python Keyword libraries' dependencies are not packaged up and sent to the remote host. Any external Python\npackages that the Keywords rely on will need to be installed on the remote host.</li>\n</ul>\n<h2>Future Features:</h2>\n<ul>\n<li>Extend Executor script to support all <code>robot.run</code> arguments.</li>\n<li>Add support for Robot Variable files.</li>\n<li>Implement an asynchronous mode with the ability to poll the slave for a status on a particular robot execution.</li>\n<li>Add support to run on multiple hosts (concurrently).</li>\n</ul>\n\n          </div>"}, "last_serial": 7121244, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "9465ed577e3ae9b29fa5ba429d0d1db2", "sha256": "fd6a1f77f0fe0fca4fe4e1d9b141592513255fb10f5c77d4fe479e253eadbf78"}, "downloads": -1, "filename": "robotframework-remoterunner-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9465ed577e3ae9b29fa5ba429d0d1db2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12996, "upload_time": "2020-03-03T22:29:01", "upload_time_iso_8601": "2020-03-03T22:29:01.404004Z", "url": "https://files.pythonhosted.org/packages/ac/d6/4642b8af96917fd4a586d28f12bc10d2b978aa9fe5b384c6988eb2c37c0d/robotframework-remoterunner-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "925f7fe085fa75a72ba1a19b3e5a54ea", "sha256": "b63594c2a140e5ab93c5c8e70afebe0f2f00e3f3d0ce81a02325d98c69d69916"}, "downloads": -1, "filename": "robotframework_remoterunner-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "925f7fe085fa75a72ba1a19b3e5a54ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23072, "upload_time": "2020-04-23T21:47:18", "upload_time_iso_8601": "2020-04-23T21:47:18.344689Z", "url": "https://files.pythonhosted.org/packages/df/f8/8a2eeb67e5b48dac365a5f967a5855d95e0c791b698c58cb2c2c677dbee2/robotframework_remoterunner-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03a42c1d4e87e7d6b806fbfb4a189deb", "sha256": "4b163abbbf50502b63514a25e589f37c11610de94548b1b8fc5405458922ca5c"}, "downloads": -1, "filename": "robotframework-remoterunner-1.1.0.tar.gz", "has_sig": false, "md5_digest": "03a42c1d4e87e7d6b806fbfb4a189deb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18775, "upload_time": "2020-04-23T21:47:19", "upload_time_iso_8601": "2020-04-23T21:47:19.552609Z", "url": "https://files.pythonhosted.org/packages/b4/70/33f9e5bf6cdaffb06918c68ce06f33f2ec1b0ad4a7a1b56dbf5ec77e33cb/robotframework-remoterunner-1.1.0.tar.gz", "yanked": false}], "1.1.1": [], "1.2.0": [{"comment_text": "", "digests": {"md5": "a4c46426c380994b02a28cd2deaa3611", "sha256": "80e5485db5697054dbe29ecffe137c01cae4662c8b776721751f10bf641f2c51"}, "downloads": -1, "filename": "robotframework_remoterunner-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a4c46426c380994b02a28cd2deaa3611", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16016, "upload_time": "2020-04-28T15:48:36", "upload_time_iso_8601": "2020-04-28T15:48:36.683851Z", "url": "https://files.pythonhosted.org/packages/22/83/cce1c1a9af2de09bc66362d89740f8e2327581a836143e2b1907c3292cd9/robotframework_remoterunner-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4933fbd362d493cbb48f111e5fc970bf", "sha256": "48ddd911bd4e6ef9bfc8f7fea19c83d0e1aab30b6b7fda49c46692de3d02c656"}, "downloads": -1, "filename": "robotframework-remoterunner-1.2.0.tar.gz", "has_sig": false, "md5_digest": "4933fbd362d493cbb48f111e5fc970bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14581, "upload_time": "2020-04-28T15:48:38", "upload_time_iso_8601": "2020-04-28T15:48:38.420732Z", "url": "https://files.pythonhosted.org/packages/e6/3e/670dab13949b5592f497c4a3927348b88721628ff7324dbdf91e4e3c5bb2/robotframework-remoterunner-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a4c46426c380994b02a28cd2deaa3611", "sha256": "80e5485db5697054dbe29ecffe137c01cae4662c8b776721751f10bf641f2c51"}, "downloads": -1, "filename": "robotframework_remoterunner-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a4c46426c380994b02a28cd2deaa3611", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16016, "upload_time": "2020-04-28T15:48:36", "upload_time_iso_8601": "2020-04-28T15:48:36.683851Z", "url": "https://files.pythonhosted.org/packages/22/83/cce1c1a9af2de09bc66362d89740f8e2327581a836143e2b1907c3292cd9/robotframework_remoterunner-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4933fbd362d493cbb48f111e5fc970bf", "sha256": "48ddd911bd4e6ef9bfc8f7fea19c83d0e1aab30b6b7fda49c46692de3d02c656"}, "downloads": -1, "filename": "robotframework-remoterunner-1.2.0.tar.gz", "has_sig": false, "md5_digest": "4933fbd362d493cbb48f111e5fc970bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14581, "upload_time": "2020-04-28T15:48:38", "upload_time_iso_8601": "2020-04-28T15:48:38.420732Z", "url": "https://files.pythonhosted.org/packages/e6/3e/670dab13949b5592f497c4a3927348b88721628ff7324dbdf91e4e3c5bb2/robotframework-remoterunner-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:50 2020"}