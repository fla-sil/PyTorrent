{"info": {"author": "Keming Yang", "author_email": "kemingy94@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Spectree\n\n\n[![GitHub Actions](https://github.com/0b01001001/spectree/workflows/Python%20package/badge.svg)](https://github.com/0b01001001/spectree/actions)\n[![pypi](https://img.shields.io/pypi/v/spectree.svg)](https://pypi.python.org/pypi/spectree)\n[![versions](https://img.shields.io/pypi/pyversions/spectree.svg)](https://github.com/0b01001001/spectree)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/0b01001001/spectree.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/0b01001001/spectree/context:python)\n[![Documentation Status](https://readthedocs.org/projects/spectree/badge/?version=latest)](https://spectree.readthedocs.io/en/latest/?badge=latest)\n\nYet another library to generate OpenAPI document and validate request & response with Python annotations.\n\n## Features\n\n* Less boilerplate code, only annotations, no need for YAML :sparkles:\n* Generate API document with [Redoc UI](https://github.com/Redocly/redoc) or [Swagger UI](https://github.com/swagger-api/swagger-ui) :yum:\n* Validate query, JSON data, response data with [pydantic](https://github.com/samuelcolvin/pydantic/) :wink:\n* Current support:\n  * Flask [demo](#flask)\n  * Falcon [demo](#falcon)\n  * Starlette [demo](#starlette)\n\n## Quick Start\n\ninstall with pip: `pip install spectree`\n\n### Examples\n\nCheck the [examples](/examples) folder.\n\n* [flask example](/examples/flask_demo.py)\n* [falcon example with logging when validation failed](/examples/falcon_demo.py)\n* [starlette example](examples/starlette_demo.py)\n\n### Step by Step\n\n1. Define your data structure used in (query, json, headers, cookies, resp) with `pydantic.BaseModel`\n2. create `spectree.SpecTree` instance with the web framework name you are using, like `api = SpecTree('flask')`\n3. `api.validate` decorate the route with\n   * `query`\n   * `json`\n   * `headers`\n   * `cookies`\n   * `resp`\n   * `tags`\n4. access these data with `context(query, json, headers, cookies)` (of course, you can access these from the original place where the framework offered)\n   * flask: `request.context`\n   * falcon: `req.context`\n   * starlette: `request.context`\n5. register to the web application `api.register(app)`\n6. check the document at URL location `/apidoc/redoc` or `/apidoc/swagger`\n\nIf the request doesn't pass the validation, it will return a 422 with JSON error message(ctx, loc, msg, type).\n\n## How To\n\n> How to add summary and description to endpoints?\n\nJust add docs to the endpoint function. The 1st line is the summary, and the rest is the description for this endpoint.\n\n> How to add description to parameters?\n\nCheck the [pydantic](https://pydantic-docs.helpmanual.io/usage/schema/) document about description in `Field`.\n\n> Any config I can change?\n\nOf course. Check the [config](https://spectree.readthedocs.io/en/latest/config.html) document.\n\nYou can update the config when init the spectree like: \n\n```py\nSpecTree('flask', title='Demo API', version='v1.0', path='doc')\n```\n\n> What is `Response` and how to use it?\n\nTo build a response for the endpoint, you need to declare the status code with format `HTTP_{code}` and corresponding data (optional).\n\n```py\nResponse(HTTP_200=None, HTTP_403=ForbidModel)\nResponse('HTTP_200') # equals to Response(HTTP_200=None)\n```\n\n> What should I return when I'm using the library?\n\nNo need to change anything. Just return what the framework required.\n\n> How to logging when the validation failed?\n\nValidation errors are logged with INFO level. Details are passed into `extra`. Check the [falcon example](examples/falcon_demo.py) for details.\n\n> How can I write a customized plugin for another backend framework?\n\nInherit `spectree.plugins.base.BasePlugin` and implement the functions you need. After that, init like `api = SpecTree(backend=MyCustomizedPlugin)`.\n\n## Demo\n\nTry it with `http post :8000/api/user name=alice age=18`. (if you are using `httpie`)\n\n### Flask\n\n```py\nfrom flask import Flask, request, jsonify\nfrom pydantic import BaseModel, Field, constr\nfrom spectree import SpecTree, Response\n\n\nclass Profile(BaseModel):\n    name: constr(min_length=2, max_length=40) # Constrained Str\n    age: int = Field(\n        ...,\n        gt=0,\n        lt=150,\n        description='user age(Human)'\n    )\n\n\nclass Message(BaseModel):\n    text: str\n\n\napp = Flask(__name__)\napi = SpecTree('flask')\n\n\n@app.route('/api/user', methods=['POST'])\n@api.validate(json=Profile, resp=Response(HTTP_200=Message, HTTP_403=None), tags=['api'])\ndef user_profile():\n    \"\"\"\n    verify user profile (summary of this endpoint)\n\n    user's name, user's age, ... (long description)\n    \"\"\"\n    print(request.context.json) # or `request.json`\n    return jsonify(text='it works')\n\n\nif __name__ == \"__main__\":\n    api.register(app) # if you don't register in api init step\n    app.run(port=8000)\n\n```\n\n### Falcon\n\n```py\nimport falcon\nfrom wsgiref import simple_server\nfrom pydantic import BaseModel, Field, constr\nfrom spectree import SpecTree, Response\n\n\nclass Profile(BaseModel):\n    name: constr(min_length=2, max_length=40)  # Constrained Str\n    age: int = Field(\n        ...,\n        gt=0,\n        lt=150,\n        description='user age(Human)'\n    )\n\n\nclass Message(BaseModel):\n    text: str\n\n\napi = SpecTree('falcon')\n\n\nclass UserProfile:\n    @api.validate(json=Profile, resp=Response(HTTP_200=Message, HTTP_403=None), tags=['api'])\n    def on_post(self, req, resp):\n        \"\"\"\n        verify user profile (summary of this endpoint)\n\n        user's name, user's age, ... (long description)\n        \"\"\"\n        print(req.context.json)  # or `req.media`\n        resp.media = {'text': 'it works'}\n\n\nif __name__ == \"__main__\":\n    app = falcon.API()\n    app.add_route('/api/user', UserProfile())\n    api.register(app)\n\n    httpd = simple_server.make_server('localhost', 8000, app)\n    httpd.serve_forever()\n\n```\n\n### Starlette\n\n```py\nimport uvicorn\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route, Mount\nfrom starlette.responses import JSONResponse\nfrom pydantic import BaseModel, Field, constr\nfrom spectree import SpecTree, Response\n\n\nclass Profile(BaseModel):\n    name: constr(min_length=2, max_length=40)  # Constrained Str\n    age: int = Field(\n        ...,\n        gt=0,\n        lt=150,\n        description='user age(Human)'\n    )\n\n\nclass Message(BaseModel):\n    text: str\n\n\napi = SpecTree('starlette')\n\n\n@api.validate(json=Profile, resp=Response(HTTP_200=Message, HTTP_403=None), tags=['api'])\nasync def user_profile(request):\n    \"\"\"\n    verify user profile (summary of this endpoint)\n\n    user's name, user's age, ... (long description)\n    \"\"\"\n    print(request.context.json)  # or await request.json()\n    return JSONResponse({'text': 'it works'})\n\n\nif __name__ == \"__main__\":\n    app = Starlette(routes=[\n        Mount('api', routes=[\n            Route('/user', user_profile, methods=['POST']),\n        ])\n    ])\n    api.register(app)\n\n    uvicorn.run(app)\n\n```\n\n## FAQ\n\n> ValidationError: missing field for headers\n\nThe HTTP headers' keys in Flask are capitalized, in Falcon are upper cases, in Starlette are lower cases.\nYou can use [`pydantic.root_validators(pre=True)`](https://pydantic-docs.helpmanual.io/usage/validators/#root-validators) to change all the keys into lower cases or upper cases.\n\n> ValidationError: value is not a valid list for query\n\nSince there is no standard for HTTP query with multiple values, it's hard to find the way to handle this for different web frameworks. So I suggest not to use list type in query until I find a suitable way to fix it.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/0b01001001/spectree", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "spectree", "package_url": "https://pypi.org/project/spectree/", "platform": "", "project_url": "https://pypi.org/project/spectree/", "project_urls": {"Homepage": "https://github.com/0b01001001/spectree"}, "release_url": "https://pypi.org/project/spectree/0.3.3/", "requires_dist": ["pydantic (>=1.2)", "falcon ; extra == 'falcon'", "flask ; extra == 'flask'", "starlette ; extra == 'starlette'", "requests ; extra == 'starlette'"], "requires_python": ">=3.6", "summary": "generate OpenAPI document and validate request&response with Python annotations.", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Spectree</h1>\n<p><a href=\"https://github.com/0b01001001/spectree/actions\" rel=\"nofollow\"><img alt=\"GitHub Actions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2e0992b862e3fdb92ca3e84d28a161a79a03e4d/68747470733a2f2f6769746875622e636f6d2f306230313030313030312f73706563747265652f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/spectree\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ec8313d5cf9ada407f7740889dd8b9a142e70e8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73706563747265652e737667\"></a>\n<a href=\"https://github.com/0b01001001/spectree\" rel=\"nofollow\"><img alt=\"versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77388b7931c12eda65a410340238f491f8332026/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73706563747265652e737667\"></a>\n<a href=\"https://lgtm.com/projects/g/0b01001001/spectree/context:python\" rel=\"nofollow\"><img alt=\"Language grade: Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f096da3088b9f50439787a19129ce1d6a560dce1/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f306230313030313030312f73706563747265652e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a>\n<a href=\"https://spectree.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd4181a7f10b9f3461418183418849fc0cdd5157/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73706563747265652f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>Yet another library to generate OpenAPI document and validate request &amp; response with Python annotations.</p>\n<h2>Features</h2>\n<ul>\n<li>Less boilerplate code, only annotations, no need for YAML :sparkles:</li>\n<li>Generate API document with <a href=\"https://github.com/Redocly/redoc\" rel=\"nofollow\">Redoc UI</a> or <a href=\"https://github.com/swagger-api/swagger-ui\" rel=\"nofollow\">Swagger UI</a> :yum:</li>\n<li>Validate query, JSON data, response data with <a href=\"https://github.com/samuelcolvin/pydantic/\" rel=\"nofollow\">pydantic</a> :wink:</li>\n<li>Current support:\n<ul>\n<li>Flask <a href=\"#flask\" rel=\"nofollow\">demo</a></li>\n<li>Falcon <a href=\"#falcon\" rel=\"nofollow\">demo</a></li>\n<li>Starlette <a href=\"#starlette\" rel=\"nofollow\">demo</a></li>\n</ul>\n</li>\n</ul>\n<h2>Quick Start</h2>\n<p>install with pip: <code>pip install spectree</code></p>\n<h3>Examples</h3>\n<p>Check the <a href=\"/examples\" rel=\"nofollow\">examples</a> folder.</p>\n<ul>\n<li><a href=\"/examples/flask_demo.py\" rel=\"nofollow\">flask example</a></li>\n<li><a href=\"/examples/falcon_demo.py\" rel=\"nofollow\">falcon example with logging when validation failed</a></li>\n<li><a href=\"examples/starlette_demo.py\" rel=\"nofollow\">starlette example</a></li>\n</ul>\n<h3>Step by Step</h3>\n<ol>\n<li>Define your data structure used in (query, json, headers, cookies, resp) with <code>pydantic.BaseModel</code></li>\n<li>create <code>spectree.SpecTree</code> instance with the web framework name you are using, like <code>api = SpecTree('flask')</code></li>\n<li><code>api.validate</code> decorate the route with\n<ul>\n<li><code>query</code></li>\n<li><code>json</code></li>\n<li><code>headers</code></li>\n<li><code>cookies</code></li>\n<li><code>resp</code></li>\n<li><code>tags</code></li>\n</ul>\n</li>\n<li>access these data with <code>context(query, json, headers, cookies)</code> (of course, you can access these from the original place where the framework offered)\n<ul>\n<li>flask: <code>request.context</code></li>\n<li>falcon: <code>req.context</code></li>\n<li>starlette: <code>request.context</code></li>\n</ul>\n</li>\n<li>register to the web application <code>api.register(app)</code></li>\n<li>check the document at URL location <code>/apidoc/redoc</code> or <code>/apidoc/swagger</code></li>\n</ol>\n<p>If the request doesn't pass the validation, it will return a 422 with JSON error message(ctx, loc, msg, type).</p>\n<h2>How To</h2>\n<blockquote>\n<p>How to add summary and description to endpoints?</p>\n</blockquote>\n<p>Just add docs to the endpoint function. The 1st line is the summary, and the rest is the description for this endpoint.</p>\n<blockquote>\n<p>How to add description to parameters?</p>\n</blockquote>\n<p>Check the <a href=\"https://pydantic-docs.helpmanual.io/usage/schema/\" rel=\"nofollow\">pydantic</a> document about description in <code>Field</code>.</p>\n<blockquote>\n<p>Any config I can change?</p>\n</blockquote>\n<p>Of course. Check the <a href=\"https://spectree.readthedocs.io/en/latest/config.html\" rel=\"nofollow\">config</a> document.</p>\n<p>You can update the config when init the spectree like:</p>\n<pre><span class=\"n\">SpecTree</span><span class=\"p\">(</span><span class=\"s1\">'flask'</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Demo API'</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'v1.0'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'doc'</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>What is <code>Response</code> and how to use it?</p>\n</blockquote>\n<p>To build a response for the endpoint, you need to declare the status code with format <code>HTTP_{code}</code> and corresponding data (optional).</p>\n<pre><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">HTTP_200</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">HTTP_403</span><span class=\"o\">=</span><span class=\"n\">ForbidModel</span><span class=\"p\">)</span>\n<span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_200'</span><span class=\"p\">)</span> <span class=\"c1\"># equals to Response(HTTP_200=None)</span>\n</pre>\n<blockquote>\n<p>What should I return when I'm using the library?</p>\n</blockquote>\n<p>No need to change anything. Just return what the framework required.</p>\n<blockquote>\n<p>How to logging when the validation failed?</p>\n</blockquote>\n<p>Validation errors are logged with INFO level. Details are passed into <code>extra</code>. Check the <a href=\"examples/falcon_demo.py\" rel=\"nofollow\">falcon example</a> for details.</p>\n<blockquote>\n<p>How can I write a customized plugin for another backend framework?</p>\n</blockquote>\n<p>Inherit <code>spectree.plugins.base.BasePlugin</code> and implement the functions you need. After that, init like <code>api = SpecTree(backend=MyCustomizedPlugin)</code>.</p>\n<h2>Demo</h2>\n<p>Try it with <code>http post :8000/api/user name=alice age=18</code>. (if you are using <code>httpie</code>)</p>\n<h3>Flask</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">jsonify</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">constr</span>\n<span class=\"kn\">from</span> <span class=\"nn\">spectree</span> <span class=\"kn\">import</span> <span class=\"n\">SpecTree</span><span class=\"p\">,</span> <span class=\"n\">Response</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Profile</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">constr</span><span class=\"p\">(</span><span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span> <span class=\"c1\"># Constrained Str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n        <span class=\"o\">...</span><span class=\"p\">,</span>\n        <span class=\"n\">gt</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">lt</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'user age(Human)'</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Message</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">SpecTree</span><span class=\"p\">(</span><span class=\"s1\">'flask'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/api/user'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"nd\">@api</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">Profile</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"o\">=</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">HTTP_200</span><span class=\"o\">=</span><span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">HTTP_403</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'api'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_profile</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    verify user profile (summary of this endpoint)</span>\n\n<span class=\"sd\">    user's name, user's age, ... (long description)</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">)</span> <span class=\"c1\"># or `request.json`</span>\n    <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'it works'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span> <span class=\"c1\"># if you don't register in api init step</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">)</span>\n</pre>\n<h3>Falcon</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">falcon</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wsgiref</span> <span class=\"kn\">import</span> <span class=\"n\">simple_server</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">constr</span>\n<span class=\"kn\">from</span> <span class=\"nn\">spectree</span> <span class=\"kn\">import</span> <span class=\"n\">SpecTree</span><span class=\"p\">,</span> <span class=\"n\">Response</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Profile</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">constr</span><span class=\"p\">(</span><span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>  <span class=\"c1\"># Constrained Str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n        <span class=\"o\">...</span><span class=\"p\">,</span>\n        <span class=\"n\">gt</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">lt</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'user age(Human)'</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Message</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">SpecTree</span><span class=\"p\">(</span><span class=\"s1\">'falcon'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserProfile</span><span class=\"p\">:</span>\n    <span class=\"nd\">@api</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">Profile</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"o\">=</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">HTTP_200</span><span class=\"o\">=</span><span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">HTTP_403</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'api'</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        verify user profile (summary of this endpoint)</span>\n\n<span class=\"sd\">        user's name, user's age, ... (long description)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">)</span>  <span class=\"c1\"># or `req.media`</span>\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">media</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'it works'</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">falcon</span><span class=\"o\">.</span><span class=\"n\">API</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s1\">'/api/user'</span><span class=\"p\">,</span> <span class=\"n\">UserProfile</span><span class=\"p\">())</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n    <span class=\"n\">httpd</span> <span class=\"o\">=</span> <span class=\"n\">simple_server</span><span class=\"o\">.</span><span class=\"n\">make_server</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">8000</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n    <span class=\"n\">httpd</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n</pre>\n<h3>Starlette</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">uvicorn</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.routing</span> <span class=\"kn\">import</span> <span class=\"n\">Route</span><span class=\"p\">,</span> <span class=\"n\">Mount</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">constr</span>\n<span class=\"kn\">from</span> <span class=\"nn\">spectree</span> <span class=\"kn\">import</span> <span class=\"n\">SpecTree</span><span class=\"p\">,</span> <span class=\"n\">Response</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Profile</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">constr</span><span class=\"p\">(</span><span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>  <span class=\"c1\"># Constrained Str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n        <span class=\"o\">...</span><span class=\"p\">,</span>\n        <span class=\"n\">gt</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">lt</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'user age(Human)'</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Message</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">SpecTree</span><span class=\"p\">(</span><span class=\"s1\">'starlette'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@api</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">Profile</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"o\">=</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">HTTP_200</span><span class=\"o\">=</span><span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">HTTP_403</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'api'</span><span class=\"p\">])</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">user_profile</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    verify user profile (summary of this endpoint)</span>\n\n<span class=\"sd\">    user's name, user's age, ... (long description)</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">)</span>  <span class=\"c1\"># or await request.json()</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"p\">({</span><span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'it works'</span><span class=\"p\">})</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">(</span><span class=\"n\">routes</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">Mount</span><span class=\"p\">(</span><span class=\"s1\">'api'</span><span class=\"p\">,</span> <span class=\"n\">routes</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'/user'</span><span class=\"p\">,</span> <span class=\"n\">user_profile</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">]),</span>\n        <span class=\"p\">])</span>\n    <span class=\"p\">])</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n    <span class=\"n\">uvicorn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<h2>FAQ</h2>\n<blockquote>\n<p>ValidationError: missing field for headers</p>\n</blockquote>\n<p>The HTTP headers' keys in Flask are capitalized, in Falcon are upper cases, in Starlette are lower cases.\nYou can use <a href=\"https://pydantic-docs.helpmanual.io/usage/validators/#root-validators\" rel=\"nofollow\"><code>pydantic.root_validators(pre=True)</code></a> to change all the keys into lower cases or upper cases.</p>\n<blockquote>\n<p>ValidationError: value is not a valid list for query</p>\n</blockquote>\n<p>Since there is no standard for HTTP query with multiple values, it's hard to find the way to handle this for different web frameworks. So I suggest not to use list type in query until I find a suitable way to fix it.</p>\n\n          </div>"}, "last_serial": 6832892, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4da96d5c5ee7a2a4b4b21ba2c9b3adb6", "sha256": "c851453f6413068976550f4e56a29781d036e363c93d609daeffd2caaf349393"}, "downloads": -1, "filename": "spectree-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4da96d5c5ee7a2a4b4b21ba2c9b3adb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3486, "upload_time": "2019-12-01T09:00:03", "upload_time_iso_8601": "2019-12-01T09:00:03.424282Z", "url": "https://files.pythonhosted.org/packages/df/3a/15fff52440d538763fd6da08343f2774d0ea01bd36b00f471ae40baee706/spectree-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19f32f19c2e00e8156509cc77d5b7f58", "sha256": "4a5eb4beccacf0cf2852e6901ac0464d94d882d837a9a739aa009dca228dce97"}, "downloads": -1, "filename": "spectree-0.0.1.tar.gz", "has_sig": false, "md5_digest": "19f32f19c2e00e8156509cc77d5b7f58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2678, "upload_time": "2019-12-01T09:00:05", "upload_time_iso_8601": "2019-12-01T09:00:05.709975Z", "url": "https://files.pythonhosted.org/packages/05/bb/a427823c32930c9cf03b02837674cbe4ccfa65fe78b9f79e33899147f68d/spectree-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "ec4cde9570676f4d450a13d1a01666b7", "sha256": "4e05dabebd3b18ec490c759882900c834ea468d5a0d9bb2ba5998ab229e36748"}, "downloads": -1, "filename": "spectree-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ec4cde9570676f4d450a13d1a01666b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14311, "upload_time": "2019-12-24T10:59:23", "upload_time_iso_8601": "2019-12-24T10:59:23.642103Z", "url": "https://files.pythonhosted.org/packages/ba/f4/72e88c43eff9179c3b593cba58b1dc8d18301746a2e6f3a4ad53a7df6c24/spectree-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c18879fb0cb94b89e73bdf076c6a1996", "sha256": "22ff5b0931e64f688f27da4e2cbec9091cf84fda076a61bd7015705d501b8c93"}, "downloads": -1, "filename": "spectree-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c18879fb0cb94b89e73bdf076c6a1996", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11747, "upload_time": "2019-12-24T10:59:25", "upload_time_iso_8601": "2019-12-24T10:59:25.329971Z", "url": "https://files.pythonhosted.org/packages/7c/c5/75da0a1201405e0ab761a3fcac5289db7134fe63920635ccc34424f94dfa/spectree-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2add0502d5a879f67a48a16a32890495", "sha256": "7eeaafdc53f2481023b0fa00872514fb50640fba72eb9f1c9d1d27b8cf85766b"}, "downloads": -1, "filename": "spectree-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2add0502d5a879f67a48a16a32890495", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19550, "upload_time": "2020-01-06T03:52:31", "upload_time_iso_8601": "2020-01-06T03:52:31.425128Z", "url": "https://files.pythonhosted.org/packages/ce/71/17d301ba3c6b27c15d045d8cfeb543218acbc3f0cb276b96b96ca55a52ff/spectree-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f77bd93c07f14510114ccd05ca55638e", "sha256": "a96f28c09e5f863a70f7f5a8554c185d45ff8d972e9b4b0ca323651bb8ef37ff"}, "downloads": -1, "filename": "spectree-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f77bd93c07f14510114ccd05ca55638e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12739, "upload_time": "2020-01-06T03:52:33", "upload_time_iso_8601": "2020-01-06T03:52:33.118098Z", "url": "https://files.pythonhosted.org/packages/66/67/730754b85da3e33aa94f0de530665adcf22312b1f12ba9bafa49c552b8e9/spectree-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "682cc16023e6b8ecdf53767ba3218513", "sha256": "611a34e484fcfee72b57f65fef22c47ff629d14c3974e801ff785ba6972b7c39"}, "downloads": -1, "filename": "spectree-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "682cc16023e6b8ecdf53767ba3218513", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15903, "upload_time": "2020-01-07T02:06:08", "upload_time_iso_8601": "2020-01-07T02:06:08.862851Z", "url": "https://files.pythonhosted.org/packages/31/50/0a49a75855b811a4846ca408e980d9e4711116b8dbde20443de63ed7f58c/spectree-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5b7e2ba80ab61f46bfca8ca48eaee68", "sha256": "3cc9a7b084f2081c2345be60569a1cb168f87ceea51b304fd2cae319edb66db1"}, "downloads": -1, "filename": "spectree-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e5b7e2ba80ab61f46bfca8ca48eaee68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13634, "upload_time": "2020-01-07T02:06:10", "upload_time_iso_8601": "2020-01-07T02:06:10.636714Z", "url": "https://files.pythonhosted.org/packages/22/f7/d2422e9438f12ab034da9e2e6c329427534db9df59ac4442fdb3162525a7/spectree-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "df888ec8da74cbb8badcbc3ce8203692", "sha256": "7dd7d2778ff515863910f6a56211bc1e4784db87d67c343e2b1552035c5a3d76"}, "downloads": -1, "filename": "spectree-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "df888ec8da74cbb8badcbc3ce8203692", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20468, "upload_time": "2020-01-07T16:37:40", "upload_time_iso_8601": "2020-01-07T16:37:40.069857Z", "url": "https://files.pythonhosted.org/packages/72/b3/4f2eb1f101292f1480a9be660e322e6a112b52e4697900add033c1105aac/spectree-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "209810ae891a89232b6068f17ebb9151", "sha256": "297a8dbd21d0ee123e00634f7328066efbc0a08e9f7d83995bb8719fbbbdc7b7"}, "downloads": -1, "filename": "spectree-0.2.2.tar.gz", "has_sig": false, "md5_digest": "209810ae891a89232b6068f17ebb9151", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14697, "upload_time": "2020-01-07T16:37:48", "upload_time_iso_8601": "2020-01-07T16:37:48.197630Z", "url": "https://files.pythonhosted.org/packages/29/97/925e93152826d8869d055cd0be0f795b5fa4096ec044b6493cf154675cfb/spectree-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "3dd57c211852d79dcea3afbe3c309619", "sha256": "dc5ea03af1dce773a5712771ce642815679abaf329ed9b598e06d67aae3c9cf0"}, "downloads": -1, "filename": "spectree-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3dd57c211852d79dcea3afbe3c309619", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20631, "upload_time": "2020-01-12T10:14:13", "upload_time_iso_8601": "2020-01-12T10:14:13.938027Z", "url": "https://files.pythonhosted.org/packages/42/69/8090eaca25f81c7ff2c466ea008f6cdfc0c12baff912a2657cab6e2992b2/spectree-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b3925f229a3a79174aed07484499cb0", "sha256": "d989c611a6a1c07204fde4cb9d42a6ece3ecdaf7f9856f2b976154b9a026c9bf"}, "downloads": -1, "filename": "spectree-0.2.3.tar.gz", "has_sig": false, "md5_digest": "3b3925f229a3a79174aed07484499cb0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14821, "upload_time": "2020-01-12T10:14:16", "upload_time_iso_8601": "2020-01-12T10:14:16.075952Z", "url": "https://files.pythonhosted.org/packages/4b/db/95995a9e6fbbf0b2a99ebc7101a568bde68a3f38b6d68a84c272d7051fee/spectree-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "1f4b70b5f287ddf4863ff8393d023b8c", "sha256": "2dd6e64438172fef044f26ecd40529b0243494a9c202e7df33a2a07f81b33606"}, "downloads": -1, "filename": "spectree-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1f4b70b5f287ddf4863ff8393d023b8c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20835, "upload_time": "2020-01-13T04:24:07", "upload_time_iso_8601": "2020-01-13T04:24:07.516604Z", "url": "https://files.pythonhosted.org/packages/8a/f3/eb144e349684bc3afbfd8c44c048a82d2631ef525d322790aa737c8bc020/spectree-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca51e81ecb5ae0d2a127cb75f52b4fe1", "sha256": "9a1eeb476039e0380a12a7704ab95739bf78153a71e93824ec890c3ee653304c"}, "downloads": -1, "filename": "spectree-0.2.4.tar.gz", "has_sig": false, "md5_digest": "ca51e81ecb5ae0d2a127cb75f52b4fe1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15004, "upload_time": "2020-01-13T04:24:10", "upload_time_iso_8601": "2020-01-13T04:24:10.589349Z", "url": "https://files.pythonhosted.org/packages/e8/4c/f4abf1b05cc37896cbe7873842394d9271339c498a7f73adb0e9d4774904/spectree-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "c5efc884d3843de40343a55b75a99ee9", "sha256": "9442281f0eb5d517cf015e6315efefef912a39cf2c54ccc6d1a1a72b2965193f"}, "downloads": -1, "filename": "spectree-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c5efc884d3843de40343a55b75a99ee9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20869, "upload_time": "2020-02-12T08:52:16", "upload_time_iso_8601": "2020-02-12T08:52:16.854185Z", "url": "https://files.pythonhosted.org/packages/74/22/bc88912425a46b44d25a7f0ab3609c9821b973d5501ebec9daa65b6c9dfa/spectree-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4933d4348d2b68fc1e44bfc45480353", "sha256": "9c35afb3ac8900efc7547bb1c22bf9a857bd1de1a2fe6ba607e12e33e0b21b26"}, "downloads": -1, "filename": "spectree-0.2.5.tar.gz", "has_sig": false, "md5_digest": "b4933d4348d2b68fc1e44bfc45480353", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15093, "upload_time": "2020-02-12T08:52:19", "upload_time_iso_8601": "2020-02-12T08:52:19.071230Z", "url": "https://files.pythonhosted.org/packages/43/d3/adada3da41d96a3040c78d5856e792d1541cc9136f3d64b69e2e44b20f46/spectree-0.2.5.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "5221926ce8bcc14ab26a95417153a2d4", "sha256": "1aa444aa498284d46f2da8b3f10573a2beb1c56a2a649ab328cc8974757f7e87"}, "downloads": -1, "filename": "spectree-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "5221926ce8bcc14ab26a95417153a2d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20672, "upload_time": "2020-02-15T03:13:52", "upload_time_iso_8601": "2020-02-15T03:13:52.334087Z", "url": "https://files.pythonhosted.org/packages/eb/15/cf69241998b618fd4b012801ebca478c026a52b8f48e5573a039560e6f92/spectree-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33378bc6643a4aa2f6f4a6bab469a3e2", "sha256": "ba46f3a388fa478d9a3bc0b9d6ec35d1e4a2875c884ad640e50c84d6a0d37427"}, "downloads": -1, "filename": "spectree-0.2.7.tar.gz", "has_sig": false, "md5_digest": "33378bc6643a4aa2f6f4a6bab469a3e2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14957, "upload_time": "2020-02-15T03:13:54", "upload_time_iso_8601": "2020-02-15T03:13:54.435515Z", "url": "https://files.pythonhosted.org/packages/f8/6f/14f02504e0f1abfe4707f5ebeaf0992f46abd8daf518bd2654356880dc16/spectree-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "10ff6e5b39a1d6359f5589be634ba261", "sha256": "429bfeaab1534f5543ca5de67925d79b1022f8f03fca2d122e926643e653d854"}, "downloads": -1, "filename": "spectree-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "10ff6e5b39a1d6359f5589be634ba261", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21113, "upload_time": "2020-03-08T08:05:45", "upload_time_iso_8601": "2020-03-08T08:05:45.154034Z", "url": "https://files.pythonhosted.org/packages/2f/41/24f46de84ad5b37a5184b3c0e1ce4e18a431ec94da92753779e7298c2e23/spectree-0.2.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae4641c67772c39c806fcebdae787053", "sha256": "62e5ae5a7332de8b14c6510952ce474adc6bb01edc837580ea01444936c8cad4"}, "downloads": -1, "filename": "spectree-0.2.8.tar.gz", "has_sig": false, "md5_digest": "ae4641c67772c39c806fcebdae787053", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15782, "upload_time": "2020-03-08T08:05:47", "upload_time_iso_8601": "2020-03-08T08:05:47.144720Z", "url": "https://files.pythonhosted.org/packages/c8/e9/dd8fa36ac31182b8be8d49a8f190c12271471a2ec9aceacb8bcf169c2a3f/spectree-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "7bd5b826d58e915a22084e6f82364991", "sha256": "6fb4173918a866393a78939d4235ce409e47016bc1b0f5365f15b5edea00a75a"}, "downloads": -1, "filename": "spectree-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "7bd5b826d58e915a22084e6f82364991", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21115, "upload_time": "2020-03-12T02:33:41", "upload_time_iso_8601": "2020-03-12T02:33:41.415914Z", "url": "https://files.pythonhosted.org/packages/c8/6a/10ec55dfee13b12a759454d38344b10c573212df09643eca4bd086921570/spectree-0.2.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9fd6110580596859ea58fefb44ae7ea7", "sha256": "11484f980e207c35305b6faaa5a5f9358dae411a72aed2d62717961d2f0aed67"}, "downloads": -1, "filename": "spectree-0.2.9.tar.gz", "has_sig": false, "md5_digest": "9fd6110580596859ea58fefb44ae7ea7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15791, "upload_time": "2020-03-12T02:33:43", "upload_time_iso_8601": "2020-03-12T02:33:43.434898Z", "url": "https://files.pythonhosted.org/packages/23/57/67b5837ac420edbf9a4141a3a8d8e574a5a857671503407ec032cea783b6/spectree-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "0fddca26fd6bcb9fda5591ea4144c9a6", "sha256": "75ea0c88458f776b6b3c971dbadeee6349af696ecf34f20e6491426e49b1747d"}, "downloads": -1, "filename": "spectree-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0fddca26fd6bcb9fda5591ea4144c9a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21415, "upload_time": "2020-03-13T03:06:04", "upload_time_iso_8601": "2020-03-13T03:06:04.964865Z", "url": "https://files.pythonhosted.org/packages/cb/7d/6918e9ee93a667d4703271f3d85436a7807518daf987e15f296dd2041c2b/spectree-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06234061d716bb5f61775303cb6fe394", "sha256": "b9bf3e9df4f2967c6f5ed807c0a2a58cddf5f7f3fb4521c58745fedb25437291"}, "downloads": -1, "filename": "spectree-0.3.0.tar.gz", "has_sig": false, "md5_digest": "06234061d716bb5f61775303cb6fe394", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16052, "upload_time": "2020-03-13T03:06:07", "upload_time_iso_8601": "2020-03-13T03:06:07.215397Z", "url": "https://files.pythonhosted.org/packages/89/c4/afefb74afe9d9cb491b2c009e3c053422188be8987a7dd3a706cd6386df9/spectree-0.3.0.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "717b0dd7f53d25efac114d71b35aad74", "sha256": "308328da5cc85405cd326d120aab9679c0a35e8f3ae343ad839519618617417e"}, "downloads": -1, "filename": "spectree-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "717b0dd7f53d25efac114d71b35aad74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21866, "upload_time": "2020-03-17T03:37:40", "upload_time_iso_8601": "2020-03-17T03:37:40.644601Z", "url": "https://files.pythonhosted.org/packages/d0/be/aa8343d5fd917746cc1a7f7d6ed0b9d5b59ad6a1fd1d09793d924a964965/spectree-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31f4dfd599296f46bc32eaebce1b2b38", "sha256": "5f1443411df4456127e96eb529d2264f10563565a35bb4a0149835e9e6c123cc"}, "downloads": -1, "filename": "spectree-0.3.2.tar.gz", "has_sig": false, "md5_digest": "31f4dfd599296f46bc32eaebce1b2b38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16663, "upload_time": "2020-03-17T03:37:42", "upload_time_iso_8601": "2020-03-17T03:37:42.355497Z", "url": "https://files.pythonhosted.org/packages/96/bf/d3dabe146b2dd3978ab0de427286090aec08b36735f988b3002289a05bbe/spectree-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "bed2ad0a11e00dc34f60aee567b0d1dd", "sha256": "af110a93e7f1e5eab9555c498c4bf1af3c7543edbedbbef1383131a5a00531e8"}, "downloads": -1, "filename": "spectree-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bed2ad0a11e00dc34f60aee567b0d1dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21861, "upload_time": "2020-03-18T02:29:48", "upload_time_iso_8601": "2020-03-18T02:29:48.507144Z", "url": "https://files.pythonhosted.org/packages/5a/e2/808081c67820331ad3c1d06fbe65371527f3e06832ad49e5cedf8207439b/spectree-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc5e898121ca60363e990f872fcbd0c3", "sha256": "1df42976b3cd14752dbc0a0f4d4e74d57420e1bf93900ace92a3600d7395afcf"}, "downloads": -1, "filename": "spectree-0.3.3.tar.gz", "has_sig": false, "md5_digest": "cc5e898121ca60363e990f872fcbd0c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16658, "upload_time": "2020-03-18T02:29:50", "upload_time_iso_8601": "2020-03-18T02:29:50.305368Z", "url": "https://files.pythonhosted.org/packages/69/88/212eaaa3c0c5ad0e932b62c35d82329a9f68873d2ab4bad4893d8cc15f71/spectree-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bed2ad0a11e00dc34f60aee567b0d1dd", "sha256": "af110a93e7f1e5eab9555c498c4bf1af3c7543edbedbbef1383131a5a00531e8"}, "downloads": -1, "filename": "spectree-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bed2ad0a11e00dc34f60aee567b0d1dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21861, "upload_time": "2020-03-18T02:29:48", "upload_time_iso_8601": "2020-03-18T02:29:48.507144Z", "url": "https://files.pythonhosted.org/packages/5a/e2/808081c67820331ad3c1d06fbe65371527f3e06832ad49e5cedf8207439b/spectree-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc5e898121ca60363e990f872fcbd0c3", "sha256": "1df42976b3cd14752dbc0a0f4d4e74d57420e1bf93900ace92a3600d7395afcf"}, "downloads": -1, "filename": "spectree-0.3.3.tar.gz", "has_sig": false, "md5_digest": "cc5e898121ca60363e990f872fcbd0c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16658, "upload_time": "2020-03-18T02:29:50", "upload_time_iso_8601": "2020-03-18T02:29:50.305368Z", "url": "https://files.pythonhosted.org/packages/69/88/212eaaa3c0c5ad0e932b62c35d82329a9f68873d2ab4bad4893d8cc15f71/spectree-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:38 2020"}