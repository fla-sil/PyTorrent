{"info": {"author": "Mike Kroutikov", "author_email": "mkroutikov@innodata.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# lxmlx\n[![Build Status](https://travis-ci.org/innodatalabs/lxmlx.svg?branch=master)](https://travis-ci.org/innodatalabs/lxmlx)\n[![PyPI version](https://badge.fury.io/py/lxmlx.svg)](https://badge.fury.io/py/lxmlx)\n\nHelpers and utilities for streaming processing of XML documents. Intended to be used with [lxml](http://lxml.de)\n\n## Installation\n\nAttention: this package no longer supports Python 2.\n\nIf you install using `pip`, all dependencies are automatically fetched and installed:\n\n```\npip install lxmlx\n```\n\nIf you want to build from sources, follow these steps:\n\n### Building and testing (Python 3):\n```\nvirtualenv .venv -p python3\n. .venv/bin/activate\npip install -r requirements.txt\npip install pytest\npytest lxmlx\n```\n\n## Event stream\nEvent stream is XML representation which is equivalent to the in-memory tree.\n\nIt is similar to SAX parsing events, except:\n\n1. we use simplified set of events (ENTER, EXIT, TEXT, COMMENT and PI)\n2. events are represented natively as Python streams (generators)\n3. event objects are JSON-serializable\n3. we use events for complete XML processing: parsing, transformation, writing\n\nEach event in the stream is a dict containing at least `type` key\n\n## ENTER event\n`ENTER` event is fired to indicate the opening of an XML tag. Payload:\n\n* `type` must be string `\"enter\"` (or constant `lxmlx.event.ENTER`)\n* `tag` element tag\n* `attrib` optional - a dictionary of attributes\n\nExample:\n```python\n{\n  'type'  : 'enter',\n  'tag'   : 'font',\n  'attrib': {\n    'name' : 'Times',\n    'style': 'bold'\n  }\n}\n```\n\n## EXIT event\n`EXIT` event is fired to indicate closing of an XML tag. No payload is\nexpected, because it implicitly corresponds to the opening tag from `ENTER`\nevent.\n\n* `type` must be string `\"exit\"` (or constant `lxmlx.event.EXIT`)\n\nExample:\n```python\n{\n  \"type\": \"exit\"\n}\n```\n\n## TEXT event\n`TEXT` event is fired to indicate XML `CTEXT` value. Payload is:\n\n* `type` must be string `\"text\"` (or constant `lxmlx.event.TEXT`)\n* `text` - required\n\nExample:\n```python\n{\n  \"type\": \"text\",\n  \"text\": \"Hello!\"\n}\n```\n\n## COMMENT\n\nPayload is:\n* `type` must be string `\"comment\"` (or constant `lxmlx.event.COMMENT`)\n* `text` - required\n\nExample:\n```python\n{\n  \"type\": \"comment\",\n  \"text\": \"Hello!\"\n}\n```\n\n## PI\n`PI` - processing instruction. Payload:\n\n* `type` must be string `\"pi\"` (or constant `lxmlx.event.PI`)\n* `target` - required PI target (aka tag)\n* `text` - optional PI text content\n\nExample:\n```python\n{\n  \"type\"  : \"pi\",\n  \"target\": \"myPI\",\n  \"text\"  : \"my cool text here\"\n}\n```\n\nOur definition of event stream is consistent with depth-first left-to-right\ntraversal of XML tree.\n\n## Example\nXML document below\n```xml\n<book>\n   <chapter id=\"1\">Introduction</chapter>\n   <chapter id=\"2\">Preface</chapter>\n   <chapter id=\"3\">Title</chapter>\n</book>\n```\n\ncan equivalently be represented by the following event stream:\n```json\n[\n  {\"type\": \"enter\", \"tag\": \"book\"},\n\n  {\"type\": \"enter\", \"tag\": \"chapter\", \"attrib\": {\"id\": \"1\"}},\n  {\"type\": \"text\", \"text\": \"Introduction\"},\n  {\"type\": \"exit\"},\n\n  {\"type\": \"enter\", \"tag\": \"chapter\", \"attrib\": {\"id\": \"2\"}},\n  {\"type\": \"text\", \"text\": \"Preface\"},\n  {\"type\": \"exit\"},\n\n  {\"type\": \"enter\", \"tag\": \"chapter\", \"attrib\": {\"id\": \"3\"}},\n  {\"type\": \"text\", \"text\": \"Title\"},\n  {\"type\": \"exit\"},\n\n  {\"type\": \"exit\"}\n]\n```\n\n### Why do we need event stream representation of XML?\nSome tasks are easier done using tree representation, but other\ntasks are better done on event stream representation.\n\n1. Stripping some XML tags. Remove some tags from XML document, leaving\n   text and other tags intact. In terms of XML tree this requires\n   carefully taking care of the children and contained text, and is\n   pretty difficult to get it right. Especially if you need to\n   remove many tags from a single tree - mutating the tree for each\n   one.\n\n   Using event stream representation this is as easy as suppressing\n   matching `ENTER` and `EXIT` events.\n\n2. Extracting text content from an XML fragment. Using traditional\n   tree representation this is not a difficult task. But using event stream\n   representation this becomes quite trivial: accept only `TEXT` events and\n   join the resulting text pieces together:\n   ```\n   ''.join(evt['text'] for evt in events if evt['type']==TEXT)\n   ```\n\n3. Wrapping XML elements. Daunting task using XML tree representation. Very\n   easy using events stream - just inject wrappers each time you detect\n   `ENTER` or `EXIT` of a wrapee.\n\n4. When implemented right, event stream uses limited memory, independent of\n   the size of the XML document. Even huge XML documents can be transformed\n   quickly using small amount of RAM.\n\n\n## Well-formed event stream\n\nNot every sequence of events is a valid event stream. The requirement of\nwell-formedness asserts that stream corresponds to left-to-right depth-first\ntraversal of some tree.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/innodatalabs/lxmlx", "keywords": "lxml xml events sax", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lxmlx", "package_url": "https://pypi.org/project/lxmlx/", "platform": "", "project_url": "https://pypi.org/project/lxmlx/", "project_urls": {"Homepage": "https://github.com/innodatalabs/lxmlx"}, "release_url": "https://pypi.org/project/lxmlx/2.0.2/", "requires_dist": ["lxml"], "requires_python": "", "summary": "Helpers and utilities to be used with lxml", "version": "2.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>lxmlx</h1>\n<p><a href=\"https://travis-ci.org/innodatalabs/lxmlx\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08a6da9b868d2580a36ced2fae4d29ca0832c0c2/68747470733a2f2f7472617669732d63692e6f72672f696e6e6f646174616c6162732f6c786d6c782e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/lxmlx\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b94616cd8ee9f2445e91e3164dc17c1ca803b43b/68747470733a2f2f62616467652e667572792e696f2f70792f6c786d6c782e737667\"></a></p>\n<p>Helpers and utilities for streaming processing of XML documents. Intended to be used with <a href=\"http://lxml.de\" rel=\"nofollow\">lxml</a></p>\n<h2>Installation</h2>\n<p>Attention: this package no longer supports Python 2.</p>\n<p>If you install using <code>pip</code>, all dependencies are automatically fetched and installed:</p>\n<pre><code>pip install lxmlx\n</code></pre>\n<p>If you want to build from sources, follow these steps:</p>\n<h3>Building and testing (Python 3):</h3>\n<pre><code>virtualenv .venv -p python3\n. .venv/bin/activate\npip install -r requirements.txt\npip install pytest\npytest lxmlx\n</code></pre>\n<h2>Event stream</h2>\n<p>Event stream is XML representation which is equivalent to the in-memory tree.</p>\n<p>It is similar to SAX parsing events, except:</p>\n<ol>\n<li>we use simplified set of events (ENTER, EXIT, TEXT, COMMENT and PI)</li>\n<li>events are represented natively as Python streams (generators)</li>\n<li>event objects are JSON-serializable</li>\n<li>we use events for complete XML processing: parsing, transformation, writing</li>\n</ol>\n<p>Each event in the stream is a dict containing at least <code>type</code> key</p>\n<h2>ENTER event</h2>\n<p><code>ENTER</code> event is fired to indicate the opening of an XML tag. Payload:</p>\n<ul>\n<li><code>type</code> must be string <code>\"enter\"</code> (or constant <code>lxmlx.event.ENTER</code>)</li>\n<li><code>tag</code> element tag</li>\n<li><code>attrib</code> optional - a dictionary of attributes</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s1\">'type'</span>  <span class=\"p\">:</span> <span class=\"s1\">'enter'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'tag'</span>   <span class=\"p\">:</span> <span class=\"s1\">'font'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'attrib'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span> <span class=\"p\">:</span> <span class=\"s1\">'Times'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'style'</span><span class=\"p\">:</span> <span class=\"s1\">'bold'</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>EXIT event</h2>\n<p><code>EXIT</code> event is fired to indicate closing of an XML tag. No payload is\nexpected, because it implicitly corresponds to the opening tag from <code>ENTER</code>\nevent.</p>\n<ul>\n<li><code>type</code> must be string <code>\"exit\"</code> (or constant <code>lxmlx.event.EXIT</code>)</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"exit\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>TEXT event</h2>\n<p><code>TEXT</code> event is fired to indicate XML <code>CTEXT</code> value. Payload is:</p>\n<ul>\n<li><code>type</code> must be string <code>\"text\"</code> (or constant <code>lxmlx.event.TEXT</code>)</li>\n<li><code>text</code> - required</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"text\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello!\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>COMMENT</h2>\n<p>Payload is:</p>\n<ul>\n<li><code>type</code> must be string <code>\"comment\"</code> (or constant <code>lxmlx.event.COMMENT</code>)</li>\n<li><code>text</code> - required</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"comment\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello!\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>PI</h2>\n<p><code>PI</code> - processing instruction. Payload:</p>\n<ul>\n<li><code>type</code> must be string <code>\"pi\"</code> (or constant <code>lxmlx.event.PI</code>)</li>\n<li><code>target</code> - required PI target (aka tag)</li>\n<li><code>text</code> - optional PI text content</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"type\"</span>  <span class=\"p\">:</span> <span class=\"s2\">\"pi\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"target\"</span><span class=\"p\">:</span> <span class=\"s2\">\"myPI\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"text\"</span>  <span class=\"p\">:</span> <span class=\"s2\">\"my cool text here\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Our definition of event stream is consistent with depth-first left-to-right\ntraversal of XML tree.</p>\n<h2>Example</h2>\n<p>XML document below</p>\n<pre><span class=\"nt\">&lt;book&gt;</span>\n   <span class=\"nt\">&lt;chapter</span> <span class=\"na\">id=</span><span class=\"s\">\"1\"</span><span class=\"nt\">&gt;</span>Introduction<span class=\"nt\">&lt;/chapter&gt;</span>\n   <span class=\"nt\">&lt;chapter</span> <span class=\"na\">id=</span><span class=\"s\">\"2\"</span><span class=\"nt\">&gt;</span>Preface<span class=\"nt\">&lt;/chapter&gt;</span>\n   <span class=\"nt\">&lt;chapter</span> <span class=\"na\">id=</span><span class=\"s\">\"3\"</span><span class=\"nt\">&gt;</span>Title<span class=\"nt\">&lt;/chapter&gt;</span>\n<span class=\"nt\">&lt;/book&gt;</span>\n</pre>\n<p>can equivalently be represented by the following event stream:</p>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enter\"</span><span class=\"p\">,</span> <span class=\"nt\">\"tag\"</span><span class=\"p\">:</span> <span class=\"s2\">\"book\"</span><span class=\"p\">},</span>\n\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enter\"</span><span class=\"p\">,</span> <span class=\"nt\">\"tag\"</span><span class=\"p\">:</span> <span class=\"s2\">\"chapter\"</span><span class=\"p\">,</span> <span class=\"nt\">\"attrib\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">}},</span>\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"text\"</span><span class=\"p\">,</span> <span class=\"nt\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Introduction\"</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"exit\"</span><span class=\"p\">},</span>\n\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enter\"</span><span class=\"p\">,</span> <span class=\"nt\">\"tag\"</span><span class=\"p\">:</span> <span class=\"s2\">\"chapter\"</span><span class=\"p\">,</span> <span class=\"nt\">\"attrib\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2\"</span><span class=\"p\">}},</span>\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"text\"</span><span class=\"p\">,</span> <span class=\"nt\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Preface\"</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"exit\"</span><span class=\"p\">},</span>\n\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enter\"</span><span class=\"p\">,</span> <span class=\"nt\">\"tag\"</span><span class=\"p\">:</span> <span class=\"s2\">\"chapter\"</span><span class=\"p\">,</span> <span class=\"nt\">\"attrib\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3\"</span><span class=\"p\">}},</span>\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"text\"</span><span class=\"p\">,</span> <span class=\"nt\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Title\"</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"exit\"</span><span class=\"p\">},</span>\n\n  <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"exit\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>Why do we need event stream representation of XML?</h3>\n<p>Some tasks are easier done using tree representation, but other\ntasks are better done on event stream representation.</p>\n<ol>\n<li>\n<p>Stripping some XML tags. Remove some tags from XML document, leaving\ntext and other tags intact. In terms of XML tree this requires\ncarefully taking care of the children and contained text, and is\npretty difficult to get it right. Especially if you need to\nremove many tags from a single tree - mutating the tree for each\none.</p>\n<p>Using event stream representation this is as easy as suppressing\nmatching <code>ENTER</code> and <code>EXIT</code> events.</p>\n</li>\n<li>\n<p>Extracting text content from an XML fragment. Using traditional\ntree representation this is not a difficult task. But using event stream\nrepresentation this becomes quite trivial: accept only <code>TEXT</code> events and\njoin the resulting text pieces together:</p>\n<pre><code>''.join(evt['text'] for evt in events if evt['type']==TEXT)\n</code></pre>\n</li>\n<li>\n<p>Wrapping XML elements. Daunting task using XML tree representation. Very\neasy using events stream - just inject wrappers each time you detect\n<code>ENTER</code> or <code>EXIT</code> of a wrapee.</p>\n</li>\n<li>\n<p>When implemented right, event stream uses limited memory, independent of\nthe size of the XML document. Even huge XML documents can be transformed\nquickly using small amount of RAM.</p>\n</li>\n</ol>\n<h2>Well-formed event stream</h2>\n<p>Not every sequence of events is a valid event stream. The requirement of\nwell-formedness asserts that stream corresponds to left-to-right depth-first\ntraversal of some tree.</p>\n\n          </div>"}, "last_serial": 6089366, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "da2e3495b77cab8ad1c6b25d91cc2e9e", "sha256": "713f70e3799d312f98792a0e0e740fc31f21ebfafedfed26a63515b9fce60cb6"}, "downloads": -1, "filename": "lxmlx-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "da2e3495b77cab8ad1c6b25d91cc2e9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8599, "upload_time": "2017-03-23T11:41:31", "upload_time_iso_8601": "2017-03-23T11:41:31.345454Z", "url": "https://files.pythonhosted.org/packages/34/00/d869c4c34e8f8bc3ae260872ab05b0b076086171caa07ab1c6118938d541/lxmlx-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "388b23e7c4c8868b38fbe43e0fc37087", "sha256": "666e9fe11ffd90561fea623e349e4e7ffa17644b6d7bea53c294e46662925ba4"}, "downloads": -1, "filename": "lxmlx-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "388b23e7c4c8868b38fbe43e0fc37087", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7970, "upload_time": "2017-03-23T16:50:06", "upload_time_iso_8601": "2017-03-23T16:50:06.682619Z", "url": "https://files.pythonhosted.org/packages/1a/a8/88920329365726ce7fc6a216c3d011f09e49cc20e05b99bbfc5259934e34/lxmlx-0.1.2-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "dd01278c5015984256d8975384e8043e", "sha256": "fdd9d60b976b83e08a3f3913d0aa0aeeae0595642b9c400027bff4c5fa5dfab3"}, "downloads": -1, "filename": "lxmlx-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dd01278c5015984256d8975384e8043e", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9441, "upload_time": "2017-11-03T16:08:25", "upload_time_iso_8601": "2017-11-03T16:08:25.600046Z", "url": "https://files.pythonhosted.org/packages/96/ce/9472ce79c6881af694f4dc95d361c79365a245e564ae6ed501bd73ef4996/lxmlx-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8295d48bc81cc19dfb0fabb033c74477", "sha256": "3de1d946112c022469229c7a48aa894089a346ae340e48df0121ad0d38786b9b"}, "downloads": -1, "filename": "lxmlx-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8295d48bc81cc19dfb0fabb033c74477", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5695, "upload_time": "2017-11-03T16:08:26", "upload_time_iso_8601": "2017-11-03T16:08:26.702961Z", "url": "https://files.pythonhosted.org/packages/30/d2/e6a9b46dd8ece02a052bc8c52c543c68fa2530f50f1e1fe9bfc42f4594c4/lxmlx-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "72bf7c87267f96f2f9a0c28252a9970c", "sha256": "3763a6d3607dca600fa2beab5f21da0e5a2b325dd24843e221690a2735fc96fd"}, "downloads": -1, "filename": "lxmlx-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "72bf7c87267f96f2f9a0c28252a9970c", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9538, "upload_time": "2017-11-08T21:20:16", "upload_time_iso_8601": "2017-11-08T21:20:16.575283Z", "url": "https://files.pythonhosted.org/packages/eb/34/6e6ee4bfc7b92959f303c2dab9818ca2dabccfbda590ab79b19bae1ff54b/lxmlx-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f88f1dc93b6dd7771246aed9fd68ece6", "sha256": "b3692afaf2818e11008b855d722da23c0898ab0b0e8ee9c958f7bfcc686851d7"}, "downloads": -1, "filename": "lxmlx-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f88f1dc93b6dd7771246aed9fd68ece6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5804, "upload_time": "2017-11-08T21:20:18", "upload_time_iso_8601": "2017-11-08T21:20:18.342583Z", "url": "https://files.pythonhosted.org/packages/2a/95/906c0d0420d6fbb6564c72080df7c23f0236ef2836907bb3369ca5fb6cc6/lxmlx-0.2.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "c62bf5581967314eba8329550fb961fb", "sha256": "a040c6f1df1eb0ef950e974fccc669123658253486798c5db345dbb387e711b1"}, "downloads": -1, "filename": "lxmlx-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c62bf5581967314eba8329550fb961fb", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8449, "upload_time": "2018-01-08T13:54:24", "upload_time_iso_8601": "2018-01-08T13:54:24.547977Z", "url": "https://files.pythonhosted.org/packages/ee/33/81aed4057864c976639ebf28bac213109bf869fd5855830444d9a0768cdc/lxmlx-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2bf3fc97c1c635dc30d76e537907fbb", "sha256": "4f537bef977c9550efd172c111e2886bb2f0389efc71623fc0eb0bcc761a3aba"}, "downloads": -1, "filename": "lxmlx-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e2bf3fc97c1c635dc30d76e537907fbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7106, "upload_time": "2018-01-08T13:54:18", "upload_time_iso_8601": "2018-01-08T13:54:18.699183Z", "url": "https://files.pythonhosted.org/packages/e8/06/c3e74849302f0d6b474e2d3cf1c8b89dc217e3150be333f8ee9dce3f89f5/lxmlx-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "276f3371726604aafd5a6c9359ec0036", "sha256": "5673f9367a7e5e3657e037c20fcf8f389ecdd049290389557783368b4012104f"}, "downloads": -1, "filename": "lxmlx-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "276f3371726604aafd5a6c9359ec0036", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8476, "upload_time": "2018-01-31T12:04:00", "upload_time_iso_8601": "2018-01-31T12:04:00.737445Z", "url": "https://files.pythonhosted.org/packages/3e/94/071c977ae9004a7fef822c9695f6a810fe146ee366d44920e72b02c4dedc/lxmlx-1.1.0-py2.py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "d335e49a5fd45fb3205d40f1c714c931", "sha256": "8b2706d74d9f94801edfa5bba9843b69e55153b5688b31ce879eb4eb45230045"}, "downloads": -1, "filename": "lxmlx-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d335e49a5fd45fb3205d40f1c714c931", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8496, "upload_time": "2018-01-31T12:10:39", "upload_time_iso_8601": "2018-01-31T12:10:39.301570Z", "url": "https://files.pythonhosted.org/packages/78/82/e6f3fdf1ee12d2fdf9fa8587a0e38d2e9d7c4652a4247be165e290eef9ea/lxmlx-1.1.1-py2.py3-none-any.whl", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "d772607bec664ba73af8dafc5d08e506", "sha256": "488df1c42e5cd0e445c95f84f05ba862fa45363e1907ae4d1e8792d1b6df280e"}, "downloads": -1, "filename": "lxmlx-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d772607bec664ba73af8dafc5d08e506", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7524, "upload_time": "2018-07-19T10:31:59", "upload_time_iso_8601": "2018-07-19T10:31:59.701575Z", "url": "https://files.pythonhosted.org/packages/dc/a3/899faf1fadb08c131c195c40c1da33d9f5e8c7a7375a7db243d059a3b41b/lxmlx-1.1.2-py2.py3-none-any.whl", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "ceba7538bf7e13a78659eb2b78257ff4", "sha256": "be22732b2a10a587745dba44e77ceaa45e31c5190b01ac0ab4ee372b07151ff5"}, "downloads": -1, "filename": "lxmlx-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ceba7538bf7e13a78659eb2b78257ff4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7362, "upload_time": "2019-11-06T18:27:04", "upload_time_iso_8601": "2019-11-06T18:27:04.546143Z", "url": "https://files.pythonhosted.org/packages/05/84/17d895506db9733d2e0ad8033c271d6f9bb2a0b3ac4edc4411c92053c482/lxmlx-2.0.0-py3-none-any.whl", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "3b36cc3c9fb2c611d3af66d1e53ab8fa", "sha256": "930907653271b3c8484275805f7a78090cb75a3ec088861b479a4b64eb34b73e"}, "downloads": -1, "filename": "lxmlx-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3b36cc3c9fb2c611d3af66d1e53ab8fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7360, "upload_time": "2019-11-06T18:35:57", "upload_time_iso_8601": "2019-11-06T18:35:57.986031Z", "url": "https://files.pythonhosted.org/packages/fe/38/74a184e4239fb84b71029b44b18ffbdc546690634d6a590974138f1e79c7/lxmlx-2.0.1-py3-none-any.whl", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "c19ffdafcc12bafa39f68426da13206a", "sha256": "1857d1a49add83e24abe770fafea066eb3c303843f1ec40c28c791d333614549"}, "downloads": -1, "filename": "lxmlx-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c19ffdafcc12bafa39f68426da13206a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9275, "upload_time": "2019-11-06T20:09:23", "upload_time_iso_8601": "2019-11-06T20:09:23.291926Z", "url": "https://files.pythonhosted.org/packages/4f/77/4c3dcb5e4912a8a1be20e0e92cd1bf4df4ed8211643d8463cba9bd1ebd7f/lxmlx-2.0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c19ffdafcc12bafa39f68426da13206a", "sha256": "1857d1a49add83e24abe770fafea066eb3c303843f1ec40c28c791d333614549"}, "downloads": -1, "filename": "lxmlx-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c19ffdafcc12bafa39f68426da13206a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9275, "upload_time": "2019-11-06T20:09:23", "upload_time_iso_8601": "2019-11-06T20:09:23.291926Z", "url": "https://files.pythonhosted.org/packages/4f/77/4c3dcb5e4912a8a1be20e0e92cd1bf4df4ed8211643d8463cba9bd1ebd7f/lxmlx-2.0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:42:47 2020"}