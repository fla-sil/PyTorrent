{"info": {"author": "Harrison Brown", "author_email": "harrybrown98@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# dispatch\n[![pypi](https://img.shields.io/pypi/v/py-dispatch.svg)](https://pypi.python.org/pypi/py-dispatch)\n\nA low information-redundancy CLI framework for a quick and dirty way of converting python a script to a command line tool.\n\nThe idea behind this framework is that functions and classes have one-to-one correspondence to command line interfaces with functions as commands and arguments as flags. This framework allows users to define a function or a class in plain python and turn it into a CLI with one decorator.\n\nThis was inspired by [fire](https://github.com/google/python-fire) and [click](https://click.palletsprojects.com/).\n\n## Install\n```\npip install py-dispatch\n```\n\n## Demo\n[docs.python]: # (grep -Pzo \"[[?s]]# example\\.py.*[[?=#end example\\.py]]\" example.py | tr -d '\\0')\n```python\n# example.py\nimport sys\nfrom dispatch import command\n\n@command\ndef hello(name: str, verbose: bool, debug: bool, file: str = 'stdout'):\n    '''Run the 'hello' command line interface.\n\n    :v verbose: Run the command verbosly\n    :name: Name of the person you are saying hello to.\n    :file: Either stdout or stderr\n    '''\n    if debug:\n        print(f'debugging with {name}', file=getattr(sys, file))\n    else:\n        print(f'hello, {name}', file=getattr(sys, file))\n\nif __name__ == '__main__':\n    hello()\n```\n\n```\n$ python example.py --help\n```\n\n[docs]: # (python example.py --help)\n```\nRun the 'hello' command line interface.\n\nUsage:\n    hello [options]\n\nOptions:\n        --name      Name of the person you are saying hello to.\n    -v, --verbose   Run the command verbosly\n        --debug\n        --file      Either stdout or stderr (default: 'stdout')\n    -h, --help      Get help.\n```\n\nArguments\n---------\nArguments can be retrieved in two ways, either from Command.args or with positional only arguments. When a cli function is run, it is replaced with a Command object so the cli function can use the command in it's own body.\n```python\n@dispatch.command\ndef cli(verbose: bool):\n    print(cli.args)\n```\nRunning this cli with `python cli.py hello --verbose these are some args` will result in `['hello', 'these', 'are', 'some', 'args']`.\n\nThe Other way to get arguments is to give the cli function a positional only argument at the beginning of the parameters list.\n```python\n@dispatch.command\ndef cli(*args, verbose: bool):\n    print(args)\n```\nRunning this cli as before will have the same result. However, it only works when the args tuple is the first function parameter.\n\nProperties of Flags\n===================\nBecause flags are specified by function arguments, the properties of flags are a little bit weird.\n\nBoolean Flags\n-------------\nAll boolean flags have a default of `False`.\n\nA positional argument with no default and no type annotation is assumed to be a boolean flag and will default to a value of `False`.\n```python\n@disptch.command\ndef cli(verbose):\n    if verbose:\n        print('the verbose flag has been given')\n    else:\n        print('using default of False for verbose')\n```\n\nFlag Types\n----------\nDispatch uses type annotations to infer flag types and will use those annotations to convert the arguments given.\n```python\n@dispatch.command\ndef cli(num: complex, decimal: float):\n    pass\n```\nWhen the program `cli.py` is executed it will convert each argument to its type.\n```bash\npython cli.py --num=5+3j --decimal=5.9\n```\nFor this command, the parser internals will eventually call `complex('5+3j')` and `float('5.9')` before giving the values as function arguments.\nWhat this means is that you can use any type as long it has an `__init__` function that takes one argument. If a flag is given a default value and no type annotation, the flag will inherit whatever type is given as default.\n\nDefault Values\n--------------\n```python\n@dispatch.command(hidden_defaults={'one', 'two'})\ndef cli(one=1, two=2, other_stuff=None): pass\n```\nTo specify a default value, simply set the function argument as you would with regular python code. The default values will be displayed in the help view of the command unless a `set` of type `str` is passed to the decorator as the 'hidden_defaults' argument. This will hide any default values from the help message. Falsy defaults that are non-boolean like an empty string will also be hidden.\n\n\nMultiple Commands\n=================\nFor more complicated command line interfaces, you need more than just flags. To do this you simply use the same `command` decorator on a class instead of a function.\n\n[docs.python]: # (cat multicommand.py)\n```python\n# multicommand.py\nfrom dispatch import command\n\n@command\nclass multicommand:\n    ''':v verbose: print stuff verbosly'''\n\n    verbose: bool\n    filename = 'README.md'\n\n    def cat(self, file: str):\n        '''Print a file\n\n        :f file: print this file'''\n        if self.verbose:\n            print('doing the thing verbosly')\n        print(open(file, 'r').read())\n\n    def do(self, thing):\n        '''Do a thing\n\n        :thing: the thing you will be doing'''\n        print('doing', thing)\n\n    def _helper(self):\n        '''functions that start with an underscore are not\n        interpreted as commands (not even hidden commands).\n        '''\n        pass\n\nif __name__ == \"__main__\":\n    multicommand()\n```\n\nThis small program is used just like any other cli.\n```bash\npython multicommand.py --help\n```\n\n[docs]: # (python multicommand.py --help)\n```\nUsage:\n    multicommand [options] [command]\n\nCommands:\n    cat   Print a file\n    do    Do a thing\n\nOptions:\n        --filename   default: 'README.md'\n    -v, --verbose    print stuff verbosly\n    -h, --help       Get help.\n```\n\nGroup Flags\n------------\nYou can define flags that are used at a class level and can be accessed by all commands in the cli. To do this you can set a class variable or you can use a type annotation if you do not want the flag to have a default value. When retrieving the value of these flags you can simply use them like any class attribute with `self.attr_name`.\n```python\n@dispatch.command\nclass cli:\n    verbose: bool\n    filename = 'notes.txt'\n```\n\nCommand Aliases\n---------------\nAliasing commands is really simple. All you need to do is assign the function you want to alias to another variable inside the class.\n```python\n@dispatch.command\nclass cli:\n    def command(self):\n        '''This is a command.'''\n        pass\n\n    cmd = command\n```\n\n```\nUsage:\n    cli [options] [command]\n\nOptions:\n    -h, --help   Get help.\n\nCommands:\n    command, cmd   This is a command.\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/harrybrwn/dispatch/archive/v0.0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/harrybrwn/dispatch", "keywords": "command line,cli,framework,tool,simple", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "py-dispatch", "package_url": "https://pypi.org/project/py-dispatch/", "platform": "", "project_url": "https://pypi.org/project/py-dispatch/", "project_urls": {"Download": "https://github.com/harrybrwn/dispatch/archive/v0.0.3.tar.gz", "Homepage": "https://github.com/harrybrwn/dispatch"}, "release_url": "https://pypi.org/project/py-dispatch/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "A low information-redundancy cli framework.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dispatch</h1>\n<p><a href=\"https://pypi.python.org/pypi/py-dispatch\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84654fd291027fdee0fe7a90ce2ebc563514fce9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70792d64697370617463682e737667\"></a></p>\n<p>A low information-redundancy CLI framework for a quick and dirty way of converting python a script to a command line tool.</p>\n<p>The idea behind this framework is that functions and classes have one-to-one correspondence to command line interfaces with functions as commands and arguments as flags. This framework allows users to define a function or a class in plain python and turn it into a CLI with one decorator.</p>\n<p>This was inspired by <a href=\"https://github.com/google/python-fire\" rel=\"nofollow\">fire</a> and <a href=\"https://click.palletsprojects.com/\" rel=\"nofollow\">click</a>.</p>\n<h2>Install</h2>\n<pre><code>pip install py-dispatch\n</code></pre>\n<h2>Demo</h2>\n<pre><span class=\"c1\"># example.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">command</span>\n\n<span class=\"nd\">@command</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'stdout'</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Run the 'hello' command line interface.</span>\n\n<span class=\"sd\">    :v verbose: Run the command verbosly</span>\n<span class=\"sd\">    :name: Name of the person you are saying hello to.</span>\n<span class=\"sd\">    :file: Either stdout or stderr</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"k\">if</span> <span class=\"n\">debug</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'debugging with </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">hello</span><span class=\"p\">()</span>\n</pre>\n<pre><code>$ python example.py --help\n</code></pre>\n<pre><code>Run the 'hello' command line interface.\n\nUsage:\n    hello [options]\n\nOptions:\n        --name      Name of the person you are saying hello to.\n    -v, --verbose   Run the command verbosly\n        --debug\n        --file      Either stdout or stderr (default: 'stdout')\n    -h, --help      Get help.\n</code></pre>\n<h2>Arguments</h2>\n<p>Arguments can be retrieved in two ways, either from Command.args or with positional only arguments. When a cli function is run, it is replaced with a Command object so the cli function can use the command in it's own body.</p>\n<pre><span class=\"nd\">@dispatch</span><span class=\"o\">.</span><span class=\"n\">command</span>\n<span class=\"k\">def</span> <span class=\"nf\">cli</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n<p>Running this cli with <code>python cli.py hello --verbose these are some args</code> will result in <code>['hello', 'these', 'are', 'some', 'args']</code>.</p>\n<p>The Other way to get arguments is to give the cli function a positional only argument at the beginning of the parameters list.</p>\n<pre><span class=\"nd\">@dispatch</span><span class=\"o\">.</span><span class=\"n\">command</span>\n<span class=\"k\">def</span> <span class=\"nf\">cli</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n<p>Running this cli as before will have the same result. However, it only works when the args tuple is the first function parameter.</p>\n<h1>Properties of Flags</h1>\n<p>Because flags are specified by function arguments, the properties of flags are a little bit weird.</p>\n<h2>Boolean Flags</h2>\n<p>All boolean flags have a default of <code>False</code>.</p>\n<p>A positional argument with no default and no type annotation is assumed to be a boolean flag and will default to a value of <code>False</code>.</p>\n<pre><span class=\"nd\">@disptch</span><span class=\"o\">.</span><span class=\"n\">command</span>\n<span class=\"k\">def</span> <span class=\"nf\">cli</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">verbose</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'the verbose flag has been given'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'using default of False for verbose'</span><span class=\"p\">)</span>\n</pre>\n<h2>Flag Types</h2>\n<p>Dispatch uses type annotations to infer flag types and will use those annotations to convert the arguments given.</p>\n<pre><span class=\"nd\">@dispatch</span><span class=\"o\">.</span><span class=\"n\">command</span>\n<span class=\"k\">def</span> <span class=\"nf\">cli</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>When the program <code>cli.py</code> is executed it will convert each argument to its type.</p>\n<pre>python cli.py --num<span class=\"o\">=</span><span class=\"m\">5</span>+3j --decimal<span class=\"o\">=</span><span class=\"m\">5</span>.9\n</pre>\n<p>For this command, the parser internals will eventually call <code>complex('5+3j')</code> and <code>float('5.9')</code> before giving the values as function arguments.\nWhat this means is that you can use any type as long it has an <code>__init__</code> function that takes one argument. If a flag is given a default value and no type annotation, the flag will inherit whatever type is given as default.</p>\n<h2>Default Values</h2>\n<pre><span class=\"nd\">@dispatch</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"n\">hidden_defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'one'</span><span class=\"p\">,</span> <span class=\"s1\">'two'</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">cli</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">two</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">other_stuff</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</pre>\n<p>To specify a default value, simply set the function argument as you would with regular python code. The default values will be displayed in the help view of the command unless a <code>set</code> of type <code>str</code> is passed to the decorator as the 'hidden_defaults' argument. This will hide any default values from the help message. Falsy defaults that are non-boolean like an empty string will also be hidden.</p>\n<h1>Multiple Commands</h1>\n<p>For more complicated command line interfaces, you need more than just flags. To do this you simply use the same <code>command</code> decorator on a class instead of a function.</p>\n<pre><span class=\"c1\"># multicommand.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">command</span>\n\n<span class=\"nd\">@command</span>\n<span class=\"k\">class</span> <span class=\"nc\">multicommand</span><span class=\"p\">:</span>\n    <span class=\"sd\">''':v verbose: print stuff verbosly'''</span>\n\n    <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>\n    <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'README.md'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">cat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''Print a file</span>\n\n<span class=\"sd\">        :f file: print this file'''</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbose</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'doing the thing verbosly'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">thing</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''Do a thing</span>\n\n<span class=\"sd\">        :thing: the thing you will be doing'''</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'doing'</span><span class=\"p\">,</span> <span class=\"n\">thing</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_helper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''functions that start with an underscore are not</span>\n<span class=\"sd\">        interpreted as commands (not even hidden commands).</span>\n<span class=\"sd\">        '''</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">multicommand</span><span class=\"p\">()</span>\n</pre>\n<p>This small program is used just like any other cli.</p>\n<pre>python multicommand.py --help\n</pre>\n<pre><code>Usage:\n    multicommand [options] [command]\n\nCommands:\n    cat   Print a file\n    do    Do a thing\n\nOptions:\n        --filename   default: 'README.md'\n    -v, --verbose    print stuff verbosly\n    -h, --help       Get help.\n</code></pre>\n<h2>Group Flags</h2>\n<p>You can define flags that are used at a class level and can be accessed by all commands in the cli. To do this you can set a class variable or you can use a type annotation if you do not want the flag to have a default value. When retrieving the value of these flags you can simply use them like any class attribute with <code>self.attr_name</code>.</p>\n<pre><span class=\"nd\">@dispatch</span><span class=\"o\">.</span><span class=\"n\">command</span>\n<span class=\"k\">class</span> <span class=\"nc\">cli</span><span class=\"p\">:</span>\n    <span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>\n    <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'notes.txt'</span>\n</pre>\n<h2>Command Aliases</h2>\n<p>Aliasing commands is really simple. All you need to do is assign the function you want to alias to another variable inside the class.</p>\n<pre><span class=\"nd\">@dispatch</span><span class=\"o\">.</span><span class=\"n\">command</span>\n<span class=\"k\">class</span> <span class=\"nc\">cli</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">command</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''This is a command.'''</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">command</span>\n</pre>\n<pre><code>Usage:\n    cli [options] [command]\n\nOptions:\n    -h, --help   Get help.\n\nCommands:\n    command, cmd   This is a command.\n</code></pre>\n\n          </div>"}, "last_serial": 6900757, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "f0b1a5957dc97ddbc9a621903946c1cc", "sha256": "8a5db24227c92fe025ca0b1aa9d80d80a21fcca7f1161c23baff1ada876e50a8"}, "downloads": -1, "filename": "py-dispatch-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f0b1a5957dc97ddbc9a621903946c1cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8921, "upload_time": "2019-12-10T18:24:39", "upload_time_iso_8601": "2019-12-10T18:24:39.231489Z", "url": "https://files.pythonhosted.org/packages/29/bf/2618319a7aac7ca2fdc33febe214b0952015573c81fa9b1208f77c4ab640/py-dispatch-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c7a7d20f35f37723be3bd4384d989410", "sha256": "9b4261e713cd4b6d1b41e52a1f94c44319839862fe2362612091e8f9ff98becb"}, "downloads": -1, "filename": "py-dispatch-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c7a7d20f35f37723be3bd4384d989410", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15643, "upload_time": "2020-03-28T07:26:37", "upload_time_iso_8601": "2020-03-28T07:26:37.957587Z", "url": "https://files.pythonhosted.org/packages/81/53/1e7a123b438242d9feb74c350b70939cfc2754471adcead174fbd3f010b3/py-dispatch-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7a7d20f35f37723be3bd4384d989410", "sha256": "9b4261e713cd4b6d1b41e52a1f94c44319839862fe2362612091e8f9ff98becb"}, "downloads": -1, "filename": "py-dispatch-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c7a7d20f35f37723be3bd4384d989410", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15643, "upload_time": "2020-03-28T07:26:37", "upload_time_iso_8601": "2020-03-28T07:26:37.957587Z", "url": "https://files.pythonhosted.org/packages/81/53/1e7a123b438242d9feb74c350b70939cfc2754471adcead174fbd3f010b3/py-dispatch-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:58 2020"}