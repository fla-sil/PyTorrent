{"info": {"author": "Joe Lawson", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Parameter Pack\r\n--------------\r\n\r\nThis module provides a mechanism for writing something similar to C++17's `fold expressions`_ in Python. This is\r\nachieved by co-opting Python's mostly unused ``Ellipsis`` literal.\r\n\r\n\r\nSupported Operators\r\n-------------------\r\n\r\n- Addition (``+``)\r\n- Subtraction (``-``)\r\n- Multiplication (``*``)\r\n- Integer division (``//``)\r\n- Division (``/``)\r\n- Modulus (``%``)\r\n- Matrix Multiplication (``@``, Python >= 3.5 only)\r\n- Bitwise And (``&``)\r\n- Bitwise Or (``|``)\r\n- Bitwise Xor (``^``)\r\n- Left Shift (``<<``)\r\n- Right Shift (``>>``)\r\n- ``__call__``\r\n- Comparison operators (``>``, ``>=``, ``<``, ``<=``, ``==``, ``!=``)\r\n\r\n\r\nExamples\r\n--------\r\n\r\nThere are two ways to \"fold\" an operation over a parameter pack: *left* and *right* folds.\r\n\r\n.. code-block:: python\r\n\r\n    from parameterpack import pack\r\n\r\n    p = pack(1, 2, 3)\r\n\r\n    # Left fold\r\n    p - ...      # (1 - 2) - 3 = -4\r\n    p - ... - 4  # ((1 - 2) - 3) - 4 = -8\r\n\r\n    # Right fold\r\n    ... - p     # 1 - (2 - 3) = 2\r\n    ... - p - 4 # 4 - (1 - (2 - 3)) = -2\r\n\r\nNote that the left fold groups operations on the left, while the right fold groups them on the right. This only makes\r\na difference if the folded operation is not associative, such as in the case of integer subtraction.\r\n\r\nBecause it is not possible to redefine the ``ellipsis`` type's operators, a right fold on the right side of a binary\r\noperation requires parentheses.\r\n\r\n.. code-block:: python\r\n\r\n    from parameterpack import pack\r\n\r\n    p = pack(1, 2, 3)\r\n\r\n    # This is an error because \"4 - ...\" is evaluated first.\r\n    4 - ... - p\r\n\r\n    # This is what you should do instead.\r\n    4 - (... - p)  # 4 - (3 - (2 - 1)) = 2\r\n\r\nYou may prefer to use parentheses in every case to keep the syntax clear and avoid this potential oversight.\r\n\r\nConditional chains are also supported, but they work a little differently from the other folds.\r\n\r\n.. code-block:: python\r\n\r\n    from parameterpack import pack\r\n\r\n    p = pack(1, 2, 3)\r\n\r\n    # Python evaluates \"a < b < c\" as \"a < b and b < c\", so this module does the same.\r\n    p < ...      # 1 < 2 < 3 = True, so 3 is returned.\r\n    p < ... < 4  # 1 < 2 < 3 < 4 = True\r\n    p < ... < 0  # 1 < 2 < 3 < 0 = False\r\n\r\n    p = pack(3, 2, 1)\r\n\r\n    p < ...  # 3 < 2 < 1 = False, so a special False-comparing object is returned.\r\n    ... < p  # 3 > 2 > 1 = True\r\n\r\nBecause python has no reversed-argument forms for the comparison operators, conditionals work a little differently.\r\nIf folding the comparison over the parameter pack's elements results in ``False``, in order to invalidate the entire\r\ncomparison chain, it will return a special object that will return ``False`` for any further comparisons. Otherwise, the\r\nlast element of the parameter pack is returned so that the comparison chain can continue.\r\n\r\n\r\nRunning Tests\r\n-------------\r\n\r\nTo run this module's tests in your system's Python interpreter, simply run ``python setup.py test`` from the\r\nrepository root.\r\n\r\nTo run tests in all supported interpreters, first ensure that every supported Python interpreter is installed on your\r\nsystem and added to the `PATH` environment variable. Then run ``pip install -e .[dev]`` from the repository root to\r\ninstall development dependencies, and then run ``tox`` from the repository root to run the tests.\r\n\r\n\r\nBugs Reports and Feature Requests\r\n---------------------------------\r\n\r\nPlease use the `issue tracker`_ to submit bugs or request features.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nCopyright Joe Lawson, 2017.\r\n\r\nThis package is distributed under the terms of the `MIT`_ license.\r\n\r\n.. _`MIT`: https://github.com/TehJoE/parameterpack/blob/master/LICENSE\r\n.. _`fold expressions`: http://en.cppreference.com/w/cpp/language/fold\r\n.. _`issue tracker`: https://github.com/TehJoE/parameterpack/issues", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TehJoE/parameterpack", "keywords": "development fold functional pack unpack", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "parameterpack", "package_url": "https://pypi.org/project/parameterpack/", "platform": "", "project_url": "https://pypi.org/project/parameterpack/", "project_urls": {"Homepage": "https://github.com/TehJoE/parameterpack"}, "release_url": "https://pypi.org/project/parameterpack/0.1.0/", "requires_dist": ["bumpversion; extra == 'dev'", "tox; extra == 'dev'"], "requires_python": "", "summary": "Ellipsis trickery for enabling fold expressions", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"parameter-pack\">\n<h2>Parameter Pack</h2>\n<p>This module provides a mechanism for writing something similar to C++17\u2019s <a href=\"http://en.cppreference.com/w/cpp/language/fold\" rel=\"nofollow\">fold expressions</a> in Python. This is\nachieved by co-opting Python\u2019s mostly unused <tt>Ellipsis</tt> literal.</p>\n</div>\n<div id=\"supported-operators\">\n<h2>Supported Operators</h2>\n<ul>\n<li>Addition (<tt>+</tt>)</li>\n<li>Subtraction (<tt>-</tt>)</li>\n<li>Multiplication (<tt>*</tt>)</li>\n<li>Integer division (<tt>//</tt>)</li>\n<li>Division (<tt>/</tt>)</li>\n<li>Modulus (<tt>%</tt>)</li>\n<li>Matrix Multiplication (<tt>@</tt>, Python &gt;= 3.5 only)</li>\n<li>Bitwise And (<tt>&amp;</tt>)</li>\n<li>Bitwise Or (<tt>|</tt>)</li>\n<li>Bitwise Xor (<tt>^</tt>)</li>\n<li>Left Shift (<tt>&lt;&lt;</tt>)</li>\n<li>Right Shift (<tt>&gt;&gt;</tt>)</li>\n<li><tt>__call__</tt></li>\n<li>Comparison operators (<tt>&gt;</tt>, <tt>&gt;=</tt>, <tt>&lt;</tt>, <tt>&lt;=</tt>, <tt>==</tt>, <tt>!=</tt>)</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>There are two ways to \u201cfold\u201d an operation over a parameter pack: <em>left</em> and <em>right</em> folds.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parameterpack</span> <span class=\"kn\">import</span> <span class=\"n\">pack</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Left fold</span>\n<span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"o\">...</span>      <span class=\"c1\"># (1 - 2) - 3 = -4</span>\n<span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"o\">...</span> <span class=\"o\">-</span> <span class=\"mi\">4</span>  <span class=\"c1\"># ((1 - 2) - 3) - 4 = -8</span>\n\n<span class=\"c1\"># Right fold</span>\n<span class=\"o\">...</span> <span class=\"o\">-</span> <span class=\"n\">p</span>     <span class=\"c1\"># 1 - (2 - 3) = 2</span>\n<span class=\"o\">...</span> <span class=\"o\">-</span> <span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">4</span> <span class=\"c1\"># 4 - (1 - (2 - 3)) = -2</span>\n</pre>\n<p>Note that the left fold groups operations on the left, while the right fold groups them on the right. This only makes\na difference if the folded operation is not associative, such as in the case of integer subtraction.</p>\n<p>Because it is not possible to redefine the <tt>ellipsis</tt> type\u2019s operators, a right fold on the right side of a binary\noperation requires parentheses.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parameterpack</span> <span class=\"kn\">import</span> <span class=\"n\">pack</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This is an error because \"4 - ...\" is evaluated first.</span>\n<span class=\"mi\">4</span> <span class=\"o\">-</span> <span class=\"o\">...</span> <span class=\"o\">-</span> <span class=\"n\">p</span>\n\n<span class=\"c1\"># This is what you should do instead.</span>\n<span class=\"mi\">4</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"o\">...</span> <span class=\"o\">-</span> <span class=\"n\">p</span><span class=\"p\">)</span>  <span class=\"c1\"># 4 - (3 - (2 - 1)) = 2</span>\n</pre>\n<p>You may prefer to use parentheses in every case to keep the syntax clear and avoid this potential oversight.</p>\n<p>Conditional chains are also supported, but they work a little differently from the other folds.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parameterpack</span> <span class=\"kn\">import</span> <span class=\"n\">pack</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Python evaluates \"a &lt; b &lt; c\" as \"a &lt; b and b &lt; c\", so this module does the same.</span>\n<span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"o\">...</span>      <span class=\"c1\"># 1 &lt; 2 &lt; 3 = True, so 3 is returned.</span>\n<span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"o\">...</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span>  <span class=\"c1\"># 1 &lt; 2 &lt; 3 &lt; 4 = True</span>\n<span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"o\">...</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span>  <span class=\"c1\"># 1 &lt; 2 &lt; 3 &lt; 0 = False</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"o\">...</span>  <span class=\"c1\"># 3 &lt; 2 &lt; 1 = False, so a special False-comparing object is returned.</span>\n<span class=\"o\">...</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span>  <span class=\"c1\"># 3 &gt; 2 &gt; 1 = True</span>\n</pre>\n<p>Because python has no reversed-argument forms for the comparison operators, conditionals work a little differently.\nIf folding the comparison over the parameter pack\u2019s elements results in <tt>False</tt>, in order to invalidate the entire\ncomparison chain, it will return a special object that will return <tt>False</tt> for any further comparisons. Otherwise, the\nlast element of the parameter pack is returned so that the comparison chain can continue.</p>\n</div>\n<div id=\"running-tests\">\n<h2>Running Tests</h2>\n<p>To run this module\u2019s tests in your system\u2019s Python interpreter, simply run <tt>python setup.py test</tt> from the\nrepository root.</p>\n<p>To run tests in all supported interpreters, first ensure that every supported Python interpreter is installed on your\nsystem and added to the <cite>PATH</cite> environment variable. Then run <tt>pip install <span class=\"pre\">-e</span> .[dev]</tt> from the repository root to\ninstall development dependencies, and then run <tt>tox</tt> from the repository root to run the tests.</p>\n</div>\n<div id=\"bugs-reports-and-feature-requests\">\n<h2>Bugs Reports and Feature Requests</h2>\n<p>Please use the <a href=\"https://github.com/TehJoE/parameterpack/issues\" rel=\"nofollow\">issue tracker</a> to submit bugs or request features.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright Joe Lawson, 2017.</p>\n<p>This package is distributed under the terms of the <a href=\"https://github.com/TehJoE/parameterpack/blob/master/LICENSE\" rel=\"nofollow\">MIT</a> license.</p>\n</div>\n\n          </div>"}, "last_serial": 2995544, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "92101a6f5078cbba41c7723b3ecf6dc0", "sha256": "da4454ed61df9ec3debbba2fe1bc5a91be15705a3dd12fad660cdef6e69da4f6"}, "downloads": -1, "filename": "parameterpack-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "92101a6f5078cbba41c7723b3ecf6dc0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6875, "upload_time": "2017-07-02T23:41:11", "upload_time_iso_8601": "2017-07-02T23:41:11.178919Z", "url": "https://files.pythonhosted.org/packages/2f/2e/a01d871920154f25708d0b20fb745deb9b604195962debfea62b6002ea82/parameterpack-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "92101a6f5078cbba41c7723b3ecf6dc0", "sha256": "da4454ed61df9ec3debbba2fe1bc5a91be15705a3dd12fad660cdef6e69da4f6"}, "downloads": -1, "filename": "parameterpack-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "92101a6f5078cbba41c7723b3ecf6dc0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6875, "upload_time": "2017-07-02T23:41:11", "upload_time_iso_8601": "2017-07-02T23:41:11.178919Z", "url": "https://files.pythonhosted.org/packages/2f/2e/a01d871920154f25708d0b20fb745deb9b604195962debfea62b6002ea82/parameterpack-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:58:34 2020"}