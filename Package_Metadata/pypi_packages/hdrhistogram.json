{"info": {"author": "Alec Hothan", "author_email": "ahothan@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "========\nOverview\n========\n\nHigh Dynamic Range Histogram python implementation\n\n.. image:: https://badges.gitter.im/Join Chat.svg\n   :target: https://gitter.im/HdrHistogram/HdrHistogram\n\n.. image:: https://travis-ci.org/HdrHistogram/HdrHistogram_py.svg?branch=master\n   :target: https://travis-ci.org/HdrHistogram/HdrHistogram_py\n\n\nThis repository contains a port to python of most of the original Java HDR Histogram\nlibrary:\n\n- Basic histogram value recording\n    - record value\n    - record value with correction for coordinated omission\n- Supports 16-bit, 32-bit and 64-bit counters\n- All histogram basic query APIs\n    - get value at percentile\n    - get total count\n    - get min value, max value, mean, standard deviation\n- All iterators are implemented: all values, recorded, percentile, linear, logarithmic\n- Text file histogram log writer and log reader\n- Histogram encoding and decoding (HdrHistogram V2 format only, V1 and V0 not supported)\n- supports python 2.7 and python 3\n\nHistogram V2 format encoding inter-operability with Java and C versions verified through unit test code.\n\nPython API\n----------\nUsers of this library can generally play 2 roles (often both):\n\n- record values into 1 or more histograms (histogram provisioning)\n- analyze and display histogram content and characteristics (histogram query)\n\nIn distributed cases, histogram provisioning can be be done remotely (and possibly in multiple locations) then\naggregated in a central place for analysis.\n\nA histogram instance can be created using the HdrHistogram class and specifying the\nminimum and maximum trackable value and the number of precision digits desired.\nFor example to create a histogram that can count values in the [1..3600000] range and\n1% precision (this could be for example to track latencies in the range [1 msec..1 hour]):\n\n.. code::\n\n     histogram = HdrHistogram(1, 60 * 60 * 1000, 2)\n\nBy default counters are 64-bit while 16 or 32-bit counters can be specified (word_size\noption set to 2 or 4 bytes).\nNote that counter overflow is not tested in this version so be careful when using\nsmaller counter sizes.\n\nOnce created it is easy to add values to a histogram:\n\n.. code::\n\n     histogram.record_value(latency)\n\nIf the code that generates the values is subject to Coordinated Omission,\nuse the corrected version of that method (example when the expected interval is\n10 msec):\n\n.. code::\n\n     histogram.record_corrected_value(latency, 10)\n\nAt any time, the histogram can be queried to return any property, such as getting\nthe total number of values recorded or the value at a given percentile:\n\n.. code::\n\n     count = histogram.get_total_count()\n     value = histogram.get_value_at_percentile(99.9)\n\nRecorded values can be iterated over using the recorded iterator:\n\n.. code::\n\n    for item in histogram.get_recorded_iterator():\n        print('value=%f count=%d percentile=%f' %\n                item.value_iterated_to,\n                item.count_added_in_this_iter_step,\n                item.percentile)\n\n\nAn encoded/compressed histogram can be generated by calling the compress method:\n\n.. code::\n\n     encoded_histogram = histogram.encode()\n\nAnd on reception, a compressed histogram can be decoded from the encoded string:\n\n.. code::\n\n     decoded_histogram = HdrHistogram.decode(encoded_histogram)\n     count = decoded_histogram.get_total_count()\n\nIn the case of aggregation, the decode_and_add method can be used:\n\n.. code::\n\n     aggregation_histogram.decode_and_add(encoded_histogram)\n\nIf you want to print the histogram in the standard tabular format:\n\n.. code::\n\n    histogram.output_percentile_distribution(file, scaling_ratio)\n    \nFor additional help on how to use the API:\n\n- browse through the python code and check the API documentation in the comment section for each method (where available)\n- the best documentation is by looking at the test code under the test directory\n\nThe test code (https://github.com/HdrHistogram/HdrHistogram_py/blob/master/test/test_hdrhistogram.py) pretty much covers every API.\n\nInstallation\n------------\nPre-requisites:\n\nMake sure you have python 2.7 or 3, and pip installed\n\nBinary installation\n^^^^^^^^^^^^^^^^^^^\nThis is the preferred method for most installations where you only need to use this library.\nUse a python virtual environment if needed.\n\n.. code::\n\n    pip install hdrhistogram\n\nSource code installation and Unit Testing\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis is the method to use for any development work with this library or if you\nwant to read or run the test code.\n\nInstall the unit test automation harness tox and hdrhistogram from github:\n\n.. code::\n\n    pip install tox\n    # cd to the proper location to clone the repository\n    git clone https://github.com/HdrHistogram/HdrHistogram_py.git\n    cd hdrhistogram\n\nRunning tox will execute the following targets:\n\n- pep8/flake8 for syntax and indentation checking\n- python unit test code (python 2.7 and 3)\n- pylint\n\nJust run tox without any argument (the first run will take more time as tox will setup the execution environment and download the necessary packages):\n\n.. code::\n\n    $ tox\n    GLOB sdist-make: /openstack/pyhdr/HdrHistogram_py/setup.py\n    py27 inst-nodeps: /openstack/pyhdr/HdrHistogram_py/.tox/dist/hdrhistogram-0.5.2.zip\n    py27 installed: astroid==1.5.3,backports.functools-lru-cache==1.4,configparser==3.5.0,enum34==1.1.6,flake8==3.3.0,future==0.16.0,hdrhistogram==0.5.2,isort==4.2.15,lazy-object-proxy==1.3.1,mccabe==0.6.1,pbr==3.1.1,py==1.4.34,pycodestyle==2.3.1,pyflakes==1.5.0,pylint==1.7.1,pytest==3.1.2,singledispatch==3.4.0.3,six==1.10.0,wrapt==1.10.10\n    py27 runtests: PYTHONHASHSEED='4015036329'\n    py27 runtests: commands[0] | py.test -q -s --basetemp=/openstack/pyhdr/HdrHistogram_py/.tox/py27/tmp\n    ......................ss.........\n    31 passed, 2 skipped in 5.14 seconds\n    py3 inst-nodeps: /openstack/pyhdr/HdrHistogram_py/.tox/dist/hdrhistogram-0.5.2.zip\n    py3 installed: You are using pip version 8.1.1, however version 9.0.1 is available.,You should consider upgrading via the 'pip install --upgrade pip' command.,flake8==2.5.4,future==0.15.2,hdrhistogram==0.5.2,mccabe==0.4.0,pbr==1.9.1,pep8==1.7.0,py==1.4.31,pyflakes==1.0.0,pytest==2.9.1\n    py3 runtests: PYTHONHASHSEED='4015036329'\n    py3 runtests: commands[0] | py.test -q -s --basetemp=/openstack/pyhdr/HdrHistogram_py/.tox/py3/tmp\n    s......................ss.........\n    31 passed, 3 skipped in 5.11 seconds\n    pep8 inst-nodeps: /openstack/pyhdr/HdrHistogram_py/.tox/dist/hdrhistogram-0.5.2.zip\n    pep8 installed: You are using pip version 8.1.1, however version 9.0.1 is available.,You should consider upgrading via the 'pip install --upgrade pip' command.,flake8==2.5.4,future==0.15.2,hdrhistogram==0.5.2,mccabe==0.4.0,pbr==1.9.1,pep8==1.7.0,py==1.4.31,pyflakes==1.0.0,pytest==2.9.1\n    pep8 runtests: PYTHONHASHSEED='4015036329'\n    pep8 runtests: commands[0] | flake8 hdrh test\n    lint inst-nodeps: /openstack/pyhdr/HdrHistogram_py/.tox/dist/hdrhistogram-0.5.2.zip\n    lint installed: astroid==1.5.3,backports.functools-lru-cache==1.4,configparser==3.5.0,enum34==1.1.6,flake8==3.3.0,future==0.16.0,hdrhistogram==0.5.2,isort==4.2.15,lazy-object-proxy==1.3.1,mccabe==0.6.1,pbr==3.1.1,py==1.4.34,pycodestyle==2.3.1,pyflakes==1.5.0,pylint==1.7.1,pytest==3.1.2,singledispatch==3.4.0.3,six==1.10.0,wrapt==1.10.10\n    lint runtests: PYTHONHASHSEED='4015036329'\n    lint runtests: commands[0] | pylint --rcfile pylint.rc hdrh test\n\n    --------------------------------------------------------------------\n    Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\n\n    ________________________________________________________________ summary ________________________________________________________________\n      py27: commands succeeded\n      py3: commands succeeded\n      pep8: commands succeeded\n      lint: commands succeeded\n      congratulations :)\n\nUtility to dump an encoded histogram string (dump_hdrh)\n-------------------------------------------------------\n\nYou can dump any encoded histogram using the dump_hdrh tool (installed along with the package).\n\n.. code::\n\n   $ dump_hdrh\n\n   Usage: dump_hdrh [<string encoded hdr histogram>]*\n\nYou can pass one or more histogram strings to the tools:\n\n.. code::\n\n   $ dump_hdrh 'HISTFAAAACl4nJNpmSzMwMDAxQABzFCaEUzOmNZg/wEi0NzIyPSYlWmpGBMAh4gG4A=='\n\n   Dumping histogram: HISTFAAAACl4nJNpmSzMwMDAxQABzFCaEUzOmNZg/wEi0NzIyPSYlWmpGBMAh4gG4A==\n\n         Value     Percentile TotalCount 1/(1-Percentile)\n\n   139647.000 0.000000000000          1           1.00\n   139647.000 0.100000000000          1           1.11\n   139647.000 0.190000000000          1           1.23\n   139647.000 0.271000000000          1           1.37\n   187135.000 0.343900000000          2           1.52\n   187135.000 0.409510000000          2           1.69\n   187135.000 0.468559000000          2           1.88\n   187135.000 0.521703100000          2           2.09\n   187135.000 0.569532790000          2           2.32\n   187135.000 0.612579511000          2           2.58\n   187135.000 0.651321559900          2           2.87\n   477695.000 0.686189403910          3           3.19\n   477695.000 1.000000000000          3\n   #[Mean    =   268074.667, StdDeviation   =   149397.390]\n   #[Max     =   477695.000, TotalCount     =        3.000]\n   #[Buckets =           14, SubBuckets     =         2048]\n\n\nAggregation of Distributed Histograms\n-------------------------------------\n\nAggregation of multiple histograms into 1 is useful in cases where tools\nthat generate these individual histograms have to run in a distributed way in\norder to scale sufficiently.\nAs an example, the wrk2 tool (https://github.com/giltene/wrk2.git) is a great\ntool for measuring the latency of HTTP requests with a large number of\nconnections. Although this tool can support thousands of connections per\nprocess, some setups require massive scale in the order of hundreds of\nthousands of connections which require running a large number of instances of\nwrk processes, possibly on a large number of servers.\nGiven that each instance of wrk can generate a separate histogram, assessing\nthe scale of the entire system requires aggregating all these histograms\ninto 1 in a way that does not impact the accuracy of the results.\nSo there are 2 problems to solve:\n\n- find a way to properly aggregate multiple histograms without losing any detail\n\n- find a way to transport all these histograms into a central place\n\nThis library provides a solution for the aggregation part of the problem:\n\n- reuse the HDR histogram compression format version 1 to encode and compress a complete histogram that can be sent over the wire to the aggregator\n\n- provide python APIs to easily and efficiently:\n\n  * compress an histogram instance into a transportable string\n  * decompress a compressed histogram and add it to an existing histogram\n\nRefer to the unit test code (test/test_hdrhistogram.py) to see how these APIs can be used.\n\nHistogram wire encoding and size\n--------------------------------\nHistograms are encoded using the HdrHistogram V2 format which is based on an adapted ZigZag LEB128 encoding where:\n\n- consecutive zero counters are encoded as a negative number representing the count of consecutive zeros\n- non zero counter values are encoded as a positive number\n\nAn empty histogram (all zeros counters) is encoded in exactly 48 bytes regardless of the counter size.\nA typical histogram (2 digits precision 1 usec to 1 day range) can be encoded in less than the typical MTU size of 1500 bytes.\n\nThis format is compatible with the HdrHistogram Java and C implementations.\n\nPerformance\n-----------\nHistogram value recording has the same cost characteristics than the original Java version\nsince it is a direct port (fixed cost for CPU and reduced memory usage).\nEncoding and decoding in the python version is very fast and close to native performance thanks to the use of:\n\n- integrated C extensions (native C code called from python) that have been developed to handle the low-level byte encoding/decoding/addition work at native speed\n- native compression library (zlib and base64)\n\nOn a macbook pro (Intel Core i7 @ 2.3GHz) and Linux server (Intel(R) Xeon(R) CPU E5-2665 @ 2.40GHz):\n\n+---------------------------+-----------+--------+\n| Operation Time in usec    |   Macbook |  Linux |\n+===========================+===========+========+\n| record a value            |        2  |    1.5 |\n+---------------------------+-----------+--------+\n| encode typical histogram  |      100  |   90   |\n+---------------------------+-----------+--------+\n| decode and add            |      150  |  125   |\n+---------------------------+-----------+--------+\n\n\nThe typical histogram is defined as one that has 30% of 64-bit buckets filled with\nsequential values starting at 20% of the array, for a range of 1 usec to 24 hours\nand 2 digits precision. This represents a total of 3968 buckets, of which\nthe first 793 are zeros, the next 1190 buckets have a sequential/unique value and all\nremaining buckets are zeros, for an encoded length of 3116 bytes. Most real-world histograms\nhave a much sparser pattern that will yield a lower encoding and decoding time.\nDecode and add will decode the encoded histogram and add its content to an existing histogram.\n\nTo measure the performance of encoding and decoding and get the profiling, use the\n--runperf option. The 2 profiling functions will provide the profiling information\nfor encoding and decoding the typical histogram 1000 times (so the time values shown\nare seconds for 1000 decodes/decodes).\n\nExample of run on the same macbook pro:\n\n.. code::\n\n    $ tox -e py27 '-k test_cod_perf --runperf'\n    GLOB sdist-make: /openstack/pyhdr/hdrhistogram/setup.py\n    py27 inst-nodeps: /openstack/pyhdr/hdrhistogram/.tox/dist/hdrhistogram-0.2.3.dev1.zip\n    py27 installed: flake8==2.4.1,hdrhistogram==0.2.3.dev1,mccabe==0.3.1,numpy==1.9.2,pbr==1.7.0,pep8==1.5.7,py==1.4.30,pyflakes==0.8.1,pytest==2.7.2,wsgiref==0.1.2\n    py27 runtests: PYTHONHASHSEED='4078653554'\n    py27 runtests: commands[0] | py.test -q -s --basetemp=/openstack/pyhdr/hdrhistogram/.tox/py27/tmp -k test_cod_perf --runperf\n    0:00:00.095722\n             36303 function calls in 0.107 seconds\n\n       Ordered by: standard name\n\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n            1    0.000    0.000    0.107    0.107 <string>:1(<module>)\n         2000    0.004    0.000    0.004    0.000 __init__.py:505(string_at)\n         1000    0.001    0.000    0.007    0.000 base64.py:42(b64encode)\n            1    0.000    0.000    0.000    0.000 codec.py:109(__init__)\n            1    0.000    0.000    0.000    0.000 codec.py:144(_init_counts)\n            1    0.000    0.000    0.000    0.000 codec.py:162(get_counts)\n         1000    0.008    0.000    0.074    0.000 codec.py:204(compress)\n            1    0.000    0.000    0.000    0.000 codec.py:246(__init__)\n            1    0.000    0.000    0.000    0.000 codec.py:275(get_counts)\n         1000    0.005    0.000    0.094    0.000 codec.py:284(encode)\n            1    0.000    0.000    0.000    0.000 codec.py:59(get_encoding_cookie)\n            1    0.000    0.000    0.000    0.000 codec.py:63(get_compression_cookie)\n         2190    0.002    0.000    0.003    0.000 histogram.py:139(_clz)\n         2190    0.003    0.000    0.006    0.000 histogram.py:150(_get_bucket_index)\n         2190    0.001    0.000    0.001    0.000 histogram.py:156(_get_sub_bucket_index)\n         1190    0.001    0.000    0.001    0.000 histogram.py:159(_counts_index)\n         1190    0.001    0.000    0.006    0.000 histogram.py:169(_counts_index_for)\n         1190    0.003    0.000    0.009    0.000 histogram.py:174(record_value)\n         1190    0.000    0.000    0.000    0.000 histogram.py:228(get_value_from_sub_bucket)\n         1190    0.001    0.000    0.001    0.000 histogram.py:231(get_value_from_index)\n            1    0.000    0.000    0.000    0.000 histogram.py:31(get_bucket_count)\n         1000    0.001    0.000    0.095    0.000 histogram.py:413(encode)\n         1000    0.001    0.000    0.005    0.000 histogram.py:456(get_counts_array_index)\n            1    0.000    0.000    0.000    0.000 histogram.py:62(__init__)\n            1    0.001    0.001    0.012    0.012 test_hdrhistogram.py:374(fill_hist_counts)\n            1    0.001    0.001    0.107    0.107 test_hdrhistogram.py:489(check_cod_perf)\n         5000    0.001    0.000    0.001    0.000 {_ctypes.addressof}\n         1000    0.005    0.000    0.005    0.000 {binascii.b2a_base64}\n         2190    0.001    0.000    0.001    0.000 {bin}\n            2    0.000    0.000    0.000    0.000 {built-in method now}\n         3190    0.000    0.000    0.000    0.000 {len}\n            1    0.000    0.000    0.000    0.000 {math.ceil}\n            1    0.000    0.000    0.000    0.000 {math.floor}\n            4    0.000    0.000    0.000    0.000 {math.log}\n            2    0.000    0.000    0.000    0.000 {math.pow}\n         1190    0.000    0.000    0.000    0.000 {max}\n            1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n         1000    0.001    0.000    0.001    0.000 {method 'join' of 'str' objects}\n         1190    0.000    0.000    0.000    0.000 {min}\n         1000    0.008    0.000    0.008    0.000 {pyhdrh.encode}\n         1000    0.056    0.000    0.056    0.000 {zlib.compress}\n\nAnd for decoding:\n\n.. code::\n\n    $ tox -e py27 '-k test_dec_perf --runperf'\n    GLOB sdist-make: /openstack/pyhdr/hdrhistogram/setup.py\n    py27 inst-nodeps: /openstack/pyhdr/hdrhistogram/.tox/dist/hdrhistogram-0.2.3.dev1.zip\n    py27 installed: flake8==2.4.1,hdrhistogram==0.2.3.dev1,mccabe==0.3.1,numpy==1.9.2,pbr==1.7.0,pep8==1.5.7,py==1.4.30,pyflakes==0.8.1,pytest==2.7.2,wsgiref==0.1.2\n    py27 runtests: PYTHONHASHSEED='2608914940'\n    py27 runtests: commands[0] | py.test -q -s --basetemp=/openstack/pyhdr/hdrhistogram/.tox/py27/tmp -k test_dec_perf --runperf\n    0:00:00.149938\n             115325 function calls in 0.160 seconds\n\n       Ordered by: standard name\n\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n            1    0.000    0.000    0.160    0.160 <string>:1(<module>)\n            2    0.000    0.000    0.000    0.000 __init__.py:505(string_at)\n            1    0.000    0.000    0.000    0.000 base64.py:42(b64encode)\n         1000    0.001    0.000    0.012    0.000 base64.py:59(b64decode)\n         1001    0.001    0.000    0.023    0.000 codec.py:109(__init__)\n         1001    0.009    0.000    0.009    0.000 codec.py:144(_init_counts)\n         1000    0.002    0.000    0.022    0.000 codec.py:147(init_counts)\n         3001    0.001    0.000    0.001    0.000 codec.py:162(get_counts)\n         1000    0.004    0.000    0.022    0.000 codec.py:165(_decompress)\n            1    0.000    0.000    0.000    0.000 codec.py:204(compress)\n         1001    0.002    0.000    0.003    0.000 codec.py:246(__init__)\n         3001    0.001    0.000    0.002    0.000 codec.py:275(get_counts)\n            1    0.000    0.000    0.000    0.000 codec.py:284(encode)\n         1000    0.005    0.000    0.041    0.000 codec.py:306(decode)\n         1000    0.002    0.000    0.010    0.000 codec.py:352(add)\n         3000    0.001    0.000    0.001    0.000 codec.py:50(get_cookie_base)\n         1000    0.001    0.000    0.001    0.000 codec.py:53(get_word_size_in_bytes_from_cookie)\n            1    0.000    0.000    0.000    0.000 codec.py:59(get_encoding_cookie)\n         1001    0.000    0.000    0.000    0.000 codec.py:63(get_compression_cookie)\n         7191    0.004    0.000    0.008    0.000 histogram.py:139(_clz)\n         7191    0.009    0.000    0.017    0.000 histogram.py:150(_get_bucket_index)\n         7191    0.003    0.000    0.003    0.000 histogram.py:156(_get_sub_bucket_index)\n         1190    0.000    0.000    0.000    0.000 histogram.py:159(_counts_index)\n         1190    0.001    0.000    0.005    0.000 histogram.py:169(_counts_index_for)\n         1190    0.002    0.000    0.008    0.000 histogram.py:174(record_value)\n        10190    0.003    0.000    0.003    0.000 histogram.py:228(get_value_from_sub_bucket)\n         4190    0.004    0.000    0.005    0.000 histogram.py:231(get_value_from_index)\n         2000    0.002    0.000    0.008    0.000 histogram.py:240(get_lowest_equivalent_value)\n         4000    0.006    0.000    0.019    0.000 histogram.py:248(get_highest_equivalent_value)\n         1001    0.011    0.000    0.011    0.000 histogram.py:31(get_bucket_count)\n         1000    0.000    0.000    0.000    0.000 histogram.py:326(get_total_count)\n         2000    0.001    0.000    0.010    0.000 histogram.py:342(get_max_value)\n         2000    0.003    0.000    0.011    0.000 histogram.py:347(get_min_value)\n            1    0.000    0.000    0.000    0.000 histogram.py:413(encode)\n         1000    0.002    0.000    0.010    0.000 histogram.py:439(set_internal_tacking_values)\n            1    0.000    0.000    0.000    0.000 histogram.py:456(get_counts_array_index)\n         1000    0.006    0.000    0.044    0.000 histogram.py:495(add)\n         1000    0.001    0.000    0.149    0.000 histogram.py:526(decode_and_add)\n         1000    0.003    0.000    0.104    0.000 histogram.py:545(decode)\n         1001    0.012    0.000    0.060    0.000 histogram.py:62(__init__)\n            1    0.001    0.001    0.010    0.010 test_hdrhistogram.py:374(fill_hist_counts)\n            1    0.001    0.001    0.160    0.160 test_hdrhistogram.py:502(check_dec_perf)\n         3005    0.000    0.000    0.000    0.000 {_ctypes.addressof}\n         1000    0.011    0.000    0.011    0.000 {binascii.a2b_base64}\n            1    0.000    0.000    0.000    0.000 {binascii.b2a_base64}\n         7191    0.003    0.000    0.003    0.000 {bin}\n            2    0.000    0.000    0.000    0.000 {built-in method now}\n         9192    0.001    0.000    0.001    0.000 {len}\n         1001    0.000    0.000    0.000    0.000 {math.ceil}\n         1001    0.000    0.000    0.000    0.000 {math.floor}\n         4004    0.001    0.000    0.001    0.000 {math.log}\n         2002    0.001    0.000    0.001    0.000 {math.pow}\n         3190    0.001    0.000    0.001    0.000 {max}\n            1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n         2000    0.003    0.000    0.003    0.000 {method 'from_buffer_copy' of '_ctypes.PyCStructType' objects}\n            1    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}\n         3190    0.001    0.000    0.001    0.000 {min}\n         1000    0.007    0.000    0.007    0.000 {pyhdrh.add_array}\n         1000    0.011    0.000    0.011    0.000 {pyhdrh.decode}\n            1    0.000    0.000    0.000    0.000 {pyhdrh.encode}\n            1    0.000    0.000    0.000    0.000 {zlib.compress}\n         1000    0.015    0.000    0.015    0.000 {zlib.decompress}\n    \n    .\n    ==================================== 30 tests deselected by '-ktest_dec_perf' ====================================\n    1 passed, 30 deselected in 0.35 seconds\n    ____________________________________________________ summary _____________________________________________________\n      py27: commands succeeded\n      congratulations :)\n\nFinally, example of profiling when recording a large number of values (record_value\nshows 0.313 seconds for 172032 calls):\n\n.. code::\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    1.936    1.936 <string>:1(<module>)\n   172044    0.090    0.000    0.189    0.000 histogram.py:137(_clz)\n   172044    0.191    0.000    0.379    0.000 histogram.py:148(_get_bucket_index)\n   172044    0.066    0.000    0.066    0.000 histogram.py:154(_get_sub_bucket_index)\n   172032    0.066    0.000    0.066    0.000 histogram.py:157(_counts_index)\n   172032    0.182    0.000    0.693    0.000 histogram.py:167(_counts_index_for)\n   172032    0.313    0.000    1.078    0.000 histogram.py:172(record_value)\n   344064    0.158    0.000    0.158    0.000 histogram.py:206(get_count_at_index)\n   172050    0.038    0.000    0.038    0.000 histogram.py:226(get_value_from_sub_bucket)\n   172044    0.139    0.000    0.177    0.000 histogram.py:229(get_value_from_index)\n       12    0.103    0.009    0.103    0.009 histogram.py:552(add_counts)\n        6    0.122    0.020    1.376    0.229 test_hdrhistogram.py:605(fill_hist_counts)\n       12    0.193    0.016    0.351    0.029 test_hdrhistogram.py:612(check_hist_counts)\n      \nLimitations, Caveats and Known Issues\n-------------------------------------\n\nThe latest features and bug fixes of the original HDR histogram library may not be available in this python port.\nExamples of notable features/APIs not implemented:\n\n- concurrency support (AtomicHistogram, ConcurrentHistogram...)\n- DoubleHistogram\n- histogram auto-resize\n- recorder function\n\nThis implementation has byte endianess encoding issues when used with PyPy\ndue to a limitation of the PyPy code\n(see https://github.com/HdrHistogram/HdrHistogram_py/issues/13).\n\nThe current implementation has issues running on Windows 32-bit systems (library crashing during decode).\n\nDependencies\n------------\nThe only dependency (outside of using pytest and tox for the unit testing) is the\nsmall pbr python package which takes care of the versioning (among other things).\n\nLicensing\n---------\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nContribution\n------------\nExternal contribution, forks and GitHub pull requests are welcome.\n\n\nAcknowledgements\n----------------\n\nThe python code was directly ported from the original HDR Histogram Java and C libraries:\n\n* https://github.com/HdrHistogram/HdrHistogram.git\n* https://github.com/HdrHistogram/HdrHistogram_c.git\n\n\nLinks\n-----\n\n* Source: https://github.com/HdrHistogram/HdrHistogram_py.git", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ahothan/hdrhistogram", "keywords": "hdrhistogram hdr histogram high dynamic range", "license": "", "maintainer": "", "maintainer_email": "", "name": "hdrhistogram", "package_url": "https://pypi.org/project/hdrhistogram/", "platform": "", "project_url": "https://pypi.org/project/hdrhistogram/", "project_urls": {"Homepage": "https://github.com/ahothan/hdrhistogram"}, "release_url": "https://pypi.org/project/hdrhistogram/0.7.1/", "requires_dist": null, "requires_python": "", "summary": "High Dynamic Range histogram in native python", "version": "0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>High Dynamic Range Histogram python implementation</p>\n<a href=\"https://gitter.im/HdrHistogram/HdrHistogram\" rel=\"nofollow\"><img alt=\"https://badges.gitter.im/JoinChat.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80eb8731c1b22ceb3dc55aceefa7e2b8ee2de06c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e436861742e737667\"></a>\n<a href=\"https://travis-ci.org/HdrHistogram/HdrHistogram_py\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/HdrHistogram/HdrHistogram_py.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b143beb9cca97b1786f20ac42144d76b9ca14c0/68747470733a2f2f7472617669732d63692e6f72672f486472486973746f6772616d2f486472486973746f6772616d5f70792e7376673f6272616e63683d6d6173746572\"></a>\n<p>This repository contains a port to python of most of the original Java HDR Histogram\nlibrary:</p>\n<ul>\n<li><dl>\n<dt>Basic histogram value recording</dt>\n<dd><ul>\n<li>record value</li>\n<li>record value with correction for coordinated omission</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>Supports 16-bit, 32-bit and 64-bit counters</li>\n<li><dl>\n<dt>All histogram basic query APIs</dt>\n<dd><ul>\n<li>get value at percentile</li>\n<li>get total count</li>\n<li>get min value, max value, mean, standard deviation</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>All iterators are implemented: all values, recorded, percentile, linear, logarithmic</li>\n<li>Text file histogram log writer and log reader</li>\n<li>Histogram encoding and decoding (HdrHistogram V2 format only, V1 and V0 not supported)</li>\n<li>supports python 2.7 and python 3</li>\n</ul>\n<p>Histogram V2 format encoding inter-operability with Java and C versions verified through unit test code.</p>\n<div id=\"python-api\">\n<h2>Python API</h2>\n<p>Users of this library can generally play 2 roles (often both):</p>\n<ul>\n<li>record values into 1 or more histograms (histogram provisioning)</li>\n<li>analyze and display histogram content and characteristics (histogram query)</li>\n</ul>\n<p>In distributed cases, histogram provisioning can be be done remotely (and possibly in multiple locations) then\naggregated in a central place for analysis.</p>\n<p>A histogram instance can be created using the HdrHistogram class and specifying the\nminimum and maximum trackable value and the number of precision digits desired.\nFor example to create a histogram that can count values in the [1..3600000] range and\n1% precision (this could be for example to track latencies in the range [1 msec..1 hour]):</p>\n<pre>histogram = HdrHistogram(1, 60 * 60 * 1000, 2)\n</pre>\n<p>By default counters are 64-bit while 16 or 32-bit counters can be specified (word_size\noption set to 2 or 4 bytes).\nNote that counter overflow is not tested in this version so be careful when using\nsmaller counter sizes.</p>\n<p>Once created it is easy to add values to a histogram:</p>\n<pre>histogram.record_value(latency)\n</pre>\n<p>If the code that generates the values is subject to Coordinated Omission,\nuse the corrected version of that method (example when the expected interval is\n10 msec):</p>\n<pre>histogram.record_corrected_value(latency, 10)\n</pre>\n<p>At any time, the histogram can be queried to return any property, such as getting\nthe total number of values recorded or the value at a given percentile:</p>\n<pre>count = histogram.get_total_count()\nvalue = histogram.get_value_at_percentile(99.9)\n</pre>\n<p>Recorded values can be iterated over using the recorded iterator:</p>\n<pre>for item in histogram.get_recorded_iterator():\n    print('value=%f count=%d percentile=%f' %\n            item.value_iterated_to,\n            item.count_added_in_this_iter_step,\n            item.percentile)\n</pre>\n<p>An encoded/compressed histogram can be generated by calling the compress method:</p>\n<pre>encoded_histogram = histogram.encode()\n</pre>\n<p>And on reception, a compressed histogram can be decoded from the encoded string:</p>\n<pre>decoded_histogram = HdrHistogram.decode(encoded_histogram)\ncount = decoded_histogram.get_total_count()\n</pre>\n<p>In the case of aggregation, the decode_and_add method can be used:</p>\n<pre>aggregation_histogram.decode_and_add(encoded_histogram)\n</pre>\n<p>If you want to print the histogram in the standard tabular format:</p>\n<pre>histogram.output_percentile_distribution(file, scaling_ratio)\n</pre>\n<p>For additional help on how to use the API:</p>\n<ul>\n<li>browse through the python code and check the API documentation in the comment section for each method (where available)</li>\n<li>the best documentation is by looking at the test code under the test directory</li>\n</ul>\n<p>The test code (<a href=\"https://github.com/HdrHistogram/HdrHistogram_py/blob/master/test/test_hdrhistogram.py\" rel=\"nofollow\">https://github.com/HdrHistogram/HdrHistogram_py/blob/master/test/test_hdrhistogram.py</a>) pretty much covers every API.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Pre-requisites:</p>\n<p>Make sure you have python 2.7 or 3, and pip installed</p>\n<div id=\"binary-installation\">\n<h3>Binary installation</h3>\n<p>This is the preferred method for most installations where you only need to use this library.\nUse a python virtual environment if needed.</p>\n<pre>pip install hdrhistogram\n</pre>\n</div>\n<div id=\"source-code-installation-and-unit-testing\">\n<h3>Source code installation and Unit Testing</h3>\n<p>This is the method to use for any development work with this library or if you\nwant to read or run the test code.</p>\n<p>Install the unit test automation harness tox and hdrhistogram from github:</p>\n<pre>pip install tox\n# cd to the proper location to clone the repository\ngit clone https://github.com/HdrHistogram/HdrHistogram_py.git\ncd hdrhistogram\n</pre>\n<p>Running tox will execute the following targets:</p>\n<ul>\n<li>pep8/flake8 for syntax and indentation checking</li>\n<li>python unit test code (python 2.7 and 3)</li>\n<li>pylint</li>\n</ul>\n<p>Just run tox without any argument (the first run will take more time as tox will setup the execution environment and download the necessary packages):</p>\n<pre>$ tox\nGLOB sdist-make: /openstack/pyhdr/HdrHistogram_py/setup.py\npy27 inst-nodeps: /openstack/pyhdr/HdrHistogram_py/.tox/dist/hdrhistogram-0.5.2.zip\npy27 installed: astroid==1.5.3,backports.functools-lru-cache==1.4,configparser==3.5.0,enum34==1.1.6,flake8==3.3.0,future==0.16.0,hdrhistogram==0.5.2,isort==4.2.15,lazy-object-proxy==1.3.1,mccabe==0.6.1,pbr==3.1.1,py==1.4.34,pycodestyle==2.3.1,pyflakes==1.5.0,pylint==1.7.1,pytest==3.1.2,singledispatch==3.4.0.3,six==1.10.0,wrapt==1.10.10\npy27 runtests: PYTHONHASHSEED='4015036329'\npy27 runtests: commands[0] | py.test -q -s --basetemp=/openstack/pyhdr/HdrHistogram_py/.tox/py27/tmp\n......................ss.........\n31 passed, 2 skipped in 5.14 seconds\npy3 inst-nodeps: /openstack/pyhdr/HdrHistogram_py/.tox/dist/hdrhistogram-0.5.2.zip\npy3 installed: You are using pip version 8.1.1, however version 9.0.1 is available.,You should consider upgrading via the 'pip install --upgrade pip' command.,flake8==2.5.4,future==0.15.2,hdrhistogram==0.5.2,mccabe==0.4.0,pbr==1.9.1,pep8==1.7.0,py==1.4.31,pyflakes==1.0.0,pytest==2.9.1\npy3 runtests: PYTHONHASHSEED='4015036329'\npy3 runtests: commands[0] | py.test -q -s --basetemp=/openstack/pyhdr/HdrHistogram_py/.tox/py3/tmp\ns......................ss.........\n31 passed, 3 skipped in 5.11 seconds\npep8 inst-nodeps: /openstack/pyhdr/HdrHistogram_py/.tox/dist/hdrhistogram-0.5.2.zip\npep8 installed: You are using pip version 8.1.1, however version 9.0.1 is available.,You should consider upgrading via the 'pip install --upgrade pip' command.,flake8==2.5.4,future==0.15.2,hdrhistogram==0.5.2,mccabe==0.4.0,pbr==1.9.1,pep8==1.7.0,py==1.4.31,pyflakes==1.0.0,pytest==2.9.1\npep8 runtests: PYTHONHASHSEED='4015036329'\npep8 runtests: commands[0] | flake8 hdrh test\nlint inst-nodeps: /openstack/pyhdr/HdrHistogram_py/.tox/dist/hdrhistogram-0.5.2.zip\nlint installed: astroid==1.5.3,backports.functools-lru-cache==1.4,configparser==3.5.0,enum34==1.1.6,flake8==3.3.0,future==0.16.0,hdrhistogram==0.5.2,isort==4.2.15,lazy-object-proxy==1.3.1,mccabe==0.6.1,pbr==3.1.1,py==1.4.34,pycodestyle==2.3.1,pyflakes==1.5.0,pylint==1.7.1,pytest==3.1.2,singledispatch==3.4.0.3,six==1.10.0,wrapt==1.10.10\nlint runtests: PYTHONHASHSEED='4015036329'\nlint runtests: commands[0] | pylint --rcfile pylint.rc hdrh test\n\n--------------------------------------------------------------------\nYour code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)\n\n________________________________________________________________ summary ________________________________________________________________\n  py27: commands succeeded\n  py3: commands succeeded\n  pep8: commands succeeded\n  lint: commands succeeded\n  congratulations :)\n</pre>\n</div>\n</div>\n<div id=\"utility-to-dump-an-encoded-histogram-string-dump-hdrh\">\n<h2>Utility to dump an encoded histogram string (dump_hdrh)</h2>\n<p>You can dump any encoded histogram using the dump_hdrh tool (installed along with the package).</p>\n<pre>$ dump_hdrh\n\nUsage: dump_hdrh [&lt;string encoded hdr histogram&gt;]*\n</pre>\n<p>You can pass one or more histogram strings to the tools:</p>\n<pre>$ dump_hdrh 'HISTFAAAACl4nJNpmSzMwMDAxQABzFCaEUzOmNZg/wEi0NzIyPSYlWmpGBMAh4gG4A=='\n\nDumping histogram: HISTFAAAACl4nJNpmSzMwMDAxQABzFCaEUzOmNZg/wEi0NzIyPSYlWmpGBMAh4gG4A==\n\n      Value     Percentile TotalCount 1/(1-Percentile)\n\n139647.000 0.000000000000          1           1.00\n139647.000 0.100000000000          1           1.11\n139647.000 0.190000000000          1           1.23\n139647.000 0.271000000000          1           1.37\n187135.000 0.343900000000          2           1.52\n187135.000 0.409510000000          2           1.69\n187135.000 0.468559000000          2           1.88\n187135.000 0.521703100000          2           2.09\n187135.000 0.569532790000          2           2.32\n187135.000 0.612579511000          2           2.58\n187135.000 0.651321559900          2           2.87\n477695.000 0.686189403910          3           3.19\n477695.000 1.000000000000          3\n#[Mean    =   268074.667, StdDeviation   =   149397.390]\n#[Max     =   477695.000, TotalCount     =        3.000]\n#[Buckets =           14, SubBuckets     =         2048]\n</pre>\n</div>\n<div id=\"aggregation-of-distributed-histograms\">\n<h2>Aggregation of Distributed Histograms</h2>\n<p>Aggregation of multiple histograms into 1 is useful in cases where tools\nthat generate these individual histograms have to run in a distributed way in\norder to scale sufficiently.\nAs an example, the wrk2 tool (<a href=\"https://github.com/giltene/wrk2.git\" rel=\"nofollow\">https://github.com/giltene/wrk2.git</a>) is a great\ntool for measuring the latency of HTTP requests with a large number of\nconnections. Although this tool can support thousands of connections per\nprocess, some setups require massive scale in the order of hundreds of\nthousands of connections which require running a large number of instances of\nwrk processes, possibly on a large number of servers.\nGiven that each instance of wrk can generate a separate histogram, assessing\nthe scale of the entire system requires aggregating all these histograms\ninto 1 in a way that does not impact the accuracy of the results.\nSo there are 2 problems to solve:</p>\n<ul>\n<li>find a way to properly aggregate multiple histograms without losing any detail</li>\n<li>find a way to transport all these histograms into a central place</li>\n</ul>\n<p>This library provides a solution for the aggregation part of the problem:</p>\n<ul>\n<li>reuse the HDR histogram compression format version 1 to encode and compress a complete histogram that can be sent over the wire to the aggregator</li>\n<li>provide python APIs to easily and efficiently:<ul>\n<li>compress an histogram instance into a transportable string</li>\n<li>decompress a compressed histogram and add it to an existing histogram</li>\n</ul>\n</li>\n</ul>\n<p>Refer to the unit test code (test/test_hdrhistogram.py) to see how these APIs can be used.</p>\n</div>\n<div id=\"histogram-wire-encoding-and-size\">\n<h2>Histogram wire encoding and size</h2>\n<p>Histograms are encoded using the HdrHistogram V2 format which is based on an adapted ZigZag LEB128 encoding where:</p>\n<ul>\n<li>consecutive zero counters are encoded as a negative number representing the count of consecutive zeros</li>\n<li>non zero counter values are encoded as a positive number</li>\n</ul>\n<p>An empty histogram (all zeros counters) is encoded in exactly 48 bytes regardless of the counter size.\nA typical histogram (2 digits precision 1 usec to 1 day range) can be encoded in less than the typical MTU size of 1500 bytes.</p>\n<p>This format is compatible with the HdrHistogram Java and C implementations.</p>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>Histogram value recording has the same cost characteristics than the original Java version\nsince it is a direct port (fixed cost for CPU and reduced memory usage).\nEncoding and decoding in the python version is very fast and close to native performance thanks to the use of:</p>\n<ul>\n<li>integrated C extensions (native C code called from python) that have been developed to handle the low-level byte encoding/decoding/addition work at native speed</li>\n<li>native compression library (zlib and base64)</li>\n</ul>\n<p>On a macbook pro (Intel Core i7 @ 2.3GHz) and Linux server (Intel(R) Xeon(R) CPU E5-2665 @ 2.40GHz):</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Operation Time in usec</th>\n<th>Macbook</th>\n<th>Linux</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>record a value</td>\n<td>2</td>\n<td>1.5</td>\n</tr>\n<tr><td>encode typical histogram</td>\n<td>100</td>\n<td>90</td>\n</tr>\n<tr><td>decode and add</td>\n<td>150</td>\n<td>125</td>\n</tr>\n</tbody>\n</table>\n<p>The typical histogram is defined as one that has 30% of 64-bit buckets filled with\nsequential values starting at 20% of the array, for a range of 1 usec to 24 hours\nand 2 digits precision. This represents a total of 3968 buckets, of which\nthe first 793 are zeros, the next 1190 buckets have a sequential/unique value and all\nremaining buckets are zeros, for an encoded length of 3116 bytes. Most real-world histograms\nhave a much sparser pattern that will yield a lower encoding and decoding time.\nDecode and add will decode the encoded histogram and add its content to an existing histogram.</p>\n<p>To measure the performance of encoding and decoding and get the profiling, use the\n\u2013runperf option. The 2 profiling functions will provide the profiling information\nfor encoding and decoding the typical histogram 1000 times (so the time values shown\nare seconds for 1000 decodes/decodes).</p>\n<p>Example of run on the same macbook pro:</p>\n<pre>$ tox -e py27 '-k test_cod_perf --runperf'\nGLOB sdist-make: /openstack/pyhdr/hdrhistogram/setup.py\npy27 inst-nodeps: /openstack/pyhdr/hdrhistogram/.tox/dist/hdrhistogram-0.2.3.dev1.zip\npy27 installed: flake8==2.4.1,hdrhistogram==0.2.3.dev1,mccabe==0.3.1,numpy==1.9.2,pbr==1.7.0,pep8==1.5.7,py==1.4.30,pyflakes==0.8.1,pytest==2.7.2,wsgiref==0.1.2\npy27 runtests: PYTHONHASHSEED='4078653554'\npy27 runtests: commands[0] | py.test -q -s --basetemp=/openstack/pyhdr/hdrhistogram/.tox/py27/tmp -k test_cod_perf --runperf\n0:00:00.095722\n         36303 function calls in 0.107 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.107    0.107 &lt;string&gt;:1(&lt;module&gt;)\n     2000    0.004    0.000    0.004    0.000 __init__.py:505(string_at)\n     1000    0.001    0.000    0.007    0.000 base64.py:42(b64encode)\n        1    0.000    0.000    0.000    0.000 codec.py:109(__init__)\n        1    0.000    0.000    0.000    0.000 codec.py:144(_init_counts)\n        1    0.000    0.000    0.000    0.000 codec.py:162(get_counts)\n     1000    0.008    0.000    0.074    0.000 codec.py:204(compress)\n        1    0.000    0.000    0.000    0.000 codec.py:246(__init__)\n        1    0.000    0.000    0.000    0.000 codec.py:275(get_counts)\n     1000    0.005    0.000    0.094    0.000 codec.py:284(encode)\n        1    0.000    0.000    0.000    0.000 codec.py:59(get_encoding_cookie)\n        1    0.000    0.000    0.000    0.000 codec.py:63(get_compression_cookie)\n     2190    0.002    0.000    0.003    0.000 histogram.py:139(_clz)\n     2190    0.003    0.000    0.006    0.000 histogram.py:150(_get_bucket_index)\n     2190    0.001    0.000    0.001    0.000 histogram.py:156(_get_sub_bucket_index)\n     1190    0.001    0.000    0.001    0.000 histogram.py:159(_counts_index)\n     1190    0.001    0.000    0.006    0.000 histogram.py:169(_counts_index_for)\n     1190    0.003    0.000    0.009    0.000 histogram.py:174(record_value)\n     1190    0.000    0.000    0.000    0.000 histogram.py:228(get_value_from_sub_bucket)\n     1190    0.001    0.000    0.001    0.000 histogram.py:231(get_value_from_index)\n        1    0.000    0.000    0.000    0.000 histogram.py:31(get_bucket_count)\n     1000    0.001    0.000    0.095    0.000 histogram.py:413(encode)\n     1000    0.001    0.000    0.005    0.000 histogram.py:456(get_counts_array_index)\n        1    0.000    0.000    0.000    0.000 histogram.py:62(__init__)\n        1    0.001    0.001    0.012    0.012 test_hdrhistogram.py:374(fill_hist_counts)\n        1    0.001    0.001    0.107    0.107 test_hdrhistogram.py:489(check_cod_perf)\n     5000    0.001    0.000    0.001    0.000 {_ctypes.addressof}\n     1000    0.005    0.000    0.005    0.000 {binascii.b2a_base64}\n     2190    0.001    0.000    0.001    0.000 {bin}\n        2    0.000    0.000    0.000    0.000 {built-in method now}\n     3190    0.000    0.000    0.000    0.000 {len}\n        1    0.000    0.000    0.000    0.000 {math.ceil}\n        1    0.000    0.000    0.000    0.000 {math.floor}\n        4    0.000    0.000    0.000    0.000 {math.log}\n        2    0.000    0.000    0.000    0.000 {math.pow}\n     1190    0.000    0.000    0.000    0.000 {max}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n     1000    0.001    0.000    0.001    0.000 {method 'join' of 'str' objects}\n     1190    0.000    0.000    0.000    0.000 {min}\n     1000    0.008    0.000    0.008    0.000 {pyhdrh.encode}\n     1000    0.056    0.000    0.056    0.000 {zlib.compress}\n</pre>\n<p>And for decoding:</p>\n<pre>$ tox -e py27 '-k test_dec_perf --runperf'\nGLOB sdist-make: /openstack/pyhdr/hdrhistogram/setup.py\npy27 inst-nodeps: /openstack/pyhdr/hdrhistogram/.tox/dist/hdrhistogram-0.2.3.dev1.zip\npy27 installed: flake8==2.4.1,hdrhistogram==0.2.3.dev1,mccabe==0.3.1,numpy==1.9.2,pbr==1.7.0,pep8==1.5.7,py==1.4.30,pyflakes==0.8.1,pytest==2.7.2,wsgiref==0.1.2\npy27 runtests: PYTHONHASHSEED='2608914940'\npy27 runtests: commands[0] | py.test -q -s --basetemp=/openstack/pyhdr/hdrhistogram/.tox/py27/tmp -k test_dec_perf --runperf\n0:00:00.149938\n         115325 function calls in 0.160 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.160    0.160 &lt;string&gt;:1(&lt;module&gt;)\n        2    0.000    0.000    0.000    0.000 __init__.py:505(string_at)\n        1    0.000    0.000    0.000    0.000 base64.py:42(b64encode)\n     1000    0.001    0.000    0.012    0.000 base64.py:59(b64decode)\n     1001    0.001    0.000    0.023    0.000 codec.py:109(__init__)\n     1001    0.009    0.000    0.009    0.000 codec.py:144(_init_counts)\n     1000    0.002    0.000    0.022    0.000 codec.py:147(init_counts)\n     3001    0.001    0.000    0.001    0.000 codec.py:162(get_counts)\n     1000    0.004    0.000    0.022    0.000 codec.py:165(_decompress)\n        1    0.000    0.000    0.000    0.000 codec.py:204(compress)\n     1001    0.002    0.000    0.003    0.000 codec.py:246(__init__)\n     3001    0.001    0.000    0.002    0.000 codec.py:275(get_counts)\n        1    0.000    0.000    0.000    0.000 codec.py:284(encode)\n     1000    0.005    0.000    0.041    0.000 codec.py:306(decode)\n     1000    0.002    0.000    0.010    0.000 codec.py:352(add)\n     3000    0.001    0.000    0.001    0.000 codec.py:50(get_cookie_base)\n     1000    0.001    0.000    0.001    0.000 codec.py:53(get_word_size_in_bytes_from_cookie)\n        1    0.000    0.000    0.000    0.000 codec.py:59(get_encoding_cookie)\n     1001    0.000    0.000    0.000    0.000 codec.py:63(get_compression_cookie)\n     7191    0.004    0.000    0.008    0.000 histogram.py:139(_clz)\n     7191    0.009    0.000    0.017    0.000 histogram.py:150(_get_bucket_index)\n     7191    0.003    0.000    0.003    0.000 histogram.py:156(_get_sub_bucket_index)\n     1190    0.000    0.000    0.000    0.000 histogram.py:159(_counts_index)\n     1190    0.001    0.000    0.005    0.000 histogram.py:169(_counts_index_for)\n     1190    0.002    0.000    0.008    0.000 histogram.py:174(record_value)\n    10190    0.003    0.000    0.003    0.000 histogram.py:228(get_value_from_sub_bucket)\n     4190    0.004    0.000    0.005    0.000 histogram.py:231(get_value_from_index)\n     2000    0.002    0.000    0.008    0.000 histogram.py:240(get_lowest_equivalent_value)\n     4000    0.006    0.000    0.019    0.000 histogram.py:248(get_highest_equivalent_value)\n     1001    0.011    0.000    0.011    0.000 histogram.py:31(get_bucket_count)\n     1000    0.000    0.000    0.000    0.000 histogram.py:326(get_total_count)\n     2000    0.001    0.000    0.010    0.000 histogram.py:342(get_max_value)\n     2000    0.003    0.000    0.011    0.000 histogram.py:347(get_min_value)\n        1    0.000    0.000    0.000    0.000 histogram.py:413(encode)\n     1000    0.002    0.000    0.010    0.000 histogram.py:439(set_internal_tacking_values)\n        1    0.000    0.000    0.000    0.000 histogram.py:456(get_counts_array_index)\n     1000    0.006    0.000    0.044    0.000 histogram.py:495(add)\n     1000    0.001    0.000    0.149    0.000 histogram.py:526(decode_and_add)\n     1000    0.003    0.000    0.104    0.000 histogram.py:545(decode)\n     1001    0.012    0.000    0.060    0.000 histogram.py:62(__init__)\n        1    0.001    0.001    0.010    0.010 test_hdrhistogram.py:374(fill_hist_counts)\n        1    0.001    0.001    0.160    0.160 test_hdrhistogram.py:502(check_dec_perf)\n     3005    0.000    0.000    0.000    0.000 {_ctypes.addressof}\n     1000    0.011    0.000    0.011    0.000 {binascii.a2b_base64}\n        1    0.000    0.000    0.000    0.000 {binascii.b2a_base64}\n     7191    0.003    0.000    0.003    0.000 {bin}\n        2    0.000    0.000    0.000    0.000 {built-in method now}\n     9192    0.001    0.000    0.001    0.000 {len}\n     1001    0.000    0.000    0.000    0.000 {math.ceil}\n     1001    0.000    0.000    0.000    0.000 {math.floor}\n     4004    0.001    0.000    0.001    0.000 {math.log}\n     2002    0.001    0.000    0.001    0.000 {math.pow}\n     3190    0.001    0.000    0.001    0.000 {max}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n     2000    0.003    0.000    0.003    0.000 {method 'from_buffer_copy' of '_ctypes.PyCStructType' objects}\n        1    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}\n     3190    0.001    0.000    0.001    0.000 {min}\n     1000    0.007    0.000    0.007    0.000 {pyhdrh.add_array}\n     1000    0.011    0.000    0.011    0.000 {pyhdrh.decode}\n        1    0.000    0.000    0.000    0.000 {pyhdrh.encode}\n        1    0.000    0.000    0.000    0.000 {zlib.compress}\n     1000    0.015    0.000    0.015    0.000 {zlib.decompress}\n\n.\n==================================== 30 tests deselected by '-ktest_dec_perf' ====================================\n1 passed, 30 deselected in 0.35 seconds\n____________________________________________________ summary _____________________________________________________\n  py27: commands succeeded\n  congratulations :)\n</pre>\n<p>Finally, example of profiling when recording a large number of values (record_value\nshows 0.313 seconds for 172032 calls):</p>\n<pre>ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n     1    0.000    0.000    1.936    1.936 &lt;string&gt;:1(&lt;module&gt;)\n172044    0.090    0.000    0.189    0.000 histogram.py:137(_clz)\n172044    0.191    0.000    0.379    0.000 histogram.py:148(_get_bucket_index)\n172044    0.066    0.000    0.066    0.000 histogram.py:154(_get_sub_bucket_index)\n172032    0.066    0.000    0.066    0.000 histogram.py:157(_counts_index)\n172032    0.182    0.000    0.693    0.000 histogram.py:167(_counts_index_for)\n172032    0.313    0.000    1.078    0.000 histogram.py:172(record_value)\n344064    0.158    0.000    0.158    0.000 histogram.py:206(get_count_at_index)\n172050    0.038    0.000    0.038    0.000 histogram.py:226(get_value_from_sub_bucket)\n172044    0.139    0.000    0.177    0.000 histogram.py:229(get_value_from_index)\n    12    0.103    0.009    0.103    0.009 histogram.py:552(add_counts)\n     6    0.122    0.020    1.376    0.229 test_hdrhistogram.py:605(fill_hist_counts)\n    12    0.193    0.016    0.351    0.029 test_hdrhistogram.py:612(check_hist_counts)\n</pre>\n</div>\n<div id=\"limitations-caveats-and-known-issues\">\n<h2>Limitations, Caveats and Known Issues</h2>\n<p>The latest features and bug fixes of the original HDR histogram library may not be available in this python port.\nExamples of notable features/APIs not implemented:</p>\n<ul>\n<li>concurrency support (AtomicHistogram, ConcurrentHistogram\u2026)</li>\n<li>DoubleHistogram</li>\n<li>histogram auto-resize</li>\n<li>recorder function</li>\n</ul>\n<p>This implementation has byte endianess encoding issues when used with PyPy\ndue to a limitation of the PyPy code\n(see <a href=\"https://github.com/HdrHistogram/HdrHistogram_py/issues/13\" rel=\"nofollow\">https://github.com/HdrHistogram/HdrHistogram_py/issues/13</a>).</p>\n<p>The current implementation has issues running on Windows 32-bit systems (library crashing during decode).</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>The only dependency (outside of using pytest and tox for the unit testing) is the\nsmall pbr python package which takes care of the versioning (among other things).</p>\n</div>\n<div id=\"licensing\">\n<h2>Licensing</h2>\n<p>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n<blockquote>\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></blockquote>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u201cAS IS\u201d BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>External contribution, forks and GitHub pull requests are welcome.</p>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>The python code was directly ported from the original HDR Histogram Java and C libraries:</p>\n<ul>\n<li><a href=\"https://github.com/HdrHistogram/HdrHistogram.git\" rel=\"nofollow\">https://github.com/HdrHistogram/HdrHistogram.git</a></li>\n<li><a href=\"https://github.com/HdrHistogram/HdrHistogram_c.git\" rel=\"nofollow\">https://github.com/HdrHistogram/HdrHistogram_c.git</a></li>\n</ul>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li>Source: <a href=\"https://github.com/HdrHistogram/HdrHistogram_py.git\" rel=\"nofollow\">https://github.com/HdrHistogram/HdrHistogram_py.git</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6071508, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "e1cd353e773cb772f2237a6a349ff5db", "sha256": "7a2db1c29104929b2346d2f9089386fc3a20c495d17ad08c7a826dc60e4f8858"}, "downloads": -1, "filename": "hdrhistogram-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e1cd353e773cb772f2237a6a349ff5db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6518, "upload_time": "2015-07-15T08:37:48", "upload_time_iso_8601": "2015-07-15T08:37:48.542804Z", "url": "https://files.pythonhosted.org/packages/3d/51/52901101f2e1c40415cf5c061523e1e0526e2863c975309cb28137722a4a/hdrhistogram-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4b60f92f1bbd4a228315a1e29c432715", "sha256": "69b64ddeba5ea6e52d72d9ed9af6a4a974163720d855280ccef1241a8419bfdd"}, "downloads": -1, "filename": "hdrhistogram-0.0.3.tar.gz", "has_sig": false, "md5_digest": "4b60f92f1bbd4a228315a1e29c432715", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8708, "upload_time": "2015-07-15T18:49:39", "upload_time_iso_8601": "2015-07-15T18:49:39.965360Z", "url": "https://files.pythonhosted.org/packages/b7/3f/612999624469fca35bda59d7bcab55b209fa25e172f7f3e72e15abe7fe10/hdrhistogram-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "af0268c3d1df5646b79f3a8cd0bc76f8", "sha256": "8ae628d64061a4b725b4c69795ce25db81d57e41ca607ca1a3c03c1357b11e0b"}, "downloads": -1, "filename": "hdrhistogram-0.0.4.tar.gz", "has_sig": false, "md5_digest": "af0268c3d1df5646b79f3a8cd0bc76f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9496, "upload_time": "2015-07-17T07:21:28", "upload_time_iso_8601": "2015-07-17T07:21:28.795542Z", "url": "https://files.pythonhosted.org/packages/17/55/a47940db14e85e6a19ed81da4eb72566271b336ec9edcc3a0a7c64cccc40/hdrhistogram-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "07338fa256e5dd4ac81af4358f469031", "sha256": "682fee7ff3736a3202a047d0ccd547c7999bc6d53bdb692d2f45d194317870ea"}, "downloads": -1, "filename": "hdrhistogram-0.0.5.tar.gz", "has_sig": false, "md5_digest": "07338fa256e5dd4ac81af4358f469031", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18054, "upload_time": "2015-08-04T15:28:01", "upload_time_iso_8601": "2015-08-04T15:28:01.772137Z", "url": "https://files.pythonhosted.org/packages/83/cf/e1d4b3d65de44764e38ca181bdbfb6058d406cc61974cd4f7b0c5daca482/hdrhistogram-0.0.5.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "87935b21602c5ec7b8c65c6f29ab7525", "sha256": "520cd86e7433c1bcabbb0a34b3df0e49d8514747948adabfb907b954f192b633"}, "downloads": -1, "filename": "hdrhistogram-0.1.1.tar.gz", "has_sig": false, "md5_digest": "87935b21602c5ec7b8c65c6f29ab7525", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25942, "upload_time": "2015-08-11T14:54:14", "upload_time_iso_8601": "2015-08-11T14:54:14.363711Z", "url": "https://files.pythonhosted.org/packages/90/56/aa79da3891062020e6a2a224d20adc778d31cd883cd42ea154acfcb8b935/hdrhistogram-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "bc9fc5320818b3856445f4f9bcc1bd84", "sha256": "26a0a99d01b7dd39be8a3c50124986e8901c01245d81b55a18b488458a8181b4"}, "downloads": -1, "filename": "hdrhistogram-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bc9fc5320818b3856445f4f9bcc1bd84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39373, "upload_time": "2015-08-13T00:01:58", "upload_time_iso_8601": "2015-08-13T00:01:58.729654Z", "url": "https://files.pythonhosted.org/packages/26/d1/ecf78062a5960c7fb731a13a2f09732ffbfeb4776d852a09e98a08f776f8/hdrhistogram-0.1.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b289c6b617f1b7a5800f17eb69a1c757", "sha256": "c7721d33a2f6ca2132ee3ad40371e1518e882f9956d7ddacf6f6d011e6277540"}, "downloads": -1, "filename": "hdrhistogram-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b289c6b617f1b7a5800f17eb69a1c757", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49603, "upload_time": "2015-08-19T23:12:15", "upload_time_iso_8601": "2015-08-19T23:12:15.490277Z", "url": "https://files.pythonhosted.org/packages/37/a0/e0f86d41fae0bc8bef4a9c6d04fde7ce6b1fa781cf45f3f37809da2b0d30/hdrhistogram-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "fe9dad08acd906411b6fb98715b4f5f4", "sha256": "63fa0983386804b054d796914245b354d575ebb7f0ebd5789e9e663162f0264e"}, "downloads": -1, "filename": "hdrhistogram-0.2.2.tar.gz", "has_sig": false, "md5_digest": "fe9dad08acd906411b6fb98715b4f5f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46107, "upload_time": "2015-08-26T01:23:47", "upload_time_iso_8601": "2015-08-26T01:23:47.585789Z", "url": "https://files.pythonhosted.org/packages/b5/7d/8841e6d9155f822c0d208a176419ed1071599ab6214d1f16fcf576238d71/hdrhistogram-0.2.2.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "07e2321d92d4baa078cbf8cc36c045e5", "sha256": "29e30ea3d7b0e03db1412dad90aa02dd96d081a751f666bc58b1c625737c6828"}, "downloads": -1, "filename": "hdrhistogram-0.3.1.tar.gz", "has_sig": false, "md5_digest": "07e2321d92d4baa078cbf8cc36c045e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47056, "upload_time": "2015-09-22T22:39:56", "upload_time_iso_8601": "2015-09-22T22:39:56.856014Z", "url": "https://files.pythonhosted.org/packages/66/78/9b3176a8d3dfadff62eae656a4479542b54d4159a4357c43b1fd98be5123/hdrhistogram-0.3.1.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "4c2790be6b24a5fc1f719f981022cb71", "sha256": "a0988d3f2388d63735f229f219df3efb49f36f37c2aeaa08c365df53fc6a022c"}, "downloads": -1, "filename": "hdrhistogram-0.4.1.tar.gz", "has_sig": false, "md5_digest": "4c2790be6b24a5fc1f719f981022cb71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47918, "upload_time": "2016-02-01T19:48:39", "upload_time_iso_8601": "2016-02-01T19:48:39.664964Z", "url": "https://files.pythonhosted.org/packages/90/4a/8aa327c44b928fe3666a96659af2c9985024595afded290f5a02e708e045/hdrhistogram-0.4.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "38acf6fc1c5c447e0af815c39b30f618", "sha256": "dc0fce7c5a5e17ffeaf5d1f456d7e44a46e85f3f63cfcc58c705e99731b6e7bc"}, "downloads": -1, "filename": "hdrhistogram-0.5.2.tar.gz", "has_sig": false, "md5_digest": "38acf6fc1c5c447e0af815c39b30f618", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48453, "upload_time": "2016-10-31T22:31:57", "upload_time_iso_8601": "2016-10-31T22:31:57.988584Z", "url": "https://files.pythonhosted.org/packages/c4/72/7836361b9cd222cb7423a0ccb57e7e40e266a46f4cd89661fec53f408826/hdrhistogram-0.5.2.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "d1df85ab7aa54ae5b820edbee34dfa78", "sha256": "63700d6f90a28d22ceaa32123861f77d76a4eb2dcdd5c6190cdf07a9feab8ad3"}, "downloads": -1, "filename": "hdrhistogram-0.6.1.tar.gz", "has_sig": false, "md5_digest": "d1df85ab7aa54ae5b820edbee34dfa78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61857, "upload_time": "2017-12-28T07:27:55", "upload_time_iso_8601": "2017-12-28T07:27:55.764057Z", "url": "https://files.pythonhosted.org/packages/ac/30/2422ad2ad9a5ccfd2e3a8d7a9b98b4fa634945da0047d3b9f73061e8696f/hdrhistogram-0.6.1.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "29f59ff45dbdd1c6431702efe3981d5f", "sha256": "c8704c851ae40246a57bb8b803a0b43a05f3d2c97783a3bacd634bb3f0e64ad4"}, "downloads": -1, "filename": "hdrhistogram-0.7.1.tar.gz", "has_sig": false, "md5_digest": "29f59ff45dbdd1c6431702efe3981d5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62133, "upload_time": "2019-11-03T16:46:06", "upload_time_iso_8601": "2019-11-03T16:46:06.891289Z", "url": "https://files.pythonhosted.org/packages/b4/1b/01b8feb5bc0b46b0def699a61dd77a79ef948c6c23c411746bd3e7ed7973/hdrhistogram-0.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "29f59ff45dbdd1c6431702efe3981d5f", "sha256": "c8704c851ae40246a57bb8b803a0b43a05f3d2c97783a3bacd634bb3f0e64ad4"}, "downloads": -1, "filename": "hdrhistogram-0.7.1.tar.gz", "has_sig": false, "md5_digest": "29f59ff45dbdd1c6431702efe3981d5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62133, "upload_time": "2019-11-03T16:46:06", "upload_time_iso_8601": "2019-11-03T16:46:06.891289Z", "url": "https://files.pythonhosted.org/packages/b4/1b/01b8feb5bc0b46b0def699a61dd77a79ef948c6c23c411746bd3e7ed7973/hdrhistogram-0.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:02 2020"}