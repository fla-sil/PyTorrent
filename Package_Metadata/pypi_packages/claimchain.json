{"info": {"author": "Bogdan Kulynych (EPFL SPRING Lab), Marios Isaakidis, George Danezis (UCL)", "author_email": "bogdan.kulynych@epfl.ch, m.isaakidis@cs.ucl.ac.uk, g.danezis@ucl.ac.uk", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Topic :: Security :: Cryptography"], "description": ".. image:: https://claimchain.github.io/claimchain.svg\n   :width: 50px\n   :alt: ClaimChain\n\n###############\nclaimchain-core\n###############\n\n.. image:: https://travis-ci.org/claimchain/claimchain-core.svg?branch=master\n   :target: https://travis-ci.org/claimchain/claimchain-core\n   :alt: Build Status\n\n.. image:: https://readthedocs.org/projects/claimchain-core/badge/?version=latest\n   :target: http://claimchain-core.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://zenodo.org/badge/92275408.svg\n   :target: https://zenodo.org/badge/latestdoi/92275408\n   :alt: Zenodo Citation\n\nInstalling\n==========\n\nYou can install ``claimchain`` via pip::\n\n    pip install claimchain\n\nTo run tests, checkout the git repository and run tox::\n\n\n    git clone https://github.com/claimchain/claimchain-core\n    cd claimchain-core\n    tox\n\nUsage warning\n=============\n\nThis code is made for research purposes. It is not to be used in real-world systems.\nNot all security features are implemented, and some of the cryptographic instantiations\nneed to be changed to more secure alternatives.\n\nUsage\n=====\n\nHigh-level interface for ClaimChain consists of two classes, ``State`` for building claimchains, and ``View`` for parsing and interpreting claimchains.\n\nBuilding chains\n---------------\n\nThe core abstraction for the a ClaimChain user is a `state`. The `state` contains information about the user, and claims they make about other users or objects. Currently, this package only supports private claims, which means the owner of a chain needs to explicitly make every claim readable by intended readers. Once the `state` is constructed it can be committed to the chain.\n\nHere is how user `Alice` would prepare her `state`::\n\n    from claimchain import State\n\n    state = State()\n\n    # Alice adds information about herself\n    state.identity_info = \"Hi, I'm Alice\"\n\n    # Alice adds private claims\n    state['bob'] = 'Bob is a good lad'\n\nMaking claims accessible requires knowing the DH public key of each authorized reader. The way to obtain the DH keys of other users is described later. Assuming Alice has Carol's DH public key, ``carol_dh_pk``, she can allow Carol to access her claim about Bob::\n\n    state.grant_access(carol_dh_pk, ['bob'])\n\nNote that the second argument must be an iterable of claim labels, not a single label.\n\nTo commit the state, first, a chain needs to be built, and second, the cryptographic keys have to be generated::\n\n    from hippiehug import Chain\n    from claimchain import LocalParams, State\n\n    state = State()\n\n    # Generate cryptographic keys\n    params = LocalParams.generate()\n\n    store = {}\n    chain = Chain(store)\n\n    with params.as_default():\n        head = state.commit(chain)\n\nThe chain can then be published or transmitted to other users by publishing the ``store`` and communicating the chain's ``head``. Other users will be able to interpret the chain using the ``View`` interface, described below.\n\n\nInterpreting chains\n-------------------\n\nHaving access to the store (dictionary) containing other user's chain, and a head of this user's chain, one can use the ``View`` interface.\n\nHere is how Carol can interpret Alice's claimchain, assuming Alice's store is ``alice_store``, the head of her chain is ``alice_head``, and ``params`` is Carol's ``LocalParams`` object::\n\n    from hippiehug import Chain\n    from claimchain import View\n\n    alice_chain = Chain(alice_store, root_hash=alice_head)\n\n    with params.as_default():\n        alice_view = View(alice_chain)\n\n        # Try to get claim with label 'bob'\n        claim = alice_view['bob']\n\n        assert claim == b'Bob is a good lad'\n\nFinally, this is how Carol can retrieve Alice's DH public key::\n\n    alice_dh_pk = alice_view.params.dh.pk\n\nThis DH public key can be later used to grant Alice rights to read claims on Carol's chain.\n\n\nThis package\n============\n\n=======================   =======================================================\nclaimchain/state.py       High-level ClaimChain interface\nclaimchain/core.py        Core operations of encoding claims and capabilities\nclaimchain/crypto         Cryptographic utilities, and algorithm implementations\n=======================   =======================================================\n\n\nSimulations\n===========\n\nA core and experimental implementation of ClaimChain, a cryptographic data\nstructure. See the `web page <https://claimchain.github.io>`_ to learn about\nClaimChain.\n\nCheck out the `documentation <https://claimchain-core.readthedocs.io/en/latest>`_.\n\nAcknowledgements\n================\n\nThis work is funded by the `NEXTLEAP project <https://nextleap.eu>`_ within the European\nUnion\u2019s Horizon 2020 Framework Programme for Research and Innovation\n(H2020-ICT-2015, ICT-10-2015) under grant agreement 688722.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "claimchain", "package_url": "https://pypi.org/project/claimchain/", "platform": "", "project_url": "https://pypi.org/project/claimchain/", "project_urls": null, "release_url": "https://pypi.org/project/claimchain/0.3.1/", "requires_dist": ["six", "petlib", "pyyaml", "attrs", "base58", "statistics", "defaultcontext", "hippiehug (>=0.1.3)", "profiled"], "requires_python": "", "summary": "Implementation of ClaimChain, a cryptographic data structure", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"ClaimChain\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1aa4a9d6567fe319d83c7de8a7878ab2ac6727ed/68747470733a2f2f636c61696d636861696e2e6769746875622e696f2f636c61696d636861696e2e737667\" width=\"50px\">\n<div id=\"claimchain-core\">\n<h2>claimchain-core</h2>\n<a href=\"https://travis-ci.org/claimchain/claimchain-core\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84217be3aadfeeb253734f383634d08902717419/68747470733a2f2f7472617669732d63692e6f72672f636c61696d636861696e2f636c61696d636861696e2d636f72652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://claimchain-core.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5227136353a4161c8795b576971b7ac8da121169/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f636c61696d636861696e2d636f72652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://zenodo.org/badge/latestdoi/92275408\" rel=\"nofollow\"><img alt=\"Zenodo Citation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84081763ef061777fd2342bfdc068ca5f5386172/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f39323237353430382e737667\"></a>\n<div id=\"installing\">\n<h3>Installing</h3>\n<p>You can install <tt>claimchain</tt> via pip:</p>\n<pre>pip install claimchain\n</pre>\n<p>To run tests, checkout the git repository and run tox:</p>\n<pre>git clone https://github.com/claimchain/claimchain-core\ncd claimchain-core\ntox\n</pre>\n</div>\n<div id=\"usage-warning\">\n<h3>Usage warning</h3>\n<p>This code is made for research purposes. It is not to be used in real-world systems.\nNot all security features are implemented, and some of the cryptographic instantiations\nneed to be changed to more secure alternatives.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>High-level interface for ClaimChain consists of two classes, <tt>State</tt> for building claimchains, and <tt>View</tt> for parsing and interpreting claimchains.</p>\n<div id=\"building-chains\">\n<h4>Building chains</h4>\n<p>The core abstraction for the a ClaimChain user is a <cite>state</cite>. The <cite>state</cite> contains information about the user, and claims they make about other users or objects. Currently, this package only supports private claims, which means the owner of a chain needs to explicitly make every claim readable by intended readers. Once the <cite>state</cite> is constructed it can be committed to the chain.</p>\n<p>Here is how user <cite>Alice</cite> would prepare her <cite>state</cite>:</p>\n<pre>from claimchain import State\n\nstate = State()\n\n# Alice adds information about herself\nstate.identity_info = \"Hi, I'm Alice\"\n\n# Alice adds private claims\nstate['bob'] = 'Bob is a good lad'\n</pre>\n<p>Making claims accessible requires knowing the DH public key of each authorized reader. The way to obtain the DH keys of other users is described later. Assuming Alice has Carol\u2019s DH public key, <tt>carol_dh_pk</tt>, she can allow Carol to access her claim about Bob:</p>\n<pre>state.grant_access(carol_dh_pk, ['bob'])\n</pre>\n<p>Note that the second argument must be an iterable of claim labels, not a single label.</p>\n<p>To commit the state, first, a chain needs to be built, and second, the cryptographic keys have to be generated:</p>\n<pre>from hippiehug import Chain\nfrom claimchain import LocalParams, State\n\nstate = State()\n\n# Generate cryptographic keys\nparams = LocalParams.generate()\n\nstore = {}\nchain = Chain(store)\n\nwith params.as_default():\n    head = state.commit(chain)\n</pre>\n<p>The chain can then be published or transmitted to other users by publishing the <tt>store</tt> and communicating the chain\u2019s <tt>head</tt>. Other users will be able to interpret the chain using the <tt>View</tt> interface, described below.</p>\n</div>\n<div id=\"interpreting-chains\">\n<h4>Interpreting chains</h4>\n<p>Having access to the store (dictionary) containing other user\u2019s chain, and a head of this user\u2019s chain, one can use the <tt>View</tt> interface.</p>\n<p>Here is how Carol can interpret Alice\u2019s claimchain, assuming Alice\u2019s store is <tt>alice_store</tt>, the head of her chain is <tt>alice_head</tt>, and <tt>params</tt> is Carol\u2019s <tt>LocalParams</tt> object:</p>\n<pre>from hippiehug import Chain\nfrom claimchain import View\n\nalice_chain = Chain(alice_store, root_hash=alice_head)\n\nwith params.as_default():\n    alice_view = View(alice_chain)\n\n    # Try to get claim with label 'bob'\n    claim = alice_view['bob']\n\n    assert claim == b'Bob is a good lad'\n</pre>\n<p>Finally, this is how Carol can retrieve Alice\u2019s DH public key:</p>\n<pre>alice_dh_pk = alice_view.params.dh.pk\n</pre>\n<p>This DH public key can be later used to grant Alice rights to read claims on Carol\u2019s chain.</p>\n</div>\n</div>\n<div id=\"this-package\">\n<h3>This package</h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>claimchain/state.py</td>\n<td>High-level ClaimChain interface</td>\n</tr>\n<tr><td>claimchain/core.py</td>\n<td>Core operations of encoding claims and capabilities</td>\n</tr>\n<tr><td>claimchain/crypto</td>\n<td>Cryptographic utilities, and algorithm implementations</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"simulations\">\n<h3>Simulations</h3>\n<p>A core and experimental implementation of ClaimChain, a cryptographic data\nstructure. See the <a href=\"https://claimchain.github.io\" rel=\"nofollow\">web page</a> to learn about\nClaimChain.</p>\n<p>Check out the <a href=\"https://claimchain-core.readthedocs.io/en/latest\" rel=\"nofollow\">documentation</a>.</p>\n</div>\n<div id=\"acknowledgements\">\n<h3>Acknowledgements</h3>\n<p>This work is funded by the <a href=\"https://nextleap.eu\" rel=\"nofollow\">NEXTLEAP project</a> within the European\nUnion\u2019s Horizon 2020 Framework Programme for Research and Innovation\n(H2020-ICT-2015, ICT-10-2015) under grant agreement 688722.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3891470, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "96647ead9795a32bc12e6db388ced092", "sha256": "35b906495c3a0e1c5c887db6b6b13714a17e5e97dad49c7ed0a50211f260431c"}, "downloads": -1, "filename": "claimchain-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "96647ead9795a32bc12e6db388ced092", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 17254, "upload_time": "2018-05-23T10:36:26", "upload_time_iso_8601": "2018-05-23T10:36:26.203229Z", "url": "https://files.pythonhosted.org/packages/34/d3/918ad15615dd69227d238104d2c386985f17b19ac71d21ceb3ff65e14d61/claimchain-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1de4dce6c9d2298131c5e2964430f282", "sha256": "31289a913412b3dce5398ed57e462c65f02f62be14c0aa3e6827a23c28a43ee8"}, "downloads": -1, "filename": "claimchain-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1de4dce6c9d2298131c5e2964430f282", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23488, "upload_time": "2018-05-23T10:36:24", "upload_time_iso_8601": "2018-05-23T10:36:24.628743Z", "url": "https://files.pythonhosted.org/packages/4f/46/fbed5386d94e11b4f473eeccab331b0d57114d6f57f535d4645775d91834/claimchain-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "bc0ff3da07857b61ba7fb917b8573dba", "sha256": "b9f90ba076d66fe67d620508365652e8b88c4cb08ca33c3d0518b532c92bec23"}, "downloads": -1, "filename": "claimchain-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bc0ff3da07857b61ba7fb917b8573dba", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 17241, "upload_time": "2018-05-23T13:43:09", "upload_time_iso_8601": "2018-05-23T13:43:09.198531Z", "url": "https://files.pythonhosted.org/packages/62/4f/2315638eeeba564c3d5f11a5c372af21efb9b2f5a519bfda9aebd8b292ed/claimchain-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85ad05144b0bde520f2b87b0e7961a52", "sha256": "344c606bd3675234f79d0d12c5a639b927eb4b3d53edb16d6d7c3dc241f984ed"}, "downloads": -1, "filename": "claimchain-0.3.1.tar.gz", "has_sig": false, "md5_digest": "85ad05144b0bde520f2b87b0e7961a52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23539, "upload_time": "2018-05-23T13:43:03", "upload_time_iso_8601": "2018-05-23T13:43:03.777701Z", "url": "https://files.pythonhosted.org/packages/fa/0e/743f74b7b87b8b4509f063c5f4d73d4db04c8390d7c53a31eb1a9e6c6f28/claimchain-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc0ff3da07857b61ba7fb917b8573dba", "sha256": "b9f90ba076d66fe67d620508365652e8b88c4cb08ca33c3d0518b532c92bec23"}, "downloads": -1, "filename": "claimchain-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bc0ff3da07857b61ba7fb917b8573dba", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 17241, "upload_time": "2018-05-23T13:43:09", "upload_time_iso_8601": "2018-05-23T13:43:09.198531Z", "url": "https://files.pythonhosted.org/packages/62/4f/2315638eeeba564c3d5f11a5c372af21efb9b2f5a519bfda9aebd8b292ed/claimchain-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85ad05144b0bde520f2b87b0e7961a52", "sha256": "344c606bd3675234f79d0d12c5a639b927eb4b3d53edb16d6d7c3dc241f984ed"}, "downloads": -1, "filename": "claimchain-0.3.1.tar.gz", "has_sig": false, "md5_digest": "85ad05144b0bde520f2b87b0e7961a52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23539, "upload_time": "2018-05-23T13:43:03", "upload_time_iso_8601": "2018-05-23T13:43:03.777701Z", "url": "https://files.pythonhosted.org/packages/fa/0e/743f74b7b87b8b4509f063c5f4d73d4db04c8390d7c53a31eb1a9e6c6f28/claimchain-0.3.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:11 2020"}