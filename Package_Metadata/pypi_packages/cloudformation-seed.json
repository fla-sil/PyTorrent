{"info": {"author": "Alex Bukharov", "author_email": "alex.bukharov@innablr.com.au", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "Cloudformation Seed\n======\n[![Build Status](https://travis-ci.org/Innablr/cloudformation-seed.svg?branch=master)](https://travis-ci.org/Innablr/cloudformation-seed)\n\nPreface\n------\n\nThis is a script that will help you deploy your Cloudformation project without hassle:\n\n* Handle Cloudformation deployments of any scale\n* Allow to do multiple deployments of the same code with a different installation name\n* Automate Lambda code handling\n* Get rid of hard dependencies of Cloudformation Exports, instead pass around Output values between stacks\n* Package the whole deployment in a Docker image and version it\n\nIt will:\n\n* Automatically create an S3 bucket according to the project name\n* Upload the Cloudformation templates into the bucket\n* Package and checksum your Lambda code and upload it into the bucket\n* Upload arbitrary artifacts into the bucket so that they are available to your deployment\n* Create and manage Cloudformation stacks\n* Create, roll out and manage Stacksets\n\nRequirements\n------\n\nYou need a Mac or a Linux machine/VM to run the Seed. Windows is not supported, but it may work on Windows too if you really want it to.\n\nYou need to have Docker on the workstation.\n\nEvery Cloudformation template you use has to have 4 mandatory parameters that will be supplied by the Seed:\n\n1. `TemplatesS3Bucket` - the Seed will automatically create an S3 bucket and every template will have its name passed down in this parameter, so it can be made available to Lambda functions, autoscaling groups, e.t.c.\n2. `InstallationName` - installation name is what makes you able to deploy your project multiple times without name clashes. Every template will have it in this parameter and you have to use it in the names of your resources to make them unique across multiple installations\n3. `RuntimeEnvironment` - name of the runtime environment (read *Deployment configuration*)\n4. `Route53ZoneDomain` - DNS domain associated with your deployment. The Seed doesn't require it to exist, you can use it as part of your resource naming convention\n\nHere's a snippet you can copy and paste:\n\n```\nParameters:\n  TemplatesS3Bucket:\n    Type: String\n    Description: S3 Bucket with the components templates\n  InstallationName:\n    Type: String\n    Description: Unique DNS stack installation name\n  RuntimeEnvironment:\n    Type: String\n    Description: The runtime environment config tag\n    Default: dev\n  Route53ZoneDomain:\n    Type: String\n    Description: Route53 zone domain that represents the environment\n```\n\nQuick start\n------\n\n### First things first:\n\n1. Create a new directory for your project\n2. Copy everything from the `examples` directory to the root of the project\n3. Edit `parameters/dev.yaml` to your needs\n4. Add more templates with `.cf.yaml` extensions under the `cloudformation` directory and include them in `parameters/dev.yaml`\n\n### Finally:\n\nAuthenticate to AWS using your method of choice, make sure that you have set the AWS Region you need for deployment. Run `cloudformation-seed -c my-project -i x0 -e dev -d my.domain.cld deploy`\n\n### Optionally:\n\nTake the dockerfiles and makefiles from the `examples` directory and massage them around to suit your needs.\n\nDeep dive\n------\n\n### Seed bucket\n\nThe Seed will automatically create an S3 bucket for operating the deployment. The name of the bucket is derived from the installation name and project name from `Makefile.particulars`. The name of the bucket will be passed down to every Cloudformation template in your deployment as `TemplatesS3Bucket`\n\n### Deployment configuration\n\nThe `RUNTIME_ENVIRONMENT=dev` clause in the deployment directive points to the configuration file `dev.yaml` located under the `parameters` directory.\n\nYou can have multiple runtime environments for the same project with different configuration, for example if you have *dev*, *test* and *prod* environments that reuse the same Cloudformation but need different configuration, for example VPC and subnet IDs.\n\nA runtime environment is a YAML file that:\n* defines the sequence in which the Cloudformation stacks will be deployed\n* sets parameters for the Cloudformation stacks\n\nThe runtime environment contains two sections:\n\n#### `common-parameters`\n\nIn this section you can specify Cloudformation parameters that will be picked up by every stack in the deployment as a default value (i.e. if a stack has the same parameter on it it will take precedence)\n\nExample:\n\n```\ncommon-parameters:\n  VpcId: vpc-00000000\n```\n\nYou can use `!StackOutput` (read below) in `common-parameters` and it will work as expected.\n\nInstead of `common-parameters` you can also use YAML anchors like this:\n\n```\nSAMLUsername: &SAML_USERNAME okta_sso\n\nstacks:\n  - name: centralservices-iam-set\n    type: stackset\n    template: sets/iam.cf.yaml\n    parameters:\n      SSMLogsLambdaS3Key: !LambdaZip ssmLogsConfig.zip\n      SAMLUsername: *SAML_USERNAME\n```\n\nYou can also tag your stacks/stacksets by defining your tags as a dictionary and referencing them using the YAML anchors within your stacks like this:\n\n```\ntags_a: &TAGSA\n  testkey1: testvalue1\n  testkey2: testvalue2\n\ntags_b: &TAGSB\n  testkey3: testvalue3\n\n  stacks:\n  - name: example-stackset-template\n    type: stackset\n    template: sets/example-stackset-template.cf.yaml\n    rollout:\n      - account: '000000000000'\n    tags: *TAGA\n\n  - name: my-project-kms-decrypt-lambda\n    template: support/kms-parameters-lambda.cf.yaml\n    parameters:\n      LambdaSourceS3Key: !LambdaZip kmsParameters.zip\n    tags: *TAGSB\n```\n\n#### `stacks`\n\nMain configuration where you describe the Cloudformation stacks you want to deploy.\n\nExample:\n\n```\nstacks:\n  - name: in-cld-managed-zone                            # name of the CF stack, INSTALLATION_NAME will be prepended\n    template: centralservices/r53-zone.cf.yaml           # CF template relative to cloudformation directory\n    parameters:                                          # Parameters to the CF stack\n      ManagedZoneDomainName: in.cld\n      ManagingAccountArns:                               # List parameters turn into comma-separated values\n        - arn:aws:iam::000000000000:root\n        - arn:aws:iam::111111111111:root\n        - arn:aws:iam::222222222222:root\n\n  - name: in-cld-provisioning                            # name of CF stack, INSTALLATION_NAME will be prepended\n    template: centralservices/r53-provisioning.cf.yaml   # CF template relative to cloudformation directory\n    parameters:\n      LambdaSourceS3Key: !LambdaZip provisionR53.zip     # points to the lambda function under src/provisionR53 (read below)\n      SharedServiceR53ZoneRoleArn: !StackOutput in-cld-managed-zone.ManagedZoneCrossAccountRole    # will take the output called ManagedZoneCrossAccountRole from the above stack called in-cld-managed-zone\n      Route53DomainName: !StackOutput in-cld-managed-zone.ManagedZoneDomainName\n      ExportOutputs: 'false'                             # put numbers and booleans in quotes\n\n  - name: centralservices-iam-set\n    type: stackset                                       # set type to stackset\n    template: sets/iam.cf.yaml\n    parameters:                                          # parameters to the StackSet\n      SSMLogsLambdaS3Key: !LambdaZip ssmLogsConfig.zip\n      SAMLUsername: *SAML_USERNAME\n      SAMLProviderName: *SAML_PROVIDER_NAME\n    pilot:                                               # when StackSet is updated only update instances in these accounts\n      accounts:\n        - '000000000000'\n    rollout:                                             # manage StackSet instances\n      - account: '000000000000'\n        override:                                        # parameter override\n          Route53ZoneDomain: prod.innablr.lan\n      - account: '111111111111'\n        regions:                                         # in this account it goes into two regions\n          - ap-southeast-2\n          - eu-west-1\n        override:\n          Route53ZoneDomain: preprod.innablr.lan\n      - account: '222222222222'\n        override:\n          Route53ZoneDomain: dev.innablr.lan\n      - account: '999999999999'\n        regions: []                                      # this is how you delete an instance\n        override:\n          Route53ZoneDomain: dontwant.innablr.lan\n\n```\n\n### Automated Lambda functions\n\nIf your deployment contains Lambda function they can be handled by the Seed automatically. In the `examples` directory you can find an example of a Lambda function called `kmsParameters`\n\n1. Create a directory under `src` for your Lambda, say `kmsParameters`\n2. Do the development\n3. Create a `Makefile` in the directory you have created and make sure that **the default target of the Makefile produces a zip-file**, say `kmsParameters.zip`\n4. In your runtime environment configuration use `!LambdaZip kmsParameters.zip` to pass the zip-file name to the CloudFormation template (see the example above)\n\nIf your Lambda function is used in a StackSet and needs to be available from other AWS accounts make sure that you give access to the Seed bucket from those accounts. Refer to the stack `bucket-policy.cf.yaml` that is included in the examples.\n\n### Arbitrary artifacts\n\nIf you want to include any configuration objects for your software or other relatively lightweight artifacts you can create a directory called `config/<runtime_environment>` under the root of your project and anything you put in this directory will be uploaded in the Seed S3 bucket under a key called `config`.\n\nLet's say you have `config/dev/myapp_cert.pem` and you deploy a runtime configuration called `dev`. The file will be uploaded in the bucket as `config/myapp_cert.pem`.\n\n### Configuration tags\n\nIn the runtime environment configuration you can use the following tags in stack parameters specification:\n\n1. `!LambdaZip kmsParameters.zip` - will pass the correct S3 key to the uploaded kmsParameters.zip, so you can use it in your Lambda resources together with `TemplatesS3Bucket`\n\n2. `!CloudformationTemplate support/bucket-policy.cf.yaml` - works very similar to `!Lambdazip` but for Cloudformation templates. Will pass down the correct S3 key to the specified CloudFormation stack\n\n3. `!StackOutput stack-name.OutputName` - will read the corresponding output from the specified stack and pass it down here. The stack needs to have been created above in the sequence.\n\n4. `!ArtifactVersion`, `!ArtifactRepo` and `!ArtifactImage` - these three tags are used together with a release manifest in release management\n\nRelease management\n------\n\n`deploy_stack.py` can read a release manifest file if you specify it in the `-m` commandline argument. Release manifest contains images, their versions and other information about the software that is being deployed by the Seed. You can then inform your Cloudformation stacks about the versions and images you are deploying using the `!ArtifactVersion`, `!ArtifactRepo` and `!ArtifactImage` tags in the runtime environment configuration.\n\nMore documentation about release management is coming soon.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Innablr/cloudformation-seed", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cloudformation-seed", "package_url": "https://pypi.org/project/cloudformation-seed/", "platform": "", "project_url": "https://pypi.org/project/cloudformation-seed/", "project_urls": {"Homepage": "https://github.com/Innablr/cloudformation-seed"}, "release_url": "https://pypi.org/project/cloudformation-seed/0.11.0/", "requires_dist": null, "requires_python": "", "summary": "Orchestrates large Cloudformation deployments", "version": "0.11.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Cloudformation Seed</h1>\n<p><a href=\"https://travis-ci.org/Innablr/cloudformation-seed\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b945c398106b4f45f0e643ef64fae37977289f4f/68747470733a2f2f7472617669732d63692e6f72672f496e6e61626c722f636c6f7564666f726d6174696f6e2d736565642e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Preface</h2>\n<p>This is a script that will help you deploy your Cloudformation project without hassle:</p>\n<ul>\n<li>Handle Cloudformation deployments of any scale</li>\n<li>Allow to do multiple deployments of the same code with a different installation name</li>\n<li>Automate Lambda code handling</li>\n<li>Get rid of hard dependencies of Cloudformation Exports, instead pass around Output values between stacks</li>\n<li>Package the whole deployment in a Docker image and version it</li>\n</ul>\n<p>It will:</p>\n<ul>\n<li>Automatically create an S3 bucket according to the project name</li>\n<li>Upload the Cloudformation templates into the bucket</li>\n<li>Package and checksum your Lambda code and upload it into the bucket</li>\n<li>Upload arbitrary artifacts into the bucket so that they are available to your deployment</li>\n<li>Create and manage Cloudformation stacks</li>\n<li>Create, roll out and manage Stacksets</li>\n</ul>\n<h2>Requirements</h2>\n<p>You need a Mac or a Linux machine/VM to run the Seed. Windows is not supported, but it may work on Windows too if you really want it to.</p>\n<p>You need to have Docker on the workstation.</p>\n<p>Every Cloudformation template you use has to have 4 mandatory parameters that will be supplied by the Seed:</p>\n<ol>\n<li><code>TemplatesS3Bucket</code> - the Seed will automatically create an S3 bucket and every template will have its name passed down in this parameter, so it can be made available to Lambda functions, autoscaling groups, e.t.c.</li>\n<li><code>InstallationName</code> - installation name is what makes you able to deploy your project multiple times without name clashes. Every template will have it in this parameter and you have to use it in the names of your resources to make them unique across multiple installations</li>\n<li><code>RuntimeEnvironment</code> - name of the runtime environment (read <em>Deployment configuration</em>)</li>\n<li><code>Route53ZoneDomain</code> - DNS domain associated with your deployment. The Seed doesn't require it to exist, you can use it as part of your resource naming convention</li>\n</ol>\n<p>Here's a snippet you can copy and paste:</p>\n<pre><code>Parameters:\n  TemplatesS3Bucket:\n    Type: String\n    Description: S3 Bucket with the components templates\n  InstallationName:\n    Type: String\n    Description: Unique DNS stack installation name\n  RuntimeEnvironment:\n    Type: String\n    Description: The runtime environment config tag\n    Default: dev\n  Route53ZoneDomain:\n    Type: String\n    Description: Route53 zone domain that represents the environment\n</code></pre>\n<h2>Quick start</h2>\n<h3>First things first:</h3>\n<ol>\n<li>Create a new directory for your project</li>\n<li>Copy everything from the <code>examples</code> directory to the root of the project</li>\n<li>Edit <code>parameters/dev.yaml</code> to your needs</li>\n<li>Add more templates with <code>.cf.yaml</code> extensions under the <code>cloudformation</code> directory and include them in <code>parameters/dev.yaml</code></li>\n</ol>\n<h3>Finally:</h3>\n<p>Authenticate to AWS using your method of choice, make sure that you have set the AWS Region you need for deployment. Run <code>cloudformation-seed -c my-project -i x0 -e dev -d my.domain.cld deploy</code></p>\n<h3>Optionally:</h3>\n<p>Take the dockerfiles and makefiles from the <code>examples</code> directory and massage them around to suit your needs.</p>\n<h2>Deep dive</h2>\n<h3>Seed bucket</h3>\n<p>The Seed will automatically create an S3 bucket for operating the deployment. The name of the bucket is derived from the installation name and project name from <code>Makefile.particulars</code>. The name of the bucket will be passed down to every Cloudformation template in your deployment as <code>TemplatesS3Bucket</code></p>\n<h3>Deployment configuration</h3>\n<p>The <code>RUNTIME_ENVIRONMENT=dev</code> clause in the deployment directive points to the configuration file <code>dev.yaml</code> located under the <code>parameters</code> directory.</p>\n<p>You can have multiple runtime environments for the same project with different configuration, for example if you have <em>dev</em>, <em>test</em> and <em>prod</em> environments that reuse the same Cloudformation but need different configuration, for example VPC and subnet IDs.</p>\n<p>A runtime environment is a YAML file that:</p>\n<ul>\n<li>defines the sequence in which the Cloudformation stacks will be deployed</li>\n<li>sets parameters for the Cloudformation stacks</li>\n</ul>\n<p>The runtime environment contains two sections:</p>\n<h4><code>common-parameters</code></h4>\n<p>In this section you can specify Cloudformation parameters that will be picked up by every stack in the deployment as a default value (i.e. if a stack has the same parameter on it it will take precedence)</p>\n<p>Example:</p>\n<pre><code>common-parameters:\n  VpcId: vpc-00000000\n</code></pre>\n<p>You can use <code>!StackOutput</code> (read below) in <code>common-parameters</code> and it will work as expected.</p>\n<p>Instead of <code>common-parameters</code> you can also use YAML anchors like this:</p>\n<pre><code>SAMLUsername: &amp;SAML_USERNAME okta_sso\n\nstacks:\n  - name: centralservices-iam-set\n    type: stackset\n    template: sets/iam.cf.yaml\n    parameters:\n      SSMLogsLambdaS3Key: !LambdaZip ssmLogsConfig.zip\n      SAMLUsername: *SAML_USERNAME\n</code></pre>\n<p>You can also tag your stacks/stacksets by defining your tags as a dictionary and referencing them using the YAML anchors within your stacks like this:</p>\n<pre><code>tags_a: &amp;TAGSA\n  testkey1: testvalue1\n  testkey2: testvalue2\n\ntags_b: &amp;TAGSB\n  testkey3: testvalue3\n\n  stacks:\n  - name: example-stackset-template\n    type: stackset\n    template: sets/example-stackset-template.cf.yaml\n    rollout:\n      - account: '000000000000'\n    tags: *TAGA\n\n  - name: my-project-kms-decrypt-lambda\n    template: support/kms-parameters-lambda.cf.yaml\n    parameters:\n      LambdaSourceS3Key: !LambdaZip kmsParameters.zip\n    tags: *TAGSB\n</code></pre>\n<h4><code>stacks</code></h4>\n<p>Main configuration where you describe the Cloudformation stacks you want to deploy.</p>\n<p>Example:</p>\n<pre><code>stacks:\n  - name: in-cld-managed-zone                            # name of the CF stack, INSTALLATION_NAME will be prepended\n    template: centralservices/r53-zone.cf.yaml           # CF template relative to cloudformation directory\n    parameters:                                          # Parameters to the CF stack\n      ManagedZoneDomainName: in.cld\n      ManagingAccountArns:                               # List parameters turn into comma-separated values\n        - arn:aws:iam::000000000000:root\n        - arn:aws:iam::111111111111:root\n        - arn:aws:iam::222222222222:root\n\n  - name: in-cld-provisioning                            # name of CF stack, INSTALLATION_NAME will be prepended\n    template: centralservices/r53-provisioning.cf.yaml   # CF template relative to cloudformation directory\n    parameters:\n      LambdaSourceS3Key: !LambdaZip provisionR53.zip     # points to the lambda function under src/provisionR53 (read below)\n      SharedServiceR53ZoneRoleArn: !StackOutput in-cld-managed-zone.ManagedZoneCrossAccountRole    # will take the output called ManagedZoneCrossAccountRole from the above stack called in-cld-managed-zone\n      Route53DomainName: !StackOutput in-cld-managed-zone.ManagedZoneDomainName\n      ExportOutputs: 'false'                             # put numbers and booleans in quotes\n\n  - name: centralservices-iam-set\n    type: stackset                                       # set type to stackset\n    template: sets/iam.cf.yaml\n    parameters:                                          # parameters to the StackSet\n      SSMLogsLambdaS3Key: !LambdaZip ssmLogsConfig.zip\n      SAMLUsername: *SAML_USERNAME\n      SAMLProviderName: *SAML_PROVIDER_NAME\n    pilot:                                               # when StackSet is updated only update instances in these accounts\n      accounts:\n        - '000000000000'\n    rollout:                                             # manage StackSet instances\n      - account: '000000000000'\n        override:                                        # parameter override\n          Route53ZoneDomain: prod.innablr.lan\n      - account: '111111111111'\n        regions:                                         # in this account it goes into two regions\n          - ap-southeast-2\n          - eu-west-1\n        override:\n          Route53ZoneDomain: preprod.innablr.lan\n      - account: '222222222222'\n        override:\n          Route53ZoneDomain: dev.innablr.lan\n      - account: '999999999999'\n        regions: []                                      # this is how you delete an instance\n        override:\n          Route53ZoneDomain: dontwant.innablr.lan\n\n</code></pre>\n<h3>Automated Lambda functions</h3>\n<p>If your deployment contains Lambda function they can be handled by the Seed automatically. In the <code>examples</code> directory you can find an example of a Lambda function called <code>kmsParameters</code></p>\n<ol>\n<li>Create a directory under <code>src</code> for your Lambda, say <code>kmsParameters</code></li>\n<li>Do the development</li>\n<li>Create a <code>Makefile</code> in the directory you have created and make sure that <strong>the default target of the Makefile produces a zip-file</strong>, say <code>kmsParameters.zip</code></li>\n<li>In your runtime environment configuration use <code>!LambdaZip kmsParameters.zip</code> to pass the zip-file name to the CloudFormation template (see the example above)</li>\n</ol>\n<p>If your Lambda function is used in a StackSet and needs to be available from other AWS accounts make sure that you give access to the Seed bucket from those accounts. Refer to the stack <code>bucket-policy.cf.yaml</code> that is included in the examples.</p>\n<h3>Arbitrary artifacts</h3>\n<p>If you want to include any configuration objects for your software or other relatively lightweight artifacts you can create a directory called <code>config/&lt;runtime_environment&gt;</code> under the root of your project and anything you put in this directory will be uploaded in the Seed S3 bucket under a key called <code>config</code>.</p>\n<p>Let's say you have <code>config/dev/myapp_cert.pem</code> and you deploy a runtime configuration called <code>dev</code>. The file will be uploaded in the bucket as <code>config/myapp_cert.pem</code>.</p>\n<h3>Configuration tags</h3>\n<p>In the runtime environment configuration you can use the following tags in stack parameters specification:</p>\n<ol>\n<li>\n<p><code>!LambdaZip kmsParameters.zip</code> - will pass the correct S3 key to the uploaded kmsParameters.zip, so you can use it in your Lambda resources together with <code>TemplatesS3Bucket</code></p>\n</li>\n<li>\n<p><code>!CloudformationTemplate support/bucket-policy.cf.yaml</code> - works very similar to <code>!Lambdazip</code> but for Cloudformation templates. Will pass down the correct S3 key to the specified CloudFormation stack</p>\n</li>\n<li>\n<p><code>!StackOutput stack-name.OutputName</code> - will read the corresponding output from the specified stack and pass it down here. The stack needs to have been created above in the sequence.</p>\n</li>\n<li>\n<p><code>!ArtifactVersion</code>, <code>!ArtifactRepo</code> and <code>!ArtifactImage</code> - these three tags are used together with a release manifest in release management</p>\n</li>\n</ol>\n<h2>Release management</h2>\n<p><code>deploy_stack.py</code> can read a release manifest file if you specify it in the <code>-m</code> commandline argument. Release manifest contains images, their versions and other information about the software that is being deployed by the Seed. You can then inform your Cloudformation stacks about the versions and images you are deploying using the <code>!ArtifactVersion</code>, <code>!ArtifactRepo</code> and <code>!ArtifactImage</code> tags in the runtime environment configuration.</p>\n<p>More documentation about release management is coming soon.</p>\n\n          </div>"}, "last_serial": 6635146, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "6844a78db0c2cea821fe5eb22bff5311", "sha256": "d4125383ca1b13f76843644d86318219cfde2389be0a7e1bb65ed27ff9d34498"}, "downloads": -1, "filename": "cloudformation_seed-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6844a78db0c2cea821fe5eb22bff5311", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24651, "upload_time": "2019-08-23T19:54:53", "upload_time_iso_8601": "2019-08-23T19:54:53.387949Z", "url": "https://files.pythonhosted.org/packages/49/91/6c6f9140965da86a937703feff6104e928a9426888bab9730404e4bf0064/cloudformation_seed-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90a91da12eeb12a8ff46415bde88dbff", "sha256": "cbf4b9cd308aac169d01825b7d240e83d1df670ec38ffd863e5d16e7dcf532e4"}, "downloads": -1, "filename": "cloudformation-seed-0.10.0.tar.gz", "has_sig": false, "md5_digest": "90a91da12eeb12a8ff46415bde88dbff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24821, "upload_time": "2019-08-23T19:54:55", "upload_time_iso_8601": "2019-08-23T19:54:55.063640Z", "url": "https://files.pythonhosted.org/packages/2f/1a/b3c0271b95cfdbcc3feace7d26660199fcffc99e47a20b0d93fc3a2d1aad/cloudformation-seed-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "760699b539d70f223708f80d01fe78a0", "sha256": "fc786e002e3b807051715eace8df28f4d4bee894326b80b298561e24cf9cb206"}, "downloads": -1, "filename": "cloudformation_seed-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "760699b539d70f223708f80d01fe78a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24731, "upload_time": "2020-02-15T04:10:33", "upload_time_iso_8601": "2020-02-15T04:10:33.139128Z", "url": "https://files.pythonhosted.org/packages/d6/a3/9741fc5a365a712f49a331e9b4d318e81f15e8c47515f415cc6e7d4df0d3/cloudformation_seed-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1243c7ab1d2126db50b180285465f120", "sha256": "f598d058c7334b4e8c85b424f8e098783ef255a8d3d0e5c3f2b64e83c54d483c"}, "downloads": -1, "filename": "cloudformation-seed-0.11.0.tar.gz", "has_sig": false, "md5_digest": "1243c7ab1d2126db50b180285465f120", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25465, "upload_time": "2020-02-15T04:07:29", "upload_time_iso_8601": "2020-02-15T04:07:29.442786Z", "url": "https://files.pythonhosted.org/packages/31/8a/c9b1fc68f8cfd90d66373f8633c6be113580a45393a51aab69f3979e8ff9/cloudformation-seed-0.11.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "46831f782a0f3a71465df27880812ee3", "sha256": "742a19467f2e6414c60c0a2d678506b2ebbcd410cd671d5cb729e1ea6111d830"}, "downloads": -1, "filename": "cloudformation_seed-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "46831f782a0f3a71465df27880812ee3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19220, "upload_time": "2019-03-12T08:21:13", "upload_time_iso_8601": "2019-03-12T08:21:13.890839Z", "url": "https://files.pythonhosted.org/packages/2c/46/7dcd15ebc95ad472c86ead9d87becae8738d8d091e9d5484b184cdb38398/cloudformation_seed-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8830812c7b1e0190e3b23678bf38641", "sha256": "4fa91391b374e01591c5b65ec48e8fe799c8553c2c7125175e7f8e842b11347b"}, "downloads": -1, "filename": "cloudformation-seed-0.9.0.tar.gz", "has_sig": false, "md5_digest": "b8830812c7b1e0190e3b23678bf38641", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19151, "upload_time": "2019-03-12T08:21:16", "upload_time_iso_8601": "2019-03-12T08:21:16.625591Z", "url": "https://files.pythonhosted.org/packages/53/06/c5982055047e1e31877b1c984245030b69446c2039d3cc5befd8c9ac3ae1/cloudformation-seed-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "9790d75f3b7e2f56121972e4cb2faa9b", "sha256": "2d52caeaf2d26e4a8f46f24db90b90c0e7d6c86e11769a847f38533052d0f1e6"}, "downloads": -1, "filename": "cloudformation_seed-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9790d75f3b7e2f56121972e4cb2faa9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19130, "upload_time": "2019-03-18T05:50:29", "upload_time_iso_8601": "2019-03-18T05:50:29.794346Z", "url": "https://files.pythonhosted.org/packages/56/60/0d55aaaea6c28ca153556eafeed40d0e55f039311e7df67b48744ef13829/cloudformation_seed-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64fb0959baa7967f48879d0fa503e207", "sha256": "e8059c4b5b887e6458ff3114cde2fd3e09fb1440336e75d46577463e9bd48d10"}, "downloads": -1, "filename": "cloudformation-seed-0.9.1.tar.gz", "has_sig": false, "md5_digest": "64fb0959baa7967f48879d0fa503e207", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19879, "upload_time": "2019-03-18T05:50:31", "upload_time_iso_8601": "2019-03-18T05:50:31.880393Z", "url": "https://files.pythonhosted.org/packages/7c/79/52fc2bbf5dfa13d0dac93c27577f8c4946ccadd3e330372f5ce7de78127a/cloudformation-seed-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "967aaa0d2bc9694437e79565c3227c8b", "sha256": "3cc0146015c362ff7e7277c7c1cc6481fd5fb28d21634dc85b1365c2eed412df"}, "downloads": -1, "filename": "cloudformation_seed-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "967aaa0d2bc9694437e79565c3227c8b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19140, "upload_time": "2019-03-21T00:31:58", "upload_time_iso_8601": "2019-03-21T00:31:58.062812Z", "url": "https://files.pythonhosted.org/packages/c9/af/aeed124901bb86c4bab944f4cad74d351b8a1bf537f778f23f4379e89988/cloudformation_seed-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc9a9d1dfa416a8c4cb57ab422ba86b9", "sha256": "4859d735a1e157eb101ff15bedd88752df64ae7124f3969848ba61c6aa7d76e9"}, "downloads": -1, "filename": "cloudformation-seed-0.9.2.tar.gz", "has_sig": false, "md5_digest": "dc9a9d1dfa416a8c4cb57ab422ba86b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19892, "upload_time": "2019-03-21T00:32:00", "upload_time_iso_8601": "2019-03-21T00:32:00.136560Z", "url": "https://files.pythonhosted.org/packages/79/7e/39b32589c0ad8cf0457b42f078498aee4feb5671adf9a0db8063753c90a3/cloudformation-seed-0.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "760699b539d70f223708f80d01fe78a0", "sha256": "fc786e002e3b807051715eace8df28f4d4bee894326b80b298561e24cf9cb206"}, "downloads": -1, "filename": "cloudformation_seed-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "760699b539d70f223708f80d01fe78a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24731, "upload_time": "2020-02-15T04:10:33", "upload_time_iso_8601": "2020-02-15T04:10:33.139128Z", "url": "https://files.pythonhosted.org/packages/d6/a3/9741fc5a365a712f49a331e9b4d318e81f15e8c47515f415cc6e7d4df0d3/cloudformation_seed-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1243c7ab1d2126db50b180285465f120", "sha256": "f598d058c7334b4e8c85b424f8e098783ef255a8d3d0e5c3f2b64e83c54d483c"}, "downloads": -1, "filename": "cloudformation-seed-0.11.0.tar.gz", "has_sig": false, "md5_digest": "1243c7ab1d2126db50b180285465f120", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25465, "upload_time": "2020-02-15T04:07:29", "upload_time_iso_8601": "2020-02-15T04:07:29.442786Z", "url": "https://files.pythonhosted.org/packages/31/8a/c9b1fc68f8cfd90d66373f8633c6be113580a45393a51aab69f3979e8ff9/cloudformation-seed-0.11.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:50 2020"}