{"info": {"author": "tav", "author_email": "tav@espians.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Text Processing", "Topic :: Utilities"], "description": "Assetgen is intended as a replacement for the various ad-hoc scripts that often\nget written to build/manage JavaScript/CSS files.\n\n**Features**\n\nThe default support includes:\n\n* Compiling CoffeeScript/TypeScript source files into JavaScript.\n\n* Minifying with UglifyJS/UglifyJS2 -- including constant folding support.\n\n* Generating source maps for CoffeeScript, TypeScript and minified JavaScript\n  sources.\n\n* Compiling and minifying CSS from Less, Roole, SASS, SCSS and Stylus source\n  files.\n\n* Generating variants of the same stylesheet for internationalisation\n  (flipping left to right).\n\n* Embedding image/font resources as ``data:`` URIs within CSS stylesheets to\n  minimise latency.\n\n* Concatenating multiple source files into one file to minimise the number of\n  HTTP requests.\n\n* Creating distinct files with the hash of the content embedded in the filename\n  so as to work effectively with web caches.\n\n* Dynamically fetching source files and embedded resources from HTTP/HTTPS URLs.\n\n* Creating a JSON manifest file for use in your web app's static handlers.\n\n* Generating files processed by a templating language (e.g. for inserting content from other files).\n\nThe tool is driven by the configuration you specify in an ``assetgen.yaml``\nfile, e.g.\n\n::\n\n   # Example assetgen.yaml configuration\n\n   generate:\n\n   - js/base.js:\n       source:\n         - %(AMPIFY_ROOT)s/third_party/jslibs/json.js\n\n   - js/app.js:\n       source:\n         - https://raw.github.com/tav/jsutil/master/define.coffee\n         - static/js/models.coffee\n         - static/js/views.coffee\n       uglify.define:\n         - DEBUG=false\n       profile.dev:\n         uglify.define:\n           - DEBUG=true\n\n   - js/encoder.js:\n       source:\n         - encoder/detect.ts\n         - encoder/format.ts\n         - encoder/encode.ts\n       sourcemaps: true\n\n   - js/content-inserter.js\n        source:\n          - static/html/content.html # plain html content\n          - static/js/Content.coffee # content handling logic\n          - raw: \"})();\"\n        template: |\n          (function(){var htmlContent = ${source|trim,jsliteral};\n        # the source parameter gets processesed for each static source\n        # file (i.e. not raw strings) which is not processed in any way\n        # i.e. not CoffeeScript/TypeScript files.\n        # Also, templates only works when source maps are disabled\n        sourcemaps: false\n\n   - gfx/*:\n       source: static/gfx/*\n       type: binary\n\n   - css/site.css:\n       source:\n         - raw: |\n             // Public Domain (-) 2013 The Ampify Authors.\n             // See the Ampify UNLICENSE file for details.\n         - static/css/site.sass\n       depends:\n         - static/css/*.sass\n         - static/gfx/*\n       bidi: true\n       embed.path.root: static\n       embed.url.base: /.static/\n\n   prereqs:\n\n   - static/js/consts.js:\n       source: static/js/consts.coffee\n       compress: false\n\n   - static/js/consts-dev.js:\n       source: static/js/consts-dev.coffee\n       compress: false\n\n   env:\n     NODE_PATH.prefix: static/js\n\n   output.directory: appengine/static\n   output.hashed: true\n   output.manifest: appengine/assets.json\n\n   profile.dev:\n     css.compress: false\n     js.compress: false\n\nTo take advantage of the embedding within stylesheets just replace ``url()``\nentries with ``embed()`` entries in your source stylesheet files -- whether\nthat is less, sass, scss, stylus or plain old CSS.\n\nYou can control which config options gets used by specifying the ``--profile``\nparameter. This will override default values with the values specified for the\ngiven profile. So, in the above example, specifying ``--profile dev`` will use\nall the ``profile.dev`` options.\n\nAnd, whilst you are developing, you can use the ``--watch`` command-line\nparameter to tell ``assetgen`` to monitor file changes and rebuild all\nappropriate files. Watch also monitors changes to the ``assetgen.yaml`` file,\nso you can update the config without having to restart ``assetgen``.\n\nDuring development, one often runs ``--watch`` with a dev profile, e.g.\n\n::\n\n    assetgen --profile dev --watch\n\nThen, to create the release/production builds, just remove the built files and\nregenerate, i.e.\n\n::\n\n    assetgen --clean && assetgen\n\nThe above commands assume that you've commited an ``assetgen.yaml`` file into\na git repository. Assetgen will then use ``git`` to auto-detect the file from\nwithin the current repository. If you are not using git or haven't committed\nthe config file, you can of course specify it explicitly, e.g.\n\n::\n\n    assetgen assetgen.yaml --profile dev --watch\n    assetgen assetgen.yaml --clean && assetgen assetgen.yaml\n\nIf you are using ``bash``, you can take advantage of the tab-completion for\ncommand line parameters support within ``assetgen`` by adding the following to\nyour ``~/.bashrc`` or equivalent::\n\n    _assetgen_completion() {\n        COMPREPLY=( $( \\\n        COMP_LINE=$COMP_LINE  COMP_POINT=$COMP_POINT \\\n        COMP_WORDS=\"${COMP_WORDS[*]}\"  COMP_CWORD=$COMP_CWORD \\\n        OPTPARSE_AUTO_COMPLETE=1 $1 ) )\n    }\n\n    complete -o default -F _assetgen_completion assetgen\n\nAnd, finally, you can specify custom handlers for ``assetgen`` to call when\ngenerating a file of a given ``type``. For example, to override the builtin\n``js`` handler with one which just lower-cases all the source content, create\nyour extension, e.g. ``kickass-extension.py``::\n\n   class KickassAsset(Asset):\n\n       def generate(self):\n           content = ''.join(read(source).lower() for source in self.sources)\n           self.emit(self.path, content)\n\n   register_handler('js', KickassAsset)\n\nThen run ``assetgen`` with the ``--extension path/to/kickass-extension.py``\nparameter specified.\n\n**Usage**\n\n::\n\n    Usage: assetgen [<path/to/assetgen.yaml> ...] [options]\n\n    Note:\n        If you don't specify assetgen.yaml file paths, then `git\n        ls-files *assetgen.yaml` will be used to detect all config\n        files in the current repository. So you need to be inside\n        a git repository's working tree.\n\n        And if you specify a URL as a `source`, then it will be\n        downloaded to ~/.assetgen -- you can override this by\n        setting the env variable $ASSETGEN_DOWNLOADS\n\n    Options:\n      -h, --help        show this help message and exit\n      -v, --version     show program's version number and exit\n      --clean           remove all generated files\n      --debug           set debug mode\n      --extension=PATH  specify a python extension file (may be repeated)\n      --force           force rebuild of all files\n      --nuke            remove all generated and downloaded files\n      --profile=NAME    specify a profile to use\n      --watch           keep running assetgen on a loop\n\n**Contribute**\n\nTo contribute any patches simply fork the repository using GitHub and send a\npull request to https://github.com/tav, thanks!\n\n**License**\n\nAll of the code has been released into the `Public Domain\n<https://github.com/tav/assetgen/raw/master/UNLICENSE>`_. Do with it as you\nplease.\n\n-- \nEnjoy, tav <tav@espians.com>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tav/assetgen", "keywords": "assets,javascript,css,coffeescript,sass,typescript,less,lessjs,roole,scss,stylus,source maps,i18n", "license": "Public Domain", "maintainer": null, "maintainer_email": null, "name": "assetgen", "package_url": "https://pypi.org/project/assetgen/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/assetgen/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/tav/assetgen"}, "release_url": "https://pypi.org/project/assetgen/0.3.10/", "requires_dist": null, "requires_python": null, "summary": "Asset generator for modern web app development", "version": "0.3.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Assetgen is intended as a replacement for the various ad-hoc scripts that often\nget written to build/manage JavaScript/CSS files.</p>\n<p><strong>Features</strong></p>\n<p>The default support includes:</p>\n<ul>\n<li>Compiling CoffeeScript/TypeScript source files into JavaScript.</li>\n<li>Minifying with UglifyJS/UglifyJS2 \u2013 including constant folding support.</li>\n<li>Generating source maps for CoffeeScript, TypeScript and minified JavaScript\nsources.</li>\n<li>Compiling and minifying CSS from Less, Roole, SASS, SCSS and Stylus source\nfiles.</li>\n<li>Generating variants of the same stylesheet for internationalisation\n(flipping left to right).</li>\n<li>Embedding image/font resources as <tt>data:</tt> URIs within CSS stylesheets to\nminimise latency.</li>\n<li>Concatenating multiple source files into one file to minimise the number of\nHTTP requests.</li>\n<li>Creating distinct files with the hash of the content embedded in the filename\nso as to work effectively with web caches.</li>\n<li>Dynamically fetching source files and embedded resources from HTTP/HTTPS URLs.</li>\n<li>Creating a JSON manifest file for use in your web app\u2019s static handlers.</li>\n<li>Generating files processed by a templating language (e.g. for inserting content from other files).</li>\n</ul>\n<p>The tool is driven by the configuration you specify in an <tt>assetgen.yaml</tt>\nfile, e.g.</p>\n<pre># Example assetgen.yaml configuration\n\ngenerate:\n\n- js/base.js:\n    source:\n      - %(AMPIFY_ROOT)s/third_party/jslibs/json.js\n\n- js/app.js:\n    source:\n      - https://raw.github.com/tav/jsutil/master/define.coffee\n      - static/js/models.coffee\n      - static/js/views.coffee\n    uglify.define:\n      - DEBUG=false\n    profile.dev:\n      uglify.define:\n        - DEBUG=true\n\n- js/encoder.js:\n    source:\n      - encoder/detect.ts\n      - encoder/format.ts\n      - encoder/encode.ts\n    sourcemaps: true\n\n- js/content-inserter.js\n     source:\n       - static/html/content.html # plain html content\n       - static/js/Content.coffee # content handling logic\n       - raw: \"})();\"\n     template: |\n       (function(){var htmlContent = ${source|trim,jsliteral};\n     # the source parameter gets processesed for each static source\n     # file (i.e. not raw strings) which is not processed in any way\n     # i.e. not CoffeeScript/TypeScript files.\n     # Also, templates only works when source maps are disabled\n     sourcemaps: false\n\n- gfx/*:\n    source: static/gfx/*\n    type: binary\n\n- css/site.css:\n    source:\n      - raw: |\n          // Public Domain (-) 2013 The Ampify Authors.\n          // See the Ampify UNLICENSE file for details.\n      - static/css/site.sass\n    depends:\n      - static/css/*.sass\n      - static/gfx/*\n    bidi: true\n    embed.path.root: static\n    embed.url.base: /.static/\n\nprereqs:\n\n- static/js/consts.js:\n    source: static/js/consts.coffee\n    compress: false\n\n- static/js/consts-dev.js:\n    source: static/js/consts-dev.coffee\n    compress: false\n\nenv:\n  NODE_PATH.prefix: static/js\n\noutput.directory: appengine/static\noutput.hashed: true\noutput.manifest: appengine/assets.json\n\nprofile.dev:\n  css.compress: false\n  js.compress: false\n</pre>\n<p>To take advantage of the embedding within stylesheets just replace <tt>url()</tt>\nentries with <tt>embed()</tt> entries in your source stylesheet files \u2013 whether\nthat is less, sass, scss, stylus or plain old CSS.</p>\n<p>You can control which config options gets used by specifying the <tt><span class=\"pre\">--profile</span></tt>\nparameter. This will override default values with the values specified for the\ngiven profile. So, in the above example, specifying <tt><span class=\"pre\">--profile</span> dev</tt> will use\nall the <tt>profile.dev</tt> options.</p>\n<p>And, whilst you are developing, you can use the <tt><span class=\"pre\">--watch</span></tt> command-line\nparameter to tell <tt>assetgen</tt> to monitor file changes and rebuild all\nappropriate files. Watch also monitors changes to the <tt>assetgen.yaml</tt> file,\nso you can update the config without having to restart <tt>assetgen</tt>.</p>\n<p>During development, one often runs <tt><span class=\"pre\">--watch</span></tt> with a dev profile, e.g.</p>\n<pre>assetgen --profile dev --watch\n</pre>\n<p>Then, to create the release/production builds, just remove the built files and\nregenerate, i.e.</p>\n<pre>assetgen --clean &amp;&amp; assetgen\n</pre>\n<p>The above commands assume that you\u2019ve commited an <tt>assetgen.yaml</tt> file into\na git repository. Assetgen will then use <tt>git</tt> to auto-detect the file from\nwithin the current repository. If you are not using git or haven\u2019t committed\nthe config file, you can of course specify it explicitly, e.g.</p>\n<pre>assetgen assetgen.yaml --profile dev --watch\nassetgen assetgen.yaml --clean &amp;&amp; assetgen assetgen.yaml\n</pre>\n<p>If you are using <tt>bash</tt>, you can take advantage of the tab-completion for\ncommand line parameters support within <tt>assetgen</tt> by adding the following to\nyour <tt><span class=\"pre\">~/.bashrc</span></tt> or equivalent:</p>\n<pre>_assetgen_completion() {\n    COMPREPLY=( $( \\\n    COMP_LINE=$COMP_LINE  COMP_POINT=$COMP_POINT \\\n    COMP_WORDS=\"${COMP_WORDS[*]}\"  COMP_CWORD=$COMP_CWORD \\\n    OPTPARSE_AUTO_COMPLETE=1 $1 ) )\n}\n\ncomplete -o default -F _assetgen_completion assetgen\n</pre>\n<p>And, finally, you can specify custom handlers for <tt>assetgen</tt> to call when\ngenerating a file of a given <tt>type</tt>. For example, to override the builtin\n<tt>js</tt> handler with one which just lower-cases all the source content, create\nyour extension, e.g. <tt><span class=\"pre\">kickass-extension.py</span></tt>:</p>\n<pre>class KickassAsset(Asset):\n\n    def generate(self):\n        content = ''.join(read(source).lower() for source in self.sources)\n        self.emit(self.path, content)\n\nregister_handler('js', KickassAsset)\n</pre>\n<p>Then run <tt>assetgen</tt> with the <tt><span class=\"pre\">--extension</span> <span class=\"pre\">path/to/kickass-extension.py</span></tt>\nparameter specified.</p>\n<p><strong>Usage</strong></p>\n<pre>Usage: assetgen [&lt;path/to/assetgen.yaml&gt; ...] [options]\n\nNote:\n    If you don't specify assetgen.yaml file paths, then `git\n    ls-files *assetgen.yaml` will be used to detect all config\n    files in the current repository. So you need to be inside\n    a git repository's working tree.\n\n    And if you specify a URL as a `source`, then it will be\n    downloaded to ~/.assetgen -- you can override this by\n    setting the env variable $ASSETGEN_DOWNLOADS\n\nOptions:\n  -h, --help        show this help message and exit\n  -v, --version     show program's version number and exit\n  --clean           remove all generated files\n  --debug           set debug mode\n  --extension=PATH  specify a python extension file (may be repeated)\n  --force           force rebuild of all files\n  --nuke            remove all generated and downloaded files\n  --profile=NAME    specify a profile to use\n  --watch           keep running assetgen on a loop\n</pre>\n<p><strong>Contribute</strong></p>\n<p>To contribute any patches simply fork the repository using GitHub and send a\npull request to <a href=\"https://github.com/tav\" rel=\"nofollow\">https://github.com/tav</a>, thanks!</p>\n<p><strong>License</strong></p>\n<p>All of the code has been released into the <a href=\"https://github.com/tav/assetgen/raw/master/UNLICENSE\" rel=\"nofollow\">Public Domain</a>. Do with it as you\nplease.</p>\n<p>\u2013\nEnjoy, tav &lt;<a href=\"mailto:tav%40espians.com\">tav<span>@</span>espians<span>.</span>com</a>&gt;</p>\n\n          </div>"}, "last_serial": 2018655, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "bc4f59d26b1386b54ca7846c593a10dd", "sha256": "09c1384e6a7b2d040f7edd74c723a42fde93cb1a0a22d30e2fdbb6cae4dfd0f8"}, "downloads": -1, "filename": "assetgen-0.1.tar.gz", "has_sig": false, "md5_digest": "bc4f59d26b1386b54ca7846c593a10dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13238, "upload_time": "2011-05-20T20:47:06", "upload_time_iso_8601": "2011-05-20T20:47:06.060734Z", "url": "https://files.pythonhosted.org/packages/53/c4/dec30304a6b62d7c8e25f32eb5c60d08dc2a112416ca05d5cb77dfaacd38/assetgen-0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "228317630aecfce37da79674bec5d7af", "sha256": "302e7a7d3758e2330a0ceb22320fd6bd78c568c0251392db5be023878b904410"}, "downloads": -1, "filename": "assetgen-0.1.zip", "has_sig": false, "md5_digest": "228317630aecfce37da79674bec5d7af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19220, "upload_time": "2011-05-20T20:47:06", "upload_time_iso_8601": "2011-05-20T20:47:06.823647Z", "url": "https://files.pythonhosted.org/packages/a4/22/526f9af4671261de44ce62c4845cfb451a1028e4b66bbb5661618e589ea6/assetgen-0.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f82241d4644afcf2e5dc0660af30836f", "sha256": "89961070612fd5a8470244de62362c5e774021bc644abb50c5e06fc7316d81eb"}, "downloads": -1, "filename": "assetgen-0.2.tar.gz", "has_sig": false, "md5_digest": "f82241d4644afcf2e5dc0660af30836f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13795, "upload_time": "2011-10-22T15:06:36", "upload_time_iso_8601": "2011-10-22T15:06:36.187550Z", "url": "https://files.pythonhosted.org/packages/9a/3b/deb31c66be26304e51329a9e0752b0cc2858d92cd7150cd1531862e9286d/assetgen-0.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d1dba2ba8e2dba4adf49b4c67211608", "sha256": "6ab426470d0793bac467cdc4110dc66a8310a7506afd2b5564ceaf38e33bdc9b"}, "downloads": -1, "filename": "assetgen-0.2.zip", "has_sig": false, "md5_digest": "4d1dba2ba8e2dba4adf49b4c67211608", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19896, "upload_time": "2011-10-22T15:06:37", "upload_time_iso_8601": "2011-10-22T15:06:37.115715Z", "url": "https://files.pythonhosted.org/packages/cc/1d/df7e931dbc6f6643c77ee8c4239a4a031da0e46bc0512d8d22220660784b/assetgen-0.2.zip", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "881dbb8a0f638b546fb024229c5e83d2", "sha256": "402d8ccbbb6b661ae550fce5de72816b80a2d808fb250f9f84650328495e4c01"}, "downloads": -1, "filename": "assetgen-0.2.2.tar.gz", "has_sig": false, "md5_digest": "881dbb8a0f638b546fb024229c5e83d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14707, "upload_time": "2012-10-15T03:43:34", "upload_time_iso_8601": "2012-10-15T03:43:34.554881Z", "url": "https://files.pythonhosted.org/packages/f6/ff/b5debdaac95f5cd1c23531665a96f51e4033576ed649e5efa53c23039bfb/assetgen-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "65508f1823ba6bca0738c87393e9572f", "sha256": "060140910537ec33a5cc352e06f489437e21317f75df24a17ae7fcf0bb3ecc00"}, "downloads": -1, "filename": "assetgen-0.3.0.tar.gz", "has_sig": false, "md5_digest": "65508f1823ba6bca0738c87393e9572f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16944, "upload_time": "2012-10-16T10:12:24", "upload_time_iso_8601": "2012-10-16T10:12:24.275890Z", "url": "https://files.pythonhosted.org/packages/4e/4e/78dd5cc5fc51fe518482af07d01bd7ff22068883614b23c49b816a16e623/assetgen-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "bbc8ab0e4612139d54f55b2e0be397b9", "sha256": "8c7b26dd3938ab9f0b5ae85d05dc1985062cf4abaa8bb566fe756d6f5725bb63"}, "downloads": -1, "filename": "assetgen-0.3.1.tar.gz", "has_sig": false, "md5_digest": "bbc8ab0e4612139d54f55b2e0be397b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17112, "upload_time": "2012-10-21T15:56:22", "upload_time_iso_8601": "2012-10-21T15:56:22.267074Z", "url": "https://files.pythonhosted.org/packages/ee/0c/62900e236b614a682450bf09a71752212e10132c4ce874e17872f9e1849c/assetgen-0.3.1.tar.gz", "yanked": false}], "0.3.10": [{"comment_text": "", "digests": {"md5": "b0815b130089ac411614b3f3b7e8d71b", "sha256": "77c4f1842cb491596f06647004a6c8ec9a38ea86d8cddfb5e8217be831f505cb"}, "downloads": -1, "filename": "assetgen-0.3.10.tar.gz", "has_sig": false, "md5_digest": "b0815b130089ac411614b3f3b7e8d71b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18358, "upload_time": "2016-03-21T13:34:45", "upload_time_iso_8601": "2016-03-21T13:34:45.124119Z", "url": "https://files.pythonhosted.org/packages/ac/59/a0916708fb2bd88faf09c6213d0f98c1b4f3f1dccc2d0a68d7af03c9f9d6/assetgen-0.3.10.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "c94834bba9191645c65e286841ffd01e", "sha256": "8339f9722437bcb4b1b62d8755d8bf3fb2e8857138b2dcec1a20de7b6d34ba26"}, "downloads": -1, "filename": "assetgen-0.3.10.zip", "has_sig": false, "md5_digest": "c94834bba9191645c65e286841ffd01e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26900, "upload_time": "2016-03-21T13:34:40", "upload_time_iso_8601": "2016-03-21T13:34:40.392748Z", "url": "https://files.pythonhosted.org/packages/e7/de/4525055f5cb26a7ccbdebb0c37c3204869650d817db343c51627e933a408/assetgen-0.3.10.zip", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "18f852f24c181ad0842cfe3050832507", "sha256": "5839088a02587eb8f0096ac59bd56990bf1cab3c15db8a3f58129ef29b62387f"}, "downloads": -1, "filename": "assetgen-0.3.2.tar.gz", "has_sig": false, "md5_digest": "18f852f24c181ad0842cfe3050832507", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17481, "upload_time": "2012-10-25T14:47:05", "upload_time_iso_8601": "2012-10-25T14:47:05.712525Z", "url": "https://files.pythonhosted.org/packages/de/c0/457d24dd15476f11a8dcd5c30801968e504140e140f2c19b45db3c6c964f/assetgen-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "85b941598eadd6ddf3ae85753f466287", "sha256": "642ee737a4723adcbaddeb0929cc8313576f6c05554d616aee91d6058b3bdffc"}, "downloads": -1, "filename": "assetgen-0.3.3.tar.gz", "has_sig": false, "md5_digest": "85b941598eadd6ddf3ae85753f466287", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17753, "upload_time": "2013-05-05T20:41:15", "upload_time_iso_8601": "2013-05-05T20:41:15.175406Z", "url": "https://files.pythonhosted.org/packages/46/3b/3a44e9941b7f55a8add2d7969d6dca384a910eb1d268d1dbbe8fc3d46b2e/assetgen-0.3.3.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "73b173c34e9f2d00cce0f3f81b9dbec8", "sha256": "24bed8c96d1961c2f667aa80816322b7d3adcd04c0630d16b2ed79345620919e"}, "downloads": -1, "filename": "assetgen-0.3.3.zip", "has_sig": false, "md5_digest": "73b173c34e9f2d00cce0f3f81b9dbec8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26250, "upload_time": "2013-05-05T20:41:12", "upload_time_iso_8601": "2013-05-05T20:41:12.845006Z", "url": "https://files.pythonhosted.org/packages/c5/91/b4a3100defe513e7d4a59ba7c8eeb6a802d98cc56e50ec78e248637bcc17/assetgen-0.3.3.zip", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "f63284e3dfd6aee24ba55a430a90e6fd", "sha256": "ba36fccba0afec7ca39074d9fe6f541db33eb2a138da87b567f6dbe1ffd91d53"}, "downloads": -1, "filename": "assetgen-0.3.4.tar.gz", "has_sig": false, "md5_digest": "f63284e3dfd6aee24ba55a430a90e6fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17820, "upload_time": "2013-05-05T21:14:24", "upload_time_iso_8601": "2013-05-05T21:14:24.679232Z", "url": "https://files.pythonhosted.org/packages/09/1c/fdb88c08fe72a908d3b8274c2953b722f5f55a94c1237547808aee519968/assetgen-0.3.4.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "00efa6a595bdc8c4527fcdeca2ebc6b7", "sha256": "b1a655a392931b951fc61be3246fddf5ab66cbf199cf7bae62bab340f8e4a986"}, "downloads": -1, "filename": "assetgen-0.3.4.zip", "has_sig": false, "md5_digest": "00efa6a595bdc8c4527fcdeca2ebc6b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26296, "upload_time": "2013-05-05T21:14:22", "upload_time_iso_8601": "2013-05-05T21:14:22.080232Z", "url": "https://files.pythonhosted.org/packages/94/ab/f6a6a001202c97fee08a3f8c5d91a1cb3384ea60de9acb750858b2c99558/assetgen-0.3.4.zip", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "69c7c455086e0f0f1f59627881f9b043", "sha256": "9e486cc2086389ce3d083e1c921a8a9f5e09ed8f11e3bf1cfc79fa8dc9453936"}, "downloads": -1, "filename": "assetgen-0.3.5.tar.gz", "has_sig": false, "md5_digest": "69c7c455086e0f0f1f59627881f9b043", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18364, "upload_time": "2013-10-15T17:25:55", "upload_time_iso_8601": "2013-10-15T17:25:55.885305Z", "url": "https://files.pythonhosted.org/packages/5b/ea/9a13f1e164332c2078c3d416631d8ed6d70fa2f59117d77037c0652d527f/assetgen-0.3.5.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb0bfc38cfaf0beb030ba602dddfdd14", "sha256": "f99a7294ef9fddc56f41d374f03d8c3308a6b4041953b5292d8e33b9d798eef8"}, "downloads": -1, "filename": "assetgen-0.3.5.zip", "has_sig": false, "md5_digest": "fb0bfc38cfaf0beb030ba602dddfdd14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26865, "upload_time": "2013-10-15T17:25:52", "upload_time_iso_8601": "2013-10-15T17:25:52.335895Z", "url": "https://files.pythonhosted.org/packages/99/77/7963d4ff1fa6fbcb18fbd7f20caa62d6499b48b5723d33c8a65b9dd68fab/assetgen-0.3.5.zip", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "96973c5d44e0e371f5c1b46b3890735b", "sha256": "927c98218ba361da513a553e41d752cb50adfaa76bd19bbc3c2c5e2ee99cef1a"}, "downloads": -1, "filename": "assetgen-0.3.6.tar.gz", "has_sig": false, "md5_digest": "96973c5d44e0e371f5c1b46b3890735b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18366, "upload_time": "2013-10-15T17:27:16", "upload_time_iso_8601": "2013-10-15T17:27:16.517447Z", "url": "https://files.pythonhosted.org/packages/b9/8e/53a3a94c4b56840c50c6e6c085e2fedccffe0082bfa7cba82d035cb08bee/assetgen-0.3.6.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c5214d0a838ba8739b8757338ccf748", "sha256": "1d78f5ebd9d162f3363ec1f9601a90bcdb2127c93ac58aca2c577e61efeedf60"}, "downloads": -1, "filename": "assetgen-0.3.6.zip", "has_sig": false, "md5_digest": "9c5214d0a838ba8739b8757338ccf748", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26867, "upload_time": "2013-10-15T17:27:13", "upload_time_iso_8601": "2013-10-15T17:27:13.272781Z", "url": "https://files.pythonhosted.org/packages/12/16/0ddedc11d11afe97be860448aef03792ec502d88a9cea5a407b42bb0d552/assetgen-0.3.6.zip", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "3317805481bcd0dbec11fb3b826471a2", "sha256": "6f9f452079a7ef21b213f348f48225cbd4cee79ba3e81704269a45e55b79f53c"}, "downloads": -1, "filename": "assetgen-0.3.7.tar.gz", "has_sig": false, "md5_digest": "3317805481bcd0dbec11fb3b826471a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18363, "upload_time": "2013-12-31T00:21:22", "upload_time_iso_8601": "2013-12-31T00:21:22.771026Z", "url": "https://files.pythonhosted.org/packages/9e/74/3d39a5ee2755355d092f5f812565ecf9c409dbf3398175887fcd8494ba5b/assetgen-0.3.7.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "8946ef2fc616ca2b0fbed299f6e634d9", "sha256": "2f73d62e33f11e04a506b991e7a44d96e1e51cd167b1c0fb1480a16ce350b0b8"}, "downloads": -1, "filename": "assetgen-0.3.7.zip", "has_sig": false, "md5_digest": "8946ef2fc616ca2b0fbed299f6e634d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26861, "upload_time": "2013-12-31T00:21:20", "upload_time_iso_8601": "2013-12-31T00:21:20.596140Z", "url": "https://files.pythonhosted.org/packages/35/de/a076721fa0460e0462dc76f06ffb8863813685fb45ba3369904a9a6bb1e6/assetgen-0.3.7.zip", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "b25ce11bdcae645f2246e53694502ed8", "sha256": "945c16f2185b7145e77114673a814e926ae30bc48d435c352b45d766061889c7"}, "downloads": -1, "filename": "assetgen-0.3.9.tar.gz", "has_sig": false, "md5_digest": "b25ce11bdcae645f2246e53694502ed8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19408, "upload_time": "2015-05-21T12:58:39", "upload_time_iso_8601": "2015-05-21T12:58:39.092774Z", "url": "https://files.pythonhosted.org/packages/9b/56/401b1c48aff037b2dbfe18a69e20e261bcb6c92ddc4630b025c7d6d1a8b8/assetgen-0.3.9.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b30a8db69ba633ca911cfac71d1e8b1b", "sha256": "40cc0ea8182086f730a6075188f28dceee011052d8c32b4d0b1dad389aec1dbe"}, "downloads": -1, "filename": "assetgen-0.3.9.zip", "has_sig": false, "md5_digest": "b30a8db69ba633ca911cfac71d1e8b1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28149, "upload_time": "2015-05-21T12:58:35", "upload_time_iso_8601": "2015-05-21T12:58:35.162490Z", "url": "https://files.pythonhosted.org/packages/95/aa/c6543d3add3193ca5a55ac94296553372da07083323b99b12fd0ace68ee6/assetgen-0.3.9.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b0815b130089ac411614b3f3b7e8d71b", "sha256": "77c4f1842cb491596f06647004a6c8ec9a38ea86d8cddfb5e8217be831f505cb"}, "downloads": -1, "filename": "assetgen-0.3.10.tar.gz", "has_sig": false, "md5_digest": "b0815b130089ac411614b3f3b7e8d71b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18358, "upload_time": "2016-03-21T13:34:45", "upload_time_iso_8601": "2016-03-21T13:34:45.124119Z", "url": "https://files.pythonhosted.org/packages/ac/59/a0916708fb2bd88faf09c6213d0f98c1b4f3f1dccc2d0a68d7af03c9f9d6/assetgen-0.3.10.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "c94834bba9191645c65e286841ffd01e", "sha256": "8339f9722437bcb4b1b62d8755d8bf3fb2e8857138b2dcec1a20de7b6d34ba26"}, "downloads": -1, "filename": "assetgen-0.3.10.zip", "has_sig": false, "md5_digest": "c94834bba9191645c65e286841ffd01e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26900, "upload_time": "2016-03-21T13:34:40", "upload_time_iso_8601": "2016-03-21T13:34:40.392748Z", "url": "https://files.pythonhosted.org/packages/e7/de/4525055f5cb26a7ccbdebb0c37c3204869650d817db343c51627e933a408/assetgen-0.3.10.zip", "yanked": false}], "timestamp": "Thu May  7 18:16:53 2020"}