{"info": {"author": "Musyoka Morris", "author_email": "musyokamorris@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "********************************************\ndynamongo: Pythonic DynamoDB models\n********************************************\n\n**dynamongo** is Python ORM/framework-agnostic library for DynamoDB.\nIt is highly inspired by the PyMongo project.\nThis documentation attempts to explain everything you need to know to use dynamongo.\n\n.. code-block:: python\n\n    import datetime\n    from dynamongo import Model, Connection\n    from dynamongo import IntField, StringField, ListField, EmailField, DateTimeField\n\n    # This only need be called once. Alternatively, it can be set using env variables\n    Connection.set_config(\n        access_key_id='<KEY>',\n        secret_access_key='<SECRET>',\n        table_prefix='test-'\n    )\n\n\n    class User(Model):\n        __table__ = 'users'\n        __hash_key__ = 'email'\n\n        email = EmailField(required=True)\n        name = StringField(required=True)\n        year_of_birth = IntField(max_value=2018, min_value=1900)\n        cities_visited = ListField(StringField)\n        created_at = DateTimeField(default=datetime.datetime.now)\n\n\n    # store data to DynamoDB\n    john = User.save_one({\n        'email': 'johndoe@gmail.com',\n        'name': 'John Doe',\n        'year_of_birth': 1990,\n        'cities_visited': ['Nairobi', 'New York']\n    })\n\n    # year_of_birth, cities_visited & created_at are all optional\n    jane = User.save_one({\n        'email': 'jane@gmail.com',\n        'name': 'Jane Doe'\n    })\n\n    # Access attribute values\n    print(john.name)\n\n    # Fetch data from dynamoDB\n    user = User.get_one(User.email == 'johndoe@gmail.com')\n    print(user.to_dict())\n\n\nIn short, dynamongo models can be used to easily:\n\n- **validate** input data\n- **save** serialized data to DynamoDB\n- **read** and deserialize data from DynamoDB\n- **delete** items from DynamoDB\n- **update** data in DynamoDB\n\n\nGet It Now\n==========\n\n::\n\n    $ pip install dynamongo\n\n\nDocumentation\n=============\n\nFull documentation is available at http://dynamongo.readthedocs.io/ .\n\nRequirements\n============\n\n- Python >= 3.5", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/musyoka-morris/dynamongo", "keywords": "aws,dynamo,dynamodb,ormserialization,deserialization,validation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dynamongo", "package_url": "https://pypi.org/project/dynamongo/", "platform": "", "project_url": "https://pypi.org/project/dynamongo/", "project_urls": {"Homepage": "https://github.com/musyoka-morris/dynamongo"}, "release_url": "https://pypi.org/project/dynamongo/0.1/", "requires_dist": null, "requires_python": "", "summary": "A lightweight library for interacting with AWS dynamoDB in a pythonic way,inspired by pymongo", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>dynamongo</strong> is Python ORM/framework-agnostic library for DynamoDB.\nIt is highly inspired by the PyMongo project.\nThis documentation attempts to explain everything you need to know to use dynamongo.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dynamongo</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Connection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dynamongo</span> <span class=\"kn\">import</span> <span class=\"n\">IntField</span><span class=\"p\">,</span> <span class=\"n\">StringField</span><span class=\"p\">,</span> <span class=\"n\">ListField</span><span class=\"p\">,</span> <span class=\"n\">EmailField</span><span class=\"p\">,</span> <span class=\"n\">DateTimeField</span>\n\n<span class=\"c1\"># This only need be called once. Alternatively, it can be set using env variables</span>\n<span class=\"n\">Connection</span><span class=\"o\">.</span><span class=\"n\">set_config</span><span class=\"p\">(</span>\n    <span class=\"n\">access_key_id</span><span class=\"o\">=</span><span class=\"s1\">'&lt;KEY&gt;'</span><span class=\"p\">,</span>\n    <span class=\"n\">secret_access_key</span><span class=\"o\">=</span><span class=\"s1\">'&lt;SECRET&gt;'</span><span class=\"p\">,</span>\n    <span class=\"n\">table_prefix</span><span class=\"o\">=</span><span class=\"s1\">'test-'</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">__table__</span> <span class=\"o\">=</span> <span class=\"s1\">'users'</span>\n    <span class=\"n\">__hash_key__</span> <span class=\"o\">=</span> <span class=\"s1\">'email'</span>\n\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">EmailField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">year_of_birth</span> <span class=\"o\">=</span> <span class=\"n\">IntField</span><span class=\"p\">(</span><span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"n\">min_value</span><span class=\"o\">=</span><span class=\"mi\">1900</span><span class=\"p\">)</span>\n    <span class=\"n\">cities_visited</span> <span class=\"o\">=</span> <span class=\"n\">ListField</span><span class=\"p\">(</span><span class=\"n\">StringField</span><span class=\"p\">)</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># store data to DynamoDB</span>\n<span class=\"n\">john</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">save_one</span><span class=\"p\">({</span>\n    <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'johndoe@gmail.com'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'year_of_birth'</span><span class=\"p\">:</span> <span class=\"mi\">1990</span><span class=\"p\">,</span>\n    <span class=\"s1\">'cities_visited'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Nairobi'</span><span class=\"p\">,</span> <span class=\"s1\">'New York'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># year_of_birth, cities_visited &amp; created_at are all optional</span>\n<span class=\"n\">jane</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">save_one</span><span class=\"p\">({</span>\n    <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'jane@gmail.com'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Jane Doe'</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># Access attribute values</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">john</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fetch data from dynamoDB</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">get_one</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"o\">==</span> <span class=\"s1\">'johndoe@gmail.com'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">())</span>\n</pre>\n<p>In short, dynamongo models can be used to easily:</p>\n<ul>\n<li><strong>validate</strong> input data</li>\n<li><strong>save</strong> serialized data to DynamoDB</li>\n<li><strong>read</strong> and deserialize data from DynamoDB</li>\n<li><strong>delete</strong> items from DynamoDB</li>\n<li><strong>update</strong> data in DynamoDB</li>\n</ul>\n<div id=\"get-it-now\">\n<h2>Get It Now</h2>\n<pre>$ pip install dynamongo\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Full documentation is available at <a href=\"http://dynamongo.readthedocs.io/\" rel=\"nofollow\">http://dynamongo.readthedocs.io/</a> .</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;= 3.5</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4105615, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "aad7d8ab4c8994ddd325f7297a8a2266", "sha256": "e6edb535a52ff816c16124a342ca583741f25fdbf5b0a560067d82dda9fe3e03"}, "downloads": -1, "filename": "dynamongo-0.1.tar.gz", "has_sig": false, "md5_digest": "aad7d8ab4c8994ddd325f7297a8a2266", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31197, "upload_time": "2018-07-26T17:40:24", "upload_time_iso_8601": "2018-07-26T17:40:24.562784Z", "url": "https://files.pythonhosted.org/packages/5e/a7/71c0a7b8e4bf20acb953e9cf282f62bbb627e06f1cf9360e07a3970db7a8/dynamongo-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aad7d8ab4c8994ddd325f7297a8a2266", "sha256": "e6edb535a52ff816c16124a342ca583741f25fdbf5b0a560067d82dda9fe3e03"}, "downloads": -1, "filename": "dynamongo-0.1.tar.gz", "has_sig": false, "md5_digest": "aad7d8ab4c8994ddd325f7297a8a2266", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31197, "upload_time": "2018-07-26T17:40:24", "upload_time_iso_8601": "2018-07-26T17:40:24.562784Z", "url": "https://files.pythonhosted.org/packages/5e/a7/71c0a7b8e4bf20acb953e9cf282f62bbb627e06f1cf9360e07a3970db7a8/dynamongo-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:40 2020"}