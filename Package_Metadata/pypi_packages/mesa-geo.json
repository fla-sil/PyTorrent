{"info": {"author": "Project GeoMesa Team", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Artificial Life"], "description": "# mesa-geo - a GIS extension to Mesa Agent-Based Modeling\n\nmesa-geo implements a `GeoSpace` that can host GIS-based `GeoAgents`, which are like normal Agents, except they have a `shape` attribute that is a [Shapely object](https://shapely.readthedocs.io/en/latest/manual.html). You can use `Shapely` directly to create arbitrary shapes, but in most cases you will want to import your shapes from a file. Mesa-geo allows you to create GeoAgents from any vector data file (e.g. shapefiles), valid GeoJSON objects or a GeoPandas GeoDataFrame.\n\nThis is the first release of mesa-geo. No functionality guaranteed, bugs included.\n\n## Installation\n\nTo install mesa-geo on linux or macOS run\n\n```shell\npip install mesa-geo\n```\n\nOn windows you should first use Anaconda to install some of the requirements with\n\n```shell\nconda install fiona pyproj rtree shapely\npip install mesa-geo\n```\n\nSince mesa-geo is in early development you could also install the latest version directly from Github via\n\n```shell\npip install -e git+https://github.com/corvince/mesa-geo.git#egg=mesa-geo\n```\n\n## Getting started\n\nYou should be familiar with how [mesa](https://github.com/projectmesa/mesa) works.\n\nSo let's get started with some shapes! We will work with [records of US states](http://eric.clst.org/Stuff/USGeoJSON). We use the `requests` library to retrieve the data, but of course you can work with local data.\n\n```python\nfrom mesa_geo import GeoSpace, GeoAgent, AgentCreator\nfrom mesa import Model\nimport requests\nurl = 'http://eric.clst.org/assets/wiki/uploads/Stuff/gz_2010_us_040_00_20m.json'\nr = requests.get(url)\ngeojson_states = r.json()\n```\n\nFirst we create a `State` Agent and a `GeoModel`. Both should look familiar if you have worked with mesa before.\n\n```python\nclass State(GeoAgent):\n    def __init__(self, unique_id, model, shape):\n        super().__init__(unique_id, model, shape)\n\nclass GeoModel(Model):\n    def __init__(self):\n        self.grid = GeoSpace()\n\n        state_agent_kwargs = dict(model=self)\n        AC = AgentCreator(agent_class=State, agent_kwargs=state_agent_kwargs)\n        agents = AC.from_GeoJSON(GeoJSON=geojson_states, unique_id=\"NAME\")\n        self.grid.add_agents(agents)\n```\n\nIn the `GeoModel` we first create an instance of AgentCreator, where we provide the Agent class (State) and its required arguments, except shape and unique_id. We then use the `.from_GeoJSON` function to create our agents from the shapes in the GeoJSON file. We provide the feature \"name\" as the key from which the agents get their unique_ids.\nFinally, we add the agents to the GeoSpace\n\nLet's instantiate our model and look at one of the agents:\n\n```python\nm = GeoModel()\n\nagent = m.grid.agents[0]\nprint(agent.unique_id)\nagent.shape\n```\n\nIf you work in the Jupyter Notebook your output should give you the name of the state and a visual representation of the shape.\n\n    Arizona\n\n!['Arizona state borders'](output_3_1.svg)\n\nBy default the AgentCreator also sets further agent attributes from the Feature properties.\n\n```python\nagent.CENSUSAREA\n```\n\n    113594.084\n\nLet's start to do some spatial analysis. We can use usual Mesa function names to get neighboring states\n\n```python\nneighbors = m.grid.get_neighbors(agent)\nprint([a.unique_id for a in neighbors])\n```\n\n    California\n    Colorado\n    New Mexico\n    Utah\n    Nevada\n\nTo get a list of all states within a certain distance you can use the following\n\n```python\n[a.unique_id for a in m.grid.get_neighbors_within_distance(agent, 600000)]\n```\n\n    ['California',\n    'Colorado',\n    'New Mexico',\n    'Oklahoma',\n    'Wyoming',\n    'Idaho',\n    'Utah',\n    'Nevada']\n\nThe unit for the distance depends on the coordinate reference system (CRS) of the GeoSpace. Since we did not specify the CRS, mesa-geo defaults to the 'Web Mercator' projection (in meters). If you want to do some serious measurements you should always set an appropriate CRS, since the accuracy of Web Mercator declines with distance from the equator.  We can achieve this by initializing the AgentCreator and the GeoSpace with the `crs` keyword  `crs={\"init\": \"epsg:2163\"}`. Mesa-geo then transforms all coordinates from the GeoJSON geographic coordinates into the set crs.\n\n## Going further\n\nTo get a deeper understanding of mesa-geo you should checkout the GeoSchelling example. It implements a Leaflet visualization which is similar to use as the CanvasGridVisualization of Mesa.\n\nTo add further functionality, I need feedback on which functionality is desired by users. Please post a message [here](https://groups.google.com/forum/#!topic/projectmesa-dev/qEf2XBFZYnI) or open an issue if you have any ideas or recommendations.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/corvince/mesa-geo", "keywords": "agent based modeling model ABM simulation multi-agent", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "mesa-geo", "package_url": "https://pypi.org/project/mesa-geo/", "platform": "", "project_url": "https://pypi.org/project/mesa-geo/", "project_urls": {"Homepage": "https://github.com/corvince/mesa-geo"}, "release_url": "https://pypi.org/project/mesa-geo/0.1.2/", "requires_dist": ["mesa (>=0.8.6)", "geopandas", "libpysal", "rtree"], "requires_python": "", "summary": "Agent-based modeling (ABM) in Python 3+", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mesa-geo - a GIS extension to Mesa Agent-Based Modeling</h1>\n<p>mesa-geo implements a <code>GeoSpace</code> that can host GIS-based <code>GeoAgents</code>, which are like normal Agents, except they have a <code>shape</code> attribute that is a <a href=\"https://shapely.readthedocs.io/en/latest/manual.html\" rel=\"nofollow\">Shapely object</a>. You can use <code>Shapely</code> directly to create arbitrary shapes, but in most cases you will want to import your shapes from a file. Mesa-geo allows you to create GeoAgents from any vector data file (e.g. shapefiles), valid GeoJSON objects or a GeoPandas GeoDataFrame.</p>\n<p>This is the first release of mesa-geo. No functionality guaranteed, bugs included.</p>\n<h2>Installation</h2>\n<p>To install mesa-geo on linux or macOS run</p>\n<pre>pip install mesa-geo\n</pre>\n<p>On windows you should first use Anaconda to install some of the requirements with</p>\n<pre>conda install fiona pyproj rtree shapely\npip install mesa-geo\n</pre>\n<p>Since mesa-geo is in early development you could also install the latest version directly from Github via</p>\n<pre>pip install -e git+https://github.com/corvince/mesa-geo.git#egg<span class=\"o\">=</span>mesa-geo\n</pre>\n<h2>Getting started</h2>\n<p>You should be familiar with how <a href=\"https://github.com/projectmesa/mesa\" rel=\"nofollow\">mesa</a> works.</p>\n<p>So let's get started with some shapes! We will work with <a href=\"http://eric.clst.org/Stuff/USGeoJSON\" rel=\"nofollow\">records of US states</a>. We use the <code>requests</code> library to retrieve the data, but of course you can work with local data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mesa_geo</span> <span class=\"kn\">import</span> <span class=\"n\">GeoSpace</span><span class=\"p\">,</span> <span class=\"n\">GeoAgent</span><span class=\"p\">,</span> <span class=\"n\">AgentCreator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mesa</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://eric.clst.org/assets/wiki/uploads/Stuff/gz_2010_us_040_00_20m.json'</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"n\">geojson_states</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<p>First we create a <code>State</code> Agent and a <code>GeoModel</code>. Both should look familiar if you have worked with mesa before.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">State</span><span class=\"p\">(</span><span class=\"n\">GeoAgent</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">unique_id</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">unique_id</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">GeoModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"n\">GeoSpace</span><span class=\"p\">()</span>\n\n        <span class=\"n\">state_agent_kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">AC</span> <span class=\"o\">=</span> <span class=\"n\">AgentCreator</span><span class=\"p\">(</span><span class=\"n\">agent_class</span><span class=\"o\">=</span><span class=\"n\">State</span><span class=\"p\">,</span> <span class=\"n\">agent_kwargs</span><span class=\"o\">=</span><span class=\"n\">state_agent_kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">agents</span> <span class=\"o\">=</span> <span class=\"n\">AC</span><span class=\"o\">.</span><span class=\"n\">from_GeoJSON</span><span class=\"p\">(</span><span class=\"n\">GeoJSON</span><span class=\"o\">=</span><span class=\"n\">geojson_states</span><span class=\"p\">,</span> <span class=\"n\">unique_id</span><span class=\"o\">=</span><span class=\"s2\">\"NAME\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">add_agents</span><span class=\"p\">(</span><span class=\"n\">agents</span><span class=\"p\">)</span>\n</pre>\n<p>In the <code>GeoModel</code> we first create an instance of AgentCreator, where we provide the Agent class (State) and its required arguments, except shape and unique_id. We then use the <code>.from_GeoJSON</code> function to create our agents from the shapes in the GeoJSON file. We provide the feature \"name\" as the key from which the agents get their unique_ids.\nFinally, we add the agents to the GeoSpace</p>\n<p>Let's instantiate our model and look at one of the agents:</p>\n<pre><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">GeoModel</span><span class=\"p\">()</span>\n\n<span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">agents</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">unique_id</span><span class=\"p\">)</span>\n<span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n</pre>\n<p>If you work in the Jupyter Notebook your output should give you the name of the state and a visual representation of the shape.</p>\n<pre><code>Arizona\n</code></pre>\n<p><img alt=\"'Arizona state borders'\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d68a6a26ab165be39e7ee4f9a116f7df694de38/6f75747075745f335f312e737667\"></p>\n<p>By default the AgentCreator also sets further agent attributes from the Feature properties.</p>\n<pre><span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">CENSUSAREA</span>\n</pre>\n<pre><code>113594.084\n</code></pre>\n<p>Let's start to do some spatial analysis. We can use usual Mesa function names to get neighboring states</p>\n<pre><span class=\"n\">neighbors</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">get_neighbors</span><span class=\"p\">(</span><span class=\"n\">agent</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">unique_id</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">neighbors</span><span class=\"p\">])</span>\n</pre>\n<pre><code>California\nColorado\nNew Mexico\nUtah\nNevada\n</code></pre>\n<p>To get a list of all states within a certain distance you can use the following</p>\n<pre><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">unique_id</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"o\">.</span><span class=\"n\">get_neighbors_within_distance</span><span class=\"p\">(</span><span class=\"n\">agent</span><span class=\"p\">,</span> <span class=\"mi\">600000</span><span class=\"p\">)]</span>\n</pre>\n<pre><code>['California',\n'Colorado',\n'New Mexico',\n'Oklahoma',\n'Wyoming',\n'Idaho',\n'Utah',\n'Nevada']\n</code></pre>\n<p>The unit for the distance depends on the coordinate reference system (CRS) of the GeoSpace. Since we did not specify the CRS, mesa-geo defaults to the 'Web Mercator' projection (in meters). If you want to do some serious measurements you should always set an appropriate CRS, since the accuracy of Web Mercator declines with distance from the equator.  We can achieve this by initializing the AgentCreator and the GeoSpace with the <code>crs</code> keyword  <code>crs={\"init\": \"epsg:2163\"}</code>. Mesa-geo then transforms all coordinates from the GeoJSON geographic coordinates into the set crs.</p>\n<h2>Going further</h2>\n<p>To get a deeper understanding of mesa-geo you should checkout the GeoSchelling example. It implements a Leaflet visualization which is similar to use as the CanvasGridVisualization of Mesa.</p>\n<p>To add further functionality, I need feedback on which functionality is desired by users. Please post a message <a href=\"https://groups.google.com/forum/#!topic/projectmesa-dev/qEf2XBFZYnI\" rel=\"nofollow\">here</a> or open an issue if you have any ideas or recommendations.</p>\n\n          </div>"}, "last_serial": 6611836, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "206a8afd4f8a5870327145726da5c8b8", "sha256": "8d32f23f52f97b2894b1f2b60f9c1b7bec1e8e7c9dd9c939498b3b4c05920277"}, "downloads": -1, "filename": "mesa_geo-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "206a8afd4f8a5870327145726da5c8b8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 548949, "upload_time": "2020-02-11T20:00:58", "upload_time_iso_8601": "2020-02-11T20:00:58.099194Z", "url": "https://files.pythonhosted.org/packages/f8/4a/620250ade5ceaf17f44fb7bda873321e9fc239c024d2ece3a27eeae89b10/mesa_geo-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f72969d7cd6e3103f30302f2d484bda5", "sha256": "0df7b79a8f4396b5ed102f26c7e5c3434ae0be69d828603f08dc753662b8fed2"}, "downloads": -1, "filename": "mesa_geo-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f72969d7cd6e3103f30302f2d484bda5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 548424, "upload_time": "2018-10-11T08:13:34", "upload_time_iso_8601": "2018-10-11T08:13:34.507100Z", "url": "https://files.pythonhosted.org/packages/7e/7c/cd52cb427c322410f6cc990527bee025591c1ddc785e20cd16d97394246b/mesa_geo-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "116ec97a44b9d6591dba7892a28e33c8", "sha256": "e3b2c1d027325c0cd7125e8ac6a93f9dd6c8d916ce2f921fbc773ff97da229ff"}, "downloads": -1, "filename": "mesa-geo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "116ec97a44b9d6591dba7892a28e33c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11069, "upload_time": "2018-10-11T08:13:36", "upload_time_iso_8601": "2018-10-11T08:13:36.306433Z", "url": "https://files.pythonhosted.org/packages/c7/a3/6ded14f5b8bb1ac74af6b3beb0c0b7b07ab16733aef20423671a6e6111b6/mesa-geo-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9fbe79a3f9bcd44637c73d54e5a8b349", "sha256": "a6021c790d82a172b514e39842c2bf50e54715ba1cce6bf1b4092ce8dc2e3e6e"}, "downloads": -1, "filename": "mesa_geo-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9fbe79a3f9bcd44637c73d54e5a8b349", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 548946, "upload_time": "2020-02-11T20:01:55", "upload_time_iso_8601": "2020-02-11T20:01:55.096747Z", "url": "https://files.pythonhosted.org/packages/36/17/0162e9ce507db08251fb4866baeaf8cf86e20bfd228fec8f64c7184b8871/mesa_geo-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "378d6597ac643da3a56fcde5b8089fdc", "sha256": "1ffea2bd275f4b869c3903da1103b9dcccbb2059668032463a0ea58d4e8fd52a"}, "downloads": -1, "filename": "mesa_geo-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "378d6597ac643da3a56fcde5b8089fdc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 551229, "upload_time": "2020-02-11T20:11:22", "upload_time_iso_8601": "2020-02-11T20:11:22.399351Z", "url": "https://files.pythonhosted.org/packages/01/69/6e52a3e4094a3b5b11062729c2c2f0dfeab24e394eb4504f491c41803601/mesa_geo-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc73cdfcd4faa0f02b5d81e1b577ee72", "sha256": "ce4cc1d81f6f7d665043b5b9cdfc136634a43201a606bb3316e2fafa0acead81"}, "downloads": -1, "filename": "mesa-geo-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bc73cdfcd4faa0f02b5d81e1b577ee72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10991, "upload_time": "2020-02-11T20:11:24", "upload_time_iso_8601": "2020-02-11T20:11:24.266641Z", "url": "https://files.pythonhosted.org/packages/82/b7/d9120363dfdedd739e7d86905edd39d0f79a44ef81c0ec59b490f467d12e/mesa-geo-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "378d6597ac643da3a56fcde5b8089fdc", "sha256": "1ffea2bd275f4b869c3903da1103b9dcccbb2059668032463a0ea58d4e8fd52a"}, "downloads": -1, "filename": "mesa_geo-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "378d6597ac643da3a56fcde5b8089fdc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 551229, "upload_time": "2020-02-11T20:11:22", "upload_time_iso_8601": "2020-02-11T20:11:22.399351Z", "url": "https://files.pythonhosted.org/packages/01/69/6e52a3e4094a3b5b11062729c2c2f0dfeab24e394eb4504f491c41803601/mesa_geo-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc73cdfcd4faa0f02b5d81e1b577ee72", "sha256": "ce4cc1d81f6f7d665043b5b9cdfc136634a43201a606bb3316e2fafa0acead81"}, "downloads": -1, "filename": "mesa-geo-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bc73cdfcd4faa0f02b5d81e1b577ee72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10991, "upload_time": "2020-02-11T20:11:24", "upload_time_iso_8601": "2020-02-11T20:11:24.266641Z", "url": "https://files.pythonhosted.org/packages/82/b7/d9120363dfdedd739e7d86905edd39d0f79a44ef81c0ec59b490f467d12e/mesa-geo-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:06 2020"}