{"info": {"author": "Zuliang Han", "author_email": "1461790569@qq.com", "bugtrack_url": null, "classifiers": [], "description": "        \r\r\n        \r\r\n        2. Input parameter description:\r\r\n        import tensorflow as tf\r\r\n        import PDESolverByDeepLearning.hanzuliang as PDESolver\r\r\n        \r\r\n        def PDESolver(domain, n, realSolution, StructureOfNeuralNetwork, ImplicitSchemeOfEquation,\r\r\n                      DirichletBCPoint, DirichletBCValue, numBatches):\r\r\n            '''\r\r\n            :param domain: The domain of the definition of the equation.\r\r\n            :param n: Discretize the domain into n grid points.\r\r\n            :param realSolution: The true solution of the equation. If we do not know the true solution, please input the parameter as 'None'.\r\r\n            :param StructureOfNeuralNetwork = [n1,...,ni,...,no]:\r\r\n                    Number of layers of neural network is len(StructureOfNeuralNetwork)\r\r\n                    n1: Number of neurons in input layer, whose value is equal to the number of variables in the equation\r\r\n                    ni: The number of neurons in the ith hidden layer, whose value is selected according to the\r\r\n                        complexity and oscillation of the equation.\r\r\n                    no: The number of neurons in the output layer must be 1.\r\r\n            :param ImplicitSchemeOfEquation: Implicit scheme of differential equation.\r\r\n            :param DirichletBCPoint = [x1,x2,x3,...,xn]\r\r\n            :param DirichletBCValue = [u1,u2,u3,...,un]\r\r\n            :param numBatches: Number of training iterations.\r\r\n            :return y_output: The numerical solution predicted by Deep Learning is returned in the form of row vector.\r\r\n            '''\r\r\n         \r\r\n        \r\r\n        3. Case: \r\r\n        Case1.   First order differential equation\r\r\n                     real solution: u(x)= 5*x**3 + x**2 + 2*x + 1\r\r\n                     u'(x) = 15*x**2 + 2*x + 2;   u(-1) = -5;   x\u00a1\u00ca[-1,1]\r\r\n        \r\r\n        #Code of Case1\r\r\n        import tensorflow as tf\r\r\n        import PDESolverByDeepLearning.hanzuliang as PDESolver\r\r\n        \r\r\n        domain = [-1, 1]                                                                                  \t                 #Domain\r\r\n        realSolution = lambda x: 5*x**3 + x**2 + 2*x + 1                                   \t\t  #Real solution\r\r\n        #If we do not know the true solution, please input the parameter as 'None'.\r\r\n        #realSolution = None\r\r\n        n = 100                                                                             \t\t     \t\t  #Divide the domain into n sample points\r\r\n        #If there is an exception of 'Fail rename;Input/output error',please delete the last saved model parameter file 'CKPT' and train again.\r\r\n        StructureOfNeuralNetwork = [1, 10, 1]                                                   \t\t  #Neural network structure\r\r\n        ImplicitSchemeOfEquation = lambda x, u: tf.gradients(u, x)[0] - 15*x**2 - 2*x - 2   #It must be the implicit scheme of the equation\r\r\n        DirichletBCPoint = [-1]                                                         \t    \t\t  #Dirichlet boundary conditions\r\r\n        DirichletBCValue = [-5]\t\r\r\n        numBatches = 30000                                                                \t    \t\t  #Number of iterations\r\r\n        y_output = PDESolver.PDESolver(domain, n, realSolution, StructureOfNeuralNetwork,\r\r\n                                       ImplicitSchemeOfEquation, DirichletBCPoint, DirichletBCValue, numBatches)\r\r\n        print('The discrete solution predicted by Deep Learning is:')\r\r\n        print(y_output)\r\r\n        print(y_output[0])\r\r\n        \r\r\n        \r\r\n        Case2.     Second order differential equation\r\r\n        \treal solution: u(x)=x**5\r\r\n        \tu''(x)=20*x**3; u(-1)=-1; u(1)=1; x\u00a1\u00ca[-1,1]\r\r\n        \r\r\n        #Code of Case2\r\r\n        import tensorflow as tf\r\r\n        import PDESolverByDeepLearning.hanzuliang as PDESolver\r\r\n        \r\r\n        domain = [-1, 1]                                                                                                               #Domain\r\r\n        realSolution = lambda x: x**5                                                                                            #Real solution\r\r\n        #If we do not know the true solution, please input the parameter as 'None'.\r\r\n        #realSolution = None\r\r\n        n = 100                                                                                                                            #Divide the domain into n sample points\r\r\n        #If there is an exception of 'Fail rename;Input/output error',please delete the last saved model parameter file 'CKPT' and train again.\r\r\n        StructureOfNeuralNetwork = [1, 10, 5, 2, 1]                                                                       #Neural network structure\r\r\n        ImplicitSchemeOfEquation = lambda x, u: tf.gradients(tf.gradients(u, x)[0], x)[0] - 20*x**3   #It must be the implicit scheme of the equation\r\r\n        DirichletBCPoint = [-1, 1]\r\r\n        DirichletBCValue = [-1, 1]\r\r\n        numBatches = 1000                                                                             \t\t  #Number of iterations\r\r\n        y_output = PDESolver.PDESolver(domain, n, realSolution, StructureOfNeuralNetwork,\r\r\n                                       ImplicitSchemeOfEquation, DirichletBCPoint, DirichletBCValue, numBatches)\r\r\n        print('The discrete solution predicted by Deep Learning is:')\r\r\n        print(y_output)\r\r\n        \r\r\n        \r\r\n        Case3.\tThird order differential equation\r\r\n        \treal solution: u(x)=x**7 + 2*x**5 + 3*x**3 + x**2\r\r\n        \tu'''(x) = 210*x**4 + 120*x**2 + 18; u(-1)=-5; u(0)=0; u(1)=7; x\u00a1\u00ca[-1,1]\r\r\n        \r\r\n        #Code of Case3\r\r\n        import tensorflow as tf\r\r\n        import PDESolverByDeepLearning.hanzuliang as PDESolver\r\r\n        \r\r\n        domain = [-1, 1]                                                                                   \t\t#Domain\r\r\n        realSolution = lambda x: x**7 + 2*x**5 + 3*x**3 + x**2                         \t\t#Real solution\r\r\n        #If we do not know the true solution, please input the parameter as 'None'.\r\r\n        #realSolution = None\r\r\n        n = 100                                                                                               \t\t#Divide the domain into n sample points\r\r\n        #If there is an exception of 'Fail rename;Input/output error',please delete the last saved model parameter file 'CKPT' and train again.\r\r\n        StructureOfNeuralNetwork = [1, 50, 30, 10, 1]                                       \t\t#Neural network structure\r\r\n        ImplicitSchemeOfEquation = lambda x, u: tf.gradients(tf.gradients(tf.gradients(u, x)[0], x)[0], x)[0]  - 210*x**4 - 120*x**2 - 18\r\r\n        DirichletBCPoint = [-1, 0, 1]\r\r\n        DirichletBCValue = [-5, 0, 7]\r\r\n        numBatches = 5000                                                                             \t\t#Number of iterations\r\r\n        y_output = PDESolver.PDESolver(domain, n, realSolution, StructureOfNeuralNetwork,\r\r\n                                       ImplicitSchemeOfEquation, DirichletBCPoint, DirichletBCValue, numBatches)\r\r\n        print('The discrete solution predicted by Deep Learning is:')\r\r\n        print(y_output)\r\r\n        \r\nKeywords: Deep Learning,Machine Learning,Neural Networks,Scientific computing,Differential equations,PDE solver\r\nPlatform: UNKNOWN\r\nClassifier: License :: OSI Approved :: MIT License\r\nClassifier: Programming Language :: Python\r\nClassifier: Intended Audience :: Developers\r\nClassifier: Operating System :: OS Independent\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Hanzuliang/PDESolverByDeepLearning2.1.2", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PDESolverByDeepLearning", "package_url": "https://pypi.org/project/PDESolverByDeepLearning/", "platform": "", "project_url": "https://pypi.org/project/PDESolverByDeepLearning/", "project_urls": {"Homepage": "https://github.com/Hanzuliang/PDESolverByDeepLearning2.1.2"}, "release_url": "https://pypi.org/project/PDESolverByDeepLearning/2.1.3/", "requires_dist": null, "requires_python": "", "summary": "This package is suitable for solving the problem of one-dimensional n-order differential equation with Dirichlet boundary conditions.", "version": "2.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n<ol>\n<li>Input parameter description:</li>\n</ol>\n<p>import tensorflow as tf</p>\n<p>import PDESolverByDeepLearning.hanzuliang as PDESolver</p>\n<p>def PDESolver(domain, n, realSolution, StructureOfNeuralNetwork, ImplicitSchemeOfEquation,</p>\n<blockquote>\n<blockquote>\nDirichletBCPoint, DirichletBCValue, numBatches):</blockquote>\n<p>\u2018\u2019\u2019</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param domain:</th><td><p>The domain of the definition of the equation.</p>\n</td>\n</tr>\n<tr><th>param n:</th><td><p>Discretize the domain into n grid points.</p>\n</td>\n</tr>\n<tr><th>param realSolution:</th></tr>\n<tr><td>\u00a0</td><td><p>The true solution of the equation. If we do not know the true solution, please input the parameter as \u2018None\u2019.</p>\n</td>\n</tr>\n<tr><th>param StructureOfNeuralNetwork = [n1,\u2026,ni,\u2026,no]:</th></tr>\n<tr><td>\u00a0</td><td><p>Number of layers of neural network is len(StructureOfNeuralNetwork)</p>\n<p>n1: Number of neurons in input layer, whose value is equal to the number of variables in the equation</p>\n<p>ni: The number of neurons in the ith hidden layer, whose value is selected according to the</p>\n<blockquote>\n<p>complexity and oscillation of the equation.</p>\n</blockquote>\n<p>no: The number of neurons in the output layer must be 1.</p>\n</td>\n</tr>\n<tr><th>param ImplicitSchemeOfEquation:</th></tr>\n<tr><td>\u00a0</td><td><p>Implicit scheme of differential equation.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>:param DirichletBCPoint = [x1,x2,x3,\u2026,xn]</p>\n<p>:param DirichletBCValue = [u1,u2,u3,\u2026,un]</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param numBatches:</th></tr>\n<tr><td>\u00a0</td><td>Number of training iterations.</td>\n</tr>\n<tr><th>return y_output:</th></tr>\n<tr><td>\u00a0</td><td>The numerical solution predicted by Deep Learning is returned in the form of row vector.</td>\n</tr>\n</tbody>\n</table>\n<p>\u2018\u2019\u2019</p>\n</blockquote>\n<ol>\n<li>Case:</li>\n</ol>\n<p>Case1.   First order differential equation</p>\n<blockquote>\n<p>real solution: u(x)= 5*x**3 + x**2 + 2*x + 1</p>\n<p>u\u2019(x) = 15*x**2 + 2*x + 2;   u(-1) = -5;   x\u00a1\u00ca[-1,1]</p>\n</blockquote>\n<p>#Code of Case1</p>\n<p>import tensorflow as tf</p>\n<p>import PDESolverByDeepLearning.hanzuliang as PDESolver</p>\n<p>domain = [-1, 1]                                                                                                         #Domain</p>\n<p>realSolution = lambda x: 5*x**3 + x**2 + 2*x + 1                                                  #Real solution</p>\n<p>#If we do not know the true solution, please input the parameter as \u2018None\u2019.</p>\n<p>#realSolution = None</p>\n<p>n = 100                                                                                                           #Divide the domain into n sample points</p>\n<p>#If there is an exception of \u2018Fail rename;Input/output error\u2019,please delete the last saved model parameter file \u2018CKPT\u2019 and train again.</p>\n<p>StructureOfNeuralNetwork = [1, 10, 1]                                                                     #Neural network structure</p>\n<p>ImplicitSchemeOfEquation = lambda x, u: tf.gradients(u, x)[0] - 15*x**2 - 2*x - 2   #It must be the implicit scheme of the equation</p>\n<p>DirichletBCPoint = [-1]                                                                                   #Dirichlet boundary conditions</p>\n<p>DirichletBCValue = [-5]</p>\n<p>numBatches = 30000                                                                                        #Number of iterations</p>\n<p>y_output = PDESolver.PDESolver(domain, n, realSolution, StructureOfNeuralNetwork,</p>\n<blockquote>\nImplicitSchemeOfEquation, DirichletBCPoint, DirichletBCValue, numBatches)</blockquote>\n<p>print(\u2018The discrete solution predicted by Deep Learning is:\u2019)</p>\n<p>print(y_output)</p>\n<p>print(y_output[0])</p>\n<p>Case2.     Second order differential equation</p>\n<blockquote>\n<p>real solution: u(x)=x**5</p>\n<p>u\u2019\u2019(x)=20*x**3; u(-1)=-1; u(1)=1; x\u00a1\u00ca[-1,1]</p>\n</blockquote>\n<p>#Code of Case2</p>\n<p>import tensorflow as tf</p>\n<p>import PDESolverByDeepLearning.hanzuliang as PDESolver</p>\n<p>domain = [-1, 1]                                                                                                               #Domain</p>\n<p>realSolution = lambda x: x**5                                                                                            #Real solution</p>\n<p>#If we do not know the true solution, please input the parameter as \u2018None\u2019.</p>\n<p>#realSolution = None</p>\n<p>n = 100                                                                                                                            #Divide the domain into n sample points</p>\n<p>#If there is an exception of \u2018Fail rename;Input/output error\u2019,please delete the last saved model parameter file \u2018CKPT\u2019 and train again.</p>\n<p>StructureOfNeuralNetwork = [1, 10, 5, 2, 1]                                                                       #Neural network structure</p>\n<p>ImplicitSchemeOfEquation = lambda x, u: tf.gradients(tf.gradients(u, x)[0], x)[0] - 20*x**3   #It must be the implicit scheme of the equation</p>\n<p>DirichletBCPoint = [-1, 1]</p>\n<p>DirichletBCValue = [-1, 1]</p>\n<p>numBatches = 1000                                                                                         #Number of iterations</p>\n<p>y_output = PDESolver.PDESolver(domain, n, realSolution, StructureOfNeuralNetwork,</p>\n<blockquote>\nImplicitSchemeOfEquation, DirichletBCPoint, DirichletBCValue, numBatches)</blockquote>\n<p>print(\u2018The discrete solution predicted by Deep Learning is:\u2019)</p>\n<p>print(y_output)</p>\n<p>Case3.  Third order differential equation</p>\n<blockquote>\n<p>real solution: u(x)=x**7 + 2*x**5 + 3*x**3 + x**2</p>\n<p>u\u2019\u2019\u2019(x) = 210*x**4 + 120*x**2 + 18; u(-1)=-5; u(0)=0; u(1)=7; x\u00a1\u00ca[-1,1]</p>\n</blockquote>\n<p>#Code of Case3</p>\n<p>import tensorflow as tf</p>\n<p>import PDESolverByDeepLearning.hanzuliang as PDESolver</p>\n<p>domain = [-1, 1]                                                                                                #Domain</p>\n<p>realSolution = lambda x: x**7 + 2*x**5 + 3*x**3 + x**2                                  #Real solution</p>\n<p>#If we do not know the true solution, please input the parameter as \u2018None\u2019.</p>\n<p>#realSolution = None</p>\n<p>n = 100                                                                                                         #Divide the domain into n sample points</p>\n<p>#If there is an exception of \u2018Fail rename;Input/output error\u2019,please delete the last saved model parameter file \u2018CKPT\u2019 and train again.</p>\n<p>StructureOfNeuralNetwork = [1, 50, 30, 10, 1]                                                   #Neural network structure</p>\n<p>ImplicitSchemeOfEquation = lambda x, u: tf.gradients(tf.gradients(tf.gradients(u, x)[0], x)[0], x)[0]  - 210*x**4 - 120*x**2 - 18</p>\n<p>DirichletBCPoint = [-1, 0, 1]</p>\n<p>DirichletBCValue = [-5, 0, 7]</p>\n<p>numBatches = 5000                                                                                       #Number of iterations</p>\n<p>y_output = PDESolver.PDESolver(domain, n, realSolution, StructureOfNeuralNetwork,</p>\n<blockquote>\nImplicitSchemeOfEquation, DirichletBCPoint, DirichletBCValue, numBatches)</blockquote>\n<p>print(\u2018The discrete solution predicted by Deep Learning is:\u2019)</p>\n<p>print(y_output)</p>\n</blockquote>\n<p>Keywords: Deep Learning,Machine Learning,Neural Networks,Scientific computing,Differential equations,PDE solver\nPlatform: UNKNOWN\nClassifier: License :: OSI Approved :: MIT License\nClassifier: Programming Language :: Python\nClassifier: Intended Audience :: Developers\nClassifier: Operating System :: OS Independent</p>\n\n          </div>"}, "last_serial": 7108317, "releases": {"2.1.3": [{"comment_text": "", "digests": {"md5": "a404af99339678bffd25b9f7df01693e", "sha256": "8322e98f5013bd92112d024f7b57ea3fc438bbe62c2495cdc7535970dce4aef2"}, "downloads": -1, "filename": "PDESolverByDeepLearning-2.1.3.tar.gz", "has_sig": false, "md5_digest": "a404af99339678bffd25b9f7df01693e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6937, "upload_time": "2020-04-27T03:05:44", "upload_time_iso_8601": "2020-04-27T03:05:44.704599Z", "url": "https://files.pythonhosted.org/packages/ff/9c/0196033b81ef9012eb84265b20d8404b12498c42afcafe9c649386dbb1d6/PDESolverByDeepLearning-2.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a404af99339678bffd25b9f7df01693e", "sha256": "8322e98f5013bd92112d024f7b57ea3fc438bbe62c2495cdc7535970dce4aef2"}, "downloads": -1, "filename": "PDESolverByDeepLearning-2.1.3.tar.gz", "has_sig": false, "md5_digest": "a404af99339678bffd25b9f7df01693e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6937, "upload_time": "2020-04-27T03:05:44", "upload_time_iso_8601": "2020-04-27T03:05:44.704599Z", "url": "https://files.pythonhosted.org/packages/ff/9c/0196033b81ef9012eb84265b20d8404b12498c42afcafe9c649386dbb1d6/PDESolverByDeepLearning-2.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:17 2020"}