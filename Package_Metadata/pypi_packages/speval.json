{"info": {"author": "Dmitrii Torbunov", "author_email": "torbu001@umn.edu", "bugtrack_url": null, "classifiers": [], "description": "speval\n======\nSimple Parallel Function Evaluator for python.\n\n``speval`` is a python package that allows one to easily parallelize multiple\nevaluations of some time consuming function. ``speval`` is designed to have\nno extra dependencies and be extra simple to use.\n\n\nUsage\n=====\nLet say we have a long running function ``eval_me`` and we would like to\nevaluate it 100 times, each time with different parameters. And, moreover\nperform these evaluations in parallel. We can easily achieve this with a\nsimple python script of the form:\n\n.. code-block:: python\n\n   from speval import speval\n\n   list_of_args = [\n      args_for_eval1,\n      args_for_eval2,\n      ...\n      args_for_eval100,\n   ]\n\n   speval(eval_me, list_of_args, db_name)\n\nNow, we can run one instance of this script and it will start evaluating\nfunction ``eval_me`` for each point of ``list_of_args``. To parallelize\nevaluations we just need to run another ``N`` instances of this script, and\nthey are going to distribute evaluations of ``eval_me`` among them, using\nsqlite3 database ``db_name`` for synchronization.\n\nOnce all evaluations are complete we can use function ``load_evals`` to\nretrieve results(if any) of each evaluation from the database ``db_name``.\n\n\nMotivation\n==========\n``speval`` was written because the author needed a simple hyperparameter\noptimization package without heavy dependencies(like ``mongodb``), or need to\nproperly set up workers on multiple machines.\n\n\nRequirements\n============\n``python-3`` built with sqlite3 support(enabled by default)\n\n\nExamples\n========\n\nA number of examples is stored in the ``examples`` subdirectory. Here is a\nbrief overview of them.\n\n01. Hello World\n---------------\nLet's start with a primitive function to evaluate\n\n.. code-block:: python\n\n   import time\n\n   def func(arg):\n       print(\"Hello world: %d\" % (arg))\n       time.sleep(2)\n\nSay we want to evaluate function ``func`` 100 times using evaluation index as\nan argument to ``func``. To perform this we first need to define a list with\narguments for each evaluation\n\n.. code-block:: python\n\n   eval_space = list(range(100))\n\nAnd then call ``speval``\n\n.. code-block:: python\n\n   from speval import speval\n\n   speval(func, eval_space, \"/tmp/01_hello_world.db\", timeout = 60)\n\nHere we see that ``speval`` takes function to evaluate ``func`` as a first\nargument, list with arguments for each evaluation ``eval_space`` as a second\nargument. We also pass there a sqlite database file name\n(``\"/tmp/01_hello_world.db\"``) which will be used for coordination between\ndifferent processes. And a ``timeout`` parameter which tells ``speval`` that a\ngiven evaluation of function ``func`` has failed if it was not completed in 60\nseconds and therefore needs to be restarted.\n\nDone. Now we can run the resulting script(e.g. ``examples/01_hello_world.py``)\nas many times in parallel as many jobs we want to allocate for the task of\nprinting \"Hello world\".\n\nFor example, on a unix system one may run in a terminal\n\n.. code-block:: console\n\n   $ python examples/01_hello_world.py\n   Hello world: 0\n   Hello world: 1\n   Hello world: 2\n   Hello world: 3\n   Hello world: 4\n   ...\n\nSo, it will print ``\"Hello world: N\"`` each 2 seconds, and without further\nintervention will finish in about 200 seconds. To parallelize printing\nwe can run another say 20 jobs in a separate terminal. E.g.\n\n.. code-block:: console\n\n   $ for i in {1..20}; do (python examples/01_hello_world.py &) ; done\n\nNow, all pending hello worlds will be printed in just about 10 seconds.\n\n\n02. Storing/Retrieving Function Results\n---------------------------------------\n\nIn ``examples`` directory there are 2 scripts ``02_store_results.py`` and\n``02_retrieve_results.py``. First script is just a modification of the hello\nworld example, where function ``func`` also returns a value, which is\nautomatically stored in the database. Second script there is used to\ndemonstrate how to retrieve saved results from the database.\n\n\n03. Using speval for Hyperparameter Optimization\n------------------------------------------------\n\nFinally, there are another 2 examples ``03_fit_line.py`` and\n``03_get_best_fit.py``, which demonstrate how to use ``speval`` for\nhyperparameter optimization over a predefined search space(grid search or\nrandomized search). Here the first script evaluates objective function on each\npoint of the search space. This script can be run on the multiple machines in\nparallel, provided they all have access to a shared mount on which a sqlite3\ndatabase resides.\n\nThe second script is can be used to find optimal values of hyperparameters from\nthe results of these evaluations stored in the database.\n\n\nLimitations\n===========\n\n``speval`` uses sqlite3 internal advisory file locking mechanism to prevent\nrace conditions. This mechanism is known not to work properly for some network\nfilesystem `setups`__. So be advised if your database is on NFS mount.\n\nAdditionally, ``speval`` relies on json format to serialize parameters. So,\nyou need to make sure that ``eval_space`` and results returned by the\n``eval_func`` are json serializable objects.\n\n.. _sqlite_locking: https://www.sqlite.org/lockingv3.html#how_to_corrupt\n__ sqlite_locking_", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/usert5432/speval", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "speval", "package_url": "https://pypi.org/project/speval/", "platform": "", "project_url": "https://pypi.org/project/speval/", "project_urls": {"Homepage": "https://github.com/usert5432/speval"}, "release_url": "https://pypi.org/project/speval/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Simple Parellel Function Evaluator", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"speval\">\n<h2>speval</h2>\n<p>Simple Parallel Function Evaluator for python.</p>\n<p><tt>speval</tt> is a python package that allows one to easily parallelize multiple\nevaluations of some time consuming function. <tt>speval</tt> is designed to have\nno extra dependencies and be extra simple to use.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Let say we have a long running function <tt>eval_me</tt> and we would like to\nevaluate it 100 times, each time with different parameters. And, moreover\nperform these evaluations in parallel. We can easily achieve this with a\nsimple python script of the form:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">speval</span> <span class=\"kn\">import</span> <span class=\"n\">speval</span>\n\n<span class=\"n\">list_of_args</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"n\">args_for_eval1</span><span class=\"p\">,</span>\n   <span class=\"n\">args_for_eval2</span><span class=\"p\">,</span>\n   <span class=\"o\">...</span>\n   <span class=\"n\">args_for_eval100</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">speval</span><span class=\"p\">(</span><span class=\"n\">eval_me</span><span class=\"p\">,</span> <span class=\"n\">list_of_args</span><span class=\"p\">,</span> <span class=\"n\">db_name</span><span class=\"p\">)</span>\n</pre>\n<p>Now, we can run one instance of this script and it will start evaluating\nfunction <tt>eval_me</tt> for each point of <tt>list_of_args</tt>. To parallelize\nevaluations we just need to run another <tt>N</tt> instances of this script, and\nthey are going to distribute evaluations of <tt>eval_me</tt> among them, using\nsqlite3 database <tt>db_name</tt> for synchronization.</p>\n<p>Once all evaluations are complete we can use function <tt>load_evals</tt> to\nretrieve results(if any) of each evaluation from the database <tt>db_name</tt>.</p>\n</div>\n<div id=\"motivation\">\n<h2>Motivation</h2>\n<p><tt>speval</tt> was written because the author needed a simple hyperparameter\noptimization package without heavy dependencies(like <tt>mongodb</tt>), or need to\nproperly set up workers on multiple machines.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p><tt><span class=\"pre\">python-3</span></tt> built with sqlite3 support(enabled by default)</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>A number of examples is stored in the <tt>examples</tt> subdirectory. Here is a\nbrief overview of them.</p>\n<div id=\"hello-world\">\n<h3>01. Hello World</h3>\n<p>Let\u2019s start with a primitive function to evaluate</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello world: </span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">))</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Say we want to evaluate function <tt>func</tt> 100 times using evaluation index as\nan argument to <tt>func</tt>. To perform this we first need to define a list with\narguments for each evaluation</p>\n<pre><span class=\"n\">eval_space</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n</pre>\n<p>And then call <tt>speval</tt></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">speval</span> <span class=\"kn\">import</span> <span class=\"n\">speval</span>\n\n<span class=\"n\">speval</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">eval_space</span><span class=\"p\">,</span> <span class=\"s2\">\"/tmp/01_hello_world.db\"</span><span class=\"p\">,</span> <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n</pre>\n<p>Here we see that <tt>speval</tt> takes function to evaluate <tt>func</tt> as a first\nargument, list with arguments for each evaluation <tt>eval_space</tt> as a second\nargument. We also pass there a sqlite database file name\n(<tt>\"/tmp/01_hello_world.db\"</tt>) which will be used for coordination between\ndifferent processes. And a <tt>timeout</tt> parameter which tells <tt>speval</tt> that a\ngiven evaluation of function <tt>func</tt> has failed if it was not completed in 60\nseconds and therefore needs to be restarted.</p>\n<p>Done. Now we can run the resulting script(e.g. <tt>examples/01_hello_world.py</tt>)\nas many times in parallel as many jobs we want to allocate for the task of\nprinting \u201cHello world\u201d.</p>\n<p>For example, on a unix system one may run in a terminal</p>\n<pre><span class=\"gp\">$</span> python examples/01_hello_world.py\n<span class=\"go\">Hello world: 0\nHello world: 1\nHello world: 2\nHello world: 3\nHello world: 4\n...</span>\n</pre>\n<p>So, it will print <tt>\"Hello world: N\"</tt> each 2 seconds, and without further\nintervention will finish in about 200 seconds. To parallelize printing\nwe can run another say 20 jobs in a separate terminal. E.g.</p>\n<pre><span class=\"gp\">$</span> <span class=\"k\">for</span> i in <span class=\"o\">{</span><span class=\"m\">1</span>..20<span class=\"o\">}</span><span class=\"p\">;</span> <span class=\"k\">do</span> <span class=\"o\">(</span>python examples/01_hello_world.py <span class=\"p\">&amp;</span><span class=\"o\">)</span> <span class=\"p\">;</span> <span class=\"k\">done</span>\n</pre>\n<p>Now, all pending hello worlds will be printed in just about 10 seconds.</p>\n</div>\n<div id=\"storing-retrieving-function-results\">\n<h3>02. Storing/Retrieving Function Results</h3>\n<p>In <tt>examples</tt> directory there are 2 scripts <tt>02_store_results.py</tt> and\n<tt>02_retrieve_results.py</tt>. First script is just a modification of the hello\nworld example, where function <tt>func</tt> also returns a value, which is\nautomatically stored in the database. Second script there is used to\ndemonstrate how to retrieve saved results from the database.</p>\n</div>\n<div id=\"using-speval-for-hyperparameter-optimization\">\n<h3>03. Using speval for Hyperparameter Optimization</h3>\n<p>Finally, there are another 2 examples <tt>03_fit_line.py</tt> and\n<tt>03_get_best_fit.py</tt>, which demonstrate how to use <tt>speval</tt> for\nhyperparameter optimization over a predefined search space(grid search or\nrandomized search). Here the first script evaluates objective function on each\npoint of the search space. This script can be run on the multiple machines in\nparallel, provided they all have access to a shared mount on which a sqlite3\ndatabase resides.</p>\n<p>The second script is can be used to find optimal values of hyperparameters from\nthe results of these evaluations stored in the database.</p>\n</div>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p><tt>speval</tt> uses sqlite3 internal advisory file locking mechanism to prevent\nrace conditions. This mechanism is known not to work properly for some network\nfilesystem <a href=\"https://www.sqlite.org/lockingv3.html#how_to_corrupt\" rel=\"nofollow\">setups</a>. So be advised if your database is on NFS mount.</p>\n<p>Additionally, <tt>speval</tt> relies on json format to serialize parameters. So,\nyou need to make sure that <tt>eval_space</tt> and results returned by the\n<tt>eval_func</tt> are json serializable objects.</p>\n</div>\n\n          </div>"}, "last_serial": 4936588, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "fa9fe8b11f55510ad217b17caeda0dc1", "sha256": "a2a870f2d9ba28aa2b533f57fbc851f556057002fda3ab5bc49943fa1dd81807"}, "downloads": -1, "filename": "speval-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fa9fe8b11f55510ad217b17caeda0dc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8101, "upload_time": "2019-03-13T21:35:58", "upload_time_iso_8601": "2019-03-13T21:35:58.209244Z", "url": "https://files.pythonhosted.org/packages/50/e5/224813209bebded7f52dfe31b91b071d03132da7f80b979889fa43fe2cb5/speval-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa9fe8b11f55510ad217b17caeda0dc1", "sha256": "a2a870f2d9ba28aa2b533f57fbc851f556057002fda3ab5bc49943fa1dd81807"}, "downloads": -1, "filename": "speval-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fa9fe8b11f55510ad217b17caeda0dc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8101, "upload_time": "2019-03-13T21:35:58", "upload_time_iso_8601": "2019-03-13T21:35:58.209244Z", "url": "https://files.pythonhosted.org/packages/50/e5/224813209bebded7f52dfe31b91b071d03132da7f80b979889fa43fe2cb5/speval-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:30 2020"}