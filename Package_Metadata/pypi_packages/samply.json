{"info": {"author": "Dan Maljovec", "author_email": "maljovec002@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: C++", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics"], "description": "A Collection of Space-filling Sampling Designs for Arbitrary Dimensions.\nThe API is structured such that the top level packages represent the shape\nof the domain you are interested in:\n\n * ball - The n-dimensional solid unit ball\n * directional - The space of unit length directions in n-dimensional space.\n   You can also consider this a sampling of the boundary of the n-dimensional\n   unit ball.\n * hypercube - The n-dimensional solid unit hypercube :math:`x \\\\in [0,1]^n`.\n * subspace - Sampling a n-1-dimensional subspace orthogonal to a unit vector\n   or sampling the Grassmanian Atlas of projections from a dimension n to a\n   lower dimension m.\n * shape - a collection of (n-1)-manifold and non-manifold shapes embedded in\n   an n dimensional space. For now these must all be sampled using a uniform\n   distribution.\n\nWithin each module is a list of ways to fill the space of the samples.\nNote, that not all of the methods listed below are applicable to the modules\nlisted above. They include:\n\n * Uniform - a random, uniform distribution of points (available for ball,\n   directional, hypercube, subspace, and shape)\n * Normal - a Gaussian distribution of points (available for hypercube)\n * Multimodal - a mixture of Gaussian distributions of points (available for hypercube)\n * CVT - an approximate centroidal Voronoi tessellation of the points\n   constrained to the given space (available for hypercube and directional)\n * LHS - a Latin hypercube sampling design of points constrained to the space\n   (available for hypercube)\n *\n\nThe python CVT code is adapted from a C++ implementation provided by\nCarlos Correa. The Grassmannian sampler is adapted from code from Shusen\nLiu.", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/maljovec/samply/archive/0.0.21.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maljovec/samply", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "samply", "package_url": "https://pypi.org/project/samply/", "platform": "", "project_url": "https://pypi.org/project/samply/", "project_urls": {"Download": "https://github.com/maljovec/samply/archive/0.0.21.tar.gz", "Homepage": "https://github.com/maljovec/samply"}, "release_url": "https://pypi.org/project/samply/0.0.21/", "requires_dist": null, "requires_python": ">=2.7, <4", "summary": "A library for computing samplings in arbitrary dimensions", "version": "0.0.21", "yanked": false, "html_description": "<div class=\"project-description\">\n            A Collection of Space-filling Sampling Designs for Arbitrary Dimensions.<br>The API is structured such that the top level packages represent the shape<br>of the domain you are interested in:<br><br> * ball - The n-dimensional solid unit ball<br> * directional - The space of unit length directions in n-dimensional space.<br>   You can also consider this a sampling of the boundary of the n-dimensional<br>   unit ball.<br> * hypercube - The n-dimensional solid unit hypercube :math:`x \\\\in [0,1]^n`.<br> * subspace - Sampling a n-1-dimensional subspace orthogonal to a unit vector<br>   or sampling the Grassmanian Atlas of projections from a dimension n to a<br>   lower dimension m.<br> * shape - a collection of (n-1)-manifold and non-manifold shapes embedded in<br>   an n dimensional space. For now these must all be sampled using a uniform<br>   distribution.<br><br>Within each module is a list of ways to fill the space of the samples.<br>Note, that not all of the methods listed below are applicable to the modules<br>listed above. They include:<br><br> * Uniform - a random, uniform distribution of points (available for ball,<br>   directional, hypercube, subspace, and shape)<br> * Normal - a Gaussian distribution of points (available for hypercube)<br> * Multimodal - a mixture of Gaussian distributions of points (available for hypercube)<br> * CVT - an approximate centroidal Voronoi tessellation of the points<br>   constrained to the given space (available for hypercube and directional)<br> * LHS - a Latin hypercube sampling design of points constrained to the space<br>   (available for hypercube)<br> *<br><br>The python CVT code is adapted from a C++ implementation provided by<br>Carlos Correa. The Grassmannian sampler is adapted from code from Shusen<br>Liu.\n          </div>"}, "last_serial": 5243656, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3b2a79f2d207109540d8c2267c0f1ef9", "sha256": "efcb9cc2d07dd3842d09c91cbda0b24c9c2e2742d6e71dc6c9fc172b123e4d66"}, "downloads": -1, "filename": "samply-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3b2a79f2d207109540d8c2267c0f1ef9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <4", "size": 6168, "upload_time": "2019-02-14T07:51:21", "upload_time_iso_8601": "2019-02-14T07:51:21.890797Z", "url": "https://files.pythonhosted.org/packages/a0/48/33f1adb529efab65803324b28530f884aa9be520bae8222ce4a8dcc2cb94/samply-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3c7493ebb00cccf5eedcc3f682714cde", "sha256": "04eaa14cd6db17cb543c116e226ccefd177d7d6211f03dc861d8ba5ae4f67ee8"}, "downloads": -1, "filename": "samply-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3c7493ebb00cccf5eedcc3f682714cde", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <4", "size": 7450, "upload_time": "2019-02-19T14:07:35", "upload_time_iso_8601": "2019-02-19T14:07:35.206073Z", "url": "https://files.pythonhosted.org/packages/d1/a6/2e7a76b99c6ef333e88e18dd5d779f096a0ae49ce4a6b0d50b32b3aa22b5/samply-0.0.2.tar.gz", "yanked": false}], "0.0.21": [{"comment_text": "", "digests": {"md5": "538e43b0287ea440506c4748367bc71e", "sha256": "6575928138bb183ba32152e2723b1d6485e73ee6477e89a770c296a3c9cd7b9c"}, "downloads": -1, "filename": "samply-0.0.21.tar.gz", "has_sig": false, "md5_digest": "538e43b0287ea440506c4748367bc71e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <4", "size": 7484, "upload_time": "2019-05-08T16:52:59", "upload_time_iso_8601": "2019-05-08T16:52:59.783161Z", "url": "https://files.pythonhosted.org/packages/3a/92/8a6ebb46befc71614e2b42121ed4fa31e0371abaa52fa1c6bf73c4e96223/samply-0.0.21.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "538e43b0287ea440506c4748367bc71e", "sha256": "6575928138bb183ba32152e2723b1d6485e73ee6477e89a770c296a3c9cd7b9c"}, "downloads": -1, "filename": "samply-0.0.21.tar.gz", "has_sig": false, "md5_digest": "538e43b0287ea440506c4748367bc71e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <4", "size": 7484, "upload_time": "2019-05-08T16:52:59", "upload_time_iso_8601": "2019-05-08T16:52:59.783161Z", "url": "https://files.pythonhosted.org/packages/3a/92/8a6ebb46befc71614e2b42121ed4fa31e0371abaa52fa1c6bf73c4e96223/samply-0.0.21.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:54 2020"}