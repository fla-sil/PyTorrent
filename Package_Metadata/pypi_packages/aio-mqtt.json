{"info": {"author": "Not Just A Toy Corp.", "author_email": "dev@notjustatoy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Communications", "Topic :: Internet"], "description": "***********\nMQTT client\n***********\n\nAbout\n#####\n\nAsynchronous MQTT client for 3.1.1 protocol version.\n\nInstallation\n############\n\nRecommended way (via pip):\n\n.. code:: bash\n\n    $ pip install aio-mqtt\n\nExample\n#######\n\nSimple echo server:\n\n.. code:: python\n\n    import asyncio as aio\n    import logging\n    import typing as ty\n\n    import aio_mqtt\n\n    logger = logging.getLogger(__name__)\n\n\n    class EchoServer:\n\n        def __init__(\n                self,\n                reconnection_interval: int = 10,\n                loop: ty.Optional[aio.AbstractEventLoop] = None\n        ) -> None:\n            self._reconnection_interval = reconnection_interval\n            self._loop = loop or aio.get_event_loop()\n            self._client = aio_mqtt.Client(loop=self._loop)\n            self._tasks = [\n                self._loop.create_task(self._connect_forever()),\n                self._loop.create_task(self._handle_messages())\n            ]\n\n        async def close(self) -> None:\n            for task in self._tasks:\n                if task.done():\n                    continue\n                task.cancel()\n                try:\n                    await task\n                except aio.CancelledError:\n                    pass\n            if self._client.is_connected():\n                await self._client.disconnect()\n\n        async def _handle_messages(self) -> None:\n            async for message in self._client.delivered_messages('in'):\n                while True:\n                    try:\n                        await self._client.publish(\n                            aio_mqtt.PublishableMessage(\n                                topic_name='out',\n                                payload=message.payload,\n                                qos=aio_mqtt.QOSLevel.QOS_1\n                            )\n                        )\n                    except aio_mqtt.ConnectionClosedError as e:\n                        logger.error(\"Connection closed\", exc_info=e)\n                        await self._client.wait_for_connect()\n                        continue\n\n                    except Exception as e:\n                        logger.error(\"Unhandled exception during echo message publishing\", exc_info=e)\n\n                    break\n\n        async def _connect_forever(self) -> None:\n            while True:\n                try:\n                    connect_result = await self._client.connect('localhost')\n                    logger.info(\"Connected\")\n\n                    await self._client.subscribe(('in', aio_mqtt.QOSLevel.QOS_1))\n\n                    logger.info(\"Wait for network interruptions...\")\n                    await connect_result.disconnect_reason\n                except aio.CancelledError:\n                    raise\n\n                except aio_mqtt.AccessRefusedError as e:\n                    logger.error(\"Access refused\", exc_info=e)\n\n                except aio_mqtt.ConnectionLostError as e:\n                    logger.error(\"Connection lost. Will retry in %d seconds\", self._reconnection_interval, exc_info=e)\n                    await aio.sleep(self._reconnection_interval, loop=self._loop)\n\n                except aio_mqtt.ConnectionCloseForcedError as e:\n                    logger.error(\"Connection close forced\", exc_info=e)\n                    return\n\n                except Exception as e:\n                    logger.error(\"Unhandled exception during connecting\", exc_info=e)\n                    return\n\n                else:\n                    logger.info(\"Disconnected\")\n                    return\n\n\n    if __name__ == '__main__':\n        logging.basicConfig(\n            level='DEBUG'\n        )\n        loop = aio.new_event_loop()\n        server = EchoServer(reconnection_interval=10, loop=loop)\n        try:\n            loop.run_forever()\n        except KeyboardInterrupt:\n            pass\n\n        finally:\n            loop.run_until_complete(server.close())\n            loop.run_until_complete(loop.shutdown_asyncgens())\n            loop.close()\n\nLicense\n#######\n\nCopyright 2019-2020 Not Just A Toy Corp.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NotJustAToy/aio-mqtt", "keywords": "mqtt asyncio", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "aio-mqtt", "package_url": "https://pypi.org/project/aio-mqtt/", "platform": "", "project_url": "https://pypi.org/project/aio-mqtt/", "project_urls": {"Homepage": "https://github.com/NotJustAToy/aio-mqtt"}, "release_url": "https://pypi.org/project/aio-mqtt/0.2.0/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "Asynchronous MQTT client for 3.1.1 protocol version.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>Asynchronous MQTT client for 3.1.1 protocol version.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Recommended way (via pip):</p>\n<pre>$ pip install aio-mqtt\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Simple echo server:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span> <span class=\"k\">as</span> <span class=\"nn\">aio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">typing</span> <span class=\"k\">as</span> <span class=\"nn\">ty</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">aio_mqtt</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">EchoServer</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">reconnection_interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n            <span class=\"n\">loop</span><span class=\"p\">:</span> <span class=\"n\">ty</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">AbstractEventLoop</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reconnection_interval</span> <span class=\"o\">=</span> <span class=\"n\">reconnection_interval</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loop</span> <span class=\"o\">=</span> <span class=\"n\">loop</span> <span class=\"ow\">or</span> <span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span> <span class=\"o\">=</span> <span class=\"n\">aio_mqtt</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loop</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_connect_forever</span><span class=\"p\">()),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_handle_messages</span><span class=\"p\">())</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tasks</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">done</span><span class=\"p\">():</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">await</span> <span class=\"n\">task</span>\n            <span class=\"k\">except</span> <span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">CancelledError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"o\">.</span><span class=\"n\">is_connected</span><span class=\"p\">():</span>\n            <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">_handle_messages</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"o\">.</span><span class=\"n\">delivered_messages</span><span class=\"p\">(</span><span class=\"s1\">'in'</span><span class=\"p\">):</span>\n            <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span>\n                        <span class=\"n\">aio_mqtt</span><span class=\"o\">.</span><span class=\"n\">PublishableMessage</span><span class=\"p\">(</span>\n                            <span class=\"n\">topic_name</span><span class=\"o\">=</span><span class=\"s1\">'out'</span><span class=\"p\">,</span>\n                            <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">,</span>\n                            <span class=\"n\">qos</span><span class=\"o\">=</span><span class=\"n\">aio_mqtt</span><span class=\"o\">.</span><span class=\"n\">QOSLevel</span><span class=\"o\">.</span><span class=\"n\">QOS_1</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"n\">aio_mqtt</span><span class=\"o\">.</span><span class=\"n\">ConnectionClosedError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Connection closed\"</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">)</span>\n                    <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"o\">.</span><span class=\"n\">wait_for_connect</span><span class=\"p\">()</span>\n                    <span class=\"k\">continue</span>\n\n                <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Unhandled exception during echo message publishing\"</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n                <span class=\"k\">break</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">_connect_forever</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">connect_result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">)</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Connected\"</span><span class=\"p\">)</span>\n\n                <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">((</span><span class=\"s1\">'in'</span><span class=\"p\">,</span> <span class=\"n\">aio_mqtt</span><span class=\"o\">.</span><span class=\"n\">QOSLevel</span><span class=\"o\">.</span><span class=\"n\">QOS_1</span><span class=\"p\">))</span>\n\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Wait for network interruptions...\"</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">connect_result</span><span class=\"o\">.</span><span class=\"n\">disconnect_reason</span>\n            <span class=\"k\">except</span> <span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">CancelledError</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span>\n\n            <span class=\"k\">except</span> <span class=\"n\">aio_mqtt</span><span class=\"o\">.</span><span class=\"n\">AccessRefusedError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Access refused\"</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n            <span class=\"k\">except</span> <span class=\"n\">aio_mqtt</span><span class=\"o\">.</span><span class=\"n\">ConnectionLostError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Connection lost. Will retry in </span><span class=\"si\">%d</span><span class=\"s2\"> seconds\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reconnection_interval</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reconnection_interval</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loop</span><span class=\"p\">)</span>\n\n            <span class=\"k\">except</span> <span class=\"n\">aio_mqtt</span><span class=\"o\">.</span><span class=\"n\">ConnectionCloseForcedError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Connection close forced\"</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span>\n\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Unhandled exception during connecting\"</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Disconnected\"</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span>\n        <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">'DEBUG'</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">EchoServer</span><span class=\"p\">(</span><span class=\"n\">reconnection_interval</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">())</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">shutdown_asyncgens</span><span class=\"p\">())</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright 2019-2020 Not Just A Toy Corp.</p>\n<p>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n<blockquote>\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></blockquote>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u201cAS IS\u201d BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n</div>\n\n          </div>"}, "last_serial": 6581296, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "be1e3f8dbc2ae7b7d4dc8790ecb7c5a2", "sha256": "6aee7f1c5b46297d610764ba6de5030896f0268bd83e61f130251e8574b782ca"}, "downloads": -1, "filename": "aio_mqtt-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "be1e3f8dbc2ae7b7d4dc8790ecb7c5a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 13485, "upload_time": "2019-12-06T06:50:06", "upload_time_iso_8601": "2019-12-06T06:50:06.743605Z", "url": "https://files.pythonhosted.org/packages/a4/27/f5daeab28dc32bc4c3c9126e404a3f72bfbdf27fb146a7366d49fed54f00/aio_mqtt-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3df9976c1679570cc16b06eee38a1068", "sha256": "41e59eefeda96f29766d59fbdf84272caad88445a027fd064cc8d1e6bb3b511b"}, "downloads": -1, "filename": "aio-mqtt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3df9976c1679570cc16b06eee38a1068", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9960, "upload_time": "2019-12-06T06:50:09", "upload_time_iso_8601": "2019-12-06T06:50:09.355945Z", "url": "https://files.pythonhosted.org/packages/dd/36/b1f50051585fc2ae8f5eee49c8cd47643a02d80abb4020049db0d561bd7e/aio-mqtt-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "30ccd3987b61c667fc0a45962a19614a", "sha256": "546a56620d962011bd0a8a8be21ddffb9175ff2c8065b5f8a30f457f53271808"}, "downloads": -1, "filename": "aio_mqtt-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "30ccd3987b61c667fc0a45962a19614a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 18254, "upload_time": "2020-02-06T11:02:00", "upload_time_iso_8601": "2020-02-06T11:02:00.609615Z", "url": "https://files.pythonhosted.org/packages/85/e9/da5262130fd605cfdcc4b7fd33468ceb432d49499a9df29622449003754d/aio_mqtt-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18b0a5b8cb4ed99c3f0b862dcac7bffa", "sha256": "c1dcce2e536cb25277b5f222cf3699a5c64cd461597545c28a7c2625d022c08d"}, "downloads": -1, "filename": "aio-mqtt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "18b0a5b8cb4ed99c3f0b862dcac7bffa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 11758, "upload_time": "2020-02-06T11:02:02", "upload_time_iso_8601": "2020-02-06T11:02:02.318497Z", "url": "https://files.pythonhosted.org/packages/0a/df/0c57d87e20ef466f58245a339627533bcbf0b40b6098ddba0342c9e70c75/aio-mqtt-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "30ccd3987b61c667fc0a45962a19614a", "sha256": "546a56620d962011bd0a8a8be21ddffb9175ff2c8065b5f8a30f457f53271808"}, "downloads": -1, "filename": "aio_mqtt-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "30ccd3987b61c667fc0a45962a19614a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 18254, "upload_time": "2020-02-06T11:02:00", "upload_time_iso_8601": "2020-02-06T11:02:00.609615Z", "url": "https://files.pythonhosted.org/packages/85/e9/da5262130fd605cfdcc4b7fd33468ceb432d49499a9df29622449003754d/aio_mqtt-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18b0a5b8cb4ed99c3f0b862dcac7bffa", "sha256": "c1dcce2e536cb25277b5f222cf3699a5c64cd461597545c28a7c2625d022c08d"}, "downloads": -1, "filename": "aio-mqtt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "18b0a5b8cb4ed99c3f0b862dcac7bffa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 11758, "upload_time": "2020-02-06T11:02:02", "upload_time_iso_8601": "2020-02-06T11:02:02.318497Z", "url": "https://files.pythonhosted.org/packages/0a/df/0c57d87e20ef466f58245a339627533bcbf0b40b6098ddba0342c9e70c75/aio-mqtt-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:03 2020"}