{"info": {"author": "Alexander Fabisch", "author_email": "afabisch@googlemail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Visualization"], "description": "[![Travis Status](https://travis-ci.org/rock-learning/pytransform3d.svg?branch=master)](https://travis-ci.org/rock-learning/pytransform3d)\n[![CircleCI Status](https://circleci.com/gh/rock-learning/pytransform3d/tree/master.svg?style=shield&circle-token=:circle-token)](https://circleci.com/gh/rock-learning/pytransform3d)\n[![Paper DOI](http://joss.theoj.org/papers/10.21105/joss.01159/status.svg)](https://doi.org/10.21105/joss.01159)\n[![Release DOI](https://zenodo.org/badge/91809394.svg)](https://zenodo.org/badge/latestdoi/91809394)\n\n# pytransform3d\n\nA Python library for transformations in three dimensions.\n\nThe library focuses on readability and debugging, not on computational\nefficiency.\nIf you want to have an efficient implementation of some function from the\nlibrary you can easily extract the relevant code and implement it more\nefficiently in a language of your choice.\n\nThe library integrates well with the\n[scientific Python ecosystem](https://www.scipy-lectures.org/)\nwith its core libraries Numpy, Scipy and Matplotlib.\nWe rely on [Numpy](https://www.numpy.org/) for linear algebra and on\n[Matplotlib](https://matplotlib.org/) to offer plotting functionalities.\n[Scipy](https://www.scipy.org/) is used if you want to automatically\ncompute new transformations from a graph of existing transformations.\n\nHeterogenous software systems that consist of proprietary and open source\nsoftware are often combined when we work with transformations.\nFor example, suppose you want to transfer a trajectory demonstrated by a human\nto a robot. The human trajectory could be measured from an RGB-D camera, fused\nwith IMU sensors that are attached to the human, and then translated to\njoint angles by inverse kinematics. That involves at least three different\nsoftware systems that might all use different conventions for transformations.\nSometimes even one software uses more than one convention.\nThe following aspects are of crucial importance to glue and debug\ntransformations in systems with heterogenous and often incompatible\nsoftware:\n* Compatibility: Compatibility between heterogenous softwares is a difficult\n  topic. It might involve, for example, communicating between proprietary and\n  open source software or different languages.\n* Conventions: Lots of different conventions are used for transformations\n  in three dimensions. These have to be determined or specified.\n* Conversions: We need conversions between these conventions to\n  communicate transformations between different systems.\n* Visualization: Finally, transformations should be visually verified\n  and that should be as easy as possible.\n\npytransform3d assists in solving these issues. Its documentation clearly\nstates all of the used conventions, it makes conversions between rotation\nand transformation conventions as easy as possible, it is tightly coupled\nwith Matplotlib to quickly visualize (or animate) transformations and it\nis written in Python with few dependencies. Python is a widely adopted\nlanguage. It is used in many domains and supports a wide spectrum of\ncommunication to other software.\n\nIn addition, pytransform3d offers...\n\n* the TransformManager which manages complex chains of transformations\n  (with export to graph visualization as PNG, additionally requires pydot)\n* the TransformEditor which allows to modify transformations graphically\n  (additionally requires PyQt4)\n* the UrdfTransformManager which is able to load transformations from\n  [URDF](http://wiki.ros.org/urdf) files (additionally requires\n  beautifulsoup4)\n\npytransform3d is used in various domains, for example:\n\n* specifying motions of a robot\n* learning robot movements from human demonstration\n* sensor fusion for human pose estimation\n\n## Installation\n\nUse pip to install the package:\n\n    [sudo] pip[3] install [--user] pytransform3d\n\nYou can install pytransform3d[all] if you want to have support for pydot\nexport. Make sure to install graphviz (on Ubuntu: `sudo apt install graphviz`)\nif you want to use this feature.\n\n... or clone the repository and go to the main folder.\n\nInstall dependencies with:\n\n    pip install -r requirements.txt\n\nInstall the package with:\n\n    python setup.py install\n\n## Documentation\n\nThe API documentation can be found\n[here](https://rock-learning.github.io/pytransform3d/).\n\nThe docmentation of this project can be found in the directory `doc`.\nTo build the documentation, run e.g. (on unix):\n\n    cd doc\n    make html\n\nThe HTML documentation is now located at `doc/build/html/index.html`.\nYou need the following packages to build the documentation:\n\n    pip install numpydoc sphinx sphinx-gallery\n\n## Example\n\nThis is just one simple example. You can find more examples in the subfolder\n`examples/`.\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pytransform3d.rotations as pr\nimport pytransform3d.transformations as pt\nfrom pytransform3d.transform_manager import TransformManager\n\n\nrandom_state = np.random.RandomState(0)\n\nee2robot = pt.transform_from_pq(\n    np.hstack((np.array([0.4, -0.3, 0.5]), pr.random_quaternion(random_state))))\ncam2robot = pt.transform_from_pq(\n    np.hstack((np.array([0.0, 0.0, 0.8]), pr.q_id)))\nobject2cam = pt.transform_from(\n    pr.matrix_from_euler_xyz(np.array([0.0, 0.0, 0.5])),\n                             np.array([0.5, 0.1, 0.1]))\n\ntm = TransformManager()\ntm.add_transform(\"end-effector\", \"robot\", ee2robot)\ntm.add_transform(\"camera\", \"robot\", cam2robot)\ntm.add_transform(\"object\", \"camera\", object2cam)\n\nee2object = tm.get_transform(\"end-effector\", \"object\")\n\nax = tm.plot_frames_in(\"robot\", s=0.1)\nax.set_xlim((-0.25, 0.75))\nax.set_ylim((-0.5, 0.5))\nax.set_zlim((0.0, 1.0))\nplt.show()\n```\n\n![output](https://rock-learning.github.io/pytransform3d/_images/plot_transform_manager.png)\n\n## Tests\n\nYou can use nosetests to run the tests of this project in the root directory:\n\n    nosetests\n\nA coverage report will be located at `cover/index.html`.\nNote that you have to install `nose` to run the tests and `coverage` to obtain\nthe code coverage report.\nThe branch coverage is currently 100% for code that is not related to the\nGUI.\n\n## Contributing\n\nIf you wish to report bugs, please use the issue tracker at Github.\nIf you would like to contribute to pytransform3d, just open an issue or\na merge request.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rock-learning/pytransform3d", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "pytransform3d", "package_url": "https://pypi.org/project/pytransform3d/", "platform": "", "project_url": "https://pypi.org/project/pytransform3d/", "project_urls": {"Homepage": "https://github.com/rock-learning/pytransform3d"}, "release_url": "https://pypi.org/project/pytransform3d/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "3D transformations for Python", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/rock-learning/pytransform3d\" rel=\"nofollow\"><img alt=\"Travis Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b0bdea6fc62a8e68ff6fe686080bd1f82f47828c/68747470733a2f2f7472617669732d63692e6f72672f726f636b2d6c6561726e696e672f70797472616e73666f726d33642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://circleci.com/gh/rock-learning/pytransform3d\" rel=\"nofollow\"><img alt=\"CircleCI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6d6238291a4e5834284315aca9b84423ace326a/68747470733a2f2f636972636c6563692e636f6d2f67682f726f636b2d6c6561726e696e672f70797472616e73666f726d33642f747265652f6d61737465722e7376673f7374796c653d736869656c6426636972636c652d746f6b656e3d3a636972636c652d746f6b656e\"></a>\n<a href=\"https://doi.org/10.21105/joss.01159\" rel=\"nofollow\"><img alt=\"Paper DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eba195c057f66d61d2880011512eb15d5220183c/687474703a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f31302e32313130352f6a6f73732e30313135392f7374617475732e737667\"></a>\n<a href=\"https://zenodo.org/badge/latestdoi/91809394\" rel=\"nofollow\"><img alt=\"Release DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e80724371b98299b956a822ce3fab2d6faf140e/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f39313830393339342e737667\"></a></p>\n<h1>pytransform3d</h1>\n<p>A Python library for transformations in three dimensions.</p>\n<p>The library focuses on readability and debugging, not on computational\nefficiency.\nIf you want to have an efficient implementation of some function from the\nlibrary you can easily extract the relevant code and implement it more\nefficiently in a language of your choice.</p>\n<p>The library integrates well with the\n<a href=\"https://www.scipy-lectures.org/\" rel=\"nofollow\">scientific Python ecosystem</a>\nwith its core libraries Numpy, Scipy and Matplotlib.\nWe rely on <a href=\"https://www.numpy.org/\" rel=\"nofollow\">Numpy</a> for linear algebra and on\n<a href=\"https://matplotlib.org/\" rel=\"nofollow\">Matplotlib</a> to offer plotting functionalities.\n<a href=\"https://www.scipy.org/\" rel=\"nofollow\">Scipy</a> is used if you want to automatically\ncompute new transformations from a graph of existing transformations.</p>\n<p>Heterogenous software systems that consist of proprietary and open source\nsoftware are often combined when we work with transformations.\nFor example, suppose you want to transfer a trajectory demonstrated by a human\nto a robot. The human trajectory could be measured from an RGB-D camera, fused\nwith IMU sensors that are attached to the human, and then translated to\njoint angles by inverse kinematics. That involves at least three different\nsoftware systems that might all use different conventions for transformations.\nSometimes even one software uses more than one convention.\nThe following aspects are of crucial importance to glue and debug\ntransformations in systems with heterogenous and often incompatible\nsoftware:</p>\n<ul>\n<li>Compatibility: Compatibility between heterogenous softwares is a difficult\ntopic. It might involve, for example, communicating between proprietary and\nopen source software or different languages.</li>\n<li>Conventions: Lots of different conventions are used for transformations\nin three dimensions. These have to be determined or specified.</li>\n<li>Conversions: We need conversions between these conventions to\ncommunicate transformations between different systems.</li>\n<li>Visualization: Finally, transformations should be visually verified\nand that should be as easy as possible.</li>\n</ul>\n<p>pytransform3d assists in solving these issues. Its documentation clearly\nstates all of the used conventions, it makes conversions between rotation\nand transformation conventions as easy as possible, it is tightly coupled\nwith Matplotlib to quickly visualize (or animate) transformations and it\nis written in Python with few dependencies. Python is a widely adopted\nlanguage. It is used in many domains and supports a wide spectrum of\ncommunication to other software.</p>\n<p>In addition, pytransform3d offers...</p>\n<ul>\n<li>the TransformManager which manages complex chains of transformations\n(with export to graph visualization as PNG, additionally requires pydot)</li>\n<li>the TransformEditor which allows to modify transformations graphically\n(additionally requires PyQt4)</li>\n<li>the UrdfTransformManager which is able to load transformations from\n<a href=\"http://wiki.ros.org/urdf\" rel=\"nofollow\">URDF</a> files (additionally requires\nbeautifulsoup4)</li>\n</ul>\n<p>pytransform3d is used in various domains, for example:</p>\n<ul>\n<li>specifying motions of a robot</li>\n<li>learning robot movements from human demonstration</li>\n<li>sensor fusion for human pose estimation</li>\n</ul>\n<h2>Installation</h2>\n<p>Use pip to install the package:</p>\n<pre><code>[sudo] pip[3] install [--user] pytransform3d\n</code></pre>\n<p>You can install pytransform3d[all] if you want to have support for pydot\nexport. Make sure to install graphviz (on Ubuntu: <code>sudo apt install graphviz</code>)\nif you want to use this feature.</p>\n<p>... or clone the repository and go to the main folder.</p>\n<p>Install dependencies with:</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<p>Install the package with:</p>\n<pre><code>python setup.py install\n</code></pre>\n<h2>Documentation</h2>\n<p>The API documentation can be found\n<a href=\"https://rock-learning.github.io/pytransform3d/\" rel=\"nofollow\">here</a>.</p>\n<p>The docmentation of this project can be found in the directory <code>doc</code>.\nTo build the documentation, run e.g. (on unix):</p>\n<pre><code>cd doc\nmake html\n</code></pre>\n<p>The HTML documentation is now located at <code>doc/build/html/index.html</code>.\nYou need the following packages to build the documentation:</p>\n<pre><code>pip install numpydoc sphinx sphinx-gallery\n</code></pre>\n<h2>Example</h2>\n<p>This is just one simple example. You can find more examples in the subfolder\n<code>examples/</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytransform3d.rotations</span> <span class=\"k\">as</span> <span class=\"nn\">pr</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytransform3d.transformations</span> <span class=\"k\">as</span> <span class=\"nn\">pt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytransform3d.transform_manager</span> <span class=\"kn\">import</span> <span class=\"n\">TransformManager</span>\n\n\n<span class=\"n\">random_state</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">RandomState</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">ee2robot</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">transform_from_pq</span><span class=\"p\">(</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]),</span> <span class=\"n\">pr</span><span class=\"o\">.</span><span class=\"n\">random_quaternion</span><span class=\"p\">(</span><span class=\"n\">random_state</span><span class=\"p\">))))</span>\n<span class=\"n\">cam2robot</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">transform_from_pq</span><span class=\"p\">(</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">hstack</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">]),</span> <span class=\"n\">pr</span><span class=\"o\">.</span><span class=\"n\">q_id</span><span class=\"p\">)))</span>\n<span class=\"n\">object2cam</span> <span class=\"o\">=</span> <span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">transform_from</span><span class=\"p\">(</span>\n    <span class=\"n\">pr</span><span class=\"o\">.</span><span class=\"n\">matrix_from_euler_xyz</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">])),</span>\n                             <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]))</span>\n\n<span class=\"n\">tm</span> <span class=\"o\">=</span> <span class=\"n\">TransformManager</span><span class=\"p\">()</span>\n<span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">add_transform</span><span class=\"p\">(</span><span class=\"s2\">\"end-effector\"</span><span class=\"p\">,</span> <span class=\"s2\">\"robot\"</span><span class=\"p\">,</span> <span class=\"n\">ee2robot</span><span class=\"p\">)</span>\n<span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">add_transform</span><span class=\"p\">(</span><span class=\"s2\">\"camera\"</span><span class=\"p\">,</span> <span class=\"s2\">\"robot\"</span><span class=\"p\">,</span> <span class=\"n\">cam2robot</span><span class=\"p\">)</span>\n<span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">add_transform</span><span class=\"p\">(</span><span class=\"s2\">\"object\"</span><span class=\"p\">,</span> <span class=\"s2\">\"camera\"</span><span class=\"p\">,</span> <span class=\"n\">object2cam</span><span class=\"p\">)</span>\n\n<span class=\"n\">ee2object</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">get_transform</span><span class=\"p\">(</span><span class=\"s2\">\"end-effector\"</span><span class=\"p\">,</span> <span class=\"s2\">\"object\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">plot_frames_in</span><span class=\"p\">(</span><span class=\"s2\">\"robot\"</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">0.75</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">))</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_zlim</span><span class=\"p\">((</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"output\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5943d3b0259fc221a2618cd65487cb5d088487b/68747470733a2f2f726f636b2d6c6561726e696e672e6769746875622e696f2f70797472616e73666f726d33642f5f696d616765732f706c6f745f7472616e73666f726d5f6d616e616765722e706e67\"></p>\n<h2>Tests</h2>\n<p>You can use nosetests to run the tests of this project in the root directory:</p>\n<pre><code>nosetests\n</code></pre>\n<p>A coverage report will be located at <code>cover/index.html</code>.\nNote that you have to install <code>nose</code> to run the tests and <code>coverage</code> to obtain\nthe code coverage report.\nThe branch coverage is currently 100% for code that is not related to the\nGUI.</p>\n<h2>Contributing</h2>\n<p>If you wish to report bugs, please use the issue tracker at Github.\nIf you would like to contribute to pytransform3d, just open an issue or\na merge request.</p>\n\n          </div>"}, "last_serial": 6080100, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "eee487074f792965fa11c0175bc43350", "sha256": "afabc6b316c13400be699bd8928dddfaad2a06280d0eec166bb730da10b5c5c3"}, "downloads": -1, "filename": "pytransform3d-1.0.tar.gz", "has_sig": false, "md5_digest": "eee487074f792965fa11c0175bc43350", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26277, "upload_time": "2018-12-07T14:49:38", "upload_time_iso_8601": "2018-12-07T14:49:38.022724Z", "url": "https://files.pythonhosted.org/packages/d6/48/d0de43cb8d5da258b4e0aadc565f76a87c5584b4868db62409f2425206c7/pytransform3d-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "d4ad0844e53d2f29c71c5de4e16d2c88", "sha256": "e6f1c719f8f1711cd10668c4cbd1b9724bc0815d1639dd244dfd129ab17175dc"}, "downloads": -1, "filename": "pytransform3d-1.1.tar.gz", "has_sig": false, "md5_digest": "d4ad0844e53d2f29c71c5de4e16d2c88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27057, "upload_time": "2019-01-29T08:16:02", "upload_time_iso_8601": "2019-01-29T08:16:02.831217Z", "url": "https://files.pythonhosted.org/packages/5b/77/6bc7a586f58e2d8d46dba3e5e33d3b4957b7c821eb55e8f49d91188c9845/pytransform3d-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "566f8162a864fb6aadebbd96bed697d7", "sha256": "f48644ebcd13a75402947606ce753478eefd1af2f988186888f5482aa5534726"}, "downloads": -1, "filename": "pytransform3d-1.1.1.tar.gz", "has_sig": false, "md5_digest": "566f8162a864fb6aadebbd96bed697d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25328, "upload_time": "2019-11-05T09:46:34", "upload_time_iso_8601": "2019-11-05T09:46:34.569442Z", "url": "https://files.pythonhosted.org/packages/db/50/3b28c11f214eb4003c02d97ab2bc1aaa9123895c2c0058107fa29449f979/pytransform3d-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "566f8162a864fb6aadebbd96bed697d7", "sha256": "f48644ebcd13a75402947606ce753478eefd1af2f988186888f5482aa5534726"}, "downloads": -1, "filename": "pytransform3d-1.1.1.tar.gz", "has_sig": false, "md5_digest": "566f8162a864fb6aadebbd96bed697d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25328, "upload_time": "2019-11-05T09:46:34", "upload_time_iso_8601": "2019-11-05T09:46:34.569442Z", "url": "https://files.pythonhosted.org/packages/db/50/3b28c11f214eb4003c02d97ab2bc1aaa9123895c2c0058107fa29449f979/pytransform3d-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:20 2020"}