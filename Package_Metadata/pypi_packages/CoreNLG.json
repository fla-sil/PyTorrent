{"info": {"author": "Fabien Giely", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# CoreNLG\n\n## Contents :\n- [General Information](#general-information)\n- [Default text processing](#default-text-processing)\n  - [Typographical conventions](#typographical-conventions)\n  - [Automatic contractions](#automatic-contractions)\n- [CoreNLG functions](#corenlg-functions)\n  - [free_text](#free_text)\n  - [nlg_syn and post_eval](#nlg_syn-and-post_eval)\n  - [nlg_enum and nlg_iter](#nlg_enum-and-nlg_iter)\n  - [nlg_num](#nlg_num)\n  - [nlg_tags](#nlg_tags)\n  - [no_interpret](#no_interpret)\n- [CoreNLG classes](#corenlg-classes)\n  - [Datas](#datas)\n  - [Document](#document)\n  - [Section](#section)\n  - [TextClass](#textclass)\n  - [TextVar](#textvar)\n- [Quick start](#quick-start)\n\n## General Information\n\nCoreNLG is an easy to use and productivity oriented Python library for Natural Language Generation.\\\nIt aims to provide the essential tools for developers to structure and write NLG projects.\\\nAuto-agreement tools based on extra-resources are <b>not provided</b> in this library.\n\n## Default text processing\n\n### Typographical conventions\n\nYou can chose a language (French or English) and typography will be automatically handled based on it.\\\nFor example:\\\nIn French 'Ma liste d'\u00e9l\u00e9ments:' becomes \"Ma liste d'\u00e9l\u00e9ments :\".\\\nIn English \"My list of items :\" will become \"My list of items:\"\n\nA period will always be followed by a capitalized word.\n\n### Automatic contractions\n\nContractions are automatically handled based on the selected language (French or English).\n\n```python\nword_1 = 'le d\u00e9passement'\nword_2 = 'les hausses'\n\nself.free_text('\u00c0 cause de', word_1) # \"\u00c0 cause du d\u00e9passement\"\nself.free_text('\u00c0 cause de', word_2) # \"\u00c0 cause des hausses\"\n```\n\n## CoreNLG functions\n\n### free_text\n\nThe <b>free_text</b> method takes multiple strings or nested list/tuple of strings and return a string where each parameter is separated by a space. \nIt aims to avoid forgetting the spaces between each element of a string when concatenating it.\n\n```python\nself.free_text(\n  \"The variation of the\",\n  indicator.label,\n  \"is\",\n  \"positive\" if indicator.variation > 0 else \"negative\" if indicator.variation < 0 else \"not significant\",\n  \"compared to last year.\"\n)\n\nself.free_text(\n  \"We can also use collection of strings as parameter,\",\n  (\n    \"if the next is true\",\n    \"this text will be written\"\n  ) if test else (\n    \"else, we will\",\n    \"have this text\"\n  ),\n  \".\"\n)\n```\n\n### nlg_syn and post_eval\n\nThe <b>nlg_syn</b> method takes multiples strings as parameters and return a string based on two modes.\n\n```python\ndef synonym(self, *words, mode=\"smart\")\n```\n  - \"random\": one of the strings in parameter will be chosen randomly.\n  - \"smart\": the chosen string will be the best as possible considering previously chosen synonyms in order to avoid repetitions.\n\n```python\n\n# Basic use\nself.free_text(\n\n  'I was', \n\n  self.nlg_syn('hungry', 'starving'), \n\n  'so I decided to eat', \n\n  self.nlg_syn('one apple', 'three apples'), \n\n  '.'\n\n)\n\n# Synonyms trees can be made\nself.free_text(\n\n  'I was', \n\n  self.nlg_syn(\n    'hungry so I decided to eat ' + self.nlg_syn('one apple', 'three apples'),\n    'starving and I went to the restaurant'\n  ),\n\n  '.'\n\n)\n```\n\nAs you build complex structure, you will want to know at some point what word will be chosen to be able to match the rest of the sentence with it.\\\nInstead of a string, you can send a tuple as an argument to the <b>nlg_syn</b> method :\n```python\nself.nlg_syn(\n  'one', \n  ('three', 'PLURAL')\n)\n```\n\nYou can now use the <b>post_eval</b> method which is defined as follow :\n```python\ndef post_eval(\n  key_to_check,\n  string_to_write_if_active='',\n  string_to_write_if_inactive='',\n  deactivate_the_key=False\n)\n```\n\nYou can now build sentences like that :\n```python\nself.free_text(\n\n  'I decided to eat',\n\n  self.nlg_syn(\n    'one', \n    ('three', 'PLURAL')\n  ),\n\n  self.post_eval('PLURAL', 'apples', 'apple', True),\n\n  '.'  \n)\n# This will give you either \"I decided to eat one apple.\" or \"I decided to eat three apples.\"\n# The 'PLURAL' key is now deactivated so next post_eval method would not find it.\n```\n\n### nlg_enum and nlg_iter\n\nThe <b>nlg_enum</b> method takes a list of element and an severatal arguments to create the output string. It returns a string.\\\n\n```python\ndef enum(self, my_list_of_elements,\n               max_elem=None,\n               nb_elem_bullet=None,\n               begin_w=None,\n               end_w=None,\n               sep=None,\n               last_sep=None,\n               capitalize_bullets=None,\n               text_if_empty_list=None,\n               end_of_bullet=None,\n               end_of_last_bullet=None)\n\n\nclass IterElems:\n  def __init__(\n    self,\n\n    # maximum number of elements of the list that will be displayed\n    max_elem=None, \n\n    # if the size of the list is superior to this number, it will create a bullet-point list\n    nb_elem_bullet=None, \n\n    # the output string will begin with this string\n    begin_w=\"\", \n\n    # the output string will end with this string\n    end_w=\"\", \n\n    # separator for each element except the last\n    sep=\",\", \n\n    # separator for the last item\n    last_sep=\"and\", \n\n    # each beginning of bullet-point should be capitalized\n    capitalize_bullets=True, \n\n    # if the list is empty, this string will appear\n    text_if_empty_list=\"\", \n\n    # at the end of each bullet point except the last\n    end_of_bullet = \"\", \n\n    # at the end of the last bullet-point\n    end_of_last_bullet = \"\" \n  )\n```\n\n\n```python\nmy_list = [\"six apples\", \"three bananas\", \"two peaches\"]\n\nself.nlg_enum(my_list)\n# \"six apples, three bananas and two peaches\"\n\nself.nlg_enum(my_list, last_sep=\"but also\")\n# \"six apples, three bananas but also two peaches\"\n\n\nmy_list = ['apples', 'bananas', 'peaches']\n\nself.nlg_enum(\n  my_list,\n  max_elem=2, nb_elem_bullet=2, begin_w='Fruits I like :', end_w='Delicious, right ?', end_of_bullet=',', end_of_last_bullet='.'\n)\n\"\"\"\nFruits I like :\n  - Apples,\n  - Bananas.\nDelicious, right ?\n\"\"\"\n\nmy_list = ['apples', 'bananas']\n\nself.nlg_enum([self.free_text(\n  fruit,\n  self.nlg_syn('so', '') + ' ' + self.nlg_syn('succulent', 'tasty')\n) for fruit in my_list],\n  begin_w='I find', end_w='.'\n)\n\"\"\"\nOne of the following:\n\nI find apples so tasty and bananas succulent.\nI find apples tasty and bananas so succulent.\nI find apples so succulent and bananas tasty.\nI find apples succulent and bananas so tasty.\n\"\"\"\n```\n\nThe <b>nlg_enum</b> method is a wrapper of <b>nlg_iter</b> which allows to do a bit more complex things.\\\nInstead of a list of elements, it takes a list of lists and strings. Through the iteration it maps every element with its associated ones. It then stops when there is no more elements in the smaller list.\n\n```python\nmy_list_of_fruits = ['apples', 'bananas', 'peaches']\nmy_list_of_syno = [self.nlg_syn('succulent', 'tasty') for i in range(2)]\n\nself.nlg_iter([\n  my_list_of_fruits,\n   \"are\",\n   my_list_of_syno\n])\n\n# apples are tasty and bananas are succulent\n```\n\n### nlg_num\n\nThe <b>nlg_num</b> method allows to transform a number in a string following several criterion.\n\n```python\ndef nlg_num(self, num, short=\"\", sep=\".\", mile_sep=\" \", dec=None, force_sign=False, remove_trailing_zeros=True)\n\nmy_number = 10000.66028\n\nself.nlg_num(my_number, dec=3, force_sign=True) \n\n# +10 000.66\n# The remove_trailing_zeros parameter will remove the last decimal even though we indicated 3 decimals because it is a 0.\n```\n\n### nlg_tags\n\nThe <b>nlg_tags</b> method allows to create HTML tags with attributes and encapsulate text into them.\n\n```python\ndef nlg_tag(self, tag, text=\"\", _class=None, **kwargs)\n\nself.nlg_tags('br')\n# <br>\n\nself.nlg_tags('p', self.free_text(\n  'This is a',\n  self.nlg_tags('b', 'sentence with bold'),\n  'in a paragraph.'\n))\n# <p>This is a <b>sentence with bold</p> in a paragraph.</p>\n\n\nself.nlg_tags('div', \n  self.nlg_tags('h1', \"My content\"), \n  id=\"title_div\"\n) \n# <div id=\"title_div\"><h1>My content</h1></div>\n```\n\n### no_interpret\n\nThe <b>no_interpret</b> method allows to deactivate the nlg interpretation (automatic contractions and typographical conventions) for a given string.\n\n```python                         \n# \"This is a string.with a dot inside     .\" becomes  \"This is a string. With a dot inside.\" after NLG processing.\n\nself.no_interpret(\"This is a string.with a dot inside     .\")\n# This is a string.with a dot inside     .\n```\n\n## CoreNLG classes\n\n### Datas\n\nThe <b>Datas</b> class is used to store the input you receive.\\\nIt should be inherited by your own custom data classes.\n\n```python\nclass Datas:\n  def __init__(self, json_in)\n\nclass MyDatas(Datas)\n  def __init__(self, json_in)\n     super().__init__(json_in)\n\nmy_datas = MyDatas(input)\n```\n\n### Document\n\nThe <b>Document</b> class is your final document wrapper.\n\n```python  \nclass Document:\n  def __init__(self, datas, title=\"\", log_level=\"ERROR\", css_path=\"css/styles.css\", lang=\"fr\", freeze=False)\n\nmy_datas = MyDatas(input)\n\ndocument = Document(my_datas)\n```\n\nIt takes at least an instance of a Datas class (or your custom one) as parameter.\\\nThe 'freeze' parameter means that for every <b>nlg_syn</b> call, the chosen string will always be the first. It is useful for non-regression tests.\n\n### Section\n\nThe <b>Section</b> class is a text zone of your document independant of others for the draw of synonyms.\\\nIt is created from the Document class with the <b>new_section</b> method.\\\nYou can give a HTML tag name in parameter (by_default 'div') and HTML attributes.\n\n```python \nmy_datas = MyDatas(input)\n\ndocument = Document(my_datas)\n\nfirst_paragraph_section = document.new_section(html_elem_attr={\"id\": \"firstParagraph\"})\nsecond_paragraph_section = document.new_section(html_elem_attr={\"id\": \"secondParagraph\"})\n\ndocument.write()\n```\n\nYou should write your sections in the document with the <b>write</b> method of the class <b>Document</b>.\\\nYou can also write each section separately to manage the order of the sections in the document with the <b>write_section</b> method.\n\n```python \ndef write_section(self, section, parent_elem=None, parent_id=None)\n```\n\n<b>You should not confuse a Section with a simple text zone.</b>\n\nIf you want your first and second paragraph to be independant, you create sections like we saw it above.\\\nIf you just want to have two separates text zone in your document but without indepedancy on the synonyms, you create tags with <b>nlg_tags</b>.\n\n```python \nparagraph_section = document.new_section()\n\nparagraph_section.text = (\n  paragraph_section.tools.add_tag('div', id='first_paragraph', text='First paragraph text'),\n  paragraph_section.tools.add_tag('div', id='two_paragraph', text='Second paragraph text')\n)\n```\n\nYou will never use this way of calling the <b>nlg_tags</b> function because we created the <b>TextClass</b> object.\n\n### TextClass\n\nA <b>TextClass</b> is a class in which you will write your text. You should create your own sub-class for each part of your text.\\\nA TextClass takes a Section as parameter.\n\n```python \nclass MyDatas(Datas)\n  def __init__(self, json_in)\n     super().__init__(json_in)\n\n     self.my_job = \"developer\"\n\nclass MyText(TextClass):\n  def __init__(self, section):\n    super().__init__(section)\n\n    self.text = (\n      \"Hello\",\n\n      self.nlg_syn(\"world\", \"everyone\"),\n\n      \".\", \n\n      self.nlg_tags('br'),\n\n      self.nlg_tags('b', \"Nice to meet you.\"),\n\n      \"I am a\",\n\n      self.my_job,\n\n      \".\"\n    )\n\nmy_datas = MyDatas(input)\n\ndocument = Document(my_datas)\n\nmy_section = document.new_section(html_elem_attr={\"id\": \"mySection\"})\n\nMyText(my_section)\n\ndocument.write()\n\n# <div id=\"mySection\">Hello everyone.<br> <b>Nice to meet you.</b> I am a developer.</div>\n```\n\nThe TextClass is a powerful object wich allows you to call all the [CoreNLG functions](#corenlg-functions) with self.\\\nYou can also access every attributes of your Datas class the same way. \n\nThe <b>self.text</b> write your text in the Section that was send as a parameter to your TextClass.\\\nYou can use it with strings, nested lists or tuples and it will do the same job as the <b>free_text</b> function.\\\nDon't be afraid ! The '=' operator is override, to enjoy all the possibility of it, you should do :\n\n```python\nself.text = \"Hello,\"\nself.text = \"this is one sentence\"\nself.text = (\n  \"that I am\",\n  \"writing here.\"\n)\n\n# Hello, this is one sentence that I am writing here.\n```\n\n### TextVar\n\nThe <b>TextVar</b> is a simple object, sub-class of str, whose '+=' operator is overloaded.\\\nIt's the same principle as <b>free_text</b> and <b>self.text</b>, it works with strings and nested lists/tuples.\\\nIt aims to ease the concatenation of strings.\n\n```python\nclass MyText(TextClass):\n  def __init__(self, section):\n    super().__init__(section)\n\n    self.text = self.nlg_tags('b', self.text_with_free_text())    \n    self.text = self.nlg_tags('b', self.text_with_text_var()) \n\n  def text_with_free_text(self):\n    return self.free_text(\n      \"first test is true\" if test_1 else \"first test is false\",\n      \"and\",\n      (\n\t\"second test\",\n        \"is true\"\n      ) if test_2 else (\n        \"second test\",\n        \"is false\"\n      )  \n    )\n\n  def text_with_text_var(self):\n    my_text = TextVar()\n\n    if test_1:\n      my_text += \"first test is true\"\n    else:\n      my_text += \"first test is false\"\n\n    my_text += \"and\"\n\n    if test_2:\n      my_text += \"second test\", \"is true\"\n    else:\n      my_text += (\n        \"second test\",\n        \"is false\"\n      )\n\n    return my_text\t\t\n```\n\nIn this example, the two methods returns equivalent strings. You can use both depending on which one you find the simpler to understand and the number of nested tests you have to write.\n\n## Quick start\n\nInstall the library:\n\n`pip install CoreNLG`\n\nCreate a basic template with cookiecutter:\n\n```\npip install cookiecutter\ncookiecutter https://github.com/societe-generale/core-nlg.git\n```\n\nYou should obtain this architecture of project:\n\n```\nMyProject\n|-- ProjectEntryPoint.py\n|-- MyProject\n|   |-- Datas\n|   |   |-- MyDatas.py\n|   |-- TextClass\n|   |   |-- Introduction.py\n|   |   |-- Content.py\n|   |-- Resources\n|   |-- Tools\n|-- inputs\n|   |-- test.json\n```\n\nProjectEntryPoint.py will be your main, you can use it to test locally your application.\n\nRun this file and you will see the HTML result in your console and your browser will render it automatically.\\\nHappy coding !\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/societe-generale/core-nlg.git", "keywords": "", "license": "Apache v2", "maintainer": "", "maintainer_email": "", "name": "CoreNLG", "package_url": "https://pypi.org/project/CoreNLG/", "platform": "", "project_url": "https://pypi.org/project/CoreNLG/", "project_urls": {"Homepage": "https://github.com/societe-generale/core-nlg.git"}, "release_url": "https://pypi.org/project/CoreNLG/2.0.5/", "requires_dist": ["lxml"], "requires_python": "", "summary": "", "version": "2.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CoreNLG</h1>\n<h2>Contents :</h2>\n<ul>\n<li><a href=\"#general-information\" rel=\"nofollow\">General Information</a></li>\n<li><a href=\"#default-text-processing\" rel=\"nofollow\">Default text processing</a>\n<ul>\n<li><a href=\"#typographical-conventions\" rel=\"nofollow\">Typographical conventions</a></li>\n<li><a href=\"#automatic-contractions\" rel=\"nofollow\">Automatic contractions</a></li>\n</ul>\n</li>\n<li><a href=\"#corenlg-functions\" rel=\"nofollow\">CoreNLG functions</a>\n<ul>\n<li><a href=\"#free_text\" rel=\"nofollow\">free_text</a></li>\n<li><a href=\"#nlg_syn-and-post_eval\" rel=\"nofollow\">nlg_syn and post_eval</a></li>\n<li><a href=\"#nlg_enum-and-nlg_iter\" rel=\"nofollow\">nlg_enum and nlg_iter</a></li>\n<li><a href=\"#nlg_num\" rel=\"nofollow\">nlg_num</a></li>\n<li><a href=\"#nlg_tags\" rel=\"nofollow\">nlg_tags</a></li>\n<li><a href=\"#no_interpret\" rel=\"nofollow\">no_interpret</a></li>\n</ul>\n</li>\n<li><a href=\"#corenlg-classes\" rel=\"nofollow\">CoreNLG classes</a>\n<ul>\n<li><a href=\"#datas\" rel=\"nofollow\">Datas</a></li>\n<li><a href=\"#document\" rel=\"nofollow\">Document</a></li>\n<li><a href=\"#section\" rel=\"nofollow\">Section</a></li>\n<li><a href=\"#textclass\" rel=\"nofollow\">TextClass</a></li>\n<li><a href=\"#textvar\" rel=\"nofollow\">TextVar</a></li>\n</ul>\n</li>\n<li><a href=\"#quick-start\" rel=\"nofollow\">Quick start</a></li>\n</ul>\n<h2>General Information</h2>\n<p>CoreNLG is an easy to use and productivity oriented Python library for Natural Language Generation.<br>\nIt aims to provide the essential tools for developers to structure and write NLG projects.<br>\nAuto-agreement tools based on extra-resources are <b>not provided</b> in this library.</p>\n<h2>Default text processing</h2>\n<h3>Typographical conventions</h3>\n<p>You can chose a language (French or English) and typography will be automatically handled based on it.<br>\nFor example:<br>\nIn French 'Ma liste d'\u00e9l\u00e9ments:' becomes \"Ma liste d'\u00e9l\u00e9ments :\".<br>\nIn English \"My list of items :\" will become \"My list of items:\"</p>\n<p>A period will always be followed by a capitalized word.</p>\n<h3>Automatic contractions</h3>\n<p>Contractions are automatically handled based on the selected language (French or English).</p>\n<pre><span class=\"n\">word_1</span> <span class=\"o\">=</span> <span class=\"s1\">'le d\u00e9passement'</span>\n<span class=\"n\">word_2</span> <span class=\"o\">=</span> <span class=\"s1\">'les hausses'</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">free_text</span><span class=\"p\">(</span><span class=\"s1\">'\u00c0 cause de'</span><span class=\"p\">,</span> <span class=\"n\">word_1</span><span class=\"p\">)</span> <span class=\"c1\"># \"\u00c0 cause du d\u00e9passement\"</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">free_text</span><span class=\"p\">(</span><span class=\"s1\">'\u00c0 cause de'</span><span class=\"p\">,</span> <span class=\"n\">word_2</span><span class=\"p\">)</span> <span class=\"c1\"># \"\u00c0 cause des hausses\"</span>\n</pre>\n<h2>CoreNLG functions</h2>\n<h3>free_text</h3>\n<p>The <b>free_text</b> method takes multiple strings or nested list/tuple of strings and return a string where each parameter is separated by a space.\nIt aims to avoid forgetting the spaces between each element of a string when concatenating it.</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">free_text</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"The variation of the\"</span><span class=\"p\">,</span>\n  <span class=\"n\">indicator</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"is\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"positive\"</span> <span class=\"k\">if</span> <span class=\"n\">indicator</span><span class=\"o\">.</span><span class=\"n\">variation</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s2\">\"negative\"</span> <span class=\"k\">if</span> <span class=\"n\">indicator</span><span class=\"o\">.</span><span class=\"n\">variation</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s2\">\"not significant\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"compared to last year.\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">free_text</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"We can also use collection of strings as parameter,\"</span><span class=\"p\">,</span>\n  <span class=\"p\">(</span>\n    <span class=\"s2\">\"if the next is true\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"this text will be written\"</span>\n  <span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">test</span> <span class=\"k\">else</span> <span class=\"p\">(</span>\n    <span class=\"s2\">\"else, we will\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"have this text\"</span>\n  <span class=\"p\">),</span>\n  <span class=\"s2\">\".\"</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>nlg_syn and post_eval</h3>\n<p>The <b>nlg_syn</b> method takes multiples strings as parameters and return a string based on two modes.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">synonym</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">\"smart\"</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\"random\": one of the strings in parameter will be chosen randomly.</li>\n<li>\"smart\": the chosen string will be the best as possible considering previously chosen synonyms in order to avoid repetitions.</li>\n</ul>\n<pre><span class=\"c1\"># Basic use</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">free_text</span><span class=\"p\">(</span>\n\n  <span class=\"s1\">'I was'</span><span class=\"p\">,</span> \n\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_syn</span><span class=\"p\">(</span><span class=\"s1\">'hungry'</span><span class=\"p\">,</span> <span class=\"s1\">'starving'</span><span class=\"p\">),</span> \n\n  <span class=\"s1\">'so I decided to eat'</span><span class=\"p\">,</span> \n\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_syn</span><span class=\"p\">(</span><span class=\"s1\">'one apple'</span><span class=\"p\">,</span> <span class=\"s1\">'three apples'</span><span class=\"p\">),</span> \n\n  <span class=\"s1\">'.'</span>\n\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Synonyms trees can be made</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">free_text</span><span class=\"p\">(</span>\n\n  <span class=\"s1\">'I was'</span><span class=\"p\">,</span> \n\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_syn</span><span class=\"p\">(</span>\n    <span class=\"s1\">'hungry so I decided to eat '</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_syn</span><span class=\"p\">(</span><span class=\"s1\">'one apple'</span><span class=\"p\">,</span> <span class=\"s1\">'three apples'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'starving and I went to the restaurant'</span>\n  <span class=\"p\">),</span>\n\n  <span class=\"s1\">'.'</span>\n\n<span class=\"p\">)</span>\n</pre>\n<p>As you build complex structure, you will want to know at some point what word will be chosen to be able to match the rest of the sentence with it.<br>\nInstead of a string, you can send a tuple as an argument to the <b>nlg_syn</b> method :</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_syn</span><span class=\"p\">(</span>\n  <span class=\"s1\">'one'</span><span class=\"p\">,</span> \n  <span class=\"p\">(</span><span class=\"s1\">'three'</span><span class=\"p\">,</span> <span class=\"s1\">'PLURAL'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can now use the <b>post_eval</b> method which is defined as follow :</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">post_eval</span><span class=\"p\">(</span>\n  <span class=\"n\">key_to_check</span><span class=\"p\">,</span>\n  <span class=\"n\">string_to_write_if_active</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n  <span class=\"n\">string_to_write_if_inactive</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n  <span class=\"n\">deactivate_the_key</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can now build sentences like that :</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">free_text</span><span class=\"p\">(</span>\n\n  <span class=\"s1\">'I decided to eat'</span><span class=\"p\">,</span>\n\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_syn</span><span class=\"p\">(</span>\n    <span class=\"s1\">'one'</span><span class=\"p\">,</span> \n    <span class=\"p\">(</span><span class=\"s1\">'three'</span><span class=\"p\">,</span> <span class=\"s1\">'PLURAL'</span><span class=\"p\">)</span>\n  <span class=\"p\">),</span>\n\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post_eval</span><span class=\"p\">(</span><span class=\"s1\">'PLURAL'</span><span class=\"p\">,</span> <span class=\"s1\">'apples'</span><span class=\"p\">,</span> <span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span>\n\n  <span class=\"s1\">'.'</span>  \n<span class=\"p\">)</span>\n<span class=\"c1\"># This will give you either \"I decided to eat one apple.\" or \"I decided to eat three apples.\"</span>\n<span class=\"c1\"># The 'PLURAL' key is now deactivated so next post_eval method would not find it.</span>\n</pre>\n<h3>nlg_enum and nlg_iter</h3>\n<p>The <b>nlg_enum</b> method takes a list of element and an severatal arguments to create the output string. It returns a string.\\</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">enum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">my_list_of_elements</span><span class=\"p\">,</span>\n               <span class=\"n\">max_elem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">nb_elem_bullet</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">begin_w</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">end_w</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">last_sep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">capitalize_bullets</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">text_if_empty_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">end_of_bullet</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">end_of_last_bullet</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">IterElems</span><span class=\"p\">:</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n    <span class=\"bp\">self</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># maximum number of elements of the list that will be displayed</span>\n    <span class=\"n\">max_elem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> \n\n    <span class=\"c1\"># if the size of the list is superior to this number, it will create a bullet-point list</span>\n    <span class=\"n\">nb_elem_bullet</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> \n\n    <span class=\"c1\"># the output string will begin with this string</span>\n    <span class=\"n\">begin_w</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> \n\n    <span class=\"c1\"># the output string will end with this string</span>\n    <span class=\"n\">end_w</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> \n\n    <span class=\"c1\"># separator for each element except the last</span>\n    <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s2\">\",\"</span><span class=\"p\">,</span> \n\n    <span class=\"c1\"># separator for the last item</span>\n    <span class=\"n\">last_sep</span><span class=\"o\">=</span><span class=\"s2\">\"and\"</span><span class=\"p\">,</span> \n\n    <span class=\"c1\"># each beginning of bullet-point should be capitalized</span>\n    <span class=\"n\">capitalize_bullets</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n\n    <span class=\"c1\"># if the list is empty, this string will appear</span>\n    <span class=\"n\">text_if_empty_list</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> \n\n    <span class=\"c1\"># at the end of each bullet point except the last</span>\n    <span class=\"n\">end_of_bullet</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span> \n\n    <span class=\"c1\"># at the end of the last bullet-point</span>\n    <span class=\"n\">end_of_last_bullet</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span> \n  <span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">my_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"six apples\"</span><span class=\"p\">,</span> <span class=\"s2\">\"three bananas\"</span><span class=\"p\">,</span> <span class=\"s2\">\"two peaches\"</span><span class=\"p\">]</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_enum</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"six apples, three bananas and two peaches\"</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_enum</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">,</span> <span class=\"n\">last_sep</span><span class=\"o\">=</span><span class=\"s2\">\"but also\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"six apples, three bananas but also two peaches\"</span>\n\n\n<span class=\"n\">my_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'apples'</span><span class=\"p\">,</span> <span class=\"s1\">'bananas'</span><span class=\"p\">,</span> <span class=\"s1\">'peaches'</span><span class=\"p\">]</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_enum</span><span class=\"p\">(</span>\n  <span class=\"n\">my_list</span><span class=\"p\">,</span>\n  <span class=\"n\">max_elem</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">nb_elem_bullet</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">begin_w</span><span class=\"o\">=</span><span class=\"s1\">'Fruits I like :'</span><span class=\"p\">,</span> <span class=\"n\">end_w</span><span class=\"o\">=</span><span class=\"s1\">'Delicious, right ?'</span><span class=\"p\">,</span> <span class=\"n\">end_of_bullet</span><span class=\"o\">=</span><span class=\"s1\">','</span><span class=\"p\">,</span> <span class=\"n\">end_of_last_bullet</span><span class=\"o\">=</span><span class=\"s1\">'.'</span>\n<span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Fruits I like :</span>\n<span class=\"sd\">  - Apples,</span>\n<span class=\"sd\">  - Bananas.</span>\n<span class=\"sd\">Delicious, right ?</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"n\">my_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'apples'</span><span class=\"p\">,</span> <span class=\"s1\">'bananas'</span><span class=\"p\">]</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_enum</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">free_text</span><span class=\"p\">(</span>\n  <span class=\"n\">fruit</span><span class=\"p\">,</span>\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_syn</span><span class=\"p\">(</span><span class=\"s1\">'so'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_syn</span><span class=\"p\">(</span><span class=\"s1\">'succulent'</span><span class=\"p\">,</span> <span class=\"s1\">'tasty'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">fruit</span> <span class=\"ow\">in</span> <span class=\"n\">my_list</span><span class=\"p\">],</span>\n  <span class=\"n\">begin_w</span><span class=\"o\">=</span><span class=\"s1\">'I find'</span><span class=\"p\">,</span> <span class=\"n\">end_w</span><span class=\"o\">=</span><span class=\"s1\">'.'</span>\n<span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">One of the following:</span>\n\n<span class=\"sd\">I find apples so tasty and bananas succulent.</span>\n<span class=\"sd\">I find apples tasty and bananas so succulent.</span>\n<span class=\"sd\">I find apples so succulent and bananas tasty.</span>\n<span class=\"sd\">I find apples succulent and bananas so tasty.</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p>The <b>nlg_enum</b> method is a wrapper of <b>nlg_iter</b> which allows to do a bit more complex things.<br>\nInstead of a list of elements, it takes a list of lists and strings. Through the iteration it maps every element with its associated ones. It then stops when there is no more elements in the smaller list.</p>\n<pre><span class=\"n\">my_list_of_fruits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'apples'</span><span class=\"p\">,</span> <span class=\"s1\">'bananas'</span><span class=\"p\">,</span> <span class=\"s1\">'peaches'</span><span class=\"p\">]</span>\n<span class=\"n\">my_list_of_syno</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_syn</span><span class=\"p\">(</span><span class=\"s1\">'succulent'</span><span class=\"p\">,</span> <span class=\"s1\">'tasty'</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_iter</span><span class=\"p\">([</span>\n  <span class=\"n\">my_list_of_fruits</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"are\"</span><span class=\"p\">,</span>\n   <span class=\"n\">my_list_of_syno</span>\n<span class=\"p\">])</span>\n\n<span class=\"c1\"># apples are tasty and bananas are succulent</span>\n</pre>\n<h3>nlg_num</h3>\n<p>The <b>nlg_num</b> method allows to transform a number in a string following several criterion.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">nlg_num</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">short</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s2\">\".\"</span><span class=\"p\">,</span> <span class=\"n\">mile_sep</span><span class=\"o\">=</span><span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"n\">dec</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">force_sign</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">remove_trailing_zeros</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_number</span> <span class=\"o\">=</span> <span class=\"mf\">10000.66028</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_num</span><span class=\"p\">(</span><span class=\"n\">my_number</span><span class=\"p\">,</span> <span class=\"n\">dec</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">force_sign</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># +10 000.66</span>\n<span class=\"c1\"># The remove_trailing_zeros parameter will remove the last decimal even though we indicated 3 decimals because it is a 0.</span>\n</pre>\n<h3>nlg_tags</h3>\n<p>The <b>nlg_tags</b> method allows to create HTML tags with attributes and encapsulate text into them.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">nlg_tag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">_class</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_tags</span><span class=\"p\">(</span><span class=\"s1\">'br'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;br&gt;</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_tags</span><span class=\"p\">(</span><span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">free_text</span><span class=\"p\">(</span>\n  <span class=\"s1\">'This is a'</span><span class=\"p\">,</span>\n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_tags</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'sentence with bold'</span><span class=\"p\">),</span>\n  <span class=\"s1\">'in a paragraph.'</span>\n<span class=\"p\">))</span>\n<span class=\"c1\"># &lt;p&gt;This is a &lt;b&gt;sentence with bold&lt;/p&gt; in a paragraph.&lt;/p&gt;</span>\n\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_tags</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">,</span> \n  <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_tags</span><span class=\"p\">(</span><span class=\"s1\">'h1'</span><span class=\"p\">,</span> <span class=\"s2\">\"My content\"</span><span class=\"p\">),</span> \n  <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"title_div\"</span>\n<span class=\"p\">)</span> \n<span class=\"c1\"># &lt;div id=\"title_div\"&gt;&lt;h1&gt;My content&lt;/h1&gt;&lt;/div&gt;</span>\n</pre>\n<h3>no_interpret</h3>\n<p>The <b>no_interpret</b> method allows to deactivate the nlg interpretation (automatic contractions and typographical conventions) for a given string.</p>\n<pre><span class=\"c1\"># \"This is a string.with a dot inside     .\" becomes  \"This is a string. With a dot inside.\" after NLG processing.</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">no_interpret</span><span class=\"p\">(</span><span class=\"s2\">\"This is a string.with a dot inside     .\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># This is a string.with a dot inside     .</span>\n</pre>\n<h2>CoreNLG classes</h2>\n<h3>Datas</h3>\n<p>The <b>Datas</b> class is used to store the input you receive.<br>\nIt should be inherited by your own custom data classes.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Datas</span><span class=\"p\">:</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">json_in</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyDatas</span><span class=\"p\">(</span><span class=\"n\">Datas</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">json_in</span><span class=\"p\">)</span>\n     <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">json_in</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_datas</span> <span class=\"o\">=</span> <span class=\"n\">MyDatas</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n</pre>\n<h3>Document</h3>\n<p>The <b>Document</b> class is your final document wrapper.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Document</span><span class=\"p\">:</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">datas</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"s2\">\"ERROR\"</span><span class=\"p\">,</span> <span class=\"n\">css_path</span><span class=\"o\">=</span><span class=\"s2\">\"css/styles.css\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"fr\"</span><span class=\"p\">,</span> <span class=\"n\">freeze</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_datas</span> <span class=\"o\">=</span> <span class=\"n\">MyDatas</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n\n<span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">my_datas</span><span class=\"p\">)</span>\n</pre>\n<p>It takes at least an instance of a Datas class (or your custom one) as parameter.<br>\nThe 'freeze' parameter means that for every <b>nlg_syn</b> call, the chosen string will always be the first. It is useful for non-regression tests.</p>\n<h3>Section</h3>\n<p>The <b>Section</b> class is a text zone of your document independant of others for the draw of synonyms.<br>\nIt is created from the Document class with the <b>new_section</b> method.<br>\nYou can give a HTML tag name in parameter (by_default 'div') and HTML attributes.</p>\n<pre><span class=\"n\">my_datas</span> <span class=\"o\">=</span> <span class=\"n\">MyDatas</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n\n<span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">my_datas</span><span class=\"p\">)</span>\n\n<span class=\"n\">first_paragraph_section</span> <span class=\"o\">=</span> <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">new_section</span><span class=\"p\">(</span><span class=\"n\">html_elem_attr</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"firstParagraph\"</span><span class=\"p\">})</span>\n<span class=\"n\">second_paragraph_section</span> <span class=\"o\">=</span> <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">new_section</span><span class=\"p\">(</span><span class=\"n\">html_elem_attr</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"secondParagraph\"</span><span class=\"p\">})</span>\n\n<span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<p>You should write your sections in the document with the <b>write</b> method of the class <b>Document</b>.<br>\nYou can also write each section separately to manage the order of the sections in the document with the <b>write_section</b> method.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">write_section</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">parent_elem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">parent_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p><b>You should not confuse a Section with a simple text zone.</b></p>\n<p>If you want your first and second paragraph to be independant, you create sections like we saw it above.<br>\nIf you just want to have two separates text zone in your document but without indepedancy on the synonyms, you create tags with <b>nlg_tags</b>.</p>\n<pre><span class=\"n\">paragraph_section</span> <span class=\"o\">=</span> <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">new_section</span><span class=\"p\">()</span>\n\n<span class=\"n\">paragraph_section</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"n\">paragraph_section</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">add_tag</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'first_paragraph'</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'First paragraph text'</span><span class=\"p\">),</span>\n  <span class=\"n\">paragraph_section</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">add_tag</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'two_paragraph'</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'Second paragraph text'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You will never use this way of calling the <b>nlg_tags</b> function because we created the <b>TextClass</b> object.</p>\n<h3>TextClass</h3>\n<p>A <b>TextClass</b> is a class in which you will write your text. You should create your own sub-class for each part of your text.<br>\nA TextClass takes a Section as parameter.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyDatas</span><span class=\"p\">(</span><span class=\"n\">Datas</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">json_in</span><span class=\"p\">)</span>\n     <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">json_in</span><span class=\"p\">)</span>\n\n     <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_job</span> <span class=\"o\">=</span> <span class=\"s2\">\"developer\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyText</span><span class=\"p\">(</span><span class=\"n\">TextClass</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"p\">):</span>\n    <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">section</span><span class=\"p\">)</span>\n\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n      <span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span>\n\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_syn</span><span class=\"p\">(</span><span class=\"s2\">\"world\"</span><span class=\"p\">,</span> <span class=\"s2\">\"everyone\"</span><span class=\"p\">),</span>\n\n      <span class=\"s2\">\".\"</span><span class=\"p\">,</span> \n\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_tags</span><span class=\"p\">(</span><span class=\"s1\">'br'</span><span class=\"p\">),</span>\n\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_tags</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s2\">\"Nice to meet you.\"</span><span class=\"p\">),</span>\n\n      <span class=\"s2\">\"I am a\"</span><span class=\"p\">,</span>\n\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_job</span><span class=\"p\">,</span>\n\n      <span class=\"s2\">\".\"</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">my_datas</span> <span class=\"o\">=</span> <span class=\"n\">MyDatas</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n\n<span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">my_datas</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_section</span> <span class=\"o\">=</span> <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">new_section</span><span class=\"p\">(</span><span class=\"n\">html_elem_attr</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mySection\"</span><span class=\"p\">})</span>\n\n<span class=\"n\">MyText</span><span class=\"p\">(</span><span class=\"n\">my_section</span><span class=\"p\">)</span>\n\n<span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># &lt;div id=\"mySection\"&gt;Hello everyone.&lt;br&gt; &lt;b&gt;Nice to meet you.&lt;/b&gt; I am a developer.&lt;/div&gt;</span>\n</pre>\n<p>The TextClass is a powerful object wich allows you to call all the <a href=\"#corenlg-functions\" rel=\"nofollow\">CoreNLG functions</a> with self.<br>\nYou can also access every attributes of your Datas class the same way.</p>\n<p>The <b>self.text</b> write your text in the Section that was send as a parameter to your TextClass.<br>\nYou can use it with strings, nested lists or tuples and it will do the same job as the <b>free_text</b> function.<br>\nDon't be afraid ! The '=' operator is override, to enjoy all the possibility of it, you should do :</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello,\"</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"this is one sentence\"</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n  <span class=\"s2\">\"that I am\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"writing here.\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Hello, this is one sentence that I am writing here.</span>\n</pre>\n<h3>TextVar</h3>\n<p>The <b>TextVar</b> is a simple object, sub-class of str, whose '+=' operator is overloaded.<br>\nIt's the same principle as <b>free_text</b> and <b>self.text</b>, it works with strings and nested lists/tuples.<br>\nIt aims to ease the concatenation of strings.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyText</span><span class=\"p\">(</span><span class=\"n\">TextClass</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"p\">):</span>\n    <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">section</span><span class=\"p\">)</span>\n\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_tags</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text_with_free_text</span><span class=\"p\">())</span>    \n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nlg_tags</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">text_with_text_var</span><span class=\"p\">())</span> \n\n  <span class=\"k\">def</span> <span class=\"nf\">text_with_free_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">free_text</span><span class=\"p\">(</span>\n      <span class=\"s2\">\"first test is true\"</span> <span class=\"k\">if</span> <span class=\"n\">test_1</span> <span class=\"k\">else</span> <span class=\"s2\">\"first test is false\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"and\"</span><span class=\"p\">,</span>\n      <span class=\"p\">(</span>\n\t<span class=\"s2\">\"second test\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"is true\"</span>\n      <span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">test_2</span> <span class=\"k\">else</span> <span class=\"p\">(</span>\n        <span class=\"s2\">\"second test\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"is false\"</span>\n      <span class=\"p\">)</span>  \n    <span class=\"p\">)</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">text_with_text_var</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">my_text</span> <span class=\"o\">=</span> <span class=\"n\">TextVar</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">test_1</span><span class=\"p\">:</span>\n      <span class=\"n\">my_text</span> <span class=\"o\">+=</span> <span class=\"s2\">\"first test is true\"</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n      <span class=\"n\">my_text</span> <span class=\"o\">+=</span> <span class=\"s2\">\"first test is false\"</span>\n\n    <span class=\"n\">my_text</span> <span class=\"o\">+=</span> <span class=\"s2\">\"and\"</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">test_2</span><span class=\"p\">:</span>\n      <span class=\"n\">my_text</span> <span class=\"o\">+=</span> <span class=\"s2\">\"second test\"</span><span class=\"p\">,</span> <span class=\"s2\">\"is true\"</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n      <span class=\"n\">my_text</span> <span class=\"o\">+=</span> <span class=\"p\">(</span>\n        <span class=\"s2\">\"second test\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"is false\"</span>\n      <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">my_text</span>\t\t\n</pre>\n<p>In this example, the two methods returns equivalent strings. You can use both depending on which one you find the simpler to understand and the number of nested tests you have to write.</p>\n<h2>Quick start</h2>\n<p>Install the library:</p>\n<p><code>pip install CoreNLG</code></p>\n<p>Create a basic template with cookiecutter:</p>\n<pre><code>pip install cookiecutter\ncookiecutter https://github.com/societe-generale/core-nlg.git\n</code></pre>\n<p>You should obtain this architecture of project:</p>\n<pre><code>MyProject\n|-- ProjectEntryPoint.py\n|-- MyProject\n|   |-- Datas\n|   |   |-- MyDatas.py\n|   |-- TextClass\n|   |   |-- Introduction.py\n|   |   |-- Content.py\n|   |-- Resources\n|   |-- Tools\n|-- inputs\n|   |-- test.json\n</code></pre>\n<p>ProjectEntryPoint.py will be your main, you can use it to test locally your application.</p>\n<p>Run this file and you will see the HTML result in your console and your browser will render it automatically.<br>\nHappy coding !</p>\n\n          </div>"}, "last_serial": 6525439, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "b0ca6937ebf61f63c3b81a0845cca48a", "sha256": "70057f71fda2075f85141c38e7cb1789bfec4612ee619fc22a5d79c107aa2132"}, "downloads": -1, "filename": "CoreNLG-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b0ca6937ebf61f63c3b81a0845cca48a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24787, "upload_time": "2019-11-06T15:55:22", "upload_time_iso_8601": "2019-11-06T15:55:22.199159Z", "url": "https://files.pythonhosted.org/packages/5a/4c/9daccf5c4f425f4770c3d88f014d0ee8003fcf62bce32795d760091610c5/CoreNLG-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe915372aaacd25012aee5ad1e7753bd", "sha256": "e4c1081e7993a5f73920bc54eb3bd266be5fd84b7f71be2590f822a36df03438"}, "downloads": -1, "filename": "CoreNLG-1.0.1.tar.gz", "has_sig": false, "md5_digest": "fe915372aaacd25012aee5ad1e7753bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18770, "upload_time": "2019-11-06T15:55:24", "upload_time_iso_8601": "2019-11-06T15:55:24.722729Z", "url": "https://files.pythonhosted.org/packages/27/52/2da95652e984dc3da9d11fb93d150ab98a28621e2fa401386fd6533b84df/CoreNLG-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ce37e5878935eb27eff97c7f8dd29151", "sha256": "023dbbdf43ec4f99842f2260552f85e6cf23e39a14e63140829e93c74b459176"}, "downloads": -1, "filename": "CoreNLG-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ce37e5878935eb27eff97c7f8dd29151", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24868, "upload_time": "2019-12-18T18:07:31", "upload_time_iso_8601": "2019-12-18T18:07:31.632507Z", "url": "https://files.pythonhosted.org/packages/44/9f/7f726dab08f433169959a5486cb40cf5015727285451c74c8b5b6a4c0467/CoreNLG-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f0db766652769e4a56fe3b14aeb9140", "sha256": "0838ed4e4001d3339e036b3d3dd6056fb7cedc68e118f141d842dd13fe664beb"}, "downloads": -1, "filename": "CoreNLG-1.1.0.tar.gz", "has_sig": false, "md5_digest": "8f0db766652769e4a56fe3b14aeb9140", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18891, "upload_time": "2019-12-13T14:54:56", "upload_time_iso_8601": "2019-12-13T14:54:56.660804Z", "url": "https://files.pythonhosted.org/packages/b9/fe/19611c3320117ed84c53e599c8791ff21026d629ce4b2b667a1bcf83722c/CoreNLG-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "df8799e789692d2bec5da2592fe295d2", "sha256": "a2e3041e2564646375ed95fd5300c8a524c8bb0768236807d98788d4b0da76aa"}, "downloads": -1, "filename": "CoreNLG-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "df8799e789692d2bec5da2592fe295d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33834, "upload_time": "2019-12-18T18:07:33", "upload_time_iso_8601": "2019-12-18T18:07:33.302814Z", "url": "https://files.pythonhosted.org/packages/fb/98/09cb7ab8a6f2d0a13fbc2abe2b3843e4c0afd5fb84e4a426b124c44f1485/CoreNLG-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fe7d2f4b65b74cfc1c9e39628acea70", "sha256": "00932efde78ba112ed746a8be4ae242c0eda77b685457eab9d71c9abaaca6726"}, "downloads": -1, "filename": "CoreNLG-1.1.1.tar.gz", "has_sig": false, "md5_digest": "2fe7d2f4b65b74cfc1c9e39628acea70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18922, "upload_time": "2019-12-18T18:10:02", "upload_time_iso_8601": "2019-12-18T18:10:02.090340Z", "url": "https://files.pythonhosted.org/packages/23/9c/2fbdafc5c850ba01fae428c1ad8a6ad13fb3ed94ddc06a21287eef0bd221/CoreNLG-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "0c321125aca0ceba8d17fea2820f680d", "sha256": "b93920bdebd8eabc98938c09ec967a77742fcc00c073fab921a3d8a5f4d0bac1"}, "downloads": -1, "filename": "CoreNLG-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0c321125aca0ceba8d17fea2820f680d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25228, "upload_time": "2020-01-06T11:10:57", "upload_time_iso_8601": "2020-01-06T11:10:57.886043Z", "url": "https://files.pythonhosted.org/packages/d5/1c/6f476e1b39a7137ff4d947cfafd446fe07d182c79d398c1ba380a3ed1886/CoreNLG-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ae72ce7fd1224bb10f79ba8a3a46b5c", "sha256": "f5c1ee6007e5dc05f253ae48d94d64fe9392e40d91a201454698c34ab96cab67"}, "downloads": -1, "filename": "CoreNLG-1.1.2.tar.gz", "has_sig": false, "md5_digest": "3ae72ce7fd1224bb10f79ba8a3a46b5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19073, "upload_time": "2020-01-06T11:10:59", "upload_time_iso_8601": "2020-01-06T11:10:59.449846Z", "url": "https://files.pythonhosted.org/packages/7f/91/bb04e2973e80860595af72b4e5e74e1fa3e51a7b5c7006c11dfdfa4c7c7a/CoreNLG-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "681a40726a98c490812e8ad48f6c606d", "sha256": "e05c5a54846dd0de7c8b505232b8e07ef031eccf61e44dafa9b3a420d2a4085e"}, "downloads": -1, "filename": "CoreNLG-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "681a40726a98c490812e8ad48f6c606d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25229, "upload_time": "2020-01-06T17:19:05", "upload_time_iso_8601": "2020-01-06T17:19:05.911514Z", "url": "https://files.pythonhosted.org/packages/79/c0/579c9cd3bd0536788260c6b6ff9052b7058c03ba46a3505b14d37e610e83/CoreNLG-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fb1d656037fc07faee211185a88e975", "sha256": "c0805b27849afed260ec0c8e37d0a24e6854d78cf590d124c9939e28cc97db63"}, "downloads": -1, "filename": "CoreNLG-1.1.3.tar.gz", "has_sig": false, "md5_digest": "5fb1d656037fc07faee211185a88e975", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19077, "upload_time": "2020-01-06T17:19:07", "upload_time_iso_8601": "2020-01-06T17:19:07.442775Z", "url": "https://files.pythonhosted.org/packages/15/f3/0d197b463ddd345cee50f88dd8f8ed9285a79e270803b225c2d9d7d2c5d1/CoreNLG-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "5f1472dfad84438fc60105a37475a660", "sha256": "e34c52ca079cf98785000bff19f180f1ec11769b2005abedd24fdfb6603fcd21"}, "downloads": -1, "filename": "CoreNLG-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "5f1472dfad84438fc60105a37475a660", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24932, "upload_time": "2020-01-27T09:42:48", "upload_time_iso_8601": "2020-01-27T09:42:48.331326Z", "url": "https://files.pythonhosted.org/packages/90/17/eaedf1656d6df63ad65edd5d7e7b7a78932b744a28485351f2146d3d06b9/CoreNLG-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b5fe99ca64e40e5c17972ac6f6e60a9", "sha256": "498c7f4213092cf3515ea5411126ff6cbf53a45cb359978fd70f06bba9216a2b"}, "downloads": -1, "filename": "CoreNLG-1.1.4.tar.gz", "has_sig": false, "md5_digest": "3b5fe99ca64e40e5c17972ac6f6e60a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18977, "upload_time": "2020-01-27T09:42:50", "upload_time_iso_8601": "2020-01-27T09:42:50.044738Z", "url": "https://files.pythonhosted.org/packages/1e/c5/12d83adba508817e1cfea72ce4d8cb9aa58c0e559a307188c576f92901f0/CoreNLG-1.1.4.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "ee319580029bd1829081c507d89d72b3", "sha256": "b6d6a32f6d2d2494431533ab5c77d2cd09ea3346726945cfae4832614866c3aa"}, "downloads": -1, "filename": "CoreNLG-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ee319580029bd1829081c507d89d72b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34161, "upload_time": "2019-12-18T18:07:34", "upload_time_iso_8601": "2019-12-18T18:07:34.666787Z", "url": "https://files.pythonhosted.org/packages/85/58/0ddca495658f6d1d4d4e9312b4217b5433f017a3cfcb8cd3a0cccfbf931e/CoreNLG-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "454704657cd3a9b7ace695f7ddace346", "sha256": "655c9cdc07fac397a0e58191d588b0188a8a1d00b9bfea48d023221888e1ab9f"}, "downloads": -1, "filename": "CoreNLG-2.0.0.tar.gz", "has_sig": false, "md5_digest": "454704657cd3a9b7ace695f7ddace346", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19732, "upload_time": "2019-12-18T18:10:03", "upload_time_iso_8601": "2019-12-18T18:10:03.938980Z", "url": "https://files.pythonhosted.org/packages/c1/62/e10d77a98c83429af314bd0af9eedf2f700382e0cb44663d1cf9993b4404/CoreNLG-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "728cf09b609ca93b9ee995bb20111099", "sha256": "47c139795d553d7a948d89dce0c2c2c105b23bdfd9880db3ce2dc73068410a90"}, "downloads": -1, "filename": "CoreNLG-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "728cf09b609ca93b9ee995bb20111099", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34156, "upload_time": "2019-12-18T18:07:36", "upload_time_iso_8601": "2019-12-18T18:07:36.439600Z", "url": "https://files.pythonhosted.org/packages/31/7e/5804a61fe6248e38a762e9d2e014e265421a386b9cd7e02e344183a9c151/CoreNLG-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96ef71811a9b3e56ddcb98577d2681ef", "sha256": "5a74b4f2ca9764ed7d84285da0439df6048ac1f80811370dcd9e663ec4703954"}, "downloads": -1, "filename": "CoreNLG-2.0.1.tar.gz", "has_sig": false, "md5_digest": "96ef71811a9b3e56ddcb98577d2681ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19717, "upload_time": "2019-12-18T18:10:05", "upload_time_iso_8601": "2019-12-18T18:10:05.677196Z", "url": "https://files.pythonhosted.org/packages/e5/d0/5dd6377500a523672a92c09b0c6244b13196fa6697d858253cf53ce8e774/CoreNLG-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "ff9f4e7f636a9116a4e7d59ea20bf14f", "sha256": "945baa06e99200cd94e25d500cf7b32243e1a270fd3e63acc400f718f2aa7c51"}, "downloads": -1, "filename": "CoreNLG-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ff9f4e7f636a9116a4e7d59ea20bf14f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34230, "upload_time": "2019-12-18T18:07:38", "upload_time_iso_8601": "2019-12-18T18:07:38.150571Z", "url": "https://files.pythonhosted.org/packages/9f/22/e0607d894dae201d9a131cbd3a5a975dce5214f77f9f3488b823b5b24e39/CoreNLG-2.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9a06aea1b0978231e9083c192fc8fed", "sha256": "579efab606e9c460843dc65cb426f3d557c2dd2508b51a381f779ae5fd7d46cd"}, "downloads": -1, "filename": "CoreNLG-2.0.2.tar.gz", "has_sig": false, "md5_digest": "e9a06aea1b0978231e9083c192fc8fed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19772, "upload_time": "2019-12-18T18:10:07", "upload_time_iso_8601": "2019-12-18T18:10:07.414791Z", "url": "https://files.pythonhosted.org/packages/cd/b0/a4a8f3c113a7caf02bf26f255fe195b9a45d2ea1c15d55ae50fd780495c6/CoreNLG-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "e49ba34542d5e5d1f7045af0ce4f9c74", "sha256": "3a3f5bb4b93d3f55f82935f9147ca1e6f81f33d648c39a00c2789ca3d3232626"}, "downloads": -1, "filename": "CoreNLG-2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e49ba34542d5e5d1f7045af0ce4f9c74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34229, "upload_time": "2019-12-18T18:07:40", "upload_time_iso_8601": "2019-12-18T18:07:40.132044Z", "url": "https://files.pythonhosted.org/packages/6f/a2/20c7159e495426c7eb3592a282f7121dddda8a96ffcb6576efae9011ad31/CoreNLG-2.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cefdd66a6e04dc680f384b1e2f982355", "sha256": "86780bfc87a638e8964519bdc49ad826c0ec8494507c217d4e519cd13a43061f"}, "downloads": -1, "filename": "CoreNLG-2.0.3.tar.gz", "has_sig": false, "md5_digest": "cefdd66a6e04dc680f384b1e2f982355", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19776, "upload_time": "2019-12-18T18:10:09", "upload_time_iso_8601": "2019-12-18T18:10:09.376253Z", "url": "https://files.pythonhosted.org/packages/25/69/b6f8834e7c65cf2188e782c18cb3d39e82d0c42a2017ce9c90137586bcd6/CoreNLG-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "a561562d8f00460339908c3c71237520", "sha256": "0a5f38a30cdc20af4b7a83564c4c1348a52c90ccf7c3715c378be81cb5ad46d7"}, "downloads": -1, "filename": "CoreNLG-2.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a561562d8f00460339908c3c71237520", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28384, "upload_time": "2020-01-03T14:22:19", "upload_time_iso_8601": "2020-01-03T14:22:19.289373Z", "url": "https://files.pythonhosted.org/packages/4e/4a/726f8f7540751c425b67993c9f718bd61660f038679c6d161fe5cc5fa097/CoreNLG-2.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42602538620dcb881ac49f91cd505dfd", "sha256": "b3cc0ebafa18c5664fc79bc07d60cb2ab2ea15842760fe03123f0bd07a42e48d"}, "downloads": -1, "filename": "CoreNLG-2.0.4.tar.gz", "has_sig": false, "md5_digest": "42602538620dcb881ac49f91cd505dfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20008, "upload_time": "2020-01-03T14:22:21", "upload_time_iso_8601": "2020-01-03T14:22:21.106017Z", "url": "https://files.pythonhosted.org/packages/65/20/9f9158a510ed42f24257203e1fd954feb27ceabd8ab0657656c9c0e34dd4/CoreNLG-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "c316446fcbf6378f732a6378d51220d3", "sha256": "4c88ce1375a36e26966745909078567293c75fc61795bb6e042b44722c311bdd"}, "downloads": -1, "filename": "CoreNLG-2.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c316446fcbf6378f732a6378d51220d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28415, "upload_time": "2020-01-06T15:02:12", "upload_time_iso_8601": "2020-01-06T15:02:12.212915Z", "url": "https://files.pythonhosted.org/packages/d4/fa/3dff8231936e4babbe54d5fd808ef238b4248b3b8a0fd755ab3fa1a83c7a/CoreNLG-2.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d80fada93733feef41372ebd6568d16d", "sha256": "f86750a6de557138f19549e0d9f93b0fe9817c9bdf89f2473ddbda75e0f4c091"}, "downloads": -1, "filename": "CoreNLG-2.0.5.tar.gz", "has_sig": false, "md5_digest": "d80fada93733feef41372ebd6568d16d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20033, "upload_time": "2020-01-06T15:02:14", "upload_time_iso_8601": "2020-01-06T15:02:14.132841Z", "url": "https://files.pythonhosted.org/packages/54/25/ef580fd8605a80ab9a31223763f550c02c4fa8e2c9002576a8e38522cdb3/CoreNLG-2.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c316446fcbf6378f732a6378d51220d3", "sha256": "4c88ce1375a36e26966745909078567293c75fc61795bb6e042b44722c311bdd"}, "downloads": -1, "filename": "CoreNLG-2.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c316446fcbf6378f732a6378d51220d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28415, "upload_time": "2020-01-06T15:02:12", "upload_time_iso_8601": "2020-01-06T15:02:12.212915Z", "url": "https://files.pythonhosted.org/packages/d4/fa/3dff8231936e4babbe54d5fd808ef238b4248b3b8a0fd755ab3fa1a83c7a/CoreNLG-2.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d80fada93733feef41372ebd6568d16d", "sha256": "f86750a6de557138f19549e0d9f93b0fe9817c9bdf89f2473ddbda75e0f4c091"}, "downloads": -1, "filename": "CoreNLG-2.0.5.tar.gz", "has_sig": false, "md5_digest": "d80fada93733feef41372ebd6568d16d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20033, "upload_time": "2020-01-06T15:02:14", "upload_time_iso_8601": "2020-01-06T15:02:14.132841Z", "url": "https://files.pythonhosted.org/packages/54/25/ef580fd8605a80ab9a31223763f550c02c4fa8e2c9002576a8e38522cdb3/CoreNLG-2.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:11 2020"}