{"info": {"author": "M. Stanley Fujimoto and Cole A. Lyman", "author_email": "sfujimoto@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# kcollections\n[![Build Status](https://travis-ci.com/masakistan/kcollections.svg?token=oruFeF6Jkw9aGsjG6xUW&branch=master)](https://travis-ci.com/masakistan/kcollections)\n\nA fast and efficient library for storing k-mers in c++ and python.\n\n## About\n`kcollections` is a python-like `dict` and `set` that efficiently store kmers as keys or elements of the collection.\nIt is designed for building/prototyping Bioinformatics tools that rely on kmers but where the included `dict` and `set` consume too much memory for use.\n\nIt implements the [Bloom Filter Trie](https://github.com/GuillaumeHolley/BloomFilterTrie) algorithm.\nThis implementation differs from Guillaume et al. by allowing kmers of arbitrary size and by providing a generic dictionary/map data structure for associating arbitrary values with kmers.\n\n`kcollections` is currently only available for Python version 2.7.\n\n## Installation\nWe provide some pre-compiled binaries for python 2/3 and Linux and MacOS:\n\n```bash\npip install kcollections\n```\n\nAlternatively, you can build from source.\n\n### Build from source\nPrerequisites include:\n\n  - [CMake](https://cmake.org/), must be installed manually in order to build the code.\n  - [boost](https://www.boost.org/), at least version 1.65.1\n  - [uint256_t](https://github.com/calccrypto/uint256_t), included in the repository.\n  - [pybind11](https://github.com/pybind/pybind11), included in the repository.\n\nTo build and install the python module from source:\n\n```bash\ngit clone https://github.com/masakistan/kcollections.git\ncd kcollections\n\n# python 3\npython3 setup.py install\n# or\npip3 install .\n\n# python 2\npython2 setup.py install\n# or\npip2 install .\n```\n\nAdditionally, if you would like to access the functions from a C++ program, you can build static libraries with the following steps:\n\n``` bash\ngit clone https://github.com/masakistan/kcollections.git\ncd kcollections\n\nmkdir build\ncd build\n\ncmake ..\nmake\n```\n\n## Example Usage\n\n### Using Kset\n\n#### Serial Insertion, writing/reading to/from disk\nKmers can be added one at a time with `add`, but the fastest way to add kmers to a set is\nto add a DNA sequence using `add_seq`.\n\n```python\nimport kcollections\nks = kcollections.Kset(27)\n\n# add single kmer\nks.add('AAACTGTCTTCCTTTATTTGTTCAGGG')\n\n# sequence insertion\nseq = 'AAACTGTCTTCCTTTATTTGTTCAGGGATCGTGTCAGTA'\nks.add_seq(seq, len(seq))\n\nassert 'AAACTGTCTTCCTTTATTTGTTCAGGG' in ks\n# iteration\nfor kmer in ks:\n    print kmer\n\nks.write(\"data.bs\")\ndel ks\n\n# sometime later\n\nks = Kcollections.Kset()\nks.read(\"data.bs\")\n```\n\n#### Parallel Insertion\nThe fastest way to use `Kset` is to use multithreaded insertion.\nMultithreaded approach is best used when all kmers are loaded upfront.\nKmers not accessible until the threads have been joined using\n`parallel_add_join`.\nSee the example below on how parallel and serial insertions can be used.\n\n```python\nimport kcollections\nks = kcollections.Kset(27)\n\n# multithreaded sequence insertion\n# nthreads must be a power of 2.\n# nthreads = 4 or 16 work well\nks.parallel_add_init(16)\n\n# insert a sequence of kmers\nks.parallel_add_seq(seq)\n\n# insert a single kmer\nks.parallel_add('AAACTGTCTTCCTTTATTTGTTCACAG')\n\n# merge threads together\n# no parallel add methods can be used after joining\nks.parallel_add_join()\n\n# serial add is permissible after threads have joined\nks.add('AAACTGTCTTCCTTTATTTGTTCACAG')\n\n# iteration\nfor kmer in ks:\n    print(kmer)\nprint len(ks)\n```\n\n### Using Kdict\n\n#### Serial Insertion\n```python\nimport kcollections\nkd = kcollections.Kdict(str, 27)\n\n# insertion and value assignment\nkd['AAACTGTCTTCCTTTATTTGTTCAGGG'] = 'banana'\nkd['AAACTGTCTTCCTTTATTTGTTCAGGT'] = 'phone'\nassert kd['AAACTGTCTTCCTTTATTTGTTCAGGG'] == 'banana'\nassert kd['AAACTGTCTTCCTTTATTTGTTCAGGT'] == 'phone'\n\n# iteration\nfor kmer, val in kd.items():\n    print(kmer, val)\n\n# removal\ndel kd['AAACTGTCTTCCTTTATTTGTTCAGGT']\n```\n\n#### Parallel Insertion\nParallel insertion for `Kdict` requires the inclusion of a merging function to resolve different values for the same key.\nThe following snippet adds 27mers from a string of DNA using a provided lambda function to merge value conflicts.\nThis merge function simply keeps the newest value associated with the kmer.\nMore examples of merging functions with `Kdict` can be found [here](kdict_merging.md).\n\n```python\nkd = kcollections.Kdict(int, 27)\nkd.parallel_add_init(4)\nkd.set_merge_func(lambda prev_val, new_val: new_val)\nkd.parallel_add_seq(dna, generate_idx(len(dna)))\nkd.parallel_add_join()\n```\n\n### Using Kcounter\n\n`Kcounter` is an implementation of the Python collection's\n[Counter](https://docs.python.org/2/library/collections.html#collections.Counter),\nbut the keys must be kmers, of course!\nLike `Kdict`, kmers can be added to `Kcounter` one at a time, but the\nfastest ways to add kmers to a set is to add an DNA sequence using `add_seq` (or\n`parallel_add_seq` for multithreaded inserts).\n\n#### Serial Insertion\n```python\nfrom kcollections import Kcounter\nkc = Kcounter(27)\n\n# add single kmer\nkc['AAACTGTCTTCCTTTATTTGTTCAGGG'] += 1\n\n# sequence insertion\nseq = 'AAACTGTCTTCCTTTATTTGTTCAGGGATCGTGTCAGTA'\nkc.add_seq(seq)\n\nassert kc['AAACTGTCTTCCTTTATTTGTTCAGGG'] == 2\n\n# iteration\nfor kmer, count in kc.items():\n    print(kmer, count)\n```\n\n#### Parallel Insertion\n\n```python\nfrom kcollections import Kcounter\nkc = Kcounter(27)\n\n# multithreaded sequence insertion\n# nthreads must be a power of 2.\n# nthreads = 4 or 16 work well\nkc.parallel_add_init(16)\n\n# insert a sequence of kmers\nkc.parallel_add_seq(seq)\n\n# insert a single kmer\nkc.parallel_add('AAACTGTCTTCCTTTATTTGTTCACAG')\n\n# merge threads together\n# no parallel add methods can be used after joining\nkc.parallel_add_join()\n\n# updates can be made after the join\nkc['AAACTGTCTTCCTTTATTTGTTCAGGG'] += 1\n\n# iteration\nfor kmer, count in kc.items():\n    print(kmer, count)\n```\n\n## Performance\n`kcollections` is quite a bit slower than the `dict` or `set` but is much more memory-efficient.\nWe measured memory usage and running time using `/usr/bin/time -v` on a`Intel(R)\nXeon(R) E5-2650v4 @2.20GHz` with 256 GB RAM.\n27mers used for testing were taken from the human genome, no repetitive kmers appear in our dataset providing a worst case scenario where no insertions or queries are pruned before traversing the entire data structure.\n\n### Memory Usage\n\n|# kmers|`kset`|`set`|\n|-------|------|-----|\n|1 million|25.32 MB|105.82 MB|\n|10 million|63.74 MB|906.96 MB|\n|100 million|0.56 GB|11.98 GB|\n|500 million|2.42 GB|48.54 GB|\n|1 billion|4.43 GB|97.07 GB|\n|1.5 billion|6.44 GB|191.61 GB|\n|2 billion|8.44 GB|194.14 GB|\n|2.4 billion|10.08 GB|220.06 GB|\n\n![Figure of memory usage](./memory_fig.png)\n\n### Insertion Time\nInsertion time comparisons using built-in Python set, `kcollections` serial and parallel insert.\n\n![Figure of insertion time](./insert_time.png)\n\n### Read Mapper and Assembler\nAn example read mapping algorithm and assembler are provided using `kcollections` in the `applications` directory.\n\n## Citation\n\n## Acknowledgements\n`kcollections` was built at the Computational Science Laboratory at Brigham Young University by Stanley Fujimoto (@masakistan) and Cole Lyman (@colelyman).\n\nFunding was provided by the Utah NASA Space Grant Consortium and the BYU Graduate Research Fellowship.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/masakistan/kcollections", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "kcollections", "package_url": "https://pypi.org/project/kcollections/", "platform": "", "project_url": "https://pypi.org/project/kcollections/", "project_urls": {"Homepage": "https://github.com/masakistan/kcollections"}, "release_url": "https://pypi.org/project/kcollections/1.0.5/", "requires_dist": null, "requires_python": "", "summary": "A BloomFilterTrie implementation to be generally applicable for genomic applications.", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>kcollections</h1>\n<p><a href=\"https://travis-ci.com/masakistan/kcollections\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0847a228567cbbf298e1cedff9798dc63719cb1/68747470733a2f2f7472617669732d63692e636f6d2f6d6173616b697374616e2f6b636f6c6c656374696f6e732e7376673f746f6b656e3d6f7275466546364a6b77396147736a4736785557266272616e63683d6d6173746572\"></a></p>\n<p>A fast and efficient library for storing k-mers in c++ and python.</p>\n<h2>About</h2>\n<p><code>kcollections</code> is a python-like <code>dict</code> and <code>set</code> that efficiently store kmers as keys or elements of the collection.\nIt is designed for building/prototyping Bioinformatics tools that rely on kmers but where the included <code>dict</code> and <code>set</code> consume too much memory for use.</p>\n<p>It implements the <a href=\"https://github.com/GuillaumeHolley/BloomFilterTrie\" rel=\"nofollow\">Bloom Filter Trie</a> algorithm.\nThis implementation differs from Guillaume et al. by allowing kmers of arbitrary size and by providing a generic dictionary/map data structure for associating arbitrary values with kmers.</p>\n<p><code>kcollections</code> is currently only available for Python version 2.7.</p>\n<h2>Installation</h2>\n<p>We provide some pre-compiled binaries for python 2/3 and Linux and MacOS:</p>\n<pre>pip install kcollections\n</pre>\n<p>Alternatively, you can build from source.</p>\n<h3>Build from source</h3>\n<p>Prerequisites include:</p>\n<ul>\n<li><a href=\"https://cmake.org/\" rel=\"nofollow\">CMake</a>, must be installed manually in order to build the code.</li>\n<li><a href=\"https://www.boost.org/\" rel=\"nofollow\">boost</a>, at least version 1.65.1</li>\n<li><a href=\"https://github.com/calccrypto/uint256_t\" rel=\"nofollow\">uint256_t</a>, included in the repository.</li>\n<li><a href=\"https://github.com/pybind/pybind11\" rel=\"nofollow\">pybind11</a>, included in the repository.</li>\n</ul>\n<p>To build and install the python module from source:</p>\n<pre>git clone https://github.com/masakistan/kcollections.git\n<span class=\"nb\">cd</span> kcollections\n\n<span class=\"c1\"># python 3</span>\npython3 setup.py install\n<span class=\"c1\"># or</span>\npip3 install .\n\n<span class=\"c1\"># python 2</span>\npython2 setup.py install\n<span class=\"c1\"># or</span>\npip2 install .\n</pre>\n<p>Additionally, if you would like to access the functions from a C++ program, you can build static libraries with the following steps:</p>\n<pre>git clone https://github.com/masakistan/kcollections.git\n<span class=\"nb\">cd</span> kcollections\n\nmkdir build\n<span class=\"nb\">cd</span> build\n\ncmake ..\nmake\n</pre>\n<h2>Example Usage</h2>\n<h3>Using Kset</h3>\n<h4>Serial Insertion, writing/reading to/from disk</h4>\n<p>Kmers can be added one at a time with <code>add</code>, but the fastest way to add kmers to a set is\nto add a DNA sequence using <code>add_seq</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kcollections</span>\n<span class=\"n\">ks</span> <span class=\"o\">=</span> <span class=\"n\">kcollections</span><span class=\"o\">.</span><span class=\"n\">Kset</span><span class=\"p\">(</span><span class=\"mi\">27</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># add single kmer</span>\n<span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGG'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sequence insertion</span>\n<span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGGATCGTGTCAGTA'</span>\n<span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"n\">add_seq</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">))</span>\n\n<span class=\"k\">assert</span> <span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGG'</span> <span class=\"ow\">in</span> <span class=\"n\">ks</span>\n<span class=\"c1\"># iteration</span>\n<span class=\"k\">for</span> <span class=\"n\">kmer</span> <span class=\"ow\">in</span> <span class=\"n\">ks</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"n\">kmer</span>\n\n<span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"data.bs\"</span><span class=\"p\">)</span>\n<span class=\"k\">del</span> <span class=\"n\">ks</span>\n\n<span class=\"c1\"># sometime later</span>\n\n<span class=\"n\">ks</span> <span class=\"o\">=</span> <span class=\"n\">Kcollections</span><span class=\"o\">.</span><span class=\"n\">Kset</span><span class=\"p\">()</span>\n<span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"data.bs\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Parallel Insertion</h4>\n<p>The fastest way to use <code>Kset</code> is to use multithreaded insertion.\nMultithreaded approach is best used when all kmers are loaded upfront.\nKmers not accessible until the threads have been joined using\n<code>parallel_add_join</code>.\nSee the example below on how parallel and serial insertions can be used.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kcollections</span>\n<span class=\"n\">ks</span> <span class=\"o\">=</span> <span class=\"n\">kcollections</span><span class=\"o\">.</span><span class=\"n\">Kset</span><span class=\"p\">(</span><span class=\"mi\">27</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># multithreaded sequence insertion</span>\n<span class=\"c1\"># nthreads must be a power of 2.</span>\n<span class=\"c1\"># nthreads = 4 or 16 work well</span>\n<span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"n\">parallel_add_init</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># insert a sequence of kmers</span>\n<span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"n\">parallel_add_seq</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># insert a single kmer</span>\n<span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"n\">parallel_add</span><span class=\"p\">(</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCACAG'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># merge threads together</span>\n<span class=\"c1\"># no parallel add methods can be used after joining</span>\n<span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"n\">parallel_add_join</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># serial add is permissible after threads have joined</span>\n<span class=\"n\">ks</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCACAG'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># iteration</span>\n<span class=\"k\">for</span> <span class=\"n\">kmer</span> <span class=\"ow\">in</span> <span class=\"n\">ks</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kmer</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ks</span><span class=\"p\">)</span>\n</pre>\n<h3>Using Kdict</h3>\n<h4>Serial Insertion</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kcollections</span>\n<span class=\"n\">kd</span> <span class=\"o\">=</span> <span class=\"n\">kcollections</span><span class=\"o\">.</span><span class=\"n\">Kdict</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"mi\">27</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># insertion and value assignment</span>\n<span class=\"n\">kd</span><span class=\"p\">[</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGG'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'banana'</span>\n<span class=\"n\">kd</span><span class=\"p\">[</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGT'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'phone'</span>\n<span class=\"k\">assert</span> <span class=\"n\">kd</span><span class=\"p\">[</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGG'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'banana'</span>\n<span class=\"k\">assert</span> <span class=\"n\">kd</span><span class=\"p\">[</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGT'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'phone'</span>\n\n<span class=\"c1\"># iteration</span>\n<span class=\"k\">for</span> <span class=\"n\">kmer</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">kd</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kmer</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># removal</span>\n<span class=\"k\">del</span> <span class=\"n\">kd</span><span class=\"p\">[</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGT'</span><span class=\"p\">]</span>\n</pre>\n<h4>Parallel Insertion</h4>\n<p>Parallel insertion for <code>Kdict</code> requires the inclusion of a merging function to resolve different values for the same key.\nThe following snippet adds 27mers from a string of DNA using a provided lambda function to merge value conflicts.\nThis merge function simply keeps the newest value associated with the kmer.\nMore examples of merging functions with <code>Kdict</code> can be found <a href=\"kdict_merging.md\" rel=\"nofollow\">here</a>.</p>\n<pre><span class=\"n\">kd</span> <span class=\"o\">=</span> <span class=\"n\">kcollections</span><span class=\"o\">.</span><span class=\"n\">Kdict</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"mi\">27</span><span class=\"p\">)</span>\n<span class=\"n\">kd</span><span class=\"o\">.</span><span class=\"n\">parallel_add_init</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">kd</span><span class=\"o\">.</span><span class=\"n\">set_merge_func</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">prev_val</span><span class=\"p\">,</span> <span class=\"n\">new_val</span><span class=\"p\">:</span> <span class=\"n\">new_val</span><span class=\"p\">)</span>\n<span class=\"n\">kd</span><span class=\"o\">.</span><span class=\"n\">parallel_add_seq</span><span class=\"p\">(</span><span class=\"n\">dna</span><span class=\"p\">,</span> <span class=\"n\">generate_idx</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">dna</span><span class=\"p\">)))</span>\n<span class=\"n\">kd</span><span class=\"o\">.</span><span class=\"n\">parallel_add_join</span><span class=\"p\">()</span>\n</pre>\n<h3>Using Kcounter</h3>\n<p><code>Kcounter</code> is an implementation of the Python collection's\n<a href=\"https://docs.python.org/2/library/collections.html#collections.Counter\" rel=\"nofollow\">Counter</a>,\nbut the keys must be kmers, of course!\nLike <code>Kdict</code>, kmers can be added to <code>Kcounter</code> one at a time, but the\nfastest ways to add kmers to a set is to add an DNA sequence using <code>add_seq</code> (or\n<code>parallel_add_seq</code> for multithreaded inserts).</p>\n<h4>Serial Insertion</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kcollections</span> <span class=\"kn\">import</span> <span class=\"n\">Kcounter</span>\n<span class=\"n\">kc</span> <span class=\"o\">=</span> <span class=\"n\">Kcounter</span><span class=\"p\">(</span><span class=\"mi\">27</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># add single kmer</span>\n<span class=\"n\">kc</span><span class=\"p\">[</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGG'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># sequence insertion</span>\n<span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGGATCGTGTCAGTA'</span>\n<span class=\"n\">kc</span><span class=\"o\">.</span><span class=\"n\">add_seq</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">kc</span><span class=\"p\">[</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGG'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># iteration</span>\n<span class=\"k\">for</span> <span class=\"n\">kmer</span><span class=\"p\">,</span> <span class=\"n\">count</span> <span class=\"ow\">in</span> <span class=\"n\">kc</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kmer</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n</pre>\n<h4>Parallel Insertion</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kcollections</span> <span class=\"kn\">import</span> <span class=\"n\">Kcounter</span>\n<span class=\"n\">kc</span> <span class=\"o\">=</span> <span class=\"n\">Kcounter</span><span class=\"p\">(</span><span class=\"mi\">27</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># multithreaded sequence insertion</span>\n<span class=\"c1\"># nthreads must be a power of 2.</span>\n<span class=\"c1\"># nthreads = 4 or 16 work well</span>\n<span class=\"n\">kc</span><span class=\"o\">.</span><span class=\"n\">parallel_add_init</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># insert a sequence of kmers</span>\n<span class=\"n\">kc</span><span class=\"o\">.</span><span class=\"n\">parallel_add_seq</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># insert a single kmer</span>\n<span class=\"n\">kc</span><span class=\"o\">.</span><span class=\"n\">parallel_add</span><span class=\"p\">(</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCACAG'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># merge threads together</span>\n<span class=\"c1\"># no parallel add methods can be used after joining</span>\n<span class=\"n\">kc</span><span class=\"o\">.</span><span class=\"n\">parallel_add_join</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># updates can be made after the join</span>\n<span class=\"n\">kc</span><span class=\"p\">[</span><span class=\"s1\">'AAACTGTCTTCCTTTATTTGTTCAGGG'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># iteration</span>\n<span class=\"k\">for</span> <span class=\"n\">kmer</span><span class=\"p\">,</span> <span class=\"n\">count</span> <span class=\"ow\">in</span> <span class=\"n\">kc</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kmer</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">)</span>\n</pre>\n<h2>Performance</h2>\n<p><code>kcollections</code> is quite a bit slower than the <code>dict</code> or <code>set</code> but is much more memory-efficient.\nWe measured memory usage and running time using <code>/usr/bin/time -v</code> on a<code>Intel(R) Xeon(R) E5-2650v4 @2.20GHz</code> with 256 GB RAM.\n27mers used for testing were taken from the human genome, no repetitive kmers appear in our dataset providing a worst case scenario where no insertions or queries are pruned before traversing the entire data structure.</p>\n<h3>Memory Usage</h3>\n<table>\n<thead>\n<tr>\n<th># kmers</th>\n<th><code>kset</code></th>\n<th><code>set</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1 million</td>\n<td>25.32 MB</td>\n<td>105.82 MB</td>\n</tr>\n<tr>\n<td>10 million</td>\n<td>63.74 MB</td>\n<td>906.96 MB</td>\n</tr>\n<tr>\n<td>100 million</td>\n<td>0.56 GB</td>\n<td>11.98 GB</td>\n</tr>\n<tr>\n<td>500 million</td>\n<td>2.42 GB</td>\n<td>48.54 GB</td>\n</tr>\n<tr>\n<td>1 billion</td>\n<td>4.43 GB</td>\n<td>97.07 GB</td>\n</tr>\n<tr>\n<td>1.5 billion</td>\n<td>6.44 GB</td>\n<td>191.61 GB</td>\n</tr>\n<tr>\n<td>2 billion</td>\n<td>8.44 GB</td>\n<td>194.14 GB</td>\n</tr>\n<tr>\n<td>2.4 billion</td>\n<td>10.08 GB</td>\n<td>220.06 GB</td>\n</tr></tbody></table>\n<p><img alt=\"Figure of memory usage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31781613e5e9f9a64c407b70a0b8e04a4f68b1e8/2e2f6d656d6f72795f6669672e706e67\"></p>\n<h3>Insertion Time</h3>\n<p>Insertion time comparisons using built-in Python set, <code>kcollections</code> serial and parallel insert.</p>\n<p><img alt=\"Figure of insertion time\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/465b0de174f8d779f70533542087ec3a02ba5cde/2e2f696e736572745f74696d652e706e67\"></p>\n<h3>Read Mapper and Assembler</h3>\n<p>An example read mapping algorithm and assembler are provided using <code>kcollections</code> in the <code>applications</code> directory.</p>\n<h2>Citation</h2>\n<h2>Acknowledgements</h2>\n<p><code>kcollections</code> was built at the Computational Science Laboratory at Brigham Young University by Stanley Fujimoto (@masakistan) and Cole Lyman (@colelyman).</p>\n<p>Funding was provided by the Utah NASA Space Grant Consortium and the BYU Graduate Research Fellowship.</p>\n\n          </div>"}, "last_serial": 6604516, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "3bcfd6daee406c409cffd8bc59da0d10", "sha256": "1457da0d0b1b54fb7fc9b64e8f9dc8500bbff0df40eec2bfbaca6a78b4cb6232"}, "downloads": -1, "filename": "kcollections-1.0.1-cp27-cp27m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "3bcfd6daee406c409cffd8bc59da0d10", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 857014, "upload_time": "2020-02-04T15:57:01", "upload_time_iso_8601": "2020-02-04T15:57:01.142782Z", "url": "https://files.pythonhosted.org/packages/34/2e/546128652c456854f0d544a604d887bc94ea05015cb1e7d32086b3075ec5/kcollections-1.0.1-cp27-cp27m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a065b3fad1592f6716d780d1326c81ea", "sha256": "1c579d069ad7209bad7a0155eb95704be240762b5824e00d3539a97892e855d7"}, "downloads": -1, "filename": "kcollections-1.0.1-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a065b3fad1592f6716d780d1326c81ea", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 716717, "upload_time": "2020-02-04T16:02:35", "upload_time_iso_8601": "2020-02-04T16:02:35.963302Z", "url": "https://files.pythonhosted.org/packages/d1/a5/fa4adaab91af0455556e8bf2ac69c9223e6553cbf2f9270f4314aa4bab84/kcollections-1.0.1-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4dae7cc1b351e5630c42015eb4ab3a70", "sha256": "7aaadc8da6bcc5e79b01481d91d232a48a5a94d51c538471f6977a0f567ab111"}, "downloads": -1, "filename": "kcollections-1.0.1-cp27-cp27mu-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4dae7cc1b351e5630c42015eb4ab3a70", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 716665, "upload_time": "2020-02-04T16:02:38", "upload_time_iso_8601": "2020-02-04T16:02:38.114658Z", "url": "https://files.pythonhosted.org/packages/24/8f/3d1d218772f06846eca19abfbe7040ab8f6e7fbb2e4b98eefda2e20907f1/kcollections-1.0.1-cp27-cp27mu-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2cadf78a6faa977a455d780e014c974", "sha256": "e94f75693430bebcbf9b899434e8ec9a65d386439053f3a8d8258fcbefe2cc4e"}, "downloads": -1, "filename": "kcollections-1.0.1-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c2cadf78a6faa977a455d780e014c974", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 716594, "upload_time": "2020-02-04T16:02:39", "upload_time_iso_8601": "2020-02-04T16:02:39.742831Z", "url": "https://files.pythonhosted.org/packages/54/7c/085929271493582b799dc7c5cc78daf08a99d5e5775e868bf0f5d2f861dd/kcollections-1.0.1-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "561adf28db17a094b832294e8a8c9b70", "sha256": "1ad473d60fb3634b07516007e04125bcc29c5a6818d449c60f7bb0eeda016148"}, "downloads": -1, "filename": "kcollections-1.0.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "561adf28db17a094b832294e8a8c9b70", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 717259, "upload_time": "2020-02-04T16:02:42", "upload_time_iso_8601": "2020-02-04T16:02:42.498482Z", "url": "https://files.pythonhosted.org/packages/3e/c5/727f0b3325134b97fea33cd419c460b29d92250fe6d0074009b2f860675a/kcollections-1.0.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88de0270d3bb89a8b7fcd1956e074c15", "sha256": "28e69422b793227f1558f73d9e6969212e28964754e9ee45da1ab8c27580faa3"}, "downloads": -1, "filename": "kcollections-1.0.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "88de0270d3bb89a8b7fcd1956e074c15", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 717255, "upload_time": "2020-02-04T16:02:44", "upload_time_iso_8601": "2020-02-04T16:02:44.142544Z", "url": "https://files.pythonhosted.org/packages/0a/53/6795eca24835e4d962ebae073c7b941149cdfc3809ffab07e2d5d1f1cd06/kcollections-1.0.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "956e9de2e174becdfb56d4ca187aeb56", "sha256": "c0745156e745011f8c264e4c3a538704551fc19675f63618334e1b65349c305a"}, "downloads": -1, "filename": "kcollections-1.0.1-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "956e9de2e174becdfb56d4ca187aeb56", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 857491, "upload_time": "2020-02-04T15:42:25", "upload_time_iso_8601": "2020-02-04T15:42:25.837351Z", "url": "https://files.pythonhosted.org/packages/83/d5/c75a6bee8bc6e09b2169bab26734b33d39eb83011a7fba9c87db55114673/kcollections-1.0.1-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9df625d9d2ab2aab38011846c207746", "sha256": "b49918de6ac7e0615314a07d14e41ba4343648f790504fb2e7a87bc3b8582a85"}, "downloads": -1, "filename": "kcollections-1.0.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "e9df625d9d2ab2aab38011846c207746", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 717845, "upload_time": "2020-02-04T16:02:46", "upload_time_iso_8601": "2020-02-04T16:02:46.628405Z", "url": "https://files.pythonhosted.org/packages/6f/9b/a41c8173792101b6854439173e631fecf06400bcf5ff5965f5a9a4aadfb1/kcollections-1.0.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "deb3cf4547dcb567db8a42b3b5b85507", "sha256": "66c6aaea906734f7eea871b262db683fc73f072d0617057b67f900c997edc454"}, "downloads": -1, "filename": "kcollections-1.0.1-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "deb3cf4547dcb567db8a42b3b5b85507", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 709967, "upload_time": "2020-02-04T16:02:48", "upload_time_iso_8601": "2020-02-04T16:02:48.329260Z", "url": "https://files.pythonhosted.org/packages/d6/a1/959cbdd96f5d89f91debc3677af29d0106f106d085b574de3f539340e5f3/kcollections-1.0.1-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c890965636c1bccb86cffba772bc593", "sha256": "cb1b7e4fac2882df8edbc847a5ea45a1f6bb3dd5a90536373ca587570eae0278"}, "downloads": -1, "filename": "kcollections-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9c890965636c1bccb86cffba772bc593", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 622340, "upload_time": "2020-02-04T16:02:49", "upload_time_iso_8601": "2020-02-04T16:02:49.858931Z", "url": "https://files.pythonhosted.org/packages/32/52/24b1590af839244973e4eebd1dda2507853f52dd4b49601f9561c0aa18a1/kcollections-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "1c53a74a0a084cc4f80623f062c6da5f", "sha256": "9f81d1cf92f7bc2eea7104d7fe51779db634cce947ca46b263d4ac0cba81b128"}, "downloads": -1, "filename": "kcollections-1.0.2-cp27-cp27m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "1c53a74a0a084cc4f80623f062c6da5f", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1079376, "upload_time": "2020-02-05T09:00:38", "upload_time_iso_8601": "2020-02-05T09:00:38.398223Z", "url": "https://files.pythonhosted.org/packages/77/5b/d5de96d38029e590252190983f472f0679344b4be940e1c5f4488f462f24/kcollections-1.0.2-cp27-cp27m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2e98a5399f2b992524949eca0bd60a4", "sha256": "77781e1e6170524e84d835240d376926fc49106cb4370640117cc6b2e1af0ca0"}, "downloads": -1, "filename": "kcollections-1.0.2-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "f2e98a5399f2b992524949eca0bd60a4", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1120272, "upload_time": "2020-02-05T08:54:52", "upload_time_iso_8601": "2020-02-05T08:54:52.438622Z", "url": "https://files.pythonhosted.org/packages/63/39/8b463f901b2c67a96d7fbfb2fa468a8e42d11546feee0cd32bf3f4b3dff7/kcollections-1.0.2-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61971599b462252b888cc3a0f09db032", "sha256": "44e90d184b86e27f9c919d42784c40caab01f0ccb478bc6d882180f6036105fd"}, "downloads": -1, "filename": "kcollections-1.0.2-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "61971599b462252b888cc3a0f09db032", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1124035, "upload_time": "2020-02-05T08:55:07", "upload_time_iso_8601": "2020-02-05T08:55:07.009412Z", "url": "https://files.pythonhosted.org/packages/23/1e/eccdb3b6efd57ad4d621fadca8e98563f0d942c60c64df1bab96e97ae3db/kcollections-1.0.2-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75075bc02c4632f940ea273c01a2ec75", "sha256": "15e81be1f01d728b76e40e26b39b1b1fae4ac11b43090aaf2bd9e6e66aca7f38"}, "downloads": -1, "filename": "kcollections-1.0.2-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "75075bc02c4632f940ea273c01a2ec75", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1125650, "upload_time": "2020-02-05T08:55:40", "upload_time_iso_8601": "2020-02-05T08:55:40.138230Z", "url": "https://files.pythonhosted.org/packages/55/28/9e286f36a18aef4f5c64a22a76b41003663a2a08951a9e9dc3544b37a2ae/kcollections-1.0.2-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79b1ad3802d017ef4edf9c2f3d4811e7", "sha256": "48539dd9ed005c08250f2e69c81e1c454008f3be07f702688b50928a94159b82"}, "downloads": -1, "filename": "kcollections-1.0.2-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "79b1ad3802d017ef4edf9c2f3d4811e7", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1125646, "upload_time": "2020-02-05T08:54:47", "upload_time_iso_8601": "2020-02-05T08:54:47.394778Z", "url": "https://files.pythonhosted.org/packages/3d/03/67e4acd2d10854b557a5115db4f139973511f8ad5de00afa4495d55f8cb7/kcollections-1.0.2-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2348085e8a6d6226ea14168438be16c4", "sha256": "8688083db2065b5dac0cecd75643b09f868bf87f88e909cab71bd70e405952d5"}, "downloads": -1, "filename": "kcollections-1.0.2-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "2348085e8a6d6226ea14168438be16c4", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1080051, "upload_time": "2020-02-05T08:59:07", "upload_time_iso_8601": "2020-02-05T08:59:07.691991Z", "url": "https://files.pythonhosted.org/packages/2e/22/e5de3546e1891c3e44c403cf3a921191e266ee6510c862459561df067a9d/kcollections-1.0.2-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b753aba8999face6b5b25240ddad9ad", "sha256": "d82384664ac43a754874aa6f4cfec5c575a4eca1fcdd67f172191a5d1d047d5e"}, "downloads": -1, "filename": "kcollections-1.0.2-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7b753aba8999face6b5b25240ddad9ad", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1123286, "upload_time": "2020-02-05T08:54:31", "upload_time_iso_8601": "2020-02-05T08:54:31.641864Z", "url": "https://files.pythonhosted.org/packages/64/88/39b8701563606d685c790c96ebece7037ec214fceddd1fea00060ca68161/kcollections-1.0.2-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f6ae362c7d9431b7e703eb748dea4ac", "sha256": "b4b53fbf82e8a27a3ebad5df880537fc2112517ed29b95ccb1d45f39ebd662f8"}, "downloads": -1, "filename": "kcollections-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5f6ae362c7d9431b7e703eb748dea4ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 615102, "upload_time": "2020-02-05T08:54:34", "upload_time_iso_8601": "2020-02-05T08:54:34.976109Z", "url": "https://files.pythonhosted.org/packages/5a/3e/59d044c937f2f1bba894adce0b90d4651e4c585e67a0a5d0b55e422c483f/kcollections-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "88235b113fccbe2ec90dbd15c4621105", "sha256": "7df8cbc79141e287d81f82740b7566f2353543aeb2cf8b1e6d5f214bf680ef40"}, "downloads": -1, "filename": "kcollections-1.0.4-cp27-cp27m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "88235b113fccbe2ec90dbd15c4621105", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1079475, "upload_time": "2020-02-05T20:48:49", "upload_time_iso_8601": "2020-02-05T20:48:49.637873Z", "url": "https://files.pythonhosted.org/packages/83/90/6d5787f5da0b672fb4b76b163abe18f6cd588b0629406946d49c94fc0f45/kcollections-1.0.4-cp27-cp27m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe4ad69b8da735b8ad105e9c829db32c", "sha256": "aae0ed36e189b77ba0ebf4c812ab39d5a1c5143e0e59563c4047eb6915d4cd12"}, "downloads": -1, "filename": "kcollections-1.0.4-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "fe4ad69b8da735b8ad105e9c829db32c", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1120371, "upload_time": "2020-02-05T21:07:46", "upload_time_iso_8601": "2020-02-05T21:07:46.542085Z", "url": "https://files.pythonhosted.org/packages/1e/c7/a899fe8c8fae6fc72f311cff04bf5a7244fe32a92739b8cb2c3dd2753892/kcollections-1.0.4-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fc0f4d5cbe32f8c3461e0e4c540dd41", "sha256": "91c390031e28ac71d15332e98ffe079a96e367145e90c9bef94c5fa5f041fc4a"}, "downloads": -1, "filename": "kcollections-1.0.4-cp34-cp34m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "7fc0f4d5cbe32f8c3461e0e4c540dd41", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1078833, "upload_time": "2020-02-05T20:55:39", "upload_time_iso_8601": "2020-02-05T20:55:39.376837Z", "url": "https://files.pythonhosted.org/packages/94/d3/d3f5c396469bea0da3cebee2326c60d3e425000989b52cc8d0134f1fa8e7/kcollections-1.0.4-cp34-cp34m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b0a24602c59f4a043779dd31f25bf90", "sha256": "1ca1c47cc1929fee5dccac2be7642f6eb7df574fd1b3f13dddd16f4e224cedd6"}, "downloads": -1, "filename": "kcollections-1.0.4-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7b0a24602c59f4a043779dd31f25bf90", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1124134, "upload_time": "2020-02-05T21:04:34", "upload_time_iso_8601": "2020-02-05T21:04:34.146216Z", "url": "https://files.pythonhosted.org/packages/9d/60/50b6c12946b2619de4703e1b5d33cb322810d221eb14e7c3338fe54aea0d/kcollections-1.0.4-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b468a8141455426e593b2f1b1c827470", "sha256": "0995e1fdb32626e95c1ac992b91dc8cfd90498ad11151cb27c52ec101b4bb812"}, "downloads": -1, "filename": "kcollections-1.0.4-cp35-cp35m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "b468a8141455426e593b2f1b1c827470", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1078862, "upload_time": "2020-02-05T20:55:55", "upload_time_iso_8601": "2020-02-05T20:55:55.097887Z", "url": "https://files.pythonhosted.org/packages/b6/4c/a58b280fd70b23e484a2c0f4acb6af52a46f68e1884a8ce131c17debe04b/kcollections-1.0.4-cp35-cp35m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0a875db5f6b45d7708b8809ea712590", "sha256": "4a2608b37419fe404f2bcf7ba311edbfed9f239691e702c03ed6051c9efda3fa"}, "downloads": -1, "filename": "kcollections-1.0.4-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a0a875db5f6b45d7708b8809ea712590", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1125749, "upload_time": "2020-02-05T21:06:40", "upload_time_iso_8601": "2020-02-05T21:06:40.393863Z", "url": "https://files.pythonhosted.org/packages/34/84/dc82dacfad5db95abb49e6f69231867f5efd0bde0430607e592c600caf94/kcollections-1.0.4-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74a8129d1b51a580e465f4d936ebff39", "sha256": "c31b2f90341b4e8ba6162f4c2b052530fd96131b37e5fc60cfecd4206b2022b6"}, "downloads": -1, "filename": "kcollections-1.0.4-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "74a8129d1b51a580e465f4d936ebff39", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1078861, "upload_time": "2020-02-05T20:51:43", "upload_time_iso_8601": "2020-02-05T20:51:43.405698Z", "url": "https://files.pythonhosted.org/packages/6c/ff/af6e511cbcec7b9c983dee86e59755d547d2ff833113db3bf3b778c55aa2/kcollections-1.0.4-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2665dcdf54a21a597680a167a0343c79", "sha256": "3fdd7d5cde68c5ccf6e02530867d7a1fe0618927377ebb21a6f70538e1e89265"}, "downloads": -1, "filename": "kcollections-1.0.4-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "2665dcdf54a21a597680a167a0343c79", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1125745, "upload_time": "2020-02-05T21:08:50", "upload_time_iso_8601": "2020-02-05T21:08:50.792458Z", "url": "https://files.pythonhosted.org/packages/46/96/10d3418f4a0e62301dd8652f33cc4c02135b70e85574d1386ad5aeeb43e2/kcollections-1.0.4-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe1b8c9a3d30bbe77cf2d58a6f733e0a", "sha256": "9125b354426f102a7c7d8b7bde19d72e5de89981783563740e21871ce0db1b6a"}, "downloads": -1, "filename": "kcollections-1.0.4-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "fe1b8c9a3d30bbe77cf2d58a6f733e0a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1080151, "upload_time": "2020-02-05T20:52:37", "upload_time_iso_8601": "2020-02-05T20:52:37.998925Z", "url": "https://files.pythonhosted.org/packages/87/d7/40a273205b8746727ffcd46fa1cbbf74d13697b89459677d9e1c9eedf16c/kcollections-1.0.4-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8233fedd4fa2647bcbbdec57e81d144c", "sha256": "b3a11ff5d04d1f97f9ac3609aba56bb44137a668a7cfb2b9e9fda03e907c9d64"}, "downloads": -1, "filename": "kcollections-1.0.4-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "8233fedd4fa2647bcbbdec57e81d144c", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1123384, "upload_time": "2020-02-05T21:09:11", "upload_time_iso_8601": "2020-02-05T21:09:11.501567Z", "url": "https://files.pythonhosted.org/packages/d1/dc/cec8fb68f43fe389f643d4dbc317f3b1f7a8f152f752af8eec2eb33c21f6/kcollections-1.0.4-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "ea804feee8c24336e4d47adbb48ccd00", "sha256": "97d91fd04997218796fd2b1baf3d7844cb56a7bc3be8c6cc35275a0d4ce6ed19"}, "downloads": -1, "filename": "kcollections-1.0.5-cp27-cp27m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "ea804feee8c24336e4d47adbb48ccd00", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1051312, "upload_time": "2020-02-10T19:13:28", "upload_time_iso_8601": "2020-02-10T19:13:28.962995Z", "url": "https://files.pythonhosted.org/packages/9d/99/275299aac7724e41fec452ba46126e181ec24b67d934be7b1a448c92a10d/kcollections-1.0.5-cp27-cp27m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69a4fc558e14a0179b90d69f4b534fe3", "sha256": "800da35c3d195fed124b71382432b03b016d80a7fe1759f61523e6771e2d0b65"}, "downloads": -1, "filename": "kcollections-1.0.5-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "69a4fc558e14a0179b90d69f4b534fe3", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1121023, "upload_time": "2020-02-10T19:23:15", "upload_time_iso_8601": "2020-02-10T19:23:15.339201Z", "url": "https://files.pythonhosted.org/packages/8c/da/7b99b0324a31df5df46095caa29b1e61ff08fd29ed8d0c8443bd22377fae/kcollections-1.0.5-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "303ae03ba1b514775d0fb7dbf0c3482c", "sha256": "b186b0dbcb6b2afc6ccc1055f7cd808363e7caf95bcc35985b3bc36a8d163e27"}, "downloads": -1, "filename": "kcollections-1.0.5-cp34-cp34m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "303ae03ba1b514775d0fb7dbf0c3482c", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1050327, "upload_time": "2020-02-10T19:17:29", "upload_time_iso_8601": "2020-02-10T19:17:29.404963Z", "url": "https://files.pythonhosted.org/packages/51/70/0db95a68d902af0f77b5c9aee4e019b93914147e2e1cf3fffddb3699c5bc/kcollections-1.0.5-cp34-cp34m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70ac0aca0102bff91089ea736734324e", "sha256": "0d06158bdc79a75ef6ced73a705cc1585fc354a7e9fb58c21ceb47a138722f6f"}, "downloads": -1, "filename": "kcollections-1.0.5-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "70ac0aca0102bff91089ea736734324e", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1122298, "upload_time": "2020-02-10T19:23:53", "upload_time_iso_8601": "2020-02-10T19:23:53.646784Z", "url": "https://files.pythonhosted.org/packages/9c/45/911c45590771a5d3c963f6215e385c10914a26f5dcdd5642437526f4e95c/kcollections-1.0.5-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a31c706271311b8c9ecadd8bffdfac7", "sha256": "9ed3bc1d7697d1e3517328b1f9258a2fa7e7911391c68159102f21960af34ccb"}, "downloads": -1, "filename": "kcollections-1.0.5-cp35-cp35m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "5a31c706271311b8c9ecadd8bffdfac7", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1050422, "upload_time": "2020-02-10T19:12:36", "upload_time_iso_8601": "2020-02-10T19:12:36.039676Z", "url": "https://files.pythonhosted.org/packages/5f/35/4f93ffd20d7567cf5098375bf8ac71e0cbaf82d8a1325be2df750795d4e7/kcollections-1.0.5-cp35-cp35m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ba8dc193e3bab2ba0331458b454e5be", "sha256": "8c51cce33891b07669fc8c8ce27a7cf826e2dd63d30408aa00aa7bbd535f9c7a"}, "downloads": -1, "filename": "kcollections-1.0.5-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "0ba8dc193e3bab2ba0331458b454e5be", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1122156, "upload_time": "2020-02-10T19:24:55", "upload_time_iso_8601": "2020-02-10T19:24:55.804034Z", "url": "https://files.pythonhosted.org/packages/79/a2/787bf3f5026fd11e4010a56f68579220bbcd9d5588a3977c0621eb7e0297/kcollections-1.0.5-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c68061a19981dc7a87a1e1f3a081dcdc", "sha256": "dfb232bfe4ad13df0fc4f3f24b6f77dc78951c40278856abc0dd6be5d7c24d5a"}, "downloads": -1, "filename": "kcollections-1.0.5-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "c68061a19981dc7a87a1e1f3a081dcdc", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1050421, "upload_time": "2020-02-10T19:11:21", "upload_time_iso_8601": "2020-02-10T19:11:21.336120Z", "url": "https://files.pythonhosted.org/packages/3f/e9/9457406d876d3eb86234c6d6991a902a42c7ccd158199ad43b9a06fcbc3f/kcollections-1.0.5-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d92ed946929bf6bb072d12aa9ab71b5a", "sha256": "d90afb7ff8dedbf125edbeb128ceb3303625f8a7729cba097d686fd4a49b954f"}, "downloads": -1, "filename": "kcollections-1.0.5-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d92ed946929bf6bb072d12aa9ab71b5a", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1122149, "upload_time": "2020-02-10T19:26:15", "upload_time_iso_8601": "2020-02-10T19:26:15.570561Z", "url": "https://files.pythonhosted.org/packages/1f/4a/5da571afa2d53f7c61b3f42debaea038a83a8aaf58e4f2ba3f3353c1f58c/kcollections-1.0.5-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f665df36117c8b4f67094eb9d4cb7d5d", "sha256": "2a066252f125e9f191ac56698ad7363ee5a43748d96f759cc58ca8449ee3a8e1"}, "downloads": -1, "filename": "kcollections-1.0.5-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "f665df36117c8b4f67094eb9d4cb7d5d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1052124, "upload_time": "2020-02-10T19:10:35", "upload_time_iso_8601": "2020-02-10T19:10:35.522785Z", "url": "https://files.pythonhosted.org/packages/cc/30/c36c91be8496a1a00aed25f3a6a80bc3239d4fb504cf57a463495fee9dad/kcollections-1.0.5-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ce3e2a929a77fa6b9be77fa0f8715aa", "sha256": "905d968a36ac5bad1d0a9122945d4a5e5ab350d7511530b2f210ffcab796e1a8"}, "downloads": -1, "filename": "kcollections-1.0.5-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4ce3e2a929a77fa6b9be77fa0f8715aa", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1120257, "upload_time": "2020-02-10T19:30:21", "upload_time_iso_8601": "2020-02-10T19:30:21.342182Z", "url": "https://files.pythonhosted.org/packages/4e/93/81513fa3887891074c9c3484608236f8f8579cd4e3f7f69ea77dfff58ff3/kcollections-1.0.5-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea804feee8c24336e4d47adbb48ccd00", "sha256": "97d91fd04997218796fd2b1baf3d7844cb56a7bc3be8c6cc35275a0d4ce6ed19"}, "downloads": -1, "filename": "kcollections-1.0.5-cp27-cp27m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "ea804feee8c24336e4d47adbb48ccd00", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1051312, "upload_time": "2020-02-10T19:13:28", "upload_time_iso_8601": "2020-02-10T19:13:28.962995Z", "url": "https://files.pythonhosted.org/packages/9d/99/275299aac7724e41fec452ba46126e181ec24b67d934be7b1a448c92a10d/kcollections-1.0.5-cp27-cp27m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69a4fc558e14a0179b90d69f4b534fe3", "sha256": "800da35c3d195fed124b71382432b03b016d80a7fe1759f61523e6771e2d0b65"}, "downloads": -1, "filename": "kcollections-1.0.5-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "69a4fc558e14a0179b90d69f4b534fe3", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 1121023, "upload_time": "2020-02-10T19:23:15", "upload_time_iso_8601": "2020-02-10T19:23:15.339201Z", "url": "https://files.pythonhosted.org/packages/8c/da/7b99b0324a31df5df46095caa29b1e61ff08fd29ed8d0c8443bd22377fae/kcollections-1.0.5-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "303ae03ba1b514775d0fb7dbf0c3482c", "sha256": "b186b0dbcb6b2afc6ccc1055f7cd808363e7caf95bcc35985b3bc36a8d163e27"}, "downloads": -1, "filename": "kcollections-1.0.5-cp34-cp34m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "303ae03ba1b514775d0fb7dbf0c3482c", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1050327, "upload_time": "2020-02-10T19:17:29", "upload_time_iso_8601": "2020-02-10T19:17:29.404963Z", "url": "https://files.pythonhosted.org/packages/51/70/0db95a68d902af0f77b5c9aee4e019b93914147e2e1cf3fffddb3699c5bc/kcollections-1.0.5-cp34-cp34m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70ac0aca0102bff91089ea736734324e", "sha256": "0d06158bdc79a75ef6ced73a705cc1585fc354a7e9fb58c21ceb47a138722f6f"}, "downloads": -1, "filename": "kcollections-1.0.5-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "70ac0aca0102bff91089ea736734324e", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1122298, "upload_time": "2020-02-10T19:23:53", "upload_time_iso_8601": "2020-02-10T19:23:53.646784Z", "url": "https://files.pythonhosted.org/packages/9c/45/911c45590771a5d3c963f6215e385c10914a26f5dcdd5642437526f4e95c/kcollections-1.0.5-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a31c706271311b8c9ecadd8bffdfac7", "sha256": "9ed3bc1d7697d1e3517328b1f9258a2fa7e7911391c68159102f21960af34ccb"}, "downloads": -1, "filename": "kcollections-1.0.5-cp35-cp35m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "5a31c706271311b8c9ecadd8bffdfac7", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1050422, "upload_time": "2020-02-10T19:12:36", "upload_time_iso_8601": "2020-02-10T19:12:36.039676Z", "url": "https://files.pythonhosted.org/packages/5f/35/4f93ffd20d7567cf5098375bf8ac71e0cbaf82d8a1325be2df750795d4e7/kcollections-1.0.5-cp35-cp35m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ba8dc193e3bab2ba0331458b454e5be", "sha256": "8c51cce33891b07669fc8c8ce27a7cf826e2dd63d30408aa00aa7bbd535f9c7a"}, "downloads": -1, "filename": "kcollections-1.0.5-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "0ba8dc193e3bab2ba0331458b454e5be", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1122156, "upload_time": "2020-02-10T19:24:55", "upload_time_iso_8601": "2020-02-10T19:24:55.804034Z", "url": "https://files.pythonhosted.org/packages/79/a2/787bf3f5026fd11e4010a56f68579220bbcd9d5588a3977c0621eb7e0297/kcollections-1.0.5-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c68061a19981dc7a87a1e1f3a081dcdc", "sha256": "dfb232bfe4ad13df0fc4f3f24b6f77dc78951c40278856abc0dd6be5d7c24d5a"}, "downloads": -1, "filename": "kcollections-1.0.5-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "c68061a19981dc7a87a1e1f3a081dcdc", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1050421, "upload_time": "2020-02-10T19:11:21", "upload_time_iso_8601": "2020-02-10T19:11:21.336120Z", "url": "https://files.pythonhosted.org/packages/3f/e9/9457406d876d3eb86234c6d6991a902a42c7ccd158199ad43b9a06fcbc3f/kcollections-1.0.5-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d92ed946929bf6bb072d12aa9ab71b5a", "sha256": "d90afb7ff8dedbf125edbeb128ceb3303625f8a7729cba097d686fd4a49b954f"}, "downloads": -1, "filename": "kcollections-1.0.5-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d92ed946929bf6bb072d12aa9ab71b5a", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1122149, "upload_time": "2020-02-10T19:26:15", "upload_time_iso_8601": "2020-02-10T19:26:15.570561Z", "url": "https://files.pythonhosted.org/packages/1f/4a/5da571afa2d53f7c61b3f42debaea038a83a8aaf58e4f2ba3f3353c1f58c/kcollections-1.0.5-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f665df36117c8b4f67094eb9d4cb7d5d", "sha256": "2a066252f125e9f191ac56698ad7363ee5a43748d96f759cc58ca8449ee3a8e1"}, "downloads": -1, "filename": "kcollections-1.0.5-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "f665df36117c8b4f67094eb9d4cb7d5d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1052124, "upload_time": "2020-02-10T19:10:35", "upload_time_iso_8601": "2020-02-10T19:10:35.522785Z", "url": "https://files.pythonhosted.org/packages/cc/30/c36c91be8496a1a00aed25f3a6a80bc3239d4fb504cf57a463495fee9dad/kcollections-1.0.5-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ce3e2a929a77fa6b9be77fa0f8715aa", "sha256": "905d968a36ac5bad1d0a9122945d4a5e5ab350d7511530b2f210ffcab796e1a8"}, "downloads": -1, "filename": "kcollections-1.0.5-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4ce3e2a929a77fa6b9be77fa0f8715aa", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1120257, "upload_time": "2020-02-10T19:30:21", "upload_time_iso_8601": "2020-02-10T19:30:21.342182Z", "url": "https://files.pythonhosted.org/packages/4e/93/81513fa3887891074c9c3484608236f8f8579cd4e3f7f69ea77dfff58ff3/kcollections-1.0.5-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}], "timestamp": "Fri May  8 00:50:28 2020"}