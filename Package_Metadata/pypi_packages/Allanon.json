{"info": {"author": "keul", "author_email": "luca@keul.it", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: System :: Shells", "Topic :: Utilities"], "description": ".. contents::\n\nIntroduction\n============\n\nLet's say that you want to access a slow streaming site to see something (obviously: something not\nprotected by copyright).\n\nThe streaming site use URLs in that format:\n\n    http://legal-streaming-site.org/program-name/season5/episode4/\n\nEvery page contains some HTML code like the following::\n\n    ....\n        <div id=\"video-container\">\n           ...\n           <embed src=\"http://someotherurl.org/qwerty.flv\" ... \n           ...\n        <div>\n    ...\n\nLet say this is the URL for the episode 4 of the fifth season of your program.\nYou know that this program has 6 seasons with 22 episode each.\n\nAs said before: this site is very slow so you prefer downloading episodes in background\nthen watch them later.\n\nTo download them you need to watch the HTML inside the page and get some resources\n(commonly: and FLV file).\nThe best would be download *all* episode in a single (long running) operation instead of manually\ndoing it.\n\n**Allanon** will help you exactly in such tasks.\nYou simply need to provide it:\n\n* a simple URL or a *dynamic URL pattern*\n* a *query selector* for resources inside the page\n\nQuick example (you can keep it single lined)::\n\n    $ allanon --search=\"#movie-container embed\" \\\n    > \"http://legal-streaming-site.org/program-name/season{1:6}/episode{1:22}\"\n\nDocumentation\n=============\n\nInstallation\n------------\n\nYou can use `distribute`__ or `pip`__ to install the utility in your Python environment.\n\n__ http://pypi.python.org/pypi/distribute\n__ http://pypi.python.org/pypi/pip\n\n::\n\n    $ easy_install Allanon\n\nor alternately::\n\n    $ pip install Allanon\n\nInvocation\n----------\n\nAfter installing you will be able to run the ``allanon`` script from command line.\nFor example: run the following for access the utility help::\n\n    $ allanon --help\n\nBasic usage (you probably don't need Allanon at all for this)\n-------------------------------------------------------------\n\nThe ``allanon`` script accept an URL (or a list of URLs) to be downloaded::\n\n    $ allanon http://myhost/folder/image1.jpg http://myhost/folder/image2.jpg ...\n\nEvery command line URL given to Allanon can be a simple URL or an *URL model* like the following::\n\n    $ allanon \"http://myhost/folder/image{1:50}.jpg\"\n\nThis will crawl 50 different URLs automatically. \n\nMain usage (things became interesting now)\n------------------------------------------\n\nThe ``allanon`` script take an additional ``--search`` parameter (see the first example given\nabove).\nWhen you provide it, you are meaning:\n\n    \"*I don't want to download those URLs directly, but those URLs contain links to\n    file that I really want*\".\n\nThe search parameter format must be CSS 3 compatible, like the one supported the famous\n`jQuery library`__, and it's based onto the `pyquery`__ library.\nSee it's documentation for more details about what you can look for.\n\n__ http://api.jquery.com/category/selectors/\n__ http://packages.python.org/pyquery/\n\nExtreme usage\n-------------\n\nThe ``--search`` parameter can be provided multiple times::\n\n    $ allanon --search=\"ul.image-repos a\" \\\n    > --search=\"div.image-containers img\" \\\n    > \"http://image-repository-sites.org/category{1:30}.html\"\n\nWhen you provide (for example) two different search parameters, you are meaning:\n\n    \"*I don't want to download resources at given URLs. Those URLs contain links to secondary pages,\n    and inside those pages there're links to resources I want to download*\"\n\nFilters are applied in the given order, so:\n\n* Allanon will search inside 30 pages named *category1.html*, *category2.html*, ...\n* inside those pages, Allanon will look for all links inside ``ul`` tags with CSS class\n  *image-repos* and recursively crawl them.\n* inside those pages, Allanon will looks for images inside ``div`` with class *image-containers*.\n* images will be downloaded.\n\nPotentially you can continue this way, providing a third level of filters, and so on.\n\nNaming and storing downloaded resources\n---------------------------------------\n\nBy default Allanon download all files in the current directory so a filename conflict\nis possible.\nYou can control how/where download, changing dynamically the filename using the\n``--filename`` option and/or change the directory where to store files with the\n``--directory`` option.\n\nAn example::\n\n    $ allanon --filename=\"%HOST-%INDEX-section%1-version%3-%FULLNAME\" \\\n    > \"http://foo.org/pdf-repo-{1:10}/file{1:50}.pdf?version={0:3}\"\n\nAs you seen ``--filename`` accept some *markers* that can be used to better organize\nresources:\n\n``%HOST``\n    Will be replaced with the hostname used in the URL.\n``%INDEX``\n    Is a progressive from 1 to the number of downloaded resources.\n``%X``\n    When using dynamic URLs models you can refer to the current number of an URL\n    section.\n    \n    In this case \"%1\" is the current \"pdf-repo-*x*\" number and \"%3\" is the \"version\"\n    parameter value.\n``%FULLNAME``\n    The original filename (the one used if ``--filename`` is not provided).\n    \n    You can also use the ``%NAME`` and ``%EXTENSION`` to get only the name of the file\n    (without extension) or simply the extension.\n\nThe ``--directory`` option can be a simple directory name or a directory path (in unix-like\nformat, for example \"``foo/bar/baz``\").\n\nAn example::\n\n    $ allanon --directory=\"/home/keul/%HOST/%1\" \\\n    > \"http://foo.org/pdf-repo-{1:10}/file{1:50}.pdf\" \\\n    > \"http://baz.net/pdf-repo-{1:10}/file{1:50}.pdf\"\n\nAlso the ``--directory`` option supports some of the markers: you can use ``%HOST``, ``%INDEX`` and ``%X``\nwith the same meaning given above.\n\nTODO\n====\n\nThis utility is in alpha stage, a lot of thing can goes wrong when downloading and many features\nare missing:\n\n* verbosity controls\n* bandwidth control\n* multi-thread (let's look at `grequests`__)\n* Python 3\n\n__ https://github.com/kennethreitz/grequests\n\nIf you find other bugs or want to ask for missing features, use the `product's issue tracker`__.\n\n__ https://github.com/keul/Allanon/issues\n\n\nChangelog\n=========\n\n0.2 (2014-01-02)\n----------------\n\n- Do not crawl or download when on error pages\n- Handle duplicate filename when downloading resources:\n  added the ``--check-duplicate`` option\n- Application specific user agent header (configurable\n  through ``--user-agent`` option)\n- The ``--directory`` option can be a path and so create\n  intermediate directories, and accept markers\n- More efficient memory usage\n- Show progress bar when getting resources\n  (now requires `progress`__)\n- Fixed problem when getting quoted filename from response\n  header\n- Added the ``--timeout`` option\n- Added the ``--sleep`` option\n\n__ https://pypi.python.org/pypi/progress\n\n0.1 (2013-01-05)\n----------------\n\n- first release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/keul/Allanon", "keywords": "crawler robot spider downloader parser", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "Allanon", "package_url": "https://pypi.org/project/Allanon/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Allanon/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/keul/Allanon"}, "release_url": "https://pypi.org/project/Allanon/0.2/", "requires_dist": null, "requires_python": null, "summary": "A Web crawler that visit a predictable set of URLs, and automatically download resources you want from them", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id10\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#documentation\" id=\"id11\" rel=\"nofollow\">Documentation</a><ul>\n<li><a href=\"#installation\" id=\"id12\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#invocation\" id=\"id13\" rel=\"nofollow\">Invocation</a></li>\n<li><a href=\"#basic-usage-you-probably-don-t-need-allanon-at-all-for-this\" id=\"id14\" rel=\"nofollow\">Basic usage (you probably don\u2019t need Allanon at all for this)</a></li>\n<li><a href=\"#main-usage-things-became-interesting-now\" id=\"id15\" rel=\"nofollow\">Main usage (things became interesting now)</a></li>\n<li><a href=\"#extreme-usage\" id=\"id16\" rel=\"nofollow\">Extreme usage</a></li>\n<li><a href=\"#naming-and-storing-downloaded-resources\" id=\"id17\" rel=\"nofollow\">Naming and storing downloaded resources</a></li>\n</ul>\n</li>\n<li><a href=\"#todo\" id=\"id18\" rel=\"nofollow\">TODO</a></li>\n<li><a href=\"#changelog\" id=\"id19\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id7\" id=\"id20\" rel=\"nofollow\">0.2 (2014-01-02)</a></li>\n<li><a href=\"#id9\" id=\"id21\" rel=\"nofollow\">0.1 (2013-01-05)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Introduction</a></h2>\n<p>Let\u2019s say that you want to access a slow streaming site to see something (obviously: something not\nprotected by copyright).</p>\n<p>The streaming site use URLs in that format:</p>\n<blockquote>\n<a href=\"http://legal-streaming-site.org/program-name/season5/episode4/\" rel=\"nofollow\">http://legal-streaming-site.org/program-name/season5/episode4/</a></blockquote>\n<p>Every page contains some HTML code like the following:</p>\n<pre>....\n    &lt;div id=\"video-container\"&gt;\n       ...\n       &lt;embed src=\"http://someotherurl.org/qwerty.flv\" ...\n       ...\n    &lt;div&gt;\n...\n</pre>\n<p>Let say this is the URL for the episode 4 of the fifth season of your program.\nYou know that this program has 6 seasons with 22 episode each.</p>\n<p>As said before: this site is very slow so you prefer downloading episodes in background\nthen watch them later.</p>\n<p>To download them you need to watch the HTML inside the page and get some resources\n(commonly: and FLV file).\nThe best would be download <em>all</em> episode in a single (long running) operation instead of manually\ndoing it.</p>\n<p><strong>Allanon</strong> will help you exactly in such tasks.\nYou simply need to provide it:</p>\n<ul>\n<li>a simple URL or a <em>dynamic URL pattern</em></li>\n<li>a <em>query selector</em> for resources inside the page</li>\n</ul>\n<p>Quick example (you can keep it single lined):</p>\n<pre>$ allanon --search=\"#movie-container embed\" \\\n&gt; \"http://legal-streaming-site.org/program-name/season{1:6}/episode{1:22}\"\n</pre>\n</div>\n<div id=\"documentation\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Documentation</a></h2>\n<div id=\"installation\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Installation</a></h3>\n<p>You can use <a href=\"http://pypi.python.org/pypi/distribute\" rel=\"nofollow\">distribute</a> or <a href=\"http://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a> to install the utility in your Python environment.</p>\n<pre>$ easy_install Allanon\n</pre>\n<p>or alternately:</p>\n<pre>$ pip install Allanon\n</pre>\n</div>\n<div id=\"invocation\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Invocation</a></h3>\n<p>After installing you will be able to run the <tt>allanon</tt> script from command line.\nFor example: run the following for access the utility help:</p>\n<pre>$ allanon --help\n</pre>\n</div>\n<div id=\"basic-usage-you-probably-don-t-need-allanon-at-all-for-this\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Basic usage (you probably don\u2019t need Allanon at all for this)</a></h3>\n<p>The <tt>allanon</tt> script accept an URL (or a list of URLs) to be downloaded:</p>\n<pre>$ allanon http://myhost/folder/image1.jpg http://myhost/folder/image2.jpg ...\n</pre>\n<p>Every command line URL given to Allanon can be a simple URL or an <em>URL model</em> like the following:</p>\n<pre>$ allanon \"http://myhost/folder/image{1:50}.jpg\"\n</pre>\n<p>This will crawl 50 different URLs automatically.</p>\n</div>\n<div id=\"main-usage-things-became-interesting-now\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Main usage (things became interesting now)</a></h3>\n<p>The <tt>allanon</tt> script take an additional <tt><span class=\"pre\">--search</span></tt> parameter (see the first example given\nabove).\nWhen you provide it, you are meaning:</p>\n<blockquote>\n\u201c<em>I don\u2019t want to download those URLs directly, but those URLs contain links to\nfile that I really want</em>\u201d.</blockquote>\n<p>The search parameter format must be CSS 3 compatible, like the one supported the famous\n<a href=\"http://api.jquery.com/category/selectors/\" rel=\"nofollow\">jQuery library</a>, and it\u2019s based onto the <a href=\"http://packages.python.org/pyquery/\" rel=\"nofollow\">pyquery</a> library.\nSee it\u2019s documentation for more details about what you can look for.</p>\n</div>\n<div id=\"extreme-usage\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Extreme usage</a></h3>\n<p>The <tt><span class=\"pre\">--search</span></tt> parameter can be provided multiple times:</p>\n<pre>$ allanon --search=\"ul.image-repos a\" \\\n&gt; --search=\"div.image-containers img\" \\\n&gt; \"http://image-repository-sites.org/category{1:30}.html\"\n</pre>\n<p>When you provide (for example) two different search parameters, you are meaning:</p>\n<blockquote>\n\u201c<em>I don\u2019t want to download resources at given URLs. Those URLs contain links to secondary pages,\nand inside those pages there\u2019re links to resources I want to download</em>\u201d</blockquote>\n<p>Filters are applied in the given order, so:</p>\n<ul>\n<li>Allanon will search inside 30 pages named <em>category1.html</em>, <em>category2.html</em>, \u2026</li>\n<li>inside those pages, Allanon will look for all links inside <tt>ul</tt> tags with CSS class\n<em>image-repos</em> and recursively crawl them.</li>\n<li>inside those pages, Allanon will looks for images inside <tt>div</tt> with class <em>image-containers</em>.</li>\n<li>images will be downloaded.</li>\n</ul>\n<p>Potentially you can continue this way, providing a third level of filters, and so on.</p>\n</div>\n<div id=\"naming-and-storing-downloaded-resources\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Naming and storing downloaded resources</a></h3>\n<p>By default Allanon download all files in the current directory so a filename conflict\nis possible.\nYou can control how/where download, changing dynamically the filename using the\n<tt><span class=\"pre\">--filename</span></tt> option and/or change the directory where to store files with the\n<tt><span class=\"pre\">--directory</span></tt> option.</p>\n<p>An example:</p>\n<pre>$ allanon --filename=\"%HOST-%INDEX-section%1-version%3-%FULLNAME\" \\\n&gt; \"http://foo.org/pdf-repo-{1:10}/file{1:50}.pdf?version={0:3}\"\n</pre>\n<p>As you seen <tt><span class=\"pre\">--filename</span></tt> accept some <em>markers</em> that can be used to better organize\nresources:</p>\n<dl>\n<dt><tt>%HOST</tt></dt>\n<dd>Will be replaced with the hostname used in the URL.</dd>\n<dt><tt>%INDEX</tt></dt>\n<dd>Is a progressive from 1 to the number of downloaded resources.</dd>\n<dt><tt>%X</tt></dt>\n<dd><p>When using dynamic URLs models you can refer to the current number of an URL\nsection.</p>\n<p>In this case \u201c%1\u201d is the current \u201cpdf-repo-<em>x</em>\u201d number and \u201c%3\u201d is the \u201cversion\u201d\nparameter value.</p>\n</dd>\n<dt><tt>%FULLNAME</tt></dt>\n<dd><p>The original filename (the one used if <tt><span class=\"pre\">--filename</span></tt> is not provided).</p>\n<p>You can also use the <tt>%NAME</tt> and <tt>%EXTENSION</tt> to get only the name of the file\n(without extension) or simply the extension.</p>\n</dd>\n</dl>\n<p>The <tt><span class=\"pre\">--directory</span></tt> option can be a simple directory name or a directory path (in unix-like\nformat, for example \u201c<tt>foo/bar/baz</tt>\u201d).</p>\n<p>An example:</p>\n<pre>$ allanon --directory=\"/home/keul/%HOST/%1\" \\\n&gt; \"http://foo.org/pdf-repo-{1:10}/file{1:50}.pdf\" \\\n&gt; \"http://baz.net/pdf-repo-{1:10}/file{1:50}.pdf\"\n</pre>\n<p>Also the <tt><span class=\"pre\">--directory</span></tt> option supports some of the markers: you can use <tt>%HOST</tt>, <tt>%INDEX</tt> and <tt>%X</tt>\nwith the same meaning given above.</p>\n</div>\n</div>\n<div id=\"todo\">\n<h2><a href=\"#id18\" rel=\"nofollow\">TODO</a></h2>\n<p>This utility is in alpha stage, a lot of thing can goes wrong when downloading and many features\nare missing:</p>\n<ul>\n<li>verbosity controls</li>\n<li>bandwidth control</li>\n<li>multi-thread (let\u2019s look at <a href=\"https://github.com/kennethreitz/grequests\" rel=\"nofollow\">grequests</a>)</li>\n<li>Python 3</li>\n</ul>\n<p>If you find other bugs or want to ask for missing features, use the <a href=\"https://github.com/keul/Allanon/issues\" rel=\"nofollow\">product\u2019s issue tracker</a>.</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id19\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id7\">\n<h3><a href=\"#id20\" rel=\"nofollow\">0.2 (2014-01-02)</a></h3>\n<ul>\n<li>Do not crawl or download when on error pages</li>\n<li>Handle duplicate filename when downloading resources:\nadded the <tt><span class=\"pre\">--check-duplicate</span></tt> option</li>\n<li>Application specific user agent header (configurable\nthrough <tt><span class=\"pre\">--user-agent</span></tt> option)</li>\n<li>The <tt><span class=\"pre\">--directory</span></tt> option can be a path and so create\nintermediate directories, and accept markers</li>\n<li>More efficient memory usage</li>\n<li>Show progress bar when getting resources\n(now requires <a href=\"https://pypi.python.org/pypi/progress\" rel=\"nofollow\">progress</a>)</li>\n<li>Fixed problem when getting quoted filename from response\nheader</li>\n<li>Added the <tt><span class=\"pre\">--timeout</span></tt> option</li>\n<li>Added the <tt><span class=\"pre\">--sleep</span></tt> option</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id21\" rel=\"nofollow\">0.1 (2013-01-05)</a></h3>\n<ul>\n<li>first release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 958991, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c1ac97d8dbe1e7f3ab6211bf1f2d29ea", "sha256": "ade95756bee811f691da3781a6a3c5e40bfa41bf9eb4de63fd8c2ba405febe40"}, "downloads": -1, "filename": "Allanon-0.1.zip", "has_sig": false, "md5_digest": "c1ac97d8dbe1e7f3ab6211bf1f2d29ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30153, "upload_time": "2013-01-05T18:13:29", "upload_time_iso_8601": "2013-01-05T18:13:29.705706Z", "url": "https://files.pythonhosted.org/packages/82/fa/f7a53a652f06b62aabd9c1c4176d77a10be779dcd56b04e42091696e6f51/Allanon-0.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "14619dbf30151b42c1aa13e7eca550f5", "sha256": "f533fa7b898e1672ce2625d2722fdab1603f115fcb2bfb628e2e78e9381396a1"}, "downloads": -1, "filename": "Allanon-0.2.zip", "has_sig": false, "md5_digest": "14619dbf30151b42c1aa13e7eca550f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34868, "upload_time": "2014-01-02T21:44:45", "upload_time_iso_8601": "2014-01-02T21:44:45.930062Z", "url": "https://files.pythonhosted.org/packages/a9/c1/e0e038858fdbe4709461811dda106f8e6d8b3d633809ebe54046791e72ae/Allanon-0.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "14619dbf30151b42c1aa13e7eca550f5", "sha256": "f533fa7b898e1672ce2625d2722fdab1603f115fcb2bfb628e2e78e9381396a1"}, "downloads": -1, "filename": "Allanon-0.2.zip", "has_sig": false, "md5_digest": "14619dbf30151b42c1aa13e7eca550f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34868, "upload_time": "2014-01-02T21:44:45", "upload_time_iso_8601": "2014-01-02T21:44:45.930062Z", "url": "https://files.pythonhosted.org/packages/a9/c1/e0e038858fdbe4709461811dda106f8e6d8b3d633809ebe54046791e72ae/Allanon-0.2.zip", "yanked": false}], "timestamp": "Thu May  7 16:19:33 2020"}