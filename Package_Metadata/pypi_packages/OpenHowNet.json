{"info": {"author": "THUNLP", "author_email": "i@dozbear.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# OpenHowNet\n\n<img src=\"openhownet-logo.png\" width = \"300\"  alt=\"OpenHowNet Logo\" align=center />\n\n\n### [\u4e2d\u6587\u7248\u672c](README_ZH.md)\n\nThis project contains core data of HowNet and OpenHowNet API developed by THUNLP, which provides a convenient way to search information in HowNet, display sememe trees, calculate word similarity via sememes, etc. You can also visit our [website](https://openhownet.thunlp.org) to enjoy searching and exhibiting sememes of words online.\n\nIf you use any data or API provided by OpenHowNet in your research, please cite the following paper:\n\n\t@article{qi2019openhownet,\n\t  title={OpenHowNet: An Open Sememe-based Lexical Knowledge Base},\n\t  author={Qi, Fanchao and Yang, Chenghao and Liu, Zhiyuan and Dong, Qiang and Sun, Maosong and Dong, Zhendong},\n\t  journal={arXiv preprint arXiv:1901.09957},\n\t  year={2019},\n\t}\n\n## HowNet Core Data\nHowNet core data file\uff08`HowNet.txt`\uff09consists of concepts represented by 223,767 Chinese & English words and phrases. Each concept in HowNet is annotated with sememe-based definition, POS tag, sentiment oriatation, examples, etc. Here is an example of how concepts are annotated in HowNet:\n\n```\nNO.=042012 #Concept ID\nW_C=\u8d37 #Chinese word\nG_C=verb [9\u0015MustObj] [dai4] #POS tag of the Chinese word\nS_C=PlusFeeling|\u6b63\u9762\u60c5\u611f #Sentiment orientation\nE_C=\u5b9a\u65a9\u4e0d~\uff0c\u4e25\u60e9\u4e0d~  #Examples of the Chinese word\nW_E=forgive #English word \nG_E=verb [7 forgive\u0015verb\u0015-0\u0015vt,sobj,ofnpa\u001522    ]  #POS tag of the English word\nS_E=PlusFeeling|\u6b63\u9762\u60c5\u611f #Sentiment orientation\nE_E=    #Examples of the English word\nDEF={forgive|\u539f\u8c05} # Sememe-based definition\nRMK=\n```\n\n## OpenHowNet API\n\n\n### Requirements\n\n* Python==3.6\n* anytree==2.4.3\n* tqdm==4.31.1\n* requests==2.22.0\n\n### Installation\n\n* Installation via pip (recommended)\n```bash\npip install OpenHowNet\n```\n\n* Installation via Github\n\n```bash\ngit clone https://github.com/thunlp/OpenHowNet/\ncd OpenHowNet/OpenHowNet\nbash merge.sh\n```\n\n\n### Interfaces\n\n|interfaces|description|params|\n|---|-------|-------|\n|get(self, word, language=None)|Search all information annotated with a word. | `word` is the target word. `lang` is `en`(English) or `zh`(Chinese), searching in both languages by default.|\n|get\\_sememes\\_by\\_word(self, word, structured=False, lang='zh', merge=False, expanded_layer=-1) | Search sememes of the target word. You can choose whether multiple senses in the result are merged, whether the result itself is structured, and the expand layers of the tree. | `word` is the target word. `lang` is `en`(English) or `zh`(Chinese). `structured` denotes whether the result is structured. `merge` denotes whether the result is merged. `expanded_layer` is number of expanded layers and -1 means expand all layers.|\n|initialize\\_sememe\\_similarity\\_calculation(self)| Initialize the implementation of advanced feature to calculate sememe-based word similarity. It may take some time to read necessary files.||\n|calculate\\_word\\_similarity(self, word0, word1)|Calculate similarity of two words. You need to run last initialization command before calling this function.|`word0` and `word1` represents the words you are querying.|\n|get\\_nearest\\_words\\_via\\_sememes(self, word, K=10)|Get the nearest K words to the target word with similarity calculated via sememes.|`word` is the target word, `K` is \"top K\" in k nearest neighbors.|\n|get\\_sememe\\_relation(self, sememe0, sememe1)|Get the relationship between two sememes.|`sememe0` and `sememe1` represent the sememes you are querying.|\n|get\\_sememe\\_via\\_relation(self, sememe, relation, lang='zh')|Get all sememes that have specified relation with the input sememe.|`sememe` is the target sememe, `relation` is the target relation, `lang` is `en`(English) or `zh`(Chinese).|\n\n### Usage\n\n#### Initialization\n\n```python\nimport OpenHowNet\nhownet_dict = OpenHowNet.HowNetDict()\n```\nAn error will occur if you haven't downloaded the HowNet data. In this case you need to run `OpenHowNet.download()` first.\n\n\n#### Get Word Annotations in HowNet\n\nBy default, the api will search the target word in both English and Chinese annotations in HowNet, which will cause significant search overhead. Note that if the target word does not exist in HowNet annotation, this api will simply return an empty list.\n\n```python\n>>> result_list = hownet_dict.get(\"\u82f9\u679c\")\n>>> print(len(result_list))\n6\n>>> print(result_list[0])\n{'Def': '{computer|\u7535\u8111:modifier={PatternValue|\u6837\u5f0f\u503c:CoEvent={able|\u80fd:scope={bring|\u643a\u5e26:patient={$}}}}{SpeBrand|\u7279\u5b9a\u724c\u5b50}}', 'en_grammar': 'noun', 'zh_grammar': 'noun', 'No': '127151', 'syn': [{'id': '004024', 'text': 'IBM'}, {'id': '041684', 'text': '\u6234\u5c14'}, {'id': '049006', 'text': '\u4e1c\u829d'}, {'id': '106795', 'text': '\u8054\u60f3'}, {'id': '156029', 'text': '\u7d22\u5c3c'}, {'id': '004203', 'text': 'iPad'}, {'id': '019457', 'text': '\u7b14\u8bb0\u672c'}, {'id': '019458', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'}, {'id': '019459', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'}, {'id': '019460', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'}, {'id': '019461', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'}, {'id': '019463', 'text': '\u7b14\u8bb0\u7c3f\u7535\u8111'}, {'id': '019464', 'text': '\u7b14\u8bb0\u7c3f\u7535\u8111'}, {'id': '020567', 'text': '\u4fbf\u643a\u5f0f\u7535\u8111'}, {'id': '020568', 'text': '\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'}, {'id': '020569', 'text': '\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'}, {'id': '127224', 'text': '\u5e73\u677f\u7535\u8111'}, {'id': '127225', 'text': '\u5e73\u677f\u7535\u8111'}, {'id': '172264', 'text': '\u819d\u4e0a\u578b\u7535\u8111'}, {'id': '172265', 'text': '\u819d\u4e0a\u578b\u7535\u8111'}], 'zh_word': '\u82f9\u679c', 'en_word': 'apple'}\n\n>>> hownet_dict.get(\"test_for_non_exist_word\")\n[]\n```\n\nYou can visualize the retrieved HowNet structured sememe annotations (\"sememe tree\") of the target word as follows (K=2 means only displaying sememe trees of 2 concepts represented by the input word)\n\n```python\n>>> hownet_dict.visualize_sememe_trees(\"\u82f9\u679c\", K=2)\nFind 6 result(s)\nDisplay #0 sememe tree\n[sense]\u82f9\u679c\n\u2514\u2500\u2500 [None]computer|\u7535\u8111\n    \u251c\u2500\u2500 [modifier]PatternValue|\u6837\u5f0f\u503c\n    \u2502   \u2514\u2500\u2500 [CoEvent]able|\u80fd\n    \u2502       \u2514\u2500\u2500 [scope]bring|\u643a\u5e26\n    \u2502           \u2514\u2500\u2500 [patient]$\n    \u2514\u2500\u2500 [patient]SpeBrand|\u7279\u5b9a\u724c\u5b50\nDisplay #1 sememe tree\n[sense]\u82f9\u679c\n\u2514\u2500\u2500 [None]fruit|\u6c34\u679c\n```\n\nTo boost the efficiency of the search process, you can specify the language of the target word as the following.\n\n```python\n>>> result_list = hownet_dict.get(\"\u82f9\u679c\", language=\"zh\")\n>>> print(\"Number of monolingual results: \",len(result_list))\nNumber of monolingual results: 6\n>>> print(\"Example of monolingual results: \",result_list[0])\nExample of monolingual results: {'Def': '{computer|\u7535\u8111:modifier={PatternValue|\u6837\u5f0f\u503c:CoEvent={able|\u80fd:scope={bring|\u643a\u5e26:patient={$}}}}{SpeBrand|\u7279\u5b9a\u724c\u5b50}}', 'en_grammar': 'noun', 'zh_grammar': 'noun', 'No': '127151', 'syn': [{'id': '004024', 'text': 'IBM'}, {'id': '041684', 'text': '\u6234\u5c14'}, {'id': '049006', 'text': '\u4e1c\u829d'}, {'id': '106795', 'text': '\u8054\u60f3'}, {'id': '156029', 'text': '\u7d22\u5c3c'}, {'id': '004203', 'text': 'iPad'}, {'id': '019457', 'text': '\u7b14\u8bb0\u672c'}, {'id': '019458', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'}, {'id': '019459', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'}, {'id': '019460', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'}, {'id': '019461', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'}, {'id': '019463', 'text': '\u7b14\u8bb0\u7c3f\u7535\u8111'}, {'id': '019464', 'text': '\u7b14\u8bb0\u7c3f\u7535\u8111'}, {'id': '020567', 'text': '\u4fbf\u643a\u5f0f\u7535\u8111'}, {'id': '020568', 'text': '\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'}, {'id': '020569', 'text': '\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'}, {'id': '127224', 'text': '\u5e73\u677f\u7535\u8111'}, {'id': '127225', 'text': '\u5e73\u677f\u7535\u8111'}, {'id': '172264', 'text': '\u819d\u4e0a\u578b\u7535\u8111'}, {'id': '172265', 'text': '\u819d\u4e0a\u578b\u7535\u8111'}], 'zh_word': '\u82f9\u679c', 'en_word': 'apple'}\n\n>>> print(\"Number of all the results: \",len(hownet_dict.get(\"X\")))\nNumber of all the results: 5\n>>> print(\"Number of Chinese results: \",len(hownet_dict.get(\"X\",language=\"zh\")))\nNumber of Chinese results: 3\n>>> print(\"Number of English results:\",len(hownet_dict.get(\"X\",language=\"en\")))\nNumber of English results: 2\n\n>>> hownet_dict.get(\"\u82f9\u679c\", language=\"en\")\n[]\n```\n\n#### Get All Words Annotated in HowNet\n\n```python\n>>> zh_word_list = hownet_dict.get_zh_words()\n>>> print(zh_word_list[:30])\n['', '\"', '#', '#\u53f7\u6807\u7b7e', '$', '%', \"'\", '(', ')', '*', '+', '-', '--', '...', '...\u51fa\u4ec0\u4e48\u95ee\u9898', '...\u5e95', '...\u5e95\u4e0b', '...\u53d1\u751f\u6545\u969c', '...\u53d1\u751f\u4e86\u4ec0\u4e48', '...\u4f55\u5982', '...\u5bb6\u91cc\u6709\u51e0\u53e3\u4eba', '...\u68c0\u6d4b\u5448\u9633\u6027', '...\u68c0\u6d4b\u5448\u9634\u6027', '...\u6765', '...\u5185', '...\u4e3a\u6b62', '...\u4e5f\u540c\u6837\u4f7f\u7136', '...\u4ee5\u6765', '...\u4ee5\u5185', '...\u4ee5\u4e0a']\n\n>>> en_word_list = hownet_dict.get_en_words()\n>>> print(en_word_list[:30])\n['A', 'An', 'Frenchmen', 'Frenchwomen', 'Ottomans', 'a', 'aardwolves', 'abaci', 'abandoned', 'abbreviated', 'abode', 'aboideaux', 'aboiteaux', 'abscissae', 'absorbed', 'acanthi', 'acari', 'accepted', 'acciaccature', 'acclaimed', 'accommodating', 'accompanied', 'accounting', 'accused', 'acetabula', 'acetified', 'aching', 'acicula', 'acini', 'acquired']\n```\n\n#### Get Flattened Sememe Trees for the Input Word\n\nNotice: the parameters `lang`, `merge` and `expanded_layer` only work when `structured = False`. The main consideration is that there are multiple ways to interpret these params when deal with structured data. We leave the freedom to our end user. In next section, you will be able to see how to utilize the structured data. Detailed descriptions of the params are in our documentation.\n\nGet the full merged sememe list from multi-sense words\n\n```python\n>>> hownet_dict.get_sememes_by_word(\"\u82f9\u679c\",structured=False,lang=\"zh\",merge=True)\n{'\u7535\u8111', '\u4ea4\u6d41', '\u7528\u5177', '\u6c34\u679c', '\u7279\u5b9a\u724c\u5b50', '\u6837\u5f0f\u503c', '\u80fd', '\u6811', '\u751f\u6b96', '\u643a\u5e26'}\n\n>>> hownet_dict.get_sememes_by_word(\"apple\",structured=False,lang=\"en\",merge=True)\n{'communicate', 'able', 'reproduce', 'SpeBrand', 'computer', 'bring', 'tool', 'PatternValue', 'tree', '$', 'fruit'}\n```\n\nEven if the language is not corresponding to the target word, the api still works. It will keep all the returned word entries to be in the same language you specified.\n\n```python\n>>> hownet_dict.get_sememes_by_word(\"\u82f9\u679c\",structured=False,lang=\"en\",merge=True)\n{'apple': {'communicate', 'able', 'reproduce', 'SpeBrand', 'computer', 'bring', 'tool', 'PatternValue', 'tree', '$', 'fruit'}, 'malus pumila': {'reproduce', 'fruit', 'tree'}, 'orchard apple tree': {'reproduce', 'fruit', 'tree'}}\n```\n\nYou could specify the number of the expanded layers:\n\n```python\n>>> hownet_dict.get_sememes_by_word(\"\u82f9\u679c\",structured=False,merge=True,expanded_layer=2)\n{'\u7535\u8111', '\u6811', '\u7528\u5177', '\u6c34\u679c'}\n```\n\nYou could get all flattened sememe trees for all words as well as specify the number of the expanded layers:\n\n```python\n>>> hownet_dict.get_sememes_by_word(\"I WANT ALL!\",structured=False,merge=True)\n# the result is too large, just try it yourself.\n```\n\nIf you would like to see the sememe lists for different senses of particular word in HowNet, just need to set the param `merged` to `False`.\n\n```python\n>>> hownet_dict.get_sememes_by_word(\"\u82f9\u679c\",structured=False,lang=\"zh\",merge=False)\n[{'word': '\u82f9\u679c', 'sememes': {'\u7279\u5b9a\u724c\u5b50', '\u6837\u5f0f\u503c', '\u7535\u8111', '\u80fd', '\u643a\u5e26'}},\n{'word': '\u82f9\u679c', 'sememes': {'\u6c34\u679c'}},\n{'word': '\u82f9\u679c', 'sememes': {'\u7279\u5b9a\u724c\u5b50', '\u6837\u5f0f\u503c', '\u80fd', '\u4ea4\u6d41', '\u7528\u5177', '\u643a\u5e26'}},\n{'word': '\u82f9\u679c', 'sememes': {'\u6811', '\u751f\u6b96', '\u6c34\u679c'}},\n{'word': '\u82f9\u679c', 'sememes': {'\u6811', '\u751f\u6b96', '\u6c34\u679c'}},\n{'word': '\u82f9\u679c', 'sememes': {'\u6811', '\u751f\u6b96', '\u6c34\u679c'}}]\n\n>>> hownet_dict.get_sememes_by_word(\"apple\",structured=False,lang=\"en\",merge=False)\n[{'word': 'apple', 'sememes': {'able', 'computer', 'bring', 'SpeBrand', 'PatternValue', '$'}},\n{'word': 'apple', 'sememes': {'fruit'}},\n{'word': 'apple', 'sememes': {'communicate', 'able', 'bring', 'tool', 'SpeBrand', 'PatternValue', '$'}},\n{'word': 'apple', 'sememes': {'reproduce', 'fruit', 'tree'}},\n{'word': 'apple', 'sememes': {'communicate', 'able', 'bring', 'tool', 'SpeBrand', 'PatternValue', '$'}},\n{'word': 'apple', 'sememes': {'reproduce', 'fruit', 'tree'}},\n{'word': 'apple', 'sememes': {'fruit'}},\n{'word': 'apple', 'sememes': {'fruit'}}]\n```\n\n#### Get Structured Sememe Trees for Certain Words in HowNet\n\n```python\n>>> hownet_dict.get_sememes_by_word(\"\u82f9\u679c\",structured=True)[0][\"tree\"]\n{'role': 'sense', 'name': '\u82f9\u679c','children': [\n    {'role': 'None', 'name': 'computer|\u7535\u8111', 'children': [\n        {'role': 'modifier', 'name': 'PatternValue|\u6837\u5f0f\u503c', 'children': [\n            {'role': 'CoEvent', 'name': 'able|\u80fd', 'children': [\n                {'role': 'scope', 'name': 'bring|\u643a\u5e26', 'children': [\n                    {'role': 'patient', 'name': '$'}\n                ]}\n            ]}\n        ]},\n        {'role': 'patient', 'name': 'SpeBrand|\u7279\u5b9a\u724c\u5b50'}\n    ]}\n]}\n```\n\nTwo ways to see the corresponding annotation data\n\n```python\n>>> hownet_dict.get_sememes_by_word(\"\u82f9\u679c\",structured=True)[0][\"tree\"] # or\n>>> hownet_dict.get_sememes_by_word(\"\u82f9\u679c\",structured=True)[0][\"word\"]\n>>> # two results are the same, only displaying one\n{'Def': '{computer|\u7535\u8111:modifier={PatternValue|\u6837\u5f0f\u503c:CoEvent={able|\u80fd:scope={bring|\u643a\u5e26:patient={$}}}}{SpeBrand|\u7279\u5b9a\u724c\u5b50}}',\n'en_grammar': 'noun',\n'zh_grammar': 'noun',\n'No': '127151',\n'syn': [\n    {'id': '004024', 'text': 'IBM'},\n    {'id': '041684', 'text': '\u6234\u5c14'},\n    {'id': '049006', 'text': '\u4e1c\u829d'},\n    {'id': '106795', 'text': '\u8054\u60f3'},\n    {'id': '156029', 'text': '\u7d22\u5c3c'},\n    {'id': '004203', 'text': 'iPad'},\n    {'id': '019457', 'text': '\u7b14\u8bb0\u672c'},\n    {'id': '019458', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'},\n    {'id': '019459', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'},\n    {'id': '019460', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'},\n    {'id': '019461', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'},\n    {'id': '019463', 'text': '\u7b14\u8bb0\u7c3f\u7535\u8111'},\n    {'id': '019464', 'text': '\u7b14\u8bb0\u7c3f\u7535\u8111'},\n    {'id': '020567', 'text': '\u4fbf\u643a\u5f0f\u7535\u8111'},\n    {'id': '020568', 'text': '\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'},\n    {'id': '020569', 'text': '\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'},\n    {'id': '127224', 'text': '\u5e73\u677f\u7535\u8111'},\n    {'id': '127225', 'text': '\u5e73\u677f\u7535\u8111'},\n    {'id': '172264', 'text': '\u819d\u4e0a\u578b\u7535\u8111'},\n    {'id': '172265', 'text': '\u819d\u4e0a\u578b\u7535\u8111'}\n],\n'zh_word': '\u82f9\u679c',\n'en_word': 'apple'}\n```\n\n#### Get the Synonyms of the Input Word\n\nThe similarity metrics are based on sememes.\n\n```python\n>>> hownet_dict[\"\u82f9\u679c\"][0][\"syn\"]\n[{'id': '004024', 'text': 'IBM'},\n {'id': '041684', 'text': '\u6234\u5c14'},\n {'id': '049006', 'text': '\u4e1c\u829d'},\n {'id': '106795', 'text': '\u8054\u60f3'},\n {'id': '156029', 'text': '\u7d22\u5c3c'},\n {'id': '004203', 'text': 'iPad'},\n {'id': '019457', 'text': '\u7b14\u8bb0\u672c'},\n {'id': '019458', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'},\n {'id': '019459', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'},\n {'id': '019460', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'},\n {'id': '019461', 'text': '\u7b14\u8bb0\u672c\u7535\u8111'},\n {'id': '019463', 'text': '\u7b14\u8bb0\u7c3f\u7535\u8111'},\n {'id': '019464', 'text': '\u7b14\u8bb0\u7c3f\u7535\u8111'},\n {'id': '020567', 'text': '\u4fbf\u643a\u5f0f\u7535\u8111'},\n {'id': '020568', 'text': '\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'},\n {'id': '020569', 'text': '\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'},\n {'id': '127224', 'text': '\u5e73\u677f\u7535\u8111'},\n {'id': '127225', 'text': '\u5e73\u677f\u7535\u8111'},\n {'id': '172264', 'text': '\u819d\u4e0a\u578b\u7535\u8111'},\n {'id': '172265', 'text': '\u819d\u4e0a\u578b\u7535\u8111'}]\n```\n\n#### Query a Word by its ID\n\n```python\n>>> hownet_dict[\"004024\"]\n['Def', 'en_grammar', 'zh_grammar', 'No', 'syn', 'zh_word', 'en_word']\n```\n\n#### Get all sememes\n\n```python\n>>> len(hownet_dict.get_all_sememes())\n2187\n```\n\n#### Get Relationship Between Two Sememes \n\nThe sememes you input can be in any language.\n\n```python\n>>> hownet_dict.get_sememe_relation(\"\u97f3\u91cf\u503c\", \"\u5c16\u58f0\")\n'hyponym'\n\n>>> hownet_dict.get_sememe_relation(\"\u5c16\u58f0\", \"SoundVolumeValue\")\n'hyponym'\n\n>>> hownet_dict.get_sememe_relation(\"shrill\", \"SoundVolumeValue\")\n'hypernym'\n\n>>> hownet_dict.get_sememe_relation(\"\u97f3\u91cf\u503c\", \"shrill\")\n'hypernym'\n```\n\nThe output could be hypernym, hyponym, antonym or converse.\n\n#### Get sememes having a certain relation with the input sememe\n\nThe sememe you input can be in any language, but the relation must be in lowercase English. You can specify the language of result, by default it will be Chinese.\n\n```python\n>>> hownet_dict.get_sememe_via_relation(\"\u97f3\u91cf\u503c\", \"hyponym\")\n['\u9ad8\u58f0', '\u4f4e\u58f0', '\u5c16\u58f0', '\u6c99\u54d1', '\u65e0\u58f0', '\u6709\u58f0']\n\n>>> hownet_dict.get_sememe_via_relation(\"\u97f3\u91cf\u503c\", \"hyponym\", lang=\"en\")\n['loud', 'LowVoice', 'shrill', 'hoarse', 'silent', 'talking']\n\n>>> hownet_dict.get_sememe_via_relation(\"SoundVolumeValue\", \"hyponym\", lang=\"en\")\n['loud', 'LowVoice', 'shrill', 'hoarse', 'silent', 'talking']\n```\n\n### Advanced Feature: Word Similarity Calculation via Sememes\n\nOur implementation is based on the paper:\n\n> Jiangming Liu, Jinan Xu, Yujie Zhang. An Approach of Hybrid Hierarchical Structure for Word Similarity Computing by HowNet. In Proceedings of IJCNLP\n\n#### Extra Initialization\n\nBecause there are some files required to be loaded for similarity calculation, the initialization overhead will be larger than before. To begin with, you can initialize the hownet_dict object as the following code:\n\n```python\n>>> hownet_dict_advanced = OpenHowNet.HowNetDict(use_sim=True)\n```\n\nYou can also postpone the initialization work of similarity calculation until use. The following code serves as an example and the return value will indicate whether the extra initialization process succeed.\n\n```python\n>>> hownet_dict.initialize_sememe_similarity_calculation()\nTrue\n```\n\n#### Get Top-K Nearest Words for the Input Word\n\nIf the given word does not exist in HowNet annotations, this function will return an empty list.\n\n```python\n>>> query_result = hownet_dict_advanced.get_nearest_words_via_sememes(\"\u82f9\u679c\",20)\n>>> example = query_result[0]\n>>> print(\"word_name:\",example[\"word\"])\n>>> print(\"id:\",example[\"id\"])\n>>> print(\"synset and corresonding word&id&score:\")\n>>> print(example[\"synset\"])\nword_name: \u82f9\u679c\nid: 127151\nsynset and corresonding word&id&score:\n[{'id': 4024, 'word': 'IBM', 'score': 1.0},\n {'id': 41684, 'word': '\u6234\u5c14', 'score': 1.0},\n {'id': 49006, 'word': '\u4e1c\u829d', 'score': 1.0},\n {'id': 106795, 'word': '\u8054\u60f3', 'score': 1.0},\n {'id': 156029, 'word': '\u7d22\u5c3c', 'score': 1.0},\n {'id': 4203, 'word': 'iPad', 'score': 0.865},\n {'id': 19457, 'word': '\u7b14\u8bb0\u672c', 'score': 0.865},\n {'id': 19458, 'word': '\u7b14\u8bb0\u672c\u7535\u8111', 'score': 0.865},\n {'id': 19459, 'word': '\u7b14\u8bb0\u672c\u7535\u8111', 'score': 0.865},\n {'id': 19460, 'word': '\u7b14\u8bb0\u672c\u7535\u8111', 'score': 0.865},\n {'id': 19461, 'word': '\u7b14\u8bb0\u672c\u7535\u8111', 'score': 0.865},\n {'id': 19463, 'word': '\u7b14\u8bb0\u7c3f\u7535\u8111', 'score': 0.865},\n {'id': 19464, 'word': '\u7b14\u8bb0\u7c3f\u7535\u8111', 'score': 0.865},\n {'id': 20567, 'word': '\u4fbf\u643a\u5f0f\u7535\u8111', 'score': 0.865},\n {'id': 20568, 'word': '\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a', 'score': 0.865},\n {'id': 20569, 'word': '\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a', 'score': 0.865},\n {'id': 127224, 'word': '\u5e73\u677f\u7535\u8111', 'score': 0.865},\n {'id': 127225, 'word': '\u5e73\u677f\u7535\u8111', 'score': 0.865},\n {'id': 172264, 'word': '\u819d\u4e0a\u578b\u7535\u8111', 'score': 0.865},\n {'id': 172265, 'word': '\u819d\u4e0a\u578b\u7535\u8111', 'score': 0.865}]\n```\n\n#### Calculate the Similarity for Given Two Words\n\nIf any of the given words does not exist in HowNet annotations, this function will return 0.\n\n```python\n>>> hownet_dict_advanced.calculate_word_similarity(\"\u82f9\u679c\", \"\u68a8\")\n1.0\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thunlp/OpenHowNet-API/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "OpenHowNet", "package_url": "https://pypi.org/project/OpenHowNet/", "platform": "", "project_url": "https://pypi.org/project/OpenHowNet/", "project_urls": {"Homepage": "https://github.com/thunlp/OpenHowNet-API/"}, "release_url": "https://pypi.org/project/OpenHowNet/0.0.1a11/", "requires_dist": ["anytree", "tqdm", "requests"], "requires_python": ">=3.6", "summary": "OpenHowNet-API", "version": "0.0.1a11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OpenHowNet</h1>\n<img align=\"center\" alt=\"OpenHowNet Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff1a0948e7f012bf9d3be58e7e56c72ae8b3867c/6f70656e686f776e65742d6c6f676f2e706e67\" width=\"300\">\n<h3><a href=\"README_ZH.md\" rel=\"nofollow\">\u4e2d\u6587\u7248\u672c</a></h3>\n<p>This project contains core data of HowNet and OpenHowNet API developed by THUNLP, which provides a convenient way to search information in HowNet, display sememe trees, calculate word similarity via sememes, etc. You can also visit our <a href=\"https://openhownet.thunlp.org\" rel=\"nofollow\">website</a> to enjoy searching and exhibiting sememes of words online.</p>\n<p>If you use any data or API provided by OpenHowNet in your research, please cite the following paper:</p>\n<pre><code>@article{qi2019openhownet,\n  title={OpenHowNet: An Open Sememe-based Lexical Knowledge Base},\n  author={Qi, Fanchao and Yang, Chenghao and Liu, Zhiyuan and Dong, Qiang and Sun, Maosong and Dong, Zhendong},\n  journal={arXiv preprint arXiv:1901.09957},\n  year={2019},\n}\n</code></pre>\n<h2>HowNet Core Data</h2>\n<p>HowNet core data file\uff08<code>HowNet.txt</code>\uff09consists of concepts represented by 223,767 Chinese &amp; English words and phrases. Each concept in HowNet is annotated with sememe-based definition, POS tag, sentiment oriatation, examples, etc. Here is an example of how concepts are annotated in HowNet:</p>\n<pre><code>NO.=042012 #Concept ID\nW_C=\u8d37 #Chinese word\nG_C=verb [9?MustObj] [dai4] #POS tag of the Chinese word\nS_C=PlusFeeling|\u6b63\u9762\u60c5\u611f #Sentiment orientation\nE_C=\u5b9a\u65a9\u4e0d~\uff0c\u4e25\u60e9\u4e0d~  #Examples of the Chinese word\nW_E=forgive #English word \nG_E=verb [7 forgive?verb?-0?vt,sobj,ofnpa?22    ]  #POS tag of the English word\nS_E=PlusFeeling|\u6b63\u9762\u60c5\u611f #Sentiment orientation\nE_E=    #Examples of the English word\nDEF={forgive|\u539f\u8c05} # Sememe-based definition\nRMK=\n</code></pre>\n<h2>OpenHowNet API</h2>\n<h3>Requirements</h3>\n<ul>\n<li>Python==3.6</li>\n<li>anytree==2.4.3</li>\n<li>tqdm==4.31.1</li>\n<li>requests==2.22.0</li>\n</ul>\n<h3>Installation</h3>\n<ul>\n<li>Installation via pip (recommended)</li>\n</ul>\n<pre>pip install OpenHowNet\n</pre>\n<ul>\n<li>Installation via Github</li>\n</ul>\n<pre>git clone https://github.com/thunlp/OpenHowNet/\n<span class=\"nb\">cd</span> OpenHowNet/OpenHowNet\nbash merge.sh\n</pre>\n<h3>Interfaces</h3>\n<table>\n<thead>\n<tr>\n<th>interfaces</th>\n<th>description</th>\n<th>params</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>get(self, word, language=None)</td>\n<td>Search all information annotated with a word.</td>\n<td><code>word</code> is the target word. <code>lang</code> is <code>en</code>(English) or <code>zh</code>(Chinese), searching in both languages by default.</td>\n</tr>\n<tr>\n<td>get_sememes_by_word(self, word, structured=False, lang='zh', merge=False, expanded_layer=-1)</td>\n<td>Search sememes of the target word. You can choose whether multiple senses in the result are merged, whether the result itself is structured, and the expand layers of the tree.</td>\n<td><code>word</code> is the target word. <code>lang</code> is <code>en</code>(English) or <code>zh</code>(Chinese). <code>structured</code> denotes whether the result is structured. <code>merge</code> denotes whether the result is merged. <code>expanded_layer</code> is number of expanded layers and -1 means expand all layers.</td>\n</tr>\n<tr>\n<td>initialize_sememe_similarity_calculation(self)</td>\n<td>Initialize the implementation of advanced feature to calculate sememe-based word similarity. It may take some time to read necessary files.</td>\n<td></td>\n</tr>\n<tr>\n<td>calculate_word_similarity(self, word0, word1)</td>\n<td>Calculate similarity of two words. You need to run last initialization command before calling this function.</td>\n<td><code>word0</code> and <code>word1</code> represents the words you are querying.</td>\n</tr>\n<tr>\n<td>get_nearest_words_via_sememes(self, word, K=10)</td>\n<td>Get the nearest K words to the target word with similarity calculated via sememes.</td>\n<td><code>word</code> is the target word, <code>K</code> is \"top K\" in k nearest neighbors.</td>\n</tr>\n<tr>\n<td>get_sememe_relation(self, sememe0, sememe1)</td>\n<td>Get the relationship between two sememes.</td>\n<td><code>sememe0</code> and <code>sememe1</code> represent the sememes you are querying.</td>\n</tr>\n<tr>\n<td>get_sememe_via_relation(self, sememe, relation, lang='zh')</td>\n<td>Get all sememes that have specified relation with the input sememe.</td>\n<td><code>sememe</code> is the target sememe, <code>relation</code> is the target relation, <code>lang</code> is <code>en</code>(English) or <code>zh</code>(Chinese).</td>\n</tr></tbody></table>\n<h3>Usage</h3>\n<h4>Initialization</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">OpenHowNet</span>\n<span class=\"n\">hownet_dict</span> <span class=\"o\">=</span> <span class=\"n\">OpenHowNet</span><span class=\"o\">.</span><span class=\"n\">HowNetDict</span><span class=\"p\">()</span>\n</pre>\n<p>An error will occur if you haven't downloaded the HowNet data. In this case you need to run <code>OpenHowNet.download()</code> first.</p>\n<h4>Get Word Annotations in HowNet</h4>\n<p>By default, the api will search the target word in both English and Chinese annotations in HowNet, which will cause significant search overhead. Note that if the target word does not exist in HowNet annotation, this api will simply return an empty list.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result_list</span> <span class=\"o\">=</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result_list</span><span class=\"p\">))</span>\n<span class=\"mi\">6</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"p\">{</span><span class=\"s1\">'Def'</span><span class=\"p\">:</span> <span class=\"s1\">'{computer|\u7535\u8111:modifier={PatternValue|\u6837\u5f0f\u503c:CoEvent={able|\u80fd:scope={bring|\u643a\u5e26:patient={$}}}}{SpeBrand|\u7279\u5b9a\u724c\u5b50}}'</span><span class=\"p\">,</span> <span class=\"s1\">'en_grammar'</span><span class=\"p\">:</span> <span class=\"s1\">'noun'</span><span class=\"p\">,</span> <span class=\"s1\">'zh_grammar'</span><span class=\"p\">:</span> <span class=\"s1\">'noun'</span><span class=\"p\">,</span> <span class=\"s1\">'No'</span><span class=\"p\">:</span> <span class=\"s1\">'127151'</span><span class=\"p\">,</span> <span class=\"s1\">'syn'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'004024'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'IBM'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'041684'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u6234\u5c14'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'049006'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4e1c\u829d'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'106795'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u8054\u60f3'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'156029'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7d22\u5c3c'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'004203'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'iPad'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019457'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019458'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019459'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019460'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019461'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019463'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u7c3f\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019464'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u7c3f\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020567'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020568'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020569'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'127224'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u5e73\u677f\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'127225'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u5e73\u677f\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'172264'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u819d\u4e0a\u578b\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'172265'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u819d\u4e0a\u578b\u7535\u8111'</span><span class=\"p\">}],</span> <span class=\"s1\">'zh_word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u82f9\u679c'</span><span class=\"p\">,</span> <span class=\"s1\">'en_word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"test_for_non_exist_word\"</span><span class=\"p\">)</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>You can visualize the retrieved HowNet structured sememe annotations (\"sememe tree\") of the target word as follows (K=2 means only displaying sememe trees of 2 concepts represented by the input word)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">visualize_sememe_trees</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Find</span> <span class=\"mi\">6</span> <span class=\"n\">result</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"n\">Display</span> <span class=\"c1\">#0 sememe tree</span>\n<span class=\"p\">[</span><span class=\"n\">sense</span><span class=\"p\">]</span><span class=\"n\">\u82f9\u679c</span>\n<span class=\"err\">\u2514\u2500\u2500</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span><span class=\"n\">computer</span><span class=\"o\">|</span><span class=\"n\">\u7535\u8111</span>\n    <span class=\"err\">\u251c\u2500\u2500</span> <span class=\"p\">[</span><span class=\"n\">modifier</span><span class=\"p\">]</span><span class=\"n\">PatternValue</span><span class=\"o\">|</span><span class=\"n\">\u6837\u5f0f\u503c</span>\n    <span class=\"err\">\u2502</span>   <span class=\"err\">\u2514\u2500\u2500</span> <span class=\"p\">[</span><span class=\"n\">CoEvent</span><span class=\"p\">]</span><span class=\"n\">able</span><span class=\"o\">|</span><span class=\"n\">\u80fd</span>\n    <span class=\"err\">\u2502</span>       <span class=\"err\">\u2514\u2500\u2500</span> <span class=\"p\">[</span><span class=\"n\">scope</span><span class=\"p\">]</span><span class=\"n\">bring</span><span class=\"o\">|</span><span class=\"n\">\u643a\u5e26</span>\n    <span class=\"err\">\u2502</span>           <span class=\"err\">\u2514\u2500\u2500</span> <span class=\"p\">[</span><span class=\"n\">patient</span><span class=\"p\">]</span><span class=\"err\">$</span>\n    <span class=\"err\">\u2514\u2500\u2500</span> <span class=\"p\">[</span><span class=\"n\">patient</span><span class=\"p\">]</span><span class=\"n\">SpeBrand</span><span class=\"o\">|</span><span class=\"n\">\u7279\u5b9a\u724c\u5b50</span>\n<span class=\"n\">Display</span> <span class=\"c1\">#1 sememe tree</span>\n<span class=\"p\">[</span><span class=\"n\">sense</span><span class=\"p\">]</span><span class=\"n\">\u82f9\u679c</span>\n<span class=\"err\">\u2514\u2500\u2500</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span><span class=\"n\">fruit</span><span class=\"o\">|</span><span class=\"n\">\u6c34\u679c</span>\n</pre>\n<p>To boost the efficiency of the search process, you can specify the language of the target word as the following.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result_list</span> <span class=\"o\">=</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span> <span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s2\">\"zh\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Number of monolingual results: \"</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result_list</span><span class=\"p\">))</span>\n<span class=\"n\">Number</span> <span class=\"n\">of</span> <span class=\"n\">monolingual</span> <span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Example of monolingual results: \"</span><span class=\"p\">,</span><span class=\"n\">result_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">Example</span> <span class=\"n\">of</span> <span class=\"n\">monolingual</span> <span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'Def'</span><span class=\"p\">:</span> <span class=\"s1\">'{computer|\u7535\u8111:modifier={PatternValue|\u6837\u5f0f\u503c:CoEvent={able|\u80fd:scope={bring|\u643a\u5e26:patient={$}}}}{SpeBrand|\u7279\u5b9a\u724c\u5b50}}'</span><span class=\"p\">,</span> <span class=\"s1\">'en_grammar'</span><span class=\"p\">:</span> <span class=\"s1\">'noun'</span><span class=\"p\">,</span> <span class=\"s1\">'zh_grammar'</span><span class=\"p\">:</span> <span class=\"s1\">'noun'</span><span class=\"p\">,</span> <span class=\"s1\">'No'</span><span class=\"p\">:</span> <span class=\"s1\">'127151'</span><span class=\"p\">,</span> <span class=\"s1\">'syn'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'004024'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'IBM'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'041684'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u6234\u5c14'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'049006'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4e1c\u829d'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'106795'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u8054\u60f3'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'156029'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7d22\u5c3c'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'004203'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'iPad'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019457'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019458'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019459'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019460'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019461'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019463'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u7c3f\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019464'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u7c3f\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020567'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020568'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020569'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'127224'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u5e73\u677f\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'127225'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u5e73\u677f\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'172264'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u819d\u4e0a\u578b\u7535\u8111'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'172265'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u819d\u4e0a\u578b\u7535\u8111'</span><span class=\"p\">}],</span> <span class=\"s1\">'zh_word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u82f9\u679c'</span><span class=\"p\">,</span> <span class=\"s1\">'en_word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Number of all the results: \"</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"X\"</span><span class=\"p\">)))</span>\n<span class=\"n\">Number</span> <span class=\"n\">of</span> <span class=\"nb\">all</span> <span class=\"n\">the</span> <span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Number of Chinese results: \"</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"X\"</span><span class=\"p\">,</span><span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s2\">\"zh\"</span><span class=\"p\">)))</span>\n<span class=\"n\">Number</span> <span class=\"n\">of</span> <span class=\"n\">Chinese</span> <span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Number of English results:\"</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"X\"</span><span class=\"p\">,</span><span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">)))</span>\n<span class=\"n\">Number</span> <span class=\"n\">of</span> <span class=\"n\">English</span> <span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span> <span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">)</span>\n<span class=\"p\">[]</span>\n</pre>\n<h4>Get All Words Annotated in HowNet</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">zh_word_list</span> <span class=\"o\">=</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_zh_words</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">zh_word_list</span><span class=\"p\">[:</span><span class=\"mi\">30</span><span class=\"p\">])</span>\n<span class=\"p\">[</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">'\"'</span><span class=\"p\">,</span> <span class=\"s1\">'#'</span><span class=\"p\">,</span> <span class=\"s1\">'#\u53f7\u6807\u7b7e'</span><span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">,</span> <span class=\"s1\">'%'</span><span class=\"p\">,</span> <span class=\"s2\">\"'\"</span><span class=\"p\">,</span> <span class=\"s1\">'('</span><span class=\"p\">,</span> <span class=\"s1\">')'</span><span class=\"p\">,</span> <span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span> <span class=\"s1\">'--'</span><span class=\"p\">,</span> <span class=\"s1\">'...'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u51fa\u4ec0\u4e48\u95ee\u9898'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u5e95'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u5e95\u4e0b'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u53d1\u751f\u6545\u969c'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u53d1\u751f\u4e86\u4ec0\u4e48'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u4f55\u5982'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u5bb6\u91cc\u6709\u51e0\u53e3\u4eba'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u68c0\u6d4b\u5448\u9633\u6027'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u68c0\u6d4b\u5448\u9634\u6027'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u6765'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u5185'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u4e3a\u6b62'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u4e5f\u540c\u6837\u4f7f\u7136'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u4ee5\u6765'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u4ee5\u5185'</span><span class=\"p\">,</span> <span class=\"s1\">'...\u4ee5\u4e0a'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">en_word_list</span> <span class=\"o\">=</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_en_words</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">en_word_list</span><span class=\"p\">[:</span><span class=\"mi\">30</span><span class=\"p\">])</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'An'</span><span class=\"p\">,</span> <span class=\"s1\">'Frenchmen'</span><span class=\"p\">,</span> <span class=\"s1\">'Frenchwomen'</span><span class=\"p\">,</span> <span class=\"s1\">'Ottomans'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'aardwolves'</span><span class=\"p\">,</span> <span class=\"s1\">'abaci'</span><span class=\"p\">,</span> <span class=\"s1\">'abandoned'</span><span class=\"p\">,</span> <span class=\"s1\">'abbreviated'</span><span class=\"p\">,</span> <span class=\"s1\">'abode'</span><span class=\"p\">,</span> <span class=\"s1\">'aboideaux'</span><span class=\"p\">,</span> <span class=\"s1\">'aboiteaux'</span><span class=\"p\">,</span> <span class=\"s1\">'abscissae'</span><span class=\"p\">,</span> <span class=\"s1\">'absorbed'</span><span class=\"p\">,</span> <span class=\"s1\">'acanthi'</span><span class=\"p\">,</span> <span class=\"s1\">'acari'</span><span class=\"p\">,</span> <span class=\"s1\">'accepted'</span><span class=\"p\">,</span> <span class=\"s1\">'acciaccature'</span><span class=\"p\">,</span> <span class=\"s1\">'acclaimed'</span><span class=\"p\">,</span> <span class=\"s1\">'accommodating'</span><span class=\"p\">,</span> <span class=\"s1\">'accompanied'</span><span class=\"p\">,</span> <span class=\"s1\">'accounting'</span><span class=\"p\">,</span> <span class=\"s1\">'accused'</span><span class=\"p\">,</span> <span class=\"s1\">'acetabula'</span><span class=\"p\">,</span> <span class=\"s1\">'acetified'</span><span class=\"p\">,</span> <span class=\"s1\">'aching'</span><span class=\"p\">,</span> <span class=\"s1\">'acicula'</span><span class=\"p\">,</span> <span class=\"s1\">'acini'</span><span class=\"p\">,</span> <span class=\"s1\">'acquired'</span><span class=\"p\">]</span>\n</pre>\n<h4>Get Flattened Sememe Trees for the Input Word</h4>\n<p>Notice: the parameters <code>lang</code>, <code>merge</code> and <code>expanded_layer</code> only work when <code>structured = False</code>. The main consideration is that there are multiple ways to interpret these params when deal with structured data. We leave the freedom to our end user. In next section, you will be able to see how to utilize the structured data. Detailed descriptions of the params are in our documentation.</p>\n<p>Get the full merged sememe list from multi-sense words</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememes_by_word</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span><span class=\"n\">structured</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"zh\"</span><span class=\"p\">,</span><span class=\"n\">merge</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'\u4ea4\u6d41'</span><span class=\"p\">,</span> <span class=\"s1\">'\u7528\u5177'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6c34\u679c'</span><span class=\"p\">,</span> <span class=\"s1\">'\u7279\u5b9a\u724c\u5b50'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6837\u5f0f\u503c'</span><span class=\"p\">,</span> <span class=\"s1\">'\u80fd'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6811'</span><span class=\"p\">,</span> <span class=\"s1\">'\u751f\u6b96'</span><span class=\"p\">,</span> <span class=\"s1\">'\u643a\u5e26'</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememes_by_word</span><span class=\"p\">(</span><span class=\"s2\">\"apple\"</span><span class=\"p\">,</span><span class=\"n\">structured</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">,</span><span class=\"n\">merge</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'communicate'</span><span class=\"p\">,</span> <span class=\"s1\">'able'</span><span class=\"p\">,</span> <span class=\"s1\">'reproduce'</span><span class=\"p\">,</span> <span class=\"s1\">'SpeBrand'</span><span class=\"p\">,</span> <span class=\"s1\">'computer'</span><span class=\"p\">,</span> <span class=\"s1\">'bring'</span><span class=\"p\">,</span> <span class=\"s1\">'tool'</span><span class=\"p\">,</span> <span class=\"s1\">'PatternValue'</span><span class=\"p\">,</span> <span class=\"s1\">'tree'</span><span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">,</span> <span class=\"s1\">'fruit'</span><span class=\"p\">}</span>\n</pre>\n<p>Even if the language is not corresponding to the target word, the api still works. It will keep all the returned word entries to be in the same language you specified.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememes_by_word</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span><span class=\"n\">structured</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">,</span><span class=\"n\">merge</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'apple'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'communicate'</span><span class=\"p\">,</span> <span class=\"s1\">'able'</span><span class=\"p\">,</span> <span class=\"s1\">'reproduce'</span><span class=\"p\">,</span> <span class=\"s1\">'SpeBrand'</span><span class=\"p\">,</span> <span class=\"s1\">'computer'</span><span class=\"p\">,</span> <span class=\"s1\">'bring'</span><span class=\"p\">,</span> <span class=\"s1\">'tool'</span><span class=\"p\">,</span> <span class=\"s1\">'PatternValue'</span><span class=\"p\">,</span> <span class=\"s1\">'tree'</span><span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">,</span> <span class=\"s1\">'fruit'</span><span class=\"p\">},</span> <span class=\"s1\">'malus pumila'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'reproduce'</span><span class=\"p\">,</span> <span class=\"s1\">'fruit'</span><span class=\"p\">,</span> <span class=\"s1\">'tree'</span><span class=\"p\">},</span> <span class=\"s1\">'orchard apple tree'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'reproduce'</span><span class=\"p\">,</span> <span class=\"s1\">'fruit'</span><span class=\"p\">,</span> <span class=\"s1\">'tree'</span><span class=\"p\">}}</span>\n</pre>\n<p>You could specify the number of the expanded layers:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememes_by_word</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span><span class=\"n\">structured</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span><span class=\"n\">merge</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"n\">expanded_layer</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6811'</span><span class=\"p\">,</span> <span class=\"s1\">'\u7528\u5177'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6c34\u679c'</span><span class=\"p\">}</span>\n</pre>\n<p>You could get all flattened sememe trees for all words as well as specify the number of the expanded layers:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememes_by_word</span><span class=\"p\">(</span><span class=\"s2\">\"I WANT ALL!\"</span><span class=\"p\">,</span><span class=\"n\">structured</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span><span class=\"n\">merge</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># the result is too large, just try it yourself.</span>\n</pre>\n<p>If you would like to see the sememe lists for different senses of particular word in HowNet, just need to set the param <code>merged</code> to <code>False</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememes_by_word</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span><span class=\"n\">structured</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"zh\"</span><span class=\"p\">,</span><span class=\"n\">merge</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u82f9\u679c'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'\u7279\u5b9a\u724c\u5b50'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6837\u5f0f\u503c'</span><span class=\"p\">,</span> <span class=\"s1\">'\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'\u80fd'</span><span class=\"p\">,</span> <span class=\"s1\">'\u643a\u5e26'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u82f9\u679c'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'\u6c34\u679c'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u82f9\u679c'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'\u7279\u5b9a\u724c\u5b50'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6837\u5f0f\u503c'</span><span class=\"p\">,</span> <span class=\"s1\">'\u80fd'</span><span class=\"p\">,</span> <span class=\"s1\">'\u4ea4\u6d41'</span><span class=\"p\">,</span> <span class=\"s1\">'\u7528\u5177'</span><span class=\"p\">,</span> <span class=\"s1\">'\u643a\u5e26'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u82f9\u679c'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'\u6811'</span><span class=\"p\">,</span> <span class=\"s1\">'\u751f\u6b96'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6c34\u679c'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u82f9\u679c'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'\u6811'</span><span class=\"p\">,</span> <span class=\"s1\">'\u751f\u6b96'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6c34\u679c'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u82f9\u679c'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'\u6811'</span><span class=\"p\">,</span> <span class=\"s1\">'\u751f\u6b96'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6c34\u679c'</span><span class=\"p\">}}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememes_by_word</span><span class=\"p\">(</span><span class=\"s2\">\"apple\"</span><span class=\"p\">,</span><span class=\"n\">structured</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">,</span><span class=\"n\">merge</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'able'</span><span class=\"p\">,</span> <span class=\"s1\">'computer'</span><span class=\"p\">,</span> <span class=\"s1\">'bring'</span><span class=\"p\">,</span> <span class=\"s1\">'SpeBrand'</span><span class=\"p\">,</span> <span class=\"s1\">'PatternValue'</span><span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'fruit'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'communicate'</span><span class=\"p\">,</span> <span class=\"s1\">'able'</span><span class=\"p\">,</span> <span class=\"s1\">'bring'</span><span class=\"p\">,</span> <span class=\"s1\">'tool'</span><span class=\"p\">,</span> <span class=\"s1\">'SpeBrand'</span><span class=\"p\">,</span> <span class=\"s1\">'PatternValue'</span><span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'reproduce'</span><span class=\"p\">,</span> <span class=\"s1\">'fruit'</span><span class=\"p\">,</span> <span class=\"s1\">'tree'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'communicate'</span><span class=\"p\">,</span> <span class=\"s1\">'able'</span><span class=\"p\">,</span> <span class=\"s1\">'bring'</span><span class=\"p\">,</span> <span class=\"s1\">'tool'</span><span class=\"p\">,</span> <span class=\"s1\">'SpeBrand'</span><span class=\"p\">,</span> <span class=\"s1\">'PatternValue'</span><span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'reproduce'</span><span class=\"p\">,</span> <span class=\"s1\">'fruit'</span><span class=\"p\">,</span> <span class=\"s1\">'tree'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'fruit'</span><span class=\"p\">}},</span>\n<span class=\"p\">{</span><span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">,</span> <span class=\"s1\">'sememes'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'fruit'</span><span class=\"p\">}}]</span>\n</pre>\n<h4>Get Structured Sememe Trees for Certain Words in HowNet</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememes_by_word</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span><span class=\"n\">structured</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"tree\"</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"s1\">'role'</span><span class=\"p\">:</span> <span class=\"s1\">'sense'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'\u82f9\u679c'</span><span class=\"p\">,</span><span class=\"s1\">'children'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'role'</span><span class=\"p\">:</span> <span class=\"s1\">'None'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'computer|\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'children'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s1\">'role'</span><span class=\"p\">:</span> <span class=\"s1\">'modifier'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'PatternValue|\u6837\u5f0f\u503c'</span><span class=\"p\">,</span> <span class=\"s1\">'children'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"s1\">'role'</span><span class=\"p\">:</span> <span class=\"s1\">'CoEvent'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'able|\u80fd'</span><span class=\"p\">,</span> <span class=\"s1\">'children'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s1\">'role'</span><span class=\"p\">:</span> <span class=\"s1\">'scope'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'bring|\u643a\u5e26'</span><span class=\"p\">,</span> <span class=\"s1\">'children'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"p\">{</span><span class=\"s1\">'role'</span><span class=\"p\">:</span> <span class=\"s1\">'patient'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'$'</span><span class=\"p\">}</span>\n                <span class=\"p\">]}</span>\n            <span class=\"p\">]}</span>\n        <span class=\"p\">]},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'role'</span><span class=\"p\">:</span> <span class=\"s1\">'patient'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'SpeBrand|\u7279\u5b9a\u724c\u5b50'</span><span class=\"p\">}</span>\n    <span class=\"p\">]}</span>\n<span class=\"p\">]}</span>\n</pre>\n<p>Two ways to see the corresponding annotation data</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememes_by_word</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span><span class=\"n\">structured</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"tree\"</span><span class=\"p\">]</span> <span class=\"c1\"># or</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememes_by_word</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span><span class=\"n\">structured</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"word\"</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># two results are the same, only displaying one</span>\n<span class=\"p\">{</span><span class=\"s1\">'Def'</span><span class=\"p\">:</span> <span class=\"s1\">'{computer|\u7535\u8111:modifier={PatternValue|\u6837\u5f0f\u503c:CoEvent={able|\u80fd:scope={bring|\u643a\u5e26:patient={$}}}}{SpeBrand|\u7279\u5b9a\u724c\u5b50}}'</span><span class=\"p\">,</span>\n<span class=\"s1\">'en_grammar'</span><span class=\"p\">:</span> <span class=\"s1\">'noun'</span><span class=\"p\">,</span>\n<span class=\"s1\">'zh_grammar'</span><span class=\"p\">:</span> <span class=\"s1\">'noun'</span><span class=\"p\">,</span>\n<span class=\"s1\">'No'</span><span class=\"p\">:</span> <span class=\"s1\">'127151'</span><span class=\"p\">,</span>\n<span class=\"s1\">'syn'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'004024'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'IBM'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'041684'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u6234\u5c14'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'049006'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4e1c\u829d'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'106795'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u8054\u60f3'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'156029'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7d22\u5c3c'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'004203'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'iPad'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019457'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019458'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019459'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019460'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019461'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019463'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u7c3f\u7535\u8111'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019464'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u7c3f\u7535\u8111'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020567'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u7535\u8111'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020568'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020569'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'127224'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u5e73\u677f\u7535\u8111'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'127225'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u5e73\u677f\u7535\u8111'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'172264'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u819d\u4e0a\u578b\u7535\u8111'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'172265'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u819d\u4e0a\u578b\u7535\u8111'</span><span class=\"p\">}</span>\n<span class=\"p\">],</span>\n<span class=\"s1\">'zh_word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u82f9\u679c'</span><span class=\"p\">,</span>\n<span class=\"s1\">'en_word'</span><span class=\"p\">:</span> <span class=\"s1\">'apple'</span><span class=\"p\">}</span>\n</pre>\n<h4>Get the Synonyms of the Input Word</h4>\n<p>The similarity metrics are based on sememes.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"p\">[</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"syn\"</span><span class=\"p\">]</span>\n<span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'004024'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'IBM'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'041684'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u6234\u5c14'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'049006'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4e1c\u829d'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'106795'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u8054\u60f3'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'156029'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7d22\u5c3c'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'004203'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'iPad'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019457'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019458'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019459'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019460'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019461'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019463'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u7c3f\u7535\u8111'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'019464'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u7c3f\u7535\u8111'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020567'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u7535\u8111'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020568'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'020569'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'127224'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u5e73\u677f\u7535\u8111'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'127225'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u5e73\u677f\u7535\u8111'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'172264'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u819d\u4e0a\u578b\u7535\u8111'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'172265'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'\u819d\u4e0a\u578b\u7535\u8111'</span><span class=\"p\">}]</span>\n</pre>\n<h4>Query a Word by its ID</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"p\">[</span><span class=\"s2\">\"004024\"</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'Def'</span><span class=\"p\">,</span> <span class=\"s1\">'en_grammar'</span><span class=\"p\">,</span> <span class=\"s1\">'zh_grammar'</span><span class=\"p\">,</span> <span class=\"s1\">'No'</span><span class=\"p\">,</span> <span class=\"s1\">'syn'</span><span class=\"p\">,</span> <span class=\"s1\">'zh_word'</span><span class=\"p\">,</span> <span class=\"s1\">'en_word'</span><span class=\"p\">]</span>\n</pre>\n<h4>Get all sememes</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_all_sememes</span><span class=\"p\">())</span>\n<span class=\"mi\">2187</span>\n</pre>\n<h4>Get Relationship Between Two Sememes</h4>\n<p>The sememes you input can be in any language.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememe_relation</span><span class=\"p\">(</span><span class=\"s2\">\"\u97f3\u91cf\u503c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\u5c16\u58f0\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'hyponym'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememe_relation</span><span class=\"p\">(</span><span class=\"s2\">\"\u5c16\u58f0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"SoundVolumeValue\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'hyponym'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememe_relation</span><span class=\"p\">(</span><span class=\"s2\">\"shrill\"</span><span class=\"p\">,</span> <span class=\"s2\">\"SoundVolumeValue\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'hypernym'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememe_relation</span><span class=\"p\">(</span><span class=\"s2\">\"\u97f3\u91cf\u503c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"shrill\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'hypernym'</span>\n</pre>\n<p>The output could be hypernym, hyponym, antonym or converse.</p>\n<h4>Get sememes having a certain relation with the input sememe</h4>\n<p>The sememe you input can be in any language, but the relation must be in lowercase English. You can specify the language of result, by default it will be Chinese.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememe_via_relation</span><span class=\"p\">(</span><span class=\"s2\">\"\u97f3\u91cf\u503c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hyponym\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'\u9ad8\u58f0'</span><span class=\"p\">,</span> <span class=\"s1\">'\u4f4e\u58f0'</span><span class=\"p\">,</span> <span class=\"s1\">'\u5c16\u58f0'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6c99\u54d1'</span><span class=\"p\">,</span> <span class=\"s1\">'\u65e0\u58f0'</span><span class=\"p\">,</span> <span class=\"s1\">'\u6709\u58f0'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememe_via_relation</span><span class=\"p\">(</span><span class=\"s2\">\"\u97f3\u91cf\u503c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hyponym\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'loud'</span><span class=\"p\">,</span> <span class=\"s1\">'LowVoice'</span><span class=\"p\">,</span> <span class=\"s1\">'shrill'</span><span class=\"p\">,</span> <span class=\"s1\">'hoarse'</span><span class=\"p\">,</span> <span class=\"s1\">'silent'</span><span class=\"p\">,</span> <span class=\"s1\">'talking'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">get_sememe_via_relation</span><span class=\"p\">(</span><span class=\"s2\">\"SoundVolumeValue\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hyponym\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'loud'</span><span class=\"p\">,</span> <span class=\"s1\">'LowVoice'</span><span class=\"p\">,</span> <span class=\"s1\">'shrill'</span><span class=\"p\">,</span> <span class=\"s1\">'hoarse'</span><span class=\"p\">,</span> <span class=\"s1\">'silent'</span><span class=\"p\">,</span> <span class=\"s1\">'talking'</span><span class=\"p\">]</span>\n</pre>\n<h3>Advanced Feature: Word Similarity Calculation via Sememes</h3>\n<p>Our implementation is based on the paper:</p>\n<blockquote>\n<p>Jiangming Liu, Jinan Xu, Yujie Zhang. An Approach of Hybrid Hierarchical Structure for Word Similarity Computing by HowNet. In Proceedings of IJCNLP</p>\n</blockquote>\n<h4>Extra Initialization</h4>\n<p>Because there are some files required to be loaded for similarity calculation, the initialization overhead will be larger than before. To begin with, you can initialize the hownet_dict object as the following code:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict_advanced</span> <span class=\"o\">=</span> <span class=\"n\">OpenHowNet</span><span class=\"o\">.</span><span class=\"n\">HowNetDict</span><span class=\"p\">(</span><span class=\"n\">use_sim</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>You can also postpone the initialization work of similarity calculation until use. The following code serves as an example and the return value will indicate whether the extra initialization process succeed.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict</span><span class=\"o\">.</span><span class=\"n\">initialize_sememe_similarity_calculation</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n</pre>\n<h4>Get Top-K Nearest Words for the Input Word</h4>\n<p>If the given word does not exist in HowNet annotations, this function will return an empty list.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">query_result</span> <span class=\"o\">=</span> <span class=\"n\">hownet_dict_advanced</span><span class=\"o\">.</span><span class=\"n\">get_nearest_words_via_sememes</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">example</span> <span class=\"o\">=</span> <span class=\"n\">query_result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"word_name:\"</span><span class=\"p\">,</span><span class=\"n\">example</span><span class=\"p\">[</span><span class=\"s2\">\"word\"</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"id:\"</span><span class=\"p\">,</span><span class=\"n\">example</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"synset and corresonding word&amp;id&amp;score:\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"p\">[</span><span class=\"s2\">\"synset\"</span><span class=\"p\">])</span>\n<span class=\"n\">word_name</span><span class=\"p\">:</span> <span class=\"n\">\u82f9\u679c</span>\n<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"mi\">127151</span>\n<span class=\"n\">synset</span> <span class=\"ow\">and</span> <span class=\"n\">corresonding</span> <span class=\"n\">word</span><span class=\"o\">&amp;</span><span class=\"nb\">id</span><span class=\"o\">&amp;</span><span class=\"n\">score</span><span class=\"p\">:</span>\n<span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">4024</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'IBM'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">41684</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u6234\u5c14'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">49006</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4e1c\u829d'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">106795</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u8054\u60f3'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">156029</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7d22\u5c3c'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">4203</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'iPad'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">19457</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">19458</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">19459</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">19460</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">19461</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u672c\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">19463</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u7c3f\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">19464</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u7b14\u8bb0\u7c3f\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">20567</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">20568</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">20569</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u4fbf\u643a\u5f0f\u8ba1\u7b97\u673a'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">127224</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u5e73\u677f\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">127225</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u5e73\u677f\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">172264</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u819d\u4e0a\u578b\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">172265</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">:</span> <span class=\"s1\">'\u819d\u4e0a\u578b\u7535\u8111'</span><span class=\"p\">,</span> <span class=\"s1\">'score'</span><span class=\"p\">:</span> <span class=\"mf\">0.865</span><span class=\"p\">}]</span>\n</pre>\n<h4>Calculate the Similarity for Given Two Words</h4>\n<p>If any of the given words does not exist in HowNet annotations, this function will return 0.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hownet_dict_advanced</span><span class=\"o\">.</span><span class=\"n\">calculate_word_similarity</span><span class=\"p\">(</span><span class=\"s2\">\"\u82f9\u679c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\u68a8\"</span><span class=\"p\">)</span>\n<span class=\"mf\">1.0</span>\n</pre>\n\n          </div>"}, "last_serial": 7155261, "releases": {"0.0.1a0": [{"comment_text": "", "digests": {"md5": "2c3988e281af0550c12ac82e93516ae9", "sha256": "43b9b12e6b05d692ac432bbd58ad176ff5015b6e4fc898227d46ddd087d4c681"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a0-py3-none-any.whl", "has_sig": false, "md5_digest": "2c3988e281af0550c12ac82e93516ae9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18454, "upload_time": "2019-10-17T14:27:12", "upload_time_iso_8601": "2019-10-17T14:27:12.538780Z", "url": "https://files.pythonhosted.org/packages/88/6b/143556d5d9e403b08d90fb451cad33332b132d39308f59170058867d347e/OpenHowNet-0.0.1a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c025fb6e6a0708e09cb28bfe928a8c1", "sha256": "afc53ad1d01c0628affff17a57401ee8a5ba29abeae5108c7819c92474610a1b"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a0.tar.gz", "has_sig": false, "md5_digest": "8c025fb6e6a0708e09cb28bfe928a8c1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48629, "upload_time": "2019-10-17T14:27:17", "upload_time_iso_8601": "2019-10-17T14:27:17.850780Z", "url": "https://files.pythonhosted.org/packages/5c/d4/79cc450359b390f0c633336618410cf4621fa6bc35d736749b8d3c9eed5a/OpenHowNet-0.0.1a0.tar.gz", "yanked": false}], "0.0.1a1": [{"comment_text": "", "digests": {"md5": "ba576a6a23a3d2a10b699d628502e62c", "sha256": "48c129454f3986a404343ff8b23e8b8a00a5163b018b98258f924ce20202887a"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "ba576a6a23a3d2a10b699d628502e62c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18456, "upload_time": "2019-10-18T02:58:07", "upload_time_iso_8601": "2019-10-18T02:58:07.790795Z", "url": "https://files.pythonhosted.org/packages/a3/32/545c05562cd2860edf3afd0719eafd97881618e0fc0d1a3d083767b80632/OpenHowNet-0.0.1a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27097f9173a0cc22fcd5619e4e9cbacf", "sha256": "38e8d887cff80bb82c03ed3349af6e8beb6d05e750b33144e601b8ca43060422"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a1.tar.gz", "has_sig": false, "md5_digest": "27097f9173a0cc22fcd5619e4e9cbacf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48630, "upload_time": "2019-10-18T02:58:12", "upload_time_iso_8601": "2019-10-18T02:58:12.049027Z", "url": "https://files.pythonhosted.org/packages/c9/49/f534455503fd59e9d0b82265fc2ca04777bb1564585a715288a6344fb5d5/OpenHowNet-0.0.1a1.tar.gz", "yanked": false}], "0.0.1a10": [{"comment_text": "", "digests": {"md5": "489ee4331c4baaddd0946356170b7fea", "sha256": "818937d53f470504f16c0c7debc3783476c475113c9403db80b0adede6dd625a"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a10-py3-none-any.whl", "has_sig": false, "md5_digest": "489ee4331c4baaddd0946356170b7fea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18571, "upload_time": "2020-04-28T10:31:59", "upload_time_iso_8601": "2020-04-28T10:31:59.565128Z", "url": "https://files.pythonhosted.org/packages/b5/6b/90a6d853ae0f6317fbce178f8a5ad4855e4e85c53f4695ddcc0ef4b6a9c2/OpenHowNet-0.0.1a10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c07f11f83036914ca85b25e66f615c2", "sha256": "7a344a1db2c73cca55bd5896f75bc61e985873b6d8cee6b110e133fe3ff66fb7"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a10.tar.gz", "has_sig": false, "md5_digest": "9c07f11f83036914ca85b25e66f615c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48748, "upload_time": "2020-04-28T10:32:01", "upload_time_iso_8601": "2020-04-28T10:32:01.638525Z", "url": "https://files.pythonhosted.org/packages/ce/65/b8978418bef42352e6094e251abb8338f38f62c50050373cb53a45de0fc7/OpenHowNet-0.0.1a10.tar.gz", "yanked": false}], "0.0.1a11": [{"comment_text": "", "digests": {"md5": "5eca803175933ae5b363e134f8c3e422", "sha256": "8ece4ac52232b19e39802fb5a11a7ec9093effe42601849b0d11cb9624da67ae"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a11-py3-none-any.whl", "has_sig": false, "md5_digest": "5eca803175933ae5b363e134f8c3e422", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18914, "upload_time": "2020-05-03T07:16:03", "upload_time_iso_8601": "2020-05-03T07:16:03.441596Z", "url": "https://files.pythonhosted.org/packages/ae/21/f546ec869f35a27a359d7518b24b5354371c60fd7fd650bf52f29ba018c8/OpenHowNet-0.0.1a11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "750b6499c8b3d07560df4c11af251fe4", "sha256": "7f33f102fdea2d918f6ceae079abe6783a4f3a8cd71e394fa16deec3f494ab4e"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a11.tar.gz", "has_sig": false, "md5_digest": "750b6499c8b3d07560df4c11af251fe4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48523, "upload_time": "2020-05-03T07:16:05", "upload_time_iso_8601": "2020-05-03T07:16:05.545263Z", "url": "https://files.pythonhosted.org/packages/58/56/d3fd0d3f4a78efa1535c045a3876067cf88604cd55a3bebab8a64430facb/OpenHowNet-0.0.1a11.tar.gz", "yanked": false}], "0.0.1a2": [{"comment_text": "", "digests": {"md5": "2faaae3738d067426979f548ac611d8b", "sha256": "b898b3262b1aa14d8560cbdf85faf2a2a78bcf032e9808973c310afa4e9ce732"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a2-py3-none-any.whl", "has_sig": false, "md5_digest": "2faaae3738d067426979f548ac611d8b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18454, "upload_time": "2019-10-18T04:13:54", "upload_time_iso_8601": "2019-10-18T04:13:54.755573Z", "url": "https://files.pythonhosted.org/packages/06/94/f1d9026a73c598ee6ee4b05bef198d46dbeeb88dc98339b0460fd6f74cd3/OpenHowNet-0.0.1a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bda1f5aa1614237f8d8f7134313527d9", "sha256": "4fbcb290a60a4ecd223835803bbbc9ddb6b3e65178077e837fe2171f14bb7287"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a2.tar.gz", "has_sig": false, "md5_digest": "bda1f5aa1614237f8d8f7134313527d9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48629, "upload_time": "2019-10-18T04:13:58", "upload_time_iso_8601": "2019-10-18T04:13:58.018781Z", "url": "https://files.pythonhosted.org/packages/9a/b8/996de2a4b0d1e688923fbc96bcd59f5302faf5aea158f563eda445197f6b/OpenHowNet-0.0.1a2.tar.gz", "yanked": false}], "0.0.1a3": [{"comment_text": "", "digests": {"md5": "7706cfa94c8cbf8268a822535be88f83", "sha256": "eb22d81cd138ac8ffe12d0fb0c95b0898152ee2432e4171e6b91a95f05acd421"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a3-py3-none-any.whl", "has_sig": false, "md5_digest": "7706cfa94c8cbf8268a822535be88f83", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18455, "upload_time": "2019-10-18T04:17:12", "upload_time_iso_8601": "2019-10-18T04:17:12.510253Z", "url": "https://files.pythonhosted.org/packages/29/e7/65bc92341929e46b2239429de81ef5e0c5c1efca059213da7916df3c7b85/OpenHowNet-0.0.1a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e6c204945dd4d66f1376422fe910230", "sha256": "50aaf338daabd66b20bc6452c864b64af0589ef1c7245d255a477c45c0a15ac6"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a3.tar.gz", "has_sig": false, "md5_digest": "1e6c204945dd4d66f1376422fe910230", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48632, "upload_time": "2019-10-18T04:17:15", "upload_time_iso_8601": "2019-10-18T04:17:15.978922Z", "url": "https://files.pythonhosted.org/packages/dc/c9/1f6ba66b16034e35efd8368fa00a93b8ed4e463bcea3007e4696a22c8964/OpenHowNet-0.0.1a3.tar.gz", "yanked": false}], "0.0.1a4": [{"comment_text": "", "digests": {"md5": "b492cc279f816ef3b6afe6120e197aec", "sha256": "4bd2bc91f780548373349bfd29f72e93d9b3e26f21048b84262a4bd6525531bb"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a4-py3-none-any.whl", "has_sig": false, "md5_digest": "b492cc279f816ef3b6afe6120e197aec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18468, "upload_time": "2019-11-11T06:39:00", "upload_time_iso_8601": "2019-11-11T06:39:00.026864Z", "url": "https://files.pythonhosted.org/packages/34/80/cddbb72b6cc322aa1c494b618f2c2c7b8bdaa1f29c898624b5114c29acf6/OpenHowNet-0.0.1a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f925a2a30a019d59fa79b020e028fe39", "sha256": "966688e931d38e9d6e28a257e21296a98c426789d050ced990e7c5857f1a6dbf"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a4.tar.gz", "has_sig": false, "md5_digest": "f925a2a30a019d59fa79b020e028fe39", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48660, "upload_time": "2019-11-11T06:39:04", "upload_time_iso_8601": "2019-11-11T06:39:04.997486Z", "url": "https://files.pythonhosted.org/packages/60/ce/c3d0fcb9c7403bc4eba77103e7685688a4e7e1485cda891e7738e31ab44d/OpenHowNet-0.0.1a4.tar.gz", "yanked": false}], "0.0.1a5": [{"comment_text": "", "digests": {"md5": "1ca7d2675b7f0b46512bfdd26fe0f208", "sha256": "d6b5c6d84e04c41e1f13e772a18093955089d097c0c9f129a0d66580c8b64536"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a5-py3-none-any.whl", "has_sig": false, "md5_digest": "1ca7d2675b7f0b46512bfdd26fe0f208", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18468, "upload_time": "2019-11-11T06:42:06", "upload_time_iso_8601": "2019-11-11T06:42:06.684760Z", "url": "https://files.pythonhosted.org/packages/08/9c/bdf8fb17acf84a7a0fc8240bba5ff731a6911a82cef3781f873f3a64a2d2/OpenHowNet-0.0.1a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6cc66a411b9919a537402f14b5c2546", "sha256": "f63e04ec83db81f888260ed1b0e06f1395dd9f9a9912327fe9a2d1194af3aaef"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a5.tar.gz", "has_sig": false, "md5_digest": "c6cc66a411b9919a537402f14b5c2546", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48661, "upload_time": "2019-11-11T06:42:13", "upload_time_iso_8601": "2019-11-11T06:42:13.577456Z", "url": "https://files.pythonhosted.org/packages/23/94/7ad29dc78534ff52cfb0f01430ab658b4a7bf1ca27461ccc4879a26d8908/OpenHowNet-0.0.1a5.tar.gz", "yanked": false}], "0.0.1a8": [{"comment_text": "", "digests": {"md5": "b6851df0430fb37cf3b36168830fe1ca", "sha256": "18cb7092eb5eb3fdfa1cb726b3ea2ffc7f0d3543873fc3e3227490f5ccb8c6d4"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a8-py3-none-any.whl", "has_sig": false, "md5_digest": "b6851df0430fb37cf3b36168830fe1ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18500, "upload_time": "2019-11-21T10:24:06", "upload_time_iso_8601": "2019-11-21T10:24:06.301523Z", "url": "https://files.pythonhosted.org/packages/a8/dc/372a6d291e6c75ea45c374dee83ef19369b2d10f0eee2e1b295024cf7219/OpenHowNet-0.0.1a8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1bd04b8114e35df5275e24c6353900e3", "sha256": "bb550b28deec9f52492dde74cef7af4f070c995f70b281739d3e2bb05e155401"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a8.tar.gz", "has_sig": false, "md5_digest": "1bd04b8114e35df5275e24c6353900e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48705, "upload_time": "2019-11-21T10:24:08", "upload_time_iso_8601": "2019-11-21T10:24:08.909977Z", "url": "https://files.pythonhosted.org/packages/30/54/4191934c6651cd6407e40ba6b3130b1457a0f5e629315b85043e0b6382fd/OpenHowNet-0.0.1a8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5eca803175933ae5b363e134f8c3e422", "sha256": "8ece4ac52232b19e39802fb5a11a7ec9093effe42601849b0d11cb9624da67ae"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a11-py3-none-any.whl", "has_sig": false, "md5_digest": "5eca803175933ae5b363e134f8c3e422", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18914, "upload_time": "2020-05-03T07:16:03", "upload_time_iso_8601": "2020-05-03T07:16:03.441596Z", "url": "https://files.pythonhosted.org/packages/ae/21/f546ec869f35a27a359d7518b24b5354371c60fd7fd650bf52f29ba018c8/OpenHowNet-0.0.1a11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "750b6499c8b3d07560df4c11af251fe4", "sha256": "7f33f102fdea2d918f6ceae079abe6783a4f3a8cd71e394fa16deec3f494ab4e"}, "downloads": -1, "filename": "OpenHowNet-0.0.1a11.tar.gz", "has_sig": false, "md5_digest": "750b6499c8b3d07560df4c11af251fe4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48523, "upload_time": "2020-05-03T07:16:05", "upload_time_iso_8601": "2020-05-03T07:16:05.545263Z", "url": "https://files.pythonhosted.org/packages/58/56/d3fd0d3f4a78efa1535c045a3876067cf88604cd55a3bebab8a64430facb/OpenHowNet-0.0.1a11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:53 2020"}