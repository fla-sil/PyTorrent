{"info": {"author": "Jorge Piazentin Ono, Sonia Castelo, Roque Lopez, Enrico Bertini, Juliana Freire, Claudio Silva", "author_email": "jorgehpo@nyu.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PipelineProfiler\n\nAutoML Pipeline exploration tool compatible with Jupyter Notebooks.\n\n![System screen](https://github.com/VIDA-NYU/PipelineVis/blob/master/imgs/system.png)\n\n**Paper**: [https://arxiv.org/abs/2005.00160](https://arxiv.org/abs/2005.00160)\n\n## Demo\n\nTo use PipelineProfiler, first install the Python library (use instructions below). Then, run in Jupyter Notebook:\n~~~~\nimport PipelineProfiler\ndata = PipelineProfiler.get_heartstatlog_data()\nPipelineProfiler.plot_pipeline_matrix(data)\n~~~~\n\n## Install\n\n### Option 1: install via pip:\n~~~~\npip install pipelineprofiler\n~~~~\n\n### Option 2: Run the docker image:\n~~~~\ndocker build -t pipelineprofiler .\ndocker run -p 9999:8888 pipelineprofiler\n~~~~\n\nThen copy the access token and log in to jupyter in the browser url:\n~~~~\nlocalhost:9999\n~~~~\n\n## Data preprocessing\n\nPipelineProfiler reads data from the D3M Metalearning database. You can download this data from: https://metalearning.datadrivendiscovery.org/dumps/2020/03/04/metalearningdb_dump_20200304.tar.gz\n\nYou need to merge two files in order to explore the pipelines: pipelines.json and pipeline_runs.json.  To do so, run\n~~~~\npython -m PipelineProfiler.pipeline_merge [-n NUMBER_PIPELINES] pipeline_runs_file pipelines_file output_file\n~~~~\n\n## Pipeline exploration\n\n~~~~\nimport PipelineProfiler\nimport json\n~~~~\n\nIn a jupyter notebook, load the output_file \n\n~~~~\nwith open(\"output_file.json\", \"r\") as f:\n    pipelines = json.load(f)\n~~~~\n\nand then plot it using:\n\n~~~~\nPipelineProfiler.plot_pipeline_matrix(pipelines[:10])\n~~~~\n\n## Data postprocessing\n\nYou might want to group pipelines by problem type, and select the top k pipelines from each team. To do so, use the code:\n\n~~~~\ndef get_top_k_pipelines_team(pipelines, k):\n    team_pipelines = defaultdict(list)\n    for pipeline in pipelines:\n        source = pipeline['pipeline_source']['name']\n        team_pipelines[source].append(pipeline)\n    for team in team_pipelines.keys():\n        team_pipelines[team] = sorted(team_pipelines[team], key=lambda x: x['scores'][0]['normalized'], reverse=True)\n        team_pipelines[team] = team_pipelines[team][:k]\n    new_pipelines = []\n    for team in team_pipelines.keys():\n        new_pipelines.extend(team_pipelines[team])\n    return new_pipelines\n\ndef sort_pipeline_scores(pipelines):\n    return sorted(pipelines, key=lambda x: x['scores'][0]['value'], reverse=True)    \n\npipelines_problem = {}\nfor pipeline in pipelines:  \n    problem_id = pipeline['problem']['id']\n    if problem_id not in pipelines_problem:\n        pipelines_problem[problem_id] = []\n    pipelines_problem[problem_id].append(pipeline)\nfor problem in pipelines_problem.keys():\n    pipelines_problem[problem] = sort_pipeline_scores(get_top_k_pipelines_team(pipelines_problem[problem], k=100))\n~~~~\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/VIDA-NYU/PipelineVis", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pipelineprofiler", "package_url": "https://pypi.org/project/pipelineprofiler/", "platform": "", "project_url": "https://pypi.org/project/pipelineprofiler/", "project_urls": {"Homepage": "https://github.com/VIDA-NYU/PipelineVis"}, "release_url": "https://pypi.org/project/pipelineprofiler/0.1.2/", "requires_dist": ["numpy", "scipy", "scikit-learn", "networkx", "notebook"], "requires_python": ">=3.6", "summary": "Pipeline Profiler tool. Enables the exploration of D3M pipelines in Jupyter Notebooks", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PipelineProfiler</h1>\n<p>AutoML Pipeline exploration tool compatible with Jupyter Notebooks.</p>\n<p><img alt=\"System screen\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6afce0076abce2e3597b7146ffbf5947962ec112/68747470733a2f2f6769746875622e636f6d2f564944412d4e59552f506970656c696e655669732f626c6f622f6d61737465722f696d67732f73797374656d2e706e67\"></p>\n<p><strong>Paper</strong>: <a href=\"https://arxiv.org/abs/2005.00160\" rel=\"nofollow\">https://arxiv.org/abs/2005.00160</a></p>\n<h2>Demo</h2>\n<p>To use PipelineProfiler, first install the Python library (use instructions below). Then, run in Jupyter Notebook:</p>\n<pre><code>import PipelineProfiler\ndata = PipelineProfiler.get_heartstatlog_data()\nPipelineProfiler.plot_pipeline_matrix(data)\n</code></pre>\n<h2>Install</h2>\n<h3>Option 1: install via pip:</h3>\n<pre><code>pip install pipelineprofiler\n</code></pre>\n<h3>Option 2: Run the docker image:</h3>\n<pre><code>docker build -t pipelineprofiler .\ndocker run -p 9999:8888 pipelineprofiler\n</code></pre>\n<p>Then copy the access token and log in to jupyter in the browser url:</p>\n<pre><code>localhost:9999\n</code></pre>\n<h2>Data preprocessing</h2>\n<p>PipelineProfiler reads data from the D3M Metalearning database. You can download this data from: <a href=\"https://metalearning.datadrivendiscovery.org/dumps/2020/03/04/metalearningdb_dump_20200304.tar.gz\" rel=\"nofollow\">https://metalearning.datadrivendiscovery.org/dumps/2020/03/04/metalearningdb_dump_20200304.tar.gz</a></p>\n<p>You need to merge two files in order to explore the pipelines: pipelines.json and pipeline_runs.json.  To do so, run</p>\n<pre><code>python -m PipelineProfiler.pipeline_merge [-n NUMBER_PIPELINES] pipeline_runs_file pipelines_file output_file\n</code></pre>\n<h2>Pipeline exploration</h2>\n<pre><code>import PipelineProfiler\nimport json\n</code></pre>\n<p>In a jupyter notebook, load the output_file</p>\n<pre><code>with open(\"output_file.json\", \"r\") as f:\n    pipelines = json.load(f)\n</code></pre>\n<p>and then plot it using:</p>\n<pre><code>PipelineProfiler.plot_pipeline_matrix(pipelines[:10])\n</code></pre>\n<h2>Data postprocessing</h2>\n<p>You might want to group pipelines by problem type, and select the top k pipelines from each team. To do so, use the code:</p>\n<pre><code>def get_top_k_pipelines_team(pipelines, k):\n    team_pipelines = defaultdict(list)\n    for pipeline in pipelines:\n        source = pipeline['pipeline_source']['name']\n        team_pipelines[source].append(pipeline)\n    for team in team_pipelines.keys():\n        team_pipelines[team] = sorted(team_pipelines[team], key=lambda x: x['scores'][0]['normalized'], reverse=True)\n        team_pipelines[team] = team_pipelines[team][:k]\n    new_pipelines = []\n    for team in team_pipelines.keys():\n        new_pipelines.extend(team_pipelines[team])\n    return new_pipelines\n\ndef sort_pipeline_scores(pipelines):\n    return sorted(pipelines, key=lambda x: x['scores'][0]['value'], reverse=True)    \n\npipelines_problem = {}\nfor pipeline in pipelines:  \n    problem_id = pipeline['problem']['id']\n    if problem_id not in pipelines_problem:\n        pipelines_problem[problem_id] = []\n    pipelines_problem[problem_id].append(pipeline)\nfor problem in pipelines_problem.keys():\n    pipelines_problem[problem] = sort_pipeline_scores(get_top_k_pipelines_team(pipelines_problem[problem], k=100))\n</code></pre>\n\n          </div>"}, "last_serial": 7161456, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e7ab82fdd400c0bd96c762223d6ebd57", "sha256": "48562defff8ca5e2f4f235cad348ed6379dc2fbf697ed582da59d4f1ea8d905f"}, "downloads": -1, "filename": "pipelineprofiler-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e7ab82fdd400c0bd96c762223d6ebd57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 856850, "upload_time": "2020-05-04T04:11:06", "upload_time_iso_8601": "2020-05-04T04:11:06.321775Z", "url": "https://files.pythonhosted.org/packages/38/75/eb85691d4d77d2193aa252a450c864197ecd78a54e10f2a61fc86db96269/pipelineprofiler-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42964b5375a241c382e9b10250038e3a", "sha256": "ea7f080b859f09096994dc0a3fc9d93c26bba734fc3fe1841602818cd110af28"}, "downloads": -1, "filename": "pipelineprofiler-0.1.0.tar.gz", "has_sig": false, "md5_digest": "42964b5375a241c382e9b10250038e3a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 846310, "upload_time": "2020-05-04T04:11:08", "upload_time_iso_8601": "2020-05-04T04:11:08.780748Z", "url": "https://files.pythonhosted.org/packages/67/5f/7b36051b6e444f29c1e0d12acda62c58b407d46ceb13f4bc7f33dfceb4b4/pipelineprofiler-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ecc276699ac26e4ac40333ee7e4f0903", "sha256": "a039d8acfcc42f7bceaea0a444581444c496a1a0405d7fb9a1b13c86d89d0083"}, "downloads": -1, "filename": "pipelineprofiler-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ecc276699ac26e4ac40333ee7e4f0903", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 869433, "upload_time": "2020-05-04T04:36:51", "upload_time_iso_8601": "2020-05-04T04:36:51.657954Z", "url": "https://files.pythonhosted.org/packages/65/b4/5a6ef3ec22dc996a7667a9d47bc83a32421aebe255c761df3152f9596266/pipelineprofiler-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "707de4a528cf0e8c70a8d35b77981f07", "sha256": "63cd3a0cf5e8294088abe5a5f12ac2452584e73ffe4a8ceafb70d5a17bbba0cb"}, "downloads": -1, "filename": "pipelineprofiler-0.1.1.tar.gz", "has_sig": false, "md5_digest": "707de4a528cf0e8c70a8d35b77981f07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 858297, "upload_time": "2020-05-04T04:36:53", "upload_time_iso_8601": "2020-05-04T04:36:53.058086Z", "url": "https://files.pythonhosted.org/packages/20/dc/94bdf2e9bb09487e3152a5edd8648b332f8a21256d0bc6056df9dfa9e7d6/pipelineprofiler-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d36c10b889ed35d95dcdd885813351a1", "sha256": "490dee54b71d3988185e6446e5abb38a57040db66ada4486d4cdc576e70455b7"}, "downloads": -1, "filename": "pipelineprofiler-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d36c10b889ed35d95dcdd885813351a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 869436, "upload_time": "2020-05-04T05:09:08", "upload_time_iso_8601": "2020-05-04T05:09:08.054025Z", "url": "https://files.pythonhosted.org/packages/9f/20/7197d31682f70f08edef26bbd8a5b7a2c58a024ffc2a814db08ae4716dfb/pipelineprofiler-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf327baa45f539ef97b0a643c4841e2b", "sha256": "495c2396fc0307168520fc88bcfdf476495c2f1e2c8a7b12e6b9411271d39a70"}, "downloads": -1, "filename": "pipelineprofiler-0.1.2.tar.gz", "has_sig": false, "md5_digest": "cf327baa45f539ef97b0a643c4841e2b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 858350, "upload_time": "2020-05-04T05:09:10", "upload_time_iso_8601": "2020-05-04T05:09:10.298950Z", "url": "https://files.pythonhosted.org/packages/2a/d3/362e8b84bc50756307a39ddf4539f1d6409ebdfba90d0e367cec8a89a62b/pipelineprofiler-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d36c10b889ed35d95dcdd885813351a1", "sha256": "490dee54b71d3988185e6446e5abb38a57040db66ada4486d4cdc576e70455b7"}, "downloads": -1, "filename": "pipelineprofiler-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d36c10b889ed35d95dcdd885813351a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 869436, "upload_time": "2020-05-04T05:09:08", "upload_time_iso_8601": "2020-05-04T05:09:08.054025Z", "url": "https://files.pythonhosted.org/packages/9f/20/7197d31682f70f08edef26bbd8a5b7a2c58a024ffc2a814db08ae4716dfb/pipelineprofiler-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf327baa45f539ef97b0a643c4841e2b", "sha256": "495c2396fc0307168520fc88bcfdf476495c2f1e2c8a7b12e6b9411271d39a70"}, "downloads": -1, "filename": "pipelineprofiler-0.1.2.tar.gz", "has_sig": false, "md5_digest": "cf327baa45f539ef97b0a643c4841e2b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 858350, "upload_time": "2020-05-04T05:09:10", "upload_time_iso_8601": "2020-05-04T05:09:10.298950Z", "url": "https://files.pythonhosted.org/packages/2a/d3/362e8b84bc50756307a39ddf4539f1d6409ebdfba90d0e367cec8a89a62b/pipelineprofiler-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:20 2020"}