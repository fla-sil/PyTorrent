{"info": {"author": "Ibragim Abubakarov", "author_email": "ibragim.ai95@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Fluxify\n> A Python package that eases the process of retrieving, organizing and altering data.\n\n####  Required packages\n- **pandas**\n- **imperium**\n- **ijson**\n\n## Installation\n```bash\npip install fluxify\n```\n\n## Main classes\n#####  `fluxify.mapper.Mapper`\nThis class is used read and processing fast files with small amounts of data that can be loaded into memory.\n\n##### `fluxify.lazy_mapper.LazyMapper`\nYou've probable guessed it, this class is used to iterate on large files of data wether it is of format CSV, JSON or XML. \n\n## Usage\nRetrieve data from a simple CSV file\n```csv\nid,brand,price,state,published_at\n938,Xaomi,390.90,used,2020-01-03 12:32:29\n04593,iPhone,1299.90,new,2020-01-02 09:48:12\n```\n#### Mapper implementation\n```python\nfrom fluxify.mapper import Mapper\nimport yaml\n\n# Could also be loaded from a file\nyamlmapping = \"\"\"\nbrand:\n    col: 1\nprice:\n    col: 2\nstate:\n    col: 3\npublish_date:\n    col: 4\n    transformations:\n        - { transformer: 'date', in_format: '%Y-%m-%d %H:%M:%S', out_format: '%H:%M %d/%m/%Y' }\nis_new:\n    conditions:\n        -\n            condition: \"subject['state'] == 'new'\"\n            returnOnSuccess: True\n            returnOnFail: False\n\"\"\"\n\nMap = yaml.load(yamlmapping, Loader=yaml.FullLoader)\nmapper = Mapper(_type='csv')\ndata = mapper.map('path/to/csvfile.csv', Map)\nprint(data)\n```\n**Output**\n```bash\n[\n    {\n        'brand': 'Xaomi',\n        'price': '390.90',\n        'state': 'used',\n        'published_date': '12:32 03/01/2020'\n        'is_new': False\n    },\n    {\n        'brand': 'iPhone',\n        'price': '1299.90',\n        'state': 'new',\n        'published_date': '09:48 02/01/2020'\n        'is_new': True\n    }\n]\n```\n\n#### LazyMapper implementation\nThe `LazyMapper` does not return all the mapped data at the end, instead it maps the data in small sizes that you can specify in order to not max out the memory.\n\n```python\nfrom fluxify.lazy_mapper import LazyMapper\nimport yaml\n\n# Could also be loaded from a file\nyamlmapping = \"\"\"\nbrand:\n    col: 1\nprice:\n    col: 2\nstate:\n    col: 3\npublish_date:\n    col: 4\n    transformations:\n        - { transformer: 'date', in_format: '%Y-%m-%d %H:%M:%S', out_format: '%H:%M %d/%m/%Y' }\nis_new:\n    conditions:\n        -\n            condition: \"subject['state'] == 'new'\"\n            returnOnSuccess: True\n            returnOnFail: False\n\"\"\"\n\nMap = yaml.load(yamlmapping, Loader=yaml.FullLoader)\nmapper = LazyMapper(_type='csv', error_tolerance=True, bulksize=500)\nmapper.map('path/to/csvfile.csv', Map)\n\ndef some_callback(results):\n    for item in results:\n        pass # Perform some action\n\nmapper.set_callback(some_callback)\n\nmapper.map('path/to/csvfile.csv', Map)\n```\nAs you can see, in this example the mapper will call the callback function every time it accumulates 500 mapped items.\n\n### Supported formats\n\nFormat      | CSV | JSON | XML | TXT\n------------|-----|------|-----|-----\nSupported   | YES | YES  | YES | NO\n\n## Transformers\nFluxify has built-in transformers that can alter/modify the data.\n\nFunction        | Arguments                         | Description\n----------------|-----------------------------------|--------------\n**number**      | stringvalue                       | Parses a string to an **integer** or **float** value\n**split**       | delimiter, index                  | Splits a string into parts with a **delimiter** and returns the splitted result if the **index** argument is not defined.\n**date**        | in_format, out_format             | Let's you format a date string to the desired format.\n**replace**     | search, new                       | Replaces the **search** value with **new** value from string\n**boolean**     | No arguments                      | Parses a string to Boolean if the string contains [true|false|1|0]\n**equipments_from_string** | delimiter              | Custom usage\n**options_from_string**    | delimiter              | Custom usage\n\n## Exceptions\nFluxify has different Exception classes for different reasons\nThey reside in the **exceptions** sub-package ```fluxify.exceptions```\n\nClass                                   | Arguments             | Description\n----------------------------------------|-----------------------|-------------\n**ArgumentNotFoundException**           | message               | This exception is raised whenever a argument is not found.\n**InvalidArgumentException**            | message               | This exception is raised when a passed parameter/argument is invalid.\n**ConditionNotFoundException**          | message               | This exception is raised when the \"condition\" key is not defined in the mapping.\n**UnsupportedTransformerException**     | message               | This exception is raised when a transformer other than the ones defined above, is used.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ibragim64/fluxify", "keywords": "", "license": "", "maintainer": "Ibragim Abubakarov", "maintainer_email": "ibragim.ai95@gmail.com", "name": "fluxify", "package_url": "https://pypi.org/project/fluxify/", "platform": "", "project_url": "https://pypi.org/project/fluxify/", "project_urls": {"Homepage": "https://github.com/ibragim64/fluxify"}, "release_url": "https://pypi.org/project/fluxify/0.0.13/", "requires_dist": ["pandas", "PyYAML", "imperium", "ijson"], "requires_python": "", "summary": "A Python package that eases the process of retrieving, organizing and altering data.", "version": "0.0.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Fluxify</h1>\n<blockquote>\n<p>A Python package that eases the process of retrieving, organizing and altering data.</p>\n</blockquote>\n<h4>Required packages</h4>\n<ul>\n<li><strong>pandas</strong></li>\n<li><strong>imperium</strong></li>\n<li><strong>ijson</strong></li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install fluxify\n</pre>\n<h2>Main classes</h2>\n<h5><code>fluxify.mapper.Mapper</code></h5>\n<p>This class is used read and processing fast files with small amounts of data that can be loaded into memory.</p>\n<h5><code>fluxify.lazy_mapper.LazyMapper</code></h5>\n<p>You've probable guessed it, this class is used to iterate on large files of data wether it is of format CSV, JSON or XML.</p>\n<h2>Usage</h2>\n<p>Retrieve data from a simple CSV file</p>\n<pre>id,brand,price,state,published_at\n938,Xaomi,390.90,used,2020-01-03 12:32:29\n04593,iPhone,1299.90,new,2020-01-02 09:48:12\n</pre>\n<h4>Mapper implementation</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluxify.mapper</span> <span class=\"kn\">import</span> <span class=\"n\">Mapper</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"c1\"># Could also be loaded from a file</span>\n<span class=\"n\">yamlmapping</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">brand:</span>\n<span class=\"s2\">    col: 1</span>\n<span class=\"s2\">price:</span>\n<span class=\"s2\">    col: 2</span>\n<span class=\"s2\">state:</span>\n<span class=\"s2\">    col: 3</span>\n<span class=\"s2\">publish_date:</span>\n<span class=\"s2\">    col: 4</span>\n<span class=\"s2\">    transformations:</span>\n<span class=\"s2\">        - { transformer: 'date', in_format: '%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\"> %H:%M:%S', out_format: '%H:%M </span><span class=\"si\">%d</span><span class=\"s2\">/%m/%Y' }</span>\n<span class=\"s2\">is_new:</span>\n<span class=\"s2\">    conditions:</span>\n<span class=\"s2\">        -</span>\n<span class=\"s2\">            condition: \"subject['state'] == 'new'\"</span>\n<span class=\"s2\">            returnOnSuccess: True</span>\n<span class=\"s2\">            returnOnFail: False</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"n\">Map</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">yamlmapping</span><span class=\"p\">,</span> <span class=\"n\">Loader</span><span class=\"o\">=</span><span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">FullLoader</span><span class=\"p\">)</span>\n<span class=\"n\">mapper</span> <span class=\"o\">=</span> <span class=\"n\">Mapper</span><span class=\"p\">(</span><span class=\"n\">_type</span><span class=\"o\">=</span><span class=\"s1\">'csv'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"s1\">'path/to/csvfile.csv'</span><span class=\"p\">,</span> <span class=\"n\">Map</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Output</strong></p>\n<pre><span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n        <span class=\"s1\">'brand'</span>: <span class=\"s1\">'Xaomi'</span>,\n        <span class=\"s1\">'price'</span>: <span class=\"s1\">'390.90'</span>,\n        <span class=\"s1\">'state'</span>: <span class=\"s1\">'used'</span>,\n        <span class=\"s1\">'published_date'</span>: <span class=\"s1\">'12:32 03/01/2020'</span>\n        <span class=\"s1\">'is_new'</span>: False\n    <span class=\"o\">}</span>,\n    <span class=\"o\">{</span>\n        <span class=\"s1\">'brand'</span>: <span class=\"s1\">'iPhone'</span>,\n        <span class=\"s1\">'price'</span>: <span class=\"s1\">'1299.90'</span>,\n        <span class=\"s1\">'state'</span>: <span class=\"s1\">'new'</span>,\n        <span class=\"s1\">'published_date'</span>: <span class=\"s1\">'09:48 02/01/2020'</span>\n        <span class=\"s1\">'is_new'</span>: True\n    <span class=\"o\">}</span>\n<span class=\"o\">]</span>\n</pre>\n<h4>LazyMapper implementation</h4>\n<p>The <code>LazyMapper</code> does not return all the mapped data at the end, instead it maps the data in small sizes that you can specify in order to not max out the memory.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluxify.lazy_mapper</span> <span class=\"kn\">import</span> <span class=\"n\">LazyMapper</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"c1\"># Could also be loaded from a file</span>\n<span class=\"n\">yamlmapping</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">brand:</span>\n<span class=\"s2\">    col: 1</span>\n<span class=\"s2\">price:</span>\n<span class=\"s2\">    col: 2</span>\n<span class=\"s2\">state:</span>\n<span class=\"s2\">    col: 3</span>\n<span class=\"s2\">publish_date:</span>\n<span class=\"s2\">    col: 4</span>\n<span class=\"s2\">    transformations:</span>\n<span class=\"s2\">        - { transformer: 'date', in_format: '%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\"> %H:%M:%S', out_format: '%H:%M </span><span class=\"si\">%d</span><span class=\"s2\">/%m/%Y' }</span>\n<span class=\"s2\">is_new:</span>\n<span class=\"s2\">    conditions:</span>\n<span class=\"s2\">        -</span>\n<span class=\"s2\">            condition: \"subject['state'] == 'new'\"</span>\n<span class=\"s2\">            returnOnSuccess: True</span>\n<span class=\"s2\">            returnOnFail: False</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"n\">Map</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">yamlmapping</span><span class=\"p\">,</span> <span class=\"n\">Loader</span><span class=\"o\">=</span><span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">FullLoader</span><span class=\"p\">)</span>\n<span class=\"n\">mapper</span> <span class=\"o\">=</span> <span class=\"n\">LazyMapper</span><span class=\"p\">(</span><span class=\"n\">_type</span><span class=\"o\">=</span><span class=\"s1\">'csv'</span><span class=\"p\">,</span> <span class=\"n\">error_tolerance</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bulksize</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n<span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"s1\">'path/to/csvfile.csv'</span><span class=\"p\">,</span> <span class=\"n\">Map</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">some_callback</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span> <span class=\"c1\"># Perform some action</span>\n\n<span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">set_callback</span><span class=\"p\">(</span><span class=\"n\">some_callback</span><span class=\"p\">)</span>\n\n<span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"s1\">'path/to/csvfile.csv'</span><span class=\"p\">,</span> <span class=\"n\">Map</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see, in this example the mapper will call the callback function every time it accumulates 500 mapped items.</p>\n<h3>Supported formats</h3>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>CSV</th>\n<th>JSON</th>\n<th>XML</th>\n<th>TXT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Supported</td>\n<td>YES</td>\n<td>YES</td>\n<td>YES</td>\n<td>NO</td>\n</tr></tbody></table>\n<h2>Transformers</h2>\n<p>Fluxify has built-in transformers that can alter/modify the data.</p>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>number</strong></td>\n<td>stringvalue</td>\n<td>Parses a string to an <strong>integer</strong> or <strong>float</strong> value</td>\n</tr>\n<tr>\n<td><strong>split</strong></td>\n<td>delimiter, index</td>\n<td>Splits a string into parts with a <strong>delimiter</strong> and returns the splitted result if the <strong>index</strong> argument is not defined.</td>\n</tr>\n<tr>\n<td><strong>date</strong></td>\n<td>in_format, out_format</td>\n<td>Let's you format a date string to the desired format.</td>\n</tr>\n<tr>\n<td><strong>replace</strong></td>\n<td>search, new</td>\n<td>Replaces the <strong>search</strong> value with <strong>new</strong> value from string</td>\n</tr>\n<tr>\n<td><strong>boolean</strong></td>\n<td>No arguments</td>\n<td>Parses a string to Boolean if the string contains [true</td>\n</tr>\n<tr>\n<td><strong>equipments_from_string</strong></td>\n<td>delimiter</td>\n<td>Custom usage</td>\n</tr>\n<tr>\n<td><strong>options_from_string</strong></td>\n<td>delimiter</td>\n<td>Custom usage</td>\n</tr></tbody></table>\n<h2>Exceptions</h2>\n<p>Fluxify has different Exception classes for different reasons\nThey reside in the <strong>exceptions</strong> sub-package <code>fluxify.exceptions</code></p>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>ArgumentNotFoundException</strong></td>\n<td>message</td>\n<td>This exception is raised whenever a argument is not found.</td>\n</tr>\n<tr>\n<td><strong>InvalidArgumentException</strong></td>\n<td>message</td>\n<td>This exception is raised when a passed parameter/argument is invalid.</td>\n</tr>\n<tr>\n<td><strong>ConditionNotFoundException</strong></td>\n<td>message</td>\n<td>This exception is raised when the \"condition\" key is not defined in the mapping.</td>\n</tr>\n<tr>\n<td><strong>UnsupportedTransformerException</strong></td>\n<td>message</td>\n<td>This exception is raised when a transformer other than the ones defined above, is used.</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 7061038, "releases": {"0.0.11": [{"comment_text": "", "digests": {"md5": "0bad5978cd56f1150bc0c8882131de93", "sha256": "0e0ab529a250528263954d4c5776af05b20163d524ccfee4cbd0802ab36e7364"}, "downloads": -1, "filename": "fluxify-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "0bad5978cd56f1150bc0c8882131de93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15260, "upload_time": "2020-04-11T10:12:17", "upload_time_iso_8601": "2020-04-11T10:12:17.006340Z", "url": "https://files.pythonhosted.org/packages/f9/bb/47c853f15fe572510b72bfcf179d4d25913afb9be1dfa4ab3c4cdbed04ac/fluxify-0.0.11-py3-none-any.whl", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "bc256232f526356e795bd176865ae8fa", "sha256": "1703f4e8647687e0c1bf18ca908ef8f599c0b62887ca74b1204f507c29e3a3b7"}, "downloads": -1, "filename": "fluxify-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "bc256232f526356e795bd176865ae8fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15288, "upload_time": "2020-04-20T15:38:37", "upload_time_iso_8601": "2020-04-20T15:38:37.567599Z", "url": "https://files.pythonhosted.org/packages/bd/18/c88e3ecc482dcebd12bc7545cc267d62cf1950cfba8325e11173d88c4c89/fluxify-0.0.12-py3-none-any.whl", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "1359c6620ddd9bc595c2bda05946acf4", "sha256": "605244a9c69dce360abc16fe3bb364973751993b1d7660a22707f50ff608eb48"}, "downloads": -1, "filename": "fluxify-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "1359c6620ddd9bc595c2bda05946acf4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15332, "upload_time": "2020-04-20T15:43:07", "upload_time_iso_8601": "2020-04-20T15:43:07.636973Z", "url": "https://files.pythonhosted.org/packages/88/58/e93f3783c531d5c97ff6498e094be426df4fc565f6baaf1924137c725c2f/fluxify-0.0.13-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1359c6620ddd9bc595c2bda05946acf4", "sha256": "605244a9c69dce360abc16fe3bb364973751993b1d7660a22707f50ff608eb48"}, "downloads": -1, "filename": "fluxify-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "1359c6620ddd9bc595c2bda05946acf4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15332, "upload_time": "2020-04-20T15:43:07", "upload_time_iso_8601": "2020-04-20T15:43:07.636973Z", "url": "https://files.pythonhosted.org/packages/88/58/e93f3783c531d5c97ff6498e094be426df4fc565f6baaf1924137c725c2f/fluxify-0.0.13-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 01:01:24 2020"}