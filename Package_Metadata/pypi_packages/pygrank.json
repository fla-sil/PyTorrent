{"info": {"author": "Emmanouil Krasanakis", "author_email": "maniospas@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pygrank\nRecommendation algorithms for large graphs.\n\n## Installation\n```\npip install pygrank\n```\n\n## Usage\n###### Run a PageRank algorithm with seed oversampling\n```python\nimport networkx as nx\nfrom pygrank.algorithms.pagerank import PageRank as Ranker\nfrom pygrank.algorithms.oversampling import SeedOversampling as Oversampler\n\nG = nx.Graph()\nseeds = list()\n... # insert graph nodes and select some of them as seeds (e.g. see tests.py)\n\nalgorithm = Oversampler(Ranker(alpha=0.85, tol=1.E-6, max_iters=100)) # these are the default values\nranks = algorithm.rank(G, {v: 1 for v in seeds})\n```\n\n###### Run a PageRank algorithm and make it converge to a robust node order\n```python\nimport networkx as nx\nfrom pygrank.algorithms.pagerank import PageRank as Ranker\nfrom pygrank.algorithms.utils import RankOrderConvergenceManager\n\nG = nx.Graph()\nseeds = list()\n... # insert graph nodes and select some of them as seeds (e.g. see tests.py)\nalpha = 0.85\n\nalgorithm = Ranker(alpha=alpha, convergence=RankOrderConvergenceManager(alpha))\nranks = algorithm.rank(G, {v: 1 for v in seeds})\n```\n\n###### Hash the outcome of graph normalization to speed up multiple calls to the same graph\n```python\nimport networkx as nx\nfrom pygrank.algorithms.pagerank import PageRank as Ranker\nfrom pygrank.algorithms.utils import preprocessor\n\nG = nx.Graph()\nseeds1 = list()\nseeds2 = list()\n... # insert graph nodes and select some of them as seeds (e.g. see tests.py)\n\nalgorithm = Ranker(alpha=0.8, to_scipy=preprocessor(normalization=\"col\", assume_immutability=True))\nranks = algorithm.rank(G, {v: 1 for v in seeds1})\nranks = algorithm.rank(G, {v: 1 for v in seeds2}) # does not re-compute the normalization\n```\n\n###### How to evaluate with an unsupervised metric\n```python\nfrom pygrank.algorithms.postprocess import Normalize\nfrom pygrank.metrics.unsupervised import Conductance\n\nG, ranks = ... # calculate as per the first example\nnormalized_ranks = Normalize().rank(ranks)\n\nmetric = Conductance(G)\nprint(metric.evaluate(normalized_ranks))\n```\n\n###### How to evaluate with a supervised metric\n```python\nfrom pygrank.metrics.supervised import AUC\nimport pygrank.metrics.utils\n\nG, seeds, algorithm = ... # as per the first example\nseeds, ground_truth = pygrank.metrics.utils.split_groups(seeds, fraction_of_training=0.5)\n\npygrank.metrics.utils.remove_group_edges_from_graph(G, ground_truth)\nranks = algorithm.rank(G, {v: 1 for v in seeds})\n\nmetric = AUC({v: 1 for v in ground_truth})\nprint(metric.evaluate(ranks))\n```\n\n###### How to evaluate multiple ranks\n```python\nimport networkx as nx\nfrom pygrank.algorithms.pagerank import PageRank as Ranker\nfrom pygrank.algorithms.postprocess import Normalize as Normalizer\nfrom pygrank.algorithms.oversampling import BoostedSeedOversampling as Oversampler\nfrom pygrank.metrics.unsupervised import Conductance\nfrom pygrank.metrics.supervised import AUC\nfrom pygrank.metrics.multigroup import MultiUnsupervised, MultiSupervised, LinkAUC\nimport pygrank.metrics.utils\n\n# Construct data\nG = nx.Graph()\ngroups = {}\ngroups[\"group1\"] = list()\n... \n\n# Split to training and test data\ntraining_groups, test_groups = pygrank.metrics.utils.split_groups(groups)\npygrank.metrics.utils.remove_group_edges_from_graph(G, test_groups)\n\n# Calculate ranks and put them in a map\nalgorithm = Normalizer(Oversampler(Ranker(alpha=0.99)))\nranks = {group_id: algorithm.rank(G, {v: 1 for v in group}) \n        for group_id, group in training_groups.items()}\n\n\n# Evaluation with Conductance\nconductance = MultiUnsupervised(Conductance, G)\nprint(conductance.evaluate(ranks))\n\n# Evaluation with LinkAUC\nlink_AUC = LinkAUC(G, pygrank.metrics.utils.to_nodes(test_groups))\nprint(link_AUC.evaluate(ranks))\n\n# Evaluation with AUC\nauc = MultiSupervised(AUC, pygrank.metrics.utils.to_seeds(test_groups))\nprint(auc.evaluate(ranks))\n\n```\n\n\n## References\n```\n@article{krasanakis2019boosted,\n  title={Boosted seed oversampling for local community ranking},\n  author={Krasanakis, Emmanouil and Schinas, Emmanouil and Papadopoulos, Symeon and Kompatsiaris, Yiannis and Symeonidis, Andreas},\n  journal={Information Processing \\& Management},\n  pages={102053},\n  year={2019},\n  publisher={Elsevier}\n}\n```\n```\n@inproceedings{krasanakis2019linkauc,\n  title={LinkAUC: Unsupervised Evaluation of Multiple Network Node Ranks Using Link Prediction},\n  author={Krasanakis, Emmanouil and Papadopoulos, Symeon and Kompatsiaris, Yiannis},\n  booktitle={International Conference on Complex Networks and Their Applications},\n  pages={3--14},\n  year={2019},\n  organization={Springer}\n}\n```\n\n```\n@unpublished{krasanakis2020stopping,\n  title={Stopping Personalized PageRank without an Error Tolerance Parameter},\n  author={Krasanakis, Emmanouil and Papadopoulos, Symeon and Kompatsiaris, Ioannis},\n  year={2020},\n  note = {unpublished}\n}\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MKLab-ITI/pygrank", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pygrank", "package_url": "https://pypi.org/project/pygrank/", "platform": "", "project_url": "https://pypi.org/project/pygrank/", "project_urls": {"Homepage": "https://github.com/MKLab-ITI/pygrank"}, "release_url": "https://pypi.org/project/pygrank/0.1.15/", "requires_dist": ["tqdm", "sklearn", "scipy", "numpy", "networkx"], "requires_python": "", "summary": "Recommendation algorithms for large graphs on networkx", "version": "0.1.15", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pygrank</h1>\n<p>Recommendation algorithms for large graphs.</p>\n<h2>Installation</h2>\n<pre><code>pip install pygrank\n</code></pre>\n<h2>Usage</h2>\n<h6>Run a PageRank algorithm with seed oversampling</h6>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.algorithms.pagerank</span> <span class=\"kn\">import</span> <span class=\"n\">PageRank</span> <span class=\"k\">as</span> <span class=\"n\">Ranker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.algorithms.oversampling</span> <span class=\"kn\">import</span> <span class=\"n\">SeedOversampling</span> <span class=\"k\">as</span> <span class=\"n\">Oversampler</span>\n\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"c1\"># insert graph nodes and select some of them as seeds (e.g. see tests.py)</span>\n\n<span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"n\">Oversampler</span><span class=\"p\">(</span><span class=\"n\">Ranker</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.85</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1.E-6</span><span class=\"p\">,</span> <span class=\"n\">max_iters</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">))</span> <span class=\"c1\"># these are the default values</span>\n<span class=\"n\">ranks</span> <span class=\"o\">=</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">seeds</span><span class=\"p\">})</span>\n</pre>\n<h6>Run a PageRank algorithm and make it converge to a robust node order</h6>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.algorithms.pagerank</span> <span class=\"kn\">import</span> <span class=\"n\">PageRank</span> <span class=\"k\">as</span> <span class=\"n\">Ranker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.algorithms.utils</span> <span class=\"kn\">import</span> <span class=\"n\">RankOrderConvergenceManager</span>\n\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"c1\"># insert graph nodes and select some of them as seeds (e.g. see tests.py)</span>\n<span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"mf\">0.85</span>\n\n<span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"n\">Ranker</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">convergence</span><span class=\"o\">=</span><span class=\"n\">RankOrderConvergenceManager</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">))</span>\n<span class=\"n\">ranks</span> <span class=\"o\">=</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">seeds</span><span class=\"p\">})</span>\n</pre>\n<h6>Hash the outcome of graph normalization to speed up multiple calls to the same graph</h6>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.algorithms.pagerank</span> <span class=\"kn\">import</span> <span class=\"n\">PageRank</span> <span class=\"k\">as</span> <span class=\"n\">Ranker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.algorithms.utils</span> <span class=\"kn\">import</span> <span class=\"n\">preprocessor</span>\n\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">seeds1</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"n\">seeds2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"c1\"># insert graph nodes and select some of them as seeds (e.g. see tests.py)</span>\n\n<span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"n\">Ranker</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">to_scipy</span><span class=\"o\">=</span><span class=\"n\">preprocessor</span><span class=\"p\">(</span><span class=\"n\">normalization</span><span class=\"o\">=</span><span class=\"s2\">\"col\"</span><span class=\"p\">,</span> <span class=\"n\">assume_immutability</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"n\">ranks</span> <span class=\"o\">=</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">seeds1</span><span class=\"p\">})</span>\n<span class=\"n\">ranks</span> <span class=\"o\">=</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">seeds2</span><span class=\"p\">})</span> <span class=\"c1\"># does not re-compute the normalization</span>\n</pre>\n<h6>How to evaluate with an unsupervised metric</h6>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pygrank.algorithms.postprocess</span> <span class=\"kn\">import</span> <span class=\"n\">Normalize</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.metrics.unsupervised</span> <span class=\"kn\">import</span> <span class=\"n\">Conductance</span>\n\n<span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">ranks</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"c1\"># calculate as per the first example</span>\n<span class=\"n\">normalized_ranks</span> <span class=\"o\">=</span> <span class=\"n\">Normalize</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">ranks</span><span class=\"p\">)</span>\n\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">Conductance</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">normalized_ranks</span><span class=\"p\">))</span>\n</pre>\n<h6>How to evaluate with a supervised metric</h6>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pygrank.metrics.supervised</span> <span class=\"kn\">import</span> <span class=\"n\">AUC</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pygrank.metrics.utils</span>\n\n<span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"c1\"># as per the first example</span>\n<span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">ground_truth</span> <span class=\"o\">=</span> <span class=\"n\">pygrank</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">split_groups</span><span class=\"p\">(</span><span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">fraction_of_training</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"n\">pygrank</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">remove_group_edges_from_graph</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">ground_truth</span><span class=\"p\">)</span>\n<span class=\"n\">ranks</span> <span class=\"o\">=</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">seeds</span><span class=\"p\">})</span>\n\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">AUC</span><span class=\"p\">({</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">ground_truth</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">ranks</span><span class=\"p\">))</span>\n</pre>\n<h6>How to evaluate multiple ranks</h6>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.algorithms.pagerank</span> <span class=\"kn\">import</span> <span class=\"n\">PageRank</span> <span class=\"k\">as</span> <span class=\"n\">Ranker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.algorithms.postprocess</span> <span class=\"kn\">import</span> <span class=\"n\">Normalize</span> <span class=\"k\">as</span> <span class=\"n\">Normalizer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.algorithms.oversampling</span> <span class=\"kn\">import</span> <span class=\"n\">BoostedSeedOversampling</span> <span class=\"k\">as</span> <span class=\"n\">Oversampler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.metrics.unsupervised</span> <span class=\"kn\">import</span> <span class=\"n\">Conductance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.metrics.supervised</span> <span class=\"kn\">import</span> <span class=\"n\">AUC</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygrank.metrics.multigroup</span> <span class=\"kn\">import</span> <span class=\"n\">MultiUnsupervised</span><span class=\"p\">,</span> <span class=\"n\">MultiSupervised</span><span class=\"p\">,</span> <span class=\"n\">LinkAUC</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pygrank.metrics.utils</span>\n\n<span class=\"c1\"># Construct data</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"s2\">\"group1\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> \n\n<span class=\"c1\"># Split to training and test data</span>\n<span class=\"n\">training_groups</span><span class=\"p\">,</span> <span class=\"n\">test_groups</span> <span class=\"o\">=</span> <span class=\"n\">pygrank</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">split_groups</span><span class=\"p\">(</span><span class=\"n\">groups</span><span class=\"p\">)</span>\n<span class=\"n\">pygrank</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">remove_group_edges_from_graph</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">test_groups</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate ranks and put them in a map</span>\n<span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"n\">Normalizer</span><span class=\"p\">(</span><span class=\"n\">Oversampler</span><span class=\"p\">(</span><span class=\"n\">Ranker</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.99</span><span class=\"p\">)))</span>\n<span class=\"n\">ranks</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">group_id</span><span class=\"p\">:</span> <span class=\"n\">algorithm</span><span class=\"o\">.</span><span class=\"n\">rank</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">group</span><span class=\"p\">})</span> \n        <span class=\"k\">for</span> <span class=\"n\">group_id</span><span class=\"p\">,</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">training_groups</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()}</span>\n\n\n<span class=\"c1\"># Evaluation with Conductance</span>\n<span class=\"n\">conductance</span> <span class=\"o\">=</span> <span class=\"n\">MultiUnsupervised</span><span class=\"p\">(</span><span class=\"n\">Conductance</span><span class=\"p\">,</span> <span class=\"n\">G</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">conductance</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">ranks</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Evaluation with LinkAUC</span>\n<span class=\"n\">link_AUC</span> <span class=\"o\">=</span> <span class=\"n\">LinkAUC</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"n\">pygrank</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">to_nodes</span><span class=\"p\">(</span><span class=\"n\">test_groups</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">link_AUC</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">ranks</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Evaluation with AUC</span>\n<span class=\"n\">auc</span> <span class=\"o\">=</span> <span class=\"n\">MultiSupervised</span><span class=\"p\">(</span><span class=\"n\">AUC</span><span class=\"p\">,</span> <span class=\"n\">pygrank</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">to_seeds</span><span class=\"p\">(</span><span class=\"n\">test_groups</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">auc</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">ranks</span><span class=\"p\">))</span>\n</pre>\n<h2>References</h2>\n<pre><code>@article{krasanakis2019boosted,\n  title={Boosted seed oversampling for local community ranking},\n  author={Krasanakis, Emmanouil and Schinas, Emmanouil and Papadopoulos, Symeon and Kompatsiaris, Yiannis and Symeonidis, Andreas},\n  journal={Information Processing \\&amp; Management},\n  pages={102053},\n  year={2019},\n  publisher={Elsevier}\n}\n</code></pre>\n<pre><code>@inproceedings{krasanakis2019linkauc,\n  title={LinkAUC: Unsupervised Evaluation of Multiple Network Node Ranks Using Link Prediction},\n  author={Krasanakis, Emmanouil and Papadopoulos, Symeon and Kompatsiaris, Yiannis},\n  booktitle={International Conference on Complex Networks and Their Applications},\n  pages={3--14},\n  year={2019},\n  organization={Springer}\n}\n</code></pre>\n<pre><code>@unpublished{krasanakis2020stopping,\n  title={Stopping Personalized PageRank without an Error Tolerance Parameter},\n  author={Krasanakis, Emmanouil and Papadopoulos, Symeon and Kompatsiaris, Ioannis},\n  year={2020},\n  note = {unpublished}\n}\n</code></pre>\n\n          </div>"}, "last_serial": 7068480, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "4c7a22380a55eb64973a0a82a58fa42b", "sha256": "5406b9991bf9eb9504554f1eadef70cf7289b34b0765320273cde2a2c6ca0a39"}, "downloads": -1, "filename": "pygrank-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "4c7a22380a55eb64973a0a82a58fa42b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17166, "upload_time": "2019-12-11T14:10:47", "upload_time_iso_8601": "2019-12-11T14:10:47.950463Z", "url": "https://files.pythonhosted.org/packages/6b/85/ad09a07be65491ae2effe391118892efec03c1973857a33f3bc39c677f60/pygrank-0.1.10-py3-none-any.whl", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "b1759988f6423314ceb7d2d0b6006f3e", "sha256": "04bedfe2e433e177a243542319e6d9f154611aa5a74fc8281a7685081edc93e0"}, "downloads": -1, "filename": "pygrank-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "b1759988f6423314ceb7d2d0b6006f3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17165, "upload_time": "2019-12-11T14:11:38", "upload_time_iso_8601": "2019-12-11T14:11:38.450779Z", "url": "https://files.pythonhosted.org/packages/ec/53/41d08ac65ea8ddb64eafe7aaa4d21751681e0b932d2639bc651cd7e98246/pygrank-0.1.11-py3-none-any.whl", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "8bd292cb9c8a1f8707331c298769eea1", "sha256": "ca2bf2613c9af8cfde9ef3b8307d30e61a1e267c007508ae73f8b5377431d751"}, "downloads": -1, "filename": "pygrank-0.1.12-py3-none-any.whl", "has_sig": false, "md5_digest": "8bd292cb9c8a1f8707331c298769eea1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17217, "upload_time": "2019-12-11T22:21:54", "upload_time_iso_8601": "2019-12-11T22:21:54.084131Z", "url": "https://files.pythonhosted.org/packages/67/c9/6963aa597cfde25b97d40023cb09a8fcc6b0150c5383eb80184c47103aa9/pygrank-0.1.12-py3-none-any.whl", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "031bd2ac17469ee980099f5c5d50b697", "sha256": "8ac82de938d04e9e345b503ecd77a5b545d1c222734b517f925a9eb4c2a23583"}, "downloads": -1, "filename": "pygrank-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "031bd2ac17469ee980099f5c5d50b697", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17485, "upload_time": "2020-01-24T11:18:54", "upload_time_iso_8601": "2020-01-24T11:18:54.939155Z", "url": "https://files.pythonhosted.org/packages/bb/59/9cc27c4b5b40f0e21d4029ae7148deaf13363daccda945186d2d7a503f56/pygrank-0.1.13-py3-none-any.whl", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "ba6c887c9e828381c0bba562b496403d", "sha256": "5d7329304b49325239602ff4952064435c2bba7c19b8047b6e6b90883facfea6"}, "downloads": -1, "filename": "pygrank-0.1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "ba6c887c9e828381c0bba562b496403d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18898, "upload_time": "2020-04-21T14:50:11", "upload_time_iso_8601": "2020-04-21T14:50:11.538267Z", "url": "https://files.pythonhosted.org/packages/f3/8d/5fd412e677fa843871c11be50abe10a919b6b18b45d1b2c7e1cc2cf8c70f/pygrank-0.1.14-py3-none-any.whl", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "45c2544851300d5d78a710c13d48aa99", "sha256": "40caf9d9ec2d4688da4d55d6e67b4b56b53dffb007483142273f267bf0e51838"}, "downloads": -1, "filename": "pygrank-0.1.15-py3-none-any.whl", "has_sig": false, "md5_digest": "45c2544851300d5d78a710c13d48aa99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18897, "upload_time": "2020-04-21T14:50:54", "upload_time_iso_8601": "2020-04-21T14:50:54.144109Z", "url": "https://files.pythonhosted.org/packages/0e/c1/a91557046eff9edff51cb6c66cdd7fb2e39c4b690f159282a24608784032/pygrank-0.1.15-py3-none-any.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a899483269b02a15c5be2cb2b7d0fc3b", "sha256": "ed28f58108dc2ad300b9acebc48dd6b57f2f70f479e5e0754eb69acf5c10e521"}, "downloads": -1, "filename": "pygrank-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a899483269b02a15c5be2cb2b7d0fc3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13193, "upload_time": "2019-09-25T09:41:46", "upload_time_iso_8601": "2019-09-25T09:41:46.198781Z", "url": "https://files.pythonhosted.org/packages/e7/77/583dd73a6a153d76851a47ed9b9b43c6a1303632614cae65018025e8ec2c/pygrank-0.1.4-py3-none-any.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "da87facd22cef121e072a2ce7820c1b5", "sha256": "dc982f6ef0294482ff483da61e53876be7ab25e39ef6bd75870c9f3974304e9f"}, "downloads": -1, "filename": "pygrank-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "da87facd22cef121e072a2ce7820c1b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14840, "upload_time": "2019-10-01T09:18:11", "upload_time_iso_8601": "2019-10-01T09:18:11.307336Z", "url": "https://files.pythonhosted.org/packages/5f/a9/bf821e6583d49813a101ace246dbaeb2aefc5c2c8f6c0203780fbc7448d8/pygrank-0.1.5-py3-none-any.whl", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "6d19b58d53ac19f34442fee55de4ecfd", "sha256": "a871b140ff7cb31fc6fd2a8b277da9ebfe1de2911c7a6f5841df3c1d057654f8"}, "downloads": -1, "filename": "pygrank-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "6d19b58d53ac19f34442fee55de4ecfd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14909, "upload_time": "2019-10-02T09:46:15", "upload_time_iso_8601": "2019-10-02T09:46:15.834778Z", "url": "https://files.pythonhosted.org/packages/e3/ab/f7fbd042cea52ed31211dc089f90856b7169aa8c6b39085a7ecc8b2daadc/pygrank-0.1.7-py3-none-any.whl", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "22e41864e06df950531e5fe67a40333c", "sha256": "76239ea29f617f31c14484985494cd55478bb87ca98dbb0a0d6edc49e67c91b8"}, "downloads": -1, "filename": "pygrank-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "22e41864e06df950531e5fe67a40333c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15704, "upload_time": "2019-10-17T14:00:34", "upload_time_iso_8601": "2019-10-17T14:00:34.329177Z", "url": "https://files.pythonhosted.org/packages/92/1b/3c1af8acb315fffacb9fd15c1a44fbbdda120316122248ec0cab18422dc0/pygrank-0.1.8-py3-none-any.whl", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "b93c89fe1b2bdedf92fd541118876cfa", "sha256": "c162c4c46c84e5b2ef06af3912d14660fd0550e2018fa86ab0f315c357ef8b87"}, "downloads": -1, "filename": "pygrank-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "b93c89fe1b2bdedf92fd541118876cfa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17125, "upload_time": "2019-11-28T11:39:56", "upload_time_iso_8601": "2019-11-28T11:39:56.257587Z", "url": "https://files.pythonhosted.org/packages/9d/e2/c3a59c8b5a44abe702f7c3ab978296a20555cbb43dbeb1b48b0f56f14c1e/pygrank-0.1.9-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "45c2544851300d5d78a710c13d48aa99", "sha256": "40caf9d9ec2d4688da4d55d6e67b4b56b53dffb007483142273f267bf0e51838"}, "downloads": -1, "filename": "pygrank-0.1.15-py3-none-any.whl", "has_sig": false, "md5_digest": "45c2544851300d5d78a710c13d48aa99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18897, "upload_time": "2020-04-21T14:50:54", "upload_time_iso_8601": "2020-04-21T14:50:54.144109Z", "url": "https://files.pythonhosted.org/packages/0e/c1/a91557046eff9edff51cb6c66cdd7fb2e39c4b690f159282a24608784032/pygrank-0.1.15-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:04:42 2020"}