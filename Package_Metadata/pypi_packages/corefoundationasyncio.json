{"info": {"author": "Eric ALBER", "author_email": "eric.alber@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: MacOS X :: Cocoa", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Programming Language :: Python"], "description": "# CoreFoundation based selector and asyncio event loop\n\n## asyncio event loop\n\nOn macOS X, Cocoa uses an event loop to dispatch events ([`NSRunLoop`](https://developer.apple.com/documentation/foundation/nsrunloop), which is a wrapper around [`CFRunLoop`](https://developer.apple.com/documentation/corefoundation/cfrunloop?language=objc)).\n\nPython's [asyncio](https://docs.python.org/3/library/asyncio.html) module uses an event loop too to handle asynchronous events. On macOS X, it's based on [kqueue](https://docs.python.org/3/library/selectors.html#selectors.KqueueSelector).\n\nA thread can only use a single event loop, that's why it's not possible to use both Cocoa and asyncio on the same thread. This module implements an asyncio compatible event loop on top of CFRunLoop. Thus it's possible to use Cocoa in conjunction with asyncio.\nIt uses internally PyObjC's [`runEventLoop`](https://pyobjc.readthedocs.io/en/latest/api/module-PyObjCTools.AppHelper.html) or [`runConsoleEventLoop`](https://pyobjc.readthedocs.io/en/latest/api/module-PyObjCTools.AppHelper.html)\n\nHere is an example video of a simple Cocoa based GUI using `asyncio` and `async`/`await` to handle subprocesses and network calls:\n\n[![Example video](https://img.youtube.com/vi/-Arl0-7y7so/0.jpg)](https://www.youtube.com/watch?v=-Arl0-7y7so)\n\nThe corresponding code is here: [tests/gui/guidemo.py](https://github.com/alberthier/corefoundationasyncio/blob/master/tests/gui/guidemo.py)\n\nSetup:\n\n```python\n    loop = CoreFoundationEventLoop()\n    asyncio.set_event_loop(loop)\n    try:\n        loop.run_forever()\n    finally:\n        loop.close()\n```\n\n`CoreFoundationEventLoop`'s constructor's first argument is a boolean. `True` for a console app, `False` (default) for a GUI app.\nAdditionnal arguments are then passed to [`PyObjCTools.AppHelper.runConsoleEventLoop`](https://pyobjc.readthedocs.io/en/latest/api/module-PyObjCTools.AppHelper.html) or [`PyObjCTools.AppHelper.runEventLoop`](https://pyobjc.readthedocs.io/en/latest/api/module-PyObjCTools.AppHelper.html)\n\n## selector\n\nThis module also provides a [selector](https://docs.python.org/3/library/selectors.html) implementation based on [CFRunLoop](https://developer.apple.com/documentation/corefoundation/cfrunloop?language=objc). But his selector isn't compatible with Cocoa GUIs\n\n## Installation\n\n```shell\n$ pip3 install corefoundationasyncio\n```\n\nThis module depends on [pyobjc](https://pypi.org/project/pyobjc/)\n\n## Contributing\n\nReport issues [here](https://github.com/alberthier/corefoundationasyncio/issues)\n\nPull-requests welcome !\n\n## License\n\nThis software is licensed under the [MIT](LICENSE) license", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alberthier/corefoundationasyncio", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "corefoundationasyncio", "package_url": "https://pypi.org/project/corefoundationasyncio/", "platform": "", "project_url": "https://pypi.org/project/corefoundationasyncio/", "project_urls": {"Homepage": "https://github.com/alberthier/corefoundationasyncio"}, "release_url": "https://pypi.org/project/corefoundationasyncio/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "CoreFoundation based selector and asyncio event loop", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CoreFoundation based selector and asyncio event loop</h1>\n<h2>asyncio event loop</h2>\n<p>On macOS X, Cocoa uses an event loop to dispatch events (<a href=\"https://developer.apple.com/documentation/foundation/nsrunloop\" rel=\"nofollow\"><code>NSRunLoop</code></a>, which is a wrapper around <a href=\"https://developer.apple.com/documentation/corefoundation/cfrunloop?language=objc\" rel=\"nofollow\"><code>CFRunLoop</code></a>).</p>\n<p>Python's <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a> module uses an event loop too to handle asynchronous events. On macOS X, it's based on <a href=\"https://docs.python.org/3/library/selectors.html#selectors.KqueueSelector\" rel=\"nofollow\">kqueue</a>.</p>\n<p>A thread can only use a single event loop, that's why it's not possible to use both Cocoa and asyncio on the same thread. This module implements an asyncio compatible event loop on top of CFRunLoop. Thus it's possible to use Cocoa in conjunction with asyncio.\nIt uses internally PyObjC's <a href=\"https://pyobjc.readthedocs.io/en/latest/api/module-PyObjCTools.AppHelper.html\" rel=\"nofollow\"><code>runEventLoop</code></a> or <a href=\"https://pyobjc.readthedocs.io/en/latest/api/module-PyObjCTools.AppHelper.html\" rel=\"nofollow\"><code>runConsoleEventLoop</code></a></p>\n<p>Here is an example video of a simple Cocoa based GUI using <code>asyncio</code> and <code>async</code>/<code>await</code> to handle subprocesses and network calls:</p>\n<p><a href=\"https://www.youtube.com/watch?v=-Arl0-7y7so\" rel=\"nofollow\"><img alt=\"Example video\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/03fb51323d92dc2b5f434730ea2e6a80b9a9a127/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f2d41726c302d377937736f2f302e6a7067\"></a></p>\n<p>The corresponding code is here: <a href=\"https://github.com/alberthier/corefoundationasyncio/blob/master/tests/gui/guidemo.py\" rel=\"nofollow\">tests/gui/guidemo.py</a></p>\n<p>Setup:</p>\n<pre>    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">CoreFoundationEventLoop</span><span class=\"p\">()</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p><code>CoreFoundationEventLoop</code>'s constructor's first argument is a boolean. <code>True</code> for a console app, <code>False</code> (default) for a GUI app.\nAdditionnal arguments are then passed to <a href=\"https://pyobjc.readthedocs.io/en/latest/api/module-PyObjCTools.AppHelper.html\" rel=\"nofollow\"><code>PyObjCTools.AppHelper.runConsoleEventLoop</code></a> or <a href=\"https://pyobjc.readthedocs.io/en/latest/api/module-PyObjCTools.AppHelper.html\" rel=\"nofollow\"><code>PyObjCTools.AppHelper.runEventLoop</code></a></p>\n<h2>selector</h2>\n<p>This module also provides a <a href=\"https://docs.python.org/3/library/selectors.html\" rel=\"nofollow\">selector</a> implementation based on <a href=\"https://developer.apple.com/documentation/corefoundation/cfrunloop?language=objc\" rel=\"nofollow\">CFRunLoop</a>. But his selector isn't compatible with Cocoa GUIs</p>\n<h2>Installation</h2>\n<pre>$ pip3 install corefoundationasyncio\n</pre>\n<p>This module depends on <a href=\"https://pypi.org/project/pyobjc/\" rel=\"nofollow\">pyobjc</a></p>\n<h2>Contributing</h2>\n<p>Report issues <a href=\"https://github.com/alberthier/corefoundationasyncio/issues\" rel=\"nofollow\">here</a></p>\n<p>Pull-requests welcome !</p>\n<h2>License</h2>\n<p>This software is licensed under the <a href=\"LICENSE\" rel=\"nofollow\">MIT</a> license</p>\n\n          </div>"}, "last_serial": 5304884, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "882ff9d4acba84f71bae9cd24102a196", "sha256": "8053494f0c7c3cb1feb35484423039fa6f4ddfe278a2cc5520d4ff2920f0ad01"}, "downloads": -1, "filename": "corefoundationasyncio-0.0.1.tar.gz", "has_sig": false, "md5_digest": "882ff9d4acba84f71bae9cd24102a196", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4587, "upload_time": "2019-05-22T22:58:28", "upload_time_iso_8601": "2019-05-22T22:58:28.105264Z", "url": "https://files.pythonhosted.org/packages/43/ab/888771f58dd20a9350e446a470eb046ee0085f0aaee198d4b4da6f5e2ec3/corefoundationasyncio-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "882ff9d4acba84f71bae9cd24102a196", "sha256": "8053494f0c7c3cb1feb35484423039fa6f4ddfe278a2cc5520d4ff2920f0ad01"}, "downloads": -1, "filename": "corefoundationasyncio-0.0.1.tar.gz", "has_sig": false, "md5_digest": "882ff9d4acba84f71bae9cd24102a196", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4587, "upload_time": "2019-05-22T22:58:28", "upload_time_iso_8601": "2019-05-22T22:58:28.105264Z", "url": "https://files.pythonhosted.org/packages/43/ab/888771f58dd20a9350e446a470eb046ee0085f0aaee198d4b4da6f5e2ec3/corefoundationasyncio-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:14 2020"}