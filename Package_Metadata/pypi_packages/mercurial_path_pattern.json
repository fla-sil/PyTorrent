{"info": {"author": "Marcin Kasperski", "author_email": "Marcin.Kasperski@mekk.waw.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: DFSG approved", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Version Control"], "description": ".. -*- mode: rst; compile-command: \"rst2html README.txt README.html\" -*-\n\n=======================================================\nMercurial Path Pattern\n=======================================================\n\nDon't repeat yourself defining ``[paths]`` over many repositories,\nspecify the general rule once in ``~/.hgrc``.\n\nPath Pattern is a Mercurial_ extension used to define default\nremote path aliases. You may find it helpful if you maintain\nconsistently layed out repository trees on a few machines.\n\n.. contents::\n   :local:\n   :depth: 2\n\n.. sectnum::\n\nPath Pattern mostly works behind the courtains, making standard\ncommands like ``hg pull``, ``hg push``, and ``hg incoming`` aware of\nextra paths. Still, it implements some commands, in particular ``hg\ncloneto \u00abpath-alias\u00bb`` (clone to remote address specified by short\nname).\n\n\nUsing path patterns\n=======================================================\n\nInstall the extension as described below.\n\nSimple example\n-------------------------------------------------------\n\nWrite in your ``~/.hgrc``::\n\n    [extensions]\n    mercurial_path_pattern =\n\n    [path_pattern]\n    lagrange.local = ~/devel/{repo}\n    lagrange.remote =  ssh://johny@lagrange.mekk.net/sources/{repo}\n    bbssh.local = ~/devel/public/{below}\n    bbssh.remote = ssh://hg@bitbucket.org/Johny/{below:/=-}\n\nImagine ``~/devel/personal/blog/drafts`` and ``~/devel/public/pymods/acme``\nare both some mercurial repositories. Then::\n\n    cd ~/devel/personal/blog/drafts\n    hg push lagrange\n    # Works, pushes to ssh://johny@lagrange.mekk.net/sources/personal/blog/drafts\n\n    cd ~/devel/public/pymods/acme\n    hg pull lagrange\n    # Works, pulls from ssh://johny@lagrange.mekk.net/sources/public/pymods/acme\n    hg pull bbssh\n    # Works too, pulls from ssh://hg@bitbucket.org/Johny/pymods-acme\n\nThis works in spite of the fact, that those repos lack ``.hg/hgrc``.\n\nFor two repositories that's not very useful, but once you have hundred\nof them, managing individual ``.hg/hgrc`` becomes a hassle (imagine\nchanging ``lagrange.mekk.net`` to ``lagrange.mekk.com`` everywhere, or\nmaybe adding second remote alias for the new development machine).\n\n.. note::\n\n   On Windows extension tries to handle (in ``.local`` specifications)\n   both native paths (``C:\\repos\\sth``) and portable ones\n   (``C:/repos/sth``), but it is recommended to use the\n   latter. Whichever syntax is used, extracted ``{fragments}`` contain\n   ``/`` (so they can be easily used in remote urls).\n\nOverriding repository-level paths\n-------------------------------------------------------\n\nBy default path patterns have lower priority than per-repository\npaths, so in case you define ``lagrange`` path on repository level, it\nwon't be overwritten by the pattern. You can augment it by adding\n``.enforce``::\n\n    [path_pattern]\n    lagrange.local = ~/devel/{repo}\n    lagrange.remote =  ssh://johny@lagrange.mekk.net/sources/{repo}\n    lagrange.enforce = true\n\nWith such config pattern wins against any path from ``.hg/hgrc``\n(usually it is not recommended but can be handy if you have some\nbroken path scattered around repositories).\n\nReusing the same alias\n--------------------------------------------------------\n\nTo (re)use the same alias in a few different locations, use\n``ALIAS.XTRA.local`` and ``ALIAS.XTRA.remote`` keys, where ``XTRA``\nis something unique. For example::\n\n    [path_pattern]\n    production.main.local = ~/devel/{repo}\n    production.main.remote = ssh://www-owner@www.acme.org/public/{repo}\n    production.beta.local = ~/experiments/{repo}\n    production.beta.remote = ssh://www-owner@beta.acme.org/public/{repo}\n\nwould let you ``hg push production`` not only in\n``~/devel/website/blog`` but also in ``~/experiments/website/qagame``\n(pushing to ``www.acme.org`` in the former, and to ``beta.acme.org`` in the\nlatter case). Whether this is a good idea, is up to you.\n\n\n\nClone-supporting commands\n=======================================================\n\nUsing ``cloneto``\n-------------------------------------------------------\n\nThe ``cloneto`` command makes it easier to clone repository to remote url::\n\n    hg cloneto lagrange\n    # Equivalent to \n    #   hg clone . ssh://johny@lagrange.mekk.net/sources/pymodules/acme\n    # but noticeably shorter\n\nwhich works both for normal paths and paths derived from patterns, but\nis especially handy with patterns. In particular, it makes\nit possible to push newly created repository, for example::\n\n    cd ~/devel/libs\n    hg init xyz\n    cd xyz\n    hg cloneto lagrange\n    # Works, creates sources/libs/xyz on johny@lagrange.mekk.net\n\n.. note::\n\n   While ``cloneto`` is particularly useful with patterns, it works\n   for usual paths as well. You can write (new) path to repository-level\n   ``.hg/hgrc``, then ``hg cloneto \u00abnew-name\u00bb``.\n\nInstead of ``clonefrom``\n-------------------------------------------------------\n\nThere is no ``clonefrom`` command (at least for now), but it is not\nreally needed. The following works (imagine ``libs/zzz`` exists on\n``lagrange.mekk.net``, but is not yet cloned *here*)::\n\n    cd ~/devel/libs\n    hg init zzz\n    cd zzz\n    hg pull lagrange\n\n\nTesting pattern configuration\n=======================================================\n\nThe standard::\n\n    hg paths\n\ncommand lists paths defined for current repository, after pattern\nexpansion. Use it (in a few different repositories) to verify whether\nyour patterns generate proper paths.\n\nThe::\n\n    hg list_path_patterns\n\ncommand prints all patterns found in configuration. Use it to detect\ntypos causing some patterns to be ignored and to check the final\nresult of configuration processing.\n\n\nPattern syntax\n=======================================================\n\nIntroduction\n--------------------\n\nPatterns are defined in ``[path_pattern]`` section of mercurial\nconfiguration file (typically ``~/.hgrc``).  You may have as many\npatterns as you like. Example illustrating various syntax elements::\n\n    [path_pattern]\n    lagrange.local = ~/devel/{repo}\n    lagrange.remote =  ssh://johny@lagrange.mekk.net/sources/{repo}\n    euler.local = ~/devel/{repo}\n    euler.remote =  ssh://johny@euler.mekk.net/devel/{repo:/=.}/hg\n    wrk.local = ~/work/{what}\n    wrk.remote =  https://tim@devel-department.local/{what:/=__:\\=__}\n    ugly.local = ~/(topic)/sources/{subpath}/repo\n    ugly.remote = ssh://hg{topic}@devel.local/{topic}/{subpath}\n    cfg.dotcfg.local = ~/.config/{repo}\n    cfg.dotcfg.remote = ssh://hgrepos@central.com/configs/riemann-config/{repo}\n    cfg.dotshr.local = ~/.local/share/{repo}\n    cfg.dotshr.remote = ssh://hgrepos@central.com/configs/riemann-local/{repo}\n    official.hgstable.local = ~/tracked/mercurial/hg-stable\n    official.hgstable.remote = http://selenic.com/repo/hg-stable\n    official.thg.local = ~/tracked/mercurial/tortoisehg-stable\n    official.thg.remote = https://bitbucket.org/tortoisehg/thg\n    official.evolve.local = ~/tracked/mercurial/mutable-history\n    official.evolve.remote = https://bitbucket.org/marmoute/mutable-history\n\nPattern definition\n---------------------\n\nEvery pattern is defined by the pair of keys - ``\u00abalias\u00bb.local`` and\n``\u00abalias\u00bb.remote`` - or, in case the same alias is to be used in a few\nplaces, by ``\u00abalias\u00bb.\u00absth\u00bb.local`` and ``\u00abalias\u00bb.\u00absth\u00bb.remote`` (where\n``\u00absth\u00bb`` is anything making the key unique).\n\nWhile processing patterns, the extension matches current repository\nroot path against ``local`` pattern, and if it matches, calculates\nremote path by filling markers present there, and defines the path alias.\n\nThe ``.local`` part should specify absolute repository path (``~`` and\n``~user`` are allowed). Some part(s) of the path may be replaced with\n``{brace}`` or ``(paren)`` markers:\n\n- ``{brace}`` matches everything aggressively (to the very end, unless\n  some fixed text follows it),\n\n- ``(paren)`` is limited to single path item and does not cross ``/`` or ``\\\\`` characters).\n\nThose parts will be extracted from local repository path and available\nfor use in remote path being defined.\n\n.. note::\n\n    Typically there will be single ``{marker}`` on the end, but more\n    obscure patterns are possible (as ``ugly`` above\n    illustrates). \n\nMarkers are optional, if no marker is used (see ``official`` above),\nrule applies to exactly one repository. This may make sense (over\ndefining path in given repo ``.hg/hgrc``) if you prefer to centralize\nyour remote paths list (or if you frequently drop those repos to re-clone\nthem again later).\n\nThe ``.remote`` part defines appropriate remote address. This is typical\nMercurial remote path, but ``{marker}``'s can be used to refer to\nvalues extracted from local path: ``{sth}`` is replaced with whatever\nmatched ``{sth}`` or ``(sth)`` present in local path.\n\nSimple modifications are supported \u2013 ``{sth:x=y}`` means *take whatever\nwas extracted as* ``sth`` *and replace any* ``x`` *with* ``y``. This is\nmostly used to replace ``/`` with some other character (in particular\n``{below:/=-}`` handles BitBucket convention, replacing slashes with minuses).\nReplacements can be multi-letter, for example ``{sth:lib=library}``.\n\nReplacements can be chained if necessary \u2013 ``{sth:x=y:v=z}`` means\n*take whatever was extracted as* ``sth``, *replace any* ``x`` *with*\n``y``, *then replace any* ``v`` *with* ``z``, *then use the final\nresult*.\n\n.. note::\n\n    In case multiple patterns of the same name match, extension tries\n    to find *best* one.  See `Pattern priority`_ chapter below.\n\n\nResolution example\n--------------------\n\nWith definitions quoted above, if you happen to work\ninside the ``~/devel/python/libs/webby`` repository, the extension will:\n\n1. Find that ``lagrange.local`` matches and that ``{repo}`` is\n   ``python/libs/webby``.   Filling ``lagrange.remote`` with\n   that value generates\n   ``ssh://johny@lagrange.mekk.net/sources/python/libs/webby``, so\n   the following path alias is created:\n   ``lagrange=ssh://johny@lagrange.mekk.net/sources/python/libs/webby``\n\n2. Discover that ``euler.local`` also matches, and ``{repo}`` is again\n   ``python/libs/webby``. After replacing ``/``-s with ``.``-s,\n   that brings alias \n   ``euler=ssh://johny@euler.mekk.net/devel/python.libs.webby/hg``\n\n3. Ignore remaining patterns as they do not match.\n\nOr, in ``~/tracked/mercurial/tortoisehg-stable``, the extension will:\n\n1. Note that ``official.thg.local`` matches (at this time without\n   defining anything), extract matching path from\n   ``official.thg.remote``, and finally generate for this repository\n   path ``official = https://bitbucket.org/tortoisehg/thg`` (so ``hg\n   pull official`` works there).  Note that the path alias is just\n   ``official``, the ``.thg.`` part was used only to group appropriate\n   config items.\n\n2. Ignore remaining patterns which do not match.\n\n\nLegacy syntax\n------------------------------------------------------\n\nFor compatibility reasons, there exist alternative way\nto reuse the same path alias. For example, instead of\n(currently recommended)::\n\n    [path_pattern]\n    production.web.local = ~/devel/web/{repo}\n    production.web.remote = ssh://product@acme.org/www/{repo}\n    production.db.local = ~/devel/database/{repo}\n    production.db.remote = ssh://product@backend.acme.org/db/{repo}\n    production.monit.local = ~/devel/monitoring/{repo}\n    production.monit.remote = ssh://product@monit.acme.org/{repo}\n\none can use ``.alias``::\n\n    [path_pattern]\n    production.local = ~/devel/web/{repo}\n    production.remote = ssh://product@acme.org/www/{repo}\n    dbproduction.db.local = ~/devel/database/{repo}\n    dbproduction.db.remote = ssh://product@backend.acme.org/db/{repo}\n    dbproduction.alias = production\n    monproduction.local = ~/devel/monitoring/{repo}\n    monproduction.remote = ssh://product@monit.acme.org/{repo}\n    monproduction.alias = production\n\nBoth those syntaxes give meaning to ``hg push production`` in all matching\nrepositories.\n\n.. note::\n\n   I keep supporting ``.alias`` syntax for backward compatibility (it\n   was the initial syntax provided for the task) but it is more\n   elaborate and less readable, so I don't recommend it anymore.\n\n\nPattern priority\n=======================================================\n\nIt is possible to write patterns so they *conflict* (more than one\ndefinition of some path exists). While not frequent, such approach has\nsometimes it's uses.\n\nPath aliases have the following priority:\n\n- enforced patterns (patterns with ``.enforce`` set),\n- per repo aliases (standard ``[paths]`` defined in ``.hg/hgrc``),\n- non-enforced patterns.\n\nSo, for example, with::\n\n    [path_pattern]\n    acme.local = ~/devel/{repo}\n    acme.remote =  ssh://johny@apps.mekk.net/code/{repo}\n    acme.enforce = true\n    acme.alt.local = ~/devel/libs/{repo}\n    acme.alt.remote =  ssh://johny@libs.mekk.net/{repo}\n\n(both patterns define the same alias ``acme``) executing ``hg push\nacme`` in ``~/devel/libs/calc`` will push to\n``ssh://johny@apps.mekk.net/code/libs/calc`` as enforced pattern wins\nover non-enforced one. The same will happen even if ``acme`` is\ndefined in per-repository ``.hg/hgrc`` (among standard ``[paths]``).\n\nIf more than one pattern of the same strength matches, extension tries\nit's best to pick one with more specific local path, for example if we\ndrop ``acme.enforce`` from the example above (or if we add\n``acme.alt.enforce``), executing ``hg push acme`` in\n``~/devel/libs/calc`` will push to ``ssh://johny@libs.mekk.net/calc``\nas more specific pattern wins.\n\n.. note::\n\n    It's not always obvious which pattern is more specific (compare\n    ``~/(klass)/libs/base`` with ``~/src/{repo}``). Current\n    implementation looks for the length of non-varying prefix (so the\n    latter will win over the former as ``~/src/`` is longer than\n    ``~/``). If those are of equal length, pattern with more non-var characters wins,\n    and finally, the one which happened last in the config file.\n\n    Some details may change in the future, use ``enforce`` when in\n    doubt (or let me know if numeric priority would be useful).\n\n\n\n\nTips and tricks\n=======================================================\n\n``default`` as path pattern\n--------------------------------------------------------\n\nYou can define ``default`` via path pattern if you wish::\n\n    [path_pattern]\n    default.hobby.local = ~/hobby/{repo}\n    default.hobby.remote =  ssh://hg@bitbucket.org/Johny/{below:/=-}\n    default.wrk.local = ~/work/{what}\n    default.wrk.remote =  https://tim@devel-department.local/{what}\n\n(here in ``~/hobby`` I push to bitbucket by default, but in ``~/work``\nto department server).\n\n.. note::\n\n   Mercurial will sooner or later define ``default`` path in\n   per-repository ``.hg/hgrc`` files.  Enforce your patterns\n   (``default.hobby.enforce = true``) if you need to defeat those\n   settings. Or don't, if you want those patterns for defaults only.\n\n\nSpecial treatment of specific repositories \n-------------------------------------------------------\n\nIt happens that some repository (or a few) *does not match* the\ngeneral rule. In such a case, one can simply overwrite given alias\non repository level, or use pattern priority.\n\nMy real example is `Keyring Extension`_ repository. While I generally\nuse dash (``-``) as path separator (so Path Pattern is located at\n``/Mekk/mercurial-path_pattern`` and `Dynamic Username`_ at\n``/Mekk/mercurial-dynamic_username``), keyring repo predates this\nconvention and is named ``/Mekk/mercurial_keyring``. So I solve this\nby::\n\n    [path_pattern]\n    # By default bitbucket mirrors my dir structure replacing / with -\n    bbssh.local = ~/devel/{below}\n    bbssh.remote = ssh://hg@bitbucket.org/Mekk/{below:/=-}\n    # \u2026 but there are overrides\n    bbssh.keyring.local = ~/devel/mercurial/keyring\n    bbssh.keyring.remote = ssh://hg@bitbucket.org/Mekk/mercurial_keyring\n\nOf course I could achieve the same by defining ``bbssh`` among\n``[paths]`` in ``~/devel/mercurial/keyring/.hg/hgrc`` file, but pattern\ntechnique have some advantages:\n\n- as I share and sync snippet of my ``~/.hgrc`` between machines, \n  this definition automatically propagates everywhere, and I don't need\n  to remember about adding path to the new clone,\n\n- it leaves all paths in one place where I can review them together,\n\n- it can be expanded to whole subtree if necessary.\n\nKeeping non-standard remote paths as patterns\n-------------------------------------------------------\n\nThe same trick can be used for maintaining list of remotes.\nFor example here is my way to have ``hg pull official`` handy\nin various tracked repositories::\n\n    [path_pattern]\n    official.hgstable.local = ~/tracked/hg-stable\n    official.hgstable.remote = http://selenic.com/repo/hg-stable\n    official.thg.local = ~/tracked/tortoise-hg\n    official.thg.remote = https://bitbucket.org/tortoisehg/thg/\n    # \u2026\n\nOf course I could enter those paths directly inside ``.hg/hgrc``, but\nthose definitions can be synced between machines, and survive \nin case I discard the repo in charge for some time.\n\nSeparating (and sharing) pattern configuration\n---------------------------------------------------\n\nIn case the pattern list grows bigger, I recommend moving patterns\ninto the separate config file. For example, write in ``~/.hgrc``::\n\n    %include ~/configs/mercurial/path_pattern.hgrc\n\nand then store all patterns in ``path_pattern.hgrc``::\n\n   [path_pattern]\n   \u2026\n\nExtra benefit of such approach is that it makes sharing the file\neasier (in my case ``~/configs/mercurial`` is by itself Mercurial\nrepository which I share over my various development machines, and\nwhich contains all non-machine specific snippets of my Mercurial\nconfiguration).\n\n\nInstallation\n=======================================================\n\nLinux/Unix (from PyPI)\n-------------------------------------------------------\n\nIf you have working ``pip`` or ``easy_install``::\n\n    pip install --user mercurial_path_pattern\n\nor maybe::\n\n    sudo pip install mercurial_path_pattern\n\n(or use ``easy_install`` instead of ``pip``). Then activate by::\n\n    [extensions]\n    mercurial_path_pattern =\n\nTo upgrade, repeat the same command with ``--upgrade`` option, for\nexample::\n\n    pip install --user --upgrade mercurial_path_pattern\n\nLinux/Unix (from source)\n-------------------------------------------------------\n\nIf you don't have ``pip``, or wish to follow development more closely:\n\n- clone both this repository and `mercurial_extension_utils`_ and put\n  them in the same directory, for example::\n\n    cd ~/sources\n    hg clone https://bitbucket.org/Mekk/mercurial-extension_utils/\n    hg clone https://bitbucket.org/Mekk/mercurial-path_pattern/\n\n- update to newest tags,\n\n- activate by::\n\n    [extensions]\n    mercurial_path_pattern = ~/sources/mercurial-path_pattern/mercurial_path_pattern.py\n\nTo upgrade, pull and update.\n\nNote that directory names matter. See `mercurial_extension_utils`_ for\nlonger description of this kind of installation.\n\nWindows\n-------------------------------------------------------\n\nIf you have any Python installed, you may install with ``pip``::\n\n    pip install mercurial_path_pattern\n\nStill, as Mercurial (whether taken from TortoiseHg_, or own package)\nuses it's own bundled Python, you must activate by specifying the path::\n\n    [extensions]\n    mercurial_path_pattern = C:/Python27/Lib/site-packages/mercurial_path_pattern.py\n    ;; Or wherever pip installed it\n\nTo upgrade to new version::\n\n    pip --upgrade mercurial_path_pattern\n\nIf you don't have any Python, clone repositories::\n\n    cd c:\\hgplugins\n    hg clone https://bitbucket.org/Mekk/mercurial-extension_utils/\n    hg clone https://bitbucket.org/Mekk/mercurial-path_pattern/\n\nupdate to tagged versions and activate by path::\n\n    [extensions]\n    mercurial_path_pattern = C:/hgplugins/mercurial-path_pattern/mercurial_path_pattern.py\n    ;; Or wherever you cloned\n\nSee `mercurial_extension_utils`_ documentation for more details on\nWindows installation. \n\n.. note::\n\n   Directory names matter. If ``mercurial_path_pattern.py`` can't find\n   ``mercurial_extension_utils.py`` in system path, it looks for it in\n   its own directory, in ``../mercurial_extension_utils``, and in\n   ``../extension_utils``.\n\n\nRelated extensions\n=======================================================\n\n`Schemes Extension`_, distributed together with Mercurial, makes it\npossible to simplify repository URLs. For example, you can write::\n\n    hg clone bb://Mekk/mercurial-path_pattern\n\n(``bb`` is schemes alias expanding to BitBucket url).\n\nWhile both Path Pattern and Schemes are related to path management,\nthey target different habits. Schemes is particularly useful\nfor people making frequent ad-hoc clones, Path Pattern is about\nkeeping consistent synchronized repository hierarchies. With Schemes,\nurls you type are shorter and less error-prone, with Path Pattern\nyou don't type them at all as Mercurial guesses them for you.\n\nBoth can cooperate, schemes aliases can be used in pattern definitions::\n\n    [path_pattern]\n    bitb.local = ~/sources/{below}\n    bitb.remote = bb://Mekk/{below:/=-}\n\nwill work (as long as schemes extension is enabled).\n\nHistory\n=======================================================\n\nSee `HISTORY.txt`_\n\nDevelopment, bug reports, enhancement suggestions\n=======================================================\n\nDevelopment is tracked on BitBucket, see \nhttps://bitbucket.org/Mekk/mercurial-path_pattern/\n\nUse BitBucket issue tracker for bug reports and enhancement\nsuggestions.\n\nAdditional notes\n=======================================================\n\nInformation about this extension is also available\non Mercurial Wiki: http://mercurial.selenic.com/wiki/PathPatternExtension\n\nCheck also `other Mercurial extensions I wrote`_.\n\n.. _other Mercurial extensions I wrote: http://mekk.bitbucket.io/mercurial.html\n\n\n.. _Mercurial: http://mercurial.selenic.com\n.. _HISTORY.txt: https://bitbucket.org/Mekk/mercurial-path_pattern/src/tip/HISTORY.txt\n.. _mercurial_extension_utils: https://bitbucket.org/Mekk/mercurial-extension_utils/\n.. _Schemes Extension: https://www.mercurial-scm.org/wiki/SchemesExtension\n.. _TortoiseHg: http://tortoisehg.bitbucket.org/\n.. _Keyring Extension: https://bitbucket.org/Mekk/mercurial_keyring/\n.. _Dynamic Username: https://bitbucket.org/Mekk/mercurial-dynamic_username/\n\n.. |drone-badge| \n    image:: https://drone.io/bitbucket.org/Mekk/mercurial-path_pattern/status.png\n     :target: https://drone.io/bitbucket.org/Mekk/mercurial-path_pattern/latest\n     :align: middle\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/Mekk/mercurial-path_pattern", "keywords": "mercurial hg path alias", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "mercurial_path_pattern", "package_url": "https://pypi.org/project/mercurial_path_pattern/", "platform": "", "project_url": "https://pypi.org/project/mercurial_path_pattern/", "project_urls": {"Homepage": "http://bitbucket.org/Mekk/mercurial-path_pattern"}, "release_url": "https://pypi.org/project/mercurial_path_pattern/1.4.0/", "requires_dist": null, "requires_python": "", "summary": "Mercurial Path Pattern Extension", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Don\u2019t repeat yourself defining <tt>[paths]</tt> over many repositories,\nspecify the general rule once in <tt><span class=\"pre\">~/.hgrc</span></tt>.</p>\n<p>Path Pattern is a <a href=\"http://mercurial.selenic.com\" rel=\"nofollow\">Mercurial</a> extension used to define default\nremote path aliases. You may find it helpful if you maintain\nconsistently layed out repository trees on a few machines.</p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#using-path-patterns\" id=\"id1\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Using path patterns</a><ul>\n<li><a href=\"#simple-example\" id=\"id2\" rel=\"nofollow\">1.1\u00a0\u00a0\u00a0Simple example</a></li>\n<li><a href=\"#overriding-repository-level-paths\" id=\"id3\" rel=\"nofollow\">1.2\u00a0\u00a0\u00a0Overriding repository-level paths</a></li>\n<li><a href=\"#reusing-the-same-alias\" id=\"id4\" rel=\"nofollow\">1.3\u00a0\u00a0\u00a0Reusing the same alias</a></li>\n</ul>\n</li>\n<li><a href=\"#clone-supporting-commands\" id=\"id5\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Clone-supporting commands</a><ul>\n<li><a href=\"#using-cloneto\" id=\"id6\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0Using <tt>cloneto</tt></a></li>\n<li><a href=\"#instead-of-clonefrom\" id=\"id7\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0Instead of <tt>clonefrom</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#testing-pattern-configuration\" id=\"id8\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Testing pattern configuration</a></li>\n<li><a href=\"#pattern-syntax\" id=\"id9\" rel=\"nofollow\">4\u00a0\u00a0\u00a0Pattern syntax</a><ul>\n<li><a href=\"#introduction\" id=\"id10\" rel=\"nofollow\">4.1\u00a0\u00a0\u00a0Introduction</a></li>\n<li><a href=\"#pattern-definition\" id=\"id11\" rel=\"nofollow\">4.2\u00a0\u00a0\u00a0Pattern definition</a></li>\n<li><a href=\"#resolution-example\" id=\"id12\" rel=\"nofollow\">4.3\u00a0\u00a0\u00a0Resolution example</a></li>\n<li><a href=\"#legacy-syntax\" id=\"id13\" rel=\"nofollow\">4.4\u00a0\u00a0\u00a0Legacy syntax</a></li>\n</ul>\n</li>\n<li><a href=\"#pattern-priority\" id=\"id14\" rel=\"nofollow\">5\u00a0\u00a0\u00a0Pattern priority</a></li>\n<li><a href=\"#tips-and-tricks\" id=\"id15\" rel=\"nofollow\">6\u00a0\u00a0\u00a0Tips and tricks</a><ul>\n<li><a href=\"#default-as-path-pattern\" id=\"id16\" rel=\"nofollow\">6.1\u00a0\u00a0\u00a0<tt>default</tt> as path pattern</a></li>\n<li><a href=\"#special-treatment-of-specific-repositories\" id=\"id17\" rel=\"nofollow\">6.2\u00a0\u00a0\u00a0Special treatment of specific repositories</a></li>\n<li><a href=\"#keeping-non-standard-remote-paths-as-patterns\" id=\"id18\" rel=\"nofollow\">6.3\u00a0\u00a0\u00a0Keeping non-standard remote paths as patterns</a></li>\n<li><a href=\"#separating-and-sharing-pattern-configuration\" id=\"id19\" rel=\"nofollow\">6.4\u00a0\u00a0\u00a0Separating (and sharing) pattern configuration</a></li>\n</ul>\n</li>\n<li><a href=\"#installation\" id=\"id20\" rel=\"nofollow\">7\u00a0\u00a0\u00a0Installation</a><ul>\n<li><a href=\"#linux-unix-from-pypi\" id=\"id21\" rel=\"nofollow\">7.1\u00a0\u00a0\u00a0Linux/Unix (from PyPI)</a></li>\n<li><a href=\"#linux-unix-from-source\" id=\"id22\" rel=\"nofollow\">7.2\u00a0\u00a0\u00a0Linux/Unix (from source)</a></li>\n<li><a href=\"#windows\" id=\"id23\" rel=\"nofollow\">7.3\u00a0\u00a0\u00a0Windows</a></li>\n</ul>\n</li>\n<li><a href=\"#related-extensions\" id=\"id24\" rel=\"nofollow\">8\u00a0\u00a0\u00a0Related extensions</a></li>\n<li><a href=\"#history\" id=\"id25\" rel=\"nofollow\">9\u00a0\u00a0\u00a0History</a></li>\n<li><a href=\"#development-bug-reports-enhancement-suggestions\" id=\"id26\" rel=\"nofollow\">10\u00a0\u00a0\u00a0Development, bug reports, enhancement suggestions</a></li>\n<li><a href=\"#additional-notes\" id=\"id27\" rel=\"nofollow\">11\u00a0\u00a0\u00a0Additional notes</a></li>\n</ul>\n</div>\n<p>Path Pattern mostly works behind the courtains, making standard\ncommands like <tt>hg pull</tt>, <tt>hg push</tt>, and <tt>hg incoming</tt> aware of\nextra paths. Still, it implements some commands, in particular <tt>hg\ncloneto <span class=\"pre\">\u00abpath-alias\u00bb</span></tt> (clone to remote address specified by short\nname).</p>\n<div id=\"using-path-patterns\">\n<h2><a href=\"#id1\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Using path patterns</a></h2>\n<p>Install the extension as described below.</p>\n<div id=\"simple-example\">\n<h3><a href=\"#id2\" rel=\"nofollow\">1.1\u00a0\u00a0\u00a0Simple example</a></h3>\n<p>Write in your <tt><span class=\"pre\">~/.hgrc</span></tt>:</p>\n<pre>[extensions]\nmercurial_path_pattern =\n\n[path_pattern]\nlagrange.local = ~/devel/{repo}\nlagrange.remote =  ssh://johny@lagrange.mekk.net/sources/{repo}\nbbssh.local = ~/devel/public/{below}\nbbssh.remote = ssh://hg@bitbucket.org/Johny/{below:/=-}\n</pre>\n<p>Imagine <tt>~/devel/personal/blog/drafts</tt> and <tt>~/devel/public/pymods/acme</tt>\nare both some mercurial repositories. Then:</p>\n<pre>cd ~/devel/personal/blog/drafts\nhg push lagrange\n# Works, pushes to ssh://johny@lagrange.mekk.net/sources/personal/blog/drafts\n\ncd ~/devel/public/pymods/acme\nhg pull lagrange\n# Works, pulls from ssh://johny@lagrange.mekk.net/sources/public/pymods/acme\nhg pull bbssh\n# Works too, pulls from ssh://hg@bitbucket.org/Johny/pymods-acme\n</pre>\n<p>This works in spite of the fact, that those repos lack <tt>.hg/hgrc</tt>.</p>\n<p>For two repositories that\u2019s not very useful, but once you have hundred\nof them, managing individual <tt>.hg/hgrc</tt> becomes a hassle (imagine\nchanging <tt>lagrange.mekk.net</tt> to <tt>lagrange.mekk.com</tt> everywhere, or\nmaybe adding second remote alias for the new development machine).</p>\n<div>\n<p>Note</p>\n<p>On Windows extension tries to handle (in <tt>.local</tt> specifications)\nboth native paths (<tt><span class=\"pre\">C:\\repos\\sth</span></tt>) and portable ones\n(<tt><span class=\"pre\">C:/repos/sth</span></tt>), but it is recommended to use the\nlatter. Whichever syntax is used, extracted <tt>{fragments}</tt> contain\n<tt>/</tt> (so they can be easily used in remote urls).</p>\n</div>\n</div>\n<div id=\"overriding-repository-level-paths\">\n<h3><a href=\"#id3\" rel=\"nofollow\">1.2\u00a0\u00a0\u00a0Overriding repository-level paths</a></h3>\n<p>By default path patterns have lower priority than per-repository\npaths, so in case you define <tt>lagrange</tt> path on repository level, it\nwon\u2019t be overwritten by the pattern. You can augment it by adding\n<tt>.enforce</tt>:</p>\n<pre>[path_pattern]\nlagrange.local = ~/devel/{repo}\nlagrange.remote =  ssh://johny@lagrange.mekk.net/sources/{repo}\nlagrange.enforce = true\n</pre>\n<p>With such config pattern wins against any path from <tt>.hg/hgrc</tt>\n(usually it is not recommended but can be handy if you have some\nbroken path scattered around repositories).</p>\n</div>\n<div id=\"reusing-the-same-alias\">\n<h3><a href=\"#id4\" rel=\"nofollow\">1.3\u00a0\u00a0\u00a0Reusing the same alias</a></h3>\n<p>To (re)use the same alias in a few different locations, use\n<tt>ALIAS.XTRA.local</tt> and <tt>ALIAS.XTRA.remote</tt> keys, where <tt>XTRA</tt>\nis something unique. For example:</p>\n<pre>[path_pattern]\nproduction.main.local = ~/devel/{repo}\nproduction.main.remote = ssh://www-owner@www.acme.org/public/{repo}\nproduction.beta.local = ~/experiments/{repo}\nproduction.beta.remote = ssh://www-owner@beta.acme.org/public/{repo}\n</pre>\n<p>would let you <tt>hg push production</tt> not only in\n<tt>~/devel/website/blog</tt> but also in <tt>~/experiments/website/qagame</tt>\n(pushing to <tt>www.acme.org</tt> in the former, and to <tt>beta.acme.org</tt> in the\nlatter case). Whether this is a good idea, is up to you.</p>\n</div>\n</div>\n<div id=\"clone-supporting-commands\">\n<h2><a href=\"#id5\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Clone-supporting commands</a></h2>\n<div id=\"using-cloneto\">\n<h3><a href=\"#id6\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0Using <tt>cloneto</tt></a></h3>\n<p>The <tt>cloneto</tt> command makes it easier to clone repository to remote url:</p>\n<pre>hg cloneto lagrange\n# Equivalent to\n#   hg clone . ssh://johny@lagrange.mekk.net/sources/pymodules/acme\n# but noticeably shorter\n</pre>\n<p>which works both for normal paths and paths derived from patterns, but\nis especially handy with patterns. In particular, it makes\nit possible to push newly created repository, for example:</p>\n<pre>cd ~/devel/libs\nhg init xyz\ncd xyz\nhg cloneto lagrange\n# Works, creates sources/libs/xyz on johny@lagrange.mekk.net\n</pre>\n<div>\n<p>Note</p>\n<p>While <tt>cloneto</tt> is particularly useful with patterns, it works\nfor usual paths as well. You can write (new) path to repository-level\n<tt>.hg/hgrc</tt>, then <tt>hg cloneto <span class=\"pre\">\u00abnew-name\u00bb</span></tt>.</p>\n</div>\n</div>\n<div id=\"instead-of-clonefrom\">\n<h3><a href=\"#id7\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0Instead of <tt>clonefrom</tt></a></h3>\n<p>There is no <tt>clonefrom</tt> command (at least for now), but it is not\nreally needed. The following works (imagine <tt>libs/zzz</tt> exists on\n<tt>lagrange.mekk.net</tt>, but is not yet cloned <em>here</em>):</p>\n<pre>cd ~/devel/libs\nhg init zzz\ncd zzz\nhg pull lagrange\n</pre>\n</div>\n</div>\n<div id=\"testing-pattern-configuration\">\n<h2><a href=\"#id8\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Testing pattern configuration</a></h2>\n<p>The standard:</p>\n<pre>hg paths\n</pre>\n<p>command lists paths defined for current repository, after pattern\nexpansion. Use it (in a few different repositories) to verify whether\nyour patterns generate proper paths.</p>\n<p>The:</p>\n<pre>hg list_path_patterns\n</pre>\n<p>command prints all patterns found in configuration. Use it to detect\ntypos causing some patterns to be ignored and to check the final\nresult of configuration processing.</p>\n</div>\n<div id=\"pattern-syntax\">\n<h2><a href=\"#id9\" rel=\"nofollow\">4\u00a0\u00a0\u00a0Pattern syntax</a></h2>\n<div id=\"introduction\">\n<h3><a href=\"#id10\" rel=\"nofollow\">4.1\u00a0\u00a0\u00a0Introduction</a></h3>\n<p>Patterns are defined in <tt>[path_pattern]</tt> section of mercurial\nconfiguration file (typically <tt><span class=\"pre\">~/.hgrc</span></tt>).  You may have as many\npatterns as you like. Example illustrating various syntax elements:</p>\n<pre>[path_pattern]\nlagrange.local = ~/devel/{repo}\nlagrange.remote =  ssh://johny@lagrange.mekk.net/sources/{repo}\neuler.local = ~/devel/{repo}\neuler.remote =  ssh://johny@euler.mekk.net/devel/{repo:/=.}/hg\nwrk.local = ~/work/{what}\nwrk.remote =  https://tim@devel-department.local/{what:/=__:\\=__}\nugly.local = ~/(topic)/sources/{subpath}/repo\nugly.remote = ssh://hg{topic}@devel.local/{topic}/{subpath}\ncfg.dotcfg.local = ~/.config/{repo}\ncfg.dotcfg.remote = ssh://hgrepos@central.com/configs/riemann-config/{repo}\ncfg.dotshr.local = ~/.local/share/{repo}\ncfg.dotshr.remote = ssh://hgrepos@central.com/configs/riemann-local/{repo}\nofficial.hgstable.local = ~/tracked/mercurial/hg-stable\nofficial.hgstable.remote = http://selenic.com/repo/hg-stable\nofficial.thg.local = ~/tracked/mercurial/tortoisehg-stable\nofficial.thg.remote = https://bitbucket.org/tortoisehg/thg\nofficial.evolve.local = ~/tracked/mercurial/mutable-history\nofficial.evolve.remote = https://bitbucket.org/marmoute/mutable-history\n</pre>\n</div>\n<div id=\"pattern-definition\">\n<h3><a href=\"#id11\" rel=\"nofollow\">4.2\u00a0\u00a0\u00a0Pattern definition</a></h3>\n<p>Every pattern is defined by the pair of keys - <tt><span class=\"pre\">\u00abalias\u00bb.local</span></tt> and\n<tt><span class=\"pre\">\u00abalias\u00bb.remote</span></tt> - or, in case the same alias is to be used in a few\nplaces, by <tt><span class=\"pre\">\u00abalias\u00bb.\u00absth\u00bb.local</span></tt> and <tt><span class=\"pre\">\u00abalias\u00bb.\u00absth\u00bb.remote</span></tt> (where\n<tt>\u00absth\u00bb</tt> is anything making the key unique).</p>\n<p>While processing patterns, the extension matches current repository\nroot path against <tt>local</tt> pattern, and if it matches, calculates\nremote path by filling markers present there, and defines the path alias.</p>\n<p>The <tt>.local</tt> part should specify absolute repository path (<tt>~</tt> and\n<tt>~user</tt> are allowed). Some part(s) of the path may be replaced with\n<tt>{brace}</tt> or <tt>(paren)</tt> markers:</p>\n<ul>\n<li><tt>{brace}</tt> matches everything aggressively (to the very end, unless\nsome fixed text follows it),</li>\n<li><tt>(paren)</tt> is limited to single path item and does not cross <tt>/</tt> or <tt>\\\\</tt> characters).</li>\n</ul>\n<p>Those parts will be extracted from local repository path and available\nfor use in remote path being defined.</p>\n<div>\n<p>Note</p>\n<p>Typically there will be single <tt>{marker}</tt> on the end, but more\nobscure patterns are possible (as <tt>ugly</tt> above\nillustrates).</p>\n</div>\n<p>Markers are optional, if no marker is used (see <tt>official</tt> above),\nrule applies to exactly one repository. This may make sense (over\ndefining path in given repo <tt>.hg/hgrc</tt>) if you prefer to centralize\nyour remote paths list (or if you frequently drop those repos to re-clone\nthem again later).</p>\n<p>The <tt>.remote</tt> part defines appropriate remote address. This is typical\nMercurial remote path, but <tt>{marker}</tt>\u2019s can be used to refer to\nvalues extracted from local path: <tt>{sth}</tt> is replaced with whatever\nmatched <tt>{sth}</tt> or <tt>(sth)</tt> present in local path.</p>\n<p>Simple modifications are supported \u2013 <tt>{sth:x=y}</tt> means <em>take whatever\nwas extracted as</em> <tt>sth</tt> <em>and replace any</em> <tt>x</tt> <em>with</em> <tt>y</tt>. This is\nmostly used to replace <tt>/</tt> with some other character (in particular\n<tt><span class=\"pre\">{below:/=-}</span></tt> handles BitBucket convention, replacing slashes with minuses).\nReplacements can be multi-letter, for example <tt>{sth:lib=library}</tt>.</p>\n<p>Replacements can be chained if necessary \u2013 <tt>{sth:x=y:v=z}</tt> means\n<em>take whatever was extracted as</em> <tt>sth</tt>, <em>replace any</em> <tt>x</tt> <em>with</em>\n<tt>y</tt>, <em>then replace any</em> <tt>v</tt> <em>with</em> <tt>z</tt>, <em>then use the final\nresult</em>.</p>\n<div>\n<p>Note</p>\n<p>In case multiple patterns of the same name match, extension tries\nto find <em>best</em> one.  See <a href=\"#pattern-priority\" rel=\"nofollow\">Pattern priority</a> chapter below.</p>\n</div>\n</div>\n<div id=\"resolution-example\">\n<h3><a href=\"#id12\" rel=\"nofollow\">4.3\u00a0\u00a0\u00a0Resolution example</a></h3>\n<p>With definitions quoted above, if you happen to work\ninside the <tt>~/devel/python/libs/webby</tt> repository, the extension will:</p>\n<ol>\n<li>Find that <tt>lagrange.local</tt> matches and that <tt>{repo}</tt> is\n<tt>python/libs/webby</tt>.   Filling <tt>lagrange.remote</tt> with\nthat value generates\n<tt><span class=\"pre\">ssh://johny@lagrange.mekk.net/sources/python/libs/webby</span></tt>, so\nthe following path alias is created:\n<tt><span class=\"pre\">lagrange=ssh://johny@lagrange.mekk.net/sources/python/libs/webby</span></tt></li>\n<li>Discover that <tt>euler.local</tt> also matches, and <tt>{repo}</tt> is again\n<tt>python/libs/webby</tt>. After replacing <tt>/</tt>-s with <tt>.</tt>-s,\nthat brings alias\n<tt><span class=\"pre\">euler=ssh://johny@euler.mekk.net/devel/python.libs.webby/hg</span></tt></li>\n<li>Ignore remaining patterns as they do not match.</li>\n</ol>\n<p>Or, in <tt><span class=\"pre\">~/tracked/mercurial/tortoisehg-stable</span></tt>, the extension will:</p>\n<ol>\n<li>Note that <tt>official.thg.local</tt> matches (at this time without\ndefining anything), extract matching path from\n<tt>official.thg.remote</tt>, and finally generate for this repository\npath <tt>official = <span class=\"pre\">https://bitbucket.org/tortoisehg/thg</span></tt> (so <tt>hg\npull official</tt> works there).  Note that the path alias is just\n<tt>official</tt>, the <tt>.thg.</tt> part was used only to group appropriate\nconfig items.</li>\n<li>Ignore remaining patterns which do not match.</li>\n</ol>\n</div>\n<div id=\"legacy-syntax\">\n<h3><a href=\"#id13\" rel=\"nofollow\">4.4\u00a0\u00a0\u00a0Legacy syntax</a></h3>\n<p>For compatibility reasons, there exist alternative way\nto reuse the same path alias. For example, instead of\n(currently recommended):</p>\n<pre>[path_pattern]\nproduction.web.local = ~/devel/web/{repo}\nproduction.web.remote = ssh://product@acme.org/www/{repo}\nproduction.db.local = ~/devel/database/{repo}\nproduction.db.remote = ssh://product@backend.acme.org/db/{repo}\nproduction.monit.local = ~/devel/monitoring/{repo}\nproduction.monit.remote = ssh://product@monit.acme.org/{repo}\n</pre>\n<p>one can use <tt>.alias</tt>:</p>\n<pre>[path_pattern]\nproduction.local = ~/devel/web/{repo}\nproduction.remote = ssh://product@acme.org/www/{repo}\ndbproduction.db.local = ~/devel/database/{repo}\ndbproduction.db.remote = ssh://product@backend.acme.org/db/{repo}\ndbproduction.alias = production\nmonproduction.local = ~/devel/monitoring/{repo}\nmonproduction.remote = ssh://product@monit.acme.org/{repo}\nmonproduction.alias = production\n</pre>\n<p>Both those syntaxes give meaning to <tt>hg push production</tt> in all matching\nrepositories.</p>\n<div>\n<p>Note</p>\n<p>I keep supporting <tt>.alias</tt> syntax for backward compatibility (it\nwas the initial syntax provided for the task) but it is more\nelaborate and less readable, so I don\u2019t recommend it anymore.</p>\n</div>\n</div>\n</div>\n<div id=\"pattern-priority\">\n<h2><a href=\"#id14\" rel=\"nofollow\">5\u00a0\u00a0\u00a0Pattern priority</a></h2>\n<p>It is possible to write patterns so they <em>conflict</em> (more than one\ndefinition of some path exists). While not frequent, such approach has\nsometimes it\u2019s uses.</p>\n<p>Path aliases have the following priority:</p>\n<ul>\n<li>enforced patterns (patterns with <tt>.enforce</tt> set),</li>\n<li>per repo aliases (standard <tt>[paths]</tt> defined in <tt>.hg/hgrc</tt>),</li>\n<li>non-enforced patterns.</li>\n</ul>\n<p>So, for example, with:</p>\n<pre>[path_pattern]\nacme.local = ~/devel/{repo}\nacme.remote =  ssh://johny@apps.mekk.net/code/{repo}\nacme.enforce = true\nacme.alt.local = ~/devel/libs/{repo}\nacme.alt.remote =  ssh://johny@libs.mekk.net/{repo}\n</pre>\n<p>(both patterns define the same alias <tt>acme</tt>) executing <tt>hg push\nacme</tt> in <tt>~/devel/libs/calc</tt> will push to\n<tt><span class=\"pre\">ssh://johny@apps.mekk.net/code/libs/calc</span></tt> as enforced pattern wins\nover non-enforced one. The same will happen even if <tt>acme</tt> is\ndefined in per-repository <tt>.hg/hgrc</tt> (among standard <tt>[paths]</tt>).</p>\n<p>If more than one pattern of the same strength matches, extension tries\nit\u2019s best to pick one with more specific local path, for example if we\ndrop <tt>acme.enforce</tt> from the example above (or if we add\n<tt>acme.alt.enforce</tt>), executing <tt>hg push acme</tt> in\n<tt>~/devel/libs/calc</tt> will push to <tt><span class=\"pre\">ssh://johny@libs.mekk.net/calc</span></tt>\nas more specific pattern wins.</p>\n<div>\n<p>Note</p>\n<p>It\u2019s not always obvious which pattern is more specific (compare\n<tt><span class=\"pre\">~/(klass)/libs/base</span></tt> with <tt><span class=\"pre\">~/src/{repo}</span></tt>). Current\nimplementation looks for the length of non-varying prefix (so the\nlatter will win over the former as <tt>~/src/</tt> is longer than\n<tt>~/</tt>). If those are of equal length, pattern with more non-var characters wins,\nand finally, the one which happened last in the config file.</p>\n<p>Some details may change in the future, use <tt>enforce</tt> when in\ndoubt (or let me know if numeric priority would be useful).</p>\n</div>\n</div>\n<div id=\"tips-and-tricks\">\n<h2><a href=\"#id15\" rel=\"nofollow\">6\u00a0\u00a0\u00a0Tips and tricks</a></h2>\n<div id=\"default-as-path-pattern\">\n<h3><a href=\"#id16\" rel=\"nofollow\">6.1\u00a0\u00a0\u00a0<tt>default</tt> as path pattern</a></h3>\n<p>You can define <tt>default</tt> via path pattern if you wish:</p>\n<pre>[path_pattern]\ndefault.hobby.local = ~/hobby/{repo}\ndefault.hobby.remote =  ssh://hg@bitbucket.org/Johny/{below:/=-}\ndefault.wrk.local = ~/work/{what}\ndefault.wrk.remote =  https://tim@devel-department.local/{what}\n</pre>\n<p>(here in <tt>~/hobby</tt> I push to bitbucket by default, but in <tt>~/work</tt>\nto department server).</p>\n<div>\n<p>Note</p>\n<p>Mercurial will sooner or later define <tt>default</tt> path in\nper-repository <tt>.hg/hgrc</tt> files.  Enforce your patterns\n(<tt>default.hobby.enforce = true</tt>) if you need to defeat those\nsettings. Or don\u2019t, if you want those patterns for defaults only.</p>\n</div>\n</div>\n<div id=\"special-treatment-of-specific-repositories\">\n<h3><a href=\"#id17\" rel=\"nofollow\">6.2\u00a0\u00a0\u00a0Special treatment of specific repositories</a></h3>\n<p>It happens that some repository (or a few) <em>does not match</em> the\ngeneral rule. In such a case, one can simply overwrite given alias\non repository level, or use pattern priority.</p>\n<p>My real example is <a href=\"https://bitbucket.org/Mekk/mercurial_keyring/\" rel=\"nofollow\">Keyring Extension</a> repository. While I generally\nuse dash (<tt>-</tt>) as path separator (so Path Pattern is located at\n<tt><span class=\"pre\">/Mekk/mercurial-path_pattern</span></tt> and <a href=\"https://bitbucket.org/Mekk/mercurial-dynamic_username/\" rel=\"nofollow\">Dynamic Username</a> at\n<tt><span class=\"pre\">/Mekk/mercurial-dynamic_username</span></tt>), keyring repo predates this\nconvention and is named <tt>/Mekk/mercurial_keyring</tt>. So I solve this\nby:</p>\n<pre>[path_pattern]\n# By default bitbucket mirrors my dir structure replacing / with -\nbbssh.local = ~/devel/{below}\nbbssh.remote = ssh://hg@bitbucket.org/Mekk/{below:/=-}\n# \u2026 but there are overrides\nbbssh.keyring.local = ~/devel/mercurial/keyring\nbbssh.keyring.remote = ssh://hg@bitbucket.org/Mekk/mercurial_keyring\n</pre>\n<p>Of course I could achieve the same by defining <tt>bbssh</tt> among\n<tt>[paths]</tt> in <tt><span class=\"pre\">~/devel/mercurial/keyring/.hg/hgrc</span></tt> file, but pattern\ntechnique have some advantages:</p>\n<ul>\n<li>as I share and sync snippet of my <tt><span class=\"pre\">~/.hgrc</span></tt> between machines,\nthis definition automatically propagates everywhere, and I don\u2019t need\nto remember about adding path to the new clone,</li>\n<li>it leaves all paths in one place where I can review them together,</li>\n<li>it can be expanded to whole subtree if necessary.</li>\n</ul>\n</div>\n<div id=\"keeping-non-standard-remote-paths-as-patterns\">\n<h3><a href=\"#id18\" rel=\"nofollow\">6.3\u00a0\u00a0\u00a0Keeping non-standard remote paths as patterns</a></h3>\n<p>The same trick can be used for maintaining list of remotes.\nFor example here is my way to have <tt>hg pull official</tt> handy\nin various tracked repositories:</p>\n<pre>[path_pattern]\nofficial.hgstable.local = ~/tracked/hg-stable\nofficial.hgstable.remote = http://selenic.com/repo/hg-stable\nofficial.thg.local = ~/tracked/tortoise-hg\nofficial.thg.remote = https://bitbucket.org/tortoisehg/thg/\n# \u2026\n</pre>\n<p>Of course I could enter those paths directly inside <tt>.hg/hgrc</tt>, but\nthose definitions can be synced between machines, and survive\nin case I discard the repo in charge for some time.</p>\n</div>\n<div id=\"separating-and-sharing-pattern-configuration\">\n<h3><a href=\"#id19\" rel=\"nofollow\">6.4\u00a0\u00a0\u00a0Separating (and sharing) pattern configuration</a></h3>\n<p>In case the pattern list grows bigger, I recommend moving patterns\ninto the separate config file. For example, write in <tt><span class=\"pre\">~/.hgrc</span></tt>:</p>\n<pre>%include ~/configs/mercurial/path_pattern.hgrc\n</pre>\n<p>and then store all patterns in <tt>path_pattern.hgrc</tt>:</p>\n<pre>[path_pattern]\n\u2026\n</pre>\n<p>Extra benefit of such approach is that it makes sharing the file\neasier (in my case <tt>~/configs/mercurial</tt> is by itself Mercurial\nrepository which I share over my various development machines, and\nwhich contains all non-machine specific snippets of my Mercurial\nconfiguration).</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id20\" rel=\"nofollow\">7\u00a0\u00a0\u00a0Installation</a></h2>\n<div id=\"linux-unix-from-pypi\">\n<h3><a href=\"#id21\" rel=\"nofollow\">7.1\u00a0\u00a0\u00a0Linux/Unix (from PyPI)</a></h3>\n<p>If you have working <tt>pip</tt> or <tt>easy_install</tt>:</p>\n<pre>pip install --user mercurial_path_pattern\n</pre>\n<p>or maybe:</p>\n<pre>sudo pip install mercurial_path_pattern\n</pre>\n<p>(or use <tt>easy_install</tt> instead of <tt>pip</tt>). Then activate by:</p>\n<pre>[extensions]\nmercurial_path_pattern =\n</pre>\n<p>To upgrade, repeat the same command with <tt><span class=\"pre\">--upgrade</span></tt> option, for\nexample:</p>\n<pre>pip install --user --upgrade mercurial_path_pattern\n</pre>\n</div>\n<div id=\"linux-unix-from-source\">\n<h3><a href=\"#id22\" rel=\"nofollow\">7.2\u00a0\u00a0\u00a0Linux/Unix (from source)</a></h3>\n<p>If you don\u2019t have <tt>pip</tt>, or wish to follow development more closely:</p>\n<ul>\n<li><p>clone both this repository and <a href=\"https://bitbucket.org/Mekk/mercurial-extension_utils/\" rel=\"nofollow\">mercurial_extension_utils</a> and put\nthem in the same directory, for example:</p>\n<pre>cd ~/sources\nhg clone https://bitbucket.org/Mekk/mercurial-extension_utils/\nhg clone https://bitbucket.org/Mekk/mercurial-path_pattern/\n</pre>\n</li>\n<li><p>update to newest tags,</p>\n</li>\n<li><p>activate by:</p>\n<pre>[extensions]\nmercurial_path_pattern = ~/sources/mercurial-path_pattern/mercurial_path_pattern.py\n</pre>\n</li>\n</ul>\n<p>To upgrade, pull and update.</p>\n<p>Note that directory names matter. See <a href=\"https://bitbucket.org/Mekk/mercurial-extension_utils/\" rel=\"nofollow\">mercurial_extension_utils</a> for\nlonger description of this kind of installation.</p>\n</div>\n<div id=\"windows\">\n<h3><a href=\"#id23\" rel=\"nofollow\">7.3\u00a0\u00a0\u00a0Windows</a></h3>\n<p>If you have any Python installed, you may install with <tt>pip</tt>:</p>\n<pre>pip install mercurial_path_pattern\n</pre>\n<p>Still, as Mercurial (whether taken from <a href=\"http://tortoisehg.bitbucket.org/\" rel=\"nofollow\">TortoiseHg</a>, or own package)\nuses it\u2019s own bundled Python, you must activate by specifying the path:</p>\n<pre>[extensions]\nmercurial_path_pattern = C:/Python27/Lib/site-packages/mercurial_path_pattern.py\n;; Or wherever pip installed it\n</pre>\n<p>To upgrade to new version:</p>\n<pre>pip --upgrade mercurial_path_pattern\n</pre>\n<p>If you don\u2019t have any Python, clone repositories:</p>\n<pre>cd c:\\hgplugins\nhg clone https://bitbucket.org/Mekk/mercurial-extension_utils/\nhg clone https://bitbucket.org/Mekk/mercurial-path_pattern/\n</pre>\n<p>update to tagged versions and activate by path:</p>\n<pre>[extensions]\nmercurial_path_pattern = C:/hgplugins/mercurial-path_pattern/mercurial_path_pattern.py\n;; Or wherever you cloned\n</pre>\n<p>See <a href=\"https://bitbucket.org/Mekk/mercurial-extension_utils/\" rel=\"nofollow\">mercurial_extension_utils</a> documentation for more details on\nWindows installation.</p>\n<div>\n<p>Note</p>\n<p>Directory names matter. If <tt>mercurial_path_pattern.py</tt> can\u2019t find\n<tt>mercurial_extension_utils.py</tt> in system path, it looks for it in\nits own directory, in <tt><span class=\"pre\">../mercurial_extension_utils</span></tt>, and in\n<tt><span class=\"pre\">../extension_utils</span></tt>.</p>\n</div>\n</div>\n</div>\n<div id=\"related-extensions\">\n<h2><a href=\"#id24\" rel=\"nofollow\">8\u00a0\u00a0\u00a0Related extensions</a></h2>\n<p><a href=\"https://www.mercurial-scm.org/wiki/SchemesExtension\" rel=\"nofollow\">Schemes Extension</a>, distributed together with Mercurial, makes it\npossible to simplify repository URLs. For example, you can write:</p>\n<pre>hg clone bb://Mekk/mercurial-path_pattern\n</pre>\n<p>(<tt>bb</tt> is schemes alias expanding to BitBucket url).</p>\n<p>While both Path Pattern and Schemes are related to path management,\nthey target different habits. Schemes is particularly useful\nfor people making frequent ad-hoc clones, Path Pattern is about\nkeeping consistent synchronized repository hierarchies. With Schemes,\nurls you type are shorter and less error-prone, with Path Pattern\nyou don\u2019t type them at all as Mercurial guesses them for you.</p>\n<p>Both can cooperate, schemes aliases can be used in pattern definitions:</p>\n<pre>[path_pattern]\nbitb.local = ~/sources/{below}\nbitb.remote = bb://Mekk/{below:/=-}\n</pre>\n<p>will work (as long as schemes extension is enabled).</p>\n</div>\n<div id=\"history\">\n<h2><a href=\"#id25\" rel=\"nofollow\">9\u00a0\u00a0\u00a0History</a></h2>\n<p>See <a href=\"https://bitbucket.org/Mekk/mercurial-path_pattern/src/tip/HISTORY.txt\" rel=\"nofollow\">HISTORY.txt</a></p>\n</div>\n<div id=\"development-bug-reports-enhancement-suggestions\">\n<h2><a href=\"#id26\" rel=\"nofollow\">10\u00a0\u00a0\u00a0Development, bug reports, enhancement suggestions</a></h2>\n<p>Development is tracked on BitBucket, see\n<a href=\"https://bitbucket.org/Mekk/mercurial-path_pattern/\" rel=\"nofollow\">https://bitbucket.org/Mekk/mercurial-path_pattern/</a></p>\n<p>Use BitBucket issue tracker for bug reports and enhancement\nsuggestions.</p>\n</div>\n<div id=\"additional-notes\">\n<h2><a href=\"#id27\" rel=\"nofollow\">11\u00a0\u00a0\u00a0Additional notes</a></h2>\n<p>Information about this extension is also available\non Mercurial Wiki: <a href=\"http://mercurial.selenic.com/wiki/PathPatternExtension\" rel=\"nofollow\">http://mercurial.selenic.com/wiki/PathPatternExtension</a></p>\n<p>Check also <a href=\"http://mekk.bitbucket.io/mercurial.html\" rel=\"nofollow\">other Mercurial extensions I wrote</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6113435, "releases": {"0.6.0": [{"comment_text": "", "digests": {"md5": "d6e83b83ba67b63f9ad44647d11f3be1", "sha256": "bc410d8f843e7b1c64262fc0a61ecce747376f974655bf85156cf61df6850716"}, "downloads": -1, "filename": "mercurial_path_pattern-0.6.0.tar.gz", "has_sig": false, "md5_digest": "d6e83b83ba67b63f9ad44647d11f3be1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7057, "upload_time": "2015-10-10T12:28:17", "upload_time_iso_8601": "2015-10-10T12:28:17.800785Z", "url": "https://files.pythonhosted.org/packages/dd/3c/3489323bfc3a6c73f79a3259a7496f48d1692050fc25775cc4b9adbaf10b/mercurial_path_pattern-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "a9f46463cf8d1b220bd63d5d57249d54", "sha256": "baba9ff6dc1773ae1860f4a6d6e3972e94f71026e9327015717d50eb7917297d"}, "downloads": -1, "filename": "mercurial_path_pattern-0.6.1.tar.gz", "has_sig": false, "md5_digest": "a9f46463cf8d1b220bd63d5d57249d54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7232, "upload_time": "2015-10-10T12:32:56", "upload_time_iso_8601": "2015-10-10T12:32:56.686379Z", "url": "https://files.pythonhosted.org/packages/92/26/9b2611517dd745f8caf070171b4aec7155786a5f7877ff5dbe6266062527/mercurial_path_pattern-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "b10294dc9eb09125854b60aa5b673fd1", "sha256": "be62b2cc072b374049f6d04b0d056e8235a27270c26f43cfd95c0461aa5292e4"}, "downloads": -1, "filename": "mercurial_path_pattern-0.7.0.tar.gz", "has_sig": false, "md5_digest": "b10294dc9eb09125854b60aa5b673fd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7843, "upload_time": "2015-10-11T14:36:15", "upload_time_iso_8601": "2015-10-11T14:36:15.131724Z", "url": "https://files.pythonhosted.org/packages/f7/1f/251742ccf5e30d2ed759b599e25f62ca8410b53b9687703083c57bd6e214/mercurial_path_pattern-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "80b3029f3a4c5e5030e22df8f9d5286a", "sha256": "21040c03d8ef24622bb7f7f732c565f77902c4324076d66bb1062432f4dc9d66"}, "downloads": -1, "filename": "mercurial_path_pattern-0.8.0.tar.gz", "has_sig": false, "md5_digest": "80b3029f3a4c5e5030e22df8f9d5286a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7872, "upload_time": "2015-10-14T11:17:07", "upload_time_iso_8601": "2015-10-14T11:17:07.664051Z", "url": "https://files.pythonhosted.org/packages/da/d8/d9248bed2e1e6bae1e4c1c403cebf6abe5960d71626e3e8fd80c2ec33b78/mercurial_path_pattern-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "ad24c09bd45d326af92a7dbefac791e5", "sha256": "9d35a4cf9f504c59eff2a6c7bdf4729140d0cc0d5e7ce5ed751b7585d767d10e"}, "downloads": -1, "filename": "mercurial_path_pattern-0.9.0.tar.gz", "has_sig": false, "md5_digest": "ad24c09bd45d326af92a7dbefac791e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8526, "upload_time": "2015-10-14T21:35:34", "upload_time_iso_8601": "2015-10-14T21:35:34.053530Z", "url": "https://files.pythonhosted.org/packages/a8/86/33378da0d7848916276f90d5ef873c7790e42354bc50c92f25daf401a0ae/mercurial_path_pattern-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "dec66108280a5e47461f9f93a48748bb", "sha256": "d1eaa1a48f28887772e3d59fc58f143e3e4579d7667d86ce1f51f26c4711fe08"}, "downloads": -1, "filename": "mercurial_path_pattern-1.0.0.tar.gz", "has_sig": false, "md5_digest": "dec66108280a5e47461f9f93a48748bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11647, "upload_time": "2015-10-28T22:34:40", "upload_time_iso_8601": "2015-10-28T22:34:40.167892Z", "url": "https://files.pythonhosted.org/packages/5e/3f/83a4b36cae053a2cc137f354b011c3e063fe2614dfafe3cd8482ce17dcc0/mercurial_path_pattern-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "87f528ad43644ae9aa52f49ce0ba7688", "sha256": "dcc845f6a5fce6628e512c6a478de8525d6d75b2affe30181d92a5a7893c72e7"}, "downloads": -1, "filename": "mercurial_path_pattern-1.1.0.tar.gz", "has_sig": false, "md5_digest": "87f528ad43644ae9aa52f49ce0ba7688", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14146, "upload_time": "2015-11-13T21:07:33", "upload_time_iso_8601": "2015-11-13T21:07:33.736943Z", "url": "https://files.pythonhosted.org/packages/b8/3a/35d75e5cd52a89cd6b8d659effe48772010f6b692b28a03053cd71630c72/mercurial_path_pattern-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "4964e4cced93ce16d1c6b792ecf43674", "sha256": "4a1584e4a7e0ec2928971f200189cd5f2008c44c711ca61da9574ae3e57d9e43"}, "downloads": -1, "filename": "mercurial_path_pattern-1.1.1.tar.gz", "has_sig": false, "md5_digest": "4964e4cced93ce16d1c6b792ecf43674", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14098, "upload_time": "2015-12-05T22:38:40", "upload_time_iso_8601": "2015-12-05T22:38:40.293417Z", "url": "https://files.pythonhosted.org/packages/a6/33/be512ced35578ee8b346fa5ea787922ce62ae044fdaad25dfb0ea67df00e/mercurial_path_pattern-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "8b499b74fb7d6c05539bffc35bc6e9c1", "sha256": "8fd2ac8b198cc8a7898385c66eb65d4cb321a0edd44f786ff4d956710301dbac"}, "downloads": -1, "filename": "mercurial_path_pattern-1.2.0.tar.gz", "has_sig": false, "md5_digest": "8b499b74fb7d6c05539bffc35bc6e9c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14117, "upload_time": "2016-03-09T23:51:59", "upload_time_iso_8601": "2016-03-09T23:51:59.077216Z", "url": "https://files.pythonhosted.org/packages/e0/6b/eb8d93976e2a83f3bf290d18063d0b43201baf2040fbf76e1844a4e2f03a/mercurial_path_pattern-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "607c2ff128019e8fef0d0ae27f8f1c6f", "sha256": "8b7f322c089c96e027e52f854e77c3ef2668a345c07566ac40b245619fc73f7c"}, "downloads": -1, "filename": "mercurial_path_pattern-1.3.0.tar.gz", "has_sig": false, "md5_digest": "607c2ff128019e8fef0d0ae27f8f1c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15538, "upload_time": "2016-03-13T22:21:58", "upload_time_iso_8601": "2016-03-13T22:21:58.488914Z", "url": "https://files.pythonhosted.org/packages/ae/a2/84e2c197f8ee92e51ce540b7d4263546679210756717d95182c047dd64d2/mercurial_path_pattern-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "bffd827f3176d5a462e7488790db29b1", "sha256": "d2e4ac2e91806fa59d9e53b8fcf7008587edcdff45349c54d9384b9a6ff44ecf"}, "downloads": -1, "filename": "mercurial_path_pattern-1.3.1.tar.gz", "has_sig": false, "md5_digest": "bffd827f3176d5a462e7488790db29b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15548, "upload_time": "2016-11-13T11:30:47", "upload_time_iso_8601": "2016-11-13T11:30:47.754490Z", "url": "https://files.pythonhosted.org/packages/9e/a1/0181ef851cd61f09d2753a6112cfc5d8a124ab90cf20c172f1f0b3c1e012/mercurial_path_pattern-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "b2920feceeba3ceee77377e1dbcedff9", "sha256": "fc561354fcbf9c569e3f7ec9412695a120537184f2daf049f17aaf13e0ad8d6f"}, "downloads": -1, "filename": "mercurial_path_pattern-1.3.2.tar.gz", "has_sig": false, "md5_digest": "b2920feceeba3ceee77377e1dbcedff9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15614, "upload_time": "2016-11-13T18:49:29", "upload_time_iso_8601": "2016-11-13T18:49:29.255261Z", "url": "https://files.pythonhosted.org/packages/5e/ad/c681decee8501e04bd01fdc522b0050980cc346f2920747947c0280f589f/mercurial_path_pattern-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "ec1316b5fc0fa600c21b4c2d43d6f1b0", "sha256": "b2d35a5e3792e5fca822599a471224f3bcf4c9a75a03f67e064a3688a5961bad"}, "downloads": -1, "filename": "mercurial_path_pattern-1.3.3.tar.gz", "has_sig": false, "md5_digest": "ec1316b5fc0fa600c21b4c2d43d6f1b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22010, "upload_time": "2017-05-18T14:53:56", "upload_time_iso_8601": "2017-05-18T14:53:56.140015Z", "url": "https://files.pythonhosted.org/packages/d1/6d/c140b8e3863d0c41841febf570da99d4913430d43fe50822e2aea0b789b3/mercurial_path_pattern-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "bccae77a96f801c5974569cd7ef45e65", "sha256": "e0671c98505eabf7b6750a75c8d5a0bf51d1396f4a6718080b2217f3d3ee535a"}, "downloads": -1, "filename": "mercurial_path_pattern-1.3.4.tar.gz", "has_sig": false, "md5_digest": "bccae77a96f801c5974569cd7ef45e65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19697, "upload_time": "2018-05-25T23:17:20", "upload_time_iso_8601": "2018-05-25T23:17:20.975064Z", "url": "https://files.pythonhosted.org/packages/0f/0d/6483e6e598f35b7752126cba00554337ecaba53c846e9c45ec2233c87ee1/mercurial_path_pattern-1.3.4.tar.gz", "yanked": false}], "1.3.5": [{"comment_text": "", "digests": {"md5": "3b9ec69e52f8bc4ead11d64b2cc57221", "sha256": "f61d691cc7951bd7f635632c82231450f24eb50fa93b7584a60f93fffdb7d5d3"}, "downloads": -1, "filename": "mercurial_path_pattern-1.3.5.tar.gz", "has_sig": false, "md5_digest": "3b9ec69e52f8bc4ead11d64b2cc57221", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19710, "upload_time": "2018-05-26T00:08:10", "upload_time_iso_8601": "2018-05-26T00:08:10.148830Z", "url": "https://files.pythonhosted.org/packages/07/6c/5bac84af65165deb27f8a6e5222e8f8724be52f346004bb047b6c87ff70c/mercurial_path_pattern-1.3.5.tar.gz", "yanked": false}], "1.3.6": [{"comment_text": "", "digests": {"md5": "e658eb6fa79aa783606cd1c3a39ff96f", "sha256": "21d8e0b7d160c5da0840b7fd488c0e79195c1f4286d13ea3b6259ceec9a251ed"}, "downloads": -1, "filename": "mercurial_path_pattern-1.3.6.tar.gz", "has_sig": false, "md5_digest": "e658eb6fa79aa783606cd1c3a39ff96f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19706, "upload_time": "2018-08-03T21:25:22", "upload_time_iso_8601": "2018-08-03T21:25:22.928402Z", "url": "https://files.pythonhosted.org/packages/28/15/21db2bfc3ada7256908ddc68bf5e60fa308d8cdec307c209956fc6f393d2/mercurial_path_pattern-1.3.6.tar.gz", "yanked": false}], "1.3.7": [{"comment_text": "", "digests": {"md5": "95ca351b951f44a73d9a81baf383203a", "sha256": "ed24c3f111e2dc6f938f133c4e654891eefe23a158357fffd0d6753309a02cff"}, "downloads": -1, "filename": "mercurial_path_pattern-1.3.7.tar.gz", "has_sig": false, "md5_digest": "95ca351b951f44a73d9a81baf383203a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22069, "upload_time": "2018-11-05T13:57:51", "upload_time_iso_8601": "2018-11-05T13:57:51.073853Z", "url": "https://files.pythonhosted.org/packages/a6/7a/e2a91f2b3ba1d574245c4261176c89c494f3dc9a782ebc3217404ce7e308/mercurial_path_pattern-1.3.7.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "7ae15425efff8922f8dac44c48aa6772", "sha256": "3f2fdafd7d47d0fe1b4f10889e665aee47777cc882ecf11326d2ef4c2a80cc99"}, "downloads": -1, "filename": "mercurial_path_pattern-1.4.0.tar.gz", "has_sig": false, "md5_digest": "7ae15425efff8922f8dac44c48aa6772", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31961, "upload_time": "2019-11-11T00:56:29", "upload_time_iso_8601": "2019-11-11T00:56:29.981335Z", "url": "https://files.pythonhosted.org/packages/73/b9/d596d0b3030408edf61c5ed761f8218eb169f436b0fbe8619f7a566aee98/mercurial_path_pattern-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7ae15425efff8922f8dac44c48aa6772", "sha256": "3f2fdafd7d47d0fe1b4f10889e665aee47777cc882ecf11326d2ef4c2a80cc99"}, "downloads": -1, "filename": "mercurial_path_pattern-1.4.0.tar.gz", "has_sig": false, "md5_digest": "7ae15425efff8922f8dac44c48aa6772", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31961, "upload_time": "2019-11-11T00:56:29", "upload_time_iso_8601": "2019-11-11T00:56:29.981335Z", "url": "https://files.pythonhosted.org/packages/73/b9/d596d0b3030408edf61c5ed761f8218eb169f436b0fbe8619f7a566aee98/mercurial_path_pattern-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:10 2020"}