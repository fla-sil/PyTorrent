{"info": {"author": "Fatih Cagatay Akyon", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![PyPI version](https://badge.fury.io/py/craft-text-detector.svg)](https://badge.fury.io/py/craft-text-detector)\n[![Conda version](https://anaconda.org/fcakyon/craft-text-detector/badges/version.svg)](https://anaconda.org/fcakyon/craft-text-detector)\n[![CI](https://github.com/fcakyon/craft-text-detector/workflows/CI/badge.svg)](https://github.com/fcakyon/craft-text-detector/actions?query=event%3Apush+branch%3Amaster+is%3Acompleted+workflow%3ACI)\n\n\n## CRAFT: Character-Region Awareness For Text detection\nPackaged, Pytorch-based, easy to use, cross-platform version of the CRAFT text detector | [Paper](https://arxiv.org/abs/1904.01941) |\n\n### Overview\nPyTorch implementation for CRAFT text detector that effectively detect text area by exploring each character region and affinity between characters. The bounding box of texts are obtained by simply finding minimum bounding rectangles on binary map after thresholding character region and affinity scores.\n\n<img width=\"1000\" alt=\"teaser\" src=\"./figures/craft_example.gif\">\n\n\n## Getting started\n### Installation\n- Install using conda for Linux, Mac and Windows (preferred):\n```console\nconda install -c fcakyon craft-text-detector\n```\n- Install using pip for Linux and Mac:\n```console\npip install craft-text-detector\n```\n\n### Basic Usage\n```python\n# import package\nimport craft_text_detector as craft\n\n# set image path and export folder directory\nimage_path = 'figures/idcard.png'\noutput_dir = 'outputs/'\n\n# apply craft text detection and export detected regions to output directory\nprediction_result = craft.detect_text(image_path, output_dir, crop_type=\"poly\", cuda=False)\n```\n\n### Advanced Usage\n```python\n# import package\nimport craft_text_detector as craft\n\n# set image path and export folder directory\nimage_path = 'figures/idcard.png'\noutput_dir = 'outputs/'\n\n# read image\nimage = craft.read_image(image_path)\n\n# load models\nrefine_net = craft.load_refinenet_model()\ncraft_net = craft.load_craftnet_model()\n\n# perform prediction\nprediction_result = craft.get_prediction(image=image,\n\t\t\t\t\tcraft_net=craft_net,\n\t\t\t\t\trefine_net=refine_net,\n\t\t\t\t\ttext_threshold=0.7,\n\t\t\t\t\tlink_threshold=0.4,\n\t\t\t\t\tlow_text=0.4,\n\t\t\t\t\tcuda=True,\n\t\t\t\t\tlong_size=1280,\n\t\t\t\t\tshow_time=True)\n\n# export detected text regions\nexported_file_paths = craft.export_detected_regions(image_path=image_path,\n                                                    image=image,\n                                                    regions=prediction_result[\"boxes\"],\n                                                    output_dir=output_dir,\n                                                    rectify=True)\n\n# export heatmap, detection points, box visualization\ncraft.export_extra_results(image_path=image_path,\n    \t                   image=image,\n                           regions=prediction_result[\"boxes\"],\n                           heatmaps=prediction_result[\"heatmaps\"],\n                           output_dir=output_dir)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fcakyon/craft_text_detector", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "craft-text-detector", "package_url": "https://pypi.org/project/craft-text-detector/", "platform": "", "project_url": "https://pypi.org/project/craft-text-detector/", "project_urls": {"Homepage": "https://github.com/fcakyon/craft_text_detector"}, "release_url": "https://pypi.org/project/craft-text-detector/0.2.0/", "requires_dist": ["torch (>=0.4.1)", "torchvision (>=0.2.1)", "opencv-python (==3.4.8.29)", "scipy (>=1.3.2)", "gdown (>=3.10.1)"], "requires_python": ">=3.5", "summary": "Fast and accurate text detection library built on CRAFT implementation", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/craft-text-detector\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e96574022a9fae7819a4d41fc3ce67870201273/68747470733a2f2f62616467652e667572792e696f2f70792f63726166742d746578742d6465746563746f722e737667\"></a>\n<a href=\"https://anaconda.org/fcakyon/craft-text-detector\" rel=\"nofollow\"><img alt=\"Conda version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbc1e71e60eb51f45dd7fb5e1eba56cf7ac5a836/68747470733a2f2f616e61636f6e64612e6f72672f6663616b796f6e2f63726166742d746578742d6465746563746f722f6261646765732f76657273696f6e2e737667\"></a>\n<a href=\"https://github.com/fcakyon/craft-text-detector/actions?query=event%3Apush+branch%3Amaster+is%3Acompleted+workflow%3ACI\" rel=\"nofollow\"><img alt=\"CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/da2f4f1da9aeb49e61d9e7dd3dbbd94e3d7eeee8/68747470733a2f2f6769746875622e636f6d2f6663616b796f6e2f63726166742d746578742d6465746563746f722f776f726b666c6f77732f43492f62616467652e737667\"></a></p>\n<h2>CRAFT: Character-Region Awareness For Text detection</h2>\n<p>Packaged, Pytorch-based, easy to use, cross-platform version of the CRAFT text detector | <a href=\"https://arxiv.org/abs/1904.01941\" rel=\"nofollow\">Paper</a> |</p>\n<h3>Overview</h3>\n<p>PyTorch implementation for CRAFT text detector that effectively detect text area by exploring each character region and affinity between characters. The bounding box of texts are obtained by simply finding minimum bounding rectangles on binary map after thresholding character region and affinity scores.</p>\n<img alt=\"teaser\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d85325ea8c752b18f45629811ecf372ba80c210/2e2f666967757265732f63726166745f6578616d706c652e676966\" width=\"1000\">\n<h2>Getting started</h2>\n<h3>Installation</h3>\n<ul>\n<li>Install using conda for Linux, Mac and Windows (preferred):</li>\n</ul>\n<pre><span class=\"go\">conda install -c fcakyon craft-text-detector</span>\n</pre>\n<ul>\n<li>Install using pip for Linux and Mac:</li>\n</ul>\n<pre><span class=\"go\">pip install craft-text-detector</span>\n</pre>\n<h3>Basic Usage</h3>\n<pre><span class=\"c1\"># import package</span>\n<span class=\"kn\">import</span> <span class=\"nn\">craft_text_detector</span> <span class=\"k\">as</span> <span class=\"nn\">craft</span>\n\n<span class=\"c1\"># set image path and export folder directory</span>\n<span class=\"n\">image_path</span> <span class=\"o\">=</span> <span class=\"s1\">'figures/idcard.png'</span>\n<span class=\"n\">output_dir</span> <span class=\"o\">=</span> <span class=\"s1\">'outputs/'</span>\n\n<span class=\"c1\"># apply craft text detection and export detected regions to output directory</span>\n<span class=\"n\">prediction_result</span> <span class=\"o\">=</span> <span class=\"n\">craft</span><span class=\"o\">.</span><span class=\"n\">detect_text</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">,</span> <span class=\"n\">output_dir</span><span class=\"p\">,</span> <span class=\"n\">crop_type</span><span class=\"o\">=</span><span class=\"s2\">\"poly\"</span><span class=\"p\">,</span> <span class=\"n\">cuda</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h3>Advanced Usage</h3>\n<pre><span class=\"c1\"># import package</span>\n<span class=\"kn\">import</span> <span class=\"nn\">craft_text_detector</span> <span class=\"k\">as</span> <span class=\"nn\">craft</span>\n\n<span class=\"c1\"># set image path and export folder directory</span>\n<span class=\"n\">image_path</span> <span class=\"o\">=</span> <span class=\"s1\">'figures/idcard.png'</span>\n<span class=\"n\">output_dir</span> <span class=\"o\">=</span> <span class=\"s1\">'outputs/'</span>\n\n<span class=\"c1\"># read image</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">craft</span><span class=\"o\">.</span><span class=\"n\">read_image</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># load models</span>\n<span class=\"n\">refine_net</span> <span class=\"o\">=</span> <span class=\"n\">craft</span><span class=\"o\">.</span><span class=\"n\">load_refinenet_model</span><span class=\"p\">()</span>\n<span class=\"n\">craft_net</span> <span class=\"o\">=</span> <span class=\"n\">craft</span><span class=\"o\">.</span><span class=\"n\">load_craftnet_model</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># perform prediction</span>\n<span class=\"n\">prediction_result</span> <span class=\"o\">=</span> <span class=\"n\">craft</span><span class=\"o\">.</span><span class=\"n\">get_prediction</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">=</span><span class=\"n\">image</span><span class=\"p\">,</span>\n\t\t\t\t\t<span class=\"n\">craft_net</span><span class=\"o\">=</span><span class=\"n\">craft_net</span><span class=\"p\">,</span>\n\t\t\t\t\t<span class=\"n\">refine_net</span><span class=\"o\">=</span><span class=\"n\">refine_net</span><span class=\"p\">,</span>\n\t\t\t\t\t<span class=\"n\">text_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n\t\t\t\t\t<span class=\"n\">link_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span>\n\t\t\t\t\t<span class=\"n\">low_text</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span>\n\t\t\t\t\t<span class=\"n\">cuda</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n\t\t\t\t\t<span class=\"n\">long_size</span><span class=\"o\">=</span><span class=\"mi\">1280</span><span class=\"p\">,</span>\n\t\t\t\t\t<span class=\"n\">show_time</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># export detected text regions</span>\n<span class=\"n\">exported_file_paths</span> <span class=\"o\">=</span> <span class=\"n\">craft</span><span class=\"o\">.</span><span class=\"n\">export_detected_regions</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"n\">image_path</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">image</span><span class=\"o\">=</span><span class=\"n\">image</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">regions</span><span class=\"o\">=</span><span class=\"n\">prediction_result</span><span class=\"p\">[</span><span class=\"s2\">\"boxes\"</span><span class=\"p\">],</span>\n                                                    <span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"n\">output_dir</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">rectify</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># export heatmap, detection points, box visualization</span>\n<span class=\"n\">craft</span><span class=\"o\">.</span><span class=\"n\">export_extra_results</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"n\">image_path</span><span class=\"p\">,</span>\n    \t                   <span class=\"n\">image</span><span class=\"o\">=</span><span class=\"n\">image</span><span class=\"p\">,</span>\n                           <span class=\"n\">regions</span><span class=\"o\">=</span><span class=\"n\">prediction_result</span><span class=\"p\">[</span><span class=\"s2\">\"boxes\"</span><span class=\"p\">],</span>\n                           <span class=\"n\">heatmaps</span><span class=\"o\">=</span><span class=\"n\">prediction_result</span><span class=\"p\">[</span><span class=\"s2\">\"heatmaps\"</span><span class=\"p\">],</span>\n                           <span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"n\">output_dir</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7076646, "releases": {"0.1.8": [{"comment_text": "", "digests": {"md5": "a68e4ee08aa41b18c81085e47963ad4c", "sha256": "7b807f798dc90ddb749bedc8276af65305aff7bee4b5b79f680da785a6fda9c3"}, "downloads": -1, "filename": "craft_text_detector-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "a68e4ee08aa41b18c81085e47963ad4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17619, "upload_time": "2020-04-05T19:29:08", "upload_time_iso_8601": "2020-04-05T19:29:08.934253Z", "url": "https://files.pythonhosted.org/packages/b1/f8/461e29c387574fa53a75e1d000c66a126505d7ffb296ee9e1445edb41ff7/craft_text_detector-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24a7cf2833bf3e3c36d7ebf6654c926a", "sha256": "77350b8806d6ea34818aaf45330c8eab776fb4a4180255b4e1f372d3c71edf63"}, "downloads": -1, "filename": "craft-text-detector-0.1.8.tar.gz", "has_sig": false, "md5_digest": "24a7cf2833bf3e3c36d7ebf6654c926a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15736, "upload_time": "2020-04-05T19:29:10", "upload_time_iso_8601": "2020-04-05T19:29:10.184639Z", "url": "https://files.pythonhosted.org/packages/ad/7f/0e59413b3cc560110704c8506041a89c4d96900c4f7b3ee0e344444e7128/craft-text-detector-0.1.8.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7f2e43cd55742691d32941b0feda68f3", "sha256": "f70df0e28af9124467f766a2ce93a69515e0ab509d2b2a355c2e5be075574b0d"}, "downloads": -1, "filename": "craft_text_detector-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7f2e43cd55742691d32941b0feda68f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16943, "upload_time": "2020-04-22T13:37:49", "upload_time_iso_8601": "2020-04-22T13:37:49.075109Z", "url": "https://files.pythonhosted.org/packages/1a/17/9698e60c97001b67eab395d117c2b52fa82ff48d930f534468f5eb4af2a9/craft_text_detector-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44541dcffe3a2cbdb2e69a7f0604c329", "sha256": "f1fbd3ac3425e6e5ee6f6e04e4e148d5c4db08617b0e9e91711fad82f993a7a3"}, "downloads": -1, "filename": "craft-text-detector-0.2.0.tar.gz", "has_sig": false, "md5_digest": "44541dcffe3a2cbdb2e69a7f0604c329", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14854, "upload_time": "2020-04-22T13:37:50", "upload_time_iso_8601": "2020-04-22T13:37:50.466170Z", "url": "https://files.pythonhosted.org/packages/83/e2/89b95f2313b9437012823dd77403631f8376778beee2438d20b2f627516d/craft-text-detector-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f2e43cd55742691d32941b0feda68f3", "sha256": "f70df0e28af9124467f766a2ce93a69515e0ab509d2b2a355c2e5be075574b0d"}, "downloads": -1, "filename": "craft_text_detector-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7f2e43cd55742691d32941b0feda68f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16943, "upload_time": "2020-04-22T13:37:49", "upload_time_iso_8601": "2020-04-22T13:37:49.075109Z", "url": "https://files.pythonhosted.org/packages/1a/17/9698e60c97001b67eab395d117c2b52fa82ff48d930f534468f5eb4af2a9/craft_text_detector-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44541dcffe3a2cbdb2e69a7f0604c329", "sha256": "f1fbd3ac3425e6e5ee6f6e04e4e148d5c4db08617b0e9e91711fad82f993a7a3"}, "downloads": -1, "filename": "craft-text-detector-0.2.0.tar.gz", "has_sig": false, "md5_digest": "44541dcffe3a2cbdb2e69a7f0604c329", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14854, "upload_time": "2020-04-22T13:37:50", "upload_time_iso_8601": "2020-04-22T13:37:50.466170Z", "url": "https://files.pythonhosted.org/packages/83/e2/89b95f2313b9437012823dd77403631f8376778beee2438d20b2f627516d/craft-text-detector-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:29 2020"}