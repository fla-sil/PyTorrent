{"info": {"author": "Tom King, Kory Donati", "author_email": "tomk@bixly.com, korydonati@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "=============\nPython Purify\n=============\n\n************\nInstallation\n************\n\n\n::\n\n    pip install python_purify\n\n\nor::\n\n    python setup.py install\n\nExamples\n========\n\nSetup\n-----\n\n::\n\n    from python_purify import WordPurify\n    from python_purify import ImagePurify\n    ...\n    purify = WordPurify(my_api_key)\n    imgpurify = ImagePurify(my_img_api_key)\n    vidpurify = VideoPurify(my_img_api_key)\n\n\nThe Web Purify default response type is XML, but JSON is normally better to work with. We made\nJSON the standard format for our package, but you can set it to XML with the rspformat variable::\n\n    purify = WordPurify(my_api_key, rspformat='xml')\n\nThis will return a cElementTree object. If you want to use a better package like beautiful soup, you can\nreturn the tree back to text with the following::\n\n    from xml.etree import cElementTree as ET\n    ...\n    out = purify.check('Some nice words')\n    xml_string = ET.tostring(out)\n    # Some other XML parser can load the data now.\n\n\nInitialization options\n----------------------\n* live - Default: True. If false, uses the webpurify sandbox\n* rspformat - Default: `'json'`. Can be set to `'json'` or `'xml'`\n* verbose - Default: False. If true, prints the WebPurify url before making a request.\n\nWordPurify Methods\n==================\nOnce setup if finished, you can simply call each method::\n\n    out = purify.check('Some nice words')\n    print out\n    # {u'rsp': {u'@attributes': {u'stat': u'ok'}, u'found': u'0', u'api_key': u'*********', u'method':  u'webpurify.live.check', u'format': u'rest'}}\n\nThe following WordPurify methods are included:\n\n* `check <https://www.webpurify.com/documentation/methods/check/>`_\n* `check_count <https://www.webpurify.com/documentation/methods/checkcount/>`_\n* `replace <https://www.webpurify.com/documentation/methods/replace/>`_\n* `wp_return <https://www.webpurify.com/documentation/methods/return/>`_\n* `add_to_blacklist <https://www.webpurify.com/documentation/methods/addtoblacklist/>`_\n* `add_to_whitelist <https://www.webpurify.com/documentation/methods/addtowhitelist/>`_\n* `remove_from_blacklist <https://www.webpurify.com/documentation/methods/removefromblacklist/>`_\n* `remove_from_whitelist <https://www.webpurify.com/documentation/methods/removefromwhitelist/>`_\n* `get_blacklist <https://www.webpurify.com/documentation/methods/getblacklist/>`_\n* `get_whitelist <https://www.webpurify.com/documentation/methods/getwhitelist/>`_\n\n**Note:** \n  you should be able to set most of the options in the function call except for format. Format is determined at WordPurify  \n  creation. In this example, `rsp=1` will give us the response time and `slink=1` will tell WebPurify to flag urls::\n\n      purify.check('Some nice words', rsp=1, slink=1)\n\n\nImagePurify Methods\n===================\n\nJust like with WordPurify, once setup, you can call the ImagePurify Methods.\n\n::\n\n    out = imgpurify.img_account()\n\nThe following ImagePurify methods are included:\n\n* `img_check <https://www.webpurify.com/image-moderation/documentation/methods/imgcheck/>`_\n* `img_status <https://www.webpurify.com/image-moderation/documentation/methods/imgstatus/>`_\n* `img_account <https://www.webpurify.com/image-moderation/documentation/methods/imgaccount/>`_\n\nVideoPurify\n===========\n\nVideoPurify works in much the same way as ImagePurify.\n\n::\n\n    out = vidpurify.vid_account()\n\nThe following ImagePurify methods are included:\n\n* `vid_check <https://www.webpurify.com/video-moderation/documentation/methods/vidcheck/>`_\n* `vid_status <https://www.webpurify.com/video-moderation/documentation/methods/vidstatus/>`_\n* `vid_account <https://www.webpurify.com/video-moderation/documentation/methods/vidaccount/>`_\n\nTesting\n=======\n\nWe have written some basic tests for python 2.7 and python 3.\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/kingthomasc/python-purify/tarball/2.0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kingthomasc/python-purify", "keywords": "profanity,filter,web purify,webpurify", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-purify", "package_url": "https://pypi.org/project/python-purify/", "platform": "", "project_url": "https://pypi.org/project/python-purify/", "project_urls": {"Download": "https://github.com/kingthomasc/python-purify/tarball/2.0.1", "Homepage": "https://github.com/kingthomasc/python-purify"}, "release_url": "https://pypi.org/project/python-purify/2.0.1/", "requires_dist": ["six"], "requires_python": "", "summary": "A python API for Web Purify", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre>pip install python_purify\n</pre>\n<p>or:</p>\n<pre>python setup.py install\n</pre>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"setup\">\n<h3>Setup</h3>\n<pre>from python_purify import WordPurify\nfrom python_purify import ImagePurify\n...\npurify = WordPurify(my_api_key)\nimgpurify = ImagePurify(my_img_api_key)\nvidpurify = VideoPurify(my_img_api_key)\n</pre>\n<p>The Web Purify default response type is XML, but JSON is normally better to work with. We made\nJSON the standard format for our package, but you can set it to XML with the rspformat variable:</p>\n<pre>purify = WordPurify(my_api_key, rspformat='xml')\n</pre>\n<p>This will return a cElementTree object. If you want to use a better package like beautiful soup, you can\nreturn the tree back to text with the following:</p>\n<pre>from xml.etree import cElementTree as ET\n...\nout = purify.check('Some nice words')\nxml_string = ET.tostring(out)\n# Some other XML parser can load the data now.\n</pre>\n</div>\n<div id=\"initialization-options\">\n<h3>Initialization options</h3>\n<ul>\n<li>live - Default: True. If false, uses the webpurify sandbox</li>\n<li>rspformat - Default: <cite>\u2018json\u2019</cite>. Can be set to <cite>\u2018json\u2019</cite> or <cite>\u2018xml\u2019</cite></li>\n<li>verbose - Default: False. If true, prints the WebPurify url before making a request.</li>\n</ul>\n</div>\n</div>\n<div id=\"wordpurify-methods\">\n<h2>WordPurify Methods</h2>\n<p>Once setup if finished, you can simply call each method:</p>\n<pre>out = purify.check('Some nice words')\nprint out\n# {u'rsp': {u'@attributes': {u'stat': u'ok'}, u'found': u'0', u'api_key': u'*********', u'method':  u'webpurify.live.check', u'format': u'rest'}}\n</pre>\n<p>The following WordPurify methods are included:</p>\n<ul>\n<li><a href=\"https://www.webpurify.com/documentation/methods/check/\" rel=\"nofollow\">check</a></li>\n<li><a href=\"https://www.webpurify.com/documentation/methods/checkcount/\" rel=\"nofollow\">check_count</a></li>\n<li><a href=\"https://www.webpurify.com/documentation/methods/replace/\" rel=\"nofollow\">replace</a></li>\n<li><a href=\"https://www.webpurify.com/documentation/methods/return/\" rel=\"nofollow\">wp_return</a></li>\n<li><a href=\"https://www.webpurify.com/documentation/methods/addtoblacklist/\" rel=\"nofollow\">add_to_blacklist</a></li>\n<li><a href=\"https://www.webpurify.com/documentation/methods/addtowhitelist/\" rel=\"nofollow\">add_to_whitelist</a></li>\n<li><a href=\"https://www.webpurify.com/documentation/methods/removefromblacklist/\" rel=\"nofollow\">remove_from_blacklist</a></li>\n<li><a href=\"https://www.webpurify.com/documentation/methods/removefromwhitelist/\" rel=\"nofollow\">remove_from_whitelist</a></li>\n<li><a href=\"https://www.webpurify.com/documentation/methods/getblacklist/\" rel=\"nofollow\">get_blacklist</a></li>\n<li><a href=\"https://www.webpurify.com/documentation/methods/getwhitelist/\" rel=\"nofollow\">get_whitelist</a></li>\n</ul>\n<dl>\n<dt><strong>Note:</strong></dt>\n<dd><p>you should be able to set most of the options in the function call except for format. Format is determined at WordPurify\ncreation. In this example, <cite>rsp=1</cite> will give us the response time and <cite>slink=1</cite> will tell WebPurify to flag urls:</p>\n<pre>purify.check('Some nice words', rsp=1, slink=1)\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"imagepurify-methods\">\n<h2>ImagePurify Methods</h2>\n<p>Just like with WordPurify, once setup, you can call the ImagePurify Methods.</p>\n<pre>out = imgpurify.img_account()\n</pre>\n<p>The following ImagePurify methods are included:</p>\n<ul>\n<li><a href=\"https://www.webpurify.com/image-moderation/documentation/methods/imgcheck/\" rel=\"nofollow\">img_check</a></li>\n<li><a href=\"https://www.webpurify.com/image-moderation/documentation/methods/imgstatus/\" rel=\"nofollow\">img_status</a></li>\n<li><a href=\"https://www.webpurify.com/image-moderation/documentation/methods/imgaccount/\" rel=\"nofollow\">img_account</a></li>\n</ul>\n</div>\n<div id=\"videopurify\">\n<h2>VideoPurify</h2>\n<p>VideoPurify works in much the same way as ImagePurify.</p>\n<pre>out = vidpurify.vid_account()\n</pre>\n<p>The following ImagePurify methods are included:</p>\n<ul>\n<li><a href=\"https://www.webpurify.com/video-moderation/documentation/methods/vidcheck/\" rel=\"nofollow\">vid_check</a></li>\n<li><a href=\"https://www.webpurify.com/video-moderation/documentation/methods/vidstatus/\" rel=\"nofollow\">vid_status</a></li>\n<li><a href=\"https://www.webpurify.com/video-moderation/documentation/methods/vidaccount/\" rel=\"nofollow\">vid_account</a></li>\n</ul>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>We have written some basic tests for python 2.7 and python 3.</p>\n</div>\n\n          </div>"}, "last_serial": 5800998, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "24c04e4c43227015a6fb3ae4dffdfe2e", "sha256": "7bcd00fd76356242304d1d39e1507f30c577c23eb4ad14a260c8ffc38070b0f3"}, "downloads": -1, "filename": "python_purify-1.0.0.tar.gz", "has_sig": false, "md5_digest": "24c04e4c43227015a6fb3ae4dffdfe2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2581, "upload_time": "2015-11-17T23:48:32", "upload_time_iso_8601": "2015-11-17T23:48:32.393662Z", "url": "https://files.pythonhosted.org/packages/03/98/a7b0d1ae01f06ffdd191b2e2e9d258cef8ae9006e3b203f15510ebde0f85/python_purify-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b1303ff537c37feacebcf6b86078c442", "sha256": "3f8686c4dbbeca7a1979fba893d8dd0d8d15a18345699b4a51c23d6c6303e6c5"}, "downloads": -1, "filename": "python_purify-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b1303ff537c37feacebcf6b86078c442", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2776, "upload_time": "2015-11-28T00:28:52", "upload_time_iso_8601": "2015-11-28T00:28:52.553496Z", "url": "https://files.pythonhosted.org/packages/f1/b2/4feec7f7376bb0c97670c5307ac040fe652a542f128d9f0d3c0825ffe489/python_purify-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "7b450352d303d0986fd232da0fcadf40", "sha256": "a2618a801da41fa5b4596a2d94db61b33be8c939f3c2fd8261b302590572496b"}, "downloads": -1, "filename": "python_purify-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7b450352d303d0986fd232da0fcadf40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3010, "upload_time": "2016-03-17T23:45:50", "upload_time_iso_8601": "2016-03-17T23:45:50.686935Z", "url": "https://files.pythonhosted.org/packages/45/f4/c4f5ccc09a256b9ffbc94041ae4ea984568914698c94f125a41a481dd164/python_purify-1.1.0.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "9750259cf1dd006d221e573f20996d37", "sha256": "c6c6f69563b6007e7ddac18faeb80ed3912c39d8886f5736a78de7aea11a0458"}, "downloads": -1, "filename": "python_purify-1.2.2.tar.gz", "has_sig": false, "md5_digest": "9750259cf1dd006d221e573f20996d37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4916, "upload_time": "2019-04-05T05:55:08", "upload_time_iso_8601": "2019-04-05T05:55:08.466788Z", "url": "https://files.pythonhosted.org/packages/29/19/505a62b3db48324858455d762aa9fee725a93fc4fb4ef0cee406ed387abd/python_purify-1.2.2.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "bf824a2ea9f7b2a0c8238f56e28fb650", "sha256": "b7506ec69ee25edb0d4cc48ee3e29c51d4259d3dff8cf2539d14a4c007642ddc"}, "downloads": -1, "filename": "python_purify-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bf824a2ea9f7b2a0c8238f56e28fb650", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6361, "upload_time": "2019-09-08T23:10:34", "upload_time_iso_8601": "2019-09-08T23:10:34.948036Z", "url": "https://files.pythonhosted.org/packages/34/95/e9418dfcc33e16f7116934a83e0034b76b8b8a0e168fc61572af84fbc942/python_purify-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8635194d23670e98f7276a2301c903f9", "sha256": "abf6be0e8403fdeba62553c9cd9a3f0ffd5cce1a58db170a62599c02f5cc9a29"}, "downloads": -1, "filename": "python_purify-2.0.1.tar.gz", "has_sig": false, "md5_digest": "8635194d23670e98f7276a2301c903f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4980, "upload_time": "2019-09-08T23:10:36", "upload_time_iso_8601": "2019-09-08T23:10:36.679007Z", "url": "https://files.pythonhosted.org/packages/42/b3/3e4c6ea3a65b71236caec0dd25ad95e429ac90b79c312fb6e776a67f0ed9/python_purify-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bf824a2ea9f7b2a0c8238f56e28fb650", "sha256": "b7506ec69ee25edb0d4cc48ee3e29c51d4259d3dff8cf2539d14a4c007642ddc"}, "downloads": -1, "filename": "python_purify-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bf824a2ea9f7b2a0c8238f56e28fb650", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6361, "upload_time": "2019-09-08T23:10:34", "upload_time_iso_8601": "2019-09-08T23:10:34.948036Z", "url": "https://files.pythonhosted.org/packages/34/95/e9418dfcc33e16f7116934a83e0034b76b8b8a0e168fc61572af84fbc942/python_purify-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8635194d23670e98f7276a2301c903f9", "sha256": "abf6be0e8403fdeba62553c9cd9a3f0ffd5cce1a58db170a62599c02f5cc9a29"}, "downloads": -1, "filename": "python_purify-2.0.1.tar.gz", "has_sig": false, "md5_digest": "8635194d23670e98f7276a2301c903f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4980, "upload_time": "2019-09-08T23:10:36", "upload_time_iso_8601": "2019-09-08T23:10:36.679007Z", "url": "https://files.pythonhosted.org/packages/42/b3/3e4c6ea3a65b71236caec0dd25ad95e429ac90b79c312fb6e776a67f0ed9/python_purify-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:53 2020"}