{"info": {"author": "Andrew Bentley", "author_email": "andrew.t.bentley@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5"], "description": "Postgres Elastic File System\n============================\n\nEasily and instantaneously attach read only datasets to multiple postgres instances using AWS EFS.\n\n\nUsage\n-----\n\nInstall pefs:\n\n.. code-block::\n\n  pip install pefs\n\n\nCreate some date in a local postgres instance:\n\n.. code-block::\n\n  echo \"CREATE TABLE test (id int, value varchar); INSERT INTO test VALUES (1, 'test');\" | psql mydb\n\nAttach the EFS volume to `/mnt/efs` (or elsewhere), then use pefs to clone the database to the EFS:\n\n.. code-block::\n\n  pefs clone mydb /mnt/efs\n\nOn a different machine, mount the EFS volume and link the local postgres instance to it:\n\n.. code-block::\n\n  pefs link mynewdb /mnt/root\n  echo \"SELECT * FROM test\" | psql mynewdb\n\n\nWarning\n-------\n\nPefs will shutdown postgres servers and issue file cache flushes. Pefs is an experiment.\n\n\nHow it works\n------------\n\nCloning a database works by shutting down the postgres server and doing a file cache flush to write all data to disk. The postgres server is started back up and queried to determine all the tables in a database and where all those page files are located. The page files are copied on the EFS volume along with the DDL generated by `pg_dump`.\n\nLinking a database works by taking all the DDLs on the EFS volume and applying them on the local postgres server, the paths to the empty page files are noted. The postgres server is shutdown and another file cache flush is performed. The empty page files are deleted and replaced with symlinks onto the EFS volume. The postgres server is started up again.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/atbentley/postgres-efs/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "postgres-efs", "package_url": "https://pypi.org/project/postgres-efs/", "platform": "any", "project_url": "https://pypi.org/project/postgres-efs/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/atbentley/postgres-efs/"}, "release_url": "https://pypi.org/project/postgres-efs/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Store Postgres databases on Amazon elastic file systems.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Easily and instantaneously attach read only datasets to multiple postgres instances using AWS EFS.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Install pefs:</p>\n<pre>pip install pefs\n</pre>\n<p>Create some date in a local postgres instance:</p>\n<pre>echo \"CREATE TABLE test (id int, value varchar); INSERT INTO test VALUES (1, 'test');\" | psql mydb\n</pre>\n<p>Attach the EFS volume to <cite>/mnt/efs</cite> (or elsewhere), then use pefs to clone the database to the EFS:</p>\n<pre>pefs clone mydb /mnt/efs\n</pre>\n<p>On a different machine, mount the EFS volume and link the local postgres instance to it:</p>\n<pre>pefs link mynewdb /mnt/root\necho \"SELECT * FROM test\" | psql mynewdb\n</pre>\n</div>\n<div id=\"warning\">\n<h2>Warning</h2>\n<p>Pefs will shutdown postgres servers and issue file cache flushes. Pefs is an experiment.</p>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>Cloning a database works by shutting down the postgres server and doing a file cache flush to write all data to disk. The postgres server is started back up and queried to determine all the tables in a database and where all those page files are located. The page files are copied on the EFS volume along with the DDL generated by <cite>pg_dump</cite>.</p>\n<p>Linking a database works by taking all the DDLs on the EFS volume and applying them on the local postgres server, the paths to the empty page files are noted. The postgres server is shutdown and another file cache flush is performed. The empty page files are deleted and replaced with symlinks onto the EFS volume. The postgres server is started up again.</p>\n</div>\n\n          </div>"}, "last_serial": 2201496, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 02:51:21 2020"}