{"info": {"author": "thautwarm", "author_email": "twshere@outlook.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "Linq.py\n=======\n\n|Build Status| |License| |codecov| |Coverage Status| |PyPI version|\n\nInstall\n-------\n\n::\n\n    pip install -U Linq\n\nAdditional: Some magic here: `Mix Linq with\nPipe <https://github.com/Xython/Linq.py/blob/master/using_pipe.md>`__\n\nHere is an example to get top 10 frequent pixels in a picture.\n\n.. code:: python\n\n\n    from linq import Flow\n    import numpy as np\n\n    def most_frequent(arr: np.ndarray) -> np.ndarray:\n        return  Flow(arr.flatten())                     \\\n                        .GroupBy(lambda _: _)           \\\n                        .Then(lambda x: x.items())      \\\n                        .Map(lambda k, v: (k, len(v)))  \\\n                        .Sorted(by=lambda _, v: -v)     \\\n                        .Take(10)                       \\\n                        .Map(lambda k, _: k)            \\\n                        .ToList()                       \\\n                        .Then(np.array).Unboxed()\n\nAbout Linq\n----------\n\n| The well-known EDSL in .NET, ``Language Integrated Query``, in my\n  opinion, is one of the best design in .NET environment.\n| Here is an example of C# Linq.\n\n.. code:: c#\n\n    // Calculate MSE loss.\n    /// <param name=\"Prediction\"> the prediction of the neuron network</param>\n    /// <param name=\"Expected\"> the expected target of the neuron network</param>\n\n    Prediction.Zip(Expected, (pred, expected)=> Math.Square(pred-expected)).Average()\n\nIt's so human readable and it doesn't cost much.\n\n-  Reference:\n\n   -  Microsoft .NET general introduction => `LINQ: .NET\n      Language-Integrated\n      Query <https://msdn.microsoft.com/en-us/library/bb308959.aspx>`__.\n   -  Wikipedia => `Language Integrated\n      Query <https://en.wikipedia.org/wiki/Language_Integrated_Query>`__.\n\nAnd there are so many scenes very awkward to Python programmer, using\n``Linq`` might help a lot.\n\nAwkward Scenes in Python\n------------------------\n\n.. code:: python\n\n\n    seq1 = range(100)\n    seq2 = range(100, 200)\n    zipped = zip(seq1, seq2)\n    mapped = map(lambda ab: ab[0] / ab[1], zipped)\n    grouped = dict();\n    group_fn = lambda x: x // 0.2\n    for e in mapped:\n        group_id = group_fn(e)\n        if group_id not in grouped:\n            grouped[group_id] = [e]\n            continue\n        grouped[group_id].append(e)\n    for e in grouped.items():\n        print(e)\n\nThe codes seems to be too long...\n\nNow we extract the function ``group_by``:\n\n.. code:: python\n\n\n    def group_by(f, container):\n        grouped = dict()\n        for e in container:\n            group_id = f(e)\n            if group_id not in grouped:\n                grouped[group_id] = [e]\n                continue\n            grouped[group_id].append(e)\n        return grouped\n    res = group_by(lambda x: x//0.2, map(lambda ab[0]/ab[1], zip(seq1, seq2)))\n\nOkay, it's not at fault, however, it makes me upset \u2014\u2014 why do I have to\nwrite these ugly codes?\n\n**Now, let us try Linq!**\n\n.. code:: python\n\n\n    from linq import Flow, extension_std\n    seq = Flow(range(100))\n    res = seq.Zip(range(100, 200)).Map(lambda fst, snd : fst/snd).GroupBy(lambda num: num//0.2).Unboxed()\n\nHow does `Linq.py <https://github.com/Xython/Linq.py>`__ work?\n--------------------------------------------------------------\n\n| There is a core class object, ``linq.core.flow.Flow``, which just has\n  one member ``stream``.\n| When you want to get a specific extension method from ``Flow`` object,\n  the ``type`` of its ``stream`` member will be used to search whether\n  the extension method exists.\n| In other words, extension methods are binded with the type(precisely,\n  ``{type.__module__}.{type.__name__}``).\n\n.. code:: python\n\n\n    class Flow:\n        __slots__ = ['stream']\n\n        def __init__(self, sequence):\n            self.stream = sequence\n\n        def __getattr__(self, k):\n            for cls in self.stream.__class__.__mro__:\n                namespace = Extension['{}.{}'.format(cls.__module__, cls.__name__)]\n                if k in namespace:\n                    return partial(namespace[k], self)\n            raise NameError(\n                \"No extension method named `{}` for {}.\".format(\n                    k, '{}.{}'.format(object.__module__, object.__name__)))\n\n        def __str__(self):\n            return self.stream.__str__()\n\n        def __repr__(self):\n            return self.__str__()\n\nExtension Method\n----------------\n\nHere are three methods for you to do so.\n\n-  Firstly, you can use ``extension_std`` to add extension methods for\n   all Flow objects.\n\n-  Next, you use ``extension_class(cls: type)`` to add extension methods\n   for all Flow objects whose member ``stream``'s type is named\n   ``{cls.__module}.{cls.__name__}``.\n\n-  Finally, you can use\n   ``extension_class(cls_name: str,  of_module='builtins')`` to add\n   extension methods for all Flow objects whose member ``stream``'s type\n   is named is named ``{of_module}.{cls_name}``.\n\n(This way to make extension methods is for the **implicit types** in\nPython, each of which cannot be got except from its instances' meta\nmember ``__class__``.)\n\n.. code:: python\n\n\n    @extension_std  # For all Flow objects\n    def Add(self, i):\n        return Flow(self.stream + (i.stream if isinstance(i, Flow) else i)))\n\n    @extension_class(int) # Just for type `int`\n    def Add(self, i):\n        return Flow(self.stream + (i.stream if isinstance(i, Flow) else i)))\n\n    @extension_class_name('int',  of_module=int.__module__) # Also for type `int`.\n    def Add(self, i):\n        return Flow(self.stream + (i.stream if isinstance(i, Flow) else i)))\n\nDocuments of Standard Extension Methods\n---------------------------------------\n\nNote: Docs haven't been finished yet.\n\n-  General(can be used by all Flow objects)\n\n   -  `Unboxed <https://github.com/Xython/Linq.py/blob/master/docs/general.md#unboxed>`__\n   -  `Sum <https://github.com/Xython/Linq.py/blob/master/docs/general.md#sum>`__\n   -  `Enum <https://github.com/Xython/Linq.py/blob/master/docs/general.md#enum>`__\n   -  `Map <https://github.com/Xython/Linq.py/blob/master/docs/general.md#map>`__\n   -  `Reduce <https://github.com/Xython/Linq.py/blob/master/docs/general.md#reduce>`__\n   -  `Then <https://github.com/Xython/Linq.py/blob/master/docs/general.md#then>`__\n   -  `Each <https://github.com/Xython/Linq.py/blob/master/docs/general.md#each>`__\n   -  `Aggregate <https://github.com/Xython/Linq.py/blob/master/docs/general.md#aggregate>`__\n   -  `Zip <https://github.com/Xython/Linq.py/blob/master/docs/general.md#zip>`__\n   -  `Sorted <https://github.com/Xython/Linq.py/blob/master/docs/general.md#sorted>`__\n   -  `ArgSorted <https://github.com/Xython/Linq.py/blob/master/docs/general.md#argsorted>`__\n   -  `Group <https://github.com/Xython/Linq.py/blob/master/docs/general.md#group>`__\n   -  `GroupBy <https://github.com/Xython/Linq.py/blob/master/docs/general.md#groupby>`__\n   -  `Take <https://github.com/Xython/Linq.py/blob/master/docs/general.md#take>`__\n   -  `TakeWhile <https://github.com/Xython/Linq.py/blob/master/docs/general.md#takewhile>`__\n   -  `Drop\\|Skip <https://github.com/Xython/Linq.py/blob/master/docs/general.md#drop%7Cskip>`__\n   -  `Concat <https://github.com/Xython/Linq.py/blob/master/docs/general.md#concat>`__\n   -  `ToList <https://github.com/Xython/Linq.py/blob/master/docs/general.md#tolist>`__\n   -  `ToTuple <https://github.com/Xython/Linq.py/blob/master/docs/general.md#totuple>`__\n   -  `ToDict <https://github.com/Xython/Linq.py/blob/master/docs/general.md#todict>`__\n   -  `ToSet <https://github.com/Xython/Linq.py/blob/master/docs/general.md#toset>`__\n   -  `All <https://github.com/Xython/Linq.py/blob/master/docs/general.md#all>`__\n   -  `Any <https://github.com/Xython/Linq.py/blob/master/docs/general.md#any>`__\n\n-  List\n\n   -  `Extended <https://github.com/Xython/Linq.py/blob/master/docs/list.md#extended>`__\n   -  `Extend <https://github.com/Xython/Linq.py/blob/master/docs/list.md#extend>`__\n   -  `Sort <https://github.com/Xython/Linq.py/blob/master/docs/list.md#sort>`__\n   -  `Reversed <https://github.com/Xython/Linq.py/blob/master/docs/list.md#reversed>`__\n   -  `Reverse <https://github.com/Xython/Linq.py/blob/master/docs/list.md#reverse>`__\n\n-  Set\n\n   -  `Intersects <https://github.com/Xython/Linq.py/blob/master/docs/set.md#intersects>`__\n   -  `Union <https://github.com/Xython/Linq.py/blob/master/docs/set.md#union>`__\n\nHow to Contribute\n-----------------\n\n-  Design the `standard\n   library <https://github.com/Xython/Linq.py/tree/master/linq/standard>`__\n   for `Linq.py <https://github.com/Xython/Linq.py>`__.\n\n-  Write documents for the standard library and tutorials about how to\n   use `Linq.py <https://github.com/Xython/Linq.py>`__.\n\n-  Join `LinqPy Room <https://gitter.im/LinqPy/Lobby>`__ to discuss\n   about any aspects of `Linq.py <https://github.com/Xython/Linq.py>`__.\n\nFeel free to pull requests here.\n\n.. |Build Status| image:: https://travis-ci.org/Xython/Linq.py.svg?branch=master\n   :target: https://travis-ci.org/Xython/Linq.py\n.. |License| image:: https://img.shields.io/badge/license-MIT-yellow.svg\n   :target: https://github.com/Xython/Linq.py/blob/master/LICENSE\n.. |codecov| image:: https://codecov.io/gh/Xython/Linq.py/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/Xython/Linq.py\n.. |Coverage Status| image:: https://coveralls.io/repos/github/Xython/Linq.py/badge.svg?branch=master\n   :target: https://coveralls.io/github/Xython/Linq.py?branch=master\n.. |PyPI version| image:: https://img.shields.io/pypi/v/Linq.svg\n   :target: https://pypi.python.org/pypi/Linq\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thautwarm/Linq.py/", "keywords": "Linq", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Linq", "package_url": "https://pypi.org/project/Linq/", "platform": "", "project_url": "https://pypi.org/project/Linq/", "project_urls": {"Homepage": "https://github.com/thautwarm/Linq.py/"}, "release_url": "https://pypi.org/project/Linq/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "Language Integrated Query for Python", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/Xython/Linq.py\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a4e2a239998894121167a3008cbb9c0a45e2269/68747470733a2f2f7472617669732d63692e6f72672f587974686f6e2f4c696e712e70792e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://github.com/Xython/Linq.py/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ede485ee1830ab55be8e2afd1d1af1291ab13b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d79656c6c6f772e737667\"></a> <a href=\"https://codecov.io/gh/Xython/Linq.py\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0cded565c6029fade206c6bf3340f753bdcfdc71/68747470733a2f2f636f6465636f762e696f2f67682f587974686f6e2f4c696e712e70792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://coveralls.io/github/Xython/Linq.py?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65cb6101a37ece38662b870b17f8913ebb2df086/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f587974686f6e2f4c696e712e70792f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/Linq\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9fc52f1cd0d0964a252c72d2c16b06d9d5a2cf2b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f4c696e712e737667\"></a></p>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install -U Linq\n</pre>\n<p>Additional: Some magic here: <a href=\"https://github.com/Xython/Linq.py/blob/master/using_pipe.md\" rel=\"nofollow\">Mix Linq with\nPipe</a></p>\n<p>Here is an example to get top 10 frequent pixels in a picture.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">linq</span> <span class=\"kn\">import</span> <span class=\"n\">Flow</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">most_frequent</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span>  <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">())</span>                     \\\n                    <span class=\"o\">.</span><span class=\"n\">GroupBy</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">)</span>           \\\n                    <span class=\"o\">.</span><span class=\"n\">Then</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>      \\\n                    <span class=\"o\">.</span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)))</span>  \\\n                    <span class=\"o\">.</span><span class=\"n\">Sorted</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">v</span><span class=\"p\">)</span>     \\\n                    <span class=\"o\">.</span><span class=\"n\">Take</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>                       \\\n                    <span class=\"o\">.</span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">k</span><span class=\"p\">)</span>            \\\n                    <span class=\"o\">.</span><span class=\"n\">ToList</span><span class=\"p\">()</span>                       \\\n                    <span class=\"o\">.</span><span class=\"n\">Then</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">Unboxed</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"about-linq\">\n<h2>About Linq</h2>\n<div>\n<div>The well-known EDSL in .NET, <tt>Language Integrated Query</tt>, in my\nopinion, is one of the best design in .NET environment.</div>\n<div>Here is an example of C# Linq.</div>\n</div>\n<pre><span class=\"c1\">// Calculate MSE loss.\n/// &lt;param name=\"Prediction\"&gt; the prediction of the neuron network&lt;/param&gt;\n/// &lt;param name=\"Expected\"&gt; the expected target of the neuron network&lt;/param&gt;\n</span>\n<span class=\"n\">Prediction</span><span class=\"p\">.</span><span class=\"n\">Zip</span><span class=\"p\">(</span><span class=\"n\">Expected</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">)=&gt;</span> <span class=\"n\">Math</span><span class=\"p\">.</span><span class=\"n\">Square</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">-</span><span class=\"n\">expected</span><span class=\"p\">)).</span><span class=\"n\">Average</span><span class=\"p\">()</span>\n</pre>\n<p>It\u2019s so human readable and it doesn\u2019t cost much.</p>\n<ul>\n<li>Reference:<ul>\n<li>Microsoft .NET general introduction =&gt; <a href=\"https://msdn.microsoft.com/en-us/library/bb308959.aspx\" rel=\"nofollow\">LINQ: .NET\nLanguage-Integrated\nQuery</a>.</li>\n<li>Wikipedia =&gt; <a href=\"https://en.wikipedia.org/wiki/Language_Integrated_Query\" rel=\"nofollow\">Language Integrated\nQuery</a>.</li>\n</ul>\n</li>\n</ul>\n<p>And there are so many scenes very awkward to Python programmer, using\n<tt>Linq</tt> might help a lot.</p>\n</div>\n<div id=\"awkward-scenes-in-python\">\n<h2>Awkward Scenes in Python</h2>\n<pre><span class=\"n\">seq1</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">seq2</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">seq1</span><span class=\"p\">,</span> <span class=\"n\">seq2</span><span class=\"p\">)</span>\n<span class=\"n\">mapped</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">ab</span><span class=\"p\">:</span> <span class=\"n\">ab</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">ab</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">zipped</span><span class=\"p\">)</span>\n<span class=\"n\">grouped</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">();</span>\n<span class=\"n\">group_fn</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">//</span> <span class=\"mf\">0.2</span>\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">mapped</span><span class=\"p\">:</span>\n    <span class=\"n\">group_id</span> <span class=\"o\">=</span> <span class=\"n\">group_fn</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">group_id</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">grouped</span><span class=\"p\">:</span>\n        <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"n\">group_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]</span>\n        <span class=\"k\">continue</span>\n    <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"n\">group_id</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">grouped</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<p>The codes seems to be too long\u2026</p>\n<p>Now we extract the function <tt>group_by</tt>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">group_by</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">container</span><span class=\"p\">):</span>\n    <span class=\"n\">grouped</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">container</span><span class=\"p\">:</span>\n        <span class=\"n\">group_id</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">group_id</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">grouped</span><span class=\"p\">:</span>\n            <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"n\">group_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"p\">]</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">grouped</span><span class=\"p\">[</span><span class=\"n\">group_id</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">grouped</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">//</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">ab</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"n\">ab</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">seq1</span><span class=\"p\">,</span> <span class=\"n\">seq2</span><span class=\"p\">)))</span>\n</pre>\n<p>Okay, it\u2019s not at fault, however, it makes me upset \u2014\u2014 why do I have to\nwrite these ugly codes?</p>\n<p><strong>Now, let us try Linq!</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">linq</span> <span class=\"kn\">import</span> <span class=\"n\">Flow</span><span class=\"p\">,</span> <span class=\"n\">extension_std</span>\n<span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">seq</span><span class=\"o\">.</span><span class=\"n\">Zip</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">fst</span><span class=\"p\">,</span> <span class=\"n\">snd</span> <span class=\"p\">:</span> <span class=\"n\">fst</span><span class=\"o\">/</span><span class=\"n\">snd</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GroupBy</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"n\">num</span><span class=\"o\">//</span><span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">Unboxed</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"how-does-linq-py-work\">\n<h2>How does <a href=\"https://github.com/Xython/Linq.py\" rel=\"nofollow\">Linq.py</a> work?</h2>\n<div>\n<div>There is a core class object, <tt>linq.core.flow.Flow</tt>, which just has\none member <tt>stream</tt>.</div>\n<div>When you want to get a specific extension method from <tt>Flow</tt> object,\nthe <tt>type</tt> of its <tt>stream</tt> member will be used to search whether\nthe extension method exists.</div>\n<div>In other words, extension methods are binded with the type(precisely,\n<tt><span class=\"pre\">{type.__module__}.{type.__name__}</span></tt>).</div>\n</div>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Flow</span><span class=\"p\">:</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'stream'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sequence</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">sequence</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"bp\">cls</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__mro__</span><span class=\"p\">:</span>\n            <span class=\"n\">namespace</span> <span class=\"o\">=</span> <span class=\"n\">Extension</span><span class=\"p\">[</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)]</span>\n            <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">namespace</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NameError</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"No extension method named `</span><span class=\"si\">{}</span><span class=\"s2\">` for </span><span class=\"si\">{}</span><span class=\"s2\">.\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"fm\">__str__</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__str__</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"extension-method\">\n<h2>Extension Method</h2>\n<p>Here are three methods for you to do so.</p>\n<ul>\n<li>Firstly, you can use <tt>extension_std</tt> to add extension methods for\nall Flow objects.</li>\n<li>Next, you use <tt>extension_class(cls: type)</tt> to add extension methods\nfor all Flow objects whose member <tt>stream</tt>\u2019s type is named\n<tt><span class=\"pre\">{cls.__module}.{cls.__name__}</span></tt>.</li>\n<li>Finally, you can use\n<tt>extension_class(cls_name: str,\u00a0 <span class=\"pre\">of_module='builtins')</span></tt> to add\nextension methods for all Flow objects whose member <tt>stream</tt>\u2019s type\nis named is named <tt><span class=\"pre\">{of_module}.{cls_name}</span></tt>.</li>\n</ul>\n<p>(This way to make extension methods is for the <strong>implicit types</strong> in\nPython, each of which cannot be got except from its instances\u2019 meta\nmember <tt>__class__</tt>.)</p>\n<pre><span class=\"nd\">@extension_std</span>  <span class=\"c1\"># For all Flow objects</span>\n<span class=\"k\">def</span> <span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">stream</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">Flow</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">i</span><span class=\"p\">)))</span>\n\n<span class=\"nd\">@extension_class</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"c1\"># Just for type `int`</span>\n<span class=\"k\">def</span> <span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">stream</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">Flow</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">i</span><span class=\"p\">)))</span>\n\n<span class=\"nd\">@extension_class_name</span><span class=\"p\">(</span><span class=\"s1\">'int'</span><span class=\"p\">,</span>  <span class=\"n\">of_module</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">)</span> <span class=\"c1\"># Also for type `int`.</span>\n<span class=\"k\">def</span> <span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Flow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">stream</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">Flow</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">i</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"documents-of-standard-extension-methods\">\n<h2>Documents of Standard Extension Methods</h2>\n<p>Note: Docs haven\u2019t been finished yet.</p>\n<ul>\n<li>General(can be used by all Flow objects)<ul>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#unboxed\" rel=\"nofollow\">Unboxed</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#sum\" rel=\"nofollow\">Sum</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#enum\" rel=\"nofollow\">Enum</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#map\" rel=\"nofollow\">Map</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#reduce\" rel=\"nofollow\">Reduce</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#then\" rel=\"nofollow\">Then</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#each\" rel=\"nofollow\">Each</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#aggregate\" rel=\"nofollow\">Aggregate</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#zip\" rel=\"nofollow\">Zip</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#sorted\" rel=\"nofollow\">Sorted</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#argsorted\" rel=\"nofollow\">ArgSorted</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#group\" rel=\"nofollow\">Group</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#groupby\" rel=\"nofollow\">GroupBy</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#take\" rel=\"nofollow\">Take</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#takewhile\" rel=\"nofollow\">TakeWhile</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#drop%7Cskip\" rel=\"nofollow\">Drop|Skip</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#concat\" rel=\"nofollow\">Concat</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#tolist\" rel=\"nofollow\">ToList</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#totuple\" rel=\"nofollow\">ToTuple</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#todict\" rel=\"nofollow\">ToDict</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#toset\" rel=\"nofollow\">ToSet</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#all\" rel=\"nofollow\">All</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/general.md#any\" rel=\"nofollow\">Any</a></li>\n</ul>\n</li>\n<li>List<ul>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/list.md#extended\" rel=\"nofollow\">Extended</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/list.md#extend\" rel=\"nofollow\">Extend</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/list.md#sort\" rel=\"nofollow\">Sort</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/list.md#reversed\" rel=\"nofollow\">Reversed</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/list.md#reverse\" rel=\"nofollow\">Reverse</a></li>\n</ul>\n</li>\n<li>Set<ul>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/set.md#intersects\" rel=\"nofollow\">Intersects</a></li>\n<li><a href=\"https://github.com/Xython/Linq.py/blob/master/docs/set.md#union\" rel=\"nofollow\">Union</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"how-to-contribute\">\n<h2>How to Contribute</h2>\n<ul>\n<li>Design the <a href=\"https://github.com/Xython/Linq.py/tree/master/linq/standard\" rel=\"nofollow\">standard\nlibrary</a>\nfor <a href=\"https://github.com/Xython/Linq.py\" rel=\"nofollow\">Linq.py</a>.</li>\n<li>Write documents for the standard library and tutorials about how to\nuse <a href=\"https://github.com/Xython/Linq.py\" rel=\"nofollow\">Linq.py</a>.</li>\n<li>Join <a href=\"https://gitter.im/LinqPy/Lobby\" rel=\"nofollow\">LinqPy Room</a> to discuss\nabout any aspects of <a href=\"https://github.com/Xython/Linq.py\" rel=\"nofollow\">Linq.py</a>.</li>\n</ul>\n<p>Feel free to pull requests here.</p>\n</div>\n\n          </div>"}, "last_serial": 3679359, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f235026ac32315c62d78010b823e854b", "sha256": "8588f8c1d3d72f6b0f1c65295f7c4f441312a6d5d6ca76cf7350282f337a3130"}, "downloads": -1, "filename": "Linq-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f235026ac32315c62d78010b823e854b", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 11809, "upload_time": "2017-12-25T11:01:01", "upload_time_iso_8601": "2017-12-25T11:01:01.466986Z", "url": "https://files.pythonhosted.org/packages/2c/6a/97e9e9b8b1ccefd08e71d4cdde4b012237cc86bb20883fb0865ad45bdee5/Linq-0.1-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "28bf82c028a9cee3c4b3fdf341942dcd", "sha256": "56875cbe187aa26af399003440546314157f8eeaba5d16837578fb30858615cd"}, "downloads": -1, "filename": "Linq-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "28bf82c028a9cee3c4b3fdf341942dcd", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 11833, "upload_time": "2017-12-26T12:08:20", "upload_time_iso_8601": "2017-12-26T12:08:20.426318Z", "url": "https://files.pythonhosted.org/packages/5b/07/54815f2140143605fd06fcd15be36aef01e2eefe2964d749d13833586689/Linq-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "ca49929ff4a14094bc9fa3fb3556b01c", "sha256": "69474787e91c1cfa3b78589691042f6731b438d77e2ee68f3a3afd618a59ca7c"}, "downloads": -1, "filename": "Linq-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "ca49929ff4a14094bc9fa3fb3556b01c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 11905, "upload_time": "2017-12-26T12:09:29", "upload_time_iso_8601": "2017-12-26T12:09:29.479830Z", "url": "https://files.pythonhosted.org/packages/96/d1/b1fdc2402766412c4e3b875a1533b7bf7e9ba38588822ef83c8d61acc968/Linq-0.1.9-py3-none-any.whl", "yanked": false}], "0.1.9.1": [{"comment_text": "", "digests": {"md5": "b7f754882ff8538fc2b638ce036cf2b3", "sha256": "8fb29e468c4b4f11027b6f17661741840f9b291072af514bf367d83e321c3f57"}, "downloads": -1, "filename": "Linq-0.1.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b7f754882ff8538fc2b638ce036cf2b3", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12283, "upload_time": "2017-12-26T12:30:38", "upload_time_iso_8601": "2017-12-26T12:30:38.288038Z", "url": "https://files.pythonhosted.org/packages/16/2a/9829d74046be7e1aaa4f50061bca90cb970d60341aa3f9595c2deb6c512d/Linq-0.1.9.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d99767a091aeedec4985f6321b683df5", "sha256": "5dab4a73808875680dc1275da20c4aad235134994a677c425019c16ac5a61464"}, "downloads": -1, "filename": "Linq-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d99767a091aeedec4985f6321b683df5", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12224, "upload_time": "2017-12-26T13:01:07", "upload_time_iso_8601": "2017-12-26T13:01:07.545339Z", "url": "https://files.pythonhosted.org/packages/e4/6b/8e7103f12b17048b86d39e6526bb3944aa8569cea4690d9ae43d2b82aad3/Linq-0.2-py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "eb7bc0c4308aa2f68e9cc1b74f0b651c", "sha256": "1278f84cadeae9b2a11033e3e85b0862080b8fec0a33884ff78a29984e06e801"}, "downloads": -1, "filename": "Linq-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "eb7bc0c4308aa2f68e9cc1b74f0b651c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12670, "upload_time": "2017-12-31T08:17:15", "upload_time_iso_8601": "2017-12-31T08:17:15.979541Z", "url": "https://files.pythonhosted.org/packages/a5/4c/4048da114ae82fdd6b2ed0e540e4c491314ac75d4e26872a0e37f930f65d/Linq-0.3-py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "89b12844fe6adc5f8709546eae06f829", "sha256": "aa28fa17e449f5797a363ac8477c100bcb395bc320ac2382ad4501441dabc62c"}, "downloads": -1, "filename": "Linq-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "89b12844fe6adc5f8709546eae06f829", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12708, "upload_time": "2018-03-17T18:47:35", "upload_time_iso_8601": "2018-03-17T18:47:35.357700Z", "url": "https://files.pythonhosted.org/packages/83/3e/365c0230ea96e23fdfc0f444f09aec7536dd6855a8f8fb34b31c4ff3b0f6/Linq-0.3.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "89b12844fe6adc5f8709546eae06f829", "sha256": "aa28fa17e449f5797a363ac8477c100bcb395bc320ac2382ad4501441dabc62c"}, "downloads": -1, "filename": "Linq-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "89b12844fe6adc5f8709546eae06f829", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12708, "upload_time": "2018-03-17T18:47:35", "upload_time_iso_8601": "2018-03-17T18:47:35.357700Z", "url": "https://files.pythonhosted.org/packages/83/3e/365c0230ea96e23fdfc0f444f09aec7536dd6855a8f8fb34b31c4ff3b0f6/Linq-0.3.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:32 2020"}