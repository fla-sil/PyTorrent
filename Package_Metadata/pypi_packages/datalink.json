{"info": {"author": "Stephen Ogilvy", "author_email": "sogilvy@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3.7", "Topic :: Database :: Front-Ends"], "description": "<!--[![PyPI version fury.io](https://badge.fury.io/py/ansicolortags.svg)](https://pypi.python.org/pypi/ansicolortags/)-->\n<!--[![PyPI license](https://img.shields.io/pypi/l/ansicolortags.svg)](https://pypi.python.org/pypi/ansicolortags/)-->\n\n# `datalink`\n`datalink` is a python module that lets you interact with entries of SQL\ndata as if you were simply using dictionaries.\n\nThe module is built on top of `sqlalchemy` and `dataset`, and all SQL\nschemas supported in `sqlalchemy` are supported in `datalink`.\n\nUsing `datalink.factory`, the user creates a new class, each instance of\nwhich is linked to a single entry of data stored in an SQL database.\nPushing changes to this SQL entry is as simple as modifying the\ninstance's attributes.\n\nLoading, saving, unique identification, and database management all\ntake place behind the scenes, so the user doesn't need to worry about\ndatabases at all.\n\n# Installation\n`datalink` is available on the Python Package Index.\n```\npip install datalink\n```\n\n# Tutorial\nA full tutorial is avaiable\n[here](https://github.com/hypernormalisation/datalink/blob/master/doc/tutorial.md).\n\n## Creating datalinks\nIf you've ever used `NameTuple` from the `collections` module, you know\nhow to use `datalink`.\n\nLet's make a template for our data and an instance of that template,\nbacked up to a file-based `sqlite` database.\n\nOur SQL table will have the columns `a`, `b`, and `c` with the defaults\nset in `my_data_fields`.\n\n\n```python\nimport datalink\nmy_data_fields = {'a': 0, 'b': 'a string', 'c': []}  # default entries\nMyClass = datalink.factory('MyClass', 'my_table', my_data_fields,\n                           database='/tmp/my.db')\n\nA = MyClass()    \n```\n    INFO | db created at: sqlite:////tmp/my.db\n    INFO | created table my_table\n    DEBUG | Creating new database entry with id ce267917-6c2e-46d1-bacc-c52affba2d2d.\n\n\nWe can also instantiate data in the instance declaration.\nWe can then use the `data` property to expose a dict containing a map of\nthe column name to value to make sure it has been correctly set.\n\n\n```python\nB = MyClass(a=100, b='a new string')\nB.data\n```\n\n    DEBUG | Creating new database entry with id e2bd9f8c-af49-4188-96c2-b6f4ea771188.\n\n    {'a': 100,\n     'b': 'a new string',\n     'c': [],\n     'id': 'e2bd9f8c-af49-4188-96c2-b6f4ea771188'}\n\n\n\n## Modifying data\nNow let's modify some elements and see what happens. They are accessible\nas properties in `A` as determined by the defaults we gave the factory.\n\n\n\n```python\nA.a = 5\nA.c.append(None)\nprint(A.a, A.c)\n```\n\n    DEBUG | Updating existing database entry for id ce267917-6c2e-46d1-bacc-c52affba2d2d.\n    DEBUG | Updating existing database entry for id ce267917-6c2e-46d1-bacc-c52affba2d2d.\n    5 [None]\n\n\nMultiple updates can be pushed to the SQL database at once with the\n`update` method.\n\n\n\n```python\nA.update(a=1000, c=[1,2,3])\nA.data\n```\n    DEBUG | Updating existing database entry for id ce267917-6c2e-46d1-bacc-c52affba2d2d.\n\n    {'a': 1000,\n     'b': 'a string',\n     'c': [1, 2, 3],\n     'id': 'ce267917-6c2e-46d1-bacc-c52affba2d2d'}\n\n## Loading data\nAs we can see, each new instance of `MyClass` receives a Unique\nUniversal Identifier (UUID), that can be used to easily fetch rows from\nthe database as a positional argument.\n\n\n\n```python\nprint(A.id)\nid_to_load = A.id\ndel A\nC = MyClass(id_to_load)\nC.data\n```\n    'ce267917-6c2e-46d1-bacc-c52affba2d2d'\n\n    DEBUG | Loaded data corresponding to ID: ce267917-6c2e-46d1-bacc-c52affba2d2d\n\n    {'a': 1000,\n     'b': 'a string',\n     'c': [1, 2, 3],\n     'id': 'ce267917-6c2e-46d1-bacc-c52affba2d2d'}\n\n\n\n## User-specified identification\nUsers can also specify their own identifiers in the construction of new\ninstances of MyClass to replace the uuid.\n\nThis can be useful in design patterns that want to store easily\naccessible configuration or metadata.\n\n\n```python\nD = MyClass('myid', a=200, b='some other string', c=[4,5,6])\n```\n\n    DEBUG | Creating new database entry with id myid.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hypernormalisation/datalink", "keywords": "development database sql", "license": "", "maintainer": "", "maintainer_email": "", "name": "datalink", "package_url": "https://pypi.org/project/datalink/", "platform": "", "project_url": "https://pypi.org/project/datalink/", "project_urls": {"Homepage": "https://github.com/hypernormalisation/datalink"}, "release_url": "https://pypi.org/project/datalink/0.1.1/", "requires_dist": ["sqlalchemy", "dataset", "sqlalchemy-utils", "traits"], "requires_python": ">=3.3", "summary": "Create simple interfaces to SQL that make working with data as simple as working with dictionaries.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>datalink</code></h1>\n<p><code>datalink</code> is a python module that lets you interact with entries of SQL\ndata as if you were simply using dictionaries.</p>\n<p>The module is built on top of <code>sqlalchemy</code> and <code>dataset</code>, and all SQL\nschemas supported in <code>sqlalchemy</code> are supported in <code>datalink</code>.</p>\n<p>Using <code>datalink.factory</code>, the user creates a new class, each instance of\nwhich is linked to a single entry of data stored in an SQL database.\nPushing changes to this SQL entry is as simple as modifying the\ninstance's attributes.</p>\n<p>Loading, saving, unique identification, and database management all\ntake place behind the scenes, so the user doesn't need to worry about\ndatabases at all.</p>\n<h1>Installation</h1>\n<p><code>datalink</code> is available on the Python Package Index.</p>\n<pre><code>pip install datalink\n</code></pre>\n<h1>Tutorial</h1>\n<p>A full tutorial is avaiable\n<a href=\"https://github.com/hypernormalisation/datalink/blob/master/doc/tutorial.md\" rel=\"nofollow\">here</a>.</p>\n<h2>Creating datalinks</h2>\n<p>If you've ever used <code>NameTuple</code> from the <code>collections</code> module, you know\nhow to use <code>datalink</code>.</p>\n<p>Let's make a template for our data and an instance of that template,\nbacked up to a file-based <code>sqlite</code> database.</p>\n<p>Our SQL table will have the columns <code>a</code>, <code>b</code>, and <code>c</code> with the defaults\nset in <code>my_data_fields</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datalink</span>\n<span class=\"n\">my_data_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'a string'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>  <span class=\"c1\"># default entries</span>\n<span class=\"n\">MyClass</span> <span class=\"o\">=</span> <span class=\"n\">datalink</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"p\">(</span><span class=\"s1\">'MyClass'</span><span class=\"p\">,</span> <span class=\"s1\">'my_table'</span><span class=\"p\">,</span> <span class=\"n\">my_data_fields</span><span class=\"p\">,</span>\n                           <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/my.db'</span><span class=\"p\">)</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">MyClass</span><span class=\"p\">()</span>    \n</pre>\n<pre><code>INFO | db created at: sqlite:////tmp/my.db\nINFO | created table my_table\nDEBUG | Creating new database entry with id ce267917-6c2e-46d1-bacc-c52affba2d2d.\n</code></pre>\n<p>We can also instantiate data in the instance declaration.\nWe can then use the <code>data</code> property to expose a dict containing a map of\nthe column name to value to make sure it has been correctly set.</p>\n<pre><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">MyClass</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">'a new string'</span><span class=\"p\">)</span>\n<span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">data</span>\n</pre>\n<pre><code>DEBUG | Creating new database entry with id e2bd9f8c-af49-4188-96c2-b6f4ea771188.\n\n{'a': 100,\n 'b': 'a new string',\n 'c': [],\n 'id': 'e2bd9f8c-af49-4188-96c2-b6f4ea771188'}\n</code></pre>\n<h2>Modifying data</h2>\n<p>Now let's modify some elements and see what happens. They are accessible\nas properties in <code>A</code> as determined by the defaults we gave the factory.</p>\n<pre><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"p\">)</span>\n</pre>\n<pre><code>DEBUG | Updating existing database entry for id ce267917-6c2e-46d1-bacc-c52affba2d2d.\nDEBUG | Updating existing database entry for id ce267917-6c2e-46d1-bacc-c52affba2d2d.\n5 [None]\n</code></pre>\n<p>Multiple updates can be pushed to the SQL database at once with the\n<code>update</code> method.</p>\n<pre><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">data</span>\n</pre>\n<pre><code>DEBUG | Updating existing database entry for id ce267917-6c2e-46d1-bacc-c52affba2d2d.\n\n{'a': 1000,\n 'b': 'a string',\n 'c': [1, 2, 3],\n 'id': 'ce267917-6c2e-46d1-bacc-c52affba2d2d'}\n</code></pre>\n<h2>Loading data</h2>\n<p>As we can see, each new instance of <code>MyClass</code> receives a Unique\nUniversal Identifier (UUID), that can be used to easily fetch rows from\nthe database as a positional argument.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"n\">id_to_load</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">id</span>\n<span class=\"k\">del</span> <span class=\"n\">A</span>\n<span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">MyClass</span><span class=\"p\">(</span><span class=\"n\">id_to_load</span><span class=\"p\">)</span>\n<span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">data</span>\n</pre>\n<pre><code>'ce267917-6c2e-46d1-bacc-c52affba2d2d'\n\nDEBUG | Loaded data corresponding to ID: ce267917-6c2e-46d1-bacc-c52affba2d2d\n\n{'a': 1000,\n 'b': 'a string',\n 'c': [1, 2, 3],\n 'id': 'ce267917-6c2e-46d1-bacc-c52affba2d2d'}\n</code></pre>\n<h2>User-specified identification</h2>\n<p>Users can also specify their own identifiers in the construction of new\ninstances of MyClass to replace the uuid.</p>\n<p>This can be useful in design patterns that want to store easily\naccessible configuration or metadata.</p>\n<pre><span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"n\">MyClass</span><span class=\"p\">(</span><span class=\"s1\">'myid'</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">'some other string'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n</pre>\n<pre><code>DEBUG | Creating new database entry with id myid.\n</code></pre>\n\n          </div>"}, "last_serial": 6587471, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "18d1ee906400829d5d73bfca42d5a294", "sha256": "e81ef040e5d87e14190214a50d1f5074674807905a003971f27b66d0898733c1"}, "downloads": -1, "filename": "datalink-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "18d1ee906400829d5d73bfca42d5a294", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 19608, "upload_time": "2020-02-07T09:03:54", "upload_time_iso_8601": "2020-02-07T09:03:54.708541Z", "url": "https://files.pythonhosted.org/packages/29/64/053526144a9326b98f02bba365364ba5cf8d8f33a5cc0238a39f1293a5a6/datalink-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "770660269f2a4e42b29695ba3b8d00ab", "sha256": "5c60eab29828b8e4a5b4d7c349fc5b50406cff90f670d2acf6ef02c6a9669455"}, "downloads": -1, "filename": "datalink-0.1.0.tar.gz", "has_sig": false, "md5_digest": "770660269f2a4e42b29695ba3b8d00ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 8099, "upload_time": "2020-02-07T09:03:57", "upload_time_iso_8601": "2020-02-07T09:03:57.116304Z", "url": "https://files.pythonhosted.org/packages/f4/4a/fb950c9693468d5091650e9f06f665d3c0597a2ff814defa1538bf7cadd9/datalink-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3c53e3a8c53c9d16d635067f161a0784", "sha256": "137abbcfcbfca564cf294f7e879b977c19f1ae2a1d7f9acb9b061063d4b1d66e"}, "downloads": -1, "filename": "datalink-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3c53e3a8c53c9d16d635067f161a0784", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 19614, "upload_time": "2020-02-07T09:05:44", "upload_time_iso_8601": "2020-02-07T09:05:44.037656Z", "url": "https://files.pythonhosted.org/packages/62/45/30aa1b64bbcd9085f770229eb34d6a16119bbf7df12b9601b2de14c9bfdf/datalink-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a04dac976bf438f39b98be0e6dfa281", "sha256": "3d47d83c20d400ee5eb078fe1805b57769b65ed283068e9776f0065e780271ce"}, "downloads": -1, "filename": "datalink-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6a04dac976bf438f39b98be0e6dfa281", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 8077, "upload_time": "2020-02-07T09:05:45", "upload_time_iso_8601": "2020-02-07T09:05:45.528955Z", "url": "https://files.pythonhosted.org/packages/d4/1b/9adc5234138126e10ee09d5192283b4b4510ac09661227d1c30e8a12a54a/datalink-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c53e3a8c53c9d16d635067f161a0784", "sha256": "137abbcfcbfca564cf294f7e879b977c19f1ae2a1d7f9acb9b061063d4b1d66e"}, "downloads": -1, "filename": "datalink-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3c53e3a8c53c9d16d635067f161a0784", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 19614, "upload_time": "2020-02-07T09:05:44", "upload_time_iso_8601": "2020-02-07T09:05:44.037656Z", "url": "https://files.pythonhosted.org/packages/62/45/30aa1b64bbcd9085f770229eb34d6a16119bbf7df12b9601b2de14c9bfdf/datalink-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a04dac976bf438f39b98be0e6dfa281", "sha256": "3d47d83c20d400ee5eb078fe1805b57769b65ed283068e9776f0065e780271ce"}, "downloads": -1, "filename": "datalink-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6a04dac976bf438f39b98be0e6dfa281", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 8077, "upload_time": "2020-02-07T09:05:45", "upload_time_iso_8601": "2020-02-07T09:05:45.528955Z", "url": "https://files.pythonhosted.org/packages/d4/1b/9adc5234138126e10ee09d5192283b4b4510ac09661227d1c30e8a12a54a/datalink-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:20 2020"}