{"info": {"author": "abought", "author_email": "abought@umich.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.8"], "description": "# File Fetcher\n\n## Purpose\n\nMany bioinformatics pipeline tasks rely on large data files, often pre-processed in such a way as to support fast \nlookups. To make libraries re-usable, it should be easy to create the files programmatically, and to download \npre-made versions from a remote server. (rather than spending hours generating data structures on first install).\n\nAdditionally, it should be possible to get the newest versions based on some automated server process.  \n\nThis library abstracts the tasks of locating, downloading, or creating the necessary pieces, as appropriate. \n\n\n## Usage\n```python\nfrom filefetcher import AssetCLI, AssetManager\nfrom filefetcher.exceptions import AssetAlreadyExists\n\n# For routine use, instantiate a manager. It will locate cached copies of asset files. \nmanager = AssetManager('mylib', 'https://downloader-server.example/mylib/')  # site hosts a manifest.json file\nmanager.locate('snp_to_rsid', genome_build='GRCh38')\n\n# If the file has not yet been downloaded, it can be automatically fetched or built (from a known recipe)\nmanager.locate('snp_to_rsid', genome_build='GRCh38', auto_fetch=True, auto_build=True)\n\n# Alternately, the asset can be manually fetched or built as a one-time operation during installation.\nmanager.download('snp_to_rsid', genome_build='GRCh38')\nmanager.build('snp_to_rsid', genome_build='GRCh38')\n\n# The manager can build assets according to pre-defined recipes (a callable that accepts arguments).\ndef a_build_func(manager, item_type, temp_build_folder, **kwargs):\n    # A build function has access to the manager (so it can check for existing files), and returns metadata calculated \n    #   during the build that will be stored as additional asset tags\n    if manager.locate(item_type, auto_build=False, auto_fetch=False, **kwargs):\n        # Raise a special exception class to interrupt the build without performing extra steps\n        raise AssetAlreadyExists\n    # ...do stuff that results in creating a file called filename.txt, and return extra metadata about the file version built\n    return 'filename.txt', {'db_snp_build': 'b153'}\n\nmanager.add_recipe('snp_to_rsid', a_build_func, label='fast rsID lookups', genome_build='GRCh37')\n\n# With an additional helper, your package can expose a CLI to handle these asset operations. \n#   (this is especially useful as a package entrypoint script, so that filefetcher provides a convenient install \n#   experience for your large data assets)\ncli = AssetCLI(manager)\nif __name__ == '__main__':\n   cli.run()\n\n\n\n```\n\n\n\n## Development\nInstall dependencies + unit tests\n\n`pip install -e .[test]`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/abought/filefetcher", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "filefetcher", "package_url": "https://pypi.org/project/filefetcher/", "platform": "", "project_url": "https://pypi.org/project/filefetcher/", "project_urls": {"Bug Reports": "https://github.com/abought/filefetcher/issues", "Homepage": "https://github.com/abought/filefetcher", "Source": "https://github.com/abought/filefetcher/"}, "release_url": "https://pypi.org/project/filefetcher/0.1.2/", "requires_dist": ["coverage ; extra == 'test'", "pytest ; extra == 'test'", "pytest-flake8 ; extra == 'test'"], "requires_python": ">=3.5", "summary": "Find, download, and build versioned assets", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>File Fetcher</h1>\n<h2>Purpose</h2>\n<p>Many bioinformatics pipeline tasks rely on large data files, often pre-processed in such a way as to support fast\nlookups. To make libraries re-usable, it should be easy to create the files programmatically, and to download\npre-made versions from a remote server. (rather than spending hours generating data structures on first install).</p>\n<p>Additionally, it should be possible to get the newest versions based on some automated server process.</p>\n<p>This library abstracts the tasks of locating, downloading, or creating the necessary pieces, as appropriate.</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">filefetcher</span> <span class=\"kn\">import</span> <span class=\"n\">AssetCLI</span><span class=\"p\">,</span> <span class=\"n\">AssetManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">filefetcher.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">AssetAlreadyExists</span>\n\n<span class=\"c1\"># For routine use, instantiate a manager. It will locate cached copies of asset files. </span>\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">AssetManager</span><span class=\"p\">(</span><span class=\"s1\">'mylib'</span><span class=\"p\">,</span> <span class=\"s1\">'https://downloader-server.example/mylib/'</span><span class=\"p\">)</span>  <span class=\"c1\"># site hosts a manifest.json file</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">locate</span><span class=\"p\">(</span><span class=\"s1\">'snp_to_rsid'</span><span class=\"p\">,</span> <span class=\"n\">genome_build</span><span class=\"o\">=</span><span class=\"s1\">'GRCh38'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If the file has not yet been downloaded, it can be automatically fetched or built (from a known recipe)</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">locate</span><span class=\"p\">(</span><span class=\"s1\">'snp_to_rsid'</span><span class=\"p\">,</span> <span class=\"n\">genome_build</span><span class=\"o\">=</span><span class=\"s1\">'GRCh38'</span><span class=\"p\">,</span> <span class=\"n\">auto_fetch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">auto_build</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Alternately, the asset can be manually fetched or built as a one-time operation during installation.</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"s1\">'snp_to_rsid'</span><span class=\"p\">,</span> <span class=\"n\">genome_build</span><span class=\"o\">=</span><span class=\"s1\">'GRCh38'</span><span class=\"p\">)</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"s1\">'snp_to_rsid'</span><span class=\"p\">,</span> <span class=\"n\">genome_build</span><span class=\"o\">=</span><span class=\"s1\">'GRCh38'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The manager can build assets according to pre-defined recipes (a callable that accepts arguments).</span>\n<span class=\"k\">def</span> <span class=\"nf\">a_build_func</span><span class=\"p\">(</span><span class=\"n\">manager</span><span class=\"p\">,</span> <span class=\"n\">item_type</span><span class=\"p\">,</span> <span class=\"n\">temp_build_folder</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># A build function has access to the manager (so it can check for existing files), and returns metadata calculated </span>\n    <span class=\"c1\">#   during the build that will be stored as additional asset tags</span>\n    <span class=\"k\">if</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">locate</span><span class=\"p\">(</span><span class=\"n\">item_type</span><span class=\"p\">,</span> <span class=\"n\">auto_build</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">auto_fetch</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Raise a special exception class to interrupt the build without performing extra steps</span>\n        <span class=\"k\">raise</span> <span class=\"n\">AssetAlreadyExists</span>\n    <span class=\"c1\"># ...do stuff that results in creating a file called filename.txt, and return extra metadata about the file version built</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'filename.txt'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'db_snp_build'</span><span class=\"p\">:</span> <span class=\"s1\">'b153'</span><span class=\"p\">}</span>\n\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">add_recipe</span><span class=\"p\">(</span><span class=\"s1\">'snp_to_rsid'</span><span class=\"p\">,</span> <span class=\"n\">a_build_func</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'fast rsID lookups'</span><span class=\"p\">,</span> <span class=\"n\">genome_build</span><span class=\"o\">=</span><span class=\"s1\">'GRCh37'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># With an additional helper, your package can expose a CLI to handle these asset operations. </span>\n<span class=\"c1\">#   (this is especially useful as a package entrypoint script, so that filefetcher provides a convenient install </span>\n<span class=\"c1\">#   experience for your large data assets)</span>\n<span class=\"n\">cli</span> <span class=\"o\">=</span> <span class=\"n\">AssetCLI</span><span class=\"p\">(</span><span class=\"n\">manager</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n   <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h2>Development</h2>\n<p>Install dependencies + unit tests</p>\n<p><code>pip install -e .[test]</code></p>\n\n          </div>"}, "last_serial": 7069357, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "75a7a5d44d2c3ef86e124fcc45d4febc", "sha256": "b9b59221fdb4826e532e95fc091a30a6065b7e0202a2e57f7f5f0c8e63a774af"}, "downloads": -1, "filename": "filefetcher-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "75a7a5d44d2c3ef86e124fcc45d4febc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 14929, "upload_time": "2020-04-14T17:42:46", "upload_time_iso_8601": "2020-04-14T17:42:46.558273Z", "url": "https://files.pythonhosted.org/packages/93/79/a643c55988e22d43a9d4a16ac27e302792000632748b3d71cca54f323808/filefetcher-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a80802ea413ea2a51c865376c22f8129", "sha256": "4c5b9b7e525905a4f787860c93ba6e1520b2615d4e457e489ae49952475906be"}, "downloads": -1, "filename": "filefetcher-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a80802ea413ea2a51c865376c22f8129", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12752, "upload_time": "2020-04-14T17:42:48", "upload_time_iso_8601": "2020-04-14T17:42:48.925414Z", "url": "https://files.pythonhosted.org/packages/81/ec/6efe5ce95fac7fb6b557e1f934287936c572133622597c662be75819f25c/filefetcher-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a35900e07eaf29fc471c1d0fa6e839bb", "sha256": "285f2c75e8f24af0d57f6a7e4f4009be2a7ce3b86c36af768b68f9661b318bd3"}, "downloads": -1, "filename": "filefetcher-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a35900e07eaf29fc471c1d0fa6e839bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15043, "upload_time": "2020-04-17T17:59:14", "upload_time_iso_8601": "2020-04-17T17:59:14.017566Z", "url": "https://files.pythonhosted.org/packages/18/3a/39d081c729bde23ed132fe15287260b6a52029e5fcee75f5231b01a5cfd2/filefetcher-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d1218cb20ea5bb3e355f346263fcc20", "sha256": "671367fcd6e433efee3ee2078f69065a19dbd0a00b09fb97f19d76e413d3c347"}, "downloads": -1, "filename": "filefetcher-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0d1218cb20ea5bb3e355f346263fcc20", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12833, "upload_time": "2020-04-17T17:59:15", "upload_time_iso_8601": "2020-04-17T17:59:15.070891Z", "url": "https://files.pythonhosted.org/packages/b5/3a/cf35d5d91332ce4c24fbe0d3f1587e7b3e5aa06e1b236b3f829f91458410/filefetcher-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9d9441afb81df38f8555bd755198ed76", "sha256": "5bc1c7bb9079a32f0dd44edecddf9182f90abcd89296d621c1dca3823f11ece0"}, "downloads": -1, "filename": "filefetcher-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9d9441afb81df38f8555bd755198ed76", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15043, "upload_time": "2020-04-21T16:51:31", "upload_time_iso_8601": "2020-04-21T16:51:31.032522Z", "url": "https://files.pythonhosted.org/packages/8f/f7/1575ebe213dcc98465a7fbc5b80199133c0d24b1d19b284aedcd86c23517/filefetcher-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa1fc46a7b843c3bf9b0dcabab867a16", "sha256": "4e13ef679bab1442a9f4043a70769afb27d6022456e3adea4500762047457e1b"}, "downloads": -1, "filename": "filefetcher-0.1.2.tar.gz", "has_sig": false, "md5_digest": "aa1fc46a7b843c3bf9b0dcabab867a16", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12843, "upload_time": "2020-04-21T16:51:32", "upload_time_iso_8601": "2020-04-21T16:51:32.042058Z", "url": "https://files.pythonhosted.org/packages/87/d7/c102fac8b7130bdc9a9705b4a062a7591af3d151d91559d7640d96e4300d/filefetcher-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d9441afb81df38f8555bd755198ed76", "sha256": "5bc1c7bb9079a32f0dd44edecddf9182f90abcd89296d621c1dca3823f11ece0"}, "downloads": -1, "filename": "filefetcher-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9d9441afb81df38f8555bd755198ed76", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15043, "upload_time": "2020-04-21T16:51:31", "upload_time_iso_8601": "2020-04-21T16:51:31.032522Z", "url": "https://files.pythonhosted.org/packages/8f/f7/1575ebe213dcc98465a7fbc5b80199133c0d24b1d19b284aedcd86c23517/filefetcher-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa1fc46a7b843c3bf9b0dcabab867a16", "sha256": "4e13ef679bab1442a9f4043a70769afb27d6022456e3adea4500762047457e1b"}, "downloads": -1, "filename": "filefetcher-0.1.2.tar.gz", "has_sig": false, "md5_digest": "aa1fc46a7b843c3bf9b0dcabab867a16", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12843, "upload_time": "2020-04-21T16:51:32", "upload_time_iso_8601": "2020-04-21T16:51:32.042058Z", "url": "https://files.pythonhosted.org/packages/87/d7/c102fac8b7130bdc9a9705b4a062a7591af3d151d91559d7640d96e4300d/filefetcher-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:35 2020"}