{"info": {"author": "isidentical", "author_email": "isidentical@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Diyanet\n\nPython interface for internal API of Turkey's Presidency of Religious\nAffairs to get prayer times.\n\n## API\n### Units\n- `GeographicUnit`, base class for all geographic units. All units share these members\n    * `idx`: `int` => Internal ID (to use in API)\n    * `name`: `str` => Name of the country\n- `Country`, unit for countries\n- `State`, unit for states (if no states present in given country, this will be same with `Country`)\n    * `country`: `Country` => A link to it's country\n- `Region`, unit for citites/regions\n    * `url`: `str` => URL that points out to prayer times page for that specific region\n    * `state`: `State` => A link to it's state\n    * `country`: `Country` => A link to it's country\n- `PrayerTimes`, unit for prayer times of a day\n    * `fajr`: `time`\n    * `sunrise`: `time`\n    * `dhuhr`: `time`\n    * `asr`: `time`\n    * `maghrib`: `time`\n    * `isha`: `time`\n\n### API\nAll methods described below are members of `Diyanet` class\n- `get_countries`: `() -> Iterator[Country]` => Iterates through all available countries\n- `get_states`: `(country: Country) -> Iterator[State]` => Iterates through all available states\n- `get_regions`: `(state: State) -> Iterator[Region]` => Iterates through all available regions\n- `get_country` / `get_state`/ `get_region` => Takes a `name` (and depending on the context, a geographical unit that covers itself) and returns if it finds something that matches with given name. If there isn't any match, it raises a `ValueError`.\n- `get_times`: `(region: Region) -> PrayerTimes` => Returns prayer times for the current day", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/isidentical/diyanet", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "diyanet", "package_url": "https://pypi.org/project/diyanet/", "platform": "", "project_url": "https://pypi.org/project/diyanet/", "project_urls": {"Homepage": "https://github.com/isidentical/diyanet"}, "release_url": "https://pypi.org/project/diyanet/0.1.0/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Diyanet API", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Diyanet</h1>\n<p>Python interface for internal API of Turkey's Presidency of Religious\nAffairs to get prayer times.</p>\n<h2>API</h2>\n<h3>Units</h3>\n<ul>\n<li><code>GeographicUnit</code>, base class for all geographic units. All units share these members\n<ul>\n<li><code>idx</code>: <code>int</code> =&gt; Internal ID (to use in API)</li>\n<li><code>name</code>: <code>str</code> =&gt; Name of the country</li>\n</ul>\n</li>\n<li><code>Country</code>, unit for countries</li>\n<li><code>State</code>, unit for states (if no states present in given country, this will be same with <code>Country</code>)\n<ul>\n<li><code>country</code>: <code>Country</code> =&gt; A link to it's country</li>\n</ul>\n</li>\n<li><code>Region</code>, unit for citites/regions\n<ul>\n<li><code>url</code>: <code>str</code> =&gt; URL that points out to prayer times page for that specific region</li>\n<li><code>state</code>: <code>State</code> =&gt; A link to it's state</li>\n<li><code>country</code>: <code>Country</code> =&gt; A link to it's country</li>\n</ul>\n</li>\n<li><code>PrayerTimes</code>, unit for prayer times of a day\n<ul>\n<li><code>fajr</code>: <code>time</code></li>\n<li><code>sunrise</code>: <code>time</code></li>\n<li><code>dhuhr</code>: <code>time</code></li>\n<li><code>asr</code>: <code>time</code></li>\n<li><code>maghrib</code>: <code>time</code></li>\n<li><code>isha</code>: <code>time</code></li>\n</ul>\n</li>\n</ul>\n<h3>API</h3>\n<p>All methods described below are members of <code>Diyanet</code> class</p>\n<ul>\n<li><code>get_countries</code>: <code>() -&gt; Iterator[Country]</code> =&gt; Iterates through all available countries</li>\n<li><code>get_states</code>: <code>(country: Country) -&gt; Iterator[State]</code> =&gt; Iterates through all available states</li>\n<li><code>get_regions</code>: <code>(state: State) -&gt; Iterator[Region]</code> =&gt; Iterates through all available regions</li>\n<li><code>get_country</code> / <code>get_state</code>/ <code>get_region</code> =&gt; Takes a <code>name</code> (and depending on the context, a geographical unit that covers itself) and returns if it finds something that matches with given name. If there isn't any match, it raises a <code>ValueError</code>.</li>\n<li><code>get_times</code>: <code>(region: Region) -&gt; PrayerTimes</code> =&gt; Returns prayer times for the current day</li>\n</ul>\n\n          </div>"}, "last_serial": 7095111, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a093eb1083af804270578d096585b907", "sha256": "feb61bf363468c9cea8b2bd63623d2e828515c871f6798a33c3d8db73a432407"}, "downloads": -1, "filename": "diyanet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a093eb1083af804270578d096585b907", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4948, "upload_time": "2020-04-24T18:29:27", "upload_time_iso_8601": "2020-04-24T18:29:27.083257Z", "url": "https://files.pythonhosted.org/packages/50/9c/f83483c0cc2ea2fabd98f5aa9621b123d007ff6d31a259072ed4b1e1d37b/diyanet-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a093eb1083af804270578d096585b907", "sha256": "feb61bf363468c9cea8b2bd63623d2e828515c871f6798a33c3d8db73a432407"}, "downloads": -1, "filename": "diyanet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a093eb1083af804270578d096585b907", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4948, "upload_time": "2020-04-24T18:29:27", "upload_time_iso_8601": "2020-04-24T18:29:27.083257Z", "url": "https://files.pythonhosted.org/packages/50/9c/f83483c0cc2ea2fabd98f5aa9621b123d007ff6d31a259072ed4b1e1d37b/diyanet-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:57 2020"}