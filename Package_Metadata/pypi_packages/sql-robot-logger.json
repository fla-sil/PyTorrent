{"info": {"author": "Adam Hamden", "author_email": "ahamden@usc.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# README\n\nCreates and updates a robot state logging database.\n\nThis program allows you to log information to different topics stored in a database file, extract subsets based on certain condition, as well as converting such selections into pandas dataframes.\n\n## Example \n\n1. Create a config.yml file in the home directory that mirrors the following\n\n         log_info:\n            database_name:\n            robot_id: \n         sql_database:\n            host: \n            password: \n            port: \n            user:\n            \n     * if robot_id is left blank, then one is assigned based on the next available robot_id in the database\n\n1. Create the state logger object and give it a unique id and a database to write to (if left blank, one will automatically be created)\n\n             import robot_logger.robot_logger as rl\n             robot_logger = rl.RobotLogger()\n\n1. Add a topic and its respective data type\n             \n            robot_logger.add_topic(\"test_topic\", int)\n2. Add integer message with the topic and allow for local backup\n            \n            robot_logger.write(\"test_topic\", 1234, str(__file__), True)\n3. Create the database inspector\n\n            import robot_inspector.robot_inspector as ri\n            robot_inspector = ri.SQLInspector()\n    \n4. Generate a query from the log table that match a custom condition\n    \n            query = robot_inspector.get_query(\"log\",\"topic_id = 1\")\n    \n5. Display the list of matches\n\n            print(query)\n6. Generate a pandas data frame from the query\n\n            df = q.get()\n            \n## Run instructions\n> Note, only tested with Python 3\n\n0. Clone the repository\n\n       git clone git@github.com:adamhamden/aws-sql-logger-interface.git\n       \n1. Go in the cloned directory\n\n\t\tcd aws-sql-logger-interface\n\n1. Start a virtual environment\n\n\t\tvirtualenv -p python3 venv\n\t\tsource venv/bin/activate\n\n1. Install the requirements\n\n\t\tpip install -r requirements.txt\n\t\t\n1. Check that the tests run\n\n\t\tpython -m unittest test.py\n\n1. Import and use the module!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adamhamden/sql_robot_logger", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sql-robot-logger", "package_url": "https://pypi.org/project/sql-robot-logger/", "platform": "", "project_url": "https://pypi.org/project/sql-robot-logger/", "project_urls": {"Homepage": "https://github.com/adamhamden/sql_robot_logger"}, "release_url": "https://pypi.org/project/sql-robot-logger/0.1.1/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "A sql robot logger", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>README</h1>\n<p>Creates and updates a robot state logging database.</p>\n<p>This program allows you to log information to different topics stored in a database file, extract subsets based on certain condition, as well as converting such selections into pandas dataframes.</p>\n<h2>Example</h2>\n<ol>\n<li>\n<p>Create a config.yml file in the home directory that mirrors the following</p>\n<pre><code>  log_info:\n     database_name:\n     robot_id: \n  sql_database:\n     host: \n     password: \n     port: \n     user:\n</code></pre>\n<ul>\n<li>if robot_id is left blank, then one is assigned based on the next available robot_id in the database</li>\n</ul>\n</li>\n<li>\n<p>Create the state logger object and give it a unique id and a database to write to (if left blank, one will automatically be created)</p>\n<pre><code>      import robot_logger.robot_logger as rl\n      robot_logger = rl.RobotLogger()\n</code></pre>\n</li>\n<li>\n<p>Add a topic and its respective data type</p>\n<pre><code>     robot_logger.add_topic(\"test_topic\", int)\n</code></pre>\n</li>\n<li>\n<p>Add integer message with the topic and allow for local backup</p>\n<pre><code>     robot_logger.write(\"test_topic\", 1234, str(__file__), True)\n</code></pre>\n</li>\n<li>\n<p>Create the database inspector</p>\n<pre><code>     import robot_inspector.robot_inspector as ri\n     robot_inspector = ri.SQLInspector()\n</code></pre>\n</li>\n<li>\n<p>Generate a query from the log table that match a custom condition</p>\n<pre><code>     query = robot_inspector.get_query(\"log\",\"topic_id = 1\")\n</code></pre>\n</li>\n<li>\n<p>Display the list of matches</p>\n<pre><code>     print(query)\n</code></pre>\n</li>\n<li>\n<p>Generate a pandas data frame from the query</p>\n<pre><code>     df = q.get()\n</code></pre>\n</li>\n</ol>\n<h2>Run instructions</h2>\n<blockquote>\n<p>Note, only tested with Python 3</p>\n</blockquote>\n<ol>\n<li>\n<p>Clone the repository</p>\n<pre><code>git clone git@github.com:adamhamden/aws-sql-logger-interface.git\n</code></pre>\n</li>\n<li>\n<p>Go in the cloned directory</p>\n<pre><code> cd aws-sql-logger-interface\n</code></pre>\n</li>\n<li>\n<p>Start a virtual environment</p>\n<pre><code> virtualenv -p python3 venv\n source venv/bin/activate\n</code></pre>\n</li>\n<li>\n<p>Install the requirements</p>\n<pre><code> pip install -r requirements.txt\n</code></pre>\n</li>\n<li>\n<p>Check that the tests run</p>\n<pre><code> python -m unittest test.py\n</code></pre>\n</li>\n<li>\n<p>Import and use the module!</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 6112927, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ccc49943e2001defd1df41e19c0a6618", "sha256": "210573397cf6e0ec09e0b9bcd3b40f07cb90e685f7b1dc76a2dd6227c8615189"}, "downloads": -1, "filename": "sql_robot_logger-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ccc49943e2001defd1df41e19c0a6618", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5649, "upload_time": "2019-11-10T18:43:10", "upload_time_iso_8601": "2019-11-10T18:43:10.385639Z", "url": "https://files.pythonhosted.org/packages/c1/48/399bc9a9f0e3bf50f456ecf383a05f59cb48f0df97632c3659979624e9e9/sql_robot_logger-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6b278bb1e86c7fbe848417c1318cdfd0", "sha256": "feb75ed232ccb3af74c00788f08359613bf7332b2a4d235ba4da46c1bf7ae412"}, "downloads": -1, "filename": "sql_robot_logger-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6b278bb1e86c7fbe848417c1318cdfd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5665, "upload_time": "2019-11-10T21:27:26", "upload_time_iso_8601": "2019-11-10T21:27:26.485521Z", "url": "https://files.pythonhosted.org/packages/08/aa/670f8a1212b5dfce0d04a46bcc180d518edda84fd28737b0fc73c6c65518/sql_robot_logger-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6b278bb1e86c7fbe848417c1318cdfd0", "sha256": "feb75ed232ccb3af74c00788f08359613bf7332b2a4d235ba4da46c1bf7ae412"}, "downloads": -1, "filename": "sql_robot_logger-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6b278bb1e86c7fbe848417c1318cdfd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5665, "upload_time": "2019-11-10T21:27:26", "upload_time_iso_8601": "2019-11-10T21:27:26.485521Z", "url": "https://files.pythonhosted.org/packages/08/aa/670f8a1212b5dfce0d04a46bcc180d518edda84fd28737b0fc73c6c65518/sql_robot_logger-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:34 2020"}