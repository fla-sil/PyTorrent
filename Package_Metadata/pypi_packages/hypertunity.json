{"info": {"author": "Georgi Dikov", "author_email": "gvdikov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "<div align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/gdikov/hypertunity/master/docs/_static/images/logo.svg?sanitize=true\" width=\"100%\">\n</div>\n\n[![CircleCI](https://img.shields.io/circleci/build/github/gdikov/hypertunity)](https://circleci.com/gh/gdikov/hypertunity)\n[![Documentation Status](https://readthedocs.org/projects/hypertunity/badge/?version=latest)](https://hypertunity.readthedocs.io/en/latest/?badge=latest)\n![GitHub](https://img.shields.io/github/license/gdikov/hypertunity)\n\n## Why Hypertunity\n\nHypertunity is a lightweight, high-level library for hyperparameter optimisation. \nAmong others, it supports:\n * Bayesian optimisation by wrapping [GPyOpt](http://sheffieldml.github.io/GPyOpt/),\n * external or internal objective function evaluation by a scheduler, also compatible with [Slurm](https://slurm.schedmd.com),\n * real-time visualisation of results in [Tensorboard](https://www.tensorflow.org/tensorboard) \n via the [HParams](https://www.tensorflow.org/tensorboard/r2/hyperparameter_tuning_with_hparams) plugin.\n\nFor the full set of features refer to the [documentation](https://hypertunity.readthedocs.io).\n\n## Quick start\n\nDefine the objective function to optimise. For example, it can take the hyperparameters `params` as input and \nreturn a raw value `score` as output:\n\n```python\nimport hypertunity as ht\n\ndef foo(**params) -> float:\n    # do some very costly computations\n    ...\n    return score\n```\n\nTo define the valid ranges for the values of `params` we create a `Domain` object:\n\n```python\ndomain = ht.Domain({\n    \"x\": [-10., 10.],         # continuous variable within the interval [-10., 10.]\n    \"y\": {\"opt1\", \"opt2\"},    # categorical variable from the set {\"opt1\", \"opt2\"}\n    \"z\": set(range(4))        # discrete variable from the set {0, 1, 2, 3}\n})\n```\n\nThen we set up the optimiser:\n\n```python\nbo = ht.BayesianOptimisation(domain=domain)\n```\n\nAnd we run the optimisation for 10 steps. Each result is used to update the optimiser so that informed domain \nsamples are drawn:\n\n```python\nn_steps = 10\nfor i in range(n_steps):\n    samples = bo.run_step(batch_size=2, minimise=True)      # suggest next samples\n    evaluations = [foo(**s.as_dict()) for s in samples]     # evaluate foo\n    bo.update(samples, evaluations)                         # update the optimiser\n```\n\nFinally, we visualise the results in Tensorboard: \n\n```python\nimport hypertunity.reports.tensorboard as tb\n\nresults = tb.Tensorboard(domain=domain, metrics=[\"score\"], logdir=\"path/to/logdir\")\nresults.from_history(bo.history)\n```\n\n## Even quicker start\n\nA high-level wrapper class `Trial` allows for seamless parallel optimisation\nwithout bothering with scheduling jobs, updating optimisers and logging:\n\n```python\ntrial = ht.Trial(objective=foo,\n                 domain=domain,\n                 optimiser=\"bo\",\n                 reporter=\"tensorboard\",\n                 metrics=[\"score\"])\ntrial.run(n_steps, batch_size=2, n_parallel=2)\n```\n\n## Installation\n\n### Using PyPI\nTo install the base version run:\n```bash\npip install hypertunity\n```\nTo use the Tensorboard dashboard, build the docs or run the test suite you will need the following extras:\n```bash\npip install hypertunity[tensorboard,docs,tests]\n```\n\n### From source\nCheckout the latest master and install locally:\n```bash\ngit clone https://github.com/gdikov/hypertunity.git\ncd hypertunity\npip install ./[tensorboard]\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gdikov/hypertunity", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "hypertunity", "package_url": "https://pypi.org/project/hypertunity/", "platform": "", "project_url": "https://pypi.org/project/hypertunity/", "project_urls": {"Homepage": "https://github.com/gdikov/hypertunity"}, "release_url": "https://pypi.org/project/hypertunity/1.0.1/", "requires_dist": ["beautifultable (>=0.7.0)", "gpy (>=1.9.8)", "gpyopt (==1.2.5)", "joblib (>=0.13.2)", "matplotlib (>=3.0)", "numpy (>=1.16)", "tinydb (>=3.13.0)", "dataclasses ; python_version < \"3.7\"", "sphinx (>=2.2.0) ; extra == 'docs'", "sphinx-rtd-theme (>=0.4.3) ; extra == 'docs'", "tensorflow (>=1.14.0) ; extra == 'tensorboard'", "tensorboard (>=1.14.0) ; extra == 'tensorboard'", "pytest (>=4.6.3) ; extra == 'tests'", "pytest-timeout (>=1.3.3) ; extra == 'tests'"], "requires_python": ">=3.6", "summary": "A toolset for distributed black-box hyperparameter optimisation.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4aa350266b718b5d197af7f2b7c6de71e8bd541/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6764696b6f762f687970657274756e6974792f6d61737465722f646f63732f5f7374617469632f696d616765732f6c6f676f2e7376673f73616e6974697a653d74727565\" width=\"100%\">\n</div>\n<p><a href=\"https://circleci.com/gh/gdikov/hypertunity\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/728ff596ac80d2e56828c15dcd9e9e962153ba60/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f6769746875622f6764696b6f762f687970657274756e697479\"></a>\n<a href=\"https://hypertunity.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49dbe5aa46ee402c6d975e30ed1050279cd2abc5/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f687970657274756e6974792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3a56ef40578af5c42ddf7df8419e0219440c89d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6764696b6f762f687970657274756e697479\"></p>\n<h2>Why Hypertunity</h2>\n<p>Hypertunity is a lightweight, high-level library for hyperparameter optimisation.\nAmong others, it supports:</p>\n<ul>\n<li>Bayesian optimisation by wrapping <a href=\"http://sheffieldml.github.io/GPyOpt/\" rel=\"nofollow\">GPyOpt</a>,</li>\n<li>external or internal objective function evaluation by a scheduler, also compatible with <a href=\"https://slurm.schedmd.com\" rel=\"nofollow\">Slurm</a>,</li>\n<li>real-time visualisation of results in <a href=\"https://www.tensorflow.org/tensorboard\" rel=\"nofollow\">Tensorboard</a>\nvia the <a href=\"https://www.tensorflow.org/tensorboard/r2/hyperparameter_tuning_with_hparams\" rel=\"nofollow\">HParams</a> plugin.</li>\n</ul>\n<p>For the full set of features refer to the <a href=\"https://hypertunity.readthedocs.io\" rel=\"nofollow\">documentation</a>.</p>\n<h2>Quick start</h2>\n<p>Define the objective function to optimise. For example, it can take the hyperparameters <code>params</code> as input and\nreturn a raw value <code>score</code> as output:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">hypertunity</span> <span class=\"k\">as</span> <span class=\"nn\">ht</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do some very costly computations</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">score</span>\n</pre>\n<p>To define the valid ranges for the values of <code>params</code> we create a <code>Domain</code> object:</p>\n<pre><span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">ht</span><span class=\"o\">.</span><span class=\"n\">Domain</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">10.</span><span class=\"p\">,</span> <span class=\"mf\">10.</span><span class=\"p\">],</span>         <span class=\"c1\"># continuous variable within the interval [-10., 10.]</span>\n    <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"opt1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"opt2\"</span><span class=\"p\">},</span>    <span class=\"c1\"># categorical variable from the set {\"opt1\", \"opt2\"}</span>\n    <span class=\"s2\">\"z\"</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>        <span class=\"c1\"># discrete variable from the set {0, 1, 2, 3}</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Then we set up the optimiser:</p>\n<pre><span class=\"n\">bo</span> <span class=\"o\">=</span> <span class=\"n\">ht</span><span class=\"o\">.</span><span class=\"n\">BayesianOptimisation</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">domain</span><span class=\"p\">)</span>\n</pre>\n<p>And we run the optimisation for 10 steps. Each result is used to update the optimiser so that informed domain\nsamples are drawn:</p>\n<pre><span class=\"n\">n_steps</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_steps</span><span class=\"p\">):</span>\n    <span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">bo</span><span class=\"o\">.</span><span class=\"n\">run_step</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">minimise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>      <span class=\"c1\"># suggest next samples</span>\n    <span class=\"n\">evaluations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">samples</span><span class=\"p\">]</span>     <span class=\"c1\"># evaluate foo</span>\n    <span class=\"n\">bo</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">,</span> <span class=\"n\">evaluations</span><span class=\"p\">)</span>                         <span class=\"c1\"># update the optimiser</span>\n</pre>\n<p>Finally, we visualise the results in Tensorboard:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">hypertunity.reports.tensorboard</span> <span class=\"k\">as</span> <span class=\"nn\">tb</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">Tensorboard</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"score\"</span><span class=\"p\">],</span> <span class=\"n\">logdir</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/logdir\"</span><span class=\"p\">)</span>\n<span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">from_history</span><span class=\"p\">(</span><span class=\"n\">bo</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"p\">)</span>\n</pre>\n<h2>Even quicker start</h2>\n<p>A high-level wrapper class <code>Trial</code> allows for seamless parallel optimisation\nwithout bothering with scheduling jobs, updating optimisers and logging:</p>\n<pre><span class=\"n\">trial</span> <span class=\"o\">=</span> <span class=\"n\">ht</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"p\">(</span><span class=\"n\">objective</span><span class=\"o\">=</span><span class=\"n\">foo</span><span class=\"p\">,</span>\n                 <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">domain</span><span class=\"p\">,</span>\n                 <span class=\"n\">optimiser</span><span class=\"o\">=</span><span class=\"s2\">\"bo\"</span><span class=\"p\">,</span>\n                 <span class=\"n\">reporter</span><span class=\"o\">=</span><span class=\"s2\">\"tensorboard\"</span><span class=\"p\">,</span>\n                 <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"score\"</span><span class=\"p\">])</span>\n<span class=\"n\">trial</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">n_steps</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n_parallel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<h2>Installation</h2>\n<h3>Using PyPI</h3>\n<p>To install the base version run:</p>\n<pre>pip install hypertunity\n</pre>\n<p>To use the Tensorboard dashboard, build the docs or run the test suite you will need the following extras:</p>\n<pre>pip install hypertunity<span class=\"o\">[</span>tensorboard,docs,tests<span class=\"o\">]</span>\n</pre>\n<h3>From source</h3>\n<p>Checkout the latest master and install locally:</p>\n<pre>git clone https://github.com/gdikov/hypertunity.git\n<span class=\"nb\">cd</span> hypertunity\npip install ./<span class=\"o\">[</span>tensorboard<span class=\"o\">]</span>\n</pre>\n\n          </div>"}, "last_serial": 6523845, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "0aa67e6435ea04da7c0282717b9486ca", "sha256": "fb3c281cd014b5137503192770d590ac364678550d925c5f011e2ddbc457bd1f"}, "downloads": -1, "filename": "hypertunity-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0aa67e6435ea04da7c0282717b9486ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39183, "upload_time": "2019-11-10T19:10:02", "upload_time_iso_8601": "2019-11-10T19:10:02.862602Z", "url": "https://files.pythonhosted.org/packages/10/82/65021cfc31dd4b3203e70e4f1978dc60bedeec94a357528d94cc71934b9a/hypertunity-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd7dc565f8199c1e0ca6f4ffc68e85b9", "sha256": "33ad6605b5a2fa25a4074c4506858cabed1160664507b96ef75e45766267a9ed"}, "downloads": -1, "filename": "hypertunity-1.0.tar.gz", "has_sig": false, "md5_digest": "dd7dc565f8199c1e0ca6f4ffc68e85b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28815, "upload_time": "2019-11-10T19:10:04", "upload_time_iso_8601": "2019-11-10T19:10:04.726780Z", "url": "https://files.pythonhosted.org/packages/55/0b/d5b241f4810f08b31d24fd0d9053184daec732be2aefa53849fba72a7e19/hypertunity-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7225232b94551c55ec9f217e35dc1ca8", "sha256": "6bb47b52c9c5b09238eb6455932170964ae5999dfa135cd1a882ca18841324a0"}, "downloads": -1, "filename": "hypertunity-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7225232b94551c55ec9f217e35dc1ca8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39910, "upload_time": "2020-01-26T23:08:16", "upload_time_iso_8601": "2020-01-26T23:08:16.572443Z", "url": "https://files.pythonhosted.org/packages/ad/46/fe8b5b03c5ae3ec8a94c752e79e4e7c4094538e26ab2932ec77017771b1a/hypertunity-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b66324ba2b786d0761228dcccb81f07", "sha256": "e662500f8001ed26af6af968f673114075dbb8ae76b6901b06d14d11f1323763"}, "downloads": -1, "filename": "hypertunity-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7b66324ba2b786d0761228dcccb81f07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29531, "upload_time": "2020-01-26T23:08:18", "upload_time_iso_8601": "2020-01-26T23:08:18.551808Z", "url": "https://files.pythonhosted.org/packages/25/e7/94bbfbb471701bcfebae31b1075e099eff7c4d75cb7bd09bf42fd801f4cf/hypertunity-1.0.1.tar.gz", "yanked": false}], "1.0.dev0": [{"comment_text": "", "digests": {"md5": "4b7611f3323234655a3e5504e3bad7d7", "sha256": "fb3d9b91811de0497f25476a0d857d5206befb5d760d89735ef1330b2a14bcec"}, "downloads": -1, "filename": "hypertunity-1.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "4b7611f3323234655a3e5504e3bad7d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39241, "upload_time": "2019-11-09T18:45:45", "upload_time_iso_8601": "2019-11-09T18:45:45.418036Z", "url": "https://files.pythonhosted.org/packages/5f/c6/50abd36da776a81bb3a1603db9a9187d8523a1353083d82365f9e01ecb72/hypertunity-1.0.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da98ca06418b79f620038600cd457bea", "sha256": "fbf5a333ee2ad39f5bb671ed86ed1775da3b6066a3ac69dc046743ad9e75776b"}, "downloads": -1, "filename": "hypertunity-1.0.dev0.tar.gz", "has_sig": false, "md5_digest": "da98ca06418b79f620038600cd457bea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28807, "upload_time": "2019-11-09T18:45:47", "upload_time_iso_8601": "2019-11-09T18:45:47.970770Z", "url": "https://files.pythonhosted.org/packages/78/e1/c6799b5b4621b842c745cad76a5130e98aef4cdcea5d55361634654c0ca7/hypertunity-1.0.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7225232b94551c55ec9f217e35dc1ca8", "sha256": "6bb47b52c9c5b09238eb6455932170964ae5999dfa135cd1a882ca18841324a0"}, "downloads": -1, "filename": "hypertunity-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7225232b94551c55ec9f217e35dc1ca8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39910, "upload_time": "2020-01-26T23:08:16", "upload_time_iso_8601": "2020-01-26T23:08:16.572443Z", "url": "https://files.pythonhosted.org/packages/ad/46/fe8b5b03c5ae3ec8a94c752e79e4e7c4094538e26ab2932ec77017771b1a/hypertunity-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b66324ba2b786d0761228dcccb81f07", "sha256": "e662500f8001ed26af6af968f673114075dbb8ae76b6901b06d14d11f1323763"}, "downloads": -1, "filename": "hypertunity-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7b66324ba2b786d0761228dcccb81f07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29531, "upload_time": "2020-01-26T23:08:18", "upload_time_iso_8601": "2020-01-26T23:08:18.551808Z", "url": "https://files.pythonhosted.org/packages/25/e7/94bbfbb471701bcfebae31b1075e099eff7c4d75cb7bd09bf42fd801f4cf/hypertunity-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:29 2020"}