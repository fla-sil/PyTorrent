{"info": {"author": "flanker", "author_email": "github@19pouces.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: CEA CNRS Inria Logiciel Libre License, version 2.1 (CeCILL-2.1)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "Multicoder\n==========\n\nEver asked yourself which encoding returns \"Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\"?\nMulticoder to the rescue!\n\nMulticoder will encode, or decode, the given text using the standard encodings.\n\n```bash\n$ pip3 install multicoder\n$ multicoder -r Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\nemail.header.decode_header : Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\nquopri.decodestring : Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\nurllib.parse.unquote : Test with special chars: $ \u00e9\u00e8 & .;/=\nurllib.parse.unquote_plus : Test with special chars: $ \u00e9\u00e8 & .;/=\nhtml.unescape : Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\nbase64.b64encode : (invalid: Invalid base64-encoded string: number of data characters (53) cannot be 1 more than a multiple of 4 )\nbase64.urlsafe_b64encode : (invalid: Invalid base64-encoded string: number of data characters (53) cannot be 1 more than a multiple of 4 )\n```\n\nYou can encode or decode the provided text (of course, some methods can only encode since they are actuall hash methods, not encoding methods\u2026):\n```bash\n$ multicoder \"Test with special chars: \\$ \u00e9\u00e8 & .;/=\"\nemail.header.Header : =?utf-8?b?VGVzdCB3aXRoIHNwZWNpYWwgY2hhcnM6ICQgw6nDqCAmIC47Lz0=?=\nquopri.encodestring : Test with special chars: $ =C3=A9=C3=A8 & .;/=3D\nurllib.parse.quote : Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\nurllib.parse.quote_plus : Test+with+special+chars%3A+%24+%C3%A9%C3%A8+%26+.%3B%2F%3D\nhtml.escape : Test with special chars: $ \u00e9\u00e8 &amp; .;/=\nshlex.quote : 'Test with special chars: $ \u00e9\u00e8 & .;/='\nbase64.b64encode : VGVzdCB3aXRoIHNwZWNpYWwgY2hhcnM6ICQgw6nDqCAmIC47Lz0=\nbase64.urlsafe_b64encode : VGVzdCB3aXRoIHNwZWNpYWwgY2hhcnM6ICQgw6nDqCAmIC47Lz0=\nbase64.b32encode : KRSXG5BAO5UXI2BAONYGKY3JMFWCAY3IMFZHGORAEQQMHKODVAQCMIBOHMXT2===\nbase64.b16encode : 546573742077697468207370656369616C2063686172733A202420C3A9C3A82026202E3B2F3D\nbase64.a85encode : <+U,m+EqOABHVA8ARfF_C`m5$@<-EM+=&)IWPbYW-6Op&00K\nbase64.b85encode : RAqB?Aa`kWXdrWNWn*b!Y#?K3VRCaiAS58esl%usCLk_5FFg\nhashlib.blake2b : 191d8425db0082f6c2c014602f7d9876281c17373939a3661fca520d47c43ba5b941856674e15487aa251b77efaf3dbb9470b90d88e85b3d12660c2c45abaf91\nhashlib.blake2s : eb5fcb76ab5b1e71f698133f5d634c6892eb27ea562d02f2f650e0826a2c9dbc\nhashlib.md5 : 3283fc37323faaf908e77aa1fdab8e57\nhashlib.sha1 : 439a025a45e73fce2786a549e7ddf89e4b91c438\nhashlib.sha224 : 34c446d4f0a74ba9126a52193dc31ca8e0e0a2b396cd37509811f291\nhashlib.sha256 : 42a905181300cd433e9985dec166e33cdc21edc6bcd699e48315cef41d00a9a8\nhashlib.sha384 : bd6ab20dbf0c28cdb759ef24d404035de561cad4a0a6864e82db3f5047e183da8f33820887dbe8a7e3b867f4175600c1\nhashlib.sha3_224 : e3232527279f04255a037840580917c4cebe7179457bb514fd7fc920\nhashlib.sha3_256 : ce1efa90097c42405a0859ed8c58660814d920b0e4063a862c97852bc164c91c\nhashlib.sha3_384 : 0b6e96e03855a57b01c4da29793ca3790b024a860ca3c858092ea361be9872d72001b1c7878cf7bea13a4aae5c3a0dc2\nhashlib.sha3_512 : bc72fb7932dd319d4b5622d91e921b44e2a0ad3ab21205c6c7dd8558dadd491b0e7abfdf9b5c345c6120e8686c26aab71df5520b30839bd1907ae305d2060fba\nhashlib.sha512 : 8a5785883b4acc2bd17ca91511d598bad9784f22bf4a8f420df779a8beae43cdee3e2053d47e40b89b29ce4804c6043ad36c75e8f2c3496c0473cb97c0e60ea6\n```\n\nIf you known both clear and encoded text, you can display valid encodings:\n```bash\n$ multicoder \"Test with special chars: \\$ \u00e9\u00e8 & .;/=\" -o 3283fc37323faaf908e77aa1fdab8e57\nhashlib.md5 : 3283fc37323faaf908e77aa1fdab8e57\n```\n\nProbably not the script of the decade but it can help.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "CeCILL-B", "maintainer": "", "maintainer_email": "", "name": "multicoder", "package_url": "https://pypi.org/project/multicoder/", "platform": "", "project_url": "https://pypi.org/project/multicoder/", "project_urls": null, "release_url": "https://pypi.org/project/multicoder/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Test classical encodings.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Multicoder</h1>\n<p>Ever asked yourself which encoding returns \"Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\"?\nMulticoder to the rescue!</p>\n<p>Multicoder will encode, or decode, the given text using the standard encodings.</p>\n<pre>$ pip3 install multicoder\n$ multicoder -r Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\nemail.header.decode_header : Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\nquopri.decodestring : Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\nurllib.parse.unquote : Test with special chars: $ \u00e9\u00e8 <span class=\"p\">&amp;</span> .<span class=\"p\">;</span>/<span class=\"o\">=</span>\nurllib.parse.unquote_plus : Test with special chars: $ \u00e9\u00e8 <span class=\"p\">&amp;</span> .<span class=\"p\">;</span>/<span class=\"o\">=</span>\nhtml.unescape : Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\nbase64.b64encode : <span class=\"o\">(</span>invalid: Invalid base64-encoded string: number of data characters <span class=\"o\">(</span><span class=\"m\">53</span><span class=\"o\">)</span> cannot be <span class=\"m\">1</span> more than a multiple of <span class=\"m\">4</span> <span class=\"o\">)</span>\nbase64.urlsafe_b64encode : <span class=\"o\">(</span>invalid: Invalid base64-encoded string: number of data characters <span class=\"o\">(</span><span class=\"m\">53</span><span class=\"o\">)</span> cannot be <span class=\"m\">1</span> more than a multiple of <span class=\"m\">4</span> <span class=\"o\">)</span>\n</pre>\n<p>You can encode or decode the provided text (of course, some methods can only encode since they are actuall hash methods, not encoding methods\u2026):</p>\n<pre>$ multicoder <span class=\"s2\">\"Test with special chars: \\$ \u00e9\u00e8 &amp; .;/=\"</span>\nemail.header.Header : <span class=\"o\">=</span>?utf-8?b?VGVzdCB3aXRoIHNwZWNpYWwgY2hhcnM6ICQgw6nDqCAmIC47Lz0<span class=\"o\">=</span>?<span class=\"o\">=</span>\nquopri.encodestring : Test with special chars: $ <span class=\"o\">=</span><span class=\"nv\">C3</span><span class=\"o\">=</span><span class=\"nv\">A9</span><span class=\"o\">=</span><span class=\"nv\">C3</span><span class=\"o\">=</span>A8 <span class=\"p\">&amp;</span> .<span class=\"p\">;</span>/<span class=\"o\">=</span>3D\nurllib.parse.quote : Test%20with%20special%20chars%3A%20%24%20%C3%A9%C3%A8%20%26%20.%3B/%3D\nurllib.parse.quote_plus : Test+with+special+chars%3A+%24+%C3%A9%C3%A8+%26+.%3B%2F%3D\nhtml.escape : Test with special chars: $ \u00e9\u00e8 <span class=\"p\">&amp;</span>amp<span class=\"p\">;</span> .<span class=\"p\">;</span>/<span class=\"o\">=</span>\nshlex.quote : <span class=\"s1\">'Test with special chars: $ \u00e9\u00e8 &amp; .;/='</span>\nbase64.b64encode : <span class=\"nv\">VGVzdCB3aXRoIHNwZWNpYWwgY2hhcnM6ICQgw6nDqCAmIC47Lz0</span><span class=\"o\">=</span>\nbase64.urlsafe_b64encode : <span class=\"nv\">VGVzdCB3aXRoIHNwZWNpYWwgY2hhcnM6ICQgw6nDqCAmIC47Lz0</span><span class=\"o\">=</span>\nbase64.b32encode : <span class=\"nv\">KRSXG5BAO5UXI2BAONYGKY3JMFWCAY3IMFZHGORAEQQMHKODVAQCMIBOHMXT2</span><span class=\"o\">===</span>\nbase64.b16encode : 546573742077697468207370656369616C2063686172733A202420C3A9C3A82026202E3B2F3D\nbase64.a85encode : &lt;+U,m+EqOABHVA8ARfF_C<span class=\"sb\">`</span>m5<span class=\"nv\">$@</span>&lt;-EM+<span class=\"o\">=</span><span class=\"p\">&amp;</span><span class=\"o\">)</span>IWPbYW-6Op<span class=\"p\">&amp;</span>00K\nbase64.b85encode : RAqB?Aa<span class=\"sb\">`</span>kWXdrWNWn*b!Y#?K3VRCaiAS58esl%usCLk_5FFg\nhashlib.blake2b : 191d8425db0082f6c2c014602f7d9876281c17373939a3661fca520d47c43ba5b941856674e15487aa251b77efaf3dbb9470b90d88e85b3d12660c2c45abaf91\nhashlib.blake2s : eb5fcb76ab5b1e71f698133f5d634c6892eb27ea562d02f2f650e0826a2c9dbc\nhashlib.md5 : 3283fc37323faaf908e77aa1fdab8e57\nhashlib.sha1 : 439a025a45e73fce2786a549e7ddf89e4b91c438\nhashlib.sha224 : 34c446d4f0a74ba9126a52193dc31ca8e0e0a2b396cd37509811f291\nhashlib.sha256 : 42a905181300cd433e9985dec166e33cdc21edc6bcd699e48315cef41d00a9a8\nhashlib.sha384 : bd6ab20dbf0c28cdb759ef24d404035de561cad4a0a6864e82db3f5047e183da8f33820887dbe8a7e3b867f4175600c1\nhashlib.sha3_224 : e3232527279f04255a037840580917c4cebe7179457bb514fd7fc920\nhashlib.sha3_256 : ce1efa90097c42405a0859ed8c58660814d920b0e4063a862c97852bc164c91c\nhashlib.sha3_384 : 0b6e96e03855a57b01c4da29793ca3790b024a860ca3c858092ea361be9872d72001b1c7878cf7bea13a4aae5c3a0dc2\nhashlib.sha3_512 : bc72fb7932dd319d4b5622d91e921b44e2a0ad3ab21205c6c7dd8558dadd491b0e7abfdf9b5c345c6120e8686c26aab71df5520b30839bd1907ae305d2060fba\nhashlib.sha512 : 8a5785883b4acc2bd17ca91511d598bad9784f22bf4a8f420df779a8beae43cdee3e2053d47e40b89b29ce4804c6043ad36c75e8f2c3496c0473cb97c0e60ea6\n</pre>\n<p>If you known both clear and encoded text, you can display valid encodings:</p>\n<pre>$ multicoder <span class=\"s2\">\"Test with special chars: \\$ \u00e9\u00e8 &amp; .;/=\"</span> -o 3283fc37323faaf908e77aa1fdab8e57\nhashlib.md5 : 3283fc37323faaf908e77aa1fdab8e57\n</pre>\n<p>Probably not the script of the decade but it can help.</p>\n\n          </div>"}, "last_serial": 6451559, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c733056e22723e8ef396d5168c938e74", "sha256": "9b99e47fe00c8d28564934e6dc28b88f270807801e6c23394e2e5338ad08be7d"}, "downloads": -1, "filename": "multicoder-0.1-py3.7.egg", "has_sig": false, "md5_digest": "c733056e22723e8ef396d5168c938e74", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 19591, "upload_time": "2020-01-13T14:03:16", "upload_time_iso_8601": "2020-01-13T14:03:16.154708Z", "url": "https://files.pythonhosted.org/packages/3b/fd/940704102db4c1e98882fafbf8aced77170977bcf0b5308fa84a82f6e7ab/multicoder-0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc31cf8e8ec9c80b7807bd685661dfe6", "sha256": "20453557902ff90adaded451e712cfd25666c2c3f7e9a74381508da5bae22431"}, "downloads": -1, "filename": "multicoder-0.1.tar.gz", "has_sig": false, "md5_digest": "cc31cf8e8ec9c80b7807bd685661dfe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18594, "upload_time": "2020-01-13T14:03:19", "upload_time_iso_8601": "2020-01-13T14:03:19.768691Z", "url": "https://files.pythonhosted.org/packages/19/ba/c9acac4cff36e7a0ccc4f4a82e59d22e04acbd96b4edf2694d1dc90fe6e7/multicoder-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a9ea0aad967ccc43d54043cc447d67ef", "sha256": "3a9d3cfb8f1dbd2e841c4f4e43eeec862fc8dc26952d0dbb9524efb348b6f22d"}, "downloads": -1, "filename": "multicoder-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a9ea0aad967ccc43d54043cc447d67ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18079, "upload_time": "2020-01-13T14:07:38", "upload_time_iso_8601": "2020-01-13T14:07:38.290782Z", "url": "https://files.pythonhosted.org/packages/53/53/479305b4f7b7298227ac5de72d9f6ba09f73256fbd282d4cff7fd3d3c09f/multicoder-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4e6a59d6f2e927f3259740d25dcdc56b", "sha256": "a54ef59ad14538112daf88b406549bbbfe49de5bcd6f40cc5e58c453863578f1"}, "downloads": -1, "filename": "multicoder-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4e6a59d6f2e927f3259740d25dcdc56b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18083, "upload_time": "2020-01-14T12:58:58", "upload_time_iso_8601": "2020-01-14T12:58:58.401412Z", "url": "https://files.pythonhosted.org/packages/24/59/2407a9bda6d1cc53d630012f92eabb1722e46f303bfd7b03e15f9b00658a/multicoder-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4e6a59d6f2e927f3259740d25dcdc56b", "sha256": "a54ef59ad14538112daf88b406549bbbfe49de5bcd6f40cc5e58c453863578f1"}, "downloads": -1, "filename": "multicoder-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4e6a59d6f2e927f3259740d25dcdc56b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18083, "upload_time": "2020-01-14T12:58:58", "upload_time_iso_8601": "2020-01-14T12:58:58.401412Z", "url": "https://files.pythonhosted.org/packages/24/59/2407a9bda6d1cc53d630012f92eabb1722e46f303bfd7b03e15f9b00658a/multicoder-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:31 2020"}