{"info": {"author": "Ivan Rincon", "author_email": "ivan.rincon76@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Benchmark", "Topic :: System :: Hardware", "Topic :: System :: Networking :: Monitoring", "Topic :: System :: Operating System", "Topic :: Utilities"], "description": "STATUX\n======\nStatux is a Python library for Linux that provides methods to get hardware\nand system information. Useful for monitoring tasks.\n\n\nBattery\n-------\n+-----------------------------+------------------------------------+\n|         **Method**          |             **Returns**            |\n+-----------------------------+------------------------------------+\n| ``battery()``               | Manufacturer, model and s/n        |\n+-----------------------------+------------------------------------+\n| ``status()``                | Full, Charging or Discharging      |\n+-----------------------------+------------------------------------+\n| ``is_present()``            | True if battery is present         |\n+-----------------------------+------------------------------------+\n| ``voltage()``               | battery voltage (mV)               |\n+-----------------------------+------------------------------------+\n| ``current()``               | battery current (mA)               |\n+-----------------------------+------------------------------------+\n| ``energy()``                | battery energy (mWh)               |\n+-----------------------------+------------------------------------+\n| ``power()``                 | battery power (mW)                 |\n+-----------------------------+------------------------------------+\n| ``charge()``                | battery charge (mAh)               |\n+-----------------------------+------------------------------------+\n| ``capacity()``              | current capacity percent           |\n+-----------------------------+------------------------------------+\n| ``capacity_level()``        | Full, Normal, Low or Critical      |\n+-----------------------------+------------------------------------+\n| ``low_level()``             | value set for low battery level    |\n+-----------------------------+------------------------------------+\n| ``critical_level()``        | value set for critical level       |\n+-----------------------------+------------------------------------+\n| ``action_level()``          | value set for critical action      |\n+-----------------------------+------------------------------------+\n| ``critical_power_action()`` | PowerOff, Hibernate or HybridSleep |\n+-----------------------------+------------------------------------+\n| ``remaining_time()``        | Remaining battery life             |\n+-----------------------------+------------------------------------+\n| ``wear_level()``            | Battery health level               |\n+-----------------------------+------------------------------------+\n| ``technology()``            | Chemistry of battery               |\n+-----------------------------+------------------------------------+\n| ``supply_type()``           | Battery, Mains, UPS, etc           |\n+-----------------------------+------------------------------------+\n| ``lid_state()``             | Open or Close                      |\n+-----------------------------+------------------------------------+\n| ``ac_adapter_online()``     | True if AC adapter is online       |\n+-----------------------------+------------------------------------+\n\nCPU\n---\n+-------------------------+----------------------------------+\n|        **Method**       |           **Returns**            |\n+-------------------------+----------------------------------+\n| ``next_value()``        | CPU Load percentage. Note: Needs |\n|                         | to instantiate ``Load()`` class  |\n+-------------------------+----------------------------------+\n| ``logical_cpus()``      | Number of logical processors     |\n+-------------------------+----------------------------------+\n| ``physical_cpus()``     | Number of physical processor     |\n+-------------------------+----------------------------------+\n| ``frequency()``         | Current CPU frequency            |\n+-------------------------+----------------------------------+\n| ``max_frequency()``     | CPU max frequency                |\n+-------------------------+----------------------------------+\n| ``frequency_percent()`` | Current CPU frequency percent    |\n+-------------------------+----------------------------------+\n| ``is_x86_64()``         | True if CPU is AMD64 or Intel64  |\n|                         | i.e. 64 bit capable              |\n+-------------------------+----------------------------------+\n| ``model_name()``        | CPU model name                   |\n+-------------------------+----------------------------------+\n\nDISKS\n-----\n+------------------------------+---------------------------------------------+\n|         **Method**           |                 **Returns**                 |\n+------------------------------+---------------------------------------------+\n| ``block_devices()``          | sda, sdb, nvmen1, hda, hdb, etc             |\n+------------------------------+---------------------------------------------+\n| ``partitions()``             | sda1,sda2, sdb1, nvmen1p1, hda1, hdb2, etc  |\n+------------------------------+---------------------------------------------+\n| ``is_rotational()``          | If block device is rotational               |\n+------------------------------+---------------------------------------------+\n| ``is_removable()``           | If block device is removable                |\n+------------------------------+---------------------------------------------+\n| ``model()``                  | Model name of the given device (sda, hdb..) |\n+------------------------------+---------------------------------------------+\n| ``disk_naming()``            | a namedtuple with persistent names of a     |\n|                              | disk or a partition (id, label, path, uuid  |\n|                              | partlabel and partuuid)                     |\n+------------------------------+---------------------------------------------+\n| ``mounts_info()``            | A dict with mounted partitions as key and a |\n|                              | namedtuple with mount point, filesystem and |\n|                              | mount options as value                      |\n+------------------------------+---------------------------------------------+\n| ``mounted_partitions()``     | mounted partitions and mount points         |\n+------------------------------+---------------------------------------------+\n| ``total_size()``             | Total size of a partition                   |\n+------------------------------+---------------------------------------------+\n| ``free_space()``             | Free space of a partition                   |\n+------------------------------+---------------------------------------------+\n| ``used_space()``             | Used space of a partition                   |\n+------------------------------+---------------------------------------------+\n| ``used_space_percent()``     | Used space percent of a partition           |\n+------------------------------+---------------------------------------------+\n| ``bytes_read()``             | Bytes read in a partition                   |\n+------------------------------+---------------------------------------------+\n| ``bytes_write()``            | Bytes written in a partition                |\n+------------------------------+---------------------------------------------+\n| ``bytes_read_write()``       | Bytes read and wirtten in a partition       |\n+------------------------------+---------------------------------------------+\n| ``bytes_read_write_multi()`` | Bytes read and writen in several partitions |\n+------------------------------+---------------------------------------------+\n\n\nNETWORK\n-------\n+----------------------+------------------------------------------+\n|      **Method**      |                **Returns**               |\n+----------------------+------------------------------------------+\n| ``get_interfaces()`` | All network interfaces                   |\n+----------------------+------------------------------------------+\n| ``download_bytes()`` | total bytes downloaded in a interface    |\n+----------------------+------------------------------------------+\n| ``upload_bytes()``   | total bytes uploaded in a interface      |\n+----------------------+------------------------------------------+\n| ``down_up_bytes()``  | total bytes up-downloaded in a interface |\n+----------------------+------------------------------------------+\n| ``download_bytes()`` | average download speed per second        |\n+----------------------+------------------------------------------+\n| ``upload_speed()``   | average download speed per second        |\n+----------------------+------------------------------------------+\n| ``down_up_speed()``  | average up-download speed per second     |\n+----------------------+------------------------------------------+\n\nRAM\n---\n+-------------------------+--------------------------------+\n|        **Method**       |           **Returns**          |\n+-------------------------+--------------------------------+\n| ``total()``             | Total RAM size                 |\n+-------------------------+--------------------------------+\n| ``free()``              | Free RAM                       |\n+-------------------------+--------------------------------+\n| ``free_percent()``      | Free RAM percent               |\n+-------------------------+--------------------------------+\n| ``available()``         | Available RAM                  |\n+-------------------------+--------------------------------+\n| ``available_percent()`` | Available RAM percent          |\n+-------------------------+--------------------------------+\n| ``buff_cache()``        | Buffer, cached and slab memory |\n+-------------------------+--------------------------------+\n| ``used()``              | Used RAM                       |\n+-------------------------+--------------------------------+\n| ``used_percent()``      | Used RAM percent               |\n+-------------------------+--------------------------------+\n\nSYSTEM\n------\n+---------------------------+-------------------------------------+\n|         **Method**        |             **Returns**             |\n+---------------------------+-------------------------------------+\n| ``boot_time()``           | Time at which the system booted     |\n+---------------------------+-------------------------------------+\n| ``uptime()``              | Time elapsed since system boot time |\n+---------------------------+-------------------------------------+\n| ``init()``                | Init system name                    |\n+---------------------------+-------------------------------------+\n| ``hostame()``             | Hostname                            |\n+---------------------------+-------------------------------------+\n| ``user()``                | User name                           |\n+---------------------------+-------------------------------------+\n| ``kernel_release()``      | Kernel release                      |\n+---------------------------+-------------------------------------+\n| ``kernel version()``      | Kernel version                      |\n+---------------------------+-------------------------------------+\n| ``architecture()``        | Machine type                        |\n+---------------------------+-------------------------------------+\n| ``session_id()``          | Current session id                  |\n+---------------------------+-------------------------------------+\n| ``distro_name()``         | Distro short name                   |\n+---------------------------+-------------------------------------+\n| ``distro_full_name()``    | Full distro description             |\n+---------------------------+-------------------------------------+\n| ``distro_version()``      | Distro version                      |\n+---------------------------+-------------------------------------+\n| ``distro_url()``          | Distro url                          |\n+---------------------------+-------------------------------------+\n| ``linux_distribution()``  | Distro info (id, version, codename) |\n+---------------------------+-------------------------------------+\n\nTEMP\n----\n+---------------+---------------------------------------------+\n|   **Method**  |                  **Returns**                |\n+---------------+---------------------------------------------+\n| ``cores()``   | temperature of each core                    |\n+---------------+---------------------------------------------+\n| ``cpu()``     | CPU temp                                    |\n+---------------+---------------------------------------------+\n| ``max_val()`` | maximum value of the temp sensors obtained  |\n+---------------+---------------------------------------------+\n\nNote:\n^^^^^\nThese methods are based on the proc and sys filesystems and are tested in **Linux 4.15**.\nIt is possible that some methods are not available in previous kernel versions\n\nInstall:\n--------\n\nBy pip (It may not be the latest version):\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    pip install statux\n\nCloning this repo :\n^^^^^^^^^^^^^^^^^^^\n\n::\n\n    git clone https://github.com/Arg0s1080/statux.git\n    cd statux\n    sudo python3 setup.py install\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Arg0s1080/statux", "keywords": "linux stats monitoring sensors proc sys battery cpu disk net ram hardware cpuinfo diskstats meminfo mounts partitions power_supply thermal temp", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "statux", "package_url": "https://pypi.org/project/statux/", "platform": "", "project_url": "https://pypi.org/project/statux/", "project_urls": {"Homepage": "https://github.com/Arg0s1080/statux"}, "release_url": "https://pypi.org/project/statux/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Python module for hardware and system monitoring", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Statux is a Python library for Linux that provides methods to get hardware\nand system information. Useful for monitoring tasks.</p>\n<div id=\"battery\">\n<h2>Battery</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>Method</strong></td>\n<td><strong>Returns</strong></td>\n</tr>\n<tr><td><tt>battery()</tt></td>\n<td>Manufacturer, model and s/n</td>\n</tr>\n<tr><td><tt>status()</tt></td>\n<td>Full, Charging or Discharging</td>\n</tr>\n<tr><td><tt>is_present()</tt></td>\n<td>True if battery is present</td>\n</tr>\n<tr><td><tt>voltage()</tt></td>\n<td>battery voltage (mV)</td>\n</tr>\n<tr><td><tt>current()</tt></td>\n<td>battery current (mA)</td>\n</tr>\n<tr><td><tt>energy()</tt></td>\n<td>battery energy (mWh)</td>\n</tr>\n<tr><td><tt>power()</tt></td>\n<td>battery power (mW)</td>\n</tr>\n<tr><td><tt>charge()</tt></td>\n<td>battery charge (mAh)</td>\n</tr>\n<tr><td><tt>capacity()</tt></td>\n<td>current capacity percent</td>\n</tr>\n<tr><td><tt>capacity_level()</tt></td>\n<td>Full, Normal, Low or Critical</td>\n</tr>\n<tr><td><tt>low_level()</tt></td>\n<td>value set for low battery level</td>\n</tr>\n<tr><td><tt>critical_level()</tt></td>\n<td>value set for critical level</td>\n</tr>\n<tr><td><tt>action_level()</tt></td>\n<td>value set for critical action</td>\n</tr>\n<tr><td><tt>critical_power_action()</tt></td>\n<td>PowerOff, Hibernate or HybridSleep</td>\n</tr>\n<tr><td><tt>remaining_time()</tt></td>\n<td>Remaining battery life</td>\n</tr>\n<tr><td><tt>wear_level()</tt></td>\n<td>Battery health level</td>\n</tr>\n<tr><td><tt>technology()</tt></td>\n<td>Chemistry of battery</td>\n</tr>\n<tr><td><tt>supply_type()</tt></td>\n<td>Battery, Mains, UPS, etc</td>\n</tr>\n<tr><td><tt>lid_state()</tt></td>\n<td>Open or Close</td>\n</tr>\n<tr><td><tt>ac_adapter_online()</tt></td>\n<td>True if AC adapter is online</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"cpu\">\n<h2>CPU</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>Method</strong></td>\n<td><strong>Returns</strong></td>\n</tr>\n<tr><td><tt>next_value()</tt></td>\n<td>CPU Load percentage. Note: Needs\nto instantiate <tt>Load()</tt> class</td>\n</tr>\n<tr><td><tt>logical_cpus()</tt></td>\n<td>Number of logical processors</td>\n</tr>\n<tr><td><tt>physical_cpus()</tt></td>\n<td>Number of physical processor</td>\n</tr>\n<tr><td><tt>frequency()</tt></td>\n<td>Current CPU frequency</td>\n</tr>\n<tr><td><tt>max_frequency()</tt></td>\n<td>CPU max frequency</td>\n</tr>\n<tr><td><tt>frequency_percent()</tt></td>\n<td>Current CPU frequency percent</td>\n</tr>\n<tr><td><tt>is_x86_64()</tt></td>\n<td>True if CPU is AMD64 or Intel64\ni.e. 64 bit capable</td>\n</tr>\n<tr><td><tt>model_name()</tt></td>\n<td>CPU model name</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"disks\">\n<h2>DISKS</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>Method</strong></td>\n<td><strong>Returns</strong></td>\n</tr>\n<tr><td><tt>block_devices()</tt></td>\n<td>sda, sdb, nvmen1, hda, hdb, etc</td>\n</tr>\n<tr><td><tt>partitions()</tt></td>\n<td>sda1,sda2, sdb1, nvmen1p1, hda1, hdb2, etc</td>\n</tr>\n<tr><td><tt>is_rotational()</tt></td>\n<td>If block device is rotational</td>\n</tr>\n<tr><td><tt>is_removable()</tt></td>\n<td>If block device is removable</td>\n</tr>\n<tr><td><tt>model()</tt></td>\n<td>Model name of the given device (sda, hdb..)</td>\n</tr>\n<tr><td><tt>disk_naming()</tt></td>\n<td>a namedtuple with persistent names of a\ndisk or a partition (id, label, path, uuid\npartlabel and partuuid)</td>\n</tr>\n<tr><td><tt>mounts_info()</tt></td>\n<td>A dict with mounted partitions as key and a\nnamedtuple with mount point, filesystem and\nmount options as value</td>\n</tr>\n<tr><td><tt>mounted_partitions()</tt></td>\n<td>mounted partitions and mount points</td>\n</tr>\n<tr><td><tt>total_size()</tt></td>\n<td>Total size of a partition</td>\n</tr>\n<tr><td><tt>free_space()</tt></td>\n<td>Free space of a partition</td>\n</tr>\n<tr><td><tt>used_space()</tt></td>\n<td>Used space of a partition</td>\n</tr>\n<tr><td><tt>used_space_percent()</tt></td>\n<td>Used space percent of a partition</td>\n</tr>\n<tr><td><tt>bytes_read()</tt></td>\n<td>Bytes read in a partition</td>\n</tr>\n<tr><td><tt>bytes_write()</tt></td>\n<td>Bytes written in a partition</td>\n</tr>\n<tr><td><tt>bytes_read_write()</tt></td>\n<td>Bytes read and wirtten in a partition</td>\n</tr>\n<tr><td><tt>bytes_read_write_multi()</tt></td>\n<td>Bytes read and writen in several partitions</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"network\">\n<h2>NETWORK</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>Method</strong></td>\n<td><strong>Returns</strong></td>\n</tr>\n<tr><td><tt>get_interfaces()</tt></td>\n<td>All network interfaces</td>\n</tr>\n<tr><td><tt>download_bytes()</tt></td>\n<td>total bytes downloaded in a interface</td>\n</tr>\n<tr><td><tt>upload_bytes()</tt></td>\n<td>total bytes uploaded in a interface</td>\n</tr>\n<tr><td><tt>down_up_bytes()</tt></td>\n<td>total bytes up-downloaded in a interface</td>\n</tr>\n<tr><td><tt>download_bytes()</tt></td>\n<td>average download speed per second</td>\n</tr>\n<tr><td><tt>upload_speed()</tt></td>\n<td>average download speed per second</td>\n</tr>\n<tr><td><tt>down_up_speed()</tt></td>\n<td>average up-download speed per second</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"ram\">\n<h2>RAM</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>Method</strong></td>\n<td><strong>Returns</strong></td>\n</tr>\n<tr><td><tt>total()</tt></td>\n<td>Total RAM size</td>\n</tr>\n<tr><td><tt>free()</tt></td>\n<td>Free RAM</td>\n</tr>\n<tr><td><tt>free_percent()</tt></td>\n<td>Free RAM percent</td>\n</tr>\n<tr><td><tt>available()</tt></td>\n<td>Available RAM</td>\n</tr>\n<tr><td><tt>available_percent()</tt></td>\n<td>Available RAM percent</td>\n</tr>\n<tr><td><tt>buff_cache()</tt></td>\n<td>Buffer, cached and slab memory</td>\n</tr>\n<tr><td><tt>used()</tt></td>\n<td>Used RAM</td>\n</tr>\n<tr><td><tt>used_percent()</tt></td>\n<td>Used RAM percent</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"system\">\n<h2>SYSTEM</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>Method</strong></td>\n<td><strong>Returns</strong></td>\n</tr>\n<tr><td><tt>boot_time()</tt></td>\n<td>Time at which the system booted</td>\n</tr>\n<tr><td><tt>uptime()</tt></td>\n<td>Time elapsed since system boot time</td>\n</tr>\n<tr><td><tt>init()</tt></td>\n<td>Init system name</td>\n</tr>\n<tr><td><tt>hostame()</tt></td>\n<td>Hostname</td>\n</tr>\n<tr><td><tt>user()</tt></td>\n<td>User name</td>\n</tr>\n<tr><td><tt>kernel_release()</tt></td>\n<td>Kernel release</td>\n</tr>\n<tr><td><tt>kernel version()</tt></td>\n<td>Kernel version</td>\n</tr>\n<tr><td><tt>architecture()</tt></td>\n<td>Machine type</td>\n</tr>\n<tr><td><tt>session_id()</tt></td>\n<td>Current session id</td>\n</tr>\n<tr><td><tt>distro_name()</tt></td>\n<td>Distro short name</td>\n</tr>\n<tr><td><tt>distro_full_name()</tt></td>\n<td>Full distro description</td>\n</tr>\n<tr><td><tt>distro_version()</tt></td>\n<td>Distro version</td>\n</tr>\n<tr><td><tt>distro_url()</tt></td>\n<td>Distro url</td>\n</tr>\n<tr><td><tt>linux_distribution()</tt></td>\n<td>Distro info (id, version, codename)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"temp\">\n<h2>TEMP</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>Method</strong></td>\n<td><strong>Returns</strong></td>\n</tr>\n<tr><td><tt>cores()</tt></td>\n<td>temperature of each core</td>\n</tr>\n<tr><td><tt>cpu()</tt></td>\n<td>CPU temp</td>\n</tr>\n<tr><td><tt>max_val()</tt></td>\n<td>maximum value of the temp sensors obtained</td>\n</tr>\n</tbody>\n</table>\n<div id=\"note\">\n<h3>Note:</h3>\n<p>These methods are based on the proc and sys filesystems and are tested in <strong>Linux 4.15</strong>.\nIt is possible that some methods are not available in previous kernel versions</p>\n</div>\n</div>\n<div id=\"install\">\n<h2>Install:</h2>\n<div id=\"by-pip-it-may-not-be-the-latest-version\">\n<h3>By pip (It may not be the latest version):</h3>\n<pre>pip install statux\n</pre>\n</div>\n<div id=\"cloning-this-repo\">\n<h3>Cloning this repo :</h3>\n<pre>git clone https://github.com/Arg0s1080/statux.git\ncd statux\nsudo python3 setup.py install\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5264523, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "c2400d9fb45b11bcadc4598eca07fa37", "sha256": "5b1ce76448153ca63b35c0ec1a8030dfc48e2083409189d70f5bf9d493b25702"}, "downloads": -1, "filename": "statux-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c2400d9fb45b11bcadc4598eca07fa37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22340, "upload_time": "2018-06-13T17:54:36", "upload_time_iso_8601": "2018-06-13T17:54:36.750877Z", "url": "https://files.pythonhosted.org/packages/0a/54/de074c2c064a76849049226b40423b632d7b54b43d667aa39ee4dff5f2a1/statux-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a25a6d0d4a4add50a58a1b3780c96fb2", "sha256": "4fba800eb6f547b88a6bc6b552af3fc7072acde6752850cc5dea7c8705239c56"}, "downloads": -1, "filename": "statux-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a25a6d0d4a4add50a58a1b3780c96fb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13934, "upload_time": "2018-06-13T17:54:38", "upload_time_iso_8601": "2018-06-13T17:54:38.384374Z", "url": "https://files.pythonhosted.org/packages/20/7d/1b391d2abaebb4fec8d31d743edc1ab6fa47d559bc0fe75e644e434825df/statux-0.0.2.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "17c640a544ec3757e3b8c5811bc5d1e5", "sha256": "4433cb54ea1cf591de803d09ea0fc67c9f9b8a3ec22ddc6f7e54a0ae1d4673e3"}, "downloads": -1, "filename": "statux-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "17c640a544ec3757e3b8c5811bc5d1e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39185, "upload_time": "2019-05-13T21:25:10", "upload_time_iso_8601": "2019-05-13T21:25:10.427227Z", "url": "https://files.pythonhosted.org/packages/08/a5/a5d344d0c468d8a7dc2d36f0b4fe30eeb1d9cfd7e6c36e34111e1b52cb1f/statux-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a4b911726257bfa403bbedde67809c7", "sha256": "bccb49d61e34c7d2b8d0522998cabab340d40e7f83eed29c2edb99e5681b0c7c"}, "downloads": -1, "filename": "statux-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8a4b911726257bfa403bbedde67809c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18844, "upload_time": "2019-05-13T21:25:12", "upload_time_iso_8601": "2019-05-13T21:25:12.358328Z", "url": "https://files.pythonhosted.org/packages/c1/13/dcc503778277d281754541e345d337c7b9c45ae601021a265ccc848c5852/statux-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17c640a544ec3757e3b8c5811bc5d1e5", "sha256": "4433cb54ea1cf591de803d09ea0fc67c9f9b8a3ec22ddc6f7e54a0ae1d4673e3"}, "downloads": -1, "filename": "statux-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "17c640a544ec3757e3b8c5811bc5d1e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39185, "upload_time": "2019-05-13T21:25:10", "upload_time_iso_8601": "2019-05-13T21:25:10.427227Z", "url": "https://files.pythonhosted.org/packages/08/a5/a5d344d0c468d8a7dc2d36f0b4fe30eeb1d9cfd7e6c36e34111e1b52cb1f/statux-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a4b911726257bfa403bbedde67809c7", "sha256": "bccb49d61e34c7d2b8d0522998cabab340d40e7f83eed29c2edb99e5681b0c7c"}, "downloads": -1, "filename": "statux-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8a4b911726257bfa403bbedde67809c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18844, "upload_time": "2019-05-13T21:25:12", "upload_time_iso_8601": "2019-05-13T21:25:12.358328Z", "url": "https://files.pythonhosted.org/packages/c1/13/dcc503778277d281754541e345d337c7b9c45ae601021a265ccc848c5852/statux-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:18 2020"}