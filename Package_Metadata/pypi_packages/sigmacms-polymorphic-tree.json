{"info": {"author": "Diederik van der Boor", "author_email": "opensource@edoburu.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.4", "Framework :: Django :: 1.5", "Framework :: Django :: 1.6", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-polymorphic-tree\n=======================\n\n.. image:: https://img.shields.io/travis/edoburu/django-polymorphic-tree/master.svg?branch=master\n    :target: http://travis-ci.org/edoburu/django-polymorphic-tree\n.. image:: https://img.shields.io/pypi/v/django-polymorphic-tree.svg\n    :target: https://pypi.python.org/pypi/django-polymorphic-tree/\n.. image:: https://img.shields.io/pypi/dm/django-polymorphic-tree.svg\n    :target: https://pypi.python.org/pypi/django-polymorphic-tree/\n.. image:: https://img.shields.io/badge/wheel-yes-green.svg\n    :target: https://pypi.python.org/pypi/django-polymorphic-tree/\n.. image:: https://img.shields.io/pypi/l/django-polymorphic-tree.svg\n    :target: https://pypi.python.org/pypi/django-polymorphic-tree/\n.. image:: https://img.shields.io/codecov/c/github/edoburu/django-polymorphic-tree/master.svg\n    :target: https://codecov.io/github/edoburu/django-polymorphic-tree?branch=master\n\nThis package combines django-mptt_ with django-polymorphic_.\n\nIn other words, this module provides a node tree, where each node can be a different model type.\nThis allows you to freely structure tree data. For example:\n\n* Build a tree of a root node, category nodes, leaf nodes, each with custom fields.\n* Build a todo list of projects, categories and items.\n* Build a book of chapters, sections, and pages.\n\nOrigin\n------\n\nThis module was extracted out of django-fluent-pages_ because it turned out to serve a generic purpose.\nThis was done during contract work at Leukeleu_ (also known for their involvement in django-fiber_).\n\n\nInstallation\n============\n\nFirst install the module, preferably in a virtual environment::\n\n    pip install django-polymorphic-tree\n\nOr install the current repository::\n\n    pip install -e git+https://github.com/edoburu/django-polymorphic-tree.git#egg=django-polymorphic-tree\n\nThe main dependencies are django-mptt_ and django-polymorphic_,\nwhich will be automatically installed.\n\nConfiguration\n-------------\n\nNext, create a project which uses the application::\n\n    cd ..\n    django-admin.py startproject demo\n\nAdd the following to ``settings.py``:\n\n.. code:: python\n\n    INSTALLED_APPS += (\n        'polymorphic_tree',\n        'polymorphic',\n        'mptt',\n    )\n\n\nUsage\n-----\n\nThe main feature of this module is creating a tree of custom node types.\nIt boils down to creating a application with 2 files:\n\nThe ``models.py`` file should define the custom node type, and any fields it has:\n\n.. code:: python\n\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from polymorphic_tree.models import PolymorphicMPTTModel, PolymorphicTreeForeignKey\n\n\n    # A base model for the tree:\n\n    class BaseTreeNode(PolymorphicMPTTModel):\n        parent = PolymorphicTreeForeignKey('self', blank=True, null=True, related_name='children', verbose_name=_('parent'))\n        title = models.CharField(_(\"Title\"), max_length=200)\n\n        class Meta(PolymorphicMPTTModel.Meta):\n            verbose_name = _(\"Tree node\")\n            verbose_name_plural = _(\"Tree nodes\")\n\n\n    # Create 3 derived models for the tree nodes:\n\n    class CategoryNode(BaseTreeNode):\n        opening_title = models.CharField(_(\"Opening title\"), max_length=200)\n        opening_image = models.ImageField(_(\"Opening image\"), upload_to='images')\n\n        class Meta:\n            verbose_name = _(\"Category node\")\n            verbose_name_plural = _(\"Category nodes\")\n\n\n    class TextNode(BaseTreeNode):\n        extra_text = models.TextField()\n\n        # Extra settings:\n        can_have_children = False\n\n        class Meta:\n            verbose_name = _(\"Text node\")\n            verbose_name_plural = _(\"Text nodes\")\n\n\n    class ImageNode(BaseTreeNode):\n        image = models.ImageField(_(\"Image\"), upload_to='images')\n\n        class Meta:\n            verbose_name = _(\"Image node\")\n            verbose_name_plural = _(\"Image nodes\")\n\n\nThe ``admin.py`` file should define the admin, both for the child nodes and parent:\n\n.. code:: python\n\n    from django.contrib import admin\n    from django.utils.translation import ugettext_lazy as _\n    from polymorphic_tree.admin import PolymorphicMPTTParentModelAdmin, PolymorphicMPTTChildModelAdmin\n    from . import models\n\n\n    # The common admin functionality for all derived models:\n\n    class BaseChildAdmin(PolymorphicMPTTChildModelAdmin):\n        GENERAL_FIELDSET = (None, {\n            'fields': ('parent', 'title'),\n        })\n\n        base_model = models.BaseTreeNode\n        base_fieldsets = (\n            GENERAL_FIELDSET,\n        )\n\n\n    # Optionally some custom admin code\n\n    class TextNodeAdmin(BaseChildAdmin):\n        pass\n\n\n    # Create the parent admin that combines it all:\n\n    class TreeNodeParentAdmin(PolymorphicMPTTParentModelAdmin):\n        base_model = models.BaseTreeNode\n        child_models = (\n            (models.CategoryNode, BaseChildAdmin),\n            (models.TextNode, TextNodeAdmin),  # custom admin allows custom edit/delete view.\n            (models.ImageNode, BaseChildAdmin),\n        )\n\n        list_display = ('title', 'actions_column',)\n\n        class Media:\n            css = {\n                'all': ('admin/treenode/admin.css',)\n            }\n\n\n    admin.site.register(models.BaseTreeNode, TreeNodeParentAdmin)\n\n\nThe ``child_models`` attribute defines which admin interface is loaded for the *edit* and *delete* page.\nThe list view is still rendered by the parent admin.\n\n\nTests\n-----\n\nTo run the included test suite, execute::\n\n    ./runtests.py\n\nTo test support for multiple Python and Django versions, run tox from the repository root::\n\n    pip install tox\n    tox\n\nThe Python versions need to be installed at your system.  See pyenv (Linux) or Homebrew (Mac OS X).\n\nPython 2.6, 2.7, and 3.3 are the currently supported versions.\n\n\nTodo\n----\n\n* Sphinx Documentation\n\n\nContributing\n------------\n\nThis module is designed to be generic. In case there is anything you didn't like about it,\nor think it's not flexible enough, please let us know. We'd love to improve it!\n\nIf you have any other valuable contribution, suggestion or idea,\nplease let us know as well because we will look into it.\nPull requests are welcome too. :-)\n\n\n.. _Leukeleu: http://www.leukeleu.nl/\n.. _django-fiber: https://github.com/ridethepony/django-fiber\n.. _django-fluent-pages: https://github.com/edoburu/django-fluent-pages\n.. _django-mptt: https://github.com/django-mptt/django-mptt\n.. _django-polymorphic: https://github.com/chrisglass/django_polymorphic", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/sigmacms/sigmacms-polymorphic-tree/zipball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sigmacms/sigmacms-polymorphic-tree", "keywords": null, "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "sigmacms-polymorphic-tree", "package_url": "https://pypi.org/project/sigmacms-polymorphic-tree/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sigmacms-polymorphic-tree/", "project_urls": {"Download": "https://github.com/sigmacms/sigmacms-polymorphic-tree/zipball/master", "Homepage": "https://github.com/sigmacms/sigmacms-polymorphic-tree"}, "release_url": "https://pypi.org/project/sigmacms-polymorphic-tree/1.2.6b1/", "requires_dist": null, "requires_python": null, "summary": "A polymorphic mptt structure to display content in a tree.", "version": "1.2.6b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-polymorphic-tree\">\n<h2>django-polymorphic-tree</h2>\n<a href=\"http://travis-ci.org/edoburu/django-polymorphic-tree\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/edoburu/django-polymorphic-tree/master.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6cc16d10e177515ad482b9bbb8e222757638d94/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f65646f627572752f646a616e676f2d706f6c796d6f72706869632d747265652f6d61737465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/django-polymorphic-tree/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/django-polymorphic-tree.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1b987290ac794092c6ecdba46a31573fabc174ea/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d706f6c796d6f72706869632d747265652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-polymorphic-tree/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/django-polymorphic-tree.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/986ca09c73bd4c46cb34b9188b820c05eaf864a9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f646a616e676f2d706f6c796d6f72706869632d747265652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-polymorphic-tree/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/wheel-yes-green.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66664e8566dcaf9e28a3e4690ff173a6d8c909c0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f776865656c2d7965732d677265656e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-polymorphic-tree/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/django-polymorphic-tree.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90208a4c24d20bad91d389b2004e4cbfe04b2c2b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f646a616e676f2d706f6c796d6f72706869632d747265652e737667\"></a>\n<a href=\"https://codecov.io/github/edoburu/django-polymorphic-tree?branch=master\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/edoburu/django-polymorphic-tree/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e13010d1de8ea41a03b02abe3d2dc9eec19bf3d/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f65646f627572752f646a616e676f2d706f6c796d6f72706869632d747265652f6d61737465722e737667\"></a>\n<p>This package combines <a href=\"https://github.com/django-mptt/django-mptt\" rel=\"nofollow\">django-mptt</a> with <a href=\"https://github.com/chrisglass/django_polymorphic\" rel=\"nofollow\">django-polymorphic</a>.</p>\n<p>In other words, this module provides a node tree, where each node can be a different model type.\nThis allows you to freely structure tree data. For example:</p>\n<ul>\n<li>Build a tree of a root node, category nodes, leaf nodes, each with custom fields.</li>\n<li>Build a todo list of projects, categories and items.</li>\n<li>Build a book of chapters, sections, and pages.</li>\n</ul>\n<div id=\"origin\">\n<h3>Origin</h3>\n<p>This module was extracted out of <a href=\"https://github.com/edoburu/django-fluent-pages\" rel=\"nofollow\">django-fluent-pages</a> because it turned out to serve a generic purpose.\nThis was done during contract work at <a href=\"http://www.leukeleu.nl/\" rel=\"nofollow\">Leukeleu</a> (also known for their involvement in <a href=\"https://github.com/ridethepony/django-fiber\" rel=\"nofollow\">django-fiber</a>).</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>First install the module, preferably in a virtual environment:</p>\n<pre>pip install django-polymorphic-tree\n</pre>\n<p>Or install the current repository:</p>\n<pre>pip install -e git+https://github.com/edoburu/django-polymorphic-tree.git#egg=django-polymorphic-tree\n</pre>\n<p>The main dependencies are <a href=\"https://github.com/django-mptt/django-mptt\" rel=\"nofollow\">django-mptt</a> and <a href=\"https://github.com/chrisglass/django_polymorphic\" rel=\"nofollow\">django-polymorphic</a>,\nwhich will be automatically installed.</p>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>Next, create a project which uses the application:</p>\n<pre>cd ..\ndjango-admin.py startproject demo\n</pre>\n<p>Add the following to <tt>settings.py</tt>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">+=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'polymorphic_tree'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'polymorphic'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'mptt'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>The main feature of this module is creating a tree of custom node types.\nIt boils down to creating a application with 2 files:</p>\n<p>The <tt>models.py</tt> file should define the custom node type, and any fields it has:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n<span class=\"kn\">from</span> <span class=\"nn\">polymorphic_tree.models</span> <span class=\"kn\">import</span> <span class=\"n\">PolymorphicMPTTModel</span><span class=\"p\">,</span> <span class=\"n\">PolymorphicTreeForeignKey</span>\n\n\n<span class=\"c1\"># A base model for the tree:</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseTreeNode</span><span class=\"p\">(</span><span class=\"n\">PolymorphicMPTTModel</span><span class=\"p\">):</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">PolymorphicTreeForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'self'</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'children'</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'parent'</span><span class=\"p\">))</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Title\"</span><span class=\"p\">),</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">PolymorphicMPTTModel</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Tree node\"</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Tree nodes\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Create 3 derived models for the tree nodes:</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CategoryNode</span><span class=\"p\">(</span><span class=\"n\">BaseTreeNode</span><span class=\"p\">):</span>\n    <span class=\"n\">opening_title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Opening title\"</span><span class=\"p\">),</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">opening_image</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Opening image\"</span><span class=\"p\">),</span> <span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s1\">'images'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Category node\"</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Category nodes\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TextNode</span><span class=\"p\">(</span><span class=\"n\">BaseTreeNode</span><span class=\"p\">):</span>\n    <span class=\"n\">extra_text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Extra settings:</span>\n    <span class=\"n\">can_have_children</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Text node\"</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Text nodes\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ImageNode</span><span class=\"p\">(</span><span class=\"n\">BaseTreeNode</span><span class=\"p\">):</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Image\"</span><span class=\"p\">),</span> <span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s1\">'images'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Image node\"</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Image nodes\"</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>admin.py</tt> file should define the admin, both for the child nodes and parent:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n<span class=\"kn\">from</span> <span class=\"nn\">polymorphic_tree.admin</span> <span class=\"kn\">import</span> <span class=\"n\">PolymorphicMPTTParentModelAdmin</span><span class=\"p\">,</span> <span class=\"n\">PolymorphicMPTTChildModelAdmin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"c1\"># The common admin functionality for all derived models:</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseChildAdmin</span><span class=\"p\">(</span><span class=\"n\">PolymorphicMPTTChildModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">GENERAL_FIELDSET</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'fields'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'parent'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">),</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"n\">base_model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BaseTreeNode</span>\n    <span class=\"n\">base_fieldsets</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">GENERAL_FIELDSET</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Optionally some custom admin code</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TextNodeAdmin</span><span class=\"p\">(</span><span class=\"n\">BaseChildAdmin</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"c1\"># Create the parent admin that combines it all:</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TreeNodeParentAdmin</span><span class=\"p\">(</span><span class=\"n\">PolymorphicMPTTParentModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">base_model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BaseTreeNode</span>\n    <span class=\"n\">child_models</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CategoryNode</span><span class=\"p\">,</span> <span class=\"n\">BaseChildAdmin</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextNode</span><span class=\"p\">,</span> <span class=\"n\">TextNodeAdmin</span><span class=\"p\">),</span>  <span class=\"c1\"># custom admin allows custom edit/delete view.</span>\n        <span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageNode</span><span class=\"p\">,</span> <span class=\"n\">BaseChildAdmin</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'actions_column'</span><span class=\"p\">,)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Media</span><span class=\"p\">:</span>\n        <span class=\"n\">css</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'all'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'admin/treenode/admin.css'</span><span class=\"p\">,)</span>\n        <span class=\"p\">}</span>\n\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BaseTreeNode</span><span class=\"p\">,</span> <span class=\"n\">TreeNodeParentAdmin</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>child_models</tt> attribute defines which admin interface is loaded for the <em>edit</em> and <em>delete</em> page.\nThe list view is still rendered by the parent admin.</p>\n</div>\n<div id=\"tests\">\n<h3>Tests</h3>\n<p>To run the included test suite, execute:</p>\n<pre>./runtests.py\n</pre>\n<p>To test support for multiple Python and Django versions, run tox from the repository root:</p>\n<pre>pip install tox\ntox\n</pre>\n<p>The Python versions need to be installed at your system.  See pyenv (Linux) or Homebrew (Mac OS X).</p>\n<p>Python 2.6, 2.7, and 3.3 are the currently supported versions.</p>\n</div>\n<div id=\"todo\">\n<h3>Todo</h3>\n<ul>\n<li>Sphinx Documentation</li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>This module is designed to be generic. In case there is anything you didn\u2019t like about it,\nor think it\u2019s not flexible enough, please let us know. We\u2019d love to improve it!</p>\n<p>If you have any other valuable contribution, suggestion or idea,\nplease let us know as well because we will look into it.\nPull requests are welcome too. :-)</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4980614, "releases": {"1.2.6b0": [{"comment_text": "", "digests": {"md5": "b7f7ce811c48a09c1447daa85e04a7c5", "sha256": "197f1bd21a8dca7340e2b8302c374b5baed584a63e9d523763ed1887d6053527"}, "downloads": -1, "filename": "sigmacms_polymorphic_tree-1.2.6b0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "b7f7ce811c48a09c1447daa85e04a7c5", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 47054, "upload_time": "2016-06-14T06:13:23", "upload_time_iso_8601": "2016-06-14T06:13:23.557791Z", "url": "https://files.pythonhosted.org/packages/fa/eb/ec49957a2c214d752c6e9be786ab4abf0f915bc834a2cc525d5d19f3c2a0/sigmacms_polymorphic_tree-1.2.6b0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "feab59a2bc69b40458b8b6ebba74e14f", "sha256": "f38a24b7f00ba8f75f39e3e5cfcae7844713861951d649df53a5bb53ce9f665a"}, "downloads": -1, "filename": "sigmacms-polymorphic-tree-1.2.6b0.tar.gz", "has_sig": true, "md5_digest": "feab59a2bc69b40458b8b6ebba74e14f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39443, "upload_time": "2016-06-14T06:12:29", "upload_time_iso_8601": "2016-06-14T06:12:29.763072Z", "url": "https://files.pythonhosted.org/packages/c1/ea/81f2d5309a9d2cc0ed926252767941a0ef4aca313f03f1ec39597e22966c/sigmacms-polymorphic-tree-1.2.6b0.tar.gz", "yanked": false}], "1.2.6b1": [{"comment_text": "", "digests": {"md5": "ea24687b6f9c5e1157c61633c33fa683", "sha256": "256dd2c7ffa495bf907136409fae9ca3cadf53bcfd4338afb83d0784316631ec"}, "downloads": -1, "filename": "sigmacms_polymorphic_tree-1.2.6b1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "ea24687b6f9c5e1157c61633c33fa683", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 47063, "upload_time": "2016-06-14T11:21:02", "upload_time_iso_8601": "2016-06-14T11:21:02.630169Z", "url": "https://files.pythonhosted.org/packages/07/c6/d9cd27816372dc7e9829a60a9371ea70c08018f5654ec5bb93394b58c175/sigmacms_polymorphic_tree-1.2.6b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01c7062438fb50cb13c9cd0e79f29707", "sha256": "b1e6d3770b1db02ac4e761435cbfa08e82342e69e68edc55fc574c8f95bff855"}, "downloads": -1, "filename": "sigmacms-polymorphic-tree-1.2.6b1.tar.gz", "has_sig": true, "md5_digest": "01c7062438fb50cb13c9cd0e79f29707", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39458, "upload_time": "2016-06-14T11:20:40", "upload_time_iso_8601": "2016-06-14T11:20:40.698216Z", "url": "https://files.pythonhosted.org/packages/0b/ed/9c4208b5b248d7c9e738d8cb5702f5373715ecc2093c9ddf62f6a05d898b/sigmacms-polymorphic-tree-1.2.6b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea24687b6f9c5e1157c61633c33fa683", "sha256": "256dd2c7ffa495bf907136409fae9ca3cadf53bcfd4338afb83d0784316631ec"}, "downloads": -1, "filename": "sigmacms_polymorphic_tree-1.2.6b1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "ea24687b6f9c5e1157c61633c33fa683", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 47063, "upload_time": "2016-06-14T11:21:02", "upload_time_iso_8601": "2016-06-14T11:21:02.630169Z", "url": "https://files.pythonhosted.org/packages/07/c6/d9cd27816372dc7e9829a60a9371ea70c08018f5654ec5bb93394b58c175/sigmacms_polymorphic_tree-1.2.6b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01c7062438fb50cb13c9cd0e79f29707", "sha256": "b1e6d3770b1db02ac4e761435cbfa08e82342e69e68edc55fc574c8f95bff855"}, "downloads": -1, "filename": "sigmacms-polymorphic-tree-1.2.6b1.tar.gz", "has_sig": true, "md5_digest": "01c7062438fb50cb13c9cd0e79f29707", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39458, "upload_time": "2016-06-14T11:20:40", "upload_time_iso_8601": "2016-06-14T11:20:40.698216Z", "url": "https://files.pythonhosted.org/packages/0b/ed/9c4208b5b248d7c9e738d8cb5702f5373715ecc2093c9ddf62f6a05d898b/sigmacms-polymorphic-tree-1.2.6b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:51 2020"}