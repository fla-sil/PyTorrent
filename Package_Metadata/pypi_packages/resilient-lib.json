{"info": {"author": "IBM Resilient", "author_email": "support@resilientsystems.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python"], "description": "### Recent Changes\n 2020-01-16: version 35.0.195\n \n \n \n * Added OAuth2 Client Credentials workflow handler\n \n * Added support for timeout argument in integrations config section\n \n \n\n<!-- Changelog will go here -->\n# Resilient Library for Integrations\n\nThis package contains common library calls which facilitate the development of functions for IBM Resilient.\n\n## Revision History\n\n|Revision | Notes    |\n|---------|----------|\n| v34     | Added timeout to [integrations]. For previous versions, this value should be added manually |\n\n## Modules in this package include:\n\n* function_results - A class to standardize on the payload returned from functions. In addition to integration results returned, meta-data about the integration execution environment is returned (see `function_results.ResultPayload`).\n\njson structure created:\n\n```\n{ \n  \"version\": \"1.0\",       -- used to track different versions of the payload\n  \"success\": True|False,\n  \"reason\": str,          -- a string to explain if success=False\n  \"content\": json,        -- the result of the function call\n  \"raw\": str,             -- a string representation of content. This is sometimes\n                             needed when the result of one function is piped into \n                             the next\n  \"inputs\": json,         -- a copy of the input parameters, useful for post-processor \n                             script use\n  \"metrics\": json         -- a set of information to capture specifics metrics \n                             about the function's runtime environment\n}\n```\n* function\\_metrics - A class to collect metrics information to be added to the resulting json payload. This is embedded in `function_results.ResultPayload`\n\njson structure created:\n\n```\n{\n    \"version\": \"1.0\",\n    \"package\": str,            -- function name\n    \"package_version\": str,    -- function version\n    \"host\": str,               -- hostname of execution node\n    \"execution_time_ms\": int   -- execution time of function in milliseconds\n    \"timestamp\": str           -- execution date/time formatted as: \n                                  yyyy-MM-dd hh:mm:ss\n}\n```\n* html2markdown - A class to convert html code to markdown. Parameters exist to customize the conversion to the type of markdown output required.\n* integration_errors - Contains a simple exception for function failures: `IntegrationError`\n* requests_common - A class of common code for making REST API calls with logic for proxies and standard return code handling.\n* resilient_common - Common code for interacting with Resilient. Functions include:\n      \n      * build\\_incident_url - Build a URL back to the issuing incident for 3rd party software reference.\n      * build\\_resilient_url - Build a URL to access resilient. Useful for API calls.\n      * clean_html - Remove html code from rich text fields. Data is concatenated together. Use html2markdown for better results.\n      * unescape - Restore data which has been encoded for URL transmission (ex. \\&gt; = >).\n      * validate_fields - Ensure require fields from Resilient or the app.config file are present.\n      * get\\_file_attachment - Return a byte string of a Resilient attachment related to an incident, task or artifact.\n      * get\\_file\\_attachment\\_name - Return the name of an attachment\n      * readable_datetime - Convert epoch formatted data and time value into a string.\n      * str\\_to_bool - Convert string values into boolean.\n\n## Prerequisites:\n\n```\nresilient version 30 or later\nresilient-circuits version 30 or later\n```\n\n## Usage examples:\n\n```\nfrom resilient_lib import build_incident_url, build_resilient_url\n\nurl_to_incident = build_incident_url(build_resilient_url(\"https://my.resilient.com\", \n                                     8443), 12345)\nself.assertEqual(\"https://my.resilient.com:8443/#incidents/12345\", url_to_incident)\n```\n\n```\nfrom resilient_lib import RequestsCommon\nfrom resilient_lib import ResultPayload\n\nfr = ResultPayload(pgkname, **function_params)\n\nreq_common = RequestsCommon(app_config_params, function_params)\nresult = req_common.execute_call('post', issue_url, payload, log=log,\n                                 basicauth=(function_params['user'], \n                                 function_params['password']), verify_flag= \n                                 function_params['verifyFlag'], headers=HTTP_HEADERS)\n\nresults_payload = fr.done(True, None, result)\n\n```\n\n```\nfrom resilient_lib import MarkdownParser\n\ndata = \"<div class='rte'><div><strong><u>underline and strong</u></strong></div></div>\"\nmarkdown = \"*_underline and strong_*\"\n\nparser = MarkdownParser(bold=\"*\", underline=\"_\") # override defaults\nconverted = parser.convert(data)\nself.assertEqual(converted, markdown)\n```\n* oauth2_client_credentials_session - has OAuth2ClientCredentialsSession class that \nstandardizes OAuth2 Client Credential flow's implementation. It subclasses `requests.Session` to\nprovide a convenient interaction.\n```\nUsage example:\n>>> api1 = OAuth2ClientCredentialsSession('https://example1.com/<tenant_id>/oauth/v2/',\\\n                    client_id='xxx', client_secret='xxx')\n>>> api2 = OAuth2ClientCredentialsSession('https://example2.com/<tenant_id>/oauth/v2/',\\\n                    client_id='xxx', client_secret='xxx')\n>>>\n>>> api1.post('https://example1.com/v4/me/messages', data={}) # use as a regular requests session object\n>>> api2.get('https://example2.com/v2/me/updates')\n>>> # When writing an integration, use RequestsCommon to get the proxies defined in in your app.config file.\n>>> rc = RequestsCommon(xxx)\n>>> api3 = OAuth2ClientCredentialsSession('https://example3.com/{}/test', proxies=rc.get_proxies())\n```\n## Installation\n\nInstall this package as:\n   \n```\n$ pip install resilient_lib-<version>.tar.gz\n```\n\n## Setup\n\nTo configure the library properties, run: `resilient-circuits config [-u | -c]`. \nThen edit the [integrations] section to define proxy settings which will be used for all integrations which use this library:\n\n```\n[integrations]\n# These proxy settings will be used by all integrations. \n# To override, add any parameter to your specific integration section\nhttp_proxy=\nhttps_proxy=\ntimeout=30\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ibmresilient/resilient-circuits-packages", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "resilient-lib", "package_url": "https://pypi.org/project/resilient-lib/", "platform": "any", "project_url": "https://pypi.org/project/resilient-lib/", "project_urls": {"Homepage": "https://github.com/ibmresilient/resilient-circuits-packages"}, "release_url": "https://pypi.org/project/resilient-lib/35.0.203/", "requires_dist": null, "requires_python": "", "summary": "library for resilient-circuits functions", "version": "35.0.203", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>Recent Changes</h3>\n<p>2020-01-16: version 35.0.195</p>\n<ul>\n<li>\n<p>Added OAuth2 Client Credentials workflow handler</p>\n</li>\n<li>\n<p>Added support for timeout argument in integrations config section</p>\n</li>\n</ul>\n\n<h1>Resilient Library for Integrations</h1>\n<p>This package contains common library calls which facilitate the development of functions for IBM Resilient.</p>\n<h2>Revision History</h2>\n<table>\n<thead>\n<tr>\n<th>Revision</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v34</td>\n<td>Added timeout to [integrations]. For previous versions, this value should be added manually</td>\n</tr></tbody></table>\n<h2>Modules in this package include:</h2>\n<ul>\n<li>function_results - A class to standardize on the payload returned from functions. In addition to integration results returned, meta-data about the integration execution environment is returned (see <code>function_results.ResultPayload</code>).</li>\n</ul>\n<p>json structure created:</p>\n<pre><code>{ \n  \"version\": \"1.0\",       -- used to track different versions of the payload\n  \"success\": True|False,\n  \"reason\": str,          -- a string to explain if success=False\n  \"content\": json,        -- the result of the function call\n  \"raw\": str,             -- a string representation of content. This is sometimes\n                             needed when the result of one function is piped into \n                             the next\n  \"inputs\": json,         -- a copy of the input parameters, useful for post-processor \n                             script use\n  \"metrics\": json         -- a set of information to capture specifics metrics \n                             about the function's runtime environment\n}\n</code></pre>\n<ul>\n<li>function_metrics - A class to collect metrics information to be added to the resulting json payload. This is embedded in <code>function_results.ResultPayload</code></li>\n</ul>\n<p>json structure created:</p>\n<pre><code>{\n    \"version\": \"1.0\",\n    \"package\": str,            -- function name\n    \"package_version\": str,    -- function version\n    \"host\": str,               -- hostname of execution node\n    \"execution_time_ms\": int   -- execution time of function in milliseconds\n    \"timestamp\": str           -- execution date/time formatted as: \n                                  yyyy-MM-dd hh:mm:ss\n}\n</code></pre>\n<ul>\n<li>\n<p>html2markdown - A class to convert html code to markdown. Parameters exist to customize the conversion to the type of markdown output required.</p>\n</li>\n<li>\n<p>integration_errors - Contains a simple exception for function failures: <code>IntegrationError</code></p>\n</li>\n<li>\n<p>requests_common - A class of common code for making REST API calls with logic for proxies and standard return code handling.</p>\n</li>\n<li>\n<p>resilient_common - Common code for interacting with Resilient. Functions include:</p>\n<pre><code>* build\\_incident_url - Build a URL back to the issuing incident for 3rd party software reference.\n* build\\_resilient_url - Build a URL to access resilient. Useful for API calls.\n* clean_html - Remove html code from rich text fields. Data is concatenated together. Use html2markdown for better results.\n* unescape - Restore data which has been encoded for URL transmission (ex. \\&amp;gt; = &gt;).\n* validate_fields - Ensure require fields from Resilient or the app.config file are present.\n* get\\_file_attachment - Return a byte string of a Resilient attachment related to an incident, task or artifact.\n* get\\_file\\_attachment\\_name - Return the name of an attachment\n* readable_datetime - Convert epoch formatted data and time value into a string.\n* str\\_to_bool - Convert string values into boolean.\n</code></pre>\n</li>\n</ul>\n<h2>Prerequisites:</h2>\n<pre><code>resilient version 30 or later\nresilient-circuits version 30 or later\n</code></pre>\n<h2>Usage examples:</h2>\n<pre><code>from resilient_lib import build_incident_url, build_resilient_url\n\nurl_to_incident = build_incident_url(build_resilient_url(\"https://my.resilient.com\", \n                                     8443), 12345)\nself.assertEqual(\"https://my.resilient.com:8443/#incidents/12345\", url_to_incident)\n</code></pre>\n<pre><code>from resilient_lib import RequestsCommon\nfrom resilient_lib import ResultPayload\n\nfr = ResultPayload(pgkname, **function_params)\n\nreq_common = RequestsCommon(app_config_params, function_params)\nresult = req_common.execute_call('post', issue_url, payload, log=log,\n                                 basicauth=(function_params['user'], \n                                 function_params['password']), verify_flag= \n                                 function_params['verifyFlag'], headers=HTTP_HEADERS)\n\nresults_payload = fr.done(True, None, result)\n\n</code></pre>\n<pre><code>from resilient_lib import MarkdownParser\n\ndata = \"&lt;div class='rte'&gt;&lt;div&gt;&lt;strong&gt;&lt;u&gt;underline and strong&lt;/u&gt;&lt;/strong&gt;&lt;/div&gt;&lt;/div&gt;\"\nmarkdown = \"*_underline and strong_*\"\n\nparser = MarkdownParser(bold=\"*\", underline=\"_\") # override defaults\nconverted = parser.convert(data)\nself.assertEqual(converted, markdown)\n</code></pre>\n<ul>\n<li>oauth2_client_credentials_session - has OAuth2ClientCredentialsSession class that\nstandardizes OAuth2 Client Credential flow's implementation. It subclasses <code>requests.Session</code> to\nprovide a convenient interaction.</li>\n</ul>\n<pre><code>Usage example:\n&gt;&gt;&gt; api1 = OAuth2ClientCredentialsSession('https://example1.com/&lt;tenant_id&gt;/oauth/v2/',\\\n                    client_id='xxx', client_secret='xxx')\n&gt;&gt;&gt; api2 = OAuth2ClientCredentialsSession('https://example2.com/&lt;tenant_id&gt;/oauth/v2/',\\\n                    client_id='xxx', client_secret='xxx')\n&gt;&gt;&gt;\n&gt;&gt;&gt; api1.post('https://example1.com/v4/me/messages', data={}) # use as a regular requests session object\n&gt;&gt;&gt; api2.get('https://example2.com/v2/me/updates')\n&gt;&gt;&gt; # When writing an integration, use RequestsCommon to get the proxies defined in in your app.config file.\n&gt;&gt;&gt; rc = RequestsCommon(xxx)\n&gt;&gt;&gt; api3 = OAuth2ClientCredentialsSession('https://example3.com/{}/test', proxies=rc.get_proxies())\n</code></pre>\n<h2>Installation</h2>\n<p>Install this package as:</p>\n<pre><code>$ pip install resilient_lib-&lt;version&gt;.tar.gz\n</code></pre>\n<h2>Setup</h2>\n<p>To configure the library properties, run: <code>resilient-circuits config [-u | -c]</code>.\nThen edit the [integrations] section to define proxy settings which will be used for all integrations which use this library:</p>\n<pre><code>[integrations]\n# These proxy settings will be used by all integrations. \n# To override, add any parameter to your specific integration section\nhttp_proxy=\nhttps_proxy=\ntimeout=30\n</code></pre>\n\n          </div>"}, "last_serial": 7086672, "releases": {"32.0.0": [{"comment_text": "", "digests": {"md5": "f595756a017efb7e627f034f4e2c0c5d", "sha256": "839647f9594b8921aabf6b11d760acb8d7ee330a1c718c4bb256dc4404295f82"}, "downloads": -1, "filename": "resilient_lib-32.0.0.tar.gz", "has_sig": true, "md5_digest": "f595756a017efb7e627f034f4e2c0c5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15244, "upload_time": "2019-01-15T19:44:32", "upload_time_iso_8601": "2019-01-15T19:44:32.692389Z", "url": "https://files.pythonhosted.org/packages/ea/1d/33e1a04953f8a848a57ed39d1ae066089b77880003b6e964d6f744e687c3/resilient_lib-32.0.0.tar.gz", "yanked": false}], "32.0.126": [{"comment_text": "", "digests": {"md5": "14453d31648d482ad8c4219d8bc20091", "sha256": "c215e0204b361af35eb3112da136ca393c95dbb23733a4ffdfad8dd70113ab40"}, "downloads": -1, "filename": "resilient_lib-32.0.126.tar.gz", "has_sig": true, "md5_digest": "14453d31648d482ad8c4219d8bc20091", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15727, "upload_time": "2019-03-07T21:22:27", "upload_time_iso_8601": "2019-03-07T21:22:27.872690Z", "url": "https://files.pythonhosted.org/packages/0b/48/28d2064436b06bf64eac7b8ce4efe8c2910c57be699228efe581f131ce84/resilient_lib-32.0.126.tar.gz", "yanked": false}], "32.0.140": [{"comment_text": "", "digests": {"md5": "10e628cade65118597746c10a69d293d", "sha256": "42e68eae375d94a6183f2d0fec7902e16e5cb7aa4373956e0af064fb212660f6"}, "downloads": -1, "filename": "resilient_lib-32.0.140.tar.gz", "has_sig": true, "md5_digest": "10e628cade65118597746c10a69d293d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16358, "upload_time": "2019-04-12T18:13:31", "upload_time_iso_8601": "2019-04-12T18:13:31.598716Z", "url": "https://files.pythonhosted.org/packages/f3/5b/364bf80bed8eb4a9f9892a4c470c496d84c1bf94711aff862cf68fe3b7c5/resilient_lib-32.0.140.tar.gz", "yanked": false}], "32.0.186": [{"comment_text": "", "digests": {"md5": "025e4dab42d704c7673ae0bf0be31007", "sha256": "aabc2e30bfec735eb135faec6c33892ae7f57076b5db30f66ec3cd469359200b"}, "downloads": -1, "filename": "resilient_lib-32.0.186.tar.gz", "has_sig": true, "md5_digest": "025e4dab42d704c7673ae0bf0be31007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18787, "upload_time": "2019-07-03T14:08:14", "upload_time_iso_8601": "2019-07-03T14:08:14.427681Z", "url": "https://files.pythonhosted.org/packages/7e/de/e7ccc6524333a9b5c98462c1ff3eca9969e27a7620f5005efdf9a2dc4c07/resilient_lib-32.0.186.tar.gz", "yanked": false}], "33.0.189": [{"comment_text": "", "digests": {"md5": "2ed7926e6cfd53f1fd6696f72d5ca9a6", "sha256": "52507a35c4911d0332109d345bd30f7be7765fcaf86cbfe1538c17a00ec7f1c1"}, "downloads": -1, "filename": "resilient_lib-33.0.189.tar.gz", "has_sig": true, "md5_digest": "2ed7926e6cfd53f1fd6696f72d5ca9a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21336, "upload_time": "2019-08-02T15:12:12", "upload_time_iso_8601": "2019-08-02T15:12:12.870364Z", "url": "https://files.pythonhosted.org/packages/3a/6c/b909f4a180ff5dd653a79d74814ac00752d7f98d5944261de9b581a9192a/resilient_lib-33.0.189.tar.gz", "yanked": false}], "34.0.195": [{"comment_text": "", "digests": {"md5": "c86dbae85b290f18bd9d6679780cbc18", "sha256": "418834b671d41a0924d07a86f9f8e415b3b0cabfadc017b3841285efb2a017e4"}, "downloads": -1, "filename": "resilient_lib-34.0.195.tar.gz", "has_sig": true, "md5_digest": "c86dbae85b290f18bd9d6679780cbc18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28312, "upload_time": "2019-10-21T17:50:18", "upload_time_iso_8601": "2019-10-21T17:50:18.576222Z", "url": "https://files.pythonhosted.org/packages/91/70/2bbb3b942470e305e01ad9dfd80ed9d1b936062fb11dcd4579726ed49ca2/resilient_lib-34.0.195.tar.gz", "yanked": false}], "35.0.0.dev0": [{"comment_text": "", "digests": {"md5": "0b6fa50e3b84fd7e7f3e3f7acd716a65", "sha256": "977853ced425cfa45b75c972bb995ba85fc8ed4a74f209adf09ff3f88e4f8393"}, "downloads": -1, "filename": "resilient_lib-35.0.0.dev0.tar.gz", "has_sig": true, "md5_digest": "0b6fa50e3b84fd7e7f3e3f7acd716a65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32427, "upload_time": "2020-01-20T19:07:27", "upload_time_iso_8601": "2020-01-20T19:07:27.549215Z", "url": "https://files.pythonhosted.org/packages/c2/a9/0ce74fa7f3b5b1499f4aabdbc8f83c406ed91037e3b7b62cf953e2e9d2d5/resilient_lib-35.0.0.dev0.tar.gz", "yanked": false}], "35.0.203": [{"comment_text": "", "digests": {"md5": "c63b9a3c28b88baea7cedddc4faef50e", "sha256": "86e5ca9d4cb21b7c19d58dde7860222d82f1f35e461ac83334c6751b6462724e"}, "downloads": -1, "filename": "resilient_lib-35.0.203.tar.gz", "has_sig": true, "md5_digest": "c63b9a3c28b88baea7cedddc4faef50e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32431, "upload_time": "2020-01-22T20:19:27", "upload_time_iso_8601": "2020-01-22T20:19:27.213029Z", "url": "https://files.pythonhosted.org/packages/1e/a0/7fde655b7b0e8f202538658719735aebb307b060e59769696f8f516399e1/resilient_lib-35.0.203.tar.gz", "yanked": false}], "36.2.209.dev0": [{"comment_text": "", "digests": {"md5": "50c5093b965435ff5c116521316b6659", "sha256": "0c29f283bdf92352a3bd694fbf4896e1d7c9726190c74a65ebe7cc78b1824a86"}, "downloads": -1, "filename": "resilient_lib-36.2.209.dev0.tar.gz", "has_sig": true, "md5_digest": "50c5093b965435ff5c116521316b6659", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32639, "upload_time": "2020-04-23T19:11:08", "upload_time_iso_8601": "2020-04-23T19:11:08.922506Z", "url": "https://files.pythonhosted.org/packages/7a/e7/62c7577d70f9a6fe23cd0fe3c0a3d33d0ca4d187be57a9b05a2ba02e9f75/resilient_lib-36.2.209.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c63b9a3c28b88baea7cedddc4faef50e", "sha256": "86e5ca9d4cb21b7c19d58dde7860222d82f1f35e461ac83334c6751b6462724e"}, "downloads": -1, "filename": "resilient_lib-35.0.203.tar.gz", "has_sig": true, "md5_digest": "c63b9a3c28b88baea7cedddc4faef50e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32431, "upload_time": "2020-01-22T20:19:27", "upload_time_iso_8601": "2020-01-22T20:19:27.213029Z", "url": "https://files.pythonhosted.org/packages/1e/a0/7fde655b7b0e8f202538658719735aebb307b060e59769696f8f516399e1/resilient_lib-35.0.203.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:51 2020"}