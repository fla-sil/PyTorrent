{"info": {"author": "Jean Yves Beaucamp (@jeanyvesb9), @jtambasco", "author_email": "jeanyvesb9@me.com", "bugtrack_url": null, "classifiers": [], "description": "# Rigol1000z\nPython library to control Rigol DS1000z series oscilloscopes based on the VISA protocol (PyVISA). The oscilloscope can be connected either by USB or by Ethernet to the local network (See PyVISA docs for more information).\n\nTested on Windows 10 and Arch Linux using a Rigol DS1054Z.\n\n## Dependencies\n* [numpy](https://github.com/numpy/numpy)\n* [pyvisa](https://github.com/pyvisa/pyvisa)\n* [tqdm](https://github.com/tqdm/tqdm)\n\n## Example\n```python\nimport visa\nimport Rigol1000z\n\nrm = visa.ResourceManager()\n\n# We are connecting the oscilloscope through USB here.\n# Only one VISA-compatible instrument is connected to our computer,\n# thus the first resource on the list is our oscilloscope.\n# You can see all connected and available local devices calling\n#\n# print(rm.list_resources())\n#\nosc_resource = rm.open_resource(rm.list_resources()[0])\n\nosc = Rigol1000z.Rigol1000z(osc_resource)\n\n# Change voltage range of channel 1 to 50mV/div.\nosc[1].set_vertical_scale_V_div(50e-3)\n\n# Stop the scope.\nosc.stop()\n\n# Take a screenshot.\nosc.get_screenshot('screenshot.png', 'png')\n\n# Capture the data sets from channels 1--4 and\n# write the data sets to their own file.\nfor c in range(1,5):\n    osc[c].get_data('raw', 'channel%i.dat' % c)\n```\n\n## Calling aditional commands\nThis library implements function interfaces to some of the most used SCPI commands available in the Rigol DS1000z series oscilloscopes. However, many more commands are available in the 'MSO1000z/DSO1000z Programming Guide' (http://int.rigol.com/File/TechDoc/20151218/MSO1000Z&DS1000Z_ProgrammingGuide_EN.pdf). I have not verified it, but it's probable that all options available in the physical and on-screen menus have corresponding SCPI commands. Users can send SCPI commands and receive information directly from the oscilloscope through the following methods:\n\n```python\nvisa_write(cmd)\n\n# Will read all bytes in the buffer until a termination character is found, \n# and interpret them as ASCII characters\nvisa_read()\n\n# Will read num_bytes bytes in the buffer, or until a termination caracter is found if\n# num_bytes == -1, and hand them out as binary information\nvisa_read_raw(num_bytes=-1):\n\n# Combines the functions of visa_write(cmd) and visa_read()\nvisa_ask(cmd):\n\n# Combines the functions of visa_write(cmd) and visa_read_raw()\nvisa_ask_raw(cmd, num_bytes=-1)\n```\n\n### Reading software measurements and statical data\n\nDue to the many possible combinations routines to receive statistics and measurements data are not preprogrammed, and have to be implemented by the user by using the direct VISA communication functions. For example:\n\n```python\n# Select channel 1 as an input to the hardware frequency counter\nscope.visa_write(':MEASure:COUNter:SOURce CHANnel1')\n\n# Turn on statistics display\nscope.visa_write(':MEASure:STATistic:DISPlay ON')\n# Change statistics mode to 'difference'\nscope.visa_write(':MEASure:STATistic:MODE DIFFerence')\n\n\n# We can have up to five different measurementes displayed\n# on the oscilloscope screen at the same time\n\n# Select Vpp measurement on channel 1 to be displayed\nscope.visa_write(':MEASure:STATistic:ITEM VPP,CHANnel1')\n# Select Vpp measurement on channel 2 to be displayed\nscope.visa_write(':MEASure:STATistic:ITEM VPP,CHANnel2')\n# Select Rising Edge Delay measurement between channel 1 and\n# channel 2 to be displayed\nscope.visa_write(':MEASure:STATistic:ITEM RDELay,CHANnel1,CHANnel2')\n\n# Clear the statistical results in memory\nscope.visa_write(':MEASure:STATistic:RESet')\n\n\n# We can read the statistical results (averages, maximums, minimums, deviations, etc.)\n# or the current values of the measurements enabled above.\n# Numeric results are given in ASCII scientific notation, so a quick conversion\n# to float is needed\n\nvin = float(scope.visa_ask(':MEASure:STATistic:ITEM? AVERages,VPP,CHANnel1'))\nvout = float(scope.visa_ask(':MEASure:STATistic:ITEM? AVERages,VPP,CHANnel2'))\ndelay = float(scope.visa_ask(':MEASure:STATistic:ITEM? AVERages,RDELay'))\nfreq = float(scope.visa_ask(':MEASure:COUNter:VALue?'))\n```\n\nAn full implementation of a manual frequency sweep bode plot measurement is available in the _examples_ folder.\n\n\n## Acknowledgements\nBased on the original work by @jtambasco. I have done a code cleanup, a couple of bug fixes and a complete rewrite of the backend, now with a PyVISA dependency in order to make this library cross-platform. Also improved documentation and added examples.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jeanyvesb9/Rigol1000z", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Rigol1000z", "package_url": "https://pypi.org/project/Rigol1000z/", "platform": "", "project_url": "https://pypi.org/project/Rigol1000z/", "project_urls": {"Homepage": "https://github.com/jeanyvesb9/Rigol1000z"}, "release_url": "https://pypi.org/project/Rigol1000z/0.2.2/", "requires_dist": null, "requires_python": "", "summary": "Python VISA (USB and Ethernet) library to control Rigol DS1000z series oscilloscopes.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Rigol1000z</h1>\n<p>Python library to control Rigol DS1000z series oscilloscopes based on the VISA protocol (PyVISA). The oscilloscope can be connected either by USB or by Ethernet to the local network (See PyVISA docs for more information).</p>\n<p>Tested on Windows 10 and Arch Linux using a Rigol DS1054Z.</p>\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://github.com/numpy/numpy\" rel=\"nofollow\">numpy</a></li>\n<li><a href=\"https://github.com/pyvisa/pyvisa\" rel=\"nofollow\">pyvisa</a></li>\n<li><a href=\"https://github.com/tqdm/tqdm\" rel=\"nofollow\">tqdm</a></li>\n</ul>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">visa</span>\n<span class=\"kn\">import</span> <span class=\"nn\">Rigol1000z</span>\n\n<span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">visa</span><span class=\"o\">.</span><span class=\"n\">ResourceManager</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># We are connecting the oscilloscope through USB here.</span>\n<span class=\"c1\"># Only one VISA-compatible instrument is connected to our computer,</span>\n<span class=\"c1\"># thus the first resource on the list is our oscilloscope.</span>\n<span class=\"c1\"># You can see all connected and available local devices calling</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># print(rm.list_resources())</span>\n<span class=\"c1\">#</span>\n<span class=\"n\">osc_resource</span> <span class=\"o\">=</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">open_resource</span><span class=\"p\">(</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">list_resources</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">osc</span> <span class=\"o\">=</span> <span class=\"n\">Rigol1000z</span><span class=\"o\">.</span><span class=\"n\">Rigol1000z</span><span class=\"p\">(</span><span class=\"n\">osc_resource</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Change voltage range of channel 1 to 50mV/div.</span>\n<span class=\"n\">osc</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_vertical_scale_V_div</span><span class=\"p\">(</span><span class=\"mf\">50e-3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Stop the scope.</span>\n<span class=\"n\">osc</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Take a screenshot.</span>\n<span class=\"n\">osc</span><span class=\"o\">.</span><span class=\"n\">get_screenshot</span><span class=\"p\">(</span><span class=\"s1\">'screenshot.png'</span><span class=\"p\">,</span> <span class=\"s1\">'png'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Capture the data sets from channels 1--4 and</span>\n<span class=\"c1\"># write the data sets to their own file.</span>\n<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"n\">osc</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"s1\">'raw'</span><span class=\"p\">,</span> <span class=\"s1\">'channel</span><span class=\"si\">%i</span><span class=\"s1\">.dat'</span> <span class=\"o\">%</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n</pre>\n<h2>Calling aditional commands</h2>\n<p>This library implements function interfaces to some of the most used SCPI commands available in the Rigol DS1000z series oscilloscopes. However, many more commands are available in the 'MSO1000z/DSO1000z Programming Guide' (<a href=\"http://int.rigol.com/File/TechDoc/20151218/MSO1000Z&amp;DS1000Z_ProgrammingGuide_EN.pdf\" rel=\"nofollow\">http://int.rigol.com/File/TechDoc/20151218/MSO1000Z&amp;DS1000Z_ProgrammingGuide_EN.pdf</a>). I have not verified it, but it's probable that all options available in the physical and on-screen menus have corresponding SCPI commands. Users can send SCPI commands and receive information directly from the oscilloscope through the following methods:</p>\n<pre><span class=\"n\">visa_write</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Will read all bytes in the buffer until a termination character is found, </span>\n<span class=\"c1\"># and interpret them as ASCII characters</span>\n<span class=\"n\">visa_read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Will read num_bytes bytes in the buffer, or until a termination caracter is found if</span>\n<span class=\"c1\"># num_bytes == -1, and hand them out as binary information</span>\n<span class=\"n\">visa_read_raw</span><span class=\"p\">(</span><span class=\"n\">num_bytes</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># Combines the functions of visa_write(cmd) and visa_read()</span>\n<span class=\"n\">visa_ask</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># Combines the functions of visa_write(cmd) and visa_read_raw()</span>\n<span class=\"n\">visa_ask_raw</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">num_bytes</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h3>Reading software measurements and statical data</h3>\n<p>Due to the many possible combinations routines to receive statistics and measurements data are not preprogrammed, and have to be implemented by the user by using the direct VISA communication functions. For example:</p>\n<pre><span class=\"c1\"># Select channel 1 as an input to the hardware frequency counter</span>\n<span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_write</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:COUNter:SOURce CHANnel1'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Turn on statistics display</span>\n<span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_write</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:STATistic:DISPlay ON'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Change statistics mode to 'difference'</span>\n<span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_write</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:STATistic:MODE DIFFerence'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># We can have up to five different measurementes displayed</span>\n<span class=\"c1\"># on the oscilloscope screen at the same time</span>\n\n<span class=\"c1\"># Select Vpp measurement on channel 1 to be displayed</span>\n<span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_write</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:STATistic:ITEM VPP,CHANnel1'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Select Vpp measurement on channel 2 to be displayed</span>\n<span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_write</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:STATistic:ITEM VPP,CHANnel2'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Select Rising Edge Delay measurement between channel 1 and</span>\n<span class=\"c1\"># channel 2 to be displayed</span>\n<span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_write</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:STATistic:ITEM RDELay,CHANnel1,CHANnel2'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Clear the statistical results in memory</span>\n<span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_write</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:STATistic:RESet'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># We can read the statistical results (averages, maximums, minimums, deviations, etc.)</span>\n<span class=\"c1\"># or the current values of the measurements enabled above.</span>\n<span class=\"c1\"># Numeric results are given in ASCII scientific notation, so a quick conversion</span>\n<span class=\"c1\"># to float is needed</span>\n\n<span class=\"n\">vin</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_ask</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:STATistic:ITEM? AVERages,VPP,CHANnel1'</span><span class=\"p\">))</span>\n<span class=\"n\">vout</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_ask</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:STATistic:ITEM? AVERages,VPP,CHANnel2'</span><span class=\"p\">))</span>\n<span class=\"n\">delay</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_ask</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:STATistic:ITEM? AVERages,RDELay'</span><span class=\"p\">))</span>\n<span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">visa_ask</span><span class=\"p\">(</span><span class=\"s1\">':MEASure:COUNter:VALue?'</span><span class=\"p\">))</span>\n</pre>\n<p>An full implementation of a manual frequency sweep bode plot measurement is available in the <em>examples</em> folder.</p>\n<h2>Acknowledgements</h2>\n<p>Based on the original work by @jtambasco. I have done a code cleanup, a couple of bug fixes and a complete rewrite of the backend, now with a PyVISA dependency in order to make this library cross-platform. Also improved documentation and added examples.</p>\n\n          </div>"}, "last_serial": 5005928, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "6a71740a7be7434c8ee64c55c4809f15", "sha256": "1d81c810ef5e5258bccd0ec2aa62207e7a91793b381b3aae4ba618d3ec8201e6"}, "downloads": -1, "filename": "Rigol1000z-0.2.2-py3.6.egg", "has_sig": false, "md5_digest": "6a71740a7be7434c8ee64c55c4809f15", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 12791, "upload_time": "2019-03-30T02:39:43", "upload_time_iso_8601": "2019-03-30T02:39:43.757879Z", "url": "https://files.pythonhosted.org/packages/d1/b1/47be990879972b5ca409bbc1e1f3efd7a114f34e0efbf0626181d001bc14/Rigol1000z-0.2.2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e2e1f84973c26c6d1598840160f2cba", "sha256": "d5240092b541c0434dd1ab4420f303664a4fdcfcd3ec07fb64aa56644cf59998"}, "downloads": -1, "filename": "Rigol1000z-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9e2e1f84973c26c6d1598840160f2cba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7422, "upload_time": "2019-03-30T02:39:42", "upload_time_iso_8601": "2019-03-30T02:39:42.454156Z", "url": "https://files.pythonhosted.org/packages/0e/3d/665a4dbedc6725936204ac0e6b850cca7eef3e08cc130251e93849f98792/Rigol1000z-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41c44e26a52acc241052e67e8db68743", "sha256": "1c5c88656669bcfd6dfd418c0a1e0e48f31bf496f4b9cbdbe533f6fdebc27bb2"}, "downloads": -1, "filename": "Rigol1000z-0.2.2.tar.gz", "has_sig": false, "md5_digest": "41c44e26a52acc241052e67e8db68743", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6298, "upload_time": "2019-03-30T02:39:45", "upload_time_iso_8601": "2019-03-30T02:39:45.145164Z", "url": "https://files.pythonhosted.org/packages/1b/37/cac495dd07288474bd9770cf27306ff96955fce389469a1550085046e641/Rigol1000z-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6a71740a7be7434c8ee64c55c4809f15", "sha256": "1d81c810ef5e5258bccd0ec2aa62207e7a91793b381b3aae4ba618d3ec8201e6"}, "downloads": -1, "filename": "Rigol1000z-0.2.2-py3.6.egg", "has_sig": false, "md5_digest": "6a71740a7be7434c8ee64c55c4809f15", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 12791, "upload_time": "2019-03-30T02:39:43", "upload_time_iso_8601": "2019-03-30T02:39:43.757879Z", "url": "https://files.pythonhosted.org/packages/d1/b1/47be990879972b5ca409bbc1e1f3efd7a114f34e0efbf0626181d001bc14/Rigol1000z-0.2.2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e2e1f84973c26c6d1598840160f2cba", "sha256": "d5240092b541c0434dd1ab4420f303664a4fdcfcd3ec07fb64aa56644cf59998"}, "downloads": -1, "filename": "Rigol1000z-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9e2e1f84973c26c6d1598840160f2cba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7422, "upload_time": "2019-03-30T02:39:42", "upload_time_iso_8601": "2019-03-30T02:39:42.454156Z", "url": "https://files.pythonhosted.org/packages/0e/3d/665a4dbedc6725936204ac0e6b850cca7eef3e08cc130251e93849f98792/Rigol1000z-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41c44e26a52acc241052e67e8db68743", "sha256": "1c5c88656669bcfd6dfd418c0a1e0e48f31bf496f4b9cbdbe533f6fdebc27bb2"}, "downloads": -1, "filename": "Rigol1000z-0.2.2.tar.gz", "has_sig": false, "md5_digest": "41c44e26a52acc241052e67e8db68743", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6298, "upload_time": "2019-03-30T02:39:45", "upload_time_iso_8601": "2019-03-30T02:39:45.145164Z", "url": "https://files.pythonhosted.org/packages/1b/37/cac495dd07288474bd9770cf27306ff96955fce389469a1550085046e641/Rigol1000z-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:40 2020"}