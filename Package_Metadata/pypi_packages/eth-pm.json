{"info": {"author": "Piper Merriam", "author_email": "pipermerriam@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "ETHPM\n=====\n\n-  parse and validate packages\n-  given a web3 instance provide access to contract factory classes\n-  given a web3 instance provide access to all of the deployed contract\n   instances for the chain that web3 is connected to.\n-  validate package bytecode matches compilation output.\n-  validate deployed bytecode matches compilation output\n-  access to packages dependencies\n-  construct new packages\n\nWeb3\n----\n\nThe ``Package`` object will function much like the ``Contract`` class\nprovided by ``web3``. Rather than instantiating the base class provided\nby ``ethpm``, you will instead use a ``classmethod`` which generates a\nnew ``Package`` class for a given package.\n\n.. code:: python\n\n   OwnedPackage = BasePackage.factory('/path/to/owned-v1.0.0.json')\n\nThen, the ``OwnedPackage`` can be instantiated with any ``web3``\nintance.\n\n.. code:: python\n\n   owned_package = OwnedPackage(web3)\n\nA ``Package`` class can only be directly constructed from the parsed\npackage JSON. It can also be initialized with the package\u2019s URI or the\nlocal filesystem path to a package by using ``Package.from_file(path)``.\n\nContract Factories\n------------------\n\nContract factories should be accessible from the package class but you\nmust also provide a web3 instance.\n\n.. code:: python\n\n   Owned = OwnedPackage.get_contract_factory(web3, 'owned')\n\nFrom a package instance, they are also available as properties.\n\n.. code:: python\n\n   Owned = owned_package.contract_factories.owned\n\nIn cases where a contract uses a library, the contract factory will have\nunlinked bytecode. The ``ethpm`` package ships with its own subclass of\n``web3.contract.Contract`` with a few extra methods and properties\nrelated to bytecode linking\n\n.. code:: python\n\n   >>> math = owned_package.contract_factories.math\n   >>> math.has_linkable_bytecode\n   True\n   >>> math.is_bytecode_linked\n   False\n   >>> linked_math = math.link_bytecode({'MathLib': '0x1234...'})\n   >>> linked_math.is_bytecode_linked\n   True\n\n..\n\n   Note: the actual format of the link data is not clear since library\n   names aren\u2019t a one-size-fits all solution. We need the ability to\n   specify specific link references in the code.\n\nDeployed Contracts\n------------------\n\nDeployed contracts are only available from package instances. The\npackage instance will filter the ``deployments`` based on the chain that\n``web3`` is connected to.\n\nAccessing deployments is done with property access\n\n.. code:: python\n\n   package.deployed_contracts.Greeter\n\nIPFS\n----\n\nWe\u2019ll need a pluggable backend system for IPFS access. A built-in\ndefault one that defaults to using infura should be enough to get off\nthe ground.\n\nLower priority but important will be ensuring that a user can configure\nconnecting to their own IPFS node.\n\nVerifying Things\n----------------\n\nThe ``Package`` class should verify all of the following things.\n\n-  Package json matches EthPM V2 Manifest Specification\n-  Included bytecode matches compilation output\n-  Deployed bytecode matches compilation output\n\nDependencies\n------------\n\nThe ``Package`` class should provide access to the full dependency tree.\n\n.. code:: python\n\n   >>> owned_package.build_dependencies['zeppelin']\n   <ZeppelinPackage>\n\nTesting Strategy\n----------------\n\n-  Load and validate packages from disk.\n-  Access package data.\n-  Access contract factories.\n\nEthPM-Spec\n----------\n\n-  `EthPM-Spec <https://github.com/ethpm/ethpm-spec>`__ is referenced\n   inside this repo as a submodule.*\\*\n-  If you clone this repository, you should run this command to fetch\n   the contents of the submodule\n\n.. code:: sh\n\n   git submodule init\n\nRegistry URI\n------------\n\nThe URI to lookup a package from a registry should follow the following\nformat. (subject to change as the Registry Contract Standard makes it\u2019s\nway through the EIP process)\n\n::\n\n   scheme://authority/package-name?version=x.x.x\n\n-  URI must be a string type\n-  ``scheme``: ``ercxxx``\n-  ``authority``: Must be a valid ENS domain or a valid checksum address\n   pointing towards a registry contract.\n-  ``package-name``: Must conform to the package-name as specified in\n   the\n   `EthPM-Spec <http://ethpm-spec.readthedocs.io/en/latest/package-spec.html#package-name>`__.\n-  ``version``: The URI escaped version string, *should* conform to the\n   `semver <http://semver.org/>`__ version numbering specification.\n\ni.e. ``ercxxx://packages.zeppelinos.eth/owned?version=1.0.0``\n\nRelease setup\n-------------\n\nFor Debian-like systems:\n\n.. code:: sh\n\n   apt install pandoc\n\nTo release a new version:\n\n.. code:: sh\n\n   make release bump=$$VERSION_PART_TO_BUMP$$\n\nHow to bumpversion\n------------------\n\nThe version format for this repo is ``{major}.{minor}.{patch}`` for\nstable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\n(``stage`` can be alpha or beta).\n\nTo issue the next version in line, specify which part to bump, like\n``make release bump=minor`` or ``make release bump=devnum``.\n\nIf you are in a beta version, ``make release bump=stage`` will switch to\na stable.\n\nTo issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n``make release bump=\"--new-version 4.0.0-alpha.1 devnum\"``\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ethpm/py-ethpm", "keywords": "ethereum", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "eth-pm", "package_url": "https://pypi.org/project/eth-pm/", "platform": "", "project_url": "https://pypi.org/project/eth-pm/", "project_urls": {"Homepage": "https://github.com/ethpm/py-ethpm"}, "release_url": "https://pypi.org/project/eth-pm/0.1.0a23/", "requires_dist": null, "requires_python": "", "summary": "Python abstraction for ERC190 packages.", "version": "0.1.0a23", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li>parse and validate packages</li>\n<li>given a web3 instance provide access to contract factory classes</li>\n<li>given a web3 instance provide access to all of the deployed contract\ninstances for the chain that web3 is connected to.</li>\n<li>validate package bytecode matches compilation output.</li>\n<li>validate deployed bytecode matches compilation output</li>\n<li>access to packages dependencies</li>\n<li>construct new packages</li>\n</ul>\n<div id=\"web3\">\n<h2>Web3</h2>\n<p>The <tt>Package</tt> object will function much like the <tt>Contract</tt> class\nprovided by <tt>web3</tt>. Rather than instantiating the base class provided\nby <tt>ethpm</tt>, you will instead use a <tt>classmethod</tt> which generates a\nnew <tt>Package</tt> class for a given package.</p>\n<pre><span class=\"n\">OwnedPackage</span> <span class=\"o\">=</span> <span class=\"n\">BasePackage</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/owned-v1.0.0.json'</span><span class=\"p\">)</span>\n</pre>\n<p>Then, the <tt>OwnedPackage</tt> can be instantiated with any <tt>web3</tt>\nintance.</p>\n<pre><span class=\"n\">owned_package</span> <span class=\"o\">=</span> <span class=\"n\">OwnedPackage</span><span class=\"p\">(</span><span class=\"n\">web3</span><span class=\"p\">)</span>\n</pre>\n<p>A <tt>Package</tt> class can only be directly constructed from the parsed\npackage JSON. It can also be initialized with the package\u2019s URI or the\nlocal filesystem path to a package by using <tt>Package.from_file(path)</tt>.</p>\n</div>\n<div id=\"contract-factories\">\n<h2>Contract Factories</h2>\n<p>Contract factories should be accessible from the package class but you\nmust also provide a web3 instance.</p>\n<pre><span class=\"n\">Owned</span> <span class=\"o\">=</span> <span class=\"n\">OwnedPackage</span><span class=\"o\">.</span><span class=\"n\">get_contract_factory</span><span class=\"p\">(</span><span class=\"n\">web3</span><span class=\"p\">,</span> <span class=\"s1\">'owned'</span><span class=\"p\">)</span>\n</pre>\n<p>From a package instance, they are also available as properties.</p>\n<pre><span class=\"n\">Owned</span> <span class=\"o\">=</span> <span class=\"n\">owned_package</span><span class=\"o\">.</span><span class=\"n\">contract_factories</span><span class=\"o\">.</span><span class=\"n\">owned</span>\n</pre>\n<p>In cases where a contract uses a library, the contract factory will have\nunlinked bytecode. The <tt>ethpm</tt> package ships with its own subclass of\n<tt>web3.contract.Contract</tt> with a few extra methods and properties\nrelated to bytecode linking</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">math</span> <span class=\"o\">=</span> <span class=\"n\">owned_package</span><span class=\"o\">.</span><span class=\"n\">contract_factories</span><span class=\"o\">.</span><span class=\"n\">math</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">has_linkable_bytecode</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">is_bytecode_linked</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">linked_math</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">link_bytecode</span><span class=\"p\">({</span><span class=\"s1\">'MathLib'</span><span class=\"p\">:</span> <span class=\"s1\">'0x1234...'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">linked_math</span><span class=\"o\">.</span><span class=\"n\">is_bytecode_linked</span>\n<span class=\"kc\">True</span>\n</pre>\n<blockquote>\nNote: the actual format of the link data is not clear since library\nnames aren\u2019t a one-size-fits all solution. We need the ability to\nspecify specific link references in the code.</blockquote>\n</div>\n<div id=\"deployed-contracts\">\n<h2>Deployed Contracts</h2>\n<p>Deployed contracts are only available from package instances. The\npackage instance will filter the <tt>deployments</tt> based on the chain that\n<tt>web3</tt> is connected to.</p>\n<p>Accessing deployments is done with property access</p>\n<pre><span class=\"n\">package</span><span class=\"o\">.</span><span class=\"n\">deployed_contracts</span><span class=\"o\">.</span><span class=\"n\">Greeter</span>\n</pre>\n</div>\n<div id=\"ipfs\">\n<h2>IPFS</h2>\n<p>We\u2019ll need a pluggable backend system for IPFS access. A built-in\ndefault one that defaults to using infura should be enough to get off\nthe ground.</p>\n<p>Lower priority but important will be ensuring that a user can configure\nconnecting to their own IPFS node.</p>\n</div>\n<div id=\"verifying-things\">\n<h2>Verifying Things</h2>\n<p>The <tt>Package</tt> class should verify all of the following things.</p>\n<ul>\n<li>Package json matches EthPM V2 Manifest Specification</li>\n<li>Included bytecode matches compilation output</li>\n<li>Deployed bytecode matches compilation output</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>The <tt>Package</tt> class should provide access to the full dependency tree.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">owned_package</span><span class=\"o\">.</span><span class=\"n\">build_dependencies</span><span class=\"p\">[</span><span class=\"s1\">'zeppelin'</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ZeppelinPackage</span><span class=\"o\">&gt;</span>\n</pre>\n</div>\n<div id=\"testing-strategy\">\n<h2>Testing Strategy</h2>\n<ul>\n<li>Load and validate packages from disk.</li>\n<li>Access package data.</li>\n<li>Access contract factories.</li>\n</ul>\n</div>\n<div id=\"ethpm-spec\">\n<h2>EthPM-Spec</h2>\n<ul>\n<li><a href=\"https://github.com/ethpm/ethpm-spec\" rel=\"nofollow\">EthPM-Spec</a> is referenced\ninside this repo as a submodule.**</li>\n<li>If you clone this repository, you should run this command to fetch\nthe contents of the submodule</li>\n</ul>\n<pre>git submodule init\n</pre>\n</div>\n<div id=\"registry-uri\">\n<h2>Registry URI</h2>\n<p>The URI to lookup a package from a registry should follow the following\nformat. (subject to change as the Registry Contract Standard makes it\u2019s\nway through the EIP process)</p>\n<pre>scheme://authority/package-name?version=x.x.x\n</pre>\n<ul>\n<li>URI must be a string type</li>\n<li><tt>scheme</tt>: <tt>ercxxx</tt></li>\n<li><tt>authority</tt>: Must be a valid ENS domain or a valid checksum address\npointing towards a registry contract.</li>\n<li><tt><span class=\"pre\">package-name</span></tt>: Must conform to the package-name as specified in\nthe\n<a href=\"http://ethpm-spec.readthedocs.io/en/latest/package-spec.html#package-name\" rel=\"nofollow\">EthPM-Spec</a>.</li>\n<li><tt>version</tt>: The URI escaped version string, <em>should</em> conform to the\n<a href=\"http://semver.org/\" rel=\"nofollow\">semver</a> version numbering specification.</li>\n</ul>\n<p>i.e. <tt><span class=\"pre\">ercxxx://packages.zeppelinos.eth/owned?version=1.0.0</span></tt></p>\n</div>\n<div id=\"release-setup\">\n<h2>Release setup</h2>\n<p>For Debian-like systems:</p>\n<pre>apt install pandoc\n</pre>\n<p>To release a new version:</p>\n<pre>make release <span class=\"nv\">bump</span><span class=\"o\">=</span><span class=\"nv\">$$</span>VERSION_PART_TO_BUMP<span class=\"nv\">$$</span>\n</pre>\n</div>\n<div id=\"how-to-bumpversion\">\n<h2>How to bumpversion</h2>\n<p>The version format for this repo is <tt><span class=\"pre\">{major}.{minor}.{patch}</span></tt> for\nstable, and <tt><span class=\"pre\">{major}.{minor}.{patch}-{stage}.{devnum}</span></tt> for unstable\n(<tt>stage</tt> can be alpha or beta).</p>\n<p>To issue the next version in line, specify which part to bump, like\n<tt>make release bump=minor</tt> or <tt>make release bump=devnum</tt>.</p>\n<p>If you are in a beta version, <tt>make release bump=stage</tt> will switch to\na stable.</p>\n<p>To issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n<tt>make release <span class=\"pre\">bump=\"--new-version</span> <span class=\"pre\">4.0.0-alpha.1</span> devnum\"</tt></p>\n</div>\n\n          </div>"}, "last_serial": 4201125, "releases": {"0.1.0a23": [{"comment_text": "", "digests": {"md5": "fea9c5e0ec377b137d2c744283e5df79", "sha256": "4ca2fdc40c3812c7421f3dec8bffafaadee53622e2fafdd0f6225745e65830f4"}, "downloads": -1, "filename": "eth_pm-0.1.0a23-py3-none-any.whl", "has_sig": false, "md5_digest": "fea9c5e0ec377b137d2c744283e5df79", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 15741, "upload_time": "2018-06-29T16:07:58", "upload_time_iso_8601": "2018-06-29T16:07:58.568505Z", "url": "https://files.pythonhosted.org/packages/e5/be/4479ae9bec1fc02b829b9f273ac1facccb1f732f03098017f44c3c72e75e/eth_pm-0.1.0a23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea8b41b73e436d4f4e276b4b6a23db11", "sha256": "4cdbf0c2dfc9a0d7aa9348e5ac4b8aad6ccdded8c560056b556d0b39cff087de"}, "downloads": -1, "filename": "eth-pm-0.1.0a23.tar.gz", "has_sig": false, "md5_digest": "ea8b41b73e436d4f4e276b4b6a23db11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14685, "upload_time": "2018-06-29T16:07:57", "upload_time_iso_8601": "2018-06-29T16:07:57.456986Z", "url": "https://files.pythonhosted.org/packages/cb/18/d92dc1fe819430dc6b1395db55ddaaf2316b0c288cc2d9ec9c42079d5cfe/eth-pm-0.1.0a23.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fea9c5e0ec377b137d2c744283e5df79", "sha256": "4ca2fdc40c3812c7421f3dec8bffafaadee53622e2fafdd0f6225745e65830f4"}, "downloads": -1, "filename": "eth_pm-0.1.0a23-py3-none-any.whl", "has_sig": false, "md5_digest": "fea9c5e0ec377b137d2c744283e5df79", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 15741, "upload_time": "2018-06-29T16:07:58", "upload_time_iso_8601": "2018-06-29T16:07:58.568505Z", "url": "https://files.pythonhosted.org/packages/e5/be/4479ae9bec1fc02b829b9f273ac1facccb1f732f03098017f44c3c72e75e/eth_pm-0.1.0a23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea8b41b73e436d4f4e276b4b6a23db11", "sha256": "4cdbf0c2dfc9a0d7aa9348e5ac4b8aad6ccdded8c560056b556d0b39cff087de"}, "downloads": -1, "filename": "eth-pm-0.1.0a23.tar.gz", "has_sig": false, "md5_digest": "ea8b41b73e436d4f4e276b4b6a23db11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14685, "upload_time": "2018-06-29T16:07:57", "upload_time_iso_8601": "2018-06-29T16:07:57.456986Z", "url": "https://files.pythonhosted.org/packages/cb/18/d92dc1fe819430dc6b1395db55ddaaf2316b0c288cc2d9ec9c42079d5cfe/eth-pm-0.1.0a23.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:26 2020"}