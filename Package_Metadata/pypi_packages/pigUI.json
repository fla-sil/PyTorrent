{"info": {"author": "s0lst1ce", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<p align=\"center\">\n  <img width=\"256\" height=\"256\" src=\"https://github.com/s0lst1ce/assets/blob/master/pig.png\">\n</p>\n\n# pigUI\n\npigUI is a GUI toolkit for [Pygame](https://www.pygame.org/news). It provides objects that enables anyone to easily implement a GUI into their game without having to modify their game logic in any major way.\n\n\u200b\tTo do this pigUI provides a set of widgets such as Labels and Buttons which are organized into Containers. Containers are like \"boxes\" into which you can put your widgets. All widgets must be contained in order to be displayed.\n\n\n\n## Quickstart\n\nTo demonstrate how the library works, a `demo.py` example program has been made. In this quick preview we'll explain the principles used in the demo.\n\n### Setting up environment\n\nAlthough this won't be the case in bigger games the demo defines all widgets at the beginning of the program.\n\n```python\nimport pygame as pg\nfrom pigui import *\n\n#display\nWIDTH = 800\nHEIGHT = 600\npg.init()\nwindow = pg.display.set_mode((WIDTH, HEIGHT))\npg.display.set_caption(\"A Pygame GUI library by s0lst1ce\")\nclock = pg.time.Clock()\nrunning = True\n\n#env\ndispatcher = Dispatcher.get()\nc = Container.from_background(50, 10, os.path.join(\"..\", \"png\", \"windows\", \"Window\", \"win6.png\"))\nt = Label.from_background(os.path.join(\"..\", \"png\", \"button\", \"blank\", \"textbg1.png\"), text=\"Hello World!\", offset=(25, 0))\nc.add(t, 50, 16)\nentities = [c]\n```\n\nThe 11 first lines are just Pygame display setup, the interesting part comes after that. There are two objects that will be created with pigUI which aren't widgets. The first one is Dispatcher. This object will process all events for the library and will need to be integrated to the event loop. But more on that in the next section. Just remember that you need to call the `get()` classmethod on it.\n\nNext comes the Container. As explained earlier this is like a box into which the widgets will be put. Here we create it from a background image. The first two parameters represents the coordinates at which the container should be placed. This can be changed later on. Next comes the path to the background image to load. This can also be a Pygame Surface.\n\nFinally we create our widgets and add them the container. \n\n\n\n### The event loop\n\nTo function properly pigUI requires an event loop. Since almost every game has one anyways this shouldn't be a problem in most cases. If you already have one: don't worry. You'll only need to add one line. The event loop loop of the demo is the following:\n\n```python\ndef events():\n\t'''processes events'''\n\tglobal running\n\tglobal dispatcher\n\n\tpressed_keys = pg.key.get_pressed()\n\tevents = pg.event.get()\n\tfor event in events:\n\t\tif event.type == pg.QUIT or pressed_keys[pg.K_ESCAPE]:\n\t\t\trunning=False\n\n\tdispatcher.process(events)\n```\n\n\n\nAs you can see the only place where pigUI is involved is at the last lines. And that's really all that needs to be done event-wise. Supply all events which occurred this tick to the dispatcher's `process` method and you're done with it. This allows you to keep your logic readable and concise at the same time.\n\n\n\n### The main loop\n\nNow comes the core of every game: the main loop. Also called the game loop, this is where the game's logic happens. In the major part it exists to update the different objects your game is made of. pigUI uses it to update it's widgets. However to keep it simple and concise it was built in such way that you only need to call the `update` method of all your containers. They will themselves determine if their widgets need to be updated, how and when.\n\n```python\ndef update():\n\t'''ran each tick handles all modification based on occured events'''\n\tglobal entities\n\tfor entity in entities:\n\t\tentity.update()\n```\n\n\n\n### Rendering\n\nFinally the widgets and containers need to be rendered or you'll have done all this work for nothing. Once again this has been kept as simple as possible since you only need to call your containers' `draw` method. It takes a single parameter: the surface to draw the container to. This can be the display.\n\n```python\ndef render():\n\t'''handles the rendering'''\n\tglobal window\n\tglobal entities\n\twindow.fill(BLUE)\n\tfor e in entities:\n\t\te.draw(window)\n\n\tpg.display.flip()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/s0lst1ce/pigUI", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pigUI", "package_url": "https://pypi.org/project/pigUI/", "platform": "", "project_url": "https://pypi.org/project/pigUI/", "project_urls": {"Homepage": "https://github.com/s0lst1ce/pigUI"}, "release_url": "https://pypi.org/project/pigUI/1.0.4a0/", "requires_dist": ["pygame (>=2.0.0.dev3)"], "requires_python": ">=3.7", "summary": "", "version": "1.0.4a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <img height=\"256\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15e6396725aa85ef29528fe0393c33f43454d20c/68747470733a2f2f6769746875622e636f6d2f73306c73743163652f6173736574732f626c6f622f6d61737465722f7069672e706e67\" width=\"256\">\n</p>\n<h1>pigUI</h1>\n<p>pigUI is a GUI toolkit for <a href=\"https://www.pygame.org/news\" rel=\"nofollow\">Pygame</a>. It provides objects that enables anyone to easily implement a GUI into their game without having to modify their game logic in any major way.</p>\n<p>\u200b\tTo do this pigUI provides a set of widgets such as Labels and Buttons which are organized into Containers. Containers are like \"boxes\" into which you can put your widgets. All widgets must be contained in order to be displayed.</p>\n<h2>Quickstart</h2>\n<p>To demonstrate how the library works, a <code>demo.py</code> example program has been made. In this quick preview we'll explain the principles used in the demo.</p>\n<h3>Setting up environment</h3>\n<p>Although this won't be the case in bigger games the demo defines all widgets at the beginning of the program.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygame</span> <span class=\"k\">as</span> <span class=\"nn\">pg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pigui</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"c1\">#display</span>\n<span class=\"n\">WIDTH</span> <span class=\"o\">=</span> <span class=\"mi\">800</span>\n<span class=\"n\">HEIGHT</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>\n<span class=\"n\">pg</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n<span class=\"n\">window</span> <span class=\"o\">=</span> <span class=\"n\">pg</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"o\">.</span><span class=\"n\">set_mode</span><span class=\"p\">((</span><span class=\"n\">WIDTH</span><span class=\"p\">,</span> <span class=\"n\">HEIGHT</span><span class=\"p\">))</span>\n<span class=\"n\">pg</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"o\">.</span><span class=\"n\">set_caption</span><span class=\"p\">(</span><span class=\"s2\">\"A Pygame GUI library by s0lst1ce\"</span><span class=\"p\">)</span>\n<span class=\"n\">clock</span> <span class=\"o\">=</span> <span class=\"n\">pg</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">Clock</span><span class=\"p\">()</span>\n<span class=\"n\">running</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\">#env</span>\n<span class=\"n\">dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">Dispatcher</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Container</span><span class=\"o\">.</span><span class=\"n\">from_background</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">\"..\"</span><span class=\"p\">,</span> <span class=\"s2\">\"png\"</span><span class=\"p\">,</span> <span class=\"s2\">\"windows\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Window\"</span><span class=\"p\">,</span> <span class=\"s2\">\"win6.png\"</span><span class=\"p\">))</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Label</span><span class=\"o\">.</span><span class=\"n\">from_background</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">\"..\"</span><span class=\"p\">,</span> <span class=\"s2\">\"png\"</span><span class=\"p\">,</span> <span class=\"s2\">\"button\"</span><span class=\"p\">,</span> <span class=\"s2\">\"blank\"</span><span class=\"p\">,</span> <span class=\"s2\">\"textbg1.png\"</span><span class=\"p\">),</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Hello World!\"</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">entities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span>\n</pre>\n<p>The 11 first lines are just Pygame display setup, the interesting part comes after that. There are two objects that will be created with pigUI which aren't widgets. The first one is Dispatcher. This object will process all events for the library and will need to be integrated to the event loop. But more on that in the next section. Just remember that you need to call the <code>get()</code> classmethod on it.</p>\n<p>Next comes the Container. As explained earlier this is like a box into which the widgets will be put. Here we create it from a background image. The first two parameters represents the coordinates at which the container should be placed. This can be changed later on. Next comes the path to the background image to load. This can also be a Pygame Surface.</p>\n<p>Finally we create our widgets and add them the container.</p>\n<h3>The event loop</h3>\n<p>To function properly pigUI requires an event loop. Since almost every game has one anyways this shouldn't be a problem in most cases. If you already have one: don't worry. You'll only need to add one line. The event loop loop of the demo is the following:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">events</span><span class=\"p\">():</span>\n\t<span class=\"sd\">'''processes events'''</span>\n\t<span class=\"k\">global</span> <span class=\"n\">running</span>\n\t<span class=\"k\">global</span> <span class=\"n\">dispatcher</span>\n\n\t<span class=\"n\">pressed_keys</span> <span class=\"o\">=</span> <span class=\"n\">pg</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">get_pressed</span><span class=\"p\">()</span>\n\t<span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">pg</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n\t<span class=\"k\">for</span> <span class=\"n\">event</span> <span class=\"ow\">in</span> <span class=\"n\">events</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"n\">pg</span><span class=\"o\">.</span><span class=\"n\">QUIT</span> <span class=\"ow\">or</span> <span class=\"n\">pressed_keys</span><span class=\"p\">[</span><span class=\"n\">pg</span><span class=\"o\">.</span><span class=\"n\">K_ESCAPE</span><span class=\"p\">]:</span>\n\t\t\t<span class=\"n\">running</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n\n\t<span class=\"n\">dispatcher</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see the only place where pigUI is involved is at the last lines. And that's really all that needs to be done event-wise. Supply all events which occurred this tick to the dispatcher's <code>process</code> method and you're done with it. This allows you to keep your logic readable and concise at the same time.</p>\n<h3>The main loop</h3>\n<p>Now comes the core of every game: the main loop. Also called the game loop, this is where the game's logic happens. In the major part it exists to update the different objects your game is made of. pigUI uses it to update it's widgets. However to keep it simple and concise it was built in such way that you only need to call the <code>update</code> method of all your containers. They will themselves determine if their widgets need to be updated, how and when.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">():</span>\n\t<span class=\"sd\">'''ran each tick handles all modification based on occured events'''</span>\n\t<span class=\"k\">global</span> <span class=\"n\">entities</span>\n\t<span class=\"k\">for</span> <span class=\"n\">entity</span> <span class=\"ow\">in</span> <span class=\"n\">entities</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n</pre>\n<h3>Rendering</h3>\n<p>Finally the widgets and containers need to be rendered or you'll have done all this work for nothing. Once again this has been kept as simple as possible since you only need to call your containers' <code>draw</code> method. It takes a single parameter: the surface to draw the container to. This can be the display.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">():</span>\n\t<span class=\"sd\">'''handles the rendering'''</span>\n\t<span class=\"k\">global</span> <span class=\"n\">window</span>\n\t<span class=\"k\">global</span> <span class=\"n\">entities</span>\n\t<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">BLUE</span><span class=\"p\">)</span>\n\t<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">entities</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"p\">)</span>\n\n\t<span class=\"n\">pg</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"o\">.</span><span class=\"n\">flip</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6163347, "releases": {"1.0.1a0": [{"comment_text": "", "digests": {"md5": "b2cb9bcb717e98ce82bfa8f4a6c66c0a", "sha256": "13c19d06386bfcaba0f45417654e34cd39750bda0f616c5dca0940ac1fd61f74"}, "downloads": -1, "filename": "pigUI-1.0.1a0-py3-none-any.whl", "has_sig": false, "md5_digest": "b2cb9bcb717e98ce82bfa8f4a6c66c0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 24693, "upload_time": "2019-10-08T20:26:33", "upload_time_iso_8601": "2019-10-08T20:26:33.536540Z", "url": "https://files.pythonhosted.org/packages/d0/60/f0aee648d346d6871d0d39b62b7a0a13b7a26e65a106e0a3178f5a7eddca/pigUI-1.0.1a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba9aed16370ec1ceb1f4ebecddfedd7f", "sha256": "9bf45700341c5b651b39324d66f744bf6b22f44782a6d0045a2e02fccc5c8202"}, "downloads": -1, "filename": "pigUI-1.0.1a0.tar.gz", "has_sig": false, "md5_digest": "ba9aed16370ec1ceb1f4ebecddfedd7f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9985, "upload_time": "2019-10-08T20:26:34", "upload_time_iso_8601": "2019-10-08T20:26:34.892994Z", "url": "https://files.pythonhosted.org/packages/8f/e4/73abe207b1977354cfb2a193386f3c667d2516570891918c955ab1302813/pigUI-1.0.1a0.tar.gz", "yanked": false}], "1.0.2a0": [{"comment_text": "", "digests": {"md5": "a7a51dcf63c5af715af7cc619ac36401", "sha256": "a78075de9ab6866be7074a79b865fbbb5dc68005996180ba6660b8a0114160ad"}, "downloads": -1, "filename": "pigUI-1.0.2a0-py3-none-any.whl", "has_sig": false, "md5_digest": "a7a51dcf63c5af715af7cc619ac36401", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 24706, "upload_time": "2019-10-12T09:35:15", "upload_time_iso_8601": "2019-10-12T09:35:15.339165Z", "url": "https://files.pythonhosted.org/packages/af/77/9b2bf77fa2e21fe898f62d0db78b07ef5cb5adcc3d8fb92639071fd644ba/pigUI-1.0.2a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d144a807ccb8c6868ce909f7cc0bec3f", "sha256": "cdbf746f0582272122179f4aa59106d6e0bfd56646c2842318f052ac5ef29abf"}, "downloads": -1, "filename": "pigUI-1.0.2a0.tar.gz", "has_sig": false, "md5_digest": "d144a807ccb8c6868ce909f7cc0bec3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10011, "upload_time": "2019-10-12T09:35:17", "upload_time_iso_8601": "2019-10-12T09:35:17.064549Z", "url": "https://files.pythonhosted.org/packages/38/4b/d11ec4aab65e47135a6decb287df54b1c03e25556667c62fad7dfd470ce2/pigUI-1.0.2a0.tar.gz", "yanked": false}], "1.0.4a0": [{"comment_text": "", "digests": {"md5": "db0334b0f25cc413fdba32e098d07b5a", "sha256": "36aa8689703389ca504e61a9b8027436307c007c2b4f51cbb742c471cf197447"}, "downloads": -1, "filename": "pigUI-1.0.4a0-py3-none-any.whl", "has_sig": false, "md5_digest": "db0334b0f25cc413fdba32e098d07b5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 24710, "upload_time": "2019-11-19T17:44:52", "upload_time_iso_8601": "2019-11-19T17:44:52.179008Z", "url": "https://files.pythonhosted.org/packages/00/7e/e8607dd3ede3fa5abffa11dcd8f9a54a958787441544c926cf469a465928/pigUI-1.0.4a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "781639fb488f5155bce61cea33b934bc", "sha256": "128c72205d83e0278e884ead4f7e5a0d2a61385b3378c951b947c64003fcd4e4"}, "downloads": -1, "filename": "pigUI-1.0.4a0.tar.gz", "has_sig": false, "md5_digest": "781639fb488f5155bce61cea33b934bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10424, "upload_time": "2019-11-19T17:44:53", "upload_time_iso_8601": "2019-11-19T17:44:53.550371Z", "url": "https://files.pythonhosted.org/packages/63/8c/a3d7fd4e746abda3557ce65c74b5791b6b5538c7ee0029a31160e20fd304/pigUI-1.0.4a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db0334b0f25cc413fdba32e098d07b5a", "sha256": "36aa8689703389ca504e61a9b8027436307c007c2b4f51cbb742c471cf197447"}, "downloads": -1, "filename": "pigUI-1.0.4a0-py3-none-any.whl", "has_sig": false, "md5_digest": "db0334b0f25cc413fdba32e098d07b5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 24710, "upload_time": "2019-11-19T17:44:52", "upload_time_iso_8601": "2019-11-19T17:44:52.179008Z", "url": "https://files.pythonhosted.org/packages/00/7e/e8607dd3ede3fa5abffa11dcd8f9a54a958787441544c926cf469a465928/pigUI-1.0.4a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "781639fb488f5155bce61cea33b934bc", "sha256": "128c72205d83e0278e884ead4f7e5a0d2a61385b3378c951b947c64003fcd4e4"}, "downloads": -1, "filename": "pigUI-1.0.4a0.tar.gz", "has_sig": false, "md5_digest": "781639fb488f5155bce61cea33b934bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10424, "upload_time": "2019-11-19T17:44:53", "upload_time_iso_8601": "2019-11-19T17:44:53.550371Z", "url": "https://files.pythonhosted.org/packages/63/8c/a3d7fd4e746abda3557ce65c74b5791b6b5538c7ee0029a31160e20fd304/pigUI-1.0.4a0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:51 2020"}