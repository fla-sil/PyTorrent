{"info": {"author": "Philipp Steinr\u00f6tter", "author_email": "philipp.steinroetter@sap.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "**Table of Contents**\n\n- [Description](#description)\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [How to obtain support](#how-to-obtain-support)\n- [License](#license)\n- [Usage](#usage)\n- [Test](#test)\n- [Build Docs](#build-docs)\n\n\n## Description\nThis package wraps the SAP IoT Services, Cloud Foundry Edition Device Management APIs as well as the REST and the MQTT Cloud Gateway APIs in easy-to-use Python code. You can find more information on the APIs [here](https://help.sap.com/viewer/643f531cbf50462c8cc45139ba2dd051/Cloud/en-US) and [here](https://help.sap.com/viewer/6040fec3f22e4f9b8bf495f3789d66b5/Cloud/en-US#).\n\nFeatures include:\n+ Wrapper around every functionality of the Device Management API\n+ Better error feedback\n+ Wrapper around both Cloud Gateways\n+ Both clients, REST and MQTT, are extended so that they work directly with the encrypted keys in the pem file\n+ Better error handling and error feedback for REST and MQTT\n  + The MQTT client has an on_error and an on_command callback which directly return the parsed message\n  + The REST client parses the error for batched and single uploads and throws an error with the respective message\n  + Both clients return the failed message to enable the user to retry easily\n\n## Requirements\nYou will need an instance of IoT Services, Cloud Foundry to use this SDK. You can find more information on how to activate the service [here](https://cloudplatform.sap.com/capabilities/product-info.SAP-Cloud-Platform-Internet-of-Things.48b79cfa-3d49-4a42-9249-e589696691ae.html).\n\n## Installation\nThe package will be available at pip:\n\n`pip install iot-services-sdk`\n\nIf you want to download it manually, please make sure to install `paho-mqtt` and `requests` into your Python environment.\n\n## How to obtain support\nPlease use [GitHub Issues](https://github.com/SAP/iot-services-sdk/issues) to file a bug.\n\n## License\nCopyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\nThis file is licensed under the SAP Sample Code License except as noted otherwise in the [LICENSE file](LICENSE).\n\n## Usage\nPlease refer to the API documentation in the PDF file for details. You can check the tests for sample code.\n\nHere is a small example displaying the following functionality:\n\n+ Creating capabilities, a sensor type, a sensor and a device.\n+ Downloading the certificate and creating a MQTT client.\n+ Publishing valid and invalid measures as well as publishing and receiving commands.\n+ Deleting every entity which was created.\n\n```python\nimport os\n\nfrom iot_services_sdk import CapabilityService\nfrom iot_services_sdk import DeviceService\nfrom iot_services_sdk import GatewayService\nfrom iot_services_sdk import SensorTypeService\nfrom iot_services_sdk import SensorService\n\nfrom iot_services_sdk import MQTTClient\n\n# Initialize services\ndevice_service = DeviceService(instance = myinstance.eu10.cp.iot.sap, user = myuser, password = mypassword)\ncapability_service = CapabilityService(instance = myinstance.eu10.cp.iot.sap, user = myuser, password = mypassword)\ngateway_service = GatewayService(instance = myinstance.eu10.cp.iot.sap, user = myuser, password = mypassword)\nsensor_type_service = SensorTypeService(instance = myinstance.eu10.cp.iot.sap, user = myuser, password = mypassword)\nsensor_service = SensorService(instance = myinstance.eu10.cp.iot.sap, user = myuser, password = mypassword)\n\n# Turn requests debug functionality on\ncapability_service.debug_requests_on()\ndevice_service.debug_requests_on()\ngateway_service.debug_requests_on()\nsensor_type_service.debug_requests_on()\nsensor_service.debug_requests_on()\n\n# Get Gateway\nfilters = [\"status eq 'online'\"]\ngateways_response = gateway_service.get_gateways(filters=filters)\ngateways = gateways_response.get_result()\nmqtt_gateway = next(gateway for gateway in gateways if gateway['protocolId'] == 'mqtt')\n\n# Create Measure Capability\nproperties = [\n    {\"name\": \"sdk_test_temp\", \"dataType\": \"double\", \"unitOfMeasure\": \"Celcius\"}\n]\ncreate_response = capability_service.create_capability('sdk_test_measure_id', 'sdk_test_measure_cap', properties)\n\ncapability_measure_id = create_response.get_result().get('id')\ncapability_measure_alternate_id = create_response.get_result().get('alternateId')\n\n# Create Command Capability\nproperties = [\n    {\"name\": \"sdk_test_cmd\", \"dataType\": \"string\"}\n]\ncreate_response = capability_service.create_capability('sdk_test_cmd_id', 'sdk_test_cmd_cap', properties)\n\ncapability_cmd_id = create_response.get_result().get('id')\ncapability_cmd_alternate_id = create_response.get_result().get('alternateId')\n\n# Create Device\ncreate_response = device_service.create_device(mqtt_gateway['id'], 'sdk_device')\n\ndevice = create_response.get_result()\ndevice_id = device['id']\ndevice_alternate_id = device['alternateId']\n\n# Create Sensor Type\ncapabilities = [\n    {'id': capability_measure_id, 'type': 'measure'},\n    {'id': capability_cmd_id, 'type': 'command'}\n]\ncreate_response = sensor_type_service.create_sensor_type('123456', 'sdk_mqtt_test_type', capabilities)\n\nsensor_type_id = create_response.get_result().get('id')\nsensor_type_alternate_id = create_response.get_result().get('alternateId')\n\n# Create Sensor\ncreate_response = sensor_service.create_sensor(device_id, 'sdk-test-mqtt-sensor-id', 'sdk-test-mqtt-sensor-name', sensor_type_id)\n\nsensor_id = create_response.get_result()['id']\nsensor_alternate_id = create_response.get_result()['alternateId']\n\n# Download Certificate\nres = device_service.get_device_pem(device_id).get_result()\n\npem = res.get('pem')\nsecret = res.get('secret')\npem_filepath = 'cert.pem'\n\n# Write Certificate to PEM file\npem_file = open(pem_filepath, 'w')\npem_file.write(pem)\npem_file.close()\n\n# Get MQTT Client for Device\nmqtt_client = device_service.get_mqtt_client(device_alternate_id, pem_filepath, secret)\nmqtt_client.connect()\nmqtt_client.loop_start()\n\n# Publish a measure\nmeasures = [\n    {'sdk_test_temp': 30}\n]\nmessage_info_measures = mqtt_client.publish(capability_measure_alternate_id, sensor_alternate_id, measures, device_alternate_id)\n\n# Read measures\nget_measures_response = device_service.get_measures(device_id)\nmeasures = get_measures_response.get_result()\n\n# Publish invalid measure and receive error\ndef on_error(client, userdata, report):\n    print('ERROR RECEIVED: ')\n    print(report)\n\nmqtt_client.on_error = on_error\n\nmeasures = [\n    {'i_am_invalid': 30}\n]\nmessage_info_measures = mqtt_client.publish(capability_measure_alternate_id, sensor_alternate_id, measures, device_alternate_id)\n\n# Publish and receive command\ndef on_command(client, userdata, command):\n    print('COMMAND RECEIVED: ')\n    print(command)\n\nmqtt_client.on_command = on_command\n\nmqtt_client.subscribe(device_alternate_id)\n\ncommand = {'sdk_test_cmd': 'I am a SDK!'}\n\nsend_command_res = device_service.send_command_to_device(device_id, capability_cmd_id, sensor_id, command)\n\n# Stop MQTT loop\nmqtt_client.loop_stop()\n\n# Delete Sensor\ndelete_sensor_res = sensor_service.delete_sensor(sensor_id)\n\n# Delete Device\ndelete_response = device_service.delete_device(device_id)\n\n# Delete SensorType\ndelete_sensor_type_response = sensor_type_service.delete_sensor_type(sensor_type_id)\n\n# Delete Measure Capability\ndelete_response = capability_service.delete_capability(capability_measure_id)\n\n# Delete Command Capability\ndelete_response = capability_service.delete_capability(capability_cmd_id)\n\n# Delete Certfile\ntry:\n    os.remove(pem_filepath)\nexcept OSError:\n    pass\n```\n\n## Test\nTo run the tests, you have to place a config.ini in the root directory. It has to contain the following information:\n```\n[IOTS]\nINSTANCE=myinstance.eu10.cp.iot.sap\nBASE_URI=/iot/core/api/v1\nGATEWAY_URI=/iot/gateway\nUSER=myuser\nPASSWORD=mypassword\n```\nThen, run \n\n`nosetests`\n\nin the root directory. The tests will clean up after themselves - there is no need to check your system afterwards.\n\n## Build Docs\nUse Sphinx to build the documentation directly from the docstrings:\n\n`cd docs`\n\n`sphinx-apidoc -f -o source/ ../sap_iot_services_sdk`\n\n`make latexpdf`\n\nCopy the SAPIoTServicesSDK.pdf file into the root directory.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/SAP/iot-services-sdk/archive/1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SAP/iot-services-sdk", "keywords": "SAP IoT Services CF SDK MQTT REST Device Management Internet of Things", "license": "SAP Sample Code License", "maintainer": "", "maintainer_email": "", "name": "iot-services-sdk", "package_url": "https://pypi.org/project/iot-services-sdk/", "platform": "", "project_url": "https://pypi.org/project/iot-services-sdk/", "project_urls": {"Download": "https://github.com/SAP/iot-services-sdk/archive/1.0.tar.gz", "Homepage": "https://github.com/SAP/iot-services-sdk"}, "release_url": "https://pypi.org/project/iot-services-sdk/2.0.2/", "requires_dist": null, "requires_python": ">=3", "summary": "SDK for SAP IoT Services on Cloud Foundry. Wraps all Device Management APIs as well as both Cloud Gateways.", "version": "2.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#description\" rel=\"nofollow\">Description</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#how-to-obtain-support\" rel=\"nofollow\">How to obtain support</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#test\" rel=\"nofollow\">Test</a></li>\n<li><a href=\"#build-docs\" rel=\"nofollow\">Build Docs</a></li>\n</ul>\n<h2>Description</h2>\n<p>This package wraps the SAP IoT Services, Cloud Foundry Edition Device Management APIs as well as the REST and the MQTT Cloud Gateway APIs in easy-to-use Python code. You can find more information on the APIs <a href=\"https://help.sap.com/viewer/643f531cbf50462c8cc45139ba2dd051/Cloud/en-US\" rel=\"nofollow\">here</a> and <a href=\"https://help.sap.com/viewer/6040fec3f22e4f9b8bf495f3789d66b5/Cloud/en-US#\" rel=\"nofollow\">here</a>.</p>\n<p>Features include:</p>\n<ul>\n<li>Wrapper around every functionality of the Device Management API</li>\n<li>Better error feedback</li>\n<li>Wrapper around both Cloud Gateways</li>\n<li>Both clients, REST and MQTT, are extended so that they work directly with the encrypted keys in the pem file</li>\n<li>Better error handling and error feedback for REST and MQTT\n<ul>\n<li>The MQTT client has an on_error and an on_command callback which directly return the parsed message</li>\n<li>The REST client parses the error for batched and single uploads and throws an error with the respective message</li>\n<li>Both clients return the failed message to enable the user to retry easily</li>\n</ul>\n</li>\n</ul>\n<h2>Requirements</h2>\n<p>You will need an instance of IoT Services, Cloud Foundry to use this SDK. You can find more information on how to activate the service <a href=\"https://cloudplatform.sap.com/capabilities/product-info.SAP-Cloud-Platform-Internet-of-Things.48b79cfa-3d49-4a42-9249-e589696691ae.html\" rel=\"nofollow\">here</a>.</p>\n<h2>Installation</h2>\n<p>The package will be available at pip:</p>\n<p><code>pip install iot-services-sdk</code></p>\n<p>If you want to download it manually, please make sure to install <code>paho-mqtt</code> and <code>requests</code> into your Python environment.</p>\n<h2>How to obtain support</h2>\n<p>Please use <a href=\"https://github.com/SAP/iot-services-sdk/issues\" rel=\"nofollow\">GitHub Issues</a> to file a bug.</p>\n<h2>License</h2>\n<p>Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.\nThis file is licensed under the SAP Sample Code License except as noted otherwise in the <a href=\"LICENSE\" rel=\"nofollow\">LICENSE file</a>.</p>\n<h2>Usage</h2>\n<p>Please refer to the API documentation in the PDF file for details. You can check the tests for sample code.</p>\n<p>Here is a small example displaying the following functionality:</p>\n<ul>\n<li>Creating capabilities, a sensor type, a sensor and a device.</li>\n<li>Downloading the certificate and creating a MQTT client.</li>\n<li>Publishing valid and invalid measures as well as publishing and receiving commands.</li>\n<li>Deleting every entity which was created.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">iot_services_sdk</span> <span class=\"kn\">import</span> <span class=\"n\">CapabilityService</span>\n<span class=\"kn\">from</span> <span class=\"nn\">iot_services_sdk</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceService</span>\n<span class=\"kn\">from</span> <span class=\"nn\">iot_services_sdk</span> <span class=\"kn\">import</span> <span class=\"n\">GatewayService</span>\n<span class=\"kn\">from</span> <span class=\"nn\">iot_services_sdk</span> <span class=\"kn\">import</span> <span class=\"n\">SensorTypeService</span>\n<span class=\"kn\">from</span> <span class=\"nn\">iot_services_sdk</span> <span class=\"kn\">import</span> <span class=\"n\">SensorService</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">iot_services_sdk</span> <span class=\"kn\">import</span> <span class=\"n\">MQTTClient</span>\n\n<span class=\"c1\"># Initialize services</span>\n<span class=\"n\">device_service</span> <span class=\"o\">=</span> <span class=\"n\">DeviceService</span><span class=\"p\">(</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">myinstance</span><span class=\"o\">.</span><span class=\"n\">eu10</span><span class=\"o\">.</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">iot</span><span class=\"o\">.</span><span class=\"n\">sap</span><span class=\"p\">,</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">myuser</span><span class=\"p\">,</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">mypassword</span><span class=\"p\">)</span>\n<span class=\"n\">capability_service</span> <span class=\"o\">=</span> <span class=\"n\">CapabilityService</span><span class=\"p\">(</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">myinstance</span><span class=\"o\">.</span><span class=\"n\">eu10</span><span class=\"o\">.</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">iot</span><span class=\"o\">.</span><span class=\"n\">sap</span><span class=\"p\">,</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">myuser</span><span class=\"p\">,</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">mypassword</span><span class=\"p\">)</span>\n<span class=\"n\">gateway_service</span> <span class=\"o\">=</span> <span class=\"n\">GatewayService</span><span class=\"p\">(</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">myinstance</span><span class=\"o\">.</span><span class=\"n\">eu10</span><span class=\"o\">.</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">iot</span><span class=\"o\">.</span><span class=\"n\">sap</span><span class=\"p\">,</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">myuser</span><span class=\"p\">,</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">mypassword</span><span class=\"p\">)</span>\n<span class=\"n\">sensor_type_service</span> <span class=\"o\">=</span> <span class=\"n\">SensorTypeService</span><span class=\"p\">(</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">myinstance</span><span class=\"o\">.</span><span class=\"n\">eu10</span><span class=\"o\">.</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">iot</span><span class=\"o\">.</span><span class=\"n\">sap</span><span class=\"p\">,</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">myuser</span><span class=\"p\">,</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">mypassword</span><span class=\"p\">)</span>\n<span class=\"n\">sensor_service</span> <span class=\"o\">=</span> <span class=\"n\">SensorService</span><span class=\"p\">(</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">myinstance</span><span class=\"o\">.</span><span class=\"n\">eu10</span><span class=\"o\">.</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">iot</span><span class=\"o\">.</span><span class=\"n\">sap</span><span class=\"p\">,</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">myuser</span><span class=\"p\">,</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">mypassword</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Turn requests debug functionality on</span>\n<span class=\"n\">capability_service</span><span class=\"o\">.</span><span class=\"n\">debug_requests_on</span><span class=\"p\">()</span>\n<span class=\"n\">device_service</span><span class=\"o\">.</span><span class=\"n\">debug_requests_on</span><span class=\"p\">()</span>\n<span class=\"n\">gateway_service</span><span class=\"o\">.</span><span class=\"n\">debug_requests_on</span><span class=\"p\">()</span>\n<span class=\"n\">sensor_type_service</span><span class=\"o\">.</span><span class=\"n\">debug_requests_on</span><span class=\"p\">()</span>\n<span class=\"n\">sensor_service</span><span class=\"o\">.</span><span class=\"n\">debug_requests_on</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get Gateway</span>\n<span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"status eq 'online'\"</span><span class=\"p\">]</span>\n<span class=\"n\">gateways_response</span> <span class=\"o\">=</span> <span class=\"n\">gateway_service</span><span class=\"o\">.</span><span class=\"n\">get_gateways</span><span class=\"p\">(</span><span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"n\">filters</span><span class=\"p\">)</span>\n<span class=\"n\">gateways</span> <span class=\"o\">=</span> <span class=\"n\">gateways_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span>\n<span class=\"n\">mqtt_gateway</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">gateway</span> <span class=\"k\">for</span> <span class=\"n\">gateway</span> <span class=\"ow\">in</span> <span class=\"n\">gateways</span> <span class=\"k\">if</span> <span class=\"n\">gateway</span><span class=\"p\">[</span><span class=\"s1\">'protocolId'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'mqtt'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create Measure Capability</span>\n<span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sdk_test_temp\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dataType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"double\"</span><span class=\"p\">,</span> <span class=\"s2\">\"unitOfMeasure\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Celcius\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">create_response</span> <span class=\"o\">=</span> <span class=\"n\">capability_service</span><span class=\"o\">.</span><span class=\"n\">create_capability</span><span class=\"p\">(</span><span class=\"s1\">'sdk_test_measure_id'</span><span class=\"p\">,</span> <span class=\"s1\">'sdk_test_measure_cap'</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">)</span>\n\n<span class=\"n\">capability_measure_id</span> <span class=\"o\">=</span> <span class=\"n\">create_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n<span class=\"n\">capability_measure_alternate_id</span> <span class=\"o\">=</span> <span class=\"n\">create_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'alternateId'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create Command Capability</span>\n<span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sdk_test_cmd\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dataType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">create_response</span> <span class=\"o\">=</span> <span class=\"n\">capability_service</span><span class=\"o\">.</span><span class=\"n\">create_capability</span><span class=\"p\">(</span><span class=\"s1\">'sdk_test_cmd_id'</span><span class=\"p\">,</span> <span class=\"s1\">'sdk_test_cmd_cap'</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">)</span>\n\n<span class=\"n\">capability_cmd_id</span> <span class=\"o\">=</span> <span class=\"n\">create_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n<span class=\"n\">capability_cmd_alternate_id</span> <span class=\"o\">=</span> <span class=\"n\">create_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'alternateId'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create Device</span>\n<span class=\"n\">create_response</span> <span class=\"o\">=</span> <span class=\"n\">device_service</span><span class=\"o\">.</span><span class=\"n\">create_device</span><span class=\"p\">(</span><span class=\"n\">mqtt_gateway</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">],</span> <span class=\"s1\">'sdk_device'</span><span class=\"p\">)</span>\n\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">create_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span>\n<span class=\"n\">device_id</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]</span>\n<span class=\"n\">device_alternate_id</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"p\">[</span><span class=\"s1\">'alternateId'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Create Sensor Type</span>\n<span class=\"n\">capabilities</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">capability_measure_id</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'measure'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">capability_cmd_id</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'command'</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">create_response</span> <span class=\"o\">=</span> <span class=\"n\">sensor_type_service</span><span class=\"o\">.</span><span class=\"n\">create_sensor_type</span><span class=\"p\">(</span><span class=\"s1\">'123456'</span><span class=\"p\">,</span> <span class=\"s1\">'sdk_mqtt_test_type'</span><span class=\"p\">,</span> <span class=\"n\">capabilities</span><span class=\"p\">)</span>\n\n<span class=\"n\">sensor_type_id</span> <span class=\"o\">=</span> <span class=\"n\">create_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n<span class=\"n\">sensor_type_alternate_id</span> <span class=\"o\">=</span> <span class=\"n\">create_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'alternateId'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create Sensor</span>\n<span class=\"n\">create_response</span> <span class=\"o\">=</span> <span class=\"n\">sensor_service</span><span class=\"o\">.</span><span class=\"n\">create_sensor</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">,</span> <span class=\"s1\">'sdk-test-mqtt-sensor-id'</span><span class=\"p\">,</span> <span class=\"s1\">'sdk-test-mqtt-sensor-name'</span><span class=\"p\">,</span> <span class=\"n\">sensor_type_id</span><span class=\"p\">)</span>\n\n<span class=\"n\">sensor_id</span> <span class=\"o\">=</span> <span class=\"n\">create_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()[</span><span class=\"s1\">'id'</span><span class=\"p\">]</span>\n<span class=\"n\">sensor_alternate_id</span> <span class=\"o\">=</span> <span class=\"n\">create_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()[</span><span class=\"s1\">'alternateId'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Download Certificate</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">device_service</span><span class=\"o\">.</span><span class=\"n\">get_device_pem</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span>\n\n<span class=\"n\">pem</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'pem'</span><span class=\"p\">)</span>\n<span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'secret'</span><span class=\"p\">)</span>\n<span class=\"n\">pem_filepath</span> <span class=\"o\">=</span> <span class=\"s1\">'cert.pem'</span>\n\n<span class=\"c1\"># Write Certificate to PEM file</span>\n<span class=\"n\">pem_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">pem_filepath</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span>\n<span class=\"n\">pem_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">pem</span><span class=\"p\">)</span>\n<span class=\"n\">pem_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get MQTT Client for Device</span>\n<span class=\"n\">mqtt_client</span> <span class=\"o\">=</span> <span class=\"n\">device_service</span><span class=\"o\">.</span><span class=\"n\">get_mqtt_client</span><span class=\"p\">(</span><span class=\"n\">device_alternate_id</span><span class=\"p\">,</span> <span class=\"n\">pem_filepath</span><span class=\"p\">,</span> <span class=\"n\">secret</span><span class=\"p\">)</span>\n<span class=\"n\">mqtt_client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"n\">mqtt_client</span><span class=\"o\">.</span><span class=\"n\">loop_start</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Publish a measure</span>\n<span class=\"n\">measures</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'sdk_test_temp'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">message_info_measures</span> <span class=\"o\">=</span> <span class=\"n\">mqtt_client</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">capability_measure_alternate_id</span><span class=\"p\">,</span> <span class=\"n\">sensor_alternate_id</span><span class=\"p\">,</span> <span class=\"n\">measures</span><span class=\"p\">,</span> <span class=\"n\">device_alternate_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Read measures</span>\n<span class=\"n\">get_measures_response</span> <span class=\"o\">=</span> <span class=\"n\">device_service</span><span class=\"o\">.</span><span class=\"n\">get_measures</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">)</span>\n<span class=\"n\">measures</span> <span class=\"o\">=</span> <span class=\"n\">get_measures_response</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Publish invalid measure and receive error</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_error</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">userdata</span><span class=\"p\">,</span> <span class=\"n\">report</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'ERROR RECEIVED: '</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">)</span>\n\n<span class=\"n\">mqtt_client</span><span class=\"o\">.</span><span class=\"n\">on_error</span> <span class=\"o\">=</span> <span class=\"n\">on_error</span>\n\n<span class=\"n\">measures</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'i_am_invalid'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">message_info_measures</span> <span class=\"o\">=</span> <span class=\"n\">mqtt_client</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"n\">capability_measure_alternate_id</span><span class=\"p\">,</span> <span class=\"n\">sensor_alternate_id</span><span class=\"p\">,</span> <span class=\"n\">measures</span><span class=\"p\">,</span> <span class=\"n\">device_alternate_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Publish and receive command</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_command</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">userdata</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'COMMAND RECEIVED: '</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">)</span>\n\n<span class=\"n\">mqtt_client</span><span class=\"o\">.</span><span class=\"n\">on_command</span> <span class=\"o\">=</span> <span class=\"n\">on_command</span>\n\n<span class=\"n\">mqtt_client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">device_alternate_id</span><span class=\"p\">)</span>\n\n<span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'sdk_test_cmd'</span><span class=\"p\">:</span> <span class=\"s1\">'I am a SDK!'</span><span class=\"p\">}</span>\n\n<span class=\"n\">send_command_res</span> <span class=\"o\">=</span> <span class=\"n\">device_service</span><span class=\"o\">.</span><span class=\"n\">send_command_to_device</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">,</span> <span class=\"n\">capability_cmd_id</span><span class=\"p\">,</span> <span class=\"n\">sensor_id</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Stop MQTT loop</span>\n<span class=\"n\">mqtt_client</span><span class=\"o\">.</span><span class=\"n\">loop_stop</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Delete Sensor</span>\n<span class=\"n\">delete_sensor_res</span> <span class=\"o\">=</span> <span class=\"n\">sensor_service</span><span class=\"o\">.</span><span class=\"n\">delete_sensor</span><span class=\"p\">(</span><span class=\"n\">sensor_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete Device</span>\n<span class=\"n\">delete_response</span> <span class=\"o\">=</span> <span class=\"n\">device_service</span><span class=\"o\">.</span><span class=\"n\">delete_device</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete SensorType</span>\n<span class=\"n\">delete_sensor_type_response</span> <span class=\"o\">=</span> <span class=\"n\">sensor_type_service</span><span class=\"o\">.</span><span class=\"n\">delete_sensor_type</span><span class=\"p\">(</span><span class=\"n\">sensor_type_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete Measure Capability</span>\n<span class=\"n\">delete_response</span> <span class=\"o\">=</span> <span class=\"n\">capability_service</span><span class=\"o\">.</span><span class=\"n\">delete_capability</span><span class=\"p\">(</span><span class=\"n\">capability_measure_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete Command Capability</span>\n<span class=\"n\">delete_response</span> <span class=\"o\">=</span> <span class=\"n\">capability_service</span><span class=\"o\">.</span><span class=\"n\">delete_capability</span><span class=\"p\">(</span><span class=\"n\">capability_cmd_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete Certfile</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">pem_filepath</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">OSError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h2>Test</h2>\n<p>To run the tests, you have to place a config.ini in the root directory. It has to contain the following information:</p>\n<pre><code>[IOTS]\nINSTANCE=myinstance.eu10.cp.iot.sap\nBASE_URI=/iot/core/api/v1\nGATEWAY_URI=/iot/gateway\nUSER=myuser\nPASSWORD=mypassword\n</code></pre>\n<p>Then, run</p>\n<p><code>nosetests</code></p>\n<p>in the root directory. The tests will clean up after themselves - there is no need to check your system afterwards.</p>\n<h2>Build Docs</h2>\n<p>Use Sphinx to build the documentation directly from the docstrings:</p>\n<p><code>cd docs</code></p>\n<p><code>sphinx-apidoc -f -o source/ ../sap_iot_services_sdk</code></p>\n<p><code>make latexpdf</code></p>\n<p>Copy the SAPIoTServicesSDK.pdf file into the root directory.</p>\n\n          </div>"}, "last_serial": 6740501, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "568c017bc5df9ae0aff4e51f906b3c08", "sha256": "de264c8dbdcd779cfd59fd9fecf55adb224af3174abe44f42bd680aab273d4f1"}, "downloads": -1, "filename": "iot_services_sdk-1.0.tar.gz", "has_sig": false, "md5_digest": "568c017bc5df9ae0aff4e51f906b3c08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 19257, "upload_time": "2019-05-02T06:46:37", "upload_time_iso_8601": "2019-05-02T06:46:37.144378Z", "url": "https://files.pythonhosted.org/packages/a7/ba/1a13d8bbed34152afa135adfb67c98fb84e23a800928ec216638eeba4539/iot_services_sdk-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "a225a908afcefecc04cfb237c2a405d8", "sha256": "cd1da6975557f35ddf6f020711711da6797de4475691544e147e96b1cf23c040"}, "downloads": -1, "filename": "iot_services_sdk-1.1.tar.gz", "has_sig": false, "md5_digest": "a225a908afcefecc04cfb237c2a405d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 19091, "upload_time": "2019-09-02T09:47:48", "upload_time_iso_8601": "2019-09-02T09:47:48.622187Z", "url": "https://files.pythonhosted.org/packages/28/b4/9d85882eae60c267b85fcb9c8a19a5bd1b63f1250db6697d42371388c17b/iot_services_sdk-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "f6e4b7ac32612d090b2a05d26ae9752f", "sha256": "b25f01dc754fe3656b0f0a2845d72ed441e47c7b704d039f337c12dd8d7efd72"}, "downloads": -1, "filename": "iot_services_sdk-1.2.tar.gz", "has_sig": false, "md5_digest": "f6e4b7ac32612d090b2a05d26ae9752f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 18453, "upload_time": "2019-09-04T06:01:54", "upload_time_iso_8601": "2019-09-04T06:01:54.733652Z", "url": "https://files.pythonhosted.org/packages/a1/10/26cd8c77755b753f11178ebee567fbf8bbd208bf3f292696d5af8b6d96cb/iot_services_sdk-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "c2ef9c7d27eee0fe16256813d88eedcd", "sha256": "5069f73f3e473a79f02e0373617d81ac59e20f82e625fd26b9bfd5c4dddb837a"}, "downloads": -1, "filename": "iot_services_sdk-1.3.tar.gz", "has_sig": false, "md5_digest": "c2ef9c7d27eee0fe16256813d88eedcd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 18493, "upload_time": "2019-09-13T17:47:33", "upload_time_iso_8601": "2019-09-13T17:47:33.946402Z", "url": "https://files.pythonhosted.org/packages/30/70/aa587c98469709ca5cd7a128c6cb7bb682fb04576b66715b02f335331312/iot_services_sdk-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "616a11ebefa77988ac3ff2489cb44474", "sha256": "14c2a1ea682a5b12c1534aa48adff9ab89fda27fa64610d13e64b1a5871d4287"}, "downloads": -1, "filename": "iot_services_sdk-1.4.tar.gz", "has_sig": false, "md5_digest": "616a11ebefa77988ac3ff2489cb44474", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 18486, "upload_time": "2019-09-13T18:49:13", "upload_time_iso_8601": "2019-09-13T18:49:13.062396Z", "url": "https://files.pythonhosted.org/packages/56/41/6a5396584c8631e70d556853a1244d11f82ab5cf2fc87bd01a85689f274a/iot_services_sdk-1.4.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "987bf42c5fc710819f038eaf3c0a1a41", "sha256": "4a50245689085514ec004032ed72de351638f5b881ff2991fd18c9e7e40a1e6d"}, "downloads": -1, "filename": "iot_services_sdk-2.0.0.tar.gz", "has_sig": false, "md5_digest": "987bf42c5fc710819f038eaf3c0a1a41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 20323, "upload_time": "2019-11-07T09:04:24", "upload_time_iso_8601": "2019-11-07T09:04:24.386724Z", "url": "https://files.pythonhosted.org/packages/bd/aa/4effe9d50313080d89d38d3cb6f0fe869f6117d1e5f57c5e70bed13de271/iot_services_sdk-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "d6b0004c0fd800f82b8b0be3dd9ecdbf", "sha256": "435f9d4c27826cd7be981d67e3a3b0c7189c5615643f1ee62c978d3a3aca5cb8"}, "downloads": -1, "filename": "iot_services_sdk-2.0.1.tar.gz", "has_sig": false, "md5_digest": "d6b0004c0fd800f82b8b0be3dd9ecdbf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 20401, "upload_time": "2019-12-02T21:41:54", "upload_time_iso_8601": "2019-12-02T21:41:54.436215Z", "url": "https://files.pythonhosted.org/packages/d8/5b/1da2ab303b5fd892c3aa3c7ee9762e02fb93e19b1a322db1ec80d3de7a4b/iot_services_sdk-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "33e395fdb761b15008888926e2e2238e", "sha256": "0a654ebee9c13e3208cf8cb5c7a17efc6befe3e53cf8d6ca4d1721bf81162e08"}, "downloads": -1, "filename": "iot_services_sdk-2.0.2.tar.gz", "has_sig": false, "md5_digest": "33e395fdb761b15008888926e2e2238e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 20411, "upload_time": "2020-03-03T13:03:01", "upload_time_iso_8601": "2020-03-03T13:03:01.080259Z", "url": "https://files.pythonhosted.org/packages/db/69/952e08732c570811a170f291ee36d8ec5b8ce3f42fb5a9bfa11edd116786/iot_services_sdk-2.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "33e395fdb761b15008888926e2e2238e", "sha256": "0a654ebee9c13e3208cf8cb5c7a17efc6befe3e53cf8d6ca4d1721bf81162e08"}, "downloads": -1, "filename": "iot_services_sdk-2.0.2.tar.gz", "has_sig": false, "md5_digest": "33e395fdb761b15008888926e2e2238e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 20411, "upload_time": "2020-03-03T13:03:01", "upload_time_iso_8601": "2020-03-03T13:03:01.080259Z", "url": "https://files.pythonhosted.org/packages/db/69/952e08732c570811a170f291ee36d8ec5b8ce3f42fb5a9bfa11edd116786/iot_services_sdk-2.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:48 2020"}