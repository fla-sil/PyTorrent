{"info": {"author": "dvector89", "author_email": "shiliangliang.cas@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python"], "description": "# Note\nThis is a tool for writing, restoring and retriving notes in command line. Here are some examples of command:\n\n\n1. **note add/a note\\_file**   \n   add a note. the note file's first line is keywords seperated by whitespaces, the rest of lines are content.\n2. **note delete/d [-r] keyword1 [keyword2...]**  \n   delete the notes with the keywords\n3. **note get/g keyword0 [keyword1 ... keywordN]**  \n   print notes about the keyword(s)\n4. **note change/c note\\_file**  \n   for the note with keywords in note\\_file, the note in database will be changed.  \n5. **note scan/s**  \n\tdispaly the information of the notes which have stored.  \n6. **note -h**  \n   display help infomation\n\n# Implementation\nFor each note, it has two components which are keyword(s) and content.\nIn order to save the notes, a database is created. The database has two tables. One table is a dict, whose keys and values are the keywords and the note ids. Each id links to a note. The other table has three columns: the notes' ids, the keywords which the notes linked to, the note contents.\n\n```\ncreate table keywords (\n  keyword string primary key not null,\n  ids string not null\n);\n\ncreate table notes (\n  id integer primary key autoincrement,\n  keywords string not null,\n  content string not null\n);\n```\n\n# to do\n1. get notes with bool filter\n2. suppert a gui\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dvector89/key_note", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "key_note", "package_url": "https://pypi.org/project/key_note/", "platform": "", "project_url": "https://pypi.org/project/key_note/", "project_urls": {"Homepage": "https://github.com/dvector89/key_note"}, "release_url": "https://pypi.org/project/key_note/0.1/", "requires_dist": null, "requires_python": "", "summary": "notes linked with keywords", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Note<br>This is a tool for writing, restoring and retriving notes in command line. Here are some examples of command:<br><br><br>1. **note add/a note\\_file**   <br>   add a note. the note file's first line is keywords seperated by whitespaces, the rest of lines are content.<br>2. **note delete/d [-r] keyword1 [keyword2...]**  <br>   delete the notes with the keywords<br>3. **note get/g keyword0 [keyword1 ... keywordN]**  <br>   print notes about the keyword(s)<br>4. **note change/c note\\_file**  <br>   for the note with keywords in note\\_file, the note in database will be changed.  <br>5. **note scan/s**  <br>\tdispaly the information of the notes which have stored.  <br>6. **note -h**  <br>   display help infomation<br><br># Implementation<br>For each note, it has two components which are keyword(s) and content.<br>In order to save the notes, a database is created. The database has two tables. One table is a dict, whose keys and values are the keywords and the note ids. Each id links to a note. The other table has three columns: the notes' ids, the keywords which the notes linked to, the note contents.<br><br>```<br>create table keywords (<br>  keyword string primary key not null,<br>  ids string not null<br>);<br><br>create table notes (<br>  id integer primary key autoincrement,<br>  keywords string not null,<br>  content string not null<br>);<br>```<br><br># to do<br>1. get notes with bool filter<br>2. suppert a gui<br>\n          </div>"}, "last_serial": 3251907, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "6c1a48f84bd8397147bde497ae7f771e", "sha256": "699c81bbd9899045b3afeed6fd5b7d9af10756b7d9418a9a0be51aed7f4a8157"}, "downloads": -1, "filename": "key_note-0.1.tar.gz", "has_sig": false, "md5_digest": "6c1a48f84bd8397147bde497ae7f771e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3983, "upload_time": "2017-10-15T17:49:34", "upload_time_iso_8601": "2017-10-15T17:49:34.779586Z", "url": "https://files.pythonhosted.org/packages/9f/e8/699148fbf384b38a1bebd386624ee4a24f41d7062309b53dc5bb10cb0210/key_note-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c1a48f84bd8397147bde497ae7f771e", "sha256": "699c81bbd9899045b3afeed6fd5b7d9af10756b7d9418a9a0be51aed7f4a8157"}, "downloads": -1, "filename": "key_note-0.1.tar.gz", "has_sig": false, "md5_digest": "6c1a48f84bd8397147bde497ae7f771e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3983, "upload_time": "2017-10-15T17:49:34", "upload_time_iso_8601": "2017-10-15T17:49:34.779586Z", "url": "https://files.pythonhosted.org/packages/9f/e8/699148fbf384b38a1bebd386624ee4a24f41d7062309b53dc5bb10cb0210/key_note-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:58 2020"}