{"info": {"author": "Tab Atkins", "author_email": "jackalmage@gmail.com", "bugtrack_url": null, "classifiers": ["License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "Railroad-Diagram Generator\n==========================\n\n<a href=\"https://github.com/tabatkins/railroad-diagrams/blob/gh-pages/images/rr-title.svg\"><img src=\"https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-title.svg?sanitize=true\" alt=\"Diagram(Stack('Generate', 'some'), OneOrMore(NonTerminal('railroad diagrams'), Comment('and more')))\" title=\"Diagram(Stack('Generate', 'some'), OneOrMore(NonTerminal('railroad diagrams'), Comment('and more')))\" width=10000></a>\n\nThis is a small library for generating railroad diagrams\n(like what [JSON.org](http://json.org) uses)\nusing SVG, with both JS and Python ports.\n\nRailroad diagrams are a way of visually representing a grammar\nin a form that is more readable than using regular expressions or BNF.\nThey can easily represent any context-free grammar, and some more powerful grammars.\nThere are several railroad-diagram generators out there, but none of them had the visual appeal I wanted, so I wrote my own.\n\n[Here's an online dingus for you to play with and get SVG code from!](https://tabatkins.github.io/railroad-diagrams/generator.html)\n\n(This is the README for the Python port;\nto see the JS README, visit <https://github.com/tabatkins/railroad-diagrams>.)\n\nDiagrams\n--------\n\nConstructing a diagram is a set of nested calls:\n\n```python\nfrom railroad import Diagram, Choice\nd = Diagram(\"foo\", Choice(0, \"bar\", \"baz\"))\nd.writeSvg(sys.stdout.write)\n```\n\nA railroad diagram must be started as a `Diagram` object,\nwhich takes a list of diagram items,\ndefined below.\n\nThe `Diagram()` constructor also optionally takes some keyword arguments:\n\n* `css`: If passed, is the CSS you would like the diagram to include.\n    If you don't pass anything, it defaults to including `railroad.DEFAULT_STYLE`.\n    If you don't want it to include any css at all in the diagram\n    (perhaps because you're including the `railroad.css` file manually in your page, and don't need each diagram to duplicate the CSS in itself),\n    pass `css=None`.\n* `type`: JSON.org, the inspiration for these diagram's styling, technically has two varieties of Diagrams: a \"simple\" kind it uses for \"leaf\" types like numbers, and a \"complex\" kind which is used for container types like arrays. The only difference is the shape of the start/end indicators of the diagram.\n\n    Diagrams default to being \"simple\", but you can manually choose by passing `type=\"simple\"` or `type=\"complex\"`.\n\nAfter constructing a Diagram, you can call `.format(...padding)` on it, specifying 0-4 padding values (just like CSS) for some additional \"breathing space\" around the diagram (the paddings default to 20px).\n\nTo output the diagram, call `.writeSvg(cb)` on it, passing a function that'll get called repeatedly to produce the SVG markup. `sys.stdout.write` (or the `.write` property of any file object) is a great value to pass if you're directly outputting it; if you need it as a plain string, a `StringIO` can be used.\n\nIf you need to walk the component tree of a diagram for some reason, `Diagram` has a `.walk(cb)` method as well, which will call your callback on every node in the diagram, in a \"pre-order depth-first traversal\" (the node first, then each child).\n\nComponents\n----------\n\nComponents are either leaves (containing only text or similar)\nor containers (containing other components).\n\nThe leaves:\n* Terminal(text, href) or a bare string - represents literal text. The 'href' attribute is optional, and creates a hyperlink with the given destination.\n* NonTerminal(text, href) - represents an instruction or another production. The 'href' attribute is optional, and creates a hyperlink with the given destination.\n* Comment(text, href) - a comment. The 'href' attribute is optional, and creates a hyperlink with the given destination.\n* Skip() - an empty line\n* Start(type, label) and End(type) - the start/end shapes. These are supplied by default, but if you want to supply a label to the diagram, you can create a Start() explicitly (as the first child of the Diagram!). The \"type\" attribute takes either \"simple\" (the default) or \"complex\", a la Diagram() and ComplexDiagram(). All arguments are optional.\n\nThe containers:\n* Sequence(...children) - like simple concatenation in a regex.\n\n    ![Sequence('1', '2', '3')](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-sequence.svg?sanitize=true \"Sequence('1', '2', '3')\")\n\n* Stack(...children) - identical to a Sequence, but the items are stacked vertically rather than horizontally. Best used when a simple Sequence would be too wide; instead, you can break the items up into a Stack of Sequences of an appropriate width.\n\n    ![Stack('1', '2', '3')](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-stack.svg?sanitize=true \"Stack('1', '2', '3')\")\n\n* OptionalSequence(...children) - a Sequence where every item is *individually* optional, but at least one item must be chosen\n\n    ![OptionalSequence('1', '2', '3')](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-optionalsequence.svg?sanitize=true \"OptionalSequence('1', '2', '3')\")\n\n* Choice(index, ...children) - like `|` in a regex.  The index argument specifies which child is the \"normal\" choice and should go in the middle (starting from 0 for the first child).\n\n    ![Choice(1, '1', '2', '3')](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-choice.svg?sanitize=true \"Choice(1, '1', '2', '3')\")\n\n* MultipleChoice(index, type, ...children) - like `||` or `&&` in a CSS grammar; it's similar to a Choice, but more than one branch can be taken.  The index argument specifies which child is the \"normal\" choice and should go in the middle, while the type argument must be either \"any\" (1+ branches can be taken) or \"all\" (all branches must be taken).\n\n    ![MultipleChoice(1, 'all', '1', '2', '3')](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-multiplechoice.svg?sanitize=true \"MultipleChoice(1, 'all', '1', '2', '3')\")\n\n* HorizontalChoice(...children) - Identical to Choice, but the items are stacked horizontally rather than vertically. There's no \"straight-line\" choice, so it just takes a list of children. Best used when a simple Choice would be too tall; instead, you can break up the items into a HorizontalChoice of Choices of an appropriate height.\n\n\t![HorizontalChoice(Choice(2,'0','1','2','3','4'), Choice(2, '5', '6', '7', '8', '9'))](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-horizontalchoice.svg?sanitize=true \"HorizontalChoice(Choice(2,'0','1','2','3','4'), Choice(2, '5', '6', '7', '8', '9'))\")\n\n* Optional(child, skip?) - like `?` in a regex.  A shorthand for `Choice(1, Skip(), child)`.  If the optional `skip` parameter is `True`, it instead puts the Skip() in the straight-line path, for when the \"normal\" behavior is to omit the item.\n\n    ![Optional('foo'), Optional('bar', 'skip')](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-optional.svg?sanitize=true \"Optional('foo'), Optional('bar', 'skip')\")\n\n* OneOrMore(child, repeat?) - like `+` in a regex.  The 'repeat' argument is optional, and specifies something that must go between the repetitions (usually a `Comment()`, but sometimes things like `\",\"`, etc.)\n\n    ![OneOrMore('foo', Comment('bar'))](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-oneormore.svg?sanitize=true \"OneOrMore('foo', Comment('bar'))\")\n\n* AlternatingSequence(option1, option2) - similar to a OneOrMore, where you must alternate between the two choices, but allows you to start and end with either element. (OneOrMore requires you to start and end with the \"child\" node.)\n\n    ![AlternatingSequence('foo', 'bar')](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-alternatingsequence.svg?sanitize=true \"AlternatingSequence('foo', 'bar')\")\n\n* ZeroOrMore(child, repeat?, skip?) - like `*` in a regex.  A shorthand for `Optional(OneOrMore(child, repeat), skip)`.  Both `repeat` (same as in `OneOrMore()`) and `skip` (same as in `Optional()`) are optional.\n\n    ![ZeroOrMore('foo', Comment('bar')), ZeroOrMore('foo', Comment('bar'), 'skip')](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-zeroormore.svg?sanitize=true \"ZeroOrMore('foo', Comment('bar')), ZeroOrMore('foo', Comment('bar'), 'skip')\")\n\n* Group(child, label?) - highlights its child with a dashed outline, and optionally labels it. Passing a string as the label constructs a Comment, or you can build one yourself (to give an href or title).\n\n    ![Sequence(\"foo\", Group(Choice(0, NonTerminal('option 1'), NonTerminal('or two')), \"label\"), \"bar\",)](https://github.com/tabatkins/railroad-diagrams/raw/gh-pages/images/rr-group.svg?sanitize=true \"Sequence('foo', Group(Choice(0, NonTerminal('option 1'), NonTerminal('or two')), 'label'), 'bar',)\")\n\n\nOptions\n-------\n\nThere are a few options you can tweak, living as UPPERCASE_CONSTANTS at the top of the module; these can be adjusted via `railroad.OPTION_NAME_HERE = \"whatever\"`.\nNote that if you change the text sizes in the CSS,\nyou'll have to adjust the text metrics here as well.\n\n* VS - sets the minimum amount of vertical separation between two items, in CSS px.  Note that the stroke width isn't counted when computing the separation; this shouldn't be relevant unless you have a very small separation or very large stroke width. Defaults to `8`.\n* AR - the radius of the arcs, in CSS px, used in the branching containers like Choice.  This has a relatively large effect on the size of non-trivial diagrams.  Both tight and loose values look good, depending on what you're going for. Defaults to `10`.\n* DIAGRAM_CLASS - the class set on the root `<svg>` element of each diagram, for use in the CSS stylesheet. Defaults to `\"railroad-diagram\"`.\n* STROKE_ODD_PIXEL_LENGTH - the default stylesheet uses odd pixel lengths for 'stroke'. Due to rasterization artifacts, they look best when the item has been translated half a pixel in both directions. If you change the styling to use a stroke with even pixel lengths, you'll want to set this variable to `False`.\n* INTERNAL_ALIGNMENT - when some branches of a container are narrower than others, this determines how they're aligned in the extra space.  Defaults to \"center\", but can be set to \"left\" or \"right\".\n* CHAR_WIDTH - the approximate width, in CSS px, of characters in normal text (`Terminal` and `NonTerminal`). Defaults to `8.5`.\n* COMMENT_CHAR_WIDTH - the approximate width, in CSS px, of character in `Comment` text, which by default is smaller than the other textual items. Defaults to `7`.\n* DEBUG - if `True`, writes some additional \"debug information\" into the attributes of elements in the output, to help debug sizing issues. Defaults to `False`.\n\nCaveats\n-------\n\nSVG can't actually respond to the sizes of content; in particular, there's no way to make SVG adjust sizing/positioning based on the length of some text.  Instead, I guess at some font metrics, which mostly work as long as you're using a fairly standard monospace font.  This works pretty well, but long text inside of a construct might eventually overflow the construct.\n\nLicense\n-------\n\nThis document and all associated files in the github project are licensed under [CC0](http://creativecommons.org/publicdomain/zero/1.0/) ![](http://i.creativecommons.org/p/zero/1.0/80x15.png).\nThis means you can reuse, remix, or otherwise appropriate this project for your own use **without restriction**.\n(The actual legal meaning can be found at the above link.)\nDon't ask me for permission to use any part of this project, **just use it**.\nI would appreciate attribution, but that is not required by the license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tabatkins/railroad-diagrams", "keywords": "diagrams,syntax,grammar,railroad diagrams", "license": "", "maintainer": "", "maintainer_email": "", "name": "railroad-diagrams", "package_url": "https://pypi.org/project/railroad-diagrams/", "platform": "", "project_url": "https://pypi.org/project/railroad-diagrams/", "project_urls": {"Homepage": "https://github.com/tabatkins/railroad-diagrams"}, "release_url": "https://pypi.org/project/railroad-diagrams/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "Generate SVG railroad syntax diagrams, like on JSON.org.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Railroad-Diagram Generator</h1>\n<p><a href=\"https://github.com/tabatkins/railroad-diagrams/blob/gh-pages/images/rr-title.svg\" rel=\"nofollow\"><img alt=\"Diagram(Stack('Generate', 'some'), OneOrMore(NonTerminal('railroad diagrams'), Comment('and more')))\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c534f081c7647519a2672c122557a8a1a3964f4/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d7469746c652e7376673f73616e6974697a653d74727565\" width=\"10000\"></a></p>\n<p>This is a small library for generating railroad diagrams\n(like what <a href=\"http://json.org\" rel=\"nofollow\">JSON.org</a> uses)\nusing SVG, with both JS and Python ports.</p>\n<p>Railroad diagrams are a way of visually representing a grammar\nin a form that is more readable than using regular expressions or BNF.\nThey can easily represent any context-free grammar, and some more powerful grammars.\nThere are several railroad-diagram generators out there, but none of them had the visual appeal I wanted, so I wrote my own.</p>\n<p><a href=\"https://tabatkins.github.io/railroad-diagrams/generator.html\" rel=\"nofollow\">Here's an online dingus for you to play with and get SVG code from!</a></p>\n<p>(This is the README for the Python port;\nto see the JS README, visit <a href=\"https://github.com/tabatkins/railroad-diagrams\" rel=\"nofollow\">https://github.com/tabatkins/railroad-diagrams</a>.)</p>\n<h2>Diagrams</h2>\n<p>Constructing a diagram is a set of nested calls:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">railroad</span> <span class=\"kn\">import</span> <span class=\"n\">Diagram</span><span class=\"p\">,</span> <span class=\"n\">Choice</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Diagram</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"n\">Choice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span> <span class=\"s2\">\"baz\"</span><span class=\"p\">))</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">writeSvg</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">)</span>\n</pre>\n<p>A railroad diagram must be started as a <code>Diagram</code> object,\nwhich takes a list of diagram items,\ndefined below.</p>\n<p>The <code>Diagram()</code> constructor also optionally takes some keyword arguments:</p>\n<ul>\n<li>\n<p><code>css</code>: If passed, is the CSS you would like the diagram to include.\nIf you don't pass anything, it defaults to including <code>railroad.DEFAULT_STYLE</code>.\nIf you don't want it to include any css at all in the diagram\n(perhaps because you're including the <code>railroad.css</code> file manually in your page, and don't need each diagram to duplicate the CSS in itself),\npass <code>css=None</code>.</p>\n</li>\n<li>\n<p><code>type</code>: JSON.org, the inspiration for these diagram's styling, technically has two varieties of Diagrams: a \"simple\" kind it uses for \"leaf\" types like numbers, and a \"complex\" kind which is used for container types like arrays. The only difference is the shape of the start/end indicators of the diagram.</p>\n<p>Diagrams default to being \"simple\", but you can manually choose by passing <code>type=\"simple\"</code> or <code>type=\"complex\"</code>.</p>\n</li>\n</ul>\n<p>After constructing a Diagram, you can call <code>.format(...padding)</code> on it, specifying 0-4 padding values (just like CSS) for some additional \"breathing space\" around the diagram (the paddings default to 20px).</p>\n<p>To output the diagram, call <code>.writeSvg(cb)</code> on it, passing a function that'll get called repeatedly to produce the SVG markup. <code>sys.stdout.write</code> (or the <code>.write</code> property of any file object) is a great value to pass if you're directly outputting it; if you need it as a plain string, a <code>StringIO</code> can be used.</p>\n<p>If you need to walk the component tree of a diagram for some reason, <code>Diagram</code> has a <code>.walk(cb)</code> method as well, which will call your callback on every node in the diagram, in a \"pre-order depth-first traversal\" (the node first, then each child).</p>\n<h2>Components</h2>\n<p>Components are either leaves (containing only text or similar)\nor containers (containing other components).</p>\n<p>The leaves:</p>\n<ul>\n<li>Terminal(text, href) or a bare string - represents literal text. The 'href' attribute is optional, and creates a hyperlink with the given destination.</li>\n<li>NonTerminal(text, href) - represents an instruction or another production. The 'href' attribute is optional, and creates a hyperlink with the given destination.</li>\n<li>Comment(text, href) - a comment. The 'href' attribute is optional, and creates a hyperlink with the given destination.</li>\n<li>Skip() - an empty line</li>\n<li>Start(type, label) and End(type) - the start/end shapes. These are supplied by default, but if you want to supply a label to the diagram, you can create a Start() explicitly (as the first child of the Diagram!). The \"type\" attribute takes either \"simple\" (the default) or \"complex\", a la Diagram() and ComplexDiagram(). All arguments are optional.</li>\n</ul>\n<p>The containers:</p>\n<ul>\n<li>\n<p>Sequence(...children) - like simple concatenation in a regex.</p>\n<p><img alt=\"Sequence('1', '2', '3')\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9beff6312c673ff49a890ca9e452aa82486a1f2/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d73657175656e63652e7376673f73616e6974697a653d74727565\"></p>\n</li>\n<li>\n<p>Stack(...children) - identical to a Sequence, but the items are stacked vertically rather than horizontally. Best used when a simple Sequence would be too wide; instead, you can break the items up into a Stack of Sequences of an appropriate width.</p>\n<p><img alt=\"Stack('1', '2', '3')\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/573788a04bd9f3d5a7440d4811ae63fd931410bc/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d737461636b2e7376673f73616e6974697a653d74727565\"></p>\n</li>\n<li>\n<p>OptionalSequence(...children) - a Sequence where every item is <em>individually</em> optional, but at least one item must be chosen</p>\n<p><img alt=\"OptionalSequence('1', '2', '3')\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1f9ccf2350a020385f54f1de96aad15334ebf6b/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d6f7074696f6e616c73657175656e63652e7376673f73616e6974697a653d74727565\"></p>\n</li>\n<li>\n<p>Choice(index, ...children) - like <code>|</code> in a regex.  The index argument specifies which child is the \"normal\" choice and should go in the middle (starting from 0 for the first child).</p>\n<p><img alt=\"Choice(1, '1', '2', '3')\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8ff92660bd85950ec513b474725d49f95608bf7/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d63686f6963652e7376673f73616e6974697a653d74727565\"></p>\n</li>\n<li>\n<p>MultipleChoice(index, type, ...children) - like <code>||</code> or <code>&amp;&amp;</code> in a CSS grammar; it's similar to a Choice, but more than one branch can be taken.  The index argument specifies which child is the \"normal\" choice and should go in the middle, while the type argument must be either \"any\" (1+ branches can be taken) or \"all\" (all branches must be taken).</p>\n<p><img alt=\"MultipleChoice(1, 'all', '1', '2', '3')\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d0af8bc312d665af735ab928d12a7256a72b8db/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d6d756c7469706c6563686f6963652e7376673f73616e6974697a653d74727565\"></p>\n</li>\n<li>\n<p>HorizontalChoice(...children) - Identical to Choice, but the items are stacked horizontally rather than vertically. There's no \"straight-line\" choice, so it just takes a list of children. Best used when a simple Choice would be too tall; instead, you can break up the items into a HorizontalChoice of Choices of an appropriate height.</p>\n<p><img alt=\"HorizontalChoice(Choice(2,'0','1','2','3','4'), Choice(2, '5', '6', '7', '8', '9'))\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1bb003180231489c6d0f2477b24227d59bc93a56/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d686f72697a6f6e74616c63686f6963652e7376673f73616e6974697a653d74727565\"></p>\n</li>\n<li>\n<p>Optional(child, skip?) - like <code>?</code> in a regex.  A shorthand for <code>Choice(1, Skip(), child)</code>.  If the optional <code>skip</code> parameter is <code>True</code>, it instead puts the Skip() in the straight-line path, for when the \"normal\" behavior is to omit the item.</p>\n<p><img alt=\"Optional('foo'), Optional('bar', 'skip')\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed6f1ed1f73e0a12f3a187b699d15711b3416f73/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d6f7074696f6e616c2e7376673f73616e6974697a653d74727565\"></p>\n</li>\n<li>\n<p>OneOrMore(child, repeat?) - like <code>+</code> in a regex.  The 'repeat' argument is optional, and specifies something that must go between the repetitions (usually a <code>Comment()</code>, but sometimes things like <code>\",\"</code>, etc.)</p>\n<p><img alt=\"OneOrMore('foo', Comment('bar'))\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7fabdce885ff67b6819ef17896df384c25c83ae/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d6f6e656f726d6f72652e7376673f73616e6974697a653d74727565\"></p>\n</li>\n<li>\n<p>AlternatingSequence(option1, option2) - similar to a OneOrMore, where you must alternate between the two choices, but allows you to start and end with either element. (OneOrMore requires you to start and end with the \"child\" node.)</p>\n<p><img alt=\"AlternatingSequence('foo', 'bar')\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d06e0b0ec499ddbbba5a115e2e2060d2978f3d9a/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d616c7465726e6174696e6773657175656e63652e7376673f73616e6974697a653d74727565\"></p>\n</li>\n<li>\n<p>ZeroOrMore(child, repeat?, skip?) - like <code>*</code> in a regex.  A shorthand for <code>Optional(OneOrMore(child, repeat), skip)</code>.  Both <code>repeat</code> (same as in <code>OneOrMore()</code>) and <code>skip</code> (same as in <code>Optional()</code>) are optional.</p>\n<p><img alt=\"ZeroOrMore('foo', Comment('bar')), ZeroOrMore('foo', Comment('bar'), 'skip')\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08e2c8c7d8c01b07ab939ab91f222e19e2ae30a9/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d7a65726f6f726d6f72652e7376673f73616e6974697a653d74727565\"></p>\n</li>\n<li>\n<p>Group(child, label?) - highlights its child with a dashed outline, and optionally labels it. Passing a string as the label constructs a Comment, or you can build one yourself (to give an href or title).</p>\n<p><img alt=\"Sequence(&quot;foo&quot;, Group(Choice(0, NonTerminal('option 1'), NonTerminal('or two')), &quot;label&quot;), &quot;bar&quot;,)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72392f35fd6b8656ecb25ff972642a4aee9111ef/68747470733a2f2f6769746875622e636f6d2f74616261746b696e732f7261696c726f61642d6469616772616d732f7261772f67682d70616765732f696d616765732f72722d67726f75702e7376673f73616e6974697a653d74727565\"></p>\n</li>\n</ul>\n<h2>Options</h2>\n<p>There are a few options you can tweak, living as UPPERCASE_CONSTANTS at the top of the module; these can be adjusted via <code>railroad.OPTION_NAME_HERE = \"whatever\"</code>.\nNote that if you change the text sizes in the CSS,\nyou'll have to adjust the text metrics here as well.</p>\n<ul>\n<li>VS - sets the minimum amount of vertical separation between two items, in CSS px.  Note that the stroke width isn't counted when computing the separation; this shouldn't be relevant unless you have a very small separation or very large stroke width. Defaults to <code>8</code>.</li>\n<li>AR - the radius of the arcs, in CSS px, used in the branching containers like Choice.  This has a relatively large effect on the size of non-trivial diagrams.  Both tight and loose values look good, depending on what you're going for. Defaults to <code>10</code>.</li>\n<li>DIAGRAM_CLASS - the class set on the root <code>&lt;svg&gt;</code> element of each diagram, for use in the CSS stylesheet. Defaults to <code>\"railroad-diagram\"</code>.</li>\n<li>STROKE_ODD_PIXEL_LENGTH - the default stylesheet uses odd pixel lengths for 'stroke'. Due to rasterization artifacts, they look best when the item has been translated half a pixel in both directions. If you change the styling to use a stroke with even pixel lengths, you'll want to set this variable to <code>False</code>.</li>\n<li>INTERNAL_ALIGNMENT - when some branches of a container are narrower than others, this determines how they're aligned in the extra space.  Defaults to \"center\", but can be set to \"left\" or \"right\".</li>\n<li>CHAR_WIDTH - the approximate width, in CSS px, of characters in normal text (<code>Terminal</code> and <code>NonTerminal</code>). Defaults to <code>8.5</code>.</li>\n<li>COMMENT_CHAR_WIDTH - the approximate width, in CSS px, of character in <code>Comment</code> text, which by default is smaller than the other textual items. Defaults to <code>7</code>.</li>\n<li>DEBUG - if <code>True</code>, writes some additional \"debug information\" into the attributes of elements in the output, to help debug sizing issues. Defaults to <code>False</code>.</li>\n</ul>\n<h2>Caveats</h2>\n<p>SVG can't actually respond to the sizes of content; in particular, there's no way to make SVG adjust sizing/positioning based on the length of some text.  Instead, I guess at some font metrics, which mostly work as long as you're using a fairly standard monospace font.  This works pretty well, but long text inside of a construct might eventually overflow the construct.</p>\n<h2>License</h2>\n<p>This document and all associated files in the github project are licensed under <a href=\"http://creativecommons.org/publicdomain/zero/1.0/\" rel=\"nofollow\">CC0</a> <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a990ea518ea3d20e629969d7b599e26041abc5cc/687474703a2f2f692e6372656174697665636f6d6d6f6e732e6f72672f702f7a65726f2f312e302f38307831352e706e67\">.\nThis means you can reuse, remix, or otherwise appropriate this project for your own use <strong>without restriction</strong>.\n(The actual legal meaning can be found at the above link.)\nDon't ask me for permission to use any part of this project, <strong>just use it</strong>.\nI would appreciate attribution, but that is not required by the license.</p>\n\n          </div>"}, "last_serial": 7044508, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ca27afc0890fafbe802f3817e819b258", "sha256": "c48d853ee0e5918cc15bfcff4676a7e807f7256e846afd12dcd8cf15d610552a"}, "downloads": -1, "filename": "railroad_diagrams-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ca27afc0890fafbe802f3817e819b258", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13679, "upload_time": "2020-04-17T19:04:25", "upload_time_iso_8601": "2020-04-17T19:04:25.773148Z", "url": "https://files.pythonhosted.org/packages/fa/5b/1110aef39f3d4f19103e0c16666cd4fb987b30582251357c143c8cb68b47/railroad_diagrams-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "498c4910cf3b6a4e244395cdca3cf074", "sha256": "666ee3cb22e6894216ab2be3984ecf6f5ee5a60c83f9f6d248e5c502e6328f65"}, "downloads": -1, "filename": "railroad-diagrams-1.0.0.tar.gz", "has_sig": false, "md5_digest": "498c4910cf3b6a4e244395cdca3cf074", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18278, "upload_time": "2020-04-17T19:04:27", "upload_time_iso_8601": "2020-04-17T19:04:27.860564Z", "url": "https://files.pythonhosted.org/packages/f4/bb/fea9b2a7def2063b701390644574d973adbe75dae4bdd64b4d33a71ee115/railroad-diagrams-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c631a427edf2a3b0be38da68bc885646", "sha256": "a43c19692ca3c27cdad400b58458a6293c7ac741f3efdac853f8bfe79ee763a4"}, "downloads": -1, "filename": "railroad_diagrams-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c631a427edf2a3b0be38da68bc885646", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13729, "upload_time": "2020-04-17T19:10:14", "upload_time_iso_8601": "2020-04-17T19:10:14.786697Z", "url": "https://files.pythonhosted.org/packages/22/62/62902bac9339fbdbece13c90d3cdd19095f8c333334819200e52a845cb41/railroad_diagrams-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0392e570be8e5f58af4a56e8aecded63", "sha256": "dc39cc11b50ecd32af87c521932f3f366c51d9ad2dd839197930d74f1f54e19b"}, "downloads": -1, "filename": "railroad-diagrams-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0392e570be8e5f58af4a56e8aecded63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18369, "upload_time": "2020-04-17T19:10:16", "upload_time_iso_8601": "2020-04-17T19:10:16.329256Z", "url": "https://files.pythonhosted.org/packages/a0/90/5c7c11cf5e255b30b72d4fa77859d98b13f783b52e435dafd0ad84c33b51/railroad-diagrams-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "607f031a574ff3b25b2a7ccfa0c3560d", "sha256": "a08886d29b516ab664e95d8fadc8fd26df22ae3a19d085737587ccf811adc749"}, "downloads": -1, "filename": "railroad_diagrams-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "607f031a574ff3b25b2a7ccfa0c3560d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13739, "upload_time": "2020-04-17T19:12:53", "upload_time_iso_8601": "2020-04-17T19:12:53.290611Z", "url": "https://files.pythonhosted.org/packages/02/36/1f8a7b3aa2e30e9d676b8be756088897be989a6fc5b126b847ba1997d8a2/railroad_diagrams-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3509f1f17abce922a911614f9b96fb4f", "sha256": "9359c7acfcb325ba93fb639cb2ab034052b1f194dc3ca42a960db47fdfd17a47"}, "downloads": -1, "filename": "railroad-diagrams-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3509f1f17abce922a911614f9b96fb4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18382, "upload_time": "2020-04-17T19:12:54", "upload_time_iso_8601": "2020-04-17T19:12:54.508589Z", "url": "https://files.pythonhosted.org/packages/c4/aa/c6f0020c0d7611f6b06eab1d3745e84c54e46a31f33259fd615511df40ed/railroad-diagrams-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "36fe45f2865a5f9ecbd3d090a90efeba", "sha256": "1298dc7f88a00a1d048ea2713dfaf4d8d5619723a85d7560cc8fd215ab86771a"}, "downloads": -1, "filename": "railroad_diagrams-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "36fe45f2865a5f9ecbd3d090a90efeba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13575, "upload_time": "2020-04-17T22:01:40", "upload_time_iso_8601": "2020-04-17T22:01:40.318374Z", "url": "https://files.pythonhosted.org/packages/7f/21/8948088005da5baf053f6a8c678fdb3f5f61a934100cc62eb90661df0223/railroad_diagrams-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d004eaf5db9974bf85747fd6d4fb3c44", "sha256": "342d1b9e4bfc335d25886a06d5435374aafeeadbc9285d0caae6b6aa68801dac"}, "downloads": -1, "filename": "railroad-diagrams-1.0.3.tar.gz", "has_sig": false, "md5_digest": "d004eaf5db9974bf85747fd6d4fb3c44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19079, "upload_time": "2020-04-17T22:01:41", "upload_time_iso_8601": "2020-04-17T22:01:41.505229Z", "url": "https://files.pythonhosted.org/packages/b8/7e/84c454e07f23be8560112f7975d5fe01394671f3074521ebed4180248567/railroad-diagrams-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36fe45f2865a5f9ecbd3d090a90efeba", "sha256": "1298dc7f88a00a1d048ea2713dfaf4d8d5619723a85d7560cc8fd215ab86771a"}, "downloads": -1, "filename": "railroad_diagrams-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "36fe45f2865a5f9ecbd3d090a90efeba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13575, "upload_time": "2020-04-17T22:01:40", "upload_time_iso_8601": "2020-04-17T22:01:40.318374Z", "url": "https://files.pythonhosted.org/packages/7f/21/8948088005da5baf053f6a8c678fdb3f5f61a934100cc62eb90661df0223/railroad_diagrams-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d004eaf5db9974bf85747fd6d4fb3c44", "sha256": "342d1b9e4bfc335d25886a06d5435374aafeeadbc9285d0caae6b6aa68801dac"}, "downloads": -1, "filename": "railroad-diagrams-1.0.3.tar.gz", "has_sig": false, "md5_digest": "d004eaf5db9974bf85747fd6d4fb3c44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19079, "upload_time": "2020-04-17T22:01:41", "upload_time_iso_8601": "2020-04-17T22:01:41.505229Z", "url": "https://files.pythonhosted.org/packages/b8/7e/84c454e07f23be8560112f7975d5fe01394671f3074521ebed4180248567/railroad-diagrams-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:51 2020"}