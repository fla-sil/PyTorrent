{"info": {"author": "Rafael Torres", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==================================================== django-angular-url:\nManage Django URLs for AngularJS\n====================================================\n\nYou may have noticed, that AngularJS controllers sometimes need a URL\npointing to a Django view of your application. Do not enter into\ntemptation to hard code such a URL into the client side controller code.\nNor enter into temptation to create Javascript dynamically using a\ntemplate engine. There is a clean and simple solution to solve this\nproblem.\n\nIt is good practice to add configuration directives to applications as\nconstants to the AngularJS module definition. This can safely be done in\nthe template code rendered by Django, where it belongs!\n\nAcknowledgements\n================\n\nThis code is based on the django-angular project by Jacob Rief\nhttps://github.com/jrief/django-angular\n\nIt only includes the url reversing functionality and uses the old\nstrategy of having the routes loaded in a Javascript object on the\ntemplate.\n\nInstallation\n============\n\nIt is assumed that your AngularJS application has already been\ninitialized and that you have loaded django-angular tags,\n``{% load django_angular_tags %}``:\n\n::\n\n   {% load django_angular_tags %}\n   <script>\n       var my_app = angular.module('MyApp', ['ng.django.urls', /* other dependencies */]);\n   </script>\n\nNow, you have to include ``django-angular-url.js`` and add data about\nyour django url configuration:\n\n::\n\n   <script src=\"{% static 'django_angular_url/js/django-angular-url.js' %}\"></script>\n   <script>angular.module('ng.django.urls').constant('patterns', {% load_djng_urls %});</script>\n\nThe ``djangoUrl`` service is then available through dependency injection\nto all directives and controllers.\n\nUsage\n=====\n\nThe reversing functionality is provided by\n``djangoUrl.reverse(name, args_or_kwargs)`` method. It behaves much like\nthe django\u2019s url template tag.\n\nParameters\n----------\n\nname The url name you wish to reverse, exactly the same as what you\nwould use in ``{% url %}`` template tag. args_or_kwargs (optional) An\narray of arguments, e.g.\u00a0\\ ``['article', 4]`` or an object of keyword\narguments, such as ``{'type': 'article', 'id': 4}``.\n\nExample\n-------\n\n::\n\n   my_app.controller('MyCtrl', ['$scope', '$http', 'djangoUrl',\n    function($scope, $http, djangoUrl) {\n\n       $http.post(djangoUrl.reverse('api:articles', [1]), {action: 'get_data'})\n           .success(function (out_data) {\n               $scope.data = out_data;\n       });\n\n       // Or $http.post(djangoUrl.reverse('api:articles', {'id': 1}) ...\n       // djangoUrl.reverse('api:article', {'id': 1}) returns something like '/api/article/1/'\n   }]);\n\nParametrized URL templates\n--------------------------\n\ndjangoUrl\u2019s ``reverse()`` method also provides an option to create\nparametrized URL templates, which can be used with Angular\u2019s\n``$resource``. These templates look something like:\n``/api/articles/:id/``, parameters prefixed by ``:`` are filled by\nAngular.\n\nYou can create parametrized templates by using ``reverse()`` method in\nkeyword arguments mode. Parameters not present in keyword arguments\nobject will be replaced by ``:`` prefixed name from urlpatterns.\n\n::\n\n   my_app.controller('MyCtrl', ['$scope', '$http', 'djangoUrl',\n    function($scope, $http, djangoUrl) {\n       // Urlconf\n       // ...\n       // url(r'^api/(?P<type>\\w+)/(?P<id>\\d+)/$', api.models, name='api'),\n       // ...\n\n       // djangoUrl.reverse('api', {'id': 1, 'type': 'article'}) -> /api/article/1/\n       // djangoUrl.reverse('api', {'id': 1}) -> /api/:type/1/\n       // djangoUrl.reverse('api', {'type': 'article'}) -> /api/article/:id/\n       // djangoUrl.reverse('api', {}) -> /api/:type/:id/\n       // djangoUrl.reverse('api') -> /api/:type/:id/\n       // When nothing is passed as args_or_kwargs argument, reverse() defaults\n       // to keyword arguments mode\n   }]);\n\nSo when building a service with ``$resource`` you can use\n``djangoUrl.reverse()`` method just to make a parametrized URL template,\nor to partially fill it and have Angular add other arguments.\n\n::\n\n   my_app.controller('MyCtrl', ['$resource', 'djangoUrl', function($resource, djangoUrl) {\n\n       var Article = $resource(djangoUrl.reverse('api'), {'id': '@id', 'type': 'article'});\n       // or\n       var Article = $resource(djangoUrl.reverse('api', {'type': 'article'}), {id: '@id'});\n\n   }]);", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rafitorres/django-angular-url", "keywords": "django,angularjs", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-angular-url", "package_url": "https://pypi.org/project/django-angular-url/", "platform": "OS Independent", "project_url": "https://pypi.org/project/django-angular-url/", "project_urls": {"Homepage": "https://github.com/rafitorres/django-angular-url"}, "release_url": "https://pypi.org/project/django-angular-url/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Manage Django URLs for AngularJS", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>==================================================== django-angular-url:\nManage Django URLs for AngularJS\n====================================================</p>\n<p>You may have noticed, that AngularJS controllers sometimes need a URL\npointing to a Django view of your application. Do not enter into\ntemptation to hard code such a URL into the client side controller code.\nNor enter into temptation to create Javascript dynamically using a\ntemplate engine. There is a clean and simple solution to solve this\nproblem.</p>\n<p>It is good practice to add configuration directives to applications as\nconstants to the AngularJS module definition. This can safely be done in\nthe template code rendered by Django, where it belongs!</p>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>This code is based on the django-angular project by Jacob Rief\n<a href=\"https://github.com/jrief/django-angular\" rel=\"nofollow\">https://github.com/jrief/django-angular</a></p>\n<p>It only includes the url reversing functionality and uses the old\nstrategy of having the routes loaded in a Javascript object on the\ntemplate.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>It is assumed that your AngularJS application has already been\ninitialized and that you have loaded django-angular tags,\n<tt>{% load django_angular_tags %}</tt>:</p>\n<pre>{% load django_angular_tags %}\n&lt;script&gt;\n    var my_app = angular.module('MyApp', ['ng.django.urls', /* other dependencies */]);\n&lt;/script&gt;\n</pre>\n<p>Now, you have to include <tt><span class=\"pre\">django-angular-url.js</span></tt> and add data about\nyour django url configuration:</p>\n<pre>&lt;script src=\"{% static 'django_angular_url/js/django-angular-url.js' %}\"&gt;&lt;/script&gt;\n&lt;script&gt;angular.module('ng.django.urls').constant('patterns', {% load_djng_urls %});&lt;/script&gt;\n</pre>\n<p>The <tt>djangoUrl</tt> service is then available through dependency injection\nto all directives and controllers.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The reversing functionality is provided by\n<tt>djangoUrl.reverse(name, args_or_kwargs)</tt> method. It behaves much like\nthe django\u2019s url template tag.</p>\n<div id=\"parameters\">\n<h3>Parameters</h3>\n<p>name The url name you wish to reverse, exactly the same as what you\nwould use in <tt>{% url %}</tt> template tag. args_or_kwargs (optional) An\narray of arguments, e.g.\u00a0<tt>['article', 4]</tt> or an object of keyword\narguments, such as <tt>{'type': 'article', 'id': 4}</tt>.</p>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<pre>my_app.controller('MyCtrl', ['$scope', '$http', 'djangoUrl',\n function($scope, $http, djangoUrl) {\n\n    $http.post(djangoUrl.reverse('api:articles', [1]), {action: 'get_data'})\n        .success(function (out_data) {\n            $scope.data = out_data;\n    });\n\n    // Or $http.post(djangoUrl.reverse('api:articles', {'id': 1}) ...\n    // djangoUrl.reverse('api:article', {'id': 1}) returns something like '/api/article/1/'\n}]);\n</pre>\n</div>\n<div id=\"parametrized-url-templates\">\n<h3>Parametrized URL templates</h3>\n<p>djangoUrl\u2019s <tt>reverse()</tt> method also provides an option to create\nparametrized URL templates, which can be used with Angular\u2019s\n<tt>$resource</tt>. These templates look something like:\n<tt><span class=\"pre\">/api/articles/:id/</span></tt>, parameters prefixed by <tt>:</tt> are filled by\nAngular.</p>\n<p>You can create parametrized templates by using <tt>reverse()</tt> method in\nkeyword arguments mode. Parameters not present in keyword arguments\nobject will be replaced by <tt>:</tt> prefixed name from urlpatterns.</p>\n<pre>my_app.controller('MyCtrl', ['$scope', '$http', 'djangoUrl',\n function($scope, $http, djangoUrl) {\n    // Urlconf\n    // ...\n    // url(r'^api/(?P&lt;type&gt;\\w+)/(?P&lt;id&gt;\\d+)/$', api.models, name='api'),\n    // ...\n\n    // djangoUrl.reverse('api', {'id': 1, 'type': 'article'}) -&gt; /api/article/1/\n    // djangoUrl.reverse('api', {'id': 1}) -&gt; /api/:type/1/\n    // djangoUrl.reverse('api', {'type': 'article'}) -&gt; /api/article/:id/\n    // djangoUrl.reverse('api', {}) -&gt; /api/:type/:id/\n    // djangoUrl.reverse('api') -&gt; /api/:type/:id/\n    // When nothing is passed as args_or_kwargs argument, reverse() defaults\n    // to keyword arguments mode\n}]);\n</pre>\n<p>So when building a service with <tt>$resource</tt> you can use\n<tt>djangoUrl.reverse()</tt> method just to make a parametrized URL template,\nor to partially fill it and have Angular add other arguments.</p>\n<pre>my_app.controller('MyCtrl', ['$resource', 'djangoUrl', function($resource, djangoUrl) {\n\n    var Article = $resource(djangoUrl.reverse('api'), {'id': '@id', 'type': 'article'});\n    // or\n    var Article = $resource(djangoUrl.reverse('api', {'type': 'article'}), {id: '@id'});\n\n}]);\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6255985, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "242d32e9e7f2ec8f80c7d97b57c5d931", "sha256": "b422a28b18214750c32e8cee8f240d78b64481f491b2f90dfdc285250a66a157"}, "downloads": -1, "filename": "django-angular-url-0.1.1.tar.gz", "has_sig": false, "md5_digest": "242d32e9e7f2ec8f80c7d97b57c5d931", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15723, "upload_time": "2019-12-06T17:19:09", "upload_time_iso_8601": "2019-12-06T17:19:09.665695Z", "url": "https://files.pythonhosted.org/packages/6c/b5/5c3317d9936afe49de1a6b3c535d072bb2466427deab5c292f3673506d6f/django-angular-url-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "242d32e9e7f2ec8f80c7d97b57c5d931", "sha256": "b422a28b18214750c32e8cee8f240d78b64481f491b2f90dfdc285250a66a157"}, "downloads": -1, "filename": "django-angular-url-0.1.1.tar.gz", "has_sig": false, "md5_digest": "242d32e9e7f2ec8f80c7d97b57c5d931", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15723, "upload_time": "2019-12-06T17:19:09", "upload_time_iso_8601": "2019-12-06T17:19:09.665695Z", "url": "https://files.pythonhosted.org/packages/6c/b5/5c3317d9936afe49de1a6b3c535d072bb2466427deab5c292f3673506d6f/django-angular-url-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:41 2020"}