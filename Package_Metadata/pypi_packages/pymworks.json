{"info": {"author": "Brett Graham", "author_email": "braingram720@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "This is a pure-python module for reading mworks data files.\n\nRequirements\n----\n\nNothing for 'basics' on python 2.7\n\npython 2.6 requires lxml because the ElementTree\nincluded with py2.6 does not support enough XPath\n\nprotocol inspection requires networkx\n\n====\nIntro\n====\n\nMWorks files are made up of events. Each event has\n\ntime\n  Unsigned integer. Time of event (in microseconds).\n  May be relative to system time or server start time.\n\ncode\n  Unsigned integer. Number assigned to this type of event.\n  Some are standard (0 = codec, etc...) others are experiment dependent.\n\nvalue\n  Flexible type. The 'payload' of the event.\n  May be a dict, list, int, None, etc...\n\nOne special event (name = 'codec', code = 0) is useful for understanding\nother events. The codec contains (as a value) a dictionary of codes (as keys)\nand names (as values).\n\nOpening files\n----\n\nAn MWorks file can be opened in pymworks using pymworks.open_file.\n\n::\n\n    import pymworks\n    fn = 'foo.mwk'\n    df = pymworks.open_file(fn)\n\nBy default, open_file with index the file (speeding up event fetching).\nThis index is written to disk as as a hidden file ('.' pre-pended).\nFor the above example (opening foo.mwk) a index file '.foo.mwk' would be\ncreated if it did not already exist. If you do not want to index the file,\nset the indexed kwarg to False for open_file:\n\n::\n\n    df = pymworks.open_file(fn, indexed=False)\n\nThe codec for this datafile is accessable as df.codec and for convenience a\nreversed version (keys=names, values=codes) is available as df.rcodec\n\n::\n\n    df.codec  # dict, keys = codes, values = event names\n    df.rcodec  # dict, keys = event names, values = codes\n\nReading events\n----\n\nEvents can be accessed several ways, the easiest being df.get_events.\n\n::\n\n    evs = df.get_events()  # get all events\n    cevs = df.get_events(0)  # get all events with code 0\n\n    # get all events with name 'success'\n    sevs = df.get_events('success')\n\n    # get_events also accepts a list of names (or codes)\n    toevs = df.get_events(['success', 'failure', 'ignore'])\n\n    # or a timerange (in microseconds)\n    eevs = df.get_events(time_range=[0, 60 * 1E6])  # events during first minute\n\nEvents (type pymworks.datafile.Event) each contain a time, code and value\n\n::\n\n    e = df.get_events('success')[0]  # get first success event\n    e.time  # time of event (in microseconds)\n    e.code  # event code\n    e.value  # value for event\n\n====\nNotes\n====\n\nLDOBinary.py and ScarabMarshal.py are originally from the mworks/mw_data_tools repo\n\nLDOBinary.py was fixed to actually work and not just throw errors\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pymworks", "package_url": "https://pypi.org/project/pymworks/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pymworks/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/pymworks/2.0.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            This is a pure-python module for reading mworks data files.<br><br>Requirements<br>----<br><br>Nothing for 'basics' on python 2.7<br><br>python 2.6 requires lxml because the ElementTree<br>included with py2.6 does not support enough XPath<br><br>protocol inspection requires networkx<br><br>====<br>Intro<br>====<br><br>MWorks files are made up of events. Each event has<br><br>time<br>  Unsigned integer. Time of event (in microseconds).<br>  May be relative to system time or server start time.<br><br>code<br>  Unsigned integer. Number assigned to this type of event.<br>  Some are standard (0 = codec, etc...) others are experiment dependent.<br><br>value<br>  Flexible type. The 'payload' of the event.<br>  May be a dict, list, int, None, etc...<br><br>One special event (name = 'codec', code = 0) is useful for understanding<br>other events. The codec contains (as a value) a dictionary of codes (as keys)<br>and names (as values).<br><br>Opening files<br>----<br><br>An MWorks file can be opened in pymworks using pymworks.open_file.<br><br>::<br><br>    import pymworks<br>    fn = 'foo.mwk'<br>    df = pymworks.open_file(fn)<br><br>By default, open_file with index the file (speeding up event fetching).<br>This index is written to disk as as a hidden file ('.' pre-pended).<br>For the above example (opening foo.mwk) a index file '.foo.mwk' would be<br>created if it did not already exist. If you do not want to index the file,<br>set the indexed kwarg to False for open_file:<br><br>::<br><br>    df = pymworks.open_file(fn, indexed=False)<br><br>The codec for this datafile is accessable as df.codec and for convenience a<br>reversed version (keys=names, values=codes) is available as df.rcodec<br><br>::<br><br>    df.codec  # dict, keys = codes, values = event names<br>    df.rcodec  # dict, keys = event names, values = codes<br><br>Reading events<br>----<br><br>Events can be accessed several ways, the easiest being df.get_events.<br><br>::<br><br>    evs = df.get_events()  # get all events<br>    cevs = df.get_events(0)  # get all events with code 0<br><br>    # get all events with name 'success'<br>    sevs = df.get_events('success')<br><br>    # get_events also accepts a list of names (or codes)<br>    toevs = df.get_events(['success', 'failure', 'ignore'])<br><br>    # or a timerange (in microseconds)<br>    eevs = df.get_events(time_range=[0, 60 * 1E6])  # events during first minute<br><br>Events (type pymworks.datafile.Event) each contain a time, code and value<br><br>::<br><br>    e = df.get_events('success')[0]  # get first success event<br>    e.time  # time of event (in microseconds)<br>    e.code  # event code<br>    e.value  # value for event<br><br>====<br>Notes<br>====<br><br>LDOBinary.py and ScarabMarshal.py are originally from the mworks/mw_data_tools repo<br><br>LDOBinary.py was fixed to actually work and not just throw errors<br>\n          </div>"}, "last_serial": 1140364, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "1375b02b6d0a9dab14bbdddab2670784", "sha256": "e4dc24d9dfb1740ffd072284171604bb6c52e005872057e7e4e1e794de2b2805"}, "downloads": -1, "filename": "pymworks-1.0.tar.gz", "has_sig": false, "md5_digest": "1375b02b6d0a9dab14bbdddab2670784", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9517, "upload_time": "2012-04-11T16:02:11", "upload_time_iso_8601": "2012-04-11T16:02:11.307123Z", "url": "https://files.pythonhosted.org/packages/11/ee/af461808582f9653ac2465b7558bda27802a045f641478781397f6bfc541/pymworks-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "d4be8751003715558468fb4bc7777b7f", "sha256": "cd911649fa0a9fce38ee003f7b0eb3ece62b420aaf4091219d79db262b13f569"}, "downloads": -1, "filename": "pymworks-1.1.tar.gz", "has_sig": false, "md5_digest": "d4be8751003715558468fb4bc7777b7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10312, "upload_time": "2012-05-16T00:01:53", "upload_time_iso_8601": "2012-05-16T00:01:53.421950Z", "url": "https://files.pythonhosted.org/packages/f8/76/ae6b15a709b5b177f3d353cb2a1feee9eb941370900bd7b30e34f681ee8d/pymworks-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "6a95349d7fc41ed8c3c59bef99f5fc7d", "sha256": "889a11bd2e298487ac2242ef802676b0ad1585c5a4d9ad74b046c5241ce7dc9f"}, "downloads": -1, "filename": "pymworks-1.2.tar.gz", "has_sig": false, "md5_digest": "6a95349d7fc41ed8c3c59bef99f5fc7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13865, "upload_time": "2012-09-18T02:46:14", "upload_time_iso_8601": "2012-09-18T02:46:14.565592Z", "url": "https://files.pythonhosted.org/packages/55/a2/e8da0ce66bd9f05a8e740f1e5f01ad1885d5e330543b972b576db7369d24/pymworks-1.2.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "770e32386b53132f10992aefe7da5dca", "sha256": "1392c69fd6380886ddb07ae246927d3dc921a79785dc95fb38a879f32ee0ffec"}, "downloads": -1, "filename": "pymworks-2.0.tar.gz", "has_sig": false, "md5_digest": "770e32386b53132f10992aefe7da5dca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26035, "upload_time": "2013-03-18T20:10:30", "upload_time_iso_8601": "2013-03-18T20:10:30.956094Z", "url": "https://files.pythonhosted.org/packages/d5/be/0c9530d90a471357c4856b54cd87a29480b1e32b89176e883d67ad8d5c1d/pymworks-2.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "8e48b3032bed3a791d5431ff00eca5bd", "sha256": "361dc30577ad99626eb9c0676d220b71b4119f51101f38bd6e3aaf58af48054c"}, "downloads": -1, "filename": "pymworks-2.0.1.tar.gz", "has_sig": false, "md5_digest": "8e48b3032bed3a791d5431ff00eca5bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30126, "upload_time": "2014-06-28T00:07:34", "upload_time_iso_8601": "2014-06-28T00:07:34.420670Z", "url": "https://files.pythonhosted.org/packages/a1/75/a9f45cff151b1229b7e730882e8b919fea9b94fde19da5c77e8a966577b4/pymworks-2.0.1.tar.gz", "yanked": false}], "dev": []}, "urls": [{"comment_text": "", "digests": {"md5": "8e48b3032bed3a791d5431ff00eca5bd", "sha256": "361dc30577ad99626eb9c0676d220b71b4119f51101f38bd6e3aaf58af48054c"}, "downloads": -1, "filename": "pymworks-2.0.1.tar.gz", "has_sig": false, "md5_digest": "8e48b3032bed3a791d5431ff00eca5bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30126, "upload_time": "2014-06-28T00:07:34", "upload_time_iso_8601": "2014-06-28T00:07:34.420670Z", "url": "https://files.pythonhosted.org/packages/a1/75/a9f45cff151b1229b7e730882e8b919fea9b94fde19da5c77e8a966577b4/pymworks-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:29 2020"}