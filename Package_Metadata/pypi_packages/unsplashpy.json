{"info": {"author": "Saul Dominguez", "author_email": "saulydominguez@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Unsplashpy\n\n## Description\n\nAn Unsplash client without the need for an api key. For a full documentation visit <https://sauldom102.github.io/unsplashpy>.\n\n## Getting started\n\nYou can try out how this module works by importing the Unsplash class, which will help you with some user regular actions as searching for a keyword and then download a certain number of image pages of that results.\n\n```python\nfrom unsplashpy import Unsplash\n\nu = Unsplash()\n\nsearch_text = input('Tell me what are you searching for: ')\nu.search(search_text)\n\nnum_pages = input('Pages to download [10]: ')\nnum_pages = 5 if num_pages == '' else int(num_pages)\n\nimage_size = input('Image size to download [regular]: ')\nimage_size = 'regular' if image_size == '' else image_size\n\nu.download_last_search(num_pages=num_pages, image_size=image_size)\n```\n\n## Some examples\n\n### Download user's photos\n\nThe bellow code will allow you to download all the user's published photos. One difference from the \"Quick start\" example is that this will take much more time downloading all pictures because this part doesn't make use of multithreading. We'll see another example on how to make this in a much more efficient way.\n\nAnother thing to know is that, by default, all the images downloaded will have a regular resolution.\n\n``` py3\nfrom unsplashpy import User\n\nusername = input('Tell me a username: ')\nu = User(username)\n\nfor p in u.photos:\n    p.download(download_location=username)\n```\n\n### Download user's photos (multithreading way)\n\nAs said before, this is a more efficient way to download photos. It takes much less time than the above example.\n\n``` py3\nfrom unsplashpy import User\n\nusername = input('Tell me a username: ')\nu = User(username)\nu.download_all_photos()\n```\n\n### Download random photo\n\n``` py3\nfrom unsplashpy import Photo\n\np = Photo.random()\np.download()\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sauldom102/unsplashpy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "unsplashpy", "package_url": "https://pypi.org/project/unsplashpy/", "platform": "", "project_url": "https://pypi.org/project/unsplashpy/", "project_urls": {"Homepage": "https://github.com/sauldom102/unsplashpy"}, "release_url": "https://pypi.org/project/unsplashpy/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "A Unsplash client without the need for an api key", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Unsplashpy</h1>\n<h2>Description</h2>\n<p>An Unsplash client without the need for an api key. For a full documentation visit <a href=\"https://sauldom102.github.io/unsplashpy\" rel=\"nofollow\">https://sauldom102.github.io/unsplashpy</a>.</p>\n<h2>Getting started</h2>\n<p>You can try out how this module works by importing the Unsplash class, which will help you with some user regular actions as searching for a keyword and then download a certain number of image pages of that results.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unsplashpy</span> <span class=\"kn\">import</span> <span class=\"n\">Unsplash</span>\n\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">Unsplash</span><span class=\"p\">()</span>\n\n<span class=\"n\">search_text</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s1\">'Tell me what are you searching for: '</span><span class=\"p\">)</span>\n<span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">search_text</span><span class=\"p\">)</span>\n\n<span class=\"n\">num_pages</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s1\">'Pages to download [10]: '</span><span class=\"p\">)</span>\n<span class=\"n\">num_pages</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"k\">if</span> <span class=\"n\">num_pages</span> <span class=\"o\">==</span> <span class=\"s1\">''</span> <span class=\"k\">else</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">num_pages</span><span class=\"p\">)</span>\n\n<span class=\"n\">image_size</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s1\">'Image size to download [regular]: '</span><span class=\"p\">)</span>\n<span class=\"n\">image_size</span> <span class=\"o\">=</span> <span class=\"s1\">'regular'</span> <span class=\"k\">if</span> <span class=\"n\">image_size</span> <span class=\"o\">==</span> <span class=\"s1\">''</span> <span class=\"k\">else</span> <span class=\"n\">image_size</span>\n\n<span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">download_last_search</span><span class=\"p\">(</span><span class=\"n\">num_pages</span><span class=\"o\">=</span><span class=\"n\">num_pages</span><span class=\"p\">,</span> <span class=\"n\">image_size</span><span class=\"o\">=</span><span class=\"n\">image_size</span><span class=\"p\">)</span>\n</pre>\n<h2>Some examples</h2>\n<h3>Download user's photos</h3>\n<p>The bellow code will allow you to download all the user's published photos. One difference from the \"Quick start\" example is that this will take much more time downloading all pictures because this part doesn't make use of multithreading. We'll see another example on how to make this in a much more efficient way.</p>\n<p>Another thing to know is that, by default, all the images downloaded will have a regular resolution.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unsplashpy</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s1\">'Tell me a username: '</span><span class=\"p\">)</span>\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">download_location</span><span class=\"o\">=</span><span class=\"n\">username</span><span class=\"p\">)</span>\n</pre>\n<h3>Download user's photos (multithreading way)</h3>\n<p>As said before, this is a more efficient way to download photos. It takes much less time than the above example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unsplashpy</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s1\">'Tell me a username: '</span><span class=\"p\">)</span>\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">)</span>\n<span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">download_all_photos</span><span class=\"p\">()</span>\n</pre>\n<h3>Download random photo</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unsplashpy</span> <span class=\"kn\">import</span> <span class=\"n\">Photo</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Photo</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 4454485, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f0e5b97ff9709c6db1c76ee59417ff9c", "sha256": "13f20dda328c73ffe0adbdbdad54c694d9fb686afb42acae1ab3e9963924103c"}, "downloads": -1, "filename": "unsplashpy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f0e5b97ff9709c6db1c76ee59417ff9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5561, "upload_time": "2018-11-04T18:13:30", "upload_time_iso_8601": "2018-11-04T18:13:30.535818Z", "url": "https://files.pythonhosted.org/packages/25/b4/1a06d82f5d78a95164d3090ed3d3b63257650a385ab307ad6a177342c180/unsplashpy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "acc8c58067fac32fa9d5963d49db240f", "sha256": "44f1135870a525678f29cf75e478ec9eda5423bffeace7c6db598929352a727a"}, "downloads": -1, "filename": "unsplashpy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "acc8c58067fac32fa9d5963d49db240f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4487, "upload_time": "2018-11-04T18:13:31", "upload_time_iso_8601": "2018-11-04T18:13:31.832410Z", "url": "https://files.pythonhosted.org/packages/ee/b6/40da3b533f55e9fcd2e6c92311d52450f58863857052fbd9bf8117ac6d03/unsplashpy-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "89cf5284e48eeed8ea90529aa51d80c3", "sha256": "fefeca03232f21cdb94d9aaba5402f67a2aad9427b6e698b4662ab74ab187c68"}, "downloads": -1, "filename": "unsplashpy-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "89cf5284e48eeed8ea90529aa51d80c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4763, "upload_time": "2018-11-05T20:20:49", "upload_time_iso_8601": "2018-11-05T20:20:49.250582Z", "url": "https://files.pythonhosted.org/packages/85/06/f34d2c34c583489948f63479d7c6a2700f2df9fa0d38b65820d3474e7702/unsplashpy-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc315eec055aa7a5463199b7ccaa19dd", "sha256": "6e136f8868347bf0ea24f96f1b60eac2ab5ac62c5e450abd91d555bdb04d60f2"}, "downloads": -1, "filename": "unsplashpy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "fc315eec055aa7a5463199b7ccaa19dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4498, "upload_time": "2018-11-05T20:20:50", "upload_time_iso_8601": "2018-11-05T20:20:50.778192Z", "url": "https://files.pythonhosted.org/packages/ca/97/d9744fbc1657a426ad003fd74c96992b7346958628fce8b60353d1fa8376/unsplashpy-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "89cf5284e48eeed8ea90529aa51d80c3", "sha256": "fefeca03232f21cdb94d9aaba5402f67a2aad9427b6e698b4662ab74ab187c68"}, "downloads": -1, "filename": "unsplashpy-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "89cf5284e48eeed8ea90529aa51d80c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4763, "upload_time": "2018-11-05T20:20:49", "upload_time_iso_8601": "2018-11-05T20:20:49.250582Z", "url": "https://files.pythonhosted.org/packages/85/06/f34d2c34c583489948f63479d7c6a2700f2df9fa0d38b65820d3474e7702/unsplashpy-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc315eec055aa7a5463199b7ccaa19dd", "sha256": "6e136f8868347bf0ea24f96f1b60eac2ab5ac62c5e450abd91d555bdb04d60f2"}, "downloads": -1, "filename": "unsplashpy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "fc315eec055aa7a5463199b7ccaa19dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4498, "upload_time": "2018-11-05T20:20:50", "upload_time_iso_8601": "2018-11-05T20:20:50.778192Z", "url": "https://files.pythonhosted.org/packages/ca/97/d9744fbc1657a426ad003fd74c96992b7346958628fce8b60353d1fa8376/unsplashpy-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:04 2020"}