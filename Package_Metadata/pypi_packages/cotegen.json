{"info": {"author": "Team7", "author_email": "suchan.park@kaist.ac.kr", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Coding Test Input Generator\n\nCoTeGen automatically generates test suite of a typical coding test problem from the bottom. First, an initial test suite can be constructed with minimal cost. Next, search-based input generation with mutation fitness complement the initial test suite. Using mutated reference solution as a simplified form of wrong answers, we aim to kill as many mutants as possible. Hence, mutation coverage is provided as a complementary result.\n\n- PyPI Release: https://pypi.org/project/cotegen/\n\n- Academic Report: [Dropbox](https://www.dropbox.com/s/izvyd5c61xi35k5/CS453_Final_Project_Report__CoTeGen_.pdf?dl=0)\n\n## Adding New Reference Solution\n\nAfter installing our `cotegen` package, You can write a new reference solution as a simple python file to generate corresponding test cases.\n\nPlease locate your reference solution file in `examples/tasks` directory to utilize command line execution.\n\nYou should define a new class inherits `cotegen.Task` and with the same with filename. \n\n`input_parameters`, `solve`(reference solution), `compare`, and `convert_input_to_string` are essential methods to override.\n\nPlease refer the example:\n\n```python\nimport cotegen\n\n# http://codeforces.com/problemset/problem/1/A\n\nclass CF1A(cotegen.Task):\n    input_parameters = \\\n        {\n            'n': cotegen.types.Integer(1, 10**9),\n            'm': cotegen.types.Integer(1, 10**9),\n            'a': cotegen.types.Integer(1, 10**9),\n        }\n\n    def solve(n: int, m: int, a: int) -> int:\n        # 1 <= n, m, a <= 10**9\n        return ((n + (a-1)) // a) * ((m + (a-1)) // a)\n\n    @staticmethod\n    def compare(user_answer: int, jury_answer: int) -> bool:\n        return user_answer == jury_answer\n\n    @staticmethod\n    def convert_input_to_string(n: int, m: int, a: int):\n        return \"%d %d %d\\n\" % (n, m, a)\n\n\nif __name__ == '__main__':\n    import os\n    CF1A.generate_test_files(os.path.expanduser(\"~/Downloads/CS453/CF1A\"))\n\n```\n\n### Define Input Parameters\nPredefine the types of input parameters and the range of each argument as a dictionary format.\n\nCurrently, `CoTeGen` supports following types:\n\n```python\ncotegen.types.Integer\ncotegen.types.IntegerSequence\ncotegen.types.NonIncreasingIntegerSequence\ncotegen.types.FixedVariableLengthIntegerSequence\ncotegen.types.IntegerPermutation\n```\n\n### Define constraint\n\nIf needed, define the constraints among input parameters as list.\n```python\nconstraints = [\n        cotegen.constraints.Leq('M', 'N')\n    ]\n```\n\nYou can utilize these predefined constraints:\n\n```python\ncotegen.constraints.Leq (Less than or equal)\ncotegen.constraints.ListLengthLeqInteger\ncotegen.constraints.ListLengthReqInteger\n```\n\nor, use custom constraints giving custom function (which receives parameter dictionary and returns true/false) as an argument\n\n```python\ncotegen.constraints.CustomConstraint(lambda test: 'd1' not in test or 'd2' not in test or test['d1'] != test['d2'])\n```\n\n## Command Line Usage\n\n```\npython -m cotegen run random --filename <filename>\n\npython -m cotegen run mutation --filename <filename> --show-survived <true or false>\n\npython -m cotegen run kill --filename <filename> --save <directory path> --mutation-fitness <true or false>\n```\n\nFor example:\n\n```\npython -m cotegen run random --filename CF158A\n\npython -m cotegen run mutation --filename CF158A\n\npython -m cotegen run kill --filename CF158A --save ~/Downloads --mutation-fitness true\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kaist-cs453-2019s-team7/cs453-team-project", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cotegen", "package_url": "https://pypi.org/project/cotegen/", "platform": "", "project_url": "https://pypi.org/project/cotegen/", "project_urls": {"Homepage": "https://github.com/kaist-cs453-2019s-team7/cs453-team-project"}, "release_url": "https://pypi.org/project/cotegen/1.1/", "requires_dist": null, "requires_python": "", "summary": "KAIST CS453 2019 Spring Team 7 Project", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Coding Test Input Generator</h1>\n<p>CoTeGen automatically generates test suite of a typical coding test problem from the bottom. First, an initial test suite can be constructed with minimal cost. Next, search-based input generation with mutation fitness complement the initial test suite. Using mutated reference solution as a simplified form of wrong answers, we aim to kill as many mutants as possible. Hence, mutation coverage is provided as a complementary result.</p>\n<ul>\n<li>\n<p>PyPI Release: <a href=\"https://pypi.org/project/cotegen/\" rel=\"nofollow\">https://pypi.org/project/cotegen/</a></p>\n</li>\n<li>\n<p>Academic Report: <a href=\"https://www.dropbox.com/s/izvyd5c61xi35k5/CS453_Final_Project_Report__CoTeGen_.pdf?dl=0\" rel=\"nofollow\">Dropbox</a></p>\n</li>\n</ul>\n<h2>Adding New Reference Solution</h2>\n<p>After installing our <code>cotegen</code> package, You can write a new reference solution as a simple python file to generate corresponding test cases.</p>\n<p>Please locate your reference solution file in <code>examples/tasks</code> directory to utilize command line execution.</p>\n<p>You should define a new class inherits <code>cotegen.Task</code> and with the same with filename.</p>\n<p><code>input_parameters</code>, <code>solve</code>(reference solution), <code>compare</code>, and <code>convert_input_to_string</code> are essential methods to override.</p>\n<p>Please refer the example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cotegen</span>\n\n<span class=\"c1\"># http://codeforces.com/problemset/problem/1/A</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CF1A</span><span class=\"p\">(</span><span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">):</span>\n    <span class=\"n\">input_parameters</span> <span class=\"o\">=</span> \\\n        <span class=\"p\">{</span>\n            <span class=\"s1\">'n'</span><span class=\"p\">:</span> <span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">9</span><span class=\"p\">),</span>\n            <span class=\"s1\">'m'</span><span class=\"p\">:</span> <span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">9</span><span class=\"p\">),</span>\n            <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">9</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"c1\"># 1 &lt;= n, m, a &lt;= 10**9</span>\n        <span class=\"k\">return</span> <span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">//</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">//</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">compare</span><span class=\"p\">(</span><span class=\"n\">user_answer</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">jury_answer</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">user_answer</span> <span class=\"o\">==</span> <span class=\"n\">jury_answer</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">convert_input_to_string</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">%d</span><span class=\"s2\"> </span><span class=\"si\">%d</span><span class=\"s2\"> </span><span class=\"si\">%d</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">os</span>\n    <span class=\"n\">CF1A</span><span class=\"o\">.</span><span class=\"n\">generate_test_files</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s2\">\"~/Downloads/CS453/CF1A\"</span><span class=\"p\">))</span>\n</pre>\n<h3>Define Input Parameters</h3>\n<p>Predefine the types of input parameters and the range of each argument as a dictionary format.</p>\n<p>Currently, <code>CoTeGen</code> supports following types:</p>\n<pre><span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Integer</span>\n<span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">IntegerSequence</span>\n<span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">NonIncreasingIntegerSequence</span>\n<span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">FixedVariableLengthIntegerSequence</span>\n<span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">IntegerPermutation</span>\n</pre>\n<h3>Define constraint</h3>\n<p>If needed, define the constraints among input parameters as list.</p>\n<pre><span class=\"n\">constraints</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">constraints</span><span class=\"o\">.</span><span class=\"n\">Leq</span><span class=\"p\">(</span><span class=\"s1\">'M'</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n</pre>\n<p>You can utilize these predefined constraints:</p>\n<pre><span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">constraints</span><span class=\"o\">.</span><span class=\"n\">Leq</span> <span class=\"p\">(</span><span class=\"n\">Less</span> <span class=\"n\">than</span> <span class=\"ow\">or</span> <span class=\"n\">equal</span><span class=\"p\">)</span>\n<span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">constraints</span><span class=\"o\">.</span><span class=\"n\">ListLengthLeqInteger</span>\n<span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">constraints</span><span class=\"o\">.</span><span class=\"n\">ListLengthReqInteger</span>\n</pre>\n<p>or, use custom constraints giving custom function (which receives parameter dictionary and returns true/false) as an argument</p>\n<pre><span class=\"n\">cotegen</span><span class=\"o\">.</span><span class=\"n\">constraints</span><span class=\"o\">.</span><span class=\"n\">CustomConstraint</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">test</span><span class=\"p\">:</span> <span class=\"s1\">'d1'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">test</span> <span class=\"ow\">or</span> <span class=\"s1\">'d2'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">test</span> <span class=\"ow\">or</span> <span class=\"n\">test</span><span class=\"p\">[</span><span class=\"s1\">'d1'</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">test</span><span class=\"p\">[</span><span class=\"s1\">'d2'</span><span class=\"p\">])</span>\n</pre>\n<h2>Command Line Usage</h2>\n<pre><code>python -m cotegen run random --filename &lt;filename&gt;\n\npython -m cotegen run mutation --filename &lt;filename&gt; --show-survived &lt;true or false&gt;\n\npython -m cotegen run kill --filename &lt;filename&gt; --save &lt;directory path&gt; --mutation-fitness &lt;true or false&gt;\n</code></pre>\n<p>For example:</p>\n<pre><code>python -m cotegen run random --filename CF158A\n\npython -m cotegen run mutation --filename CF158A\n\npython -m cotegen run kill --filename CF158A --save ~/Downloads --mutation-fitness true\n</code></pre>\n\n          </div>"}, "last_serial": 5418232, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "33e96f816ab19f80ca76476b8b98ba46", "sha256": "513cd8342c867d92afe1fc8ee0a5fefda8da9348162387a57d6bf701594473a6"}, "downloads": -1, "filename": "cotegen-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "33e96f816ab19f80ca76476b8b98ba46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23306, "upload_time": "2019-06-18T14:23:13", "upload_time_iso_8601": "2019-06-18T14:23:13.305593Z", "url": "https://files.pythonhosted.org/packages/ac/8b/1287ada58ac6fd55db2cff74a7e939df3eb0d35416828ad671caba1c538f/cotegen-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "743f289e2919de2fbcd2c8c96c5b717e", "sha256": "2e0dc86d46dda7d807c34002823c6d5caea3ed2719de635096b5327d68ff082d"}, "downloads": -1, "filename": "cotegen-1.0.tar.gz", "has_sig": false, "md5_digest": "743f289e2919de2fbcd2c8c96c5b717e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15398, "upload_time": "2019-06-18T14:23:19", "upload_time_iso_8601": "2019-06-18T14:23:19.840318Z", "url": "https://files.pythonhosted.org/packages/02/6a/ad9fd2a21926d660336334bb6c397b06e6ed34ebb02a484786ffd4d978da/cotegen-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "a0387b2db07ccc887c0246ac4b27c091", "sha256": "bb090de064405e9e958a57d4d8527a18e718de04c0db342fa01c0cabbbc98ba5"}, "downloads": -1, "filename": "cotegen-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a0387b2db07ccc887c0246ac4b27c091", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24596, "upload_time": "2019-06-19T02:53:05", "upload_time_iso_8601": "2019-06-19T02:53:05.632330Z", "url": "https://files.pythonhosted.org/packages/62/ec/cd23f6b460cce1fab15f1a61fc65f07bce610f8cbdf9c2a6dd58d9b3b88f/cotegen-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88622e2a598867e225fed9f90e5ce77c", "sha256": "85d2fe84b1658867978bf9c47f24a272d525e41077fc79e53379af663f315188"}, "downloads": -1, "filename": "cotegen-1.1.tar.gz", "has_sig": false, "md5_digest": "88622e2a598867e225fed9f90e5ce77c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17855, "upload_time": "2019-06-19T02:53:07", "upload_time_iso_8601": "2019-06-19T02:53:07.586779Z", "url": "https://files.pythonhosted.org/packages/26/d8/c8f19eb47b074f740f325b51caf7504c3295583227e474c2893c415982e7/cotegen-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a0387b2db07ccc887c0246ac4b27c091", "sha256": "bb090de064405e9e958a57d4d8527a18e718de04c0db342fa01c0cabbbc98ba5"}, "downloads": -1, "filename": "cotegen-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a0387b2db07ccc887c0246ac4b27c091", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24596, "upload_time": "2019-06-19T02:53:05", "upload_time_iso_8601": "2019-06-19T02:53:05.632330Z", "url": "https://files.pythonhosted.org/packages/62/ec/cd23f6b460cce1fab15f1a61fc65f07bce610f8cbdf9c2a6dd58d9b3b88f/cotegen-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88622e2a598867e225fed9f90e5ce77c", "sha256": "85d2fe84b1658867978bf9c47f24a272d525e41077fc79e53379af663f315188"}, "downloads": -1, "filename": "cotegen-1.1.tar.gz", "has_sig": false, "md5_digest": "88622e2a598867e225fed9f90e5ce77c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17855, "upload_time": "2019-06-19T02:53:07", "upload_time_iso_8601": "2019-06-19T02:53:07.586779Z", "url": "https://files.pythonhosted.org/packages/26/d8/c8f19eb47b074f740f325b51caf7504c3295583227e474c2893c415982e7/cotegen-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:57 2020"}