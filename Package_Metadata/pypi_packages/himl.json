{"info": {"author": "Adobe", "author_email": "noreply@adobe.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup :: HTML"], "description": "# himl\nA hierarchical config using yaml in Python.\n\nLatest version is: 0.5.4\n\n## Description\n\nA python module which allows you to merge hierarchical config files using YAML syntax. It offers deep merge, variable interpolation and secrets retrieval from secrets managers.\n\nIt is ideal if you want to structure your hierarchy in such a way that you avoid duplication. You can define a structure for your configuration using a hierarchy such environment/project/cluster/app. It is up to you what layers you want to use in this hierarchy. The tool will read all yaml files starting from the root (where default values would be) all the way to the leaf (where most specific values would be, which will take precedence).\n\nIdea came from puppet's hiera.\n\n## Table of Contents  \n\n1. [Installation](#installation)\n2. [Examples](#examples)\n3. [Features](#features)\n    * [Interpolation](#feature-interpolation)\n    * [Deep merge](#feature-deep-merge)\n    * [Secrets retrieval](#feature-secrets-retrieval)\n    * [Merge with Terraform remote state](#feature-terraform-remote-state)\n\n<a name=\"installation\"/>\n\n## Installation\n\n### Using `pip`\n\n```sh\npip install himl\n```\n\n### From Source\n\n```\ngit clone https://github.com/adobe/himl\ncd himl\nsudo python setup.py install\n```\n\n<a name=\"examples\"/>\n\n## Examples\n\n### Using the python module\n\nThis will merge simple/default.yaml with simple/production/env.yaml\n```py\nfrom himl import ConfigProcessor\n\nconfig_processor = ConfigProcessor()\npath = \"examples/simple/production\"\nfilters = () # can choose to output only specific keys\nexclude_keys = () # can choose to remove specific keys\noutput_format = \"yaml\" # yaml/json\n\n\nconfig_processor.process(path=path, filters=filters, exclude_keys=exclude_keys, \n                         output_format=output_format, print_data=True)\n\n```\n\nThe above example will merge `simple/default.yaml` with `simple/production/env.yaml`:\n```\n$ tree examples/simple\nexamples/simple\n\u251c\u2500\u2500 default.yaml\n\u2514\u2500\u2500 production\n    \u2514\u2500\u2500 env.yaml\n```\n\n<a name=\"deep-merge-example\"/>\n\nThe example also showcases deep merging of lists and maps.\n\n`examples/simple/default.yaml`\n```yaml\n---\nenv: default\ndeep:\n  key1: v1\n  key2: v2\ndeep_list:\n  - item1\n  - item2\n```\n\n`examples/simple/production/env.yaml`\n```yaml\n---\nenv: prod\ndeep:\n  key3: v3\ndeep_list:\n  - item3\n```\n\nResult:\n```yaml\nenv: prod\ndeep:\n  key1: v1\n  key2: v2\n  key3: v3\ndeep_list:\n- item1\n- item2\n- item3\n```\n\n### Using the cli\n\nA cli tool called `himl` is automatically installed via `pip`. You can use it to parse a tree of yamls and it will either output the combined configuration at standard output or write it to a file.\n\n```sh\nusage: himl [-h] [--output-file OUTPUT_FILE] [--format OUTPUT_FORMAT]\n             [--filter FILTER] [--exclude EXCLUDE]\n             [--skip-interpolation-validation]\n             [--skip-interpolation-resolving] [--enclosing-key ENCLOSING_KEY]\n             [--cwd CWD]\n             path\n```\n\n```sh\nhiml examples/complex/env=dev/region=us-east-1/cluster=cluster2\n```\n\nBased on the configuration tree from the [examples/complex](examples/complex) folder, the output of the above command will be the following:\n```\ncluster:\n  description: 'This is cluster: cluster2. It is using c3.2xlarge instance type.'\n  name: cluster2\n  node_type: c3.2xlarge\nregion:\n  location: us-east-1\nenv: dev\n```\n\nWhere the examples folder looks something like this:\n```\n$ tree examples/complex\nexamples/complex\n\u251c\u2500\u2500 default.yaml\n\u251c\u2500\u2500 env=dev\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 env.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 region=us-east-1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cluster=cluster1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 cluster.yaml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cluster=cluster2\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 cluster.yaml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 region.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 region=us-west-2\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 cluster=cluster1\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 cluster.yaml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 region.yaml\n\u2514\u2500\u2500 env=prod\n    \u251c\u2500\u2500 env.yaml\n    \u2514\u2500\u2500 region=eu-west-2\n        \u251c\u2500\u2500 cluster=ireland1\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 cluster.yaml\n        \u2514\u2500\u2500 region.yaml\n```\n\n<a name=\"features\"/>\n\n## Features\n\n<a name=\"feature-interpolation\"/>\n\n### Interpolation\n\nIn order to avoid repetition, we wanted to make it possible to define a value once and reuse it in other parts of the yaml config.\nUnlike yaml anchors, these interpolations work across multiple files.\n\n#### Interpolating simple values\n\n`data/default.yaml`:\n```yaml\nallowed_roles:\n  - \"arn:aws:iam::{{account.id}}:role/myrole\"\n```\n\n`data/dev/env.yaml`:\n```\naccount:\n  id: \"123456\"\n```\n\n#### Interpolating whole `dict`\n\n```yaml\nprojects:\n  webapp1:\n    tagging:\n      Owner: \"Web Service Team\"\n      Environment: \"dev\"\n      CostCenter: \"123\"\n  data-store:\n      Owner: \"Backend Team\"\n      Environment: \"dev\"\n      CostCenter: \"455\"\n\n# this will copy the whole projects.webapp1.tagging dict to this key\ntagging: \"{{projects.webapp1.tagging}}\"\n\n# or even a double interpolation\ntagging: \"{{projects.{{project.name}}.tagging}}\"\n```\n\n<a name=\"feature-deep-merge\"/>\n\n### Deep merge\n\nIt's possible to have the same key (eg. a dict/list) in multiple files and combine them using a deep merge.\nSee an example [here](https://github.com/adobe/himl#deep-merge-example).\n\n<a name=\"feature-secrets-retrieval\"/>\n\n### Secrets retrieval\n\n#### [AWS SSM](https://docs.aws.amazon.com/systems-manager/latest/userguide/integration-ps-secretsmanager.html)\n\n```yaml\npassphrase: \"{{ssm.path(/key/coming/from/aws/secrets/store/manager).aws_profile(myprofile)}}\"\n```\n\n#### [AWS S3](https://aws.amazon.com/s3/)\n\n```yaml\nmy_value: \"{{s3.bucket(my-bucket).path(path/to/file.txt).base64encode(true).aws_profile(myprofile)}}\"\n```\n\n#### [Vault](https://www.vaultproject.io/)\n\nNot yet implemented.\n\n\n<a name=\"feature-terraform-remote-state\"/>\n\n### Merge with [Terraform remote state](https://www.terraform.io/docs/state/remote.html)\n\n```yaml\n### Terraform remote states ###\nremote_states:\n  - name: cluster_composition\n    type: terraform\n    aws_profile: \"my_aws_profile\"\n    s3_bucket: \"my_terraform_bucket\"\n    s3_key: \"mycluster.tfstate\"\n\n\nendpoint: \"{{outputs.cluster_composition.output.value.redis_endpoint}}\"\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adobe/himl", "keywords": "", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "himl", "package_url": "https://pypi.org/project/himl/", "platform": "", "project_url": "https://pypi.org/project/himl/", "project_urls": {"Homepage": "https://github.com/adobe/himl"}, "release_url": "https://pypi.org/project/himl/0.5.4/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "A hierarchical config using yaml", "version": "0.5.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>himl</h1>\n<p>A hierarchical config using yaml in Python.</p>\n<p>Latest version is: 0.5.4</p>\n<h2>Description</h2>\n<p>A python module which allows you to merge hierarchical config files using YAML syntax. It offers deep merge, variable interpolation and secrets retrieval from secrets managers.</p>\n<p>It is ideal if you want to structure your hierarchy in such a way that you avoid duplication. You can define a structure for your configuration using a hierarchy such environment/project/cluster/app. It is up to you what layers you want to use in this hierarchy. The tool will read all yaml files starting from the root (where default values would be) all the way to the leaf (where most specific values would be, which will take precedence).</p>\n<p>Idea came from puppet's hiera.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a>\n<ul>\n<li><a href=\"#feature-interpolation\" rel=\"nofollow\">Interpolation</a></li>\n<li><a href=\"#feature-deep-merge\" rel=\"nofollow\">Deep merge</a></li>\n<li><a href=\"#feature-secrets-retrieval\" rel=\"nofollow\">Secrets retrieval</a></li>\n<li><a href=\"#feature-terraform-remote-state\" rel=\"nofollow\">Merge with Terraform remote state</a></li>\n</ul>\n</li>\n</ol>\n<a>\n<h2>Installation</h2>\n<h3>Using <code>pip</code></h3>\n<pre>pip install himl\n</pre>\n<h3>From Source</h3>\n<pre><code>git clone https://github.com/adobe/himl\ncd himl\nsudo python setup.py install\n</code></pre>\n</a><a>\n<h2>Examples</h2>\n<h3>Using the python module</h3>\n<p>This will merge simple/default.yaml with simple/production/env.yaml</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">himl</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigProcessor</span>\n\n<span class=\"n\">config_processor</span> <span class=\"o\">=</span> <span class=\"n\">ConfigProcessor</span><span class=\"p\">()</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s2\">\"examples/simple/production\"</span>\n<span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"c1\"># can choose to output only specific keys</span>\n<span class=\"n\">exclude_keys</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"c1\"># can choose to remove specific keys</span>\n<span class=\"n\">output_format</span> <span class=\"o\">=</span> <span class=\"s2\">\"yaml\"</span> <span class=\"c1\"># yaml/json</span>\n\n\n<span class=\"n\">config_processor</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"n\">filters</span><span class=\"p\">,</span> <span class=\"n\">exclude_keys</span><span class=\"o\">=</span><span class=\"n\">exclude_keys</span><span class=\"p\">,</span> \n                         <span class=\"n\">output_format</span><span class=\"o\">=</span><span class=\"n\">output_format</span><span class=\"p\">,</span> <span class=\"n\">print_data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>The above example will merge <code>simple/default.yaml</code> with <code>simple/production/env.yaml</code>:</p>\n<pre><code>$ tree examples/simple\nexamples/simple\n\u251c\u2500\u2500 default.yaml\n\u2514\u2500\u2500 production\n    \u2514\u2500\u2500 env.yaml\n</code></pre>\n</a><a>\n<p>The example also showcases deep merging of lists and maps.</p>\n<p><code>examples/simple/default.yaml</code></p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">env</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">default</span>\n<span class=\"nt\">deep</span><span class=\"p\">:</span>\n  <span class=\"nt\">key1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">v1</span>\n  <span class=\"nt\">key2</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">v2</span>\n<span class=\"nt\">deep_list</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">item1</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">item2</span>\n</pre>\n<p><code>examples/simple/production/env.yaml</code></p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">env</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">prod</span>\n<span class=\"nt\">deep</span><span class=\"p\">:</span>\n  <span class=\"nt\">key3</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">v3</span>\n<span class=\"nt\">deep_list</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">item3</span>\n</pre>\n<p>Result:</p>\n<pre><span class=\"nt\">env</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">prod</span>\n<span class=\"nt\">deep</span><span class=\"p\">:</span>\n  <span class=\"nt\">key1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">v1</span>\n  <span class=\"nt\">key2</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">v2</span>\n  <span class=\"nt\">key3</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">v3</span>\n<span class=\"nt\">deep_list</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">item1</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">item2</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">item3</span>\n</pre>\n<h3>Using the cli</h3>\n<p>A cli tool called <code>himl</code> is automatically installed via <code>pip</code>. You can use it to parse a tree of yamls and it will either output the combined configuration at standard output or write it to a file.</p>\n<pre>usage: himl <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--output-file OUTPUT_FILE<span class=\"o\">]</span> <span class=\"o\">[</span>--format OUTPUT_FORMAT<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--filter FILTER<span class=\"o\">]</span> <span class=\"o\">[</span>--exclude EXCLUDE<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--skip-interpolation-validation<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--skip-interpolation-resolving<span class=\"o\">]</span> <span class=\"o\">[</span>--enclosing-key ENCLOSING_KEY<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--cwd CWD<span class=\"o\">]</span>\n             path\n</pre>\n<pre>himl examples/complex/env<span class=\"o\">=</span>dev/region<span class=\"o\">=</span>us-east-1/cluster<span class=\"o\">=</span>cluster2\n</pre>\n</a><p><a>Based on the configuration tree from the </a><a href=\"examples/complex\" rel=\"nofollow\">examples/complex</a> folder, the output of the above command will be the following:</p>\n<pre><code>cluster:\n  description: 'This is cluster: cluster2. It is using c3.2xlarge instance type.'\n  name: cluster2\n  node_type: c3.2xlarge\nregion:\n  location: us-east-1\nenv: dev\n</code></pre>\n<p>Where the examples folder looks something like this:</p>\n<pre><code>$ tree examples/complex\nexamples/complex\n\u251c\u2500\u2500 default.yaml\n\u251c\u2500\u2500 env=dev\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 env.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 region=us-east-1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cluster=cluster1\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 cluster.yaml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 cluster=cluster2\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 cluster.yaml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 region.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 region=us-west-2\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 cluster=cluster1\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 cluster.yaml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 region.yaml\n\u2514\u2500\u2500 env=prod\n    \u251c\u2500\u2500 env.yaml\n    \u2514\u2500\u2500 region=eu-west-2\n        \u251c\u2500\u2500 cluster=ireland1\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 cluster.yaml\n        \u2514\u2500\u2500 region.yaml\n</code></pre>\n<a>\n<h2>Features</h2>\n</a><a>\n<h3>Interpolation</h3>\n<p>In order to avoid repetition, we wanted to make it possible to define a value once and reuse it in other parts of the yaml config.\nUnlike yaml anchors, these interpolations work across multiple files.</p>\n<h4>Interpolating simple values</h4>\n<p><code>data/default.yaml</code>:</p>\n<pre><span class=\"nt\">allowed_roles</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"arn:aws:iam::{{account.id}}:role/myrole\"</span>\n</pre>\n<p><code>data/dev/env.yaml</code>:</p>\n<pre><code>account:\n  id: \"123456\"\n</code></pre>\n<h4>Interpolating whole <code>dict</code></h4>\n<pre><span class=\"nt\">projects</span><span class=\"p\">:</span>\n  <span class=\"nt\">webapp1</span><span class=\"p\">:</span>\n    <span class=\"nt\">tagging</span><span class=\"p\">:</span>\n      <span class=\"nt\">Owner</span><span class=\"p\">:</span> <span class=\"s\">\"Web</span><span class=\"nv\"> </span><span class=\"s\">Service</span><span class=\"nv\"> </span><span class=\"s\">Team\"</span>\n      <span class=\"nt\">Environment</span><span class=\"p\">:</span> <span class=\"s\">\"dev\"</span>\n      <span class=\"nt\">CostCenter</span><span class=\"p\">:</span> <span class=\"s\">\"123\"</span>\n  <span class=\"nt\">data-store</span><span class=\"p\">:</span>\n      <span class=\"nt\">Owner</span><span class=\"p\">:</span> <span class=\"s\">\"Backend</span><span class=\"nv\"> </span><span class=\"s\">Team\"</span>\n      <span class=\"nt\">Environment</span><span class=\"p\">:</span> <span class=\"s\">\"dev\"</span>\n      <span class=\"nt\">CostCenter</span><span class=\"p\">:</span> <span class=\"s\">\"455\"</span>\n\n<span class=\"c1\"># this will copy the whole projects.webapp1.tagging dict to this key</span>\n<span class=\"nt\">tagging</span><span class=\"p\">:</span> <span class=\"s\">\"{{projects.webapp1.tagging}}\"</span>\n\n<span class=\"c1\"># or even a double interpolation</span>\n<span class=\"nt\">tagging</span><span class=\"p\">:</span> <span class=\"s\">\"{{projects.{{project.name}}.tagging}}\"</span>\n</pre>\n</a><a>\n<h3>Deep merge</h3>\n</a><p><a>It's possible to have the same key (eg. a dict/list) in multiple files and combine them using a deep merge.\nSee an example </a><a href=\"https://github.com/adobe/himl#deep-merge-example\" rel=\"nofollow\">here</a>.</p>\n<a>\n<h3>Secrets retrieval</h3>\n</a><h4><a></a><a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/integration-ps-secretsmanager.html\" rel=\"nofollow\">AWS SSM</a></h4>\n<pre><span class=\"nt\">passphrase</span><span class=\"p\">:</span> <span class=\"s\">\"{{ssm.path(/key/coming/from/aws/secrets/store/manager).aws_profile(myprofile)}}\"</span>\n</pre>\n<h4><a href=\"https://aws.amazon.com/s3/\" rel=\"nofollow\">AWS S3</a></h4>\n<pre><span class=\"nt\">my_value</span><span class=\"p\">:</span> <span class=\"s\">\"{{s3.bucket(my-bucket).path(path/to/file.txt).base64encode(true).aws_profile(myprofile)}}\"</span>\n</pre>\n<h4><a href=\"https://www.vaultproject.io/\" rel=\"nofollow\">Vault</a></h4>\n<p>Not yet implemented.</p>\n<a>\n</a><h3><a>Merge with </a><a href=\"https://www.terraform.io/docs/state/remote.html\" rel=\"nofollow\">Terraform remote state</a></h3>\n<pre><span class=\"c1\">### Terraform remote states ###</span>\n<span class=\"nt\">remote_states</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">cluster_composition</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">terraform</span>\n    <span class=\"nt\">aws_profile</span><span class=\"p\">:</span> <span class=\"s\">\"my_aws_profile\"</span>\n    <span class=\"nt\">s3_bucket</span><span class=\"p\">:</span> <span class=\"s\">\"my_terraform_bucket\"</span>\n    <span class=\"nt\">s3_key</span><span class=\"p\">:</span> <span class=\"s\">\"mycluster.tfstate\"</span>\n\n\n<span class=\"nt\">endpoint</span><span class=\"p\">:</span> <span class=\"s\">\"{{outputs.cluster_composition.output.value.redis_endpoint}}\"</span>\n</pre>\n\n          </div>"}, "last_serial": 6603539, "releases": {"0.1.15": [{"comment_text": "", "digests": {"md5": "209665acbb7990118d702c5cd6a4634b", "sha256": "9c8f5cd3a756bf0fec9ac4587f39efc83093bde3207ea46ec6f91f0126dcb3a5"}, "downloads": -1, "filename": "himl-0.1.15.tar.gz", "has_sig": false, "md5_digest": "209665acbb7990118d702c5cd6a4634b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9695, "upload_time": "2019-08-16T15:29:56", "upload_time_iso_8601": "2019-08-16T15:29:56.678773Z", "url": "https://files.pythonhosted.org/packages/75/2b/5f2768512571240fafb7ec8cbee0a1af235c9d1cddf6f69b1e064bad82d6/himl-0.1.15.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "b04ab9ab83717f76599e8ee23959742e", "sha256": "c600311be87746024ded93532169e6fa1e6cbd420d70ecc20ea497ddc4f70aed"}, "downloads": -1, "filename": "himl-0.1.16.tar.gz", "has_sig": false, "md5_digest": "b04ab9ab83717f76599e8ee23959742e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9690, "upload_time": "2019-08-16T15:42:50", "upload_time_iso_8601": "2019-08-16T15:42:50.582223Z", "url": "https://files.pythonhosted.org/packages/92/22/5fd2c716342953f79cc4c45a6a27056a9bd96703b9778469676f25b1183b/himl-0.1.16.tar.gz", "yanked": false}], "0.1.17": [{"comment_text": "", "digests": {"md5": "570aea53bd8bcf4abb832ba9f7f3dabd", "sha256": "7e8db44f75834afec66cb5d1a97831d0c18c67fc53b555d89702141945e1be76"}, "downloads": -1, "filename": "himl-0.1.17.tar.gz", "has_sig": false, "md5_digest": "570aea53bd8bcf4abb832ba9f7f3dabd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9696, "upload_time": "2019-08-16T15:53:19", "upload_time_iso_8601": "2019-08-16T15:53:19.810125Z", "url": "https://files.pythonhosted.org/packages/52/01/a19ead2cf5cc16cac46f81bafea848e493d1fc163381286cf28e145af55c/himl-0.1.17.tar.gz", "yanked": false}], "0.1.18": [{"comment_text": "", "digests": {"md5": "0a0d04d27ee37c6b34be291d04f079ca", "sha256": "35a75dd707761ea1d04f28bddeb64516bb7383ce5530c0b81f44a4b37b168636"}, "downloads": -1, "filename": "himl-0.1.18.tar.gz", "has_sig": false, "md5_digest": "0a0d04d27ee37c6b34be291d04f079ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 11725, "upload_time": "2019-08-16T20:08:52", "upload_time_iso_8601": "2019-08-16T20:08:52.831502Z", "url": "https://files.pythonhosted.org/packages/01/b0/7edee769468093f3770473aa3a69a1be7149c53ac26e4692a06b4c281a78/himl-0.1.18.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d548b3634dccc4fc52a7afaea0fa8f9d", "sha256": "da03bdabd227ca623d85f346e6133460db30cec36a589bbfcf14ee85ab87fefc"}, "downloads": -1, "filename": "himl-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d548b3634dccc4fc52a7afaea0fa8f9d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 11707, "upload_time": "2019-08-22T19:21:29", "upload_time_iso_8601": "2019-08-22T19:21:29.985355Z", "url": "https://files.pythonhosted.org/packages/9d/d2/d6a93da173a81bf02579819295d028ebd641becceb3e9f12caa665d7d7c3/himl-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4047cb3b9accf119538d201cf358aa77", "sha256": "d418b65795b6499a0312b41581eabffc70a1185b45c38c1cbab7c026b3f712f7"}, "downloads": -1, "filename": "himl-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4047cb3b9accf119538d201cf358aa77", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 11711, "upload_time": "2019-08-26T14:19:25", "upload_time_iso_8601": "2019-08-26T14:19:25.132551Z", "url": "https://files.pythonhosted.org/packages/2f/07/d0705b1dcaf3a7f9d73941103b5e5c1a2b121c45c27b96ec90e73f6601ca/himl-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "83f8491241deb6f37760007c7b776e50", "sha256": "ea68ed185ad8766ae9b956d359d459720b3d94f101cdfa24bee3de9c0d0dd7a1"}, "downloads": -1, "filename": "himl-0.2.2.tar.gz", "has_sig": false, "md5_digest": "83f8491241deb6f37760007c7b776e50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 11753, "upload_time": "2019-09-10T14:13:33", "upload_time_iso_8601": "2019-09-10T14:13:33.514314Z", "url": "https://files.pythonhosted.org/packages/d3/16/9ee49386f738e06e2abd32cb7e437016d8f6b3baf13f015473e2dca9cfa7/himl-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b7263febc4289af5c52f692a3a8768de", "sha256": "f8e1ad62e1f577ff34ea46339f959c9ebd8b8ec4f4e775fc2653b29e45480c95"}, "downloads": -1, "filename": "himl-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b7263febc4289af5c52f692a3a8768de", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 12020, "upload_time": "2019-11-05T14:23:31", "upload_time_iso_8601": "2019-11-05T14:23:31.981793Z", "url": "https://files.pythonhosted.org/packages/d4/fd/34081ee43665b4b694caf434e7dcbb9db13de337f2808158a8f3e9b9cc2f/himl-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "21f160742bc2f660c9b9ba8ffa7117d4", "sha256": "375165cf3746f8675f56967f94601ec252ec54e80a05fb3be97377073ece831d"}, "downloads": -1, "filename": "himl-0.4.0.tar.gz", "has_sig": false, "md5_digest": "21f160742bc2f660c9b9ba8ffa7117d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 12562, "upload_time": "2019-11-08T14:12:20", "upload_time_iso_8601": "2019-11-08T14:12:20.394532Z", "url": "https://files.pythonhosted.org/packages/7b/a4/c414ca89cbd620d6943df55709bf36f420454161cb95ba33bcdac195cefd/himl-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "4672cc2bbe69327149cb1aa3a1b4235b", "sha256": "243fe3905b1fa138e53e288d31197d58be4a71c5361113d723a1d8283416256b"}, "downloads": -1, "filename": "himl-0.5.0.tar.gz", "has_sig": false, "md5_digest": "4672cc2bbe69327149cb1aa3a1b4235b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 12571, "upload_time": "2019-11-11T20:05:04", "upload_time_iso_8601": "2019-11-11T20:05:04.051541Z", "url": "https://files.pythonhosted.org/packages/d0/c1/1f7c64a2f1220069922a41dd3c72b5dd489bcab7092bc373a59550bfef91/himl-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "bc07673be59b70cbbf47536f351695ec", "sha256": "eb9929eafec5b026a6109c9793ca8774ebe6f601d3ea907a1679ac7342b26d19"}, "downloads": -1, "filename": "himl-0.5.1.tar.gz", "has_sig": false, "md5_digest": "bc07673be59b70cbbf47536f351695ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 12638, "upload_time": "2019-12-04T16:03:44", "upload_time_iso_8601": "2019-12-04T16:03:44.387784Z", "url": "https://files.pythonhosted.org/packages/25/c8/25a83545103cedda310c368066d262b8db8affa18acf8a36e1df46674aee/himl-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "5c003d2183b7f77a150dc1d1e8ac6160", "sha256": "5090a352906c2fbbc2faee34b74c3baba09a59e1eb23ef18d76c4f148193d779"}, "downloads": -1, "filename": "himl-0.5.2.tar.gz", "has_sig": false, "md5_digest": "5c003d2183b7f77a150dc1d1e8ac6160", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 12712, "upload_time": "2020-01-29T10:45:20", "upload_time_iso_8601": "2020-01-29T10:45:20.946964Z", "url": "https://files.pythonhosted.org/packages/83/3f/d45ec2f43bd18318ddbbb303724c00e2bf9bcd0f5058ef3555231d70f6c0/himl-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "a911add4c5f601dadcec4315deac987e", "sha256": "47b65f6d308395799f471356ce2e442aac55400d96919ec4857e4b2edf0826e9"}, "downloads": -1, "filename": "himl-0.5.3.tar.gz", "has_sig": false, "md5_digest": "a911add4c5f601dadcec4315deac987e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 12731, "upload_time": "2020-01-31T15:35:36", "upload_time_iso_8601": "2020-01-31T15:35:36.988282Z", "url": "https://files.pythonhosted.org/packages/86/01/0baaab757fa54d183134211a7e8e78e7214e1ca9a47afc32c53c2f1f59d0/himl-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "8998088e7a46532ab9c2e5575a4f2658", "sha256": "8c8d8584c81cff1f6033babee6c61f1a280c1f4dc5883c9d7fad2659a608b81f"}, "downloads": -1, "filename": "himl-0.5.4.tar.gz", "has_sig": false, "md5_digest": "8998088e7a46532ab9c2e5575a4f2658", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 13279, "upload_time": "2020-02-10T16:23:24", "upload_time_iso_8601": "2020-02-10T16:23:24.774075Z", "url": "https://files.pythonhosted.org/packages/97/ae/2980d77d2bb55153e7585b79f7b2c50b1d5876da43856150efbed4ae05b5/himl-0.5.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8998088e7a46532ab9c2e5575a4f2658", "sha256": "8c8d8584c81cff1f6033babee6c61f1a280c1f4dc5883c9d7fad2659a608b81f"}, "downloads": -1, "filename": "himl-0.5.4.tar.gz", "has_sig": false, "md5_digest": "8998088e7a46532ab9c2e5575a4f2658", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 13279, "upload_time": "2020-02-10T16:23:24", "upload_time_iso_8601": "2020-02-10T16:23:24.774075Z", "url": "https://files.pythonhosted.org/packages/97/ae/2980d77d2bb55153e7585b79f7b2c50b1d5876da43856150efbed4ae05b5/himl-0.5.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:11 2020"}