{"info": {"author": "Chitta Ranjan", "author_email": "cran2367@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Sequence Graph Transform (SGT) &mdash; Sequence Embedding for Clustering, Classification, and Search\n\n#### Maintained by: Chitta Ranjan \nEmail: <cran2367@gmail.com>\n| LinkedIn: [https://www.linkedin.com/in/chitta-ranjan-b0851911/](https://www.linkedin.com/in/chitta-ranjan-b0851911/)\n\n\nThe following will cover,\n\n1. [SGT Class Definition](#sgt-class-def)\n2. [Installation](#install-sgt)\n3. [Test Examples](#installation-test-examples)\n4. [Sequence Clustering Example](#sequence-clustering)\n5. [Sequence Classification Example](#sequence-classification)\n6. [Sequence Search Example](#sequence-search)\n7. [SGT - Spark for Distributed Computing](#sgt-spark)\n\n\n## <a name=\"sgt-class-def\"></a> SGT Class Definition\n\nSequence Graph Transform (SGT) is a sequence embedding function. SGT extracts the short- and long-term sequence features and embeds them in a finite-dimensional feature space. The long and short term patterns embedded in SGT can be tuned without any increase in the computation.\"\n\n\n```\nclass SGT():\n    '''\n    Compute embedding of a single or a collection of discrete item \n    sequences. A discrete item sequence is a sequence made from a set\n    discrete elements, also known as alphabet set. For example,\n    suppose the alphabet set is the set of roman letters, \n    {A, B, ..., Z}. This set is made of discrete elements. Examples of\n    sequences from such a set are AABADDSA, UADSFJPFFFOIHOUGD, etc.\n    Such sequence datasets are commonly found in online industry,\n    for example, item purchase history, where the alphabet set is\n    the set of all product items. Sequence datasets are abundant in\n    bioinformatics as protein sequences.\n    Using the embeddings created here, classification and clustering\n    models can be built for sequence datasets.\n    Read more in https://arxiv.org/pdf/1608.03533.pdf\n    '''\n\n    Parameters\n    ----------\n    Input:\n\n    alphabets       Optional, except if mode is Spark. \n                    The set of alphabets that make up all \n                    the sequences in the dataset. If not passed, the\n                    alphabet set is automatically computed as the \n                    unique set of elements that make all the sequences.\n                    A list or 1d-array of the set of elements that make up the      \n                    sequences. For example, np.array([\"A\", \"B\", \"C\"].\n                    If mode is 'spark', the alphabets are necessary.\n\n    kappa           Tuning parameter, kappa > 0, to change the extraction of \n                    long-term dependency. Higher the value the lesser\n                    the long-term dependency captured in the embedding.\n                    Typical values for kappa are 1, 5, 10.\n\n    lengthsensitive Default false. This is set to true if the embedding of\n                    should have the information of the length of the sequence.\n                    If set to false then the embedding of two sequences with\n                    similar pattern but different lengths will be the same.\n                    lengthsensitive = false is similar to length-normalization.\n\n    flatten         Default True. If True the SGT embedding is flattened and returned as\n                    a vector. Otherwise, it is returned as a matrix with the row and col\n                    names same as the alphabets. The matrix form is used for            \n                    interpretation purposes. Especially, to understand how the alphabets\n                    are \"related\". Otherwise, for applying machine learning or deep\n                    learning algorithms, the embedding vectors are required.\n\n    mode            Choices in {'default', 'multiprocessing'}. Note: 'multiprocessing' \n                    mode requires pandas==1.0.3+ and pandarallel libraries.\n\n    processors      Used if mode is 'multiprocessing'. By default, the \n                    number of processors used in multiprocessing is\n                    number of available - 1.\n    '''\n\n\n    Attributes\n    ----------\n    def fit(sequence)\n\n    Extract Sequence Graph Transform features using Algorithm-2 in https://arxiv.org/abs/1608.03533.\n    Input:\n    sequence        An array of discrete elements. For example,\n                    np.array([\"B\",\"B\",\"A\",\"C\",\"A\",\"C\",\"A\",\"A\",\"B\",\"A\"].\n\n    Output: \n    sgt embedding   sgt matrix or vector (depending on Flatten==False or True) of the sequence\n\n\n    --\n    def fit_transform(corpus)\n\n    Extract SGT embeddings for all sequences in a corpus. It finds\n    the alphabets encompassing all the sequences in the corpus, if not inputted. \n    However, if the mode is 'spark', then the alphabets list has to be\n    explicitly given in Sgt object declaration.\n\n    Input:\n    corpus          A list of sequences. Each sequence is a list of alphabets.\n\n    Output:\n    sgt embedding of all sequences in the corpus.\n\n\n    --\n    def transform(corpus)\n\n    Find SGT embeddings of a new data sample belonging to the same population\n    of the corpus that was fitted initially.\n```\n\n## <a name=\"install-sgt\"></a> Install SGT\n\nInstall SGT in Python by running,\n\n```$ pip install sgt```\n\n\n```python\nimport sgt\nsgt.__version__\nfrom sgt import SGT\n\n```\n\n\n\n\n    '2.0.0'\n\n\n\n\n\n```python\n# -*- coding: utf-8 -*-\n# Authors: Chitta Ranjan <cran2367@gmail.com>\n#\n# License: BSD 3 clause\n```\n\n\n## <a name=\"installation-test-examples\"></a> Installation Test Examples\n\nIn the following, there are a few test examples to verify the installation.\n\n\n```python\n# Learning a sgt embedding as a matrix with \n# rows and columns as the sequence alphabets. \n# This embedding shows the relationship between \n# the alphabets. The higher the value the \n# stronger the relationship.\n\nsgt = SGT(flatten=False)\nsequence = np.array([\"B\",\"B\",\"A\",\"C\",\"A\",\"C\",\"A\",\"A\",\"B\",\"A\"])\nsgt.fit(sequence)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>A</th>\n      <td>0.090616</td>\n      <td>0.131002</td>\n      <td>0.261849</td>\n    </tr>\n    <tr>\n      <th>B</th>\n      <td>0.086569</td>\n      <td>0.123042</td>\n      <td>0.052544</td>\n    </tr>\n    <tr>\n      <th>C</th>\n      <td>0.137142</td>\n      <td>0.028263</td>\n      <td>0.135335</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# SGT embedding to a vector. The vector\n# embedding is useful for directly applying\n# a machine learning algorithm.\n\nsgt = SGT(flatten=True)\nsequence = np.array([\"B\",\"B\",\"A\",\"C\",\"A\",\"C\",\"A\",\"A\",\"B\",\"A\"])\nsgt.fit(sequence)\n```\n\n\n\n\n    (A, A)    0.090616\n    (A, B)    0.131002\n    (A, C)    0.261849\n    (B, A)    0.086569\n    (B, B)    0.123042\n    (B, C)    0.052544\n    (C, A)    0.137142\n    (C, B)    0.028263\n    (C, C)    0.135335\n    dtype: float64\n\n\n\n\n```python\n'''\nSGT embedding on a corpus of sequences.\nTest the two processing modes within the\nSGT class: 'default', 'multiprocessing'.\n\n'''\n\n# A sample corpus of two sequences.\ncorpus = pd.DataFrame([[1, [\"B\",\"B\",\"A\",\"C\",\"A\",\"C\",\"A\",\"A\",\"B\",\"A\"]], \n                       [2, [\"C\", \"Z\", \"Z\", \"Z\", \"D\"]]], \n                      columns=['id', 'sequence'])\ncorpus\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>sequence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>[B, B, A, C, A, C, A, A, B, A]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>[C, Z, Z, Z, D]</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# Learning the sgt embeddings as vector for\n# all sequences in a corpus.\n# mode: 'default'\nsgt = SGT(kappa=1, \n          flatten=True, \n          lengthsensitive=False, \n          mode='default')\nsgt.fit_transform(corpus)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>(A, A)</th>\n      <th>(A, B)</th>\n      <th>(A, C)</th>\n      <th>(A, D)</th>\n      <th>(A, Z)</th>\n      <th>(B, A)</th>\n      <th>(B, B)</th>\n      <th>(B, C)</th>\n      <th>(B, D)</th>\n      <th>...</th>\n      <th>(D, A)</th>\n      <th>(D, B)</th>\n      <th>(D, C)</th>\n      <th>(D, D)</th>\n      <th>(D, Z)</th>\n      <th>(Z, A)</th>\n      <th>(Z, B)</th>\n      <th>(Z, C)</th>\n      <th>(Z, D)</th>\n      <th>(Z, Z)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>0.090616</td>\n      <td>0.131002</td>\n      <td>0.261849</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.086569</td>\n      <td>0.123042</td>\n      <td>0.052544</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.184334</td>\n      <td>0.290365</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows \u00d7 26 columns</p>\n</div>\n\n\n\n\n```python\n# Learning the sgt embeddings as vector for\n# all sequences in a corpus.\n# mode: 'multiprocessing'\n\nimport pandarallel  # required library for multiprocessing\n\nsgt = SGT(kappa=1, \n          flatten=True, \n          lengthsensitive=False,\n          mode='multiprocessing')\n\nsgt.fit_transform(corpus)\n```\n\n    INFO: Pandarallel will run on 7 workers.\n    INFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.\n\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>(A, A)</th>\n      <th>(A, B)</th>\n      <th>(A, C)</th>\n      <th>(A, D)</th>\n      <th>(A, Z)</th>\n      <th>(B, A)</th>\n      <th>(B, B)</th>\n      <th>(B, C)</th>\n      <th>(B, D)</th>\n      <th>...</th>\n      <th>(D, A)</th>\n      <th>(D, B)</th>\n      <th>(D, C)</th>\n      <th>(D, D)</th>\n      <th>(D, Z)</th>\n      <th>(Z, A)</th>\n      <th>(Z, B)</th>\n      <th>(Z, C)</th>\n      <th>(Z, D)</th>\n      <th>(Z, Z)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>0.090616</td>\n      <td>0.131002</td>\n      <td>0.261849</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.086569</td>\n      <td>0.123042</td>\n      <td>0.052544</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.184334</td>\n      <td>0.290365</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows \u00d7 26 columns</p>\n</div>\n\n## Load Libraries for Illustrative Examples\n\n\n```python\nfrom sgt import SGT\n\nimport numpy as np\nimport pandas as pd\nfrom itertools import chain\nfrom itertools import product as iterproduct\nimport warnings\n\nimport pickle\n\n########\nfrom sklearn.preprocessing import LabelEncoder\nimport tensorflow as tf\nfrom keras.datasets import imdb\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Activation\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.preprocessing import sequence\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nimport sklearn.metrics\nimport time\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nnp.random.seed(7) # fix random seed for reproducibility\n\n# from sgt import Sgt\n```\n\n\n## <a name=\"sequence-clustering\"></a> Sequence Clustering\n\nA form of unsupervised learning from sequences is clustering. For example, in \n\n- user weblogs sequences: clustering the weblogs segments users into groups with similar browsing behavior. This helps in targeted marketing, anomaly detection, and other web customizations.\n\n- protein sequences: clustering proteins with similar structures help researchers study the commonalities between species. It also helps in faster search in some search algorithms.\n\nIn the following, clustering on a protein sequence dataset will be shown.\n\n\n\n### Protein Sequence Clustering\n\nThe data used here is taken from www.uniprot.org. This is a public database for proteins. The data contains the protein sequences and their functions.\n\n\n```python\n# Loading data\ncorpus = pd.read_csv('data/protein_classification.csv')\n\n# Data preprocessing\ncorpus = corpus.loc[:,['Entry','Sequence']]\ncorpus.columns = ['id', 'sequence']\ncorpus['sequence'] = corpus['sequence'].map(list)\ncorpus\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>sequence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M7MCX3</td>\n      <td>[M, E, I, E, K, T, N, R, M, N, A, L, F, E, F, ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>K6PL84</td>\n      <td>[M, E, I, E, K, N, Y, R, M, N, S, L, F, E, F, ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>R4W5V3</td>\n      <td>[M, E, I, E, K, T, N, R, M, N, A, L, F, E, F, ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T2A126</td>\n      <td>[M, E, I, E, K, T, N, R, M, N, A, L, F, E, F, ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>L0SHD5</td>\n      <td>[M, E, I, E, K, T, N, R, M, N, A, L, F, E, F, ...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2107</th>\n      <td>A0A081R612</td>\n      <td>[M, M, N, M, Q, N, M, M, R, Q, A, Q, K, L, Q, ...</td>\n    </tr>\n    <tr>\n      <th>2108</th>\n      <td>A0A081QQM2</td>\n      <td>[M, M, N, M, Q, N, M, M, R, Q, A, Q, K, L, Q, ...</td>\n    </tr>\n    <tr>\n      <th>2109</th>\n      <td>J1A517</td>\n      <td>[M, M, R, Q, A, Q, K, L, Q, K, Q, M, E, Q, S, ...</td>\n    </tr>\n    <tr>\n      <th>2110</th>\n      <td>F5U1T6</td>\n      <td>[M, M, N, M, Q, S, M, M, K, Q, A, Q, K, L, Q, ...</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>J3A2T7</td>\n      <td>[M, M, N, M, Q, N, M, M, K, Q, A, Q, K, L, Q, ...</td>\n    </tr>\n  </tbody>\n</table>\n<p>2112 rows \u00d7 2 columns</p>\n</div>\n\n\n\n\n```python\n%%time\n# Compute SGT embeddings\nsgt_ = SGT(kappa=1, \n           lengthsensitive=False, \n           mode='multiprocessing')\nsgtembedding_df = sgt_.fit_transform(corpus)\n```\n\n    INFO: Pandarallel will run on 7 workers.\n    INFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.\n    CPU times: user 324 ms, sys: 68 ms, total: 392 ms\n    Wall time: 9.02 s\n\n\n\n```python\nsgtembedding_df\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>(A, A)</th>\n      <th>(A, C)</th>\n      <th>(A, D)</th>\n      <th>(A, E)</th>\n      <th>(A, F)</th>\n      <th>(A, G)</th>\n      <th>(A, H)</th>\n      <th>(A, I)</th>\n      <th>(A, K)</th>\n      <th>...</th>\n      <th>(Y, M)</th>\n      <th>(Y, N)</th>\n      <th>(Y, P)</th>\n      <th>(Y, Q)</th>\n      <th>(Y, R)</th>\n      <th>(Y, S)</th>\n      <th>(Y, T)</th>\n      <th>(Y, V)</th>\n      <th>(Y, W)</th>\n      <th>(Y, Y)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M7MCX3</td>\n      <td>0.020180</td>\n      <td>0.0</td>\n      <td>0.009635</td>\n      <td>0.013529</td>\n      <td>0.009360</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.002226</td>\n      <td>0.000379</td>\n      <td>...</td>\n      <td>0.009196</td>\n      <td>0.007964</td>\n      <td>0.036788</td>\n      <td>0.000195</td>\n      <td>0.001513</td>\n      <td>0.020665</td>\n      <td>0.000542</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.010419</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>K6PL84</td>\n      <td>0.001604</td>\n      <td>0.0</td>\n      <td>0.012637</td>\n      <td>0.006323</td>\n      <td>0.006224</td>\n      <td>0.004819</td>\n      <td>3.560677e-03</td>\n      <td>0.001124</td>\n      <td>0.012136</td>\n      <td>...</td>\n      <td>0.135335</td>\n      <td>0.006568</td>\n      <td>0.038901</td>\n      <td>0.011298</td>\n      <td>0.012578</td>\n      <td>0.009913</td>\n      <td>0.001079</td>\n      <td>0.000023</td>\n      <td>0.0</td>\n      <td>0.007728</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>R4W5V3</td>\n      <td>0.012448</td>\n      <td>0.0</td>\n      <td>0.008408</td>\n      <td>0.016363</td>\n      <td>0.027469</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.004249</td>\n      <td>0.013013</td>\n      <td>...</td>\n      <td>0.008114</td>\n      <td>0.007128</td>\n      <td>0.000000</td>\n      <td>0.000203</td>\n      <td>0.001757</td>\n      <td>0.022736</td>\n      <td>0.000249</td>\n      <td>0.012652</td>\n      <td>0.0</td>\n      <td>0.008533</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T2A126</td>\n      <td>0.010545</td>\n      <td>0.0</td>\n      <td>0.012560</td>\n      <td>0.014212</td>\n      <td>0.013728</td>\n      <td>0.000000</td>\n      <td>2.944887e-10</td>\n      <td>0.007223</td>\n      <td>0.000309</td>\n      <td>...</td>\n      <td>0.000325</td>\n      <td>0.009669</td>\n      <td>0.000000</td>\n      <td>0.003182</td>\n      <td>0.001904</td>\n      <td>0.015607</td>\n      <td>0.000577</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.008648</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>L0SHD5</td>\n      <td>0.020180</td>\n      <td>0.0</td>\n      <td>0.008628</td>\n      <td>0.015033</td>\n      <td>0.009360</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.002226</td>\n      <td>0.000379</td>\n      <td>...</td>\n      <td>0.009196</td>\n      <td>0.007964</td>\n      <td>0.036788</td>\n      <td>0.000195</td>\n      <td>0.001513</td>\n      <td>0.020665</td>\n      <td>0.000542</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.010419</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2107</th>\n      <td>A0A081R612</td>\n      <td>0.014805</td>\n      <td>0.0</td>\n      <td>0.004159</td>\n      <td>0.017541</td>\n      <td>0.012701</td>\n      <td>0.013099</td>\n      <td>0.000000e+00</td>\n      <td>0.017043</td>\n      <td>0.004732</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2108</th>\n      <td>A0A081QQM2</td>\n      <td>0.010774</td>\n      <td>0.0</td>\n      <td>0.004283</td>\n      <td>0.014732</td>\n      <td>0.014340</td>\n      <td>0.014846</td>\n      <td>0.000000e+00</td>\n      <td>0.016806</td>\n      <td>0.005406</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2109</th>\n      <td>J1A517</td>\n      <td>0.010774</td>\n      <td>0.0</td>\n      <td>0.004283</td>\n      <td>0.014732</td>\n      <td>0.014340</td>\n      <td>0.014846</td>\n      <td>0.000000e+00</td>\n      <td>0.014500</td>\n      <td>0.005406</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2110</th>\n      <td>F5U1T6</td>\n      <td>0.015209</td>\n      <td>0.0</td>\n      <td>0.005175</td>\n      <td>0.023888</td>\n      <td>0.011410</td>\n      <td>0.011510</td>\n      <td>0.000000e+00</td>\n      <td>0.021145</td>\n      <td>0.009280</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>J3A2T7</td>\n      <td>0.005240</td>\n      <td>0.0</td>\n      <td>0.012301</td>\n      <td>0.013178</td>\n      <td>0.014744</td>\n      <td>0.014705</td>\n      <td>0.000000e+00</td>\n      <td>0.000981</td>\n      <td>0.007957</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>2112 rows \u00d7 401 columns</p>\n</div>\n\n\n\n\n```python\n# Set the id column as the dataframe index\nsgtembedding_df = sgtembedding_df.set_index('id')\nsgtembedding_df\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>(A, A)</th>\n      <th>(A, C)</th>\n      <th>(A, D)</th>\n      <th>(A, E)</th>\n      <th>(A, F)</th>\n      <th>(A, G)</th>\n      <th>(A, H)</th>\n      <th>(A, I)</th>\n      <th>(A, K)</th>\n      <th>(A, L)</th>\n      <th>...</th>\n      <th>(Y, M)</th>\n      <th>(Y, N)</th>\n      <th>(Y, P)</th>\n      <th>(Y, Q)</th>\n      <th>(Y, R)</th>\n      <th>(Y, S)</th>\n      <th>(Y, T)</th>\n      <th>(Y, V)</th>\n      <th>(Y, W)</th>\n      <th>(Y, Y)</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>M7MCX3</th>\n      <td>0.020180</td>\n      <td>0.0</td>\n      <td>0.009635</td>\n      <td>0.013529</td>\n      <td>0.009360</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.002226</td>\n      <td>0.000379</td>\n      <td>0.021703</td>\n      <td>...</td>\n      <td>0.009196</td>\n      <td>0.007964</td>\n      <td>0.036788</td>\n      <td>0.000195</td>\n      <td>0.001513</td>\n      <td>0.020665</td>\n      <td>0.000542</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.010419</td>\n    </tr>\n    <tr>\n      <th>K6PL84</th>\n      <td>0.001604</td>\n      <td>0.0</td>\n      <td>0.012637</td>\n      <td>0.006323</td>\n      <td>0.006224</td>\n      <td>0.004819</td>\n      <td>3.560677e-03</td>\n      <td>0.001124</td>\n      <td>0.012136</td>\n      <td>0.018427</td>\n      <td>...</td>\n      <td>0.135335</td>\n      <td>0.006568</td>\n      <td>0.038901</td>\n      <td>0.011298</td>\n      <td>0.012578</td>\n      <td>0.009913</td>\n      <td>0.001079</td>\n      <td>0.000023</td>\n      <td>0.0</td>\n      <td>0.007728</td>\n    </tr>\n    <tr>\n      <th>R4W5V3</th>\n      <td>0.012448</td>\n      <td>0.0</td>\n      <td>0.008408</td>\n      <td>0.016363</td>\n      <td>0.027469</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.004249</td>\n      <td>0.013013</td>\n      <td>0.031118</td>\n      <td>...</td>\n      <td>0.008114</td>\n      <td>0.007128</td>\n      <td>0.000000</td>\n      <td>0.000203</td>\n      <td>0.001757</td>\n      <td>0.022736</td>\n      <td>0.000249</td>\n      <td>0.012652</td>\n      <td>0.0</td>\n      <td>0.008533</td>\n    </tr>\n    <tr>\n      <th>T2A126</th>\n      <td>0.010545</td>\n      <td>0.0</td>\n      <td>0.012560</td>\n      <td>0.014212</td>\n      <td>0.013728</td>\n      <td>0.000000</td>\n      <td>2.944887e-10</td>\n      <td>0.007223</td>\n      <td>0.000309</td>\n      <td>0.028531</td>\n      <td>...</td>\n      <td>0.000325</td>\n      <td>0.009669</td>\n      <td>0.000000</td>\n      <td>0.003182</td>\n      <td>0.001904</td>\n      <td>0.015607</td>\n      <td>0.000577</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.008648</td>\n    </tr>\n    <tr>\n      <th>L0SHD5</th>\n      <td>0.020180</td>\n      <td>0.0</td>\n      <td>0.008628</td>\n      <td>0.015033</td>\n      <td>0.009360</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.002226</td>\n      <td>0.000379</td>\n      <td>0.021703</td>\n      <td>...</td>\n      <td>0.009196</td>\n      <td>0.007964</td>\n      <td>0.036788</td>\n      <td>0.000195</td>\n      <td>0.001513</td>\n      <td>0.020665</td>\n      <td>0.000542</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.010419</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>A0A081R612</th>\n      <td>0.014805</td>\n      <td>0.0</td>\n      <td>0.004159</td>\n      <td>0.017541</td>\n      <td>0.012701</td>\n      <td>0.013099</td>\n      <td>0.000000e+00</td>\n      <td>0.017043</td>\n      <td>0.004732</td>\n      <td>0.014904</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>A0A081QQM2</th>\n      <td>0.010774</td>\n      <td>0.0</td>\n      <td>0.004283</td>\n      <td>0.014732</td>\n      <td>0.014340</td>\n      <td>0.014846</td>\n      <td>0.000000e+00</td>\n      <td>0.016806</td>\n      <td>0.005406</td>\n      <td>0.014083</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>J1A517</th>\n      <td>0.010774</td>\n      <td>0.0</td>\n      <td>0.004283</td>\n      <td>0.014732</td>\n      <td>0.014340</td>\n      <td>0.014846</td>\n      <td>0.000000e+00</td>\n      <td>0.014500</td>\n      <td>0.005406</td>\n      <td>0.014083</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>F5U1T6</th>\n      <td>0.015209</td>\n      <td>0.0</td>\n      <td>0.005175</td>\n      <td>0.023888</td>\n      <td>0.011410</td>\n      <td>0.011510</td>\n      <td>0.000000e+00</td>\n      <td>0.021145</td>\n      <td>0.009280</td>\n      <td>0.017466</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>J3A2T7</th>\n      <td>0.005240</td>\n      <td>0.0</td>\n      <td>0.012301</td>\n      <td>0.013178</td>\n      <td>0.014744</td>\n      <td>0.014705</td>\n      <td>0.000000e+00</td>\n      <td>0.000981</td>\n      <td>0.007957</td>\n      <td>0.017112</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>2112 rows \u00d7 400 columns</p>\n</div>\n\n\n\nWe perform PCA on the sequence embeddings and then do kmeans clustering.\n\n\n```python\npca = PCA(n_components=2)\npca.fit(sgtembedding_df)\n\nX=pca.transform(sgtembedding_df)\n\nprint(np.sum(pca.explained_variance_ratio_))\ndf = pd.DataFrame(data=X, columns=['x1', 'x2'])\ndf.head()\n```\n\n    0.6432744907364981\n\n\n\n\n\n<div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x1</th>\n      <th>x2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.384913</td>\n      <td>-0.269873</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.022764</td>\n      <td>0.135995</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.177792</td>\n      <td>-0.172454</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.168074</td>\n      <td>-0.147334</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.383616</td>\n      <td>-0.271163</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nkmeans = KMeans(n_clusters=3, max_iter =300)\nkmeans.fit(df)\n\nlabels = kmeans.predict(df)\ncentroids = kmeans.cluster_centers_\n\nfig = plt.figure(figsize=(5, 5))\ncolmap = {1: 'r', 2: 'g', 3: 'b'}\ncolors = list(map(lambda x: colmap[x+1], labels))\nplt.scatter(df['x1'], df['x2'], color=colors, alpha=0.5, edgecolor=colors)\n```\n\n\n\n\n    <matplotlib.collections.PathCollection at 0x14c5a77f0>\n\n\n\n\n![png](output_23_1.png)\n\n\n## <a name=\"sequence-classification\"></a> Sequence Classification using Deep Learning in TensorFlow\n\nThe protein data set used above is also labeled. The labels represent the protein functions. Similarly, there are other labeled sequence data sets. For example, DARPA shared an intrusion weblog data set. It contains weblog sequences with positive labels if the log represents a network intrusion.\n\nIn such problems supervised learning is employed. Classification is a supervised learning we will demonstrate here.\n\n### Protein Sequence Classification\n\nThe data set is taken from https://www.uniprot.org . The protein sequences in the data set have one of the two functions,\n- Binds to DNA and alters its conformation. May be involved in regulation of gene expression, nucleoid organization and DNA protection.\n- Might take part in the signal recognition particle (SRP) pathway. This is inferred from the conservation of its genetic proximity to ftsY/ffh. May be a regulatory protein.\n\nThere are a total of 2113 samples. The sequence lengths vary between 100-700.\n\n\n```python\n# Loading data\ndata = pd.read_csv('data/protein_classification.csv')\n\n\n# Data preprocessing\ny = data['Function [CC]']\nencoder = LabelEncoder()\nencoder.fit(y)\nencoded_y = encoder.transform(y)\n\ncorpus = data.loc[:,['Entry','Sequence']]\ncorpus.columns = ['id', 'sequence']\ncorpus['sequence'] = corpus['sequence'].map(list)\n```\n\n#### Sequence embeddings\n\n\n```python\n# Sequence embedding\nsgt_ = SGT(kappa=1, \n           lengthsensitive=False, \n           mode='multiprocessing')\nsgtembedding_df = sgt_.fit_transform(corpus)\nX = sgtembedding_df.set_index('id')\n```\n\n    INFO: Pandarallel will run on 7 workers.\n    INFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.\n\n\nWe will perform a 10-fold cross-validation to measure the performance of the classification model.\n\n\n```python\nkfold = 10\nX = X\ny = encoded_y\n\nrandom_state = 1\n\ntest_F1 = np.zeros(kfold)\nskf = KFold(n_splits = kfold, shuffle = True, random_state = random_state)\nk = 0\nepochs = 50\nbatch_size = 128\n\nfor train_index, test_index in skf.split(X, y):\n    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    model = Sequential()\n    model.add(Dense(64, input_shape = (X_train.shape[1],))) \n    model.add(Activation('relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(32))\n    model.add(Activation('relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(1))\n    model.add(Activation('sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n    model.fit(X_train, y_train ,batch_size=batch_size, epochs=epochs, verbose=0)\n\n    y_pred = model.predict_proba(X_test).round().astype(int)\n    y_train_pred = model.predict_proba(X_train).round().astype(int)\n\n    test_F1[k] = sklearn.metrics.f1_score(y_test, y_pred)\n    k+=1\n\nprint ('Average f1 score', np.mean(test_F1))\n```\n\n    Average f1 score 1.0\n\n\n### Weblog Classification for Intrusion Detection\n\nThis data sample is taken from https://www.ll.mit.edu/r-d/datasets/1998-darpa-intrusion-detection-evaluation-dataset. \nThis is a network intrusion data containing audit logs and any attack as a positive label. Since, network intrusion is a rare event, the data is unbalanced. Here we will,\n- build a sequence classification model to predict a network intrusion.\n\nEach sequence contains in the data is a series of activity, for example, {login, password}. The _alphabets_ in the input data sequences are already encoded into integers. The original sequences data file is also present in the `/data` directory.\n\n\n```python\n# Loading data\ndata = pd.read_csv('data/darpa_data.csv')\ndata.columns\n```\n\n\n\n\n    Index(['timeduration', 'seqlen', 'seq', 'class'], dtype='object')\n\n\n\n\n```python\ndata['id'] = data.index\n```\n\n\n```python\n# Data preprocessing\ny = data['class']\nencoder = LabelEncoder()\nencoder.fit(y)\nencoded_y = encoder.transform(y)\n\ncorpus = data.loc[:,['id','seq']]\ncorpus.columns = ['id', 'sequence']\ncorpus['sequence'] = corpus['sequence'].map(list)\n```\n\n#### Sequence embeddings\nIn this data, the sequence embeddings should be **length-sensitive**. \n\nThe lengths are important here because sequences with similar patterns but different lengths can have different labels. Consider a simple example of two sessions: `{login, pswd, login, pswd,...}` and `{login, pswd,...(repeated several times)..., login, pswd}`. \n\nWhile the first session can be a regular user mistyping the password once, the other session is possibly an attack to guess the password. Thus, the sequence lengths are as important as the patterns.\n\nTherefore, `lengthsensitive=True` is used here.\n\n\n```python\n# Sequence embedding\nsgt_ = SGT(kappa=5, \n           lengthsensitive=True, \n           mode='multiprocessing')\nsgtembedding_df = sgt_.fit_transform(corpus)\nsgtembedding_df = sgtembedding_df.set_index('id')\nsgtembedding_df\n```\n\n    INFO: Pandarallel will run on 7 workers.\n    INFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.\n\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>(0, 0)</th>\n      <th>(0, 1)</th>\n      <th>(0, 2)</th>\n      <th>(0, 3)</th>\n      <th>(0, 4)</th>\n      <th>(0, 5)</th>\n      <th>(0, 6)</th>\n      <th>(0, 7)</th>\n      <th>(0, 8)</th>\n      <th>(0, 9)</th>\n      <th>...</th>\n      <th>(~, 1)</th>\n      <th>(~, 2)</th>\n      <th>(~, 3)</th>\n      <th>(~, 4)</th>\n      <th>(~, 5)</th>\n      <th>(~, 6)</th>\n      <th>(~, 7)</th>\n      <th>(~, 8)</th>\n      <th>(~, 9)</th>\n      <th>(~, ~)</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0.0</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.485034</td>\n      <td>0.486999</td>\n      <td>0.485802</td>\n      <td>0.483097</td>\n      <td>0.483956</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.178609</td>\n    </tr>\n    <tr>\n      <th>1.0</th>\n      <td>0.000000</td>\n      <td>0.025622</td>\n      <td>0.228156</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>1.310714e-09</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.447620</td>\n      <td>0.452097</td>\n      <td>0.464568</td>\n      <td>0.367296</td>\n      <td>0.525141</td>\n      <td>0.455018</td>\n      <td>0.374364</td>\n      <td>0.414081</td>\n      <td>0.549981</td>\n      <td>0.172479</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.525605</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.193359</td>\n      <td>0.071469</td>\n    </tr>\n    <tr>\n      <th>3.0</th>\n      <td>0.077999</td>\n      <td>0.208974</td>\n      <td>0.230338</td>\n      <td>1.830519e-01</td>\n      <td>1.200926e-17</td>\n      <td>1.696880e-01</td>\n      <td>0.093646</td>\n      <td>7.985870e-02</td>\n      <td>2.896813e-05</td>\n      <td>3.701710e-05</td>\n      <td>...</td>\n      <td>0.474072</td>\n      <td>0.468353</td>\n      <td>0.463594</td>\n      <td>0.177507</td>\n      <td>0.551270</td>\n      <td>0.418652</td>\n      <td>0.309652</td>\n      <td>0.384657</td>\n      <td>0.378225</td>\n      <td>0.170362</td>\n    </tr>\n    <tr>\n      <th>4.0</th>\n      <td>0.000000</td>\n      <td>0.023695</td>\n      <td>0.217819</td>\n      <td>2.188276e-33</td>\n      <td>0.000000e+00</td>\n      <td>6.075992e-11</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>5.681668e-39</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.464120</td>\n      <td>0.468229</td>\n      <td>0.452170</td>\n      <td>0.000000</td>\n      <td>0.501242</td>\n      <td>0.000000</td>\n      <td>0.300534</td>\n      <td>0.161961</td>\n      <td>0.000000</td>\n      <td>0.167082</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>106.0</th>\n      <td>0.000000</td>\n      <td>0.024495</td>\n      <td>0.219929</td>\n      <td>2.035190e-17</td>\n      <td>1.073271e-18</td>\n      <td>5.656994e-11</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>5.047380e-29</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.502213</td>\n      <td>0.544343</td>\n      <td>0.477281</td>\n      <td>0.175901</td>\n      <td>0.461103</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.162796</td>\n      <td>0.000000</td>\n      <td>0.167687</td>\n    </tr>\n    <tr>\n      <th>107.0</th>\n      <td>0.110422</td>\n      <td>0.227478</td>\n      <td>0.217549</td>\n      <td>1.723963e-01</td>\n      <td>1.033292e-14</td>\n      <td>3.896725e-07</td>\n      <td>0.083685</td>\n      <td>2.940589e-08</td>\n      <td>8.864072e-02</td>\n      <td>4.813990e-29</td>\n      <td>...</td>\n      <td>0.490398</td>\n      <td>0.522016</td>\n      <td>0.466808</td>\n      <td>0.470603</td>\n      <td>0.479795</td>\n      <td>0.480057</td>\n      <td>0.194888</td>\n      <td>0.172397</td>\n      <td>0.164873</td>\n      <td>0.172271</td>\n    </tr>\n    <tr>\n      <th>108.0</th>\n      <td>0.005646</td>\n      <td>0.202424</td>\n      <td>0.196786</td>\n      <td>2.281242e-01</td>\n      <td>1.133936e-01</td>\n      <td>1.862098e-01</td>\n      <td>0.000000</td>\n      <td>1.212869e-01</td>\n      <td>9.180520e-08</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.432834</td>\n      <td>0.434953</td>\n      <td>0.439615</td>\n      <td>0.390864</td>\n      <td>0.481764</td>\n      <td>0.600875</td>\n      <td>0.166766</td>\n      <td>0.165368</td>\n      <td>0.000000</td>\n      <td>0.171729</td>\n    </tr>\n    <tr>\n      <th>109.0</th>\n      <td>0.000000</td>\n      <td>0.025616</td>\n      <td>0.238176</td>\n      <td>3.889176e-55</td>\n      <td>1.332427e-60</td>\n      <td>1.408003e-09</td>\n      <td>0.000000</td>\n      <td>9.845377e-60</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.421318</td>\n      <td>0.439985</td>\n      <td>0.467953</td>\n      <td>0.440951</td>\n      <td>0.527165</td>\n      <td>0.864717</td>\n      <td>0.407155</td>\n      <td>0.399335</td>\n      <td>0.251304</td>\n      <td>0.171885</td>\n    </tr>\n    <tr>\n      <th>110.0</th>\n      <td>0.000000</td>\n      <td>0.022868</td>\n      <td>0.203513</td>\n      <td>9.273472e-64</td>\n      <td>0.000000e+00</td>\n      <td>1.240870e-09</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.478090</td>\n      <td>0.454871</td>\n      <td>0.459109</td>\n      <td>0.000000</td>\n      <td>0.490534</td>\n      <td>0.370357</td>\n      <td>0.000000</td>\n      <td>0.162997</td>\n      <td>0.000000</td>\n      <td>0.162089</td>\n    </tr>\n  </tbody>\n</table>\n<p>111 rows \u00d7 121 columns</p>\n</div>\n\n\n\n#### Applying PCA on the embeddings\nThe embeddings are sparse and high-dimensional. PCA is, therefore, applied for dimension reduction.\n\n\n```python\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=35)\npca.fit(sgtembedding_df)\nX = pca.transform(sgtembedding_df)\nprint(np.sum(pca.explained_variance_ratio_))\n```\n\n    0.9962446146783123\n\n\n#### Building a Multi-Layer Perceptron Classifier\nThe PCA transforms of the embeddings are used directly as inputs to an MLP classifier.\n\n\n```python\nkfold = 3\nrandom_state = 11\n\nX = X\ny = encoded_y\n\ntest_F1 = np.zeros(kfold)\ntime_k = np.zeros(kfold)\nskf = StratifiedKFold(n_splits=kfold, shuffle=True, random_state=random_state)\nk = 0\nepochs = 300\nbatch_size = 15\n\n# class_weight = {0 : 1., 1: 1.,}  # The weights can be changed and made inversely proportional to the class size to improve the accuracy.\nclass_weight = {0 : 0.12, 1: 0.88,}\n\nfor train_index, test_index in skf.split(X, y):\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    model = Sequential()\n    model.add(Dense(128, input_shape=(X_train.shape[1],))) \n    model.add(Activation('relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(1))\n    model.add(Activation('sigmoid'))\n    model.summary()\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n    start_time = time.time()\n    model.fit(X_train, y_train ,batch_size=batch_size, epochs=epochs, verbose=1, class_weight=class_weight)\n    end_time = time.time()\n    time_k[k] = end_time-start_time\n\n    y_pred = model.predict_proba(X_test).round().astype(int)\n    y_train_pred = model.predict_proba(X_train).round().astype(int)\n    test_F1[k] = sklearn.metrics.f1_score(y_test, y_pred)\n    k += 1\n```\n\n    Model: \"sequential_10\"\n    _________________________________________________________________\n    Layer (type)                 Output Shape              Param #   \n    =================================================================\n    dense_30 (Dense)             (None, 128)               4608      \n    _________________________________________________________________\n    activation_30 (Activation)   (None, 128)               0         \n    _________________________________________________________________\n    dropout_20 (Dropout)         (None, 128)               0         \n    _________________________________________________________________\n    dense_31 (Dense)             (None, 1)                 129       \n    _________________________________________________________________\n    activation_31 (Activation)   (None, 1)                 0         \n    =================================================================\n    Total params: 4,737\n    Trainable params: 4,737\n    Non-trainable params: 0\n    _________________________________________________________________\n    WARNING:tensorflow:sample_weight modes were coerced from\n      ...\n        to  \n      ['...']\n    Train on 74 samples\n    Epoch 1/300\n    74/74 [==============================] - 0s 7ms/sample - loss: 0.1487 - accuracy: 0.5270\n    Epoch 2/300\n    74/74 [==============================] - 0s 120us/sample - loss: 0.1421 - accuracy: 0.5000\n    ...\n    74/74 [==============================] - 0s 118us/sample - loss: 0.0299 - accuracy: 0.8784\n    Epoch 300/300\n    74/74 [==============================] - 0s 133us/sample - loss: 0.0296 - accuracy: 0.8649\n\n\n\n```python\nprint ('Average f1 score', np.mean(test_F1))\nprint ('Average Run time', np.mean(time_k))\n```\n\n    Average f1 score 0.6341880341880342\n    Average Run time 3.880180994669596\n\n\n#### Building an LSTM Classifier on the sequences for comparison\nWe built an LSTM Classifier on the sequences to compare the accuracy.\n\n\n```python\nX = data['seq']\nencoded_X = np.ndarray(shape=(len(X),), dtype=list)\nfor i in range(0,len(X)):\n    encoded_X[i]=X.iloc[i].split(\"~\")\nX\n```\n\n\n\n\n    0      1~2~3~3~3~3~3~3~1~4~5~1~2~3~3~3~3~3~3~1~4~5~1~...\n    1      6~5~5~6~5~6~5~2~5~5~5~5~5~5~5~5~5~5~5~5~5~5~5~...\n    2      19~19~19~19~19~19~19~19~19~19~19~19~19~19~19~1...\n    3      6~5~5~6~5~6~5~2~5~5~5~5~5~5~5~5~5~5~5~5~5~5~5~...\n    4      5~5~17~5~5~5~5~5~10~2~11~2~11~11~12~11~11~5~2~...\n                                 ...                        \n    106    10~2~11~2~11~11~12~11~11~5~2~11~5~2~5~2~3~14~3...\n    107    5~5~2~5~17~6~5~6~5~5~2~6~17~3~2~2~3~5~2~3~5~6~...\n    108    6~5~6~5~5~6~5~5~6~6~6~6~6~6~6~6~6~6~6~6~6~6~6~...\n    109    6~5~5~6~5~6~5~2~38~2~3~5~22~39~5~5~5~5~5~5~5~5...\n    110    5~6~5~5~10~2~11~2~11~11~12~11~5~2~11~11~12~11~...\n    Name: seq, Length: 111, dtype: object\n\n\n\n\n```python\nmax_seq_length = np.max(data['seqlen'])\nencoded_X = tf.keras.preprocessing.sequence.pad_sequences(encoded_X, maxlen=max_seq_length)\n```\n\n\n```python\nkfold = 3\nrandom_state = 11\n\ntest_F1 = np.zeros(kfold)\ntime_k = np.zeros(kfold)\n\nepochs = 50\nbatch_size = 15\nskf = StratifiedKFold(n_splits=kfold, shuffle=True, random_state=random_state)\nk = 0\n\nfor train_index, test_index in skf.split(encoded_X, y):\n    X_train, X_test = encoded_X[train_index], encoded_X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    embedding_vecor_length = 32\n    top_words=50\n    model = Sequential()\n    model.add(Embedding(top_words, embedding_vecor_length, input_length=max_seq_length))\n    model.add(LSTM(32))\n    model.add(Dense(1))\n    model.add(Activation('sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n    model.summary()\n\n    start_time = time.time()\n    model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=1)\n    end_time=time.time()\n    time_k[k]=end_time-start_time\n\n    y_pred = model.predict_proba(X_test).round().astype(int)\n    y_train_pred=model.predict_proba(X_train).round().astype(int)\n    test_F1[k]=sklearn.metrics.f1_score(y_test, y_pred)\n    k+=1\n```\n\n    Model: \"sequential_13\"\n    _________________________________________________________________\n    Layer (type)                 Output Shape              Param #   \n    =================================================================\n    embedding (Embedding)        (None, 1773, 32)          1600      \n    _________________________________________________________________\n    lstm (LSTM)                  (None, 32)                8320      \n    _________________________________________________________________\n    dense_36 (Dense)             (None, 1)                 33        \n    _________________________________________________________________\n    activation_36 (Activation)   (None, 1)                 0         \n    =================================================================\n    Total params: 9,953\n    Trainable params: 9,953\n    Non-trainable params: 0\n    _________________________________________________________________\n    Train on 74 samples\n    Epoch 1/50\n    74/74 [==============================] - 5s 72ms/sample - loss: 0.6894 - accuracy: 0.5676\n    Epoch 2/50\n    74/74 [==============================] - 4s 48ms/sample - loss: 0.6590 - accuracy: 0.8784\n    ...\n    Epoch 50/50\n    74/74 [==============================] - 4s 51ms/sample - loss: 0.1596 - accuracy: 0.9324\n\n\n\n```python\nprint ('Average f1 score', np.mean(test_F1))\nprint ('Average Run time', np.mean(time_k))\n```\n\n    Average f1 score 0.36111111111111116\n    Average Run time 192.46954011917114\n\n\nWe find that the LSTM classifier gives a significantly lower F1 score. This may be improved by changing the model. However, we find that the SGT embedding could work with a small and unbalanced data without the need of a complicated classifier model.\n\nLSTM models typically require more data for training and also has significantly more computation time. The LSTM model above took 425.6 secs while the MLP model took just 9.1 secs.\n\n## <a name=\"sequence-search\"></a> Sequence Search\n\nSequence data sets are generally large. For example, sequences of listening history in music streaming services, such as Pandora, for more than 70M users are huge. In protein data bases there could be even larger size. For instance, the Uniprot data repository has more than 177M sequences.\n\nSearching for similar sequences in such large data bases is challenging. SGT embedding provides a simple solution. In the following it will be shown on a protein data set that SGT embedding can be used to compute similarity between a query sequence and the sequence corpus using a dot product. The sequences with the highest dot product are returned as the most similar sequence to the query.\n\n### Protein Sequence Search\n\nIn the following, a sample of 10k protein sequences are used for illustration. The data is taken from https://www.uniprot.org .\n\n\n```python\n# Loading data\ndata = pd.read_csv('data/protein-uniprot-reviewed-Ano-10k.tab', sep='\\t')\n\n# Data preprocessing\ncorpus = data.loc[:,['Entry','Sequence']]\ncorpus.columns = ['id', 'sequence']\ncorpus['sequence'] = corpus['sequence'].map(list)\ncorpus.head(3)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>sequence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>I2WKR6</td>\n      <td>[M, V, H, K, S, D, S, D, E, L, A, A, L, R, A, ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A0A2A6M8K9</td>\n      <td>[M, Q, E, S, L, V, V, R, R, E, T, H, I, A, A, ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A0A3G5KEC3</td>\n      <td>[M, A, S, G, A, Y, S, K, Y, L, F, Q, I, I, G, ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# Protein sequence alphabets\nalphabets = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', \n             'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', \n             'W', 'X', 'Y', 'U', 'O']  # List of amino acids\n\n# Alphabets are known and inputted \n# as arguments for faster computation\nsgt_ = SGT(alphabets=alphabets, \n           lengthsensitive=True, \n           kappa=1, \n           flatten=True, \n           mode='multiprocessing')\n\nsgtembedding_df = sgt_.fit_transform(corpus)\nsgtembedding_df = sgtembedding_df.set_index('id')\n```\n\n    INFO: Pandarallel will run on 7 workers.\n    INFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.\n\n\n\n```python\n'''\nSearch proteins similar to a query protein.\nThe approach is to find the SGT embedding of the\nquery protein and find its similarity with the\nembeddings of the protein database.\n'''\n\nquery_protein = 'MSHVFPIVIDDNFLSPQDLVSAARSGCSLRLHTGVVDKIDRAHRFVLEIAGAEALHYGINTGFGSLCTTHIDPADLSTLQHNLLKSHACGVGPTVSEEVSRVVTLIKLLTFRTGNSGVSLSTVNRIIDLWNHGVVGAIAQKGTVGASGDLAPLAHLFLPLIGLGQVWHRGVLRPSREVMDELKLAPLTLQPKDGLCLTNGVQYLNAWGALSTVRAKRLVALADLCAAMSMMGFSAARSFIEAQIHQTSLHPERGHVALHLRTLTHGSNHADLPHCNPAMEDPYSFRCAPQVHGAARQVVGYLETVIGNECNSVSDNPLVFPDTRQILTCGNLHGQSTAFALDFAAIGITDLSNISERRTYQLLSGQNGLPGFLVAKPGLNSGFMVVQYTSAALLNENKVLSNPASVDTIPTCHLQEDHVSMGGTSAYKLQTILDNCETILAIELMTACQAIDMNPGLQLSERGRAIYEAVREEIPFVKEDHLMAGLISKSRDLCQHSTVIAQQLAEMQAQ'\n\n# Step 1. Compute sgt embedding for the query protein.\nquery_protein_sgt_embedding = sgt_.fit(list(query_protein))\n\n# Step 2. Compute the dot product of query embedding \n# with the protein embedding database.\nsimilarity = sgtembedding_df.dot(query_protein_sgt_embedding)\n\n# Step 3. Return the top k protein names based on similarity.\nsimilarity.sort_values(ascending=False)\n```\n\n\n\n\n    id\n    K0ZGN5        2773.749663\n    A0A0Y1CPH7    1617.451379\n    A0A5R8LCJ1    1566.833152\n    A0A290WY40    1448.772820\n    A0A073K6N6    1392.267250\n                     ...     \n    A0A1S7UBK4     160.074989\n    A0A2S7T1R9     156.580584\n    A0A0E0UQV6     155.834932\n    A0A1Y5Y0S0     148.862049\n    B0NRP3         117.656497\n    Length: 10063, dtype: float64\n\n\n\n## <a name=\"sgt-spark\"></a> SGT - Spark for Distributed Computing\n\nAs mentioned in the previous section, sequence data sets can be large. SGT complexity is linear with the number of sequences in a data set. Still if the data size is large the computation becomes high. For example, for a set of 1M protein sequences the default SGT mode takes over 24 hours.\n\nUsing distributed computing with Spark the runtime can be significantly reduced. For instance, SGT-Spark on the same 1M protein data set took less than 29 minutes.\n\nIn the following, Spark implementation for SGT is shown. First, it is applied on a smaller 10k data set for comparison. Then it is applied on 1M data set without any syntactical change.\n\n\n```python\n'''\nLoad the data and remove header.\n'''\ndata = sc.textFile('data/protein-uniprot-reviewed-Ano-10k.tab')\n\nheader = data.first() #extract header\ndata = data.filter(lambda row: row != header)   #filter out header\ndata.take(1)  # See one sample\n\n```\n\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">3</span><span class=\"ansired\">]: </span>[&apos;I2WKR6\\tI2WKR6_ECOLX\\tunreviewed\\tType III restriction enzyme, res subunit (EC 3.1.21.5)\\tEC90111_4246\\tEscherichia coli 9.0111\\t786\\tMVHKSDSDELAALRAENVRLVSLLEAHGIEWRRKPQSPVPRVSVLSTNEKVALFRRLFRGRDDVWALRWESKTSGKSGYSPACANEWQLGICGKPRIKCGDCAHRQLIPVSDLVIYHHLAGTHTAGMYPLLEDDSCYFLAVDFDEAEWQKDASAFMRSCDELGVPAALEISRSRQGAHVWIFFASRVSAREARRLGTAIISYTCSRTRQLRLGSYDRLFPNQDTMPKGGFGNLIALPLQKRPRELGGSVFVDMNLQPYPDQWAFLVSVIPMNVQDIEPTILRATGSIHPLDVNFINEEDLGTPWEEKKSSGNRLNIAVTEPLIITLANQIYFEKAQLPQALVNRLIRLAAFPNPEFYKAQAMRMSVWNKPRVIGCAENYPQHIALPRGCLDSALSFLRYNNIAAELIDKRFAGTECNAVFTGNLRAEQEEAVSALLRYDTGVLCAPTAFGKTVTAAAVIARRKVNTLILVHRTELLKQWQERLAVFLQVGDSIGIIGGGKHKPCGNIDIAVVQSISRHGEVEPLVRNYGQIIVDECHHIGAVSFSAILKETNARYLLGLTATPIRRDGLHPIIFMYCGAIRHTAARPKESLHNLEVLTRSRFTSGHLPSDARIQDIFREIALDHDRTVAIAEEAMKAFGQGRKVLVLTERTDHLDDIASVMNTLKLSPFVLHSRLSKKKRTMLISGLNALPPDSPRILLSTGRLIGEGFDHPPLDTLILAMPVSWKGTLQQYAGRLHREHTGKSDVRIIDFVDTAYPVLLRMWDKRQRGYKAMGYRIVADGEGLSF&apos;]</div>\n\n\n\n```python\n# Repartition for increasing the parallel processes\ndata = data.repartition(500)\n```\n\n\n```python\ndef preprocessing(line):\n    '''\n    Original data are lines where each line has \\t\n    separated values. We are interested in preserving\n    the first value (entry id), tmp[0], and the last value\n    (the sequence), tmp[-1].\n    '''\n    tmp = line.split('\\t')\n    id = tmp[0]\n    sequence = list(tmp[-1])\n    return (id, sequence)\n\nprocesseddata = data.map(lambda line: preprocessing(line))\nprocesseddata.take(1)  # See one sample\n\n```\n\n\n<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">5</span><span class=\"ansired\">]: </span>[(&apos;A0A2E9WIJ1&apos;,\n  [&apos;M&apos;,\n   &apos;Y&apos;,\n   &apos;I&apos;,\n   &apos;F&apos;,\n   &apos;L&apos;,\n   &apos;T&apos;,\n   &apos;L&apos;,\n\t...   \n   &apos;A&apos;,\n   &apos;K&apos;,\n   &apos;L&apos;,\n   &apos;D&apos;,\n   &apos;K&apos;,\n   &apos;N&apos;,\n   &apos;D&apos;])]</div>\n\n\n\n\n\n```python\n# Protein sequence alphabets\nalphabets = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', \n             'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', \n             'W', 'X', 'Y', 'U', 'O']  # List of amino acids\n```\n\n\n```python\n'''\nSpark approach.\nIn this approach the alphabets argument has to\nbe passed to the SGT class definition.\nThe SGT.fit() is then called in parallel.\n'''\nsgt_ = sgt.SGT(alphabets=alphabets, \n               kappa=1, \n               lengthsensitive=True, \n               flatten=True)\nrdd = processeddata.map(lambda x: (x[0], list(sgt_.fit(x[1]))))\nsgtembeddings = rdd.collect()\n# Command took 29.66 seconds -- by cranjan@processminer.com at 4/22/2020, 12:31:23 PM on databricks\n```\n\n### Compare with the default SGT mode\n\n\n```python\n# Loading data\ndata = pd.read_csv('data/protein-uniprot-reviewed-Ano-10k.tab', sep='\\t')\n\n# Data preprocessing\ncorpus = data.loc[:,['Entry','Sequence']]\ncorpus.columns = ['id', 'sequence']\ncorpus['sequence'] = corpus['sequence'].map(list)\n\n```\n\n\n```python\nsgt_ = sgt.SGT(alphabets=alphabets, \n               lengthsensitive=True, \n               kappa=1, \n               flatten=True, \n               mode='default')\n\nsgtembedding_df = sgt_.fit_transform(corpus)\n# Command took 13.08 minutes -- by cranjan@processminer.com at 4/22/2020, 1:48:02 PM on databricks\n```\n\n### 1M Protein Database\n\nProtein 1M sequence data set is embedded here. The data set is available [here](https://mega.nz/file/1qAXhSAS#l7E60cLJzMGtFQzeHZL9PI8yX4tRQcAMFRN2xeHK81w).\n\n```python\n'''\nLoad the data and remove header.\n'''\ndata = sc.textFile('data/protein-uniprot-reviewed-Ano-1M.tab')\n\nheader = data.first() #extract header\ndata = data.filter(lambda row: row != header)   #filter out header\ndata.take(1)  # See one sample\n```\n\n\n\n```python\n# Repartition for increasing the parallel processes\ndata = data.repartition(10000)\n```\n\n\n```python\nprocesseddata = data.map(lambda line: preprocessing(line))\nprocesseddata.take(1)  # See one sample\n\n# [('A0A2E9WIJ1',\n#   ['M','Y','I','F','L','T','L','A','L','F','S',...,'F','S','I','F','A','K','L','D','K','N','D'])]\n```\n\n\n```python\n# Protein sequence alphabets\nalphabets = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', \n             'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', \n             'W', 'X', 'Y', 'U', 'O']  # List of amino acids\n```\n\n\n```python\n'''\nSpark approach.\nIn this approach the alphabets argument has to\nbe passed to the SGT class definition.\nThe SGT.fit() is then called in parallel.\n'''\nsgt_ = sgt.SGT(alphabets=alphabets, \n               kappa=1, \n               lengthsensitive=True, \n               flatten=True)\nrdd = processeddata.map(lambda x: (x[0], list(sgt_.fit(x[1]))))\nsgtembeddings = rdd.collect()\n# Command took 28.98 minutes -- by cranjan@processminer.com at 4/22/2020, 3:16:41 PM on databricks\n```\n\n\n```python\n'''OPTIONAL.\nSave the embeddings for future use or \nproduction deployment.'''\n# Save for deployment\n# pickle.dump(sgtembeddings, \n#             open(\"data/protein-sgt-embeddings-1M.pkl\", \"wb\"))\n# The pickle dump is shared at https://mega.nz/file/hiAxAAoI#SStAIn_FZjAHvXSpXfdy8VpISG6rusHRf9HlUSqwcsw\n# sgtembeddings = pickle.load(open(\"data/protein-sgt-embeddings-1M.pkl\", \"rb\"))\n```\n\nThe pickle dump is shared [here](https://mega.nz/file/hiAxAAoI#SStAIn_FZjAHvXSpXfdy8VpISG6rusHRf9HlUSqwcsw).\n\n### Sequence Search using SGT - Spark\n\nSince `sgtembeddings` on the 1M data set is large it is recommended to use distributed computing to find similar proteins during a search.\n\n\n```python\nsgtembeddings_rdd = sc.parallelize(list(dict(sgtembeddings).items()))\nsgtembeddings_rdd = sgtembeddings_rdd.repartition(10000)\n```\n\n\n```python\n'''\nSearch proteins similar to a query protein.\nThe approach is to find the SGT embedding of the\nquery protein and find its similarity with the\nembeddings of the protein database.\n'''\n\nquery_protein = 'MSHVFPIVIDDNFLSPQDLVSAARSGCSLRLHTGVVDKIDRAHRFVLEIAGAEALHYGINTGFGSLCTTHIDPADLSTLQHNLLKSHACGVGPTVSEEVSRVVTLIKLLTFRTGNSGVSLSTVNRIIDLWNHGVVGAIAQKGTVGASGDLAPLAHLFLPLIGLGQVWHRGVLRPSREVMDELKLAPLTLQPKDGLCLTNGVQYLNAWGALSTVRAKRLVALADLCAAMSMMGFSAARSFIEAQIHQTSLHPERGHVALHLRTLTHGSNHADLPHCNPAMEDPYSFRCAPQVHGAARQVVGYLETVIGNECNSVSDNPLVFPDTRQILTCGNLHGQSTAFALDFAAIGITDLSNISERRTYQLLSGQNGLPGFLVAKPGLNSGFMVVQYTSAALLNENKVLSNPASVDTIPTCHLQEDHVSMGGTSAYKLQTILDNCETILAIELMTACQAIDMNPGLQLSERGRAIYEAVREEIPFVKEDHLMAGLISKSRDLCQHSTVIAQQLAEMQAQ'\n\n# Step 1. Compute sgt embedding for the query protein.\nquery_protein_sgt_embedding = sgt_.fit(list(query_protein))\n\n# Step 2. Broadcast the embedding to the cluster.\nquery_protein_sgt_embedding_broadcasted = sc.broadcast(list(query_protein_sgt_embedding))\n\n# Step 3. Compute similarity between each sequence embedding and the query.\nsimilarity = sgtembeddings_rdd.map(lambda x: (x[0], \n                                              np.dot(query_protein_sgt_embedding_broadcasted.value, \n                                                     x[1]))).collect()\n\n# Step 4. Show the most similar sequences with the query.\npd.DataFrame(similarity).sort_values(by=1, ascending=False)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cran2367/sgt", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sgt", "package_url": "https://pypi.org/project/sgt/", "platform": "", "project_url": "https://pypi.org/project/sgt/", "project_urls": {"Homepage": "https://github.com/cran2367/sgt"}, "release_url": "https://pypi.org/project/sgt/2.0.3/", "requires_dist": null, "requires_python": "", "summary": "Sequence Graph Transform (SGT) is a sequence embedding function. SGT extracts the short- and long-term sequence features and embeds them in a finite-dimensional feature space. The long and short term patterns embedded in SGT can be tuned without any increase in the computation.", "version": "2.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sequence Graph Transform (SGT) \u2014 Sequence Embedding for Clustering, Classification, and Search</h1>\n<h4>Maintained by: Chitta Ranjan</h4>\n<p>Email: <a href=\"mailto:cran2367@gmail.com\">cran2367@gmail.com</a>\n| LinkedIn: <a href=\"https://www.linkedin.com/in/chitta-ranjan-b0851911/\" rel=\"nofollow\">https://www.linkedin.com/in/chitta-ranjan-b0851911/</a></p>\n<p>The following will cover,</p>\n<ol>\n<li><a href=\"#sgt-class-def\" rel=\"nofollow\">SGT Class Definition</a></li>\n<li><a href=\"#install-sgt\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#installation-test-examples\" rel=\"nofollow\">Test Examples</a></li>\n<li><a href=\"#sequence-clustering\" rel=\"nofollow\">Sequence Clustering Example</a></li>\n<li><a href=\"#sequence-classification\" rel=\"nofollow\">Sequence Classification Example</a></li>\n<li><a href=\"#sequence-search\" rel=\"nofollow\">Sequence Search Example</a></li>\n<li><a href=\"#sgt-spark\" rel=\"nofollow\">SGT - Spark for Distributed Computing</a></li>\n</ol>\n<h2><a></a> SGT Class Definition</h2>\n<p>Sequence Graph Transform (SGT) is a sequence embedding function. SGT extracts the short- and long-term sequence features and embeds them in a finite-dimensional feature space. The long and short term patterns embedded in SGT can be tuned without any increase in the computation.\"</p>\n<pre><code>class SGT():\n    '''\n    Compute embedding of a single or a collection of discrete item \n    sequences. A discrete item sequence is a sequence made from a set\n    discrete elements, also known as alphabet set. For example,\n    suppose the alphabet set is the set of roman letters, \n    {A, B, ..., Z}. This set is made of discrete elements. Examples of\n    sequences from such a set are AABADDSA, UADSFJPFFFOIHOUGD, etc.\n    Such sequence datasets are commonly found in online industry,\n    for example, item purchase history, where the alphabet set is\n    the set of all product items. Sequence datasets are abundant in\n    bioinformatics as protein sequences.\n    Using the embeddings created here, classification and clustering\n    models can be built for sequence datasets.\n    Read more in https://arxiv.org/pdf/1608.03533.pdf\n    '''\n\n    Parameters\n    ----------\n    Input:\n\n    alphabets       Optional, except if mode is Spark. \n                    The set of alphabets that make up all \n                    the sequences in the dataset. If not passed, the\n                    alphabet set is automatically computed as the \n                    unique set of elements that make all the sequences.\n                    A list or 1d-array of the set of elements that make up the      \n                    sequences. For example, np.array([\"A\", \"B\", \"C\"].\n                    If mode is 'spark', the alphabets are necessary.\n\n    kappa           Tuning parameter, kappa &gt; 0, to change the extraction of \n                    long-term dependency. Higher the value the lesser\n                    the long-term dependency captured in the embedding.\n                    Typical values for kappa are 1, 5, 10.\n\n    lengthsensitive Default false. This is set to true if the embedding of\n                    should have the information of the length of the sequence.\n                    If set to false then the embedding of two sequences with\n                    similar pattern but different lengths will be the same.\n                    lengthsensitive = false is similar to length-normalization.\n\n    flatten         Default True. If True the SGT embedding is flattened and returned as\n                    a vector. Otherwise, it is returned as a matrix with the row and col\n                    names same as the alphabets. The matrix form is used for            \n                    interpretation purposes. Especially, to understand how the alphabets\n                    are \"related\". Otherwise, for applying machine learning or deep\n                    learning algorithms, the embedding vectors are required.\n\n    mode            Choices in {'default', 'multiprocessing'}. Note: 'multiprocessing' \n                    mode requires pandas==1.0.3+ and pandarallel libraries.\n\n    processors      Used if mode is 'multiprocessing'. By default, the \n                    number of processors used in multiprocessing is\n                    number of available - 1.\n    '''\n\n\n    Attributes\n    ----------\n    def fit(sequence)\n\n    Extract Sequence Graph Transform features using Algorithm-2 in https://arxiv.org/abs/1608.03533.\n    Input:\n    sequence        An array of discrete elements. For example,\n                    np.array([\"B\",\"B\",\"A\",\"C\",\"A\",\"C\",\"A\",\"A\",\"B\",\"A\"].\n\n    Output: \n    sgt embedding   sgt matrix or vector (depending on Flatten==False or True) of the sequence\n\n\n    --\n    def fit_transform(corpus)\n\n    Extract SGT embeddings for all sequences in a corpus. It finds\n    the alphabets encompassing all the sequences in the corpus, if not inputted. \n    However, if the mode is 'spark', then the alphabets list has to be\n    explicitly given in Sgt object declaration.\n\n    Input:\n    corpus          A list of sequences. Each sequence is a list of alphabets.\n\n    Output:\n    sgt embedding of all sequences in the corpus.\n\n\n    --\n    def transform(corpus)\n\n    Find SGT embeddings of a new data sample belonging to the same population\n    of the corpus that was fitted initially.\n</code></pre>\n<h2><a></a> Install SGT</h2>\n<p>Install SGT in Python by running,</p>\n<p><code>$ pip install sgt</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sgt</span>\n<span class=\"n\">sgt</span><span class=\"o\">.</span><span class=\"n\">__version__</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sgt</span> <span class=\"kn\">import</span> <span class=\"n\">SGT</span>\n</pre>\n<pre><code>'2.0.0'\n</code></pre>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"c1\"># Authors: Chitta Ranjan &lt;cran2367@gmail.com&gt;</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># License: BSD 3 clause</span>\n</pre>\n<h2><a></a> Installation Test Examples</h2>\n<p>In the following, there are a few test examples to verify the installation.</p>\n<pre><span class=\"c1\"># Learning a sgt embedding as a matrix with </span>\n<span class=\"c1\"># rows and columns as the sequence alphabets. </span>\n<span class=\"c1\"># This embedding shows the relationship between </span>\n<span class=\"c1\"># the alphabets. The higher the value the </span>\n<span class=\"c1\"># stronger the relationship.</span>\n\n<span class=\"n\">sgt</span> <span class=\"o\">=</span> <span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">flatten</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">])</span>\n<span class=\"n\">sgt</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">)</span>\n</pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>A</th>\n      <td>0.090616</td>\n      <td>0.131002</td>\n      <td>0.261849</td>\n    </tr>\n    <tr>\n      <th>B</th>\n      <td>0.086569</td>\n      <td>0.123042</td>\n      <td>0.052544</td>\n    </tr>\n    <tr>\n      <th>C</th>\n      <td>0.137142</td>\n      <td>0.028263</td>\n      <td>0.135335</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<pre><span class=\"c1\"># SGT embedding to a vector. The vector</span>\n<span class=\"c1\"># embedding is useful for directly applying</span>\n<span class=\"c1\"># a machine learning algorithm.</span>\n\n<span class=\"n\">sgt</span> <span class=\"o\">=</span> <span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">flatten</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">])</span>\n<span class=\"n\">sgt</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(A, A)    0.090616\n(A, B)    0.131002\n(A, C)    0.261849\n(B, A)    0.086569\n(B, B)    0.123042\n(B, C)    0.052544\n(C, A)    0.137142\n(C, B)    0.028263\n(C, C)    0.135335\ndtype: float64\n</code></pre>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">SGT embedding on a corpus of sequences.</span>\n<span class=\"sd\">Test the two processing modes within the</span>\n<span class=\"sd\">SGT class: 'default', 'multiprocessing'.</span>\n\n<span class=\"sd\">'''</span>\n\n<span class=\"c1\"># A sample corpus of two sequences.</span>\n<span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">]],</span> \n                       <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Z\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Z\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Z\"</span><span class=\"p\">,</span> <span class=\"s2\">\"D\"</span><span class=\"p\">]]],</span> \n                      <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'sequence'</span><span class=\"p\">])</span>\n<span class=\"n\">corpus</span>\n</pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>id</th>\n      <th>sequence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>[B, B, A, C, A, C, A, A, B, A]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>[C, Z, Z, Z, D]</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<pre><span class=\"c1\"># Learning the sgt embeddings as vector for</span>\n<span class=\"c1\"># all sequences in a corpus.</span>\n<span class=\"c1\"># mode: 'default'</span>\n<span class=\"n\">sgt</span> <span class=\"o\">=</span> <span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n          <span class=\"n\">flatten</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n          <span class=\"n\">lengthsensitive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> \n          <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">)</span>\n<span class=\"n\">sgt</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"p\">)</span>\n</pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>id</th>\n      <th>(A, A)</th>\n      <th>(A, B)</th>\n      <th>(A, C)</th>\n      <th>(A, D)</th>\n      <th>(A, Z)</th>\n      <th>(B, A)</th>\n      <th>(B, B)</th>\n      <th>(B, C)</th>\n      <th>(B, D)</th>\n      <th>...</th>\n      <th>(D, A)</th>\n      <th>(D, B)</th>\n      <th>(D, C)</th>\n      <th>(D, D)</th>\n      <th>(D, Z)</th>\n      <th>(Z, A)</th>\n      <th>(Z, B)</th>\n      <th>(Z, C)</th>\n      <th>(Z, D)</th>\n      <th>(Z, Z)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>0.090616</td>\n      <td>0.131002</td>\n      <td>0.261849</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.086569</td>\n      <td>0.123042</td>\n      <td>0.052544</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.184334</td>\n      <td>0.290365</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows \u00d7 26 columns</p>\n</div>\n<pre><span class=\"c1\"># Learning the sgt embeddings as vector for</span>\n<span class=\"c1\"># all sequences in a corpus.</span>\n<span class=\"c1\"># mode: 'multiprocessing'</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pandarallel</span>  <span class=\"c1\"># required library for multiprocessing</span>\n\n<span class=\"n\">sgt</span> <span class=\"o\">=</span> <span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n          <span class=\"n\">flatten</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n          <span class=\"n\">lengthsensitive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n          <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'multiprocessing'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sgt</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"p\">)</span>\n</pre>\n<pre><code>INFO: Pandarallel will run on 7 workers.\nINFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.\n</code></pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>id</th>\n      <th>(A, A)</th>\n      <th>(A, B)</th>\n      <th>(A, C)</th>\n      <th>(A, D)</th>\n      <th>(A, Z)</th>\n      <th>(B, A)</th>\n      <th>(B, B)</th>\n      <th>(B, C)</th>\n      <th>(B, D)</th>\n      <th>...</th>\n      <th>(D, A)</th>\n      <th>(D, B)</th>\n      <th>(D, C)</th>\n      <th>(D, D)</th>\n      <th>(D, Z)</th>\n      <th>(Z, A)</th>\n      <th>(Z, B)</th>\n      <th>(Z, C)</th>\n      <th>(Z, D)</th>\n      <th>(Z, Z)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>0.090616</td>\n      <td>0.131002</td>\n      <td>0.261849</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.086569</td>\n      <td>0.123042</td>\n      <td>0.052544</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.184334</td>\n      <td>0.290365</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows \u00d7 26 columns</p>\n</div>\n<h2>Load Libraries for Illustrative Examples</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sgt</span> <span class=\"kn\">import</span> <span class=\"n\">SGT</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">chain</span>\n<span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">product</span> <span class=\"k\">as</span> <span class=\"n\">iterproduct</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n\n<span class=\"c1\">########</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">LabelEncoder</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">imdb</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.models</span> <span class=\"kn\">import</span> <span class=\"n\">Sequential</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Dense</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.layers</span> <span class=\"kn\">import</span> <span class=\"n\">LSTM</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Dropout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Activation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Flatten</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Embedding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">sequence</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">KFold</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">StratifiedKFold</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sklearn.metrics</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.decomposition</span> <span class=\"kn\">import</span> <span class=\"n\">PCA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.cluster</span> <span class=\"kn\">import</span> <span class=\"n\">KMeans</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span>\n\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"c1\"># fix random seed for reproducibility</span>\n\n<span class=\"c1\"># from sgt import Sgt</span>\n</pre>\n<h2><a></a> Sequence Clustering</h2>\n<p>A form of unsupervised learning from sequences is clustering. For example, in</p>\n<ul>\n<li>\n<p>user weblogs sequences: clustering the weblogs segments users into groups with similar browsing behavior. This helps in targeted marketing, anomaly detection, and other web customizations.</p>\n</li>\n<li>\n<p>protein sequences: clustering proteins with similar structures help researchers study the commonalities between species. It also helps in faster search in some search algorithms.</p>\n</li>\n</ul>\n<p>In the following, clustering on a protein sequence dataset will be shown.</p>\n<h3>Protein Sequence Clustering</h3>\n<p>The data used here is taken from <a href=\"http://www.uniprot.org\" rel=\"nofollow\">www.uniprot.org</a>. This is a public database for proteins. The data contains the protein sequences and their functions.</p>\n<pre><span class=\"c1\"># Loading data</span>\n<span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'data/protein_classification.csv'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Data preprocessing</span>\n<span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">'Entry'</span><span class=\"p\">,</span><span class=\"s1\">'Sequence'</span><span class=\"p\">]]</span>\n<span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'sequence'</span><span class=\"p\">]</span>\n<span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"s1\">'sequence'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"s1\">'sequence'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n<span class=\"n\">corpus</span>\n</pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>id</th>\n      <th>sequence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M7MCX3</td>\n      <td>[M, E, I, E, K, T, N, R, M, N, A, L, F, E, F, ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>K6PL84</td>\n      <td>[M, E, I, E, K, N, Y, R, M, N, S, L, F, E, F, ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>R4W5V3</td>\n      <td>[M, E, I, E, K, T, N, R, M, N, A, L, F, E, F, ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T2A126</td>\n      <td>[M, E, I, E, K, T, N, R, M, N, A, L, F, E, F, ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>L0SHD5</td>\n      <td>[M, E, I, E, K, T, N, R, M, N, A, L, F, E, F, ...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2107</th>\n      <td>A0A081R612</td>\n      <td>[M, M, N, M, Q, N, M, M, R, Q, A, Q, K, L, Q, ...</td>\n    </tr>\n    <tr>\n      <th>2108</th>\n      <td>A0A081QQM2</td>\n      <td>[M, M, N, M, Q, N, M, M, R, Q, A, Q, K, L, Q, ...</td>\n    </tr>\n    <tr>\n      <th>2109</th>\n      <td>J1A517</td>\n      <td>[M, M, R, Q, A, Q, K, L, Q, K, Q, M, E, Q, S, ...</td>\n    </tr>\n    <tr>\n      <th>2110</th>\n      <td>F5U1T6</td>\n      <td>[M, M, N, M, Q, S, M, M, K, Q, A, Q, K, L, Q, ...</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>J3A2T7</td>\n      <td>[M, M, N, M, Q, N, M, M, K, Q, A, Q, K, L, Q, ...</td>\n    </tr>\n  </tbody>\n</table>\n<p>2112 rows \u00d7 2 columns</p>\n</div>\n<pre><span class=\"o\">%%</span><span class=\"n\">time</span>\n<span class=\"c1\"># Compute SGT embeddings</span>\n<span class=\"n\">sgt_</span> <span class=\"o\">=</span> <span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n           <span class=\"n\">lengthsensitive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> \n           <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'multiprocessing'</span><span class=\"p\">)</span>\n<span class=\"n\">sgtembedding_df</span> <span class=\"o\">=</span> <span class=\"n\">sgt_</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"p\">)</span>\n</pre>\n<pre><code>INFO: Pandarallel will run on 7 workers.\nINFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.\nCPU times: user 324 ms, sys: 68 ms, total: 392 ms\nWall time: 9.02 s\n</code></pre>\n<pre><span class=\"n\">sgtembedding_df</span>\n</pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>id</th>\n      <th>(A, A)</th>\n      <th>(A, C)</th>\n      <th>(A, D)</th>\n      <th>(A, E)</th>\n      <th>(A, F)</th>\n      <th>(A, G)</th>\n      <th>(A, H)</th>\n      <th>(A, I)</th>\n      <th>(A, K)</th>\n      <th>...</th>\n      <th>(Y, M)</th>\n      <th>(Y, N)</th>\n      <th>(Y, P)</th>\n      <th>(Y, Q)</th>\n      <th>(Y, R)</th>\n      <th>(Y, S)</th>\n      <th>(Y, T)</th>\n      <th>(Y, V)</th>\n      <th>(Y, W)</th>\n      <th>(Y, Y)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M7MCX3</td>\n      <td>0.020180</td>\n      <td>0.0</td>\n      <td>0.009635</td>\n      <td>0.013529</td>\n      <td>0.009360</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.002226</td>\n      <td>0.000379</td>\n      <td>...</td>\n      <td>0.009196</td>\n      <td>0.007964</td>\n      <td>0.036788</td>\n      <td>0.000195</td>\n      <td>0.001513</td>\n      <td>0.020665</td>\n      <td>0.000542</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.010419</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>K6PL84</td>\n      <td>0.001604</td>\n      <td>0.0</td>\n      <td>0.012637</td>\n      <td>0.006323</td>\n      <td>0.006224</td>\n      <td>0.004819</td>\n      <td>3.560677e-03</td>\n      <td>0.001124</td>\n      <td>0.012136</td>\n      <td>...</td>\n      <td>0.135335</td>\n      <td>0.006568</td>\n      <td>0.038901</td>\n      <td>0.011298</td>\n      <td>0.012578</td>\n      <td>0.009913</td>\n      <td>0.001079</td>\n      <td>0.000023</td>\n      <td>0.0</td>\n      <td>0.007728</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>R4W5V3</td>\n      <td>0.012448</td>\n      <td>0.0</td>\n      <td>0.008408</td>\n      <td>0.016363</td>\n      <td>0.027469</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.004249</td>\n      <td>0.013013</td>\n      <td>...</td>\n      <td>0.008114</td>\n      <td>0.007128</td>\n      <td>0.000000</td>\n      <td>0.000203</td>\n      <td>0.001757</td>\n      <td>0.022736</td>\n      <td>0.000249</td>\n      <td>0.012652</td>\n      <td>0.0</td>\n      <td>0.008533</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T2A126</td>\n      <td>0.010545</td>\n      <td>0.0</td>\n      <td>0.012560</td>\n      <td>0.014212</td>\n      <td>0.013728</td>\n      <td>0.000000</td>\n      <td>2.944887e-10</td>\n      <td>0.007223</td>\n      <td>0.000309</td>\n      <td>...</td>\n      <td>0.000325</td>\n      <td>0.009669</td>\n      <td>0.000000</td>\n      <td>0.003182</td>\n      <td>0.001904</td>\n      <td>0.015607</td>\n      <td>0.000577</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.008648</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>L0SHD5</td>\n      <td>0.020180</td>\n      <td>0.0</td>\n      <td>0.008628</td>\n      <td>0.015033</td>\n      <td>0.009360</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.002226</td>\n      <td>0.000379</td>\n      <td>...</td>\n      <td>0.009196</td>\n      <td>0.007964</td>\n      <td>0.036788</td>\n      <td>0.000195</td>\n      <td>0.001513</td>\n      <td>0.020665</td>\n      <td>0.000542</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.010419</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2107</th>\n      <td>A0A081R612</td>\n      <td>0.014805</td>\n      <td>0.0</td>\n      <td>0.004159</td>\n      <td>0.017541</td>\n      <td>0.012701</td>\n      <td>0.013099</td>\n      <td>0.000000e+00</td>\n      <td>0.017043</td>\n      <td>0.004732</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2108</th>\n      <td>A0A081QQM2</td>\n      <td>0.010774</td>\n      <td>0.0</td>\n      <td>0.004283</td>\n      <td>0.014732</td>\n      <td>0.014340</td>\n      <td>0.014846</td>\n      <td>0.000000e+00</td>\n      <td>0.016806</td>\n      <td>0.005406</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2109</th>\n      <td>J1A517</td>\n      <td>0.010774</td>\n      <td>0.0</td>\n      <td>0.004283</td>\n      <td>0.014732</td>\n      <td>0.014340</td>\n      <td>0.014846</td>\n      <td>0.000000e+00</td>\n      <td>0.014500</td>\n      <td>0.005406</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2110</th>\n      <td>F5U1T6</td>\n      <td>0.015209</td>\n      <td>0.0</td>\n      <td>0.005175</td>\n      <td>0.023888</td>\n      <td>0.011410</td>\n      <td>0.011510</td>\n      <td>0.000000e+00</td>\n      <td>0.021145</td>\n      <td>0.009280</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>J3A2T7</td>\n      <td>0.005240</td>\n      <td>0.0</td>\n      <td>0.012301</td>\n      <td>0.013178</td>\n      <td>0.014744</td>\n      <td>0.014705</td>\n      <td>0.000000e+00</td>\n      <td>0.000981</td>\n      <td>0.007957</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>2112 rows \u00d7 401 columns</p>\n</div>\n<pre><span class=\"c1\"># Set the id column as the dataframe index</span>\n<span class=\"n\">sgtembedding_df</span> <span class=\"o\">=</span> <span class=\"n\">sgtembedding_df</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n<span class=\"n\">sgtembedding_df</span>\n</pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>(A, A)</th>\n      <th>(A, C)</th>\n      <th>(A, D)</th>\n      <th>(A, E)</th>\n      <th>(A, F)</th>\n      <th>(A, G)</th>\n      <th>(A, H)</th>\n      <th>(A, I)</th>\n      <th>(A, K)</th>\n      <th>(A, L)</th>\n      <th>...</th>\n      <th>(Y, M)</th>\n      <th>(Y, N)</th>\n      <th>(Y, P)</th>\n      <th>(Y, Q)</th>\n      <th>(Y, R)</th>\n      <th>(Y, S)</th>\n      <th>(Y, T)</th>\n      <th>(Y, V)</th>\n      <th>(Y, W)</th>\n      <th>(Y, Y)</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>M7MCX3</th>\n      <td>0.020180</td>\n      <td>0.0</td>\n      <td>0.009635</td>\n      <td>0.013529</td>\n      <td>0.009360</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.002226</td>\n      <td>0.000379</td>\n      <td>0.021703</td>\n      <td>...</td>\n      <td>0.009196</td>\n      <td>0.007964</td>\n      <td>0.036788</td>\n      <td>0.000195</td>\n      <td>0.001513</td>\n      <td>0.020665</td>\n      <td>0.000542</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.010419</td>\n    </tr>\n    <tr>\n      <th>K6PL84</th>\n      <td>0.001604</td>\n      <td>0.0</td>\n      <td>0.012637</td>\n      <td>0.006323</td>\n      <td>0.006224</td>\n      <td>0.004819</td>\n      <td>3.560677e-03</td>\n      <td>0.001124</td>\n      <td>0.012136</td>\n      <td>0.018427</td>\n      <td>...</td>\n      <td>0.135335</td>\n      <td>0.006568</td>\n      <td>0.038901</td>\n      <td>0.011298</td>\n      <td>0.012578</td>\n      <td>0.009913</td>\n      <td>0.001079</td>\n      <td>0.000023</td>\n      <td>0.0</td>\n      <td>0.007728</td>\n    </tr>\n    <tr>\n      <th>R4W5V3</th>\n      <td>0.012448</td>\n      <td>0.0</td>\n      <td>0.008408</td>\n      <td>0.016363</td>\n      <td>0.027469</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.004249</td>\n      <td>0.013013</td>\n      <td>0.031118</td>\n      <td>...</td>\n      <td>0.008114</td>\n      <td>0.007128</td>\n      <td>0.000000</td>\n      <td>0.000203</td>\n      <td>0.001757</td>\n      <td>0.022736</td>\n      <td>0.000249</td>\n      <td>0.012652</td>\n      <td>0.0</td>\n      <td>0.008533</td>\n    </tr>\n    <tr>\n      <th>T2A126</th>\n      <td>0.010545</td>\n      <td>0.0</td>\n      <td>0.012560</td>\n      <td>0.014212</td>\n      <td>0.013728</td>\n      <td>0.000000</td>\n      <td>2.944887e-10</td>\n      <td>0.007223</td>\n      <td>0.000309</td>\n      <td>0.028531</td>\n      <td>...</td>\n      <td>0.000325</td>\n      <td>0.009669</td>\n      <td>0.000000</td>\n      <td>0.003182</td>\n      <td>0.001904</td>\n      <td>0.015607</td>\n      <td>0.000577</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.008648</td>\n    </tr>\n    <tr>\n      <th>L0SHD5</th>\n      <td>0.020180</td>\n      <td>0.0</td>\n      <td>0.008628</td>\n      <td>0.015033</td>\n      <td>0.009360</td>\n      <td>0.003205</td>\n      <td>2.944887e-10</td>\n      <td>0.002226</td>\n      <td>0.000379</td>\n      <td>0.021703</td>\n      <td>...</td>\n      <td>0.009196</td>\n      <td>0.007964</td>\n      <td>0.036788</td>\n      <td>0.000195</td>\n      <td>0.001513</td>\n      <td>0.020665</td>\n      <td>0.000542</td>\n      <td>0.007479</td>\n      <td>0.0</td>\n      <td>0.010419</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>A0A081R612</th>\n      <td>0.014805</td>\n      <td>0.0</td>\n      <td>0.004159</td>\n      <td>0.017541</td>\n      <td>0.012701</td>\n      <td>0.013099</td>\n      <td>0.000000e+00</td>\n      <td>0.017043</td>\n      <td>0.004732</td>\n      <td>0.014904</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>A0A081QQM2</th>\n      <td>0.010774</td>\n      <td>0.0</td>\n      <td>0.004283</td>\n      <td>0.014732</td>\n      <td>0.014340</td>\n      <td>0.014846</td>\n      <td>0.000000e+00</td>\n      <td>0.016806</td>\n      <td>0.005406</td>\n      <td>0.014083</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>J1A517</th>\n      <td>0.010774</td>\n      <td>0.0</td>\n      <td>0.004283</td>\n      <td>0.014732</td>\n      <td>0.014340</td>\n      <td>0.014846</td>\n      <td>0.000000e+00</td>\n      <td>0.014500</td>\n      <td>0.005406</td>\n      <td>0.014083</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>F5U1T6</th>\n      <td>0.015209</td>\n      <td>0.0</td>\n      <td>0.005175</td>\n      <td>0.023888</td>\n      <td>0.011410</td>\n      <td>0.011510</td>\n      <td>0.000000e+00</td>\n      <td>0.021145</td>\n      <td>0.009280</td>\n      <td>0.017466</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>J3A2T7</th>\n      <td>0.005240</td>\n      <td>0.0</td>\n      <td>0.012301</td>\n      <td>0.013178</td>\n      <td>0.014744</td>\n      <td>0.014705</td>\n      <td>0.000000e+00</td>\n      <td>0.000981</td>\n      <td>0.007957</td>\n      <td>0.017112</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>2112 rows \u00d7 400 columns</p>\n</div>\n<p>We perform PCA on the sequence embeddings and then do kmeans clustering.</p>\n<pre><span class=\"n\">pca</span> <span class=\"o\">=</span> <span class=\"n\">PCA</span><span class=\"p\">(</span><span class=\"n\">n_components</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">pca</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">sgtembedding_df</span><span class=\"p\">)</span>\n\n<span class=\"n\">X</span><span class=\"o\">=</span><span class=\"n\">pca</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">sgtembedding_df</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">pca</span><span class=\"o\">.</span><span class=\"n\">explained_variance_ratio_</span><span class=\"p\">))</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'x1'</span><span class=\"p\">,</span> <span class=\"s1\">'x2'</span><span class=\"p\">])</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<pre><code>0.6432744907364981\n</code></pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>x1</th>\n      <th>x2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.384913</td>\n      <td>-0.269873</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.022764</td>\n      <td>0.135995</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.177792</td>\n      <td>-0.172454</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.168074</td>\n      <td>-0.147334</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.383616</td>\n      <td>-0.271163</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<pre><span class=\"n\">kmeans</span> <span class=\"o\">=</span> <span class=\"n\">KMeans</span><span class=\"p\">(</span><span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">max_iter</span> <span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">kmeans</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">kmeans</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"n\">centroids</span> <span class=\"o\">=</span> <span class=\"n\">kmeans</span><span class=\"o\">.</span><span class=\"n\">cluster_centers_</span>\n\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">colmap</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">'g'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">}</span>\n<span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">colmap</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">labels</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'x1'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'x2'</span><span class=\"p\">],</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">colors</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">edgecolor</span><span class=\"o\">=</span><span class=\"n\">colors</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.collections.PathCollection at 0x14c5a77f0&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7aa281e1a2d4371071e4bbea3f00b8009365cd75/6f75747075745f32335f312e706e67\"></p>\n<h2><a></a> Sequence Classification using Deep Learning in TensorFlow</h2>\n<p>The protein data set used above is also labeled. The labels represent the protein functions. Similarly, there are other labeled sequence data sets. For example, DARPA shared an intrusion weblog data set. It contains weblog sequences with positive labels if the log represents a network intrusion.</p>\n<p>In such problems supervised learning is employed. Classification is a supervised learning we will demonstrate here.</p>\n<h3>Protein Sequence Classification</h3>\n<p>The data set is taken from <a href=\"https://www.uniprot.org\" rel=\"nofollow\">https://www.uniprot.org</a> . The protein sequences in the data set have one of the two functions,</p>\n<ul>\n<li>Binds to DNA and alters its conformation. May be involved in regulation of gene expression, nucleoid organization and DNA protection.</li>\n<li>Might take part in the signal recognition particle (SRP) pathway. This is inferred from the conservation of its genetic proximity to ftsY/ffh. May be a regulatory protein.</li>\n</ul>\n<p>There are a total of 2113 samples. The sequence lengths vary between 100-700.</p>\n<pre><span class=\"c1\"># Loading data</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'data/protein_classification.csv'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Data preprocessing</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'Function [CC]'</span><span class=\"p\">]</span>\n<span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">LabelEncoder</span><span class=\"p\">()</span>\n<span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">encoded_y</span> <span class=\"o\">=</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">'Entry'</span><span class=\"p\">,</span><span class=\"s1\">'Sequence'</span><span class=\"p\">]]</span>\n<span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'sequence'</span><span class=\"p\">]</span>\n<span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"s1\">'sequence'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"s1\">'sequence'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n</pre>\n<h4>Sequence embeddings</h4>\n<pre><span class=\"c1\"># Sequence embedding</span>\n<span class=\"n\">sgt_</span> <span class=\"o\">=</span> <span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n           <span class=\"n\">lengthsensitive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> \n           <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'multiprocessing'</span><span class=\"p\">)</span>\n<span class=\"n\">sgtembedding_df</span> <span class=\"o\">=</span> <span class=\"n\">sgt_</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"p\">)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">sgtembedding_df</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>INFO: Pandarallel will run on 7 workers.\nINFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.\n</code></pre>\n<p>We will perform a 10-fold cross-validation to measure the performance of the classification model.</p>\n<pre><span class=\"n\">kfold</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">X</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">encoded_y</span>\n\n<span class=\"n\">random_state</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">test_F1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">kfold</span><span class=\"p\">)</span>\n<span class=\"n\">skf</span> <span class=\"o\">=</span> <span class=\"n\">KFold</span><span class=\"p\">(</span><span class=\"n\">n_splits</span> <span class=\"o\">=</span> <span class=\"n\">kfold</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">random_state</span> <span class=\"o\">=</span> <span class=\"n\">random_state</span><span class=\"p\">)</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n\n<span class=\"k\">for</span> <span class=\"n\">train_index</span><span class=\"p\">,</span> <span class=\"n\">test_index</span> <span class=\"ow\">in</span> <span class=\"n\">skf</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">train_index</span><span class=\"p\">],</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">test_index</span><span class=\"p\">]</span>\n    <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">train_index</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">test_index</span><span class=\"p\">]</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Sequential</span><span class=\"p\">()</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">input_shape</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],)))</span> \n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Activation</span><span class=\"p\">(</span><span class=\"s1\">'relu'</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Activation</span><span class=\"p\">(</span><span class=\"s1\">'relu'</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Activation</span><span class=\"p\">(</span><span class=\"s1\">'sigmoid'</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">'binary_crossentropy'</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s1\">'adam'</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'accuracy'</span><span class=\"p\">])</span>\n\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span> <span class=\"p\">,</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"n\">epochs</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">y_train_pred</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n    <span class=\"n\">test_F1</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">f1_score</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n    <span class=\"n\">k</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s1\">'Average f1 score'</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">test_F1</span><span class=\"p\">))</span>\n</pre>\n<pre><code>Average f1 score 1.0\n</code></pre>\n<h3>Weblog Classification for Intrusion Detection</h3>\n<p>This data sample is taken from <a href=\"https://www.ll.mit.edu/r-d/datasets/1998-darpa-intrusion-detection-evaluation-dataset\" rel=\"nofollow\">https://www.ll.mit.edu/r-d/datasets/1998-darpa-intrusion-detection-evaluation-dataset</a>.\nThis is a network intrusion data containing audit logs and any attack as a positive label. Since, network intrusion is a rare event, the data is unbalanced. Here we will,</p>\n<ul>\n<li>build a sequence classification model to predict a network intrusion.</li>\n</ul>\n<p>Each sequence contains in the data is a series of activity, for example, {login, password}. The <em>alphabets</em> in the input data sequences are already encoded into integers. The original sequences data file is also present in the <code>/data</code> directory.</p>\n<pre><span class=\"c1\"># Loading data</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'data/darpa_data.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">columns</span>\n</pre>\n<pre><code>Index(['timeduration', 'seqlen', 'seq', 'class'], dtype='object')\n</code></pre>\n<pre><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">index</span>\n</pre>\n<pre><span class=\"c1\"># Data preprocessing</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'class'</span><span class=\"p\">]</span>\n<span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">LabelEncoder</span><span class=\"p\">()</span>\n<span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">encoded_y</span> <span class=\"o\">=</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span><span class=\"s1\">'seq'</span><span class=\"p\">]]</span>\n<span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'sequence'</span><span class=\"p\">]</span>\n<span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"s1\">'sequence'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"s1\">'sequence'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n</pre>\n<h4>Sequence embeddings</h4>\n<p>In this data, the sequence embeddings should be <strong>length-sensitive</strong>.</p>\n<p>The lengths are important here because sequences with similar patterns but different lengths can have different labels. Consider a simple example of two sessions: <code>{login, pswd, login, pswd,...}</code> and <code>{login, pswd,...(repeated several times)..., login, pswd}</code>.</p>\n<p>While the first session can be a regular user mistyping the password once, the other session is possibly an attack to guess the password. Thus, the sequence lengths are as important as the patterns.</p>\n<p>Therefore, <code>lengthsensitive=True</code> is used here.</p>\n<pre><span class=\"c1\"># Sequence embedding</span>\n<span class=\"n\">sgt_</span> <span class=\"o\">=</span> <span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> \n           <span class=\"n\">lengthsensitive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n           <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'multiprocessing'</span><span class=\"p\">)</span>\n<span class=\"n\">sgtembedding_df</span> <span class=\"o\">=</span> <span class=\"n\">sgt_</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"p\">)</span>\n<span class=\"n\">sgtembedding_df</span> <span class=\"o\">=</span> <span class=\"n\">sgtembedding_df</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n<span class=\"n\">sgtembedding_df</span>\n</pre>\n<pre><code>INFO: Pandarallel will run on 7 workers.\nINFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.\n</code></pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>(0, 0)</th>\n      <th>(0, 1)</th>\n      <th>(0, 2)</th>\n      <th>(0, 3)</th>\n      <th>(0, 4)</th>\n      <th>(0, 5)</th>\n      <th>(0, 6)</th>\n      <th>(0, 7)</th>\n      <th>(0, 8)</th>\n      <th>(0, 9)</th>\n      <th>...</th>\n      <th>(~, 1)</th>\n      <th>(~, 2)</th>\n      <th>(~, 3)</th>\n      <th>(~, 4)</th>\n      <th>(~, 5)</th>\n      <th>(~, 6)</th>\n      <th>(~, 7)</th>\n      <th>(~, 8)</th>\n      <th>(~, 9)</th>\n      <th>(~, ~)</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0.0</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.485034</td>\n      <td>0.486999</td>\n      <td>0.485802</td>\n      <td>0.483097</td>\n      <td>0.483956</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.178609</td>\n    </tr>\n    <tr>\n      <th>1.0</th>\n      <td>0.000000</td>\n      <td>0.025622</td>\n      <td>0.228156</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>1.310714e-09</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.447620</td>\n      <td>0.452097</td>\n      <td>0.464568</td>\n      <td>0.367296</td>\n      <td>0.525141</td>\n      <td>0.455018</td>\n      <td>0.374364</td>\n      <td>0.414081</td>\n      <td>0.549981</td>\n      <td>0.172479</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.525605</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.193359</td>\n      <td>0.071469</td>\n    </tr>\n    <tr>\n      <th>3.0</th>\n      <td>0.077999</td>\n      <td>0.208974</td>\n      <td>0.230338</td>\n      <td>1.830519e-01</td>\n      <td>1.200926e-17</td>\n      <td>1.696880e-01</td>\n      <td>0.093646</td>\n      <td>7.985870e-02</td>\n      <td>2.896813e-05</td>\n      <td>3.701710e-05</td>\n      <td>...</td>\n      <td>0.474072</td>\n      <td>0.468353</td>\n      <td>0.463594</td>\n      <td>0.177507</td>\n      <td>0.551270</td>\n      <td>0.418652</td>\n      <td>0.309652</td>\n      <td>0.384657</td>\n      <td>0.378225</td>\n      <td>0.170362</td>\n    </tr>\n    <tr>\n      <th>4.0</th>\n      <td>0.000000</td>\n      <td>0.023695</td>\n      <td>0.217819</td>\n      <td>2.188276e-33</td>\n      <td>0.000000e+00</td>\n      <td>6.075992e-11</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>5.681668e-39</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.464120</td>\n      <td>0.468229</td>\n      <td>0.452170</td>\n      <td>0.000000</td>\n      <td>0.501242</td>\n      <td>0.000000</td>\n      <td>0.300534</td>\n      <td>0.161961</td>\n      <td>0.000000</td>\n      <td>0.167082</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>106.0</th>\n      <td>0.000000</td>\n      <td>0.024495</td>\n      <td>0.219929</td>\n      <td>2.035190e-17</td>\n      <td>1.073271e-18</td>\n      <td>5.656994e-11</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>5.047380e-29</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.502213</td>\n      <td>0.544343</td>\n      <td>0.477281</td>\n      <td>0.175901</td>\n      <td>0.461103</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.162796</td>\n      <td>0.000000</td>\n      <td>0.167687</td>\n    </tr>\n    <tr>\n      <th>107.0</th>\n      <td>0.110422</td>\n      <td>0.227478</td>\n      <td>0.217549</td>\n      <td>1.723963e-01</td>\n      <td>1.033292e-14</td>\n      <td>3.896725e-07</td>\n      <td>0.083685</td>\n      <td>2.940589e-08</td>\n      <td>8.864072e-02</td>\n      <td>4.813990e-29</td>\n      <td>...</td>\n      <td>0.490398</td>\n      <td>0.522016</td>\n      <td>0.466808</td>\n      <td>0.470603</td>\n      <td>0.479795</td>\n      <td>0.480057</td>\n      <td>0.194888</td>\n      <td>0.172397</td>\n      <td>0.164873</td>\n      <td>0.172271</td>\n    </tr>\n    <tr>\n      <th>108.0</th>\n      <td>0.005646</td>\n      <td>0.202424</td>\n      <td>0.196786</td>\n      <td>2.281242e-01</td>\n      <td>1.133936e-01</td>\n      <td>1.862098e-01</td>\n      <td>0.000000</td>\n      <td>1.212869e-01</td>\n      <td>9.180520e-08</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.432834</td>\n      <td>0.434953</td>\n      <td>0.439615</td>\n      <td>0.390864</td>\n      <td>0.481764</td>\n      <td>0.600875</td>\n      <td>0.166766</td>\n      <td>0.165368</td>\n      <td>0.000000</td>\n      <td>0.171729</td>\n    </tr>\n    <tr>\n      <th>109.0</th>\n      <td>0.000000</td>\n      <td>0.025616</td>\n      <td>0.238176</td>\n      <td>3.889176e-55</td>\n      <td>1.332427e-60</td>\n      <td>1.408003e-09</td>\n      <td>0.000000</td>\n      <td>9.845377e-60</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.421318</td>\n      <td>0.439985</td>\n      <td>0.467953</td>\n      <td>0.440951</td>\n      <td>0.527165</td>\n      <td>0.864717</td>\n      <td>0.407155</td>\n      <td>0.399335</td>\n      <td>0.251304</td>\n      <td>0.171885</td>\n    </tr>\n    <tr>\n      <th>110.0</th>\n      <td>0.000000</td>\n      <td>0.022868</td>\n      <td>0.203513</td>\n      <td>9.273472e-64</td>\n      <td>0.000000e+00</td>\n      <td>1.240870e-09</td>\n      <td>0.000000</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>...</td>\n      <td>0.478090</td>\n      <td>0.454871</td>\n      <td>0.459109</td>\n      <td>0.000000</td>\n      <td>0.490534</td>\n      <td>0.370357</td>\n      <td>0.000000</td>\n      <td>0.162997</td>\n      <td>0.000000</td>\n      <td>0.162089</td>\n    </tr>\n  </tbody>\n</table>\n<p>111 rows \u00d7 121 columns</p>\n</div>\n<h4>Applying PCA on the embeddings</h4>\n<p>The embeddings are sparse and high-dimensional. PCA is, therefore, applied for dimension reduction.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sklearn.decomposition</span> <span class=\"kn\">import</span> <span class=\"n\">PCA</span>\n<span class=\"n\">pca</span> <span class=\"o\">=</span> <span class=\"n\">PCA</span><span class=\"p\">(</span><span class=\"n\">n_components</span><span class=\"o\">=</span><span class=\"mi\">35</span><span class=\"p\">)</span>\n<span class=\"n\">pca</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">sgtembedding_df</span><span class=\"p\">)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">pca</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">sgtembedding_df</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">pca</span><span class=\"o\">.</span><span class=\"n\">explained_variance_ratio_</span><span class=\"p\">))</span>\n</pre>\n<pre><code>0.9962446146783123\n</code></pre>\n<h4>Building a Multi-Layer Perceptron Classifier</h4>\n<p>The PCA transforms of the embeddings are used directly as inputs to an MLP classifier.</p>\n<pre><span class=\"n\">kfold</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">random_state</span> <span class=\"o\">=</span> <span class=\"mi\">11</span>\n\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">X</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">encoded_y</span>\n\n<span class=\"n\">test_F1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">kfold</span><span class=\"p\">)</span>\n<span class=\"n\">time_k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">kfold</span><span class=\"p\">)</span>\n<span class=\"n\">skf</span> <span class=\"o\">=</span> <span class=\"n\">StratifiedKFold</span><span class=\"p\">(</span><span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"n\">kfold</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"n\">random_state</span><span class=\"p\">)</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n\n<span class=\"c1\"># class_weight = {0 : 1., 1: 1.,}  # The weights can be changed and made inversely proportional to the class size to improve the accuracy.</span>\n<span class=\"n\">class_weight</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span> <span class=\"p\">:</span> <span class=\"mf\">0.12</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mf\">0.88</span><span class=\"p\">,}</span>\n\n<span class=\"k\">for</span> <span class=\"n\">train_index</span><span class=\"p\">,</span> <span class=\"n\">test_index</span> <span class=\"ow\">in</span> <span class=\"n\">skf</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">train_index</span><span class=\"p\">],</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">test_index</span><span class=\"p\">]</span>\n    <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">train_index</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">test_index</span><span class=\"p\">]</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Sequential</span><span class=\"p\">()</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">input_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],)))</span> \n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Activation</span><span class=\"p\">(</span><span class=\"s1\">'relu'</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Activation</span><span class=\"p\">(</span><span class=\"s1\">'sigmoid'</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">()</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">'binary_crossentropy'</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s1\">'adam'</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'accuracy'</span><span class=\"p\">])</span>\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span> <span class=\"p\">,</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"n\">epochs</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">class_weight</span><span class=\"o\">=</span><span class=\"n\">class_weight</span><span class=\"p\">)</span>\n    <span class=\"n\">end_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">time_k</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">end_time</span><span class=\"o\">-</span><span class=\"n\">start_time</span>\n\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">y_train_pred</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">test_F1</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">f1_score</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n    <span class=\"n\">k</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</pre>\n<pre><code>Model: \"sequential_10\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ndense_30 (Dense)             (None, 128)               4608      \n_________________________________________________________________\nactivation_30 (Activation)   (None, 128)               0         \n_________________________________________________________________\ndropout_20 (Dropout)         (None, 128)               0         \n_________________________________________________________________\ndense_31 (Dense)             (None, 1)                 129       \n_________________________________________________________________\nactivation_31 (Activation)   (None, 1)                 0         \n=================================================================\nTotal params: 4,737\nTrainable params: 4,737\nNon-trainable params: 0\n_________________________________________________________________\nWARNING:tensorflow:sample_weight modes were coerced from\n  ...\n    to  \n  ['...']\nTrain on 74 samples\nEpoch 1/300\n74/74 [==============================] - 0s 7ms/sample - loss: 0.1487 - accuracy: 0.5270\nEpoch 2/300\n74/74 [==============================] - 0s 120us/sample - loss: 0.1421 - accuracy: 0.5000\n...\n74/74 [==============================] - 0s 118us/sample - loss: 0.0299 - accuracy: 0.8784\nEpoch 300/300\n74/74 [==============================] - 0s 133us/sample - loss: 0.0296 - accuracy: 0.8649\n</code></pre>\n<pre><span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s1\">'Average f1 score'</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">test_F1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s1\">'Average Run time'</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">time_k</span><span class=\"p\">))</span>\n</pre>\n<pre><code>Average f1 score 0.6341880341880342\nAverage Run time 3.880180994669596\n</code></pre>\n<h4>Building an LSTM Classifier on the sequences for comparison</h4>\n<p>We built an LSTM Classifier on the sequences to compare the accuracy.</p>\n<pre><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'seq'</span><span class=\"p\">]</span>\n<span class=\"n\">encoded_X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">),),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)):</span>\n    <span class=\"n\">encoded_X</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\"~\"</span><span class=\"p\">)</span>\n<span class=\"n\">X</span>\n</pre>\n<pre><code>0      1~2~3~3~3~3~3~3~1~4~5~1~2~3~3~3~3~3~3~1~4~5~1~...\n1      6~5~5~6~5~6~5~2~5~5~5~5~5~5~5~5~5~5~5~5~5~5~5~...\n2      19~19~19~19~19~19~19~19~19~19~19~19~19~19~19~1...\n3      6~5~5~6~5~6~5~2~5~5~5~5~5~5~5~5~5~5~5~5~5~5~5~...\n4      5~5~17~5~5~5~5~5~10~2~11~2~11~11~12~11~11~5~2~...\n                             ...                        \n106    10~2~11~2~11~11~12~11~11~5~2~11~5~2~5~2~3~14~3...\n107    5~5~2~5~17~6~5~6~5~5~2~6~17~3~2~2~3~5~2~3~5~6~...\n108    6~5~6~5~5~6~5~5~6~6~6~6~6~6~6~6~6~6~6~6~6~6~6~...\n109    6~5~5~6~5~6~5~2~38~2~3~5~22~39~5~5~5~5~5~5~5~5...\n110    5~6~5~5~10~2~11~2~11~11~12~11~5~2~11~11~12~11~...\nName: seq, Length: 111, dtype: object\n</code></pre>\n<pre><span class=\"n\">max_seq_length</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'seqlen'</span><span class=\"p\">])</span>\n<span class=\"n\">encoded_X</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">preprocessing</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"o\">.</span><span class=\"n\">pad_sequences</span><span class=\"p\">(</span><span class=\"n\">encoded_X</span><span class=\"p\">,</span> <span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"n\">max_seq_length</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">kfold</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">random_state</span> <span class=\"o\">=</span> <span class=\"mi\">11</span>\n\n<span class=\"n\">test_F1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">kfold</span><span class=\"p\">)</span>\n<span class=\"n\">time_k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">kfold</span><span class=\"p\">)</span>\n\n<span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n<span class=\"n\">skf</span> <span class=\"o\">=</span> <span class=\"n\">StratifiedKFold</span><span class=\"p\">(</span><span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"n\">kfold</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"n\">random_state</span><span class=\"p\">)</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">for</span> <span class=\"n\">train_index</span><span class=\"p\">,</span> <span class=\"n\">test_index</span> <span class=\"ow\">in</span> <span class=\"n\">skf</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">encoded_X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span> <span class=\"o\">=</span> <span class=\"n\">encoded_X</span><span class=\"p\">[</span><span class=\"n\">train_index</span><span class=\"p\">],</span> <span class=\"n\">encoded_X</span><span class=\"p\">[</span><span class=\"n\">test_index</span><span class=\"p\">]</span>\n    <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">train_index</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">test_index</span><span class=\"p\">]</span>\n\n    <span class=\"n\">embedding_vecor_length</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n    <span class=\"n\">top_words</span><span class=\"o\">=</span><span class=\"mi\">50</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Sequential</span><span class=\"p\">()</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Embedding</span><span class=\"p\">(</span><span class=\"n\">top_words</span><span class=\"p\">,</span> <span class=\"n\">embedding_vecor_length</span><span class=\"p\">,</span> <span class=\"n\">input_length</span><span class=\"o\">=</span><span class=\"n\">max_seq_length</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LSTM</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Activation</span><span class=\"p\">(</span><span class=\"s1\">'sigmoid'</span><span class=\"p\">))</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">'binary_crossentropy'</span><span class=\"p\">,</span> <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s1\">'adam'</span><span class=\"p\">,</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'accuracy'</span><span class=\"p\">])</span>\n\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">()</span>\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"n\">epochs</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">end_time</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">time_k</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">end_time</span><span class=\"o\">-</span><span class=\"n\">start_time</span>\n\n    <span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">y_train_pred</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">test_F1</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">f1_score</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">)</span>\n    <span class=\"n\">k</span><span class=\"o\">+=</span><span class=\"mi\">1</span>\n</pre>\n<pre><code>Model: \"sequential_13\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nembedding (Embedding)        (None, 1773, 32)          1600      \n_________________________________________________________________\nlstm (LSTM)                  (None, 32)                8320      \n_________________________________________________________________\ndense_36 (Dense)             (None, 1)                 33        \n_________________________________________________________________\nactivation_36 (Activation)   (None, 1)                 0         \n=================================================================\nTotal params: 9,953\nTrainable params: 9,953\nNon-trainable params: 0\n_________________________________________________________________\nTrain on 74 samples\nEpoch 1/50\n74/74 [==============================] - 5s 72ms/sample - loss: 0.6894 - accuracy: 0.5676\nEpoch 2/50\n74/74 [==============================] - 4s 48ms/sample - loss: 0.6590 - accuracy: 0.8784\n...\nEpoch 50/50\n74/74 [==============================] - 4s 51ms/sample - loss: 0.1596 - accuracy: 0.9324\n</code></pre>\n<pre><span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s1\">'Average f1 score'</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">test_F1</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s1\">'Average Run time'</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">time_k</span><span class=\"p\">))</span>\n</pre>\n<pre><code>Average f1 score 0.36111111111111116\nAverage Run time 192.46954011917114\n</code></pre>\n<p>We find that the LSTM classifier gives a significantly lower F1 score. This may be improved by changing the model. However, we find that the SGT embedding could work with a small and unbalanced data without the need of a complicated classifier model.</p>\n<p>LSTM models typically require more data for training and also has significantly more computation time. The LSTM model above took 425.6 secs while the MLP model took just 9.1 secs.</p>\n<h2><a></a> Sequence Search</h2>\n<p>Sequence data sets are generally large. For example, sequences of listening history in music streaming services, such as Pandora, for more than 70M users are huge. In protein data bases there could be even larger size. For instance, the Uniprot data repository has more than 177M sequences.</p>\n<p>Searching for similar sequences in such large data bases is challenging. SGT embedding provides a simple solution. In the following it will be shown on a protein data set that SGT embedding can be used to compute similarity between a query sequence and the sequence corpus using a dot product. The sequences with the highest dot product are returned as the most similar sequence to the query.</p>\n<h3>Protein Sequence Search</h3>\n<p>In the following, a sample of 10k protein sequences are used for illustration. The data is taken from <a href=\"https://www.uniprot.org\" rel=\"nofollow\">https://www.uniprot.org</a> .</p>\n<pre><span class=\"c1\"># Loading data</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'data/protein-uniprot-reviewed-Ano-10k.tab'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Data preprocessing</span>\n<span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">'Entry'</span><span class=\"p\">,</span><span class=\"s1\">'Sequence'</span><span class=\"p\">]]</span>\n<span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'sequence'</span><span class=\"p\">]</span>\n<span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"s1\">'sequence'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"s1\">'sequence'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n<span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>id</th>\n      <th>sequence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>I2WKR6</td>\n      <td>[M, V, H, K, S, D, S, D, E, L, A, A, L, R, A, ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A0A2A6M8K9</td>\n      <td>[M, Q, E, S, L, V, V, R, R, E, T, H, I, A, A, ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A0A3G5KEC3</td>\n      <td>[M, A, S, G, A, Y, S, K, Y, L, F, Q, I, I, G, ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<pre><span class=\"c1\"># Protein sequence alphabets</span>\n<span class=\"n\">alphabets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">,</span> <span class=\"s1\">'G'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">,</span> <span class=\"s1\">'I'</span><span class=\"p\">,</span> <span class=\"s1\">'K'</span><span class=\"p\">,</span> \n             <span class=\"s1\">'L'</span><span class=\"p\">,</span> <span class=\"s1\">'M'</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'P'</span><span class=\"p\">,</span> <span class=\"s1\">'Q'</span><span class=\"p\">,</span> <span class=\"s1\">'R'</span><span class=\"p\">,</span> <span class=\"s1\">'S'</span><span class=\"p\">,</span> <span class=\"s1\">'T'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">,</span> \n             <span class=\"s1\">'W'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'Y'</span><span class=\"p\">,</span> <span class=\"s1\">'U'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>  <span class=\"c1\"># List of amino acids</span>\n\n<span class=\"c1\"># Alphabets are known and inputted </span>\n<span class=\"c1\"># as arguments for faster computation</span>\n<span class=\"n\">sgt_</span> <span class=\"o\">=</span> <span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">alphabets</span><span class=\"o\">=</span><span class=\"n\">alphabets</span><span class=\"p\">,</span> \n           <span class=\"n\">lengthsensitive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n           <span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n           <span class=\"n\">flatten</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n           <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'multiprocessing'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sgtembedding_df</span> <span class=\"o\">=</span> <span class=\"n\">sgt_</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"p\">)</span>\n<span class=\"n\">sgtembedding_df</span> <span class=\"o\">=</span> <span class=\"n\">sgtembedding_df</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>INFO: Pandarallel will run on 7 workers.\nINFO: Pandarallel will use standard multiprocessing data transfer (pipe) to transfer data between the main process and workers.\n</code></pre>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">Search proteins similar to a query protein.</span>\n<span class=\"sd\">The approach is to find the SGT embedding of the</span>\n<span class=\"sd\">query protein and find its similarity with the</span>\n<span class=\"sd\">embeddings of the protein database.</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"n\">query_protein</span> <span class=\"o\">=</span> <span class=\"s1\">'MSHVFPIVIDDNFLSPQDLVSAARSGCSLRLHTGVVDKIDRAHRFVLEIAGAEALHYGINTGFGSLCTTHIDPADLSTLQHNLLKSHACGVGPTVSEEVSRVVTLIKLLTFRTGNSGVSLSTVNRIIDLWNHGVVGAIAQKGTVGASGDLAPLAHLFLPLIGLGQVWHRGVLRPSREVMDELKLAPLTLQPKDGLCLTNGVQYLNAWGALSTVRAKRLVALADLCAAMSMMGFSAARSFIEAQIHQTSLHPERGHVALHLRTLTHGSNHADLPHCNPAMEDPYSFRCAPQVHGAARQVVGYLETVIGNECNSVSDNPLVFPDTRQILTCGNLHGQSTAFALDFAAIGITDLSNISERRTYQLLSGQNGLPGFLVAKPGLNSGFMVVQYTSAALLNENKVLSNPASVDTIPTCHLQEDHVSMGGTSAYKLQTILDNCETILAIELMTACQAIDMNPGLQLSERGRAIYEAVREEIPFVKEDHLMAGLISKSRDLCQHSTVIAQQLAEMQAQ'</span>\n\n<span class=\"c1\"># Step 1. Compute sgt embedding for the query protein.</span>\n<span class=\"n\">query_protein_sgt_embedding</span> <span class=\"o\">=</span> <span class=\"n\">sgt_</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">query_protein</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Step 2. Compute the dot product of query embedding </span>\n<span class=\"c1\"># with the protein embedding database.</span>\n<span class=\"n\">similarity</span> <span class=\"o\">=</span> <span class=\"n\">sgtembedding_df</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">query_protein_sgt_embedding</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Step 3. Return the top k protein names based on similarity.</span>\n<span class=\"n\">similarity</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<pre><code>id\nK0ZGN5        2773.749663\nA0A0Y1CPH7    1617.451379\nA0A5R8LCJ1    1566.833152\nA0A290WY40    1448.772820\nA0A073K6N6    1392.267250\n                 ...     \nA0A1S7UBK4     160.074989\nA0A2S7T1R9     156.580584\nA0A0E0UQV6     155.834932\nA0A1Y5Y0S0     148.862049\nB0NRP3         117.656497\nLength: 10063, dtype: float64\n</code></pre>\n<h2><a></a> SGT - Spark for Distributed Computing</h2>\n<p>As mentioned in the previous section, sequence data sets can be large. SGT complexity is linear with the number of sequences in a data set. Still if the data size is large the computation becomes high. For example, for a set of 1M protein sequences the default SGT mode takes over 24 hours.</p>\n<p>Using distributed computing with Spark the runtime can be significantly reduced. For instance, SGT-Spark on the same 1M protein data set took less than 29 minutes.</p>\n<p>In the following, Spark implementation for SGT is shown. First, it is applied on a smaller 10k data set for comparison. Then it is applied on 1M data set without any syntactical change.</p>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">Load the data and remove header.</span>\n<span class=\"sd\">'''</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">textFile</span><span class=\"p\">(</span><span class=\"s1\">'data/protein-uniprot-reviewed-Ano-10k.tab'</span><span class=\"p\">)</span>\n\n<span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span> <span class=\"c1\">#extract header</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">row</span> <span class=\"o\">!=</span> <span class=\"n\">header</span><span class=\"p\">)</span>   <span class=\"c1\">#filter out header</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># See one sample</span>\n</pre>\n<div><span class=\"ansired\">Out[</span><span class=\"ansired\">3</span><span class=\"ansired\">]: </span>['I2WKR6\\tI2WKR6_ECOLX\\tunreviewed\\tType III restriction enzyme, res subunit (EC 3.1.21.5)\\tEC90111_4246\\tEscherichia coli 9.0111\\t786\\tMVHKSDSDELAALRAENVRLVSLLEAHGIEWRRKPQSPVPRVSVLSTNEKVALFRRLFRGRDDVWALRWESKTSGKSGYSPACANEWQLGICGKPRIKCGDCAHRQLIPVSDLVIYHHLAGTHTAGMYPLLEDDSCYFLAVDFDEAEWQKDASAFMRSCDELGVPAALEISRSRQGAHVWIFFASRVSAREARRLGTAIISYTCSRTRQLRLGSYDRLFPNQDTMPKGGFGNLIALPLQKRPRELGGSVFVDMNLQPYPDQWAFLVSVIPMNVQDIEPTILRATGSIHPLDVNFINEEDLGTPWEEKKSSGNRLNIAVTEPLIITLANQIYFEKAQLPQALVNRLIRLAAFPNPEFYKAQAMRMSVWNKPRVIGCAENYPQHIALPRGCLDSALSFLRYNNIAAELIDKRFAGTECNAVFTGNLRAEQEEAVSALLRYDTGVLCAPTAFGKTVTAAAVIARRKVNTLILVHRTELLKQWQERLAVFLQVGDSIGIIGGGKHKPCGNIDIAVVQSISRHGEVEPLVRNYGQIIVDECHHIGAVSFSAILKETNARYLLGLTATPIRRDGLHPIIFMYCGAIRHTAARPKESLHNLEVLTRSRFTSGHLPSDARIQDIFREIALDHDRTVAIAEEAMKAFGQGRKVLVLTERTDHLDDIASVMNTLKLSPFVLHSRLSKKKRTMLISGLNALPPDSPRILLSTGRLIGEGFDHPPLDTLILAMPVSWKGTLQQYAGRLHREHTGKSDVRIIDFVDTAYPVLLRMWDKRQRGYKAMGYRIVADGEGLSF']</div>\n<pre><span class=\"c1\"># Repartition for increasing the parallel processes</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">repartition</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"k\">def</span> <span class=\"nf\">preprocessing</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    Original data are lines where each line has \\t</span>\n<span class=\"sd\">    separated values. We are interested in preserving</span>\n<span class=\"sd\">    the first value (entry id), tmp[0], and the last value</span>\n<span class=\"sd\">    (the sequence), tmp[-1].</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">sequence</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">sequence</span><span class=\"p\">)</span>\n\n<span class=\"n\">processeddata</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"n\">preprocessing</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">))</span>\n<span class=\"n\">processeddata</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># See one sample</span>\n</pre>\n<div><span class=\"ansired\">Out[</span><span class=\"ansired\">5</span><span class=\"ansired\">]: </span>[('A0A2E9WIJ1',\n  ['M',\n   'Y',\n   'I',\n   'F',\n   'L',\n   'T',\n   'L',\n\t...   \n   'A',\n   'K',\n   'L',\n   'D',\n   'K',\n   'N',\n   'D'])]</div>\n<pre><span class=\"c1\"># Protein sequence alphabets</span>\n<span class=\"n\">alphabets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">,</span> <span class=\"s1\">'G'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">,</span> <span class=\"s1\">'I'</span><span class=\"p\">,</span> <span class=\"s1\">'K'</span><span class=\"p\">,</span> \n             <span class=\"s1\">'L'</span><span class=\"p\">,</span> <span class=\"s1\">'M'</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'P'</span><span class=\"p\">,</span> <span class=\"s1\">'Q'</span><span class=\"p\">,</span> <span class=\"s1\">'R'</span><span class=\"p\">,</span> <span class=\"s1\">'S'</span><span class=\"p\">,</span> <span class=\"s1\">'T'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">,</span> \n             <span class=\"s1\">'W'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'Y'</span><span class=\"p\">,</span> <span class=\"s1\">'U'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>  <span class=\"c1\"># List of amino acids</span>\n</pre>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">Spark approach.</span>\n<span class=\"sd\">In this approach the alphabets argument has to</span>\n<span class=\"sd\">be passed to the SGT class definition.</span>\n<span class=\"sd\">The SGT.fit() is then called in parallel.</span>\n<span class=\"sd\">'''</span>\n<span class=\"n\">sgt_</span> <span class=\"o\">=</span> <span class=\"n\">sgt</span><span class=\"o\">.</span><span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">alphabets</span><span class=\"o\">=</span><span class=\"n\">alphabets</span><span class=\"p\">,</span> \n               <span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n               <span class=\"n\">lengthsensitive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n               <span class=\"n\">flatten</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">rdd</span> <span class=\"o\">=</span> <span class=\"n\">processeddata</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">sgt_</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))))</span>\n<span class=\"n\">sgtembeddings</span> <span class=\"o\">=</span> <span class=\"n\">rdd</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"c1\"># Command took 29.66 seconds -- by cranjan@processminer.com at 4/22/2020, 12:31:23 PM on databricks</span>\n</pre>\n<h3>Compare with the default SGT mode</h3>\n<pre><span class=\"c1\"># Loading data</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'data/protein-uniprot-reviewed-Ano-10k.tab'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Data preprocessing</span>\n<span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,[</span><span class=\"s1\">'Entry'</span><span class=\"p\">,</span><span class=\"s1\">'Sequence'</span><span class=\"p\">]]</span>\n<span class=\"n\">corpus</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'sequence'</span><span class=\"p\">]</span>\n<span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"s1\">'sequence'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"s1\">'sequence'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">sgt_</span> <span class=\"o\">=</span> <span class=\"n\">sgt</span><span class=\"o\">.</span><span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">alphabets</span><span class=\"o\">=</span><span class=\"n\">alphabets</span><span class=\"p\">,</span> \n               <span class=\"n\">lengthsensitive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n               <span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n               <span class=\"n\">flatten</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n               <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sgtembedding_df</span> <span class=\"o\">=</span> <span class=\"n\">sgt_</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"p\">)</span>\n<span class=\"c1\"># Command took 13.08 minutes -- by cranjan@processminer.com at 4/22/2020, 1:48:02 PM on databricks</span>\n</pre>\n<h3>1M Protein Database</h3>\n<p>Protein 1M sequence data set is embedded here. The data set is available <a href=\"https://mega.nz/file/1qAXhSAS#l7E60cLJzMGtFQzeHZL9PI8yX4tRQcAMFRN2xeHK81w\" rel=\"nofollow\">here</a>.</p>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">Load the data and remove header.</span>\n<span class=\"sd\">'''</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">textFile</span><span class=\"p\">(</span><span class=\"s1\">'data/protein-uniprot-reviewed-Ano-1M.tab'</span><span class=\"p\">)</span>\n\n<span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span> <span class=\"c1\">#extract header</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">row</span> <span class=\"o\">!=</span> <span class=\"n\">header</span><span class=\"p\">)</span>   <span class=\"c1\">#filter out header</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># See one sample</span>\n</pre>\n<pre><span class=\"c1\"># Repartition for increasing the parallel processes</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">repartition</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">processeddata</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"n\">preprocessing</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">))</span>\n<span class=\"n\">processeddata</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># See one sample</span>\n\n<span class=\"c1\"># [('A0A2E9WIJ1',</span>\n<span class=\"c1\">#   ['M','Y','I','F','L','T','L','A','L','F','S',...,'F','S','I','F','A','K','L','D','K','N','D'])]</span>\n</pre>\n<pre><span class=\"c1\"># Protein sequence alphabets</span>\n<span class=\"n\">alphabets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">,</span> <span class=\"s1\">'G'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">,</span> <span class=\"s1\">'I'</span><span class=\"p\">,</span> <span class=\"s1\">'K'</span><span class=\"p\">,</span> \n             <span class=\"s1\">'L'</span><span class=\"p\">,</span> <span class=\"s1\">'M'</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'P'</span><span class=\"p\">,</span> <span class=\"s1\">'Q'</span><span class=\"p\">,</span> <span class=\"s1\">'R'</span><span class=\"p\">,</span> <span class=\"s1\">'S'</span><span class=\"p\">,</span> <span class=\"s1\">'T'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">,</span> \n             <span class=\"s1\">'W'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"s1\">'Y'</span><span class=\"p\">,</span> <span class=\"s1\">'U'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">]</span>  <span class=\"c1\"># List of amino acids</span>\n</pre>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">Spark approach.</span>\n<span class=\"sd\">In this approach the alphabets argument has to</span>\n<span class=\"sd\">be passed to the SGT class definition.</span>\n<span class=\"sd\">The SGT.fit() is then called in parallel.</span>\n<span class=\"sd\">'''</span>\n<span class=\"n\">sgt_</span> <span class=\"o\">=</span> <span class=\"n\">sgt</span><span class=\"o\">.</span><span class=\"n\">SGT</span><span class=\"p\">(</span><span class=\"n\">alphabets</span><span class=\"o\">=</span><span class=\"n\">alphabets</span><span class=\"p\">,</span> \n               <span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n               <span class=\"n\">lengthsensitive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n               <span class=\"n\">flatten</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">rdd</span> <span class=\"o\">=</span> <span class=\"n\">processeddata</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">sgt_</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))))</span>\n<span class=\"n\">sgtembeddings</span> <span class=\"o\">=</span> <span class=\"n\">rdd</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"c1\"># Command took 28.98 minutes -- by cranjan@processminer.com at 4/22/2020, 3:16:41 PM on databricks</span>\n</pre>\n<pre><span class=\"sd\">'''OPTIONAL.</span>\n<span class=\"sd\">Save the embeddings for future use or </span>\n<span class=\"sd\">production deployment.'''</span>\n<span class=\"c1\"># Save for deployment</span>\n<span class=\"c1\"># pickle.dump(sgtembeddings, </span>\n<span class=\"c1\">#             open(\"data/protein-sgt-embeddings-1M.pkl\", \"wb\"))</span>\n<span class=\"c1\"># The pickle dump is shared at https://mega.nz/file/hiAxAAoI#SStAIn_FZjAHvXSpXfdy8VpISG6rusHRf9HlUSqwcsw</span>\n<span class=\"c1\"># sgtembeddings = pickle.load(open(\"data/protein-sgt-embeddings-1M.pkl\", \"rb\"))</span>\n</pre>\n<p>The pickle dump is shared <a href=\"https://mega.nz/file/hiAxAAoI#SStAIn_FZjAHvXSpXfdy8VpISG6rusHRf9HlUSqwcsw\" rel=\"nofollow\">here</a>.</p>\n<h3>Sequence Search using SGT - Spark</h3>\n<p>Since <code>sgtembeddings</code> on the 1M data set is large it is recommended to use distributed computing to find similar proteins during a search.</p>\n<pre><span class=\"n\">sgtembeddings_rdd</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">parallelize</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">sgtembeddings</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span>\n<span class=\"n\">sgtembeddings_rdd</span> <span class=\"o\">=</span> <span class=\"n\">sgtembeddings_rdd</span><span class=\"o\">.</span><span class=\"n\">repartition</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">Search proteins similar to a query protein.</span>\n<span class=\"sd\">The approach is to find the SGT embedding of the</span>\n<span class=\"sd\">query protein and find its similarity with the</span>\n<span class=\"sd\">embeddings of the protein database.</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"n\">query_protein</span> <span class=\"o\">=</span> <span class=\"s1\">'MSHVFPIVIDDNFLSPQDLVSAARSGCSLRLHTGVVDKIDRAHRFVLEIAGAEALHYGINTGFGSLCTTHIDPADLSTLQHNLLKSHACGVGPTVSEEVSRVVTLIKLLTFRTGNSGVSLSTVNRIIDLWNHGVVGAIAQKGTVGASGDLAPLAHLFLPLIGLGQVWHRGVLRPSREVMDELKLAPLTLQPKDGLCLTNGVQYLNAWGALSTVRAKRLVALADLCAAMSMMGFSAARSFIEAQIHQTSLHPERGHVALHLRTLTHGSNHADLPHCNPAMEDPYSFRCAPQVHGAARQVVGYLETVIGNECNSVSDNPLVFPDTRQILTCGNLHGQSTAFALDFAAIGITDLSNISERRTYQLLSGQNGLPGFLVAKPGLNSGFMVVQYTSAALLNENKVLSNPASVDTIPTCHLQEDHVSMGGTSAYKLQTILDNCETILAIELMTACQAIDMNPGLQLSERGRAIYEAVREEIPFVKEDHLMAGLISKSRDLCQHSTVIAQQLAEMQAQ'</span>\n\n<span class=\"c1\"># Step 1. Compute sgt embedding for the query protein.</span>\n<span class=\"n\">query_protein_sgt_embedding</span> <span class=\"o\">=</span> <span class=\"n\">sgt_</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">query_protein</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Step 2. Broadcast the embedding to the cluster.</span>\n<span class=\"n\">query_protein_sgt_embedding_broadcasted</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">broadcast</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">query_protein_sgt_embedding</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Step 3. Compute similarity between each sequence embedding and the query.</span>\n<span class=\"n\">similarity</span> <span class=\"o\">=</span> <span class=\"n\">sgtembeddings_rdd</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> \n                                              <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">query_protein_sgt_embedding_broadcasted</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> \n                                                     <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])))</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Step 4. Show the most similar sequences with the query.</span>\n<span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">similarity</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7085167, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f53777eee0d460b052ce54d83ea06494", "sha256": "6e1ea8b73f1411fa5c539b470ca6ad21c6f08fa5e166a606c6a9995eda53e312"}, "downloads": -1, "filename": "sgt-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f53777eee0d460b052ce54d83ea06494", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8133, "upload_time": "2019-04-10T00:04:19", "upload_time_iso_8601": "2019-04-10T00:04:19.010068Z", "url": "https://files.pythonhosted.org/packages/98/d2/767366e06578190c708067985adee9ed2243d96fe235dfb32c5a1d55ef10/sgt-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62188b0e6381c972ddb2b7c55deb1de6", "sha256": "784f51bbeecec5b14c0b3183052f611a2fc85297829eca5da65d51277057c8da"}, "downloads": -1, "filename": "sgt-0.0.1.tar.gz", "has_sig": false, "md5_digest": "62188b0e6381c972ddb2b7c55deb1de6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7657, "upload_time": "2019-04-10T00:04:22", "upload_time_iso_8601": "2019-04-10T00:04:22.113122Z", "url": "https://files.pythonhosted.org/packages/f2/10/3fa724e1334eab24be451ea3f6471406ff90f1470a380724e3001d7d8ade/sgt-0.0.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "bff3be4660e40e4ca370f2c27a947615", "sha256": "1586d8e17d59b84d9b27725380af2f42f6c1c5303d98b91ca5455d56d039f873"}, "downloads": -1, "filename": "sgt-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bff3be4660e40e4ca370f2c27a947615", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19544, "upload_time": "2019-12-17T21:28:21", "upload_time_iso_8601": "2019-12-17T21:28:21.338778Z", "url": "https://files.pythonhosted.org/packages/43/63/be8da1dd81c7f5e44d5ad0085b8f986bee5ba3b17b5019396a738a47eb4c/sgt-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "389315457c57ea17d813ee45312477ab", "sha256": "affe30741fbcd0440f8dc9831ea8157f08f1fb1e03bb8dedb23588d3c1618c66"}, "downloads": -1, "filename": "sgt-1.0.0.tar.gz", "has_sig": false, "md5_digest": "389315457c57ea17d813ee45312477ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46809, "upload_time": "2019-12-17T21:28:23", "upload_time_iso_8601": "2019-12-17T21:28:23.892792Z", "url": "https://files.pythonhosted.org/packages/2c/88/ada3944b69a647812e5f4bc22f6dbc1c504cc41feff80ef2433d7c5acfb6/sgt-1.0.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "041b2fdd0a006853bd00864ef8588615", "sha256": "654f01d846f7fbca255257dfa1f812ba2ddacabeda80aa8cfaab1862380cdd90"}, "downloads": -1, "filename": "sgt-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "041b2fdd0a006853bd00864ef8588615", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31214, "upload_time": "2020-04-22T15:36:18", "upload_time_iso_8601": "2020-04-22T15:36:18.051965Z", "url": "https://files.pythonhosted.org/packages/d8/ba/6f88a2acf629de1537924ece5954de4f68adfd746c7e769016613be04f8b/sgt-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "900740f27324dfc71749265085fccfd4", "sha256": "4e8dc4d6179cf0df8ba4d82aeb9f790bf5c28b8a862b53fa30d6f78dd6696591"}, "downloads": -1, "filename": "sgt-2.0.0.tar.gz", "has_sig": false, "md5_digest": "900740f27324dfc71749265085fccfd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52454, "upload_time": "2020-04-22T15:36:28", "upload_time_iso_8601": "2020-04-22T15:36:28.674922Z", "url": "https://files.pythonhosted.org/packages/88/21/88cf624171dfe962e93da77465a36920b35da8cc342a8c098d1ba681fcd8/sgt-2.0.0.tar.gz", "yanked": false}], "2.0.0b1": [{"comment_text": "", "digests": {"md5": "e5d1d401de42f71438074a255a332261", "sha256": "c65dba814f7cf288c56b1f3467fb5cd7a46b15c24293c2592d0f3fcf74cc4b4d"}, "downloads": -1, "filename": "sgt-2.0.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "e5d1d401de42f71438074a255a332261", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22576, "upload_time": "2020-03-06T02:32:24", "upload_time_iso_8601": "2020-03-06T02:32:24.710687Z", "url": "https://files.pythonhosted.org/packages/b8/63/fcc4bf1658867234675a7de0f1198e7ac72b3cc3a2c15ffae7ce5ccfb6cc/sgt-2.0.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "639093b13deb7c4faf03a9f40385a173", "sha256": "9873226332aef863ebf7d4c9c14b0eae77cc47fe03edca7429ec8c1f3f1893dd"}, "downloads": -1, "filename": "sgt-2.0.0b1.tar.gz", "has_sig": false, "md5_digest": "639093b13deb7c4faf03a9f40385a173", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52307, "upload_time": "2020-03-06T02:32:27", "upload_time_iso_8601": "2020-03-06T02:32:27.059022Z", "url": "https://files.pythonhosted.org/packages/db/dd/b3adf4c27c6f2055ac6fa3fae36af22e839c29e2fac20acdbcd79846ff38/sgt-2.0.0b1.tar.gz", "yanked": false}], "2.0.0b10": [{"comment_text": "", "digests": {"md5": "d7fb2b9a32c9948f34720095e10e78fd", "sha256": "f3fc514c22886e98febafbea8b3d75a9bde178a7c6e8ba448870e035338e1031"}, "downloads": -1, "filename": "sgt-2.0.0b10-py3-none-any.whl", "has_sig": false, "md5_digest": "d7fb2b9a32c9948f34720095e10e78fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26624, "upload_time": "2020-04-09T18:27:53", "upload_time_iso_8601": "2020-04-09T18:27:53.873057Z", "url": "https://files.pythonhosted.org/packages/13/bf/6e3d3407eaf30210468db9b72814d36b547416062413899aa6e75d16912e/sgt-2.0.0b10-py3-none-any.whl", "yanked": false}], "2.0.0b11": [{"comment_text": "", "digests": {"md5": "1fbf98e37afce260cbc03850429e45ea", "sha256": "ee0d08d6818ff9aed53ac2a065fd23cb7bcec27af30de48590f3510bd0e025c9"}, "downloads": -1, "filename": "sgt-2.0.0b11-py3-none-any.whl", "has_sig": false, "md5_digest": "1fbf98e37afce260cbc03850429e45ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26542, "upload_time": "2020-04-09T18:29:43", "upload_time_iso_8601": "2020-04-09T18:29:43.763368Z", "url": "https://files.pythonhosted.org/packages/fc/34/8bed3f68803560c689ecf81337d1a8352043610d6f57c8843878d1a00f52/sgt-2.0.0b11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "637b24a44971a1cad1494aa0a1d655af", "sha256": "14da803b940a75846c735c46f60881f55ddb0abe66c39eea7b1b46e1e903182e"}, "downloads": -1, "filename": "sgt-2.0.0b11.tar.gz", "has_sig": false, "md5_digest": "637b24a44971a1cad1494aa0a1d655af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52741, "upload_time": "2020-04-09T18:29:45", "upload_time_iso_8601": "2020-04-09T18:29:45.558564Z", "url": "https://files.pythonhosted.org/packages/23/b6/ee2a87470338d840819d67f3e644dc17418950467e387c448f83cb8e3b95/sgt-2.0.0b11.tar.gz", "yanked": false}], "2.0.0b12": [{"comment_text": "", "digests": {"md5": "e71da2674b992d2740eeb73abf2be65d", "sha256": "6487e54fe627d1b60d5c2430aa12e625a2898dbdcd91ff3cc635ebb83b1a72cc"}, "downloads": -1, "filename": "sgt-2.0.0b12-py3-none-any.whl", "has_sig": false, "md5_digest": "e71da2674b992d2740eeb73abf2be65d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26532, "upload_time": "2020-04-09T18:31:17", "upload_time_iso_8601": "2020-04-09T18:31:17.478958Z", "url": "https://files.pythonhosted.org/packages/4a/78/b833e0b78858a34805ab06dd09326fb26ffdc9e9bff002a4d4419986c478/sgt-2.0.0b12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dff6937bcafff113dc8c8d75cddacb7a", "sha256": "cb9413243a5993813e1e6507d7d628a9d8d0425ec3119cf038c7f92a87eb077f"}, "downloads": -1, "filename": "sgt-2.0.0b12.tar.gz", "has_sig": false, "md5_digest": "dff6937bcafff113dc8c8d75cddacb7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52732, "upload_time": "2020-04-09T18:31:19", "upload_time_iso_8601": "2020-04-09T18:31:19.190390Z", "url": "https://files.pythonhosted.org/packages/5e/2a/2f280025a8ae931821698df8ab97fc27f01a5cd7ee6a9944382bbe8f6751/sgt-2.0.0b12.tar.gz", "yanked": false}], "2.0.0b13": [{"comment_text": "", "digests": {"md5": "d4e32f66383fc19d9f5d2a7d71e7b9f0", "sha256": "d6cbcde806576eb19eb68fdb555db20b85019065223d4a007609c9dca989b2e1"}, "downloads": -1, "filename": "sgt-2.0.0b13-py3-none-any.whl", "has_sig": false, "md5_digest": "d4e32f66383fc19d9f5d2a7d71e7b9f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26560, "upload_time": "2020-04-09T18:41:04", "upload_time_iso_8601": "2020-04-09T18:41:04.982829Z", "url": "https://files.pythonhosted.org/packages/c3/cc/c952683b31047f937f877e777a289c353002ffaf4fb1ac8cebf83ec96df0/sgt-2.0.0b13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e08a86f3bc302151481ebfc5ebddefb6", "sha256": "ac19bc7ba639abc0fbd90a73676198f5a0de4b6fce742e8debbb28d7a1de2835"}, "downloads": -1, "filename": "sgt-2.0.0b13.tar.gz", "has_sig": false, "md5_digest": "e08a86f3bc302151481ebfc5ebddefb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53573, "upload_time": "2020-04-09T18:41:08", "upload_time_iso_8601": "2020-04-09T18:41:08.439744Z", "url": "https://files.pythonhosted.org/packages/da/b3/ad015e7bfc25d01c8b99e8507dcf5b2a5148ff71b2b84da59337024e352e/sgt-2.0.0b13.tar.gz", "yanked": false}], "2.0.0b14": [{"comment_text": "", "digests": {"md5": "dcc47634aa41f5f1d4e6258d1f74044b", "sha256": "d8b1dd9a9e3490a519f2e5d5266c40cb1a25c79ff0b2bc1294708d7fb387e69a"}, "downloads": -1, "filename": "sgt-2.0.0b14-py3-none-any.whl", "has_sig": false, "md5_digest": "dcc47634aa41f5f1d4e6258d1f74044b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26574, "upload_time": "2020-04-09T18:48:16", "upload_time_iso_8601": "2020-04-09T18:48:16.167758Z", "url": "https://files.pythonhosted.org/packages/25/f7/1d7a411f7ba6ae5cb441afeeeb536aa75bcddd49fec2e743ea8261c75476/sgt-2.0.0b14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63cc604a67df13a63d02cb0a51d47fb1", "sha256": "e5b3715e48a8766826857af26f8cab65cbb322832d3efb2df3c64985774e86e3"}, "downloads": -1, "filename": "sgt-2.0.0b14.tar.gz", "has_sig": false, "md5_digest": "63cc604a67df13a63d02cb0a51d47fb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53581, "upload_time": "2020-04-09T18:48:21", "upload_time_iso_8601": "2020-04-09T18:48:21.252083Z", "url": "https://files.pythonhosted.org/packages/a7/55/2a97668947ac1d5bc04ebf4fd05cb27cff2653bccfdf7cbc0178be1a7e66/sgt-2.0.0b14.tar.gz", "yanked": false}], "2.0.0b15": [{"comment_text": "", "digests": {"md5": "b884b4f1a5eeeda77bcfb22c80a7aaa5", "sha256": "719f2220c001fc6ee0dac588d039576b97542b5dba17c59370ecab7e8fb9b3e3"}, "downloads": -1, "filename": "sgt-2.0.0b15-py3-none-any.whl", "has_sig": false, "md5_digest": "b884b4f1a5eeeda77bcfb22c80a7aaa5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30278, "upload_time": "2020-04-09T18:54:50", "upload_time_iso_8601": "2020-04-09T18:54:50.537264Z", "url": "https://files.pythonhosted.org/packages/2e/2a/0e8e847a235021c00b553899dbc75138749076ebc08f510e3591ac0f17d5/sgt-2.0.0b15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be52f3501ea1c08c534b1ee22c7d8932", "sha256": "492a22db5ff5affc514a72a8b955cd7064e32f82fca6551e19445d86124d7af0"}, "downloads": -1, "filename": "sgt-2.0.0b15.tar.gz", "has_sig": false, "md5_digest": "be52f3501ea1c08c534b1ee22c7d8932", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53606, "upload_time": "2020-04-09T18:54:52", "upload_time_iso_8601": "2020-04-09T18:54:52.204435Z", "url": "https://files.pythonhosted.org/packages/cc/eb/d109aa44b3e8f458e9c8f50cd1f0f945aac49410ac309cd82dd8161647a7/sgt-2.0.0b15.tar.gz", "yanked": false}], "2.0.0b16": [{"comment_text": "", "digests": {"md5": "91fcc0295507e0db132c641871dfd389", "sha256": "e1d98c5bd9f9bf19485f83d094d6e7d3b381ad88d0f3e5211448bff28e4f6d18"}, "downloads": -1, "filename": "sgt-2.0.0b16-py3-none-any.whl", "has_sig": false, "md5_digest": "91fcc0295507e0db132c641871dfd389", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33974, "upload_time": "2020-04-09T19:01:12", "upload_time_iso_8601": "2020-04-09T19:01:12.214911Z", "url": "https://files.pythonhosted.org/packages/02/09/1f73bc57cadd8cb810694e439ef53d222274f998922a4c561ba913da6bc5/sgt-2.0.0b16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b76454ca415f69a7c25cf77fb873a701", "sha256": "e9fabd3f566bf6232e96b708f8bea34006042de238c12135d4b2ddbb4156f3d4"}, "downloads": -1, "filename": "sgt-2.0.0b16.tar.gz", "has_sig": false, "md5_digest": "b76454ca415f69a7c25cf77fb873a701", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54167, "upload_time": "2020-04-09T19:01:15", "upload_time_iso_8601": "2020-04-09T19:01:15.327614Z", "url": "https://files.pythonhosted.org/packages/e3/3a/f484d57c212b4881b1945fe8bdb2bbbbd321e2800c511173f5205ae0a8df/sgt-2.0.0b16.tar.gz", "yanked": false}], "2.0.0b17": [{"comment_text": "", "digests": {"md5": "0bd3d43cdb2c00461b8fea002466be85", "sha256": "5898ca6f1185207422dd0fc74f50afda0b144c17549ceedf62ac9c97140b8b5c"}, "downloads": -1, "filename": "sgt-2.0.0b17-py3-none-any.whl", "has_sig": false, "md5_digest": "0bd3d43cdb2c00461b8fea002466be85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33999, "upload_time": "2020-04-10T12:46:44", "upload_time_iso_8601": "2020-04-10T12:46:44.386409Z", "url": "https://files.pythonhosted.org/packages/91/f1/b12ea18103ae3b962dc4e37e7063b862f0d2a698b9251521204eec882e02/sgt-2.0.0b17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d282d4c34768ed70b1a2c20e7e1ebd90", "sha256": "3e9ed1185707bbe869c834fa6b537b08c27f8414d81a26a3d0738721dd753ef4"}, "downloads": -1, "filename": "sgt-2.0.0b17.tar.gz", "has_sig": false, "md5_digest": "d282d4c34768ed70b1a2c20e7e1ebd90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52582, "upload_time": "2020-04-10T12:46:49", "upload_time_iso_8601": "2020-04-10T12:46:49.677456Z", "url": "https://files.pythonhosted.org/packages/ff/f8/e7e23e068bb08375f0d2793e5e3bab042704535120991847485eb2996941/sgt-2.0.0b17.tar.gz", "yanked": false}], "2.0.0b18": [{"comment_text": "", "digests": {"md5": "9e88b814a7d83db5a11c47eef8bce647", "sha256": "0142bc575dea348d6bdc636a9dea8a9b1e85fb422551796fccc9bb9fcedee3d8"}, "downloads": -1, "filename": "sgt-2.0.0b18-py3-none-any.whl", "has_sig": false, "md5_digest": "9e88b814a7d83db5a11c47eef8bce647", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34283, "upload_time": "2020-04-14T23:55:05", "upload_time_iso_8601": "2020-04-14T23:55:05.835394Z", "url": "https://files.pythonhosted.org/packages/9e/4d/a6dddacf662fa6babab2fc2f392aa278f0ed8561dd58fa5e13d42dc2994f/sgt-2.0.0b18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5175c6cd315bd9e3407120704e792b40", "sha256": "065e9b10acb7be8322ce6ce249a9c7fd0cafabe1f11c13e09552ede18b71c422"}, "downloads": -1, "filename": "sgt-2.0.0b18.tar.gz", "has_sig": false, "md5_digest": "5175c6cd315bd9e3407120704e792b40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53230, "upload_time": "2020-04-14T23:55:11", "upload_time_iso_8601": "2020-04-14T23:55:11.180032Z", "url": "https://files.pythonhosted.org/packages/56/60/93908b4db2c92d17bd91aff79e617b59b67ce66d2304f21bd2a069ba3c02/sgt-2.0.0b18.tar.gz", "yanked": false}], "2.0.0b19": [{"comment_text": "", "digests": {"md5": "dfb94ed41e60945569e1a19f127c1841", "sha256": "f0dadb07a080435425614edd94d3146516a40ff567d7c47b0e321048a8c2636b"}, "downloads": -1, "filename": "sgt-2.0.0b19-py3-none-any.whl", "has_sig": false, "md5_digest": "dfb94ed41e60945569e1a19f127c1841", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34257, "upload_time": "2020-04-15T00:13:05", "upload_time_iso_8601": "2020-04-15T00:13:05.153184Z", "url": "https://files.pythonhosted.org/packages/01/19/dc0934523d4ab06ff5f57f7284d9bd5cb9f59f68581b5eaf227b331f3489/sgt-2.0.0b19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19b27aa5b5bd5f7eaf5acf8e1bffa73f", "sha256": "8ef488a39bbb17c3a8e86b31a89a17818e8628894552907746bf4190bf6b5a6c"}, "downloads": -1, "filename": "sgt-2.0.0b19.tar.gz", "has_sig": false, "md5_digest": "19b27aa5b5bd5f7eaf5acf8e1bffa73f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53584, "upload_time": "2020-04-15T00:13:12", "upload_time_iso_8601": "2020-04-15T00:13:12.442057Z", "url": "https://files.pythonhosted.org/packages/01/c6/e65a6f2ed6e82fa210dda5680195a1affe88366d04dcb174c7806ab6f755/sgt-2.0.0b19.tar.gz", "yanked": false}], "2.0.0b2": [{"comment_text": "", "digests": {"md5": "698dfdd1faf8ecfa113124c1daca1938", "sha256": "a7c02923e812a48b7f2b84b17828b7d948374eedf09d0cbc1d96c69799d32755"}, "downloads": -1, "filename": "sgt-2.0.0b2-py3-none-any.whl", "has_sig": false, "md5_digest": "698dfdd1faf8ecfa113124c1daca1938", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22561, "upload_time": "2020-03-06T02:41:46", "upload_time_iso_8601": "2020-03-06T02:41:46.213006Z", "url": "https://files.pythonhosted.org/packages/ab/0b/36e1948fe9a87767674484fe39dfbd92bc49bc33d3b85bc703945713cc48/sgt-2.0.0b2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6bbacf1bb493844af1c8c4f60c871ca", "sha256": "248acb108c056ef179ac87c4fcdd91d311de1db04417ab49b0f96ef4340c6244"}, "downloads": -1, "filename": "sgt-2.0.0b2.tar.gz", "has_sig": false, "md5_digest": "c6bbacf1bb493844af1c8c4f60c871ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52259, "upload_time": "2020-03-06T02:41:48", "upload_time_iso_8601": "2020-03-06T02:41:48.430781Z", "url": "https://files.pythonhosted.org/packages/7d/00/9502983d06b1481903697cb2a953d8651b5d4029571fc3aac1e811a534a1/sgt-2.0.0b2.tar.gz", "yanked": false}], "2.0.0b20": [{"comment_text": "", "digests": {"md5": "5246c674534d5928daa0dfbb11d70268", "sha256": "9894115a6431c6909b2fd200325c9a98064856a5abe2f0d4f35b05fd685be10b"}, "downloads": -1, "filename": "sgt-2.0.0b20-py3-none-any.whl", "has_sig": false, "md5_digest": "5246c674534d5928daa0dfbb11d70268", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34310, "upload_time": "2020-04-15T00:27:21", "upload_time_iso_8601": "2020-04-15T00:27:21.351533Z", "url": "https://files.pythonhosted.org/packages/ec/32/b2ced06522951025970df30e5de0fd8dbf8c3f0812f892642223d6481cbd/sgt-2.0.0b20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7b233deaf1be41f5a8d58b6e7dfb7c1", "sha256": "d86f8677ed1ae9fce1548b6421ab45d19160e9c5e53c48f70b7d4ae2b1412f57"}, "downloads": -1, "filename": "sgt-2.0.0b20.tar.gz", "has_sig": false, "md5_digest": "e7b233deaf1be41f5a8d58b6e7dfb7c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53595, "upload_time": "2020-04-15T00:27:30", "upload_time_iso_8601": "2020-04-15T00:27:30.448876Z", "url": "https://files.pythonhosted.org/packages/a7/69/f22df438f8613d9bc69a9b15703da7f535c2ecd47f2d041e8de439dd0aa4/sgt-2.0.0b20.tar.gz", "yanked": false}], "2.0.0b21": [{"comment_text": "", "digests": {"md5": "d145f03c632bff9bd9d7a2bfe083c5a8", "sha256": "86c76fcf8cdfdf04b661bab26992e8c371ffa33fad51c6d25554bd112b591c09"}, "downloads": -1, "filename": "sgt-2.0.0b21-py3-none-any.whl", "has_sig": false, "md5_digest": "d145f03c632bff9bd9d7a2bfe083c5a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31275, "upload_time": "2020-04-15T12:53:53", "upload_time_iso_8601": "2020-04-15T12:53:53.326776Z", "url": "https://files.pythonhosted.org/packages/8f/ab/d19d02ed3150d2ecc410c2ee7daca0c5b1a7a8a0da8e689335b4a490fcbf/sgt-2.0.0b21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c3a503f178ffdfacf98d85a159f83b3", "sha256": "0afa85c44b6f6eec1adddf1de9ebdcf82149ff0a0367b8b02d1a9dc488a99643"}, "downloads": -1, "filename": "sgt-2.0.0b21.tar.gz", "has_sig": false, "md5_digest": "9c3a503f178ffdfacf98d85a159f83b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52499, "upload_time": "2020-04-15T12:54:02", "upload_time_iso_8601": "2020-04-15T12:54:02.120061Z", "url": "https://files.pythonhosted.org/packages/3c/a2/c6d3f2e2798751859da52e0def61a18491f05c0efc8f4c94d0bc11ad4178/sgt-2.0.0b21.tar.gz", "yanked": false}], "2.0.0b3": [{"comment_text": "", "digests": {"md5": "d6a94b7dd29c9fb34f4b9ea8c68562f1", "sha256": "93b3057a875f8e3117adebcbddb69dab5f91e9d13fc07ef5dd816277134abf5f"}, "downloads": -1, "filename": "sgt-2.0.0b3-py3-none-any.whl", "has_sig": false, "md5_digest": "d6a94b7dd29c9fb34f4b9ea8c68562f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22560, "upload_time": "2020-03-06T02:53:44", "upload_time_iso_8601": "2020-03-06T02:53:44.535318Z", "url": "https://files.pythonhosted.org/packages/11/2c/c4ff59c7d78d38bd798f49ffd3983ba01c5cbd9724f383b7483abe99fc62/sgt-2.0.0b3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "038f446a4a31e77c8089980a038214cc", "sha256": "944ffe2fabc1690a3f246d548ee493c21743bfa8918022b95666d7ba2092361f"}, "downloads": -1, "filename": "sgt-2.0.0b3.tar.gz", "has_sig": false, "md5_digest": "038f446a4a31e77c8089980a038214cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52261, "upload_time": "2020-03-06T02:53:46", "upload_time_iso_8601": "2020-03-06T02:53:46.569592Z", "url": "https://files.pythonhosted.org/packages/34/1e/6c6778645888065a9286eba837c600008a395cc90d7b162c27db2a9ad55e/sgt-2.0.0b3.tar.gz", "yanked": false}], "2.0.0b5": [{"comment_text": "", "digests": {"md5": "b440a6b6c6bb2df90bc27c9ac5225603", "sha256": "2a238504a1e7bbbdf146506fdff1285117c8329aac0225f1418d30f990880862"}, "downloads": -1, "filename": "sgt-2.0.0b5-py3-none-any.whl", "has_sig": false, "md5_digest": "b440a6b6c6bb2df90bc27c9ac5225603", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23521, "upload_time": "2020-04-09T17:49:29", "upload_time_iso_8601": "2020-04-09T17:49:29.971496Z", "url": "https://files.pythonhosted.org/packages/00/9e/5dc68a5946d9e1b59c60cb208f68128a0b00d66b1f9c3aca0cf4487b812c/sgt-2.0.0b5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7a42d8d82d3ad696e8cf782074c1df6", "sha256": "2d786b212d45f2df6c7a52101b89de0484483f45623b5fd0f02c5b45a50e31f0"}, "downloads": -1, "filename": "sgt-2.0.0b5.tar.gz", "has_sig": false, "md5_digest": "e7a42d8d82d3ad696e8cf782074c1df6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52476, "upload_time": "2020-04-09T17:49:31", "upload_time_iso_8601": "2020-04-09T17:49:31.979666Z", "url": "https://files.pythonhosted.org/packages/3f/a9/b2fd9f60afd0ed3f853528d31c078759a68f7961ea6c0cecbd2dddf0d5f9/sgt-2.0.0b5.tar.gz", "yanked": false}], "2.0.0b6": [{"comment_text": "", "digests": {"md5": "ec9a15c2259097ff95e4245d11b98046", "sha256": "8d3661fa406bc9b2ba265ef2776abec63d416e73dc3a0b3fcec3e3c26c021efb"}, "downloads": -1, "filename": "sgt-2.0.0b6-py3-none-any.whl", "has_sig": false, "md5_digest": "ec9a15c2259097ff95e4245d11b98046", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19238, "upload_time": "2020-04-09T17:53:00", "upload_time_iso_8601": "2020-04-09T17:53:00.702722Z", "url": "https://files.pythonhosted.org/packages/aa/dc/132c6a3396be9cc9da7b0bd44b89ddf84ef26012905e98ccbcc9f6cf8433/sgt-2.0.0b6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "258131de504c1dde0657cac25357318d", "sha256": "385f17138c3016610aadfc0862484ada1fc32f805ce090f9e9b4f51b9924e9c8"}, "downloads": -1, "filename": "sgt-2.0.0b6.tar.gz", "has_sig": false, "md5_digest": "258131de504c1dde0657cac25357318d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51340, "upload_time": "2020-04-09T17:53:02", "upload_time_iso_8601": "2020-04-09T17:53:02.654643Z", "url": "https://files.pythonhosted.org/packages/29/52/e11f05c00d2e742a4cd264351e5ae03fa90531d3a69cafa7251f1ef620e8/sgt-2.0.0b6.tar.gz", "yanked": false}], "2.0.0b7": [{"comment_text": "", "digests": {"md5": "38eeb32341a4baa1a736be0055da2d54", "sha256": "13881f45f3a376f1e76b1c4c70612f5b89f684b7878179a716aa4de6f2fa536d"}, "downloads": -1, "filename": "sgt-2.0.0b7-py3-none-any.whl", "has_sig": false, "md5_digest": "38eeb32341a4baa1a736be0055da2d54", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26316, "upload_time": "2020-04-09T18:14:48", "upload_time_iso_8601": "2020-04-09T18:14:48.181891Z", "url": "https://files.pythonhosted.org/packages/9e/43/4aff70ef9d3cce1ce3793a30ab2d67dfd027453cade0251b941d817c3b60/sgt-2.0.0b7-py3-none-any.whl", "yanked": false}], "2.0.0b8": [{"comment_text": "", "digests": {"md5": "391c2f72d593d5f7b99dff1a5f4c2392", "sha256": "967d080b35e5c5f0c0803b427b2f36c966381156eeea0faf47d0a2f96f79eb09"}, "downloads": -1, "filename": "sgt-2.0.0b8-py3-none-any.whl", "has_sig": false, "md5_digest": "391c2f72d593d5f7b99dff1a5f4c2392", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26317, "upload_time": "2020-04-09T18:21:10", "upload_time_iso_8601": "2020-04-09T18:21:10.825609Z", "url": "https://files.pythonhosted.org/packages/ca/c5/ec2c9c0f7b14ccd62e652926e41f2e056dc38c3cb168fdfa395599bc854a/sgt-2.0.0b8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10506891854afa871dc7787e8a0545aa", "sha256": "83e9b437f8236525a3c88ef56b6c582e2515ac3d3afb9170c4043bc7808d35e6"}, "downloads": -1, "filename": "sgt-2.0.0b8.tar.gz", "has_sig": false, "md5_digest": "10506891854afa871dc7787e8a0545aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53388, "upload_time": "2020-04-09T18:21:13", "upload_time_iso_8601": "2020-04-09T18:21:13.221545Z", "url": "https://files.pythonhosted.org/packages/a7/f3/a5b2d66629dc233202830c20d313deca983e9de2c0e6b8ed86e190a244cf/sgt-2.0.0b8.tar.gz", "yanked": false}], "2.0.0b9": [{"comment_text": "", "digests": {"md5": "31086fd3a96552ef2ef0329d5b53a0fb", "sha256": "05503f59b4369d4b4dbaf7ac7a906322e44fe9b11ee5f8edaaa8ff15369251ba"}, "downloads": -1, "filename": "sgt-2.0.0b9-py3-none-any.whl", "has_sig": false, "md5_digest": "31086fd3a96552ef2ef0329d5b53a0fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26320, "upload_time": "2020-04-09T18:25:00", "upload_time_iso_8601": "2020-04-09T18:25:00.381873Z", "url": "https://files.pythonhosted.org/packages/de/61/d7ee6df217b41716cff346b594dc69aac573d000aa61180d09e9cf7ee35d/sgt-2.0.0b9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d336b4659bc252d8cf2b71b17772878d", "sha256": "90b8da8d60034e5a49ad4fa048671b0290b96d0d3b174dc94b41b3c51b3897b0"}, "downloads": -1, "filename": "sgt-2.0.0b9.tar.gz", "has_sig": false, "md5_digest": "d336b4659bc252d8cf2b71b17772878d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53400, "upload_time": "2020-04-09T18:25:03", "upload_time_iso_8601": "2020-04-09T18:25:03.651648Z", "url": "https://files.pythonhosted.org/packages/6f/07/019ccb2cea1af5b3fe681da13fd4ada62a1b8a8eb188936ed3d5bbec44c3/sgt-2.0.0b9.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "dde35a7b2d2cd28f0900643504f8257a", "sha256": "bb8fc1756f3070d9a301ada6c0fecefed4f0607c3e1a30cf039530fe9f91450b"}, "downloads": -1, "filename": "sgt-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dde35a7b2d2cd28f0900643504f8257a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27867, "upload_time": "2020-04-23T15:13:46", "upload_time_iso_8601": "2020-04-23T15:13:46.089790Z", "url": "https://files.pythonhosted.org/packages/ff/e2/614407bd8bdaa53129629cf4ed157e40f90d5d9ed25426324a5739d72b0d/sgt-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a5f048c111cd3b1c29f7302f70a598d", "sha256": "415b4b5384eb808554ad50442db34d645e7e5c710aa0e15ba0847c097896e784"}, "downloads": -1, "filename": "sgt-2.0.1.tar.gz", "has_sig": false, "md5_digest": "4a5f048c111cd3b1c29f7302f70a598d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44651, "upload_time": "2020-04-23T15:13:58", "upload_time_iso_8601": "2020-04-23T15:13:58.723478Z", "url": "https://files.pythonhosted.org/packages/99/77/36a4b3757f879af85c3ea1e5813d4845609d9ec6a6d32cdd188b7b9a63c3/sgt-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "0c37adf7c19f0f13f853af8ca2424ab1", "sha256": "1a47724bfd4fe7128c5276459d9e4f85c329477895449ada810b90b2f4369f5f"}, "downloads": -1, "filename": "sgt-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0c37adf7c19f0f13f853af8ca2424ab1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27759, "upload_time": "2020-04-23T15:18:04", "upload_time_iso_8601": "2020-04-23T15:18:04.318724Z", "url": "https://files.pythonhosted.org/packages/c6/e5/cb36b6c1fda932e4f9c5d4442a10ad2f4d9fcffa64751797ce87ea7b51d5/sgt-2.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0666b5c450503367faf29932e42539f8", "sha256": "1c92fdce6e776e7fc0f695c22986f9d9f364fedee1b81318271d54a1356e5be8"}, "downloads": -1, "filename": "sgt-2.0.2.tar.gz", "has_sig": false, "md5_digest": "0666b5c450503367faf29932e42539f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44325, "upload_time": "2020-04-23T15:18:23", "upload_time_iso_8601": "2020-04-23T15:18:23.877992Z", "url": "https://files.pythonhosted.org/packages/17/7d/204ac0722ea5040e9292a85bb0d4660531ed00f3eea76ee959e26dbe9582/sgt-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "7f24a1ce6cf9f80ee16161c8b927c4c6", "sha256": "16ba2b4a430fe34f17bb2c1f460227a6cfe1b839db96a782ed288911511dc81f"}, "downloads": -1, "filename": "sgt-2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7f24a1ce6cf9f80ee16161c8b927c4c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27559, "upload_time": "2020-04-23T15:21:42", "upload_time_iso_8601": "2020-04-23T15:21:42.280379Z", "url": "https://files.pythonhosted.org/packages/aa/ac/158c762acd2a75f347a480271de12e06a95d2c75a30026207f827568f8ea/sgt-2.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6abdbc1bc7374cee6f4174973d6e9be5", "sha256": "169e7ee86998f53c27d47c6c2845c769a4eb5576dc3377acab362b5d452a45a1"}, "downloads": -1, "filename": "sgt-2.0.3.tar.gz", "has_sig": false, "md5_digest": "6abdbc1bc7374cee6f4174973d6e9be5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43751, "upload_time": "2020-04-23T15:21:58", "upload_time_iso_8601": "2020-04-23T15:21:58.079982Z", "url": "https://files.pythonhosted.org/packages/c5/82/8886147eb181c91d477e4322ccce4a415af28c7186318338e8151d068ea9/sgt-2.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f24a1ce6cf9f80ee16161c8b927c4c6", "sha256": "16ba2b4a430fe34f17bb2c1f460227a6cfe1b839db96a782ed288911511dc81f"}, "downloads": -1, "filename": "sgt-2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7f24a1ce6cf9f80ee16161c8b927c4c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27559, "upload_time": "2020-04-23T15:21:42", "upload_time_iso_8601": "2020-04-23T15:21:42.280379Z", "url": "https://files.pythonhosted.org/packages/aa/ac/158c762acd2a75f347a480271de12e06a95d2c75a30026207f827568f8ea/sgt-2.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6abdbc1bc7374cee6f4174973d6e9be5", "sha256": "169e7ee86998f53c27d47c6c2845c769a4eb5576dc3377acab362b5d452a45a1"}, "downloads": -1, "filename": "sgt-2.0.3.tar.gz", "has_sig": false, "md5_digest": "6abdbc1bc7374cee6f4174973d6e9be5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43751, "upload_time": "2020-04-23T15:21:58", "upload_time_iso_8601": "2020-04-23T15:21:58.079982Z", "url": "https://files.pythonhosted.org/packages/c5/82/8886147eb181c91d477e4322ccce4a415af28c7186318338e8151d068ea9/sgt-2.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:59 2020"}