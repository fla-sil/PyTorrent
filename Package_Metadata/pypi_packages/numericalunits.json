{"info": {"author": "Steven J. Byrnes", "author_email": "steven.byrnes@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering"], "description": "=========================================================================\nnumericalunits: Units and dimensional analysis compatible with everything\n=========================================================================\n\n`Package homepage at PyPI <http://pypi.python.org/pypi/numericalunits>`_ -- \n`Source code at github <http://github.com/sbyrnes321/numericalunits>`_ -- \nWritten by `Steve Byrnes <http://sjbyrnes.com>`_\n\nThis package implements units and dimensional analysis in an unconventional \nway that has the following unique advantages:\n\n* **Compatible with everything:** Compatible with virtually any numerical \n  calculation routine, including numpy and scipy, and even including routines \n  not written in Python! That means, for example, if you have a decades-old \n  closed-source C routine for numerical integration, you can pass it a \n  quantity with units of velocity and an integration range with units of \n  time, and the final answer will magically have units of distance. This \n  extreme compatibility is possible because if the variable ``x`` represents \n  a quantity with dimensions (like \"3.3 kg\"), ``x`` is actually stored \n  internally as an ordinary floating-point number. The dimension is \n  encoded in the value as a multiplicative factor. When two numbers are \n  multiplied, their dimensions are automatically multiplied, and so on. \n\n\n* **Modular and non-intrusive:** When you input data, you say what units \n  they are in. When you display results, you say what units you want to \n  display them in. These steps are very little trouble, and in fact help you \n  create nice, self-documenting code. Other than that, you have to do nothing \n  at all to pass dimensionful quantities into and out of any already-written \n  programs or routines.\n\n* **Powerful tool for debugging:** Not *all* calculation mistakes cause \n  violations of dimensional analysis, but *most* do--for example, if you \n  accidentally multiply two lengths instead of adding them, the result will \n  have the wrong dimension. If you use this package, it will alert you to \n  these sorts of mistakes.\n\n* **Zero storage overhead**\n\n* **Zero calculation overhead**\n\nThese great features come with the disadvantage that the interface is less  \n*slick* than other unit packages. If you have a quantity with units, you \ncannot directly see what the units are. You are supposed to already know \nwhat the units are, and then the package will tell you whether you made a \nmistake. Even worse, you only get alerted to the mistake after running a \ncalculation all the way through twice.\n\nTherefore the package is *not* suggested for students exploring how units work.\nIt *is* suggested for engineering and science professionals who want to make\ntheir code more self-documenting and self-debugging.\n\nInstallation\n============\n\nYou can install from PyPI: ::\n\n    pip install numericalunits\n\nAlternatively---since it's a single module that requires no setup or \ncompilation---you can download ``numericalunits.py`` from `PyPI \n<http://pypi.python.org/pypi/numericalunits>`_ or `github \n<http://github.com/sbyrnes321/numericalunits>`_ and use it directly.\n\nUsage and examples\n==================\n\nTo assign a unit to a quantity, **multiply** by the unit, e.g.\n``my_length = 100 * mm``. (In normal text you would write \"100 mm\", but\nunfortunately Python does not have \"implied multiplication\".)\n\nTo express a dimensionful quantity in a certain unit, **divide** by that unit,\ne.g. when you see ``my_length / cm``, you pronounce it \"my_length expressed\nin cm\".\n\nUnit errors, like trying to add a length to a mass, will not *immediately*\nannounce themselves as unit errors. Instead, you need to run the whole\ncalculation twice (in a new Python session each time). If you get the\nsame final answers both times, then congratulations, all your calculations\nare almost guaranteed to pass dimensional analysis! If you get different\nanswers every time you run, then you made a unit error! It is up to you to\nfigure out where and what the error is.\n\n**Example 1:** What is 5 mL expressed in cubic nanometers?::\n\n    from numericalunits import mL, nm\n    x = 5 * mL  # \"Read: x is equal to 5 milliliters\"\n    print(x / nm**3)   # \"Read: x expressed in cubic nanometers is...\" --> 5e21\n\n**Example 2:** An electron is in a 1e5 V/cm electric field. What is its\nacceleration? (Express the answer in m/s^2.) ::\n\n    from numericalunits import V, cm, e, me, m, s\n    Efield = 1e5 * (V / cm)\n    force = e * Efield # (e is the elementary charge)\n    accel = force / me # (me is the electron mass)\n    print(accel / (m / s**2)) # Answer --> 1.7588e18\n\n**Example 3:** You measured a voltage as a function of the position of dial: \n10 volts when the dial is at 1cm, 11 volts when the dial is at 2cm, etc. \netc. Interpolate from this data to get the expected voltage when the dial is \nat 41mm, and express the answer in mV. ::\n\n    from numericalunits import cm, V, mm, mV\n    from numpy import array\n    from scipy.interpolate import interp1d\n    voltage_data = array([[1 * cm, 10 * V],\n                          [2 * cm, 11 * V],\n                          [3 * cm, 13 * V],\n                          [4 * cm, 16 * V],\n                          [5 * cm, 18 * V]])\n    f = interp1d(voltage_data[:,0], voltage_data[:,1])\n    print(f(41 * mm) / mV) # Answer --> 16200\n\n\n**Example 4:** A unit mistake ... what is 1 cm expressed in atmospheres? ::\n\n    from numericalunits import cm, atm\n    print((1 * cm) / atm) # --> a randomly-varying number\n    # The answer randomly varies every time you run this (in a new Python\n    # session), indicating that you are violating dimensional analysis.\n\nHow it works\n============\n\nA complete set of independent base units (meters, kilograms, seconds, \ncoulombs, kelvins) are defined as randomly-chosen positive floating-point \nnumbers. All other units and constants are defined in terms of those. In a \ndimensionally-correct calculation, the units all cancel out, so the final \nanswer is deterministic, not random. In a dimensionally-incorrect \ncalculations, there will be random factors causing a randomly-varying final \nanswer.\n\nIncluded units and constants\n============================\n\nIncludes a variety of common units, both SI and non-SI, everything from \nfrequency to magnetic flux. Also includes common physical constants like \nPlanck's constant and the speed of light. Browse the source code to see a \ncomplete list. It is very easy to add in any extra units and constants that\nwere left out.\n\nNotes\n=====\n\nNotes on implementation and use\n-------------------------------\n\n* **What does it mean to \"run the calculation again in a new Python\n  session?\"** You know that you've started a new Python session if all\n  the variable definitions have been forgotten. Three examples: In Spyder, each \"Console\"\n  tab is its own session. In Jupyter, make a new Python session by selecting\n  \"Restart kernel\". From the command line, each time you type\n  ``python blah.py``, you are opening a new Python session. \n\n* For little, self-contained calculations (a few lines that are all within a\n  single module), it is possible to check the units without opening a new Python\n  session: Run the function ``numericalunits.reset_units()`` at the beginning of\n  the calculation before any variables are defined; then check for\n  dimensional errors by re-running the whole calculation (including the\n  ``reset_units()`` part). Note that if you are using ``from``-style imports,\n  like ``from numericalunits import cm``, you need to put them *after*\n  ``reset_units()`` in the code.\n\n* While debugging a program, it may be annoying to have intermediate values \n  in the calculation that randomly vary every time you run the program. In \n  this case, you can use ``reset_units('SI')`` instead of the normal \n  ``reset_units()``. This puts all dimensionful variables in standard (MKS)\n  SI units: All times are in seconds, all lengths are in meters, all forces\n  are in newtons, etc. Alternatively, ``reset_units(123)`` uses ``123`` as\n  the seed for the random-number generator. Obviously, in these modes, you\n  will *not* get any indication of dimensional-analysis errors. As above,\n  if you are going to use any version of ``reset_units()``, make sure you do\n  it before any dimensionful variable is defined in any module.\n\n* There are very rare, strange cases where the final answer does not seem to \n  randomly vary even though there was a dimensional-analysis violation: For \n  example, the expression ``(1 + 1e-50 * cm / atm)`` fails dimensional \n  analysis, so if you calculate it the answer is randomly-varying. But, it is \n  only randomly varying around the 50th decimal point, so the variation is\n  hidden from view. You would not notice it as an error.\n\n* Since units are normal Python ``float``-type numbers, they follow the normal\n  casting rules. For example, ``2 * cm`` is a python ``float``, not an ``int``.\n  This is usually what you would want and expect.\n\n* You can give a dimension to complex numbers in the same way as real \n  numbers--for example ``(2.1e3 + 3.9e4j) * ohm``.\n\n* Should be compatible with any Python version 2.x or 3.x. If you find bugs,\n  please tell me by `email <http://sjbyrnes.com>`_ or \n  `github issue board <https://github.com/sbyrnes321/numericalunits/issues>`_.\n\n* If you get overflows or underflows, you can edit the unit initializations.\n  For example, the package sets the meter to a random numerical value between 0.1\n  and 10. Therefore, if you're doing molecular simulation, most lengths you\n  use will be tiny numbers. You should probably set the meter instead to be\n  between, say, a random numerical value between 1e8 and 1e10.\n\n* Some numerical routines use a default *absolute* tolerance, rather than\n  relative tolerance, to decide convergence. This can cause the calculation\n  result to randomly vary even though there is no dimensional analysis error.\n  When this happens, you should set the absolute tolerance to a value with the\n  appropriate units. Alternatively, you can scale the data before running the\n  algorithm and scale it back afterwards. Maybe this sounds like a hassle, but\n  it's actually a benefit: If your final result is very sensitive to some\n  numerical tolerance setting, then you really want to be aware of that.\n\nNotes on unit definitions\n-------------------------\n\n* For electromagnetism, all units are intended for use in SI formulas. If \n  you plug them into cgs-gaussian electromagnetism formulas, or cgs-esu \n  electromagnetism formulas, etc., you will get nonsense results.\n\n* The package does not keep track of \"radians\" as an independent unit \n  assigned a random number. The reason is that the \"radians\" factor does not \n  always neatly cancel out of formulas.\n\n* The package does not keep track of \"moles\" as an independent unit assigned \n  a random number; instead ``mol`` is just a pure number (~6e23), like you\n  would say \"dozen\"=12. That means: (1) gram/mol is exactly the same as amu,\n  and Boltzmann constant is exactly the same as the ideal gas constant, and so\n  on. (2) You should rarely need to use Avogadro's number ``NA`` -- it is just a\n  synonym of ``mol`` (``NA = mol ~ 6e23``). Here are a few examples using moles: ::\n\n      from numericalunits import um, uM, kcal, mol, fmol, J\n\n      # There are eight copies of a protein inside a yeast nucleus of volume\n      # 3 cubic microns. What is the concentration of the protein, in micromolar (uM)?\n      print((8. / (3 * um**3)) / uM)   # Answer --> 0.0044\n\n      # 5 kcal / mol is how many joules?\n      print((5. * kcal / mol) / J)   # Answer --> 3.47e-20\n\n      # How many molecules are in 2.3 femtomoles?\n      print(2.3 * fmol)   # Answer --> 1.39e9\n\n* The package cannot convert temperatures between Fahrenheit, Celsius, and \n  kelvin. The reason is that these scales have different zeros, so the units \n  cannot be treated as multiplicative factors. It is, however, possible to \n  convert temperature *intervals*, via the units ``degCinterval`` (which is a \n  synonym of kelvin, ``K``) and ``degFinterval``.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/numericalunits", "keywords": "units,quantities,physical constants,dimensional analysis", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "numericalunits", "package_url": "https://pypi.org/project/numericalunits/", "platform": "", "project_url": "https://pypi.org/project/numericalunits/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/numericalunits"}, "release_url": "https://pypi.org/project/numericalunits/1.24/", "requires_dist": null, "requires_python": "", "summary": "A package that lets you define quantities with units, which can then be used in almost any numerical calculation in any programming language. Checks that calculations pass dimensional analysis, performs unit conversions, and defines physical constants.", "version": "1.24", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://pypi.python.org/pypi/numericalunits\" rel=\"nofollow\">Package homepage at PyPI</a> \u2013\n<a href=\"http://github.com/sbyrnes321/numericalunits\" rel=\"nofollow\">Source code at github</a> \u2013\nWritten by <a href=\"http://sjbyrnes.com\" rel=\"nofollow\">Steve Byrnes</a></p>\n<p>This package implements units and dimensional analysis in an unconventional\nway that has the following unique advantages:</p>\n<ul>\n<li><strong>Compatible with everything:</strong> Compatible with virtually any numerical\ncalculation routine, including numpy and scipy, and even including routines\nnot written in Python! That means, for example, if you have a decades-old\nclosed-source C routine for numerical integration, you can pass it a\nquantity with units of velocity and an integration range with units of\ntime, and the final answer will magically have units of distance. This\nextreme compatibility is possible because if the variable <tt>x</tt> represents\na quantity with dimensions (like \u201c3.3 kg\u201d), <tt>x</tt> is actually stored\ninternally as an ordinary floating-point number. The dimension is\nencoded in the value as a multiplicative factor. When two numbers are\nmultiplied, their dimensions are automatically multiplied, and so on.</li>\n<li><strong>Modular and non-intrusive:</strong> When you input data, you say what units\nthey are in. When you display results, you say what units you want to\ndisplay them in. These steps are very little trouble, and in fact help you\ncreate nice, self-documenting code. Other than that, you have to do nothing\nat all to pass dimensionful quantities into and out of any already-written\nprograms or routines.</li>\n<li><strong>Powerful tool for debugging:</strong> Not <em>all</em> calculation mistakes cause\nviolations of dimensional analysis, but <em>most</em> do\u2013for example, if you\naccidentally multiply two lengths instead of adding them, the result will\nhave the wrong dimension. If you use this package, it will alert you to\nthese sorts of mistakes.</li>\n<li><strong>Zero storage overhead</strong></li>\n<li><strong>Zero calculation overhead</strong></li>\n</ul>\n<p>These great features come with the disadvantage that the interface is less\n<em>slick</em> than other unit packages. If you have a quantity with units, you\ncannot directly see what the units are. You are supposed to already know\nwhat the units are, and then the package will tell you whether you made a\nmistake. Even worse, you only get alerted to the mistake after running a\ncalculation all the way through twice.</p>\n<p>Therefore the package is <em>not</em> suggested for students exploring how units work.\nIt <em>is</em> suggested for engineering and science professionals who want to make\ntheir code more self-documenting and self-debugging.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install from PyPI:</p>\n<pre>pip install numericalunits\n</pre>\n<p>Alternatively\u2014since it\u2019s a single module that requires no setup or\ncompilation\u2014you can download <tt>numericalunits.py</tt> from <a href=\"http://pypi.python.org/pypi/numericalunits\" rel=\"nofollow\">PyPI</a> or <a href=\"http://github.com/sbyrnes321/numericalunits\" rel=\"nofollow\">github</a> and use it directly.</p>\n</div>\n<div id=\"usage-and-examples\">\n<h2>Usage and examples</h2>\n<p>To assign a unit to a quantity, <strong>multiply</strong> by the unit, e.g.\n<tt>my_length = 100 * mm</tt>. (In normal text you would write \u201c100 mm\u201d, but\nunfortunately Python does not have \u201cimplied multiplication\u201d.)</p>\n<p>To express a dimensionful quantity in a certain unit, <strong>divide</strong> by that unit,\ne.g. when you see <tt>my_length / cm</tt>, you pronounce it \u201cmy_length expressed\nin cm\u201d.</p>\n<p>Unit errors, like trying to add a length to a mass, will not <em>immediately</em>\nannounce themselves as unit errors. Instead, you need to run the whole\ncalculation twice (in a new Python session each time). If you get the\nsame final answers both times, then congratulations, all your calculations\nare almost guaranteed to pass dimensional analysis! If you get different\nanswers every time you run, then you made a unit error! It is up to you to\nfigure out where and what the error is.</p>\n<p><strong>Example 1:</strong> What is 5 mL expressed in cubic nanometers?:</p>\n<pre>from numericalunits import mL, nm\nx = 5 * mL  # \"Read: x is equal to 5 milliliters\"\nprint(x / nm**3)   # \"Read: x expressed in cubic nanometers is...\" --&gt; 5e21\n</pre>\n<p><strong>Example 2:</strong> An electron is in a 1e5 V/cm electric field. What is its\nacceleration? (Express the answer in m/s^2.)</p>\n<pre>from numericalunits import V, cm, e, me, m, s\nEfield = 1e5 * (V / cm)\nforce = e * Efield # (e is the elementary charge)\naccel = force / me # (me is the electron mass)\nprint(accel / (m / s**2)) # Answer --&gt; 1.7588e18\n</pre>\n<p><strong>Example 3:</strong> You measured a voltage as a function of the position of dial:\n10 volts when the dial is at 1cm, 11 volts when the dial is at 2cm, etc.\netc. Interpolate from this data to get the expected voltage when the dial is\nat 41mm, and express the answer in mV.</p>\n<pre>from numericalunits import cm, V, mm, mV\nfrom numpy import array\nfrom scipy.interpolate import interp1d\nvoltage_data = array([[1 * cm, 10 * V],\n                      [2 * cm, 11 * V],\n                      [3 * cm, 13 * V],\n                      [4 * cm, 16 * V],\n                      [5 * cm, 18 * V]])\nf = interp1d(voltage_data[:,0], voltage_data[:,1])\nprint(f(41 * mm) / mV) # Answer --&gt; 16200\n</pre>\n<p><strong>Example 4:</strong> A unit mistake \u2026 what is 1 cm expressed in atmospheres?</p>\n<pre>from numericalunits import cm, atm\nprint((1 * cm) / atm) # --&gt; a randomly-varying number\n# The answer randomly varies every time you run this (in a new Python\n# session), indicating that you are violating dimensional analysis.\n</pre>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>A complete set of independent base units (meters, kilograms, seconds,\ncoulombs, kelvins) are defined as randomly-chosen positive floating-point\nnumbers. All other units and constants are defined in terms of those. In a\ndimensionally-correct calculation, the units all cancel out, so the final\nanswer is deterministic, not random. In a dimensionally-incorrect\ncalculations, there will be random factors causing a randomly-varying final\nanswer.</p>\n</div>\n<div id=\"included-units-and-constants\">\n<h2>Included units and constants</h2>\n<p>Includes a variety of common units, both SI and non-SI, everything from\nfrequency to magnetic flux. Also includes common physical constants like\nPlanck\u2019s constant and the speed of light. Browse the source code to see a\ncomplete list. It is very easy to add in any extra units and constants that\nwere left out.</p>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<div id=\"notes-on-implementation-and-use\">\n<h3>Notes on implementation and use</h3>\n<ul>\n<li><strong>What does it mean to \u201crun the calculation again in a new Python\nsession?\u201d</strong> You know that you\u2019ve started a new Python session if all\nthe variable definitions have been forgotten. Three examples: In Spyder, each \u201cConsole\u201d\ntab is its own session. In Jupyter, make a new Python session by selecting\n\u201cRestart kernel\u201d. From the command line, each time you type\n<tt>python blah.py</tt>, you are opening a new Python session.</li>\n<li>For little, self-contained calculations (a few lines that are all within a\nsingle module), it is possible to check the units without opening a new Python\nsession: Run the function <tt>numericalunits.reset_units()</tt> at the beginning of\nthe calculation before any variables are defined; then check for\ndimensional errors by re-running the whole calculation (including the\n<tt>reset_units()</tt> part). Note that if you are using <tt>from</tt>-style imports,\nlike <tt>from numericalunits import cm</tt>, you need to put them <em>after</em>\n<tt>reset_units()</tt> in the code.</li>\n<li>While debugging a program, it may be annoying to have intermediate values\nin the calculation that randomly vary every time you run the program. In\nthis case, you can use <tt><span class=\"pre\">reset_units('SI')</span></tt> instead of the normal\n<tt>reset_units()</tt>. This puts all dimensionful variables in standard (MKS)\nSI units: All times are in seconds, all lengths are in meters, all forces\nare in newtons, etc. Alternatively, <tt>reset_units(123)</tt> uses <tt>123</tt> as\nthe seed for the random-number generator. Obviously, in these modes, you\nwill <em>not</em> get any indication of dimensional-analysis errors. As above,\nif you are going to use any version of <tt>reset_units()</tt>, make sure you do\nit before any dimensionful variable is defined in any module.</li>\n<li>There are very rare, strange cases where the final answer does not seem to\nrandomly vary even though there was a dimensional-analysis violation: For\nexample, the expression <tt>(1 + <span class=\"pre\">1e-50</span> * cm / atm)</tt> fails dimensional\nanalysis, so if you calculate it the answer is randomly-varying. But, it is\nonly randomly varying around the 50th decimal point, so the variation is\nhidden from view. You would not notice it as an error.</li>\n<li>Since units are normal Python <tt>float</tt>-type numbers, they follow the normal\ncasting rules. For example, <tt>2 * cm</tt> is a python <tt>float</tt>, not an <tt>int</tt>.\nThis is usually what you would want and expect.</li>\n<li>You can give a dimension to complex numbers in the same way as real\nnumbers\u2013for example <tt>(2.1e3 + 3.9e4j) * ohm</tt>.</li>\n<li>Should be compatible with any Python version 2.x or 3.x. If you find bugs,\nplease tell me by <a href=\"http://sjbyrnes.com\" rel=\"nofollow\">email</a> or\n<a href=\"https://github.com/sbyrnes321/numericalunits/issues\" rel=\"nofollow\">github issue board</a>.</li>\n<li>If you get overflows or underflows, you can edit the unit initializations.\nFor example, the package sets the meter to a random numerical value between 0.1\nand 10. Therefore, if you\u2019re doing molecular simulation, most lengths you\nuse will be tiny numbers. You should probably set the meter instead to be\nbetween, say, a random numerical value between 1e8 and 1e10.</li>\n<li>Some numerical routines use a default <em>absolute</em> tolerance, rather than\nrelative tolerance, to decide convergence. This can cause the calculation\nresult to randomly vary even though there is no dimensional analysis error.\nWhen this happens, you should set the absolute tolerance to a value with the\nappropriate units. Alternatively, you can scale the data before running the\nalgorithm and scale it back afterwards. Maybe this sounds like a hassle, but\nit\u2019s actually a benefit: If your final result is very sensitive to some\nnumerical tolerance setting, then you really want to be aware of that.</li>\n</ul>\n</div>\n<div id=\"notes-on-unit-definitions\">\n<h3>Notes on unit definitions</h3>\n<ul>\n<li><p>For electromagnetism, all units are intended for use in SI formulas. If\nyou plug them into cgs-gaussian electromagnetism formulas, or cgs-esu\nelectromagnetism formulas, etc., you will get nonsense results.</p>\n</li>\n<li><p>The package does not keep track of \u201cradians\u201d as an independent unit\nassigned a random number. The reason is that the \u201cradians\u201d factor does not\nalways neatly cancel out of formulas.</p>\n</li>\n<li><p>The package does not keep track of \u201cmoles\u201d as an independent unit assigned\na random number; instead <tt>mol</tt> is just a pure number (~6e23), like you\nwould say \u201cdozen\u201d=12. That means: (1) gram/mol is exactly the same as amu,\nand Boltzmann constant is exactly the same as the ideal gas constant, and so\non. (2) You should rarely need to use Avogadro\u2019s number <tt>NA</tt> \u2013 it is just a\nsynonym of <tt>mol</tt> (<tt>NA = mol ~ 6e23</tt>). Here are a few examples using moles:</p>\n<pre>from numericalunits import um, uM, kcal, mol, fmol, J\n\n# There are eight copies of a protein inside a yeast nucleus of volume\n# 3 cubic microns. What is the concentration of the protein, in micromolar (uM)?\nprint((8. / (3 * um**3)) / uM)   # Answer --&gt; 0.0044\n\n# 5 kcal / mol is how many joules?\nprint((5. * kcal / mol) / J)   # Answer --&gt; 3.47e-20\n\n# How many molecules are in 2.3 femtomoles?\nprint(2.3 * fmol)   # Answer --&gt; 1.39e9\n</pre>\n</li>\n<li><p>The package cannot convert temperatures between Fahrenheit, Celsius, and\nkelvin. The reason is that these scales have different zeros, so the units\ncannot be treated as multiplicative factors. It is, however, possible to\nconvert temperature <em>intervals</em>, via the units <tt>degCinterval</tt> (which is a\nsynonym of kelvin, <tt>K</tt>) and <tt>degFinterval</tt>.</p>\n</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6220257, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "c850ee381fff4f49b8f25e84310979cf", "sha256": "ad0047603dd1bd98a08003daa4679de35b116fe8be849afb7c86c9a1606d1959"}, "downloads": -1, "filename": "numericalunits-1.0.tar.gz", "has_sig": false, "md5_digest": "c850ee381fff4f49b8f25e84310979cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10737, "upload_time": "2012-07-09T16:50:42", "upload_time_iso_8601": "2012-07-09T16:50:42.347908Z", "url": "https://files.pythonhosted.org/packages/f3/2e/b349aa3e352ceb97ccb69eb3df0bbfd4b07e5225e79a24b733f53285c2e2/numericalunits-1.0.tar.gz", "yanked": false}], "1.01": [{"comment_text": "", "digests": {"md5": "2abc6c1c37d34a714cd232cb7b68c43a", "sha256": "6b5fe26e7e95bb948e5a635c0a4058363c860190b2406df78ce86e79e49d7d13"}, "downloads": -1, "filename": "numericalunits-1.01.tar.gz", "has_sig": false, "md5_digest": "2abc6c1c37d34a714cd232cb7b68c43a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10919, "upload_time": "2012-07-09T17:53:01", "upload_time_iso_8601": "2012-07-09T17:53:01.071029Z", "url": "https://files.pythonhosted.org/packages/04/52/c17fe662206d5ee59d46bf011e39d8f7bc7756d559934da60ecd9aba9abb/numericalunits-1.01.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "d98822a70988dbfe909a00e5db7bfa04", "sha256": "a5739ad23859c6c7691bfae67ec12f39cc954a90ad814006075f9356d17681b2"}, "downloads": -1, "filename": "numericalunits-1.1.tar.gz", "has_sig": false, "md5_digest": "d98822a70988dbfe909a00e5db7bfa04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10968, "upload_time": "2013-02-20T19:46:55", "upload_time_iso_8601": "2013-02-20T19:46:55.927750Z", "url": "https://files.pythonhosted.org/packages/81/f8/87a8caffb4fd20abdecdccbaff77932f8e4adba7dd1a7b32cf167c87ca9f/numericalunits-1.1.tar.gz", "yanked": false}], "1.11": [{"comment_text": "", "digests": {"md5": "8baeebd01e5fda9daf861e6d5c93e195", "sha256": "f6b885e768d0e76babf40b3188443afefe4caed2e7afb875a3472674f30808a1"}, "downloads": -1, "filename": "numericalunits-1.11.tar.gz", "has_sig": false, "md5_digest": "8baeebd01e5fda9daf861e6d5c93e195", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13401, "upload_time": "2013-02-21T13:02:40", "upload_time_iso_8601": "2013-02-21T13:02:40.519099Z", "url": "https://files.pythonhosted.org/packages/46/68/a113821b972306050e98fc267f0d8c05c06b14f18dc641f5b3ec10680e71/numericalunits-1.11.tar.gz", "yanked": false}], "1.12": [{"comment_text": "", "digests": {"md5": "603218e2c992b02374fa713cb683691b", "sha256": "ee33132a3599b57f0bd34c20db537b934e015a9ffbae6375e994a780b1abd0d5"}, "downloads": -1, "filename": "numericalunits-1.12.tar.gz", "has_sig": false, "md5_digest": "603218e2c992b02374fa713cb683691b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13450, "upload_time": "2013-06-23T01:47:05", "upload_time_iso_8601": "2013-06-23T01:47:05.688510Z", "url": "https://files.pythonhosted.org/packages/8b/ca/e8114c7e853ce9472c87748cc66f08569f879ded8ed573435be76f0f055e/numericalunits-1.12.tar.gz", "yanked": false}], "1.13": [{"comment_text": "", "digests": {"md5": "04f5c6df1e05e1b148ca19c01c531ec9", "sha256": "eda0dd7276b692e3794c21f00b9cf9ce9463db16cbf1381b813856ed6e7623a9"}, "downloads": -1, "filename": "numericalunits-1.13.tar.gz", "has_sig": false, "md5_digest": "04f5c6df1e05e1b148ca19c01c531ec9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13825, "upload_time": "2013-08-24T13:00:41", "upload_time_iso_8601": "2013-08-24T13:00:41.397344Z", "url": "https://files.pythonhosted.org/packages/cc/5f/89a468e9dec1cd1ab39d0df5f76a79961c5e70f320d1cb70507c0b817e93/numericalunits-1.13.tar.gz", "yanked": false}], "1.14": [{"comment_text": "", "digests": {"md5": "4bca58bd03da36bc9a9ea1deb2e68e0d", "sha256": "ec38bc106686a1b2c05e7b0aef8a5fef44d1b0bfbeae735d41806a8efd57bc15"}, "downloads": -1, "filename": "numericalunits-1.14.tar.gz", "has_sig": false, "md5_digest": "4bca58bd03da36bc9a9ea1deb2e68e0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12164, "upload_time": "2016-02-20T02:31:23", "upload_time_iso_8601": "2016-02-20T02:31:23.665366Z", "url": "https://files.pythonhosted.org/packages/31/5b/7c08b389c70cf7fc4a8441dfe9219ee7eb5d3c9de3b99b2389c98ba09f82/numericalunits-1.14.tar.gz", "yanked": false}], "1.15": [{"comment_text": "", "digests": {"md5": "9b2ceb750632f4b01d428ee08005e5a5", "sha256": "f423030c9fd8e7781f0b326c34d37eb7294205239e160f8a7dbe29a614937bd0"}, "downloads": -1, "filename": "numericalunits-1.15.tar.gz", "has_sig": false, "md5_digest": "9b2ceb750632f4b01d428ee08005e5a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12342, "upload_time": "2016-07-09T19:24:30", "upload_time_iso_8601": "2016-07-09T19:24:30.795412Z", "url": "https://files.pythonhosted.org/packages/3d/6d/ac71092686e162f3d13ea8f94d3b1af1d4f61b7d02b41035c16d5b5f943d/numericalunits-1.15.tar.gz", "yanked": false}], "1.16": [{"comment_text": "", "digests": {"md5": "b7982dea415ace75b014733d19ca2a60", "sha256": "71ae8e236c7a223bccefffb670dca68be476dd63b7b9009641fc64099455da25"}, "downloads": -1, "filename": "numericalunits-1.16.tar.gz", "has_sig": false, "md5_digest": "b7982dea415ace75b014733d19ca2a60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13092, "upload_time": "2016-12-26T01:54:40", "upload_time_iso_8601": "2016-12-26T01:54:40.180761Z", "url": "https://files.pythonhosted.org/packages/9f/18/05d8230bf83a710f94c362a572dc1adbaa593799b23cb480f42a6d2f52cc/numericalunits-1.16.tar.gz", "yanked": false}], "1.17": [{"comment_text": "", "digests": {"md5": "a51f6a58e719a31cf13654cff3d47727", "sha256": "6cc4042cb98d1acb5130766191fa810f709d98e0b6b01fc07699a4659118cb88"}, "downloads": -1, "filename": "numericalunits-1.17-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a51f6a58e719a31cf13654cff3d47727", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 18041, "upload_time": "2017-07-23T00:58:44", "upload_time_iso_8601": "2017-07-23T00:58:44.894030Z", "url": "https://files.pythonhosted.org/packages/89/2a/950938408b4eb49649802e49646c37a7caa57364e54dc2d832a71923475d/numericalunits-1.17-py2.py3-none-any.whl", "yanked": false}], "1.18": [{"comment_text": "", "digests": {"md5": "f935743711c7d76b25bcac6e58a185b8", "sha256": "692fdf0914f383a5c46629e86f0c255b3df725c34dfa4166d49ec6569e9bbe3a"}, "downloads": -1, "filename": "numericalunits-1.18-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f935743711c7d76b25bcac6e58a185b8", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 18176, "upload_time": "2017-11-11T18:39:31", "upload_time_iso_8601": "2017-11-11T18:39:31.760385Z", "url": "https://files.pythonhosted.org/packages/5a/77/a8642d7ca616efb6551936b15416e074e0cf435035e64e54e6be39f41cdc/numericalunits-1.18-py2.py3-none-any.whl", "yanked": false}], "1.19": [{"comment_text": "", "digests": {"md5": "a7029aabbfa189b73ff4a6dd7df21527", "sha256": "8669a4b3d6a46976804b833fd4c42f341b1a4da6d8f357d83155b5fbdc99cbb4"}, "downloads": -1, "filename": "numericalunits-1.19-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a7029aabbfa189b73ff4a6dd7df21527", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 18030, "upload_time": "2017-11-12T18:18:36", "upload_time_iso_8601": "2017-11-12T18:18:36.289919Z", "url": "https://files.pythonhosted.org/packages/35/82/391f8672e9e21e4480869b4086bc95ef3c85ef8f2338f37a5c32fcc96a2c/numericalunits-1.19-py2.py3-none-any.whl", "yanked": false}], "1.21": [{"comment_text": "", "digests": {"md5": "571185df9f23ce8159eb5ce391567581", "sha256": "d6e519e534ae37daf9db8c81075f40e0e1f1bbf6786768fdda35fd7d25a837be"}, "downloads": -1, "filename": "numericalunits-1.21-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "571185df9f23ce8159eb5ce391567581", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 18095, "upload_time": "2018-02-07T13:24:25", "upload_time_iso_8601": "2018-02-07T13:24:25.114199Z", "url": "https://files.pythonhosted.org/packages/5d/92/653cf03ac52739bc09e7b589e92c6f848c30884fb56474aedb518e474a64/numericalunits-1.21-py2.py3-none-any.whl", "yanked": false}], "1.22": [{"comment_text": "", "digests": {"md5": "d23c8bfa40a789bce1efb10d223fbc0e", "sha256": "76c95de0a72fed26e40758bb45b610610abc0102770620c749b3222dc55a63e3"}, "downloads": -1, "filename": "numericalunits-1.22-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d23c8bfa40a789bce1efb10d223fbc0e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13065, "upload_time": "2018-11-04T19:39:57", "upload_time_iso_8601": "2018-11-04T19:39:57.420864Z", "url": "https://files.pythonhosted.org/packages/65/6a/8085c924998762dd5b17821b5771834d585686e0e4d4ac7ceabf30ba3f7b/numericalunits-1.22-py2.py3-none-any.whl", "yanked": false}], "1.23": [{"comment_text": "", "digests": {"md5": "764848bdb2895c5645fd0b18d7b1a7cc", "sha256": "3cd54bf52f81ee7c7e335386a08e49d4c00e29925cc4307e5450651645c2eb73"}, "downloads": -1, "filename": "numericalunits-1.23-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "764848bdb2895c5645fd0b18d7b1a7cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13050, "upload_time": "2019-05-24T01:18:25", "upload_time_iso_8601": "2019-05-24T01:18:25.824464Z", "url": "https://files.pythonhosted.org/packages/23/b6/e2ea5baff66e7f5408822322a9f86470396ea5db2b4b03512fa3b69bf81f/numericalunits-1.23-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4b491bcf2ca30f265b66956faaa8c15", "sha256": "fe09fbfb72468c2813587b0484542e26dd0a4283c1005c9840f24cd0fbcf32e0"}, "downloads": -1, "filename": "numericalunits-1.23.tar.gz", "has_sig": false, "md5_digest": "a4b491bcf2ca30f265b66956faaa8c15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14553, "upload_time": "2019-05-24T01:18:27", "upload_time_iso_8601": "2019-05-24T01:18:27.879805Z", "url": "https://files.pythonhosted.org/packages/e3/6f/e663461fe45321dfee02ce9f1dd5e4ed9c7885829791f0aea91daf6cedef/numericalunits-1.23.tar.gz", "yanked": false}], "1.24": [{"comment_text": "", "digests": {"md5": "860980853d136ab941fb13af475e7eb3", "sha256": "103e595608e59c433bf8ae5c9338306aefcda037278d696d6bb5824d11fd7d88"}, "downloads": -1, "filename": "numericalunits-1.24-py3-none-any.whl", "has_sig": false, "md5_digest": "860980853d136ab941fb13af475e7eb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13141, "upload_time": "2019-11-30T02:13:04", "upload_time_iso_8601": "2019-11-30T02:13:04.690035Z", "url": "https://files.pythonhosted.org/packages/ed/be/007e74e8f246e7e23296311adc7391b9e35d4cf37f0b26ca11bdc158cafb/numericalunits-1.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55eca0410da349d8a11b28537e9b0065", "sha256": "1a069e03036b3b68d48c6b02ab7e9ea90ccf01bbc83688ed3319f70c2e9ec772"}, "downloads": -1, "filename": "numericalunits-1.24.tar.gz", "has_sig": false, "md5_digest": "55eca0410da349d8a11b28537e9b0065", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15164, "upload_time": "2019-11-30T02:13:06", "upload_time_iso_8601": "2019-11-30T02:13:06.117301Z", "url": "https://files.pythonhosted.org/packages/47/02/1014ce622e51c338cdf9afe550cc23d924c0b77f23f5e0de151bd08b7e9d/numericalunits-1.24.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "860980853d136ab941fb13af475e7eb3", "sha256": "103e595608e59c433bf8ae5c9338306aefcda037278d696d6bb5824d11fd7d88"}, "downloads": -1, "filename": "numericalunits-1.24-py3-none-any.whl", "has_sig": false, "md5_digest": "860980853d136ab941fb13af475e7eb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13141, "upload_time": "2019-11-30T02:13:04", "upload_time_iso_8601": "2019-11-30T02:13:04.690035Z", "url": "https://files.pythonhosted.org/packages/ed/be/007e74e8f246e7e23296311adc7391b9e35d4cf37f0b26ca11bdc158cafb/numericalunits-1.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55eca0410da349d8a11b28537e9b0065", "sha256": "1a069e03036b3b68d48c6b02ab7e9ea90ccf01bbc83688ed3319f70c2e9ec772"}, "downloads": -1, "filename": "numericalunits-1.24.tar.gz", "has_sig": false, "md5_digest": "55eca0410da349d8a11b28537e9b0065", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15164, "upload_time": "2019-11-30T02:13:06", "upload_time_iso_8601": "2019-11-30T02:13:06.117301Z", "url": "https://files.pythonhosted.org/packages/47/02/1014ce622e51c338cdf9afe550cc23d924c0b77f23f5e0de151bd08b7e9d/numericalunits-1.24.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:14 2020"}