{"info": {"author": "OpenCensus Authors", "author_email": "census-developers@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "OpenCensus Azure Monitor Exporters\n============================================================================\n\n|pypi|\n\n.. |pypi| image:: https://badge.fury.io/py/opencensus-ext-azure.svg\n   :target: https://pypi.org/project/opencensus-ext-azure/\n\nInstallation\n------------\n\n::\n\n    pip install opencensus-ext-azure\n\nUsage\n-----\n\nLog\n~~~\n\nThe **Azure Monitor Log Handler** allows you to export Python logs to `Azure Monitor`_.\n\nThis example shows how to send a warning level log to Azure Monitor.\n\n* Create an Azure Monitor resource and get the instrumentation key, more information can be found `here <https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource>`_.\n* Place your instrumentation key in a `connection string` and directly into your code.\n* Alternatively, you can specify your `connection string` in an environment variable ``APPLICATIONINSIGHTS_CONNECTION_STRING``.\n\n.. code:: python\n\n    import logging\n\n    from opencensus.ext.azure.log_exporter import AzureLogHandler\n\n    logger = logging.getLogger(__name__)\n    logger.addHandler(AzureLogHandler(connection_string='InstrumentationKey=<your-instrumentation_key-here>'))\n    logger.warning('Hello, World!')\n\nCorrelation\n###########\n\nYou can enrich the logs with trace IDs and span IDs by using the `logging integration <../opencensus-ext-logging>`_.\n\n* Create an Azure Monitor resource and get the instrumentation key, more information can be found `here <https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource>`_.\n* Install the `logging integration package <../opencensus-ext-logging>`_ using ``pip install opencensus-ext-logging``.\n* Place your instrumentation key in a `connection string` and directly into your code.\n* Alternatively, you can specify your `connection string` in an environment variable ``APPLICATIONINSIGHTS_CONNECTION_STRING``.\n\n.. code:: python\n\n    import logging\n\n    from opencensus.ext.azure.log_exporter import AzureLogHandler\n    from opencensus.ext.azure.trace_exporter import AzureExporter\n    from opencensus.trace import config_integration\n    from opencensus.trace.samplers import ProbabilitySampler\n    from opencensus.trace.tracer import Tracer\n\n    config_integration.trace_integrations(['logging'])\n\n    logger = logging.getLogger(__name__)\n\n    handler = AzureLogHandler(connection_string='InstrumentationKey=<your-instrumentation_key-here>')\n    handler.setFormatter(logging.Formatter('%(traceId)s %(spanId)s %(message)s'))\n    logger.addHandler(handler)\n\n    tracer = Tracer(\n        exporter=AzureExporter(connection_string='InstrumentationKey=<your-instrumentation_key-here>'),\n        sampler=ProbabilitySampler(1.0)\n    )\n\n    logger.warning('Before the span')\n    with tracer.span(name='test'):\n        logger.warning('In the span')\n    logger.warning('After the span')\n\nCustom Properties\n#################\n\nYou can also add custom properties to your log messages in the *extra* keyword argument using the custom_dimensions field.\n\nWARNING: For this feature to work, you need to pass a dictionary to the custom_dimensions field. If you pass arguments of any other type, the logger will ignore them.\n\n.. code:: python\n\n    import logging\n\n    from opencensus.ext.azure.log_exporter import AzureLogHandler\n\n    logger = logging.getLogger(__name__)\n    logger.addHandler(AzureLogHandler(connection_string='InstrumentationKey=<your-instrumentation_key-here>'))\n\n    properties = {'custom_dimensions': {'key_1': 'value_1', 'key_2': 'value_2'}}\n    logger.warning('action', extra=properties)\n\nModifying Logs\n##############\n\n* You can pass a callback function to the exporter to process telemetry before it is exported.\n* Your callback function can return `False` if you do not want this envelope exported.\n* Your callback function must accept an [envelope](https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#L86) data type as its parameter.\n* You can see the schema for Azure Monitor data types in the envelopes [here](https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py).\n* The `AzureLogHandler` handles `ExceptionData` and `MessageData` data types.\n\n.. code:: python\n\n    import logging\n\n    from opencensus.ext.azure.log_exporter import AzureLogHandler\n\n    logger = logging.getLogger(__name__)\n\n    # Callback function to append '_hello' to each log message telemetry\n    def callback_function(envelope):\n        envelope.data.baseData.message += '_hello'\n        return True\n\n    handler = AzureLogHandler(connection_string='InstrumentationKey=<your-instrumentation_key-here>')\n    handler.add_telemetry_processor(callback_function)\n    logger.addHandler(handler)\n    logger.warning('Hello, World!')\n\n\nMetrics\n~~~~~~~\n\nThe **Azure Monitor Metrics Exporter** allows you to export metrics to `Azure Monitor`_.\n\n* Create an Azure Monitor resource and get the instrumentation key, more information can be found `here <https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource>`_.\n* Place your instrumentation key in a `connection string` and directly into your code.\n* Alternatively, you can specify your `connection string` in an environment variable ``APPLICATIONINSIGHTS_CONNECTION_STRING``.\n\n.. code:: python\n\n    import time\n\n    from opencensus.ext.azure import metrics_exporter\n    from opencensus.stats import aggregation as aggregation_module\n    from opencensus.stats import measure as measure_module\n    from opencensus.stats import stats as stats_module\n    from opencensus.stats import view as view_module\n    from opencensus.tags import tag_map as tag_map_module\n\n    stats = stats_module.stats\n    view_manager = stats.view_manager\n    stats_recorder = stats.stats_recorder\n\n    CARROTS_MEASURE = measure_module.MeasureInt(\"carrots\",\n                                                \"number of carrots\",\n                                                \"carrots\")\n    CARROTS_VIEW = view_module.View(\"carrots_view\",\n                                    \"number of carrots\",\n                                    [],\n                                    CARROTS_MEASURE,\n                                    aggregation_module.CountAggregation())\n\n    def main():\n        # Enable metrics\n        # Set the interval in seconds in which you want to send metrics\n        exporter = metrics_exporter.new_metrics_exporter(connection_string='InstrumentationKey=<your-instrumentation-key-here>')\n        view_manager.register_exporter(exporter)\n\n        view_manager.register_view(CARROTS_VIEW)\n        mmap = stats_recorder.new_measurement_map()\n        tmap = tag_map_module.TagMap()\n\n        mmap.measure_int_put(CARROTS_MEASURE, 1000)\n        mmap.record(tmap)\n        # Default export interval is every 15.0s\n        # Your application should run for at least this amount\n        # of time so the exporter will meet this interval\n        # Sleep can fulfill this\n        time.sleep(60)\n\n        print(\"Done recording metrics\")\n\n    if __name__ == \"__main__\":\n        main()\n\nStandard Metrics\n################\n\nThe exporter also includes a set of standard metrics that are exported to Azure Monitor by default.\n\n.. code:: python\n\n    import psutil\n    import time\n\n    from opencensus.ext.azure import metrics_exporter\n\n    def main():\n        # All you need is the next line. You can disable standard metrics by\n        # passing in enable_standard_metrics=False into the constructor of\n        # new_metrics_exporter() \n        _exporter = metrics_exporter.new_metrics_exporter(connection_string='InstrumentationKey=<your-instrumentation-key-here>')\n\n        for i in range(100):\n            print(psutil.virtual_memory())\n            time.sleep(5)\n\n        print(\"Done recording metrics\")\n\n    if __name__ == \"__main__\":\n        main()\n\nBelow is a list of standard metrics that are currently available:\n\n- Available Memory (bytes)\n- CPU Processor Time (percentage)\n- Incoming Request Rate (per second)\n- Incoming Request Average Execution Time (milliseconds)\n- Outgoing Request Rate (per second)\n- Process CPU Usage (percentage)\n- Process Private Bytes (bytes)\n\nModifying Metrics\n#################\n\n* You can pass a callback function to the exporter to process telemetry before it is exported.\n* Your callback function can return `False` if you do not want this envelope exported.\n* Your callback function must accept an [envelope](https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#L86) data type as its parameter.\n* You can see the schema for Azure Monitor data types in the envelopes [here](https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py).\n* The `MetricsExporter` handles `MetricData` data types.\n\n.. code:: python\n\n    import time\n\n    from opencensus.ext.azure import metrics_exporter\n    from opencensus.stats import aggregation as aggregation_module\n    from opencensus.stats import measure as measure_module\n    from opencensus.stats import stats as stats_module\n    from opencensus.stats import view as view_module\n    from opencensus.tags import tag_map as tag_map_module\n\n    stats = stats_module.stats\n    view_manager = stats.view_manager\n    stats_recorder = stats.stats_recorder\n\n    CARROTS_MEASURE = measure_module.MeasureInt(\"carrots\",\n                                                \"number of carrots\",\n                                                \"carrots\")\n    CARROTS_VIEW = view_module.View(\"carrots_view\",\n                                    \"number of carrots\",\n                                    [],\n                                    CARROTS_MEASURE,\n                                    aggregation_module.CountAggregation())\n\n    # Callback function to only export the metric if value is greater than 0\n    def callback_function(envelope):\n        return envelope.data.baseData.metrics[0].value > 0\n\n    def main():\n        # Enable metrics\n        # Set the interval in seconds in which you want to send metrics\n        exporter = metrics_exporter.new_metrics_exporter(connection_string='InstrumentationKey=<your-instrumentation-key-here>')\n        exporter.add_telemetry_processor(callback_function)\n        view_manager.register_exporter(exporter)\n\n        view_manager.register_view(CARROTS_VIEW)\n        mmap = stats_recorder.new_measurement_map()\n        tmap = tag_map_module.TagMap()\n\n        mmap.measure_int_put(CARROTS_MEASURE, 1000)\n        mmap.record(tmap)\n        # Default export interval is every 15.0s\n        # Your application should run for at least this amount\n        # of time so the exporter will meet this interval\n        # Sleep can fulfill this\n        time.sleep(60)\n\n        print(\"Done recording metrics\")\n\n    if __name__ == \"__main__\":\n        main()\n\nTrace\n~~~~~\n\nThe **Azure Monitor Trace Exporter** allows you to export `OpenCensus`_ traces to `Azure Monitor`_.\n\nThis example shows how to send a span \"hello\" to Azure Monitor.\n\n* Create an Azure Monitor resource and get the instrumentation key, more information can be found `here <https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource>`_.\n* Place your instrumentation key in a `connection string` and directly into your code.\n* Alternatively, you can specify your `connection string` in an environment variable ``APPLICATIONINSIGHTS_CONNECTION_STRING``.\n\n .. code:: python\n\n    from opencensus.ext.azure.trace_exporter import AzureExporter\n    from opencensus.trace.samplers import ProbabilitySampler\n    from opencensus.trace.tracer import Tracer\n\n    tracer = Tracer(\n        exporter=AzureExporter(\n            connection_string='InstrumentationKey=<your-instrumentation-key-here>'\n        ),\n        sampler=ProbabilitySampler(1.0)\n    )\n\n    with tracer.span(name='hello'):\n        print('Hello, World!')\n\nIntegrations\n############\n\nOpenCensus also supports several `integrations <https://github.com/census-instrumentation/opencensus-python#integration>`_ which allows OpenCensus to integrate with third party libraries.\n\nThis example shows how to integrate with the `requests <https://2.python-requests.org/en/master/>`_ library.\n\n* Create an Azure Monitor resource and get the instrumentation key, more information can be found `here <https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource>`_.\n* Install the `requests integration package <../opencensus-ext-requests>`_ using ``pip install opencensus-ext-requests``.\n* Place your instrumentation key in a `connection string` and directly into your code.\n* Alternatively, you can specify your `connection string` in an environment variable ``APPLICATIONINSIGHTS_CONNECTION_STRING``.\n\n.. code:: python\n\n    import requests\n\n    from opencensus.ext.azure.trace_exporter import AzureExporter\n    from opencensus.trace import config_integration\n    from opencensus.trace.samplers import ProbabilitySampler\n    from opencensus.trace.tracer import Tracer\n\n    config_integration.trace_integrations(['requests'])\n    tracer = Tracer(\n        exporter=AzureExporter(\n            connection_string='InstrumentationKey=<your-instrumentation-key-here>',\n        ),\n        sampler=ProbabilitySampler(1.0),\n    )\n    with tracer.span(name='parent'):\n        response = requests.get(url='https://www.wikipedia.org/wiki/Rabbit')\n\nModifying Traces\n################\n\n* You can pass a callback function to the exporter to process telemetry before it is exported.\n* Your callback function can return `False` if you do not want this envelope exported.\n* Your callback function must accept an [envelope](https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#L86) data type as its parameter.\n* You can see the schema for Azure Monitor data types in the envelopes [here](https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py).\n* The `AzureExporter` handles `Data` data types.\n\n.. code:: python\n\n    import requests\n\n    from opencensus.ext.azure.trace_exporter import AzureExporter\n    from opencensus.trace import config_integration\n    from opencensus.trace.samplers import ProbabilitySampler\n    from opencensus.trace.tracer import Tracer\n\n    config_integration.trace_integrations(['requests'])\n\n    # Callback function to add os_type: linux to span properties\n    def callback_function(envelope):\n        envelope.data.baseData.properties['os_type'] = 'linux'\n        return True\n\n    exporter = AzureExporter(\n        connection_string='InstrumentationKey=<your-instrumentation-key-here>'\n    )\n    exporter.add_telemetry_processor(callback_function)\n    tracer = Tracer(exporter=exporter, sampler=ProbabilitySampler(1.0))\n    with tracer.span(name='parent'):\n        response = requests.get(url='https://www.wikipedia.org/wiki/Rabbit')\n\nReferences\n----------\n\n* `Azure Monitor <https://docs.microsoft.com/azure/azure-monitor/>`_\n* `Examples <https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-azure/examples>`_\n* `OpenCensus Project <https://opencensus.io/>`_\n\n.. _Azure Monitor: https://docs.microsoft.com/azure/azure-monitor/\n.. _OpenCensus: https://github.com/census-instrumentation/opencensus-python/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-azure", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "opencensus-ext-azure", "package_url": "https://pypi.org/project/opencensus-ext-azure/", "platform": "", "project_url": "https://pypi.org/project/opencensus-ext-azure/", "project_urls": {"Homepage": "https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-azure"}, "release_url": "https://pypi.org/project/opencensus-ext-azure/1.0.2/", "requires_dist": ["opencensus (<1.0.0,>=0.7.0)", "psutil (>=5.6.3)", "requests (>=2.19.0)"], "requires_python": "", "summary": "OpenCensus Azure Monitor Exporter", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/opencensus-ext-azure/\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2095c53f14d30322c6b7848348592be0c40b64e4/68747470733a2f2f62616467652e667572792e696f2f70792f6f70656e63656e7375732d6578742d617a7572652e737667\"></a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install opencensus-ext-azure\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"log\">\n<h3>Log</h3>\n<p>The <strong>Azure Monitor Log Handler</strong> allows you to export Python logs to <a href=\"https://docs.microsoft.com/azure/azure-monitor/\" rel=\"nofollow\">Azure Monitor</a>.</p>\n<p>This example shows how to send a warning level log to Azure Monitor.</p>\n<ul>\n<li>Create an Azure Monitor resource and get the instrumentation key, more information can be found <a href=\"https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource\" rel=\"nofollow\">here</a>.</li>\n<li>Place your instrumentation key in a <cite>connection string</cite> and directly into your code.</li>\n<li>Alternatively, you can specify your <cite>connection string</cite> in an environment variable <tt>APPLICATIONINSIGHTS_CONNECTION_STRING</tt>.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure.log_exporter</span> <span class=\"kn\">import</span> <span class=\"n\">AzureLogHandler</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">AzureLogHandler</span><span class=\"p\">(</span><span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation_key-here&gt;'</span><span class=\"p\">))</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'Hello, World!'</span><span class=\"p\">)</span>\n</pre>\n<div id=\"correlation\">\n<h4>Correlation</h4>\n<p>You can enrich the logs with trace IDs and span IDs by using the <a href=\"../opencensus-ext-logging\" rel=\"nofollow\">logging integration</a>.</p>\n<ul>\n<li>Create an Azure Monitor resource and get the instrumentation key, more information can be found <a href=\"https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource\" rel=\"nofollow\">here</a>.</li>\n<li>Install the <a href=\"../opencensus-ext-logging\" rel=\"nofollow\">logging integration package</a> using <tt>pip install <span class=\"pre\">opencensus-ext-logging</span></tt>.</li>\n<li>Place your instrumentation key in a <cite>connection string</cite> and directly into your code.</li>\n<li>Alternatively, you can specify your <cite>connection string</cite> in an environment variable <tt>APPLICATIONINSIGHTS_CONNECTION_STRING</tt>.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure.log_exporter</span> <span class=\"kn\">import</span> <span class=\"n\">AzureLogHandler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure.trace_exporter</span> <span class=\"kn\">import</span> <span class=\"n\">AzureExporter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace</span> <span class=\"kn\">import</span> <span class=\"n\">config_integration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace.samplers</span> <span class=\"kn\">import</span> <span class=\"n\">ProbabilitySampler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace.tracer</span> <span class=\"kn\">import</span> <span class=\"n\">Tracer</span>\n\n<span class=\"n\">config_integration</span><span class=\"o\">.</span><span class=\"n\">trace_integrations</span><span class=\"p\">([</span><span class=\"s1\">'logging'</span><span class=\"p\">])</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">AzureLogHandler</span><span class=\"p\">(</span><span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation_key-here&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Formatter</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%(traceId)s</span><span class=\"s1\"> </span><span class=\"si\">%(spanId)s</span><span class=\"s1\"> </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n\n<span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"n\">Tracer</span><span class=\"p\">(</span>\n    <span class=\"n\">exporter</span><span class=\"o\">=</span><span class=\"n\">AzureExporter</span><span class=\"p\">(</span><span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation_key-here&gt;'</span><span class=\"p\">),</span>\n    <span class=\"n\">sampler</span><span class=\"o\">=</span><span class=\"n\">ProbabilitySampler</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'Before the span'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">span</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'In the span'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'After the span'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"custom-properties\">\n<h4>Custom Properties</h4>\n<p>You can also add custom properties to your log messages in the <em>extra</em> keyword argument using the custom_dimensions field.</p>\n<p>WARNING: For this feature to work, you need to pass a dictionary to the custom_dimensions field. If you pass arguments of any other type, the logger will ignore them.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure.log_exporter</span> <span class=\"kn\">import</span> <span class=\"n\">AzureLogHandler</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">AzureLogHandler</span><span class=\"p\">(</span><span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation_key-here&gt;'</span><span class=\"p\">))</span>\n\n<span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'custom_dimensions'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key_1'</span><span class=\"p\">:</span> <span class=\"s1\">'value_1'</span><span class=\"p\">,</span> <span class=\"s1\">'key_2'</span><span class=\"p\">:</span> <span class=\"s1\">'value_2'</span><span class=\"p\">}}</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'action'</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"n\">properties</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"modifying-logs\">\n<h4>Modifying Logs</h4>\n<ul>\n<li>You can pass a callback function to the exporter to process telemetry before it is exported.</li>\n<li>Your callback function can return <cite>False</cite> if you do not want this envelope exported.</li>\n<li>Your callback function must accept an [envelope](<a href=\"https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#L86\" rel=\"nofollow\">https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#L86</a>) data type as its parameter.</li>\n<li>You can see the schema for Azure Monitor data types in the envelopes [here](<a href=\"https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py\" rel=\"nofollow\">https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py</a>).</li>\n<li>The <cite>AzureLogHandler</cite> handles <cite>ExceptionData</cite> and <cite>MessageData</cite> data types.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure.log_exporter</span> <span class=\"kn\">import</span> <span class=\"n\">AzureLogHandler</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Callback function to append '_hello' to each log message telemetry</span>\n<span class=\"k\">def</span> <span class=\"nf\">callback_function</span><span class=\"p\">(</span><span class=\"n\">envelope</span><span class=\"p\">):</span>\n    <span class=\"n\">envelope</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">baseData</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">+=</span> <span class=\"s1\">'_hello'</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">AzureLogHandler</span><span class=\"p\">(</span><span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation_key-here&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">add_telemetry_processor</span><span class=\"p\">(</span><span class=\"n\">callback_function</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'Hello, World!'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"metrics\">\n<h3>Metrics</h3>\n<p>The <strong>Azure Monitor Metrics Exporter</strong> allows you to export metrics to <a href=\"https://docs.microsoft.com/azure/azure-monitor/\" rel=\"nofollow\">Azure Monitor</a>.</p>\n<ul>\n<li>Create an Azure Monitor resource and get the instrumentation key, more information can be found <a href=\"https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource\" rel=\"nofollow\">here</a>.</li>\n<li>Place your instrumentation key in a <cite>connection string</cite> and directly into your code.</li>\n<li>Alternatively, you can specify your <cite>connection string</cite> in an environment variable <tt>APPLICATIONINSIGHTS_CONNECTION_STRING</tt>.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure</span> <span class=\"kn\">import</span> <span class=\"n\">metrics_exporter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.stats</span> <span class=\"kn\">import</span> <span class=\"n\">aggregation</span> <span class=\"k\">as</span> <span class=\"n\">aggregation_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.stats</span> <span class=\"kn\">import</span> <span class=\"n\">measure</span> <span class=\"k\">as</span> <span class=\"n\">measure_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.stats</span> <span class=\"kn\">import</span> <span class=\"n\">stats</span> <span class=\"k\">as</span> <span class=\"n\">stats_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.stats</span> <span class=\"kn\">import</span> <span class=\"n\">view</span> <span class=\"k\">as</span> <span class=\"n\">view_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.tags</span> <span class=\"kn\">import</span> <span class=\"n\">tag_map</span> <span class=\"k\">as</span> <span class=\"n\">tag_map_module</span>\n\n<span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">stats_module</span><span class=\"o\">.</span><span class=\"n\">stats</span>\n<span class=\"n\">view_manager</span> <span class=\"o\">=</span> <span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">view_manager</span>\n<span class=\"n\">stats_recorder</span> <span class=\"o\">=</span> <span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">stats_recorder</span>\n\n<span class=\"n\">CARROTS_MEASURE</span> <span class=\"o\">=</span> <span class=\"n\">measure_module</span><span class=\"o\">.</span><span class=\"n\">MeasureInt</span><span class=\"p\">(</span><span class=\"s2\">\"carrots\"</span><span class=\"p\">,</span>\n                                            <span class=\"s2\">\"number of carrots\"</span><span class=\"p\">,</span>\n                                            <span class=\"s2\">\"carrots\"</span><span class=\"p\">)</span>\n<span class=\"n\">CARROTS_VIEW</span> <span class=\"o\">=</span> <span class=\"n\">view_module</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">(</span><span class=\"s2\">\"carrots_view\"</span><span class=\"p\">,</span>\n                                <span class=\"s2\">\"number of carrots\"</span><span class=\"p\">,</span>\n                                <span class=\"p\">[],</span>\n                                <span class=\"n\">CARROTS_MEASURE</span><span class=\"p\">,</span>\n                                <span class=\"n\">aggregation_module</span><span class=\"o\">.</span><span class=\"n\">CountAggregation</span><span class=\"p\">())</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Enable metrics</span>\n    <span class=\"c1\"># Set the interval in seconds in which you want to send metrics</span>\n    <span class=\"n\">exporter</span> <span class=\"o\">=</span> <span class=\"n\">metrics_exporter</span><span class=\"o\">.</span><span class=\"n\">new_metrics_exporter</span><span class=\"p\">(</span><span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation-key-here&gt;'</span><span class=\"p\">)</span>\n    <span class=\"n\">view_manager</span><span class=\"o\">.</span><span class=\"n\">register_exporter</span><span class=\"p\">(</span><span class=\"n\">exporter</span><span class=\"p\">)</span>\n\n    <span class=\"n\">view_manager</span><span class=\"o\">.</span><span class=\"n\">register_view</span><span class=\"p\">(</span><span class=\"n\">CARROTS_VIEW</span><span class=\"p\">)</span>\n    <span class=\"n\">mmap</span> <span class=\"o\">=</span> <span class=\"n\">stats_recorder</span><span class=\"o\">.</span><span class=\"n\">new_measurement_map</span><span class=\"p\">()</span>\n    <span class=\"n\">tmap</span> <span class=\"o\">=</span> <span class=\"n\">tag_map_module</span><span class=\"o\">.</span><span class=\"n\">TagMap</span><span class=\"p\">()</span>\n\n    <span class=\"n\">mmap</span><span class=\"o\">.</span><span class=\"n\">measure_int_put</span><span class=\"p\">(</span><span class=\"n\">CARROTS_MEASURE</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n    <span class=\"n\">mmap</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">tmap</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Default export interval is every 15.0s</span>\n    <span class=\"c1\"># Your application should run for at least this amount</span>\n    <span class=\"c1\"># of time so the exporter will meet this interval</span>\n    <span class=\"c1\"># Sleep can fulfill this</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Done recording metrics\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<div id=\"standard-metrics\">\n<h4>Standard Metrics</h4>\n<p>The exporter also includes a set of standard metrics that are exported to Azure Monitor by default.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">psutil</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure</span> <span class=\"kn\">import</span> <span class=\"n\">metrics_exporter</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># All you need is the next line. You can disable standard metrics by</span>\n    <span class=\"c1\"># passing in enable_standard_metrics=False into the constructor of</span>\n    <span class=\"c1\"># new_metrics_exporter()</span>\n    <span class=\"n\">_exporter</span> <span class=\"o\">=</span> <span class=\"n\">metrics_exporter</span><span class=\"o\">.</span><span class=\"n\">new_metrics_exporter</span><span class=\"p\">(</span><span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation-key-here&gt;'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">psutil</span><span class=\"o\">.</span><span class=\"n\">virtual_memory</span><span class=\"p\">())</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Done recording metrics\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Below is a list of standard metrics that are currently available:</p>\n<ul>\n<li>Available Memory (bytes)</li>\n<li>CPU Processor Time (percentage)</li>\n<li>Incoming Request Rate (per second)</li>\n<li>Incoming Request Average Execution Time (milliseconds)</li>\n<li>Outgoing Request Rate (per second)</li>\n<li>Process CPU Usage (percentage)</li>\n<li>Process Private Bytes (bytes)</li>\n</ul>\n</div>\n<div id=\"modifying-metrics\">\n<h4>Modifying Metrics</h4>\n<ul>\n<li>You can pass a callback function to the exporter to process telemetry before it is exported.</li>\n<li>Your callback function can return <cite>False</cite> if you do not want this envelope exported.</li>\n<li>Your callback function must accept an [envelope](<a href=\"https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#L86\" rel=\"nofollow\">https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#L86</a>) data type as its parameter.</li>\n<li>You can see the schema for Azure Monitor data types in the envelopes [here](<a href=\"https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py\" rel=\"nofollow\">https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py</a>).</li>\n<li>The <cite>MetricsExporter</cite> handles <cite>MetricData</cite> data types.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure</span> <span class=\"kn\">import</span> <span class=\"n\">metrics_exporter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.stats</span> <span class=\"kn\">import</span> <span class=\"n\">aggregation</span> <span class=\"k\">as</span> <span class=\"n\">aggregation_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.stats</span> <span class=\"kn\">import</span> <span class=\"n\">measure</span> <span class=\"k\">as</span> <span class=\"n\">measure_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.stats</span> <span class=\"kn\">import</span> <span class=\"n\">stats</span> <span class=\"k\">as</span> <span class=\"n\">stats_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.stats</span> <span class=\"kn\">import</span> <span class=\"n\">view</span> <span class=\"k\">as</span> <span class=\"n\">view_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.tags</span> <span class=\"kn\">import</span> <span class=\"n\">tag_map</span> <span class=\"k\">as</span> <span class=\"n\">tag_map_module</span>\n\n<span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">stats_module</span><span class=\"o\">.</span><span class=\"n\">stats</span>\n<span class=\"n\">view_manager</span> <span class=\"o\">=</span> <span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">view_manager</span>\n<span class=\"n\">stats_recorder</span> <span class=\"o\">=</span> <span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">stats_recorder</span>\n\n<span class=\"n\">CARROTS_MEASURE</span> <span class=\"o\">=</span> <span class=\"n\">measure_module</span><span class=\"o\">.</span><span class=\"n\">MeasureInt</span><span class=\"p\">(</span><span class=\"s2\">\"carrots\"</span><span class=\"p\">,</span>\n                                            <span class=\"s2\">\"number of carrots\"</span><span class=\"p\">,</span>\n                                            <span class=\"s2\">\"carrots\"</span><span class=\"p\">)</span>\n<span class=\"n\">CARROTS_VIEW</span> <span class=\"o\">=</span> <span class=\"n\">view_module</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">(</span><span class=\"s2\">\"carrots_view\"</span><span class=\"p\">,</span>\n                                <span class=\"s2\">\"number of carrots\"</span><span class=\"p\">,</span>\n                                <span class=\"p\">[],</span>\n                                <span class=\"n\">CARROTS_MEASURE</span><span class=\"p\">,</span>\n                                <span class=\"n\">aggregation_module</span><span class=\"o\">.</span><span class=\"n\">CountAggregation</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Callback function to only export the metric if value is greater than 0</span>\n<span class=\"k\">def</span> <span class=\"nf\">callback_function</span><span class=\"p\">(</span><span class=\"n\">envelope</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">envelope</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">baseData</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Enable metrics</span>\n    <span class=\"c1\"># Set the interval in seconds in which you want to send metrics</span>\n    <span class=\"n\">exporter</span> <span class=\"o\">=</span> <span class=\"n\">metrics_exporter</span><span class=\"o\">.</span><span class=\"n\">new_metrics_exporter</span><span class=\"p\">(</span><span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation-key-here&gt;'</span><span class=\"p\">)</span>\n    <span class=\"n\">exporter</span><span class=\"o\">.</span><span class=\"n\">add_telemetry_processor</span><span class=\"p\">(</span><span class=\"n\">callback_function</span><span class=\"p\">)</span>\n    <span class=\"n\">view_manager</span><span class=\"o\">.</span><span class=\"n\">register_exporter</span><span class=\"p\">(</span><span class=\"n\">exporter</span><span class=\"p\">)</span>\n\n    <span class=\"n\">view_manager</span><span class=\"o\">.</span><span class=\"n\">register_view</span><span class=\"p\">(</span><span class=\"n\">CARROTS_VIEW</span><span class=\"p\">)</span>\n    <span class=\"n\">mmap</span> <span class=\"o\">=</span> <span class=\"n\">stats_recorder</span><span class=\"o\">.</span><span class=\"n\">new_measurement_map</span><span class=\"p\">()</span>\n    <span class=\"n\">tmap</span> <span class=\"o\">=</span> <span class=\"n\">tag_map_module</span><span class=\"o\">.</span><span class=\"n\">TagMap</span><span class=\"p\">()</span>\n\n    <span class=\"n\">mmap</span><span class=\"o\">.</span><span class=\"n\">measure_int_put</span><span class=\"p\">(</span><span class=\"n\">CARROTS_MEASURE</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n    <span class=\"n\">mmap</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">tmap</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Default export interval is every 15.0s</span>\n    <span class=\"c1\"># Your application should run for at least this amount</span>\n    <span class=\"c1\"># of time so the exporter will meet this interval</span>\n    <span class=\"c1\"># Sleep can fulfill this</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Done recording metrics\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"trace\">\n<h3>Trace</h3>\n<p>The <strong>Azure Monitor Trace Exporter</strong> allows you to export <a href=\"https://github.com/census-instrumentation/opencensus-python/\" rel=\"nofollow\">OpenCensus</a> traces to <a href=\"https://docs.microsoft.com/azure/azure-monitor/\" rel=\"nofollow\">Azure Monitor</a>.</p>\n<p>This example shows how to send a span \u201chello\u201d to Azure Monitor.</p>\n<ul>\n<li>Create an Azure Monitor resource and get the instrumentation key, more information can be found <a href=\"https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource\" rel=\"nofollow\">here</a>.</li>\n<li>Place your instrumentation key in a <cite>connection string</cite> and directly into your code.</li>\n<li>Alternatively, you can specify your <cite>connection string</cite> in an environment variable <tt>APPLICATIONINSIGHTS_CONNECTION_STRING</tt>.</li>\n</ul>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure.trace_exporter</span> <span class=\"kn\">import</span> <span class=\"n\">AzureExporter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace.samplers</span> <span class=\"kn\">import</span> <span class=\"n\">ProbabilitySampler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace.tracer</span> <span class=\"kn\">import</span> <span class=\"n\">Tracer</span>\n\n<span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"n\">Tracer</span><span class=\"p\">(</span>\n    <span class=\"n\">exporter</span><span class=\"o\">=</span><span class=\"n\">AzureExporter</span><span class=\"p\">(</span>\n        <span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation-key-here&gt;'</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">sampler</span><span class=\"o\">=</span><span class=\"n\">ProbabilitySampler</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">span</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'hello'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello, World!'</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<div id=\"integrations\">\n<h4>Integrations</h4>\n<p>OpenCensus also supports several <a href=\"https://github.com/census-instrumentation/opencensus-python#integration\" rel=\"nofollow\">integrations</a> which allows OpenCensus to integrate with third party libraries.</p>\n<p>This example shows how to integrate with the <a href=\"https://2.python-requests.org/en/master/\" rel=\"nofollow\">requests</a> library.</p>\n<ul>\n<li>Create an Azure Monitor resource and get the instrumentation key, more information can be found <a href=\"https://docs.microsoft.com/azure/azure-monitor/app/create-new-resource\" rel=\"nofollow\">here</a>.</li>\n<li>Install the <a href=\"../opencensus-ext-requests\" rel=\"nofollow\">requests integration package</a> using <tt>pip install <span class=\"pre\">opencensus-ext-requests</span></tt>.</li>\n<li>Place your instrumentation key in a <cite>connection string</cite> and directly into your code.</li>\n<li>Alternatively, you can specify your <cite>connection string</cite> in an environment variable <tt>APPLICATIONINSIGHTS_CONNECTION_STRING</tt>.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure.trace_exporter</span> <span class=\"kn\">import</span> <span class=\"n\">AzureExporter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace</span> <span class=\"kn\">import</span> <span class=\"n\">config_integration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace.samplers</span> <span class=\"kn\">import</span> <span class=\"n\">ProbabilitySampler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace.tracer</span> <span class=\"kn\">import</span> <span class=\"n\">Tracer</span>\n\n<span class=\"n\">config_integration</span><span class=\"o\">.</span><span class=\"n\">trace_integrations</span><span class=\"p\">([</span><span class=\"s1\">'requests'</span><span class=\"p\">])</span>\n<span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"n\">Tracer</span><span class=\"p\">(</span>\n    <span class=\"n\">exporter</span><span class=\"o\">=</span><span class=\"n\">AzureExporter</span><span class=\"p\">(</span>\n        <span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation-key-here&gt;'</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">sampler</span><span class=\"o\">=</span><span class=\"n\">ProbabilitySampler</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">span</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'parent'</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'https://www.wikipedia.org/wiki/Rabbit'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"modifying-traces\">\n<h4>Modifying Traces</h4>\n<ul>\n<li>You can pass a callback function to the exporter to process telemetry before it is exported.</li>\n<li>Your callback function can return <cite>False</cite> if you do not want this envelope exported.</li>\n<li>Your callback function must accept an [envelope](<a href=\"https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#L86\" rel=\"nofollow\">https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py#L86</a>) data type as its parameter.</li>\n<li>You can see the schema for Azure Monitor data types in the envelopes [here](<a href=\"https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py\" rel=\"nofollow\">https://github.com/census-instrumentation/opencensus-python/blob/master/contrib/opencensus-ext-azure/opencensus/ext/azure/common/protocol.py</a>).</li>\n<li>The <cite>AzureExporter</cite> handles <cite>Data</cite> data types.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.ext.azure.trace_exporter</span> <span class=\"kn\">import</span> <span class=\"n\">AzureExporter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace</span> <span class=\"kn\">import</span> <span class=\"n\">config_integration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace.samplers</span> <span class=\"kn\">import</span> <span class=\"n\">ProbabilitySampler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">opencensus.trace.tracer</span> <span class=\"kn\">import</span> <span class=\"n\">Tracer</span>\n\n<span class=\"n\">config_integration</span><span class=\"o\">.</span><span class=\"n\">trace_integrations</span><span class=\"p\">([</span><span class=\"s1\">'requests'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Callback function to add os_type: linux to span properties</span>\n<span class=\"k\">def</span> <span class=\"nf\">callback_function</span><span class=\"p\">(</span><span class=\"n\">envelope</span><span class=\"p\">):</span>\n    <span class=\"n\">envelope</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">baseData</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">[</span><span class=\"s1\">'os_type'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'linux'</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">exporter</span> <span class=\"o\">=</span> <span class=\"n\">AzureExporter</span><span class=\"p\">(</span>\n    <span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"s1\">'InstrumentationKey=&lt;your-instrumentation-key-here&gt;'</span>\n<span class=\"p\">)</span>\n<span class=\"n\">exporter</span><span class=\"o\">.</span><span class=\"n\">add_telemetry_processor</span><span class=\"p\">(</span><span class=\"n\">callback_function</span><span class=\"p\">)</span>\n<span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"n\">Tracer</span><span class=\"p\">(</span><span class=\"n\">exporter</span><span class=\"o\">=</span><span class=\"n\">exporter</span><span class=\"p\">,</span> <span class=\"n\">sampler</span><span class=\"o\">=</span><span class=\"n\">ProbabilitySampler</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">))</span>\n<span class=\"k\">with</span> <span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">span</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'parent'</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'https://www.wikipedia.org/wiki/Rabbit'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/azure/azure-monitor/\" rel=\"nofollow\">Azure Monitor</a></li>\n<li><a href=\"https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-azure/examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"https://opencensus.io/\" rel=\"nofollow\">OpenCensus Project</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6565727, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0cd8c5bf690444f2649203bdc6aff4b5", "sha256": "3cf3cb9fe96c9ec66046d19843eb725f8b926450385cd2be4ae29447ce3f9001"}, "downloads": -1, "filename": "opencensus_ext_azure-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0cd8c5bf690444f2649203bdc6aff4b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8643, "upload_time": "2019-04-24T20:41:38", "upload_time_iso_8601": "2019-04-24T20:41:38.242946Z", "url": "https://files.pythonhosted.org/packages/f9/59/fb2b674d4d55c8c52bd3f236364b1c7b56e21440a40fd4073e048e76da40/opencensus_ext_azure-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d9df546199de009387b58ab0f247315b", "sha256": "dcf11139ed6a10f16fb293657e302cfb5b3723a7e7d1375ed6bb3bf4f4257d3f"}, "downloads": -1, "filename": "opencensus_ext_azure-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d9df546199de009387b58ab0f247315b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16756, "upload_time": "2019-06-01T04:20:49", "upload_time_iso_8601": "2019-06-01T04:20:49.074136Z", "url": "https://files.pythonhosted.org/packages/4f/83/7af54bcd3a6c0d42ed165854153f9d07890b23ce767a63a6b1bc0a2e72dc/opencensus_ext_azure-0.2.0-py2.py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ab735392e828dddefa8a8ab479761d45", "sha256": "a01b7fe623e1cf972753b66f6445fae3cecd6f9d660eed774b5193dd56469f65"}, "downloads": -1, "filename": "opencensus_ext_azure-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ab735392e828dddefa8a8ab479761d45", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16785, "upload_time": "2019-06-13T22:17:00", "upload_time_iso_8601": "2019-06-13T22:17:00.535516Z", "url": "https://files.pythonhosted.org/packages/b0/84/0fcfe4bfa0ee82fe8d19e13c0c6e0973b97f17ae1e6f93b3b00f78538035/opencensus_ext_azure-0.2.1-py2.py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "eae2b71058fd77a4f955e758c0b98300", "sha256": "32b256c14e3691b600c355c8d8424bf22e7dc70883c80ccb3ed15180293f2fea"}, "downloads": -1, "filename": "opencensus_ext_azure-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eae2b71058fd77a4f955e758c0b98300", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20529, "upload_time": "2019-07-01T05:59:13", "upload_time_iso_8601": "2019-07-01T05:59:13.308890Z", "url": "https://files.pythonhosted.org/packages/71/ce/a0f9cc91a5d2f93a769b9d158161450fadc2fe901eebc462a47af426c1bf/opencensus_ext_azure-0.3.1-py2.py3-none-any.whl", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "414235a3bddf3ed10704ae487074bf3c", "sha256": "a420a2e872276ed3edf1f38cd03a17f9cb61d4f7abcf9f41885cf97e432b5299"}, "downloads": -1, "filename": "opencensus_ext_azure-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "414235a3bddf3ed10704ae487074bf3c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27267, "upload_time": "2019-08-01T23:31:54", "upload_time_iso_8601": "2019-08-01T23:31:54.997708Z", "url": "https://files.pythonhosted.org/packages/d4/87/643a1a068f066fa6a4a389526028a5a454d7c40bbdc65ea517e01014b3fa/opencensus_ext_azure-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcc92986ccca5faddb9eee0fdcb4e036", "sha256": "adceecb858598ee55a4603dcf82a5cf2bd0c4cec09644cce440113bbc4208035"}, "downloads": -1, "filename": "opencensus-ext-azure-0.7.0.tar.gz", "has_sig": false, "md5_digest": "fcc92986ccca5faddb9eee0fdcb4e036", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17539, "upload_time": "2019-08-01T23:31:56", "upload_time_iso_8601": "2019-08-01T23:31:56.783403Z", "url": "https://files.pythonhosted.org/packages/9e/bc/54562434103784247f52c9975dbee47976cb0c33862e1c38f3982d660673/opencensus-ext-azure-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "0062cbb9aff83e97c096a61ba89c1561", "sha256": "2f372b18c689916e17187ce9321b29268a12a50ae14877f8c0b31f89b6a4d4ea"}, "downloads": -1, "filename": "opencensus_ext_azure-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0062cbb9aff83e97c096a61ba89c1561", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28781, "upload_time": "2019-08-26T20:02:45", "upload_time_iso_8601": "2019-08-26T20:02:45.913730Z", "url": "https://files.pythonhosted.org/packages/af/58/445f99086b4c601d491ece7cff6e07e50d4c1808a6256dd56b8e8a7d9e0e/opencensus_ext_azure-0.7.1-py2.py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "d51e1ecb052459b60fc686f594c3e9aa", "sha256": "8df03f2e117db506a4e6a8c9e6cca18090af188deb3ff02d2eae4684ab948126"}, "downloads": -1, "filename": "opencensus_ext_azure-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d51e1ecb052459b60fc686f594c3e9aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30203, "upload_time": "2019-10-01T02:23:53", "upload_time_iso_8601": "2019-10-01T02:23:53.154264Z", "url": "https://files.pythonhosted.org/packages/77/3f/18b5baab4bf06b5476ded416e3c6dc90a1dfab7ee51ce14c3b49de4af880/opencensus_ext_azure-1.0.0-py2.py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e970ad87c7a098c79cfec2a51b0b5286", "sha256": "dc0c7d54f403088f4572a5171b6a9b3c48e624a43de1af81a94b22a220c2a9d3"}, "downloads": -1, "filename": "opencensus_ext_azure-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e970ad87c7a098c79cfec2a51b0b5286", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30677, "upload_time": "2019-11-26T20:41:39", "upload_time_iso_8601": "2019-11-26T20:41:39.996736Z", "url": "https://files.pythonhosted.org/packages/3b/ac/20c0f92aa2dd0b7b9ec8c3c2f6eae6b060425d823beada1b7f598edf0b61/opencensus_ext_azure-1.0.1-py2.py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "fa4843831b88998f55c2390155d0a335", "sha256": "20a0a9e95fe253222be4b639993a3c51e231c016325fa3b886cb55861a4938db"}, "downloads": -1, "filename": "opencensus_ext_azure-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fa4843831b88998f55c2390155d0a335", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 32028, "upload_time": "2020-02-04T00:33:39", "upload_time_iso_8601": "2020-02-04T00:33:39.943818Z", "url": "https://files.pythonhosted.org/packages/c6/54/d042e60e3be64dcf1637596ef862b67ffa312dc2173d5cb209d18537ac2b/opencensus_ext_azure-1.0.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa4843831b88998f55c2390155d0a335", "sha256": "20a0a9e95fe253222be4b639993a3c51e231c016325fa3b886cb55861a4938db"}, "downloads": -1, "filename": "opencensus_ext_azure-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fa4843831b88998f55c2390155d0a335", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 32028, "upload_time": "2020-02-04T00:33:39", "upload_time_iso_8601": "2020-02-04T00:33:39.943818Z", "url": "https://files.pythonhosted.org/packages/c6/54/d042e60e3be64dcf1637596ef862b67ffa312dc2173d5cb209d18537ac2b/opencensus_ext_azure-1.0.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:03:24 2020"}