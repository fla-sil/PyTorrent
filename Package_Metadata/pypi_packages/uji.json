{"info": {"author": "The uji authors", "author_email": "check.the@git.history", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "Uji - checklist generator and tracking system\n=============================================\n\nuji is a tool to generate checklists from template files and hold on to\nthose lists forever or until the cows come home, whichever happens later.\n\nuji is useful for cases where a user has\n- large checklists with overlapping items, e.g. the same sets of test to be\n  performed on different hardware\n- the checklists are recurring, e.g. they need to be performed on every\n  package update\n- not all checklist items will be ticked every time but the user needs to\n  remember which ones were ticked off\n- there is other free-form information to be stored alongside the\n  checklists\n\nThe main purpose of uji is to simplify the answer to \"Wait, didn't I test\nthis?\"\n\n- uji is not a todo list\n- uji is not a test suite\n- uji is not something you can integrate into a CI\n\nIf you have a test that can be automated, uji is not the right tool. uji\nis to track manual tests that cannot be automated. If you want to generate\ntest summaries, uji is not the right tool. uji tracks **manual** tests.\n\nuji is optimized for writing, not reading. 99% of the logs tracked with uji\nwill never be read. Hence uji is built for minimal friction to write the\ntests - basically you need git, python and an editor. The central file is\na markdown text file that you can edit and annotate (almost) at will.\nIt's all stored in git, so backup, sharing, and collaboration is trivial.\nIt's markdown, so you push the file anywhere (gitlab, github, ...) and it'll\nprobably look nice in the browser.\n\nuji just preps the file for you and (in the future) provides a set of\nCLI tools to automate some tasks around maintaining the test files.\n\n\"uji\" is Indonesian for \"test\".\n\nSee [uji on readthedocs](https://uji.readthedocs.io/en/latest/) for more\ndocumentation.\n\nUse case\n========\n\nUpgrading software packages usually requires multiple manual tests. Ideally\nyou have a checklist to tick off the things you tested. Next time you\nupgrade that same package, the same checklist applies. Ideally you tick off\nall the checklist items every time but we both know you don't. Maybe\nhardware is missing, or the moon phase is wrong for tedious work, or, well,\nso many reasons.\n\nAnd then suddenly, a few months later a bug reports appears. And now the\nquestion is: \"wait, didn't I test this?\"\n\nAnd uji should be able answer that question.\n\nHow it works\n============\n\nThe core of uji is a set of test templates in YAML format. These templates\nare combined to a full test document (in markdown) on invoking `uji new`.\nThat file together with the log files required for the various tests are\nstored in a git tree. As the tests are performed the user ticks them off in\nthe .md file and eventually commits them to git.\n\nThe next test run does the same, `uji new` creates a new directory, rinse,\nwash, repeat.\n\nSo when the question \"did I test this?\" arises, you can go back, check the\nrespective log set and check - is the box for that test ticked off?\nAnd if it is and it's still broken - well, you should have the various log\nfiles in that same directory to figure out where the differences are.\n\nNone of this is novel of course, uji is just a commandline wrapper to make\nthat proces simpler.\n\nInstallation\n============\n\n```\npip install --user uji\n```\n\nUsage\n=====\n\nLook at the [example.yaml](example.yaml) file for an example test\nconfiguration.\n\n```\n$ mkdir my-test-results && cd my-test-results\n$ git init\n$ wget -o mypackage.yaml https://raw.githubusercontent.com/whot/uji/master/examples/example.yaml\n```\n\nNow you're set up. Edit the `mypackage.yaml` file and add your tests.\nOnce ready, `git commit mypackage.yaml` because you want this to be\npreserved.\n\nAnd when you're ready to start a test run:\n\n```\n$ cd my-test-results\n$ uji new mypackage.yaml\nYour test records and log files are\n  mypackage-2019-12-10.0/\n  mypackage-2019-12-10.0/logitech_keyboard\n  mypackage-2019-12-10.0/t450_keyboard\n  mypackage-2019-12-10.0/t460_keyboard\n  mypackage-2019-12-10.0/example.md\n  mypackage-2019-12-10.0/example.yaml\n  mypackage-2019-12-10.0/logitech_g500s\n  mypackage-2019-12-10.0/macbook_keyboard\n  mypackage-2019-12-10.0/logitech_mx_anywhere_2s\n  mypackage-2019-12-10.0/logitech_keyboard/test_hotplug_libinput\n  mypackage-2019-12-10.0/logitech_keyboard/test_usb_logs\n  mypackage-2019-12-10.0/logitech_keyboard/log_input_devices\n  mypackage-2019-12-10.0/logitech_keyboard/test_hotplug_libinput/dmesg\n  mypackage-2019-12-10.0/logitech_keyboard/test_usb_logs/lsusb\u00a0\u2212v\n  mypackage-2019-12-10.0/logitech_keyboard/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/logitech_keyboard/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n  mypackage-2019-12-10.0/t450_keyboard/log_input_devices\n  mypackage-2019-12-10.0/t450_keyboard/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/t450_keyboard/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n  mypackage-2019-12-10.0/t460_keyboard/log_input_devices\n  mypackage-2019-12-10.0/t460_keyboard/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/t460_keyboard/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n  mypackage-2019-12-10.0/logitech_g500s/log_input_devices\n  mypackage-2019-12-10.0/logitech_g500s/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/logitech_g500s/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n  mypackage-2019-12-10.0/macbook_keyboard/test_usb_logs\n  mypackage-2019-12-10.0/macbook_keyboard/log_input_devices\n  mypackage-2019-12-10.0/macbook_keyboard/test_usb_logs/lsusb\u00a0\u2212v\n  mypackage-2019-12-10.0/macbook_keyboard/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/macbook_keyboard/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n  mypackage-2019-12-10.0/logitech_mx_anywhere_2s/log_input_devices\n  mypackage-2019-12-10.0/logitech_mx_anywhere_2s/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/logitech_mx_anywhere_2s/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\nRun \"git commit\" to commit the changes, or \"git reset\" to throw them away\n$ git commit -am 'mypackage: new test log set'\n$ vim mypackage-2019-12-04.0/mypackage.md\n# tick off the tests as you confirm them\n\n$ cp /proc/bus/input/devices mypackage-2019-12-10.0/logitech_keyboard/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n$ lsusb &> mypackage-2019-12-10.0/macbook_keyboard/test_usb_logs/lsusb\u00a0\u2212v\n\n# copy the other files into the right file names\n\n$ git commit -am 'mypackage: test log set done'\n```\n\nAnd that's it for now.\n\nSee [uji on readthedocs](https://uji.readthedocs.io/en/latest/) for more\ndocumentation.\n\nLicense\n=======\n\nuji is licensed under the MIT license. See LICENSE for more info.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/whot/uji", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "uji", "package_url": "https://pypi.org/project/uji/", "platform": "", "project_url": "https://pypi.org/project/uji/", "project_urls": {"Homepage": "http://github.com/whot/uji"}, "release_url": "https://pypi.org/project/uji/0.2.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Checklist tracker", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Uji - checklist generator and tracking system</h1>\n<p>uji is a tool to generate checklists from template files and hold on to\nthose lists forever or until the cows come home, whichever happens later.</p>\n<p>uji is useful for cases where a user has</p>\n<ul>\n<li>large checklists with overlapping items, e.g. the same sets of test to be\nperformed on different hardware</li>\n<li>the checklists are recurring, e.g. they need to be performed on every\npackage update</li>\n<li>not all checklist items will be ticked every time but the user needs to\nremember which ones were ticked off</li>\n<li>there is other free-form information to be stored alongside the\nchecklists</li>\n</ul>\n<p>The main purpose of uji is to simplify the answer to \"Wait, didn't I test\nthis?\"</p>\n<ul>\n<li>uji is not a todo list</li>\n<li>uji is not a test suite</li>\n<li>uji is not something you can integrate into a CI</li>\n</ul>\n<p>If you have a test that can be automated, uji is not the right tool. uji\nis to track manual tests that cannot be automated. If you want to generate\ntest summaries, uji is not the right tool. uji tracks <strong>manual</strong> tests.</p>\n<p>uji is optimized for writing, not reading. 99% of the logs tracked with uji\nwill never be read. Hence uji is built for minimal friction to write the\ntests - basically you need git, python and an editor. The central file is\na markdown text file that you can edit and annotate (almost) at will.\nIt's all stored in git, so backup, sharing, and collaboration is trivial.\nIt's markdown, so you push the file anywhere (gitlab, github, ...) and it'll\nprobably look nice in the browser.</p>\n<p>uji just preps the file for you and (in the future) provides a set of\nCLI tools to automate some tasks around maintaining the test files.</p>\n<p>\"uji\" is Indonesian for \"test\".</p>\n<p>See <a href=\"https://uji.readthedocs.io/en/latest/\" rel=\"nofollow\">uji on readthedocs</a> for more\ndocumentation.</p>\n<h1>Use case</h1>\n<p>Upgrading software packages usually requires multiple manual tests. Ideally\nyou have a checklist to tick off the things you tested. Next time you\nupgrade that same package, the same checklist applies. Ideally you tick off\nall the checklist items every time but we both know you don't. Maybe\nhardware is missing, or the moon phase is wrong for tedious work, or, well,\nso many reasons.</p>\n<p>And then suddenly, a few months later a bug reports appears. And now the\nquestion is: \"wait, didn't I test this?\"</p>\n<p>And uji should be able answer that question.</p>\n<h1>How it works</h1>\n<p>The core of uji is a set of test templates in YAML format. These templates\nare combined to a full test document (in markdown) on invoking <code>uji new</code>.\nThat file together with the log files required for the various tests are\nstored in a git tree. As the tests are performed the user ticks them off in\nthe .md file and eventually commits them to git.</p>\n<p>The next test run does the same, <code>uji new</code> creates a new directory, rinse,\nwash, repeat.</p>\n<p>So when the question \"did I test this?\" arises, you can go back, check the\nrespective log set and check - is the box for that test ticked off?\nAnd if it is and it's still broken - well, you should have the various log\nfiles in that same directory to figure out where the differences are.</p>\n<p>None of this is novel of course, uji is just a commandline wrapper to make\nthat proces simpler.</p>\n<h1>Installation</h1>\n<pre><code>pip install --user uji\n</code></pre>\n<h1>Usage</h1>\n<p>Look at the <a href=\"example.yaml\" rel=\"nofollow\">example.yaml</a> file for an example test\nconfiguration.</p>\n<pre><code>$ mkdir my-test-results &amp;&amp; cd my-test-results\n$ git init\n$ wget -o mypackage.yaml https://raw.githubusercontent.com/whot/uji/master/examples/example.yaml\n</code></pre>\n<p>Now you're set up. Edit the <code>mypackage.yaml</code> file and add your tests.\nOnce ready, <code>git commit mypackage.yaml</code> because you want this to be\npreserved.</p>\n<p>And when you're ready to start a test run:</p>\n<pre><code>$ cd my-test-results\n$ uji new mypackage.yaml\nYour test records and log files are\n  mypackage-2019-12-10.0/\n  mypackage-2019-12-10.0/logitech_keyboard\n  mypackage-2019-12-10.0/t450_keyboard\n  mypackage-2019-12-10.0/t460_keyboard\n  mypackage-2019-12-10.0/example.md\n  mypackage-2019-12-10.0/example.yaml\n  mypackage-2019-12-10.0/logitech_g500s\n  mypackage-2019-12-10.0/macbook_keyboard\n  mypackage-2019-12-10.0/logitech_mx_anywhere_2s\n  mypackage-2019-12-10.0/logitech_keyboard/test_hotplug_libinput\n  mypackage-2019-12-10.0/logitech_keyboard/test_usb_logs\n  mypackage-2019-12-10.0/logitech_keyboard/log_input_devices\n  mypackage-2019-12-10.0/logitech_keyboard/test_hotplug_libinput/dmesg\n  mypackage-2019-12-10.0/logitech_keyboard/test_usb_logs/lsusb\u00a0\u2212v\n  mypackage-2019-12-10.0/logitech_keyboard/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/logitech_keyboard/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n  mypackage-2019-12-10.0/t450_keyboard/log_input_devices\n  mypackage-2019-12-10.0/t450_keyboard/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/t450_keyboard/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n  mypackage-2019-12-10.0/t460_keyboard/log_input_devices\n  mypackage-2019-12-10.0/t460_keyboard/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/t460_keyboard/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n  mypackage-2019-12-10.0/logitech_g500s/log_input_devices\n  mypackage-2019-12-10.0/logitech_g500s/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/logitech_g500s/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n  mypackage-2019-12-10.0/macbook_keyboard/test_usb_logs\n  mypackage-2019-12-10.0/macbook_keyboard/log_input_devices\n  mypackage-2019-12-10.0/macbook_keyboard/test_usb_logs/lsusb\u00a0\u2212v\n  mypackage-2019-12-10.0/macbook_keyboard/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/macbook_keyboard/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n  mypackage-2019-12-10.0/logitech_mx_anywhere_2s/log_input_devices\n  mypackage-2019-12-10.0/logitech_mx_anywhere_2s/log_input_devices/libinput\u00a0record\u00a0\u2212\u2212all\n  mypackage-2019-12-10.0/logitech_mx_anywhere_2s/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\nRun \"git commit\" to commit the changes, or \"git reset\" to throw them away\n$ git commit -am 'mypackage: new test log set'\n$ vim mypackage-2019-12-04.0/mypackage.md\n# tick off the tests as you confirm them\n\n$ cp /proc/bus/input/devices mypackage-2019-12-10.0/logitech_keyboard/log_input_devices/\u2215proc\u2215bus\u2215input\u2215devices\n$ lsusb &amp;&gt; mypackage-2019-12-10.0/macbook_keyboard/test_usb_logs/lsusb\u00a0\u2212v\n\n# copy the other files into the right file names\n\n$ git commit -am 'mypackage: test log set done'\n</code></pre>\n<p>And that's it for now.</p>\n<p>See <a href=\"https://uji.readthedocs.io/en/latest/\" rel=\"nofollow\">uji on readthedocs</a> for more\ndocumentation.</p>\n<h1>License</h1>\n<p>uji is licensed under the MIT license. See LICENSE for more info.</p>\n\n          </div>"}, "last_serial": 6406639, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7e7f2f57a4e6b1180b4bf334e8618564", "sha256": "ea0c892e5e56ae556ebe79f2e30051f398e8bd4bc13d24c8a01cc096c7055ceb"}, "downloads": -1, "filename": "uji-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7e7f2f57a4e6b1180b4bf334e8618564", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17356, "upload_time": "2019-12-24T03:14:16", "upload_time_iso_8601": "2019-12-24T03:14:16.821451Z", "url": "https://files.pythonhosted.org/packages/83/be/c650d0d3cea1e36a6e47afbc8718a3aa978f28f34367ee7a84d6012b1119/uji-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f193ba40439180135d59cedb200e1bc6", "sha256": "ad0d4b80ac9d1e79e6c2b7cf5d2883ec4d628939ebc927e9f8317b2dc5afef8c"}, "downloads": -1, "filename": "uji-0.1.tar.gz", "has_sig": false, "md5_digest": "f193ba40439180135d59cedb200e1bc6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15848, "upload_time": "2019-12-24T03:14:20", "upload_time_iso_8601": "2019-12-24T03:14:20.210795Z", "url": "https://files.pythonhosted.org/packages/1b/61/72d236f19f8dc6d75204ee85c980c0d0719fb283cc2d3571f60f868d3627/uji-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "963626092b9feba78c79ac3926b073a7", "sha256": "79a806e8d5048be6a8c7c605eca9aec69e00cf8eb0fe522088516070c6219ffa"}, "downloads": -1, "filename": "uji-0.2.tar.gz", "has_sig": false, "md5_digest": "963626092b9feba78c79ac3926b073a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16398, "upload_time": "2020-01-07T03:39:14", "upload_time_iso_8601": "2020-01-07T03:39:14.778785Z", "url": "https://files.pythonhosted.org/packages/cc/62/1ff1ac4d904a4741fddc11fb9f05a88b9b1392fdb5781e872f8006f99888/uji-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "00892b2b9d6e19555f72561118f881d5", "sha256": "d80a9506b5cd278128214705969d8dc174610f50b6797ea8b4c8ca7adc25b174"}, "downloads": -1, "filename": "uji-0.2.1.tar.gz", "has_sig": false, "md5_digest": "00892b2b9d6e19555f72561118f881d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17645, "upload_time": "2020-01-07T04:12:29", "upload_time_iso_8601": "2020-01-07T04:12:29.573658Z", "url": "https://files.pythonhosted.org/packages/bc/49/e4836e0500d177e9a1ba633caf2a2949f9324f6e95fe20007e3deaca55bb/uji-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "00892b2b9d6e19555f72561118f881d5", "sha256": "d80a9506b5cd278128214705969d8dc174610f50b6797ea8b4c8ca7adc25b174"}, "downloads": -1, "filename": "uji-0.2.1.tar.gz", "has_sig": false, "md5_digest": "00892b2b9d6e19555f72561118f881d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17645, "upload_time": "2020-01-07T04:12:29", "upload_time_iso_8601": "2020-01-07T04:12:29.573658Z", "url": "https://files.pythonhosted.org/packages/bc/49/e4836e0500d177e9a1ba633caf2a2949f9324f6e95fe20007e3deaca55bb/uji-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:23 2020"}