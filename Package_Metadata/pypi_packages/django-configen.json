{"info": {"author": "Bharat Chauhan", "author_email": "tell.bhch@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# django-configen\n\nA Django app for generating server configuration files, such as for Nginx, \nuWSGI, Gunicorn etc. in a DRY way. \n\n## Introduction\n\n**The problem:**\n\nConfiguration files stay pretty much the same for different projects. You're \noften copying these config files from other projects and then only modifying \nthe file paths, domain name and other variables which are unique to this \nproject.\n\nThis process is error-prone and repetitive. \n\n**The solution:**\n\nThis app solves it by generating config files from templates. So, instead \nof maintaining config files, you maintain their templates. And then use this \napp to render the templates with the project specific variables.\n\nYou can copy the original templates to multiple projects and stay assured that \nfinal generated config files will have appropriate paths and other variables.\n\n## Installation\n\n    pip install django-configen\n\nAdd `configen` to `INSTALLED_APPS` list:\n\n```python\nINSTALLED_APPS = [\n    # ... \n    'configen',\n]\n```\n\nAdd these settings to configure configen:\n\n```python\n# where configen will look for config templates\nCONFIGEN_TEMPLATES_DIR = os.path.join(BASE_DIR, 'configs/templates')\n\n# where configen will keep the generated files\nCONFIGEN_OUTPUT_DIR = os.path.join(BASE_DIR, 'configs/output')\n\n# config context processors\nCONFIGEN_CONFIG_PROCESSORS = [\n    'configen.config_processors.common',\n]\n```\n\n\n`CONFIGEN_CONFIG_PROCESSORS` is a list of config processor functions. They are \nsimilar to Django's context processors and whatever data they return will be \nmade available to the config templates during compiling. \n\n## Basic usage\n\nThe config processor that you just configured above \n(`configen.config_processors.common`), \nmakes some common and helpful variables available for you in the config templates.\n\nThese variables are:\n\n + `settings`: current settings file.\n + `project_dir_name`: name of the project directory\n + `virtualenv`: path to current virtualenv.\n + `python_interpreter`: path to current python interpreter\n\nNow you can write templates for your config files using Django's template \nsyntax.\n\nFor this example, you can create an `nginx.conf` inside `configs/templates/` \ndirectory and put this code in it:\n\n    server {\n\n        location /media  {\n            alias {{ settings.MEDIA_ROOT }};\n        }\n\n        location /static {\n            alias {{ settings.STATIC_ROOT }};\n        } \n    }\n\nRun this command to compile the template:\n\n    python manage.py configen\n\nIt will generate the configuration file from the given template and populate \nit with the given variables. The generated file will be inside the \n`configs/output` directory.\n\n## Providing extra context variables\n\nA quick way to provide extra context variables is by using \n`CONFIGEN_DEFAULT_CONTEXT` setting:\n\n```python\nCONFIGEN_DEFAULT_CONTEXT = {\n    '*': {\n        # variables listed here will be available to \n        # all templates\n        'project_name': 'example',\n    },\n    'nginx.conf': {\n        # variables listed here will be available only to\n        # nginx.conf template\n        'domain': 'example.com',\n    },\n    'uwsgi.ini': {\n        # variables listed here will be available only to\n        # uwsgi.ini template\n        'module': 'myproject.wisgi',\n    }\n}\n```\n\nIt should be mentioned that the context returned by `CONFIGEN_DEFAULT_CONTEXT` \nwill be overridden by context variables returned by config processors if the \nnames collide.\n\n## Writing custom config processor functions\n\nUsing `CONFIGEN_DEFAULT_CONTEXT` settings gives you a quick and basic way \nto provide context variables to the templates. However, if you want to do some \nextra calculations before returning the variables, this pattern becomes limiting.\n\nFor those cases, configen supports providing context data from functions. \nIt works  similar to Django's context processors. However, to avoid name \nconfusion, we call them config processors.\n\nThis is what a config processor function looks like:\n\n```python\ndef config_processor(template_name, *args):\n    return {'var': 'hello'}\n```\n\nThe config processor will be passed a `template_name` argument which will let it \nit know the name of the template being compiled. This is useful if you want to \nreturn different data depending on the template. \n\nTo use your config processor, add this to your settings:\n\n```python\nCONFIGEN_CONFIG_PROCESSORS = [\n    'configen.config_processors.common',\n    'path.to.config_processor',\n]\n```\n\nThe order in which you list the config processors matters. The last config \nprocessor will override the context variables from the previous processors in \ncase there are name collisions.\n\nIf you run the `configen` command again, the variables returned by your config \nprocessor will be available to the config templates.\n\n### Passing arguments to config processors from command line\n\nYou can pass extra arguments to your config processors from command line using \nthe `--extra` command option:\n\n    python manage.py configen --extra arg1 arg2\n\nThese arguments will be available under `args` argument in your config processor.\n\nSee documentation for [`--extra`](#--extra) option for more.\n\n\n## Changing the name of the output file\n\nConfigen will save the output files with same name as the input template files. \nThis is okay if you have a single project but can become problematic if you \nhave multiple projects. \n\nSuppose, you have two projects and both have a config template called `nginx.conf`. \nThe generated config files will also be called `nginx.conf` for both projects. \nNow you can't copy both of these files in Nginx's config directory because of \nthe name collision. \n\nSo the general workaround for this problem to rename the files with the project \nname, like `project1_nginx.conf`, `project2_nginx.conf` and this problem is \nsolved.\n\nConfigen provides two ways to change the name of the output file.\n\nFirst, the simple way: Using `CONFIGEN_DEFAULT_META` setting:\n\n```python\nCONFIGEN_DEFAULT_META = {\n    '*': {\n        'outfile': 'project1_{template_name}'\n    }\n}\n```\n\n`{template_name}` will be automatically replaced by the name of the template \nincluding the file extension. \n\nJust like with `CONFIGEN_DEFAULT_CONTEXT` setting, you can create keys \nwith the names of your config templates if you only want to override a particular \ntemplate's output file name.\n\nAnother way to provide the meta data to configen is by returning a second dict from your \nconfig processor like this:\n\n```python\ndef config_processor(template_name, *args):\n    context = {'var': 'hello'}\n\n    meta = {'outfile': 'project1_%s' % template_name}\n\n    return (context, meta)\n```\n\nCurrently, there's only one option supported for meta data - `outfile`. \n\n\n## Settings\n\n### `CONFIGEN_TEMPLATES_DIR`\n\nPath to the directory where configen will look for the config templates.\n\n### `CONFIGEN_OUTPUT_DIR`\n\nPath to the directory where configen will keep the generated config files.\n\n### `CONFIGEN_CONFIG_PROCESSORS`\n\nA list containing Python path to functions which will be called during generation \nof each config template.\n\nExample:\n\n```python\nCONFIGEN_CONFIG_PROCESSORS = [\n    'configen.config_processors.common',\n\n    'your.custom.processor',\n]\n```\n\nThe `configen.config_processors.common` config processor provided by configen \nmakes some commonly used variables available to you in your config templates:\n\n + `settings`: current settings file.\n + `project_dir_name`: name of the project directory\n + `virtualenv`: path to current virtualenv.\n + `python_interpreter`: path to current python interpreter\n\nYou can override these variables from your custom config processors, or leave \nthis processor out of the setting if you don't want it. \n\n### `CONFIGEN_DEFAULT_CONTEXT`\n\nA dictionary containing default context variables for generating config files.\n\nExample:\n\n```python\nCONFIGEN_DEFAULT_CONTEXT = {\n    '*': {\n        # will be passed to all templates \n        'project_name': 'Example',\n    },\n    'nginx.conf': {\n        # will be passed only to nginx.conf template\n        'domain': 'example.com',\n    },\n    'uwsgi.ini': {\n        'socket': '/tmp/example.sock',\n    },\n}\n```\n\n### `CONFIGEN_DEFAULT_META`\n\nA dictionary for providing meta configuration information to configen about a \ntemplate.\n\nCurrently only option supported is `outfile`. \n\nExample:\n\n```python\nCONFIGEN_DEFAULT_META = {\n    '*': {\n        # will be used for all templates \n        'outfile': 'myproject_{template_name}',\n    },\n    'nginx.conf': {\n        # will be used only for nginx.conf template\n        'outfile': 'myproject_nginx_blah_blah.conf',\n    },\n}\n```\n\n## Command line options\n\n### `template`\n\nOptional. Name of the template to compile. It should be relative to the path \nset in `CONFIGEN_TEMPLATES_DIR` setting. If not provided, all the templates \npresent in the directory set by `CONFIGEN_TEMPLATES_DIR` setting are compiled.\n\nExample:\n\n    python manage.py configen nginx.conf\n\n\n### `--print`\n\nPrint the compiled template to stdout. Useful if you want to inspect the output \nwithout creating/overwriting the output file.\n\nExample:\n\n    python manage.py configen --print\n\n\n### `--extra`\n\nExtra arguments that you want to pass to your config processor functions.\n\nExample:\n\n    python manage.py configen --extra arg1 arg2\n\n\nAnd then access these arguments like this:\n\n```python\ndef config_processor(template_name, *args):\n    print(args)\n    # output: ('arg1', 'arg2',)\n```\n\n**Important:** Doing `--extra arg1=hello arg2=world` will not work like you \nwould expect. `arg1=hello` will be parsed as a whole, instead of argument name \nand value. \n\nThe value your config processor will recieve is this:\n\n```python\ndef config_processor(template_name, *args):\n    print(args)\n    # output: ('arg1=hello', 'arg2=world',)\n```\n\nHence, we used the word \"arguments\" and not \"keyword-arguments\". You can't pass \narbitrary named keyword arguments via command line, at least not with `argparse` \nwhich is used by Django to parse commands.\n\nIf you want to be able to receive named keyword arguments, you'll need to parse \nthese arguments yourself.\n\n\n### `--verbosity`\n\nThe command will print some debug output while compiling templates. You can turn \nit off like this:\n\n    python manage.py configen --verbosity 0\n\n\n## License\n\n[BSD-3-Clause](LICENSE.txt)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/bhch/django-configen", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "django-configen", "package_url": "https://pypi.org/project/django-configen/", "platform": "", "project_url": "https://pypi.org/project/django-configen/", "project_urls": {"Homepage": "https://www.github.com/bhch/django-configen"}, "release_url": "https://pypi.org/project/django-configen/1.0/", "requires_dist": null, "requires_python": ">= 3.4", "summary": "A Django app for generating configuration files in a DRY way.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-configen</h1>\n<p>A Django app for generating server configuration files, such as for Nginx,\nuWSGI, Gunicorn etc. in a DRY way.</p>\n<h2>Introduction</h2>\n<p><strong>The problem:</strong></p>\n<p>Configuration files stay pretty much the same for different projects. You're\noften copying these config files from other projects and then only modifying\nthe file paths, domain name and other variables which are unique to this\nproject.</p>\n<p>This process is error-prone and repetitive.</p>\n<p><strong>The solution:</strong></p>\n<p>This app solves it by generating config files from templates. So, instead\nof maintaining config files, you maintain their templates. And then use this\napp to render the templates with the project specific variables.</p>\n<p>You can copy the original templates to multiple projects and stay assured that\nfinal generated config files will have appropriate paths and other variables.</p>\n<h2>Installation</h2>\n<pre><code>pip install django-configen\n</code></pre>\n<p>Add <code>configen</code> to <code>INSTALLED_APPS</code> list:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ... </span>\n    <span class=\"s1\">'configen'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Add these settings to configure configen:</p>\n<pre><span class=\"c1\"># where configen will look for config templates</span>\n<span class=\"n\">CONFIGEN_TEMPLATES_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'configs/templates'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># where configen will keep the generated files</span>\n<span class=\"n\">CONFIGEN_OUTPUT_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'configs/output'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># config context processors</span>\n<span class=\"n\">CONFIGEN_CONFIG_PROCESSORS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'configen.config_processors.common'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p><code>CONFIGEN_CONFIG_PROCESSORS</code> is a list of config processor functions. They are\nsimilar to Django's context processors and whatever data they return will be\nmade available to the config templates during compiling.</p>\n<h2>Basic usage</h2>\n<p>The config processor that you just configured above\n(<code>configen.config_processors.common</code>),\nmakes some common and helpful variables available for you in the config templates.</p>\n<p>These variables are:</p>\n<ul>\n<li><code>settings</code>: current settings file.</li>\n<li><code>project_dir_name</code>: name of the project directory</li>\n<li><code>virtualenv</code>: path to current virtualenv.</li>\n<li><code>python_interpreter</code>: path to current python interpreter</li>\n</ul>\n<p>Now you can write templates for your config files using Django's template\nsyntax.</p>\n<p>For this example, you can create an <code>nginx.conf</code> inside <code>configs/templates/</code>\ndirectory and put this code in it:</p>\n<pre><code>server {\n\n    location /media  {\n        alias {{ settings.MEDIA_ROOT }};\n    }\n\n    location /static {\n        alias {{ settings.STATIC_ROOT }};\n    } \n}\n</code></pre>\n<p>Run this command to compile the template:</p>\n<pre><code>python manage.py configen\n</code></pre>\n<p>It will generate the configuration file from the given template and populate\nit with the given variables. The generated file will be inside the\n<code>configs/output</code> directory.</p>\n<h2>Providing extra context variables</h2>\n<p>A quick way to provide extra context variables is by using\n<code>CONFIGEN_DEFAULT_CONTEXT</code> setting:</p>\n<pre><span class=\"n\">CONFIGEN_DEFAULT_CONTEXT</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># variables listed here will be available to </span>\n        <span class=\"c1\"># all templates</span>\n        <span class=\"s1\">'project_name'</span><span class=\"p\">:</span> <span class=\"s1\">'example'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'nginx.conf'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># variables listed here will be available only to</span>\n        <span class=\"c1\"># nginx.conf template</span>\n        <span class=\"s1\">'domain'</span><span class=\"p\">:</span> <span class=\"s1\">'example.com'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'uwsgi.ini'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># variables listed here will be available only to</span>\n        <span class=\"c1\"># uwsgi.ini template</span>\n        <span class=\"s1\">'module'</span><span class=\"p\">:</span> <span class=\"s1\">'myproject.wisgi'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>It should be mentioned that the context returned by <code>CONFIGEN_DEFAULT_CONTEXT</code>\nwill be overridden by context variables returned by config processors if the\nnames collide.</p>\n<h2>Writing custom config processor functions</h2>\n<p>Using <code>CONFIGEN_DEFAULT_CONTEXT</code> settings gives you a quick and basic way\nto provide context variables to the templates. However, if you want to do some\nextra calculations before returning the variables, this pattern becomes limiting.</p>\n<p>For those cases, configen supports providing context data from functions.\nIt works  similar to Django's context processors. However, to avoid name\nconfusion, we call them config processors.</p>\n<p>This is what a config processor function looks like:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">config_processor</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'var'</span><span class=\"p\">:</span> <span class=\"s1\">'hello'</span><span class=\"p\">}</span>\n</pre>\n<p>The config processor will be passed a <code>template_name</code> argument which will let it\nit know the name of the template being compiled. This is useful if you want to\nreturn different data depending on the template.</p>\n<p>To use your config processor, add this to your settings:</p>\n<pre><span class=\"n\">CONFIGEN_CONFIG_PROCESSORS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'configen.config_processors.common'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'path.to.config_processor'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>The order in which you list the config processors matters. The last config\nprocessor will override the context variables from the previous processors in\ncase there are name collisions.</p>\n<p>If you run the <code>configen</code> command again, the variables returned by your config\nprocessor will be available to the config templates.</p>\n<h3>Passing arguments to config processors from command line</h3>\n<p>You can pass extra arguments to your config processors from command line using\nthe <code>--extra</code> command option:</p>\n<pre><code>python manage.py configen --extra arg1 arg2\n</code></pre>\n<p>These arguments will be available under <code>args</code> argument in your config processor.</p>\n<p>See documentation for <a href=\"#--extra\" rel=\"nofollow\"><code>--extra</code></a> option for more.</p>\n<h2>Changing the name of the output file</h2>\n<p>Configen will save the output files with same name as the input template files.\nThis is okay if you have a single project but can become problematic if you\nhave multiple projects.</p>\n<p>Suppose, you have two projects and both have a config template called <code>nginx.conf</code>.\nThe generated config files will also be called <code>nginx.conf</code> for both projects.\nNow you can't copy both of these files in Nginx's config directory because of\nthe name collision.</p>\n<p>So the general workaround for this problem to rename the files with the project\nname, like <code>project1_nginx.conf</code>, <code>project2_nginx.conf</code> and this problem is\nsolved.</p>\n<p>Configen provides two ways to change the name of the output file.</p>\n<p>First, the simple way: Using <code>CONFIGEN_DEFAULT_META</code> setting:</p>\n<pre><span class=\"n\">CONFIGEN_DEFAULT_META</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'outfile'</span><span class=\"p\">:</span> <span class=\"s1\">'project1_</span><span class=\"si\">{template_name}</span><span class=\"s1\">'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><code>{template_name}</code> will be automatically replaced by the name of the template\nincluding the file extension.</p>\n<p>Just like with <code>CONFIGEN_DEFAULT_CONTEXT</code> setting, you can create keys\nwith the names of your config templates if you only want to override a particular\ntemplate's output file name.</p>\n<p>Another way to provide the meta data to configen is by returning a second dict from your\nconfig processor like this:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">config_processor</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'var'</span><span class=\"p\">:</span> <span class=\"s1\">'hello'</span><span class=\"p\">}</span>\n\n    <span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'outfile'</span><span class=\"p\">:</span> <span class=\"s1\">'project1_</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">template_name</span><span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">)</span>\n</pre>\n<p>Currently, there's only one option supported for meta data - <code>outfile</code>.</p>\n<h2>Settings</h2>\n<h3><code>CONFIGEN_TEMPLATES_DIR</code></h3>\n<p>Path to the directory where configen will look for the config templates.</p>\n<h3><code>CONFIGEN_OUTPUT_DIR</code></h3>\n<p>Path to the directory where configen will keep the generated config files.</p>\n<h3><code>CONFIGEN_CONFIG_PROCESSORS</code></h3>\n<p>A list containing Python path to functions which will be called during generation\nof each config template.</p>\n<p>Example:</p>\n<pre><span class=\"n\">CONFIGEN_CONFIG_PROCESSORS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'configen.config_processors.common'</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">'your.custom.processor'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>The <code>configen.config_processors.common</code> config processor provided by configen\nmakes some commonly used variables available to you in your config templates:</p>\n<ul>\n<li><code>settings</code>: current settings file.</li>\n<li><code>project_dir_name</code>: name of the project directory</li>\n<li><code>virtualenv</code>: path to current virtualenv.</li>\n<li><code>python_interpreter</code>: path to current python interpreter</li>\n</ul>\n<p>You can override these variables from your custom config processors, or leave\nthis processor out of the setting if you don't want it.</p>\n<h3><code>CONFIGEN_DEFAULT_CONTEXT</code></h3>\n<p>A dictionary containing default context variables for generating config files.</p>\n<p>Example:</p>\n<pre><span class=\"n\">CONFIGEN_DEFAULT_CONTEXT</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># will be passed to all templates </span>\n        <span class=\"s1\">'project_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Example'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'nginx.conf'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># will be passed only to nginx.conf template</span>\n        <span class=\"s1\">'domain'</span><span class=\"p\">:</span> <span class=\"s1\">'example.com'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'uwsgi.ini'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'socket'</span><span class=\"p\">:</span> <span class=\"s1\">'/tmp/example.sock'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<h3><code>CONFIGEN_DEFAULT_META</code></h3>\n<p>A dictionary for providing meta configuration information to configen about a\ntemplate.</p>\n<p>Currently only option supported is <code>outfile</code>.</p>\n<p>Example:</p>\n<pre><span class=\"n\">CONFIGEN_DEFAULT_META</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># will be used for all templates </span>\n        <span class=\"s1\">'outfile'</span><span class=\"p\">:</span> <span class=\"s1\">'myproject_</span><span class=\"si\">{template_name}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'nginx.conf'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># will be used only for nginx.conf template</span>\n        <span class=\"s1\">'outfile'</span><span class=\"p\">:</span> <span class=\"s1\">'myproject_nginx_blah_blah.conf'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Command line options</h2>\n<h3><code>template</code></h3>\n<p>Optional. Name of the template to compile. It should be relative to the path\nset in <code>CONFIGEN_TEMPLATES_DIR</code> setting. If not provided, all the templates\npresent in the directory set by <code>CONFIGEN_TEMPLATES_DIR</code> setting are compiled.</p>\n<p>Example:</p>\n<pre><code>python manage.py configen nginx.conf\n</code></pre>\n<h3><code>--print</code></h3>\n<p>Print the compiled template to stdout. Useful if you want to inspect the output\nwithout creating/overwriting the output file.</p>\n<p>Example:</p>\n<pre><code>python manage.py configen --print\n</code></pre>\n<h3><code>--extra</code></h3>\n<p>Extra arguments that you want to pass to your config processor functions.</p>\n<p>Example:</p>\n<pre><code>python manage.py configen --extra arg1 arg2\n</code></pre>\n<p>And then access these arguments like this:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">config_processor</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"c1\"># output: ('arg1', 'arg2',)</span>\n</pre>\n<p><strong>Important:</strong> Doing <code>--extra arg1=hello arg2=world</code> will not work like you\nwould expect. <code>arg1=hello</code> will be parsed as a whole, instead of argument name\nand value.</p>\n<p>The value your config processor will recieve is this:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">config_processor</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"c1\"># output: ('arg1=hello', 'arg2=world',)</span>\n</pre>\n<p>Hence, we used the word \"arguments\" and not \"keyword-arguments\". You can't pass\narbitrary named keyword arguments via command line, at least not with <code>argparse</code>\nwhich is used by Django to parse commands.</p>\n<p>If you want to be able to receive named keyword arguments, you'll need to parse\nthese arguments yourself.</p>\n<h3><code>--verbosity</code></h3>\n<p>The command will print some debug output while compiling templates. You can turn\nit off like this:</p>\n<pre><code>python manage.py configen --verbosity 0\n</code></pre>\n<h2>License</h2>\n<p><a href=\"LICENSE.txt\" rel=\"nofollow\">BSD-3-Clause</a></p>\n\n          </div>"}, "last_serial": 6618831, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "7c6b52e02b0fed423116daf0488eb148", "sha256": "eb74366678411c1dde485c22f336e0e37607535fca3a340ecdf19cd3fb3a96c9"}, "downloads": -1, "filename": "django-configen-1.0.tar.gz", "has_sig": false, "md5_digest": "7c6b52e02b0fed423116daf0488eb148", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.4", "size": 9710, "upload_time": "2020-02-12T21:20:40", "upload_time_iso_8601": "2020-02-12T21:20:40.371608Z", "url": "https://files.pythonhosted.org/packages/e3/b6/f646c1dce006d91af80efbc07661bdbae48c1e167e677230e35b73ec840d/django-configen-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c6b52e02b0fed423116daf0488eb148", "sha256": "eb74366678411c1dde485c22f336e0e37607535fca3a340ecdf19cd3fb3a96c9"}, "downloads": -1, "filename": "django-configen-1.0.tar.gz", "has_sig": false, "md5_digest": "7c6b52e02b0fed423116daf0488eb148", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.4", "size": 9710, "upload_time": "2020-02-12T21:20:40", "upload_time_iso_8601": "2020-02-12T21:20:40.371608Z", "url": "https://files.pythonhosted.org/packages/e3/b6/f646c1dce006d91af80efbc07661bdbae48c1e167e677230e35b73ec840d/django-configen-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:54 2020"}