{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Topic :: Software Development :: Libraries"], "description": "Flower\n======\n\n.. image:: https://secure.travis-ci.org/benoitc/flower.png?branch=master\n    :target: http://travis-ci.org/benoitc/flower\n\ncollection of modules to build distributed and reliable concurrent\nsystems in Python.\n\nRequirements\n------------\n\n- Python from 2.6 to 3.x\n- A platform supported by `libuv <https://github.com/joyent/libuv>`\n\nSimple example\n--------------\n\nA simple example showing how to create a consumer and use other actor\nfunction to feed it.\n\n.. code-block:: python\n\n        import flower\n\n        messages = []\n        sources = []\n        def consumer():\n            # wait for coming message in the current actor\n            while True:\n                source, msg = flower.receive()\n                if not msg:\n                    break\n                print(\"got message from %s: %s\" % (source.ref, msg))\n\n        def publisher1(ref):\n            # an actor sending messages to the consumer\n            msg = ['hello', 'world']\n            for s in msg:\n                flower.send(ref, s)\n\n        def publisher2(ref):\n            msg = ['brave', 'new', 'world', '']\n            for s in msg:\n                flower.send(ref, s)\n\n        ref_consumer = flower.spawn(consumer)\n        flower.spawn(publisher1, ref_consumer)\n        flower.spawn(publisher2, ref_consumer)\n\n        flower.run()\n\n\nshould return::\n\n    $ python examples/actor_example.py\n    got message from 1: hello\n    got message from 2: brave\n    got message from 1: world\n    got message from 2: new\n    got message from 2: world\n\n\nInstallation\n------------\n\nFlower requires Python superior to 2.6 (yes Python 3 is supported)\n\nTo install flower using pip you must make sure you have a\nrecent version of distribute installed::\n\n    $ curl -O http://python-distribute.org/distribute_setup.py\n    $ sudo python distribute_setup.py\n    $ easy_install pip\n\n\nFor now flower can only be installed from sources. To install or upgrade to the latest released version of flower::\n\n    $ git clone https://github.com/benoitc/flower.git\n    $ cd flower && pip install -r requirements.txt\n\nLicense\n-------\n\nflower is available in the public domain (see UNLICENSE). flower is also\noptionally available under the MIT License (see LICENSE), meant\nespecially for jurisdictions that do not recognize public domain\nworks.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/benoitc/flower", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "pyflower", "package_url": "https://pypi.org/project/pyflower/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyflower/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/benoitc/flower"}, "release_url": "https://pypi.org/project/pyflower/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "collection of modules to build distributed and reliable concurrent systems", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.org/benoitc/flower\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/benoitc/flower.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52f6e9bcf9aaebc3d3271e38f2fd051c17057809/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f62656e6f6974632f666c6f7765722e706e673f6272616e63683d6d6173746572\"></a>\n<p>collection of modules to build distributed and reliable concurrent\nsystems in Python.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python from 2.6 to 3.x</li>\n<li>A platform supported by <cite>libuv &lt;https://github.com/joyent/libuv&gt;</cite></li>\n</ul>\n</div>\n<div id=\"simple-example\">\n<h2>Simple example</h2>\n<p>A simple example showing how to create a consumer and use other actor\nfunction to feed it.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">flower</span>\n\n<span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">sources</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">def</span> <span class=\"nf\">consumer</span><span class=\"p\">():</span>\n    <span class=\"c1\"># wait for coming message in the current actor</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">flower</span><span class=\"o\">.</span><span class=\"n\">receive</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">msg</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"got message from </span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">publisher1</span><span class=\"p\">(</span><span class=\"n\">ref</span><span class=\"p\">):</span>\n    <span class=\"c1\"># an actor sending messages to the consumer</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"s1\">'world'</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">msg</span><span class=\"p\">:</span>\n        <span class=\"n\">flower</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">ref</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">publisher2</span><span class=\"p\">(</span><span class=\"n\">ref</span><span class=\"p\">):</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'brave'</span><span class=\"p\">,</span> <span class=\"s1\">'new'</span><span class=\"p\">,</span> <span class=\"s1\">'world'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">msg</span><span class=\"p\">:</span>\n        <span class=\"n\">flower</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">ref</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">ref_consumer</span> <span class=\"o\">=</span> <span class=\"n\">flower</span><span class=\"o\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">)</span>\n<span class=\"n\">flower</span><span class=\"o\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">publisher1</span><span class=\"p\">,</span> <span class=\"n\">ref_consumer</span><span class=\"p\">)</span>\n<span class=\"n\">flower</span><span class=\"o\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">publisher2</span><span class=\"p\">,</span> <span class=\"n\">ref_consumer</span><span class=\"p\">)</span>\n\n<span class=\"n\">flower</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>should return:</p>\n<pre>$ python examples/actor_example.py\ngot message from 1: hello\ngot message from 2: brave\ngot message from 1: world\ngot message from 2: new\ngot message from 2: world\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Flower requires Python superior to 2.6 (yes Python 3 is supported)</p>\n<p>To install flower using pip you must make sure you have a\nrecent version of distribute installed:</p>\n<pre>$ curl -O http://python-distribute.org/distribute_setup.py\n$ sudo python distribute_setup.py\n$ easy_install pip\n</pre>\n<p>For now flower can only be installed from sources. To install or upgrade to the latest released version of flower:</p>\n<pre>$ git clone https://github.com/benoitc/flower.git\n$ cd flower &amp;&amp; pip install -r requirements.txt\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>flower is available in the public domain (see UNLICENSE). flower is also\noptionally available under the MIT License (see LICENSE), meant\nespecially for jurisdictions that do not recognize public domain\nworks.</p>\n</div>\n\n          </div>"}, "last_serial": 475004, "releases": {"0.1.0": []}, "urls": [], "timestamp": "Fri May  8 03:05:42 2020"}