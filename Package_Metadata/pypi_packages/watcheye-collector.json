{"info": {"author": "Andrzej Mateja", "author_email": "mateja.and@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP"], "description": ".. image:: https://img.shields.io/travis/com/watcheye/watcheye-collector.svg\n    :alt: Travis (.com)\n    :target: https://travis-ci.com/watcheye/watcheye-collector\n.. image:: https://img.shields.io/coveralls/github/watcheye/watcheye-collector.svg\n    :target: https://coveralls.io/github/watcheye/watcheye-collector\n.. image:: https://img.shields.io/pypi/v/watcheye-collector.svg\n    :target: https://pypi.python.org/pypi/watcheye-collector\n.. image:: https://img.shields.io/pypi/format/watcheye-collector.svg\n    :target: https://pypi.python.org/pypi/watcheye-collector\n.. image:: https://img.shields.io/pypi/djversions/watcheye-collector.svg\n    :target: https://pypi.python.org/pypi/watcheye-collector\n.. image:: https://img.shields.io/pypi/pyversions/watcheye-collector.svg\n    :target: https://pypi.python.org/pypi/watcheye-collector\n.. image:: https://img.shields.io/pypi/status/watcheye-collector.svg\n    :target: https://pypi.python.org/pypi/watcheye-collector\n.. image:: https://img.shields.io/github/license/watcheye/watcheye-collector.svg\n\n=========\nCollector\n=========\n\nCollector is a Django application to collect monitoring data samples\nthrough HTTP or SNMP GET interface. Collected data might be then\nvisualized using e.g. `Grafana <https://grafana.com/grafana/download>`_.\n\nDependencies\n------------\n\nCollector uses `InfluxDB <https://portal.influxdata.com/downloads>`_\ntime series database for storing monitoring data samples and `django\nsupported database\n<https://docs.djangoproject.com/en/dev/ref/databases/>`_ for storing\nconfiguration and\n`Redis broker\n<http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html>`_.\n\nQuick start\n-----------\n\nAssuming InfluxDB is properly configured (`setting up authentication\n<https://docs.influxdata.com/influxdb/latest/administration/authentication_and_authorization/#set-up-authentication>`_\nis recommended) and so is Redis broker just a few steps are required.\n\n#. Install ``watcheye-collector``:\n\n   .. code:: shell\n\n      $ pip install watcheye-collector\n\n#. Add ``collector`` application to ``INSTALLED_APPS`` setting.\n\n   .. code:: python\n\n      INSTALLED_APPS = [\n          ...\n          'collector',\n      ]\n\n#. Integrate Celery with your django project (see `Celery documentation\n   <http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html>`_\n   for further reference).\n\n#. Add InfluxDB connection and Celery configuration in ``settings.py``\n   file:\n\n   .. code:: python\n\n      INFLUXDB_HOST = 'my_host'\n      INFLUXDB_USERNAME = 'user'\n      INFLUXDB_PASSWORD = 'secret'\n\n      CELERY_BEAT_SCHEDULE = {\n          'snmp-scheduler': {\n              'task': 'collector.tasks.snmp_scheduler',\n              'schedule': crontab(minute='*')\n          }\n      }\n      CELERY_RESULT_BACKEND = 'redis://my_broker_host/0'\n      CELERY_BROKER_URL = 'redis://my_broker_host/1'\n\n      # to use non-default values configure also:\n      INFLUXDB_PORT = 1234\n      INFLUXDB_DATABASE = 'my_database'\n      INFLUXDB_RETENTION_POLICY = 'my_policy'\n      INFLUXDB_DURATION = '30d'\n\n#. To set InfluxDB instance up run:\n\n   .. code:: shell\n\n      python manage.py setupinfluxdb --username <admin_username>\n\n#. To create the collector models run:\n\n   .. code:: shell\n\n      python manage.py migrate\n\n#. Include the collector URLconf in your project urls.py:\n\n   .. code:: python\n\n      path('collector/', include('collector.urls')),\n\n#. Start the development server and visit http://127.0.0.1:8000/admin/\n   to create a collector configuration (the Admin application must also\n   be enabled).\n\n#. Run Celery worker with:\n\n   .. code:: shell\n\n      celery --beat --app <my_project> worker\n\n#. POST some samples:\n\n   .. code:: shell\n\n      $ curl -i -X POST \\\n      -H \"Content-Type: application/json\" \\\n      -d '{\"host\":\"test\", \"timestamp\": 1500000000,\n      \"samples\": [{\"parameter\":\"CPU\", \"value\": 10}]}' \\\n      http://127.0.0.1:8000/collector/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/watcheye/watcheye-collector", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "watcheye-collector", "package_url": "https://pypi.org/project/watcheye-collector/", "platform": "", "project_url": "https://pypi.org/project/watcheye-collector/", "project_urls": {"Homepage": "https://github.com/watcheye/watcheye-collector"}, "release_url": "https://pypi.org/project/watcheye-collector/2.0.0/", "requires_dist": ["celery[redis] (>=4.2.0)", "django (>=2.0.0)", "influxdb (>=5.2.0)", "pyasn1", "pysnmp"], "requires_python": "", "summary": "A Django application to collect monitoring data samples through HTTP or SNMP GET interface.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.com/watcheye/watcheye-collector\" rel=\"nofollow\"><img alt=\"Travis (.com)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe9aa851410442e33154c3762dec032ef4c4dbad/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f77617463686579652f77617463686579652d636f6c6c6563746f722e737667\"></a>\n<a href=\"https://coveralls.io/github/watcheye/watcheye-collector\" rel=\"nofollow\"><img alt=\"https://img.shields.io/coveralls/github/watcheye/watcheye-collector.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e5116718c0e48c1ccbeef6fa092884550e7adb3/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f77617463686579652f77617463686579652d636f6c6c6563746f722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/watcheye-collector\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/watcheye-collector.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0011fa4f4cbfb52db2c4206f00a06dfd56778f83/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f77617463686579652d636f6c6c6563746f722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/watcheye-collector\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/format/watcheye-collector.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29428e251548d2bd5c670b1d4d60320e79848505/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f77617463686579652d636f6c6c6563746f722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/watcheye-collector\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/djversions/watcheye-collector.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1fa5fcc43ac8f1e2187d4c80273c8cf73367d02/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646a76657273696f6e732f77617463686579652d636f6c6c6563746f722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/watcheye-collector\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/watcheye-collector.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a313f3ee6709b166d5126b636747c86e9e1c6ebb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f77617463686579652d636f6c6c6563746f722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/watcheye-collector\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/status/watcheye-collector.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/073d81776d44c3408e91ea3658d4a6f5d21e2ac7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f77617463686579652d636f6c6c6563746f722e737667\"></a>\n<img alt=\"https://img.shields.io/github/license/watcheye/watcheye-collector.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/774df5b451937b9cb3e84ade8bedf25c12882a6b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f77617463686579652f77617463686579652d636f6c6c6563746f722e737667\">\n<div id=\"collector\">\n<h2>Collector</h2>\n<p>Collector is a Django application to collect monitoring data samples\nthrough HTTP or SNMP GET interface. Collected data might be then\nvisualized using e.g. <a href=\"https://grafana.com/grafana/download\" rel=\"nofollow\">Grafana</a>.</p>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>Collector uses <a href=\"https://portal.influxdata.com/downloads\" rel=\"nofollow\">InfluxDB</a>\ntime series database for storing monitoring data samples and <a href=\"https://docs.djangoproject.com/en/dev/ref/databases/\" rel=\"nofollow\">django\nsupported database</a> for storing\nconfiguration and\n<a href=\"http://docs.celeryproject.org/en/latest/getting-started/brokers/redis.html\" rel=\"nofollow\">Redis broker</a>.</p>\n</div>\n<div id=\"quick-start\">\n<h3>Quick start</h3>\n<p>Assuming InfluxDB is properly configured (<a href=\"https://docs.influxdata.com/influxdb/latest/administration/authentication_and_authorization/#set-up-authentication\" rel=\"nofollow\">setting up authentication</a>\nis recommended) and so is Redis broker just a few steps are required.</p>\n<ol>\n<li><p>Install <tt><span class=\"pre\">watcheye-collector</span></tt>:</p>\n<pre>$ pip install watcheye-collector\n</pre>\n</li>\n<li><p>Add <tt>collector</tt> application to <tt>INSTALLED_APPS</tt> setting.</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'collector'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n</li>\n<li><p>Integrate Celery with your django project (see <a href=\"http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html\" rel=\"nofollow\">Celery documentation</a>\nfor further reference).</p>\n</li>\n<li><p>Add InfluxDB connection and Celery configuration in <tt>settings.py</tt>\nfile:</p>\n<pre><span class=\"n\">INFLUXDB_HOST</span> <span class=\"o\">=</span> <span class=\"s1\">'my_host'</span>\n<span class=\"n\">INFLUXDB_USERNAME</span> <span class=\"o\">=</span> <span class=\"s1\">'user'</span>\n<span class=\"n\">INFLUXDB_PASSWORD</span> <span class=\"o\">=</span> <span class=\"s1\">'secret'</span>\n\n<span class=\"n\">CELERY_BEAT_SCHEDULE</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'snmp-scheduler'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'task'</span><span class=\"p\">:</span> <span class=\"s1\">'collector.tasks.snmp_scheduler'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'schedule'</span><span class=\"p\">:</span> <span class=\"n\">crontab</span><span class=\"p\">(</span><span class=\"n\">minute</span><span class=\"o\">=</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"n\">CELERY_RESULT_BACKEND</span> <span class=\"o\">=</span> <span class=\"s1\">'redis://my_broker_host/0'</span>\n<span class=\"n\">CELERY_BROKER_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'redis://my_broker_host/1'</span>\n\n<span class=\"c1\"># to use non-default values configure also:</span>\n<span class=\"n\">INFLUXDB_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">1234</span>\n<span class=\"n\">INFLUXDB_DATABASE</span> <span class=\"o\">=</span> <span class=\"s1\">'my_database'</span>\n<span class=\"n\">INFLUXDB_RETENTION_POLICY</span> <span class=\"o\">=</span> <span class=\"s1\">'my_policy'</span>\n<span class=\"n\">INFLUXDB_DURATION</span> <span class=\"o\">=</span> <span class=\"s1\">'30d'</span>\n</pre>\n</li>\n<li><p>To set InfluxDB instance up run:</p>\n<pre>python manage.py setupinfluxdb --username &lt;admin_username&gt;\n</pre>\n</li>\n<li><p>To create the collector models run:</p>\n<pre>python manage.py migrate\n</pre>\n</li>\n<li><p>Include the collector URLconf in your project urls.py:</p>\n<pre><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'collector/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'collector.urls'</span><span class=\"p\">)),</span>\n</pre>\n</li>\n<li><p>Start the development server and visit <a href=\"http://127.0.0.1:8000/admin/\" rel=\"nofollow\">http://127.0.0.1:8000/admin/</a>\nto create a collector configuration (the Admin application must also\nbe enabled).</p>\n</li>\n<li><p>Run Celery worker with:</p>\n<pre>celery --beat --app &lt;my_project&gt; worker\n</pre>\n</li>\n<li><p>POST some samples:</p>\n<pre>$ curl -i -X POST <span class=\"se\">\\\n</span>-H <span class=\"s2\">\"Content-Type: application/json\"</span> <span class=\"se\">\\\n</span>-d <span class=\"s1\">'{\"host\":\"test\", \"timestamp\": 1500000000,\n\"samples\": [{\"parameter\":\"CPU\", \"value\": 10}]}'</span> <span class=\"se\">\\\n</span>http://127.0.0.1:8000/collector/\n</pre>\n</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4660407, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6b369f80bffb2f7f1108c3547eb8a0eb", "sha256": "966dbd21a928175c7668d0d02f304e1cf3d8ad06c3993410bf9583328cd9ee12"}, "downloads": -1, "filename": "watcheye-collector-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6b369f80bffb2f7f1108c3547eb8a0eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18860, "upload_time": "2018-09-20T12:58:33", "upload_time_iso_8601": "2018-09-20T12:58:33.423859Z", "url": "https://files.pythonhosted.org/packages/da/56/cb31c257ebd1392ef132a923e820e515bb77123ad9015ca9031c67143cdc/watcheye-collector-1.0.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "29a6b25692cdd6b8ce588d05868db5a6", "sha256": "f5a9f2e62b7b3fcd9bd2ec3ee86067099b490e8e475cf988d760fa5a4ce0486b"}, "downloads": -1, "filename": "watcheye_collector-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "29a6b25692cdd6b8ce588d05868db5a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32182, "upload_time": "2019-01-04T14:33:46", "upload_time_iso_8601": "2019-01-04T14:33:46.385940Z", "url": "https://files.pythonhosted.org/packages/a4/b6/dae78197bab842b4880740b9860426740295cd4f15d9eb0c3511712fe43d/watcheye_collector-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ee1e015140dd6095cbe17c2ad008228", "sha256": "2ebe7a105dce429ebe9c9d0589d59682bd6d3efc9f82c6d743f526ed2010c8c0"}, "downloads": -1, "filename": "watcheye-collector-2.0.0.tar.gz", "has_sig": false, "md5_digest": "9ee1e015140dd6095cbe17c2ad008228", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25891, "upload_time": "2019-01-04T14:33:47", "upload_time_iso_8601": "2019-01-04T14:33:47.950473Z", "url": "https://files.pythonhosted.org/packages/ba/cb/974af5731a6b0c077d088ede0418c167f9c8296e7e7e96a2a14e7438db26/watcheye-collector-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "29a6b25692cdd6b8ce588d05868db5a6", "sha256": "f5a9f2e62b7b3fcd9bd2ec3ee86067099b490e8e475cf988d760fa5a4ce0486b"}, "downloads": -1, "filename": "watcheye_collector-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "29a6b25692cdd6b8ce588d05868db5a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32182, "upload_time": "2019-01-04T14:33:46", "upload_time_iso_8601": "2019-01-04T14:33:46.385940Z", "url": "https://files.pythonhosted.org/packages/a4/b6/dae78197bab842b4880740b9860426740295cd4f15d9eb0c3511712fe43d/watcheye_collector-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ee1e015140dd6095cbe17c2ad008228", "sha256": "2ebe7a105dce429ebe9c9d0589d59682bd6d3efc9f82c6d743f526ed2010c8c0"}, "downloads": -1, "filename": "watcheye-collector-2.0.0.tar.gz", "has_sig": false, "md5_digest": "9ee1e015140dd6095cbe17c2ad008228", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25891, "upload_time": "2019-01-04T14:33:47", "upload_time_iso_8601": "2019-01-04T14:33:47.950473Z", "url": "https://files.pythonhosted.org/packages/ba/cb/974af5731a6b0c077d088ede0418c167f9c8296e7e7e96a2a14e7438db26/watcheye-collector-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:12 2020"}