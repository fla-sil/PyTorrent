{"info": {"author": "Fayez Zouheiry", "author_email": "iamfayez@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Cython", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Multimedia :: Graphics :: Capture :: Scanners", "Topic :: Multimedia :: Graphics :: Graphics Conversion", "Topic :: Scientific/Engineering :: Image Recognition"], "description": "=========\ntesserocr\n=========\n\nA simple, |Pillow|_-friendly,\nwrapper around the ``tesseract-ocr`` API for Optical Character Recognition\n(OCR).\n\n.. image:: https://travis-ci.org/sirfz/tesserocr.svg?branch=master\n    :target: https://travis-ci.org/sirfz/tesserocr\n    :alt: TravisCI build status\n\n.. image:: https://img.shields.io/pypi/v/tesserocr.svg?maxAge=2592000\n    :target: https://pypi.python.org/pypi/tesserocr\n    :alt: Latest version on PyPi\n\n.. image:: https://img.shields.io/pypi/pyversions/tesserocr.svg?maxAge=2592000\n    :alt: Supported python versions\n\n**tesserocr** integrates directly with Tesseract's C++ API using Cython\nwhich allows for a simple Pythonic and easy-to-read source code. It\nenables real concurrent execution when used with Python's ``threading``\nmodule by releasing the GIL while processing an image in tesseract.\n\n**tesserocr** is designed to be |Pillow|_-friendly but can also be used\nwith image files instead.\n\n.. |Pillow| replace:: ``Pillow``\n.. _Pillow: http://python-pillow.github.io/\n\nRequirements\n============\n\nRequires libtesseract (>=3.04) and libleptonica (>=1.71).\n\nOn Debian/Ubuntu:\n\n::\n\n    $ apt-get install tesseract-ocr libtesseract-dev libleptonica-dev pkg-config\n\nYou may need to `manually compile tesseract`_ for a more recent version. Note that you may need\nto update your ``LD_LIBRARY_PATH`` environment variable to point to the right library versions in\ncase you have multiple tesseract/leptonica installations.\n\n|Cython|_ (>=0.23) is required for building and optionally |Pillow|_ to support ``PIL.Image`` objects.\n\n.. _manually compile tesseract: https://github.com/tesseract-ocr/tesseract/wiki/Compiling\n.. |Cython| replace:: ``Cython``\n.. _Cython: http://cython.org/\n\nInstallation\n============\nLinux and BSD/MacOS\n-------------------\n::\n\n    $ pip install tesserocr\n\nThe setup script attempts to detect the include/library dirs (via |pkg-config|_ if available) but you\ncan override them with your own parameters, e.g.:\n\n::\n\n    $ CPPFLAGS=-I/usr/local/include pip install tesserocr\n\nor\n\n::\n\n    $ python setup.py build_ext -I/usr/local/include\n\nTested on Linux and BSD/MacOS\n\n.. |pkg-config| replace:: **pkg-config**\n.. _pkg-config: https://pkgconfig.freedesktop.org/\n\nWindows\n-------\n\nThe proposed downloads consist of stand-alone packages containing all the Windows libraries needed for execution. This means that no additional installation of tesseract is required on your system.\n\nConda\n`````\n\nYou can use the channel `simonflueckiger <https://anaconda.org/simonflueckiger/tesserocr>`_ to install from Conda:\n\n::\n\n    > conda install -c simonflueckiger tesserocr\n\nor to get **tesserocr** compiled with **tesseract 4.0.0**:\n\n::\n\n    > conda install -c simonflueckiger/label/tesseract-4.0.0-master tesserocr\n\npip\n```\n\nDownload the wheel file corresponding to your Windows platform and Python installation from `simonflueckiger/tesserocr-windows_build/releases <https://github.com/simonflueckiger/tesserocr-windows_build/releases>`_ and install them via:\n\n::\n\n    > pip install <package_name>.whl\n\nUsage\n=====\n\nInitialize and re-use the tesseract API instance to score multiple\nimages:\n\n.. code:: python\n\n    from tesserocr import PyTessBaseAPI\n\n    images = ['sample.jpg', 'sample2.jpg', 'sample3.jpg']\n\n    with PyTessBaseAPI() as api:\n        for img in images:\n            api.SetImageFile(img)\n            print(api.GetUTF8Text())\n            print(api.AllWordConfidences())\n    # api is automatically finalized when used in a with-statement (context manager).\n    # otherwise api.End() should be explicitly called when it's no longer needed.\n\n``PyTessBaseAPI`` exposes several tesseract API methods. Make sure you\nread their docstrings for more info.\n\nBasic example using available helper functions:\n\n.. code:: python\n\n    import tesserocr\n    from PIL import Image\n\n    print(tesserocr.tesseract_version())  # print tesseract-ocr version\n    print(tesserocr.get_languages())  # prints tessdata path and list of available languages\n\n    image = Image.open('sample.jpg')\n    print(tesserocr.image_to_text(image))  # print ocr text from image\n    # or\n    print(tesserocr.file_to_text('sample.jpg'))\n\n``image_to_text`` and ``file_to_text`` can be used with ``threading`` to\nconcurrently process multiple images which is highly efficient.\n\nAdvanced API Examples\n---------------------\n\nGetComponentImages example:\n```````````````````````````\n\n.. code:: python\n\n    from PIL import Image\n    from tesserocr import PyTessBaseAPI, RIL\n\n    image = Image.open('/usr/src/tesseract/testing/phototest.tif')\n    with PyTessBaseAPI() as api:\n        api.SetImage(image)\n        boxes = api.GetComponentImages(RIL.TEXTLINE, True)\n        print('Found {} textline image components.'.format(len(boxes)))\n        for i, (im, box, _, _) in enumerate(boxes):\n            # im is a PIL image object\n            # box is a dict with x, y, w and h keys\n            api.SetRectangle(box['x'], box['y'], box['w'], box['h'])\n            ocrResult = api.GetUTF8Text()\n            conf = api.MeanTextConf()\n            print(u\"Box[{0}]: x={x}, y={y}, w={w}, h={h}, \"\n                  \"confidence: {1}, text: {2}\".format(i, conf, ocrResult, **box))\n\nOrientation and script detection (OSD):\n```````````````````````````````````````\n\n.. code:: python\n\n    from PIL import Image\n    from tesserocr import PyTessBaseAPI, PSM\n\n    with PyTessBaseAPI(psm=PSM.AUTO_OSD) as api:\n        image = Image.open(\"/usr/src/tesseract/testing/eurotext.tif\")\n        api.SetImage(image)\n        api.Recognize()\n\n        it = api.AnalyseLayout()\n        orientation, direction, order, deskew_angle = it.Orientation()\n        print(\"Orientation: {:d}\".format(orientation))\n        print(\"WritingDirection: {:d}\".format(direction))\n        print(\"TextlineOrder: {:d}\".format(order))\n        print(\"Deskew angle: {:.4f}\".format(deskew_angle))\n\nor more simply with ``OSD_ONLY`` page segmentation mode:\n\n.. code:: python\n\n    from tesserocr import PyTessBaseAPI, PSM\n\n    with PyTessBaseAPI(psm=PSM.OSD_ONLY) as api:\n        api.SetImageFile(\"/usr/src/tesseract/testing/eurotext.tif\")\n\n        os = api.DetectOS()\n        print(\"Orientation: {orientation}\\nOrientation confidence: {oconfidence}\\n\"\n              \"Script: {script}\\nScript confidence: {sconfidence}\".format(**os))\n\nmore human-readable info with tesseract 4+ (demonstrates LSTM engine usage):\n\n.. code:: python\n\n    from tesserocr import PyTessBaseAPI, PSM, OEM\n\n    with PyTessBaseAPI(psm=PSM.OSD_ONLY, oem=OEM.LSTM_ONLY) as api:\n        api.SetImageFile(\"/usr/src/tesseract/testing/eurotext.tif\")\n\n        os = api.DetectOrientationScript()\n        print(\"Orientation: {orient_deg}\\nOrientation confidence: {orient_conf}\\n\"\n              \"Script: {script_name}\\nScript confidence: {script_conf}\".format(**os))\n\nIterator over the classifier choices for a single symbol:\n`````````````````````````````````````````````````````````\n\n.. code:: python\n\n    from __future__ import print_function\n\n    from tesserocr import PyTessBaseAPI, RIL, iterate_level\n\n    with PyTessBaseAPI() as api:\n        api.SetImageFile('/usr/src/tesseract/testing/phototest.tif')\n        api.SetVariable(\"save_blob_choices\", \"T\")\n        api.SetRectangle(37, 228, 548, 31)\n        api.Recognize()\n\n        ri = api.GetIterator()\n        level = RIL.SYMBOL\n        for r in iterate_level(ri, level):\n            symbol = r.GetUTF8Text(level)  # r == ri\n            conf = r.Confidence(level)\n            if symbol:\n                print(u'symbol {}, conf: {}'.format(symbol, conf), end='')\n            indent = False\n            ci = r.GetChoiceIterator()\n            for c in ci:\n                if indent:\n                    print('\\t\\t ', end='')\n                print('\\t- ', end='')\n                choice = c.GetUTF8Text()  # c == ci\n                print(u'{} conf: {}'.format(choice, c.Confidence()))\n                indent = True\n            print('---------------------------------------------')", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sirfz/tesserocr", "keywords": "Tesseract,tesseract-ocr,OCR,optical character recognition,PIL,Pillow,Cython", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ocrd-fork-tesserocr", "package_url": "https://pypi.org/project/ocrd-fork-tesserocr/", "platform": "", "project_url": "https://pypi.org/project/ocrd-fork-tesserocr/", "project_urls": {"Homepage": "https://github.com/sirfz/tesserocr"}, "release_url": "https://pypi.org/project/ocrd-fork-tesserocr/3.0.0rc2/", "requires_dist": null, "requires_python": "", "summary": "A simple, Pillow-friendly, Python wrapper around tesseract-ocr API using Cython", "version": "3.0.0rc2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple, <a href=\"http://python-pillow.github.io/\" rel=\"nofollow\"><tt>Pillow</tt></a>-friendly,\nwrapper around the <tt><span class=\"pre\">tesseract-ocr</span></tt> API for Optical Character Recognition\n(OCR).</p>\n<a href=\"https://travis-ci.org/sirfz/tesserocr\" rel=\"nofollow\"><img alt=\"TravisCI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05e37e18eb93ffc2e0e4cb5e273d31d99d54101a/68747470733a2f2f7472617669732d63692e6f72672f736972667a2f7465737365726f63722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/tesserocr\" rel=\"nofollow\"><img alt=\"Latest version on PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4727be78897c75fd28b0da8ecb18c5290d6b8b30/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7465737365726f63722e7376673f6d61784167653d32353932303030\"></a>\n<img alt=\"Supported python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5dbf364677babce76511b596b6c7c39be7661817/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7465737365726f63722e7376673f6d61784167653d32353932303030\">\n<p><strong>tesserocr</strong> integrates directly with Tesseract\u2019s C++ API using Cython\nwhich allows for a simple Pythonic and easy-to-read source code. It\nenables real concurrent execution when used with Python\u2019s <tt>threading</tt>\nmodule by releasing the GIL while processing an image in tesseract.</p>\n<p><strong>tesserocr</strong> is designed to be <a href=\"http://python-pillow.github.io/\" rel=\"nofollow\"><tt>Pillow</tt></a>-friendly but can also be used\nwith image files instead.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Requires libtesseract (&gt;=3.04) and libleptonica (&gt;=1.71).</p>\n<p>On Debian/Ubuntu:</p>\n<pre>$ apt-get install tesseract-ocr libtesseract-dev libleptonica-dev pkg-config\n</pre>\n<p>You may need to <a href=\"https://github.com/tesseract-ocr/tesseract/wiki/Compiling\" rel=\"nofollow\">manually compile tesseract</a> for a more recent version. Note that you may need\nto update your <tt>LD_LIBRARY_PATH</tt> environment variable to point to the right library versions in\ncase you have multiple tesseract/leptonica installations.</p>\n<p><a href=\"http://cython.org/\" rel=\"nofollow\"><tt>Cython</tt></a> (&gt;=0.23) is required for building and optionally <a href=\"http://python-pillow.github.io/\" rel=\"nofollow\"><tt>Pillow</tt></a> to support <tt>PIL.Image</tt> objects.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"linux-and-bsd-macos\">\n<h3>Linux and BSD/MacOS</h3>\n<pre>$ pip install tesserocr\n</pre>\n<p>The setup script attempts to detect the include/library dirs (via <a href=\"https://pkgconfig.freedesktop.org/\" rel=\"nofollow\"><strong>pkg-config</strong></a> if available) but you\ncan override them with your own parameters, e.g.:</p>\n<pre>$ CPPFLAGS=-I/usr/local/include pip install tesserocr\n</pre>\n<p>or</p>\n<pre>$ python setup.py build_ext -I/usr/local/include\n</pre>\n<p>Tested on Linux and BSD/MacOS</p>\n</div>\n<div id=\"windows\">\n<h3>Windows</h3>\n<p>The proposed downloads consist of stand-alone packages containing all the Windows libraries needed for execution. This means that no additional installation of tesseract is required on your system.</p>\n<div id=\"conda\">\n<h4>Conda</h4>\n<p>You can use the channel <a href=\"https://anaconda.org/simonflueckiger/tesserocr\" rel=\"nofollow\">simonflueckiger</a> to install from Conda:</p>\n<pre>&gt; conda install -c simonflueckiger tesserocr\n</pre>\n<p>or to get <strong>tesserocr</strong> compiled with <strong>tesseract 4.0.0</strong>:</p>\n<pre>&gt; conda install -c simonflueckiger/label/tesseract-4.0.0-master tesserocr\n</pre>\n</div>\n<div id=\"pip\">\n<h4>pip</h4>\n<p>Download the wheel file corresponding to your Windows platform and Python installation from <a href=\"https://github.com/simonflueckiger/tesserocr-windows_build/releases\" rel=\"nofollow\">simonflueckiger/tesserocr-windows_build/releases</a> and install them via:</p>\n<pre>&gt; pip install &lt;package_name&gt;.whl\n</pre>\n</div>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Initialize and re-use the tesseract API instance to score multiple\nimages:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tesserocr</span> <span class=\"kn\">import</span> <span class=\"n\">PyTessBaseAPI</span>\n\n<span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'sample.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'sample2.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'sample3.jpg'</span><span class=\"p\">]</span>\n\n<span class=\"k\">with</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">api</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">img</span> <span class=\"ow\">in</span> <span class=\"n\">images</span><span class=\"p\">:</span>\n        <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">SetImageFile</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">GetUTF8Text</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">AllWordConfidences</span><span class=\"p\">())</span>\n<span class=\"c1\"># api is automatically finalized when used in a with-statement (context manager).</span>\n<span class=\"c1\"># otherwise api.End() should be explicitly called when it's no longer needed.</span>\n</pre>\n<p><tt>PyTessBaseAPI</tt> exposes several tesseract API methods. Make sure you\nread their docstrings for more info.</p>\n<p>Basic example using available helper functions:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tesserocr</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tesserocr</span><span class=\"o\">.</span><span class=\"n\">tesseract_version</span><span class=\"p\">())</span>  <span class=\"c1\"># print tesseract-ocr version</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tesserocr</span><span class=\"o\">.</span><span class=\"n\">get_languages</span><span class=\"p\">())</span>  <span class=\"c1\"># prints tessdata path and list of available languages</span>\n\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'sample.jpg'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tesserocr</span><span class=\"o\">.</span><span class=\"n\">image_to_text</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">))</span>  <span class=\"c1\"># print ocr text from image</span>\n<span class=\"c1\"># or</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tesserocr</span><span class=\"o\">.</span><span class=\"n\">file_to_text</span><span class=\"p\">(</span><span class=\"s1\">'sample.jpg'</span><span class=\"p\">))</span>\n</pre>\n<p><tt>image_to_text</tt> and <tt>file_to_text</tt> can be used with <tt>threading</tt> to\nconcurrently process multiple images which is highly efficient.</p>\n<div id=\"advanced-api-examples\">\n<h3>Advanced API Examples</h3>\n<div id=\"getcomponentimages-example\">\n<h4>GetComponentImages example:</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tesserocr</span> <span class=\"kn\">import</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">,</span> <span class=\"n\">RIL</span>\n\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'/usr/src/tesseract/testing/phototest.tif'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">api</span><span class=\"p\">:</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">SetImage</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n    <span class=\"n\">boxes</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">GetComponentImages</span><span class=\"p\">(</span><span class=\"n\">RIL</span><span class=\"o\">.</span><span class=\"n\">TEXTLINE</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Found </span><span class=\"si\">{}</span><span class=\"s1\"> textline image components.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">boxes</span><span class=\"p\">)))</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">box</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">boxes</span><span class=\"p\">):</span>\n        <span class=\"c1\"># im is a PIL image object</span>\n        <span class=\"c1\"># box is a dict with x, y, w and h keys</span>\n        <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">SetRectangle</span><span class=\"p\">(</span><span class=\"n\">box</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">],</span> <span class=\"n\">box</span><span class=\"p\">[</span><span class=\"s1\">'y'</span><span class=\"p\">],</span> <span class=\"n\">box</span><span class=\"p\">[</span><span class=\"s1\">'w'</span><span class=\"p\">],</span> <span class=\"n\">box</span><span class=\"p\">[</span><span class=\"s1\">'h'</span><span class=\"p\">])</span>\n        <span class=\"n\">ocrResult</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">GetUTF8Text</span><span class=\"p\">()</span>\n        <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">MeanTextConf</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"Box[</span><span class=\"si\">{0}</span><span class=\"s2\">]: x=</span><span class=\"si\">{x}</span><span class=\"s2\">, y=</span><span class=\"si\">{y}</span><span class=\"s2\">, w=</span><span class=\"si\">{w}</span><span class=\"s2\">, h=</span><span class=\"si\">{h}</span><span class=\"s2\">, \"</span>\n              <span class=\"s2\">\"confidence: </span><span class=\"si\">{1}</span><span class=\"s2\">, text: </span><span class=\"si\">{2}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">,</span> <span class=\"n\">ocrResult</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">box</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"orientation-and-script-detection-osd\">\n<h4>Orientation and script detection (OSD):</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tesserocr</span> <span class=\"kn\">import</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">,</span> <span class=\"n\">PSM</span>\n\n<span class=\"k\">with</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">(</span><span class=\"n\">psm</span><span class=\"o\">=</span><span class=\"n\">PSM</span><span class=\"o\">.</span><span class=\"n\">AUTO_OSD</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">api</span><span class=\"p\">:</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/usr/src/tesseract/testing/eurotext.tif\"</span><span class=\"p\">)</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">SetImage</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">Recognize</span><span class=\"p\">()</span>\n\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">AnalyseLayout</span><span class=\"p\">()</span>\n    <span class=\"n\">orientation</span><span class=\"p\">,</span> <span class=\"n\">direction</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"n\">deskew_angle</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">Orientation</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Orientation: </span><span class=\"si\">{:d}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">orientation</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"WritingDirection: </span><span class=\"si\">{:d}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">direction</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"TextlineOrder: </span><span class=\"si\">{:d}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Deskew angle: </span><span class=\"si\">{:.4f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">deskew_angle</span><span class=\"p\">))</span>\n</pre>\n<p>or more simply with <tt>OSD_ONLY</tt> page segmentation mode:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tesserocr</span> <span class=\"kn\">import</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">,</span> <span class=\"n\">PSM</span>\n\n<span class=\"k\">with</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">(</span><span class=\"n\">psm</span><span class=\"o\">=</span><span class=\"n\">PSM</span><span class=\"o\">.</span><span class=\"n\">OSD_ONLY</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">api</span><span class=\"p\">:</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">SetImageFile</span><span class=\"p\">(</span><span class=\"s2\">\"/usr/src/tesseract/testing/eurotext.tif\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">os</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">DetectOS</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Orientation: </span><span class=\"si\">{orientation}</span><span class=\"se\">\\n</span><span class=\"s2\">Orientation confidence: </span><span class=\"si\">{oconfidence}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n          <span class=\"s2\">\"Script: </span><span class=\"si\">{script}</span><span class=\"se\">\\n</span><span class=\"s2\">Script confidence: </span><span class=\"si\">{sconfidence}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">os</span><span class=\"p\">))</span>\n</pre>\n<p>more human-readable info with tesseract 4+ (demonstrates LSTM engine usage):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tesserocr</span> <span class=\"kn\">import</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">,</span> <span class=\"n\">PSM</span><span class=\"p\">,</span> <span class=\"n\">OEM</span>\n\n<span class=\"k\">with</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">(</span><span class=\"n\">psm</span><span class=\"o\">=</span><span class=\"n\">PSM</span><span class=\"o\">.</span><span class=\"n\">OSD_ONLY</span><span class=\"p\">,</span> <span class=\"n\">oem</span><span class=\"o\">=</span><span class=\"n\">OEM</span><span class=\"o\">.</span><span class=\"n\">LSTM_ONLY</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">api</span><span class=\"p\">:</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">SetImageFile</span><span class=\"p\">(</span><span class=\"s2\">\"/usr/src/tesseract/testing/eurotext.tif\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">os</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">DetectOrientationScript</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Orientation: </span><span class=\"si\">{orient_deg}</span><span class=\"se\">\\n</span><span class=\"s2\">Orientation confidence: </span><span class=\"si\">{orient_conf}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n          <span class=\"s2\">\"Script: </span><span class=\"si\">{script_name}</span><span class=\"se\">\\n</span><span class=\"s2\">Script confidence: </span><span class=\"si\">{script_conf}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">os</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"iterator-over-the-classifier-choices-for-a-single-symbol\">\n<h4>Iterator over the classifier choices for a single symbol:</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tesserocr</span> <span class=\"kn\">import</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">,</span> <span class=\"n\">RIL</span><span class=\"p\">,</span> <span class=\"n\">iterate_level</span>\n\n<span class=\"k\">with</span> <span class=\"n\">PyTessBaseAPI</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">api</span><span class=\"p\">:</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">SetImageFile</span><span class=\"p\">(</span><span class=\"s1\">'/usr/src/tesseract/testing/phototest.tif'</span><span class=\"p\">)</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">SetVariable</span><span class=\"p\">(</span><span class=\"s2\">\"save_blob_choices\"</span><span class=\"p\">,</span> <span class=\"s2\">\"T\"</span><span class=\"p\">)</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">SetRectangle</span><span class=\"p\">(</span><span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">228</span><span class=\"p\">,</span> <span class=\"mi\">548</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)</span>\n    <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">Recognize</span><span class=\"p\">()</span>\n\n    <span class=\"n\">ri</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">GetIterator</span><span class=\"p\">()</span>\n    <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">RIL</span><span class=\"o\">.</span><span class=\"n\">SYMBOL</span>\n    <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">iterate_level</span><span class=\"p\">(</span><span class=\"n\">ri</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"p\">):</span>\n        <span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">GetUTF8Text</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"p\">)</span>  <span class=\"c1\"># r == ri</span>\n        <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">Confidence</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">symbol</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'symbol </span><span class=\"si\">{}</span><span class=\"s1\">, conf: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n        <span class=\"n\">indent</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">ci</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">GetChoiceIterator</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">ci</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">indent</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\t\\t</span><span class=\"s1\"> '</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">- '</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n            <span class=\"n\">choice</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">GetUTF8Text</span><span class=\"p\">()</span>  <span class=\"c1\"># c == ci</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> conf: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">choice</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">Confidence</span><span class=\"p\">()))</span>\n            <span class=\"n\">indent</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---------------------------------------------'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5549862, "releases": {"3.0.0rc1": [{"comment_text": "", "digests": {"md5": "4b57512287241062aaca9712c0b8118d", "sha256": "e27271929cf7e3da4911bc79f49f1a08168bf2022ae505fcd5a29fb28c1c24e6"}, "downloads": -1, "filename": "ocrd-fork-tesserocr-3.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "4b57512287241062aaca9712c0b8118d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54954, "upload_time": "2018-06-22T00:01:36", "upload_time_iso_8601": "2018-06-22T00:01:36.357885Z", "url": "https://files.pythonhosted.org/packages/ea/52/0d8d0d92344ecc15ab0243adccf74c4828c23261d380e3b368d10e9636d2/ocrd-fork-tesserocr-3.0.0rc1.tar.gz", "yanked": false}], "3.0.0rc2": [{"comment_text": "", "digests": {"md5": "8e083be1d73e175695fe4363cee171bc", "sha256": "6eccaf8b8eff897c09f9b4258410ba4c32c04e633d7d2d6f6170646321cc2b7f"}, "downloads": -1, "filename": "ocrd-fork-tesserocr-3.0.0rc2.tar.gz", "has_sig": false, "md5_digest": "8e083be1d73e175695fe4363cee171bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56409, "upload_time": "2019-07-18T08:57:09", "upload_time_iso_8601": "2019-07-18T08:57:09.240597Z", "url": "https://files.pythonhosted.org/packages/5b/dc/155dda28b9d8b61723ea4669ead95b6127e110a52c8125c74042c663c654/ocrd-fork-tesserocr-3.0.0rc2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e083be1d73e175695fe4363cee171bc", "sha256": "6eccaf8b8eff897c09f9b4258410ba4c32c04e633d7d2d6f6170646321cc2b7f"}, "downloads": -1, "filename": "ocrd-fork-tesserocr-3.0.0rc2.tar.gz", "has_sig": false, "md5_digest": "8e083be1d73e175695fe4363cee171bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56409, "upload_time": "2019-07-18T08:57:09", "upload_time_iso_8601": "2019-07-18T08:57:09.240597Z", "url": "https://files.pythonhosted.org/packages/5b/dc/155dda28b9d8b61723ea4669ead95b6127e110a52c8125c74042c663c654/ocrd-fork-tesserocr-3.0.0rc2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:39 2020"}