{"info": {"author": "Jelomite", "author_email": "moshesher1998@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# Horrible Downloader    [![Codacy Badge](https://api.codacy.com/project/badge/Grade/4a13ba5715f94427998e63968ea710d7)](https://app.codacy.com/app/Jelomite/horrible-downloader?utm_source=github.com&utm_medium=referral&utm_content=Jelomite/horrible-downloader&utm_campaign=Badge_Grade_Settings)   [![Build Status](https://travis-ci.org/Jelomite/horrible-downloader.svg?branch=master)](https://travis-ci.org/Jelomite/horrible-downloader) [![PyPI version](https://badge.fury.io/py/horrible-downloader.svg)](https://badge.fury.io/py/horrible-downloader)\n\n![horrible subs banner](https://i.imgur.com/jWulipo.png)\n\n\n\n*Horrible Downloader* is a Python wrapper around the [HorribleSubs](https://horriblesubs.info/) API. It comes with a powerful set of extra features, which allow users to automatically download new episodes and batches of existing shows. The module tracks the downloaded files and allows you to continue from where you left.\n\n## Installation\n\n```sh\n> pip install horrible-downloader\n```\n\n## Dependencies\n**_horrible-downloader_** uses [WebTorrent-CLI](https://github.com/webtorrent/webtorrent-cli) to download its magnets.\nThe dependency is automatically downloaded with the installation script, but for those who want to install it manualy - simply run ```npm install webtorrent-cli -g```.\n\n**NOTE:** _WebTorrent_ is a NodeJS application, which means you must have Node installed.\n\n## Documentation\n\n#### Usage\nexample usage of the API inside of Python:\n```python\nfrom HorribleDownloader import Parser, ConfigManager\n\np = Parser()\nconfig = ConfigManager()\n\ndownload = []\nfor show, last_watched in config.subscriptions:\n    episodes = p.get_episodes(show)\n    new = filter(lambda s: s[\"episode\"] > last_watched, episodes)\n    download.extend(new)\n\n```\n\n### Using the Parser\nfor us to do simple interactions with the API we must first initiate a parser object using the `HorribleDownloader.Parser()`.\n\nThe parser will allow us to fetch data from [horriblesubs](horriblesubs.info). here are the methods and properties:\n\n- **shows** - List all available shows. equivalent to https://horriblesubs.info/shows/.\n- **current_shows** - List all currently airing shows. equivalent to https://horriblesubs.info/current-season/.\n- **get_episodes(show: str, limit=1000)** - Returns a list of episodes from the specified show. By default will return the last 1000 episodes (of course, most shows don't even reach the 100th episode). The function works in reverse, this means the _limit_ argument goes from the latest episode until it reaches its limit (or it has reached the first episode). E.g:\n``` python\n\tparser = Parser()\n\tepisodes = parser.get_episodes(\"one piece\", limit=7)\n\t# lets assume the latest episode is 495\n\tmap(lambda episode: episode[\"episode\"], episodes) # -> [495, 494, 493, 492, 491, 490, 489]\n\n```\n- **get_batches(show: str)** - Returns the batches of the show (if it exists).\n\n#### Episode Object\n\nWhen referring to an episode, the actual representation of it is an object of the following structure:\n```python\n{\n  \"title\": \"the title of the show\",\n  \"episode\": \"episode number\", # represented with a float.\n  \"480\": { # all of the files are in 480p resolution\n    \"Magnet\" \"link to magnet\",\n    \"Torrent\": \"link to the .torrent file\",\n    \"XDCC\": \"XDCC query\", # https://xdcc.horriblesubs.info/\n    \"Uploaded.net\": \"uploaded.net link to .mkv\",\n    \"FileUpload\": \"fileupload link to .mkv\",\n    \"Uplod\": \"uplod link to .mkv\"\n  },\n  \"720\": { # exactly the same as the 480, but with 720p resolution\n    \"Magnet\" \"link to magnet\",\n    \"Torrent\": \"link to the .torrent file\",\n    \"XDCC\": \"XDCC query\",\n    \"Uploaded.net\": \"uploaded.net link to .mkv\",\n    \"FileUpload\": \"fileupload link to .mkv\",\n    \"Uplod\": \"uplod link to .mkv\"\n  },\n  \"1080\": { # 1080p resolution\n    \"Magnet\" \"link to magnet\",\n    \"Torrent\": \"link to the .torrent file\",\n    \"XDCC\": \"XDCC query\",\n    \"Uploaded.net\": \"uploaded.net link to .mkv\",\n    \"FileUpload\": \"fileupload link to .mkv\",\n    \"Uplod\": \"uplod link to .mkv\"\n  }\n}\n```\n\n---\n\n## Horrible-Subs CLI\nA powerful tool for managing and downloading anime in an automatic manner. To run it, simply call `horrible-downloader`.\nThe CLI is simple, yet effective. It allows you to download the current airing anime, based on your specified subscriptions ([see Configuration](#configuration)), and downloading all the episodes of a desired anime.\n\n#### Featurs:\n* use **_horriblesubs_** from the command line.\n* minimal configuration\n* supports download resuming -- continue exactly where you left!\n* allows for smart episode specification parsing.\n\n#### Flags & Options:\nThe CLI supports manual download of different anime with various options.\nFull list of flags and options:\n```\n$ horrible-downloader --help\nusage: horrible-downloader [-h] [-d DOWNLOAD] [-o OUTPUT] [-e EPISODES] [-l]\n                           [-r RESOLUTION] [---subscribe SUBSCRIBE] [--batch]\n                           [-q] [--noconfirm]\n\nhorrible script for downloading anime\n\noptional arguments:\n  -h, --help                                 show this help message and exit\n  -l, --list                                 display list of available shows\n  -q, --quiet                                set quiet mode on\n  -d DOWNLOAD, --download DOWNLOAD           download a specific anime\n  -o OUTPUT, --output OUTPUT                 directory to which it will download the files\n  -e EPISODES, --episodes EPISODES           manually specify episodes to download\n  -r RESOLUTION, --resolution RESOLUTION     specify resolution quality, defaults to config file\n  --subscribe SHOW [-e EPISODE]              add a show to the config file.\n  --batch                                    search for batches as well as regular files\n  --noconfirm                                bypass any and all \u201cAre you sure?\u201d messages.\n```\n##### Episodes & Resolution Formating:\nThose two flags have a special syntax which allows for a better specification interface.\n\n###### When using **_episodes_** flag, you can use the following:\n\n|character|usage|example|\n|---------|-----|-----|\n|,| allows to specify more than one episode or option.|1,6|\n|-| specify a range of episodes, including start and end.| 4-10|\n|>| bigger than, must be last in order.| 7>|\n|<| smaller than, must be first in order.| <10|\n|=|equals, in conjunction with < or >, includes the episode number.| 11>=|\n\n###### The **_resolution_** flag syntax is simple, just set the resoultions with the comma (,) between.\n\n`$  horrible-downloader -r 720,1080`\n\n##### Example usage:\nThe command for downloading episodes 1,2,4,5,6 of \"One-Punch Man\" to the `~/Videos/Anime` folder:\n```bash\n$ horrible-downloader -d \"one punch man\" -e 1,2,4-6 -o ~/Videos/Anime\n```\n#### Configuration\nOnce the script is called, the configuration file will be generated in the user's config directory:\n`~/.config/horrible-downloader/conf.ini`.\nBy default, the config file contains all of the current airing anime commented out. To subscribe to an anime, simply uncomment it and specify which episode you're currently on.\n\n##### example config file:\n```\n[settings]\nresolution = 1080\ndownload_dir = ~/Videos/Anime\n\n[subscriptions]\none punch man = 11\nlupin iii part v = 8\njojo's bizzare adventure - golden wind = 0\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Jelomite/horrible-downloader", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "horrible-downloader", "package_url": "https://pypi.org/project/horrible-downloader/", "platform": "", "project_url": "https://pypi.org/project/horrible-downloader/", "project_urls": {"Homepage": "https://github.com/Jelomite/horrible-downloader"}, "release_url": "https://pypi.org/project/horrible-downloader/1.0.5/", "requires_dist": ["beautifulsoup4 (>=4)", "requests (>=2)", "lxml (>=4)", "sty (>=1.0.0b9)", "fuzzywuzzy (>=0.16)", "python-levenshtein (>=0.12)"], "requires_python": "", "summary": "HorribleSubs API", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Horrible Downloader    <a href=\"https://app.codacy.com/app/Jelomite/horrible-downloader?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Jelomite/horrible-downloader&amp;utm_campaign=Badge_Grade_Settings\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86b643bf1cb6d69f8356c46649d47988ed789fde/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3461313362613537313566393434323739393865363339363865613731306437\"></a>   <a href=\"https://travis-ci.org/Jelomite/horrible-downloader\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/040c86dd7eb7ee61e6e1ecaa29f2263038e87161/68747470733a2f2f7472617669732d63692e6f72672f4a656c6f6d6974652f686f727269626c652d646f776e6c6f616465722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/horrible-downloader\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fd29e50d6d3aa02a02156268db42a6e056c3fd1/68747470733a2f2f62616467652e667572792e696f2f70792f686f727269626c652d646f776e6c6f616465722e737667\"></a></h1>\n<p><img alt=\"horrible subs banner\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52ce5baa3ad4020e8f765a8786e4379ffb31f1ee/68747470733a2f2f692e696d6775722e636f6d2f6a57756c69706f2e706e67\"></p>\n<p><em>Horrible Downloader</em> is a Python wrapper around the <a href=\"https://horriblesubs.info/\" rel=\"nofollow\">HorribleSubs</a> API. It comes with a powerful set of extra features, which allow users to automatically download new episodes and batches of existing shows. The module tracks the downloaded files and allows you to continue from where you left.</p>\n<h2>Installation</h2>\n<pre>&gt; pip install horrible-downloader\n</pre>\n<h2>Dependencies</h2>\n<p><strong><em>horrible-downloader</em></strong> uses <a href=\"https://github.com/webtorrent/webtorrent-cli\" rel=\"nofollow\">WebTorrent-CLI</a> to download its magnets.\nThe dependency is automatically downloaded with the installation script, but for those who want to install it manualy - simply run <code>npm install webtorrent-cli -g</code>.</p>\n<p><strong>NOTE:</strong> <em>WebTorrent</em> is a NodeJS application, which means you must have Node installed.</p>\n<h2>Documentation</h2>\n<h4>Usage</h4>\n<p>example usage of the API inside of Python:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">HorribleDownloader</span> <span class=\"kn\">import</span> <span class=\"n\">Parser</span><span class=\"p\">,</span> <span class=\"n\">ConfigManager</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ConfigManager</span><span class=\"p\">()</span>\n\n<span class=\"n\">download</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">show</span><span class=\"p\">,</span> <span class=\"n\">last_watched</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">subscriptions</span><span class=\"p\">:</span>\n    <span class=\"n\">episodes</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_episodes</span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"p\">)</span>\n    <span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s2\">\"episode\"</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">last_watched</span><span class=\"p\">,</span> <span class=\"n\">episodes</span><span class=\"p\">)</span>\n    <span class=\"n\">download</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">)</span>\n</pre>\n<h3>Using the Parser</h3>\n<p>for us to do simple interactions with the API we must first initiate a parser object using the <code>HorribleDownloader.Parser()</code>.</p>\n<p>The parser will allow us to fetch data from <a href=\"horriblesubs.info\" rel=\"nofollow\">horriblesubs</a>. here are the methods and properties:</p>\n<ul>\n<li><strong>shows</strong> - List all available shows. equivalent to <a href=\"https://horriblesubs.info/shows/\" rel=\"nofollow\">https://horriblesubs.info/shows/</a>.</li>\n<li><strong>current_shows</strong> - List all currently airing shows. equivalent to <a href=\"https://horriblesubs.info/current-season/\" rel=\"nofollow\">https://horriblesubs.info/current-season/</a>.</li>\n<li><strong>get_episodes(show: str, limit=1000)</strong> - Returns a list of episodes from the specified show. By default will return the last 1000 episodes (of course, most shows don't even reach the 100th episode). The function works in reverse, this means the <em>limit</em> argument goes from the latest episode until it reaches its limit (or it has reached the first episode). E.g:</li>\n</ul>\n<pre>\t<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">Parser</span><span class=\"p\">()</span>\n\t<span class=\"n\">episodes</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">get_episodes</span><span class=\"p\">(</span><span class=\"s2\">\"one piece\"</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n\t<span class=\"c1\"># lets assume the latest episode is 495</span>\n\t<span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">episode</span><span class=\"p\">:</span> <span class=\"n\">episode</span><span class=\"p\">[</span><span class=\"s2\">\"episode\"</span><span class=\"p\">],</span> <span class=\"n\">episodes</span><span class=\"p\">)</span> <span class=\"c1\"># -&gt; [495, 494, 493, 492, 491, 490, 489]</span>\n</pre>\n<ul>\n<li><strong>get_batches(show: str)</strong> - Returns the batches of the show (if it exists).</li>\n</ul>\n<h4>Episode Object</h4>\n<p>When referring to an episode, the actual representation of it is an object of the following structure:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"the title of the show\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"episode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"episode number\"</span><span class=\"p\">,</span> <span class=\"c1\"># represented with a float.</span>\n  <span class=\"s2\">\"480\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># all of the files are in 480p resolution</span>\n    <span class=\"s2\">\"Magnet\"</span> <span class=\"s2\">\"link to magnet\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Torrent\"</span><span class=\"p\">:</span> <span class=\"s2\">\"link to the .torrent file\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"XDCC\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XDCC query\"</span><span class=\"p\">,</span> <span class=\"c1\"># https://xdcc.horriblesubs.info/</span>\n    <span class=\"s2\">\"Uploaded.net\"</span><span class=\"p\">:</span> <span class=\"s2\">\"uploaded.net link to .mkv\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"FileUpload\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fileupload link to .mkv\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Uplod\"</span><span class=\"p\">:</span> <span class=\"s2\">\"uplod link to .mkv\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"720\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># exactly the same as the 480, but with 720p resolution</span>\n    <span class=\"s2\">\"Magnet\"</span> <span class=\"s2\">\"link to magnet\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Torrent\"</span><span class=\"p\">:</span> <span class=\"s2\">\"link to the .torrent file\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"XDCC\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XDCC query\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Uploaded.net\"</span><span class=\"p\">:</span> <span class=\"s2\">\"uploaded.net link to .mkv\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"FileUpload\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fileupload link to .mkv\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Uplod\"</span><span class=\"p\">:</span> <span class=\"s2\">\"uplod link to .mkv\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"1080\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># 1080p resolution</span>\n    <span class=\"s2\">\"Magnet\"</span> <span class=\"s2\">\"link to magnet\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Torrent\"</span><span class=\"p\">:</span> <span class=\"s2\">\"link to the .torrent file\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"XDCC\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XDCC query\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Uploaded.net\"</span><span class=\"p\">:</span> <span class=\"s2\">\"uploaded.net link to .mkv\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"FileUpload\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fileupload link to .mkv\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Uplod\"</span><span class=\"p\">:</span> <span class=\"s2\">\"uplod link to .mkv\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<hr>\n<h2>Horrible-Subs CLI</h2>\n<p>A powerful tool for managing and downloading anime in an automatic manner. To run it, simply call <code>horrible-downloader</code>.\nThe CLI is simple, yet effective. It allows you to download the current airing anime, based on your specified subscriptions (<a href=\"#configuration\" rel=\"nofollow\">see Configuration</a>), and downloading all the episodes of a desired anime.</p>\n<h4>Featurs:</h4>\n<ul>\n<li>use <strong><em>horriblesubs</em></strong> from the command line.</li>\n<li>minimal configuration</li>\n<li>supports download resuming -- continue exactly where you left!</li>\n<li>allows for smart episode specification parsing.</li>\n</ul>\n<h4>Flags &amp; Options:</h4>\n<p>The CLI supports manual download of different anime with various options.\nFull list of flags and options:</p>\n<pre><code>$ horrible-downloader --help\nusage: horrible-downloader [-h] [-d DOWNLOAD] [-o OUTPUT] [-e EPISODES] [-l]\n                           [-r RESOLUTION] [---subscribe SUBSCRIBE] [--batch]\n                           [-q] [--noconfirm]\n\nhorrible script for downloading anime\n\noptional arguments:\n  -h, --help                                 show this help message and exit\n  -l, --list                                 display list of available shows\n  -q, --quiet                                set quiet mode on\n  -d DOWNLOAD, --download DOWNLOAD           download a specific anime\n  -o OUTPUT, --output OUTPUT                 directory to which it will download the files\n  -e EPISODES, --episodes EPISODES           manually specify episodes to download\n  -r RESOLUTION, --resolution RESOLUTION     specify resolution quality, defaults to config file\n  --subscribe SHOW [-e EPISODE]              add a show to the config file.\n  --batch                                    search for batches as well as regular files\n  --noconfirm                                bypass any and all \u201cAre you sure?\u201d messages.\n</code></pre>\n<h5>Episodes &amp; Resolution Formating:</h5>\n<p>Those two flags have a special syntax which allows for a better specification interface.</p>\n<h6>When using <strong><em>episodes</em></strong> flag, you can use the following:</h6>\n<table>\n<thead>\n<tr>\n<th>character</th>\n<th>usage</th>\n<th>example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>,</td>\n<td>allows to specify more than one episode or option.</td>\n<td>1,6</td>\n</tr>\n<tr>\n<td>-</td>\n<td>specify a range of episodes, including start and end.</td>\n<td>4-10</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>bigger than, must be last in order.</td>\n<td>7&gt;</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>smaller than, must be first in order.</td>\n<td>&lt;10</td>\n</tr>\n<tr>\n<td>=</td>\n<td>equals, in conjunction with &lt; or &gt;, includes the episode number.</td>\n<td>11&gt;=</td>\n</tr></tbody></table>\n<h6>The <strong><em>resolution</em></strong> flag syntax is simple, just set the resoultions with the comma (,) between.</h6>\n<p><code>$ horrible-downloader -r 720,1080</code></p>\n<h5>Example usage:</h5>\n<p>The command for downloading episodes 1,2,4,5,6 of \"One-Punch Man\" to the <code>~/Videos/Anime</code> folder:</p>\n<pre>$ horrible-downloader -d <span class=\"s2\">\"one punch man\"</span> -e <span class=\"m\">1</span>,2,4-6 -o ~/Videos/Anime\n</pre>\n<h4>Configuration</h4>\n<p>Once the script is called, the configuration file will be generated in the user's config directory:\n<code>~/.config/horrible-downloader/conf.ini</code>.\nBy default, the config file contains all of the current airing anime commented out. To subscribe to an anime, simply uncomment it and specify which episode you're currently on.</p>\n<h5>example config file:</h5>\n<pre><code>[settings]\nresolution = 1080\ndownload_dir = ~/Videos/Anime\n\n[subscriptions]\none punch man = 11\nlupin iii part v = 8\njojo's bizzare adventure - golden wind = 0\n</code></pre>\n\n          </div>"}, "last_serial": 7094086, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "d92c9bf001561ddf3ee14d6412db3a69", "sha256": "1694563c0948b3202680f8e3305d34684be26e33dd26f6aa6990fe2111271dee"}, "downloads": -1, "filename": "horrible-downloader-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d92c9bf001561ddf3ee14d6412db3a69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10784, "upload_time": "2019-08-24T05:49:08", "upload_time_iso_8601": "2019-08-24T05:49:08.659407Z", "url": "https://files.pythonhosted.org/packages/ae/e3/e4c6f0834540f41d9e88bd6d9dbf126fea537521fd39da17b98bfb47c41f/horrible-downloader-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "682d2273aafc36aafa451f591c22ad9e", "sha256": "f1267ced7623ad6908d8735370f44d47bb4303a07c3dc984d6ebb715c149e6cd"}, "downloads": -1, "filename": "horrible-downloader-1.0.2.tar.gz", "has_sig": false, "md5_digest": "682d2273aafc36aafa451f591c22ad9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10780, "upload_time": "2019-08-24T06:02:32", "upload_time_iso_8601": "2019-08-24T06:02:32.700136Z", "url": "https://files.pythonhosted.org/packages/0e/ef/01f79367779e354848ca5ee5ba2724dc90461114f4475b1f126ae990f20a/horrible-downloader-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "1d75c43e5d5e745709f5bd45aaac2f94", "sha256": "e2128b712e83590e4fac456a534d1c1e2794aed6eb8e2417f82009bab088ab6a"}, "downloads": -1, "filename": "horrible-downloader-1.0.3.tar.gz", "has_sig": false, "md5_digest": "1d75c43e5d5e745709f5bd45aaac2f94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10866, "upload_time": "2019-08-24T20:08:09", "upload_time_iso_8601": "2019-08-24T20:08:09.166665Z", "url": "https://files.pythonhosted.org/packages/45/73/4c9ce98190625dae67bcb5d53592bc27a8049bbbaee1c7bd1cf8d9760f92/horrible-downloader-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "8d6532dd73506ef070da541bec0cfce5", "sha256": "36f4589155fdb0d0cf61deef98e47138cb6fe8a7618670fdb1b7adb441b3ae21"}, "downloads": -1, "filename": "horrible-downloader-1.0.4.tar.gz", "has_sig": false, "md5_digest": "8d6532dd73506ef070da541bec0cfce5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11330, "upload_time": "2019-11-23T15:06:23", "upload_time_iso_8601": "2019-11-23T15:06:23.966136Z", "url": "https://files.pythonhosted.org/packages/39/f7/9eb464840d8813d8ef4cd1a0d039f7b883878937d50ab3b0cda72fcf2450/horrible-downloader-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "20094310c1209d764391ffab085fda25", "sha256": "b5fd9200b9bd444fd19d97922cdd246e991e2c7b914646be4efc4124f005359c"}, "downloads": -1, "filename": "horrible_downloader-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "20094310c1209d764391ffab085fda25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13106, "upload_time": "2020-03-22T09:37:26", "upload_time_iso_8601": "2020-03-22T09:37:26.606254Z", "url": "https://files.pythonhosted.org/packages/12/d2/14e92262a41a9f2dc344128c497cf88a46af700a0f2d88e715c3fbc18469/horrible_downloader-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6800fc132b623282def4eb15e8022fd", "sha256": "d4a8daf1a890224ea5ef3a5ab7509ce53b634058ee64df84fcfb53cb63218e7d"}, "downloads": -1, "filename": "horrible-downloader-1.0.5.tar.gz", "has_sig": false, "md5_digest": "d6800fc132b623282def4eb15e8022fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11201, "upload_time": "2020-03-22T09:37:29", "upload_time_iso_8601": "2020-03-22T09:37:29.630059Z", "url": "https://files.pythonhosted.org/packages/7e/27/496a8c43d1af30fb6545fce1ca81cd00294adadf0a437e2cd97276653f97/horrible-downloader-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "98bcefa340bcbed6a1ffd45ca6f8c405", "sha256": "553b0d326c1e95493a3281ca5c8391a83fdb87fb36d11de4305d84b156b5a084"}, "downloads": -1, "filename": "horrible_downloader-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "98bcefa340bcbed6a1ffd45ca6f8c405", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13091, "upload_time": "2020-03-23T12:58:38", "upload_time_iso_8601": "2020-03-23T12:58:38.190342Z", "url": "https://files.pythonhosted.org/packages/eb/36/34a0b5a5f1b1232e2592761b404249809a8a6924889899996ab7dc5dde33/horrible_downloader-1.0.6-py3-none-any.whl", "yanked": true}, {"comment_text": "", "digests": {"md5": "c3687791399ddb0ac5577813c66722e3", "sha256": "65dc25234d5d0af8614a58781fb3c60efea4495d0fe1e8b62f1adc9cd04c3440"}, "downloads": -1, "filename": "horrible-downloader-1.0.6.tar.gz", "has_sig": false, "md5_digest": "c3687791399ddb0ac5577813c66722e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11174, "upload_time": "2020-03-23T12:58:42", "upload_time_iso_8601": "2020-03-23T12:58:42.016768Z", "url": "https://files.pythonhosted.org/packages/a0/fe/e593075420fe11348c2698d1e963da9ee65d54a611cee5a95cfd931c3c81/horrible-downloader-1.0.6.tar.gz", "yanked": true}]}, "urls": [{"comment_text": "", "digests": {"md5": "20094310c1209d764391ffab085fda25", "sha256": "b5fd9200b9bd444fd19d97922cdd246e991e2c7b914646be4efc4124f005359c"}, "downloads": -1, "filename": "horrible_downloader-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "20094310c1209d764391ffab085fda25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13106, "upload_time": "2020-03-22T09:37:26", "upload_time_iso_8601": "2020-03-22T09:37:26.606254Z", "url": "https://files.pythonhosted.org/packages/12/d2/14e92262a41a9f2dc344128c497cf88a46af700a0f2d88e715c3fbc18469/horrible_downloader-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6800fc132b623282def4eb15e8022fd", "sha256": "d4a8daf1a890224ea5ef3a5ab7509ce53b634058ee64df84fcfb53cb63218e7d"}, "downloads": -1, "filename": "horrible-downloader-1.0.5.tar.gz", "has_sig": false, "md5_digest": "d6800fc132b623282def4eb15e8022fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11201, "upload_time": "2020-03-22T09:37:29", "upload_time_iso_8601": "2020-03-22T09:37:29.630059Z", "url": "https://files.pythonhosted.org/packages/7e/27/496a8c43d1af30fb6545fce1ca81cd00294adadf0a437e2cd97276653f97/horrible-downloader-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:35 2020"}