{"info": {"author": "Yomi D", "author_email": "yomid4all@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6"], "description": "What is Rapic ?\n===============\nRapic is a simple and fast lightweight tool for automatically generating api client libraries and sdk for websites and online services. It also support \nautomatic generation of client libraries for 3rd party public and private api's which is very good for reverse engineers.\n\nInstallation\n==============\npip install rapic\n\nRunning\n========\n\n  There are 2 ways to use rapic\n - Using rapic-client-generator to automatically generate client file from a reverse engineering tool.\n - Manually creating rapic api client file.\n\n\nUsing Rapic Client Generator\n======================\nAs a reverse engineer saving time is essential which means reducing time spent on writing \napi client for reversed private 3rd party api, website or other internet services. Rapic makes generating\n client libraries easy with just these few steps :\n \n** NOTE** \nRapic automatic client generator only support BURPSUITE reverse engineering tool currently\n \n - STEP 1 : While using BurpSuite Right click on a website under site map tab under target\n - STEP 2 : Save requests as xml file and untick base64 encode requests and response\n - STEP 3 : Run 'rapic-client-generator burp <website_site_or_api_name> saved_file.xml'\n - STEP 4 : Open generated json file and name your request then Use the client like\n \n          from rapic.client import APIClient\n          api = ApiClient(client_name='website_or_service_name', request_file=generated_file_from_rapic.json)\n          val = api.get_currency() # A request is named get_currency by changing request_<num> to get_currency for a chosen request in json file\n    \n Using Rapic Client JSON files\n======================    \n  Programmers can also save time when creating client libraries/sdk for their website and service using rapic. Simply by\n  creating a json file with structure\n    \n    ***json_file.json  \n    \n                {\n                 \"host\": \"httpbin.org\",\n                  \"scheme\": \"http\",\n                      \"get_my_ip\": {\n                            \"path\": \"/ip\",\n                            \"method\": \"GET\"\n                        },\n                 }\n                    \n                    \n     *** client.py\n     \n          from rapic.client import APIClient\n          api = ApiClient(client_name='website_or_service_name', request_file=json_file.json)\n          val = api.get_my_ip() \n  \n  NOTE : check test folder for more json file structure and supported keys\n  \n  Request can also be hooked before its sent to server to do extra processing like http signature signing, timestamp generation etc.\n  \n  \n   \n        ***json_file.json \n        \n                {\n                 \"host\": \"httpbin.org\",\n                  \"scheme\": \"http\",\n                      \"get_user_followers\": {\n                            \"path\": \"/get_user_followers/{path_id}\",\n                            \"method\": \"POST\"\n                        },\n                 }\n         ***client.py\n         \n            import hashlib\n            from rapic.client import APIClient\n            from rapic.hook import APIClientHook\n            \n            class MyApiClient(APIClient):\n\n                @APIClientHook.hook_client_request_data(client='httpbin',\n                                                        requests=['get_user_followers'])\n                def set_http_signature_on_header(data, **kwargs):\n                    sign_request = data['url'] + data['method'] + urlencode(data['body_data'])\n                    m = hashlib.sha256()\n                    m.update(bytes(sign_request, encoding='utf8'))\n                    signature = m.hexdigest()\n                    data['headers']['signature'] = signature\n                    self.http_signature = signature\n                    return data\n            api = MyApiClient(client_name='website_or_service_name', request_file=json_file.json)\n            val = api.get_user_followers(data={user_id : 67888}, url_data={path_id : 'unique_id_get_set_as_path_id'})\n     \n     \n     \n**  List of hooks supported **\n  \n- APIClientHook.hook_client_prepared_request()\n- APIClientHook.hook_client_response()\n- APIClientHook.hook_client_request_data()\n- APIClientHook.hook_client_body_data()\n- APIClientHook.hook_client_url()\n- APIClientHook.hook_client_header()\n                 \n                    \n  \n    \n**LICENSE**\n=========\nMIT", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ydaniels/rapic", "keywords": "rapic web network internet reverse engineering sdk library api client apiclient", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rapic", "package_url": "https://pypi.org/project/rapic/", "platform": "", "project_url": "https://pypi.org/project/rapic/", "project_urls": {"Homepage": "https://github.com/ydaniels/rapic"}, "release_url": "https://pypi.org/project/rapic/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Automatically generate api client libraries/sdk for websites, online services and 3rd party private api.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>What is Rapic ?</h1>\n<p>Rapic is a simple and fast lightweight tool for automatically generating api client libraries and sdk for websites and online services. It also support\nautomatic generation of client libraries for 3rd party public and private api's which is very good for reverse engineers.</p>\n<h1>Installation</h1>\n<p>pip install rapic</p>\n<h1>Running</h1>\n<p>There are 2 ways to use rapic</p>\n<ul>\n<li>Using rapic-client-generator to automatically generate client file from a reverse engineering tool.</li>\n<li>Manually creating rapic api client file.</li>\n</ul>\n<h1>Using Rapic Client Generator</h1>\n<p>As a reverse engineer saving time is essential which means reducing time spent on writing\napi client for reversed private 3rd party api, website or other internet services. Rapic makes generating\nclient libraries easy with just these few steps :</p>\n<p>** NOTE**\nRapic automatic client generator only support BURPSUITE reverse engineering tool currently</p>\n<ul>\n<li>\n<p>STEP 1 : While using BurpSuite Right click on a website under site map tab under target</p>\n</li>\n<li>\n<p>STEP 2 : Save requests as xml file and untick base64 encode requests and response</p>\n</li>\n<li>\n<p>STEP 3 : Run 'rapic-client-generator burp &lt;website_site_or_api_name&gt; saved_file.xml'</p>\n</li>\n<li>\n<p>STEP 4 : Open generated json file and name your request then Use the client like</p>\n<pre><code>   from rapic.client import APIClient\n   api = ApiClient(client_name='website_or_service_name', request_file=generated_file_from_rapic.json)\n   val = api.get_currency() # A request is named get_currency by changing request_&lt;num&gt; to get_currency for a chosen request in json file\n</code></pre>\n</li>\n</ul>\n<h1>Using Rapic Client JSON files</h1>\n<p>Programmers can also save time when creating client libraries/sdk for their website and service using rapic. Simply by\ncreating a json file with structure</p>\n<pre><code>***json_file.json  \n\n            {\n             \"host\": \"httpbin.org\",\n              \"scheme\": \"http\",\n                  \"get_my_ip\": {\n                        \"path\": \"/ip\",\n                        \"method\": \"GET\"\n                    },\n             }\n                \n                \n *** client.py\n \n      from rapic.client import APIClient\n      api = ApiClient(client_name='website_or_service_name', request_file=json_file.json)\n      val = api.get_my_ip() \n</code></pre>\n<p>NOTE : check test folder for more json file structure and supported keys</p>\n<p>Request can also be hooked before its sent to server to do extra processing like http signature signing, timestamp generation etc.</p>\n<pre><code>    ***json_file.json \n    \n            {\n             \"host\": \"httpbin.org\",\n              \"scheme\": \"http\",\n                  \"get_user_followers\": {\n                        \"path\": \"/get_user_followers/{path_id}\",\n                        \"method\": \"POST\"\n                    },\n             }\n     ***client.py\n     \n        import hashlib\n        from rapic.client import APIClient\n        from rapic.hook import APIClientHook\n        \n        class MyApiClient(APIClient):\n\n            @APIClientHook.hook_client_request_data(client='httpbin',\n                                                    requests=['get_user_followers'])\n            def set_http_signature_on_header(data, **kwargs):\n                sign_request = data['url'] + data['method'] + urlencode(data['body_data'])\n                m = hashlib.sha256()\n                m.update(bytes(sign_request, encoding='utf8'))\n                signature = m.hexdigest()\n                data['headers']['signature'] = signature\n                self.http_signature = signature\n                return data\n        api = MyApiClient(client_name='website_or_service_name', request_file=json_file.json)\n        val = api.get_user_followers(data={user_id : 67888}, url_data={path_id : 'unique_id_get_set_as_path_id'})\n</code></pre>\n<p>**  List of hooks supported **</p>\n<ul>\n<li>APIClientHook.hook_client_prepared_request()</li>\n<li>APIClientHook.hook_client_response()</li>\n<li>APIClientHook.hook_client_request_data()</li>\n<li>APIClientHook.hook_client_body_data()</li>\n<li>APIClientHook.hook_client_url()</li>\n<li>APIClientHook.hook_client_header()</li>\n</ul>\n<h1><strong>LICENSE</strong></h1>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 6323351, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3952902728e989b14574c04bfde43f3b", "sha256": "e58ba819c9d5bc46f926f4fe6bd1d62a494b643d73698b6f0f3a591609ce04f1"}, "downloads": -1, "filename": "rapic-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3952902728e989b14574c04bfde43f3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16685, "upload_time": "2019-11-24T02:30:37", "upload_time_iso_8601": "2019-11-24T02:30:37.324597Z", "url": "https://files.pythonhosted.org/packages/ae/88/8b5e82c67ae0e3e2019c9156867e3afa197e9a6867ad3590d8fa243f4341/rapic-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "147e4767e38255f6508172fb56c21b3b", "sha256": "21df40cb06de1b37b37e2d646cb13861afe7b48e5fc49af2c8008241a25b36d8"}, "downloads": -1, "filename": "rapic-0.1.1.tar.gz", "has_sig": false, "md5_digest": "147e4767e38255f6508172fb56c21b3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17049, "upload_time": "2019-12-03T19:25:12", "upload_time_iso_8601": "2019-12-03T19:25:12.963676Z", "url": "https://files.pythonhosted.org/packages/46/e5/570178134e5e5128103cdf7c6218136cc468094f68ffc2738156ab424d69/rapic-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f3018890f0f7d868d827870a9cda348c", "sha256": "2f2a3808cd85888955425f72f8f871abd883525d423df3a80a0effcfb535eebf"}, "downloads": -1, "filename": "rapic-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f3018890f0f7d868d827870a9cda348c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17294, "upload_time": "2019-12-04T10:15:44", "upload_time_iso_8601": "2019-12-04T10:15:44.563951Z", "url": "https://files.pythonhosted.org/packages/33/81/448d8a6b3a4f89d79a56c8903c7cfbd19434894939db28218826ee552fad/rapic-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "500167b37e5c66e59dfd7d9d68a1a4ed", "sha256": "29a8d5143e0e703e51735cfd20cf1c3955bcaa20a31e3e4cc78011e518002d84"}, "downloads": -1, "filename": "rapic-0.1.3.tar.gz", "has_sig": false, "md5_digest": "500167b37e5c66e59dfd7d9d68a1a4ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17448, "upload_time": "2019-12-04T14:06:53", "upload_time_iso_8601": "2019-12-04T14:06:53.958429Z", "url": "https://files.pythonhosted.org/packages/96/c4/94d84018840747ecfe820536fa1f1d7040ee1b45341560884833f802c02b/rapic-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "75c66f4168fcafa7d6bc993d4e73dd69", "sha256": "25b5bd85c771301c0639758080c81e62d4e111a13e8dfdc987637197eeff9a82"}, "downloads": -1, "filename": "rapic-0.1.4.tar.gz", "has_sig": false, "md5_digest": "75c66f4168fcafa7d6bc993d4e73dd69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17916, "upload_time": "2019-12-18T05:06:02", "upload_time_iso_8601": "2019-12-18T05:06:02.575284Z", "url": "https://files.pythonhosted.org/packages/cd/f2/544d414fa9a8febc572c1a045a63c2a55a47ac9298ff6322ebad546ed0f2/rapic-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "75c66f4168fcafa7d6bc993d4e73dd69", "sha256": "25b5bd85c771301c0639758080c81e62d4e111a13e8dfdc987637197eeff9a82"}, "downloads": -1, "filename": "rapic-0.1.4.tar.gz", "has_sig": false, "md5_digest": "75c66f4168fcafa7d6bc993d4e73dd69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17916, "upload_time": "2019-12-18T05:06:02", "upload_time_iso_8601": "2019-12-18T05:06:02.575284Z", "url": "https://files.pythonhosted.org/packages/cd/f2/544d414fa9a8febc572c1a045a63c2a55a47ac9298ff6322ebad546ed0f2/rapic-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:31 2020"}