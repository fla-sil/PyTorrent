{"info": {"author": "Michael Loyd", "author_email": "michael@loyd.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\n# carson\n\n[![Latest Version][pypi-image]][pypi-url]\n\n* [Overview](#overview)\n* [States And Commands](#states-and-commands)\n* [Configuration](#configuration)\n* [Streaming](#streaming)\n* [Pythonic Features](#features)\n\n## Overview\n\n`carson` is a simple Python interface for Tesla's unofficial JSON API and includes some utilities to work with data it\ngenerates.  Lots of work to discover and document the API was done by Tim Dorr and dozens of contributors to his\n[tesla-api](https://github.com/timdorr/tesla-api) project.  So, thanks to them for the head start.\n\nAmong the goals for this project is to have an [`asyncio`](https://docs.python.org/3/library/asyncio.html) based\nlibrary.  As a result, Python 2 is not supported.  In fact, it seems like it has been a decade since the *provisional*\ntag was removed from the `asyncio` library because it has evolved so much.  There are many guides, articles, and posts\nbased on early features of `asyncio`.  The best way to stay up to date is by starting with Python's documentation at\n[https://docs.python.org/library/asyncio.html](https://docs.python.org/library/asyncio.html).  This project uses the\n`async`/`await` syntax introduced in [PEP-492](https://www.python.org/dev/peps/pep-0492/).  As of this writing, the\nlatest version of Python is 3.8.1.\n\n### Dependencies\n\nThere is one dependency for basic usage &mdash; [`aiohttp`](https://docs.aiohttp.org/).\n\n## States And Commands\n\nWith its most basic usage, you can use `carson` to get the current state of car with the following code:\n\n```python\n>>>import asyncio\n>>>from carson import Session\n>>>async def main():\n...    name = 'Dark Nebula'\n...    async with Session(email='nikola@tesla.com', password='electricity') as session:\n...        car = await session.vehicles(name)\n...        print(f'{name} is {car.state!r}')\n\n>>>asyncio.run(main())\nDark Nebula is 'asleep'\n```\n\nOr you can run it from the command line in a similar fashion:\n```console\n> python -m carson -v --email nikola@tesla.com --password electricity --display-name \"Dark Nebula\"\n```\n\nTo get a sense of what is happening, you can add verbose and see the requests being made.\n```console\n> python -m carson -v --email nikola@tesla.com --password electricity --display-name \"Dark Nebula\"\n2020-01-01 10:45:59,418 D carson  Performing OAuth password grant for email='nikola@tesla.com'\n2020-01-01 10:46:00,229 D carson  Req# 1:  Method=POST url='https://owner-api.teslamotors.com/oauth/token?grant_type=password' status=200 duration=0:00:00.810031\n2020-01-01 10:46:00,943 D carson  Req# 2:  Method=GET url='https://owner-api.teslamotors.com/api/1/vehicles' status=200 duration=0:00:00.712868\n2020-01-01 10:46:00,944 I carson  Vehicle('Dark Nebula' state='asleep')\n```\n\nYou can see that two requests are made:\n\n  1.  First is to generate an `oauth` token which is required for all subsequent requests.\n  2.  Get a list of vehicles associated with the credentials provided.\n\n### OAuth\n\nIf you already have (or know how to generate) an `auth_token` or simply do not want to provide your Tesla account's\nemail and password, you can instead provide your token.  Simply replace the arguments `email` and `password` passed to\nthe `Session` constructor with the argument `access_token` (or `--auth-token` if using the command line).  Your auth\ntoken should resemble a long list of characters similar to the following:\n\n`0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b`\n\nExample:\n```console\n> python -m carson --auth-token 0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b\n```\n\nExample:\n```python\n...\nasync with Session(auth_token='0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b') as session:\n...\n```\n\n## Configuration\n\nCredentials can also be stored in configuration.  `carson` looks for credentials in the following order:\n\n1.  The arguments `email` and `password` passed to the `Session` constructor.\n2.  The argument `access_token` passed to the `Session` constructor.\n3.  The environment variables `CARSON_EMAIL`, `CARSON_PASSWORD`, `CARSON_ACCESS_TOKEN`.\n4.  An `.ini` style config file named `.carson` or `carson.ini` in the user's home directory.\n\n> **Regarding credentials:** Always use care when storing credentials.  Sometimes\n> [bad things](https://www.diogomonica.com/2017/03/27/why-you-shouldnt-use-env-variables-for-secret-data/)\n> can happen and often time will.\n\n### Credential Precedence\n\nCredentials (`password` and `auth_token`) are used in the following order of precedence.  When reading _'if'_ and\n_'if not'_, think Python boolean operations (e.g. `''`, `None`, `0` are all `False`).\n\n1.  If `password` is given to the `Session` constructor, it will always be used to generate a new oauth token.  Even if\n    a valid `auth_token` is given to the `Session` constructor at the same time.  This means a value for `email` must\n    also be given (or implied from config).\n2.  If `password` is not given to the `Session` constructor, the value used for `access_token` is used.  Or, if not\n    given, implied from config.\n3.  If neither `password` nor `access_token` are given to the `Session` constructor, but both `password` and\n    `access_token` are defined in config, the `access_token` from config will be used.\n\n## Streaming\n\nTesla provides a `websocket` endpoint from which telemetry data can be streamed and stored.  To begin streaming this\ntelemetry, issue the following command.\n\n```console\n> python -m carson -v --display-name YOUR_CAR_NAME --stream\n```\n\n`carson` will attempt to _wake-up_ the car and initiate the streaming telemetry.  By default, the telemetry simply\noutputs the data to log.  A sample of that output is below.\n\n```console\n2020-01-01 14:09:30,129 D carson  Req# 1:  Method=GET url='https://owner-api.teslamotors.com/api/1/vehicles' status=200 duration=0:00:00.435516\n2020-01-01 14:09:30,752 D carson  Req# 2:  Method=POST url='https://owner-api.teslamotors.com/api/1/vehicles/01234567890123456/wake_up' status=200 duration=0:00:00.614805\n2020-01-01 14:09:30,752 D carson  Waiting for car to wake up.\n2020-01-01 14:09:37,920 D carson  Req# 9:  Method=GET url='https://owner-api.teslamotors.com/api/1/vehicles/01234567890123456/vehicle_data' status=200 duration=0:00:00.301021\n2020-01-01 14:09:37,920 I carson  Streaming iteration=1\n2020-01-01 14:09:37,961 I carson  car=Vehicle('Dark Nebula' state='online' miles=18,421 software='2019.40.50.5' battery_level=81) iteration=1  client_errors=0 vehicle_disconnects=0\n2020-01-01 14:09:38,412 D carson  {\"msg_type\":\"data:subscribe\",\"token\":\"bWlj********NmY1\",\"value\":\"speed,odometer,soc,elevation,est_heading,est_lat,est_lng,power,shift_state,range,est_range,heading\",\"tag\":\"0123456789\"}\n2020-01-01 14:09:38,412 D carson  msg_count=1 msg={'msg_type': 'control:hello', 'connection_timeout': 0}\n2020-01-01 14:09:39,474 D carson  msg_count=2 msg={'msg_type': 'data:update', 'tag': '0123456789', 'value': '1577909378751,,18421.1,81,232,182,40.778955,-73.968583,0,,242,223,8'}\n2020-01-01 14:09:49,479 D carson  Timeout waiting for next message.\n2020-01-01 14:09:49,495 D carson  msg_count=3 msg={'msg_type': 'data:error', 'tag': '0123456789', 'value': 'disconnected', 'error_type': 'vehicle_disconnected'}\n2020-01-01 14:09:49,566 I carson  Streamer task ending due to shift state=''.\n```\n\n## Pythonic Features\n\nPython is a fantastic language.  One of my favorite features is its ability to customize attribute access.  That ability\nallows a _Vehcile_ class instance to basically act like a chameleon.  As Tesla changes its data structure and command\ninterface for its cars, it's pretty easy for a Python class to essentially keep itself up to date.\n\nThis section would normally be placed after the [States And Commands](#states-and-commands) section.  But I wanted to\nput this above the fold to call out the Pythonic features of `carson` - both in programmability and general use on the\ncommand line.\n\n### Recursive Dot-Notation\n\nConsider this JSON response from Tesla when getting making a call to `vehicle_data`:\n```json\n{\n  \"response\": {\n    \"id\": 98765432109876543,\n    \"vehicle_id\": 1234567890,\n    \"display_name\": \"Dark Nebula\",\n    \"state\": \"online\",\n    ...\n    \"vehicle_state\": {\n      \"api_version\": 7,\n      ...\n      \"sentry_mode\": false,\n      \"sentry_mode_available\": true,\n      \"smart_summon_available\": true,\n      \"software_update\": {\n        \"download_perc\": 0.85279,\n        \"expected_duration_sec\": 2700,\n        \"install_perc\": 0,\n        ...\n```\n\nWith `carson`, after you make the call to get the vehicle data, you can access the JSON response that is returned, or\nsimply reference its associated JSON path on the instance of the `Vehicle` using standard Python dot-notation like this:\n\n```python\ncar = await my_session.vehicles('Dark Nebula')\njson_response = await car.vehicle_data()\n\n# I have options here.  I can access the JSON data as a normal Python `dict`\nperc = json_response['vehicle_state']['software_update']['download_perc']\n\n# Or as a Python attribute\nperc = car.vehicle_state.software_update.download_perc\n\nif 0 < perc < 1:\n    print(f'Downloading: {perc:.2%} complete.')\nelse:\n    print('Download complete' if perc == 1 else 'N/A')\n```\n\n### Endpoint Commands As `await`able Attributes\n\nSimilarly, commands can that are mapped to an endpoint accessed via Python's class instance attribute mechanism will\nreturn an `await`able coroutine.  For example, the `Vehicle` class in `carson` does not have an attribute named\n`start_charge`.  The endpoints mapping, however, does map `START_CHARGE` to a POST request to the URI\n`api/1/vehicles/{vehicle_id}/command/charge_start`.  This makes it possible to start charging your Tesla with either\nthis code:\n\n```python\ncar = await my_session.vehicles('Dark Nebula')\nawait car.start_charge()\n```\n\nor this command\n\n```console\n> python -m carson -v --command start_charge\n2020-01-01 11:51:44,349 D carson  Req# 1:  Method=GET url='https://owner-api.teslamotors.com/api/1/vehicles' status=200 duration=0:00:02.460019\n2020-01-01 11:51:44,350 I carson  Vehicle('Dark Nebula' state='online')\n2020-01-01 11:51:44,350 I carson  Performing 'start_charge'...\n2020-01-01 11:51:44,753 D carson  Req# 2:  Method=POST url='https://owner-api.teslamotors.com/api/1/vehicles/01234567890123456/command/charge_start' status=200 duration=0:00:00.403062\n2020-01-01 11:51:44,754 I carson  Result=\n{'carsonRequest': {'method': 'POST',\n                   'url': 'https://owner-api.teslamotors.com/api/1/vehicles/01234567890123456/command/charge_start'},\n 'carsonTimestamp': '2020-01-01T17:51:44.350726',\n 'error': None,\n 'error_description': '',\n 'response': {'reason': 'complete', 'result': True},\n 'status': 200}\n```\n\n[pypi-image]: https://img.shields.io/pypi/v/carson.svg\n[pypi-url]: https://pypi.org/project/carson/\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mloyd/carson", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "carson", "package_url": "https://pypi.org/project/carson/", "platform": "", "project_url": "https://pypi.org/project/carson/", "project_urls": {"Homepage": "https://github.com/mloyd/carson"}, "release_url": "https://pypi.org/project/carson/1.0.1/", "requires_dist": ["aiohttp >= 3.6.2", "moviepy >= 1.0.1 ; extra == \"test\""], "requires_python": ">= 3.8", "summary": "An asyncio package to interact with the Tesla JSON web service.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>carson</h1>\n<p><a href=\"https://pypi.org/project/carson/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/485aa7f44eee3b7d544d9df0e892f9af45c9b7af/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636172736f6e2e737667\"></a></p>\n<ul>\n<li><a href=\"#overview\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#states-and-commands\" rel=\"nofollow\">States And Commands</a></li>\n<li><a href=\"#configuration\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#streaming\" rel=\"nofollow\">Streaming</a></li>\n<li><a href=\"#features\" rel=\"nofollow\">Pythonic Features</a></li>\n</ul>\n<h2>Overview</h2>\n<p><code>carson</code> is a simple Python interface for Tesla's unofficial JSON API and includes some utilities to work with data it\ngenerates.  Lots of work to discover and document the API was done by Tim Dorr and dozens of contributors to his\n<a href=\"https://github.com/timdorr/tesla-api\" rel=\"nofollow\">tesla-api</a> project.  So, thanks to them for the head start.</p>\n<p>Among the goals for this project is to have an <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\"><code>asyncio</code></a> based\nlibrary.  As a result, Python 2 is not supported.  In fact, it seems like it has been a decade since the <em>provisional</em>\ntag was removed from the <code>asyncio</code> library because it has evolved so much.  There are many guides, articles, and posts\nbased on early features of <code>asyncio</code>.  The best way to stay up to date is by starting with Python's documentation at\n<a href=\"https://docs.python.org/library/asyncio.html\" rel=\"nofollow\">https://docs.python.org/library/asyncio.html</a>.  This project uses the\n<code>async</code>/<code>await</code> syntax introduced in <a href=\"https://www.python.org/dev/peps/pep-0492/\" rel=\"nofollow\">PEP-492</a>.  As of this writing, the\nlatest version of Python is 3.8.1.</p>\n<h3>Dependencies</h3>\n<p>There is one dependency for basic usage \u2014 <a href=\"https://docs.aiohttp.org/\" rel=\"nofollow\"><code>aiohttp</code></a>.</p>\n<h2>States And Commands</h2>\n<p>With its most basic usage, you can use <code>carson</code> to get the current state of car with the following code:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"kn\">from</span> <span class=\"nn\">carson</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Dark Nebula'</span>\n<span class=\"o\">...</span>    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'nikola@tesla.com'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'electricity'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>        <span class=\"n\">car</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\"> is </span><span class=\"si\">{</span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"si\">!r}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n<span class=\"n\">Dark</span> <span class=\"n\">Nebula</span> <span class=\"ow\">is</span> <span class=\"s1\">'asleep'</span>\n</pre>\n<p>Or you can run it from the command line in a similar fashion:</p>\n<pre><span class=\"gp\">&gt;</span> python -m carson -v --email nikola@tesla.com --password electricity --display-name <span class=\"s2\">\"Dark Nebula\"</span>\n</pre>\n<p>To get a sense of what is happening, you can add verbose and see the requests being made.</p>\n<pre><span class=\"gp\">&gt;</span> python -m carson -v --email nikola@tesla.com --password electricity --display-name <span class=\"s2\">\"Dark Nebula\"</span>\n<span class=\"go\">2020-01-01 10:45:59,418 D carson  Performing OAuth password grant for email='nikola@tesla.com'</span>\n<span class=\"go\">2020-01-01 10:46:00,229 D carson  Req# 1:  Method=POST url='https://owner-api.teslamotors.com/oauth/token?grant_type=password' status=200 duration=0:00:00.810031</span>\n<span class=\"go\">2020-01-01 10:46:00,943 D carson  Req# 2:  Method=GET url='https://owner-api.teslamotors.com/api/1/vehicles' status=200 duration=0:00:00.712868</span>\n<span class=\"go\">2020-01-01 10:46:00,944 I carson  Vehicle('Dark Nebula' state='asleep')</span>\n</pre>\n<p>You can see that two requests are made:</p>\n<ol>\n<li>First is to generate an <code>oauth</code> token which is required for all subsequent requests.</li>\n<li>Get a list of vehicles associated with the credentials provided.</li>\n</ol>\n<h3>OAuth</h3>\n<p>If you already have (or know how to generate) an <code>auth_token</code> or simply do not want to provide your Tesla account's\nemail and password, you can instead provide your token.  Simply replace the arguments <code>email</code> and <code>password</code> passed to\nthe <code>Session</code> constructor with the argument <code>access_token</code> (or <code>--auth-token</code> if using the command line).  Your auth\ntoken should resemble a long list of characters similar to the following:</p>\n<p><code>0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b</code></p>\n<p>Example:</p>\n<pre><span class=\"gp\">&gt;</span> python -m carson --auth-token 0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">...</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">auth_token</span><span class=\"o\">=</span><span class=\"s1\">'0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b2c3d4e5f0a1b'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>\n</pre>\n<h2>Configuration</h2>\n<p>Credentials can also be stored in configuration.  <code>carson</code> looks for credentials in the following order:</p>\n<ol>\n<li>The arguments <code>email</code> and <code>password</code> passed to the <code>Session</code> constructor.</li>\n<li>The argument <code>access_token</code> passed to the <code>Session</code> constructor.</li>\n<li>The environment variables <code>CARSON_EMAIL</code>, <code>CARSON_PASSWORD</code>, <code>CARSON_ACCESS_TOKEN</code>.</li>\n<li>An <code>.ini</code> style config file named <code>.carson</code> or <code>carson.ini</code> in the user's home directory.</li>\n</ol>\n<blockquote>\n<p><strong>Regarding credentials:</strong> Always use care when storing credentials.  Sometimes\n<a href=\"https://www.diogomonica.com/2017/03/27/why-you-shouldnt-use-env-variables-for-secret-data/\" rel=\"nofollow\">bad things</a>\ncan happen and often time will.</p>\n</blockquote>\n<h3>Credential Precedence</h3>\n<p>Credentials (<code>password</code> and <code>auth_token</code>) are used in the following order of precedence.  When reading <em>'if'</em> and\n<em>'if not'</em>, think Python boolean operations (e.g. <code>''</code>, <code>None</code>, <code>0</code> are all <code>False</code>).</p>\n<ol>\n<li>If <code>password</code> is given to the <code>Session</code> constructor, it will always be used to generate a new oauth token.  Even if\na valid <code>auth_token</code> is given to the <code>Session</code> constructor at the same time.  This means a value for <code>email</code> must\nalso be given (or implied from config).</li>\n<li>If <code>password</code> is not given to the <code>Session</code> constructor, the value used for <code>access_token</code> is used.  Or, if not\ngiven, implied from config.</li>\n<li>If neither <code>password</code> nor <code>access_token</code> are given to the <code>Session</code> constructor, but both <code>password</code> and\n<code>access_token</code> are defined in config, the <code>access_token</code> from config will be used.</li>\n</ol>\n<h2>Streaming</h2>\n<p>Tesla provides a <code>websocket</code> endpoint from which telemetry data can be streamed and stored.  To begin streaming this\ntelemetry, issue the following command.</p>\n<pre><span class=\"gp\">&gt;</span> python -m carson -v --display-name YOUR_CAR_NAME --stream\n</pre>\n<p><code>carson</code> will attempt to <em>wake-up</em> the car and initiate the streaming telemetry.  By default, the telemetry simply\noutputs the data to log.  A sample of that output is below.</p>\n<pre><span class=\"go\">2020-01-01 14:09:30,129 D carson  Req# 1:  Method=GET url='https://owner-api.teslamotors.com/api/1/vehicles' status=200 duration=0:00:00.435516</span>\n<span class=\"go\">2020-01-01 14:09:30,752 D carson  Req# 2:  Method=POST url='https://owner-api.teslamotors.com/api/1/vehicles/01234567890123456/wake_up' status=200 duration=0:00:00.614805</span>\n<span class=\"go\">2020-01-01 14:09:30,752 D carson  Waiting for car to wake up.</span>\n<span class=\"go\">2020-01-01 14:09:37,920 D carson  Req# 9:  Method=GET url='https://owner-api.teslamotors.com/api/1/vehicles/01234567890123456/vehicle_data' status=200 duration=0:00:00.301021</span>\n<span class=\"go\">2020-01-01 14:09:37,920 I carson  Streaming iteration=1</span>\n<span class=\"go\">2020-01-01 14:09:37,961 I carson  car=Vehicle('Dark Nebula' state='online' miles=18,421 software='2019.40.50.5' battery_level=81) iteration=1  client_errors=0 vehicle_disconnects=0</span>\n<span class=\"go\">2020-01-01 14:09:38,412 D carson  {\"msg_type\":\"data:subscribe\",\"token\":\"bWlj********NmY1\",\"value\":\"speed,odometer,soc,elevation,est_heading,est_lat,est_lng,power,shift_state,range,est_range,heading\",\"tag\":\"0123456789\"}</span>\n<span class=\"go\">2020-01-01 14:09:38,412 D carson  msg_count=1 msg={'msg_type': 'control:hello', 'connection_timeout': 0}</span>\n<span class=\"go\">2020-01-01 14:09:39,474 D carson  msg_count=2 msg={'msg_type': 'data:update', 'tag': '0123456789', 'value': '1577909378751,,18421.1,81,232,182,40.778955,-73.968583,0,,242,223,8'}</span>\n<span class=\"go\">2020-01-01 14:09:49,479 D carson  Timeout waiting for next message.</span>\n<span class=\"go\">2020-01-01 14:09:49,495 D carson  msg_count=3 msg={'msg_type': 'data:error', 'tag': '0123456789', 'value': 'disconnected', 'error_type': 'vehicle_disconnected'}</span>\n<span class=\"go\">2020-01-01 14:09:49,566 I carson  Streamer task ending due to shift state=''.</span>\n</pre>\n<h2>Pythonic Features</h2>\n<p>Python is a fantastic language.  One of my favorite features is its ability to customize attribute access.  That ability\nallows a <em>Vehcile</em> class instance to basically act like a chameleon.  As Tesla changes its data structure and command\ninterface for its cars, it's pretty easy for a Python class to essentially keep itself up to date.</p>\n<p>This section would normally be placed after the <a href=\"#states-and-commands\" rel=\"nofollow\">States And Commands</a> section.  But I wanted to\nput this above the fold to call out the Pythonic features of <code>carson</code> - both in programmability and general use on the\ncommand line.</p>\n<h3>Recursive Dot-Notation</h3>\n<p>Consider this JSON response from Tesla when getting making a call to <code>vehicle_data</code>:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"response\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">98765432109876543</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"vehicle_id\"</span><span class=\"p\">:</span> <span class=\"mi\">1234567890</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"display_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Dark Nebula\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"online\"</span><span class=\"p\">,</span>\n    <span class=\"err\">...</span>\n    <span class=\"nt\">\"vehicle_state\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"api_version\"</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span>\n      <span class=\"err\">...</span>\n      <span class=\"nt\">\"sentry_mode\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"sentry_mode_available\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"smart_summon_available\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"software_update\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"download_perc\"</span><span class=\"p\">:</span> <span class=\"mf\">0.85279</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"expected_duration_sec\"</span><span class=\"p\">:</span> <span class=\"mi\">2700</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"install_perc\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"err\">...</span>\n</pre>\n<p>With <code>carson</code>, after you make the call to get the vehicle data, you can access the JSON response that is returned, or\nsimply reference its associated JSON path on the instance of the <code>Vehicle</code> using standard Python dot-notation like this:</p>\n<pre><span class=\"n\">car</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">my_session</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"p\">(</span><span class=\"s1\">'Dark Nebula'</span><span class=\"p\">)</span>\n<span class=\"n\">json_response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">vehicle_data</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># I have options here.  I can access the JSON data as a normal Python `dict`</span>\n<span class=\"n\">perc</span> <span class=\"o\">=</span> <span class=\"n\">json_response</span><span class=\"p\">[</span><span class=\"s1\">'vehicle_state'</span><span class=\"p\">][</span><span class=\"s1\">'software_update'</span><span class=\"p\">][</span><span class=\"s1\">'download_perc'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Or as a Python attribute</span>\n<span class=\"n\">perc</span> <span class=\"o\">=</span> <span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">vehicle_state</span><span class=\"o\">.</span><span class=\"n\">software_update</span><span class=\"o\">.</span><span class=\"n\">download_perc</span>\n\n<span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"n\">perc</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Downloading: </span><span class=\"si\">{</span><span class=\"n\">perc</span><span class=\"si\">:</span><span class=\"s1\">.2%</span><span class=\"si\">}</span><span class=\"s1\"> complete.'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Download complete'</span> <span class=\"k\">if</span> <span class=\"n\">perc</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">'N/A'</span><span class=\"p\">)</span>\n</pre>\n<h3>Endpoint Commands As <code>await</code>able Attributes</h3>\n<p>Similarly, commands can that are mapped to an endpoint accessed via Python's class instance attribute mechanism will\nreturn an <code>await</code>able coroutine.  For example, the <code>Vehicle</code> class in <code>carson</code> does not have an attribute named\n<code>start_charge</code>.  The endpoints mapping, however, does map <code>START_CHARGE</code> to a POST request to the URI\n<code>api/1/vehicles/{vehicle_id}/command/charge_start</code>.  This makes it possible to start charging your Tesla with either\nthis code:</p>\n<pre><span class=\"n\">car</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">my_session</span><span class=\"o\">.</span><span class=\"n\">vehicles</span><span class=\"p\">(</span><span class=\"s1\">'Dark Nebula'</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">start_charge</span><span class=\"p\">()</span>\n</pre>\n<p>or this command</p>\n<pre><span class=\"gp\">&gt;</span> python -m carson -v --command start_charge\n<span class=\"go\">2020-01-01 11:51:44,349 D carson  Req# 1:  Method=GET url='https://owner-api.teslamotors.com/api/1/vehicles' status=200 duration=0:00:02.460019</span>\n<span class=\"go\">2020-01-01 11:51:44,350 I carson  Vehicle('Dark Nebula' state='online')</span>\n<span class=\"go\">2020-01-01 11:51:44,350 I carson  Performing 'start_charge'...</span>\n<span class=\"go\">2020-01-01 11:51:44,753 D carson  Req# 2:  Method=POST url='https://owner-api.teslamotors.com/api/1/vehicles/01234567890123456/command/charge_start' status=200 duration=0:00:00.403062</span>\n<span class=\"go\">2020-01-01 11:51:44,754 I carson  Result=</span>\n<span class=\"go\">{'carsonRequest': {'method': 'POST',</span>\n<span class=\"go\">                   'url': 'https://owner-api.teslamotors.com/api/1/vehicles/01234567890123456/command/charge_start'},</span>\n<span class=\"go\"> 'carsonTimestamp': '2020-01-01T17:51:44.350726',</span>\n<span class=\"go\"> 'error': None,</span>\n<span class=\"go\"> 'error_description': '',</span>\n<span class=\"go\"> 'response': {'reason': 'complete', 'result': True},</span>\n<span class=\"go\"> 'status': 200}</span>\n</pre>\n\n          </div>"}, "last_serial": 7009547, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "5047b8e3784c9e05d9ff138db4cbae5e", "sha256": "ba277203c90d0c32452dbcb184d888ec40cc5187ba733a7f8a8915de7c107f3d"}, "downloads": -1, "filename": "carson-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5047b8e3784c9e05d9ff138db4cbae5e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.8", "size": 36075, "upload_time": "2020-01-23T02:56:46", "upload_time_iso_8601": "2020-01-23T02:56:46.516095Z", "url": "https://files.pythonhosted.org/packages/46/51/6602129b313135fa79d6421e5af2f10e6b0d62912266deaffdd13b89da86/carson-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43bb5e589481c73979d0a23fe0c1ae32", "sha256": "5fc234b5b3aeb7480bed05e07c11b6aa5312617f7e436a5e206e18a89dcce64e"}, "downloads": -1, "filename": "carson-0.0.2.tar.gz", "has_sig": false, "md5_digest": "43bb5e589481c73979d0a23fe0c1ae32", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.8", "size": 33544, "upload_time": "2020-01-23T02:56:48", "upload_time_iso_8601": "2020-01-23T02:56:48.123511Z", "url": "https://files.pythonhosted.org/packages/63/e8/96565a3f1752ef54582129ae2a174939ffe959db1191ce7bd3972a6d5622/carson-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "87014e256715d47c4bb2b8edded5d67d", "sha256": "537509ce72724a388f4094bd358a90245a811de8c777bd4fd715cb39cff39df3"}, "downloads": -1, "filename": "carson-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "87014e256715d47c4bb2b8edded5d67d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.8", "size": 41529, "upload_time": "2020-02-03T12:52:18", "upload_time_iso_8601": "2020-02-03T12:52:18.617114Z", "url": "https://files.pythonhosted.org/packages/c1/18/7851eca9875cf257026af48dbba377876fb59cd2faa6c2eba7b33ead7b04/carson-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "d63496837b788c423d612b172eda6d46", "sha256": "5949ebf8f1896a6a822b53073b4c5b6f1c8dc3b0f13a668529f46481a6d1e482"}, "downloads": -1, "filename": "carson-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d63496837b788c423d612b172eda6d46", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.8", "size": 40029, "upload_time": "2020-03-02T12:34:40", "upload_time_iso_8601": "2020-03-02T12:34:40.428282Z", "url": "https://files.pythonhosted.org/packages/ad/6e/14f21d1d7996df2ba44b1cf958bf602311add54027cab0e662e2dc1e913b/carson-0.0.4-py3-none-any.whl", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "6acfa1e09b1eb2020914682171d25600", "sha256": "4470564ae3e7913f7196484937ebfa309f94ef3d5d08229e06e5ec32118f1a5d"}, "downloads": -1, "filename": "carson-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "6acfa1e09b1eb2020914682171d25600", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.8", "size": 40621, "upload_time": "2020-03-30T10:52:33", "upload_time_iso_8601": "2020-03-30T10:52:33.481300Z", "url": "https://files.pythonhosted.org/packages/6e/ba/985a046f5c9936224a8cca028054ee71fea775e0277955668bbc3c152806/carson-0.0.5-py3-none-any.whl", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "e152720731dc514dc90e3f576bbcfc49", "sha256": "626b1e64b49b5e2f3302b1fb602ea5725069930a941d1df0f671b34fe31c0efd"}, "downloads": -1, "filename": "carson-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e152720731dc514dc90e3f576bbcfc49", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.8", "size": 37474, "upload_time": "2020-04-13T11:34:43", "upload_time_iso_8601": "2020-04-13T11:34:43.038935Z", "url": "https://files.pythonhosted.org/packages/15/8a/afe9fd11361bc89a4a5bb19d95ea6149961423b046500359d5f7ec8bcf1a/carson-0.0.6-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "23b9d05ee750a06fc836fda91e385991", "sha256": "38e62c50af66e24369bac184927a6a474b5f84bb87b33ae79c6b358c0d33b9ed"}, "downloads": -1, "filename": "carson-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "23b9d05ee750a06fc836fda91e385991", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.8", "size": 36811, "upload_time": "2020-04-13T12:14:24", "upload_time_iso_8601": "2020-04-13T12:14:24.018296Z", "url": "https://files.pythonhosted.org/packages/35/27/df4f4a3a534fa7142ea1a8580e744cdfe334f5e4171c85e61e0e7acbf861/carson-1.0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23b9d05ee750a06fc836fda91e385991", "sha256": "38e62c50af66e24369bac184927a6a474b5f84bb87b33ae79c6b358c0d33b9ed"}, "downloads": -1, "filename": "carson-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "23b9d05ee750a06fc836fda91e385991", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.8", "size": 36811, "upload_time": "2020-04-13T12:14:24", "upload_time_iso_8601": "2020-04-13T12:14:24.018296Z", "url": "https://files.pythonhosted.org/packages/35/27/df4f4a3a534fa7142ea1a8580e744cdfe334f5e4171c85e61e0e7acbf861/carson-1.0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:35:23 2020"}