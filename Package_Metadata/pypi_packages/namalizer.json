{"info": {"author": "Alexander Artemenko", "author_email": "svetlyak.40wt@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Namalizer \u2014 smart method name normalizer\n========================================\n\nIt allows you to keep PEP8 naming style, using libraries like `Twisted` or `unittest`.\n\nHere is example:\n\n    #!/usr/bin/python\n    import unittest\n    from namalizer import pep8\n\n\n    class MyTests(unittest.TestCase):\n        def set_up(self):\n            self.a = 'blah'\n\n        def test_example(self):\n            self.assert_equal(self.a, 'blah')\n\n\n    pep8(**locals())\n    # or\n    pep8(MyTests)\n\n\n    if __name__ == '__main__':\n        unittest.main()\n\nNamalizer creates aliases for method with wrong names. In this case,\nit will create aliazes in `unittest.TestCase` for methods like `setUp`,\n`assertEqual`, etc..\n\nThen, it will see that you created method `set_up` to override base class's\nfunctionality and will create alias `setUp` for this method, this way\nwhen `unittest` will call `setUp`, you version will be called.\n\nMigration\n---------\n\nIf you use some library with ugly naming method, this regex will help you to\nfind all places where wrong names are used:\n\n    git grep -e '\\(\\.\\|def \\)[a-z]\\+[A-Z]'\n\nCredits\n-------\n\n* Alexander Artemenko <<svetlyak.40wt@gmail.com>> \u2014 original author.\n\nFork the project, contribute and send me patches.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/svetlyak40wt/namalizer/", "keywords": "python library pep8 pep normalizer naming", "license": "New BSD License", "maintainer": null, "maintainer_email": null, "name": "namalizer", "package_url": "https://pypi.org/project/namalizer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/namalizer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/svetlyak40wt/namalizer/"}, "release_url": "https://pypi.org/project/namalizer/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Normalizes method names according to PEP8.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Namalizer \u2014 smart method name normalizer<br>========================================<br><br>It allows you to keep PEP8 naming style, using libraries like `Twisted` or `unittest`.<br><br>Here is example:<br><br>    #!/usr/bin/python<br>    import unittest<br>    from namalizer import pep8<br><br><br>    class MyTests(unittest.TestCase):<br>        def set_up(self):<br>            self.a = 'blah'<br><br>        def test_example(self):<br>            self.assert_equal(self.a, 'blah')<br><br><br>    pep8(**locals())<br>    # or<br>    pep8(MyTests)<br><br><br>    if __name__ == '__main__':<br>        unittest.main()<br><br>Namalizer creates aliases for method with wrong names. In this case,<br>it will create aliazes in `unittest.TestCase` for methods like `setUp`,<br>`assertEqual`, etc..<br><br>Then, it will see that you created method `set_up` to override base class's<br>functionality and will create alias `setUp` for this method, this way<br>when `unittest` will call `setUp`, you version will be called.<br><br>Migration<br>---------<br><br>If you use some library with ugly naming method, this regex will help you to<br>find all places where wrong names are used:<br><br>    git grep -e '\\(\\.\\|def \\)[a-z]\\+[A-Z]'<br><br>Credits<br>-------<br><br>* Alexander Artemenko &lt;&lt;svetlyak.40wt@gmail.com&gt;&gt; \u2014 original author.<br><br>Fork the project, contribute and send me patches.\n          </div>"}, "last_serial": 749154, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "acc8a6c6df77e414dfbfab98bb8f665b", "sha256": "228211317f954d3fff1a2c3716c778ebc3b086350c391397c827e2f280dab4f0"}, "downloads": -1, "filename": "namalizer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "acc8a6c6df77e414dfbfab98bb8f665b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1939, "upload_time": "2011-04-04T08:50:27", "upload_time_iso_8601": "2011-04-04T08:50:27.030324Z", "url": "https://files.pythonhosted.org/packages/58/3a/901614ce278f390ca175a2d4c2eab8abd76bfd6c85d097fb92abf148b828/namalizer-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4d65a18d335428f1548503b21f4b41a3", "sha256": "409ecc0476e992b1c2c493207daa98e2ebee8476c214c5a40d5e0edad01608d4"}, "downloads": -1, "filename": "namalizer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4d65a18d335428f1548503b21f4b41a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2631, "upload_time": "2011-04-04T08:53:58", "upload_time_iso_8601": "2011-04-04T08:53:58.438061Z", "url": "https://files.pythonhosted.org/packages/8f/d6/1c0bec28dfd226b7f4dae4d268b2ef27d5a75e558abd42ca8096d7b9067e/namalizer-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d65a18d335428f1548503b21f4b41a3", "sha256": "409ecc0476e992b1c2c493207daa98e2ebee8476c214c5a40d5e0edad01608d4"}, "downloads": -1, "filename": "namalizer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4d65a18d335428f1548503b21f4b41a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2631, "upload_time": "2011-04-04T08:53:58", "upload_time_iso_8601": "2011-04-04T08:53:58.438061Z", "url": "https://files.pythonhosted.org/packages/8f/d6/1c0bec28dfd226b7f4dae4d268b2ef27d5a75e558abd42ca8096d7b9067e/namalizer-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:48 2020"}