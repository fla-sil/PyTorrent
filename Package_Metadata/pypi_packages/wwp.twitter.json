{"info": {"author": "Cannon Scientific", "author_email": "pdyson@cannonscientific.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. contents::\n        \n        .. Note!\n        -----\n        Update the following URLs to point to your:\n        \n        - code repository\n        - bug tracker\n        - questions/comments feedback mail\n        (do not set a real mail, to avoid spams)\n        \n        Or remove it if not used.\n        \n        - Code repository: http://svn.somewhere.com/...\n        - Questions and comments to somemailing_list\n        - Report bugs at http://bug.somewhere.com/..\n        \n        \n        Change history\n        **************\n        \n        Changelog\n        =========\n        \n        1.0 (xxxx-xx-xx)\n        ----------------\n        \n        - Created recipe with ZopeSkel\n        [Cannon Scientific]\n        \n        Detailed Documentation\n        **********************\n        \n        Introduction\n        ============\n        \n        This is a full-blown functional test. The emphasis here is on testing what\n        the user may input and see, and the system is largely tested as a black box.\n        We use PloneTestCase to set up this test as well, so we have a full Plone site\n        to play with. We *can* inspect the state of the portal, e.g. using\n        self.portal and self.folder, but it is often frowned upon since you are not\n        treating the system as a black box. Also, if you, for example, log in or set\n        roles using calls like self.setRoles(), these are not reflected in the test\n        browser, which runs as a separate session.\n        \n        Being a doctest, we can tell a story here.\n        \n        First, we must perform some setup. We use the testbrowser that is shipped\n        with Five, as this provides proper Zope 2 integration. Most of the\n        documentation, though, is in the underlying zope.testbrower package.\n        \n        >>> from Products.Five.testbrowser import Browser\n        >>> browser = Browser()\n        >>> portal_url = self.portal.absolute_url()\n        \n        The following is useful when writing and debugging testbrowser tests. It lets\n        us see all error messages in the error_log.\n        \n        >>> self.portal.error_log._ignored_exceptions = ()\n        \n        With that in place, we can go to the portal front page and log in. We will\n        do this using the default user from PloneTestCase:\n        \n        >>> from Products.PloneTestCase.setup import portal_owner, default_password\n        \n        >>> browser.open(portal_url)\n        \n        We have the login portlet, so let's use that.\n        \n        >>> browser.getControl(name='__ac_name').value = portal_owner\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        \n        Here, we set the value of the fields on the login form and then simulate a\n        submit click.\n        \n        We then test that we are still on the portal front page:\n        \n        >>> browser.url == portal_url\n        True\n        \n        And we ensure that we get the friendly logged-in message:\n        \n        >>> \"You are now logged in\" in browser.contents\n        True\n        \n        \n        -*- extra stuff goes here -*-\n        The twitrss content type\n        ===============================\n        \n        In this section we are tesing the twitrss content type by performing\n        basic operations like adding, updadating and deleting twitrss content\n        items.\n        \n        Adding a new twitrss content item\n        --------------------------------\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        Then we select the type of item we want to add. In this case we select\n        'twitrss' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('twitrss').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'twitrss' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'twitrss Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        And we are done! We added a new 'twitrss' content item to the portal.\n        \n        Updating an existing twitrss content item\n        ---------------------------------------\n        \n        Let's click on the 'edit' tab and update the object attribute values.\n        \n        >>> browser.getLink('Edit').click()\n        >>> browser.getControl(name='title').value = 'New twitrss Sample'\n        >>> browser.getControl('Save').click()\n        \n        We check that the changes were applied.\n        \n        >>> 'Changes saved' in browser.contents\n        True\n        >>> 'New twitrss Sample' in browser.contents\n        True\n        \n        Removing a/an twitrss content item\n        --------------------------------\n        \n        If we go to the home page, we can see a tab with the 'New twitrss\n        Sample' title in the global navigation tabs.\n        \n        >>> browser.open(portal_url)\n        >>> 'New twitrss Sample' in browser.contents\n        True\n        \n        Now we are going to delete the 'New twitrss Sample' object. First we\n        go to the contents tab and select the 'New twitrss Sample' for\n        deletion.\n        \n        >>> browser.getLink('Contents').click()\n        >>> browser.getControl('New twitrss Sample').click()\n        \n        We click on the 'Delete' button.\n        \n        >>> browser.getControl('Delete').click()\n        >>> 'Item(s) deleted' in browser.contents\n        True\n        \n        So, if we go back to the home page, there is no longer a 'New twitrss\n        Sample' tab.\n        \n        >>> browser.open(portal_url)\n        >>> 'New twitrss Sample' in browser.contents\n        False\n        \n        Adding a new twitrss content item as contributor\n        ------------------------------------------------\n        \n        Not only site managers are allowed to add twitrss content items, but\n        also site contributors.\n        \n        Let's logout and then login as 'contributor', a portal member that has the\n        contributor role assigned.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = 'contributor'\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        We select 'twitrss' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('twitrss').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'twitrss' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'twitrss Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        Done! We added a new twitrss content item logged in as contributor.\n        \n        Finally, let's login back as manager.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = portal_owner\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        \n        The twitschedule content type\n        ===============================\n        \n        In this section we are tesing the twitschedule content type by performing\n        basic operations like adding, updadating and deleting twitschedule content\n        items.\n        \n        Adding a new twitschedule content item\n        --------------------------------\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        Then we select the type of item we want to add. In this case we select\n        'twitschedule' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('twitschedule').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'twitschedule' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'twitschedule Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        And we are done! We added a new 'twitschedule' content item to the portal.\n        \n        Updating an existing twitschedule content item\n        ---------------------------------------\n        \n        Let's click on the 'edit' tab and update the object attribute values.\n        \n        >>> browser.getLink('Edit').click()\n        >>> browser.getControl(name='title').value = 'New twitschedule Sample'\n        >>> browser.getControl('Save').click()\n        \n        We check that the changes were applied.\n        \n        >>> 'Changes saved' in browser.contents\n        True\n        >>> 'New twitschedule Sample' in browser.contents\n        True\n        \n        Removing a/an twitschedule content item\n        --------------------------------\n        \n        If we go to the home page, we can see a tab with the 'New twitschedule\n        Sample' title in the global navigation tabs.\n        \n        >>> browser.open(portal_url)\n        >>> 'New twitschedule Sample' in browser.contents\n        True\n        \n        Now we are going to delete the 'New twitschedule Sample' object. First we\n        go to the contents tab and select the 'New twitschedule Sample' for\n        deletion.\n        \n        >>> browser.getLink('Contents').click()\n        >>> browser.getControl('New twitschedule Sample').click()\n        \n        We click on the 'Delete' button.\n        \n        >>> browser.getControl('Delete').click()\n        >>> 'Item(s) deleted' in browser.contents\n        True\n        \n        So, if we go back to the home page, there is no longer a 'New twitschedule\n        Sample' tab.\n        \n        >>> browser.open(portal_url)\n        >>> 'New twitschedule Sample' in browser.contents\n        False\n        \n        Adding a new twitschedule content item as contributor\n        ------------------------------------------------\n        \n        Not only site managers are allowed to add twitschedule content items, but\n        also site contributors.\n        \n        Let's logout and then login as 'contributor', a portal member that has the\n        contributor role assigned.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = 'contributor'\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        We select 'twitschedule' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('twitschedule').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'twitschedule' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'twitschedule Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        Done! We added a new twitschedule content item logged in as contributor.\n        \n        Finally, let's login back as manager.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = portal_owner\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        \n        The twittertrends content type\n        ===============================\n        \n        In this section we are tesing the twittertrends content type by performing\n        basic operations like adding, updadating and deleting twittertrends content\n        items.\n        \n        Adding a new twittertrends content item\n        --------------------------------\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        Then we select the type of item we want to add. In this case we select\n        'twittertrends' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('twittertrends').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'twittertrends' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'twittertrends Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        And we are done! We added a new 'twittertrends' content item to the portal.\n        \n        Updating an existing twittertrends content item\n        ---------------------------------------\n        \n        Let's click on the 'edit' tab and update the object attribute values.\n        \n        >>> browser.getLink('Edit').click()\n        >>> browser.getControl(name='title').value = 'New twittertrends Sample'\n        >>> browser.getControl('Save').click()\n        \n        We check that the changes were applied.\n        \n        >>> 'Changes saved' in browser.contents\n        True\n        >>> 'New twittertrends Sample' in browser.contents\n        True\n        \n        Removing a/an twittertrends content item\n        --------------------------------\n        \n        If we go to the home page, we can see a tab with the 'New twittertrends\n        Sample' title in the global navigation tabs.\n        \n        >>> browser.open(portal_url)\n        >>> 'New twittertrends Sample' in browser.contents\n        True\n        \n        Now we are going to delete the 'New twittertrends Sample' object. First we\n        go to the contents tab and select the 'New twittertrends Sample' for\n        deletion.\n        \n        >>> browser.getLink('Contents').click()\n        >>> browser.getControl('New twittertrends Sample').click()\n        \n        We click on the 'Delete' button.\n        \n        >>> browser.getControl('Delete').click()\n        >>> 'Item(s) deleted' in browser.contents\n        True\n        \n        So, if we go back to the home page, there is no longer a 'New twittertrends\n        Sample' tab.\n        \n        >>> browser.open(portal_url)\n        >>> 'New twittertrends Sample' in browser.contents\n        False\n        \n        Adding a new twittertrends content item as contributor\n        ------------------------------------------------\n        \n        Not only site managers are allowed to add twittertrends content items, but\n        also site contributors.\n        \n        Let's logout and then login as 'contributor', a portal member that has the\n        contributor role assigned.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = 'contributor'\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        We select 'twittertrends' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('twittertrends').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'twittertrends' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'twittertrends Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        Done! We added a new twittertrends content item logged in as contributor.\n        \n        Finally, let's login back as manager.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = portal_owner\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        \n        The TwitterPage content type\n        ===============================\n        \n        In this section we are tesing the TwitterPage content type by performing\n        basic operations like adding, updadating and deleting TwitterPage content\n        items.\n        \n        Adding a new TwitterPage content item\n        --------------------------------\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        Then we select the type of item we want to add. In this case we select\n        'TwitterPage' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('TwitterPage').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'TwitterPage' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'TwitterPage Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        And we are done! We added a new 'TwitterPage' content item to the portal.\n        \n        Updating an existing TwitterPage content item\n        ---------------------------------------\n        \n        Let's click on the 'edit' tab and update the object attribute values.\n        \n        >>> browser.getLink('Edit').click()\n        >>> browser.getControl(name='title').value = 'New TwitterPage Sample'\n        >>> browser.getControl('Save').click()\n        \n        We check that the changes were applied.\n        \n        >>> 'Changes saved' in browser.contents\n        True\n        >>> 'New TwitterPage Sample' in browser.contents\n        True\n        \n        Removing a/an TwitterPage content item\n        --------------------------------\n        \n        If we go to the home page, we can see a tab with the 'New TwitterPage\n        Sample' title in the global navigation tabs.\n        \n        >>> browser.open(portal_url)\n        >>> 'New TwitterPage Sample' in browser.contents\n        True\n        \n        Now we are going to delete the 'New TwitterPage Sample' object. First we\n        go to the contents tab and select the 'New TwitterPage Sample' for\n        deletion.\n        \n        >>> browser.getLink('Contents').click()\n        >>> browser.getControl('New TwitterPage Sample').click()\n        \n        We click on the 'Delete' button.\n        \n        >>> browser.getControl('Delete').click()\n        >>> 'Item(s) deleted' in browser.contents\n        True\n        \n        So, if we go back to the home page, there is no longer a 'New TwitterPage\n        Sample' tab.\n        \n        >>> browser.open(portal_url)\n        >>> 'New TwitterPage Sample' in browser.contents\n        False\n        \n        Adding a new TwitterPage content item as contributor\n        ------------------------------------------------\n        \n        Not only site managers are allowed to add TwitterPage content items, but\n        also site contributors.\n        \n        Let's logout and then login as 'contributor', a portal member that has the\n        contributor role assigned.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = 'contributor'\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        We select 'TwitterPage' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('TwitterPage').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'TwitterPage' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'TwitterPage Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        Done! We added a new TwitterPage content item logged in as contributor.\n        \n        Finally, let's login back as manager.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = portal_owner\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        \n        \n        \n        Contributors\n        ************\n        \n        Cannon Scientific, Author\n        \n        \n        Download\n        ********", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/plone/plone.example", "keywords": "plone twitter", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "wwp.twitter", "package_url": "https://pypi.org/project/wwp.twitter/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/wwp.twitter/", "project_urls": {"Homepage": "http://svn.plone.org/svn/plone/plone.example"}, "release_url": "https://pypi.org/project/wwp.twitter/1.5dev/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "1.5dev", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. contents::<br>        <br>        .. Note!<br>        -----<br>        Update the following URLs to point to your:<br>        <br>        - code repository<br>        - bug tracker<br>        - questions/comments feedback mail<br>        (do not set a real mail, to avoid spams)<br>        <br>        Or remove it if not used.<br>        <br>        - Code repository: http://svn.somewhere.com/...<br>        - Questions and comments to somemailing_list<br>        - Report bugs at http://bug.somewhere.com/..<br>        <br>        <br>        Change history<br>        **************<br>        <br>        Changelog<br>        =========<br>        <br>        1.0 (xxxx-xx-xx)<br>        ----------------<br>        <br>        - Created recipe with ZopeSkel<br>        [Cannon Scientific]<br>        <br>        Detailed Documentation<br>        **********************<br>        <br>        Introduction<br>        ============<br>        <br>        This is a full-blown functional test. The emphasis here is on testing what<br>        the user may input and see, and the system is largely tested as a black box.<br>        We use PloneTestCase to set up this test as well, so we have a full Plone site<br>        to play with. We *can* inspect the state of the portal, e.g. using<br>        self.portal and self.folder, but it is often frowned upon since you are not<br>        treating the system as a black box. Also, if you, for example, log in or set<br>        roles using calls like self.setRoles(), these are not reflected in the test<br>        browser, which runs as a separate session.<br>        <br>        Being a doctest, we can tell a story here.<br>        <br>        First, we must perform some setup. We use the testbrowser that is shipped<br>        with Five, as this provides proper Zope 2 integration. Most of the<br>        documentation, though, is in the underlying zope.testbrower package.<br>        <br>        &gt;&gt;&gt; from Products.Five.testbrowser import Browser<br>        &gt;&gt;&gt; browser = Browser()<br>        &gt;&gt;&gt; portal_url = self.portal.absolute_url()<br>        <br>        The following is useful when writing and debugging testbrowser tests. It lets<br>        us see all error messages in the error_log.<br>        <br>        &gt;&gt;&gt; self.portal.error_log._ignored_exceptions = ()<br>        <br>        With that in place, we can go to the portal front page and log in. We will<br>        do this using the default user from PloneTestCase:<br>        <br>        &gt;&gt;&gt; from Products.PloneTestCase.setup import portal_owner, default_password<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        We have the login portlet, so let's use that.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        <br>        Here, we set the value of the fields on the login form and then simulate a<br>        submit click.<br>        <br>        We then test that we are still on the portal front page:<br>        <br>        &gt;&gt;&gt; browser.url == portal_url<br>        True<br>        <br>        And we ensure that we get the friendly logged-in message:<br>        <br>        &gt;&gt;&gt; \"You are now logged in\" in browser.contents<br>        True<br>        <br>        <br>        -*- extra stuff goes here -*-<br>        The twitrss content type<br>        ===============================<br>        <br>        In this section we are tesing the twitrss content type by performing<br>        basic operations like adding, updadating and deleting twitrss content<br>        items.<br>        <br>        Adding a new twitrss content item<br>        --------------------------------<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        Then we select the type of item we want to add. In this case we select<br>        'twitrss' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('twitrss').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'twitrss' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'twitrss Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        And we are done! We added a new 'twitrss' content item to the portal.<br>        <br>        Updating an existing twitrss content item<br>        ---------------------------------------<br>        <br>        Let's click on the 'edit' tab and update the object attribute values.<br>        <br>        &gt;&gt;&gt; browser.getLink('Edit').click()<br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'New twitrss Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        <br>        We check that the changes were applied.<br>        <br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        &gt;&gt;&gt; 'New twitrss Sample' in browser.contents<br>        True<br>        <br>        Removing a/an twitrss content item<br>        --------------------------------<br>        <br>        If we go to the home page, we can see a tab with the 'New twitrss<br>        Sample' title in the global navigation tabs.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New twitrss Sample' in browser.contents<br>        True<br>        <br>        Now we are going to delete the 'New twitrss Sample' object. First we<br>        go to the contents tab and select the 'New twitrss Sample' for<br>        deletion.<br>        <br>        &gt;&gt;&gt; browser.getLink('Contents').click()<br>        &gt;&gt;&gt; browser.getControl('New twitrss Sample').click()<br>        <br>        We click on the 'Delete' button.<br>        <br>        &gt;&gt;&gt; browser.getControl('Delete').click()<br>        &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>        True<br>        <br>        So, if we go back to the home page, there is no longer a 'New twitrss<br>        Sample' tab.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New twitrss Sample' in browser.contents<br>        False<br>        <br>        Adding a new twitrss content item as contributor<br>        ------------------------------------------------<br>        <br>        Not only site managers are allowed to add twitrss content items, but<br>        also site contributors.<br>        <br>        Let's logout and then login as 'contributor', a portal member that has the<br>        contributor role assigned.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        We select 'twitrss' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('twitrss').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'twitrss' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'twitrss Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        Done! We added a new twitrss content item logged in as contributor.<br>        <br>        Finally, let's login back as manager.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        <br>        The twitschedule content type<br>        ===============================<br>        <br>        In this section we are tesing the twitschedule content type by performing<br>        basic operations like adding, updadating and deleting twitschedule content<br>        items.<br>        <br>        Adding a new twitschedule content item<br>        --------------------------------<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        Then we select the type of item we want to add. In this case we select<br>        'twitschedule' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('twitschedule').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'twitschedule' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'twitschedule Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        And we are done! We added a new 'twitschedule' content item to the portal.<br>        <br>        Updating an existing twitschedule content item<br>        ---------------------------------------<br>        <br>        Let's click on the 'edit' tab and update the object attribute values.<br>        <br>        &gt;&gt;&gt; browser.getLink('Edit').click()<br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'New twitschedule Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        <br>        We check that the changes were applied.<br>        <br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        &gt;&gt;&gt; 'New twitschedule Sample' in browser.contents<br>        True<br>        <br>        Removing a/an twitschedule content item<br>        --------------------------------<br>        <br>        If we go to the home page, we can see a tab with the 'New twitschedule<br>        Sample' title in the global navigation tabs.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New twitschedule Sample' in browser.contents<br>        True<br>        <br>        Now we are going to delete the 'New twitschedule Sample' object. First we<br>        go to the contents tab and select the 'New twitschedule Sample' for<br>        deletion.<br>        <br>        &gt;&gt;&gt; browser.getLink('Contents').click()<br>        &gt;&gt;&gt; browser.getControl('New twitschedule Sample').click()<br>        <br>        We click on the 'Delete' button.<br>        <br>        &gt;&gt;&gt; browser.getControl('Delete').click()<br>        &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>        True<br>        <br>        So, if we go back to the home page, there is no longer a 'New twitschedule<br>        Sample' tab.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New twitschedule Sample' in browser.contents<br>        False<br>        <br>        Adding a new twitschedule content item as contributor<br>        ------------------------------------------------<br>        <br>        Not only site managers are allowed to add twitschedule content items, but<br>        also site contributors.<br>        <br>        Let's logout and then login as 'contributor', a portal member that has the<br>        contributor role assigned.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        We select 'twitschedule' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('twitschedule').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'twitschedule' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'twitschedule Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        Done! We added a new twitschedule content item logged in as contributor.<br>        <br>        Finally, let's login back as manager.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        <br>        The twittertrends content type<br>        ===============================<br>        <br>        In this section we are tesing the twittertrends content type by performing<br>        basic operations like adding, updadating and deleting twittertrends content<br>        items.<br>        <br>        Adding a new twittertrends content item<br>        --------------------------------<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        Then we select the type of item we want to add. In this case we select<br>        'twittertrends' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('twittertrends').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'twittertrends' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'twittertrends Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        And we are done! We added a new 'twittertrends' content item to the portal.<br>        <br>        Updating an existing twittertrends content item<br>        ---------------------------------------<br>        <br>        Let's click on the 'edit' tab and update the object attribute values.<br>        <br>        &gt;&gt;&gt; browser.getLink('Edit').click()<br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'New twittertrends Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        <br>        We check that the changes were applied.<br>        <br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        &gt;&gt;&gt; 'New twittertrends Sample' in browser.contents<br>        True<br>        <br>        Removing a/an twittertrends content item<br>        --------------------------------<br>        <br>        If we go to the home page, we can see a tab with the 'New twittertrends<br>        Sample' title in the global navigation tabs.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New twittertrends Sample' in browser.contents<br>        True<br>        <br>        Now we are going to delete the 'New twittertrends Sample' object. First we<br>        go to the contents tab and select the 'New twittertrends Sample' for<br>        deletion.<br>        <br>        &gt;&gt;&gt; browser.getLink('Contents').click()<br>        &gt;&gt;&gt; browser.getControl('New twittertrends Sample').click()<br>        <br>        We click on the 'Delete' button.<br>        <br>        &gt;&gt;&gt; browser.getControl('Delete').click()<br>        &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>        True<br>        <br>        So, if we go back to the home page, there is no longer a 'New twittertrends<br>        Sample' tab.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New twittertrends Sample' in browser.contents<br>        False<br>        <br>        Adding a new twittertrends content item as contributor<br>        ------------------------------------------------<br>        <br>        Not only site managers are allowed to add twittertrends content items, but<br>        also site contributors.<br>        <br>        Let's logout and then login as 'contributor', a portal member that has the<br>        contributor role assigned.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        We select 'twittertrends' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('twittertrends').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'twittertrends' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'twittertrends Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        Done! We added a new twittertrends content item logged in as contributor.<br>        <br>        Finally, let's login back as manager.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        <br>        The TwitterPage content type<br>        ===============================<br>        <br>        In this section we are tesing the TwitterPage content type by performing<br>        basic operations like adding, updadating and deleting TwitterPage content<br>        items.<br>        <br>        Adding a new TwitterPage content item<br>        --------------------------------<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        Then we select the type of item we want to add. In this case we select<br>        'TwitterPage' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('TwitterPage').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'TwitterPage' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'TwitterPage Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        And we are done! We added a new 'TwitterPage' content item to the portal.<br>        <br>        Updating an existing TwitterPage content item<br>        ---------------------------------------<br>        <br>        Let's click on the 'edit' tab and update the object attribute values.<br>        <br>        &gt;&gt;&gt; browser.getLink('Edit').click()<br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'New TwitterPage Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        <br>        We check that the changes were applied.<br>        <br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        &gt;&gt;&gt; 'New TwitterPage Sample' in browser.contents<br>        True<br>        <br>        Removing a/an TwitterPage content item<br>        --------------------------------<br>        <br>        If we go to the home page, we can see a tab with the 'New TwitterPage<br>        Sample' title in the global navigation tabs.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New TwitterPage Sample' in browser.contents<br>        True<br>        <br>        Now we are going to delete the 'New TwitterPage Sample' object. First we<br>        go to the contents tab and select the 'New TwitterPage Sample' for<br>        deletion.<br>        <br>        &gt;&gt;&gt; browser.getLink('Contents').click()<br>        &gt;&gt;&gt; browser.getControl('New TwitterPage Sample').click()<br>        <br>        We click on the 'Delete' button.<br>        <br>        &gt;&gt;&gt; browser.getControl('Delete').click()<br>        &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>        True<br>        <br>        So, if we go back to the home page, there is no longer a 'New TwitterPage<br>        Sample' tab.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New TwitterPage Sample' in browser.contents<br>        False<br>        <br>        Adding a new TwitterPage content item as contributor<br>        ------------------------------------------------<br>        <br>        Not only site managers are allowed to add TwitterPage content items, but<br>        also site contributors.<br>        <br>        Let's logout and then login as 'contributor', a portal member that has the<br>        contributor role assigned.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        We select 'TwitterPage' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('TwitterPage').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'TwitterPage' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'TwitterPage Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        Done! We added a new TwitterPage content item logged in as contributor.<br>        <br>        Finally, let's login back as manager.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        <br>        <br>        <br>        Contributors<br>        ************<br>        <br>        Cannon Scientific, Author<br>        <br>        <br>        Download<br>        ********\n          </div>"}, "last_serial": 801780, "releases": {"1.5dev": [{"comment_text": "", "digests": {"md5": "69f5f0ba503878dee511647e6758cf4d", "sha256": "2c884ed063ef814687a5661ece26207449131b2632c574c1aa1685d2ffbaf88d"}, "downloads": -1, "filename": "wwp.twitter-1.0dev-py2.4.egg", "has_sig": false, "md5_digest": "69f5f0ba503878dee511647e6758cf4d", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 55423, "upload_time": "2009-09-02T16:13:45", "upload_time_iso_8601": "2009-09-02T16:13:45.215586Z", "url": "https://files.pythonhosted.org/packages/f0/d9/2a1586f386bb1e6b8d432e5bd3f8014db362c358794b20b45a3560380aeb/wwp.twitter-1.0dev-py2.4.egg", "yanked": false}, {"comment_text": "added develop mode", "digests": {"md5": "f96b26f854a6ebcf92e08769ba98ccda", "sha256": "df1a2218c977975c7a98555b039088678bc9ea7c23594bfb444549cc4094ae9d"}, "downloads": -1, "filename": "wwp.twitter-1.5.1dev-py2.4.egg", "has_sig": false, "md5_digest": "f96b26f854a6ebcf92e08769ba98ccda", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 144937, "upload_time": "2009-09-03T15:49:24", "upload_time_iso_8601": "2009-09-03T15:49:24.789068Z", "url": "https://files.pythonhosted.org/packages/76/5c/ad68d49ea31a0af8fb03852647ccc73d1f00841b443ed0aaecb605a91a86/wwp.twitter-1.5.1dev-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fb45444571a6c13d7e1a1a400f0548e", "sha256": "67561d2a2a6d290a09543470207df9cca97127086460f2d3beb69684fd79df5e"}, "downloads": -1, "filename": "wwp.twitter-1.5.2dev-py2.4.egg", "has_sig": false, "md5_digest": "8fb45444571a6c13d7e1a1a400f0548e", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 145454, "upload_time": "2009-09-10T16:40:14", "upload_time_iso_8601": "2009-09-10T16:40:14.416032Z", "url": "https://files.pythonhosted.org/packages/b3/55/dd1ec08415eef10cf11bef719aee2a7d29cdd9c9f71dc04d64d34d418705/wwp.twitter-1.5.2dev-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f9db2a44bcb806e5f9e51838cebfcd2", "sha256": "77622e43131c6acaf4f4c708fc955c2dff2bc6d7748e153853297acf77ffeb0f"}, "downloads": -1, "filename": "wwp.twitter-1.5.3dev-py2.4.egg", "has_sig": false, "md5_digest": "9f9db2a44bcb806e5f9e51838cebfcd2", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 146365, "upload_time": "2009-09-16T12:10:47", "upload_time_iso_8601": "2009-09-16T12:10:47.014821Z", "url": "https://files.pythonhosted.org/packages/b9/9e/f0b97a23fff22899fc5a90a0d25662f88586c94b7c3d4a6b52ff0d77a1bc/wwp.twitter-1.5.3dev-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7afe6e88441b22facbabe83114b9c407", "sha256": "2933d1e0d1403bbab70bae81c9899f7e2c53ca46066533c7dd8bfe6fe7842af6"}, "downloads": -1, "filename": "wwp.twitter-1.5.4dev-py2.4.egg", "has_sig": false, "md5_digest": "7afe6e88441b22facbabe83114b9c407", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 146466, "upload_time": "2009-09-16T13:53:31", "upload_time_iso_8601": "2009-09-16T13:53:31.041310Z", "url": "https://files.pythonhosted.org/packages/72/d1/fe81a5033ebf43ee1b594f4a8ca52fa3664bdb63bd712c88e630d20fe11a/wwp.twitter-1.5.4dev-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc3eba709c4a8c77f75536f816123737", "sha256": "9a1bd3fc2400c176516d91f3229b2f60577b4589952c8424cc5e666194f801c1"}, "downloads": -1, "filename": "wwp.twitter-1.5dev-py2.4.egg", "has_sig": false, "md5_digest": "fc3eba709c4a8c77f75536f816123737", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 143863, "upload_time": "2009-09-02T16:11:55", "upload_time_iso_8601": "2009-09-02T16:11:55.020455Z", "url": "https://files.pythonhosted.org/packages/69/61/bafd29d68ba990e20179a13fd0ed8ca70b3f9b4536c8dd861bc23805ec8d/wwp.twitter-1.5dev-py2.4.egg", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "69f5f0ba503878dee511647e6758cf4d", "sha256": "2c884ed063ef814687a5661ece26207449131b2632c574c1aa1685d2ffbaf88d"}, "downloads": -1, "filename": "wwp.twitter-1.0dev-py2.4.egg", "has_sig": false, "md5_digest": "69f5f0ba503878dee511647e6758cf4d", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 55423, "upload_time": "2009-09-02T16:13:45", "upload_time_iso_8601": "2009-09-02T16:13:45.215586Z", "url": "https://files.pythonhosted.org/packages/f0/d9/2a1586f386bb1e6b8d432e5bd3f8014db362c358794b20b45a3560380aeb/wwp.twitter-1.0dev-py2.4.egg", "yanked": false}, {"comment_text": "added develop mode", "digests": {"md5": "f96b26f854a6ebcf92e08769ba98ccda", "sha256": "df1a2218c977975c7a98555b039088678bc9ea7c23594bfb444549cc4094ae9d"}, "downloads": -1, "filename": "wwp.twitter-1.5.1dev-py2.4.egg", "has_sig": false, "md5_digest": "f96b26f854a6ebcf92e08769ba98ccda", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 144937, "upload_time": "2009-09-03T15:49:24", "upload_time_iso_8601": "2009-09-03T15:49:24.789068Z", "url": "https://files.pythonhosted.org/packages/76/5c/ad68d49ea31a0af8fb03852647ccc73d1f00841b443ed0aaecb605a91a86/wwp.twitter-1.5.1dev-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fb45444571a6c13d7e1a1a400f0548e", "sha256": "67561d2a2a6d290a09543470207df9cca97127086460f2d3beb69684fd79df5e"}, "downloads": -1, "filename": "wwp.twitter-1.5.2dev-py2.4.egg", "has_sig": false, "md5_digest": "8fb45444571a6c13d7e1a1a400f0548e", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 145454, "upload_time": "2009-09-10T16:40:14", "upload_time_iso_8601": "2009-09-10T16:40:14.416032Z", "url": "https://files.pythonhosted.org/packages/b3/55/dd1ec08415eef10cf11bef719aee2a7d29cdd9c9f71dc04d64d34d418705/wwp.twitter-1.5.2dev-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f9db2a44bcb806e5f9e51838cebfcd2", "sha256": "77622e43131c6acaf4f4c708fc955c2dff2bc6d7748e153853297acf77ffeb0f"}, "downloads": -1, "filename": "wwp.twitter-1.5.3dev-py2.4.egg", "has_sig": false, "md5_digest": "9f9db2a44bcb806e5f9e51838cebfcd2", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 146365, "upload_time": "2009-09-16T12:10:47", "upload_time_iso_8601": "2009-09-16T12:10:47.014821Z", "url": "https://files.pythonhosted.org/packages/b9/9e/f0b97a23fff22899fc5a90a0d25662f88586c94b7c3d4a6b52ff0d77a1bc/wwp.twitter-1.5.3dev-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7afe6e88441b22facbabe83114b9c407", "sha256": "2933d1e0d1403bbab70bae81c9899f7e2c53ca46066533c7dd8bfe6fe7842af6"}, "downloads": -1, "filename": "wwp.twitter-1.5.4dev-py2.4.egg", "has_sig": false, "md5_digest": "7afe6e88441b22facbabe83114b9c407", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 146466, "upload_time": "2009-09-16T13:53:31", "upload_time_iso_8601": "2009-09-16T13:53:31.041310Z", "url": "https://files.pythonhosted.org/packages/72/d1/fe81a5033ebf43ee1b594f4a8ca52fa3664bdb63bd712c88e630d20fe11a/wwp.twitter-1.5.4dev-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc3eba709c4a8c77f75536f816123737", "sha256": "9a1bd3fc2400c176516d91f3229b2f60577b4589952c8424cc5e666194f801c1"}, "downloads": -1, "filename": "wwp.twitter-1.5dev-py2.4.egg", "has_sig": false, "md5_digest": "fc3eba709c4a8c77f75536f816123737", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 143863, "upload_time": "2009-09-02T16:11:55", "upload_time_iso_8601": "2009-09-02T16:11:55.020455Z", "url": "https://files.pythonhosted.org/packages/69/61/bafd29d68ba990e20179a13fd0ed8ca70b3f9b4536c8dd861bc23805ec8d/wwp.twitter-1.5dev-py2.4.egg", "yanked": false}], "timestamp": "Fri May  8 03:26:40 2020"}