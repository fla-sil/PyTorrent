{"info": {"author": "kpj", "author_email": "kpjkpjkpjkpjkpjkpj@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3 :: Only", "Topic :: System :: Systems Administration"], "description": "wine\\_wrap\n==========\n\nA versioned wine-prefix management tool with memory-shared prefixes.\n\nThis tool simplifies the maintenance of individual wine-prefixes per\nexecutable. Each prefix is version-controlled using git, allowing for\nreproducible setups. Furthermore (if supported by host system), the\nprefixes are stored as subvolumes on a BTRFS image. This makes storing\nthem more memory efficient by only saving differences between each\ninstallation.\n\nInstallation\n------------\n\n``wine_wrap`` can be installed using ``pip``:\n\n.. code:: bash\n\n    $ pip install wine_wrap\n\nUsage\n-----\n\n.. code:: bash\n\n    $ wine_wrap --help\n    Usage: wine_wrap [OPTIONS] COMMAND [ARGS]...\n\n    Options:\n      --help  Show this message and exit.\n\n    Commands:\n      clear      Clear all associations.\n      configure  Associate script with given wine-prefix.\n      run        Execute given script in wine-prefix.\n      scan       Scan for executables in given prefix.\n      set        Associate script with given wine-prefix.\n      show       Show current setup.\n\nGetting started\n---------------\n\nA typical use-case would be to first run an installer, and then the\ncreated executable in the same wine-prefix. To do so, first run the\ninstaller (as well as winecfg beforehand) and name the used prefix:\n\n.. code:: bash\n\n    $ wine_wrap run --configure --name MyOwnPrefix installer.exe\n    [..]\n\nAfterwards, find the newly installed executable within this prefix and\nassociate it correctly:\n\n.. code:: bash\n\n    $ wine_wrap scan MyOwnPrefix\n    [..]\n     > \"/path/to/executable.exe\"\n    [..]\n    $ wine_wrap set \"/path/to/executable.exe\" MyOwnPrefix\n\nWe can then make sure that the correct script-prefix associations are\nset:\n\n.. code:: bash\n\n    $ wine_wrap show\n    --- MyOwnPrefix ---\n     > installer.exe\n     > executable.exe\n\nIt is then possible to simply run the executable in the correct\nwine-prefix:\n\n.. code:: bash\n\n    $ wine_wrap run /path/to/executable.exe\n    [..]\n\nIf we don't need the scripts anymore, we can delete them in the end:\n\n.. code:: bash\n\n    $ wine_wrap clear --delete-prefixes --prefix MyOwnPrefix\n    [..]", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kpj/wine_wrap", "keywords": "wine_wrap wine windows", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "wine-wrap", "package_url": "https://pypi.org/project/wine-wrap/", "platform": "", "project_url": "https://pypi.org/project/wine-wrap/", "project_urls": {"Homepage": "https://github.com/kpj/wine_wrap"}, "release_url": "https://pypi.org/project/wine-wrap/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "A versioned wine-prefix management tool", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A versioned wine-prefix management tool with memory-shared prefixes.</p>\n<p>This tool simplifies the maintenance of individual wine-prefixes per\nexecutable. Each prefix is version-controlled using git, allowing for\nreproducible setups. Furthermore (if supported by host system), the\nprefixes are stored as subvolumes on a BTRFS image. This makes storing\nthem more memory efficient by only saving differences between each\ninstallation.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>wine_wrap</tt> can be installed using <tt>pip</tt>:</p>\n<pre>$ pip install wine_wrap\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>$ wine_wrap --help\nUsage: wine_wrap <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  clear      Clear all associations.\n  configure  Associate script with given wine-prefix.\n  run        Execute given script in wine-prefix.\n  scan       Scan <span class=\"k\">for</span> executables in given prefix.\n  <span class=\"nb\">set</span>        Associate script with given wine-prefix.\n  show       Show current setup.\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>A typical use-case would be to first run an installer, and then the\ncreated executable in the same wine-prefix. To do so, first run the\ninstaller (as well as winecfg beforehand) and name the used prefix:</p>\n<pre>$ wine_wrap run --configure --name MyOwnPrefix installer.exe\n<span class=\"o\">[</span>..<span class=\"o\">]</span>\n</pre>\n<p>Afterwards, find the newly installed executable within this prefix and\nassociate it correctly:</p>\n<pre>$ wine_wrap scan MyOwnPrefix\n<span class=\"o\">[</span>..<span class=\"o\">]</span>\n &gt; <span class=\"s2\">\"/path/to/executable.exe\"</span>\n<span class=\"o\">[</span>..<span class=\"o\">]</span>\n$ wine_wrap <span class=\"nb\">set</span> <span class=\"s2\">\"/path/to/executable.exe\"</span> MyOwnPrefix\n</pre>\n<p>We can then make sure that the correct script-prefix associations are\nset:</p>\n<pre>$ wine_wrap show\n--- MyOwnPrefix ---\n &gt; installer.exe\n &gt; executable.exe\n</pre>\n<p>It is then possible to simply run the executable in the correct\nwine-prefix:</p>\n<pre>$ wine_wrap run /path/to/executable.exe\n<span class=\"o\">[</span>..<span class=\"o\">]</span>\n</pre>\n<p>If we don\u2019t need the scripts anymore, we can delete them in the end:</p>\n<pre>$ wine_wrap clear --delete-prefixes --prefix MyOwnPrefix\n<span class=\"o\">[</span>..<span class=\"o\">]</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3410601, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1970f0a6a3ad5ec738838cd5b817945d", "sha256": "e2cb143da6b644135402723290a952d9f48149a777db2f431b3084998e2bcee7"}, "downloads": -1, "filename": "wine_wrap-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1970f0a6a3ad5ec738838cd5b817945d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6784, "upload_time": "2017-12-12T15:30:05", "upload_time_iso_8601": "2017-12-12T15:30:05.297657Z", "url": "https://files.pythonhosted.org/packages/00/07/7e146dd64d057ddd40fb3fb5494dba8824ee5b9dfd45e4e160a9ff0ffe2f/wine_wrap-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1970f0a6a3ad5ec738838cd5b817945d", "sha256": "e2cb143da6b644135402723290a952d9f48149a777db2f431b3084998e2bcee7"}, "downloads": -1, "filename": "wine_wrap-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1970f0a6a3ad5ec738838cd5b817945d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6784, "upload_time": "2017-12-12T15:30:05", "upload_time_iso_8601": "2017-12-12T15:30:05.297657Z", "url": "https://files.pythonhosted.org/packages/00/07/7e146dd64d057ddd40fb3fb5494dba8824ee5b9dfd45e4e160a9ff0ffe2f/wine_wrap-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:56 2020"}