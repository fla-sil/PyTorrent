{"info": {"author": "Min Chul Kim", "author_email": "minchulkim87@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Pandas Read XML\n\nA tool to help read XML files as pandas dataframes.\n\nSee example in [Google Colab here](https://colab.research.google.com/github/minchulkim87/pandas_read_xml/blob/master/pandas_read_xml_example.ipynb)\n\nIsn't it annoying working with data in XML format? I think so. Take a look at this simple example.\n\n```xml\n<first-tag>\n    <not-interested>\n        blah blah\n    </not-interested>\n    <second-tag>\n        <the-tag-you-want-as-root>\n            <row>\n                <columnA>\n                    The data that you want\n                </columnA>\n                <columnB>\n                    More data that you want\n                </columnB>\n            </row>\n            <row>\n                <columnA>\n                    Yet more data that you want\n                </columnA>\n                <columnB>\n                    Eh, get this data too\n                </columnB>\n            </row>\n        </the-tag-you-want-as-root>\n    </second-tag>\n    <another-irrelevant-tag>\n        some other info that you do not want\n    </another-irrelevant-tag>\n</first-tag>\n```\n\nI wish there was a simple `df = pd.read_xml('some_file.xml')` like `pd.read_csv()` and `pd.read_json()` that we all love.\n\nI can't solve this with my time and skills, but perhaps this package will help get you started.\n\n\n## Install\n\n```bash\npip install pandas_read_xml\n```\n\n## Import package\n\n```python\nimport pandas_read_xml as pdx\n```\n\n## Read XML as pandas dataframe\n\nYou will need to identify the path to the \"root\" tag in the XML from which you want to extract the data.\n\n```python\ndf = pdx.read_xml(\"test.xml\", ['first-tag', 'second-tag', 'the-tag-you-want-as-root'])\n```\n\n*Sometimes, the XML structure is such that pandas will treat rows vs columns in a way that we think are opposites. For these cases, the read_xml may fail. Try using `transpose=True` as an argument in such cases.\n\n### Real example.\n\nHere is a real example taken from USPTO. It is one of their \"daily diff\" files for the US trademark applications data.\n\n```python\ntest_zip_path = 'https://bulkdata.uspto.gov/data/trademark/dailyxml/applications/apc200219.zip'\nroot_key_list = ['trademark-applications-daily', 'application-information', 'file-segments', 'action-keys']\n\ndf = pdx.read_xml(test_zip_path, root_key_list)\n```\n\n# Auto Flatten\n\nThe real cumbersome part of working with XML data (or JSON data) is that they do not represent a single table. Rather, they are a (nested) tree representations of what probably were relational databases. Often, these XML data are exported without a clearly documented schema, and more often, no clear way of navigating the data.\n\nWhat is even more annoying is that, in comparison to JSON, the data structures are not consistent across XML files from the same schema. Some files may have multiples of the same tag, resulting in a list-type data, while in other files of the *same* schema will only have on of that tag, resulting in a non-list-type data. In other times, the tags are not present which means that the resulting \"column\" is not just null, but not even a column. This makes it difficult to \"flatten\".\n\nPandas already has some tools to help \"explode\" (items in list become separate rows) and \"normalise\" (key, value pairs in one column become separate columns of data), but they fail when there are these mixed types within the same tags (columns). Besides, \"flattening\" (combining exploding and normalising) duplicates other data in the dataframe as well, leading to an explosion of memory requirements.\n\nSo, in this tool, I have also attempted to make a few different tools to separate the relational tables.\n\nA quick example from the same dataframe from USPTO above:\n\n```python\nfrom pandas_read_xml import auto_separate_tables\n\nkey_columns = ['action-key', 'case-file|serial-number']\n\ndata = df.pipe(auto_separate_tables, key_columns)\n```\n\nwill separate out what the `auto_separate_tables` function guesses to be separate tables. The resulting `data` is a dictionary where the keys are the \"table names\" and the corresponding values are the pandas dataframes. Each of the separate tables will have the `key_columns` as common columns.\n\nYou can see the list of separated tables by using python dictionary methods.\n\n```python\ndata.keys()\n```\n\nAnd then view a table.\n\n```python\ndata['classifications']\n```\n\nThere are also other \"smaller\" functions that does parts of the job:\n\n- flatten(df)\n- auto_flatten(df, key_columns)\n- fully_flatten(df, key_columns)\n\nEven more if you look through the code.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/minchulkim87/pandas_read_xml", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pandas-read-xml", "package_url": "https://pypi.org/project/pandas-read-xml/", "platform": "", "project_url": "https://pypi.org/project/pandas-read-xml/", "project_urls": {"Homepage": "https://github.com/minchulkim87/pandas_read_xml"}, "release_url": "https://pypi.org/project/pandas-read-xml/0.0.5/", "requires_dist": ["certifi (==2020.4.5.1)", "chardet (==3.0.4)", "idna (==2.9)", "numpy (==1.18.4)", "pandas (==1.0.3)", "pyarrow (==0.17.0)", "python-dateutil (==2.8.1)", "pytz (==2020.1)", "requests (==2.23.0)", "six (==1.14.0)", "urllib3 (==1.25.9)", "xmltodict (==0.12.0)"], "requires_python": ">=3.6", "summary": "A tool to read XML files as pandas dataframes.", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pandas Read XML</h1>\n<p>A tool to help read XML files as pandas dataframes.</p>\n<p>See example in <a href=\"https://colab.research.google.com/github/minchulkim87/pandas_read_xml/blob/master/pandas_read_xml_example.ipynb\" rel=\"nofollow\">Google Colab here</a></p>\n<p>Isn't it annoying working with data in XML format? I think so. Take a look at this simple example.</p>\n<pre><span class=\"nt\">&lt;first-tag&gt;</span>\n    <span class=\"nt\">&lt;not-interested&gt;</span>\n        blah blah\n    <span class=\"nt\">&lt;/not-interested&gt;</span>\n    <span class=\"nt\">&lt;second-tag&gt;</span>\n        <span class=\"nt\">&lt;the-tag-you-want-as-root&gt;</span>\n            <span class=\"nt\">&lt;row&gt;</span>\n                <span class=\"nt\">&lt;columnA&gt;</span>\n                    The data that you want\n                <span class=\"nt\">&lt;/columnA&gt;</span>\n                <span class=\"nt\">&lt;columnB&gt;</span>\n                    More data that you want\n                <span class=\"nt\">&lt;/columnB&gt;</span>\n            <span class=\"nt\">&lt;/row&gt;</span>\n            <span class=\"nt\">&lt;row&gt;</span>\n                <span class=\"nt\">&lt;columnA&gt;</span>\n                    Yet more data that you want\n                <span class=\"nt\">&lt;/columnA&gt;</span>\n                <span class=\"nt\">&lt;columnB&gt;</span>\n                    Eh, get this data too\n                <span class=\"nt\">&lt;/columnB&gt;</span>\n            <span class=\"nt\">&lt;/row&gt;</span>\n        <span class=\"nt\">&lt;/the-tag-you-want-as-root&gt;</span>\n    <span class=\"nt\">&lt;/second-tag&gt;</span>\n    <span class=\"nt\">&lt;another-irrelevant-tag&gt;</span>\n        some other info that you do not want\n    <span class=\"nt\">&lt;/another-irrelevant-tag&gt;</span>\n<span class=\"nt\">&lt;/first-tag&gt;</span>\n</pre>\n<p>I wish there was a simple <code>df = pd.read_xml('some_file.xml')</code> like <code>pd.read_csv()</code> and <code>pd.read_json()</code> that we all love.</p>\n<p>I can't solve this with my time and skills, but perhaps this package will help get you started.</p>\n<h2>Install</h2>\n<pre>pip install pandas_read_xml\n</pre>\n<h2>Import package</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas_read_xml</span> <span class=\"k\">as</span> <span class=\"nn\">pdx</span>\n</pre>\n<h2>Read XML as pandas dataframe</h2>\n<p>You will need to identify the path to the \"root\" tag in the XML from which you want to extract the data.</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pdx</span><span class=\"o\">.</span><span class=\"n\">read_xml</span><span class=\"p\">(</span><span class=\"s2\">\"test.xml\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'first-tag'</span><span class=\"p\">,</span> <span class=\"s1\">'second-tag'</span><span class=\"p\">,</span> <span class=\"s1\">'the-tag-you-want-as-root'</span><span class=\"p\">])</span>\n</pre>\n<p>*Sometimes, the XML structure is such that pandas will treat rows vs columns in a way that we think are opposites. For these cases, the read_xml may fail. Try using <code>transpose=True</code> as an argument in such cases.</p>\n<h3>Real example.</h3>\n<p>Here is a real example taken from USPTO. It is one of their \"daily diff\" files for the US trademark applications data.</p>\n<pre><span class=\"n\">test_zip_path</span> <span class=\"o\">=</span> <span class=\"s1\">'https://bulkdata.uspto.gov/data/trademark/dailyxml/applications/apc200219.zip'</span>\n<span class=\"n\">root_key_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'trademark-applications-daily'</span><span class=\"p\">,</span> <span class=\"s1\">'application-information'</span><span class=\"p\">,</span> <span class=\"s1\">'file-segments'</span><span class=\"p\">,</span> <span class=\"s1\">'action-keys'</span><span class=\"p\">]</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pdx</span><span class=\"o\">.</span><span class=\"n\">read_xml</span><span class=\"p\">(</span><span class=\"n\">test_zip_path</span><span class=\"p\">,</span> <span class=\"n\">root_key_list</span><span class=\"p\">)</span>\n</pre>\n<h1>Auto Flatten</h1>\n<p>The real cumbersome part of working with XML data (or JSON data) is that they do not represent a single table. Rather, they are a (nested) tree representations of what probably were relational databases. Often, these XML data are exported without a clearly documented schema, and more often, no clear way of navigating the data.</p>\n<p>What is even more annoying is that, in comparison to JSON, the data structures are not consistent across XML files from the same schema. Some files may have multiples of the same tag, resulting in a list-type data, while in other files of the <em>same</em> schema will only have on of that tag, resulting in a non-list-type data. In other times, the tags are not present which means that the resulting \"column\" is not just null, but not even a column. This makes it difficult to \"flatten\".</p>\n<p>Pandas already has some tools to help \"explode\" (items in list become separate rows) and \"normalise\" (key, value pairs in one column become separate columns of data), but they fail when there are these mixed types within the same tags (columns). Besides, \"flattening\" (combining exploding and normalising) duplicates other data in the dataframe as well, leading to an explosion of memory requirements.</p>\n<p>So, in this tool, I have also attempted to make a few different tools to separate the relational tables.</p>\n<p>A quick example from the same dataframe from USPTO above:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pandas_read_xml</span> <span class=\"kn\">import</span> <span class=\"n\">auto_separate_tables</span>\n\n<span class=\"n\">key_columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'action-key'</span><span class=\"p\">,</span> <span class=\"s1\">'case-file|serial-number'</span><span class=\"p\">]</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"n\">auto_separate_tables</span><span class=\"p\">,</span> <span class=\"n\">key_columns</span><span class=\"p\">)</span>\n</pre>\n<p>will separate out what the <code>auto_separate_tables</code> function guesses to be separate tables. The resulting <code>data</code> is a dictionary where the keys are the \"table names\" and the corresponding values are the pandas dataframes. Each of the separate tables will have the <code>key_columns</code> as common columns.</p>\n<p>You can see the list of separated tables by using python dictionary methods.</p>\n<pre><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n</pre>\n<p>And then view a table.</p>\n<pre><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'classifications'</span><span class=\"p\">]</span>\n</pre>\n<p>There are also other \"smaller\" functions that does parts of the job:</p>\n<ul>\n<li>flatten(df)</li>\n<li>auto_flatten(df, key_columns)</li>\n<li>fully_flatten(df, key_columns)</li>\n</ul>\n<p>Even more if you look through the code.</p>\n\n          </div>"}, "last_serial": 7188050, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "672ea6fb385928f1f1be561ca5103de7", "sha256": "3af8cc89cf551a6f83ef5dc3559a0e1d04e6e01acc20f3dad5ba97173db86c6b"}, "downloads": -1, "filename": "pandas_read_xml-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "672ea6fb385928f1f1be561ca5103de7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5854, "upload_time": "2020-04-29T23:40:54", "upload_time_iso_8601": "2020-04-29T23:40:54.663832Z", "url": "https://files.pythonhosted.org/packages/bd/00/251a45d9f6e43e490c68741c952faefbe6f266d915083420f27eb4dec2b6/pandas_read_xml-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1397a497cb66ce1b99d1fcb3f360779d", "sha256": "f5e581ee8e45df1ca73435dd523c5a2d06b89fc42345b7187791d00dbbe2ab5b"}, "downloads": -1, "filename": "pandas_read_xml-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1397a497cb66ce1b99d1fcb3f360779d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5010, "upload_time": "2020-04-29T23:40:56", "upload_time_iso_8601": "2020-04-29T23:40:56.913549Z", "url": "https://files.pythonhosted.org/packages/b9/df/3d5d18ae489e9ecaabd5481cc9366d3803079c9a19c0a736ba43cc61e5e8/pandas_read_xml-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8ba7d2cb65fc27afcbfa13101f2fc2e8", "sha256": "606a2404c49cecdcac250c86b8f3bef7933afadf754c7e85e0f88a1c6ba9172a"}, "downloads": -1, "filename": "pandas_read_xml-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8ba7d2cb65fc27afcbfa13101f2fc2e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5856, "upload_time": "2020-04-29T23:53:31", "upload_time_iso_8601": "2020-04-29T23:53:31.695475Z", "url": "https://files.pythonhosted.org/packages/ff/b4/93bbc061f8aad4f03e07479de316e17d70df42d2dda5a7663d07415acdc7/pandas_read_xml-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab51c83038bc01e68eb71d07ed58ca44", "sha256": "bb36fd9b02c30f59e338a197bfe9dad30d6cc678effd0c35a919672414620b0b"}, "downloads": -1, "filename": "pandas_read_xml-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ab51c83038bc01e68eb71d07ed58ca44", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5007, "upload_time": "2020-04-29T23:53:33", "upload_time_iso_8601": "2020-04-29T23:53:33.253246Z", "url": "https://files.pythonhosted.org/packages/37/79/818ecb5d08ca10039e76264186c2b576ea26b86d50710004491005ebd67e/pandas_read_xml-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "79a1cd2e77e6c3dcb9ae4b582e9c9b9a", "sha256": "95893597280b7853ba23ef35e2b057bd0a9ebf5c017e35ab30a59cc6c3281c6c"}, "downloads": -1, "filename": "pandas_read_xml-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "79a1cd2e77e6c3dcb9ae4b582e9c9b9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6000, "upload_time": "2020-04-30T00:10:30", "upload_time_iso_8601": "2020-04-30T00:10:30.517852Z", "url": "https://files.pythonhosted.org/packages/35/f4/ba9ae65bc239d10fe8ba2615ef3d029c1e9b2a753232877a5a4493c07cd4/pandas_read_xml-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82df2023a6d2ae169d1047931474aa65", "sha256": "6ad20c92f65e08b49215da33ba2f82c36546c2e56e0127a5bf63876b8ff4cda1"}, "downloads": -1, "filename": "pandas_read_xml-0.0.3.tar.gz", "has_sig": false, "md5_digest": "82df2023a6d2ae169d1047931474aa65", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5184, "upload_time": "2020-04-30T00:10:31", "upload_time_iso_8601": "2020-04-30T00:10:31.938860Z", "url": "https://files.pythonhosted.org/packages/c6/c4/0f579b5f1f348e2589f23e3e7e76e4f1061af0004ece877ad6d3da5134d4/pandas_read_xml-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a63a69ad06f68af0037cb27f7cfa2df3", "sha256": "a5917bec9e94f2ccd4ba0c7387586c6d033c1522f6036fcf28cb8669300c25b0"}, "downloads": -1, "filename": "pandas_read_xml-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a63a69ad06f68af0037cb27f7cfa2df3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6087, "upload_time": "2020-04-30T01:07:56", "upload_time_iso_8601": "2020-04-30T01:07:56.895307Z", "url": "https://files.pythonhosted.org/packages/98/13/daa731a068c227e1a6df248ab18f21d7a8e288606d0eeaa25cc14b0387be/pandas_read_xml-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b75bd0465284d90656a5a0258e562ba", "sha256": "36efd434cf867febbbb7a241ac95284992acb5acbaca6879d15621d00d94e371"}, "downloads": -1, "filename": "pandas_read_xml-0.0.4.tar.gz", "has_sig": false, "md5_digest": "8b75bd0465284d90656a5a0258e562ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5279, "upload_time": "2020-04-30T01:07:58", "upload_time_iso_8601": "2020-04-30T01:07:58.686082Z", "url": "https://files.pythonhosted.org/packages/10/80/4a8e5453b946f631837271a2c2fbff6e70fb7380049c2f8caad03729b5b1/pandas_read_xml-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "021f0c06738af9114ce340713917c1be", "sha256": "133285eb24f39a0f412a7d331f4ae68475de59cd044ffb87ce79f74bcbc60392"}, "downloads": -1, "filename": "pandas_read_xml-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "021f0c06738af9114ce340713917c1be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6177, "upload_time": "2020-05-07T12:25:57", "upload_time_iso_8601": "2020-05-07T12:25:57.091276Z", "url": "https://files.pythonhosted.org/packages/78/8d/ef5bd7dee119c74c30161710b55e983965d8a378ee9ad7d59dddd7ae380c/pandas_read_xml-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "302c4f85cde18c81d6e9c309a8bdeba6", "sha256": "97923adaca543215661fc4c2aa008a0d59a91023fbafc5d116e9e5d1c5e8e293"}, "downloads": -1, "filename": "pandas_read_xml-0.0.5.tar.gz", "has_sig": false, "md5_digest": "302c4f85cde18c81d6e9c309a8bdeba6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5390, "upload_time": "2020-05-07T12:25:58", "upload_time_iso_8601": "2020-05-07T12:25:58.926119Z", "url": "https://files.pythonhosted.org/packages/ad/f2/e6e90d8d3c33a8ff7a7306c17b7c9b239bc5a3072bd3ce9832201682fcc3/pandas_read_xml-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "021f0c06738af9114ce340713917c1be", "sha256": "133285eb24f39a0f412a7d331f4ae68475de59cd044ffb87ce79f74bcbc60392"}, "downloads": -1, "filename": "pandas_read_xml-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "021f0c06738af9114ce340713917c1be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6177, "upload_time": "2020-05-07T12:25:57", "upload_time_iso_8601": "2020-05-07T12:25:57.091276Z", "url": "https://files.pythonhosted.org/packages/78/8d/ef5bd7dee119c74c30161710b55e983965d8a378ee9ad7d59dddd7ae380c/pandas_read_xml-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "302c4f85cde18c81d6e9c309a8bdeba6", "sha256": "97923adaca543215661fc4c2aa008a0d59a91023fbafc5d116e9e5d1c5e8e293"}, "downloads": -1, "filename": "pandas_read_xml-0.0.5.tar.gz", "has_sig": false, "md5_digest": "302c4f85cde18c81d6e9c309a8bdeba6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5390, "upload_time": "2020-05-07T12:25:58", "upload_time_iso_8601": "2020-05-07T12:25:58.926119Z", "url": "https://files.pythonhosted.org/packages/ad/f2/e6e90d8d3c33a8ff7a7306c17b7c9b239bc5a3072bd3ce9832201682fcc3/pandas_read_xml-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:28 2020"}