{"info": {"author": "Avinash Kak", "author_email": "kak@purdue.edu", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering :: Information Analysis"], "description": "**Version 1.0.3** is a quick release that fixes the problem with relative imports in the previous version.  Python3 does not like relative imports.\n\n**Version 1.0.2** fixes the module packaging errors that had crept into the previous version.\n\n**Version 1.0.1** includes a couple of CSV data files in the Examples directory that were inadvertently left out of Version 1.0 packaging of the module.\n\nYou may need this module if (1) you are trying to make multidimensional\npredictions from multidimensional observations; (2) the dimensionality of\nthe observation space is large; and (3) the data you have available for\nconstructing a prediction model is rather limited.  The more traditional\nmultiple linear regression (MLR) algorithms are likely to become\nnumerically unstable under these conditions.\n\nIn addition to presenting an implementation of the main Partial Least\nSquares (PLS) algorithm that can be used to make a multidimensional\nprediction from a multidimensional observation, this module also includes\nwhat is known as the PLS1 algorithm for the case when the predicted entity\nis just one-dimensional (as in, say, face recognition in computer vision).\n\nTypical usage syntax:\n\n::\n\n        In the notation that is typically used for describing PLS, X\n        denotes the matrix formed by multidimensional observations, with\n        each row of X standing for the values taken by all the predictor\n        variables.  And Y denotes the matrix formed by the values for the\n        predicted variables. Each row of Y corresponds to the prediction\n        that can be made on the basis of the corresponding row of X.  Let's\n        say that you have some previously collected data for the X and Y\n        matrices in the form of CSV records in disk files. Given these X\n        and Y, you would want to calculate the matrix B of regression\n        coefficients with this module.  Toward that end, you can make the\n        following calls in your script:\n\n            import PartialLeastSquares as PLS\n\n            XMatrix_file = \"X_data.csv\"\n            YMatrix_file = \"Y_data.csv\"\n\n            pls = PLS.PartialLeastSquares(\n                    XMatrix_file =  XMatrix_file,\n                    YMatrix_file =  YMatrix_file,\n                    epsilon      = 0.0001,\n                  )\n           pls.get_XMatrix_from_csv()\n           pls.get_YMatrix_from_csv()\n           B = pls.PLS()\n\n        The object B returned by the last call will be a numpy matrix\n        consisting of the calculated regression coefficients.  Let's say\n        that you now have a matrix Xtest of new data for the predictor\n        variables.  All you have to do to calculate the values for the\n        predicted variables is\n\n           Ytest =  Xtest * B", "description_content_type": null, "docs_url": null, "download_url": "https://engineering.purdue.edu/kak/distPLS/PartialLeastSquares-1.0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://engineering.purdue.edu/kak/distPLS/PartialLeastSquares-1.0.3.html", "keywords": "classification,regression,data dimensionality reduction", "license": "Python Software Foundation License", "maintainer": null, "maintainer_email": null, "name": "PartialLeastSquares", "package_url": "https://pypi.org/project/PartialLeastSquares/", "platform": "All platforms", "project_url": "https://pypi.org/project/PartialLeastSquares/", "project_urls": {"Download": "https://engineering.purdue.edu/kak/distPLS/PartialLeastSquares-1.0.3.tar.gz", "Homepage": "https://engineering.purdue.edu/kak/distPLS/PartialLeastSquares-1.0.3.html"}, "release_url": "https://pypi.org/project/PartialLeastSquares/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "A Python module for regression and classification with the Partial Least Squares algorithm", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Version 1.0.3</strong> is a quick release that fixes the problem with relative imports in the previous version.  Python3 does not like relative imports.</p>\n<p><strong>Version 1.0.2</strong> fixes the module packaging errors that had crept into the previous version.</p>\n<p><strong>Version 1.0.1</strong> includes a couple of CSV data files in the Examples directory that were inadvertently left out of Version 1.0 packaging of the module.</p>\n<p>You may need this module if (1) you are trying to make multidimensional\npredictions from multidimensional observations; (2) the dimensionality of\nthe observation space is large; and (3) the data you have available for\nconstructing a prediction model is rather limited.  The more traditional\nmultiple linear regression (MLR) algorithms are likely to become\nnumerically unstable under these conditions.</p>\n<p>In addition to presenting an implementation of the main Partial Least\nSquares (PLS) algorithm that can be used to make a multidimensional\nprediction from a multidimensional observation, this module also includes\nwhat is known as the PLS1 algorithm for the case when the predicted entity\nis just one-dimensional (as in, say, face recognition in computer vision).</p>\n<p>Typical usage syntax:</p>\n<pre>In the notation that is typically used for describing PLS, X\ndenotes the matrix formed by multidimensional observations, with\neach row of X standing for the values taken by all the predictor\nvariables.  And Y denotes the matrix formed by the values for the\npredicted variables. Each row of Y corresponds to the prediction\nthat can be made on the basis of the corresponding row of X.  Let's\nsay that you have some previously collected data for the X and Y\nmatrices in the form of CSV records in disk files. Given these X\nand Y, you would want to calculate the matrix B of regression\ncoefficients with this module.  Toward that end, you can make the\nfollowing calls in your script:\n\n    import PartialLeastSquares as PLS\n\n    XMatrix_file = \"X_data.csv\"\n    YMatrix_file = \"Y_data.csv\"\n\n    pls = PLS.PartialLeastSquares(\n            XMatrix_file =  XMatrix_file,\n            YMatrix_file =  YMatrix_file,\n            epsilon      = 0.0001,\n          )\n   pls.get_XMatrix_from_csv()\n   pls.get_YMatrix_from_csv()\n   B = pls.PLS()\n\nThe object B returned by the last call will be a numpy matrix\nconsisting of the calculated regression coefficients.  Let's say\nthat you now have a matrix Xtest of new data for the predictor\nvariables.  All you have to do to calculate the values for the\npredicted variables is\n\n   Ytest =  Xtest * B\n</pre>\n\n          </div>"}, "last_serial": 1788915, "releases": {"1.0": [], "1.0.1": [], "1.0.2": [], "1.0.3": [{"comment_text": "", "digests": {"md5": "79a59ff19bc301faaa77ffc65faa5844", "sha256": "8fdbc0233ce549838d9cb260ba18562052a3d379c968b7d72d342f3baca40bee"}, "downloads": -1, "filename": "PartialLeastSquares-1.0.3.tar.gz", "has_sig": false, "md5_digest": "79a59ff19bc301faaa77ffc65faa5844", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1289825, "upload_time": "2015-10-27T19:03:05", "upload_time_iso_8601": "2015-10-27T19:03:05.420074Z", "url": "https://files.pythonhosted.org/packages/2a/53/b829fbcfa91da62de8d4ebc1282b4265b5c060aa34b4208e49a849aeb31a/PartialLeastSquares-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79a59ff19bc301faaa77ffc65faa5844", "sha256": "8fdbc0233ce549838d9cb260ba18562052a3d379c968b7d72d342f3baca40bee"}, "downloads": -1, "filename": "PartialLeastSquares-1.0.3.tar.gz", "has_sig": false, "md5_digest": "79a59ff19bc301faaa77ffc65faa5844", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1289825, "upload_time": "2015-10-27T19:03:05", "upload_time_iso_8601": "2015-10-27T19:03:05.420074Z", "url": "https://files.pythonhosted.org/packages/2a/53/b829fbcfa91da62de8d4ebc1282b4265b5c060aa34b4208e49a849aeb31a/PartialLeastSquares-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:13 2020"}