{"info": {"author": "Joseph Perez", "author_email": "joperez@hotmail.fr", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.7"], "description": "# APISchema\n\nAnother Python API schema handling through typing annotation; light, simple, powerful.\n\n## Getting Started\n\nInstall with `pip install pyapischema` (I'm currently claiming `apischema` name on PyPi).\nUse it following example below \n\n\n## Examples\n\nSimple example:\n```Python\nimport json\nimport uuid\nfrom dataclasses import dataclass\nfrom typing import Iterator, Sequence\n\nfrom apischema.data import from_data, to_data\nfrom apischema.model import Model\nfrom apischema.schema import build_schema\nfrom apischema.validator import Error, validate\n\n\nclass UUID(Model[str], uuid.UUID):\n    pass\n\n\n@dataclass\nclass MyModel:\n    id: UUID\n    elts: Sequence[int]\n    check_sum: int\n\n    @validate(\"elts\", \"check_sum\")\n    def elts_sum(self) -> Iterator[Error]:\n        if sum(self.elts) != self.check_sum:\n            yield \"check_sum doesn't match elts\"\n\n\ndata = json.load(...) # type: ignore\n# data = {\"id\": str(uuid4()), \"elts\": [1, 2], \"check_sum\": 3} \nmy_model = from_data(MyModel, data, camel_case=False)\ndata2 = to_data(MyModel, my_model, camel_case=False)\n\nopenapi = build_schema(MyModel, camel_case=False)\n```\n\nA little bit more complex\n```Python\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass, field\nfrom typing import List, TypeVar, Union, Iterator, Generic\n\nimport pytest\n\nfrom apischema.data import from_data\nfrom apischema.model import Model\nfrom apischema.validation import ValidationError\nfrom apischema.validator import Error, validate\n\nT = TypeVar(\"T\")\n\n\nclass A(Model[Union[T, List[T]]], List[T]):\n    @classmethod\n    def from_model(cls, obj: Union[T, List[T]]) -> A:\n        if isinstance(obj, list):\n            return A(obj)\n        else:\n            return A([obj])\n\n    def to_model(self) -> Union[T, List[T]]:\n        return self[0] if len(self) == 1 else list(self)\n\n    @validate\n    def no_consecutive_duplicates(self) -> Iterator[Error]:\n        if len(self) == 0:\n            return\n        cur = self[0]\n        for i in range(1, len(self)):\n            if cur == self[i]:\n                yield f\"duplicate elt {cur} in position {i}\"\n            cur = self[i]\n\n\n@dataclass\nclass B(Generic[T]):\n    a: A[T] = field(default_factory=A)\n\n\ndef test():\n    print()\n    print(from_data(B, {}))\n    print(from_data(B[int], {}))\n    print(from_data(B[int], {\"a\": 0}))\n    print(from_data(B[int], {\"a\": [1, 2]}))\n    with pytest.raises(ValidationError) as err:\n        print(from_data(B[int], {\"a\": [1, 2, 2]}))\n    print(err.value)\n    with pytest.raises(ValidationError) as err:\n        print(from_data(B[str], {\"a\": [\"\", 0, 1]}))\n    print(err.value)\n\n```\n\nWith *spec*:\n```Python\nfrom dataclasses import dataclass\n\nfrom apischema.data import from_data, to_data\nfrom apischema.field import field\nfrom apischema.model import Model\nfrom apischema.schema import Schema, build_schema\nfrom apischema.spec import NumSpec, SpecClass\n\n\nclass ShortString(Model[str], SpecClass, str):\n    max_length = 10\n\n\n@dataclass\nclass A:\n    positive: int = field(spec=NumSpec(min=0))\n    short_string: ShortString = ShortString(\"\")\n\n\ndef test():\n    # data = json.load(...)\n    data = {\"positive\": 1, \"shortString\": \"ok\"}\n    a = from_data(A, data)\n    data2 = to_data(A, a)\n    print(data2)\n\n    openapi = build_schema(A)\n    print(to_data(Schema, openapi))\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wyfo/apischema", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyapischema", "package_url": "https://pypi.org/project/pyapischema/", "platform": "", "project_url": "https://pypi.org/project/pyapischema/", "project_urls": {"Homepage": "https://github.com/wyfo/apischema"}, "release_url": "https://pypi.org/project/pyapischema/1.0.0/", "requires_dist": ["tmv", "pyhumps"], "requires_python": "", "summary": "Another Python API schema handling through typing annotation; light, simple, powerful.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>APISchema</h1>\n<p>Another Python API schema handling through typing annotation; light, simple, powerful.</p>\n<h2>Getting Started</h2>\n<p>Install with <code>pip install pyapischema</code> (I'm currently claiming <code>apischema</code> name on PyPi).\nUse it following example below</p>\n<h2>Examples</h2>\n<p>Simple example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Iterator</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.data</span> <span class=\"kn\">import</span> <span class=\"n\">from_data</span><span class=\"p\">,</span> <span class=\"n\">to_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.model</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.schema</span> <span class=\"kn\">import</span> <span class=\"n\">build_schema</span>\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.validator</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span><span class=\"p\">,</span> <span class=\"n\">validate</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UUID</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">:</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">UUID</span>\n    <span class=\"n\">elts</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>\n    <span class=\"n\">check_sum</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"nd\">@validate</span><span class=\"p\">(</span><span class=\"s2\">\"elts\"</span><span class=\"p\">,</span> <span class=\"s2\">\"check_sum\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">elts_sum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Error</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">elts</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_sum</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"s2\">\"check_sum doesn't match elts\"</span>\n\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"c1\"># type: ignore</span>\n<span class=\"c1\"># data = {\"id\": str(uuid4()), \"elts\": [1, 2], \"check_sum\": 3} </span>\n<span class=\"n\">my_model</span> <span class=\"o\">=</span> <span class=\"n\">from_data</span><span class=\"p\">(</span><span class=\"n\">MyModel</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">camel_case</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">data2</span> <span class=\"o\">=</span> <span class=\"n\">to_data</span><span class=\"p\">(</span><span class=\"n\">MyModel</span><span class=\"p\">,</span> <span class=\"n\">my_model</span><span class=\"p\">,</span> <span class=\"n\">camel_case</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">openapi</span> <span class=\"o\">=</span> <span class=\"n\">build_schema</span><span class=\"p\">(</span><span class=\"n\">MyModel</span><span class=\"p\">,</span> <span class=\"n\">camel_case</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>A little bit more complex</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span><span class=\"p\">,</span> <span class=\"n\">field</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">TypeVar</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">,</span> <span class=\"n\">Iterator</span><span class=\"p\">,</span> <span class=\"n\">Generic</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.data</span> <span class=\"kn\">import</span> <span class=\"n\">from_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.model</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.validation</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.validator</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span><span class=\"p\">,</span> <span class=\"n\">validate</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"T\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]):</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_model</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">A</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">A</span><span class=\"p\">([</span><span class=\"n\">obj</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]]:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@validate</span>\n    <span class=\"k\">def</span> <span class=\"nf\">no_consecutive_duplicates</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Error</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">cur</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n                <span class=\"k\">yield</span> <span class=\"sa\">f</span><span class=\"s2\">\"duplicate elt </span><span class=\"si\">{</span><span class=\"n\">cur</span><span class=\"si\">}</span><span class=\"s2\"> in position </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n            <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">(</span><span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]):</span>\n    <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">default_factory</span><span class=\"o\">=</span><span class=\"n\">A</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"p\">{}))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"p\">{}))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]}))</span>\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">ValidationError</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]}))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">ValidationError</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]}))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<p>With <em>spec</em>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.data</span> <span class=\"kn\">import</span> <span class=\"n\">from_data</span><span class=\"p\">,</span> <span class=\"n\">to_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.field</span> <span class=\"kn\">import</span> <span class=\"n\">field</span>\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.model</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.schema</span> <span class=\"kn\">import</span> <span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">build_schema</span>\n<span class=\"kn\">from</span> <span class=\"nn\">apischema.spec</span> <span class=\"kn\">import</span> <span class=\"n\">NumSpec</span><span class=\"p\">,</span> <span class=\"n\">SpecClass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ShortString</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">SpecClass</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"n\">positive</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"o\">=</span><span class=\"n\">NumSpec</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"n\">short_string</span><span class=\"p\">:</span> <span class=\"n\">ShortString</span> <span class=\"o\">=</span> <span class=\"n\">ShortString</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"c1\"># data = json.load(...)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"positive\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"shortString\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ok\"</span><span class=\"p\">}</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">from_data</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">data2</span> <span class=\"o\">=</span> <span class=\"n\">to_data</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data2</span><span class=\"p\">)</span>\n\n    <span class=\"n\">openapi</span> <span class=\"o\">=</span> <span class=\"n\">build_schema</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">to_data</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">openapi</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 5673934, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b5e8d3abb6021164b2ef4a4a091bbe32", "sha256": "194e0139e193e6abe82827ad8f9e5f05fa5a199dfd38045cfdf7a12810754d16"}, "downloads": -1, "filename": "pyapischema-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b5e8d3abb6021164b2ef4a4a091bbe32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13621, "upload_time": "2019-08-13T22:28:32", "upload_time_iso_8601": "2019-08-13T22:28:32.130267Z", "url": "https://files.pythonhosted.org/packages/b6/bf/9a143570e2ba562e4539333ab7c120cbfc6f6f099db57c82443ea58e6908/pyapischema-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3477099edec9e2b029c8b9c5d9aee1eb", "sha256": "b8b4f4e6e46601b817dee988fb506d0d9821ca286c6840cc68df1b5e19d8da82"}, "downloads": -1, "filename": "pyapischema-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3477099edec9e2b029c8b9c5d9aee1eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10927, "upload_time": "2019-08-13T22:28:34", "upload_time_iso_8601": "2019-08-13T22:28:34.681909Z", "url": "https://files.pythonhosted.org/packages/33/64/c74516512a9901db1af85832851e4082ee9e15778c44d87ec1753d939fdd/pyapischema-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b5e8d3abb6021164b2ef4a4a091bbe32", "sha256": "194e0139e193e6abe82827ad8f9e5f05fa5a199dfd38045cfdf7a12810754d16"}, "downloads": -1, "filename": "pyapischema-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b5e8d3abb6021164b2ef4a4a091bbe32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13621, "upload_time": "2019-08-13T22:28:32", "upload_time_iso_8601": "2019-08-13T22:28:32.130267Z", "url": "https://files.pythonhosted.org/packages/b6/bf/9a143570e2ba562e4539333ab7c120cbfc6f6f099db57c82443ea58e6908/pyapischema-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3477099edec9e2b029c8b9c5d9aee1eb", "sha256": "b8b4f4e6e46601b817dee988fb506d0d9821ca286c6840cc68df1b5e19d8da82"}, "downloads": -1, "filename": "pyapischema-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3477099edec9e2b029c8b9c5d9aee1eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10927, "upload_time": "2019-08-13T22:28:34", "upload_time_iso_8601": "2019-08-13T22:28:34.681909Z", "url": "https://files.pythonhosted.org/packages/33/64/c74516512a9901db1af85832851e4082ee9e15778c44d87ec1753d939fdd/pyapischema-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:28 2020"}