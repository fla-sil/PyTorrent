{"info": {"author": "Marc van der Sluys", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Astronomy"], "description": "# ELP_MPP02: accurate Moon positions using the lunar solution ELP/MPP02 #\n\nCompute accurate Moon positions using the semi-analytical lunar solution ELP2000/MPP02 by Chapront & Francou\n(2003).\n\n\n## Installation ##\n\nThis package can be installed using `pip install elp-mpp02`.  You will need to manually download the six data\nfiles `ELP_MAIN/PERT.S1/2/3` from ftp://cyrano-se.obspm.fr/pub/2_lunar_solutions/2_elpmpp02 and save them in a\ndirectory of your choice.\n\n\n## Using the package ##\n\nYou can import the package as follows:\n```python\nfrom elp_mpp02 import mpp02 as mpp\n```\n\nThen, make sure you define the directory where the data files are located (if not in the current dir). \nFor the subdir `data/` of the current directory, do:\n```python\nmpp.dataDir = 'data'  # Set the dir where the ELP_*.S* data files can be found\n```\n\nChoose whether to run the code in LLR (`mode=0`; default) or DE405 (`mode=1`; 'historical') mode, select a\nJulian day and compute the Moon position for that instance:\n```python\nmode = 1  # Historical mode\njd = 2451545\nlon,lat,dist = mpp.compute_lbr(jd, mode)  \nprint('jd =',jd, ':   lon =',lon,'rad,  lat =',lat, 'rad,  dist =',dist,'km.')\n```\nThe result should be\n```\njd = 2451545 :   lon = -2.385534575256455 rad,  lat = 0.09024868423130429 rad,  dist = 402448.6385830673 km\n```\n\nThe ecliptical longitude and latitude are expressed in radians, the distance is in kilometres.  The\ncoordinates are valid for the mean equinox of J2000.  Note that on the first call, the constants must be\ninitialised and the data files need to be read, which can take ~10s.  If `mode` is changed between calls, the\ndata must be reinitialised.\n\n\n## Author and licence ##\n\n* Author: Marc van der Sluys\n* Contact: http://astro.ru.nl/~sluys/\n* Website: [Github](https://github.com/MarcvdSluys/ELP-MPP02), [Pypi](https://pypi.org/project/elp_mpp02/)\n* Licence: [GPLv3+](https://www.gnu.org/licenses/gpl.html)\n\n\n## References ##\n\n* [Chapront & Francou (2003)](https://ui.adsabs.harvard.edu/abs/2003A%26A...404..735C/abstract)\n* [FTP data files](ftp://cyrano-se.obspm.fr/pub/2_lunar_solutions/2_elpmpp02)\n* This Python code is adapted from the Fortran implementation in [libTheSky](http://libthesky.sourceforge.net/)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MarcvdSluys/ELP-MPP02", "keywords": "Moon,Astronomy,Ephemeris", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "elp-mpp02", "package_url": "https://pypi.org/project/elp-mpp02/", "platform": "", "project_url": "https://pypi.org/project/elp-mpp02/", "project_urls": {"Homepage": "https://github.com/MarcvdSluys/ELP-MPP02"}, "release_url": "https://pypi.org/project/elp-mpp02/0.0.1/", "requires_dist": ["numpy", "fortranformat"], "requires_python": "", "summary": "Accurate Moon positions using the Lunar solution ELP/MPP02", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ELP_MPP02: accurate Moon positions using the lunar solution ELP/MPP02</h1>\n<p>Compute accurate Moon positions using the semi-analytical lunar solution ELP2000/MPP02 by Chapront &amp; Francou\n(2003).</p>\n<h2>Installation</h2>\n<p>This package can be installed using <code>pip install elp-mpp02</code>.  You will need to manually download the six data\nfiles <code>ELP_MAIN/PERT.S1/2/3</code> from <a>ftp://cyrano-se.obspm.fr/pub/2_lunar_solutions/2_elpmpp02</a> and save them in a\ndirectory of your choice.</p>\n<h2>Using the package</h2>\n<p>You can import the package as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elp_mpp02</span> <span class=\"kn\">import</span> <span class=\"n\">mpp02</span> <span class=\"k\">as</span> <span class=\"n\">mpp</span>\n</pre>\n<p>Then, make sure you define the directory where the data files are located (if not in the current dir).\nFor the subdir <code>data/</code> of the current directory, do:</p>\n<pre><span class=\"n\">mpp</span><span class=\"o\">.</span><span class=\"n\">dataDir</span> <span class=\"o\">=</span> <span class=\"s1\">'data'</span>  <span class=\"c1\"># Set the dir where the ELP_*.S* data files can be found</span>\n</pre>\n<p>Choose whether to run the code in LLR (<code>mode=0</code>; default) or DE405 (<code>mode=1</code>; 'historical') mode, select a\nJulian day and compute the Moon position for that instance:</p>\n<pre><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>  <span class=\"c1\"># Historical mode</span>\n<span class=\"n\">jd</span> <span class=\"o\">=</span> <span class=\"mi\">2451545</span>\n<span class=\"n\">lon</span><span class=\"p\">,</span><span class=\"n\">lat</span><span class=\"p\">,</span><span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">mpp</span><span class=\"o\">.</span><span class=\"n\">compute_lbr</span><span class=\"p\">(</span><span class=\"n\">jd</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span>  \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'jd ='</span><span class=\"p\">,</span><span class=\"n\">jd</span><span class=\"p\">,</span> <span class=\"s1\">':   lon ='</span><span class=\"p\">,</span><span class=\"n\">lon</span><span class=\"p\">,</span><span class=\"s1\">'rad,  lat ='</span><span class=\"p\">,</span><span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"s1\">'rad,  dist ='</span><span class=\"p\">,</span><span class=\"n\">dist</span><span class=\"p\">,</span><span class=\"s1\">'km.'</span><span class=\"p\">)</span>\n</pre>\n<p>The result should be</p>\n<pre><code>jd = 2451545 :   lon = -2.385534575256455 rad,  lat = 0.09024868423130429 rad,  dist = 402448.6385830673 km\n</code></pre>\n<p>The ecliptical longitude and latitude are expressed in radians, the distance is in kilometres.  The\ncoordinates are valid for the mean equinox of J2000.  Note that on the first call, the constants must be\ninitialised and the data files need to be read, which can take ~10s.  If <code>mode</code> is changed between calls, the\ndata must be reinitialised.</p>\n<h2>Author and licence</h2>\n<ul>\n<li>Author: Marc van der Sluys</li>\n<li>Contact: <a href=\"http://astro.ru.nl/%7Esluys/\" rel=\"nofollow\">http://astro.ru.nl/~sluys/</a></li>\n<li>Website: <a href=\"https://github.com/MarcvdSluys/ELP-MPP02\" rel=\"nofollow\">Github</a>, <a href=\"https://pypi.org/project/elp_mpp02/\" rel=\"nofollow\">Pypi</a></li>\n<li>Licence: <a href=\"https://www.gnu.org/licenses/gpl.html\" rel=\"nofollow\">GPLv3+</a></li>\n</ul>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://ui.adsabs.harvard.edu/abs/2003A%26A...404..735C/abstract\" rel=\"nofollow\">Chapront &amp; Francou (2003)</a></li>\n<li><a>FTP data files</a></li>\n<li>This Python code is adapted from the Fortran implementation in <a href=\"http://libthesky.sourceforge.net/\" rel=\"nofollow\">libTheSky</a></li>\n</ul>\n\n          </div>"}, "last_serial": 5222239, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "264e5b54305213871162a221a261eb99", "sha256": "21381138d513dfc9e1d57b0033b79fefecd245a60ebe922cc1d0768a05c35428"}, "downloads": -1, "filename": "elp_mpp02-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "264e5b54305213871162a221a261eb99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22456, "upload_time": "2019-05-03T14:50:03", "upload_time_iso_8601": "2019-05-03T14:50:03.074504Z", "url": "https://files.pythonhosted.org/packages/7b/34/f661d808dbc66128177ed1358d3db41ae73cbc30bdc3f98c8de8993caa64/elp_mpp02-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dadea656f5c0f635b48d05313ddc8c0f", "sha256": "e9c7de036931c5624bfcfabbf33714ccc8624a704f6ecf73ccdd8808316ab66e"}, "downloads": -1, "filename": "elp-mpp02-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dadea656f5c0f635b48d05313ddc8c0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10379, "upload_time": "2019-05-03T14:50:05", "upload_time_iso_8601": "2019-05-03T14:50:05.529912Z", "url": "https://files.pythonhosted.org/packages/db/ca/c01f4ccb6d821da162ffec714e5e7f680f869e1d1160a338687d4603443d/elp-mpp02-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "264e5b54305213871162a221a261eb99", "sha256": "21381138d513dfc9e1d57b0033b79fefecd245a60ebe922cc1d0768a05c35428"}, "downloads": -1, "filename": "elp_mpp02-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "264e5b54305213871162a221a261eb99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22456, "upload_time": "2019-05-03T14:50:03", "upload_time_iso_8601": "2019-05-03T14:50:03.074504Z", "url": "https://files.pythonhosted.org/packages/7b/34/f661d808dbc66128177ed1358d3db41ae73cbc30bdc3f98c8de8993caa64/elp_mpp02-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dadea656f5c0f635b48d05313ddc8c0f", "sha256": "e9c7de036931c5624bfcfabbf33714ccc8624a704f6ecf73ccdd8808316ab66e"}, "downloads": -1, "filename": "elp-mpp02-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dadea656f5c0f635b48d05313ddc8c0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10379, "upload_time": "2019-05-03T14:50:05", "upload_time_iso_8601": "2019-05-03T14:50:05.529912Z", "url": "https://files.pythonhosted.org/packages/db/ca/c01f4ccb6d821da162ffec714e5e7f680f869e1d1160a338687d4603443d/elp-mpp02-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:46 2020"}