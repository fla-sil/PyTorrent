{"info": {"author": "Reinout van Rees", "author_email": "reinout@vanrees.org", "bugtrack_url": null, "classifiers": [], "description": "Github test commit reports for teams\n==========================================\n\n.. image:: https://travis-ci.org/nens/githubinfo.png?branch=master\n   :target: https://travis-ci.org/nens/githubinfo\n\nGithubinfo is a script that queries the github API of one or more\norganizations and gives you a quick report on the amount of commits **with\ntests** in the last week.\n\nIt is adjustable, of course, which is necessary as I put some company defaults\nin there :-)\n\nIt is just a simple single command and the output looks like this::\n\n    $ testcommitinfo\n    loading project neerslagradar-site\n    loading project ...\n    ...\n\n    We want more and better testing. For a quick and dirty quantity\n    indication ('more'), here are the commits that have the string\n    'test' in of of the commit's touched filenames.\n\n    Period: 8 days.\n    Github organizations that I queried: ddsc, lizardsystem, nens\n\n    Projects sorted by amount of commits with tests\n    -----------------------------------------------\n\n    lizard-neerslagradar: 11 (25%)\n    lizard-progress: 3 (9%)\n    radar: 1 (33%)\n    ...\n\n    Committers sorted by amount of commits with tests\n    -------------------------------------------------\n\n    Reinout van Rees: 12 (11%)\n    Remco Gerlich: 3 (6%)\n    Arjan Verkerk: 2 (8%)\n    ...\n\nYou can pass ``-h`` or ``--help`` to get usage information, for instance on\nhow to increase the log level or on how to get the version number.\n\n\nGoal\n----\n\nI wrote it because we wanted to improve our development process at `Nelen &\nSchuurmans <http://www.nelen-schuurmans.nl>`_. We wanted more tests. So I\nwrote a script:\n\n- It queries the github API for one or more organizations (or personal\n  accounts).\n\n- It queries the projects in there for commmits in the last week\n  (configurable).\n\n- For every commit, it simply looks if there's a filename in the commit with\n  ``test`` in its full path. If so, the commit counts as a \"test commit\".\n\n- For every project, it counts the number of commits and the number of test\n  commits.\n\n- The same for every committer.\n\nAt the end, you get a list of projects and committers sorted by number of\ncommits.\n\n\nRisk: you get what you measure\n------------------------------\n\nThe metric is incomplete and imprecise. The same people that start grabbing\ntheir torches and pitchforks when someone mentions \"code coverage\" will start\ngrabbing them now. My answer: bugger off.\n\n- You identify colleagues that never ever bother to test. You get to educate\n  them. Can I borrow that pitchfork, please?\n\n- You identify projects that have improved in quality.\n\n- You identify projects that were obviously troubled by a deadline and that\n  might bite you later on if you have to use them yourself.\n\n- You identify colleagues that bring quality to your project if you work with\n  them.\n\nThere are a lot of things you don't measure. But someone who doesn't bother\nwith tests also isn't going to bother adding a whiteline somewhere in a test\nfile to get at least some test commit credited to his name :-)\n\n\nConfiguration\n-------------\n\nHere are the default settings, obviously very my-company-centric::\n\n    SETTINGS = {\n        'auth': None,  # Set it to ['username', 'very_secret'].\n        'days': 7,\n        'organizations': [\n            'ddsc',\n            'lizardsystem',\n            'nens',\n            ],\n        'extra_projects': [\n            # ('organization', 'project'),\n            ('reinout', 'buildout'),\n            ('reinout', 'django-rest-framework'),\n            ('reinout', 'serverinfo'),\n            ('reinout', 'z3c.dependencychecker'),\n            ('rvanlaar', 'djangorecipe'),\n            ('zestsoftware', 'zest.releaser'),\n            ],\n        }\n\nTo customize it, add a ``settings.json`` file in your working\ndirectory. Whatever you put in there is used to override the default\n``SETTINGS`` dictionary. Make sure it is properly json-formatted, so with\ndouble quotes around strings. Something like this::\n\n    {\"auth\": [\"reinout\", \"nogal_geheim\"],\n     \"days\": 8,\n     \"organizations\": [\"lizardsystem\"],\n     \"extra_projects\": []}\n\nauth\n    username/password list. For when you need access to some private\n    projects. Note that you also get a much higher API usage limit when you're\n    logged in.\n\ndays\n    Number of days to report on. By default a week.\n\norganizations\n    List of github organizations or personal accounts to query. This is the\n    first part after ``github.com`` in URLs like\n    ``https://github.com/organization/project``.\n\nextra_projects\n    Optional list of ``[\"organization\", \"project\"]`` lists. For those handful\n    of extra projects outside of your organization that one or more colleagues\n    do a lot of work on and that are essential to you. I'm listing zc.buildout\n    and zest.releaser in here, for instance.\n\n    Note that only the committers that committed to your own organization get\n    counted for these extra_projects. This way the list doesn't get polluted.\n\nTo verify your settings, you can call ``testcommitinfo --show-config`` which\nwill print the configuration as testcommitinfo sees it.\n\n\nIntegration with your own systems\n---------------------------------\n\nPerhaps you want to include the output in some dashboard? Or you want to\ngenerate a nice HTML out of it?\n\nFor those use cases, you can export a JSON file with the collected project and\nuser information. Pass a JSON filename with the ``--json-output`` commandline\noption and you'll have everything you need.\n\n\nProblems?\n---------\n\nSometimes the github API fails intermittently. There are some \"try it a second\ntime\" if/elses in the code which work around most of the issues. Every time I\ndiscover an additional problem, I add some code to work around it.\n\nSo if you've got a problem, you could just try running it a second time, most\noften that works just fine.\n\nIf you've got a real bug, you could ask me (`reinout@vanrees.org\n<mailto:reinout@vanrees.org>`_) to take a look. Or, better, submit a issue on\nhttps://github.com/nens/githubinfo/issues . Or, even better, try to fix it in\na pull request.\n\n\nCredits\n=======\n\n- `Reinout van Rees <http://reinout.vanrees.org>`_ started this program.\n\n\nChangelog of githubinfo\n===================================================\n\n\n1.1 (2013-04-02)\n----------------\n\n- Added optional export of the results to a JSON file. Useful if you want to\n  format the output yourself, for instance to create a HTML page.\n\n- Added argument parsing via argparse. **Warning**: this requires python 2.7\n  at a minimum. I guess that's not a problem. At least ``-h`` now gives a\n  proper usage message!\n\n- Added ``githubinfo.__version__`` attribute.\n\n\n1.0.1 (2013-04-02)\n------------------\n\n- Small README fix: quote error in example config file. Thanks Maximilien\n  Riehl for noticing it!\n\n\n1.0 (2013-04-01)\n----------------\n\n- Added proper documentation and usage instructions to the README.\n\n- Detecting doctests, too. For ``.rst`` and ``.txt`` files, we search for\n  ``>>>`` in the commit's patch, that's a pretty good indication of a doctest\n  commit. I needed this for detecting my well-tested commits in zc.buildout.\n\n- Loading commits from branches, too.\n\n- Added option for extra projects outside of the main ones. Commits in here\n  are only counted if they're from committers to our main organizations.\n\n- Extracting test commit info from github organizations.\n\n- Initial project structure created with nensskel 1.30.dev0.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nens/githubinfo", "keywords": null, "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "githubinfo", "package_url": "https://pypi.org/project/githubinfo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/githubinfo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/nens/githubinfo"}, "release_url": "https://pypi.org/project/githubinfo/1.1/", "requires_dist": null, "requires_python": null, "summary": "Extract test-related commit info from github", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"github-test-commit-reports-for-teams\">\n<h2>Github test commit reports for teams</h2>\n<a href=\"https://travis-ci.org/nens/githubinfo\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/nens/githubinfo.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2255d4dcb317c3d95d5e266bc8bf202e8720228/68747470733a2f2f7472617669732d63692e6f72672f6e656e732f676974687562696e666f2e706e673f6272616e63683d6d6173746572\"></a>\n<p>Githubinfo is a script that queries the github API of one or more\norganizations and gives you a quick report on the amount of commits <strong>with\ntests</strong> in the last week.</p>\n<p>It is adjustable, of course, which is necessary as I put some company defaults\nin there :-)</p>\n<p>It is just a simple single command and the output looks like this:</p>\n<pre>$ testcommitinfo\nloading project neerslagradar-site\nloading project ...\n...\n\nWe want more and better testing. For a quick and dirty quantity\nindication ('more'), here are the commits that have the string\n'test' in of of the commit's touched filenames.\n\nPeriod: 8 days.\nGithub organizations that I queried: ddsc, lizardsystem, nens\n\nProjects sorted by amount of commits with tests\n-----------------------------------------------\n\nlizard-neerslagradar: 11 (25%)\nlizard-progress: 3 (9%)\nradar: 1 (33%)\n...\n\nCommitters sorted by amount of commits with tests\n-------------------------------------------------\n\nReinout van Rees: 12 (11%)\nRemco Gerlich: 3 (6%)\nArjan Verkerk: 2 (8%)\n...\n</pre>\n<p>You can pass <tt><span class=\"pre\">-h</span></tt> or <tt><span class=\"pre\">--help</span></tt> to get usage information, for instance on\nhow to increase the log level or on how to get the version number.</p>\n<div id=\"goal\">\n<h3>Goal</h3>\n<p>I wrote it because we wanted to improve our development process at <a href=\"http://www.nelen-schuurmans.nl\" rel=\"nofollow\">Nelen &amp;\nSchuurmans</a>. We wanted more tests. So I\nwrote a script:</p>\n<ul>\n<li>It queries the github API for one or more organizations (or personal\naccounts).</li>\n<li>It queries the projects in there for commmits in the last week\n(configurable).</li>\n<li>For every commit, it simply looks if there\u2019s a filename in the commit with\n<tt>test</tt> in its full path. If so, the commit counts as a \u201ctest commit\u201d.</li>\n<li>For every project, it counts the number of commits and the number of test\ncommits.</li>\n<li>The same for every committer.</li>\n</ul>\n<p>At the end, you get a list of projects and committers sorted by number of\ncommits.</p>\n</div>\n<div id=\"risk-you-get-what-you-measure\">\n<h3>Risk: you get what you measure</h3>\n<p>The metric is incomplete and imprecise. The same people that start grabbing\ntheir torches and pitchforks when someone mentions \u201ccode coverage\u201d will start\ngrabbing them now. My answer: bugger off.</p>\n<ul>\n<li>You identify colleagues that never ever bother to test. You get to educate\nthem. Can I borrow that pitchfork, please?</li>\n<li>You identify projects that have improved in quality.</li>\n<li>You identify projects that were obviously troubled by a deadline and that\nmight bite you later on if you have to use them yourself.</li>\n<li>You identify colleagues that bring quality to your project if you work with\nthem.</li>\n</ul>\n<p>There are a lot of things you don\u2019t measure. But someone who doesn\u2019t bother\nwith tests also isn\u2019t going to bother adding a whiteline somewhere in a test\nfile to get at least some test commit credited to his name :-)</p>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>Here are the default settings, obviously very my-company-centric:</p>\n<pre>SETTINGS = {\n    'auth': None,  # Set it to ['username', 'very_secret'].\n    'days': 7,\n    'organizations': [\n        'ddsc',\n        'lizardsystem',\n        'nens',\n        ],\n    'extra_projects': [\n        # ('organization', 'project'),\n        ('reinout', 'buildout'),\n        ('reinout', 'django-rest-framework'),\n        ('reinout', 'serverinfo'),\n        ('reinout', 'z3c.dependencychecker'),\n        ('rvanlaar', 'djangorecipe'),\n        ('zestsoftware', 'zest.releaser'),\n        ],\n    }\n</pre>\n<p>To customize it, add a <tt>settings.json</tt> file in your working\ndirectory. Whatever you put in there is used to override the default\n<tt>SETTINGS</tt> dictionary. Make sure it is properly json-formatted, so with\ndouble quotes around strings. Something like this:</p>\n<pre>{\"auth\": [\"reinout\", \"nogal_geheim\"],\n \"days\": 8,\n \"organizations\": [\"lizardsystem\"],\n \"extra_projects\": []}\n</pre>\n<dl>\n<dt>auth</dt>\n<dd>username/password list. For when you need access to some private\nprojects. Note that you also get a much higher API usage limit when you\u2019re\nlogged in.</dd>\n<dt>days</dt>\n<dd>Number of days to report on. By default a week.</dd>\n<dt>organizations</dt>\n<dd>List of github organizations or personal accounts to query. This is the\nfirst part after <tt>github.com</tt> in URLs like\n<tt><span class=\"pre\">https://github.com/organization/project</span></tt>.</dd>\n<dt>extra_projects</dt>\n<dd><p>Optional list of <tt>[\"organization\", \"project\"]</tt> lists. For those handful\nof extra projects outside of your organization that one or more colleagues\ndo a lot of work on and that are essential to you. I\u2019m listing zc.buildout\nand zest.releaser in here, for instance.</p>\n<p>Note that only the committers that committed to your own organization get\ncounted for these extra_projects. This way the list doesn\u2019t get polluted.</p>\n</dd>\n</dl>\n<p>To verify your settings, you can call <tt>testcommitinfo <span class=\"pre\">--show-config</span></tt> which\nwill print the configuration as testcommitinfo sees it.</p>\n</div>\n<div id=\"integration-with-your-own-systems\">\n<h3>Integration with your own systems</h3>\n<p>Perhaps you want to include the output in some dashboard? Or you want to\ngenerate a nice HTML out of it?</p>\n<p>For those use cases, you can export a JSON file with the collected project and\nuser information. Pass a JSON filename with the <tt><span class=\"pre\">--json-output</span></tt> commandline\noption and you\u2019ll have everything you need.</p>\n</div>\n<div id=\"problems\">\n<h3>Problems?</h3>\n<p>Sometimes the github API fails intermittently. There are some \u201ctry it a second\ntime\u201d if/elses in the code which work around most of the issues. Every time I\ndiscover an additional problem, I add some code to work around it.</p>\n<p>So if you\u2019ve got a problem, you could just try running it a second time, most\noften that works just fine.</p>\n<p>If you\u2019ve got a real bug, you could ask me (<a href=\"mailto:reinout%40vanrees.org\">reinout<span>@</span>vanrees<span>.</span>org</a>) to take a look. Or, better, submit a issue on\n<a href=\"https://github.com/nens/githubinfo/issues\" rel=\"nofollow\">https://github.com/nens/githubinfo/issues</a> . Or, even better, try to fix it in\na pull request.</p>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<ul>\n<li><a href=\"http://reinout.vanrees.org\" rel=\"nofollow\">Reinout van Rees</a> started this program.</li>\n</ul>\n</div>\n<div id=\"changelog-of-githubinfo\">\n<h2>Changelog of githubinfo</h2>\n<div id=\"id1\">\n<h3>1.1 (2013-04-02)</h3>\n<ul>\n<li>Added optional export of the results to a JSON file. Useful if you want to\nformat the output yourself, for instance to create a HTML page.</li>\n<li>Added argument parsing via argparse. <strong>Warning</strong>: this requires python 2.7\nat a minimum. I guess that\u2019s not a problem. At least <tt><span class=\"pre\">-h</span></tt> now gives a\nproper usage message!</li>\n<li>Added <tt>githubinfo.__version__</tt> attribute.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.1 (2013-04-02)</h3>\n<ul>\n<li>Small README fix: quote error in example config file. Thanks Maximilien\nRiehl for noticing it!</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0 (2013-04-01)</h3>\n<ul>\n<li>Added proper documentation and usage instructions to the README.</li>\n<li>Detecting doctests, too. For <tt>.rst</tt> and <tt>.txt</tt> files, we search for\n<tt>&gt;&gt;&gt;</tt> in the commit\u2019s patch, that\u2019s a pretty good indication of a doctest\ncommit. I needed this for detecting my well-tested commits in zc.buildout.</li>\n<li>Loading commits from branches, too.</li>\n<li>Added option for extra projects outside of the main ones. Commits in here\nare only counted if they\u2019re from committers to our main organizations.</li>\n<li>Extracting test commit info from github organizations.</li>\n<li>Initial project structure created with nensskel 1.30.dev0.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 732304, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "44e666c70fa1efbeb1a9fb958526ef2c", "sha256": "6ec225a7ae419b58db885c3c112477c372b9faa940dea80161c8fd6eb1c52f2e"}, "downloads": -1, "filename": "githubinfo-1.0.zip", "has_sig": false, "md5_digest": "44e666c70fa1efbeb1a9fb958526ef2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29651, "upload_time": "2013-04-01T10:36:04", "upload_time_iso_8601": "2013-04-01T10:36:04.552410Z", "url": "https://files.pythonhosted.org/packages/3b/3f/0f9de2dc936aeecb59d592c01557d3ce00563a6f7b2aebd988eb2d47e853/githubinfo-1.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5215881fc68a798b1b50c443905929b2", "sha256": "f5e37ec3b8de78ac980e3c4ca0dae1bff7178db5af09a7f413e5fe88760e97b9"}, "downloads": -1, "filename": "githubinfo-1.0.1.zip", "has_sig": false, "md5_digest": "5215881fc68a798b1b50c443905929b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29938, "upload_time": "2013-04-02T09:35:50", "upload_time_iso_8601": "2013-04-02T09:35:50.663635Z", "url": "https://files.pythonhosted.org/packages/7f/4f/bfc281bc9a92d6bcd0727ea4fbe5325cb7fb69d6a2aefa916fec48918caa/githubinfo-1.0.1.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "8cf4b480993897a98af5c6a74f09eda6", "sha256": "cbbfa730d605be136a73f09b88295dce94b139e6080a7def042dd346f073d28f"}, "downloads": -1, "filename": "githubinfo-1.1.zip", "has_sig": false, "md5_digest": "8cf4b480993897a98af5c6a74f09eda6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32354, "upload_time": "2013-04-02T12:10:22", "upload_time_iso_8601": "2013-04-02T12:10:22.401504Z", "url": "https://files.pythonhosted.org/packages/8e/be/f85f59e503a9dbc63fb64ad27a19697ca04e42a173e83e8b8cc267ba34fe/githubinfo-1.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8cf4b480993897a98af5c6a74f09eda6", "sha256": "cbbfa730d605be136a73f09b88295dce94b139e6080a7def042dd346f073d28f"}, "downloads": -1, "filename": "githubinfo-1.1.zip", "has_sig": false, "md5_digest": "8cf4b480993897a98af5c6a74f09eda6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32354, "upload_time": "2013-04-02T12:10:22", "upload_time_iso_8601": "2013-04-02T12:10:22.401504Z", "url": "https://files.pythonhosted.org/packages/8e/be/f85f59e503a9dbc63fb64ad27a19697ca04e42a173e83e8b8cc267ba34fe/githubinfo-1.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:57:00 2020"}