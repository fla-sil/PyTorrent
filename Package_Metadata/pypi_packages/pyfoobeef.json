{"info": {"author": "Adam Krueger", "author_email": "adamkru@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "=========\npyfoobeef\n=========\n\nAllows control of the Foobar2000 and DeaDBeeF media players through the `beefweb <https://github.com/hyperblast/beefweb>`_ plugin API.\n\n* Both asynchronous and synchronous clients\n* An asynchronous event listener with callbacks\n* For Python 3.6 and up\n* MIT License\n\n\nInstallation\n------------\n1. Install and configure the `beefweb <https://github.com/hyperblast/beefweb>`_ plugin for your media player.\n\n2. Run::\n\n    pip install pyfoobeef\n\n\nDocumentation\n-------------\n\nDocumentation available at https://pyfoobeef.readthedocs.io/en/latest/\n\n\nExamples\n--------\nSynchronous client:\n\n.. code-block:: python\n\n    import pyfoobeef\n    from time import sleep\n\n\n    player = pyfoobeef.Client(\"localhost\", 8880)\n\n    # Add a new playlist.\n    new_playlist = player.add_playlist(title=\"My New Playlist\")\n    player.set_current_playlist(new_playlist)\n\n    # Add items to the playlist.  Note that paths including drive letters\n    # are case sensitive even on Windows due to limitations of the beefweb\n    # plugin (so r\"c:\\Music\" would not work here).\n    player.add_playlist_items(new_playlist, items=[r\"C:\\Music\"])\n\n    player.play_specific(new_playlist, 1)\n    # Give the media player a bit of time to actually start playing.\n    sleep(0.5)\n\n    # Column maps represent the media data fields to retrieve and the names\n    # to assign the returned data to.\n    column_map = {\n        \"%artist%\": \"artist\",\n        \"%title%\": \"title\",\n        \"%album% - %track number% - %title%\": \"my_custom_column\",\n    }\n    status = player.get_player_state(column_map)\n\n    if status.active_item.has_columns():\n        # Returned columns may be addressed by subscripting or as attributes.\n        print(status.active_item.columns[\"artist\"])\n        print(status.active_item.columns.title)\n        print(status.active_item.columns.my_custom_column)\n\n    # Display the playback state (ex. \"playing\")\n    print(status.playback_state)\n\n    # Display information about the volume level (current, min, max, etc.)\n    print(status.volume)\n\n\nThe asynchronous client follows a very similar format:\n\n.. code-block:: python\n\n    import pyfoobeef\n    import asyncio\n\n\n    async def example():\n        player = pyfoobeef.AsyncClient(\"localhost\", 8880)\n\n        # Add a new playlist.\n        new_playlist = await player.add_playlist(title=\"My New Playlist\")\n        await player.set_current_playlist(new_playlist)\n\n        # Add items to the playlist.  Note that paths including drive letters\n        # are case sensitive even on Windows due to limitations of the beefweb\n        # plugin (so r\"c:\\Music\" would not work here).\n        await player.add_playlist_items(new_playlist, items=[r\"C:\\Music\"])\n\n        # sort items by length\n        await player.sort_playlist_items(new_playlist, by=\"%length_seconds%\")\n\n        # Get information about the first 10 items in a playlist.\n        items = await player.get_playlist_items(\n            new_playlist,\n            column_map=[\"%artist%\", \"%title%\", \"%length%\"],\n            offset=0,\n            count=10,\n        )\n        for item in items:\n            print(item)\n\n        # Play a specific item.\n        await player.play_specific(new_playlist, 4)\n\n\n    asyncio.run(example())\n\n\nThe asynchronous event listener can automatically execute callbacks when certain events are received or the media players state can be determined from the EventListener object's attributes:\n\n.. code-block:: python\n\n    import pyfoobeef\n    import asyncio\n\n\n    def print_active_item(state):\n        print(\"From player state callback.  Active item is:\")\n        print(state.active_item)\n\n\n    def print_playlists(playlists):\n        print(\"From playlists callback.  Current playlists:\")\n        for playlist in playlists:\n            print(playlist)\n\n\n    async def example():\n        listener = pyfoobeef.EventListener(\n            base_url=\"localhost\",\n            port=8880,\n            active_item_column_map={\n                \"%artist%\": \"artist\",\n                \"%title%\": \"title\",\n                \"%length%\": \"length\",\n            },\n        )\n\n        # Add callbacks for player events.\n        listener.add_callback(\"player_state\", print_active_item)\n        listener.add_callback(\"playlists\", print_playlists)\n\n        # Start listening for events from the player.\n        await listener.connect(reconnect_time=1)\n\n        await asyncio.sleep(10)\n\n        # The last received information about the player state and playlists\n        # can be accessed from the listener object itself.\n        print(\"From the last player state object saved to listener.\"\n              \"  Active item is:\")\n        print(listener.player_state.active_item)\n        print(\"Estimated playback position: \",\n              listener.player_state.estimated_position_mmss())\n        for playlist in listener.playlists:\n            print(playlist)\n\n        await asyncio.sleep(10)\n\n        # The listener should always be disconnected when done.\n        await listener.disconnect()\n\n\n    asyncio.run(example())\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Ada-Kru/pyfoobeef", "keywords": "Foobar2000 DeaDBeeF Media Player Beefweb Music Audio", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyfoobeef", "package_url": "https://pypi.org/project/pyfoobeef/", "platform": "", "project_url": "https://pypi.org/project/pyfoobeef/", "project_urls": {"Homepage": "https://github.com/Ada-Kru/pyfoobeef"}, "release_url": "https://pypi.org/project/pyfoobeef/0.9.0.4/", "requires_dist": ["urllib3", "aiohttp (>=3)", "aiohttp-sse-client"], "requires_python": ">=3.6", "summary": "Allows control of the Foobar2000 and DeaDBeeF media players in Python through the beefweb plugin.", "version": "0.9.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Allows control of the Foobar2000 and DeaDBeeF media players through the <a href=\"https://github.com/hyperblast/beefweb\" rel=\"nofollow\">beefweb</a> plugin API.</p>\n<ul>\n<li>Both asynchronous and synchronous clients</li>\n<li>An asynchronous event listener with callbacks</li>\n<li>For Python 3.6 and up</li>\n<li>MIT License</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Install and configure the <a href=\"https://github.com/hyperblast/beefweb\" rel=\"nofollow\">beefweb</a> plugin for your media player.</p>\n</li>\n<li><p>Run:</p>\n<pre>pip install pyfoobeef\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation available at <a href=\"https://pyfoobeef.readthedocs.io/en/latest/\" rel=\"nofollow\">https://pyfoobeef.readthedocs.io/en/latest/</a></p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Synchronous client:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyfoobeef</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n\n<span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"n\">pyfoobeef</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"mi\">8880</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add a new playlist.</span>\n<span class=\"n\">new_playlist</span> <span class=\"o\">=</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">add_playlist</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"My New Playlist\"</span><span class=\"p\">)</span>\n<span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">set_current_playlist</span><span class=\"p\">(</span><span class=\"n\">new_playlist</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add items to the playlist.  Note that paths including drive letters</span>\n<span class=\"c1\"># are case sensitive even on Windows due to limitations of the beefweb</span>\n<span class=\"c1\"># plugin (so r\"c:\\Music\" would not work here).</span>\n<span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">add_playlist_items</span><span class=\"p\">(</span><span class=\"n\">new_playlist</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">r</span><span class=\"s2\">\"C:\\Music\"</span><span class=\"p\">])</span>\n\n<span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">play_specific</span><span class=\"p\">(</span><span class=\"n\">new_playlist</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># Give the media player a bit of time to actually start playing.</span>\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Column maps represent the media data fields to retrieve and the names</span>\n<span class=\"c1\"># to assign the returned data to.</span>\n<span class=\"n\">column_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"</span><span class=\"si\">%a</span><span class=\"s2\">rtist%\"</span><span class=\"p\">:</span> <span class=\"s2\">\"artist\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"%title%\"</span><span class=\"p\">:</span> <span class=\"s2\">\"title\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"</span><span class=\"si\">%a</span><span class=\"s2\">lbum</span><span class=\"si\">% - %</span><span class=\"s2\">track number</span><span class=\"si\">% - %</span><span class=\"s2\">title%\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my_custom_column\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">get_player_state</span><span class=\"p\">(</span><span class=\"n\">column_map</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">active_item</span><span class=\"o\">.</span><span class=\"n\">has_columns</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Returned columns may be addressed by subscripting or as attributes.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">active_item</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">[</span><span class=\"s2\">\"artist\"</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">active_item</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">active_item</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"o\">.</span><span class=\"n\">my_custom_column</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Display the playback state (ex. \"playing\")</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">playback_state</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Display information about the volume level (current, min, max, etc.)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">volume</span><span class=\"p\">)</span>\n</pre>\n<p>The asynchronous client follows a very similar format:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyfoobeef</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"n\">pyfoobeef</span><span class=\"o\">.</span><span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"mi\">8880</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Add a new playlist.</span>\n    <span class=\"n\">new_playlist</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">add_playlist</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"My New Playlist\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">set_current_playlist</span><span class=\"p\">(</span><span class=\"n\">new_playlist</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Add items to the playlist.  Note that paths including drive letters</span>\n    <span class=\"c1\"># are case sensitive even on Windows due to limitations of the beefweb</span>\n    <span class=\"c1\"># plugin (so r\"c:\\Music\" would not work here).</span>\n    <span class=\"k\">await</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">add_playlist_items</span><span class=\"p\">(</span><span class=\"n\">new_playlist</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">r</span><span class=\"s2\">\"C:\\Music\"</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># sort items by length</span>\n    <span class=\"k\">await</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">sort_playlist_items</span><span class=\"p\">(</span><span class=\"n\">new_playlist</span><span class=\"p\">,</span> <span class=\"n\">by</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">%le</span><span class=\"s2\">ngth_seconds%\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Get information about the first 10 items in a playlist.</span>\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">get_playlist_items</span><span class=\"p\">(</span>\n        <span class=\"n\">new_playlist</span><span class=\"p\">,</span>\n        <span class=\"n\">column_map</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"</span><span class=\"si\">%a</span><span class=\"s2\">rtist%\"</span><span class=\"p\">,</span> <span class=\"s2\">\"%title%\"</span><span class=\"p\">,</span> <span class=\"s2\">\"</span><span class=\"si\">%le</span><span class=\"s2\">ngth%\"</span><span class=\"p\">],</span>\n        <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Play a specific item.</span>\n    <span class=\"k\">await</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">play_specific</span><span class=\"p\">(</span><span class=\"n\">new_playlist</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"p\">())</span>\n</pre>\n<p>The asynchronous event listener can automatically execute callbacks when certain events are received or the media players state can be determined from the EventListener object\u2019s attributes:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyfoobeef</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_active_item</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"From player state callback.  Active item is:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">active_item</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">print_playlists</span><span class=\"p\">(</span><span class=\"n\">playlists</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"From playlists callback.  Current playlists:\"</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">playlist</span> <span class=\"ow\">in</span> <span class=\"n\">playlists</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"n\">pyfoobeef</span><span class=\"o\">.</span><span class=\"n\">EventListener</span><span class=\"p\">(</span>\n        <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8880</span><span class=\"p\">,</span>\n        <span class=\"n\">active_item_column_map</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s2\">\"</span><span class=\"si\">%a</span><span class=\"s2\">rtist%\"</span><span class=\"p\">:</span> <span class=\"s2\">\"artist\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"%title%\"</span><span class=\"p\">:</span> <span class=\"s2\">\"title\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"</span><span class=\"si\">%le</span><span class=\"s2\">ngth%\"</span><span class=\"p\">:</span> <span class=\"s2\">\"length\"</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Add callbacks for player events.</span>\n    <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">add_callback</span><span class=\"p\">(</span><span class=\"s2\">\"player_state\"</span><span class=\"p\">,</span> <span class=\"n\">print_active_item</span><span class=\"p\">)</span>\n    <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">add_callback</span><span class=\"p\">(</span><span class=\"s2\">\"playlists\"</span><span class=\"p\">,</span> <span class=\"n\">print_playlists</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Start listening for events from the player.</span>\n    <span class=\"k\">await</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">reconnect_time</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The last received information about the player state and playlists</span>\n    <span class=\"c1\"># can be accessed from the listener object itself.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"From the last player state object saved to listener.\"</span>\n          <span class=\"s2\">\"  Active item is:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">player_state</span><span class=\"o\">.</span><span class=\"n\">active_item</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Estimated playback position: \"</span><span class=\"p\">,</span>\n          <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">player_state</span><span class=\"o\">.</span><span class=\"n\">estimated_position_mmss</span><span class=\"p\">())</span>\n    <span class=\"k\">for</span> <span class=\"n\">playlist</span> <span class=\"ow\">in</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">playlists</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The listener should always be disconnected when done.</span>\n    <span class=\"k\">await</span> <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"p\">())</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5863042, "releases": {"0.9.0.1": [{"comment_text": "", "digests": {"md5": "c45138496e08064d87d0012c23e6132f", "sha256": "e36f7120f75a2218f18b7c212672c6103008e28c5fe1901cb2281390bde8ecc6"}, "downloads": -1, "filename": "pyfoobeef-0.9.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c45138496e08064d87d0012c23e6132f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23356, "upload_time": "2019-09-14T21:55:09", "upload_time_iso_8601": "2019-09-14T21:55:09.953669Z", "url": "https://files.pythonhosted.org/packages/52/3e/307253057d601df46a050e47058683bd7a25114b507d72f2399f01e184ff/pyfoobeef-0.9.0.1-py3-none-any.whl", "yanked": false}], "0.9.0.2": [{"comment_text": "", "digests": {"md5": "e3ffe794348db2b6eda96f17d68ecbc2", "sha256": "799c77308713bc381003355d2fe86ff3b5a1d52f84c3fde637f0c9880cdb7070"}, "downloads": -1, "filename": "pyfoobeef-0.9.0.2post1-py3-none-any.whl", "has_sig": false, "md5_digest": "e3ffe794348db2b6eda96f17d68ecbc2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24052, "upload_time": "2019-09-15T20:15:05", "upload_time_iso_8601": "2019-09-15T20:15:05.835097Z", "url": "https://files.pythonhosted.org/packages/f7/3d/d151184d93debe8f2c690b7832f59a4cc51c2824e381875cfee006a397d5/pyfoobeef-0.9.0.2post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87953f2d8dafaf3613891b6c28fe13bc", "sha256": "fca8b2501f815a3419d030dbd59feefa91a92525877dac1818f3493f26a8ad78"}, "downloads": -1, "filename": "pyfoobeef-0.9.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "87953f2d8dafaf3613891b6c28fe13bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23511, "upload_time": "2019-09-14T23:28:22", "upload_time_iso_8601": "2019-09-14T23:28:22.819331Z", "url": "https://files.pythonhosted.org/packages/c6/37/3786ef421570c23d6dbffe67541443560effa0deaee6f1dfb0cf24a2701e/pyfoobeef-0.9.0.2-py3-none-any.whl", "yanked": false}], "0.9.0.3": [{"comment_text": "", "digests": {"md5": "489fa434386691afc6c788cf0cc61076", "sha256": "9535efcf4e9b6f723f6578ea5b606852a67a2af52c88ef1ae8709288e7199c42"}, "downloads": -1, "filename": "pyfoobeef-0.9.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "489fa434386691afc6c788cf0cc61076", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24052, "upload_time": "2019-09-15T20:20:48", "upload_time_iso_8601": "2019-09-15T20:20:48.473061Z", "url": "https://files.pythonhosted.org/packages/ef/a3/96d155b0afb812150d0403f5022f816126f06e2de87a3f55813381ac0499/pyfoobeef-0.9.0.3-py3-none-any.whl", "yanked": false}], "0.9.0.4": [{"comment_text": "", "digests": {"md5": "3d46c5d706d1a022aa7db256a273d60b", "sha256": "4f0bb182a80da46d2385875858f210b83cc14607c020a25e9813a697fcbf6688"}, "downloads": -1, "filename": "pyfoobeef-0.9.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3d46c5d706d1a022aa7db256a273d60b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24174, "upload_time": "2019-09-15T20:47:48", "upload_time_iso_8601": "2019-09-15T20:47:48.124588Z", "url": "https://files.pythonhosted.org/packages/df/9d/6fdbd705963bf42a1b137ee9aad33067c7470a1525c96eca8d25effa877d/pyfoobeef-0.9.0.4-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d46c5d706d1a022aa7db256a273d60b", "sha256": "4f0bb182a80da46d2385875858f210b83cc14607c020a25e9813a697fcbf6688"}, "downloads": -1, "filename": "pyfoobeef-0.9.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3d46c5d706d1a022aa7db256a273d60b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24174, "upload_time": "2019-09-15T20:47:48", "upload_time_iso_8601": "2019-09-15T20:47:48.124588Z", "url": "https://files.pythonhosted.org/packages/df/9d/6fdbd705963bf42a1b137ee9aad33067c7470a1525c96eca8d25effa877d/pyfoobeef-0.9.0.4-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:05:37 2020"}