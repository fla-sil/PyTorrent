{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/danielfrg/s3contents.svg?branch=master)](https://travis-ci.org/danielfrg/s3contents)\n[![Coverage Status](https://coveralls.io/repos/github/danielfrg/s3contents/badge.svg?branch=master)](https://coveralls.io/github/danielfrg/s3contents?branch=master)\n\n# S3Contents\n\nA S3 and GCS backed ContentsManager implementation for Jupyter.\n\nIt aims to a be a transparent, drop-in replacement for Jupyter standard filesystem-backed storage system.\nWith this implementation of a Jupyter Contents Manager you can save all your notebooks, regular files, directories\nstructure directly to a S3/GCS bucket, this could be on AWS/GCP or a self hosted S3 API compatible like [minio](http://minio.io).\n\nWhile there is some implementations of this functionality already available online ([s3nb](https://github.com/monetate/s3nb) or [s3drive](https://github.com/stitchfix/s3drive)) I wasn't able to make\nthem work in newer Jupyter Notebook installations. This aims to be a better tested one\nby being highly based on the awesome [PGContents](https://github.com/quantopian/pgcontents).\n\n## Prerequisites\n\nWrite access (valid credentials) to an S3/GCS bucket, this could be on AWS/GCP or a self hosted S3 like [minio](http://minio.io).\n\n## Installation\n\n```\n$ pip install s3contents\n```\n\n## Jupyter config\n\nEdit `~/.jupyter/jupyter_notebook_config.py` by filling the missing values:\n\n### S3\n\n```python\nfrom s3contents import S3ContentsManager\n\nc = get_config()\n\n# Tell Jupyter to use S3ContentsManager for all storage.\nc.NotebookApp.contents_manager_class = S3ContentsManager\nc.S3ContentsManager.access_key_id = \"<AWS Access Key ID / IAM Access Key ID>\"\nc.S3ContentsManager.secret_access_key = \"<AWS Secret Access Key / IAM Secret Access Key>\"\nc.S3ContentsManager.session_token = \"<AWS Session Token / IAM Session Token>\"\nc.S3ContentsManager.bucket = \"<bucket-name>\"\n\n# Optional settings:\nc.S3ContentsManager.prefix = \"this/is/a/prefix\"\nc.S3ContentsManager.sse = \"AES256\"\nc.S3ContentsManager.signature_version = \"s3v4\"\nc.S3ContentsManager.init_s3_hook = init_function # See AWS key refresh\n```\n\nExample for `play.minio.io:9000`:\n\n```python\nfrom s3contents import S3ContentsManager\n\nc = get_config()\n\n# Tell Jupyter to use S3ContentsManager for all storage.\nc.NotebookApp.contents_manager_class = S3ContentsManager\nc.S3ContentsManager.access_key_id = \"Q3AM3UQ867SPQQA43P2F\"\nc.S3ContentsManager.secret_access_key = \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\"\nc.S3ContentsManager.endpoint_url = \"http://play.minio.io:9000\"\nc.S3ContentsManager.bucket = \"s3contents-demo\"\nc.S3ContentsManager.prefix = \"notebooks/test\"\n```\n\n### GCP\n\nNote that the file `~/.config/gcloud/application_default_credentials.json` assumes a posix system\nwhen you did `gcloud init`\n\n```python\nfrom s3contents import GCSContentsManager\n\nc = get_config(\n\nc.NotebookApp.contents_manager_class = GCSContentsManager\nc.GCSContentsManager.project = \"<your-project>\"\nc.GCSContentsManager.token = \"~/.config/gcloud/application_default_credentials.json\"\nc.GCSContentsManager.bucket = \"<bucket-name>\"\n```\n\n## AWS EC2 role auth setup\n\nIt is also possible to use IAM Role-based access to the S3 bucket from an Amazon EC2 instance; to do that,\njust leave ```access_key_id``` and ```secret_access_key``` set to their default values (```None```), and ensure that\nthe EC2 instance has an IAM role which provides sufficient permissions for the bucket and the operations necessary.\n\n## AWS key refresh\n\nThe optional `init_s3_hook` configuration can be used to enable AWS key rotation (described [here](https://dev.to/li_chastina/auto-refresh-aws-tokens-using-iam-role-and-boto3-2cjf) and [here](https://www.owenrumney.co.uk/2019/01/15/implementing-refreshingawscredentials-python/)) as follows:\n\n```python\nfrom s3contents import S3ContentsManager\nfrom botocore.credentials import RefreshableCredentials\nfrom botocore.session import get_session\nimport botocore\nimport boto3\nfrom configparser import ConfigParser\n\ndef refresh_external_credentials():\n    config = ConfigParser()\n    config.read('/home/jovyan/.aws/credentials')\n    return {\n        \"access_key\": config['default']['aws_access_key_id'],\n        \"secret_key\": config['default']['aws_secret_access_key'],\n        \"token\": config['default']['aws_session_token'],\n        \"expiry_time\": config['default']['aws_expiration']\n    }\n\nsession_credentials = RefreshableCredentials.create_from_metadata(\n        metadata = refresh_external_credentials(),\n        refresh_using = refresh_external_credentials, \n        method = 'custom-refreshing-key-file-reader'\n)\n\ndef make_key_refresh_boto3(this_s3contents_instance):\n    refresh_session =  get_session() # from botocore.session\n    refresh_session._credentials = session_credentials\n    my_s3_session =  boto3.Session(botocore_session=refresh_session)\n    this_s3contents_instance.boto3_session = my_s3_session\n\n# Tell Jupyter to use S3ContentsManager for all storage.\nc.NotebookApp.contents_manager_class = S3ContentsManager\n\nc.S3ContentsManager.init_s3_hook = make_key_refresh_boto3\n```\n\n## Access local files\n\nTo access local file as well as remote files in S3 you can use [hybridcontents](https://github.com/viaduct-ai/hybridcontents).\n\nFirst: \n```\npip install hybridcontents\n```\n\nAnd use a configuration like this:\n\n```python\nfrom s3contents import S3ContentsManager\nfrom hybridcontents import HybridContentsManager\nfrom IPython.html.services.contents.filemanager import FileContentsManager\n\nc = get_config()\n\nc.NotebookApp.contents_manager_class = HybridContentsManager\n\nc.HybridContentsManager.manager_classes = {\n    # Associate the root directory with an S3ContentsManager.\n    # This manager will receive all requests that don\"t fall under any of the\n    # other managers.\n    \"\": S3ContentsManager,\n    # Associate /directory with a FileContentsManager.\n    \"local_directory\": FileContentsManager,\n}\n\nc.HybridContentsManager.manager_kwargs = {\n    # Args for root S3ContentsManager.\n    \"\": {\n        \"access_key_id\": \"access-key\",\n        \"secret_access_key\": \"secret-key\",\n        \"endpoint_url\": \"http://localhost:9000\",\n        \"bucket\": \"notebooks\",\n    },\n    # Args for the FileContentsManager mapped to /directory\n    \"local_directory\": {\n        \"root_dir\": \"/Users/drodriguez/Downloads\",\n    },\n}\n```\n\n# Dockerfile\n\nA Docker image is provided. The following environment variables are required:\n\n- AWS_ACCESS_KEY_ID=\"<AWS Access Key ID / IAM Access Key ID>\"\n- AWS_SECRET_ACCESS_KEY=\"<AWS Secret Access Key / IAM Secret Access Key>\"\n- S3_BUCKET=\"<bucket-name>\"\n- JUPYTER_PASSWORD=\"<Jupyter password for accessing the notebooks>\"\n\nThe following environment variables are optional:\n- S3_PREFIX: \"this/is/a/prefix\". Default notebooks/\n\nAn [environment file](https://docs.docker.com/compose/env-file/) is a good way to store those variables. To start the script, run\n\n```\ndocker run --rm --env-file .env -p 8888:8888 danielfrg/s3contents\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danielfrg/s3contents", "keywords": "jupyter,s3,contents-manager", "license": "Apache 2.0", "maintainer": "Daniel Rodriguez", "maintainer_email": "df.rodriguez143@gmail.com", "name": "s3contents", "package_url": "https://pypi.org/project/s3contents/", "platform": "", "project_url": "https://pypi.org/project/s3contents/", "project_urls": {"Homepage": "https://github.com/danielfrg/s3contents"}, "release_url": "https://pypi.org/project/s3contents/0.4.0/", "requires_dist": null, "requires_python": ">=3.0,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*", "summary": "A S3-backed ContentsManager implementation for Jupyter", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/danielfrg/s3contents\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a97ad2a32878a3b510660dd74f3c676ae91bb273/68747470733a2f2f7472617669732d63692e6f72672f64616e69656c6672672f7333636f6e74656e74732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/danielfrg/s3contents?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92af52a8647696fb298425b0c54a034d1e50e777/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f64616e69656c6672672f7333636f6e74656e74732f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>S3Contents</h1>\n<p>A S3 and GCS backed ContentsManager implementation for Jupyter.</p>\n<p>It aims to a be a transparent, drop-in replacement for Jupyter standard filesystem-backed storage system.\nWith this implementation of a Jupyter Contents Manager you can save all your notebooks, regular files, directories\nstructure directly to a S3/GCS bucket, this could be on AWS/GCP or a self hosted S3 API compatible like <a href=\"http://minio.io\" rel=\"nofollow\">minio</a>.</p>\n<p>While there is some implementations of this functionality already available online (<a href=\"https://github.com/monetate/s3nb\" rel=\"nofollow\">s3nb</a> or <a href=\"https://github.com/stitchfix/s3drive\" rel=\"nofollow\">s3drive</a>) I wasn't able to make\nthem work in newer Jupyter Notebook installations. This aims to be a better tested one\nby being highly based on the awesome <a href=\"https://github.com/quantopian/pgcontents\" rel=\"nofollow\">PGContents</a>.</p>\n<h2>Prerequisites</h2>\n<p>Write access (valid credentials) to an S3/GCS bucket, this could be on AWS/GCP or a self hosted S3 like <a href=\"http://minio.io\" rel=\"nofollow\">minio</a>.</p>\n<h2>Installation</h2>\n<pre><code>$ pip install s3contents\n</code></pre>\n<h2>Jupyter config</h2>\n<p>Edit <code>~/.jupyter/jupyter_notebook_config.py</code> by filling the missing values:</p>\n<h3>S3</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">s3contents</span> <span class=\"kn\">import</span> <span class=\"n\">S3ContentsManager</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">get_config</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Tell Jupyter to use S3ContentsManager for all storage.</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">NotebookApp</span><span class=\"o\">.</span><span class=\"n\">contents_manager_class</span> <span class=\"o\">=</span> <span class=\"n\">S3ContentsManager</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">access_key_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;AWS Access Key ID / IAM Access Key ID&gt;\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">secret_access_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;AWS Secret Access Key / IAM Secret Access Key&gt;\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">session_token</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;AWS Session Token / IAM Session Token&gt;\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">bucket</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;bucket-name&gt;\"</span>\n\n<span class=\"c1\"># Optional settings:</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"this/is/a/prefix\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">sse</span> <span class=\"o\">=</span> <span class=\"s2\">\"AES256\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">signature_version</span> <span class=\"o\">=</span> <span class=\"s2\">\"s3v4\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">init_s3_hook</span> <span class=\"o\">=</span> <span class=\"n\">init_function</span> <span class=\"c1\"># See AWS key refresh</span>\n</pre>\n<p>Example for <code>play.minio.io:9000</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">s3contents</span> <span class=\"kn\">import</span> <span class=\"n\">S3ContentsManager</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">get_config</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Tell Jupyter to use S3ContentsManager for all storage.</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">NotebookApp</span><span class=\"o\">.</span><span class=\"n\">contents_manager_class</span> <span class=\"o\">=</span> <span class=\"n\">S3ContentsManager</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">access_key_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"Q3AM3UQ867SPQQA43P2F\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">secret_access_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">endpoint_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://play.minio.io:9000\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">bucket</span> <span class=\"o\">=</span> <span class=\"s2\">\"s3contents-demo\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"notebooks/test\"</span>\n</pre>\n<h3>GCP</h3>\n<p>Note that the file <code>~/.config/gcloud/application_default_credentials.json</code> assumes a posix system\nwhen you did <code>gcloud init</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">s3contents</span> <span class=\"kn\">import</span> <span class=\"n\">GCSContentsManager</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">get_config</span><span class=\"p\">(</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">NotebookApp</span><span class=\"o\">.</span><span class=\"n\">contents_manager_class</span> <span class=\"o\">=</span> <span class=\"n\">GCSContentsManager</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">GCSContentsManager</span><span class=\"o\">.</span><span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;your-project&gt;\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">GCSContentsManager</span><span class=\"o\">.</span><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"s2\">\"~/.config/gcloud/application_default_credentials.json\"</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">GCSContentsManager</span><span class=\"o\">.</span><span class=\"n\">bucket</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;bucket-name&gt;\"</span>\n</pre>\n<h2>AWS EC2 role auth setup</h2>\n<p>It is also possible to use IAM Role-based access to the S3 bucket from an Amazon EC2 instance; to do that,\njust leave <code>access_key_id</code> and <code>secret_access_key</code> set to their default values (<code>None</code>), and ensure that\nthe EC2 instance has an IAM role which provides sufficient permissions for the bucket and the operations necessary.</p>\n<h2>AWS key refresh</h2>\n<p>The optional <code>init_s3_hook</code> configuration can be used to enable AWS key rotation (described <a href=\"https://dev.to/li_chastina/auto-refresh-aws-tokens-using-iam-role-and-boto3-2cjf\" rel=\"nofollow\">here</a> and <a href=\"https://www.owenrumney.co.uk/2019/01/15/implementing-refreshingawscredentials-python/\" rel=\"nofollow\">here</a>) as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">s3contents</span> <span class=\"kn\">import</span> <span class=\"n\">S3ContentsManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">botocore.credentials</span> <span class=\"kn\">import</span> <span class=\"n\">RefreshableCredentials</span>\n<span class=\"kn\">from</span> <span class=\"nn\">botocore.session</span> <span class=\"kn\">import</span> <span class=\"n\">get_session</span>\n<span class=\"kn\">import</span> <span class=\"nn\">botocore</span>\n<span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">from</span> <span class=\"nn\">configparser</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigParser</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">refresh_external_credentials</span><span class=\"p\">():</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ConfigParser</span><span class=\"p\">()</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'/home/jovyan/.aws/credentials'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"access_key\"</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'default'</span><span class=\"p\">][</span><span class=\"s1\">'aws_access_key_id'</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"secret_key\"</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'default'</span><span class=\"p\">][</span><span class=\"s1\">'aws_secret_access_key'</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"token\"</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'default'</span><span class=\"p\">][</span><span class=\"s1\">'aws_session_token'</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"expiry_time\"</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'default'</span><span class=\"p\">][</span><span class=\"s1\">'aws_expiration'</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n<span class=\"n\">session_credentials</span> <span class=\"o\">=</span> <span class=\"n\">RefreshableCredentials</span><span class=\"o\">.</span><span class=\"n\">create_from_metadata</span><span class=\"p\">(</span>\n        <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">refresh_external_credentials</span><span class=\"p\">(),</span>\n        <span class=\"n\">refresh_using</span> <span class=\"o\">=</span> <span class=\"n\">refresh_external_credentials</span><span class=\"p\">,</span> \n        <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"s1\">'custom-refreshing-key-file-reader'</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_key_refresh_boto3</span><span class=\"p\">(</span><span class=\"n\">this_s3contents_instance</span><span class=\"p\">):</span>\n    <span class=\"n\">refresh_session</span> <span class=\"o\">=</span>  <span class=\"n\">get_session</span><span class=\"p\">()</span> <span class=\"c1\"># from botocore.session</span>\n    <span class=\"n\">refresh_session</span><span class=\"o\">.</span><span class=\"n\">_credentials</span> <span class=\"o\">=</span> <span class=\"n\">session_credentials</span>\n    <span class=\"n\">my_s3_session</span> <span class=\"o\">=</span>  <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">botocore_session</span><span class=\"o\">=</span><span class=\"n\">refresh_session</span><span class=\"p\">)</span>\n    <span class=\"n\">this_s3contents_instance</span><span class=\"o\">.</span><span class=\"n\">boto3_session</span> <span class=\"o\">=</span> <span class=\"n\">my_s3_session</span>\n\n<span class=\"c1\"># Tell Jupyter to use S3ContentsManager for all storage.</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">NotebookApp</span><span class=\"o\">.</span><span class=\"n\">contents_manager_class</span> <span class=\"o\">=</span> <span class=\"n\">S3ContentsManager</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">S3ContentsManager</span><span class=\"o\">.</span><span class=\"n\">init_s3_hook</span> <span class=\"o\">=</span> <span class=\"n\">make_key_refresh_boto3</span>\n</pre>\n<h2>Access local files</h2>\n<p>To access local file as well as remote files in S3 you can use <a href=\"https://github.com/viaduct-ai/hybridcontents\" rel=\"nofollow\">hybridcontents</a>.</p>\n<p>First:</p>\n<pre><code>pip install hybridcontents\n</code></pre>\n<p>And use a configuration like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">s3contents</span> <span class=\"kn\">import</span> <span class=\"n\">S3ContentsManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hybridcontents</span> <span class=\"kn\">import</span> <span class=\"n\">HybridContentsManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">IPython.html.services.contents.filemanager</span> <span class=\"kn\">import</span> <span class=\"n\">FileContentsManager</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">get_config</span><span class=\"p\">()</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">NotebookApp</span><span class=\"o\">.</span><span class=\"n\">contents_manager_class</span> <span class=\"o\">=</span> <span class=\"n\">HybridContentsManager</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">HybridContentsManager</span><span class=\"o\">.</span><span class=\"n\">manager_classes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Associate the root directory with an S3ContentsManager.</span>\n    <span class=\"c1\"># This manager will receive all requests that don\"t fall under any of the</span>\n    <span class=\"c1\"># other managers.</span>\n    <span class=\"s2\">\"\"</span><span class=\"p\">:</span> <span class=\"n\">S3ContentsManager</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Associate /directory with a FileContentsManager.</span>\n    <span class=\"s2\">\"local_directory\"</span><span class=\"p\">:</span> <span class=\"n\">FileContentsManager</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">HybridContentsManager</span><span class=\"o\">.</span><span class=\"n\">manager_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Args for root S3ContentsManager.</span>\n    <span class=\"s2\">\"\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"access_key_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"access-key\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"secret_access_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"secret-key\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"endpoint_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://localhost:9000\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"bucket\"</span><span class=\"p\">:</span> <span class=\"s2\">\"notebooks\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># Args for the FileContentsManager mapped to /directory</span>\n    <span class=\"s2\">\"local_directory\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"root_dir\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/Users/drodriguez/Downloads\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<h1>Dockerfile</h1>\n<p>A Docker image is provided. The following environment variables are required:</p>\n<ul>\n<li>AWS_ACCESS_KEY_ID=\"&lt;AWS Access Key ID / IAM Access Key ID&gt;\"</li>\n<li>AWS_SECRET_ACCESS_KEY=\"&lt;AWS Secret Access Key / IAM Secret Access Key&gt;\"</li>\n<li>S3_BUCKET=\"&lt;bucket-name&gt;\"</li>\n<li>JUPYTER_PASSWORD=\"&lt;Jupyter password for accessing the notebooks&gt;\"</li>\n</ul>\n<p>The following environment variables are optional:</p>\n<ul>\n<li>S3_PREFIX: \"this/is/a/prefix\". Default notebooks/</li>\n</ul>\n<p>An <a href=\"https://docs.docker.com/compose/env-file/\" rel=\"nofollow\">environment file</a> is a good way to store those variables. To start the script, run</p>\n<pre><code>docker run --rm --env-file .env -p 8888:8888 danielfrg/s3contents\n</code></pre>\n\n          </div>"}, "last_serial": 6507635, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "600364b880ff06a12c32e84ef149a0b2", "sha256": "d87434c43c1d9af9d2ffd9c4922bd0136a1254577815fdf4899e9bc0a46f98e2"}, "downloads": -1, "filename": "s3contents-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "600364b880ff06a12c32e84ef149a0b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8838, "upload_time": "2016-10-22T18:38:06", "upload_time_iso_8601": "2016-10-22T18:38:06.457383Z", "url": "https://files.pythonhosted.org/packages/35/7a/7d5c2bee65180f928cdeaa9080c7507d8aaf1099abcc1df2f898784ad416/s3contents-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3288879eef149add08bddc6a5dca2747", "sha256": "1e5769a6de39176a88ee68b025f1127a27768cd16d5e9be6b088882d53d57f0f"}, "downloads": -1, "filename": "s3contents-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3288879eef149add08bddc6a5dca2747", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25549, "upload_time": "2016-10-22T18:38:09", "upload_time_iso_8601": "2016-10-22T18:38:09.019301Z", "url": "https://files.pythonhosted.org/packages/b4/70/3099f9e665ac1513e660fc2d61b564779e7d037ca53c45cdeaf2178a2914/s3contents-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8f32714186ee18a42b7307aeb5b8b958", "sha256": "8456b0d4046590cab2e12f47727446c1e5481c9e2e43ee26a85bd55d6d2101c3"}, "downloads": -1, "filename": "s3contents-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8f32714186ee18a42b7307aeb5b8b958", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25482, "upload_time": "2017-02-24T20:47:57", "upload_time_iso_8601": "2017-02-24T20:47:57.380739Z", "url": "https://files.pythonhosted.org/packages/5a/39/acd6e12e12d7306695a06a864950a70adca9c0eeff152b97099a2f57d4c6/s3contents-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "aa3c0c1c60ac8d3d2ebf93b375260e3f", "sha256": "36f9a1e9418497e0f877919f0f2d9ac5dc445c835ac612e80c1f8bd1174b07ee"}, "downloads": -1, "filename": "s3contents-0.1.10.tar.gz", "has_sig": false, "md5_digest": "aa3c0c1c60ac8d3d2ebf93b375260e3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30936, "upload_time": "2018-06-29T21:50:10", "upload_time_iso_8601": "2018-06-29T21:50:10.777055Z", "url": "https://files.pythonhosted.org/packages/64/03/5e65790a99d9e0c4b7b76948b6db9aee75e5cfdd1d124752c228714b86c5/s3contents-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "ac0af0789931248ab4f2f8ab2fcc45f7", "sha256": "846df246adb6c6abbed712b5be1ddd2c62fd06175f8e916c3813515c2877c6d4"}, "downloads": -1, "filename": "s3contents-0.1.11.tar.gz", "has_sig": false, "md5_digest": "ac0af0789931248ab4f2f8ab2fcc45f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31570, "upload_time": "2018-10-07T23:45:12", "upload_time_iso_8601": "2018-10-07T23:45:12.924416Z", "url": "https://files.pythonhosted.org/packages/3a/cc/62e96c1ec6a295a848eff810120a2ea564a045b25c3ffd29c6d02b9cc705/s3contents-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "83b805cade2b4f3543de1ee9bfe48ed8", "sha256": "d4512c31067befef6ac59a54c84aa7bbac8e6e8c646f31f5929e1f3de22218fc"}, "downloads": -1, "filename": "s3contents-0.1.12.tar.gz", "has_sig": false, "md5_digest": "83b805cade2b4f3543de1ee9bfe48ed8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31678, "upload_time": "2018-11-14T16:56:45", "upload_time_iso_8601": "2018-11-14T16:56:45.217219Z", "url": "https://files.pythonhosted.org/packages/78/12/325b3d47eef8ad52d2ece4bb2682428eb7cde54f7aa5ce4873c8d8e3ef40/s3contents-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "9fd04f66b5a7698c05b6afe97717993f", "sha256": "0a7abcdaeed51100bdc6dc090141ff8a9061d01a60210443183c1fe9df0612d6"}, "downloads": -1, "filename": "s3contents-0.1.13.tar.gz", "has_sig": false, "md5_digest": "9fd04f66b5a7698c05b6afe97717993f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31906, "upload_time": "2019-05-06T21:47:26", "upload_time_iso_8601": "2019-05-06T21:47:26.188125Z", "url": "https://files.pythonhosted.org/packages/99/c2/b683a92228066011a6665770664b10b5ce45be924d1922125c63a53f608b/s3contents-0.1.13.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0bc97db5a3e76a3127e55adb5fef5472", "sha256": "fa787d59163ae65d783147ff1dc5f9608ad8aadec812d4b1a6cf2c982fe0e4cd"}, "downloads": -1, "filename": "s3contents-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0bc97db5a3e76a3127e55adb5fef5472", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25511, "upload_time": "2017-03-04T00:18:38", "upload_time_iso_8601": "2017-03-04T00:18:38.239181Z", "url": "https://files.pythonhosted.org/packages/43/8f/2eee23deab192ccd59f9d3cb897c75ab434bbdfb0662f7d3e14ac1a77d3d/s3contents-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d90463fabe52dd927fb7939d19d60ff8", "sha256": "deae6f27bd53d2e9f91bf593b5280e4366decd33b23a2baf658d8875ab1f9860"}, "downloads": -1, "filename": "s3contents-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d90463fabe52dd927fb7939d19d60ff8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26552, "upload_time": "2017-04-12T19:55:12", "upload_time_iso_8601": "2017-04-12T19:55:12.256660Z", "url": "https://files.pythonhosted.org/packages/7b/d8/0625ecb094034976d7543cd06525c4033be2226b8234b1b022022d4821c1/s3contents-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "476fd942b7864a221fde92daf9e59d07", "sha256": "0a405bcfee6c97f3ff4b87031edafc3c6fc0da2ae57e0548a461584f5d54e9df"}, "downloads": -1, "filename": "s3contents-0.1.4.tar.gz", "has_sig": false, "md5_digest": "476fd942b7864a221fde92daf9e59d07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26538, "upload_time": "2017-07-28T16:31:28", "upload_time_iso_8601": "2017-07-28T16:31:28.109036Z", "url": "https://files.pythonhosted.org/packages/e1/eb/0ebaaeb12eab9e5ee71c4ed05d3c47083129436260ee06027764397e4c6d/s3contents-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "b5644d2b9bbfb6f314743a77b793c52c", "sha256": "40ddd975ed8b0ea6f125c4eff641fc0bc96a97e6561bd0f61e3d387f49b26d7c"}, "downloads": -1, "filename": "s3contents-0.1.5.tar.gz", "has_sig": false, "md5_digest": "b5644d2b9bbfb6f314743a77b793c52c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29326, "upload_time": "2018-06-05T19:19:36", "upload_time_iso_8601": "2018-06-05T19:19:36.074790Z", "url": "https://files.pythonhosted.org/packages/90/cf/1c9e18e3ef3cdc1f1d6bd092a258817a692c62aa0aec6e492052350350fb/s3contents-0.1.5.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "92ce6562b52bf21b2b711bb763e00bc3", "sha256": "cf0a7a515c0896538a0f808d41783399865a8fe070d5d93f3b4659d412b30c0a"}, "downloads": -1, "filename": "s3contents-0.1.7.tar.gz", "has_sig": false, "md5_digest": "92ce6562b52bf21b2b711bb763e00bc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30845, "upload_time": "2018-06-06T17:09:23", "upload_time_iso_8601": "2018-06-06T17:09:23.564819Z", "url": "https://files.pythonhosted.org/packages/2d/53/2e474bff821efd11262f0427d54fd049f86941da66cbb05586fcc56b9495/s3contents-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "8ab9eb12ee5ab6a15c79fb83166dbcaa", "sha256": "cc6ea102d66b3bba2ff193ce4cd330bfe73b258439e5a2c6928b4dd6feb6e528"}, "downloads": -1, "filename": "s3contents-0.1.8.tar.gz", "has_sig": false, "md5_digest": "8ab9eb12ee5ab6a15c79fb83166dbcaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30846, "upload_time": "2018-06-08T22:21:22", "upload_time_iso_8601": "2018-06-08T22:21:22.899762Z", "url": "https://files.pythonhosted.org/packages/01/45/ab0252ebd6cade1cd154978f57814eb065233c36e7f172ab59604caf7138/s3contents-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "a34438a17e6a5eb1a6eea66dc139665d", "sha256": "063d369bc1ec1e70067d61378a90441134d2a11f5279f8fbc7a2123510c6fc74"}, "downloads": -1, "filename": "s3contents-0.1.9.tar.gz", "has_sig": false, "md5_digest": "a34438a17e6a5eb1a6eea66dc139665d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30932, "upload_time": "2018-06-29T21:23:12", "upload_time_iso_8601": "2018-06-29T21:23:12.024220Z", "url": "https://files.pythonhosted.org/packages/c7/4c/3593d5e18ba5459323e860b3eae26f09d07a5e1a48a2f0c4ba96ad8e10d3/s3contents-0.1.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7f31c34263a2ecbc003a35ac848fb762", "sha256": "a0cdfb09207f249f55fbad571685408999226798552fef25d02b5208ab8d0069"}, "downloads": -1, "filename": "s3contents-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7f31c34263a2ecbc003a35ac848fb762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32504, "upload_time": "2019-09-03T16:48:46", "upload_time_iso_8601": "2019-09-03T16:48:46.399007Z", "url": "https://files.pythonhosted.org/packages/bb/d8/f787a56f47403d1cdb998882d8a92ab233ba0b7ed328bbdfedd36efa4ed0/s3contents-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "182d0e33d7dbd7a3c8df4f28b88aa0ee", "sha256": "0c85917a0d99971d4969728c86e8d8e27e68befa7fdf1dc7a8115f9cfde2b6d8"}, "downloads": -1, "filename": "s3contents-0.3.1.tar.gz", "has_sig": false, "md5_digest": "182d0e33d7dbd7a3c8df4f28b88aa0ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32549, "upload_time": "2019-10-29T01:34:08", "upload_time_iso_8601": "2019-10-29T01:34:08.079077Z", "url": "https://files.pythonhosted.org/packages/bc/82/c2f6b412919777a4e9d458298c68eba6df54e49c30fb73503a26cedebdd2/s3contents-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "62cd84b53043edeb4a635d6edf1d52cc", "sha256": "8a519259cf2f12e50ede05f5e53f516c2fb5bf5379c7ad98fa20a22eb6403861"}, "downloads": -1, "filename": "s3contents-0.3.2.tar.gz", "has_sig": false, "md5_digest": "62cd84b53043edeb4a635d6edf1d52cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33787, "upload_time": "2019-11-11T22:09:46", "upload_time_iso_8601": "2019-11-11T22:09:46.773054Z", "url": "https://files.pythonhosted.org/packages/3c/48/a85099da1e1f730d4e61aabe202ba4c4cf7b8991331defd9cbfea9f65000/s3contents-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "d33752bc66ceb2eb0117ebf5585514d8", "sha256": "7d61690ce78d64c1f8941d1e8342008eb4504b90d05b971b278048b93a09b65d"}, "downloads": -1, "filename": "s3contents-0.3.3.tar.gz", "has_sig": false, "md5_digest": "d33752bc66ceb2eb0117ebf5585514d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33957, "upload_time": "2020-01-03T05:11:05", "upload_time_iso_8601": "2020-01-03T05:11:05.706694Z", "url": "https://files.pythonhosted.org/packages/c2/ee/20e1a7694800cf0f5a35772a3d4798182eb0de2b1f9634e658e420ef45ea/s3contents-0.3.3.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "38a8476cd848ed5fda3e8f0cbee11585", "sha256": "648c956859d6d3a9a83d214b39654a490d34c8a3829d79c3ad316ef5fd8ba821"}, "downloads": -1, "filename": "s3contents-0.4.0.tar.gz", "has_sig": false, "md5_digest": "38a8476cd848ed5fda3e8f0cbee11585", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*", "size": 34207, "upload_time": "2020-01-23T16:33:50", "upload_time_iso_8601": "2020-01-23T16:33:50.392245Z", "url": "https://files.pythonhosted.org/packages/bd/85/538083921fc4160ff4ec88531f13371ff81e3de158b819dc346ef427c3a7/s3contents-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "38a8476cd848ed5fda3e8f0cbee11585", "sha256": "648c956859d6d3a9a83d214b39654a490d34c8a3829d79c3ad316ef5fd8ba821"}, "downloads": -1, "filename": "s3contents-0.4.0.tar.gz", "has_sig": false, "md5_digest": "38a8476cd848ed5fda3e8f0cbee11585", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*", "size": 34207, "upload_time": "2020-01-23T16:33:50", "upload_time_iso_8601": "2020-01-23T16:33:50.392245Z", "url": "https://files.pythonhosted.org/packages/bd/85/538083921fc4160ff4ec88531f13371ff81e3de158b819dc346ef427c3a7/s3contents-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:39 2020"}