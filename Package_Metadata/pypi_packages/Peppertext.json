{"info": {"author": "Kyungil Choi", "author_email": "hanpama@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP"], "description": "Peppertext\n==========\n\nDeclarative hypertext client\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n   pip install peppertext\n\n\nOverview\n--------\n\n\n.. code-block:: python\n\n   from peppertext import Hypertext, SimpleURLField, resolve, register, selector\n\n   @register\n   class GoogleBlogPage(Hypertext):\n       url = SimpleURLField(\n           \"https://googleblog.blogspot.kr/{year}/{month}/{title}.html\"\n       )\n\n       title = selector.find(\".title[itemprop=name]\").text()\n       body = selector.find(\".post-body\").text()\n\n\nIt resolves given headers, url and query string to hypertext object.\n\n.. code-block:: python\n\n   >>> p = resolve(\"https://googleblog.blogspot.kr/2015/11/google-gobble-thanksgiving-trends-on.html\")\n   >>> p\n   <GoogleBlogPage at 0x108a4d1f0 >\n\n   >>> p.fetch()\n   >>> p['title']\n   'Google gobble: Thanksgiving trends on Search'\n   >>> p['body']\n   'In just a few hours, people across the U.S. will be settling...'\n\nYou can create GoogleBlogPage object with profile variables which are declared as\nfields in `GoogleBlogPage` class.\n\n\n.. code-block:: python\n\n   >>> p = GoogleBlogPage(\n   ...     year=\"2015\",\n   ...     month=\"11\",\n   ...     title=\"google-gobble-thanksgiving-trends-on\"\n   ... )\n\n   >>> p.fetch()\n   >>> p['title']\n   'Google gobble: Thanksgiving trends on Search'\n\n\nSelectors\n---------\n\n.. code-block:: python\n\n   class GoogleBlogPage(Hypertext):\n       # ...\n       title = selector.find(\".title[itemprop=name]\").text()\n       # ...\n\nSelectors process a document which is returned from server as response.\nIn the `GoogleBlogPage` example above, `title` selector parses document and\nfind an element specified with `\".title[itemprop=name]\"` css selector.\nYou can access the value title with subscribing the `GoogleBlogPage` object\nwith selector name.\n\n.. code-block:: python\n\n   document = pq(\"\"\"<div>\n       <a href=\"http://example.com\">Link1</a>\n       <a href=\"http://example.com/dahokan\">Link2</a>\n       <a href=\"http://example.com/manoha\">Link3</a>\n   </div>\"\"\")\n\n   find_selector = selector.find('a')\n   selected_els = find_selector.select(document)\n   self.assertEqual( [pq(el).attr[\"href\"] for el in selected_els],\n       [\n           \"http://example.com\",\n           \"http://example.com/dahokan\",\n           \"http://example.com/manoha\"\n       ]\n   )\n\n\n`find`\n\"\"\"\"\"\"\n\nSelect html elements which match to given css selector string.\n\n`attribute`\n\"\"\"\"\"\"\"\"\"\"\"\n\nGet an element's attribute value with given attribute name.\n\n`text`\n\"\"\"\"\"\"\n\nSelect the html element's inner text value.\n\n`at`\n\"\"\"\"\n\nGet an item on index\n\n`sub`\n\"\"\"\"\"\n\n.. code-block:: python\n\n   sub_selector = selector.sub(pattern=\"\\d+\", repl=\"\")\n\nDo regex substitution.\n\n`cast`\n\"\"\"\"\"\"\n\n.. code-block:: python\n\n   int_cast_selector = selector.cast(int)\n\nPass the data to the function given as a parameter.\n\n\nCompatibility\n-------------\n\nPeppertext supports Python 2.7 and 3.\n\n\nFeatures in developing\n----------------------\n\n* Interface for parse error handling\n* Polymorphic access to page selectors\n* Interface to resolve and traverse links in a page", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hanpama/peppertext", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Peppertext", "package_url": "https://pypi.org/project/Peppertext/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Peppertext/", "project_urls": {"Homepage": "https://github.com/hanpama/peppertext"}, "release_url": "https://pypi.org/project/Peppertext/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Declarative hypertext client", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Declarative hypertext client</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install peppertext\n</pre>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">peppertext</span> <span class=\"kn\">import</span> <span class=\"n\">Hypertext</span><span class=\"p\">,</span> <span class=\"n\">SimpleURLField</span><span class=\"p\">,</span> <span class=\"n\">resolve</span><span class=\"p\">,</span> <span class=\"n\">register</span><span class=\"p\">,</span> <span class=\"n\">selector</span>\n\n<span class=\"nd\">@register</span>\n<span class=\"k\">class</span> <span class=\"nc\">GoogleBlogPage</span><span class=\"p\">(</span><span class=\"n\">Hypertext</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">SimpleURLField</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"https://googleblog.blogspot.kr/</span><span class=\"si\">{year}</span><span class=\"s2\">/</span><span class=\"si\">{month}</span><span class=\"s2\">/</span><span class=\"si\">{title}</span><span class=\"s2\">.html\"</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">selector</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">\".title[itemprop=name]\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">selector</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">\".post-body\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()</span>\n</pre>\n<p>It resolves given headers, url and query string to hypertext object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"s2\">\"https://googleblog.blogspot.kr/2015/11/google-gobble-thanksgiving-trends-on.html\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span>\n<span class=\"o\">&lt;</span><span class=\"n\">GoogleBlogPage</span> <span class=\"n\">at</span> <span class=\"mh\">0x108a4d1f0</span> <span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span>\n<span class=\"s1\">'Google gobble: Thanksgiving trends on Search'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s1\">'body'</span><span class=\"p\">]</span>\n<span class=\"s1\">'In just a few hours, people across the U.S. will be settling...'</span>\n</pre>\n<p>You can create GoogleBlogPage object with profile variables which are declared as\nfields in <cite>GoogleBlogPage</cite> class.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">GoogleBlogPage</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"s2\">\"2015\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">month</span><span class=\"o\">=</span><span class=\"s2\">\"11\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"google-gobble-thanksgiving-trends-on\"</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span>\n<span class=\"s1\">'Google gobble: Thanksgiving trends on Search'</span>\n</pre>\n</div>\n<div id=\"selectors\">\n<h2>Selectors</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">GoogleBlogPage</span><span class=\"p\">(</span><span class=\"n\">Hypertext</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">selector</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">\".title[itemprop=name]\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>Selectors process a document which is returned from server as response.\nIn the <cite>GoogleBlogPage</cite> example above, <cite>title</cite> selector parses document and\nfind an element specified with <cite>\u201c.title[itemprop=name]\u201d</cite> css selector.\nYou can access the value title with subscribing the <cite>GoogleBlogPage</cite> object\nwith selector name.</p>\n<pre><span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"&lt;div&gt;\n    &lt;a href=\"http://example.com\"&gt;Link1&lt;/a&gt;\n    &lt;a href=\"http://example.com/dahokan\"&gt;Link2&lt;/a&gt;\n    &lt;a href=\"http://example.com/manoha\"&gt;Link3&lt;/a&gt;\n&lt;/div&gt;\"\"\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">find_selector</span> <span class=\"o\">=</span> <span class=\"n\">selector</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"n\">selected_els</span> <span class=\"o\">=</span> <span class=\"n\">find_selector</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span> <span class=\"p\">[</span><span class=\"n\">pq</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">[</span><span class=\"s2\">\"href\"</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">selected_els</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"s2\">\"http://example.com\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"http://example.com/dahokan\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"http://example.com/manoha\"</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<div id=\"find\">\n<h3><cite>find</cite></h3>\n<p>Select html elements which match to given css selector string.</p>\n</div>\n<div id=\"attribute\">\n<h3><cite>attribute</cite></h3>\n<p>Get an element\u2019s attribute value with given attribute name.</p>\n</div>\n<div id=\"text\">\n<h3><cite>text</cite></h3>\n<p>Select the html element\u2019s inner text value.</p>\n</div>\n<div id=\"at\">\n<h3><cite>at</cite></h3>\n<p>Get an item on index</p>\n</div>\n<div id=\"sub\">\n<h3><cite>sub</cite></h3>\n<pre><span class=\"n\">sub_selector</span> <span class=\"o\">=</span> <span class=\"n\">selector</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s2\">\"\\d+\"</span><span class=\"p\">,</span> <span class=\"n\">repl</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n</pre>\n<p>Do regex substitution.</p>\n</div>\n<div id=\"cast\">\n<h3><cite>cast</cite></h3>\n<pre><span class=\"n\">int_cast_selector</span> <span class=\"o\">=</span> <span class=\"n\">selector</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n</pre>\n<p>Pass the data to the function given as a parameter.</p>\n</div>\n</div>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<p>Peppertext supports Python 2.7 and 3.</p>\n</div>\n<div id=\"features-in-developing\">\n<h2>Features in developing</h2>\n<ul>\n<li>Interface for parse error handling</li>\n<li>Polymorphic access to page selectors</li>\n<li>Interface to resolve and traverse links in a page</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1955461, "releases": {"0.1.1": [], "0.1.2": [{"comment_text": "", "digests": {"md5": "59fe22e5a2232685a95a14902b6d54bf", "sha256": "3ffe9a2f727ded994cbdd92573a32c56d9c7f11114a24d8ac0daa5cae8ccee7e"}, "downloads": -1, "filename": "peppertext-0.1.2.tar.gz", "has_sig": false, "md5_digest": "59fe22e5a2232685a95a14902b6d54bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7592, "upload_time": "2015-12-13T12:50:34", "upload_time_iso_8601": "2015-12-13T12:50:34.954476Z", "url": "https://files.pythonhosted.org/packages/bd/1c/aa500a9d77261a845162d0935aae2bd04ca9130c5b3576021a796c630032/peppertext-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "4f5a27c5f8524f0e6fec9680a191f2b6", "sha256": "e5361a56694f8de9769df15020386d6beada1181a8cec6a05b16651bd00faf82"}, "downloads": -1, "filename": "peppertext-0.1.3.tar.gz", "has_sig": false, "md5_digest": "4f5a27c5f8524f0e6fec9680a191f2b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7767, "upload_time": "2016-02-14T11:49:23", "upload_time_iso_8601": "2016-02-14T11:49:23.553738Z", "url": "https://files.pythonhosted.org/packages/3f/df/ad332f43257427a819576c844e233d5dbf244491cfd06e065d878ac57943/peppertext-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f5a27c5f8524f0e6fec9680a191f2b6", "sha256": "e5361a56694f8de9769df15020386d6beada1181a8cec6a05b16651bd00faf82"}, "downloads": -1, "filename": "peppertext-0.1.3.tar.gz", "has_sig": false, "md5_digest": "4f5a27c5f8524f0e6fec9680a191f2b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7767, "upload_time": "2016-02-14T11:49:23", "upload_time_iso_8601": "2016-02-14T11:49:23.553738Z", "url": "https://files.pythonhosted.org/packages/3f/df/ad332f43257427a819576c844e233d5dbf244491cfd06e065d878ac57943/peppertext-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:24 2020"}