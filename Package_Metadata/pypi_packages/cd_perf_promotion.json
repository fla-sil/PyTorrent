{"info": {"author": "Jared Petersen", "author_email": "Jared.Petersen@cdk.com", "bugtrack_url": null, "classifiers": [], "description": "Continuous Delivery Performance Promotion Tool\r\n==============================================\r\n\r\nThe Continuous Delivery Performance Promotion Tool is a Python program\r\nthat is used to evaluate whether applications are performing well enough\r\nto be moved on to the next stage in the continuous delivery system. This\r\ntool allows users to define how their application should be performing\r\nvia a simple JSON configuration file and then evaluates the\r\napplication\u2019s actual performance against those criteria. Currently, the\r\nprogram supports AppDynamics, BlazeMeter, and WebPageTest but aims to\r\nsupport other load testing tools like SilkPerformer and Visual Studio\r\nTest Suite as well in the future.\r\n\r\nGetting Started\r\n===============\r\n\r\nInstallation (Basic)\r\n--------------------\r\n\r\n1. Run ``pip install cd_perf_promotion``\r\n2. You\u2019re done!\r\n\r\nInstallation (Advanced)\r\n-----------------------\r\n\r\n1. Make sure that you have the latest version of Python and Pip\r\n   installed and that you can run both via your command-line interface\r\n   (CLI).\r\n2. Download the source code and navigate to it using your CLI.\r\n3. Inside the cd\\_perf\\_promotion downloaded directory, run\r\n   ``python setup.py install`` to begin installation.\r\n4. The application will download the necessary dependencies via Pip and\r\n   install itself. You will now be able to run the program from your CLI\r\n   via the command ``cdperfpromotion``.\r\n5. You\u2019re done!\r\n\r\nDefining Your Promotion Criteria\r\n--------------------------------\r\n\r\nYour ``config.json`` file contains all of the configuration information\r\nthat the tool needs to retrieve data from your performance tools and\r\nevaluate whether your application meets your performance standards.\r\nWe\u2019ve provided some sample configuration files (located in\r\n``documentation/sample_configs/input``) to help you get started. A\r\ncomplete list of all of the available data items that can be used to\r\nevaluate the performance of your application and information on what\r\nthey really mean is available in the ``dictionary.md`` file inside the\r\n``documentation`` directory.\r\n\r\nWe\u2019ve put a lot of work into making sure that the program is modular and\r\ncustomizable so that you don\u2019t have to include all of the data items\r\nthat exist in the configuration file. Instead, only include the tools\r\nthat you are using and the data items that you would like to include.\r\nAnything not included will not be evaluated against. Please note that\r\nyou must include configuration information for the tools used to gather\r\nthe information that is defined. For example, if you wanted to include\r\nyour application\u2019s average response time, you must also include a\r\nBlazeMeter section with a BlazeMeter API key and test ID.\r\n\r\nEvaluating the Results\r\n======================\r\n\r\nThe ``promotion_gates`` JSON object in the output file contains all of\r\nthe high-level information about whether each data metric met the\r\nconfiguration file target. If any of the transactions/runs has a data\r\nitem that does not meet the predefined performance target, the whole\r\ndata item is marked as failed in the ``promotion_gates`` section. If a\r\ndata item is failed, you can go up to that respective data item\u2019s parent\r\ntool and figure out where it failed and what the actual result was.\r\n\r\nFor example, the sample configuration file ``config_all.json.sample``\r\ndefines that there must not be any AppDynamics health rule violations\r\nwith a severity of warning (``\"warning\": true``) or critical\r\n(``\"critical\": true``). Unfortunately, the output file,\r\n``cdperfpromodata_timestamp_all.json.sample``, states in the\r\n``promotion_gates`` section that this data item has failed\r\n(``\"appdynamics_health\": false``). Knowing that, we can go up and look\r\nat the ``appdynamics`` section which reveals that the application we\u2019re\r\nevaluating has a health rule violation with a severity of warning that\r\nis notifying us that the application is using too much memory.\r\n\r\nIt\u2019s important to note that if any of the data items specified in the\r\nconfiguration file fails, the entire application will fail and will not\r\nbe promoted to the next stage.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CDKGlobal/cd-performance-promotion", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cd_perf_promotion", "package_url": "https://pypi.org/project/cd_perf_promotion/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cd_perf_promotion/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/CDKGlobal/cd-performance-promotion"}, "release_url": "https://pypi.org/project/cd_perf_promotion/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Evaluate and promote builds on a CI/CD platform based on performance", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"continuous-delivery-performance-promotion-tool\">\n<h2>Continuous Delivery Performance Promotion Tool</h2>\n<p>The Continuous Delivery Performance Promotion Tool is a Python program\nthat is used to evaluate whether applications are performing well enough\nto be moved on to the next stage in the continuous delivery system. This\ntool allows users to define how their application should be performing\nvia a simple JSON configuration file and then evaluates the\napplication\u2019s actual performance against those criteria. Currently, the\nprogram supports AppDynamics, BlazeMeter, and WebPageTest but aims to\nsupport other load testing tools like SilkPerformer and Visual Studio\nTest Suite as well in the future.</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<div id=\"installation-basic\">\n<h3>Installation (Basic)</h3>\n<ol>\n<li>Run <tt>pip install cd_perf_promotion</tt></li>\n<li>You\u2019re done!</li>\n</ol>\n</div>\n<div id=\"installation-advanced\">\n<h3>Installation (Advanced)</h3>\n<ol>\n<li>Make sure that you have the latest version of Python and Pip\ninstalled and that you can run both via your command-line interface\n(CLI).</li>\n<li>Download the source code and navigate to it using your CLI.</li>\n<li>Inside the cd_perf_promotion downloaded directory, run\n<tt>python setup.py install</tt> to begin installation.</li>\n<li>The application will download the necessary dependencies via Pip and\ninstall itself. You will now be able to run the program from your CLI\nvia the command <tt>cdperfpromotion</tt>.</li>\n<li>You\u2019re done!</li>\n</ol>\n</div>\n<div id=\"defining-your-promotion-criteria\">\n<h3>Defining Your Promotion Criteria</h3>\n<p>Your <tt>config.json</tt> file contains all of the configuration information\nthat the tool needs to retrieve data from your performance tools and\nevaluate whether your application meets your performance standards.\nWe\u2019ve provided some sample configuration files (located in\n<tt>documentation/sample_configs/input</tt>) to help you get started. A\ncomplete list of all of the available data items that can be used to\nevaluate the performance of your application and information on what\nthey really mean is available in the <tt>dictionary.md</tt> file inside the\n<tt>documentation</tt> directory.</p>\n<p>We\u2019ve put a lot of work into making sure that the program is modular and\ncustomizable so that you don\u2019t have to include all of the data items\nthat exist in the configuration file. Instead, only include the tools\nthat you are using and the data items that you would like to include.\nAnything not included will not be evaluated against. Please note that\nyou must include configuration information for the tools used to gather\nthe information that is defined. For example, if you wanted to include\nyour application\u2019s average response time, you must also include a\nBlazeMeter section with a BlazeMeter API key and test ID.</p>\n</div>\n</div>\n<div id=\"evaluating-the-results\">\n<h2>Evaluating the Results</h2>\n<p>The <tt>promotion_gates</tt> JSON object in the output file contains all of\nthe high-level information about whether each data metric met the\nconfiguration file target. If any of the transactions/runs has a data\nitem that does not meet the predefined performance target, the whole\ndata item is marked as failed in the <tt>promotion_gates</tt> section. If a\ndata item is failed, you can go up to that respective data item\u2019s parent\ntool and figure out where it failed and what the actual result was.</p>\n<p>For example, the sample configuration file <tt>config_all.json.sample</tt>\ndefines that there must not be any AppDynamics health rule violations\nwith a severity of warning (<tt>\"warning\": true</tt>) or critical\n(<tt>\"critical\": true</tt>). Unfortunately, the output file,\n<tt>cdperfpromodata_timestamp_all.json.sample</tt>, states in the\n<tt>promotion_gates</tt> section that this data item has failed\n(<tt>\"appdynamics_health\": false</tt>). Knowing that, we can go up and look\nat the <tt>appdynamics</tt> section which reveals that the application we\u2019re\nevaluating has a health rule violation with a severity of warning that\nis notifying us that the application is using too much memory.</p>\n<p>It\u2019s important to note that if any of the data items specified in the\nconfiguration file fails, the entire application will fail and will not\nbe promoted to the next stage.</p>\n</div>\n\n          </div>"}, "last_serial": 1708134, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "bdf86d427715be77cffbf8555535a857", "sha256": "ba61596c08d42cdc34859ea1a0bc1158d718f3586a4e0b363d8502d97c345a08"}, "downloads": -1, "filename": "cd_perf_promotion-1.0.0.zip", "has_sig": false, "md5_digest": "bdf86d427715be77cffbf8555535a857", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36514, "upload_time": "2015-09-03T22:09:11", "upload_time_iso_8601": "2015-09-03T22:09:11.001350Z", "url": "https://files.pythonhosted.org/packages/44/1d/094508ac9debf30dffe8ab27baf739954743453172f49aa63d7429f0cfc6/cd_perf_promotion-1.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdf86d427715be77cffbf8555535a857", "sha256": "ba61596c08d42cdc34859ea1a0bc1158d718f3586a4e0b363d8502d97c345a08"}, "downloads": -1, "filename": "cd_perf_promotion-1.0.0.zip", "has_sig": false, "md5_digest": "bdf86d427715be77cffbf8555535a857", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36514, "upload_time": "2015-09-03T22:09:11", "upload_time_iso_8601": "2015-09-03T22:09:11.001350Z", "url": "https://files.pythonhosted.org/packages/44/1d/094508ac9debf30dffe8ab27baf739954743453172f49aa63d7429f0cfc6/cd_perf_promotion-1.0.0.zip", "yanked": false}], "timestamp": "Thu May  7 22:34:55 2020"}