{"info": {"author": "Ivan Habunek", "author_email": "ivan.habunek@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "===================================\nPDF417 barcode generator for Python\n===================================\n\n.. image:: https://img.shields.io/travis/mosquito/pdf417.svg?maxAge=3600&style=flat-square\n   :target: https://travis-ci.org/mosquito/pdf417\n\n.. image:: https://img.shields.io/badge/author-%40mosquito-blue.svg?maxAge=3600&style=flat-square\n   :target: https://twitter.com/mosquito\n\n.. image:: https://img.shields.io/github/license/mosquito/pdf417.svg?maxAge=3600&style=flat-square\n   :target: https://opensource.org/licenses/MIT\n\n.. image:: https://img.shields.io/pypi/v/pdf417.svg?maxAge=3600&style=flat-square\n   :target: https://pypi.python.org/pypi/pdf417\n\n\nEasily encode your data into a 2D barcode using the PDF417 format.\n\n.. image:: https://raw.githubusercontent.com/mosquito/pdf417/master/images/1_basic.jpg\n\nLicensed under the MIT License, see `LICENSE <LICENSE>`_.\n\nInstallation\n------------\n\nInstall using pip:\n\n.. code-block::\n\n    pip install pdf417\n\n\nCLI\n---\n\nThe ``pdf417gen`` command can be used to generate a barcode from commandline. It\ntakes the input either as an argument or from stdin.\n\n.. code-block:: bash\n\n    # Show help\n    pdf417gen encode --help\n\n    # Encode given text and display the barcode\n    pdf417gen encode \"Beautiful is better than ugly\"\n\n    # Encode given text and save barcode to a file (extension determines format)\n    pdf417gen encode -o barcode.png \"Explicit is better than implicit\"\n\n    # Input from a file\n    pdf417gen encode < input.txt\n\n    # Piped input\n    python -c \"import this\" | pdf417gen encode\n\n\nUsage\n-----\n\nCreating bar codes is done in two steps:\n\n* Encode a string to a list of code words using ``encode()``\n* Render the barcode using one of the rendering functions: ``render_image()``,\n  ``render_svg()``.\n\nUsage overview:\n\n.. code-block:: python\n\n    from pdf417 import encode, render_image, render_svg\n\n    # Some data to encode\n    text = \"\"\"Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\"\"\"\n\n    # Convert to code words\n    codes = encode(text)\n\n    # Generate barcode as image\n    image = render_image(codes)  # Pillow Image object\n    image.save('barcode.jpg')\n\n    # Generate barcode as SVG\n    svg = render_svg(codes)  # ElementTree object\n    svg.write(\"barcode.svg\")\n\n\nSupports strings (unicode in py2) and byte arrays (str in py2):\n\n.. code-block:: python\n\n    # These two inputs encode to the same code words\n    encode(u\"love \ud83d\udc94\")\n    encode(b\"love \\xf0\\x9f\\x92\\x94\")\n\n    # Default encoding is UTF-8, but you can specify your own\n    encode(u\"love \ud83d\udc94\", encoding=\"utf-8\")\n\n\n\nEncoding data\n-------------\n\nThe first step is to encode your data to a list of code words.\n\n.. code-block:: python\n\n    encode(data, columns=6, security_level=2)\n\nColumns\n~~~~~~~\n\nThe bar code size can be customized by defining the number of columns used to\nrender the data, between 1 and 30, the default value is 6. A bar code can have a\nmaximum of 90 rows, so for larger data sets you may need to increase the number\nof columns to decrease the rows count.\n\n.. code-block:: python\n\n    codes = encode(text, columns=12)\n    image = render_image(codes)\n    image.show()\n\n.. image:: https://raw.githubusercontent.com/mosquito/pdf417/master/images/2_columns.jpg\n\nSecurity level\n~~~~~~~~~~~~~~\n\nIncreasing the security level will produce stronger (and more numerous) error\ncorrection codes, making the bar code larger, but less prone to corruption. The\nsecurity level can range from 0 to 8, and procuces ``2^(level+1)`` error\ncorrection code words, meaning level 0 produces 2 code words and level 8\nproduces 512. The default security level is 2.\n\n.. code-block:: python\n\n    codes = encode(text, columns=12, security_level=6)\n    image = render_image(codes)\n    image.show()\n\n.. image:: https://raw.githubusercontent.com/mosquito/pdf417/master/images/3_security_level.jpg\n\nAuto Numeric Compaction Mode\n----------------------------\n\nThis mode can pack almost 3 digits (2.93) info a symbol character.\nThe words with length less 13 symbols will be invoked as Text\n\n.. code-block:: python\n\n    codes = encode(text, numeric_compaction=True)\n\n\nRender image\n------------\n\nThe ``render_image`` function takes the following options:\n\n* ``scale`` - module width, in pixels (default: 3)\n* ``ratio`` - module height to width ratio (default: 3)\n* ``padding`` - image padding, in pixels (default: 20)\n* ``fg_color`` - foreground color (default: ``#000000``)\n* ``bg_color`` - background color (default: ``#FFFFFF``)\n\n.. note::\n\n   A module is the smallest element of a barcode, analogous to a pixel. Modules\n   in a PDF417 bar code are tall and narrow.\n\nThe function returns a Pillow Image_ object containing the barcode.\n\nColors can be specified as hex codes or using HTML color names.\n\n.. code-block:: python\n\n    codes = encode(text, columns=3)\n    image = render_image(codes, scale=5, ratio=2, padding=5, fg_color=\"Indigo\", bg_color=\"#ddd\")\n    image.show()\n\n.. image:: https://raw.githubusercontent.com/mosquito/pdf417/master/images/4_rendering.jpg\n\nRender SVG\n----------\n\nThe ``render_svg`` function takes the following options:\n\n* ``scale`` - module width, in pixels (default: 3)\n* ``ratio`` - module height to width ratio (default: 3)\n* ``padding`` - image padding, in pixels (default: 20)\n* ``color`` - foreground color (default: `#000000`)\n\nThe function returns a ElementTree_ object containing the barcode in SVG format.\n\nUnlike ``render_image``, this function does not take a background color option.\nThe background is left transparent.\n\n.. code-block:: python\n\n    codes = encode(text, columns=3)\n    svg = render_svg(codes, scale=5, ratio=2, color=\"Seaweed\")\n    svg.write('barcode.svg')\n\nSee also\n~~~~~~~~\n\n* pdf417-php_ - a PHP implementation\n* golang-pdf417_ - a Go implementation\n* Specifications_ - USS-PDF-417\n\n.. _pdf417-php: https://github.com/ihabunek/pdf417-php\n.. _golang-pdf417: https://github.com/ruudk/golang-pdf417\n.. _ElementTree: https://docs.python.org/3.5/library/xml.etree.elementtree.html#elementtree-objects\n.. _Image: https://pillow.readthedocs.io/en/3.2.x/reference/Image.html\n.. _Specifications: https://www.expresscorp.com/public/uploads/specifications/44/USS-PDF-417.pdf", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mosquito/pdf417/", "keywords": "pdf417 2d barcode generator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pdf417", "package_url": "https://pypi.org/project/pdf417/", "platform": "", "project_url": "https://pypi.org/project/pdf417/", "project_urls": {"Homepage": "https://github.com/mosquito/pdf417/"}, "release_url": "https://pypi.org/project/pdf417/0.8.0/", "requires_dist": null, "requires_python": "", "summary": "PDF417 2D barcode generator for Python", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/mosquito/pdf417\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/mosquito/pdf417.svg?maxAge=3600&amp;style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb0e1e7f23800c6cd9b27433a2f8fb9b2c319bd0/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d6f73717569746f2f7064663431372e7376673f6d61784167653d33363030267374796c653d666c61742d737175617265\"></a>\n<a href=\"https://twitter.com/mosquito\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/author-%40mosquito-blue.svg?maxAge=3600&amp;style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c56412867b9438cc8f9d9a648f2705b5eefdc87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f617574686f722d2534306d6f73717569746f2d626c75652e7376673f6d61784167653d33363030267374796c653d666c61742d737175617265\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/license/mosquito/pdf417.svg?maxAge=3600&amp;style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f4c9c922b7884e9a0e8b4dfe962e7ce9295f373/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6f73717569746f2f7064663431372e7376673f6d61784167653d33363030267374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.python.org/pypi/pdf417\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pdf417.svg?maxAge=3600&amp;style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eba8228cee3c110d876a690bf55db0a478dd91ef/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7064663431372e7376673f6d61784167653d33363030267374796c653d666c61742d737175617265\"></a>\n<p>Easily encode your data into a 2D barcode using the PDF417 format.</p>\n<img alt=\"https://raw.githubusercontent.com/mosquito/pdf417/master/images/1_basic.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/924f52ab1af491a96deff78210ba4918d1ea76ab/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6f73717569746f2f7064663431372f6d61737465722f696d616765732f315f62617369632e6a7067\">\n<p>Licensed under the MIT License, see <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install using pip:</p>\n<pre>pip install pdf417\n</pre>\n</div>\n<div id=\"cli\">\n<h2>CLI</h2>\n<p>The <tt>pdf417gen</tt> command can be used to generate a barcode from commandline. It\ntakes the input either as an argument or from stdin.</p>\n<pre><span class=\"c1\"># Show help\n</span>pdf417gen encode --help\n\n<span class=\"c1\"># Encode given text and display the barcode\n</span>pdf417gen encode <span class=\"s2\">\"Beautiful is better than ugly\"</span>\n\n<span class=\"c1\"># Encode given text and save barcode to a file (extension determines format)\n</span>pdf417gen encode -o barcode.png <span class=\"s2\">\"Explicit is better than implicit\"</span>\n\n<span class=\"c1\"># Input from a file\n</span>pdf417gen encode &lt; input.txt\n\n<span class=\"c1\"># Piped input\n</span>python -c <span class=\"s2\">\"import this\"</span> <span class=\"p\">|</span> pdf417gen encode\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Creating bar codes is done in two steps:</p>\n<ul>\n<li>Encode a string to a list of code words using <tt>encode()</tt></li>\n<li>Render the barcode using one of the rendering functions: <tt>render_image()</tt>,\n<tt>render_svg()</tt>.</li>\n</ul>\n<p>Usage overview:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pdf417</span> <span class=\"kn\">import</span> <span class=\"n\">encode</span><span class=\"p\">,</span> <span class=\"n\">render_image</span><span class=\"p\">,</span> <span class=\"n\">render_svg</span>\n\n<span class=\"c1\"># Some data to encode</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\"\"\"</span>\n\n<span class=\"c1\"># Convert to code words</span>\n<span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate barcode as image</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">render_image</span><span class=\"p\">(</span><span class=\"n\">codes</span><span class=\"p\">)</span>  <span class=\"c1\"># Pillow Image object</span>\n<span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'barcode.jpg'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate barcode as SVG</span>\n<span class=\"n\">svg</span> <span class=\"o\">=</span> <span class=\"n\">render_svg</span><span class=\"p\">(</span><span class=\"n\">codes</span><span class=\"p\">)</span>  <span class=\"c1\"># ElementTree object</span>\n<span class=\"n\">svg</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"barcode.svg\"</span><span class=\"p\">)</span>\n</pre>\n<p>Supports strings (unicode in py2) and byte arrays (str in py2):</p>\n<pre><span class=\"c1\"># These two inputs encode to the same code words</span>\n<span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"love \ud83d\udc94\"</span><span class=\"p\">)</span>\n<span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"love </span><span class=\"se\">\\xf0\\x9f\\x92\\x94</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Default encoding is UTF-8, but you can specify your own</span>\n<span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"love \ud83d\udc94\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"encoding-data\">\n<h2>Encoding data</h2>\n<p>The first step is to encode your data to a list of code words.</p>\n<pre><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">security_level</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<div id=\"columns\">\n<h3>Columns</h3>\n<p>The bar code size can be customized by defining the number of columns used to\nrender the data, between 1 and 30, the default value is 6. A bar code can have a\nmaximum of 90 rows, so for larger data sets you may need to increase the number\nof columns to decrease the rows count.</p>\n<pre><span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">render_image</span><span class=\"p\">(</span><span class=\"n\">codes</span><span class=\"p\">)</span>\n<span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<img alt=\"https://raw.githubusercontent.com/mosquito/pdf417/master/images/2_columns.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f207c8f781b7a4399e3b37afe760f6013d0978f8/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6f73717569746f2f7064663431372f6d61737465722f696d616765732f325f636f6c756d6e732e6a7067\">\n</div>\n<div id=\"security-level\">\n<h3>Security level</h3>\n<p>Increasing the security level will produce stronger (and more numerous) error\ncorrection codes, making the bar code larger, but less prone to corruption. The\nsecurity level can range from 0 to 8, and procuces <tt><span class=\"pre\">2^(level+1)</span></tt> error\ncorrection code words, meaning level 0 produces 2 code words and level 8\nproduces 512. The default security level is 2.</p>\n<pre><span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">security_level</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">render_image</span><span class=\"p\">(</span><span class=\"n\">codes</span><span class=\"p\">)</span>\n<span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<img alt=\"https://raw.githubusercontent.com/mosquito/pdf417/master/images/3_security_level.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/125316a05401f7d39312ae3463ce6f5bbaa41303/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6f73717569746f2f7064663431372f6d61737465722f696d616765732f335f73656375726974795f6c6576656c2e6a7067\">\n</div>\n</div>\n<div id=\"auto-numeric-compaction-mode\">\n<h2>Auto Numeric Compaction Mode</h2>\n<p>This mode can pack almost 3 digits (2.93) info a symbol character.\nThe words with length less 13 symbols will be invoked as Text</p>\n<pre><span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">numeric_compaction</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"render-image\">\n<h2>Render image</h2>\n<p>The <tt>render_image</tt> function takes the following options:</p>\n<ul>\n<li><tt>scale</tt> - module width, in pixels (default: 3)</li>\n<li><tt>ratio</tt> - module height to width ratio (default: 3)</li>\n<li><tt>padding</tt> - image padding, in pixels (default: 20)</li>\n<li><tt>fg_color</tt> - foreground color (default: <tt>#000000</tt>)</li>\n<li><tt>bg_color</tt> - background color (default: <tt>#FFFFFF</tt>)</li>\n</ul>\n<div>\n<p>Note</p>\n<p>A module is the smallest element of a barcode, analogous to a pixel. Modules\nin a PDF417 bar code are tall and narrow.</p>\n</div>\n<p>The function returns a Pillow <a href=\"https://pillow.readthedocs.io/en/3.2.x/reference/Image.html\" rel=\"nofollow\">Image</a> object containing the barcode.</p>\n<p>Colors can be specified as hex codes or using HTML color names.</p>\n<pre><span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">render_image</span><span class=\"p\">(</span><span class=\"n\">codes</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">fg_color</span><span class=\"o\">=</span><span class=\"s2\">\"Indigo\"</span><span class=\"p\">,</span> <span class=\"n\">bg_color</span><span class=\"o\">=</span><span class=\"s2\">\"#ddd\"</span><span class=\"p\">)</span>\n<span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<img alt=\"https://raw.githubusercontent.com/mosquito/pdf417/master/images/4_rendering.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9cf84724587abc5741595c77ad63b3749d733984/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6f73717569746f2f7064663431372f6d61737465722f696d616765732f345f72656e646572696e672e6a7067\">\n</div>\n<div id=\"render-svg\">\n<h2>Render SVG</h2>\n<p>The <tt>render_svg</tt> function takes the following options:</p>\n<ul>\n<li><tt>scale</tt> - module width, in pixels (default: 3)</li>\n<li><tt>ratio</tt> - module height to width ratio (default: 3)</li>\n<li><tt>padding</tt> - image padding, in pixels (default: 20)</li>\n<li><tt>color</tt> - foreground color (default: <cite>#000000</cite>)</li>\n</ul>\n<p>The function returns a <a href=\"https://docs.python.org/3.5/library/xml.etree.elementtree.html#elementtree-objects\" rel=\"nofollow\">ElementTree</a> object containing the barcode in SVG format.</p>\n<p>Unlike <tt>render_image</tt>, this function does not take a background color option.\nThe background is left transparent.</p>\n<pre><span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">svg</span> <span class=\"o\">=</span> <span class=\"n\">render_svg</span><span class=\"p\">(</span><span class=\"n\">codes</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"Seaweed\"</span><span class=\"p\">)</span>\n<span class=\"n\">svg</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'barcode.svg'</span><span class=\"p\">)</span>\n</pre>\n<div id=\"see-also\">\n<h3>See also</h3>\n<ul>\n<li><a href=\"https://github.com/ihabunek/pdf417-php\" rel=\"nofollow\">pdf417-php</a> - a PHP implementation</li>\n<li><a href=\"https://github.com/ruudk/golang-pdf417\" rel=\"nofollow\">golang-pdf417</a> - a Go implementation</li>\n<li><a href=\"https://www.expresscorp.com/public/uploads/specifications/44/USS-PDF-417.pdf\" rel=\"nofollow\">Specifications</a> - USS-PDF-417</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4457099, "releases": {"0.7.0": [{"comment_text": "", "digests": {"md5": "1b8b5e2563b1a0cbb10976211d0a7b62", "sha256": "727b1baf6d624b1381625105e1de0e32be9161d3c620a7ac8eb85efdf2ca69f2"}, "downloads": -1, "filename": "pdf417-0.7.0.tar.gz", "has_sig": false, "md5_digest": "1b8b5e2563b1a0cbb10976211d0a7b62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23100, "upload_time": "2018-10-30T07:53:59", "upload_time_iso_8601": "2018-10-30T07:53:59.955087Z", "url": "https://files.pythonhosted.org/packages/98/84/ff3348ee3264dee6692a86e4562699e76fe9001a17bb5aa9a32bdc1acf62/pdf417-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "588cc72592ca8e69f5debff129c900a1", "sha256": "49fb625f099a5d8cc6cb4bba75ea9e32a954e20220f333bbbfeb932dac8ef8e5"}, "downloads": -1, "filename": "pdf417-0.7.1.tar.gz", "has_sig": false, "md5_digest": "588cc72592ca8e69f5debff129c900a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23859, "upload_time": "2018-10-30T20:37:09", "upload_time_iso_8601": "2018-10-30T20:37:09.381481Z", "url": "https://files.pythonhosted.org/packages/4b/ce/361d0a26829b0dd7581536c70030fca942edde7cf7f3ceb875de21afa5aa/pdf417-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "472f85a7ea202745730799743b13b090", "sha256": "8807fb00103b8e49ed58ce4637e3a0552022660e87a7db539698069a6b2fe7da"}, "downloads": -1, "filename": "pdf417-0.7.2.tar.gz", "has_sig": false, "md5_digest": "472f85a7ea202745730799743b13b090", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24529, "upload_time": "2018-10-31T15:44:35", "upload_time_iso_8601": "2018-10-31T15:44:35.424979Z", "url": "https://files.pythonhosted.org/packages/fd/2c/af2410435a5f979ee1a5ad6d83504a4c5527960a0dcbc0da387ab2dd422b/pdf417-0.7.2.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "8f66ca6e31f061f2f1d716c279460f20", "sha256": "ef04f78044891d88423073480e4d091554e95a316a8e5581c9d7aa5832b42595"}, "downloads": -1, "filename": "pdf417-0.8.0.tar.gz", "has_sig": false, "md5_digest": "8f66ca6e31f061f2f1d716c279460f20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23974, "upload_time": "2018-11-06T11:53:23", "upload_time_iso_8601": "2018-11-06T11:53:23.064655Z", "url": "https://files.pythonhosted.org/packages/7b/3d/678a172b7d455566e552f3574ee06432eb8b92e3a324aeb47152a3d2cb95/pdf417-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8f66ca6e31f061f2f1d716c279460f20", "sha256": "ef04f78044891d88423073480e4d091554e95a316a8e5581c9d7aa5832b42595"}, "downloads": -1, "filename": "pdf417-0.8.0.tar.gz", "has_sig": false, "md5_digest": "8f66ca6e31f061f2f1d716c279460f20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23974, "upload_time": "2018-11-06T11:53:23", "upload_time_iso_8601": "2018-11-06T11:53:23.064655Z", "url": "https://files.pythonhosted.org/packages/7b/3d/678a172b7d455566e552f3574ee06432eb8b92e3a324aeb47152a3d2cb95/pdf417-0.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:16 2020"}