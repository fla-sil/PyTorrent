{"info": {"author": "Francisco Vicent", "author_email": "franciscovicent@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Rust"], "description": "# attrs2bin\n`attrs2bin` is a Python library that lets you serialize/deserialize your [`attrs`](https://www.attrs.org/en/stable/)-based classes to/from a byte stream. It is compatible with Rust's [`bincode`](https://github.com/servo/bincode), so you can seralize objects in Python, send the resulting byte stream through a socket or any other transport and deserialize it back to a Rust object. It can also deserialize objects from a socket (see below).\n\n# Example\n\n`attrs2bin` provides just two simple funcions: `serialize()`, which takes an object and returns a byte stream, and `deserialize()`, that takes a byte stream and an `attrs`-based class and returns an object.\n\n```import attr\nimport attrs2bin\n\n@attr.s(auto_attribs=True)\nclass Sprite:\n    name: str\n    x: int\n    y: int\n\nmy_sprite = Sprite(\"My sprite\", 35, 70)\nserialized = attrs2bin.serialize(my_sprite)\ndeserialized = attrs2bin.deserialize(serialized, Sprite)\nassert my_sprite == deserialized\n```\n\n# What can be serialized?\n\nObjects of any `attrs`-based class can be serialized, as long as all their fields have a type (using type annotations or `attr.ib(type=...)`). `attrs2bin` ships with serializer for the following types:\n\n* `int`\n* `float`\n* `bytes`\n* `str`\n* `bool`\n\nYou can create and register your own serializers for specific types by creating a class that implements `attrs2bin.interfaces.ITypeSerializer` and calling `attrs2bin.register_serializer()`.\n\n# Deserializing from a socket\n\nInstead of `deserialize(bytes, cls)`, you can use `deserialize_from_socket(sck, cls)`, which will read the necessary bytes from a socket and return a Python object. `sck` must be any object that implements `attrs2bin.interfaces.IReadableSocket`.\n\n# Rust compatibility\n\nThe serializers that ships with `attrs2bin` are all compatible with Rust's [`bincode`](https://github.com/servo/bincode) library. Keep under your pillow the following table in order to create compatible types between Python and Rust:\n\n| Python type                   | Rust type     |\n| ---------------------------   |:-------------:|\n| `int` / `attrs2bin.SignedInt` | `i64`         |\n| `attrs2bin.UnsignedInt`       | `u64`         |\n| `float` / `attrs2bin.Float64` | `f64`         |\n| `attrs2bin.Float32`           | `f32`         |\n| `bytes`                       | `Vec<u8>`     |\n| `str`                         | `String`      |\n| `bool`                        | `bool`        |\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fvicent/attrs2bin", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "attrs2bin", "package_url": "https://pypi.org/project/attrs2bin/", "platform": "", "project_url": "https://pypi.org/project/attrs2bin/", "project_urls": {"Homepage": "https://github.com/fvicent/attrs2bin"}, "release_url": "https://pypi.org/project/attrs2bin/0.0.1/", "requires_dist": ["zope.interface", "zope.component", "attrs"], "requires_python": ">=3.6", "summary": "Binary serializer for attrs-based classes", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>attrs2bin</h1>\n<p><code>attrs2bin</code> is a Python library that lets you serialize/deserialize your <a href=\"https://www.attrs.org/en/stable/\" rel=\"nofollow\"><code>attrs</code></a>-based classes to/from a byte stream. It is compatible with Rust's <a href=\"https://github.com/servo/bincode\" rel=\"nofollow\"><code>bincode</code></a>, so you can seralize objects in Python, send the resulting byte stream through a socket or any other transport and deserialize it back to a Rust object. It can also deserialize objects from a socket (see below).</p>\n<h1>Example</h1>\n<p><code>attrs2bin</code> provides just two simple funcions: <code>serialize()</code>, which takes an object and returns a byte stream, and <code>deserialize()</code>, that takes a byte stream and an <code>attrs</code>-based class and returns an object.</p>\n<pre>import attrs2bin\n\n@attr.s(auto_attribs=True)\nclass Sprite:\n    name: str\n    x: int\n    y: int\n\nmy_sprite = Sprite(\"My sprite\", 35, 70)\nserialized = attrs2bin.serialize(my_sprite)\ndeserialized = attrs2bin.deserialize(serialized, Sprite)\nassert my_sprite == deserialized\n</pre>\n<h1>What can be serialized?</h1>\n<p>Objects of any <code>attrs</code>-based class can be serialized, as long as all their fields have a type (using type annotations or <code>attr.ib(type=...)</code>). <code>attrs2bin</code> ships with serializer for the following types:</p>\n<ul>\n<li><code>int</code></li>\n<li><code>float</code></li>\n<li><code>bytes</code></li>\n<li><code>str</code></li>\n<li><code>bool</code></li>\n</ul>\n<p>You can create and register your own serializers for specific types by creating a class that implements <code>attrs2bin.interfaces.ITypeSerializer</code> and calling <code>attrs2bin.register_serializer()</code>.</p>\n<h1>Deserializing from a socket</h1>\n<p>Instead of <code>deserialize(bytes, cls)</code>, you can use <code>deserialize_from_socket(sck, cls)</code>, which will read the necessary bytes from a socket and return a Python object. <code>sck</code> must be any object that implements <code>attrs2bin.interfaces.IReadableSocket</code>.</p>\n<h1>Rust compatibility</h1>\n<p>The serializers that ships with <code>attrs2bin</code> are all compatible with Rust's <a href=\"https://github.com/servo/bincode\" rel=\"nofollow\"><code>bincode</code></a> library. Keep under your pillow the following table in order to create compatible types between Python and Rust:</p>\n<table>\n<thead>\n<tr>\n<th>Python type</th>\n<th align=\"center\">Rust type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int</code> / <code>attrs2bin.SignedInt</code></td>\n<td align=\"center\"><code>i64</code></td>\n</tr>\n<tr>\n<td><code>attrs2bin.UnsignedInt</code></td>\n<td align=\"center\"><code>u64</code></td>\n</tr>\n<tr>\n<td><code>float</code> / <code>attrs2bin.Float64</code></td>\n<td align=\"center\"><code>f64</code></td>\n</tr>\n<tr>\n<td><code>attrs2bin.Float32</code></td>\n<td align=\"center\"><code>f32</code></td>\n</tr>\n<tr>\n<td><code>bytes</code></td>\n<td align=\"center\"><code>Vec&lt;u8&gt;</code></td>\n</tr>\n<tr>\n<td><code>str</code></td>\n<td align=\"center\"><code>String</code></td>\n</tr>\n<tr>\n<td><code>bool</code></td>\n<td align=\"center\"><code>bool</code></td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 6858263, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "03f74432a0f7720ab906488ccc171e3b", "sha256": "8ba2bab66439ca69ced30421eca76338a18a72d904eaf30f445b3917cce958ec"}, "downloads": -1, "filename": "attrs2bin-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "03f74432a0f7720ab906488ccc171e3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7098, "upload_time": "2020-03-22T04:23:29", "upload_time_iso_8601": "2020-03-22T04:23:29.116556Z", "url": "https://files.pythonhosted.org/packages/fe/bd/86cc63c7d38f23b16abc0117d9a4db161cc6bb252c187749fc2bc6b9d785/attrs2bin-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c08c5b66e51324ee970861334acc1ba2", "sha256": "aef44ab25ef4f565d8a1eeddcdbe44d5d02ab21b5c42d9cfe754c0ff215b57f8"}, "downloads": -1, "filename": "attrs2bin-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c08c5b66e51324ee970861334acc1ba2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4905, "upload_time": "2020-03-22T04:23:31", "upload_time_iso_8601": "2020-03-22T04:23:31.392386Z", "url": "https://files.pythonhosted.org/packages/15/dd/2cad1e314aad787d907cd3b6e6b114bb99589b368d6643e0fc6eb5c6859b/attrs2bin-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "03f74432a0f7720ab906488ccc171e3b", "sha256": "8ba2bab66439ca69ced30421eca76338a18a72d904eaf30f445b3917cce958ec"}, "downloads": -1, "filename": "attrs2bin-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "03f74432a0f7720ab906488ccc171e3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7098, "upload_time": "2020-03-22T04:23:29", "upload_time_iso_8601": "2020-03-22T04:23:29.116556Z", "url": "https://files.pythonhosted.org/packages/fe/bd/86cc63c7d38f23b16abc0117d9a4db161cc6bb252c187749fc2bc6b9d785/attrs2bin-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c08c5b66e51324ee970861334acc1ba2", "sha256": "aef44ab25ef4f565d8a1eeddcdbe44d5d02ab21b5c42d9cfe754c0ff215b57f8"}, "downloads": -1, "filename": "attrs2bin-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c08c5b66e51324ee970861334acc1ba2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4905, "upload_time": "2020-03-22T04:23:31", "upload_time_iso_8601": "2020-03-22T04:23:31.392386Z", "url": "https://files.pythonhosted.org/packages/15/dd/2cad1e314aad787d907cd3b6e6b114bb99589b368d6643e0fc6eb5c6859b/attrs2bin-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:30 2020"}