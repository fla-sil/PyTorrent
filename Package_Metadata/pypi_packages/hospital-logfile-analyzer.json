{"info": {"author": "Pavlo Dyban (Doctolib GmbH)", "author_email": "pavlo.dyban@doctolib.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: Log Analysis"], "description": "# Introduction\nTool to convert plain-text hospital integration engines' log files to\nstructured data. Currently supported logfile formats:\n- Cloverleaf plain-text log files (NB: This tool is not affiliated with Infor Cloverleaf.)\n\n![Convert plain-text log files to structured data](https://github.com/doctolib/hospital_logfile_analyzer/blob/master/preview.png?raw=true)\n\n# How to install\n\n## Install from Pypi\n```bash\npip install hospital_logfile_analyzer\n```\n\n## Install from Github\nDownload the latest release as a `tar.gz` archive from the [Github repository page](https://github.com/doctolib/hospital_logfile_analyzer/releases):\n```bash\nwget https://github.com/doctolib/hospital_logfile_analyzer/archive/v.0.1.tar.gz\ntar -xvf v.0.1.tar.gz\ncd hospital_logfile_analyzer\nrm v.0.1.tar.gz\npython setup.py install\n```\n\n\n## Install from source code\nUsing git, clone the repository to your working directory, and install the package:\n```bash\ngit clone git@github.com:doctolib/hospital_logfile_analyzer.git\ncd hospital_logfile_analyzer\npython setup.py install\n```\n\n## Prerequisites\nThis package supports Python 3 and has not been tested with Python 2.\n\nTo view and run the attached Jupyter Notebooks, best install an\n[Anaconda environment](https://docs.anaconda.com/anaconda/install/).\n\n## Command-line interface\nYou can execute the logfile parser in the command-line of your choice (e.g. bash).\n`main.py` implements the command-line argument parser.\nDisplay all options:\n```bash\npython -m hospital_logfile_analyzer --help\n```\n\nThe easiest call to run the application:\n```bash\npython -m hospital_logfile_analyzer mylogfile.log output_structured_log.json\n```\n\nA more sophisticated application call would involve mapping and/or field filtering:\n```bash\npython -m hospital_logfile_analyzer mylogfile.log output_structured_log.json --mappingfile my_mapping.json --filterfile my_filter.json\n```\nFor instructions on how to create field maps and filters,\nsee the respective sections in text below.\n\n## Jupyter Notebook\nYou will find examples on how to execute this package in a Jupyter Notebook\ninside [jupyter_notebooks](jupyter_notebooks) directory.\n\n## Package\nYou can use the logfile parser directly in your Python code:\n```python\nfrom hospital_logfile_analyzer.parsers import parse\nparser = parse('hospital_logfile_analyzer/test/test.log')\nprint(len(parser.events))\n```\n\n## How to create custom mappings and field filters\n\n### Field Mapping\nFields can be mapped across different levels of hierarchy.\nE.g. you can map `root.child1.child2.key1` to `root.key1`.\nThe mapping allows you to propagate fields from lower levels of hierarchy\nto the top. Together with filters,\nthis allows for very efficient analysis of structured data.\n\nMapping is given by a JSON dictionary with the source field names being the\nkeys, and the target field names the values.\nThe field names inside subtrees are separated by dots.\n\nThe following example snippet will copy (or move, depending on the function\nparameters) the value of field `Tree.Error Code` into `Error Code`:\n```json\n{\n  \"Tree.Error Code\": \"Error Code\",\n  \"Tree.Result.Code\": \"Result Code\"\n}\n```\nThe field map has to be stored as a UTF-8 encoded JSON file. For instructions\non how to pass this file to the application, see the CLI or the package usage\ndocumentation in text above.\n\n### Field Filters\nField filters allow to remove fields and subtrees from the structured data.\n\nThe following example will remove fields `Tree.Error Code` and will keep\n`Tree.Result.Code`:\n```json\n{\n  \"Tree.Error Code\": false,\n  \"Tree.Result.Code\": true\n}\n```\nThe field map has to be stored as a UTF-8 encoded JSON file. For instructions\non how to pass this file to the application, see the CLI or the Python package\nusage documentation in text above.\n\n# How to test\nExecute in the root folder of the repository:\n```bash\npython -m unittest\n```\nThis will discover and execute all tests contained\ninside `hospital_logfile_analyzer/test`.\n\n# How to contribute\nYou can add your own logfile parsers:\n1. Inherit `YourOwnParser` from the abstract parent interface [`LogfileParser`](hospital_logfile_analyzer/parsers/logfile_parser.py).\n2. Add unit tests by adding `test_yourownparser.py` under `hospital_logfile_analyzer/test`.\n3. Commit changes to your own branch and create a pull request.\nThe tests on the branch must run green before the\nbranch can be merged.\n\n# License\nSee [LICENSE](LICENSE).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/doctolib/hospital_logfile_analyzer/archive/v.0.1.4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/doctolib/hospital_logfile_analyzer", "keywords": "logfile,parser,integration engine,communication server,HIS,hospital,information system,communication,TCP/IP,structured data", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hospital-logfile-analyzer", "package_url": "https://pypi.org/project/hospital-logfile-analyzer/", "platform": "", "project_url": "https://pypi.org/project/hospital-logfile-analyzer/", "project_urls": {"Download": "https://github.com/doctolib/hospital_logfile_analyzer/archive/v.0.1.4.tar.gz", "Homepage": "https://github.com/doctolib/hospital_logfile_analyzer"}, "release_url": "https://pypi.org/project/hospital-logfile-analyzer/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Tool to convert plain-text hospital integration engines' log files to structured data", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Introduction</h1>\n<p>Tool to convert plain-text hospital integration engines' log files to\nstructured data. Currently supported logfile formats:</p>\n<ul>\n<li>Cloverleaf plain-text log files (NB: This tool is not affiliated with Infor Cloverleaf.)</li>\n</ul>\n<p><img alt=\"Convert plain-text log files to structured data\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e793aef29a8f1314d745d9025a5f85db125be289/68747470733a2f2f6769746875622e636f6d2f646f63746f6c69622f686f73706974616c5f6c6f6766696c655f616e616c797a65722f626c6f622f6d61737465722f707265766965772e706e673f7261773d74727565\"></p>\n<h1>How to install</h1>\n<h2>Install from Pypi</h2>\n<pre>pip install hospital_logfile_analyzer\n</pre>\n<h2>Install from Github</h2>\n<p>Download the latest release as a <code>tar.gz</code> archive from the <a href=\"https://github.com/doctolib/hospital_logfile_analyzer/releases\" rel=\"nofollow\">Github repository page</a>:</p>\n<pre>wget https://github.com/doctolib/hospital_logfile_analyzer/archive/v.0.1.tar.gz\ntar -xvf v.0.1.tar.gz\n<span class=\"nb\">cd</span> hospital_logfile_analyzer\nrm v.0.1.tar.gz\npython setup.py install\n</pre>\n<h2>Install from source code</h2>\n<p>Using git, clone the repository to your working directory, and install the package:</p>\n<pre>git clone git@github.com:doctolib/hospital_logfile_analyzer.git\n<span class=\"nb\">cd</span> hospital_logfile_analyzer\npython setup.py install\n</pre>\n<h2>Prerequisites</h2>\n<p>This package supports Python 3 and has not been tested with Python 2.</p>\n<p>To view and run the attached Jupyter Notebooks, best install an\n<a href=\"https://docs.anaconda.com/anaconda/install/\" rel=\"nofollow\">Anaconda environment</a>.</p>\n<h2>Command-line interface</h2>\n<p>You can execute the logfile parser in the command-line of your choice (e.g. bash).\n<code>main.py</code> implements the command-line argument parser.\nDisplay all options:</p>\n<pre>python -m hospital_logfile_analyzer --help\n</pre>\n<p>The easiest call to run the application:</p>\n<pre>python -m hospital_logfile_analyzer mylogfile.log output_structured_log.json\n</pre>\n<p>A more sophisticated application call would involve mapping and/or field filtering:</p>\n<pre>python -m hospital_logfile_analyzer mylogfile.log output_structured_log.json --mappingfile my_mapping.json --filterfile my_filter.json\n</pre>\n<p>For instructions on how to create field maps and filters,\nsee the respective sections in text below.</p>\n<h2>Jupyter Notebook</h2>\n<p>You will find examples on how to execute this package in a Jupyter Notebook\ninside <a href=\"jupyter_notebooks\" rel=\"nofollow\">jupyter_notebooks</a> directory.</p>\n<h2>Package</h2>\n<p>You can use the logfile parser directly in your Python code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hospital_logfile_analyzer.parsers</span> <span class=\"kn\">import</span> <span class=\"n\">parse</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'hospital_logfile_analyzer/test/test.log'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"p\">))</span>\n</pre>\n<h2>How to create custom mappings and field filters</h2>\n<h3>Field Mapping</h3>\n<p>Fields can be mapped across different levels of hierarchy.\nE.g. you can map <code>root.child1.child2.key1</code> to <code>root.key1</code>.\nThe mapping allows you to propagate fields from lower levels of hierarchy\nto the top. Together with filters,\nthis allows for very efficient analysis of structured data.</p>\n<p>Mapping is given by a JSON dictionary with the source field names being the\nkeys, and the target field names the values.\nThe field names inside subtrees are separated by dots.</p>\n<p>The following example snippet will copy (or move, depending on the function\nparameters) the value of field <code>Tree.Error Code</code> into <code>Error Code</code>:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"Tree.Error Code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Error Code\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"Tree.Result.Code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Result Code\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The field map has to be stored as a UTF-8 encoded JSON file. For instructions\non how to pass this file to the application, see the CLI or the package usage\ndocumentation in text above.</p>\n<h3>Field Filters</h3>\n<p>Field filters allow to remove fields and subtrees from the structured data.</p>\n<p>The following example will remove fields <code>Tree.Error Code</code> and will keep\n<code>Tree.Result.Code</code>:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"Tree.Error Code\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"Tree.Result.Code\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The field map has to be stored as a UTF-8 encoded JSON file. For instructions\non how to pass this file to the application, see the CLI or the Python package\nusage documentation in text above.</p>\n<h1>How to test</h1>\n<p>Execute in the root folder of the repository:</p>\n<pre>python -m unittest\n</pre>\n<p>This will discover and execute all tests contained\ninside <code>hospital_logfile_analyzer/test</code>.</p>\n<h1>How to contribute</h1>\n<p>You can add your own logfile parsers:</p>\n<ol>\n<li>Inherit <code>YourOwnParser</code> from the abstract parent interface <a href=\"hospital_logfile_analyzer/parsers/logfile_parser.py\" rel=\"nofollow\"><code>LogfileParser</code></a>.</li>\n<li>Add unit tests by adding <code>test_yourownparser.py</code> under <code>hospital_logfile_analyzer/test</code>.</li>\n<li>Commit changes to your own branch and create a pull request.\nThe tests on the branch must run green before the\nbranch can be merged.</li>\n</ol>\n<h1>License</h1>\n<p>See <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n\n          </div>"}, "last_serial": 6723998, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "e562c969865c40971b421944a26ce481", "sha256": "6c6c4f3aefc56fe38b866fbb10ea52df8befaa6ee1e475da9915b0d9cb6e4d03"}, "downloads": -1, "filename": "hospital_logfile_analyzer-0.1.4.tar.gz", "has_sig": false, "md5_digest": "e562c969865c40971b421944a26ce481", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6193, "upload_time": "2020-02-29T10:47:58", "upload_time_iso_8601": "2020-02-29T10:47:58.966774Z", "url": "https://files.pythonhosted.org/packages/a7/8c/9bc917c04f6007bf9fb4ad3d4bd049f0018499470755e45a78eb85207fcb/hospital_logfile_analyzer-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e562c969865c40971b421944a26ce481", "sha256": "6c6c4f3aefc56fe38b866fbb10ea52df8befaa6ee1e475da9915b0d9cb6e4d03"}, "downloads": -1, "filename": "hospital_logfile_analyzer-0.1.4.tar.gz", "has_sig": false, "md5_digest": "e562c969865c40971b421944a26ce481", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6193, "upload_time": "2020-02-29T10:47:58", "upload_time_iso_8601": "2020-02-29T10:47:58.966774Z", "url": "https://files.pythonhosted.org/packages/a7/8c/9bc917c04f6007bf9fb4ad3d4bd049f0018499470755e45a78eb85207fcb/hospital_logfile_analyzer-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:34 2020"}