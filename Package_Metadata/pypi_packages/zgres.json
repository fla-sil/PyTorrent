{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "PostgreSQL failover managed by ZooKeeper\n========================================\n\nLeverage the co-ordination capability of ZooKeeper\n(http://zookeeper.apache.org) to provide a robust implementation of automated\nfailover for PostgreSQL.\n\nBasic Design\n------------\n\nAll inter-server communication occurs via ZooKeeper. No SSH or network\nconnections of any kind.\n\nThere are 2 different daemons which make up the system: \"deadman\" and\nthe \"sync\" daemons. On the nodes which actually use the PostgreSQL\ncluster, the \"deadman\" daemon is run to control the PostgreSQL process\nand optionally the sync daemon to update PostgreSQL configuration files\n(e.g. pg\\_hba.conf). On application servers or proxies the \"sync\" daemon\nis run.\n\nTerminology\n-----------\n\n- database cluster or cluster:\n  http://www.postgresql.org/docs/9.4/static/creating-cluster.html\n- znode: a ZooKeeper data node in the ZooKeeper database\n- group, cluster group, database group: A group of master/replica providing one logical\n  database, made up of one or more database clusters.\n\n\nZooKeeper Directory Layout\n--------------------------\n\nIn ZooKeeper, we have one directory which contains the information on\nall the nodes in multiple master-replica database groups. It is a\ndirectory with 4 sub-directories types:\n\n    /state/{DATABASE_GROUP_NAME}_{IPADDR}:{PORT}\n        This contains all the information about a database cluster nodes,\n        healthy or not. It is updated frequently with data such as the WAL log\n        replay status. It is an ephemeral node and will dissapear if\n        the connection to zookeeper is lost.\n        Ephemeral, created/maintained by the \"deadman\" daemon.\n\n    /conn/{DATABASE_GROUP_NAME}_{IPADDR}:{PORT}\n        This znode contains a subset of information from the state-\n        node. It is the static connection information/metadata about a single\n        healthy (i.e. connectable) cluster. If the node is not \"healthy\", this\n        entry will not exist. The information in this znode is not vollatile and\n        is gaurenteed not to change over the lifespan of the znode.  Ephemeral,\n        created/maintained by the \"deadman\" daemon.\n\n    /lock/{DATABASE_GROUP_NAME}\n        This contains the IPADDR:PORT of the current master for the\n        database group. Connection info should be looked up in the\n        \"_conn_\" node (if it exists).\n        Created/maintained by the \"deadman\" daemon on the current\n\n    /static/{DATABASE_GROUP_NAME}-db-id\n        Contains the database identifier of the database group.\n\nMost of the above znodes contain a JSON encoded\ndictionary/object/hashmap.\n\nSync Daemon\n-----------\n\nThis daemon runs on any node which wishes to connect to a database group\nand maintains the local machine's configuration files. For example, it\ncan rewrite a pgbouncer configuration if the master of one database\ngroup fails over. It can also start a new pgbouncer daemon if a new\ndatabase group is created. Another example is dynamically changing\nHAProxy weight according to the node location (e.g. availability zone)\nor replication lag.\n\nActually applying the configuration changes is the job of plugins, the\nsync daemon will not apply any changes by itself. Plugins can be\nspecified in 2 ways:\n\n    * Using setuptools entry points to subscribe in-process to the\n      changes. This allows subscribers to subscribe to events from\n      either state-, master- or healthy- znodes.\n    * Provide an executable which will be called with the path to a\n      JSON encoded file containing the information from the healthy-\n      and master- znodes. This is provided by the zgres-apply package\n      which plugs into zgres-sync using the previous plugin method.\n      This plugin does not recieve state- events for performance\n      reasons.\n\nThese plugins MUST be idempotent, they will be called repeatedly with\nthe same data.\n\nDeadman Daemon\n--------------\n\nThis daemon controls one PostgreSQL database cluster and registers it in\nzookeeper (creating/maintaining the state-, conn- and master-\nznodes). It must run on the same machine as the database cluster.\n\nIt is responsible for promoting or shutting down it's postgresql\ndatabase cluster.\n\nCurrently, remastering and starting PostgreSQL should be handled outside\nbefore deadman is started.\n\nPlugins for the deadman daemon should be able to do 2 things:\n    * Provide extra metadata (i.e. availability-zone or replication lag)\n    * Veto the cluster being up (aside from a builtin SELECT 1)\n\nChallenges\n----------\n\n * multiple replicas: How to fail over to the \"best\" replica.\n * multiple replicas: How to connect replicas to new master.\n * Would it be a good idea to know where the basebackups are and initialize new replicas on startup?\n\n * PLUGINS PLUGINS PLUGINS:\n    - Provide a lot of plugins builtin, allow them to be seen and enabled via the\n      \"config\" in zookeeper? EEEK: dynamic reconfiguration of daemons?\n    - What happens if a few nodes don't have some plugins?\n    - Configuration on a \"cluster group\" level\n\nThe Good\n--------\n\n * Relatively simple configuration. No ssh config.\n * Fully distributed.\n\nImplementation Thoughts\n-----------------------\n\n * Implement daemons in python, log to stdout and stderr. Have them be\n   run via systemd with configured to restart on fail. Fail noisily!\n\nDependencies\n------------\n\n * systemd\n * kazoo - ZooKeeper client\n * psycopg2 - connections to PostgreSQL\n\nAcknowledgment\n--------------\n\nZgres is heavily influenced by HandyRep\n(https://github.com/pgexperts/handyrep) and Patroni\n(https://github.com/zalando/patroni). Many thanks to the developers of\nthose for some great ideas.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "zgres", "package_url": "https://pypi.org/project/zgres/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zgres/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/zgres/0.4/", "requires_dist": null, "requires_python": null, "summary": "Database Connection and failover manager for PostgreSQL", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Leverage the co-ordination capability of ZooKeeper\n(<a href=\"http://zookeeper.apache.org\" rel=\"nofollow\">http://zookeeper.apache.org</a>) to provide a robust implementation of automated\nfailover for PostgreSQL.</p>\n<div id=\"basic-design\">\n<h2>Basic Design</h2>\n<p>All inter-server communication occurs via ZooKeeper. No SSH or network\nconnections of any kind.</p>\n<p>There are 2 different daemons which make up the system: \u201cdeadman\u201d and\nthe \u201csync\u201d daemons. On the nodes which actually use the PostgreSQL\ncluster, the \u201cdeadman\u201d daemon is run to control the PostgreSQL process\nand optionally the sync daemon to update PostgreSQL configuration files\n(e.g. pg_hba.conf). On application servers or proxies the \u201csync\u201d daemon\nis run.</p>\n</div>\n<div id=\"terminology\">\n<h2>Terminology</h2>\n<ul>\n<li>database cluster or cluster:\n<a href=\"http://www.postgresql.org/docs/9.4/static/creating-cluster.html\" rel=\"nofollow\">http://www.postgresql.org/docs/9.4/static/creating-cluster.html</a></li>\n<li>znode: a ZooKeeper data node in the ZooKeeper database</li>\n<li>group, cluster group, database group: A group of master/replica providing one logical\ndatabase, made up of one or more database clusters.</li>\n</ul>\n</div>\n<div id=\"zookeeper-directory-layout\">\n<h2>ZooKeeper Directory Layout</h2>\n<p>In ZooKeeper, we have one directory which contains the information on\nall the nodes in multiple master-replica database groups. It is a\ndirectory with 4 sub-directories types:</p>\n<blockquote>\n<dl>\n<dt>/state/{DATABASE_GROUP_NAME}_{IPADDR}:{PORT}</dt>\n<dd>This contains all the information about a database cluster nodes,\nhealthy or not. It is updated frequently with data such as the WAL log\nreplay status. It is an ephemeral node and will dissapear if\nthe connection to zookeeper is lost.\nEphemeral, created/maintained by the \u201cdeadman\u201d daemon.</dd>\n<dt>/conn/{DATABASE_GROUP_NAME}_{IPADDR}:{PORT}</dt>\n<dd>This znode contains a subset of information from the state-\nnode. It is the static connection information/metadata about a single\nhealthy (i.e. connectable) cluster. If the node is not \u201chealthy\u201d, this\nentry will not exist. The information in this znode is not vollatile and\nis gaurenteed not to change over the lifespan of the znode.  Ephemeral,\ncreated/maintained by the \u201cdeadman\u201d daemon.</dd>\n<dt>/lock/{DATABASE_GROUP_NAME}</dt>\n<dd>This contains the IPADDR:PORT of the current master for the\ndatabase group. Connection info should be looked up in the\n\u201c_conn_\u201d node (if it exists).\nCreated/maintained by the \u201cdeadman\u201d daemon on the current</dd>\n<dt>/static/{DATABASE_GROUP_NAME}-db-id</dt>\n<dd>Contains the database identifier of the database group.</dd>\n</dl>\n</blockquote>\n<p>Most of the above znodes contain a JSON encoded\ndictionary/object/hashmap.</p>\n</div>\n<div id=\"sync-daemon\">\n<h2>Sync Daemon</h2>\n<p>This daemon runs on any node which wishes to connect to a database group\nand maintains the local machine\u2019s configuration files. For example, it\ncan rewrite a pgbouncer configuration if the master of one database\ngroup fails over. It can also start a new pgbouncer daemon if a new\ndatabase group is created. Another example is dynamically changing\nHAProxy weight according to the node location (e.g. availability zone)\nor replication lag.</p>\n<p>Actually applying the configuration changes is the job of plugins, the\nsync daemon will not apply any changes by itself. Plugins can be\nspecified in 2 ways:</p>\n<blockquote>\n<ul>\n<li>Using setuptools entry points to subscribe in-process to the\nchanges. This allows subscribers to subscribe to events from\neither state-, master- or healthy- znodes.</li>\n<li>Provide an executable which will be called with the path to a\nJSON encoded file containing the information from the healthy-\nand master- znodes. This is provided by the zgres-apply package\nwhich plugs into zgres-sync using the previous plugin method.\nThis plugin does not recieve state- events for performance\nreasons.</li>\n</ul>\n</blockquote>\n<p>These plugins MUST be idempotent, they will be called repeatedly with\nthe same data.</p>\n</div>\n<div id=\"deadman-daemon\">\n<h2>Deadman Daemon</h2>\n<p>This daemon controls one PostgreSQL database cluster and registers it in\nzookeeper (creating/maintaining the state-, conn- and master-\nznodes). It must run on the same machine as the database cluster.</p>\n<p>It is responsible for promoting or shutting down it\u2019s postgresql\ndatabase cluster.</p>\n<p>Currently, remastering and starting PostgreSQL should be handled outside\nbefore deadman is started.</p>\n<dl>\n<dt>Plugins for the deadman daemon should be able to do 2 things:</dt>\n<dd><ul>\n<li>Provide extra metadata (i.e. availability-zone or replication lag)</li>\n<li>Veto the cluster being up (aside from a builtin SELECT 1)</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"challenges\">\n<h2>Challenges</h2>\n<blockquote>\n<ul>\n<li>multiple replicas: How to fail over to the \u201cbest\u201d replica.</li>\n<li>multiple replicas: How to connect replicas to new master.</li>\n<li>Would it be a good idea to know where the basebackups are and initialize new replicas on startup?</li>\n<li><dl>\n<dt>PLUGINS PLUGINS PLUGINS:</dt>\n<dd><ul>\n<li>Provide a lot of plugins builtin, allow them to be seen and enabled via the\n\u201cconfig\u201d in zookeeper? EEEK: dynamic reconfiguration of daemons?</li>\n<li>What happens if a few nodes don\u2019t have some plugins?</li>\n<li>Configuration on a \u201ccluster group\u201d level</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"the-good\">\n<h2>The Good</h2>\n<blockquote>\n<ul>\n<li>Relatively simple configuration. No ssh config.</li>\n<li>Fully distributed.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"implementation-thoughts\">\n<h2>Implementation Thoughts</h2>\n<blockquote>\n<ul>\n<li>Implement daemons in python, log to stdout and stderr. Have them be\nrun via systemd with configured to restart on fail. Fail noisily!</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<blockquote>\n<ul>\n<li>systemd</li>\n<li>kazoo - ZooKeeper client</li>\n<li>psycopg2 - connections to PostgreSQL</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"acknowledgment\">\n<h2>Acknowledgment</h2>\n<p>Zgres is heavily influenced by HandyRep\n(<a href=\"https://github.com/pgexperts/handyrep\" rel=\"nofollow\">https://github.com/pgexperts/handyrep</a>) and Patroni\n(<a href=\"https://github.com/zalando/patroni\" rel=\"nofollow\">https://github.com/zalando/patroni</a>). Many thanks to the developers of\nthose for some great ideas.</p>\n</div>\n\n          </div>"}, "last_serial": 2241924, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "a6a9db542fb18c730fbb4d33ecda2621", "sha256": "8d187055b32dd0159520a7c77a6938ff6bcd248025d7807c5cd5b28b774de052"}, "downloads": -1, "filename": "zgres-0.4.tar.gz", "has_sig": false, "md5_digest": "a6a9db542fb18c730fbb4d33ecda2621", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47957, "upload_time": "2016-07-25T08:26:04", "upload_time_iso_8601": "2016-07-25T08:26:04.408873Z", "url": "https://files.pythonhosted.org/packages/32/c3/a53c902e0cea5df1c47f8e26217af60c4f1e31e8c4d265ae558cbfb72241/zgres-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a6a9db542fb18c730fbb4d33ecda2621", "sha256": "8d187055b32dd0159520a7c77a6938ff6bcd248025d7807c5cd5b28b774de052"}, "downloads": -1, "filename": "zgres-0.4.tar.gz", "has_sig": false, "md5_digest": "a6a9db542fb18c730fbb4d33ecda2621", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47957, "upload_time": "2016-07-25T08:26:04", "upload_time_iso_8601": "2016-07-25T08:26:04.408873Z", "url": "https://files.pythonhosted.org/packages/32/c3/a53c902e0cea5df1c47f8e26217af60c4f1e31e8c4d265ae558cbfb72241/zgres-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:04 2020"}