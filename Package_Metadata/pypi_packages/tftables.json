{"info": {"author": "ghcollin", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "`tftables <https://github.com/ghcollin/tftables>`_ allows convenient access to HDF5 files with Tensorflow.\nA class for reading batches of data out of arrays or tables is provided.\nA secondary class wraps both the primary reader and a Tensorflow FIFOQueue for straight-forward streaming \nof data from HDF5 files into Tensorflow operations.\n\nThe library is backed by `multitables <https://github.com/ghcollin/multitables>`_ for high-speed reading of HDF5\ndatasets. ``multitables`` is based on PyTables (``tables``), so this library can make use of any compression algorithms\nthat PyTables supports.\n\nLicence\n=======\n\nThis software is distributed under the MIT licence. \nSee the `LICENSE.txt <https://github.com/ghcollin/tftables/blob/master/LICENSE.txt>`_ file for details.\n\nInstallation\n============\n\n::\n\n    pip install tftables\n\nAlternatively, to install from HEAD, run\n\n::\n\n    pip install git+https://github.com/ghcollin/tftables.git\n\nYou can also `download <https://github.com/ghcollin/tftables/archive/master.zip>`_\nor `clone the repository <https://github.com/ghcollin/tftables>`_ and run\n\n::\n\n    python setup.py install\n\n``tftables`` depends on ``multitables``, ``numpy`` and ``tensorflow``. The package is compatible with the latest versions of python\n2 and 3.\n\nQuick start\n===========\n\nAn example of accessing a table in a HDF5 file.\n\n.. code:: python\n\n    import tftables\n    import tensorflow as tf\n\n    with tf.device('/cpu:0'):\n        # This function preprocesses the batches before they\n        # are loaded into the internal queue.\n        # You can cast data, or do one-hot transforms.\n        # If the dataset is a table, this function is required.\n        def input_transform(tbl_batch):\n            labels = tbl_batch['label']\n            data = tbl_batch['data']\n\n            truth = tf.to_float(tf.one_hot(labels, num_labels, 1, 0))\n            data_float = tf.to_float(data)\n\n            return truth, data_float\n\n        # Open the HDF5 file and create a loader for a dataset.\n        # The batch_size defines the length (in the outer dimension)\n        # of the elements (batches) returned by the reader.\n        # Takes a function as input that pre-processes the data.\n        loader = tftables.load_dataset(filename='path/to/h5_file.h5',\n                                       dataset_path='/internal/h5/path',\n                                       input_transform=input_transform,\n                                       batch_size=20)\n\n    # To get the data, we dequeue it from the loader.\n    # Tensorflow tensors are returned in the same order as input_transformation\n    truth_batch, data_batch = loader.dequeue()\n\n    # The placeholder can then be used in your network\n    result = my_network(truth_batch, data_batch)\n\n    with tf.Session() as sess:\n\n        # This context manager starts and stops the internal threads and\n        # processes used to read the data from disk and store it in the queue.\n        with loader.begin(sess):\n            for _ in range(num_iterations):\n                sess.run(result)\n\n\nIf the dataset is an array instead of a table. Then ``input_transform`` can be omitted\nif no pre-processing is required. If only a single pass through the dataset is desired,\nthen you should pass ``cyclic=False`` to ``load_dataset``.\n\n\nExamples\n========\n\nSee the `unit tests <https://github.com/ghcollin/tftables/blob/master/tftables_test.py>`_ for complete examples.\n\nExamples\n========\n\nSee the `how-to <http://tftables.readthedocs.io/en/latest/howto.html>`_ for more in-depth documentation, and the\n`unit tests <https://github.com/ghcollin/tftables/blob/master/tftables_test.py>`_ for complete examples.\n\nDocumentation\n=============\n\n`Online documentation <http://tftables.readthedocs.io/en/latest/>`_ is available.\nA `how to <http://tftables.readthedocs.io/en/latest/howto.html>`_ gives a basic overview of the library.\n\nOffline documentation can be built from the ``docs`` folder using ``sphinx``.\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ghcollin/tftables", "keywords": "tensorflow HDF5", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tftables", "package_url": "https://pypi.org/project/tftables/", "platform": "", "project_url": "https://pypi.org/project/tftables/", "project_urls": {"Homepage": "https://github.com/ghcollin/tftables"}, "release_url": "https://pypi.org/project/tftables/1.1.2/", "requires_dist": ["multitables", "numpy (!=1.10.1)", "tensorflow"], "requires_python": "", "summary": "Interface for reading HDF5 files into Tensorflow.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/ghcollin/tftables\" rel=\"nofollow\">tftables</a> allows convenient access to HDF5 files with Tensorflow.\nA class for reading batches of data out of arrays or tables is provided.\nA secondary class wraps both the primary reader and a Tensorflow FIFOQueue for straight-forward streaming\nof data from HDF5 files into Tensorflow operations.</p>\n<p>The library is backed by <a href=\"https://github.com/ghcollin/multitables\" rel=\"nofollow\">multitables</a> for high-speed reading of HDF5\ndatasets. <tt>multitables</tt> is based on PyTables (<tt>tables</tt>), so this library can make use of any compression algorithms\nthat PyTables supports.</p>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p>This software is distributed under the MIT licence.\nSee the <a href=\"https://github.com/ghcollin/tftables/blob/master/LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a> file for details.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install tftables\n</pre>\n<p>Alternatively, to install from HEAD, run</p>\n<pre>pip install git+https://github.com/ghcollin/tftables.git\n</pre>\n<p>You can also <a href=\"https://github.com/ghcollin/tftables/archive/master.zip\" rel=\"nofollow\">download</a>\nor <a href=\"https://github.com/ghcollin/tftables\" rel=\"nofollow\">clone the repository</a> and run</p>\n<pre>python setup.py install\n</pre>\n<p><tt>tftables</tt> depends on <tt>multitables</tt>, <tt>numpy</tt> and <tt>tensorflow</tt>. The package is compatible with the latest versions of python\n2 and 3.</p>\n</div>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<p>An example of accessing a table in a HDF5 file.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tftables</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"s1\">'/cpu:0'</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This function preprocesses the batches before they</span>\n    <span class=\"c1\"># are loaded into the internal queue.</span>\n    <span class=\"c1\"># You can cast data, or do one-hot transforms.</span>\n    <span class=\"c1\"># If the dataset is a table, this function is required.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">input_transform</span><span class=\"p\">(</span><span class=\"n\">tbl_batch</span><span class=\"p\">):</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">tbl_batch</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">]</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tbl_batch</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]</span>\n\n        <span class=\"n\">truth</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">to_float</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">one_hot</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">num_labels</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n        <span class=\"n\">data_float</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">to_float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">truth</span><span class=\"p\">,</span> <span class=\"n\">data_float</span>\n\n    <span class=\"c1\"># Open the HDF5 file and create a loader for a dataset.</span>\n    <span class=\"c1\"># The batch_size defines the length (in the outer dimension)</span>\n    <span class=\"c1\"># of the elements (batches) returned by the reader.</span>\n    <span class=\"c1\"># Takes a function as input that pre-processes the data.</span>\n    <span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">tftables</span><span class=\"o\">.</span><span class=\"n\">load_dataset</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'path/to/h5_file.h5'</span><span class=\"p\">,</span>\n                                   <span class=\"n\">dataset_path</span><span class=\"o\">=</span><span class=\"s1\">'/internal/h5/path'</span><span class=\"p\">,</span>\n                                   <span class=\"n\">input_transform</span><span class=\"o\">=</span><span class=\"n\">input_transform</span><span class=\"p\">,</span>\n                                   <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To get the data, we dequeue it from the loader.</span>\n<span class=\"c1\"># Tensorflow tensors are returned in the same order as input_transformation</span>\n<span class=\"n\">truth_batch</span><span class=\"p\">,</span> <span class=\"n\">data_batch</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">dequeue</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># The placeholder can then be used in your network</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">my_network</span><span class=\"p\">(</span><span class=\"n\">truth_batch</span><span class=\"p\">,</span> <span class=\"n\">data_batch</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">sess</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># This context manager starts and stops the internal threads and</span>\n    <span class=\"c1\"># processes used to read the data from disk and store it in the queue.</span>\n    <span class=\"k\">with</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">sess</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_iterations</span><span class=\"p\">):</span>\n            <span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<p>If the dataset is an array instead of a table. Then <tt>input_transform</tt> can be omitted\nif no pre-processing is required. If only a single pass through the dataset is desired,\nthen you should pass <tt>cyclic=False</tt> to <tt>load_dataset</tt>.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>See the <a href=\"https://github.com/ghcollin/tftables/blob/master/tftables_test.py\" rel=\"nofollow\">unit tests</a> for complete examples.</p>\n</div>\n<div id=\"id1\">\n<h2>Examples</h2>\n<p>See the <a href=\"http://tftables.readthedocs.io/en/latest/howto.html\" rel=\"nofollow\">how-to</a> for more in-depth documentation, and the\n<a href=\"https://github.com/ghcollin/tftables/blob/master/tftables_test.py\" rel=\"nofollow\">unit tests</a> for complete examples.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p><a href=\"http://tftables.readthedocs.io/en/latest/\" rel=\"nofollow\">Online documentation</a> is available.\nA <a href=\"http://tftables.readthedocs.io/en/latest/howto.html\" rel=\"nofollow\">how to</a> gives a basic overview of the library.</p>\n<p>Offline documentation can be built from the <tt>docs</tt> folder using <tt>sphinx</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 3586176, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "e5c922c3c75b135c8b7622d4447c8a71", "sha256": "5c871f18b59c4ec69a63030be6bfffb20d797f5132beae08d183336dc3c50ecb"}, "downloads": -1, "filename": "tftables-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e5c922c3c75b135c8b7622d4447c8a71", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12622, "upload_time": "2017-03-07T23:09:30", "upload_time_iso_8601": "2017-03-07T23:09:30.733164Z", "url": "https://files.pythonhosted.org/packages/e2/1b/959f74fa6138ccac4bd31a97becec502a76eecab44b252756f497342f3cb/tftables-1.1.0-py2.py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "32891afbdb76e1833676f40fb1ca8007", "sha256": "fe74647f928e79fec9ab3d88bec9be2c72825e098cd89bd2046549c535f34324"}, "downloads": -1, "filename": "tftables-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32891afbdb76e1833676f40fb1ca8007", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12729, "upload_time": "2017-03-08T07:50:11", "upload_time_iso_8601": "2017-03-08T07:50:11.038935Z", "url": "https://files.pythonhosted.org/packages/68/b3/bd11c71ce1a73ac1baa0efc4e19434cd80c086d6c9a8b7b08d871fee1544/tftables-1.1.1-py2.py3-none-any.whl", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "dad740af62f20caa901bee1264534a13", "sha256": "794aebe35618adbfe8e1f2e8adef1c71c85acabe9aa5112cb5c542d1a1bf98ef"}, "downloads": -1, "filename": "tftables-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dad740af62f20caa901bee1264534a13", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12420, "upload_time": "2018-02-16T03:17:56", "upload_time_iso_8601": "2018-02-16T03:17:56.693036Z", "url": "https://files.pythonhosted.org/packages/e8/bc/7be1e26747cea5db241480ad84bafff93fbb6db4f502bc916bd89d8ecdcf/tftables-1.1.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dad740af62f20caa901bee1264534a13", "sha256": "794aebe35618adbfe8e1f2e8adef1c71c85acabe9aa5112cb5c542d1a1bf98ef"}, "downloads": -1, "filename": "tftables-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dad740af62f20caa901bee1264534a13", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12420, "upload_time": "2018-02-16T03:17:56", "upload_time_iso_8601": "2018-02-16T03:17:56.693036Z", "url": "https://files.pythonhosted.org/packages/e8/bc/7be1e26747cea5db241480ad84bafff93fbb6db4f502bc916bd89d8ecdcf/tftables-1.1.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:20 2020"}