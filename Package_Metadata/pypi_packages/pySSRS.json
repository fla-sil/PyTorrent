{"info": {"author": "Fabricio Roberto reinert", "author_email": "fabricio.reinert@live.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "# PySSRS\nMicrosoft Reporting Services (SSRS) RPC trough SOAP\n\n## Installation\n1. Make sure you have Python 3+ installed\n2. Run ```pip install PySSRS```\n\n### Connecting to SSRS\nYou can use it as a facilitator to make SOAP RPCs.\nFor example:\n```python\n\n>From SSRS import SSRS\n\nService   = 'http://localhost/ReportinServices/ReportService2010.asmx?wsdl'\nExecution = 'http://myserver/reportserver/ReportExecution2005.asmx?wsdl'\nuser      = 'user@contoso.com'\npassword  = '@password2017'\n\nRS = SSRS(Service, Execution, user, password)\nresult = RS.ServiceClient.service.ListChildren(dir, recursive)\n\nfor item in result.CatalogItem:\n  print(item['Name'])\n```\n\n### Available Functions\nWe implemented some functions to make it easy to use. Feel free to check their usage on the  **samples** folder.\n\nThese functions are available by now:\n\nFunction      | Objective                      | Return Type\n--------------|--------------------------------|------------\nListMethods() | List all SOAP procedures | List []\nDirItems() | List all objects in a directory | Dictionary {}\nFind() | Find for a item by it's name | Dictionary {}\nGetParameters() | Return all parameters from a Report object | Dictionary {}\nRequestReport() | Execute a report from SSRS | Report Object - Used to suply RenderReport()\nRenderReport() | Render a Requested Report | Dictionary {}\n\n### Rendering Reports\nNow we can load and render report with this module. Please, check **samples/LoadReport.py** to see how it works!\n\n\n### Example of Service Function\n\nCheck this small code, it's an sample of usage\n\n```python\n# Conneting to SSRS SOAP server\n\nServiceWSDL    = 'http://localhost/ReportinServices/ReportService2010.asmx?wsdl'\nExecutionWSDL  = 'http://myserver/reportserver/ReportExecution2005.asmx?wsdl'\nuser = 'user@domain.com\npsw  = '@password2017'\n\nRS = SSRS(ServiceWSDL, ExecutionWSDL, user, psw)\n\n'''\nReturn a LIST with all available SOAP procedures\nso you can iterate over them...\n'''\nMethods = RS.ListMethods()\n\n'''\nReturn a DICTIONARY with all items in a specific folder##\nyou can also use the <recursive> parameter to scan subfolders.\nIf you don't specify the <dir> parameter it'll take the root ('/') as default\n'''\nDirItems = RS.ListDirItems(dir='/MyReports', recursive=True)\n\n'''\nFind() will retrieve a list of items which the name matches with the <text> parameter.\nIt's recursive, you don't need to specify any folder and you can also specify the object type that you want\nby using the <objtype> parameter.\n\nThose are the accepted types of objects\n            -> Component \n            -> DataSource \n            -> Folder\n            -> Model\n            -> LinkedReport\n            -> Report\n            -> Resource\n            -> DataSet\n            -> Site\n            -> Unknown\n'''\nItemsFound = RS.Find(text=\"Sales\", objtype=\"Report\")\n\n#GetParameters() will retrieve a list of paremeters for the report on the specific path\nParameters = RS.GetParameters(path='/MyReports/SalesOrder')\n```\n\n\n# PySSRS\nMicrosoft Reporting Services (SSRS) RPC trough SOAP\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FRReinert/PySSRS/", "keywords": "SSRS,Microsoft,Python,SOAP,RPC,Reporting,Services", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "pySSRS", "package_url": "https://pypi.org/project/pySSRS/", "platform": "", "project_url": "https://pypi.org/project/pySSRS/", "project_urls": {"Homepage": "https://github.com/FRReinert/PySSRS/"}, "release_url": "https://pypi.org/project/pySSRS/1.0.0/", "requires_dist": ["suds-py3"], "requires_python": "", "summary": "Python SSRS integrationusing SOAP RPCs", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # PySSRS<br>Microsoft Reporting Services (SSRS) RPC trough SOAP<br><br>## Installation<br>1. Make sure you have Python 3+ installed<br>2. Run ```pip install PySSRS```<br><br>### Connecting to SSRS<br>You can use it as a facilitator to make SOAP RPCs.<br>For example:<br>```python<br><br>&gt;From SSRS import SSRS<br><br>Service   = 'http://localhost/ReportinServices/ReportService2010.asmx?wsdl'<br>Execution = 'http://myserver/reportserver/ReportExecution2005.asmx?wsdl'<br>user      = 'user@contoso.com'<br>password  = '@password2017'<br><br>RS = SSRS(Service, Execution, user, password)<br>result = RS.ServiceClient.service.ListChildren(dir, recursive)<br><br>for item in result.CatalogItem:<br>  print(item['Name'])<br>```<br><br>### Available Functions<br>We implemented some functions to make it easy to use. Feel free to check their usage on the  **samples** folder.<br><br>These functions are available by now:<br><br>Function      | Objective                      | Return Type<br>--------------|--------------------------------|------------<br>ListMethods() | List all SOAP procedures | List []<br>DirItems() | List all objects in a directory | Dictionary {}<br>Find() | Find for a item by it's name | Dictionary {}<br>GetParameters() | Return all parameters from a Report object | Dictionary {}<br>RequestReport() | Execute a report from SSRS | Report Object - Used to suply RenderReport()<br>RenderReport() | Render a Requested Report | Dictionary {}<br><br>### Rendering Reports<br>Now we can load and render report with this module. Please, check **samples/LoadReport.py** to see how it works!<br><br><br>### Example of Service Function<br><br>Check this small code, it's an sample of usage<br><br>```python<br># Conneting to SSRS SOAP server<br><br>ServiceWSDL    = 'http://localhost/ReportinServices/ReportService2010.asmx?wsdl'<br>ExecutionWSDL  = 'http://myserver/reportserver/ReportExecution2005.asmx?wsdl'<br>user = 'user@domain.com<br>psw  = '@password2017'<br><br>RS = SSRS(ServiceWSDL, ExecutionWSDL, user, psw)<br><br>'''<br>Return a LIST with all available SOAP procedures<br>so you can iterate over them...<br>'''<br>Methods = RS.ListMethods()<br><br>'''<br>Return a DICTIONARY with all items in a specific folder##<br>you can also use the &lt;recursive&gt; parameter to scan subfolders.<br>If you don't specify the &lt;dir&gt; parameter it'll take the root ('/') as default<br>'''<br>DirItems = RS.ListDirItems(dir='/MyReports', recursive=True)<br><br>'''<br>Find() will retrieve a list of items which the name matches with the &lt;text&gt; parameter.<br>It's recursive, you don't need to specify any folder and you can also specify the object type that you want<br>by using the &lt;objtype&gt; parameter.<br><br>Those are the accepted types of objects<br>            -&gt; Component <br>            -&gt; DataSource <br>            -&gt; Folder<br>            -&gt; Model<br>            -&gt; LinkedReport<br>            -&gt; Report<br>            -&gt; Resource<br>            -&gt; DataSet<br>            -&gt; Site<br>            -&gt; Unknown<br>'''<br>ItemsFound = RS.Find(text=\"Sales\", objtype=\"Report\")<br><br>#GetParameters() will retrieve a list of paremeters for the report on the specific path<br>Parameters = RS.GetParameters(path='/MyReports/SalesOrder')<br>```<br><br><br># PySSRS<br>Microsoft Reporting Services (SSRS) RPC trough SOAP<br><br><br>\n          </div>"}, "last_serial": 2710036, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bad279a8be5734661c5636e7120ad9ac", "sha256": "a9acaae45e3d9b181bd40943a3b68bfcd5be1b66494f3edd1d53181a7586026b"}, "downloads": -1, "filename": "pySSRS-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bad279a8be5734661c5636e7120ad9ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6804, "upload_time": "2017-03-14T16:46:22", "upload_time_iso_8601": "2017-03-14T16:46:22.663083Z", "url": "https://files.pythonhosted.org/packages/e3/0d/9f80b46ed3ef23fc48cfa98f049ca3a951117a7a3ce8bb0293f7bd782bb7/pySSRS-0.1.0-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "62c1d02bce5500dd1a3ef59f1051e5ee", "sha256": "66697ffd75848fa504a72a6e337367a273a55f813ed88f4d0ced4215c16a206e"}, "downloads": -1, "filename": "pySSRS-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "62c1d02bce5500dd1a3ef59f1051e5ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11342, "upload_time": "2017-03-16T13:08:53", "upload_time_iso_8601": "2017-03-16T13:08:53.291016Z", "url": "https://files.pythonhosted.org/packages/ae/46/27bf58a462876cb0689f068b4145c49f1b39dd129f816546d7f0b75a08c2/pySSRS-1.0.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "62c1d02bce5500dd1a3ef59f1051e5ee", "sha256": "66697ffd75848fa504a72a6e337367a273a55f813ed88f4d0ced4215c16a206e"}, "downloads": -1, "filename": "pySSRS-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "62c1d02bce5500dd1a3ef59f1051e5ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11342, "upload_time": "2017-03-16T13:08:53", "upload_time_iso_8601": "2017-03-16T13:08:53.291016Z", "url": "https://files.pythonhosted.org/packages/ae/46/27bf58a462876cb0689f068b4145c49f1b39dd129f816546d7f0b75a08c2/pySSRS-1.0.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:56:05 2020"}