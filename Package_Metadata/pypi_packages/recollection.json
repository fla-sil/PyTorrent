{"info": {"author": "Mike Malinowski", "author_email": "mike@twisted.space", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# Recollection Overview\nRecollection is a state recalling system. It allows for state of objects\nto be snap-shotted exposing functionality to then 'rollback' to any\npreviously stored state.\n\nRecollection gives two distinctly different exposures of this mechanism. If \nperformance is not the most critical concern and your focus is on code\nsimplicity then the inheritence approach is possibly your best option\nproviding you have ownership of the classes which need historical state.\n\n__Note: This is currently pre-release__\n\n## Installation\nYou can install this using pip:\n```commandline\npip install recollection\n```\n\nAlternatively you can get the source from:\nhttps://github.com/mikemalinowski/recollection\n\n## Recollection Inheritence (Inference)\n\nThis example shows how to setup a class using inheritence to \nautomatically handle state storing. As you can see from the example, there\nis no need to explicitly ask recollection to store at any time as it is handled\nentirely for you. This example specifically shows attribute storing :\n\n```python\nimport recollection\n\n# -- Inference is the recollection class designed specifically\n# -- for inheritance situations.\nclass Foo(recollection.Inference):\n\n    def __init__(self):\n        super(Foo, self).__init__()\n\n        self.number = 10\n\n        # -- Register 'number' as a property to monitor\n        self.memento.register('number')\n\n\n# -- Instance our object\nfoo = Foo()\n\n# -- Here we demonstrate directly changing properties\n# -- which are registered\nfoo.number = 5\nfoo.number = 99\nprint(foo.number == 99)\n\n# -- Now restore back one step\nfoo.recollection.restore(1)\nprint(foo.number == 5)\n```\n\nWhilst this example shows how decorators can be utilised to store method\ngetters and setters:\n\n```python\nimport recollection\n\n# -- Inference is the recollection class designed specifically\n# -- for inheritence situations.\nclass Foo(recollection.Inference):\n\n    def __init__(self):\n        super(Foo, self).__init__()\n        self._number = 10\n\n    # -- Declare that this is a recollection getter\n    @recollection.infer.get('number')\n    def number(self):\n        return self._number\n\n    # -- Declare this as a recollection setter\n    @recollection.infer.store('number')\n    def set_number(self, value):\n        self._number = value\n\n# -- Instance our object\nfoo = Foo()\n\n# -- Update our variable using our accessor \nfor number in range(10):\n    foo.set_number(number)\n\n# -- Demonstrate that the current state is 'e'\nprint(foo.number())  # -- Prints 9\n\n# -- Roll back one step in the memento history\nfoo.recollection.restore(1)\nprint(foo.number())  # -- Prints 8\n\n```\n\n## Memento Stack\nHowever, we do not always have the luxury of changing class inheritance\nor you may specifically want to keep the recollection state management out\nof your actual inheritance hierarchy. The following examples all demonstrate\nhow this can be achieved.\n\nIn this example we have a class with two properties. We the instance\na Memento class targeting our foo instance. Each time we call the\nstore method within Memento we are taking a snapshot of the values\nreturned by the registered properties/functions\n\n```python\nimport recollection\n\n\nclass Foo(object):\n    def __init__(self):\n        self.number = 0\n\n# -- Instance our object\nfoo = Foo()\n\n# -- Instance a memento object pointing at foo\nmemento = recollection.Memento(foo)\nmemento.register('number')\n\n# -- Start changing some values on foo, and\n# -- ask our stack to store those changes\nfor number in range(11):\n    foo.number = number\n\n    # -- Ask the memento object to store the state\n    memento.store()\n\n# -- Printing i, shows us 10\nprint(foo.number)\n\n# -- But lets say we roll back to the state 5 versions\n# -- ago\nmemento.restore(5)\n\n# -- Now we can see i is at the version it was when\n# -- it was stored 5 versions back\nprint(foo.number)\n```\n### Lock-Stepped Storage\n\nIt also allows multiple Memento objects to be put into a lock-step,\nsuch that whenever one memento object is storing or restoring then\nall other memento objects in that sync group will also store or\nrestore.\n\n```python\nimport recollection\n\n\nclass Foo(object):\n    def __init__(self):\n        self.number = 0\n\n# -- This time we instance two completely seperate\n# -- foo objects\nfoo_a = Foo()\nfoo_b = Foo()\n\n# -- Instance a memento stack for each\nmemento_a = recollection.Memento(foo_a)\nmemento_b = recollection.Memento(foo_b)\n\nmemento_a.register('number')\nmemento_b.register('number')\n\n# -- Now we will put our stacks into a state of lock-step\n# -- which means whenever one of them is stored or restored\n# -- all others in the lock-step group will have the same\n# -- action performed\nmemento_a.group(memento_b)\n\n# -- Increment some values on both objects\nfor i in range(11):\n    foo_a.i = i\n    foo_b.i = i\n\n    # -- Trigger a store on only one stack\n    memento_a.store()\n\n# -- We can see that both A and B have a value of 10\nprint(foo_a.i == 10 and foo_b.i == 10)\n\n# -- Now we rollback - knowing that this action will occur\n# -- across all grouped memento objects\nmemento_a.restore(5)\n\n# -- Now we can see i is at the version it was when\n# -- it was stored 5 versions back\nprint(foo_a.i == 5 and foo_b.i == 5)\n```\n\n### Serialisation\nSerialisers can also be registered against memento instances allowing\nthe stored state of a memento object to be serialised into a persistent\nstate.\n\nThis example shows how we might define a user preferences class, and\nwithin that class we define a memento object to store the preference\nstate. By registering a serialiser the preferences state will be written\nto disk whenever the 'store' is called.\n\nNotice that in this example we're also choosing not to store private\nmember variables, but instead we're harnessing the public api of the\nclass as getters and setters.\n\n```python\nclass UserPreferences(object):\n\n    def __init__(self):\n\n        # -- Visual preferences\n        self._theme = 'default'\n\n        # -- Define our memento, which we utilise specifically to\n        # -- store our preferences to a persistent location\n        self._memento = recollection.Memento(self)\n\n        # -- We will utilise the JSON Appdata serialiser, which\n        # -- writes our memento information to the app data system\n        # -- location\n        self._memento.register_serialiser(\n            serialiser=recollection.JsonAppSerialiser,\n            identifier='memento/demos/userprefs/UserPreferenceA',\n        )\n\n        # -- Register which properties we want the store to focus on\n        self._memento.register(\n            label='theme',\n            getter=self.get_theme,\n            setter=self.set_theme,\n        )\n\n        # -- Finally, we deserialise - which will update this class\n        # -- with any previously stored state\n        self._memento.deserialise()\n\n    # --------------------------------------------------------------\n    def get_theme(self):\n        return self._theme\n\n    # --------------------------------------------------------------\n    def set_theme(self, theme):\n        self._theme = theme\n        self._memento.store(serialise=True)\n```\n\n### Decoration\nEqually, if we want to make it a little more obvious at the class level \nwhich functions are storing we could opt to utilise the Memento decorator,\nwhich stores and serialises:\n\n```python\nclass UserPreferences(object):\n\n    @recollection.serialise_after('theme')\n    def set_theme(self, theme):\n        self._theme = theme\n```\n\n# Examples\nThese mechanics are all demonstrated in the example modules, specifically:\n\n### User Preferences Object\nThis demo shows a user preferences object being interacted\nwhich which works in the same way as the example above, where the\nsettings are stored as changed come in - allowing the preferences to\nbe  'undone'.\n```python\n# -- This demo shows a user preferences object being interacted\n# -- which which works in the same way as the example above.\nfrom recollection.examples.userprefs.demo import demo\n\ndemo()\n```\n\n### Alternate User Preferences Object\nThis demo is identical to the demo above in terms of output but is \nhandled through decorators.\n```python\nfrom recollection.examples.userprefs.demo import demo2\n\ndemo2()\n```\n\n### Board Game with roll-back\nThis demo utilises a 'boardgame' style scenario where\nwe're given two players and the desire to 'undo' the results\nof turns if they are not desirable!\n```python\nfrom recollection.examples.boardgame.game import demo\n\ndemo()\n```\n\n### Pin Movement (Multi-attribute altering)\nThis demo shows the utilisation of a setter which is actually setting\nmultiple recorded attributes but wants to have a single restore step.\n```python\nfrom recollection.examples.pins.demo import demo\n\ndemo()\n```\n\n### Renamer (Ui and Code)\nThis demo shows how recollection can be used to store state of a functional\nobject which is represented as a visual tool (utilising PySide2).\n```python\nfrom recollection.examples.renamer.demo import demo\n\ndemo()\n```\n\n## Testing and Stability\n\nThere are currently unittests which cover most of Memento's core, but it is not yet exhaustive.\n\n## Compatability\n\nThis has been tested under Python 2.7.13 and Python 3.6.6 on both Ubuntu and Windows.\n\n## Contribute\n\nIf you would like to contribute thoughts, ideas, fixes or features please get in touch! mike@twisted.space\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mikemalinowski/recollection", "keywords": "recollect recollection memento mementos", "license": "", "maintainer": "", "maintainer_email": "", "name": "recollection", "package_url": "https://pypi.org/project/recollection/", "platform": "", "project_url": "https://pypi.org/project/recollection/", "project_urls": {"Homepage": "https://github.com/mikemalinowski/recollection"}, "release_url": "https://pypi.org/project/recollection/0.9.3/", "requires_dist": ["six"], "requires_python": "", "summary": "A python package exposing the memento design pattern", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Recollection Overview</h1>\n<p>Recollection is a state recalling system. It allows for state of objects\nto be snap-shotted exposing functionality to then 'rollback' to any\npreviously stored state.</p>\n<p>Recollection gives two distinctly different exposures of this mechanism. If\nperformance is not the most critical concern and your focus is on code\nsimplicity then the inheritence approach is possibly your best option\nproviding you have ownership of the classes which need historical state.</p>\n<p><strong>Note: This is currently pre-release</strong></p>\n<h2>Installation</h2>\n<p>You can install this using pip:</p>\n<pre>pip install recollection\n</pre>\n<p>Alternatively you can get the source from:\n<a href=\"https://github.com/mikemalinowski/recollection\" rel=\"nofollow\">https://github.com/mikemalinowski/recollection</a></p>\n<h2>Recollection Inheritence (Inference)</h2>\n<p>This example shows how to setup a class using inheritence to\nautomatically handle state storing. As you can see from the example, there\nis no need to explicitly ask recollection to store at any time as it is handled\nentirely for you. This example specifically shows attribute storing :</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">recollection</span>\n\n<span class=\"c1\"># -- Inference is the recollection class designed specifically</span>\n<span class=\"c1\"># -- for inheritance situations.</span>\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">recollection</span><span class=\"o\">.</span><span class=\"n\">Inference</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n        <span class=\"c1\"># -- Register 'number' as a property to monitor</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memento</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'number'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># -- Instance our object</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># -- Here we demonstrate directly changing properties</span>\n<span class=\"c1\"># -- which are registered</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">99</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">==</span> <span class=\"mi\">99</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Now restore back one step</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">recollection</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>Whilst this example shows how decorators can be utilised to store method\ngetters and setters:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">recollection</span>\n\n<span class=\"c1\"># -- Inference is the recollection class designed specifically</span>\n<span class=\"c1\"># -- for inheritence situations.</span>\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">recollection</span><span class=\"o\">.</span><span class=\"n\">Inference</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_number</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n    <span class=\"c1\"># -- Declare that this is a recollection getter</span>\n    <span class=\"nd\">@recollection</span><span class=\"o\">.</span><span class=\"n\">infer</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'number'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_number</span>\n\n    <span class=\"c1\"># -- Declare this as a recollection setter</span>\n    <span class=\"nd\">@recollection</span><span class=\"o\">.</span><span class=\"n\">infer</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"s1\">'number'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_number</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n<span class=\"c1\"># -- Instance our object</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># -- Update our variable using our accessor </span>\n<span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">set_number</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Demonstrate that the current state is 'e'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">())</span>  <span class=\"c1\"># -- Prints 9</span>\n\n<span class=\"c1\"># -- Roll back one step in the memento history</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">recollection</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">())</span>  <span class=\"c1\"># -- Prints 8</span>\n</pre>\n<h2>Memento Stack</h2>\n<p>However, we do not always have the luxury of changing class inheritance\nor you may specifically want to keep the recollection state management out\nof your actual inheritance hierarchy. The following examples all demonstrate\nhow this can be achieved.</p>\n<p>In this example we have a class with two properties. We the instance\na Memento class targeting our foo instance. Each time we call the\nstore method within Memento we are taking a snapshot of the values\nreturned by the registered properties/functions</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">recollection</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># -- Instance our object</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># -- Instance a memento object pointing at foo</span>\n<span class=\"n\">memento</span> <span class=\"o\">=</span> <span class=\"n\">recollection</span><span class=\"o\">.</span><span class=\"n\">Memento</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n<span class=\"n\">memento</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'number'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Start changing some values on foo, and</span>\n<span class=\"c1\"># -- ask our stack to store those changes</span>\n<span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n\n    <span class=\"c1\"># -- Ask the memento object to store the state</span>\n    <span class=\"n\">memento</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># -- Printing i, shows us 10</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- But lets say we roll back to the state 5 versions</span>\n<span class=\"c1\"># -- ago</span>\n<span class=\"n\">memento</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Now we can see i is at the version it was when</span>\n<span class=\"c1\"># -- it was stored 5 versions back</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">)</span>\n</pre>\n<h3>Lock-Stepped Storage</h3>\n<p>It also allows multiple Memento objects to be put into a lock-step,\nsuch that whenever one memento object is storing or restoring then\nall other memento objects in that sync group will also store or\nrestore.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">recollection</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># -- This time we instance two completely seperate</span>\n<span class=\"c1\"># -- foo objects</span>\n<span class=\"n\">foo_a</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">foo_b</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># -- Instance a memento stack for each</span>\n<span class=\"n\">memento_a</span> <span class=\"o\">=</span> <span class=\"n\">recollection</span><span class=\"o\">.</span><span class=\"n\">Memento</span><span class=\"p\">(</span><span class=\"n\">foo_a</span><span class=\"p\">)</span>\n<span class=\"n\">memento_b</span> <span class=\"o\">=</span> <span class=\"n\">recollection</span><span class=\"o\">.</span><span class=\"n\">Memento</span><span class=\"p\">(</span><span class=\"n\">foo_b</span><span class=\"p\">)</span>\n\n<span class=\"n\">memento_a</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'number'</span><span class=\"p\">)</span>\n<span class=\"n\">memento_b</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'number'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Now we will put our stacks into a state of lock-step</span>\n<span class=\"c1\"># -- which means whenever one of them is stored or restored</span>\n<span class=\"c1\"># -- all others in the lock-step group will have the same</span>\n<span class=\"c1\"># -- action performed</span>\n<span class=\"n\">memento_a</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"n\">memento_b</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Increment some values on both objects</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">):</span>\n    <span class=\"n\">foo_a</span><span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n    <span class=\"n\">foo_b</span><span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n\n    <span class=\"c1\"># -- Trigger a store on only one stack</span>\n    <span class=\"n\">memento_a</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># -- We can see that both A and B have a value of 10</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo_a</span><span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">10</span> <span class=\"ow\">and</span> <span class=\"n\">foo_b</span><span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Now we rollback - knowing that this action will occur</span>\n<span class=\"c1\"># -- across all grouped memento objects</span>\n<span class=\"n\">memento_a</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- Now we can see i is at the version it was when</span>\n<span class=\"c1\"># -- it was stored 5 versions back</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo_a</span><span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">5</span> <span class=\"ow\">and</span> <span class=\"n\">foo_b</span><span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<h3>Serialisation</h3>\n<p>Serialisers can also be registered against memento instances allowing\nthe stored state of a memento object to be serialised into a persistent\nstate.</p>\n<p>This example shows how we might define a user preferences class, and\nwithin that class we define a memento object to store the preference\nstate. By registering a serialiser the preferences state will be written\nto disk whenever the 'store' is called.</p>\n<p>Notice that in this example we're also choosing not to store private\nmember variables, but instead we're harnessing the public api of the\nclass as getters and setters.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserPreferences</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># -- Visual preferences</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme</span> <span class=\"o\">=</span> <span class=\"s1\">'default'</span>\n\n        <span class=\"c1\"># -- Define our memento, which we utilise specifically to</span>\n        <span class=\"c1\"># -- store our preferences to a persistent location</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_memento</span> <span class=\"o\">=</span> <span class=\"n\">recollection</span><span class=\"o\">.</span><span class=\"n\">Memento</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># -- We will utilise the JSON Appdata serialiser, which</span>\n        <span class=\"c1\"># -- writes our memento information to the app data system</span>\n        <span class=\"c1\"># -- location</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_memento</span><span class=\"o\">.</span><span class=\"n\">register_serialiser</span><span class=\"p\">(</span>\n            <span class=\"n\">serialiser</span><span class=\"o\">=</span><span class=\"n\">recollection</span><span class=\"o\">.</span><span class=\"n\">JsonAppSerialiser</span><span class=\"p\">,</span>\n            <span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"s1\">'memento/demos/userprefs/UserPreferenceA'</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># -- Register which properties we want the store to focus on</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_memento</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'theme'</span><span class=\"p\">,</span>\n            <span class=\"n\">getter</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_theme</span><span class=\"p\">,</span>\n            <span class=\"n\">setter</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_theme</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># -- Finally, we deserialise - which will update this class</span>\n        <span class=\"c1\"># -- with any previously stored state</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_memento</span><span class=\"o\">.</span><span class=\"n\">deserialise</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># --------------------------------------------------------------</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_theme</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme</span>\n\n    <span class=\"c1\"># --------------------------------------------------------------</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_theme</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theme</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme</span> <span class=\"o\">=</span> <span class=\"n\">theme</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_memento</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">serialise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Decoration</h3>\n<p>Equally, if we want to make it a little more obvious at the class level\nwhich functions are storing we could opt to utilise the Memento decorator,\nwhich stores and serialises:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserPreferences</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@recollection</span><span class=\"o\">.</span><span class=\"n\">serialise_after</span><span class=\"p\">(</span><span class=\"s1\">'theme'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_theme</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">theme</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_theme</span> <span class=\"o\">=</span> <span class=\"n\">theme</span>\n</pre>\n<h1>Examples</h1>\n<p>These mechanics are all demonstrated in the example modules, specifically:</p>\n<h3>User Preferences Object</h3>\n<p>This demo shows a user preferences object being interacted\nwhich which works in the same way as the example above, where the\nsettings are stored as changed come in - allowing the preferences to\nbe  'undone'.</p>\n<pre><span class=\"c1\"># -- This demo shows a user preferences object being interacted</span>\n<span class=\"c1\"># -- which which works in the same way as the example above.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">recollection.examples.userprefs.demo</span> <span class=\"kn\">import</span> <span class=\"n\">demo</span>\n\n<span class=\"n\">demo</span><span class=\"p\">()</span>\n</pre>\n<h3>Alternate User Preferences Object</h3>\n<p>This demo is identical to the demo above in terms of output but is\nhandled through decorators.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">recollection.examples.userprefs.demo</span> <span class=\"kn\">import</span> <span class=\"n\">demo2</span>\n\n<span class=\"n\">demo2</span><span class=\"p\">()</span>\n</pre>\n<h3>Board Game with roll-back</h3>\n<p>This demo utilises a 'boardgame' style scenario where\nwe're given two players and the desire to 'undo' the results\nof turns if they are not desirable!</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">recollection.examples.boardgame.game</span> <span class=\"kn\">import</span> <span class=\"n\">demo</span>\n\n<span class=\"n\">demo</span><span class=\"p\">()</span>\n</pre>\n<h3>Pin Movement (Multi-attribute altering)</h3>\n<p>This demo shows the utilisation of a setter which is actually setting\nmultiple recorded attributes but wants to have a single restore step.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">recollection.examples.pins.demo</span> <span class=\"kn\">import</span> <span class=\"n\">demo</span>\n\n<span class=\"n\">demo</span><span class=\"p\">()</span>\n</pre>\n<h3>Renamer (Ui and Code)</h3>\n<p>This demo shows how recollection can be used to store state of a functional\nobject which is represented as a visual tool (utilising PySide2).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">recollection.examples.renamer.demo</span> <span class=\"kn\">import</span> <span class=\"n\">demo</span>\n\n<span class=\"n\">demo</span><span class=\"p\">()</span>\n</pre>\n<h2>Testing and Stability</h2>\n<p>There are currently unittests which cover most of Memento's core, but it is not yet exhaustive.</p>\n<h2>Compatability</h2>\n<p>This has been tested under Python 2.7.13 and Python 3.6.6 on both Ubuntu and Windows.</p>\n<h2>Contribute</h2>\n<p>If you would like to contribute thoughts, ideas, fixes or features please get in touch! <a href=\"mailto:mike@twisted.space\">mike@twisted.space</a></p>\n\n          </div>"}, "last_serial": 4524866, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "f3d67682f9b41dd33b5888d6e00d3d42", "sha256": "86ee65e9c896e0acf412e8b19bf5aac1c056b81aaec8a19397e2ec9b2d2db630"}, "downloads": -1, "filename": "recollection-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f3d67682f9b41dd33b5888d6e00d3d42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36735, "upload_time": "2018-11-22T21:23:39", "upload_time_iso_8601": "2018-11-22T21:23:39.123675Z", "url": "https://files.pythonhosted.org/packages/3b/29/ce28851f73e3a7bcb1ddd6b7632fc1f4b3b65e4e0a6d79c497b9cd65377e/recollection-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2c3d05e78296c521e124cc3616a26a0", "sha256": "c609b3c0f7cad5305cefeafa71fd266c5524f320bb89b2a04299db4b74122aff"}, "downloads": -1, "filename": "recollection-0.9.0.tar.gz", "has_sig": false, "md5_digest": "c2c3d05e78296c521e124cc3616a26a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29322, "upload_time": "2018-11-22T21:23:41", "upload_time_iso_8601": "2018-11-22T21:23:41.170077Z", "url": "https://files.pythonhosted.org/packages/92/ff/22e6e18348373b0e816e08621a4d2910a3574cedb7efba1474e355b2306c/recollection-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "63c3fd331e5e323402def20c5f33ec5b", "sha256": "3c655a15b15058ffcb393fd92fd52b8cb5002d9316662f23593cbd27806edc6e"}, "downloads": -1, "filename": "recollection-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "63c3fd331e5e323402def20c5f33ec5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36739, "upload_time": "2018-11-22T21:29:28", "upload_time_iso_8601": "2018-11-22T21:29:28.180144Z", "url": "https://files.pythonhosted.org/packages/37/17/06ff8682e611b879acc62d583438bd22cd3190fff509bef7e3e43d9eb28e/recollection-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2ff0b733cbb10291687c438aa501f61", "sha256": "707c13305c2dc163779ca4b402902c3b47982d4acd71d497f2fe6b46210575c8"}, "downloads": -1, "filename": "recollection-0.9.1.tar.gz", "has_sig": false, "md5_digest": "e2ff0b733cbb10291687c438aa501f61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29323, "upload_time": "2018-11-22T21:29:29", "upload_time_iso_8601": "2018-11-22T21:29:29.555283Z", "url": "https://files.pythonhosted.org/packages/ae/78/5513ba68b5778893b4af310aeec9fa086e09d278469e98fc950fe2d404e6/recollection-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "cffc9a3352519773e557ec3fc194458f", "sha256": "69eb94dddef67abc840ce456c0610040e67d3528fe2b8e3064f6477527afa92a"}, "downloads": -1, "filename": "recollection-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cffc9a3352519773e557ec3fc194458f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36398, "upload_time": "2018-11-23T18:51:06", "upload_time_iso_8601": "2018-11-23T18:51:06.167076Z", "url": "https://files.pythonhosted.org/packages/80/ab/1f76061599e7ececa6680c9012af3ff18268610ac63da92be4dd6ba8d07b/recollection-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2120d9f4fdf2b648b5e7b31162682c83", "sha256": "f0769676e95d858e2b2609575e211b745d84faa211a2bd34d212b3379824e5b2"}, "downloads": -1, "filename": "recollection-0.9.2.tar.gz", "has_sig": false, "md5_digest": "2120d9f4fdf2b648b5e7b31162682c83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28921, "upload_time": "2018-11-23T18:51:07", "upload_time_iso_8601": "2018-11-23T18:51:07.500136Z", "url": "https://files.pythonhosted.org/packages/2e/6d/3fabe0fee0c54532d471aee8aec351e91930b13a30a349215592ae1a1a25/recollection-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "d686f0767f29d06a9889d4fe7b56d915", "sha256": "ec6292da1cd67f8dbc4627258143a465fc7b69a136ee15d8505ac357354c93ff"}, "downloads": -1, "filename": "recollection-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d686f0767f29d06a9889d4fe7b56d915", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40641, "upload_time": "2018-11-25T00:24:18", "upload_time_iso_8601": "2018-11-25T00:24:18.407693Z", "url": "https://files.pythonhosted.org/packages/ea/d4/75eaf1193396289ad207d397a755a206ad4c0366c3ecc6b8f6758bea2b82/recollection-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bce680ca5e27702607cf98459910bb88", "sha256": "cc314fdd17bca371fd5912f7024a2c7bc7a9dba76b02652cd5224e9c731f0baf"}, "downloads": -1, "filename": "recollection-0.9.3.tar.gz", "has_sig": false, "md5_digest": "bce680ca5e27702607cf98459910bb88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32633, "upload_time": "2018-11-25T00:24:19", "upload_time_iso_8601": "2018-11-25T00:24:19.826566Z", "url": "https://files.pythonhosted.org/packages/56/60/6c6309701ebb4422352273bc53e60fa1ca9985a74141a30e3365b9bebcdb/recollection-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d686f0767f29d06a9889d4fe7b56d915", "sha256": "ec6292da1cd67f8dbc4627258143a465fc7b69a136ee15d8505ac357354c93ff"}, "downloads": -1, "filename": "recollection-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d686f0767f29d06a9889d4fe7b56d915", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40641, "upload_time": "2018-11-25T00:24:18", "upload_time_iso_8601": "2018-11-25T00:24:18.407693Z", "url": "https://files.pythonhosted.org/packages/ea/d4/75eaf1193396289ad207d397a755a206ad4c0366c3ecc6b8f6758bea2b82/recollection-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bce680ca5e27702607cf98459910bb88", "sha256": "cc314fdd17bca371fd5912f7024a2c7bc7a9dba76b02652cd5224e9c731f0baf"}, "downloads": -1, "filename": "recollection-0.9.3.tar.gz", "has_sig": false, "md5_digest": "bce680ca5e27702607cf98459910bb88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32633, "upload_time": "2018-11-25T00:24:19", "upload_time_iso_8601": "2018-11-25T00:24:19.826566Z", "url": "https://files.pythonhosted.org/packages/56/60/6c6309701ebb4422352273bc53e60fa1ca9985a74141a30e3365b9bebcdb/recollection-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:10 2020"}