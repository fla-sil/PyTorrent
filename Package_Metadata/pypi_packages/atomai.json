{"info": {"author": "Maxim Ziatdinov", "author_email": "maxim.ziatdinov@ai4microcopy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering"], "description": "[![PyPI version](https://badge.fury.io/py/atomai.svg)](https://badge.fury.io/py/atomai)\n[![Build Status](https://travis-ci.com/ziatdinovmax/atomai.svg?branch=master)](https://travis-ci.com/ziatdinovmax/atomai)\n[![Documentation Status](https://readthedocs.org/projects/atomai/badge/?version=latest)](https://atomai.readthedocs.io/en/latest/?badge=latest)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/8fa8829627f040dda46e2dc30e48aca1)](https://app.codacy.com/manual/ziatdinovmax/atomai?utm_source=github.com&utm_medium=referral&utm_content=ziatdinovmax/atomai&utm_campaign=Badge_Grade_Dashboard)\n[![Downloads](https://pepy.tech/badge/atomai/month)](https://pepy.tech/project/atomai/month)\n[![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/Quickstart_AtomAI_in_the_Cloud.ipynb)\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/ziatdinovmax/atomai)\n\n# AtomAI\n\n## What is AtomAI?\n\nAtomAI is a simple Python package for machine learning-based analysis of experimental atom-resolved data from electron and scanning probe microscopes, which doesn't require any advanced knowledge of Python (or machine learning). It is the next iteration of the [AICrystallographer project](https://github.com/pycroscopy/AICrystallographer).\n\n## How to use it?\n\nAtomAI has two main modules: *atomnet* and *atomstat*. The *atomnet* is for training neural networks (with just one line of code) and for applying trained models to finding atoms and defects in image data (which also takes  a single line of code). The *atomstat* allows taking the *atomnet* predictions and performing the statistical analysis on the local image descriptors associated with the identified atoms and defects (e.g., principal component analysis of atomic distortions in a single image or computing gaussian mixture model components with the transition probabilities for movies).\n\nHere is an example of how one can train a neural network for atom/defect finding with essentially one line of code:\n\n```python\nfrom atomai import atomnet\n\n# Here you load your training data\ndataset = np.load('training_data.npz')\nimages_all = dataset['X_train']\nlabels_all = dataset['y_train']\nimages_test_all = dataset['X_test']\nlabels_test_all = dataset['y_test']\n\n# Train a model\ntrained_model = atomnet.trainer(\n    images_all, labels_all, \n    images_test_all, labels_test_all,\n    training_cycles=500).run()   \n```\n\nTrained models can be used to find atoms/defects in the previously unseen (by a model) experimental data:\n```python\n# Here you load new experimental data (as 2D or 3D numpy array)\nexpdata = np.load('expdata-test.npy')\n\n# Get model's \"raw\" prediction, atomic coordinates and classes\nnn_input, (nn_output, coordinates) = atomnet.predictor(expdata, trained_model, refine=False).run()\n```\n\nOne can then perform statistical analysis using the information extracted by *atomnet*. For example, for a single image, one can identify domains with different ferroic distortions:\n\n```python\nfrom atomai import atomstat\n\n# Get local descriptors\nimstack = atomstat.imlocal(nn_output, coordinates, crop_size=32, coord_class=1)\n\n# Compute distortion \"eigenvectors\" with associated loading maps and plot results:\nnmf_results = imstack.imblock_nmf(n_components=4, plot_results=True)\n```\n\nFor movies, one can extract trajectories of individual defects and calculate the transition probabilities between different classes:\n\n```python\n# Get local descriptors (such as subimages centered around impurities)\nimstack = atomstat.imlocal(nn_output, coordinates, crop_size=32, coord_class=1)\n\n# Calculate Gaussian mixture model (GMM) components\ncomponents, imgs, coords = imstack.gmm(n_components=10, plot_results=True)\n\n# Calculate GMM components and transition probabilities for different trajectories\ntraj_all, trans_all, fram_all = imstack.transition_matrix(n_components=10, rmax=10)\n\n# and more\n```\n\n## Quickstart: AtomAI in the Cloud\n\nThe easiest way to start using AtomAI is via [Google Colab](https://colab.research.google.com/notebooks/intro.ipynb) \n\n1) [Use AtomAI to train a deep NN for atom finding](https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_atomnet.ipynb)\n\n2) [Analyze distortion domains in a single atomic image](https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_atomstat.ipynb)\n\n3) Analyze trajectories of atomic defects in atomic movie - TBA\n\n4) [Prepare training data from experimental image with atomic coordinates (beta)](https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_training_data.ipynb)\n\n5) [Atom finding using deep ensembles for uncertainty quantification (advanced)](https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_deep_ensembles.ipynb)\n\n## Installation\nFirst, install [PyTorch](https://pytorch.org/get-started/locally/). Then, install AtomAI via\n\n```bash\npip install atomai\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ziatdinovmax/atomai", "keywords": "", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "atomai", "package_url": "https://pypi.org/project/atomai/", "platform": "", "project_url": "https://pypi.org/project/atomai/", "project_urls": {"Homepage": "https://github.com/ziatdinovmax/atomai"}, "release_url": "https://pypi.org/project/atomai/0.2.1/", "requires_dist": ["torch (>=1.0.0)", "numpy (>=1.16.4)", "scipy (>=1.3.0)", "scikit-learn (>=0.22.1)", "scikit-image (==0.16.2)", "opencv-python (>=4.1.0)"], "requires_python": ">=3.6", "summary": "Deep and machine learning for atom-resolved data", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/atomai\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d427284e00d0c5243e923e49cd252deab430fb5/68747470733a2f2f62616467652e667572792e696f2f70792f61746f6d61692e737667\"></a>\n<a href=\"https://travis-ci.com/ziatdinovmax/atomai\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1efb2ed91913904d5bde8557afd17a68b1a4dfce/68747470733a2f2f7472617669732d63692e636f6d2f7a69617464696e6f766d61782f61746f6d61692e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://atomai.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73a1c9c179e4d3b8d5b05a8923350e3db41c12ff/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61746f6d61692f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://app.codacy.com/manual/ziatdinovmax/atomai?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ziatdinovmax/atomai&amp;utm_campaign=Badge_Grade_Dashboard\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59cfb59c8319270f0e274e2820504bfe472740f6/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3866613838323936323766303430646461343665326463333065343861636131\"></a>\n<a href=\"https://pepy.tech/project/atomai/month\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/305fdfe298c54e60ee4e4a093c9882ce31c5c9e0/68747470733a2f2f706570792e746563682f62616467652f61746f6d61692f6d6f6e7468\"></a>\n<a href=\"https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/Quickstart_AtomAI_in_the_Cloud.ipynb\" rel=\"nofollow\"><img alt=\"Colab\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74d996556a82b2f1dd5252d2fd8bead60f9e9d21/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667\"></a>\n<a href=\"https://gitpod.io/#https://github.com/ziatdinovmax/atomai\" rel=\"nofollow\"><img alt=\"Gitpod ready-to-code\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26f2435e786f2684d1b0c2e1aa860e172343d37a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64\"></a></p>\n<h1>AtomAI</h1>\n<h2>What is AtomAI?</h2>\n<p>AtomAI is a simple Python package for machine learning-based analysis of experimental atom-resolved data from electron and scanning probe microscopes, which doesn't require any advanced knowledge of Python (or machine learning). It is the next iteration of the <a href=\"https://github.com/pycroscopy/AICrystallographer\" rel=\"nofollow\">AICrystallographer project</a>.</p>\n<h2>How to use it?</h2>\n<p>AtomAI has two main modules: <em>atomnet</em> and <em>atomstat</em>. The <em>atomnet</em> is for training neural networks (with just one line of code) and for applying trained models to finding atoms and defects in image data (which also takes  a single line of code). The <em>atomstat</em> allows taking the <em>atomnet</em> predictions and performing the statistical analysis on the local image descriptors associated with the identified atoms and defects (e.g., principal component analysis of atomic distortions in a single image or computing gaussian mixture model components with the transition probabilities for movies).</p>\n<p>Here is an example of how one can train a neural network for atom/defect finding with essentially one line of code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">atomai</span> <span class=\"kn\">import</span> <span class=\"n\">atomnet</span>\n\n<span class=\"c1\"># Here you load your training data</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'training_data.npz'</span><span class=\"p\">)</span>\n<span class=\"n\">images_all</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"s1\">'X_train'</span><span class=\"p\">]</span>\n<span class=\"n\">labels_all</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"s1\">'y_train'</span><span class=\"p\">]</span>\n<span class=\"n\">images_test_all</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"s1\">'X_test'</span><span class=\"p\">]</span>\n<span class=\"n\">labels_test_all</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"s1\">'y_test'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Train a model</span>\n<span class=\"n\">trained_model</span> <span class=\"o\">=</span> <span class=\"n\">atomnet</span><span class=\"o\">.</span><span class=\"n\">trainer</span><span class=\"p\">(</span>\n    <span class=\"n\">images_all</span><span class=\"p\">,</span> <span class=\"n\">labels_all</span><span class=\"p\">,</span> \n    <span class=\"n\">images_test_all</span><span class=\"p\">,</span> <span class=\"n\">labels_test_all</span><span class=\"p\">,</span>\n    <span class=\"n\">training_cycles</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>   \n</pre>\n<p>Trained models can be used to find atoms/defects in the previously unseen (by a model) experimental data:</p>\n<pre><span class=\"c1\"># Here you load new experimental data (as 2D or 3D numpy array)</span>\n<span class=\"n\">expdata</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'expdata-test.npy'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get model's \"raw\" prediction, atomic coordinates and classes</span>\n<span class=\"n\">nn_input</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">nn_output</span><span class=\"p\">,</span> <span class=\"n\">coordinates</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">atomnet</span><span class=\"o\">.</span><span class=\"n\">predictor</span><span class=\"p\">(</span><span class=\"n\">expdata</span><span class=\"p\">,</span> <span class=\"n\">trained_model</span><span class=\"p\">,</span> <span class=\"n\">refine</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>One can then perform statistical analysis using the information extracted by <em>atomnet</em>. For example, for a single image, one can identify domains with different ferroic distortions:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">atomai</span> <span class=\"kn\">import</span> <span class=\"n\">atomstat</span>\n\n<span class=\"c1\"># Get local descriptors</span>\n<span class=\"n\">imstack</span> <span class=\"o\">=</span> <span class=\"n\">atomstat</span><span class=\"o\">.</span><span class=\"n\">imlocal</span><span class=\"p\">(</span><span class=\"n\">nn_output</span><span class=\"p\">,</span> <span class=\"n\">coordinates</span><span class=\"p\">,</span> <span class=\"n\">crop_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">coord_class</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute distortion \"eigenvectors\" with associated loading maps and plot results:</span>\n<span class=\"n\">nmf_results</span> <span class=\"o\">=</span> <span class=\"n\">imstack</span><span class=\"o\">.</span><span class=\"n\">imblock_nmf</span><span class=\"p\">(</span><span class=\"n\">n_components</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">plot_results</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>For movies, one can extract trajectories of individual defects and calculate the transition probabilities between different classes:</p>\n<pre><span class=\"c1\"># Get local descriptors (such as subimages centered around impurities)</span>\n<span class=\"n\">imstack</span> <span class=\"o\">=</span> <span class=\"n\">atomstat</span><span class=\"o\">.</span><span class=\"n\">imlocal</span><span class=\"p\">(</span><span class=\"n\">nn_output</span><span class=\"p\">,</span> <span class=\"n\">coordinates</span><span class=\"p\">,</span> <span class=\"n\">crop_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">coord_class</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate Gaussian mixture model (GMM) components</span>\n<span class=\"n\">components</span><span class=\"p\">,</span> <span class=\"n\">imgs</span><span class=\"p\">,</span> <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"n\">imstack</span><span class=\"o\">.</span><span class=\"n\">gmm</span><span class=\"p\">(</span><span class=\"n\">n_components</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">plot_results</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate GMM components and transition probabilities for different trajectories</span>\n<span class=\"n\">traj_all</span><span class=\"p\">,</span> <span class=\"n\">trans_all</span><span class=\"p\">,</span> <span class=\"n\">fram_all</span> <span class=\"o\">=</span> <span class=\"n\">imstack</span><span class=\"o\">.</span><span class=\"n\">transition_matrix</span><span class=\"p\">(</span><span class=\"n\">n_components</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">rmax</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># and more</span>\n</pre>\n<h2>Quickstart: AtomAI in the Cloud</h2>\n<p>The easiest way to start using AtomAI is via <a href=\"https://colab.research.google.com/notebooks/intro.ipynb\" rel=\"nofollow\">Google Colab</a></p>\n<ol>\n<li>\n<p><a href=\"https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_atomnet.ipynb\" rel=\"nofollow\">Use AtomAI to train a deep NN for atom finding</a></p>\n</li>\n<li>\n<p><a href=\"https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_atomstat.ipynb\" rel=\"nofollow\">Analyze distortion domains in a single atomic image</a></p>\n</li>\n<li>\n<p>Analyze trajectories of atomic defects in atomic movie - TBA</p>\n</li>\n<li>\n<p><a href=\"https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_training_data.ipynb\" rel=\"nofollow\">Prepare training data from experimental image with atomic coordinates (beta)</a></p>\n</li>\n<li>\n<p><a href=\"https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_deep_ensembles.ipynb\" rel=\"nofollow\">Atom finding using deep ensembles for uncertainty quantification (advanced)</a></p>\n</li>\n</ol>\n<h2>Installation</h2>\n<p>First, install <a href=\"https://pytorch.org/get-started/locally/\" rel=\"nofollow\">PyTorch</a>. Then, install AtomAI via</p>\n<pre>pip install atomai\n</pre>\n\n          </div>"}, "last_serial": 7184674, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "ea8eeb2da0bd70f00f75c8718b3277c6", "sha256": "495f212b53c021d9a8dab3c2dce645a0ab487954e8ef80818a661e5c83e01e87"}, "downloads": -1, "filename": "atomai-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ea8eeb2da0bd70f00f75c8718b3277c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 34610, "upload_time": "2020-03-25T03:14:12", "upload_time_iso_8601": "2020-03-25T03:14:12.672131Z", "url": "https://files.pythonhosted.org/packages/bb/6d/de1939b54e443c28cf6ce9d8baf8edb2ca5a42a93bd8dee768f22002ac52/atomai-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fa96a446b20548760d28368dbab7094", "sha256": "3dce907748a465e3b57674e828d953f1e2afa7f774b7a02bc0f2bc6bbfbe1e99"}, "downloads": -1, "filename": "atomai-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7fa96a446b20548760d28368dbab7094", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 34395, "upload_time": "2020-03-25T03:14:15", "upload_time_iso_8601": "2020-03-25T03:14:15.325488Z", "url": "https://files.pythonhosted.org/packages/97/bc/48216f6645d5f9c72d74c366cffb07679c05a36d98164f16ee79684e696f/atomai-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c06d832bc1e673891dfeff5ef3e2fd66", "sha256": "0a0167a9ea5bcd677f8cdf2d7d429fc8c6c72abe1036897530fae5c9442edfc0"}, "downloads": -1, "filename": "atomai-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c06d832bc1e673891dfeff5ef3e2fd66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 37060, "upload_time": "2020-05-07T01:35:09", "upload_time_iso_8601": "2020-05-07T01:35:09.047451Z", "url": "https://files.pythonhosted.org/packages/4a/e3/35cf2a72a55e085ef6d00a2e5b5624f4b14d1cc076b49c3fdfa8f7ea783a/atomai-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9189e584305eb6df16d791396c1280a", "sha256": "5faeced01bbeca36816ef59f7381e64c21020be472b4a29f9e716aad74657b66"}, "downloads": -1, "filename": "atomai-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d9189e584305eb6df16d791396c1280a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36980, "upload_time": "2020-05-07T01:35:09", "upload_time_iso_8601": "2020-05-07T01:35:09.993707Z", "url": "https://files.pythonhosted.org/packages/69/d1/6dd9f0080ead9feb021749aba06f2bc884be735923dee0652e814fc6fbbd/atomai-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c06d832bc1e673891dfeff5ef3e2fd66", "sha256": "0a0167a9ea5bcd677f8cdf2d7d429fc8c6c72abe1036897530fae5c9442edfc0"}, "downloads": -1, "filename": "atomai-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c06d832bc1e673891dfeff5ef3e2fd66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 37060, "upload_time": "2020-05-07T01:35:09", "upload_time_iso_8601": "2020-05-07T01:35:09.047451Z", "url": "https://files.pythonhosted.org/packages/4a/e3/35cf2a72a55e085ef6d00a2e5b5624f4b14d1cc076b49c3fdfa8f7ea783a/atomai-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9189e584305eb6df16d791396c1280a", "sha256": "5faeced01bbeca36816ef59f7381e64c21020be472b4a29f9e716aad74657b66"}, "downloads": -1, "filename": "atomai-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d9189e584305eb6df16d791396c1280a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36980, "upload_time": "2020-05-07T01:35:09", "upload_time_iso_8601": "2020-05-07T01:35:09.993707Z", "url": "https://files.pythonhosted.org/packages/69/d1/6dd9f0080ead9feb021749aba06f2bc884be735923dee0652e814fc6fbbd/atomai-0.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:34 2020"}