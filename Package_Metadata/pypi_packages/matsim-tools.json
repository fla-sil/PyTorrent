{"info": {"author": "VSP-Berlin", "author_email": "laudan@tu-berlin.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 3"], "description": "# matsim-tools\n\nOfficial tools for working with MATSim output files\n\nMATSim is an open-source, multi-agent transportation simulation framework. Find out more about MATSim at <https://matsim.org>\n\n## About this library\n\nWe are at the very early stages of building this library. The API will change, things will break, and there are certainly bugs. You probably shouldn't use this for anything.\n\n- Our primary goal is to make MATSim play nice with **pandas** and **geopandas**, for data analysis workflows.\n- We have only tested this using Anaconda Python. Only Python 3.x is supported.\n- Currently MATSim network, event, and plans files are supported. Hopefully more will be coming soon.\n- For Geopandas network support, you also need to install `geopandas` and `shapely`.\n- *Now supports JSON and Protobuf event file formats!*\n\n## Quickstart\n\n1. Install using `pip install matsim-tools`\n\n2. In lieu of real documentation, here is some sample code to get you started. Good luck!\n\n```python\nimport matsim\nimport pandas as pd\nfrom collections import defaultdict\n%matplotlib inline\n\n# -------------------------------------------------------------------\n# 1. NETWORK: Read a MATSim network:\nnet = matsim.read_network('output_network.xml.gz')\n\nnet.nodes\n# Dataframe output:\n#           x        y node_id\n# 0  -20000.0      0.0       1\n# 1  -15000.0      0.0       2\n# 2    -865.0   5925.0       3\n# ...\n\nnet.links\n# Dataframe output:\n#      length  capacity  freespeed  ...  link_id from_node to_node\n# 0   10000.0   36000.0      27.78  ...        1         1       2\n# 1   10000.0    3600.0      27.78  ...        2         2       3\n# 2   10000.0    3600.0      27.78  ...        3         2       4\n# ...\n\ngeo = net.as_geo()  # combines links+nodes into a Geopandas dataframe with LINESTRINGs\ngeo.plot()    # try this in a notebook to see your network!\n```\n\n![Switzerland](https://raw.githubusercontent.com/matsim-vsp/matsim-python-tools/master/docs/ch.png)\n\n```python\n# -------------------------------------------------------------------\n# 2. EVENTS: Stream through a MATSim event file.\n\n# The event_reader returns a python generator function, which you can then\n# loop over without loading the entire events file in memory.\n# In this example let's sum up all 'entered link' events to get link volumes.\n\nevents = matsim.event_reader('output_events.xml.gz', filter='entered link,left link')\n\nlink_counts = defaultdict(int) # defaultdict creates a blank dict entry on first reference\n\nfor event in events:\n    if event['type'] == 'entered link':\n        link_counts[event['link']] += 1\n\n# convert our link_counts dict to a pandas dataframe,\n# with 'link_id' column as the index and 'count' column with value:\nlink_counts = pd.DataFrame.from_dict(link_counts, orient='index', columns=['count']).rename_axis('link_id')\n\n# attach counts to our Geopandas network from above\nvolumes = geo.merge(link_counts, on='link_id')\nvolumes.plot(column='count', figsize=(10,10), cmap='Wistia') #cmap is colormap\n```\n\n![Link Counts](https://raw.githubusercontent.com/matsim-vsp/matsim-python-tools/master/docs/counts.png)\n\n```python\n# -------------------------------------------------------------------\n# 3. PLANS: Stream through a MATSim plans file.\n\nplans = matsim.plan_reader('output_plans.xml.gz', selectedPlansOnly = True)\n\n# Each plan is returned as a tuple with its owning person (for now, is this ok?)\n# - The name of the element is in its .tag (e.g. 'plan', 'leg', 'route', 'attributes')\n# - An element's attributes are accessed using .attrib['attrib-name']\n# - Use the element's .text field to get data outside of attributes (e.g. a route's list of links)\n# - Every element can be iterated on to get its children (e.g. the plan's activities and legs)\n\nfor person, plan in plans:\n\n    # do stuff with this plan, e.g.\n    work_activities = filter(\n        lambda e: e.tag == 'activity' and e.attrib['type'] == 'w',\n        plan)\n\n    print('person', person.attrib['id'], 'selected plan w/', len(list(work_activities)), 'work-act')\n    activities.append(num_activities)\n\n# person 1 selected plan w/ 2 work-act\n# person 10 selected plan w/ 1 work-act\n# person 100 selected plan w/ 1 work-act\n# ...\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matsim-vsp/matsim-python-tools", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "matsim-tools", "package_url": "https://pypi.org/project/matsim-tools/", "platform": "", "project_url": "https://pypi.org/project/matsim-tools/", "project_urls": {"Homepage": "https://github.com/matsim-vsp/matsim-python-tools"}, "release_url": "https://pypi.org/project/matsim-tools/0.0.6/", "requires_dist": ["protobuf (>=3.10.0)", "xopen", "pandas"], "requires_python": "", "summary": "MATSim Agent-Based Transportation Simulation Framework - official python analysis tools", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>matsim-tools</h1>\n<p>Official tools for working with MATSim output files</p>\n<p>MATSim is an open-source, multi-agent transportation simulation framework. Find out more about MATSim at <a href=\"https://matsim.org\" rel=\"nofollow\">https://matsim.org</a></p>\n<h2>About this library</h2>\n<p>We are at the very early stages of building this library. The API will change, things will break, and there are certainly bugs. You probably shouldn't use this for anything.</p>\n<ul>\n<li>Our primary goal is to make MATSim play nice with <strong>pandas</strong> and <strong>geopandas</strong>, for data analysis workflows.</li>\n<li>We have only tested this using Anaconda Python. Only Python 3.x is supported.</li>\n<li>Currently MATSim network, event, and plans files are supported. Hopefully more will be coming soon.</li>\n<li>For Geopandas network support, you also need to install <code>geopandas</code> and <code>shapely</code>.</li>\n<li><em>Now supports JSON and Protobuf event file formats!</em></li>\n</ul>\n<h2>Quickstart</h2>\n<ol>\n<li>\n<p>Install using <code>pip install matsim-tools</code></p>\n</li>\n<li>\n<p>In lieu of real documentation, here is some sample code to get you started. Good luck!</p>\n</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matsim</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">defaultdict</span>\n<span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span>\n\n<span class=\"c1\"># -------------------------------------------------------------------</span>\n<span class=\"c1\"># 1. NETWORK: Read a MATSim network:</span>\n<span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">matsim</span><span class=\"o\">.</span><span class=\"n\">read_network</span><span class=\"p\">(</span><span class=\"s1\">'output_network.xml.gz'</span><span class=\"p\">)</span>\n\n<span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">nodes</span>\n<span class=\"c1\"># Dataframe output:</span>\n<span class=\"c1\">#           x        y node_id</span>\n<span class=\"c1\"># 0  -20000.0      0.0       1</span>\n<span class=\"c1\"># 1  -15000.0      0.0       2</span>\n<span class=\"c1\"># 2    -865.0   5925.0       3</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">links</span>\n<span class=\"c1\"># Dataframe output:</span>\n<span class=\"c1\">#      length  capacity  freespeed  ...  link_id from_node to_node</span>\n<span class=\"c1\"># 0   10000.0   36000.0      27.78  ...        1         1       2</span>\n<span class=\"c1\"># 1   10000.0    3600.0      27.78  ...        2         2       3</span>\n<span class=\"c1\"># 2   10000.0    3600.0      27.78  ...        3         2       4</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">geo</span> <span class=\"o\">=</span> <span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">as_geo</span><span class=\"p\">()</span>  <span class=\"c1\"># combines links+nodes into a Geopandas dataframe with LINESTRINGs</span>\n<span class=\"n\">geo</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>    <span class=\"c1\"># try this in a notebook to see your network!</span>\n</pre>\n<p><img alt=\"Switzerland\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/465d4c637a2ec5aa2e38359215b786071f51abad/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d617473696d2d7673702f6d617473696d2d707974686f6e2d746f6f6c732f6d61737465722f646f63732f63682e706e67\"></p>\n<pre><span class=\"c1\"># -------------------------------------------------------------------</span>\n<span class=\"c1\"># 2. EVENTS: Stream through a MATSim event file.</span>\n\n<span class=\"c1\"># The event_reader returns a python generator function, which you can then</span>\n<span class=\"c1\"># loop over without loading the entire events file in memory.</span>\n<span class=\"c1\"># In this example let's sum up all 'entered link' events to get link volumes.</span>\n\n<span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">matsim</span><span class=\"o\">.</span><span class=\"n\">event_reader</span><span class=\"p\">(</span><span class=\"s1\">'output_events.xml.gz'</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"s1\">'entered link,left link'</span><span class=\"p\">)</span>\n\n<span class=\"n\">link_counts</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"c1\"># defaultdict creates a blank dict entry on first reference</span>\n\n<span class=\"k\">for</span> <span class=\"n\">event</span> <span class=\"ow\">in</span> <span class=\"n\">events</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'entered link'</span><span class=\"p\">:</span>\n        <span class=\"n\">link_counts</span><span class=\"p\">[</span><span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'link'</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># convert our link_counts dict to a pandas dataframe,</span>\n<span class=\"c1\"># with 'link_id' column as the index and 'count' column with value:</span>\n<span class=\"n\">link_counts</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">link_counts</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'index'</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'count'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">rename_axis</span><span class=\"p\">(</span><span class=\"s1\">'link_id'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># attach counts to our Geopandas network from above</span>\n<span class=\"n\">volumes</span> <span class=\"o\">=</span> <span class=\"n\">geo</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">link_counts</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s1\">'link_id'</span><span class=\"p\">)</span>\n<span class=\"n\">volumes</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">'Wistia'</span><span class=\"p\">)</span> <span class=\"c1\">#cmap is colormap</span>\n</pre>\n<p><img alt=\"Link Counts\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/03788a62a28c24bc478469bd61f19354d73f2302/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d617473696d2d7673702f6d617473696d2d707974686f6e2d746f6f6c732f6d61737465722f646f63732f636f756e74732e706e67\"></p>\n<pre><span class=\"c1\"># -------------------------------------------------------------------</span>\n<span class=\"c1\"># 3. PLANS: Stream through a MATSim plans file.</span>\n\n<span class=\"n\">plans</span> <span class=\"o\">=</span> <span class=\"n\">matsim</span><span class=\"o\">.</span><span class=\"n\">plan_reader</span><span class=\"p\">(</span><span class=\"s1\">'output_plans.xml.gz'</span><span class=\"p\">,</span> <span class=\"n\">selectedPlansOnly</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Each plan is returned as a tuple with its owning person (for now, is this ok?)</span>\n<span class=\"c1\"># - The name of the element is in its .tag (e.g. 'plan', 'leg', 'route', 'attributes')</span>\n<span class=\"c1\"># - An element's attributes are accessed using .attrib['attrib-name']</span>\n<span class=\"c1\"># - Use the element's .text field to get data outside of attributes (e.g. a route's list of links)</span>\n<span class=\"c1\"># - Every element can be iterated on to get its children (e.g. the plan's activities and legs)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">person</span><span class=\"p\">,</span> <span class=\"n\">plan</span> <span class=\"ow\">in</span> <span class=\"n\">plans</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># do stuff with this plan, e.g.</span>\n    <span class=\"n\">work_activities</span> <span class=\"o\">=</span> <span class=\"nb\">filter</span><span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">tag</span> <span class=\"o\">==</span> <span class=\"s1\">'activity'</span> <span class=\"ow\">and</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">[</span><span class=\"s1\">'type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'w'</span><span class=\"p\">,</span>\n        <span class=\"n\">plan</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'person'</span><span class=\"p\">,</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">],</span> <span class=\"s1\">'selected plan w/'</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">work_activities</span><span class=\"p\">)),</span> <span class=\"s1\">'work-act'</span><span class=\"p\">)</span>\n    <span class=\"n\">activities</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num_activities</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># person 1 selected plan w/ 2 work-act</span>\n<span class=\"c1\"># person 10 selected plan w/ 1 work-act</span>\n<span class=\"c1\"># person 100 selected plan w/ 1 work-act</span>\n<span class=\"c1\"># ...</span>\n</pre>\n\n          </div>"}, "last_serial": 6754989, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a14934ccd48c8fdc56947e4a30f12388", "sha256": "5e38cf92af3bf7a40b8e36a9e3d7c84f09eb56358cb6ea240a833f62c0ef975e"}, "downloads": -1, "filename": "matsim_tools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a14934ccd48c8fdc56947e4a30f12388", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2790, "upload_time": "2020-02-19T14:06:54", "upload_time_iso_8601": "2020-02-19T14:06:54.909593Z", "url": "https://files.pythonhosted.org/packages/54/7c/3c867a77ef8ac5836b77bd61c00c0abea89f47715808a67257ccf3366534/matsim_tools-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "92410e3ca65c414bc8f49d755133ea6e", "sha256": "4d2dae25c76216f909503f7790f8804a46d127d9c45e0f4445dfc1789e030cd0"}, "downloads": -1, "filename": "matsim-tools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "92410e3ca65c414bc8f49d755133ea6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5029, "upload_time": "2020-02-26T14:14:46", "upload_time_iso_8601": "2020-02-26T14:14:46.526379Z", "url": "https://files.pythonhosted.org/packages/c5/f2/e4a02b6afd676d5f671a75c9dee567fc93e60697e7c469a67e3b326744d2/matsim-tools-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "42a07923e068763cc7ebabe817235933", "sha256": "3eec6d5dd9d41a16a5fba3a941ba4aeb69e820c97fea2cc2f53d5d40472c05b1"}, "downloads": -1, "filename": "matsim-tools-0.0.3.tar.gz", "has_sig": false, "md5_digest": "42a07923e068763cc7ebabe817235933", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5558, "upload_time": "2020-02-26T19:02:47", "upload_time_iso_8601": "2020-02-26T19:02:47.769609Z", "url": "https://files.pythonhosted.org/packages/ee/5c/b005e7162ac7b71b73b4cdf6e45643688c8840bfd6051a3acaefa3cd7625/matsim-tools-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "142bc3a843ec51db3e2a9508e8bb0f43", "sha256": "8eb1210469ed6f1970ffbe82f7244caadd5a87e733ce1235b1da89479f92d67f"}, "downloads": -1, "filename": "matsim-tools-0.0.4.tar.gz", "has_sig": false, "md5_digest": "142bc3a843ec51db3e2a9508e8bb0f43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5895, "upload_time": "2020-02-27T10:21:50", "upload_time_iso_8601": "2020-02-27T10:21:50.687592Z", "url": "https://files.pythonhosted.org/packages/c6/9a/25b7f6a5f779290fdc80a609eb2cf95a1af12e805bd5bceb6b0330273fe4/matsim-tools-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "cf79637eed986956c1c94731af12d501", "sha256": "4200e21891ec25e89e0a3614fdef8841c6bef04085366cb450da146f4bcf550f"}, "downloads": -1, "filename": "matsim-tools-0.0.5.tar.gz", "has_sig": false, "md5_digest": "cf79637eed986956c1c94731af12d501", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7550, "upload_time": "2020-03-02T12:13:39", "upload_time_iso_8601": "2020-03-02T12:13:39.734123Z", "url": "https://files.pythonhosted.org/packages/24/a2/43a2c8fabc6416952e42b6a861d709a120f6bdbccd6d3df65f82d2c89095/matsim-tools-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "7c8338d664f39998c0255e3ee8ce08f6", "sha256": "2dc5504550985ca91b7912e2b6e4aa96186ddbeda3e64a357c0500d5092a8bf2"}, "downloads": -1, "filename": "matsim_tools-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "7c8338d664f39998c0255e3ee8ce08f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16824, "upload_time": "2020-03-05T12:58:01", "upload_time_iso_8601": "2020-03-05T12:58:01.786456Z", "url": "https://files.pythonhosted.org/packages/ce/95/a0ad7ac04819c8b268282e6464f80b9fc79fbc2a03954fa2f30a5d81cc3e/matsim_tools-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7687eef3142876523a592bc85f7de2dc", "sha256": "f09a27c459acde635a32b4ce7e3742ce1f9dd05dd630dfb7f9beb38f5d22b47e"}, "downloads": -1, "filename": "matsim-tools-0.0.6.tar.gz", "has_sig": false, "md5_digest": "7687eef3142876523a592bc85f7de2dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15323, "upload_time": "2020-03-05T12:58:03", "upload_time_iso_8601": "2020-03-05T12:58:03.478781Z", "url": "https://files.pythonhosted.org/packages/68/29/9a1469dbee2450be9077993c10c1f6da447dc58f1612e72aef2a8b1e6365/matsim-tools-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c8338d664f39998c0255e3ee8ce08f6", "sha256": "2dc5504550985ca91b7912e2b6e4aa96186ddbeda3e64a357c0500d5092a8bf2"}, "downloads": -1, "filename": "matsim_tools-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "7c8338d664f39998c0255e3ee8ce08f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16824, "upload_time": "2020-03-05T12:58:01", "upload_time_iso_8601": "2020-03-05T12:58:01.786456Z", "url": "https://files.pythonhosted.org/packages/ce/95/a0ad7ac04819c8b268282e6464f80b9fc79fbc2a03954fa2f30a5d81cc3e/matsim_tools-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7687eef3142876523a592bc85f7de2dc", "sha256": "f09a27c459acde635a32b4ce7e3742ce1f9dd05dd630dfb7f9beb38f5d22b47e"}, "downloads": -1, "filename": "matsim-tools-0.0.6.tar.gz", "has_sig": false, "md5_digest": "7687eef3142876523a592bc85f7de2dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15323, "upload_time": "2020-03-05T12:58:03", "upload_time_iso_8601": "2020-03-05T12:58:03.478781Z", "url": "https://files.pythonhosted.org/packages/68/29/9a1469dbee2450be9077993c10c1f6da447dc58f1612e72aef2a8b1e6365/matsim-tools-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:13 2020"}