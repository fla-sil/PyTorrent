{"info": {"author": "Martin Bukatovi\u010d", "author_email": "mbukatov@redhat.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pytest", "Intended Audience :: Developers", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Testing"], "description": "pytest-ansible-playbook\n===================================\n\nThis repository contains `pytest`_ `plugin`_ which provides an easy way\nto run particular `ansible playbooks`_ during setup phase of a test case.\nThis is useful when\nyou already have some playbook files you would like to reuse during test setup\nor plan to maintain test setup in ansible playbooks for you to be able to\nuse it both during test run setup and directly via ansible for other purposes\n(automatically during deployment or manually when needed).\n\nCompared with `pytest-ansible`_ module, this module doesn't allow you to\ninspect `ansible facts`_ or details about results of each ansible task, nor\ndoest it allow to specify and execute an ansible task directly. So if you need\nany of that, go for `pytest-ansible`_ instead. This plugin provides the only\nmissing ansible feature which `pytest-ansible`_ is not supposed to provide - to\nrun ansible playbook file directly.\n\nInitial structure of this repository was generated with `Cookiecutter`_\nalong with `@hackebrot`_'s `Cookiecutter-pytest-plugin`_ template.\n\n\nFeatures\n--------\n\n* The plugin provides ``ansible_playbook`` `pytest fixture`_, which allows\n  one to run one or more ansible playbooks during test setup or tear down of a\n  test case.\n\n* It also provides `context manager`_ ``pytest_ansible_playbook.runner()``\n  which can be used to build custom fixtures with any `scope`_ or to execute\n  setup and/or teardown playbooks in a code of a test case.\n\n* It's compatible with both python2 and python3 (playbooks are executed via\n  running ``ansible-playbook`` in subprocess instead of using api\n  of ansible python module).\n\n* Doesn't allow you to configure ansible in any way, all changes of ansible\n  setup needs to be done in ansible playbooks, variable or config files.\n  This encourages you to maintain a clear separation of ansible playbooks\n  and the tests.\n\n\nRequirements\n------------\n\nAnsible should be installed (so that ``ansible-playbook`` binary is\navailable in PATH). Use version provided by packaging system of your operation\nsystem.\n\n\nInstallation\n------------\n\nYou can either install `stable release from PyPI`_ or use latest development\nversion from master branch.\n\n\nInstalling stable release\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can install \"pytest-ansible-playbook\" via `pip`_ from `PyPI`_::\n\n    $ pip install pytest-ansible-playbook\n\n\nInstalling latest development version\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe suggested way to install from sources of current master branch is\nvia `python virtual enviroment`_::\n\n    $ cd pytest-ansible-playbook\n    $ virtualenv .env\n    $ source .env/bin/activate\n    $ pip install -e .\n\nNote that you can use `virtualenvwrapper`_ to simplify this workflow.\n\n\nUsage\n-----\n\nWhen the plugin is installed, you can use the following command-line\nparameters::\n\n    py.test \\\n        [--ansible-playbook-directory <path_to_directory_with_playbooks>] \\\n        [--ansible-playbook-inventory <path_to_inventory_file>]\n\nWhere ``<path_to_directory_with_playbooks>`` is a directory which contains\nansible playbooks and any other ansible files such as\nconfiguration or roles if needed. A ``ansible-playbook`` process will be able\nto access the files stored there, since this directory is set as cwd (current\nworking directory) of the ansible process.\n\nThe ``<path_to_inventory_file>`` is file with `ansible inventory`_. You can\nuse either an absolute path or a relative path within the ansible directory\nspecified via the 1st option.\n\nNote that the option names were chosen this way so that it doesn't conflict\nwith `pytest-ansible`_ plugin.\n\n\nUsing ansible playbook fixture\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe plugin provides a single pytest fixture called ``ansible_playbook``. To\nspecify playbooks to be executed by the fixture, use the following `pytest\nmarkers`_:\n\n* ``@pytest.mark.ansible_playbook_setup('playbook.yml')``\n* ``@pytest.mark.ansible_playbook_teardown('playbook.yml')``\n\nNote that you can list multiple playbooks in the marker if needed, eg.::\n\n    @pytest.mark.ansible_playbook_setup('playbook.01.yml', 'playbook.02.yml')\n\nboth playbooks would be executed in the given order.\n\nHere is an example how to specify 2 playbooks to be run during setup phase\nof a test case and one for the teardown::\n\n    @pytest.mark.ansible_playbook_setup('setup_foo.yml', 'bar.yml')\n    @pytest.mark.ansible_playbook_teardown('teardown_foo.yml')\n    def test_foo(ansible_playbook):\n        \"\"\"\n        Some testing is done here.\n        \"\"\"\n\nWhile using markers without ``ansible_playbook`` fixture like this is valid::\n\n    @pytest.mark.ansible_playbook_setup('setup_foo.yml')\n    @pytest.mark.ansible_playbook_teardown('teardown_foo.yml')\n    def test_foo():\n        \"\"\"\n        Some testing is done here.\n        \"\"\"\n\nno playbook would be executed in such case.\n\nAlso note that using a marker without any playbook parameter or using the\nfixture without any marker is not valid and would cause an error.\n\n\nUsing ansible playbook runner function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFunction ``pytest_ansible_playbook.runner`` is a `context manager`_ which can\nbe used either to create a custom `pytest fixture`_  or to run playbooks within\na test case.\n\nCreating custom fixture this way is useful when you want to:\n\n* define set of setup/teardown playbooks and use it with multiple test cases,\n* run setup or teardown playbooks in any fixture `scope`_\n  (to overcome the fact that ``ansible_playbook`` has ``fuction`` scope),\n* combine run of given setup/teardown playbooks with other non\n  ansible setup or teardown steps\n  (to overcome the fact that you can't use ``ansible_playbook`` fixture to run\n  setup/teardown for another fixture, because `pytest doesn't expect fixtures\n  to have markers`_).\n* specify that teardown playbooks are skipped when a test case fails\n\nExample of simple custom fixture::\n\n    iport pytest\n    from pytest_ansible_playbook import runner\n\n    @pytest.fixture(scope=\"session\")\n    def custom_fixture(request):\n        setup_playbooks = ['setup_foo.yml', 'setup_bar.yml']\n        teardown_playbooks = ['teardown_foo.yml', 'teardown_bar.yml']\n        with runner(request, setup_playbooks, teardown_playbooks):\n            # here comes code executed during setup, after running the setup\n            # playbooks\n            yield\n            # here you can place code to be executed during teardown, but\n            # before running the teardown playbooks\n\n    def test_bar(custom_fixture):\n        assert 1 == 1\n\nAnd here is an example of using the fixture inside a test case directly::\n\n    from pytest_ansible_playbook import runner\n\n    def test_foo(request):\n        with runner(request, ['setup_foo.yml'], ['teardown_foo.yml']):\n            # code here is executed after the setup playbooks, but before the\n            # teardown ones\n            assert 1 == 1\n\nIf you want to avoid running teardown playbook(s) when a test case fails, use\n``skip_teardown`` argument of the runner::\n\n    with runner(\n            request, teardown_playbooks=['teardown.yml'], skip_teardown=True):\n        assert 1 == 0\n\n\nContributing\n------------\n\nContributions are very welcome. Tests can be run with `tox`_, please ensure\nthe coverage at least stays the same before you submit a pull request.\n\n\nLicense\n-------\n\nDistributed under the terms of the `Apache License 2.0`_ license,\n\"pytest-ansible-playbook\" is free and open source software\n\n\nIssues\n------\n\nIf you encounter any problems, please `file an issue`_ along with a detailed\ndescription.\n\n.. _`file an issue`: https://gitlab.com/mbukatov/pytest-ansible-playbook/issues\n.. _`Cookiecutter`: https://github.com/audreyr/cookiecutter\n.. _`@hackebrot`: https://github.com/hackebrot\n.. _`cookiecutter-pytest-plugin`: https://github.com/pytest-dev/cookiecutter-pytest-plugin\n.. _`pytest`: http://docs.pytest.org/en/latest/\n.. _`pytest fixture`: http://doc.pytest.org/en/latest/fixture.html\n.. _`pytest markers`: http://doc.pytest.org/en/latest/example/markers.html\n.. _`plugin`: http://doc.pytest.org/en/latest/plugins.html\n.. _`tox`: https://tox.readthedocs.io/en/latest/\n.. _`pip`: https://pypi.python.org/pypi/pip/\n.. _`PyPI`: https://pypi.python.org/pypi\n.. _`stable release from PyPI`: https://pypi.org/project/pytest-ansible-playbook/\n.. _`python virtual enviroment`: https://virtualenv.pypa.io/en/stable/\n.. _`virtualenvwrapper`: https://virtualenvwrapper.readthedocs.io/en/latest/\n.. _`pytest-ansible`: https://pypi.python.org/pypi/pytest-ansible\n.. _`ansible playbooks`: https://docs.ansible.com/ansible/playbooks.html\n.. _`ansible facts`: https://docs.ansible.com/ansible/playbooks_variables.html#information-discovered-from-systems-facts\n.. _`ansible inventory`: https://docs.ansible.com/ansible/intro_inventory.html\n.. _`Apache License 2.0`: http://www.apache.org/licenses/LICENSE-2.0\n.. _`context manager`: https://docs.python.org/3.6/library/stdtypes.html#context-manager-types\n.. _`scope`: https://docs.pytest.org/en/latest/fixture.html#scope-sharing-a-fixture-instance-across-tests-in-a-class-module-or-session\n.. _`pytest doesn't expect fixtures to have markers`: https://github.com/pytest-dev/pytest/issues/3664", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/mbukatov/pytest-ansible-playbook", "keywords": "", "license": "Apache 2.0", "maintainer": "Martin Bukatovi\u010d", "maintainer_email": "mbukatov@redhat.com", "name": "pytest-ansible-playbook", "package_url": "https://pypi.org/project/pytest-ansible-playbook/", "platform": "", "project_url": "https://pypi.org/project/pytest-ansible-playbook/", "project_urls": {"Homepage": "https://gitlab.com/mbukatov/pytest-ansible-playbook"}, "release_url": "https://pypi.org/project/pytest-ansible-playbook/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "Pytest fixture which runs given ansible playbook file.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This repository contains <a href=\"http://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a> <a href=\"http://doc.pytest.org/en/latest/plugins.html\" rel=\"nofollow\">plugin</a> which provides an easy way\nto run particular <a href=\"https://docs.ansible.com/ansible/playbooks.html\" rel=\"nofollow\">ansible playbooks</a> during setup phase of a test case.\nThis is useful when\nyou already have some playbook files you would like to reuse during test setup\nor plan to maintain test setup in ansible playbooks for you to be able to\nuse it both during test run setup and directly via ansible for other purposes\n(automatically during deployment or manually when needed).</p>\n<p>Compared with <a href=\"https://pypi.python.org/pypi/pytest-ansible\" rel=\"nofollow\">pytest-ansible</a> module, this module doesn\u2019t allow you to\ninspect <a href=\"https://docs.ansible.com/ansible/playbooks_variables.html#information-discovered-from-systems-facts\" rel=\"nofollow\">ansible facts</a> or details about results of each ansible task, nor\ndoest it allow to specify and execute an ansible task directly. So if you need\nany of that, go for <a href=\"https://pypi.python.org/pypi/pytest-ansible\" rel=\"nofollow\">pytest-ansible</a> instead. This plugin provides the only\nmissing ansible feature which <a href=\"https://pypi.python.org/pypi/pytest-ansible\" rel=\"nofollow\">pytest-ansible</a> is not supposed to provide - to\nrun ansible playbook file directly.</p>\n<p>Initial structure of this repository was generated with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a>\nalong with <a href=\"https://github.com/hackebrot\" rel=\"nofollow\">@hackebrot</a>\u2019s <a href=\"https://github.com/pytest-dev/cookiecutter-pytest-plugin\" rel=\"nofollow\">Cookiecutter-pytest-plugin</a> template.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>The plugin provides <tt>ansible_playbook</tt> <a href=\"http://doc.pytest.org/en/latest/fixture.html\" rel=\"nofollow\">pytest fixture</a>, which allows\none to run one or more ansible playbooks during test setup or tear down of a\ntest case.</li>\n<li>It also provides <a href=\"https://docs.python.org/3.6/library/stdtypes.html#context-manager-types\" rel=\"nofollow\">context manager</a> <tt>pytest_ansible_playbook.runner()</tt>\nwhich can be used to build custom fixtures with any <a href=\"https://docs.pytest.org/en/latest/fixture.html#scope-sharing-a-fixture-instance-across-tests-in-a-class-module-or-session\" rel=\"nofollow\">scope</a> or to execute\nsetup and/or teardown playbooks in a code of a test case.</li>\n<li>It\u2019s compatible with both python2 and python3 (playbooks are executed via\nrunning <tt><span class=\"pre\">ansible-playbook</span></tt> in subprocess instead of using api\nof ansible python module).</li>\n<li>Doesn\u2019t allow you to configure ansible in any way, all changes of ansible\nsetup needs to be done in ansible playbooks, variable or config files.\nThis encourages you to maintain a clear separation of ansible playbooks\nand the tests.</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Ansible should be installed (so that <tt><span class=\"pre\">ansible-playbook</span></tt> binary is\navailable in PATH). Use version provided by packaging system of your operation\nsystem.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can either install <a href=\"https://pypi.org/project/pytest-ansible-playbook/\" rel=\"nofollow\">stable release from PyPI</a> or use latest development\nversion from master branch.</p>\n<div id=\"installing-stable-release\">\n<h3>Installing stable release</h3>\n<p>You can install \u201cpytest-ansible-playbook\u201d via <a href=\"https://pypi.python.org/pypi/pip/\" rel=\"nofollow\">pip</a> from <a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install pytest-ansible-playbook\n</pre>\n</div>\n<div id=\"installing-latest-development-version\">\n<h3>Installing latest development version</h3>\n<p>The suggested way to install from sources of current master branch is\nvia <a href=\"https://virtualenv.pypa.io/en/stable/\" rel=\"nofollow\">python virtual enviroment</a>:</p>\n<pre>$ cd pytest-ansible-playbook\n$ virtualenv .env\n$ source .env/bin/activate\n$ pip install -e .\n</pre>\n<p>Note that you can use <a href=\"https://virtualenvwrapper.readthedocs.io/en/latest/\" rel=\"nofollow\">virtualenvwrapper</a> to simplify this workflow.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>When the plugin is installed, you can use the following command-line\nparameters:</p>\n<pre>py.test \\\n    [--ansible-playbook-directory &lt;path_to_directory_with_playbooks&gt;] \\\n    [--ansible-playbook-inventory &lt;path_to_inventory_file&gt;]\n</pre>\n<p>Where <tt>&lt;path_to_directory_with_playbooks&gt;</tt> is a directory which contains\nansible playbooks and any other ansible files such as\nconfiguration or roles if needed. A <tt><span class=\"pre\">ansible-playbook</span></tt> process will be able\nto access the files stored there, since this directory is set as cwd (current\nworking directory) of the ansible process.</p>\n<p>The <tt>&lt;path_to_inventory_file&gt;</tt> is file with <a href=\"https://docs.ansible.com/ansible/intro_inventory.html\" rel=\"nofollow\">ansible inventory</a>. You can\nuse either an absolute path or a relative path within the ansible directory\nspecified via the 1st option.</p>\n<p>Note that the option names were chosen this way so that it doesn\u2019t conflict\nwith <a href=\"https://pypi.python.org/pypi/pytest-ansible\" rel=\"nofollow\">pytest-ansible</a> plugin.</p>\n<div id=\"using-ansible-playbook-fixture\">\n<h3>Using ansible playbook fixture</h3>\n<p>The plugin provides a single pytest fixture called <tt>ansible_playbook</tt>. To\nspecify playbooks to be executed by the fixture, use the following <a href=\"http://doc.pytest.org/en/latest/example/markers.html\" rel=\"nofollow\">pytest\nmarkers</a>:</p>\n<ul>\n<li><tt><span class=\"pre\">@pytest.mark.ansible_playbook_setup('playbook.yml')</span></tt></li>\n<li><tt><span class=\"pre\">@pytest.mark.ansible_playbook_teardown('playbook.yml')</span></tt></li>\n</ul>\n<p>Note that you can list multiple playbooks in the marker if needed, eg.:</p>\n<pre>@pytest.mark.ansible_playbook_setup('playbook.01.yml', 'playbook.02.yml')\n</pre>\n<p>both playbooks would be executed in the given order.</p>\n<p>Here is an example how to specify 2 playbooks to be run during setup phase\nof a test case and one for the teardown:</p>\n<pre>@pytest.mark.ansible_playbook_setup('setup_foo.yml', 'bar.yml')\n@pytest.mark.ansible_playbook_teardown('teardown_foo.yml')\ndef test_foo(ansible_playbook):\n    \"\"\"\n    Some testing is done here.\n    \"\"\"\n</pre>\n<p>While using markers without <tt>ansible_playbook</tt> fixture like this is valid:</p>\n<pre>@pytest.mark.ansible_playbook_setup('setup_foo.yml')\n@pytest.mark.ansible_playbook_teardown('teardown_foo.yml')\ndef test_foo():\n    \"\"\"\n    Some testing is done here.\n    \"\"\"\n</pre>\n<p>no playbook would be executed in such case.</p>\n<p>Also note that using a marker without any playbook parameter or using the\nfixture without any marker is not valid and would cause an error.</p>\n</div>\n<div id=\"using-ansible-playbook-runner-function\">\n<h3>Using ansible playbook runner function</h3>\n<p>Function <tt>pytest_ansible_playbook.runner</tt> is a <a href=\"https://docs.python.org/3.6/library/stdtypes.html#context-manager-types\" rel=\"nofollow\">context manager</a> which can\nbe used either to create a custom <a href=\"http://doc.pytest.org/en/latest/fixture.html\" rel=\"nofollow\">pytest fixture</a>  or to run playbooks within\na test case.</p>\n<p>Creating custom fixture this way is useful when you want to:</p>\n<ul>\n<li>define set of setup/teardown playbooks and use it with multiple test cases,</li>\n<li>run setup or teardown playbooks in any fixture <a href=\"https://docs.pytest.org/en/latest/fixture.html#scope-sharing-a-fixture-instance-across-tests-in-a-class-module-or-session\" rel=\"nofollow\">scope</a>\n(to overcome the fact that <tt>ansible_playbook</tt> has <tt>fuction</tt> scope),</li>\n<li>combine run of given setup/teardown playbooks with other non\nansible setup or teardown steps\n(to overcome the fact that you can\u2019t use <tt>ansible_playbook</tt> fixture to run\nsetup/teardown for another fixture, because <a href=\"https://github.com/pytest-dev/pytest/issues/3664\" rel=\"nofollow\">pytest doesn\u2019t expect fixtures\nto have markers</a>).</li>\n<li>specify that teardown playbooks are skipped when a test case fails</li>\n</ul>\n<p>Example of simple custom fixture:</p>\n<pre>iport pytest\nfrom pytest_ansible_playbook import runner\n\n@pytest.fixture(scope=\"session\")\ndef custom_fixture(request):\n    setup_playbooks = ['setup_foo.yml', 'setup_bar.yml']\n    teardown_playbooks = ['teardown_foo.yml', 'teardown_bar.yml']\n    with runner(request, setup_playbooks, teardown_playbooks):\n        # here comes code executed during setup, after running the setup\n        # playbooks\n        yield\n        # here you can place code to be executed during teardown, but\n        # before running the teardown playbooks\n\ndef test_bar(custom_fixture):\n    assert 1 == 1\n</pre>\n<p>And here is an example of using the fixture inside a test case directly:</p>\n<pre>from pytest_ansible_playbook import runner\n\ndef test_foo(request):\n    with runner(request, ['setup_foo.yml'], ['teardown_foo.yml']):\n        # code here is executed after the setup playbooks, but before the\n        # teardown ones\n        assert 1 == 1\n</pre>\n<p>If you want to avoid running teardown playbook(s) when a test case fails, use\n<tt>skip_teardown</tt> argument of the runner:</p>\n<pre>with runner(\n        request, teardown_playbooks=['teardown.yml'], skip_teardown=True):\n    assert 1 == 0\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are very welcome. Tests can be run with <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>, please ensure\nthe coverage at least stays the same before you submit a pull request.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Distributed under the terms of the <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">Apache License 2.0</a> license,\n\u201cpytest-ansible-playbook\u201d is free and open source software</p>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>If you encounter any problems, please <a href=\"https://gitlab.com/mbukatov/pytest-ansible-playbook/issues\" rel=\"nofollow\">file an issue</a> along with a detailed\ndescription.</p>\n</div>\n\n          </div>"}, "last_serial": 4915319, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "cb8c966308e18bb055609b5880d0454e", "sha256": "77f782633760d5b02c1e68aecfadecc90afc21eb22b0f7281283e2b44069b842"}, "downloads": -1, "filename": "pytest-ansible-playbook-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cb8c966308e18bb055609b5880d0454e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9369, "upload_time": "2016-11-08T15:18:10", "upload_time_iso_8601": "2016-11-08T15:18:10.010382Z", "url": "https://files.pythonhosted.org/packages/ad/fe/710e0cbb671fafbb299e729f621b3b48aedfbfb72066dc7e67e92374677e/pytest-ansible-playbook-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "4e2d862dea44bb827d29a09f01a73406", "sha256": "4dab3afd0fd77d77cd178ae37d6ac390aa0e8c2c2e5dc20e55a0f0514d5e129f"}, "downloads": -1, "filename": "pytest-ansible-playbook-0.4.0.tar.gz", "has_sig": false, "md5_digest": "4e2d862dea44bb827d29a09f01a73406", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10932, "upload_time": "2019-03-07T13:23:36", "upload_time_iso_8601": "2019-03-07T13:23:36.527689Z", "url": "https://files.pythonhosted.org/packages/ba/14/6a238f8786e4292d643b51fe945619ee19bcab9281e6b35fa232f267b232/pytest-ansible-playbook-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "c34fcf5c3f969202947859756919f8d5", "sha256": "2755d08aa5a64a58044d12178e8257c9e6051800fa1c84e39e3c525719ed004b"}, "downloads": -1, "filename": "pytest-ansible-playbook-0.4.1.tar.gz", "has_sig": false, "md5_digest": "c34fcf5c3f969202947859756919f8d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10925, "upload_time": "2019-03-08T12:55:07", "upload_time_iso_8601": "2019-03-08T12:55:07.341782Z", "url": "https://files.pythonhosted.org/packages/ce/86/5e19827625ed0061d5616b03322d24d5a2e9fe298341a1b35b59cd5f4715/pytest-ansible-playbook-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c34fcf5c3f969202947859756919f8d5", "sha256": "2755d08aa5a64a58044d12178e8257c9e6051800fa1c84e39e3c525719ed004b"}, "downloads": -1, "filename": "pytest-ansible-playbook-0.4.1.tar.gz", "has_sig": false, "md5_digest": "c34fcf5c3f969202947859756919f8d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10925, "upload_time": "2019-03-08T12:55:07", "upload_time_iso_8601": "2019-03-08T12:55:07.341782Z", "url": "https://files.pythonhosted.org/packages/ce/86/5e19827625ed0061d5616b03322d24d5a2e9fe298341a1b35b59cd5f4715/pytest-ansible-playbook-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:26 2020"}