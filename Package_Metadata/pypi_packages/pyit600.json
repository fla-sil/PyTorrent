{"info": {"author": "Julius Vitkauskas", "author_email": "zadintuvas@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: AsyncIO", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator"], "description": "# Python: Asynchronous client for Salus iT600 devices\n\n## About\n\nThis package allows you to control and monitor your Salus iT600 smart home devices locally through Salus UG600 universal gateway. Currently only heating thermostats supported. You have any other devices and would like to contribute - you are welcome to create an issue or submit a pull request.\n\n## Installation\n\n```bash\npip install pyit600\n```\n\n## Usage\n - Instantiate the IT600Gateway device with local ip address and EUID of your gateway. You can find EUID written down on the bottom of your gateway (eg. 001E5E0D32906128).\n - Status can be polled using the `poll_status()` command.\n - Callbacks to be notified of state updates can be added with the `add_climate_update_callback(method)` method.\n\n### Basic example\n\n```python\nasync with IT600Gateway(host=args.host, euid=args.euid) as gateway:\n\tawait gateway.connect()\n\n\tprint(\"All climate devices:\")\n\tprint(repr(gateway.get_climate_devices()))\n\n\tclimate_devices = gateway.get_climate_devices()\n\n\tfor climate_device_id in climate_devices:\n\t\tprint(f\"Climate device {climate_device_id} status:\")\n\t\tprint(repr(climate_devices.get(climate_device_id)))\n\n\t\tprint(f\"Setting heating device {climate_device_id} temperature to 21 degrees celsius\")\n\t\tawait gateway.set_climate_device_temperature(climate_device_id, 21)\n```\n\n### Useful gateway methods\n\n - poll_status()\n - get_climate_devices()\n - get_climate_device(device_id)\n - set_climate_device_preset(device_id, preset)\n - set_climate_device_mode(device_id, mode)\n - set_climate_device_temperature(device_id, setpoint_celsius)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jvitkauskas/pyit600", "keywords": "salus,it600,api,async,client", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "pyit600", "package_url": "https://pypi.org/project/pyit600/", "platform": "", "project_url": "https://pypi.org/project/pyit600/", "project_urls": {"Homepage": "https://github.com/jvitkauskas/pyit600"}, "release_url": "https://pypi.org/project/pyit600/0.0.1/", "requires_dist": ["aiohttp (<4.0,>=3.6.1)", "cryptography (<3.0,>=2.8)"], "requires_python": ">=3.7", "summary": "Asynchronous Python client for Salus IT600 devices", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python: Asynchronous client for Salus iT600 devices</h1>\n<h2>About</h2>\n<p>This package allows you to control and monitor your Salus iT600 smart home devices locally through Salus UG600 universal gateway. Currently only heating thermostats supported. You have any other devices and would like to contribute - you are welcome to create an issue or submit a pull request.</p>\n<h2>Installation</h2>\n<pre>pip install pyit600\n</pre>\n<h2>Usage</h2>\n<ul>\n<li>Instantiate the IT600Gateway device with local ip address and EUID of your gateway. You can find EUID written down on the bottom of your gateway (eg. 001E5E0D32906128).</li>\n<li>Status can be polled using the <code>poll_status()</code> command.</li>\n<li>Callbacks to be notified of state updates can be added with the <code>add_climate_update_callback(method)</code> method.</li>\n</ul>\n<h3>Basic example</h3>\n<pre><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">IT600Gateway</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">euid</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">euid</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">gateway</span><span class=\"p\">:</span>\n\t<span class=\"k\">await</span> <span class=\"n\">gateway</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"All climate devices:\"</span><span class=\"p\">)</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">gateway</span><span class=\"o\">.</span><span class=\"n\">get_climate_devices</span><span class=\"p\">()))</span>\n\n\t<span class=\"n\">climate_devices</span> <span class=\"o\">=</span> <span class=\"n\">gateway</span><span class=\"o\">.</span><span class=\"n\">get_climate_devices</span><span class=\"p\">()</span>\n\n\t<span class=\"k\">for</span> <span class=\"n\">climate_device_id</span> <span class=\"ow\">in</span> <span class=\"n\">climate_devices</span><span class=\"p\">:</span>\n\t\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Climate device </span><span class=\"si\">{</span><span class=\"n\">climate_device_id</span><span class=\"si\">}</span><span class=\"s2\"> status:\"</span><span class=\"p\">)</span>\n\t\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">climate_devices</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">climate_device_id</span><span class=\"p\">)))</span>\n\n\t\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Setting heating device </span><span class=\"si\">{</span><span class=\"n\">climate_device_id</span><span class=\"si\">}</span><span class=\"s2\"> temperature to 21 degrees celsius\"</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">await</span> <span class=\"n\">gateway</span><span class=\"o\">.</span><span class=\"n\">set_climate_device_temperature</span><span class=\"p\">(</span><span class=\"n\">climate_device_id</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)</span>\n</pre>\n<h3>Useful gateway methods</h3>\n<ul>\n<li>poll_status()</li>\n<li>get_climate_devices()</li>\n<li>get_climate_device(device_id)</li>\n<li>set_climate_device_preset(device_id, preset)</li>\n<li>set_climate_device_mode(device_id, mode)</li>\n<li>set_climate_device_temperature(device_id, setpoint_celsius)</li>\n</ul>\n\n          </div>"}, "last_serial": 6663726, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a8b2b06b8cf3bb63691218495851a98a", "sha256": "23d771615d1d25607fa719caf2dc1f8fb778ce3f5aab09bb35e054d628bf51aa"}, "downloads": -1, "filename": "pyit600-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a8b2b06b8cf3bb63691218495851a98a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8085, "upload_time": "2020-02-19T21:08:23", "upload_time_iso_8601": "2020-02-19T21:08:23.101648Z", "url": "https://files.pythonhosted.org/packages/9c/99/fc5596872f5c78db45ea194843de34f10b451669d4daf49d4979dca4690d/pyit600-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1addc732b475cdc5e9f8ced2343f402", "sha256": "0d7799f293f9a7fbe0df2ee627735b5add62222ca60ae574368ee6427ba35365"}, "downloads": -1, "filename": "pyit600-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a1addc732b475cdc5e9f8ced2343f402", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6062, "upload_time": "2020-02-19T21:08:24", "upload_time_iso_8601": "2020-02-19T21:08:24.047030Z", "url": "https://files.pythonhosted.org/packages/95/a9/d62efd979c1db8508e1dd37140826f7548e572756e21e7be4d9d9bb63f77/pyit600-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a8b2b06b8cf3bb63691218495851a98a", "sha256": "23d771615d1d25607fa719caf2dc1f8fb778ce3f5aab09bb35e054d628bf51aa"}, "downloads": -1, "filename": "pyit600-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a8b2b06b8cf3bb63691218495851a98a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8085, "upload_time": "2020-02-19T21:08:23", "upload_time_iso_8601": "2020-02-19T21:08:23.101648Z", "url": "https://files.pythonhosted.org/packages/9c/99/fc5596872f5c78db45ea194843de34f10b451669d4daf49d4979dca4690d/pyit600-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1addc732b475cdc5e9f8ced2343f402", "sha256": "0d7799f293f9a7fbe0df2ee627735b5add62222ca60ae574368ee6427ba35365"}, "downloads": -1, "filename": "pyit600-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a1addc732b475cdc5e9f8ced2343f402", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6062, "upload_time": "2020-02-19T21:08:24", "upload_time_iso_8601": "2020-02-19T21:08:24.047030Z", "url": "https://files.pythonhosted.org/packages/95/a9/d62efd979c1db8508e1dd37140826f7548e572756e21e7be4d9d9bb63f77/pyit600-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:52 2020"}