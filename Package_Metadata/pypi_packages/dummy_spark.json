{"info": {"author": "Will McGinnis", "author_email": "will@pedalwrencher.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3"], "description": "DummyRDD\n========\n\n[![Coverage Status](https://coveralls.io/repos/github/wdm0006/DummyRDD/badge.svg?branch=master)](https://coveralls.io/github/wdm0006/DummyRDD?branch=master)\n[![Build Status](https://travis-ci.org/wdm0006/DummyRDD.svg?branch=master)](https://travis-ci.org/wdm0006/DummyRDD)\n\nContributors\n------------\n\n * [Henrique Souza](https://github.com/htssouza)\n * [Will McGinnis](https://gitbhub.com/wdm0006)\n \nOverview\n--------\n\nA test class that walks like and RDD, talks like an RDD but is just a list.\n\nContains 3 primary classes:\n\n * SparkConf\n * SparkContext\n * RDD\n \nAll of which implement the exact same API as the real spark methods, but use a simple\npython list as the actual datastore.  Many functions such as the Hadoop API, partitioning, complex\noperations, and other things are not implemented.  See below for detailed list of implemented functions and\ntheir caveats. \n\nNote that for now this is experimental, and may later be useful for testing or development, but anything\ndeveloped using this should always be checked on real spark to make sure that things actually work there. Because\nnone of the code is actually distributed in this environment, some things will behave differently.\n\nIt is intended that this library can be used as a drop in replacement for a real spark context, without erroring out\nbut maybe not actually doing anything (in the case of irrelevant configuration options, for example).\n\nCurrently there is no support for the dataframe api, or for that matter most features of anything, very much\nstill a work in progress.\n\nExample\n-------\n\nA quick example:\n\n    from dummy_spark import SparkContext, SparkConf\n    \n    sconf = SparkConf()\n    sc = SparkContext(master='', conf=sconf)\n    rdd = sc.parallelize([1, 2, 3, 4, 5])\n    \n    print(rdd.count())\n    print(rdd.map(lambda x: x**2).collect())\n   \nyields:\n    \n    5\n    [1, 4, 9, 16, 25]\n\n\nMethods Implemented\n===================\n\nSparkConf\n---------\n\nSparkConf has everything implemented, but nothing is actually ever set.  There are no real configuration settings for \nthe dummy version, so the object simply contains a dictionary of configuration parameters. Implemented functions are therefore:\n\n * \\_\\_init\\_\\_()\n * contains()\n * get()\n * getAll()\n * set()\n * setAll()\n * setAppName()\n * setExecutorEnv()\n * setIfMissing()\n * setMaster()\n * setSparkHome()\n * toDebugString()\n\nSparkContext\n------------\n\nImplemented functions are:\n\n * \\_\\_init\\_\\_()\n * \\_\\_enter\\_\\_()\n * \\_\\_exit\\_\\_()\n * defaultMinPartitions()\n * defaultParallelism()\n * emptyRDD()\n * parallelize()\n * NewAPIHadoopRDD() (only for elasticsearch via elasticsearch-py)\n * range()\n * startTime()\n * stop()\n * textFile() (including from s3 via tinys3)\n * version()\n\nRDD\n---\n\nImplemented functions are:\n\n * \\_\\_init\\_\\_()\n * \\_\\_add\\_\\_()\n * \\_\\_repr\\_\\_()\n * cache()\n * cartesian()\n * checkpoint()\n * cogroup()\n * collect()\n * context()\n * count()\n * countApprox()\n * countApproxDistinct()\n * distinct()\n * filter()\n * first()\n * flatMap()\n * flatMapValues()\n * foreach()\n * foreachPartition()\n * getNumPartitions()\n * glom()\n * groupBy()\n * groupByKey()\n * id()\n * intersection()\n * isEmpty()\n * lookup()\n * map()\n * mapPartitions()\n * mapValues()\n * max()\n * mean()\n * meanApprox()\n * min()\n * name()\n * persist()\n * reduceByKey()\n * repartitionAndSortWithinPartitions()\n * sample()\n * setName()\n * sortBy()\n * sortByKey()\n * sum()\n * take()\n * takeSample()\n * toLocalIterator()\n * union()\n * zip()\n * zipWithIndex()", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/wdm0006/dummyrdd/tarball/0.0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wdm0006/dummyrdd", "keywords": "pyspark spark testing", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "dummy_spark", "package_url": "https://pypi.org/project/dummy_spark/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dummy_spark/", "project_urls": {"Download": "https://github.com/wdm0006/dummyrdd/tarball/0.0.1", "Homepage": "https://github.com/wdm0006/dummyrdd"}, "release_url": "https://pypi.org/project/dummy_spark/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "A pure python mocked version of pyspark's rdd class", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"dummyrdd\">\n<h2>DummyRDD</h2>\n<p>[![Coverage Status](<a href=\"https://coveralls.io/repos/github/wdm0006/DummyRDD/badge.svg?branch=master)%5D(https://coveralls.io/github/wdm0006/DummyRDD\" rel=\"nofollow\">https://coveralls.io/repos/github/wdm0006/DummyRDD/badge.svg?branch=master)](https://coveralls.io/github/wdm0006/DummyRDD</a>?branch=master)\n[![Build Status](<a href=\"https://travis-ci.org/wdm0006/DummyRDD.svg?branch=master)%5D(https://travis-ci.org/wdm0006/DummyRDD\" rel=\"nofollow\">https://travis-ci.org/wdm0006/DummyRDD.svg?branch=master)](https://travis-ci.org/wdm0006/DummyRDD</a>)</p>\n<div id=\"contributors\">\n<h3>Contributors</h3>\n<blockquote>\n<ul>\n<li>[Henrique Souza](<a href=\"https://github.com/htssouza\" rel=\"nofollow\">https://github.com/htssouza</a>)</li>\n<li>[Will McGinnis](<a href=\"https://gitbhub.com/wdm0006\" rel=\"nofollow\">https://gitbhub.com/wdm0006</a>)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"overview\">\n<h3>Overview</h3>\n<p>A test class that walks like and RDD, talks like an RDD but is just a list.</p>\n<p>Contains 3 primary classes:</p>\n<blockquote>\n<ul>\n<li>SparkConf</li>\n<li>SparkContext</li>\n<li>RDD</li>\n</ul>\n</blockquote>\n<p>All of which implement the exact same API as the real spark methods, but use a simple\npython list as the actual datastore.  Many functions such as the Hadoop API, partitioning, complex\noperations, and other things are not implemented.  See below for detailed list of implemented functions and\ntheir caveats.</p>\n<p>Note that for now this is experimental, and may later be useful for testing or development, but anything\ndeveloped using this should always be checked on real spark to make sure that things actually work there. Because\nnone of the code is actually distributed in this environment, some things will behave differently.</p>\n<p>It is intended that this library can be used as a drop in replacement for a real spark context, without erroring out\nbut maybe not actually doing anything (in the case of irrelevant configuration options, for example).</p>\n<p>Currently there is no support for the dataframe api, or for that matter most features of anything, very much\nstill a work in progress.</p>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>A quick example:</p>\n<blockquote>\n<p>from dummy_spark import SparkContext, SparkConf</p>\n<p>sconf = SparkConf()\nsc = SparkContext(master=\u2019\u2019, conf=sconf)\nrdd = sc.parallelize([1, 2, 3, 4, 5])</p>\n<p>print(rdd.count())\nprint(rdd.map(lambda x: x**2).collect())</p>\n</blockquote>\n<p>yields:</p>\n<blockquote>\n5\n[1, 4, 9, 16, 25]</blockquote>\n</div>\n</div>\n<div id=\"methods-implemented\">\n<h2>Methods Implemented</h2>\n<div id=\"sparkconf\">\n<h3>SparkConf</h3>\n<p>SparkConf has everything implemented, but nothing is actually ever set.  There are no real configuration settings for\nthe dummy version, so the object simply contains a dictionary of configuration parameters. Implemented functions are therefore:</p>\n<blockquote>\n<ul>\n<li>__init__()</li>\n<li>contains()</li>\n<li>get()</li>\n<li>getAll()</li>\n<li>set()</li>\n<li>setAll()</li>\n<li>setAppName()</li>\n<li>setExecutorEnv()</li>\n<li>setIfMissing()</li>\n<li>setMaster()</li>\n<li>setSparkHome()</li>\n<li>toDebugString()</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"sparkcontext\">\n<h3>SparkContext</h3>\n<p>Implemented functions are:</p>\n<blockquote>\n<ul>\n<li>__init__()</li>\n<li>__enter__()</li>\n<li>__exit__()</li>\n<li>defaultMinPartitions()</li>\n<li>defaultParallelism()</li>\n<li>emptyRDD()</li>\n<li>parallelize()</li>\n<li>NewAPIHadoopRDD() (only for elasticsearch via elasticsearch-py)</li>\n<li>range()</li>\n<li>startTime()</li>\n<li>stop()</li>\n<li>textFile() (including from s3 via tinys3)</li>\n<li>version()</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"rdd\">\n<h3>RDD</h3>\n<p>Implemented functions are:</p>\n<blockquote>\n<ul>\n<li>__init__()</li>\n<li>__add__()</li>\n<li>__repr__()</li>\n<li>cache()</li>\n<li>cartesian()</li>\n<li>checkpoint()</li>\n<li>cogroup()</li>\n<li>collect()</li>\n<li>context()</li>\n<li>count()</li>\n<li>countApprox()</li>\n<li>countApproxDistinct()</li>\n<li>distinct()</li>\n<li>filter()</li>\n<li>first()</li>\n<li>flatMap()</li>\n<li>flatMapValues()</li>\n<li>foreach()</li>\n<li>foreachPartition()</li>\n<li>getNumPartitions()</li>\n<li>glom()</li>\n<li>groupBy()</li>\n<li>groupByKey()</li>\n<li>id()</li>\n<li>intersection()</li>\n<li>isEmpty()</li>\n<li>lookup()</li>\n<li>map()</li>\n<li>mapPartitions()</li>\n<li>mapValues()</li>\n<li>max()</li>\n<li>mean()</li>\n<li>meanApprox()</li>\n<li>min()</li>\n<li>name()</li>\n<li>persist()</li>\n<li>reduceByKey()</li>\n<li>repartitionAndSortWithinPartitions()</li>\n<li>sample()</li>\n<li>setName()</li>\n<li>sortBy()</li>\n<li>sortByKey()</li>\n<li>sum()</li>\n<li>take()</li>\n<li>takeSample()</li>\n<li>toLocalIterator()</li>\n<li>union()</li>\n<li>zip()</li>\n<li>zipWithIndex()</li>\n</ul>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2235796, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5efeb5f50466963ca0cb20dfd76d7394", "sha256": "3c519d11f76b3b7bac5ed67ba83019ebbef367c2f4da9d3368fc5bdf3b11ad60"}, "downloads": -1, "filename": "dummy_spark-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5efeb5f50466963ca0cb20dfd76d7394", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10026, "upload_time": "2016-07-21T14:07:28", "upload_time_iso_8601": "2016-07-21T14:07:28.019584Z", "url": "https://files.pythonhosted.org/packages/eb/8b/15956303c17b8d1c49d45435cb617b4a08d5befc097a0ff1cdedfd4c9b97/dummy_spark-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5efeb5f50466963ca0cb20dfd76d7394", "sha256": "3c519d11f76b3b7bac5ed67ba83019ebbef367c2f4da9d3368fc5bdf3b11ad60"}, "downloads": -1, "filename": "dummy_spark-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5efeb5f50466963ca0cb20dfd76d7394", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10026, "upload_time": "2016-07-21T14:07:28", "upload_time_iso_8601": "2016-07-21T14:07:28.019584Z", "url": "https://files.pythonhosted.org/packages/eb/8b/15956303c17b8d1c49d45435cb617b4a08d5befc097a0ff1cdedfd4c9b97/dummy_spark-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:03 2020"}