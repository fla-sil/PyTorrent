{"info": {"author": "Emil", "author_email": "emil@tehamalab.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Scientific/Engineering :: GIS", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "This is a `Python <http://python.org>`_ based utility for geocoding csv files\nusing various online geocoding service.\n\n*************\nInstallation\n*************\n\nInstallation using `pip <https://pip.pypa.io>`_\n================================================\n\n::\n\n    pip install giokoda\n\nInstallation from source\n========================\nDownload the source code from github, Example \n\n::\n\n    git clone https://github.com/WorldBank-Transport/giokoda.git\n\nInstall the module and its dependancies\n\n::\n\n    cd giokoda\n    python setup.py install\n\n\n******\nUsage\n******\n\nThis utility can be used as a Python module or as an executable script.\n\nUsing as python module\n=======================\n\nBasic example::\n\n    import giokoda\n    giokoda.geocode_csv('input.csv')\n\nThe above code will try to goecode the provided `'input.csv'` file and write\nits output to `'input.csv-geocoded.csv'`\n\nA `geocode_csv` function can geocode entities from a provided input csv file\nand write results to a csv file.\n\nIt also returns a dictionary containing error, success and total count of\ngeocoded rows.\n\nGeneral syntax::\n\n    geocode_csv('input/file.csv', **kwargs)\n\nRequired parameter\n------------------\n\n    `infile`, *(filepath/str)*\n        path to a csv file to geocode.\n\nOptional keyword arguments (`**kwargs`)\n---------------------------------------\n    `outfile`, (filepath/str)\n        path to file to write output csv\n    \n    `service`, *(str)*, default: `'nominatim'`.\n        Name of a geocoding service to use. This can be a name of any geocoding\n        service that is supported by\n        `geopy <http://geopy.readthedocs.org/en/latest/>`_.\n\n    `query_column`, *(str)*, default: `'name'`\n        Name of a column containg text to geocode.\n\n    `query_columns` *(list)*: default: `[]`. A list of a columns\n    to be combined in order to produce a text to geocode.\n\n    `service_kwargs`, *(dict)*\n        Optional keyword arguments for initialization of geocoding service.\n\n    `delimiter` *(str)*: default: `','`, A one-character string used to\n    separate fields.\n\n    `quotechar` *(str)*: default: `'\"'`, A one-character string used to\n    quote fields containing special characters in a csv file, such as\n    the delimiter or quotechar, or which contain new-line characters.\n\nReturn\n------\n\n`geocode_csv()` returns a dictionary of success, error and total count::\n  \n    {\n        'total': 0,\n        'success': 0,\n        'error': 0\n    }\n\nUsing an executable script\n==========================\n\n* Run `geocode_csv` via command line interface.\n\nExample::\n\n    geocode_csv /input/file.csv\n\nor including a api key::\n\n    geocode_csv --service <SERVICE-NAME> --params '{\"api_key\": \"<YOUR-API-KEY>\"}' /input/file.csv\n\nGeneral usage::\n\n    geocode_csv [-h] [-o OUTPUT] [-s SERVICE] [-c COLUMN] [-p PARAMS] input\n\nRequired argument\n------------------\n    `input`\n        Full path to csv file to geocode\n\n`Optional arguments`\n---------------------\n\n    `-h, --help`\n        show this help message and exit\n\n    `-o OUTPUT, --output OUTPUT`\n        Full path to output file\n\n    `-s SERVICE, --service SERVICE`\n        Geocoding service name, example arcgis, baidu, google, googlev3, geocoderdotus,\n        geonames, yahoo, placefinder, opencage, openmapquest, mapquest, liveaddress,\n        navidata, nominatim, geocodefarm, what3words, yandex and ignfrance\n\n    `-c [COLUMN [COLUMN ...]], --column [COLUMN [COLUMN ...]]`\n        Name(s) for column(s) containing text content to geocode.\n        Multiple column names should be separated by white space.\n\n    `-p PARAMS, --params PARAMS`\n        Keyword arguments for geocoding service initialization presented as\n        json object\n\n    `-d DELIMITER, --delimiter DELIMITER`\n        A one-character string used to separate fields in a csv file\n\n    `-q QUOTECHAR, --quotechar QUOTECHAR`\n        A one-character string used to\n        quote fields containing special characters in a csv file, such as\n        the delimiter or quotechar, or which contain new-line characters.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.python.org/pypi/giokoda", "keywords": null, "license": "Apache License, Version 2.0", "maintainer": null, "maintainer_email": null, "name": "giokoda", "package_url": "https://pypi.org/project/giokoda/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/giokoda/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://pypi.python.org/pypi/giokoda"}, "release_url": "https://pypi.org/project/giokoda/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "A utility for geocoding csv files.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a <a href=\"http://python.org\" rel=\"nofollow\">Python</a> based utility for geocoding csv files\nusing various online geocoding service.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"installation-using-pip\">\n<h3>Installation using <a href=\"https://pip.pypa.io\" rel=\"nofollow\">pip</a></h3>\n<pre>pip install giokoda\n</pre>\n</div>\n<div id=\"installation-from-source\">\n<h3>Installation from source</h3>\n<p>Download the source code from github, Example</p>\n<pre>git clone https://github.com/WorldBank-Transport/giokoda.git\n</pre>\n<p>Install the module and its dependancies</p>\n<pre>cd giokoda\npython setup.py install\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>This utility can be used as a Python module or as an executable script.</p>\n<div id=\"using-as-python-module\">\n<h3>Using as python module</h3>\n<p>Basic example:</p>\n<pre>import giokoda\ngiokoda.geocode_csv('input.csv')\n</pre>\n<p>The above code will try to goecode the provided <cite>\u2018input.csv\u2019</cite> file and write\nits output to <cite>\u2018input.csv-geocoded.csv\u2019</cite></p>\n<p>A <cite>geocode_csv</cite> function can geocode entities from a provided input csv file\nand write results to a csv file.</p>\n<p>It also returns a dictionary containing error, success and total count of\ngeocoded rows.</p>\n<p>General syntax:</p>\n<pre>geocode_csv('input/file.csv', **kwargs)\n</pre>\n<div id=\"required-parameter\">\n<h4>Required parameter</h4>\n<blockquote>\n<dl>\n<dt><cite>infile</cite>, <em>(filepath/str)</em></dt>\n<dd>path to a csv file to geocode.</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"optional-keyword-arguments-kwargs\">\n<h4>Optional keyword arguments (<cite>**kwargs</cite>)</h4>\n<blockquote>\n<dl>\n<dt><cite>outfile</cite>, (filepath/str)</dt>\n<dd>path to file to write output csv</dd>\n<dt><cite>service</cite>, <em>(str)</em>, default: <cite>\u2018nominatim\u2019</cite>.</dt>\n<dd>Name of a geocoding service to use. This can be a name of any geocoding\nservice that is supported by\n<a href=\"http://geopy.readthedocs.org/en/latest/\" rel=\"nofollow\">geopy</a>.</dd>\n<dt><cite>query_column</cite>, <em>(str)</em>, default: <cite>\u2018name\u2019</cite></dt>\n<dd>Name of a column containg text to geocode.</dd>\n</dl>\n<p><cite>query_columns</cite> <em>(list)</em>: default: <cite>[]</cite>. A list of a columns\nto be combined in order to produce a text to geocode.</p>\n<dl>\n<dt><cite>service_kwargs</cite>, <em>(dict)</em></dt>\n<dd>Optional keyword arguments for initialization of geocoding service.</dd>\n</dl>\n<p><cite>delimiter</cite> <em>(str)</em>: default: <cite>\u2018,\u2019</cite>, A one-character string used to\nseparate fields.</p>\n<p><cite>quotechar</cite> <em>(str)</em>: default: <cite>\u2018\u201d\u2019</cite>, A one-character string used to\nquote fields containing special characters in a csv file, such as\nthe delimiter or quotechar, or which contain new-line characters.</p>\n</blockquote>\n</div>\n<div id=\"return\">\n<h4>Return</h4>\n<p><cite>geocode_csv()</cite> returns a dictionary of success, error and total count:</p>\n<pre>{\n    'total': 0,\n    'success': 0,\n    'error': 0\n}\n</pre>\n</div>\n</div>\n<div id=\"using-an-executable-script\">\n<h3>Using an executable script</h3>\n<ul>\n<li>Run <cite>geocode_csv</cite> via command line interface.</li>\n</ul>\n<p>Example:</p>\n<pre>geocode_csv /input/file.csv\n</pre>\n<p>or including a api key:</p>\n<pre>geocode_csv --service &lt;SERVICE-NAME&gt; --params '{\"api_key\": \"&lt;YOUR-API-KEY&gt;\"}' /input/file.csv\n</pre>\n<p>General usage:</p>\n<pre>geocode_csv [-h] [-o OUTPUT] [-s SERVICE] [-c COLUMN] [-p PARAMS] input\n</pre>\n<div id=\"required-argument\">\n<h4>Required argument</h4>\n<blockquote>\n<dl>\n<dt><cite>input</cite></dt>\n<dd>Full path to csv file to geocode</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"optional-arguments\">\n<h4><cite>Optional arguments</cite></h4>\n<blockquote>\n<dl>\n<dt><cite>-h, \u2013help</cite></dt>\n<dd>show this help message and exit</dd>\n<dt><cite>-o OUTPUT, \u2013output OUTPUT</cite></dt>\n<dd>Full path to output file</dd>\n<dt><cite>-s SERVICE, \u2013service SERVICE</cite></dt>\n<dd>Geocoding service name, example arcgis, baidu, google, googlev3, geocoderdotus,\ngeonames, yahoo, placefinder, opencage, openmapquest, mapquest, liveaddress,\nnavidata, nominatim, geocodefarm, what3words, yandex and ignfrance</dd>\n<dt><cite>-c [COLUMN [COLUMN \u2026]], \u2013column [COLUMN [COLUMN \u2026]]</cite></dt>\n<dd>Name(s) for column(s) containing text content to geocode.\nMultiple column names should be separated by white space.</dd>\n<dt><cite>-p PARAMS, \u2013params PARAMS</cite></dt>\n<dd>Keyword arguments for geocoding service initialization presented as\njson object</dd>\n<dt><cite>-d DELIMITER, \u2013delimiter DELIMITER</cite></dt>\n<dd>A one-character string used to separate fields in a csv file</dd>\n<dt><cite>-q QUOTECHAR, \u2013quotechar QUOTECHAR</cite></dt>\n<dd>A one-character string used to\nquote fields containing special characters in a csv file, such as\nthe delimiter or quotechar, or which contain new-line characters.</dd>\n</dl>\n</blockquote>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1417518, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bfbe915c1562c7f44d58ec3014439e37", "sha256": "fe1a1f20bc7f328e5c6d5c0f78bf106dafa1cca897c1c2fee9c72335ba0e9911"}, "downloads": -1, "filename": "giokoda-0.1.0a.tar.gz", "has_sig": false, "md5_digest": "bfbe915c1562c7f44d58ec3014439e37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5596, "upload_time": "2015-02-10T05:23:56", "upload_time_iso_8601": "2015-02-10T05:23:56.806172Z", "url": "https://files.pythonhosted.org/packages/83/3b/542ead8385dfdef764a19d0cd80092f717afaca85b86e0e757fa2f3401ea/giokoda-0.1.0a.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "393f34665226bf5c654c88ee66fb0820", "sha256": "9ad7d3d40be88c0b5fa77278d4b5809116745baddc34827f2d58e81cdcf9271e"}, "downloads": -1, "filename": "giokoda-0.1.1.tar.gz", "has_sig": false, "md5_digest": "393f34665226bf5c654c88ee66fb0820", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5591, "upload_time": "2015-02-10T05:40:43", "upload_time_iso_8601": "2015-02-10T05:40:43.975373Z", "url": "https://files.pythonhosted.org/packages/39/e2/3b8d8647a192c25fbf46e7589e1811dde57daaeb1d1ce16504e870034623/giokoda-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3cd40378e656438d0639b64fdc551973", "sha256": "6c4721bb1967983bfde85c1f90d2516fe5d376722b532d2c34382019489eed55"}, "downloads": -1, "filename": "giokoda-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3cd40378e656438d0639b64fdc551973", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5635, "upload_time": "2015-02-10T10:47:24", "upload_time_iso_8601": "2015-02-10T10:47:24.983092Z", "url": "https://files.pythonhosted.org/packages/ba/9d/578d7f0153a216c4e4846fb4f5803a03b67626e8e97825128dd9fcf91b0a/giokoda-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3cd40378e656438d0639b64fdc551973", "sha256": "6c4721bb1967983bfde85c1f90d2516fe5d376722b532d2c34382019489eed55"}, "downloads": -1, "filename": "giokoda-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3cd40378e656438d0639b64fdc551973", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5635, "upload_time": "2015-02-10T10:47:24", "upload_time_iso_8601": "2015-02-10T10:47:24.983092Z", "url": "https://files.pythonhosted.org/packages/ba/9d/578d7f0153a216c4e4846fb4f5803a03b67626e8e97825128dd9fcf91b0a/giokoda-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:23 2020"}