{"info": {"author": "John Omotani", "author_email": "john.omotani@cantab.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "`OptionsFactory`\n================\n\nhttps://github.com/johnomotani/optionsfactory\n\n`OptionsFactory` allows you to define a set of options, which can have (if you like):\ndefault values (which may be expressions depending on other options); documentation for\neach option; an allowed type or list of types; a check that the value option is on an\nallowed list; checks that the value of an option satisfies some tests.\n\nOnce the options are defined in an `OptionsFactory`, you create a particular instance of\nthe options by passing some user settings (a dict or YAML file). The `OptionsFactory`\nuses the values passed, sets the remaining options from the default values or\nexpressions and returns an `Options` object. Options are immutable so that you do not\nhave to worry about the options being accidentally changed during execution - however,\nsee [`MutableOptionsFactory`](#mutableoptionsfactory) if you want to be able to update the\noptions dynamically.\n\nFor example, some simple options might be implemented like this:\n```python\nfrom optionsfactory import OptionsFactory\n\n\nclass A:\n\n    # The keyword arguments define the options and give the default values\n    options_factory = OptionsFactory(a=1, b=2)\n\n    def __init__(self, user_options = None):\n        self.options = self.options_factory.create(user_options)\n\n        # options can be accessed like a dict\n        myvalue = 2 * options[\"a\"]\n\n        #... or as attributes\n        mynewvalue = 3 + options.a\n```\n\nIt might also be useful for some classes to allow the options to be set from keyword\narguments, for example\n```python\nfrom optionsfactory import OptionsFactory\n\n\nclass B:\n\n    # The keyword arguments define the options and give the default values\n    options_factory = OptionsFactory(a=1, b=2)\n\n    def __init__(self, **kwargs):\n        self.options = self.options_factory.create(kwargs)\n```\nThe `create()` method will not alter the argument passed to it.\n\nThe options will then combine explicitly set values and defaults:\n```python\n>>> b1 = B() # uses default values\n>>> b1.options.a\n1\n>>> b1.options.b\n2\n>>> b2 = B(b=4) # override one of the defaults\n>>> b2.options.a\n1\n>>> b2.options.b\n4\n```\n\nMore flexibility is available by using expressions to set the default values.\n```python\nfrom optionsfactory import OptionsFactory\n\n\nclass C:\n\n    # The keyword arguments define the options and give the default values\n    options_factory = OptionsFactory(a=lambda options: options.b + 5, b=2)\n\n    def __init__(self, **kwargs):\n        self.options = self.options_factory.create(kwargs)\n```\ncould be used like:\n```python\n>>> c1 = C() # only default values\n>>> c1.options.a\n7\n>>> c1.options.b\n2\n>>> c2 = C(a=1, b=3) # override both options, expression not used\n>>> c2.options.a\n1\n>>> c2.options.b\n>>> 3\n>>> c3 = C(b=4) # User-set value of b evaluated in default expression for a\n>>> c3.options.a\n9\n>>> c3.options.b\n4\n```\nCircular dependencies in expressions will be detected and raise a ValueError.\n\n\n`WithMeta`\n----------\n\n`WithMeta` objects are used to store the defaults within `OptionsFactory`, and can be\nused to define options with extra information, e.g.\n```python\nfrom optionsfactory import OptionsFactory, WithMeta\nfrom optionsfactory.checks import is_positive, is_None\n\n\nclass D:\n    options_factory = OptionsFactory(\n        a=WithMeta(1, doc=\"option a\"),\n        b=WithMeta(2, value_type=int),\n        c=WithMeta(3, allowed=[1, 2, 3]),\n        d=WithMeta(4, check_all=is_positive),\n        e=WithMeta(5, check_any=lambda x: x < 6),\n        f=WithMeta(6, doc=\"option f\", value_type=[int, float], allowed=[6, 7, 8, 9.5]),\n        g=WithMeta(\n            7,\n            doc=\"option g\",\n            value_type=[int, None],\n            check_all=[is_positive, lambda x: x < 10],\n            check_any=[lambda x: x < 2, lambda x: x > 6],\n        ),\n    )\n\n    def __init__(self, **kwargs):\n        self.options = self.options_factory.create(kwargs)\n```\nThe first argument to `WithMeta` gives the default value for the option, and the\nremaining keyword arguments are all optional. Using `WithMeta` the values behave just as\nthe simple default values described above:\n```python\n>>> d = D(b=12)\n>>> d.options.a\n1\n>>> d.options[\"b\"]\n12\n```\n\n### documentation\n\nDocumentation defined in the factory initialisation can be accessed from either the\n`OptionsFactory` or the `Options` instance via a `doc` property, that gives a `dict`\nwith the documentation for each option:\n```python\n>>> D.options_factory.doc[\"a\"]  # Get doc from the factory\n'option a'\n>>> D.options_factory.doc[\"b\"]  # No doc was defined for this option\n>>> d = D()\n>>> d.options.doc[\"f\"]  # Get doc from the Options instance\n'option f'\n```\n\n\n### `value_type`\n\nThe value_type argument can be used to give a type or sequence of types that the option\nis allowed to have. Trying to set an option with a non-allowed type raises a\n`ValueError`:\n```python\n>>> d2 = D(d=-2)\nValueError: The value -2 of key=d is not compatible with check_all\n>>> d3 = D(f=8)\n>>> d3.options.f\n8\n>>> d4 = D(f=9.5)\n>>> d4.options.f\n9.5\n>>> d5 = D(f=\"a string\")\nTypeError: a string is not of type (<class 'int'>, <class 'float'>) for key=f\n```\n\n\n### checking values\n\nThere are two ways of checking the values that are set for options.\n\n#### `allowed`\n\nThe `allowed` keyword sets a list of allowed options. A `ValueError` is raised if the\nvalue being set is not in the list. `allowed` cannot be set if either of `check_all` or\n`check_any` is. Example:\n```python\n>>> d6 = D(c=2)\nValueError: 2 is not in the allowed values (1, 2, 3) for key=c\n>>> d7 = D(c=4)\nValueError: 4 is not in the allowed values (1, 2, 3) for key=c\n```\n\n#### `check_all` and `check_any`\n\nThese arguments can be passed a list of expressions. The expressions passed to\n`check_all` must all evaluate to `True`, or an `ValueError` is raised. At least one of\nthe expressions passed to `check_any` is raised. The choice of `check_any` or\n`check_all` is a matter of convenience and clarity - the effect of either could be\nachieved with a single, sufficiently complicated, expression. They can both be set at\nthe same time, although this probably not often useful. Neither can be set if the\n`allowed` keyword is. Example:\n```python\n>>> d8 = D(d=14)\n>>> d8.options.d\n14\n>>> d9 = D(d=-1)\nValueError: The value -1 of key=d is not compatible with check_all\n>>> d10 = D(e=5)\n>>> d10.options.e\n5\n>>> d11 = D(e=6)\nValueError: The value 6 of key=e is not compatible with check_any\n>>> d12 = D(g=1)\n>>> d12.options.g\n1\n>>> d13 = D(g=-1)\nValueError: The value -1 of key=g is not compatible with check_all\n>>> d14 = D(g=5)\nValueError: The value 5 of key=g is not compatible with check_any\n>>> d15 = D(g=9)\n>>> d15.options.g\n9\n>>> d16 = D(g=10)\nValueError: The value 10 of key=g is not compatible with check_all\n```\n\nDefault expressions\n-------------------\n\nMuch more flexibility is offered for default values by using expressions. These are\nsingle-argument functions (lambda expressions are often useful), which return the\ndesired default value when passed an `Options` object, from which the values of other\noptions (which may or may not be expressions themselves) can be accessed. See the `class\nC` example above. When [nested options](#nested_options) are used, expressions can also\naccess values in subsections or parent sections of the options tree:\n```python\nfrom optionsfactory import OptionsFactory\n\n\nclass E:\n    options_factory = OptionsFactory(\n        a=1,\n        b=lambda options: options.a + options.subsection1.c + options.subsection2.e,\n        subsection1=OptionsFactory(\n            c=lambda options: options.parent.a + options.parent.subsection2.e,\n            subsubsection=OptionsFactory(d=2),\n        ),\n        subsection2=OptionsFactory(\n            e=lambda options: options.parent.subsection1.subsubsection.d,\n        ),\n    )\n\n    def __init__(self, **kwargs):\n        self.options = self.options_factory.create(kwargs)\n```\nIf we initialise `E` with just the defaults\n```python\n>>> e = E()\n>>> e.options.a\n1\n>>> e.options.b\n6\n>>> e.options.subsection1.c\n3\n>>> e.options.subsection1.subsubsection.d\n2\n>>> e.options.subsection2.e\n2\n```\n\n\nOptionsFactory extension for subclasses\n---------------------------------------\n\nSometimes it can be useful to create an extended version of an `OptionsFactory`. For\nexample a child class might have some extra options that are not needed in its parent\nclass, or might require different default values. The `OptionsFatory.add()` method\ncreates a new `OptionsFactory` from an existing one, with the keyword arguments adding\nto or overriding the options in the original factory. When overriding existing options,\npass a value or expression to keep existing documentation and checks, or a `WithMeta`\nobject to provide new documentation and checks. Example:\n```python\nfrom optionsfactory import OptionsFactory\n\n\nclass Parent:\n    options_factory = OptionsFactory(\n        a=WithMeta(1, doc=\"option a\"),\n        b=WithMeta(2, doc=\"option b\"),\n        c=WithMeta(3, doc=\"option c\"),\n    )\n\n    def __init__(self, **kwargs):\n        self.optiotns = self.options_factory(kwargs)\n\nclass Child(Parent):\n    options_factory = Parent.options_factory.add(\n        # Keep 'a' unchanged\n        b=4,  # Change the default value of 'b', but keep the documentation\n        c=WithMeta(5, doc=\"child option c\"),  # New default and attributes for 'c'\n        d=WithMeta(6, doc=\"new option d\"),  # New option not present in the parent\n    )\n```\nand if we create a `Child` instance\n```python\n>>> child = Child()\n>>> child.options.a\n1\n>>> child.options.doc[\"a\"]\n'option a'\n>>> child.options.b\n4\n>>> child.options.doc[\"b\"]\n'option b'\n>>> child.options.c\n5\n>>> child.options.doc[\"c\"]\n'child option c'\n>>> child.options.d\n6\n>>> child.options.doc[\"d\"]\n'new option d'\n```\n\n\nNested options\n--------------\n\nNested options are created by passing another `OptionsFactory` as a keyword argument in\nthe OptionsFactory constructor. See the [nested structure](#nested_structure) example\nbelow.\n\n\nCollecting defaults\n-------------------\n\nIt can be useful to collect options from several factories together into a higher-level\nfactory. For example if a `class Container` contains members of several classes, it\nmight be useful for the `options_factory` of `Container` to have options for all those\nmembers, but to define the options, defaults, documentation, etc. in the particular\nclasses. This can be done by passing `OptionsFactory` objects as positional arguments to\nthe `OptionsFactory` constructor - see the [flat structure](#flat_structure) example\nbelow.\n\nOther Features\n--------------\n\n### load from YAML\n\nThe user settings can be loaded from a YAML file (if `PyYAML` is available - install the\n`optionsfactory[yaml]` variant to ensure this):\n```python\n>>> with open(filename) as f:\n>>>     options = options_factory.create_from_yaml(f)\n```\n\n\n### save to YAML\n\nThe options can also be saved to a YAML file, either the non-default values only\n```python\n>>> with open(filename, 'w') as f:\n>>>     options.to_yaml(f)\n```\nor all values including defaults, by passing `True` to the `with_defaults` argument\n```python\n>>> with open(filename, 'w') as f:\n>>>     options.to_yaml(f, True)  # saves options with default values as well\n```\n\n\nExamples\n--------\n\nHere are a couple of more complicated examples of the patterns that `OptionsFactory` was\ndesigned for.\n\n\n### flat structure\n\n`class A` contains members of types `B` and `C`, so `A.options_factory` collects the\ndefault values, documentation, etc. from `B.options_factory` and `C.options_factory` by\ntaking them as positional arguments to the constructor. Then the `Options` object of `A`\nis used to create the `Options` objects for `B` and `C`, which will have only the\noptions relevant to themselves in, because `B.options_factory` and `C.options_factory`\nignore any undefined options in the argument passed to `create`.\n\n```python\nclass A:\n    options_factory = OptionsFactory(\n        B.options_factory,\n        C.options_factory,\n        a_opt1 = WithMeta(1, allowed=[1, 3, 7]),\n        a_opt2 = WithMeta(2, value_type=[int, float]),\n    )\n\n    def __init__(self, user_options):\n        self.options = self.options_factory(user_options)\n        self.b = B(self.options)\n        self.c = C(self.options)\n\nclass B:\n    options_factory = OptionsFactory(\n        b_opt = WithMeta(3.0, checks=is_positive),\n    )\n\n    def __init__(self, options):\n        self.options = self.options_factory.create(options)\n\nclass C:\n    options_factory = OptionsFactory(\n        c_opt = WithMeta(\"c-value\", value_type=str)\n    )\n\n    def __init__(self, options):\n        self.options = self.options_factory.create(options)\n```\n\nIf `B` or `C` were intended to also be used as user-facing classes, which want to get\ntheir options from `**kwargs`, it would also be possible to have\n```python\ndef __init__(self, **kwargs):\n    self.options = self.options_factory(kwargs)\n```\nand create the objects in `A`'s constructor like `self.b = B(**self.options)`.\n\n\n### nested structure\n\nSimilar to the flat structure above, but keeping the options for different member\nobjects separated in different sections:\n```python\nclass A:\n    options_factory = OptionsFactory(\n        B=B.options_factory,\n        C=C.options_factory,\n        a_opt1 = WithMeta(1, allowed=[1, 3, 7]),\n        a_opt2 = WithMeta(2, value_type=[int, float]),\n    )\n\n    def __init__(self, user_options):\n        self.options = self.options_factory(user_options)\n        self.b = B(self.options.B)\n        self.c = C(self.options.C)\n\nclass B:\n    options_factory = OptionsFactory(\n        b_opt = WithMeta(3.0, checks=is_positive),\n    )\n\n    def __init__(self, options):\n        self.options = options\n\nclass C:\n    options_factory = OptionsFactory(\n        c_opt = WithMeta(\"c-value\", value_type=str)\n    )\n\n    def __init__(self, options):\n        self.options = options\n```\n\nIf `A` needs to change the default options for one of the nested sections, can use the\n`add()` method like `B={\"b_opt\": 7.0)`.\n\nDefault expressions in a nested options structure can use values from sub-sections, or\nfrom parent sections, see [Default expressions](#default_expressions).\n\nIf `B` or `C` should be allowed to be created independently of a containing class like\n`A`, then you can instead define the constructor as\n```python\nclass B:\n    options_factory = OptionsFactory(\n        b_opt = WithMeta(3.0, checks=is_positive),\n    )\n\n    def __init__(self, options):\n        self.options = self.options_factory(options)\n```\nThis will have the same effect as the above code when called with `self.b =\nB(self.options.B)` but also allows creating a `B` like `another_b = B({\"b_opt\": 4.0})`.\n(This version will be slightly more expensive than the one above because the `Options`\nobject will be converted to a `dict`-like iterable and a new `Options` created by\nparsing that iterable.)\n\n\n### global options\n\nNot recommended, but you could create a global options object for your package/program.\nFor example in a file `mypackage.py`\n```python\nfrom optionsfactory import OptionsFactory\n\n\nglobal_options = None\n\n\noptions_factory = OptionsFactory(\n    opt1 = 1,\n    opt2 = 2,\n)\n\n\ndef setup(input_options):\n    global global_options\n    global_options = options_factory.create(input_options)\n```\n\nMutableOptionsFactory\n=====================\n\n`MutableOptionsFactory` is almost identical to `OptionsFactory`, but creates\n`MutableOptions` objects which can be modified after being created (it also has a\n`create_immutable()` method, equivalent to `OptionsFactory.create()` to create\n`Options` objects). `MutableOptions` behave like `Options` with the exception that\nvalues can be set, or reset to the default value (using `del`) after the object is\ncreated. Default values are re-calculated if any option is changed. Example:\n```python\n>>> from options_factory import MutableOptionsFactory\n>>> factory = MutableOptionsFactory(a=1, b=lambda options: 2.0*options.a)\n>>> mutable_options = factory.create({\"a\": 3, \"b\": 4})\n>>> mutable_options.a\n3\n>>> mutable_options.b\n4\n>>> del mutable_options.b\n>>> mutable_options.b\n6.0\n>>> mutable_options.a = 5\n>>> mutable_options.b\n10.0\n>>> mutable_options[\"a\"] = 7.5\n>>> mutable_options.b\n15.0\n>>> del mutable_options[\"a\"]\n>>> mutable_options.b\n2.0\n>>> mutable_options.a\n1\n```\n\n\nExpressions for non-default values\n==================================\n\nPassing expressions for non-default values should work, although it has not been tested\nyet. Expressions cannot at present be loaded from YAML files.\n\n\nAcknowledgements\n================\n\nThanks to [Ben Dudson](https://github.com/bendudson) and [Peter\nHill](https://github.com/ZedThree) for discussion on options handling in the [hypnotoad\nproject](https://github.com/boutproject/hypnotoad/pull/33) and ideas in\n[frozen_options](https://github.com/bendudson/frozen-options).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/johnomotani/optionsfactory", "keywords": "", "license": "OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "maintainer": "", "maintainer_email": "", "name": "optionsfactory", "package_url": "https://pypi.org/project/optionsfactory/", "platform": "", "project_url": "https://pypi.org/project/optionsfactory/", "project_urls": {"Homepage": "https://github.com/johnomotani/optionsfactory"}, "release_url": "https://pypi.org/project/optionsfactory/1.0.2/", "requires_dist": ["PyYAML (>=5.1) ; extra == 'yaml'"], "requires_python": ">=3.6", "summary": "Handles user-provided options with flexible defaults, documentation and checking", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>OptionsFactory</code></h1>\n<p><a href=\"https://github.com/johnomotani/optionsfactory\" rel=\"nofollow\">https://github.com/johnomotani/optionsfactory</a></p>\n<p><code>OptionsFactory</code> allows you to define a set of options, which can have (if you like):\ndefault values (which may be expressions depending on other options); documentation for\neach option; an allowed type or list of types; a check that the value option is on an\nallowed list; checks that the value of an option satisfies some tests.</p>\n<p>Once the options are defined in an <code>OptionsFactory</code>, you create a particular instance of\nthe options by passing some user settings (a dict or YAML file). The <code>OptionsFactory</code>\nuses the values passed, sets the remaining options from the default values or\nexpressions and returns an <code>Options</code> object. Options are immutable so that you do not\nhave to worry about the options being accidentally changed during execution - however,\nsee <a href=\"#mutableoptionsfactory\" rel=\"nofollow\"><code>MutableOptionsFactory</code></a> if you want to be able to update the\noptions dynamically.</p>\n<p>For example, some simple options might be implemented like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">optionsfactory</span> <span class=\"kn\">import</span> <span class=\"n\">OptionsFactory</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># The keyword arguments define the options and give the default values</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_options</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">user_options</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># options can be accessed like a dict</span>\n        <span class=\"n\">myvalue</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">]</span>\n\n        <span class=\"c1\">#... or as attributes</span>\n        <span class=\"n\">mynewvalue</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n</pre>\n<p>It might also be useful for some classes to allow the options to be set from keyword\narguments, for example</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">optionsfactory</span> <span class=\"kn\">import</span> <span class=\"n\">OptionsFactory</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># The keyword arguments define the options and give the default values</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>create()</code> method will not alter the argument passed to it.</p>\n<p>The options will then combine explicitly set values and defaults:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span> <span class=\"c1\"># uses default values</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b1</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b1</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b2</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"c1\"># override one of the defaults</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mi\">4</span>\n</pre>\n<p>More flexibility is available by using expressions to set the default values.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">optionsfactory</span> <span class=\"kn\">import</span> <span class=\"n\">OptionsFactory</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># The keyword arguments define the options and give the default values</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>could be used like:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">()</span> <span class=\"c1\"># only default values</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">7</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"c1\"># override both options, expression not used</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c3</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"c1\"># User-set value of b evaluated in default expression for a</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">9</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mi\">4</span>\n</pre>\n<p>Circular dependencies in expressions will be detected and raise a ValueError.</p>\n<h2><code>WithMeta</code></h2>\n<p><code>WithMeta</code> objects are used to store the defaults within <code>OptionsFactory</code>, and can be\nused to define options with extra information, e.g.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">optionsfactory</span> <span class=\"kn\">import</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">,</span> <span class=\"n\">WithMeta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">optionsfactory.checks</span> <span class=\"kn\">import</span> <span class=\"n\">is_positive</span><span class=\"p\">,</span> <span class=\"n\">is_None</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">D</span><span class=\"p\">:</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n        <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s2\">\"option a\"</span><span class=\"p\">),</span>\n        <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">),</span>\n        <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">allowed</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]),</span>\n        <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">check_all</span><span class=\"o\">=</span><span class=\"n\">is_positive</span><span class=\"p\">),</span>\n        <span class=\"n\">e</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">check_any</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n        <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s2\">\"option f\"</span><span class=\"p\">,</span> <span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">allowed</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mf\">9.5</span><span class=\"p\">]),</span>\n        <span class=\"n\">g</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span>\n            <span class=\"mi\">7</span><span class=\"p\">,</span>\n            <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s2\">\"option g\"</span><span class=\"p\">,</span>\n            <span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">],</span>\n            <span class=\"n\">check_all</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">is_positive</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">],</span>\n            <span class=\"n\">check_any</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>The first argument to <code>WithMeta</code> gives the default value for the option, and the\nremaining keyword arguments are all optional. Using <code>WithMeta</code> the values behave just as\nthe simple default values described above:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">\"b\"</span><span class=\"p\">]</span>\n<span class=\"mi\">12</span>\n</pre>\n<h3>documentation</h3>\n<p>Documentation defined in the factory initialisation can be accessed from either the\n<code>OptionsFactory</code> or the <code>Options</code> instance via a <code>doc</code> property, that gives a <code>dict</code>\nwith the documentation for each option:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">]</span>  <span class=\"c1\"># Get doc from the factory</span>\n<span class=\"s1\">'option a'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s2\">\"b\"</span><span class=\"p\">]</span>  <span class=\"c1\"># No doc was defined for this option</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s2\">\"f\"</span><span class=\"p\">]</span>  <span class=\"c1\"># Get doc from the Options instance</span>\n<span class=\"s1\">'option f'</span>\n</pre>\n<h3><code>value_type</code></h3>\n<p>The value_type argument can be used to give a type or sequence of types that the option\nis allowed to have. Trying to set an option with a non-allowed type raises a\n<code>ValueError</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">=-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">value</span> <span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"n\">of</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">d</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">compatible</span> <span class=\"k\">with</span> <span class=\"n\">check_all</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d3</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d3</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">f</span>\n<span class=\"mi\">8</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d4</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">=</span><span class=\"mf\">9.5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d4</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">f</span>\n<span class=\"mf\">9.5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d5</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">=</span><span class=\"s2\">\"a string\"</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"n\">string</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">int</span><span class=\"s1\">'&gt;, &lt;class '</span><span class=\"nb\">float</span><span class=\"s1\">'&gt;) for key=f</span>\n</pre>\n<h3>checking values</h3>\n<p>There are two ways of checking the values that are set for options.</p>\n<h4><code>allowed</code></h4>\n<p>The <code>allowed</code> keyword sets a list of allowed options. A <code>ValueError</code> is raised if the\nvalue being set is not in the list. <code>allowed</code> cannot be set if either of <code>check_all</code> or\n<code>check_any</code> is. Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d6</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">allowed</span> <span class=\"n\">values</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">c</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d7</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"mi\">4</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">allowed</span> <span class=\"n\">values</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">c</span>\n</pre>\n<h4><code>check_all</code> and <code>check_any</code></h4>\n<p>These arguments can be passed a list of expressions. The expressions passed to\n<code>check_all</code> must all evaluate to <code>True</code>, or an <code>ValueError</code> is raised. At least one of\nthe expressions passed to <code>check_any</code> is raised. The choice of <code>check_any</code> or\n<code>check_all</code> is a matter of convenience and clarity - the effect of either could be\nachieved with a single, sufficiently complicated, expression. They can both be set at\nthe same time, although this probably not often useful. Neither can be set if the\n<code>allowed</code> keyword is. Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d8</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d8</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">d</span>\n<span class=\"mi\">14</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d9</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">value</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"n\">of</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">d</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">compatible</span> <span class=\"k\">with</span> <span class=\"n\">check_all</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d10</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d10</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">e</span>\n<span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d11</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">value</span> <span class=\"mi\">6</span> <span class=\"n\">of</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">e</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">compatible</span> <span class=\"k\">with</span> <span class=\"n\">check_any</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d12</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d12</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">g</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d13</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">value</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"n\">of</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">g</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">compatible</span> <span class=\"k\">with</span> <span class=\"n\">check_all</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d14</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">value</span> <span class=\"mi\">5</span> <span class=\"n\">of</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">g</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">compatible</span> <span class=\"k\">with</span> <span class=\"n\">check_any</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d15</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d15</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">g</span>\n<span class=\"mi\">9</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d16</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"n\">value</span> <span class=\"mi\">10</span> <span class=\"n\">of</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">g</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">compatible</span> <span class=\"k\">with</span> <span class=\"n\">check_all</span>\n</pre>\n<h2>Default expressions</h2>\n<p>Much more flexibility is offered for default values by using expressions. These are\nsingle-argument functions (lambda expressions are often useful), which return the\ndesired default value when passed an <code>Options</code> object, from which the values of other\noptions (which may or may not be expressions themselves) can be accessed. See the <code>class C</code> example above. When <a href=\"#nested_options\" rel=\"nofollow\">nested options</a> are used, expressions can also\naccess values in subsections or parent sections of the options tree:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">optionsfactory</span> <span class=\"kn\">import</span> <span class=\"n\">OptionsFactory</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">E</span><span class=\"p\">:</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n        <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">subsection1</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">subsection2</span><span class=\"o\">.</span><span class=\"n\">e</span><span class=\"p\">,</span>\n        <span class=\"n\">subsection1</span><span class=\"o\">=</span><span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n            <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">subsection2</span><span class=\"o\">.</span><span class=\"n\">e</span><span class=\"p\">,</span>\n            <span class=\"n\">subsubsection</span><span class=\"o\">=</span><span class=\"n\">OptionsFactory</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">subsection2</span><span class=\"o\">=</span><span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n            <span class=\"n\">e</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">subsection1</span><span class=\"o\">.</span><span class=\"n\">subsubsection</span><span class=\"o\">.</span><span class=\"n\">d</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>If we initialise <code>E</code> with just the defaults</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">E</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mi\">6</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">subsection1</span><span class=\"o\">.</span><span class=\"n\">c</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">subsection1</span><span class=\"o\">.</span><span class=\"n\">subsubsection</span><span class=\"o\">.</span><span class=\"n\">d</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">subsection2</span><span class=\"o\">.</span><span class=\"n\">e</span>\n<span class=\"mi\">2</span>\n</pre>\n<h2>OptionsFactory extension for subclasses</h2>\n<p>Sometimes it can be useful to create an extended version of an <code>OptionsFactory</code>. For\nexample a child class might have some extra options that are not needed in its parent\nclass, or might require different default values. The <code>OptionsFatory.add()</code> method\ncreates a new <code>OptionsFactory</code> from an existing one, with the keyword arguments adding\nto or overriding the options in the original factory. When overriding existing options,\npass a value or expression to keep existing documentation and checks, or a <code>WithMeta</code>\nobject to provide new documentation and checks. Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">optionsfactory</span> <span class=\"kn\">import</span> <span class=\"n\">OptionsFactory</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Parent</span><span class=\"p\">:</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n        <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s2\">\"option a\"</span><span class=\"p\">),</span>\n        <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s2\">\"option b\"</span><span class=\"p\">),</span>\n        <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s2\">\"option c\"</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">optiotns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Child</span><span class=\"p\">(</span><span class=\"n\">Parent</span><span class=\"p\">):</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">Parent</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n        <span class=\"c1\"># Keep 'a' unchanged</span>\n        <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>  <span class=\"c1\"># Change the default value of 'b', but keep the documentation</span>\n        <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s2\">\"child option c\"</span><span class=\"p\">),</span>  <span class=\"c1\"># New default and attributes for 'c'</span>\n        <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"s2\">\"new option d\"</span><span class=\"p\">),</span>  <span class=\"c1\"># New option not present in the parent</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>and if we create a <code>Child</code> instance</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">Child</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">]</span>\n<span class=\"s1\">'option a'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mi\">4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s2\">\"b\"</span><span class=\"p\">]</span>\n<span class=\"s1\">'option b'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">c</span>\n<span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s2\">\"c\"</span><span class=\"p\">]</span>\n<span class=\"s1\">'child option c'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">d</span>\n<span class=\"mi\">6</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s2\">\"d\"</span><span class=\"p\">]</span>\n<span class=\"s1\">'new option d'</span>\n</pre>\n<h2>Nested options</h2>\n<p>Nested options are created by passing another <code>OptionsFactory</code> as a keyword argument in\nthe OptionsFactory constructor. See the <a href=\"#nested_structure\" rel=\"nofollow\">nested structure</a> example\nbelow.</p>\n<h2>Collecting defaults</h2>\n<p>It can be useful to collect options from several factories together into a higher-level\nfactory. For example if a <code>class Container</code> contains members of several classes, it\nmight be useful for the <code>options_factory</code> of <code>Container</code> to have options for all those\nmembers, but to define the options, defaults, documentation, etc. in the particular\nclasses. This can be done by passing <code>OptionsFactory</code> objects as positional arguments to\nthe <code>OptionsFactory</code> constructor - see the <a href=\"#flat_structure\" rel=\"nofollow\">flat structure</a> example\nbelow.</p>\n<h2>Other Features</h2>\n<h3>load from YAML</h3>\n<p>The user settings can be loaded from a YAML file (if <code>PyYAML</code> is available - install the\n<code>optionsfactory[yaml]</code> variant to ensure this):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">create_from_yaml</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<h3>save to YAML</h3>\n<p>The options can also be saved to a YAML file, either the non-default values only</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">to_yaml</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>or all values including defaults, by passing <code>True</code> to the <code>with_defaults</code> argument</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">to_yaml</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># saves options with default values as well</span>\n</pre>\n<h2>Examples</h2>\n<p>Here are a couple of more complicated examples of the patterns that <code>OptionsFactory</code> was\ndesigned for.</p>\n<h3>flat structure</h3>\n<p><code>class A</code> contains members of types <code>B</code> and <code>C</code>, so <code>A.options_factory</code> collects the\ndefault values, documentation, etc. from <code>B.options_factory</code> and <code>C.options_factory</code> by\ntaking them as positional arguments to the constructor. Then the <code>Options</code> object of <code>A</code>\nis used to create the <code>Options</code> objects for <code>B</code> and <code>C</code>, which will have only the\noptions relevant to themselves in, because <code>B.options_factory</code> and <code>C.options_factory</code>\nignore any undefined options in the argument passed to <code>create</code>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n        <span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"p\">,</span>\n        <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"p\">,</span>\n        <span class=\"n\">a_opt1</span> <span class=\"o\">=</span> <span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">allowed</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]),</span>\n        <span class=\"n\">a_opt2</span> <span class=\"o\">=</span> <span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_options</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"p\">(</span><span class=\"n\">user_options</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n        <span class=\"n\">b_opt</span> <span class=\"o\">=</span> <span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"n\">checks</span><span class=\"o\">=</span><span class=\"n\">is_positive</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">:</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n        <span class=\"n\">c_opt</span> <span class=\"o\">=</span> <span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"s2\">\"c-value\"</span><span class=\"p\">,</span> <span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<p>If <code>B</code> or <code>C</code> were intended to also be used as user-facing classes, which want to get\ntheir options from <code>**kwargs</code>, it would also be possible to have</p>\n<pre><span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>and create the objects in <code>A</code>'s constructor like <code>self.b = B(**self.options)</code>.</p>\n<h3>nested structure</h3>\n<p>Similar to the flat structure above, but keeping the options for different member\nobjects separated in different sections:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n        <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"p\">,</span>\n        <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"p\">,</span>\n        <span class=\"n\">a_opt1</span> <span class=\"o\">=</span> <span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">allowed</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]),</span>\n        <span class=\"n\">a_opt2</span> <span class=\"o\">=</span> <span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_options</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"p\">(</span><span class=\"n\">user_options</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">B</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">C</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n        <span class=\"n\">b_opt</span> <span class=\"o\">=</span> <span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"n\">checks</span><span class=\"o\">=</span><span class=\"n\">is_positive</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">options</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">:</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n        <span class=\"n\">c_opt</span> <span class=\"o\">=</span> <span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"s2\">\"c-value\"</span><span class=\"p\">,</span> <span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">options</span>\n</pre>\n<p>If <code>A</code> needs to change the default options for one of the nested sections, can use the\n<code>add()</code> method like <code>B={\"b_opt\": 7.0)</code>.</p>\n<p>Default expressions in a nested options structure can use values from sub-sections, or\nfrom parent sections, see <a href=\"#default_expressions\" rel=\"nofollow\">Default expressions</a>.</p>\n<p>If <code>B</code> or <code>C</code> should be allowed to be created independently of a containing class like\n<code>A</code>, then you can instead define the constructor as</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n        <span class=\"n\">b_opt</span> <span class=\"o\">=</span> <span class=\"n\">WithMeta</span><span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"n\">checks</span><span class=\"o\">=</span><span class=\"n\">is_positive</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options_factory</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<p>This will have the same effect as the above code when called with <code>self.b = B(self.options.B)</code> but also allows creating a <code>B</code> like <code>another_b = B({\"b_opt\": 4.0})</code>.\n(This version will be slightly more expensive than the one above because the <code>Options</code>\nobject will be converted to a <code>dict</code>-like iterable and a new <code>Options</code> created by\nparsing that iterable.)</p>\n<h3>global options</h3>\n<p>Not recommended, but you could create a global options object for your package/program.\nFor example in a file <code>mypackage.py</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">optionsfactory</span> <span class=\"kn\">import</span> <span class=\"n\">OptionsFactory</span>\n\n\n<span class=\"n\">global_options</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n\n<span class=\"n\">options_factory</span> <span class=\"o\">=</span> <span class=\"n\">OptionsFactory</span><span class=\"p\">(</span>\n    <span class=\"n\">opt1</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">opt2</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"n\">input_options</span><span class=\"p\">):</span>\n    <span class=\"k\">global</span> <span class=\"n\">global_options</span>\n    <span class=\"n\">global_options</span> <span class=\"o\">=</span> <span class=\"n\">options_factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">input_options</span><span class=\"p\">)</span>\n</pre>\n<h1>MutableOptionsFactory</h1>\n<p><code>MutableOptionsFactory</code> is almost identical to <code>OptionsFactory</code>, but creates\n<code>MutableOptions</code> objects which can be modified after being created (it also has a\n<code>create_immutable()</code> method, equivalent to <code>OptionsFactory.create()</code> to create\n<code>Options</code> objects). <code>MutableOptions</code> behave like <code>Options</code> with the exception that\nvalues can be set, or reset to the default value (using <code>del</code>) after the object is\ncreated. Default values are re-calculated if any option is changed. Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">options_factory</span> <span class=\"kn\">import</span> <span class=\"n\">MutableOptionsFactory</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">MutableOptionsFactory</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"mf\">2.0</span><span class=\"o\">*</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mutable_options</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mutable_options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mutable_options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mi\">4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">mutable_options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mutable_options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mf\">6.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mutable_options</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mutable_options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mf\">10.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mutable_options</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">7.5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mutable_options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mf\">15.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">mutable_options</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mutable_options</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mf\">2.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mutable_options</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">1</span>\n</pre>\n<h1>Expressions for non-default values</h1>\n<p>Passing expressions for non-default values should work, although it has not been tested\nyet. Expressions cannot at present be loaded from YAML files.</p>\n<h1>Acknowledgements</h1>\n<p>Thanks to <a href=\"https://github.com/bendudson\" rel=\"nofollow\">Ben Dudson</a> and <a href=\"https://github.com/ZedThree\" rel=\"nofollow\">Peter\nHill</a> for discussion on options handling in the <a href=\"https://github.com/boutproject/hypnotoad/pull/33\" rel=\"nofollow\">hypnotoad\nproject</a> and ideas in\n<a href=\"https://github.com/bendudson/frozen-options\" rel=\"nofollow\">frozen_options</a>.</p>\n\n          </div>"}, "last_serial": 7171759, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0db5c965373db536e0fa73401064af85", "sha256": "e535478e297ee5dab25ae7623550573c9d954b104c87a95d507524d663c9624c"}, "downloads": -1, "filename": "optionsfactory-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0db5c965373db536e0fa73401064af85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24276, "upload_time": "2020-05-03T23:00:08", "upload_time_iso_8601": "2020-05-03T23:00:08.575249Z", "url": "https://files.pythonhosted.org/packages/3f/24/ee4b39330f5e3832e7fc1dc673ccf8e762ca0bfd0cfd8f7900a1adc6e249/optionsfactory-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6a0f83be8430734693dca62b591e7bf", "sha256": "a3884f9afca6b7631f33ded35c25cc992a6cd1338291187d449e97a8c7292936"}, "downloads": -1, "filename": "optionsfactory-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e6a0f83be8430734693dca62b591e7bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 40686, "upload_time": "2020-05-03T23:00:10", "upload_time_iso_8601": "2020-05-03T23:00:10.930109Z", "url": "https://files.pythonhosted.org/packages/dc/9e/318d50f5038b6ad908edc91c6b048766dfb75b98a5fec27a372b5666b0ce/optionsfactory-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a5fd16e9778c5825e1c724d195670f63", "sha256": "8597d5ddc3b7d57d171ce518e8237492d08248c888ca482257edb0504495b06d"}, "downloads": -1, "filename": "optionsfactory-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a5fd16e9778c5825e1c724d195670f63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24269, "upload_time": "2020-05-03T23:17:26", "upload_time_iso_8601": "2020-05-03T23:17:26.710074Z", "url": "https://files.pythonhosted.org/packages/95/92/e401de5e9132674e8ea8d1bc5bf160b64691dc999031a85369577b90ddef/optionsfactory-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3c928f3210040f244647be7bcf9e0a0", "sha256": "07d7a2b2e9a4fb103ad054ec68557d256d25a373d9b6a7c64b26652ea23370f6"}, "downloads": -1, "filename": "optionsfactory-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f3c928f3210040f244647be7bcf9e0a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 40681, "upload_time": "2020-05-03T23:17:27", "upload_time_iso_8601": "2020-05-03T23:17:27.917282Z", "url": "https://files.pythonhosted.org/packages/ce/25/d4f82a27e39e770059de8744c05a84d8eb4e5f03c7d3d7ca6f38823936b3/optionsfactory-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "9139c5ca22c2522e3512d7b28a759d99", "sha256": "a449ee61bf46226903a8110297519a8e9c6175e5d5c114731eb85f0fc32e3b4f"}, "downloads": -1, "filename": "optionsfactory-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9139c5ca22c2522e3512d7b28a759d99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24289, "upload_time": "2020-05-05T12:51:41", "upload_time_iso_8601": "2020-05-05T12:51:41.040678Z", "url": "https://files.pythonhosted.org/packages/06/8f/d9431be57d3b1b9b20ecc606ad604cdf307506e7f12abf75d800f6bacc03/optionsfactory-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67a9687d2d36a0a369f3182fdd12d03a", "sha256": "b723d193cbb4787e79538fa178c05c937bb2716eb86966ea4a0e7b245e2949cf"}, "downloads": -1, "filename": "optionsfactory-1.0.2.tar.gz", "has_sig": false, "md5_digest": "67a9687d2d36a0a369f3182fdd12d03a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 40736, "upload_time": "2020-05-05T12:51:42", "upload_time_iso_8601": "2020-05-05T12:51:42.152447Z", "url": "https://files.pythonhosted.org/packages/86/3c/3703f5506fba0d7423d6ce003d68b257dd23b9cb28753577263bab4a2ae2/optionsfactory-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9139c5ca22c2522e3512d7b28a759d99", "sha256": "a449ee61bf46226903a8110297519a8e9c6175e5d5c114731eb85f0fc32e3b4f"}, "downloads": -1, "filename": "optionsfactory-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9139c5ca22c2522e3512d7b28a759d99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24289, "upload_time": "2020-05-05T12:51:41", "upload_time_iso_8601": "2020-05-05T12:51:41.040678Z", "url": "https://files.pythonhosted.org/packages/06/8f/d9431be57d3b1b9b20ecc606ad604cdf307506e7f12abf75d800f6bacc03/optionsfactory-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67a9687d2d36a0a369f3182fdd12d03a", "sha256": "b723d193cbb4787e79538fa178c05c937bb2716eb86966ea4a0e7b245e2949cf"}, "downloads": -1, "filename": "optionsfactory-1.0.2.tar.gz", "has_sig": false, "md5_digest": "67a9687d2d36a0a369f3182fdd12d03a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 40736, "upload_time": "2020-05-05T12:51:42", "upload_time_iso_8601": "2020-05-05T12:51:42.152447Z", "url": "https://files.pythonhosted.org/packages/86/3c/3703f5506fba0d7423d6ce003d68b257dd23b9cb28753577263bab4a2ae2/optionsfactory-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:00 2020"}