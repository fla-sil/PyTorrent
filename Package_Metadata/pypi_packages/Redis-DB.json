{"info": {"author": "Hari Kishan", "author_email": "hari.kishan81001@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "redis-db\n========\n\nORM for managing cache of django models using redis. Models data can be cached just once and as \nper requirements it can be fetched using filters. \n\nNo-Sql in retrieval of model objects.\n\nDependencies:\n    \n[django >=1.3](https://www.djangoproject.com/)\n\n[redis-py](https://github.com/andymccurdy/redis-py)\n\n[redis](http://redis.io/)\n    \n\n  User Manual :\n    \n    from redis_db.manager import CacheManager\n    \n    class Person(models.Model):\n      \"\"\"\n      Person model, contains basic details.\n      \"\"\"\n      name = models.CharField(max_length = 255)\n      email = models.EmailField(max_length = 100)\n      gender = models.ChoiceField(choices = (('M', 'Male'), ('F', 'Female')))\n      \n      #custom managers\n      objects = models.Manager()\n      cache_objects = CacheManager(key = 'person-cache')\n      \n  Creating Cache Data (one time process) \n    \n    qs = Person.objects.all()\n    Person.cache_objects.store(qs)    # qs can be anything, filtered queryset or model object itself\n    \n  Retrieving Objects from cache (No-SQL)\n  \n  1- All objects\n      \n      objs = Person.cache_objects.all()  # returns list of Person Objects. Note - Gives back list not queryset,\n                                         # because querysets itself is lazy query\n      \n  2 - Filters usage\n    \n      objs = Person.cache_objects.filter(gender = 'M')   # all male Person's Objects\n      \n  3 - Get a specific object based on id\n    \n      obj = Person.cache_objects.get(id= 10) \n    \n  \n  Note : \n\n  For non reference objects there is no query at all but in case of ForiegnKey retreival it makes \n  a query to get that object.\n  \n  \n      \n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/redis-db/", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "Redis-DB", "package_url": "https://pypi.org/project/Redis-DB/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Redis-DB/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/redis-db/"}, "release_url": "https://pypi.org/project/Redis-DB/0.1.5/", "requires_dist": null, "requires_python": null, "summary": "Redis cache for managing Django ORM", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>ORM for managing cache of django models using redis. Models data can be cached just once and as\nper requirements it can be fetched using filters.</p>\n<p>No-Sql in retrieval of model objects.</p>\n<p>Dependencies:</p>\n<p>[django &gt;=1.3](<a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">https://www.djangoproject.com/</a>)</p>\n<p>[redis-py](<a href=\"https://github.com/andymccurdy/redis-py\" rel=\"nofollow\">https://github.com/andymccurdy/redis-py</a>)</p>\n<p>[redis](<a href=\"http://redis.io/\" rel=\"nofollow\">http://redis.io/</a>)</p>\n<blockquote>\n<p>User Manual :</p>\n<blockquote>\n<p>from redis_db.manager import CacheManager</p>\n<dl>\n<dt>class Person(models.Model):</dt>\n<dd><p>\u201c\u201d\u201d\nPerson model, contains basic details.\n\u201c\u201d\u201d\nname = models.CharField(max_length = 255)\nemail = models.EmailField(max_length = 100)\ngender = models.ChoiceField(choices = ((\u2018M\u2019, \u2018Male\u2019), (\u2018F\u2019, \u2018Female\u2019)))</p>\n<p>#custom managers\nobjects = models.Manager()\ncache_objects = CacheManager(key = \u2018person-cache\u2019)</p>\n</dd>\n</dl>\n</blockquote>\n<p>Creating Cache Data (one time process)</p>\n<blockquote>\nqs = Person.objects.all()\nPerson.cache_objects.store(qs)    # qs can be anything, filtered queryset or model object itself</blockquote>\n<p>Retrieving Objects from cache (No-SQL)</p>\n<p>1- All objects</p>\n<blockquote>\n<dl>\n<dt>objs = Person.cache_objects.all()  # returns list of Person Objects. Note - Gives back list not queryset,</dt>\n<dd># because querysets itself is lazy query</dd>\n</dl>\n</blockquote>\n<p>2 - Filters usage</p>\n<blockquote>\nobjs = Person.cache_objects.filter(gender = \u2018M\u2019)   # all male Person\u2019s Objects</blockquote>\n<p>3 - Get a specific object based on id</p>\n<blockquote>\nobj = Person.cache_objects.get(id= 10)</blockquote>\n<p>Note :</p>\n<p>For non reference objects there is no query at all but in case of ForiegnKey retreival it makes\na query to get that object.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 928753, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "2f68e11154e43190335ac52cd6eeb9eb", "sha256": "d8f84cbe26f9ae33f072e00e764c2eff3d0c33ee75b2851505ee6b18b0d3e07e"}, "downloads": -1, "filename": "Redis-DB-0.1.5.tar.gz", "has_sig": false, "md5_digest": "2f68e11154e43190335ac52cd6eeb9eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3657, "upload_time": "2013-11-25T16:17:20", "upload_time_iso_8601": "2013-11-25T16:17:20.442743Z", "url": "https://files.pythonhosted.org/packages/72/8d/d0253b2b5ee0c030107522b7537446a7606a1a60d6331eb424f5ade05574/Redis-DB-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f68e11154e43190335ac52cd6eeb9eb", "sha256": "d8f84cbe26f9ae33f072e00e764c2eff3d0c33ee75b2851505ee6b18b0d3e07e"}, "downloads": -1, "filename": "Redis-DB-0.1.5.tar.gz", "has_sig": false, "md5_digest": "2f68e11154e43190335ac52cd6eeb9eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3657, "upload_time": "2013-11-25T16:17:20", "upload_time_iso_8601": "2013-11-25T16:17:20.442743Z", "url": "https://files.pythonhosted.org/packages/72/8d/d0253b2b5ee0c030107522b7537446a7606a1a60d6331eb424f5ade05574/Redis-DB-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:52 2020"}