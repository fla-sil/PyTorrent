{"info": {"author": "Marko Ristin", "author_email": "marko.ristin@parquery.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5"], "description": "logthis\n=======\n\nlogthis is a singleton, two-level, colorful, thread-safe, knob-free, logging library for in-house software.\n\n* **singleton**: There is no object to create. There are only two logging functions, ``say()`` and ``err()``.\n\n* **two-level**: There is only the information level and the error level. Nothing else. We found it way too mentally\n  involving to have more than two logging levels. We want to avoid unnecessary cognitive load at every message (\"Is this\n  a warning? Or an information? Or debugging information?\"). We don't think that is important. Either there is a problem\n  and needs to be resolved (so use ``err()``), or everything is fine and no action is required by the operator (so use\n  ``say()``).\n\n* **colorful**: The prefix of a message is colored indicating the log level. This makes reading the logs easier on the\n  eyes and helps direct the attention. Colors are included even when the logging is redirected to a file. We inspect\n  our logs with Unix utilities (``cat`` and the ilk) and find it cool to preserve colors even when we inspect files such\n  as supervisord logs.\n\n* **thread-safe**: We use a global lock so that multi-threaded logging is not garbled. STDOUT and STDERR are flushed on\n  every logging.\n\n* **knob-free**: There are no options or targets/sinks/streams to set. The information is written to STDOUT and the\n  errors are written to STDERR. We found it daunting to learn and deal with all the special knobs in libraries such as\n  Python `logging`.\n\n* **in-house software**: logthis is meant to be used for the software developed and operated in-house. Its output will\n  be examined by people who are familiar with the code and would like to inspect it on problems. We include the name of\n  the script and the line number in the messages as well as time in UTC so that it is easier to trace bugs and see\n  where in the code the logging comes from.\n\n  If you are developing a library or a program for wider audience, then logthis is probably not for you.\n\nUsage\n=====\n\n.. code-block:: python\n\n    import logthis\n\n    # inform the user\n    logthis.say(\"Hello!\")\n\n    # alert the user that there is an error\n    logthis.err(\"Something bad happened\".)\n\nThe output is:\n\n.. image:: https://bitbucket.org/parqueryopen/logthis/raw/9961ff04c428892df09f04a396b94a7f4f9dc669/screenshot.png\n\nInstallation\n============\n\n* Create a virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* Activate it:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* Install logthis with pip:\n\n.. code-block:: bash\n\n    pip3 install logthis\n\nDevelopment\n===========\n\n* Check out the repository.\n\n* In the repository root, create the virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* Activate the virtual environment:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* Install the development dependencies:\n\n.. code-block:: bash\n\n    pip3 install -e .[dev]\n\n* We use tox for testing and packaging the distribution. Assuming that the virtual environment has been activated and\n  the development dependencies have been installed, run:\n\n.. code-block:: bash\n\n    tox\n\n* We also provide a set of pre-commit checks that lint and check code for formatting. Run them locally from an activated\n  virtual environment with development dependencies:\n\n.. code-block:: bash\n\n    ./precommit.py\n\n* The pre-commit script can also automatically format the code:\n\n.. code-block:: bash\n\n    ./precommit.py  --overwrite\n\nVersioning\n==========\nWe follow `Semantic Versioning <http://semver.org/spec/v1.0.0.html>`_. The version X.Y.Z indicates:\n\n* X is the major version (backward-incompatible),\n* Y is the minor version (backward-compatible), and\n* Z is the patch version (backward-compatible bug fix).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Parquery/logthis", "keywords": "logging log colorful color simple plain straightforward", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "logthis", "package_url": "https://pypi.org/project/logthis/", "platform": "", "project_url": "https://pypi.org/project/logthis/", "project_urls": {"Homepage": "https://github.com/Parquery/logthis"}, "release_url": "https://pypi.org/project/logthis/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "a singleton, two-level, colorful, thread-safe, knob-free, logging library for in-house software", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"logthis\">\n<h2>logthis</h2>\n<p>logthis is a singleton, two-level, colorful, thread-safe, knob-free, logging library for in-house software.</p>\n<ul>\n<li><p><strong>singleton</strong>: There is no object to create. There are only two logging functions, <tt>say()</tt> and <tt>err()</tt>.</p>\n</li>\n<li><p><strong>two-level</strong>: There is only the information level and the error level. Nothing else. We found it way too mentally\ninvolving to have more than two logging levels. We want to avoid unnecessary cognitive load at every message (\u201cIs this\na warning? Or an information? Or debugging information?\u201d). We don\u2019t think that is important. Either there is a problem\nand needs to be resolved (so use <tt>err()</tt>), or everything is fine and no action is required by the operator (so use\n<tt>say()</tt>).</p>\n</li>\n<li><p><strong>colorful</strong>: The prefix of a message is colored indicating the log level. This makes reading the logs easier on the\neyes and helps direct the attention. Colors are included even when the logging is redirected to a file. We inspect\nour logs with Unix utilities (<tt>cat</tt> and the ilk) and find it cool to preserve colors even when we inspect files such\nas supervisord logs.</p>\n</li>\n<li><p><strong>thread-safe</strong>: We use a global lock so that multi-threaded logging is not garbled. STDOUT and STDERR are flushed on\nevery logging.</p>\n</li>\n<li><p><strong>knob-free</strong>: There are no options or targets/sinks/streams to set. The information is written to STDOUT and the\nerrors are written to STDERR. We found it daunting to learn and deal with all the special knobs in libraries such as\nPython <cite>logging</cite>.</p>\n</li>\n<li><p><strong>in-house software</strong>: logthis is meant to be used for the software developed and operated in-house. Its output will\nbe examined by people who are familiar with the code and would like to inspect it on problems. We include the name of\nthe script and the line number in the messages as well as time in UTC so that it is easier to trace bugs and see\nwhere in the code the logging comes from.</p>\n<p>If you are developing a library or a program for wider audience, then logthis is probably not for you.</p>\n</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logthis</span>\n\n<span class=\"c1\"># inform the user</span>\n<span class=\"n\">logthis</span><span class=\"o\">.</span><span class=\"n\">say</span><span class=\"p\">(</span><span class=\"s2\">\"Hello!\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># alert the user that there is an error</span>\n<span class=\"n\">logthis</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">(</span><span class=\"s2\">\"Something bad happened\"</span><span class=\"o\">.</span><span class=\"p\">)</span>\n</pre>\n<p>The output is:</p>\n<img alt=\"https://bitbucket.org/parqueryopen/logthis/raw/9961ff04c428892df09f04a396b94a7f4f9dc669/screenshot.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f96539570d8dcea71ad40a9e7a7be10af5d2e4b7/68747470733a2f2f6269746275636b65742e6f72672f70617271756572796f70656e2f6c6f67746869732f7261772f393936316666303463343238383932646630396630346133393662393461376634663964633636392f73637265656e73686f742e706e67\">\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li>Create a virtual environment:</li>\n</ul>\n<pre>python3 -m venv venv3\n</pre>\n<ul>\n<li>Activate it:</li>\n</ul>\n<pre><span class=\"nb\">source</span> venv3/bin/activate\n</pre>\n<ul>\n<li>Install logthis with pip:</li>\n</ul>\n<pre>pip3 install logthis\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<ul>\n<li>Check out the repository.</li>\n<li>In the repository root, create the virtual environment:</li>\n</ul>\n<pre>python3 -m venv venv3\n</pre>\n<ul>\n<li>Activate the virtual environment:</li>\n</ul>\n<pre><span class=\"nb\">source</span> venv3/bin/activate\n</pre>\n<ul>\n<li>Install the development dependencies:</li>\n</ul>\n<pre>pip3 install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<ul>\n<li>We use tox for testing and packaging the distribution. Assuming that the virtual environment has been activated and\nthe development dependencies have been installed, run:</li>\n</ul>\n<pre>tox\n</pre>\n<ul>\n<li>We also provide a set of pre-commit checks that lint and check code for formatting. Run them locally from an activated\nvirtual environment with development dependencies:</li>\n</ul>\n<pre>./precommit.py\n</pre>\n<ul>\n<li>The pre-commit script can also automatically format the code:</li>\n</ul>\n<pre>./precommit.py  --overwrite\n</pre>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>We follow <a href=\"http://semver.org/spec/v1.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>. The version X.Y.Z indicates:</p>\n<ul>\n<li>X is the major version (backward-incompatible),</li>\n<li>Y is the minor version (backward-compatible), and</li>\n<li>Z is the patch version (backward-compatible bug fix).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6548217, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "00606c32d365d31b87516c2c90f2c046", "sha256": "4afc8367b49ac50ec2071d04b1d09286f8dfea5557b3195014ef5da1da99337d"}, "downloads": -1, "filename": "logthis-1.0.0.tar.gz", "has_sig": false, "md5_digest": "00606c32d365d31b87516c2c90f2c046", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4414, "upload_time": "2018-07-27T14:00:26", "upload_time_iso_8601": "2018-07-27T14:00:26.894911Z", "url": "https://files.pythonhosted.org/packages/9e/6a/364ddefcb3412c2bbd0f539396d8b343f99685f9831c3d4a39440a579b59/logthis-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2c7b17eddd1052c48db96dc96dcde1d7", "sha256": "ca07cce797b72ff717765f5c3052f5a73a7c723dbc675c6d9ce99457bcb9eed7"}, "downloads": -1, "filename": "logthis-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2c7b17eddd1052c48db96dc96dcde1d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4603, "upload_time": "2018-08-06T08:44:06", "upload_time_iso_8601": "2018-08-06T08:44:06.557986Z", "url": "https://files.pythonhosted.org/packages/59/b2/ac9ace3d8260d62066b05460636da517ea14ad49e466596a0c6aa520a464/logthis-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2c7b17eddd1052c48db96dc96dcde1d7", "sha256": "ca07cce797b72ff717765f5c3052f5a73a7c723dbc675c6d9ce99457bcb9eed7"}, "downloads": -1, "filename": "logthis-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2c7b17eddd1052c48db96dc96dcde1d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4603, "upload_time": "2018-08-06T08:44:06", "upload_time_iso_8601": "2018-08-06T08:44:06.557986Z", "url": "https://files.pythonhosted.org/packages/59/b2/ac9ace3d8260d62066b05460636da517ea14ad49e466596a0c6aa520a464/logthis-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:06 2020"}