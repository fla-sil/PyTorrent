{"info": {"author": "Rob McMullen", "author_email": "feedback@playermissile.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Software Development :: Assemblers", "Topic :: Utilities"], "description": "=========================================================\nOmnivore 2.0 (pre-release, very very alpha version)\n=========================================================\n\n\n\nAbstract\n========\n\nOmnivore - the retrocomputing reverse engineering toolbox\n\nOmnivore is a cross-platform app for modern hardware (running linux, MacOS and\nWindows) to work with executables or media images of Atari 8-bit, Apple ][+, and other retrocomputer machines and game consoles.\n\nFeatures include (in various states of operation at the moment):\n\n* emulator with debugger (see below)\n* binary editor\n* disassembler (6502, 65C02, 6809, and many other 8-bit CPU architectures)\n* 6502 cross-assembler (ATasm, uses MAC/65 syntox)\n* graphics editor\n* map editor\n* Jumpman level editor (Atari 8-bit platform only)\n\nEmulator\n---------\n\nOmnivore provides unified front-end to several 8-bit CPU and system emulators\nto provide a common set of control methods for both normal operation and\ndebugging purposes. This is used as the basis for the emulation support in\nOmnivore.\n\nCurrently available are:\n\n* libatari800, an embedded port of the `atari800 emulator <https://atari800.github.io/>`_\n* lib6502, a generic 6502 emulator based on `David Buchanan's 6502-emu <https://github.com/DavidBuchanan314/6502-emu>`_\n* crabapple, a thin layer atop of lib6502 that provides some (tiny, small amount of) Apple ][+ compatibility\n\nThe debugger includes:\n\n* rewind capability to return to previous point of emulation\n* debugger able to step forward (**and**, soon, backward)\n* change any portion of memory or processor state\n* CPU instruction history browser\n* memory access visualizer\n* memory map labels, used for disassembler\n* customizable memory viewer using labels and data types\n\n\n\n\nA Tribute\n---------\n\nWhile producing the Player/Missile podcast, I have had many ideas about hacking\ncode on the 8-bits like I used to as a kid. One of the tools I had was the\nOmnimon system monitor board by CDY Consulting, an add-on board for the Atari\n800 that provided a ROM-resident monitor similar to what was provided in the Apple ][+ hardware.  In fact, I originally named this program Omnimon but felt\nthat would be too confusing as there are people in the 8-bit community who\nstill use the original Omnimon hardware.  Using the prefix \"Omni-\" is my\ntribute to all the fun I had with the Omnimon hardware.\n\n\nHow To Run Omnivore\n===================\n\nOmnivore 2.0 is still under heavy development. When it gets to a more stable\nstate, I will create binaries for Windows and MacOS. These instructions will be\nfor that time.\n\n\nWindows & MacOS\n---------------\n\nBinaries are available for Windows 7 and later (64-bit\nonly) and Mac OS X 10.9 and later and at the `home page\n<http://playermissile.com/omnivore/>`_ or directly through the `github\nreleases <https://github.com/robmcmullen/omnivore/releases>`_ page.\n\nLinux (or Using a Virtual Environment)\n--------------------------------------\n\nBinaries for linux are not currently available, although I would like to\nprovide packages for Ubuntu, Linux Mint and Gentoo at some point.\n\nTo run on linux, you'll have to have a Python 3.6 environment set up. How to do\nthis will depend on your distribution, but there's a good chance that if it is\nnot installed already, your package manager will be able to install it for you.\n\nI'd recommend using a virtual environment so you don't clutter up the system\npython, but if you're willing to risk it, the virtualenv step is optional::\n\n    virtualenv /some/path/to/your/virtualenv\n    source /some/path/to/your/virtualenv/bin/activate\n\nThen, install with::\n\n    pip install omnivore\n\nOn some distributions, you will need development libraries to install wxPython\n4 because pip needs to compile it from source. On ubuntu this is::\n\n    sudo apt-get install libgstreamer1.0-dev libgtk-3-dev libwebkit2gtk-4.0-dev\n\nAnd on Gentoo this is::\n\n    emerge -av net-libs/webkit-gtk\n\nInstalling From Source\n======================\n\nIf you're interested in hacking on the code or making bug fixes or\nimprovements, you can install and run the source distribution.\n\nPrerequisites\n-------------\n\n* Python 3.6 and above, capable of building C extensions\n* git\n\nNote: Python 2 is not supported.\n\nYour version of python must be able to build C extensions, which should be\nautomatic in most linux and on OS X. You may have to install the python\ndevelopment packages on linux distributions like Ubuntu or Linux Mint.\n\nWindows doesn't come with a C compiler, but happily, Microsoft provides a\ncut-down version of their Visual Studio compiler just for compiling Python\nextensions! Download and install it from\n`here <https://www.microsoft.com/en-us/download/details.aspx?id=44266>`_.\n\nVirtualenv Setup\n----------------\n\nI'd recommend using a different virtualenv than the one used above because it's possible that python packages that the git source depends on may be at different versions than the current published version::\n\n    python -m venv /some/path/to/your/development/virtualenv\n    source /some/path/to/your/development/virtualenv/bin/activate\n\nGet the source from cloning it from github::\n\n    $ git clone https://github.com/robmcmullen/omnivore.git\n    $ cd omnivore\n    $ git submodule init\n    $ git submodule update\n    $ python setup.py build_ext --inplace\n\n\nRunning the Program\n-------------------\n\nOnce the C modules are built (the Enthought library requires a C module and\nOmnivore has those several Cython modules for graphic speedups), you can run\nthe program from the main source directory using::\n\n    $ python run.py\n\n\nDevelopment\n===========\n\nGraphics Speedups\n-----------------\n\nThe Cython extension is used to speed up some of the time-critical code (like\nrepainting all the character graphics), but it is only required if you were\ngoing to debug or recompile those specific .pyx files.  Cython is not needed\nfor hacking on the python code.\n\nShould you change a cython file (e.g. omnivore/arch/antic_speedups.pyx),\nuse the command ``python setup-cython.py`` to turn that into a C extension,\nthen use ``python setup.py build_ext --inplace`` to regenerate the dynamic\nlibraries.\n\nPlugins\n-------\n\nOmnivore will be able to be extended using plugins based on the\n`Enthought Framework`__ which are discovered automatically at runtime\nusing setuptools plugins.\n\n__ http://docs.enthought.com/envisage/envisage_core_documentation/index.html\n\nThe plugin architecture is documented by Enthought, but is not terribly easy to\nunderstand.  I intend to produce some sample plugins to provide some examples\nin case others would like to provide more functionality to Omnivore.\n\n\nUsage\n=======\n\nIn addition to the Omnivore program itself, this module can be used in other\nprojects. For example, Omnivore supplies a python front-end to the cross\nassembler ATasm, meaning you can compile 6502 code right from your python\nprogram.\n\nATasm Example\n-----------------\n\nFrom the ATasm readme::\n\n    ATasm is a 6502 command-line cross-assembler that is compatible with the\n    original Mac/65 macroassembler released by OSS software.  Code\n    development can now be performed using \"modern\" editors and compiles\n    with lightning speed.\n\nA simple example::\n\n    #!/usr/bin/env python\n\n    from omnivore.assembler import find_assembler\n\n    assembler_cls = find_assembler(\"atasm\")\n    assembler = assembler_cls()\n\n    asm = assembler.assemble(\"libatasm/atasm/tests/works.m65\")\n\n    if asm:\n        print(asm.segments)\n        print(asm.equates)\n        print(asm.labels)\n    else:\n        print(asm.errors)\n\nBecause omnivore provides a very thin wrapper around ATasm (and very little\nATasm code was changed) it needs to creates files to do its work. These files\nwill be created in the same directory as the source file, so the directory must\nbe writeable.\n\nThe segments attribute will contain a list of 3-tuples, each tuple being the\nstart address, the end address, and the bytes for each segment of the assembly.\nA segment is defined as a contiguous sequence of bytes. If there is change of\norigin, a new segment will be created.\n\n\n\nDisclaimer\n==========\n\nNo warranty is expressed or implied. Do not taunt Happy Fun Ball.\n\n\nLicenses\n========\n\nOmnivore, the 8-bit binary editor, emulator, and debugger\nCopyright (c) 2014-2018 Rob McMullen (feedback@playermissile.com)\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n\nOther Licenses\n---------------\n\n* `dirent.h <https://github.com/tronkko/dirent>`_ is Copyright (c) 2015 Toni R\u00f6nkk\u00f6. It is Windows compatibility code used in libatari800 and licensed under the MIT license which is GPL compatible. See the file LICENSE.MIT in the source distribution.\n\n* atari800 is Copyright (c) 1995-1998 David Firth and Copyright (c) 1998-2018 Atari800 development team, licensed under the GPL, same as Omnivore itself.\n\n* `6502-emu <https://github.com/DavidBuchanan314/6502-emu>`_ is Copyright (c) 2017 David Buchanan and licensed under the MIT license. See the file LICENSE.MIT in the source distribution.\n\n* `udis <https://github.com/jefftranter/udis>`_ is Copyright (c) Jeff Tranter. It is the basis for libudis, my fast C disassembler. It is licensed under the Apache 2.0 license. See the file LICENSE.apache in the source distribution.\n\n* `ATasm <http://atari.miribilist.com/atasm/>`_ is Copyright (c) 1998-2014 Mark Schmelzenbach and licensed under the GPL, the same as Omnivore itself.\n\n* `tinycthread <https://tinycthread.github.io/>`_ is Copyright (c) 2012 Marcus Geelnard and Copyright (c) 2013-2016 Evan Nemerson, licensed under the zlib/libpng license. See the file LICENSE.tinycthread in the source distribution.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/robmcmullen/omnivore", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "omnivore", "package_url": "https://pypi.org/project/omnivore/", "platform": "Windows", "project_url": "https://pypi.org/project/omnivore/", "project_urls": {"Homepage": "https://github.com/robmcmullen/omnivore"}, "release_url": "https://pypi.org/project/omnivore/1.99.9/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Unified front-end providing common interface to control several 8 bit emulators", "version": "1.99.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"abstract\">\n<h2>Abstract</h2>\n<p>Omnivore - the retrocomputing reverse engineering toolbox</p>\n<p>Omnivore is a cross-platform app for modern hardware (running linux, MacOS and\nWindows) to work with executables or media images of Atari 8-bit, Apple ][+, and other retrocomputer machines and game consoles.</p>\n<p>Features include (in various states of operation at the moment):</p>\n<ul>\n<li>emulator with debugger (see below)</li>\n<li>binary editor</li>\n<li>disassembler (6502, 65C02, 6809, and many other 8-bit CPU architectures)</li>\n<li>6502 cross-assembler (ATasm, uses MAC/65 syntox)</li>\n<li>graphics editor</li>\n<li>map editor</li>\n<li>Jumpman level editor (Atari 8-bit platform only)</li>\n</ul>\n<div id=\"emulator\">\n<h3>Emulator</h3>\n<p>Omnivore provides unified front-end to several 8-bit CPU and system emulators\nto provide a common set of control methods for both normal operation and\ndebugging purposes. This is used as the basis for the emulation support in\nOmnivore.</p>\n<p>Currently available are:</p>\n<ul>\n<li>libatari800, an embedded port of the <a href=\"https://atari800.github.io/\" rel=\"nofollow\">atari800 emulator</a></li>\n<li>lib6502, a generic 6502 emulator based on <a href=\"https://github.com/DavidBuchanan314/6502-emu\" rel=\"nofollow\">David Buchanan\u2019s 6502-emu</a></li>\n<li>crabapple, a thin layer atop of lib6502 that provides some (tiny, small amount of) Apple ][+ compatibility</li>\n</ul>\n<p>The debugger includes:</p>\n<ul>\n<li>rewind capability to return to previous point of emulation</li>\n<li>debugger able to step forward (<strong>and</strong>, soon, backward)</li>\n<li>change any portion of memory or processor state</li>\n<li>CPU instruction history browser</li>\n<li>memory access visualizer</li>\n<li>memory map labels, used for disassembler</li>\n<li>customizable memory viewer using labels and data types</li>\n</ul>\n</div>\n<div id=\"a-tribute\">\n<h3>A Tribute</h3>\n<p>While producing the Player/Missile podcast, I have had many ideas about hacking\ncode on the 8-bits like I used to as a kid. One of the tools I had was the\nOmnimon system monitor board by CDY Consulting, an add-on board for the Atari\n800 that provided a ROM-resident monitor similar to what was provided in the Apple ][+ hardware.  In fact, I originally named this program Omnimon but felt\nthat would be too confusing as there are people in the 8-bit community who\nstill use the original Omnimon hardware.  Using the prefix \u201cOmni-\u201d is my\ntribute to all the fun I had with the Omnimon hardware.</p>\n</div>\n</div>\n<div id=\"how-to-run-omnivore\">\n<h2>How To Run Omnivore</h2>\n<p>Omnivore 2.0 is still under heavy development. When it gets to a more stable\nstate, I will create binaries for Windows and MacOS. These instructions will be\nfor that time.</p>\n<div id=\"windows-macos\">\n<h3>Windows &amp; MacOS</h3>\n<p>Binaries are available for Windows 7 and later (64-bit\nonly) and Mac OS X 10.9 and later and at the <a href=\"http://playermissile.com/omnivore/\" rel=\"nofollow\">home page</a> or directly through the <a href=\"https://github.com/robmcmullen/omnivore/releases\" rel=\"nofollow\">github\nreleases</a> page.</p>\n</div>\n<div id=\"linux-or-using-a-virtual-environment\">\n<h3>Linux (or Using a Virtual Environment)</h3>\n<p>Binaries for linux are not currently available, although I would like to\nprovide packages for Ubuntu, Linux Mint and Gentoo at some point.</p>\n<p>To run on linux, you\u2019ll have to have a Python 3.6 environment set up. How to do\nthis will depend on your distribution, but there\u2019s a good chance that if it is\nnot installed already, your package manager will be able to install it for you.</p>\n<p>I\u2019d recommend using a virtual environment so you don\u2019t clutter up the system\npython, but if you\u2019re willing to risk it, the virtualenv step is optional:</p>\n<pre>virtualenv /some/path/to/your/virtualenv\nsource /some/path/to/your/virtualenv/bin/activate\n</pre>\n<p>Then, install with:</p>\n<pre>pip install omnivore\n</pre>\n<p>On some distributions, you will need development libraries to install wxPython\n4 because pip needs to compile it from source. On ubuntu this is:</p>\n<pre>sudo apt-get install libgstreamer1.0-dev libgtk-3-dev libwebkit2gtk-4.0-dev\n</pre>\n<p>And on Gentoo this is:</p>\n<pre>emerge -av net-libs/webkit-gtk\n</pre>\n</div>\n</div>\n<div id=\"installing-from-source\">\n<h2>Installing From Source</h2>\n<p>If you\u2019re interested in hacking on the code or making bug fixes or\nimprovements, you can install and run the source distribution.</p>\n<div id=\"prerequisites\">\n<h3>Prerequisites</h3>\n<ul>\n<li>Python 3.6 and above, capable of building C extensions</li>\n<li>git</li>\n</ul>\n<p>Note: Python 2 is not supported.</p>\n<p>Your version of python must be able to build C extensions, which should be\nautomatic in most linux and on OS X. You may have to install the python\ndevelopment packages on linux distributions like Ubuntu or Linux Mint.</p>\n<p>Windows doesn\u2019t come with a C compiler, but happily, Microsoft provides a\ncut-down version of their Visual Studio compiler just for compiling Python\nextensions! Download and install it from\n<a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=44266\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"virtualenv-setup\">\n<h3>Virtualenv Setup</h3>\n<p>I\u2019d recommend using a different virtualenv than the one used above because it\u2019s possible that python packages that the git source depends on may be at different versions than the current published version:</p>\n<pre>python -m venv /some/path/to/your/development/virtualenv\nsource /some/path/to/your/development/virtualenv/bin/activate\n</pre>\n<p>Get the source from cloning it from github:</p>\n<pre>$ git clone https://github.com/robmcmullen/omnivore.git\n$ cd omnivore\n$ git submodule init\n$ git submodule update\n$ python setup.py build_ext --inplace\n</pre>\n</div>\n<div id=\"running-the-program\">\n<h3>Running the Program</h3>\n<p>Once the C modules are built (the Enthought library requires a C module and\nOmnivore has those several Cython modules for graphic speedups), you can run\nthe program from the main source directory using:</p>\n<pre>$ python run.py\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<div id=\"graphics-speedups\">\n<h3>Graphics Speedups</h3>\n<p>The Cython extension is used to speed up some of the time-critical code (like\nrepainting all the character graphics), but it is only required if you were\ngoing to debug or recompile those specific .pyx files.  Cython is not needed\nfor hacking on the python code.</p>\n<p>Should you change a cython file (e.g. omnivore/arch/antic_speedups.pyx),\nuse the command <tt>python <span class=\"pre\">setup-cython.py</span></tt> to turn that into a C extension,\nthen use <tt>python setup.py build_ext <span class=\"pre\">--inplace</span></tt> to regenerate the dynamic\nlibraries.</p>\n</div>\n<div id=\"plugins\">\n<h3>Plugins</h3>\n<p>Omnivore will be able to be extended using plugins based on the\n<a href=\"http://docs.enthought.com/envisage/envisage_core_documentation/index.html\" rel=\"nofollow\">Enthought Framework</a> which are discovered automatically at runtime\nusing setuptools plugins.</p>\n<p>The plugin architecture is documented by Enthought, but is not terribly easy to\nunderstand.  I intend to produce some sample plugins to provide some examples\nin case others would like to provide more functionality to Omnivore.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In addition to the Omnivore program itself, this module can be used in other\nprojects. For example, Omnivore supplies a python front-end to the cross\nassembler ATasm, meaning you can compile 6502 code right from your python\nprogram.</p>\n<div id=\"atasm-example\">\n<h3>ATasm Example</h3>\n<p>From the ATasm readme:</p>\n<pre>ATasm is a 6502 command-line cross-assembler that is compatible with the\noriginal Mac/65 macroassembler released by OSS software.  Code\ndevelopment can now be performed using \"modern\" editors and compiles\nwith lightning speed.\n</pre>\n<p>A simple example:</p>\n<pre>#!/usr/bin/env python\n\nfrom omnivore.assembler import find_assembler\n\nassembler_cls = find_assembler(\"atasm\")\nassembler = assembler_cls()\n\nasm = assembler.assemble(\"libatasm/atasm/tests/works.m65\")\n\nif asm:\n    print(asm.segments)\n    print(asm.equates)\n    print(asm.labels)\nelse:\n    print(asm.errors)\n</pre>\n<p>Because omnivore provides a very thin wrapper around ATasm (and very little\nATasm code was changed) it needs to creates files to do its work. These files\nwill be created in the same directory as the source file, so the directory must\nbe writeable.</p>\n<p>The segments attribute will contain a list of 3-tuples, each tuple being the\nstart address, the end address, and the bytes for each segment of the assembly.\nA segment is defined as a contiguous sequence of bytes. If there is change of\norigin, a new segment will be created.</p>\n</div>\n</div>\n<div id=\"disclaimer\">\n<h2>Disclaimer</h2>\n<p>No warranty is expressed or implied. Do not taunt Happy Fun Ball.</p>\n</div>\n<div id=\"licenses\">\n<h2>Licenses</h2>\n<p>Omnivore, the 8-bit binary editor, emulator, and debugger\nCopyright (c) 2014-2018 Rob McMullen (<a href=\"mailto:feedback%40playermissile.com\">feedback<span>@</span>playermissile<span>.</span>com</a>)</p>\n<p>This program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.</p>\n<p>This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.</p>\n<p>You should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</p>\n<div id=\"other-licenses\">\n<h3>Other Licenses</h3>\n<ul>\n<li><a href=\"https://github.com/tronkko/dirent\" rel=\"nofollow\">dirent.h</a> is Copyright (c) 2015 Toni R\u00f6nkk\u00f6. It is Windows compatibility code used in libatari800 and licensed under the MIT license which is GPL compatible. See the file LICENSE.MIT in the source distribution.</li>\n<li>atari800 is Copyright (c) 1995-1998 David Firth and Copyright (c) 1998-2018 Atari800 development team, licensed under the GPL, same as Omnivore itself.</li>\n<li><a href=\"https://github.com/DavidBuchanan314/6502-emu\" rel=\"nofollow\">6502-emu</a> is Copyright (c) 2017 David Buchanan and licensed under the MIT license. See the file LICENSE.MIT in the source distribution.</li>\n<li><a href=\"https://github.com/jefftranter/udis\" rel=\"nofollow\">udis</a> is Copyright (c) Jeff Tranter. It is the basis for libudis, my fast C disassembler. It is licensed under the Apache 2.0 license. See the file LICENSE.apache in the source distribution.</li>\n<li><a href=\"http://atari.miribilist.com/atasm/\" rel=\"nofollow\">ATasm</a> is Copyright (c) 1998-2014 Mark Schmelzenbach and licensed under the GPL, the same as Omnivore itself.</li>\n<li><a href=\"https://tinycthread.github.io/\" rel=\"nofollow\">tinycthread</a> is Copyright (c) 2012 Marcus Geelnard and Copyright (c) 2013-2016 Evan Nemerson, licensed under the zlib/libpng license. See the file LICENSE.tinycthread in the source distribution.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6399091, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f9074c732354330498b58c376b70c4a9", "sha256": "eef4c2972ea2f5ed7901c04294c09f5f59b35ad449bb429ecb0f223e05c45366"}, "downloads": -1, "filename": "omnivore-0.1.tar.gz", "has_sig": false, "md5_digest": "f9074c732354330498b58c376b70c4a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2025168, "upload_time": "2016-01-02T06:20:34", "upload_time_iso_8601": "2016-01-02T06:20:34.503045Z", "url": "https://files.pythonhosted.org/packages/66/82/42aaa5d3bd0be0b24cdca51dcf23699ae21678257f60b92e909db5f3ce94/omnivore-0.1.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "f424160c29a596a575b94a6a875fea55", "sha256": "ea16011f979db7173eb2d0104c9c5c5ebe7d3549ff1a147a224b54c8571db4e8"}, "downloads": -1, "filename": "Omnivore-0.13.0.tar.gz", "has_sig": false, "md5_digest": "f424160c29a596a575b94a6a875fea55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2778810, "upload_time": "2016-07-26T23:36:51", "upload_time_iso_8601": "2016-07-26T23:36:51.605730Z", "url": "https://files.pythonhosted.org/packages/d2/f3/657c4220024a4f671db5d1710bb404a2c6e8844b5a7a30465a31ae97bde3/Omnivore-0.13.0.tar.gz", "yanked": false}], "0.13.1": [{"comment_text": "", "digests": {"md5": "30253b5f02c0849232c44aaf8dba1169", "sha256": "031b2f7a904594acf59aa06369e73fee03c10154f540de897f73d3e205367bbe"}, "downloads": -1, "filename": "Omnivore-0.13.1.tar.gz", "has_sig": false, "md5_digest": "30253b5f02c0849232c44aaf8dba1169", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2779935, "upload_time": "2016-08-05T16:51:04", "upload_time_iso_8601": "2016-08-05T16:51:04.928559Z", "url": "https://files.pythonhosted.org/packages/8e/a2/160bea2f243709e4e46a2d3c0603bb403a15dfa8bf3648dc1a3ad1121add/Omnivore-0.13.1.tar.gz", "yanked": false}], "0.13.2": [{"comment_text": "", "digests": {"md5": "df1772f4a48a2b9a230cfd402427b720", "sha256": "2d6e091f018598a731333b552d5771e80c64908bbe3fcd484400f9349d103a93"}, "downloads": -1, "filename": "Omnivore-0.13.2.tar.gz", "has_sig": false, "md5_digest": "df1772f4a48a2b9a230cfd402427b720", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2756225, "upload_time": "2016-08-07T20:13:57", "upload_time_iso_8601": "2016-08-07T20:13:57.875519Z", "url": "https://files.pythonhosted.org/packages/55/68/370215880578a8d8d5035e9ae053c13e21c3ce38cd28fb18fcceb5525dd2/Omnivore-0.13.2.tar.gz", "yanked": false}], "0.13.4": [{"comment_text": "", "digests": {"md5": "b02776011aded0af80ba6f4094330899", "sha256": "4ef1367d3d7299185fbdf304264a2150644df1bb9fd77394c5358c9f32993ee0"}, "downloads": -1, "filename": "Omnivore-0.13.4.tar.gz", "has_sig": false, "md5_digest": "b02776011aded0af80ba6f4094330899", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2759244, "upload_time": "2016-08-26T03:03:56", "upload_time_iso_8601": "2016-08-26T03:03:56.967602Z", "url": "https://files.pythonhosted.org/packages/0e/61/f16b2c617b3163ad817d25a76014116ae8f0135592fce2b3307a68b6036e/Omnivore-0.13.4.tar.gz", "yanked": false}], "0.13.7": [{"comment_text": "", "digests": {"md5": "3f80f07031b8bdaa56b77dac55cdb472", "sha256": "36632c6c6623afa4e61d244dc23828fd80119d754353c7181e4d6ea63345afe2"}, "downloads": -1, "filename": "Omnivore-0.13.7.tar.gz", "has_sig": false, "md5_digest": "3f80f07031b8bdaa56b77dac55cdb472", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2762420, "upload_time": "2016-09-16T19:31:31", "upload_time_iso_8601": "2016-09-16T19:31:31.423427Z", "url": "https://files.pythonhosted.org/packages/1c/a9/964e71c6816db8bf27f453bb63ba881c54153dadca51d4f524d3c14ce2ff/Omnivore-0.13.7.tar.gz", "yanked": false}], "0.15.1": [{"comment_text": "", "digests": {"md5": "714ebb61f218c5b03379c5583b01dd1c", "sha256": "b66b690536a25658e77587fc26e475461e0e8c17f6161d6ea1c95e18b5b0d55c"}, "downloads": -1, "filename": "Omnivore-0.15.1.tar.gz", "has_sig": false, "md5_digest": "714ebb61f218c5b03379c5583b01dd1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3495427, "upload_time": "2018-01-04T15:17:51", "upload_time_iso_8601": "2018-01-04T15:17:51.629676Z", "url": "https://files.pythonhosted.org/packages/56/14/1cb2555d89182ff353681f101da3116eabe03e27b6d89e8d8f09cbcb095a/Omnivore-0.15.1.tar.gz", "yanked": false}], "0.5.3": [], "0.8.0": [], "0.8.2": [{"comment_text": "", "digests": {"md5": "85e9fb060192c0885e6fc78644613594", "sha256": "c8ea9c5f5edb459ac46773a0a4d54a84da273f3791c1a80c0ca3eb7d5c469e71"}, "downloads": -1, "filename": "Omnivore-0.8.2.tar.gz", "has_sig": false, "md5_digest": "85e9fb060192c0885e6fc78644613594", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2566256, "upload_time": "2016-02-03T00:17:48", "upload_time_iso_8601": "2016-02-03T00:17:48.472300Z", "url": "https://files.pythonhosted.org/packages/c1/1c/1072a9e0eea51f100093301222f2e9a763b7f9cc93ddfd57c4bb6b33c9f9/Omnivore-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "868af5f451a1cddc46edf5c5886a117c", "sha256": "03edfc9c6eef50c84d77c4b630ef868afba10c5053ab9a1e3a431f006e76f1a8"}, "downloads": -1, "filename": "Omnivore-0.8.3.tar.gz", "has_sig": false, "md5_digest": "868af5f451a1cddc46edf5c5886a117c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2564566, "upload_time": "2016-02-04T21:26:38", "upload_time_iso_8601": "2016-02-04T21:26:38.409466Z", "url": "https://files.pythonhosted.org/packages/12/81/794dd4daed7b7bde8d437de119221e50a890757ccf0ebf9d635eef1bb912/Omnivore-0.8.3.tar.gz", "yanked": false}], "1.99.9": [{"comment_text": "", "digests": {"md5": "a78d1c0581bb9fe04518520705d804fd", "sha256": "b383c773b96277f162dcf4a498100183adb7ed2a20482ececb7db752e6b27c38"}, "downloads": -1, "filename": "omnivore-1.99.9.tar.gz", "has_sig": false, "md5_digest": "a78d1c0581bb9fe04518520705d804fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2836563, "upload_time": "2020-01-05T18:28:54", "upload_time_iso_8601": "2020-01-05T18:28:54.211007Z", "url": "https://files.pythonhosted.org/packages/b9/8b/00236cd4c85cd0ac6cb36690e91f4806d25ce213fcc8c59b212b56f282b6/omnivore-1.99.9.tar.gz", "yanked": false}], "2.0a1": [{"comment_text": "", "digests": {"md5": "c7b9b110973e1d920881bb9dcbec2efa", "sha256": "4f12acc95bc8d3f366dbea2eaf7a9b1beb5d65feb1a7ac5d66109bfcf2383d96"}, "downloads": -1, "filename": "omnivore-2.0a1.tar.gz", "has_sig": false, "md5_digest": "c7b9b110973e1d920881bb9dcbec2efa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1762125, "upload_time": "2019-06-02T18:19:07", "upload_time_iso_8601": "2019-06-02T18:19:07.829106Z", "url": "https://files.pythonhosted.org/packages/05/2a/52281135805e59e3dc43149d95a639b580d30790538d33ff90dd1b657d4f/omnivore-2.0a1.tar.gz", "yanked": false}], "2.0a2": [{"comment_text": "", "digests": {"md5": "f35b9a11a735e3665d927982491b6ad5", "sha256": "e41340270c2548feab6dad892e913a897378ee6d5607733bb9a634cbccc38d5c"}, "downloads": -1, "filename": "omnivore-2.0a2.tar.gz", "has_sig": false, "md5_digest": "f35b9a11a735e3665d927982491b6ad5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1763417, "upload_time": "2019-06-02T19:04:30", "upload_time_iso_8601": "2019-06-02T19:04:30.722798Z", "url": "https://files.pythonhosted.org/packages/c0/c4/50e5a6a7d4f4b9839a90dd8c00daf6a56f7dd3264693109228cdfff7810f/omnivore-2.0a2.tar.gz", "yanked": false}], "2.0a3": [{"comment_text": "", "digests": {"md5": "2befab4f0c4e30b6f63de12de1c022d3", "sha256": "3c0ca73ded28525c96debc1d4a8907fbaa656007b00750cdf5a97807d1d9f78f"}, "downloads": -1, "filename": "omnivore-2.0a3.tar.gz", "has_sig": false, "md5_digest": "2befab4f0c4e30b6f63de12de1c022d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1763509, "upload_time": "2019-06-03T05:22:41", "upload_time_iso_8601": "2019-06-03T05:22:41.027460Z", "url": "https://files.pythonhosted.org/packages/49/53/5da70dea51aee3e680a3e0201fadc6fded04112bbf15408d86ba0ba75bee/omnivore-2.0a3.tar.gz", "yanked": false}], "2.0a4": [{"comment_text": "", "digests": {"md5": "da7367da0be5de6fc576e8a278f84d00", "sha256": "3b55b322e017f513999aa37f811c19bc0543037fd55b96df4957127714f277fe"}, "downloads": -1, "filename": "omnivore-2.0a4.tar.gz", "has_sig": false, "md5_digest": "da7367da0be5de6fc576e8a278f84d00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1773705, "upload_time": "2019-06-14T06:13:15", "upload_time_iso_8601": "2019-06-14T06:13:15.169571Z", "url": "https://files.pythonhosted.org/packages/8a/84/d04843ceeee6d34043bf9def2cff62ce055da4c8d75728092891befeaa22/omnivore-2.0a4.tar.gz", "yanked": false}], "2.0a5": [{"comment_text": "", "digests": {"md5": "4aaf5e357b2316ebf4dd03e951708729", "sha256": "df34c231de81934acbd35e7f6177046317fa73d2c2278dd5dc41bec7943dc7e1"}, "downloads": -1, "filename": "omnivore-2.0a5.tar.gz", "has_sig": false, "md5_digest": "4aaf5e357b2316ebf4dd03e951708729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1775630, "upload_time": "2019-06-14T14:18:56", "upload_time_iso_8601": "2019-06-14T14:18:56.459240Z", "url": "https://files.pythonhosted.org/packages/f5/85/bc62adde2bd50f93c4033f23f0ad22bda6c6f662dfe4e6ec9c86698845d1/omnivore-2.0a5.tar.gz", "yanked": false}], "2.0a6": [{"comment_text": "", "digests": {"md5": "e08c1994f27f7087ce6bbe34e5e6ea9b", "sha256": "37f6ace1b6d33a319967cb8da856482a041fcab5b173f75ee46289ca9d0b8974"}, "downloads": -1, "filename": "omnivore-2.0a6.tar.gz", "has_sig": false, "md5_digest": "e08c1994f27f7087ce6bbe34e5e6ea9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1765803, "upload_time": "2019-07-05T22:22:28", "upload_time_iso_8601": "2019-07-05T22:22:28.663271Z", "url": "https://files.pythonhosted.org/packages/83/2c/51ab04fe9f5bcb15f3b2628625dc35d1c46f3c523f7b6d918368903aca81/omnivore-2.0a6.tar.gz", "yanked": false}], "2.0a7": [{"comment_text": "", "digests": {"md5": "b2503cc74786096ecfb35cb882865140", "sha256": "fecbe08f4454e0b9df48bdd9358daf8b44be1dae97b84a0a50ab0e448316cf04"}, "downloads": -1, "filename": "omnivore-2.0a7.tar.gz", "has_sig": false, "md5_digest": "b2503cc74786096ecfb35cb882865140", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2815458, "upload_time": "2019-07-09T21:17:09", "upload_time_iso_8601": "2019-07-09T21:17:09.026842Z", "url": "https://files.pythonhosted.org/packages/a0/56/e56a262835a5510f27125510787f44aba253b88291f14f17cb469d3ff25d/omnivore-2.0a7.tar.gz", "yanked": false}], "2.0a8": [{"comment_text": "", "digests": {"md5": "2697ec2319d1367a05a969ce89202e35", "sha256": "31d1937f7ea501fc45e2bc3ae728b8d21073d68825f9d9b8a179fd057834cb2f"}, "downloads": -1, "filename": "omnivore-2.0a8.tar.gz", "has_sig": false, "md5_digest": "2697ec2319d1367a05a969ce89202e35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2825860, "upload_time": "2019-07-15T05:43:20", "upload_time_iso_8601": "2019-07-15T05:43:20.563406Z", "url": "https://files.pythonhosted.org/packages/3a/d5/ef8d75c57087b87cccef5075dd22378f383df5c801429da3f450158bc64f/omnivore-2.0a8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a78d1c0581bb9fe04518520705d804fd", "sha256": "b383c773b96277f162dcf4a498100183adb7ed2a20482ececb7db752e6b27c38"}, "downloads": -1, "filename": "omnivore-1.99.9.tar.gz", "has_sig": false, "md5_digest": "a78d1c0581bb9fe04518520705d804fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2836563, "upload_time": "2020-01-05T18:28:54", "upload_time_iso_8601": "2020-01-05T18:28:54.211007Z", "url": "https://files.pythonhosted.org/packages/b9/8b/00236cd4c85cd0ac6cb36690e91f4806d25ce213fcc8c59b212b56f282b6/omnivore-1.99.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:25 2020"}