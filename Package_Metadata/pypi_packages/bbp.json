{"info": {"author": "Matthew Davis", "author_email": "bbp@mdavis.xyz", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# BBP - Better Boto Paginator\n\nThe [boto3](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html) module has [pagination](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/paginators.html) functionality.\nSo if you're trying to enumerate a long list of resources, the paginator will provides an easier way to fetch chunk after chunk of the resource list, compared to raw `list_` calls.\n\nThe problem with how the module exposes these pages is that you end up with a list of lists.\nFor example, to get a list of all objects within an S3 bucket, you can do:\n\n```\nimport boto3\nclient = boto3.client('s3')\npaginator = client.get_paginator('list_objects_v2')\nobjects = [p['Contents'] for p in paginator.paginate(Bucket='my-bucket')]\n```\n\nThis returns a list of lists of object information.\nDo you remember off the top of your head how to flatten a list of lists into one list?\nI sure don't.\nYes I could have a for loop and append to a list each iteration, but that feels like more effort than should be required.\n\nEven if you're not loading the whole resource list into a list in memory, and are instead processing within a for loop, you end up with a messy nested for loop.\n\n```\nfor page in paginator.paginate(Bucket='my-bucket'):\n    if ['Contents'] in page:\n        for element in page['Contents']:\n             process(element)\n```\n\nI find this a bit awkward. \nWhat I really want is:\n\n```\nfor element in function(Bucket='my-bucket'):\n   process(element)\n```\nWhere `function` is smart enough to either return the next item on the page it already has in memory,\nor fetch the next page with a new API call and return the first item of that.\n\nThis library provides that function.\n\n## Installation\n\n`pip install bbp`\n\n## Usage\n\nHere's an example of how to use it for the [Lambda `ListFunctions` paginator](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda.html#Lambda.Paginator.ListFunctions).\n\n\n```\nfrom wrapper import paginator\nfrom pprint import pprint\nfor lam in paginator('lambda', 'list_functions', 'Functions'):\n    pprint(lam) # process just one element at a time\n```\n\n* `lambda` is what you would pass to `boto3.client()`\n* `list_functions` is what you would pass to `client.get_paginator()`\n* `Functions` is the key within the response to `list_objects_v2` which contains the list of resources for each page.\n  This varies for each type of pagination call. You have to look up [the documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda.html#Lambda.Paginator.ListFunctions).\n  Eventually I'll try to get this tool to lookup/remember that.\n\nHere's another example, using the [S3 `ListObjectsV2` paginator](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Paginator.ListObjectsV2).\nIn this example we need to pass in the bucket name as an extra argument.\nJust specify this as a `name=value` pair at the end of the argument list.\n\n```\nfor obj in paginator('s3', 'list_objects_v2', 'Contents', Bucket='mybucket'):\n    pprint(obj) # process a single resource\n``` \n\n* `s3` is what you would pass to `boto3.client()`\n* `list_objects_v2` is what you would pass to `client.get_paginator()`\n* `Bucket='mybucket'` and any other `name=value` arguments are what get passed to [the paginator](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Paginator.ListObjectsV2).\n\n\n## Packaging\n\nThis is my first ever package on PyPI.\nI used [this guide](https://medium.com/@joel.barmettler/how-to-upload-your-python-package-to-pypi-65edc5fe9c56) to learn how to do this.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.mdavis.xyz/bbp", "keywords": "boto3,boto,AWS,Amazon,paginator,pagination,page,API,cloud", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "bbp", "package_url": "https://pypi.org/project/bbp/", "platform": "", "project_url": "https://pypi.org/project/bbp/", "project_urls": {"Homepage": "https://www.mdavis.xyz/bbp"}, "release_url": "https://pypi.org/project/bbp/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "A wrapper for boto3 paginators to iterate per resource", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BBP - Better Boto Paginator</h1>\n<p>The <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/index.html\" rel=\"nofollow\">boto3</a> module has <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/paginators.html\" rel=\"nofollow\">pagination</a> functionality.\nSo if you're trying to enumerate a long list of resources, the paginator will provides an easier way to fetch chunk after chunk of the resource list, compared to raw <code>list_</code> calls.</p>\n<p>The problem with how the module exposes these pages is that you end up with a list of lists.\nFor example, to get a list of all objects within an S3 bucket, you can do:</p>\n<pre><code>import boto3\nclient = boto3.client('s3')\npaginator = client.get_paginator('list_objects_v2')\nobjects = [p['Contents'] for p in paginator.paginate(Bucket='my-bucket')]\n</code></pre>\n<p>This returns a list of lists of object information.\nDo you remember off the top of your head how to flatten a list of lists into one list?\nI sure don't.\nYes I could have a for loop and append to a list each iteration, but that feels like more effort than should be required.</p>\n<p>Even if you're not loading the whole resource list into a list in memory, and are instead processing within a for loop, you end up with a messy nested for loop.</p>\n<pre><code>for page in paginator.paginate(Bucket='my-bucket'):\n    if ['Contents'] in page:\n        for element in page['Contents']:\n             process(element)\n</code></pre>\n<p>I find this a bit awkward.\nWhat I really want is:</p>\n<pre><code>for element in function(Bucket='my-bucket'):\n   process(element)\n</code></pre>\n<p>Where <code>function</code> is smart enough to either return the next item on the page it already has in memory,\nor fetch the next page with a new API call and return the first item of that.</p>\n<p>This library provides that function.</p>\n<h2>Installation</h2>\n<p><code>pip install bbp</code></p>\n<h2>Usage</h2>\n<p>Here's an example of how to use it for the <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda.html#Lambda.Paginator.ListFunctions\" rel=\"nofollow\">Lambda <code>ListFunctions</code> paginator</a>.</p>\n<pre><code>from wrapper import paginator\nfrom pprint import pprint\nfor lam in paginator('lambda', 'list_functions', 'Functions'):\n    pprint(lam) # process just one element at a time\n</code></pre>\n<ul>\n<li><code>lambda</code> is what you would pass to <code>boto3.client()</code></li>\n<li><code>list_functions</code> is what you would pass to <code>client.get_paginator()</code></li>\n<li><code>Functions</code> is the key within the response to <code>list_objects_v2</code> which contains the list of resources for each page.\nThis varies for each type of pagination call. You have to look up <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lambda.html#Lambda.Paginator.ListFunctions\" rel=\"nofollow\">the documentation</a>.\nEventually I'll try to get this tool to lookup/remember that.</li>\n</ul>\n<p>Here's another example, using the <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Paginator.ListObjectsV2\" rel=\"nofollow\">S3 <code>ListObjectsV2</code> paginator</a>.\nIn this example we need to pass in the bucket name as an extra argument.\nJust specify this as a <code>name=value</code> pair at the end of the argument list.</p>\n<pre><code>for obj in paginator('s3', 'list_objects_v2', 'Contents', Bucket='mybucket'):\n    pprint(obj) # process a single resource\n</code></pre>\n<ul>\n<li><code>s3</code> is what you would pass to <code>boto3.client()</code></li>\n<li><code>list_objects_v2</code> is what you would pass to <code>client.get_paginator()</code></li>\n<li><code>Bucket='mybucket'</code> and any other <code>name=value</code> arguments are what get passed to <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Paginator.ListObjectsV2\" rel=\"nofollow\">the paginator</a>.</li>\n</ul>\n<h2>Packaging</h2>\n<p>This is my first ever package on PyPI.\nI used <a href=\"https://medium.com/@joel.barmettler/how-to-upload-your-python-package-to-pypi-65edc5fe9c56\" rel=\"nofollow\">this guide</a> to learn how to do this.</p>\n\n          </div>"}, "last_serial": 6305852, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3479ce4853783942d6a0b1945001b5d9", "sha256": "e9acc9bf52fcecbac8e187425c5e2ac3961cc168883660bd869a045f4905b9d9"}, "downloads": -1, "filename": "bbp-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3479ce4853783942d6a0b1945001b5d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15522, "upload_time": "2019-12-15T06:22:38", "upload_time_iso_8601": "2019-12-15T06:22:38.255361Z", "url": "https://files.pythonhosted.org/packages/de/24/70f02859df3a9d0275984e55f4db71f92c8a9bcf6a2da6fcf9fb319d761e/bbp-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3db8b24b5410f47699b3a1d4e107ee0e", "sha256": "013f23ef1c7667f7a861bb2283882a00f0263f8288ab027a079c78e8574de548"}, "downloads": -1, "filename": "bbp-0.1.tar.gz", "has_sig": false, "md5_digest": "3db8b24b5410f47699b3a1d4e107ee0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1517, "upload_time": "2019-12-15T06:12:52", "upload_time_iso_8601": "2019-12-15T06:12:52.272054Z", "url": "https://files.pythonhosted.org/packages/97/29/49360de9e3bb539d4a4286e7309c0ab688f62729b8966f59fb221652c686/bbp-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cb05a99c71ff671cc96431a4d85fab27", "sha256": "fc0006ceb92337e9df57382d4db9b90777df4af6ef8e158630a025b718ecdc66"}, "downloads": -1, "filename": "bbp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cb05a99c71ff671cc96431a4d85fab27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3354, "upload_time": "2019-12-15T06:46:51", "upload_time_iso_8601": "2019-12-15T06:46:51.462879Z", "url": "https://files.pythonhosted.org/packages/8e/72/aa2acc235c865bb440fc3e2bbe8dba5438af98c6242caa04b07b682e3393/bbp-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "97801d279e6b2549941fca02fd36fa7c", "sha256": "ca0e5486b85dad438938675accd76852b853a114436bf3f2f3172abadc2e113a"}, "downloads": -1, "filename": "bbp-0.1.2.tar.gz", "has_sig": false, "md5_digest": "97801d279e6b2549941fca02fd36fa7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3353, "upload_time": "2019-12-15T06:49:17", "upload_time_iso_8601": "2019-12-15T06:49:17.502870Z", "url": "https://files.pythonhosted.org/packages/1d/df/0b75f2f39d2de2f7c0a62d54ffa5c5bd54f688fa78786ca56c934f71e78c/bbp-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ba678186e521276696747e4c76f38a18", "sha256": "35f5cef0e7251b508bb11a71077fd56da7319a9ac8b7ac1c4b58ce5f5b9bb738"}, "downloads": -1, "filename": "bbp-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ba678186e521276696747e4c76f38a18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3320, "upload_time": "2019-12-15T06:53:02", "upload_time_iso_8601": "2019-12-15T06:53:02.487743Z", "url": "https://files.pythonhosted.org/packages/05/d5/b34fcb8aab31d7851ed8caae5f9e5ff22fd1499b6684f5b98c54b527c145/bbp-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "4fc8ed48fada3f18a080091ed0531078", "sha256": "2e2b505b9aa30ceb78f7651eabe31977e2a97c1a920dc2177d1d63b3fe565ae1"}, "downloads": -1, "filename": "bbp-0.1.4.tar.gz", "has_sig": false, "md5_digest": "4fc8ed48fada3f18a080091ed0531078", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3372, "upload_time": "2019-12-15T08:04:38", "upload_time_iso_8601": "2019-12-15T08:04:38.619270Z", "url": "https://files.pythonhosted.org/packages/6b/7f/23dc9ad188f5c2a33edee74ffb54610e59c775e73478b03267bcf4d3cb16/bbp-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4fc8ed48fada3f18a080091ed0531078", "sha256": "2e2b505b9aa30ceb78f7651eabe31977e2a97c1a920dc2177d1d63b3fe565ae1"}, "downloads": -1, "filename": "bbp-0.1.4.tar.gz", "has_sig": false, "md5_digest": "4fc8ed48fada3f18a080091ed0531078", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3372, "upload_time": "2019-12-15T08:04:38", "upload_time_iso_8601": "2019-12-15T08:04:38.619270Z", "url": "https://files.pythonhosted.org/packages/6b/7f/23dc9ad188f5c2a33edee74ffb54610e59c775e73478b03267bcf4d3cb16/bbp-0.1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:39 2020"}