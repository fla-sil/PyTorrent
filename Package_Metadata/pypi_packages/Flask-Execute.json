{"info": {"author": "Blake Printy", "author_email": "bprinty@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\n\n|Build status| |Code coverage| |Maintenance yes| |GitHub license| |Documentation Status|\n\n.. |Build status| image:: https://travis-ci.com/bprinty/Flask-Execute.png?branch=master\n   :target: https://travis-ci.com/bprinty/Flask-Execute\n\n.. |Code coverage| image:: https://codecov.io/gh/bprinty/Flask-Execute/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/bprinty/Flask-Execute\n\n.. |Maintenance yes| image:: https://img.shields.io/badge/Maintained%3F-yes-green.svg\n   :target: https://GitHub.com/Naereen/StrapDown.js/graphs/commit-activity\n\n.. |GitHub license| image:: https://img.shields.io/github/license/Naereen/StrapDown.js.svg\n   :target: https://github.com/bprinty/Flask-Execute/blob/master/LICENSE\n\n.. |Documentation Status| image:: https://readthedocs.org/projects/flask-execute/badge/?version=latest\n   :target: http://flask-execute.readthedocs.io/?badge=latest\n\n\n============================\nFlask-Execute\n============================\n\nFlask-Execute is a plugin for simplifying the configuration and management of Celery alongside a Flask application. It also slightly changes the paradigm for registering and dispatching celery tasks, exposing an API similar to the ``concurrent.futures`` API for submitting tasks to a separate executor.\n\nOther features of the plugin include:\n\n* Automatic spin-up of local workers, queues, schedulers, and monitoring tools via configuration.\n* Automatic application context wrapping for celery workers.\n* Simpler API for submitting tasks to workers that doesn't require pre-registration of tasks.\n* Result object API similar to ``concurrent.futures.Future`` API.\n* Flask CLI wrapper around the ``celery`` command that automatically wraps celery commands with an application context.\n\n\nInstallation\n============\n\nTo install the latest stable release via pip, run:\n\n.. code-block:: bash\n\n    $ pip install Flask-Execute\n\n\nAlternatively with easy_install, run:\n\n.. code-block:: bash\n\n    $ easy_install Flask-Execute\n\n\nTo install the bleeding-edge version of the project (not recommended):\n\n.. code-block:: bash\n\n    $ git clone http://github.com/bprinty/Flask-Execute.git\n    $ cd Flask-Execute\n    $ python setup.py install\n\n\nUsage\n=====\n\nTo set up an application with the extension, you can register the application directly:\n\n.. code-block:: python\n\n    from flask import Flask\n    from flask_execute import Celery\n\n    app = Flask(__name__)\n    plugin = Celery(app)\n\n\nOr, via factory pattern:\n\n.. code-block:: python\n\n    celery = Celery()\n    app = Flask(__name__)\n    celery.init_app(app)\n\n\nOnce the plugin has been registered, you can submit a task using:\n\n.. code-block:: python\n\n    def add(x, y):\n      return x + y\n\n    future = celery.submit(add, 1, 2)\n\n    # wait for result (not required)\n    future.result(timeout=1)\n\n    # cancel result\n    future.cancel()\n\n    # add callback function\n    def callback():\n      # do something ...\n      return\n\n    future.add_done_callback(callback)\n\n\nNote that this plugin does not require users to pre-register tasks via the ``@celery.task`` decorator. This enables developers to more easily control whether or not task execution happens within the current session or on a separate worker. It also makes the API similar to the API provided by `Dask <https://docs.dask.org/en/latest/>`_ and `concurrent.futures <https://docs.python.org/3/library/concurrent.futures.html>`_. Also note that the ``celery`` command-line tool for spinning up local workers is no longer necessary. If no workers are connected, this plugin will automatically spin them up the first time a ``celery.submit()`` call is made.\n\nOnce a task as been submitted, you can monitor the state via:\n\n.. code-block:: python\n\n    task_id = future.id\n\n    # later in code\n\n    future = celery.get(task_id)\n    print(future.state)\n\n\nYou can also manage state updates within tasks with a more Flask-y syntax:\n\n.. code-block:: python\n\n  from flask_execute import current_task\n\n  def add(a, b):\n    current_task.update_state(state='PROGRESS')\n    return a + b\n\n\nThis plugin will also manage the process of spinning up local workers bound to your application the first time a ``celery.submit()`` call is made (if configured to do so). Additionally, the plugin will automatically wrap ``celery`` cli calls with your flask application (using the factory method or not), so you can more easily interact with celery:\n\n.. code-block:: bash\n\n    # start local celery cluster with workers, flower monitor, and celerybeat scheduler\n    ~$ flask celery cluster\n\n    # start local worker\n    ~$ flask celery worker\n\n    # check status of running workers\n    ~$ flask celery status\n\n    # shutdown all celery workers\n    ~$ flask celery control shutdown\n\n    # shutdown all celery workers\n    ~$ flask celery control shutdown\n\n\nIf your application uses the factory pattern with a ``create_app`` function for registering blueprints and plugin, you can use the standard ``flask cli`` syntax for automatically wrapping ``celery`` commands with your application context:\n\n.. code-block:: bash\n\n    # check status of running workers\n    ~$ FLASK_APP=app:create_app flask celery status\n\n\nFor more in-depth discussion on design considerations and how to fully utilize the plugin, see the `User Guide <https://Flask-Execute.readthedocs.io/en/latest/usage.html>`_.\n\n\nDocumentation\n=============\n\nFor more detailed documentation, see the `Docs <https://Flask-Execute.readthedocs.io/en/latest/>`_.\n\n\nQuestions/Feedback\n==================\n\nFile an issue in the `GitHub issue tracker <https://github.com/bprinty/Flask-Execute/issues>`_.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bprinty/Flask-Execute", "keywords": "flask-execute,flask,celery,executor,execute,dispatch,dask,distributed,futures,concurrent.futures,remote,executor,flask-celery,task,queue", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Flask-Execute", "package_url": "https://pypi.org/project/Flask-Execute/", "platform": "any", "project_url": "https://pypi.org/project/Flask-Execute/", "project_urls": {"Homepage": "https://github.com/bprinty/Flask-Execute"}, "release_url": "https://pypi.org/project/Flask-Execute/0.1.4/", "requires_dist": ["Flask", "celery", "flower", "redis"], "requires_python": "", "summary": "Simple Celery integration for Flask applications.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/bprinty/Flask-Execute\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a735c315ed8e2100f0acbec2d00eab612482c7b/68747470733a2f2f7472617669732d63692e636f6d2f627072696e74792f466c61736b2d457865637574652e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/bprinty/Flask-Execute\" rel=\"nofollow\"><img alt=\"Code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/661c16082943698a98505a8dee7df91d90ea00de/68747470733a2f2f636f6465636f762e696f2f67682f627072696e74792f466c61736b2d457865637574652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://GitHub.com/Naereen/StrapDown.js/graphs/commit-activity\" rel=\"nofollow\"><img alt=\"Maintenance yes\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90bf1b2a4d99698c4dffbc494b9734690a777fec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d61696e7461696e65642533462d7965732d677265656e2e737667\"></a> <a href=\"https://github.com/bprinty/Flask-Execute/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5430f2fec42899073d5720f6a3dbe4f7297713b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4e61657265656e2f5374726170446f776e2e6a732e737667\"></a> <a href=\"http://flask-execute.readthedocs.io/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/528fbb5ff9ff7c8ebbfa282c41c99d21a2d1614d/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f666c61736b2d657865637574652f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<div id=\"flask-execute\">\n<h2>Flask-Execute</h2>\n<p>Flask-Execute is a plugin for simplifying the configuration and management of Celery alongside a Flask application. It also slightly changes the paradigm for registering and dispatching celery tasks, exposing an API similar to the <tt>concurrent.futures</tt> API for submitting tasks to a separate executor.</p>\n<p>Other features of the plugin include:</p>\n<ul>\n<li>Automatic spin-up of local workers, queues, schedulers, and monitoring tools via configuration.</li>\n<li>Automatic application context wrapping for celery workers.</li>\n<li>Simpler API for submitting tasks to workers that doesn\u2019t require pre-registration of tasks.</li>\n<li>Result object API similar to <tt>concurrent.futures.Future</tt> API.</li>\n<li>Flask CLI wrapper around the <tt>celery</tt> command that automatically wraps celery commands with an application context.</li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install the latest stable release via pip, run:</p>\n<pre>$ pip install Flask-Execute\n</pre>\n<p>Alternatively with easy_install, run:</p>\n<pre>$ easy_install Flask-Execute\n</pre>\n<p>To install the bleeding-edge version of the project (not recommended):</p>\n<pre>$ git clone http://github.com/bprinty/Flask-Execute.git\n$ <span class=\"nb\">cd</span> Flask-Execute\n$ python setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>To set up an application with the extension, you can register the application directly:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_execute</span> <span class=\"kn\">import</span> <span class=\"n\">Celery</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">plugin</span> <span class=\"o\">=</span> <span class=\"n\">Celery</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>Or, via factory pattern:</p>\n<pre><span class=\"n\">celery</span> <span class=\"o\">=</span> <span class=\"n\">Celery</span><span class=\"p\">()</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">celery</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>Once the plugin has been registered, you can submit a task using:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">celery</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># wait for result (not required)</span>\n<span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># cancel result</span>\n<span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># add callback function</span>\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">():</span>\n  <span class=\"c1\"># do something ...</span>\n  <span class=\"k\">return</span>\n\n<span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">add_done_callback</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n</pre>\n<p>Note that this plugin does not require users to pre-register tasks via the <tt>@celery.task</tt> decorator. This enables developers to more easily control whether or not task execution happens within the current session or on a separate worker. It also makes the API similar to the API provided by <a href=\"https://docs.dask.org/en/latest/\" rel=\"nofollow\">Dask</a> and <a href=\"https://docs.python.org/3/library/concurrent.futures.html\" rel=\"nofollow\">concurrent.futures</a>. Also note that the <tt>celery</tt> command-line tool for spinning up local workers is no longer necessary. If no workers are connected, this plugin will automatically spin them up the first time a <tt>celery.submit()</tt> call is made.</p>\n<p>Once a task as been submitted, you can monitor the state via:</p>\n<pre><span class=\"n\">task_id</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">id</span>\n\n<span class=\"c1\"># later in code</span>\n\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">celery</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">task_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"p\">)</span>\n</pre>\n<p>You can also manage state updates within tasks with a more Flask-y syntax:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_execute</span> <span class=\"kn\">import</span> <span class=\"n\">current_task</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n  <span class=\"n\">current_task</span><span class=\"o\">.</span><span class=\"n\">update_state</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"s1\">'PROGRESS'</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre>\n<p>This plugin will also manage the process of spinning up local workers bound to your application the first time a <tt>celery.submit()</tt> call is made (if configured to do so). Additionally, the plugin will automatically wrap <tt>celery</tt> cli calls with your flask application (using the factory method or not), so you can more easily interact with celery:</p>\n<pre><span class=\"c1\"># start local celery cluster with workers, flower monitor, and celerybeat scheduler\n</span>~$ flask celery cluster\n\n<span class=\"c1\"># start local worker\n</span>~$ flask celery worker\n\n<span class=\"c1\"># check status of running workers\n</span>~$ flask celery status\n\n<span class=\"c1\"># shutdown all celery workers\n</span>~$ flask celery control shutdown\n\n<span class=\"c1\"># shutdown all celery workers\n</span>~$ flask celery control shutdown\n</pre>\n<p>If your application uses the factory pattern with a <tt>create_app</tt> function for registering blueprints and plugin, you can use the standard <tt>flask cli</tt> syntax for automatically wrapping <tt>celery</tt> commands with your application context:</p>\n<pre><span class=\"c1\"># check status of running workers\n</span>~$ <span class=\"nv\">FLASK_APP</span><span class=\"o\">=</span>app:create_app flask celery status\n</pre>\n<p>For more in-depth discussion on design considerations and how to fully utilize the plugin, see the <a href=\"https://Flask-Execute.readthedocs.io/en/latest/usage.html\" rel=\"nofollow\">User Guide</a>.</p>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>For more detailed documentation, see the <a href=\"https://Flask-Execute.readthedocs.io/en/latest/\" rel=\"nofollow\">Docs</a>.</p>\n</div>\n<div id=\"questions-feedback\">\n<h3>Questions/Feedback</h3>\n<p>File an issue in the <a href=\"https://github.com/bprinty/Flask-Execute/issues\" rel=\"nofollow\">GitHub issue tracker</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7127762, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e4cb98e88be33a2f1d36ab16650a2338", "sha256": "2ae320082d1135861118a4878397d6b35ebba9baa116546013814bafbc5ce643"}, "downloads": -1, "filename": "Flask_Execute-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e4cb98e88be33a2f1d36ab16650a2338", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19035, "upload_time": "2020-01-18T19:44:30", "upload_time_iso_8601": "2020-01-18T19:44:30.383095Z", "url": "https://files.pythonhosted.org/packages/7c/15/73208b03d1c1a98026811942235c0bf28683936ace592e48b3c9875a32ae/Flask_Execute-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c47e4460bf2eaad964fdd352218f12d", "sha256": "c275a8dace3aa3a4a7741482c69979672d34be3834a3946b9ab1c3e9269f881d"}, "downloads": -1, "filename": "Flask-Execute-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2c47e4460bf2eaad964fdd352218f12d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 338541, "upload_time": "2020-01-18T19:44:33", "upload_time_iso_8601": "2020-01-18T19:44:33.432346Z", "url": "https://files.pythonhosted.org/packages/d6/00/0f460f8f63920a602db3dea0abb02ab3c024eaafaf343cc3bc40681ff025/Flask-Execute-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6529d158148cce022df84fe95d183035", "sha256": "c8b6564a15c20efbe00155bfb14fe21217936cb6ef66d1030807e007245b90ce"}, "downloads": -1, "filename": "Flask_Execute-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6529d158148cce022df84fe95d183035", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19314, "upload_time": "2020-01-19T12:33:48", "upload_time_iso_8601": "2020-01-19T12:33:48.470711Z", "url": "https://files.pythonhosted.org/packages/05/3e/c11951f9dae94630323043e7178a8e9cf376d943965cae75d05be0a71c45/Flask_Execute-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e2c9ac99691a5b43958c15a1633f555", "sha256": "a0d1b0b2ad57c5d23b43cda4dffc6373f9f47b08470cf0478b883532de15faad"}, "downloads": -1, "filename": "Flask-Execute-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9e2c9ac99691a5b43958c15a1633f555", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 337432, "upload_time": "2020-01-19T12:33:50", "upload_time_iso_8601": "2020-01-19T12:33:50.569439Z", "url": "https://files.pythonhosted.org/packages/e6/2a/ea2b475830d4a872dd7db42462b4a155a68fedadf8aa2000d423f013b99d/Flask-Execute-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c49132ceaeea6e1fa7e39e40fe8e02e5", "sha256": "447551c66517bf7face017d62c04e673e52d76ac630850f2e8d5e531c35debe4"}, "downloads": -1, "filename": "Flask_Execute-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c49132ceaeea6e1fa7e39e40fe8e02e5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19349, "upload_time": "2020-01-19T12:47:51", "upload_time_iso_8601": "2020-01-19T12:47:51.151016Z", "url": "https://files.pythonhosted.org/packages/91/6b/f72cc752031e41309745c01325c670a4e0c866c7a2c4ecfa31ca5fb531e3/Flask_Execute-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41e58ec106aa0a462ee65fdd041892a9", "sha256": "c1df799d697bc7ddb6d10d623d9fa9be43f6ba04c13eabf44abb1e96827e17c8"}, "downloads": -1, "filename": "Flask-Execute-0.1.2.tar.gz", "has_sig": false, "md5_digest": "41e58ec106aa0a462ee65fdd041892a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 337461, "upload_time": "2020-01-19T12:47:53", "upload_time_iso_8601": "2020-01-19T12:47:53.421271Z", "url": "https://files.pythonhosted.org/packages/71/11/3045b4d16649979f5fdbc5c90cf2e5205e0a9799a858a4a7037bc2f6cdb8/Flask-Execute-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d8fa6250827df0147291e5c83cc74f48", "sha256": "743b1b1f0c09554583318ee3ae9345e41f08bdbd678b02d47c79e283aa9b4387"}, "downloads": -1, "filename": "Flask_Execute-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d8fa6250827df0147291e5c83cc74f48", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19351, "upload_time": "2020-01-22T02:15:04", "upload_time_iso_8601": "2020-01-22T02:15:04.570327Z", "url": "https://files.pythonhosted.org/packages/d7/08/147ae1d522d6216229e07552d588ce4dc3f75b2d2abbf5d4ddf5ff950b19/Flask_Execute-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63118debbd312f8e310c7090d49e67cb", "sha256": "b7a6fbf5c8900e58d31398b08e3404f8944d23083b6ac342724cf88ae6aa54e7"}, "downloads": -1, "filename": "Flask-Execute-0.1.3.tar.gz", "has_sig": false, "md5_digest": "63118debbd312f8e310c7090d49e67cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 337432, "upload_time": "2020-01-22T02:15:06", "upload_time_iso_8601": "2020-01-22T02:15:06.342778Z", "url": "https://files.pythonhosted.org/packages/d7/56/f29dd3c5e54720710441d1f17f5b84315aa6ddfe1689435b7db2326839ef/Flask-Execute-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "3b95b98ea7694d00b404f1e998978f92", "sha256": "b8f9145609fed453201cf9c22e74b5fce75090ffbb6f720cf7d3b8e7f7f055ea"}, "downloads": -1, "filename": "Flask_Execute-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3b95b98ea7694d00b404f1e998978f92", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19387, "upload_time": "2020-04-29T10:35:45", "upload_time_iso_8601": "2020-04-29T10:35:45.897549Z", "url": "https://files.pythonhosted.org/packages/1d/36/8b9ee38826f208e64b5c1a3d351cd48b8385ba01e6069925b76e11a55a85/Flask_Execute-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33076b1bea3957ddc0bf7fd5732999d9", "sha256": "5bf2991889e3813f89ddc8736d1c4f1564cbf30b00e37ff5007b388b03fbe113"}, "downloads": -1, "filename": "Flask-Execute-0.1.4.tar.gz", "has_sig": false, "md5_digest": "33076b1bea3957ddc0bf7fd5732999d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 337572, "upload_time": "2020-04-29T10:35:47", "upload_time_iso_8601": "2020-04-29T10:35:47.856965Z", "url": "https://files.pythonhosted.org/packages/2b/a0/7dc51f8ab0b7e705337e09aa9f1fdb497979237cbd2050a1bf85ace5edda/Flask-Execute-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b95b98ea7694d00b404f1e998978f92", "sha256": "b8f9145609fed453201cf9c22e74b5fce75090ffbb6f720cf7d3b8e7f7f055ea"}, "downloads": -1, "filename": "Flask_Execute-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3b95b98ea7694d00b404f1e998978f92", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19387, "upload_time": "2020-04-29T10:35:45", "upload_time_iso_8601": "2020-04-29T10:35:45.897549Z", "url": "https://files.pythonhosted.org/packages/1d/36/8b9ee38826f208e64b5c1a3d351cd48b8385ba01e6069925b76e11a55a85/Flask_Execute-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33076b1bea3957ddc0bf7fd5732999d9", "sha256": "5bf2991889e3813f89ddc8736d1c4f1564cbf30b00e37ff5007b388b03fbe113"}, "downloads": -1, "filename": "Flask-Execute-0.1.4.tar.gz", "has_sig": false, "md5_digest": "33076b1bea3957ddc0bf7fd5732999d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 337572, "upload_time": "2020-04-29T10:35:47", "upload_time_iso_8601": "2020-04-29T10:35:47.856965Z", "url": "https://files.pythonhosted.org/packages/2b/a0/7dc51f8ab0b7e705337e09aa9f1fdb497979237cbd2050a1bf85ace5edda/Flask-Execute-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:54 2020"}