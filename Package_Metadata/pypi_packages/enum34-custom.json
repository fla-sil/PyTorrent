{"info": {"author": "Kiss Gy\u00f6rgy", "author_email": "kissgyorgy@me.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4"], "description": "enum34-custom\n=============\n\n|travis| |coveralls| |release| |downloads| |pythons| |license|\n\nWhat\n----\n\nCustom Enum classes for the Python 3.4 enum module.\n\n\nInstall\n-------\n\n.. code-block:: bash\n\n   $ pip install enum34-custom\n\n\nUsage\n-----\n\nMultiValueEnum\n^^^^^^^^^^^^^^\n\nEnum subclass where a member can be any iterable (even a generator, except str).\nYou can reference a member by any of its element in the associated iterable.\nIt might be usable for e.g. Equivalence Class Partitioning (ECP/EC testing).\n\n\n.. code-block:: python\n\n   from enum_custom import MultiValueEnum\n\n   class Suit(MultiValueEnum):\n       CLUBS =    '\u2663', 'c', 'C'\n       DIAMONDS = '\u2666', 'd', 'D'\n       HEARTS =   '\u2665', 'h', 'H'\n       SPADES =   '\u2660', 's', 'S'\n\n   >>> print(Suit.CLUBS)\n   Suit.CLUBS\n\n   >>> Suit.CLUBS\n   <Suit.CLUBS: ('\u2663', 'c', 'C')>\n\n   >>> Suit('c')\n   <Suit.CLUBS: ('\u2663', 'c', 'C')>\n\n   >>> Suit('c') is Suit('C') is Suit('\u2663') is Suit.CLUBS\n   True\n\n   >>> import pickle\n   >>> pickle.loads(pickle.dumps(Suit('c'))) is Suit('\u2663')\n   True\n\n   >>> Suit('L')\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"/Users/walkman/Projects/enum34-custom/enum_custom.py\", line 19, in __call__\n       return super().__call__(suit)\n     File \"/usr/local/Cellar/python3/3.4.1/Frameworks/Python.framework/Versions/3.4/lib/python3.4/enum.py\", line 222, in __call__\n       return cls.__new__(cls, value)\n     File \"/usr/local/Cellar/python3/3.4.1/Frameworks/Python.framework/Versions/3.4/lib/python3.4/enum.py\", line 457, in __new__\n       raise ValueError(\"%s is not a valid %s\" % (value, cls.__name__))\n   ValueError: L is not a valid Suit\n\n   >>> list(Suit)\n   [<Suit.CLUBS: ('\u2663', 'c', 'C')>,\n    <Suit.DIAMONDS: ('\u2666', 'd', 'D')>,\n    <Suit.HEARTS: ('\u2665', 'h', 'H')>,\n    <Suit.SPADES: ('\u2660', 's', 'S')>]\n\n\n.. warning::\n\n   You need to keep a couple of things in mind when using MultiValueEnum:\n\n\n* Generators will immediately be exhausted at class creation time!\n* To conform to the standard library behavior, overlapping iterables are\n  considered aliases, and works the same way as in stdlib\n  (lookup will match the first declared element):\n\n  .. code-block:: python\n\n     >>> class MyOverLappingMVE(MultiValueEnum):\n     ...     A = (0, 1, 2, 3, 4)\n     ...     B = (4, 5, 6, 7, 8)\n     >>> MyOverLappingMVE(4)\n     <MyOverLappingMVE.A: (0, 1, 2, 3, 4)>\n\n  If you want to make sure, no overlapping elements are present between members,\n  you can use the no_overlap decorator:\n\n  .. code-block:: python\n\n     >>> from enum_custom import MultiValueEnum, no_overlap\n\n     >>> @no_overlap\n     ... class NoOverLappingEnum(MultiValueEnum):\n     ...     A = (1, 2, 3)\n     ...     B = (3, 4, 5)\n     ...\n     /Users/walkman/Projects/enum34-custom/enum_custom.py in no_overlap(multienum)\n          55                                   (alias, name, intersection) in duplicates])\n          56         raise ValueError('common element found in {!r}: {}'\n     ---> 57                          .format(multienum, alias_details))\n          58     return multienum\n          59\n\n     ValueError: common element found in <enum 'NoOverLappingEnum'>: B & A -> {3}\n\n* Beware with storing lots of data, every value will stored twice\n  (MultiValueEnum stores values internally in a set for faster lookups)\n* If you declare a dict as a value, keys will be looked up (as expected)\n\n\nCaseInsensitiveMultiValueEnum\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis works the same way as MultiValueEnum except if a member's value contains\na str, those will be compared in a case-insensitive member.\n\nConsider the following example:\n\n.. code-block:: python\n\n   class SimpleMultiValueEnum(MultiValueEnum):\n       one = 1, 'one'\n       two = 2, 'two'\n\n   >>> SimpleMultiValueEnum('One')\n   /usr/local/Cellar/python3/3.4.1_1/Frameworks/Python.framework/Versions/3.4/lib/python3.4/enum.py in __new__(cls, value)\n       455                 if member.value == value:\n       456                     return member\n   --> 457         raise ValueError(\"%s is not a valid %s\" % (value, cls.__name__))\n       458\n       459     def __repr__(self):\n\n   ValueError: One is not a valid SimpleMultiValueEnum\n\nWhile:\n\n.. code-block:: python\n\n   class CaseInsensitiveMVE(CaseInsensitiveMultiValueEnum):\n       one = 1, 'one'\n       two = 2, 'two'\n\n   >>> CaseInsensitiveMVE('One')\n   <CaseInsensitiveMVE.one: (1, 'one')>\n\n\nStrEnum\n^^^^^^^\n\nMembers of this enum are also instances of str and directly comparable to strings.\nstr type is forced at declaration. Works the same way as described in Python\nEnum documentation, except for checking type.\n\n.. warning::\n\n   It's not possible to use StrEnum with OrderableMixin, because the members of\n   StrEnum are also instances of str and ordering members will happen beased on\n   str ordering (e.g. '1' < '2', 'A' < 'B', etc.)\n   If you want ordering by declaration, use OrderableMixin without typed\n   subclass.\n\n\nCaseInsensitiveStrEnum\n^^^^^^^^^^^^^^^^^^^^^^\n\nSame as StrEnum, but members stored as uppercase, and comparing to them is\ncase insensitive also:\n\n.. code-block:: python\n\n   from enum_custom import CaseInsensitiveStrEnum\n   class MyCaseInsensitiveStrEnum(CaseInsensitiveStrEnum):\n       one = 'a'\n       two = 'b'\n\n   >>> MyCaseInsensitiveStrEnum('a') == 'A'\n   True\n   >>> MyCaseInsensitiveStrEnum.one == 'a'\n   True\n\n\nTesting\n-------\n\n.. code-block:: bash\n\n   $ python setup.py test\n\n\nOr install package in development mode and test with py.test::\n\n   $ pip install -e .\n   $ py.test\n\n\nDifferences between Python 2 and 3\n----------------------------------\n\nThere are differences in how Python 2 and 3 creates classes, there are a couple of\nthings that doesn't work very well on 2, which you should be aware:\n\n- xrange(5) != xrange(5)\n  This is the opposit in Python 3, because range(5) == range(5), however you can use\n  range(5) == range(5) in Python 2 in this case.\n- Python 2 have no definition order of members. This means you *have to* manually define\n  __order__ attribute to be able to compare members by definition order (e.g. with\n  OrderableMixin). See the details in `enum34 package dokumentation`_:\n- str vs unicode: This library doesn't mix and match str types either in Python2\n  it uses unicode in Python2 and str in Python3 and also enforces the type in\n  StrEnum, CaseInsensitiveStrEnum and ckeck for text type only in\n  CaseInsensitiveMultiValueEnum. (So if you pass str in Python2, it will not be case\n  insensitive!)\n- Python 2 leaks variables from list comprehensions, so if you define your class\n  like this:\n- On pypy you always have to set __order__ because if you use different types, because\n  it would sort the member values, but can't compare set to other type.\n\n  .. code-block:: python\n\n     class MyList(MultiValueEnum):\n         A = [n for n in range(5)]\n\n  MyList will have 'MyList.n' also!!!\n\n\nChanges\n-------\n\nv0.7.0\n^^^^^^\n\n- Python 2.7 support\n- Renamed module to enum_custom for consistency (enum34 package is called enum also).\n\n\n\n.. _enum34 package dokumentation: https://pypi.python.org/pypi/enum34\n\n.. |travis| image:: https://travis-ci.org/kissgyorgy/enum34-custom.svg?branch=master\n   :target: https://travis-ci.org/kissgyorgy/enum34-custom\n\n.. |coveralls| image:: https://coveralls.io/repos/github/kissgyorgy/enum34-custom/badge.svg?branch=master\n   :target: https://coveralls.io/github/kissgyorgy/enum34-custom?branch=master\n\n.. |pythons| image:: https://img.shields.io/pypi/pyversions/enum34-custom.svg\n   :target: https://pypi.python.org/pypi/enum34-custom/\n   :alt: Supported Python versions\n\n.. |release| image:: https://img.shields.io/pypi/v/enum34-custom.svg\n   :target: https://pypi.python.org/pypi/enum34-custom/\n   :alt: Latest Version\n\n.. |license| image:: https://img.shields.io/badge/license-MIT-blue.svg\n   :target: https://github.com/kissgyorgy/enum34-custom/blob/master/LICENSE\n   :alt: MIT License\n\n.. |downloads| image:: https://img.shields.io/pypi/dm/enum34-custom.svg\n   :target: https://pypi.python.org/pypi/enum34-custom/\n   :alt: Downloads", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kissgyorgy/enum34-custom", "keywords": "enum", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "enum34-custom", "package_url": "https://pypi.org/project/enum34-custom/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/enum34-custom/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kissgyorgy/enum34-custom"}, "release_url": "https://pypi.org/project/enum34-custom/0.7.2/", "requires_dist": null, "requires_python": null, "summary": "Custom Enum classes for enum in Python 3.4 or for enum34 for Python2.7", "version": "0.7.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/kissgyorgy/enum34-custom\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1bd9e71917ee85842bfc19c461fc67833190da9/68747470733a2f2f7472617669732d63692e6f72672f6b69737367796f7267792f656e756d33342d637573746f6d2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/kissgyorgy/enum34-custom?branch=master\" rel=\"nofollow\"><img alt=\"coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c920cf150fe6858adbbf321016cecd061b75b87f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b69737367796f7267792f656e756d33342d637573746f6d2f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/enum34-custom/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b718dceea70489980b84fef2ca231a12e0640c31/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f656e756d33342d637573746f6d2e737667\"></a> <a href=\"https://pypi.python.org/pypi/enum34-custom/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96bec5a200220b87125a18a10149b9d8257764b4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f656e756d33342d637573746f6d2e737667\"></a> <a href=\"https://pypi.python.org/pypi/enum34-custom/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/268af0289893ed774c51a2fc8f9a77add328cf12/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f656e756d33342d637573746f6d2e737667\"></a> <a href=\"https://github.com/kissgyorgy/enum34-custom/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a></p>\n<div id=\"what\">\n<h2>What</h2>\n<p>Custom Enum classes for the Python 3.4 enum module.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>$ pip install enum34-custom\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"multivalueenum\">\n<h3>MultiValueEnum</h3>\n<p>Enum subclass where a member can be any iterable (even a generator, except str).\nYou can reference a member by any of its element in the associated iterable.\nIt might be usable for e.g. Equivalence Class Partitioning (ECP/EC testing).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">enum_custom</span> <span class=\"kn\">import</span> <span class=\"n\">MultiValueEnum</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Suit</span><span class=\"p\">(</span><span class=\"n\">MultiValueEnum</span><span class=\"p\">):</span>\n    <span class=\"n\">CLUBS</span> <span class=\"o\">=</span>    <span class=\"s1\">'\u2663'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span>\n    <span class=\"n\">DIAMONDS</span> <span class=\"o\">=</span> <span class=\"s1\">'\u2666'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span>\n    <span class=\"n\">HEARTS</span> <span class=\"o\">=</span>   <span class=\"s1\">'\u2665'</span><span class=\"p\">,</span> <span class=\"s1\">'h'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span>\n    <span class=\"n\">SPADES</span> <span class=\"o\">=</span>   <span class=\"s1\">'\u2660'</span><span class=\"p\">,</span> <span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"s1\">'S'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Suit</span><span class=\"o\">.</span><span class=\"n\">CLUBS</span><span class=\"p\">)</span>\n<span class=\"n\">Suit</span><span class=\"o\">.</span><span class=\"n\">CLUBS</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Suit</span><span class=\"o\">.</span><span class=\"n\">CLUBS</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Suit</span><span class=\"o\">.</span><span class=\"n\">CLUBS</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'\u2663'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Suit</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Suit</span><span class=\"o\">.</span><span class=\"n\">CLUBS</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'\u2663'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Suit</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">Suit</span><span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">Suit</span><span class=\"p\">(</span><span class=\"s1\">'\u2663'</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">Suit</span><span class=\"o\">.</span><span class=\"n\">CLUBS</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">Suit</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">)))</span> <span class=\"ow\">is</span> <span class=\"n\">Suit</span><span class=\"p\">(</span><span class=\"s1\">'\u2663'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Suit</span><span class=\"p\">(</span><span class=\"s1\">'L'</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/Users/walkman/Projects/enum34-custom/enum_custom.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__call__</span>\n    <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"n\">suit</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/usr/local/Cellar/python3/3.4.1/Frameworks/Python.framework/Versions/3.4/lib/python3.4/enum.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">222</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__call__</span>\n    <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/usr/local/Cellar/python3/3.4.1/Frameworks/Python.framework/Versions/3.4/lib/python3.4/enum.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">457</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__new__</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> is not a valid </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">))</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">L</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"n\">Suit</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Suit</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Suit</span><span class=\"o\">.</span><span class=\"n\">CLUBS</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'\u2663'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">Suit</span><span class=\"o\">.</span><span class=\"n\">DIAMONDS</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'\u2666'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">Suit</span><span class=\"o\">.</span><span class=\"n\">HEARTS</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'\u2665'</span><span class=\"p\">,</span> <span class=\"s1\">'h'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">Suit</span><span class=\"o\">.</span><span class=\"n\">SPADES</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'\u2660'</span><span class=\"p\">,</span> <span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"s1\">'S'</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<div>\n<p>Warning</p>\n<p>You need to keep a couple of things in mind when using MultiValueEnum:</p>\n</div>\n<ul>\n<li><p>Generators will immediately be exhausted at class creation time!</p>\n</li>\n<li><p>To conform to the standard library behavior, overlapping iterables are\nconsidered aliases, and works the same way as in stdlib\n(lookup will match the first declared element):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyOverLappingMVE</span><span class=\"p\">(</span><span class=\"n\">MultiValueEnum</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyOverLappingMVE</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">MyOverLappingMVE</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n</pre>\n<p>If you want to make sure, no overlapping elements are present between members,\nyou can use the no_overlap decorator:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">enum_custom</span> <span class=\"kn\">import</span> <span class=\"n\">MultiValueEnum</span><span class=\"p\">,</span> <span class=\"n\">no_overlap</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@no_overlap</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">NoOverLappingEnum</span><span class=\"p\">(</span><span class=\"n\">MultiValueEnum</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">walkman</span><span class=\"o\">/</span><span class=\"n\">Projects</span><span class=\"o\">/</span><span class=\"n\">enum34</span><span class=\"o\">-</span><span class=\"n\">custom</span><span class=\"o\">/</span><span class=\"n\">enum_custom</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"n\">no_overlap</span><span class=\"p\">(</span><span class=\"n\">multienum</span><span class=\"p\">)</span>\n     <span class=\"mi\">55</span>                                   <span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">intersection</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">duplicates</span><span class=\"p\">])</span>\n     <span class=\"mi\">56</span>         <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'common element found in </span><span class=\"si\">{!r}</span><span class=\"s1\">: </span><span class=\"si\">{}</span><span class=\"s1\">'</span>\n<span class=\"o\">---&gt;</span> <span class=\"mi\">57</span>                          <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">multienum</span><span class=\"p\">,</span> <span class=\"n\">alias_details</span><span class=\"p\">))</span>\n     <span class=\"mi\">58</span>     <span class=\"k\">return</span> <span class=\"n\">multienum</span>\n     <span class=\"mi\">59</span>\n\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">common</span> <span class=\"n\">element</span> <span class=\"n\">found</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">enum</span> <span class=\"s1\">'NoOverLappingEnum'</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"n\">B</span> <span class=\"o\">&amp;</span> <span class=\"n\">A</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">}</span>\n</pre>\n</li>\n<li><p>Beware with storing lots of data, every value will stored twice\n(MultiValueEnum stores values internally in a set for faster lookups)</p>\n</li>\n<li><p>If you declare a dict as a value, keys will be looked up (as expected)</p>\n</li>\n</ul>\n</div>\n<div id=\"caseinsensitivemultivalueenum\">\n<h3>CaseInsensitiveMultiValueEnum</h3>\n<p>This works the same way as MultiValueEnum except if a member\u2019s value contains\na str, those will be compared in a case-insensitive member.</p>\n<p>Consider the following example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SimpleMultiValueEnum</span><span class=\"p\">(</span><span class=\"n\">MultiValueEnum</span><span class=\"p\">):</span>\n    <span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'one'</span>\n    <span class=\"n\">two</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'two'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">SimpleMultiValueEnum</span><span class=\"p\">(</span><span class=\"s1\">'One'</span><span class=\"p\">)</span>\n<span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">Cellar</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">/</span><span class=\"mf\">3.4</span><span class=\"o\">.</span><span class=\"mi\">1_1</span><span class=\"o\">/</span><span class=\"n\">Frameworks</span><span class=\"o\">/</span><span class=\"n\">Python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">/</span><span class=\"n\">Versions</span><span class=\"o\">/</span><span class=\"mf\">3.4</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python3</span><span class=\"o\">.</span><span class=\"mi\">4</span><span class=\"o\">/</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"ow\">in</span> <span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"mi\">455</span>                 <span class=\"k\">if</span> <span class=\"n\">member</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n    <span class=\"mi\">456</span>                     <span class=\"k\">return</span> <span class=\"n\">member</span>\n<span class=\"o\">--&gt;</span> <span class=\"mi\">457</span>         <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> is not a valid </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">))</span>\n    <span class=\"mi\">458</span>\n    <span class=\"mi\">459</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">One</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"n\">SimpleMultiValueEnum</span>\n</pre>\n<p>While:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CaseInsensitiveMVE</span><span class=\"p\">(</span><span class=\"n\">CaseInsensitiveMultiValueEnum</span><span class=\"p\">):</span>\n    <span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'one'</span>\n    <span class=\"n\">two</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'two'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">CaseInsensitiveMVE</span><span class=\"p\">(</span><span class=\"s1\">'One'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">CaseInsensitiveMVE</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'one'</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n</pre>\n</div>\n<div id=\"strenum\">\n<h3>StrEnum</h3>\n<p>Members of this enum are also instances of str and directly comparable to strings.\nstr type is forced at declaration. Works the same way as described in Python\nEnum documentation, except for checking type.</p>\n<div>\n<p>Warning</p>\n<p>It\u2019s not possible to use StrEnum with OrderableMixin, because the members of\nStrEnum are also instances of str and ordering members will happen beased on\nstr ordering (e.g. \u20181\u2019 &lt; \u20182\u2019, \u2018A\u2019 &lt; \u2018B\u2019, etc.)\nIf you want ordering by declaration, use OrderableMixin without typed\nsubclass.</p>\n</div>\n</div>\n<div id=\"caseinsensitivestrenum\">\n<h3>CaseInsensitiveStrEnum</h3>\n<p>Same as StrEnum, but members stored as uppercase, and comparing to them is\ncase insensitive also:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">enum_custom</span> <span class=\"kn\">import</span> <span class=\"n\">CaseInsensitiveStrEnum</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyCaseInsensitiveStrEnum</span><span class=\"p\">(</span><span class=\"n\">CaseInsensitiveStrEnum</span><span class=\"p\">):</span>\n    <span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"s1\">'a'</span>\n    <span class=\"n\">two</span> <span class=\"o\">=</span> <span class=\"s1\">'b'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyCaseInsensitiveStrEnum</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'A'</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyCaseInsensitiveStrEnum</span><span class=\"o\">.</span><span class=\"n\">one</span> <span class=\"o\">==</span> <span class=\"s1\">'a'</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<pre>$ python setup.py <span class=\"nb\">test</span>\n</pre>\n<p>Or install package in development mode and test with py.test:</p>\n<pre>$ pip install -e .\n$ py.test\n</pre>\n</div>\n<div id=\"differences-between-python-2-and-3\">\n<h2>Differences between Python 2 and 3</h2>\n<p>There are differences in how Python 2 and 3 creates classes, there are a couple of\nthings that doesn\u2019t work very well on 2, which you should be aware:</p>\n<ul>\n<li><p>xrange(5) != xrange(5)\nThis is the opposit in Python 3, because range(5) == range(5), however you can use\nrange(5) == range(5) in Python 2 in this case.</p>\n</li>\n<li><p>Python 2 have no definition order of members. This means you <em>have to</em> manually define\n__order__ attribute to be able to compare members by definition order (e.g. with\nOrderableMixin). See the details in <a href=\"https://pypi.python.org/pypi/enum34\" rel=\"nofollow\">enum34 package dokumentation</a>:</p>\n</li>\n<li><p>str vs unicode: This library doesn\u2019t mix and match str types either in Python2\nit uses unicode in Python2 and str in Python3 and also enforces the type in\nStrEnum, CaseInsensitiveStrEnum and ckeck for text type only in\nCaseInsensitiveMultiValueEnum. (So if you pass str in Python2, it will not be case\ninsensitive!)</p>\n</li>\n<li><p>Python 2 leaks variables from list comprehensions, so if you define your class\nlike this:</p>\n</li>\n<li><p>On pypy you always have to set __order__ because if you use different types, because\nit would sort the member values, but can\u2019t compare set to other type.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyList</span><span class=\"p\">(</span><span class=\"n\">MultiValueEnum</span><span class=\"p\">):</span>\n    <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)]</span>\n</pre>\n<p>MyList will have \u2018MyList.n\u2019 also!!!</p>\n</li>\n</ul>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<h2 id=\"v0-7-0\"><span class=\"section-subtitle\">v0.7.0</span></h2>\n<ul>\n<li>Python 2.7 support</li>\n<li>Renamed module to enum_custom for consistency (enum34 package is called enum also).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3808069, "releases": {"0.6.5": [{"comment_text": "", "digests": {"md5": "196a0cc3c57a6777d54e3c225d21f692", "sha256": "93ff632f5213914549591dabf14fbec884fc639049dd9049fab5866ec76b4ca4"}, "downloads": -1, "filename": "enum34_custom-0.6.5-py3-none-any.whl", "has_sig": false, "md5_digest": "196a0cc3c57a6777d54e3c225d21f692", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 8616, "upload_time": "2014-09-08T19:48:20", "upload_time_iso_8601": "2014-09-08T19:48:20.763608Z", "url": "https://files.pythonhosted.org/packages/a4/9f/222637397c638dd00fc29bd73a1f6adc2c8dd5037518fa0cb3f7afa0746d/enum34_custom-0.6.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0b8887ad6c93667587596b8b9379d36", "sha256": "6ecb401bb19ef74431b7319b4e9e76327ab23837af1f843530fefd6051686e04"}, "downloads": -1, "filename": "enum34-custom-0.6.5.tar.gz", "has_sig": false, "md5_digest": "f0b8887ad6c93667587596b8b9379d36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5549, "upload_time": "2014-09-08T19:48:18", "upload_time_iso_8601": "2014-09-08T19:48:18.369070Z", "url": "https://files.pythonhosted.org/packages/31/b0/5dfe0395d3624cdd9492c168a3ab42a4eddea3da17cb7fc59eb1ea8fb251/enum34-custom-0.6.5.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "18b2b3e155b563ca40f9f4dfd81b85c4", "sha256": "897541f61fe37bf55a4e5b59389c9ff0801fc6326293df1f9fae72bc5c914670"}, "downloads": -1, "filename": "enum34_custom-0.7.1-py2-none-any.whl", "has_sig": false, "md5_digest": "18b2b3e155b563ca40f9f4dfd81b85c4", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9829, "upload_time": "2014-09-26T19:30:43", "upload_time_iso_8601": "2014-09-26T19:30:43.581513Z", "url": "https://files.pythonhosted.org/packages/dc/86/2bda1569aa9c8f2bf4206c4d6aeef9c549cc4fa45ce02ad0572326657576/enum34_custom-0.7.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e81ca8efacd2eb786524599c4872953e", "sha256": "7bd8f34f12fbd9521cbf37b6cec6b28c6645f6ddc822f5cfc5c0aad2aac20c30"}, "downloads": -1, "filename": "enum34_custom-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e81ca8efacd2eb786524599c4872953e", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 9821, "upload_time": "2014-09-26T19:31:04", "upload_time_iso_8601": "2014-09-26T19:31:04.646894Z", "url": "https://files.pythonhosted.org/packages/bc/be/7c7d77bb8cf5a056547f69d98d32fe112a39709e7fe97f8046f4895200e3/enum34_custom-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e218bb86e541f441018665d0ac9cdf04", "sha256": "d2ae06f88442ce16b29f28bd9223ea7efb7ebe9497885796c307ef412c1bee9d"}, "downloads": -1, "filename": "enum34-custom-0.7.1.tar.gz", "has_sig": false, "md5_digest": "e218bb86e541f441018665d0ac9cdf04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6309, "upload_time": "2014-09-26T19:30:40", "upload_time_iso_8601": "2014-09-26T19:30:40.870842Z", "url": "https://files.pythonhosted.org/packages/83/ad/bb2b8a323caae1eb69ddfb679155181aa4d1863efd0da4bc836518ff7e43/enum34-custom-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "2815c80d6023f447c63bc08790fef48e", "sha256": "da38e15132fa87a588493b85310d2b8802fd7ffe1990851048628d5ccd3cfd05"}, "downloads": -1, "filename": "enum34_custom-0.7.2-py2-none-any.whl", "has_sig": false, "md5_digest": "2815c80d6023f447c63bc08790fef48e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9798, "upload_time": "2016-09-18T15:24:06", "upload_time_iso_8601": "2016-09-18T15:24:06.963260Z", "url": "https://files.pythonhosted.org/packages/4c/4c/9baa3b3c905cde93ab802e2f1a569860bfb8406b6285e511e9d0e1a8a7e9/enum34_custom-0.7.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f211a3f84dbdf34ba4fd93d5a3523c1b", "sha256": "6cecbf087e9ff6507b742329793c4f81dbdb8ae771a5945f36a51c12c329757e"}, "downloads": -1, "filename": "enum34-custom-0.7.2.tar.gz", "has_sig": false, "md5_digest": "f211a3f84dbdf34ba4fd93d5a3523c1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6265, "upload_time": "2016-09-18T15:24:03", "upload_time_iso_8601": "2016-09-18T15:24:03.816395Z", "url": "https://files.pythonhosted.org/packages/08/af/da9bb347826b870dc5484e86037dc6f92f53ed248049efcc44033052982d/enum34-custom-0.7.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2815c80d6023f447c63bc08790fef48e", "sha256": "da38e15132fa87a588493b85310d2b8802fd7ffe1990851048628d5ccd3cfd05"}, "downloads": -1, "filename": "enum34_custom-0.7.2-py2-none-any.whl", "has_sig": false, "md5_digest": "2815c80d6023f447c63bc08790fef48e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9798, "upload_time": "2016-09-18T15:24:06", "upload_time_iso_8601": "2016-09-18T15:24:06.963260Z", "url": "https://files.pythonhosted.org/packages/4c/4c/9baa3b3c905cde93ab802e2f1a569860bfb8406b6285e511e9d0e1a8a7e9/enum34_custom-0.7.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f211a3f84dbdf34ba4fd93d5a3523c1b", "sha256": "6cecbf087e9ff6507b742329793c4f81dbdb8ae771a5945f36a51c12c329757e"}, "downloads": -1, "filename": "enum34-custom-0.7.2.tar.gz", "has_sig": false, "md5_digest": "f211a3f84dbdf34ba4fd93d5a3523c1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6265, "upload_time": "2016-09-18T15:24:03", "upload_time_iso_8601": "2016-09-18T15:24:03.816395Z", "url": "https://files.pythonhosted.org/packages/08/af/da9bb347826b870dc5484e86037dc6f92f53ed248049efcc44033052982d/enum34-custom-0.7.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:12 2020"}