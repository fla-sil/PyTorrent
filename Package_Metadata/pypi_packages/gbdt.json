{"info": {"author": "Jiang Chen", "author_email": "criver@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: C++", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "GBDT is a high performance and full featured C++ implementation of [Jerome H. Friedman's Gradient Boosting Decision Trees Algorithm](http://statweb.stanford.edu/~jhf/ftp/stobst.pdf) and its modern offsprings,. It features high efficiency, low memory footprint, collections of loss functions and built-in mechanisms to handle categorical features and missing values.\n\nWhen is GBDT good for you?\n-----------\n* **You are looking beyond linear models.**\n  * Gradient Boosting Decision Trees Algorithms is one of the best offshelf ML algorithms with built-in capabilities of non-linear transformation and feature crossing.\n* **Your data is too big to load into memory with existing ML packages.**\n  * GBDT reduces memory footprint dramatically with feature bucketization. For some tested datasets, it used 1/7 of the memory of its counterpart and took only 1/2 time to train. See [docs/PERFORMANCE_BENCHMARK.md](https://github.com/yarny/gbdt/blob/master/docs/PERFORMANCE_BENCHMARK.md) for more details.\n* **You want better handling of categorical features and missing values.**\n  * GBDT has built-in mechanisms to figure out how to split categorical features and place missing values in the trees.\n* **You want to try different loss functions.**\n  * GBDT implements various pointwise, pairwise, listingwis loss functions including mse, logloss, huberized hinge loss, pairwise logloss,\n[GBRank](http://www.cc.gatech.edu/~zha/papers/fp086-zheng.pdf) and [LambdaMart](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/MSR-TR-2010-82.pdf). It supports easily addition of your own custom loss functions.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yarny/gbdt", "keywords": "gbdt,machine learning,decision trees,forest", "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "gbdt", "package_url": "https://pypi.org/project/gbdt/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gbdt/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/yarny/gbdt"}, "release_url": "https://pypi.org/project/gbdt/0.3.1.2/", "requires_dist": null, "requires_python": null, "summary": "High performance implementation of GBDT family of algorithm", "version": "0.3.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            GBDT is a high performance and full featured C++ implementation of [Jerome H. Friedman's Gradient Boosting Decision Trees Algorithm](http://statweb.stanford.edu/~jhf/ftp/stobst.pdf) and its modern offsprings,. It features high efficiency, low memory footprint, collections of loss functions and built-in mechanisms to handle categorical features and missing values.<br><br>When is GBDT good for you?<br>-----------<br>* **You are looking beyond linear models.**<br>  * Gradient Boosting Decision Trees Algorithms is one of the best offshelf ML algorithms with built-in capabilities of non-linear transformation and feature crossing.<br>* **Your data is too big to load into memory with existing ML packages.**<br>  * GBDT reduces memory footprint dramatically with feature bucketization. For some tested datasets, it used 1/7 of the memory of its counterpart and took only 1/2 time to train. See [docs/PERFORMANCE_BENCHMARK.md](https://github.com/yarny/gbdt/blob/master/docs/PERFORMANCE_BENCHMARK.md) for more details.<br>* **You want better handling of categorical features and missing values.**<br>  * GBDT has built-in mechanisms to figure out how to split categorical features and place missing values in the trees.<br>* **You want to try different loss functions.**<br>  * GBDT implements various pointwise, pairwise, listingwis loss functions including mse, logloss, huberized hinge loss, pairwise logloss,<br>[GBRank](http://www.cc.gatech.edu/~zha/papers/fp086-zheng.pdf) and [LambdaMart](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/MSR-TR-2010-82.pdf). It supports easily addition of your own custom loss functions.\n          </div>"}, "last_serial": 2449595, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "5f45c4331308903f5009f715c4e5fabf", "sha256": "76a80ec042bfa6107dba288bbc7fab796b8725b84094aedd5323a1b95d4e032f"}, "downloads": -1, "filename": "gbdt-0.3.tar.gz", "has_sig": false, "md5_digest": "5f45c4331308903f5009f715c4e5fabf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3120888, "upload_time": "2016-09-25T10:44:48", "upload_time_iso_8601": "2016-09-25T10:44:48.165124Z", "url": "https://files.pythonhosted.org/packages/a6/e8/a01f28573d7fc0e6701552906d302b670d7ee5cc372d51da8e0146108c95/gbdt-0.3.tar.gz", "yanked": false}], "0.3.1.1": [{"comment_text": "", "digests": {"md5": "f64cd3cf2d743673f1fd414a1fb3b557", "sha256": "62efed13e2dbaecba25ad06d6c0f750f8a9a2824f10fc879c0eadc6fd9069bfa"}, "downloads": -1, "filename": "gbdt-0.3.1.1.tar.gz", "has_sig": false, "md5_digest": "f64cd3cf2d743673f1fd414a1fb3b557", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3120818, "upload_time": "2016-09-26T03:38:26", "upload_time_iso_8601": "2016-09-26T03:38:26.571658Z", "url": "https://files.pythonhosted.org/packages/e3/50/ec1ad94091de9befcfda14e38c558e149cc17b6e42198c181310aafa950d/gbdt-0.3.1.1.tar.gz", "yanked": false}], "0.3.1.2": [{"comment_text": "", "digests": {"md5": "254dd85f71d6f6c982b141d0265d1873", "sha256": "e2c43cbd4bf7eb41431d6a01993893772b96637cae4f450de201efa7c2f2e7d9"}, "downloads": -1, "filename": "gbdt-0.3.1.2.tar.gz", "has_sig": false, "md5_digest": "254dd85f71d6f6c982b141d0265d1873", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3123896, "upload_time": "2016-11-08T18:40:03", "upload_time_iso_8601": "2016-11-08T18:40:03.542294Z", "url": "https://files.pythonhosted.org/packages/33/48/ad5e3c0356d85dd3c85006fe512e822e595a333f355dcb60be720cada9e1/gbdt-0.3.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "254dd85f71d6f6c982b141d0265d1873", "sha256": "e2c43cbd4bf7eb41431d6a01993893772b96637cae4f450de201efa7c2f2e7d9"}, "downloads": -1, "filename": "gbdt-0.3.1.2.tar.gz", "has_sig": false, "md5_digest": "254dd85f71d6f6c982b141d0265d1873", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3123896, "upload_time": "2016-11-08T18:40:03", "upload_time_iso_8601": "2016-11-08T18:40:03.542294Z", "url": "https://files.pythonhosted.org/packages/33/48/ad5e3c0356d85dd3c85006fe512e822e595a333f355dcb60be720cada9e1/gbdt-0.3.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:57 2020"}