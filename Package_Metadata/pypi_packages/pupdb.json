{"info": {"author": "tuxmonk", "author_email": "30048080+tuxmonk@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "<img src=\"https://raw.githubusercontent.com/tuxmonk/pupdb/master/logo.png\" alt=\"PupDB Logo\" width=\"400\"/>\n\n[![Build Status](https://travis-ci.org/tuxmonk/pupdb.svg?branch=master)](https://travis-ci.org/tuxmonk/pupdb) [![codecov](https://codecov.io/gh/tuxmonk/pupdb/branch/master/graph/badge.svg)](https://codecov.io/gh/tuxmonk/pupdb) [![PyPI version fury.io](https://badge.fury.io/py/pupdb.svg)](https://pypi.python.org/pypi/pupdb/) [![Supported Python Versions](https://img.shields.io/pypi/pyversions/pupdb.svg)](https://pypi.python.org/pypi/pupdb/)\n\n## What is it?\n\nPupDB is an ernest attempt to create a simple file-based key-value database written in Python.\n\n## Why PupDB?\n\nThe objective behind the creation of PupDB is to create a database system which performs simple persistence operations well and data can be accessed with a minimalist, easy-to-use API with least configuration.\n\n### PupDB is the best choice when:\n\n1. You need a simple NoSQL data store with an interface as simple as a Python `dict`, and want to start storing and retrieving data within a few minutes.\n2. You want to create an application without bothering much about configuration and setup for storing data.\n3. Your database is not very huge i.e. not greater than a few megabytes of data.\n\n### When not to use PupDB:\n\n1. You want to perform advanced queries on your data.\n2. Your database is larger than a few megabytes of data.\n3. You want a database software that supports advanced capabilities like indexing, partitioning etc.\n\n## Salient Features\n\n1. **Multi-processing support**: Same database file can be used across multiple processes concurrently.\n2. **Mult-threading support**: Same database file (with separate `PupDB` instance per thread) can be used concurrently.\n3. **REST-based HTTP Interface**: Apart from using it as a `python` package, you can also use PupDB via a `flask`-based HTTP interface. This way you can use PupDB with programming languages other than Python.\n\n## Installation\n\nPupDB can be installed using `pip`:\n\n```bash\npip install pupdb\n```\n\n## Basic API Documentation and Usage\n\nPupDB can be instantiated as follows:\n```python\nfrom pupdb.core import PupDB\n\n# Specify database file path as an argument to the PupDB constructor. That's it.\ndb = PupDB('db.json')\n```\n\n1. `set(key, value)`: Stores the `value` mapped to `key` in the database file.\n```python\ndb.set('test_key', 'test_value')\n```\n2. `get(key)`: Returns the `value` mapped to `key` in the database file. Returns `None` if `key` is not found.\n```python\ndb.get('test_key')\n```\n3. `remove(key)`: Removes the `key` from the database file. Raises a `KeyError` if `key` is not found in the database file.\n```python\n# Remove the key `test_key` from the db.\ndb.remove('test_key')\n\n# Try doing the same again and it'll raise a `KeyError`,\n# as the key has already been deleted from the db in the above step.\ndb.remove('test_key')\n```\n4. `keys()`: Returns the keys present in the database file. Return type is `list` in Python 2 and [Dictionary view object](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict-views) (similar to [`dict.keys()`](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict.keys)) in Python 3.\n```python\n# Python 2\nprint db.keys() # This will print ['key1', ...]\n\n# Python 3\nprint(list(db.keys())) # This will print ['key1', ...]\n```\n5. `values()`: Returns the values of all keys present in the database file. Return type is `list` for Python 2 and [Dictionary view object](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict-views) (similar to [`dict.values()`](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict.values)) in Python 3.\n```python\n# Python 2\nprint db.values() # This will print ['value1', ...]\n\n# Python 3\nprint(list(db.values())) # This will print ['value1', ...]\n```\n6. `items()`: Returns the values of all keys present in the database file. Return type is `list` for Python 2 and [Dictionary view object](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict-views) (similar to [`dict.items()`](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict.items)) in Python 3.\n```python\n# Python 2\nprint db.items() # This will print [('key1', 'value1'), ...]\n\n# Python 3\nprint(list(db.items())) # This will print [('key1', 'value1'), ...]\n```\n7. `dumps()`: Returns a `json` dump of the entire database file sorted by key.\n```python\ndb.dumps() # This will print the database json string.\n```\n8. `truncate_db()`: Removes all data from the database file i.e. truncates the database file.\n```python\ndb.truncate_db()\nprint(db) # Will print an empty database dict '{}', as the database has been truncated.\n```\n\n## Using the PupDB HTTP/REST Interface\n\n**Using the HTTP/REST Interface, all PupDB-related operations can be performed without using PupDB as a Python package. As a result, PupDB can be used in any programming language that can make HTTP requests.**\n\nTo start PupDB's `gunicorn`-based `flask` server:\n\n```python\nfrom pupdb.server import start_http_server\n\n# Start the gunicorn server (with 4 worker threads).\nstart_http_server()\n```\n\nThe server will listen to local port 4000. The server will be available at `http://localhost:4000`.\n\n### HTTP API Endpoints\n\n1. `/get?key=<key-goes-here>` (Method: `GET`): This API endpoint is an interface to PupDB's `get()` method. e.g.:\n\n```bash\ncurl -XGET http://localhost:4000/get?key=test\n```\n\nThe above `curl` request will fetch the result for key `test`.\n\n2. `/set` (Method: `POST`): This API endpoint is an interface to PupDB's `set()` method. e.g.:\n\n```bash\ncurl -XPOST http://localhost:4000/set -H 'Content-Type: application/json' -d '{\"key\": \"test\", \"value\": \"1234\"}'\n```\n\nThe above `curl` request will set the value `1234` to key `test` in the database.\n\n3. `/remove/<key-goes-here>` (Method: `DELETE`): This API endpoint is an interface to PupDB's `remove()` method. e.g.:\n\n```bash\ncurl -XDELETE http://localhost:4000/remove/test\n```\n\nThe above `curl` request will remove the key `test` in the database. It returns a `404 Not Found` if the key does not exist in the database.\n\n4. `/keys` (Method: `GET`): This API endpoint is an interface to PupDB's `keys()` method. e.g.:\n\n```bash\ncurl -XGET http://localhost:4000/keys\n```\n\nThe above `curl` request will return a payload containing the `list` of keys in the database.\n\n5. `/values` (Method: `GET`): This API endpoint is an interface to PupDB's `values()` method. e.g.:\n\n```bash\ncurl -XGET http://localhost:4000/values\n```\n\nThe above `curl` request will return a payload containing the `list` of values of all keys in the database.\n\n6. `/items` (Method: `GET`): This API endpoint is an interface to PupDB's `items()` method. e.g.:\n\n```bash\ncurl -XGET http://localhost:4000/items\n```\n\nThe above `curl` request will return a payload containing the `list` of `[key, value]` pairs in the database.\n\n7. `/dumps` (Method: `GET`): This API endpoint is an interface to PupDB's `dumps()` method. e.g.:\n\n```bash\ncurl -XGET http://localhost:4000/dumps\n```\n\nThe above `curl` request will return a payload containing the string dump of the entire database.\n\n7. `/truncate-db` (Method: `POST`): This API endpoint is an interface to PupDB's `truncate_db()` method. e.g.:\n\n```bash\ncurl -XPOST http://localhost:4000/truncate-db\n```\n\nThe above `curl` request will truncate i.e. remove all key-value pairs from the database.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available,\nsee the\n[tags on this repository](https://github.com/tuxmonk/pupdb/tags).\n\n## License\n\nThis project is licensed under the MIT License - see the\n[LICENSE.txt](https://github.com/tuxmonk/pupdb/blob/master/LICENSE.txt) file for more details.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/tuxmonk/pupdb/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tuxmonk/pupdb", "keywords": "file-based,key-value-store,python,database,rest-api,process-safe,cross-language", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pupdb", "package_url": "https://pypi.org/project/pupdb/", "platform": "", "project_url": "https://pypi.org/project/pupdb/", "project_urls": {"Download": "https://github.com/tuxmonk/pupdb/archive/master.zip", "Homepage": "https://github.com/tuxmonk/pupdb"}, "release_url": "https://pypi.org/project/pupdb/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "A simple file-based key-value database written in Python.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"PupDB Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51f2be2d5bb044f5e1dc37cd7708bd3c3fd61f54/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7475786d6f6e6b2f70757064622f6d61737465722f6c6f676f2e706e67\" width=\"400\">\n<p><a href=\"https://travis-ci.org/tuxmonk/pupdb\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbe0d0f209b8e1d416d3c2966dc313b1f8fbf421/68747470733a2f2f7472617669732d63692e6f72672f7475786d6f6e6b2f70757064622e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/tuxmonk/pupdb\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c020aa28734e2ce5abddbdecb7d194e84ec4e76/68747470733a2f2f636f6465636f762e696f2f67682f7475786d6f6e6b2f70757064622f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/pupdb/\" rel=\"nofollow\"><img alt=\"PyPI version fury.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb1078f03568ecdbe60f03f8b55bfbd2b7fdba70/68747470733a2f2f62616467652e667572792e696f2f70792f70757064622e737667\"></a> <a href=\"https://pypi.python.org/pypi/pupdb/\" rel=\"nofollow\"><img alt=\"Supported Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38eaf35a6a8407897d30b511c77e5db9e549e45f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70757064622e737667\"></a></p>\n<h2>What is it?</h2>\n<p>PupDB is an ernest attempt to create a simple file-based key-value database written in Python.</p>\n<h2>Why PupDB?</h2>\n<p>The objective behind the creation of PupDB is to create a database system which performs simple persistence operations well and data can be accessed with a minimalist, easy-to-use API with least configuration.</p>\n<h3>PupDB is the best choice when:</h3>\n<ol>\n<li>You need a simple NoSQL data store with an interface as simple as a Python <code>dict</code>, and want to start storing and retrieving data within a few minutes.</li>\n<li>You want to create an application without bothering much about configuration and setup for storing data.</li>\n<li>Your database is not very huge i.e. not greater than a few megabytes of data.</li>\n</ol>\n<h3>When not to use PupDB:</h3>\n<ol>\n<li>You want to perform advanced queries on your data.</li>\n<li>Your database is larger than a few megabytes of data.</li>\n<li>You want a database software that supports advanced capabilities like indexing, partitioning etc.</li>\n</ol>\n<h2>Salient Features</h2>\n<ol>\n<li><strong>Multi-processing support</strong>: Same database file can be used across multiple processes concurrently.</li>\n<li><strong>Mult-threading support</strong>: Same database file (with separate <code>PupDB</code> instance per thread) can be used concurrently.</li>\n<li><strong>REST-based HTTP Interface</strong>: Apart from using it as a <code>python</code> package, you can also use PupDB via a <code>flask</code>-based HTTP interface. This way you can use PupDB with programming languages other than Python.</li>\n</ol>\n<h2>Installation</h2>\n<p>PupDB can be installed using <code>pip</code>:</p>\n<pre>pip install pupdb\n</pre>\n<h2>Basic API Documentation and Usage</h2>\n<p>PupDB can be instantiated as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pupdb.core</span> <span class=\"kn\">import</span> <span class=\"n\">PupDB</span>\n\n<span class=\"c1\"># Specify database file path as an argument to the PupDB constructor. That's it.</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">PupDB</span><span class=\"p\">(</span><span class=\"s1\">'db.json'</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li><code>set(key, value)</code>: Stores the <code>value</code> mapped to <code>key</code> in the database file.</li>\n</ol>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'test_key'</span><span class=\"p\">,</span> <span class=\"s1\">'test_value'</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li><code>get(key)</code>: Returns the <code>value</code> mapped to <code>key</code> in the database file. Returns <code>None</code> if <code>key</code> is not found.</li>\n</ol>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'test_key'</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li><code>remove(key)</code>: Removes the <code>key</code> from the database file. Raises a <code>KeyError</code> if <code>key</code> is not found in the database file.</li>\n</ol>\n<pre><span class=\"c1\"># Remove the key `test_key` from the db.</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">'test_key'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Try doing the same again and it'll raise a `KeyError`,</span>\n<span class=\"c1\"># as the key has already been deleted from the db in the above step.</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s1\">'test_key'</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li><code>keys()</code>: Returns the keys present in the database file. Return type is <code>list</code> in Python 2 and <a href=\"https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict-views\" rel=\"nofollow\">Dictionary view object</a> (similar to <a href=\"https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict.keys\" rel=\"nofollow\"><code>dict.keys()</code></a>) in Python 3.</li>\n</ol>\n<pre><span class=\"c1\"># Python 2</span>\n<span class=\"nb\">print</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span> <span class=\"c1\"># This will print ['key1', ...]</span>\n\n<span class=\"c1\"># Python 3</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span> <span class=\"c1\"># This will print ['key1', ...]</span>\n</pre>\n<ol>\n<li><code>values()</code>: Returns the values of all keys present in the database file. Return type is <code>list</code> for Python 2 and <a href=\"https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict-views\" rel=\"nofollow\">Dictionary view object</a> (similar to <a href=\"https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict.values\" rel=\"nofollow\"><code>dict.values()</code></a>) in Python 3.</li>\n</ol>\n<pre><span class=\"c1\"># Python 2</span>\n<span class=\"nb\">print</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span> <span class=\"c1\"># This will print ['value1', ...]</span>\n\n<span class=\"c1\"># Python 3</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span> <span class=\"c1\"># This will print ['value1', ...]</span>\n</pre>\n<ol>\n<li><code>items()</code>: Returns the values of all keys present in the database file. Return type is <code>list</code> for Python 2 and <a href=\"https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict-views\" rel=\"nofollow\">Dictionary view object</a> (similar to <a href=\"https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict.items\" rel=\"nofollow\"><code>dict.items()</code></a>) in Python 3.</li>\n</ol>\n<pre><span class=\"c1\"># Python 2</span>\n<span class=\"nb\">print</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"c1\"># This will print [('key1', 'value1'), ...]</span>\n\n<span class=\"c1\"># Python 3</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span> <span class=\"c1\"># This will print [('key1', 'value1'), ...]</span>\n</pre>\n<ol>\n<li><code>dumps()</code>: Returns a <code>json</code> dump of the entire database file sorted by key.</li>\n</ol>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">()</span> <span class=\"c1\"># This will print the database json string.</span>\n</pre>\n<ol>\n<li><code>truncate_db()</code>: Removes all data from the database file i.e. truncates the database file.</li>\n</ol>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">truncate_db</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span> <span class=\"c1\"># Will print an empty database dict '{}', as the database has been truncated.</span>\n</pre>\n<h2>Using the PupDB HTTP/REST Interface</h2>\n<p><strong>Using the HTTP/REST Interface, all PupDB-related operations can be performed without using PupDB as a Python package. As a result, PupDB can be used in any programming language that can make HTTP requests.</strong></p>\n<p>To start PupDB's <code>gunicorn</code>-based <code>flask</code> server:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pupdb.server</span> <span class=\"kn\">import</span> <span class=\"n\">start_http_server</span>\n\n<span class=\"c1\"># Start the gunicorn server (with 4 worker threads).</span>\n<span class=\"n\">start_http_server</span><span class=\"p\">()</span>\n</pre>\n<p>The server will listen to local port 4000. The server will be available at <code>http://localhost:4000</code>.</p>\n<h3>HTTP API Endpoints</h3>\n<ol>\n<li><code>/get?key=&lt;key-goes-here&gt;</code> (Method: <code>GET</code>): This API endpoint is an interface to PupDB's <code>get()</code> method. e.g.:</li>\n</ol>\n<pre>curl -XGET http://localhost:4000/get?key<span class=\"o\">=</span><span class=\"nb\">test</span>\n</pre>\n<p>The above <code>curl</code> request will fetch the result for key <code>test</code>.</p>\n<ol>\n<li><code>/set</code> (Method: <code>POST</code>): This API endpoint is an interface to PupDB's <code>set()</code> method. e.g.:</li>\n</ol>\n<pre>curl -XPOST http://localhost:4000/set -H <span class=\"s1\">'Content-Type: application/json'</span> -d <span class=\"s1\">'{\"key\": \"test\", \"value\": \"1234\"}'</span>\n</pre>\n<p>The above <code>curl</code> request will set the value <code>1234</code> to key <code>test</code> in the database.</p>\n<ol>\n<li><code>/remove/&lt;key-goes-here&gt;</code> (Method: <code>DELETE</code>): This API endpoint is an interface to PupDB's <code>remove()</code> method. e.g.:</li>\n</ol>\n<pre>curl -XDELETE http://localhost:4000/remove/test\n</pre>\n<p>The above <code>curl</code> request will remove the key <code>test</code> in the database. It returns a <code>404 Not Found</code> if the key does not exist in the database.</p>\n<ol>\n<li><code>/keys</code> (Method: <code>GET</code>): This API endpoint is an interface to PupDB's <code>keys()</code> method. e.g.:</li>\n</ol>\n<pre>curl -XGET http://localhost:4000/keys\n</pre>\n<p>The above <code>curl</code> request will return a payload containing the <code>list</code> of keys in the database.</p>\n<ol>\n<li><code>/values</code> (Method: <code>GET</code>): This API endpoint is an interface to PupDB's <code>values()</code> method. e.g.:</li>\n</ol>\n<pre>curl -XGET http://localhost:4000/values\n</pre>\n<p>The above <code>curl</code> request will return a payload containing the <code>list</code> of values of all keys in the database.</p>\n<ol>\n<li><code>/items</code> (Method: <code>GET</code>): This API endpoint is an interface to PupDB's <code>items()</code> method. e.g.:</li>\n</ol>\n<pre>curl -XGET http://localhost:4000/items\n</pre>\n<p>The above <code>curl</code> request will return a payload containing the <code>list</code> of <code>[key, value]</code> pairs in the database.</p>\n<ol>\n<li><code>/dumps</code> (Method: <code>GET</code>): This API endpoint is an interface to PupDB's <code>dumps()</code> method. e.g.:</li>\n</ol>\n<pre>curl -XGET http://localhost:4000/dumps\n</pre>\n<p>The above <code>curl</code> request will return a payload containing the string dump of the entire database.</p>\n<ol>\n<li><code>/truncate-db</code> (Method: <code>POST</code>): This API endpoint is an interface to PupDB's <code>truncate_db()</code> method. e.g.:</li>\n</ol>\n<pre>curl -XPOST http://localhost:4000/truncate-db\n</pre>\n<p>The above <code>curl</code> request will truncate i.e. remove all key-value pairs from the database.</p>\n<h2>Versioning</h2>\n<p>We use <a href=\"http://semver.org/\" rel=\"nofollow\">SemVer</a> for versioning. For the versions available,\nsee the\n<a href=\"https://github.com/tuxmonk/pupdb/tags\" rel=\"nofollow\">tags on this repository</a>.</p>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the\n<a href=\"https://github.com/tuxmonk/pupdb/blob/master/LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a> file for more details.</p>\n\n          </div>"}, "last_serial": 6214473, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "b6c65ddc2ab2408607668f6c4598cdcb", "sha256": "e43985218492208a793f4c022625b373b3e6c16acbddfb6c27505d57e4e16593"}, "downloads": -1, "filename": "pupdb-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b6c65ddc2ab2408607668f6c4598cdcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6654, "upload_time": "2019-11-28T14:36:16", "upload_time_iso_8601": "2019-11-28T14:36:16.111691Z", "url": "https://files.pythonhosted.org/packages/c6/4a/722e74aa68925b08095c5f6eea5b1aaefd62ba9eaebc785ff731ce0a048a/pupdb-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6c65ddc2ab2408607668f6c4598cdcb", "sha256": "e43985218492208a793f4c022625b373b3e6c16acbddfb6c27505d57e4e16593"}, "downloads": -1, "filename": "pupdb-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b6c65ddc2ab2408607668f6c4598cdcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6654, "upload_time": "2019-11-28T14:36:16", "upload_time_iso_8601": "2019-11-28T14:36:16.111691Z", "url": "https://files.pythonhosted.org/packages/c6/4a/722e74aa68925b08095c5f6eea5b1aaefd62ba9eaebc785ff731ce0a048a/pupdb-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:31 2020"}