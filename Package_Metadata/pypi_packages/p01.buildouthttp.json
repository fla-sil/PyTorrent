{"info": {"author": "Roger Ineichen, Projekt01 GmbH", "author_email": "dev@projekt01.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "=========================\nHTTP plugins for buildout\n=========================\n\nHTTP Basic-Authentication\n=========================\n\nWith this extension it is possible to define password protected\npackage directories without specifying the password and user in the\nurl.\n\nLet's take the example protected location, ``http://www.example.com/dist``\n\nFirst we would need to add the extension and the find link for our\nprotected location::\n\n    [buildout]\n    find-links = http://www.example.com/dist\n    extensions = p01.buildouthttp\n\nThen create the ``.httpauth`` password file, this file contains all\nauthentication information. The ``.httpauth`` file can be placed in the root of\nthe current buildout or in the ``~/.buildout`` directory. Each row consists of\n``realm, uri, username, password``.\n\nHere is an example of the ``.httpauth`` file::\n\n    Example com realm, http://www.example.com, username, secret\n\nIt is also possible to leave the secret away. Then you will be prompted for the\nsecret whenever buildout is run::\n\n    Example com realm, http://www.example.com, username\n\nNote that basic auth also works with any recipe using\nzc.buildout.download (e.g. hexagonit.recipe.download) because this\nextension also overwrites the url opener of zc.buildout.\n\n\nGithub Private Downloads\n========================\n\nPrivate downloads on http://github.com/ require authorization to download.\nThe previous token-based authentication system based on the v2 API (see\nhttp://github.com/blog/170-token-authentication) is no longer supported by\nGitHub as of June 1 2012; You must now request a v3 API token and use that\ninstead.\n\nRequesting a new API token can be done in one line using ``curl`` (please\nsubstitute your own github username and password):\n\n    curl -s -X POST -d '{\"scopes\": [\"repo\"], \"note\": \"my API token\"}' \\\n        https://${user}:${pass}@api.github.com/authorizations | grep token\n\nNow set the value of github.token to the hash returned from the command above:\n\n    git config --global github.accesstoken ${token}\n\nNote that the v3 API does not require your github username to work, and can\nbe removed from your configuration if you wish.\n\nFor details on managing authorization GitHub's OAuth tokens, see the API\ndocumentation: http://developer.github.com/v3/oauth/#oauth-authorizations-api\n\nURL to download a tag or branch::\n\n    https://api.github.com/repos/<gituser>/<repos>/tarball/master\n\nURL to downlad a \"download\"::\n\n    https://github.com/downloads/<gituser>/<repos>/<name>\n\nAs some eggs on PyPi also use public Github download URLs you may want to\nwhitelist the repos that authentication is required for as Github will\nreturn a 401 error code even for public repositories if the wrong auth\ndetails are provided.\nTo do this just list each repo in the format `<gituser>/<repos>` one per\nline in the buildout config `github-repos`::\n\n    [buildout]\n    extensions = p01.buildouthttp\n    github-repos = p01/repos\n                   bitly/asyncmongo\n\n\nCredits\n=======\n\nThanks to lovely systems for development and Tarek Ziade, Kevin Williams,\nWesley Mason for bugfixes and extensions.\n\n\n\n\n====================\nHandler Installation\n====================\n\nBy default the install function looks for the password file at\n~/.buildout/.httpauth and installs a basic auth opener.\n\nIt does not fail if the file cannot be found.\n\n    >>> import os\n    >>> from p01.buildouthttp.buildouthttp import install\n    >>> install()\n\nWe can supply the path to the file for testing.\n\n    >>> install(pwd_path='a')\n\nIf the file cannot be parsed an exception is raised.\n\n    >>> fp = os.path.join(tmp,'pwd.txt')\n    >>> import os\n    >>> f = open(fp, 'w')\n    >>> _ = f.write('The realm,https://example.com/ something')\n    >>> f.close()\n    >>> install(pwd_path=fp)\n    Traceback (most recent call last):\n    ...\n    RuntimeError: Authentication file cannot be parsed ...pwd.txt:1\n\nSome working examples.\n\n    >>> f = open(fp, 'w')\n    >>> _ = f.write('The realm,https://example.com/,username,password')\n    >>> f.close()\n    >>> install(pwd_path=fp)\n    >>> f = open(fp, 'w')\n    >>> _ = f.write('The realm,https://example.com/,username,password\\n\\n\\n')\n    >>> f.close()\n    >>> install(pwd_path=fp)\n    >>> f = open(fp, 'w')\n    >>> _ = f.write('')\n    >>> f.close()\n    >>> install(pwd_path=fp)\n\nNow let's try with the ``.httpauth`` file in the buildout directory.\n\n    >>> buildout_dir = os.path.join(tmp, 'test-buildout')\n    >>> os.mkdir(buildout_dir)\n    >>> buildout = {'buildout': {'directory': buildout_dir}}\n    >>> install(buildout=buildout)\n    >>> buildout_fp = os.path.join(buildout_dir, '.httpauth')\n    >>> f = open(buildout_fp, 'w')\n    >>> _ = f.write('The realm,https://example.com/ not valid')\n    >>> f.close()\n    >>> install(buildout=buildout)\n    Traceback (most recent call last):\n    ...\n    RuntimeError: Authentication file cannot be parsed ...None:1\n    >>> f = open(buildout_fp, 'w')\n    >>> _ = f.write('The realm,https://example.com/,username,password')\n    >>> f.close()\n    >>> install(buildout=buildout)\n\nThen with the file passed in and the file from the buildout directory.\n\n    >>> f = open(fp, 'w')\n    >>> _ = f.write('The realm,https://example.com/,username,password')\n    >>> f.close()\n    >>> install(buildout=buildout, pwd_path=fp)\n\nunload externsion:\n\n    >>> from p01.buildouthttp.buildouthttp import unload\n    >>> unload()\n\n\n=======\nCHANGES\n=======\n\n1.0.1 (2015-11-27)\n------------------\n\n- bugfix: fix url opener setup\n\n\n1.0.0 (2015-11-23)\n------------------\n\n- fix url handling troubles based on python 2.7.10 and zc.buildout > 2.2\n\n- initial copy of lovely.buildouthttp", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/p01.buildouthttp", "keywords": "Zope3 z3c p01 buildout http authentication", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "p01.buildouthttp", "package_url": "https://pypi.org/project/p01.buildouthttp/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/p01.buildouthttp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/p01.buildouthttp"}, "release_url": "https://pypi.org/project/p01.buildouthttp/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Buildout authentication extension", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            =========================<br>HTTP plugins for buildout<br>=========================<br><br>HTTP Basic-Authentication<br>=========================<br><br>With this extension it is possible to define password protected<br>package directories without specifying the password and user in the<br>url.<br><br>Let's take the example protected location, ``http://www.example.com/dist``<br><br>First we would need to add the extension and the find link for our<br>protected location::<br><br>    [buildout]<br>    find-links = http://www.example.com/dist<br>    extensions = p01.buildouthttp<br><br>Then create the ``.httpauth`` password file, this file contains all<br>authentication information. The ``.httpauth`` file can be placed in the root of<br>the current buildout or in the ``~/.buildout`` directory. Each row consists of<br>``realm, uri, username, password``.<br><br>Here is an example of the ``.httpauth`` file::<br><br>    Example com realm, http://www.example.com, username, secret<br><br>It is also possible to leave the secret away. Then you will be prompted for the<br>secret whenever buildout is run::<br><br>    Example com realm, http://www.example.com, username<br><br>Note that basic auth also works with any recipe using<br>zc.buildout.download (e.g. hexagonit.recipe.download) because this<br>extension also overwrites the url opener of zc.buildout.<br><br><br>Github Private Downloads<br>========================<br><br>Private downloads on http://github.com/ require authorization to download.<br>The previous token-based authentication system based on the v2 API (see<br>http://github.com/blog/170-token-authentication) is no longer supported by<br>GitHub as of June 1 2012; You must now request a v3 API token and use that<br>instead.<br><br>Requesting a new API token can be done in one line using ``curl`` (please<br>substitute your own github username and password):<br><br>    curl -s -X POST -d '{\"scopes\": [\"repo\"], \"note\": \"my API token\"}' \\<br>        https://${user}:${pass}@api.github.com/authorizations | grep token<br><br>Now set the value of github.token to the hash returned from the command above:<br><br>    git config --global github.accesstoken ${token}<br><br>Note that the v3 API does not require your github username to work, and can<br>be removed from your configuration if you wish.<br><br>For details on managing authorization GitHub's OAuth tokens, see the API<br>documentation: http://developer.github.com/v3/oauth/#oauth-authorizations-api<br><br>URL to download a tag or branch::<br><br>    https://api.github.com/repos/&lt;gituser&gt;/&lt;repos&gt;/tarball/master<br><br>URL to downlad a \"download\"::<br><br>    https://github.com/downloads/&lt;gituser&gt;/&lt;repos&gt;/&lt;name&gt;<br><br>As some eggs on PyPi also use public Github download URLs you may want to<br>whitelist the repos that authentication is required for as Github will<br>return a 401 error code even for public repositories if the wrong auth<br>details are provided.<br>To do this just list each repo in the format `&lt;gituser&gt;/&lt;repos&gt;` one per<br>line in the buildout config `github-repos`::<br><br>    [buildout]<br>    extensions = p01.buildouthttp<br>    github-repos = p01/repos<br>                   bitly/asyncmongo<br><br><br>Credits<br>=======<br><br>Thanks to lovely systems for development and Tarek Ziade, Kevin Williams,<br>Wesley Mason for bugfixes and extensions.<br><br><br><br><br>====================<br>Handler Installation<br>====================<br><br>By default the install function looks for the password file at<br>~/.buildout/.httpauth and installs a basic auth opener.<br><br>It does not fail if the file cannot be found.<br><br>    &gt;&gt;&gt; import os<br>    &gt;&gt;&gt; from p01.buildouthttp.buildouthttp import install<br>    &gt;&gt;&gt; install()<br><br>We can supply the path to the file for testing.<br><br>    &gt;&gt;&gt; install(pwd_path='a')<br><br>If the file cannot be parsed an exception is raised.<br><br>    &gt;&gt;&gt; fp = os.path.join(tmp,'pwd.txt')<br>    &gt;&gt;&gt; import os<br>    &gt;&gt;&gt; f = open(fp, 'w')<br>    &gt;&gt;&gt; _ = f.write('The realm,https://example.com/ something')<br>    &gt;&gt;&gt; f.close()<br>    &gt;&gt;&gt; install(pwd_path=fp)<br>    Traceback (most recent call last):<br>    ...<br>    RuntimeError: Authentication file cannot be parsed ...pwd.txt:1<br><br>Some working examples.<br><br>    &gt;&gt;&gt; f = open(fp, 'w')<br>    &gt;&gt;&gt; _ = f.write('The realm,https://example.com/,username,password')<br>    &gt;&gt;&gt; f.close()<br>    &gt;&gt;&gt; install(pwd_path=fp)<br>    &gt;&gt;&gt; f = open(fp, 'w')<br>    &gt;&gt;&gt; _ = f.write('The realm,https://example.com/,username,password\\n\\n\\n')<br>    &gt;&gt;&gt; f.close()<br>    &gt;&gt;&gt; install(pwd_path=fp)<br>    &gt;&gt;&gt; f = open(fp, 'w')<br>    &gt;&gt;&gt; _ = f.write('')<br>    &gt;&gt;&gt; f.close()<br>    &gt;&gt;&gt; install(pwd_path=fp)<br><br>Now let's try with the ``.httpauth`` file in the buildout directory.<br><br>    &gt;&gt;&gt; buildout_dir = os.path.join(tmp, 'test-buildout')<br>    &gt;&gt;&gt; os.mkdir(buildout_dir)<br>    &gt;&gt;&gt; buildout = {'buildout': {'directory': buildout_dir}}<br>    &gt;&gt;&gt; install(buildout=buildout)<br>    &gt;&gt;&gt; buildout_fp = os.path.join(buildout_dir, '.httpauth')<br>    &gt;&gt;&gt; f = open(buildout_fp, 'w')<br>    &gt;&gt;&gt; _ = f.write('The realm,https://example.com/ not valid')<br>    &gt;&gt;&gt; f.close()<br>    &gt;&gt;&gt; install(buildout=buildout)<br>    Traceback (most recent call last):<br>    ...<br>    RuntimeError: Authentication file cannot be parsed ...None:1<br>    &gt;&gt;&gt; f = open(buildout_fp, 'w')<br>    &gt;&gt;&gt; _ = f.write('The realm,https://example.com/,username,password')<br>    &gt;&gt;&gt; f.close()<br>    &gt;&gt;&gt; install(buildout=buildout)<br><br>Then with the file passed in and the file from the buildout directory.<br><br>    &gt;&gt;&gt; f = open(fp, 'w')<br>    &gt;&gt;&gt; _ = f.write('The realm,https://example.com/,username,password')<br>    &gt;&gt;&gt; f.close()<br>    &gt;&gt;&gt; install(buildout=buildout, pwd_path=fp)<br><br>unload externsion:<br><br>    &gt;&gt;&gt; from p01.buildouthttp.buildouthttp import unload<br>    &gt;&gt;&gt; unload()<br><br><br>=======<br>CHANGES<br>=======<br><br>1.0.1 (2015-11-27)<br>------------------<br><br>- bugfix: fix url opener setup<br><br><br>1.0.0 (2015-11-23)<br>------------------<br><br>- fix url handling troubles based on python 2.7.10 and zc.buildout &gt; 2.2<br><br>- initial copy of lovely.buildouthttp\n          </div>"}, "last_serial": 1836449, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a3144541ef7afd350132e3ee03d8d13e", "sha256": "fe177bb2d331ffa8c69c5249e36661300d71743d3c9e65c2f70104668df195a2"}, "downloads": -1, "filename": "p01.buildouthttp-1.0.0.zip", "has_sig": false, "md5_digest": "a3144541ef7afd350132e3ee03d8d13e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16930, "upload_time": "2015-11-23T14:17:53", "upload_time_iso_8601": "2015-11-23T14:17:53.208946Z", "url": "https://files.pythonhosted.org/packages/07/c8/769a75c05777815d1cfca00cf89a51f48eba42bfaa2b91b9fe7a636ac27d/p01.buildouthttp-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "fe3dff7400e367b12b0c19f852f2a1ae", "sha256": "ed0f74920e22f9263da7a412b233f27d1212582c563542103d6ccbcf61ba910a"}, "downloads": -1, "filename": "p01.buildouthttp-1.0.1.zip", "has_sig": false, "md5_digest": "fe3dff7400e367b12b0c19f852f2a1ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16988, "upload_time": "2015-11-27T16:11:46", "upload_time_iso_8601": "2015-11-27T16:11:46.795821Z", "url": "https://files.pythonhosted.org/packages/ac/6a/20a6eb3254aac9d966eff47cc0096bffdce117b81f3e474b14545103c81f/p01.buildouthttp-1.0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe3dff7400e367b12b0c19f852f2a1ae", "sha256": "ed0f74920e22f9263da7a412b233f27d1212582c563542103d6ccbcf61ba910a"}, "downloads": -1, "filename": "p01.buildouthttp-1.0.1.zip", "has_sig": false, "md5_digest": "fe3dff7400e367b12b0c19f852f2a1ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16988, "upload_time": "2015-11-27T16:11:46", "upload_time_iso_8601": "2015-11-27T16:11:46.795821Z", "url": "https://files.pythonhosted.org/packages/ac/6a/20a6eb3254aac9d966eff47cc0096bffdce117b81f3e474b14545103c81f/p01.buildouthttp-1.0.1.zip", "yanked": false}], "timestamp": "Fri May  8 03:00:25 2020"}