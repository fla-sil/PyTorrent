{"info": {"author": "Sakir Ozturk", "author_email": "ozturk213@hotmail.fr", "bugtrack_url": null, "classifiers": [], "description": "# FastTorch\n\nLibrary that implements the training and test loops for your Deep Learning model. After your traning, you can also plot the training results, plot some predictions that your model has made on your test set and also a confusion matrix on the predictions made on your test set.\n\nThis Library also allow you to plot some usefull informations about your dataset.\n\n/!\\ Note: Currently only supports classification tasks, it'll support other types of task in the future...\n\n## Installation\nrun the following command then you are ready to go ! \n```\npip install fast_torch\n```\n\n## Usage\nTake a look at the complete [Documentation](https://github.com/YnsOzt/FastTorch/blob/master/documentation/README.md) of this framework.\n\nA complete example is available on the [Notebook](https://github.com/YnsOzt/FastTorch/blob/master/examples/FAST_TORCH_MNIST_EXAMPLE.ipynb).\n### Plot stats about your datasets\n```python\n# Import the plotting module of the library\nimport fast_torch.plotter as ftplot\n\n# Will plot some random images of the dataloader that you've passed in the parameter\nftplot.plot_images(train_dataloader)\n\n# Will plot the class distributions of your train, val, test datasets\nftplot.plot_classes_distributions(train_dataloader, test_dataloader, val_dataloader)\n```\n### Train and test your model \n```python\n# Import the model_wrapper module\nimport fast_torch.model_wrapper as mw\n\n\n# Initialize your model\nmodel = Model()\n\n# Initialize the options\ntraining_opts = {\n    \"epochs\": 5,\n    \"criterion\": nn.CrossEntropyLoss(),\n    \"optimizer\": optim.SGD(model.parameters(), lr=0.01),\n    \"early_stopping_patience\": 2\n}\n\n# Instantiate the classifier wrapper \nclf = mw.Classifier(model, training_opts, train_loader, test_loader, val_loader, device=\"cuda\")\n\n# Train your model\nclf.train()\n# Test your model\nclf.test()\n\n# Plot the training stats (Training loss, Vaildation loss + accuracy)\nclf.plot_training_stats()\n# Plot random prediction made by your trained model\nclf.plot_random_predictions()\n# Plot the confusion matrix\nclf.plot_confusion_matrix()\n```\n\n## TODOS\n* Add a dataset creator for images (with the splits etc..)\n* Clean the code\n* Make the confusion matrix figsize flexible\n* Add Learning rate decay to the 'Classifier'\n* Add other model wrappers\n* Make the plot functions more flexible (working with other type of dataset, not only dataloader)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/YnsOzt/FastTorch", "keywords": "PyTorch,boiler_plate,Train,Test,Plot", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fast-torch", "package_url": "https://pypi.org/project/fast-torch/", "platform": "", "project_url": "https://pypi.org/project/fast-torch/", "project_urls": {"Homepage": "https://github.com/YnsOzt/FastTorch"}, "release_url": "https://pypi.org/project/fast-torch/1.2.2/", "requires_dist": null, "requires_python": "", "summary": "Library that implements boiler plate code in PyTorch for training, testing and plotting your model", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>FastTorch</h1>\n<p>Library that implements the training and test loops for your Deep Learning model. After your traning, you can also plot the training results, plot some predictions that your model has made on your test set and also a confusion matrix on the predictions made on your test set.</p>\n<p>This Library also allow you to plot some usefull informations about your dataset.</p>\n<p>/!\\ Note: Currently only supports classification tasks, it'll support other types of task in the future...</p>\n<h2>Installation</h2>\n<p>run the following command then you are ready to go !</p>\n<pre><code>pip install fast_torch\n</code></pre>\n<h2>Usage</h2>\n<p>Take a look at the complete <a href=\"https://github.com/YnsOzt/FastTorch/blob/master/documentation/README.md\" rel=\"nofollow\">Documentation</a> of this framework.</p>\n<p>A complete example is available on the <a href=\"https://github.com/YnsOzt/FastTorch/blob/master/examples/FAST_TORCH_MNIST_EXAMPLE.ipynb\" rel=\"nofollow\">Notebook</a>.</p>\n<h3>Plot stats about your datasets</h3>\n<pre><span class=\"c1\"># Import the plotting module of the library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">fast_torch.plotter</span> <span class=\"k\">as</span> <span class=\"nn\">ftplot</span>\n\n<span class=\"c1\"># Will plot some random images of the dataloader that you've passed in the parameter</span>\n<span class=\"n\">ftplot</span><span class=\"o\">.</span><span class=\"n\">plot_images</span><span class=\"p\">(</span><span class=\"n\">train_dataloader</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Will plot the class distributions of your train, val, test datasets</span>\n<span class=\"n\">ftplot</span><span class=\"o\">.</span><span class=\"n\">plot_classes_distributions</span><span class=\"p\">(</span><span class=\"n\">train_dataloader</span><span class=\"p\">,</span> <span class=\"n\">test_dataloader</span><span class=\"p\">,</span> <span class=\"n\">val_dataloader</span><span class=\"p\">)</span>\n</pre>\n<h3>Train and test your model</h3>\n<pre><span class=\"c1\"># Import the model_wrapper module</span>\n<span class=\"kn\">import</span> <span class=\"nn\">fast_torch.model_wrapper</span> <span class=\"k\">as</span> <span class=\"nn\">mw</span>\n\n\n<span class=\"c1\"># Initialize your model</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Initialize the options</span>\n<span class=\"n\">training_opts</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"epochs\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"criterion\"</span><span class=\"p\">:</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">CrossEntropyLoss</span><span class=\"p\">(),</span>\n    <span class=\"s2\">\"optimizer\"</span><span class=\"p\">:</span> <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">SGD</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"early_stopping_patience\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Instantiate the classifier wrapper </span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">mw</span><span class=\"o\">.</span><span class=\"n\">Classifier</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">training_opts</span><span class=\"p\">,</span> <span class=\"n\">train_loader</span><span class=\"p\">,</span> <span class=\"n\">test_loader</span><span class=\"p\">,</span> <span class=\"n\">val_loader</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s2\">\"cuda\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Train your model</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">()</span>\n<span class=\"c1\"># Test your model</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Plot the training stats (Training loss, Vaildation loss + accuracy)</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">plot_training_stats</span><span class=\"p\">()</span>\n<span class=\"c1\"># Plot random prediction made by your trained model</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">plot_random_predictions</span><span class=\"p\">()</span>\n<span class=\"c1\"># Plot the confusion matrix</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">plot_confusion_matrix</span><span class=\"p\">()</span>\n</pre>\n<h2>TODOS</h2>\n<ul>\n<li>Add a dataset creator for images (with the splits etc..)</li>\n<li>Clean the code</li>\n<li>Make the confusion matrix figsize flexible</li>\n<li>Add Learning rate decay to the 'Classifier'</li>\n<li>Add other model wrappers</li>\n<li>Make the plot functions more flexible (working with other type of dataset, not only dataloader)</li>\n</ul>\n\n          </div>"}, "last_serial": 7047623, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "81da774fcafde2d7822602632bf88cf8", "sha256": "038777dc8560349e65b670779882d382e3ce20fb8d7ba01ed5aaa65a473755fe"}, "downloads": -1, "filename": "fast_torch-1.0.tar.gz", "has_sig": false, "md5_digest": "81da774fcafde2d7822602632bf88cf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6378, "upload_time": "2020-04-14T19:32:46", "upload_time_iso_8601": "2020-04-14T19:32:46.547410Z", "url": "https://files.pythonhosted.org/packages/16/b8/95494b055a534dd2ca2b422997c33a99de11f6de140903d1539c6ca2f2bc/fast_torch-1.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "36a30df5f802e9014bef042919d51d91", "sha256": "e1acdccf7a3a62801d8beb81843cba0e0ae5fad04e88c38da149aba3bfad5eaa"}, "downloads": -1, "filename": "fast_torch-1.1.0.tar.gz", "has_sig": false, "md5_digest": "36a30df5f802e9014bef042919d51d91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7375, "upload_time": "2020-04-14T21:36:28", "upload_time_iso_8601": "2020-04-14T21:36:28.793979Z", "url": "https://files.pythonhosted.org/packages/90/68/650727d79f41fdfef00229fa9b4a360392f9c94631057aada5cc93194116/fast_torch-1.1.0.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "93ad00f844c1a4fe1f806370516384b9", "sha256": "81099b2c82ce2eb82072396b58bcd633ee3fce2adc37b173974ba6c4fe12f1c8"}, "downloads": -1, "filename": "fast_torch-1.2.tar.gz", "has_sig": false, "md5_digest": "93ad00f844c1a4fe1f806370516384b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7406, "upload_time": "2020-04-15T19:42:29", "upload_time_iso_8601": "2020-04-15T19:42:29.263536Z", "url": "https://files.pythonhosted.org/packages/eb/bd/e34938691854bc168193fd908f15472777325d1bb8596dfc56c9a9f3875c/fast_torch-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "c2a4ce955a397b11a7e9c48e30cb3cb8", "sha256": "a5bd5fa0faeb89508d67f10266cee3ba1483d6be7e09f690760704e7d43165db"}, "downloads": -1, "filename": "fast_torch-1.2.1.tar.gz", "has_sig": false, "md5_digest": "c2a4ce955a397b11a7e9c48e30cb3cb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7414, "upload_time": "2020-04-15T19:47:39", "upload_time_iso_8601": "2020-04-15T19:47:39.158592Z", "url": "https://files.pythonhosted.org/packages/57/cd/bee559d8b8fb7adc5e3ceee35ebee8e9410e1604fea99fff6ade096e27c1/fast_torch-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "bceee5a3fbd521aa85dd4b1b8c5380a9", "sha256": "27d11c2fbfe0f2eda33eca62aaf668053f2579575fce079f878e3d04a74ff86f"}, "downloads": -1, "filename": "fast_torch-1.2.2.tar.gz", "has_sig": false, "md5_digest": "bceee5a3fbd521aa85dd4b1b8c5380a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7476, "upload_time": "2020-04-18T12:31:10", "upload_time_iso_8601": "2020-04-18T12:31:10.735875Z", "url": "https://files.pythonhosted.org/packages/4f/71/f7ea26e9569219e73c91c13080e1490641e4479b881f4cd49d957aa37d99/fast_torch-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bceee5a3fbd521aa85dd4b1b8c5380a9", "sha256": "27d11c2fbfe0f2eda33eca62aaf668053f2579575fce079f878e3d04a74ff86f"}, "downloads": -1, "filename": "fast_torch-1.2.2.tar.gz", "has_sig": false, "md5_digest": "bceee5a3fbd521aa85dd4b1b8c5380a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7476, "upload_time": "2020-04-18T12:31:10", "upload_time_iso_8601": "2020-04-18T12:31:10.735875Z", "url": "https://files.pythonhosted.org/packages/4f/71/f7ea26e9569219e73c91c13080e1490641e4479b881f4cd49d957aa37d99/fast_torch-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:23 2020"}