{"info": {"author": "Manuel Bua", "author_email": "manuel.bua[at]gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Version Control"], "description": "|PyPi version| |PyPi downloads| |Project Stats| |Flattr this git repo|\n\nWhat is it?\n-----------\n\nA very simple, lightweight, tag-based version string manager for git,\nwritten in Python.\n\nIt generates version strings by using Python-based formatting rules\ncoupled with repository information, augmented by user-defined data.\n\nIt supports up to four different version number operands and optional\npre-release version information, in the format\n``[v]MAJOR.MINOR.PATCH[.REVISION][-PRE-RELEASE-METADATA]``, making to\nadopt versioning schemes such as `Semantic\nVersioning <https://semver.org>`__ a breeze.\n\nOptionally, it also keeps your project's version information blobs\nautomagically updated via custom templates.\n\nSample output (this repository):\n\n::\n\n    Most recent tag: v0.3.0-RC1\n    (NEXT defined as: 0.3.0)\n    Using pre-release metadata: RC1\n    Current build ID: 1d170e7f42817d0f277c52ad686b24ac69b353d4\n    Current version: v0.3.0-RC1.47+1d170e7 => v0.3.0\n\nInstallation\n------------\n\nPlease read the simple *Installation instructions* in the\n`INSTALL.md <https://github.com/manuelbua/gitver/blob/master/INSTALL.md>`__\nfile, you can install either via ``pip`` or by cloning this repository.\n\n*NOTE the **badges** present at the top of these pages (version and\ndownloads) refers to the latest stable packages uploaded to PyPI:\ncloning this repository will checkout the version i'm currently working\non and may not reflect the same version.*\n\nHelps in version string management\n----------------------------------\n\nCoupled with `git\nhooks <http://git-scm.com/book/en/Customizing-Git-Git-Hooks>`__,\n``gitver`` version blob templates helps to keep your own project updated\nwith its version information, performing simple template-based\nsubstitution automatically at *post-commit* time, for example.\n\nWhy?\n----\n\nI'm working on a project that requires precise version string tracking\nand synchronization between a server and its different clients, so an\nautomatic mechanism is needed.\n\nFurthermore, i want the version string and/or other useful information\nto be **embedded** in the application code automatically, \"compiled-in\"\nso to speak, without me having to remember to do it manually each time.\n\nRepository pre-requisites\n-------------------------\n\n``gitver`` expects your tags to be **annotated** and be in this format:\n\n::\n\n    [v]MAJOR.MINOR.PATCH[.REVISION][-PRE-RELEASE-METADATA]\n\nText in ``[`` square brackets ``]`` is optional, so these example tags\nare all valid for use with ``gitver``:\n\n::\n\n    v0.0.1\n    0.0.1-RC0\n    v0.0.1-RC2\n\nNote that, at this time, ``gitver`` will **not** skip unsupported tags\nduring its processing, so whenever it encounter such malformed tags\n(i.e. \"this-is-my-tag\") it will just error out something like this:\n\n::\n\n    ERROR: Couldn't retrieve version information from tag \"my-other-tag\".\n    gitver expects tags to be in the format [v]X.Y.Z[.REVISION][-PRE-RELEASE-METADATA]\n\nHowever, since ``gitver`` will only search for annotated tags, you could\nsafely use *unannotated tags* for any other need.\n\nWorkflow\n--------\n\nYour workflow shouldn't change much from what you are used to, but\nbefore using it, please review the \"Repository pre-requisites\" section\nabove and ensure your tags are not already being used for some other\npurpose.\n\n*Note that ``gitver`` will **never** tag, commit or interact in\nwrite-mode with your repository in any way, ever!*\n\nThe following is a workflow exemplification of using *gitver* to manage\nversion strings for your project, given it has already been setup:\n\n-  you are working on your repository, now you are ready to promote the\n   current version to the next release\n-  create a release tag, ``git tag -a v0.0.2 -m 'Bump version'``\n-  defines your NEXT version, the one you are going to work *towards* to\n   by running ``gitver next 0.0.3``\n-  run ``gitver`` and check everything is fine\n-  **OPTIONAL** preview or update your project's version information\n   templates by running ``gitver preview <template name>`` or\n   ``gitver update <template name>``, then rebuild the project to\n   reflect version changes\n-  any other manual house-keeping in-between releases can be performed\n   now\n-  now you are working towards the NEXT release, repeat when release\n   time has came again\n\nHow does it work?\n-----------------\n\nBy reading your last reachable **annotated** tag, it will generate\ncustomly-formatted version strings, distinguishing automatically between\n*stable* and *development* builds, depending on the number of commits\nfrom that last tag (the *commit count*).\n\nIt will also apply tag-based or configuration file-based pre-release\nmetadata in development builds, giving you fine-grained control on how\nthe final version string will be composed.\n\nConfig file\n-----------\n\n``gitver`` uses a per-repository, JSON-based configuration file.\n\nThe default configuration file gets created automatically in\n``.gitver/config`` and it contains the following tweakable settings:\n\n::\n\n    {\n        # automatically generated configuration file\n        #\n        # These defaults implement Semantic Versioning as described in the latest\n        # available documentation at http://semver.org/spec/v2.0.0.html\n\n        # by default, terminal output is NOT colorized for compatibility with older\n        # terminal emulators: you may enable this if you like a more modern look\n        \"use_terminal_colors\": false,\n\n        # prevent gitver from storing any information in its configuration directory\n        # if the .gitignore file doesn't exclude it from the repository\n        \"safe_mode\": true,\n\n        # default pre-release metadata when commit count > 0 AND\n        # no NEXT has been defined\n        \"default_meta_pr_in_next_no_next\": \"NEXT\",\n\n        # default pre-release metadata when commit count > 0\n        \"default_meta_pr_in_next\": \"SNAPSHOT\",\n\n        # default pre-release metadata prefix\n        \"meta_pr_prefix\": \"-\",\n\n        # default commit count prefix\n        \"commit_count_prefix\": \".\",\n\n        # Python-based format string variable names are:\n        #     maj, min, patch, rev, rev_prefix, meta_pr_prefix, meta_pr,\n        #     commit_count_prefix, commit_count, build_id, build_id_full\n        #\n        # Note that prefixes will be empty strings if their valued counterpart\n        # doesn't have a meaningful value (i.e., 0 for commit count, no meta\n        # pre-release, ..)\n\n        # format string used to build the current version string when the\n        # commit count is 0\n        \"format\": \"%(maj)s.%(min)s.%(patch)s%(rev_prefix)s%(rev)s%(meta_pr_prefix)s%(meta_pr)s\",\n\n        # format string used to build the current version string when the\n        # commit count is > 0\n        \"format_next\": \"%(maj)s.%(min)s.%(patch)s%(rev_prefix)s%(rev)s%(meta_pr_prefix)s%(meta_pr)s%(commit_count_prefix)s%(commit_count)s+%(build_id)s\"\n    }\n\nThis file gets created automatically in your ``.gitver`` directory when\nyou initialize it with the ``gitver init`` command: should you need to\nregenerate it, for example after updating to a ``gitver`` release that\nadds more configuration options (this will be noted in the ChangeLog or\nby other means), you just need to move/delete the old configuration and\ntrigger regeneration by re-issuing the init command.\n\nBasic usage\n-----------\n\n::\n\n    $ gitver --help\n    usage: gitver [-h] [--ignore-gitignore] [--colors {config,yes,no}] [--quiet]\n                  [--quiet-errors]\n                  \n                  {version,init,check,info,current,list-templates,list-next,update,preview,next,clean,clean-all}\n                  ...\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --ignore-gitignore    Ignore the .gitignore warning and continue running as\n                            normal (specify this flag before any other command, at\n                            YOUR own risk)\n      --colors {config,yes,no}\n                            Enable or disable colorized terminal output: 'config'\n                            (default) reads the setting from your configuration\n                            file, 'yes' will force-enable it, 'no' will force-\n                            disable it.\n      --quiet               Disable any stdout message.\n      --quiet-errors        Disable any stderr message.\n\n    Valid commands:\n      {version,init,check,info,current,list-templates,list-next,update,preview,next,clean,clean-all}\n        version             Shows gitver version\n        init                Creates gitver's configuration directory and creates\n                            the default configuration file, if it doesn't exist.\n        check               Checks your .gitignore file for gitver's configuration\n                            directory inclusion.\n        info                Prints full version information and tag-based metadata\n                            for this repository. [default]\n        current             Prints the current version information only, without\n                            any formatting applied.\n        list-templates      Enumerates available templates.\n        list-next           Enumerates user-defined next stable versions.\n        update              Performs simple keyword substitution on the specified\n                            template file(s) and place it to the path described by\n                            the first line in the template. This is usually\n                            performed *AFTER* a release has been tagged already.\n        preview             Same as \"update\", but the output is written to the\n                            stdout instead (same rules apply).\n        next                Defines the next stable version for the most recent\n                            and reachable tag.\n        clean               Removes the user-defined next stable version for the\n                            most recent and reachable tag or the specified tag.\n        clean-all           Removes ALL user-defined next stable versions.\n\nIntroduction\n~~~~~~~~~~~~\n\nThe following is an easy-to-follow, step-by-step mini tutorial that will\nwalk you through the features of ``gitver``: we are going to create a\nbrand new repository at ``/tmp/test`` for this.\n\nStep-by-step mini tutorial\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBuilding some repository history\n''''''''''''''''''''''''''''''''\n\nLet's create a new repository in your ``/tmp`` folder:\n\n::\n\n    cd /tmp && mkdir test && cd test && git init\n\nNow populate it with some activity:\n\n::\n\n    echo \"some data\" > some && git add some && git commit -m 'initial commit' && echo \"more data\" > more && echo \"another one\" > another && git add more && git commit -m 'one more' && git add another && git commit -m 'even more'\n\nYour repository should now look like this:\n\n::\n\n    * b01e958  (HEAD, master) (Thu Jan 16 17:08:54 2014) even more (Manuel Bua)\n    * 8f5862b  (Thu Jan 16 17:08:54 2014) one more (Manuel Bua)\n    * fac3511  (Thu Jan 16 17:08:54 2014) initial commit (Manuel Bua)\n\nLet's initialize ``gitver`` at this point:\n\n::\n\n    $ gitver init\n    gitver has been initialized and configured.\n\n``gitver`` just created its own ``.gitver`` configuration directory and\ngenerated the default configuration file ``config`` right there. At this\npoint it's recommended, but not mandatory, to **exclude** gitver's\nconfiguration directory from the repository by adding it to your\n``.gitignore`` file: this is to prevent losing your ``gitver``'s\nconfiguration whenever you checkout old revisions of your project.\n\nAnyway, the tool is quite smart in that and it will *not* proceed if it\ndetects potential problems with the command you issued, in case your\n``.gitignore`` file isn't properly setup, so let's run a check at this\npoint to see that warning message:\n\n::\n\n    $ gitver check\n    Your .gitignore file doesn't define any rule for the .gitver\n    configuration directory: it's recommended to exclude it from\n    the repository, unless you know what you are doing. If you are not\n    sure, add this line to your .gitignore file:\n\n        .gitver\n\nSo let's create your ignore file, add that line, then run ``gitver``:\n\n::\n\n    $ echo \".gitver\" >> .gitignore\n    $ gitver\n    ERROR: Couldn't retrieve the latest tag\n\nRight, we have no tags at this point, so let's create ``v0.0.0`` at the\nfirst commit with this command (replace the commit hash with your own\nwhere needed):\n\n::\n\n    git tag -a v0.0.0 -m 'Initial version' fac3511\n\nThis is how your repository should look like:\n\n::\n\n    * b01e958  (HEAD, master) (Thu Jan 16 17:08:54 2014) even more (Manuel Bua)\n    * 8f5862b  (Thu Jan 16 17:08:54 2014) one more (Manuel Bua)\n    * fac3511  (tag: v0.0.0) (Thu Jan 16 17:08:54 2014) initial commit (Manuel Bua)\n\nNow ``gitver`` output should be somewhat more informative:\n\n::\n\n    Most recent tag: v0.0.0\n    Using NEXT defined as: none, defaulting to -NEXT suffix\n    (Pre-release metadata: none)\n    Current build ID: b01e95831e8c240415510be16e93e10f68fb964a\n    Current version: v0.0.0-NEXT.2+b01e958\n\nTime to decide what the NEXT version numbers will be, so let's set this\nand run ``gitver`` again:\n\n::\n\n    $ gitver next 0.0.1\n    Set NEXT version string to 0.0.1 for the current tag v0.0.0\n\n    $ gitver\n    Most recent tag: v0.0.0\n    Using NEXT defined as: 0.0.1\n    (Pre-release metadata: none)\n    Current build ID: b01e95831e8c240415510be16e93e10f68fb964a\n    Current version: v0.0.1-SNAPSHOT.2+b01e958 => v0.0.1\n\nNotice how the build id stayed the same but the version string changed:\nboth strings describes the same point in development, they are\n*equivalent*, but given the same descriptive intentions, i find the\nlatter to be much more clear.\n\nNow lookup your ``.gitver/config`` file and look at the ``format_next``\ndefinition:\n\n::\n\n    \"format_next\": \"%(maj)s.%(min)s.%(patch)s%(rev_prefix)s%(rev)s%(meta_pr_prefix)s%(meta_pr)s%(commit_count_prefix)s%(commit_count)s+%(build_id)s\"\n\nThis defines the format of the version string being generated at this\npoint of development: since the *commit count* from the most recent\nvalid tag is greater than ``0``, this denotes a *development* build, and\nthe ``format_next`` variation is used: the ``%(meta_pr)s`` placeholder\nwill be replaced by the pre-release metadata if your tag defines one,\nelse the configuration defaults will be used, but this will only happen\nin development builds, there is no point in exposing *pre-release*\nmetadata in a *stable* release.\n\nThe ``%(meta_pr_prefix)s`` counterpart, instead, will be filled with the\nvalue of ``meta_pr_prefix`` *only* if pre-release metadata is used, else\nit will be set to an empty string as well.\n\nThe same reasoning applies to the *commit count*: whenever it's equal to\n``0`` both ``%(commit_count)s`` and ``%(commit_count_prefix)s`` will be\nset to an empty string.\n\nThis permit to adapt and change version string formats by letting you\ndefines concatenations more easily.\n\nTagging a release\n'''''''''''''''''\n\nLet's add that ``.gitignore`` file we didn't add before, then declare\nthe version stable by just tagging it as that:\n\n::\n\n    $ git add .gitignore && git commit -m 'Add .gitignore file'\n    $ git tag -a 'v0.0.1' -m 'Bump version'\n\nYour repository should now look like this:\n\n::\n\n    * 3a3cf5f  (HEAD, tag: v0.0.1, master) (Thu Jan 16 17:29:00 2014) Add .gitignore file (Manuel Bua)\n    * b01e958  (Thu Jan 16 17:08:54 2014) even more (Manuel Bua)\n    * 8f5862b  (Thu Jan 16 17:08:54 2014) one more (Manuel Bua)\n    * fac3511  (tag: v0.0.0) (Thu Jan 16 17:08:54 2014) initial commit (Manuel Bua)\n\nSo let's have ``gitver`` take a look at the repository now:\n\n::\n\n    $ gitver\n    Most recent tag: v0.0.1\n    Current build ID: 3a3cf5ffe0a6a2f6051420ac730554c92bf9bdf2\n    Current version: v0.0.1\n\nAs you can see, ``gitver`` now uses the *other* string format from the\nconfiguration file:\n\n::\n\n    \"format\": \"%(maj)s.%(min)s.%(patch)s%(rev_prefix)s%(rev)s%(meta_pr_prefix)s%(meta_pr)s\"\n\nThis is being used when the commit count from the most recent tag is\nequal to ``0`` since this denotes a *stable* build, rather than a\ndevelopment one.\n\nDepending on your project, format strings can change slightly between\n*stable* and *development* versions: ``gitver`` gives you full control\nover what format to use in each case.\n\nFor completeness, let's use the ``format_next`` format for the stable\nbuild as well and edit that portion of your configuration file to look\nlike this:\n\n::\n\n    \"format\": \"%(maj)s.%(min)s.%(patch)s%(meta_pr_prefix)s%(meta_pr)s%(commit_count_prefix)s%(commit_count)s+%(build_id)s\"\n\nDone that? Now look at ``gitver``'s output now:\n\n::\n\n    $ gitver\n    Most recent tag: v0.0.1\n    Current build ID: 94b2ef2ed92844377f1e8b1160a014bae0273792\n    Current version: v0.0.1+94b2ef2\n\nAs expected, there is no sign of prefixes, nor default metadata or\ncommit count in the stable build.\n\nTemplate-based version information blobs\n----------------------------------------\n\nOne of the main reasons for this tool to exists is to be able to also\nautomatically update your project own's version information *blob* (e.g.\n``VersionInfo.java``, ``version.py``, ...) or some other external file\nwith the project's version information.\n\nTemplate format\n---------------\n\nThe only **required** bit of information *gitver* needs is where the\noutput of the template should be placed, so the first line shall only\ncontain the path to the output file in a Bash-style comment (spaces are\ntrimmed):\n\n::\n\n    # /path/to/project/file.extension\n\nThe rest of the file is obviously up to you, an example is available at\nthe \"Template example\" section.\n\n*Why is the format starting with a Bash-style comment, you say?* The\ninitial version of *gitver* was a Bash script, so it was a natural\nchoice to adopt that: i then realized i didn't like how things were and\nrewrote all it in Python, but the template format stayed the same\nbecause it was *simple*.\n\nTemplate variables\n------------------\n\nGiven these basic assumptions:\n\n-  the latest tag is ``v0.4.9``\n-  the NEXT version numbers have been defined to be ``0.4.10``\n-  the actual commit count is ``2``\n\nHere is the list of variables, with their values, available for use in\ntemplates:\n\n::\n\n    ${CURRENT_VERSION}     = 0.4.10-SNAPSHOT-2/a3a73a58\n    ${BUILD_ID}            = a3a73a58\n    ${FULL_BUILD_ID}       = a3a73a5861e5721055f3a12545201e265ba0c097\n    ${MAJOR}               = 0\n    ${MINOR}               = 4\n    ${PATCH}               = 10\n    ${REV}                 = (empty string, or a revision number if present)\n    ${REV_PREFIX}          = (empty string, or a '.' if a revision number is present)\n    ${COMMIT_COUNT}        = 2 (or 0 if commit count is 0)\n    ${COMMIT_COUNT_STR}    = '2' (or an empty string if commit count is 0)\n    ${COMMIT_COUNT_PREFIX} = either the 'commit_count_prefix' specified in the config file or an empty string, if the commit count is 0\n    ${META_PR}             = either the pre-release metadata from the last reachable tag, the 'default_meta_pr_in_next' (from config file), the 'default_meta_pr_in_next_no_next' (from config file) or an empty string, depending on the state of the repository\n    ${META_PR_PREFIX}      = either the 'meta_pr_prefix' specified in the config file or an empty string, if no pre-release metadata is available for use\n\nThe list could later be expanded and improved, to cover much more\ninformation, such as date, time, let me know your suggestion!\n\nPreviewing and compiling templates\n----------------------------------\n\nYou can preview the result of the template substitution by using the\n``preview``\\ command, followed by one or more template names (multiple\ntemplate names should be quoted):\n\n::\n\n    $ gitver preview my_template\n                or\n    $ gitver preview \"template1 template2 templateN\"\n\nThis will process the template and print the output to the stdout\ninstead of writing it to a file: this can be useful for scripting\npurposes, where you can filter out information messages while only\ncapturing the \"real meat\":\n\n::\n\n    $ gitver preview my_template 2>/dev/null\n\nThe ``update`` command works similarly, it will just write the output to\nthe specified file, rather than stdout:\n\n::\n\n    $ gitver update my_template\n                or\n    $ gitver update \"template1 template2 templateN\"\n\nIt's possible to define any number of templates, just put them in the\n``.gitver/templates`` directory: to have ``gitver`` enumerate all the\navailable templates, use the ``list-templates`` command:\n\n::\n\n    $ gitver list-templates\n    Available templates:\n        version (/home/manuel/dev/gitver/.gitver/templates/version)\n        test (/home/manuel/dev/gitver/.gitver/templates/test)\n\nTemplate example\n----------------\n\nLet's take a look at ``gitver``'s own\n`template <hub.com/manuelbua/gitver/blob/master/.gitver/templates/version>`__:\n\n::\n\n    # gitver/_version.py\n    #!/usr/bin/env python2\n    # coding=utf-8\n\n    # DO NOT TOUCH, AUTOMATICALLY UPDATED!\n    gitver_version = '${CURRENT_VERSION}'\n    gitver_buildid = '${FULL_BUILD_ID}'\n    gitver_pypi = '${MAJOR}.${MINOR}.${PATCH}${META_PR_PREFIX}${META_PR}${COMMIT_COUNT_PREFIX}${COMMIT_COUNT_STR}'\n\nNow let's compile it:\n\n::\n\n    $ gitver update version\n    Processing template \"version\" for /home/manuel/dev/gitver/gitver/_version.py...\n    Done, 207 bytes written.\n\nThis will produce the following file at\n``/home/manuel/dev/gitver/gitver/_version.py``, **overwriting** the\nprevious file, if any:\n\n::\n\n    #!/usr/bin/env python2\n    # coding=utf-8\n\n    # DO NOT TOUCH, AUTOMATICALLY UPDATED!\n    gitver_version = '0.3.0-RC1.47+1d170e7'\n    gitver_buildid = '1d170e7f42817d0f277c52ad686b24ac69b353d4'\n    gitver_pypi = '0.3.0-RC1.47'\n\nTemplates + git hooks\n---------------------\n\nAt this point is very simple to automatize even more, instead of\nmanually updating version information after each commit, let's create a\ngit hook to take care of this:\n\n::\n\n    $ cat .git/hooks/post-commit \n    #!/bin/bash\n    # gitver should be in your path to work!\n    gitver update version\n\nThere you have it!\n\nBugs\n----\n\n.. figure:: http://media.giphy.com/media/10EdqIfzllpg6A/giphy.gif\n   :alt: bugs\n\n   bugs\nNOPE!! MY CODE HAS NO BUGS!11\n\nJust joking, probably quite a few, please report them\n`here <https://github.com/manuelbua/gitver/issues>`__, thanks!\n\n.. |PyPi version| image:: https://pypip.in/v/gitver/badge.png\n   :target: https://crate.io/packages/gitver/\n.. |PyPi downloads| image:: https://pypip.in/d/gitver/badge.png\n   :target: https://crate.io/packages/gitver/\n.. |Project Stats| image:: https://ohloh.net/p/gitver/widgets/project_thin_badge.gif\n   :target: https://ohloh.net/projects/gitver\n.. |Flattr this git repo| image:: http://api.flattr.com/button/flattr-badge-large.png\n   :target: https://flattr.com/submit/auto?user_id=manuelbua&url=https://github.com/manuelbua/gitver&title=gitver&language=&tags=github&category=software", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/manuelbua/gitver", "keywords": null, "license": "Apache License, Version 2.0", "maintainer": null, "maintainer_email": null, "name": "gitver", "package_url": "https://pypi.org/project/gitver/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gitver/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/manuelbua/gitver"}, "release_url": "https://pypi.org/project/gitver/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "Simple version string management for git", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            |PyPi version| |PyPi downloads| |Project Stats| |Flattr this git repo|<br><br>What is it?<br>-----------<br><br>A very simple, lightweight, tag-based version string manager for git,<br>written in Python.<br><br>It generates version strings by using Python-based formatting rules<br>coupled with repository information, augmented by user-defined data.<br><br>It supports up to four different version number operands and optional<br>pre-release version information, in the format<br>``[v]MAJOR.MINOR.PATCH[.REVISION][-PRE-RELEASE-METADATA]``, making to<br>adopt versioning schemes such as `Semantic<br>Versioning &lt;https://semver.org&gt;`__ a breeze.<br><br>Optionally, it also keeps your project's version information blobs<br>automagically updated via custom templates.<br><br>Sample output (this repository):<br><br>::<br><br>    Most recent tag: v0.3.0-RC1<br>    (NEXT defined as: 0.3.0)<br>    Using pre-release metadata: RC1<br>    Current build ID: 1d170e7f42817d0f277c52ad686b24ac69b353d4<br>    Current version: v0.3.0-RC1.47+1d170e7 =&gt; v0.3.0<br><br>Installation<br>------------<br><br>Please read the simple *Installation instructions* in the<br>`INSTALL.md &lt;https://github.com/manuelbua/gitver/blob/master/INSTALL.md&gt;`__<br>file, you can install either via ``pip`` or by cloning this repository.<br><br>*NOTE the **badges** present at the top of these pages (version and<br>downloads) refers to the latest stable packages uploaded to PyPI:<br>cloning this repository will checkout the version i'm currently working<br>on and may not reflect the same version.*<br><br>Helps in version string management<br>----------------------------------<br><br>Coupled with `git<br>hooks &lt;http://git-scm.com/book/en/Customizing-Git-Git-Hooks&gt;`__,<br>``gitver`` version blob templates helps to keep your own project updated<br>with its version information, performing simple template-based<br>substitution automatically at *post-commit* time, for example.<br><br>Why?<br>----<br><br>I'm working on a project that requires precise version string tracking<br>and synchronization between a server and its different clients, so an<br>automatic mechanism is needed.<br><br>Furthermore, i want the version string and/or other useful information<br>to be **embedded** in the application code automatically, \"compiled-in\"<br>so to speak, without me having to remember to do it manually each time.<br><br>Repository pre-requisites<br>-------------------------<br><br>``gitver`` expects your tags to be **annotated** and be in this format:<br><br>::<br><br>    [v]MAJOR.MINOR.PATCH[.REVISION][-PRE-RELEASE-METADATA]<br><br>Text in ``[`` square brackets ``]`` is optional, so these example tags<br>are all valid for use with ``gitver``:<br><br>::<br><br>    v0.0.1<br>    0.0.1-RC0<br>    v0.0.1-RC2<br><br>Note that, at this time, ``gitver`` will **not** skip unsupported tags<br>during its processing, so whenever it encounter such malformed tags<br>(i.e. \"this-is-my-tag\") it will just error out something like this:<br><br>::<br><br>    ERROR: Couldn't retrieve version information from tag \"my-other-tag\".<br>    gitver expects tags to be in the format [v]X.Y.Z[.REVISION][-PRE-RELEASE-METADATA]<br><br>However, since ``gitver`` will only search for annotated tags, you could<br>safely use *unannotated tags* for any other need.<br><br>Workflow<br>--------<br><br>Your workflow shouldn't change much from what you are used to, but<br>before using it, please review the \"Repository pre-requisites\" section<br>above and ensure your tags are not already being used for some other<br>purpose.<br><br>*Note that ``gitver`` will **never** tag, commit or interact in<br>write-mode with your repository in any way, ever!*<br><br>The following is a workflow exemplification of using *gitver* to manage<br>version strings for your project, given it has already been setup:<br><br>-  you are working on your repository, now you are ready to promote the<br>   current version to the next release<br>-  create a release tag, ``git tag -a v0.0.2 -m 'Bump version'``<br>-  defines your NEXT version, the one you are going to work *towards* to<br>   by running ``gitver next 0.0.3``<br>-  run ``gitver`` and check everything is fine<br>-  **OPTIONAL** preview or update your project's version information<br>   templates by running ``gitver preview &lt;template name&gt;`` or<br>   ``gitver update &lt;template name&gt;``, then rebuild the project to<br>   reflect version changes<br>-  any other manual house-keeping in-between releases can be performed<br>   now<br>-  now you are working towards the NEXT release, repeat when release<br>   time has came again<br><br>How does it work?<br>-----------------<br><br>By reading your last reachable **annotated** tag, it will generate<br>customly-formatted version strings, distinguishing automatically between<br>*stable* and *development* builds, depending on the number of commits<br>from that last tag (the *commit count*).<br><br>It will also apply tag-based or configuration file-based pre-release<br>metadata in development builds, giving you fine-grained control on how<br>the final version string will be composed.<br><br>Config file<br>-----------<br><br>``gitver`` uses a per-repository, JSON-based configuration file.<br><br>The default configuration file gets created automatically in<br>``.gitver/config`` and it contains the following tweakable settings:<br><br>::<br><br>    {<br>        # automatically generated configuration file<br>        #<br>        # These defaults implement Semantic Versioning as described in the latest<br>        # available documentation at http://semver.org/spec/v2.0.0.html<br><br>        # by default, terminal output is NOT colorized for compatibility with older<br>        # terminal emulators: you may enable this if you like a more modern look<br>        \"use_terminal_colors\": false,<br><br>        # prevent gitver from storing any information in its configuration directory<br>        # if the .gitignore file doesn't exclude it from the repository<br>        \"safe_mode\": true,<br><br>        # default pre-release metadata when commit count &gt; 0 AND<br>        # no NEXT has been defined<br>        \"default_meta_pr_in_next_no_next\": \"NEXT\",<br><br>        # default pre-release metadata when commit count &gt; 0<br>        \"default_meta_pr_in_next\": \"SNAPSHOT\",<br><br>        # default pre-release metadata prefix<br>        \"meta_pr_prefix\": \"-\",<br><br>        # default commit count prefix<br>        \"commit_count_prefix\": \".\",<br><br>        # Python-based format string variable names are:<br>        #     maj, min, patch, rev, rev_prefix, meta_pr_prefix, meta_pr,<br>        #     commit_count_prefix, commit_count, build_id, build_id_full<br>        #<br>        # Note that prefixes will be empty strings if their valued counterpart<br>        # doesn't have a meaningful value (i.e., 0 for commit count, no meta<br>        # pre-release, ..)<br><br>        # format string used to build the current version string when the<br>        # commit count is 0<br>        \"format\": \"%(maj)s.%(min)s.%(patch)s%(rev_prefix)s%(rev)s%(meta_pr_prefix)s%(meta_pr)s\",<br><br>        # format string used to build the current version string when the<br>        # commit count is &gt; 0<br>        \"format_next\": \"%(maj)s.%(min)s.%(patch)s%(rev_prefix)s%(rev)s%(meta_pr_prefix)s%(meta_pr)s%(commit_count_prefix)s%(commit_count)s+%(build_id)s\"<br>    }<br><br>This file gets created automatically in your ``.gitver`` directory when<br>you initialize it with the ``gitver init`` command: should you need to<br>regenerate it, for example after updating to a ``gitver`` release that<br>adds more configuration options (this will be noted in the ChangeLog or<br>by other means), you just need to move/delete the old configuration and<br>trigger regeneration by re-issuing the init command.<br><br>Basic usage<br>-----------<br><br>::<br><br>    $ gitver --help<br>    usage: gitver [-h] [--ignore-gitignore] [--colors {config,yes,no}] [--quiet]<br>                  [--quiet-errors]<br>                  <br>                  {version,init,check,info,current,list-templates,list-next,update,preview,next,clean,clean-all}<br>                  ...<br><br>    optional arguments:<br>      -h, --help            show this help message and exit<br>      --ignore-gitignore    Ignore the .gitignore warning and continue running as<br>                            normal (specify this flag before any other command, at<br>                            YOUR own risk)<br>      --colors {config,yes,no}<br>                            Enable or disable colorized terminal output: 'config'<br>                            (default) reads the setting from your configuration<br>                            file, 'yes' will force-enable it, 'no' will force-<br>                            disable it.<br>      --quiet               Disable any stdout message.<br>      --quiet-errors        Disable any stderr message.<br><br>    Valid commands:<br>      {version,init,check,info,current,list-templates,list-next,update,preview,next,clean,clean-all}<br>        version             Shows gitver version<br>        init                Creates gitver's configuration directory and creates<br>                            the default configuration file, if it doesn't exist.<br>        check               Checks your .gitignore file for gitver's configuration<br>                            directory inclusion.<br>        info                Prints full version information and tag-based metadata<br>                            for this repository. [default]<br>        current             Prints the current version information only, without<br>                            any formatting applied.<br>        list-templates      Enumerates available templates.<br>        list-next           Enumerates user-defined next stable versions.<br>        update              Performs simple keyword substitution on the specified<br>                            template file(s) and place it to the path described by<br>                            the first line in the template. This is usually<br>                            performed *AFTER* a release has been tagged already.<br>        preview             Same as \"update\", but the output is written to the<br>                            stdout instead (same rules apply).<br>        next                Defines the next stable version for the most recent<br>                            and reachable tag.<br>        clean               Removes the user-defined next stable version for the<br>                            most recent and reachable tag or the specified tag.<br>        clean-all           Removes ALL user-defined next stable versions.<br><br>Introduction<br>~~~~~~~~~~~~<br><br>The following is an easy-to-follow, step-by-step mini tutorial that will<br>walk you through the features of ``gitver``: we are going to create a<br>brand new repository at ``/tmp/test`` for this.<br><br>Step-by-step mini tutorial<br>~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>Building some repository history<br>''''''''''''''''''''''''''''''''<br><br>Let's create a new repository in your ``/tmp`` folder:<br><br>::<br><br>    cd /tmp &amp;&amp; mkdir test &amp;&amp; cd test &amp;&amp; git init<br><br>Now populate it with some activity:<br><br>::<br><br>    echo \"some data\" &gt; some &amp;&amp; git add some &amp;&amp; git commit -m 'initial commit' &amp;&amp; echo \"more data\" &gt; more &amp;&amp; echo \"another one\" &gt; another &amp;&amp; git add more &amp;&amp; git commit -m 'one more' &amp;&amp; git add another &amp;&amp; git commit -m 'even more'<br><br>Your repository should now look like this:<br><br>::<br><br>    * b01e958  (HEAD, master) (Thu Jan 16 17:08:54 2014) even more (Manuel Bua)<br>    * 8f5862b  (Thu Jan 16 17:08:54 2014) one more (Manuel Bua)<br>    * fac3511  (Thu Jan 16 17:08:54 2014) initial commit (Manuel Bua)<br><br>Let's initialize ``gitver`` at this point:<br><br>::<br><br>    $ gitver init<br>    gitver has been initialized and configured.<br><br>``gitver`` just created its own ``.gitver`` configuration directory and<br>generated the default configuration file ``config`` right there. At this<br>point it's recommended, but not mandatory, to **exclude** gitver's<br>configuration directory from the repository by adding it to your<br>``.gitignore`` file: this is to prevent losing your ``gitver``'s<br>configuration whenever you checkout old revisions of your project.<br><br>Anyway, the tool is quite smart in that and it will *not* proceed if it<br>detects potential problems with the command you issued, in case your<br>``.gitignore`` file isn't properly setup, so let's run a check at this<br>point to see that warning message:<br><br>::<br><br>    $ gitver check<br>    Your .gitignore file doesn't define any rule for the .gitver<br>    configuration directory: it's recommended to exclude it from<br>    the repository, unless you know what you are doing. If you are not<br>    sure, add this line to your .gitignore file:<br><br>        .gitver<br><br>So let's create your ignore file, add that line, then run ``gitver``:<br><br>::<br><br>    $ echo \".gitver\" &gt;&gt; .gitignore<br>    $ gitver<br>    ERROR: Couldn't retrieve the latest tag<br><br>Right, we have no tags at this point, so let's create ``v0.0.0`` at the<br>first commit with this command (replace the commit hash with your own<br>where needed):<br><br>::<br><br>    git tag -a v0.0.0 -m 'Initial version' fac3511<br><br>This is how your repository should look like:<br><br>::<br><br>    * b01e958  (HEAD, master) (Thu Jan 16 17:08:54 2014) even more (Manuel Bua)<br>    * 8f5862b  (Thu Jan 16 17:08:54 2014) one more (Manuel Bua)<br>    * fac3511  (tag: v0.0.0) (Thu Jan 16 17:08:54 2014) initial commit (Manuel Bua)<br><br>Now ``gitver`` output should be somewhat more informative:<br><br>::<br><br>    Most recent tag: v0.0.0<br>    Using NEXT defined as: none, defaulting to -NEXT suffix<br>    (Pre-release metadata: none)<br>    Current build ID: b01e95831e8c240415510be16e93e10f68fb964a<br>    Current version: v0.0.0-NEXT.2+b01e958<br><br>Time to decide what the NEXT version numbers will be, so let's set this<br>and run ``gitver`` again:<br><br>::<br><br>    $ gitver next 0.0.1<br>    Set NEXT version string to 0.0.1 for the current tag v0.0.0<br><br>    $ gitver<br>    Most recent tag: v0.0.0<br>    Using NEXT defined as: 0.0.1<br>    (Pre-release metadata: none)<br>    Current build ID: b01e95831e8c240415510be16e93e10f68fb964a<br>    Current version: v0.0.1-SNAPSHOT.2+b01e958 =&gt; v0.0.1<br><br>Notice how the build id stayed the same but the version string changed:<br>both strings describes the same point in development, they are<br>*equivalent*, but given the same descriptive intentions, i find the<br>latter to be much more clear.<br><br>Now lookup your ``.gitver/config`` file and look at the ``format_next``<br>definition:<br><br>::<br><br>    \"format_next\": \"%(maj)s.%(min)s.%(patch)s%(rev_prefix)s%(rev)s%(meta_pr_prefix)s%(meta_pr)s%(commit_count_prefix)s%(commit_count)s+%(build_id)s\"<br><br>This defines the format of the version string being generated at this<br>point of development: since the *commit count* from the most recent<br>valid tag is greater than ``0``, this denotes a *development* build, and<br>the ``format_next`` variation is used: the ``%(meta_pr)s`` placeholder<br>will be replaced by the pre-release metadata if your tag defines one,<br>else the configuration defaults will be used, but this will only happen<br>in development builds, there is no point in exposing *pre-release*<br>metadata in a *stable* release.<br><br>The ``%(meta_pr_prefix)s`` counterpart, instead, will be filled with the<br>value of ``meta_pr_prefix`` *only* if pre-release metadata is used, else<br>it will be set to an empty string as well.<br><br>The same reasoning applies to the *commit count*: whenever it's equal to<br>``0`` both ``%(commit_count)s`` and ``%(commit_count_prefix)s`` will be<br>set to an empty string.<br><br>This permit to adapt and change version string formats by letting you<br>defines concatenations more easily.<br><br>Tagging a release<br>'''''''''''''''''<br><br>Let's add that ``.gitignore`` file we didn't add before, then declare<br>the version stable by just tagging it as that:<br><br>::<br><br>    $ git add .gitignore &amp;&amp; git commit -m 'Add .gitignore file'<br>    $ git tag -a 'v0.0.1' -m 'Bump version'<br><br>Your repository should now look like this:<br><br>::<br><br>    * 3a3cf5f  (HEAD, tag: v0.0.1, master) (Thu Jan 16 17:29:00 2014) Add .gitignore file (Manuel Bua)<br>    * b01e958  (Thu Jan 16 17:08:54 2014) even more (Manuel Bua)<br>    * 8f5862b  (Thu Jan 16 17:08:54 2014) one more (Manuel Bua)<br>    * fac3511  (tag: v0.0.0) (Thu Jan 16 17:08:54 2014) initial commit (Manuel Bua)<br><br>So let's have ``gitver`` take a look at the repository now:<br><br>::<br><br>    $ gitver<br>    Most recent tag: v0.0.1<br>    Current build ID: 3a3cf5ffe0a6a2f6051420ac730554c92bf9bdf2<br>    Current version: v0.0.1<br><br>As you can see, ``gitver`` now uses the *other* string format from the<br>configuration file:<br><br>::<br><br>    \"format\": \"%(maj)s.%(min)s.%(patch)s%(rev_prefix)s%(rev)s%(meta_pr_prefix)s%(meta_pr)s\"<br><br>This is being used when the commit count from the most recent tag is<br>equal to ``0`` since this denotes a *stable* build, rather than a<br>development one.<br><br>Depending on your project, format strings can change slightly between<br>*stable* and *development* versions: ``gitver`` gives you full control<br>over what format to use in each case.<br><br>For completeness, let's use the ``format_next`` format for the stable<br>build as well and edit that portion of your configuration file to look<br>like this:<br><br>::<br><br>    \"format\": \"%(maj)s.%(min)s.%(patch)s%(meta_pr_prefix)s%(meta_pr)s%(commit_count_prefix)s%(commit_count)s+%(build_id)s\"<br><br>Done that? Now look at ``gitver``'s output now:<br><br>::<br><br>    $ gitver<br>    Most recent tag: v0.0.1<br>    Current build ID: 94b2ef2ed92844377f1e8b1160a014bae0273792<br>    Current version: v0.0.1+94b2ef2<br><br>As expected, there is no sign of prefixes, nor default metadata or<br>commit count in the stable build.<br><br>Template-based version information blobs<br>----------------------------------------<br><br>One of the main reasons for this tool to exists is to be able to also<br>automatically update your project own's version information *blob* (e.g.<br>``VersionInfo.java``, ``version.py``, ...) or some other external file<br>with the project's version information.<br><br>Template format<br>---------------<br><br>The only **required** bit of information *gitver* needs is where the<br>output of the template should be placed, so the first line shall only<br>contain the path to the output file in a Bash-style comment (spaces are<br>trimmed):<br><br>::<br><br>    # /path/to/project/file.extension<br><br>The rest of the file is obviously up to you, an example is available at<br>the \"Template example\" section.<br><br>*Why is the format starting with a Bash-style comment, you say?* The<br>initial version of *gitver* was a Bash script, so it was a natural<br>choice to adopt that: i then realized i didn't like how things were and<br>rewrote all it in Python, but the template format stayed the same<br>because it was *simple*.<br><br>Template variables<br>------------------<br><br>Given these basic assumptions:<br><br>-  the latest tag is ``v0.4.9``<br>-  the NEXT version numbers have been defined to be ``0.4.10``<br>-  the actual commit count is ``2``<br><br>Here is the list of variables, with their values, available for use in<br>templates:<br><br>::<br><br>    ${CURRENT_VERSION}     = 0.4.10-SNAPSHOT-2/a3a73a58<br>    ${BUILD_ID}            = a3a73a58<br>    ${FULL_BUILD_ID}       = a3a73a5861e5721055f3a12545201e265ba0c097<br>    ${MAJOR}               = 0<br>    ${MINOR}               = 4<br>    ${PATCH}               = 10<br>    ${REV}                 = (empty string, or a revision number if present)<br>    ${REV_PREFIX}          = (empty string, or a '.' if a revision number is present)<br>    ${COMMIT_COUNT}        = 2 (or 0 if commit count is 0)<br>    ${COMMIT_COUNT_STR}    = '2' (or an empty string if commit count is 0)<br>    ${COMMIT_COUNT_PREFIX} = either the 'commit_count_prefix' specified in the config file or an empty string, if the commit count is 0<br>    ${META_PR}             = either the pre-release metadata from the last reachable tag, the 'default_meta_pr_in_next' (from config file), the 'default_meta_pr_in_next_no_next' (from config file) or an empty string, depending on the state of the repository<br>    ${META_PR_PREFIX}      = either the 'meta_pr_prefix' specified in the config file or an empty string, if no pre-release metadata is available for use<br><br>The list could later be expanded and improved, to cover much more<br>information, such as date, time, let me know your suggestion!<br><br>Previewing and compiling templates<br>----------------------------------<br><br>You can preview the result of the template substitution by using the<br>``preview``\\ command, followed by one or more template names (multiple<br>template names should be quoted):<br><br>::<br><br>    $ gitver preview my_template<br>                or<br>    $ gitver preview \"template1 template2 templateN\"<br><br>This will process the template and print the output to the stdout<br>instead of writing it to a file: this can be useful for scripting<br>purposes, where you can filter out information messages while only<br>capturing the \"real meat\":<br><br>::<br><br>    $ gitver preview my_template 2&gt;/dev/null<br><br>The ``update`` command works similarly, it will just write the output to<br>the specified file, rather than stdout:<br><br>::<br><br>    $ gitver update my_template<br>                or<br>    $ gitver update \"template1 template2 templateN\"<br><br>It's possible to define any number of templates, just put them in the<br>``.gitver/templates`` directory: to have ``gitver`` enumerate all the<br>available templates, use the ``list-templates`` command:<br><br>::<br><br>    $ gitver list-templates<br>    Available templates:<br>        version (/home/manuel/dev/gitver/.gitver/templates/version)<br>        test (/home/manuel/dev/gitver/.gitver/templates/test)<br><br>Template example<br>----------------<br><br>Let's take a look at ``gitver``'s own<br>`template &lt;hub.com/manuelbua/gitver/blob/master/.gitver/templates/version&gt;`__:<br><br>::<br><br>    # gitver/_version.py<br>    #!/usr/bin/env python2<br>    # coding=utf-8<br><br>    # DO NOT TOUCH, AUTOMATICALLY UPDATED!<br>    gitver_version = '${CURRENT_VERSION}'<br>    gitver_buildid = '${FULL_BUILD_ID}'<br>    gitver_pypi = '${MAJOR}.${MINOR}.${PATCH}${META_PR_PREFIX}${META_PR}${COMMIT_COUNT_PREFIX}${COMMIT_COUNT_STR}'<br><br>Now let's compile it:<br><br>::<br><br>    $ gitver update version<br>    Processing template \"version\" for /home/manuel/dev/gitver/gitver/_version.py...<br>    Done, 207 bytes written.<br><br>This will produce the following file at<br>``/home/manuel/dev/gitver/gitver/_version.py``, **overwriting** the<br>previous file, if any:<br><br>::<br><br>    #!/usr/bin/env python2<br>    # coding=utf-8<br><br>    # DO NOT TOUCH, AUTOMATICALLY UPDATED!<br>    gitver_version = '0.3.0-RC1.47+1d170e7'<br>    gitver_buildid = '1d170e7f42817d0f277c52ad686b24ac69b353d4'<br>    gitver_pypi = '0.3.0-RC1.47'<br><br>Templates + git hooks<br>---------------------<br><br>At this point is very simple to automatize even more, instead of<br>manually updating version information after each commit, let's create a<br>git hook to take care of this:<br><br>::<br><br>    $ cat .git/hooks/post-commit <br>    #!/bin/bash<br>    # gitver should be in your path to work!<br>    gitver update version<br><br>There you have it!<br><br>Bugs<br>----<br><br>.. figure:: http://media.giphy.com/media/10EdqIfzllpg6A/giphy.gif<br>   :alt: bugs<br><br>   bugs<br>NOPE!! MY CODE HAS NO BUGS!11<br><br>Just joking, probably quite a few, please report them<br>`here &lt;https://github.com/manuelbua/gitver/issues&gt;`__, thanks!<br><br>.. |PyPi version| image:: https://pypip.in/v/gitver/badge.png<br>   :target: https://crate.io/packages/gitver/<br>.. |PyPi downloads| image:: https://pypip.in/d/gitver/badge.png<br>   :target: https://crate.io/packages/gitver/<br>.. |Project Stats| image:: https://ohloh.net/p/gitver/widgets/project_thin_badge.gif<br>   :target: https://ohloh.net/projects/gitver<br>.. |Flattr this git repo| image:: http://api.flattr.com/button/flattr-badge-large.png<br>   :target: https://flattr.com/submit/auto?user_id=manuelbua&amp;url=https://github.com/manuelbua/gitver&amp;title=gitver&amp;language=&amp;tags=github&amp;category=software\n          </div>"}, "last_serial": 974002, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "35bec5438e98d22008280e1a555638c7", "sha256": "8ed48645eb3f16781deaa053b703c16dcae4e8e9315b82aa61b682406ed193fb"}, "downloads": -1, "filename": "gitver-0.2.1.tar.gz", "has_sig": false, "md5_digest": "35bec5438e98d22008280e1a555638c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20250, "upload_time": "2014-01-06T19:31:19", "upload_time_iso_8601": "2014-01-06T19:31:19.661066Z", "url": "https://files.pythonhosted.org/packages/6f/eb/adf4f8f37e2de367190faf55e4116c3abffb2a3e9c504fd3ff0d53646cfa/gitver-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "ed0d01a3acb31007dc223c186258a0b7", "sha256": "fbc116c3184928b8f744381423e38fbbee37927933d9df9ba9c5f01bc7ee86d4"}, "downloads": -1, "filename": "gitver-0.2.2.tar.gz", "has_sig": false, "md5_digest": "ed0d01a3acb31007dc223c186258a0b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21082, "upload_time": "2014-01-07T01:09:43", "upload_time_iso_8601": "2014-01-07T01:09:43.714336Z", "url": "https://files.pythonhosted.org/packages/72/44/ef16df69461f4c178ca7323ece9a61411aed2b4b266b8ce53abecd2a631d/gitver-0.2.2.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "0f1495e24def728b95bdebd187f18b8e", "sha256": "5f89f9da614d4da29cc701d0877c4c54bb9d24e3f824475b429697d9aff3335e"}, "downloads": -1, "filename": "gitver-0.2.4.tar.gz", "has_sig": false, "md5_digest": "0f1495e24def728b95bdebd187f18b8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21320, "upload_time": "2014-01-07T21:45:11", "upload_time_iso_8601": "2014-01-07T21:45:11.967398Z", "url": "https://files.pythonhosted.org/packages/c2/82/4ee464ced6b8ff04f71f1bf8ad2f30ae91fa143dd609c57548a2f52a4117/gitver-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "9020e9e214021b66e2821ac16fccfb63", "sha256": "565b64108a30309561e7189b8f5eb9deca2f197c33e3f1d3fcefeec63ad7d978"}, "downloads": -1, "filename": "gitver-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9020e9e214021b66e2821ac16fccfb63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28954, "upload_time": "2014-01-18T19:24:41", "upload_time_iso_8601": "2014-01-18T19:24:41.879528Z", "url": "https://files.pythonhosted.org/packages/56/cd/698bf588dde8ddf45a140e6331185f63ce76b586952b06ff35d55f381df5/gitver-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "4dd21a2dfe3d429f0bb2b9a4be428071", "sha256": "d97b4b582560147b59ec596b8fb6d572ef82769952e5f905af4510f6c7c0ba4a"}, "downloads": -1, "filename": "gitver-0.3.1.tar.gz", "has_sig": false, "md5_digest": "4dd21a2dfe3d429f0bb2b9a4be428071", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28919, "upload_time": "2014-01-19T15:22:16", "upload_time_iso_8601": "2014-01-19T15:22:16.581660Z", "url": "https://files.pythonhosted.org/packages/f2/a6/2f8677fe762d48fbd25e0cb90b9ea9f733daf3000c39aa8863c04d5aac84/gitver-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4dd21a2dfe3d429f0bb2b9a4be428071", "sha256": "d97b4b582560147b59ec596b8fb6d572ef82769952e5f905af4510f6c7c0ba4a"}, "downloads": -1, "filename": "gitver-0.3.1.tar.gz", "has_sig": false, "md5_digest": "4dd21a2dfe3d429f0bb2b9a4be428071", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28919, "upload_time": "2014-01-19T15:22:16", "upload_time_iso_8601": "2014-01-19T15:22:16.581660Z", "url": "https://files.pythonhosted.org/packages/f2/a6/2f8677fe762d48fbd25e0cb90b9ea9f733daf3000c39aa8863c04d5aac84/gitver-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:44 2020"}