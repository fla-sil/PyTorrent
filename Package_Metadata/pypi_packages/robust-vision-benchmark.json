{"info": {"author": "Jonas Rauber & Wieland Brendel", "author_email": "opensource@bethgelab.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": ".. image:: https://travis-ci.org/bethgelab/robust-vision-benchmark.svg?branch=master\n    :target: https://travis-ci.org/bethgelab/robust-vision-benchmark\n\n=======================\nRobust Vision Benchmark\n=======================\n\nThis Python package provides utility functions to create submissions for the `Robust Vision Benchmark <https://robust.vision/benchmark>`__ and scripts to automatically test and upload them. You might also want to have a look at `Foolbox <https://github.com/bethgelab/foolbox>`__, our python toolbox to benchmark the robustness of machine learning models using a large set of adversarial attacks.\n\nInstallation\n------------\n\nWe test using Python 2.7, 3.5 and 3.6. Other Python versions might work as well, but we recommend using Python 3.5 or newer.\n\n.. code-block:: bash\n\n   pip install robust-vision-benchmark\n\nSubmitting a model\n------------------\n\nA model submission consists of a Dockerfile, a script (e.g. Python) and data (e.g. network weights).\n\nPython script\n^^^^^^^^^^^^^\n\nCreate a Python script that turns your model into a Foolbox model using one of our wrappers for TensorFlow, PyTorch, Theano, Keras, Lasagne, MXNet and starts the `model_server`.\n\n.. code-block:: python\n\n   from robust_vision_benchmark import model_server\n\n   # create your model\n   # ...\n\n   # turn it into a Foolbox model\n   model = foolbox.models.SomeModel(...)\n\n   # start the server\n   mnist_model_server(model)\n   cifar_model_server(model, channel_order='RGB or BGR')\n   imagenet_model_server(model, channel_order='RGB or BGR', image_size=224)\n\n   # For CIFAR and Imagenet, the channel_order must be set to either 'RGB' or 'BGR'.\n   # For ImageNet, the image_size must be set to an integer (usually 224 vor VGG-like networks and 299 for inception-like networks).\n\nDockerfile\n^^^^^^^^^^\n\nCreate a Dockerfile that installs all dependencies and starts the script.\n\n.. code-block:: Dockerfile\n\n   FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04\n\n   RUN apt-get update ... && install ...\n\n   RUN pip3 install --no-cache-dir robust-vision-benchmark\n\n   ...\n\n   COPY main.py main.py\n\n   CMD [\"python3\", \"./main.py\"]\n\nFor compatibility with our backend, please use a derivative of the `nvidia/cuda:8.0` image (e.g. `nvidia/cuda8.0-cudnn5-devel-ubuntu16.04`) as the base image or contact us if you have special requirements.\n\nTest the submission\n^^^^^^^^^^^^^^^^^^^\n\nPut the Dockerfile, script, data and other required files into a folder, e.g. *model* and run the following in your shell:\n\n.. code-block:: bash\n\n   rvb-test-model model/\n\nYou can find an example in *examples/model/*.\n\nUpload the submission\n^^^^^^^^^^^^^^^^^^^^^\n\nOnce your model is ready for submission, upload it:\n\n.. code-block:: bash\n\n   rvb-upload model/\n\nSubmitting\n^^^^^^^^^^\n\nGo to https://robust.vision/benchmark/participate and put the URL returned by the upload script into the `Submission URL`.\n\nSubmitting an attack\n--------------------\n\nAn attack submission consists of a Dockerfile and a script (e.g. Python).\n\nPython script\n^^^^^^^^^^^^^\n\nCreate a Python script that implements your attack and starts the `attack_server`.\n\n.. code-block:: python\n\n   from robust_vision_benchmark import attack_server\n\n   # implement your attack\n   def attack(a):\n       # ...\n\n   # start the server\n   attack_server(attack)\n\nDockerfile\n^^^^^^^^^^\n\nCreate a Dockerfile that installs all dependencies and starts the script.\n\n.. code-block:: Dockerfile\n\n   FROM python:3.6\n\n   RUN pip3 install --no-cache-dir robust-vision-benchmark\n\n   ...\n\n   COPY main.py main.py\n\n   CMD [\"python3\", \"./main.py\"]\n\nTest the submission\n^^^^^^^^^^^^^^^^^^^\n\nPut the Dockerfile, script and other required files into a folder, e.g. *attack* and run the following in your shell:\n\n.. code-block:: bash\n\n   rvb-test-attack attack/\n\nYou can find an example in *examples/attack/*.\n\nUpload the submission\n^^^^^^^^^^^^^^^^^^^^^\n\nOnce your attack is ready for submission, upload it:\n\n.. code-block:: bash\n\n   rvb-upload attack/\n\nSubmitting\n^^^^^^^^^^\n\nGo to https://robust.vision/benchmark/participate and put the URL returned by the upload script into the `Submission URL`.\n\nAuthors\n-------\n\n* `Jonas Rauber <https://github.com/jonasrauber>`_\n* `Wieland Brendel <https://github.com/wielandbrendel>`_", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bethgelab/robust-vision-benchmark", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "robust-vision-benchmark", "package_url": "https://pypi.org/project/robust-vision-benchmark/", "platform": "", "project_url": "https://pypi.org/project/robust-vision-benchmark/", "project_urls": {"Homepage": "https://github.com/bethgelab/robust-vision-benchmark"}, "release_url": "https://pypi.org/project/robust-vision-benchmark/0.9.1/", "requires_dist": null, "requires_python": "", "summary": "An HTTP server and client that provides access to Foolbox models and attacks.", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/bethgelab/robust-vision-benchmark\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/bethgelab/robust-vision-benchmark.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/077c4cace47fbe98a2a90de97816355d156d4ae1/68747470733a2f2f7472617669732d63692e6f72672f6265746867656c61622f726f627573742d766973696f6e2d62656e63686d61726b2e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"robust-vision-benchmark\">\n<h2>Robust Vision Benchmark</h2>\n<p>This Python package provides utility functions to create submissions for the <a href=\"https://robust.vision/benchmark\" rel=\"nofollow\">Robust Vision Benchmark</a> and scripts to automatically test and upload them. You might also want to have a look at <a href=\"https://github.com/bethgelab/foolbox\" rel=\"nofollow\">Foolbox</a>, our python toolbox to benchmark the robustness of machine learning models using a large set of adversarial attacks.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>We test using Python 2.7, 3.5 and 3.6. Other Python versions might work as well, but we recommend using Python 3.5 or newer.</p>\n<pre>pip install robust-vision-benchmark\n</pre>\n</div>\n<div id=\"submitting-a-model\">\n<h3>Submitting a model</h3>\n<p>A model submission consists of a Dockerfile, a script (e.g. Python) and data (e.g. network weights).</p>\n<div id=\"python-script\">\n<h4>Python script</h4>\n<p>Create a Python script that turns your model into a Foolbox model using one of our wrappers for TensorFlow, PyTorch, Theano, Keras, Lasagne, MXNet and starts the <cite>model_server</cite>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">robust_vision_benchmark</span> <span class=\"kn\">import</span> <span class=\"n\">model_server</span>\n\n<span class=\"c1\"># create your model</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># turn it into a Foolbox model</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">foolbox</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">SomeModel</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># start the server</span>\n<span class=\"n\">mnist_model_server</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n<span class=\"n\">cifar_model_server</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">channel_order</span><span class=\"o\">=</span><span class=\"s1\">'RGB or BGR'</span><span class=\"p\">)</span>\n<span class=\"n\">imagenet_model_server</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">channel_order</span><span class=\"o\">=</span><span class=\"s1\">'RGB or BGR'</span><span class=\"p\">,</span> <span class=\"n\">image_size</span><span class=\"o\">=</span><span class=\"mi\">224</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For CIFAR and Imagenet, the channel_order must be set to either 'RGB' or 'BGR'.</span>\n<span class=\"c1\"># For ImageNet, the image_size must be set to an integer (usually 224 vor VGG-like networks and 299 for inception-like networks).</span>\n</pre>\n</div>\n<div id=\"dockerfile\">\n<h4>Dockerfile</h4>\n<p>Create a Dockerfile that installs all dependencies and starts the script.</p>\n<pre><span class=\"k\">FROM</span> <span class=\"s\">nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04</span>\n\n<span class=\"k\">RUN</span> apt-get update ... <span class=\"o\">&amp;&amp;</span> install ...\n\n<span class=\"k\">RUN</span> pip3 install --no-cache-dir robust-vision-benchmark\n\n...\n\n<span class=\"k\">COPY</span> main.py main.py\n\n<span class=\"k\">CMD</span> <span class=\"p\">[</span><span class=\"s2\">\"python3\"</span><span class=\"p\">,</span> <span class=\"s2\">\"./main.py\"</span><span class=\"p\">]</span>\n</pre>\n<p>For compatibility with our backend, please use a derivative of the <cite>nvidia/cuda:8.0</cite> image (e.g. <cite>nvidia/cuda8.0-cudnn5-devel-ubuntu16.04</cite>) as the base image or contact us if you have special requirements.</p>\n</div>\n<div id=\"test-the-submission\">\n<h4>Test the submission</h4>\n<p>Put the Dockerfile, script, data and other required files into a folder, e.g. <em>model</em> and run the following in your shell:</p>\n<pre>rvb-test-model model/\n</pre>\n<p>You can find an example in <em>examples/model/</em>.</p>\n</div>\n<div id=\"upload-the-submission\">\n<h4>Upload the submission</h4>\n<p>Once your model is ready for submission, upload it:</p>\n<pre>rvb-upload model/\n</pre>\n</div>\n<div id=\"submitting\">\n<h4>Submitting</h4>\n<p>Go to <a href=\"https://robust.vision/benchmark/participate\" rel=\"nofollow\">https://robust.vision/benchmark/participate</a> and put the URL returned by the upload script into the <cite>Submission URL</cite>.</p>\n</div>\n</div>\n<div id=\"submitting-an-attack\">\n<h3>Submitting an attack</h3>\n<p>An attack submission consists of a Dockerfile and a script (e.g. Python).</p>\n<div id=\"id1\">\n<h4>Python script</h4>\n<p>Create a Python script that implements your attack and starts the <cite>attack_server</cite>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">robust_vision_benchmark</span> <span class=\"kn\">import</span> <span class=\"n\">attack_server</span>\n\n<span class=\"c1\"># implement your attack</span>\n<span class=\"k\">def</span> <span class=\"nf\">attack</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># start the server</span>\n<span class=\"n\">attack_server</span><span class=\"p\">(</span><span class=\"n\">attack</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id2\">\n<h4>Dockerfile</h4>\n<p>Create a Dockerfile that installs all dependencies and starts the script.</p>\n<pre><span class=\"k\">FROM</span> <span class=\"s\">python:3.6</span>\n\n<span class=\"k\">RUN</span> pip3 install --no-cache-dir robust-vision-benchmark\n\n...\n\n<span class=\"k\">COPY</span> main.py main.py\n\n<span class=\"k\">CMD</span> <span class=\"p\">[</span><span class=\"s2\">\"python3\"</span><span class=\"p\">,</span> <span class=\"s2\">\"./main.py\"</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"id3\">\n<h4>Test the submission</h4>\n<p>Put the Dockerfile, script and other required files into a folder, e.g. <em>attack</em> and run the following in your shell:</p>\n<pre>rvb-test-attack attack/\n</pre>\n<p>You can find an example in <em>examples/attack/</em>.</p>\n</div>\n<div id=\"id4\">\n<h4>Upload the submission</h4>\n<p>Once your attack is ready for submission, upload it:</p>\n<pre>rvb-upload attack/\n</pre>\n</div>\n<div id=\"id5\">\n<h4>Submitting</h4>\n<p>Go to <a href=\"https://robust.vision/benchmark/participate\" rel=\"nofollow\">https://robust.vision/benchmark/participate</a> and put the URL returned by the upload script into the <cite>Submission URL</cite>.</p>\n</div>\n</div>\n<div id=\"authors\">\n<h3>Authors</h3>\n<ul>\n<li><a href=\"https://github.com/jonasrauber\" rel=\"nofollow\">Jonas Rauber</a></li>\n<li><a href=\"https://github.com/wielandbrendel\" rel=\"nofollow\">Wieland Brendel</a></li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3262446, "releases": {"0.8.0": [{"comment_text": "", "digests": {"md5": "c2d6c23a13e05831adc1da0db3d25a68", "sha256": "d37d789f1b535a51ac68115e65211ec4c39866565a7fa11a38c75238954028c6"}, "downloads": -1, "filename": "robust_vision_benchmark-0.8.0.tar.gz", "has_sig": false, "md5_digest": "c2d6c23a13e05831adc1da0db3d25a68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12318332, "upload_time": "2017-08-11T00:06:02", "upload_time_iso_8601": "2017-08-11T00:06:02.891014Z", "url": "https://files.pythonhosted.org/packages/b1/58/bdc49ae2aff5d79670442fc9a5cd72d4a128a1d95b02e958c8ab0ef23201/robust_vision_benchmark-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "3993b64ce6c7decdadafad96ee0cb9d0", "sha256": "ca1a5fee412dd26c50f35371870a8e8bf4096291911abfb6e212d49625184335"}, "downloads": -1, "filename": "robust_vision_benchmark-0.8.1.tar.gz", "has_sig": false, "md5_digest": "3993b64ce6c7decdadafad96ee0cb9d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12318385, "upload_time": "2017-08-11T02:59:57", "upload_time_iso_8601": "2017-08-11T02:59:57.419557Z", "url": "https://files.pythonhosted.org/packages/65/82/0c9a65f18a00c039a5d4304a64f0434c1cbe2de91127049a0b27371c4cf4/robust_vision_benchmark-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "2470b619a2a5f5680570ea0675e90550", "sha256": "bb1026b3585563ccb17fffbe9d926fee6f20d37a5b84a8fdc3831698b78cd59b"}, "downloads": -1, "filename": "robust_vision_benchmark-0.8.2.tar.gz", "has_sig": false, "md5_digest": "2470b619a2a5f5680570ea0675e90550", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12319059, "upload_time": "2017-09-05T08:50:15", "upload_time_iso_8601": "2017-09-05T08:50:15.124709Z", "url": "https://files.pythonhosted.org/packages/55/54/5b96f4db2e5703a07bd75239fc15fa7a8f42b69e69969412294b0914a9c7/robust_vision_benchmark-0.8.2.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "5328afb11049ded71d7a53a3535b30cc", "sha256": "725f35421b151f795de9d6517f2b0883e7b587955f9b7453811c25cf5c3f430d"}, "downloads": -1, "filename": "robust_vision_benchmark-0.9.0.tar.gz", "has_sig": false, "md5_digest": "5328afb11049ded71d7a53a3535b30cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12319146, "upload_time": "2017-09-05T09:49:27", "upload_time_iso_8601": "2017-09-05T09:49:27.971658Z", "url": "https://files.pythonhosted.org/packages/50/99/0fa5b8c8c01c80cab3d3d7bc88372f55af61056db105e9e30044e1135b62/robust_vision_benchmark-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "434aa0038d77206141074cebf26f09d2", "sha256": "d598c5d96a56e6fbda8ac00eec7762dc0864620b246a2ad0e9df3c0f0271fb5a"}, "downloads": -1, "filename": "robust_vision_benchmark-0.9.1.tar.gz", "has_sig": false, "md5_digest": "434aa0038d77206141074cebf26f09d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12319113, "upload_time": "2017-10-19T09:32:53", "upload_time_iso_8601": "2017-10-19T09:32:53.988853Z", "url": "https://files.pythonhosted.org/packages/e7/89/8c93ff7b257c50fa79c065d63a724fb24c40bc62304c7e5557137f7d9b93/robust_vision_benchmark-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "434aa0038d77206141074cebf26f09d2", "sha256": "d598c5d96a56e6fbda8ac00eec7762dc0864620b246a2ad0e9df3c0f0271fb5a"}, "downloads": -1, "filename": "robust_vision_benchmark-0.9.1.tar.gz", "has_sig": false, "md5_digest": "434aa0038d77206141074cebf26f09d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12319113, "upload_time": "2017-10-19T09:32:53", "upload_time_iso_8601": "2017-10-19T09:32:53.988853Z", "url": "https://files.pythonhosted.org/packages/e7/89/8c93ff7b257c50fa79c065d63a724fb24c40bc62304c7e5557137f7d9b93/robust_vision_benchmark-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:37 2020"}