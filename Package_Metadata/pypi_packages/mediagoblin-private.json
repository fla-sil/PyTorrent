{"info": {"author": "Jerome Lebleu", "author_email": "jerome.lebleu@mailoo.org", "bugtrack_url": null, "classifiers": [], "description": "===================\nmediagoblin-private\n===================\n\nThis plugins restricts the access of anonymous users to your GNU MediaGoblin\ninstance. You can choose between denying the access - and allowing as needed\nsome route paths - or allowing it by default - and denying some route paths.\n\nSet up the private plugin\n=========================\n\n1. Install this Python package from PyPi.\n\n   ::\n\n     $ pip install mediagoblin-private\n\n   Or if you've checked out this plugin, you should be able to build and\n   install it in the same virtual environment than MediaGoblin. Let's say\n   it's in the same parent directory, you can execute:\n\n   ::\n\n     $ ../mediagoblin/bin/python setup.py build\n     $ ../mediagoblin/bin/python setup.py install\n\n2. Enable the mediagoblin-private plugin by adding the following line\n   to the ``[plugins]`` section of your MediaGoblin configuration file.\n\n   ::\n\n     [[mediagoblin_private]]\n\n3. Restart the MediaGoblin instance for the configuration file changes\n   to be effective.\n\nConfigure the private plugin\n============================\n\nYou should first set ``deny_access`` value to define if the access must be\ndenied - e.g. ``true``, the default - or allowed - e.g. ``false`` - to\nanonymous users.\n\nYou can also define some route paths exceptions to reverse the restriction\nbehaviour. It could be useful if you want to deny the access of your\ninstance but keep some public pages, for example. You would also want to\nkeep an open MediaGoblin instance but deny the access of anonymous users to\nsome pages or media. Anyway, you can set the following to define your\nexceptions:\n\n* ``path_exceptions``: a list - e.g. comma-separated values - of strict route\n  path for which the access will either be denied or allowed.\n* ``path_regex_exceptions``: a list of regular expression to match the route\n  path to either deny or allow - see the `Regular Expression HOWTO`_.\n\nNote that route path which starts with ``/auth/`` will always be allowed.\n\nAs an example, the following deny the access of anonymous users to your\nMediaGoblin instance except for the homepage - e.g. ``/``, an about page\nat ``/about/`` and route paths which starts with ``/public/``:\n\n::\n\n    [[mediagoblin_private]]\n    deny_access = true\n    path_exceptions = '/', '/about/'\n    path_regex_exceptions = '/public/.*',\n\nDo not forget the trailing comma in case of a single item in the\n``path_exceptions`` or ``path_regex_exceptions`` list!\n\n.. _`Regular Expression HOWTO`: https://docs.python.org/2/howto/regex.html", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://code.maroufle.fr/jerome/mediagoblin-private", "keywords": "", "license": "AGPLv3", "maintainer": "", "maintainer_email": "", "name": "mediagoblin-private", "package_url": "https://pypi.org/project/mediagoblin-private/", "platform": "", "project_url": "https://pypi.org/project/mediagoblin-private/", "project_urls": {"Homepage": "https://code.maroufle.fr/jerome/mediagoblin-private"}, "release_url": "https://pypi.org/project/mediagoblin-private/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Restrict the access of anonymous users", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This plugins restricts the access of anonymous users to your GNU MediaGoblin\ninstance. You can choose between denying the access - and allowing as needed\nsome route paths - or allowing it by default - and denying some route paths.</p>\n<div id=\"set-up-the-private-plugin\">\n<h2>Set up the private plugin</h2>\n<ol>\n<li><p>Install this Python package from PyPi.</p>\n<pre>$ pip install mediagoblin-private\n</pre>\n<p>Or if you\u2019ve checked out this plugin, you should be able to build and\ninstall it in the same virtual environment than MediaGoblin. Let\u2019s say\nit\u2019s in the same parent directory, you can execute:</p>\n<pre>$ ../mediagoblin/bin/python setup.py build\n$ ../mediagoblin/bin/python setup.py install\n</pre>\n</li>\n<li><p>Enable the mediagoblin-private plugin by adding the following line\nto the <tt>[plugins]</tt> section of your MediaGoblin configuration file.</p>\n<pre>[[mediagoblin_private]]\n</pre>\n</li>\n<li><p>Restart the MediaGoblin instance for the configuration file changes\nto be effective.</p>\n</li>\n</ol>\n</div>\n<div id=\"configure-the-private-plugin\">\n<h2>Configure the private plugin</h2>\n<p>You should first set <tt>deny_access</tt> value to define if the access must be\ndenied - e.g. <tt>true</tt>, the default - or allowed - e.g. <tt>false</tt> - to\nanonymous users.</p>\n<p>You can also define some route paths exceptions to reverse the restriction\nbehaviour. It could be useful if you want to deny the access of your\ninstance but keep some public pages, for example. You would also want to\nkeep an open MediaGoblin instance but deny the access of anonymous users to\nsome pages or media. Anyway, you can set the following to define your\nexceptions:</p>\n<ul>\n<li><tt>path_exceptions</tt>: a list - e.g. comma-separated values - of strict route\npath for which the access will either be denied or allowed.</li>\n<li><tt>path_regex_exceptions</tt>: a list of regular expression to match the route\npath to either deny or allow - see the <a href=\"https://docs.python.org/2/howto/regex.html\" rel=\"nofollow\">Regular Expression HOWTO</a>.</li>\n</ul>\n<p>Note that route path which starts with <tt>/auth/</tt> will always be allowed.</p>\n<p>As an example, the following deny the access of anonymous users to your\nMediaGoblin instance except for the homepage - e.g. <tt>/</tt>, an about page\nat <tt>/about/</tt> and route paths which starts with <tt>/public/</tt>:</p>\n<pre>[[mediagoblin_private]]\ndeny_access = true\npath_exceptions = '/', '/about/'\npath_regex_exceptions = '/public/.*',\n</pre>\n<p>Do not forget the trailing comma in case of a single item in the\n<tt>path_exceptions</tt> or <tt>path_regex_exceptions</tt> list!</p>\n</div>\n\n          </div>"}, "last_serial": 2319495, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "25ffcd42b6a766b4e3c1191f38ad869a", "sha256": "dab9fd23eab2793d4dbd653e2cf1f0837effe3ae416b2ad40bceb0d8a0f5a81f"}, "downloads": -1, "filename": "mediagoblin_private-0.1.0.tar.gz", "has_sig": true, "md5_digest": "25ffcd42b6a766b4e3c1191f38ad869a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3325, "upload_time": "2016-08-29T15:03:21", "upload_time_iso_8601": "2016-08-29T15:03:21.696560Z", "url": "https://files.pythonhosted.org/packages/23/53/92e2c5a0447faf9e8af3c513972b28e738f4842bd8c9b1abd809ce047fb0/mediagoblin_private-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2e7a1ca9b07616dc4d38f82981bedcd0", "sha256": "00b39285727d226a99282b7545df96315c54f767a87d8dd34324ab67db7aa3e2"}, "downloads": -1, "filename": "mediagoblin_private-0.1.1.tar.gz", "has_sig": true, "md5_digest": "2e7a1ca9b07616dc4d38f82981bedcd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3577, "upload_time": "2016-08-29T15:25:31", "upload_time_iso_8601": "2016-08-29T15:25:31.659771Z", "url": "https://files.pythonhosted.org/packages/40/54/01f63242c26c763407200c42d6fac41bf88e327a0d1abfb12e6a464fba86/mediagoblin_private-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3d4d0f7c78ad0700390734d58c86a512", "sha256": "7bb59a61fe8f7bf1120e0f30e52d27264b41d4dd4e4a4151038edc570316a999"}, "downloads": -1, "filename": "mediagoblin_private-0.2.0.tar.gz", "has_sig": true, "md5_digest": "3d4d0f7c78ad0700390734d58c86a512", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3611, "upload_time": "2016-09-01T20:45:54", "upload_time_iso_8601": "2016-09-01T20:45:54.876575Z", "url": "https://files.pythonhosted.org/packages/f1/e5/8b6150738b7844fc822dd8f45795933dc967ab106cc01c140a0cb45eecc6/mediagoblin_private-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d4d0f7c78ad0700390734d58c86a512", "sha256": "7bb59a61fe8f7bf1120e0f30e52d27264b41d4dd4e4a4151038edc570316a999"}, "downloads": -1, "filename": "mediagoblin_private-0.2.0.tar.gz", "has_sig": true, "md5_digest": "3d4d0f7c78ad0700390734d58c86a512", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3611, "upload_time": "2016-09-01T20:45:54", "upload_time_iso_8601": "2016-09-01T20:45:54.876575Z", "url": "https://files.pythonhosted.org/packages/f1/e5/8b6150738b7844fc822dd8f45795933dc967ab106cc01c140a0cb45eecc6/mediagoblin_private-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:36 2020"}