{"info": {"author": "Schicksal", "author_email": "mhaisham79@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "## Schnittstelle\n\n#### Installation\n\n> pip install schnittstelle\n\n##### Import\n\n```python\n\n# completer\nfrom schnittstelle import Completer, CompleterStyle, RunnableCompleter\n\n# loader\nfrom schnittstelle import Loader, LoaderStyle, RunnableLoader\n\n# decorators\nfrom schnittstelle import decorators\n\n```\n\n#### [**Completer**](https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/completer/__init__.py)\n\n```\n[\u00e2\u0153\u201c] complete\n[X] fail\n```\n\nWhile completer is drawing to `print` use\n```python\ncompleter.print('string to print')\n```\n\n* #### Use\n\n    ##### `with` statement\n\n    > Recommended\n\n    ```python\n      with Completer(message='Dummy bar') as completer:\n        # code\n        pass\n    ```\n\n    The object will auto complete when on exiting `with` statement\n\n    You may also exit using `completer.complete` or `completer.fail()`\n\n    ##### Decorator\n\n    ```python\n    from schnittstelle import decorators\n\n    @decorators.Completer(message='foo bar')\n    def foo(s):\n        # code\n    ``` \n\n    Everytime the function is called Completer will appear\n\n    In case of exception it is caught and runs the fail method of completer\n\n    Using this method you're not able to access completer class itself\n\n    ##### Inline\n\n    ```python\n    completer = Completer().init()\n\n    # code\n\n    completer.complete() # or completer.fail()\n    ```   \n\n    Exit the completer using `completer.complete` or `completer.fail()`\n\n    ##### Runnable\n\n    > Not recommended\n\n    ```python\n    def foo(s):\n      # code\n\n    runnable = RunnableCompleter(foo, message='foo bar')\n    runnable.run('foo')\n    ```\n\n    All arguments go into run method\n\n    In case of exception it is caught and runs the fail method of completer\n\n    Using this method you're not able to access completer class itself\n\n* #### Configuration\n\n    * [**style**](https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/loader/style.py)\n\n        Takes in class [CompleterStyle](https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/loader/style.py)\n\n        ##### CompleterStyle\n\n        ###### _Static Constuctors_\n\n        **`default`** default settings\n\n        ###### _Attributes_\n\n        **`prefix`**\n\n        character before char\n\n        default: [\n\n        **`postfix`**\n\n        character after char\n\n        default: ]\n\n        **`success`**\n\n        color of character when successful\n\n        default: GREEN\n\n        **`error`**\n\n        color of character when unsuccessful\n\n        default: RED\n\n        **`info`**\n\n        color of character in info messages\n\n        default: BLUE\n\n\n\n\n#### [**Loader**](https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/loader/)\n\nThis is the `progress bar` class of package\n\n```\n[==   ] Dummy bar\n```\n\nWhile the progress bar is in progress to `print` use\n```python\nloader.print('string to print')\n```\n\n* #### Use\n\n    ##### `with` statement\n\n    > Recommended\n\n    ```python\n      with Loader(message='Dummy bar') as loader:\n        # code\n        pass\n    ```\n\n    The bar will auto complete when on exiting `with` statement\n\n    You may also exit using `loader.complete` or `loader.fail()`\n\n    ##### Decorator\n\n    ```python\n    from schnittstelle import decorators\n\n    @decorators.Loader(message='foo bar')\n    def foo(s):\n        # code\n    ``` \n\n    Everytime the function is called loader will appear\n\n    In case of exception it is caught and runs the fail method of loader\n\n    Using this method you're not able to access loader class itself\n\n    ##### Inline\n\n    ```python\n    loader = Loader().init()\n\n    # code\n\n    loader.complete() # or loader.fail()\n    ```   \n\n    Exit the progress bar using `loader.complete` or `loader.fail()`\n\n    ##### Runnable\n\n    > Not recommended\n\n    ```python\n    def foo(s):\n      # code\n\n    runnable = RunnableLoader(foo, message='foo bar')\n    runnable.run('foo')\n    ```\n\n    All arguments go into run method\n\n    In case of exception it is caught and runs the fail method of loader\n\n    Using this method you're not able to access loader class itself\n\n* #### Configurations\n\n    To change the configurations at runtime use `loader.brush.[configuration]` syntax\n\n    _configurations need to be passed into class initiator as keyword arguments_\n\n    * ***value***\n\n        Current value of progress\n\n        If this value is less than 0, the progress bar is `indeterminate`\n\n    * ***total***\n\n        Total progress for the bar\n\n    * ***message***\n\n        Message label to display on progress bar\n\n        In the above example it is **Dummy bar**\n\n    * ***frequency***\n\n        Number of refreshes per second\n\n        This will determine the `speed` of the progress bar as well\n\n        If frequency is too low, progress bar might not show progress as intended\n\n        `default` is 20 refreshes per sec\n\n    * [**style**](https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/loader/style.py)\n\n        Takes in class [LoaderStyle](https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/loader/style.py)\n\n        ##### LoaderStyle\n\n        ###### _Static Constuctors_\n\n        **`default`** default settings\n\n        **`ascii`** only containing ascii chars\n\n        ###### _Attributes_\n\n        **`width`** \n\n        width of the progress bar\n\n        default: 5\n\n        **`cursor_width`**\n\n        Fill width of indeterminate progress bar\n\n        default: 3\n\n        **`fill`**\n\n        Fill indicator charactor\n\n        default: FULL_BLOCK\n\n        **`empty`**\n\n        empty indicator charactor\n\n        default: SPACE\n\n        **`prefix`**\n\n        character before progress bar\n\n        default: [\n\n        **`postfix`**\n\n        character after progress bar\n\n        default: ]\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mHaisham/schnittstelle", "keywords": "console interface progress", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "schnittstelle", "package_url": "https://pypi.org/project/schnittstelle/", "platform": "", "project_url": "https://pypi.org/project/schnittstelle/", "project_urls": {"Homepage": "https://github.com/mHaisham/schnittstelle", "Source code": "https://github.com/mHaisham/schnittstelle"}, "release_url": "https://pypi.org/project/schnittstelle/0.1.0/", "requires_dist": ["colorama"], "requires_python": ">=3.6", "summary": "A console ui interface", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Schnittstelle</h2>\n<h4>Installation</h4>\n<blockquote>\n<p>pip install schnittstelle</p>\n</blockquote>\n<h5>Import</h5>\n<pre><span class=\"c1\"># completer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">schnittstelle</span> <span class=\"kn\">import</span> <span class=\"n\">Completer</span><span class=\"p\">,</span> <span class=\"n\">CompleterStyle</span><span class=\"p\">,</span> <span class=\"n\">RunnableCompleter</span>\n\n<span class=\"c1\"># loader</span>\n<span class=\"kn\">from</span> <span class=\"nn\">schnittstelle</span> <span class=\"kn\">import</span> <span class=\"n\">Loader</span><span class=\"p\">,</span> <span class=\"n\">LoaderStyle</span><span class=\"p\">,</span> <span class=\"n\">RunnableLoader</span>\n\n<span class=\"c1\"># decorators</span>\n<span class=\"kn\">from</span> <span class=\"nn\">schnittstelle</span> <span class=\"kn\">import</span> <span class=\"n\">decorators</span>\n</pre>\n<h4><a href=\"https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/completer/__init__.py\" rel=\"nofollow\"><strong>Completer</strong></a></h4>\n<pre><code>[\u00e2\u0153\u201c] complete\n[X] fail\n</code></pre>\n<p>While completer is drawing to <code>print</code> use</p>\n<pre><span class=\"n\">completer</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">'string to print'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>Use</h4>\n<h5><code>with</code> statement</h5>\n<blockquote>\n<p>Recommended</p>\n</blockquote>\n<pre>  <span class=\"k\">with</span> <span class=\"n\">Completer</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'Dummy bar'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">completer</span><span class=\"p\">:</span>\n    <span class=\"c1\"># code</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>The object will auto complete when on exiting <code>with</code> statement</p>\n<p>You may also exit using <code>completer.complete</code> or <code>completer.fail()</code></p>\n<h5>Decorator</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">schnittstelle</span> <span class=\"kn\">import</span> <span class=\"n\">decorators</span>\n\n<span class=\"nd\">@decorators</span><span class=\"o\">.</span><span class=\"n\">Completer</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'foo bar'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"c1\"># code</span>\n</pre>\n<p>Everytime the function is called Completer will appear</p>\n<p>In case of exception it is caught and runs the fail method of completer</p>\n<p>Using this method you're not able to access completer class itself</p>\n<h5>Inline</h5>\n<pre><span class=\"n\">completer</span> <span class=\"o\">=</span> <span class=\"n\">Completer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># code</span>\n\n<span class=\"n\">completer</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"p\">()</span> <span class=\"c1\"># or completer.fail()</span>\n</pre>\n<p>Exit the completer using <code>completer.complete</code> or <code>completer.fail()</code></p>\n<h5>Runnable</h5>\n<blockquote>\n<p>Not recommended</p>\n</blockquote>\n<pre><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n  <span class=\"c1\"># code</span>\n\n<span class=\"n\">runnable</span> <span class=\"o\">=</span> <span class=\"n\">RunnableCompleter</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'foo bar'</span><span class=\"p\">)</span>\n<span class=\"n\">runnable</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n</pre>\n<p>All arguments go into run method</p>\n<p>In case of exception it is caught and runs the fail method of completer</p>\n<p>Using this method you're not able to access completer class itself</p>\n</li>\n<li>\n<h4>Configuration</h4>\n<ul>\n<li>\n<p><a href=\"https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/loader/style.py\" rel=\"nofollow\"><strong>style</strong></a></p>\n<p>Takes in class <a href=\"https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/loader/style.py\" rel=\"nofollow\">CompleterStyle</a></p>\n<h5>CompleterStyle</h5>\n<h6><em>Static Constuctors</em></h6>\n<p><strong><code>default</code></strong> default settings</p>\n<h6><em>Attributes</em></h6>\n<p><strong><code>prefix</code></strong></p>\n<p>character before char</p>\n<p>default: [</p>\n<p><strong><code>postfix</code></strong></p>\n<p>character after char</p>\n<p>default: ]</p>\n<p><strong><code>success</code></strong></p>\n<p>color of character when successful</p>\n<p>default: GREEN</p>\n<p><strong><code>error</code></strong></p>\n<p>color of character when unsuccessful</p>\n<p>default: RED</p>\n<p><strong><code>info</code></strong></p>\n<p>color of character in info messages</p>\n<p>default: BLUE</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4><a href=\"https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/loader/\" rel=\"nofollow\"><strong>Loader</strong></a></h4>\n<p>This is the <code>progress bar</code> class of package</p>\n<pre><code>[==   ] Dummy bar\n</code></pre>\n<p>While the progress bar is in progress to <code>print</code> use</p>\n<pre><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">'string to print'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<h4>Use</h4>\n<h5><code>with</code> statement</h5>\n<blockquote>\n<p>Recommended</p>\n</blockquote>\n<pre>  <span class=\"k\">with</span> <span class=\"n\">Loader</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'Dummy bar'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">loader</span><span class=\"p\">:</span>\n    <span class=\"c1\"># code</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>The bar will auto complete when on exiting <code>with</code> statement</p>\n<p>You may also exit using <code>loader.complete</code> or <code>loader.fail()</code></p>\n<h5>Decorator</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">schnittstelle</span> <span class=\"kn\">import</span> <span class=\"n\">decorators</span>\n\n<span class=\"nd\">@decorators</span><span class=\"o\">.</span><span class=\"n\">Loader</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'foo bar'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"c1\"># code</span>\n</pre>\n<p>Everytime the function is called loader will appear</p>\n<p>In case of exception it is caught and runs the fail method of loader</p>\n<p>Using this method you're not able to access loader class itself</p>\n<h5>Inline</h5>\n<pre><span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">Loader</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># code</span>\n\n<span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"p\">()</span> <span class=\"c1\"># or loader.fail()</span>\n</pre>\n<p>Exit the progress bar using <code>loader.complete</code> or <code>loader.fail()</code></p>\n<h5>Runnable</h5>\n<blockquote>\n<p>Not recommended</p>\n</blockquote>\n<pre><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n  <span class=\"c1\"># code</span>\n\n<span class=\"n\">runnable</span> <span class=\"o\">=</span> <span class=\"n\">RunnableLoader</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'foo bar'</span><span class=\"p\">)</span>\n<span class=\"n\">runnable</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n</pre>\n<p>All arguments go into run method</p>\n<p>In case of exception it is caught and runs the fail method of loader</p>\n<p>Using this method you're not able to access loader class itself</p>\n</li>\n<li>\n<h4>Configurations</h4>\n<p>To change the configurations at runtime use <code>loader.brush.[configuration]</code> syntax</p>\n<p><em>configurations need to be passed into class initiator as keyword arguments</em></p>\n<ul>\n<li>\n<p><em><strong>value</strong></em></p>\n<p>Current value of progress</p>\n<p>If this value is less than 0, the progress bar is <code>indeterminate</code></p>\n</li>\n<li>\n<p><em><strong>total</strong></em></p>\n<p>Total progress for the bar</p>\n</li>\n<li>\n<p><em><strong>message</strong></em></p>\n<p>Message label to display on progress bar</p>\n<p>In the above example it is <strong>Dummy bar</strong></p>\n</li>\n<li>\n<p><em><strong>frequency</strong></em></p>\n<p>Number of refreshes per second</p>\n<p>This will determine the <code>speed</code> of the progress bar as well</p>\n<p>If frequency is too low, progress bar might not show progress as intended</p>\n<p><code>default</code> is 20 refreshes per sec</p>\n</li>\n<li>\n<p><a href=\"https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/loader/style.py\" rel=\"nofollow\"><strong>style</strong></a></p>\n<p>Takes in class <a href=\"https://github.com/mHaisham/schnittstelle/blob/master/schnittstelle/loader/style.py\" rel=\"nofollow\">LoaderStyle</a></p>\n<h5>LoaderStyle</h5>\n<h6><em>Static Constuctors</em></h6>\n<p><strong><code>default</code></strong> default settings</p>\n<p><strong><code>ascii</code></strong> only containing ascii chars</p>\n<h6><em>Attributes</em></h6>\n<p><strong><code>width</code></strong></p>\n<p>width of the progress bar</p>\n<p>default: 5</p>\n<p><strong><code>cursor_width</code></strong></p>\n<p>Fill width of indeterminate progress bar</p>\n<p>default: 3</p>\n<p><strong><code>fill</code></strong></p>\n<p>Fill indicator charactor</p>\n<p>default: FULL_BLOCK</p>\n<p><strong><code>empty</code></strong></p>\n<p>empty indicator charactor</p>\n<p>default: SPACE</p>\n<p><strong><code>prefix</code></strong></p>\n<p>character before progress bar</p>\n<p>default: [</p>\n<p><strong><code>postfix</code></strong></p>\n<p>character after progress bar</p>\n<p>default: ]</p>\n</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6422913, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "635ab6c17013a929a00c045af109ab11", "sha256": "9d6b0e535d48559162f9b3431ce6db0e4004a59dbf3aee4ab61640c439c60ab5"}, "downloads": -1, "filename": "schnittstelle-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "635ab6c17013a929a00c045af109ab11", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14578, "upload_time": "2020-01-09T15:50:19", "upload_time_iso_8601": "2020-01-09T15:50:19.370729Z", "url": "https://files.pythonhosted.org/packages/90/d3/00fe6cfe8623e59d1a36a5025800cad230b253f35c2ff023847ce278f938/schnittstelle-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7248f323f5d84a3a8f4a2f8642bbac6", "sha256": "12a90f360d63f9cbed239ab3cfde6edbb936f00238a00c4a869ed9034c7e2dcf"}, "downloads": -1, "filename": "schnittstelle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b7248f323f5d84a3a8f4a2f8642bbac6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9510, "upload_time": "2020-01-09T15:50:22", "upload_time_iso_8601": "2020-01-09T15:50:22.345489Z", "url": "https://files.pythonhosted.org/packages/1b/9a/539f5dbbe426a1184b27ceccdfc05fd8dc44c2eb32a96ff0a8a5fe9e1cf4/schnittstelle-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "635ab6c17013a929a00c045af109ab11", "sha256": "9d6b0e535d48559162f9b3431ce6db0e4004a59dbf3aee4ab61640c439c60ab5"}, "downloads": -1, "filename": "schnittstelle-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "635ab6c17013a929a00c045af109ab11", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14578, "upload_time": "2020-01-09T15:50:19", "upload_time_iso_8601": "2020-01-09T15:50:19.370729Z", "url": "https://files.pythonhosted.org/packages/90/d3/00fe6cfe8623e59d1a36a5025800cad230b253f35c2ff023847ce278f938/schnittstelle-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7248f323f5d84a3a8f4a2f8642bbac6", "sha256": "12a90f360d63f9cbed239ab3cfde6edbb936f00238a00c4a869ed9034c7e2dcf"}, "downloads": -1, "filename": "schnittstelle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b7248f323f5d84a3a8f4a2f8642bbac6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9510, "upload_time": "2020-01-09T15:50:22", "upload_time_iso_8601": "2020-01-09T15:50:22.345489Z", "url": "https://files.pythonhosted.org/packages/1b/9a/539f5dbbe426a1184b27ceccdfc05fd8dc44c2eb32a96ff0a8a5fe9e1cf4/schnittstelle-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:45 2020"}