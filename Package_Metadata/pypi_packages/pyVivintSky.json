{"info": {"author": "Will Oldenburg", "author_email": "silvertoken99@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pyVivintSky\n\nA Python library for interacting with Vivint Sky API.\n\nI own a system by Vivint and was annoyed when I found they didn't post any information about how the API works.\nAfter looking over the internet I was able to find a few pieces of information and one gem written by Tim Harper. The homebridge site makes a claim that Tim used to be\na Vivint employee which I have no reason to doubt and honestly his work would require some type of inside knowledge to the API.\n\nMy intent here was to combine all the work that has been done over the last couple of years and combine them into a working library so I can add an integration to the\nHome Automation System called Home Assistant (https://www.home-assistant.io/).\n\n## Credit\n\n| Name       |                                                                       Description                                                                       | Link                                            |\n| :--------- | :-----------------------------------------------------------------------------------------------------------------------------------------------------: | :---------------------------------------------- |\n| Tim Harper | Tim released a version for Homebridge with very useful information on how the API works. This served as the main basis for how I wrote the integration. | https://github.com/timcharper/homebridge-vivint |\n| Reibart    |            Reibart did a lot work trying to reverse the API via browser calls. I used the information from this project to enhance this one.            | https://github.com/Riebart/vivint.py            |\n| Ovirs      |                          Ovirs has some additions he made to Reibart work above and it contains information on other devices.                           | https://github.com/ovirs/pyvivint               |\n| jhutchins  |                 JHutchins did a homework project using the devices and his site contains some infmormatio on the thermostat API calls.                  | https://github.com/jhutchins/vivint             |\n\n## Features\n\n### Authentication\n\nAuthentication is handled currently via username and password. I would recommend setting up a user on Vivint for just this purpose. This makes it easy to\ndistinguish when events are coming from automation.\n\nThis does direct calls to the Vivint API and stores a session key that last 20 mins by default. I then check for the expiration of this key on each call in the future\nlogin again if its expired.\n\n### PubNub\n\nMessage states and changes to devices are handled by PubNub. This API subscribes to the panels PubNub channel and is able to handle messages like doors opening\nand closing.\n\n## Devices\n\n### Panel\n\nThis is the root device and all child devices are attached to it. Looking at the API its possible for an account to have more than one panel and this makes attempts to handle that.\n\n| Feature      |              Status |\n| :----------- | ------------------: |\n| Armed State  |         In Progress |\n| Update State | Not Implemented Yet |\n| PubNub       | Not Implemented Yet |\n\n### Wireless Sensors\n\nThese are any device that remotely connect to the sytem via wifi. This includes door sensors, break glass, and motion detectors.\n\n| Feature |  Status |\n| :------ | ------: |\n| Name    | Working |\n| State   | Working |\n| PubNub  | Working |\n\n### Thermostat\n\nI don't own one of these yet but there is enough information on the other sites I think to implement the features.\n\n| Feature | Status |\n| :------ | -----: |\n|         |        |\n\n### Door Locks\n\nI don't own any of these but there is enough information on the other sites I think to implement the features.\n\n| Feature | Status |\n| :------ | -----: |\n|         |        |\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/silvertoken/pyvivintsky", "keywords": "vivint", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyVivintSky", "package_url": "https://pypi.org/project/pyVivintSky/", "platform": "", "project_url": "https://pypi.org/project/pyVivintSky/", "project_urls": {"Homepage": "https://github.com/silvertoken/pyvivintsky"}, "release_url": "https://pypi.org/project/pyVivintSky/0.0.2/", "requires_dist": ["aiohttp (>=3.6)", "pubnub (>=4.5)"], "requires_python": ">=3.6", "summary": "Python library for interacting with Vivint Sky API", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyVivintSky</h1>\n<p>A Python library for interacting with Vivint Sky API.</p>\n<p>I own a system by Vivint and was annoyed when I found they didn't post any information about how the API works.\nAfter looking over the internet I was able to find a few pieces of information and one gem written by Tim Harper. The homebridge site makes a claim that Tim used to be\na Vivint employee which I have no reason to doubt and honestly his work would require some type of inside knowledge to the API.</p>\n<p>My intent here was to combine all the work that has been done over the last couple of years and combine them into a working library so I can add an integration to the\nHome Automation System called Home Assistant (<a href=\"https://www.home-assistant.io/\" rel=\"nofollow\">https://www.home-assistant.io/</a>).</p>\n<h2>Credit</h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"center\">Description</th>\n<th align=\"left\">Link</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Tim Harper</td>\n<td align=\"center\">Tim released a version for Homebridge with very useful information on how the API works. This served as the main basis for how I wrote the integration.</td>\n<td align=\"left\"><a href=\"https://github.com/timcharper/homebridge-vivint\" rel=\"nofollow\">https://github.com/timcharper/homebridge-vivint</a></td>\n</tr>\n<tr>\n<td align=\"left\">Reibart</td>\n<td align=\"center\">Reibart did a lot work trying to reverse the API via browser calls. I used the information from this project to enhance this one.</td>\n<td align=\"left\"><a href=\"https://github.com/Riebart/vivint.py\" rel=\"nofollow\">https://github.com/Riebart/vivint.py</a></td>\n</tr>\n<tr>\n<td align=\"left\">Ovirs</td>\n<td align=\"center\">Ovirs has some additions he made to Reibart work above and it contains information on other devices.</td>\n<td align=\"left\"><a href=\"https://github.com/ovirs/pyvivint\" rel=\"nofollow\">https://github.com/ovirs/pyvivint</a></td>\n</tr>\n<tr>\n<td align=\"left\">jhutchins</td>\n<td align=\"center\">JHutchins did a homework project using the devices and his site contains some infmormatio on the thermostat API calls.</td>\n<td align=\"left\"><a href=\"https://github.com/jhutchins/vivint\" rel=\"nofollow\">https://github.com/jhutchins/vivint</a></td>\n</tr></tbody></table>\n<h2>Features</h2>\n<h3>Authentication</h3>\n<p>Authentication is handled currently via username and password. I would recommend setting up a user on Vivint for just this purpose. This makes it easy to\ndistinguish when events are coming from automation.</p>\n<p>This does direct calls to the Vivint API and stores a session key that last 20 mins by default. I then check for the expiration of this key on each call in the future\nlogin again if its expired.</p>\n<h3>PubNub</h3>\n<p>Message states and changes to devices are handled by PubNub. This API subscribes to the panels PubNub channel and is able to handle messages like doors opening\nand closing.</p>\n<h2>Devices</h2>\n<h3>Panel</h3>\n<p>This is the root device and all child devices are attached to it. Looking at the API its possible for an account to have more than one panel and this makes attempts to handle that.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Feature</th>\n<th align=\"right\">Status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Armed State</td>\n<td align=\"right\">In Progress</td>\n</tr>\n<tr>\n<td align=\"left\">Update State</td>\n<td align=\"right\">Not Implemented Yet</td>\n</tr>\n<tr>\n<td align=\"left\">PubNub</td>\n<td align=\"right\">Not Implemented Yet</td>\n</tr></tbody></table>\n<h3>Wireless Sensors</h3>\n<p>These are any device that remotely connect to the sytem via wifi. This includes door sensors, break glass, and motion detectors.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Feature</th>\n<th align=\"right\">Status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Name</td>\n<td align=\"right\">Working</td>\n</tr>\n<tr>\n<td align=\"left\">State</td>\n<td align=\"right\">Working</td>\n</tr>\n<tr>\n<td align=\"left\">PubNub</td>\n<td align=\"right\">Working</td>\n</tr></tbody></table>\n<h3>Thermostat</h3>\n<p>I don't own one of these yet but there is enough information on the other sites I think to implement the features.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Feature</th>\n<th align=\"right\">Status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"></td>\n<td align=\"right\"></td>\n</tr></tbody></table>\n<h3>Door Locks</h3>\n<p>I don't own any of these but there is enough information on the other sites I think to implement the features.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Feature</th>\n<th align=\"right\">Status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"></td>\n<td align=\"right\"></td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 6817814, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "463f28dff8f59eeb233d4f63abe633db", "sha256": "07acd8d30dae5e272b2501a87f9baff2f70cdbabe2a0e2cbf12a036f2b09dcda"}, "downloads": -1, "filename": "pyVivintSky-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "463f28dff8f59eeb233d4f63abe633db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9208, "upload_time": "2020-03-15T18:39:07", "upload_time_iso_8601": "2020-03-15T18:39:07.027224Z", "url": "https://files.pythonhosted.org/packages/2c/5c/e5a761c5eafe076b695a6007e7e0c9ea8b8d97016ca668e3f675203034ee/pyVivintSky-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "079ec409951302ee8c59170416ca2a14", "sha256": "2d7e4a5e23a648176dd37c2e53f6f8efdc1f36f6bf015dc07746c03ce9eb0a54"}, "downloads": -1, "filename": "pyVivintSky-0.0.1.tar.gz", "has_sig": false, "md5_digest": "079ec409951302ee8c59170416ca2a14", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6869, "upload_time": "2020-03-15T18:39:09", "upload_time_iso_8601": "2020-03-15T18:39:09.016212Z", "url": "https://files.pythonhosted.org/packages/c9/53/b38d3f422408176bce776f4d33dc4d84ace02c26fb854fafcf84e3f57013/pyVivintSky-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5809042db416dc853123fb10b4951232", "sha256": "52aa97a264c082f752b87dcc03f8fdfe32bd5c3649075741c44a02e6db43d56e"}, "downloads": -1, "filename": "pyVivintSky-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5809042db416dc853123fb10b4951232", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9340, "upload_time": "2020-03-16T00:29:22", "upload_time_iso_8601": "2020-03-16T00:29:22.393755Z", "url": "https://files.pythonhosted.org/packages/7b/12/1b5977d062f14c94fd7a91d704e8a72e66888c9bec657fd9a714c1bdf9ef/pyVivintSky-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5e566a7cc80cbe75cced445a4239d1e", "sha256": "c97c48ff50bac2b5e1511795db585b32d000f6bf3211e969a611ac731452c633"}, "downloads": -1, "filename": "pyVivintSky-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d5e566a7cc80cbe75cced445a4239d1e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7033, "upload_time": "2020-03-16T00:29:23", "upload_time_iso_8601": "2020-03-16T00:29:23.843105Z", "url": "https://files.pythonhosted.org/packages/f9/de/082d9dd945aaaba44750043b4a9deb3d2f02bc42149b7ea0c2e96ae8be5f/pyVivintSky-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5809042db416dc853123fb10b4951232", "sha256": "52aa97a264c082f752b87dcc03f8fdfe32bd5c3649075741c44a02e6db43d56e"}, "downloads": -1, "filename": "pyVivintSky-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5809042db416dc853123fb10b4951232", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9340, "upload_time": "2020-03-16T00:29:22", "upload_time_iso_8601": "2020-03-16T00:29:22.393755Z", "url": "https://files.pythonhosted.org/packages/7b/12/1b5977d062f14c94fd7a91d704e8a72e66888c9bec657fd9a714c1bdf9ef/pyVivintSky-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5e566a7cc80cbe75cced445a4239d1e", "sha256": "c97c48ff50bac2b5e1511795db585b32d000f6bf3211e969a611ac731452c633"}, "downloads": -1, "filename": "pyVivintSky-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d5e566a7cc80cbe75cced445a4239d1e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7033, "upload_time": "2020-03-16T00:29:23", "upload_time_iso_8601": "2020-03-16T00:29:23.843105Z", "url": "https://files.pythonhosted.org/packages/f9/de/082d9dd945aaaba44750043b4a9deb3d2f02bc42149b7ea0c2e96ae8be5f/pyVivintSky-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:54 2020"}