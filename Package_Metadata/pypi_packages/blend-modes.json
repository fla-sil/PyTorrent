{"info": {"author": "Florian Roscheck", "author_email": "florian.ros.check+blendmodes@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Topic :: Multimedia :: Graphics :: Graphics Conversion"], "description": "Blend Modes\n===========\n\nThis Python package implements blend modes for images.\n\nDescription\n-----------\n\nThe Blend Modes package enables blending different images, or image\nlayers, by means of blend modes. These modes are commonly found in\ngraphics programs like `Adobe\nPhotoshop <http://www.adobe.com/Photoshop>`__ or\n`GIMP <https://www.gimp.org/>`__.\n\nBlending through blend modes allows to mix images in a variety of ways.\nThis package currently supports the following blend modes (name of the\nrespective functions in the package in ``italics``):\n\n-  Soft Light (``blend_modes.soft_light``)\n-  Lighten Only (``blend_modes.lighten_only``)\n-  Dodge (``blend_modes.dodge``)\n-  Addition (``blend_modes.addition``)\n-  Darken Only (``blend_modes.darken_only``)\n-  Multiply (``blend_modes.multiply``)\n-  Hard Light (``blend_modes.hard_light``)\n-  Difference (``blend_modes.difference``)\n-  Subtract (``blend_modes.subtract``)\n-  Grain Extract (known from GIMP, ``blend_modes.grain_extract``)\n-  Grain Merge (known from GIMP, ``blend_modes.grain_merge``)\n-  Divide (``blend_modes.divide``)\n-  Overlay (``blend_modes.overlay``)\n-  Normal (``blend_modes.normal``)\n\nThe intensity of blending can be controlled by means of an *opacity*\nparameter that is passed into the functions. See `Usage <#usage>`__ for\nmore information.\n\nThe Blend Modes package is optimized for speed. It takes advantage of\nvectorization through Numpy. Further speedup can be achieved when\nimplementing the package in Cython. However, Cython implementation is\nnot part of this package.\n\nUsage\n-----\n\nThe blend mode functions take image data expressed as arrays as an\ninput. These image data are usually obtained through functions from\nimage processing packages. Two popular image processing packages in\nPython are `PIL <https://pypi.python.org/pypi/PIL>`__ or its fork\n`Pillow <https://pypi.python.org/pypi/Pillow/>`__ and\n`OpenCV <http://opencv.org/>`__. The examples in this chapter show how\nto blend images using these packages.\n\nInput and Output Formats\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nA typical blend mode operation is called like this:\n\n.. code:: python\n\n    blended_img = soft_light(bg_img, fg_img, opacity)\n\nThe blend mode functions expect\n`Numpy <https://pypi.python.org/pypi/numpy>`__ float arrays in the\nformat [*pixels in dimension 1*,\\ *pixels in dimension 2*,4] as an\ninput. Both images needs to have the same size, so the *pixels in\ndimension 1* must be the same for ``bg_img`` and ``fg_img``. Same\napplies to the *pixels in dimension 2*. Thus, a valid shape of the\narrays would be ``bg_img.shape == (640,320,4)`` and\n``fg_img.shape == (640,320,4)``.\n\nThe order of the channels in the third dimension should be *R, G, B, A*,\nwhere *A* is the alpha channel. All values should be *floats* in the\nrange *0.0 <= value <= 255.0*.\n\nThe blend mode functions return arrays in the same format as the input\nformat.\n\nExamples\n~~~~~~~~\n\nThe following examples show how to use the Blend Modes package in\ntypical applications.\n\nThe examples are structured in three parts:\n\n1. Load background and foreground image. The foreground image is to be\n   blended onto the background image.\n\n2. Use the Blend Modes package to blend the two images via the \"soft\n   light\" blend mode. The package supports multiple blend modes. See the\n   `Description <#description>`__ for a full list.\n\n3. Display the blended image.\n\nPIL/Pillow Example\n^^^^^^^^^^^^^^^^^^\n\nThe following example shows how to use the Blend Modes package with the\n`PIL <https://pypi.python.org/pypi/PIL>`__ or\n`Pillow <https://pypi.python.org/pypi/Pillow/>`__ packages.\n\n.. code:: python\n\n    from PIL import Image\n    import numpy\n    from blend_modes import soft_light\n\n    # Import background image\n    background_img_raw = Image.open('background.png')  # RGBA image\n    background_img = numpy.array(background_img_raw)  # Inputs to blend_modes need to be numpy arrays.\n    background_img_float = background_img.astype(float)  # Inputs to blend_modes need to be floats.\n\n    # Import foreground image\n    foreground_img_raw = Image.open('foreground.png')  # RGBA image\n    foreground_img = numpy.array(foreground_img_raw)  # Inputs to blend_modes need to be numpy arrays.\n    foreground_img_float = foreground_img.astype(float)  # Inputs to blend_modes need to be floats.\n\n    # Blend images\n    opacity = 0.7  # The opacity of the foreground that is blended onto the background is 70 %.\n    blended_img_float = soft_light(background_img_float, foreground_img_float, opacity)\n\n    # Convert blended image back into PIL image\n    blended_img = numpy.uint8(blended_img_float)  # Image needs to be converted back to uint8 type for PIL handling.\n    blended_img_raw = Image.fromarray(blended_img)  # Note that alpha channels are displayed in black by PIL by default.\n                                                    # This behavior is difficult to change (although possible).\n                                                    # If you have alpha channels in your images, then you should give\n                                                    # OpenCV a try.\n\n    # Display blended image\n    blended_img_raw.show()\n\nOpenCV Example\n^^^^^^^^^^^^^^\n\nThe following example shows how to use the Blend Modes package with\n`OpenCV <http://opencv.org/>`__.\n\n.. code:: python\n\n    import cv2  # import OpenCV\n    import numpy\n    from blend_modes import soft_light\n\n    # Import background image\n    background_img_float = cv2.imread('background.png',-1).astype(float)\n\n    # Import foreground image\n    foreground_img_float = cv2.imread('foreground.png',-1).astype(float)\n\n    # Blend images\n    opacity = 0.7  # The opacity of the foreground that is blended onto the background is 70 %.\n    blended_img_float = soft_light(background_img_float, foreground_img_float, opacity)\n\n    # Display blended image\n    blended_img_uint8 = blended_img_float.astype(numpy.uint8)  # Convert image to OpenCV native display format\n    cv2.imshow('window', blended_img_uint8)\n    cv2.waitKey()  # Press a key to close window with the image.\n\nInstallation\n------------\n\nThe Blend Modes package can be installed through pip:\n``$ pip install blend_modes``\n\nDependencies\n------------\n\nThe Blend Modes package needs\n`Numpy <https://pypi.python.org/pypi/numpy>`__ to function correctly.\nFor loading images the following packages have been successfully used:\n\n-  `PIL <https://pypi.python.org/pypi/PIL>`__\n-  `Pillow <https://pypi.python.org/pypi/Pillow/>`__\n-  `OpenCV <http://opencv.org/>`__\n\nSee Also\n--------\n\nBlend modes are further described on\n`Wikipedia <https://en.wikipedia.org/wiki/Blend_modes>`__. An actual\nimplementation can be found in the `GIMP source\ncode <https://git.gnome.org/browse/gimp/tree/app/operations/>`__, e.g.\nin the file that describes the *division* operation,\n`gimpoperationdividecode.c <https://git.gnome.org/browse/gimp/tree/app/operations/gimpoperationdividemode.c>`__.\n\nContribution\n------------\n\nI am happy about any contribution or feedback. Please let me know about\nyour comments via the Issues tab on\n`GitHub <https://github.com/flrs/blend_modes/issues>`__.\n\nLicense\n-------\n\nThe Blend Modes package is distributed under the `MIT License\n(MIT) <https://github.com/flrs/blend_modes/blob/master/LICENSE.txt>`__.\nPlease also take note of the licenses of the dependencies.", "description_content_type": "", "docs_url": "https://pythonhosted.org/blend-modes/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/flrs/blend_modes", "keywords": "image processing blend modes", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "blend-modes", "package_url": "https://pypi.org/project/blend-modes/", "platform": "", "project_url": "https://pypi.org/project/blend-modes/", "project_urls": {"Homepage": "https://github.com/flrs/blend_modes"}, "release_url": "https://pypi.org/project/blend-modes/2.1.0/", "requires_dist": null, "requires_python": "", "summary": "Image processing blend modes", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This Python package implements blend modes for images.</p>\n<div id=\"description\">\n<h2>Description</h2>\n<p>The Blend Modes package enables blending different images, or image\nlayers, by means of blend modes. These modes are commonly found in\ngraphics programs like <a href=\"http://www.adobe.com/Photoshop\" rel=\"nofollow\">Adobe\nPhotoshop</a> or\n<a href=\"https://www.gimp.org/\" rel=\"nofollow\">GIMP</a>.</p>\n<p>Blending through blend modes allows to mix images in a variety of ways.\nThis package currently supports the following blend modes (name of the\nrespective functions in the package in <tt>italics</tt>):</p>\n<ul>\n<li>Soft Light (<tt>blend_modes.soft_light</tt>)</li>\n<li>Lighten Only (<tt>blend_modes.lighten_only</tt>)</li>\n<li>Dodge (<tt>blend_modes.dodge</tt>)</li>\n<li>Addition (<tt>blend_modes.addition</tt>)</li>\n<li>Darken Only (<tt>blend_modes.darken_only</tt>)</li>\n<li>Multiply (<tt>blend_modes.multiply</tt>)</li>\n<li>Hard Light (<tt>blend_modes.hard_light</tt>)</li>\n<li>Difference (<tt>blend_modes.difference</tt>)</li>\n<li>Subtract (<tt>blend_modes.subtract</tt>)</li>\n<li>Grain Extract (known from GIMP, <tt>blend_modes.grain_extract</tt>)</li>\n<li>Grain Merge (known from GIMP, <tt>blend_modes.grain_merge</tt>)</li>\n<li>Divide (<tt>blend_modes.divide</tt>)</li>\n<li>Overlay (<tt>blend_modes.overlay</tt>)</li>\n<li>Normal (<tt>blend_modes.normal</tt>)</li>\n</ul>\n<p>The intensity of blending can be controlled by means of an <em>opacity</em>\nparameter that is passed into the functions. See <a href=\"#usage\" rel=\"nofollow\">Usage</a> for\nmore information.</p>\n<p>The Blend Modes package is optimized for speed. It takes advantage of\nvectorization through Numpy. Further speedup can be achieved when\nimplementing the package in Cython. However, Cython implementation is\nnot part of this package.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The blend mode functions take image data expressed as arrays as an\ninput. These image data are usually obtained through functions from\nimage processing packages. Two popular image processing packages in\nPython are <a href=\"https://pypi.python.org/pypi/PIL\" rel=\"nofollow\">PIL</a> or its fork\n<a href=\"https://pypi.python.org/pypi/Pillow/\" rel=\"nofollow\">Pillow</a> and\n<a href=\"http://opencv.org/\" rel=\"nofollow\">OpenCV</a>. The examples in this chapter show how\nto blend images using these packages.</p>\n<div id=\"input-and-output-formats\">\n<h3>Input and Output Formats</h3>\n<p>A typical blend mode operation is called like this:</p>\n<pre><span class=\"n\">blended_img</span> <span class=\"o\">=</span> <span class=\"n\">soft_light</span><span class=\"p\">(</span><span class=\"n\">bg_img</span><span class=\"p\">,</span> <span class=\"n\">fg_img</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"p\">)</span>\n</pre>\n<p>The blend mode functions expect\n<a href=\"https://pypi.python.org/pypi/numpy\" rel=\"nofollow\">Numpy</a> float arrays in the\nformat [<em>pixels in dimension 1</em>,<em>pixels in dimension 2</em>,4] as an\ninput. Both images needs to have the same size, so the <em>pixels in\ndimension 1</em> must be the same for <tt>bg_img</tt> and <tt>fg_img</tt>. Same\napplies to the <em>pixels in dimension 2</em>. Thus, a valid shape of the\narrays would be <tt>bg_img.shape == (640,320,4)</tt> and\n<tt>fg_img.shape == (640,320,4)</tt>.</p>\n<p>The order of the channels in the third dimension should be <em>R, G, B, A</em>,\nwhere <em>A</em> is the alpha channel. All values should be <em>floats</em> in the\nrange <em>0.0 &lt;= value &lt;= 255.0</em>.</p>\n<p>The blend mode functions return arrays in the same format as the input\nformat.</p>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>The following examples show how to use the Blend Modes package in\ntypical applications.</p>\n<p>The examples are structured in three parts:</p>\n<ol>\n<li>Load background and foreground image. The foreground image is to be\nblended onto the background image.</li>\n<li>Use the Blend Modes package to blend the two images via the \u201csoft\nlight\u201d blend mode. The package supports multiple blend modes. See the\n<a href=\"#description\" rel=\"nofollow\">Description</a> for a full list.</li>\n<li>Display the blended image.</li>\n</ol>\n<div id=\"pil-pillow-example\">\n<h4>PIL/Pillow Example</h4>\n<p>The following example shows how to use the Blend Modes package with the\n<a href=\"https://pypi.python.org/pypi/PIL\" rel=\"nofollow\">PIL</a> or\n<a href=\"https://pypi.python.org/pypi/Pillow/\" rel=\"nofollow\">Pillow</a> packages.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">blend_modes</span> <span class=\"kn\">import</span> <span class=\"n\">soft_light</span>\n\n<span class=\"c1\"># Import background image</span>\n<span class=\"n\">background_img_raw</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'background.png'</span><span class=\"p\">)</span>  <span class=\"c1\"># RGBA image</span>\n<span class=\"n\">background_img</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">background_img_raw</span><span class=\"p\">)</span>  <span class=\"c1\"># Inputs to blend_modes need to be numpy arrays.</span>\n<span class=\"n\">background_img_float</span> <span class=\"o\">=</span> <span class=\"n\">background_img</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>  <span class=\"c1\"># Inputs to blend_modes need to be floats.</span>\n\n<span class=\"c1\"># Import foreground image</span>\n<span class=\"n\">foreground_img_raw</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'foreground.png'</span><span class=\"p\">)</span>  <span class=\"c1\"># RGBA image</span>\n<span class=\"n\">foreground_img</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">foreground_img_raw</span><span class=\"p\">)</span>  <span class=\"c1\"># Inputs to blend_modes need to be numpy arrays.</span>\n<span class=\"n\">foreground_img_float</span> <span class=\"o\">=</span> <span class=\"n\">foreground_img</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>  <span class=\"c1\"># Inputs to blend_modes need to be floats.</span>\n\n<span class=\"c1\"># Blend images</span>\n<span class=\"n\">opacity</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>  <span class=\"c1\"># The opacity of the foreground that is blended onto the background is 70 %.</span>\n<span class=\"n\">blended_img_float</span> <span class=\"o\">=</span> <span class=\"n\">soft_light</span><span class=\"p\">(</span><span class=\"n\">background_img_float</span><span class=\"p\">,</span> <span class=\"n\">foreground_img_float</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert blended image back into PIL image</span>\n<span class=\"n\">blended_img</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">(</span><span class=\"n\">blended_img_float</span><span class=\"p\">)</span>  <span class=\"c1\"># Image needs to be converted back to uint8 type for PIL handling.</span>\n<span class=\"n\">blended_img_raw</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">fromarray</span><span class=\"p\">(</span><span class=\"n\">blended_img</span><span class=\"p\">)</span>  <span class=\"c1\"># Note that alpha channels are displayed in black by PIL by default.</span>\n                                                <span class=\"c1\"># This behavior is difficult to change (although possible).</span>\n                                                <span class=\"c1\"># If you have alpha channels in your images, then you should give</span>\n                                                <span class=\"c1\"># OpenCV a try.</span>\n\n<span class=\"c1\"># Display blended image</span>\n<span class=\"n\">blended_img_raw</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"opencv-example\">\n<h4>OpenCV Example</h4>\n<p>The following example shows how to use the Blend Modes package with\n<a href=\"http://opencv.org/\" rel=\"nofollow\">OpenCV</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cv2</span>  <span class=\"c1\"># import OpenCV</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">blend_modes</span> <span class=\"kn\">import</span> <span class=\"n\">soft_light</span>\n\n<span class=\"c1\"># Import background image</span>\n<span class=\"n\">background_img_float</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s1\">'background.png'</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Import foreground image</span>\n<span class=\"n\">foreground_img_float</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s1\">'foreground.png'</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Blend images</span>\n<span class=\"n\">opacity</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>  <span class=\"c1\"># The opacity of the foreground that is blended onto the background is 70 %.</span>\n<span class=\"n\">blended_img_float</span> <span class=\"o\">=</span> <span class=\"n\">soft_light</span><span class=\"p\">(</span><span class=\"n\">background_img_float</span><span class=\"p\">,</span> <span class=\"n\">foreground_img_float</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Display blended image</span>\n<span class=\"n\">blended_img_uint8</span> <span class=\"o\">=</span> <span class=\"n\">blended_img_float</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>  <span class=\"c1\"># Convert image to OpenCV native display format</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s1\">'window'</span><span class=\"p\">,</span> <span class=\"n\">blended_img_uint8</span><span class=\"p\">)</span>\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">()</span>  <span class=\"c1\"># Press a key to close window with the image.</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The Blend Modes package can be installed through pip:\n<tt>$ pip install blend_modes</tt></p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>The Blend Modes package needs\n<a href=\"https://pypi.python.org/pypi/numpy\" rel=\"nofollow\">Numpy</a> to function correctly.\nFor loading images the following packages have been successfully used:</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/PIL\" rel=\"nofollow\">PIL</a></li>\n<li><a href=\"https://pypi.python.org/pypi/Pillow/\" rel=\"nofollow\">Pillow</a></li>\n<li><a href=\"http://opencv.org/\" rel=\"nofollow\">OpenCV</a></li>\n</ul>\n</div>\n<div id=\"see-also\">\n<h2>See Also</h2>\n<p>Blend modes are further described on\n<a href=\"https://en.wikipedia.org/wiki/Blend_modes\" rel=\"nofollow\">Wikipedia</a>. An actual\nimplementation can be found in the <a href=\"https://git.gnome.org/browse/gimp/tree/app/operations/\" rel=\"nofollow\">GIMP source\ncode</a>, e.g.\nin the file that describes the <em>division</em> operation,\n<a href=\"https://git.gnome.org/browse/gimp/tree/app/operations/gimpoperationdividemode.c\" rel=\"nofollow\">gimpoperationdividecode.c</a>.</p>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>I am happy about any contribution or feedback. Please let me know about\nyour comments via the Issues tab on\n<a href=\"https://github.com/flrs/blend_modes/issues\" rel=\"nofollow\">GitHub</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The Blend Modes package is distributed under the <a href=\"https://github.com/flrs/blend_modes/blob/master/LICENSE.txt\" rel=\"nofollow\">MIT License\n(MIT)</a>.\nPlease also take note of the licenses of the dependencies.</p>\n</div>\n\n          </div>"}, "last_serial": 5544292, "releases": {"1.0.0": [], "1.0.1": [{"comment_text": "", "digests": {"md5": "a3053e733bcd4eea3fa5e8c37645096d", "sha256": "d3754de8e8abac9ba33b111c460a7789578a1359a1a31df2d5db73a4a9e62c0c"}, "downloads": -1, "filename": "blend_modes-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a3053e733bcd4eea3fa5e8c37645096d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166480, "upload_time": "2016-11-09T14:52:52", "upload_time_iso_8601": "2016-11-09T14:52:52.904947Z", "url": "https://files.pythonhosted.org/packages/54/47/b916733a2ccc5d5bd1b9cd88ddcc0e3764260abd4933e1124e4d0d8a2d59/blend_modes-1.0.1.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "1ce3d76b1629077470d5a045791a2cb2", "sha256": "3051c9c0f1ad8a143a6b06732a600c24da2b57bff122ea20b24d2d5dc9c86a0e"}, "downloads": -1, "filename": "blend_modes-2.0.1.tar.gz", "has_sig": false, "md5_digest": "1ce3d76b1629077470d5a045791a2cb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14488, "upload_time": "2019-03-10T04:03:35", "upload_time_iso_8601": "2019-03-10T04:03:35.376078Z", "url": "https://files.pythonhosted.org/packages/dc/68/55a8260a654781117ac0f8740eaab38d0ac95644fbb6607ced80a9503db9/blend_modes-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "5f114cf8056ea4f7d297d6617148851d", "sha256": "cbfe47d4932b456be8fab3b32955976325bb19c833c6d7996cf3219f8ad8bf38"}, "downloads": -1, "filename": "blend_modes-2.0.2.tar.gz", "has_sig": false, "md5_digest": "5f114cf8056ea4f7d297d6617148851d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14537, "upload_time": "2019-04-17T13:44:57", "upload_time_iso_8601": "2019-04-17T13:44:57.360533Z", "url": "https://files.pythonhosted.org/packages/b4/0e/296d2de231d184b1b215d2b27978cd81911213b35745716a47f00a50e65d/blend_modes-2.0.2.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "ce9f1011818f87247b6b1c0e728542c2", "sha256": "0a3145e4792e005764b9663f5ce899d30f7c24f4bcff00428907d03dbe068f37"}, "downloads": -1, "filename": "blend_modes-2.1.0.tar.gz", "has_sig": false, "md5_digest": "ce9f1011818f87247b6b1c0e728542c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17733, "upload_time": "2019-07-17T05:52:44", "upload_time_iso_8601": "2019-07-17T05:52:44.828725Z", "url": "https://files.pythonhosted.org/packages/b4/00/61401b0ef3a1e58e2ba305292fef3fc043be4eff0162138e67d9b9fc77de/blend_modes-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce9f1011818f87247b6b1c0e728542c2", "sha256": "0a3145e4792e005764b9663f5ce899d30f7c24f4bcff00428907d03dbe068f37"}, "downloads": -1, "filename": "blend_modes-2.1.0.tar.gz", "has_sig": false, "md5_digest": "ce9f1011818f87247b6b1c0e728542c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17733, "upload_time": "2019-07-17T05:52:44", "upload_time_iso_8601": "2019-07-17T05:52:44.828725Z", "url": "https://files.pythonhosted.org/packages/b4/00/61401b0ef3a1e58e2ba305292fef3fc043be4eff0162138e67d9b9fc77de/blend_modes-2.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:06 2020"}