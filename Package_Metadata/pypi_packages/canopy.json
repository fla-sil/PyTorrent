{"info": {"author": "James Thurley", "author_email": "james.thurley@canopysimulations.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# Installation\n\n### Versioning\n\nThis library uses [SimVer](http://simver.org/) versioning, where a change in the major version number indicates a\nbreaking change and a change in the minor version number indicates a non-breaking change (such as an additional\nfeature or bug fix).\n\n### Changelog\n\nThe changelog is available [here](CHANGELOG.md).\n\n### Requirements.\n\nThis library has been tested on Python 3.6 and higher.\n\n### pip install\n\n```sh\npip install canopy\n```\n\nYou may need to run `pip` with root permission: `sudo pip install canopy`.\n\nFrom a Jupyter Notebook you can run `!pip install canopy`.\n\n### Setuptools\n\nInstall via [Setuptools](http://pypi.python.org/pypi/setuptools).\n\n```sh\npython setup.py install --user\n```\n(or `sudo python setup.py install` to install the package for all users)\n\n### Running Tests\n\nUnit tests can be run with:\n```\npytest canopy\n```\n\nIntegration tests can be run with:\n```\npytest integration_tests\n```\n\nTo run the integration tests you'll need to ensure you have an environment variable called `CANOPY_PYTHON_INTEGRATION_TEST_CREDENTIALS`\ncontaining the string `<client_id>|<client_secret>|<username>|<tenant_name>|<password>`.\n\n# Getting Started\n\n## Example Usage\nSee the [Canopy Python Examples](https://github.com/CanopySimulations/canopy-python-examples) repository for example usage.\n\n## Introduction\n\nThis package is designed for customers of [Canopy Simulations](https://www.canopysimulations.com/) who would like\nto access the Canopy API from Python, for example using Jupyter Notebooks.\n\nCurrently the library is split into two parts:\n\n - The client generated using the OpenAPI toolset is located in the \"canopy/openapi\" folder.\n   We don't have a great deal of control over how this code looks, but it should give a fairly complete interface to the main API.\n\n - One folder up from that in the \"canopy\" folder we are adding helper functions which wrap common use cases in simple functions.\n   You can also use these functions as a reference to using the OpenAPI generated code.\n\nWhen using the library you generally start by creating a `canopy.Session` object. \nThe session object manages authentication, and the caching of user settings.\nCalling `session.authentication.authenticate()` before calling OpenAPI generated client functions ensures that you are\nauthenticated and that any expired access tokens are refreshed.\nOur helper functions will generally handle calling authenticate before making any calls.\n\nOnce you have created a session you can pass the `session.async_client` or `session.sync_client` into the OpenAPI \ngenerated client code as the `api_client` parameter as shown below.\n\nThe following example shows how to create a session and request some output channels from a study using our helper function:\n\n```python\nimport canopy\nimport asyncio\n\nasync with canopy.Session(client_id='<your_client_id>', username='<your_username>') as session:\n    study_data = await canopy.load_study(session, '<study_id>', 'DynamicLap', ['sRun', 'vCar'])\n\n    # Using the OpenAPI generated client directly:\n    study_api = canopy.openapi.StudyApi(session.async_client)\n    job_result = await study_api.study_get_study_job_metadata(\n        session.authentication.tenant_id,\n        '<study_id>',\n        0)\n\n    # Using asyncio.ensure_future() to enable us to perform multiple calls in parallel\n    job_result_task = asyncio.ensure_future(study_api.study_get_study_job_metadata(\n        session.authentication.tenant_id,\n        '<study_id>',\n        0))\n\n    job_result_2 = await job_result_task\n\n```\n\nWhen running this code you will be prompted for your client secret and your password if \nit is the first time `session.authentication.authenticate()` has been called for this session instance. Alternatively\nyou can pass the client secret and password into the Session class (after fetching them from a secure location) to\navoid being prompted.\n\nIf you can't use `asyncio` and `async/await` you can instead instantiate the session object synchronously \nand use the `canopy.run` method when calling our async helper methods. \nYou can pass `session.sync_client` into the OpenAPI client classes instead of `session.async_client` to make them \nreturn results synchronously.\n\n```python\nimport canopy\n\nwith canopy.Session(client_id='<your_client_id>', username='<your_username>') as session:\n    # Note we are using canopy.run(..) to force the async method to run synchronously.\n    # This is a wrapper for asyncio.get_event_loop().run_until_complete(..).\n    study_data = canopy.run(canopy.load_study(session, '<study_id>', 'DynamicLap', ['sRun', 'vCar']))\n\n    # Using the OpenAPI generated client synchronously by passing in sync_client:\n    study_api = canopy.openapi.StudyApi(session.sync_client)\n    job_result = study_api.study_get_study_job_metadata(\n        session.authentication.tenant_id,\n        '<study_id>',\n        0)\n\n    # You can still run synchronous OpenAPI client methods asynchronously using threads if you need to:\n    job_result_thread = study_api.study_get_study_job_metadata(\n        session.authentication.tenant_id,\n        '<study_id>',\n        0,\n        async_req=True)\n\n    job_result_2 = job_result_thread.get()\n```\n\n## Proxy Servers\n\nYou can configure your proxy server by passing in a `proxy` argument to the `canopy.Session` object:\n```python\nasync with canopy.Session(authentication_data, proxy=canopy.ProxyConfiguration('http://some.proxy.com', 'user', 'pass')) as session:\n``` \n\n# Updating the OpenAPI Client\n\nYou can use the Dockerfile in this repository to create a docker image to generate the new API stubs:\n\n```sh\ndocker image build -t canopy-python-gen:1 .\ndocker container run -i -t --mount type=bind,src='c:\\dev\\canopy\\canopy-python',dst=/canopy/repo canopy-python-gen:1 /bin/bash\n\njava -jar openapi-generator-cli.jar generate -g python -i https://api.canopysimulations.com/swagger/docs/v1 -o ./gen --package-name \"canopy.openapi\"\nrm -r repo/canopy/openapi\nrm -r repo/docs\ncp -r gen/canopy/openapi repo/canopy\ncp -r gen/docs repo\ncp -r gen/README.md repo/OPENAPI_README.md\n```\n\nTo regenerate the `asyncio` files execute:\n```sh\nrm -r gen\njava -jar openapi-generator-cli.jar generate -g python -i https://api.canopysimulations.com/swagger/docs/v1 -o ./gen --package-name \"canopy.openapi\" --library asyncio\nmv gen/canopy/openapi gen/canopy/openapi_asyncio\nrm -r gen/canopy/openapi_asyncio/api\nrm -r gen/canopy/openapi_asyncio/models\nrm gen/canopy/openapi_asyncio/configuration.py\nrm gen/canopy/openapi_asyncio/exceptions.py\nsed -i 's/from canopy\\.openapi import rest/from canopy.openapi_asyncio import rest/g' gen/canopy/openapi_asyncio/api_client.py\nsed -i '/from canopy.*/d' gen/canopy/openapi_asyncio/__init__.py\nsed -i '/# import /d' gen/canopy/openapi_asyncio/__init__.py\necho 'from canopy.openapi_asyncio.api_client import ApiClient' >> gen/canopy/openapi_asyncio/__init__.py\ncp -r gen/canopy/openapi_asyncio repo/canopy\n```\n\nNote: The `openapi_asyncio/rest.py` file will need to be manually modified to support proxy servers after generation. \nNote: The `openapi_asyncio/client_api.py` and `openapi/client_api.py` files will need to be manually modified to \nsupport numpy array serialization after generation. \n\n## Documentation for OpenAPI Generated Client\n\nOpenAPI generated documentation can be found [here](OPENAPI_README.md).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/canopysimulations/canopy-python/", "keywords": "Canopy API,Canopy Simulations,Canopy Client", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "canopy", "package_url": "https://pypi.org/project/canopy/", "platform": "", "project_url": "https://pypi.org/project/canopy/", "project_urls": {"Homepage": "https://github.com/canopysimulations/canopy-python/"}, "release_url": "https://pypi.org/project/canopy/8.13/", "requires_dist": null, "requires_python": "", "summary": "Python Client for the Canopy Simulation API", "version": "8.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Installation</h1>\n<h3>Versioning</h3>\n<p>This library uses <a href=\"http://simver.org/\" rel=\"nofollow\">SimVer</a> versioning, where a change in the major version number indicates a\nbreaking change and a change in the minor version number indicates a non-breaking change (such as an additional\nfeature or bug fix).</p>\n<h3>Changelog</h3>\n<p>The changelog is available <a href=\"CHANGELOG.md\" rel=\"nofollow\">here</a>.</p>\n<h3>Requirements.</h3>\n<p>This library has been tested on Python 3.6 and higher.</p>\n<h3>pip install</h3>\n<pre>pip install canopy\n</pre>\n<p>You may need to run <code>pip</code> with root permission: <code>sudo pip install canopy</code>.</p>\n<p>From a Jupyter Notebook you can run <code>!pip install canopy</code>.</p>\n<h3>Setuptools</h3>\n<p>Install via <a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">Setuptools</a>.</p>\n<pre>python setup.py install --user\n</pre>\n<p>(or <code>sudo python setup.py install</code> to install the package for all users)</p>\n<h3>Running Tests</h3>\n<p>Unit tests can be run with:</p>\n<pre><code>pytest canopy\n</code></pre>\n<p>Integration tests can be run with:</p>\n<pre><code>pytest integration_tests\n</code></pre>\n<p>To run the integration tests you'll need to ensure you have an environment variable called <code>CANOPY_PYTHON_INTEGRATION_TEST_CREDENTIALS</code>\ncontaining the string <code>&lt;client_id&gt;|&lt;client_secret&gt;|&lt;username&gt;|&lt;tenant_name&gt;|&lt;password&gt;</code>.</p>\n<h1>Getting Started</h1>\n<h2>Example Usage</h2>\n<p>See the <a href=\"https://github.com/CanopySimulations/canopy-python-examples\" rel=\"nofollow\">Canopy Python Examples</a> repository for example usage.</p>\n<h2>Introduction</h2>\n<p>This package is designed for customers of <a href=\"https://www.canopysimulations.com/\" rel=\"nofollow\">Canopy Simulations</a> who would like\nto access the Canopy API from Python, for example using Jupyter Notebooks.</p>\n<p>Currently the library is split into two parts:</p>\n<ul>\n<li>\n<p>The client generated using the OpenAPI toolset is located in the \"canopy/openapi\" folder.\nWe don't have a great deal of control over how this code looks, but it should give a fairly complete interface to the main API.</p>\n</li>\n<li>\n<p>One folder up from that in the \"canopy\" folder we are adding helper functions which wrap common use cases in simple functions.\nYou can also use these functions as a reference to using the OpenAPI generated code.</p>\n</li>\n</ul>\n<p>When using the library you generally start by creating a <code>canopy.Session</code> object.\nThe session object manages authentication, and the caching of user settings.\nCalling <code>session.authentication.authenticate()</code> before calling OpenAPI generated client functions ensures that you are\nauthenticated and that any expired access tokens are refreshed.\nOur helper functions will generally handle calling authenticate before making any calls.</p>\n<p>Once you have created a session you can pass the <code>session.async_client</code> or <code>session.sync_client</code> into the OpenAPI\ngenerated client code as the <code>api_client</code> parameter as shown below.</p>\n<p>The following example shows how to create a session and request some output channels from a study using our helper function:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">canopy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">canopy</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'&lt;your_client_id&gt;'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'&lt;your_username&gt;'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n    <span class=\"n\">study_data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">canopy</span><span class=\"o\">.</span><span class=\"n\">load_study</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;study_id&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'DynamicLap'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'sRun'</span><span class=\"p\">,</span> <span class=\"s1\">'vCar'</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># Using the OpenAPI generated client directly:</span>\n    <span class=\"n\">study_api</span> <span class=\"o\">=</span> <span class=\"n\">canopy</span><span class=\"o\">.</span><span class=\"n\">openapi</span><span class=\"o\">.</span><span class=\"n\">StudyApi</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">async_client</span><span class=\"p\">)</span>\n    <span class=\"n\">job_result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">study_api</span><span class=\"o\">.</span><span class=\"n\">study_get_study_job_metadata</span><span class=\"p\">(</span>\n        <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">authentication</span><span class=\"o\">.</span><span class=\"n\">tenant_id</span><span class=\"p\">,</span>\n        <span class=\"s1\">'&lt;study_id&gt;'</span><span class=\"p\">,</span>\n        <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Using asyncio.ensure_future() to enable us to perform multiple calls in parallel</span>\n    <span class=\"n\">job_result_task</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ensure_future</span><span class=\"p\">(</span><span class=\"n\">study_api</span><span class=\"o\">.</span><span class=\"n\">study_get_study_job_metadata</span><span class=\"p\">(</span>\n        <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">authentication</span><span class=\"o\">.</span><span class=\"n\">tenant_id</span><span class=\"p\">,</span>\n        <span class=\"s1\">'&lt;study_id&gt;'</span><span class=\"p\">,</span>\n        <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n    <span class=\"n\">job_result_2</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">job_result_task</span>\n</pre>\n<p>When running this code you will be prompted for your client secret and your password if\nit is the first time <code>session.authentication.authenticate()</code> has been called for this session instance. Alternatively\nyou can pass the client secret and password into the Session class (after fetching them from a secure location) to\navoid being prompted.</p>\n<p>If you can't use <code>asyncio</code> and <code>async/await</code> you can instead instantiate the session object synchronously\nand use the <code>canopy.run</code> method when calling our async helper methods.\nYou can pass <code>session.sync_client</code> into the OpenAPI client classes instead of <code>session.async_client</code> to make them\nreturn results synchronously.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">canopy</span>\n\n<span class=\"k\">with</span> <span class=\"n\">canopy</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'&lt;your_client_id&gt;'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'&lt;your_username&gt;'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Note we are using canopy.run(..) to force the async method to run synchronously.</span>\n    <span class=\"c1\"># This is a wrapper for asyncio.get_event_loop().run_until_complete(..).</span>\n    <span class=\"n\">study_data</span> <span class=\"o\">=</span> <span class=\"n\">canopy</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">canopy</span><span class=\"o\">.</span><span class=\"n\">load_study</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;study_id&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'DynamicLap'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'sRun'</span><span class=\"p\">,</span> <span class=\"s1\">'vCar'</span><span class=\"p\">]))</span>\n\n    <span class=\"c1\"># Using the OpenAPI generated client synchronously by passing in sync_client:</span>\n    <span class=\"n\">study_api</span> <span class=\"o\">=</span> <span class=\"n\">canopy</span><span class=\"o\">.</span><span class=\"n\">openapi</span><span class=\"o\">.</span><span class=\"n\">StudyApi</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">sync_client</span><span class=\"p\">)</span>\n    <span class=\"n\">job_result</span> <span class=\"o\">=</span> <span class=\"n\">study_api</span><span class=\"o\">.</span><span class=\"n\">study_get_study_job_metadata</span><span class=\"p\">(</span>\n        <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">authentication</span><span class=\"o\">.</span><span class=\"n\">tenant_id</span><span class=\"p\">,</span>\n        <span class=\"s1\">'&lt;study_id&gt;'</span><span class=\"p\">,</span>\n        <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># You can still run synchronous OpenAPI client methods asynchronously using threads if you need to:</span>\n    <span class=\"n\">job_result_thread</span> <span class=\"o\">=</span> <span class=\"n\">study_api</span><span class=\"o\">.</span><span class=\"n\">study_get_study_job_metadata</span><span class=\"p\">(</span>\n        <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">authentication</span><span class=\"o\">.</span><span class=\"n\">tenant_id</span><span class=\"p\">,</span>\n        <span class=\"s1\">'&lt;study_id&gt;'</span><span class=\"p\">,</span>\n        <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">async_req</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">job_result_2</span> <span class=\"o\">=</span> <span class=\"n\">job_result_thread</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<h2>Proxy Servers</h2>\n<p>You can configure your proxy server by passing in a <code>proxy</code> argument to the <code>canopy.Session</code> object:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">canopy</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">authentication_data</span><span class=\"p\">,</span> <span class=\"n\">proxy</span><span class=\"o\">=</span><span class=\"n\">canopy</span><span class=\"o\">.</span><span class=\"n\">ProxyConfiguration</span><span class=\"p\">(</span><span class=\"s1\">'http://some.proxy.com'</span><span class=\"p\">,</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n</pre>\n<h1>Updating the OpenAPI Client</h1>\n<p>You can use the Dockerfile in this repository to create a docker image to generate the new API stubs:</p>\n<pre>docker image build -t canopy-python-gen:1 .\ndocker container run -i -t --mount <span class=\"nv\">type</span><span class=\"o\">=</span>bind,src<span class=\"o\">=</span><span class=\"s1\">'c:\\dev\\canopy\\canopy-python'</span>,dst<span class=\"o\">=</span>/canopy/repo canopy-python-gen:1 /bin/bash\n\njava -jar openapi-generator-cli.jar generate -g python -i https://api.canopysimulations.com/swagger/docs/v1 -o ./gen --package-name <span class=\"s2\">\"canopy.openapi\"</span>\nrm -r repo/canopy/openapi\nrm -r repo/docs\ncp -r gen/canopy/openapi repo/canopy\ncp -r gen/docs repo\ncp -r gen/README.md repo/OPENAPI_README.md\n</pre>\n<p>To regenerate the <code>asyncio</code> files execute:</p>\n<pre>rm -r gen\njava -jar openapi-generator-cli.jar generate -g python -i https://api.canopysimulations.com/swagger/docs/v1 -o ./gen --package-name <span class=\"s2\">\"canopy.openapi\"</span> --library asyncio\nmv gen/canopy/openapi gen/canopy/openapi_asyncio\nrm -r gen/canopy/openapi_asyncio/api\nrm -r gen/canopy/openapi_asyncio/models\nrm gen/canopy/openapi_asyncio/configuration.py\nrm gen/canopy/openapi_asyncio/exceptions.py\nsed -i <span class=\"s1\">'s/from canopy\\.openapi import rest/from canopy.openapi_asyncio import rest/g'</span> gen/canopy/openapi_asyncio/api_client.py\nsed -i <span class=\"s1\">'/from canopy.*/d'</span> gen/canopy/openapi_asyncio/__init__.py\nsed -i <span class=\"s1\">'/# import /d'</span> gen/canopy/openapi_asyncio/__init__.py\n<span class=\"nb\">echo</span> <span class=\"s1\">'from canopy.openapi_asyncio.api_client import ApiClient'</span> &gt;&gt; gen/canopy/openapi_asyncio/__init__.py\ncp -r gen/canopy/openapi_asyncio repo/canopy\n</pre>\n<p>Note: The <code>openapi_asyncio/rest.py</code> file will need to be manually modified to support proxy servers after generation.\nNote: The <code>openapi_asyncio/client_api.py</code> and <code>openapi/client_api.py</code> files will need to be manually modified to\nsupport numpy array serialization after generation.</p>\n<h2>Documentation for OpenAPI Generated Client</h2>\n<p>OpenAPI generated documentation can be found <a href=\"OPENAPI_README.md\" rel=\"nofollow\">here</a>.</p>\n\n          </div>"}, "last_serial": 7112827, "releases": {"1.12": [{"comment_text": "", "digests": {"md5": "7edea36c6802697bd1e6e76c2f7db4ff", "sha256": "710de906c4c3a915089e606cd342871f7ef9d3b9b4cea2ad4454e433490cd452"}, "downloads": -1, "filename": "canopy-1.12.tar.gz", "has_sig": false, "md5_digest": "7edea36c6802697bd1e6e76c2f7db4ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102701, "upload_time": "2020-01-15T14:33:34", "upload_time_iso_8601": "2020-01-15T14:33:34.544222Z", "url": "https://files.pythonhosted.org/packages/6b/cd/94300f393d934cbd58f528a643dd2104f96a819a246f2aaad121b6b29a81/canopy-1.12.tar.gz", "yanked": false}], "1.14": [{"comment_text": "", "digests": {"md5": "09fc62d7ad4cf4871847f5ca7cae6c9b", "sha256": "404486aa5092ccfffb52aa90cf45ba4008433f60f5ab81d9e80e88a450a5a24f"}, "downloads": -1, "filename": "canopy-1.14.tar.gz", "has_sig": false, "md5_digest": "09fc62d7ad4cf4871847f5ca7cae6c9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107430, "upload_time": "2020-01-15T17:06:16", "upload_time_iso_8601": "2020-01-15T17:06:16.633532Z", "url": "https://files.pythonhosted.org/packages/c3/a1/9c267d36e819de0f8b0364a2758e8e5101af9327ef12140226dfc3d75415/canopy-1.14.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "a12a3233a6978c5286c38c98209935d5", "sha256": "3a79b62a345becc68b6deed5b6566467ffd6c942b0b58b0858d270cd8b331772"}, "downloads": -1, "filename": "canopy-2.0.tar.gz", "has_sig": false, "md5_digest": "a12a3233a6978c5286c38c98209935d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115509, "upload_time": "2020-01-16T19:14:19", "upload_time_iso_8601": "2020-01-16T19:14:19.905271Z", "url": "https://files.pythonhosted.org/packages/4e/c6/fc593e15e384a9d7b88528fa203d74bf630e20798a317c7f0b92f68fe321/canopy-2.0.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "35581151d7db4759e094c32e685e4892", "sha256": "d04019106955f0f87f105784ddc50d1f1e8c0222665b40c2418a851fb0730dac"}, "downloads": -1, "filename": "canopy-2.1.tar.gz", "has_sig": false, "md5_digest": "35581151d7db4759e094c32e685e4892", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117525, "upload_time": "2020-01-17T11:35:48", "upload_time_iso_8601": "2020-01-17T11:35:48.718785Z", "url": "https://files.pythonhosted.org/packages/db/e8/00dd9a29e1f9837034d33e8076e899d0dd26dcb2ab22dfb631c60b831455/canopy-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "34af70b94ab47bef8b2d7dcd9afa73e7", "sha256": "ade7672c785be2c52c5aeb679f0b9cd2a52dc7fbf702cf3c2cb346654bed6f4a"}, "downloads": -1, "filename": "canopy-2.2.tar.gz", "has_sig": false, "md5_digest": "34af70b94ab47bef8b2d7dcd9afa73e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117456, "upload_time": "2020-01-17T12:34:08", "upload_time_iso_8601": "2020-01-17T12:34:08.468390Z", "url": "https://files.pythonhosted.org/packages/95/ee/ee9408e169a985b7f13a8411e63f103ea4c1730ab58d48f8b9667f8944ea/canopy-2.2.tar.gz", "yanked": false}], "3.0": [{"comment_text": "", "digests": {"md5": "6df273db98aeacfdc577c52ff6d955bd", "sha256": "101740435d75d6a9b4d057811f14aa565f3890c7f1a3ef130bc8d84b08217a1a"}, "downloads": -1, "filename": "canopy-3.0.tar.gz", "has_sig": false, "md5_digest": "6df273db98aeacfdc577c52ff6d955bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119130, "upload_time": "2020-01-17T19:04:55", "upload_time_iso_8601": "2020-01-17T19:04:55.679373Z", "url": "https://files.pythonhosted.org/packages/87/35/59129a4b469dd0724a9ea03b707f061d3d82f1142ba1f01cedbd9bd4ab3e/canopy-3.0.tar.gz", "yanked": false}], "4.1": [{"comment_text": "", "digests": {"md5": "4036b5c50d247007d97ee1ffbd800505", "sha256": "a00fa2f549e6744c56e2fdb3e71a13256ff80f17945591c79319f15f7fa1844e"}, "downloads": -1, "filename": "canopy-4.1.tar.gz", "has_sig": false, "md5_digest": "4036b5c50d247007d97ee1ffbd800505", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117105, "upload_time": "2020-01-24T16:28:57", "upload_time_iso_8601": "2020-01-24T16:28:57.769437Z", "url": "https://files.pythonhosted.org/packages/41/b3/a8d5bc372296be7503a9826529f06dba199a61366e0ffdb0658026299317/canopy-4.1.tar.gz", "yanked": false}], "5.0": [{"comment_text": "", "digests": {"md5": "4c7532e55bc4e562dd89f6aad70db3ba", "sha256": "dbfb1eaffe370bad6954b472f487eef2fe98a1fa6af71e90534ae7ffb63b3781"}, "downloads": -1, "filename": "canopy-5.0.tar.gz", "has_sig": false, "md5_digest": "4c7532e55bc4e562dd89f6aad70db3ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117123, "upload_time": "2020-01-27T12:34:08", "upload_time_iso_8601": "2020-01-27T12:34:08.158779Z", "url": "https://files.pythonhosted.org/packages/7f/c6/4e230e20f8566d274864bc8d2f5cff8c8bea060ad8ea1664503d4dbd6ae2/canopy-5.0.tar.gz", "yanked": false}], "5.1": [{"comment_text": "", "digests": {"md5": "1ed550159a18a19e8ac026e0a125a38a", "sha256": "f865d4ea4f1af26904449bb3caaf716a12da242a941b4bb33c9ee20756349162"}, "downloads": -1, "filename": "canopy-5.1.tar.gz", "has_sig": false, "md5_digest": "1ed550159a18a19e8ac026e0a125a38a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117228, "upload_time": "2020-01-28T10:40:49", "upload_time_iso_8601": "2020-01-28T10:40:49.718778Z", "url": "https://files.pythonhosted.org/packages/e7/60/9e3d0d8cbc0976c1e5625a0fc99ed8a6302db91cc450525c6b91897d718c/canopy-5.1.tar.gz", "yanked": false}], "5.3": [{"comment_text": "", "digests": {"md5": "c5507d8e971966f2d2c38e156b10eb04", "sha256": "597bcee40349f8abcb22cafabc2d52acfb5cf06a1ea12a6748029c49896adb43"}, "downloads": -1, "filename": "canopy-5.3.tar.gz", "has_sig": false, "md5_digest": "c5507d8e971966f2d2c38e156b10eb04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117423, "upload_time": "2020-01-28T12:28:48", "upload_time_iso_8601": "2020-01-28T12:28:48.244548Z", "url": "https://files.pythonhosted.org/packages/95/eb/847eb408ed11a21bc44bf2df6cc22c23c188744bc3caf47e4ff622ab1bbc/canopy-5.3.tar.gz", "yanked": false}], "6.1": [{"comment_text": "", "digests": {"md5": "a46223fcd87a42d7c93960ba88d016a2", "sha256": "6202032e9e2ba9888431c49d0506c957308478aef1c93b3d27046006aeee5f00"}, "downloads": -1, "filename": "canopy-6.1.tar.gz", "has_sig": false, "md5_digest": "a46223fcd87a42d7c93960ba88d016a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119678, "upload_time": "2020-01-29T16:07:18", "upload_time_iso_8601": "2020-01-29T16:07:18.450790Z", "url": "https://files.pythonhosted.org/packages/5b/fd/62532b8ad3435b39d7c30352815522e8da43d6dda2a1f92231692026c7aa/canopy-6.1.tar.gz", "yanked": false}], "6.2": [{"comment_text": "", "digests": {"md5": "bc3bd667ccb1d7cb0a17c629aa6452ff", "sha256": "6d3e403646c4a4d540ff8c169a6bac25e8725109f05ee0e16ebe8388733ae91c"}, "downloads": -1, "filename": "canopy-6.2.tar.gz", "has_sig": false, "md5_digest": "bc3bd667ccb1d7cb0a17c629aa6452ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119807, "upload_time": "2020-01-30T10:58:29", "upload_time_iso_8601": "2020-01-30T10:58:29.302779Z", "url": "https://files.pythonhosted.org/packages/4c/c4/c7685407a0233c949c91198e078433ad7b5477e82d51c1474e52c85b556f/canopy-6.2.tar.gz", "yanked": false}], "7.2": [{"comment_text": "", "digests": {"md5": "a350d84eea545fb863d209a39c9d8290", "sha256": "e8e78f91c68639f86c62fad98a4089cbcff60c831f743364b666e54bdab6585b"}, "downloads": -1, "filename": "canopy-7.2.tar.gz", "has_sig": false, "md5_digest": "a350d84eea545fb863d209a39c9d8290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120329, "upload_time": "2020-01-30T16:49:12", "upload_time_iso_8601": "2020-01-30T16:49:12.810329Z", "url": "https://files.pythonhosted.org/packages/31/8d/bf4d184f9fe9cd416a0dceeb5e060631f31d9c5552b2b318d9490382ca8c/canopy-7.2.tar.gz", "yanked": false}], "7.3": [{"comment_text": "", "digests": {"md5": "f188859e5925eaaaa9c109f36eee9a61", "sha256": "9023d0f590aa45ec467114d862778a0d2ce4eab6ece9c349f8450bcef7ea63a5"}, "downloads": -1, "filename": "canopy-7.3.tar.gz", "has_sig": false, "md5_digest": "f188859e5925eaaaa9c109f36eee9a61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120463, "upload_time": "2020-01-31T09:42:58", "upload_time_iso_8601": "2020-01-31T09:42:58.869104Z", "url": "https://files.pythonhosted.org/packages/4d/d0/9d67a80828a21e5376d1e04fe21cc00fbd298229b86fc1c85ac183c18b76/canopy-7.3.tar.gz", "yanked": false}], "7.4": [{"comment_text": "", "digests": {"md5": "360301508e68f7a8c4d0e8b5d30ac56c", "sha256": "eb87425db2f0b682b64b07757c91a70e0485780c3a8a2b5868be3a8806d4c405"}, "downloads": -1, "filename": "canopy-7.4.tar.gz", "has_sig": false, "md5_digest": "360301508e68f7a8c4d0e8b5d30ac56c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120457, "upload_time": "2020-02-04T12:16:19", "upload_time_iso_8601": "2020-02-04T12:16:19.514177Z", "url": "https://files.pythonhosted.org/packages/94/4e/d33291ac0e281448eb7ed65e178936f7cc54478207b0b0fc798b5221204a/canopy-7.4.tar.gz", "yanked": false}], "8.0": [{"comment_text": "", "digests": {"md5": "3958b8283a4510c9cfb3c75c1364cccc", "sha256": "5b976b98521b17c77e79c758521a54b047f98660542d525627248f7a7b2b0d42"}, "downloads": -1, "filename": "canopy-8.0.tar.gz", "has_sig": false, "md5_digest": "3958b8283a4510c9cfb3c75c1364cccc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122700, "upload_time": "2020-02-14T15:07:12", "upload_time_iso_8601": "2020-02-14T15:07:12.398787Z", "url": "https://files.pythonhosted.org/packages/13/02/97ff9b7ec99b61de91ef2e82d7641963b9e807cf93714b3e2e7a54a25e1d/canopy-8.0.tar.gz", "yanked": false}], "8.10": [{"comment_text": "", "digests": {"md5": "a51d494b407156cd933642184290785f", "sha256": "48beed085bb3f960a0b281541d9bc4db6c5beb76259c1fd54a7971d9cae7d140"}, "downloads": -1, "filename": "canopy-8.10.tar.gz", "has_sig": false, "md5_digest": "a51d494b407156cd933642184290785f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124797, "upload_time": "2020-03-13T18:50:57", "upload_time_iso_8601": "2020-03-13T18:50:57.025089Z", "url": "https://files.pythonhosted.org/packages/c6/38/588d904a52d7e8b5076f69fd0f339407e867cb9800a49150d3355bc1bf0c/canopy-8.10.tar.gz", "yanked": false}], "8.11": [{"comment_text": "", "digests": {"md5": "8997951bc786ea75c5761540168dade6", "sha256": "4b7c8f7666e56187e4aa5a869403b0a1cf71d74866f82f06eb88fadeb23be4ba"}, "downloads": -1, "filename": "canopy-8.11.tar.gz", "has_sig": false, "md5_digest": "8997951bc786ea75c5761540168dade6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125515, "upload_time": "2020-04-15T15:22:09", "upload_time_iso_8601": "2020-04-15T15:22:09.706777Z", "url": "https://files.pythonhosted.org/packages/4a/67/5fe8f0b4bf4974efbc4293028efb8e60f660ab79230b5dc793e04b2a4859/canopy-8.11.tar.gz", "yanked": false}], "8.12": [{"comment_text": "", "digests": {"md5": "4f787bd2b2f42c2772f687d0fd96b557", "sha256": "ee45524b82748a1c4ff59eb6d583bbd39a609a014d8b0bd9069477b52b0a618c"}, "downloads": -1, "filename": "canopy-8.12.tar.gz", "has_sig": false, "md5_digest": "4f787bd2b2f42c2772f687d0fd96b557", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125606, "upload_time": "2020-04-23T11:51:44", "upload_time_iso_8601": "2020-04-23T11:51:44.852891Z", "url": "https://files.pythonhosted.org/packages/92/0e/01218c310131e3e104d0e67d7b76b9940ce36b8f7d16f6102e7038c3eb2a/canopy-8.12.tar.gz", "yanked": false}], "8.13": [{"comment_text": "", "digests": {"md5": "b80d9168e35e0a5e9810ceacf61ae567", "sha256": "e3857d0021482b6c0a37bb40929e900553cc3393d068c2dbee0b2cd73d3dabdc"}, "downloads": -1, "filename": "canopy-8.13.tar.gz", "has_sig": false, "md5_digest": "b80d9168e35e0a5e9810ceacf61ae567", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125687, "upload_time": "2020-04-27T16:00:14", "upload_time_iso_8601": "2020-04-27T16:00:14.462960Z", "url": "https://files.pythonhosted.org/packages/60/34/6435678423a5beb8184002ca1402b2b1883e6ecc5ce19340158b3d13a3c8/canopy-8.13.tar.gz", "yanked": false}], "8.5": [{"comment_text": "", "digests": {"md5": "59607e42d4ca6e6892cd29def1e4e629", "sha256": "59e2d20328eee8bba8ece4f9046a673c0cb59adfc5b6325af425659b2a834cf5"}, "downloads": -1, "filename": "canopy-8.5.tar.gz", "has_sig": false, "md5_digest": "59607e42d4ca6e6892cd29def1e4e629", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123571, "upload_time": "2020-03-09T17:19:44", "upload_time_iso_8601": "2020-03-09T17:19:44.227299Z", "url": "https://files.pythonhosted.org/packages/fa/ee/7ed9787207a64d5c148ec51f246e253413964e1ec0169a389d95ad8c314e/canopy-8.5.tar.gz", "yanked": false}], "8.6": [{"comment_text": "", "digests": {"md5": "d29002ebf168e33d3889cf438f3c389b", "sha256": "e8c13a062215e3044a40ee49af31b730800be7f979db902fa069527738cbf06e"}, "downloads": -1, "filename": "canopy-8.6.tar.gz", "has_sig": false, "md5_digest": "d29002ebf168e33d3889cf438f3c389b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123925, "upload_time": "2020-03-10T10:52:46", "upload_time_iso_8601": "2020-03-10T10:52:46.026195Z", "url": "https://files.pythonhosted.org/packages/16/1a/3faab1e79c88d7c9578a4826cad04d7ddffeafd87bc5efee4a38c50b77a0/canopy-8.6.tar.gz", "yanked": false}], "8.7": [{"comment_text": "", "digests": {"md5": "94558c7fa90e1b7070dfa6c278368bc0", "sha256": "388392150a0a22c2ec0577058727535c56dd867e0f85f5b0a6b0e1b929173806"}, "downloads": -1, "filename": "canopy-8.7.tar.gz", "has_sig": false, "md5_digest": "94558c7fa90e1b7070dfa6c278368bc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124155, "upload_time": "2020-03-10T15:04:47", "upload_time_iso_8601": "2020-03-10T15:04:47.708181Z", "url": "https://files.pythonhosted.org/packages/e6/9b/cdd7f8a24aa17d16b48a669f62f366de4577cae399be5a92abeffd0fb42b/canopy-8.7.tar.gz", "yanked": false}], "8.8": [{"comment_text": "", "digests": {"md5": "9de6e3e28c8813fc4cfc348a4e204989", "sha256": "50858ea69742786f98857c22566b25799c756c6c554c9c47f7bf5d57d44a5c1a"}, "downloads": -1, "filename": "canopy-8.8.tar.gz", "has_sig": false, "md5_digest": "9de6e3e28c8813fc4cfc348a4e204989", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124522, "upload_time": "2020-03-11T10:29:38", "upload_time_iso_8601": "2020-03-11T10:29:38.023234Z", "url": "https://files.pythonhosted.org/packages/88/fa/150f11042d557f49729defc521ca71482bf5c5ff50f7fde71d4059852de3/canopy-8.8.tar.gz", "yanked": false}], "8.9": [{"comment_text": "", "digests": {"md5": "6b8ab38e57f59ac6d3d7bcd3f7675aee", "sha256": "e484e053e9bb1cd5cb92477d0b1aaa93e4c51e982469547361614b9fcfef0589"}, "downloads": -1, "filename": "canopy-8.9.tar.gz", "has_sig": false, "md5_digest": "6b8ab38e57f59ac6d3d7bcd3f7675aee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124776, "upload_time": "2020-03-11T12:22:19", "upload_time_iso_8601": "2020-03-11T12:22:19.033947Z", "url": "https://files.pythonhosted.org/packages/41/66/07c23e230bc9105ecfdaff6dbf4799bd9053bf445d46fba41c9b6a9985c4/canopy-8.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b80d9168e35e0a5e9810ceacf61ae567", "sha256": "e3857d0021482b6c0a37bb40929e900553cc3393d068c2dbee0b2cd73d3dabdc"}, "downloads": -1, "filename": "canopy-8.13.tar.gz", "has_sig": false, "md5_digest": "b80d9168e35e0a5e9810ceacf61ae567", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125687, "upload_time": "2020-04-27T16:00:14", "upload_time_iso_8601": "2020-04-27T16:00:14.462960Z", "url": "https://files.pythonhosted.org/packages/60/34/6435678423a5beb8184002ca1402b2b1883e6ecc5ce19340158b3d13a3c8/canopy-8.13.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:30 2020"}