{"info": {"author": "Esben Sonne", "author_email": "esbensonne+code@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "Charcoal\n========\n\n.. image:: https://travis-ci.org/cknv/charcoal.svg?branch=master\n    :target: https://travis-ci.org/cknv/charcoal\n\nA simple library for sending `StatsD metrics <https://github.com/etsy/statsd/blob/master/docs/metric_types.md>`_ in python. It aims to provide a high level API for the user, however that also means that much of the lower level functionality found in most other StatsD clients are not exposed, frankly because I do not find that I need it. So no manually timing things and etc.\n\nInstalling\n----------\n\n.. code-block:: shell\n\n    $ pip install charcoal\n\n\nUse it like so:\n\n.. code-block:: python\n\n    import charcoal\n\n    my_client = charcoal.StatsClient(prefix, host, port)\n\nFor development, the client also provides a ``disabled`` kwarg, so you do not have change anything in the code when you want to not send stats:\n\n.. code-block:: python\n\n    my_client = charcoal.StatsClient(prefix, host, port, disabled=True)\n\nBy itself, the client does not provide much use, but it does provide easy ways to get specific sub-clients, such as timers, counters, etc.\n\nTiming\n------\n\n.. code-block:: python\n\n    timer = my_client.timer('my-timer-name').start()\n\n    this_takes_a_while()\n    timer.intermediate('first-pass')\n\n    this_takes_a_while()\n    timer.intermediate('second-pass')\n    timer.stop()\n\nWhen you have end up with a measurement from somewhere else, perhaps from an external service, you can also send that, using the ``.send`` function on the timer class, in fact this is what the higler level functions above use, behind the scenes.\n\n.. code-block:: python\n\n    timer = my_client.timer('my-timer-name')\n    timer.send('db-call', 12.5)\n\nCounting\n--------\n\n.. code-block:: python\n\n    counter = my_client.counter('my-counter-name')\n\n    counter.increment('some-value', 10)\n    counter.decrement('some-other-value', 10)\n\nThe counter can even be fed a dict like object, such as the Counter from the standard library and send the stats as a single message.\n\n.. code-block:: python\n\n    pre_counted = {\n        'a-name': 5,\n        'another-name': 10,\n    }\n\n    counter.from_mapping(pre_counted)\n\nGauges\n------\n\nFor setting the current value.\n\n.. code-block:: python\n\n    gauge = my_client.gauge('my-gauge')\n\n    gauge.set('a-name', 10)\n    gauge.update('a-name', 10)\n\nSets\n----\n\nFor counting unique events, such as unique users on a page.\n\n.. code-block:: python\n\n    visitors = my_client.set('visitors')\n    visitors.add('ids', user.id)\n\nCustom\n------\n\nIn case the server you are using supports more metric types than this library, you can send custom metrics:\n\n.. code-block:: python\n\n    metric_to_send = 'metric.name:{value}|{type_suffix}'.format(\n        value=str(value),\n        type_suffix=type_suffix,\n    )\n\n    my_client.send(metric_to_send)\n\nThe ``prefix`` given to the client when creating it, is then prepended to the metric name, encoded, and sent to the server.\n\nCurrently it can even accept multiple metrics in one go:\n\n.. code-block:: python\n\n    my_client.send(metric_to_send, other_metric_to_send)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cknv/charcoal", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "charcoal", "package_url": "https://pypi.org/project/charcoal/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/charcoal/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/cknv/charcoal"}, "release_url": "https://pypi.org/project/charcoal/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Opionionated high level StatsD client", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/cknv/charcoal\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/cknv/charcoal.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d49d62c0e6d35f7521eed616cc32346f7ae1d584/68747470733a2f2f7472617669732d63692e6f72672f636b6e762f63686172636f616c2e7376673f6272616e63683d6d6173746572\"></a>\n<p>A simple library for sending <a href=\"https://github.com/etsy/statsd/blob/master/docs/metric_types.md\" rel=\"nofollow\">StatsD metrics</a> in python. It aims to provide a high level API for the user, however that also means that much of the lower level functionality found in most other StatsD clients are not exposed, frankly because I do not find that I need it. So no manually timing things and etc.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<pre>$ pip install charcoal\n</pre>\n<p>Use it like so:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">charcoal</span>\n\n<span class=\"n\">my_client</span> <span class=\"o\">=</span> <span class=\"n\">charcoal</span><span class=\"o\">.</span><span class=\"n\">StatsClient</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n</pre>\n<p>For development, the client also provides a <tt>disabled</tt> kwarg, so you do not have change anything in the code when you want to not send stats:</p>\n<pre><span class=\"n\">my_client</span> <span class=\"o\">=</span> <span class=\"n\">charcoal</span><span class=\"o\">.</span><span class=\"n\">StatsClient</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">disabled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>By itself, the client does not provide much use, but it does provide easy ways to get specific sub-clients, such as timers, counters, etc.</p>\n</div>\n<div id=\"timing\">\n<h2>Timing</h2>\n<pre><span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"n\">my_client</span><span class=\"o\">.</span><span class=\"n\">timer</span><span class=\"p\">(</span><span class=\"s1\">'my-timer-name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">this_takes_a_while</span><span class=\"p\">()</span>\n<span class=\"n\">timer</span><span class=\"o\">.</span><span class=\"n\">intermediate</span><span class=\"p\">(</span><span class=\"s1\">'first-pass'</span><span class=\"p\">)</span>\n\n<span class=\"n\">this_takes_a_while</span><span class=\"p\">()</span>\n<span class=\"n\">timer</span><span class=\"o\">.</span><span class=\"n\">intermediate</span><span class=\"p\">(</span><span class=\"s1\">'second-pass'</span><span class=\"p\">)</span>\n<span class=\"n\">timer</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<p>When you have end up with a measurement from somewhere else, perhaps from an external service, you can also send that, using the <tt>.send</tt> function on the timer class, in fact this is what the higler level functions above use, behind the scenes.</p>\n<pre><span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"n\">my_client</span><span class=\"o\">.</span><span class=\"n\">timer</span><span class=\"p\">(</span><span class=\"s1\">'my-timer-name'</span><span class=\"p\">)</span>\n<span class=\"n\">timer</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s1\">'db-call'</span><span class=\"p\">,</span> <span class=\"mf\">12.5</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"counting\">\n<h2>Counting</h2>\n<pre><span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"n\">my_client</span><span class=\"o\">.</span><span class=\"n\">counter</span><span class=\"p\">(</span><span class=\"s1\">'my-counter-name'</span><span class=\"p\">)</span>\n\n<span class=\"n\">counter</span><span class=\"o\">.</span><span class=\"n\">increment</span><span class=\"p\">(</span><span class=\"s1\">'some-value'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">counter</span><span class=\"o\">.</span><span class=\"n\">decrement</span><span class=\"p\">(</span><span class=\"s1\">'some-other-value'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>The counter can even be fed a dict like object, such as the Counter from the standard library and send the stats as a single message.</p>\n<pre><span class=\"n\">pre_counted</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'a-name'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"s1\">'another-name'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">counter</span><span class=\"o\">.</span><span class=\"n\">from_mapping</span><span class=\"p\">(</span><span class=\"n\">pre_counted</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"gauges\">\n<h2>Gauges</h2>\n<p>For setting the current value.</p>\n<pre><span class=\"n\">gauge</span> <span class=\"o\">=</span> <span class=\"n\">my_client</span><span class=\"o\">.</span><span class=\"n\">gauge</span><span class=\"p\">(</span><span class=\"s1\">'my-gauge'</span><span class=\"p\">)</span>\n\n<span class=\"n\">gauge</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'a-name'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">gauge</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s1\">'a-name'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"sets\">\n<h2>Sets</h2>\n<p>For counting unique events, such as unique users on a page.</p>\n<pre><span class=\"n\">visitors</span> <span class=\"o\">=</span> <span class=\"n\">my_client</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'visitors'</span><span class=\"p\">)</span>\n<span class=\"n\">visitors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'ids'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"custom\">\n<h2>Custom</h2>\n<p>In case the server you are using supports more metric types than this library, you can send custom metrics:</p>\n<pre><span class=\"n\">metric_to_send</span> <span class=\"o\">=</span> <span class=\"s1\">'metric.name:</span><span class=\"si\">{value}</span><span class=\"s1\">|</span><span class=\"si\">{type_suffix}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">),</span>\n    <span class=\"n\">type_suffix</span><span class=\"o\">=</span><span class=\"n\">type_suffix</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">my_client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">metric_to_send</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>prefix</tt> given to the client when creating it, is then prepended to the metric name, encoded, and sent to the server.</p>\n<p>Currently it can even accept multiple metrics in one go:</p>\n<pre><span class=\"n\">my_client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">metric_to_send</span><span class=\"p\">,</span> <span class=\"n\">other_metric_to_send</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2142062, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ee4ec73b72ac181c747ee34244df1656", "sha256": "a3ab7cea6caf03fe8681809c9e37602d8430e25034615feecc14e7d0fb09d8f7"}, "downloads": -1, "filename": "charcoal-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ee4ec73b72ac181c747ee34244df1656", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 6347, "upload_time": "2016-04-06T08:41:29", "upload_time_iso_8601": "2016-04-06T08:41:29.977068Z", "url": "https://files.pythonhosted.org/packages/3f/6a/88809a3b9f07d287fb37c174a2b4222a23a699252a23aedead892e82d124/charcoal-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf9f2ff2e4bf962ba64317cb87173fac", "sha256": "1ac7c486d6edb6767efbc5402238f0becf7a067eeed076bf7461f8f028dd2dc9"}, "downloads": -1, "filename": "charcoal-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bf9f2ff2e4bf962ba64317cb87173fac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4594, "upload_time": "2016-04-06T08:41:00", "upload_time_iso_8601": "2016-04-06T08:41:00.327466Z", "url": "https://files.pythonhosted.org/packages/24/a9/3b81bc8ce7ded4ab310690e40ecac1ca82e84fd75b0b87eabfc2e80bd0b6/charcoal-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1ec8872a8015166321d9cbe6745f5dd1", "sha256": "b12ac748c4acc3a6532b44509893269c4d720061877c4909a33ed1863fd1f970"}, "downloads": -1, "filename": "charcoal-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1ec8872a8015166321d9cbe6745f5dd1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 6712, "upload_time": "2016-05-31T07:29:33", "upload_time_iso_8601": "2016-05-31T07:29:33.699230Z", "url": "https://files.pythonhosted.org/packages/7d/85/d27175832aa4d510bc0e08d611683757ec4c45edfca4f3157c8b761fcd24/charcoal-0.2.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ec8872a8015166321d9cbe6745f5dd1", "sha256": "b12ac748c4acc3a6532b44509893269c4d720061877c4909a33ed1863fd1f970"}, "downloads": -1, "filename": "charcoal-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1ec8872a8015166321d9cbe6745f5dd1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 6712, "upload_time": "2016-05-31T07:29:33", "upload_time_iso_8601": "2016-05-31T07:29:33.699230Z", "url": "https://files.pythonhosted.org/packages/7d/85/d27175832aa4d510bc0e08d611683757ec4c45edfca4f3157c8b761fcd24/charcoal-0.2.0-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:34:26 2020"}