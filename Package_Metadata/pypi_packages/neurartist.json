{"info": {"author": "Guillaume Jorandon", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3 :: Only", "Topic :: Artistic Software", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "Neurartist\n==========\n\nA ready-to-use implementation of various Artistic Deep Learning\nAlgorithms.\n\n-  *Image Style Transfer Using Convolutional Neural Networks*, Gatys et.\n   al, 2016\n-  *Controlling Perceptual Factors in Neural Style Transfer*, Gatys et.\n   al, 2016\n\nInstallation\n============\n\n::\n\n   # It is recommended to install torch/torchvision manually before this command, according to your hardware configuration (see below)\n   pip install neurartist\n\nPlease note that the use of a GPU is recommended, as CNN computations\nare pretty slow on a CPU.\n\nNB for GPU users: pip ships ``torch``/``torchvision`` with the Cuda\nToolkit 9.0. If you use a more recent version of the Cuda Toolkit, see\nthe `PyTorch website <https://pytorch.org/get-started/locally/>`__ for\ninstructions on PyTorch installation with another version of the\ntoolkit.\n\nUsage\n=====\n\nConsole entrypoint\n------------------\n\n::\n\n   # Then see the builtin help for usage details\n   neurartist --help\n\nSee the examples below for the most common use cases.\n\nLibrary\n-------\n\n::\n\n   import neurartist\n\nTo be added.\n\nExamples\n========\n\n-  Basic usage: apply the style of an image to a content image, while\n   preserving the semantic content.\n\n::\n\n   neurartist -c content.jpg -s style.jpg\n\n-  Color control: apply a style, but preserve the color of the content\n   image.\n\n::\n\n   # Luminance only\n   neurartist -c content.jpg -s style.jpg --color-control luminance_only\n   # Luminance only, luma normalized\n   neurartist -c content.jpg -s style.jpg --color-control luminance_only --cc-luminance-only-normalize\n   # Color histogram matching\n   neurartist -c content.jpg -s style.jpg --color-control histogram_matching\n\n-  Style mixin: mix the coarse scale information of style1 (higher\n   layers) with the fine scale information of style2 (lower layers), to\n   create a mixed style to apply to a content image.\n\n::\n\n   neurartist -c style1.jpg -s style2.jpg -o mixed.png --content-layers [22,29] --style-layers [1,6]\n   neurartist -c content.jpg -s mixed.png\n\n-  Efficient high resolution: first pass is a low resolution style\n   transfer that efficiently catches coarse scale style features, second\n   pass is a high resolution style transfer that upscales the result of\n   the first pass and fills the lost fine information using fine scale\n   style features.\n\n::\n\n   neurartist -c content.jpg -s style.jpg -o lowres.png -S 500\n   neurartist -c content.jpg -s style.jpg -o highres.png -S 1000 --init-image-path lowres.png\n\n-  Spatial control: Guided gram matrices with guidance channels.\n   Guidance paths should contain black and white guidance images (with\n   the same size ratio as content and style images), defining the\n   boundaries of semantic regions of each image. Style guidance images\n   and content guidance images should have the same name, in\n   correspondance to a semantic region. Segmentation of the image should\n   be exhaustive.\n\n::\n\n   neurartist -c content.jpg -s style.jpg --content-guidance content_image_guidance_path/ --style-guidance style_image_guidance_path/ --guidance-propagation-method inside\n\nDevelopment\n===========\n\nAnaconda is strongly recommended:\n\n::\n\n   conda create python=3.7 --name neurartist_env\n   conda activate neurartist_env\n\n   # with gpu\n   conda install pytorch torchvision cudatoolkit=<your cudatoolkit version> -c pytorch\n   conda install --file requirements.txt\n\n   # with cpu\n   conda install pytorch-cpu torchvision-cpu -c pytorch\n   conda install --file requirements.txt\n\nYou can then run the main entrypoint directly using:\n\n::\n\n   python -m neurartist --help\n\nOr build and install the wheel file with the ``--editable`` flag.\n\nTODO\n====\n\n-  Documentation.\n-  Implement total variation loss (see\n   `this <https://www.tensorflow.org/beta/tutorials/generative/style_transfer>`__).\n-  Implement guided sums.\n-  Examine if we need to add a fallback global guidance channel for\n   pixels that aren\u2019t covered by any channel (briefly mentioned in the\n   article but very vague). Short answer: yes, it is needed, with bigger\n   kernel sizes the style transfer isn\u2019t performed at the boundary.\n-  For guidance channels propagation: investigate what they mean by\n   \u201cerosion\u201d (see supplementary material document linked in the original\n   article).\n-  `Semantic segmentation as described in this article as to limit\n   spillovers <https://arxiv.org/pdf/1703.07511.pdf>`__: different\n   approach than guided gram matrices, but same idea of using spatial\n   guidance channels that describe a semantic segmentation of our\n   images.\n-  More deep-artistic algorithms.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gjorando/style-transfer", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "neurartist", "package_url": "https://pypi.org/project/neurartist/", "platform": "", "project_url": "https://pypi.org/project/neurartist/", "project_urls": {"Homepage": "https://github.com/gjorando/style-transfer"}, "release_url": "https://pypi.org/project/neurartist/0.4.1/", "requires_dist": ["torch", "torchvision", "pillow", "click"], "requires_python": ">=3", "summary": "Ready-to-use artistic deep learning algorithms", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"neurartist\">\n<h2>Neurartist</h2>\n<p>A ready-to-use implementation of various Artistic Deep Learning\nAlgorithms.</p>\n<ul>\n<li><em>Image Style Transfer Using Convolutional Neural Networks</em>, Gatys et.\nal, 2016</li>\n<li><em>Controlling Perceptual Factors in Neural Style Transfer</em>, Gatys et.\nal, 2016</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre># It is recommended to install torch/torchvision manually before this command, according to your hardware configuration (see below)\npip install neurartist\n</pre>\n<p>Please note that the use of a GPU is recommended, as CNN computations\nare pretty slow on a CPU.</p>\n<p>NB for GPU users: pip ships <tt>torch</tt>/<tt>torchvision</tt> with the Cuda\nToolkit 9.0. If you use a more recent version of the Cuda Toolkit, see\nthe <a href=\"https://pytorch.org/get-started/locally/\" rel=\"nofollow\">PyTorch website</a> for\ninstructions on PyTorch installation with another version of the\ntoolkit.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"console-entrypoint\">\n<h3>Console entrypoint</h3>\n<pre># Then see the builtin help for usage details\nneurartist --help\n</pre>\n<p>See the examples below for the most common use cases.</p>\n</div>\n<div id=\"library\">\n<h3>Library</h3>\n<pre>import neurartist\n</pre>\n<p>To be added.</p>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<ul>\n<li>Basic usage: apply the style of an image to a content image, while\npreserving the semantic content.</li>\n</ul>\n<pre>neurartist -c content.jpg -s style.jpg\n</pre>\n<ul>\n<li>Color control: apply a style, but preserve the color of the content\nimage.</li>\n</ul>\n<pre># Luminance only\nneurartist -c content.jpg -s style.jpg --color-control luminance_only\n# Luminance only, luma normalized\nneurartist -c content.jpg -s style.jpg --color-control luminance_only --cc-luminance-only-normalize\n# Color histogram matching\nneurartist -c content.jpg -s style.jpg --color-control histogram_matching\n</pre>\n<ul>\n<li>Style mixin: mix the coarse scale information of style1 (higher\nlayers) with the fine scale information of style2 (lower layers), to\ncreate a mixed style to apply to a content image.</li>\n</ul>\n<pre>neurartist -c style1.jpg -s style2.jpg -o mixed.png --content-layers [22,29] --style-layers [1,6]\nneurartist -c content.jpg -s mixed.png\n</pre>\n<ul>\n<li>Efficient high resolution: first pass is a low resolution style\ntransfer that efficiently catches coarse scale style features, second\npass is a high resolution style transfer that upscales the result of\nthe first pass and fills the lost fine information using fine scale\nstyle features.</li>\n</ul>\n<pre>neurartist -c content.jpg -s style.jpg -o lowres.png -S 500\nneurartist -c content.jpg -s style.jpg -o highres.png -S 1000 --init-image-path lowres.png\n</pre>\n<ul>\n<li>Spatial control: Guided gram matrices with guidance channels.\nGuidance paths should contain black and white guidance images (with\nthe same size ratio as content and style images), defining the\nboundaries of semantic regions of each image. Style guidance images\nand content guidance images should have the same name, in\ncorrespondance to a semantic region. Segmentation of the image should\nbe exhaustive.</li>\n</ul>\n<pre>neurartist -c content.jpg -s style.jpg --content-guidance content_image_guidance_path/ --style-guidance style_image_guidance_path/ --guidance-propagation-method inside\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Anaconda is strongly recommended:</p>\n<pre>conda create python=3.7 --name neurartist_env\nconda activate neurartist_env\n\n# with gpu\nconda install pytorch torchvision cudatoolkit=&lt;your cudatoolkit version&gt; -c pytorch\nconda install --file requirements.txt\n\n# with cpu\nconda install pytorch-cpu torchvision-cpu -c pytorch\nconda install --file requirements.txt\n</pre>\n<p>You can then run the main entrypoint directly using:</p>\n<pre>python -m neurartist --help\n</pre>\n<p>Or build and install the wheel file with the <tt><span class=\"pre\">--editable</span></tt> flag.</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Documentation.</li>\n<li>Implement total variation loss (see\n<a href=\"https://www.tensorflow.org/beta/tutorials/generative/style_transfer\" rel=\"nofollow\">this</a>).</li>\n<li>Implement guided sums.</li>\n<li>Examine if we need to add a fallback global guidance channel for\npixels that aren\u2019t covered by any channel (briefly mentioned in the\narticle but very vague). Short answer: yes, it is needed, with bigger\nkernel sizes the style transfer isn\u2019t performed at the boundary.</li>\n<li>For guidance channels propagation: investigate what they mean by\n\u201cerosion\u201d (see supplementary material document linked in the original\narticle).</li>\n<li><a href=\"https://arxiv.org/pdf/1703.07511.pdf\" rel=\"nofollow\">Semantic segmentation as described in this article as to limit\nspillovers</a>: different\napproach than guided gram matrices, but same idea of using spatial\nguidance channels that describe a semantic segmentation of our\nimages.</li>\n<li>More deep-artistic algorithms.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5663399, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "541d8f947ffaeb8deef0ed571c3a2e63", "sha256": "33dbf7d4fd275ac5e5f7edcfd1ccafbf4d0b657f555d5487d04be4ca14216cd3"}, "downloads": -1, "filename": "neurartist-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "541d8f947ffaeb8deef0ed571c3a2e63", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20079, "upload_time": "2019-07-03T19:24:45", "upload_time_iso_8601": "2019-07-03T19:24:45.744551Z", "url": "https://files.pythonhosted.org/packages/39/67/d9c88660877875ca5e83997a1139520c0ad5bbb68d7be0982a246c0bc96a/neurartist-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7dfc897507f6938aac6da7a5512f13f", "sha256": "8bb6a0208dcc02d3c1acf5788faf963b190d24246003c06d7ee2aef1930c6026"}, "downloads": -1, "filename": "neurartist-0.1.tar.gz", "has_sig": false, "md5_digest": "f7dfc897507f6938aac6da7a5512f13f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7197, "upload_time": "2019-07-03T19:24:47", "upload_time_iso_8601": "2019-07-03T19:24:47.993225Z", "url": "https://files.pythonhosted.org/packages/69/f5/3a3337d57d62300f887e1394513357cf473c6af5a48be880057af93e7913/neurartist-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "21a5cb035006dac743890b5b5defc7ac", "sha256": "dd9cc06a3f10e47de9427ab5129c691bf89cade6f79bc4ebd7daba5bb5cf4959"}, "downloads": -1, "filename": "neurartist-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "21a5cb035006dac743890b5b5defc7ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21047, "upload_time": "2019-07-04T14:00:50", "upload_time_iso_8601": "2019-07-04T14:00:50.850686Z", "url": "https://files.pythonhosted.org/packages/89/be/f2888a7573a0552a66e561f42d610cba6a135c015ba9fd02771cb7f9345f/neurartist-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9aabd6caff94627154196946ff61ab77", "sha256": "3506b154e5d4fd6b4bebdd03d9c68d20b787de7a234e4cb75f2e87053075f33f"}, "downloads": -1, "filename": "neurartist-0.2.tar.gz", "has_sig": false, "md5_digest": "9aabd6caff94627154196946ff61ab77", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8042, "upload_time": "2019-07-04T14:00:52", "upload_time_iso_8601": "2019-07-04T14:00:52.328107Z", "url": "https://files.pythonhosted.org/packages/4b/2b/8466db7c0add12b0ca41bd35da4b36964984f45e63086b2711f4c4620d27/neurartist-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "00ebba9dbd5f2ae9ebc82630b6a80ebb", "sha256": "6fcacc3fa04b800a633199e081a224b89fa0691fa0bbebb3bc876bd135cdf844"}, "downloads": -1, "filename": "neurartist-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "00ebba9dbd5f2ae9ebc82630b6a80ebb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 23869, "upload_time": "2019-07-07T20:41:43", "upload_time_iso_8601": "2019-07-07T20:41:43.707697Z", "url": "https://files.pythonhosted.org/packages/d6/c3/272c786f38f26b9da5f177d2066dc706a1aa9fedae893a2cc206904e3663/neurartist-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55b292fff93b2c5c340f5fd4730de386", "sha256": "2487127efe01c82392ff8370c1c9e5412bf5c24d2fb8a3082f2cfd7b4333309a"}, "downloads": -1, "filename": "neurartist-0.3.tar.gz", "has_sig": false, "md5_digest": "55b292fff93b2c5c340f5fd4730de386", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 12617, "upload_time": "2019-07-07T20:41:46", "upload_time_iso_8601": "2019-07-07T20:41:46.655338Z", "url": "https://files.pythonhosted.org/packages/b9/fc/2871a03f2ee9a5da7a39a0a75e871193f141287a7cc4cbf96fea0d2d15b9/neurartist-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "6dbc933fe33d6f99c32057e5ebd8df4e", "sha256": "d3c1470f89c737652844ec81ae0e3a409c719b26281b0ca2708d2bfa7c797e1d"}, "downloads": -1, "filename": "neurartist-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6dbc933fe33d6f99c32057e5ebd8df4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 27166, "upload_time": "2019-07-14T22:39:13", "upload_time_iso_8601": "2019-07-14T22:39:13.846095Z", "url": "https://files.pythonhosted.org/packages/e9/5f/5c23066b9aa402b9774335bf98fc659a771e9275590aa6479dc38bf5545f/neurartist-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d502ef671f16a1459b493a0f4364fff2", "sha256": "a7e261df1bc1163eb21231134e918480de65633e71ea41246d713964a622deb5"}, "downloads": -1, "filename": "neurartist-0.4.tar.gz", "has_sig": false, "md5_digest": "d502ef671f16a1459b493a0f4364fff2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 16093, "upload_time": "2019-07-14T22:39:15", "upload_time_iso_8601": "2019-07-14T22:39:15.565925Z", "url": "https://files.pythonhosted.org/packages/31/37/98028da5904f9a6c573876b251ffcb80da212cc5b5bc50c29e4b32ccd4f8/neurartist-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "b2b2d9368852c47734b635b4b72a1633", "sha256": "ac3b761c50a12ad40edee2f50c16c66484f3be2049649b3ca0201adb3dc4a846"}, "downloads": -1, "filename": "neurartist-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b2b2d9368852c47734b635b4b72a1633", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 27724, "upload_time": "2019-08-11T22:50:21", "upload_time_iso_8601": "2019-08-11T22:50:21.628522Z", "url": "https://files.pythonhosted.org/packages/0b/5d/57ae37ffb75002795582381d62829ee4d6800444f91e3c783d58285e2a3d/neurartist-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a40e499902db47ce4c240f2d9dc227f6", "sha256": "b89b910e22556384b106df9395c041f3e624ab5552658ea7294fb416a5658538"}, "downloads": -1, "filename": "neurartist-0.4.1.tar.gz", "has_sig": false, "md5_digest": "a40e499902db47ce4c240f2d9dc227f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 16543, "upload_time": "2019-08-11T22:50:23", "upload_time_iso_8601": "2019-08-11T22:50:23.214741Z", "url": "https://files.pythonhosted.org/packages/9f/3c/04fff30551a54d4ddac234c334ffcff5bb1b68d92c324464a601096cc923/neurartist-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2b2d9368852c47734b635b4b72a1633", "sha256": "ac3b761c50a12ad40edee2f50c16c66484f3be2049649b3ca0201adb3dc4a846"}, "downloads": -1, "filename": "neurartist-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b2b2d9368852c47734b635b4b72a1633", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 27724, "upload_time": "2019-08-11T22:50:21", "upload_time_iso_8601": "2019-08-11T22:50:21.628522Z", "url": "https://files.pythonhosted.org/packages/0b/5d/57ae37ffb75002795582381d62829ee4d6800444f91e3c783d58285e2a3d/neurartist-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a40e499902db47ce4c240f2d9dc227f6", "sha256": "b89b910e22556384b106df9395c041f3e624ab5552658ea7294fb416a5658538"}, "downloads": -1, "filename": "neurartist-0.4.1.tar.gz", "has_sig": false, "md5_digest": "a40e499902db47ce4c240f2d9dc227f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 16543, "upload_time": "2019-08-11T22:50:23", "upload_time_iso_8601": "2019-08-11T22:50:23.214741Z", "url": "https://files.pythonhosted.org/packages/9f/3c/04fff30551a54d4ddac234c334ffcff5bb1b68d92c324464a601096cc923/neurartist-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:47 2020"}