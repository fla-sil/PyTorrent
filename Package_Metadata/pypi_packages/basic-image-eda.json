{"info": {"author": "Seungjae Kim", "author_email": "sjn735@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "\n# basic-image-eda\n\nA simple multiprocessing EDA tool to check basic information of images under a directory(images are found recursively). This tool was made to quickly check info and prevent mistakes on reading, resizing, and normalizing images as inputs for neural networks. It can be used when first joining an image competition or training CNNs with images!\n\n*Notes:*  \n\\- All images are converted to 3-channel(rgb) images. When images that have various channels are mixed, some results can be misleading.  \n\\- uint8 and uint16 data types are supported. If different data types are mixed, error occurs.  \n\\- Supported extensions: jpg, jpeg, jpe, png, tif, tiff, bmp, ppm, pbm, pgm, sr, ras, webp  \n\n### Installation\n```bash\npip install basic-image-eda\n```\nor (latest version)\n```bash\npip install git+https://github.com/Soongja/basic-image-eda\n```\n\nprerequisites:\n- opencv-python\n- numpy\n- matplotlib\n- skimage.io\n- tifffile\n- tqdm\n\n### Usage(CLI/Code)\n#### CLI\nsimple one line command!\n```bash\nbasic-image-eda <data_dir>\n```\nor\n```bash\nbasic-image-eda <data_dir> -e png tiff -t 12 --dimension_plot --channel_hist --nonzero --hw_division_factor 2.0 > eda.txt\n\nOptions:\n  -e --extensions          target image extensions. if none, all supported extensions are included.(default=None)\n  -t --threads             number of multiprocessing threads. if 0, automatically count max threads.(default=0)\n  -d --dimension_plot      show dimension(height/width) scatter plot.(default=False)\n  -c --channel_hist        show channelwise pixel value histogram. takes longer time.(default=False)\n  -n --nonzero             calculate values only from non-zero pixels of the images.(default=False)\n  -f --hw_division_factor  divide height,width of the images by this factor to make pixel value calculation faster.\n                           Information on height, width are not changed and will be printed correctly.(default=1.0)\n  -V --version             show version.\n```\n\n#### Code\n```python\nfrom basic_image_eda import BasicImageEDA\n\nif __name__ == \"__main__\":  # for multiprocessing\n    data_dir = \"./data\"\n    BasicImageEDA.explore(data_dir)\n\n    # or\n\n    extensions = ['png', 'jpg', 'jpeg']\n    threads = 0\n    dimension_plot = True\n    channel_hist = True\n    nonzero = False\n    hw_division_factor = 1.0\n\n    BasicImageEDA.explore(data_dir, extensions, threads, dimension_plot, channel_hist, nonzero, hw_division_factor)\n```\n\n### Results\n#### Results on [celeba dataset](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) (test set)\n\n<table border=\"0\">\n<tr>\n    <td>\n    <img src=\"https://user-images.githubusercontent.com/32871371/81141998-43ebe700-8fa9-11ea-9645-fff2cc83ab9b.png\" width=\"100%\">\n    </td>\n    <td>\n    <img src=\"https://user-images.githubusercontent.com/32871371/81142025-5fef8880-8fa9-11ea-98eb-2c43b256fa8d.png\", width=\"100%\">\n    </td>\n</tr>\n</table>\n\n```\nfound 19962 images.\nUsing 12 threads. (max:12)\n\n*--------------------------------------------------------------------------------------*\nnumber of images                         |  19962\n\ndtype                                    |  uint8\nchannels                                 |  [3]\nextensions                               |  ['jpg']\n\nmin height                               |  85\nmax height                               |  5616\nmean height                              |  591.8215108706543\nmedian height                            |  500\n\nmin width                                |  85\nmax width                                |  5616\nmean width                               |  490.2976655645727\nmedian width                             |  396\n\nmean height/width ratio                  |  1.207065732587525\nmedian height/width ratio                |  1.2626262626262625\nrecommended input size(by mean)          |  [592 488] (h x w, multiples of 8)\nrecommended input size(by mean)          |  [592 496] (h x w, multiples of 16)\nrecommended input size(by mean)          |  [576 480] (h x w, multiples of 32)\n\nchannel mean(0~1)                        |  [0.4954518  0.42574266 0.39330518]\nchannel std(0~1)                         |  [0.3216056 0.3023355 0.3018837]\n*--------------------------------------------------------------------------------------*\n```\n\ndownload site: http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html  \npaper: S. Yang, P. Luo, C. C. Loy, and X. Tang, \"From Facial Parts Responses to Face Detection: A Deep Learning Approach\", in IEEE International Conference on Computer Vision (ICCV), 2015  \n\n#### Results on [NIH Chest X-ray dataset](https://cloud.google.com/healthcare/docs/resources/public-datasets/nih-chest?hl=ko) (images_001.tar.gz)\n\n<table border=\"0\">\n<tr>\n    <td>\n    <img src=\"https://user-images.githubusercontent.com/32871371/81142053-6f6ed180-8fa9-11ea-95d4-01412e22d4d5.png\" width=\"100%\">\n    </td>\n    <td>\n    <img src=\"https://user-images.githubusercontent.com/32871371/81142064-7a296680-8fa9-11ea-9940-eb2dc2edcd79.png\", width=\"100%\">\n    </td>\n</tr>\n</table>\n\n```\nfound 4999 images.\nUsing 12 threads. (max:12)\n\n*--------------------------------------------------------------------------------------*\nnumber of images                         |  4999\n\ndtype                                    |  uint8\nchannels                                 |  [1, 4]\nextensions                               |  ['png']\n\nmin height                               |  1024\nmax height                               |  1024\nmean height                              |  1024.0\nmedian height                            |  1024\n\nmin width                                |  1024\nmax width                                |  1024\nmean width                               |  1024.0\nmedian width                             |  1024\n\nmean height/width ratio                  |  1.0\nmedian height/width ratio                |  1.0\nrecommended input size(by mean)          |  [1024 1024] (h x w, multiples of 8)\nrecommended input size(by mean)          |  [1024 1024] (h x w, multiples of 16)\nrecommended input size(by mean)          |  [1024 1024] (h x w, multiples of 32)\n\nchannel mean(0~1)                        |  [0.5172472 0.5172472 0.5172472]\nchannel std(0~1)                         |  [0.25274998 0.25274998 0.25274998]\n*--------------------------------------------------------------------------------------*\n```\n\ndata provider: NIH Clinical Center  \ndownload site: https://nihcc.app.box.com/v/ChestXray-NIHCC  \npaper: Xiaosong Wang, Yifan Peng, Le Lu, Zhiyong Lu, Mohammadhadi Bagheri, Ronald Summers, ChestX-ray8:\nHospital-scale Chest X-ray Database and Benchmarks on Weakly-Supervised Classification and Localization of\nCommon Thorax Diseases, IEEE CVPR, pp. 3462-3471, 2017  \n\n### License\n[MIT License](https://github.com/Soongja/basic-image-eda/blob/master/LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Soongja/basic-image-eda", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "basic-image-eda", "package_url": "https://pypi.org/project/basic-image-eda/", "platform": "", "project_url": "https://pypi.org/project/basic-image-eda/", "project_urls": {"Homepage": "https://github.com/Soongja/basic-image-eda"}, "release_url": "https://pypi.org/project/basic-image-eda/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "image dataset eda tool to check basic information of images.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>basic-image-eda</h1>\n<p>A simple multiprocessing EDA tool to check basic information of images under a directory(images are found recursively). This tool was made to quickly check info and prevent mistakes on reading, resizing, and normalizing images as inputs for neural networks. It can be used when first joining an image competition or training CNNs with images!</p>\n<p><em>Notes:</em><br>\n- All images are converted to 3-channel(rgb) images. When images that have various channels are mixed, some results can be misleading.<br>\n- uint8 and uint16 data types are supported. If different data types are mixed, error occurs.<br>\n- Supported extensions: jpg, jpeg, jpe, png, tif, tiff, bmp, ppm, pbm, pgm, sr, ras, webp</p>\n<h3>Installation</h3>\n<pre>pip install basic-image-eda\n</pre>\n<p>or (latest version)</p>\n<pre>pip install git+https://github.com/Soongja/basic-image-eda\n</pre>\n<p>prerequisites:</p>\n<ul>\n<li>opencv-python</li>\n<li>numpy</li>\n<li>matplotlib</li>\n<li>skimage.io</li>\n<li>tifffile</li>\n<li>tqdm</li>\n</ul>\n<h3>Usage(CLI/Code)</h3>\n<h4>CLI</h4>\n<p>simple one line command!</p>\n<pre>basic-image-eda &lt;data_dir&gt;\n</pre>\n<p>or</p>\n<pre>basic-image-eda &lt;data_dir&gt; -e png tiff -t <span class=\"m\">12</span> --dimension_plot --channel_hist --nonzero --hw_division_factor <span class=\"m\">2</span>.0 &gt; eda.txt\n\nOptions:\n  -e --extensions          target image extensions. <span class=\"k\">if</span> none, all supported extensions are included.<span class=\"o\">(</span><span class=\"nv\">default</span><span class=\"o\">=</span>None<span class=\"o\">)</span>\n  -t --threads             number of multiprocessing threads. <span class=\"k\">if</span> <span class=\"m\">0</span>, automatically count max threads.<span class=\"o\">(</span><span class=\"nv\">default</span><span class=\"o\">=</span><span class=\"m\">0</span><span class=\"o\">)</span>\n  -d --dimension_plot      show dimension<span class=\"o\">(</span>height/width<span class=\"o\">)</span> scatter plot.<span class=\"o\">(</span><span class=\"nv\">default</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n  -c --channel_hist        show channelwise pixel value histogram. takes longer time.<span class=\"o\">(</span><span class=\"nv\">default</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n  -n --nonzero             calculate values only from non-zero pixels of the images.<span class=\"o\">(</span><span class=\"nv\">default</span><span class=\"o\">=</span>False<span class=\"o\">)</span>\n  -f --hw_division_factor  divide height,width of the images by this factor to make pixel value calculation faster.\n                           Information on height, width are not changed and will be printed correctly.<span class=\"o\">(</span><span class=\"nv\">default</span><span class=\"o\">=</span><span class=\"m\">1</span>.0<span class=\"o\">)</span>\n  -V --version             show version.\n</pre>\n<h4>Code</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">basic_image_eda</span> <span class=\"kn\">import</span> <span class=\"n\">BasicImageEDA</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>  <span class=\"c1\"># for multiprocessing</span>\n    <span class=\"n\">data_dir</span> <span class=\"o\">=</span> <span class=\"s2\">\"./data\"</span>\n    <span class=\"n\">BasicImageEDA</span><span class=\"o\">.</span><span class=\"n\">explore</span><span class=\"p\">(</span><span class=\"n\">data_dir</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># or</span>\n\n    <span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'png'</span><span class=\"p\">,</span> <span class=\"s1\">'jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'jpeg'</span><span class=\"p\">]</span>\n    <span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">dimension_plot</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">channel_hist</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">nonzero</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">hw_division_factor</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n\n    <span class=\"n\">BasicImageEDA</span><span class=\"o\">.</span><span class=\"n\">explore</span><span class=\"p\">(</span><span class=\"n\">data_dir</span><span class=\"p\">,</span> <span class=\"n\">extensions</span><span class=\"p\">,</span> <span class=\"n\">threads</span><span class=\"p\">,</span> <span class=\"n\">dimension_plot</span><span class=\"p\">,</span> <span class=\"n\">channel_hist</span><span class=\"p\">,</span> <span class=\"n\">nonzero</span><span class=\"p\">,</span> <span class=\"n\">hw_division_factor</span><span class=\"p\">)</span>\n</pre>\n<h3>Results</h3>\n<h4>Results on <a href=\"http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html\" rel=\"nofollow\">celeba dataset</a> (test set)</h4>\n<table>\n<tr>\n    <td>\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24b193079b6b1a35b00787ff24d795213965bd08/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f33323837313337312f38313134313939382d34336562653730302d386661392d313165612d393634352d6666663263633833616239622e706e67\" width=\"100%\">\n    </td>\n    <td>\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b93b70e3bc7febba513a5bb1ff71cd6c39d7ef50/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f33323837313337312f38313134323032352d35666566383838302d386661392d313165612d393865622d3263343362323536666138642e706e67\" width=\"100%\">\n    </td>\n</tr>\n</table>\n<pre><code>found 19962 images.\nUsing 12 threads. (max:12)\n\n*--------------------------------------------------------------------------------------*\nnumber of images                         |  19962\n\ndtype                                    |  uint8\nchannels                                 |  [3]\nextensions                               |  ['jpg']\n\nmin height                               |  85\nmax height                               |  5616\nmean height                              |  591.8215108706543\nmedian height                            |  500\n\nmin width                                |  85\nmax width                                |  5616\nmean width                               |  490.2976655645727\nmedian width                             |  396\n\nmean height/width ratio                  |  1.207065732587525\nmedian height/width ratio                |  1.2626262626262625\nrecommended input size(by mean)          |  [592 488] (h x w, multiples of 8)\nrecommended input size(by mean)          |  [592 496] (h x w, multiples of 16)\nrecommended input size(by mean)          |  [576 480] (h x w, multiples of 32)\n\nchannel mean(0~1)                        |  [0.4954518  0.42574266 0.39330518]\nchannel std(0~1)                         |  [0.3216056 0.3023355 0.3018837]\n*--------------------------------------------------------------------------------------*\n</code></pre>\n<p>download site: <a href=\"http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html\" rel=\"nofollow\">http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html</a><br>\npaper: S. Yang, P. Luo, C. C. Loy, and X. Tang, \"From Facial Parts Responses to Face Detection: A Deep Learning Approach\", in IEEE International Conference on Computer Vision (ICCV), 2015</p>\n<h4>Results on <a href=\"https://cloud.google.com/healthcare/docs/resources/public-datasets/nih-chest?hl=ko\" rel=\"nofollow\">NIH Chest X-ray dataset</a> (images_001.tar.gz)</h4>\n<table>\n<tr>\n    <td>\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5bc2512b2bc87b821635edcd595d79f157bd840/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f33323837313337312f38313134323035332d36663665643138302d386661392d313165612d393564342d3031343132653232643464352e706e67\" width=\"100%\">\n    </td>\n    <td>\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5019e4913434511cda2b7a4694871bb573e26223/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f33323837313337312f38313134323036342d37613239363638302d386661392d313165612d393934302d6562326463326564636437392e706e67\" width=\"100%\">\n    </td>\n</tr>\n</table>\n<pre><code>found 4999 images.\nUsing 12 threads. (max:12)\n\n*--------------------------------------------------------------------------------------*\nnumber of images                         |  4999\n\ndtype                                    |  uint8\nchannels                                 |  [1, 4]\nextensions                               |  ['png']\n\nmin height                               |  1024\nmax height                               |  1024\nmean height                              |  1024.0\nmedian height                            |  1024\n\nmin width                                |  1024\nmax width                                |  1024\nmean width                               |  1024.0\nmedian width                             |  1024\n\nmean height/width ratio                  |  1.0\nmedian height/width ratio                |  1.0\nrecommended input size(by mean)          |  [1024 1024] (h x w, multiples of 8)\nrecommended input size(by mean)          |  [1024 1024] (h x w, multiples of 16)\nrecommended input size(by mean)          |  [1024 1024] (h x w, multiples of 32)\n\nchannel mean(0~1)                        |  [0.5172472 0.5172472 0.5172472]\nchannel std(0~1)                         |  [0.25274998 0.25274998 0.25274998]\n*--------------------------------------------------------------------------------------*\n</code></pre>\n<p>data provider: NIH Clinical Center<br>\ndownload site: <a href=\"https://nihcc.app.box.com/v/ChestXray-NIHCC\" rel=\"nofollow\">https://nihcc.app.box.com/v/ChestXray-NIHCC</a><br>\npaper: Xiaosong Wang, Yifan Peng, Le Lu, Zhiyong Lu, Mohammadhadi Bagheri, Ronald Summers, ChestX-ray8:\nHospital-scale Chest X-ray Database and Benchmarks on Weakly-Supervised Classification and Localization of\nCommon Thorax Diseases, IEEE CVPR, pp. 3462-3471, 2017</p>\n<h3>License</h3>\n<p><a href=\"https://github.com/Soongja/basic-image-eda/blob/master/LICENSE\" rel=\"nofollow\">MIT License</a></p>\n\n          </div>"}, "last_serial": 7178358, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a07ba747a2168e6b184e0e006f3c83fd", "sha256": "0910c9090f80d2796cd0d3ea817b2268a796fabdaf2e132cd95e465faa5b0137"}, "downloads": -1, "filename": "basic_image_eda-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a07ba747a2168e6b184e0e006f3c83fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8083, "upload_time": "2020-02-17T16:49:53", "upload_time_iso_8601": "2020-02-17T16:49:53.098781Z", "url": "https://files.pythonhosted.org/packages/29/4f/f442861da1a9258173395b4811f0dcbde13f719be1f43888794e95c993e9/basic_image_eda-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e833587a26bf21f0883a0ff0a22a9e7b", "sha256": "d41f3cf031186a99d4dcea79846482eacf6a6adeab3ee76ca13875e160b60a51"}, "downloads": -1, "filename": "basic_image_eda-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e833587a26bf21f0883a0ff0a22a9e7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8898, "upload_time": "2020-04-28T08:42:04", "upload_time_iso_8601": "2020-04-28T08:42:04.454056Z", "url": "https://files.pythonhosted.org/packages/6a/0e/ab430144598d3f2d58e32a59b714ecba874bec3160e1865f8a652d48ebdd/basic_image_eda-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "464288a55b874e11baf5b6831df02395", "sha256": "c4a2500fbb967029b30df0767fbb7a85405650dc6f4dbf99a5914f77aaed8a6f"}, "downloads": -1, "filename": "basic_image_eda-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "464288a55b874e11baf5b6831df02395", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9756, "upload_time": "2020-05-06T07:47:58", "upload_time_iso_8601": "2020-05-06T07:47:58.823992Z", "url": "https://files.pythonhosted.org/packages/a9/35/183057a3723d4c0b9c0f1431af2ee4765b0b98d57ad5dd18205d3ba03bf1/basic_image_eda-0.0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "464288a55b874e11baf5b6831df02395", "sha256": "c4a2500fbb967029b30df0767fbb7a85405650dc6f4dbf99a5914f77aaed8a6f"}, "downloads": -1, "filename": "basic_image_eda-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "464288a55b874e11baf5b6831df02395", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9756, "upload_time": "2020-05-06T07:47:58", "upload_time_iso_8601": "2020-05-06T07:47:58.823992Z", "url": "https://files.pythonhosted.org/packages/a9/35/183057a3723d4c0b9c0f1431af2ee4765b0b98d57ad5dd18205d3ba03bf1/basic_image_eda-0.0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:14:47 2020"}