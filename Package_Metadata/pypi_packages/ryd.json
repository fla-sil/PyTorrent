{"info": {"author": "Anthon van der Neut", "author_email": "a.van.der.neut@ruamel.eu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "***\nryd\n***\n\n.. image:: https://sourceforge.net/p/ryd/code/ci/default/tree/_doc/_static/license.svg?format=raw\n   :target: https://opensource.org/licenses/MIT\n\n.. image:: https://sourceforge.net/p/ryd/code/ci/default/tree/_doc/_static/pypi.svg?format=raw\n   :target: https://pypi.org/project/ryd/\n\n.. image:: https://sourceforge.net/p/oitnb/code/ci/default/tree/_doc/_static/oitnb.svg?format=raw\n   :target: https://pypi.org/project/oitnb/\n\n.. image:: https://sourceforge.net/p/ryd/code/ci/default/tree/_doc/_static/ryd.svg?format=raw\n   :target: https://pypi.org/project/ryd/\n\n\n``ryd`` ( /r\u0251\u026at/, pronounced like the verb \"write\" ) is a preprocessor for text\nbased documents, that builds upon the multi-document capabilities of YAML\nfiles/streams.\n\nThe use of multi-document in ``ryd`` allows for clear separation between\ndocument text and any programs referenced in those text. Thereby making it\npossible to run (c.q. compile) the program parts of a document, e.g. to check\nwhether they are syntactically correct. It can also capture the *actual* output\nof those programs to be included in the document.\n\nThis allows for easier maintenance of (correct) program sources, in document\nsource texts like reStructuredText, LaTeX, etc.\n\nExample\n=======\n\nA \"normal\" ``.ryd`` file consists of multiple YAML 1.2 documents in one file.\n\nThe first of these documents has, at the root-level, a mapping. This\nmapping is the **ryd configuration data** for this stream of\ndocuments, and is used to define ``ryd`` document version used, output\nand other configuration informationis. The first document doesn't\nnormally have any directives, that the document is YAML 1.2 is\nimplicit, so no ``%YAML 1.2`` directive is needed and without\ndirective and no preceding document, you should not have a\ndirectives-end marker line (``---``)\n\nThe documents following the first document are usually block\nstyle literal scalars with an optional tag. The tag influences how the scalar\nstring is processed within the selected output system::\n\n  version: 0.1\n  output: rst\n  fix_inline_single_backquotes: true\n  --- |\n  Example Python program\n  ++++++++++++++++++++++\n\n  This is an example of a python program\n  --- !python |\n  n = 7\n  print(n**2 - n)\n  --- !stdout |\n  The answer is::\n\nthis will generate (using: ``ryd convert test.ryd``) the following ``test.rst``::\n\n  Example Python program\n  ++++++++++++++++++++++\n\n  This is an example of a Python program\n  ::\n\n    n = 7\n    print(n**2 - n)\n\n  The answer is::\n\n    42\n\nwhich can then be converted to PDF using ``rst2pdf`` or HTML using ``rst2html``.\n\nCommand-line options\n++++++++++++++++++++\n\nThe command-line of ``ryd`` consists of multiple components::\n\n   ryd [--global-option] command [--options] [arguments]\n\nAlthough not indicated most global options can occur after the command as well.\n\ncommands\n^^^^^^^^\n\n::\n\n    convert             generate output as per first YAML document\n    clean               clean output files for .ryd files\n    roundtrip           roundtrip .ryd file, updating sections\n    from-rst (fromrst)  convert .rst to .ryd\n\nYou'll most often use ``convert`` it takes one or more filenames as argument\nand generates output as specified in the ryd configuration data. Some options allow you to override settings there (e.g. ``--pdf`` and ``-no-pdf``)\n\nThe command ``from-rst`` converts a ``.rst`` file into ``.ryd`` doing some section underline checking and adding the ryd configuration data document.\n\nThe ``roundtrip`` command has an option ``--oitnb`` running in place\ncode-formatting on the ``!Python)-pre)`` sections of the ``.ryd`` file. You need to\nhave `oitnb <https://pypi.org/project/oitnb/>`__ in your path for this.\n\nDoing ``ryd command --help`` might indicate extra options that have not yet made it into\nthe documentation.\n\nDocuments and document tags\n+++++++++++++++++++++++++++\n\nEach YAML document is separated from other documents in the stream by the\ndocument start marker ``---``. Apart from the first document, most documents\ncontain a single, multi-line, non-indented, scalar. The document start marker is\ntherefor followed by the pipe (``|``) symbol, which is the YAML indication for a\nmulti-line scalar.\n\nThat scalar can be \"typed\" in the normal way of YAML by inserting a\ntag before the ``|``. E.g. a document that is a type of Python program\nhas a tag ``!python``.\n\nWhat a document tag exactly does, depends on the tag, but, potentially, also, on\nthe output file format selected, on previously processed tagged documents, other\n``.ryd`` files processed previously and the environment.\nThe following are short descriptions for all tags, independent of the selected\noutput format:\n\n\n!code\n  Include program in text. Do not mark as executable, doesn't influence    ``!stdout``.\n\n!comment\n  The whole document will be discarded, i.e. not included in the output.\n\n!inc\n  Include the content of the listed files (indented), without other processing,     into the output. Preceed with ``::`` if necessary.\n\n!incraw\n  Include the listed files raw (i.e. without processing, or indenting) into the output.\n\n!last-compile\n  Include output from last compilation as code.\n\n!nim\n  Include Nim program in text. Prefix and mark as executable.\n\n!nim-pre\n  Prefix all following ``!nim`` documents with this document (e.g. used for imports)\n\n!python\n  Include Python program in text. Prefix and mark as executable.\n\n!python-hidden\n  Do  not include Python program in text. Prefix and mark as executable.\n\n!python-pre\n  Prefix all following ``!python`` documents with this document (e.g. used for imports)\n\n!stdout\n  Include output from last executable document (e.g. ``!python``) as code.\n\n!stdout-raw\n  Include output from the last program, as source for the output format.\n\n!unpy\n  Include Nim program in text. Do not mark as executable. Set output to result of unpy.\n\nRST\n===\n\nThe output to ``.rst`` expects non-code YAML documents to be valid\nreStructuredText. Any non-tagged documents, i.e. those starting with::\n\n  --- |\n\nare assumed to be text input.\n\nSection underlining\n+++++++++++++++++++\n\nBecause of the special meaning of ``---`` (and ``...``) at the beginning of a line,\nfollowed by newline or space, the section under/over-line characters used in\n``.ryd`` files that are source for ``.rst`` should not use ``-`` or ``.``\nsequences if a any of those section names consist of three letters (e.g. a section\nnamed API or RST). It is recommended to use the following scheme::\n\n   Sections, subsections, etc. in .ryd files\n    # with over-line, for parts\n    * with over-line, for chapters\n    =, for sections\n    +, for subsections\n    ^, for sub-subsections\n    \", for paragraphs\n\nSingle backquotes\n+++++++++++++++++\n\nThe ``fix_inline_single_backquotes: true`` tells ``ryd`` to indicate lines that have\nsingle backquotes, that need fixing (by replacing them with double backquotes)::\n\n  README.ryd\n  47: this will generate (`ryd convert test.ryd`) the following\n                        --^\n                                             --^\n\n(If you are used to other inline code markup editing e.g. on Stack Overflow, that uses single\nbackquotes, you'll come to appreciate this.)\n\nPython\n++++++\n\nPython code is indicated by::\n\n  --- !python |\n\nThe document is inserted into the ``.rst`` with a two space indent. If\nthe previous block does not end in ``::`` this double colon, and a\nnewline, are explicitly inserted before the program. The difference\nbeing that a text block ending in ``::`` will have a single ``:`` rendered, a\n``::`` on a line of its own will not. An empty line between the\npreceding text and the code is inserted when needed.\n\nIf your program relies on specific packages, those packages, need to\nbe available in the environment in which ``ryd`` is started (which can e.g. be a\nspecifically set up ``virtualenv``)\n\n\nIt is possible to have \"partial programs\" by preceding a python document with\ne.g.::\n\n  --- !python-pre |\n  from __future__ import print_function\n  import sys\n  import ruamel.yaml\n  from ruamel.std.pathlib import Path, pushd, popd, PathLibConversionHelper\n  pl = PathLibConversionHelper()\n\nSuch a block is pre-pended to all following ``--- !python |`` documents (until\nsuperseded by another ``--- !python-pre |`` block)\n\n\nCaptured output\n+++++++++++++++\n\nThe output from the last program that was run (``--- !python |``) is stored and\ncan be post-pended to a reStructuredText document by tagging it with ``!stdout``\n(i.e. ``--- !stdout |``)\n\nnon-running code\n++++++++++++++++\n\nA document tagged ``!code`` will be represented as one tagged ``!python``, but\nthe code will not be run (and hence the output used for ``!stdout`` not changed).\n\nNim\n+++\n\nNim code is indicated by::\n\n  --- !nim |\n\nThe document is inserted as with Python, there can be a ``!nim-pre`` document,\nand output is captured and displayed with ``--- !stdout |``)::\n\n  let a = 123\n  let x = 0b0010_1010\n  echo(fmt\"The answer to the question: {x}\")\n\nwhich outputs::\n\n  The answer to the question: 42\n\n\nMake sure you append ``::`` at the end of your text, this is currently not\nautomatically inserted.\n\nThe compilation is done with options ``--verbosity:0 --hint[Processing]:off`` .\n\ncompiler output\n^^^^^^^^^^^^^^^\n\nIf you are interested in the textual output of the compiler you can use\n``--- !last-compile |``\n\nFor which the text should also end with ``::`` ::\n\n  /tmp/ryd-of-anthon/ryd-128/tmp_1.nim(4, 5) Hint: 'a' is declared but not used [XDeclaredButNotUsed]\n\n\nComments\n========\n\nBlock style literal scalars do not allow YAML comments. To insert comments in a\ntext, either use the format acceptable by the output, e.g. when generating ``.rst`` use::\n\n   ..\n      this will show up in the resulting .rst file, but will\n      not render\n\n..\n  this will show up in the resulting .rst file, but will\n  not render\n\nAlternatively you can create a comment YAML document (``--- !comment |``), for\nwhich the text will not be represented in the output file format **at all**.\n\n\nHistory\n=======\n\n``ryd`` grew out of a in-house solution where sections of reStructuredText files were\nupdated, in-place, by running Python programs specified in separate files. Also\nallowing the inclusion of the (error) output.\n\nAn example of this can be seen in `this\n<https://bitbucket.org/ruamel/yaml/raw/0be7d3cb8449b15d9ac9b097322f09e52b92f868/_doc/example.rst>`_\nold version of the ``example.rst`` file of the ``ruamel.yaml`` package::\n\n  Basic round trip of parsing YAML to Python objects, modifying\n  and generating YAML::\n\n    import sys\n    from ruamel.yaml import YAML\n\n    inp = \"\"\"\\\n    # example\n    name:\n      # details\n      family: Smith   # very common\n      given: Alice    # one of the siblings\n    \"\"\"\n\n    yaml = YAML()\n    code = yaml.load(inp)\n    code['name']['given'] = 'Bob'\n\n    yaml.dump(code, sys.stdout)\n\n  .. example code small.py\n\n  Resulting in ::\n\n    # example\n    name:\n      # details\n      family: Smith   # very common\n      given: Bob      # one of the siblings\n\n\n  .. example output small.py\n\n\nThe program was inserted before the ``.. example code`` line and its output before\n``.. example output``, replacing all the text starting after the previous ``::``\n\nThe ``small.py`` referenced a separate file for this piece of code.\nThis resulted in multiple source files that were associated with a single\n``.rst`` file. There was no mechanism to have partial programs that could be\ntested by execution, which precluded getting output from such program as well.\n\nAlthough the code could have been edited in place, and used to get the\noutput, this would force one to use the extra indentation required for\nlines following reST's ``::``.\n\nOnce this system came under review, the solution with a structured YAML header, as used\nwith various file formats, combined with multiple document consisting of\n(tagged) top level, non-indented, block style literal scalars, was chosen instead.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://sourceforge.net/p/ryd/code/ci/default/tree", "keywords": "restructuredtext markup preprocessing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ryd", "package_url": "https://pypi.org/project/ryd/", "platform": "", "project_url": "https://pypi.org/project/ryd/", "project_urls": {"Homepage": "https://sourceforge.net/p/ryd/code/ci/default/tree"}, "release_url": "https://pypi.org/project/ryd/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "Ruamel Yaml Doc preprocessor", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"https://sourceforge.net/p/ryd/code/ci/default/tree/_doc/_static/license.svg?format=raw\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d3dad6e0e237971da204d85389e3c70d61f0177/68747470733a2f2f736f75726365666f7267652e6e65742f702f7279642f636f64652f63692f64656661756c742f747265652f5f646f632f5f7374617469632f6c6963656e73652e7376673f666f726d61743d726177\"></a>\n<a href=\"https://pypi.org/project/ryd/\" rel=\"nofollow\"><img alt=\"https://sourceforge.net/p/ryd/code/ci/default/tree/_doc/_static/pypi.svg?format=raw\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44192ee6cda533ff6e746119ddb4599bf43ab272/68747470733a2f2f736f75726365666f7267652e6e65742f702f7279642f636f64652f63692f64656661756c742f747265652f5f646f632f5f7374617469632f707970692e7376673f666f726d61743d726177\"></a>\n<a href=\"https://pypi.org/project/oitnb/\" rel=\"nofollow\"><img alt=\"https://sourceforge.net/p/oitnb/code/ci/default/tree/_doc/_static/oitnb.svg?format=raw\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dbea074abb70e3bde6030892db4c2e52bdc3e743/68747470733a2f2f736f75726365666f7267652e6e65742f702f6f69746e622f636f64652f63692f64656661756c742f747265652f5f646f632f5f7374617469632f6f69746e622e7376673f666f726d61743d726177\"></a>\n<a href=\"https://pypi.org/project/ryd/\" rel=\"nofollow\"><img alt=\"https://sourceforge.net/p/ryd/code/ci/default/tree/_doc/_static/ryd.svg?format=raw\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30bd982bd4df88a05ba4fae576f2de1eab716681/68747470733a2f2f736f75726365666f7267652e6e65742f702f7279642f636f64652f63692f64656661756c742f747265652f5f646f632f5f7374617469632f7279642e7376673f666f726d61743d726177\"></a>\n<p><tt>ryd</tt> ( /r\u0251\u026at/, pronounced like the verb \u201cwrite\u201d ) is a preprocessor for text\nbased documents, that builds upon the multi-document capabilities of YAML\nfiles/streams.</p>\n<p>The use of multi-document in <tt>ryd</tt> allows for clear separation between\ndocument text and any programs referenced in those text. Thereby making it\npossible to run (c.q. compile) the program parts of a document, e.g. to check\nwhether they are syntactically correct. It can also capture the <em>actual</em> output\nof those programs to be included in the document.</p>\n<p>This allows for easier maintenance of (correct) program sources, in document\nsource texts like reStructuredText, LaTeX, etc.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>A \u201cnormal\u201d <tt>.ryd</tt> file consists of multiple YAML 1.2 documents in one file.</p>\n<p>The first of these documents has, at the root-level, a mapping. This\nmapping is the <strong>ryd configuration data</strong> for this stream of\ndocuments, and is used to define <tt>ryd</tt> document version used, output\nand other configuration informationis. The first document doesn\u2019t\nnormally have any directives, that the document is YAML 1.2 is\nimplicit, so no <tt>%YAML 1.2</tt> directive is needed and without\ndirective and no preceding document, you should not have a\ndirectives-end marker line (<tt><span class=\"pre\">---</span></tt>)</p>\n<p>The documents following the first document are usually block\nstyle literal scalars with an optional tag. The tag influences how the scalar\nstring is processed within the selected output system:</p>\n<pre>version: 0.1\noutput: rst\nfix_inline_single_backquotes: true\n--- |\nExample Python program\n++++++++++++++++++++++\n\nThis is an example of a python program\n--- !python |\nn = 7\nprint(n**2 - n)\n--- !stdout |\nThe answer is::\n</pre>\n<p>this will generate (using: <tt>ryd convert test.ryd</tt>) the following <tt>test.rst</tt>:</p>\n<pre>Example Python program\n++++++++++++++++++++++\n\nThis is an example of a Python program\n::\n\n  n = 7\n  print(n**2 - n)\n\nThe answer is::\n\n  42\n</pre>\n<p>which can then be converted to PDF using <tt>rst2pdf</tt> or HTML using <tt>rst2html</tt>.</p>\n<div id=\"command-line-options\">\n<h3>Command-line options</h3>\n<p>The command-line of <tt>ryd</tt> consists of multiple components:</p>\n<pre>ryd [--global-option] command [--options] [arguments]\n</pre>\n<p>Although not indicated most global options can occur after the command as well.</p>\n<div id=\"commands\">\n<h4>commands</h4>\n<pre>convert             generate output as per first YAML document\nclean               clean output files for .ryd files\nroundtrip           roundtrip .ryd file, updating sections\nfrom-rst (fromrst)  convert .rst to .ryd\n</pre>\n<p>You\u2019ll most often use <tt>convert</tt> it takes one or more filenames as argument\nand generates output as specified in the ryd configuration data. Some options allow you to override settings there (e.g. <tt><span class=\"pre\">--pdf</span></tt> and <tt><span class=\"pre\">-no-pdf</span></tt>)</p>\n<p>The command <tt><span class=\"pre\">from-rst</span></tt> converts a <tt>.rst</tt> file into <tt>.ryd</tt> doing some section underline checking and adding the ryd configuration data document.</p>\n<p>The <tt>roundtrip</tt> command has an option <tt><span class=\"pre\">--oitnb</span></tt> running in place\ncode-formatting on the <tt><span class=\"pre\">!Python)-pre)</span></tt> sections of the <tt>.ryd</tt> file. You need to\nhave <a href=\"https://pypi.org/project/oitnb/\" rel=\"nofollow\">oitnb</a> in your path for this.</p>\n<p>Doing <tt>ryd command <span class=\"pre\">--help</span></tt> might indicate extra options that have not yet made it into\nthe documentation.</p>\n</div>\n</div>\n<div id=\"documents-and-document-tags\">\n<h3>Documents and document tags</h3>\n<p>Each YAML document is separated from other documents in the stream by the\ndocument start marker <tt><span class=\"pre\">---</span></tt>. Apart from the first document, most documents\ncontain a single, multi-line, non-indented, scalar. The document start marker is\ntherefor followed by the pipe (<tt>|</tt>) symbol, which is the YAML indication for a\nmulti-line scalar.</p>\n<p>That scalar can be \u201ctyped\u201d in the normal way of YAML by inserting a\ntag before the <tt>|</tt>. E.g. a document that is a type of Python program\nhas a tag <tt>!python</tt>.</p>\n<p>What a document tag exactly does, depends on the tag, but, potentially, also, on\nthe output file format selected, on previously processed tagged documents, other\n<tt>.ryd</tt> files processed previously and the environment.\nThe following are short descriptions for all tags, independent of the selected\noutput format:</p>\n<dl>\n<dt>!code</dt>\n<dd>Include program in text. Do not mark as executable, doesn\u2019t influence    <tt>!stdout</tt>.</dd>\n<dt>!comment</dt>\n<dd>The whole document will be discarded, i.e. not included in the output.</dd>\n<dt>!inc</dt>\n<dd>Include the content of the listed files (indented), without other processing,     into the output. Preceed with <tt>::</tt> if necessary.</dd>\n<dt>!incraw</dt>\n<dd>Include the listed files raw (i.e. without processing, or indenting) into the output.</dd>\n<dt>!last-compile</dt>\n<dd>Include output from last compilation as code.</dd>\n<dt>!nim</dt>\n<dd>Include Nim program in text. Prefix and mark as executable.</dd>\n<dt>!nim-pre</dt>\n<dd>Prefix all following <tt>!nim</tt> documents with this document (e.g. used for imports)</dd>\n<dt>!python</dt>\n<dd>Include Python program in text. Prefix and mark as executable.</dd>\n<dt>!python-hidden</dt>\n<dd>Do  not include Python program in text. Prefix and mark as executable.</dd>\n<dt>!python-pre</dt>\n<dd>Prefix all following <tt>!python</tt> documents with this document (e.g. used for imports)</dd>\n<dt>!stdout</dt>\n<dd>Include output from last executable document (e.g. <tt>!python</tt>) as code.</dd>\n<dt>!stdout-raw</dt>\n<dd>Include output from the last program, as source for the output format.</dd>\n<dt>!unpy</dt>\n<dd>Include Nim program in text. Do not mark as executable. Set output to result of unpy.</dd>\n</dl>\n</div>\n</div>\n<div id=\"rst\">\n<h2>RST</h2>\n<p>The output to <tt>.rst</tt> expects non-code YAML documents to be valid\nreStructuredText. Any non-tagged documents, i.e. those starting with:</p>\n<pre>--- |\n</pre>\n<p>are assumed to be text input.</p>\n<div id=\"section-underlining\">\n<h3>Section underlining</h3>\n<p>Because of the special meaning of <tt><span class=\"pre\">---</span></tt> (and <tt>...</tt>) at the beginning of a line,\nfollowed by newline or space, the section under/over-line characters used in\n<tt>.ryd</tt> files that are source for <tt>.rst</tt> should not use <tt>-</tt> or <tt>.</tt>\nsequences if a any of those section names consist of three letters (e.g. a section\nnamed API or RST). It is recommended to use the following scheme:</p>\n<pre>Sections, subsections, etc. in .ryd files\n # with over-line, for parts\n * with over-line, for chapters\n =, for sections\n +, for subsections\n ^, for sub-subsections\n \", for paragraphs\n</pre>\n</div>\n<div id=\"single-backquotes\">\n<h3>Single backquotes</h3>\n<p>The <tt>fix_inline_single_backquotes: true</tt> tells <tt>ryd</tt> to indicate lines that have\nsingle backquotes, that need fixing (by replacing them with double backquotes):</p>\n<pre>README.ryd\n47: this will generate (`ryd convert test.ryd`) the following\n                      --^\n                                           --^\n</pre>\n<p>(If you are used to other inline code markup editing e.g. on Stack Overflow, that uses single\nbackquotes, you\u2019ll come to appreciate this.)</p>\n</div>\n<div id=\"python\">\n<h3>Python</h3>\n<p>Python code is indicated by:</p>\n<pre>--- !python |\n</pre>\n<p>The document is inserted into the <tt>.rst</tt> with a two space indent. If\nthe previous block does not end in <tt>::</tt> this double colon, and a\nnewline, are explicitly inserted before the program. The difference\nbeing that a text block ending in <tt>::</tt> will have a single <tt>:</tt> rendered, a\n<tt>::</tt> on a line of its own will not. An empty line between the\npreceding text and the code is inserted when needed.</p>\n<p>If your program relies on specific packages, those packages, need to\nbe available in the environment in which <tt>ryd</tt> is started (which can e.g. be a\nspecifically set up <tt>virtualenv</tt>)</p>\n<p>It is possible to have \u201cpartial programs\u201d by preceding a python document with\ne.g.:</p>\n<pre>--- !python-pre |\nfrom __future__ import print_function\nimport sys\nimport ruamel.yaml\nfrom ruamel.std.pathlib import Path, pushd, popd, PathLibConversionHelper\npl = PathLibConversionHelper()\n</pre>\n<p>Such a block is pre-pended to all following <tt><span class=\"pre\">---</span> !python |</tt> documents (until\nsuperseded by another <tt><span class=\"pre\">---</span> <span class=\"pre\">!python-pre</span> |</tt> block)</p>\n</div>\n<div id=\"captured-output\">\n<h3>Captured output</h3>\n<p>The output from the last program that was run (<tt><span class=\"pre\">---</span> !python |</tt>) is stored and\ncan be post-pended to a reStructuredText document by tagging it with <tt>!stdout</tt>\n(i.e. <tt><span class=\"pre\">---</span> !stdout |</tt>)</p>\n</div>\n<div id=\"non-running-code\">\n<h3>non-running code</h3>\n<p>A document tagged <tt>!code</tt> will be represented as one tagged <tt>!python</tt>, but\nthe code will not be run (and hence the output used for <tt>!stdout</tt> not changed).</p>\n</div>\n<div id=\"nim\">\n<h3>Nim</h3>\n<p>Nim code is indicated by:</p>\n<pre>--- !nim |\n</pre>\n<p>The document is inserted as with Python, there can be a <tt><span class=\"pre\">!nim-pre</span></tt> document,\nand output is captured and displayed with <tt><span class=\"pre\">---</span> !stdout |</tt>):</p>\n<pre>let a = 123\nlet x = 0b0010_1010\necho(fmt\"The answer to the question: {x}\")\n</pre>\n<p>which outputs:</p>\n<pre>The answer to the question: 42\n</pre>\n<p>Make sure you append <tt>::</tt> at the end of your text, this is currently not\nautomatically inserted.</p>\n<p>The compilation is done with options <tt><span class=\"pre\">--verbosity:0</span> <span class=\"pre\">--hint[Processing]:off</span></tt> .</p>\n<div id=\"compiler-output\">\n<h4>compiler output</h4>\n<p>If you are interested in the textual output of the compiler you can use\n<tt><span class=\"pre\">---</span> <span class=\"pre\">!last-compile</span> |</tt></p>\n<p>For which the text should also end with <tt>::</tt></p>\n<pre>/tmp/ryd-of-anthon/ryd-128/tmp_1.nim(4, 5) Hint: 'a' is declared but not used [XDeclaredButNotUsed]\n</pre>\n</div>\n</div>\n</div>\n<div id=\"comments\">\n<h2>Comments</h2>\n<p>Block style literal scalars do not allow YAML comments. To insert comments in a\ntext, either use the format acceptable by the output, e.g. when generating <tt>.rst</tt> use:</p>\n<pre>..\n   this will show up in the resulting .rst file, but will\n   not render\n</pre>\n<p>Alternatively you can create a comment YAML document (<tt><span class=\"pre\">---</span> !comment |</tt>), for\nwhich the text will not be represented in the output file format <strong>at all</strong>.</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<p><tt>ryd</tt> grew out of a in-house solution where sections of reStructuredText files were\nupdated, in-place, by running Python programs specified in separate files. Also\nallowing the inclusion of the (error) output.</p>\n<p>An example of this can be seen in <a href=\"https://bitbucket.org/ruamel/yaml/raw/0be7d3cb8449b15d9ac9b097322f09e52b92f868/_doc/example.rst\" rel=\"nofollow\">this</a>\nold version of the <tt>example.rst</tt> file of the <tt>ruamel.yaml</tt> package:</p>\n<pre>Basic round trip of parsing YAML to Python objects, modifying\nand generating YAML::\n\n  import sys\n  from ruamel.yaml import YAML\n\n  inp = \"\"\"\\\n  # example\n  name:\n    # details\n    family: Smith   # very common\n    given: Alice    # one of the siblings\n  \"\"\"\n\n  yaml = YAML()\n  code = yaml.load(inp)\n  code['name']['given'] = 'Bob'\n\n  yaml.dump(code, sys.stdout)\n\n.. example code small.py\n\nResulting in ::\n\n  # example\n  name:\n    # details\n    family: Smith   # very common\n    given: Bob      # one of the siblings\n\n\n.. example output small.py\n</pre>\n<p>The program was inserted before the <tt>.. example code</tt> line and its output before\n<tt>.. example output</tt>, replacing all the text starting after the previous <tt>::</tt></p>\n<p>The <tt>small.py</tt> referenced a separate file for this piece of code.\nThis resulted in multiple source files that were associated with a single\n<tt>.rst</tt> file. There was no mechanism to have partial programs that could be\ntested by execution, which precluded getting output from such program as well.</p>\n<p>Although the code could have been edited in place, and used to get the\noutput, this would force one to use the extra indentation required for\nlines following reST\u2019s <tt>::</tt>.</p>\n<p>Once this system came under review, the solution with a structured YAML header, as used\nwith various file formats, combined with multiple document consisting of\n(tagged) top level, non-indented, block style literal scalars, was chosen instead.</p>\n</div>\n\n          </div>"}, "last_serial": 6871710, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "14dc9ebd275030e7e2e5db4763a20cda", "sha256": "1a06f67aec7d642f95534b9f2891be300042bde747a0ea5c3acb96dfa63db69e"}, "downloads": -1, "filename": "ryd-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "14dc9ebd275030e7e2e5db4763a20cda", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12313, "upload_time": "2017-07-17T21:28:54", "upload_time_iso_8601": "2017-07-17T21:28:54.741167Z", "url": "https://files.pythonhosted.org/packages/c5/d4/1f332ab493de33209e2435063e68e1bee4d9f0c418a8421faa7b0fb7698c/ryd-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "993334fed605fc3b3aa674ed89bb8278", "sha256": "8a81c5cfe3d17e31dbcc9350e694cbaefcabcee9852161f4ae265a2110fd0a2d"}, "downloads": -1, "filename": "ryd-0.2.0.tar.gz", "has_sig": false, "md5_digest": "993334fed605fc3b3aa674ed89bb8278", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19819, "upload_time": "2017-07-17T21:28:56", "upload_time_iso_8601": "2017-07-17T21:28:56.729648Z", "url": "https://files.pythonhosted.org/packages/5b/69/06c0f07a117261806592b17991e111b08aff083b7eb3ae50dec07febd473/ryd-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c7646f1179302549b7698305e6919ba1", "sha256": "eb496f408c12f7f7b4842b3b1c84fecc95940673dab53c0f310b63aa88f8f113"}, "downloads": -1, "filename": "ryd-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c7646f1179302549b7698305e6919ba1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12333, "upload_time": "2017-07-18T07:13:07", "upload_time_iso_8601": "2017-07-18T07:13:07.700010Z", "url": "https://files.pythonhosted.org/packages/3b/61/c9a7886ef0aa8e681ad1681a4826e3d2b6261fc64963e26459182ffff4d2/ryd-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03782d99847dbdab0b7abe407516110b", "sha256": "f12adb24ddb9d2c9ce9856060bafca231588d024cf29320497ab1de6493c8e4d"}, "downloads": -1, "filename": "ryd-0.2.1.tar.gz", "has_sig": false, "md5_digest": "03782d99847dbdab0b7abe407516110b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19815, "upload_time": "2017-07-18T07:13:09", "upload_time_iso_8601": "2017-07-18T07:13:09.220350Z", "url": "https://files.pythonhosted.org/packages/ff/ad/4af263856b4de29ba80b83270fd2386ac9259c326434bf7dd62b35f4a9d2/ryd-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "2c88b25e894743716fb65f637ce71dd0", "sha256": "2c3cb7687a7247205005e027d44de9df21c80b368ceaada3532f06efd2e25a12"}, "downloads": -1, "filename": "ryd-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2c88b25e894743716fb65f637ce71dd0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12422, "upload_time": "2017-07-18T08:03:06", "upload_time_iso_8601": "2017-07-18T08:03:06.736402Z", "url": "https://files.pythonhosted.org/packages/38/6a/36a38e95811b9bf25d5b83a63da7bfbbe8896025ab06b5ab548418a6e215/ryd-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15eeb7f620abcf0840786e839c283955", "sha256": "42d83bc240cc3d370cc0f185b09ce9c44fcae56816cd8f8f41982513ed9d5379"}, "downloads": -1, "filename": "ryd-0.2.2.tar.gz", "has_sig": false, "md5_digest": "15eeb7f620abcf0840786e839c283955", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19911, "upload_time": "2017-07-18T08:03:08", "upload_time_iso_8601": "2017-07-18T08:03:08.393590Z", "url": "https://files.pythonhosted.org/packages/57/87/8ce7626093e76edcd4476e9f363d46d820c97f40373c43d368af83882d45/ryd-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "75214d9edea84990a7ba8aeb3ed473c4", "sha256": "ca8e1b8f081f114ff95594e881c63281925bd4eeb900ba3bbed3c22b52e9cc0e"}, "downloads": -1, "filename": "ryd-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "75214d9edea84990a7ba8aeb3ed473c4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12427, "upload_time": "2017-07-18T08:08:44", "upload_time_iso_8601": "2017-07-18T08:08:44.312369Z", "url": "https://files.pythonhosted.org/packages/85/69/fcfdec37627dbf7db057ab7edac1f7fc8a88b16058478cfb770cced9d35f/ryd-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "643d4a6928bd3251e8abcfe41fe073de", "sha256": "6f29dff976d4fe479b645fe5a615bad4e3f78c7d5163d4c76932ecd613a44344"}, "downloads": -1, "filename": "ryd-0.2.3.tar.gz", "has_sig": false, "md5_digest": "643d4a6928bd3251e8abcfe41fe073de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19912, "upload_time": "2017-07-18T08:08:49", "upload_time_iso_8601": "2017-07-18T08:08:49.060099Z", "url": "https://files.pythonhosted.org/packages/7d/9c/117a2ba63a44e083006aaeadd54d9f06cad480e2dcd2351a1bba3ec0a9c3/ryd-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "69fd4970f58d30f724259622ff354fec", "sha256": "014726f2941fe3011cc27297d56c6077c4537e38ae5b76b658183f8a91871124"}, "downloads": -1, "filename": "ryd-0.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "69fd4970f58d30f724259622ff354fec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12705, "upload_time": "2017-07-18T08:45:04", "upload_time_iso_8601": "2017-07-18T08:45:04.027189Z", "url": "https://files.pythonhosted.org/packages/6b/07/bf8795cd9ed8ea31b14b1a2f4fccf63449a7ad338a8a0e30b0c6077afbd2/ryd-0.2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c084e1031ca454852a694b4186225a29", "sha256": "4a4f87ac7f8697c171a4e5953bc683b9249db9dea635672dc8a16ebf448b467a"}, "downloads": -1, "filename": "ryd-0.2.4.tar.gz", "has_sig": false, "md5_digest": "c084e1031ca454852a694b4186225a29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20161, "upload_time": "2017-07-18T08:45:05", "upload_time_iso_8601": "2017-07-18T08:45:05.990180Z", "url": "https://files.pythonhosted.org/packages/5f/b0/640ceb95d58e8b385dcbe93292714bb7f8cff1284daae65fb667f87c13c1/ryd-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "5339d684dd6fe2e41f822a7628c3135a", "sha256": "02f8584a59a68f24a2fa58f6f45da69e2f72b9355cbf48a738621b6f86f0d2c4"}, "downloads": -1, "filename": "ryd-0.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5339d684dd6fe2e41f822a7628c3135a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13178, "upload_time": "2017-07-28T08:02:01", "upload_time_iso_8601": "2017-07-28T08:02:01.228252Z", "url": "https://files.pythonhosted.org/packages/63/ec/982b6ae73d38fa5d4047d984f0186a8488fe8f3d564bc6afb0648310eae8/ryd-0.2.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1631a52288974534fd9a87b0b77aec9", "sha256": "4be46c20edf6b5af3bb0a4c39c46277d3a6b8cad76a215146e448e9860ac46b2"}, "downloads": -1, "filename": "ryd-0.2.5.tar.gz", "has_sig": false, "md5_digest": "e1631a52288974534fd9a87b0b77aec9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20551, "upload_time": "2017-07-28T08:02:03", "upload_time_iso_8601": "2017-07-28T08:02:03.081154Z", "url": "https://files.pythonhosted.org/packages/59/90/8f9d2de8d720e0673fe6aa68cbea727afcc221af3ab7df713435b6f10a8c/ryd-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "64c1ea7873a5a42eedbb6e4d1bfd76e9", "sha256": "64c6ffe8aface72b58df58b84d6e137d944d01abb6b9b8ab1217d6668ef8d4fe"}, "downloads": -1, "filename": "ryd-0.2.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "64c1ea7873a5a42eedbb6e4d1bfd76e9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15982, "upload_time": "2018-07-19T12:05:59", "upload_time_iso_8601": "2018-07-19T12:05:59.448417Z", "url": "https://files.pythonhosted.org/packages/70/3d/62edc699a6cbe7f0c89699f40e537b9ff605e6caa8dbc931b847115a4aa3/ryd-0.2.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d4ba467e7004945af189e4cd8b62b0c", "sha256": "e08872bb6635cbb3ab1bd2d303fc20e36e3b719add6ca5d88d6568a2233b80f6"}, "downloads": -1, "filename": "ryd-0.2.6.tar.gz", "has_sig": false, "md5_digest": "1d4ba467e7004945af189e4cd8b62b0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23556, "upload_time": "2018-07-19T12:04:34", "upload_time_iso_8601": "2018-07-19T12:04:34.946330Z", "url": "https://files.pythonhosted.org/packages/d0/4c/6cac9674e081bf9e675ceb2689d0010c6b4bd96b6374a1fa32b7927fd5e8/ryd-0.2.6.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3db015d8fa711dd02e6108a455f6bf34", "sha256": "de34fc5eecb5b5fb157a91edf0286f29c012973f292b7c16de711d59961b7a2e"}, "downloads": -1, "filename": "ryd-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3db015d8fa711dd02e6108a455f6bf34", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19620, "upload_time": "2018-08-05T11:30:55", "upload_time_iso_8601": "2018-08-05T11:30:55.481221Z", "url": "https://files.pythonhosted.org/packages/f2/42/3b5b21cb9ead9a239cf28c17f7a16cc5743dfa8e3386e9a7f9113b0da5f9/ryd-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "959f2a03c1c42b2216ac002cb2cad6e8", "sha256": "074538238593a8dede1394e8974d6843732774db802275dd12127ddd6c078c67"}, "downloads": -1, "filename": "ryd-0.3.0.tar.gz", "has_sig": false, "md5_digest": "959f2a03c1c42b2216ac002cb2cad6e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27703, "upload_time": "2018-08-05T11:30:53", "upload_time_iso_8601": "2018-08-05T11:30:53.402053Z", "url": "https://files.pythonhosted.org/packages/e4/37/6ba649d9d7fbd77cac3607db67d25bbe7391794ff768de98d18634186510/ryd-0.3.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "ef7427eb74c8e0cb3f374f1d20fa5cda", "sha256": "1d3367b222e78ad8add66d20ab716338d328856f0949d441f598d3a62dc63652"}, "downloads": -1, "filename": "ryd-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ef7427eb74c8e0cb3f374f1d20fa5cda", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18203, "upload_time": "2020-03-24T09:05:28", "upload_time_iso_8601": "2020-03-24T09:05:28.859691Z", "url": "https://files.pythonhosted.org/packages/25/74/eef310cc0d5667831c41214c57cf8d6fda3d780a4d2a9cbd3f249f837dbd/ryd-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63f9a847e269ca5387f9e3002a1f800a", "sha256": "baa115379f25054f6bb5e3d3a1a77b60bc7b3a42e5048d130342760e108bca87"}, "downloads": -1, "filename": "ryd-0.4.1.tar.gz", "has_sig": false, "md5_digest": "63f9a847e269ca5387f9e3002a1f800a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28243, "upload_time": "2020-03-24T09:05:26", "upload_time_iso_8601": "2020-03-24T09:05:26.692841Z", "url": "https://files.pythonhosted.org/packages/f5/64/53774c56a3b0e0492531c7eabdaf1ee085c0a64c406aefa0024713b9dda6/ryd-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef7427eb74c8e0cb3f374f1d20fa5cda", "sha256": "1d3367b222e78ad8add66d20ab716338d328856f0949d441f598d3a62dc63652"}, "downloads": -1, "filename": "ryd-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ef7427eb74c8e0cb3f374f1d20fa5cda", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18203, "upload_time": "2020-03-24T09:05:28", "upload_time_iso_8601": "2020-03-24T09:05:28.859691Z", "url": "https://files.pythonhosted.org/packages/25/74/eef310cc0d5667831c41214c57cf8d6fda3d780a4d2a9cbd3f249f837dbd/ryd-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63f9a847e269ca5387f9e3002a1f800a", "sha256": "baa115379f25054f6bb5e3d3a1a77b60bc7b3a42e5048d130342760e108bca87"}, "downloads": -1, "filename": "ryd-0.4.1.tar.gz", "has_sig": false, "md5_digest": "63f9a847e269ca5387f9e3002a1f800a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28243, "upload_time": "2020-03-24T09:05:26", "upload_time_iso_8601": "2020-03-24T09:05:26.692841Z", "url": "https://files.pythonhosted.org/packages/f5/64/53774c56a3b0e0492531c7eabdaf1ee085c0a64c406aefa0024713b9dda6/ryd-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:45 2020"}