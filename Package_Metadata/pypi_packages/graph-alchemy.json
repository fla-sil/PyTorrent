{"info": {"author": "Jeffrey Tratner", "author_email": "jeffrey.tratner@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Database :: Front-Ends", "Topic :: Scientific/Engineering :: Information Analysis"], "description": "============\nGraphAlchemy\n============\n\n.. contents::\n    :depth: 2\n\nGraph node-edge relationships in SQLAlchemy_ (and soon more orms) + networkx_\nintegration.\n\nThe Goal\n========\n\nSet up a generalized abstraction/interface for a graph that can be used across\nvarious platforms and within various frameworks that is easy and simple to use,\nextensible, and that easily hooks into other graphing tools (like gephi_\nnetworkx_, etc.)\n\nWhat's here\n===========\n\nA basic set of node/edge abstractions + many-to-one relationships for a graph\nrepresented in SQL with SQLAlchemy_\n\nUsing this package\n==================\n\nDocumentation_ is available at http://graphalchemy.readthedocs.org\n\nIt's very simple to use (and examples are to come). But for now the best thing to do is\nto go read the docs on SQLAlchemy_\n\nA very minimal example (using an SQLite database)::\n\n    from graphalchemy.sqlmodels import create_base_classes, sqlite_connect\n    from sqlalchemy.ext.declarative import declarative_base\n\n    Base = declarative_base()\n    Node, Edge = create_base_classes(NodeClass=\"Node\", EdgeClass=\"Edge\", Base=Base)\n    engine, session = sqlite_connect(\"database.db\", metadata=Base.metadata)\n\n    # be sure to use unicode!!\n    node1 = Node(label=u\"First node!\")\n    node2 = Node(label=u\"Second node!\")\n    node3 = Node(label=u\"Third node!\")\n    edge1 = Edge.connect_nodes(node1, node2)\n    edge2 = Edge.connect_nodes(node1, node3)\n\n    session.add_all([node1, node2, node3, edge1, edge2])\n    session.commit()\n\n\n    # now we can graph it\n\n    import networkx as nx\n    G = nx.Graph()\n    G.add_edges_from([edge1, edge2])\n\n    # now we can draw this! (if you had pylab, matplotlib, etc)\n\nAnd you'd get a picture that looked something like this (clearly, we haven't added all the traits\nand such in, but you get the idea):\n\n.. image:: https://github.com/jtratner/graphalchemy/raw/master/docs/images/readme-example.png\n\nNow, obviously this is a pretty minimal example, but it shows how you can take advantage\nof the power of SQL joins, queries, etc, but also very easily \n\nWhat's going to be here\n=======================\n\n1. networkx_ integration\n2. testing for multiple sql databases and adapters\n3. abstractions for Google App Engine, mongoalchemy_, and possibly Django ORM\n4. adapter between networkx_ and web service requests (maybe?)\n\nTesting coverage\n================\n\nBasic test suite that gets 100% line coverage for SQLAlchemy models and base\nmodels (still missing a test for Flask-SQLAlchemy). I've only run it on SQLite\nso far, but presumably it should work with other SQL databases just fine (since\nit uses SQLAlchemy's `declarative base`_)\n\n.. _sqlalchemy : http://www.sqlalchemy.org/\n.. _networkx : http://networkx.lanl.gov/\n.. _mongoalchemy : http://www.mongoalchemy.org/\n.. _gephi : http://gephi.org/\n.. _declarative base : http://docs.sqlalchemy.org/en/rel_0_7/orm/extensions/declarative.html\n.. _documentation : http://graphalchemy.readthedocs.org", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "graph-alchemy", "package_url": "https://pypi.org/project/graph-alchemy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/graph-alchemy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/graph-alchemy/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Basic Node/Edge model for SQLAlchemy", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#the-goal\" id=\"id1\" rel=\"nofollow\">The Goal</a></li>\n<li><a href=\"#what-s-here\" id=\"id2\" rel=\"nofollow\">What\u2019s here</a></li>\n<li><a href=\"#using-this-package\" id=\"id3\" rel=\"nofollow\">Using this package</a></li>\n<li><a href=\"#what-s-going-to-be-here\" id=\"id4\" rel=\"nofollow\">What\u2019s going to be here</a></li>\n<li><a href=\"#testing-coverage\" id=\"id5\" rel=\"nofollow\">Testing coverage</a></li>\n</ul>\n</div>\n<p>Graph node-edge relationships in <a href=\"http://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy</a> (and soon more orms) + <a href=\"http://networkx.lanl.gov/\" rel=\"nofollow\">networkx</a>\nintegration.</p>\n<div id=\"the-goal\">\n<h2><a href=\"#id1\" rel=\"nofollow\">The Goal</a></h2>\n<p>Set up a generalized abstraction/interface for a graph that can be used across\nvarious platforms and within various frameworks that is easy and simple to use,\nextensible, and that easily hooks into other graphing tools (like <a href=\"http://gephi.org/\" rel=\"nofollow\">gephi</a>\n<a href=\"http://networkx.lanl.gov/\" rel=\"nofollow\">networkx</a>, etc.)</p>\n</div>\n<div id=\"what-s-here\">\n<h2><a href=\"#id2\" rel=\"nofollow\">What\u2019s here</a></h2>\n<p>A basic set of node/edge abstractions + many-to-one relationships for a graph\nrepresented in SQL with <a href=\"http://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy</a></p>\n</div>\n<div id=\"using-this-package\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Using this package</a></h2>\n<p><a href=\"http://graphalchemy.readthedocs.org\" rel=\"nofollow\">Documentation</a> is available at <a href=\"http://graphalchemy.readthedocs.org\" rel=\"nofollow\">http://graphalchemy.readthedocs.org</a></p>\n<p>It\u2019s very simple to use (and examples are to come). But for now the best thing to do is\nto go read the docs on <a href=\"http://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy</a></p>\n<p>A very minimal example (using an SQLite database):</p>\n<pre>from graphalchemy.sqlmodels import create_base_classes, sqlite_connect\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nNode, Edge = create_base_classes(NodeClass=\"Node\", EdgeClass=\"Edge\", Base=Base)\nengine, session = sqlite_connect(\"database.db\", metadata=Base.metadata)\n\n# be sure to use unicode!!\nnode1 = Node(label=u\"First node!\")\nnode2 = Node(label=u\"Second node!\")\nnode3 = Node(label=u\"Third node!\")\nedge1 = Edge.connect_nodes(node1, node2)\nedge2 = Edge.connect_nodes(node1, node3)\n\nsession.add_all([node1, node2, node3, edge1, edge2])\nsession.commit()\n\n\n# now we can graph it\n\nimport networkx as nx\nG = nx.Graph()\nG.add_edges_from([edge1, edge2])\n\n# now we can draw this! (if you had pylab, matplotlib, etc)\n</pre>\n<p>And you\u2019d get a picture that looked something like this (clearly, we haven\u2019t added all the traits\nand such in, but you get the idea):</p>\n<img alt=\"https://github.com/jtratner/graphalchemy/raw/master/docs/images/readme-example.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97720634364da964571470c6f0bd2b9ee725f99b/68747470733a2f2f6769746875622e636f6d2f6a747261746e65722f6772617068616c6368656d792f7261772f6d61737465722f646f63732f696d616765732f726561646d652d6578616d706c652e706e67\">\n<p>Now, obviously this is a pretty minimal example, but it shows how you can take advantage\nof the power of SQL joins, queries, etc, but also very easily</p>\n</div>\n<div id=\"what-s-going-to-be-here\">\n<h2><a href=\"#id4\" rel=\"nofollow\">What\u2019s going to be here</a></h2>\n<ol>\n<li><a href=\"http://networkx.lanl.gov/\" rel=\"nofollow\">networkx</a> integration</li>\n<li>testing for multiple sql databases and adapters</li>\n<li>abstractions for Google App Engine, <a href=\"http://www.mongoalchemy.org/\" rel=\"nofollow\">mongoalchemy</a>, and possibly Django ORM</li>\n<li>adapter between <a href=\"http://networkx.lanl.gov/\" rel=\"nofollow\">networkx</a> and web service requests (maybe?)</li>\n</ol>\n</div>\n<div id=\"testing-coverage\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Testing coverage</a></h2>\n<p>Basic test suite that gets 100% line coverage for SQLAlchemy models and base\nmodels (still missing a test for Flask-SQLAlchemy). I\u2019ve only run it on SQLite\nso far, but presumably it should work with other SQL databases just fine (since\nit uses SQLAlchemy\u2019s <a href=\"http://docs.sqlalchemy.org/en/rel_0_7/orm/extensions/declarative.html\" rel=\"nofollow\">declarative base</a>)</p>\n</div>\n\n          </div>"}, "last_serial": 792664, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "057c3f7ce49c9304277aec935e5338bc", "sha256": "54481aa54345c74fe926519a6bb93ab4c0c2f1ae6f2514e4ba637c594c3d2d46"}, "downloads": -1, "filename": "graph-alchemy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "057c3f7ce49c9304277aec935e5338bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12170, "upload_time": "2012-08-08T09:46:03", "upload_time_iso_8601": "2012-08-08T09:46:03.232295Z", "url": "https://files.pythonhosted.org/packages/ec/0f/b82e94205882daa67d9fd3d847e0bd876ed1c4b50a2e9300065272256967/graph-alchemy-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "057c3f7ce49c9304277aec935e5338bc", "sha256": "54481aa54345c74fe926519a6bb93ab4c0c2f1ae6f2514e4ba637c594c3d2d46"}, "downloads": -1, "filename": "graph-alchemy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "057c3f7ce49c9304277aec935e5338bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12170, "upload_time": "2012-08-08T09:46:03", "upload_time_iso_8601": "2012-08-08T09:46:03.232295Z", "url": "https://files.pythonhosted.org/packages/ec/0f/b82e94205882daa67d9fd3d847e0bd876ed1c4b50a2e9300065272256967/graph-alchemy-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:48 2020"}