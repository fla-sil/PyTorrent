{"info": {"author": "Jason Neal", "author_email": "jason.neal@astro.up.pt", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: Microsoft :: Windows", "Operating System :: Unix", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Astronomy", "Topic :: Scientific/Engineering :: Physics"], "description": "# ENIRIC - Extended Near InfraRed Information Content\n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/24d3d525a79d4ae493de8c527540edef)](https://www.codacy.com/app/jason-neal/eniric?utm_source=github.com&utm_medium=referral&utm_content=jason-neal/eniric&utm_campaign=badger)[![Codacy Badge](https://api.codacy.com/project/badge/Coverage/24d3d525a79d4ae493de8c527540edef)](https://www.codacy.com/app/jason-neal/eniric?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=jason-neal/eniric&amp;utm_campaign=Badge_Coverage)\n[![Build Status](https://travis-ci.org/jason-neal/eniric.svg?branch=master)](https://travis-ci.org/jason-neal/eniric)[![Coverage Status](https://coveralls.io/repos/github/jason-neal/eniric/badge.svg?branch=master)](https://coveralls.io/github/jason-neal/eniric?branch=master)[![Updates](https://pyup.io/repos/github/jason-neal/eniric/shield.svg)](https://pyup.io/repos/github/jason-neal/eniric/)[![Code Climate](https://codeclimate.com/github/jason-neal/eniric/badges/gpa.svg)](https://codeclimate.com/github/jason-neal/eniric)[![Issue Count](https://codeclimate.com/github/jason-neal/eniric/badges/issue_count.svg)](https://codeclimate.com/github/jason-neal/eniric)[![Test Coverage](https://codeclimate.com/github/jason-neal/eniric/badges/coverage.svg)](https://codeclimate.com/github/jason-neal/eniric/coverage)[![Python 3](https://pyup.io/repos/github/jason-neal/eniric/python-3-shield.svg)](https://pyup.io/repos/github/jason-neal/eniric/)\n\nEniric is a Python 3 software written to access the Radial Velocity precision of Near-InfraRed (NIR) Spectra. \nEnsiric is built apon the code initilly used in [Figueria et al. 2016]() to analysis the precision of M-dwarf stars, extending the ability to use any synethic spectra from the PHOENIX-ACES library and making it easier to use.\n\n## Features:\n- Spectral broadening\n   Allows for Rotational and Insturmental broading of synthic spectra given rotation speed `vsini` and resolution `R`.\n- Atmospheric transmission\n Analysis RV precision atainable under 3 conditions presented in [Figueria et al. 2016]().\n    - No treatment of atmospheric transmission\n    - Masking all regions affected by atmospheric absoption of a given % over the course of the year.\n    - Assuming perfect telluric corretion in which the variance of the measured flux is impacted.\n- Relative RV precision \n   The RV presicion are present relative to a specified SNR per pixel in the center of a photometric band. The default as usesd in the Figueira et al. 2016 is a SNR of 100 at the center of the J-band.\n- Resampling\n   Allows for resampling of spectra to n pixels per FWHM. Default=3.\n- Band selection\n  Analysis the RV precision attainable by the individual photometric bands `Z`, `Y`, `J`, `H`, `K` in the NIR.   \n- Incremental quality/precision\n    As well as the photometric band precision you can determine the incremental spectral quality or RV precision on narrow wavelenght slices across the entire spectrum, similar to that present in Figure 1 of [Artigau et al. 2018](http://adsabs.harvard.edu/abs/2018AJ....155..198A).\n\n# Usage\nYou can now calculate the theoretical RV precision for any PHOENIX-ACES model.\nYou will need to configure the path to the phoenix models in \u00b4config.yaml\u00b4\n\ne.g.\n\n    aces_precision.py -t 3900 -l 4.5, -m 0.5 -r 100000 -v 1.0 -b J K\n\nWill calculate the RV precision in the J- and K-band of the PHOENIX-ACES spectra with parameters \\[Teff=3900K, logg=4.5, \\[Fe/H\\]=0.5\\] observed at a resolution of 100,000 and rotating with 1.0 km/s.  \nFor more details on the command line arguments to use see the wiki or type\n\n    aces_precision.py -h \n\n\n## Outline\n\nThe code works in two main stages, \"spectral preparation\" and \"precision calculation\".\n\n#### Spectrum preparation\n\n`eniric/nIRanalysis.py`\n\nThis stage takes in the raw PHOENIX-ACES spectral models and transforms them, saving the results of this computation as .txt files.\n\nIt includes:\n- Conversion from flux to photon counts.\n- Resolution convolution\n- Re-sampling\n\nSome scripts are given in `eniric_scripts` to run this preparation over all desired parameters automatically. You will have to modify the paths to things.\n\n\n#### Precision Calculations\n\n`python eniric_scripts/nIR_precision.py`\n\nThis takes in the processed spectra and performs the precision calculations for all 3 conditions outlined in the original paper.\n- Cond1. Total information\n- Cond2. +/-30km/s telluric line > 2% masking\n- Cond3. Perfect telluric correction with variance correction\n\nIt also *scales the flux level* to a desired SNR level in a desired band, see below, as this affects the RV precision calculated. By default this is a SNR of 100 in the J band.\n\n\n## Band SNR Scaling.\nBy default, in accordance with the initial paper, each spectra band is normalized to 100 SNR in the center of the J band.\n\nThis now does this automatically by measuring the SNR in 1 pixel resolution (3 points) in the center of the band. And scales accordingly. This adds a spectral model dependent factor on the RV precision.\nTo get around you can manually specify the SNR level to normalize to and which specific band to normalize to. (it can be itself for instance).\n\n\n\n## Instructions\n\nCreate an empty dir to hold your analysis.\nCreate data dir with re-sampled, results, phoenix_dat\nCopy config.yaml and adjust the paths relative to what you created and to the raw phoenix spectra.\n\neniric_scripts/prepare_spectra.py - This opens the phoenix flux spectra, add wavelength axis in microns and converts flux to photon counts. It saves this in the phoenix_dat dir. (The copy of wavelengths does waste space.)\n\neniric_scripts/nIR_run.py  - Perform the resolution and rotational convolution on the prepared spectra.\n\nThis also does the resampling.\n\ne.g. python ../Codes/eniric/eniric_scripts/nIR_run.py -s M0 M3 M6 M9 -b Y J H K -v 1.0 5.0 10.0 -R 60000 80000 100000 --sample_rate 3\n\n\n## Background\nThe origin of this code was used in [Figueira et al. 2016](https://arxiv.org/abs/1511.07468).\n\n    P. Figueira, V. Zh. Adibekyan, M. Oshagh, J. J. Neal, B. Rojas-Ayala, C. Lovis, C. Melo, F. Pepe, N. C. Santos, M. Tsantaki, 2016,\n    Radial velocity information content of M dwarf spectra in the near-infrared,\n    Astronomy and Astrophysics, 586, A101\n\nIt had a number of efficiency issues with convolution which were improved upo\n\n## Bugs:\nA number of bugs were found when adapting this code. Manily affecting the condition invovling telluric line masking. This alters the RV in this column, sometimes significantly. This, however, does **NOT** alter the conclusions in the published paper. A corrected table will be included in an upcomming publication Neal et. al. 2018 (in prep.).\n\nn. The largest were\n    1) Use numpy mapping slicing instead of comprehension lists.  (~>250 times faster)\n    2) Use Joblib to parallelize the convolutions.\n    3) Caching results to avoid repeating the same convolutions.\n\nIn addressing 1) the convolution speed for a particular test case went from `1hour 22 minutes` down to `27 seconds`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/jason-neal/eniric.git", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jason-neal/eniric.git", "keywords": "Astronomy,Radial velocity,Near-infrared spectroscopy,M-dwarfs", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "eniric", "package_url": "https://pypi.org/project/eniric/", "platform": "", "project_url": "https://pypi.org/project/eniric/", "project_urls": {"Download": "https://github.com/jason-neal/eniric.git", "Homepage": "https://github.com/jason-neal/eniric.git"}, "release_url": "https://pypi.org/project/eniric/0.5.1/", "requires_dist": ["pytest", "check-manifest; extra == 'dev'", "coverage; extra == 'test'", "pytest; extra == 'test'", "pytest-cov; extra == 'test'", "python-coveralls; extra == 'test'", "hypothesis; extra == 'test'"], "requires_python": "", "summary": "Extended NIR Information Content", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ENIRIC - Extended Near InfraRed Information Content</h1>\n<p><a href=\"https://www.codacy.com/app/jason-neal/eniric?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=jason-neal/eniric&amp;utm_campaign=badger\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/94943012f18a8f19546909f73d93920ee247cd7d/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3234643364353235613739643461653439336465386335323735343065646566\"></a><a href=\"https://www.codacy.com/app/jason-neal/eniric?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=jason-neal/eniric&amp;utm_campaign=Badge_Coverage\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11ffaa1f981a9aca5dfd2674d1a09ce651ec8804/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f436f7665726167652f3234643364353235613739643461653439336465386335323735343065646566\"></a>\n<a href=\"https://travis-ci.org/jason-neal/eniric\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a63c7441506ddda594eb77b8eb04daa6af37952/68747470733a2f2f7472617669732d63692e6f72672f6a61736f6e2d6e65616c2f656e697269632e7376673f6272616e63683d6d6173746572\"></a><a href=\"https://coveralls.io/github/jason-neal/eniric?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2d5fc419f7a3dcfeafa7bb2df3fd0bf059fb221/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a61736f6e2d6e65616c2f656e697269632f62616467652e7376673f6272616e63683d6d6173746572\"></a><a href=\"https://pyup.io/repos/github/jason-neal/eniric/\" rel=\"nofollow\"><img alt=\"Updates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df85985e80f2720005aa0db53fea875b2216e4cb/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f6a61736f6e2d6e65616c2f656e697269632f736869656c642e737667\"></a><a href=\"https://codeclimate.com/github/jason-neal/eniric\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a99a2b0f6ee46ce94a04047f0ca3b833a18fa7c/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6a61736f6e2d6e65616c2f656e697269632f6261646765732f6770612e737667\"></a><a href=\"https://codeclimate.com/github/jason-neal/eniric\" rel=\"nofollow\"><img alt=\"Issue Count\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b12b9bc9ad6174ca8db971f845eb4458742dbc51/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6a61736f6e2d6e65616c2f656e697269632f6261646765732f69737375655f636f756e742e737667\"></a><a href=\"https://codeclimate.com/github/jason-neal/eniric/coverage\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d333d1991f48684b1e2f5a918f27ffca81e204cb/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6a61736f6e2d6e65616c2f656e697269632f6261646765732f636f7665726167652e737667\"></a><a href=\"https://pyup.io/repos/github/jason-neal/eniric/\" rel=\"nofollow\"><img alt=\"Python 3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed0206923cdf1ff38609efa03c668217d69f64a0/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f6a61736f6e2d6e65616c2f656e697269632f707974686f6e2d332d736869656c642e737667\"></a></p>\n<p>Eniric is a Python 3 software written to access the Radial Velocity precision of Near-InfraRed (NIR) Spectra.\nEnsiric is built apon the code initilly used in <a href=\"\" rel=\"nofollow\">Figueria et al. 2016</a> to analysis the precision of M-dwarf stars, extending the ability to use any synethic spectra from the PHOENIX-ACES library and making it easier to use.</p>\n<h2>Features:</h2>\n<ul>\n<li>Spectral broadening\nAllows for Rotational and Insturmental broading of synthic spectra given rotation speed <code>vsini</code> and resolution <code>R</code>.</li>\n<li>Atmospheric transmission\nAnalysis RV precision atainable under 3 conditions presented in <a href=\"\" rel=\"nofollow\">Figueria et al. 2016</a>.\n<ul>\n<li>No treatment of atmospheric transmission</li>\n<li>Masking all regions affected by atmospheric absoption of a given % over the course of the year.</li>\n<li>Assuming perfect telluric corretion in which the variance of the measured flux is impacted.</li>\n</ul>\n</li>\n<li>Relative RV precision\nThe RV presicion are present relative to a specified SNR per pixel in the center of a photometric band. The default as usesd in the Figueira et al. 2016 is a SNR of 100 at the center of the J-band.</li>\n<li>Resampling\nAllows for resampling of spectra to n pixels per FWHM. Default=3.</li>\n<li>Band selection\nAnalysis the RV precision attainable by the individual photometric bands <code>Z</code>, <code>Y</code>, <code>J</code>, <code>H</code>, <code>K</code> in the NIR.</li>\n<li>Incremental quality/precision\nAs well as the photometric band precision you can determine the incremental spectral quality or RV precision on narrow wavelenght slices across the entire spectrum, similar to that present in Figure 1 of <a href=\"http://adsabs.harvard.edu/abs/2018AJ....155..198A\" rel=\"nofollow\">Artigau et al. 2018</a>.</li>\n</ul>\n<h1>Usage</h1>\n<p>You can now calculate the theoretical RV precision for any PHOENIX-ACES model.\nYou will need to configure the path to the phoenix models in \u00b4config.yaml\u00b4</p>\n<p>e.g.</p>\n<pre><code>aces_precision.py -t 3900 -l 4.5, -m 0.5 -r 100000 -v 1.0 -b J K\n</code></pre>\n<p>Will calculate the RV precision in the J- and K-band of the PHOENIX-ACES spectra with parameters [Teff=3900K, logg=4.5, [Fe/H]=0.5] observed at a resolution of 100,000 and rotating with 1.0 km/s.<br>\nFor more details on the command line arguments to use see the wiki or type</p>\n<pre><code>aces_precision.py -h \n</code></pre>\n<h2>Outline</h2>\n<p>The code works in two main stages, \"spectral preparation\" and \"precision calculation\".</p>\n<h4>Spectrum preparation</h4>\n<p><code>eniric/nIRanalysis.py</code></p>\n<p>This stage takes in the raw PHOENIX-ACES spectral models and transforms them, saving the results of this computation as .txt files.</p>\n<p>It includes:</p>\n<ul>\n<li>Conversion from flux to photon counts.</li>\n<li>Resolution convolution</li>\n<li>Re-sampling</li>\n</ul>\n<p>Some scripts are given in <code>eniric_scripts</code> to run this preparation over all desired parameters automatically. You will have to modify the paths to things.</p>\n<h4>Precision Calculations</h4>\n<p><code>python eniric_scripts/nIR_precision.py</code></p>\n<p>This takes in the processed spectra and performs the precision calculations for all 3 conditions outlined in the original paper.</p>\n<ul>\n<li>Cond1. Total information</li>\n<li>Cond2. +/-30km/s telluric line &gt; 2% masking</li>\n<li>Cond3. Perfect telluric correction with variance correction</li>\n</ul>\n<p>It also <em>scales the flux level</em> to a desired SNR level in a desired band, see below, as this affects the RV precision calculated. By default this is a SNR of 100 in the J band.</p>\n<h2>Band SNR Scaling.</h2>\n<p>By default, in accordance with the initial paper, each spectra band is normalized to 100 SNR in the center of the J band.</p>\n<p>This now does this automatically by measuring the SNR in 1 pixel resolution (3 points) in the center of the band. And scales accordingly. This adds a spectral model dependent factor on the RV precision.\nTo get around you can manually specify the SNR level to normalize to and which specific band to normalize to. (it can be itself for instance).</p>\n<h2>Instructions</h2>\n<p>Create an empty dir to hold your analysis.\nCreate data dir with re-sampled, results, phoenix_dat\nCopy config.yaml and adjust the paths relative to what you created and to the raw phoenix spectra.</p>\n<p>eniric_scripts/prepare_spectra.py - This opens the phoenix flux spectra, add wavelength axis in microns and converts flux to photon counts. It saves this in the phoenix_dat dir. (The copy of wavelengths does waste space.)</p>\n<p>eniric_scripts/nIR_run.py  - Perform the resolution and rotational convolution on the prepared spectra.</p>\n<p>This also does the resampling.</p>\n<p>e.g. python ../Codes/eniric/eniric_scripts/nIR_run.py -s M0 M3 M6 M9 -b Y J H K -v 1.0 5.0 10.0 -R 60000 80000 100000 --sample_rate 3</p>\n<h2>Background</h2>\n<p>The origin of this code was used in <a href=\"https://arxiv.org/abs/1511.07468\" rel=\"nofollow\">Figueira et al. 2016</a>.</p>\n<pre><code>P. Figueira, V. Zh. Adibekyan, M. Oshagh, J. J. Neal, B. Rojas-Ayala, C. Lovis, C. Melo, F. Pepe, N. C. Santos, M. Tsantaki, 2016,\nRadial velocity information content of M dwarf spectra in the near-infrared,\nAstronomy and Astrophysics, 586, A101\n</code></pre>\n<p>It had a number of efficiency issues with convolution which were improved upo</p>\n<h2>Bugs:</h2>\n<p>A number of bugs were found when adapting this code. Manily affecting the condition invovling telluric line masking. This alters the RV in this column, sometimes significantly. This, however, does <strong>NOT</strong> alter the conclusions in the published paper. A corrected table will be included in an upcomming publication Neal et. al. 2018 (in prep.).</p>\n<p>n. The largest were\n1) Use numpy mapping slicing instead of comprehension lists.  (~&gt;250 times faster)\n2) Use Joblib to parallelize the convolutions.\n3) Caching results to avoid repeating the same convolutions.</p>\n<p>In addressing 1) the convolution speed for a particular test case went from <code>1hour 22 minutes</code> down to <code>27 seconds</code>.</p>\n\n          </div>"}, "last_serial": 5109058, "releases": {"0.5.1": [{"comment_text": "", "digests": {"md5": "421b2a566ff56cac811823a4850f8d28", "sha256": "ff26b98224634286ad34a70b917f1f08627fd6bb90a87fc0e2de8dcc8562b729"}, "downloads": -1, "filename": "eniric-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "421b2a566ff56cac811823a4850f8d28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 71935, "upload_time": "2018-08-28T10:40:10", "upload_time_iso_8601": "2018-08-28T10:40:10.724560Z", "url": "https://files.pythonhosted.org/packages/1b/7f/0177774e891682284af68f618454fc9e75387dfe85315a319c3f009ebf30/eniric-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b270e1e918564dd09ded9730981f41ef", "sha256": "885e202eb08e2e9998c36c163bc21aef0bb292489bf18086fcafcff1de55a65c"}, "downloads": -1, "filename": "eniric-0.5.1.tar.gz", "has_sig": false, "md5_digest": "b270e1e918564dd09ded9730981f41ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49957, "upload_time": "2018-08-28T10:40:12", "upload_time_iso_8601": "2018-08-28T10:40:12.512495Z", "url": "https://files.pythonhosted.org/packages/9e/36/c73a07d60520ecb0b27e8e121c3f6d6e2418d3a0027740aa602222512015/eniric-0.5.1.tar.gz", "yanked": false}], "1.0.0rc2": [{"comment_text": "", "digests": {"md5": "6ae968b17d8b46a1d33195f8e3175398", "sha256": "6a5208232f67421f1018a3f62b39d4095e8b17383b03b3122efaf39382ba4ba0"}, "downloads": -1, "filename": "eniric-1.0.0rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "6ae968b17d8b46a1d33195f8e3175398", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 86635, "upload_time": "2018-09-12T19:33:03", "upload_time_iso_8601": "2018-09-12T19:33:03.041783Z", "url": "https://files.pythonhosted.org/packages/1e/c1/956f263be6e3f7348038f39ae38cdc9c732edeb8c1978dffa2d3e995ae63/eniric-1.0.0rc2-py3-none-any.whl", "yanked": false}], "1.0rc1": [{"comment_text": "", "digests": {"md5": "76e7df34c334799d3864a4b3ca4e8802", "sha256": "b346ced5abfc031f4073c870a16a69fa56a97d08d1824974c8bdeefa35945b0b"}, "downloads": -1, "filename": "eniric-1.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "76e7df34c334799d3864a4b3ca4e8802", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 85216, "upload_time": "2018-09-10T18:10:59", "upload_time_iso_8601": "2018-09-10T18:10:59.195174Z", "url": "https://files.pythonhosted.org/packages/79/65/25a976cdfc25cb4e98f7bccebb0310adcc26962d7a35453e65d6fe47d947/eniric-1.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7a9e6f1356e04a0afdaed0621386da8", "sha256": "e94c91aeabc38deda0b161f30908afbcb29541150c9c7eb7293f68a8a0c00a76"}, "downloads": -1, "filename": "eniric-1.0rc1.tar.gz", "has_sig": false, "md5_digest": "d7a9e6f1356e04a0afdaed0621386da8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56230, "upload_time": "2018-09-10T18:11:00", "upload_time_iso_8601": "2018-09-10T18:11:00.932767Z", "url": "https://files.pythonhosted.org/packages/d8/f8/777b6bf37b679473bb2ef57e11fa13fd0ecab6e3c4dce3c5481d45f14ef6/eniric-1.0rc1.tar.gz", "yanked": false}], "1.0rc3": [{"comment_text": "", "digests": {"md5": "9bbd48fa9b109e9d7bad5cfa74ae58ce", "sha256": "3c1ec29d7dea0fffb75458c3ca0b9b4d2f00914b52684c1d21249ad881e0d2fb"}, "downloads": -1, "filename": "eniric-1.0rc3-py3-none-any.whl", "has_sig": false, "md5_digest": "9bbd48fa9b109e9d7bad5cfa74ae58ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 89035, "upload_time": "2019-04-07T05:27:49", "upload_time_iso_8601": "2019-04-07T05:27:49.659812Z", "url": "https://files.pythonhosted.org/packages/8c/07/ea604215166468dd02991c250f1943a1611abac0d9382054ea669ca6160e/eniric-1.0rc3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "977ca200602883abf186f60362c8cb28", "sha256": "33048ec1ddcddc366b96242d5f0039005e62682f45ffe0709ce733314a4d913f"}, "downloads": -1, "filename": "eniric-1.0rc3.tar.gz", "has_sig": false, "md5_digest": "977ca200602883abf186f60362c8cb28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1428276, "upload_time": "2019-04-07T05:27:52", "upload_time_iso_8601": "2019-04-07T05:27:52.328035Z", "url": "https://files.pythonhosted.org/packages/ac/0a/e4e37353d5600bdd9e87af72ff813ddf4d8ea920ce4a0cf04dd0a4b6b36d/eniric-1.0rc3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "421b2a566ff56cac811823a4850f8d28", "sha256": "ff26b98224634286ad34a70b917f1f08627fd6bb90a87fc0e2de8dcc8562b729"}, "downloads": -1, "filename": "eniric-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "421b2a566ff56cac811823a4850f8d28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 71935, "upload_time": "2018-08-28T10:40:10", "upload_time_iso_8601": "2018-08-28T10:40:10.724560Z", "url": "https://files.pythonhosted.org/packages/1b/7f/0177774e891682284af68f618454fc9e75387dfe85315a319c3f009ebf30/eniric-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b270e1e918564dd09ded9730981f41ef", "sha256": "885e202eb08e2e9998c36c163bc21aef0bb292489bf18086fcafcff1de55a65c"}, "downloads": -1, "filename": "eniric-0.5.1.tar.gz", "has_sig": false, "md5_digest": "b270e1e918564dd09ded9730981f41ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49957, "upload_time": "2018-08-28T10:40:12", "upload_time_iso_8601": "2018-08-28T10:40:12.512495Z", "url": "https://files.pythonhosted.org/packages/9e/36/c73a07d60520ecb0b27e8e121c3f6d6e2418d3a0027740aa602222512015/eniric-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:19 2020"}