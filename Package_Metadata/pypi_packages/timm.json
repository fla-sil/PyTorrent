{"info": {"author": "Ross Wightman", "author_email": "hello@rwightman.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# PyTorch Image Models, etc\n\n## What's New\n\n### May 3, 2020\n* Pruned EfficientNet B1, B2, and B3 (https://arxiv.org/abs/2002.08258) contributed by [Yonathan Aflalo](https://github.com/yoniaflalo)\n\n### May 1, 2020\n* Merged a number of execellent contributions in the ResNet model family over the past month\n  * BlurPool2D and resnetblur models initiated by [Chris Ha](https://github.com/VRandme), I trained resnetblur50 to 79.3.\n  * TResNet models and SpaceToDepth, AntiAliasDownsampleLayer layers by [mrT23](https://github.com/mrT23)\n  * ecaresnet (50d, 101d, light) models and two pruned variants using pruning as per (https://arxiv.org/abs/2002.08258) by [Yonathan Aflalo](https://github.com/yoniaflalo)\n* 200 pretrained models in total now with updated results csv in results folder\n\n### April 5, 2020\n* Add some newly trained MobileNet-V2 models trained with latest h-params, rand augment. They compare quite favourably to EfficientNet-Lite\n  * 3.5M param MobileNet-V2 100 @ 73%\n  * 4.5M param MobileNet-V2 110d @ 75%\n  * 6.1M param MobileNet-V2 140 @ 76.5%\n  * 5.8M param MobileNet-V2 120d @ 77.3%\n\n### March 18, 2020\n* Add EfficientNet-Lite models w/ weights ported from [Tensorflow TPU](https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet/lite)\n* Add RandAugment trained ResNeXt-50 32x4d weights with 79.8 top-1. Trained by [Andrew Lavin](https://github.com/andravin) (see Training section for hparams)\n\n### Feb 29, 2020\n* New MobileNet-V3 Large weights trained from stratch with this code to 75.77% top-1\n* IMPORTANT CHANGE - default weight init changed for all MobilenetV3 / EfficientNet / related models\n  * overall results similar to a bit better training from scratch on a few smaller models tried\n  * performance early in training seems consistently improved but less difference by end\n  * set `fix_group_fanout=False` in `_init_weight_goog` fn if you need to reproducte past behaviour\n* Experimental LR noise feature added applies a random perturbation to LR each epoch in specified range of training\n\n### Feb 18, 2020\n* Big refactor of model layers and addition of several attention mechanisms. Several additions motivated by 'Compounding the Performance Improvements...' (https://arxiv.org/abs/2001.06268):\n  * Move layer/module impl into `layers` subfolder/module of `models` and organize in a more granular fashion\n  * ResNet downsample paths now properly support dilation (output stride != 32) for avg_pool ('D' variant) and 3x3 (SENets) networks\n  * Add Selective Kernel Nets on top of ResNet base, pretrained weights\n    * skresnet18 - 73% top-1\n    * skresnet34 - 76.9% top-1 \n    * skresnext50_32x4d (equiv to SKNet50) - 80.2% top-1\n  * ECA and CECA (circular padding) attention layer contributed by [Chris Ha](https://github.com/VRandme)\n  * CBAM attention experiment (not the best results so far, may remove)\n  * Attention factory to allow dynamically selecting one of SE, ECA, CBAM in the `.se` position for all ResNets\n  * Add DropBlock and DropPath (formerly DropConnect for EfficientNet/MobileNetv3) support to all ResNet variants\n* Full dataset results updated that incl NoisyStudent weights and 2 of the 3 SK weights\n\n### Feb 12, 2020\n* Add EfficientNet-L2 and B0-B7 NoisyStudent weights ported from [Tensorflow TPU](https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet)\n\n### Feb 6, 2020\n* Add RandAugment trained EfficientNet-ES (EdgeTPU-Small) weights with 78.1 top-1. Trained by [Andrew Lavin](https://github.com/andravin) (see Training section for hparams)\n\n### Feb 1/2, 2020\n* Port new EfficientNet-B8 (RandAugment) weights, these are different than the B8 AdvProp, different input normalization.\n* Update results csv files on all models for ImageNet validation and three other test sets\n* Push PyPi package update\n\n### Jan 31, 2020\n* Update ResNet50 weights with a new 79.038 result from further JSD / AugMix experiments. Full command line for reproduction in training section below.\n\n### Jan 11/12, 2020\n* Master may be a bit unstable wrt to training, these changes have been tested but not all combos\n* Implementations of AugMix added to existing RA and AA. Including numerous supporting pieces like JSD loss (Jensen-Shannon divergence + CE), and AugMixDataset\n* SplitBatchNorm adaptation layer added for implementing Auxiliary BN as per AdvProp paper\n* ResNet-50 AugMix trained model w/ 79% top-1 added\n* `seresnext26tn_32x4d` - 77.99 top-1, 93.75 top-5 added to tiered experiment, higher img/s than 't' and 'd'\n\n### Jan 3, 2020\n* Add RandAugment trained EfficientNet-B0 weight with 77.7 top-1. Trained by [Michael Klachko](https://github.com/michaelklachko) with this code and recent hparams (see Training section)\n* Add `avg_checkpoints.py` script for post training weight averaging and update all scripts with header docstrings and shebangs.\n\n### Dec 30, 2019\n* Merge [Dushyant Mehta's](https://github.com/mehtadushy) PR for SelecSLS (Selective Short and Long Range Skip Connections) networks. Good GPU memory consumption and throughput. Original: https://github.com/mehtadushy/SelecSLS-Pytorch\n\n### Dec 28, 2019\n* Add new model weights and training hparams (see Training Hparams section)\n  * `efficientnet_b3` - 81.5 top-1, 95.7 top-5 at default res/crop, 81.9, 95.8 at 320x320 1.0 crop-pct\n     * trained with RandAugment, ended up with an interesting but less than perfect result (see training section)\n  * `seresnext26d_32x4d`- 77.6 top-1, 93.6 top-5\n     * deep stem (32, 32, 64), avgpool downsample\n     * stem/dowsample from bag-of-tricks paper\n  * `seresnext26t_32x4d`- 78.0 top-1, 93.7 top-5\n     * deep tiered stem (24, 48, 64), avgpool downsample (a modified 'D' variant)\n     * stem sizing mods from Jeremy Howard and fastai devs discussing ResNet architecture experiments\n\n### Dec 23, 2019\n* Add RandAugment trained MixNet-XL weights with 80.48 top-1.\n* `--dist-bn` argument added to train.py, will distribute BN stats between nodes after each train epoch, before eval\n\n### Dec 4, 2019\n* Added weights from the first training from scratch of an EfficientNet (B2) with my new RandAugment implementation. Much better than my previous B2 and very close to the official AdvProp ones (80.4 top-1, 95.08 top-5).\n\n### Nov 29, 2019\n* Brought EfficientNet and MobileNetV3 up to date with my https://github.com/rwightman/gen-efficientnet-pytorch code. Torchscript and ONNX export compat excluded.\n  * AdvProp weights added\n  * Official TF MobileNetv3 weights added\n* EfficientNet and MobileNetV3 hook based 'feature extraction' classes added. Will serve as basis for using models as backbones in obj detection/segmentation tasks. Lots more to be done here...\n* HRNet classification models and weights added from https://github.com/HRNet/HRNet-Image-Classification\n* Consistency in global pooling, `reset_classifer`, and `forward_features` across models\n  * `forward_features` always returns unpooled feature maps now\n* Reasonable chance I broke something... let me know\n\n### Nov 22, 2019\n* Add ImageNet training RandAugment implementation alongside AutoAugment. PyTorch Transform compatible format, using PIL. Currently training two EfficientNet models from scratch with promising results... will update.\n* `drop-connect` cmd line arg finally added to `train.py`, no need to hack model fns. Works for efficientnet/mobilenetv3 based models, ignored otherwise.\n\n## Introduction \n\nFor each competition, personal, or freelance project involving images + Convolution Neural Networks, I build on top of an evolving collection of code and models. This repo contains a (somewhat) cleaned up and paired down iteration of that code. Hopefully it'll be of use to others.\n\nThe work of many others is present here. I've tried to make sure all source material is acknowledged:\n* Training/validation scripts evolved from early versions of the [PyTorch Imagenet Examples](https://github.com/pytorch/examples)\n* CUDA specific performance enhancements have been pulled from [NVIDIA's APEX Examples](https://github.com/NVIDIA/apex/tree/master/examples)\n* LR scheduler ideas from [AllenNLP](https://github.com/allenai/allennlp/tree/master/allennlp/training/learning_rate_schedulers), [FAIRseq](https://github.com/pytorch/fairseq/tree/master/fairseq/optim/lr_scheduler), and SGDR: Stochastic Gradient Descent with Warm Restarts (https://arxiv.org/abs/1608.03983)\n* Random Erasing from [Zhun Zhong](https://github.com/zhunzhong07/Random-Erasing/blob/master/transforms.py)  (https://arxiv.org/abs/1708.04896)\n* Optimizers:\n    * RAdam by [Liyuan Liu](https://github.com/LiyuanLucasLiu/RAdam) (https://arxiv.org/abs/1908.03265)\n    * NovoGrad by [Masashi Kimura](https://github.com/convergence-lab/novograd) (https://arxiv.org/abs/1905.11286)\n    * Lookahead adapted from impl by [Liam](https://github.com/alphadl/lookahead.pytorch) (https://arxiv.org/abs/1907.08610)\n\n## Models\n\nI've included a few of my favourite models, but this is not an exhaustive collection. You can't do better than [Cadene's](https://github.com/Cadene/pretrained-models.pytorch) collection in that regard. Most models do have pretrained weights from their respective sources or original authors.\n\nIncluded models:\n* ResNet/ResNeXt (from [torchvision](https://github.com/pytorch/vision/tree/master/torchvision/models) with mods by myself)\n    * ResNet-18, ResNet-34, ResNet-50, ResNet-101, ResNet-152, ResNeXt50 (32x4d), ResNeXt101 (32x4d and 64x4d)\n    * 'Bag of Tricks' / Gluon C, D, E, S variations (https://arxiv.org/abs/1812.01187)\n    * Instagram trained / ImageNet tuned ResNeXt101-32x8d to 32x48d from from [facebookresearch](https://pytorch.org/hub/facebookresearch_WSL-Images_resnext/)\n    * Res2Net (https://github.com/gasvn/Res2Net, https://arxiv.org/abs/1904.01169)\n    * Selective Kernel (SK) Nets (https://arxiv.org/abs/1903.06586)\n* DLA\n    * Original (https://github.com/ucbdrive/dla, https://arxiv.org/abs/1707.06484)\n    * Res2Net (https://github.com/gasvn/Res2Net, https://arxiv.org/abs/1904.01169)\n* DenseNet (from [torchvision](https://github.com/pytorch/vision/tree/master/torchvision/models))\n    * DenseNet-121, DenseNet-169, DenseNet-201, DenseNet-161\n* Squeeze-and-Excitation ResNet/ResNeXt (from [Cadene](https://github.com/Cadene/pretrained-models.pytorch) with some pretrained weight additions by myself)\n    * SENet-154, SE-ResNet-18, SE-ResNet-34, SE-ResNet-50, SE-ResNet-101, SE-ResNet-152, SE-ResNeXt-26 (32x4d), SE-ResNeXt50 (32x4d), SE-ResNeXt101 (32x4d)\n* Inception-ResNet-V2 and Inception-V4 (from [Cadene](https://github.com/Cadene/pretrained-models.pytorch) )\n* Xception\n    * Original variant from [Cadene](https://github.com/Cadene/pretrained-models.pytorch)\n    * MXNet Gluon 'modified aligned' Xception-65 and 71 models from [Gluon ModelZoo](https://github.com/dmlc/gluon-cv/tree/master/gluoncv/model_zoo)\n* PNasNet & NASNet-A (from [Cadene](https://github.com/Cadene/pretrained-models.pytorch))\n* DPN (from [myself](https://github.com/rwightman/pytorch-dpn-pretrained))\n    * DPN-68, DPN-68b, DPN-92, DPN-98, DPN-131, DPN-107\n* EfficientNet (from my standalone [GenEfficientNet](https://github.com/rwightman/gen-efficientnet-pytorch)) - A generic model that implements many of the efficient models that utilize similar DepthwiseSeparable and InvertedResidual blocks\n    * EfficientNet NoisyStudent (B0-B7, L2) (https://arxiv.org/abs/1911.04252)\n    * EfficientNet AdvProp (B0-B8) (https://arxiv.org/abs/1911.09665)\n    * EfficientNet (B0-B7) (https://arxiv.org/abs/1905.11946)\n    * EfficientNet-EdgeTPU (S, M, L) (https://ai.googleblog.com/2019/08/efficientnet-edgetpu-creating.html)\n    * MixNet (https://arxiv.org/abs/1907.09595)\n    * MNASNet B1, A1 (Squeeze-Excite), and Small (https://arxiv.org/abs/1807.11626)\n    * MobileNet-V2 (https://arxiv.org/abs/1801.04381)    \n    * FBNet-C (https://arxiv.org/abs/1812.03443)\n    * Single-Path NAS (https://arxiv.org/abs/1904.02877)\n* MobileNet-V3 (https://arxiv.org/abs/1905.02244)\n* HRNet\n    * code from https://github.com/HRNet/HRNet-Image-Classification, paper https://arxiv.org/abs/1908.07919\n* SelecSLS\n    * code from https://github.com/mehtadushy/SelecSLS-Pytorch, paper https://arxiv.org/abs/1907.00837\n* TResNet\n    * code from https://github.com/mrT23/TResNet, paper https://arxiv.org/abs/2003.13630\n\nUse the  `--model` arg to specify model for train, validation, inference scripts. Match the all lowercase\ncreation fn for the model you'd like.\n\n## Features\nSeveral (less common) features that I often utilize in my projects are included. Many of their additions are the reason why I maintain my own set of models, instead of using others' via PIP:\n* All models have a common default configuration interface and API for\n    * accessing/changing the classifier - `get_classifier` and `reset_classifier`\n    * doing a forward pass on just the features - `forward_features`\n    * these makes it easy to write consistent network wrappers that work with any of the models\n* All models have a consistent pretrained weight loader that adapts last linear if necessary, and from 3 to 1 channel input if desired\n* The train script works in several process/GPU modes:\n    * NVIDIA DDP w/ a single GPU per process, multiple processes with APEX present (AMP mixed-precision optional)\n    * PyTorch DistributedDataParallel w/ multi-gpu, single process (AMP disabled as it crashes when enabled)\n    * PyTorch w/ single GPU single process (AMP optional)\n* A dynamic global pool implementation that allows selecting from average pooling, max pooling, average + max, or concat([average, max]) at model creation. All global pooling is adaptive average by default and compatible with pretrained weights.\n* A 'Test Time Pool' wrapper that can wrap any of the included models and usually provide improved performance doing inference with input images larger than the training size. Idea adapted from original DPN implementation when I ported (https://github.com/cypw/DPNs)\n* Training schedules and techniques that provide competitive results (Cosine LR, Random Erasing, Label Smoothing, etc)\n* Mixup (as in https://arxiv.org/abs/1710.09412) - currently implementing/testing\n* An inference script that dumps output to CSV is provided as an example\n* AutoAugment (https://arxiv.org/abs/1805.09501) and RandAugment (https://arxiv.org/abs/1909.13719) ImageNet configurations modeled after impl for EfficientNet training (https://github.com/tensorflow/tpu/blob/master/models/official/efficientnet/autoaugment.py)\n* AugMix w/ JSD loss (https://arxiv.org/abs/1912.02781), JSD w/ clean + augmented mixing support works with AutoAugment and RandAugment as well\n* SplitBachNorm - allows splitting batch norm layers between clean and augmented (auxiliary batch norm) data\n* DropBlock (https://arxiv.org/abs/1810.12890)\n* Efficient Channel Attention - ECA (https://arxiv.org/abs/1910.03151)\n\n## Results\n\nA CSV file containing an ImageNet-1K validation results summary for all included models with pretrained weights and default configurations is located [here](results/results-all.csv)\n\n### Self-trained Weights\nI've leveraged the training scripts in this repository to train a few of the models with missing weights to good levels of performance. These numbers are all for 224x224 training and validation image sizing with the usual 87.5% validation crop.\n\n|Model | Prec@1 (Err) | Prec@5 (Err) | Param # | Image Scaling  | Image Size |\n|---|---|---|---|---|---|\n| efficientnet_b3a | 81.874 (18.126) | 95.840 (4.160) | 12.23M | bicubic | 320 (1.0 crop) |\n| efficientnet_b3 | 81.498 (18.502) | 95.718 (4.282) | 12.23M | bicubic | 300 |\n| skresnext50d_32x4d | 81.278 (18.722) | 95.366 (4.634) | 27.5M | bicubic | 288 (1.0 crop) |\n| efficientnet_b2a | 80.608 (19.392) | 95.310 (4.690) | 9.11M | bicubic | 288 (1.0 crop) |\n| mixnet_xl | 80.478 (19.522) | 94.932 (5.068) | 11.90M | bicubic | 224 |\n| efficientnet_b2 | 80.402 (19.598) | 95.076 (4.924) | 9.11M | bicubic | 260 |\n| skresnext50d_32x4d | 80.156 (19.844) | 94.642 (5.358) | 27.5M | bicubic | 224 |\n| resnext50_32x4d | 79.762 (20.238) | 94.600 (5.400) | 25M | bicubic | 224 |\n| resnext50d_32x4d | 79.674 (20.326) | 94.868 (5.132) | 25.1M | bicubic | 224 |\n| resnet50 | 79.038 (20.962) | 94.390 (5.610) | 25.6M | bicubic | 224 |\n| mixnet_l | 78.976 (21.024 | 94.184 (5.816) | 7.33M | bicubic | 224 |\n| efficientnet_b1 | 78.692 (21.308) | 94.086 (5.914) | 7.79M | bicubic | 240 |\n| efficientnet_es | 78.066 (21.934) | 93.926 (6.074) | 5.44M | bicubic | 224 |\n| seresnext26t_32x4d | 77.998 (22.002) | 93.708 (6.292) | 16.8M | bicubic | 224 |\n| seresnext26tn_32x4d | 77.986 (22.014) | 93.746 (6.254) | 16.8M | bicubic | 224 |\n| efficientnet_b0 | 77.698 (22.302) | 93.532 (6.468) | 5.29M | bicubic | 224 |\n| seresnext26d_32x4d | 77.602 (22.398) | 93.608 (6.392) | 16.8M | bicubic | 224 |\n| mobilenetv2_120d | 77.294 (22.706 | 93.502 (6.498) | 5.8M | bicubic | 224 |\n| mixnet_m | 77.256 (22.744) | 93.418 (6.582) | 5.01M | bicubic | 224 |\n| seresnext26_32x4d | 77.104 (22.896) | 93.316 (6.684) | 16.8M | bicubic | 224 |\n| skresnet34 | 76.912 (23.088) | 93.322 (6.678) | 22.2M | bicubic | 224 |\n| resnet26d | 76.68 (23.32) | 93.166 (6.834) | 16M | bicubic | 224 |\n| mobilenetv2_140 | 76.524 (23.476) | 92.990 (7.010) | 6.1M | bicubic | 224 |\n| mixnet_s | 75.988 (24.012) | 92.794 (7.206) | 4.13M | bicubic | 224 |\n| mobilenetv3_large_100 | 75.766 (24.234) | 92.542 (7.458) | 5.5M | bicubic | 224 |\n| mobilenetv3_rw | 75.634 (24.366) | 92.708 (7.292) | 5.5M | bicubic | 224 |\n| mnasnet_a1 | 75.448 (24.552) | 92.604 (7.396) | 3.89M | bicubic | 224 |\n| resnet26 | 75.292 (24.708) | 92.57 (7.43) | 16M | bicubic | 224 |\n| fbnetc_100 | 75.124 (24.876) | 92.386 (7.614) | 5.6M | bilinear | 224 |\n| resnet34 | 75.110 (24.890) | 92.284 (7.716) | 22M | bilinear | 224 |\n| mobilenetv2_110d | 75.052 (24.948) | 92.180 (7.820) | 4.5M | bicubic | 224 |\n| seresnet34 | 74.808 (25.192) | 92.124 (7.876) | 22M | bilinear | 224 |\n| mnasnet_b1 | 74.658 (25.342) | 92.114 (7.886) | 4.38M | bicubic | 224 |\n| spnasnet_100 | 74.084 (25.916)  | 91.818 (8.182) | 4.42M | bilinear | 224 |\n| skresnet18 | 73.038 (26.962) | 91.168 (8.832) | 11.9M | bicubic | 224 |\n| mobilenetv2_100 | 72.978 (27.022) | 91.016 (8.984) | 3.5M | bicubic | 224 |\n| seresnet18 | 71.742 (28.258) | 90.334 (9.666) | 11.8M | bicubic | 224 |\n\n### Ported Weights\nFor the models below, the model code and weight porting from Tensorflow or MXNet Gluon to Pytorch was done by myself. There are weights/models ported by others included in this repository, they are not listed below.\n\n| Model | Prec@1 (Err) | Prec@5 (Err) | Param # | Image Scaling | Image Size |\n|---|---|---|---|---|---|\n| tf_efficientnet_l2_ns *tfp | 88.352 (11.648) | 98.652 (1.348) | 480 | bicubic | 800 |\n| tf_efficientnet_l2_ns      | TBD | TBD | 480 | bicubic | 800 |\n| tf_efficientnet_l2_ns_475      | 88.234 (11.766) | 98.546 (1.454)f | 480 | bicubic | 475 |\n| tf_efficientnet_l2_ns_475 *tfp | 88.172 (11.828) | 98.566 (1.434) | 480 | bicubic | 475 |\n| tf_efficientnet_b7_ns *tfp | 86.844 (13.156) | 98.084 (1.916) | 66.35 | bicubic | 600 |\n| tf_efficientnet_b7_ns      | 86.840 (13.160) | 98.094 (1.906) | 66.35 | bicubic | 600 |\n| tf_efficientnet_b6_ns      | 86.452 (13.548) | 97.882 (2.118) | 43.04 | bicubic | 528 |\n| tf_efficientnet_b6_ns *tfp | 86.444 (13.556) | 97.880 (2.120) | 43.04 | bicubic | 528 |\n| tf_efficientnet_b5_ns *tfp | 86.064 (13.936) | 97.746 (2.254) | 30.39 | bicubic | 456 |\n| tf_efficientnet_b5_ns      | 86.088 (13.912) | 97.752 (2.248) | 30.39 | bicubic | 456 |\n| tf_efficientnet_b8_ap *tfp | 85.436 (14.564) | 97.272 (2.728) | 87.4 | bicubic | 672 |\n| tf_efficientnet_b8 *tfp    | 85.384 (14.616) | 97.394 (2.606) | 87.4 | bicubic | 672 |\n| tf_efficientnet_b8         | 85.370 (14.630) | 97.390 (2.610) | 87.4 | bicubic | 672 |\n| tf_efficientnet_b8_ap      | 85.368 (14.632) | 97.294 (2.706) | 87.4 | bicubic | 672 |\n| tf_efficientnet_b4_ns *tfp | 85.298 (14.702) | 97.504 (2.496) | 19.34 | bicubic | 380 |\n| tf_efficientnet_b4_ns      | 85.162 (14.838) | 97.470 (2.530) | 19.34 | bicubic | 380 |\n| tf_efficientnet_b7_ap *tfp | 85.154 (14.846) | 97.244 (2.756) | 66.35 | bicubic | 600 |\n| tf_efficientnet_b7_ap      | 85.118 (14.882) | 97.252 (2.748) | 66.35 | bicubic | 600 |\n| tf_efficientnet_b7 *tfp    | 84.940 (15.060) | 97.214 (2.786) | 66.35 | bicubic | 600 |\n| tf_efficientnet_b7         | 84.932 (15.068) | 97.208 (2.792) | 66.35 | bicubic | 600 |\n| tf_efficientnet_b6_ap      | 84.786 (15.214) | 97.138 (2.862) | 43.04 | bicubic | 528 |\n| tf_efficientnet_b6_ap *tfp | 84.760 (15.240) | 97.124 (2.876) | 43.04 | bicubic | 528 |\n| tf_efficientnet_b5_ap *tfp | 84.276 (15.724) | 96.932 (3.068) | 30.39 | bicubic | 456 |\n| tf_efficientnet_b5_ap      | 84.254 (15.746) | 96.976 (3.024) | 30.39 | bicubic | 456 |\n| tf_efficientnet_b6 *tfp    | 84.140 (15.860) | 96.852 (3.148) | 43.04 | bicubic | 528 |\n| tf_efficientnet_b6         | 84.110 (15.890) | 96.886 (3.114) | 43.04 | bicubic | 528 |\n| tf_efficientnet_b3_ns *tfp | 84.054 (15.946) | 96.918 (3.082) | 12.23 | bicubic | 300 |\n| tf_efficientnet_b3_ns      | 84.048 (15.952) | 96.910 (3.090) | 12.23 | bicubic | 300 |\n| tf_efficientnet_b5 *tfp    | 83.822 (16.178) | 96.756 (3.244) | 30.39 | bicubic | 456 |\n| tf_efficientnet_b5         | 83.812 (16.188) | 96.748 (3.252) | 30.39 | bicubic | 456 |\n| tf_efficientnet_b4_ap *tfp | 83.278 (16.722) | 96.376 (3.624) | 19.34 | bicubic | 380 |\n| tf_efficientnet_b4_ap      | 83.248 (16.752) | 96.388 (3.612) | 19.34 | bicubic | 380 |\n| tf_efficientnet_b4         | 83.022 (16.978) | 96.300 (3.700) | 19.34 | bicubic | 380 |\n| tf_efficientnet_b4 *tfp    | 82.948 (17.052) | 96.308 (3.692) | 19.34 | bicubic | 380 |\n| tf_efficientnet_b2_ns *tfp | 82.436 (17.564) | 96.268 (3.732) | 9.11 | bicubic | 260 |\n| tf_efficientnet_b2_ns      | 82.380 (17.620) | 96.248 (3.752) | 9.11 | bicubic | 260 |\n| tf_efficientnet_b3_ap *tfp | 81.882 (18.118) | 95.662 (4.338) | 12.23 | bicubic | 300 |\n| tf_efficientnet_b3_ap      | 81.828 (18.172) | 95.624 (4.376) | 12.23 | bicubic | 300 |\n| tf_efficientnet_b3         | 81.636 (18.364) | 95.718 (4.282) | 12.23 | bicubic | 300 |\n| tf_efficientnet_b3 *tfp    | 81.576 (18.424) | 95.662 (4.338) | 12.23 | bicubic | 300 |\n| tf_efficientnet_lite4      | 81.528 (18.472) | 95.668 (4.332) | 13.00  | bilinear | 380 |\n| tf_efficientnet_b1_ns *tfp | 81.514 (18.486) | 95.776 (4.224) | 7.79 | bicubic | 240 |\n| tf_efficientnet_lite4 *tfp | 81.502 (18.498) | 95.676 (4.324) | 13.00  | bilinear | 380 |\n| tf_efficientnet_b1_ns      | 81.388 (18.612) | 95.738 (4.262) | 7.79 | bicubic | 240 |\n| gluon_senet154           | 81.224 (18.776) | 95.356 (4.644) | 115.09 | bicubic | 224 |\n| gluon_resnet152_v1s      | 81.012 (18.988) | 95.416 (4.584) | 60.32  | bicubic | 224 |\n| gluon_seresnext101_32x4d | 80.902 (19.098) | 95.294 (4.706) | 48.96  | bicubic | 224 |\n| gluon_seresnext101_64x4d | 80.890 (19.110) | 95.304 (4.696) | 88.23  | bicubic | 224 |\n| gluon_resnext101_64x4d   | 80.602 (19.398) | 94.994 (5.006) | 83.46  | bicubic | 224 |\n| tf_efficientnet_el       | 80.534 (19.466) | 95.190 (4.810) | 10.59 | bicubic | 300 |\n| tf_efficientnet_el *tfp  | 80.476 (19.524) | 95.200 (4.800) | 10.59 | bicubic | 300 |\n| gluon_resnet152_v1d      | 80.470 (19.530) | 95.206 (4.794) | 60.21  | bicubic | 224 |\n| gluon_resnet101_v1d      | 80.424 (19.576) | 95.020 (4.980) | 44.57  | bicubic | 224 |\n| tf_efficientnet_b2_ap *tfp | 80.420 (19.580) | 95.040 (4.960) | 9.11 | bicubic | 260 |\n| gluon_resnext101_32x4d   | 80.334 (19.666) | 94.926 (5.074) | 44.18  | bicubic | 224 |\n| tf_efficientnet_b2_ap    | 80.306 (19.694) | 95.028 (4.972) | 9.11 | bicubic | 260 |\n| gluon_resnet101_v1s      | 80.300 (19.700) | 95.150 (4.850) | 44.67  | bicubic | 224 |\n| tf_efficientnet_b2 *tfp  | 80.188 (19.812) | 94.974 (5.026) | 9.11  | bicubic | 260 |\n| tf_efficientnet_b2       | 80.086 (19.914) | 94.908 (5.092) | 9.11  | bicubic | 260 |\n| gluon_resnet152_v1c      | 79.916 (20.084) | 94.842 (5.158) | 60.21  | bicubic | 224 |\n| gluon_seresnext50_32x4d  | 79.912 (20.088) | 94.818 (5.182) | 27.56  | bicubic | 224 |\n| tf_efficientnet_lite3       | 79.812 (20.188) | 94.914 (5.086) | 8.20  | bilinear | 300 |\n| tf_efficientnet_lite3 *tfp  | 79.734 (20.266) | 94.838 (5.162) | 8.20  | bilinear | 300 |\n| gluon_resnet152_v1b      | 79.692 (20.308) | 94.738 (5.262) | 60.19  | bicubic | 224 |\n| gluon_xception65         | 79.604 (20.396) | 94.748 (5.252) | 39.92  | bicubic | 299 |\n| gluon_resnet101_v1c      | 79.544 (20.456) | 94.586 (5.414) | 44.57  | bicubic | 224 |\n| tf_efficientnet_b1_ap *tfp | 79.532 (20.468) | 94.378 (5.622) | 7.79 | bicubic | 240 |\n| tf_efficientnet_cc_b1_8e *tfp | 79.464 (20.536)| 94.492 (5.508) | 39.7 | bicubic | 240 |\n| gluon_resnext50_32x4d    | 79.356 (20.644) | 94.424 (5.576) | 25.03  | bicubic | 224 |\n| gluon_resnet101_v1b      | 79.304 (20.696) | 94.524 (5.476) | 44.55  | bicubic | 224 |\n| tf_efficientnet_cc_b1_8e | 79.298 (20.702) | 94.364 (5.636) | 39.7 | bicubic | 240 |\n| tf_efficientnet_b1_ap    | 79.278 (20.722) | 94.308 (5.692) | 7.79 | bicubic | 240 |\n| tf_efficientnet_b1 *tfp  | 79.172 (20.828) | 94.450 (5.550) | 7.79  | bicubic | 240 |\n| gluon_resnet50_v1d       | 79.074 (20.926) | 94.476 (5.524) | 25.58  | bicubic | 224 |\n| tf_efficientnet_em *tfp  | 78.958 (21.042) | 94.458 (5.542) | 6.90 | bicubic | 240 |\n| tf_mixnet_l *tfp         | 78.846 (21.154) | 94.212 (5.788) | 7.33  | bilinear | 224 |\n| tf_efficientnet_b1       | 78.826 (21.174) | 94.198 (5.802) | 7.79  | bicubic | 240 |\n| tf_efficientnet_b0_ns *tfp | 78.806 (21.194) | 94.496 (5.504) | 5.29 | bicubic | 224 |\n| gluon_inception_v3       | 78.804 (21.196) | 94.380 (5.620) | 27.16M | bicubic | 299 |\n| tf_mixnet_l              | 78.770 (21.230) | 94.004 (5.996) | 7.33  | bicubic | 224 |\n| tf_efficientnet_em       | 78.742 (21.258) | 94.332 (5.668) | 6.90 | bicubic | 240 |\n| gluon_resnet50_v1s       | 78.712 (21.288) | 94.242 (5.758) | 25.68  | bicubic | 224 |\n| tf_efficientnet_b0_ns    | 78.658 (21.342) | 94.376 (5.624) | 5.29 | bicubic | 224 |\n| tf_efficientnet_cc_b0_8e *tfp | 78.314 (21.686) | 93.790 (6.210) | 24.0 | bicubic | 224 |\n| gluon_resnet50_v1c       | 78.010 (21.990) | 93.988 (6.012) | 25.58  | bicubic | 224 |\n| tf_efficientnet_cc_b0_8e | 77.908 (22.092) | 93.656 (6.344) | 24.0 | bicubic | 224 |\n| tf_inception_v3          | 77.856 (22.144) | 93.644 (6.356) | 27.16M | bicubic | 299 |\n| tf_efficientnet_cc_b0_4e *tfp | 77.746 (22.254) | 93.552 (6.448) | 13.3 | bicubic | 224 |\n| tf_efficientnet_es *tfp  | 77.616 (22.384) | 93.750 (6.250) | 5.44 | bicubic | 224 |\n| gluon_resnet50_v1b       | 77.578 (22.422) | 93.718 (6.282) | 25.56  | bicubic | 224 |\n| adv_inception_v3         | 77.576 (22.424) | 93.724 (6.276) | 27.16M | bicubic | 299 |\n| tf_efficientnet_lite2 *tfp  | 77.544 (22.456) | 93.800 (6.200) | 6.09  | bilinear | 260 |\n| tf_efficientnet_lite2       | 77.460 (22.540) | 93.746 (6.254) | 6.09  | bicubic | 260 |\n| tf_efficientnet_b0_ap *tfp | 77.514 (22.486) | 93.576 (6.424) | 5.29  | bicubic | 224 |\n| tf_efficientnet_cc_b0_4e | 77.304 (22.696) | 93.332 (6.668) | 13.3 | bicubic | 224 |\n| tf_efficientnet_es       | 77.264 (22.736) | 93.600 (6.400) | 5.44 | bicubic | 224 |\n| tf_efficientnet_b0 *tfp  | 77.258 (22.742) | 93.478 (6.522) | 5.29  | bicubic | 224 |\n| tf_efficientnet_b0_ap    | 77.084 (22.916) | 93.254 (6.746) | 5.29  | bicubic | 224 |\n| tf_mixnet_m *tfp         | 77.072 (22.928) | 93.368 (6.632) | 5.01  | bilinear | 224 |\n| tf_mixnet_m              | 76.950 (23.050) | 93.156 (6.844) | 5.01  | bicubic | 224 |\n| tf_efficientnet_b0       | 76.848 (23.152) | 93.228 (6.772) | 5.29  | bicubic | 224 |\n| tf_efficientnet_lite1 *tfp  | 76.764 (23.236) | 93.326 (6.674) | 5.42  | bilinear | 240 |\n| tf_efficientnet_lite1       | 76.638 (23.362) | 93.232 (6.768) | 5.42  | bicubic | 240 |\n| tf_mixnet_s *tfp         | 75.800 (24.200) | 92.788 (7.212) | 4.13  | bilinear | 224 |\n| tf_mobilenetv3_large_100 *tfp | 75.768 (24.232) | 92.710 (7.290) | 5.48 | bilinear | 224 |\n| tf_mixnet_s              | 75.648 (24.352) | 92.636 (7.364) | 4.13  | bicubic | 224 |\n| tf_mobilenetv3_large_100 | 75.516 (24.484) | 92.600 (7.400) | 5.48 | bilinear | 224 |\n| tf_efficientnet_lite0 *tfp  | 75.074 (24.926) | 92.314 (7.686) | 4.65  | bilinear | 224 |\n| tf_efficientnet_lite0       | 74.842 (25.158) | 92.170 (7.830) | 4.65  | bicubic | 224 |\n| gluon_resnet34_v1b       | 74.580 (25.420) | 91.988 (8.012) | 21.80 | bicubic | 224 |\n| tf_mobilenetv3_large_075 *tfp | 73.730 (26.270) | 91.616 (8.384) | 3.99 | bilinear | 224 |\n| tf_mobilenetv3_large_075 | 73.442 (26.558) | 91.352 (8.648) | 3.99 | bilinear | 224 |\n| tf_mobilenetv3_large_minimal_100 *tfp | 72.678 (27.322) | 90.860 (9.140) | 3.92 | bilinear | 224 |\n| tf_mobilenetv3_large_minimal_100 | 72.244 (27.756) | 90.636 (9.364) | 3.92 | bilinear | 224 |\n| tf_mobilenetv3_small_100 *tfp | 67.918 (32.082) | 87.958 (12.042 | 2.54 | bilinear | 224 |\n| tf_mobilenetv3_small_100 | 67.918 (32.082) | 87.662 (12.338) | 2.54 | bilinear | 224 |\n| tf_mobilenetv3_small_075 *tfp | 66.142 (33.858) | 86.498 (13.502) | 2.04 | bilinear | 224 |\n| tf_mobilenetv3_small_075 | 65.718 (34.282) | 86.136 (13.864) | 2.04 | bilinear | 224 |\n| tf_mobilenetv3_small_minimal_100 *tfp | 63.378 (36.622) | 84.802 (15.198) | 2.04 | bilinear | 224 |\n| tf_mobilenetv3_small_minimal_100 | 62.898 (37.102) | 84.230 (15.770) | 2.04 | bilinear | 224 |\n\nModels with `*tfp` next to them were scored with `--tf-preprocessing` flag. \n\nThe `tf_efficientnet`, `tf_mixnet` models require an equivalent for 'SAME' padding as their arch results in asymmetric padding. I've added this in the model creation wrapper, but it does come with a performance penalty. \n\nSources for original weights:\n* `tf_efficientnet*`: [Tensorflow TPU](https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet)\n* `tf_efficientnet_e*`: [Tensorflow TPU](https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet/edgetpu)\n* `tf_mixnet*`: [Tensorflow TPU](https://github.com/tensorflow/tpu/tree/master/models/official/mnasnet/mixnet)\n* `tf_inception*`: [Tensorflow Slim](https://github.com/tensorflow/models/tree/master/research/slim)\n* `gluon_*`: [MxNet Gluon](https://gluon-cv.mxnet.io/model_zoo/classification.html)\n\n## Training Hyperparameters\n\n### EfficientNet-B2 with RandAugment - 80.4 top-1, 95.1 top-5\nThese params are for dual Titan RTX cards with NVIDIA Apex installed:\n\n`./distributed_train.sh 2 /imagenet/ --model efficientnet_b2 -b 128 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.3 --drop-connect 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .016`\n\n### MixNet-XL with RandAugment - 80.5 top-1, 94.9 top-5\nThis params are for dual Titan RTX cards with NVIDIA Apex installed:\n\n`./distributed_train.sh 2 /imagenet/ --model mixnet_xl -b 128 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .969 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.3 --drop-connect 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.3 --amp --lr .016 --dist-bn reduce`\n\n### SE-ResNeXt-26-D and SE-ResNeXt-26-T\nThese hparams (or similar) work well for a wide range of ResNet architecture, generally a good idea to increase the epoch # as the model size increases... ie approx 180-200 for ResNe(X)t50, and 220+ for larger. Increase batch size and LR proportionally for better GPUs or with AMP enabled. These params were for 2 1080Ti cards:\n\n`./distributed_train.sh 2 /imagenet/ --model seresnext26t_32x4d --lr 0.1 --warmup-epochs 5 --epochs 160 --weight-decay 1e-4 --sched cosine --reprob 0.4 --remode pixel -b 112`\n\n### EfficientNet-B3 with RandAugment - 81.5 top-1, 95.7 top-5\nThe training of this model started with the same command line as EfficientNet-B2 w/ RA above. After almost three weeks of training the process crashed. The results weren't looking amazing so I resumed the training several times with tweaks to a few params (increase RE prob, decrease rand-aug, increase ema-decay). Nothing looked great. I ended up averaging the best checkpoints from all restarts. The result is mediocre at default res/crop but oddly performs much better with a full image test crop of 1.0. \n\n### EfficientNet-B0 with RandAugment - 77.7 top-1, 95.3 top-5\n[Michael Klachko](https://github.com/michaelklachko) achieved these results with the command line for B2 adapted for larger batch size, with the recommended B0 dropout rate of 0.2.\n\n`./distributed_train.sh 2 /imagenet/ --model efficientnet_b0 -b 384 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-connect 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .048`\n\n### ResNet50 with JSD loss and RandAugment (clean + 2x RA augs) - 79.04 top-1, 94.39 top-5\n\nTrained on two older 1080Ti cards, this took a while. Only slightly, non statistically better ImageNet validation result than my first good AugMix training of 78.99. However, these weights are more robust on tests with ImageNetV2, ImageNet-Sketch, etc. Unlike my first AugMix runs, I've enabled SplitBatchNorm, disabled random erasing on the clean split, and cranked up random erasing prob on the 2 augmented paths.\n\n`./distributed_train.sh 2 /imagenet -b 64 --model resnet50 --sched cosine --epochs 200 --lr 0.05 --amp --remode pixel --reprob 0.6 --aug-splits 3 --aa rand-m9-mstd0.5-inc1 --resplit --split-bn --jsd --dist-bn reduce`\n\n### EfficientNet-ES (EdgeTPU-Small) with RandAugment - 78.066 top-1, 93.926 top-5\nTrained by [Andrew Lavin](https://github.com/andravin) with 8 V100 cards. Model EMA was not used, final checkpoint is the average of 8 best checkpoints during training.\n\n`./distributed_train.sh 8 /imagenet --model efficientnet_es -b 128 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-connect 0.2  --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .064`\n\n### MobileNetV3-Large-100 - 75.766 top-1, 92,542 top-5\n\n`./distributed_train.sh 2 /imagenet/ --model mobilenetv3_large_100 -b 512 --sched step --epochs 600 --decay-epochs 2.4 --decay-rate .973 --opt rmsproptf --opt-eps .001 -j 7 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-connect 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .064 --lr-noise 0.42 0.9`\n\n\n### ResNeXt-50 32x4d w/ RandAugment - 79.762 top-1, 94.60 top-5\nThese params will also work well for SE-ResNeXt-50 and SK-ResNeXt-50 and likely 101. I used them for the SK-ResNeXt-50 32x4d that I trained with 2 GPU using a slightly higher LR per effective batch size (lr=0.18, b=192 per GPU). The cmd line below are tuned for 8 GPU training.\n\n\n`./distributed_train.sh 8 /imagenet --model resnext50_32x4d --lr 0.6 --warmup-epochs 5 --epochs 240 --weight-decay 1e-4 --sched cosine --reprob 0.4 --recount 3 --remode pixel --aa rand-m7-mstd0.5-inc1 -b 192 -j 6 --amp --dist-bn reduce`\n\n**TODO dig up some more**\n\n\n## Usage\n\n### Environment\n\nAll development and testing has been done in Conda Python 3 environments on Linux x86-64 systems, specifically Python 3.6.x and 3.7.x. Little to no care has been taken to be Python 2.x friendly and I don't plan to support it. If you run into any challenges running on Windows, or other OS, I'm definitely open to looking into those issues so long as it's in a reproducible (read Conda) environment.\n\nPyTorch versions 1.2, 1.3.1, and 1.4 have been tested with this code.\n\nI've tried to keep the dependencies minimal, the setup is as per the PyTorch default install instructions for Conda:\n```\nconda create -n torch-env\nconda activate torch-env\nconda install -c pytorch pytorch torchvision cudatoolkit=10.1\nconda install pyyaml\n```\n\n### Pip\nThis package can be installed via pip. Currently, the model factory (`timm.create_model`) is the most useful component to use via a pip install.\n\nInstall (after conda env/install):\n```\npip install timm\n```\n\nUse:\n```\n>>> import timm\n>>> m = timm.create_model('mobilenetv3_100', pretrained=True)\n>>> m.eval()\n```\n\n### Scripts\nA train, validation, inference, and checkpoint cleaning script included in the github root folder. Scripts are not currently packaged in the pip release.\n\n#### Training\n\nThe variety of training args is large and not all combinations of options (or even options) have been fully tested. For the training dataset folder, specify the folder to the base that contains a `train` and `validation` folder.\n\nTo train an SE-ResNet34 on ImageNet, locally distributed, 4 GPUs, one process per GPU w/ cosine schedule, random-erasing prob of 50% and per-pixel random value:\n\n`./distributed_train.sh 4 /data/imagenet --model seresnet34 --sched cosine --epochs 150 --warmup-epochs 5 --lr 0.4 --reprob 0.5 --remode pixel --batch-size 256 -j 4`\n\nNOTE: NVIDIA APEX should be installed to run in per-process distributed via DDP or to enable AMP mixed precision with the --amp flag\n\n#### Validation / Inference\n\nValidation and inference scripts are similar in usage. One outputs metrics on a validation set and the other outputs topk class ids in a csv. Specify the folder containing validation images, not the base as in training script. \n\nTo validate with the model's pretrained weights (if they exist):\n\n`python validate.py /imagenet/validation/ --model seresnext26_32x4d --pretrained`\n\nTo run inference from a checkpoint:\n\n`python inference.py /imagenet/validation/ --model mobilenetv3_100 --checkpoint ./output/model_best.pth.tar`\n\n## TODO\nA number of additions planned in the future for various projects, incl\n* Do a model performance (speed + accuracy) benchmarking across all models (make runable as script)\n* Complete feature map extraction across all model types and build obj detection/segmentation models and scripts (or integrate backbones with mmdetection, detectron2)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rwightman/pytorch-image-models", "keywords": "pytorch pretrained models efficientnet mobilenetv3 mnasnet", "license": "", "maintainer": "", "maintainer_email": "", "name": "timm", "package_url": "https://pypi.org/project/timm/", "platform": "", "project_url": "https://pypi.org/project/timm/", "project_urls": {"Homepage": "https://github.com/rwightman/pytorch-image-models"}, "release_url": "https://pypi.org/project/timm/0.1.26/", "requires_dist": ["torch (>=1.0)", "torchvision"], "requires_python": ">=3.6", "summary": "(Unofficial) PyTorch Image Models", "version": "0.1.26", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyTorch Image Models, etc</h1>\n<h2>What's New</h2>\n<h3>May 3, 2020</h3>\n<ul>\n<li>Pruned EfficientNet B1, B2, and B3 (<a href=\"https://arxiv.org/abs/2002.08258\" rel=\"nofollow\">https://arxiv.org/abs/2002.08258</a>) contributed by <a href=\"https://github.com/yoniaflalo\" rel=\"nofollow\">Yonathan Aflalo</a></li>\n</ul>\n<h3>May 1, 2020</h3>\n<ul>\n<li>Merged a number of execellent contributions in the ResNet model family over the past month\n<ul>\n<li>BlurPool2D and resnetblur models initiated by <a href=\"https://github.com/VRandme\" rel=\"nofollow\">Chris Ha</a>, I trained resnetblur50 to 79.3.</li>\n<li>TResNet models and SpaceToDepth, AntiAliasDownsampleLayer layers by <a href=\"https://github.com/mrT23\" rel=\"nofollow\">mrT23</a></li>\n<li>ecaresnet (50d, 101d, light) models and two pruned variants using pruning as per (<a href=\"https://arxiv.org/abs/2002.08258\" rel=\"nofollow\">https://arxiv.org/abs/2002.08258</a>) by <a href=\"https://github.com/yoniaflalo\" rel=\"nofollow\">Yonathan Aflalo</a></li>\n</ul>\n</li>\n<li>200 pretrained models in total now with updated results csv in results folder</li>\n</ul>\n<h3>April 5, 2020</h3>\n<ul>\n<li>Add some newly trained MobileNet-V2 models trained with latest h-params, rand augment. They compare quite favourably to EfficientNet-Lite\n<ul>\n<li>3.5M param MobileNet-V2 100 @ 73%</li>\n<li>4.5M param MobileNet-V2 110d @ 75%</li>\n<li>6.1M param MobileNet-V2 140 @ 76.5%</li>\n<li>5.8M param MobileNet-V2 120d @ 77.3%</li>\n</ul>\n</li>\n</ul>\n<h3>March 18, 2020</h3>\n<ul>\n<li>Add EfficientNet-Lite models w/ weights ported from <a href=\"https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet/lite\" rel=\"nofollow\">Tensorflow TPU</a></li>\n<li>Add RandAugment trained ResNeXt-50 32x4d weights with 79.8 top-1. Trained by <a href=\"https://github.com/andravin\" rel=\"nofollow\">Andrew Lavin</a> (see Training section for hparams)</li>\n</ul>\n<h3>Feb 29, 2020</h3>\n<ul>\n<li>New MobileNet-V3 Large weights trained from stratch with this code to 75.77% top-1</li>\n<li>IMPORTANT CHANGE - default weight init changed for all MobilenetV3 / EfficientNet / related models\n<ul>\n<li>overall results similar to a bit better training from scratch on a few smaller models tried</li>\n<li>performance early in training seems consistently improved but less difference by end</li>\n<li>set <code>fix_group_fanout=False</code> in <code>_init_weight_goog</code> fn if you need to reproducte past behaviour</li>\n</ul>\n</li>\n<li>Experimental LR noise feature added applies a random perturbation to LR each epoch in specified range of training</li>\n</ul>\n<h3>Feb 18, 2020</h3>\n<ul>\n<li>Big refactor of model layers and addition of several attention mechanisms. Several additions motivated by 'Compounding the Performance Improvements...' (<a href=\"https://arxiv.org/abs/2001.06268\" rel=\"nofollow\">https://arxiv.org/abs/2001.06268</a>):\n<ul>\n<li>Move layer/module impl into <code>layers</code> subfolder/module of <code>models</code> and organize in a more granular fashion</li>\n<li>ResNet downsample paths now properly support dilation (output stride != 32) for avg_pool ('D' variant) and 3x3 (SENets) networks</li>\n<li>Add Selective Kernel Nets on top of ResNet base, pretrained weights\n<ul>\n<li>skresnet18 - 73% top-1</li>\n<li>skresnet34 - 76.9% top-1</li>\n<li>skresnext50_32x4d (equiv to SKNet50) - 80.2% top-1</li>\n</ul>\n</li>\n<li>ECA and CECA (circular padding) attention layer contributed by <a href=\"https://github.com/VRandme\" rel=\"nofollow\">Chris Ha</a></li>\n<li>CBAM attention experiment (not the best results so far, may remove)</li>\n<li>Attention factory to allow dynamically selecting one of SE, ECA, CBAM in the <code>.se</code> position for all ResNets</li>\n<li>Add DropBlock and DropPath (formerly DropConnect for EfficientNet/MobileNetv3) support to all ResNet variants</li>\n</ul>\n</li>\n<li>Full dataset results updated that incl NoisyStudent weights and 2 of the 3 SK weights</li>\n</ul>\n<h3>Feb 12, 2020</h3>\n<ul>\n<li>Add EfficientNet-L2 and B0-B7 NoisyStudent weights ported from <a href=\"https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet\" rel=\"nofollow\">Tensorflow TPU</a></li>\n</ul>\n<h3>Feb 6, 2020</h3>\n<ul>\n<li>Add RandAugment trained EfficientNet-ES (EdgeTPU-Small) weights with 78.1 top-1. Trained by <a href=\"https://github.com/andravin\" rel=\"nofollow\">Andrew Lavin</a> (see Training section for hparams)</li>\n</ul>\n<h3>Feb 1/2, 2020</h3>\n<ul>\n<li>Port new EfficientNet-B8 (RandAugment) weights, these are different than the B8 AdvProp, different input normalization.</li>\n<li>Update results csv files on all models for ImageNet validation and three other test sets</li>\n<li>Push PyPi package update</li>\n</ul>\n<h3>Jan 31, 2020</h3>\n<ul>\n<li>Update ResNet50 weights with a new 79.038 result from further JSD / AugMix experiments. Full command line for reproduction in training section below.</li>\n</ul>\n<h3>Jan 11/12, 2020</h3>\n<ul>\n<li>Master may be a bit unstable wrt to training, these changes have been tested but not all combos</li>\n<li>Implementations of AugMix added to existing RA and AA. Including numerous supporting pieces like JSD loss (Jensen-Shannon divergence + CE), and AugMixDataset</li>\n<li>SplitBatchNorm adaptation layer added for implementing Auxiliary BN as per AdvProp paper</li>\n<li>ResNet-50 AugMix trained model w/ 79% top-1 added</li>\n<li><code>seresnext26tn_32x4d</code> - 77.99 top-1, 93.75 top-5 added to tiered experiment, higher img/s than 't' and 'd'</li>\n</ul>\n<h3>Jan 3, 2020</h3>\n<ul>\n<li>Add RandAugment trained EfficientNet-B0 weight with 77.7 top-1. Trained by <a href=\"https://github.com/michaelklachko\" rel=\"nofollow\">Michael Klachko</a> with this code and recent hparams (see Training section)</li>\n<li>Add <code>avg_checkpoints.py</code> script for post training weight averaging and update all scripts with header docstrings and shebangs.</li>\n</ul>\n<h3>Dec 30, 2019</h3>\n<ul>\n<li>Merge <a href=\"https://github.com/mehtadushy\" rel=\"nofollow\">Dushyant Mehta's</a> PR for SelecSLS (Selective Short and Long Range Skip Connections) networks. Good GPU memory consumption and throughput. Original: <a href=\"https://github.com/mehtadushy/SelecSLS-Pytorch\" rel=\"nofollow\">https://github.com/mehtadushy/SelecSLS-Pytorch</a></li>\n</ul>\n<h3>Dec 28, 2019</h3>\n<ul>\n<li>Add new model weights and training hparams (see Training Hparams section)\n<ul>\n<li><code>efficientnet_b3</code> - 81.5 top-1, 95.7 top-5 at default res/crop, 81.9, 95.8 at 320x320 1.0 crop-pct\n<ul>\n<li>trained with RandAugment, ended up with an interesting but less than perfect result (see training section)</li>\n</ul>\n</li>\n<li><code>seresnext26d_32x4d</code>- 77.6 top-1, 93.6 top-5\n<ul>\n<li>deep stem (32, 32, 64), avgpool downsample</li>\n<li>stem/dowsample from bag-of-tricks paper</li>\n</ul>\n</li>\n<li><code>seresnext26t_32x4d</code>- 78.0 top-1, 93.7 top-5\n<ul>\n<li>deep tiered stem (24, 48, 64), avgpool downsample (a modified 'D' variant)</li>\n<li>stem sizing mods from Jeremy Howard and fastai devs discussing ResNet architecture experiments</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Dec 23, 2019</h3>\n<ul>\n<li>Add RandAugment trained MixNet-XL weights with 80.48 top-1.</li>\n<li><code>--dist-bn</code> argument added to train.py, will distribute BN stats between nodes after each train epoch, before eval</li>\n</ul>\n<h3>Dec 4, 2019</h3>\n<ul>\n<li>Added weights from the first training from scratch of an EfficientNet (B2) with my new RandAugment implementation. Much better than my previous B2 and very close to the official AdvProp ones (80.4 top-1, 95.08 top-5).</li>\n</ul>\n<h3>Nov 29, 2019</h3>\n<ul>\n<li>Brought EfficientNet and MobileNetV3 up to date with my <a href=\"https://github.com/rwightman/gen-efficientnet-pytorch\" rel=\"nofollow\">https://github.com/rwightman/gen-efficientnet-pytorch</a> code. Torchscript and ONNX export compat excluded.\n<ul>\n<li>AdvProp weights added</li>\n<li>Official TF MobileNetv3 weights added</li>\n</ul>\n</li>\n<li>EfficientNet and MobileNetV3 hook based 'feature extraction' classes added. Will serve as basis for using models as backbones in obj detection/segmentation tasks. Lots more to be done here...</li>\n<li>HRNet classification models and weights added from <a href=\"https://github.com/HRNet/HRNet-Image-Classification\" rel=\"nofollow\">https://github.com/HRNet/HRNet-Image-Classification</a></li>\n<li>Consistency in global pooling, <code>reset_classifer</code>, and <code>forward_features</code> across models\n<ul>\n<li><code>forward_features</code> always returns unpooled feature maps now</li>\n</ul>\n</li>\n<li>Reasonable chance I broke something... let me know</li>\n</ul>\n<h3>Nov 22, 2019</h3>\n<ul>\n<li>Add ImageNet training RandAugment implementation alongside AutoAugment. PyTorch Transform compatible format, using PIL. Currently training two EfficientNet models from scratch with promising results... will update.</li>\n<li><code>drop-connect</code> cmd line arg finally added to <code>train.py</code>, no need to hack model fns. Works for efficientnet/mobilenetv3 based models, ignored otherwise.</li>\n</ul>\n<h2>Introduction</h2>\n<p>For each competition, personal, or freelance project involving images + Convolution Neural Networks, I build on top of an evolving collection of code and models. This repo contains a (somewhat) cleaned up and paired down iteration of that code. Hopefully it'll be of use to others.</p>\n<p>The work of many others is present here. I've tried to make sure all source material is acknowledged:</p>\n<ul>\n<li>Training/validation scripts evolved from early versions of the <a href=\"https://github.com/pytorch/examples\" rel=\"nofollow\">PyTorch Imagenet Examples</a></li>\n<li>CUDA specific performance enhancements have been pulled from <a href=\"https://github.com/NVIDIA/apex/tree/master/examples\" rel=\"nofollow\">NVIDIA's APEX Examples</a></li>\n<li>LR scheduler ideas from <a href=\"https://github.com/allenai/allennlp/tree/master/allennlp/training/learning_rate_schedulers\" rel=\"nofollow\">AllenNLP</a>, <a href=\"https://github.com/pytorch/fairseq/tree/master/fairseq/optim/lr_scheduler\" rel=\"nofollow\">FAIRseq</a>, and SGDR: Stochastic Gradient Descent with Warm Restarts (<a href=\"https://arxiv.org/abs/1608.03983\" rel=\"nofollow\">https://arxiv.org/abs/1608.03983</a>)</li>\n<li>Random Erasing from <a href=\"https://github.com/zhunzhong07/Random-Erasing/blob/master/transforms.py\" rel=\"nofollow\">Zhun Zhong</a>  (<a href=\"https://arxiv.org/abs/1708.04896\" rel=\"nofollow\">https://arxiv.org/abs/1708.04896</a>)</li>\n<li>Optimizers:\n<ul>\n<li>RAdam by <a href=\"https://github.com/LiyuanLucasLiu/RAdam\" rel=\"nofollow\">Liyuan Liu</a> (<a href=\"https://arxiv.org/abs/1908.03265\" rel=\"nofollow\">https://arxiv.org/abs/1908.03265</a>)</li>\n<li>NovoGrad by <a href=\"https://github.com/convergence-lab/novograd\" rel=\"nofollow\">Masashi Kimura</a> (<a href=\"https://arxiv.org/abs/1905.11286\" rel=\"nofollow\">https://arxiv.org/abs/1905.11286</a>)</li>\n<li>Lookahead adapted from impl by <a href=\"https://github.com/alphadl/lookahead.pytorch\" rel=\"nofollow\">Liam</a> (<a href=\"https://arxiv.org/abs/1907.08610\" rel=\"nofollow\">https://arxiv.org/abs/1907.08610</a>)</li>\n</ul>\n</li>\n</ul>\n<h2>Models</h2>\n<p>I've included a few of my favourite models, but this is not an exhaustive collection. You can't do better than <a href=\"https://github.com/Cadene/pretrained-models.pytorch\" rel=\"nofollow\">Cadene's</a> collection in that regard. Most models do have pretrained weights from their respective sources or original authors.</p>\n<p>Included models:</p>\n<ul>\n<li>ResNet/ResNeXt (from <a href=\"https://github.com/pytorch/vision/tree/master/torchvision/models\" rel=\"nofollow\">torchvision</a> with mods by myself)\n<ul>\n<li>ResNet-18, ResNet-34, ResNet-50, ResNet-101, ResNet-152, ResNeXt50 (32x4d), ResNeXt101 (32x4d and 64x4d)</li>\n<li>'Bag of Tricks' / Gluon C, D, E, S variations (<a href=\"https://arxiv.org/abs/1812.01187\" rel=\"nofollow\">https://arxiv.org/abs/1812.01187</a>)</li>\n<li>Instagram trained / ImageNet tuned ResNeXt101-32x8d to 32x48d from from <a href=\"https://pytorch.org/hub/facebookresearch_WSL-Images_resnext/\" rel=\"nofollow\">facebookresearch</a></li>\n<li>Res2Net (<a href=\"https://github.com/gasvn/Res2Net\" rel=\"nofollow\">https://github.com/gasvn/Res2Net</a>, <a href=\"https://arxiv.org/abs/1904.01169\" rel=\"nofollow\">https://arxiv.org/abs/1904.01169</a>)</li>\n<li>Selective Kernel (SK) Nets (<a href=\"https://arxiv.org/abs/1903.06586\" rel=\"nofollow\">https://arxiv.org/abs/1903.06586</a>)</li>\n</ul>\n</li>\n<li>DLA\n<ul>\n<li>Original (<a href=\"https://github.com/ucbdrive/dla\" rel=\"nofollow\">https://github.com/ucbdrive/dla</a>, <a href=\"https://arxiv.org/abs/1707.06484\" rel=\"nofollow\">https://arxiv.org/abs/1707.06484</a>)</li>\n<li>Res2Net (<a href=\"https://github.com/gasvn/Res2Net\" rel=\"nofollow\">https://github.com/gasvn/Res2Net</a>, <a href=\"https://arxiv.org/abs/1904.01169\" rel=\"nofollow\">https://arxiv.org/abs/1904.01169</a>)</li>\n</ul>\n</li>\n<li>DenseNet (from <a href=\"https://github.com/pytorch/vision/tree/master/torchvision/models\" rel=\"nofollow\">torchvision</a>)\n<ul>\n<li>DenseNet-121, DenseNet-169, DenseNet-201, DenseNet-161</li>\n</ul>\n</li>\n<li>Squeeze-and-Excitation ResNet/ResNeXt (from <a href=\"https://github.com/Cadene/pretrained-models.pytorch\" rel=\"nofollow\">Cadene</a> with some pretrained weight additions by myself)\n<ul>\n<li>SENet-154, SE-ResNet-18, SE-ResNet-34, SE-ResNet-50, SE-ResNet-101, SE-ResNet-152, SE-ResNeXt-26 (32x4d), SE-ResNeXt50 (32x4d), SE-ResNeXt101 (32x4d)</li>\n</ul>\n</li>\n<li>Inception-ResNet-V2 and Inception-V4 (from <a href=\"https://github.com/Cadene/pretrained-models.pytorch\" rel=\"nofollow\">Cadene</a> )</li>\n<li>Xception\n<ul>\n<li>Original variant from <a href=\"https://github.com/Cadene/pretrained-models.pytorch\" rel=\"nofollow\">Cadene</a></li>\n<li>MXNet Gluon 'modified aligned' Xception-65 and 71 models from <a href=\"https://github.com/dmlc/gluon-cv/tree/master/gluoncv/model_zoo\" rel=\"nofollow\">Gluon ModelZoo</a></li>\n</ul>\n</li>\n<li>PNasNet &amp; NASNet-A (from <a href=\"https://github.com/Cadene/pretrained-models.pytorch\" rel=\"nofollow\">Cadene</a>)</li>\n<li>DPN (from <a href=\"https://github.com/rwightman/pytorch-dpn-pretrained\" rel=\"nofollow\">myself</a>)\n<ul>\n<li>DPN-68, DPN-68b, DPN-92, DPN-98, DPN-131, DPN-107</li>\n</ul>\n</li>\n<li>EfficientNet (from my standalone <a href=\"https://github.com/rwightman/gen-efficientnet-pytorch\" rel=\"nofollow\">GenEfficientNet</a>) - A generic model that implements many of the efficient models that utilize similar DepthwiseSeparable and InvertedResidual blocks\n<ul>\n<li>EfficientNet NoisyStudent (B0-B7, L2) (<a href=\"https://arxiv.org/abs/1911.04252\" rel=\"nofollow\">https://arxiv.org/abs/1911.04252</a>)</li>\n<li>EfficientNet AdvProp (B0-B8) (<a href=\"https://arxiv.org/abs/1911.09665\" rel=\"nofollow\">https://arxiv.org/abs/1911.09665</a>)</li>\n<li>EfficientNet (B0-B7) (<a href=\"https://arxiv.org/abs/1905.11946\" rel=\"nofollow\">https://arxiv.org/abs/1905.11946</a>)</li>\n<li>EfficientNet-EdgeTPU (S, M, L) (<a href=\"https://ai.googleblog.com/2019/08/efficientnet-edgetpu-creating.html\" rel=\"nofollow\">https://ai.googleblog.com/2019/08/efficientnet-edgetpu-creating.html</a>)</li>\n<li>MixNet (<a href=\"https://arxiv.org/abs/1907.09595\" rel=\"nofollow\">https://arxiv.org/abs/1907.09595</a>)</li>\n<li>MNASNet B1, A1 (Squeeze-Excite), and Small (<a href=\"https://arxiv.org/abs/1807.11626\" rel=\"nofollow\">https://arxiv.org/abs/1807.11626</a>)</li>\n<li>MobileNet-V2 (<a href=\"https://arxiv.org/abs/1801.04381\" rel=\"nofollow\">https://arxiv.org/abs/1801.04381</a>)</li>\n<li>FBNet-C (<a href=\"https://arxiv.org/abs/1812.03443\" rel=\"nofollow\">https://arxiv.org/abs/1812.03443</a>)</li>\n<li>Single-Path NAS (<a href=\"https://arxiv.org/abs/1904.02877\" rel=\"nofollow\">https://arxiv.org/abs/1904.02877</a>)</li>\n</ul>\n</li>\n<li>MobileNet-V3 (<a href=\"https://arxiv.org/abs/1905.02244\" rel=\"nofollow\">https://arxiv.org/abs/1905.02244</a>)</li>\n<li>HRNet\n<ul>\n<li>code from <a href=\"https://github.com/HRNet/HRNet-Image-Classification\" rel=\"nofollow\">https://github.com/HRNet/HRNet-Image-Classification</a>, paper <a href=\"https://arxiv.org/abs/1908.07919\" rel=\"nofollow\">https://arxiv.org/abs/1908.07919</a></li>\n</ul>\n</li>\n<li>SelecSLS\n<ul>\n<li>code from <a href=\"https://github.com/mehtadushy/SelecSLS-Pytorch\" rel=\"nofollow\">https://github.com/mehtadushy/SelecSLS-Pytorch</a>, paper <a href=\"https://arxiv.org/abs/1907.00837\" rel=\"nofollow\">https://arxiv.org/abs/1907.00837</a></li>\n</ul>\n</li>\n<li>TResNet\n<ul>\n<li>code from <a href=\"https://github.com/mrT23/TResNet\" rel=\"nofollow\">https://github.com/mrT23/TResNet</a>, paper <a href=\"https://arxiv.org/abs/2003.13630\" rel=\"nofollow\">https://arxiv.org/abs/2003.13630</a></li>\n</ul>\n</li>\n</ul>\n<p>Use the  <code>--model</code> arg to specify model for train, validation, inference scripts. Match the all lowercase\ncreation fn for the model you'd like.</p>\n<h2>Features</h2>\n<p>Several (less common) features that I often utilize in my projects are included. Many of their additions are the reason why I maintain my own set of models, instead of using others' via PIP:</p>\n<ul>\n<li>All models have a common default configuration interface and API for\n<ul>\n<li>accessing/changing the classifier - <code>get_classifier</code> and <code>reset_classifier</code></li>\n<li>doing a forward pass on just the features - <code>forward_features</code></li>\n<li>these makes it easy to write consistent network wrappers that work with any of the models</li>\n</ul>\n</li>\n<li>All models have a consistent pretrained weight loader that adapts last linear if necessary, and from 3 to 1 channel input if desired</li>\n<li>The train script works in several process/GPU modes:\n<ul>\n<li>NVIDIA DDP w/ a single GPU per process, multiple processes with APEX present (AMP mixed-precision optional)</li>\n<li>PyTorch DistributedDataParallel w/ multi-gpu, single process (AMP disabled as it crashes when enabled)</li>\n<li>PyTorch w/ single GPU single process (AMP optional)</li>\n</ul>\n</li>\n<li>A dynamic global pool implementation that allows selecting from average pooling, max pooling, average + max, or concat([average, max]) at model creation. All global pooling is adaptive average by default and compatible with pretrained weights.</li>\n<li>A 'Test Time Pool' wrapper that can wrap any of the included models and usually provide improved performance doing inference with input images larger than the training size. Idea adapted from original DPN implementation when I ported (<a href=\"https://github.com/cypw/DPNs\" rel=\"nofollow\">https://github.com/cypw/DPNs</a>)</li>\n<li>Training schedules and techniques that provide competitive results (Cosine LR, Random Erasing, Label Smoothing, etc)</li>\n<li>Mixup (as in <a href=\"https://arxiv.org/abs/1710.09412\" rel=\"nofollow\">https://arxiv.org/abs/1710.09412</a>) - currently implementing/testing</li>\n<li>An inference script that dumps output to CSV is provided as an example</li>\n<li>AutoAugment (<a href=\"https://arxiv.org/abs/1805.09501\" rel=\"nofollow\">https://arxiv.org/abs/1805.09501</a>) and RandAugment (<a href=\"https://arxiv.org/abs/1909.13719\" rel=\"nofollow\">https://arxiv.org/abs/1909.13719</a>) ImageNet configurations modeled after impl for EfficientNet training (<a href=\"https://github.com/tensorflow/tpu/blob/master/models/official/efficientnet/autoaugment.py\" rel=\"nofollow\">https://github.com/tensorflow/tpu/blob/master/models/official/efficientnet/autoaugment.py</a>)</li>\n<li>AugMix w/ JSD loss (<a href=\"https://arxiv.org/abs/1912.02781\" rel=\"nofollow\">https://arxiv.org/abs/1912.02781</a>), JSD w/ clean + augmented mixing support works with AutoAugment and RandAugment as well</li>\n<li>SplitBachNorm - allows splitting batch norm layers between clean and augmented (auxiliary batch norm) data</li>\n<li>DropBlock (<a href=\"https://arxiv.org/abs/1810.12890\" rel=\"nofollow\">https://arxiv.org/abs/1810.12890</a>)</li>\n<li>Efficient Channel Attention - ECA (<a href=\"https://arxiv.org/abs/1910.03151\" rel=\"nofollow\">https://arxiv.org/abs/1910.03151</a>)</li>\n</ul>\n<h2>Results</h2>\n<p>A CSV file containing an ImageNet-1K validation results summary for all included models with pretrained weights and default configurations is located <a href=\"results/results-all.csv\" rel=\"nofollow\">here</a></p>\n<h3>Self-trained Weights</h3>\n<p>I've leveraged the training scripts in this repository to train a few of the models with missing weights to good levels of performance. These numbers are all for 224x224 training and validation image sizing with the usual 87.5% validation crop.</p>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th>Prec@1 (Err)</th>\n<th>Prec@5 (Err)</th>\n<th>Param #</th>\n<th>Image Scaling</th>\n<th>Image Size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>efficientnet_b3a</td>\n<td>81.874 (18.126)</td>\n<td>95.840 (4.160)</td>\n<td>12.23M</td>\n<td>bicubic</td>\n<td>320 (1.0 crop)</td>\n</tr>\n<tr>\n<td>efficientnet_b3</td>\n<td>81.498 (18.502)</td>\n<td>95.718 (4.282)</td>\n<td>12.23M</td>\n<td>bicubic</td>\n<td>300</td>\n</tr>\n<tr>\n<td>skresnext50d_32x4d</td>\n<td>81.278 (18.722)</td>\n<td>95.366 (4.634)</td>\n<td>27.5M</td>\n<td>bicubic</td>\n<td>288 (1.0 crop)</td>\n</tr>\n<tr>\n<td>efficientnet_b2a</td>\n<td>80.608 (19.392)</td>\n<td>95.310 (4.690)</td>\n<td>9.11M</td>\n<td>bicubic</td>\n<td>288 (1.0 crop)</td>\n</tr>\n<tr>\n<td>mixnet_xl</td>\n<td>80.478 (19.522)</td>\n<td>94.932 (5.068)</td>\n<td>11.90M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>efficientnet_b2</td>\n<td>80.402 (19.598)</td>\n<td>95.076 (4.924)</td>\n<td>9.11M</td>\n<td>bicubic</td>\n<td>260</td>\n</tr>\n<tr>\n<td>skresnext50d_32x4d</td>\n<td>80.156 (19.844)</td>\n<td>94.642 (5.358)</td>\n<td>27.5M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>resnext50_32x4d</td>\n<td>79.762 (20.238)</td>\n<td>94.600 (5.400)</td>\n<td>25M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>resnext50d_32x4d</td>\n<td>79.674 (20.326)</td>\n<td>94.868 (5.132)</td>\n<td>25.1M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>resnet50</td>\n<td>79.038 (20.962)</td>\n<td>94.390 (5.610)</td>\n<td>25.6M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mixnet_l</td>\n<td>78.976 (21.024</td>\n<td>94.184 (5.816)</td>\n<td>7.33M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>efficientnet_b1</td>\n<td>78.692 (21.308)</td>\n<td>94.086 (5.914)</td>\n<td>7.79M</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>efficientnet_es</td>\n<td>78.066 (21.934)</td>\n<td>93.926 (6.074)</td>\n<td>5.44M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>seresnext26t_32x4d</td>\n<td>77.998 (22.002)</td>\n<td>93.708 (6.292)</td>\n<td>16.8M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>seresnext26tn_32x4d</td>\n<td>77.986 (22.014)</td>\n<td>93.746 (6.254)</td>\n<td>16.8M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>efficientnet_b0</td>\n<td>77.698 (22.302)</td>\n<td>93.532 (6.468)</td>\n<td>5.29M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>seresnext26d_32x4d</td>\n<td>77.602 (22.398)</td>\n<td>93.608 (6.392)</td>\n<td>16.8M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mobilenetv2_120d</td>\n<td>77.294 (22.706</td>\n<td>93.502 (6.498)</td>\n<td>5.8M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mixnet_m</td>\n<td>77.256 (22.744)</td>\n<td>93.418 (6.582)</td>\n<td>5.01M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>seresnext26_32x4d</td>\n<td>77.104 (22.896)</td>\n<td>93.316 (6.684)</td>\n<td>16.8M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>skresnet34</td>\n<td>76.912 (23.088)</td>\n<td>93.322 (6.678)</td>\n<td>22.2M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>resnet26d</td>\n<td>76.68 (23.32)</td>\n<td>93.166 (6.834)</td>\n<td>16M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mobilenetv2_140</td>\n<td>76.524 (23.476)</td>\n<td>92.990 (7.010)</td>\n<td>6.1M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mixnet_s</td>\n<td>75.988 (24.012)</td>\n<td>92.794 (7.206)</td>\n<td>4.13M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mobilenetv3_large_100</td>\n<td>75.766 (24.234)</td>\n<td>92.542 (7.458)</td>\n<td>5.5M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mobilenetv3_rw</td>\n<td>75.634 (24.366)</td>\n<td>92.708 (7.292)</td>\n<td>5.5M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mnasnet_a1</td>\n<td>75.448 (24.552)</td>\n<td>92.604 (7.396)</td>\n<td>3.89M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>resnet26</td>\n<td>75.292 (24.708)</td>\n<td>92.57 (7.43)</td>\n<td>16M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>fbnetc_100</td>\n<td>75.124 (24.876)</td>\n<td>92.386 (7.614)</td>\n<td>5.6M</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>resnet34</td>\n<td>75.110 (24.890)</td>\n<td>92.284 (7.716)</td>\n<td>22M</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mobilenetv2_110d</td>\n<td>75.052 (24.948)</td>\n<td>92.180 (7.820)</td>\n<td>4.5M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>seresnet34</td>\n<td>74.808 (25.192)</td>\n<td>92.124 (7.876)</td>\n<td>22M</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mnasnet_b1</td>\n<td>74.658 (25.342)</td>\n<td>92.114 (7.886)</td>\n<td>4.38M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>spnasnet_100</td>\n<td>74.084 (25.916)</td>\n<td>91.818 (8.182)</td>\n<td>4.42M</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>skresnet18</td>\n<td>73.038 (26.962)</td>\n<td>91.168 (8.832)</td>\n<td>11.9M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>mobilenetv2_100</td>\n<td>72.978 (27.022)</td>\n<td>91.016 (8.984)</td>\n<td>3.5M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>seresnet18</td>\n<td>71.742 (28.258)</td>\n<td>90.334 (9.666)</td>\n<td>11.8M</td>\n<td>bicubic</td>\n<td>224</td>\n</tr></tbody></table>\n<h3>Ported Weights</h3>\n<p>For the models below, the model code and weight porting from Tensorflow or MXNet Gluon to Pytorch was done by myself. There are weights/models ported by others included in this repository, they are not listed below.</p>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th>Prec@1 (Err)</th>\n<th>Prec@5 (Err)</th>\n<th>Param #</th>\n<th>Image Scaling</th>\n<th>Image Size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tf_efficientnet_l2_ns *tfp</td>\n<td>88.352 (11.648)</td>\n<td>98.652 (1.348)</td>\n<td>480</td>\n<td>bicubic</td>\n<td>800</td>\n</tr>\n<tr>\n<td>tf_efficientnet_l2_ns</td>\n<td>TBD</td>\n<td>TBD</td>\n<td>480</td>\n<td>bicubic</td>\n<td>800</td>\n</tr>\n<tr>\n<td>tf_efficientnet_l2_ns_475</td>\n<td>88.234 (11.766)</td>\n<td>98.546 (1.454)f</td>\n<td>480</td>\n<td>bicubic</td>\n<td>475</td>\n</tr>\n<tr>\n<td>tf_efficientnet_l2_ns_475 *tfp</td>\n<td>88.172 (11.828)</td>\n<td>98.566 (1.434)</td>\n<td>480</td>\n<td>bicubic</td>\n<td>475</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b7_ns *tfp</td>\n<td>86.844 (13.156)</td>\n<td>98.084 (1.916)</td>\n<td>66.35</td>\n<td>bicubic</td>\n<td>600</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b7_ns</td>\n<td>86.840 (13.160)</td>\n<td>98.094 (1.906)</td>\n<td>66.35</td>\n<td>bicubic</td>\n<td>600</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b6_ns</td>\n<td>86.452 (13.548)</td>\n<td>97.882 (2.118)</td>\n<td>43.04</td>\n<td>bicubic</td>\n<td>528</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b6_ns *tfp</td>\n<td>86.444 (13.556)</td>\n<td>97.880 (2.120)</td>\n<td>43.04</td>\n<td>bicubic</td>\n<td>528</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b5_ns *tfp</td>\n<td>86.064 (13.936)</td>\n<td>97.746 (2.254)</td>\n<td>30.39</td>\n<td>bicubic</td>\n<td>456</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b5_ns</td>\n<td>86.088 (13.912)</td>\n<td>97.752 (2.248)</td>\n<td>30.39</td>\n<td>bicubic</td>\n<td>456</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b8_ap *tfp</td>\n<td>85.436 (14.564)</td>\n<td>97.272 (2.728)</td>\n<td>87.4</td>\n<td>bicubic</td>\n<td>672</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b8 *tfp</td>\n<td>85.384 (14.616)</td>\n<td>97.394 (2.606)</td>\n<td>87.4</td>\n<td>bicubic</td>\n<td>672</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b8</td>\n<td>85.370 (14.630)</td>\n<td>97.390 (2.610)</td>\n<td>87.4</td>\n<td>bicubic</td>\n<td>672</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b8_ap</td>\n<td>85.368 (14.632)</td>\n<td>97.294 (2.706)</td>\n<td>87.4</td>\n<td>bicubic</td>\n<td>672</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b4_ns *tfp</td>\n<td>85.298 (14.702)</td>\n<td>97.504 (2.496)</td>\n<td>19.34</td>\n<td>bicubic</td>\n<td>380</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b4_ns</td>\n<td>85.162 (14.838)</td>\n<td>97.470 (2.530)</td>\n<td>19.34</td>\n<td>bicubic</td>\n<td>380</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b7_ap *tfp</td>\n<td>85.154 (14.846)</td>\n<td>97.244 (2.756)</td>\n<td>66.35</td>\n<td>bicubic</td>\n<td>600</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b7_ap</td>\n<td>85.118 (14.882)</td>\n<td>97.252 (2.748)</td>\n<td>66.35</td>\n<td>bicubic</td>\n<td>600</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b7 *tfp</td>\n<td>84.940 (15.060)</td>\n<td>97.214 (2.786)</td>\n<td>66.35</td>\n<td>bicubic</td>\n<td>600</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b7</td>\n<td>84.932 (15.068)</td>\n<td>97.208 (2.792)</td>\n<td>66.35</td>\n<td>bicubic</td>\n<td>600</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b6_ap</td>\n<td>84.786 (15.214)</td>\n<td>97.138 (2.862)</td>\n<td>43.04</td>\n<td>bicubic</td>\n<td>528</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b6_ap *tfp</td>\n<td>84.760 (15.240)</td>\n<td>97.124 (2.876)</td>\n<td>43.04</td>\n<td>bicubic</td>\n<td>528</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b5_ap *tfp</td>\n<td>84.276 (15.724)</td>\n<td>96.932 (3.068)</td>\n<td>30.39</td>\n<td>bicubic</td>\n<td>456</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b5_ap</td>\n<td>84.254 (15.746)</td>\n<td>96.976 (3.024)</td>\n<td>30.39</td>\n<td>bicubic</td>\n<td>456</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b6 *tfp</td>\n<td>84.140 (15.860)</td>\n<td>96.852 (3.148)</td>\n<td>43.04</td>\n<td>bicubic</td>\n<td>528</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b6</td>\n<td>84.110 (15.890)</td>\n<td>96.886 (3.114)</td>\n<td>43.04</td>\n<td>bicubic</td>\n<td>528</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b3_ns *tfp</td>\n<td>84.054 (15.946)</td>\n<td>96.918 (3.082)</td>\n<td>12.23</td>\n<td>bicubic</td>\n<td>300</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b3_ns</td>\n<td>84.048 (15.952)</td>\n<td>96.910 (3.090)</td>\n<td>12.23</td>\n<td>bicubic</td>\n<td>300</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b5 *tfp</td>\n<td>83.822 (16.178)</td>\n<td>96.756 (3.244)</td>\n<td>30.39</td>\n<td>bicubic</td>\n<td>456</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b5</td>\n<td>83.812 (16.188)</td>\n<td>96.748 (3.252)</td>\n<td>30.39</td>\n<td>bicubic</td>\n<td>456</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b4_ap *tfp</td>\n<td>83.278 (16.722)</td>\n<td>96.376 (3.624)</td>\n<td>19.34</td>\n<td>bicubic</td>\n<td>380</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b4_ap</td>\n<td>83.248 (16.752)</td>\n<td>96.388 (3.612)</td>\n<td>19.34</td>\n<td>bicubic</td>\n<td>380</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b4</td>\n<td>83.022 (16.978)</td>\n<td>96.300 (3.700)</td>\n<td>19.34</td>\n<td>bicubic</td>\n<td>380</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b4 *tfp</td>\n<td>82.948 (17.052)</td>\n<td>96.308 (3.692)</td>\n<td>19.34</td>\n<td>bicubic</td>\n<td>380</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b2_ns *tfp</td>\n<td>82.436 (17.564)</td>\n<td>96.268 (3.732)</td>\n<td>9.11</td>\n<td>bicubic</td>\n<td>260</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b2_ns</td>\n<td>82.380 (17.620)</td>\n<td>96.248 (3.752)</td>\n<td>9.11</td>\n<td>bicubic</td>\n<td>260</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b3_ap *tfp</td>\n<td>81.882 (18.118)</td>\n<td>95.662 (4.338)</td>\n<td>12.23</td>\n<td>bicubic</td>\n<td>300</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b3_ap</td>\n<td>81.828 (18.172)</td>\n<td>95.624 (4.376)</td>\n<td>12.23</td>\n<td>bicubic</td>\n<td>300</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b3</td>\n<td>81.636 (18.364)</td>\n<td>95.718 (4.282)</td>\n<td>12.23</td>\n<td>bicubic</td>\n<td>300</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b3 *tfp</td>\n<td>81.576 (18.424)</td>\n<td>95.662 (4.338)</td>\n<td>12.23</td>\n<td>bicubic</td>\n<td>300</td>\n</tr>\n<tr>\n<td>tf_efficientnet_lite4</td>\n<td>81.528 (18.472)</td>\n<td>95.668 (4.332)</td>\n<td>13.00</td>\n<td>bilinear</td>\n<td>380</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b1_ns *tfp</td>\n<td>81.514 (18.486)</td>\n<td>95.776 (4.224)</td>\n<td>7.79</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>tf_efficientnet_lite4 *tfp</td>\n<td>81.502 (18.498)</td>\n<td>95.676 (4.324)</td>\n<td>13.00</td>\n<td>bilinear</td>\n<td>380</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b1_ns</td>\n<td>81.388 (18.612)</td>\n<td>95.738 (4.262)</td>\n<td>7.79</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>gluon_senet154</td>\n<td>81.224 (18.776)</td>\n<td>95.356 (4.644)</td>\n<td>115.09</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_resnet152_v1s</td>\n<td>81.012 (18.988)</td>\n<td>95.416 (4.584)</td>\n<td>60.32</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_seresnext101_32x4d</td>\n<td>80.902 (19.098)</td>\n<td>95.294 (4.706)</td>\n<td>48.96</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_seresnext101_64x4d</td>\n<td>80.890 (19.110)</td>\n<td>95.304 (4.696)</td>\n<td>88.23</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_resnext101_64x4d</td>\n<td>80.602 (19.398)</td>\n<td>94.994 (5.006)</td>\n<td>83.46</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_el</td>\n<td>80.534 (19.466)</td>\n<td>95.190 (4.810)</td>\n<td>10.59</td>\n<td>bicubic</td>\n<td>300</td>\n</tr>\n<tr>\n<td>tf_efficientnet_el *tfp</td>\n<td>80.476 (19.524)</td>\n<td>95.200 (4.800)</td>\n<td>10.59</td>\n<td>bicubic</td>\n<td>300</td>\n</tr>\n<tr>\n<td>gluon_resnet152_v1d</td>\n<td>80.470 (19.530)</td>\n<td>95.206 (4.794)</td>\n<td>60.21</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_resnet101_v1d</td>\n<td>80.424 (19.576)</td>\n<td>95.020 (4.980)</td>\n<td>44.57</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b2_ap *tfp</td>\n<td>80.420 (19.580)</td>\n<td>95.040 (4.960)</td>\n<td>9.11</td>\n<td>bicubic</td>\n<td>260</td>\n</tr>\n<tr>\n<td>gluon_resnext101_32x4d</td>\n<td>80.334 (19.666)</td>\n<td>94.926 (5.074)</td>\n<td>44.18</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b2_ap</td>\n<td>80.306 (19.694)</td>\n<td>95.028 (4.972)</td>\n<td>9.11</td>\n<td>bicubic</td>\n<td>260</td>\n</tr>\n<tr>\n<td>gluon_resnet101_v1s</td>\n<td>80.300 (19.700)</td>\n<td>95.150 (4.850)</td>\n<td>44.67</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b2 *tfp</td>\n<td>80.188 (19.812)</td>\n<td>94.974 (5.026)</td>\n<td>9.11</td>\n<td>bicubic</td>\n<td>260</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b2</td>\n<td>80.086 (19.914)</td>\n<td>94.908 (5.092)</td>\n<td>9.11</td>\n<td>bicubic</td>\n<td>260</td>\n</tr>\n<tr>\n<td>gluon_resnet152_v1c</td>\n<td>79.916 (20.084)</td>\n<td>94.842 (5.158)</td>\n<td>60.21</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_seresnext50_32x4d</td>\n<td>79.912 (20.088)</td>\n<td>94.818 (5.182)</td>\n<td>27.56</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_lite3</td>\n<td>79.812 (20.188)</td>\n<td>94.914 (5.086)</td>\n<td>8.20</td>\n<td>bilinear</td>\n<td>300</td>\n</tr>\n<tr>\n<td>tf_efficientnet_lite3 *tfp</td>\n<td>79.734 (20.266)</td>\n<td>94.838 (5.162)</td>\n<td>8.20</td>\n<td>bilinear</td>\n<td>300</td>\n</tr>\n<tr>\n<td>gluon_resnet152_v1b</td>\n<td>79.692 (20.308)</td>\n<td>94.738 (5.262)</td>\n<td>60.19</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_xception65</td>\n<td>79.604 (20.396)</td>\n<td>94.748 (5.252)</td>\n<td>39.92</td>\n<td>bicubic</td>\n<td>299</td>\n</tr>\n<tr>\n<td>gluon_resnet101_v1c</td>\n<td>79.544 (20.456)</td>\n<td>94.586 (5.414)</td>\n<td>44.57</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b1_ap *tfp</td>\n<td>79.532 (20.468)</td>\n<td>94.378 (5.622)</td>\n<td>7.79</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>tf_efficientnet_cc_b1_8e *tfp</td>\n<td>79.464 (20.536)</td>\n<td>94.492 (5.508)</td>\n<td>39.7</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>gluon_resnext50_32x4d</td>\n<td>79.356 (20.644)</td>\n<td>94.424 (5.576)</td>\n<td>25.03</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_resnet101_v1b</td>\n<td>79.304 (20.696)</td>\n<td>94.524 (5.476)</td>\n<td>44.55</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_cc_b1_8e</td>\n<td>79.298 (20.702)</td>\n<td>94.364 (5.636)</td>\n<td>39.7</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b1_ap</td>\n<td>79.278 (20.722)</td>\n<td>94.308 (5.692)</td>\n<td>7.79</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b1 *tfp</td>\n<td>79.172 (20.828)</td>\n<td>94.450 (5.550)</td>\n<td>7.79</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>gluon_resnet50_v1d</td>\n<td>79.074 (20.926)</td>\n<td>94.476 (5.524)</td>\n<td>25.58</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_em *tfp</td>\n<td>78.958 (21.042)</td>\n<td>94.458 (5.542)</td>\n<td>6.90</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>tf_mixnet_l *tfp</td>\n<td>78.846 (21.154)</td>\n<td>94.212 (5.788)</td>\n<td>7.33</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b1</td>\n<td>78.826 (21.174)</td>\n<td>94.198 (5.802)</td>\n<td>7.79</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b0_ns *tfp</td>\n<td>78.806 (21.194)</td>\n<td>94.496 (5.504)</td>\n<td>5.29</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_inception_v3</td>\n<td>78.804 (21.196)</td>\n<td>94.380 (5.620)</td>\n<td>27.16M</td>\n<td>bicubic</td>\n<td>299</td>\n</tr>\n<tr>\n<td>tf_mixnet_l</td>\n<td>78.770 (21.230)</td>\n<td>94.004 (5.996)</td>\n<td>7.33</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_em</td>\n<td>78.742 (21.258)</td>\n<td>94.332 (5.668)</td>\n<td>6.90</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>gluon_resnet50_v1s</td>\n<td>78.712 (21.288)</td>\n<td>94.242 (5.758)</td>\n<td>25.68</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b0_ns</td>\n<td>78.658 (21.342)</td>\n<td>94.376 (5.624)</td>\n<td>5.29</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_cc_b0_8e *tfp</td>\n<td>78.314 (21.686)</td>\n<td>93.790 (6.210)</td>\n<td>24.0</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_resnet50_v1c</td>\n<td>78.010 (21.990)</td>\n<td>93.988 (6.012)</td>\n<td>25.58</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_cc_b0_8e</td>\n<td>77.908 (22.092)</td>\n<td>93.656 (6.344)</td>\n<td>24.0</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_inception_v3</td>\n<td>77.856 (22.144)</td>\n<td>93.644 (6.356)</td>\n<td>27.16M</td>\n<td>bicubic</td>\n<td>299</td>\n</tr>\n<tr>\n<td>tf_efficientnet_cc_b0_4e *tfp</td>\n<td>77.746 (22.254)</td>\n<td>93.552 (6.448)</td>\n<td>13.3</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_es *tfp</td>\n<td>77.616 (22.384)</td>\n<td>93.750 (6.250)</td>\n<td>5.44</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_resnet50_v1b</td>\n<td>77.578 (22.422)</td>\n<td>93.718 (6.282)</td>\n<td>25.56</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>adv_inception_v3</td>\n<td>77.576 (22.424)</td>\n<td>93.724 (6.276)</td>\n<td>27.16M</td>\n<td>bicubic</td>\n<td>299</td>\n</tr>\n<tr>\n<td>tf_efficientnet_lite2 *tfp</td>\n<td>77.544 (22.456)</td>\n<td>93.800 (6.200)</td>\n<td>6.09</td>\n<td>bilinear</td>\n<td>260</td>\n</tr>\n<tr>\n<td>tf_efficientnet_lite2</td>\n<td>77.460 (22.540)</td>\n<td>93.746 (6.254)</td>\n<td>6.09</td>\n<td>bicubic</td>\n<td>260</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b0_ap *tfp</td>\n<td>77.514 (22.486)</td>\n<td>93.576 (6.424)</td>\n<td>5.29</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_cc_b0_4e</td>\n<td>77.304 (22.696)</td>\n<td>93.332 (6.668)</td>\n<td>13.3</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_es</td>\n<td>77.264 (22.736)</td>\n<td>93.600 (6.400)</td>\n<td>5.44</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b0 *tfp</td>\n<td>77.258 (22.742)</td>\n<td>93.478 (6.522)</td>\n<td>5.29</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b0_ap</td>\n<td>77.084 (22.916)</td>\n<td>93.254 (6.746)</td>\n<td>5.29</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mixnet_m *tfp</td>\n<td>77.072 (22.928)</td>\n<td>93.368 (6.632)</td>\n<td>5.01</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mixnet_m</td>\n<td>76.950 (23.050)</td>\n<td>93.156 (6.844)</td>\n<td>5.01</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_b0</td>\n<td>76.848 (23.152)</td>\n<td>93.228 (6.772)</td>\n<td>5.29</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_lite1 *tfp</td>\n<td>76.764 (23.236)</td>\n<td>93.326 (6.674)</td>\n<td>5.42</td>\n<td>bilinear</td>\n<td>240</td>\n</tr>\n<tr>\n<td>tf_efficientnet_lite1</td>\n<td>76.638 (23.362)</td>\n<td>93.232 (6.768)</td>\n<td>5.42</td>\n<td>bicubic</td>\n<td>240</td>\n</tr>\n<tr>\n<td>tf_mixnet_s *tfp</td>\n<td>75.800 (24.200)</td>\n<td>92.788 (7.212)</td>\n<td>4.13</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_large_100 *tfp</td>\n<td>75.768 (24.232)</td>\n<td>92.710 (7.290)</td>\n<td>5.48</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mixnet_s</td>\n<td>75.648 (24.352)</td>\n<td>92.636 (7.364)</td>\n<td>4.13</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_large_100</td>\n<td>75.516 (24.484)</td>\n<td>92.600 (7.400)</td>\n<td>5.48</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_lite0 *tfp</td>\n<td>75.074 (24.926)</td>\n<td>92.314 (7.686)</td>\n<td>4.65</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_efficientnet_lite0</td>\n<td>74.842 (25.158)</td>\n<td>92.170 (7.830)</td>\n<td>4.65</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>gluon_resnet34_v1b</td>\n<td>74.580 (25.420)</td>\n<td>91.988 (8.012)</td>\n<td>21.80</td>\n<td>bicubic</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_large_075 *tfp</td>\n<td>73.730 (26.270)</td>\n<td>91.616 (8.384)</td>\n<td>3.99</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_large_075</td>\n<td>73.442 (26.558)</td>\n<td>91.352 (8.648)</td>\n<td>3.99</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_large_minimal_100 *tfp</td>\n<td>72.678 (27.322)</td>\n<td>90.860 (9.140)</td>\n<td>3.92</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_large_minimal_100</td>\n<td>72.244 (27.756)</td>\n<td>90.636 (9.364)</td>\n<td>3.92</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_small_100 *tfp</td>\n<td>67.918 (32.082)</td>\n<td>87.958 (12.042</td>\n<td>2.54</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_small_100</td>\n<td>67.918 (32.082)</td>\n<td>87.662 (12.338)</td>\n<td>2.54</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_small_075 *tfp</td>\n<td>66.142 (33.858)</td>\n<td>86.498 (13.502)</td>\n<td>2.04</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_small_075</td>\n<td>65.718 (34.282)</td>\n<td>86.136 (13.864)</td>\n<td>2.04</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_small_minimal_100 *tfp</td>\n<td>63.378 (36.622)</td>\n<td>84.802 (15.198)</td>\n<td>2.04</td>\n<td>bilinear</td>\n<td>224</td>\n</tr>\n<tr>\n<td>tf_mobilenetv3_small_minimal_100</td>\n<td>62.898 (37.102)</td>\n<td>84.230 (15.770)</td>\n<td>2.04</td>\n<td>bilinear</td>\n<td>224</td>\n</tr></tbody></table>\n<p>Models with <code>*tfp</code> next to them were scored with <code>--tf-preprocessing</code> flag.</p>\n<p>The <code>tf_efficientnet</code>, <code>tf_mixnet</code> models require an equivalent for 'SAME' padding as their arch results in asymmetric padding. I've added this in the model creation wrapper, but it does come with a performance penalty.</p>\n<p>Sources for original weights:</p>\n<ul>\n<li><code>tf_efficientnet*</code>: <a href=\"https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet\" rel=\"nofollow\">Tensorflow TPU</a></li>\n<li><code>tf_efficientnet_e*</code>: <a href=\"https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet/edgetpu\" rel=\"nofollow\">Tensorflow TPU</a></li>\n<li><code>tf_mixnet*</code>: <a href=\"https://github.com/tensorflow/tpu/tree/master/models/official/mnasnet/mixnet\" rel=\"nofollow\">Tensorflow TPU</a></li>\n<li><code>tf_inception*</code>: <a href=\"https://github.com/tensorflow/models/tree/master/research/slim\" rel=\"nofollow\">Tensorflow Slim</a></li>\n<li><code>gluon_*</code>: <a href=\"https://gluon-cv.mxnet.io/model_zoo/classification.html\" rel=\"nofollow\">MxNet Gluon</a></li>\n</ul>\n<h2>Training Hyperparameters</h2>\n<h3>EfficientNet-B2 with RandAugment - 80.4 top-1, 95.1 top-5</h3>\n<p>These params are for dual Titan RTX cards with NVIDIA Apex installed:</p>\n<p><code>./distributed_train.sh 2 /imagenet/ --model efficientnet_b2 -b 128 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.3 --drop-connect 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .016</code></p>\n<h3>MixNet-XL with RandAugment - 80.5 top-1, 94.9 top-5</h3>\n<p>This params are for dual Titan RTX cards with NVIDIA Apex installed:</p>\n<p><code>./distributed_train.sh 2 /imagenet/ --model mixnet_xl -b 128 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .969 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.3 --drop-connect 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.3 --amp --lr .016 --dist-bn reduce</code></p>\n<h3>SE-ResNeXt-26-D and SE-ResNeXt-26-T</h3>\n<p>These hparams (or similar) work well for a wide range of ResNet architecture, generally a good idea to increase the epoch # as the model size increases... ie approx 180-200 for ResNe(X)t50, and 220+ for larger. Increase batch size and LR proportionally for better GPUs or with AMP enabled. These params were for 2 1080Ti cards:</p>\n<p><code>./distributed_train.sh 2 /imagenet/ --model seresnext26t_32x4d --lr 0.1 --warmup-epochs 5 --epochs 160 --weight-decay 1e-4 --sched cosine --reprob 0.4 --remode pixel -b 112</code></p>\n<h3>EfficientNet-B3 with RandAugment - 81.5 top-1, 95.7 top-5</h3>\n<p>The training of this model started with the same command line as EfficientNet-B2 w/ RA above. After almost three weeks of training the process crashed. The results weren't looking amazing so I resumed the training several times with tweaks to a few params (increase RE prob, decrease rand-aug, increase ema-decay). Nothing looked great. I ended up averaging the best checkpoints from all restarts. The result is mediocre at default res/crop but oddly performs much better with a full image test crop of 1.0.</p>\n<h3>EfficientNet-B0 with RandAugment - 77.7 top-1, 95.3 top-5</h3>\n<p><a href=\"https://github.com/michaelklachko\" rel=\"nofollow\">Michael Klachko</a> achieved these results with the command line for B2 adapted for larger batch size, with the recommended B0 dropout rate of 0.2.</p>\n<p><code>./distributed_train.sh 2 /imagenet/ --model efficientnet_b0 -b 384 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-connect 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .048</code></p>\n<h3>ResNet50 with JSD loss and RandAugment (clean + 2x RA augs) - 79.04 top-1, 94.39 top-5</h3>\n<p>Trained on two older 1080Ti cards, this took a while. Only slightly, non statistically better ImageNet validation result than my first good AugMix training of 78.99. However, these weights are more robust on tests with ImageNetV2, ImageNet-Sketch, etc. Unlike my first AugMix runs, I've enabled SplitBatchNorm, disabled random erasing on the clean split, and cranked up random erasing prob on the 2 augmented paths.</p>\n<p><code>./distributed_train.sh 2 /imagenet -b 64 --model resnet50 --sched cosine --epochs 200 --lr 0.05 --amp --remode pixel --reprob 0.6 --aug-splits 3 --aa rand-m9-mstd0.5-inc1 --resplit --split-bn --jsd --dist-bn reduce</code></p>\n<h3>EfficientNet-ES (EdgeTPU-Small) with RandAugment - 78.066 top-1, 93.926 top-5</h3>\n<p>Trained by <a href=\"https://github.com/andravin\" rel=\"nofollow\">Andrew Lavin</a> with 8 V100 cards. Model EMA was not used, final checkpoint is the average of 8 best checkpoints during training.</p>\n<p><code>./distributed_train.sh 8 /imagenet --model efficientnet_es -b 128 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-connect 0.2 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .064</code></p>\n<h3>MobileNetV3-Large-100 - 75.766 top-1, 92,542 top-5</h3>\n<p><code>./distributed_train.sh 2 /imagenet/ --model mobilenetv3_large_100 -b 512 --sched step --epochs 600 --decay-epochs 2.4 --decay-rate .973 --opt rmsproptf --opt-eps .001 -j 7 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-connect 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .064 --lr-noise 0.42 0.9</code></p>\n<h3>ResNeXt-50 32x4d w/ RandAugment - 79.762 top-1, 94.60 top-5</h3>\n<p>These params will also work well for SE-ResNeXt-50 and SK-ResNeXt-50 and likely 101. I used them for the SK-ResNeXt-50 32x4d that I trained with 2 GPU using a slightly higher LR per effective batch size (lr=0.18, b=192 per GPU). The cmd line below are tuned for 8 GPU training.</p>\n<p><code>./distributed_train.sh 8 /imagenet --model resnext50_32x4d --lr 0.6 --warmup-epochs 5 --epochs 240 --weight-decay 1e-4 --sched cosine --reprob 0.4 --recount 3 --remode pixel --aa rand-m7-mstd0.5-inc1 -b 192 -j 6 --amp --dist-bn reduce</code></p>\n<p><strong>TODO dig up some more</strong></p>\n<h2>Usage</h2>\n<h3>Environment</h3>\n<p>All development and testing has been done in Conda Python 3 environments on Linux x86-64 systems, specifically Python 3.6.x and 3.7.x. Little to no care has been taken to be Python 2.x friendly and I don't plan to support it. If you run into any challenges running on Windows, or other OS, I'm definitely open to looking into those issues so long as it's in a reproducible (read Conda) environment.</p>\n<p>PyTorch versions 1.2, 1.3.1, and 1.4 have been tested with this code.</p>\n<p>I've tried to keep the dependencies minimal, the setup is as per the PyTorch default install instructions for Conda:</p>\n<pre><code>conda create -n torch-env\nconda activate torch-env\nconda install -c pytorch pytorch torchvision cudatoolkit=10.1\nconda install pyyaml\n</code></pre>\n<h3>Pip</h3>\n<p>This package can be installed via pip. Currently, the model factory (<code>timm.create_model</code>) is the most useful component to use via a pip install.</p>\n<p>Install (after conda env/install):</p>\n<pre><code>pip install timm\n</code></pre>\n<p>Use:</p>\n<pre><code>&gt;&gt;&gt; import timm\n&gt;&gt;&gt; m = timm.create_model('mobilenetv3_100', pretrained=True)\n&gt;&gt;&gt; m.eval()\n</code></pre>\n<h3>Scripts</h3>\n<p>A train, validation, inference, and checkpoint cleaning script included in the github root folder. Scripts are not currently packaged in the pip release.</p>\n<h4>Training</h4>\n<p>The variety of training args is large and not all combinations of options (or even options) have been fully tested. For the training dataset folder, specify the folder to the base that contains a <code>train</code> and <code>validation</code> folder.</p>\n<p>To train an SE-ResNet34 on ImageNet, locally distributed, 4 GPUs, one process per GPU w/ cosine schedule, random-erasing prob of 50% and per-pixel random value:</p>\n<p><code>./distributed_train.sh 4 /data/imagenet --model seresnet34 --sched cosine --epochs 150 --warmup-epochs 5 --lr 0.4 --reprob 0.5 --remode pixel --batch-size 256 -j 4</code></p>\n<p>NOTE: NVIDIA APEX should be installed to run in per-process distributed via DDP or to enable AMP mixed precision with the --amp flag</p>\n<h4>Validation / Inference</h4>\n<p>Validation and inference scripts are similar in usage. One outputs metrics on a validation set and the other outputs topk class ids in a csv. Specify the folder containing validation images, not the base as in training script.</p>\n<p>To validate with the model's pretrained weights (if they exist):</p>\n<p><code>python validate.py /imagenet/validation/ --model seresnext26_32x4d --pretrained</code></p>\n<p>To run inference from a checkpoint:</p>\n<p><code>python inference.py /imagenet/validation/ --model mobilenetv3_100 --checkpoint ./output/model_best.pth.tar</code></p>\n<h2>TODO</h2>\n<p>A number of additions planned in the future for various projects, incl</p>\n<ul>\n<li>Do a model performance (speed + accuracy) benchmarking across all models (make runable as script)</li>\n<li>Complete feature map extraction across all model types and build obj detection/segmentation models and scripts (or integrate backbones with mmdetection, detectron2)</li>\n</ul>\n\n          </div>"}, "last_serial": 7166678, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "15309aeeb1a4057ea8dbf9a17e743134", "sha256": "bc1d6f3b1e4572074e8d4997b3a5b046833bee0b76f3eaa33a7b4032015ea3e5"}, "downloads": -1, "filename": "timm-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "15309aeeb1a4057ea8dbf9a17e743134", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 81096, "upload_time": "2019-06-21T21:09:51", "upload_time_iso_8601": "2019-06-21T21:09:51.853663Z", "url": "https://files.pythonhosted.org/packages/0f/a4/6e62a32584f70001c56a7e0351128db7874efb25a8b06931686934a855e6/timm-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1f414aff951852fdbff98cd59b34b22", "sha256": "3646fa742539e0a138c3e14ef0f20f484d5849927f493d72ac015e6254bf21f9"}, "downloads": -1, "filename": "timm-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f1f414aff951852fdbff98cd59b34b22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 63854, "upload_time": "2019-06-21T21:09:54", "upload_time_iso_8601": "2019-06-21T21:09:54.740962Z", "url": "https://files.pythonhosted.org/packages/e6/4b/d478a710e39739e6221059fc610fa781b7b375fb5fdf49ecd446e782a123/timm-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "16731673e516485d6216244d078505ff", "sha256": "34c640f8f34c9507c6c9a579d44e194b94735cd5e53f2bbd0edafb2d61352ed1"}, "downloads": -1, "filename": "timm-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "16731673e516485d6216244d078505ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 90819, "upload_time": "2019-07-26T00:02:54", "upload_time_iso_8601": "2019-07-26T00:02:54.549686Z", "url": "https://files.pythonhosted.org/packages/ce/36/9a859c4ec811d1455ccfbf9a5c21ecbabaf2cd9f9e4c0da59b97244bf9e2/timm-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5968458f9b6d11a3d7b0e63ef501c3b5", "sha256": "55b57405b451027f5464f1721be9798b14cbe5cd2591d886f1e26fe3f5d47253"}, "downloads": -1, "filename": "timm-0.1.10.tar.gz", "has_sig": false, "md5_digest": "5968458f9b6d11a3d7b0e63ef501c3b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 72209, "upload_time": "2019-07-26T00:02:56", "upload_time_iso_8601": "2019-07-26T00:02:56.427341Z", "url": "https://files.pythonhosted.org/packages/d1/66/0df9b8e19b3e55640f2db5c79fb1e0a41cbd48e35ce78dd1dd746356025f/timm-0.1.10.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "07c2a92e3e53aa8809eb9ecfc1614872", "sha256": "a91faa389aab86ebdba0a7e72db52170b64154f9b79f8d6c345caa1ad4c07b33"}, "downloads": -1, "filename": "timm-0.1.12-py3-none-any.whl", "has_sig": false, "md5_digest": "07c2a92e3e53aa8809eb9ecfc1614872", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 91149, "upload_time": "2019-08-05T18:35:43", "upload_time_iso_8601": "2019-08-05T18:35:43.842999Z", "url": "https://files.pythonhosted.org/packages/a4/d8/ba4d2bad66d97e6864abae4dfe2688e8049104712a7bb6b70dc3dc2508dc/timm-0.1.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af26ca842fc982c09a03e33971f7993e", "sha256": "a60c8c435aa38f96c1cc7fc03710964fc72c195d544dbd4327f4846b3e964add"}, "downloads": -1, "filename": "timm-0.1.12.tar.gz", "has_sig": false, "md5_digest": "af26ca842fc982c09a03e33971f7993e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 72766, "upload_time": "2019-08-05T18:35:46", "upload_time_iso_8601": "2019-08-05T18:35:46.093169Z", "url": "https://files.pythonhosted.org/packages/9d/6e/3d537d5be283c8e219302e00730abe409b595b10427447ab5094687d0d74/timm-0.1.12.tar.gz", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "5cc755d224e07dc5af819dd9700c8c12", "sha256": "9c3e136de5a31f9738e3bb492f2e20ff57eb56eefddb1fc5125d7b4211f7faf9"}, "downloads": -1, "filename": "timm-0.1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "5cc755d224e07dc5af819dd9700c8c12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 113522, "upload_time": "2019-09-18T23:50:03", "upload_time_iso_8601": "2019-09-18T23:50:03.175560Z", "url": "https://files.pythonhosted.org/packages/8c/3f/3c849040601e0fda9732eecc6799b9e6f01cbf8d8fb25bc488b620ec5699/timm-0.1.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56f35df22aa87e33e4f28a28672d475a", "sha256": "bbeaa5fd52a02e7e85532f979373c309380cebfacea468ec40ecea82c2419653"}, "downloads": -1, "filename": "timm-0.1.14.tar.gz", "has_sig": false, "md5_digest": "56f35df22aa87e33e4f28a28672d475a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 88063, "upload_time": "2019-09-18T23:50:05", "upload_time_iso_8601": "2019-09-18T23:50:05.115440Z", "url": "https://files.pythonhosted.org/packages/20/8d/f78aae20c680cb1cddc6e2f8be433aab0c63574757d4db549444fdeb68bc/timm-0.1.14.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "ca18cca8839d4bb1082ea6c34f8e93cb", "sha256": "aed4d14c09006d69d51343affc324273f53760a797c3abb6dcbc3473b12c312e"}, "downloads": -1, "filename": "timm-0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "ca18cca8839d4bb1082ea6c34f8e93cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 141685, "upload_time": "2020-02-03T19:46:44", "upload_time_iso_8601": "2020-02-03T19:46:44.021509Z", "url": "https://files.pythonhosted.org/packages/db/61/57823841acf1b5d138e3ae141269e970a21f6730d7ab9a5de673d02ee522/timm-0.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62ecf7816b0c967e6aa62bec39c687fe", "sha256": "f17ce3c2852f3c4b7750b021e13b7cae89f419a1b8bc608fbda6b5ee9b00256e"}, "downloads": -1, "filename": "timm-0.1.16.tar.gz", "has_sig": false, "md5_digest": "62ecf7816b0c967e6aa62bec39c687fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 120667, "upload_time": "2020-02-03T19:46:46", "upload_time_iso_8601": "2020-02-03T19:46:46.192379Z", "url": "https://files.pythonhosted.org/packages/04/fd/f8dec62c8e4e35a1ea1786b84575941e37d1bb29826f37bcf2ac2700da6a/timm-0.1.16.tar.gz", "yanked": false}], "0.1.18": [{"comment_text": "", "digests": {"md5": "7f2c1355a4d18485dbaf88347e16fcd7", "sha256": "1b8b4d01c2038ab96351f95d4b799e9a8b7943bd24a4a55ade55c896f3ad0970"}, "downloads": -1, "filename": "timm-0.1.18-py3-none-any.whl", "has_sig": false, "md5_digest": "7f2c1355a4d18485dbaf88347e16fcd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 158181, "upload_time": "2020-02-22T18:28:11", "upload_time_iso_8601": "2020-02-22T18:28:11.242909Z", "url": "https://files.pythonhosted.org/packages/d7/e9/dfee5381ae8e7862d8565cfc9ad7056dccbf2eefa214256da6b2fd878702/timm-0.1.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7754d017df7b45d4671b12c3e9dc7ab4", "sha256": "535810a88277a4b65b94e3fb1442564e4a54391d124a6e1860265f20e8da3b60"}, "downloads": -1, "filename": "timm-0.1.18.tar.gz", "has_sig": false, "md5_digest": "7754d017df7b45d4671b12c3e9dc7ab4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 137134, "upload_time": "2020-02-22T18:28:12", "upload_time_iso_8601": "2020-02-22T18:28:12.976664Z", "url": "https://files.pythonhosted.org/packages/05/1e/27a9e716eaa6de8f7534b6c59eca643f1b7f1e1a9c0693b36e6aff31319b/timm-0.1.18.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c9bc6afb5b9ad23c988a8c6767514876", "sha256": "5b1bf0e51e889cd0c8977327520a28dd420bdb3cf58c9beac4b2687631f3d562"}, "downloads": -1, "filename": "timm-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c9bc6afb5b9ad23c988a8c6767514876", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 82776, "upload_time": "2019-06-24T02:32:44", "upload_time_iso_8601": "2019-06-24T02:32:44.426559Z", "url": "https://files.pythonhosted.org/packages/35/d3/3fbb3a8c640323547dc0e265dfef950f7dd473411ece1f8840806455703c/timm-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88dcc436315eb42f786df2484db2aa35", "sha256": "fae7688fc93a8e7e06e8d9541c2ffb001d013198395bfef2e308d5078429712a"}, "downloads": -1, "filename": "timm-0.1.2.tar.gz", "has_sig": false, "md5_digest": "88dcc436315eb42f786df2484db2aa35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 65399, "upload_time": "2019-06-24T02:32:46", "upload_time_iso_8601": "2019-06-24T02:32:46.180618Z", "url": "https://files.pythonhosted.org/packages/f6/7f/8af6f3d89130136fcfa3c5f79f24849b1b42f9042854d9cbd798fccc739e/timm-0.1.2.tar.gz", "yanked": false}], "0.1.20": [{"comment_text": "", "digests": {"md5": "e966761007f4624efb5148b31e1a7296", "sha256": "f63fca201f637dfdd169fb187b5c2d06b8e973d537d2517667a80e57ca1bae7a"}, "downloads": -1, "filename": "timm-0.1.20-py3-none-any.whl", "has_sig": false, "md5_digest": "e966761007f4624efb5148b31e1a7296", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 161232, "upload_time": "2020-04-09T09:26:21", "upload_time_iso_8601": "2020-04-09T09:26:21.371973Z", "url": "https://files.pythonhosted.org/packages/89/26/ba294669cc5cc4d09efd1964c8df752dc0955ac26f86bdeec582aed77d1d/timm-0.1.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b066c2a860f52a0b676f17be6dc7b63", "sha256": "637bbfd88793330a74e0c8742a526b86580c360e4bfb56db781312bf51c49527"}, "downloads": -1, "filename": "timm-0.1.20.tar.gz", "has_sig": false, "md5_digest": "3b066c2a860f52a0b676f17be6dc7b63", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 142245, "upload_time": "2020-04-09T09:26:23", "upload_time_iso_8601": "2020-04-09T09:26:23.361090Z", "url": "https://files.pythonhosted.org/packages/e8/c5/5791da32e15ae29560525afcf6e3134db8bfef8ff84955f2847cd14456cc/timm-0.1.20.tar.gz", "yanked": false}], "0.1.22": [{"comment_text": "", "digests": {"md5": "cf5de1d51dcb9b30380f6340b696616b", "sha256": "431d7ea0e1924b34aaf43f228cbe4f6702adedc10fb6978b94b35f335f0a7f6e"}, "downloads": -1, "filename": "timm-0.1.22-py3-none-any.whl", "has_sig": false, "md5_digest": "cf5de1d51dcb9b30380f6340b696616b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 166825, "upload_time": "2020-04-28T01:08:15", "upload_time_iso_8601": "2020-04-28T01:08:15.430852Z", "url": "https://files.pythonhosted.org/packages/7d/26/27d9a69b71f5fde266aad4e17cacedb8707e3f13b054f0728719301da9f1/timm-0.1.22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6b87bb395b7b732782dcc8c37b8d05a", "sha256": "f49b4b1f0872dd0aedb159eb016a277692933e3afdd63bca54d6c9d1ef38f948"}, "downloads": -1, "filename": "timm-0.1.22.tar.gz", "has_sig": false, "md5_digest": "c6b87bb395b7b732782dcc8c37b8d05a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 145619, "upload_time": "2020-04-28T01:08:17", "upload_time_iso_8601": "2020-04-28T01:08:17.183464Z", "url": "https://files.pythonhosted.org/packages/28/83/12e2b98194c7ab94868874916b46c7d5a727ba99ac8fe7bf69d5c5fd29f3/timm-0.1.22.tar.gz", "yanked": false}], "0.1.24": [{"comment_text": "", "digests": {"md5": "ef5973acff84f4467b30cd3f17cf5ae0", "sha256": "9450bd6c2e9dc5e20f5a8642c862504f83010d3b65403b75ea13140b613d18dd"}, "downloads": -1, "filename": "timm-0.1.24-py3-none-any.whl", "has_sig": false, "md5_digest": "ef5973acff84f4467b30cd3f17cf5ae0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 179197, "upload_time": "2020-05-04T04:19:49", "upload_time_iso_8601": "2020-05-04T04:19:49.847103Z", "url": "https://files.pythonhosted.org/packages/89/3e/f705aba11c652bde677f464399e025b1f0c5121137820e22a57da22b9a8d/timm-0.1.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69f0ec635d2d7adf174dc629d5dd6f29", "sha256": "0258f8b61caedf107a7c2c8ef60984362077b480ceeda44c6380ccd5421a1378"}, "downloads": -1, "filename": "timm-0.1.24.tar.gz", "has_sig": false, "md5_digest": "69f0ec635d2d7adf174dc629d5dd6f29", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 158170, "upload_time": "2020-05-04T04:19:51", "upload_time_iso_8601": "2020-05-04T04:19:51.505346Z", "url": "https://files.pythonhosted.org/packages/f2/61/e090e386289209eca8b3a70c4abd3856c56ff503b1ac5d35de42118a1279/timm-0.1.24.tar.gz", "yanked": false}], "0.1.26": [{"comment_text": "", "digests": {"md5": "56f39371ee4b6d5f10724ee1bd612819", "sha256": "2872f90285a16213d0476ac2b4c7de7487901a32fadc9e7ebe0dff290f4e8476"}, "downloads": -1, "filename": "timm-0.1.26-py3-none-any.whl", "has_sig": false, "md5_digest": "56f39371ee4b6d5f10724ee1bd612819", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 179325, "upload_time": "2020-05-04T19:16:02", "upload_time_iso_8601": "2020-05-04T19:16:02.710045Z", "url": "https://files.pythonhosted.org/packages/44/c7/b1ce15cfca60d10d069dafbc2138761940f73b691496fd998a680f04dad1/timm-0.1.26-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a832a344ac62f9e816c18f9da01c158e", "sha256": "b7a7061885bd2797603fb6482f2337be9e6ba4199edac624a8b27aa5612fca77"}, "downloads": -1, "filename": "timm-0.1.26.tar.gz", "has_sig": false, "md5_digest": "a832a344ac62f9e816c18f9da01c158e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 158377, "upload_time": "2020-05-04T19:16:04", "upload_time_iso_8601": "2020-05-04T19:16:04.711427Z", "url": "https://files.pythonhosted.org/packages/ff/fd/133e2f70e4296bafcfe0fd04307a91de32dcdd4215876203a9702e1cd7a5/timm-0.1.26.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "4ed8a33ccaebaabdf1db84a351b151d8", "sha256": "e3d132e588bbed954eeee96d57b75a8d92e5f29434d1a4a04168554deeef25c1"}, "downloads": -1, "filename": "timm-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4ed8a33ccaebaabdf1db84a351b151d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 83902, "upload_time": "2019-06-30T00:06:11", "upload_time_iso_8601": "2019-06-30T00:06:11.052205Z", "url": "https://files.pythonhosted.org/packages/0a/6c/7b60d9bdd9a28220a0cf2d7f7d993d26b477c35b37b077823eb1c7179c61/timm-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ae6d8b86fc29604da3d1eb37be47578", "sha256": "0cb67bc6f59f7a300014830ba4af75eba9581da6d3d7c66ba84dc4126d4ae119"}, "downloads": -1, "filename": "timm-0.1.4.tar.gz", "has_sig": false, "md5_digest": "0ae6d8b86fc29604da3d1eb37be47578", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 66586, "upload_time": "2019-06-30T00:06:12", "upload_time_iso_8601": "2019-06-30T00:06:12.980842Z", "url": "https://files.pythonhosted.org/packages/b4/da/1bf2cc649b18ed1c7469766f61064f8b655d99c24a7d4f54b8b9f0b8954e/timm-0.1.4.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "1bf2287f9b47e7f7203a8bce9799e3d5", "sha256": "feb0812d57563d6e2a50bf411f0c3e2743b01d2763389f037c97963b67bd8ddf"}, "downloads": -1, "filename": "timm-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1bf2287f9b47e7f7203a8bce9799e3d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 83893, "upload_time": "2019-06-30T16:59:16", "upload_time_iso_8601": "2019-06-30T16:59:16.026242Z", "url": "https://files.pythonhosted.org/packages/1e/87/7de9e1175bda1151de177198bb2e99ac78cf0bdf97309b19f6d22b215b79/timm-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a607790d465cc7ab27e7048f70ec133a", "sha256": "b8df721056756e0b3f7d48dfc6170b0c6f5e814b0e33e12dd3cc8f702d9e3818"}, "downloads": -1, "filename": "timm-0.1.6.tar.gz", "has_sig": false, "md5_digest": "a607790d465cc7ab27e7048f70ec133a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 66601, "upload_time": "2019-06-30T16:59:18", "upload_time_iso_8601": "2019-06-30T16:59:18.004175Z", "url": "https://files.pythonhosted.org/packages/b5/bb/d557e6604737894956e00639b2806027d8e57cfbf97a2ebcd0bcd0d6a42e/timm-0.1.6.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "186220e45b6ab5039c4892156ba0cc8e", "sha256": "f9a8acebf2ffb1f4b1c790d006c07ca8afb33f8704e8faf0471bacc07c01534d"}, "downloads": -1, "filename": "timm-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "186220e45b6ab5039c4892156ba0cc8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 87223, "upload_time": "2019-07-05T20:54:13", "upload_time_iso_8601": "2019-07-05T20:54:13.208420Z", "url": "https://files.pythonhosted.org/packages/9e/78/a7979705cb3b17315c84e92dc09ff91123831916bbd80096483d4f982122/timm-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4daef312ceb591d3be6e369468cab7dc", "sha256": "8d55fc70bfccd596cd8b085152fd03a44b0509cb512df831834e66233f28b25d"}, "downloads": -1, "filename": "timm-0.1.8.tar.gz", "has_sig": false, "md5_digest": "4daef312ceb591d3be6e369468cab7dc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 68844, "upload_time": "2019-07-05T20:54:15", "upload_time_iso_8601": "2019-07-05T20:54:15.061816Z", "url": "https://files.pythonhosted.org/packages/6b/cf/5f46710e1b5e69ba8e16d511aad2c5d0ca4bebef61f806aa8e75a4536b68/timm-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "56f39371ee4b6d5f10724ee1bd612819", "sha256": "2872f90285a16213d0476ac2b4c7de7487901a32fadc9e7ebe0dff290f4e8476"}, "downloads": -1, "filename": "timm-0.1.26-py3-none-any.whl", "has_sig": false, "md5_digest": "56f39371ee4b6d5f10724ee1bd612819", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 179325, "upload_time": "2020-05-04T19:16:02", "upload_time_iso_8601": "2020-05-04T19:16:02.710045Z", "url": "https://files.pythonhosted.org/packages/44/c7/b1ce15cfca60d10d069dafbc2138761940f73b691496fd998a680f04dad1/timm-0.1.26-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a832a344ac62f9e816c18f9da01c158e", "sha256": "b7a7061885bd2797603fb6482f2337be9e6ba4199edac624a8b27aa5612fca77"}, "downloads": -1, "filename": "timm-0.1.26.tar.gz", "has_sig": false, "md5_digest": "a832a344ac62f9e816c18f9da01c158e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 158377, "upload_time": "2020-05-04T19:16:04", "upload_time_iso_8601": "2020-05-04T19:16:04.711427Z", "url": "https://files.pythonhosted.org/packages/ff/fd/133e2f70e4296bafcfe0fd04307a91de32dcdd4215876203a9702e1cd7a5/timm-0.1.26.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:17 2020"}