{"info": {"author": "Chris Borrill", "author_email": "chris.borrill@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: System :: Hardware :: Hardware Drivers"], "description": "Raspberry Pi Python Library for Voltage and Current Sensors Using the INA219\n============================================================================\n\n`Build Status <https://travis-ci.org/chrisb2/pi_ina219>`__\n\n`codecov <https://codecov.io/gh/chrisb2/pi_ina219>`__\n\n`PyPI version <https://badge.fury.io/py/pi-ina219>`__\n\nThis Python library supports the\n`INA219 <http://www.ti.com/lit/ds/symlink/ina219.pdf>`__ voltage,\ncurrent and power monitor sensor from Texas Instruments on both Python 2\nand 3. The intent of the library is to make it easy to use the quite\ncomplex functionality of this sensor.\n\nThe library currently only supports *continuous* reads of voltage and\npower, but not *triggered* reads.\n\nThe library supports the detection of *overflow* in the current/power\ncalculations which results in meaningless values for these readings.\n\nThe low power mode of the INA219 is supported, so if only occasional\nreads are being made in a battery based system, current consumption can\nbe minimised.\n\nThe library has been tested with the `Adafruit INA219\nBreakout <https://www.adafruit.com/products/904>`__.\n\nInstallation and Upgrade\n------------------------\n\nThis library and its dependency (`Adafruit GPIO\nlibrary <https://github.com/adafruit/Adafruit_Python_GPIO>`__) can be\ninstalled from PyPI by executing:\n\n.. code:: shell\n\n   sudo pip3 install pi-ina219\n\nTo upgrade from a previous version installed direct from Github execute:\n\n.. code:: shell\n\n   sudo pip3 uninstall pi-ina219\n   sudo pip3 install pi-ina219\n\nThe Adafruit library supports the I2C protocol on all versions of the\nRaspberry Pi. Remember to enable the I2C bus under the *Advanced\nOptions* of *raspi-config*.\n\nUsage\n-----\n\nThe address of the sensor unless otherwise specified is the default of\n*0x40*.\n\nNote that the bus voltage is that on the load side of the shunt\nresistor, if you want the voltage on the supply side then you should add\nthe bus voltage and shunt voltage together, or use the\n*supply_voltage()* function.\n\nSimple - Auto Gain\n~~~~~~~~~~~~~~~~~~\n\nThis mode is great for getting started, as it will provide valid\nreadings until the device current capability is exceeded for the value\nof the shunt resistor connected (3.2A for 0.1\u03a9 shunt resistor). It does\nthis by automatically adjusting the gain as required until the maximum\nis reached, when a *DeviceRangeError* exception is thrown to avoid\ninvalid readings being taken.\n\nThe downside of this approach is reduced current and power resolution.\n\n.. code:: python\n\n   #!/usr/bin/env python\n   from ina219 import INA219\n   from ina219 import DeviceRangeError\n\n   SHUNT_OHMS = 0.1\n\n\n   def read():\n       ina = INA219(SHUNT_OHMS)\n       ina.configure()\n\n       print(\"Bus Voltage: %.3f V\" % ina.voltage())\n       try:\n           print(\"Bus Current: %.3f mA\" % ina.current())\n           print(\"Power: %.3f mW\" % ina.power())\n           print(\"Shunt voltage: %.3f mV\" % ina.shunt_voltage())\n       except DeviceRangeError as e:\n           # Current out of device range with specified shunt resistor\n           print(e)\n\n\n   if __name__ == \"__main__\":\n       read()\n\nAdvanced - Auto Gain, High Resolution\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn this mode by understanding the maximum current expected in your\nsystem and specifying this in the script you can achieve the best\npossible current and power resolution. The library will calculate the\nbest gain to achieve the highest resolution based on the maximum\nexpected current.\n\nIn this mode if the current exceeds the maximum specified, the gain will\nbe automatically increased, so a valid reading will still result, but at\na lower resolution.\n\nAs above when the maximum gain is reached, an exception is thrown to\navoid invalid readings being taken.\n\n.. code:: python\n\n   #!/usr/bin/env python\n   from ina219 import INA219\n   from ina219 import DeviceRangeError\n\n   SHUNT_OHMS = 0.1\n   MAX_EXPECTED_AMPS = 0.2\n\n\n   def read():\n       ina = INA219(SHUNT_OHMS, MAX_EXPECTED_AMPS)\n       ina.configure(ina.RANGE_16V)\n\n       print(\"Bus Voltage: %.3f V\" % ina.voltage())\n       try:\n           print(\"Bus Current: %.3f mA\" % ina.current())\n           print(\"Power: %.3f mW\" % ina.power())\n           print(\"Shunt voltage: %.3f mV\" % ina.shunt_voltage())\n       except DeviceRangeError as e:\n           # Current out of device range with specified shunt resistor\n           print(e)\n\n\n   if __name__ == \"__main__\":\n       read()\n\nAdvanced - Manual Gain, High Resolution\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn this mode by understanding the maximum current expected in your\nsystem and specifying this and the gain in the script you can always\nachieve the best possible current and power resolution, at the price of\nmissing current and power values if a current overflow occurs.\n\n.. code:: python\n\n   #!/usr/bin/env python\n   from ina219 import INA219\n   from ina219 import DeviceRangeError\n\n   SHUNT_OHMS = 0.1\n   MAX_EXPECTED_AMPS = 0.2\n\n\n   def read():\n       ina = INA219(SHUNT_OHMS, MAX_EXPECTED_AMPS)\n       ina.configure(ina.RANGE_16V, ina.GAIN_1_40MV)\n\n       print(\"Bus Voltage: %.3f V\" % ina.voltage())\n       try:\n           print(\"Bus Current: %.3f mA\" % ina.current())\n           print(\"Power: %.3f mW\" % ina.power())\n           print(\"Shunt voltage: %.3f mV\" % ina.shunt_voltage())\n       except DeviceRangeError as e:\n           print(\"Current overflow\")\n\n\n   if __name__ == \"__main__\":\n       read()\n\nSensor Address\n~~~~~~~~~~~~~~\n\nThe sensor address may be altered as follows:\n\n.. code:: python\n\n   ina = INA219(SHUNT_OHMS, MAX_EXPECTED_AMPS, address=0x41)\n\nLow Power Mode\n~~~~~~~~~~~~~~\n\nThe sensor may be put in low power mode between reads as follows:\n\n.. code:: python\n\n   ina.configure(ina.RANGE_16V)\n   while True:\n       print(\"Voltage : %.3f V\" % ina.voltage())\n       ina.sleep()\n       time.sleep(60)\n       ina.wake()\n\nNote that if you do not wake the device after sleeping, the value\nreturned from a read will be the previous value taken before sleeping.\n\nFunctions\n---------\n\n-  ``INA219()`` constructs the class. The arguments, are: \\_ shunt_ohms:\n   The value of the shunt resistor in Ohms (mandatory). \\_\n   max*expected_amps: The maximum expected current in Amps (optional).\n\n   -  busnum: The I2C bus number for the device platform, defaults to\n      *auto detects 0 or 1 for Raspberry Pi or Beaglebone Black*\n      (optional).\n   -  address: The I2C address of the INA219, defaults to *0x40*\n      (optional). \\* log\\ *level: Set to \\_logging.INFO\\* to see the\n      detailed calibration calculations and \\_logging.DEBUG* to see\n      register operations (optional).\n\n-  ``configure()`` configures and calibrates how the INA219 will take\n   measurements. The arguments, which are all optional, are: \\_\n   voltage_range: The full scale voltage range, this is either 16V or\n   32V, represented by one of the following constants (optional). \\_\n   RANGE*16V: Range zero to 16 volts\n\n   -  RANGE*32V: Range zero to 32 volts (**default**). **Device only\n      supports up to 26V.**\n\n   -  gain: The gain, which controls the maximum range of the shunt\n      voltage, represented by one of the following constants (optional).\n      \\_ GAIN_1_40MV: Maximum shunt voltage 40mV \\_ GAIN*2_80MV: Maximum\n      shunt voltage 80mV\n   -  GAIN*4_160MV: Maximum shunt voltage 160mV\n   -  GAIN*8_320MV: Maximum shunt voltage 320mV\n   -  GAIN*AUTO: Automatically calculate the gain (**default**)\n   -  bus*adc: The bus ADC resolution (9, 10, 11, or 12-bit), or set the\n      number of samples used when averaging results, represented by one\n      of the following constants (optional).\n   -  ADC*9BIT: 9 bit, conversion time 84us.\n   -  ADC*10BIT: 10 bit, conversion time 148us.\n   -  ADC*11BIT: 11 bit, conversion time 276us.\n   -  ADC*12BIT: 12 bit, conversion time 532us (**default**).\n   -  ADC*2SAMP: 2 samples at 12 bit, conversion time 1.06ms.\n   -  ADC*4SAMP: 4 samples at 12 bit, conversion time 2.13ms.\n   -  ADC*8SAMP: 8 samples at 12 bit, conversion time 4.26ms.\n   -  ADC*16SAMP: 16 samples at 12 bit, conversion time 8.51ms\n   -  ADC*32SAMP: 32 samples at 12 bit, conversion time 17.02ms.\n   -  ADC*64SAMP: 64 samples at 12 bit, conversion time 34.05ms.\n   -  ADC*128SAMP: 128 samples at 12 bit, conversion time 68.10ms.\n   -  shunt*adc: The shunt ADC resolution (9, 10, 11, or 12-bit), or set\n      the number of samples used when averaging results, represented by\n      one of the following constants (optional).\n   -  ADC*9BIT: 9 bit, conversion time 84us.\n   -  ADC*10BIT: 10 bit, conversion time 148us.\n   -  ADC*11BIT: 11 bit, conversion time 276us.\n   -  ADC*12BIT: 12 bit, conversion time 532us (**default**).\n   -  ADC*2SAMP: 2 samples at 12 bit, conversion time 1.06ms.\n   -  ADC*4SAMP: 4 samples at 12 bit, conversion time 2.13ms.\n   -  ADC*8SAMP: 8 samples at 12 bit, conversion time 4.26ms.\n   -  ADC*16SAMP: 16 samples at 12 bit, conversion time 8.51ms\n   -  ADC*32SAMP: 32 samples at 12 bit, conversion time 17.02ms.\n   -  ADC_64SAMP: 64 samples at 12 bit, conversion time 34.05ms. \\*\n      ADC_128SAMP: 128 samples at 12 bit, conversion time 68.10ms.\n\n-  ``voltage()`` Returns the bus voltage in volts (V).\n-  ``supply_voltage()`` Returns the bus supply voltage in volts (V).\n   This is the sum of the bus voltage and shunt voltage. A\n   *DeviceRangeError* exception is thrown if current overflow occurs.\n-  ``current()`` Returns the bus current in milliamps (mA). A\n   *DeviceRangeError* exception is thrown if current overflow occurs.\n-  ``power()`` Returns the bus power consumption in milliwatts (mW). A\n   *DeviceRangeError* exception is thrown if current overflow occurs.\n-  ``shunt_voltage()`` Returns the shunt voltage in millivolts (mV). A\n   *DeviceRangeError* exception is thrown if current overflow occurs.\n-  ``current_overflow()`` Returns \u2018True\u2019 if an overflow has occured.\n   Alternatively handle the *DeviceRangeError* exception as shown in the\n   examples above.\n-  ``sleep()`` Put the INA219 into power down mode.\n-  ``wake()`` Wake the INA219 from power down mode.\n-  ``reset()`` Reset the INA219 to its default configuration.\n\nPerformance\n-----------\n\nOn a Raspberry Pi 2 Model B running Raspbian Jesse and reading a 12-bit\nvoltage in a loop, a read occurred approximately every 10 milliseconds.\n\nDebugging\n---------\n\nTo understand the calibration calculation results and automatic gain\nincreases, informational output can be enabled with:\n\n.. code:: python\n\n       ina = INA219(SHUNT_OHMS, log_level=logging.INFO)\n\nDetailed logging of device register operations can be enabled with:\n\n.. code:: python\n\n       ina = INA219(SHUNT_OHMS, log_level=logging.DEBUG)\n\nTesting\n-------\n\nInstall the library as described above, this will install all the\ndependencies required for the unit tests, as well as the library itself.\nClone the library source from Github then execute the test suite from\nthe top level directory with:\n\n.. code:: shell\n\n   python3 -m unittest discover -s tests -p 'test_*.py'\n\nA single unit test class may be run as follows:\n\n.. code:: shell\n\n   python3 -m unittest tests.test_configuration.TestConfiguration\n\nCode coverage metrics may be generated and viewed with:\n\n.. code:: shell\n\n   coverage run --branch --source=ina219 -m unittest discover -s tests -p 'test_*.py'\n   coverage report -m\n\nCoding Standard\n---------------\n\nThis library adheres to the *PEP8* standard and follows the *idiomatic*\nstyle described in the book *Writing Idiomatic Python* by *Jeff Knupp*.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chrisb2/pi_ina219/", "keywords": "ina219 raspberrypi", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pi-ina219", "package_url": "https://pypi.org/project/pi-ina219/", "platform": "", "project_url": "https://pypi.org/project/pi-ina219/", "project_urls": {"Homepage": "https://github.com/chrisb2/pi_ina219/"}, "release_url": "https://pypi.org/project/pi-ina219/1.3.0/", "requires_dist": ["Adafruit-GPIO", "mock"], "requires_python": "", "summary": "This Python library for Raspberry Pi makes it easy to leverage the complex functionality of the Texas Instruments INA219 sensor to measure voltage, current and power.", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/chrisb2/pi_ina219\" rel=\"nofollow\">Build Status</a></p>\n<p><a href=\"https://codecov.io/gh/chrisb2/pi_ina219\" rel=\"nofollow\">codecov</a></p>\n<p><a href=\"https://badge.fury.io/py/pi-ina219\" rel=\"nofollow\">PyPI version</a></p>\n<p>This Python library supports the\n<a href=\"http://www.ti.com/lit/ds/symlink/ina219.pdf\" rel=\"nofollow\">INA219</a> voltage,\ncurrent and power monitor sensor from Texas Instruments on both Python 2\nand 3. The intent of the library is to make it easy to use the quite\ncomplex functionality of this sensor.</p>\n<p>The library currently only supports <em>continuous</em> reads of voltage and\npower, but not <em>triggered</em> reads.</p>\n<p>The library supports the detection of <em>overflow</em> in the current/power\ncalculations which results in meaningless values for these readings.</p>\n<p>The low power mode of the INA219 is supported, so if only occasional\nreads are being made in a battery based system, current consumption can\nbe minimised.</p>\n<p>The library has been tested with the <a href=\"https://www.adafruit.com/products/904\" rel=\"nofollow\">Adafruit INA219\nBreakout</a>.</p>\n<div id=\"installation-and-upgrade\">\n<h2>Installation and Upgrade</h2>\n<p>This library and its dependency (<a href=\"https://github.com/adafruit/Adafruit_Python_GPIO\" rel=\"nofollow\">Adafruit GPIO\nlibrary</a>) can be\ninstalled from PyPI by executing:</p>\n<pre>sudo pip3 install pi-ina219\n</pre>\n<p>To upgrade from a previous version installed direct from Github execute:</p>\n<pre>sudo pip3 uninstall pi-ina219\nsudo pip3 install pi-ina219\n</pre>\n<p>The Adafruit library supports the I2C protocol on all versions of the\nRaspberry Pi. Remember to enable the I2C bus under the <em>Advanced\nOptions</em> of <em>raspi-config</em>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The address of the sensor unless otherwise specified is the default of\n<em>0x40</em>.</p>\n<p>Note that the bus voltage is that on the load side of the shunt\nresistor, if you want the voltage on the supply side then you should add\nthe bus voltage and shunt voltage together, or use the\n<em>supply_voltage()</em> function.</p>\n<div id=\"simple-auto-gain\">\n<h3>Simple - Auto Gain</h3>\n<p>This mode is great for getting started, as it will provide valid\nreadings until the device current capability is exceeded for the value\nof the shunt resistor connected (3.2A for 0.1\u03a9 shunt resistor). It does\nthis by automatically adjusting the gain as required until the maximum\nis reached, when a <em>DeviceRangeError</em> exception is thrown to avoid\ninvalid readings being taken.</p>\n<p>The downside of this approach is reduced current and power resolution.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ina219</span> <span class=\"kn\">import</span> <span class=\"n\">INA219</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ina219</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceRangeError</span>\n\n<span class=\"n\">SHUNT_OHMS</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">():</span>\n    <span class=\"n\">ina</span> <span class=\"o\">=</span> <span class=\"n\">INA219</span><span class=\"p\">(</span><span class=\"n\">SHUNT_OHMS</span><span class=\"p\">)</span>\n    <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Bus Voltage: </span><span class=\"si\">%.3f</span><span class=\"s2\"> V\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">voltage</span><span class=\"p\">())</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Bus Current: </span><span class=\"si\">%.3f</span><span class=\"s2\"> mA\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Power: </span><span class=\"si\">%.3f</span><span class=\"s2\"> mW\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Shunt voltage: </span><span class=\"si\">%.3f</span><span class=\"s2\"> mV\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">shunt_voltage</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"n\">DeviceRangeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Current out of device range with specified shunt resistor</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"advanced-auto-gain-high-resolution\">\n<h3>Advanced - Auto Gain, High Resolution</h3>\n<p>In this mode by understanding the maximum current expected in your\nsystem and specifying this in the script you can achieve the best\npossible current and power resolution. The library will calculate the\nbest gain to achieve the highest resolution based on the maximum\nexpected current.</p>\n<p>In this mode if the current exceeds the maximum specified, the gain will\nbe automatically increased, so a valid reading will still result, but at\na lower resolution.</p>\n<p>As above when the maximum gain is reached, an exception is thrown to\navoid invalid readings being taken.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ina219</span> <span class=\"kn\">import</span> <span class=\"n\">INA219</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ina219</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceRangeError</span>\n\n<span class=\"n\">SHUNT_OHMS</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">MAX_EXPECTED_AMPS</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">():</span>\n    <span class=\"n\">ina</span> <span class=\"o\">=</span> <span class=\"n\">INA219</span><span class=\"p\">(</span><span class=\"n\">SHUNT_OHMS</span><span class=\"p\">,</span> <span class=\"n\">MAX_EXPECTED_AMPS</span><span class=\"p\">)</span>\n    <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">RANGE_16V</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Bus Voltage: </span><span class=\"si\">%.3f</span><span class=\"s2\"> V\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">voltage</span><span class=\"p\">())</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Bus Current: </span><span class=\"si\">%.3f</span><span class=\"s2\"> mA\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Power: </span><span class=\"si\">%.3f</span><span class=\"s2\"> mW\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Shunt voltage: </span><span class=\"si\">%.3f</span><span class=\"s2\"> mV\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">shunt_voltage</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"n\">DeviceRangeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Current out of device range with specified shunt resistor</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"advanced-manual-gain-high-resolution\">\n<h3>Advanced - Manual Gain, High Resolution</h3>\n<p>In this mode by understanding the maximum current expected in your\nsystem and specifying this and the gain in the script you can always\nachieve the best possible current and power resolution, at the price of\nmissing current and power values if a current overflow occurs.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ina219</span> <span class=\"kn\">import</span> <span class=\"n\">INA219</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ina219</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceRangeError</span>\n\n<span class=\"n\">SHUNT_OHMS</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">MAX_EXPECTED_AMPS</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">():</span>\n    <span class=\"n\">ina</span> <span class=\"o\">=</span> <span class=\"n\">INA219</span><span class=\"p\">(</span><span class=\"n\">SHUNT_OHMS</span><span class=\"p\">,</span> <span class=\"n\">MAX_EXPECTED_AMPS</span><span class=\"p\">)</span>\n    <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">RANGE_16V</span><span class=\"p\">,</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">GAIN_1_40MV</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Bus Voltage: </span><span class=\"si\">%.3f</span><span class=\"s2\"> V\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">voltage</span><span class=\"p\">())</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Bus Current: </span><span class=\"si\">%.3f</span><span class=\"s2\"> mA\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Power: </span><span class=\"si\">%.3f</span><span class=\"s2\"> mW\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Shunt voltage: </span><span class=\"si\">%.3f</span><span class=\"s2\"> mV\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">shunt_voltage</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"n\">DeviceRangeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Current overflow\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"sensor-address\">\n<h3>Sensor Address</h3>\n<p>The sensor address may be altered as follows:</p>\n<pre><span class=\"n\">ina</span> <span class=\"o\">=</span> <span class=\"n\">INA219</span><span class=\"p\">(</span><span class=\"n\">SHUNT_OHMS</span><span class=\"p\">,</span> <span class=\"n\">MAX_EXPECTED_AMPS</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"mh\">0x41</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"low-power-mode\">\n<h3>Low Power Mode</h3>\n<p>The sensor may be put in low power mode between reads as follows:</p>\n<pre><span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">RANGE_16V</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Voltage : </span><span class=\"si\">%.3f</span><span class=\"s2\"> V\"</span> <span class=\"o\">%</span> <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">voltage</span><span class=\"p\">())</span>\n    <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">()</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n    <span class=\"n\">ina</span><span class=\"o\">.</span><span class=\"n\">wake</span><span class=\"p\">()</span>\n</pre>\n<p>Note that if you do not wake the device after sleeping, the value\nreturned from a read will be the previous value taken before sleeping.</p>\n</div>\n</div>\n<div id=\"functions\">\n<h2>Functions</h2>\n<ul>\n<li><tt>INA219()</tt> constructs the class. The arguments, are: _ shunt_ohms:\nThe value of the shunt resistor in Ohms (mandatory). _\nmax*expected_amps: The maximum expected current in Amps (optional).<ul>\n<li>busnum: The I2C bus number for the device platform, defaults to\n<em>auto detects 0 or 1 for Raspberry Pi or Beaglebone Black</em>\n(optional).</li>\n<li>address: The I2C address of the INA219, defaults to <em>0x40</em>\n(optional). * log<em>level: Set to _logging.INFO* to see the\ndetailed calibration calculations and _logging.DEBUG</em> to see\nregister operations (optional).</li>\n</ul>\n</li>\n<li><tt>configure()</tt> configures and calibrates how the INA219 will take\nmeasurements. The arguments, which are all optional, are: _\nvoltage_range: The full scale voltage range, this is either 16V or\n32V, represented by one of the following constants (optional). _\nRANGE*16V: Range zero to 16 volts<ul>\n<li>RANGE*32V: Range zero to 32 volts (<strong>default</strong>). <strong>Device only\nsupports up to 26V.</strong></li>\n<li>gain: The gain, which controls the maximum range of the shunt\nvoltage, represented by one of the following constants (optional).\n_ GAIN_1_40MV: Maximum shunt voltage 40mV _ GAIN*2_80MV: Maximum\nshunt voltage 80mV</li>\n<li>GAIN*4_160MV: Maximum shunt voltage 160mV</li>\n<li>GAIN*8_320MV: Maximum shunt voltage 320mV</li>\n<li>GAIN*AUTO: Automatically calculate the gain (<strong>default</strong>)</li>\n<li>bus*adc: The bus ADC resolution (9, 10, 11, or 12-bit), or set the\nnumber of samples used when averaging results, represented by one\nof the following constants (optional).</li>\n<li>ADC*9BIT: 9 bit, conversion time 84us.</li>\n<li>ADC*10BIT: 10 bit, conversion time 148us.</li>\n<li>ADC*11BIT: 11 bit, conversion time 276us.</li>\n<li>ADC*12BIT: 12 bit, conversion time 532us (<strong>default</strong>).</li>\n<li>ADC*2SAMP: 2 samples at 12 bit, conversion time 1.06ms.</li>\n<li>ADC*4SAMP: 4 samples at 12 bit, conversion time 2.13ms.</li>\n<li>ADC*8SAMP: 8 samples at 12 bit, conversion time 4.26ms.</li>\n<li>ADC*16SAMP: 16 samples at 12 bit, conversion time 8.51ms</li>\n<li>ADC*32SAMP: 32 samples at 12 bit, conversion time 17.02ms.</li>\n<li>ADC*64SAMP: 64 samples at 12 bit, conversion time 34.05ms.</li>\n<li>ADC*128SAMP: 128 samples at 12 bit, conversion time 68.10ms.</li>\n<li>shunt*adc: The shunt ADC resolution (9, 10, 11, or 12-bit), or set\nthe number of samples used when averaging results, represented by\none of the following constants (optional).</li>\n<li>ADC*9BIT: 9 bit, conversion time 84us.</li>\n<li>ADC*10BIT: 10 bit, conversion time 148us.</li>\n<li>ADC*11BIT: 11 bit, conversion time 276us.</li>\n<li>ADC*12BIT: 12 bit, conversion time 532us (<strong>default</strong>).</li>\n<li>ADC*2SAMP: 2 samples at 12 bit, conversion time 1.06ms.</li>\n<li>ADC*4SAMP: 4 samples at 12 bit, conversion time 2.13ms.</li>\n<li>ADC*8SAMP: 8 samples at 12 bit, conversion time 4.26ms.</li>\n<li>ADC*16SAMP: 16 samples at 12 bit, conversion time 8.51ms</li>\n<li>ADC*32SAMP: 32 samples at 12 bit, conversion time 17.02ms.</li>\n<li>ADC_64SAMP: 64 samples at 12 bit, conversion time 34.05ms. *\nADC_128SAMP: 128 samples at 12 bit, conversion time 68.10ms.</li>\n</ul>\n</li>\n<li><tt>voltage()</tt> Returns the bus voltage in volts (V).</li>\n<li><tt>supply_voltage()</tt> Returns the bus supply voltage in volts (V).\nThis is the sum of the bus voltage and shunt voltage. A\n<em>DeviceRangeError</em> exception is thrown if current overflow occurs.</li>\n<li><tt>current()</tt> Returns the bus current in milliamps (mA). A\n<em>DeviceRangeError</em> exception is thrown if current overflow occurs.</li>\n<li><tt>power()</tt> Returns the bus power consumption in milliwatts (mW). A\n<em>DeviceRangeError</em> exception is thrown if current overflow occurs.</li>\n<li><tt>shunt_voltage()</tt> Returns the shunt voltage in millivolts (mV). A\n<em>DeviceRangeError</em> exception is thrown if current overflow occurs.</li>\n<li><tt>current_overflow()</tt> Returns \u2018True\u2019 if an overflow has occured.\nAlternatively handle the <em>DeviceRangeError</em> exception as shown in the\nexamples above.</li>\n<li><tt>sleep()</tt> Put the INA219 into power down mode.</li>\n<li><tt>wake()</tt> Wake the INA219 from power down mode.</li>\n<li><tt>reset()</tt> Reset the INA219 to its default configuration.</li>\n</ul>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>On a Raspberry Pi 2 Model B running Raspbian Jesse and reading a 12-bit\nvoltage in a loop, a read occurred approximately every 10 milliseconds.</p>\n</div>\n<div id=\"debugging\">\n<h2>Debugging</h2>\n<p>To understand the calibration calculation results and automatic gain\nincreases, informational output can be enabled with:</p>\n<pre><span class=\"n\">ina</span> <span class=\"o\">=</span> <span class=\"n\">INA219</span><span class=\"p\">(</span><span class=\"n\">SHUNT_OHMS</span><span class=\"p\">,</span> <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n</pre>\n<p>Detailed logging of device register operations can be enabled with:</p>\n<pre><span class=\"n\">ina</span> <span class=\"o\">=</span> <span class=\"n\">INA219</span><span class=\"p\">(</span><span class=\"n\">SHUNT_OHMS</span><span class=\"p\">,</span> <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Install the library as described above, this will install all the\ndependencies required for the unit tests, as well as the library itself.\nClone the library source from Github then execute the test suite from\nthe top level directory with:</p>\n<pre>python3 -m unittest discover -s tests -p <span class=\"s1\">'test_*.py'</span>\n</pre>\n<p>A single unit test class may be run as follows:</p>\n<pre>python3 -m unittest tests.test_configuration.TestConfiguration\n</pre>\n<p>Code coverage metrics may be generated and viewed with:</p>\n<pre>coverage run --branch --source<span class=\"o\">=</span>ina219 -m unittest discover -s tests -p <span class=\"s1\">'test_*.py'</span>\ncoverage report -m\n</pre>\n</div>\n<div id=\"coding-standard\">\n<h2>Coding Standard</h2>\n<p>This library adheres to the <em>PEP8</em> standard and follows the <em>idiomatic</em>\nstyle described in the book <em>Writing Idiomatic Python</em> by <em>Jeff Knupp</em>.</p>\n</div>\n\n          </div>"}, "last_serial": 6104790, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "139503acf24061b0096fec6cd11ab8b8", "sha256": "1cd3c88203e2a9e915cf507d30aa4bde9e8b8a6bfc0e5ad02cc5bbdccd2f6c99"}, "downloads": -1, "filename": "pi_ina219-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "139503acf24061b0096fec6cd11ab8b8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13190, "upload_time": "2017-03-02T07:20:30", "upload_time_iso_8601": "2017-03-02T07:20:30.533758Z", "url": "https://files.pythonhosted.org/packages/bd/fd/0660c19b1ee0cae3eae0732002b0e8130e1153cfd5b26707a33a9aa12b05/pi_ina219-1.1.0-py2.py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "c0ea7e8c9216204c66232cae37006c8e", "sha256": "52a0f4f8ec4c690d514cc3bf89a2ace274a885a9e953f75e774bc40ea9ae371a"}, "downloads": -1, "filename": "pi_ina219-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c0ea7e8c9216204c66232cae37006c8e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13370, "upload_time": "2018-06-26T07:36:38", "upload_time_iso_8601": "2018-06-26T07:36:38.284899Z", "url": "https://files.pythonhosted.org/packages/0e/44/f85379a7d980422f98d9299876d599089ce3e2e37e2b0d095d3f3d22f907/pi_ina219-1.2.0-py2.py3-none-any.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "ee257b6b0541f3eeb0c507de5e7f78ff", "sha256": "c867f8bb979dd274eb76de72e67e6210e82f750f2b77312cbfe6ea9dce0627fa"}, "downloads": -1, "filename": "pi_ina219-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ee257b6b0541f3eeb0c507de5e7f78ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9813, "upload_time": "2019-11-09T05:55:27", "upload_time_iso_8601": "2019-11-09T05:55:27.913233Z", "url": "https://files.pythonhosted.org/packages/5d/75/11928c4cd4dd0a7cc56faf25b7f5e2cf8aedcdb0b822f33528a63950215c/pi_ina219-1.3.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee257b6b0541f3eeb0c507de5e7f78ff", "sha256": "c867f8bb979dd274eb76de72e67e6210e82f750f2b77312cbfe6ea9dce0627fa"}, "downloads": -1, "filename": "pi_ina219-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ee257b6b0541f3eeb0c507de5e7f78ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9813, "upload_time": "2019-11-09T05:55:27", "upload_time_iso_8601": "2019-11-09T05:55:27.913233Z", "url": "https://files.pythonhosted.org/packages/5d/75/11928c4cd4dd0a7cc56faf25b7f5e2cf8aedcdb0b822f33528a63950215c/pi_ina219-1.3.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:49 2020"}