{"info": {"author": "Gonzo Investigatory Journalism Agency, LLC", "author_email": "gonzo.development@protonmail.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: AsyncIO", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Legal Industry", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU Affero General Public License v3", "Natural Language :: English", "Operating System :: OS Independent", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python :: 3.6", "Topic :: Communications", "Topic :: Communications :: Chat", "Topic :: Database", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Security", "Topic :: Security :: Cryptography", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "aiootp - Asynchronous one-time-pad based crypto and anonymity library.\n======================================================================\n\n``aiootp`` is an asynchronous library providing access to cryptographic\nprimatives and abstractions, transparently encrypted / decrypted file\nI/O and databases, as well as powerful, pythonic utilities that\nsimplify data processing & cryptographic procedures in python code. \nThis library's cipher is an implementation of the **one-time pad**.\nThe aim is to create a simple, standard, efficient implementation of\nthis unbreakable cipher, to give users and applications access to\nuser-friendly cryptographic tools, and to increase the overall\nsecurity, privacy, and anonymity on the web, and in the digital world.\nUsers will find ``aiootp`` to be easy to write, easy to read, and fun.\n\n\n\n\nImportant Disclaimer\n--------------------\n\n``aiootp`` is experimental software that works with Python 3.6+. \nIt's a work in progress. The programming API could change with \nfuture updates, and it isn't bug free. ``aiootp`` provides powerful \nsecurity tools and misc utilities that're designed to be \ndeveloper-friendly and privacy preserving.\nAs a security tool, ``aiootp`` needs to be tested and reviewed \nextensively by the programming and cryptography communities to \nensure its implementations are sound. We provide no guarantees. \nThis software hasn't yet been audited by third-party security \nprofessionals. \n\n\n\n\nQuick install\n-------------\n\n``pip3 install --user --upgrade aiootp``\n\n\n\n\nSome Examples\n-------------\n\nUsers can create and modify transparently encrypted databases:\n\n.. code:: python\n\n    import aiootp\n\n\n    # Make a new user key for encryption / decryption with a fast,\n\n    # cryptographically secure pseudo-random number generator ->\n\n    key = await aiootp.acsprng()\n\n\n    # Create a database object ->\n\n    db = await aiootp.AsyncDatabase(key)\n\n\n    # Store protected data by a ``tag`` ->\n\n    tag = \"private_account\"\n\n    salt = await db.asalt()\n\n    hmac = await db.ahmac(\"password012345\", salt)\n\n    db[tag] = {hmac: \"secured data\"}\n\n\n    # Add to existing stored data ->\n\n    db[tag].update({\"password_salt\": salt})\n\n\n    # Read from the database with ``aquery`` ->\n\n    (await db.aquery(tag))[hmac]\n\n >>>'secured data'\n\n\n    # Or use bracketed lookup (it's an async-safe operation) ->\n\n    salt = db[tag][\"password_salt\"]\n\n    wrong_hmac = await db.ahmac(\"wrong password attempt\", salt)\n\n    db[tag][wrong_hmac]\n\n >>>KeyError: \n\n\n    # Or, pop the value out of the database ->\n\n    account_data = await db.apop(tag)\n\n\n    # Create child databases accessible from the parent by a ``metatag`` ->\n\n    metatag = \"child\"\n\n    molly = await db.ametatag(metatag)\n\n    molly[\"hobbies\"] = [\"skipping\", \"punching\"]\n\n    molly[\"hobbies\"].append(\"reading\")\n\n    molly[\"hobbies\"] is db.child[\"hobbies\"]\n\n >>>True\n\n    assert isinstance(molly.__class__, AsyncDatabase)\n\n\n    # Write database changes to disk with transparent encryption ->\n\n    await db.asave()\n\n\n    # Delete a child database from the filesystem ->\n\n    await db.adelete_metatag(\"child\")\n\n    db.child[\"hobbies\"]\n\n >>>AttributeError: 'AsyncDatabase' object has no attribute 'child'\n\n\n    # Automate the write to disk logic with a context manager ->\n\n    async with (await aiootp.AsyncDatabase(key)) as db:\n\n        db[\"tag\"] = {\"data\": \"can be any json serializable object\"}\n\n        db[\"bitcoin\"] = \"0bb6eee10d2f8f45f8a\"\n\n        db[\"lawyer\"] = {\"#\": \"555-555-1000\", \"$\": 13000.50}\n\n        db[\"safehouses\"] = [\"Dublin Forgery\", \"NY Insurrection\"]\n\n\n    # Make mirrors of databases ->\n\n    new_key = await aiootp.acsprng()\n\n    new_db = await aiootp.AsyncDatabase(new_key)\n\n    await new_db.amirror_database(db)\n\n    assert new_db[\"lawyer\"] is db[\"lawyer\"]\n\n\n    # Or make namespaces out of databases for very efficient lookups ->\n\n    namespace = await new_db.ainto_namespace()\n\n    assert namespace.bitcoin == new_db[\"bitcoin\"]\n\n    assert namespace.lawyer is new_db[\"lawyer\"]\n\n\n    # Delete a database from the filesystem ->\n\n    await db.adelete_database()\n\n\n    # Initialization of a database object is more computationally expensive\n\n    # than entering its context manager. So keeping a reference to a\n\n    # preloaded database is a great idea, either call ``asave`` / ``save``\n\n    # periodically, or open a context with the reference whenever wanting to\n\n    # capture changes to the filesystem ->\n\n    async with new_db as db:\n\n        print(\"Saving to disk...\")\n\n\n    # Transparent and automatic encryption makes persisting sensitive \n\n    # information very simple. Though, if users do want to encrypt / \n\n    # decrypt things manually, then databases allow that too ->\n\n    data_name = \"saturday clients\"\n\n    clients = [\"Tony\", \"Maria\"]\n\n    encrypted = await db.aencrypt(filename=data_name, plaintext=clients)\n\n    decrypted = await db.adecrypt(filename=data_name, ciphertext=encrypted)\n\n    clients == decrypted\n\n >>>True\n\n\n    #\n\n\n\n\nWhat other tools are available to users?:\n\n.. code:: python\n\n    import aiootp   \n\n\n    # Async & synchronous versions of almost everything in the library ->\n\n    assert await aiootp.asha_512(\"data\") == aiootp.sha_512(\"data\")\n\n    key = aiootp.csprng()\n\n    assert aiootp.Database(key).root_filename == (await aiootp.AsyncDatabase(key)).root_filename\n\n\n    # Precomputed & organized values that can aid users, like:\n\n    # A dictionary of prime numbers grouped by their bit-size ->\n\n    aiootp.primes[512][0]    # <- The first prime greater than 512-bits\n\n    aiootp.primes[2048][-1]    # <- The last prime less than 2049-bits\n\n\n    # Symmetric one-time-pad encryption of json data ->\n\n    plaintext = {\"account\": 3311149, \"titles\": [\"queen b\"]}\n\n    encrypted = aiootp.json_encrypt(plaintext, key=key)\n\n    decrypted = aiootp.json_decrypt(encrypted, key=key)\n\n    assert decrypted == plaintext\n\n\n    # Symmetric one-time-pad encryption of binary data ->\n\n    binary_data = aiootp.randoms.urandom(256)\n\n    encrypted = aiootp.bytes_encrypt(binary_data, key=key)\n\n    decrypted = aiootp.bytes_decrypt(encrypted, key=key)\n\n    assert decrypted == binary_data\n\n\n    # Generators under-pin most procedures in the library ->\n\n    from aiootp import json_encode   # <- A simple generator\n\n    from aiootp.ciphers import cipher, decipher    # <- Also simple generators\n\n\n    # Yields plaintext json string in chunks ->\n\n    plaintext_generator = json_encode(plaintext)\n\n\n    # An endless stream of forward + semi-future secure hashes ->\n\n    keystream = aiootp.keys(key)\n\n\n    # xor's the plaintext chunks with key chunks ->\n\n    with aiootp.cipher(plaintext_generator, keystream) as encrypting:\n\n        # ``list`` returns all generator results in a list\n\n        ciphertext = encrypting.list()\n\n    # Get the auto generated random salt back. It's needed for decryption ->\n\n    ciphertext_seed_entropy = keystream.result(exit=True)\n\n\n    # This example was a low-level look at the encryption algorithm. And it \n\n    # was seven lines of code. The Comprende class makes working with \n\n    # generators a breeze, & working with generators makes solving problems \n\n    # in bite-sized chunks a breeze. Here's the two-liner that also takes \n\n    # care of managing the random salt ->\n\n    ciphertext = aiootp.json_encode(plaintext).encrypt(key).list()\n\n    plaintext_json = aiootp.unpack(ciphertext).decrypt(key).join()\n\n\n    # We just used the ``list`` & ``join`` end-points to get the full series \n\n    # of results from the underlying generators. These results are lru-cached \n\n    # to facilitate their efficient reuse for alternate computations. The \n\n    # ``Comprende`` context manager clears the opened instance's cache on exit, \n\n    # this clears every instance's cache ->\n\n    aiootp.Comprende.clear_class()\n\n\n    # The other end-points can be found under ``aiootp.Comprende.eager_methods`` ->\n\n    {\n        'adeque',\n        'adict',\n        'aexhaust',    # <- Doesn't cache results, only returns the last element\n        'ajoin',\n        'alist',\n        'aset',\n        'deque',\n        'dict',\n        'exhaust',    # <- Doesn't cache results, only returns the last element\n        'join',\n        'list',\n        'set',\n    }\n\n\n    # A lot of this magic with generators is made possible with a sweet little\n\n    # ``comprehension`` decorator. It reimagines the generator interface by \n\n    # wrapping generators in the innovative ``Comprende`` class, giving every \n\n    # generator access to a plethora of data processing & cryptographic utilities \n\n    # right out of the box ->\n\n    @aiootp.comprehension()\n\n    def gen(x=None, y=None):\n\n        z = yield x + y\n\n        return x * y * z\n\n\n    # Drive the generator forward with a context manager ->\n\n    with gen(x=1, y=2) as example:\n\n        z = 3\n\n\n        # Calling the object will send ``None`` into the coroutine by default ->\n\n        sum_of_x_y = example()\n\n        assert sum_of_x_y == 3\n\n\n        # Passing ``z`` will send it into the coroutine, cause it to reach the \n\n        # return statement & exit the context manager ->\n\n        example(z)\n\n\n    # The result returned from the generator is now available ->\n\n    product_of_x_y_z = example.result()\n\n    assert product_of_x_y_z == 6\n\n\n    # The ``example`` variable is actually the ``Comprende`` object,\n\n    # which redirects values to the wrapped generator's ``send()``\n\n    # method using the instance's ``__call__()`` method.\n\n\n    # Here's another example ->\n\n    @aiootp.comprehension() \n\n    def squares(numbers=20):\n\n        for number in range(numbers):\n\n            yield number ** 2\n\n\n    for hashed_square in squares().sha_256():\n\n        # This is an example chained generator that hashes then yields each output.\n\n        print(hashed_square)\n\n\n    # Chained ``Comprende`` generators are excellent inline data processors ->\n\n    base64_data = []\n\n    for result in squares().str().to_base64():\n\n        # This will stringify each output of the generator, then base64 encode them ->\n\n        base64_data.append(result)\n\n\n    # Async ``Comprende`` coroutines have almost exactly the same interface as\n\n    # synchronous ones ->\n\n    @aiootp.comprehension()\n\n    async def gen(x=None, y=None):\n\n        # Because having a return statement in an async generator is a\n\n        # SyntaxError, the return value is expected to be passed into\n\n        # UserWarning, and then raised to propagate upstream. It's then\n\n        # available from the instance's ``aresult`` method ->\n\n        z = yield x + y\n\n        result = x * y * z\n\n        raise UserWarning(result)\n\n\n    # Drive the generator forward.\n\n    async with gen(x=1, y=2) as example:\n\n        z = 3\n\n\n        # Awaiting the ``__call__`` method will send ``None`` into the\n\n        # coroutine by default ->\n\n        sum_of_x_y = await example()\n\n        assert sum_of_x_y == 3\n\n\n        # Passing ``z`` will send it into the coroutine, cause it to reach the\n\n        # raise statement which will exit the context manager gracefully ->\n\n        await example(z)\n\n\n    # The result returned from the generator is now available ->\n\n    product_of_x_y_z = await example.aresult()\n\n    assert product_of_x_y_z == 6\n\n\n    # Let's see some other ways async generators mirror synchronous ones ->\n\n    @aiootp.comprehension()\n\n    async def squares():\n\n        number = 0\n\n        while True:\n\n            yield number ** 2\n\n            number += 1\n\n\n    # This is a chained async generator that salts then hashes then yields\n\n    # each output ->\n\n    salt = await aiootp.acsprng()\n\n    hashed_squares = squares().asha_512(salt)\n\n\n    # Want only the first twenty results? ->\n\n    async for hashed_square in hashed_squares[:20]:\n\n        # Then you can slice the generator.\n\n        print(hashed_square)\n\n\n    # Users can slice generators to receive more complex output rules, like:\n\n    # Getting every second result starting from the third result to the 50th ->\n\n    async for result in hashed_squares[3:50:2]:\n\n        print(result)\n\n\n    # ``Comprende`` generators have loads of tooling for users to explore. \n\n    # Play around with it and take a look at the other chainable generator \n\n    # methods in ``aiootp.Comprende.lazy_generators``.\n\n    {\n        '_agetitem',\n        '_getitem',\n        'aascii_to_int',\n        'abin',\n        'abytes',\n        'abytes_decrypt',\n        'abytes_encrypt',\n        'adecode',\n        'adecrypt',\n        'adelimit',\n        'adelimit_resize',\n        'aencode',\n        'aencrypt',\n        'afeed',\n        'afeed_self',\n        'afrom_base',\n        'afrom_base64',\n        'ahalt',\n        'ahex',\n        'aint',\n        'aint_to_ascii',\n        'ajson_dumps',\n        'ajson_loads',\n        'amap_decrypt',\n        'amap_encrypt',\n        'arandom_sleep',\n        'areplace',\n        'aresize',\n        'ascii_to_int',\n        'asha_256',\n        'asha_256_hmac',\n        'asha_512',\n        'asha_512_hmac',\n        'aslice',\n        'asplit',\n        'astr',\n        'atag',\n        'atimeout',\n        'ato_base',\n        'ato_base64',\n        'azfill',\n        'bin',\n        'bytes',\n        'bytes_decrypt',\n        'bytes_encrypt',\n        'decode',\n        'decrypt',\n        'delimit',\n        'delimit_resize',\n        'encode',\n        'encrypt',\n        'feed',\n        'feed_self',\n        'from_base',\n        'from_base64',\n        'halt',\n        'hex',\n        'int',\n        'int_to_ascii',\n        'json_dumps',\n        'json_loads',\n        'map_decrypt',\n        'map_encrypt',\n        'random_sleep',\n        'replace',\n        'resize',\n        'sha_256',\n        'sha_256_hmac',\n        'sha_512',\n        'sha_512_hmac',\n        'slice',\n        'split',\n        'str',\n        'tag',\n        'timeout',\n        'to_base',\n        'to_base64',\n        'zfill',\n    }\n\n\n    # Let's look at a more complicated example with the one-time pad \n\n    # keystreams. There are many uses for endless streams of deterministic \n\n    # key material outside of one-time pad cipher keys. They can, for instance, \n\n    # give hash tables order that's cryptographically determined & obscured -> \n\n    ordered_entries = {}\n\n    salt = await aiootp.acsprng()\n\n    names = aiootp.akeys(key, salt)\n\n\n    # Resize each output of ``names`` to 32 characters, tag each output with\n\n    # an incrementing number, & stop the stream after 0.1 seconds ->\n\n    async for index, name in names.aresize(32).atag().atimeout(0.1):\n\n        ordered_entries[name] = f\"{index} data organized by the stream of hashes\"\n\n\n    # Retrieving items in the correct order requires knowing both ``key`` & ``salt``\n\n    async for index, name in aiootp.akeys(key, salt).aresize(32).atag():\n\n        try:\n\n            assert ordered_entries[name] == f\"{index} data organized by the stream of hashes\"\n\n        except KeyError:\n\n            print(f\"There are no more entries after {index} iterations.\")\n\n            assert index == len(ordered_entries) + 1\n\n\n    # There's a prepackaged ``Comprende`` generator function that does\n\n    # encryption / decryption of key ordered hash maps. First let's make an\n\n    # actual encryption key stream that's different from ``names`` ->\n\n    key_stream = aiootp.akeys(key, salt, pid=aiootp.sha_256(key, salt))\n\n\n    # And example plaintext ->\n\n    plaintext = 100 * \"Some kinda message...\"\n\n\n    # And let's make sure to clean up after ourselves with a context manager ->\n\n    data_stream = aiootp.adata(plaintext)\n\n    async with data_stream.amap_encrypt(names, key_stream) as encrypting:\n\n        # ``adata`` takes a sequence, & ``amap_encrypt`` takes two iterables,\n\n        # a stream of names for the hash map, & the stream of key material.\n\n        ciphertext_hashmap = await encrypting.adict()\n\n\n    # Now we'll pick the chunks out in the order produced by ``names`` to \n\n    # decrypt them ->\n\n    ciphertext_stream = aiootp.apick(names, ciphertext_hashmap)\n\n    async with ciphertext_stream.amap_decrypt(key_stream) as decrypting:\n\n        decrypted = await decrypting.ajoin()\n\n    assert decrypted == plaintext\n\n\n    # This is really neat, & makes sharding encrypted data incredibly easy.\n\n\n    #\n\n\n\n\nLet's take a deep dive into the low-level xor procedure used to implement the one-time-pad:\n\n.. code:: python\n\n    import aiootp\n\n    # It is a ``Comprende`` generator ->\n\n    @aiootp.comprehension()\n\n    # ``datastreams`` are typically just a single iterable of integers that\n\n    # are either plaintext or ciphertext. ``key`` is by default the ``keys``\n\n    # generator. ``buffer_size`` is by default ``10**20``, which represents \n\n    # how many (20) of the most significant decimal digits in each integer \n\n    # key produced will be excluded from use for xoring. This is necessary \n\n    # because the first digits in a ``int(key, 16)`` converted key are less \n\n    # random than the least significant digits. 20 decimal digits is roughly \n\n    # 64-bits ->\n\n    def xor(*datastreams, key=None, buffer_size=aiootp.power10[20], convert=True):\n\n        # ``convert`` is an optional flag to allow users to pass a preconverted\n\n        # interable of integer key material ->\n\n        if convert:\n\n            entropy = key.int(16)\n\n        else:\n\n            entropy = key\n\n        # If more than one iterable of plaintext or ciphertext integers are \n\n        # passed, then they're processed one at a time here. Reversing the \n\n        # procedure when more than one data stream is used is not supported ->\n\n        for items in zip(*datastreams):\n\n            # Initialize the result. Anything xor'd by 0 returns itself ->\n\n            result = 0\n\n            for item in items:\n\n                # For each element of each plaintext or ciphertext iterable,\n\n                # a seed is cached to increase efficiency when growing the key ->\n\n                seed = entropy() * entropy()\n\n                # Each time ``entropy`` is called, it pulls 2 sha3_512 hashes\n\n                # from the forward + semi-future secure key stream whose \n\n                # concatenated digests are integer converted & multiplied with\n\n                # another pair of hashes from the stream. This creates keys of \n\n                # sizes that are multiples of 2048-bits. The new key is then \n\n                # xor'd with the 2048-bit seed to prevent any cryptanalysis \n\n                # involving factoring the multiplication ->\n\n                current_key = seed ^ (entropy() * entropy())\n\n                # The resulting key is then xor'd with the plaintext or \n\n                # ciphertext element ->\n\n                tested = item ^ current_key\n\n                # And the size of the item is increased by the buffer to account\n\n                # for the less random most significant bits ->\n\n                item_size = item * buffer_size\n\n                # Next, the key is grown to be larger than the plaintext element\n\n                # or, if the reverse operation is being done on ciphertext, then\n\n                # the growth is stopped if a plaintext is revealed, since the\n\n                # plaintext is always smaller than the key. Multiplying ``tested``\n\n                # by 100 gets rid of rounding errors, as sometimes xor'ing two\n\n                # integers can result in a number that's larger than both of them\n\n                # by one significant digit.\n\n                while tested * 100 > current_key and item_size > current_key:\n\n                    # If the key needs to grow again, then the current key is\n\n                    # multiplied by another 2048-bit compund key & the result \n\n                    # is xor'd with the seed to eliminate the potential of\n\n                    # factoring the result ->\n\n                    current_key = seed ^ (current_key * entropy() * entropy())\n\n                    # We then reset ``tested`` to test until plaintext is revealed\n\n                    # or, an appropriate ciphertext is made ->\n\n                    tested = item ^ current_key\n\n                # If the procedure succeeds in either case, the result is stored\n\n                # or, yielded when there are no more elements in the zipped\n\n                # datastream iteration ->\n\n                result ^= tested\n\n            yield result\n\n    # This is a very space-efficient algorithm for a one-time-pad that adapts\n\n    # dynamically to increased plaintext or ciphertext sizes. Both because \n\n    # it's built on generators, & because an infinite stream of key material\n\n    # can efficiently be produced from a finite-sized key & an ephemeral salt.\n\n\n    #\n\n\n\n\nHere's a quick overview of this package's modules:\n\n.. code:: python\n\n    import aiootp\n\n\n    # Commonly used constants, datasets & functionality across all modules ->\n\n    aiootp.commons\n\n\n    # The basic utilities & abstractions of the package's architecture ->\n\n    aiootp.generics\n\n\n    # This module is responsible for providing entropy to the package ->\n\n    aiootp.randoms\n\n\n    # The higher-level abstractions used to implement the one-time pad ->\n\n    aiootp.ciphers\n\n\n    # The higher-level abstractions used to create / manage key material ->\n\n    aiootp.keygens\n\n\n    # Common system paths & the ``pathlib.Path`` utility ->\n\n    aiootp.paths\n\n\n    # Global async functionalities & abstractions ->\n\n    aiootp.asynchs\n\n\n    # Decorators & classes able to benchmark async/sync functions & generators ->\n\n    aiootp.debuggers\n\n\n    #\n\n\n\n\nFAQ\n---\n\n**Q: What is the one-time-pad?**\n\nA: It's a provably unbreakable cipher. It's typically thought to be too cumbersome a cipher because it has strict requirements. Key size is one requirement, since keys must be at least as large as the plaintext in order to ensure this unbreakability. We've simplified this requirement by using a forward secret and semi-future secret key ratchet algorithm, with ephemeral salts for each stream, allowing users to securely produce endless streams of key material as needed from a single finite size 512-bit long-term key. This algorithmic approach lends itself to great optimizations, since hash processing hardware/sorftware is continually pushed to the edges of efficiency.\n\n\n**Q: What do you mean the ``aiootp.keys`` generator produces forward & semi-future secure key material?**\n\nA: The infinite stream of key material produced by that generator has amazing properties. Under the hood it's a ``hashlib.sha3_512`` key ratchet algorithm. It's internal state consists of a seed hash, & three ``hashlib.sha3_512`` objects primed iteratively with the one prior and the seed hash. The first object is updated with the seed, its prior output, and the entropy that may be sent into the generator as a coroutine. This first object is then used to update the last two objects before yielding the last two's concatenated results. The seed is the hash of a primer seed, which itself is the hash of the input key material, a random salt, and a user-defined ID value which can safely distinguish streams with the same key material. This algorithm is forward secure because compromising a future key will not compromise past keys since these hashes are irreversibly constructed. It's also semi-future secure since having a past key doesn't allow you to compute future keys without also compromising the seed hash, and the first ratcheting ``hashlib`` object. Since those two states are never disclosed or used for encryption, the key material produced is future secure with respect to itself only. Full future-security would allow for the same property even if the seed & ratchet object's state were compromised. This feature can, however, be added to the algorithm since the generator itself can receive entropy externally from a user at any arbitrary point in its execution, say, after computing a shared diffie-hellman exchange key.\n\n\n**Q: How fast is this implementation of the one-time pad cipher?**\n\nA: Well, because it relies on ``hashlib.sha3_512`` hashing to build key material streams, it's rather efficient, encrypting & decrypting about 8 MB/s on a ~1.5 GHz core.\n\n\n**Q: Why make a new cipher when AES is strong enough?**\n\nA: Although primatives like AES are strong enough for now, there's no guarantee that future hardware or algorithms won't be developed that break them. In fact, AES's theoretical bit-strength has dropped over the years because of hardware and algorithmic developments. It's still considered a secure cipher, but the **one-time pad** isn't considered theoretically \"strong enough\", instead it's mathematically proven to be unbreakable. Such a cryptographic guarantee is too profound not to develop further into an efficient, accessible standard.\n\n\n**Q: What size keys does this one-time pad cipher use?**\n\nA: It's been designed to work with 512-bit hexidecimal or 128 arbitrary character keys. \n\n\n**Q: What's up with the ``AsyncDatabase`` / ``Database``?**\n\nA: The idea is to create an intuitive, pythonic interface to a transparently encrypted and decrypted persistence tool that also cryptographically obscures metadata. It's designed to work with json serializable data, which gives it native support for some basic python datatypes. It needs improvement with regard to disk memory efficiency. So, it's still a work in progress, albeit a very nifty one.\n\n\n**Q: Why are the modules transformed into ``Namespace`` objects?**\n\nA: We overwrite our modules in this package to have a more fine-grained control over what part of the package's internal state is exposed to users and applications. The goal is make it more difficult for users to inadvertently jeopardize their security tools, and minimize the attack surface available to adversaries. The ``aiootp.Namespace`` class also makes it easier to coordinate and decide the library's UI/UX across the package.\n\n\n\n\n``Known Issues``\n=================\n\n-  The test suite for this software is under construction, & what tests\n   have been published are currently inadequate to the needs of\n   cryptography software.\n-  This package is currently in beta testing. Contributions are welcome.\n   Send us a message if you spot a bug or security vulnerability:\n\n   -  < gonzo.development@protonmail.ch >\n   -  < 31FD CC4F 9961 AFAC 522A 9D41 AE2B 47FA 1EF4 4F0A >\n\n\n\n``Changelog``\n=============\n\n\nChanges for version 0.4.0\n=========================\n\n\nMajor Changes\n-------------\n\n-  Fixed bug in ``aiootp.abytes_encrypt`` function which inaccurately called\n   a synchronous ``Comprende`` end-point method on the underlying async\n   generator, causing an exception and failure to function.\n-  Changed the procedures in ``akeys`` & ``keys`` that generate their internal\n   key derivation functions. They're now slightly faster to initialize &\n   more theoretically secure since each internal state is fed by a seed\n   which isn't returned to the user. This encryption algorithm change is \n   incompatible with the encryption algorithms of past versions.\n\n\nMinor Changes\n-------------\n\n-  Various code cleanups.\n-  Various inaccurate docstrings fixed.\n-  Keyword arguments in ``Keys().test_hmac`` & ``AsyncKeys().atest_hmac``\n   had their order switched to be slightly more friendly to use.\n-  Added documentation to ``README.rst`` on the inner workings of the\n   one-time-pad algorithm's implementation.\n-  Made ``Compende.arandom_sleep`` & ``Compende.random_sleep`` chainable\n   generator methods.\n-  Changed the ``Compende.adelimit_resize`` & ``Compende.delimit_resize``\n   algorithms to not yield inbetween two joined delimiters in a sequence\n   being resized.\n\n\n\n\nChanges for version 0.3.1\n=========================\n\n\nMinor Changes\n-------------\n\n-  Fixed bug where a static method in ``AsyncDatabase`` & ``Database`` was \n   wrongly labelled a class method causing a failure to initialize.\n\n\n\n\nChanges for version 0.3.0\n=========================\n\n\nMajor Changes\n-------------\n\n-  The ``AsyncDatabase`` & ``Database`` now use the more secure ``afilename`` \n   & ``filename`` methods to derive the hashmap name and encryption streams\n   from a user-defined tag internal to their ``aencrypt`` / ``adecrypt`` / \n   ``encrypt`` / ``decrypt`` methods, as well as, prior to them getting called. \n   This will break past versions of databases' ability to open their files.\n-  The package now has built-in functions for using the one-time-pad \n   algorithm to encrypt & decrypt binary data instead of just strings\n   or integers. They are available in ``aiootp.abytes_encrypt``, \n   ``aiootp.abytes_decrypt``, ``aiootp.bytes_encrypt`` & ``aiootp.bytes_decrypt``.\n-  The ``Comprende`` class now has generators that do encryption & decryption \n   of binary data as well. They are available from any ``Comprende`` generator\n   by the ``abytes_encrypt``, ``abytes_decrypt``, ``bytes_encrypt`` & ``bytes_decrypt`` \n   chainable method calls.\n\n\nMinor Changes\n-------------\n\n-  Fixed typos and inaccuracies in various docstrings.\n-  Added a ``__ui_coordination.py`` module to handle inserting functionality \n   from higher-level to lower-level modules and classes.\n-  Various code clean ups and redundancy eliminations.\n-  ``AsyncKeys`` & ``Keys`` classes now only update their ``self.salt`` key\n   by default when their ``areset`` & ``reset`` methods are called. This\n   aligns more closely with their intended use.\n-  Added ``arandom_sleep`` & ``random_sleep`` chainable methods to the\n   ``Comprende`` class which yields outputs of generators after a random \n   sleep for each iteration.\n-  Added several other chainable methods to the ``Comprende`` class for\n   string & bytes data processing. They're viewable in ``Comprende.lazy_generators``.\n-  Added new, initial tests to the test suite.\n\n\n\n\nChanges for version 0.2.0\n=========================\n\n\nMajor Changes\n-------------\n\n-  Added ephemeral salts to the ``AsyncDatabase`` & ``Database`` file \n   encryption procedures. This is a major security fix, as re-encryption \n   of files with the same tag in a database with the same open key would \n   use the same streams of key material each time, breaking encryption if \n   two different versions of a tag file's ciphertext stored to disk were \n   available to an adversary. The database methods ``encrypt``, ``decrypt``, \n   ``aencrypt`` & ``adecrypt`` will now produce and decipher true one-time \n   pad ciphertext with these ephemeral salts. \n-  The ``aiootp.subkeys`` & ``aiootp.asubkeys`` generators were revamped \n   to use the ``keys`` & ``akeys`` generators internally instead of using \n   their own, slower algorithm. \n-  ``AsyncDatabase`` file deletion is now asynchronous by running the \n   ``builtins.os.remove`` function in an async thread executor. The \n   decorator which does the magic is available at ``aiootp.asynchs.executor_wrapper``. \n\n\nMinor Changes\n-------------\n\n-  Fix typos in ``__root_salt`` & ``__aroot_salt`` docstrings. Also replaced \n   the ``hash(self)`` argument for their ``lru_cache``  & ``alru_cache`` \n   with a secure hmac instead. \n-  add ``gi_frame``, ``gi_running``, ``gi_code``, ``gi_yieldfrom``, \n   ``ag_frame``, ``ag_running``, ``ag_code`` & ``ag_await`` properties to \n   ``Comprende`` class to mirror async/sync generators more closely. \n-  Remove ``ajson_encrypt``, ``ajson_decrypt``, ``json_encrypt``, \n   ``json_decrypt`` functions' internal creation of dicts to contain the \n   plaintext. It was unnecessary & therefore wasteful. \n-  Fix docstrings in ``OneTimePad`` methods mentioning ``parent`` kwarg which \n   is a reference to deleted, refactored code. \n-  Fix incorrect docstrings in databases ``namestream`` & ``anamestream`` \n   methods. \n-  Added ``ASYNC_GEN_THROWN`` constant to ``Comprende`` class to try to stop \n   an infrequent & difficult to debug ``RuntimeError`` when async generators \n   do not stop after receiving an ``athrow``. \n-  Database tags are now fully loaded when they're copied using the methods \n   ``into_namespace`` & ``ainto_namespace``. \n-  Updated inaccurate docstrings in ``map_encrypt``, ``amap_encrypt``, \n   ``map_decrypt`` & ``amap_decrypt`` ``OneTimePad`` methods. \n-  Added ``acustomize_parameters`` async function to ``aiootp.generics`` \n   module. \n-  Various code clean ups.\n\n\n\n\nChanges for version 0.1.0 \n========================= \n\nMinor Changes \n------------- \n\n-  Initial version. \n\n\nMajor Changes \n------------- \n\n-  Initial version. \n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rmlibre/aiootp", "keywords": "encrypt decrypt encryption decryption one one-time onetimepad onetime pad one-time-pad 256 512 xor sha key hash uuid bits 2048 4096 sha3 sha-3 await async RNG PRNG CSPRNG crypto entropy asyncio bitwise security ephemeral integrity utilities anonymous anonymity symmetric simple code cryptography beta testing communications data processing transparent database random number generator coroutine coroutines comprehension", "license": "AGPLv3", "maintainer": "Gonzo Investigatory Journalism Agency, LLC", "maintainer_email": "gonzo.development@protonmail.ch", "name": "aiootp", "package_url": "https://pypi.org/project/aiootp/", "platform": "", "project_url": "https://pypi.org/project/aiootp/", "project_urls": {"Homepage": "https://github.com/rmlibre/aiootp"}, "release_url": "https://pypi.org/project/aiootp/0.4.0/", "requires_dist": ["sympy", "aiofiles", "pybase64", "async-lru", "aioitertools", "asyncio-contextmanager"], "requires_python": "", "summary": "aiootp - an asynchronous one-time-pad based crypto and anonymity library.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"aiootp-asynchronous-one-time-pad-based-crypto-and-anonymity-library\">\n<h2>aiootp - Asynchronous one-time-pad based crypto and anonymity library.</h2>\n<p><tt>aiootp</tt> is an asynchronous library providing access to cryptographic\nprimatives and abstractions, transparently encrypted / decrypted file\nI/O and databases, as well as powerful, pythonic utilities that\nsimplify data processing &amp; cryptographic procedures in python code.\nThis library\u2019s cipher is an implementation of the <strong>one-time pad</strong>.\nThe aim is to create a simple, standard, efficient implementation of\nthis unbreakable cipher, to give users and applications access to\nuser-friendly cryptographic tools, and to increase the overall\nsecurity, privacy, and anonymity on the web, and in the digital world.\nUsers will find <tt>aiootp</tt> to be easy to write, easy to read, and fun.</p>\n<div id=\"important-disclaimer\">\n<h3>Important Disclaimer</h3>\n<p><tt>aiootp</tt> is experimental software that works with Python 3.6+.\nIt\u2019s a work in progress. The programming API could change with\nfuture updates, and it isn\u2019t bug free. <tt>aiootp</tt> provides powerful\nsecurity tools and misc utilities that\u2019re designed to be\ndeveloper-friendly and privacy preserving.\nAs a security tool, <tt>aiootp</tt> needs to be tested and reviewed\nextensively by the programming and cryptography communities to\nensure its implementations are sound. We provide no guarantees.\nThis software hasn\u2019t yet been audited by third-party security\nprofessionals.</p>\n</div>\n<div id=\"quick-install\">\n<h3>Quick install</h3>\n<p><tt>pip3 install <span class=\"pre\">--user</span> <span class=\"pre\">--upgrade</span> aiootp</tt></p>\n</div>\n<div id=\"some-examples\">\n<h3>Some Examples</h3>\n<p>Users can create and modify transparently encrypted databases:</p>\n<pre>   <span class=\"kn\">import</span> <span class=\"nn\">aiootp</span>\n\n\n   <span class=\"c1\"># Make a new user key for encryption / decryption with a fast,</span>\n\n   <span class=\"c1\"># cryptographically secure pseudo-random number generator -&gt;</span>\n\n   <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">acsprng</span><span class=\"p\">()</span>\n\n\n   <span class=\"c1\"># Create a database object -&gt;</span>\n\n   <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">AsyncDatabase</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n\n   <span class=\"c1\"># Store protected data by a ``tag`` -&gt;</span>\n\n   <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"s2\">\"private_account\"</span>\n\n   <span class=\"n\">salt</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">asalt</span><span class=\"p\">()</span>\n\n   <span class=\"n\">hmac</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ahmac</span><span class=\"p\">(</span><span class=\"s2\">\"password012345\"</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span>\n\n   <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">hmac</span><span class=\"p\">:</span> <span class=\"s2\">\"secured data\"</span><span class=\"p\">}</span>\n\n\n   <span class=\"c1\"># Add to existing stored data -&gt;</span>\n\n   <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">\"password_salt\"</span><span class=\"p\">:</span> <span class=\"n\">salt</span><span class=\"p\">})</span>\n\n\n   <span class=\"c1\"># Read from the database with ``aquery`` -&gt;</span>\n\n   <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">aquery</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">))[</span><span class=\"n\">hmac</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"s1\">'secured data'</span>\n\n\n   <span class=\"c1\"># Or use bracketed lookup (it's an async-safe operation) -&gt;</span>\n\n   <span class=\"n\">salt</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">][</span><span class=\"s2\">\"password_salt\"</span><span class=\"p\">]</span>\n\n   <span class=\"n\">wrong_hmac</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ahmac</span><span class=\"p\">(</span><span class=\"s2\">\"wrong password attempt\"</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span>\n\n   <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">][</span><span class=\"n\">wrong_hmac</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n\n\n   <span class=\"c1\"># Or, pop the value out of the database -&gt;</span>\n\n   <span class=\"n\">account_data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">apop</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)</span>\n\n\n   <span class=\"c1\"># Create child databases accessible from the parent by a ``metatag`` -&gt;</span>\n\n   <span class=\"n\">metatag</span> <span class=\"o\">=</span> <span class=\"s2\">\"child\"</span>\n\n   <span class=\"n\">molly</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ametatag</span><span class=\"p\">(</span><span class=\"n\">metatag</span><span class=\"p\">)</span>\n\n   <span class=\"n\">molly</span><span class=\"p\">[</span><span class=\"s2\">\"hobbies\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"skipping\"</span><span class=\"p\">,</span> <span class=\"s2\">\"punching\"</span><span class=\"p\">]</span>\n\n   <span class=\"n\">molly</span><span class=\"p\">[</span><span class=\"s2\">\"hobbies\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"reading\"</span><span class=\"p\">)</span>\n\n   <span class=\"n\">molly</span><span class=\"p\">[</span><span class=\"s2\">\"hobbies\"</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">[</span><span class=\"s2\">\"hobbies\"</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"kc\">True</span>\n\n   <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">molly</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"n\">AsyncDatabase</span><span class=\"p\">)</span>\n\n\n   <span class=\"c1\"># Write database changes to disk with transparent encryption -&gt;</span>\n\n   <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">asave</span><span class=\"p\">()</span>\n\n\n   <span class=\"c1\"># Delete a child database from the filesystem -&gt;</span>\n\n   <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">adelete_metatag</span><span class=\"p\">(</span><span class=\"s2\">\"child\"</span><span class=\"p\">)</span>\n\n   <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">[</span><span class=\"s2\">\"hobbies\"</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">'AsyncDatabase'</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">'child'</span>\n\n\n   <span class=\"c1\"># Automate the write to disk logic with a context manager -&gt;</span>\n\n   <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">AsyncDatabase</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">db</span><span class=\"p\">:</span>\n\n       <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"s2\">\"tag\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"s2\">\"can be any json serializable object\"</span><span class=\"p\">}</span>\n\n       <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"s2\">\"bitcoin\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"0bb6eee10d2f8f45f8a\"</span>\n\n       <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"s2\">\"lawyer\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"#\"</span><span class=\"p\">:</span> <span class=\"s2\">\"555-555-1000\"</span><span class=\"p\">,</span> <span class=\"s2\">\"$\"</span><span class=\"p\">:</span> <span class=\"mf\">13000.50</span><span class=\"p\">}</span>\n\n       <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"s2\">\"safehouses\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Dublin Forgery\"</span><span class=\"p\">,</span> <span class=\"s2\">\"NY Insurrection\"</span><span class=\"p\">]</span>\n\n\n   <span class=\"c1\"># Make mirrors of databases -&gt;</span>\n\n   <span class=\"n\">new_key</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">acsprng</span><span class=\"p\">()</span>\n\n   <span class=\"n\">new_db</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">AsyncDatabase</span><span class=\"p\">(</span><span class=\"n\">new_key</span><span class=\"p\">)</span>\n\n   <span class=\"k\">await</span> <span class=\"n\">new_db</span><span class=\"o\">.</span><span class=\"n\">amirror_database</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n   <span class=\"k\">assert</span> <span class=\"n\">new_db</span><span class=\"p\">[</span><span class=\"s2\">\"lawyer\"</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"s2\">\"lawyer\"</span><span class=\"p\">]</span>\n\n\n   <span class=\"c1\"># Or make namespaces out of databases for very efficient lookups -&gt;</span>\n\n   <span class=\"n\">namespace</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">new_db</span><span class=\"o\">.</span><span class=\"n\">ainto_namespace</span><span class=\"p\">()</span>\n\n   <span class=\"k\">assert</span> <span class=\"n\">namespace</span><span class=\"o\">.</span><span class=\"n\">bitcoin</span> <span class=\"o\">==</span> <span class=\"n\">new_db</span><span class=\"p\">[</span><span class=\"s2\">\"bitcoin\"</span><span class=\"p\">]</span>\n\n   <span class=\"k\">assert</span> <span class=\"n\">namespace</span><span class=\"o\">.</span><span class=\"n\">lawyer</span> <span class=\"ow\">is</span> <span class=\"n\">new_db</span><span class=\"p\">[</span><span class=\"s2\">\"lawyer\"</span><span class=\"p\">]</span>\n\n\n   <span class=\"c1\"># Delete a database from the filesystem -&gt;</span>\n\n   <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">adelete_database</span><span class=\"p\">()</span>\n\n\n   <span class=\"c1\"># Initialization of a database object is more computationally expensive</span>\n\n   <span class=\"c1\"># than entering its context manager. So keeping a reference to a</span>\n\n   <span class=\"c1\"># preloaded database is a great idea, either call ``asave`` / ``save``</span>\n\n   <span class=\"c1\"># periodically, or open a context with the reference whenever wanting to</span>\n\n   <span class=\"c1\"># capture changes to the filesystem -&gt;</span>\n\n   <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">new_db</span> <span class=\"k\">as</span> <span class=\"n\">db</span><span class=\"p\">:</span>\n\n       <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Saving to disk...\"</span><span class=\"p\">)</span>\n\n\n   <span class=\"c1\"># Transparent and automatic encryption makes persisting sensitive</span>\n\n   <span class=\"c1\"># information very simple. Though, if users do want to encrypt /</span>\n\n   <span class=\"c1\"># decrypt things manually, then databases allow that too -&gt;</span>\n\n   <span class=\"n\">data_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"saturday clients\"</span>\n\n   <span class=\"n\">clients</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Tony\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Maria\"</span><span class=\"p\">]</span>\n\n   <span class=\"n\">encrypted</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">aencrypt</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"n\">data_name</span><span class=\"p\">,</span> <span class=\"n\">plaintext</span><span class=\"o\">=</span><span class=\"n\">clients</span><span class=\"p\">)</span>\n\n   <span class=\"n\">decrypted</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">adecrypt</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"n\">data_name</span><span class=\"p\">,</span> <span class=\"n\">ciphertext</span><span class=\"o\">=</span><span class=\"n\">encrypted</span><span class=\"p\">)</span>\n\n   <span class=\"n\">clients</span> <span class=\"o\">==</span> <span class=\"n\">decrypted</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"kc\">True</span>\n\n\n   <span class=\"c1\">#</span>\n</pre>\n<p>What other tools are available to users?:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiootp</span>\n\n\n<span class=\"c1\"># Async &amp; synchronous versions of almost everything in the library -&gt;</span>\n\n<span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">asha_512</span><span class=\"p\">(</span><span class=\"s2\">\"data\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">sha_512</span><span class=\"p\">(</span><span class=\"s2\">\"data\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">csprng</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">Database</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">root_filename</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">AsyncDatabase</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">root_filename</span>\n\n\n<span class=\"c1\"># Precomputed &amp; organized values that can aid users, like:</span>\n\n<span class=\"c1\"># A dictionary of prime numbers grouped by their bit-size -&gt;</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">primes</span><span class=\"p\">[</span><span class=\"mi\">512</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>    <span class=\"c1\"># &lt;- The first prime greater than 512-bits</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">primes</span><span class=\"p\">[</span><span class=\"mi\">2048</span><span class=\"p\">][</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>    <span class=\"c1\"># &lt;- The last prime less than 2049-bits</span>\n\n\n<span class=\"c1\"># Symmetric one-time-pad encryption of json data -&gt;</span>\n\n<span class=\"n\">plaintext</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"account\"</span><span class=\"p\">:</span> <span class=\"mi\">3311149</span><span class=\"p\">,</span> <span class=\"s2\">\"titles\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"queen b\"</span><span class=\"p\">]}</span>\n\n<span class=\"n\">encrypted</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">json_encrypt</span><span class=\"p\">(</span><span class=\"n\">plaintext</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n<span class=\"n\">decrypted</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">json_decrypt</span><span class=\"p\">(</span><span class=\"n\">encrypted</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">decrypted</span> <span class=\"o\">==</span> <span class=\"n\">plaintext</span>\n\n\n<span class=\"c1\"># Symmetric one-time-pad encryption of binary data -&gt;</span>\n\n<span class=\"n\">binary_data</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">randoms</span><span class=\"o\">.</span><span class=\"n\">urandom</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">)</span>\n\n<span class=\"n\">encrypted</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">bytes_encrypt</span><span class=\"p\">(</span><span class=\"n\">binary_data</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n<span class=\"n\">decrypted</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">bytes_decrypt</span><span class=\"p\">(</span><span class=\"n\">encrypted</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">decrypted</span> <span class=\"o\">==</span> <span class=\"n\">binary_data</span>\n\n\n<span class=\"c1\"># Generators under-pin most procedures in the library -&gt;</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiootp</span> <span class=\"kn\">import</span> <span class=\"n\">json_encode</span>   <span class=\"c1\"># &lt;- A simple generator</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiootp.ciphers</span> <span class=\"kn\">import</span> <span class=\"n\">cipher</span><span class=\"p\">,</span> <span class=\"n\">decipher</span>    <span class=\"c1\"># &lt;- Also simple generators</span>\n\n\n<span class=\"c1\"># Yields plaintext json string in chunks -&gt;</span>\n\n<span class=\"n\">plaintext_generator</span> <span class=\"o\">=</span> <span class=\"n\">json_encode</span><span class=\"p\">(</span><span class=\"n\">plaintext</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># An endless stream of forward + semi-future secure hashes -&gt;</span>\n\n<span class=\"n\">keystream</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># xor's the plaintext chunks with key chunks -&gt;</span>\n\n<span class=\"k\">with</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">cipher</span><span class=\"p\">(</span><span class=\"n\">plaintext_generator</span><span class=\"p\">,</span> <span class=\"n\">keystream</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">encrypting</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># ``list`` returns all generator results in a list</span>\n\n    <span class=\"n\">ciphertext</span> <span class=\"o\">=</span> <span class=\"n\">encrypting</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the auto generated random salt back. It's needed for decryption -&gt;</span>\n\n<span class=\"n\">ciphertext_seed_entropy</span> <span class=\"o\">=</span> <span class=\"n\">keystream</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">(</span><span class=\"n\">exit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># This example was a low-level look at the encryption algorithm. And it</span>\n\n<span class=\"c1\"># was seven lines of code. The Comprende class makes working with</span>\n\n<span class=\"c1\"># generators a breeze, &amp; working with generators makes solving problems</span>\n\n<span class=\"c1\"># in bite-sized chunks a breeze. Here's the two-liner that also takes</span>\n\n<span class=\"c1\"># care of managing the random salt -&gt;</span>\n\n<span class=\"n\">ciphertext</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">json_encode</span><span class=\"p\">(</span><span class=\"n\">plaintext</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n\n<span class=\"n\">plaintext_json</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">ciphertext</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># We just used the ``list`` &amp; ``join`` end-points to get the full series</span>\n\n<span class=\"c1\"># of results from the underlying generators. These results are lru-cached</span>\n\n<span class=\"c1\"># to facilitate their efficient reuse for alternate computations. The</span>\n\n<span class=\"c1\"># ``Comprende`` context manager clears the opened instance's cache on exit,</span>\n\n<span class=\"c1\"># this clears every instance's cache -&gt;</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">Comprende</span><span class=\"o\">.</span><span class=\"n\">clear_class</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># The other end-points can be found under ``aiootp.Comprende.eager_methods`` -&gt;</span>\n\n<span class=\"p\">{</span>\n    <span class=\"s1\">'adeque'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'adict'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aexhaust'</span><span class=\"p\">,</span>    <span class=\"c1\"># &lt;- Doesn't cache results, only returns the last element</span>\n    <span class=\"s1\">'ajoin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'alist'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aset'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'deque'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'dict'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'exhaust'</span><span class=\"p\">,</span>    <span class=\"c1\"># &lt;- Doesn't cache results, only returns the last element</span>\n    <span class=\"s1\">'join'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'list'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'set'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"c1\"># A lot of this magic with generators is made possible with a sweet little</span>\n\n<span class=\"c1\"># ``comprehension`` decorator. It reimagines the generator interface by</span>\n\n<span class=\"c1\"># wrapping generators in the innovative ``Comprende`` class, giving every</span>\n\n<span class=\"c1\"># generator access to a plethora of data processing &amp; cryptographic utilities</span>\n\n<span class=\"c1\"># right out of the box -&gt;</span>\n\n<span class=\"nd\">@aiootp</span><span class=\"o\">.</span><span class=\"n\">comprehension</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">gen</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">z</span>\n\n\n<span class=\"c1\"># Drive the generator forward with a context manager -&gt;</span>\n\n<span class=\"k\">with</span> <span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">example</span><span class=\"p\">:</span>\n\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n\n    <span class=\"c1\"># Calling the object will send ``None`` into the coroutine by default -&gt;</span>\n\n    <span class=\"n\">sum_of_x_y</span> <span class=\"o\">=</span> <span class=\"n\">example</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">sum_of_x_y</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n\n    <span class=\"c1\"># Passing ``z`` will send it into the coroutine, cause it to reach the</span>\n\n    <span class=\"c1\"># return statement &amp; exit the context manager -&gt;</span>\n\n    <span class=\"n\">example</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># The result returned from the generator is now available -&gt;</span>\n\n<span class=\"n\">product_of_x_y_z</span> <span class=\"o\">=</span> <span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">product_of_x_y_z</span> <span class=\"o\">==</span> <span class=\"mi\">6</span>\n\n\n<span class=\"c1\"># The ``example`` variable is actually the ``Comprende`` object,</span>\n\n<span class=\"c1\"># which redirects values to the wrapped generator's ``send()``</span>\n\n<span class=\"c1\"># method using the instance's ``__call__()`` method.</span>\n\n\n<span class=\"c1\"># Here's another example -&gt;</span>\n\n<span class=\"nd\">@aiootp</span><span class=\"o\">.</span><span class=\"n\">comprehension</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">squares</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n\n        <span class=\"k\">yield</span> <span class=\"n\">number</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n\n\n<span class=\"k\">for</span> <span class=\"n\">hashed_square</span> <span class=\"ow\">in</span> <span class=\"n\">squares</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sha_256</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># This is an example chained generator that hashes then yields each output.</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hashed_square</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Chained ``Comprende`` generators are excellent inline data processors -&gt;</span>\n\n<span class=\"n\">base64_data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">squares</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_base64</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># This will stringify each output of the generator, then base64 encode them -&gt;</span>\n\n    <span class=\"n\">base64_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Async ``Comprende`` coroutines have almost exactly the same interface as</span>\n\n<span class=\"c1\"># synchronous ones -&gt;</span>\n\n<span class=\"nd\">@aiootp</span><span class=\"o\">.</span><span class=\"n\">comprehension</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">gen</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Because having a return statement in an async generator is a</span>\n\n    <span class=\"c1\"># SyntaxError, the return value is expected to be passed into</span>\n\n    <span class=\"c1\"># UserWarning, and then raised to propagate upstream. It's then</span>\n\n    <span class=\"c1\"># available from the instance's ``aresult`` method -&gt;</span>\n\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">z</span>\n\n    <span class=\"k\">raise</span> <span class=\"ne\">UserWarning</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Drive the generator forward.</span>\n\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">gen</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">example</span><span class=\"p\">:</span>\n\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n\n    <span class=\"c1\"># Awaiting the ``__call__`` method will send ``None`` into the</span>\n\n    <span class=\"c1\"># coroutine by default -&gt;</span>\n\n    <span class=\"n\">sum_of_x_y</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">example</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">sum_of_x_y</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n\n    <span class=\"c1\"># Passing ``z`` will send it into the coroutine, cause it to reach the</span>\n\n    <span class=\"c1\"># raise statement which will exit the context manager gracefully -&gt;</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">example</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># The result returned from the generator is now available -&gt;</span>\n\n<span class=\"n\">product_of_x_y_z</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">aresult</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">product_of_x_y_z</span> <span class=\"o\">==</span> <span class=\"mi\">6</span>\n\n\n<span class=\"c1\"># Let's see some other ways async generators mirror synchronous ones -&gt;</span>\n\n<span class=\"nd\">@aiootp</span><span class=\"o\">.</span><span class=\"n\">comprehension</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">squares</span><span class=\"p\">():</span>\n\n    <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n\n        <span class=\"k\">yield</span> <span class=\"n\">number</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n\n        <span class=\"n\">number</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"c1\"># This is a chained async generator that salts then hashes then yields</span>\n\n<span class=\"c1\"># each output -&gt;</span>\n\n<span class=\"n\">salt</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">acsprng</span><span class=\"p\">()</span>\n\n<span class=\"n\">hashed_squares</span> <span class=\"o\">=</span> <span class=\"n\">squares</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">asha_512</span><span class=\"p\">(</span><span class=\"n\">salt</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Want only the first twenty results? -&gt;</span>\n\n<span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">hashed_square</span> <span class=\"ow\">in</span> <span class=\"n\">hashed_squares</span><span class=\"p\">[:</span><span class=\"mi\">20</span><span class=\"p\">]:</span>\n\n    <span class=\"c1\"># Then you can slice the generator.</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hashed_square</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Users can slice generators to receive more complex output rules, like:</span>\n\n<span class=\"c1\"># Getting every second result starting from the third result to the 50th -&gt;</span>\n\n<span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">hashed_squares</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># ``Comprende`` generators have loads of tooling for users to explore.</span>\n\n<span class=\"c1\"># Play around with it and take a look at the other chainable generator</span>\n\n<span class=\"c1\"># methods in ``aiootp.Comprende.lazy_generators``.</span>\n\n<span class=\"p\">{</span>\n    <span class=\"s1\">'_agetitem'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'_getitem'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aascii_to_int'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'abin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'abytes'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'abytes_decrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'abytes_encrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'adecode'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'adecrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'adelimit'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'adelimit_resize'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aencode'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aencrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'afeed'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'afeed_self'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'afrom_base'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'afrom_base64'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'ahalt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'ahex'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aint'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aint_to_ascii'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'ajson_dumps'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'ajson_loads'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'amap_decrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'amap_encrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'arandom_sleep'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'areplace'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aresize'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'ascii_to_int'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'asha_256'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'asha_256_hmac'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'asha_512'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'asha_512_hmac'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aslice'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'asplit'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'astr'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'atag'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'atimeout'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'ato_base'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'ato_base64'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'azfill'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'bin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'bytes'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'bytes_decrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'bytes_encrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'decode'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'decrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'delimit'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'delimit_resize'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'encode'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'encrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'feed'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'feed_self'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'from_base'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'from_base64'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'halt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hex'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'int'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'int_to_ascii'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'json_dumps'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'json_loads'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'map_decrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'map_encrypt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'random_sleep'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'replace'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'resize'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sha_256'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sha_256_hmac'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sha_512'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sha_512_hmac'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'slice'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'split'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'str'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'tag'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'timeout'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'to_base'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'to_base64'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'zfill'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"c1\"># Let's look at a more complicated example with the one-time pad</span>\n\n<span class=\"c1\"># keystreams. There are many uses for endless streams of deterministic</span>\n\n<span class=\"c1\"># key material outside of one-time pad cipher keys. They can, for instance,</span>\n\n<span class=\"c1\"># give hash tables order that's cryptographically determined &amp; obscured -&gt;</span>\n\n<span class=\"n\">ordered_entries</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">salt</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">acsprng</span><span class=\"p\">()</span>\n\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">akeys</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Resize each output of ``names`` to 32 characters, tag each output with</span>\n\n<span class=\"c1\"># an incrementing number, &amp; stop the stream after 0.1 seconds -&gt;</span>\n\n<span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"n\">aresize</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">atag</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">atimeout</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">):</span>\n\n    <span class=\"n\">ordered_entries</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">index</span><span class=\"si\">}</span><span class=\"s2\"> data organized by the stream of hashes\"</span>\n\n\n<span class=\"c1\"># Retrieving items in the correct order requires knowing both ``key`` &amp; ``salt``</span>\n\n<span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">akeys</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">aresize</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">atag</span><span class=\"p\">():</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">ordered_entries</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">index</span><span class=\"si\">}</span><span class=\"s2\"> data organized by the stream of hashes\"</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"There are no more entries after </span><span class=\"si\">{</span><span class=\"n\">index</span><span class=\"si\">}</span><span class=\"s2\"> iterations.\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">index</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ordered_entries</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n\n<span class=\"c1\"># There's a prepackaged ``Comprende`` generator function that does</span>\n\n<span class=\"c1\"># encryption / decryption of key ordered hash maps. First let's make an</span>\n\n<span class=\"c1\"># actual encryption key stream that's different from ``names`` -&gt;</span>\n\n<span class=\"n\">key_stream</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">akeys</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">pid</span><span class=\"o\">=</span><span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">sha_256</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># And example plaintext -&gt;</span>\n\n<span class=\"n\">plaintext</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"s2\">\"Some kinda message...\"</span>\n\n\n<span class=\"c1\"># And let's make sure to clean up after ourselves with a context manager -&gt;</span>\n\n<span class=\"n\">data_stream</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">adata</span><span class=\"p\">(</span><span class=\"n\">plaintext</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">data_stream</span><span class=\"o\">.</span><span class=\"n\">amap_encrypt</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">key_stream</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">encrypting</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># ``adata`` takes a sequence, &amp; ``amap_encrypt`` takes two iterables,</span>\n\n    <span class=\"c1\"># a stream of names for the hash map, &amp; the stream of key material.</span>\n\n    <span class=\"n\">ciphertext_hashmap</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">encrypting</span><span class=\"o\">.</span><span class=\"n\">adict</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Now we'll pick the chunks out in the order produced by ``names`` to</span>\n\n<span class=\"c1\"># decrypt them -&gt;</span>\n\n<span class=\"n\">ciphertext_stream</span> <span class=\"o\">=</span> <span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">apick</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">ciphertext_hashmap</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">ciphertext_stream</span><span class=\"o\">.</span><span class=\"n\">amap_decrypt</span><span class=\"p\">(</span><span class=\"n\">key_stream</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">decrypting</span><span class=\"p\">:</span>\n\n    <span class=\"n\">decrypted</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">decrypting</span><span class=\"o\">.</span><span class=\"n\">ajoin</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">decrypted</span> <span class=\"o\">==</span> <span class=\"n\">plaintext</span>\n\n\n<span class=\"c1\"># This is really neat, &amp; makes sharding encrypted data incredibly easy.</span>\n\n\n<span class=\"c1\">#</span>\n</pre>\n<p>Let\u2019s take a deep dive into the low-level xor procedure used to implement the one-time-pad:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiootp</span>\n\n<span class=\"c1\"># It is a ``Comprende`` generator -&gt;</span>\n\n<span class=\"nd\">@aiootp</span><span class=\"o\">.</span><span class=\"n\">comprehension</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># ``datastreams`` are typically just a single iterable of integers that</span>\n\n<span class=\"c1\"># are either plaintext or ciphertext. ``key`` is by default the ``keys``</span>\n\n<span class=\"c1\"># generator. ``buffer_size`` is by default ``10**20``, which represents</span>\n\n<span class=\"c1\"># how many (20) of the most significant decimal digits in each integer</span>\n\n<span class=\"c1\"># key produced will be excluded from use for xoring. This is necessary</span>\n\n<span class=\"c1\"># because the first digits in a ``int(key, 16)`` converted key are less</span>\n\n<span class=\"c1\"># random than the least significant digits. 20 decimal digits is roughly</span>\n\n<span class=\"c1\"># 64-bits -&gt;</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">xor</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">datastreams</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">buffer_size</span><span class=\"o\">=</span><span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">power10</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"n\">convert</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># ``convert`` is an optional flag to allow users to pass a preconverted</span>\n\n    <span class=\"c1\"># interable of integer key material -&gt;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">convert</span><span class=\"p\">:</span>\n\n        <span class=\"n\">entropy</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n\n        <span class=\"n\">entropy</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n\n    <span class=\"c1\"># If more than one iterable of plaintext or ciphertext integers are</span>\n\n    <span class=\"c1\"># passed, then they're processed one at a time here. Reversing the</span>\n\n    <span class=\"c1\"># procedure when more than one data stream is used is not supported -&gt;</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">items</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">datastreams</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># Initialize the result. Anything xor'd by 0 returns itself -&gt;</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n\n            <span class=\"c1\"># For each element of each plaintext or ciphertext iterable,</span>\n\n            <span class=\"c1\"># a seed is cached to increase efficiency when growing the key -&gt;</span>\n\n            <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"n\">entropy</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">entropy</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Each time ``entropy`` is called, it pulls 2 sha3_512 hashes</span>\n\n            <span class=\"c1\"># from the forward + semi-future secure key stream whose</span>\n\n            <span class=\"c1\"># concatenated digests are integer converted &amp; multiplied with</span>\n\n            <span class=\"c1\"># another pair of hashes from the stream. This creates keys of</span>\n\n            <span class=\"c1\"># sizes that are multiples of 2048-bits. The new key is then</span>\n\n            <span class=\"c1\"># xor'd with the 2048-bit seed to prevent any cryptanalysis</span>\n\n            <span class=\"c1\"># involving factoring the multiplication -&gt;</span>\n\n            <span class=\"n\">current_key</span> <span class=\"o\">=</span> <span class=\"n\">seed</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">entropy</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">entropy</span><span class=\"p\">())</span>\n\n            <span class=\"c1\"># The resulting key is then xor'd with the plaintext or</span>\n\n            <span class=\"c1\"># ciphertext element -&gt;</span>\n\n            <span class=\"n\">tested</span> <span class=\"o\">=</span> <span class=\"n\">item</span> <span class=\"o\">^</span> <span class=\"n\">current_key</span>\n\n            <span class=\"c1\"># And the size of the item is increased by the buffer to account</span>\n\n            <span class=\"c1\"># for the less random most significant bits -&gt;</span>\n\n            <span class=\"n\">item_size</span> <span class=\"o\">=</span> <span class=\"n\">item</span> <span class=\"o\">*</span> <span class=\"n\">buffer_size</span>\n\n            <span class=\"c1\"># Next, the key is grown to be larger than the plaintext element</span>\n\n            <span class=\"c1\"># or, if the reverse operation is being done on ciphertext, then</span>\n\n            <span class=\"c1\"># the growth is stopped if a plaintext is revealed, since the</span>\n\n            <span class=\"c1\"># plaintext is always smaller than the key. Multiplying ``tested``</span>\n\n            <span class=\"c1\"># by 100 gets rid of rounding errors, as sometimes xor'ing two</span>\n\n            <span class=\"c1\"># integers can result in a number that's larger than both of them</span>\n\n            <span class=\"c1\"># by one significant digit.</span>\n\n            <span class=\"k\">while</span> <span class=\"n\">tested</span> <span class=\"o\">*</span> <span class=\"mi\">100</span> <span class=\"o\">&gt;</span> <span class=\"n\">current_key</span> <span class=\"ow\">and</span> <span class=\"n\">item_size</span> <span class=\"o\">&gt;</span> <span class=\"n\">current_key</span><span class=\"p\">:</span>\n\n                <span class=\"c1\"># If the key needs to grow again, then the current key is</span>\n\n                <span class=\"c1\"># multiplied by another 2048-bit compund key &amp; the result</span>\n\n                <span class=\"c1\"># is xor'd with the seed to eliminate the potential of</span>\n\n                <span class=\"c1\"># factoring the result -&gt;</span>\n\n                <span class=\"n\">current_key</span> <span class=\"o\">=</span> <span class=\"n\">seed</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">current_key</span> <span class=\"o\">*</span> <span class=\"n\">entropy</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"n\">entropy</span><span class=\"p\">())</span>\n\n                <span class=\"c1\"># We then reset ``tested`` to test until plaintext is revealed</span>\n\n                <span class=\"c1\"># or, an appropriate ciphertext is made -&gt;</span>\n\n                <span class=\"n\">tested</span> <span class=\"o\">=</span> <span class=\"n\">item</span> <span class=\"o\">^</span> <span class=\"n\">current_key</span>\n\n            <span class=\"c1\"># If the procedure succeeds in either case, the result is stored</span>\n\n            <span class=\"c1\"># or, yielded when there are no more elements in the zipped</span>\n\n            <span class=\"c1\"># datastream iteration -&gt;</span>\n\n            <span class=\"n\">result</span> <span class=\"o\">^=</span> <span class=\"n\">tested</span>\n\n        <span class=\"k\">yield</span> <span class=\"n\">result</span>\n\n<span class=\"c1\"># This is a very space-efficient algorithm for a one-time-pad that adapts</span>\n\n<span class=\"c1\"># dynamically to increased plaintext or ciphertext sizes. Both because</span>\n\n<span class=\"c1\"># it's built on generators, &amp; because an infinite stream of key material</span>\n\n<span class=\"c1\"># can efficiently be produced from a finite-sized key &amp; an ephemeral salt.</span>\n\n\n<span class=\"c1\">#</span>\n</pre>\n<p>Here\u2019s a quick overview of this package\u2019s modules:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiootp</span>\n\n\n<span class=\"c1\"># Commonly used constants, datasets &amp; functionality across all modules -&gt;</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">commons</span>\n\n\n<span class=\"c1\"># The basic utilities &amp; abstractions of the package's architecture -&gt;</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">generics</span>\n\n\n<span class=\"c1\"># This module is responsible for providing entropy to the package -&gt;</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">randoms</span>\n\n\n<span class=\"c1\"># The higher-level abstractions used to implement the one-time pad -&gt;</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">ciphers</span>\n\n\n<span class=\"c1\"># The higher-level abstractions used to create / manage key material -&gt;</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">keygens</span>\n\n\n<span class=\"c1\"># Common system paths &amp; the ``pathlib.Path`` utility -&gt;</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">paths</span>\n\n\n<span class=\"c1\"># Global async functionalities &amp; abstractions -&gt;</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">asynchs</span>\n\n\n<span class=\"c1\"># Decorators &amp; classes able to benchmark async/sync functions &amp; generators -&gt;</span>\n\n<span class=\"n\">aiootp</span><span class=\"o\">.</span><span class=\"n\">debuggers</span>\n\n\n<span class=\"c1\">#</span>\n</pre>\n</div>\n<div id=\"faq\">\n<h3>FAQ</h3>\n<p><strong>Q: What is the one-time-pad?</strong></p>\n<p>A: It\u2019s a provably unbreakable cipher. It\u2019s typically thought to be too cumbersome a cipher because it has strict requirements. Key size is one requirement, since keys must be at least as large as the plaintext in order to ensure this unbreakability. We\u2019ve simplified this requirement by using a forward secret and semi-future secret key ratchet algorithm, with ephemeral salts for each stream, allowing users to securely produce endless streams of key material as needed from a single finite size 512-bit long-term key. This algorithmic approach lends itself to great optimizations, since hash processing hardware/sorftware is continually pushed to the edges of efficiency.</p>\n<p><strong>Q: What do you mean the ``aiootp.keys`` generator produces forward &amp; semi-future secure key material?</strong></p>\n<p>A: The infinite stream of key material produced by that generator has amazing properties. Under the hood it\u2019s a <tt>hashlib.sha3_512</tt> key ratchet algorithm. It\u2019s internal state consists of a seed hash, &amp; three <tt>hashlib.sha3_512</tt> objects primed iteratively with the one prior and the seed hash. The first object is updated with the seed, its prior output, and the entropy that may be sent into the generator as a coroutine. This first object is then used to update the last two objects before yielding the last two\u2019s concatenated results. The seed is the hash of a primer seed, which itself is the hash of the input key material, a random salt, and a user-defined ID value which can safely distinguish streams with the same key material. This algorithm is forward secure because compromising a future key will not compromise past keys since these hashes are irreversibly constructed. It\u2019s also semi-future secure since having a past key doesn\u2019t allow you to compute future keys without also compromising the seed hash, and the first ratcheting <tt>hashlib</tt> object. Since those two states are never disclosed or used for encryption, the key material produced is future secure with respect to itself only. Full future-security would allow for the same property even if the seed &amp; ratchet object\u2019s state were compromised. This feature can, however, be added to the algorithm since the generator itself can receive entropy externally from a user at any arbitrary point in its execution, say, after computing a shared diffie-hellman exchange key.</p>\n<p><strong>Q: How fast is this implementation of the one-time pad cipher?</strong></p>\n<p>A: Well, because it relies on <tt>hashlib.sha3_512</tt> hashing to build key material streams, it\u2019s rather efficient, encrypting &amp; decrypting about 8 MB/s on a ~1.5 GHz core.</p>\n<p><strong>Q: Why make a new cipher when AES is strong enough?</strong></p>\n<p>A: Although primatives like AES are strong enough for now, there\u2019s no guarantee that future hardware or algorithms won\u2019t be developed that break them. In fact, AES\u2019s theoretical bit-strength has dropped over the years because of hardware and algorithmic developments. It\u2019s still considered a secure cipher, but the <strong>one-time pad</strong> isn\u2019t considered theoretically \u201cstrong enough\u201d, instead it\u2019s mathematically proven to be unbreakable. Such a cryptographic guarantee is too profound not to develop further into an efficient, accessible standard.</p>\n<p><strong>Q: What size keys does this one-time pad cipher use?</strong></p>\n<p>A: It\u2019s been designed to work with 512-bit hexidecimal or 128 arbitrary character keys.</p>\n<p><strong>Q: What\u2019s up with the ``AsyncDatabase`` / ``Database``?</strong></p>\n<p>A: The idea is to create an intuitive, pythonic interface to a transparently encrypted and decrypted persistence tool that also cryptographically obscures metadata. It\u2019s designed to work with json serializable data, which gives it native support for some basic python datatypes. It needs improvement with regard to disk memory efficiency. So, it\u2019s still a work in progress, albeit a very nifty one.</p>\n<p><strong>Q: Why are the modules transformed into ``Namespace`` objects?</strong></p>\n<p>A: We overwrite our modules in this package to have a more fine-grained control over what part of the package\u2019s internal state is exposed to users and applications. The goal is make it more difficult for users to inadvertently jeopardize their security tools, and minimize the attack surface available to adversaries. The <tt>aiootp.Namespace</tt> class also makes it easier to coordinate and decide the library\u2019s UI/UX across the package.</p>\n</div>\n</div>\n<div id=\"known-issues\">\n<h2><tt>Known Issues</tt></h2>\n<ul>\n<li>The test suite for this software is under construction, &amp; what tests\nhave been published are currently inadequate to the needs of\ncryptography software.</li>\n<li>This package is currently in beta testing. Contributions are welcome.\nSend us a message if you spot a bug or security vulnerability:<ul>\n<li>&lt; <a href=\"mailto:gonzo.development%40protonmail.ch\">gonzo<span>.</span>development<span>@</span>protonmail<span>.</span>ch</a> &gt;</li>\n<li>&lt; 31FD CC4F 9961 AFAC 522A 9D41 AE2B 47FA 1EF4 4F0A &gt;</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2><tt>Changelog</tt></h2>\n</div>\n<div id=\"changes-for-version-0-4-0\">\n<h2>Changes for version 0.4.0</h2>\n<div id=\"major-changes\">\n<h3>Major Changes</h3>\n<ul>\n<li>Fixed bug in <tt>aiootp.abytes_encrypt</tt> function which inaccurately called\na synchronous <tt>Comprende</tt> end-point method on the underlying async\ngenerator, causing an exception and failure to function.</li>\n<li>Changed the procedures in <tt>akeys</tt> &amp; <tt>keys</tt> that generate their internal\nkey derivation functions. They\u2019re now slightly faster to initialize &amp;\nmore theoretically secure since each internal state is fed by a seed\nwhich isn\u2019t returned to the user. This encryption algorithm change is\nincompatible with the encryption algorithms of past versions.</li>\n</ul>\n</div>\n<div id=\"minor-changes\">\n<h3>Minor Changes</h3>\n<ul>\n<li>Various code cleanups.</li>\n<li>Various inaccurate docstrings fixed.</li>\n<li>Keyword arguments in <tt><span class=\"pre\">Keys().test_hmac</span></tt> &amp; <tt><span class=\"pre\">AsyncKeys().atest_hmac</span></tt>\nhad their order switched to be slightly more friendly to use.</li>\n<li>Added documentation to <tt>README.rst</tt> on the inner workings of the\none-time-pad algorithm\u2019s implementation.</li>\n<li>Made <tt>Compende.arandom_sleep</tt> &amp; <tt>Compende.random_sleep</tt> chainable\ngenerator methods.</li>\n<li>Changed the <tt>Compende.adelimit_resize</tt> &amp; <tt>Compende.delimit_resize</tt>\nalgorithms to not yield inbetween two joined delimiters in a sequence\nbeing resized.</li>\n</ul>\n</div>\n</div>\n<div id=\"changes-for-version-0-3-1\">\n<h2>Changes for version 0.3.1</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">Minor Changes</span></h2>\n<ul>\n<li>Fixed bug where a static method in <tt>AsyncDatabase</tt> &amp; <tt>Database</tt> was\nwrongly labelled a class method causing a failure to initialize.</li>\n</ul>\n</div>\n<div id=\"changes-for-version-0-3-0\">\n<h2>Changes for version 0.3.0</h2>\n<div id=\"id2\">\n<h3>Major Changes</h3>\n<ul>\n<li>The <tt>AsyncDatabase</tt> &amp; <tt>Database</tt> now use the more secure <tt>afilename</tt>\n&amp; <tt>filename</tt> methods to derive the hashmap name and encryption streams\nfrom a user-defined tag internal to their <tt>aencrypt</tt> / <tt>adecrypt</tt> /\n<tt>encrypt</tt> / <tt>decrypt</tt> methods, as well as, prior to them getting called.\nThis will break past versions of databases\u2019 ability to open their files.</li>\n<li>The package now has built-in functions for using the one-time-pad\nalgorithm to encrypt &amp; decrypt binary data instead of just strings\nor integers. They are available in <tt>aiootp.abytes_encrypt</tt>,\n<tt>aiootp.abytes_decrypt</tt>, <tt>aiootp.bytes_encrypt</tt> &amp; <tt>aiootp.bytes_decrypt</tt>.</li>\n<li>The <tt>Comprende</tt> class now has generators that do encryption &amp; decryption\nof binary data as well. They are available from any <tt>Comprende</tt> generator\nby the <tt>abytes_encrypt</tt>, <tt>abytes_decrypt</tt>, <tt>bytes_encrypt</tt> &amp; <tt>bytes_decrypt</tt>\nchainable method calls.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>Minor Changes</h3>\n<ul>\n<li>Fixed typos and inaccuracies in various docstrings.</li>\n<li>Added a <tt>__ui_coordination.py</tt> module to handle inserting functionality\nfrom higher-level to lower-level modules and classes.</li>\n<li>Various code clean ups and redundancy eliminations.</li>\n<li><tt>AsyncKeys</tt> &amp; <tt>Keys</tt> classes now only update their <tt>self.salt</tt> key\nby default when their <tt>areset</tt> &amp; <tt>reset</tt> methods are called. This\naligns more closely with their intended use.</li>\n<li>Added <tt>arandom_sleep</tt> &amp; <tt>random_sleep</tt> chainable methods to the\n<tt>Comprende</tt> class which yields outputs of generators after a random\nsleep for each iteration.</li>\n<li>Added several other chainable methods to the <tt>Comprende</tt> class for\nstring &amp; bytes data processing. They\u2019re viewable in <tt>Comprende.lazy_generators</tt>.</li>\n<li>Added new, initial tests to the test suite.</li>\n</ul>\n</div>\n</div>\n<div id=\"changes-for-version-0-2-0\">\n<h2>Changes for version 0.2.0</h2>\n<div id=\"id4\">\n<h3>Major Changes</h3>\n<ul>\n<li>Added ephemeral salts to the <tt>AsyncDatabase</tt> &amp; <tt>Database</tt> file\nencryption procedures. This is a major security fix, as re-encryption\nof files with the same tag in a database with the same open key would\nuse the same streams of key material each time, breaking encryption if\ntwo different versions of a tag file\u2019s ciphertext stored to disk were\navailable to an adversary. The database methods <tt>encrypt</tt>, <tt>decrypt</tt>,\n<tt>aencrypt</tt> &amp; <tt>adecrypt</tt> will now produce and decipher true one-time\npad ciphertext with these ephemeral salts.</li>\n<li>The <tt>aiootp.subkeys</tt> &amp; <tt>aiootp.asubkeys</tt> generators were revamped\nto use the <tt>keys</tt> &amp; <tt>akeys</tt> generators internally instead of using\ntheir own, slower algorithm.</li>\n<li><tt>AsyncDatabase</tt> file deletion is now asynchronous by running the\n<tt>builtins.os.remove</tt> function in an async thread executor. The\ndecorator which does the magic is available at <tt>aiootp.asynchs.executor_wrapper</tt>.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>Minor Changes</h3>\n<ul>\n<li>Fix typos in <tt>__root_salt</tt> &amp; <tt>__aroot_salt</tt> docstrings. Also replaced\nthe <tt>hash(self)</tt> argument for their <tt>lru_cache</tt>  &amp; <tt>alru_cache</tt>\nwith a secure hmac instead.</li>\n<li>add <tt>gi_frame</tt>, <tt>gi_running</tt>, <tt>gi_code</tt>, <tt>gi_yieldfrom</tt>,\n<tt>ag_frame</tt>, <tt>ag_running</tt>, <tt>ag_code</tt> &amp; <tt>ag_await</tt> properties to\n<tt>Comprende</tt> class to mirror async/sync generators more closely.</li>\n<li>Remove <tt>ajson_encrypt</tt>, <tt>ajson_decrypt</tt>, <tt>json_encrypt</tt>,\n<tt>json_decrypt</tt> functions\u2019 internal creation of dicts to contain the\nplaintext. It was unnecessary &amp; therefore wasteful.</li>\n<li>Fix docstrings in <tt>OneTimePad</tt> methods mentioning <tt>parent</tt> kwarg which\nis a reference to deleted, refactored code.</li>\n<li>Fix incorrect docstrings in databases <tt>namestream</tt> &amp; <tt>anamestream</tt>\nmethods.</li>\n<li>Added <tt>ASYNC_GEN_THROWN</tt> constant to <tt>Comprende</tt> class to try to stop\nan infrequent &amp; difficult to debug <tt>RuntimeError</tt> when async generators\ndo not stop after receiving an <tt>athrow</tt>.</li>\n<li>Database tags are now fully loaded when they\u2019re copied using the methods\n<tt>into_namespace</tt> &amp; <tt>ainto_namespace</tt>.</li>\n<li>Updated inaccurate docstrings in <tt>map_encrypt</tt>, <tt>amap_encrypt</tt>,\n<tt>map_decrypt</tt> &amp; <tt>amap_decrypt</tt> <tt>OneTimePad</tt> methods.</li>\n<li>Added <tt>acustomize_parameters</tt> async function to <tt>aiootp.generics</tt>\nmodule.</li>\n<li>Various code clean ups.</li>\n</ul>\n</div>\n</div>\n<div id=\"changes-for-version-0-1-0\">\n<h2>Changes for version 0.1.0</h2>\n<div id=\"id6\">\n<h3>Minor Changes</h3>\n<ul>\n<li>Initial version.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>Major Changes</h3>\n<ul>\n<li>Initial version.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7191398, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9541a137bce2d6a712da8b7e3c5b00da", "sha256": "532786011bf794743525219f52c07bca15110253dd65b5c8c1ae295d71a0ecf5"}, "downloads": -1, "filename": "aiootp-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9541a137bce2d6a712da8b7e3c5b00da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 278333, "upload_time": "2020-04-30T20:13:16", "upload_time_iso_8601": "2020-04-30T20:13:16.161520Z", "url": "https://files.pythonhosted.org/packages/5a/09/6b267fa311f4d485402cb65dfcb8e57fe9df4ad0693f4123c27033530c01/aiootp-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7d8c8f8ba704a02a829a5e0b771af1a", "sha256": "3391ddfd5dbf93150ec455e62c21a9aa15acc2ed2509126e455658262fcaf664"}, "downloads": -1, "filename": "aiootp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f7d8c8f8ba704a02a829a5e0b771af1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 301305, "upload_time": "2020-04-30T20:13:23", "upload_time_iso_8601": "2020-04-30T20:13:23.807517Z", "url": "https://files.pythonhosted.org/packages/fd/dc/1ad31143511d99c1ae42a219ba2392c2e70064336380b1b875372108e7f6/aiootp-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "14e4545e8cdfc46a4a6cdbeddccdd5be", "sha256": "a62136b3227f396770cec6322bb9c5b220ad7114a93266441d65cdede14fdd1b"}, "downloads": -1, "filename": "aiootp-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "14e4545e8cdfc46a4a6cdbeddccdd5be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 280353, "upload_time": "2020-05-04T21:48:53", "upload_time_iso_8601": "2020-05-04T21:48:53.042775Z", "url": "https://files.pythonhosted.org/packages/dc/e2/6d26da04510a1ba6135469e4f1332f61b83e8f962d96451a4421512de584/aiootp-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6362fccd14ee27ddd4eb90787c142b96", "sha256": "ac6358c761cbfd91523ab747a4fabb769c6874a16561f448a85e5f0c67f4f598"}, "downloads": -1, "filename": "aiootp-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6362fccd14ee27ddd4eb90787c142b96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 308487, "upload_time": "2020-05-04T21:48:57", "upload_time_iso_8601": "2020-05-04T21:48:57.462045Z", "url": "https://files.pythonhosted.org/packages/67/06/7c79ba2d759ca071e3a8138d460493ad603fc5737ead875671564b8c8ded/aiootp-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "41869d361ea0bb5c40f00fb8aec3917f", "sha256": "8c7603b895fef97125a3d8687180d79d20d8b63b45db74640f1dc08d271d3836"}, "downloads": -1, "filename": "aiootp-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "41869d361ea0bb5c40f00fb8aec3917f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 282824, "upload_time": "2020-05-07T02:13:21", "upload_time_iso_8601": "2020-05-07T02:13:21.187156Z", "url": "https://files.pythonhosted.org/packages/48/02/a1ecb69424e0e351d2b537d1d35dc660b5563289683a534004ef4bba8192/aiootp-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e4d224b7ccc88539944c9165b479f1e", "sha256": "48a7c0b493de06d5a0db15c2f8cf0b503b1cd4f3deeab47ad04ecf61efe8baeb"}, "downloads": -1, "filename": "aiootp-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7e4d224b7ccc88539944c9165b479f1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 319480, "upload_time": "2020-05-07T02:13:24", "upload_time_iso_8601": "2020-05-07T02:13:24.642595Z", "url": "https://files.pythonhosted.org/packages/67/22/747d6119124a75fc8d10bda1c132f21c2bf5e90a9da84e2eeaa445b8019d/aiootp-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "f2bba0be13d9e5c7e8622cc91e905513", "sha256": "4b82375b65fef3982307de7dd6a3943961ab8e24c3651d25b202530cf0e4d83e"}, "downloads": -1, "filename": "aiootp-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f2bba0be13d9e5c7e8622cc91e905513", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 282879, "upload_time": "2020-05-07T02:35:36", "upload_time_iso_8601": "2020-05-07T02:35:36.041755Z", "url": "https://files.pythonhosted.org/packages/11/38/67d77905fae5fe7b2fee8c98bb96cd493ab74c8208fb4b02bdcb2216d7c7/aiootp-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c05cc09305e38c7beede0e23b511b303", "sha256": "48c1815bdd00524575bd16170728f50e3845ee1e3ea2cb8ca4451d449916a85a"}, "downloads": -1, "filename": "aiootp-0.3.1.tar.gz", "has_sig": false, "md5_digest": "c05cc09305e38c7beede0e23b511b303", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 319707, "upload_time": "2020-05-07T02:35:39", "upload_time_iso_8601": "2020-05-07T02:35:39.395617Z", "url": "https://files.pythonhosted.org/packages/a1/b7/5246338c1fda51eb9a9fdea324849b40e8c0066c2e558ff11394d49d23b8/aiootp-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "72764047b04bb1b1516ee992919e275f", "sha256": "afda4f5c7d18c3585907490b6b517f1854a153a34a83932e8bdcbf7b0edc91bb"}, "downloads": -1, "filename": "aiootp-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "72764047b04bb1b1516ee992919e275f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 284524, "upload_time": "2020-05-07T20:00:59", "upload_time_iso_8601": "2020-05-07T20:00:59.996660Z", "url": "https://files.pythonhosted.org/packages/83/5f/e17e257a24ddd7889cd0e901b203a00c5fb3dfce3b5022547e7e0006058b/aiootp-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb5a75abb95969741dcd1ffc45c5cfa7", "sha256": "65fefcc78e53082d88ea0610e873882410458331b6022b1f5972e529f05047d8"}, "downloads": -1, "filename": "aiootp-0.4.0.tar.gz", "has_sig": false, "md5_digest": "eb5a75abb95969741dcd1ffc45c5cfa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 328999, "upload_time": "2020-05-07T20:01:04", "upload_time_iso_8601": "2020-05-07T20:01:04.916233Z", "url": "https://files.pythonhosted.org/packages/6b/17/325c36ec064b73bddbb8bd37f2a70c9d1aed7caf8fe5034faa9aedc08f74/aiootp-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "72764047b04bb1b1516ee992919e275f", "sha256": "afda4f5c7d18c3585907490b6b517f1854a153a34a83932e8bdcbf7b0edc91bb"}, "downloads": -1, "filename": "aiootp-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "72764047b04bb1b1516ee992919e275f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 284524, "upload_time": "2020-05-07T20:00:59", "upload_time_iso_8601": "2020-05-07T20:00:59.996660Z", "url": "https://files.pythonhosted.org/packages/83/5f/e17e257a24ddd7889cd0e901b203a00c5fb3dfce3b5022547e7e0006058b/aiootp-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb5a75abb95969741dcd1ffc45c5cfa7", "sha256": "65fefcc78e53082d88ea0610e873882410458331b6022b1f5972e529f05047d8"}, "downloads": -1, "filename": "aiootp-0.4.0.tar.gz", "has_sig": false, "md5_digest": "eb5a75abb95969741dcd1ffc45c5cfa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 328999, "upload_time": "2020-05-07T20:01:04", "upload_time_iso_8601": "2020-05-07T20:01:04.916233Z", "url": "https://files.pythonhosted.org/packages/6b/17/325c36ec064b73bddbb8bd37f2a70c9d1aed7caf8fe5034faa9aedc08f74/aiootp-0.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:59 2020"}