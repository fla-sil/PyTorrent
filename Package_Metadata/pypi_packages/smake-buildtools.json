{"info": {"author": "Qetyzm", "author_email": "qetyzm@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Copyright (c) 2019 \r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\nDescription: # SMake\r\n        Simple Make replacement for lazy developers that like Python.\r\n        \r\n        ## What is it for?\r\n        You think that Makefiles are confusing or unreadable? \r\n        You're too lazy to go through CMake or Autotools? If so, SMake is for you.\r\n        It's simply a Python module that used in .py file links and compiles your C/C++ project.\r\n        \r\n        \r\n        ## Requirements\r\n        - [Python](http://python.org) 3.6+\r\n        - Click (optional)\r\n        \r\n        ## Supported compilers\r\n        \r\n        + gcc\r\n        + g++\r\n        + clang\r\n        \r\n        # Example code\r\n        \r\n        Example for Hello world example:\r\n        \r\n        `src/hello.c`:\r\n        ```C\r\n        #include <stdio.h>\r\n        \r\n        int main() {\r\n            printf(\"Hello, SMakefile!\\n\");\r\n            return 0;\r\n        }\r\n        ```\r\n        \r\n        `Smakefile.py`:\r\n        ```python\r\n        import smake_buildtools\r\n        import click\r\n        \r\n        sm = smake_buildtools.Smake()\r\n        sm.name = 'hello'\r\n        sm.obj_dir = 'obj'\r\n        sm.bin_dir = 'build'\r\n        \r\n        @click.group()\r\n        def cli():\r\n            pass\r\n            \r\n        @cli.command()\r\n        def install():\r\n            sm.gcc.sources = ['src/hello.c']\r\n            sm.gcc.compiler_flags.append('pedantic')\r\n            sm.gcc.warning_flags.append('all')       \r\n            sm.gcc.link()\r\n            sm.gcc.compile()\r\n        \r\n        @cli.command()\r\n        def clean():\r\n            sm.remove_dir(sm.obj_dir)\r\n            sm.remove_dir(sm.bin_dir)\r\n        \r\n        if __name__ == \"__main__\":\r\n            cli()\r\n        ```\r\n        \r\n        ## Running the script\r\n        \r\n        `$ python ./SMakefile.py install`\r\n        \r\n        # How to install\r\n        \r\n        Using pip:\r\n        \r\n        `$ pip install smake_buildtools`\r\n        \r\n        # Okay, how to use it?\r\n        First you need to import SMake:\r\n        \r\n        ```python\r\n        import smake_buildtools\r\n        ```\r\n        \r\n        ## Defining project\r\n        Then define your SMake project:\r\n        \r\n        ```python\r\n        sm = smake_buildtools.Smake()\r\n        sm.name = 'app'\r\n        sm.obj_dir = 'obj'\r\n        sm.bin_dir = 'build'\r\n        ```\r\n        \r\n        ## Adding source files\r\n        \r\n        You need to add some source files for compiler.\r\n        For example, we have sources in `src/` and `src/module` directories.\r\n        For this we can use two SMake methods: `Smake.wildcard` and `Smake.merge`. \r\n        \r\n        ```python\r\n        sm.gcc_cpp.sources = sm.merge(\r\n            sm.wildcard('src/*.cpp'),\r\n            sm.wildcard('src/module/*.cpp')\r\n        )\r\n        ```\r\n        \r\n        ## Compiler flags\r\n        \r\n        Then add some flags (here we can use some SFML libs):\r\n        \r\n        ```python\r\n        sm.gcc_cpp.compiler_flags = ['pedantic', 'static']\r\n        sm.gcc_cpp.warning_flags = ['all']\r\n        \r\n        # SFML 2\r\n        sm.gcc_cpp.linker_flags.append('sfml-graphics')\r\n        sm.gcc_cpp.linker_flags.append('sfml-window')\r\n        sm.gcc_cpp.linker_flags.append('sfml-system')\r\n        sm.gcc_cpp.linker_flags.append('sfml-audio')\r\n        ```\r\n        \r\n        ## Platform checking\r\n        \r\n        For Linux it's easy to install libraries via the package manager.\r\n        But what if you want specifically for Windows to add SFML `include/` and `lib/` directories?\r\n        With help comes `Smake.get_platform()`:\r\n        \r\n        ```python\r\n        # SFML 2\r\n        if sm.get_platform().startswith('win'): # win32, win64\r\n            sm.gcc_cpp.include_dirs.append('C:\\\\SFML2\\\\include')\r\n            sm.gcc_cpp.library_dirs.append('C:\\\\SFML2\\\\lib')\r\n        ```\r\n        \r\n        ## Compiling and linking\r\n        \r\n        Now the easiest ones are left: compiling and linking. \r\n        For this you use `Smake.compile()` and `Smake.link()` method, respectively.\r\n        \r\n        ```python\r\n        sm.gcc_cpp.compile()\r\n        sm.gcc_cpp.link()\r\n        ```\r\n        \r\n        ## Summary\r\n        \r\n        As you can see, for normal user every line is very clear.\r\n        If someone wants to compile your code it's easy for them to see what values are used for what.\r\n        \r\n        Example code:\r\n        \r\n        ```python\r\n        import smake_buildtools\r\n        import click\r\n        \r\n        sm = smake_buildtools.Smake()\r\n        sm.name = 'app'\r\n        sm.obj_dir = 'obj'\r\n        sm.bin_dir = 'build'\r\n        \r\n        @click.group()\r\n        def cli():\r\n            pass\r\n            \r\n        @cli.command()\r\n        def install():\r\n            sm.gcc_cpp.sources = sm.merge(\r\n                sm.wildcard('src/*.cpp'),\r\n                sm.wildcard('src/module/*.cpp'))\r\n            sm.gcc_cpp.compiler_flags = ['pedantic', 'static']\r\n            sm.gcc_cpp.warning_flags = ['all']\r\n        \r\n            # SFML 2\r\n            sm.gcc_cpp.linker_flags.append('sfml-graphics')\r\n            sm.gcc_cpp.linker_flags.append('sfml-window')\r\n            sm.gcc_cpp.linker_flags.append('sfml-system')\r\n            sm.gcc_cpp.linker_flags.append('sfml-audio')\r\n            if sm.get_platform().startswith('win'): # win32, win64\r\n                sm.gcc_cpp.include_dirs.append('C:\\\\SFML2\\\\include')\r\n                sm.gcc_cpp.library_dirs.append('C:\\\\SFML2\\\\lib')\r\n        \r\n            sm.gcc_cpp.compile()\r\n            sm.gcc_cpp.link()\r\n            \r\n            # post-linking stuff\r\n            if sm.get_platform().startswith('linux') or sm.get_platform() == 'darwin':\r\n                target_path = sm.make_path('usr', 'bin', sm.name)\r\n                sm.copy_executable_to(target_path)\r\n        \r\n        @cli.command()\r\n        def clean():\r\n            sm.remove_dir(sm.obj_dir)\r\n            sm.remove_dir(sm.bin_dir)\r\n        \r\n        if __name__ == '__main__':\r\n            cli()\r\n        ```\r\n        \r\n        Save this as SMakefile.py in project root directory and run:\r\n        \r\n        `$ python ./SMakefile.py install`\r\n        \r\nKeywords: packages,import,downloader,package-management\r\nPlatform: UNKNOWN\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/qetyzm/smake", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "smake-buildtools", "package_url": "https://pypi.org/project/smake-buildtools/", "platform": "", "project_url": "https://pypi.org/project/smake-buildtools/", "project_urls": {"Homepage": "https://github.com/qetyzm/smake"}, "release_url": "https://pypi.org/project/smake-buildtools/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Simple Make replacement for developers who love Python", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Copyright (c) 2019 \n<br>\n<br>Permission is hereby granted, free of charge, to any person obtaining a copy\n<br>of this software and associated documentation files (the \"Software\"), to deal\n<br>in the Software without restriction, including without limitation the rights\n<br>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n<br>copies of the Software, and to permit persons to whom the Software is\n<br>furnished to do so, subject to the following conditions:\n<br>\n<br>The above copyright notice and this permission notice shall be included in all\n<br>copies or substantial portions of the Software.\n<br>\n<br>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n<br>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n<br>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n<br>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n<br>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n<br>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n<br>SOFTWARE.\n<br>\n<br>Description: # SMake\n<br>        Simple Make replacement for lazy developers that like Python.\n<br>        \n<br>        ## What is it for?\n<br>        You think that Makefiles are confusing or unreadable? \n<br>        You're too lazy to go through CMake or Autotools? If so, SMake is for you.\n<br>        It's simply a Python module that used in .py file links and compiles your C/C++ project.\n<br>        \n<br>        \n<br>        ## Requirements\n<br>        - [Python](http://python.org) 3.6+\n<br>        - Click (optional)\n<br>        \n<br>        ## Supported compilers\n<br>        \n<br>        + gcc\n<br>        + g++\n<br>        + clang\n<br>        \n<br>        # Example code\n<br>        \n<br>        Example for Hello world example:\n<br>        \n<br>        `src/hello.c`:\n<br>        ```C\n<br>        #include &lt;stdio.h&gt;\n<br>        \n<br>        int main() {\n<br>            printf(\"Hello, SMakefile!\\n\");\n<br>            return 0;\n<br>        }\n<br>        ```\n<br>        \n<br>        `Smakefile.py`:\n<br>        ```python\n<br>        import smake_buildtools\n<br>        import click\n<br>        \n<br>        sm = smake_buildtools.Smake()\n<br>        sm.name = 'hello'\n<br>        sm.obj_dir = 'obj'\n<br>        sm.bin_dir = 'build'\n<br>        \n<br>        @click.group()\n<br>        def cli():\n<br>            pass\n<br>            \n<br>        @cli.command()\n<br>        def install():\n<br>            sm.gcc.sources = ['src/hello.c']\n<br>            sm.gcc.compiler_flags.append('pedantic')\n<br>            sm.gcc.warning_flags.append('all')       \n<br>            sm.gcc.link()\n<br>            sm.gcc.compile()\n<br>        \n<br>        @cli.command()\n<br>        def clean():\n<br>            sm.remove_dir(sm.obj_dir)\n<br>            sm.remove_dir(sm.bin_dir)\n<br>        \n<br>        if __name__ == \"__main__\":\n<br>            cli()\n<br>        ```\n<br>        \n<br>        ## Running the script\n<br>        \n<br>        `$ python ./SMakefile.py install`\n<br>        \n<br>        # How to install\n<br>        \n<br>        Using pip:\n<br>        \n<br>        `$ pip install smake_buildtools`\n<br>        \n<br>        # Okay, how to use it?\n<br>        First you need to import SMake:\n<br>        \n<br>        ```python\n<br>        import smake_buildtools\n<br>        ```\n<br>        \n<br>        ## Defining project\n<br>        Then define your SMake project:\n<br>        \n<br>        ```python\n<br>        sm = smake_buildtools.Smake()\n<br>        sm.name = 'app'\n<br>        sm.obj_dir = 'obj'\n<br>        sm.bin_dir = 'build'\n<br>        ```\n<br>        \n<br>        ## Adding source files\n<br>        \n<br>        You need to add some source files for compiler.\n<br>        For example, we have sources in `src/` and `src/module` directories.\n<br>        For this we can use two SMake methods: `Smake.wildcard` and `Smake.merge`. \n<br>        \n<br>        ```python\n<br>        sm.gcc_cpp.sources = sm.merge(\n<br>            sm.wildcard('src/*.cpp'),\n<br>            sm.wildcard('src/module/*.cpp')\n<br>        )\n<br>        ```\n<br>        \n<br>        ## Compiler flags\n<br>        \n<br>        Then add some flags (here we can use some SFML libs):\n<br>        \n<br>        ```python\n<br>        sm.gcc_cpp.compiler_flags = ['pedantic', 'static']\n<br>        sm.gcc_cpp.warning_flags = ['all']\n<br>        \n<br>        # SFML 2\n<br>        sm.gcc_cpp.linker_flags.append('sfml-graphics')\n<br>        sm.gcc_cpp.linker_flags.append('sfml-window')\n<br>        sm.gcc_cpp.linker_flags.append('sfml-system')\n<br>        sm.gcc_cpp.linker_flags.append('sfml-audio')\n<br>        ```\n<br>        \n<br>        ## Platform checking\n<br>        \n<br>        For Linux it's easy to install libraries via the package manager.\n<br>        But what if you want specifically for Windows to add SFML `include/` and `lib/` directories?\n<br>        With help comes `Smake.get_platform()`:\n<br>        \n<br>        ```python\n<br>        # SFML 2\n<br>        if sm.get_platform().startswith('win'): # win32, win64\n<br>            sm.gcc_cpp.include_dirs.append('C:\\\\SFML2\\\\include')\n<br>            sm.gcc_cpp.library_dirs.append('C:\\\\SFML2\\\\lib')\n<br>        ```\n<br>        \n<br>        ## Compiling and linking\n<br>        \n<br>        Now the easiest ones are left: compiling and linking. \n<br>        For this you use `Smake.compile()` and `Smake.link()` method, respectively.\n<br>        \n<br>        ```python\n<br>        sm.gcc_cpp.compile()\n<br>        sm.gcc_cpp.link()\n<br>        ```\n<br>        \n<br>        ## Summary\n<br>        \n<br>        As you can see, for normal user every line is very clear.\n<br>        If someone wants to compile your code it's easy for them to see what values are used for what.\n<br>        \n<br>        Example code:\n<br>        \n<br>        ```python\n<br>        import smake_buildtools\n<br>        import click\n<br>        \n<br>        sm = smake_buildtools.Smake()\n<br>        sm.name = 'app'\n<br>        sm.obj_dir = 'obj'\n<br>        sm.bin_dir = 'build'\n<br>        \n<br>        @click.group()\n<br>        def cli():\n<br>            pass\n<br>            \n<br>        @cli.command()\n<br>        def install():\n<br>            sm.gcc_cpp.sources = sm.merge(\n<br>                sm.wildcard('src/*.cpp'),\n<br>                sm.wildcard('src/module/*.cpp'))\n<br>            sm.gcc_cpp.compiler_flags = ['pedantic', 'static']\n<br>            sm.gcc_cpp.warning_flags = ['all']\n<br>        \n<br>            # SFML 2\n<br>            sm.gcc_cpp.linker_flags.append('sfml-graphics')\n<br>            sm.gcc_cpp.linker_flags.append('sfml-window')\n<br>            sm.gcc_cpp.linker_flags.append('sfml-system')\n<br>            sm.gcc_cpp.linker_flags.append('sfml-audio')\n<br>            if sm.get_platform().startswith('win'): # win32, win64\n<br>                sm.gcc_cpp.include_dirs.append('C:\\\\SFML2\\\\include')\n<br>                sm.gcc_cpp.library_dirs.append('C:\\\\SFML2\\\\lib')\n<br>        \n<br>            sm.gcc_cpp.compile()\n<br>            sm.gcc_cpp.link()\n<br>            \n<br>            # post-linking stuff\n<br>            if sm.get_platform().startswith('linux') or sm.get_platform() == 'darwin':\n<br>                target_path = sm.make_path('usr', 'bin', sm.name)\n<br>                sm.copy_executable_to(target_path)\n<br>        \n<br>        @cli.command()\n<br>        def clean():\n<br>            sm.remove_dir(sm.obj_dir)\n<br>            sm.remove_dir(sm.bin_dir)\n<br>        \n<br>        if __name__ == '__main__':\n<br>            cli()\n<br>        ```\n<br>        \n<br>        Save this as SMakefile.py in project root directory and run:\n<br>        \n<br>        `$ python ./SMakefile.py install`\n<br>        \n<br>Keywords: packages,import,downloader,package-management\n<br>Platform: UNKNOWN\n<br>\n          </div>"}, "last_serial": 4724613, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4fd5034ce8edf1319db3835e008468e5", "sha256": "165ae2681ff0732989781aff0ba6ae141bfb6268db06038c0b193098351b61a9"}, "downloads": -1, "filename": "smake_buildtools-0.1.0-py3.6.egg", "has_sig": false, "md5_digest": "4fd5034ce8edf1319db3835e008468e5", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 13067, "upload_time": "2019-01-20T10:35:37", "upload_time_iso_8601": "2019-01-20T10:35:37.318446Z", "url": "https://files.pythonhosted.org/packages/57/8e/2b4f858005485b9b15800c0367cf5cf919a1b18502530c5425d0dd634307/smake_buildtools-0.1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca378da815c90a0b01ee4abd83966d6d", "sha256": "67cf9895154e0deb09d289883643e8d3e5cbf4e340472df98a2fcb5550f6c96c"}, "downloads": -1, "filename": "smake_buildtools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ca378da815c90a0b01ee4abd83966d6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4812, "upload_time": "2019-01-20T10:35:39", "upload_time_iso_8601": "2019-01-20T10:35:39.145281Z", "url": "https://files.pythonhosted.org/packages/e2/05/c4e62f6e8314ce984304ad85f928b71116a644823865ec46474df0600594/smake_buildtools-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2a7274e8d427c3688013212d32872f4e", "sha256": "1a864bc1ec454081819d1422f132d9b64dd24fb5941c5a360e288534682728a7"}, "downloads": -1, "filename": "smake_buildtools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2a7274e8d427c3688013212d32872f4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5132, "upload_time": "2019-01-22T06:21:47", "upload_time_iso_8601": "2019-01-22T06:21:47.948894Z", "url": "https://files.pythonhosted.org/packages/bc/8f/f5d170ab76e79eb7f8afa399cfcb47eedd921907d82f84301efb4d6dd586/smake_buildtools-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4dab50e9d96b27cc66b01d94578c4f37", "sha256": "a659be43af406f6c0a92a160d28ae9de3de9c6ea1b9f33f8540d4d3a327941a1"}, "downloads": -1, "filename": "smake_buildtools-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4dab50e9d96b27cc66b01d94578c4f37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5029, "upload_time": "2019-01-22T06:23:30", "upload_time_iso_8601": "2019-01-22T06:23:30.080062Z", "url": "https://files.pythonhosted.org/packages/e0/4c/ab8c4b81bdd88b97c7d0a68d6ac317a071000df4b295b30929656eafd3c3/smake_buildtools-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4dab50e9d96b27cc66b01d94578c4f37", "sha256": "a659be43af406f6c0a92a160d28ae9de3de9c6ea1b9f33f8540d4d3a327941a1"}, "downloads": -1, "filename": "smake_buildtools-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4dab50e9d96b27cc66b01d94578c4f37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5029, "upload_time": "2019-01-22T06:23:30", "upload_time_iso_8601": "2019-01-22T06:23:30.080062Z", "url": "https://files.pythonhosted.org/packages/e0/4c/ab8c4b81bdd88b97c7d0a68d6ac317a071000df4b295b30929656eafd3c3/smake_buildtools-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:09 2020"}