{"info": {"author": "Samuel Riolo", "author_email": "samuel.riolo@biel-bienne.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only"], "description": ".. contents::\n\nWhat is pyaxl\n=============\n\npyaxl is a **Python 3** library accessing the Cisco Callmanger over the AXL interface. This library was build\ninspired by `the work of Sebastian Kratzert <http://kra-se.de/pyAXL/>`_ and works as a\nsecond layer over SUDS, which contains further improvements by `jurko <https://bitbucket.org/jurko/suds>`_.\nWe use `SoupUI <http://www.soapui.org/>`_ and recommend it if you want to work with this library, as it helps\nanalizing and understanding how the WSDL from Cisco Callmanager is composed.\n\npyaxl is licensed under the ZPL 2.1, see LICENSE.txt for details. \n\n\nImport WSDL\n-----------\nThe WSDL files are not included with this library due to licenses terms. pyaxl provides\na script to import it and then build a cache directly into the library.\n\nFirst of all you need to download the WSDL files. The AXL WSDL is included in the AXL SQL Toolkit download,\nwhich is available in Cisco Unified CM. Follow these steps to download the AXL SQL Toolkit from your Cisco\nUnified CM server:\n\n1. Log into the Cisco Unified CM Administration application.\n2. Go to Application | Plugins\n3. Click on the Download link by the Cisco CallManager AXL SQL Toolkit Plugin.\n\nThe axlsqltoolkit.zip file contains the complete schema definition for different versions of Cisco Unified CM.\n\nThe important files for each version are:\n    * AXLAPI.wsdl\n    * AXLEnums.xsd\n    * axlmessage.xsd\n    * axlsoap.xsd\n    * axl.xsd\n\nNote: all files must be in the same directory and have the same name as the version you want use.\n\n.. code-block:: bash\n\n    $ ./pyaxl_import_wsdl -p path_to_wsdl/10.5/AXLAPI.wsdl\n\nHint: We put all these file in the buildout directory. While buildout is running,  the WSDL files are imported automatically.\n\n.. code-block:: ini\n\n    [buildout]\n    parts =\n        pyaxl_import\n        pyaxl_import_exec\n    \n    [pyaxl_import]\n    recipe = zc.recipe.egg:scripts\n    eggs = pyaxl\n    scripts=pyaxl_import_wsdl=import_wsdl\n    \n    [pyaxl_import_exec]\n    recipe = collective.recipe.cmd\n    on_install=true\n    on_update=true\n    cmds = ${buildout:directory}/bin/import_wsdl -p ${buildout:directory}/wsdl/10.5/AXLAPI.wsdl\n\n\nConfiguration\n-------------\n\n>>> import pyaxl\n>>> from pyaxl import ccm\n>>> from pyaxl.testing import validate\n>>> from pyaxl.testing.transport import TestingTransport\n\nFor these tests we use a fake transport layer. For this we must tell which xml\nthe transporter should use for the response.\n\n>>> transport = TestingTransport()\n>>> transport.define('10.5_user_riols')\n>>> transport_testing = TestingTransport()\n>>> transport_testing.define('8.0_user_riols')\n\n>>> settings =  pyaxl.AXLClientSettings(host='https://callmanger.fake:8443',\n...                                     user='super-admin',\n...                                     passwd='nobody knows',\n...                                     path='/axl/',\n...                                     version='10.5',\n...                                     suds_config=dict(transport=transport))\n>>> pyaxl.registry.register(settings)\n\npyaxl supports multiple settings. To use that, pass the configuration name as\nsecond attribute in the register method.\n\n>>> settings_testing =  pyaxl.AXLClientSettings(host='https://callmanger-testing.fake:8443',\n...                                     user='super-admin',\n...                                     passwd='nobody knows',\n...                                     path='/axl/',\n...                                     version='8.0',\n...                                     suds_config=dict(transport=transport_testing))\n>>> pyaxl.registry.register(settings_testing, 'testing')\n\nif you want to use a custom configuration, you also need to pass\nit when you are getting the object:\n\n>>> user = ccm.User('riols', configname='testing')\n\nif you don't need multiple settings, you can just use the default.\n\n>>> user = ccm.User('riols')\n\nDon't forget to build the cache for the defined configuration name:\n\n.. code-block:: bash\n\n    $ ./pyaxl_import_wsdl -p -c testing path_to_wsdl/10.5/AXLAPI.wsdl\n\n\nWorking with pyaxl\n------------------\n\nGet all information for a specific user.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n>>> transport.define('10.5_user_riols')\n>>> user1 = ccm.User('riols')\n\n>>> validate.printSOAPRequest(transport.lastrequest())\ngetUser:\n    userid=riols\n\n>>> user1.firstName\nSamuel\n>>> user1.lastName\nRiolo\n\n\nGet the same user with his UUID.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n>>> transport.define('10.5_user_riols')\n>>> user2 = ccm.User(uuid='{5B5C014F-63A8-412F-B793-782BDA987371}')\n>>> user1._uuid == user2._uuid\nTrue\n\n\nSearch and list information\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n>>> transport.define('10.5_user_armstrong')\n>>> users = ccm.User.list(dict(lastName='Armstrong'), ('firstName', 'lastName'))\n>>> validate.printSOAPRequest(transport.lastrequest())\nlistUser:\n    searchCriteria:\n        lastName=Armstrong\n    returnedTags:\n        firstName=True\n        lastName=True\n\n>>> list(users)\n[(Lance, Armstrong), (Neil, Armstrong)]\n\n\nSearch and fetch information as objects\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n>>> transport.define('10.5_user_riols')\n>>> users = ccm.User.list_obj(dict(lastName='Riolo', firstName='Samuel'))\n>>> for user in users:\n...     print(user.firstName, user.lastName)\nSamuel Riolo\n\n\nReload an object\n~~~~~~~~~~~~~~~~\n\n>>> transport.define('10.5_user_riols')\n>>> user = ccm.User('riols')\n>>> user.firstName = 'Yuri'\n>>> user.lastName = 'Gagarin'\n>>> print(user.firstName, user.lastName)\nYuri Gagarin\n>>> user.reload()\nTraceback (most recent call last):\n    ...\npyaxl.exceptions.ReloadException: Error because some field are already changed by the client. Use force or update it first.\n>>> user.reload(force=True)\n>>> print(user.firstName, user.lastName)\nSamuel Riolo\n\n\nUpdate an object\n~~~~~~~~~~~~~~~~\n\n>>> transport.define('10.5_user_riols')\n>>> user = ccm.User('riols')\n>>> user.firstName = 'Claude'\n>>> user.lastName = 'Nicollier'\n>>> user.update()\n>>> validate.printSOAPRequest(transport.lastrequest())\nupdateUser:\n    uuid={5B5C014F-63A8-412F-B793-782BDA987371}\n    firstName=Claude\n    lastName=Nicollier\n\n\nRemove an object\n~~~~~~~~~~~~~~~~\n\n>>> transport.define('10.5_user_riols')\n>>> user = ccm.User('riols')\n>>> user.remove()\n>>> validate.printSOAPRequest(transport.lastrequest())\nremoveUser:\n    uuid={5B5C014F-63A8-412F-B793-782BDA987371}\n\n\nCreate a new object\n~~~~~~~~~~~~~~~~~~~\n\n>>> transport.define('10.5_user_riols')\n>>> user = ccm.User()\n>>> user.lastName = 'Edison'\n>>> user.firstName = 'Thomas'\n>>> user.userid = 'tedison'\n>>> user.presenceGroupName = 'SC Presence Group'\n>>> user.ipccExtension = None\n>>> user.ldapDirectoryName = None\n>>> user.userProfile = None\n>>> user.serviceProfile = None\n>>> user.primaryDevice = None\n>>> user.pinCredentials = None\n>>> user.passwordCredentials = None\n>>> user.subscribeCallingSearchSpaceName = None\n>>> user.defaultProfile = None\n>>> user.convertUserAccount = None\n\n>>> user.update()\nTraceback (most recent call last):\n    ...\npyaxl.exceptions.UpdateException: you must create a object with \"create\" before update\n\n>>> user.create()\n{12345678-1234-1234-1234-123123456789}\n>>> validate.printSOAPRequest(transport.lastrequest())\naddUser:\n    user:\n        firstName=Thomas\n        lastName=Edison\n        userid=tedison\n        presenceGroupName=SC Presence Group\n\n\nIf you try to create a user twice, an Exception of the type CreationException is thrown:\n\n>>> user.create()\nTraceback (most recent call last):\n    ...\npyaxl.exceptions.CreationException: this object are already attached\n\n\nClone an object\n~~~~~~~~~~~~~~~\n\n>>> transport.define('10.5_user_riols')\n>>> user = ccm.User('riols')\n>>> clone = user.clone()\n>>> clone.userid = 'riols2'\n>>> clone.update()\nTraceback (most recent call last):\n    ...\npyaxl.exceptions.UpdateException: you must create a object with \"create\" before update\n>>> clone.create()\n{12345678-1234-1234-1234-123123456789}\n\n\nRunning the doc tests\n---------------------\n\n.. code-block:: bash\n\n    $ tox --  <path to axlsqltoolkit directory>\n\n\nAbout us\n========\nWe are the IT Services of Biel/Bienne, Switzerland.\nhttp://foss.biel-bienne.ch/blog/\n\n\n\n\n\nChangelog\n=========\n\n1.1 (2016-11-25)\n================\n\n- adding windows support\n\n1.0.1 (2015-08-03)\n------------------\n\n- adding pgp signature\n\n\n1.0 (2015-08-03)\n----------------\n\n- Initial [codeix]", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bielbienne/pyaxl", "keywords": "bielbienne cisco callmanger axl soap", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "pyaxl", "package_url": "https://pypi.org/project/pyaxl/", "platform": "", "project_url": "https://pypi.org/project/pyaxl/", "project_urls": {"Homepage": "https://github.com/bielbienne/pyaxl"}, "release_url": "https://pypi.org/project/pyaxl/1.1/", "requires_dist": null, "requires_python": "", "summary": "pyaxl is a python library accessing the Cisco Callmanger over the AXL interface", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#what-is-pyaxl\" id=\"id4\" rel=\"nofollow\">What is pyaxl</a><ul>\n<li><a href=\"#import-wsdl\" id=\"id5\" rel=\"nofollow\">Import WSDL</a></li>\n<li><a href=\"#configuration\" id=\"id6\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#working-with-pyaxl\" id=\"id7\" rel=\"nofollow\">Working with pyaxl</a><ul>\n<li><a href=\"#get-all-information-for-a-specific-user\" id=\"id8\" rel=\"nofollow\">Get all information for a specific user.</a></li>\n<li><a href=\"#get-the-same-user-with-his-uuid\" id=\"id9\" rel=\"nofollow\">Get the same user with his UUID.</a></li>\n<li><a href=\"#search-and-list-information\" id=\"id10\" rel=\"nofollow\">Search and list information</a></li>\n<li><a href=\"#search-and-fetch-information-as-objects\" id=\"id11\" rel=\"nofollow\">Search and fetch information as objects</a></li>\n<li><a href=\"#reload-an-object\" id=\"id12\" rel=\"nofollow\">Reload an object</a></li>\n<li><a href=\"#update-an-object\" id=\"id13\" rel=\"nofollow\">Update an object</a></li>\n<li><a href=\"#remove-an-object\" id=\"id14\" rel=\"nofollow\">Remove an object</a></li>\n<li><a href=\"#create-a-new-object\" id=\"id15\" rel=\"nofollow\">Create a new object</a></li>\n<li><a href=\"#clone-an-object\" id=\"id16\" rel=\"nofollow\">Clone an object</a></li>\n</ul>\n</li>\n<li><a href=\"#running-the-doc-tests\" id=\"id17\" rel=\"nofollow\">Running the doc tests</a></li>\n</ul>\n</li>\n<li><a href=\"#about-us\" id=\"id18\" rel=\"nofollow\">About us</a></li>\n<li><a href=\"#changelog\" id=\"id19\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#id1\" id=\"id20\" rel=\"nofollow\">1.1 (2016-11-25)</a><ul>\n<li><a href=\"#id2\" id=\"id21\" rel=\"nofollow\">1.0.1 (2015-08-03)</a></li>\n<li><a href=\"#id3\" id=\"id22\" rel=\"nofollow\">1.0 (2015-08-03)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"what-is-pyaxl\">\n<h2><a href=\"#id4\" rel=\"nofollow\">What is pyaxl</a></h2>\n<p>pyaxl is a <strong>Python 3</strong> library accessing the Cisco Callmanger over the AXL interface. This library was build\ninspired by <a href=\"http://kra-se.de/pyAXL/\" rel=\"nofollow\">the work of Sebastian Kratzert</a> and works as a\nsecond layer over SUDS, which contains further improvements by <a href=\"https://bitbucket.org/jurko/suds\" rel=\"nofollow\">jurko</a>.\nWe use <a href=\"http://www.soapui.org/\" rel=\"nofollow\">SoupUI</a> and recommend it if you want to work with this library, as it helps\nanalizing and understanding how the WSDL from Cisco Callmanager is composed.</p>\n<p>pyaxl is licensed under the ZPL 2.1, see LICENSE.txt for details.</p>\n<div id=\"import-wsdl\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Import WSDL</a></h3>\n<p>The WSDL files are not included with this library due to licenses terms. pyaxl provides\na script to import it and then build a cache directly into the library.</p>\n<p>First of all you need to download the WSDL files. The AXL WSDL is included in the AXL SQL Toolkit download,\nwhich is available in Cisco Unified CM. Follow these steps to download the AXL SQL Toolkit from your Cisco\nUnified CM server:</p>\n<ol>\n<li>Log into the Cisco Unified CM Administration application.</li>\n<li>Go to Application | Plugins</li>\n<li>Click on the Download link by the Cisco CallManager AXL SQL Toolkit Plugin.</li>\n</ol>\n<p>The axlsqltoolkit.zip file contains the complete schema definition for different versions of Cisco Unified CM.</p>\n<dl>\n<dt>The important files for each version are:</dt>\n<dd><ul>\n<li>AXLAPI.wsdl</li>\n<li>AXLEnums.xsd</li>\n<li>axlmessage.xsd</li>\n<li>axlsoap.xsd</li>\n<li>axl.xsd</li>\n</ul>\n</dd>\n</dl>\n<p>Note: all files must be in the same directory and have the same name as the version you want use.</p>\n<pre>$ ./pyaxl_import_wsdl -p path_to_wsdl/10.5/AXLAPI.wsdl\n</pre>\n<p>Hint: We put all these file in the buildout directory. While buildout is running,  the WSDL files are imported automatically.</p>\n<pre><span class=\"k\">[buildout]</span>\n<span class=\"na\">parts</span> <span class=\"o\">=</span><span class=\"s\">\n    pyaxl_import\n    pyaxl_import_exec</span>\n\n<span class=\"k\">[pyaxl_import]</span>\n<span class=\"na\">recipe</span> <span class=\"o\">=</span> <span class=\"s\">zc.recipe.egg:scripts</span>\n<span class=\"na\">eggs</span> <span class=\"o\">=</span> <span class=\"s\">pyaxl</span>\n<span class=\"na\">scripts</span><span class=\"o\">=</span><span class=\"s\">pyaxl_import_wsdl=import_wsdl</span>\n\n<span class=\"k\">[pyaxl_import_exec]</span>\n<span class=\"na\">recipe</span> <span class=\"o\">=</span> <span class=\"s\">collective.recipe.cmd</span>\n<span class=\"na\">on_install</span><span class=\"o\">=</span><span class=\"s\">true</span>\n<span class=\"na\">on_update</span><span class=\"o\">=</span><span class=\"s\">true</span>\n<span class=\"na\">cmds</span> <span class=\"o\">=</span> <span class=\"s\">${buildout:directory}/bin/import_wsdl -p ${buildout:directory}/wsdl/10.5/AXLAPI.wsdl</span>\n</pre>\n</div>\n<div id=\"configuration\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Configuration</a></h3>\n<pre>&gt;&gt;&gt; import pyaxl\n&gt;&gt;&gt; from pyaxl import ccm\n&gt;&gt;&gt; from pyaxl.testing import validate\n&gt;&gt;&gt; from pyaxl.testing.transport import TestingTransport\n</pre>\n<p>For these tests we use a fake transport layer. For this we must tell which xml\nthe transporter should use for the response.</p>\n<pre>&gt;&gt;&gt; transport = TestingTransport()\n&gt;&gt;&gt; transport.define('10.5_user_riols')\n&gt;&gt;&gt; transport_testing = TestingTransport()\n&gt;&gt;&gt; transport_testing.define('8.0_user_riols')\n</pre>\n<pre>&gt;&gt;&gt; settings =  pyaxl.AXLClientSettings(host='https://callmanger.fake:8443',\n...                                     user='super-admin',\n...                                     passwd='nobody knows',\n...                                     path='/axl/',\n...                                     version='10.5',\n...                                     suds_config=dict(transport=transport))\n&gt;&gt;&gt; pyaxl.registry.register(settings)\n</pre>\n<p>pyaxl supports multiple settings. To use that, pass the configuration name as\nsecond attribute in the register method.</p>\n<pre>&gt;&gt;&gt; settings_testing =  pyaxl.AXLClientSettings(host='https://callmanger-testing.fake:8443',\n...                                     user='super-admin',\n...                                     passwd='nobody knows',\n...                                     path='/axl/',\n...                                     version='8.0',\n...                                     suds_config=dict(transport=transport_testing))\n&gt;&gt;&gt; pyaxl.registry.register(settings_testing, 'testing')\n</pre>\n<p>if you want to use a custom configuration, you also need to pass\nit when you are getting the object:</p>\n<pre>&gt;&gt;&gt; user = ccm.User('riols', configname='testing')\n</pre>\n<p>if you don\u2019t need multiple settings, you can just use the default.</p>\n<pre>&gt;&gt;&gt; user = ccm.User('riols')\n</pre>\n<p>Don\u2019t forget to build the cache for the defined configuration name:</p>\n<pre>$ ./pyaxl_import_wsdl -p -c testing path_to_wsdl/10.5/AXLAPI.wsdl\n</pre>\n</div>\n<div id=\"working-with-pyaxl\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Working with pyaxl</a></h3>\n<div id=\"get-all-information-for-a-specific-user\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Get all information for a specific user.</a></h4>\n<pre>&gt;&gt;&gt; transport.define('10.5_user_riols')\n&gt;&gt;&gt; user1 = ccm.User('riols')\n</pre>\n<pre>&gt;&gt;&gt; validate.printSOAPRequest(transport.lastrequest())\ngetUser:\n    userid=riols\n</pre>\n<pre>&gt;&gt;&gt; user1.firstName\nSamuel\n&gt;&gt;&gt; user1.lastName\nRiolo\n</pre>\n</div>\n<div id=\"get-the-same-user-with-his-uuid\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Get the same user with his UUID.</a></h4>\n<pre>&gt;&gt;&gt; transport.define('10.5_user_riols')\n&gt;&gt;&gt; user2 = ccm.User(uuid='{5B5C014F-63A8-412F-B793-782BDA987371}')\n&gt;&gt;&gt; user1._uuid == user2._uuid\nTrue\n</pre>\n</div>\n<div id=\"search-and-list-information\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Search and list information</a></h4>\n<pre>&gt;&gt;&gt; transport.define('10.5_user_armstrong')\n&gt;&gt;&gt; users = ccm.User.list(dict(lastName='Armstrong'), ('firstName', 'lastName'))\n&gt;&gt;&gt; validate.printSOAPRequest(transport.lastrequest())\nlistUser:\n    searchCriteria:\n        lastName=Armstrong\n    returnedTags:\n        firstName=True\n        lastName=True\n</pre>\n<pre>&gt;&gt;&gt; list(users)\n[(Lance, Armstrong), (Neil, Armstrong)]\n</pre>\n</div>\n<div id=\"search-and-fetch-information-as-objects\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Search and fetch information as objects</a></h4>\n<pre>&gt;&gt;&gt; transport.define('10.5_user_riols')\n&gt;&gt;&gt; users = ccm.User.list_obj(dict(lastName='Riolo', firstName='Samuel'))\n&gt;&gt;&gt; for user in users:\n...     print(user.firstName, user.lastName)\nSamuel Riolo\n</pre>\n</div>\n<div id=\"reload-an-object\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Reload an object</a></h4>\n<pre>&gt;&gt;&gt; transport.define('10.5_user_riols')\n&gt;&gt;&gt; user = ccm.User('riols')\n&gt;&gt;&gt; user.firstName = 'Yuri'\n&gt;&gt;&gt; user.lastName = 'Gagarin'\n&gt;&gt;&gt; print(user.firstName, user.lastName)\nYuri Gagarin\n&gt;&gt;&gt; user.reload()\nTraceback (most recent call last):\n    ...\npyaxl.exceptions.ReloadException: Error because some field are already changed by the client. Use force or update it first.\n&gt;&gt;&gt; user.reload(force=True)\n&gt;&gt;&gt; print(user.firstName, user.lastName)\nSamuel Riolo\n</pre>\n</div>\n<div id=\"update-an-object\">\n<h4><a href=\"#id13\" rel=\"nofollow\">Update an object</a></h4>\n<pre>&gt;&gt;&gt; transport.define('10.5_user_riols')\n&gt;&gt;&gt; user = ccm.User('riols')\n&gt;&gt;&gt; user.firstName = 'Claude'\n&gt;&gt;&gt; user.lastName = 'Nicollier'\n&gt;&gt;&gt; user.update()\n&gt;&gt;&gt; validate.printSOAPRequest(transport.lastrequest())\nupdateUser:\n    uuid={5B5C014F-63A8-412F-B793-782BDA987371}\n    firstName=Claude\n    lastName=Nicollier\n</pre>\n</div>\n<div id=\"remove-an-object\">\n<h4><a href=\"#id14\" rel=\"nofollow\">Remove an object</a></h4>\n<pre>&gt;&gt;&gt; transport.define('10.5_user_riols')\n&gt;&gt;&gt; user = ccm.User('riols')\n&gt;&gt;&gt; user.remove()\n&gt;&gt;&gt; validate.printSOAPRequest(transport.lastrequest())\nremoveUser:\n    uuid={5B5C014F-63A8-412F-B793-782BDA987371}\n</pre>\n</div>\n<div id=\"create-a-new-object\">\n<h4><a href=\"#id15\" rel=\"nofollow\">Create a new object</a></h4>\n<pre>&gt;&gt;&gt; transport.define('10.5_user_riols')\n&gt;&gt;&gt; user = ccm.User()\n&gt;&gt;&gt; user.lastName = 'Edison'\n&gt;&gt;&gt; user.firstName = 'Thomas'\n&gt;&gt;&gt; user.userid = 'tedison'\n&gt;&gt;&gt; user.presenceGroupName = 'SC Presence Group'\n&gt;&gt;&gt; user.ipccExtension = None\n&gt;&gt;&gt; user.ldapDirectoryName = None\n&gt;&gt;&gt; user.userProfile = None\n&gt;&gt;&gt; user.serviceProfile = None\n&gt;&gt;&gt; user.primaryDevice = None\n&gt;&gt;&gt; user.pinCredentials = None\n&gt;&gt;&gt; user.passwordCredentials = None\n&gt;&gt;&gt; user.subscribeCallingSearchSpaceName = None\n&gt;&gt;&gt; user.defaultProfile = None\n&gt;&gt;&gt; user.convertUserAccount = None\n</pre>\n<pre>&gt;&gt;&gt; user.update()\nTraceback (most recent call last):\n    ...\npyaxl.exceptions.UpdateException: you must create a object with \"create\" before update\n</pre>\n<pre>&gt;&gt;&gt; user.create()\n{12345678-1234-1234-1234-123123456789}\n&gt;&gt;&gt; validate.printSOAPRequest(transport.lastrequest())\naddUser:\n    user:\n        firstName=Thomas\n        lastName=Edison\n        userid=tedison\n        presenceGroupName=SC Presence Group\n</pre>\n<p>If you try to create a user twice, an Exception of the type CreationException is thrown:</p>\n<pre>&gt;&gt;&gt; user.create()\nTraceback (most recent call last):\n    ...\npyaxl.exceptions.CreationException: this object are already attached\n</pre>\n</div>\n<div id=\"clone-an-object\">\n<h4><a href=\"#id16\" rel=\"nofollow\">Clone an object</a></h4>\n<pre>&gt;&gt;&gt; transport.define('10.5_user_riols')\n&gt;&gt;&gt; user = ccm.User('riols')\n&gt;&gt;&gt; clone = user.clone()\n&gt;&gt;&gt; clone.userid = 'riols2'\n&gt;&gt;&gt; clone.update()\nTraceback (most recent call last):\n    ...\npyaxl.exceptions.UpdateException: you must create a object with \"create\" before update\n&gt;&gt;&gt; clone.create()\n{12345678-1234-1234-1234-123123456789}\n</pre>\n</div>\n</div>\n<div id=\"running-the-doc-tests\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Running the doc tests</a></h3>\n<pre>$ tox --  &lt;path to axlsqltoolkit directory&gt;\n</pre>\n</div>\n</div>\n<div id=\"about-us\">\n<h2><a href=\"#id18\" rel=\"nofollow\">About us</a></h2>\n<p>We are the IT Services of Biel/Bienne, Switzerland.\n<a href=\"http://foss.biel-bienne.ch/blog/\" rel=\"nofollow\">http://foss.biel-bienne.ch/blog/</a></p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id19\" rel=\"nofollow\">Changelog</a></h2>\n</div>\n<div id=\"id1\">\n<h2><a href=\"#id20\" rel=\"nofollow\">1.1 (2016-11-25)</a></h2>\n<ul>\n<li>adding windows support</li>\n</ul>\n<div id=\"id2\">\n<h3><a href=\"#id21\" rel=\"nofollow\">1.0.1 (2015-08-03)</a></h3>\n<ul>\n<li>adding pgp signature</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id22\" rel=\"nofollow\">1.0 (2015-08-03)</a></h3>\n<ul>\n<li>Initial [codeix]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2483252, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "17e13c56789079c92b24c06778826075", "sha256": "2e567a95042e02556efd57286bb03193606598c44f576dc86ca1eac2c5cc8174"}, "downloads": -1, "filename": "pyaxl-1.0.tar.gz", "has_sig": false, "md5_digest": "17e13c56789079c92b24c06778826075", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19976, "upload_time": "2015-08-03T16:08:24", "upload_time_iso_8601": "2015-08-03T16:08:24.250852Z", "url": "https://files.pythonhosted.org/packages/e2/26/dbd37f9df8d781523f94ab4a354a3402b0b79a715b49ce286b6a56364f4d/pyaxl-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b83d8c5784d6552cd46a04676f7e97a9", "sha256": "b6674993e86cb142120008a55a84f317bafb2952701b372717a4f388b9f3603c"}, "downloads": -1, "filename": "pyaxl-1.0.1.tar.gz", "has_sig": true, "md5_digest": "b83d8c5784d6552cd46a04676f7e97a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20153, "upload_time": "2015-08-03T17:56:52", "upload_time_iso_8601": "2015-08-03T17:56:52.333457Z", "url": "https://files.pythonhosted.org/packages/08/c4/69fdaef1bc1bf6360c31810a4980c6c6fdd6577b3fd58227901e0c10ac7b/pyaxl-1.0.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "c3c9f86c8974b8c38db4347379a5209c", "sha256": "e210580cead665d4d7023d2eac65db212b8617e5fc64ddfdcf8f9ff6fa926465"}, "downloads": -1, "filename": "pyaxl-1.1.tar.gz", "has_sig": false, "md5_digest": "c3c9f86c8974b8c38db4347379a5209c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20159, "upload_time": "2016-11-25T21:25:52", "upload_time_iso_8601": "2016-11-25T21:25:52.751315Z", "url": "https://files.pythonhosted.org/packages/8e/e0/90c8778a59f4ee82d7324a090e0dcb234daa7ef134b140fe2e7b396d1d86/pyaxl-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c3c9f86c8974b8c38db4347379a5209c", "sha256": "e210580cead665d4d7023d2eac65db212b8617e5fc64ddfdcf8f9ff6fa926465"}, "downloads": -1, "filename": "pyaxl-1.1.tar.gz", "has_sig": false, "md5_digest": "c3c9f86c8974b8c38db4347379a5209c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20159, "upload_time": "2016-11-25T21:25:52", "upload_time_iso_8601": "2016-11-25T21:25:52.751315Z", "url": "https://files.pythonhosted.org/packages/8e/e0/90c8778a59f4ee82d7324a090e0dcb234daa7ef134b140fe2e7b396d1d86/pyaxl-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:29 2020"}