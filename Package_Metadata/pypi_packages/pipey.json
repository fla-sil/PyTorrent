{"info": {"author": "Joseph Moon", "author_email": "joseph@opendataframe.com", "bugtrack_url": null, "classifiers": [], "description": "<p align=\"center\">\n  <img src=\"https://github.com/dataframehq/pipey/raw/master/docs/_static/img/Pipey.png?raw=true\" height=\"90px\">\n</p>\n\n![](https://github.com/dataframehq/pipey/workflows/Python%20CI/badge.svg)\n\n\n---\n\n`pipey` is an open source framework that provides **declarative syntactical sugar** within python. For those familiar with the R tidyverse ecosystem, `pipey` facilitates magrittr-style piping using the right bitshift operator `>>`, while staying largely pythonic in implementation. Unlike other `pandas`-oriented systems (e.g. [dfply](https://github.com/kieferk/dfply) or [pandas-ply](https://github.com/coursera/pandas-ply)), `pipey` is meant to be flexible, and therefore does not enforce any particular object input types, while providing additional custom functionality.\n\n\n## Installation\n```\npip install pipey\n```\n\n## Usage\n\nThe entirety of `pipey`'s functionality can be captured in the `pipey.Pipeable` class, which can be passed a function to create a Pipeable-compatible function or used as a decorator around a new function. Both of these functionalities are shown below.\n\n<p align=\"center\">\n  <img src=\"https://github.com/dataframehq/pipey/raw/master/docs/_static/img/example.png?raw=true\" height=\"300px\">\n</p>\n\n\n`pipey` is meant to be flexible, and therefore can accept \\(almost\\) anything as input. Creating custom functions compatible with the `pipey` framework is therefore quite easy, as long as an existing `__rshift__` method doesn't exist for the object being passed to `Pipeable`.\n\n\n## Extended usage\n\nWe support keyword arguments (and decorators, for convenience) to extend the basic piping functionality.\n\nSee `extended.py` for the full set of decorators.\n\n\n### Accept multiple inputs\n\nBy default, the input is passed as the first argument of the receiving function, but `Pipeable` allows multiple inputs to be passed in as a tuple or list through the keyword argument `unpack_input`, as shown below.\n\n```\nPrint = Pipeable(print, unpack_input=True)\n\n('hello', 'world') >> Print\n\n> hello world\n```\n\n### Use only first input\n\nOften functions will return a tuple of outputs, and when chaining `Pipeable`-compatible functions together, it's convenient to only take the first argument. This can be accomplished with the keyword argument `use_first_arg_only` as follows:\n\n```\nPrint = Pipeable(print, use_first_arg_only=True)\n\n('hello', 'world') >> Print\n\n> hello\n```\n\n### Enable calling\n\nTo remain unambiguous, by default we disable `Pipeable`-decorated objects to be called normally -- i.e. they can only be called through the piping syntax, with `>>`. This prevents unintended behavior when a function only has optional named parameters, in which case the Pipeable function would be called before the `>>` operation had a chance to pipe an input.\n\nNonetheless, we support traditional calling of our Pipeable functions using the keyword argument `use_first_arg_only`, though we urge you to **have at least one required positional argument in your function definition** to ensure this behaves as intended. This behavior can be enables as follows:\n\n```\nPrint = Pipeable(print, try_normal_call_first=True)\n\nPrint('hello world')\n\n> hello world\n```\n\n### Append docstring\n\nWe supply an `append_docstring` decorator to allow docstrings from other functions to be bolted onto Pipeable docstrings. This can be invoked as a decorator, as follows:\n\n```\n@append_docstring(print)\n@Pipeable\ndef Print(*args, **kwargs):\n    print(*args, **kwargs)\n```\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dataframehq/pipey", "keywords": "pipe,declarative,python,data science", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pipey", "package_url": "https://pypi.org/project/pipey/", "platform": "", "project_url": "https://pypi.org/project/pipey/", "project_urls": {"Homepage": "https://github.com/dataframehq/pipey"}, "release_url": "https://pypi.org/project/pipey/0.0.1a4/", "requires_dist": null, "requires_python": "", "summary": "Declarative syntactic sugar that enables piping in python.", "version": "0.0.1a4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <img height=\"90px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/000c790a20b4473f2a13d4544f412275b43f78eb/68747470733a2f2f6769746875622e636f6d2f646174616672616d6568712f70697065792f7261772f6d61737465722f646f63732f5f7374617469632f696d672f50697065792e706e673f7261773d74727565\">\n</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66068ee9ee5cc0d460a6343e3ffa9d9b5d3ad6fc/68747470733a2f2f6769746875622e636f6d2f646174616672616d6568712f70697065792f776f726b666c6f77732f507974686f6e25323043492f62616467652e737667\"></p>\n<hr>\n<p><code>pipey</code> is an open source framework that provides <strong>declarative syntactical sugar</strong> within python. For those familiar with the R tidyverse ecosystem, <code>pipey</code> facilitates magrittr-style piping using the right bitshift operator <code>&gt;&gt;</code>, while staying largely pythonic in implementation. Unlike other <code>pandas</code>-oriented systems (e.g. <a href=\"https://github.com/kieferk/dfply\" rel=\"nofollow\">dfply</a> or <a href=\"https://github.com/coursera/pandas-ply\" rel=\"nofollow\">pandas-ply</a>), <code>pipey</code> is meant to be flexible, and therefore does not enforce any particular object input types, while providing additional custom functionality.</p>\n<h2>Installation</h2>\n<pre><code>pip install pipey\n</code></pre>\n<h2>Usage</h2>\n<p>The entirety of <code>pipey</code>'s functionality can be captured in the <code>pipey.Pipeable</code> class, which can be passed a function to create a Pipeable-compatible function or used as a decorator around a new function. Both of these functionalities are shown below.</p>\n<p align=\"center\">\n  <img height=\"300px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/181f66e7f7d482bbf2508bb4600d1707508f8125/68747470733a2f2f6769746875622e636f6d2f646174616672616d6568712f70697065792f7261772f6d61737465722f646f63732f5f7374617469632f696d672f6578616d706c652e706e673f7261773d74727565\">\n</p>\n<p><code>pipey</code> is meant to be flexible, and therefore can accept (almost) anything as input. Creating custom functions compatible with the <code>pipey</code> framework is therefore quite easy, as long as an existing <code>__rshift__</code> method doesn't exist for the object being passed to <code>Pipeable</code>.</p>\n<h2>Extended usage</h2>\n<p>We support keyword arguments (and decorators, for convenience) to extend the basic piping functionality.</p>\n<p>See <code>extended.py</code> for the full set of decorators.</p>\n<h3>Accept multiple inputs</h3>\n<p>By default, the input is passed as the first argument of the receiving function, but <code>Pipeable</code> allows multiple inputs to be passed in as a tuple or list through the keyword argument <code>unpack_input</code>, as shown below.</p>\n<pre><code>Print = Pipeable(print, unpack_input=True)\n\n('hello', 'world') &gt;&gt; Print\n\n&gt; hello world\n</code></pre>\n<h3>Use only first input</h3>\n<p>Often functions will return a tuple of outputs, and when chaining <code>Pipeable</code>-compatible functions together, it's convenient to only take the first argument. This can be accomplished with the keyword argument <code>use_first_arg_only</code> as follows:</p>\n<pre><code>Print = Pipeable(print, use_first_arg_only=True)\n\n('hello', 'world') &gt;&gt; Print\n\n&gt; hello\n</code></pre>\n<h3>Enable calling</h3>\n<p>To remain unambiguous, by default we disable <code>Pipeable</code>-decorated objects to be called normally -- i.e. they can only be called through the piping syntax, with <code>&gt;&gt;</code>. This prevents unintended behavior when a function only has optional named parameters, in which case the Pipeable function would be called before the <code>&gt;&gt;</code> operation had a chance to pipe an input.</p>\n<p>Nonetheless, we support traditional calling of our Pipeable functions using the keyword argument <code>use_first_arg_only</code>, though we urge you to <strong>have at least one required positional argument in your function definition</strong> to ensure this behaves as intended. This behavior can be enables as follows:</p>\n<pre><code>Print = Pipeable(print, try_normal_call_first=True)\n\nPrint('hello world')\n\n&gt; hello world\n</code></pre>\n<h3>Append docstring</h3>\n<p>We supply an <code>append_docstring</code> decorator to allow docstrings from other functions to be bolted onto Pipeable docstrings. This can be invoked as a decorator, as follows:</p>\n<pre><code>@append_docstring(print)\n@Pipeable\ndef Print(*args, **kwargs):\n    print(*args, **kwargs)\n</code></pre>\n\n          </div>"}, "last_serial": 6520848, "releases": {"0.0.1a4": [{"comment_text": "", "digests": {"md5": "7dcc320a7cc3793878cdaa740a5628e5", "sha256": "9c6bf559ada564f5b77cca15665b8233bd73a75bc161ebe6db7f684cb6413edf"}, "downloads": -1, "filename": "pipey-0.0.1a4-py3-none-any.whl", "has_sig": false, "md5_digest": "7dcc320a7cc3793878cdaa740a5628e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6077, "upload_time": "2020-01-26T04:47:23", "upload_time_iso_8601": "2020-01-26T04:47:23.448008Z", "url": "https://files.pythonhosted.org/packages/35/ff/61cb185c56943232ac66e00f82ada728adb12681b0f87724782b97041cd1/pipey-0.0.1a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b97bfa1ed9f683cb2e28e50e9092d95b", "sha256": "807b0e36ee7dc610a30fd7f8d24539eb944680ad053093cce54a25378358fac7"}, "downloads": -1, "filename": "pipey-0.0.1a4.tar.gz", "has_sig": false, "md5_digest": "b97bfa1ed9f683cb2e28e50e9092d95b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4505, "upload_time": "2020-01-26T04:47:25", "upload_time_iso_8601": "2020-01-26T04:47:25.843965Z", "url": "https://files.pythonhosted.org/packages/c2/a5/9d986a382fb58ca802b88246ea4a9d87ee0b93708eed601a8b24ce85dc20/pipey-0.0.1a4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7dcc320a7cc3793878cdaa740a5628e5", "sha256": "9c6bf559ada564f5b77cca15665b8233bd73a75bc161ebe6db7f684cb6413edf"}, "downloads": -1, "filename": "pipey-0.0.1a4-py3-none-any.whl", "has_sig": false, "md5_digest": "7dcc320a7cc3793878cdaa740a5628e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6077, "upload_time": "2020-01-26T04:47:23", "upload_time_iso_8601": "2020-01-26T04:47:23.448008Z", "url": "https://files.pythonhosted.org/packages/35/ff/61cb185c56943232ac66e00f82ada728adb12681b0f87724782b97041cd1/pipey-0.0.1a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b97bfa1ed9f683cb2e28e50e9092d95b", "sha256": "807b0e36ee7dc610a30fd7f8d24539eb944680ad053093cce54a25378358fac7"}, "downloads": -1, "filename": "pipey-0.0.1a4.tar.gz", "has_sig": false, "md5_digest": "b97bfa1ed9f683cb2e28e50e9092d95b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4505, "upload_time": "2020-01-26T04:47:25", "upload_time_iso_8601": "2020-01-26T04:47:25.843965Z", "url": "https://files.pythonhosted.org/packages/c2/a5/9d986a382fb58ca802b88246ea4a9d87ee0b93708eed601a8b24ce85dc20/pipey-0.0.1a4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:14 2020"}