{"info": {"author": "Rene Tanczos", "author_email": "gravmatt@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"], "description": "sqlitemodel\n===========\n\nsqlitemodel is a wrapper for the sqlite3 database that enables you to\ncreate models you can easily save, query and retrieve from the database.\n\nThis is build with three classes who abstract the database communication\nand the object management.\n\nInstallation\n------------\n\nInstall through **pip**.\n\n::\n\n    $ pip install sqlitemodel\n\nor get from source\n\n::\n\n    $ git clone https://github.com/gravmatt/sqlitemodel.git\n    $ cd sqlitemodel\n    $ python setup.py install\n\nClasses\n-------\n\n-  `**Model** - Abstraction class to build database models <#model>`__\n\n-  `**SQL** - SQL query builder <#sql>`__\n\n-  `**Database** - sqlite database interface <#database>`__\n\nModel\n-----\n\nClass to abstract the model communication with the database.\n\nUsage\n~~~~~\n\n**Import**\n\n::\n\n    from sqlitemodel import Model, Database\n\n    # IMPORTANT\n    Database.DB_FILE = 'path/to/database.db'\n\n**Set the path to the database when your application starts or before\nyou try to accessing the database.**\n\nExample\n^^^^^^^\n\nBuilding a user class that inherits the Model class to show how it\nworks.\n\n::\n\n    class User(Model):\n        def __init__(self, id=None):\n            Model.__init__(self, id, dbfile=None, foreign_keys=False, parse_decltypes=False)\n\n            self.firstname = ''\n            self.lastname = ''\n            self.age = ''\n\n            # Tries to fetch the object by its rowid from the database\n            self.getModel()\n\n\n        # Tells the database class the name of the database table\n        def tablename(self):\n            return 'users'\n\n\n        # Tells the database class more about the table columns in the database\n        def columns(self):\n            return [\n                {\n                  'name': 'firstname',\n                  'type': 'TEXT'\n                },\n                {\n                  'name': 'lastname',\n                  'type': 'TEXT'\n                },\n                {\n                  'name': 'age',\n                  'type': 'INTEGER'\n                }\n            ]\n\nThe two methods ``tablename()`` and ``columns()`` are required, to map\nthe table columns with the ``Model`` objects.\n\n``id`` argument and the ``getModel()`` method in the constructor are\noptional.\n\nIt also possible to use the ``selectCopy()`` method to query for any\ndata in the database table and fill the model object with the result.\n\n::\n\n    selectCopy(SQL() | raw_sql_query_string)\n\nEx:\n\n::\n\n    class User(Model):\n        def __init__(self, id=None, email=None):\n            Model.__init__(self, id)\n            if(email):\n                self.selectCopy(SQL().WHERE('email', '=', email))\n\n**The ``Model`` class constructor has an optional ``dbfile`` argument.\nIf it is set, the static variable ``Database.DB_FILE`` is ignored.**\n\nWorking with the User class\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n**Creating a new User**\n\n::\n\n    # create a new user\n    user = User()\n\n    # creating the table inside the database\n    user.createTable()\n\n    # add infos about the user\n    user.firstname = 'Rene'\n    user.lastname = 'Tanczos'\n    user.age = 25\n\n    # save the user into the database\n    user.save()\n\n**Retriving the User from the database**\n\n::\n\n    # get it by id\n    user = User(1)\n\n    # get the user by his firstname and lastname\n    # User().selectOne(SQL())\n    user = User().selectOne(SQL().WHERE('firstname', '=', 'Rene').AND().WHERE( 'lastname', '=', 'Tanczos'))\n\n    # Or get more the one user\n    # this method will return an array of matching users\n    users = User().select(SQL().WHERE('age', '=', 25))\n\nSQL\n---\n\nClass to build SQL query to reduce misspelling and to abstract this\nproblem a bit.\n\nUsage\n~~~~~\n\n**Import**\n\n::\n\n    from sqlitemodel import SQL\n\n**INSERT**\n\n::\n\n    sql = SQL().INSERT('users').VALUES(firstname='Rene', lastname='tanczos')\n\n    print sql.toStr()\n    # INSERT INTO users (firstname,lastname) VALUES (?,?);\n\n    print sql.getValues()\n    # ('Rene', 'tanczos')\n\n**UPDATE**\n\n::\n\n    sql = SQL().UPDATE('users').SET('firstname', 'Rene').SET('lastname', 'Tanczos').WHERE('firstname', '=', 'Rene').AND().WHERE('lastname', '=', 'Tanczos')\n\n    print sql.toStr()\n    # UPDATE users SET firstname=?, lastname=? WHERE firstname=? AND lastname=?;\n\n    print sql.getValues()\n    # ('Rene', 'Tanczos', 'Rene', 'Tanczos')\n\n**SELECT**\n\n::\n\n    sql = SQL().SELECT('name', 'age', 'size').FROM('users').WHERE('age', '=', 27).AND().WHERE('size', '<', 190).ORDER_BY('age', 'ASC').LIMIT(0, 10)\n\n    print sql.toStr()\n    # SELECT name, age, size FROM users WHERE age=? AND size<? ORDER BY age ASC LIMIT 0,10;\n\n    print sql.getValues()\n    # (27, 190)\n\n``WHERE``\n\nThe WHERE method has a optional ``isRaw`` parameter.\n\nIf set to ``True``, the SQL class paste the value directly into the sql\nquery and does not use the ``?`` symbol.\n\n::\n\n    WHERE('size', '<', 190, isRaw=True)\n\n**DELETE**\n\n::\n\n    sql = SQL().DELETE('users').WHERE('id', '=', 4)\n\n    print sql.toStr()\n    # DELETE FROM users WHERE id=?;\n\n    print sql.values\n    # (4,)\n\nDatabase\n--------\n\nRepresents the database.\n\nUsage\n~~~~~\n\nFirst you should set the database file path to your sqlite3 database.\n\nDon't worry if it doesn't exist yet. Sqlite3 automatically creates a\ndatabase file on the selected path if it doesn't exists.\n\n::\n\n    from sqlitemodel import Database\n\nSet the path to the database\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt is recommended to set the path to the database after starting the\napplication by the static variable inside the *Database* class.\n\n::\n\n    Database.DB_FILE = 'path/to/database.db'\n\n    db = Database()\n\nBut the path can be also set inside the *Database* constructor while the\nobject initializes.\n\n::\n\n    db = Database('path/to/database.db')\n\n**with** statement\n^^^^^^^^^^^^^^^^^^\n\nThe *Database* class supports the *with* statement whitch is recommended\nto use.\n\n::\n\n    with Database() as db:\n        users = db.select(SQL().SELECT().FROM('users'))\n\nThe database connection get automatically closed after the *with* block\nis processed.\n\nMethods\n^^^^^^^\n\nAll of this method using a *Model* object as first argument, so that the\n*Database* object knows how to use it.\n\n::\n\n    close()\n    # close connection\n\n    createTable(model)\n    # create the database table if not exists by the the model object\n\n    save(model)\n    # create or update a model object and return it id\n\n    delete(model)\n    # delete a model object and return True/False\n\n    select(model, SQL() | sql query , values=())\n    # return a array of the given model\n\n    selectOne(model, SQL() | sql query, values=())\n    # return the first matching entry of the given model\n\n    selectById(model, id)\n    # return the a model object by his id\n\nIf there is some data without a *Model*, it can be retrieved as raw data\nof a *list* or *list* of *Dict* objects.\n\n::\n\n    getRaw(SQL() | sql query, values=(), max=-1)\n    # return an array of results.\n    # index 0 is the header of the table\n\n    getDict(SQL() |\u00a0sql query, values=(), max=-1)\n    # return a list array with a Dict object.\n    # the key of the Dict object is the column name\n\nTo count the results of a query, the method *zeroZero()* can be used.\n\n::\n\n    zeroZero(SQL() | sql query)\n    # It return the the first column of the first line ( result[0][0] )\n    # That why the method is called zeroZero()\n\nTo check if a table or column exists, the functions *table\\_exists()*\nand *column\\_exists()* can be used. Both will return a boolean value if\nthe table/column was found or not.\n\n::\n\n    table_exists('tablename')\n    # True or False\n\n    column_exists('tablename', 'column_name')\n    # True or False\n\nLicence\n-------\n\nThe MIT License (MIT)\n\nCopyright (c) 2016-2017 Ren\u00e9 Tanczos\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gravmatt/sqlitemodel", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sqlitemodel", "package_url": "https://pypi.org/project/sqlitemodel/", "platform": "MacOSX", "project_url": "https://pypi.org/project/sqlitemodel/", "project_urls": {"Homepage": "https://github.com/gravmatt/sqlitemodel"}, "release_url": "https://pypi.org/project/sqlitemodel/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Wrapper for the sqlite3 database that enables you to create models you can easily query, save and update.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>sqlitemodel is a wrapper for the sqlite3 database that enables you to\ncreate models you can easily save, query and retrieve from the database.</p>\n<p>This is build with three classes who abstract the database communication\nand the object management.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install through <strong>pip</strong>.</p>\n<pre>$ pip install sqlitemodel\n</pre>\n<p>or get from source</p>\n<pre>$ git clone https://github.com/gravmatt/sqlitemodel.git\n$ cd sqlitemodel\n$ python setup.py install\n</pre>\n</div>\n<div id=\"classes\">\n<h2>Classes</h2>\n<ul>\n<li><a href=\"#model\" rel=\"nofollow\">**Model** - Abstraction class to build database models</a></li>\n<li><a href=\"#sql\" rel=\"nofollow\">**SQL** - SQL query builder</a></li>\n<li><a href=\"#database\" rel=\"nofollow\">**Database** - sqlite database interface</a></li>\n</ul>\n</div>\n<div id=\"model\">\n<h2>Model</h2>\n<p>Class to abstract the model communication with the database.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p><strong>Import</strong></p>\n<pre>from sqlitemodel import Model, Database\n\n# IMPORTANT\nDatabase.DB_FILE = 'path/to/database.db'\n</pre>\n<p><strong>Set the path to the database when your application starts or before\nyou try to accessing the database.</strong></p>\n<div id=\"example\">\n<h4>Example</h4>\n<p>Building a user class that inherits the Model class to show how it\nworks.</p>\n<pre>class User(Model):\n    def __init__(self, id=None):\n        Model.__init__(self, id, dbfile=None, foreign_keys=False, parse_decltypes=False)\n\n        self.firstname = ''\n        self.lastname = ''\n        self.age = ''\n\n        # Tries to fetch the object by its rowid from the database\n        self.getModel()\n\n\n    # Tells the database class the name of the database table\n    def tablename(self):\n        return 'users'\n\n\n    # Tells the database class more about the table columns in the database\n    def columns(self):\n        return [\n            {\n              'name': 'firstname',\n              'type': 'TEXT'\n            },\n            {\n              'name': 'lastname',\n              'type': 'TEXT'\n            },\n            {\n              'name': 'age',\n              'type': 'INTEGER'\n            }\n        ]\n</pre>\n<p>The two methods <tt>tablename()</tt> and <tt>columns()</tt> are required, to map\nthe table columns with the <tt>Model</tt> objects.</p>\n<p><tt>id</tt> argument and the <tt>getModel()</tt> method in the constructor are\noptional.</p>\n<p>It also possible to use the <tt>selectCopy()</tt> method to query for any\ndata in the database table and fill the model object with the result.</p>\n<pre>selectCopy(SQL() | raw_sql_query_string)\n</pre>\n<p>Ex:</p>\n<pre>class User(Model):\n    def __init__(self, id=None, email=None):\n        Model.__init__(self, id)\n        if(email):\n            self.selectCopy(SQL().WHERE('email', '=', email))\n</pre>\n<p><strong>The ``Model`` class constructor has an optional ``dbfile`` argument.\nIf it is set, the static variable ``Database.DB_FILE`` is ignored.</strong></p>\n</div>\n<div id=\"working-with-the-user-class\">\n<h4>Working with the User class</h4>\n<p><strong>Creating a new User</strong></p>\n<pre># create a new user\nuser = User()\n\n# creating the table inside the database\nuser.createTable()\n\n# add infos about the user\nuser.firstname = 'Rene'\nuser.lastname = 'Tanczos'\nuser.age = 25\n\n# save the user into the database\nuser.save()\n</pre>\n<p><strong>Retriving the User from the database</strong></p>\n<pre># get it by id\nuser = User(1)\n\n# get the user by his firstname and lastname\n# User().selectOne(SQL())\nuser = User().selectOne(SQL().WHERE('firstname', '=', 'Rene').AND().WHERE( 'lastname', '=', 'Tanczos'))\n\n# Or get more the one user\n# this method will return an array of matching users\nusers = User().select(SQL().WHERE('age', '=', 25))\n</pre>\n</div>\n</div>\n</div>\n<div id=\"sql\">\n<h2>SQL</h2>\n<p>Class to build SQL query to reduce misspelling and to abstract this\nproblem a bit.</p>\n<div id=\"id1\">\n<h3>Usage</h3>\n<p><strong>Import</strong></p>\n<pre>from sqlitemodel import SQL\n</pre>\n<p><strong>INSERT</strong></p>\n<pre>sql = SQL().INSERT('users').VALUES(firstname='Rene', lastname='tanczos')\n\nprint sql.toStr()\n# INSERT INTO users (firstname,lastname) VALUES (?,?);\n\nprint sql.getValues()\n# ('Rene', 'tanczos')\n</pre>\n<p><strong>UPDATE</strong></p>\n<pre>sql = SQL().UPDATE('users').SET('firstname', 'Rene').SET('lastname', 'Tanczos').WHERE('firstname', '=', 'Rene').AND().WHERE('lastname', '=', 'Tanczos')\n\nprint sql.toStr()\n# UPDATE users SET firstname=?, lastname=? WHERE firstname=? AND lastname=?;\n\nprint sql.getValues()\n# ('Rene', 'Tanczos', 'Rene', 'Tanczos')\n</pre>\n<p><strong>SELECT</strong></p>\n<pre>sql = SQL().SELECT('name', 'age', 'size').FROM('users').WHERE('age', '=', 27).AND().WHERE('size', '&lt;', 190).ORDER_BY('age', 'ASC').LIMIT(0, 10)\n\nprint sql.toStr()\n# SELECT name, age, size FROM users WHERE age=? AND size&lt;? ORDER BY age ASC LIMIT 0,10;\n\nprint sql.getValues()\n# (27, 190)\n</pre>\n<p><tt>WHERE</tt></p>\n<p>The WHERE method has a optional <tt>isRaw</tt> parameter.</p>\n<p>If set to <tt>True</tt>, the SQL class paste the value directly into the sql\nquery and does not use the <tt>?</tt> symbol.</p>\n<pre>WHERE('size', '&lt;', 190, isRaw=True)\n</pre>\n<p><strong>DELETE</strong></p>\n<pre>sql = SQL().DELETE('users').WHERE('id', '=', 4)\n\nprint sql.toStr()\n# DELETE FROM users WHERE id=?;\n\nprint sql.values\n# (4,)\n</pre>\n</div>\n</div>\n<div id=\"database\">\n<h2>Database</h2>\n<p>Represents the database.</p>\n<div id=\"id2\">\n<h3>Usage</h3>\n<p>First you should set the database file path to your sqlite3 database.</p>\n<p>Don\u2019t worry if it doesn\u2019t exist yet. Sqlite3 automatically creates a\ndatabase file on the selected path if it doesn\u2019t exists.</p>\n<pre>from sqlitemodel import Database\n</pre>\n<div id=\"set-the-path-to-the-database\">\n<h4>Set the path to the database</h4>\n<p>It is recommended to set the path to the database after starting the\napplication by the static variable inside the <em>Database</em> class.</p>\n<pre>Database.DB_FILE = 'path/to/database.db'\n\ndb = Database()\n</pre>\n<p>But the path can be also set inside the <em>Database</em> constructor while the\nobject initializes.</p>\n<pre>db = Database('path/to/database.db')\n</pre>\n</div>\n<div id=\"with-statement\">\n<h4><strong>with</strong> statement</h4>\n<p>The <em>Database</em> class supports the <em>with</em> statement whitch is recommended\nto use.</p>\n<pre>with Database() as db:\n    users = db.select(SQL().SELECT().FROM('users'))\n</pre>\n<p>The database connection get automatically closed after the <em>with</em> block\nis processed.</p>\n</div>\n<div id=\"methods\">\n<h4>Methods</h4>\n<p>All of this method using a <em>Model</em> object as first argument, so that the\n<em>Database</em> object knows how to use it.</p>\n<pre>close()\n# close connection\n\ncreateTable(model)\n# create the database table if not exists by the the model object\n\nsave(model)\n# create or update a model object and return it id\n\ndelete(model)\n# delete a model object and return True/False\n\nselect(model, SQL() | sql query , values=())\n# return a array of the given model\n\nselectOne(model, SQL() | sql query, values=())\n# return the first matching entry of the given model\n\nselectById(model, id)\n# return the a model object by his id\n</pre>\n<p>If there is some data without a <em>Model</em>, it can be retrieved as raw data\nof a <em>list</em> or <em>list</em> of <em>Dict</em> objects.</p>\n<pre>getRaw(SQL() | sql query, values=(), max=-1)\n# return an array of results.\n# index 0 is the header of the table\n\ngetDict(SQL() |\u00a0sql query, values=(), max=-1)\n# return a list array with a Dict object.\n# the key of the Dict object is the column name\n</pre>\n<p>To count the results of a query, the method <em>zeroZero()</em> can be used.</p>\n<pre>zeroZero(SQL() | sql query)\n# It return the the first column of the first line ( result[0][0] )\n# That why the method is called zeroZero()\n</pre>\n<p>To check if a table or column exists, the functions <em>table_exists()</em>\nand <em>column_exists()</em> can be used. Both will return a boolean value if\nthe table/column was found or not.</p>\n<pre>table_exists('tablename')\n# True or False\n\ncolumn_exists('tablename', 'column_name')\n# True or False\n</pre>\n</div>\n</div>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p>The MIT License (MIT)</p>\n<p>Copyright (c) 2016-2017 Ren\u00e9 Tanczos</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n</div>\n\n          </div>"}, "last_serial": 3579667, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7f954981aa9c5e04a93cc72e862850a4", "sha256": "93a2141b7b44e50acf7c748d471b3d72f644722493f5e7320fb1abd94c7b8634"}, "downloads": -1, "filename": "sqlitemodel-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7f954981aa9c5e04a93cc72e862850a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3794, "upload_time": "2016-03-13T18:42:23", "upload_time_iso_8601": "2016-03-13T18:42:23.588529Z", "url": "https://files.pythonhosted.org/packages/c9/ef/9d8b02659811485ef20c62b5d31146db2d2154ae50509675a9fc7a27f82b/sqlitemodel-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9270c1245d078fd27df2afd67b52fced", "sha256": "58872396649d85405d4be337a4f88d3cac88402dbc0e0ed757c56f7e86337197"}, "downloads": -1, "filename": "sqlitemodel-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9270c1245d078fd27df2afd67b52fced", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6675, "upload_time": "2016-03-14T18:14:17", "upload_time_iso_8601": "2016-03-14T18:14:17.087687Z", "url": "https://files.pythonhosted.org/packages/dd/98/9c5b261ebbfd701716e334d5e97cad0ec332e766bd154c815649430b86a0/sqlitemodel-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "dbaa2d27533db5619f1bf6f9331d4fc5", "sha256": "2ae21e634beb614bc41def84a3b9a58076034a39013dbdd4d7c00aa9a0d6f49f"}, "downloads": -1, "filename": "sqlitemodel-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dbaa2d27533db5619f1bf6f9331d4fc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7351, "upload_time": "2016-03-26T20:08:30", "upload_time_iso_8601": "2016-03-26T20:08:30.821264Z", "url": "https://files.pythonhosted.org/packages/ca/65/4e9163be92b5ef07073f6c3852335d6150828af49ebecbf69966074a48db/sqlitemodel-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c9f8eddfc75ec742ed7086c313e38001", "sha256": "275c8dbd080ef65d5af7417e6841693f81e0f3e00c2c085a71f6801e6eb3e044"}, "downloads": -1, "filename": "sqlitemodel-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c9f8eddfc75ec742ed7086c313e38001", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8772, "upload_time": "2017-02-02T17:06:24", "upload_time_iso_8601": "2017-02-02T17:06:24.481763Z", "url": "https://files.pythonhosted.org/packages/be/5f/16a91bf921de913b92359889604225a83331807bd5d5f1269a06093a516b/sqlitemodel-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b14c91b8d575d7a7c6d50f6a783d1eff", "sha256": "7a767e6ef133cfb450102bc116d732a2c1963910e01cd0ecfd1591ebd817e296"}, "downloads": -1, "filename": "sqlitemodel-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b14c91b8d575d7a7c6d50f6a783d1eff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7730, "upload_time": "2018-02-11T19:05:36", "upload_time_iso_8601": "2018-02-11T19:05:36.139755Z", "url": "https://files.pythonhosted.org/packages/c6/ff/6cecf47a16ac4cb253c09634d7287ae13c6000cb25cd8515b0f0b67d14b4/sqlitemodel-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1d6724c6ac9d36ad385b3af400139483", "sha256": "dbd0ac9ad0cedeff934ffd6005f2fa8926d04488e7c551ea728bd9832a681800"}, "downloads": -1, "filename": "sqlitemodel-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1d6724c6ac9d36ad385b3af400139483", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7972, "upload_time": "2018-02-13T21:22:42", "upload_time_iso_8601": "2018-02-13T21:22:42.048816Z", "url": "https://files.pythonhosted.org/packages/f7/b1/af95c08a0a9bf4b516f6372a6d968611cb31c423964ab9ff5f4488f221e7/sqlitemodel-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d6724c6ac9d36ad385b3af400139483", "sha256": "dbd0ac9ad0cedeff934ffd6005f2fa8926d04488e7c551ea728bd9832a681800"}, "downloads": -1, "filename": "sqlitemodel-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1d6724c6ac9d36ad385b3af400139483", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7972, "upload_time": "2018-02-13T21:22:42", "upload_time_iso_8601": "2018-02-13T21:22:42.048816Z", "url": "https://files.pythonhosted.org/packages/f7/b1/af95c08a0a9bf4b516f6372a6d968611cb31c423964ab9ff5f4488f221e7/sqlitemodel-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:41 2020"}