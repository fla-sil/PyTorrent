{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# parserutils\n\n[![Build Status](https://travis-ci.org/consbio/parserutils.png?branch=master)](https://travis-ci.org/consbio/parserutils)[![Coverage Status](https://coveralls.io/repos/github/consbio/parserutils/badge.svg?branch=master)](https://coveralls.io/github/consbio/parserutils?branch=master)\n\nThis is a library of utility functions designed to make a developer's life easier.\n\nThe functions in this library are written to be both performant and Pythonic, as well as compatible with Python 2.7 through 3.6.\nThey are both documented and covered thoroughly by unit tests that fully describe and prove their behavior.\n\nIn general, my philosophy is that utility functions should be fast and handle edge cases so the caller doesn't have to take all kinds of precautions or do type checking on results.\nThus, in this library, if None will break a function it is simply returned as is; if there's nothing to do for a value, the result is returned without processing; otherwise, values are either processed successfully or a standard exception is returned.\n\nBut this is just a starting point. I welcome feedback and requests for additional functionality.\n\n\n## Installation\nInstall with `pip install parserutils`.\n\n## Usage\n\nHere's what you can do with `dict` objects and other collections.\n```python\nfrom parserutils import collections\n\ncollections.accumulate_items([('key', 'val1'), ('key', 'val2'), ('key', 'val3')])   # {'key': ['val1', 'val2', 'val3']}\ncollections.accumulate_items(\n    [('key1', 'val1'), ('key2', 'val2'), ('key3', 'val3')], reduce_each=True  # {'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}\n)\n\ncollections.setdefaults({}, 'a.b')                         # {'a': {'b': None}}\ncollections.setdefaults({}, ['a.b', 'a.c'])                # {'a': {'b': None, 'c': None}}\ncollections.setdefaults({}, {'a.b': 'bbb', 'a.c': 'ccc'})  # {'a': {'b': 'bbb', 'c': 'ccc'}}\n\ncollections.filter_empty(x for x in (None, [], ['a'], '', {'b'}, 'c'))      # [['a'], {'b'}, 'c']\ncollections.flatten_items(x for x in ('abc', ['a', 'b', 'c'], ('d', 'e')))  # ['abc', 'a', 'b', 'c', 'd', 'e']\n\ncollections.remove_duplicates('abcdefabc')                                 # 'abcdef'\ncollections.remove_duplicates('abcdefabc', in_reverse=True)                # 'defabc'\ncollections.remove_duplicates(['a', 'b', 'c', 'a'])                        # ['a', 'b', 'c']\ncollections.remove_duplicates(('a', 'b', 'c', 'a'), in_reverse=True)       # ('b', 'c', 'a')\ncollections.remove_duplicates(x for x in 'abca')                           # ['a', 'b', 'c']\ncollections.remove_duplicates((x for x in 'abca'), in_reverse=True)        # ['b', 'c', 'a']\ncollections.remove_duplicates((set(x) for x in 'abca'), is_hashable=True)  # [{'a'}, {'b'}, {'c'}]\n\ncollections.rindex('aba', 'a')               # 2\ncollections.rindex(['a', 'b', 'a'], 'a')     # 2\ncollections.rindex(('a', 'b', 'a'), 'a')     # 2\ncollections.rindex('xyz', 'a')               # ValueError\ncollections.rindex([x for x in 'xyz'], 'a')  # ValueError\n\ncollections.rfind('aba', 'a')                # 2\ncollections.rfind(['a', 'b', 'a'], 'a')      # 2\ncollections.rfind(('a', 'b', 'a'), 'a')      # 2\ncollections.rindex('xyz', 'a')               # -1\ncollections.rfind([x for x in 'xyz'], 'a')   # -1\n\ncollections.reduce_value(['abc'])          # 'abc'\ncollections.reduce_value(('abc',))         # 'abc'\ncollections.reduce_value({'abc'})          # 'abc'\ncollections.reduce_value('abc')            # 'abc'\ncollections.reduce_value({'a': 'aaa'})     # {'a': 'aaa'}\ncollections.reduce_value([{'a': 'aaa'}])   # {'a': 'aaa'}\ncollections.reduce_value(['a', 'b', 'c'])  # ['a', 'b', 'c']\n\ncollections.wrap_value(['abc'])           # ['abc']\ncollections.wrap_value(('abc',))          # ('abc',)\ncollections.wrap_value('abc')             # ['abc']\ncollections.wrap_value(x for x in 'abc')  # ['a', 'b', 'c']\ncollections.wrap_value({'a': 'aaa'})      # [{'a': 'aaa'}]\ncollections.wrap_value(['a', 'b', 'c'])   # ['a', 'b', 'c']\n```\n\nHere's a little bit about dates and numbers.\n```python\nfrom parserutils import dates\nfrom parserutils import numbers\n\n# Leverages dateutil in general, but also handles milliseconds and provides defaults\n\ndates.parse_dates(None, default='today')  # Today (default behavior)\ndates.parse_dates(None, default=None)     # Returns None\ndates.parse_dates('nope', default=None)   # Returns None\ndates.parse_dates(0)                      # 1970\ndates.parse_dates('<date_format>')        # Behaves as described in dateutil library\n\n# Reliably handles all the usual cases\n\nnumbers.is_number(0)                    # Integer: True\nnumbers.is_number(1.1)                  # Float: True\nnumbers.is_number('2.2')                # String: True\nnumbers.is_number(False)                # Boolean: False by default\nnumbers.is_number(False, if_bool=True)  # Boolean: True if you need it to\nnumbers.is_number(float('inf'))         # Infinite: False\nnumbers.is_number(float('nan'))         # NaN: False\n```\n\nHere's something about string and URL parsing helpers.\n```python\nfrom parserutils import strings\nfrom parserutils import urls\n\n# These string conversions are written to be fast and reliable\n\nstrings.camel_to_constant('toConstant')        # TO_CONSTANT\nstrings.camel_to_constant('XMLConstant')       # XML_CONSTANT\nstrings.camel_to_constant('withNumbers1And2')  # WITH_NUMBERS1_AND2\n\nstrings.camel_to_snake('toSnake')              # to_snake\nstrings.camel_to_snake('withXMLAbbreviation')  # with_xml_abbreviation\nstrings.camel_to_snake('withNumbers3And4')     # with_numbers3_and4\n\nstrings.snake_to_camel('from_snake')              # fromSnake\nstrings.snake_to_camel('_leading_and_trailing_')  # leadingAndTrailing\nstrings.snake_to_camel('extra___underscores')     # extraUnderscores\n\nstrings.find_all('ab??ca??bc??', '??')                         # [2, 6, 10]\nstrings.find_all('ab??ca??bc??', '??', reverse=True)           # [10, 6, 2]\nstrings.find_all('ab??ca??bc??', '??', limit=2, reverse=True)  # [10, 6]\nstrings.find_all('ab??ca??bc??', '??', start=4)                # [6, 10]\nstrings.find_all('ab??ca??bc??', '??', end=8)                  # [2, 6]\nstrings.find_all('ab??ca??bc??', '??', start=4, end=8)         # [6]\n\nstrings.splitany('ab:ca:bc', ',')           # Same as 'ab:ca:bc'.split(':')\nstrings.splitany('ab:ca:bc', ',', 1)        # Same as 'ab:ca:bc'.split(':', 1)\nstrings.splitany('ab|ca:bc', '|:')          # ['ab', 'ca', 'bc']\nstrings.splitany('ab|ca:bc', ':|', 1)       # ['ab', 'ca:bc']\nstrings.splitany('0<=3<5', ['<', '<='])     # ['0', '3', '5']\nstrings.splitany('0<=3<5', ['<', '<='], 1)  # ['0', '3<5']\n\nstrings.to_ascii_equivalent('smart quotes, etc.')  # Replaces with ascii quotes, etc.\n\n# URL manipulation leverages urllib, but spares you the extra code\n\nurls.get_base_url('http://www.params.com?a=aaa')                  # 'http://www.params.com/'\nurls.get_base_url('http://www.path.com/test')                     # 'http://www.path.com/'\nurls.get_base_url('http://www.path.com/test', include_path=True)  # 'http://www.path.com/test/'\nurls.get_base_url('http://www.params.com/test?a=aaa', True)       # 'http://www.params.com/test/'\n\nurls.update_url_params('http://www.params.com?a=aaa', a='aaa')  # 'http://www.params.com?a=aaa'\nurls.update_url_params('http://www.params.com?a=aaa', a='xxx')  # 'http://www.params.com?a=xxx'\nurls.update_url_params('http://www.params.com', b='bbb')        # 'http://www.params.com?b=bbb'\nurls.update_url_params('http://www.params.com', c=['c', 'cc'])  # 'http://www.params.com?c=c&c=cc'\n\n# Helpers to parse urls to and from parts: parses path as list and params as dict\nurls.url_to_parts('http://www.params.com/test/path?a=aaa')      # SplitResult(..., path=['test', 'path'], query={'a': 'aaa'})\nurls.parts_to_url(\n    {'netloc': 'www.params.com', 'query': {'a': 'aaa'}          # 'http://www.params.com?a=aaa'\n)\nurls.parts_to_url(\n    urls.url_to_parts('http://www.params.com/test/path?a=aaa')  # 'http://www.params.com/test/path?a=aaa'\n)\n```\n\nFinally, XML parsing is also supported, using the cElementTree and defusedxml libraries for performance and security\n```python\nfrom parserutils import elements\n\n# First convert an XML string to an Element object\nxml_string = '<root><parent><child>one</child><child>two</child><uglyChild>yuck</uglyChild></parent></root>'\nxml_element = elements.get_element(xml_string)\n\n\n# Update the XML string and print it back out\nelements.set_element_text(xml_element, 'parent/child', 'child text')\nelements.set_element_attributes(xml_element, childHas='child attribute')\nelements.remove_element(xml_element, 'parent/uglyChild')\nelements.element_to_string(xml_element)\n\n\n# Conversion from string to Element, to dict, and then back to string\nconverted = elements.element_to_dict(xml_string, recurse=True)\nreverted = elements.dict_to_element(converted)\nreverted = elements.get_element(converted)\nxml_string == elements.element_to_string(converted)\n\n\n# Conversion to flattened dict object\nroot, obj = elements.element_to_object(converted)\nobj == {'root': {'parent': {'child': ['one', 'two'], 'uglyChild': 'yuck'}}}\n\n\n# Read in an XML file and write it elsewhere\nwith open('/path/to/file.xml', 'wb') as xml:\n    xml_from_file = elements.get_element(xml)\n    elements.write_element(xml_from_file, '/path/to/updated/file.xml')\n\n\n# Write a local file from a remote location (via URL)\nxml_from_web = elements.get_remote_element('http://en.wikipedia.org/wiki/XML')\nelements.write_element(xml_from_web, '/path/to/new/file.xml')\n\n\n# Read content at a local file path to a string\nxml_from_path = elements.get_remote_element('/path/to/file.xml')\nelements.element_to_string(xml_from_path)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/consbio/parserutils", "keywords": "parser,parsing,utils,utilities,collections,dates,elements,numbers,strings,url,xml", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "parserutils", "package_url": "https://pypi.org/project/parserutils/", "platform": "", "project_url": "https://pypi.org/project/parserutils/", "project_urls": {"Homepage": "https://github.com/consbio/parserutils"}, "release_url": "https://pypi.org/project/parserutils/1.1.2/", "requires_dist": ["defusedxml (>=0.4.1)", "python-dateutil (>=2.4.2)", "six (>=1.9.0)"], "requires_python": "", "summary": "A collection of performant parsing utilities", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>parserutils</h1>\n<p><a href=\"https://travis-ci.org/consbio/parserutils\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3102be36678ec4bca2b30903c53c9c20c4be3df8/68747470733a2f2f7472617669732d63692e6f72672f636f6e7362696f2f7061727365727574696c732e706e673f6272616e63683d6d6173746572\"></a><a href=\"https://coveralls.io/github/consbio/parserutils?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41b810140172db70a5ec0a7a51b4a9add52e9224/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f636f6e7362696f2f7061727365727574696c732f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>This is a library of utility functions designed to make a developer's life easier.</p>\n<p>The functions in this library are written to be both performant and Pythonic, as well as compatible with Python 2.7 through 3.6.\nThey are both documented and covered thoroughly by unit tests that fully describe and prove their behavior.</p>\n<p>In general, my philosophy is that utility functions should be fast and handle edge cases so the caller doesn't have to take all kinds of precautions or do type checking on results.\nThus, in this library, if None will break a function it is simply returned as is; if there's nothing to do for a value, the result is returned without processing; otherwise, values are either processed successfully or a standard exception is returned.</p>\n<p>But this is just a starting point. I welcome feedback and requests for additional functionality.</p>\n<h2>Installation</h2>\n<p>Install with <code>pip install parserutils</code>.</p>\n<h2>Usage</h2>\n<p>Here's what you can do with <code>dict</code> objects and other collections.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parserutils</span> <span class=\"kn\">import</span> <span class=\"n\">collections</span>\n\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">accumulate_items</span><span class=\"p\">([(</span><span class=\"s1\">'key'</span><span class=\"p\">,</span> <span class=\"s1\">'val1'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'key'</span><span class=\"p\">,</span> <span class=\"s1\">'val2'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'key'</span><span class=\"p\">,</span> <span class=\"s1\">'val3'</span><span class=\"p\">)])</span>   <span class=\"c1\"># {'key': ['val1', 'val2', 'val3']}</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">accumulate_items</span><span class=\"p\">(</span>\n    <span class=\"p\">[(</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'val1'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'key2'</span><span class=\"p\">,</span> <span class=\"s1\">'val2'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'key3'</span><span class=\"p\">,</span> <span class=\"s1\">'val3'</span><span class=\"p\">)],</span> <span class=\"n\">reduce_each</span><span class=\"o\">=</span><span class=\"kc\">True</span>  <span class=\"c1\"># {'key1': 'val1', 'key2': 'val2', 'key3': 'val3'}</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">setdefaults</span><span class=\"p\">({},</span> <span class=\"s1\">'a.b'</span><span class=\"p\">)</span>                         <span class=\"c1\"># {'a': {'b': None}}</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">setdefaults</span><span class=\"p\">({},</span> <span class=\"p\">[</span><span class=\"s1\">'a.b'</span><span class=\"p\">,</span> <span class=\"s1\">'a.c'</span><span class=\"p\">])</span>                <span class=\"c1\"># {'a': {'b': None, 'c': None}}</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">setdefaults</span><span class=\"p\">({},</span> <span class=\"p\">{</span><span class=\"s1\">'a.b'</span><span class=\"p\">:</span> <span class=\"s1\">'bbb'</span><span class=\"p\">,</span> <span class=\"s1\">'a.c'</span><span class=\"p\">:</span> <span class=\"s1\">'ccc'</span><span class=\"p\">})</span>  <span class=\"c1\"># {'a': {'b': 'bbb', 'c': 'ccc'}}</span>\n\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">filter_empty</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">],</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">},</span> <span class=\"s1\">'c'</span><span class=\"p\">))</span>      <span class=\"c1\"># [['a'], {'b'}, 'c']</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">flatten_items</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">)))</span>  <span class=\"c1\"># ['abc', 'a', 'b', 'c', 'd', 'e']</span>\n\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">remove_duplicates</span><span class=\"p\">(</span><span class=\"s1\">'abcdefabc'</span><span class=\"p\">)</span>                                 <span class=\"c1\"># 'abcdef'</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">remove_duplicates</span><span class=\"p\">(</span><span class=\"s1\">'abcdefabc'</span><span class=\"p\">,</span> <span class=\"n\">in_reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>                <span class=\"c1\"># 'defabc'</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">remove_duplicates</span><span class=\"p\">([</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">])</span>                        <span class=\"c1\"># ['a', 'b', 'c']</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">remove_duplicates</span><span class=\"p\">((</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"n\">in_reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>       <span class=\"c1\"># ('b', 'c', 'a')</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">remove_duplicates</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"s1\">'abca'</span><span class=\"p\">)</span>                           <span class=\"c1\"># ['a', 'b', 'c']</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">remove_duplicates</span><span class=\"p\">((</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"s1\">'abca'</span><span class=\"p\">),</span> <span class=\"n\">in_reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>        <span class=\"c1\"># ['b', 'c', 'a']</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">remove_duplicates</span><span class=\"p\">((</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"s1\">'abca'</span><span class=\"p\">),</span> <span class=\"n\">is_hashable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># [{'a'}, {'b'}, {'c'}]</span>\n\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">rindex</span><span class=\"p\">(</span><span class=\"s1\">'aba'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>               <span class=\"c1\"># 2</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">rindex</span><span class=\"p\">([</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">],</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>     <span class=\"c1\"># 2</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">rindex</span><span class=\"p\">((</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>     <span class=\"c1\"># 2</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">rindex</span><span class=\"p\">(</span><span class=\"s1\">'xyz'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>               <span class=\"c1\"># ValueError</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">rindex</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"s1\">'xyz'</span><span class=\"p\">],</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>  <span class=\"c1\"># ValueError</span>\n\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">rfind</span><span class=\"p\">(</span><span class=\"s1\">'aba'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>                <span class=\"c1\"># 2</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">rfind</span><span class=\"p\">([</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">],</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>      <span class=\"c1\"># 2</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">rfind</span><span class=\"p\">((</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>      <span class=\"c1\"># 2</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">rindex</span><span class=\"p\">(</span><span class=\"s1\">'xyz'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>               <span class=\"c1\"># -1</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">rfind</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"s1\">'xyz'</span><span class=\"p\">],</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>   <span class=\"c1\"># -1</span>\n\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">reduce_value</span><span class=\"p\">([</span><span class=\"s1\">'abc'</span><span class=\"p\">])</span>          <span class=\"c1\"># 'abc'</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">reduce_value</span><span class=\"p\">((</span><span class=\"s1\">'abc'</span><span class=\"p\">,))</span>         <span class=\"c1\"># 'abc'</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">reduce_value</span><span class=\"p\">({</span><span class=\"s1\">'abc'</span><span class=\"p\">})</span>          <span class=\"c1\"># 'abc'</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">reduce_value</span><span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">)</span>            <span class=\"c1\"># 'abc'</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">reduce_value</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'aaa'</span><span class=\"p\">})</span>     <span class=\"c1\"># {'a': 'aaa'}</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">reduce_value</span><span class=\"p\">([{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'aaa'</span><span class=\"p\">}])</span>   <span class=\"c1\"># {'a': 'aaa'}</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">reduce_value</span><span class=\"p\">([</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">])</span>  <span class=\"c1\"># ['a', 'b', 'c']</span>\n\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">wrap_value</span><span class=\"p\">([</span><span class=\"s1\">'abc'</span><span class=\"p\">])</span>           <span class=\"c1\"># ['abc']</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">wrap_value</span><span class=\"p\">((</span><span class=\"s1\">'abc'</span><span class=\"p\">,))</span>          <span class=\"c1\"># ('abc',)</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">wrap_value</span><span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">)</span>             <span class=\"c1\"># ['abc']</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">wrap_value</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"s1\">'abc'</span><span class=\"p\">)</span>  <span class=\"c1\"># ['a', 'b', 'c']</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">wrap_value</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'aaa'</span><span class=\"p\">})</span>      <span class=\"c1\"># [{'a': 'aaa'}]</span>\n<span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">wrap_value</span><span class=\"p\">([</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">])</span>   <span class=\"c1\"># ['a', 'b', 'c']</span>\n</pre>\n<p>Here's a little bit about dates and numbers.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parserutils</span> <span class=\"kn\">import</span> <span class=\"n\">dates</span>\n<span class=\"kn\">from</span> <span class=\"nn\">parserutils</span> <span class=\"kn\">import</span> <span class=\"n\">numbers</span>\n\n<span class=\"c1\"># Leverages dateutil in general, but also handles milliseconds and provides defaults</span>\n\n<span class=\"n\">dates</span><span class=\"o\">.</span><span class=\"n\">parse_dates</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'today'</span><span class=\"p\">)</span>  <span class=\"c1\"># Today (default behavior)</span>\n<span class=\"n\">dates</span><span class=\"o\">.</span><span class=\"n\">parse_dates</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>     <span class=\"c1\"># Returns None</span>\n<span class=\"n\">dates</span><span class=\"o\">.</span><span class=\"n\">parse_dates</span><span class=\"p\">(</span><span class=\"s1\">'nope'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>   <span class=\"c1\"># Returns None</span>\n<span class=\"n\">dates</span><span class=\"o\">.</span><span class=\"n\">parse_dates</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>                      <span class=\"c1\"># 1970</span>\n<span class=\"n\">dates</span><span class=\"o\">.</span><span class=\"n\">parse_dates</span><span class=\"p\">(</span><span class=\"s1\">'&lt;date_format&gt;'</span><span class=\"p\">)</span>        <span class=\"c1\"># Behaves as described in dateutil library</span>\n\n<span class=\"c1\"># Reliably handles all the usual cases</span>\n\n<span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>                    <span class=\"c1\"># Integer: True</span>\n<span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"mf\">1.1</span><span class=\"p\">)</span>                  <span class=\"c1\"># Float: True</span>\n<span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"s1\">'2.2'</span><span class=\"p\">)</span>                <span class=\"c1\"># String: True</span>\n<span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>                <span class=\"c1\"># Boolean: False by default</span>\n<span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">if_bool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># Boolean: True if you need it to</span>\n<span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s1\">'inf'</span><span class=\"p\">))</span>         <span class=\"c1\"># Infinite: False</span>\n<span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">is_number</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s1\">'nan'</span><span class=\"p\">))</span>         <span class=\"c1\"># NaN: False</span>\n</pre>\n<p>Here's something about string and URL parsing helpers.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parserutils</span> <span class=\"kn\">import</span> <span class=\"n\">strings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">parserutils</span> <span class=\"kn\">import</span> <span class=\"n\">urls</span>\n\n<span class=\"c1\"># These string conversions are written to be fast and reliable</span>\n\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">camel_to_constant</span><span class=\"p\">(</span><span class=\"s1\">'toConstant'</span><span class=\"p\">)</span>        <span class=\"c1\"># TO_CONSTANT</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">camel_to_constant</span><span class=\"p\">(</span><span class=\"s1\">'XMLConstant'</span><span class=\"p\">)</span>       <span class=\"c1\"># XML_CONSTANT</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">camel_to_constant</span><span class=\"p\">(</span><span class=\"s1\">'withNumbers1And2'</span><span class=\"p\">)</span>  <span class=\"c1\"># WITH_NUMBERS1_AND2</span>\n\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">camel_to_snake</span><span class=\"p\">(</span><span class=\"s1\">'toSnake'</span><span class=\"p\">)</span>              <span class=\"c1\"># to_snake</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">camel_to_snake</span><span class=\"p\">(</span><span class=\"s1\">'withXMLAbbreviation'</span><span class=\"p\">)</span>  <span class=\"c1\"># with_xml_abbreviation</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">camel_to_snake</span><span class=\"p\">(</span><span class=\"s1\">'withNumbers3And4'</span><span class=\"p\">)</span>     <span class=\"c1\"># with_numbers3_and4</span>\n\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">snake_to_camel</span><span class=\"p\">(</span><span class=\"s1\">'from_snake'</span><span class=\"p\">)</span>              <span class=\"c1\"># fromSnake</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">snake_to_camel</span><span class=\"p\">(</span><span class=\"s1\">'_leading_and_trailing_'</span><span class=\"p\">)</span>  <span class=\"c1\"># leadingAndTrailing</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">snake_to_camel</span><span class=\"p\">(</span><span class=\"s1\">'extra___underscores'</span><span class=\"p\">)</span>     <span class=\"c1\"># extraUnderscores</span>\n\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">'ab??ca??bc??'</span><span class=\"p\">,</span> <span class=\"s1\">'??'</span><span class=\"p\">)</span>                         <span class=\"c1\"># [2, 6, 10]</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">'ab??ca??bc??'</span><span class=\"p\">,</span> <span class=\"s1\">'??'</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>           <span class=\"c1\"># [10, 6, 2]</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">'ab??ca??bc??'</span><span class=\"p\">,</span> <span class=\"s1\">'??'</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># [10, 6]</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">'ab??ca??bc??'</span><span class=\"p\">,</span> <span class=\"s1\">'??'</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>                <span class=\"c1\"># [6, 10]</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">'ab??ca??bc??'</span><span class=\"p\">,</span> <span class=\"s1\">'??'</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>                  <span class=\"c1\"># [2, 6]</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">'ab??ca??bc??'</span><span class=\"p\">,</span> <span class=\"s1\">'??'</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>         <span class=\"c1\"># [6]</span>\n\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">splitany</span><span class=\"p\">(</span><span class=\"s1\">'ab:ca:bc'</span><span class=\"p\">,</span> <span class=\"s1\">','</span><span class=\"p\">)</span>           <span class=\"c1\"># Same as 'ab:ca:bc'.split(':')</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">splitany</span><span class=\"p\">(</span><span class=\"s1\">'ab:ca:bc'</span><span class=\"p\">,</span> <span class=\"s1\">','</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>        <span class=\"c1\"># Same as 'ab:ca:bc'.split(':', 1)</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">splitany</span><span class=\"p\">(</span><span class=\"s1\">'ab|ca:bc'</span><span class=\"p\">,</span> <span class=\"s1\">'|:'</span><span class=\"p\">)</span>          <span class=\"c1\"># ['ab', 'ca', 'bc']</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">splitany</span><span class=\"p\">(</span><span class=\"s1\">'ab|ca:bc'</span><span class=\"p\">,</span> <span class=\"s1\">':|'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>       <span class=\"c1\"># ['ab', 'ca:bc']</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">splitany</span><span class=\"p\">(</span><span class=\"s1\">'0&lt;=3&lt;5'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'&lt;'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;='</span><span class=\"p\">])</span>     <span class=\"c1\"># ['0', '3', '5']</span>\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">splitany</span><span class=\"p\">(</span><span class=\"s1\">'0&lt;=3&lt;5'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'&lt;'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;='</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># ['0', '3&lt;5']</span>\n\n<span class=\"n\">strings</span><span class=\"o\">.</span><span class=\"n\">to_ascii_equivalent</span><span class=\"p\">(</span><span class=\"s1\">'smart quotes, etc.'</span><span class=\"p\">)</span>  <span class=\"c1\"># Replaces with ascii quotes, etc.</span>\n\n<span class=\"c1\"># URL manipulation leverages urllib, but spares you the extra code</span>\n\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">get_base_url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.params.com?a=aaa'</span><span class=\"p\">)</span>                  <span class=\"c1\"># 'http://www.params.com/'</span>\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">get_base_url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.path.com/test'</span><span class=\"p\">)</span>                     <span class=\"c1\"># 'http://www.path.com/'</span>\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">get_base_url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.path.com/test'</span><span class=\"p\">,</span> <span class=\"n\">include_path</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># 'http://www.path.com/test/'</span>\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">get_base_url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.params.com/test?a=aaa'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>       <span class=\"c1\"># 'http://www.params.com/test/'</span>\n\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">update_url_params</span><span class=\"p\">(</span><span class=\"s1\">'http://www.params.com?a=aaa'</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">'aaa'</span><span class=\"p\">)</span>  <span class=\"c1\"># 'http://www.params.com?a=aaa'</span>\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">update_url_params</span><span class=\"p\">(</span><span class=\"s1\">'http://www.params.com?a=aaa'</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"s1\">'xxx'</span><span class=\"p\">)</span>  <span class=\"c1\"># 'http://www.params.com?a=xxx'</span>\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">update_url_params</span><span class=\"p\">(</span><span class=\"s1\">'http://www.params.com'</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">'bbb'</span><span class=\"p\">)</span>        <span class=\"c1\"># 'http://www.params.com?b=bbb'</span>\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">update_url_params</span><span class=\"p\">(</span><span class=\"s1\">'http://www.params.com'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'cc'</span><span class=\"p\">])</span>  <span class=\"c1\"># 'http://www.params.com?c=c&amp;c=cc'</span>\n\n<span class=\"c1\"># Helpers to parse urls to and from parts: parses path as list and params as dict</span>\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">url_to_parts</span><span class=\"p\">(</span><span class=\"s1\">'http://www.params.com/test/path?a=aaa'</span><span class=\"p\">)</span>      <span class=\"c1\"># SplitResult(..., path=['test', 'path'], query={'a': 'aaa'})</span>\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">parts_to_url</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span><span class=\"s1\">'netloc'</span><span class=\"p\">:</span> <span class=\"s1\">'www.params.com'</span><span class=\"p\">,</span> <span class=\"s1\">'query'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'aaa'</span><span class=\"p\">}</span>          <span class=\"c1\"># 'http://www.params.com?a=aaa'</span>\n<span class=\"p\">)</span>\n<span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">parts_to_url</span><span class=\"p\">(</span>\n    <span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">url_to_parts</span><span class=\"p\">(</span><span class=\"s1\">'http://www.params.com/test/path?a=aaa'</span><span class=\"p\">)</span>  <span class=\"c1\"># 'http://www.params.com/test/path?a=aaa'</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Finally, XML parsing is also supported, using the cElementTree and defusedxml libraries for performance and security</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">parserutils</span> <span class=\"kn\">import</span> <span class=\"n\">elements</span>\n\n<span class=\"c1\"># First convert an XML string to an Element object</span>\n<span class=\"n\">xml_string</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;root&gt;&lt;parent&gt;&lt;child&gt;one&lt;/child&gt;&lt;child&gt;two&lt;/child&gt;&lt;uglyChild&gt;yuck&lt;/uglyChild&gt;&lt;/parent&gt;&lt;/root&gt;'</span>\n<span class=\"n\">xml_element</span> <span class=\"o\">=</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">get_element</span><span class=\"p\">(</span><span class=\"n\">xml_string</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Update the XML string and print it back out</span>\n<span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">set_element_text</span><span class=\"p\">(</span><span class=\"n\">xml_element</span><span class=\"p\">,</span> <span class=\"s1\">'parent/child'</span><span class=\"p\">,</span> <span class=\"s1\">'child text'</span><span class=\"p\">)</span>\n<span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">set_element_attributes</span><span class=\"p\">(</span><span class=\"n\">xml_element</span><span class=\"p\">,</span> <span class=\"n\">childHas</span><span class=\"o\">=</span><span class=\"s1\">'child attribute'</span><span class=\"p\">)</span>\n<span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">remove_element</span><span class=\"p\">(</span><span class=\"n\">xml_element</span><span class=\"p\">,</span> <span class=\"s1\">'parent/uglyChild'</span><span class=\"p\">)</span>\n<span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">element_to_string</span><span class=\"p\">(</span><span class=\"n\">xml_element</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Conversion from string to Element, to dict, and then back to string</span>\n<span class=\"n\">converted</span> <span class=\"o\">=</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">element_to_dict</span><span class=\"p\">(</span><span class=\"n\">xml_string</span><span class=\"p\">,</span> <span class=\"n\">recurse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">reverted</span> <span class=\"o\">=</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">dict_to_element</span><span class=\"p\">(</span><span class=\"n\">converted</span><span class=\"p\">)</span>\n<span class=\"n\">reverted</span> <span class=\"o\">=</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">get_element</span><span class=\"p\">(</span><span class=\"n\">converted</span><span class=\"p\">)</span>\n<span class=\"n\">xml_string</span> <span class=\"o\">==</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">element_to_string</span><span class=\"p\">(</span><span class=\"n\">converted</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Conversion to flattened dict object</span>\n<span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">element_to_object</span><span class=\"p\">(</span><span class=\"n\">converted</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'root'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'parent'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'child'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'one'</span><span class=\"p\">,</span> <span class=\"s1\">'two'</span><span class=\"p\">],</span> <span class=\"s1\">'uglyChild'</span><span class=\"p\">:</span> <span class=\"s1\">'yuck'</span><span class=\"p\">}}}</span>\n\n\n<span class=\"c1\"># Read in an XML file and write it elsewhere</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.xml'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">xml</span><span class=\"p\">:</span>\n    <span class=\"n\">xml_from_file</span> <span class=\"o\">=</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">get_element</span><span class=\"p\">(</span><span class=\"n\">xml</span><span class=\"p\">)</span>\n    <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">write_element</span><span class=\"p\">(</span><span class=\"n\">xml_from_file</span><span class=\"p\">,</span> <span class=\"s1\">'/path/to/updated/file.xml'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Write a local file from a remote location (via URL)</span>\n<span class=\"n\">xml_from_web</span> <span class=\"o\">=</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">get_remote_element</span><span class=\"p\">(</span><span class=\"s1\">'http://en.wikipedia.org/wiki/XML'</span><span class=\"p\">)</span>\n<span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">write_element</span><span class=\"p\">(</span><span class=\"n\">xml_from_web</span><span class=\"p\">,</span> <span class=\"s1\">'/path/to/new/file.xml'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Read content at a local file path to a string</span>\n<span class=\"n\">xml_from_path</span> <span class=\"o\">=</span> <span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">get_remote_element</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file.xml'</span><span class=\"p\">)</span>\n<span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"n\">element_to_string</span><span class=\"p\">(</span><span class=\"n\">xml_from_path</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 3934215, "releases": {"0.9.8": [{"comment_text": "", "digests": {"md5": "fbb58618a7614354e2cd6c176156472e", "sha256": "e80609945d50c8f6f59462e193e02c131ab3d02587d62ffea6dea591538156c7"}, "downloads": -1, "filename": "parserutils-0.9.8-py3-none-any.whl", "has_sig": false, "md5_digest": "fbb58618a7614354e2cd6c176156472e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39887, "upload_time": "2017-07-18T20:30:41", "upload_time_iso_8601": "2017-07-18T20:30:41.482754Z", "url": "https://files.pythonhosted.org/packages/b3/4e/da064f17740fff48966707606799dab40e44cfbba8a95b53c6231dbcf419/parserutils-0.9.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd49c22cf186924069f869ce21e7627f", "sha256": "8e3defffeb3f460c6224301b5483beeeeaa8426d510789d730fc62eff3c56440"}, "downloads": -1, "filename": "parserutils-0.9.8.tar.gz", "has_sig": false, "md5_digest": "cd49c22cf186924069f869ce21e7627f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34796, "upload_time": "2017-07-18T20:30:43", "upload_time_iso_8601": "2017-07-18T20:30:43.455253Z", "url": "https://files.pythonhosted.org/packages/15/fb/f1297f09286dfb281fd936a25d0a6fbe101796ac0371b766b58edbbaddee/parserutils-0.9.8.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f09d44c223c726769968e47034f1bd88", "sha256": "9cd73338bb9d6194b48a04b52934728d3b412efeaf00b30d8b58a2a11ed5ecb7"}, "downloads": -1, "filename": "parserutils-1.0.1-py3.6.egg", "has_sig": false, "md5_digest": "f09d44c223c726769968e47034f1bd88", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 92431, "upload_time": "2018-06-01T22:58:13", "upload_time_iso_8601": "2018-06-01T22:58:13.250238Z", "url": "https://files.pythonhosted.org/packages/4d/9d/1176b09bff889d63cfa182e804733fc6fb6ad300a52c7736ce2a41165625/parserutils-1.0.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f29a0f846bf9503ac85aa588201dd36", "sha256": "82a111ab7963682a6d2eed20f683e8ed28b7f23b14184c5f2db0cb638dc3d62a"}, "downloads": -1, "filename": "parserutils-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6f29a0f846bf9503ac85aa588201dd36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40074, "upload_time": "2017-07-31T20:32:46", "upload_time_iso_8601": "2017-07-31T20:32:46.566788Z", "url": "https://files.pythonhosted.org/packages/4c/f4/cc197c059972ea92ce1c4ab48d0d96c17c6666202249d13a45edc63cb096/parserutils-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c23765a78de9b3200d004b815431276", "sha256": "4a169e6c9814e9348043cf26fb678beb78f83dc2d26c19ed8664a0553709e7fe"}, "downloads": -1, "filename": "parserutils-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2c23765a78de9b3200d004b815431276", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34942, "upload_time": "2017-07-31T20:32:48", "upload_time_iso_8601": "2017-07-31T20:32:48.073966Z", "url": "https://files.pythonhosted.org/packages/0f/50/e92d8756443c69be3c0e2807c63dae716c31008faf71b528a1fc6dc40e20/parserutils-1.0.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "b5974cc8a9ec2bd04c86b26bb8a5f0e9", "sha256": "e291ebd89b487265d18f739df4b7c1e7dbd5ec9b5955c402a12cca285b5418a8"}, "downloads": -1, "filename": "parserutils-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b5974cc8a9ec2bd04c86b26bb8a5f0e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42177, "upload_time": "2018-06-05T23:16:39", "upload_time_iso_8601": "2018-06-05T23:16:39.717476Z", "url": "https://files.pythonhosted.org/packages/fe/6a/0f6392f437f7da7aa33a9a3ba023db9c4f504699143d3027c7c6b60453de/parserutils-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61cc0b40e0280e82622e1c3fcd9b36fd", "sha256": "24c969485e886868355249dae521e776a31cae3a0e2f0ab75a5c082d5b7e6407"}, "downloads": -1, "filename": "parserutils-1.1.2.tar.gz", "has_sig": false, "md5_digest": "61cc0b40e0280e82622e1c3fcd9b36fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40953, "upload_time": "2018-06-05T23:16:41", "upload_time_iso_8601": "2018-06-05T23:16:41.218454Z", "url": "https://files.pythonhosted.org/packages/e8/7f/2f6cc2d60e82ffe472afba1ba9481fcd607ae5464f3cd47b074d179a140d/parserutils-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b5974cc8a9ec2bd04c86b26bb8a5f0e9", "sha256": "e291ebd89b487265d18f739df4b7c1e7dbd5ec9b5955c402a12cca285b5418a8"}, "downloads": -1, "filename": "parserutils-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b5974cc8a9ec2bd04c86b26bb8a5f0e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42177, "upload_time": "2018-06-05T23:16:39", "upload_time_iso_8601": "2018-06-05T23:16:39.717476Z", "url": "https://files.pythonhosted.org/packages/fe/6a/0f6392f437f7da7aa33a9a3ba023db9c4f504699143d3027c7c6b60453de/parserutils-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61cc0b40e0280e82622e1c3fcd9b36fd", "sha256": "24c969485e886868355249dae521e776a31cae3a0e2f0ab75a5c082d5b7e6407"}, "downloads": -1, "filename": "parserutils-1.1.2.tar.gz", "has_sig": false, "md5_digest": "61cc0b40e0280e82622e1c3fcd9b36fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40953, "upload_time": "2018-06-05T23:16:41", "upload_time_iso_8601": "2018-06-05T23:16:41.218454Z", "url": "https://files.pythonhosted.org/packages/e8/7f/2f6cc2d60e82ffe472afba1ba9481fcd607ae5464f3cd47b074d179a140d/parserutils-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:17 2020"}