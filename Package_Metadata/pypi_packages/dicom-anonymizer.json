{"info": {"author": "Laurenn Lam", "author_email": "laurenn.lam@kitware.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python", "Topic :: Software Development :: Build Tools"], "description": "# DicomAnonymizer\n\nPython package to anonymize DICOM files.\nThe anonymization answer to the standard . More information about dicom fields for anonymization can be found [here](http://dicom.nema.org/dicom/2013/output/chtml/part15/chapter_E.html#table_E.1-1).\n\nThe default behaviour of this package is to anonymize DICOM fields referenced in [dicomfields](dicomanonymizer/dicomfields.py).\n\nDicom fields are separated into different groups. Each groups will be anonymized in a different way.\n\n| Group | Action | Action definition |\n| --- | --- | --- |\n| D_TAGS | replace | Replace with a non-zero length value that may be a dummy value and consistent with the VR** |\n| Z_TAGS | empty | Replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR** |\n| X_TAGS | delete | Completely remove the tag |\n| U_TAGS | replaceUID | Replace all UID's number with a random one in order to keep consistent. Same UID will have the same replaced value |\n| Z_D_TAGS | emptyOrReplace | Replace with a non-zero length value that may be a dummy value and consistent with the VR** |\n| X_Z_TAGS | deleteOrEmpty | Replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR** |\n| X_D_TAGS | deleteOrReplace | Replace with a non-zero length value that may be a dummy value and consistent with the VR** |\n| X_Z_D_TAGS | deleteOrEmptyOrReplace | Replace with a non-zero length value that may be a dummy value and consistent with the VR** |\n| X_Z_U_STAR_TAGS | deleteOrEmptyOrReplaceUID | If it's a UID, then all numbers are randomly replaced. Else, replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR**|\n\n\n\n# How to build it ?\n\nThe sources files can be packaged by using:\n`python .\\setup.py bdist_wheel`\n\nThis command will generate a wheel package in `dist` folder which can be then installed as a python package using\n`pip install .\\dist\\DicomAnonymizer-0.0.1-py2.py3-none-any.whl`\n\nInstalling this package will also install an executable named `dicom-anonymizer`. In order to use it, please refer to the next section.\n\n\n\n# How to use it ?\n\nThis package allows to anonymize a selection of DICOM field (defined or overrided).\nThe way on how the DICOM fields are anonymized can also be overrided.\n\n**[required]** InputPath = Full path to a single DICOM image or to a folder which contains dicom files\n**[required]** OutputPath = Full path to the anonymized DICOM image or to a folder. This folder has to exist.\n**[optional] **ActionName = Defined an action name that will be applied to the DICOM tag.\n**[optional]** Dictionary = Path to a JSON file which defines actions that will be applied on specific dicom tags (see below)\n\n\n\n## Default behaviour\n\nYou can use the default anonymization behaviour describe above.\n\n```python\ndicom-anonymizer Input Output\n```\n\n\n\n## Custom rules\nYou can manually add new rules in order to have different behaviors with certain tags.\nThis will allow you to override default rules :\n\n**Executable**:\n```python\ndicom-anonymizer InputFilePath OutputFilePath -t '(0x0001, 0x0001)' ActionName -t '(0x0001, 0x0005)' ActionName2\n```\nThis will apply the `ActionName` to the tag `'(0x0001, 0x0001)'` and `ActionName2` to `'(0x0001, 0x0005)'`\n\n**Note**: ActionName has to be defined in [actions list](#actions-list)\n\nFor example, the default behavior of the patient's ID is to be replaced by an empty or null value. If you want to keep this value, then you'll have to run :\n```python\npython anonymizer.py InputFilePath OutputFilePath -t '(0x0010, 0x0020)' keep\n```\nThis command will override the default behavior executed on this tag and the patient's ID will be kept.\n\n\n\n## Custom rules with dictionary file\n\nInstead of having a big command line with several new actions, you can create your own dictionary by creating a json file `dictionary.json` :\n```json\n{\n    \"(0x0002, 0x0002)\": \"ActionName\",\n    \"(0x0003, 0x0003)\": \"ActionName\",\n    \"(0x0004, 0x0004)\": \"ActionName\",\n    \"(0x0005, 0x0005)\": \"ActionName\"\n}\n```\nSame as before, the `ActionName` has to be defined in the [actions list](#actions-list).\n\n```python\ndicom-anonymizer InputFilePath OutputFilePath --dictionary dictionary.json\n```\n\n\n## Custom actions from dictionary file\n\nIf you use the file anonymizer.py, then you can add custom actions:\n```json\n{\n    \"(0x0002, 0x0002)\": \"ActionNameNotReferenced\",\n    \"(0x0003, 0x0003)\": \"ActionNameNotReferenced\",\n    \"(0x0004, 0x0004)\": \"ActionNameNotReferenced1\",\n    \"(0x0005, 0x0005)\": \"ActionNameNotReferenced2\"\n}\n```\nThen, modify your file anonymizerUser.py :\n```python\nimport dicomanonymizer.anonymizer\n\n# Functions need to have in input a dataset and a tag\ndef ActionNameNotReferenced(dataset, tag):\n    # Extract the element from the dataset :\n    element = dataset.get(tag)\n    # You can update the value as here :\n    element.value = ''\n\tprint('custom action')\ndef ActionNameNotReferenced1(dataset, tag):\n\tprint('custom action 1')\ndef ActionNameNotReferenced2(dataset, tag):\n\tprint('custom action 2')\n\nactionsTagMap = {\n\t(0x0001, 0x0001): \"keep\", #will use the default method in the dicom anonymizer\n\t(0x0002, 0x0002): ActionNameNotReferenced,\n\t(0x0003, 0x0003): ActionNameNotReferenced2\n}\n\n# Generate a custom dictionary that will be override the default one\nactionsMap = dicomanonymizer.anonymizer.generateActionsDictionary(actionsTagMap)\n\n# Send the map to the main function\ndicomanonymizer.anonymizer.anonymize(actionsMap)\n```\n\nIn your own file, you'll have to define:\n- Your custom functions. Be careful, your functions always have in inputs a dataset and a tag\n- A dictionary which map your functions to a string\n\n# Overrides actions for default tags\nYou can have the need to keep some tags, for example UID. Then, instead of replace it (`replaceUID` action) then you can override it :\n```\nUIDActionMap = dicomanonymizer.simpledicomanonymizer.generateActions(dicomanonymizer.dicomfields.U_TAGS, \"keep\")\ndicomanonymizer.anonymizer.anonymize(inFile, outFile, actionsMap)\n```\nAll the listed actions below can be used with `generateActions` function by using a string. If the second parameter of the `generateActions` actions is a string and doesn't belong to the actions list, then the default behaviour will be to keep the tag.\n\n# Actions list\n\n| Action | Action definition |\n| --- | --- |\n| empty | Replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR** |\n| delete | Completely remove the tag |\n| keep | Do nothing on the tag |\n| clean | Don't use it for now. This is not implemented |\n| replaceUID | Replace all UID's number with a random one in order to keep consistent. Same UID will have the same replaced value |\n| emptyOrReplace | Replace with a non-zero length value that may be a dummy value and consistent with the VR** |\n| deleteOrEmpty | Replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR** |\n| deleteOrReplace | Replace with a non-zero length value that may be a dummy value and consistent with the VR** |\n| deleteOrEmplyOrReplace | Replace with a non-zero length value that may be a dummy value and consistent with the VR** |\n| deleteOrEmptyOrReplaceUID | If it's a UID, then all numbers are randomly replaced. Else, replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR** |\n\n\n** VR: Value Representation\n\nWork originally done by Edern Haumont\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/KitwareMedical/dicom-anonymizer", "keywords": "dicom anonymizer medical", "license": "", "maintainer": "", "maintainer_email": "", "name": "dicom-anonymizer", "package_url": "https://pypi.org/project/dicom-anonymizer/", "platform": "", "project_url": "https://pypi.org/project/dicom-anonymizer/", "project_urls": {"Homepage": "https://github.com/KitwareMedical/dicom-anonymizer"}, "release_url": "https://pypi.org/project/dicom-anonymizer/1.0.5/", "requires_dist": ["pydicom", "tqdm"], "requires_python": "", "summary": "Program to anonymize dicom files with default and custom rules", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DicomAnonymizer</h1>\n<p>Python package to anonymize DICOM files.\nThe anonymization answer to the standard . More information about dicom fields for anonymization can be found <a href=\"http://dicom.nema.org/dicom/2013/output/chtml/part15/chapter_E.html#table_E.1-1\" rel=\"nofollow\">here</a>.</p>\n<p>The default behaviour of this package is to anonymize DICOM fields referenced in <a href=\"dicomanonymizer/dicomfields.py\" rel=\"nofollow\">dicomfields</a>.</p>\n<p>Dicom fields are separated into different groups. Each groups will be anonymized in a different way.</p>\n<table>\n<thead>\n<tr>\n<th>Group</th>\n<th>Action</th>\n<th>Action definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D_TAGS</td>\n<td>replace</td>\n<td>Replace with a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>Z_TAGS</td>\n<td>empty</td>\n<td>Replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>X_TAGS</td>\n<td>delete</td>\n<td>Completely remove the tag</td>\n</tr>\n<tr>\n<td>U_TAGS</td>\n<td>replaceUID</td>\n<td>Replace all UID's number with a random one in order to keep consistent. Same UID will have the same replaced value</td>\n</tr>\n<tr>\n<td>Z_D_TAGS</td>\n<td>emptyOrReplace</td>\n<td>Replace with a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>X_Z_TAGS</td>\n<td>deleteOrEmpty</td>\n<td>Replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>X_D_TAGS</td>\n<td>deleteOrReplace</td>\n<td>Replace with a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>X_Z_D_TAGS</td>\n<td>deleteOrEmptyOrReplace</td>\n<td>Replace with a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>X_Z_U_STAR_TAGS</td>\n<td>deleteOrEmptyOrReplaceUID</td>\n<td>If it's a UID, then all numbers are randomly replaced. Else, replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr></tbody></table>\n<h1>How to build it ?</h1>\n<p>The sources files can be packaged by using:\n<code>python .\\setup.py bdist_wheel</code></p>\n<p>This command will generate a wheel package in <code>dist</code> folder which can be then installed as a python package using\n<code>pip install .\\dist\\DicomAnonymizer-0.0.1-py2.py3-none-any.whl</code></p>\n<p>Installing this package will also install an executable named <code>dicom-anonymizer</code>. In order to use it, please refer to the next section.</p>\n<h1>How to use it ?</h1>\n<p>This package allows to anonymize a selection of DICOM field (defined or overrided).\nThe way on how the DICOM fields are anonymized can also be overrided.</p>\n<p><strong>[required]</strong> InputPath = Full path to a single DICOM image or to a folder which contains dicom files\n<strong>[required]</strong> OutputPath = Full path to the anonymized DICOM image or to a folder. This folder has to exist.\n**[optional] **ActionName = Defined an action name that will be applied to the DICOM tag.\n<strong>[optional]</strong> Dictionary = Path to a JSON file which defines actions that will be applied on specific dicom tags (see below)</p>\n<h2>Default behaviour</h2>\n<p>You can use the default anonymization behaviour describe above.</p>\n<pre><span class=\"n\">dicom</span><span class=\"o\">-</span><span class=\"n\">anonymizer</span> <span class=\"n\">Input</span> <span class=\"n\">Output</span>\n</pre>\n<h2>Custom rules</h2>\n<p>You can manually add new rules in order to have different behaviors with certain tags.\nThis will allow you to override default rules :</p>\n<p><strong>Executable</strong>:</p>\n<pre><span class=\"n\">dicom</span><span class=\"o\">-</span><span class=\"n\">anonymizer</span> <span class=\"n\">InputFilePath</span> <span class=\"n\">OutputFilePath</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"s1\">'(0x0001, 0x0001)'</span> <span class=\"n\">ActionName</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"s1\">'(0x0001, 0x0005)'</span> <span class=\"n\">ActionName2</span>\n</pre>\n<p>This will apply the <code>ActionName</code> to the tag <code>'(0x0001, 0x0001)'</code> and <code>ActionName2</code> to <code>'(0x0001, 0x0005)'</code></p>\n<p><strong>Note</strong>: ActionName has to be defined in <a href=\"#actions-list\" rel=\"nofollow\">actions list</a></p>\n<p>For example, the default behavior of the patient's ID is to be replaced by an empty or null value. If you want to keep this value, then you'll have to run :</p>\n<pre><span class=\"n\">python</span> <span class=\"n\">anonymizer</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">InputFilePath</span> <span class=\"n\">OutputFilePath</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"s1\">'(0x0010, 0x0020)'</span> <span class=\"n\">keep</span>\n</pre>\n<p>This command will override the default behavior executed on this tag and the patient's ID will be kept.</p>\n<h2>Custom rules with dictionary file</h2>\n<p>Instead of having a big command line with several new actions, you can create your own dictionary by creating a json file <code>dictionary.json</code> :</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"(0x0002, 0x0002)\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ActionName\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"(0x0003, 0x0003)\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ActionName\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"(0x0004, 0x0004)\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ActionName\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"(0x0005, 0x0005)\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ActionName\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Same as before, the <code>ActionName</code> has to be defined in the <a href=\"#actions-list\" rel=\"nofollow\">actions list</a>.</p>\n<pre><span class=\"n\">dicom</span><span class=\"o\">-</span><span class=\"n\">anonymizer</span> <span class=\"n\">InputFilePath</span> <span class=\"n\">OutputFilePath</span> <span class=\"o\">--</span><span class=\"n\">dictionary</span> <span class=\"n\">dictionary</span><span class=\"o\">.</span><span class=\"n\">json</span>\n</pre>\n<h2>Custom actions from dictionary file</h2>\n<p>If you use the file anonymizer.py, then you can add custom actions:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"(0x0002, 0x0002)\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ActionNameNotReferenced\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"(0x0003, 0x0003)\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ActionNameNotReferenced\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"(0x0004, 0x0004)\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ActionNameNotReferenced1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"(0x0005, 0x0005)\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ActionNameNotReferenced2\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Then, modify your file anonymizerUser.py :</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dicomanonymizer.anonymizer</span>\n\n<span class=\"c1\"># Functions need to have in input a dataset and a tag</span>\n<span class=\"k\">def</span> <span class=\"nf\">ActionNameNotReferenced</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Extract the element from the dataset :</span>\n    <span class=\"n\">element</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">)</span>\n    <span class=\"c1\"># You can update the value as here :</span>\n    <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'custom action'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">ActionNameNotReferenced1</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'custom action 1'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">ActionNameNotReferenced2</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'custom action 2'</span><span class=\"p\">)</span>\n\n<span class=\"n\">actionsTagMap</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"p\">(</span><span class=\"mh\">0x0001</span><span class=\"p\">,</span> <span class=\"mh\">0x0001</span><span class=\"p\">):</span> <span class=\"s2\">\"keep\"</span><span class=\"p\">,</span> <span class=\"c1\">#will use the default method in the dicom anonymizer</span>\n\t<span class=\"p\">(</span><span class=\"mh\">0x0002</span><span class=\"p\">,</span> <span class=\"mh\">0x0002</span><span class=\"p\">):</span> <span class=\"n\">ActionNameNotReferenced</span><span class=\"p\">,</span>\n\t<span class=\"p\">(</span><span class=\"mh\">0x0003</span><span class=\"p\">,</span> <span class=\"mh\">0x0003</span><span class=\"p\">):</span> <span class=\"n\">ActionNameNotReferenced2</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Generate a custom dictionary that will be override the default one</span>\n<span class=\"n\">actionsMap</span> <span class=\"o\">=</span> <span class=\"n\">dicomanonymizer</span><span class=\"o\">.</span><span class=\"n\">anonymizer</span><span class=\"o\">.</span><span class=\"n\">generateActionsDictionary</span><span class=\"p\">(</span><span class=\"n\">actionsTagMap</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Send the map to the main function</span>\n<span class=\"n\">dicomanonymizer</span><span class=\"o\">.</span><span class=\"n\">anonymizer</span><span class=\"o\">.</span><span class=\"n\">anonymize</span><span class=\"p\">(</span><span class=\"n\">actionsMap</span><span class=\"p\">)</span>\n</pre>\n<p>In your own file, you'll have to define:</p>\n<ul>\n<li>Your custom functions. Be careful, your functions always have in inputs a dataset and a tag</li>\n<li>A dictionary which map your functions to a string</li>\n</ul>\n<h1>Overrides actions for default tags</h1>\n<p>You can have the need to keep some tags, for example UID. Then, instead of replace it (<code>replaceUID</code> action) then you can override it :</p>\n<pre><code>UIDActionMap = dicomanonymizer.simpledicomanonymizer.generateActions(dicomanonymizer.dicomfields.U_TAGS, \"keep\")\ndicomanonymizer.anonymizer.anonymize(inFile, outFile, actionsMap)\n</code></pre>\n<p>All the listed actions below can be used with <code>generateActions</code> function by using a string. If the second parameter of the <code>generateActions</code> actions is a string and doesn't belong to the actions list, then the default behaviour will be to keep the tag.</p>\n<h1>Actions list</h1>\n<table>\n<thead>\n<tr>\n<th>Action</th>\n<th>Action definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>empty</td>\n<td>Replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>Completely remove the tag</td>\n</tr>\n<tr>\n<td>keep</td>\n<td>Do nothing on the tag</td>\n</tr>\n<tr>\n<td>clean</td>\n<td>Don't use it for now. This is not implemented</td>\n</tr>\n<tr>\n<td>replaceUID</td>\n<td>Replace all UID's number with a random one in order to keep consistent. Same UID will have the same replaced value</td>\n</tr>\n<tr>\n<td>emptyOrReplace</td>\n<td>Replace with a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>deleteOrEmpty</td>\n<td>Replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>deleteOrReplace</td>\n<td>Replace with a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>deleteOrEmplyOrReplace</td>\n<td>Replace with a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr>\n<tr>\n<td>deleteOrEmptyOrReplaceUID</td>\n<td>If it's a UID, then all numbers are randomly replaced. Else, replace with a zero length value, or a non-zero length value that may be a dummy value and consistent with the VR**</td>\n</tr></tbody></table>\n<p>** VR: Value Representation</p>\n<p>Work originally done by Edern Haumont</p>\n\n          </div>"}, "last_serial": 6695761, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "826a2c6b3195d0c1f0abe090180c5961", "sha256": "054aba7cf4cf72fc5037cb1ba3f0c2ee8167b30c52a366f16879470ee6d85c53"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "826a2c6b3195d0c1f0abe090180c5961", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11525, "upload_time": "2020-01-30T11:40:37", "upload_time_iso_8601": "2020-01-30T11:40:37.970316Z", "url": "https://files.pythonhosted.org/packages/5e/4f/20a8d560f14eb085af2b6e81011df76633e24e39d4c24289b504aff7f1a3/dicom_anonymizer-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd6e060cfb6a98cd666c48260ced2ec2", "sha256": "120105cd2a44ebdee444b358173b9cf587fcb5aa992adaa48e2d2a66bcf8fa4d"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bd6e060cfb6a98cd666c48260ced2ec2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11162, "upload_time": "2020-01-30T11:40:41", "upload_time_iso_8601": "2020-01-30T11:40:41.025625Z", "url": "https://files.pythonhosted.org/packages/5f/df/24420acbaf7136af06b3fcee1db15376f86f772887606c928a54d9becc21/dicom_anonymizer-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8c3388ddcc29413297d6d9b16c4b7749", "sha256": "d75fb2e8da8fdf75455f76e943684906cb430a2d8289edbbff420dd0295a1e0b"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8c3388ddcc29413297d6d9b16c4b7749", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11913, "upload_time": "2020-02-04T15:08:35", "upload_time_iso_8601": "2020-02-04T15:08:35.076073Z", "url": "https://files.pythonhosted.org/packages/81/ce/5649fbc15443791d154889eca7c647743e4aa84db9a88e89c747873ddcd5/dicom_anonymizer-1.0.1-py2.py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "bee610c63f989aca09a2a0a4f29a84e0", "sha256": "fcb8e3e50e19401e1c89380f20606c41f7da7a676771dc94119b7f710405e3ac"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bee610c63f989aca09a2a0a4f29a84e0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11890, "upload_time": "2020-02-04T17:01:36", "upload_time_iso_8601": "2020-02-04T17:01:36.251571Z", "url": "https://files.pythonhosted.org/packages/24/bb/1ac82ce3ce4af312c57cf8e80b74f740970985b7e0f3c4d5bdc4ed02105b/dicom_anonymizer-1.0.2-py2.py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "016463180c0f5035955ae7480c341b55", "sha256": "9b62a3bb85e99daff0cd1b128335208cb62f27ddbae19ff46a1942cdca966abd"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "016463180c0f5035955ae7480c341b55", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12221, "upload_time": "2020-02-06T15:22:38", "upload_time_iso_8601": "2020-02-06T15:22:38.346399Z", "url": "https://files.pythonhosted.org/packages/17/35/5957ff761ccff923b794ce02abd53b12836a32870c5d17ad2aafa9c01ab2/dicom_anonymizer-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd9af8812a52861af6443e0c8581835d", "sha256": "ab9eb745d45de6017387250290967013e3f37edee9fcdeba6575e294216ded47"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bd9af8812a52861af6443e0c8581835d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10918, "upload_time": "2020-02-06T15:22:54", "upload_time_iso_8601": "2020-02-06T15:22:54.027464Z", "url": "https://files.pythonhosted.org/packages/9f/9d/86723dc14c8c6b2b4838f140b5fd44590976117706da8334c2ae58675128/dicom_anonymizer-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "5276f50d7722d08cc961a28af462cf86", "sha256": "c874f679d6cabf1469c8d5a57d6c90d7fff528ce85a37a562003d3f44d10fe61"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5276f50d7722d08cc961a28af462cf86", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11892, "upload_time": "2020-02-25T10:14:54", "upload_time_iso_8601": "2020-02-25T10:14:54.783433Z", "url": "https://files.pythonhosted.org/packages/79/b1/92ceed73b318bbd6ded3fc13438fedcf8d9f0bfdc2f19d6165c07ac32b01/dicom_anonymizer-1.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32f08164d7fcc70f41c14f930e6d2d42", "sha256": "9eab47b3be848d8fa27b61f379c231ff33f1d37ac7931eac457053da1adb7856"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.4.tar.gz", "has_sig": false, "md5_digest": "32f08164d7fcc70f41c14f930e6d2d42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11478, "upload_time": "2020-02-25T10:15:15", "upload_time_iso_8601": "2020-02-25T10:15:15.148780Z", "url": "https://files.pythonhosted.org/packages/b4/5a/3eb3853b8b9a749457e3e540306b537b64f8866de7758719cdf539e7176b/dicom_anonymizer-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "066b4e715c0854c9bb5c7aa0a84ef0f6", "sha256": "f77567bee0592ab36a4c8aec86cf9ace0184a5e1a1862906935b8b202b2ff9b2"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "066b4e715c0854c9bb5c7aa0a84ef0f6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11890, "upload_time": "2020-02-25T10:43:07", "upload_time_iso_8601": "2020-02-25T10:43:07.071574Z", "url": "https://files.pythonhosted.org/packages/8c/3c/cb75ee5305a1e60de6f26789d9e912148047972361a5ac3835f32e416f3a/dicom_anonymizer-1.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c192c5024c766d2b771b469c98a3123a", "sha256": "1dd3e8e5fbe99009cc31365f77a052c17ce268da88638925748c4adc181d95e1"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.5.tar.gz", "has_sig": false, "md5_digest": "c192c5024c766d2b771b469c98a3123a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11463, "upload_time": "2020-02-25T10:43:09", "upload_time_iso_8601": "2020-02-25T10:43:09.762502Z", "url": "https://files.pythonhosted.org/packages/17/fc/68d09a1abbc0806ff46bb085b0c8940d612e11753c5384296296e6f09caf/dicom_anonymizer-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "066b4e715c0854c9bb5c7aa0a84ef0f6", "sha256": "f77567bee0592ab36a4c8aec86cf9ace0184a5e1a1862906935b8b202b2ff9b2"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "066b4e715c0854c9bb5c7aa0a84ef0f6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11890, "upload_time": "2020-02-25T10:43:07", "upload_time_iso_8601": "2020-02-25T10:43:07.071574Z", "url": "https://files.pythonhosted.org/packages/8c/3c/cb75ee5305a1e60de6f26789d9e912148047972361a5ac3835f32e416f3a/dicom_anonymizer-1.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c192c5024c766d2b771b469c98a3123a", "sha256": "1dd3e8e5fbe99009cc31365f77a052c17ce268da88638925748c4adc181d95e1"}, "downloads": -1, "filename": "dicom_anonymizer-1.0.5.tar.gz", "has_sig": false, "md5_digest": "c192c5024c766d2b771b469c98a3123a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11463, "upload_time": "2020-02-25T10:43:09", "upload_time_iso_8601": "2020-02-25T10:43:09.762502Z", "url": "https://files.pythonhosted.org/packages/17/fc/68d09a1abbc0806ff46bb085b0c8940d612e11753c5384296296e6f09caf/dicom_anonymizer-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:34 2020"}