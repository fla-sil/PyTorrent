{"info": {"author": "yifan", "author_email": "yzhang@hbku.edu.qa", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "pipeline\n========\n\nPipeline is a data streaming framework supporting Pulsar/Kafka\n\nGenerator\n---------\n\nGenerator is to be used when developing a data source in our pipeline. A source\nwill produce output without input. A crawler can be seen as a generator.\n\n.. code-block:: python\n\n    >>> from pipeline import Generator, Message\n    >>>\n    >>> class MyGenerator(Generator):\n    ...     def generate(self):\n    ...         for i in range(10):\n    ...             yield {'id': i}\n    >>>\n    >>> generator = MyGenerator('generator', '0.1.0', description='simple generator')\n    >>> generator.parse_args(\"--kind MEM --out-topic test\".split())\n    >>> generator.start()\n    >>> [r.dct['id'] for r in generator.destination.results]\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nProcessor\n---------\n\nProcessor is to be used to process input. Modification will be in-place. A processor\ncan produce one output for each input, or no output.\n\n.. code-block:: python\n\n    >>> from pipeline import Processor, Message\n    >>>\n    >>> class MyProcessor(Processor):\n    ...     def process(self, dct_or_dcts):\n    ...         if isinstance(dct_or_dcts, list):\n    ...             print('SHOULD NOT BE HERE')\n    ...         else:\n    ...             dct_or_dcts['processed'] = True\n    ...         return None\n    >>>\n    >>> processor = MyProcessor('processor', '0.1.0', description='simple processor')\n    >>> config = {'data': [{'id': 1}]}\n    >>> processor.parse_args(\"--kind MEM --in-topic test --out-topic test\".split(), config=config)\n    >>> processor.start()\n    >>> [r.dct['id'] for r in processor.destination.results]\n    [1]\n\n\nSplitter\n--------\n\nSplitter is to be used when writing to multiple outputs. It will take a function to\ngenerate output topic based on the processing message, and use it when writing output.\n\n.. code-block:: python\n\n    >>> from pipeline import Splitter, Message\n    >>>\n    >>> class MySplitter(Splitter):\n    ...     def get_topic(self, dct):\n    ...         return '{}-{}'.format(self.destination.topic, dct['id'])\n    ...\n    ...     def process(self, dct_or_dcts):\n    ...         if isinstance(dct_or_dcts, list):\n    ...             print('SHOULD NOT BE HERE')\n    ...         else:\n    ...             dct_or_dcts['processed'] = True\n    ...         return None\n    >>>\n    >>> splitter = MySplitter('splitter', '0.1.0', description='simple splitter')\n    >>> config = {'data': [{'id': 1}]}\n    >>> splitter.parse_args(\"--kind MEM --in-topic test --out-topic test\".split(), config=config)\n    >>> splitter.start()\n    >>> [r.dct['id'] for r in splitter.destinations['test-1'].results]\n    [1]\n\n\nUsage\n-----\n\n## Writing a Worker\n\nChoose Generator, Processor or Splitter to subclass from.\n\n## Environment Variables\n\nApplication accepts following environment variables:\n\n    environment     command line\n    variable        argument        options\n    PIPELINE        --kind          KAFKA, PULSAR, FILE\n    PULSAR          --pulsar        pulsar url\n    TENANT          --tenant        pulsar tenant\n    NAMESPACE       --namespace     pulsar namespace\n    SUBSCRIPTION    --subscription  pulsar subscription\n    KAFKA           --kafka         kafka url\n    GROUPID         --group-id      kafka group id\n    INTOPIC         --in-topic      topic to read\n    OUTTOPIC        --out-topic     topic to write to\n\n## Custom Code\n\nDefine add_arguments to add new arguments to worker.\n\nDefine setup to run initialization code before worker starts processing messages. setup is called after\ncommand line arguments have been parsed. Logic based on options (parsed arguments) goes here.\n\n## Options\n\n\n## Errors\n\nThe value `None` above is error you should return if `dct` or `dcts` is empty.\nError will be sent to topic `errors` with worker information.\n\n\nCredits\n-------\n\nYifan Zhang (yzhang at hbku.edu.qa)\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yifan/pipeline", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tanbih-pipeline", "package_url": "https://pypi.org/project/tanbih-pipeline/", "platform": "", "project_url": "https://pypi.org/project/tanbih-pipeline/", "project_urls": {"Homepage": "https://github.com/yifan/pipeline"}, "release_url": "https://pypi.org/project/tanbih-pipeline/0.0.1/", "requires_dist": ["confluent-kafka (==1.3.*)", "prometheus-client (==0.7.*)", "pulsar-client (==2.5.*)"], "requires_python": "", "summary": "a pipeline framework for streaming processing", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pipeline is a data streaming framework supporting Pulsar/Kafka</p>\n<div id=\"generator\">\n<h2>Generator</h2>\n<p>Generator is to be used when developing a data source in our pipeline. A source\nwill produce output without input. A crawler can be seen as a generator.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">Generator</span><span class=\"p\">,</span> <span class=\"n\">Message</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyGenerator</span><span class=\"p\">(</span><span class=\"n\">Generator</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">generate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>             <span class=\"k\">yield</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"n\">MyGenerator</span><span class=\"p\">(</span><span class=\"s1\">'generator'</span><span class=\"p\">,</span> <span class=\"s1\">'0.1.0'</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'simple generator'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">(</span><span class=\"s2\">\"--kind MEM --out-topic test\"</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">dct</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">destination</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"processor\">\n<h2>Processor</h2>\n<p>Processor is to be used to process input. Modification will be in-place. A processor\ncan produce one output for each input, or no output.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">Processor</span><span class=\"p\">,</span> <span class=\"n\">Message</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyProcessor</span><span class=\"p\">(</span><span class=\"n\">Processor</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dct_or_dcts</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">dct_or_dcts</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>             <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'SHOULD NOT BE HERE'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"n\">dct_or_dcts</span><span class=\"p\">[</span><span class=\"s1\">'processed'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"kc\">None</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">processor</span> <span class=\"o\">=</span> <span class=\"n\">MyProcessor</span><span class=\"p\">(</span><span class=\"s1\">'processor'</span><span class=\"p\">,</span> <span class=\"s1\">'0.1.0'</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'simple processor'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">processor</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">(</span><span class=\"s2\">\"--kind MEM --in-topic test --out-topic test\"</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(),</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">processor</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">dct</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">processor</span><span class=\"o\">.</span><span class=\"n\">destination</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"splitter\">\n<h2>Splitter</h2>\n<p>Splitter is to be used when writing to multiple outputs. It will take a function to\ngenerate output topic based on the processing message, and use it when writing output.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">Splitter</span><span class=\"p\">,</span> <span class=\"n\">Message</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MySplitter</span><span class=\"p\">(</span><span class=\"n\">Splitter</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">get_topic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">-</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">destination</span><span class=\"o\">.</span><span class=\"n\">topic</span><span class=\"p\">,</span> <span class=\"n\">dct</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">])</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dct_or_dcts</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">dct_or_dcts</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>             <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'SHOULD NOT BE HERE'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"n\">dct_or_dcts</span><span class=\"p\">[</span><span class=\"s1\">'processed'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"kc\">None</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">MySplitter</span><span class=\"p\">(</span><span class=\"s1\">'splitter'</span><span class=\"p\">,</span> <span class=\"s1\">'0.1.0'</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'simple splitter'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">(</span><span class=\"s2\">\"--kind MEM --in-topic test --out-topic test\"</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(),</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">dct</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">destinations</span><span class=\"p\">[</span><span class=\"s1\">'test-1'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>## Writing a Worker</p>\n<p>Choose Generator, Processor or Splitter to subclass from.</p>\n<p>## Environment Variables</p>\n<p>Application accepts following environment variables:</p>\n<blockquote>\nenvironment     command line\nvariable        argument        options\nPIPELINE        \u2013kind          KAFKA, PULSAR, FILE\nPULSAR          \u2013pulsar        pulsar url\nTENANT          \u2013tenant        pulsar tenant\nNAMESPACE       \u2013namespace     pulsar namespace\nSUBSCRIPTION    \u2013subscription  pulsar subscription\nKAFKA           \u2013kafka         kafka url\nGROUPID         \u2013group-id      kafka group id\nINTOPIC         \u2013in-topic      topic to read\nOUTTOPIC        \u2013out-topic     topic to write to</blockquote>\n<p>## Custom Code</p>\n<p>Define add_arguments to add new arguments to worker.</p>\n<p>Define setup to run initialization code before worker starts processing messages. setup is called after\ncommand line arguments have been parsed. Logic based on options (parsed arguments) goes here.</p>\n<p>## Options</p>\n<p>## Errors</p>\n<p>The value <cite>None</cite> above is error you should return if <cite>dct</cite> or <cite>dcts</cite> is empty.\nError will be sent to topic <cite>errors</cite> with worker information.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Yifan Zhang (yzhang at hbku.edu.qa)</p>\n</div>\n\n          </div>"}, "last_serial": 7121926, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "18ed4784899f1ec8591246c462cd9df5", "sha256": "4f74948c5a2d2291a48a890e6d3878dc3ac35fe34e9d1c69da75dd910d6a0eb1"}, "downloads": -1, "filename": "tanbih_pipeline-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "18ed4784899f1ec8591246c462cd9df5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30673, "upload_time": "2020-04-28T17:45:23", "upload_time_iso_8601": "2020-04-28T17:45:23.421167Z", "url": "https://files.pythonhosted.org/packages/e6/c0/baa1a2b82da8c59db8c3fa6bd7f949e61fd0bf392165652a55340a4895e2/tanbih_pipeline-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "606ace4000f3a026089f8f7b93c2620c", "sha256": "42f31b75f552e4d5fafb8948928357bc895e7497841ee02498c5c11e5f9084b7"}, "downloads": -1, "filename": "tanbih-pipeline-0.0.1.tar.gz", "has_sig": false, "md5_digest": "606ace4000f3a026089f8f7b93c2620c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26072, "upload_time": "2020-04-28T17:45:25", "upload_time_iso_8601": "2020-04-28T17:45:25.969662Z", "url": "https://files.pythonhosted.org/packages/fc/f3/7e0fccbf3560831d3b47c53e913ae82d88a88c95011a0c487505220a58ab/tanbih-pipeline-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "18ed4784899f1ec8591246c462cd9df5", "sha256": "4f74948c5a2d2291a48a890e6d3878dc3ac35fe34e9d1c69da75dd910d6a0eb1"}, "downloads": -1, "filename": "tanbih_pipeline-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "18ed4784899f1ec8591246c462cd9df5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30673, "upload_time": "2020-04-28T17:45:23", "upload_time_iso_8601": "2020-04-28T17:45:23.421167Z", "url": "https://files.pythonhosted.org/packages/e6/c0/baa1a2b82da8c59db8c3fa6bd7f949e61fd0bf392165652a55340a4895e2/tanbih_pipeline-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "606ace4000f3a026089f8f7b93c2620c", "sha256": "42f31b75f552e4d5fafb8948928357bc895e7497841ee02498c5c11e5f9084b7"}, "downloads": -1, "filename": "tanbih-pipeline-0.0.1.tar.gz", "has_sig": false, "md5_digest": "606ace4000f3a026089f8f7b93c2620c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26072, "upload_time": "2020-04-28T17:45:25", "upload_time_iso_8601": "2020-04-28T17:45:25.969662Z", "url": "https://files.pythonhosted.org/packages/fc/f3/7e0fccbf3560831d3b47c53e913ae82d88a88c95011a0c487505220a58ab/tanbih-pipeline-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:13 2020"}