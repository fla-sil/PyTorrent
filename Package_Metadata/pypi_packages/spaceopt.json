{"info": {"author": "Arkadiusz Nowaczy\u0144ski", "author_email": "ar.nowaczynski@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# SpaceOpt: optimize discrete search space via gradient boosting regression\n\n[![Python](https://img.shields.io/badge/Python-3.6%20%7C%203.7%20%7C%203.8-blue)](https://www.python.org/downloads/)\n[![PyPI version](https://img.shields.io/pypi/v/spaceopt?color=1)](https://pypi.org/project/spaceopt/)\n[![license](https://img.shields.io/pypi/l/spaceopt)](https://github.com/ar-nowaczynski/spaceopt)\n\nSpaceOpt is an optimization algorithm for discrete search spaces that uses gradient boosting regression to find the most promising candidates for evaluation by predicting their evaluation score. Training data is gathered sequentially and random or human-guided exploration can be easily incorporated at any stage.\n\n## Usage\n\nIf you have discrete search space, for example:\n\n```python\nsearch_space = {\n    'a': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],  # list of ordered numbers: ints\n    'b': [-4.4, -2.5, -1.5, 0.0, 3.7],    # list of ordered numbers: floats\n    'c': [128, 256, 512, 1024],           # another list of ordered numbers\n    'd': ['typeX', 'typeY', 'typeZ'],     # categorical variable\n    'e': [True, False],                   # boolean variable\n    # ... (add as many as you need)\n}\n```\n\nand if you can evaluate points from it:\n\n```python\nspoint = {'a': 4, 'b': 0.0, 'c': 512, 'd': 'typeZ', 'e': False}\ny = evaluation_function(spoint)\nprint(y)  # 0.123456\n```\n\nand if you want to find points that maximize or minimize your evaluation function, <b>in a better way than random search</b>, then use SpaceOpt:\n\n```python\nfrom spaceopt import SpaceOpt\n\nspaceopt = SpaceOpt(search_space=search_space,\n                    target_name='y',\n                    objective='min')     # or 'max'\n\nfor iteration in range(200):\n\n    if iteration < 20:\n        spoint = spaceopt.get_random()   # exploration\n    else:\n        spoint = spaceopt.fit_predict()  # exploitation\n\n    spoint['y'] = evaluation_function(spoint)\n    spaceopt.append_evaluated_spoint(spoint)\n```\n\nMore examples [here](https://github.com/ar-nowaczynski/spaceopt/tree/master/examples).\n\n## Installation\n\n```bash\n$ pip install spaceopt\n```\n\n## Advanced\n\n- get multiple points by setting `num_spoints`:\n```python\nspoint_list = spaceopt.get_random(num_spoints=2)\n# or\nspoint_list = spaceopt.fit_predict(num_spoints=5)\n```\n\n- control exploitation behaviour by adjusting `sample_size` (default=10000), which is the number of candidates sampled for ranking (decreasing `sample_size` increses exploration):\n```python\nspoint = spaceopt.fit_predict(sample_size=100)\n```\n\n- add your own evaluation points to SpaceOpt:\n```python\nmy_spoint = {'a': 8, 'b': -4.4, 'c': 256, 'd': 'typeY', 'e': False}\nmy_spoint['y'] = evaluation_function(my_spoint)\nspaceopt.append_evaluated_spoint(my_spoint)\n```\n\n- be creative about how to use SpaceOpt;\n\n- learn more by reading the code, there are only 3 classes: [SpaceOpt](https://github.com/ar-nowaczynski/spaceopt/blob/master/spaceopt/optimizer.py), [Space](https://github.com/ar-nowaczynski/spaceopt/blob/master/spaceopt/space.py) and [Variable](https://github.com/ar-nowaczynski/spaceopt/blob/master/spaceopt/variable.py).\n\n## License\n\nMIT License (see [LICENSE](https://github.com/ar-nowaczynski/spaceopt/blob/master/LICENSE)).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ar-nowaczynski/spaceopt", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "spaceopt", "package_url": "https://pypi.org/project/spaceopt/", "platform": "", "project_url": "https://pypi.org/project/spaceopt/", "project_urls": {"Homepage": "https://github.com/ar-nowaczynski/spaceopt"}, "release_url": "https://pypi.org/project/spaceopt/0.1.3/", "requires_dist": ["lightgbm (>=2.3.0)", "pandas (>=0.25.3)"], "requires_python": ">=3.6", "summary": "Search space optimization via gradient boosting regression", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SpaceOpt: optimize discrete search space via gradient boosting regression</h1>\n<p><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16c80b942b78aa6fc24cab1c86b7c4297e527484/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e36253230253743253230332e37253230253743253230332e382d626c7565\"></a>\n<a href=\"https://pypi.org/project/spaceopt/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81e37f045125ac0dea0dabe4a004e9ce18884123/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73706163656f70743f636f6c6f723d31\"></a>\n<a href=\"https://github.com/ar-nowaczynski/spaceopt\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a663df90d450b879108745ab790ad6dc017a789f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f73706163656f7074\"></a></p>\n<p>SpaceOpt is an optimization algorithm for discrete search spaces that uses gradient boosting regression to find the most promising candidates for evaluation by predicting their evaluation score. Training data is gathered sequentially and random or human-guided exploration can be easily incorporated at any stage.</p>\n<h2>Usage</h2>\n<p>If you have discrete search space, for example:</p>\n<pre><span class=\"n\">search_space</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">],</span>  <span class=\"c1\"># list of ordered numbers: ints</span>\n    <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">4.4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">3.7</span><span class=\"p\">],</span>    <span class=\"c1\"># list of ordered numbers: floats</span>\n    <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">],</span>           <span class=\"c1\"># another list of ordered numbers</span>\n    <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'typeX'</span><span class=\"p\">,</span> <span class=\"s1\">'typeY'</span><span class=\"p\">,</span> <span class=\"s1\">'typeZ'</span><span class=\"p\">],</span>     <span class=\"c1\"># categorical variable</span>\n    <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">],</span>                   <span class=\"c1\"># boolean variable</span>\n    <span class=\"c1\"># ... (add as many as you need)</span>\n<span class=\"p\">}</span>\n</pre>\n<p>and if you can evaluate points from it:</p>\n<pre><span class=\"n\">spoint</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"s1\">'typeZ'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">evaluation_function</span><span class=\"p\">(</span><span class=\"n\">spoint</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>  <span class=\"c1\"># 0.123456</span>\n</pre>\n<p>and if you want to find points that maximize or minimize your evaluation function, <b>in a better way than random search</b>, then use SpaceOpt:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spaceopt</span> <span class=\"kn\">import</span> <span class=\"n\">SpaceOpt</span>\n\n<span class=\"n\">spaceopt</span> <span class=\"o\">=</span> <span class=\"n\">SpaceOpt</span><span class=\"p\">(</span><span class=\"n\">search_space</span><span class=\"o\">=</span><span class=\"n\">search_space</span><span class=\"p\">,</span>\n                    <span class=\"n\">target_name</span><span class=\"o\">=</span><span class=\"s1\">'y'</span><span class=\"p\">,</span>\n                    <span class=\"n\">objective</span><span class=\"o\">=</span><span class=\"s1\">'min'</span><span class=\"p\">)</span>     <span class=\"c1\"># or 'max'</span>\n\n<span class=\"k\">for</span> <span class=\"n\">iteration</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">):</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">iteration</span> <span class=\"o\">&lt;</span> <span class=\"mi\">20</span><span class=\"p\">:</span>\n        <span class=\"n\">spoint</span> <span class=\"o\">=</span> <span class=\"n\">spaceopt</span><span class=\"o\">.</span><span class=\"n\">get_random</span><span class=\"p\">()</span>   <span class=\"c1\"># exploration</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">spoint</span> <span class=\"o\">=</span> <span class=\"n\">spaceopt</span><span class=\"o\">.</span><span class=\"n\">fit_predict</span><span class=\"p\">()</span>  <span class=\"c1\"># exploitation</span>\n\n    <span class=\"n\">spoint</span><span class=\"p\">[</span><span class=\"s1\">'y'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">evaluation_function</span><span class=\"p\">(</span><span class=\"n\">spoint</span><span class=\"p\">)</span>\n    <span class=\"n\">spaceopt</span><span class=\"o\">.</span><span class=\"n\">append_evaluated_spoint</span><span class=\"p\">(</span><span class=\"n\">spoint</span><span class=\"p\">)</span>\n</pre>\n<p>More examples <a href=\"https://github.com/ar-nowaczynski/spaceopt/tree/master/examples\" rel=\"nofollow\">here</a>.</p>\n<h2>Installation</h2>\n<pre>$ pip install spaceopt\n</pre>\n<h2>Advanced</h2>\n<ul>\n<li>get multiple points by setting <code>num_spoints</code>:</li>\n</ul>\n<pre><span class=\"n\">spoint_list</span> <span class=\"o\">=</span> <span class=\"n\">spaceopt</span><span class=\"o\">.</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"n\">num_spoints</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">spoint_list</span> <span class=\"o\">=</span> <span class=\"n\">spaceopt</span><span class=\"o\">.</span><span class=\"n\">fit_predict</span><span class=\"p\">(</span><span class=\"n\">num_spoints</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>control exploitation behaviour by adjusting <code>sample_size</code> (default=10000), which is the number of candidates sampled for ranking (decreasing <code>sample_size</code> increses exploration):</li>\n</ul>\n<pre><span class=\"n\">spoint</span> <span class=\"o\">=</span> <span class=\"n\">spaceopt</span><span class=\"o\">.</span><span class=\"n\">fit_predict</span><span class=\"p\">(</span><span class=\"n\">sample_size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>add your own evaluation points to SpaceOpt:</li>\n</ul>\n<pre><span class=\"n\">my_spoint</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">4.4</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"s1\">'typeY'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}</span>\n<span class=\"n\">my_spoint</span><span class=\"p\">[</span><span class=\"s1\">'y'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">evaluation_function</span><span class=\"p\">(</span><span class=\"n\">my_spoint</span><span class=\"p\">)</span>\n<span class=\"n\">spaceopt</span><span class=\"o\">.</span><span class=\"n\">append_evaluated_spoint</span><span class=\"p\">(</span><span class=\"n\">my_spoint</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<p>be creative about how to use SpaceOpt;</p>\n</li>\n<li>\n<p>learn more by reading the code, there are only 3 classes: <a href=\"https://github.com/ar-nowaczynski/spaceopt/blob/master/spaceopt/optimizer.py\" rel=\"nofollow\">SpaceOpt</a>, <a href=\"https://github.com/ar-nowaczynski/spaceopt/blob/master/spaceopt/space.py\" rel=\"nofollow\">Space</a> and <a href=\"https://github.com/ar-nowaczynski/spaceopt/blob/master/spaceopt/variable.py\" rel=\"nofollow\">Variable</a>.</p>\n</li>\n</ul>\n<h2>License</h2>\n<p>MIT License (see <a href=\"https://github.com/ar-nowaczynski/spaceopt/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a>).</p>\n\n          </div>"}, "last_serial": 6931139, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c232d7114482304c57d0cd6c256f6ef9", "sha256": "7919eb3c12e6a482fd151eaf40333e57801d4b63944f60975862345809443108"}, "downloads": -1, "filename": "spaceopt-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c232d7114482304c57d0cd6c256f6ef9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7003, "upload_time": "2020-01-26T20:15:54", "upload_time_iso_8601": "2020-01-26T20:15:54.025798Z", "url": "https://files.pythonhosted.org/packages/94/da/d8bc29e3c10dd3c35f1d5889c1db137a526ad31fded9fbcf98e9a245f50c/spaceopt-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2d3445c3fa8d5934ca33d2260216874", "sha256": "752d159b63e581b692d1de9a03729731bf335a89a485d6c5f06702563926ea76"}, "downloads": -1, "filename": "spaceopt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a2d3445c3fa8d5934ca33d2260216874", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4997, "upload_time": "2020-01-26T20:15:56", "upload_time_iso_8601": "2020-01-26T20:15:56.479236Z", "url": "https://files.pythonhosted.org/packages/d3/9e/8e85dba11f145361c756fdaaa6185abb2dd49512902857e66c44ab33d71f/spaceopt-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a78096eb392dcf5f3a8bc747ff72c7bb", "sha256": "05caf92d4fab8276d9697d3754cb720cb2875dd45fa68316e15d2f8e5170da3a"}, "downloads": -1, "filename": "spaceopt-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a78096eb392dcf5f3a8bc747ff72c7bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7555, "upload_time": "2020-01-27T21:43:04", "upload_time_iso_8601": "2020-01-27T21:43:04.812521Z", "url": "https://files.pythonhosted.org/packages/34/1b/108817cc5e2f601a290b6d11e2834c319f00a1a1889f8905c0f22496d772/spaceopt-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1b66006181cec5f1b7c6abe1eee6966", "sha256": "44127b6ccb6a131b2237d4c966a1eaaeff2072335227491d45ca6ef9700e3489"}, "downloads": -1, "filename": "spaceopt-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f1b66006181cec5f1b7c6abe1eee6966", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5697, "upload_time": "2020-01-27T21:43:06", "upload_time_iso_8601": "2020-01-27T21:43:06.704408Z", "url": "https://files.pythonhosted.org/packages/d4/15/f639985e67108dba25924269ab4a19e73d30c3da9d20c7ec98705f8062ff/spaceopt-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "42ff6fce7693067af99b634ebda967a4", "sha256": "021b5d3b4b82092e94954b3bd90b5088d3a37aa85fa712902ae40d7344cd69f3"}, "downloads": -1, "filename": "spaceopt-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "42ff6fce7693067af99b634ebda967a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7577, "upload_time": "2020-02-14T01:42:17", "upload_time_iso_8601": "2020-02-14T01:42:17.845895Z", "url": "https://files.pythonhosted.org/packages/be/a3/627f66f5866e5af079b772d1b7106d137125bf4effa3edd3f044164b6e7d/spaceopt-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c11c579d4e8faa1efcb37d47a2fbceb", "sha256": "73065a1af610bae54dbd687b903e96facf70258212d5b727881f1c921ea288e3"}, "downloads": -1, "filename": "spaceopt-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1c11c579d4e8faa1efcb37d47a2fbceb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5692, "upload_time": "2020-02-14T01:42:19", "upload_time_iso_8601": "2020-02-14T01:42:19.363662Z", "url": "https://files.pythonhosted.org/packages/7a/e6/71fbad34c0429c322adee17cc28807906ecf9fc8cf1b1d7620b8618213ff/spaceopt-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "0ebe0c5f85985753abcc227ddd3f2bd9", "sha256": "f1fe31272a7788db7efeb568dcd919136fb912cbb1055bb2aea16a3d1cd4e4d0"}, "downloads": -1, "filename": "spaceopt-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0ebe0c5f85985753abcc227ddd3f2bd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7603, "upload_time": "2020-04-01T20:51:11", "upload_time_iso_8601": "2020-04-01T20:51:11.758994Z", "url": "https://files.pythonhosted.org/packages/8a/fd/106b07ff146fe8971ab8692a1dab1e511da73714b41c9a19a918bbd12683/spaceopt-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "999965ba006c970edc4fc29e8086a8c3", "sha256": "a2d5ca94c9ecb423f287c38a25080d6d7418998d93de9f670d3a4299d5acbede"}, "downloads": -1, "filename": "spaceopt-0.1.3.tar.gz", "has_sig": false, "md5_digest": "999965ba006c970edc4fc29e8086a8c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5736, "upload_time": "2020-04-01T20:51:12", "upload_time_iso_8601": "2020-04-01T20:51:12.889292Z", "url": "https://files.pythonhosted.org/packages/80/a7/f9e7423a1fc28744493ff3d47ceaf468298ee5513d8a5b0297a2cdad138a/spaceopt-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ebe0c5f85985753abcc227ddd3f2bd9", "sha256": "f1fe31272a7788db7efeb568dcd919136fb912cbb1055bb2aea16a3d1cd4e4d0"}, "downloads": -1, "filename": "spaceopt-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0ebe0c5f85985753abcc227ddd3f2bd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7603, "upload_time": "2020-04-01T20:51:11", "upload_time_iso_8601": "2020-04-01T20:51:11.758994Z", "url": "https://files.pythonhosted.org/packages/8a/fd/106b07ff146fe8971ab8692a1dab1e511da73714b41c9a19a918bbd12683/spaceopt-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "999965ba006c970edc4fc29e8086a8c3", "sha256": "a2d5ca94c9ecb423f287c38a25080d6d7418998d93de9f670d3a4299d5acbede"}, "downloads": -1, "filename": "spaceopt-0.1.3.tar.gz", "has_sig": false, "md5_digest": "999965ba006c970edc4fc29e8086a8c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5736, "upload_time": "2020-04-01T20:51:12", "upload_time_iso_8601": "2020-04-01T20:51:12.889292Z", "url": "https://files.pythonhosted.org/packages/80/a7/f9e7423a1fc28744493ff3d47ceaf468298ee5513d8a5b0297a2cdad138a/spaceopt-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:10 2020"}