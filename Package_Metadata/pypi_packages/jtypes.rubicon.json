{"info": {"author": "Adam Karpierz", "author_email": "adam@karpierz.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: Polish", "Operating System :: OS Independent", "Programming Language :: Java", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: IronPython", "Programming Language :: Python :: Implementation :: PyPy", "Programming Language :: Python :: Implementation :: Stackless", "Topic :: Software Development :: Libraries :: Java Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "**Currently only as placeholder (because a base package jtypes.jvm is still in development)**\n\njtypes.rubicon\n==============\n\nA bridge between the Java Runtime Environment and Python.\n\nOverview\n========\n\n  | **jtypes.rubicon** is a bridge between Python and Java, allowing these to intercommunicate.\n  | It is an effort to allow Python programs full access to Java class libraries.\n\n  `PyPI record`_.\n\n  | **jtypes.rubicon** is a lightweight Python package, based on the *ctypes* or *cffi* library.\n  | It is an almost fully compliant implementation of Steve Menard's **JPype** package\n    by reimplementing whole its functionality in a clean Python instead of C/C++.\n\nAbout Rubicon-Java:\n-------------------\n\nBorrowed from the `original website`_:\n\n  Rubicon-Java\n  ============\n\n  **Rubicon-Java** is a bridge between the Java Runtime Environment and Python.\n  It enables you to:\n\n  * Instantiate objects defined in Java,\n  * Invoke static and instance methods on objects defined in Java,\n  * Access and modify static and instance fields on objects defined in Java, and\n  * Write and use Python implementations of interfaces defined in Java.\n\nQuickstart\n----------\n\nRubicon-Java consists of three components:\n\n1. A Python library,\n2. A JNI library, and\n3. A Java JAR file.\n\nA ``Makefile`` has been provided to compile the JNI and JAR components. Type::\n\n    $ make\n\nto compile them. The compiled output will be placed in the ``dist`` directory.\n\n.. admonition:: Cross platform support\n\n    This Makefile currently only works under OS/X; however, the build commands\n    aren't complicated; it should be fairly easy to reproduce the build on other\n    platforms. Pull requests to make the ``Makefile`` cross-platform are welcome.\n\nTo use Rubicon-Java, you'll need to ensure:\n\n1. ``rubicon.jar`` is in the classpath when you start your Java VM.\n\n2. The Rubicon library file is somewhere that it will be found by dynamic\n   library discovery. This means:\n\n   a. Under OS X, put the directory containing ``librubicon.dylib`` is in your ``DYLD_LIBRARY_PATH``\n\n   b. Under Linux, put the directory containing ``librubicon.so`` is in your ``LD_LIBRARY_PATH``\n\n   c. Under Windows.... something :-)\n\n3. The ``rubicon`` Python module is somewhere that can be added to a\n   ``PYTHONPATH``. You can install rubicon using::\n\n       $ pip install rubicon-java\n\n   If you do this, you'll need to reference your system Python install when\n   setting your ``PYTHONPATH``.\n\nThe Rubicon bridge starts on the Java side. Import the Python object::\n\n    import org.pybee.rubicon.Python;\n\nThen start the Python interpreter, and run a Python file::\n\n    # Initialize the Python VM\n    String pythonHome = \"/path/to/python\";\n    String pythonPath = \"/path/to/dir1:/path/to/dir2\";\n    if (Python.start(pythonHome, pythonPath, null) != 0) {\n        System.out.println(\"Error initializing Python VM.\");\n    }\n\n    # Start a Python script\n    if (Python.run(\"/path/to/script.py\") != 0) {\n        System.out.println(\"Error running Python script.\");\n    }\n\n    # Shut down the Python VM.\n    Python.stop();\n\nThe ``PYTHONPATH`` you specify must enable access to the ``rubicon`` Python\nmodule.\n\nIn your Python script, you can then reference Java objects::\n\n    >>> from rubicon.java import JavaClass\n\n    # Wrap a Java class\n    >>> URL = JavaClass(\"java/net/URL\")\n\n    # Then instantiate the Java class, using the API\n    # that is exposed in Java.\n    >>> url = URL(\"http://pybee.org\")\n\n    # You can then call methods on the Java object as if it\n    # were a Python object.\n    >>> print url.getHost()\n    pybee.org\n\nIt's also possible to provide implementations of Java Interfaces in Python.\nFor example, lets say you want to create a Swing Button, and you want to\nrespond to button clicks::\n\n    >>> from rubicon.java import JavaClass, JavaInterface\n\n    # Wrap the Java interface\n    >>> ActionListener = JavaInterface('java/awt/event/ActionListener')\n\n    # Define your own implementation\n    >>> class MyActionListener(ActionListener):\n    ...     def actionPerformed(self, event):\n    ...         print \"Button Pressed\"\n\n    # Instantiate an instance of the listener\n    >>> listener = MyActionListener()\n\n    # Create a button, and set the listener\n    >>> Button = JavaClass('javax/swing/JButton')\n    >>> button = Button('Push it')\n    >>> button.setActionListener(listener)\n\nOf course, this sample code won't work unless it's in the context of a larger\napplication starting a Swing GUI and so on.\n\nTesting\n-------\n\nTo run the Rubicon test suite:\n\n1. Configure your shell environment so that the Python, Java, and Rubicon\n   dynamic libraries can be discovered by the dynamic linker.\n\n   * On OSX, using Python 2.7.7 built under Homebrew::\n\n        export DYLD_LIBRARY_PATH=/usr/local/Cellar/python/2.7.7_2/Frameworks/Python.framework/Versions/2.7/lib/:`/usr/libexec/java_home`/jre/lib/server:./dist\n\n2. Build the libraries::\n\n    $ make clean\n    $ make all\n\n3. Run the test suite::\n\n    $ java org.pybee.rubicon.test.Test\n\nThis is a Python test suite, invoked via Java.\n\n.. Documentation\n.. -------------\n\n.. Full documentation for Rubicon can be found on `Read The Docs`_.\n\nCommunity\n---------\n\nRubicon is part of the `BeeWare suite`_. You can talk to the community through:\n\n* `@pybeeware on Twitter`_\n\n* The `pybee/general`_ channel on Gitter.\n\nWe foster a welcoming and respectful community as described in our\n`BeeWare Community Code of Conduct`_.\n\nContributing\n------------\n\nIf you experience problems with this backend, `log them on GitHub`_. If you\nwant to contribute code, please `fork the code`_ and `submit a pull request`_.\n\nInstallation\n============\n\nPrerequisites:\n\n+ Python 2.7 or higher or 3.4 or higher\n\n  * http://www.python.org/\n  * 2.7 and 3.6 are primary test environments.\n\n+ pip and setuptools\n\n  * http://pypi.python.org/pypi/pip\n  * http://pypi.python.org/pypi/setuptools\n\nTo install run::\n\n    python -m pip install --upgrade jtypes.rubicon\n\nTo ensure everything is running correctly you can run the tests using::\n\n    python -m jt.rubicon.tests\n\nDevelopment\n===========\n\nVisit `development page`_\n\nInstallation from sources:\n\nClone the `sources`_ and run::\n\n    python -m pip install ./jtypes.rubicon\n\nor on development mode::\n\n    python -m pip install --editable ./jtypes.rubicon\n\nPrerequisites:\n\n+ Development is strictly based on *tox*. To install it run::\n\n    python -m pip install tox\n\nLicense\n=======\n\n  | Copyright (c) 2016-2018, Adam Karpierz\n  |\n  | Licensed under the BSD license\n  | http://opensource.org/licenses/BSD-3-Clause\n  | Please refer to the accompanying LICENSE file.\n\nAuthors\n=======\n\n* Adam Karpierz <adam@karpierz.net>\n\n.. _PyPI record: https://pypi.python.org/pypi/jtypes.rubicon\n.. _original website: https://github.com/pybee/rubicon-java\n.. _development page: https://github.com/karpierz/jtypes.rubicon\n.. _sources: https://github.com/karpierz/jtypes.rubicon\n\n.. _BeeWare suite: http://pybee.org\n.. _Rubicon suite: http://pybee.org/rubicon\n.. _Read The Docs: http://rubicon-java.readthedocs.org\n.. _@pybeeware on Twitter: https://twitter.com/pybeeware\n.. _pybee/general: https://gitter.im/pybee/general\n.. _BeeWare Community Code of Conduct: http://pybee.org/community/behavior/\n.. _log them on Github: https://github.com/pybee/rubicon-java/issues\n.. _fork the code: https://github.com/pybee/rubicon-java\n.. _submit a pull request: https://github.com/pybee/rubicon-java/pulls\n\nChangelog\n=========\n\n0.1.0a2 (2018-11-08)\n--------------------\n- Update of the required setuptools version.\n- Minor setup and tests improvements.\n\n0.1.0a0 (2016-11-30)\n--------------------\n- Initial version.\n", "description_content_type": "", "docs_url": null, "download_url": "http://pypi.python.org/pypi/jtypes.rubicon/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/jtypes.rubicon/", "keywords": "jtypes, jt, jpype, jep, pyjnius, jpy, javabridge, pyjava, jcc,", "license": "BSD license", "maintainer": "", "maintainer_email": "", "name": "jtypes.rubicon", "package_url": "https://pypi.org/project/jtypes.rubicon/", "platform": "any", "project_url": "https://pypi.org/project/jtypes.rubicon/", "project_urls": {"Download": "http://pypi.python.org/pypi/jtypes.rubicon/", "Homepage": "http://pypi.python.org/pypi/jtypes.rubicon/"}, "release_url": "https://pypi.org/project/jtypes.rubicon/0.1.0a2/", "requires_dist": null, "requires_python": "", "summary": "A bridge interface between Python and Java (ctypes/cffi-based rubicon-java)", "version": "0.1.0a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            **Currently only as placeholder (because a base package jtypes.jvm is still in development)**<br><br>jtypes.rubicon<br>==============<br><br>A bridge between the Java Runtime Environment and Python.<br><br>Overview<br>========<br><br>  | **jtypes.rubicon** is a bridge between Python and Java, allowing these to intercommunicate.<br>  | It is an effort to allow Python programs full access to Java class libraries.<br><br>  `PyPI record`_.<br><br>  | **jtypes.rubicon** is a lightweight Python package, based on the *ctypes* or *cffi* library.<br>  | It is an almost fully compliant implementation of Steve Menard's **JPype** package<br>    by reimplementing whole its functionality in a clean Python instead of C/C++.<br><br>About Rubicon-Java:<br>-------------------<br><br>Borrowed from the `original website`_:<br><br>  Rubicon-Java<br>  ============<br><br>  **Rubicon-Java** is a bridge between the Java Runtime Environment and Python.<br>  It enables you to:<br><br>  * Instantiate objects defined in Java,<br>  * Invoke static and instance methods on objects defined in Java,<br>  * Access and modify static and instance fields on objects defined in Java, and<br>  * Write and use Python implementations of interfaces defined in Java.<br><br>Quickstart<br>----------<br><br>Rubicon-Java consists of three components:<br><br>1. A Python library,<br>2. A JNI library, and<br>3. A Java JAR file.<br><br>A ``Makefile`` has been provided to compile the JNI and JAR components. Type::<br><br>    $ make<br><br>to compile them. The compiled output will be placed in the ``dist`` directory.<br><br>.. admonition:: Cross platform support<br><br>    This Makefile currently only works under OS/X; however, the build commands<br>    aren't complicated; it should be fairly easy to reproduce the build on other<br>    platforms. Pull requests to make the ``Makefile`` cross-platform are welcome.<br><br>To use Rubicon-Java, you'll need to ensure:<br><br>1. ``rubicon.jar`` is in the classpath when you start your Java VM.<br><br>2. The Rubicon library file is somewhere that it will be found by dynamic<br>   library discovery. This means:<br><br>   a. Under OS X, put the directory containing ``librubicon.dylib`` is in your ``DYLD_LIBRARY_PATH``<br><br>   b. Under Linux, put the directory containing ``librubicon.so`` is in your ``LD_LIBRARY_PATH``<br><br>   c. Under Windows.... something :-)<br><br>3. The ``rubicon`` Python module is somewhere that can be added to a<br>   ``PYTHONPATH``. You can install rubicon using::<br><br>       $ pip install rubicon-java<br><br>   If you do this, you'll need to reference your system Python install when<br>   setting your ``PYTHONPATH``.<br><br>The Rubicon bridge starts on the Java side. Import the Python object::<br><br>    import org.pybee.rubicon.Python;<br><br>Then start the Python interpreter, and run a Python file::<br><br>    # Initialize the Python VM<br>    String pythonHome = \"/path/to/python\";<br>    String pythonPath = \"/path/to/dir1:/path/to/dir2\";<br>    if (Python.start(pythonHome, pythonPath, null) != 0) {<br>        System.out.println(\"Error initializing Python VM.\");<br>    }<br><br>    # Start a Python script<br>    if (Python.run(\"/path/to/script.py\") != 0) {<br>        System.out.println(\"Error running Python script.\");<br>    }<br><br>    # Shut down the Python VM.<br>    Python.stop();<br><br>The ``PYTHONPATH`` you specify must enable access to the ``rubicon`` Python<br>module.<br><br>In your Python script, you can then reference Java objects::<br><br>    &gt;&gt;&gt; from rubicon.java import JavaClass<br><br>    # Wrap a Java class<br>    &gt;&gt;&gt; URL = JavaClass(\"java/net/URL\")<br><br>    # Then instantiate the Java class, using the API<br>    # that is exposed in Java.<br>    &gt;&gt;&gt; url = URL(\"http://pybee.org\")<br><br>    # You can then call methods on the Java object as if it<br>    # were a Python object.<br>    &gt;&gt;&gt; print url.getHost()<br>    pybee.org<br><br>It's also possible to provide implementations of Java Interfaces in Python.<br>For example, lets say you want to create a Swing Button, and you want to<br>respond to button clicks::<br><br>    &gt;&gt;&gt; from rubicon.java import JavaClass, JavaInterface<br><br>    # Wrap the Java interface<br>    &gt;&gt;&gt; ActionListener = JavaInterface('java/awt/event/ActionListener')<br><br>    # Define your own implementation<br>    &gt;&gt;&gt; class MyActionListener(ActionListener):<br>    ...     def actionPerformed(self, event):<br>    ...         print \"Button Pressed\"<br><br>    # Instantiate an instance of the listener<br>    &gt;&gt;&gt; listener = MyActionListener()<br><br>    # Create a button, and set the listener<br>    &gt;&gt;&gt; Button = JavaClass('javax/swing/JButton')<br>    &gt;&gt;&gt; button = Button('Push it')<br>    &gt;&gt;&gt; button.setActionListener(listener)<br><br>Of course, this sample code won't work unless it's in the context of a larger<br>application starting a Swing GUI and so on.<br><br>Testing<br>-------<br><br>To run the Rubicon test suite:<br><br>1. Configure your shell environment so that the Python, Java, and Rubicon<br>   dynamic libraries can be discovered by the dynamic linker.<br><br>   * On OSX, using Python 2.7.7 built under Homebrew::<br><br>        export DYLD_LIBRARY_PATH=/usr/local/Cellar/python/2.7.7_2/Frameworks/Python.framework/Versions/2.7/lib/:`/usr/libexec/java_home`/jre/lib/server:./dist<br><br>2. Build the libraries::<br><br>    $ make clean<br>    $ make all<br><br>3. Run the test suite::<br><br>    $ java org.pybee.rubicon.test.Test<br><br>This is a Python test suite, invoked via Java.<br><br>.. Documentation<br>.. -------------<br><br>.. Full documentation for Rubicon can be found on `Read The Docs`_.<br><br>Community<br>---------<br><br>Rubicon is part of the `BeeWare suite`_. You can talk to the community through:<br><br>* `@pybeeware on Twitter`_<br><br>* The `pybee/general`_ channel on Gitter.<br><br>We foster a welcoming and respectful community as described in our<br>`BeeWare Community Code of Conduct`_.<br><br>Contributing<br>------------<br><br>If you experience problems with this backend, `log them on GitHub`_. If you<br>want to contribute code, please `fork the code`_ and `submit a pull request`_.<br><br>Installation<br>============<br><br>Prerequisites:<br><br>+ Python 2.7 or higher or 3.4 or higher<br><br>  * http://www.python.org/<br>  * 2.7 and 3.6 are primary test environments.<br><br>+ pip and setuptools<br><br>  * http://pypi.python.org/pypi/pip<br>  * http://pypi.python.org/pypi/setuptools<br><br>To install run::<br><br>    python -m pip install --upgrade jtypes.rubicon<br><br>To ensure everything is running correctly you can run the tests using::<br><br>    python -m jt.rubicon.tests<br><br>Development<br>===========<br><br>Visit `development page`_<br><br>Installation from sources:<br><br>Clone the `sources`_ and run::<br><br>    python -m pip install ./jtypes.rubicon<br><br>or on development mode::<br><br>    python -m pip install --editable ./jtypes.rubicon<br><br>Prerequisites:<br><br>+ Development is strictly based on *tox*. To install it run::<br><br>    python -m pip install tox<br><br>License<br>=======<br><br>  | Copyright (c) 2016-2018, Adam Karpierz<br>  |<br>  | Licensed under the BSD license<br>  | http://opensource.org/licenses/BSD-3-Clause<br>  | Please refer to the accompanying LICENSE file.<br><br>Authors<br>=======<br><br>* Adam Karpierz &lt;adam@karpierz.net&gt;<br><br>.. _PyPI record: https://pypi.python.org/pypi/jtypes.rubicon<br>.. _original website: https://github.com/pybee/rubicon-java<br>.. _development page: https://github.com/karpierz/jtypes.rubicon<br>.. _sources: https://github.com/karpierz/jtypes.rubicon<br><br>.. _BeeWare suite: http://pybee.org<br>.. _Rubicon suite: http://pybee.org/rubicon<br>.. _Read The Docs: http://rubicon-java.readthedocs.org<br>.. _@pybeeware on Twitter: https://twitter.com/pybeeware<br>.. _pybee/general: https://gitter.im/pybee/general<br>.. _BeeWare Community Code of Conduct: http://pybee.org/community/behavior/<br>.. _log them on Github: https://github.com/pybee/rubicon-java/issues<br>.. _fork the code: https://github.com/pybee/rubicon-java<br>.. _submit a pull request: https://github.com/pybee/rubicon-java/pulls<br><br>Changelog<br>=========<br><br>0.1.0a2 (2018-11-08)<br>--------------------<br>- Update of the required setuptools version.<br>- Minor setup and tests improvements.<br><br>0.1.0a0 (2016-11-30)<br>--------------------<br>- Initial version.<br>\n          </div>"}, "last_serial": 5853285, "releases": {"0.1.0a2": [{"comment_text": "", "digests": {"md5": "675e3e284fcea055536cb373bb3502f4", "sha256": "64ca404ebc117ddc176ace7abf699f82a52fa816f4bbf2b73af1edb2dcc93d5c"}, "downloads": -1, "filename": "jtypes.rubicon-0.1.0a2.zip", "has_sig": false, "md5_digest": "675e3e284fcea055536cb373bb3502f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64202, "upload_time": "2018-11-12T15:01:09", "upload_time_iso_8601": "2018-11-12T15:01:09.583774Z", "url": "https://files.pythonhosted.org/packages/96/e7/57cd0649d63f2d19494e4bc35d9976798e202090b67ef266487d53d5cb20/jtypes.rubicon-0.1.0a2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "675e3e284fcea055536cb373bb3502f4", "sha256": "64ca404ebc117ddc176ace7abf699f82a52fa816f4bbf2b73af1edb2dcc93d5c"}, "downloads": -1, "filename": "jtypes.rubicon-0.1.0a2.zip", "has_sig": false, "md5_digest": "675e3e284fcea055536cb373bb3502f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64202, "upload_time": "2018-11-12T15:01:09", "upload_time_iso_8601": "2018-11-12T15:01:09.583774Z", "url": "https://files.pythonhosted.org/packages/96/e7/57cd0649d63f2d19494e4bc35d9976798e202090b67ef266487d53d5cb20/jtypes.rubicon-0.1.0a2.zip", "yanked": false}], "timestamp": "Fri May  8 00:51:28 2020"}