{"info": {"author": "Tomas Aparicio", "author_email": "tomas@aparicio.me", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: http://i.imgur.com/kKZPYut.jpg\n   :width: 100%\n   :alt: grappa logo\n   :align: center\n\n\n|Build Status| |PyPI| |Coverage Status| |Documentation Status| |Stability| |Quality| |Versions| |SayThanks|\n\nAbout\n-----\n\n``grappa`` is a behavior-oriented, self-declarative, expressive and developer-friendly\nlightweight assertion library for Python_ that aims to make testing more productive and frictionless for humans.\n\n``grappa`` comes with two declarative `assertion styles`_: ``expect`` and ``should``.\n\nIt also comes with a detailed, human-friendly `error reporting`_ system that aims to reduce friction,\nprovide better feedback and improve human speed and agility while identifying and fixing errors.\n\nTo get started, take a look to the `showcase`_ code, `tutorial`_, available `plugins`_ and `operators documentation`_.\n\nFor HTTP protocol assertions, see `grappa-http`_.\n\nStatus\n------\n\n``grappa`` is considered **stable** software, however it's not mature, widely used software. \nNew features may be added from time to time or minor bugs may be experienced.\n\nCommunity contributions and bug reports are very welcome.\n\nShowcase\n--------\n\nA small example demonstrating some `grappa` features.\nSee `documentation`_ and `tutorial`_ for more examples.\n\n.. code-block:: python\n\n    from grappa import should\n\n    True | should.be.true\n    False | should.be.false\n    None | should.be.none\n\n    '' | should.be.empty\n    [] | should.be.empty\n    'foo' | should.exists\n\n    3.14 | should.be.lower.than(4)\n    3.14 | should.be.higher.than(3)\n    3.14 | should.be.within(2, 4)\n\n    'bar' | should.be.equal.to('bar', msg='value is not \"bar\"')\n    [1, 2, 3] | should.be.equal.to([1, 2, 3])\n\n    'hello, grappa' | should.startswith('hello')\n    'hello, grappa' | should.endswith('grappa')\n    [1, 2, 3, 4] | should.startswith(1)\n    [1, 2, 3, 4] | should.endswith(4)\n\n    'Hello grappa' | should.match('(\\W)+ grappa$')\n    'Hello grappa' | should.contain('grappa') | should.contain('he')\n    ['foo', 'bar'] | should.contain('foo') | should.do_not.contain('baz')\n\n    'foo' | should.be.a('string')\n    {'foo': True} | should.be.a('dict')\n\n    iter([1, 2, 3]) | should.have.length.of(3)\n    [1, 2, 3] | should.be.a('list') > should.have.length.of(3)\n\n    (lambda x: x) | should.be.callable\n    (lambda x: x) | should.not_have.type.of('generator')\n\n    'foo' | should.pass_test(lambda x: x in 'foo bar')\n    'foo' | should.pass_function(lambda x: len(x) > 2)\n\n    (lambda: x) | should.raises(NameError)\n    (lambda: x) | should.does_not.raises(RuntimeError)\n\n    {'foo': 'bar'} | should.have.key('foo').that.should.be.equal('bar')\n    (1, 2, 3, 4) | should.be.a(tuple) > should.have.index.at(3) > should.be.equal.to(4)\n\n    an_object | should.have.properties('foo', 'bar', 'baz')\n    an_object | should.implement.methods('foo', 'bar', 'baz')\n\n    {'foo': True, 'bar': False} | should.all(should.have.key('foo'), should.have.key('bar'))\n    {'foo': True, 'bar': False} | should.any(should.have.key('foo'), should.have.key('baz'))\n\n    ({'bar': [1, 2, 3]}\n        | should.have.key('bar')\n        > should.be.a('list')\n        > should.have.length.of(3)\n        > should.contain.item(3)\n        > should.have.index.at(1)\n        > should.be.equal.to(2))\n\n    with should('foo'):\n        should.be.a(str)\n        should.have.length.of(3)\n        should.be.equal.to('foo')\n\n\nLet's see how the error report looks like in ``grappa`` running in ``pytest``.\n\nSee `error reporting`_ documentation for more details about how ``grappa`` error report system works.\n\n.. code-block:: python\n\n    ======================================================================\n    FAIL: tests.should_test.test_grappa_assert\n    ======================================================================\n    Traceback (most recent call last):\n    File \".pyenv/versions/3.6.0/lib/python3.6/site-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n    File \"grappa/tests/should_test.py\", line 16, in test_grappa_assert\n    x | should.be.have.length.of(4)\n    File \"grappa/grappa/test.py\", line 248, in __ror__\n    return self.__overload__(value)\n    File \"grappa/grappa/test.py\", line 236, in __overload__\n    return self.__call__(subject, overload=True)\n    File \"grappa/grappa/test.py\", line 108, in __call__\n    return self._trigger() if overload else Test(subject)\n    File \"grappa/grappa/test.py\", line 153, in _trigger\n    raise err\n    AssertionError: Oops! Something went wrong!\n\n    The following assertion was not satisfied\n      subject \"[1, 2, 3]\" should be have length of \"4\"\n\n    Message\n      subject list must have at least 4 items\n\n    Reasons\n      \u25b8 unexpected object length: 3\n\n    What we expected\n      an object that can be length measured and its length is equal to 4\n\n    What we got instead\n      an object of type \"list\" with length 3\n\n    Information\n      \u25b8 Object length is measured by using \"len()\" built-in\n        Python function or consuming an lazy iterable, such as a\n        generator. Most built-in types and objects in Python\n        can be tested that way, such as str, list, tuple, dict...\n        as well as any object that implements \"__len__()\" method.\n        \u2014 Reference: https://docs.python.org/3/library/functions.html#len\n\n    Where\n      File \"grappa/tests/should_test.py\", line 16, in test_grappa_assert\n\n     8|\n     9|  def test_native_assert():\n    10|      x = [1, 2, 3]\n    11|      assert len(x) == 4\n    12|\n    13|\n    14|  def test_grappa_assert():\n    15|      x = [1, 2, 3]\n    16| >    x | should.be.have.length.of(4)\n    17|\n    18|\n    19|  def test_bool():\n    20|      True | should.be.true | should.be.present\n    21|      False | should.be.false | should.be.equal.to(False)\n    22|      False | should.be.false | should.not_be.equal.to(True)\n\nDemo\n----\n\n.. image:: https://asciinema.org/a/d6yd2475m41thdku7d3ntkeir.png\n   :width: 900\n   :alt: showcase\n   :align: center\n   :target: https://asciinema.org/a/d6yd2475m41thdku7d3ntkeir?autoplay=1&speed=3&size=small\n\nWhy grappa?\n-----------\n\n``grappa`` aims to assist humans while doing a very recurrent and not very fun task in software development: testing things.\n\nThe core idea behind ``grappa`` comes from the fact that human time is considerably more expensive than machine time,\nand therefore any machine assistance to optimize processes and close the gap is beneficial.\n\nWith ``grappa`` you can express almost in plain English what the test contract actually is, but in a way that's\nfun and easy to write but also more easy and pleasant to read or maintain by other developers.\n\n\nThe Zen of grappa\n-----------------\n\n- Testing is about feedback: detailed, easy to understand, human-friendly is always better.\n- Frictionless testing: introducing self-declarative behavior testing patterns can make testing more fun for test writers and more enjoyable for test readers.\n- Expressivity is paramount: humans should easily understand what the code is doing.\n- Human time is expensive: any modern software should assist people to identify and understand errors easily.\n- Make error reporting great again: feedback during testing is key, let's make it more handy and less frustrating.\n- Testing patterns consolidation: software expectations are limited to the boundaries of language data types and structures.\n- Hurt less feelings: seeing errors is not a nice thing, but it can be painless if details are showed you in a more gentle way.\n\n\nFeatures\n--------\n\n-  Behavior-oriented expressive fluent API.\n-  Built-in assertion DSL with English lexicon and semantics.\n-  Supports both ``expect`` and ``should`` assertion styles.\n-  Full-featured built-in `assertion operators`_.\n-  Human-friendly and detailed `error reporting`_.\n-  Built-in expectations difference comparison between subject and expected values.\n-  Extensible assertions supporting third-party `plugins`_.\n-  Assertion chaining and composition.\n-  Composable assertion via logical operators such as ``and`` & ``or``.\n-  Testing framework agnostic. Works with ``unittest``, ``nosetests``, ``pytest``, ``behave`` ...\n-  Easy to hack via programmatic API.\n-  Lightweight and (almost) dependency-free.\n-  Works with Python 2.7+, 3+, PyPy and potentially with other Python implementations.\n\n\nInstallation\n------------\n\nUsing ``pip`` package manager:\n\n.. code-block:: bash\n\n    pip install --upgrade grappa\n\nOr install the latest sources from Github:\n\n.. code-block:: bash\n\n    pip install -e git+git://github.com/grappa-py/grappa.git#egg=grappa\n\n\n.. _Python: http://python.org\n.. _`documentation`: http://grappa.readthedocs.io\n.. _`operators documentation`: http://grappa.readthedocs.io/en/latest/operators.html\n.. _`tutorial`: http://grappa.readthedocs.io/en/latest/tutorial.html\n.. _`plugins`: http://grappa.readthedocs.io/en/latest/plugins.html\n.. _`error reporting`: http://grappa.readthedocs.io/en/latest/errors.html\n.. _`assertion styles`: http://grappa.readthedocs.io/en/latest/style.html\n.. _`assertion operators`: http://grappa.readthedocs.io/en/latest/operators.html\n.. _`grappa-http`: https://github.com/grappa-py/http\n\n.. |Build Status| image:: https://travis-ci.org/grappa-py/grappa.svg?branch=master\n   :target: https://travis-ci.org/grappa-py/grappa\n.. |PyPI| image:: https://img.shields.io/pypi/v/grappa.svg?maxAge=2592000?style=flat-square\n   :target: https://pypi.python.org/pypi/grappa\n.. |Coverage Status| image:: https://coveralls.io/repos/github/grappa-py/grappa/badge.svg?branch=master\n   :target: https://coveralls.io/github/grappa-py/grappa?branch=master\n.. |Documentation Status| image:: https://readthedocs.org/projects/grappa/badge/?version=latest\n   :target: http://grappa.readthedocs.io/en/latest/?badge=latest\n.. |Quality| image:: https://codeclimate.com/github/grappa-py/grappa/badges/gpa.svg\n   :target: https://codeclimate.com/github/grappa-py/grappa\n   :alt: Code Climate\n.. |Stability| image:: https://img.shields.io/pypi/status/grappa.svg\n   :target: https://pypi.python.org/pypi/grappa\n   :alt: Stability\n.. |Versions| image:: https://img.shields.io/pypi/pyversions/grappa.svg\n   :target: https://pypi.python.org/pypi/grappa\n   :alt: Python Versions\n.. |SayThanks| image:: https://img.shields.io/badge/Say%20Thanks!-%F0%9F%A6%89-1EAEDB.svg\n   :target: https://saythanks.io/to/h2non\n   :alt: Say Thanks\n\n\n\nHistory\n=======\n\n0.1.12 / 2020-02-26\n--------------------\n\n  * feat(version): bimp\n  * feat(setup): add python 3.7 & 3.8 classifiers\n  * Merge pull request #56 from jdlourenco/collections-abc-six\n  * update code according flake8 warnings and errors\n  * feat(requirements): bump flake8\n  * feat(travis): add python 3.7 & 3.8\n  * fix(travis): remove python 3.3 & 3.4\n  * change bump six to 0.14\n  * change use six.moves.collections_abc module for importing classes that moved to the collections.abc module on python3\n\n0.1.10 / 2018-10-02\n-------------------\n\n   * feat: add ``only`` operator #45\n\n0.1.9 / 2018-06-02\n------------------\n\n   * fix(#42): Add string comparison parity for Python 2.7\n\nv0.1.8 / 2018-01-23\n-------------------\n\n  * Merge pull request #39 from dancingcactus/master\n  * Removes unused imports\n  * Allow partials to be used with raises operators\n  * fix(operator): minor type in exception message\n  * Merge pull request #38 from dancingcactus/master\n  * Updates the docs for Raises to encapsulate feedback from #37\n  * Update README.rst\n  * refactor(docs): remove codesponsor\n  * feat(docs): add sponsor ad\n  * feat(docs): update status note\n  * feat(docs): update status note\n  * Merge branch 'master' of https://github.com/grappa-py/grappa\n  * fix(docs): use proper organization name\n  * Update AUTHORS\n  * refactor(docs): import AUTHORS file\n  * feat: add AUTHORS file\n  * fix(setup.py): update package URL\n\nv0.1.7 / 2017-05-12\n-------------------\n\n  * feat(#33): show available operators on attribute error\n  * feat(#36): add allowed assertion attributes on error\n\nv0.1.6 / 2017-04-28\n-------------------\n\n* fix(type): expose proper type value if a type value is the expected value\n* fix(reporter): use search() instead of match() for line code matching. fix(reporters): escape underscore sequences\n\nv0.1.5 / 2017-04-28\n-------------------\n\n* feat(reporters): add code reporter\n* feat(operators): add \"that_is\", \"which_is\" attribute DSL operators\n* refactor(reporter): match additional negation assertions\n\nv0.1.4 / 2017-04-27\n-------------------\n\n* feat(reporters): match attribute expressions for proper code line reporting\n* feat(equal): enable show_diff report in operator\n* fix(index_test): bad file formatting\n* refactor(index_test): add error test case\n* refactor(index_test): remove commented code\n* feat(docs): add context assertion example in tutorial\n* feat(docs): add context manager example\n* fix(docs): update error exception example\n* refactor(docs): update showcase example\n* feat(operators): add not_satisfy attribute operator\n\nv0.1.3 / 2017-03-29\n-------------------\n\n* feat(docs): add raise exception examples\n* refactor(docs): update showcase example\n* feat(reporter): normalize value output in subject/expect sections\n* feat(docs): update examples and FAQs. feat(operators): add aliases for start/end operator\n* feat(docs): add link to grappa-http plugin\n* refactor(docs): add operators type section\n* refactor(docs): add beta status documentation notice\n* feat(docs): update description\n* refactor(docs): update status description\n* feat(docs): update links\n\nv0.1.2 / 2017-03-26\n-------------------\n\n* feat(docs): add matchers supported keyword arguments\n* feat(docs): improve descriptions\n* feat(operators): improve length operator for access based chaining\n* fix(docs): update error custom message example\n* feat(docs): improve documentation. adds operators composition section\n* fix(setup.py): add author email\n\nv0.1.1 / 2017-03-23\n-------------------\n\n* refactor(diff): process expected values as tuple first\n* fix(contain): remove print statements\n* refactor(core): normalize yielding syntax, add missing documentation\n* refactor(core): normalize yielding syntax, add missing documentation\n* feat(#26): support disable operator chaining\n* feat(#28): better assertion reporting. feat(operators): add index operator\n* refactor(reporter): support raw mode with proper indent pretty printing\n* refactor(operators): add satisfy/satisfies attribute operators\n* feat(diff): consume diff specific subject/expected values\n* feat(operators): add is/is_not operator attributes\n* refactor(core): isolate reporters per module\n* feat(#13, #25): add suboperators support and diff output report\n* refactor(docs): update organization name\n* refactor(docs): update project image\n* refactor(reporter): ignore subject/expected output if empty\n* refactor(reporter): show diff if enabled\n* feat(docs): add in a nutshell section\n* feat(#24, #25): feature enhancements\n* feat(docs): add say thanks badge\n* refactor(reporter): load value from operator first\n* fix(docs): use proper badges\n* fix(docs): update type operator examples\n* fix(metadata): update\n* refactor(test): add chained test for keys\n* feat(Makefile): add publish commands\n\n0.1.0 (2017-03-05)\n------------------\n\n* First version (beta)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/grappa-py/grappa", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "grappa", "package_url": "https://pypi.org/project/grappa/", "platform": "", "project_url": "https://pypi.org/project/grappa/", "project_urls": {"Homepage": "https://github.com/grappa-py/grappa"}, "release_url": "https://pypi.org/project/grappa/0.1.12/", "requires_dist": ["colorama (<2,>=0.3.9)", "six (~=1.14)"], "requires_python": "", "summary": "Behavior-oriented, expressive, developer-friendly assertions library", "version": "0.1.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"grappa logo\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07b771bbee39407d198a7736cdacb76ccce3ddc9/687474703a2f2f692e696d6775722e636f6d2f6b4b5a505975742e6a7067\" width=\"100%\">\n<p><a href=\"https://travis-ci.org/grappa-py/grappa\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e8610d8234b6be569091dbed4689441f81f209c/68747470733a2f2f7472617669732d63692e6f72672f6772617070612d70792f6772617070612e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/grappa\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13972d2140f3c7e0afb81692e0652f04010e1e89/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6772617070612e7376673f6d61784167653d323539323030303f7374796c653d666c61742d737175617265\"></a> <a href=\"https://coveralls.io/github/grappa-py/grappa?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddc757637ffb5d4ce6799d08c9114ad115124eec/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6772617070612d70792f6772617070612f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://grappa.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77c742494dc9b1b104cacdf4d2fdcf45929df5fb/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6772617070612f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://pypi.python.org/pypi/grappa\" rel=\"nofollow\"><img alt=\"Stability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb475aec47739d111f57fa53baa676dac0b1a50b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f6772617070612e737667\"></a> <a href=\"https://codeclimate.com/github/grappa-py/grappa\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c43812d85d38769fa7e6869ee4650b32be1e9729/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6772617070612d70792f6772617070612f6261646765732f6770612e737667\"></a> <a href=\"https://pypi.python.org/pypi/grappa\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c9f1daf2a467f5549c512f09f80af4c71d50e298/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6772617070612e737667\"></a> <a href=\"https://saythanks.io/to/h2non\" rel=\"nofollow\"><img alt=\"Say Thanks\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f965ad180f91639bc9af1f210781edc077960c4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361792532305468616e6b73212d2546302539462541362538392d3145414544422e737667\"></a></p>\n<div id=\"about\">\n<h2>About</h2>\n<p><tt>grappa</tt> is a behavior-oriented, self-declarative, expressive and developer-friendly\nlightweight assertion library for <a href=\"http://python.org\" rel=\"nofollow\">Python</a> that aims to make testing more productive and frictionless for humans.</p>\n<p><tt>grappa</tt> comes with two declarative <a href=\"http://grappa.readthedocs.io/en/latest/style.html\" rel=\"nofollow\">assertion styles</a>: <tt>expect</tt> and <tt>should</tt>.</p>\n<p>It also comes with a detailed, human-friendly <a href=\"http://grappa.readthedocs.io/en/latest/errors.html\" rel=\"nofollow\">error reporting</a> system that aims to reduce friction,\nprovide better feedback and improve human speed and agility while identifying and fixing errors.</p>\n<p>To get started, take a look to the <a href=\"#showcase\" rel=\"nofollow\">showcase</a> code, <a href=\"http://grappa.readthedocs.io/en/latest/tutorial.html\" rel=\"nofollow\">tutorial</a>, available <a href=\"http://grappa.readthedocs.io/en/latest/plugins.html\" rel=\"nofollow\">plugins</a> and <a href=\"http://grappa.readthedocs.io/en/latest/operators.html\" rel=\"nofollow\">operators documentation</a>.</p>\n<p>For HTTP protocol assertions, see <a href=\"https://github.com/grappa-py/http\" rel=\"nofollow\">grappa-http</a>.</p>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p><tt>grappa</tt> is considered <strong>stable</strong> software, however it\u2019s not mature, widely used software.\nNew features may be added from time to time or minor bugs may be experienced.</p>\n<p>Community contributions and bug reports are very welcome.</p>\n</div>\n<div id=\"showcase\">\n<h2>Showcase</h2>\n<p>A small example demonstrating some <cite>grappa</cite> features.\nSee <a href=\"http://grappa.readthedocs.io\" rel=\"nofollow\">documentation</a> and <a href=\"http://grappa.readthedocs.io/en/latest/tutorial.html\" rel=\"nofollow\">tutorial</a> for more examples.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">grappa</span> <span class=\"kn\">import</span> <span class=\"n\">should</span>\n\n<span class=\"kc\">True</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">true</span>\n<span class=\"kc\">False</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">false</span>\n<span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">none</span>\n\n<span class=\"s1\">''</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n<span class=\"p\">[]</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n<span class=\"s1\">'foo'</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">exists</span>\n\n<span class=\"mf\">3.14</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"o\">.</span><span class=\"n\">than</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"mf\">3.14</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">higher</span><span class=\"o\">.</span><span class=\"n\">than</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mf\">3.14</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">within</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"s1\">'bar'</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s1\">'value is not \"bar\"'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"s1\">'hello, grappa'</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">)</span>\n<span class=\"s1\">'hello, grappa'</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">'grappa'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"s1\">'Hello grappa'</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">'(\\W)+ grappa$'</span><span class=\"p\">)</span>\n<span class=\"s1\">'Hello grappa'</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">contain</span><span class=\"p\">(</span><span class=\"s1\">'grappa'</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">contain</span><span class=\"p\">(</span><span class=\"s1\">'he'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">contain</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">do_not</span><span class=\"o\">.</span><span class=\"n\">contain</span><span class=\"p\">(</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n\n<span class=\"s1\">'foo'</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"s1\">'string'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"s1\">'dict'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"s1\">'list'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">callable</span>\n<span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">not_have</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s1\">'generator'</span><span class=\"p\">)</span>\n\n<span class=\"s1\">'foo'</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">pass_test</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"s1\">'foo bar'</span><span class=\"p\">)</span>\n<span class=\"s1\">'foo'</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">pass_function</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">NameError</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">does_not</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">RuntimeError</span><span class=\"p\">)</span>\n\n<span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">}</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"n\">an_object</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">properties</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n<span class=\"n\">an_object</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">implement</span><span class=\"o\">.</span><span class=\"n\">methods</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n\n<span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">))</span>\n<span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"s1\">'baz'</span><span class=\"p\">))</span>\n\n<span class=\"p\">({</span><span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]}</span>\n    <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"s1\">'list'</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">contain</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">should</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">):</span>\n    <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n</pre>\n<p>Let\u2019s see how the error report looks like in <tt>grappa</tt> running in <tt>pytest</tt>.</p>\n<p>See <a href=\"http://grappa.readthedocs.io/en/latest/errors.html\" rel=\"nofollow\">error reporting</a> documentation for more details about how <tt>grappa</tt> error report system works.</p>\n<pre><span class=\"o\">======================================================================</span>\n<span class=\"n\">FAIL</span><span class=\"p\">:</span> <span class=\"n\">tests</span><span class=\"o\">.</span><span class=\"n\">should_test</span><span class=\"o\">.</span><span class=\"n\">test_grappa_assert</span>\n<span class=\"o\">======================================================================</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"n\">File</span> <span class=\"s2\">\".pyenv/versions/3.6.0/lib/python3.6/site-packages/nose/case.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">198</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">runTest</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">\"grappa/tests/should_test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">test_grappa_assert</span>\n<span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">\"grappa/grappa/test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">248</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__ror__</span>\n<span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__overload__</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">\"grappa/grappa/test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">236</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">__overload__</span>\n<span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">overload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">\"grappa/grappa/test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__call__</span>\n<span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_trigger</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">overload</span> <span class=\"k\">else</span> <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">\"grappa/grappa/test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">153</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_trigger</span>\n<span class=\"k\">raise</span> <span class=\"n\">err</span>\n<span class=\"ne\">AssertionError</span><span class=\"p\">:</span> <span class=\"n\">Oops</span><span class=\"err\">!</span> <span class=\"n\">Something</span> <span class=\"n\">went</span> <span class=\"n\">wrong</span><span class=\"err\">!</span>\n\n<span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"n\">assertion</span> <span class=\"n\">was</span> <span class=\"ow\">not</span> <span class=\"n\">satisfied</span>\n  <span class=\"n\">subject</span> <span class=\"s2\">\"[1, 2, 3]\"</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">have</span> <span class=\"n\">length</span> <span class=\"n\">of</span> <span class=\"s2\">\"4\"</span>\n\n<span class=\"n\">Message</span>\n  <span class=\"n\">subject</span> <span class=\"nb\">list</span> <span class=\"n\">must</span> <span class=\"n\">have</span> <span class=\"n\">at</span> <span class=\"n\">least</span> <span class=\"mi\">4</span> <span class=\"n\">items</span>\n\n<span class=\"n\">Reasons</span>\n  <span class=\"err\">\u25b8</span> <span class=\"n\">unexpected</span> <span class=\"nb\">object</span> <span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">What</span> <span class=\"n\">we</span> <span class=\"n\">expected</span>\n  <span class=\"n\">an</span> <span class=\"nb\">object</span> <span class=\"n\">that</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">length</span> <span class=\"n\">measured</span> <span class=\"ow\">and</span> <span class=\"n\">its</span> <span class=\"n\">length</span> <span class=\"ow\">is</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"mi\">4</span>\n\n<span class=\"n\">What</span> <span class=\"n\">we</span> <span class=\"n\">got</span> <span class=\"n\">instead</span>\n  <span class=\"n\">an</span> <span class=\"nb\">object</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"s2\">\"list\"</span> <span class=\"k\">with</span> <span class=\"n\">length</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">Information</span>\n  <span class=\"err\">\u25b8</span> <span class=\"n\">Object</span> <span class=\"n\">length</span> <span class=\"ow\">is</span> <span class=\"n\">measured</span> <span class=\"n\">by</span> <span class=\"n\">using</span> <span class=\"s2\">\"len()\"</span> <span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span>\n    <span class=\"n\">Python</span> <span class=\"n\">function</span> <span class=\"ow\">or</span> <span class=\"n\">consuming</span> <span class=\"n\">an</span> <span class=\"n\">lazy</span> <span class=\"n\">iterable</span><span class=\"p\">,</span> <span class=\"n\">such</span> <span class=\"k\">as</span> <span class=\"n\">a</span>\n    <span class=\"n\">generator</span><span class=\"o\">.</span> <span class=\"n\">Most</span> <span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">types</span> <span class=\"ow\">and</span> <span class=\"n\">objects</span> <span class=\"ow\">in</span> <span class=\"n\">Python</span>\n    <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">tested</span> <span class=\"n\">that</span> <span class=\"n\">way</span><span class=\"p\">,</span> <span class=\"n\">such</span> <span class=\"k\">as</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"o\">...</span>\n    <span class=\"k\">as</span> <span class=\"n\">well</span> <span class=\"k\">as</span> <span class=\"nb\">any</span> <span class=\"nb\">object</span> <span class=\"n\">that</span> <span class=\"n\">implements</span> <span class=\"s2\">\"__len__()\"</span> <span class=\"n\">method</span><span class=\"o\">.</span>\n    <span class=\"err\">\u2014</span> <span class=\"n\">Reference</span><span class=\"p\">:</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">docs</span><span class=\"o\">.</span><span class=\"n\">python</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">functions</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"c1\">#len</span>\n\n<span class=\"n\">Where</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"grappa/tests/should_test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">test_grappa_assert</span>\n\n <span class=\"mi\">8</span><span class=\"o\">|</span>\n <span class=\"mi\">9</span><span class=\"o\">|</span>  <span class=\"k\">def</span> <span class=\"nf\">test_native_assert</span><span class=\"p\">():</span>\n<span class=\"mi\">10</span><span class=\"o\">|</span>      <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"mi\">11</span><span class=\"o\">|</span>      <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n<span class=\"mi\">12</span><span class=\"o\">|</span>\n<span class=\"mi\">13</span><span class=\"o\">|</span>\n<span class=\"mi\">14</span><span class=\"o\">|</span>  <span class=\"k\">def</span> <span class=\"nf\">test_grappa_assert</span><span class=\"p\">():</span>\n<span class=\"mi\">15</span><span class=\"o\">|</span>      <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"mi\">16</span><span class=\"o\">|</span> <span class=\"o\">&gt;</span>    <span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"mi\">17</span><span class=\"o\">|</span>\n<span class=\"mi\">18</span><span class=\"o\">|</span>\n<span class=\"mi\">19</span><span class=\"o\">|</span>  <span class=\"k\">def</span> <span class=\"nf\">test_bool</span><span class=\"p\">():</span>\n<span class=\"mi\">20</span><span class=\"o\">|</span>      <span class=\"kc\">True</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">true</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">present</span>\n<span class=\"mi\">21</span><span class=\"o\">|</span>      <span class=\"kc\">False</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">false</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"mi\">22</span><span class=\"o\">|</span>      <span class=\"kc\">False</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">false</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">not_be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"demo\">\n<h2>Demo</h2>\n<a href=\"https://asciinema.org/a/d6yd2475m41thdku7d3ntkeir?autoplay=1&amp;speed=3&amp;size=small\" rel=\"nofollow\"><img alt=\"showcase\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aad9ffe84f27d71708c522ac260726dba103cc2a/68747470733a2f2f61736369696e656d612e6f72672f612f64367964323437356d34317468646b753764336e746b6569722e706e67\" width=\"900\"></a>\n</div>\n<div id=\"why-grappa\">\n<h2>Why grappa?</h2>\n<p><tt>grappa</tt> aims to assist humans while doing a very recurrent and not very fun task in software development: testing things.</p>\n<p>The core idea behind <tt>grappa</tt> comes from the fact that human time is considerably more expensive than machine time,\nand therefore any machine assistance to optimize processes and close the gap is beneficial.</p>\n<p>With <tt>grappa</tt> you can express almost in plain English what the test contract actually is, but in a way that\u2019s\nfun and easy to write but also more easy and pleasant to read or maintain by other developers.</p>\n</div>\n<div id=\"the-zen-of-grappa\">\n<h2>The Zen of grappa</h2>\n<ul>\n<li>Testing is about feedback: detailed, easy to understand, human-friendly is always better.</li>\n<li>Frictionless testing: introducing self-declarative behavior testing patterns can make testing more fun for test writers and more enjoyable for test readers.</li>\n<li>Expressivity is paramount: humans should easily understand what the code is doing.</li>\n<li>Human time is expensive: any modern software should assist people to identify and understand errors easily.</li>\n<li>Make error reporting great again: feedback during testing is key, let\u2019s make it more handy and less frustrating.</li>\n<li>Testing patterns consolidation: software expectations are limited to the boundaries of language data types and structures.</li>\n<li>Hurt less feelings: seeing errors is not a nice thing, but it can be painless if details are showed you in a more gentle way.</li>\n</ul>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Behavior-oriented expressive fluent API.</li>\n<li>Built-in assertion DSL with English lexicon and semantics.</li>\n<li>Supports both <tt>expect</tt> and <tt>should</tt> assertion styles.</li>\n<li>Full-featured built-in <a href=\"http://grappa.readthedocs.io/en/latest/operators.html\" rel=\"nofollow\">assertion operators</a>.</li>\n<li>Human-friendly and detailed <a href=\"http://grappa.readthedocs.io/en/latest/errors.html\" rel=\"nofollow\">error reporting</a>.</li>\n<li>Built-in expectations difference comparison between subject and expected values.</li>\n<li>Extensible assertions supporting third-party <a href=\"http://grappa.readthedocs.io/en/latest/plugins.html\" rel=\"nofollow\">plugins</a>.</li>\n<li>Assertion chaining and composition.</li>\n<li>Composable assertion via logical operators such as <tt>and</tt> &amp; <tt>or</tt>.</li>\n<li>Testing framework agnostic. Works with <tt>unittest</tt>, <tt>nosetests</tt>, <tt>pytest</tt>, <tt>behave</tt> \u2026</li>\n<li>Easy to hack via programmatic API.</li>\n<li>Lightweight and (almost) dependency-free.</li>\n<li>Works with Python 2.7+, 3+, PyPy and potentially with other Python implementations.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using <tt>pip</tt> package manager:</p>\n<pre>pip install --upgrade grappa\n</pre>\n<p>Or install the latest sources from Github:</p>\n<pre>pip install -e git+git://github.com/grappa-py/grappa.git#egg<span class=\"o\">=</span>grappa\n</pre>\n<div id=\"history\">\n<h3>History</h3>\n</div>\n</div>\n<div id=\"id1\">\n<h2>0.1.12 / 2020-02-26</h2>\n<blockquote>\n<ul>\n<li>feat(version): bimp</li>\n<li>feat(setup): add python 3.7 &amp; 3.8 classifiers</li>\n<li>Merge pull request #56 from jdlourenco/collections-abc-six</li>\n<li>update code according flake8 warnings and errors</li>\n<li>feat(requirements): bump flake8</li>\n<li>feat(travis): add python 3.7 &amp; 3.8</li>\n<li>fix(travis): remove python 3.3 &amp; 3.4</li>\n<li>change bump six to 0.14</li>\n<li>change use six.moves.collections_abc module for importing classes that moved to the collections.abc module on python3</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id2\">\n<h2>0.1.10 / 2018-10-02</h2>\n<blockquote>\n<ul>\n<li>feat: add <tt>only</tt> operator #45</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h2>0.1.9 / 2018-06-02</h2>\n<blockquote>\n<ul>\n<li>fix(#42): Add string comparison parity for Python 2.7</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v0-1-8-2018-01-23\">\n<h2>v0.1.8 / 2018-01-23</h2>\n<blockquote>\n<ul>\n<li>Merge pull request #39 from dancingcactus/master</li>\n<li>Removes unused imports</li>\n<li>Allow partials to be used with raises operators</li>\n<li>fix(operator): minor type in exception message</li>\n<li>Merge pull request #38 from dancingcactus/master</li>\n<li>Updates the docs for Raises to encapsulate feedback from #37</li>\n<li>Update README.rst</li>\n<li>refactor(docs): remove codesponsor</li>\n<li>feat(docs): add sponsor ad</li>\n<li>feat(docs): update status note</li>\n<li>feat(docs): update status note</li>\n<li>Merge branch \u2018master\u2019 of <a href=\"https://github.com/grappa-py/grappa\" rel=\"nofollow\">https://github.com/grappa-py/grappa</a></li>\n<li>fix(docs): use proper organization name</li>\n<li>Update AUTHORS</li>\n<li>refactor(docs): import AUTHORS file</li>\n<li>feat: add AUTHORS file</li>\n<li>fix(setup.py): update package URL</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v0-1-7-2017-05-12\">\n<h2>v0.1.7 / 2017-05-12</h2>\n<blockquote>\n<ul>\n<li>feat(#33): show available operators on attribute error</li>\n<li>feat(#36): add allowed assertion attributes on error</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v0-1-6-2017-04-28\">\n<h2>v0.1.6 / 2017-04-28</h2>\n<ul>\n<li>fix(type): expose proper type value if a type value is the expected value</li>\n<li>fix(reporter): use search() instead of match() for line code matching. fix(reporters): escape underscore sequences</li>\n</ul>\n</div>\n<div id=\"v0-1-5-2017-04-28\">\n<h2>v0.1.5 / 2017-04-28</h2>\n<ul>\n<li>feat(reporters): add code reporter</li>\n<li>feat(operators): add \u201cthat_is\u201d, \u201cwhich_is\u201d attribute DSL operators</li>\n<li>refactor(reporter): match additional negation assertions</li>\n</ul>\n</div>\n<div id=\"v0-1-4-2017-04-27\">\n<h2>v0.1.4 / 2017-04-27</h2>\n<ul>\n<li>feat(reporters): match attribute expressions for proper code line reporting</li>\n<li>feat(equal): enable show_diff report in operator</li>\n<li>fix(index_test): bad file formatting</li>\n<li>refactor(index_test): add error test case</li>\n<li>refactor(index_test): remove commented code</li>\n<li>feat(docs): add context assertion example in tutorial</li>\n<li>feat(docs): add context manager example</li>\n<li>fix(docs): update error exception example</li>\n<li>refactor(docs): update showcase example</li>\n<li>feat(operators): add not_satisfy attribute operator</li>\n</ul>\n</div>\n<div id=\"v0-1-3-2017-03-29\">\n<h2>v0.1.3 / 2017-03-29</h2>\n<ul>\n<li>feat(docs): add raise exception examples</li>\n<li>refactor(docs): update showcase example</li>\n<li>feat(reporter): normalize value output in subject/expect sections</li>\n<li>feat(docs): update examples and FAQs. feat(operators): add aliases for start/end operator</li>\n<li>feat(docs): add link to grappa-http plugin</li>\n<li>refactor(docs): add operators type section</li>\n<li>refactor(docs): add beta status documentation notice</li>\n<li>feat(docs): update description</li>\n<li>refactor(docs): update status description</li>\n<li>feat(docs): update links</li>\n</ul>\n</div>\n<div id=\"v0-1-2-2017-03-26\">\n<h2>v0.1.2 / 2017-03-26</h2>\n<ul>\n<li>feat(docs): add matchers supported keyword arguments</li>\n<li>feat(docs): improve descriptions</li>\n<li>feat(operators): improve length operator for access based chaining</li>\n<li>fix(docs): update error custom message example</li>\n<li>feat(docs): improve documentation. adds operators composition section</li>\n<li>fix(setup.py): add author email</li>\n</ul>\n</div>\n<div id=\"v0-1-1-2017-03-23\">\n<h2>v0.1.1 / 2017-03-23</h2>\n<ul>\n<li>refactor(diff): process expected values as tuple first</li>\n<li>fix(contain): remove print statements</li>\n<li>refactor(core): normalize yielding syntax, add missing documentation</li>\n<li>refactor(core): normalize yielding syntax, add missing documentation</li>\n<li>feat(#26): support disable operator chaining</li>\n<li>feat(#28): better assertion reporting. feat(operators): add index operator</li>\n<li>refactor(reporter): support raw mode with proper indent pretty printing</li>\n<li>refactor(operators): add satisfy/satisfies attribute operators</li>\n<li>feat(diff): consume diff specific subject/expected values</li>\n<li>feat(operators): add is/is_not operator attributes</li>\n<li>refactor(core): isolate reporters per module</li>\n<li>feat(#13, #25): add suboperators support and diff output report</li>\n<li>refactor(docs): update organization name</li>\n<li>refactor(docs): update project image</li>\n<li>refactor(reporter): ignore subject/expected output if empty</li>\n<li>refactor(reporter): show diff if enabled</li>\n<li>feat(docs): add in a nutshell section</li>\n<li>feat(#24, #25): feature enhancements</li>\n<li>feat(docs): add say thanks badge</li>\n<li>refactor(reporter): load value from operator first</li>\n<li>fix(docs): use proper badges</li>\n<li>fix(docs): update type operator examples</li>\n<li>fix(metadata): update</li>\n<li>refactor(test): add chained test for keys</li>\n<li>feat(Makefile): add publish commands</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h2>0.1.0 (2017-03-05)</h2>\n<ul>\n<li>First version (beta)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6704122, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e0f66cff229c7687198c98c147bffd7e", "sha256": "4f9f829323a46fdd2108940d18762deecb83a8eb3eaacbed48bac48fec1be8d4"}, "downloads": -1, "filename": "grappa-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e0f66cff229c7687198c98c147bffd7e", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 50610, "upload_time": "2017-03-06T00:20:28", "upload_time_iso_8601": "2017-03-06T00:20:28.925956Z", "url": "https://files.pythonhosted.org/packages/7a/a1/bcbf6dccef21892112ae14790cba431b4ebe6f578301e388a84612223736/grappa-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b141aa1461dab923cf9271372de5872a", "sha256": "39df3b24ffb31de27ba31075c906629e7cb5d552142a819df075214be3647154"}, "downloads": -1, "filename": "grappa-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b141aa1461dab923cf9271372de5872a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29018, "upload_time": "2017-03-06T00:20:26", "upload_time_iso_8601": "2017-03-06T00:20:26.361057Z", "url": "https://files.pythonhosted.org/packages/f6/58/90549d95360973ca1a14a475495c6d0782ab56d8e3f63847f2fa3aec2194/grappa-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "42abc427893bc08203cf05cdf33ba729", "sha256": "cc4d8fd4485d2e84619e43eb95af4f1ed87bbd91143f0a7eef73c6df0bc7c401"}, "downloads": -1, "filename": "grappa-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42abc427893bc08203cf05cdf33ba729", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 60331, "upload_time": "2017-03-24T01:21:00", "upload_time_iso_8601": "2017-03-24T01:21:00.576316Z", "url": "https://files.pythonhosted.org/packages/0b/bb/7cd11d2db3d94ed6b2b3d60a9cfba631b59b347d793849f6f75234fb2e5f/grappa-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f80430a50b021b7fb7bb9f09afc48a09", "sha256": "b68682038eff9ed4c8e0a67d19fbd5eebb61a907d47413a0722565cbe85967c6"}, "downloads": -1, "filename": "grappa-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f80430a50b021b7fb7bb9f09afc48a09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33167, "upload_time": "2017-03-24T01:20:56", "upload_time_iso_8601": "2017-03-24T01:20:56.725472Z", "url": "https://files.pythonhosted.org/packages/e9/38/db2b5330723a5f909806cbdebefb5421244ea5533fd3751f2fa05b3d8c80/grappa-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "794861ac4e0582689a00c82402cb776f", "sha256": "9e9a98312ca4925f8134bb0c1ec3245e6635b10f3b74d047b9cf8569817fdccf"}, "downloads": -1, "filename": "grappa-0.1.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "794861ac4e0582689a00c82402cb776f", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 67087, "upload_time": "2018-10-02T10:30:25", "upload_time_iso_8601": "2018-10-02T10:30:25.032240Z", "url": "https://files.pythonhosted.org/packages/52/8f/b610c0a9800c9524cd847e869f5ecb8df8e4eed7c82e566ad0ac44a4f7e6/grappa-0.1.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c0b7608f7c4436c006ec7877194ab55", "sha256": "5618689d7a80c225f46f282366738964e397b8f3573497b855da8f6d1096b79d"}, "downloads": -1, "filename": "grappa-0.1.10.tar.gz", "has_sig": false, "md5_digest": "6c0b7608f7c4436c006ec7877194ab55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45208, "upload_time": "2018-10-02T10:30:21", "upload_time_iso_8601": "2018-10-02T10:30:21.337347Z", "url": "https://files.pythonhosted.org/packages/40/76/b17d1f64428b67bacc47161b07931a8225e884375b963af73ff85cdd73b7/grappa-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "d19bc58262256687fdabb2f777615714", "sha256": "20aa42d41ce680ddb4a6776b42691d8f4ebee6dc1550d34e829e559d4a64ac46"}, "downloads": -1, "filename": "grappa-0.1.11.tar.gz", "has_sig": false, "md5_digest": "d19bc58262256687fdabb2f777615714", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44692, "upload_time": "2020-02-26T15:06:00", "upload_time_iso_8601": "2020-02-26T15:06:00.652417Z", "url": "https://files.pythonhosted.org/packages/22/1b/82fb534506f5975ac6e47c48b0b51a622ef2b8f7b4821f2b9694619d250c/grappa-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "8ef7cca5ffb788e588dae6633741da94", "sha256": "6247f7063fff5a606e9f739b84d9027712f6dcda3e2cd42cbfd491413f1d6998"}, "downloads": -1, "filename": "grappa-0.1.12-py2-none-any.whl", "has_sig": false, "md5_digest": "8ef7cca5ffb788e588dae6633741da94", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 62272, "upload_time": "2020-02-26T15:05:58", "upload_time_iso_8601": "2020-02-26T15:05:58.677737Z", "url": "https://files.pythonhosted.org/packages/d7/62/80371b6e67db6b953cc075b5899ccfb290bfd3a39866ee417532e5309120/grappa-0.1.12-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48bf8158645bff5d96ff39f0a2440993", "sha256": "9303818f99fdca92ca4a9ba2654ce0510ae22dfb97672714fa963d351d3cd0cb"}, "downloads": -1, "filename": "grappa-0.1.12.tar.gz", "has_sig": false, "md5_digest": "48bf8158645bff5d96ff39f0a2440993", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45227, "upload_time": "2020-02-26T15:06:02", "upload_time_iso_8601": "2020-02-26T15:06:02.393078Z", "url": "https://files.pythonhosted.org/packages/ec/61/0028b83ceb04d16aee9a17d1dbc6b6be350d293f8c606191402d44db80ef/grappa-0.1.12.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3f2f211eb4fde327d9149053d0e9ff81", "sha256": "e16daf2f96bf9d21e24d02d57dea24b8f6190c3e12919968bd1b816e53f53b88"}, "downloads": -1, "filename": "grappa-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f2f211eb4fde327d9149053d0e9ff81", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 60896, "upload_time": "2017-03-26T22:43:31", "upload_time_iso_8601": "2017-03-26T22:43:31.580247Z", "url": "https://files.pythonhosted.org/packages/e2/20/fa33bda0200b3c592fb6f92e59d2c80e55dd64f8dc8260bc189fa60fa1b3/grappa-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3d97859257f2da6f4b55938e9f227e6", "sha256": "d5619e66b4cb1a750dd7cfa76ff30b7a5e3e1116f2e8d78e317b1b88dd493823"}, "downloads": -1, "filename": "grappa-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b3d97859257f2da6f4b55938e9f227e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33613, "upload_time": "2017-03-26T22:43:26", "upload_time_iso_8601": "2017-03-26T22:43:26.174127Z", "url": "https://files.pythonhosted.org/packages/a2/ee/0e5fde42a98a0c8ff5d09cdaf9c24fbd0bcda0a2d12f83d08dc6ff2a7ddc/grappa-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "704da69b0fcd4555c5b09f4af19acf3e", "sha256": "fbc73a4ab0ea3942b56dc763ddf7512065d2d275e3a540d25ce5c36cf1219c0f"}, "downloads": -1, "filename": "grappa-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "704da69b0fcd4555c5b09f4af19acf3e", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 63485, "upload_time": "2017-03-29T07:42:24", "upload_time_iso_8601": "2017-03-29T07:42:24.628047Z", "url": "https://files.pythonhosted.org/packages/df/cd/94e25c9a38d8464cf3bcc8038a661e3c0f5dd86a3cbb9f3f114763281453/grappa-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a3989d0ec76d01c482054dcb7e3f265", "sha256": "f5a025793c429c64b11337d69cf4d2ff65153131174034f00ab48f3c246e9f25"}, "downloads": -1, "filename": "grappa-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1a3989d0ec76d01c482054dcb7e3f265", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35138, "upload_time": "2017-03-29T07:42:19", "upload_time_iso_8601": "2017-03-29T07:42:19.247157Z", "url": "https://files.pythonhosted.org/packages/94/6c/3c6e0a7372f960472c3c2026576c171c1533edcb5eac87cfc5752ea737ae/grappa-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "543c6e67d5bacab3800e33928a508102", "sha256": "cffd04dc418889e80e1edaf7bcf0050a80ab086ae47d5bff15f3f2bca0f879f6"}, "downloads": -1, "filename": "grappa-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "543c6e67d5bacab3800e33928a508102", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 63829, "upload_time": "2017-04-27T21:38:35", "upload_time_iso_8601": "2017-04-27T21:38:35.910367Z", "url": "https://files.pythonhosted.org/packages/d1/90/4e9160d0eb841b615a2832f5b1b2ccfc8d9aecb19e7c007bc0829b1cd340/grappa-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "070db3da9d825c6f10e6c0eff1e68bf0", "sha256": "2d44e070ba1c08b1e2fcb563838f68745a646277471aa205ed230117671dd468"}, "downloads": -1, "filename": "grappa-0.1.4.tar.gz", "has_sig": false, "md5_digest": "070db3da9d825c6f10e6c0eff1e68bf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35485, "upload_time": "2017-04-27T21:38:30", "upload_time_iso_8601": "2017-04-27T21:38:30.351455Z", "url": "https://files.pythonhosted.org/packages/c8/98/f39ca13c21648c467d2cef7c46871e06507007197683e2221aa33844bae3/grappa-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "f4bc2a3f1e5543c5fa1f9f8e918a93c2", "sha256": "13f13af3514bfc79f1cd6e158c11e5068aac46c4c2e7eecd81ab723ff0efddfb"}, "downloads": -1, "filename": "grappa-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f4bc2a3f1e5543c5fa1f9f8e918a93c2", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 63976, "upload_time": "2017-04-28T12:09:57", "upload_time_iso_8601": "2017-04-28T12:09:57.433281Z", "url": "https://files.pythonhosted.org/packages/6e/99/5b08ca7cb904ece9cb0d412a13b32c497fec4be75ad416a27ee5880c8765/grappa-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46a0e449885cb55b84001060db6df527", "sha256": "46e04aa6c03654426521dde8bcf6929cbb07cd4ab662fcabe1fb115b1df0a546"}, "downloads": -1, "filename": "grappa-0.1.5.tar.gz", "has_sig": false, "md5_digest": "46a0e449885cb55b84001060db6df527", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35592, "upload_time": "2017-04-28T12:09:52", "upload_time_iso_8601": "2017-04-28T12:09:52.439398Z", "url": "https://files.pythonhosted.org/packages/d3/d2/9ff202a50efbf3e4183e9ca175d17a0f351230a9d593e96b51c3ad971515/grappa-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "6d65d348cd115e4144338dac25b8d5a4", "sha256": "a7bc8567ba0ec4a6dcbd1368beb225d83afda0a43702f4b0513eb53ad2e7fc28"}, "downloads": -1, "filename": "grappa-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d65d348cd115e4144338dac25b8d5a4", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 64149, "upload_time": "2017-04-28T13:33:55", "upload_time_iso_8601": "2017-04-28T13:33:55.023660Z", "url": "https://files.pythonhosted.org/packages/83/44/1801f818dc46e950c68184ce5d2b73dd3c0bc03995c9498b33307ab3aa5d/grappa-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4252f434da12aaf6b55f0bfa10e9fa66", "sha256": "3b4b4b287060e0685343a437d8c3e115d571f240523ec17a61bc4a49d14d1500"}, "downloads": -1, "filename": "grappa-0.1.6.tar.gz", "has_sig": false, "md5_digest": "4252f434da12aaf6b55f0bfa10e9fa66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35693, "upload_time": "2017-04-28T13:33:50", "upload_time_iso_8601": "2017-04-28T13:33:50.148893Z", "url": "https://files.pythonhosted.org/packages/cc/06/a0c49bf14be81bc40cecda8b54d7af304331285f0fd93430471fac57a6c4/grappa-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "976f1f4da4c9bf88810d852a5d566eb8", "sha256": "4be5e9085b1f9dc5712f99fa2cc5e239809589f6ad8b2c1059654754ddf8bff7"}, "downloads": -1, "filename": "grappa-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "976f1f4da4c9bf88810d852a5d566eb8", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 64733, "upload_time": "2017-05-12T10:04:49", "upload_time_iso_8601": "2017-05-12T10:04:49.661516Z", "url": "https://files.pythonhosted.org/packages/88/17/f4d5c8113b38f9fb4af476f9c1b926d40a352f0fa7efcef91a102f85e591/grappa-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "184e80a801043d6cdbd11183c2096ae4", "sha256": "c497f4123c871c3c160f3d55bb7f372691c9680da44b4406dde2309bb76903c3"}, "downloads": -1, "filename": "grappa-0.1.7.tar.gz", "has_sig": false, "md5_digest": "184e80a801043d6cdbd11183c2096ae4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36150, "upload_time": "2017-05-12T10:04:45", "upload_time_iso_8601": "2017-05-12T10:04:45.709987Z", "url": "https://files.pythonhosted.org/packages/b2/09/9e3b926085996bb2a3b6de4f8c403dab364e4a1298289186d782c4998573/grappa-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "73cc9c63ef19a38ded91fb1059f8dba4", "sha256": "56b64d4f32ad1bfcf22c243a252eb533d08698569198eabf6f5dedeb37ba8a5a"}, "downloads": -1, "filename": "grappa-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "73cc9c63ef19a38ded91fb1059f8dba4", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 65373, "upload_time": "2018-01-23T16:38:15", "upload_time_iso_8601": "2018-01-23T16:38:15.588669Z", "url": "https://files.pythonhosted.org/packages/17/c7/f06d7aae87645151ebfdee9d5b1c70d208f77332f163229220d856dbc2fc/grappa-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24ec6656dda2441c004b989c978948aa", "sha256": "ae19ac546f401237943bf925381a34f7fe7461d9b1fb750884db39c112c9ce9b"}, "downloads": -1, "filename": "grappa-0.1.8.tar.gz", "has_sig": false, "md5_digest": "24ec6656dda2441c004b989c978948aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44228, "upload_time": "2018-01-23T16:38:11", "upload_time_iso_8601": "2018-01-23T16:38:11.133636Z", "url": "https://files.pythonhosted.org/packages/35/d0/30a4c51cbb2caf1cf27fdef40f6d7958ced40adb0c3897a4927ed6fef514/grappa-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "ec561e2a5e9bac1644bebda2cf4b6925", "sha256": "7121c7a339b7ea72e285c508d4d7b601e71f3e2029ec205434f2fa9b71bc115b"}, "downloads": -1, "filename": "grappa-0.1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ec561e2a5e9bac1644bebda2cf4b6925", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 65531, "upload_time": "2018-06-02T11:30:45", "upload_time_iso_8601": "2018-06-02T11:30:45.065053Z", "url": "https://files.pythonhosted.org/packages/ec/43/25dabe1aae72703e463e9909d9fdb85e60769e1c8a908158cfbb52f893fc/grappa-0.1.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8690e7f2c5e30c900c23f40f12180f98", "sha256": "38c90ec8443e5666f092d65291fc43e80f81418af16fc42604b22ecb3b63f65a"}, "downloads": -1, "filename": "grappa-0.1.9.tar.gz", "has_sig": false, "md5_digest": "8690e7f2c5e30c900c23f40f12180f98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44350, "upload_time": "2018-06-02T11:30:40", "upload_time_iso_8601": "2018-06-02T11:30:40.791420Z", "url": "https://files.pythonhosted.org/packages/0a/9f/5c6c6a10964d79fd4b41332350b4c5ec73ed893e3fdb689b0b5f85fee17c/grappa-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ef7cca5ffb788e588dae6633741da94", "sha256": "6247f7063fff5a606e9f739b84d9027712f6dcda3e2cd42cbfd491413f1d6998"}, "downloads": -1, "filename": "grappa-0.1.12-py2-none-any.whl", "has_sig": false, "md5_digest": "8ef7cca5ffb788e588dae6633741da94", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 62272, "upload_time": "2020-02-26T15:05:58", "upload_time_iso_8601": "2020-02-26T15:05:58.677737Z", "url": "https://files.pythonhosted.org/packages/d7/62/80371b6e67db6b953cc075b5899ccfb290bfd3a39866ee417532e5309120/grappa-0.1.12-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48bf8158645bff5d96ff39f0a2440993", "sha256": "9303818f99fdca92ca4a9ba2654ce0510ae22dfb97672714fa963d351d3cd0cb"}, "downloads": -1, "filename": "grappa-0.1.12.tar.gz", "has_sig": false, "md5_digest": "48bf8158645bff5d96ff39f0a2440993", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45227, "upload_time": "2020-02-26T15:06:02", "upload_time_iso_8601": "2020-02-26T15:06:02.393078Z", "url": "https://files.pythonhosted.org/packages/ec/61/0028b83ceb04d16aee9a17d1dbc6b6be350d293f8c606191402d44db80ef/grappa-0.1.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:27 2020"}