{"info": {"author": "Stephan Traub", "author_email": "sbidy@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "![Upload Python Package](https://github.com/sbidy/pywizlight/workflows/Upload%20Python%20Package/badge.svg)\n\n# pywizlight\nA python connector for WiZ light bulbs.\n\nTested with the following smart lights:\n\n* [Original Phillips Wiz WiFi LEDs](https://www.lighting.philips.co.in/consumer/smart-wifi-led)\n* [SLV Play RGB bulb](https://www.amazon.de/dp/B07PNCDJLW)\n\n## Kudos\nThank you [@angadsingh](https://github.com/angadsingh) for make such incredible improvements!!\n\n## Example\n```python\n    from pywizlight.bulb import wizlight, PilotBuilder\n    # create/get the current thread's asyncio loop\n    loop = asyncio.get_event_loop()\n    # setup a standard light\n    light = wizlight(\"<your bulb ip\")\n    # setup the light with a custom port\n    light = wizlight(\"<your bulb ip\",12345)\n\n    #the following calls need to be done inside an asyncio coroutine\n    #to run them fron normal synchronous code, you can wrap them with asyncio.run(..)\n    #see test.py for examples\n\n     # turn on the light into \"rhythm mode\"\n    await light.turn_on(PilotBuilder())\n    # set bulb brightness\n    await light.turn_on(PilotBuilder(brightness = 255)\n\n    # set bulb brightness (with async timeout)\n    timeout_secs=10\n    await asyncio.wait_for(light.turn_on(PilotBuilder(brightness = 255)), wait_secs)\n\n    # set bulb to warm white\n    await light.turn_on(PilotBuilder(warm_white = 255)\n\n    # set rbb values\n    # red to 0 = 0%, green to 128 = 50%, blue to 255 = 100%\n    await light.turn_on(PilotBuilder(rgb = (0, 128, 255))\n\n    # get the current color temperature, rgb values\n    state = await light.updateState()\n    print(state.get_colortemp())\n    r, g, b = state.get_rgb()\n    print(\"red %i green %i blue %i\" % (r, g, b))\n\n    # start a scene \n    await light.turn_on(PilotBuilder(scene = 14)) # party\n\n    # get the name of the current scene\n    state = await light.updateState()\n    print(state.get_scene())\n\n    # turns the light off\n    await light.turn_off()\n\n    # do operations on multiple lights parallely\n    bulb1 = wizlight(\"<your bulb1 ip>\")\n    bulb2 = wizlight(\"<your bulb2 ip>\")\n    await asyncio.gather(bulb1.turn_on(PilotBuilder(brightness = 255),\n        bulb2.turn_on(PilotBuilder(warm_white = 255), loop = loop)\n\n```\n\n## Bulb paramters (UDP RAW):\n- **sceneId** - calls one of thr predefined scenes (int from 0 to 32) [Wiki](https://github.com/sbidy/pywizlight/wiki/Light-Scenes)\n- **speed** - sets the color changing speed in percent\n- **dimming** - sets the dimmer of the bulb in percent\n- **temp** - sets color temperature in kelvins\n- **r** - red color range 0-255\n- **g** - green color range 0-255\n- **b** - blue color range 0-255\n- **c** - cold white range 0-255\n- **w** - warm white range 0-255\n- **id** - the bulb id\n- **state** - when it's on or off\n- **schdPsetId** - rhythm id of the room\n\n## Async I/O\nFor async I/O this component uses https://github.com/jsbronder/asyncio-dgram, which internally uses asyncio DatagramTransport, which allows completely non-blocking UDP transport\n\n## Classes\n\n`wizlight(ip)` Creates a instance of a WiZ Light Bulb. Constructor with ip of the bulb\n\n### Instance variables\n\nYou need to first fetch the state by calling `light.updateState()`\nAfter that all state can be fetched from `light.state`, which is a `PilotParser` object\n\n`PilotParser.get_brightness()`gets the value of the brightness 0-255\n\n`PilotParser.get_rgb()` get the rgbW color state of the bulb\n\n`PilotParser.get_colortemp()` get the color temperature ot the bulb\n\n`PilotParser.get_warm_white/get_cold_white()` get the current warm/cold setting (not supported by original Phillips Wiz bulbs)\n\n`PilotParser.get_scene()` gets the current scene name\n\n`PilotParser.get_state()` returns true or false / true = on , false = off\n\n### Methods\n`getBulbConfig(self)` returns the hardware configuration of the bulb\n\n`updateState(self)` gets the current bulb state from the light using `sendUDPMessage` and sets it to `self.state`\n\n`lightSwitch(self)` turns the light bulb on or off like a switch\n\n`sendUDPMessage(self, message, timeout = 60, send_interval = 0.5, max_send_datagrams = 100):` sends the udp message to the bulb. Since UDP can loose packets, and your light might be a long distance away from the router, we continuously keep sending the UDP command datagram until there is a response from the light. This has in tests worked way better than just sending once and just waiting for a timeout. You can set the async operation timeout using `timeout`, the time interval to sleep between continuous UDP sends using `send_interval` and the maximum number of continuous pings to send using `max_send_datagrams`. It is already hard coded to a lower value for `setPilot` (set light state) vs `getPilot` (fetch light state) so as to avoid flickering the light.\n\n`turn_off(self)` turns the light off\n\n`turn_on(PilotBuilder)` turns the light on. This take a `PilotBuilder` object, which can be used to set all the parameters programmatically - rgb, color temperature, brightness, etc. To set the light to rhythm mode, create an empty `PilotBuilder`.\n\n## Bulb methods (UDP native):\n- **getSystemConfig** - gets the current system configuration - no parameters need\n- **syncPilot** - sent by the bulb as heart-beats\n- **getPilot** - gets the current bulb state - no parameters need to be included\n- **setPilot** - used to tell the bulb to change color/temp/state\n- **Pulse** - uncertain of purpose\n- **Registration** - used to \"register\" with the bulb: This notifies the built that\n                            it you want it to send you heartbeat sync packets.\n\n## Example UDP requests\nSend message to the bulb:\n    `{\"method\":\"setPilot\",\"params\":{\"r\":255,\"g\":255,\"b\":255,\"dimming\":50}}`\nResponse: `{\"method\":\"setPilot\",\"env\":\"pro\",\"result\":{\"success\":true}}`\n\nGet state of the bulb:\n    `{\"method\":\"getPilot\",\"params\":{}}`\nResponses:\n\ncustom color mode:\n\n`{'method': 'getPilot', 'env': 'pro', 'result': {'mac': 'a8bb50a4f94d', 'rssi': -60, 'src': '', 'state': True, 'sceneId': 0, 'temp': 5075, 'dimming': 47}}`\n\nscene mode:\n\n`{'method': 'getPilot', 'env': 'pro', 'result': {'mac': 'a8bb50a4f94d', 'rssi': -65, 'src': '', 'state': True, 'sceneId': 12, 'speed': 100, 'temp': 4200, 'dimming': 47}}`\n\nrhythm mode:\n\n`{'method': 'getPilot', 'env': 'pro', 'result': {'mac': 'a8bb50a4f94d', 'rssi': -63, 'src': '', 'state': True, 'sceneId': 14, 'speed': 100, 'dimming': 100, 'schdPsetId': 9}}`\n\n## Contributors\n\n* [@sbidy](http://github.com/sbidy) for the entire python library from scratch with complete light control\n* [@angadsingh](http://github.com/angadsingh) for implementing asyncio and non-blocking UDP, rhythm support, performance optimizations\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sbidy/pywizlight", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pywizlight", "package_url": "https://pypi.org/project/pywizlight/", "platform": "", "project_url": "https://pypi.org/project/pywizlight/", "project_urls": {"Homepage": "https://github.com/sbidy/pywizlight"}, "release_url": "https://pypi.org/project/pywizlight/0.3.2/", "requires_dist": ["asyncio", "asyncio-dgram"], "requires_python": "", "summary": "A python connector for WiZ light bulbs (e.g SLV Play)", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Upload Python Package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61f1edde569f935ae012faf358ae2b0c2751cb96/68747470733a2f2f6769746875622e636f6d2f73626964792f707977697a6c696768742f776f726b666c6f77732f55706c6f6164253230507974686f6e2532305061636b6167652f62616467652e737667\"></p>\n<h1>pywizlight</h1>\n<p>A python connector for WiZ light bulbs.</p>\n<p>Tested with the following smart lights:</p>\n<ul>\n<li><a href=\"https://www.lighting.philips.co.in/consumer/smart-wifi-led\" rel=\"nofollow\">Original Phillips Wiz WiFi LEDs</a></li>\n<li><a href=\"https://www.amazon.de/dp/B07PNCDJLW\" rel=\"nofollow\">SLV Play RGB bulb</a></li>\n</ul>\n<h2>Kudos</h2>\n<p>Thank you <a href=\"https://github.com/angadsingh\" rel=\"nofollow\">@angadsingh</a> for make such incredible improvements!!</p>\n<h2>Example</h2>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">pywizlight.bulb</span> <span class=\"kn\">import</span> <span class=\"n\">wizlight</span><span class=\"p\">,</span> <span class=\"n\">PilotBuilder</span>\n    <span class=\"c1\"># create/get the current thread's asyncio loop</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"c1\"># setup a standard light</span>\n    <span class=\"n\">light</span> <span class=\"o\">=</span> <span class=\"n\">wizlight</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;your bulb ip\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># setup the light with a custom port</span>\n    <span class=\"n\">light</span> <span class=\"o\">=</span> <span class=\"n\">wizlight</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;your bulb ip\"</span><span class=\"p\">,</span><span class=\"mi\">12345</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#the following calls need to be done inside an asyncio coroutine</span>\n    <span class=\"c1\">#to run them fron normal synchronous code, you can wrap them with asyncio.run(..)</span>\n    <span class=\"c1\">#see test.py for examples</span>\n\n     <span class=\"c1\"># turn on the light into \"rhythm mode\"</span>\n    <span class=\"k\">await</span> <span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">turn_on</span><span class=\"p\">(</span><span class=\"n\">PilotBuilder</span><span class=\"p\">())</span>\n    <span class=\"c1\"># set bulb brightness</span>\n    <span class=\"k\">await</span> <span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">turn_on</span><span class=\"p\">(</span><span class=\"n\">PilotBuilder</span><span class=\"p\">(</span><span class=\"n\">brightness</span> <span class=\"o\">=</span> <span class=\"mi\">255</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># set bulb brightness (with async timeout)</span>\n    <span class=\"n\">timeout_secs</span><span class=\"o\">=</span><span class=\"mi\">10</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">wait_for</span><span class=\"p\">(</span><span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">turn_on</span><span class=\"p\">(</span><span class=\"n\">PilotBuilder</span><span class=\"p\">(</span><span class=\"n\">brightness</span> <span class=\"o\">=</span> <span class=\"mi\">255</span><span class=\"p\">)),</span> <span class=\"n\">wait_secs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># set bulb to warm white</span>\n    <span class=\"k\">await</span> <span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">turn_on</span><span class=\"p\">(</span><span class=\"n\">PilotBuilder</span><span class=\"p\">(</span><span class=\"n\">warm_white</span> <span class=\"o\">=</span> <span class=\"mi\">255</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># set rbb values</span>\n    <span class=\"c1\"># red to 0 = 0%, green to 128 = 50%, blue to 255 = 100%</span>\n    <span class=\"k\">await</span> <span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">turn_on</span><span class=\"p\">(</span><span class=\"n\">PilotBuilder</span><span class=\"p\">(</span><span class=\"n\">rgb</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># get the current color temperature, rgb values</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">updateState</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">get_colortemp</span><span class=\"p\">())</span>\n    <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">get_rgb</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"red </span><span class=\"si\">%i</span><span class=\"s2\"> green </span><span class=\"si\">%i</span><span class=\"s2\"> blue </span><span class=\"si\">%i</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># start a scene </span>\n    <span class=\"k\">await</span> <span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">turn_on</span><span class=\"p\">(</span><span class=\"n\">PilotBuilder</span><span class=\"p\">(</span><span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"mi\">14</span><span class=\"p\">))</span> <span class=\"c1\"># party</span>\n\n    <span class=\"c1\"># get the name of the current scene</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">updateState</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">get_scene</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># turns the light off</span>\n    <span class=\"k\">await</span> <span class=\"n\">light</span><span class=\"o\">.</span><span class=\"n\">turn_off</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># do operations on multiple lights parallely</span>\n    <span class=\"n\">bulb1</span> <span class=\"o\">=</span> <span class=\"n\">wizlight</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;your bulb1 ip&gt;\"</span><span class=\"p\">)</span>\n    <span class=\"n\">bulb2</span> <span class=\"o\">=</span> <span class=\"n\">wizlight</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;your bulb2 ip&gt;\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"n\">bulb1</span><span class=\"o\">.</span><span class=\"n\">turn_on</span><span class=\"p\">(</span><span class=\"n\">PilotBuilder</span><span class=\"p\">(</span><span class=\"n\">brightness</span> <span class=\"o\">=</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n        <span class=\"n\">bulb2</span><span class=\"o\">.</span><span class=\"n\">turn_on</span><span class=\"p\">(</span><span class=\"n\">PilotBuilder</span><span class=\"p\">(</span><span class=\"n\">warm_white</span> <span class=\"o\">=</span> <span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">loop</span><span class=\"p\">)</span>\n</pre>\n<h2>Bulb paramters (UDP RAW):</h2>\n<ul>\n<li><strong>sceneId</strong> - calls one of thr predefined scenes (int from 0 to 32) <a href=\"https://github.com/sbidy/pywizlight/wiki/Light-Scenes\" rel=\"nofollow\">Wiki</a></li>\n<li><strong>speed</strong> - sets the color changing speed in percent</li>\n<li><strong>dimming</strong> - sets the dimmer of the bulb in percent</li>\n<li><strong>temp</strong> - sets color temperature in kelvins</li>\n<li><strong>r</strong> - red color range 0-255</li>\n<li><strong>g</strong> - green color range 0-255</li>\n<li><strong>b</strong> - blue color range 0-255</li>\n<li><strong>c</strong> - cold white range 0-255</li>\n<li><strong>w</strong> - warm white range 0-255</li>\n<li><strong>id</strong> - the bulb id</li>\n<li><strong>state</strong> - when it's on or off</li>\n<li><strong>schdPsetId</strong> - rhythm id of the room</li>\n</ul>\n<h2>Async I/O</h2>\n<p>For async I/O this component uses <a href=\"https://github.com/jsbronder/asyncio-dgram\" rel=\"nofollow\">https://github.com/jsbronder/asyncio-dgram</a>, which internally uses asyncio DatagramTransport, which allows completely non-blocking UDP transport</p>\n<h2>Classes</h2>\n<p><code>wizlight(ip)</code> Creates a instance of a WiZ Light Bulb. Constructor with ip of the bulb</p>\n<h3>Instance variables</h3>\n<p>You need to first fetch the state by calling <code>light.updateState()</code>\nAfter that all state can be fetched from <code>light.state</code>, which is a <code>PilotParser</code> object</p>\n<p><code>PilotParser.get_brightness()</code>gets the value of the brightness 0-255</p>\n<p><code>PilotParser.get_rgb()</code> get the rgbW color state of the bulb</p>\n<p><code>PilotParser.get_colortemp()</code> get the color temperature ot the bulb</p>\n<p><code>PilotParser.get_warm_white/get_cold_white()</code> get the current warm/cold setting (not supported by original Phillips Wiz bulbs)</p>\n<p><code>PilotParser.get_scene()</code> gets the current scene name</p>\n<p><code>PilotParser.get_state()</code> returns true or false / true = on , false = off</p>\n<h3>Methods</h3>\n<p><code>getBulbConfig(self)</code> returns the hardware configuration of the bulb</p>\n<p><code>updateState(self)</code> gets the current bulb state from the light using <code>sendUDPMessage</code> and sets it to <code>self.state</code></p>\n<p><code>lightSwitch(self)</code> turns the light bulb on or off like a switch</p>\n<p><code>sendUDPMessage(self, message, timeout = 60, send_interval = 0.5, max_send_datagrams = 100):</code> sends the udp message to the bulb. Since UDP can loose packets, and your light might be a long distance away from the router, we continuously keep sending the UDP command datagram until there is a response from the light. This has in tests worked way better than just sending once and just waiting for a timeout. You can set the async operation timeout using <code>timeout</code>, the time interval to sleep between continuous UDP sends using <code>send_interval</code> and the maximum number of continuous pings to send using <code>max_send_datagrams</code>. It is already hard coded to a lower value for <code>setPilot</code> (set light state) vs <code>getPilot</code> (fetch light state) so as to avoid flickering the light.</p>\n<p><code>turn_off(self)</code> turns the light off</p>\n<p><code>turn_on(PilotBuilder)</code> turns the light on. This take a <code>PilotBuilder</code> object, which can be used to set all the parameters programmatically - rgb, color temperature, brightness, etc. To set the light to rhythm mode, create an empty <code>PilotBuilder</code>.</p>\n<h2>Bulb methods (UDP native):</h2>\n<ul>\n<li><strong>getSystemConfig</strong> - gets the current system configuration - no parameters need</li>\n<li><strong>syncPilot</strong> - sent by the bulb as heart-beats</li>\n<li><strong>getPilot</strong> - gets the current bulb state - no parameters need to be included</li>\n<li><strong>setPilot</strong> - used to tell the bulb to change color/temp/state</li>\n<li><strong>Pulse</strong> - uncertain of purpose</li>\n<li><strong>Registration</strong> - used to \"register\" with the bulb: This notifies the built that\nit you want it to send you heartbeat sync packets.</li>\n</ul>\n<h2>Example UDP requests</h2>\n<p>Send message to the bulb:\n<code>{\"method\":\"setPilot\",\"params\":{\"r\":255,\"g\":255,\"b\":255,\"dimming\":50}}</code>\nResponse: <code>{\"method\":\"setPilot\",\"env\":\"pro\",\"result\":{\"success\":true}}</code></p>\n<p>Get state of the bulb:\n<code>{\"method\":\"getPilot\",\"params\":{}}</code>\nResponses:</p>\n<p>custom color mode:</p>\n<p><code>{'method': 'getPilot', 'env': 'pro', 'result': {'mac': 'a8bb50a4f94d', 'rssi': -60, 'src': '', 'state': True, 'sceneId': 0, 'temp': 5075, 'dimming': 47}}</code></p>\n<p>scene mode:</p>\n<p><code>{'method': 'getPilot', 'env': 'pro', 'result': {'mac': 'a8bb50a4f94d', 'rssi': -65, 'src': '', 'state': True, 'sceneId': 12, 'speed': 100, 'temp': 4200, 'dimming': 47}}</code></p>\n<p>rhythm mode:</p>\n<p><code>{'method': 'getPilot', 'env': 'pro', 'result': {'mac': 'a8bb50a4f94d', 'rssi': -63, 'src': '', 'state': True, 'sceneId': 14, 'speed': 100, 'dimming': 100, 'schdPsetId': 9}}</code></p>\n<h2>Contributors</h2>\n<ul>\n<li><a href=\"http://github.com/sbidy\" rel=\"nofollow\">@sbidy</a> for the entire python library from scratch with complete light control</li>\n<li><a href=\"http://github.com/angadsingh\" rel=\"nofollow\">@angadsingh</a> for implementing asyncio and non-blocking UDP, rhythm support, performance optimizations</li>\n</ul>\n\n          </div>"}, "last_serial": 7156012, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "b446c435eeab9f6e6d3477444d55f66b", "sha256": "3ae37fc886b4dccfc475d639e4087236dc70a0ac1dadd56c83b2e0772b3c00c2"}, "downloads": -1, "filename": "pywizlight-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b446c435eeab9f6e6d3477444d55f66b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7146, "upload_time": "2020-02-19T21:34:56", "upload_time_iso_8601": "2020-02-19T21:34:56.091404Z", "url": "https://files.pythonhosted.org/packages/46/1f/8824e164719b8f277fff4cff0554d2efbd11c5563eb589800dcd9c17955b/pywizlight-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "361ad6c1b916c4ea7348ff9ac6a4b54e", "sha256": "21c883bf07e4a69a50e87fa9ed7675254a61b972b891072095fbf5f3d3ed10da"}, "downloads": -1, "filename": "pywizlight-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "361ad6c1b916c4ea7348ff9ac6a4b54e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7291, "upload_time": "2020-02-19T23:07:03", "upload_time_iso_8601": "2020-02-19T23:07:03.299698Z", "url": "https://files.pythonhosted.org/packages/63/69/8b4c80e8f11d58515a510d4f23b35e4737465b9aad90e2ebc9f8ad97afe5/pywizlight-0.2.2-py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "0556afc7d875694d31e2d8e1993212f6", "sha256": "5b1c8c77e1eb81b1475ef4b42bedee02dc5f483d89109da9a73e2a89531b0ca3"}, "downloads": -1, "filename": "pywizlight-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0556afc7d875694d31e2d8e1993212f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8103, "upload_time": "2020-02-22T14:31:22", "upload_time_iso_8601": "2020-02-22T14:31:22.589199Z", "url": "https://files.pythonhosted.org/packages/fe/2c/cfdf71295a3dd7146f63c926a3ef0416c434c130259a6af2bcf7f3c0904b/pywizlight-0.2.3-py3-none-any.whl", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "8e3c0c45f039337bee9738f20934b0f6", "sha256": "a1b0de7e6fc01cb79a422fea24d5c206306be1880685c61985753731d9ed0eed"}, "downloads": -1, "filename": "pywizlight-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8e3c0c45f039337bee9738f20934b0f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11184, "upload_time": "2020-02-22T15:31:12", "upload_time_iso_8601": "2020-02-22T15:31:12.485859Z", "url": "https://files.pythonhosted.org/packages/b9/ae/b6d088a978d97c816d066b4e21ed249cdc11339884c38f18950988076b37/pywizlight-0.2.4-py3-none-any.whl", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "7a8a86f36756520133b92199c5a4d3db", "sha256": "d5be3fbf166815346eb71984117de93e2e8c37c9be9f2f33373a0c257f0fceca"}, "downloads": -1, "filename": "pywizlight-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "7a8a86f36756520133b92199c5a4d3db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11198, "upload_time": "2020-02-22T16:14:01", "upload_time_iso_8601": "2020-02-22T16:14:01.995644Z", "url": "https://files.pythonhosted.org/packages/33/34/4dd918cdf9a8435a858717a65395950831454ba98a6f19c8b5df8dd71563/pywizlight-0.2.5-py3-none-any.whl", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "2b75857454b0d281239d4e3809134017", "sha256": "97b31f4f478b323cd7319bd2795df569d75c469400e68ad8215991eaf4f825d9"}, "downloads": -1, "filename": "pywizlight-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "2b75857454b0d281239d4e3809134017", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6703, "upload_time": "2020-03-16T17:35:48", "upload_time_iso_8601": "2020-03-16T17:35:48.238654Z", "url": "https://files.pythonhosted.org/packages/5f/c1/9ac2281b2e866349620b816f1fda91340bbb5df0dabcf80f8c365b77a3bb/pywizlight-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbba84796f8e15f08d8d98288a72616d", "sha256": "b03022239392f75080d439ebf7a7ffb03aa6305f297462fa8df2b391f2f9f125"}, "downloads": -1, "filename": "pywizlight-0.2.6.tar.gz", "has_sig": false, "md5_digest": "cbba84796f8e15f08d8d98288a72616d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5595, "upload_time": "2020-03-16T17:35:49", "upload_time_iso_8601": "2020-03-16T17:35:49.246838Z", "url": "https://files.pythonhosted.org/packages/06/9f/d51aaafa47651cbc2b63a8199757c66c5219f6ac5701ebb6758a92b2fdc2/pywizlight-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "dd1ed60ef49114c8b82ea5d8999a95c1", "sha256": "cc25bb8b8ca4f23b89a2728e7eefe7efd5cd26b224ee2c7919fbdd610957e935"}, "downloads": -1, "filename": "pywizlight-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "dd1ed60ef49114c8b82ea5d8999a95c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8787, "upload_time": "2020-03-18T15:03:21", "upload_time_iso_8601": "2020-03-18T15:03:21.980943Z", "url": "https://files.pythonhosted.org/packages/be/ed/53fc03cc2fe647be6c626d2e40ba062c9ea31803e168bd54962f95fb7f2c/pywizlight-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71453b1afe2cc48f8fa63b6907a6ad3e", "sha256": "f2777eb1c46c06f3b0b769ce5234fb2d273044ace4662e1c4711a19cd41d3d84"}, "downloads": -1, "filename": "pywizlight-0.2.7.tar.gz", "has_sig": false, "md5_digest": "71453b1afe2cc48f8fa63b6907a6ad3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8483, "upload_time": "2020-03-18T15:03:24", "upload_time_iso_8601": "2020-03-18T15:03:24.029380Z", "url": "https://files.pythonhosted.org/packages/16/bd/481a538bd4b2599c7957185d00fa71d4aa04df777ade3fd7fdd23ffa777d/pywizlight-0.2.7.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "2624cb5dd66f4a685d6665c8d89f57f2", "sha256": "a1ab6d2b4fd9578130e47d3470c2f459ddb4fcdc3019e96247f05945c47c0aa7"}, "downloads": -1, "filename": "pywizlight-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2624cb5dd66f4a685d6665c8d89f57f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8839, "upload_time": "2020-03-18T19:14:49", "upload_time_iso_8601": "2020-03-18T19:14:49.904030Z", "url": "https://files.pythonhosted.org/packages/16/f6/0f45a6b13e91aa7f11797d25132e3d012dbff59429ef3149c9e4b0d22e68/pywizlight-0.2.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a878d97110fe1210d02b25ed58cfadc0", "sha256": "ba98539da36090b131d339b771f8ecdd83640a28cb7acb5c39ec9802c70dd64c"}, "downloads": -1, "filename": "pywizlight-0.2.9.tar.gz", "has_sig": false, "md5_digest": "a878d97110fe1210d02b25ed58cfadc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8716, "upload_time": "2020-03-18T19:14:51", "upload_time_iso_8601": "2020-03-18T19:14:51.001402Z", "url": "https://files.pythonhosted.org/packages/44/00/4623acb2353ec37efbc95dd7e5b97f323b647e8d2bae48aa306dfd470c41/pywizlight-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "165e6b2fc2584017244d6e3fbec08ca6", "sha256": "5069a7fdec514051cc19424536236a775f44bab7ec9df1fb06532f80237ac2c9"}, "downloads": -1, "filename": "pywizlight-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "165e6b2fc2584017244d6e3fbec08ca6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8848, "upload_time": "2020-03-18T21:52:54", "upload_time_iso_8601": "2020-03-18T21:52:54.329515Z", "url": "https://files.pythonhosted.org/packages/39/e4/5df4dbd366ce430d8872e52e8084ac15a444f1f2290ed3f8f487149e123e/pywizlight-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89bfd565c17710051a1be392a5e64be0", "sha256": "4d518e1efed2c6d4d87d29aeb2f2ab3a2a0cfb181fc1de54b2497439a5f22ace"}, "downloads": -1, "filename": "pywizlight-0.3.0.tar.gz", "has_sig": false, "md5_digest": "89bfd565c17710051a1be392a5e64be0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8715, "upload_time": "2020-03-18T21:52:55", "upload_time_iso_8601": "2020-03-18T21:52:55.706249Z", "url": "https://files.pythonhosted.org/packages/20/6f/132b00d1463a4510d224b4aa03ec6dc9506e9726ae1839f1f5234ff38866/pywizlight-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "2a04f245a736ac8800c0179ff6217b14", "sha256": "2b4b7d9197bec03651cdfc38328ebad0f1222b66d611fd213e590c6cd73108b0"}, "downloads": -1, "filename": "pywizlight-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2a04f245a736ac8800c0179ff6217b14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8844, "upload_time": "2020-03-19T07:54:41", "upload_time_iso_8601": "2020-03-19T07:54:41.688636Z", "url": "https://files.pythonhosted.org/packages/e3/56/fad8cb84e6933d7da1237a6b8dc2e5a36f829f8edf3a142d51213362c2a1/pywizlight-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65c0b9df8a781e0836c4c50b6cab4cfc", "sha256": "e83e7523a171d2361eabcc18120847c41342c37ee3beef708caf2171c120373a"}, "downloads": -1, "filename": "pywizlight-0.3.1.tar.gz", "has_sig": false, "md5_digest": "65c0b9df8a781e0836c4c50b6cab4cfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8729, "upload_time": "2020-03-19T07:54:43", "upload_time_iso_8601": "2020-03-19T07:54:43.412792Z", "url": "https://files.pythonhosted.org/packages/48/58/aa71cbb04ed96f1988dea75b1ab0aec427472691950694fa935060f13bc7/pywizlight-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "540932fd146aae594a415e62b0edec7d", "sha256": "601d9991aeed6d3c11a24ceb13ac0dbe5bd7fe53291095b6b37b9eec2f69ac1e"}, "downloads": -1, "filename": "pywizlight-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "540932fd146aae594a415e62b0edec7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8854, "upload_time": "2020-05-03T10:52:53", "upload_time_iso_8601": "2020-05-03T10:52:53.117420Z", "url": "https://files.pythonhosted.org/packages/79/92/dfadb77ab2d91d82088d5f78c978dc46704cba3c8e8d633a6b24ad0aa54b/pywizlight-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48ee8805ea40895e2d7b0b571ce000a0", "sha256": "02d8f1170ac610e9ddb04c7a7e466769e5785eb259a2e26c80c2002405593b91"}, "downloads": -1, "filename": "pywizlight-0.3.2.tar.gz", "has_sig": false, "md5_digest": "48ee8805ea40895e2d7b0b571ce000a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8743, "upload_time": "2020-05-03T10:52:54", "upload_time_iso_8601": "2020-05-03T10:52:54.431404Z", "url": "https://files.pythonhosted.org/packages/18/6a/c1c9ce2cd2024cbd7f2f9bf14039a31b0a7fed99b3a7a1dd0c0ad52cbaae/pywizlight-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "540932fd146aae594a415e62b0edec7d", "sha256": "601d9991aeed6d3c11a24ceb13ac0dbe5bd7fe53291095b6b37b9eec2f69ac1e"}, "downloads": -1, "filename": "pywizlight-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "540932fd146aae594a415e62b0edec7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8854, "upload_time": "2020-05-03T10:52:53", "upload_time_iso_8601": "2020-05-03T10:52:53.117420Z", "url": "https://files.pythonhosted.org/packages/79/92/dfadb77ab2d91d82088d5f78c978dc46704cba3c8e8d633a6b24ad0aa54b/pywizlight-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48ee8805ea40895e2d7b0b571ce000a0", "sha256": "02d8f1170ac610e9ddb04c7a7e466769e5785eb259a2e26c80c2002405593b91"}, "downloads": -1, "filename": "pywizlight-0.3.2.tar.gz", "has_sig": false, "md5_digest": "48ee8805ea40895e2d7b0b571ce000a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8743, "upload_time": "2020-05-03T10:52:54", "upload_time_iso_8601": "2020-05-03T10:52:54.431404Z", "url": "https://files.pythonhosted.org/packages/18/6a/c1c9ce2cd2024cbd7f2f9bf14039a31b0a7fed99b3a7a1dd0c0ad52cbaae/pywizlight-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:14 2020"}