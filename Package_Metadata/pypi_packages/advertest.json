{"info": {"author": "Elias Dabbas", "author_email": "eliasdabbas@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "=========\nadvertest\n=========\n\n.. image:: https://img.shields.io/pypi/v/advertest.svg\n        :target: https://pypi.python.org/pypi/advertest\n\n.. image:: https://img.shields.io/travis/eliasdabbas/advertest.svg\n        :target: https://travis-ci.org/eliasdabbas/advertest\n\n.. image:: https://readthedocs.org/projects/advertest/badge/?version=latest\n        :target: https://advertest.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n.. image:: https://pyup.io/repos/github/eliasdabbas/advertest/shield.svg\n     :target: https://pyup.io/repos/github/eliasdabbas/advertest/\n     :alt: Updates\n\n\n\nProductivity and analysis tools for online marketing\n\nadvertools: create, scale, and manage online campaigns\n======================================================\n\n| A digital marketer is a data scientist.\n| Your job is to manage, manipulate, visualize, communicate, understand,\n  and make decisions based on data.\n\nYou might be doing basic stuff, like copying and pasting text on spread\nsheets, you might be running large scale automated platforms with\nsophisticated algorithms, or somewhere in between. In any case your job\nis all about working with data.\n\n| As a data scientist you don\u2019t spend most of your time producing cool visualizations or finding great insights. The majority of your time is spent wrangling with URLs, figuring out how to stitch together two tables, hoping that the dates, won\u2019t break, without you knowing, or trying to generate the next 124,538 keywords for an upcoming campaign, by the end of the week!\n\n| advertools is a Python package, that can hopefully make that part of your job a little easier.\n\n\nI have a tutorial on DataCamp that demonstrates a real-life example of\nhow to use `Python for creating a Search Engine Marketing campaign`_.\n\nI also have an interactive tool based on this package, where you can\n`generate keyword combinations easily`_.\n\n.. image:: app_screen_shot.png\n   :width: 600 px\n   :align: center\n\n\nMain Uses:\n~~~~~~~~~~\n\n-  **Generate keywords:** starting from a list of products, and a list\n   of words that might make sense together, you can generate a full\n   table of many possible combinations and permutations of relevant\n   keywords for that product.\n   The output is a ready-to-upload table to get you started with\n   keywords.\n\n.. code:: python\n\n   >>> import advertools as adv\n   >>> adv.kw_generate(products=['toyota'],\n                       words=['buy', 'price'],\n                       match_types=['Exact']).head()\n   ...        Campaign Ad Group           Keyword Criterion Type\n       0  SEM_Campaign   toyota        toyota buy          Exact\n       1  SEM_Campaign   toyota      toyota price          Exact\n       2  SEM_Campaign   toyota        buy toyota          Exact\n       3  SEM_Campaign   toyota      price toyota          Exact\n       4  SEM_Campaign   toyota  toyota buy price          Exact\n\n-  **Create ads:** Two main ways to create text ads, one is from scratch\n   (bottom-up) and the other is top down (given a set of product names).\n\n1. From scratch: This is the tradiditional way of writing ads. You have\n   a template text, and you want to insert the product name dynamically\n   in a certain location. You also want to make sure you are within the\n   character limits. For more details, I have a `tutorial on how to\n   create multiple text ads from scratch`_.\n\n.. code:: python\n\n   >>> ad_create(template='Let\\'s count {}',\n                 replacements=['one', 'two', 'three'],\n                 fallback='one', # in case the total length is greater than max_len\n                 max_len=20)\n   [\"Let's count one\", \"Let's count two\", \"Let's count three\"]\n\n   >>> ad_create('My favorite car is {}', ['Toyota', 'BMW', 'Mercedes', 'Lamborghini'], 'great', 28)\n   ['My favorite car is Toyota', 'My favorite car is BMW', 'My favorite car is Mercedes',\n   'My favorite car is great'] # 'Lamborghini' was too long, and so was replace by 'great'\n\n2. Top-down approach: Sometimes you need to start with a given a list of\n   product names, which you can easily split them into the relevant ad\n   slots, taking into consideration the length restrictions imposed by\n   the ad platform.\n   Imagine having the following list of products, and you want to split\n   each into slots of 30, 30, and 80 characters (based on the AdWords\n   template):\n\n.. code:: python\n\n   >>> products = [\n       'Samsung Galaxy S8+ Dual Sim 64GB 4G LTE Orchid Gray',\n       'Samsung Galaxy J1 Ace Dual Sim 4GB 3G Wifi White',\n       'Samsung Galaxy Note 8 Dual SIM 64GB 6GB RAM 4G LTE Midnight Black',\n       'Samsung Galaxy Note 8 Dual SIM 64GB 6GB RAM 4G LTE Orchid Grey'\n   ]\n   >>> [adv.ad_from_string(p) for p in products]\n   ... [['Samsung Galaxy S8+ Dual Sim', '64gb 4g Lte Orchid Gray', '', '', '', ''],\n        ['Samsung Galaxy J1 Ace Dual Sim', '4gb 3g Wifi White', '', '', '', ''],\n        ['Samsung Galaxy Note 8 Dual Sim', '64gb 6gb Ram 4g Lte Midnight', 'Black', '', '', ''],\n        ['Samsung Galaxy Note 8 Dual Sim', '64gb 6gb Ram 4g Lte Orchid', 'Grey', '', '', '']]\n\n| Each ad is split into the respective slots, making sure they contain\n  complete words, and that each slot has at most the specific number of\n  slots allowed.\n| This can save time when you have thousands of products to create ads\n  for.\n\n-  **Analyze word frequency:** Calculate the absolute and weighted\n   frequency of words in a collection of documents to uncover hidden\n   trends in the data. This is basically answering the question, \u2018What\n   did we write about vs. what was actually read?\u2019\n   Here is a tutorial on DataCamp on `measuring absolute vs weighted\n   frequency of words`_.\n\n| The package is still under heavy development, so expect a lot of\n  changes.\n| Feedback and suggestions are more than welcomed.\n\nInstallation\n~~~~~~~~~~~~\n\n.. code:: bash\n\n   pip install advertools\n\nConventions\n~~~~~~~~~~~\n\nFunction names mostly start with the object you are working on:\n\n| ``kw_``: for keywords-related functions\n| ``ad_``: for ad-related functions\n| ``url_``: URL tracking and generation\n\n.. _measuring absolute vs weighted frequency of words: https://www.datacamp.com/community/tutorials/absolute-weighted-word-frequency\n\n\n.. _Python for creating a Search Engine Marketing campaign: https://www.datacamp.com/community/tutorials/sem-data-science\n.. _generate keyword combinations easily: https://www.dashboardom.com/advertools\n.. _tutorial on how to create multiple text ads from scratch: https://nbviewer.jupyter.org/github/eliasdabbas/ad_create/blob/master/ad_create.ipynb\n\n* Free software: MIT license\n* Documentation: https://advertest.readthedocs.io.\n\n=======\nHistory\n=======\n\n0.1.0 (2018-07-02)\n------------------\n\n* First release on PyPI.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eliasdabbas/advertest", "keywords": "advertising marketing search-engine-optimization adwordsseo sem bingads keyword-research", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "advertest", "package_url": "https://pypi.org/project/advertest/", "platform": "", "project_url": "https://pypi.org/project/advertest/", "project_urls": {"Homepage": "https://github.com/eliasdabbas/advertest"}, "release_url": "https://pypi.org/project/advertest/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Productivity and analysis tools for online marketing", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            =========<br>advertest<br>=========<br><br>.. image:: https://img.shields.io/pypi/v/advertest.svg<br>        :target: https://pypi.python.org/pypi/advertest<br><br>.. image:: https://img.shields.io/travis/eliasdabbas/advertest.svg<br>        :target: https://travis-ci.org/eliasdabbas/advertest<br><br>.. image:: https://readthedocs.org/projects/advertest/badge/?version=latest<br>        :target: https://advertest.readthedocs.io/en/latest/?badge=latest<br>        :alt: Documentation Status<br><br><br>.. image:: https://pyup.io/repos/github/eliasdabbas/advertest/shield.svg<br>     :target: https://pyup.io/repos/github/eliasdabbas/advertest/<br>     :alt: Updates<br><br><br><br>Productivity and analysis tools for online marketing<br><br>advertools: create, scale, and manage online campaigns<br>======================================================<br><br>| A digital marketer is a data scientist.<br>| Your job is to manage, manipulate, visualize, communicate, understand,<br>  and make decisions based on data.<br><br>You might be doing basic stuff, like copying and pasting text on spread<br>sheets, you might be running large scale automated platforms with<br>sophisticated algorithms, or somewhere in between. In any case your job<br>is all about working with data.<br><br>| As a data scientist you don\u2019t spend most of your time producing cool visualizations or finding great insights. The majority of your time is spent wrangling with URLs, figuring out how to stitch together two tables, hoping that the dates, won\u2019t break, without you knowing, or trying to generate the next 124,538 keywords for an upcoming campaign, by the end of the week!<br><br>| advertools is a Python package, that can hopefully make that part of your job a little easier.<br><br><br>I have a tutorial on DataCamp that demonstrates a real-life example of<br>how to use `Python for creating a Search Engine Marketing campaign`_.<br><br>I also have an interactive tool based on this package, where you can<br>`generate keyword combinations easily`_.<br><br>.. image:: app_screen_shot.png<br>   :width: 600 px<br>   :align: center<br><br><br>Main Uses:<br>~~~~~~~~~~<br><br>-  **Generate keywords:** starting from a list of products, and a list<br>   of words that might make sense together, you can generate a full<br>   table of many possible combinations and permutations of relevant<br>   keywords for that product.<br>   The output is a ready-to-upload table to get you started with<br>   keywords.<br><br>.. code:: python<br><br>   &gt;&gt;&gt; import advertools as adv<br>   &gt;&gt;&gt; adv.kw_generate(products=['toyota'],<br>                       words=['buy', 'price'],<br>                       match_types=['Exact']).head()<br>   ...        Campaign Ad Group           Keyword Criterion Type<br>       0  SEM_Campaign   toyota        toyota buy          Exact<br>       1  SEM_Campaign   toyota      toyota price          Exact<br>       2  SEM_Campaign   toyota        buy toyota          Exact<br>       3  SEM_Campaign   toyota      price toyota          Exact<br>       4  SEM_Campaign   toyota  toyota buy price          Exact<br><br>-  **Create ads:** Two main ways to create text ads, one is from scratch<br>   (bottom-up) and the other is top down (given a set of product names).<br><br>1. From scratch: This is the tradiditional way of writing ads. You have<br>   a template text, and you want to insert the product name dynamically<br>   in a certain location. You also want to make sure you are within the<br>   character limits. For more details, I have a `tutorial on how to<br>   create multiple text ads from scratch`_.<br><br>.. code:: python<br><br>   &gt;&gt;&gt; ad_create(template='Let\\'s count {}',<br>                 replacements=['one', 'two', 'three'],<br>                 fallback='one', # in case the total length is greater than max_len<br>                 max_len=20)<br>   [\"Let's count one\", \"Let's count two\", \"Let's count three\"]<br><br>   &gt;&gt;&gt; ad_create('My favorite car is {}', ['Toyota', 'BMW', 'Mercedes', 'Lamborghini'], 'great', 28)<br>   ['My favorite car is Toyota', 'My favorite car is BMW', 'My favorite car is Mercedes',<br>   'My favorite car is great'] # 'Lamborghini' was too long, and so was replace by 'great'<br><br>2. Top-down approach: Sometimes you need to start with a given a list of<br>   product names, which you can easily split them into the relevant ad<br>   slots, taking into consideration the length restrictions imposed by<br>   the ad platform.<br>   Imagine having the following list of products, and you want to split<br>   each into slots of 30, 30, and 80 characters (based on the AdWords<br>   template):<br><br>.. code:: python<br><br>   &gt;&gt;&gt; products = [<br>       'Samsung Galaxy S8+ Dual Sim 64GB 4G LTE Orchid Gray',<br>       'Samsung Galaxy J1 Ace Dual Sim 4GB 3G Wifi White',<br>       'Samsung Galaxy Note 8 Dual SIM 64GB 6GB RAM 4G LTE Midnight Black',<br>       'Samsung Galaxy Note 8 Dual SIM 64GB 6GB RAM 4G LTE Orchid Grey'<br>   ]<br>   &gt;&gt;&gt; [adv.ad_from_string(p) for p in products]<br>   ... [['Samsung Galaxy S8+ Dual Sim', '64gb 4g Lte Orchid Gray', '', '', '', ''],<br>        ['Samsung Galaxy J1 Ace Dual Sim', '4gb 3g Wifi White', '', '', '', ''],<br>        ['Samsung Galaxy Note 8 Dual Sim', '64gb 6gb Ram 4g Lte Midnight', 'Black', '', '', ''],<br>        ['Samsung Galaxy Note 8 Dual Sim', '64gb 6gb Ram 4g Lte Orchid', 'Grey', '', '', '']]<br><br>| Each ad is split into the respective slots, making sure they contain<br>  complete words, and that each slot has at most the specific number of<br>  slots allowed.<br>| This can save time when you have thousands of products to create ads<br>  for.<br><br>-  **Analyze word frequency:** Calculate the absolute and weighted<br>   frequency of words in a collection of documents to uncover hidden<br>   trends in the data. This is basically answering the question, \u2018What<br>   did we write about vs. what was actually read?\u2019<br>   Here is a tutorial on DataCamp on `measuring absolute vs weighted<br>   frequency of words`_.<br><br>| The package is still under heavy development, so expect a lot of<br>  changes.<br>| Feedback and suggestions are more than welcomed.<br><br>Installation<br>~~~~~~~~~~~~<br><br>.. code:: bash<br><br>   pip install advertools<br><br>Conventions<br>~~~~~~~~~~~<br><br>Function names mostly start with the object you are working on:<br><br>| ``kw_``: for keywords-related functions<br>| ``ad_``: for ad-related functions<br>| ``url_``: URL tracking and generation<br><br>.. _measuring absolute vs weighted frequency of words: https://www.datacamp.com/community/tutorials/absolute-weighted-word-frequency<br><br><br>.. _Python for creating a Search Engine Marketing campaign: https://www.datacamp.com/community/tutorials/sem-data-science<br>.. _generate keyword combinations easily: https://www.dashboardom.com/advertools<br>.. _tutorial on how to create multiple text ads from scratch: https://nbviewer.jupyter.org/github/eliasdabbas/ad_create/blob/master/ad_create.ipynb<br><br>* Free software: MIT license<br>* Documentation: https://advertest.readthedocs.io.<br><br>=======<br>History<br>=======<br><br>0.1.0 (2018-07-02)<br>------------------<br><br>* First release on PyPI.\n          </div>"}, "last_serial": 4022889, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e1e3d939ce9ac73efc498d825783d307", "sha256": "3e5b9c2e4ff378543b6609912eb0d08da9a48f43d056e44ecca979c0b4e9749f"}, "downloads": -1, "filename": "advertest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e1e3d939ce9ac73efc498d825783d307", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37774, "upload_time": "2018-07-02T02:23:08", "upload_time_iso_8601": "2018-07-02T02:23:08.206167Z", "url": "https://files.pythonhosted.org/packages/f0/8f/9bd332d91cb0f41c43dbc9525adef04f803ad7661268e41bffdea1ac6116/advertest-0.1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "23f29f1b7a32608d17db8b3b331c820b", "sha256": "75458b77143652648ffe856122c28505a7e7dbbe5163ecccf846415378c18506"}, "downloads": -1, "filename": "advertest-1.0.1.tar.gz", "has_sig": false, "md5_digest": "23f29f1b7a32608d17db8b3b331c820b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39326, "upload_time": "2018-07-02T13:23:26", "upload_time_iso_8601": "2018-07-02T13:23:26.897140Z", "url": "https://files.pythonhosted.org/packages/a9/ee/1bc1739099668c8a29fb4b3a815559037bd02241745beb095999524d8be5/advertest-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23f29f1b7a32608d17db8b3b331c820b", "sha256": "75458b77143652648ffe856122c28505a7e7dbbe5163ecccf846415378c18506"}, "downloads": -1, "filename": "advertest-1.0.1.tar.gz", "has_sig": false, "md5_digest": "23f29f1b7a32608d17db8b3b331c820b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39326, "upload_time": "2018-07-02T13:23:26", "upload_time_iso_8601": "2018-07-02T13:23:26.897140Z", "url": "https://files.pythonhosted.org/packages/a9/ee/1bc1739099668c8a29fb4b3a815559037bd02241745beb095999524d8be5/advertest-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:04 2020"}