{"info": {"author": "Overboard", "author_email": "amwroute-git@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "**httpfind**\n============\n\n|The MIT License|\n\n    Search network for HTTP servers using a regular expression filter.\n\nUse *httpfind* to obtain the IP addresses of specified devices on a\nnetwork. HTTP requests for a user specified page are sent in parallel.\nResponses are compared against a user specified regular expression\npattern. Qualified results are returned as a list. The module is readily\nimported for use in other projects, and it also includes a convenient\ncommand line interface.\n\nInstallation\n------------\n\n.. code:: shell\n\n    pip install httpfind\n\nExamples\n--------\n\nBasic import example\n\n.. code:: python\n\n    import httpfind\n\n    result = httpfind.survey(\n        network='192.168.0.0/24',\n        pattern='(A|a)ccess (P|p)oint',\n        path='login.php',\n        log=False)\n\n    # Results printed as full URLs\n    print(result)\n    # Results printed as IP addresses\n    print([x.hostname for x in result])\n\nYields\n\n.. code:: shell\n\n    ['http://192.168.0.190/login.php', 'http://192.168.0.191/login.php', 'http://192.168.0.192/login.php']\n    ['192.168.0.190', '192.168.0.191', '192.168.0.192']\n\nCommand line example\n\n.. code:: shell\n\n    $> httpfind -h\n    usage: httpfind [-h] [-p PATH] [-f PATTERN] [-l] network\n\n    Search 'network' for hosts with a response to 'path' that matches 'filter'\n\n    positional arguments:\n      network               IP address with optional mask, e.g. 192.168.0.0/24\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -p PATH, --path PATH  URL path at host, e.g. index.html\n      -f PATTERN, --filter PATTERN\n                            Regular expression pattern for filter\n      -l, --log             Enable logging\n\n    $> httpfind 192.168.0.0/24 -f \"Access Point\" -p login.php\n    Scanning, please wait ...\n    Found 3 matches for Access Point on 192.168.0.0/24\n    192.168.0.190\n    192.168.0.191\n    192.168.0.192\n\nParameters\n----------\n\n``def survey(network=None, path='', pattern='', log=False):``\n\n-  ``network`` - IP address and subnet mask compatible with `ipaddress\n   library <https://docs.python.org/3/library/ipaddress.html#ipaddress.ip_network>`__\n-  ``path`` - Path portion of a URL as defined by\n   `url(un)split <https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlsplit>`__\n-  ``pattern`` - A regular expression pattern compatible with\n   `re.compile <https://docs.python.org/3/library/re.html#re.compile>`__\n-  ``log`` - boolean to control logging level\n\nConsequently, the network can be defined in either subnet mask\n(x.x.x.x/255.255.255.0) or CIDR notation (x.x.x.x/24). Presently,\n*httpfind* only scans networks of upto 256 addresses as shown in most of\nthe examples. Of course, a single IP address may be specified either by\nx.x.x.x or x.x.x.x/32.\n\nThere are numerous resources for regular expressions, such as the\n`introduction <https://docs.python.org/3/howto/regex.html>`__ provided\nby the Python Software Foundation. For the simple cases, using the\ndefault or '' will match any pages while a word such as 'Access' will\nmatch if it's found in the returned HTML provided it's the same case.\n\nPerformance\n-----------\n\nAs *discoverhue* utilizes the excellent\n`aiohttp <http://aiohttp.readthedocs.io/en/stable/>`__ package, requests\nare sent simultaneously rather than iteratively. More accurately, the\nrequests are sent randomly over a 2.5s interval so as to not spike\ntraffic. The timeout is set for 5.0s, so typical execution time is about\n8.0s.\n\nContributions\n-------------\n\nWelcome at https://github.com/Overboard/httpfind\n\nStatus\n------\n\nReleased.\n\n.. |The MIT License| image:: https://img.shields.io/badge/license-MIT-orange.svg?style=flat-square\n   :target: http://opensource.org/licenses/MIT\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Overboard/httpfind", "keywords": "http find scan filter", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "httpfind", "package_url": "https://pypi.org/project/httpfind/", "platform": "", "project_url": "https://pypi.org/project/httpfind/", "project_urls": {"Homepage": "https://github.com/Overboard/httpfind"}, "release_url": "https://pypi.org/project/httpfind/1.0.1/", "requires_dist": ["aiohttp"], "requires_python": "", "summary": "Search network for HTTP servers using a regular expression filter", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"The MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79ec5de2c5e94a74e4d279c7087f5c18ea105942/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6f72616e67652e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<blockquote>\nSearch network for HTTP servers using a regular expression filter.</blockquote>\n<p>Use <em>httpfind</em> to obtain the IP addresses of specified devices on a\nnetwork. HTTP requests for a user specified page are sent in parallel.\nResponses are compared against a user specified regular expression\npattern. Qualified results are returned as a list. The module is readily\nimported for use in other projects, and it also includes a convenient\ncommand line interface.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install httpfind\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Basic import example</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpfind</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">httpfind</span><span class=\"o\">.</span><span class=\"n\">survey</span><span class=\"p\">(</span>\n    <span class=\"n\">network</span><span class=\"o\">=</span><span class=\"s1\">'192.168.0.0/24'</span><span class=\"p\">,</span>\n    <span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s1\">'(A|a)ccess (P|p)oint'</span><span class=\"p\">,</span>\n    <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'login.php'</span><span class=\"p\">,</span>\n    <span class=\"n\">log</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Results printed as full URLs</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"c1\"># Results printed as IP addresses</span>\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">hostname</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">])</span>\n</pre>\n<p>Yields</p>\n<pre><span class=\"o\">[</span><span class=\"s1\">'http://192.168.0.190/login.php'</span>, <span class=\"s1\">'http://192.168.0.191/login.php'</span>, <span class=\"s1\">'http://192.168.0.192/login.php'</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"s1\">'192.168.0.190'</span>, <span class=\"s1\">'192.168.0.191'</span>, <span class=\"s1\">'192.168.0.192'</span><span class=\"o\">]</span>\n</pre>\n<p>Command line example</p>\n<pre>$&gt; httpfind -h\nusage: httpfind <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-p PATH<span class=\"o\">]</span> <span class=\"o\">[</span>-f PATTERN<span class=\"o\">]</span> <span class=\"o\">[</span>-l<span class=\"o\">]</span> network\n\nSearch <span class=\"s1\">'network'</span> <span class=\"k\">for</span> hosts with a response to <span class=\"s1\">'path'</span> that matches <span class=\"s1\">'filter'</span>\n\npositional arguments:\n  network               IP address with optional mask, e.g. <span class=\"m\">192</span>.168.0.0/24\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -p PATH, --path PATH  URL path at host, e.g. index.html\n  -f PATTERN, --filter PATTERN\n                        Regular expression pattern <span class=\"k\">for</span> filter\n  -l, --log             Enable logging\n\n$&gt; httpfind <span class=\"m\">192</span>.168.0.0/24 -f <span class=\"s2\">\"Access Point\"</span> -p login.php\nScanning, please <span class=\"nb\">wait</span> ...\nFound <span class=\"m\">3</span> matches <span class=\"k\">for</span> Access Point on <span class=\"m\">192</span>.168.0.0/24\n<span class=\"m\">192</span>.168.0.190\n<span class=\"m\">192</span>.168.0.191\n<span class=\"m\">192</span>.168.0.192\n</pre>\n</div>\n<div id=\"parameters\">\n<h2>Parameters</h2>\n<p><tt>def survey(network=None, <span class=\"pre\">path='',</span> <span class=\"pre\">pattern='',</span> log=False):</tt></p>\n<ul>\n<li><tt>network</tt> - IP address and subnet mask compatible with <a href=\"https://docs.python.org/3/library/ipaddress.html#ipaddress.ip_network\" rel=\"nofollow\">ipaddress\nlibrary</a></li>\n<li><tt>path</tt> - Path portion of a URL as defined by\n<a href=\"https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlsplit\" rel=\"nofollow\">url(un)split</a></li>\n<li><tt>pattern</tt> - A regular expression pattern compatible with\n<a href=\"https://docs.python.org/3/library/re.html#re.compile\" rel=\"nofollow\">re.compile</a></li>\n<li><tt>log</tt> - boolean to control logging level</li>\n</ul>\n<p>Consequently, the network can be defined in either subnet mask\n(x.x.x.x/255.255.255.0) or CIDR notation (x.x.x.x/24). Presently,\n<em>httpfind</em> only scans networks of upto 256 addresses as shown in most of\nthe examples. Of course, a single IP address may be specified either by\nx.x.x.x or x.x.x.x/32.</p>\n<p>There are numerous resources for regular expressions, such as the\n<a href=\"https://docs.python.org/3/howto/regex.html\" rel=\"nofollow\">introduction</a> provided\nby the Python Software Foundation. For the simple cases, using the\ndefault or \u2018\u2019 will match any pages while a word such as \u2018Access\u2019 will\nmatch if it\u2019s found in the returned HTML provided it\u2019s the same case.</p>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>As <em>discoverhue</em> utilizes the excellent\n<a href=\"http://aiohttp.readthedocs.io/en/stable/\" rel=\"nofollow\">aiohttp</a> package, requests\nare sent simultaneously rather than iteratively. More accurately, the\nrequests are sent randomly over a 2.5s interval so as to not spike\ntraffic. The timeout is set for 5.0s, so typical execution time is about\n8.0s.</p>\n</div>\n<div id=\"contributions\">\n<h2>Contributions</h2>\n<p>Welcome at <a href=\"https://github.com/Overboard/httpfind\" rel=\"nofollow\">https://github.com/Overboard/httpfind</a></p>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>Released.</p>\n</div>\n\n          </div>"}, "last_serial": 3681291, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "bdfaa80eff7a508efe54b69f4b4c4a2a", "sha256": "0bab7c624ac3683493e42860750595b5828340e72bbc859e430f1fc42742501a"}, "downloads": -1, "filename": "httpfind-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bdfaa80eff7a508efe54b69f4b4c4a2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8895, "upload_time": "2018-03-18T16:49:22", "upload_time_iso_8601": "2018-03-18T16:49:22.576253Z", "url": "https://files.pythonhosted.org/packages/1c/6b/03ba3b2ed148523c2cd4a879b056b258c946fa771dc24129add5fd964c12/httpfind-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ec0cdc5153bae9bb87afc83a6731f40", "sha256": "ff8162acfbdb5c7639c93756451b4df8a5ef9f7f8638c2e3f2fa0245316fd17a"}, "downloads": -1, "filename": "httpfind-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9ec0cdc5153bae9bb87afc83a6731f40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5507, "upload_time": "2018-03-18T16:49:23", "upload_time_iso_8601": "2018-03-18T16:49:23.888718Z", "url": "https://files.pythonhosted.org/packages/61/66/92ee2ad624c022cbb54e7c8952ec890e083f91da90d6f25756ba6b99c496/httpfind-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdfaa80eff7a508efe54b69f4b4c4a2a", "sha256": "0bab7c624ac3683493e42860750595b5828340e72bbc859e430f1fc42742501a"}, "downloads": -1, "filename": "httpfind-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bdfaa80eff7a508efe54b69f4b4c4a2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8895, "upload_time": "2018-03-18T16:49:22", "upload_time_iso_8601": "2018-03-18T16:49:22.576253Z", "url": "https://files.pythonhosted.org/packages/1c/6b/03ba3b2ed148523c2cd4a879b056b258c946fa771dc24129add5fd964c12/httpfind-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ec0cdc5153bae9bb87afc83a6731f40", "sha256": "ff8162acfbdb5c7639c93756451b4df8a5ef9f7f8638c2e3f2fa0245316fd17a"}, "downloads": -1, "filename": "httpfind-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9ec0cdc5153bae9bb87afc83a6731f40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5507, "upload_time": "2018-03-18T16:49:23", "upload_time_iso_8601": "2018-03-18T16:49:23.888718Z", "url": "https://files.pythonhosted.org/packages/61/66/92ee2ad624c022cbb54e7c8952ec890e083f91da90d6f25756ba6b99c496/httpfind-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:08 2020"}