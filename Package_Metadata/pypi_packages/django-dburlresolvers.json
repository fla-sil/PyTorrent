{"info": {"author": "Manuel Saelices", "author_email": "msaelices@yaco.es", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-dburlresolvers\n=====================\n\nA URL resolver which store the URL patterns in database, which means a webmaster can define some URLs.\n\nInstalling\n----------\n\nInstall package from pypi::\n\n    $ easy_install django-dburlresolvers\n\nPut ``dbresolver`` into your installed applications::\n\n    INSTALLED_APPS = (\n        ...\n        'dbresolver',\n    )\n\nChange the project ``urls.py`` file like this::\n\n    from dbresolver import get_dbresolver_patterns\n\n    urlpatterns = patterns('',\n        ... # your URLs\n    )\n\n    urlpatterns += get_dbresolver_patterns()\n\n\nUsage\n-----\n\nRegister some views of your project to get available in ``dbresolver``. You may\nregister it manually or automatically (by autodiscovering):\n\n* Manually: Using the ``dbresolver`` API directly::\n\n    >>> from dbresolver import register_view\n    >>> from fooapp.views import foo_listing\n    >>> register_view(foo_listing, 'Foo listing')\n\n* Automatically: Put this code in your project (we recommended in the project ``urls.py``)::\n\n    from dbresolver import autodiscover_views\n    autodiscover_views()\n\n  You need to define an especial ``views_to_register`` method, like ilustrate this example::\n\n    def foo_listing(request):\n        foo_list = FooModel.objects.all()\n        return render_to_response('fooapp/foo_listing.html',\n                                {'foo_list': foo_list},\n                                 context_instance=RequestContext(request))\n\n    def views_to_register():\n        \"\"\" returns views to be registered with dbresolver \"\"\"\n        return (\n            (foo_listing, _('Foo listing')),\n        )\n\nAlso you can register generic views with parameters. For example, imagine you\nhave a view like this::\n\n    def render_template(request, template_name=None):\n        try:\n            return direct_to_template(request, template=template_name)\n        except TemplateDoesNotExist:\n            raise Http404()\n\nYou may register the view with a parameter which be defined for admin user::\n\n    >>> from configfield import params\n    >>> register_view(render_template, 'Generic view to render a template',\n                      params=(\n                          params.Template(\n                              name='template_name',\n                              label='Template to be rendered',\n                          ),\n                      ))\n\nIf you want autoregistering of that view, the code was like this::\n\n    def views_to_register():\n        return (\n            {'view': render_template,\n             'label': 'Generic view to render a template',\n             'params': (\n                 params.Template(name='template_name', label='Template to be rendered'),\n            )},\n\nNow you only have to enter on admin site to create URL patterns attached to\nviews. You can use both Django `default regular expressions`_ and simpler\n`surlex expressions`_.\n\n.. _`default regular expressions`: http://docs.djangoproject.com/en/dev/topics/http/urls/\n.. _`surlex expressions`: http://codysoyland.com/projects/surlex/documentation/\n\n\n\n0.1.0-beta\n----------\nFixed a model form error when used outside admin.\n\n0.1.0-alpha\n-----------\n\nInitial version", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-dburlresolvers", "package_url": "https://pypi.org/project/django-dburlresolvers/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-dburlresolvers/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/django-dburlresolvers/0.1.0-beta2/", "requires_dist": null, "requires_python": null, "summary": "Django-based URL resolving mechanism, which store the URL patterns in database", "version": "0.1.0-beta2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A URL resolver which store the URL patterns in database, which means a webmaster can define some URLs.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install package from pypi:</p>\n<pre>$ easy_install django-dburlresolvers\n</pre>\n<p>Put <tt>dbresolver</tt> into your installed applications:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'dbresolver',\n)\n</pre>\n<p>Change the project <tt>urls.py</tt> file like this:</p>\n<pre>from dbresolver import get_dbresolver_patterns\n\nurlpatterns = patterns('',\n    ... # your URLs\n)\n\nurlpatterns += get_dbresolver_patterns()\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Register some views of your project to get available in <tt>dbresolver</tt>. You may\nregister it manually or automatically (by autodiscovering):</p>\n<ul>\n<li><p>Manually: Using the <tt>dbresolver</tt> API directly:</p>\n<pre>&gt;&gt;&gt; from dbresolver import register_view\n&gt;&gt;&gt; from fooapp.views import foo_listing\n&gt;&gt;&gt; register_view(foo_listing, 'Foo listing')\n</pre>\n</li>\n<li><p>Automatically: Put this code in your project (we recommended in the project <tt>urls.py</tt>):</p>\n<pre>from dbresolver import autodiscover_views\nautodiscover_views()\n</pre>\n<p>You need to define an especial <tt>views_to_register</tt> method, like ilustrate this example:</p>\n<pre>def foo_listing(request):\n    foo_list = FooModel.objects.all()\n    return render_to_response('fooapp/foo_listing.html',\n                            {'foo_list': foo_list},\n                             context_instance=RequestContext(request))\n\ndef views_to_register():\n    \"\"\" returns views to be registered with dbresolver \"\"\"\n    return (\n        (foo_listing, _('Foo listing')),\n    )\n</pre>\n</li>\n</ul>\n<p>Also you can register generic views with parameters. For example, imagine you\nhave a view like this:</p>\n<pre>def render_template(request, template_name=None):\n    try:\n        return direct_to_template(request, template=template_name)\n    except TemplateDoesNotExist:\n        raise Http404()\n</pre>\n<p>You may register the view with a parameter which be defined for admin user:</p>\n<pre>&gt;&gt;&gt; from configfield import params\n&gt;&gt;&gt; register_view(render_template, 'Generic view to render a template',\n                  params=(\n                      params.Template(\n                          name='template_name',\n                          label='Template to be rendered',\n                      ),\n                  ))\n</pre>\n<p>If you want autoregistering of that view, the code was like this:</p>\n<pre>def views_to_register():\n    return (\n        {'view': render_template,\n         'label': 'Generic view to render a template',\n         'params': (\n             params.Template(name='template_name', label='Template to be rendered'),\n        )},\n</pre>\n<p>Now you only have to enter on admin site to create URL patterns attached to\nviews. You can use both Django <a href=\"http://docs.djangoproject.com/en/dev/topics/http/urls/\" rel=\"nofollow\">default regular expressions</a> and simpler\n<a href=\"http://codysoyland.com/projects/surlex/documentation/\" rel=\"nofollow\">surlex expressions</a>.</p>\n</div>\n<div id=\"beta\">\n<h2>0.1.0-beta</h2>\n<p>Fixed a model form error when used outside admin.</p>\n</div>\n<div id=\"alpha\">\n<h2>0.1.0-alpha</h2>\n<p>Initial version</p>\n</div>\n\n          </div>"}, "last_serial": 789440, "releases": {"0.1.0-beta": [{"comment_text": "", "digests": {"md5": "8b93527f3ce98f1d1cdfbe14cafd7677", "sha256": "767c082571518a40441684300fe9087c54e17325e0b4252cc90189ad6c2e9d57"}, "downloads": -1, "filename": "django-dburlresolvers-0.1.0-beta.tar.gz", "has_sig": false, "md5_digest": "8b93527f3ce98f1d1cdfbe14cafd7677", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10944, "upload_time": "2011-03-07T18:20:52", "upload_time_iso_8601": "2011-03-07T18:20:52.719659Z", "url": "https://files.pythonhosted.org/packages/ce/7a/5cabd18fc6d8ffe6696d5a08e0a9d1f095d259b6b62e366b8569f0b44b7c/django-dburlresolvers-0.1.0-beta.tar.gz", "yanked": false}], "0.1.0-beta2": [{"comment_text": "", "digests": {"md5": "3ae600ab30c77d69cf70a4458a827d55", "sha256": "a1bd290f964d212c894452c4e89081f0e072df47c8dde64e63ab75040bb4e41b"}, "downloads": -1, "filename": "django-dburlresolvers-0.1.0-beta2.tar.gz", "has_sig": false, "md5_digest": "3ae600ab30c77d69cf70a4458a827d55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11660, "upload_time": "2011-03-09T13:54:36", "upload_time_iso_8601": "2011-03-09T13:54:36.995790Z", "url": "https://files.pythonhosted.org/packages/c4/93/a5b529eb5e593f59f61dcc24fe77d7d1a5d974221b42f73796a4bf6fea23/django-dburlresolvers-0.1.0-beta2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ae600ab30c77d69cf70a4458a827d55", "sha256": "a1bd290f964d212c894452c4e89081f0e072df47c8dde64e63ab75040bb4e41b"}, "downloads": -1, "filename": "django-dburlresolvers-0.1.0-beta2.tar.gz", "has_sig": false, "md5_digest": "3ae600ab30c77d69cf70a4458a827d55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11660, "upload_time": "2011-03-09T13:54:36", "upload_time_iso_8601": "2011-03-09T13:54:36.995790Z", "url": "https://files.pythonhosted.org/packages/c4/93/a5b529eb5e593f59f61dcc24fe77d7d1a5d974221b42f73796a4bf6fea23/django-dburlresolvers-0.1.0-beta2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:38 2020"}