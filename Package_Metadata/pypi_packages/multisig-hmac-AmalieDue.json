{"info": {"author": "Amalie Due Jensen", "author_email": "amalieduejensen@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: ISC License (ISCL)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# multisig-hmac-python-version\n\n> Multisig scheme for HMAC authentication\n\nWork in progress\n\n## Usage\nKey management can happen in either of two modes, either by storing every of the component keys, or by storing a single master seed and using that to derive keys ad hoc.\n\nUsing stored keys:\n\n```python\nm = MultisigHMAC()\n\n# generate keys which need to be stored securely and need to be shared securely with each party\nk1 = m.keygen()\nk2 = m.keygen()\nk3 = m.keygen()\n\n# sign by each client with 2-of-3\ndata = b'Hello world'\n\ns1 = m.sign(k1, data)\ns3 = m.sign(k3, data)\n\nout = m.combine([s1, s3])\n\nsent = (out[0], base64.urlsafe_b64encode(out[1]))\n\n# --- network ---\n\nreceived = (sent[0], base64.urlsafe_b64decode(sent[1]))\n\n# verify on the server\nthreshold = 2\nkeys = [k1, k2, k3]\nsignature = received\n\nm.verify(keys, signature, data, threshold)\n\n```\n\nUsing a derived master key:\n\n```python\nm = MultisigHMAC()\n\n# generate a master seed which needs to be stored securely\n# this seed must NOT be shared with any other party\nseed = m.seedgen()\n\nk1 = m.keygen()\nk2 = m.keygen()\nk3 = m.keygen()\n\n# sign by each client with 2-of-3\ndata = b'Hello world'\n\ns1 = m.sign(k1, data)\ns3 = m.sign(k3, data)\n\nout = m.combine([s1, s3])\n\nsent = (out[0], base64.urlsafe_b64encode(out[1]))\n\n# --- network ---\n\nreceived = (sent[0], base64.urlsafe_b64decode(sent[1]))\n\n# verify on the server, but now keys are dynamically derived\nthreshold = 2\nkeys = [k1, k2, k3]\nsignature = received\n\nm.verifyDerived(keys, signature, data, threshold)\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AmalieDue/multisig-hmac-python-version", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "multisig-hmac-AmalieDue", "package_url": "https://pypi.org/project/multisig-hmac-AmalieDue/", "platform": "", "project_url": "https://pypi.org/project/multisig-hmac-AmalieDue/", "project_urls": {"Homepage": "https://github.com/AmalieDue/multisig-hmac-python-version"}, "release_url": "https://pypi.org/project/multisig-hmac-AmalieDue/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "multisig HMAC", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>multisig-hmac-python-version</h1>\n<blockquote>\n<p>Multisig scheme for HMAC authentication</p>\n</blockquote>\n<p>Work in progress</p>\n<h2>Usage</h2>\n<p>Key management can happen in either of two modes, either by storing every of the component keys, or by storing a single master seed and using that to derive keys ad hoc.</p>\n<p>Using stored keys:</p>\n<pre><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">MultisigHMAC</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># generate keys which need to be stored securely and need to be shared securely with each party</span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">keygen</span><span class=\"p\">()</span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">keygen</span><span class=\"p\">()</span>\n<span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">keygen</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># sign by each client with 2-of-3</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'Hello world'</span>\n\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">([</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s3</span><span class=\"p\">])</span>\n\n<span class=\"n\">sent</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64encode</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># --- network ---</span>\n\n<span class=\"n\">received</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64decode</span><span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># verify on the server</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">k3</span><span class=\"p\">]</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">received</span>\n\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">)</span>\n</pre>\n<p>Using a derived master key:</p>\n<pre><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">MultisigHMAC</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># generate a master seed which needs to be stored securely</span>\n<span class=\"c1\"># this seed must NOT be shared with any other party</span>\n<span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">seedgen</span><span class=\"p\">()</span>\n\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">keygen</span><span class=\"p\">()</span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">keygen</span><span class=\"p\">()</span>\n<span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">keygen</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># sign by each client with 2-of-3</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'Hello world'</span>\n\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">([</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s3</span><span class=\"p\">])</span>\n\n<span class=\"n\">sent</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64encode</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># --- network ---</span>\n\n<span class=\"n\">received</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64decode</span><span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># verify on the server, but now keys are dynamically derived</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">k3</span><span class=\"p\">]</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">received</span>\n\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">verifyDerived</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6667196, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "2d7dd7b921aabb340f981f2517293323", "sha256": "1429be5ad22664ffc5876271fdb93cfa5e8ccf2d5b210aec130701a0b3608c99"}, "downloads": -1, "filename": "multisig_hmac_AmalieDue-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2d7dd7b921aabb340f981f2517293323", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4651, "upload_time": "2020-02-20T10:16:58", "upload_time_iso_8601": "2020-02-20T10:16:58.055433Z", "url": "https://files.pythonhosted.org/packages/42/2d/1e1757bde16efa8bcaffa169ad7cf4969921159a6a48e3911fdcedb76856/multisig_hmac_AmalieDue-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "213d085830e045437236fd2e915d51b9", "sha256": "d47a7b228bbf4961b1ff9606d3a67403ac9f85c6217963e54e67e0c3fd3bb11d"}, "downloads": -1, "filename": "multisig-hmac-AmalieDue-0.0.3.tar.gz", "has_sig": false, "md5_digest": "213d085830e045437236fd2e915d51b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3424, "upload_time": "2020-02-20T10:17:00", "upload_time_iso_8601": "2020-02-20T10:17:00.924895Z", "url": "https://files.pythonhosted.org/packages/11/16/b983ad7c45ec00239613ac71ff60b3d496ecf6881b2249aff4fc1557d63a/multisig-hmac-AmalieDue-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d7dd7b921aabb340f981f2517293323", "sha256": "1429be5ad22664ffc5876271fdb93cfa5e8ccf2d5b210aec130701a0b3608c99"}, "downloads": -1, "filename": "multisig_hmac_AmalieDue-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2d7dd7b921aabb340f981f2517293323", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4651, "upload_time": "2020-02-20T10:16:58", "upload_time_iso_8601": "2020-02-20T10:16:58.055433Z", "url": "https://files.pythonhosted.org/packages/42/2d/1e1757bde16efa8bcaffa169ad7cf4969921159a6a48e3911fdcedb76856/multisig_hmac_AmalieDue-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "213d085830e045437236fd2e915d51b9", "sha256": "d47a7b228bbf4961b1ff9606d3a67403ac9f85c6217963e54e67e0c3fd3bb11d"}, "downloads": -1, "filename": "multisig-hmac-AmalieDue-0.0.3.tar.gz", "has_sig": false, "md5_digest": "213d085830e045437236fd2e915d51b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3424, "upload_time": "2020-02-20T10:17:00", "upload_time_iso_8601": "2020-02-20T10:17:00.924895Z", "url": "https://files.pythonhosted.org/packages/11/16/b983ad7c45ec00239613ac71ff60b3d496ecf6881b2249aff4fc1557d63a/multisig-hmac-AmalieDue-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:20 2020"}