{"info": {"author": "Emlyn O'Regan", "author_email": "emlynoregan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Distributed Computing"], "description": "# appenginetaskutils\nThis is the repo for the appengine task utils library. It generates the appenginetaskutils package \n\n## Install \n\nUse the python package for this library. You can find the package online [here](https://pypi.python.org/pypi/appenginetaskutils).\n\nChange to your Python App Engine project's root folder and do the following:\n\n> pip install appenginetaskutils --target lib\n\nOr add it to your requirements.txt. You'll also need to set up vendoring, see [app engine vendoring instructions here](https://cloud.google.com/appengine/docs/python/tools/using-libraries-python-27).\n\n## @task\n\nThe most basic element of the taskutils library is task(). This decorator function is designed to be used as a replacement for [deferred](https://cloud.google.com/appengine/articles/deferred).\n\n### Configuring @task\n\nWhen using deferred you have a builtin to configure in app.yaml to make it work. For taskutils.task, you need to add the following to your app.yaml and/or \\<servicename\\>.yaml file:\n\n\thandlers:\n\t\t- url: /_ah/task/.*\n\t\t  script: taskutils.app\n\t\t  login: admin\n\nThis rule creates a generic handler for task to defer work to background push tasks.\n\nAdd it at the top of the list (to make sure other rules don't override it).\n\n### Importing task\n\nYou can import task into your modules like this:\n\n\tfrom taskutils import task\n\n### Using task as a decorator\n\nYou can take any function and make it run in a separate task, like this:\n\n\t@task\n\tdef myfunction():\n\t  ... do stuff ... \n\nJust call the function normally, eg:\n\n\tmyfunction()\n\nYou can use @task on any function, including nested functions, recursive functions, recursive nested functions, the sky is the limit. This is possible because of use of [yccloudpickle](https://medium.com/the-infinite-machine/python-function-serialisation-with-yccloudpickle-b2ff6b2ad5da#.zei3n0ibu) as the underlying serialisation library.\n\nYour function can also have arguments, including other functions:\n\n\tdef myouterfunction(mapf):\n\n\t    @task\n\t    def myinnerfunction(objects):\n\t    \tfor object in objects:\n\t    \t\tmapf(object)\n\n\t    ...get some list of lists of objects... \n\t\tfor objects in objectslist:\n\t\t\tmyinnerfunction(objects)\n\n\tdef dosomethingwithobject(object):\n\t\t... do something with an object ...\t\t\n\n\tmyouterfunction(dosomethingwithobject)\n\nThe functions and arguments are being serialised and deserialised for you behind the scenes.\n\nWhen enqueuing a background task, the App Engine Task and TaskQueue libraries can take a set of parameters. You can pass these to the decorator:\n\n\t@task(queue=\"myqueue\", countdown=5)\n\tdef anotherfunction():\n\t  ... do stuff ... \n\nDetails of the arguments allowed to Tasks are available [here](https://cloud.google.com/appengine/docs/python/refdocs/google.appengine.api.taskqueue), under **class google.appengine.api.taskqueue.Task(payload=None, \\*\\*kwargs)**. The task decorator supports a couple of extra ones, detailed below.\n\n### Using task as a factory\n\nYou can also use task to decorate a function on the fly, like this:\n\n\tdef somefunction(a, b):\n\t  ... does something ...\n\n    somefunctionintask = task(somefunction, queue=\"myqueue\")\n\nThen you can call the function returned by task when you are ready:\n\n    somefunctionintask(1, 2)\n\nYou could do both of these steps at once, too:\n\n\n    task(somefunction, queue=\"myqueue\")(1, 2)\n\n### transactional\n\nPass transactional=True to have your [task launch transactionally](https://cloud.google.com/appengine/docs/python/datastore/transactions#transactional_task_enqueuing). eg:\n\n\t@task(transactional=True)\n\tdef myserioustransactionaltask():\n\t  ...\n\n### includeheaders\n\nIf you'd like access to headers in your function (a dictionary of headers passed to your task, it's a web request after all), set includeheaders=True in your call to @task. You'll also need to accept the headers argument in your function.\n\n\t@task(includeheaders=True)\n\tdef myfunctionwithheaders(amount, headers):\n\t    ... stuff ...\n\n\tmyfunctionwithheaders(10)\n\nApp Engine passes useful information to your task in headers, for example X-Appengine-TaskRetryCount.\n\n### other bits\n\nWhen using deferred, all your calls are logged as /_ah/queue/deferred. But @task uses a url of the form /_ah/task/\\<module\\>/\\<function\\>, eg:\n\n\t/_ah/task/mymodule/somefunction\n\nwhich makes debugging a lot easier.\n\n\n\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/emlynoregan/im_futuregcscompose", "keywords": "", "license": "../LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "im-futuregcscompose", "package_url": "https://pypi.org/project/im-futuregcscompose/", "platform": "", "project_url": "https://pypi.org/project/im-futuregcscompose/", "project_urls": {"Homepage": "https://github.com/emlynoregan/im_futuregcscompose"}, "release_url": "https://pypi.org/project/im-futuregcscompose/0.1.1/", "requires_dist": ["im-util", "google-cloud-storage", "im-future"], "requires_python": "", "summary": "function for composing an folder full of text files, into one text file, in gcs, for Google App Engine, Python standard environment", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # appenginetaskutils<br>This is the repo for the appengine task utils library. It generates the appenginetaskutils package <br><br>## Install <br><br>Use the python package for this library. You can find the package online [here](https://pypi.python.org/pypi/appenginetaskutils).<br><br>Change to your Python App Engine project's root folder and do the following:<br><br>&gt; pip install appenginetaskutils --target lib<br><br>Or add it to your requirements.txt. You'll also need to set up vendoring, see [app engine vendoring instructions here](https://cloud.google.com/appengine/docs/python/tools/using-libraries-python-27).<br><br>## @task<br><br>The most basic element of the taskutils library is task(). This decorator function is designed to be used as a replacement for [deferred](https://cloud.google.com/appengine/articles/deferred).<br><br>### Configuring @task<br><br>When using deferred you have a builtin to configure in app.yaml to make it work. For taskutils.task, you need to add the following to your app.yaml and/or \\&lt;servicename\\&gt;.yaml file:<br><br>\thandlers:<br>\t\t- url: /_ah/task/.*<br>\t\t  script: taskutils.app<br>\t\t  login: admin<br><br>This rule creates a generic handler for task to defer work to background push tasks.<br><br>Add it at the top of the list (to make sure other rules don't override it).<br><br>### Importing task<br><br>You can import task into your modules like this:<br><br>\tfrom taskutils import task<br><br>### Using task as a decorator<br><br>You can take any function and make it run in a separate task, like this:<br><br>\t@task<br>\tdef myfunction():<br>\t  ... do stuff ... <br><br>Just call the function normally, eg:<br><br>\tmyfunction()<br><br>You can use @task on any function, including nested functions, recursive functions, recursive nested functions, the sky is the limit. This is possible because of use of [yccloudpickle](https://medium.com/the-infinite-machine/python-function-serialisation-with-yccloudpickle-b2ff6b2ad5da#.zei3n0ibu) as the underlying serialisation library.<br><br>Your function can also have arguments, including other functions:<br><br>\tdef myouterfunction(mapf):<br><br>\t    @task<br>\t    def myinnerfunction(objects):<br>\t    \tfor object in objects:<br>\t    \t\tmapf(object)<br><br>\t    ...get some list of lists of objects... <br>\t\tfor objects in objectslist:<br>\t\t\tmyinnerfunction(objects)<br><br>\tdef dosomethingwithobject(object):<br>\t\t... do something with an object ...\t\t<br><br>\tmyouterfunction(dosomethingwithobject)<br><br>The functions and arguments are being serialised and deserialised for you behind the scenes.<br><br>When enqueuing a background task, the App Engine Task and TaskQueue libraries can take a set of parameters. You can pass these to the decorator:<br><br>\t@task(queue=\"myqueue\", countdown=5)<br>\tdef anotherfunction():<br>\t  ... do stuff ... <br><br>Details of the arguments allowed to Tasks are available [here](https://cloud.google.com/appengine/docs/python/refdocs/google.appengine.api.taskqueue), under **class google.appengine.api.taskqueue.Task(payload=None, \\*\\*kwargs)**. The task decorator supports a couple of extra ones, detailed below.<br><br>### Using task as a factory<br><br>You can also use task to decorate a function on the fly, like this:<br><br>\tdef somefunction(a, b):<br>\t  ... does something ...<br><br>    somefunctionintask = task(somefunction, queue=\"myqueue\")<br><br>Then you can call the function returned by task when you are ready:<br><br>    somefunctionintask(1, 2)<br><br>You could do both of these steps at once, too:<br><br><br>    task(somefunction, queue=\"myqueue\")(1, 2)<br><br>### transactional<br><br>Pass transactional=True to have your [task launch transactionally](https://cloud.google.com/appengine/docs/python/datastore/transactions#transactional_task_enqueuing). eg:<br><br>\t@task(transactional=True)<br>\tdef myserioustransactionaltask():<br>\t  ...<br><br>### includeheaders<br><br>If you'd like access to headers in your function (a dictionary of headers passed to your task, it's a web request after all), set includeheaders=True in your call to @task. You'll also need to accept the headers argument in your function.<br><br>\t@task(includeheaders=True)<br>\tdef myfunctionwithheaders(amount, headers):<br>\t    ... stuff ...<br><br>\tmyfunctionwithheaders(10)<br><br>App Engine passes useful information to your task in headers, for example X-Appengine-TaskRetryCount.<br><br>### other bits<br><br>When using deferred, all your calls are logged as /_ah/queue/deferred. But @task uses a url of the form /_ah/task/\\&lt;module\\&gt;/\\&lt;function\\&gt;, eg:<br><br>\t/_ah/task/mymodule/somefunction<br><br>which makes debugging a lot easier.<br><br><br><br><br><br><br><br>\n          </div>"}, "last_serial": 3728593, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "25ca36bf203431d6d9b6188b95f3e5cf", "sha256": "ebda4ea6ee01fbb512fa32e062f5bb0594b53608d183ae09d2b61a1339cc4413"}, "downloads": -1, "filename": "im_futuregcscompose-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "25ca36bf203431d6d9b6188b95f3e5cf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7784, "upload_time": "2018-02-23T06:25:43", "upload_time_iso_8601": "2018-02-23T06:25:43.541337Z", "url": "https://files.pythonhosted.org/packages/bf/fd/795b0ea4ac33c9615ab899a35523c508916da51616eaf3f6a06317c2b5ea/im_futuregcscompose-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "594dfeceba5cdaba1adefd77d3d8b3e8", "sha256": "c913af027ee7b230d376e494ab7d349c6b14e33d6bfc40f031f6a442d4bd1b53"}, "downloads": -1, "filename": "im_futuregcscompose-0.1.0.tar.gz", "has_sig": false, "md5_digest": "594dfeceba5cdaba1adefd77d3d8b3e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4695, "upload_time": "2018-02-23T06:25:44", "upload_time_iso_8601": "2018-02-23T06:25:44.835382Z", "url": "https://files.pythonhosted.org/packages/6c/dd/423f8fb60f298d4c58455e57c04027630c44478cfd01df94d30a233db46e/im_futuregcscompose-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "41efa8f74f573e48ff3b6d857e4e7e69", "sha256": "c75f083dab7c120fd855cc4c82768a8691e4144da36bfb628e7d86be693effa3"}, "downloads": -1, "filename": "im_futuregcscompose-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "41efa8f74f573e48ff3b6d857e4e7e69", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7795, "upload_time": "2018-04-03T06:59:14", "upload_time_iso_8601": "2018-04-03T06:59:14.685287Z", "url": "https://files.pythonhosted.org/packages/51/75/1f77b693b3c153e6b37db370aee5481f4d02054cb498127889c14d0bba90/im_futuregcscompose-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c647e4b3ec8c836bc20fc14b38c127d1", "sha256": "ceff211e0777a95e81b8a69284e00f02a9eb27ae64b490ab564e74544e4ed4dd"}, "downloads": -1, "filename": "im_futuregcscompose-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c647e4b3ec8c836bc20fc14b38c127d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4711, "upload_time": "2018-04-03T06:59:15", "upload_time_iso_8601": "2018-04-03T06:59:15.455450Z", "url": "https://files.pythonhosted.org/packages/e6/c3/27365a0869b5c900f49317b9b4a8251f861399417d31578c3a2514f1d8e8/im_futuregcscompose-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "41efa8f74f573e48ff3b6d857e4e7e69", "sha256": "c75f083dab7c120fd855cc4c82768a8691e4144da36bfb628e7d86be693effa3"}, "downloads": -1, "filename": "im_futuregcscompose-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "41efa8f74f573e48ff3b6d857e4e7e69", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7795, "upload_time": "2018-04-03T06:59:14", "upload_time_iso_8601": "2018-04-03T06:59:14.685287Z", "url": "https://files.pythonhosted.org/packages/51/75/1f77b693b3c153e6b37db370aee5481f4d02054cb498127889c14d0bba90/im_futuregcscompose-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c647e4b3ec8c836bc20fc14b38c127d1", "sha256": "ceff211e0777a95e81b8a69284e00f02a9eb27ae64b490ab564e74544e4ed4dd"}, "downloads": -1, "filename": "im_futuregcscompose-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c647e4b3ec8c836bc20fc14b38c127d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4711, "upload_time": "2018-04-03T06:59:15", "upload_time_iso_8601": "2018-04-03T06:59:15.455450Z", "url": "https://files.pythonhosted.org/packages/e6/c3/27365a0869b5c900f49317b9b4a8251f861399417d31578c3a2514f1d8e8/im_futuregcscompose-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:44 2020"}