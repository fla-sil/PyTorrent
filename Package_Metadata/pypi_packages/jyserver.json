{"info": {"author": "Fernando Trias", "author_email": "sub@trias.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Bottle", "Framework :: Django", "Framework :: Flask", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Jyserver Web Framework with Pythonic Javascript Syntax\n\nJyserver is a framework for simplifying the creation of font ends for apps and\nkiosks by providing real-time access to the browser's DOM and Javascript from\nthe server using Python syntax. It also provides access to the Python code from\nthe browser's Javascript. It can be used stand-alone or with other\nframeworks such as Flask, Django, etc.\n\njyserver uses Python's dynamic syntax evaluation so that you can write\nPython code that will dynamically be converted to JS and executed on the\nbrowser. On the browser end, it uses JS's dynamic Proxy object to rewrite JS\ncode for execution by the server. All of this is done transparently without any\nadditional libraries or code. See examples below.\n\nDocumentation: [Class documentation](https://ftrias.github.io/jyserver/)\n\nGit (and examples): [github:ftrias/jyserver](https://github.com/ftrias/jyserver)\n\nTutorial: [Dev.to article](https://dev.to/ftrias/simple-kiosk-framework-in-python-2ane)\n\nTutorial Flask/Bottle: [Dev.to Flask article](https://dev.to/ftrias/access-js-dom-from-flask-app-using-jyserver-23h9)\n\n## Standalone Example:\n\n```python\nfrom jserver import Client, Server\nclass App(Client):\n    def __init__(self):\n        # For simplicity, this is the web page we are rendering. \n        # The module will add the relevant JS code to \n        # make it all work. You can also use an html file.\n        self.html = \"\"\"\n            <p id=\"time\">TIME</p>\n            <button id=\"reset\" \n                onclick=\"server.reset()\">Reset</button>\n        \"\"\"\n\n    # Called by onclick\n    def reset(self):\n        # reset counter so elapsed time is 0\n        self.start0 = time.time()\n        # executed on client\n        self.js.dom.time.innerHTML = \"{:.1f}\".format(0)\n\n    # If there is a \"main\" function, it gets executed. Program\n    # ends when the function ends. If there is no main, then\n    # server runs forever.\n    def main(self):\n        # start counter so elapsed time is 0\n        self.start0 = time.time()\n        while True:\n            # get current elapsed time, rounded to 0.1 seconds\n            t = \"{:.1f}\".format(time.time() - self.start0)\n            # update the DOM on the client\n            self.js.dom.time.innerHTML = t\n            time.sleep(0.1)\n\nhttpd = Server(App)\nprint(\"serving at port\", httpd.port)\nhttpd.start()\n```\n\n## Flask Example:\n\n```html\n<p id=\"time\">TIME</p>\n<button id=\"reset\" onclick=\"server.reset()\">Reset</button>\n```\n\n```python\nimport jyserver.Flask as js\nimport time\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@js.use(app)\nclass App():\n    def reset(self):\n        self.start0 = time.time()\n        self.js.dom.time.innerHTML = \"{:.1f}\".format(0)\n\n    @js.task\n    def main(self):\n        self.start0 = time.time()\n        while True:\n            t = \"{:.1f}\".format(time.time() - self.start0)\n            self.js.dom.time.innerHTML = t\n            time.sleep(0.1)\n\n@app.route('/')\ndef index_page(name=None):\n    App.main()\n    return App.render(render_template('flask-simple.html')\n```\n\n## Django example\n\n```python\nfrom django.shortcuts import render\nimport jyserver.Django as js\nimport time\n\n@js.use\nclass App():\n    def reset(self):\n        self.start0 = time.time()\n        self.js.dom.time.innerHTML = \"{:.1f}\".format(0)\n\n    @js.task\n    def main(self):\n        self.start0 = time.time()\n        while True:\n            t = \"{:.1f}\".format(time.time() - self.start0)\n            self.js.dom.time.innerHTML = t\n            time.sleep(0.1)\n\ndef hello_world(request):\n    App.main()\n    return App.render(render(request, 'hello_world.html', {}))\n```\n\nIn `urls.py` add this path:\n\n```python\nfrom jyserver.Django import process\n...\n    url(r'^_process_srv0$', process, name='process'),\n```\n\n## Bottle example\n\nA Bottle application using the built-in server can only be single threaded and thus\nall features may not work as expected. Most significantly, you cannot\nevaluate Javascript expressions from server callbacks. This limitation\nis not present if using a multi-threaded server such as tornado.\n\n```python\nfrom bottle import route, run\nimport jyserver.Bottle as js\nimport time\n\n@js.use\nclass App():\n    def reset(self):\n        self.start0 = time.time()\n\n    @js.task\n    def main(self):\n        self.start0 = time.time()\n        while True:\n            t = \"{:.1f}\".format(time.time() - self.start0)\n            self.js.dom.time.innerHTML = t\n            time.sleep(0.1)\n\n@route('/')\ndef index():\n    html = \"\"\"\n        <p id=\"time\">WHEN</p>\n        <button id=\"b1\" onclick=\"server.reset()\">Reset</button>\n    \"\"\"\n    App.main()\n    return App.render(html)\n\nrun(host='localhost', port=8080)\n```\n\n## Internals\n\nHow does this work? In the standalone example, the process is below. \nFlask/Bottle/Django is identical except for the httpd server.\n\n1. The server will listen for new http requests.\n\n2. When \"/\" is requested, jyserver will insert special Javascript code into the\n   HTML that enables communication before sending it to the browser. This code\n   creates the `server` Proxy object.\n\n3. This injected code will cause the browser to send an asynchronous http\n   request to the server asking for new commands for the browser to execute.\n   Then it waits for a response in the background. Requests are sent via\n   POST on /_process_srv0, which the server intercepts.\n\n4. When the user clicks on the button `reset`, the `server` Proxy object is\n   called. It will extract the method name--in this case `reset`--and then make\n   an http request to the server to execute that statement.\n\n5. The server will receive this http request, look at the App class, find a\n   method with that name and execute it.\n\n6. The executed method `reset()` first increases the variable `start0`. Then it\n   begins building a Javascript command by using the special `self.js` command.\n   `self.js` uses Python's dynamic language features `__getattr__`,\n   `__setattr__`, etc. to build Javascript syntax on the fly.\n\n7. When this \"dynamic\" statement get assigned a value (in our case `\"0.0\"`), it\n   will get converted to Javascript and sent to the browser, which has been\n   waiting for new commands in step 3. The statement will look like:\n   `document.getElementById(\"time\").innerHTML = \"0.0\"`\n\n8. The browser will get the statement, evaluate it and return the results to the\n   server. Then the browser will query for new commands in the background.\n\nIt seems complicated but this process usually takes less than a 0.01 seconds. If\nthere are multiple statements to execute, they get queued and processed\ntogether, which cuts back on the back-and-forth chatter.\n\nAll communication is initiated by the browser. The server only listens for\nspecial GET and POST requests.\n\n## Overview of operation\n\nThe browser initiates all communcation. The server listens for connections and\nsends respnses. Each page request is processed in its own thread so results may\nfinish out of order and any waiting does not stall either the browser or the\nserver.\n\n| Browser   |   Server  |\n|-----------|-----------|\n| Request pages |  Send pages with injected Javascript |\n| Query for new commands | Send any queued commands |\n| As commands finish, send back results | Match results with commands |\n| Send server statements for evaluation; wait for results |  Executes then and sends back results |\n\nWhen the browser queries for new commands, the server returns any pending\ncommands that the browser needs to execute. If there are no pending commands, it\nwaits for 5-10 seconds for new commands to queue before closing the connection.\nThe browser, upon getting an empty result will initiate a new connection to\nquery for results. Thus, although there is always a connection open between the\nbrowser and server, this connection is reset every 5-10 seconds to avoid a\ntimeout.\n\n## Other features\n\n### Assign callables in Python. \n\nFunctions are treated as first-class objects and can be assigned.\n\n```python\nclass App(Client):\n    def stop(self):\n        self.running = False\n        self.js.dom.b2.onclick = self.restart\n    def restart(self):\n        self.running = True\n        self.js.dom.b2.onclick = self.stop\n```\n\nIf a `main` function is given, it is executed. When it finishes, the server is\nterminated. If no `main` function is given, the server waits for requests in an\ninfinite loop.\n\n### Lazy evaluation provides live data\n\nStatements are evaluated lazily by `self.js`. This means that they are executed\nonly when they are resolved to an actual value, which can cause some statements\nto be evaluated out of order. For example, consider:\n\n```python\nv = self.js.var1\nself.js.var1 = 10\nprint(v)\n```\n\nThis will always return `10` no matter what `var1` is initially. This is\nbecause the assignment `v = self.js.var1` assigns a Javascript object and not\nthe actual value. The object is sent to the browser to be evaluated only when\nit is used by an operation. Every time you use `v` in an operation, it will be\nsent to the browser for evaluation. In this way, it provides a live link to the\ndata.\n\nThis behavior can be changed by calling `v = self.js.var1.eval()`, casting it\nsuch as `v = int(self.js.var)` or performing some operation such as adding as in\n`v = self.js.var + 10`.\n\n## Installation\n\nAvailable using pip or conda\n\n```bash\npip install jyserver\n```\n\nSource code available on [github:ftrias/jyserver](https://github.com/ftrias/jyserver)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ftrias/jyserver", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "jyserver", "package_url": "https://pypi.org/project/jyserver/", "platform": "", "project_url": "https://pypi.org/project/jyserver/", "project_urls": {"Homepage": "https://github.com/ftrias/jyserver"}, "release_url": "https://pypi.org/project/jyserver/0.0.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Web Framework with Pythonic Javascript Syntax", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Jyserver Web Framework with Pythonic Javascript Syntax</h1>\n<p>Jyserver is a framework for simplifying the creation of font ends for apps and\nkiosks by providing real-time access to the browser's DOM and Javascript from\nthe server using Python syntax. It also provides access to the Python code from\nthe browser's Javascript. It can be used stand-alone or with other\nframeworks such as Flask, Django, etc.</p>\n<p>jyserver uses Python's dynamic syntax evaluation so that you can write\nPython code that will dynamically be converted to JS and executed on the\nbrowser. On the browser end, it uses JS's dynamic Proxy object to rewrite JS\ncode for execution by the server. All of this is done transparently without any\nadditional libraries or code. See examples below.</p>\n<p>Documentation: <a href=\"https://ftrias.github.io/jyserver/\" rel=\"nofollow\">Class documentation</a></p>\n<p>Git (and examples): <a href=\"https://github.com/ftrias/jyserver\" rel=\"nofollow\">github:ftrias/jyserver</a></p>\n<p>Tutorial: <a href=\"https://dev.to/ftrias/simple-kiosk-framework-in-python-2ane\" rel=\"nofollow\">Dev.to article</a></p>\n<p>Tutorial Flask/Bottle: <a href=\"https://dev.to/ftrias/access-js-dom-from-flask-app-using-jyserver-23h9\" rel=\"nofollow\">Dev.to Flask article</a></p>\n<h2>Standalone Example:</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jserver</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">Server</span>\n<span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">(</span><span class=\"n\">Client</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># For simplicity, this is the web page we are rendering. </span>\n        <span class=\"c1\"># The module will add the relevant JS code to </span>\n        <span class=\"c1\"># make it all work. You can also use an html file.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">            &lt;p id=\"time\"&gt;TIME&lt;/p&gt;</span>\n<span class=\"s2\">            &lt;button id=\"reset\" </span>\n<span class=\"s2\">                onclick=\"server.reset()\"&gt;Reset&lt;/button&gt;</span>\n<span class=\"s2\">        \"\"\"</span>\n\n    <span class=\"c1\"># Called by onclick</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># reset counter so elapsed time is 0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"c1\"># executed on client</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">dom</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{:.1f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># If there is a \"main\" function, it gets executed. Program</span>\n    <span class=\"c1\"># ends when the function ends. If there is no main, then</span>\n    <span class=\"c1\"># server runs forever.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># start counter so elapsed time is 0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># get current elapsed time, rounded to 0.1 seconds</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{:.1f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span><span class=\"p\">)</span>\n            <span class=\"c1\"># update the DOM on the client</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">dom</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">innerHTML</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"n\">httpd</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"serving at port\"</span><span class=\"p\">,</span> <span class=\"n\">httpd</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">)</span>\n<span class=\"n\">httpd</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<h2>Flask Example:</h2>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"time\"</span><span class=\"p\">&gt;</span>TIME<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"reset\"</span> <span class=\"na\">onclick</span><span class=\"o\">=</span><span class=\"s\">\"server.reset()\"</span><span class=\"p\">&gt;</span>Reset<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jyserver.Flask</span> <span class=\"k\">as</span> <span class=\"nn\">js</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">render_template</span><span class=\"p\">,</span> <span class=\"n\">request</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@js</span><span class=\"o\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">dom</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{:.1f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@js</span><span class=\"o\">.</span><span class=\"n\">task</span>\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{:.1f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">dom</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">innerHTML</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index_page</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">App</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">App</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"s1\">'flask-simple.html'</span><span class=\"p\">)</span>\n</pre>\n<h2>Django example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jyserver.Django</span> <span class=\"k\">as</span> <span class=\"nn\">js</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"nd\">@js</span><span class=\"o\">.</span><span class=\"n\">use</span>\n<span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">dom</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{:.1f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@js</span><span class=\"o\">.</span><span class=\"n\">task</span>\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{:.1f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">dom</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">innerHTML</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">App</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">App</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s1\">'hello_world.html'</span><span class=\"p\">,</span> <span class=\"p\">{}))</span>\n</pre>\n<p>In <code>urls.py</code> add this path:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jyserver.Django</span> <span class=\"kn\">import</span> <span class=\"n\">process</span>\n<span class=\"o\">...</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^_process_srv0$'</span><span class=\"p\">,</span> <span class=\"n\">process</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'process'</span><span class=\"p\">),</span>\n</pre>\n<h2>Bottle example</h2>\n<p>A Bottle application using the built-in server can only be single threaded and thus\nall features may not work as expected. Most significantly, you cannot\nevaluate Javascript expressions from server callbacks. This limitation\nis not present if using a multi-threaded server such as tornado.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bottle</span> <span class=\"kn\">import</span> <span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"n\">run</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jyserver.Bottle</span> <span class=\"k\">as</span> <span class=\"nn\">js</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"nd\">@js</span><span class=\"o\">.</span><span class=\"n\">use</span>\n<span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@js</span><span class=\"o\">.</span><span class=\"n\">task</span>\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{:.1f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start0</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">dom</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">innerHTML</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n            <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\n    <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">        &lt;p id=\"time\"&gt;WHEN&lt;/p&gt;</span>\n<span class=\"s2\">        &lt;button id=\"b1\" onclick=\"server.reset()\"&gt;Reset&lt;/button&gt;</span>\n<span class=\"s2\">    \"\"\"</span>\n    <span class=\"n\">App</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">App</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n\n<span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8080</span><span class=\"p\">)</span>\n</pre>\n<h2>Internals</h2>\n<p>How does this work? In the standalone example, the process is below.\nFlask/Bottle/Django is identical except for the httpd server.</p>\n<ol>\n<li>\n<p>The server will listen for new http requests.</p>\n</li>\n<li>\n<p>When \"/\" is requested, jyserver will insert special Javascript code into the\nHTML that enables communication before sending it to the browser. This code\ncreates the <code>server</code> Proxy object.</p>\n</li>\n<li>\n<p>This injected code will cause the browser to send an asynchronous http\nrequest to the server asking for new commands for the browser to execute.\nThen it waits for a response in the background. Requests are sent via\nPOST on /_process_srv0, which the server intercepts.</p>\n</li>\n<li>\n<p>When the user clicks on the button <code>reset</code>, the <code>server</code> Proxy object is\ncalled. It will extract the method name--in this case <code>reset</code>--and then make\nan http request to the server to execute that statement.</p>\n</li>\n<li>\n<p>The server will receive this http request, look at the App class, find a\nmethod with that name and execute it.</p>\n</li>\n<li>\n<p>The executed method <code>reset()</code> first increases the variable <code>start0</code>. Then it\nbegins building a Javascript command by using the special <code>self.js</code> command.\n<code>self.js</code> uses Python's dynamic language features <code>__getattr__</code>,\n<code>__setattr__</code>, etc. to build Javascript syntax on the fly.</p>\n</li>\n<li>\n<p>When this \"dynamic\" statement get assigned a value (in our case <code>\"0.0\"</code>), it\nwill get converted to Javascript and sent to the browser, which has been\nwaiting for new commands in step 3. The statement will look like:\n<code>document.getElementById(\"time\").innerHTML = \"0.0\"</code></p>\n</li>\n<li>\n<p>The browser will get the statement, evaluate it and return the results to the\nserver. Then the browser will query for new commands in the background.</p>\n</li>\n</ol>\n<p>It seems complicated but this process usually takes less than a 0.01 seconds. If\nthere are multiple statements to execute, they get queued and processed\ntogether, which cuts back on the back-and-forth chatter.</p>\n<p>All communication is initiated by the browser. The server only listens for\nspecial GET and POST requests.</p>\n<h2>Overview of operation</h2>\n<p>The browser initiates all communcation. The server listens for connections and\nsends respnses. Each page request is processed in its own thread so results may\nfinish out of order and any waiting does not stall either the browser or the\nserver.</p>\n<table>\n<thead>\n<tr>\n<th>Browser</th>\n<th>Server</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Request pages</td>\n<td>Send pages with injected Javascript</td>\n</tr>\n<tr>\n<td>Query for new commands</td>\n<td>Send any queued commands</td>\n</tr>\n<tr>\n<td>As commands finish, send back results</td>\n<td>Match results with commands</td>\n</tr>\n<tr>\n<td>Send server statements for evaluation; wait for results</td>\n<td>Executes then and sends back results</td>\n</tr></tbody></table>\n<p>When the browser queries for new commands, the server returns any pending\ncommands that the browser needs to execute. If there are no pending commands, it\nwaits for 5-10 seconds for new commands to queue before closing the connection.\nThe browser, upon getting an empty result will initiate a new connection to\nquery for results. Thus, although there is always a connection open between the\nbrowser and server, this connection is reset every 5-10 seconds to avoid a\ntimeout.</p>\n<h2>Other features</h2>\n<h3>Assign callables in Python.</h3>\n<p>Functions are treated as first-class objects and can be assigned.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">(</span><span class=\"n\">Client</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">running</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">dom</span><span class=\"o\">.</span><span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">onclick</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">restart</span>\n    <span class=\"k\">def</span> <span class=\"nf\">restart</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">running</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">dom</span><span class=\"o\">.</span><span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">onclick</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stop</span>\n</pre>\n<p>If a <code>main</code> function is given, it is executed. When it finishes, the server is\nterminated. If no <code>main</code> function is given, the server waits for requests in an\ninfinite loop.</p>\n<h3>Lazy evaluation provides live data</h3>\n<p>Statements are evaluated lazily by <code>self.js</code>. This means that they are executed\nonly when they are resolved to an actual value, which can cause some statements\nto be evaluated out of order. For example, consider:</p>\n<pre><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">var1</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n</pre>\n<p>This will always return <code>10</code> no matter what <code>var1</code> is initially. This is\nbecause the assignment <code>v = self.js.var1</code> assigns a Javascript object and not\nthe actual value. The object is sent to the browser to be evaluated only when\nit is used by an operation. Every time you use <code>v</code> in an operation, it will be\nsent to the browser for evaluation. In this way, it provides a live link to the\ndata.</p>\n<p>This behavior can be changed by calling <code>v = self.js.var1.eval()</code>, casting it\nsuch as <code>v = int(self.js.var)</code> or performing some operation such as adding as in\n<code>v = self.js.var + 10</code>.</p>\n<h2>Installation</h2>\n<p>Available using pip or conda</p>\n<pre>pip install jyserver\n</pre>\n<p>Source code available on <a href=\"https://github.com/ftrias/jyserver\" rel=\"nofollow\">github:ftrias/jyserver</a></p>\n\n          </div>"}, "last_serial": 7047464, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a884769f98fb0feb90f2484ce1fb0bf2", "sha256": "be278b421e37f1ed7b7382ad508b9faf365defca9d20bcdb2bf013a8ffc67c5e"}, "downloads": -1, "filename": "jyserver-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a884769f98fb0feb90f2484ce1fb0bf2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12565, "upload_time": "2020-04-10T14:48:54", "upload_time_iso_8601": "2020-04-10T14:48:54.452335Z", "url": "https://files.pythonhosted.org/packages/00/81/2e45150adc3cbe4f75a9285e012b28c030ab134ffd976a652ef9535b0697/jyserver-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d392b226f04a9e2b5f47dc81f9f87b43", "sha256": "10198bf38bcba703065d8d6385cdbf289b1d7131d634dcef1f8a7eb8ee39b072"}, "downloads": -1, "filename": "jyserver-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d392b226f04a9e2b5f47dc81f9f87b43", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12465, "upload_time": "2020-04-10T14:48:58", "upload_time_iso_8601": "2020-04-10T14:48:58.718403Z", "url": "https://files.pythonhosted.org/packages/f2/81/b874f57b0b987d72b5469bc41cc1d7cb4c5de7a1ed9c268141e02a8c1aaf/jyserver-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3cd31e03bcc4c1d163121033c259d786", "sha256": "7073b024c3fc33cb2d0e366db4c50e48dd5afbd95f1816953fe85d5954747051"}, "downloads": -1, "filename": "jyserver-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3cd31e03bcc4c1d163121033c259d786", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14956, "upload_time": "2020-04-11T13:42:04", "upload_time_iso_8601": "2020-04-11T13:42:04.842213Z", "url": "https://files.pythonhosted.org/packages/0b/82/44d8e4688814a578ff22fc0d4a94930b91eefb8e7043b53ecca8b63f7a74/jyserver-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf1074fc6e219fedad2e05cb767f01d4", "sha256": "0233e111987cd5bb6a9ab140238569f6d12e267649b96e1a3a957f34b7746f33"}, "downloads": -1, "filename": "jyserver-0.0.2.tar.gz", "has_sig": false, "md5_digest": "cf1074fc6e219fedad2e05cb767f01d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16312, "upload_time": "2020-04-11T13:42:06", "upload_time_iso_8601": "2020-04-11T13:42:06.362622Z", "url": "https://files.pythonhosted.org/packages/1e/f4/e283c8eb5c13052a463e10057249573b1c80117b62562cde2b78559e7316/jyserver-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a528f67349a3cf65ffd959edcec21db3", "sha256": "4424bd28cedddc6471f0cd9c0bb648a99ac4fe8047d76d2f910e79c623bcc4d8"}, "downloads": -1, "filename": "jyserver-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a528f67349a3cf65ffd959edcec21db3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19229, "upload_time": "2020-04-15T14:52:50", "upload_time_iso_8601": "2020-04-15T14:52:50.177862Z", "url": "https://files.pythonhosted.org/packages/32/39/620dffdf6eb13cb463d3c86fdc748faaf6964ad7a1ba66599cd85eaeefdd/jyserver-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb0c620146c5c77dc179a133b6ae4712", "sha256": "96ee25a647230ae6cee2843a8035ad136203393dfb33933296306c61f6b06959"}, "downloads": -1, "filename": "jyserver-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cb0c620146c5c77dc179a133b6ae4712", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20663, "upload_time": "2020-04-15T14:52:52", "upload_time_iso_8601": "2020-04-15T14:52:52.331349Z", "url": "https://files.pythonhosted.org/packages/56/8b/857a3ecaf53a4a3ad7900168507c7f41dbca2cc87120bb500322e625db65/jyserver-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "169f8f81f16ebd792762dfdd74ab139f", "sha256": "865b07a4dca048f92c647d8f74d48825f517dc731d4c0a1e7766190db5e514df"}, "downloads": -1, "filename": "jyserver-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "169f8f81f16ebd792762dfdd74ab139f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24888, "upload_time": "2020-04-18T11:53:15", "upload_time_iso_8601": "2020-04-18T11:53:15.097506Z", "url": "https://files.pythonhosted.org/packages/79/a0/f1136c1ac9487d542b7e28f062945186fc488e3660d27e2955eb14b6017b/jyserver-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abb1d508381082baf05bef626153815b", "sha256": "fe84f32c5e88cd5054e7d0430b9c91523c7def55fc8ed806d73b742a93fd3204"}, "downloads": -1, "filename": "jyserver-0.0.5.tar.gz", "has_sig": false, "md5_digest": "abb1d508381082baf05bef626153815b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21902, "upload_time": "2020-04-18T11:53:16", "upload_time_iso_8601": "2020-04-18T11:53:16.548091Z", "url": "https://files.pythonhosted.org/packages/91/30/15197398466ef23a9251ce5efaf05584fd18fb198aa80bc98c43e36c6b0a/jyserver-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "169f8f81f16ebd792762dfdd74ab139f", "sha256": "865b07a4dca048f92c647d8f74d48825f517dc731d4c0a1e7766190db5e514df"}, "downloads": -1, "filename": "jyserver-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "169f8f81f16ebd792762dfdd74ab139f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24888, "upload_time": "2020-04-18T11:53:15", "upload_time_iso_8601": "2020-04-18T11:53:15.097506Z", "url": "https://files.pythonhosted.org/packages/79/a0/f1136c1ac9487d542b7e28f062945186fc488e3660d27e2955eb14b6017b/jyserver-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abb1d508381082baf05bef626153815b", "sha256": "fe84f32c5e88cd5054e7d0430b9c91523c7def55fc8ed806d73b742a93fd3204"}, "downloads": -1, "filename": "jyserver-0.0.5.tar.gz", "has_sig": false, "md5_digest": "abb1d508381082baf05bef626153815b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21902, "upload_time": "2020-04-18T11:53:16", "upload_time_iso_8601": "2020-04-18T11:53:16.548091Z", "url": "https://files.pythonhosted.org/packages/91/30/15197398466ef23a9251ce5efaf05584fd18fb198aa80bc98c43e36c6b0a/jyserver-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:57 2020"}