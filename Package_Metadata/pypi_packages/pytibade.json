{"info": {"author": "Tet Woo Lee", "author_email": "developer@twlee.nz", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "py-tibade: Python Titanium Backup Decrypt\n-----------------------------------------\nAuthor: Tet Woo Lee\n\nThis is a Python/[pycryptodome]-based implementation of [TitaniumBackupDecrypt],\nwhich was originally authored by Brian T. Hafer. It will decrypt backups made \nby [Titanium Backup for Android].\n\n[pycryptodome]: https://www.pycryptodome.org/en/latest/\n[TitaniumBackupDecrypt]: https://github.com/bhafer/TitaniumBackupDecrypt\n[Titanium Backup for Android]: https://www.titaniumtrack.com/titanium-backup.html\n\nAn alternative Python implementation is is [TiBUdecrypter](https://github.com/phyber/TiBUdecrypter)\ncreated by David O'Rourke.\n\n## Installation\n\nThis is available on both PyPi:\n```\npip install pytibade\npytibade --version\n```\n\nand conda:\n```\nconda create -n pytibade -c twlee79 pytibade\ncona activate pytibade\npytibade --version\n```\n\n## Usage\n```\npositional arguments:\n  inputfiles            Input file(s), either a list of filenames or as an\n                        unexpanded glob wildcards that is expanded internally\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -s SUFFIX, --suffix SUFFIX\n                        Suffix to add to base filename of decrypted files,\n                        appended to stem before any extensions (default:\n                        -decrypted)\n  -m MATCH_BASENAME, --match_basename MATCH_BASENAME\n                        Regular expression to match base filename of a file,\n                        applied to filename without directory; first capturing\n                        group should be base filename; an error is produced if\n                        files don't match this pattern, which can be ignored\n                        with the `-c` option (default:\n                        (^.*-[0-9\\-]+)[.]([a-z]{3})([.a-z]{0,4}))\n  -p PASSPHRASE, --passphrase PASSPHRASE\n                        Passphrase used to encrypt the backup files, if not\n                        present then user will be prompted to enter one; same\n                        passphrase used for all files. (default: None)\n  -c, --continue        Continue processing next file even if error\n                        encountered; by default script will stop on first\n                        error (default: False)\n  -v, --verbose         Increase logging verbosity, available levels 1 to 3\n                        with `-v` to `-vvv` (default: 0)\n```\n\nSimplest usage: `pytibade com.my.favourite.app-20200426-111127.tar.gz`\n\nThe script will then prompt for the passphrase. \n\nThe script can be used to decrypt a batch of files by specifying multiple \n`inputfiles` or wildcards in `inputfiles`. The same `passphrase` is used \nfor all files. The `--continue` option is useful to persistently attempt to \ndecrypt all specified files despite earlier failures (useful, for example, if \nthere is a mixture of encrypted and unencrypted files).\n\n\n## Titanium Backup File Format\n\n### Information Source\n\nThis information was originally taken from a post on Christian Egger's G+ page\n[that has now disappeared](https://plus.google.com/+ChristianEgger/posts/MQBmYhKDex5).\nIt has been reformatted a little for markdown by [David O'Rourke](https://github.com/phyber/TiBUdecrypter/blob/master/docs/FORMAT.md).\n\n### File Format\n\n```\n\"TB_ARMOR_V1\" '\\n'\npass_hmac_key '\\n'\npass_hmac_result '\\n'\npublic_key '\\n'\nenc_privkey_spec '\\n'\nenc_sesskey_spec '\\n'\ndata\n```\n\n### Explanation of format\n\nEach of the 5 \"variables\" (`pass_hmac_key`, `pass_hmac_result`,\n`public_key`, `enc_privkey_spec`, `enc_sesskey_spec`) is stored in\nBase64 format without linewraps (of course) and can be decoded with:\n`Base64.decode(pass_hmac_key, Base64.NO_WRAP)`\n\nThen the user-supplied passphrase (`String`) can be verified as follows:\n\n```\nMac mac = Mac.getInstance(\"HmacSHA1\");\nmac.init(new SecretKeySpec(pass_hmac_key, \"HmacSHA1\"));\nbyte[] sigBytes = mac.doFinal(passphrase.getBytes(\"UTF-8\"));\nboolean passphraseMatches = Arrays.equals(sigBytes, pass_hmac_result);\n```\n\nThen the passphrase is independently hashed with SHA-1. We append [twelve] `0x00` \nbytes to the 160-bit result to constitute the 256-bit AES key which is used to\ndecrypt `enc_privkey_spec` (with an IV of [sixteen] `0x00` bytes). [Decrypt \nusing AES-256 in CBC mode and perform PKCS7 unpadding with block size 16.]\n\nThen we build the KeyPair object as follows:\n\n```\nKeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\nPrivateKey privateKey2 = keyFactory.generatePrivate(\n    new PKCS8EncodedKeySpec(privateKey)\n);\nPublicKey public_key2 = keyFactory.generatePublic(\n    new X509EncodedKeySpec(public_key)\n);\nKeyPair keyPair = new KeyPair(public_key2, privateKey2);\n```\n\nThen we decrypt the session key as follows:\n\n```\nCipher rsaDecrypt = Cipher.getInstance(\"RSA/NONE/PKCS1Padding\");\nrsaDecrypt.init(Cipher.DECRYPT_MODE, keyPair.getPrivate());\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nCipherOutputStream cos = new CipherOutputStream(baos, rsaDecrypt);\ncos.write(enc_sesskey_spec); cos.close();\nbyte[] sessionKey = baos.toByteArray();\n```\n\nAnd finally, we decrypt the data itself with the session key (which can be\neither a 128-bit, 192-bit or 256-bit key) and with a `0x00` IV. [Remember\nto PKCS7 unpad with block size 16].\n\nWhile the \"zero\" IV is suboptimal from a security standpoint, it allows\nfiles to be encoded faster - because every little bit counts, especially\nwhen we store backups with LZO compression.\n\n-------------------------------------------------------------------------------\n\nAuthor        |Tet Woo Lee\n--------------|----------------------------\nCreated       | 2020-04-26\nCopyright     | \u00a9 2020 Tet Woo Lee\nLicense       | GPLv3\nDependencies  | pycryptodome, tested with v3.8.2\n\n### Change log\n\n+ version 1.0.dev1 2020-04-26  \n  Working version\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/twlee79/py-tibade", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pytibade", "package_url": "https://pypi.org/project/pytibade/", "platform": "", "project_url": "https://pypi.org/project/pytibade/", "project_urls": {"Homepage": "https://github.com/twlee79/py-tibade"}, "release_url": "https://pypi.org/project/pytibade/1.0.0.dev1/", "requires_dist": ["pycryptodome (>=v3.8.2)"], "requires_python": "", "summary": "Decrypt Titanium Backup for Android backups with Python/pycryptodome", "version": "1.0.0.dev1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>py-tibade: Python Titanium Backup Decrypt</h2>\n<p>Author: Tet Woo Lee</p>\n<p>This is a Python/<a href=\"https://www.pycryptodome.org/en/latest/\" rel=\"nofollow\">pycryptodome</a>-based implementation of <a href=\"https://github.com/bhafer/TitaniumBackupDecrypt\" rel=\"nofollow\">TitaniumBackupDecrypt</a>,\nwhich was originally authored by Brian T. Hafer. It will decrypt backups made\nby <a href=\"https://www.titaniumtrack.com/titanium-backup.html\" rel=\"nofollow\">Titanium Backup for Android</a>.</p>\n<p>An alternative Python implementation is is <a href=\"https://github.com/phyber/TiBUdecrypter\" rel=\"nofollow\">TiBUdecrypter</a>\ncreated by David O'Rourke.</p>\n<h2>Installation</h2>\n<p>This is available on both PyPi:</p>\n<pre><code>pip install pytibade\npytibade --version\n</code></pre>\n<p>and conda:</p>\n<pre><code>conda create -n pytibade -c twlee79 pytibade\ncona activate pytibade\npytibade --version\n</code></pre>\n<h2>Usage</h2>\n<pre><code>positional arguments:\n  inputfiles            Input file(s), either a list of filenames or as an\n                        unexpanded glob wildcards that is expanded internally\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -s SUFFIX, --suffix SUFFIX\n                        Suffix to add to base filename of decrypted files,\n                        appended to stem before any extensions (default:\n                        -decrypted)\n  -m MATCH_BASENAME, --match_basename MATCH_BASENAME\n                        Regular expression to match base filename of a file,\n                        applied to filename without directory; first capturing\n                        group should be base filename; an error is produced if\n                        files don't match this pattern, which can be ignored\n                        with the `-c` option (default:\n                        (^.*-[0-9\\-]+)[.]([a-z]{3})([.a-z]{0,4}))\n  -p PASSPHRASE, --passphrase PASSPHRASE\n                        Passphrase used to encrypt the backup files, if not\n                        present then user will be prompted to enter one; same\n                        passphrase used for all files. (default: None)\n  -c, --continue        Continue processing next file even if error\n                        encountered; by default script will stop on first\n                        error (default: False)\n  -v, --verbose         Increase logging verbosity, available levels 1 to 3\n                        with `-v` to `-vvv` (default: 0)\n</code></pre>\n<p>Simplest usage: <code>pytibade com.my.favourite.app-20200426-111127.tar.gz</code></p>\n<p>The script will then prompt for the passphrase.</p>\n<p>The script can be used to decrypt a batch of files by specifying multiple\n<code>inputfiles</code> or wildcards in <code>inputfiles</code>. The same <code>passphrase</code> is used\nfor all files. The <code>--continue</code> option is useful to persistently attempt to\ndecrypt all specified files despite earlier failures (useful, for example, if\nthere is a mixture of encrypted and unencrypted files).</p>\n<h2>Titanium Backup File Format</h2>\n<h3>Information Source</h3>\n<p>This information was originally taken from a post on Christian Egger's G+ page\n<a href=\"https://plus.google.com/+ChristianEgger/posts/MQBmYhKDex5\" rel=\"nofollow\">that has now disappeared</a>.\nIt has been reformatted a little for markdown by <a href=\"https://github.com/phyber/TiBUdecrypter/blob/master/docs/FORMAT.md\" rel=\"nofollow\">David O'Rourke</a>.</p>\n<h3>File Format</h3>\n<pre><code>\"TB_ARMOR_V1\" '\\n'\npass_hmac_key '\\n'\npass_hmac_result '\\n'\npublic_key '\\n'\nenc_privkey_spec '\\n'\nenc_sesskey_spec '\\n'\ndata\n</code></pre>\n<h3>Explanation of format</h3>\n<p>Each of the 5 \"variables\" (<code>pass_hmac_key</code>, <code>pass_hmac_result</code>,\n<code>public_key</code>, <code>enc_privkey_spec</code>, <code>enc_sesskey_spec</code>) is stored in\nBase64 format without linewraps (of course) and can be decoded with:\n<code>Base64.decode(pass_hmac_key, Base64.NO_WRAP)</code></p>\n<p>Then the user-supplied passphrase (<code>String</code>) can be verified as follows:</p>\n<pre><code>Mac mac = Mac.getInstance(\"HmacSHA1\");\nmac.init(new SecretKeySpec(pass_hmac_key, \"HmacSHA1\"));\nbyte[] sigBytes = mac.doFinal(passphrase.getBytes(\"UTF-8\"));\nboolean passphraseMatches = Arrays.equals(sigBytes, pass_hmac_result);\n</code></pre>\n<p>Then the passphrase is independently hashed with SHA-1. We append [twelve] <code>0x00</code>\nbytes to the 160-bit result to constitute the 256-bit AES key which is used to\ndecrypt <code>enc_privkey_spec</code> (with an IV of [sixteen] <code>0x00</code> bytes). [Decrypt\nusing AES-256 in CBC mode and perform PKCS7 unpadding with block size 16.]</p>\n<p>Then we build the KeyPair object as follows:</p>\n<pre><code>KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\nPrivateKey privateKey2 = keyFactory.generatePrivate(\n    new PKCS8EncodedKeySpec(privateKey)\n);\nPublicKey public_key2 = keyFactory.generatePublic(\n    new X509EncodedKeySpec(public_key)\n);\nKeyPair keyPair = new KeyPair(public_key2, privateKey2);\n</code></pre>\n<p>Then we decrypt the session key as follows:</p>\n<pre><code>Cipher rsaDecrypt = Cipher.getInstance(\"RSA/NONE/PKCS1Padding\");\nrsaDecrypt.init(Cipher.DECRYPT_MODE, keyPair.getPrivate());\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nCipherOutputStream cos = new CipherOutputStream(baos, rsaDecrypt);\ncos.write(enc_sesskey_spec); cos.close();\nbyte[] sessionKey = baos.toByteArray();\n</code></pre>\n<p>And finally, we decrypt the data itself with the session key (which can be\neither a 128-bit, 192-bit or 256-bit key) and with a <code>0x00</code> IV. [Remember\nto PKCS7 unpad with block size 16].</p>\n<p>While the \"zero\" IV is suboptimal from a security standpoint, it allows\nfiles to be encoded faster - because every little bit counts, especially\nwhen we store backups with LZO compression.</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>Author</th>\n<th>Tet Woo Lee</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Created</td>\n<td>2020-04-26</td>\n</tr>\n<tr>\n<td>Copyright</td>\n<td>\u00a9 2020 Tet Woo Lee</td>\n</tr>\n<tr>\n<td>License</td>\n<td>GPLv3</td>\n</tr>\n<tr>\n<td>Dependencies</td>\n<td>pycryptodome, tested with v3.8.2</td>\n</tr></tbody></table>\n<h3>Change log</h3>\n<ul>\n<li>version 1.0.dev1 2020-04-26<br>\nWorking version</li>\n</ul>\n\n          </div>"}, "last_serial": 7105709, "releases": {"1.0.0.dev1": [{"comment_text": "", "digests": {"md5": "5176691fe0f98baaa76227ebc91d55fc", "sha256": "c74a894aedd954d73f5d6b19ac9d2999014a203400b680a2df52fc9de782f355"}, "downloads": -1, "filename": "pytibade-1.0.0.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "5176691fe0f98baaa76227ebc91d55fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12377, "upload_time": "2020-04-26T16:16:54", "upload_time_iso_8601": "2020-04-26T16:16:54.638776Z", "url": "https://files.pythonhosted.org/packages/d5/73/d6b22d5f083587842f0f799019427090024e930b27aecf7f03a5af68e3da/pytibade-1.0.0.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7be4569200cc06d0af16faef99263b74", "sha256": "f548a0561889628401f88a05ef98fa151a2449688541717ce3ee53732c4d16cb"}, "downloads": -1, "filename": "pytibade-1.0.0.dev1.tar.gz", "has_sig": false, "md5_digest": "7be4569200cc06d0af16faef99263b74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8914, "upload_time": "2020-04-26T16:16:56", "upload_time_iso_8601": "2020-04-26T16:16:56.799036Z", "url": "https://files.pythonhosted.org/packages/af/97/237d286db3803f8e58c97f59242c754526adb2b4a3f2d1df7a5cb88dac02/pytibade-1.0.0.dev1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5176691fe0f98baaa76227ebc91d55fc", "sha256": "c74a894aedd954d73f5d6b19ac9d2999014a203400b680a2df52fc9de782f355"}, "downloads": -1, "filename": "pytibade-1.0.0.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "5176691fe0f98baaa76227ebc91d55fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12377, "upload_time": "2020-04-26T16:16:54", "upload_time_iso_8601": "2020-04-26T16:16:54.638776Z", "url": "https://files.pythonhosted.org/packages/d5/73/d6b22d5f083587842f0f799019427090024e930b27aecf7f03a5af68e3da/pytibade-1.0.0.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7be4569200cc06d0af16faef99263b74", "sha256": "f548a0561889628401f88a05ef98fa151a2449688541717ce3ee53732c4d16cb"}, "downloads": -1, "filename": "pytibade-1.0.0.dev1.tar.gz", "has_sig": false, "md5_digest": "7be4569200cc06d0af16faef99263b74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8914, "upload_time": "2020-04-26T16:16:56", "upload_time_iso_8601": "2020-04-26T16:16:56.799036Z", "url": "https://files.pythonhosted.org/packages/af/97/237d286db3803f8e58c97f59242c754526adb2b4a3f2d1df7a5cb88dac02/pytibade-1.0.0.dev1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:21 2020"}