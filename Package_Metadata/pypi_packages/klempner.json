{"info": {"author": "Dave Shawley", "author_email": "daveshawley@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries"], "description": "klempner\n========\nConstructs URLs that targeting other services.\n\n|Version| |Python| |Source| |Coverage| |Quality| |Docs| |CI|\n\nThis library makes building URLs for inter-service communication safer\nand easier to build.\n\nURL building\n------------\n\n.. code-block:: python\n\n   url = klempner.url.build_url('account', 'path', 'with spaces',\n                                query='arg',  multi=['arg', 'support'])\n   print(url)\n   # http://account/path/with%20spaces?query=arg&multi=arg&multi=support\n\n``build_url`` takes care of formatting the path and query parameters correctly\nin addition to discovering the service name.  In this example, the service name\nis used as-is (see *Unconfigured usage* below).  The real power in ``build_url``\nis its ability to discover the scheme, host name, and port number based on the\noperating environment.\n\n``build_url`` uses the ``http`` scheme by default.  If the port is determined\nby the discovery mechanism, then the scheme is set using a simple global\nmapping from port number to scheme.\n\nDiscovery examples\n------------------\n\nUnconfigured usage\n~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   url = klempner.url.build_url('account')\n   print(url)  # http://account/\n\nThis isn't very useful but if you do not configure the discovery mechanism,\nthen ``build_url`` assumes that the requested service is accessible directly\nby name.\n\nConsul service discovery\n~~~~~~~~~~~~~~~~~~~~~~~~\nThe basic form of using consul is not *discovery* at all.  It is simply\nURL construction that follows the naming convention that Consul's DNS\ninterface exposes.\n\n.. code-block:: python\n\n   os.environ['KLEMPNER_DISCOVERY'] = 'consul'\n   os.environ['CONSUL_DATACENTER'] = 'production'\n   url = klempner.url.build_url('account')\n   print(url)  # http://account.service.production.consul/\n\nIf you append ``+agent`` to the discovery method, then ``build_url`` will\nconnect to a Consul agent and retrieve the port number for services.  If the\nport has a registered service associated with it, then the service name will\nbe used as the scheme.\n\nAssuming that the *account* service is registered in consul with a service port\nof 8000:\n\n.. code-block:: python\n\n   os.environ['KLEMPNER_DISCOVERY'] = 'consul+agent'\n   url = klempner.url.build_url('account')\n   print(url)  # http://account.service.production.consul:8000/\n\nNow let's look at what happens for a RabbitMQ connection:\n\n.. code-block:: python\n\n   url = klempner.url.build_url('rabbit')\n   print(url)  # amqp://rabbit.service.production.consul:5432/\n\nThe scheme is derived by looking up the port in the\n``klempner.config.URL_SCHEME_MAP`` and using the result if the lookup\nsucceeds.\n\nThe library will connect to the agent specified by the ``CONSUL_HTTP_ADDR``\nenvironment variable.  If the environment variable is not specified, then the\nagent listening on the localhost will be used.\n\nKubernetes service discovery\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   os.environ['KLEMPNER_DISCOVERY'] = 'kubernetes'\n   url = klempner.url.build_url('account')\n   print(url)  # http://account.default.svc.cluster.local/\n\n.. code-block:: python\n\n   os.environ['KLEMPNER_DISCOVERY'] = 'kubernetes'\n   os.environ['KUBERNETES_NAMESPACE'] = 'my-team'\n   url = klempner.url.build_url('account')\n   print(url)  # http://account.my-team.svc.cluster.local/\n\nDocker-compose service discovery\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n   os.environ['KLEMPNER_DISCOVERY'] = 'docker-compose'\n   os.environ['COMPOSE_PROJECT_NAME'] = 'foo'\n   url = klempner.url.build_url('account')\n   print(url)  # http://127.0.0.1:32867/\n\nThis discovery mechanism discovers IP and port numbers for services using\nthe Docker API.  ``build_url`` retrieves the list of services from the docker\nhost, filters the list using the \"com.docker.compose.project\" label, and\nselects the service using the \"com.docker.compose.service\" label.\n\nEnvironment variable discovery\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis form of discovery uses environment variables with the service name encoded\ninto them:\n\n.. code-block:: python\n\n   os.environ['KLEMPNER_DISCOVERY'] = 'environment'\n   os.environ['ACCOUNT_HOST'] = '10.2.12.23'\n   os.environ['ACCOUNT_PORT'] = '11223'\n   url = klempner.url.build_url('account')\n   print(url)  # http://10.2.12.23:11223/\n\nFor a service named ``adder``, the following environment variables are used\nif they are set.\n\n+------------------+-------------------------------+-------------+\n| Name             | URL component                 | Default     |\n+------------------+-------------------------------+-------------+\n| ``ADDER_HOST``   | host portion of the authority | *none*      |\n+------------------+-------------------------------+-------------+\n| ``ADDER_PORT``   | port portion of the authority | *omitted*   |\n+------------------+-------------------------------+-------------+\n| ``ADDER_SCHEME`` | scheme                        | *see below* |\n+------------------+-------------------------------+-------------+\n\nThe URL scheme defaults to looking up the port number in the\n``klempner.config.URL_SCHEME_MAP`` dictionary.  If the port number is not\nin the dictionary, then ``http`` is used as a default.\n\n.. code-block:: python\n\n   os.environ['KLEMPNER_DISCOVERY'] = 'environment'\n   os.environ['ACCOUNT_HOST'] = '10.2.12.23'\n   os.environ['ACCOUNT_PORT'] = '443'\n   url = klempner.url.build_url('account')\n   print(url)  # https://10.2.12.23:443/\n\nWant to contribute?\n-------------------\n*Thank you.*  See `docs/contributing.rst`_ or\nhttps://klempner.readthedocs.io/en/latest/contributing.html for what you need\nto do.\n\n.. _docs/contributing.rst: https://github.com/dave-shawley/klempner/blob\n   /master/docs/contributing.rst\n\n.. |CI| image:: https://img.shields.io/circleci/project/github/dave-shawley/klempner/master.svg\n   :target: https://circleci.com/gh/dave-shawley/klempner\n.. |Coverage| image:: https://img.shields.io/coveralls/github/dave-shawley/klempner.svg\n   :target: https://coveralls.io/github/dave-shawley/klempner\n.. |Docs| image:: https://img.shields.io/readthedocs/klempner.svg\n   :target: https://klempner.readthedocs.io/\n.. |Python| image:: https://img.shields.io/pypi/pyversions/klempner.svg\n   :target: https://pypi.org/project/klempner\n.. |Quality| image:: https://sonarcloud.io/api/project_badges/measure?project=dave-shawley_klempner&metric=alert_status\n   :target: https://sonarcloud.io/dashboard?id=dave-shawley_klempner\n.. |Source| image:: https://img.shields.io/github/stars/dave-shawley/klempner.svg?logo=github\n   :target: https://github.com/dave-shawley/klempner\n.. |Version| image:: https://img.shields.io/pypi/v/klempner.svg\n   :target: https://pypi.org/project/klempner", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://klempner.readthedocs.io/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "klempner", "package_url": "https://pypi.org/project/klempner/", "platform": "", "project_url": "https://pypi.org/project/klempner/", "project_urls": {"Builds": "https://circleci.com/gh/dave-shawley/klempner", "Documentation": "https://klempner.readthedocs.io/", "Download": "https://pypi.org/project/klempner/", "Homepage": "https://klempner.readthedocs.io/", "Quality Reports": "https://sonarcloud.io/dashboard?id=dave-shawley_klempner", "Source Code": "https://github.com/dave-shawley/klempner"}, "release_url": "https://pypi.org/project/klempner/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Construct service request URLs", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Constructs URLs that targeting other services.</p>\n<p><a href=\"https://pypi.org/project/klempner\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b48ffe2c05fe7e88c99429e15c00f295ce2a68d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b6c656d706e65722e737667\"></a> <a href=\"https://pypi.org/project/klempner\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09b23140ad9f7867e6d542dc2dc3f003a78b03be/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6b6c656d706e65722e737667\"></a> <a href=\"https://github.com/dave-shawley/klempner\" rel=\"nofollow\"><img alt=\"Source\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/132df6fbc3c4544c5c35dd75af975dd603eb243f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f646176652d736861776c65792f6b6c656d706e65722e7376673f6c6f676f3d676974687562\"></a> <a href=\"https://coveralls.io/github/dave-shawley/klempner\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ae1adfe4b1657bbffd653506dfc02d539114cb5/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f646176652d736861776c65792f6b6c656d706e65722e737667\"></a> <a href=\"https://sonarcloud.io/dashboard?id=dave-shawley_klempner\" rel=\"nofollow\"><img alt=\"Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ada1b133828a44e82414035b66e947a7df1e1fa6/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d646176652d736861776c65795f6b6c656d706e6572266d65747269633d616c6572745f737461747573\"></a> <a href=\"https://klempner.readthedocs.io/\" rel=\"nofollow\"><img alt=\"Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc0f581ef5fbc9d9fbc81f4b938c600037d34ec6/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f6b6c656d706e65722e737667\"></a> <a href=\"https://circleci.com/gh/dave-shawley/klempner\" rel=\"nofollow\"><img alt=\"CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75b117cec95ea4da221ffef1c71ccfb42954ca48/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f646176652d736861776c65792f6b6c656d706e65722f6d61737465722e737667\"></a></p>\n<p>This library makes building URLs for inter-service communication safer\nand easier to build.</p>\n<div id=\"url-building\">\n<h2>URL building</h2>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">klempner</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">build_url</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">,</span> <span class=\"s1\">'path'</span><span class=\"p\">,</span> <span class=\"s1\">'with spaces'</span><span class=\"p\">,</span>\n                             <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'arg'</span><span class=\"p\">,</span>  <span class=\"n\">multi</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'arg'</span><span class=\"p\">,</span> <span class=\"s1\">'support'</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"c1\"># http://account/path/with%20spaces?query=arg&amp;multi=arg&amp;multi=support</span>\n</pre>\n<p><tt>build_url</tt> takes care of formatting the path and query parameters correctly\nin addition to discovering the service name.  In this example, the service name\nis used as-is (see <em>Unconfigured usage</em> below).  The real power in <tt>build_url</tt>\nis its ability to discover the scheme, host name, and port number based on the\noperating environment.</p>\n<p><tt>build_url</tt> uses the <tt>http</tt> scheme by default.  If the port is determined\nby the discovery mechanism, then the scheme is set using a simple global\nmapping from port number to scheme.</p>\n</div>\n<div id=\"discovery-examples\">\n<h2>Discovery examples</h2>\n<div id=\"unconfigured-usage\">\n<h3>Unconfigured usage</h3>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">klempner</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">build_url</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># http://account/</span>\n</pre>\n<p>This isn\u2019t very useful but if you do not configure the discovery mechanism,\nthen <tt>build_url</tt> assumes that the requested service is accessible directly\nby name.</p>\n</div>\n<div id=\"consul-service-discovery\">\n<h3>Consul service discovery</h3>\n<p>The basic form of using consul is not <em>discovery</em> at all.  It is simply\nURL construction that follows the naming convention that Consul\u2019s DNS\ninterface exposes.</p>\n<pre><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'KLEMPNER_DISCOVERY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'consul'</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'CONSUL_DATACENTER'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'production'</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">klempner</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">build_url</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># http://account.service.production.consul/</span>\n</pre>\n<p>If you append <tt>+agent</tt> to the discovery method, then <tt>build_url</tt> will\nconnect to a Consul agent and retrieve the port number for services.  If the\nport has a registered service associated with it, then the service name will\nbe used as the scheme.</p>\n<p>Assuming that the <em>account</em> service is registered in consul with a service port\nof 8000:</p>\n<pre><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'KLEMPNER_DISCOVERY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'consul+agent'</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">klempner</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">build_url</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># http://account.service.production.consul:8000/</span>\n</pre>\n<p>Now let\u2019s look at what happens for a RabbitMQ connection:</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">klempner</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">build_url</span><span class=\"p\">(</span><span class=\"s1\">'rabbit'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># amqp://rabbit.service.production.consul:5432/</span>\n</pre>\n<p>The scheme is derived by looking up the port in the\n<tt>klempner.config.URL_SCHEME_MAP</tt> and using the result if the lookup\nsucceeds.</p>\n<p>The library will connect to the agent specified by the <tt>CONSUL_HTTP_ADDR</tt>\nenvironment variable.  If the environment variable is not specified, then the\nagent listening on the localhost will be used.</p>\n</div>\n<div id=\"kubernetes-service-discovery\">\n<h3>Kubernetes service discovery</h3>\n<pre><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'KLEMPNER_DISCOVERY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'kubernetes'</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">klempner</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">build_url</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># http://account.default.svc.cluster.local/</span>\n</pre>\n<pre><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'KLEMPNER_DISCOVERY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'kubernetes'</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'KUBERNETES_NAMESPACE'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'my-team'</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">klempner</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">build_url</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># http://account.my-team.svc.cluster.local/</span>\n</pre>\n</div>\n<div id=\"docker-compose-service-discovery\">\n<h3>Docker-compose service discovery</h3>\n<pre><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'KLEMPNER_DISCOVERY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'docker-compose'</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'COMPOSE_PROJECT_NAME'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'foo'</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">klempner</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">build_url</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># http://127.0.0.1:32867/</span>\n</pre>\n<p>This discovery mechanism discovers IP and port numbers for services using\nthe Docker API.  <tt>build_url</tt> retrieves the list of services from the docker\nhost, filters the list using the \u201ccom.docker.compose.project\u201d label, and\nselects the service using the \u201ccom.docker.compose.service\u201d label.</p>\n</div>\n<div id=\"environment-variable-discovery\">\n<h3>Environment variable discovery</h3>\n<p>This form of discovery uses environment variables with the service name encoded\ninto them:</p>\n<pre><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'KLEMPNER_DISCOVERY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'environment'</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'ACCOUNT_HOST'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'10.2.12.23'</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'ACCOUNT_PORT'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'11223'</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">klempner</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">build_url</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># http://10.2.12.23:11223/</span>\n</pre>\n<p>For a service named <tt>adder</tt>, the following environment variables are used\nif they are set.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Name</td>\n<td>URL component</td>\n<td>Default</td>\n</tr>\n<tr><td><tt>ADDER_HOST</tt></td>\n<td>host portion of the authority</td>\n<td><em>none</em></td>\n</tr>\n<tr><td><tt>ADDER_PORT</tt></td>\n<td>port portion of the authority</td>\n<td><em>omitted</em></td>\n</tr>\n<tr><td><tt>ADDER_SCHEME</tt></td>\n<td>scheme</td>\n<td><em>see below</em></td>\n</tr>\n</tbody>\n</table>\n<p>The URL scheme defaults to looking up the port number in the\n<tt>klempner.config.URL_SCHEME_MAP</tt> dictionary.  If the port number is not\nin the dictionary, then <tt>http</tt> is used as a default.</p>\n<pre><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'KLEMPNER_DISCOVERY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'environment'</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'ACCOUNT_HOST'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'10.2.12.23'</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'ACCOUNT_PORT'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'443'</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">klempner</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">build_url</span><span class=\"p\">(</span><span class=\"s1\">'account'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># https://10.2.12.23:443/</span>\n</pre>\n</div>\n</div>\n<div id=\"want-to-contribute\">\n<h2>Want to contribute?</h2>\n<p><em>Thank you.</em>  See <a href=\"https://github.com/dave-shawley/klempner/blob/master/docs/contributing.rst\" rel=\"nofollow\">docs/contributing.rst</a> or\n<a href=\"https://klempner.readthedocs.io/en/latest/contributing.html\" rel=\"nofollow\">https://klempner.readthedocs.io/en/latest/contributing.html</a> for what you need\nto do.</p>\n</div>\n\n          </div>"}, "last_serial": 5316448, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0f689d4715235dd26aa7ce33f6835fec", "sha256": "93d477c4757e40ded61ef14b3164789e00c1bd0460c606db987125771a59e614"}, "downloads": -1, "filename": "klempner-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0f689d4715235dd26aa7ce33f6835fec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8675, "upload_time": "2019-05-05T13:50:29", "upload_time_iso_8601": "2019-05-05T13:50:29.850912Z", "url": "https://files.pythonhosted.org/packages/dd/11/665c3dc6a143525decdd2e48f3812bb2b07f02efca762d6641174cf9407d/klempner-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "4babece3bc419cb43deba06b737d77c4", "sha256": "788a074ec43bad83743b82cb360ceca99e0a00710157538ead140313fa0b011b"}, "downloads": -1, "filename": "klempner-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4babece3bc419cb43deba06b737d77c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11821, "upload_time": "2019-05-19T12:05:48", "upload_time_iso_8601": "2019-05-19T12:05:48.653852Z", "url": "https://files.pythonhosted.org/packages/26/e8/81daa9356a6dfc3cbc1e533a03af338d3bb7bd47a2f03ba3573ef495aa73/klempner-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4d84dce55d2bc0634717bedb210d4063", "sha256": "452d54c2db2d5633647295631f989f21e7bcf0618a0e64a650d1651dc6446858"}, "downloads": -1, "filename": "klempner-0.0.3.tar.gz", "has_sig": false, "md5_digest": "4d84dce55d2bc0634717bedb210d4063", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13663, "upload_time": "2019-05-25T13:25:59", "upload_time_iso_8601": "2019-05-25T13:25:59.761925Z", "url": "https://files.pythonhosted.org/packages/f1/69/347175582a7b7237f3786b25c496c990571a24e38e086806a9e783f0706d/klempner-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d84dce55d2bc0634717bedb210d4063", "sha256": "452d54c2db2d5633647295631f989f21e7bcf0618a0e64a650d1651dc6446858"}, "downloads": -1, "filename": "klempner-0.0.3.tar.gz", "has_sig": false, "md5_digest": "4d84dce55d2bc0634717bedb210d4063", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13663, "upload_time": "2019-05-25T13:25:59", "upload_time_iso_8601": "2019-05-25T13:25:59.761925Z", "url": "https://files.pythonhosted.org/packages/f1/69/347175582a7b7237f3786b25c496c990571a24e38e086806a9e783f0706d/klempner-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:21 2020"}