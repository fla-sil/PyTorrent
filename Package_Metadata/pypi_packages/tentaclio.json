{"info": {"author": "Octopus Energy", "author_email": "nerds@octoenergy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Typing :: Typed"], "description": "[![CircleCI status](https://circleci.com/gh/octoenergy/tentaclio/tree/master.png?circle-token=df7aad11367f1ace5bce253b18efb6b21eaa65bc)](https://circleci.com/gh/octoenergy/tentaclio/tree/master)\n[![codecov](https://codecov.io/gh/octoenergy/tentaclio/branch/master/graph/badge.svg)](https://codecov.io/gh/octoenergy/tentaclio)\n\n\n# Tentaclio\n\nPython library that simplifies:\n* Handling streams from different protocols such as `file:`, `ftp:`, `sftp:`, `s3:`, ...\n* Opening database connections.\n* Managing the credentials in distributed systems.\n\nMain considerations in the design:\n* Easy to use: all streams are open via `tentaclio.open`, all database connections through `tentaclio.db`.\n* URLs are the basic resource locator and db connection string.\n* Automagic authentication for protected resources.\n* Extensible: you can add your own handlers for other schemes.\n* Pandas interaction.\n\n# Quick Examples.\n\n## Read and write streams.\n```python\nimport tentaclio\ncontents = \"\ud83d\udc4b \ud83d\udc19\"\n\nwith tentaclio.open(\"ftp://localhost:2021/upload/file.txt\", mode=\"w\") as writer:\n    writer.write(contents)\n\n# Using boto3 authentication under the hood.\nbucket = \"s3://my-bucket/octopus/hello.txt\"\nwith tentaclio.open(bucket) as reader:\n    print(reader.read())\n```\n\n## Copy streams\n```python\nimport tentaclio\n\ntentaclio.copy(\"/home/constantine/data.csv\", \"sftp://constantine:tentacl3@sftp.octoenergy.com/uploads/data.csv\")\n```\n## Delete resources \n```python\nimport tentaclio\n\ntentaclio.remove(\"s3://my-bucket/octopus/the-9th-tentacle.txt\")\n```\n## List resources\n```python\nimport tentaclio\n\nfor entry in tentaclio.listdir(\"s3:://mybucket/path/to/dir\"):\n    print(\"Entry\", entry)\n```\n\n## Authenticated resources.\n```python\nimport os\n\nimport tentaclio\n\nprint(\"env ftp credentials\", os.getenv(\"OCTOIO__CONN__OCTOENERGY_FTP\"))\n# This prints `sftp://constantine:tentacl3@sftp.octoenergy.com/`\n\n# Credentials get automatically injected.\n\nwith tentaclio.open(\"sftp://sftp.octoenergy.com/uploads/data.csv\") as reader:\n    print(reader.read())\n```\n\n## Database connections.\n```python\nimport os\n\nimport tentaclio\n\nprint(\"env TENTACLIO__CONN__DB\", os.getenv(\"TENTACLIO__CONN__DB\"))\n\n# This prints `postgresql://octopus:tentacle@localhost:5444/example`\n\n# hostname is a wildcard, the credentials get injected.\nwith tentaclio.db(\"postgresql://hostname/example\") as pg:\n    results = pg.query(\"select * from my_table\")\n```\n\n## Pandas interaction.\n```python\nimport pandas as pd  # \ud83d\udc3c\ud83d\udc3c\nimport tentaclio  # \ud83d\udc19\n\ndf = pd.DataFrame([[1, 2, 3], [10, 20, 30]], columns=[\"col_1\", \"col_2\", \"col_3\"])\n\nbucket = \"s3://my-bucket/data/pandas.csv\"\n\nwith tentaclio.open(bucket, mode=\"w\") as writer:  # supports more pandas readers\n    df.to_csv(writer, index=False)\n\nwith tentaclio.open(bucket) as reader:\n    new_df = pd.read_csv(reader)\n\n```\n\n# Installation\n\nYou can get tentaclio using pip\n\n```sh\npip install tentaclio\n```\nor pipenv\n```sh\npipenv install tentaclio\n```\n\n## Developing.\n\nClone this repo and install [pipenv](https://pipenv.readthedocs.io/en/latest/):\n\nIn the `Makefile` you'll find some useful targets for linting, testing, etc. i.e.:\n```sh\nmake test\n```\n\n\n## How to use\nThis is how to use `tentaclio` for your daily data ingestion and storing needs.\n\n### Streams\nIn order to open streams to load or store data the universal function is:\n\n```python\nimport tentaclio\n\nwith tentaclio.open(\"/path/to/my/file\") as reader:\n    contents = reader.read()\n\nwith tentaclio.open(\"s3://bucket/file\", mode='w') as writer:\n    writer.write(contents)\n\n```\nAllowed modes are `r`, `w`, `rb`, and `wb`. You can use `t` instead of `b` to indicate text streams, but that's the default.\n\n\nThe supported url protocols are:\n\n* `/local/file`\n* `file:///local/file`\n* `s3://bucket/file`\n* `ftp://path/to/file`\n* `sftp://path/to/file`\n* `http://host.com/path/to/resource`\n* `https://host.com/path/to/resource`\n* `postgresql://host/database::table` will allow you to write from a csv format into a database with the same column names (note that the table goes after `::` :warning:).\n\nYou can add the credentials for any of the urls in order to access protected resources.\n\n\nYou can use these readers and writers with pandas functions like:\n\n```python\nimport pandas as pd\nimport tentaclio\n\nwith tentaclio.open(\"/path/to/my/file\") as reader:\n    df = pd.read_csv(reader)\n\n[...]\n\nwith tentaclio.open(\"s3::/path/to/my/file\", mode='w') as writer:\n    df.to_parquet(writer)\n```\n`Readers`, `Writers` and their closeable versions can be used anywhere expecting a file-like object; pandas or pickle are examples of such functions.\n\n### File system like operations to resources\n#### Listing resources\nSome URL schemes allow listing resources in a pythonnic way:\n```python\nimport tentaclio\n\nfor entry in tentaclio.listdir(\"s3:://mybucket/path/to/dir\"):\n    print(\"Entry\", entry)\n```\n\nWhereas `listdir` might be convinient we also offer `scandir`, which returns a list of [DirEntry](https://github.com/octoenergy/tentaclio/blob/ddbc28615de4b99106b956556db74a20e4761afe/src/tentaclio/fs/scanner.py#L13)s, and, `walk`. All functions follow as closely as possible their standard library definitions.\n\n\n### Database access\n\nIn order to open db connections you can use `tentaclio.db` and have instant access to postgres, sqlite, athena and mssql.\n\n```python\nimport tentaclio\n\n[...]\n\nquery = \"select 1\";\nwith tentaclio.db(POSTGRES_TEST_URL) as client:\n    result =client.query(query)\n[...]\n```\n\nThe supported db schemes are:\n\n* `postgresql://`\n* `sqlite://`\n* `awsathena+rest://`\n* `mssql://`\n* Any other scheme supported by sqlalchemy.\n\n### Automatic credentials injection\n\n1. Configure credentials by using environmental variables prefixed with `TENTACLIO__CONN__`  (i.e.  `TENTACLIO__CONN__DATA_FTP=sfpt://real_user:132ldsf@ftp.octoenergy.com`).\n\n2. Open a stream:\n```python\nwith tentaclio.open(\"sftp://ftp.octoenergy.com/file.csv\") as reader:\n    reader.read()\n```\nThe credentials get injected into the url.\n\n3. Open a db client:\n```python\nimport tentaclio\n\nwith tentaclio.db(\"postgresql://hostname/my_data_base\") as client:\n    client.query(\"select 1\")\n```\nNote that `hostname` in the url to be authenticated is a wildcard that will match any hostname. So `authenticate(\"http://hostname/file.txt\")` will be injected to `http://user:pass@octo.co/file.txt` if the credential for `http://user:pass@octo.co/` exists.\n\nDifferent components of the URL are set differently:\n- Scheme and path will be set from the URL, and null if missing.\n- Username, password and hostname will be set from the stored credentials.\n- Port will be set from the stored credentials if it exists, otherwise from the URL.\n- Query will be set from the URL if it exists, otherwise from the stored credentials (so it can be\n  overriden)\n\n#### Credentials file\n\nYou can also set a credentials file that looks like:\n```\nsecrets:\n    db_1: postgresql://user1:pass1@myhost.com/database_1\n    db_2: postgresql://user2:pass2@otherhost.com/database_2\n    ftp_server: ftp://fuser:fpass@ftp.myhost.com\n```\nAnd make it accessible to tentaclio by setting the environmental variable `TENTACLIO__SECRETS_FILE`. The actual name of each url is for traceability and has no effect in the functionality.\n\n\n## Quick note on protocols structural subtyping.\n\nIn order to abstract concrete dependencies from the implementation of data related functions (or in any part of the system really) we use typed [protocols](https://mypy.readthedocs.io/en/latest/protocols.html#simple-user-defined-protocols). This allows a more flexible dependency injection than using subclassing or [more complex approches](http://code.activestate.com/recipes/413268/). This idea is heavily inspired by how this exact thing is done in [go](https://www.youtube.com/watch?v=ifBUfIb7kdo). Learn more about this principle in our [tech blog](https://tech.octopus.energy/news/2019/03/21/python-interfaces-a-la-go.html).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/octoenergy/tentaclio", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tentaclio", "package_url": "https://pypi.org/project/tentaclio/", "platform": "", "project_url": "https://pypi.org/project/tentaclio/", "project_urls": {"Homepage": "https://github.com/octoenergy/tentaclio"}, "release_url": "https://pypi.org/project/tentaclio/0.0.1a9/", "requires_dist": ["urllib3 (>=1.24.2)", "boto3 (<1.10,>=1.9.0)", "requests", "psycopg2-binary", "sqlalchemy (>1.3)", "PyAthena", "pysftp (<0.3,>=0.2.0)", "typing-extensions", "pandas (<1.0.2)", "click", "pyyaml"], "requires_python": "", "summary": "Unification of data connectors for distributed data tasks", "version": "0.0.1a9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://circleci.com/gh/octoenergy/tentaclio/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d9b82c8b70c1711b7b784854ed00e86754c4504/68747470733a2f2f636972636c6563692e636f6d2f67682f6f63746f656e657267792f74656e7461636c696f2f747265652f6d61737465722e706e673f636972636c652d746f6b656e3d64663761616431313336376631616365356263653235336231386566623662323165616136356263\"></a>\n<a href=\"https://codecov.io/gh/octoenergy/tentaclio\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ba365656d3496d17fb2a009edd29b0ce9dc8329/68747470733a2f2f636f6465636f762e696f2f67682f6f63746f656e657267792f74656e7461636c696f2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>Tentaclio</h1>\n<p>Python library that simplifies:</p>\n<ul>\n<li>Handling streams from different protocols such as <code>file:</code>, <code>ftp:</code>, <code>sftp:</code>, <code>s3:</code>, ...</li>\n<li>Opening database connections.</li>\n<li>Managing the credentials in distributed systems.</li>\n</ul>\n<p>Main considerations in the design:</p>\n<ul>\n<li>Easy to use: all streams are open via <code>tentaclio.open</code>, all database connections through <code>tentaclio.db</code>.</li>\n<li>URLs are the basic resource locator and db connection string.</li>\n<li>Automagic authentication for protected resources.</li>\n<li>Extensible: you can add your own handlers for other schemes.</li>\n<li>Pandas interaction.</li>\n</ul>\n<h1>Quick Examples.</h1>\n<h2>Read and write streams.</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n<span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"s2\">\"\ud83d\udc4b \ud83d\udc19\"</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"ftp://localhost:2021/upload/file.txt\"</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">\"w\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using boto3 authentication under the hood.</span>\n<span class=\"n\">bucket</span> <span class=\"o\">=</span> <span class=\"s2\">\"s3://my-bucket/octopus/hello.txt\"</span>\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</pre>\n<h2>Copy streams</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n\n<span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"s2\">\"/home/constantine/data.csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sftp://constantine:tentacl3@sftp.octoenergy.com/uploads/data.csv\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Delete resources</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n\n<span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s2\">\"s3://my-bucket/octopus/the-9th-tentacle.txt\"</span><span class=\"p\">)</span>\n</pre>\n<h2>List resources</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n\n<span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"s2\">\"s3:://mybucket/path/to/dir\"</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Entry\"</span><span class=\"p\">,</span> <span class=\"n\">entry</span><span class=\"p\">)</span>\n</pre>\n<h2>Authenticated resources.</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"env ftp credentials\"</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s2\">\"OCTOIO__CONN__OCTOENERGY_FTP\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># This prints `sftp://constantine:tentacl3@sftp.octoenergy.com/`</span>\n\n<span class=\"c1\"># Credentials get automatically injected.</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"sftp://sftp.octoenergy.com/uploads/data.csv\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</pre>\n<h2>Database connections.</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"env TENTACLIO__CONN__DB\"</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s2\">\"TENTACLIO__CONN__DB\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># This prints `postgresql://octopus:tentacle@localhost:5444/example`</span>\n\n<span class=\"c1\"># hostname is a wildcard, the credentials get injected.</span>\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"p\">(</span><span class=\"s2\">\"postgresql://hostname/example\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pg</span><span class=\"p\">:</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">pg</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"select * from my_table\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Pandas interaction.</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>  <span class=\"c1\"># \ud83d\udc3c\ud83d\udc3c</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>  <span class=\"c1\"># \ud83d\udc19</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"col_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"col_2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"col_3\"</span><span class=\"p\">])</span>\n\n<span class=\"n\">bucket</span> <span class=\"o\">=</span> <span class=\"s2\">\"s3://my-bucket/data/pandas.csv\"</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">\"w\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>  <span class=\"c1\"># supports more pandas readers</span>\n    <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"n\">new_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n</pre>\n<h1>Installation</h1>\n<p>You can get tentaclio using pip</p>\n<pre>pip install tentaclio\n</pre>\n<p>or pipenv</p>\n<pre>pipenv install tentaclio\n</pre>\n<h2>Developing.</h2>\n<p>Clone this repo and install <a href=\"https://pipenv.readthedocs.io/en/latest/\" rel=\"nofollow\">pipenv</a>:</p>\n<p>In the <code>Makefile</code> you'll find some useful targets for linting, testing, etc. i.e.:</p>\n<pre>make <span class=\"nb\">test</span>\n</pre>\n<h2>How to use</h2>\n<p>This is how to use <code>tentaclio</code> for your daily data ingestion and storing needs.</p>\n<h3>Streams</h3>\n<p>In order to open streams to load or store data the universal function is:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/my/file\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"s3://bucket/file\"</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">)</span>\n</pre>\n<p>Allowed modes are <code>r</code>, <code>w</code>, <code>rb</code>, and <code>wb</code>. You can use <code>t</code> instead of <code>b</code> to indicate text streams, but that's the default.</p>\n<p>The supported url protocols are:</p>\n<ul>\n<li><code>/local/file</code></li>\n<li><code>file:///local/file</code></li>\n<li><code>s3://bucket/file</code></li>\n<li><code>ftp://path/to/file</code></li>\n<li><code>sftp://path/to/file</code></li>\n<li><code>http://host.com/path/to/resource</code></li>\n<li><code>https://host.com/path/to/resource</code></li>\n<li><code>postgresql://host/database::table</code> will allow you to write from a csv format into a database with the same column names (note that the table goes after <code>::</code> :warning:).</li>\n</ul>\n<p>You can add the credentials for any of the urls in order to access protected resources.</p>\n<p>You can use these readers and writers with pandas functions like:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/my/file\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"s3::/path/to/my/file\"</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_parquet</span><span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">)</span>\n</pre>\n<p><code>Readers</code>, <code>Writers</code> and their closeable versions can be used anywhere expecting a file-like object; pandas or pickle are examples of such functions.</p>\n<h3>File system like operations to resources</h3>\n<h4>Listing resources</h4>\n<p>Some URL schemes allow listing resources in a pythonnic way:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n\n<span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"s2\">\"s3:://mybucket/path/to/dir\"</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Entry\"</span><span class=\"p\">,</span> <span class=\"n\">entry</span><span class=\"p\">)</span>\n</pre>\n<p>Whereas <code>listdir</code> might be convinient we also offer <code>scandir</code>, which returns a list of <a href=\"https://github.com/octoenergy/tentaclio/blob/ddbc28615de4b99106b956556db74a20e4761afe/src/tentaclio/fs/scanner.py#L13\" rel=\"nofollow\">DirEntry</a>s, and, <code>walk</code>. All functions follow as closely as possible their standard library definitions.</p>\n<h3>Database access</h3>\n<p>In order to open db connections you can use <code>tentaclio.db</code> and have instant access to postgres, sqlite, athena and mssql.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s2\">\"select 1\"</span><span class=\"p\">;</span>\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"p\">(</span><span class=\"n\">POSTGRES_TEST_URL</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n<p>The supported db schemes are:</p>\n<ul>\n<li><code>postgresql://</code></li>\n<li><code>sqlite://</code></li>\n<li><code>awsathena+rest://</code></li>\n<li><code>mssql://</code></li>\n<li>Any other scheme supported by sqlalchemy.</li>\n</ul>\n<h3>Automatic credentials injection</h3>\n<ol>\n<li>\n<p>Configure credentials by using environmental variables prefixed with <code>TENTACLIO__CONN__</code>  (i.e.  <code>TENTACLIO__CONN__DATA_FTP=sfpt://real_user:132ldsf@ftp.octoenergy.com</code>).</p>\n</li>\n<li>\n<p>Open a stream:</p>\n</li>\n</ol>\n<pre><span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"sftp://ftp.octoenergy.com/file.csv\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n<p>The credentials get injected into the url.</p>\n<ol>\n<li>Open a db client:</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tentaclio</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tentaclio</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"p\">(</span><span class=\"s2\">\"postgresql://hostname/my_data_base\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"select 1\"</span><span class=\"p\">)</span>\n</pre>\n<p>Note that <code>hostname</code> in the url to be authenticated is a wildcard that will match any hostname. So <code>authenticate(\"http://hostname/file.txt\")</code> will be injected to <code>http://user:pass@octo.co/file.txt</code> if the credential for <code>http://user:pass@octo.co/</code> exists.</p>\n<p>Different components of the URL are set differently:</p>\n<ul>\n<li>Scheme and path will be set from the URL, and null if missing.</li>\n<li>Username, password and hostname will be set from the stored credentials.</li>\n<li>Port will be set from the stored credentials if it exists, otherwise from the URL.</li>\n<li>Query will be set from the URL if it exists, otherwise from the stored credentials (so it can be\noverriden)</li>\n</ul>\n<h4>Credentials file</h4>\n<p>You can also set a credentials file that looks like:</p>\n<pre><code>secrets:\n    db_1: postgresql://user1:pass1@myhost.com/database_1\n    db_2: postgresql://user2:pass2@otherhost.com/database_2\n    ftp_server: ftp://fuser:fpass@ftp.myhost.com\n</code></pre>\n<p>And make it accessible to tentaclio by setting the environmental variable <code>TENTACLIO__SECRETS_FILE</code>. The actual name of each url is for traceability and has no effect in the functionality.</p>\n<h2>Quick note on protocols structural subtyping.</h2>\n<p>In order to abstract concrete dependencies from the implementation of data related functions (or in any part of the system really) we use typed <a href=\"https://mypy.readthedocs.io/en/latest/protocols.html#simple-user-defined-protocols\" rel=\"nofollow\">protocols</a>. This allows a more flexible dependency injection than using subclassing or <a href=\"http://code.activestate.com/recipes/413268/\" rel=\"nofollow\">more complex approches</a>. This idea is heavily inspired by how this exact thing is done in <a href=\"https://www.youtube.com/watch?v=ifBUfIb7kdo\" rel=\"nofollow\">go</a>. Learn more about this principle in our <a href=\"https://tech.octopus.energy/news/2019/03/21/python-interfaces-a-la-go.html\" rel=\"nofollow\">tech blog</a>.</p>\n\n          </div>"}, "last_serial": 6897321, "releases": {"0.0.1a0": [{"comment_text": "", "digests": {"md5": "14fb95ede116a4fe20d051d597c96cd9", "sha256": "9babcc5151394b39779b400d6221478d1e219ea0f22ab5e278fdb04cd06c202d"}, "downloads": -1, "filename": "tentaclio-0.0.1a0.tar.gz", "has_sig": false, "md5_digest": "14fb95ede116a4fe20d051d597c96cd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27208, "upload_time": "2019-04-24T15:31:01", "upload_time_iso_8601": "2019-04-24T15:31:01.550779Z", "url": "https://files.pythonhosted.org/packages/14/76/30feb7fa0130746df5183507a84b40c23548169e898761765126630a7275/tentaclio-0.0.1a0.tar.gz", "yanked": false}], "0.0.1a1": [{"comment_text": "", "digests": {"md5": "eb586c6d0c33490db31a22de606dbc38", "sha256": "e0321c96862ab7fc11f00fd0994e4b165cb3176ffdf6905fd31c38d4eff4aca0"}, "downloads": -1, "filename": "tentaclio-0.0.1a1.tar.gz", "has_sig": false, "md5_digest": "eb586c6d0c33490db31a22de606dbc38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27240, "upload_time": "2019-04-24T15:43:59", "upload_time_iso_8601": "2019-04-24T15:43:59.800502Z", "url": "https://files.pythonhosted.org/packages/5f/7e/be3d5e858d283f2f7b0fd6f21ed797f2f714d5f7bd9af2ca4c8f5969fcac/tentaclio-0.0.1a1.tar.gz", "yanked": false}], "0.0.1a2": [{"comment_text": "", "digests": {"md5": "a1ea4a69d969d68c850dbc2080fa59a6", "sha256": "db720544ea2f965dcd5c3b97f0d66fcce269f99fcaaa5f5a52bf826cb5976aed"}, "downloads": -1, "filename": "tentaclio-0.0.1a2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a1ea4a69d969d68c850dbc2080fa59a6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 34374, "upload_time": "2019-05-22T11:23:11", "upload_time_iso_8601": "2019-05-22T11:23:11.671704Z", "url": "https://files.pythonhosted.org/packages/d5/66/bc775d0bd8673139dbfe723b31ca765e0512d05d80f6e7de5233ef86c964/tentaclio-0.0.1a2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46f4053d1ae4caa75d8b22ce80980cef", "sha256": "41aa401d4e2576dee5fe95d00110a4105a4d8622f8cf5ec220382166516e682a"}, "downloads": -1, "filename": "tentaclio-0.0.1a2.tar.gz", "has_sig": false, "md5_digest": "46f4053d1ae4caa75d8b22ce80980cef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26505, "upload_time": "2019-05-22T11:23:13", "upload_time_iso_8601": "2019-05-22T11:23:13.323649Z", "url": "https://files.pythonhosted.org/packages/45/d5/12b3986e27047fcebc857d1c011c6fbfe3394482469a88b34d252899b6d2/tentaclio-0.0.1a2.tar.gz", "yanked": false}], "0.0.1a3": [{"comment_text": "", "digests": {"md5": "177d7e7722a44c092984abb29cf915f3", "sha256": "deda5fdd3a004c5b1d56ac62308cb6059d2465635d259d160bccf4fff58449b7"}, "downloads": -1, "filename": "tentaclio-0.0.1a3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "177d7e7722a44c092984abb29cf915f3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 39970, "upload_time": "2019-07-24T15:50:53", "upload_time_iso_8601": "2019-07-24T15:50:53.939261Z", "url": "https://files.pythonhosted.org/packages/f0/96/591504d0cc87f0fc6dc4807f07df1790a2d013ba0abe750ff9b8ee51824d/tentaclio-0.0.1a3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f8e52e858ed052b9530217531bd97ac", "sha256": "8c989cabfced65abbda6a18e7730a08097fac2827f217360b3858817f3cc32b0"}, "downloads": -1, "filename": "tentaclio-0.0.1a3.tar.gz", "has_sig": false, "md5_digest": "0f8e52e858ed052b9530217531bd97ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29018, "upload_time": "2019-07-24T15:50:55", "upload_time_iso_8601": "2019-07-24T15:50:55.634444Z", "url": "https://files.pythonhosted.org/packages/15/72/cb6af763616c8c160d7c8edf304a63ddd3d586b6b1359bb223000ce65634/tentaclio-0.0.1a3.tar.gz", "yanked": false}], "0.0.1a4": [{"comment_text": "", "digests": {"md5": "b499a8c8548fc88545a40810de1c499f", "sha256": "fb989af12ac13935788dd839e88a3fb0fc01d4ac3c49893461c62395818b73b4"}, "downloads": -1, "filename": "tentaclio-0.0.1a4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b499a8c8548fc88545a40810de1c499f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 41697, "upload_time": "2020-01-21T16:53:54", "upload_time_iso_8601": "2020-01-21T16:53:54.105527Z", "url": "https://files.pythonhosted.org/packages/66/8f/54fc804a648d53196697912bf2b3c682a55f9eb91f472f518909058b1196/tentaclio-0.0.1a4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "280c68ea6f48a9364b1f6d3378296a0c", "sha256": "81ee2a8793bf188bee82fdefda59162ca6f57986a2ef39b71d0cda524b8ba194"}, "downloads": -1, "filename": "tentaclio-0.0.1a4.tar.gz", "has_sig": false, "md5_digest": "280c68ea6f48a9364b1f6d3378296a0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30819, "upload_time": "2020-01-21T16:53:55", "upload_time_iso_8601": "2020-01-21T16:53:55.865280Z", "url": "https://files.pythonhosted.org/packages/2d/13/e0a3bc50271b7f46a884ca571426c47777343b0743f5dc292f00c62458d2/tentaclio-0.0.1a4.tar.gz", "yanked": false}], "0.0.1a5": [{"comment_text": "", "digests": {"md5": "d109ef7cb3b95e067c1f568996a49c57", "sha256": "d322a3b70fb9f3d87428754df9d8a5a51b938410a438af20710172cf0b0aa84a"}, "downloads": -1, "filename": "tentaclio-0.0.1a5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d109ef7cb3b95e067c1f568996a49c57", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 41746, "upload_time": "2020-02-12T11:33:22", "upload_time_iso_8601": "2020-02-12T11:33:22.016151Z", "url": "https://files.pythonhosted.org/packages/71/5a/e582888af4a493817aa53e2d67d0f8530e6abf76f474fca92a3df172d3cf/tentaclio-0.0.1a5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9742f81a0a2934b35fa302cc8ef1a191", "sha256": "d97198ef52c4133204d7c197ba10fc12da4ef6b83f73a4b7762d46805884f5cc"}, "downloads": -1, "filename": "tentaclio-0.0.1a5.tar.gz", "has_sig": false, "md5_digest": "9742f81a0a2934b35fa302cc8ef1a191", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30945, "upload_time": "2020-02-12T11:33:23", "upload_time_iso_8601": "2020-02-12T11:33:23.669959Z", "url": "https://files.pythonhosted.org/packages/66/7a/f7fb444885a4d0e39158a83e27673c9cdc256c08f81bff456c1e9d7ec8d7/tentaclio-0.0.1a5.tar.gz", "yanked": false}], "0.0.1a6": [{"comment_text": "", "digests": {"md5": "67722bce0b6fd17edc63d496ec863e99", "sha256": "850f35dc6f9319425c6a9fae8f5955495cf90adc001a94d4fcb59c8e8ef77b53"}, "downloads": -1, "filename": "tentaclio-0.0.1a6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "67722bce0b6fd17edc63d496ec863e99", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42042, "upload_time": "2020-03-18T11:55:11", "upload_time_iso_8601": "2020-03-18T11:55:11.088817Z", "url": "https://files.pythonhosted.org/packages/ea/e9/1975c884db986332cb45db3aa29bccd61d9a6e7e209a3efef5e868d8b46a/tentaclio-0.0.1a6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e03c31b532790f48ce42201d75c08bb", "sha256": "d0847941f5dcbd6b89875732c8874a1dcef12de4bb7ccb39b18ef97b0058f093"}, "downloads": -1, "filename": "tentaclio-0.0.1a6.tar.gz", "has_sig": false, "md5_digest": "1e03c31b532790f48ce42201d75c08bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30218, "upload_time": "2020-03-18T11:55:12", "upload_time_iso_8601": "2020-03-18T11:55:12.261106Z", "url": "https://files.pythonhosted.org/packages/26/4c/857bfadfbc6f297d7980b5400ca71b7a55738ed7c3c3ae2d8864ad2be42b/tentaclio-0.0.1a6.tar.gz", "yanked": false}], "0.0.1a7": [{"comment_text": "", "digests": {"md5": "4617c9a6828761fc785d766c9bef9ee5", "sha256": "6024863c8d02bfed05493f8af2daefa3f3e5b832d21b44b2ec7834f7a039ecb4"}, "downloads": -1, "filename": "tentaclio-0.0.1a7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4617c9a6828761fc785d766c9bef9ee5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 41891, "upload_time": "2020-03-19T11:01:53", "upload_time_iso_8601": "2020-03-19T11:01:53.922049Z", "url": "https://files.pythonhosted.org/packages/4d/35/07e42ba622e83bf4d26adaa7ec6c5bf26bce8c3b43ad21c738f72200556e/tentaclio-0.0.1a7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "644d25b859b917ff9878e4eea7df6912", "sha256": "cdd77e96f69a52ce5b394b2500ed9187ab5cf468b2278de87f557876167e323a"}, "downloads": -1, "filename": "tentaclio-0.0.1a7.tar.gz", "has_sig": false, "md5_digest": "644d25b859b917ff9878e4eea7df6912", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31054, "upload_time": "2020-03-19T11:01:55", "upload_time_iso_8601": "2020-03-19T11:01:55.186887Z", "url": "https://files.pythonhosted.org/packages/45/aa/f2d9105d6b976c1374809d25a0df74e46974050a8e5ce9632c9a8d732ca1/tentaclio-0.0.1a7.tar.gz", "yanked": false}], "0.0.1a9": [{"comment_text": "", "digests": {"md5": "3f588820a5d05b4245538db2189b163d", "sha256": "282983201fc4577e01642c4522fd5e3f577908ee9fba05f0a42dad5745ec2f72"}, "downloads": -1, "filename": "tentaclio-0.0.1a9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f588820a5d05b4245538db2189b163d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42182, "upload_time": "2020-03-27T16:48:19", "upload_time_iso_8601": "2020-03-27T16:48:19.032602Z", "url": "https://files.pythonhosted.org/packages/a8/4d/c07449c2a6df6790e72021bd0136aa02237f7eb24600feb15a1aa27e018a/tentaclio-0.0.1a9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db59852e768eaad901147dc591d1a49a", "sha256": "2c7e9b45a7a4f564367ecc22b2d155bd6692c266ec453c2dc81277e955e43f41"}, "downloads": -1, "filename": "tentaclio-0.0.1a9.tar.gz", "has_sig": false, "md5_digest": "db59852e768eaad901147dc591d1a49a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28127, "upload_time": "2020-03-27T16:48:20", "upload_time_iso_8601": "2020-03-27T16:48:20.174632Z", "url": "https://files.pythonhosted.org/packages/d7/9d/d5c004fc4d3c2cdca2c73b25e2bba10b757e5e961cf2482fa36b9601d359/tentaclio-0.0.1a9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f588820a5d05b4245538db2189b163d", "sha256": "282983201fc4577e01642c4522fd5e3f577908ee9fba05f0a42dad5745ec2f72"}, "downloads": -1, "filename": "tentaclio-0.0.1a9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f588820a5d05b4245538db2189b163d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42182, "upload_time": "2020-03-27T16:48:19", "upload_time_iso_8601": "2020-03-27T16:48:19.032602Z", "url": "https://files.pythonhosted.org/packages/a8/4d/c07449c2a6df6790e72021bd0136aa02237f7eb24600feb15a1aa27e018a/tentaclio-0.0.1a9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db59852e768eaad901147dc591d1a49a", "sha256": "2c7e9b45a7a4f564367ecc22b2d155bd6692c266ec453c2dc81277e955e43f41"}, "downloads": -1, "filename": "tentaclio-0.0.1a9.tar.gz", "has_sig": false, "md5_digest": "db59852e768eaad901147dc591d1a49a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28127, "upload_time": "2020-03-27T16:48:20", "upload_time_iso_8601": "2020-03-27T16:48:20.174632Z", "url": "https://files.pythonhosted.org/packages/d7/9d/d5c004fc4d3c2cdca2c73b25e2bba10b757e5e961cf2482fa36b9601d359/tentaclio-0.0.1a9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:00 2020"}