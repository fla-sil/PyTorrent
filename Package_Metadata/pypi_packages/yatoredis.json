{"info": {"author": "ZY ZHANG", "author_email": "idup2x@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "TOREDIS\n=======\n\nThis is minimalistic, but feature rich redis client for Tornado built on top of `hiredis <https://github.com/pietern/hiredis-py>`_ protocol parser.\n\nSupports all redis commands, which are auto-generated from the redis `JSON documentation file <https://github.com/antirez/redis-doc/blob/master/commands.json>`_.\n\nKey design points:\n\n1. While toredis attempts to add some syntactical sugar to the API, all responses are returned \"as is\". For example, if command returns\n   list of items and developer requested only one key, list with one entry will be returned. For example::\n\n    def handle(self, result):\n        print(len(result))\n\n    conn.hkeys('test1', handle)\n\n\n2. Most redis commands accept one or more keys. Toredis adds a bit of logic to handle single key or array of keys. Due to python\n   limitations, it is not possible to use ``*args`` with named ``callback`` argument, so you will have to pass array of key names::\n\n    # This will work\n    conn.blpop('test', callback=callback)\n    conn.blpop(['test', 'test2'], callback=callback)\n\n    # This won't work\n    conn.blpop('test', 'test2', callback=callback)\n\n\n3. If redis connection will be dropped while waiting for response, callback will be triggered with `None` as a value.\n\n4. Toredis does not provide reconnection feature, but you can override :meth:`~toredis.Client.on_disconnect` method and implement your reconnection logic.\n\nYou can find command `documentation here <https://github.com/mrjoes/toredis/blob/master/toredis/commands.py>`_ (will be moved to rtd later).\n\nPipelining is also supported::\n\n    # For more than one pipeline for connection create it with Pipeline(conn)\n    pipeline = conn.pipeline()\n    pipeline.set('foo', 'bar')\n    pipeline.get('foo')\n    pipeline.send(callback=callback)\n\nFor more examples please refer to tests.\nMore on `redis pipelining <http://redis.io/topics/pipelining>`_.\n\nThings missing:\n\n* Backport pure-python redis protocol parser (for PyPy support)\n* Connection pools\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/bufferx/toredis/", "keywords": "tornado,redis,hiredis,tornado redis", "license": "http://www.apache.org/licenses/LICENSE-2.0", "maintainer": null, "maintainer_email": null, "name": "yatoredis", "package_url": "https://pypi.org/project/yatoredis/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/yatoredis/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/bufferx/toredis/"}, "release_url": "https://pypi.org/project/yatoredis/0.1.6/", "requires_dist": null, "requires_python": null, "summary": "Yet Another toredis, Client Pool Supported. Forked From https://github.com/mrjoes/toredis/ <br />Demo: https://gist.github.com/bufferx/11228374", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            TOREDIS<br>=======<br><br>This is minimalistic, but feature rich redis client for Tornado built on top of `hiredis &lt;https://github.com/pietern/hiredis-py&gt;`_ protocol parser.<br><br>Supports all redis commands, which are auto-generated from the redis `JSON documentation file &lt;https://github.com/antirez/redis-doc/blob/master/commands.json&gt;`_.<br><br>Key design points:<br><br>1. While toredis attempts to add some syntactical sugar to the API, all responses are returned \"as is\". For example, if command returns<br>   list of items and developer requested only one key, list with one entry will be returned. For example::<br><br>    def handle(self, result):<br>        print(len(result))<br><br>    conn.hkeys('test1', handle)<br><br><br>2. Most redis commands accept one or more keys. Toredis adds a bit of logic to handle single key or array of keys. Due to python<br>   limitations, it is not possible to use ``*args`` with named ``callback`` argument, so you will have to pass array of key names::<br><br>    # This will work<br>    conn.blpop('test', callback=callback)<br>    conn.blpop(['test', 'test2'], callback=callback)<br><br>    # This won't work<br>    conn.blpop('test', 'test2', callback=callback)<br><br><br>3. If redis connection will be dropped while waiting for response, callback will be triggered with `None` as a value.<br><br>4. Toredis does not provide reconnection feature, but you can override :meth:`~toredis.Client.on_disconnect` method and implement your reconnection logic.<br><br>You can find command `documentation here &lt;https://github.com/mrjoes/toredis/blob/master/toredis/commands.py&gt;`_ (will be moved to rtd later).<br><br>Pipelining is also supported::<br><br>    # For more than one pipeline for connection create it with Pipeline(conn)<br>    pipeline = conn.pipeline()<br>    pipeline.set('foo', 'bar')<br>    pipeline.get('foo')<br>    pipeline.send(callback=callback)<br><br>For more examples please refer to tests.<br>More on `redis pipelining &lt;http://redis.io/topics/pipelining&gt;`_.<br><br>Things missing:<br><br>* Backport pure-python redis protocol parser (for PyPy support)<br>* Connection pools<br>\n          </div>"}, "last_serial": 1792032, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "791d4c241404b90b6517a2f94421ab41", "sha256": "de8116fdd58fe46aa2020e32d6a72cd5cfe6243798cc21f6c6134ca8f8026235"}, "downloads": -1, "filename": "yatoredis-0.1.3.tar.gz", "has_sig": false, "md5_digest": "791d4c241404b90b6517a2f94421ab41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13121, "upload_time": "2015-09-23T02:59:36", "upload_time_iso_8601": "2015-09-23T02:59:36.479334Z", "url": "https://files.pythonhosted.org/packages/0a/93/d6747e6d591dba970259f138f43747f4b80681324981f59eb8cf888256d0/yatoredis-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "ef0498ec4d80801c5a99691651788c5a", "sha256": "fef39a928b64b062c3388b50a2b9398e1c6b2b15c5251af2b77cf265820bc403"}, "downloads": -1, "filename": "yatoredis-0.1.4.tar.gz", "has_sig": false, "md5_digest": "ef0498ec4d80801c5a99691651788c5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13192, "upload_time": "2015-09-23T07:21:55", "upload_time_iso_8601": "2015-09-23T07:21:55.595279Z", "url": "https://files.pythonhosted.org/packages/99/46/bab27cc6cbc86a279037c6c66373d57e997aa4f627ac633057a027e46c6d/yatoredis-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "95ae2010c731b4ac67bdc244363edfa8", "sha256": "9d3da4ad6a9d4af78bd9e6539aad8800a7daa6e03ad00cb249814ccdce5a8d36"}, "downloads": -1, "filename": "yatoredis-0.1.5.tar.gz", "has_sig": false, "md5_digest": "95ae2010c731b4ac67bdc244363edfa8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13251, "upload_time": "2015-10-29T09:48:17", "upload_time_iso_8601": "2015-10-29T09:48:17.582781Z", "url": "https://files.pythonhosted.org/packages/00/7d/33400d4de1a3709644f254a82f2f8007de36ecd8295995b870c21489033a/yatoredis-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "518ca7929aa28ad96abf885094144c5a", "sha256": "ecfe8d6ae291a71d8563524840b425c265b637dee852f1df22ae5ed04904952f"}, "downloads": -1, "filename": "yatoredis-0.1.6.tar.gz", "has_sig": false, "md5_digest": "518ca7929aa28ad96abf885094144c5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13296, "upload_time": "2015-10-29T15:31:16", "upload_time_iso_8601": "2015-10-29T15:31:16.108706Z", "url": "https://files.pythonhosted.org/packages/39/4d/a0c2aaacffe65cb4c7f1ca5c8a260c023b70aefe1ac852252a8e86d064a2/yatoredis-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "518ca7929aa28ad96abf885094144c5a", "sha256": "ecfe8d6ae291a71d8563524840b425c265b637dee852f1df22ae5ed04904952f"}, "downloads": -1, "filename": "yatoredis-0.1.6.tar.gz", "has_sig": false, "md5_digest": "518ca7929aa28ad96abf885094144c5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13296, "upload_time": "2015-10-29T15:31:16", "upload_time_iso_8601": "2015-10-29T15:31:16.108706Z", "url": "https://files.pythonhosted.org/packages/39/4d/a0c2aaacffe65cb4c7f1ca5c8a260c023b70aefe1ac852252a8e86d064a2/yatoredis-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:22:42 2020"}