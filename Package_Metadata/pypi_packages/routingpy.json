{"info": {"author": "Nils Nolde", "author_email": "nils@gis-ops.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "routing-py\n==========\n\n.. image:: https://travis-ci.org/gis-ops/routing-py.svg?branch=master\n    :target: https://travis-ci.org/gis-ops/routing-py\n    :alt: Build status\n\n.. image:: https://coveralls.io/repos/github/gis-ops/routing-py/badge.svg?branch=master\n    :target: https://coveralls.io/github/gis-ops/routing-py?branch=master\n    :alt: Coveralls coverage\n\n.. image:: https://readthedocs.org/projects/routingpy/badge/?version=latest\n    :target: https://routingpy.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://mybinder.org/badge_logo.svg\n    :target: https://mybinder.org/v2/gh/gis-ops/routing-py/master?filepath=examples\n    :alt: MyBinder.org\n\n\n*One lib to route them all* - **routingpy** is a Python 3 client for several\npopular routing webservices.\n\nInspired by `geopy <https://github.com/geopy/geopy>`_ and its great community of contributors, **routingpy** enables\neasy and consistent access to third-party spatial webservices to request **route directions**, **isochrones**\nor **time-distance matrices**.\n\n**routingpy** currently includes support for the following services:\n\n-  `Mapbox, either Valhalla or OSRM`_\n-  `Openrouteservice`_\n-  `Here Maps`_\n-  `Google Maps`_\n-  `Graphhopper`_\n-  `Local Valhalla`_\n-  `Local Mapbox`_\n\nThis list is hopefully growing with time and contributions by other developers. An up-to-date list is always availaable\nin our documentation_.\n\n**routing-py** is tested against CPython versions 3.6, 3.7, 3.8-dev and against PyPy 3.6.x. As other major libraries like ``numpy``\nand ``pandas`` decided to drop Python 2 support, we did not see any reason to burden the project with the compatibility\nweight.\n\n\u00a9 routing-py contributors 2020 under the `Apache 2.0 License`_.\n\n.. image:: https://user-images.githubusercontent.com/10322094/57357720-e180c080-7173-11e9-97a4-cecb4670065d.jpg\n    :alt: routing-py-image\n\n\nWhy routing-py?\n---------------\n\nYou want to\n\n- get from A to B by transit, foot, bike, car or hgv\n- compute a region of reachability\n- calculate a time distance matrix for a N x M table\n\nand don't know which provider to use? Great. Then **routingpy** is exactly what you're looking for.\n\nFor the better or worse, every provider works on different spatial global datasets and uses a plethora of algorithms on top.\nWhile Google or HERE build on top of proprietary datasets, providers such as Mapbox or Graphhopper consume OpenStreetMap data\nfor their base network. Also, all providers offer a different amount of options one can use to restrict the wayfinding.\nUltimately this means that **results may differ** - and our experience tells us: they do, and not\ntoo little. This calls for a careful evaluation which service provider to use for which specific use case.\n\nWith **routingpy** we have made an attempt to simplify this process for you.\n\nInstallation\n------------\n\n.. image:: https://badge.fury.io/py/routingpy.svg\n    :target: https://badge.fury.io/py/routingpy\n    :alt: PyPI version\n\n.. image:: https://anaconda.org/nilsnolde/routingpy/badges/version.svg\n    :target: https://anaconda.org/nilsnolde/routingpy\n    :alt: Conda install\n\n**Recommended**: Install via poetry_:\n\n.. code:: bash\n\n    poetry install [--no-dev]\n\nInstall using ``pip`` with\n\n.. code:: bash\n\n   pip install routingpy\n\nOr with conda (**deprecated**)\n\n.. code:: bash\n\n   conda install -c nilsnolde routingpy\n\nOr the lastest from source\n\n.. code:: bash\n\n   pip install git+git://github.com/gis-ops/routing-py\n\n\n\nAPI\n-----------\n\nEvery provider has its own specifications and features. However the basic blueprints are the same across all. We tried hard\nto make the transition from one provider to the other as seamless as possible. We follow two dogmas for all implementations:\n\n- All basic parameters have to be the same for all routers for each endpoint\n\n- All routers still retain their special parameters for their endpoints, which make them unique in the end\n\nThis naturally means that usually those **basic parameters are not named the same way** as the endpoints they query. However,\nall **provider specific parameters are named the exact same** as their remote counterparts.\n\nThe following table gives you an overview which basic arguments are abstracted:\n\n+-----------------------+-------------------+--------------------------------------------------------------+\n|       Endpoint        |     Argument      | Function                                                     |\n+=======================+===================+==============================================================+\n|   ``directions``      | locations         | | Specify the locations to be visited in order. Usually this |\n|                       |                   | | is done with ``[Lon, Lat]`` tuples, but some routers offer |\n|                       |                   | | additional options to create a location element.           |\n|                       +-------------------+--------------------------------------------------------------+\n|                       | profile           | | The mode of transport, i.e. car, bicycle, pedestrian. Each |\n|                       |                   | | router specifies their own profiles.                       |\n+-----------------------+-------------------+--------------------------------------------------------------+\n|   ``isochrones``      | locations         | | Specify the locations to calculate isochrones for. Usually |\n|                       |                   | | this is done with ``[Lon, Lat]`` tuples, but some routers  |\n|                       |                   | | offer additional options to create a location element.     |\n|                       +-------------------+--------------------------------------------------------------+\n|                       | profile           | | The mode of transport, i.e. car, bicycle, pedestrian. Each |\n|                       |                   | | router specifies their own profiles.                       |\n|                       +-------------------+--------------------------------------------------------------+\n|                       | intervals         | | The ranges to calculate isochrones for. Either in seconds  |\n|                       |                   | | or in meters, depending on ``interval_type``.              |\n|                       +-------------------+--------------------------------------------------------------+\n|                       | intervals _type   | | The dimension of ``intervals``, which takes router         |\n|                       |                   | | dependent values, but generally describes time or distance |\n+-----------------------+-------------------+--------------------------------------------------------------+\n|      ``matrix``       | locations         | | Specify all locations you want to calculate a matrix       |\n|                       |                   | | for. If ``sources`` or ``destinations`` is not set, this   |\n|                       |                   | | will return a symmetrical matrix. Usually this is done     |\n|                       |                   | | with ``[Lon, Lat]`` tuples, but some routers offer         |\n|                       |                   | | additional options to create a location element.           |\n|                       +-------------------+--------------------------------------------------------------+\n|                       | profile           | | The mode of transport, i.e. car, bicycle, pedestrian. Each |\n|                       |                   | | router specifies their own profiles.                       |\n|                       +-------------------+--------------------------------------------------------------+\n|                       | sources           | | The indices of the ``locations`` parameter iterable to     |\n|                       |                   | | take as sources for the matrix calculation. If not         |\n|                       |                   | | specified all ``locations`` are considered to be sources.  |\n|                       +-------------------+--------------------------------------------------------------+\n|                       | sources           | | The indices of the ``locations`` parameter iterable to     |\n|                       |                   | | take as destinations for the matrix calculation. If not    |\n|                       |                   | | specified all ``locations`` are considered to be           |\n|                       |                   | | destinations.                                              |\n+-----------------------+-------------------+--------------------------------------------------------------+\n\nContributing\n------------\n\nWe :heart: contributions and realistically think that's the only way to support and maintain most\nrouting engines in the long run. To get you started, we created a `Contribution guideline <./CONTRIBUTING.md>`_.\n\nExamples\n--------\n\nFollow our examples to understand how simple **routingpy** is to use.\n\nOn top of the examples listed below, find interactive notebook(s) on mybinder.org_.\n\nBasic Usage\n~~~~~~~~~~~\n\nGet all attributes\n++++++++++++++++++\n\n**routingpy** is designed to take the burden off your shoulder to parse the JSON response of each provider, exposing\nthe most important information of the response as attributes of the response object. The actual JSON is always accessible via\nthe ``raw`` attribute:\n\n.. code:: python\n\n    from routingpy import MapboxValhalla\n    from pprint import pprint\n\n    # Some locations in Berlin\n    coords = [[13.413706, 52.490202], [13.421838, 52.514105],\n              [13.453649, 52.507987], [13.401947, 52.543373]]\n    client = MapboxValhalla(api_key='mapbox_key')\n\n    route = client.directions(locations=coords, profile='pedestrian')\n    isochrones = client.isochrones(locations=coords[0], profile='pedestrian', intervals=[600, 1200])\n    matrix = client.matrix(locations=coords, profile='pedestrian')\n\n    pprint((route.geometry, route.duration, route.distance, route.raw))\n    pprint((isochrones.raw, isochrones[0].geometry, isochrones[0].center, isochrones[0].interval))\n    pprint((matrix.durations, matrix.distances, matrix.raw))\n\n\nMulti Provider\n++++++++++++++\n\nEasily calculate routes, isochrones and matrices for multiple providers:\n\n.. code:: python\n\n    from routingpy import Graphhopper, ORS, MapboxOSRM\n    from shapely.geometry import Polygon\n\n    # Define the clients and their profile parameter\n    apis = (\n       (ORS(api_key='ors_key'), 'cycling-regular'),\n       (Graphhopper(api_key='gh_key'), 'bike'),\n       (MapboxOSRM(api_key='mapbox_key'), 'cycling')\n    )\n    # Some locations in Berlin\n    coords = [[13.413706, 52.490202], [13.421838, 52.514105],\n              [13.453649, 52.507987], [13.401947, 52.543373]]\n\n    for api in apis:\n        client, profile = api\n        route = client.directions(locations=coords, profile=profile)\n        print(\"Direction - {}:\\n\\tDuration: {}\\n\\tDistance: {}\".format(client.__class__.__name__,\n                                                                       route.duration,\n                                                                       route.distance))\n        isochrones = client.isochrones(locations=coords[0], profile=profile, intervals=[600, 1200])\n        for iso in isochrones:\n            print(\"Isochrone {} secs - {}:\\n\\tArea: {} sqm\".format(client.__class__.__name__,\n                                                                   iso.interval,\n                                                                   Polygon(iso.geometry).area))\n        matrix = client.matrix(locations=coords, profile=profile)\n        print(\"Matrix - {}:\\n\\tDurations: {}\\n\\tDistances: {}\".format(client.__class__.__name__,\n                                                                      matrix.durations,\n                                                                      matrix.distances))\n\n\nDry run - Debug\n+++++++++++++++\n\nOften it is crucial to examine the request before it is sent. Mostly useful for debugging:\n\n.. code:: python\n\n    from routingpy import ORS\n\n    client = ORS(api_key='ors_key')\n    route = client.directions(\n        locations = [[13.413706, 52.490202], [13.421838, 52.514105]],\n        profile='driving-hgv',\n        dry_run=True\n    )\n\n\nAdvanced Usage\n~~~~~~~~~~~~~~\n\nLocal instance of FOSS router\n+++++++++++++++++++++++++++++\n\nAll FOSS routing engines can be run locally, such as openrouteservice, Valhalla, OSRM and GraphHopper. To be able\nto use **routingpy** with a local installation, just change the ``base_url`` of the client. This assumes that you did\nnot change the URL(s) of the exposed endpoint(s):\n\n.. code:: python\n\n    from routingpy import Valhalla\n\n    # no trailing slash, api_key is not necessary\n    client = Valhalla(base_url='http://localhost:8088/v1')\n\nProxies, Rate limiters and API errors\n+++++++++++++++++++++++++++++++++++++\n\nProxies are easily set up using following ``requests`` scheme for proxying. Also, when batch requesting, **routingpy**\ncan be set up to resume its requests when the remote API rate limits (i.e. responds\nwith HTTP 429). Also, it can be set up to ignore API errors and instead print them as warnings to ``stdout``. Be careful,\nwhen ignoring ``RouterApiErrors``, those often count towards your rate limit.\n\nAll these parameters, and more, can optionally be **globally set** for all router modules or individually per instance:\n\n.. code:: python\n\n    from routingpy import Graphhopper, ORS\n    from routingpy.routers import options\n\n    request_kwargs = dict(proxies=dict(https='129.125.12.0'))\n\n    client = Graphhopper(\n        api_key='gh_key',\n        retry_over_query_limit=False,\n        skip_api_error=True,\n        requests_kwargs=request_kwargs\n    )\n\n    # Or alternvatively, set these options globally:\n    options.default_proxies = {'https': '129.125.12.0'}\n    options.default_retry_over_query_limit = False\n    options.default_skip_api_error = True\n\n\n.. _Mapbox, either Valhalla or OSRM: https://docs.mapbox.com/api/navigation\n.. _Openrouteservice: https://openrouteservice.org/dev/#/api-docs\n.. _Here Maps: https://developer.here.com/documentation\n.. _Google Maps: https://developers.google.com/maps/documentation\n.. _Graphhopper: https://graphhopper.com/api/1/docs\n.. _Local Valhalla: https://github.com/valhalla/valhalla-docs\n.. _Local Mapbox: https://github.com/Project-OSRM/osrm-backend/wiki\n.. _documentation: https://routingpy.readthedocs.io/en/latest\n.. _routing-py.routers: https://routingpy.readthedocs.io/en/latest/#module-routingpy.routers\n.. _Apache 2.0 License: https://github.com/gis-ops/routing-py/blob/master/LICENSE\n.. _mybinder.org: https://mybinder.org/v2/gh/gis-ops/routing-py/master?filepath=examples\n.. _poetry: https://github.com/sdispater/poetry\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "routingpy", "package_url": "https://pypi.org/project/routingpy/", "platform": "", "project_url": "https://pypi.org/project/routingpy/", "project_urls": null, "release_url": "https://pypi.org/project/routingpy/0.2.7/", "requires_dist": ["requests (>=2.0.0,<3.0.0)"], "requires_python": ">=3.5,<4.0", "summary": "One lib to route them all.", "version": "0.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/gis-ops/routing-py\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63e5758e2cc000451c1fd2edbd1e6a20a4ae15d9/68747470733a2f2f7472617669732d63692e6f72672f6769732d6f70732f726f7574696e672d70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/gis-ops/routing-py?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b2a01d81e2c328e669f035a8c8fe924406c0503/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6769732d6f70732f726f7574696e672d70792f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://routingpy.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f92c4d84705ebabac24635ef4599e99c4c4c222d/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f726f7574696e6770792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://mybinder.org/v2/gh/gis-ops/routing-py/master?filepath=examples\" rel=\"nofollow\"><img alt=\"MyBinder.org\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a>\n<p><em>One lib to route them all</em> - <strong>routingpy</strong> is a Python 3 client for several\npopular routing webservices.</p>\n<p>Inspired by <a href=\"https://github.com/geopy/geopy\" rel=\"nofollow\">geopy</a> and its great community of contributors, <strong>routingpy</strong> enables\neasy and consistent access to third-party spatial webservices to request <strong>route directions</strong>, <strong>isochrones</strong>\nor <strong>time-distance matrices</strong>.</p>\n<p><strong>routingpy</strong> currently includes support for the following services:</p>\n<ul>\n<li><a href=\"https://docs.mapbox.com/api/navigation\" rel=\"nofollow\">Mapbox, either Valhalla or OSRM</a></li>\n<li><a href=\"https://openrouteservice.org/dev/#/api-docs\" rel=\"nofollow\">Openrouteservice</a></li>\n<li><a href=\"https://developer.here.com/documentation\" rel=\"nofollow\">Here Maps</a></li>\n<li><a href=\"https://developers.google.com/maps/documentation\" rel=\"nofollow\">Google Maps</a></li>\n<li><a href=\"https://graphhopper.com/api/1/docs\" rel=\"nofollow\">Graphhopper</a></li>\n<li><a href=\"https://github.com/valhalla/valhalla-docs\" rel=\"nofollow\">Local Valhalla</a></li>\n<li><a href=\"https://github.com/Project-OSRM/osrm-backend/wiki\" rel=\"nofollow\">Local Mapbox</a></li>\n</ul>\n<p>This list is hopefully growing with time and contributions by other developers. An up-to-date list is always availaable\nin our <a href=\"https://routingpy.readthedocs.io/en/latest\" rel=\"nofollow\">documentation</a>.</p>\n<p><strong>routing-py</strong> is tested against CPython versions 3.6, 3.7, 3.8-dev and against PyPy 3.6.x. As other major libraries like <tt>numpy</tt>\nand <tt>pandas</tt> decided to drop Python 2 support, we did not see any reason to burden the project with the compatibility\nweight.</p>\n<p>\u00a9 routing-py contributors 2020 under the <a href=\"https://github.com/gis-ops/routing-py/blob/master/LICENSE\" rel=\"nofollow\">Apache 2.0 License</a>.</p>\n<img alt=\"routing-py-image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93a082796efd96880dbaa99bb946bed5725be8f0/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31303332323039342f35373335373732302d65313830633038302d373137332d313165392d393761342d6365636234363730303635642e6a7067\">\n<div id=\"why-routing-py\">\n<h2>Why routing-py?</h2>\n<p>You want to</p>\n<ul>\n<li>get from A to B by transit, foot, bike, car or hgv</li>\n<li>compute a region of reachability</li>\n<li>calculate a time distance matrix for a N x M table</li>\n</ul>\n<p>and don\u2019t know which provider to use? Great. Then <strong>routingpy</strong> is exactly what you\u2019re looking for.</p>\n<p>For the better or worse, every provider works on different spatial global datasets and uses a plethora of algorithms on top.\nWhile Google or HERE build on top of proprietary datasets, providers such as Mapbox or Graphhopper consume OpenStreetMap data\nfor their base network. Also, all providers offer a different amount of options one can use to restrict the wayfinding.\nUltimately this means that <strong>results may differ</strong> - and our experience tells us: they do, and not\ntoo little. This calls for a careful evaluation which service provider to use for which specific use case.</p>\n<p>With <strong>routingpy</strong> we have made an attempt to simplify this process for you.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<a href=\"https://badge.fury.io/py/routingpy\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8fc7721cbfe34c354fa1f9adc5411fda588098c/68747470733a2f2f62616467652e667572792e696f2f70792f726f7574696e6770792e737667\"></a>\n<a href=\"https://anaconda.org/nilsnolde/routingpy\" rel=\"nofollow\"><img alt=\"Conda install\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb59302d0e6086a600ae35344b8fc070457b8de2/68747470733a2f2f616e61636f6e64612e6f72672f6e696c736e6f6c64652f726f7574696e6770792f6261646765732f76657273696f6e2e737667\"></a>\n<p><strong>Recommended</strong>: Install via <a href=\"https://github.com/sdispater/poetry\" rel=\"nofollow\">poetry</a>:</p>\n<pre>poetry install <span class=\"o\">[</span>--no-dev<span class=\"o\">]</span>\n</pre>\n<p>Install using <tt>pip</tt> with</p>\n<pre>pip install routingpy\n</pre>\n<p>Or with conda (<strong>deprecated</strong>)</p>\n<pre>conda install -c nilsnolde routingpy\n</pre>\n<p>Or the lastest from source</p>\n<pre>pip install git+git://github.com/gis-ops/routing-py\n</pre>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>Every provider has its own specifications and features. However the basic blueprints are the same across all. We tried hard\nto make the transition from one provider to the other as seamless as possible. We follow two dogmas for all implementations:</p>\n<ul>\n<li>All basic parameters have to be the same for all routers for each endpoint</li>\n<li>All routers still retain their special parameters for their endpoints, which make them unique in the end</li>\n</ul>\n<p>This naturally means that usually those <strong>basic parameters are not named the same way</strong> as the endpoints they query. However,\nall <strong>provider specific parameters are named the exact same</strong> as their remote counterparts.</p>\n<p>The following table gives you an overview which basic arguments are abstracted:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Endpoint</th>\n<th>Argument</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>directions</tt></td>\n<td>locations</td>\n<td><div>\n<div>Specify the locations to be visited in order. Usually this</div>\n<div>is done with <tt>[Lon, Lat]</tt> tuples, but some routers offer</div>\n<div>additional options to create a location element.</div>\n</div>\n</td>\n</tr>\n<tr><td>profile</td>\n<td><div>\n<div>The mode of transport, i.e. car, bicycle, pedestrian. Each</div>\n<div>router specifies their own profiles.</div>\n</div>\n</td>\n</tr>\n<tr><td><tt>isochrones</tt></td>\n<td>locations</td>\n<td><div>\n<div>Specify the locations to calculate isochrones for. Usually</div>\n<div>this is done with <tt>[Lon, Lat]</tt> tuples, but some routers</div>\n<div>offer additional options to create a location element.</div>\n</div>\n</td>\n</tr>\n<tr><td>profile</td>\n<td><div>\n<div>The mode of transport, i.e. car, bicycle, pedestrian. Each</div>\n<div>router specifies their own profiles.</div>\n</div>\n</td>\n</tr>\n<tr><td>intervals</td>\n<td><div>\n<div>The ranges to calculate isochrones for. Either in seconds</div>\n<div>or in meters, depending on <tt>interval_type</tt>.</div>\n</div>\n</td>\n</tr>\n<tr><td>intervals _type</td>\n<td><div>\n<div>The dimension of <tt>intervals</tt>, which takes router</div>\n<div>dependent values, but generally describes time or distance</div>\n</div>\n</td>\n</tr>\n<tr><td><tt>matrix</tt></td>\n<td>locations</td>\n<td><div>\n<div>Specify all locations you want to calculate a matrix</div>\n<div>for. If <tt>sources</tt> or <tt>destinations</tt> is not set, this</div>\n<div>will return a symmetrical matrix. Usually this is done</div>\n<div>with <tt>[Lon, Lat]</tt> tuples, but some routers offer</div>\n<div>additional options to create a location element.</div>\n</div>\n</td>\n</tr>\n<tr><td>profile</td>\n<td><div>\n<div>The mode of transport, i.e. car, bicycle, pedestrian. Each</div>\n<div>router specifies their own profiles.</div>\n</div>\n</td>\n</tr>\n<tr><td>sources</td>\n<td><div>\n<div>The indices of the <tt>locations</tt> parameter iterable to</div>\n<div>take as sources for the matrix calculation. If not</div>\n<div>specified all <tt>locations</tt> are considered to be sources.</div>\n</div>\n</td>\n</tr>\n<tr><td>sources</td>\n<td><div>\n<div>The indices of the <tt>locations</tt> parameter iterable to</div>\n<div>take as destinations for the matrix calculation. If not</div>\n<div>specified all <tt>locations</tt> are considered to be</div>\n<div>destinations.</div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>We :heart: contributions and realistically think that\u2019s the only way to support and maintain most\nrouting engines in the long run. To get you started, we created a <a href=\"./CONTRIBUTING.md\" rel=\"nofollow\">Contribution guideline</a>.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Follow our examples to understand how simple <strong>routingpy</strong> is to use.</p>\n<p>On top of the examples listed below, find interactive notebook(s) on <a href=\"https://mybinder.org/v2/gh/gis-ops/routing-py/master?filepath=examples\" rel=\"nofollow\">mybinder.org</a>.</p>\n<div id=\"basic-usage\">\n<h3>Basic Usage</h3>\n<div id=\"get-all-attributes\">\n<h4>Get all attributes</h4>\n<p><strong>routingpy</strong> is designed to take the burden off your shoulder to parse the JSON response of each provider, exposing\nthe most important information of the response as attributes of the response object. The actual JSON is always accessible via\nthe <tt>raw</tt> attribute:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">routingpy</span> <span class=\"kn\">import</span> <span class=\"n\">MapboxValhalla</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n\n<span class=\"c1\"># Some locations in Berlin</span>\n<span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mf\">13.413706</span><span class=\"p\">,</span> <span class=\"mf\">52.490202</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">13.421838</span><span class=\"p\">,</span> <span class=\"mf\">52.514105</span><span class=\"p\">],</span>\n          <span class=\"p\">[</span><span class=\"mf\">13.453649</span><span class=\"p\">,</span> <span class=\"mf\">52.507987</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">13.401947</span><span class=\"p\">,</span> <span class=\"mf\">52.543373</span><span class=\"p\">]]</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MapboxValhalla</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">'mapbox_key'</span><span class=\"p\">)</span>\n\n<span class=\"n\">route</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">directions</span><span class=\"p\">(</span><span class=\"n\">locations</span><span class=\"o\">=</span><span class=\"n\">coords</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"s1\">'pedestrian'</span><span class=\"p\">)</span>\n<span class=\"n\">isochrones</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">isochrones</span><span class=\"p\">(</span><span class=\"n\">locations</span><span class=\"o\">=</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"s1\">'pedestrian'</span><span class=\"p\">,</span> <span class=\"n\">intervals</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">1200</span><span class=\"p\">])</span>\n<span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">locations</span><span class=\"o\">=</span><span class=\"n\">coords</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"s1\">'pedestrian'</span><span class=\"p\">)</span>\n\n<span class=\"n\">pprint</span><span class=\"p\">((</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">))</span>\n<span class=\"n\">pprint</span><span class=\"p\">((</span><span class=\"n\">isochrones</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">,</span> <span class=\"n\">isochrones</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"p\">,</span> <span class=\"n\">isochrones</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">center</span><span class=\"p\">,</span> <span class=\"n\">isochrones</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"p\">))</span>\n<span class=\"n\">pprint</span><span class=\"p\">((</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">durations</span><span class=\"p\">,</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">distances</span><span class=\"p\">,</span> <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"multi-provider\">\n<h4>Multi Provider</h4>\n<p>Easily calculate routes, isochrones and matrices for multiple providers:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">routingpy</span> <span class=\"kn\">import</span> <span class=\"n\">Graphhopper</span><span class=\"p\">,</span> <span class=\"n\">ORS</span><span class=\"p\">,</span> <span class=\"n\">MapboxOSRM</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shapely.geometry</span> <span class=\"kn\">import</span> <span class=\"n\">Polygon</span>\n\n<span class=\"c1\"># Define the clients and their profile parameter</span>\n<span class=\"n\">apis</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n   <span class=\"p\">(</span><span class=\"n\">ORS</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">'ors_key'</span><span class=\"p\">),</span> <span class=\"s1\">'cycling-regular'</span><span class=\"p\">),</span>\n   <span class=\"p\">(</span><span class=\"n\">Graphhopper</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">'gh_key'</span><span class=\"p\">),</span> <span class=\"s1\">'bike'</span><span class=\"p\">),</span>\n   <span class=\"p\">(</span><span class=\"n\">MapboxOSRM</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">'mapbox_key'</span><span class=\"p\">),</span> <span class=\"s1\">'cycling'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Some locations in Berlin</span>\n<span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mf\">13.413706</span><span class=\"p\">,</span> <span class=\"mf\">52.490202</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">13.421838</span><span class=\"p\">,</span> <span class=\"mf\">52.514105</span><span class=\"p\">],</span>\n          <span class=\"p\">[</span><span class=\"mf\">13.453649</span><span class=\"p\">,</span> <span class=\"mf\">52.507987</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">13.401947</span><span class=\"p\">,</span> <span class=\"mf\">52.543373</span><span class=\"p\">]]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">api</span> <span class=\"ow\">in</span> <span class=\"n\">apis</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">api</span>\n    <span class=\"n\">route</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">directions</span><span class=\"p\">(</span><span class=\"n\">locations</span><span class=\"o\">=</span><span class=\"n\">coords</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">profile</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Direction - </span><span class=\"si\">{}</span><span class=\"s2\">:</span><span class=\"se\">\\n\\t</span><span class=\"s2\">Duration: </span><span class=\"si\">{}</span><span class=\"se\">\\n\\t</span><span class=\"s2\">Distance: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n                                                                   <span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"p\">,</span>\n                                                                   <span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">))</span>\n    <span class=\"n\">isochrones</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">isochrones</span><span class=\"p\">(</span><span class=\"n\">locations</span><span class=\"o\">=</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">profile</span><span class=\"p\">,</span> <span class=\"n\">intervals</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">1200</span><span class=\"p\">])</span>\n    <span class=\"k\">for</span> <span class=\"n\">iso</span> <span class=\"ow\">in</span> <span class=\"n\">isochrones</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Isochrone </span><span class=\"si\">{}</span><span class=\"s2\"> secs - </span><span class=\"si\">{}</span><span class=\"s2\">:</span><span class=\"se\">\\n\\t</span><span class=\"s2\">Area: </span><span class=\"si\">{}</span><span class=\"s2\"> sqm\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n                                                               <span class=\"n\">iso</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"p\">,</span>\n                                                               <span class=\"n\">Polygon</span><span class=\"p\">(</span><span class=\"n\">iso</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">area</span><span class=\"p\">))</span>\n    <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">(</span><span class=\"n\">locations</span><span class=\"o\">=</span><span class=\"n\">coords</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">profile</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Matrix - </span><span class=\"si\">{}</span><span class=\"s2\">:</span><span class=\"se\">\\n\\t</span><span class=\"s2\">Durations: </span><span class=\"si\">{}</span><span class=\"se\">\\n\\t</span><span class=\"s2\">Distances: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n                                                                  <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">durations</span><span class=\"p\">,</span>\n                                                                  <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"n\">distances</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"dry-run-debug\">\n<h4>Dry run - Debug</h4>\n<p>Often it is crucial to examine the request before it is sent. Mostly useful for debugging:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">routingpy</span> <span class=\"kn\">import</span> <span class=\"n\">ORS</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ORS</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">'ors_key'</span><span class=\"p\">)</span>\n<span class=\"n\">route</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">directions</span><span class=\"p\">(</span>\n    <span class=\"n\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mf\">13.413706</span><span class=\"p\">,</span> <span class=\"mf\">52.490202</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">13.421838</span><span class=\"p\">,</span> <span class=\"mf\">52.514105</span><span class=\"p\">]],</span>\n    <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"s1\">'driving-hgv'</span><span class=\"p\">,</span>\n    <span class=\"n\">dry_run</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"advanced-usage\">\n<h3>Advanced Usage</h3>\n<div id=\"local-instance-of-foss-router\">\n<h4>Local instance of FOSS router</h4>\n<p>All FOSS routing engines can be run locally, such as openrouteservice, Valhalla, OSRM and GraphHopper. To be able\nto use <strong>routingpy</strong> with a local installation, just change the <tt>base_url</tt> of the client. This assumes that you did\nnot change the URL(s) of the exposed endpoint(s):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">routingpy</span> <span class=\"kn\">import</span> <span class=\"n\">Valhalla</span>\n\n<span class=\"c1\"># no trailing slash, api_key is not necessary</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Valhalla</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">'http://localhost:8088/v1'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"proxies-rate-limiters-and-api-errors\">\n<h4>Proxies, Rate limiters and API errors</h4>\n<p>Proxies are easily set up using following <tt>requests</tt> scheme for proxying. Also, when batch requesting, <strong>routingpy</strong>\ncan be set up to resume its requests when the remote API rate limits (i.e. responds\nwith HTTP 429). Also, it can be set up to ignore API errors and instead print them as warnings to <tt>stdout</tt>. Be careful,\nwhen ignoring <tt>RouterApiErrors</tt>, those often count towards your rate limit.</p>\n<p>All these parameters, and more, can optionally be <strong>globally set</strong> for all router modules or individually per instance:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">routingpy</span> <span class=\"kn\">import</span> <span class=\"n\">Graphhopper</span><span class=\"p\">,</span> <span class=\"n\">ORS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">routingpy.routers</span> <span class=\"kn\">import</span> <span class=\"n\">options</span>\n\n<span class=\"n\">request_kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">proxies</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">https</span><span class=\"o\">=</span><span class=\"s1\">'129.125.12.0'</span><span class=\"p\">))</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Graphhopper</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">'gh_key'</span><span class=\"p\">,</span>\n    <span class=\"n\">retry_over_query_limit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">skip_api_error</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">requests_kwargs</span><span class=\"o\">=</span><span class=\"n\">request_kwargs</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Or alternvatively, set these options globally:</span>\n<span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">default_proxies</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'https'</span><span class=\"p\">:</span> <span class=\"s1\">'129.125.12.0'</span><span class=\"p\">}</span>\n<span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">default_retry_over_query_limit</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">default_skip_api_error</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6911398, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b177dea8ff66487b279409f1ce77af71", "sha256": "a6a8ba79ca27cac9a7771a51054d2d15129f3b3d55ce662da333fb3b276a4f77"}, "downloads": -1, "filename": "routingpy-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b177dea8ff66487b279409f1ce77af71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 70277, "upload_time": "2019-04-14T16:18:11", "upload_time_iso_8601": "2019-04-14T16:18:11.094517Z", "url": "https://files.pythonhosted.org/packages/16/ff/078c5f8ca9b3f209e579f91aaea5bddc2382e1b71d4f9fdaa3d6c7502b48/routingpy-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c39ac2eafe6f580e06ba29976108c42d", "sha256": "480a675cf66bf78922bad51c42ad414fb9b4189c1b7896520a8f8bc1a969f5a1"}, "downloads": -1, "filename": "routingpy-0.1.tar.gz", "has_sig": false, "md5_digest": "c39ac2eafe6f580e06ba29976108c42d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 50152, "upload_time": "2019-04-14T16:18:14", "upload_time_iso_8601": "2019-04-14T16:18:14.770864Z", "url": "https://files.pythonhosted.org/packages/f4/9e/e3c03bb21f7c828561a3b4e9c5868b82147603843e22892f1c561f13da68/routingpy-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "43d8a5234a21d55bbc1b610b4d13729e", "sha256": "bb8b6cde46bde008c94c61e79d129bced82dd78f93c3dc42fefb31a6dbea32da"}, "downloads": -1, "filename": "routingpy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "43d8a5234a21d55bbc1b610b4d13729e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 70330, "upload_time": "2019-04-14T16:27:29", "upload_time_iso_8601": "2019-04-14T16:27:29.235192Z", "url": "https://files.pythonhosted.org/packages/98/40/11f33b83ec4dc6cb8b5a21e533d6fe9a80ed3a4621de9278568fc1bec7b3/routingpy-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26976040030e165a204247b3f01e6a70", "sha256": "ca970e3f2d91281bc19676b0017d7c9d75898914a8b9802dc27b6695fffa87c1"}, "downloads": -1, "filename": "routingpy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "26976040030e165a204247b3f01e6a70", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 50206, "upload_time": "2019-04-14T16:27:31", "upload_time_iso_8601": "2019-04-14T16:27:31.546567Z", "url": "https://files.pythonhosted.org/packages/2c/d2/c4966a36a1450bf015ca7414c402d6905c5bf5691589427de6366df7b9ce/routingpy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3dac0651962fe5d3443ef3bf190bc77a", "sha256": "7618a3be13a8464f9e818893ac2fefbed80f41b1b25ec722fc5b886aa9d9c9f6"}, "downloads": -1, "filename": "routingpy-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3dac0651962fe5d3443ef3bf190bc77a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 70329, "upload_time": "2019-04-14T17:00:00", "upload_time_iso_8601": "2019-04-14T17:00:00.928738Z", "url": "https://files.pythonhosted.org/packages/c0/f7/c39198e27f1432125796df44a270464144123d8f72f044195bd0ec6013ca/routingpy-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e102d3a9616b12263b52247d43d208b", "sha256": "b697cc660e1f7f2e6478259f66eda2c78afbd747f917ad4e5898a0f082374f47"}, "downloads": -1, "filename": "routingpy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2e102d3a9616b12263b52247d43d208b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 50534, "upload_time": "2019-04-14T17:00:03", "upload_time_iso_8601": "2019-04-14T17:00:03.108441Z", "url": "https://files.pythonhosted.org/packages/68/e6/fa886aae12b66141146145b615c8420af69b0b79c599b8fe2d44a5c9a54f/routingpy-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "2c0a8e4f016ae50cda69efa99718e663", "sha256": "a565b24f4c325dba6bb1cff0394abc5e3bb7a04969a6e6255fcfafd484469bf5"}, "downloads": -1, "filename": "routingpy-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2c0a8e4f016ae50cda69efa99718e663", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 70661, "upload_time": "2019-04-16T10:09:08", "upload_time_iso_8601": "2019-04-16T10:09:08.470930Z", "url": "https://files.pythonhosted.org/packages/fe/97/e9accbfd9866d3e33587529e6d5dec884b6e470b5e87687ece1d1453919b/routingpy-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f154adcb3eeece060d34a0b5ae5716df", "sha256": "c93620fc18bc5fe1085b77606ef19718351e1777d35c53df64cba99985e96647"}, "downloads": -1, "filename": "routingpy-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f154adcb3eeece060d34a0b5ae5716df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 54360, "upload_time": "2019-04-16T10:09:12", "upload_time_iso_8601": "2019-04-16T10:09:12.225101Z", "url": "https://files.pythonhosted.org/packages/05/40/90f50e5f13a078501e30003d29918eb03b1b6ca7ad554cc17286024038c0/routingpy-0.1.3.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "684e3a0c17573e334ec92a81f0dde765", "sha256": "a877fb7c5dd77419aee11ea101fb3bcbabb8af77b7448bb7a0bb0c34b68d9525"}, "downloads": -1, "filename": "routingpy-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "684e3a0c17573e334ec92a81f0dde765", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 71106, "upload_time": "2019-04-30T12:06:10", "upload_time_iso_8601": "2019-04-30T12:06:10.014915Z", "url": "https://files.pythonhosted.org/packages/43/f4/c3274d6dfdc2a4999c193858a60e746da15802ef83866454f2fe9e08b8a1/routingpy-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e8bd2dd33a86accd985af68cebb0c27", "sha256": "5f467772c539771ad93d1d72dda9d8eca77939d036e4b3ada9cf224a29bab88f"}, "downloads": -1, "filename": "routingpy-0.2.tar.gz", "has_sig": false, "md5_digest": "0e8bd2dd33a86accd985af68cebb0c27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 55019, "upload_time": "2019-04-30T12:06:17", "upload_time_iso_8601": "2019-04-30T12:06:17.206781Z", "url": "https://files.pythonhosted.org/packages/1d/ac/192ab5f21f382dac6334efdf69d44af2e02273a9e4f911811b870ef4e8b2/routingpy-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3d6c6c1348bbf340d50169d10544f956", "sha256": "6f5a5f2c350db1a341e00d0425f85e0907dccfa81d0cd9245a832291c5969c18"}, "downloads": -1, "filename": "routingpy-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3d6c6c1348bbf340d50169d10544f956", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 71255, "upload_time": "2019-05-03T06:59:52", "upload_time_iso_8601": "2019-05-03T06:59:52.389614Z", "url": "https://files.pythonhosted.org/packages/85/61/a3c1d8d2253b293061e9a5d56a7532a573eed5d01a15133ea05e6bbb6f96/routingpy-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59a0fe8eced54e012f468ba9799521fc", "sha256": "d87a399c9dc28397ad89feac964f186e862c71ce31111e6b28948f1c215dad72"}, "downloads": -1, "filename": "routingpy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "59a0fe8eced54e012f468ba9799521fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 55136, "upload_time": "2019-05-03T07:00:00", "upload_time_iso_8601": "2019-05-03T07:00:00.399945Z", "url": "https://files.pythonhosted.org/packages/7e/66/c01b5473f65b17dda568db112436395df46b3c5d30323b6aa12fac895787/routingpy-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d04d8dc0cdf60ac3176ba8fecbebaa6c", "sha256": "9a86e0e2466a30c97178fdcb0c435777b69150902001a309aa12bc40781ec41f"}, "downloads": -1, "filename": "routingpy-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d04d8dc0cdf60ac3176ba8fecbebaa6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 71353, "upload_time": "2019-05-07T20:19:52", "upload_time_iso_8601": "2019-05-07T20:19:52.139210Z", "url": "https://files.pythonhosted.org/packages/a0/e7/db39d9dc95f4637d34f6d8cf98b8b50aaca46abe27c8584349a85a713886/routingpy-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29a6e3246ad816c1f05abf8bc9e9d74d", "sha256": "cefdda2a63fb21a94ca0df76e7aee48344d9c7f5cd440c774f2bc56424f69b4c"}, "downloads": -1, "filename": "routingpy-0.2.2.tar.gz", "has_sig": false, "md5_digest": "29a6e3246ad816c1f05abf8bc9e9d74d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 55343, "upload_time": "2019-05-07T20:19:54", "upload_time_iso_8601": "2019-05-07T20:19:54.556723Z", "url": "https://files.pythonhosted.org/packages/87/4c/bb26b5cb51e18340c85562923816e70eed8c8e03eed155333d34f05f6460/routingpy-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c0cf83ea875e08cddf7ede3c6b3579b3", "sha256": "64be45b325e3d4a544efae27d1d474e7e84a13e6ffbbca4a880638f4fc6e9c2c"}, "downloads": -1, "filename": "routingpy-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c0cf83ea875e08cddf7ede3c6b3579b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 71352, "upload_time": "2019-05-30T13:35:11", "upload_time_iso_8601": "2019-05-30T13:35:11.293825Z", "url": "https://files.pythonhosted.org/packages/6e/49/03df27d78320989b1fdbdde9a886a69827b158847f836fd0f2b910f53881/routingpy-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb04d59e117428d1acd7eec62290d266", "sha256": "ad303d61a54dc65637b4281a205102f67580e0080878ae2df621187f3b85d03c"}, "downloads": -1, "filename": "routingpy-0.2.3.tar.gz", "has_sig": false, "md5_digest": "fb04d59e117428d1acd7eec62290d266", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 55344, "upload_time": "2019-05-30T13:35:13", "upload_time_iso_8601": "2019-05-30T13:35:13.411407Z", "url": "https://files.pythonhosted.org/packages/a0/5e/826948d85e51d67cd1ab36334c7f9f9f93a095a495d7fc4cc1ae7f2abe35/routingpy-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "799a188f36904ffe5effcedb19ab3af8", "sha256": "f9664a3137642db839cd13b0cf87e8343d56c0f20799e05d0e0800333726b421"}, "downloads": -1, "filename": "routingpy-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "799a188f36904ffe5effcedb19ab3af8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 66866, "upload_time": "2019-11-05T04:12:27", "upload_time_iso_8601": "2019-11-05T04:12:27.394090Z", "url": "https://files.pythonhosted.org/packages/14/c2/c03b05a383f8ec30eb935fb43970bfafd1683285930cfbee3a5e971c0dcf/routingpy-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de5d854f8fc492135d69557e6d2aecaa", "sha256": "49d15ddc2b53102d730f063cfaeaa5c94e49ec6807df19546ba9e91cef788262"}, "downloads": -1, "filename": "routingpy-0.2.4.tar.gz", "has_sig": false, "md5_digest": "de5d854f8fc492135d69557e6d2aecaa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 45683, "upload_time": "2019-11-05T04:12:29", "upload_time_iso_8601": "2019-11-05T04:12:29.537463Z", "url": "https://files.pythonhosted.org/packages/bd/5f/b91a2049ae81e87e07da76fb9b1672b4096e47ae3ce2fe33ba40cd0995ec/routingpy-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "362bb5598bc39face17ab9be85bb00c2", "sha256": "73ed14c271bb5cd0273314a53d37492834b7156c1545e3872ec66bcff0c06bed"}, "downloads": -1, "filename": "routingpy-0.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "362bb5598bc39face17ab9be85bb00c2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 71865, "upload_time": "2019-12-12T07:27:48", "upload_time_iso_8601": "2019-12-12T07:27:48.128978Z", "url": "https://files.pythonhosted.org/packages/af/a8/37db81d5eb53943f173371332ddb3a3993b46ee5fe97034b0a1baedc0ca7/routingpy-0.2.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03fee1b29519fd664a529769ed9b1ebf", "sha256": "a553d5bbfa256348064ac5ba9741cef5e29296f4ce88c0cd0bebda69185018e6"}, "downloads": -1, "filename": "routingpy-0.2.5.tar.gz", "has_sig": false, "md5_digest": "03fee1b29519fd664a529769ed9b1ebf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 55266, "upload_time": "2019-12-12T07:27:50", "upload_time_iso_8601": "2019-12-12T07:27:50.165310Z", "url": "https://files.pythonhosted.org/packages/9f/71/b4efbba48517a4e85906d311ff4904e080edcbc5393b5743bde401e4469f/routingpy-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "045f1e3d9f6a607ae188b5aa815c2eb7", "sha256": "e2da7736dab2468ef9f8744f2877d36d458fc082877fe618759061a6e8acb87f"}, "downloads": -1, "filename": "routingpy-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "045f1e3d9f6a607ae188b5aa815c2eb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 67266, "upload_time": "2020-03-30T08:10:31", "upload_time_iso_8601": "2020-03-30T08:10:31.442279Z", "url": "https://files.pythonhosted.org/packages/51/a4/4ddff9691c4125f3af0ebff6c267bb2fdb76858ede6da6e67ced2bf0abb6/routingpy-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "240145af2ffa5f28cf33b8436870a44e", "sha256": "3c970df7a939b73e3e1bf01e933834aa90538583e70b239c1f3feeea2bfef6a6"}, "downloads": -1, "filename": "routingpy-0.2.6.tar.gz", "has_sig": false, "md5_digest": "240145af2ffa5f28cf33b8436870a44e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 46145, "upload_time": "2020-03-30T08:10:32", "upload_time_iso_8601": "2020-03-30T08:10:32.535345Z", "url": "https://files.pythonhosted.org/packages/31/54/d2f7072b560f8dbaadd84a04024a569a5178f399fffb54fb3b11fb718da4/routingpy-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "a4ea9f48702a0d3c5d24a75ef37cd8af", "sha256": "1943ed8bf909d5e64649e0704e47e03108b3c8f9091023a2ebc2207dcd0c8d76"}, "downloads": -1, "filename": "routingpy-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a4ea9f48702a0d3c5d24a75ef37cd8af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 71733, "upload_time": "2020-03-30T08:30:34", "upload_time_iso_8601": "2020-03-30T08:30:34.389280Z", "url": "https://files.pythonhosted.org/packages/09/4d/05b0b8caab68f5b0b3ebd2173445205dc7d34a9ef9748921fc19c550c767/routingpy-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a3766b13e16b52f49588a54326afb59", "sha256": "01545db9484d1b209e4ec635355963e901a0849f542ee71e9f63a43775268d24"}, "downloads": -1, "filename": "routingpy-0.2.7.tar.gz", "has_sig": false, "md5_digest": "5a3766b13e16b52f49588a54326afb59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 55521, "upload_time": "2020-03-30T08:30:35", "upload_time_iso_8601": "2020-03-30T08:30:35.949976Z", "url": "https://files.pythonhosted.org/packages/1b/27/6dc82b88ec1732f2dc02cf2303562ebdf609d50cb2adffed787412dad8de/routingpy-0.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a4ea9f48702a0d3c5d24a75ef37cd8af", "sha256": "1943ed8bf909d5e64649e0704e47e03108b3c8f9091023a2ebc2207dcd0c8d76"}, "downloads": -1, "filename": "routingpy-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a4ea9f48702a0d3c5d24a75ef37cd8af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 71733, "upload_time": "2020-03-30T08:30:34", "upload_time_iso_8601": "2020-03-30T08:30:34.389280Z", "url": "https://files.pythonhosted.org/packages/09/4d/05b0b8caab68f5b0b3ebd2173445205dc7d34a9ef9748921fc19c550c767/routingpy-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a3766b13e16b52f49588a54326afb59", "sha256": "01545db9484d1b209e4ec635355963e901a0849f542ee71e9f63a43775268d24"}, "downloads": -1, "filename": "routingpy-0.2.7.tar.gz", "has_sig": false, "md5_digest": "5a3766b13e16b52f49588a54326afb59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 55521, "upload_time": "2020-03-30T08:30:35", "upload_time_iso_8601": "2020-03-30T08:30:35.949976Z", "url": "https://files.pythonhosted.org/packages/1b/27/6dc82b88ec1732f2dc02cf2303562ebdf609d50cb2adffed787412dad8de/routingpy-0.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:07 2020"}