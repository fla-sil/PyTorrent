{"info": {"author": "Alex Dudko", "author_email": "duke@simfik.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "Deeply - Make your dataclasses more functional\n==============================================\n\nUsing this package you can do a deep conversion of your dataclass to a\ndictionary and initialize it from dict.\n\nGetting it\n~~~~~~~~~~\n\nTo download deeply, either fork this github repo or simply use PyPI via\npip.\n\n.. code:: sh\n\n   $ pip install deeply\n\nUsage\n-----\n\n1 - Import\n\n.. code:: python\n\n   from deeply import Deeply\n   from dataclasses import dataclass\n\n2 - Define your data classes with the following inheritance:\n\n.. code:: python\n\n   @dataclass\n   class A(Deeply):\n       a1: int\n       a2: int\n\n\n   @dataclass\n   class B(Deeply):\n       b1: str\n       b2: str\n\n   @dataclass\n   class C(Deeply):\n       a: A\n       b: B\n\n3 - Create an instance of the class and you can already use it:\n\n.. code:: python\n\n   c = C(A(1, 2), B('foo', 'bar'))\n\n   c.to_web()\n   # {'a': {'a1': 1, 'a2': 2}, 'b': {'b1': 'foo', 'b2': 'bar'}}\n\n4 - You can also initialize your class from a dictionary:\n\n.. code:: python\n\n   c = C.init_from_dict({\n       'a': {\n           'a1': 1,\n           'a2': 2\n       }, \n       'b': {\n           'b1': 'foo',\n           'b2': 'bar'\n       }\n   })\n\n   # C(a=A(a1=1, a2=2), b=B(b1='foo', b2='bar'))\n\n5 - And finally: you can set your own conversion rules in deep dict.\n\n.. code:: python\n\n   Deeply.rules: List[Tuple[Callable[[T], bool], Callable[[T], Any]]] = [\n           (lambda obj: hasattr(obj, 'isoformat'), lambda obj: obj.isoformat()),\n       ]", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/SimfikDuke/deeply/archive/v_1_0_3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SimfikDuke/deeply", "keywords": "web,dataclass,dict,api,easy,json", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "deeply", "package_url": "https://pypi.org/project/deeply/", "platform": "", "project_url": "https://pypi.org/project/deeply/", "project_urls": {"Download": "https://github.com/SimfikDuke/deeply/archive/v_1_0_3.tar.gz", "Homepage": "https://github.com/SimfikDuke/deeply"}, "release_url": "https://pypi.org/project/deeply/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "Deeply allow you to make your dataclasses more functional", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Using this package you can do a deep conversion of your dataclass to a\ndictionary and initialize it from dict.</p>\n<div id=\"getting-it\">\n<h2>Getting it</h2>\n<p>To download deeply, either fork this github repo or simply use PyPI via\npip.</p>\n<pre>$ pip install deeply\n</pre>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>1 - Import</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">deeply</span> <span class=\"kn\">import</span> <span class=\"n\">Deeply</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n</pre>\n<p>2 - Define your data classes with the following inheritance:</p>\n<pre><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">Deeply</span><span class=\"p\">):</span>\n    <span class=\"n\">a1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">a2</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">(</span><span class=\"n\">Deeply</span><span class=\"p\">):</span>\n    <span class=\"n\">b1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">b2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"n\">Deeply</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">A</span>\n    <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">B</span>\n</pre>\n<p>3 - Create an instance of the class and you can already use it:</p>\n<pre><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">B</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">))</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">to_web</span><span class=\"p\">()</span>\n<span class=\"c1\"># {'a': {'a1': 1, 'a2': 2}, 'b': {'b1': 'foo', 'b2': 'bar'}}</span>\n</pre>\n<p>4 - You can also initialize your class from a dictionary:</p>\n<pre><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">init_from_dict</span><span class=\"p\">({</span>\n    <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'a1'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s1\">'a2'</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'b1'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'b2'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># C(a=A(a1=1, a2=2), b=B(b1='foo', b2='bar'))</span>\n</pre>\n<p>5 - And finally: you can set your own conversion rules in deep dict.</p>\n<pre><span class=\"n\">Deeply</span><span class=\"o\">.</span><span class=\"n\">rules</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"s1\">'isoformat'</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">()),</span>\n    <span class=\"p\">]</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7135538, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "17e7cd0f64496f58709b75fbd938e43d", "sha256": "f719a8f1ecfd840895331dbe3b0d78727b74604697b44cb24012e9d2741d33c7"}, "downloads": -1, "filename": "deeply-1.0.tar.gz", "has_sig": false, "md5_digest": "17e7cd0f64496f58709b75fbd938e43d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1585, "upload_time": "2020-04-11T13:23:49", "upload_time_iso_8601": "2020-04-11T13:23:49.301726Z", "url": "https://files.pythonhosted.org/packages/e7/33/700b569456d82e446618d80a87749a0f6c2ba414d602a377c0ece55ad7ae/deeply-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "dc74c787e532157ac870ba94e9871dfd", "sha256": "5e0b194f60381b3fb601261d3ae4e03bef4284c50f10036e7aa59551ff10ed53"}, "downloads": -1, "filename": "deeply-1.0.1.tar.gz", "has_sig": false, "md5_digest": "dc74c787e532157ac870ba94e9871dfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1570, "upload_time": "2020-04-11T13:32:26", "upload_time_iso_8601": "2020-04-11T13:32:26.429027Z", "url": "https://files.pythonhosted.org/packages/63/e6/777920cae36706170b7ab30543992519de614f0cdf13d286369206cff8dd/deeply-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "a8045af3c0522397dbddef5b41c78097", "sha256": "619df960cb2e504890cd88a8cf888c1eebd70f3a4ab992cdcb71ce59d2e0ff6e"}, "downloads": -1, "filename": "deeply-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a8045af3c0522397dbddef5b41c78097", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2412, "upload_time": "2020-04-11T17:29:41", "upload_time_iso_8601": "2020-04-11T17:29:41.303405Z", "url": "https://files.pythonhosted.org/packages/eb/e0/98c3955f97c12276f73b7f005276ac590cc1943034cf4dac4c6ceee54b2c/deeply-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "478941d5506ebfe65444b5a63f448b10", "sha256": "aa77d3fe99db85a9d98f2183fd2d1d081390e6d3341b7a86f73626cc1f7605ec"}, "downloads": -1, "filename": "deeply-1.0.3.tar.gz", "has_sig": false, "md5_digest": "478941d5506ebfe65444b5a63f448b10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2422, "upload_time": "2020-04-30T07:47:25", "upload_time_iso_8601": "2020-04-30T07:47:25.188920Z", "url": "https://files.pythonhosted.org/packages/ef/02/fed8a68a97b7887cf8cd468c29e5c3418799f2fbfff7e66a98fb9d6314d6/deeply-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "478941d5506ebfe65444b5a63f448b10", "sha256": "aa77d3fe99db85a9d98f2183fd2d1d081390e6d3341b7a86f73626cc1f7605ec"}, "downloads": -1, "filename": "deeply-1.0.3.tar.gz", "has_sig": false, "md5_digest": "478941d5506ebfe65444b5a63f448b10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2422, "upload_time": "2020-04-30T07:47:25", "upload_time_iso_8601": "2020-04-30T07:47:25.188920Z", "url": "https://files.pythonhosted.org/packages/ef/02/fed8a68a97b7887cf8cd468c29e5c3418799f2fbfff7e66a98fb9d6314d6/deeply-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:23 2020"}