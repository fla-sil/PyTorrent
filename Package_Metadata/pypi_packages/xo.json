{"info": {"author": "Dwayne Crooks", "author_email": "me@dwaynecrooks.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Games/Entertainment :: Board Games"], "description": "xo\n==\n\n.. image:: https://img.shields.io/pypi/v/xo.svg\n    :target: https://pypi.python.org/pypi/xo\n\nA `Python <https://www.python.org/>`_ CLI game and library for `Tic-tac-toe <http://en.wikipedia.org/wiki/Tic-tac-toe>`_.\n\nThe library is written in a modular way. Its overall design consists of 4 decoupled components:\n\n1. A Tic-tac-toe board data structure, ``xo.board``.\n2. An arbiter for analyzing the state of a board, ``xo.arbiter``.\n3. A game engine to implement and enforce the Tic-tac-toe game logic, ``xo.game``.\n4. And finally, an AI for finding excellent moves, ``xo.ai``.\n\n**The board**\n\n.. code-block:: python\n\n    >>> from xo.board import isempty, Board\n\n    >>> board = Board.fromstring('..x.o')\n    >>> print(board)\n    ..x.o....\n\n    >>> print(board.toascii())\n       |   | x\n    ---+---+---\n       | o |\n    ---+---+---\n       |   |\n\n    >>> board[1, 3]\n    x\n    >>> board[3, 3] = 'x'\n    >>> print(board)\n    ..x.o...x\n\n    >>> for r, c, piece in board:\n    ...   if isempty(piece):\n    ...     print('{}, {}'.format(r, c))\n    ...\n    1, 1\n    1, 2\n    2, 1\n    2, 3\n    3, 1\n    3, 2\n\nThe board isn't concerned with whether or not a given layout can be reached in an actual Tic-tac-toe game. Hence, the following is perfectly legal:\n\n.. code-block:: python\n\n    >>> board = Board.fromstring('xxxxxxxxo')\n    >>> print(board)\n    xxxxxxxxo\n\nThe arbiter is concerned about that though and can detect such invalid board layouts.\n\n**The arbiter**\n\n.. code-block:: python\n\n    >>> from xo import arbiter\n    >>> from xo.board import Board\n\n    >>> arbiter.outcome(Board.fromstring(), 'x')\n    {\n      'piece_counts': {'os': 0, 'xs': 0, 'es': 9},\n      'status': 'in-progress'\n    }\n\n    >>> arbiter.outcome(Board.fromstring('xxxoo'), 'o')\n    {\n      'piece_counts': {'os': 2, 'xs': 3, 'es': 4},\n      'details': [\n        {'index': 1, 'positions': [(1, 1), (1, 2), (1, 3)], 'where': 'row'}\n      ],\n      'status': 'gameover',\n      'reason': 'loser'\n    }\n\n    >>> arbiter.outcome(Board.fromstring('xxxxxxxxo'), 'x')\n    {\n      'piece_counts': {'os': 1, 'xs': 8, 'es': 0},\n      'status': 'invalid',\n      'reason': 'too-many-moves-ahead'\n    }\n\n**The game engine**\n\nEnforcer of the game rules.\n\n.. code-block:: python\n\n    >>> from xo.game import Game\n\n    >>> game = Game()\n    >>> game.start('x')\n    >>> game.moveto(1, 1)\n    {\n      'name': 'next-turn',\n      'last_move': {'token': 'x', 'r': 1, 'c': 1}\n    }\n    >>> game.moveto(1, 1)\n    {\n      'name': 'invalid-move',\n      'reason': 'occupied'\n    }\n    >>> game.moveto(0, 0)\n    {\n      'name': 'invalid-move',\n      'reason': 'out-of-bounds'\n    }\n    >>> game.moveto(2, 2)\n    {\n      'name': 'next-turn',\n      'last_move': {'token': 'o', 'r': 2, 'c': 2}\n    }\n    >>> game.moveto(3, 1)\n    {\n      'name': 'next-turn',\n      'last_move': {'token': 'x', 'r': 3, 'c': 1}\n    }\n    >>> print(game.board.toascii())\n     x |   |\n    ---+---+---\n       | o |\n    ---+---+---\n     x |   |\n\n    >>> game.moveto(3, 3)\n    {\n      'name': 'next-turn',\n      'last_move': {'token': 'o', 'r': 3, 'c': 3}\n    }\n    >>> game.moveto(2, 1)\n    {\n      'name': 'gameover',\n      'reason': 'winner',\n      'last_move': {'token': 'x', 'r': 2, 'c': 1},\n      'details': [{'index': 1, 'positions': [(1, 1), (2, 1), (3, 1)], 'where': 'column'}]\n    }\n\n    >>> game.moveto(1, 3)\n    ...\n    xo.error.IllegalStateError: gameover\n\n    >>> # start a new game\n    >>> game.restart()\n    >>> # since x won, it would be x's turn to play\n    >>> # if the game was squashed then it would have been o's turn to play\n    >>> game.moveto(1, 1)\n    >>> print(game.board.toascii())\n     x |   |\n    ---+---+---\n       |   |\n    ---+---+---\n       |   |\n\n**The AI**\n\nNo Tic-tac-toe library is complete without an AI that can play a perfect game of Tic-tac-toe.\n\n.. code-block:: python\n\n    >>> from xo import ai\n    >>> from xo.board import Board\n\n    >>> ai.evaluate(Board.fromstring('xo.xo.'), 'x')\n    MinimaxResult(score=26, depth=1, positions=[(3, 1)])\n\n    >>> ai.evaluate(Board.fromstring('xo.xo.'), 'o')\n    MinimaxResult(score=26, depth=1, positions=[(3, 2)])\n\n    >>> ai.evaluate(Board.fromstring('x.o'), 'x')\n    MinimaxResult(score=18, depth=5, positions=[(2, 1), (3, 1), (3, 3)])\n\nFinally, ``xo.cli`` brings it all together in its implementation of the command-line Tic-tac-toe game. It's interesting to see how easy it becomes to implement the game so be sure to check it out.\n\n**Note:** *An extensive suite of tests is also available that can help you better understand how each component is supposed to work.*\n\nInstallation\n------------\n\nInstall it using:\n\n.. code-block:: bash\n\n    $ pip install xo\n\nYou would now have access to an executable called ``xo``. Type\n\n.. code-block:: bash\n\n    $ xo\n\nto starting playing immediately.\n\nUsage\n-----\n\nFor help, type\n\n.. code-block:: bash\n\n    $ xo -h\n\nBy default ``xo`` is configured for a human player to play with ``x`` and a computer player to play with ``o``. However, this can be easily changed to allow any of the other 3 possibilities:\n\n.. code-block:: bash\n\n    $ # Computer vs Human\n    $ xo -x computer -o human\n\n    $ # Human vs Human\n    $ xo -x human -o human\n    $ xo -o human # since x defaults to human\n\n    $ # Computer vs Computer\n    $ xo -x computer -o computer\n    $ xo -x computer # since o defaults to computer\n\nYou can also change who plays first. By default it's the ``x`` player.\n\n.. code-block:: bash\n\n    $ # Let o play first\n    $ xo -f o\n\nFinally, when letting the computers battle it out you can specify the number of times you want them to play each other. By default they play 50 rounds.\n\n.. code-block:: bash\n\n    $ xo -x computer -r 5\n    .....\n\n    Game statistics\n    ---------------\n    Total games played: 5 (2.438 secs)\n    Number of times x won: 0\n    Number of times o won: 0\n    Number of squashed games: 5\n\nDevelopment\n-----------\n\nGet the source code.\n\n.. code-block:: bash\n\n    $ git clone git@github.com:dwayne/xo-python.git\n\nCreate a `virtual environment <https://docs.python.org/3/library/venv.html>`_ and activate it.\n\n.. code-block:: bash\n\n    $ cd xo-python\n    $ pyvenv venv\n    $ . venv/bin/activate\n\nThen, upgrade ``pip`` and ``setuptools`` and install the development dependencies.\n\n.. code-block:: bash\n\n    (venv) $ pip install -U pip setuptools\n    (venv) $ pip install -r requirements-dev.txt\n\nYou're now all set to begin development.\n\nTesting\n-------\n\nTests are written using the `unittest <https://docs.python.org/3/library/unittest.html>`_ unit testing framework.\n\nRun all tests.\n\n.. code-block:: bash\n\n    (venv) $ python -m unittest\n\nRun a specific test module.\n\n.. code-block:: bash\n\n    (venv) $ python -m unittest tests.test_arbiter\n\nRun a specific test case.\n\n.. code-block:: bash\n\n    (venv) $ python -m unittest tests.test_arbiter.GameoverPositionsTestCase\n\nRun a specific test method.\n\n.. code-block:: bash\n\n    (venv) $ python -m unittest tests.test_arbiter.GameoverPositionsTestCase.test_when_x_wins\n\nCredits\n-------\n\nThanks to `Patrick Henry Winston <http://people.csail.mit.edu/phw/>`_ for clarifying the Minimax algorithm. His `video <https://www.youtube.com/watch?v=STjW3eH0Cik>`_ on the topic was a joy to watch.\n\nCopyright\n---------\n\nCopyright (c) 2016 Dwayne Crooks. See `LICENSE </LICENSE.txt>`_ for further details.\n\n\nChange Log\n----------\n\n`1.0.0`_ (2016-09-09)\n+++++++++++++++++++++\n\n**Added**\n\n- A board data structure\n- An arbiter\n- A game engine\n- An AI based on the Minimax algorithm\n- A CLI\n\n0.0.1 (2016-09-05)\n++++++++++++++++++\n\nBirth!\n\n.. _`Unreleased`: https://github.com/dwayne/xo-python/compare/v1.0.0...HEAD\n.. _`1.0.0`: https://github.com/dwayne/xo-python/compare/v0.0.1...v1.0.0\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dwayne/xo-python", "keywords": "tic-tac-toe tic tac toe noughts crosses", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "xo", "package_url": "https://pypi.org/project/xo/", "platform": "", "project_url": "https://pypi.org/project/xo/", "project_urls": {"Homepage": "https://github.com/dwayne/xo-python"}, "release_url": "https://pypi.org/project/xo/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "A Tic-tac-toe CLI game and library.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/xo\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/xo.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5c33714cb3d7137905d625c3f59dd875aa74fc9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f786f2e737667\"></a>\n<p>A <a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> CLI game and library for <a href=\"http://en.wikipedia.org/wiki/Tic-tac-toe\" rel=\"nofollow\">Tic-tac-toe</a>.</p>\n<p>The library is written in a modular way. Its overall design consists of 4 decoupled components:</p>\n<ol>\n<li>A Tic-tac-toe board data structure, <tt>xo.board</tt>.</li>\n<li>An arbiter for analyzing the state of a board, <tt>xo.arbiter</tt>.</li>\n<li>A game engine to implement and enforce the Tic-tac-toe game logic, <tt>xo.game</tt>.</li>\n<li>And finally, an AI for finding excellent moves, <tt>xo.ai</tt>.</li>\n</ol>\n<p><strong>The board</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">xo.board</span> <span class=\"kn\">import</span> <span class=\"n\">isempty</span><span class=\"p\">,</span> <span class=\"n\">Board</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">Board</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"s1\">'..x.o'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span>\n<span class=\"o\">..</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">o</span><span class=\"o\">....</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">toascii</span><span class=\"p\">())</span>\n   <span class=\"o\">|</span>   <span class=\"o\">|</span> <span class=\"n\">x</span>\n<span class=\"o\">---+---+---</span>\n   <span class=\"o\">|</span> <span class=\"n\">o</span> <span class=\"o\">|</span>\n<span class=\"o\">---+---+---</span>\n   <span class=\"o\">|</span>   <span class=\"o\">|</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">x</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'x'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span>\n<span class=\"o\">..</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">o</span><span class=\"o\">...</span><span class=\"n\">x</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">piece</span> <span class=\"ow\">in</span> <span class=\"n\">board</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>   <span class=\"k\">if</span> <span class=\"n\">isempty</span><span class=\"p\">(</span><span class=\"n\">piece</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span>\n<span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n<span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n<span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n<span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span>\n</pre>\n<p>The board isn\u2019t concerned with whether or not a given layout can be reached in an actual Tic-tac-toe game. Hence, the following is perfectly legal:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">Board</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"s1\">'xxxxxxxxo'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">)</span>\n<span class=\"n\">xxxxxxxxo</span>\n</pre>\n<p>The arbiter is concerned about that though and can detect such invalid board layouts.</p>\n<p><strong>The arbiter</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">xo</span> <span class=\"kn\">import</span> <span class=\"n\">arbiter</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">xo.board</span> <span class=\"kn\">import</span> <span class=\"n\">Board</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">arbiter</span><span class=\"o\">.</span><span class=\"n\">outcome</span><span class=\"p\">(</span><span class=\"n\">Board</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(),</span> <span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'piece_counts'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'os'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'xs'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'es'</span><span class=\"p\">:</span> <span class=\"mi\">9</span><span class=\"p\">},</span>\n  <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'in-progress'</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">arbiter</span><span class=\"o\">.</span><span class=\"n\">outcome</span><span class=\"p\">(</span><span class=\"n\">Board</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"s1\">'xxxoo'</span><span class=\"p\">),</span> <span class=\"s1\">'o'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'piece_counts'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'os'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'xs'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'es'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n  <span class=\"s1\">'details'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'index'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'positions'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)],</span> <span class=\"s1\">'where'</span><span class=\"p\">:</span> <span class=\"s1\">'row'</span><span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'gameover'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'reason'</span><span class=\"p\">:</span> <span class=\"s1\">'loser'</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">arbiter</span><span class=\"o\">.</span><span class=\"n\">outcome</span><span class=\"p\">(</span><span class=\"n\">Board</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"s1\">'xxxxxxxxo'</span><span class=\"p\">),</span> <span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'piece_counts'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'os'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'xs'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">'es'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span>\n  <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'invalid'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'reason'</span><span class=\"p\">:</span> <span class=\"s1\">'too-many-moves-ahead'</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>The game engine</strong></p>\n<p>Enforcer of the game rules.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">xo.game</span> <span class=\"kn\">import</span> <span class=\"n\">Game</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span> <span class=\"o\">=</span> <span class=\"n\">Game</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">moveto</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'next-turn'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'last_move'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'token'</span><span class=\"p\">:</span> <span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">moveto</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'invalid-move'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'reason'</span><span class=\"p\">:</span> <span class=\"s1\">'occupied'</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">moveto</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'invalid-move'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'reason'</span><span class=\"p\">:</span> <span class=\"s1\">'out-of-bounds'</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">moveto</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'next-turn'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'last_move'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'token'</span><span class=\"p\">:</span> <span class=\"s1\">'o'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">moveto</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'next-turn'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'last_move'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'token'</span><span class=\"p\">:</span> <span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">toascii</span><span class=\"p\">())</span>\n <span class=\"n\">x</span> <span class=\"o\">|</span>   <span class=\"o\">|</span>\n<span class=\"o\">---+---+---</span>\n   <span class=\"o\">|</span> <span class=\"n\">o</span> <span class=\"o\">|</span>\n<span class=\"o\">---+---+---</span>\n <span class=\"n\">x</span> <span class=\"o\">|</span>   <span class=\"o\">|</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">moveto</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'next-turn'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'last_move'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'token'</span><span class=\"p\">:</span> <span class=\"s1\">'o'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">moveto</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'gameover'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'reason'</span><span class=\"p\">:</span> <span class=\"s1\">'winner'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'last_move'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'token'</span><span class=\"p\">:</span> <span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n  <span class=\"s1\">'details'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'index'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'positions'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)],</span> <span class=\"s1\">'where'</span><span class=\"p\">:</span> <span class=\"s1\">'column'</span><span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">moveto</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">xo</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">IllegalStateError</span><span class=\"p\">:</span> <span class=\"n\">gameover</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># start a new game</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">restart</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># since x won, it would be x's turn to play</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># if the game was squashed then it would have been o's turn to play</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">moveto</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">toascii</span><span class=\"p\">())</span>\n <span class=\"n\">x</span> <span class=\"o\">|</span>   <span class=\"o\">|</span>\n<span class=\"o\">---+---+---</span>\n   <span class=\"o\">|</span>   <span class=\"o\">|</span>\n<span class=\"o\">---+---+---</span>\n   <span class=\"o\">|</span>   <span class=\"o\">|</span>\n</pre>\n<p><strong>The AI</strong></p>\n<p>No Tic-tac-toe library is complete without an AI that can play a perfect game of Tic-tac-toe.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">xo</span> <span class=\"kn\">import</span> <span class=\"n\">ai</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">xo.board</span> <span class=\"kn\">import</span> <span class=\"n\">Board</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ai</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">Board</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"s1\">'xo.xo.'</span><span class=\"p\">),</span> <span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">MinimaxResult</span><span class=\"p\">(</span><span class=\"n\">score</span><span class=\"o\">=</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">positions</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ai</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">Board</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"s1\">'xo.xo.'</span><span class=\"p\">),</span> <span class=\"s1\">'o'</span><span class=\"p\">)</span>\n<span class=\"n\">MinimaxResult</span><span class=\"p\">(</span><span class=\"n\">score</span><span class=\"o\">=</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">positions</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ai</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">Board</span><span class=\"o\">.</span><span class=\"n\">fromstring</span><span class=\"p\">(</span><span class=\"s1\">'x.o'</span><span class=\"p\">),</span> <span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">MinimaxResult</span><span class=\"p\">(</span><span class=\"n\">score</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">positions</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)])</span>\n</pre>\n<p>Finally, <tt>xo.cli</tt> brings it all together in its implementation of the command-line Tic-tac-toe game. It\u2019s interesting to see how easy it becomes to implement the game so be sure to check it out.</p>\n<p><strong>Note:</strong> <em>An extensive suite of tests is also available that can help you better understand how each component is supposed to work.</em></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install it using:</p>\n<pre>$ pip install xo\n</pre>\n<p>You would now have access to an executable called <tt>xo</tt>. Type</p>\n<pre>$ xo\n</pre>\n<p>to starting playing immediately.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>For help, type</p>\n<pre>$ xo -h\n</pre>\n<p>By default <tt>xo</tt> is configured for a human player to play with <tt>x</tt> and a computer player to play with <tt>o</tt>. However, this can be easily changed to allow any of the other 3 possibilities:</p>\n<pre>$ <span class=\"c1\"># Computer vs Human\n</span>$ xo -x computer -o human\n\n$ <span class=\"c1\"># Human vs Human\n</span>$ xo -x human -o human\n$ xo -o human <span class=\"c1\"># since x defaults to human\n</span>\n$ <span class=\"c1\"># Computer vs Computer\n</span>$ xo -x computer -o computer\n$ xo -x computer <span class=\"c1\"># since o defaults to computer</span>\n</pre>\n<p>You can also change who plays first. By default it\u2019s the <tt>x</tt> player.</p>\n<pre>$ <span class=\"c1\"># Let o play first\n</span>$ xo -f o\n</pre>\n<p>Finally, when letting the computers battle it out you can specify the number of times you want them to play each other. By default they play 50 rounds.</p>\n<pre>$ xo -x computer -r <span class=\"m\">5</span>\n.....\n\nGame statistics\n---------------\nTotal games played: <span class=\"m\">5</span> <span class=\"o\">(</span><span class=\"m\">2</span>.438 secs<span class=\"o\">)</span>\nNumber of <span class=\"nb\">times</span> x won: <span class=\"m\">0</span>\nNumber of <span class=\"nb\">times</span> o won: <span class=\"m\">0</span>\nNumber of squashed games: <span class=\"m\">5</span>\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Get the source code.</p>\n<pre>$ git clone git@github.com:dwayne/xo-python.git\n</pre>\n<p>Create a <a href=\"https://docs.python.org/3/library/venv.html\" rel=\"nofollow\">virtual environment</a> and activate it.</p>\n<pre>$ <span class=\"nb\">cd</span> xo-python\n$ pyvenv venv\n$ . venv/bin/activate\n</pre>\n<p>Then, upgrade <tt>pip</tt> and <tt>setuptools</tt> and install the development dependencies.</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ pip install -U pip setuptools\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ pip install -r requirements-dev.txt\n</pre>\n<p>You\u2019re now all set to begin development.</p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Tests are written using the <a href=\"https://docs.python.org/3/library/unittest.html\" rel=\"nofollow\">unittest</a> unit testing framework.</p>\n<p>Run all tests.</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python -m unittest\n</pre>\n<p>Run a specific test module.</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python -m unittest tests.test_arbiter\n</pre>\n<p>Run a specific test case.</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python -m unittest tests.test_arbiter.GameoverPositionsTestCase\n</pre>\n<p>Run a specific test method.</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python -m unittest tests.test_arbiter.GameoverPositionsTestCase.test_when_x_wins\n</pre>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Thanks to <a href=\"http://people.csail.mit.edu/phw/\" rel=\"nofollow\">Patrick Henry Winston</a> for clarifying the Minimax algorithm. His <a href=\"https://www.youtube.com/watch?v=STjW3eH0Cik\" rel=\"nofollow\">video</a> on the topic was a joy to watch.</p>\n</div>\n<div id=\"copyright\">\n<h2>Copyright</h2>\n<p>Copyright (c) 2016 Dwayne Crooks. See <a href=\"/LICENSE.txt\" rel=\"nofollow\">LICENSE</a> for further details.</p>\n</div>\n<div id=\"change-log\">\n<h2>Change Log</h2>\n<div id=\"id1\">\n<h3><a href=\"https://github.com/dwayne/xo-python/compare/v0.0.1...v1.0.0\" rel=\"nofollow\">1.0.0</a> (2016-09-09)</h3>\n<p><strong>Added</strong></p>\n<ul>\n<li>A board data structure</li>\n<li>An arbiter</li>\n<li>A game engine</li>\n<li>An AI based on the Minimax algorithm</li>\n<li>A CLI</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.0.1 (2016-09-05)</h3>\n<p>Birth!</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2333659, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "935322658782cba6fde5e83dda70634f", "sha256": "88422197c5011f8c84b4af55b4c80792440790cae0e114aff8be151540b6c25d"}, "downloads": -1, "filename": "xo-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "935322658782cba6fde5e83dda70634f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3339, "upload_time": "2016-09-05T07:53:14", "upload_time_iso_8601": "2016-09-05T07:53:14.202945Z", "url": "https://files.pythonhosted.org/packages/3c/51/886c72a83aacdccb79edc8381745fc78b7bdf30613ae0979f396ac33e64d/xo-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2cc016181240da08b0cc9982afb4f49", "sha256": "138a2c3d2d2500119e6351e56c77df3f78a46e0bbe0d2b93fcf284ada6564fa7"}, "downloads": -1, "filename": "xo-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e2cc016181240da08b0cc9982afb4f49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2464, "upload_time": "2016-09-05T07:53:16", "upload_time_iso_8601": "2016-09-05T07:53:16.107265Z", "url": "https://files.pythonhosted.org/packages/17/7f/cf7b5464afc07912109b64ada8c38d024b720749bb5583a6c794804c0513/xo-0.0.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "3dee64abe184a68c6924fef40ea1ceea", "sha256": "2442c5be4cfed225fdc07de42c769fc7c417d6d57b0ef0854915079ca9f36da7"}, "downloads": -1, "filename": "xo-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3dee64abe184a68c6924fef40ea1ceea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15065, "upload_time": "2016-09-09T14:30:58", "upload_time_iso_8601": "2016-09-09T14:30:58.175126Z", "url": "https://files.pythonhosted.org/packages/1b/34/69ad2017011bcbd45d6d9c98c1b3776c61f10181385702364bf720dcd417/xo-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb2bfe5c2d7df21094355050fe3429f3", "sha256": "7ea2c70890fb6994e6f751e5400f74a453adc48f075b3a9a0256fccf556750d1"}, "downloads": -1, "filename": "xo-1.0.0.tar.gz", "has_sig": false, "md5_digest": "cb2bfe5c2d7df21094355050fe3429f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13578, "upload_time": "2016-09-09T14:31:00", "upload_time_iso_8601": "2016-09-09T14:31:00.513528Z", "url": "https://files.pythonhosted.org/packages/ab/40/970c7abf0d5f990d4501c9508eeb9f524e9de1a201dbe760c1cb6c8a1a6e/xo-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3dee64abe184a68c6924fef40ea1ceea", "sha256": "2442c5be4cfed225fdc07de42c769fc7c417d6d57b0ef0854915079ca9f36da7"}, "downloads": -1, "filename": "xo-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3dee64abe184a68c6924fef40ea1ceea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15065, "upload_time": "2016-09-09T14:30:58", "upload_time_iso_8601": "2016-09-09T14:30:58.175126Z", "url": "https://files.pythonhosted.org/packages/1b/34/69ad2017011bcbd45d6d9c98c1b3776c61f10181385702364bf720dcd417/xo-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb2bfe5c2d7df21094355050fe3429f3", "sha256": "7ea2c70890fb6994e6f751e5400f74a453adc48f075b3a9a0256fccf556750d1"}, "downloads": -1, "filename": "xo-1.0.0.tar.gz", "has_sig": false, "md5_digest": "cb2bfe5c2d7df21094355050fe3429f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13578, "upload_time": "2016-09-09T14:31:00", "upload_time_iso_8601": "2016-09-09T14:31:00.513528Z", "url": "https://files.pythonhosted.org/packages/ab/40/970c7abf0d5f990d4501c9508eeb9f524e9de1a201dbe760c1cb6c8a1a6e/xo-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:24:47 2020"}