{"info": {"author": "Vit Novacek, DERI, NUIG", "author_email": "vit.novacek@deri.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Healthcare Industry", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Text Processing :: Indexing", "Topic :: Text Processing :: Linguistic"], "description": "==============================\r\n         SKIMMR_BM - a Brief Overview\r\n        ==============================\r\n        \r\n        -----------------------------------------------------\r\n         Contact vit.novacek@deri.org for more detailed info\r\n        -----------------------------------------------------\r\n        \r\n        0. ABSTRACT AND TABLE OF CONTENTS\r\n        =================================\r\n        \r\n        This document provides basic information about SKIMMR (a tool for \r\n        machine-aided skim reading), in particular about its SKIMMR_BM package version\r\n        that focuses on biomedical texts. \r\n        \r\n        The document contains three sections:\r\n        \r\n        1. ABOUT - overview of the tool and its functionalities\r\n        \r\n        2. INSTALLATION - basic instructions on how to install SKIMMR\r\n        \r\n        3. USING SKIMMR - basic instruction on how to use it after installation\r\n        \r\n        1. ABOUT\r\n        ========\r\n        \r\n        SKIMMR is a research prototype aimed at helping users to navigate through \r\n        large amounts of textual data efficiently. This is done by extending the \r\n        traditional paradigm of searching and browsing of text collections. SKIMMR \r\n        lets the user skim texts by navigating a network of concepts and relations \r\n        explicitly or implicitly present in them. The concepts and their relations \r\n        have been extracted and inferred from the textual content using novel machine \r\n        reading techniques that power the SKIMMR back-end.\r\n        \r\n        The interconnected `skimming networks' provide a high-level overview of the \r\n        domain covered by the texts, and let the user quickly discover interesting \r\n        pieces of information. This process also largely reduces the burden of \r\n        sieving through lots of irrelevant resources, which is often the down side \r\n        of using the standard search engines. When the users identify interesting \r\n        information within the high level overview, they can continue reading the \r\n        related textual resources in detail. \r\n        \r\n        This particular version of SKIMMR (SKIMMR_BM) focuses on biomedical articles \r\n        available on PubMed. The knowledge base exposed by the SKIMMR interface is \r\n        extracted from the PubMed abstracts (see the SKIMMR back-end documentation for \r\n        details). Once the users finish skimming, i.e., navigating the network of \r\n        concepts and relations extracted from the PubMed articles, they can easily \r\n        browse and read the related publications. This is done using an embedded \r\n        window with PubMed results focused on the articles most relevant to the \r\n        concepts discovered when skimming the data. Specific examples that illustrate \r\n        the way SKIMMR works are provided in the following section. \r\n        \r\n        2. INSTALLATION\r\n        ===============\r\n        \r\n        Probably the easiest way of installing SKIMMR_BM is using easy_install:\r\n        \r\n        \t*easy_install skimmr_bm*\r\n        \r\n        Check the documentation at http://peak.telecommunity.com/DevCenter/EasyInstall\r\n        for more detailed info on easy_install and setuptools.\r\n        \r\n        Should you prefer to download and install the package manually, fetch the\r\n        SKIMMR_BM distribution archive file first. After unpacking it, switch to the \r\n        generated directory and execute the following command:\r\n        \r\n        \t*python setup.py install*\r\n        \r\n        If you want to install the package locally (for the current user only), use \r\n        the following:\r\n        \r\n        \t*python setup.py install --user*\r\n        \r\n        Check the documentation at http://docs.python.org/2/distutils/index.html for \r\n        more detailed options.\r\n        \r\n        3. USING SKIMMR\r\n        ===============\r\n        \r\n        After downloading and installing the SKIMMR package, it can be readily used\r\n        in a basic manner through the scripts provided. These are:\r\n        \r\n        - dwnl_bm.py - download of the PubMed abstracts to be processed\r\n        \r\n        - exst_bm.py - extraction of co-occurrence statements from texts\r\n        \r\n        - crkb_bm.py - creation of a knowledge base and its population by semantic \r\n                       similarity relations\r\n        \r\n        - ixkb_bm.py - indexing of the knowledge base for efficient querying\r\n        \r\n        - prep_bm.py - preparation of the sub-folder structure and resources in the \r\n                       working directory necessary in order to launch the SKIMMR server\r\n        \r\n        - srvr_bm.py - launching the SKIMMR server and UI\r\n        \r\n        The scripts are located in the *bin* subdirectory of the installation package.\r\n        Alternatively, you can copy them from wherever your system puts Python package\r\n        binaries (check the documentation of your operating system and your local \r\n        Python implementation).\r\n        \r\n        The typical way of using these scripts is summarised in the following sections.\r\n        Note that there are other ways how to launch the scripts - you can check the \r\n        documentation in the script source code for details.\r\n        \r\n        3.1 Creating the working directory\r\n        ----------------------------------\r\n        \r\n        First of all, SKIMMR requires a place to store and process its data. Create a\r\n        directory for that somewhere (let us assume it is called *skimmr* in the \r\n        following). Switch to that directory then and copy all the SKIMMR_BM scripts \r\n        there. After that, run\r\n        \r\n        \t*python prep_bm.py*\r\n        \r\n        in there. This will generate three sub-directories, *data*, *lingpipe* and \r\n        *text*, as well as a couple of files and directories deeper in the *data* one. \r\n        By default, the LingPipe text mining software is downloaded by this script,\r\n        as it is a preferred method for the biomedical knowledge extraction later\r\n        on. You can skip this, however, you need to copy the LingPipe software into\r\n        the *lingpipe* directory yourselves then, or use a general knowledge extraction\r\n        pipe-line built into the SKIMMR system (see the detailed options documented\r\n        in the script sources). \r\n        \r\n        3.2 Downloading abstracts from PubMed\r\n        -------------------------------------\r\n        \r\n        SKIMMR_BM is specifically meant to process textual content available via the\r\n        PubMed repository. After placing one or more files with the *.pmid* extension\r\n        into the *text* folder in the *skimmr* directory, the tool can automatically \r\n        download all the abstracts corresponding to the PubMed identifiers provided\r\n        in the *.pmid* files (divided by any sequence of white space characters or\r\n        commas). This is done by running the following\r\n        \r\n        \t*python dwnl_bm.py E-MAIL*\r\n        \r\n        where E-MAIL is your e-mail (used for the purposes of the Entrez API used by \r\n        SKIMMR to fetch the article data from PubMed).\r\n        \r\n        3.3 Processing the texts\r\n        ------------------------\r\n        \r\n        If you have not downloaded PubMed abstracts based on their IDs in the previous\r\n        step, copy the locally stored abstracts files you want to process to the \r\n        *text* folder in the *skimmr* directory. Plain text files (in ASCII or Unicode \r\n        format) are supported, with the *.txt* extensions. Note that the filenames \r\n        should be the PubMed IDs of the corresponding articles (plus the *.txt* \r\n        extension), otherwise the source article look-up in SKIMMR later on will not\r\n        produce any meaningful results.\r\n        \r\n        After you have all the texts in place, run\r\n        \r\n        \t*python exst_bm.py*\r\n        \r\n        in the *skimmr* directory. This will chop up the texts into paragraphs and\r\n        extract the co-occurrence statements from them. There is a limit imposed\r\n        on the number of produced statements in the exst.py script, dynamically\r\n        computed from the available memory (or set to 750,000 if the psutil package\r\n        is not available on your system). You can change that when using the SKIMMR\r\n        library functions directly. \r\n        \r\n        3.4 Creating the knowledge base\r\n        -------------------------------\r\n        \r\n        After generating the co-occurrence statements in the previous step, you can\r\n        create the knowledge base from them using \r\n        \r\n        \t*python crkb_bm.py create*\r\n        \r\n        which will generate a couple of knowledge base persistence files in the *stre*\r\n        sub-folder of the *data* directory in the *skimmr* root folder.\r\n        \r\n        3.5 Computing similarities\r\n        --------------------------\r\n        \r\n        When the knowledge base has been generated, you can augment it by computing\r\n        semantic similarity relationships between the terms that are more frequent \r\n        than average:\r\n        \r\n        \t*python crkb_bm.py compsim*\r\n        \r\n        This will update the knowledge base persistence files accordingly. Note that \r\n        this step may take up to several hours for larger knowledge bases!\r\n        \r\n        3.6 Indexing the knowledge base\r\n        -------------------------------\r\n        \r\n        Before you can expose the processed content via a SKIMMR web interface, you\r\n        have to index the knowledge base. This is done by running\r\n        \r\n        \t*python ixkb_bm.py*\r\n        \r\n        which will generate a couple of index files in the knowledge base persistence\r\n        sub-directory.\r\n        \r\n        3.7 Launching and using the server\r\n        ----------------------------------\r\n        \r\n        At last, you can launch the SKIMMR server by\r\n        \r\n        \t*python srvr_bm.py*\r\n        \r\n        This will start the server at localhost (127.0.0.1) and port 8008. You can \r\n        specify alternative addresses and ports by running the server as\r\n        \r\n        \t*python srvr_bm.py ADDRESS:PORT*\r\n        \r\n        Also, you can specify an alternative store to be loaded by the server (useful\r\n        if you want to examine multiple stores you have previously generated):\r\n        \r\n        \t*python srvr_bm.py [ADDRESS:PORT] [FOLDER]*\r\n        \r\n        where FOLDER is a path to the store you want to load.\r\n        \r\n        After the SKIMMR server has been started, you can point you browser to the \r\n        corresponding address and port and start using the tool as indicated in the\r\n        *About* web-page accessible from the SKIMMR interface (just follow the link \r\n        in the bottom of every page in the SKIMMR web interface).", "description_content_type": null, "docs_url": null, "download_url": "https://dl.dropbox.com/u/21379226/software/skimmr_bm-0.1-a2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.skimmr.org", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "skimmr_bm", "package_url": "https://pypi.org/project/skimmr_bm/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/skimmr_bm/", "project_urls": {"Download": "https://dl.dropbox.com/u/21379226/software/skimmr_bm-0.1-a2.tar.gz", "Homepage": "http://www.skimmr.org"}, "release_url": "https://pypi.org/project/skimmr_bm/0.1-a2/", "requires_dist": null, "requires_python": null, "summary": "SKIMMR library and scipts for machine-aided skim-reading (the specific package version for biomedical texts)", "version": "0.1-a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            ==============================\n<br>         SKIMMR_BM - a Brief Overview\n<br>        ==============================\n<br>        \n<br>        -----------------------------------------------------\n<br>         Contact vit.novacek@deri.org for more detailed info\n<br>        -----------------------------------------------------\n<br>        \n<br>        0. ABSTRACT AND TABLE OF CONTENTS\n<br>        =================================\n<br>        \n<br>        This document provides basic information about SKIMMR (a tool for \n<br>        machine-aided skim reading), in particular about its SKIMMR_BM package version\n<br>        that focuses on biomedical texts. \n<br>        \n<br>        The document contains three sections:\n<br>        \n<br>        1. ABOUT - overview of the tool and its functionalities\n<br>        \n<br>        2. INSTALLATION - basic instructions on how to install SKIMMR\n<br>        \n<br>        3. USING SKIMMR - basic instruction on how to use it after installation\n<br>        \n<br>        1. ABOUT\n<br>        ========\n<br>        \n<br>        SKIMMR is a research prototype aimed at helping users to navigate through \n<br>        large amounts of textual data efficiently. This is done by extending the \n<br>        traditional paradigm of searching and browsing of text collections. SKIMMR \n<br>        lets the user skim texts by navigating a network of concepts and relations \n<br>        explicitly or implicitly present in them. The concepts and their relations \n<br>        have been extracted and inferred from the textual content using novel machine \n<br>        reading techniques that power the SKIMMR back-end.\n<br>        \n<br>        The interconnected `skimming networks' provide a high-level overview of the \n<br>        domain covered by the texts, and let the user quickly discover interesting \n<br>        pieces of information. This process also largely reduces the burden of \n<br>        sieving through lots of irrelevant resources, which is often the down side \n<br>        of using the standard search engines. When the users identify interesting \n<br>        information within the high level overview, they can continue reading the \n<br>        related textual resources in detail. \n<br>        \n<br>        This particular version of SKIMMR (SKIMMR_BM) focuses on biomedical articles \n<br>        available on PubMed. The knowledge base exposed by the SKIMMR interface is \n<br>        extracted from the PubMed abstracts (see the SKIMMR back-end documentation for \n<br>        details). Once the users finish skimming, i.e., navigating the network of \n<br>        concepts and relations extracted from the PubMed articles, they can easily \n<br>        browse and read the related publications. This is done using an embedded \n<br>        window with PubMed results focused on the articles most relevant to the \n<br>        concepts discovered when skimming the data. Specific examples that illustrate \n<br>        the way SKIMMR works are provided in the following section. \n<br>        \n<br>        2. INSTALLATION\n<br>        ===============\n<br>        \n<br>        Probably the easiest way of installing SKIMMR_BM is using easy_install:\n<br>        \n<br>        \t*easy_install skimmr_bm*\n<br>        \n<br>        Check the documentation at http://peak.telecommunity.com/DevCenter/EasyInstall\n<br>        for more detailed info on easy_install and setuptools.\n<br>        \n<br>        Should you prefer to download and install the package manually, fetch the\n<br>        SKIMMR_BM distribution archive file first. After unpacking it, switch to the \n<br>        generated directory and execute the following command:\n<br>        \n<br>        \t*python setup.py install*\n<br>        \n<br>        If you want to install the package locally (for the current user only), use \n<br>        the following:\n<br>        \n<br>        \t*python setup.py install --user*\n<br>        \n<br>        Check the documentation at http://docs.python.org/2/distutils/index.html for \n<br>        more detailed options.\n<br>        \n<br>        3. USING SKIMMR\n<br>        ===============\n<br>        \n<br>        After downloading and installing the SKIMMR package, it can be readily used\n<br>        in a basic manner through the scripts provided. These are:\n<br>        \n<br>        - dwnl_bm.py - download of the PubMed abstracts to be processed\n<br>        \n<br>        - exst_bm.py - extraction of co-occurrence statements from texts\n<br>        \n<br>        - crkb_bm.py - creation of a knowledge base and its population by semantic \n<br>                       similarity relations\n<br>        \n<br>        - ixkb_bm.py - indexing of the knowledge base for efficient querying\n<br>        \n<br>        - prep_bm.py - preparation of the sub-folder structure and resources in the \n<br>                       working directory necessary in order to launch the SKIMMR server\n<br>        \n<br>        - srvr_bm.py - launching the SKIMMR server and UI\n<br>        \n<br>        The scripts are located in the *bin* subdirectory of the installation package.\n<br>        Alternatively, you can copy them from wherever your system puts Python package\n<br>        binaries (check the documentation of your operating system and your local \n<br>        Python implementation).\n<br>        \n<br>        The typical way of using these scripts is summarised in the following sections.\n<br>        Note that there are other ways how to launch the scripts - you can check the \n<br>        documentation in the script source code for details.\n<br>        \n<br>        3.1 Creating the working directory\n<br>        ----------------------------------\n<br>        \n<br>        First of all, SKIMMR requires a place to store and process its data. Create a\n<br>        directory for that somewhere (let us assume it is called *skimmr* in the \n<br>        following). Switch to that directory then and copy all the SKIMMR_BM scripts \n<br>        there. After that, run\n<br>        \n<br>        \t*python prep_bm.py*\n<br>        \n<br>        in there. This will generate three sub-directories, *data*, *lingpipe* and \n<br>        *text*, as well as a couple of files and directories deeper in the *data* one. \n<br>        By default, the LingPipe text mining software is downloaded by this script,\n<br>        as it is a preferred method for the biomedical knowledge extraction later\n<br>        on. You can skip this, however, you need to copy the LingPipe software into\n<br>        the *lingpipe* directory yourselves then, or use a general knowledge extraction\n<br>        pipe-line built into the SKIMMR system (see the detailed options documented\n<br>        in the script sources). \n<br>        \n<br>        3.2 Downloading abstracts from PubMed\n<br>        -------------------------------------\n<br>        \n<br>        SKIMMR_BM is specifically meant to process textual content available via the\n<br>        PubMed repository. After placing one or more files with the *.pmid* extension\n<br>        into the *text* folder in the *skimmr* directory, the tool can automatically \n<br>        download all the abstracts corresponding to the PubMed identifiers provided\n<br>        in the *.pmid* files (divided by any sequence of white space characters or\n<br>        commas). This is done by running the following\n<br>        \n<br>        \t*python dwnl_bm.py E-MAIL*\n<br>        \n<br>        where E-MAIL is your e-mail (used for the purposes of the Entrez API used by \n<br>        SKIMMR to fetch the article data from PubMed).\n<br>        \n<br>        3.3 Processing the texts\n<br>        ------------------------\n<br>        \n<br>        If you have not downloaded PubMed abstracts based on their IDs in the previous\n<br>        step, copy the locally stored abstracts files you want to process to the \n<br>        *text* folder in the *skimmr* directory. Plain text files (in ASCII or Unicode \n<br>        format) are supported, with the *.txt* extensions. Note that the filenames \n<br>        should be the PubMed IDs of the corresponding articles (plus the *.txt* \n<br>        extension), otherwise the source article look-up in SKIMMR later on will not\n<br>        produce any meaningful results.\n<br>        \n<br>        After you have all the texts in place, run\n<br>        \n<br>        \t*python exst_bm.py*\n<br>        \n<br>        in the *skimmr* directory. This will chop up the texts into paragraphs and\n<br>        extract the co-occurrence statements from them. There is a limit imposed\n<br>        on the number of produced statements in the exst.py script, dynamically\n<br>        computed from the available memory (or set to 750,000 if the psutil package\n<br>        is not available on your system). You can change that when using the SKIMMR\n<br>        library functions directly. \n<br>        \n<br>        3.4 Creating the knowledge base\n<br>        -------------------------------\n<br>        \n<br>        After generating the co-occurrence statements in the previous step, you can\n<br>        create the knowledge base from them using \n<br>        \n<br>        \t*python crkb_bm.py create*\n<br>        \n<br>        which will generate a couple of knowledge base persistence files in the *stre*\n<br>        sub-folder of the *data* directory in the *skimmr* root folder.\n<br>        \n<br>        3.5 Computing similarities\n<br>        --------------------------\n<br>        \n<br>        When the knowledge base has been generated, you can augment it by computing\n<br>        semantic similarity relationships between the terms that are more frequent \n<br>        than average:\n<br>        \n<br>        \t*python crkb_bm.py compsim*\n<br>        \n<br>        This will update the knowledge base persistence files accordingly. Note that \n<br>        this step may take up to several hours for larger knowledge bases!\n<br>        \n<br>        3.6 Indexing the knowledge base\n<br>        -------------------------------\n<br>        \n<br>        Before you can expose the processed content via a SKIMMR web interface, you\n<br>        have to index the knowledge base. This is done by running\n<br>        \n<br>        \t*python ixkb_bm.py*\n<br>        \n<br>        which will generate a couple of index files in the knowledge base persistence\n<br>        sub-directory.\n<br>        \n<br>        3.7 Launching and using the server\n<br>        ----------------------------------\n<br>        \n<br>        At last, you can launch the SKIMMR server by\n<br>        \n<br>        \t*python srvr_bm.py*\n<br>        \n<br>        This will start the server at localhost (127.0.0.1) and port 8008. You can \n<br>        specify alternative addresses and ports by running the server as\n<br>        \n<br>        \t*python srvr_bm.py ADDRESS:PORT*\n<br>        \n<br>        Also, you can specify an alternative store to be loaded by the server (useful\n<br>        if you want to examine multiple stores you have previously generated):\n<br>        \n<br>        \t*python srvr_bm.py [ADDRESS:PORT] [FOLDER]*\n<br>        \n<br>        where FOLDER is a path to the store you want to load.\n<br>        \n<br>        After the SKIMMR server has been started, you can point you browser to the \n<br>        corresponding address and port and start using the tool as indicated in the\n<br>        *About* web-page accessible from the SKIMMR interface (just follow the link \n<br>        in the bottom of every page in the SKIMMR web interface).\n          </div>"}, "last_serial": 803341, "releases": {"0.1-a1": [{"comment_text": "", "digests": {"md5": "da8052834ae7e6391a659e12b8c83dbb", "sha256": "8ca4ac67100c3c36230205fb86dee33801cf2491218daeac2eae40e983e4e548"}, "downloads": -1, "filename": "skimmr_bm-0.1-a1.tar.gz", "has_sig": false, "md5_digest": "da8052834ae7e6391a659e12b8c83dbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 812782, "upload_time": "2013-02-15T17:29:15", "upload_time_iso_8601": "2013-02-15T17:29:15.548799Z", "url": "https://files.pythonhosted.org/packages/e9/4a/5eac799cb67b4cbd3e6d03abad24f5d367d3345dc5ea865c2ba893458fc1/skimmr_bm-0.1-a1.tar.gz", "yanked": false}], "0.1-a2": [{"comment_text": "", "digests": {"md5": "f68b0953ab851cc455d66132583bd304", "sha256": "840915e2703abec5048e179d49a9d6c72656428936d2bf28753ba39d0435965b"}, "downloads": -1, "filename": "skimmr_bm-0.1-a2.tar.gz", "has_sig": false, "md5_digest": "f68b0953ab851cc455d66132583bd304", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 812784, "upload_time": "2013-02-15T17:30:08", "upload_time_iso_8601": "2013-02-15T17:30:08.203742Z", "url": "https://files.pythonhosted.org/packages/a7/92/1419e602dd0c5ad2711baa11370f30abd1c4758ab2471fc1cb175b7f3635/skimmr_bm-0.1-a2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f68b0953ab851cc455d66132583bd304", "sha256": "840915e2703abec5048e179d49a9d6c72656428936d2bf28753ba39d0435965b"}, "downloads": -1, "filename": "skimmr_bm-0.1-a2.tar.gz", "has_sig": false, "md5_digest": "f68b0953ab851cc455d66132583bd304", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 812784, "upload_time": "2013-02-15T17:30:08", "upload_time_iso_8601": "2013-02-15T17:30:08.203742Z", "url": "https://files.pythonhosted.org/packages/a7/92/1419e602dd0c5ad2711baa11370f30abd1c4758ab2471fc1cb175b7f3635/skimmr_bm-0.1-a2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:03 2020"}