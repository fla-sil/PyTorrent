{"info": {"author": "Casey Richardson", "author_email": "caseybrichardson@icloud.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# gamesense\nA Python library for use with SteelSeries GameSense 3.8.X+\n\n## Installation\n\nThere are two different versions of this package. One supports normal synchronous function calls and the other support python's asynchronous functionality.\n\nTo install the sync version run:\n```\npip install gamesense[sync]\n```\n\nTo install the async version run:\n```\npip install gamesense[async]\n```\n\nOr both:\n```\npip install gamesense[sync,async]\n```\n\n\n\n## Usage\nRelatively simple to use.\n\nFor synchronous usage:\n```python\nimport gamesense\n\n# Create a GameSense object instance to use\ngs = gamesense.GameSense(\"SYNC_GAME\", \"Sync Game\")\n\n# Before you can register or send events, you must register your game\ngs.register_game(icon_color_id=gamesense.GS_ICON_GOLD)\n\n# Register an event (different than binding an event, see more info in the SteelSeries docs)\ngs.register_event(\"DID_STUFF\")\n\n# Test out the event by sending the event\ngs.send_event(\"DID_STUFF\", {\"value\": 22})\n```\n\nFor asynchronous usage:\n```python\nimport asyncio\nimport gamesense\n\n# For example purposes, need an event loop \n# Inside normal async functions, you'd just use await on the functions provided on AioGameSense\nloop = asyncio.get_event_loop()\n\n# Create a GameSense object instance to use\ngs = gamesense.AioGameSense(\"ASYNC_GAME\", \"Async Game\")\n\n# Before you can register or send events, you must register your game\nloop.run_until_complete(gs.register_game())\n\n# Register an event (different than binding an event, see more info in the SteelSeries docs)\nloop.run_until_complete(gs.register_event('DID_STUFF'))\n\n# Test out the event by sending the event\nloop.run_until_complete(gs.send_event(\"DID_STUFF\", {\"value\": 23}))\n```\n\nThe two examples do relatively the same thing. For more information about the SteelSeries GameSense API, see: https://github.com/SteelSeries/gamesense-sdk/tree/master/doc/api for more information. Things like binding handlers and such should be possible, but can be a bit complex. Commits are welcome for making such functionality easier.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/caseybrichardson/gamesense", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gamesense", "package_url": "https://pypi.org/project/gamesense/", "platform": "", "project_url": "https://pypi.org/project/gamesense/", "project_urls": {"Homepage": "https://github.com/caseybrichardson/gamesense"}, "release_url": "https://pypi.org/project/gamesense/0.0.3/", "requires_dist": ["aiohttp; extra == 'async'", "requests; extra == 'sync'"], "requires_python": "", "summary": "Library for interacting with SteelSeries GameSense 3.8.x", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>gamesense</h1>\n<p>A Python library for use with SteelSeries GameSense 3.8.X+</p>\n<h2>Installation</h2>\n<p>There are two different versions of this package. One supports normal synchronous function calls and the other support python's asynchronous functionality.</p>\n<p>To install the sync version run:</p>\n<pre><code>pip install gamesense[sync]\n</code></pre>\n<p>To install the async version run:</p>\n<pre><code>pip install gamesense[async]\n</code></pre>\n<p>Or both:</p>\n<pre><code>pip install gamesense[sync,async]\n</code></pre>\n<h2>Usage</h2>\n<p>Relatively simple to use.</p>\n<p>For synchronous usage:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gamesense</span>\n\n<span class=\"c1\"># Create a GameSense object instance to use</span>\n<span class=\"n\">gs</span> <span class=\"o\">=</span> <span class=\"n\">gamesense</span><span class=\"o\">.</span><span class=\"n\">GameSense</span><span class=\"p\">(</span><span class=\"s2\">\"SYNC_GAME\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Sync Game\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Before you can register or send events, you must register your game</span>\n<span class=\"n\">gs</span><span class=\"o\">.</span><span class=\"n\">register_game</span><span class=\"p\">(</span><span class=\"n\">icon_color_id</span><span class=\"o\">=</span><span class=\"n\">gamesense</span><span class=\"o\">.</span><span class=\"n\">GS_ICON_GOLD</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Register an event (different than binding an event, see more info in the SteelSeries docs)</span>\n<span class=\"n\">gs</span><span class=\"o\">.</span><span class=\"n\">register_event</span><span class=\"p\">(</span><span class=\"s2\">\"DID_STUFF\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test out the event by sending the event</span>\n<span class=\"n\">gs</span><span class=\"o\">.</span><span class=\"n\">send_event</span><span class=\"p\">(</span><span class=\"s2\">\"DID_STUFF\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">})</span>\n</pre>\n<p>For asynchronous usage:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">gamesense</span>\n\n<span class=\"c1\"># For example purposes, need an event loop </span>\n<span class=\"c1\"># Inside normal async functions, you'd just use await on the functions provided on AioGameSense</span>\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a GameSense object instance to use</span>\n<span class=\"n\">gs</span> <span class=\"o\">=</span> <span class=\"n\">gamesense</span><span class=\"o\">.</span><span class=\"n\">AioGameSense</span><span class=\"p\">(</span><span class=\"s2\">\"ASYNC_GAME\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Async Game\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Before you can register or send events, you must register your game</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">gs</span><span class=\"o\">.</span><span class=\"n\">register_game</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Register an event (different than binding an event, see more info in the SteelSeries docs)</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">gs</span><span class=\"o\">.</span><span class=\"n\">register_event</span><span class=\"p\">(</span><span class=\"s1\">'DID_STUFF'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Test out the event by sending the event</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">gs</span><span class=\"o\">.</span><span class=\"n\">send_event</span><span class=\"p\">(</span><span class=\"s2\">\"DID_STUFF\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"mi\">23</span><span class=\"p\">}))</span>\n</pre>\n<p>The two examples do relatively the same thing. For more information about the SteelSeries GameSense API, see: <a href=\"https://github.com/SteelSeries/gamesense-sdk/tree/master/doc/api\" rel=\"nofollow\">https://github.com/SteelSeries/gamesense-sdk/tree/master/doc/api</a> for more information. Things like binding handlers and such should be possible, but can be a bit complex. Commits are welcome for making such functionality easier.</p>\n\n          </div>"}, "last_serial": 4809889, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c8f8e1bda4ebcf8dda1682266bb3f688", "sha256": "135396a08107e531c88b700fe531f8391cfeb603c037bb2d0f01c03300fcfa2d"}, "downloads": -1, "filename": "gamesense-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c8f8e1bda4ebcf8dda1682266bb3f688", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4285, "upload_time": "2018-11-13T09:14:10", "upload_time_iso_8601": "2018-11-13T09:14:10.170001Z", "url": "https://files.pythonhosted.org/packages/9a/d2/e4c119beb5f01d1e1b1df469a5edb6db1f23d92c7a4d140210874f2f10ca/gamesense-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f68f1f63e5a509b5a8a80a472c29018", "sha256": "62dc63ff36349c35e871655702794a0bee87fd8ce7e25c740027b13968d42f55"}, "downloads": -1, "filename": "gamesense-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7f68f1f63e5a509b5a8a80a472c29018", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2966, "upload_time": "2018-11-13T09:14:12", "upload_time_iso_8601": "2018-11-13T09:14:12.261872Z", "url": "https://files.pythonhosted.org/packages/e9/38/675f13fe586a1a4a75161f60151b39f7f063c48e1ecca36b0453a2b72701/gamesense-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "fd34d18fde48a8a278a334bc3899b71e", "sha256": "92932d40f684da4699d0a4194d3a5df1fddf9258ea0ee7e17b580af4d912fa3e"}, "downloads": -1, "filename": "gamesense-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fd34d18fde48a8a278a334bc3899b71e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2806, "upload_time": "2019-02-12T09:25:09", "upload_time_iso_8601": "2019-02-12T09:25:09.137570Z", "url": "https://files.pythonhosted.org/packages/3e/42/caefd3f3cac46c79fba3d7d4bfbe4250eb306f35628d0a0bee37e2034efe/gamesense-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff6eca3a6f2562d4a8a964faaf0e34f0", "sha256": "d184959797b7006263e4cb8ecc6f070b7f124b5775a1b302bbda45ee7a09cc19"}, "downloads": -1, "filename": "gamesense-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ff6eca3a6f2562d4a8a964faaf0e34f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1987, "upload_time": "2019-02-12T09:25:10", "upload_time_iso_8601": "2019-02-12T09:25:10.591639Z", "url": "https://files.pythonhosted.org/packages/b7/c5/1712a7bbd799152af1cfa205b31e12c41c83e97edb330abad7ec0db8a728/gamesense-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "60f62b4c517023b49be40d6cf45103a9", "sha256": "eecfed4e94215b4d95c3aa53b16860c9967c363d54e3e3c01c7ca30b467d6b9d"}, "downloads": -1, "filename": "gamesense-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "60f62b4c517023b49be40d6cf45103a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5676, "upload_time": "2019-02-12T09:40:16", "upload_time_iso_8601": "2019-02-12T09:40:16.281775Z", "url": "https://files.pythonhosted.org/packages/fc/c1/110ed53beb0bf3cb87ff00faea486ac518544ff64f61b6dc4af34dbb13a0/gamesense-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e5d2aafe5f01486c7d5e0d933412512", "sha256": "4982eba34947a37e4ea5daaba9a06b6a66b88f3485661c11fa8d37aae13178c8"}, "downloads": -1, "filename": "gamesense-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5e5d2aafe5f01486c7d5e0d933412512", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4494, "upload_time": "2019-02-12T09:40:17", "upload_time_iso_8601": "2019-02-12T09:40:17.290061Z", "url": "https://files.pythonhosted.org/packages/1e/26/d070e3fa8886c1d48ec23391819b334db12dbecdd36a2c72575c4203b4a3/gamesense-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "60f62b4c517023b49be40d6cf45103a9", "sha256": "eecfed4e94215b4d95c3aa53b16860c9967c363d54e3e3c01c7ca30b467d6b9d"}, "downloads": -1, "filename": "gamesense-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "60f62b4c517023b49be40d6cf45103a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5676, "upload_time": "2019-02-12T09:40:16", "upload_time_iso_8601": "2019-02-12T09:40:16.281775Z", "url": "https://files.pythonhosted.org/packages/fc/c1/110ed53beb0bf3cb87ff00faea486ac518544ff64f61b6dc4af34dbb13a0/gamesense-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e5d2aafe5f01486c7d5e0d933412512", "sha256": "4982eba34947a37e4ea5daaba9a06b6a66b88f3485661c11fa8d37aae13178c8"}, "downloads": -1, "filename": "gamesense-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5e5d2aafe5f01486c7d5e0d933412512", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4494, "upload_time": "2019-02-12T09:40:17", "upload_time_iso_8601": "2019-02-12T09:40:17.290061Z", "url": "https://files.pythonhosted.org/packages/1e/26/d070e3fa8886c1d48ec23391819b334db12dbecdd36a2c72575c4203b4a3/gamesense-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:13 2020"}