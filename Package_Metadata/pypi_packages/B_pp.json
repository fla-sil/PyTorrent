{"info": {"author": "John F Novak", "author_email": "john.franc.novak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "License :: Public Domain", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development"], "description": "The B Preprocessor\n    A code template processor\n\n    What is this?\n        This is a code templating pre-processor. In my work I often have to\n        write code which runs on multiple data files. The code has to be the\n        same, but the files differ in subtle ways: the number of files, the\n        format of the files, etc. Instead of writing one piece of code, then\n        tweaking it to work for each case, I write a B template, and put all\n        of the file-specific-subtleties into meta-data text files, and the B\n        pre-processor handles all of the case specific tweaking.\n\n    Why would I want this?\n        Readability\n            Everything is text files and python scripts. The output of the\n            preprocessor looks like normal code that was written from scratch.\n            I send code generated by the pre-processor to my boss all the time.\n            It makes him happy because it looks like code he writes; It makes\n            me happy because I don't have to be inefficient and write code his\n            way.\n        Flexibility\n            The preprocessor uses simple ideas: replacement, iteration, files\n            are treated as strings, the template boilerplate is handled with\n            the same rules as everything else. You can do some crazy things\n            with a little creativity.\n\n    Why didn't you just learn to use one of the other template scripting\n    languages?\n        Frankly, I wrote the first version of this over the course of two\n        hours. I needed something which worked, and I needed it fast. It would\n        have taken me longer to learn something new, than to make something\n        new.\n    Why B?\n        B comes before C! Most of my work coding is in C/C++. Now I can say\n        things like, \"I wrote you A B C... ++ template for that.\" Actually, no,\n        thats a really limp joke.\n\n    when install with setuptools (or variant), an executable 'B' is added\n        to the user's path.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/JohnFNovak/B_pp/", "keywords": null, "license": "Public Domain", "maintainer": null, "maintainer_email": null, "name": "B_pp", "package_url": "https://pypi.org/project/B_pp/", "platform": "any", "project_url": "https://pypi.org/project/B_pp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/JohnFNovak/B_pp/"}, "release_url": "https://pypi.org/project/B_pp/1.1/", "requires_dist": null, "requires_python": null, "summary": "A code template processor", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            The B Preprocessor<br>    A code template processor<br><br>    What is this?<br>        This is a code templating pre-processor. In my work I often have to<br>        write code which runs on multiple data files. The code has to be the<br>        same, but the files differ in subtle ways: the number of files, the<br>        format of the files, etc. Instead of writing one piece of code, then<br>        tweaking it to work for each case, I write a B template, and put all<br>        of the file-specific-subtleties into meta-data text files, and the B<br>        pre-processor handles all of the case specific tweaking.<br><br>    Why would I want this?<br>        Readability<br>            Everything is text files and python scripts. The output of the<br>            preprocessor looks like normal code that was written from scratch.<br>            I send code generated by the pre-processor to my boss all the time.<br>            It makes him happy because it looks like code he writes; It makes<br>            me happy because I don't have to be inefficient and write code his<br>            way.<br>        Flexibility<br>            The preprocessor uses simple ideas: replacement, iteration, files<br>            are treated as strings, the template boilerplate is handled with<br>            the same rules as everything else. You can do some crazy things<br>            with a little creativity.<br><br>    Why didn't you just learn to use one of the other template scripting<br>    languages?<br>        Frankly, I wrote the first version of this over the course of two<br>        hours. I needed something which worked, and I needed it fast. It would<br>        have taken me longer to learn something new, than to make something<br>        new.<br>    Why B?<br>        B comes before C! Most of my work coding is in C/C++. Now I can say<br>        things like, \"I wrote you A B C... ++ template for that.\" Actually, no,<br>        thats a really limp joke.<br><br>    when install with setuptools (or variant), an executable 'B' is added<br>        to the user's path.\n          </div>"}, "last_serial": 1101631, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "3d0bd627598a2737243dcb81d44b893d", "sha256": "5aadda6c13664e1342026ccd5ac86308f40e1485708b51f6b01107851a0316e2"}, "downloads": -1, "filename": "B_pp-1.0.tar.gz", "has_sig": false, "md5_digest": "3d0bd627598a2737243dcb81d44b893d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6958, "upload_time": "2014-05-17T19:09:00", "upload_time_iso_8601": "2014-05-17T19:09:00.619279Z", "url": "https://files.pythonhosted.org/packages/2f/01/5f3672432d6f3ad47a7f8bbd633ead7c7be42d21097d85598500892ef735/B_pp-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "d50096125438dcd664549d9a53491555", "sha256": "5f7a7e0803b8ed657eafced1fe8572f1fff7b1f26312a7a5724531d49c08a7a8"}, "downloads": -1, "filename": "B_pp-1.1.tar.gz", "has_sig": false, "md5_digest": "d50096125438dcd664549d9a53491555", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8648, "upload_time": "2014-05-23T00:57:05", "upload_time_iso_8601": "2014-05-23T00:57:05.433084Z", "url": "https://files.pythonhosted.org/packages/0d/f6/b3168266d4a8ea36e105a9ac24d88ec06d71efc8d2670c356b76ffdc7a77/B_pp-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d50096125438dcd664549d9a53491555", "sha256": "5f7a7e0803b8ed657eafced1fe8572f1fff7b1f26312a7a5724531d49c08a7a8"}, "downloads": -1, "filename": "B_pp-1.1.tar.gz", "has_sig": false, "md5_digest": "d50096125438dcd664549d9a53491555", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8648, "upload_time": "2014-05-23T00:57:05", "upload_time_iso_8601": "2014-05-23T00:57:05.433084Z", "url": "https://files.pythonhosted.org/packages/0d/f6/b3168266d4a8ea36e105a9ac24d88ec06d71efc8d2670c356b76ffdc7a77/B_pp-1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:28 2020"}