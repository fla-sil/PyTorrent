{"info": {"author": "Andrew Seier", "author_email": "andseier@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: Freely Distributable", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Utilities"], "description": "The Immutable Package\n=====================\n\nThis package is an *exceedingly* simple wrapper around the builtin\n``namedtuple`` from the ``collections`` package.\n\nIt allows you to instantiate via a ``tuple`` or via ``kwargs``. It\nsimplifies the case where you know ahead of time what the values of an\n``Immutable`` should be and you just need to instantiate it once.\n\nInstall\n-------\n\n``pip install immutable``\n\nDetails\n-------\n\n``namedtuple``\n~~~~~~~~~~~~~~\n\nThe ``namedtuple`` is a Python ``builtin`` that allows you to\ninstantiate an object as follows:\n\n.. code:: python\n\n    from collections import namedtuple\n\n    TupleFactory = namedtuple('ATuple', ['using', 'these', 'attrs'])\n    ATuple = TupleFactory('first', these='second', attrs='third')\n    ATuple  # ATuple(using='first', these='second', attrs='third')\n\n    # dot-access attributes\n    ATuple.using  # 'first'\n    Atuple.these  # 'second'\n    ATuple.attrs  # 'third'\n\n    # index-access attributes\n    ATuple[0]  # 'first'\n    ATuple[1]  # 'second'\n    ATuple[2]  # 'third'\n    ATuple[-1]  # 'third'\n\n    # the class name is as specified in creating the original factory\n    ATuple.__class__.__name__  # 'ATuple'\n\n``ImmutableFactory``\n~~~~~~~~~~~~~~~~~~~~\n\nReplicate ``namedtuple`` functionality\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ImmutableFactory is just a thin wrapper that allows you to do this\nin one step:\n\n.. code:: python\n\n    from immutable import ImmutableFactory\n\n    attributes = (('using', 'first'), ('these', 'second'), ('attrs', 'third'))\n\n    # don't worry about the extra kwargs for now :)\n    ATuple = ImmutableFactory.create(attributes, keys=False, values=False, items=False)\n    ATuple  # Immutable(using='first', these='second', attrs='third')\n\n    # dot-access attributes\n    ATuple.using  # 'first'\n    Atuple.these  # 'second'\n    ATuple.attrs  # 'third'\n\n    # index-access attributes\n    ATuple[0]  # 'first'\n    ATuple[1]  # 'second'\n    ATuple[2]  # 'third'\n    ATuple[-1]  # 'third'\n\n    # the class name is *always* `Immutable` now\n    ATuple.__class__.__name__  # 'Immutable'\n\nSome extra bells and whistles (don't get too excited)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMost of the time, we don't care about the *order*. This allows us to\ninstantiate in a *much* cleaner style:\n\n.. code:: python\n\n    from immutable import ImmutableFactory\n\n    ATuple = ImmutableFactory.create(using='first', these='second', attrs='third',\n                                     keys=False, values=False, items=False)\n\n    # note that there's no predictable order here\n    ATuple  # Immutable(these='second', using='first', attrs='third')\n\n    # dot-access attributes\n    ATuple.using  # 'first'\n    Atuple.these  # 'second'\n    ATuple.attrs  # 'third'\n\n    # doesn't really make sense to index-access attributes now, so don't.\n\n    # the class name is *always* `Immutable` now\n    ATuple.__class__.__name__  # 'Immutable'\n\nAdditionally, it's helpful to have dict-like ``keys``, ``values``, and\n``items``. These\n\nNotes\n~~~~~\n\nNote if you use a *mutable* as a value for an attribute of an\n``Immutable`` object, you'll be able to change it. If this wasn't the\ncase, the ``ImmutableFactory`` would need to mutate your input data--not\nnice.\n\n.. code:: python\n\n    from immutable import ImmutableFactory\n\n    ATuple = ImmutableFactory.create(mutable=['a', 'list'])\n    ATuple.mutable  # ['a', 'list']\n    ATuple.mutable.append('can change!')\n    ATuple.mutable  # ['a', 'list', 'can change!']", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://plot.ly/theengineear/immutable", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "immutable", "package_url": "https://pypi.org/project/immutable/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/immutable/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://plot.ly/theengineear/immutable"}, "release_url": "https://pypi.org/project/immutable/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Simple immutable object factory", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package is an <em>exceedingly</em> simple wrapper around the builtin\n<tt>namedtuple</tt> from the <tt>collections</tt> package.</p>\n<p>It allows you to instantiate via a <tt>tuple</tt> or via <tt>kwargs</tt>. It\nsimplifies the case where you know ahead of time what the values of an\n<tt>Immutable</tt> should be and you just need to instantiate it once.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<p><tt>pip install immutable</tt></p>\n</div>\n<div id=\"details\">\n<h2>Details</h2>\n<div id=\"namedtuple\">\n<h3><tt>namedtuple</tt></h3>\n<p>The <tt>namedtuple</tt> is a Python <tt>builtin</tt> that allows you to\ninstantiate an object as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">namedtuple</span>\n\n<span class=\"n\">TupleFactory</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'ATuple'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'using'</span><span class=\"p\">,</span> <span class=\"s1\">'these'</span><span class=\"p\">,</span> <span class=\"s1\">'attrs'</span><span class=\"p\">])</span>\n<span class=\"n\">ATuple</span> <span class=\"o\">=</span> <span class=\"n\">TupleFactory</span><span class=\"p\">(</span><span class=\"s1\">'first'</span><span class=\"p\">,</span> <span class=\"n\">these</span><span class=\"o\">=</span><span class=\"s1\">'second'</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"s1\">'third'</span><span class=\"p\">)</span>\n<span class=\"n\">ATuple</span>  <span class=\"c1\"># ATuple(using='first', these='second', attrs='third')</span>\n\n<span class=\"c1\"># dot-access attributes</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"n\">using</span>  <span class=\"c1\"># 'first'</span>\n<span class=\"n\">Atuple</span><span class=\"o\">.</span><span class=\"n\">these</span>  <span class=\"c1\"># 'second'</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"n\">attrs</span>  <span class=\"c1\"># 'third'</span>\n\n<span class=\"c1\"># index-access attributes</span>\n<span class=\"n\">ATuple</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># 'first'</span>\n<span class=\"n\">ATuple</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># 'second'</span>\n<span class=\"n\">ATuple</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># 'third'</span>\n<span class=\"n\">ATuple</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># 'third'</span>\n\n<span class=\"c1\"># the class name is as specified in creating the original factory</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>  <span class=\"c1\"># 'ATuple'</span>\n</pre>\n</div>\n<div id=\"immutablefactory\">\n<h3><tt>ImmutableFactory</tt></h3>\n<div id=\"replicate-namedtuple-functionality\">\n<h4>Replicate <tt>namedtuple</tt> functionality</h4>\n<p>The ImmutableFactory is just a thin wrapper that allows you to do this\nin one step:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">immutable</span> <span class=\"kn\">import</span> <span class=\"n\">ImmutableFactory</span>\n\n<span class=\"n\">attributes</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"s1\">'using'</span><span class=\"p\">,</span> <span class=\"s1\">'first'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'these'</span><span class=\"p\">,</span> <span class=\"s1\">'second'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'attrs'</span><span class=\"p\">,</span> <span class=\"s1\">'third'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># don't worry about the extra kwargs for now :)</span>\n<span class=\"n\">ATuple</span> <span class=\"o\">=</span> <span class=\"n\">ImmutableFactory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">attributes</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">ATuple</span>  <span class=\"c1\"># Immutable(using='first', these='second', attrs='third')</span>\n\n<span class=\"c1\"># dot-access attributes</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"n\">using</span>  <span class=\"c1\"># 'first'</span>\n<span class=\"n\">Atuple</span><span class=\"o\">.</span><span class=\"n\">these</span>  <span class=\"c1\"># 'second'</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"n\">attrs</span>  <span class=\"c1\"># 'third'</span>\n\n<span class=\"c1\"># index-access attributes</span>\n<span class=\"n\">ATuple</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># 'first'</span>\n<span class=\"n\">ATuple</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># 'second'</span>\n<span class=\"n\">ATuple</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># 'third'</span>\n<span class=\"n\">ATuple</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># 'third'</span>\n\n<span class=\"c1\"># the class name is *always* `Immutable` now</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>  <span class=\"c1\"># 'Immutable'</span>\n</pre>\n</div>\n<div id=\"some-extra-bells-and-whistles-don-t-get-too-excited\">\n<h4>Some extra bells and whistles (don\u2019t get too excited)</h4>\n<p>Most of the time, we don\u2019t care about the <em>order</em>. This allows us to\ninstantiate in a <em>much</em> cleaner style:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">immutable</span> <span class=\"kn\">import</span> <span class=\"n\">ImmutableFactory</span>\n\n<span class=\"n\">ATuple</span> <span class=\"o\">=</span> <span class=\"n\">ImmutableFactory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"s1\">'first'</span><span class=\"p\">,</span> <span class=\"n\">these</span><span class=\"o\">=</span><span class=\"s1\">'second'</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"s1\">'third'</span><span class=\"p\">,</span>\n                                 <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># note that there's no predictable order here</span>\n<span class=\"n\">ATuple</span>  <span class=\"c1\"># Immutable(these='second', using='first', attrs='third')</span>\n\n<span class=\"c1\"># dot-access attributes</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"n\">using</span>  <span class=\"c1\"># 'first'</span>\n<span class=\"n\">Atuple</span><span class=\"o\">.</span><span class=\"n\">these</span>  <span class=\"c1\"># 'second'</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"n\">attrs</span>  <span class=\"c1\"># 'third'</span>\n\n<span class=\"c1\"># doesn't really make sense to index-access attributes now, so don't.</span>\n\n<span class=\"c1\"># the class name is *always* `Immutable` now</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>  <span class=\"c1\"># 'Immutable'</span>\n</pre>\n<p>Additionally, it\u2019s helpful to have dict-like <tt>keys</tt>, <tt>values</tt>, and\n<tt>items</tt>. These</p>\n</div>\n</div>\n<div id=\"notes\">\n<h3>Notes</h3>\n<p>Note if you use a <em>mutable</em> as a value for an attribute of an\n<tt>Immutable</tt> object, you\u2019ll be able to change it. If this wasn\u2019t the\ncase, the <tt>ImmutableFactory</tt> would need to mutate your input data\u2013not\nnice.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">immutable</span> <span class=\"kn\">import</span> <span class=\"n\">ImmutableFactory</span>\n\n<span class=\"n\">ATuple</span> <span class=\"o\">=</span> <span class=\"n\">ImmutableFactory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">])</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"n\">mutable</span>  <span class=\"c1\"># ['a', 'list']</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"n\">mutable</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'can change!'</span><span class=\"p\">)</span>\n<span class=\"n\">ATuple</span><span class=\"o\">.</span><span class=\"n\">mutable</span>  <span class=\"c1\"># ['a', 'list', 'can change!']</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1817751, "releases": {"0.0.1": [], "0.0.2": [{"comment_text": "", "digests": {"md5": "31ae43432b631aa8d38f5564f1e602ea", "sha256": "2b7d281e4e1cf782082bb02eeb8898a3bac76b237abec0ddb7c3fb4bca408670"}, "downloads": -1, "filename": "immutable-0.0.2.tar.gz", "has_sig": false, "md5_digest": "31ae43432b631aa8d38f5564f1e602ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6126, "upload_time": "2015-11-15T19:55:51", "upload_time_iso_8601": "2015-11-15T19:55:51.358084Z", "url": "https://files.pythonhosted.org/packages/cd/d1/94ebd56b425c8dc06f2a887a8b7333950ac7265de790a561e3fa0db85c45/immutable-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "31ae43432b631aa8d38f5564f1e602ea", "sha256": "2b7d281e4e1cf782082bb02eeb8898a3bac76b237abec0ddb7c3fb4bca408670"}, "downloads": -1, "filename": "immutable-0.0.2.tar.gz", "has_sig": false, "md5_digest": "31ae43432b631aa8d38f5564f1e602ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6126, "upload_time": "2015-11-15T19:55:51", "upload_time_iso_8601": "2015-11-15T19:55:51.358084Z", "url": "https://files.pythonhosted.org/packages/cd/d1/94ebd56b425c8dc06f2a887a8b7333950ac7265de790a561e3fa0db85c45/immutable-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:36 2020"}