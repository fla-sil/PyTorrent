{"info": {"author": "Cordell Michaud", "author_email": "michaudcordell@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "# SimpleDrivetrain\r\nVersion: v1.0.1\r\n\r\nA Python library that facilitates the control of robot drivetrains with complex motor arrangements.\r\n\r\n## Table of Contents\r\n* [Overview](#overview)\r\n* [Current Features](#current-features)\r\n* [Roadmap](#roadmap)\r\n* [Requirements](#requirements)\r\n* [Installation](#installation)\r\n* [How to Use](#how-to-use)\r\n  - [Import simpledrivetrain](#import-simpledrivetrain)\r\n  - [Creating a SimpleDrivetrain object](#creating-a-simpledrivetrain-object)\r\n  - [Adding, removing, and accessing drive motors](#adding-removing-and-accessing-drive-motors)\r\n  - [Updating drivetrain orientation](#updating-drivetrain-orientation)\r\n  - [Getting motor velocities](#getting-motor-velocities)\r\n* [License](#license)\r\n\r\n## Overview\r\nSimpleDrivetrain provides an easy way to define a drivetrain by the location and orientation of its motors, and calculate the desired velocities for each motor given the overall desired translational velocity and rotational velocities for the drivetrain.\r\n\r\n## Current Features\r\n* Local-oriented and field-oriented 3-axis translation and rotation\r\n* Motor-level PWM scaling from user-defined PWM ranges or custom scaling functions\r\n* Support for loading drivetrains from an XML file\r\n\r\n## Roadmap\r\n* Motion profiles\r\n* Control loop\r\n\r\n## Requirements\r\n* Python 2.7+/3.x\r\n* Numpy\r\n* lxml\r\n\r\n## Installation\r\nInstall SimpleDrivetrain from PyPI by opening a terminal and typing the following command:\r\n```\r\n$ pip install simpledrivetrain\r\n```\r\n\r\n## How to Use\r\n### Import simpledrivetrain\r\n```python\r\nfrom simpledrivetrain.simple_drivetrain import SimpleDrivetrain\r\n```\r\n### Creating a SimpleDrivetrain object\r\n```python\r\ndrivetrain = SimpleDrivetrain()\r\n```\r\n### Adding, removing, and accessing drive motors\r\n* Motors can be added to the drivetrain by calling the ```add_new_motor``` \r\nmethod and supplying:\r\n    - The ```name``` of the motor, a unique string identifier\r\n    - The ```position``` of the motor relative to the drivetrain's \r\n      center in the form of a 3D coordinate list e.g. [x, y, z]\r\n    - The motor's positive drive ```direction``` in the form of a 3D cartesian direction vector\r\n      e.g. [x, y, z]\r\n    - Optionally, a boolean value ```inverted``` to set whether the motor is inverted \r\n    - Optionally, a 3-tuple ```pwm_bounds``` in the form of (FULL_REVERSE, FULL STOP, FULL_FORWARD) \r\n      to which to scale the motor velocity\r\n    - Optionally, a function ```pwm_scaling_func``` which accepts a motor velocity in [-1, 1] and \r\n      scales it to a desired pwm range\r\n    ```python\r\n    drivetrain.add_new_motor(name, position, direction, inverted=False, \r\n                             pwm_bounds=(0, 512, 1024), pwm_scaling_func=None)\r\n    ```\r\n* Motors can be removed from the drivetrain by calling the ```remove_motor_by_name```\r\n  method and supplying the ```name``` of the motor to remove\r\n  ```python\r\n  drivetrain.remove_motor_by_name(name)\r\n  ```\r\n  alternatively, a motor can also be removed from the drivetrain by calling the \r\n  ```remove_motor_by_index``` method and supplying the motor's ```index``` \r\n  of addition\r\n  ```python\r\n  drivetrain.remove_motor_by_index(index)\r\n  ```\r\n* Motors can be accessed by calling the ```get_motor_by_name``` method and supplying \r\n  the ```name``` of the motor to retrieve\r\n  ```python\r\n  motor = drivetrain.get_motor_by_name(name)\r\n  ```\r\n  alternatively, a motor can also be accessed by calling ```get_motor_by_index``` \r\n  method and supplying the motor's ```index``` of addition\r\n  ```python\r\n  motor = drivetrain.get_motor_by_index(index)\r\n  ```  \r\n* Motors can also be accessed through the motors instance variable, which stores the \r\n  motors by order of addition in a list\r\n  ```python\r\n  motorlist = drivetrain.motors\r\n  ```\r\n* Alternatively, motors and orientation can be loaded from an xml file by calling \r\n  the ```load_drivetrain_from_file``` method and supplying the ```filepath``` string \r\n  pointing to the xml file:\r\n  ```python\r\n  drivetrain.load_drivetrain_from_file(filepath)\r\n  ```\r\n  For an example file, see [Example SimpleDrivetrain xml FIle](tests/drivetrain_test.xml).\r\n\r\n### Updating drivetrain orientation\r\n```python\r\ndrivetrain.orientation = (pitch, roll, yaw)    \r\n```\r\n### Getting motor velocities\r\n* Motor velocities scaled in [-1, 1], stored in a list by order of motor \r\n    addition, can be calculated by calling the\r\n    ```get_motor_vels``` method and supplying:\r\n    - ```translation```, a 3D vector representing the drivetrain's desired \r\n        overall velocity, e.g. [x, y, z]\r\n    - ```rotation```, a 3D vector representing the drivetrain's desired \r\n        rotational velocity, e.g. [pitching, rolling, yawing]\r\n    - ```force_local_oriented```, a boolean value which, if set to true, \r\n    ignores current drivetrain orientation and calculates local-oriented \r\n    motor values. It is set to false by default.\r\n    ```python\r\n    drivetrain.get_motor_vels(translation, rotation, force_local_oriented=False)\r\n    ```\r\n* Motor velocities scaled according to user-defined, motor-level PWM ranges \r\n    or scaling functions, stored in a list by order of motor addition, can be \r\n    calculated by calling the ```get_motor_vels_scaled``` method and supplying\r\n    the same ```translation```, ```rotation```, and ```force_local_oriented```\r\n    parameters as the ```get_motor_vels``` method:\r\n    ```python\r\n    drivetrain.get_motor_vels_scaled(translation, rotation, force_local_oriented=False)\r\n    ```\r\n\r\n## License\r\nSimpleDrivetrain is distributed under the terms of the [MIT License](https://choosealicense.com/licenses/mit/#).\r\n\r\n\r\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/michaudcordell/SimpleDrivetrain", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "simpledrivetrain", "package_url": "https://pypi.org/project/simpledrivetrain/", "platform": "", "project_url": "https://pypi.org/project/simpledrivetrain/", "project_urls": {"Homepage": "https://github.com/michaudcordell/SimpleDrivetrain"}, "release_url": "https://pypi.org/project/simpledrivetrain/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "A Python library that facilitates the control of robot drivetrains with complex motor arrangements.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SimpleDrivetrain</h1>\n<p>Version: v1.0.1</p>\n<p>A Python library that facilitates the control of robot drivetrains with complex motor arrangements.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#overview\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#current-features\" rel=\"nofollow\">Current Features</a></li>\n<li><a href=\"#roadmap\" rel=\"nofollow\">Roadmap</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#how-to-use\" rel=\"nofollow\">How to Use</a>\n<ul>\n<li><a href=\"#import-simpledrivetrain\" rel=\"nofollow\">Import simpledrivetrain</a></li>\n<li><a href=\"#creating-a-simpledrivetrain-object\" rel=\"nofollow\">Creating a SimpleDrivetrain object</a></li>\n<li><a href=\"#adding-removing-and-accessing-drive-motors\" rel=\"nofollow\">Adding, removing, and accessing drive motors</a></li>\n<li><a href=\"#updating-drivetrain-orientation\" rel=\"nofollow\">Updating drivetrain orientation</a></li>\n<li><a href=\"#getting-motor-velocities\" rel=\"nofollow\">Getting motor velocities</a></li>\n</ul>\n</li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Overview</h2>\n<p>SimpleDrivetrain provides an easy way to define a drivetrain by the location and orientation of its motors, and calculate the desired velocities for each motor given the overall desired translational velocity and rotational velocities for the drivetrain.</p>\n<h2>Current Features</h2>\n<ul>\n<li>Local-oriented and field-oriented 3-axis translation and rotation</li>\n<li>Motor-level PWM scaling from user-defined PWM ranges or custom scaling functions</li>\n<li>Support for loading drivetrains from an XML file</li>\n</ul>\n<h2>Roadmap</h2>\n<ul>\n<li>Motion profiles</li>\n<li>Control loop</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7+/3.x</li>\n<li>Numpy</li>\n<li>lxml</li>\n</ul>\n<h2>Installation</h2>\n<p>Install SimpleDrivetrain from PyPI by opening a terminal and typing the following command:</p>\n<pre><code>$ pip install simpledrivetrain\n</code></pre>\n<h2>How to Use</h2>\n<h3>Import simpledrivetrain</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simpledrivetrain.simple_drivetrain</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleDrivetrain</span>\n</pre>\n<h3>Creating a SimpleDrivetrain object</h3>\n<pre><span class=\"n\">drivetrain</span> <span class=\"o\">=</span> <span class=\"n\">SimpleDrivetrain</span><span class=\"p\">()</span>\n</pre>\n<h3>Adding, removing, and accessing drive motors</h3>\n<ul>\n<li>Motors can be added to the drivetrain by calling the <code>add_new_motor</code>\nmethod and supplying:\n<ul>\n<li>The <code>name</code> of the motor, a unique string identifier</li>\n<li>The <code>position</code> of the motor relative to the drivetrain's\ncenter in the form of a 3D coordinate list e.g. [x, y, z]</li>\n<li>The motor's positive drive <code>direction</code> in the form of a 3D cartesian direction vector\ne.g. [x, y, z]</li>\n<li>Optionally, a boolean value <code>inverted</code> to set whether the motor is inverted</li>\n<li>Optionally, a 3-tuple <code>pwm_bounds</code> in the form of (FULL_REVERSE, FULL STOP, FULL_FORWARD)\nto which to scale the motor velocity</li>\n<li>Optionally, a function <code>pwm_scaling_func</code> which accepts a motor velocity in [-1, 1] and\nscales it to a desired pwm range</li>\n</ul>\n<pre><span class=\"n\">drivetrain</span><span class=\"o\">.</span><span class=\"n\">add_new_motor</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">direction</span><span class=\"p\">,</span> <span class=\"n\">inverted</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> \n                         <span class=\"n\">pwm_bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">),</span> <span class=\"n\">pwm_scaling_func</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>Motors can be removed from the drivetrain by calling the <code>remove_motor_by_name</code>\nmethod and supplying the <code>name</code> of the motor to remove\n<pre><span class=\"n\">drivetrain</span><span class=\"o\">.</span><span class=\"n\">remove_motor_by_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\nalternatively, a motor can also be removed from the drivetrain by calling the\n<code>remove_motor_by_index</code> method and supplying the motor's <code>index</code>\nof addition\n<pre><span class=\"n\">drivetrain</span><span class=\"o\">.</span><span class=\"n\">remove_motor_by_index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>Motors can be accessed by calling the <code>get_motor_by_name</code> method and supplying\nthe <code>name</code> of the motor to retrieve\n<pre><span class=\"n\">motor</span> <span class=\"o\">=</span> <span class=\"n\">drivetrain</span><span class=\"o\">.</span><span class=\"n\">get_motor_by_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\nalternatively, a motor can also be accessed by calling <code>get_motor_by_index</code>\nmethod and supplying the motor's <code>index</code> of addition\n<pre><span class=\"n\">motor</span> <span class=\"o\">=</span> <span class=\"n\">drivetrain</span><span class=\"o\">.</span><span class=\"n\">get_motor_by_index</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>Motors can also be accessed through the motors instance variable, which stores the\nmotors by order of addition in a list\n<pre><span class=\"n\">motorlist</span> <span class=\"o\">=</span> <span class=\"n\">drivetrain</span><span class=\"o\">.</span><span class=\"n\">motors</span>\n</pre>\n</li>\n<li>Alternatively, motors and orientation can be loaded from an xml file by calling\nthe <code>load_drivetrain_from_file</code> method and supplying the <code>filepath</code> string\npointing to the xml file:\n<pre><span class=\"n\">drivetrain</span><span class=\"o\">.</span><span class=\"n\">load_drivetrain_from_file</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n</pre>\nFor an example file, see <a href=\"tests/drivetrain_test.xml\" rel=\"nofollow\">Example SimpleDrivetrain xml FIle</a>.</li>\n</ul>\n<h3>Updating drivetrain orientation</h3>\n<pre><span class=\"n\">drivetrain</span><span class=\"o\">.</span><span class=\"n\">orientation</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">pitch</span><span class=\"p\">,</span> <span class=\"n\">roll</span><span class=\"p\">,</span> <span class=\"n\">yaw</span><span class=\"p\">)</span>    \n</pre>\n<h3>Getting motor velocities</h3>\n<ul>\n<li>Motor velocities scaled in [-1, 1], stored in a list by order of motor\naddition, can be calculated by calling the\n<code>get_motor_vels</code> method and supplying:\n<ul>\n<li><code>translation</code>, a 3D vector representing the drivetrain's desired\noverall velocity, e.g. [x, y, z]</li>\n<li><code>rotation</code>, a 3D vector representing the drivetrain's desired\nrotational velocity, e.g. [pitching, rolling, yawing]</li>\n<li><code>force_local_oriented</code>, a boolean value which, if set to true,\nignores current drivetrain orientation and calculates local-oriented\nmotor values. It is set to false by default.</li>\n</ul>\n<pre><span class=\"n\">drivetrain</span><span class=\"o\">.</span><span class=\"n\">get_motor_vels</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">,</span> <span class=\"n\">rotation</span><span class=\"p\">,</span> <span class=\"n\">force_local_oriented</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>Motor velocities scaled according to user-defined, motor-level PWM ranges\nor scaling functions, stored in a list by order of motor addition, can be\ncalculated by calling the <code>get_motor_vels_scaled</code> method and supplying\nthe same <code>translation</code>, <code>rotation</code>, and <code>force_local_oriented</code>\nparameters as the <code>get_motor_vels</code> method:\n<pre><span class=\"n\">drivetrain</span><span class=\"o\">.</span><span class=\"n\">get_motor_vels_scaled</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">,</span> <span class=\"n\">rotation</span><span class=\"p\">,</span> <span class=\"n\">force_local_oriented</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h2>License</h2>\n<p>SimpleDrivetrain is distributed under the terms of the <a href=\"https://choosealicense.com/licenses/mit/#\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 4471562, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0dcdd592db1d4944f8c9514b4ba52e2a", "sha256": "0e3a9e7ebb51ade75fed65c9417e33842393d08fe4086a63d4887f9741e584b4"}, "downloads": -1, "filename": "simpledrivetrain-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "0dcdd592db1d4944f8c9514b4ba52e2a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7213, "upload_time": "2018-07-25T03:02:09", "upload_time_iso_8601": "2018-07-25T03:02:09.073088Z", "url": "https://files.pythonhosted.org/packages/0c/c6/ea6e80c5a0f1d8fec5a78d1e51ec861d13d672efa32bfaeee53776659fc1/simpledrivetrain-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e926f6e6fa5cf3f5e16c056f6393ad2b", "sha256": "fa41133c1bd253f9e473753de07bf9ae68857c6c785f874ba7ba87baebcda2ae"}, "downloads": -1, "filename": "simpledrivetrain-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e926f6e6fa5cf3f5e16c056f6393ad2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6838, "upload_time": "2018-07-25T03:02:10", "upload_time_iso_8601": "2018-07-25T03:02:10.827077Z", "url": "https://files.pythonhosted.org/packages/2b/b5/009d14f96b0572d8ac5f52b632c8634d4d3c6f083286b907517c0be5d8cf/simpledrivetrain-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "55bd89e4259240366e544fa58f16c489", "sha256": "d11555c463a5d827283ba1b6dde6a2a07183ebaa17c49c273fa55a839e48795c"}, "downloads": -1, "filename": "simpledrivetrain-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "55bd89e4259240366e544fa58f16c489", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7211, "upload_time": "2018-07-25T03:14:23", "upload_time_iso_8601": "2018-07-25T03:14:23.749459Z", "url": "https://files.pythonhosted.org/packages/00/77/2e0aea4d9efe3d8eac1d14260519c2c73e4c4889ded47a075b3cf14f5196/simpledrivetrain-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d75e14b5992d63d3bd3f9bf141cac7f3", "sha256": "72d190ec8c4aeab330ac0b1e43c26993a2b494f8401fcf4c4081e5a4fd470cab"}, "downloads": -1, "filename": "simpledrivetrain-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d75e14b5992d63d3bd3f9bf141cac7f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6833, "upload_time": "2018-07-25T03:14:24", "upload_time_iso_8601": "2018-07-25T03:14:24.856302Z", "url": "https://files.pythonhosted.org/packages/5d/f7/ba86e7f5516c4b74a09204e39238ae7421301d921f92a9e51bfe0e9166cd/simpledrivetrain-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "264f4addfcc0a0c726ede01e349b24e3", "sha256": "05a48016d6d83ebfe11c507c9a43cccf717100fc74a53aead3357fd465df03b1"}, "downloads": -1, "filename": "simpledrivetrain-1.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "264f4addfcc0a0c726ede01e349b24e3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7246, "upload_time": "2018-11-10T01:49:00", "upload_time_iso_8601": "2018-11-10T01:49:00.335349Z", "url": "https://files.pythonhosted.org/packages/12/a1/7eaa1bb46db54c2277b1d8cfa444fb6a625142dcc9d3d2f98e58d3dfba8b/simpledrivetrain-1.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52283cd9f151f039386260a7c8ba8fb9", "sha256": "63ca23fd73ca32d0823b6c7bb2f8ae2f2d14aa180b273f486d5d9d7cf36a9fa1"}, "downloads": -1, "filename": "simpledrivetrain-1.0.2.tar.gz", "has_sig": false, "md5_digest": "52283cd9f151f039386260a7c8ba8fb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6882, "upload_time": "2018-11-10T01:49:01", "upload_time_iso_8601": "2018-11-10T01:49:01.633694Z", "url": "https://files.pythonhosted.org/packages/37/db/864f2b0901c27f592d43ac13adb55408a9dc2abd83ac818bd1a5e8bb3707/simpledrivetrain-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "264f4addfcc0a0c726ede01e349b24e3", "sha256": "05a48016d6d83ebfe11c507c9a43cccf717100fc74a53aead3357fd465df03b1"}, "downloads": -1, "filename": "simpledrivetrain-1.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "264f4addfcc0a0c726ede01e349b24e3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7246, "upload_time": "2018-11-10T01:49:00", "upload_time_iso_8601": "2018-11-10T01:49:00.335349Z", "url": "https://files.pythonhosted.org/packages/12/a1/7eaa1bb46db54c2277b1d8cfa444fb6a625142dcc9d3d2f98e58d3dfba8b/simpledrivetrain-1.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52283cd9f151f039386260a7c8ba8fb9", "sha256": "63ca23fd73ca32d0823b6c7bb2f8ae2f2d14aa180b273f486d5d9d7cf36a9fa1"}, "downloads": -1, "filename": "simpledrivetrain-1.0.2.tar.gz", "has_sig": false, "md5_digest": "52283cd9f151f039386260a7c8ba8fb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6882, "upload_time": "2018-11-10T01:49:01", "upload_time_iso_8601": "2018-11-10T01:49:01.633694Z", "url": "https://files.pythonhosted.org/packages/37/db/864f2b0901c27f592d43ac13adb55408a9dc2abd83ac818bd1a5e8bb3707/simpledrivetrain-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:51 2020"}