{"info": {"author": "Tomas Aparicio", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Lisp", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: http://i.imgur.com/sbWr5Xv.png\n   :width: 100%\n   :alt: siringa logo\n   :align: center\n\n\n|Build Status| |PyPI| |Coverage Status| |Documentation Status| |Stability| |Versions| |SayThanks|\n\nAbout\n-----\n\n``siringa`` (meaning ``syringe`` in Italian) is a minimalist, idiomatic `dependency injection`_ and `inversion of control`_ library\nfor Python_, implemented in Hy_, a homoiconic Lisp dialect for Python.\n\nTo get started, take a look to the `documentation`_, `API`_, `tutorial`_ and `examples`_.\n\nFeatures\n--------\n\n-  Simple, idiomatic and versatile `programmatic API`_.\n-  Annotation based dependency injection that is `PEP 3017`_ and `PEP 0484`_ friendly.\n-  First-class decorator driven dependency injection and registering.\n-  Ability to create multiple dependency containers.\n-  Hierarchical dependency containers based on inheritance.\n-  Dependency inference based on pattern-matching techniques.\n-  First-class support for dependency mocking for better testing.\n-  Detects cyclic dependencies (work in progress).\n-  Small and (almost) dependency-free library.\n-  Works with CPython 3+.\n\nDesign philosophy\n-----------------\n\n-  Code instrumentation should be non-intrusive and idiomatic.\n-  Explicitness over implicitness: dependencies and injections much be explicitly defined.\n-  Python idiomatic: embrace decorators and type annotations.\n-  Minimalism: less enables more.\n-  Uniformity: there is only one way to declare and consume dependencies.\n-  Predictability: developer intentions must persist based on explicitly defined intention.\n-  Domain agnostic: do not enforce any domain-specific pattern.\n\nInstallation\n------------\n\nUsing ``pip`` package manager:\n\n.. code-block:: bash\n\n    pip install --upgrade siringa\n\nOr install the latest sources from Github:\n\n.. code-block:: bash\n\n    pip install -e git+git://github.com/h2non/siringa.git#egg=siringa\n\n\nTutorial\n--------\n\nImporting siringa\n^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    import siringa\n\nInstrumenting dependencies\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``siringa`` embraces type hints/arguments annotation Python syntax for\ndependency inference and pattern matching.\n\n.. code-block:: python\n\n    @siringa.inject\n    def task(x, y, logger: '!Logger'):\n        logger.info('task called with arguments: {}, {}'.format(x, y))\n        return x * y\n\n\nYou can optionally annotate dependencies via ``siringa`` type annotations:\n\n.. code-block:: python\n\n    from siringa import A\n\n    @siringa.inject\n    def task(x, y, logger: A('Logger')):\n        logger.info('task called with arguments: {}, {}'.format(x, y))\n        return x * y\n\n\nFinally, for a DRYer approach you can simply annotate dependencies with ``!`` annotation flag.\n\nIn this case, the argument name expression will be used for dependency inference.\n\n.. code-block:: python\n\n    from siringa import A\n\n    @siringa.inject\n    def task(x, y, Logger: '!'):\n        Logger.info('task called with arguments: {}, {}'.format(x, y))\n        return x * y\n\n\nRegistering dependencies\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n``siringa`` allows you to rely on decorators for idiomatic dependencies registering.\n\nDependency name is dynamically inferred at registration time based on ``class`` or ``function`` name.\n\n.. code-block:: python\n\n    @siringa.register\n    class Logger(object):\n        logger = logging.getLogger('siringa')\n\n        @staticmethod\n        def info(msg, *args, **kw):\n            logger.info(msg, *args, **kw)\n\n\nHowever, you can define a custom dependency name by simply passing a ``string`` as first argument:\n\n.. code-block:: python\n\n    @siringa.register('MyCustomLogger')\n    class Logger(object):\n        ...\n\nFinally, you can register dependencies with a traditional function call, such as:\n\n.. code-block:: python\n\n    class Logger(object):\n        pass\n\n    siringa.register('MyCustomLogger', Logger)\n\n    class compute(x, y):\n        return x * y\n\n    siringa.register('multiply', compute)\n\n\nInvocation\n^^^^^^^^^^\n\n``siringa`` wraps callable object in the transparent and frictionless way abstracting things for developers.\n\nYou can invoke or instantiate any dependency injection instrumented object\nas you do traditionally in raw Python code and ``siringa`` will do the rest for you inferring and pattern-matching\nrequired dependencies accordingly for you.\n\nBelow is an example of how simple it is:\n\n.. code-block:: python\n\n    # Call our previously declared function in this tutorial.\n    # Here, siringa will transparently inject required dependencies accordingly,\n    # respecting the invokation arguments and order.\n    task(2, 2) # => 4\n\nLet's demostrate this with a featured example:\n\n.. code-block:: python\n\n    import siringa\n\n    @siringa.register\n    def mul(x, y):\n        return x * y\n\n    @siringa.register\n    def mul2(x, mul: '!mul'):\n        return mul(x, 2)\n\n    @siringa.register\n    def pow2(x):\n        return x ** 2\n\n    @siringa.inject\n    def compute(x, pow: '!pow2', mul: '!mul2'):\n        return pow(mul(x))\n\n    compute(2) # => 16\n\n\nYou can also use the invocation API in case that the target object\nwas not properly instrumented as dependency:\n\n.. code-block:: python\n\n    @siringa.register\n    def mul2(x):\n        return x * 2\n\n    # Note that the function was not instrumented yet!\n    def compute(x, mul: '!mul2'):\n        return mul(x)\n\n    siringa.invoke(compute, 2)\n\n\nCreate a new dependency container\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``siringa`` provides a built-in global dependency container for usability purposes,\nbut you can create as much containers as you want.\n\nIn the ``siringa`` idioms, this means creating a new dependency layer which provides its\nown container and dependency injection API, pretty much as the global package API.\n\nYou can create a new dependencies ``layer`` such as:\n\n.. code-block:: python\n\n    layer = siringa.Layer('app')\n\n    # Then you can use the standard API\n    layer.register('print', print)\n\n    # Then you can use the standard API\n    @layer.inject\n    def mul2(x, print: '!'):\n        print('Argument:', x)\n        return x * 2\n\n    mul2(x)\n\nA dependency layer can inherit from a parent dependency layer.\n\nThis is particularly useful in order to create a hierarchy of dependency layers\nwhere you can consume and inject dependencies from a parent container.\n\n.. code-block:: python\n\n    parent = siringa.Layer('parent')\n    child = siringa.Layer('child', parent)\n\n    # Register a sample dependency within parent\n    @parent.register\n    def mul2(x):\n        return x * 2\n\n    # Verify that the dependency is injectable from child layer\n    parent.is_injectable('mul2') # True\n    child.is_injectable('mul2') # True\n\n    @child.inject\n    def compute(x, mul: '!mul2'):\n        return mul(x)\n\n    compute(2) # => 2\n\nMocking dependencies\n^^^^^^^^^^^^^^^^^^^^\n\n``siringa`` allows you to define mocks for dependencies, which is particularly useful during testing:\n\n.. code-block:: python\n\n    @siringa.register\n    class DB(object):\n        def query(self, sql):\n            return ['john', 'mike']\n\n    @siringa.mock('DB')\n    class DBMock(object):\n        def query(self, sql):\n            return ['foo', 'bar']\n\n    @siringa.inject\n    def run(sql, db: '!DB'):\n        return db().query(sql)\n\n    # Test mock call\n    assert run('SELECT name FROM foo') == ['foo', 'bar']\n\n    # Once done, clear all the mocks\n    siringa.unregister_mock('DB')\n\n    # Or alternatively clear all the registed mocks within the container\n    siringa.clear_mocks()\n\n    # Test read call\n    assert run('SELECT name FROM foo') == ['john', 'mike']\n\n\n.. _Python: http://python.org\n.. _Hy: http://docs.hylang.org/en/latest/\n.. _`dependency injection`: https://en.wikipedia.org/wiki/Dependency_injection\n.. _`inversion of control`: https://en.wikipedia.org/wiki/Inversion_of_control\n.. _`documentation`: http://siringa.readthedocs.io\n.. _`examples`: http://siringa.readthedocs.io/en/latest/examples.html\n.. _`API`: http://siringa.readthedocs.io/en/latest/api.html\n.. _`programmatic API`: http://siringa.readthedocs.io/en/latest/api.html\n.. _`tutorial`: http://siringa.readthedocs.io/en/latest/index.html#tutorial\n.. _`PEP 3017`: https://www.python.org/dev/peps/pep-3107/\n.. _`PEP 0484`: https://www.python.org/dev/peps/pep-0484/\n\n.. |Build Status| image:: https://travis-ci.org/h2non/siringa.svg?branch=master\n   :target: https://travis-ci.org/h2non/siringa\n.. |PyPI| image:: https://img.shields.io/pypi/v/siringa.svg?maxAge=2592000?style=flat-square\n   :target: https://pypi.python.org/pypi/siringa\n.. |Coverage Status| image:: https://coveralls.io/repos/github/h2non/siringa/badge.svg?branch=master\n   :target: https://coveralls.io/github/h2non/siringa?branch=master\n.. |Documentation Status| image:: https://readthedocs.org/projects/siringa/badge/?version=latest\n   :target: http://siringa.readthedocs.io/en/latest/?badge=latest\n.. |Stability| image:: https://img.shields.io/pypi/status/siringa.svg\n   :target: https://pypi.python.org/pypi/siringa\n   :alt: Stability\n.. |Versions| image:: https://img.shields.io/pypi/pyversions/siringa.svg\n   :target: https://pypi.python.org/pypi/siringa\n   :alt: Python Versions\n.. |SayThanks| image:: https://img.shields.io/badge/Say%20Thanks!-%F0%9F%A6%89-1EAEDB.svg\n   :target: https://saythanks.io/to/h2non\n   :alt: Say Thanks\n\n\nHistory\n=======\n\nv0.1.3 / 2017-04-25\n-------------------\n\n  * fix(invoke): missing export symbol at public level\n  * refactor(docs): update disclaimer note\n  * fix(docs): remove unused tutorial.rst file\n  * refactor(Makefile): use --commit when bumping version\n\nv0.1.2 / 2017-04-25\n-------------------\n\n  * feat(examples): add inject flag example\n  * fix(injector): process inject flag \"!\" based annotations accordingly\n  * fix(register): return decorated injectable callable object, if needed\n  * fix(register): return decorated injectable callable object, if needed\n  * refactor(analyzer): use method access notation\n  * refactor(docs): typo in design philosophy section\n  * fix(docs): typo in rst syntax\n  * fix(examples): type on mocking example comment\n\nv0.1.1 / 2017-04-24\n-------------------\n\n  * fix(core): handle not present __init__ member in classes. feat(examples): add mocking example\n  * fix(docs): type in about section\n  * fix(setup.py): package description\n\nv0.1.0 (2017-04-23)\n-------------------\n\n* First version (beta).\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/h2non/siringa", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "siringa", "package_url": "https://pypi.org/project/siringa/", "platform": "any", "project_url": "https://pypi.org/project/siringa/", "project_urls": {"Homepage": "https://github.com/h2non/siringa"}, "release_url": "https://pypi.org/project/siringa/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Minimalist and idiomatic dependency injection library", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"siringa logo\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f56e14ef943e16a8c4cc252202b42e7afef80578/687474703a2f2f692e696d6775722e636f6d2f736257723558762e706e67\" width=\"100%\">\n<p><a href=\"https://travis-ci.org/h2non/siringa\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4db46f446a847c774b0ff7ac8f67cf85010b660e/68747470733a2f2f7472617669732d63692e6f72672f68326e6f6e2f736972696e67612e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/siringa\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/abab9412e1178b8a317e953a63c34811523017f7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736972696e67612e7376673f6d61784167653d323539323030303f7374796c653d666c61742d737175617265\"></a> <a href=\"https://coveralls.io/github/h2non/siringa?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b2756b3681d6752db21d7adfb070d484b98798a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f68326e6f6e2f736972696e67612f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://siringa.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ecfb989218c4d0913fdea397f34f0113757de03/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f736972696e67612f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://pypi.python.org/pypi/siringa\" rel=\"nofollow\"><img alt=\"Stability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0597aa5322eaf0cb6428213fdea68d9f2434763e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f736972696e67612e737667\"></a> <a href=\"https://pypi.python.org/pypi/siringa\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1bbbef7c8a0b288176bb944adc547e6a4fa3ec6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f736972696e67612e737667\"></a> <a href=\"https://saythanks.io/to/h2non\" rel=\"nofollow\"><img alt=\"Say Thanks\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f965ad180f91639bc9af1f210781edc077960c4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361792532305468616e6b73212d2546302539462541362538392d3145414544422e737667\"></a></p>\n<div id=\"about\">\n<h2>About</h2>\n<p><tt>siringa</tt> (meaning <tt>syringe</tt> in Italian) is a minimalist, idiomatic <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" rel=\"nofollow\">dependency injection</a> and <a href=\"https://en.wikipedia.org/wiki/Inversion_of_control\" rel=\"nofollow\">inversion of control</a> library\nfor <a href=\"http://python.org\" rel=\"nofollow\">Python</a>, implemented in <a href=\"http://docs.hylang.org/en/latest/\" rel=\"nofollow\">Hy</a>, a homoiconic Lisp dialect for Python.</p>\n<p>To get started, take a look to the <a href=\"http://siringa.readthedocs.io\" rel=\"nofollow\">documentation</a>, <a href=\"http://siringa.readthedocs.io/en/latest/api.html\" rel=\"nofollow\">API</a>, <a href=\"http://siringa.readthedocs.io/en/latest/index.html#tutorial\" rel=\"nofollow\">tutorial</a> and <a href=\"http://siringa.readthedocs.io/en/latest/examples.html\" rel=\"nofollow\">examples</a>.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Simple, idiomatic and versatile <a href=\"http://siringa.readthedocs.io/en/latest/api.html\" rel=\"nofollow\">programmatic API</a>.</li>\n<li>Annotation based dependency injection that is <a href=\"https://www.python.org/dev/peps/pep-3107/\" rel=\"nofollow\">PEP 3017</a> and <a href=\"https://www.python.org/dev/peps/pep-0484/\" rel=\"nofollow\">PEP 0484</a> friendly.</li>\n<li>First-class decorator driven dependency injection and registering.</li>\n<li>Ability to create multiple dependency containers.</li>\n<li>Hierarchical dependency containers based on inheritance.</li>\n<li>Dependency inference based on pattern-matching techniques.</li>\n<li>First-class support for dependency mocking for better testing.</li>\n<li>Detects cyclic dependencies (work in progress).</li>\n<li>Small and (almost) dependency-free library.</li>\n<li>Works with CPython 3+.</li>\n</ul>\n</div>\n<div id=\"design-philosophy\">\n<h2>Design philosophy</h2>\n<ul>\n<li>Code instrumentation should be non-intrusive and idiomatic.</li>\n<li>Explicitness over implicitness: dependencies and injections much be explicitly defined.</li>\n<li>Python idiomatic: embrace decorators and type annotations.</li>\n<li>Minimalism: less enables more.</li>\n<li>Uniformity: there is only one way to declare and consume dependencies.</li>\n<li>Predictability: developer intentions must persist based on explicitly defined intention.</li>\n<li>Domain agnostic: do not enforce any domain-specific pattern.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using <tt>pip</tt> package manager:</p>\n<pre>pip install --upgrade siringa\n</pre>\n<p>Or install the latest sources from Github:</p>\n<pre>pip install -e git+git://github.com/h2non/siringa.git#egg<span class=\"o\">=</span>siringa\n</pre>\n</div>\n<div id=\"tutorial\">\n<h2>Tutorial</h2>\n<div id=\"importing-siringa\">\n<h3>Importing siringa</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">siringa</span>\n</pre>\n</div>\n<div id=\"instrumenting-dependencies\">\n<h3>Instrumenting dependencies</h3>\n<p><tt>siringa</tt> embraces type hints/arguments annotation Python syntax for\ndependency inference and pattern matching.</p>\n<pre><span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">task</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"s1\">'!Logger'</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'task called with arguments: </span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span>\n</pre>\n<p>You can optionally annotate dependencies via <tt>siringa</tt> type annotations:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">siringa</span> <span class=\"kn\">import</span> <span class=\"n\">A</span>\n\n<span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">task</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"s1\">'Logger'</span><span class=\"p\">)):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'task called with arguments: </span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span>\n</pre>\n<p>Finally, for a DRYer approach you can simply annotate dependencies with <tt>!</tt> annotation flag.</p>\n<p>In this case, the argument name expression will be used for dependency inference.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">siringa</span> <span class=\"kn\">import</span> <span class=\"n\">A</span>\n\n<span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">task</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">Logger</span><span class=\"p\">:</span> <span class=\"s1\">'!'</span><span class=\"p\">):</span>\n    <span class=\"n\">Logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'task called with arguments: </span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span>\n</pre>\n</div>\n<div id=\"registering-dependencies\">\n<h3>Registering dependencies</h3>\n<p><tt>siringa</tt> allows you to rely on decorators for idiomatic dependencies registering.</p>\n<p>Dependency name is dynamically inferred at registration time based on <tt>class</tt> or <tt>function</tt> name.</p>\n<pre><span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">class</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'siringa'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n</pre>\n<p>However, you can define a custom dependency name by simply passing a <tt>string</tt> as first argument:</p>\n<pre><span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'MyCustomLogger'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Finally, you can register dependencies with a traditional function call, such as:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">siringa</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'MyCustomLogger'</span><span class=\"p\">,</span> <span class=\"n\">Logger</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">compute</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span>\n\n<span class=\"n\">siringa</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'multiply'</span><span class=\"p\">,</span> <span class=\"n\">compute</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"invocation\">\n<h3>Invocation</h3>\n<p><tt>siringa</tt> wraps callable object in the transparent and frictionless way abstracting things for developers.</p>\n<p>You can invoke or instantiate any dependency injection instrumented object\nas you do traditionally in raw Python code and <tt>siringa</tt> will do the rest for you inferring and pattern-matching\nrequired dependencies accordingly for you.</p>\n<p>Below is an example of how simple it is:</p>\n<pre><span class=\"c1\"># Call our previously declared function in this tutorial.</span>\n<span class=\"c1\"># Here, siringa will transparently inject required dependencies accordingly,</span>\n<span class=\"c1\"># respecting the invokation arguments and order.</span>\n<span class=\"n\">task</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 4</span>\n</pre>\n<p>Let\u2019s demostrate this with a featured example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">siringa</span>\n\n<span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span>\n\n<span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mul</span><span class=\"p\">:</span> <span class=\"s1\">'!mul'</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">pow2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n\n<span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"nb\">pow</span><span class=\"p\">:</span> <span class=\"s1\">'!pow2'</span><span class=\"p\">,</span> <span class=\"n\">mul</span><span class=\"p\">:</span> <span class=\"s1\">'!mul2'</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">pow</span><span class=\"p\">(</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 16</span>\n</pre>\n<p>You can also use the invocation API in case that the target object\nwas not properly instrumented as dependency:</p>\n<pre><span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># Note that the function was not instrumented yet!</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mul</span><span class=\"p\">:</span> <span class=\"s1\">'!mul2'</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">siringa</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span><span class=\"n\">compute</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"create-a-new-dependency-container\">\n<h3>Create a new dependency container</h3>\n<p><tt>siringa</tt> provides a built-in global dependency container for usability purposes,\nbut you can create as much containers as you want.</p>\n<p>In the <tt>siringa</tt> idioms, this means creating a new dependency layer which provides its\nown container and dependency injection API, pretty much as the global package API.</p>\n<p>You can create a new dependencies <tt>layer</tt> such as:</p>\n<pre><span class=\"n\">layer</span> <span class=\"o\">=</span> <span class=\"n\">siringa</span><span class=\"o\">.</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Then you can use the standard API</span>\n<span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'print'</span><span class=\"p\">,</span> <span class=\"nb\">print</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Then you can use the standard API</span>\n<span class=\"nd\">@layer</span><span class=\"o\">.</span><span class=\"n\">inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"nb\">print</span><span class=\"p\">:</span> <span class=\"s1\">'!'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Argument:'</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">mul2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p>A dependency layer can inherit from a parent dependency layer.</p>\n<p>This is particularly useful in order to create a hierarchy of dependency layers\nwhere you can consume and inject dependencies from a parent container.</p>\n<pre><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">siringa</span><span class=\"o\">.</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">'parent'</span><span class=\"p\">)</span>\n<span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">siringa</span><span class=\"o\">.</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"s1\">'child'</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Register a sample dependency within parent</span>\n<span class=\"nd\">@parent</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">mul2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># Verify that the dependency is injectable from child layer</span>\n<span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">is_injectable</span><span class=\"p\">(</span><span class=\"s1\">'mul2'</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n<span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">is_injectable</span><span class=\"p\">(</span><span class=\"s1\">'mul2'</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n\n<span class=\"nd\">@child</span><span class=\"o\">.</span><span class=\"n\">inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mul</span><span class=\"p\">:</span> <span class=\"s1\">'!mul2'</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 2</span>\n</pre>\n</div>\n<div id=\"mocking-dependencies\">\n<h3>Mocking dependencies</h3>\n<p><tt>siringa</tt> allows you to define mocks for dependencies, which is particularly useful during testing:</p>\n<pre><span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">class</span> <span class=\"nc\">DB</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s1\">'john'</span><span class=\"p\">,</span> <span class=\"s1\">'mike'</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"s1\">'DB'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">DBMock</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@siringa</span><span class=\"o\">.</span><span class=\"n\">inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"s1\">'!DB'</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">db</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test mock call</span>\n<span class=\"k\">assert</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'SELECT name FROM foo'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Once done, clear all the mocks</span>\n<span class=\"n\">siringa</span><span class=\"o\">.</span><span class=\"n\">unregister_mock</span><span class=\"p\">(</span><span class=\"s1\">'DB'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or alternatively clear all the registed mocks within the container</span>\n<span class=\"n\">siringa</span><span class=\"o\">.</span><span class=\"n\">clear_mocks</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Test read call</span>\n<span class=\"k\">assert</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'SELECT name FROM foo'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">'john'</span><span class=\"p\">,</span> <span class=\"s1\">'mike'</span><span class=\"p\">]</span>\n</pre>\n<div id=\"history\">\n<h4>History</h4>\n</div>\n</div>\n</div>\n<div id=\"v0-1-3-2017-04-25\">\n<h2>v0.1.3 / 2017-04-25</h2>\n<blockquote>\n<ul>\n<li>fix(invoke): missing export symbol at public level</li>\n<li>refactor(docs): update disclaimer note</li>\n<li>fix(docs): remove unused tutorial.rst file</li>\n<li>refactor(Makefile): use \u2013commit when bumping version</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v0-1-2-2017-04-25\">\n<h2>v0.1.2 / 2017-04-25</h2>\n<blockquote>\n<ul>\n<li>feat(examples): add inject flag example</li>\n<li>fix(injector): process inject flag \u201c!\u201d based annotations accordingly</li>\n<li>fix(register): return decorated injectable callable object, if needed</li>\n<li>fix(register): return decorated injectable callable object, if needed</li>\n<li>refactor(analyzer): use method access notation</li>\n<li>refactor(docs): typo in design philosophy section</li>\n<li>fix(docs): typo in rst syntax</li>\n<li>fix(examples): type on mocking example comment</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v0-1-1-2017-04-24\">\n<h2>v0.1.1 / 2017-04-24</h2>\n<blockquote>\n<ul>\n<li>fix(core): handle not present __init__ member in classes. feat(examples): add mocking example</li>\n<li>fix(docs): type in about section</li>\n<li>fix(setup.py): package description</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v0-1-0-2017-04-23\">\n<h2>v0.1.0 (2017-04-23)</h2>\n<ul>\n<li>First version (beta).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2828878, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "533f5756f38ea7ce492ffe6ec42d81a5", "sha256": "a839fa6a5048723535ddd0bdf695ea609542b670794dfcfb5c6d7a9ce09c8717"}, "downloads": -1, "filename": "siringa-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "533f5756f38ea7ce492ffe6ec42d81a5", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 15994, "upload_time": "2017-04-23T22:26:56", "upload_time_iso_8601": "2017-04-23T22:26:56.386326Z", "url": "https://files.pythonhosted.org/packages/7b/41/44912158191263a16912d802d8d9fe58362e33e2c28c7f3a2ff84f09f833/siringa-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35d731f5b0a90c687ba5c688d811ccbe", "sha256": "02604ed0f4a4b24e8c5d828be2e6d46befbc44ace5cd5cea1feb06b8a604df8a"}, "downloads": -1, "filename": "siringa-0.1.0.tar.gz", "has_sig": false, "md5_digest": "35d731f5b0a90c687ba5c688d811ccbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8202, "upload_time": "2017-04-23T22:26:51", "upload_time_iso_8601": "2017-04-23T22:26:51.258420Z", "url": "https://files.pythonhosted.org/packages/93/47/eff26a4e620297ba606519f56193935d58d9f7b3ee066e72b50a44aa4b09/siringa-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1a3609a550635477822872321583b46b", "sha256": "e25cd0b18eb58d26322ea6fa26a4984e5f42f1ee669a4e34cce3de93ac4ee183"}, "downloads": -1, "filename": "siringa-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1a3609a550635477822872321583b46b", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 16321, "upload_time": "2017-04-23T23:18:36", "upload_time_iso_8601": "2017-04-23T23:18:36.187886Z", "url": "https://files.pythonhosted.org/packages/6f/45/b59dc61905956372eaa0778c484b5b8fe7011aa8d654f4033a34d49d26c8/siringa-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b7b6414b0763d9cbe52251759679cb1", "sha256": "6677c87af125f9628110be7ecb08b4c1720d0137ca91c802ac3866f9a344883a"}, "downloads": -1, "filename": "siringa-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7b7b6414b0763d9cbe52251759679cb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8494, "upload_time": "2017-04-23T23:18:31", "upload_time_iso_8601": "2017-04-23T23:18:31.855644Z", "url": "https://files.pythonhosted.org/packages/7a/ad/b9c3229ab245b872d85e87b5eb775875422fb11a4b987e26579e8e7d41c5/siringa-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "87ab5fdbf64a46b1c9f4f44991e68a9f", "sha256": "5885754dae4759f3125fd7b88a9547371c34d195c84ed2bb63e819822c4c32a0"}, "downloads": -1, "filename": "siringa-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "87ab5fdbf64a46b1c9f4f44991e68a9f", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 16668, "upload_time": "2017-04-25T10:29:41", "upload_time_iso_8601": "2017-04-25T10:29:41.521177Z", "url": "https://files.pythonhosted.org/packages/39/e1/7e0a0d59443d666791900c9758d97c88349b62392e75458ed50ae3e60ee4/siringa-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e0f52effcddc1df0600e7bd46cc0d04", "sha256": "41b36dc9eb1da814f2500e2a428eb97e047a0e0b40fbe59ba1d5ff679ccf3fe5"}, "downloads": -1, "filename": "siringa-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4e0f52effcddc1df0600e7bd46cc0d04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8778, "upload_time": "2017-04-25T10:29:36", "upload_time_iso_8601": "2017-04-25T10:29:36.643603Z", "url": "https://files.pythonhosted.org/packages/25/c4/96901b9bb633408ac44ae5f1c1516f046cfc5ccd728eed73049139fff4c3/siringa-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "a5a1b5379aabedb9caf613f29634844e", "sha256": "698c9951885cdf4b99970dd702232a2a6c34293d1a1d23c02774d609d8d5733d"}, "downloads": -1, "filename": "siringa-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a5a1b5379aabedb9caf613f29634844e", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 16774, "upload_time": "2017-04-25T13:46:38", "upload_time_iso_8601": "2017-04-25T13:46:38.879265Z", "url": "https://files.pythonhosted.org/packages/96/01/3f44bbcf82cb6fdbb4a8b49077301455775e1dea04f62999e4c0228a77bd/siringa-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe8aa5afd9534b89272752e38bb1e79c", "sha256": "54f40ce7c3722fcf96d128b2c4e99b8f91124c8cee41b4d2321d1715238e6fb7"}, "downloads": -1, "filename": "siringa-0.1.3.tar.gz", "has_sig": false, "md5_digest": "fe8aa5afd9534b89272752e38bb1e79c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8934, "upload_time": "2017-04-25T13:46:34", "upload_time_iso_8601": "2017-04-25T13:46:34.305573Z", "url": "https://files.pythonhosted.org/packages/b6/94/8d5c6f3855ce0848d6cff7a555ed50bbd0099937c09ae1bfe4a6729c2f06/siringa-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a5a1b5379aabedb9caf613f29634844e", "sha256": "698c9951885cdf4b99970dd702232a2a6c34293d1a1d23c02774d609d8d5733d"}, "downloads": -1, "filename": "siringa-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a5a1b5379aabedb9caf613f29634844e", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 16774, "upload_time": "2017-04-25T13:46:38", "upload_time_iso_8601": "2017-04-25T13:46:38.879265Z", "url": "https://files.pythonhosted.org/packages/96/01/3f44bbcf82cb6fdbb4a8b49077301455775e1dea04f62999e4c0228a77bd/siringa-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe8aa5afd9534b89272752e38bb1e79c", "sha256": "54f40ce7c3722fcf96d128b2c4e99b8f91124c8cee41b4d2321d1715238e6fb7"}, "downloads": -1, "filename": "siringa-0.1.3.tar.gz", "has_sig": false, "md5_digest": "fe8aa5afd9534b89272752e38bb1e79c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8934, "upload_time": "2017-04-25T13:46:34", "upload_time_iso_8601": "2017-04-25T13:46:34.305573Z", "url": "https://files.pythonhosted.org/packages/b6/94/8d5c6f3855ce0848d6cff7a555ed50bbd0099937c09ae1bfe4a6729c2f06/siringa-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:23 2020"}