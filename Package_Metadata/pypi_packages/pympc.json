{"info": {"author": "Joe Lyman", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "pympc\n=====\n\nperform checks for the presence of minor bodies at astronomical locations for a given epoch.\n\n### installation\n\n`pip install pympc`\n\nor download source and:\n\n`python setup.py install`\n\n### setup\nfrst import the package and grab the orbit element catalogue - this must be done at least once prior to doing any searches\nand can be run to overwrite the catalogues with the latest versions. the default call signature is shown\n```\n>>> import pympc\n>>> pympc.update_catalogue()\n```\n\nby default two catalogues will be downloaded: the [`mpcorb`](https://www.minorplanetcenter.net/data) catalogue \nfrom the Minor Planet Center, and [`astorb`](https://asteroid.lowell.edu/main/astorb) from Lowell Observatory. this \nbehaviour can be changed using the `cat` argument.\n\nthe Near Earth Asteroid catalogue will be downloaded and used to update the `mpcorb` entries based on the value of the\n `include_nea` argument.\n \n it will create a csv file for each catalogue downloaded in the \n [xephem database format](http://www.clearskyinstitute.com/xephem/help/xephem.html#mozTocId468501).\n\n##### example 1 (searching)\ndefine our search location, epoch and radius and run the check\n```\n>>> import astropy.units as u\n>>> from astropy.time import Time\n>>> ra = 230.028 * u.deg\n>>> dec = -11.774 * u.deg\n>>> epoch = Time(\"2019-01-01T00:00\")\n>>> search_radius = 0.5 * u.arcmin\n>>> pympc.minor_planet_check(ra, dec, epoch, search_radius)\n```\n\n\n##### example 2 (assumed units)\nhere we use float arguments, and the program assumes the units (see `pympc.minor_planet_check()` docstring)\n```\n>>> ra = 230.028  # assumed degrees\n>>> dec = -11.774  # assumed degrees\n>>> epoch = 58484.  # assumed MJD\n>>> search_radius = 30  # assumed arcseconds\n>>> pympc.minor_planet_check(ra, dec, epoch, search_radius)\n```\n\n##### example 3 (using a specific catalogue)\nto use a specific orbit catalogue, specify the location of the xephem database , e.g.:\n\n```\nminor_planet_check(ra, dec, epoch, search_radius, xephem_filepath='/path/to/mpcorb_xphem.csv')\n```\n\nif omitted, it will attempt to use `/tmp/astorb_xephem.csv`.\n\n### speed and multiprocessing\nthe check should take of order a second or two, depending on multiprocessing capabilities.\n\nthe private function which actually performs the calculation is `_minor_planet_check()` (note leading underscore).\nthis can be called to avoid the overhead associated with converting input arguments to `minor_planet_check()`, if\nyou can provide them directly as required (see `_minor_planet_check()` docstring).\n\nby default the program will calculate positions of bodies in the catalogue multiprocessed. to switch this off set\n`chunk_size = 0`, i.e.:\n\n```\n>>> pympc.minor_planet_check(ra, dec, epoch, search_radius, chunk_size=0)\n```\n\n### limitations\nthe orbits are propagated following [xephem](http://www.clearskyinstitute.com/xephem) (via the \n[pyephem](https://rhodesmill.org/pyephem/) package), and this does not account for perturbations of the orbits. thus \nthe accuracy of the position is dependant on the time difference between the epoch of the orbit elements and the epoch \nat which the search is being performed. epoch differences between orbital elements calculation and observation of \naround a month or two should be fine for typical positional accuracies of a few arcsecond for most minor bodies - note\nhowever that a small number of bodies (those under going strong perturbations) may be quite inaccurate (arcminutes).\n\ncurrently the epoch of the orbit elements is visible in the xephem db strings returned by `minor_planet_check()` as a\ndecimal year format (e.g. ..,2019.317808,..). some diagnostic information and warning when using large time differences\nis to be implemented.\n\nthe filtering of matches based on magnitude via `max_mag` argument to `minor_planet_check()` is limited by the accuracy \nof the magnitude information in the database so some buffer should be applied to the desired magnitude cutoff to allow \nfor this.\n\n### acknowledgments\nthis package makes use of data and/or services provided by the International Astronomical Union's \n[Minor Planet Center](https://www.minorplanetcenter.net).\n\norbit elements are also sourced from [Lowell Observatory](https://asteroid.lowell.edu/main/), which is funded by the \nLowell Observatory Endowment and NASA PDART grant NNX16AG52G.\n\n\nbased from a package developed by Chris Klein and Duncan Galloway.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Lyalpha/pympc/archive/v0.4.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lyalpha/pympc", "keywords": "", "license": "GNU General Public License v3 (GPLv3)", "maintainer": "", "maintainer_email": "", "name": "pympc", "package_url": "https://pypi.org/project/pympc/", "platform": "", "project_url": "https://pypi.org/project/pympc/", "project_urls": {"Download": "https://github.com/Lyalpha/pympc/archive/v0.4.1.tar.gz", "Homepage": "https://github.com/lyalpha/pympc"}, "release_url": "https://pypi.org/project/pympc/0.4.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "minor planet checking", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pympc</h1>\n<p>perform checks for the presence of minor bodies at astronomical locations for a given epoch.</p>\n<h3>installation</h3>\n<p><code>pip install pympc</code></p>\n<p>or download source and:</p>\n<p><code>python setup.py install</code></p>\n<h3>setup</h3>\n<p>frst import the package and grab the orbit element catalogue - this must be done at least once prior to doing any searches\nand can be run to overwrite the catalogues with the latest versions. the default call signature is shown</p>\n<pre><code>&gt;&gt;&gt; import pympc\n&gt;&gt;&gt; pympc.update_catalogue()\n</code></pre>\n<p>by default two catalogues will be downloaded: the <a href=\"https://www.minorplanetcenter.net/data\" rel=\"nofollow\"><code>mpcorb</code></a> catalogue\nfrom the Minor Planet Center, and <a href=\"https://asteroid.lowell.edu/main/astorb\" rel=\"nofollow\"><code>astorb</code></a> from Lowell Observatory. this\nbehaviour can be changed using the <code>cat</code> argument.</p>\n<p>the Near Earth Asteroid catalogue will be downloaded and used to update the <code>mpcorb</code> entries based on the value of the\n<code>include_nea</code> argument.</p>\n<p>it will create a csv file for each catalogue downloaded in the\n<a href=\"http://www.clearskyinstitute.com/xephem/help/xephem.html#mozTocId468501\" rel=\"nofollow\">xephem database format</a>.</p>\n<h5>example 1 (searching)</h5>\n<p>define our search location, epoch and radius and run the check</p>\n<pre><code>&gt;&gt;&gt; import astropy.units as u\n&gt;&gt;&gt; from astropy.time import Time\n&gt;&gt;&gt; ra = 230.028 * u.deg\n&gt;&gt;&gt; dec = -11.774 * u.deg\n&gt;&gt;&gt; epoch = Time(\"2019-01-01T00:00\")\n&gt;&gt;&gt; search_radius = 0.5 * u.arcmin\n&gt;&gt;&gt; pympc.minor_planet_check(ra, dec, epoch, search_radius)\n</code></pre>\n<h5>example 2 (assumed units)</h5>\n<p>here we use float arguments, and the program assumes the units (see <code>pympc.minor_planet_check()</code> docstring)</p>\n<pre><code>&gt;&gt;&gt; ra = 230.028  # assumed degrees\n&gt;&gt;&gt; dec = -11.774  # assumed degrees\n&gt;&gt;&gt; epoch = 58484.  # assumed MJD\n&gt;&gt;&gt; search_radius = 30  # assumed arcseconds\n&gt;&gt;&gt; pympc.minor_planet_check(ra, dec, epoch, search_radius)\n</code></pre>\n<h5>example 3 (using a specific catalogue)</h5>\n<p>to use a specific orbit catalogue, specify the location of the xephem database , e.g.:</p>\n<pre><code>minor_planet_check(ra, dec, epoch, search_radius, xephem_filepath='/path/to/mpcorb_xphem.csv')\n</code></pre>\n<p>if omitted, it will attempt to use <code>/tmp/astorb_xephem.csv</code>.</p>\n<h3>speed and multiprocessing</h3>\n<p>the check should take of order a second or two, depending on multiprocessing capabilities.</p>\n<p>the private function which actually performs the calculation is <code>_minor_planet_check()</code> (note leading underscore).\nthis can be called to avoid the overhead associated with converting input arguments to <code>minor_planet_check()</code>, if\nyou can provide them directly as required (see <code>_minor_planet_check()</code> docstring).</p>\n<p>by default the program will calculate positions of bodies in the catalogue multiprocessed. to switch this off set\n<code>chunk_size = 0</code>, i.e.:</p>\n<pre><code>&gt;&gt;&gt; pympc.minor_planet_check(ra, dec, epoch, search_radius, chunk_size=0)\n</code></pre>\n<h3>limitations</h3>\n<p>the orbits are propagated following <a href=\"http://www.clearskyinstitute.com/xephem\" rel=\"nofollow\">xephem</a> (via the\n<a href=\"https://rhodesmill.org/pyephem/\" rel=\"nofollow\">pyephem</a> package), and this does not account for perturbations of the orbits. thus\nthe accuracy of the position is dependant on the time difference between the epoch of the orbit elements and the epoch\nat which the search is being performed. epoch differences between orbital elements calculation and observation of\naround a month or two should be fine for typical positional accuracies of a few arcsecond for most minor bodies - note\nhowever that a small number of bodies (those under going strong perturbations) may be quite inaccurate (arcminutes).</p>\n<p>currently the epoch of the orbit elements is visible in the xephem db strings returned by <code>minor_planet_check()</code> as a\ndecimal year format (e.g. ..,2019.317808,..). some diagnostic information and warning when using large time differences\nis to be implemented.</p>\n<p>the filtering of matches based on magnitude via <code>max_mag</code> argument to <code>minor_planet_check()</code> is limited by the accuracy\nof the magnitude information in the database so some buffer should be applied to the desired magnitude cutoff to allow\nfor this.</p>\n<h3>acknowledgments</h3>\n<p>this package makes use of data and/or services provided by the International Astronomical Union's\n<a href=\"https://www.minorplanetcenter.net\" rel=\"nofollow\">Minor Planet Center</a>.</p>\n<p>orbit elements are also sourced from <a href=\"https://asteroid.lowell.edu/main/\" rel=\"nofollow\">Lowell Observatory</a>, which is funded by the\nLowell Observatory Endowment and NASA PDART grant NNX16AG52G.</p>\n<p>based from a package developed by Chris Klein and Duncan Galloway.</p>\n\n          </div>"}, "last_serial": 6577717, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "04aa40469e3e57ea043db3f044a68f2e", "sha256": "651dc87563e6f9d050a8799ce2127b1c73e85217f846d06b6c49f27c07dafeff"}, "downloads": -1, "filename": "pympc-0.2.tar.gz", "has_sig": false, "md5_digest": "04aa40469e3e57ea043db3f044a68f2e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5485, "upload_time": "2019-10-03T14:32:56", "upload_time_iso_8601": "2019-10-03T14:32:56.068741Z", "url": "https://files.pythonhosted.org/packages/04/ca/7a1b68207fcff9c1930d3b9e2e608e474ca5fe07d7400b7ed2716566eb09/pympc-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "162487c550b0700a87f02f7ca4e62abd", "sha256": "c9005d0fe4295f07a790fd503553efc8e71b3a19afe4508f67bcc0f5176b1cb4"}, "downloads": -1, "filename": "pympc-0.3.tar.gz", "has_sig": false, "md5_digest": "162487c550b0700a87f02f7ca4e62abd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6083, "upload_time": "2020-01-30T16:42:58", "upload_time_iso_8601": "2020-01-30T16:42:58.334287Z", "url": "https://files.pythonhosted.org/packages/a9/29/35777dc299f792da962adeb9e0349620a7f3e56447f983e1690334090277/pympc-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "3876bdeb72a4dc625a8eab4c3833c41f", "sha256": "364a9124bc6b7dff258106c6151586679c428703a8c523349d4c452fa116b8b9"}, "downloads": -1, "filename": "pympc-0.4.tar.gz", "has_sig": false, "md5_digest": "3876bdeb72a4dc625a8eab4c3833c41f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7119, "upload_time": "2020-02-05T15:27:46", "upload_time_iso_8601": "2020-02-05T15:27:46.722405Z", "url": "https://files.pythonhosted.org/packages/b0/5c/de63a9c8984ee4ff4303d05703ec1534e498f6fb002695ca8b310b385345/pympc-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "25675e1fd1dca37eae8cf55b08685e0c", "sha256": "a19aada509d2c587da589938395e7dbcf2e4bbd6f431e697cb2e81dd584cfa7f"}, "downloads": -1, "filename": "pympc-0.4.1.tar.gz", "has_sig": false, "md5_digest": "25675e1fd1dca37eae8cf55b08685e0c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7225, "upload_time": "2020-02-05T19:26:37", "upload_time_iso_8601": "2020-02-05T19:26:37.436441Z", "url": "https://files.pythonhosted.org/packages/ba/8e/0082957c9e137c6d6080bf0af152d68794a459a282d7ff9fd67b88647036/pympc-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25675e1fd1dca37eae8cf55b08685e0c", "sha256": "a19aada509d2c587da589938395e7dbcf2e4bbd6f431e697cb2e81dd584cfa7f"}, "downloads": -1, "filename": "pympc-0.4.1.tar.gz", "has_sig": false, "md5_digest": "25675e1fd1dca37eae8cf55b08685e0c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7225, "upload_time": "2020-02-05T19:26:37", "upload_time_iso_8601": "2020-02-05T19:26:37.436441Z", "url": "https://files.pythonhosted.org/packages/ba/8e/0082957c9e137c6d6080bf0af152d68794a459a282d7ff9fd67b88647036/pympc-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:40 2020"}