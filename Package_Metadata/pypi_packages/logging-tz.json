{"info": {"author": "Wim Glenn", "author_email": "hey@wimglenn.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2 :: Only", "Topic :: Software Development :: Libraries", "Topic :: System :: Logging"], "description": "Using local time in Python2 logging\n===================================\n\nPython 2 logging module doesn't support using a timezone offset ``%z`` in the datetime format string.  An example failure mode is shown below:\n\n.. code-block:: python\n\n   import logging\n   datefmt = '%Y-%m-%d %H:%M:%S%z'\n   logging.basicConfig(format='%(asctime)s %(message)s', datefmt=datefmt)\n   logging.warning(\"Dude, where's my tzinfo?\")  # it's about 6.20 pm here in Chicago\n   # 2017-02-27 18:23:05+0000 Dude, where's my tzinfo?\n                        ^^^^^\n\nSimply omitting the time zone offset would perhaps have been admissible, or perhaps even simply refusing to localize and just logging in UTC, but specifying the localized time **and** specifying a zero offset is certainly wrong.  The part marked ``^`` is incorrect, an offset timestamp should have looked more like this one:\n\n.. code-block:: python\n\n   import pytz\n   from datetime import datetime\n   chicago_now = datetime.now(tz=pytz.timezone('America/Chicago'))\n   print chicago_now.strftime(datefmt)\n   # 2017-02-27 18:23:13-0600\n\nIndeed, that's how the logging output *does* look if run under Python 3.  But in Python 2, the ``%z`` directive is dropped.  This module provides a ``LocalFormatter`` intended as a drop-in replacement, to provide the correct handling of time zone offsets under Python 2:\n\n.. code-block:: python\n\n   import logging, logging_tz\n   datefmt = '%Y-%m-%d %H:%M:%S%z'\n   logger = logging.getLogger('wat')\n   handler = logging.StreamHandler()\n   formatter = logging_tz.LocalFormatter(fmt='%(asctime)s %(message)s', datefmt=datefmt)\n   handler.setFormatter(formatter)\n   logger.addHandler(handler)\n   logger.warning(\"Ah, there's my tzinfo!\")\n   # 2017-02-27 18:25:53-0600 Ah, there's my tzinfo!\n\nAdditionally a ``ChicagoFormatter`` is offered as a convenience, to ease the pain for anyone insane enough to run their backend on CST instead of UTC.\n\n\nFAQ\n---\n\nQ:\n  How to install this library?\nA:\n  ``pip install logging_tz`` and then you can just use a ``logging_tz.LocalFormatter`` instead of the ``logging.Formatter``.\n\n\nQ:\n  You should log in UTC.  Why would you log in local time anyway?\nA:\n  `Yeah, I guess <http://yellerapp.com/posts/2015-01-12-the-worst-server-setup-you-can-make.html>`_.  Although handling the date format correctly is at least better than mucking it up completely.\n\n\nQ:\n  Is that a bug in Python?\nA:\n  Hmm, arguably not, because the ``%z`` directive for time zone offset is not listed on the ``time.strftime`` table in the `Python 2 documentation <https://docs.python.org/2/library/time.html#time.strftime>`_.  It is `there in the Python 3 docs <https://docs.python.org/3/library/time.html#time.strftime>`_, though.\n\n\nQ:\n  Did people really ask you these questions?  I bet you just made them up for the FAQ.\nA:\n  That's a very good question - it's one I've frequently asked myself, in fact.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wimglenn/logging_tz", "keywords": "logging,datetime,timezone", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "logging-tz", "package_url": "https://pypi.org/project/logging-tz/", "platform": "", "project_url": "https://pypi.org/project/logging-tz/", "project_urls": {"Homepage": "https://github.com/wimglenn/logging_tz"}, "release_url": "https://pypi.org/project/logging-tz/0.1/", "requires_dist": ["pytz", "tzlocal"], "requires_python": "<3", "summary": "Specify the UTC offset in Python 2 logging", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python 2 logging module doesn\u2019t support using a timezone offset <tt>%z</tt> in the datetime format string.  An example failure mode is shown below:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"n\">datefmt</span> <span class=\"o\">=</span> <span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S%z'</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">datefmt</span><span class=\"o\">=</span><span class=\"n\">datefmt</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">\"Dude, where's my tzinfo?\"</span><span class=\"p\">)</span>  <span class=\"c1\"># it's about 6.20 pm here in Chicago</span>\n<span class=\"c1\"># 2017-02-27 18:23:05+0000 Dude, where's my tzinfo?</span>\n                     <span class=\"o\">^^^^^</span>\n</pre>\n<p>Simply omitting the time zone offset would perhaps have been admissible, or perhaps even simply refusing to localize and just logging in UTC, but specifying the localized time <strong>and</strong> specifying a zero offset is certainly wrong.  The part marked <tt>^</tt> is incorrect, an offset timestamp should have looked more like this one:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytz</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"n\">chicago_now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">(</span><span class=\"s1\">'America/Chicago'</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span> <span class=\"n\">chicago_now</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"n\">datefmt</span><span class=\"p\">)</span>\n<span class=\"c1\"># 2017-02-27 18:23:13-0600</span>\n</pre>\n<p>Indeed, that\u2019s how the logging output <em>does</em> look if run under Python 3.  But in Python 2, the <tt>%z</tt> directive is dropped.  This module provides a <tt>LocalFormatter</tt> intended as a drop-in replacement, to provide the correct handling of time zone offsets under Python 2:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span><span class=\"o\">,</span> <span class=\"nn\">logging_tz</span>\n<span class=\"n\">datefmt</span> <span class=\"o\">=</span> <span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S%z'</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'wat'</span><span class=\"p\">)</span>\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">logging_tz</span><span class=\"o\">.</span><span class=\"n\">LocalFormatter</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">datefmt</span><span class=\"o\">=</span><span class=\"n\">datefmt</span><span class=\"p\">)</span>\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">\"Ah, there's my tzinfo!\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># 2017-02-27 18:25:53-0600 Ah, there's my tzinfo!</span>\n</pre>\n<p>Additionally a <tt>ChicagoFormatter</tt> is offered as a convenience, to ease the pain for anyone insane enough to run their backend on CST instead of UTC.</p>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<dl>\n<dt>Q:</dt>\n<dd>How to install this library?</dd>\n<dt>A:</dt>\n<dd><tt>pip install logging_tz</tt> and then you can just use a <tt>logging_tz.LocalFormatter</tt> instead of the <tt>logging.Formatter</tt>.</dd>\n<dt>Q:</dt>\n<dd>You should log in UTC.  Why would you log in local time anyway?</dd>\n<dt>A:</dt>\n<dd><a href=\"http://yellerapp.com/posts/2015-01-12-the-worst-server-setup-you-can-make.html\" rel=\"nofollow\">Yeah, I guess</a>.  Although handling the date format correctly is at least better than mucking it up completely.</dd>\n<dt>Q:</dt>\n<dd>Is that a bug in Python?</dd>\n<dt>A:</dt>\n<dd>Hmm, arguably not, because the <tt>%z</tt> directive for time zone offset is not listed on the <tt>time.strftime</tt> table in the <a href=\"https://docs.python.org/2/library/time.html#time.strftime\" rel=\"nofollow\">Python 2 documentation</a>.  It is <a href=\"https://docs.python.org/3/library/time.html#time.strftime\" rel=\"nofollow\">there in the Python 3 docs</a>, though.</dd>\n<dt>Q:</dt>\n<dd>Did people really ask you these questions?  I bet you just made them up for the FAQ.</dd>\n<dt>A:</dt>\n<dd>That\u2019s a very good question - it\u2019s one I\u2019ve frequently asked myself, in fact.</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 3389359, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "14c613d1a02dd64c2cf99bba2616d756", "sha256": "18a2c2cef418278153cd2710725279744933944291099c0c7670cc6c370f6fd8"}, "downloads": -1, "filename": "logging_tz-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "14c613d1a02dd64c2cf99bba2616d756", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": "<3", "size": 5716, "upload_time": "2017-12-04T05:17:25", "upload_time_iso_8601": "2017-12-04T05:17:25.981279Z", "url": "https://files.pythonhosted.org/packages/02/1f/9d50b07253935e5af89b725780284e98adfbb9274d92a58f1f92c4699844/logging_tz-0.1-py2-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "14c613d1a02dd64c2cf99bba2616d756", "sha256": "18a2c2cef418278153cd2710725279744933944291099c0c7670cc6c370f6fd8"}, "downloads": -1, "filename": "logging_tz-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "14c613d1a02dd64c2cf99bba2616d756", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": "<3", "size": 5716, "upload_time": "2017-12-04T05:17:25", "upload_time_iso_8601": "2017-12-04T05:17:25.981279Z", "url": "https://files.pythonhosted.org/packages/02/1f/9d50b07253935e5af89b725780284e98adfbb9274d92a58f1f92c4699844/logging_tz-0.1-py2-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:44:16 2020"}