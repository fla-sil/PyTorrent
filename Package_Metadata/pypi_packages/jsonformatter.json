{"info": {"author": "MyColorfulDays", "author_email": "my_colorful_days@163.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Utilities"], "description": "Table of Contents\n=================\n\n* [jsonformatter \\-\\- for python log json](#jsonformatter----for-python-log-json)\n  * [Installation](#installation)\n  * [Basic Usage](#basic-usage)\n    * [Case 1\\. Use default config](#case-1-use-default-config)\n    * [Case 2\\. config in python code](#case-2-config-in-python-code)\n    * [Case 3\\. config from config file](#case-3-config-from-config-file)\n  * [More Usage](#more-usage)\n    * [Case 1\\. output multiple attributes in one key](#case-1-output-multiple-attributes-in-one-key)\n    * [Case 2\\. support json\\.dumps all optional parameters](#case-2-support-jsondumps-all-optional-parameters)\n    * [Case 3\\. support cumtom(add/replace) LogRecord  attribute](#case-3-support-cumtomaddreplace-logrecord--attribute)\n  * [LogRecord Attributes](#logrecord-attributes)\n\n\n\n# jsonformatter -- for python log json\n\n**jsonformatter** is a formatter for python output json log,  you can easily output **LogStash** needed log format or other **custom** json format  and  you can easily **custom(add/replace)** `LogRecord` attribute.\n\n**Python 2.7** and **python 3** are supported from version 0.2.X,  if you are using a version lower than 0.2.X,  **python 3** is only supported.\n\n\n\n## Installation\n\njsonformatter is available on PyPI.\nUse pip to install:\n\n```shell\n$ pip install jsonformatter\n```\nor:\n\n```shell\n$ git clone https://github.com/MyColorfulDays/jsonformatter.git\n$ cd jsonformatter\n$ python setup.py install\n```\n\n\n\n## Basic Usage\n\n### Case 1. Use default config\n\n```python\nimport logging\n\nfrom jsonformatter import JsonFormatter\n\nroot = logging.getLogger()\nroot.setLevel(logging.INFO)\n\nformatter = JsonFormatter()\n\nsh = logging.StreamHandler()\nsh.setFormatter(formatter)\nsh.setLevel(logging.INFO)\n\nroot.addHandler(sh)\n\nroot.info(\"test %s config\", 'default')\n```\n\noutput:\n\n```shell\n{\"levelname\": \"INFO\", \"name\": \"root\", \"message\": \"test default config\"}\n```\n\n\n\n### Case 2. config in python code\n\n```python3\nimport logging\n\nfrom jsonformatter import JsonFormatter\n\n# `format` can be json, OrderedDict, dict.\n# If `format` is `dict` and python version<3.7.0, the output ordered is sorted keys, otherwise will same as define ordered.\n# key: string, can be whatever you like.\n# value: `LogRecord` attribute name.\nSTRING_FORMAT = '''{\n    \"Name\":            \"name\",\n    \"Levelno\":         \"levelno\",\n    \"Levelname\":       \"levelname\",\n    \"Pathname\":        \"pathname\",\n    \"Filename\":        \"filename\",\n    \"Module\":          \"module\",\n    \"Lineno\":          \"lineno\",\n    \"FuncName\":        \"funcName\",\n    \"Created\":         \"created\",\n    \"Asctime\":         \"asctime\",\n    \"Msecs\":           \"msecs\",\n    \"RelativeCreated\": \"relativeCreated\",\n    \"Thread\":          \"thread\",\n    \"ThreadName\":      \"threadName\",\n    \"Process\":         \"process\",\n    \"Message\":         \"message\"\n}'''\n\nroot = logging.getLogger()\nroot.setLevel(logging.INFO)\n\nformatter = JsonFormatter(STRING_FORMAT)\n\nsh = logging.StreamHandler()\nsh.setFormatter(formatter)\nsh.setLevel(logging.INFO)\n\nroot.addHandler(sh)\n\nroot.info(\"test %s format\", 'string')\n```\n\noutput:\n\n```shell\n{\"Name\": \"root\", \"Levelno\": 20, \"Levelname\": \"INFO\", \"Pathname\": \"test.py\", \"Filename\": \"test.py\", \"Module\": \"test\", \"Lineno\": 75, \"FuncName\": \"test_string_format\", \"Created\": 1588185267.3198836, \"Asctime\": \"2020-04-30 02:34:27,319\", \"Msecs\": 319.8835849761963, \"RelativeCreated\": 88.2880687713623, \"Thread\": 16468, \"ThreadName\": \"MainThread\", \"Process\": 16828, \"Message\": \"test string format\"}\n```\n\n\n\n### Case 3. config from config file\n\nconfig file:\n```shell\n$ cat logger_config.ini\n[loggers]\nkeys=root\n\n[logger_root]\nlevel=DEBUG\nhandlers=infohandler\n\n\n###############################################\n\n[handlers]\nkeys=infohandler\n\n[handler_infohandler]\nclass=StreamHandler\nlevel=INFO\nformatter=form01\nargs=(sys.stdout,)\n\n###############################################\n\n[formatters]\nkeys=form01\n\n[formatter_form01]\nclass=jsonformatter.JsonFormatter\nformat={\"name\": \"name\",\"levelno\": \"levelno\",\"levelname\": \"levelname\",\"pathname\": \"pathname\",\"filename\": \"filename\",\"module\": \"module\",\"lineno\": \"lineno\",\"funcName\": \"funcName\",\"created\": \"created\",\"asctime\": \"asctime\",\"msecs\": \"msecs\",\"relativeCreated\": \"relativeCreated\",\"thread\": \"thread\",\"threadName\": \"threadName\",\"process\": \"process\",\"message\": \"message\"}\n```\npython code:\n```python3\nimport logging\nimport os\nfrom logging.config import fileConfig\n\nfileConfig(os.path.join(os.path.dirname(__file__), 'logger_config.ini'))\nroot = logging.getLogger('root')\nroot.info('test file config')\n\n```\n\noutput:\n\n```shell\n{\"name\": \"root\", \"levelno\": 20, \"levelname\": \"INFO\", \"pathname\": \"test.py\", \"filename\": \"test.py\", \"module\": \"test\", \"lineno\": 315, \"funcName\": \"test_file_config\", \"created\": 1588185267.3020294, \"asctime\": \"2020-04-30 02:34:27\", \"msecs\": 302.0293712615967, \"relativeCreated\": 70.4338550567627, \"thread\": 16468, \"threadName\": \"MainThread\", \"process\": 16828, \"message\": \"test file config\"}\n```\n\n\n\n## More Usage\n\n### Case 1. output multiple attributes in one key\n```python3\nimport logging\n\nfrom jsonformatter import JsonFormatter\n\nMULTI_ATTRIBUTES_FORMAT = '''{\n    \"multi attributes in one key\": \"%(name)s - %(levelno)s - %(levelname)s - %(pathname)s - %(filename)s - %(module)s - %(lineno)d - %(funcName)s - %(created)f - %(asctime)s - %(msecs)d - %(relativeCreated)d - %(thread)d - %(threadName)s - %(process)d - %(message)s\"\n}\n'''\n\n\nroot = logging.getLogger()\nroot.setLevel(logging.INFO)\n\nformatter = JsonFormatter(MULTI_ATTRIBUTES_FORMAT)\n\nsh = logging.StreamHandler()\nsh.setFormatter(formatter)\n\nsh.setLevel(logging.INFO)\n\nroot.addHandler(sh)\nroot.info('test multi attributes in one key')\n```\n\n\n\n### Case 2. support `json.dumps` all optional parameters\n\n```python3\nimport logging\n\nfrom jsonformatter import JsonFormatter\n\nSTRING_FORMAT = '''{\n    \"Name\":            \"name\",\n    \"Levelno\":         \"levelno\",\n    \"Levelname\":       \"levelname\",\n    \"Pathname\":        \"pathname\",\n    \"Filename\":        \"filename\",\n    \"Module\":          \"module\",\n    \"Lineno\":          \"lineno\",\n    \"FuncName\":        \"funcName\",\n    \"Created\":         \"created\",\n    \"Asctime\":         \"asctime\",\n    \"Msecs\":           \"msecs\",\n    \"RelativeCreated\": \"relativeCreated\",\n    \"Thread\":          \"thread\",\n    \"ThreadName\":      \"threadName\",\n    \"Process\":         \"process\",\n    \"Message\":         \"message\"\n}'''\n\nroot = logging.getLogger()\nroot.setLevel(logging.INFO)\n\n\nformatter = JsonFormatter(STRING_FORMAT, indent=4, ensure_ascii=False)\n\nsh = logging.StreamHandler()\nsh.setFormatter(formatter)\n\nsh.setLevel(logging.INFO)\n\nroot.addHandler(sh)\n\nroot.info('test json optional paramter: \u4e2d\u6587')\n```\n\n\n\n### Case 3. support cumtom(add/replace) `LogRecord`  attribute\n\n```python3\nimport datetime\nimport json\nimport logging\nimport random\nfrom collections import OrderedDict\n\nfrom jsonformatter import JsonFormatter\n\n# the key will add/replace `LogRecord` attribute.\n# the value must be `callable` type and not support paramters, the returned value will be as the `LogRecord` attribute value.\nRECORD_CUSTOM_ATTRS = {\n    # `datetime.datetime` type is not JSON serializable.\n    # solve it in three ways.\n    # 1. use `LogRecord` attribute `Format`: %(asctme)s.\n    # 2. use `json.dumps` optional parameter `default`.\n    # 3. use `json.dumps` optional parameter `cls`.\n    'asctime': lambda: datetime.datetime.today(),\n    'user id': lambda: str(random.random())[2:10]\n}\n\nRECORD_CUSTOM_FORMAT = OrderedDict([\n    (\"User id\",         \"user id\"),  # new custom attrs\n    (\"Name\",            \"name\"),\n    (\"Levelno\",         \"levelno\"),\n    (\"Levelname\",       \"levelname\"),\n    (\"Pathname\",        \"pathname\"),\n    (\"Filename\",        \"filename\"),\n    (\"Module\",          \"module\"),\n    (\"Lineno\",          \"lineno\"),\n    (\"FuncName\",        \"funcName\"),\n    (\"Created\",         \"created\"),\n    (\"Asctime\",         \"%(asctime)s\"),  # use `LogRecord` attribute `Format` to find matched key from RECORD_CUSTOM_ATTRS and call it value.\n    (\"Msecs\",           \"msecs\"),\n    (\"RelativeCreated\", \"relativeCreated\"),\n    (\"Thread\",          \"thread\"),\n    (\"ThreadName\",      \"threadName\"),\n    (\"Process\",         \"process\"),\n    (\"Message\",         \"message\")\n])\n\n\n# use `json.dumps` optional parameter `default`\ndef DEFAULT_SOLUTION(o):\n    if not isinstance(o, (str, int, float, bool, type(None))):\n        return str(o)\n    else:\n        return o\n\n# use `json.dumps` optional parameter `cls`\nclass CLS_SOLUTION(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, datetime.datetime):\n            return o.isoformat()\n\n        return json.JSONEncoder.default(self, o)\n\nroot = logging.getLogger()\nroot.setLevel(logging.INFO)\n\nformatter = JsonFormatter(RECORD_CUSTOM_FORMAT, record_custom_attrs=RECORD_CUSTOM_ATTRS, default=DEFAULT_SOLUTION, cls=CLS_SOLUTION)\n\nsh = logging.StreamHandler()\nsh.setFormatter(formatter)\n\nsh.setLevel(logging.INFO)\n\nroot.addHandler(sh)\nroot.info('record custom attrs')\n```\n\n\n\n## LogRecord Attributes \n\nOffical url: https://docs.python.org/3/library/logging.html#logrecord-attributes\n\nAttribute name|Format|Description\n-|-|-\nargs|You shouldn\u2019t need to format this yourself.|The tuple of arguments merged into msg to produce message, or a dict whose values are used for the merge (when there is only one argument, and it is a dictionary).\nasctime|%(asctime)s|Human-readable time when the LogRecord was created. By default this is of the form \u20182003-07-08 16:49:45,896\u2019 (the numbers after the comma are millisecond portion of the time).\ncreated|%(created)f|Time when the LogRecord was created (as returned by time.time()).\nexc_info|You shouldn\u2019t need to format this yourself.|Exception tuple (\u00e0 la sys.exc_info) or, if no exception has occurred, None.\nfilename|%(filename)s|Filename portion of pathname.\nfuncName|%(funcName)s|Name of function containing the logging call.\nlevelname|%(levelname)s|Text logging level for the message ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL').\nlevelno|%(levelno)s|Numeric logging level for the message (DEBUG, INFO, WARNING, ERROR, CRITICAL).\nlineno|%(lineno)d|Source line number where the logging call was issued (if available).\nmessage|%(message)s|The logged message, computed as msg % args. This is set when Formatter.format() is invoked.\nmodule|%(module)s|Module (name portion of filename).\nmsecs|%(msecs)d|Millisecond portion of the time when the LogRecord was created.\nmsg|You shouldn\u2019t need to format this yourself.|The format string passed in the original logging call. Merged with args to produce message, or an arbitrary object (see Using arbitrary objects as messages).\nname|%(name)s|Name of the logger used to log the call.\npathname|%(pathname)s|Full pathname of the source file where the logging call was issued (if available).\nprocess|%(process)d|Process ID (if available).\nprocessName|%(processName)s|Process name (if available).\nrelativeCreated|%(relativeCreated)d|Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded.\nstack_info|You shouldn\u2019t need to format this yourself.|Stack frame information (where available) from the bottom of the stack in the current thread, up to and including the stack frame of the logging call which resulted in the creation of this record.\nthread|%(thread)d|Thread ID (if available).\nthreadName|%(threadName)s|Thread name (if available).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MyColorfulDays/jsonformatter.git", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "jsonformatter", "package_url": "https://pypi.org/project/jsonformatter/", "platform": "all", "project_url": "https://pypi.org/project/jsonformatter/", "project_urls": {"Homepage": "https://github.com/MyColorfulDays/jsonformatter.git"}, "release_url": "https://pypi.org/project/jsonformatter/0.2.3/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Python log in json format.", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#jsonformatter----for-python-log-json\" rel=\"nofollow\">jsonformatter -- for python log json</a>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#basic-usage\" rel=\"nofollow\">Basic Usage</a>\n<ul>\n<li><a href=\"#case-1-use-default-config\" rel=\"nofollow\">Case 1. Use default config</a></li>\n<li><a href=\"#case-2-config-in-python-code\" rel=\"nofollow\">Case 2. config in python code</a></li>\n<li><a href=\"#case-3-config-from-config-file\" rel=\"nofollow\">Case 3. config from config file</a></li>\n</ul>\n</li>\n<li><a href=\"#more-usage\" rel=\"nofollow\">More Usage</a>\n<ul>\n<li><a href=\"#case-1-output-multiple-attributes-in-one-key\" rel=\"nofollow\">Case 1. output multiple attributes in one key</a></li>\n<li><a href=\"#case-2-support-jsondumps-all-optional-parameters\" rel=\"nofollow\">Case 2. support json.dumps all optional parameters</a></li>\n<li><a href=\"#case-3-support-cumtomaddreplace-logrecord--attribute\" rel=\"nofollow\">Case 3. support cumtom(add/replace) LogRecord  attribute</a></li>\n</ul>\n</li>\n<li><a href=\"#logrecord-attributes\" rel=\"nofollow\">LogRecord Attributes</a></li>\n</ul>\n</li>\n</ul>\n<h1>jsonformatter -- for python log json</h1>\n<p><strong>jsonformatter</strong> is a formatter for python output json log,  you can easily output <strong>LogStash</strong> needed log format or other <strong>custom</strong> json format  and  you can easily <strong>custom(add/replace)</strong> <code>LogRecord</code> attribute.</p>\n<p><strong>Python 2.7</strong> and <strong>python 3</strong> are supported from version 0.2.X,  if you are using a version lower than 0.2.X,  <strong>python 3</strong> is only supported.</p>\n<h2>Installation</h2>\n<p>jsonformatter is available on PyPI.\nUse pip to install:</p>\n<pre>$ pip install jsonformatter\n</pre>\n<p>or:</p>\n<pre>$ git clone https://github.com/MyColorfulDays/jsonformatter.git\n$ <span class=\"nb\">cd</span> jsonformatter\n$ python setup.py install\n</pre>\n<h2>Basic Usage</h2>\n<h3>Case 1. Use default config</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">jsonformatter</span> <span class=\"kn\">import</span> <span class=\"n\">JsonFormatter</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">JsonFormatter</span><span class=\"p\">()</span>\n\n<span class=\"n\">sh</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">sh</span><span class=\"p\">)</span>\n\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"test </span><span class=\"si\">%s</span><span class=\"s2\"> config\"</span><span class=\"p\">,</span> <span class=\"s1\">'default'</span><span class=\"p\">)</span>\n</pre>\n<p>output:</p>\n<pre><span class=\"o\">{</span><span class=\"s2\">\"levelname\"</span>: <span class=\"s2\">\"INFO\"</span>, <span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"root\"</span>, <span class=\"s2\">\"message\"</span>: <span class=\"s2\">\"test default config\"</span><span class=\"o\">}</span>\n</pre>\n<h3>Case 2. config in python code</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">jsonformatter</span> <span class=\"kn\">import</span> <span class=\"n\">JsonFormatter</span>\n\n<span class=\"c1\"># `format` can be json, OrderedDict, dict.</span>\n<span class=\"c1\"># If `format` is `dict` and python version&lt;3.7.0, the output ordered is sorted keys, otherwise will same as define ordered.</span>\n<span class=\"c1\"># key: string, can be whatever you like.</span>\n<span class=\"c1\"># value: `LogRecord` attribute name.</span>\n<span class=\"n\">STRING_FORMAT</span> <span class=\"o\">=</span> <span class=\"s1\">'''{</span>\n<span class=\"s1\">    \"Name\":            \"name\",</span>\n<span class=\"s1\">    \"Levelno\":         \"levelno\",</span>\n<span class=\"s1\">    \"Levelname\":       \"levelname\",</span>\n<span class=\"s1\">    \"Pathname\":        \"pathname\",</span>\n<span class=\"s1\">    \"Filename\":        \"filename\",</span>\n<span class=\"s1\">    \"Module\":          \"module\",</span>\n<span class=\"s1\">    \"Lineno\":          \"lineno\",</span>\n<span class=\"s1\">    \"FuncName\":        \"funcName\",</span>\n<span class=\"s1\">    \"Created\":         \"created\",</span>\n<span class=\"s1\">    \"Asctime\":         \"asctime\",</span>\n<span class=\"s1\">    \"Msecs\":           \"msecs\",</span>\n<span class=\"s1\">    \"RelativeCreated\": \"relativeCreated\",</span>\n<span class=\"s1\">    \"Thread\":          \"thread\",</span>\n<span class=\"s1\">    \"ThreadName\":      \"threadName\",</span>\n<span class=\"s1\">    \"Process\":         \"process\",</span>\n<span class=\"s1\">    \"Message\":         \"message\"</span>\n<span class=\"s1\">}'''</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">JsonFormatter</span><span class=\"p\">(</span><span class=\"n\">STRING_FORMAT</span><span class=\"p\">)</span>\n\n<span class=\"n\">sh</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">sh</span><span class=\"p\">)</span>\n\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"test </span><span class=\"si\">%s</span><span class=\"s2\"> format\"</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n</pre>\n<p>output:</p>\n<pre><span class=\"o\">{</span><span class=\"s2\">\"Name\"</span>: <span class=\"s2\">\"root\"</span>, <span class=\"s2\">\"Levelno\"</span>: <span class=\"m\">20</span>, <span class=\"s2\">\"Levelname\"</span>: <span class=\"s2\">\"INFO\"</span>, <span class=\"s2\">\"Pathname\"</span>: <span class=\"s2\">\"test.py\"</span>, <span class=\"s2\">\"Filename\"</span>: <span class=\"s2\">\"test.py\"</span>, <span class=\"s2\">\"Module\"</span>: <span class=\"s2\">\"test\"</span>, <span class=\"s2\">\"Lineno\"</span>: <span class=\"m\">75</span>, <span class=\"s2\">\"FuncName\"</span>: <span class=\"s2\">\"test_string_format\"</span>, <span class=\"s2\">\"Created\"</span>: <span class=\"m\">1588185267</span>.3198836, <span class=\"s2\">\"Asctime\"</span>: <span class=\"s2\">\"2020-04-30 02:34:27,319\"</span>, <span class=\"s2\">\"Msecs\"</span>: <span class=\"m\">319</span>.8835849761963, <span class=\"s2\">\"RelativeCreated\"</span>: <span class=\"m\">88</span>.2880687713623, <span class=\"s2\">\"Thread\"</span>: <span class=\"m\">16468</span>, <span class=\"s2\">\"ThreadName\"</span>: <span class=\"s2\">\"MainThread\"</span>, <span class=\"s2\">\"Process\"</span>: <span class=\"m\">16828</span>, <span class=\"s2\">\"Message\"</span>: <span class=\"s2\">\"test string format\"</span><span class=\"o\">}</span>\n</pre>\n<h3>Case 3. config from config file</h3>\n<p>config file:</p>\n<pre>$ cat logger_config.ini\n<span class=\"o\">[</span>loggers<span class=\"o\">]</span>\n<span class=\"nv\">keys</span><span class=\"o\">=</span>root\n\n<span class=\"o\">[</span>logger_root<span class=\"o\">]</span>\n<span class=\"nv\">level</span><span class=\"o\">=</span>DEBUG\n<span class=\"nv\">handlers</span><span class=\"o\">=</span>infohandler\n\n\n<span class=\"c1\">###############################################</span>\n\n<span class=\"o\">[</span>handlers<span class=\"o\">]</span>\n<span class=\"nv\">keys</span><span class=\"o\">=</span>infohandler\n\n<span class=\"o\">[</span>handler_infohandler<span class=\"o\">]</span>\n<span class=\"nv\">class</span><span class=\"o\">=</span>StreamHandler\n<span class=\"nv\">level</span><span class=\"o\">=</span>INFO\n<span class=\"nv\">formatter</span><span class=\"o\">=</span>form01\n<span class=\"nv\">args</span><span class=\"o\">=(</span>sys.stdout,<span class=\"o\">)</span>\n\n<span class=\"c1\">###############################################</span>\n\n<span class=\"o\">[</span>formatters<span class=\"o\">]</span>\n<span class=\"nv\">keys</span><span class=\"o\">=</span>form01\n\n<span class=\"o\">[</span>formatter_form01<span class=\"o\">]</span>\n<span class=\"nv\">class</span><span class=\"o\">=</span>jsonformatter.JsonFormatter\n<span class=\"nv\">format</span><span class=\"o\">={</span><span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"name\"</span>,<span class=\"s2\">\"levelno\"</span>: <span class=\"s2\">\"levelno\"</span>,<span class=\"s2\">\"levelname\"</span>: <span class=\"s2\">\"levelname\"</span>,<span class=\"s2\">\"pathname\"</span>: <span class=\"s2\">\"pathname\"</span>,<span class=\"s2\">\"filename\"</span>: <span class=\"s2\">\"filename\"</span>,<span class=\"s2\">\"module\"</span>: <span class=\"s2\">\"module\"</span>,<span class=\"s2\">\"lineno\"</span>: <span class=\"s2\">\"lineno\"</span>,<span class=\"s2\">\"funcName\"</span>: <span class=\"s2\">\"funcName\"</span>,<span class=\"s2\">\"created\"</span>: <span class=\"s2\">\"created\"</span>,<span class=\"s2\">\"asctime\"</span>: <span class=\"s2\">\"asctime\"</span>,<span class=\"s2\">\"msecs\"</span>: <span class=\"s2\">\"msecs\"</span>,<span class=\"s2\">\"relativeCreated\"</span>: <span class=\"s2\">\"relativeCreated\"</span>,<span class=\"s2\">\"thread\"</span>: <span class=\"s2\">\"thread\"</span>,<span class=\"s2\">\"threadName\"</span>: <span class=\"s2\">\"threadName\"</span>,<span class=\"s2\">\"process\"</span>: <span class=\"s2\">\"process\"</span>,<span class=\"s2\">\"message\"</span>: <span class=\"s2\">\"message\"</span><span class=\"o\">}</span>\n</pre>\n<p>python code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">logging.config</span> <span class=\"kn\">import</span> <span class=\"n\">fileConfig</span>\n\n<span class=\"n\">fileConfig</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">),</span> <span class=\"s1\">'logger_config.ini'</span><span class=\"p\">))</span>\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'root'</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'test file config'</span><span class=\"p\">)</span>\n</pre>\n<p>output:</p>\n<pre><span class=\"o\">{</span><span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"root\"</span>, <span class=\"s2\">\"levelno\"</span>: <span class=\"m\">20</span>, <span class=\"s2\">\"levelname\"</span>: <span class=\"s2\">\"INFO\"</span>, <span class=\"s2\">\"pathname\"</span>: <span class=\"s2\">\"test.py\"</span>, <span class=\"s2\">\"filename\"</span>: <span class=\"s2\">\"test.py\"</span>, <span class=\"s2\">\"module\"</span>: <span class=\"s2\">\"test\"</span>, <span class=\"s2\">\"lineno\"</span>: <span class=\"m\">315</span>, <span class=\"s2\">\"funcName\"</span>: <span class=\"s2\">\"test_file_config\"</span>, <span class=\"s2\">\"created\"</span>: <span class=\"m\">1588185267</span>.3020294, <span class=\"s2\">\"asctime\"</span>: <span class=\"s2\">\"2020-04-30 02:34:27\"</span>, <span class=\"s2\">\"msecs\"</span>: <span class=\"m\">302</span>.0293712615967, <span class=\"s2\">\"relativeCreated\"</span>: <span class=\"m\">70</span>.4338550567627, <span class=\"s2\">\"thread\"</span>: <span class=\"m\">16468</span>, <span class=\"s2\">\"threadName\"</span>: <span class=\"s2\">\"MainThread\"</span>, <span class=\"s2\">\"process\"</span>: <span class=\"m\">16828</span>, <span class=\"s2\">\"message\"</span>: <span class=\"s2\">\"test file config\"</span><span class=\"o\">}</span>\n</pre>\n<h2>More Usage</h2>\n<h3>Case 1. output multiple attributes in one key</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">jsonformatter</span> <span class=\"kn\">import</span> <span class=\"n\">JsonFormatter</span>\n\n<span class=\"n\">MULTI_ATTRIBUTES_FORMAT</span> <span class=\"o\">=</span> <span class=\"s1\">'''{</span>\n<span class=\"s1\">    \"multi attributes in one key\": \"</span><span class=\"si\">%(name)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelno)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(pathname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(filename)s</span><span class=\"s1\"> - </span><span class=\"si\">%(module)s</span><span class=\"s1\"> - </span><span class=\"si\">%(lineno)d</span><span class=\"s1\"> - </span><span class=\"si\">%(funcName)s</span><span class=\"s1\"> - </span><span class=\"si\">%(created)f</span><span class=\"s1\"> - </span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(msecs)d</span><span class=\"s1\"> - </span><span class=\"si\">%(relativeCreated)d</span><span class=\"s1\"> - </span><span class=\"si\">%(thread)d</span><span class=\"s1\"> - </span><span class=\"si\">%(threadName)s</span><span class=\"s1\"> - </span><span class=\"si\">%(process)d</span><span class=\"s1\"> - </span><span class=\"si\">%(message)s</span><span class=\"s1\">\"</span>\n<span class=\"s1\">}</span>\n<span class=\"s1\">'''</span>\n\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">JsonFormatter</span><span class=\"p\">(</span><span class=\"n\">MULTI_ATTRIBUTES_FORMAT</span><span class=\"p\">)</span>\n\n<span class=\"n\">sh</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">sh</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'test multi attributes in one key'</span><span class=\"p\">)</span>\n</pre>\n<h3>Case 2. support <code>json.dumps</code> all optional parameters</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">jsonformatter</span> <span class=\"kn\">import</span> <span class=\"n\">JsonFormatter</span>\n\n<span class=\"n\">STRING_FORMAT</span> <span class=\"o\">=</span> <span class=\"s1\">'''{</span>\n<span class=\"s1\">    \"Name\":            \"name\",</span>\n<span class=\"s1\">    \"Levelno\":         \"levelno\",</span>\n<span class=\"s1\">    \"Levelname\":       \"levelname\",</span>\n<span class=\"s1\">    \"Pathname\":        \"pathname\",</span>\n<span class=\"s1\">    \"Filename\":        \"filename\",</span>\n<span class=\"s1\">    \"Module\":          \"module\",</span>\n<span class=\"s1\">    \"Lineno\":          \"lineno\",</span>\n<span class=\"s1\">    \"FuncName\":        \"funcName\",</span>\n<span class=\"s1\">    \"Created\":         \"created\",</span>\n<span class=\"s1\">    \"Asctime\":         \"asctime\",</span>\n<span class=\"s1\">    \"Msecs\":           \"msecs\",</span>\n<span class=\"s1\">    \"RelativeCreated\": \"relativeCreated\",</span>\n<span class=\"s1\">    \"Thread\":          \"thread\",</span>\n<span class=\"s1\">    \"ThreadName\":      \"threadName\",</span>\n<span class=\"s1\">    \"Process\":         \"process\",</span>\n<span class=\"s1\">    \"Message\":         \"message\"</span>\n<span class=\"s1\">}'''</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">JsonFormatter</span><span class=\"p\">(</span><span class=\"n\">STRING_FORMAT</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">ensure_ascii</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">sh</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">sh</span><span class=\"p\">)</span>\n\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'test json optional paramter: \u4e2d\u6587'</span><span class=\"p\">)</span>\n</pre>\n<h3>Case 3. support cumtom(add/replace) <code>LogRecord</code>  attribute</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">jsonformatter</span> <span class=\"kn\">import</span> <span class=\"n\">JsonFormatter</span>\n\n<span class=\"c1\"># the key will add/replace `LogRecord` attribute.</span>\n<span class=\"c1\"># the value must be `callable` type and not support paramters, the returned value will be as the `LogRecord` attribute value.</span>\n<span class=\"n\">RECORD_CUSTOM_ATTRS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># `datetime.datetime` type is not JSON serializable.</span>\n    <span class=\"c1\"># solve it in three ways.</span>\n    <span class=\"c1\"># 1. use `LogRecord` attribute `Format`: %(asctme)s.</span>\n    <span class=\"c1\"># 2. use `json.dumps` optional parameter `default`.</span>\n    <span class=\"c1\"># 3. use `json.dumps` optional parameter `cls`.</span>\n    <span class=\"s1\">'asctime'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">(),</span>\n    <span class=\"s1\">'user id'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">())[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">RECORD_CUSTOM_FORMAT</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">([</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"User id\"</span><span class=\"p\">,</span>         <span class=\"s2\">\"user id\"</span><span class=\"p\">),</span>  <span class=\"c1\"># new custom attrs</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span>            <span class=\"s2\">\"name\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Levelno\"</span><span class=\"p\">,</span>         <span class=\"s2\">\"levelno\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Levelname\"</span><span class=\"p\">,</span>       <span class=\"s2\">\"levelname\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Pathname\"</span><span class=\"p\">,</span>        <span class=\"s2\">\"pathname\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Filename\"</span><span class=\"p\">,</span>        <span class=\"s2\">\"filename\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Module\"</span><span class=\"p\">,</span>          <span class=\"s2\">\"module\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Lineno\"</span><span class=\"p\">,</span>          <span class=\"s2\">\"lineno\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"FuncName\"</span><span class=\"p\">,</span>        <span class=\"s2\">\"funcName\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Created\"</span><span class=\"p\">,</span>         <span class=\"s2\">\"created\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Asctime\"</span><span class=\"p\">,</span>         <span class=\"s2\">\"</span><span class=\"si\">%(asctime)s</span><span class=\"s2\">\"</span><span class=\"p\">),</span>  <span class=\"c1\"># use `LogRecord` attribute `Format` to find matched key from RECORD_CUSTOM_ATTRS and call it value.</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Msecs\"</span><span class=\"p\">,</span>           <span class=\"s2\">\"msecs\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"RelativeCreated\"</span><span class=\"p\">,</span> <span class=\"s2\">\"relativeCreated\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Thread\"</span><span class=\"p\">,</span>          <span class=\"s2\">\"thread\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"ThreadName\"</span><span class=\"p\">,</span>      <span class=\"s2\">\"threadName\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Process\"</span><span class=\"p\">,</span>         <span class=\"s2\">\"process\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"Message\"</span><span class=\"p\">,</span>         <span class=\"s2\">\"message\"</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n\n\n<span class=\"c1\"># use `json.dumps` optional parameter `default`</span>\n<span class=\"k\">def</span> <span class=\"nf\">DEFAULT_SOLUTION</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">))):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">o</span>\n\n<span class=\"c1\"># use `json.dumps` optional parameter `cls`</span>\n<span class=\"k\">class</span> <span class=\"nc\">CLS_SOLUTION</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">JSONEncoder</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">()</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">JSONEncoder</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">)</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">JsonFormatter</span><span class=\"p\">(</span><span class=\"n\">RECORD_CUSTOM_FORMAT</span><span class=\"p\">,</span> <span class=\"n\">record_custom_attrs</span><span class=\"o\">=</span><span class=\"n\">RECORD_CUSTOM_ATTRS</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">DEFAULT_SOLUTION</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">CLS_SOLUTION</span><span class=\"p\">)</span>\n\n<span class=\"n\">sh</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">sh</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'record custom attrs'</span><span class=\"p\">)</span>\n</pre>\n<h2>LogRecord Attributes</h2>\n<p>Offical url: <a href=\"https://docs.python.org/3/library/logging.html#logrecord-attributes\" rel=\"nofollow\">https://docs.python.org/3/library/logging.html#logrecord-attributes</a></p>\n<table>\n<thead>\n<tr>\n<th>Attribute name</th>\n<th>Format</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>args</td>\n<td>You shouldn\u2019t need to format this yourself.</td>\n<td>The tuple of arguments merged into msg to produce message, or a dict whose values are used for the merge (when there is only one argument, and it is a dictionary).</td>\n</tr>\n<tr>\n<td>asctime</td>\n<td>%(asctime)s</td>\n<td>Human-readable time when the LogRecord was created. By default this is of the form \u20182003-07-08 16:49:45,896\u2019 (the numbers after the comma are millisecond portion of the time).</td>\n</tr>\n<tr>\n<td>created</td>\n<td>%(created)f</td>\n<td>Time when the LogRecord was created (as returned by time.time()).</td>\n</tr>\n<tr>\n<td>exc_info</td>\n<td>You shouldn\u2019t need to format this yourself.</td>\n<td>Exception tuple (\u00e0 la sys.exc_info) or, if no exception has occurred, None.</td>\n</tr>\n<tr>\n<td>filename</td>\n<td>%(filename)s</td>\n<td>Filename portion of pathname.</td>\n</tr>\n<tr>\n<td>funcName</td>\n<td>%(funcName)s</td>\n<td>Name of function containing the logging call.</td>\n</tr>\n<tr>\n<td>levelname</td>\n<td>%(levelname)s</td>\n<td>Text logging level for the message ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL').</td>\n</tr>\n<tr>\n<td>levelno</td>\n<td>%(levelno)s</td>\n<td>Numeric logging level for the message (DEBUG, INFO, WARNING, ERROR, CRITICAL).</td>\n</tr>\n<tr>\n<td>lineno</td>\n<td>%(lineno)d</td>\n<td>Source line number where the logging call was issued (if available).</td>\n</tr>\n<tr>\n<td>message</td>\n<td>%(message)s</td>\n<td>The logged message, computed as msg % args. This is set when Formatter.format() is invoked.</td>\n</tr>\n<tr>\n<td>module</td>\n<td>%(module)s</td>\n<td>Module (name portion of filename).</td>\n</tr>\n<tr>\n<td>msecs</td>\n<td>%(msecs)d</td>\n<td>Millisecond portion of the time when the LogRecord was created.</td>\n</tr>\n<tr>\n<td>msg</td>\n<td>You shouldn\u2019t need to format this yourself.</td>\n<td>The format string passed in the original logging call. Merged with args to produce message, or an arbitrary object (see Using arbitrary objects as messages).</td>\n</tr>\n<tr>\n<td>name</td>\n<td>%(name)s</td>\n<td>Name of the logger used to log the call.</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>%(pathname)s</td>\n<td>Full pathname of the source file where the logging call was issued (if available).</td>\n</tr>\n<tr>\n<td>process</td>\n<td>%(process)d</td>\n<td>Process ID (if available).</td>\n</tr>\n<tr>\n<td>processName</td>\n<td>%(processName)s</td>\n<td>Process name (if available).</td>\n</tr>\n<tr>\n<td>relativeCreated</td>\n<td>%(relativeCreated)d</td>\n<td>Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded.</td>\n</tr>\n<tr>\n<td>stack_info</td>\n<td>You shouldn\u2019t need to format this yourself.</td>\n<td>Stack frame information (where available) from the bottom of the stack in the current thread, up to and including the stack frame of the logging call which resulted in the creation of this record.</td>\n</tr>\n<tr>\n<td>thread</td>\n<td>%(thread)d</td>\n<td>Thread ID (if available).</td>\n</tr>\n<tr>\n<td>threadName</td>\n<td>%(threadName)s</td>\n<td>Thread name (if available).</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 7138390, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "44aaf9ed3b74c2e29cee99b570ac9efc", "sha256": "bbe056cdae9a7e608bca72e8613fc04dae262bcf4596f78762522694ee96c11b"}, "downloads": -1, "filename": "jsonformatter-0.1.3.tar.gz", "has_sig": false, "md5_digest": "44aaf9ed3b74c2e29cee99b570ac9efc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 9327, "upload_time": "2019-10-09T10:29:50", "upload_time_iso_8601": "2019-10-09T10:29:50.430951Z", "url": "https://files.pythonhosted.org/packages/99/b4/0ecf9a4c5c89c751d4f35bd7b9484df048457fed4b664c45ebdc4680e19d/jsonformatter-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d2ff3babfcfd8127aded2034daf83e07", "sha256": "e4bbbb1a79013d2f4b1d249fbed755ade679fd03af9a40de8e45148cde3d21af"}, "downloads": -1, "filename": "jsonformatter-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d2ff3babfcfd8127aded2034daf83e07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8504, "upload_time": "2020-03-03T18:11:55", "upload_time_iso_8601": "2020-03-03T18:11:55.566495Z", "url": "https://files.pythonhosted.org/packages/01/5f/5d362ed176f854da105b87c214cf9d2d4705a26f34275e102749f6108130/jsonformatter-0.1.4.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "2df05a1bf49f2017eab32b5a2006d950", "sha256": "a9c21ffcb88d9798b5d126cd7b4b5f91ab01a2557bb03a3277a5277939975247"}, "downloads": -1, "filename": "jsonformatter-0.2.3.tar.gz", "has_sig": false, "md5_digest": "2df05a1bf49f2017eab32b5a2006d950", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 10575, "upload_time": "2020-04-30T15:53:15", "upload_time_iso_8601": "2020-04-30T15:53:15.813138Z", "url": "https://files.pythonhosted.org/packages/fe/97/852484577087019eb303746b0d68c9df71d7e3a492b6358cede5ad72c5cd/jsonformatter-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2df05a1bf49f2017eab32b5a2006d950", "sha256": "a9c21ffcb88d9798b5d126cd7b4b5f91ab01a2557bb03a3277a5277939975247"}, "downloads": -1, "filename": "jsonformatter-0.2.3.tar.gz", "has_sig": false, "md5_digest": "2df05a1bf49f2017eab32b5a2006d950", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 10575, "upload_time": "2020-04-30T15:53:15", "upload_time_iso_8601": "2020-04-30T15:53:15.813138Z", "url": "https://files.pythonhosted.org/packages/fe/97/852484577087019eb303746b0d68c9df71d7e3a492b6358cede5ad72c5cd/jsonformatter-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:47 2020"}