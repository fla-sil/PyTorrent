{"info": {"author": "Matthew Kalnins", "author_email": "pybix@matthewkalnins.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: System :: Monitoring"], "description": "# pybix\n\n**NOTE: This module is still in development and may not be fully stable. Use at own risk.**\n\n## Description\n\nPython based Zabbix API utility containing helper functions and CLI capabilities.\n\nTakes inspiration from existing Python-Zabbix API modules like [lukecyca/pyzabbix](https://github.com/lukecyca/pyzabbix) and [adubkov/py-zabbix](https://github.com/adubkov/py-zabbix).\n\nWhile this module can be used in a similar way, the aim is to add a few out of the box helper functions and CLI handling for a more \"batteries included\" module. For example GraphImage as described in usage which enables saving Zabbix graphs which is not possible via the API at this time.\n\n## Install\n\n### Pip\n\n```\npip install pybix\n```\n\n### Docker\n\nTODO - not yet available.\n\n## Requirements\n\n* Python 3.6 or greater\n* Zabbix 2.0 or greater\n  * Only tested on >4.0\n\n## Usage\n\n### Zabbix API\n\nRefer to [Zabbix Offical API object](https://www.zabbix.com/documentation/4.2/manual/api/reference) references for objects that can be queried and their parameters.\n\nAPI structure all uses format like `ZAPI.<object>.<action>(<parameters>)` e.g. `ZAPI.host.get(output='extend')`.\n\n#### Import as Python module\n\n##### Directly\n\n```python\nfrom pybix import ZabbixAPI\nZAPI = ZabbixAPI(url=\"http://localhost/zabbix\")\nZAPI.login(user=\"Admin\", password=\"zabbix\")\n\n# Print all monitored hosts\nfor host in ZAPI.host.get(output=\"extend\",monitored_hosts=1):\n    print(host['host'])\n\nZAPI.logout() # Explicitly logout to clear Zabbix session\n```\n\n##### With context manager to handle logout\n\nNote: Login still must be done manually (as in the future we may allow passing existing session, hence might not need to login everytime).\n\n```python\nfrom pybix import ZabbixAPI\n\nwith ZabbixAPI() as ZAPI: # using defaults for server\n    ZAPI.login() # using defaults for user, password\n\n    # Print all monitored hosts\n    for host in ZAPI.host.get(output=\"extend\",monitored_hosts=1):\n        print(host['host'])\n```\n\n#### Zabbix API CLI\n\n##### Zabbix API CLI Usage\n\n```bash\nUsage:\n    pybix.py <method> [--zabbix-server=ZABBIX_SERVER] [--zabbix-user=ZABBIX_USER]\n            [--zabbix-password=ZABBIX_PASSWORD] [--ssl-verify] [(-v | --verbose)] [<args> ...]\n    pybix.py (-h | --help)\n    pybix.py --version\n\nArguments:\n  method        either Zabbix API reference as '<object>.<action>' or GraphImage API as 'graphimage.<search_type>' (e.g. 'host.get' or 'graphimage.graph_id')\n  args          what arguments to pass to API call\n\nOptions:\n  -h, --help\n  --version\n  -v, --verbose                      Whether to use verbose logging [default: False]\n  --output-path=PATH                 Where to save graphs to default: cwd\n  --zabbix-server=ZABBIX_SERVER      [default: https://localhost/zabbix]\n  --zabbix-user=ZABBIX_USER          [default: Admin]\n  --zabbix-password=ZABBIX_PASSWORD  [default: zabbix]\n  --ssl-verify                       Whether to use SSL verification for API [default: True]\n```\n\n##### Zabbix API CLI Example\n\n```bash\npython -m pybix host.get filter=\"{host:server1}\" # Get host server1\npython -m pybix host.get filter=\"{host:[server1,server2]}\" # Get host server1 and server2\npython -m pybix user.get # Get all Users\n```\n\n### Graph Image Export\n\nZabbix does not let you export graphs via API (only the configuration for them). Instead of using `ZabbixAPI` class, use included `GraphImage`.\n\n#### GraphImage Python Example\n\n```python\nfrom pybix import GraphImageAPI\ngraph = GraphImageAPI(url=\"http://localhost/zabbix\",\n                      user=\"Admin\",\n                      password=\"zabbix\")\ngraph.get_by_graphid(\"4038\") # will save to png file in current working directory\ngraph.get_by_graphname(\"CPU\") # will save any \"CPU\" graph png images to file in current working directory\n```\n\n#### GraphImage CLI\n\n##### GraphImage CLI Usage\n\nRefer to [ZabbixAPI usage](#####zabbix-api-cli-usage).\n\n`search_types` include `graph_id, graph_name, item_names, item_keys, item_ids`\n\n##### GraphImage CLI Examples\n\n```bash\npython -m pybix graphimage.graph_name graph_name=CPU host_names=server1\npython -m pybix graphimage.graph_name graph_name=CPU host_names=[server1,server2]\npython -m pybix graphimage.item_names item_names=CPU host_names=server1\npython -m pybix graphimage.item_keys item_keys=availability.agent.available host_names=server1\n\n# Not as useful, but is what above methods call after calculating id\npython -m pybix graphimage.graph_id graph_id=4038 host_names=server1\npython -m pybix graphimage.item_ids item_ids=138780,138781 host_names=server1\n```\n\n## Known Issues\n\n### SSL Verification\n\n* If server using a self signed cert or serving on HTTPS, will need to use `ssl_verify` overide\n\n### User configuration\n\n* Zabbix user used during API calls must have viewing rights to queried Zabbix object\n  * i.e. appropriate hostgroup read rights to user/usergroup OR super admin\n  * If it does not, it will simply return empty results without warning\n\n### Graph Items Usage\n\n* User used to login must have frontend access (i.e. in Zabbix user group, set frontend access to true)\n* No error messages or warnings if graph is invalid (i.e. wrong values used to call it)\n\n## Contributing\n\nFeel free to raise any feature requests/problems/improvements as issue or pull request via [GitHub](https://github.com/mattykay/pybix).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mattykay/pybix", "keywords": "zabbix,monitoring,api", "license": "", "maintainer": "", "maintainer_email": "", "name": "pybix", "package_url": "https://pypi.org/project/pybix/", "platform": "", "project_url": "https://pypi.org/project/pybix/", "project_urls": {"Homepage": "https://github.com/mattykay/pybix"}, "release_url": "https://pypi.org/project/pybix/0.0.8/", "requires_dist": ["requests (>=2.22.0)", "docopt (>=0.6.2)"], "requires_python": ">=3.6", "summary": "Python based Zabbix API utility with helper functions", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pybix</h1>\n<p><strong>NOTE: This module is still in development and may not be fully stable. Use at own risk.</strong></p>\n<h2>Description</h2>\n<p>Python based Zabbix API utility containing helper functions and CLI capabilities.</p>\n<p>Takes inspiration from existing Python-Zabbix API modules like <a href=\"https://github.com/lukecyca/pyzabbix\" rel=\"nofollow\">lukecyca/pyzabbix</a> and <a href=\"https://github.com/adubkov/py-zabbix\" rel=\"nofollow\">adubkov/py-zabbix</a>.</p>\n<p>While this module can be used in a similar way, the aim is to add a few out of the box helper functions and CLI handling for a more \"batteries included\" module. For example GraphImage as described in usage which enables saving Zabbix graphs which is not possible via the API at this time.</p>\n<h2>Install</h2>\n<h3>Pip</h3>\n<pre><code>pip install pybix\n</code></pre>\n<h3>Docker</h3>\n<p>TODO - not yet available.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6 or greater</li>\n<li>Zabbix 2.0 or greater\n<ul>\n<li>Only tested on &gt;4.0</li>\n</ul>\n</li>\n</ul>\n<h2>Usage</h2>\n<h3>Zabbix API</h3>\n<p>Refer to <a href=\"https://www.zabbix.com/documentation/4.2/manual/api/reference\" rel=\"nofollow\">Zabbix Offical API object</a> references for objects that can be queried and their parameters.</p>\n<p>API structure all uses format like <code>ZAPI.&lt;object&gt;.&lt;action&gt;(&lt;parameters&gt;)</code> e.g. <code>ZAPI.host.get(output='extend')</code>.</p>\n<h4>Import as Python module</h4>\n<h5>Directly</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybix</span> <span class=\"kn\">import</span> <span class=\"n\">ZabbixAPI</span>\n<span class=\"n\">ZAPI</span> <span class=\"o\">=</span> <span class=\"n\">ZabbixAPI</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"http://localhost/zabbix\"</span><span class=\"p\">)</span>\n<span class=\"n\">ZAPI</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s2\">\"Admin\"</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"zabbix\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print all monitored hosts</span>\n<span class=\"k\">for</span> <span class=\"n\">host</span> <span class=\"ow\">in</span> <span class=\"n\">ZAPI</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s2\">\"extend\"</span><span class=\"p\">,</span><span class=\"n\">monitored_hosts</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">])</span>\n\n<span class=\"n\">ZAPI</span><span class=\"o\">.</span><span class=\"n\">logout</span><span class=\"p\">()</span> <span class=\"c1\"># Explicitly logout to clear Zabbix session</span>\n</pre>\n<h5>With context manager to handle logout</h5>\n<p>Note: Login still must be done manually (as in the future we may allow passing existing session, hence might not need to login everytime).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybix</span> <span class=\"kn\">import</span> <span class=\"n\">ZabbixAPI</span>\n\n<span class=\"k\">with</span> <span class=\"n\">ZabbixAPI</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">ZAPI</span><span class=\"p\">:</span> <span class=\"c1\"># using defaults for server</span>\n    <span class=\"n\">ZAPI</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">()</span> <span class=\"c1\"># using defaults for user, password</span>\n\n    <span class=\"c1\"># Print all monitored hosts</span>\n    <span class=\"k\">for</span> <span class=\"n\">host</span> <span class=\"ow\">in</span> <span class=\"n\">ZAPI</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s2\">\"extend\"</span><span class=\"p\">,</span><span class=\"n\">monitored_hosts</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">])</span>\n</pre>\n<h4>Zabbix API CLI</h4>\n<h5>Zabbix API CLI Usage</h5>\n<pre>Usage:\n    pybix.py &lt;method&gt; <span class=\"o\">[</span>--zabbix-server<span class=\"o\">=</span>ZABBIX_SERVER<span class=\"o\">]</span> <span class=\"o\">[</span>--zabbix-user<span class=\"o\">=</span>ZABBIX_USER<span class=\"o\">]</span>\n            <span class=\"o\">[</span>--zabbix-password<span class=\"o\">=</span>ZABBIX_PASSWORD<span class=\"o\">]</span> <span class=\"o\">[</span>--ssl-verify<span class=\"o\">]</span> <span class=\"o\">[(</span>-v <span class=\"p\">|</span> --verbose<span class=\"o\">)]</span> <span class=\"o\">[</span>&lt;args&gt; ...<span class=\"o\">]</span>\n    pybix.py <span class=\"o\">(</span>-h <span class=\"p\">|</span> --help<span class=\"o\">)</span>\n    pybix.py --version\n\nArguments:\n  method        either Zabbix API reference as <span class=\"s1\">'&lt;object&gt;.&lt;action&gt;'</span> or GraphImage API as <span class=\"s1\">'graphimage.&lt;search_type&gt;'</span> <span class=\"o\">(</span>e.g. <span class=\"s1\">'host.get'</span> or <span class=\"s1\">'graphimage.graph_id'</span><span class=\"o\">)</span>\n  args          what arguments to pass to API call\n\nOptions:\n  -h, --help\n  --version\n  -v, --verbose                      Whether to use verbose logging <span class=\"o\">[</span>default: False<span class=\"o\">]</span>\n  --output-path<span class=\"o\">=</span>PATH                 Where to save graphs to default: cwd\n  --zabbix-server<span class=\"o\">=</span>ZABBIX_SERVER      <span class=\"o\">[</span>default: https://localhost/zabbix<span class=\"o\">]</span>\n  --zabbix-user<span class=\"o\">=</span>ZABBIX_USER          <span class=\"o\">[</span>default: Admin<span class=\"o\">]</span>\n  --zabbix-password<span class=\"o\">=</span>ZABBIX_PASSWORD  <span class=\"o\">[</span>default: zabbix<span class=\"o\">]</span>\n  --ssl-verify                       Whether to use SSL verification <span class=\"k\">for</span> API <span class=\"o\">[</span>default: True<span class=\"o\">]</span>\n</pre>\n<h5>Zabbix API CLI Example</h5>\n<pre>python -m pybix host.get <span class=\"nv\">filter</span><span class=\"o\">=</span><span class=\"s2\">\"{host:server1}\"</span> <span class=\"c1\"># Get host server1</span>\npython -m pybix host.get <span class=\"nv\">filter</span><span class=\"o\">=</span><span class=\"s2\">\"{host:[server1,server2]}\"</span> <span class=\"c1\"># Get host server1 and server2</span>\npython -m pybix user.get <span class=\"c1\"># Get all Users</span>\n</pre>\n<h3>Graph Image Export</h3>\n<p>Zabbix does not let you export graphs via API (only the configuration for them). Instead of using <code>ZabbixAPI</code> class, use included <code>GraphImage</code>.</p>\n<h4>GraphImage Python Example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybix</span> <span class=\"kn\">import</span> <span class=\"n\">GraphImageAPI</span>\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">GraphImageAPI</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"http://localhost/zabbix\"</span><span class=\"p\">,</span>\n                      <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s2\">\"Admin\"</span><span class=\"p\">,</span>\n                      <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"zabbix\"</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">get_by_graphid</span><span class=\"p\">(</span><span class=\"s2\">\"4038\"</span><span class=\"p\">)</span> <span class=\"c1\"># will save to png file in current working directory</span>\n<span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">get_by_graphname</span><span class=\"p\">(</span><span class=\"s2\">\"CPU\"</span><span class=\"p\">)</span> <span class=\"c1\"># will save any \"CPU\" graph png images to file in current working directory</span>\n</pre>\n<h4>GraphImage CLI</h4>\n<h5>GraphImage CLI Usage</h5>\n<p>Refer to <a href=\"#####zabbix-api-cli-usage\" rel=\"nofollow\">ZabbixAPI usage</a>.</p>\n<p><code>search_types</code> include <code>graph_id, graph_name, item_names, item_keys, item_ids</code></p>\n<h5>GraphImage CLI Examples</h5>\n<pre>python -m pybix graphimage.graph_name <span class=\"nv\">graph_name</span><span class=\"o\">=</span>CPU <span class=\"nv\">host_names</span><span class=\"o\">=</span>server1\npython -m pybix graphimage.graph_name <span class=\"nv\">graph_name</span><span class=\"o\">=</span>CPU <span class=\"nv\">host_names</span><span class=\"o\">=[</span>server1,server2<span class=\"o\">]</span>\npython -m pybix graphimage.item_names <span class=\"nv\">item_names</span><span class=\"o\">=</span>CPU <span class=\"nv\">host_names</span><span class=\"o\">=</span>server1\npython -m pybix graphimage.item_keys <span class=\"nv\">item_keys</span><span class=\"o\">=</span>availability.agent.available <span class=\"nv\">host_names</span><span class=\"o\">=</span>server1\n\n<span class=\"c1\"># Not as useful, but is what above methods call after calculating id</span>\npython -m pybix graphimage.graph_id <span class=\"nv\">graph_id</span><span class=\"o\">=</span><span class=\"m\">4038</span> <span class=\"nv\">host_names</span><span class=\"o\">=</span>server1\npython -m pybix graphimage.item_ids <span class=\"nv\">item_ids</span><span class=\"o\">=</span><span class=\"m\">138780</span>,138781 <span class=\"nv\">host_names</span><span class=\"o\">=</span>server1\n</pre>\n<h2>Known Issues</h2>\n<h3>SSL Verification</h3>\n<ul>\n<li>If server using a self signed cert or serving on HTTPS, will need to use <code>ssl_verify</code> overide</li>\n</ul>\n<h3>User configuration</h3>\n<ul>\n<li>Zabbix user used during API calls must have viewing rights to queried Zabbix object\n<ul>\n<li>i.e. appropriate hostgroup read rights to user/usergroup OR super admin</li>\n<li>If it does not, it will simply return empty results without warning</li>\n</ul>\n</li>\n</ul>\n<h3>Graph Items Usage</h3>\n<ul>\n<li>User used to login must have frontend access (i.e. in Zabbix user group, set frontend access to true)</li>\n<li>No error messages or warnings if graph is invalid (i.e. wrong values used to call it)</li>\n</ul>\n<h2>Contributing</h2>\n<p>Feel free to raise any feature requests/problems/improvements as issue or pull request via <a href=\"https://github.com/mattykay/pybix\" rel=\"nofollow\">GitHub</a>.</p>\n\n          </div>"}, "last_serial": 6714645, "releases": {"0.0.7": [{"comment_text": "", "digests": {"md5": "1221a227453bca739df01470c34af81b", "sha256": "cedddc773ba6b2bce157d969b43ac66febe04b9d32507b6d31d5a7a05afeecab"}, "downloads": -1, "filename": "pybix-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1221a227453bca739df01470c34af81b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12421, "upload_time": "2019-08-20T03:59:59", "upload_time_iso_8601": "2019-08-20T03:59:59.523224Z", "url": "https://files.pythonhosted.org/packages/dc/05/f94e706796ce976df6e491dbb037978717144ea27e872f1b8b33f87e74f9/pybix-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21ac7dfb86ec8cf1436c85c511c5e40f", "sha256": "48bf94983a20c560d157f525f944591a2cee5ed15005c2f6ec2a0086e32113d1"}, "downloads": -1, "filename": "pybix-0.0.7.tar.gz", "has_sig": false, "md5_digest": "21ac7dfb86ec8cf1436c85c511c5e40f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12316, "upload_time": "2019-08-20T04:00:01", "upload_time_iso_8601": "2019-08-20T04:00:01.487223Z", "url": "https://files.pythonhosted.org/packages/c0/07/111986509553b1b7ff55ce3e3cfd5df4ca2fb63ce65a534bf0ec0780028c/pybix-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "42f01afaa8bd55a65876d2d9234c1509", "sha256": "b770549a73ba5f1e57684ed1cab9fb2abff0e7104dd3be384e7d952ae5c148c9"}, "downloads": -1, "filename": "pybix-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "42f01afaa8bd55a65876d2d9234c1509", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12419, "upload_time": "2020-02-28T01:02:42", "upload_time_iso_8601": "2020-02-28T01:02:42.340005Z", "url": "https://files.pythonhosted.org/packages/26/94/67c4c3e8ff4e9e091358b48a9137fe664eb2d0e585897ec1da137547604c/pybix-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e9686545baf1ddc74d51c856899155b", "sha256": "c80d005e3767bb851bf48aba6ddc9439bf478159a25950e9eef43847e50da530"}, "downloads": -1, "filename": "pybix-0.0.8.tar.gz", "has_sig": false, "md5_digest": "0e9686545baf1ddc74d51c856899155b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12251, "upload_time": "2020-02-28T01:02:44", "upload_time_iso_8601": "2020-02-28T01:02:44.555140Z", "url": "https://files.pythonhosted.org/packages/74/1d/5db87f3d654e6f7960be38d8e8ef835891989f7e02bfc56c077552f7f48e/pybix-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42f01afaa8bd55a65876d2d9234c1509", "sha256": "b770549a73ba5f1e57684ed1cab9fb2abff0e7104dd3be384e7d952ae5c148c9"}, "downloads": -1, "filename": "pybix-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "42f01afaa8bd55a65876d2d9234c1509", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12419, "upload_time": "2020-02-28T01:02:42", "upload_time_iso_8601": "2020-02-28T01:02:42.340005Z", "url": "https://files.pythonhosted.org/packages/26/94/67c4c3e8ff4e9e091358b48a9137fe664eb2d0e585897ec1da137547604c/pybix-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e9686545baf1ddc74d51c856899155b", "sha256": "c80d005e3767bb851bf48aba6ddc9439bf478159a25950e9eef43847e50da530"}, "downloads": -1, "filename": "pybix-0.0.8.tar.gz", "has_sig": false, "md5_digest": "0e9686545baf1ddc74d51c856899155b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12251, "upload_time": "2020-02-28T01:02:44", "upload_time_iso_8601": "2020-02-28T01:02:44.555140Z", "url": "https://files.pythonhosted.org/packages/74/1d/5db87f3d654e6f7960be38d8e8ef835891989f7e02bfc56c077552f7f48e/pybix-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:11 2020"}