{"info": {"author": "Eileen Kuehn, Max Fischer", "author_email": "maxfischer2781@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Clustering"], "description": "dengraph - Density-based Graph Clustering\n=========================================\n\n|travis| |codecov| |landscape|\n\nDenGraph performs a density-based graph clustering.\nThe algorithm was proposed as an extension for DBSCAN to support overlapping clusters.\nThe approach is based around the neighbourhood of a node.\nThe neighbourhood is defined by the *number* of reachable nodes within a given *distance*.\nTherefore, large groups of items which are close to each other form clusters.\nAs DenGraph is a non-partitioning approach, isolated, distinct and uncommon items are left unclustered.\nInstead, they are treated as noise.\n\nQuick Overview\n--------------\n\nTo use ``dengraph`` for clustering your data, two steps are required:\n\n- Your data must be provided via the ``dengraph.graph.Graph`` interface.\n  See the ``dengraph.graphs`` module for appropriate containers and examples.\n\n- The graph must be fed to ``dengraph.dengraph.DenGraphIO``.\n\n.. code:: python\n\n    >>> from dengraph.graphs.distance_graph import DistanceGraph\n    >>> from dengraph.dengraph import DenGraphIO\n    >>> # Graph with defined nodes, edges from distance function\n    >>> graph = DistanceGraph(\n    ...     nodes=(1, 2, 3, 4, 5, 10, 11, 13, 14, 15, 17, 22, 23, 24, 25, 28, 29, 30, 31),\n    ...     distance=lambda node_from, node_to: abs(node_from - node_to)\n    ... )\n    >>> # Cluster the graph\n    >>> clustered_data = DenGraphIO(graph, cluster_distance=2, core_neighbours=3).clusters\n    >>> # And print clusters\n    >>> for cluster in sorted(clustered_data, key=lambda clstr: min(clstr)):\n    ...     print(sorted(cluster))\n    [1, 2, 3, 4, 5]\n    [11, 13, 14, 15, 17]\n    [22, 23, 24, 25]\n    [28, 29, 30, 31]\n\nFurther Information\n-------------------\n\nAt the moment, you must refer to the module and class documentation.\n\n- See ``dengraph.dengraph.DenGraphIO`` for an explanation of clustering settings.\n\n- See ``dengraph.graph.Graph`` for documentation of the graph interface.\n\nUseful Classes\n..............\n\nWe provide several implementations and tools for the ``Graph`` interface:\n\n- Create a graph from a list of nodes and a distance function via ``dengraph.graphs.distance_graph.DistanceGraph``\n\n- Create a graph from adjacency lists via ``dengraph.graphs.adjacency_graph.AdjacencyGraph``\n\n- Read a distance matrix to a graph via ``dengraph.graphs.graph_io.csv_graph_reader``\n\nFrequently Asked Questions\n--------------------------\n\n- Why is there no ``DenGraphHO`` class?\n\n  We haven't implemented that one yet.\n  It's on our Todo.\n\n- Why is there no ``DenGraph`` class?\n\n  The original DenGraph algorithm is non-deterministic for unordered graphs.\n  Since border nodes can belong to only one cluster, the first cluster wins - results depend on iteration order.\n  The ``DenGraphIO`` algorithm does not have this issue and performs equally well.\n\n- Why is ``DenGraphO`` the same class as ``DenGraphIO``?\n\n  Algorithmically, ``DenGraphIO`` is basically ``DenGraphO`` *plus* the option to insert/remove/modify nodes/edges.\n  In the static case (just initialisation), both are equivalent.\n  At the moment, we don't have any optimisations based on immutability of ``DenGraphO``.\n  The alias exists so that applications can distinguish between the two, possibly benefiting from future optimisations.\n\nAcknowledgement\n---------------\n\nThis module is based on several publications:\n\n- [1] T. Falkowski, A. Barth, and M. Spiliopoulou, \"DENGRAPH: A Density-based Community Detection Algorithm,\" presented at the IEEE/WIC/ACM International Conference on Web Intelligence (WI'07), 2007, pp. 112\u2013115.\n- [2] T. Falkowski, A. Barth, and M. Spiliopoulou, \u201cStudying community dynamics with an incremental graph mining algorithm,\u201d AMCIS 2008 Proceedings, 2008.\n- [3] N. Schlitter, T. Falkowski, and J. L\u00e4ssig, \"DenGraph-HO - a density-based hierarchical graph clustering algorithm.,\" Expert Systems, vol. 31, no. 5, pp. 469\u2013479, 2014.\n\n\n.. |travis| image:: https://travis-ci.org/MaineKuehn/dengraph.svg?branch=master\n    :target: https://travis-ci.org/MaineKuehn/dengraph\n    :alt: Unit Tests\n\n.. |codecov| image:: https://codecov.io/gh/MaineKuehn/dengraph/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/MaineKuehn/dengraph\n  :alt: Code Coverage\n\n.. |landscape| image:: https://landscape.io/github/MaineKuehn/dengraph/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/MaineKuehn/dengraph/master\n   :alt: Code Health\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "clustering cluster graph density distance", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "dengraph", "package_url": "https://pypi.org/project/dengraph/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dengraph/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/dengraph/0.1.dev0/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.1.dev0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/MaineKuehn/dengraph\" rel=\"nofollow\"><img alt=\"Unit Tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e20d152d98195e9bb0e6c696050b6ff17ddf632/68747470733a2f2f7472617669732d63692e6f72672f4d61696e654b7565686e2f64656e67726170682e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/MaineKuehn/dengraph\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/950a5662286ed229839b29012658cd15c3e33cbb/68747470733a2f2f636f6465636f762e696f2f67682f4d61696e654b7565686e2f64656e67726170682f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://landscape.io/github/MaineKuehn/dengraph/master\" rel=\"nofollow\"><img alt=\"Code Health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f0ad4ec6ddf37aba59fe72fde679118fd80bac8/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f4d61696e654b7565686e2f64656e67726170682f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a></p>\n<p>DenGraph performs a density-based graph clustering.\nThe algorithm was proposed as an extension for DBSCAN to support overlapping clusters.\nThe approach is based around the neighbourhood of a node.\nThe neighbourhood is defined by the <em>number</em> of reachable nodes within a given <em>distance</em>.\nTherefore, large groups of items which are close to each other form clusters.\nAs DenGraph is a non-partitioning approach, isolated, distinct and uncommon items are left unclustered.\nInstead, they are treated as noise.</p>\n<div id=\"quick-overview\">\n<h2>Quick Overview</h2>\n<p>To use <tt>dengraph</tt> for clustering your data, two steps are required:</p>\n<ul>\n<li>Your data must be provided via the <tt>dengraph.graph.Graph</tt> interface.\nSee the <tt>dengraph.graphs</tt> module for appropriate containers and examples.</li>\n<li>The graph must be fed to <tt>dengraph.dengraph.DenGraphIO</tt>.</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dengraph.graphs.distance_graph</span> <span class=\"kn\">import</span> <span class=\"n\">DistanceGraph</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dengraph.dengraph</span> <span class=\"kn\">import</span> <span class=\"n\">DenGraphIO</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Graph with defined nodes, edges from distance function</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">DistanceGraph</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"n\">distance</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">node_from</span><span class=\"p\">,</span> <span class=\"n\">node_to</span><span class=\"p\">:</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">node_from</span> <span class=\"o\">-</span> <span class=\"n\">node_to</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Cluster the graph</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">clustered_data</span> <span class=\"o\">=</span> <span class=\"n\">DenGraphIO</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">cluster_distance</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">core_neighbours</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">clusters</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># And print clusters</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">cluster</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">clustered_data</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">clstr</span><span class=\"p\">:</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">clstr</span><span class=\"p\">)):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"further-information\">\n<h2>Further Information</h2>\n<p>At the moment, you must refer to the module and class documentation.</p>\n<ul>\n<li>See <tt>dengraph.dengraph.DenGraphIO</tt> for an explanation of clustering settings.</li>\n<li>See <tt>dengraph.graph.Graph</tt> for documentation of the graph interface.</li>\n</ul>\n<div id=\"useful-classes\">\n<h3>Useful Classes</h3>\n<p>We provide several implementations and tools for the <tt>Graph</tt> interface:</p>\n<ul>\n<li>Create a graph from a list of nodes and a distance function via <tt>dengraph.graphs.distance_graph.DistanceGraph</tt></li>\n<li>Create a graph from adjacency lists via <tt>dengraph.graphs.adjacency_graph.AdjacencyGraph</tt></li>\n<li>Read a distance matrix to a graph via <tt>dengraph.graphs.graph_io.csv_graph_reader</tt></li>\n</ul>\n</div>\n</div>\n<div id=\"frequently-asked-questions\">\n<h2>Frequently Asked Questions</h2>\n<ul>\n<li><p>Why is there no <tt>DenGraphHO</tt> class?</p>\n<p>We haven\u2019t implemented that one yet.\nIt\u2019s on our Todo.</p>\n</li>\n<li><p>Why is there no <tt>DenGraph</tt> class?</p>\n<p>The original DenGraph algorithm is non-deterministic for unordered graphs.\nSince border nodes can belong to only one cluster, the first cluster wins - results depend on iteration order.\nThe <tt>DenGraphIO</tt> algorithm does not have this issue and performs equally well.</p>\n</li>\n<li><p>Why is <tt>DenGraphO</tt> the same class as <tt>DenGraphIO</tt>?</p>\n<p>Algorithmically, <tt>DenGraphIO</tt> is basically <tt>DenGraphO</tt> <em>plus</em> the option to insert/remove/modify nodes/edges.\nIn the static case (just initialisation), both are equivalent.\nAt the moment, we don\u2019t have any optimisations based on immutability of <tt>DenGraphO</tt>.\nThe alias exists so that applications can distinguish between the two, possibly benefiting from future optimisations.</p>\n</li>\n</ul>\n</div>\n<div id=\"acknowledgement\">\n<h2>Acknowledgement</h2>\n<p>This module is based on several publications:</p>\n<ul>\n<li>[1] T. Falkowski, A. Barth, and M. Spiliopoulou, \u201cDENGRAPH: A Density-based Community Detection Algorithm,\u201d presented at the IEEE/WIC/ACM International Conference on Web Intelligence (WI\u201907), 2007, pp. 112\u2013115.</li>\n<li>[2] T. Falkowski, A. Barth, and M. Spiliopoulou, \u201cStudying community dynamics with an incremental graph mining algorithm,\u201d AMCIS 2008 Proceedings, 2008.</li>\n<li>[3] N. Schlitter, T. Falkowski, and J. L\u00e4ssig, \u201cDenGraph-HO - a density-based hierarchical graph clustering algorithm.,\u201d Expert Systems, vol. 31, no. 5, pp. 469\u2013479, 2014.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4105034, "releases": {"0.1.dev0": [{"comment_text": "", "digests": {"md5": "f22ff5de7fc2cb6cd420a3948ce91335", "sha256": "057ea3150a9b625f37e613834e40d7d2e01e5521d15ae8f926ffc0c4f225d52d"}, "downloads": -1, "filename": "dengraph-0.1.dev0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f22ff5de7fc2cb6cd420a3948ce91335", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 26990, "upload_time": "2016-12-07T19:31:29", "upload_time_iso_8601": "2016-12-07T19:31:29.041653Z", "url": "https://files.pythonhosted.org/packages/bf/cf/6001af8a42eccb0ed142796f3ddf72f8bc2ccb85a0d6bc644d092e4f680a/dengraph-0.1.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a07cc87d37f420f6cae7fc30afbed72b", "sha256": "6c26e458483f1da1316941be8ad1f451224b2d943bc85e56fa6552d0510d5c84"}, "downloads": -1, "filename": "dengraph-0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "a07cc87d37f420f6cae7fc30afbed72b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20090, "upload_time": "2016-12-07T19:31:26", "upload_time_iso_8601": "2016-12-07T19:31:26.436916Z", "url": "https://files.pythonhosted.org/packages/26/cb/26ce0c7c5f6b659c37793ba997c89dc80220c82083d35562730f4c933fc5/dengraph-0.1.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f22ff5de7fc2cb6cd420a3948ce91335", "sha256": "057ea3150a9b625f37e613834e40d7d2e01e5521d15ae8f926ffc0c4f225d52d"}, "downloads": -1, "filename": "dengraph-0.1.dev0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f22ff5de7fc2cb6cd420a3948ce91335", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 26990, "upload_time": "2016-12-07T19:31:29", "upload_time_iso_8601": "2016-12-07T19:31:29.041653Z", "url": "https://files.pythonhosted.org/packages/bf/cf/6001af8a42eccb0ed142796f3ddf72f8bc2ccb85a0d6bc644d092e4f680a/dengraph-0.1.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a07cc87d37f420f6cae7fc30afbed72b", "sha256": "6c26e458483f1da1316941be8ad1f451224b2d943bc85e56fa6552d0510d5c84"}, "downloads": -1, "filename": "dengraph-0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "a07cc87d37f420f6cae7fc30afbed72b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20090, "upload_time": "2016-12-07T19:31:26", "upload_time_iso_8601": "2016-12-07T19:31:26.436916Z", "url": "https://files.pythonhosted.org/packages/26/cb/26ce0c7c5f6b659c37793ba997c89dc80220c82083d35562730f4c933fc5/dengraph-0.1.dev0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:06 2020"}