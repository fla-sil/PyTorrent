{"info": {"author": "Luke A. Rohl", "author_email": "Luke.A.Rohl@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# MultiWii Serial Protocol (MSP) \n\n\nHandles the MultiWii Serial Protocol to send/receive data from boards.\n\nThis is text-based / console, no GUI. It works by reading data from the multicopter and/or sending commands from a \ncomputer via a serial modem. I use this module for doing different request to my multicopters in order to control \nthem wirelessly via a Raspberry Pi.\n\n## Caution\n\nThis code is still somewhat under development, if you found a bug or a improvement, please let me know!!\n\n## Installation \n\nTo install with pip run the following command from this directory,\n\n```\npip install msp-python3\n```\n\n## How?\n\nJust create a MultiWii object that receives the serial port address as parameter and then you can ask for a MSP \ncommand by using the function getData, an explicit example looks like this:\n\n```\nfrom msp.multiwii import MultiWii\n\nserialPort = \"/dev/ttyS0\"\nboard = MultiWii(serialPort)\n```\n\n## MultiWii Serial Protocol\n\nMSP is a protocol designed by the MultiWii community, with the idea to be light, generic, bit wire efficient, secure. \nThe MSP data frames are structured as:\n\n```\n$<header>,<direction>,<size>,<command>,<crc>$\n```\n\nwhere:\n\n* preamble: the ASCII characters `$M`\n* direction: the ASCII character `<` if the message goes to the MultiWii board or `>` if the message is coming from the \nboard\n* size: number of data bytes, binary. Can be zero as in the case of a data request to the board\n* command: message id of MSP\n* data: values to be sent. UINT16 values are LSB first\n* crc: (cyclic redundancy check) checksum, XOR of `<size>,<command>` and each data byte into a zero sum\n\nFor a complete list of Protocols and responses that this project is based off of please visit \n[MultiWii Serial Protocol - Web Archive](https://web.archive.org/web/20190812122529/http://www.multiwii.com/wiki/index.php?title=Multiwii_Serial_Protocol).\n\nStack overflow [example](https://stackoverflow.com/questions/42877001/how-do-i-read-gyro-information-from-cleanflight-using-msp) of MSP \n\n### Data Flow\n\nThere is basically three types of messages to interact with a MultiWii board. Those are command, request and response. \nCommand is an incoming message without implicit outgoing response from the board, request is an incoming message with \nimplicit outgoing response while response is the outgoing message resulting from an incoming request.\n\nIf, e.g., the orientation of the board is needed, then a message with type request and ID = 108 must be created and then\n sent to the board, after being sent, the board will reply with a response.\n\n### Performance\n\nThe entire implementation of this module does not include a sleep function, which means that is very fast and efficient,\n the rate of communication would then depend on the computer and the board capabilities.\n\nThe module is also designed to be extremely simple to use, the next code will request and print (to the host computer) \nthe orientation of the a MultiWii board connected to a USB port:\n\n```\nimport sys\nfrom msp.multiwii import MultiWii\n\nif __name__ == \"__main__\":\n    try:\n        print_debug = sys.argv[1].lower() == 'true'\n        fc = MultiWii(\"/dev/ttyS0\", print_debug)\n        fc.start()\n        while True:\n            print(fc.get_attitude())\n\n    except Exception as error:\n        import traceback\n        print(\"Error on Main: \" + str(error))\n        traceback.print_exc()\n```\n\n## Boards update\n\n### 8bit boards\n\nWhen using an 8bit MultiWii board, please change the `wakeup` time. The old boards need \nmore than 10 seconds to boot up in order to be ready to start asking for data. A safe time would be:\n\n```\n\"\"\"Time to wait until the board becomes operational\"\"\"\nwakeup = 14\n```\n\n### 32bit boards\n\nIf you're using something similar to a naze32 using either baseflight or cleanflight you will be able to ask for \nattitude and some other commands, but by default you will not be able to use the MSP_SET_RAW_RC to write pilot commands \nto the multiwii. In order to do that you need to activate (via the baseflight/cleanflight GUI) the ```SerialRX\t``` with\n the specific type for MSP (MultiWii Serial Protocol). The instructions for doing that on baseflight are:\n\n- Open the CLI (while on the baseflight configurator) and type:\n\n```\nfeature SERIALRX\n```\n\nand then type the following lines:\n\n```\nset serialrx_type=4\n```\n\nThis will activate \"msp\" in order to control the multiwii via that protocol. Important: when type=4 is active, standard \nradio will not work... (at least on the releases I'm using).\n\nThen you can carefully test my example \"test-arm-disarm.py\"... You will see the motors spin for 3 seconds. \n\u00c2\u00a1\u00c2\u00a1BE CAREFUL!!\n\n### Additional Links\n[Cleanflight Checklist](https://www.propwashed.com/flight-controller-software-set-up-checklist/)\n is very helpful for ensuring that your drone has been configured correctly. \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LukeARohl/MSP-Python3", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "msp-python3", "package_url": "https://pypi.org/project/msp-python3/", "platform": "", "project_url": "https://pypi.org/project/msp-python3/", "project_urls": {"Homepage": "https://github.com/LukeARohl/MSP-Python3"}, "release_url": "https://pypi.org/project/msp-python3/0.2.1/", "requires_dist": ["pyserial"], "requires_python": "", "summary": "MultiWii Serial Protocol (MSP) API for python3", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MultiWii Serial Protocol (MSP)</h1>\n<p>Handles the MultiWii Serial Protocol to send/receive data from boards.</p>\n<p>This is text-based / console, no GUI. It works by reading data from the multicopter and/or sending commands from a\ncomputer via a serial modem. I use this module for doing different request to my multicopters in order to control\nthem wirelessly via a Raspberry Pi.</p>\n<h2>Caution</h2>\n<p>This code is still somewhat under development, if you found a bug or a improvement, please let me know!!</p>\n<h2>Installation</h2>\n<p>To install with pip run the following command from this directory,</p>\n<pre><code>pip install msp-python3\n</code></pre>\n<h2>How?</h2>\n<p>Just create a MultiWii object that receives the serial port address as parameter and then you can ask for a MSP\ncommand by using the function getData, an explicit example looks like this:</p>\n<pre><code>from msp.multiwii import MultiWii\n\nserialPort = \"/dev/ttyS0\"\nboard = MultiWii(serialPort)\n</code></pre>\n<h2>MultiWii Serial Protocol</h2>\n<p>MSP is a protocol designed by the MultiWii community, with the idea to be light, generic, bit wire efficient, secure.\nThe MSP data frames are structured as:</p>\n<pre><code>$&lt;header&gt;,&lt;direction&gt;,&lt;size&gt;,&lt;command&gt;,&lt;crc&gt;$\n</code></pre>\n<p>where:</p>\n<ul>\n<li>preamble: the ASCII characters <code>$M</code></li>\n<li>direction: the ASCII character <code>&lt;</code> if the message goes to the MultiWii board or <code>&gt;</code> if the message is coming from the\nboard</li>\n<li>size: number of data bytes, binary. Can be zero as in the case of a data request to the board</li>\n<li>command: message id of MSP</li>\n<li>data: values to be sent. UINT16 values are LSB first</li>\n<li>crc: (cyclic redundancy check) checksum, XOR of <code>&lt;size&gt;,&lt;command&gt;</code> and each data byte into a zero sum</li>\n</ul>\n<p>For a complete list of Protocols and responses that this project is based off of please visit\n<a href=\"https://web.archive.org/web/20190812122529/http://www.multiwii.com/wiki/index.php?title=Multiwii_Serial_Protocol\" rel=\"nofollow\">MultiWii Serial Protocol - Web Archive</a>.</p>\n<p>Stack overflow <a href=\"https://stackoverflow.com/questions/42877001/how-do-i-read-gyro-information-from-cleanflight-using-msp\" rel=\"nofollow\">example</a> of MSP</p>\n<h3>Data Flow</h3>\n<p>There is basically three types of messages to interact with a MultiWii board. Those are command, request and response.\nCommand is an incoming message without implicit outgoing response from the board, request is an incoming message with\nimplicit outgoing response while response is the outgoing message resulting from an incoming request.</p>\n<p>If, e.g., the orientation of the board is needed, then a message with type request and ID = 108 must be created and then\nsent to the board, after being sent, the board will reply with a response.</p>\n<h3>Performance</h3>\n<p>The entire implementation of this module does not include a sleep function, which means that is very fast and efficient,\nthe rate of communication would then depend on the computer and the board capabilities.</p>\n<p>The module is also designed to be extremely simple to use, the next code will request and print (to the host computer)\nthe orientation of the a MultiWii board connected to a USB port:</p>\n<pre><code>import sys\nfrom msp.multiwii import MultiWii\n\nif __name__ == \"__main__\":\n    try:\n        print_debug = sys.argv[1].lower() == 'true'\n        fc = MultiWii(\"/dev/ttyS0\", print_debug)\n        fc.start()\n        while True:\n            print(fc.get_attitude())\n\n    except Exception as error:\n        import traceback\n        print(\"Error on Main: \" + str(error))\n        traceback.print_exc()\n</code></pre>\n<h2>Boards update</h2>\n<h3>8bit boards</h3>\n<p>When using an 8bit MultiWii board, please change the <code>wakeup</code> time. The old boards need\nmore than 10 seconds to boot up in order to be ready to start asking for data. A safe time would be:</p>\n<pre><code>\"\"\"Time to wait until the board becomes operational\"\"\"\nwakeup = 14\n</code></pre>\n<h3>32bit boards</h3>\n<p>If you're using something similar to a naze32 using either baseflight or cleanflight you will be able to ask for\nattitude and some other commands, but by default you will not be able to use the MSP_SET_RAW_RC to write pilot commands\nto the multiwii. In order to do that you need to activate (via the baseflight/cleanflight GUI) the <code>SerialRX</code> with\nthe specific type for MSP (MultiWii Serial Protocol). The instructions for doing that on baseflight are:</p>\n<ul>\n<li>Open the CLI (while on the baseflight configurator) and type:</li>\n</ul>\n<pre><code>feature SERIALRX\n</code></pre>\n<p>and then type the following lines:</p>\n<pre><code>set serialrx_type=4\n</code></pre>\n<p>This will activate \"msp\" in order to control the multiwii via that protocol. Important: when type=4 is active, standard\nradio will not work... (at least on the releases I'm using).</p>\n<p>Then you can carefully test my example \"test-arm-disarm.py\"... You will see the motors spin for 3 seconds.\n\u00c2\u00a1\u00c2\u00a1BE CAREFUL!!</p>\n<h3>Additional Links</h3>\n<p><a href=\"https://www.propwashed.com/flight-controller-software-set-up-checklist/\" rel=\"nofollow\">Cleanflight Checklist</a>\nis very helpful for ensuring that your drone has been configured correctly.</p>\n\n          </div>"}, "last_serial": 6752953, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "9f411cf80d3b8d6a45cefff18bea6272", "sha256": "e991fb176d036424e258609a1348898ca9b33a70807543e05d56f80f661b8b1d"}, "downloads": -1, "filename": "msp_python3-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9f411cf80d3b8d6a45cefff18bea6272", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8632, "upload_time": "2020-03-01T22:21:24", "upload_time_iso_8601": "2020-03-01T22:21:24.084194Z", "url": "https://files.pythonhosted.org/packages/51/3f/57c88b244b9386870fc8ce6b937f01e207af8b98ea64f3175462ca731071/msp_python3-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e59bd6ea06d6f72b7ff631871d6355d", "sha256": "2690df773aa85bd9e1101f73f4f25b4310d00d04f6c9580840686579b320e7de"}, "downloads": -1, "filename": "msp-python3-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8e59bd6ea06d6f72b7ff631871d6355d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8395, "upload_time": "2020-03-01T22:21:24", "upload_time_iso_8601": "2020-03-01T22:21:24.905325Z", "url": "https://files.pythonhosted.org/packages/36/8e/26f84c620774fcc985b5ba7d69863272e1a043f2a38953741cdb393fff38/msp-python3-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "dfc51783557a820d88203c4a25c68172", "sha256": "cb10c8a3240415769b697364a480b5624ce485d4932134a53baccfc1ebf9fedf"}, "downloads": -1, "filename": "msp_python3-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "dfc51783557a820d88203c4a25c68172", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7935, "upload_time": "2020-03-01T22:44:50", "upload_time_iso_8601": "2020-03-01T22:44:50.916018Z", "url": "https://files.pythonhosted.org/packages/e8/9f/1283c05abc0c6a51a38be6926caf7a2b389ce91e1c5a93865b3e5241987d/msp_python3-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21bc74a437d154e35edad983693b03eb", "sha256": "3d8839148e1c1824628fb16852db1e813d8c402febcee461e90d869d8ee213d0"}, "downloads": -1, "filename": "msp-python3-0.0.3.tar.gz", "has_sig": false, "md5_digest": "21bc74a437d154e35edad983693b03eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6847, "upload_time": "2020-03-01T22:44:51", "upload_time_iso_8601": "2020-03-01T22:44:51.822106Z", "url": "https://files.pythonhosted.org/packages/7d/b5/a6dc9f83bd91f6da7518f5b686938e5b3bda001dc90079d500689fd8e84b/msp-python3-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "84ec1cf019f7b57df9b2765768647585", "sha256": "50cb9017289ad4e46a15ec249fec58e86f47e42e8b04fcb5fc7412b3a0273df7"}, "downloads": -1, "filename": "msp_python3-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "84ec1cf019f7b57df9b2765768647585", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7983, "upload_time": "2020-03-03T05:16:40", "upload_time_iso_8601": "2020-03-03T05:16:40.163371Z", "url": "https://files.pythonhosted.org/packages/be/3c/1dfcbe2a2dafd98cf0be7637d961f54828d66b31d80ab730fd49d524af59/msp_python3-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f643f99ab260fed99c9ea06a29b57260", "sha256": "abb05f7613031722ce6436def56a56d9dd8fc8bb03e9b54cdc8c4381b238950e"}, "downloads": -1, "filename": "msp-python3-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f643f99ab260fed99c9ea06a29b57260", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6875, "upload_time": "2020-03-03T05:16:41", "upload_time_iso_8601": "2020-03-03T05:16:41.275228Z", "url": "https://files.pythonhosted.org/packages/81/11/ef447a0ef9b50a6612fff879a717d2aefcb4df2d9e13f8302f88bf127428/msp-python3-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ba5a3f034bd43760664d7351769f19e5", "sha256": "df5e2a8904a4da952b1f5cf7217ba9185e8d3636fb0c877f5dc88c7df09cd538"}, "downloads": -1, "filename": "msp_python3-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ba5a3f034bd43760664d7351769f19e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8177, "upload_time": "2020-03-04T05:01:50", "upload_time_iso_8601": "2020-03-04T05:01:50.918980Z", "url": "https://files.pythonhosted.org/packages/d2/66/e88cc6a3f724167fe3f66a55c4f8a316f63510a4379ff9ad84a82dbde2ff/msp_python3-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35cef7cde0120c60e582348b256e4161", "sha256": "af80b9275dca4b1aef28735645ca9a2083bd9949795106ab3a6922b37dd6121e"}, "downloads": -1, "filename": "msp-python3-0.2.0.tar.gz", "has_sig": false, "md5_digest": "35cef7cde0120c60e582348b256e4161", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7043, "upload_time": "2020-03-04T05:01:57", "upload_time_iso_8601": "2020-03-04T05:01:57.690202Z", "url": "https://files.pythonhosted.org/packages/7f/0e/0efbf7b64ddba633ef81da1e511fcc13c4a5827925260422faf95f49fd5b/msp-python3-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7d00c67d79c2b61949d0bc372e128a7c", "sha256": "13b74f38e456366ffb9aaeda84cd0c15521c649e16d4e6a03cbdb342ce689f0b"}, "downloads": -1, "filename": "msp_python3-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7d00c67d79c2b61949d0bc372e128a7c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8884, "upload_time": "2020-03-05T03:29:47", "upload_time_iso_8601": "2020-03-05T03:29:47.007844Z", "url": "https://files.pythonhosted.org/packages/04/a4/11be10b49e3bd2e1789794b1d6d08f88511dfb4c1346d6d1c952028bcbe9/msp_python3-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "683d47032f90b0799c4da80a109c2017", "sha256": "4cebf1c7d75c5596f4275f33f6cdd99275a2fdd61b7903cc13852cceaac90972"}, "downloads": -1, "filename": "msp-python3-0.2.1.tar.gz", "has_sig": false, "md5_digest": "683d47032f90b0799c4da80a109c2017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8387, "upload_time": "2020-03-05T03:32:13", "upload_time_iso_8601": "2020-03-05T03:32:13.584939Z", "url": "https://files.pythonhosted.org/packages/55/b3/c228712f8df13c0b2667319998217788bd7f9c6edc85a32bf3ab20d9f56c/msp-python3-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d00c67d79c2b61949d0bc372e128a7c", "sha256": "13b74f38e456366ffb9aaeda84cd0c15521c649e16d4e6a03cbdb342ce689f0b"}, "downloads": -1, "filename": "msp_python3-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7d00c67d79c2b61949d0bc372e128a7c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8884, "upload_time": "2020-03-05T03:29:47", "upload_time_iso_8601": "2020-03-05T03:29:47.007844Z", "url": "https://files.pythonhosted.org/packages/04/a4/11be10b49e3bd2e1789794b1d6d08f88511dfb4c1346d6d1c952028bcbe9/msp_python3-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "683d47032f90b0799c4da80a109c2017", "sha256": "4cebf1c7d75c5596f4275f33f6cdd99275a2fdd61b7903cc13852cceaac90972"}, "downloads": -1, "filename": "msp-python3-0.2.1.tar.gz", "has_sig": false, "md5_digest": "683d47032f90b0799c4da80a109c2017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8387, "upload_time": "2020-03-05T03:32:13", "upload_time_iso_8601": "2020-03-05T03:32:13.584939Z", "url": "https://files.pythonhosted.org/packages/55/b3/c228712f8df13c0b2667319998217788bd7f9c6edc85a32bf3ab20d9f56c/msp-python3-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:48 2020"}