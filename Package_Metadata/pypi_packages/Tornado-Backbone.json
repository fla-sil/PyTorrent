{"info": {"author": "Martin Martimeo", "author_email": "martin@martimeo.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Operating System :: OS Independent", "Programming Language :: JavaScript", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "tornado-backbone\n================\n\nCreate backbone models from sqlalchemy models.\n\nBackbone allows to represent your data as models in JavaScript.\nHowever you may not want to do your modeling twice in sqlalchemy aswell in backbone.\nTornado-Backbone approaches to generate the JavaScript models from your sqlalchemy orm.\n\nIt's main intention is to work with tornado-restless (and is compatible with flask-restless as api backend),\nso there are some specific 'hacks' for them.\n\nDevelopment Status\n==================\n\nThe implementation is currently still a bleeding edge without many documentation,\nbut I hope to provide a meaningful documentation soon.\n\nrequire\n=======\n\nTornado Backbone uses require.js for his depencies and for loading required models.\n\nThe shim we use in production looks like:\n\n    require.config({\n        baseUrl: '/static/',\n        paths: {\n            underscore: \"{{ handler.request.protocol }}://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.1/underscore-min\",\n            backbone: \"{{ handler.request.protocol }}://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min\",\n            \"backbone-forms\": \"{{ handler.request.protocol }}://cdnjs.cloudflare.com/ajax/libs/backbone-forms/0.12.0/backbone-forms\",\n            \"backbone-relational\": \"{{ handler.request.protocol }}://cdnjs.cloudflare.com/ajax/libs/backbone-relational/0.8.5/backbone-relational\"\n        },\n        shim: {\n            underscore: {\n                exports: '_'\n            },\n            backbone: {\n                deps: [\"underscore\", \"jquery\"],\n                exports: \"Backbone\"\n            },\n            \"backbone-forms\": {\n                deps: [\"backbone\"]\n            },\n            \"backbone-relational\": {\n                deps: [\"backbone\"]\n            }\n        }\n    });\n\n\nbackbone-forms\n==============\n\nA version of Backbone-Forms is included in the distribution folder, a copy of it can be\nobtained from https://github.com/powmedia/backbone-forms . Note that you must include the list\neditor as soon as you use relationship properties.\n\nIf you want to have support for backbone-forms include the `form.js`.\nTornado Backbone exposes all information of the `info` dict as schema attribute in the backbone model\n and falls back on some defaults if there is no information (like for integer).\nFor interaction with backbone-forms you can define for example your column like:\n\n    class User(Base):\n        email = Column(String, info={'type': 'Text', 'dataType': 'email', 'validators': ['email']})\n\nAnd then create a form like:\n\n    require(['/api/js/user'], function () {\n        var user = new UserModel();\n\n        var form = new Backbone.Form({\n            model: user\n        }).render();\n        $('body').append(form.el);\n    }\n\nOr directly use a bootstrap similiar approach:\n\n    <form data-require=\"/api/js/user\" data-model=\"UserModel\">\n      <legend>User Form</legend>\n\n      <!-- Form content will be injecked here, any existing content is preserved -->\n      <div data-fields=\"email\"></div>\n    </form>\n\nAll options for Backbone.Form can be passed as data-\\* attributes.\nIf you have relations in your model that you want to use, it may require to load the depencies:\n\n    class UserTitle(Base):\n        id: Column(Integer)\n        title: Column(String)\n\n    class User(Base):\n        title_id = Column(ForeignId(UserTitle.id))\n        title = relationship(UserTitle)\n        email = Column(String, info={'type': 'Text', 'dataType': 'email', 'validators': ['email']})\n\nLeads to displaying a form with email and title:\n\n    <form data-require=\"/api/js/user_title /api/js/user\" data-model=\"UserModel\">\n      <legend>User Form</legend>\n\n      <div data-fields=\"title\"></div> <!-- Select Box with Title -->\n      <div data-fields=\"email\"></div> <!-- Text Box with Validator for email -->\n    </form>\n\nbackbone-relations\n==================\n\nTornado Backbone exposes relations in a backbone-relations compatible way.\nIf you include `relations.js` in your project all models will be based on Backbone.RelationalModel\n\nCopyright license\n=================\n\ntornado-backbone is licensed under the GNU Affero General Public License, for more information see the LICENSE.txt.\n\nInstalling\n==========\n\ntornado-backbone was developed under python3.3, sqlalchemy0.9 and tornado3.1\n\nIt may work with sqlalchemy 0.8 and older tornado releases but I did not test it at all.\n\nTo install this libary as an egg use:\n\n    python setup.py install", "description_content_type": null, "docs_url": null, "download_url": "http://pypi.python.org/pypi/Tornado-Backbone", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MartinMartimeo/tornado-backbone", "keywords": null, "license": "GNU AGPLv3+", "maintainer": null, "maintainer_email": null, "name": "Tornado-Backbone", "package_url": "https://pypi.org/project/Tornado-Backbone/", "platform": "any", "project_url": "https://pypi.org/project/Tornado-Backbone/", "project_urls": {"Download": "http://pypi.python.org/pypi/Tornado-Backbone", "Homepage": "https://github.com/MartinMartimeo/tornado-backbone"}, "release_url": "https://pypi.org/project/Tornado-Backbone/0.2.2/", "requires_dist": null, "requires_python": null, "summary": "backbone models from sqlalchemy orm for tornado-restless", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            tornado-backbone<br>================<br><br>Create backbone models from sqlalchemy models.<br><br>Backbone allows to represent your data as models in JavaScript.<br>However you may not want to do your modeling twice in sqlalchemy aswell in backbone.<br>Tornado-Backbone approaches to generate the JavaScript models from your sqlalchemy orm.<br><br>It's main intention is to work with tornado-restless (and is compatible with flask-restless as api backend),<br>so there are some specific 'hacks' for them.<br><br>Development Status<br>==================<br><br>The implementation is currently still a bleeding edge without many documentation,<br>but I hope to provide a meaningful documentation soon.<br><br>require<br>=======<br><br>Tornado Backbone uses require.js for his depencies and for loading required models.<br><br>The shim we use in production looks like:<br><br>    require.config({<br>        baseUrl: '/static/',<br>        paths: {<br>            underscore: \"{{ handler.request.protocol }}://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.1/underscore-min\",<br>            backbone: \"{{ handler.request.protocol }}://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.0.0/backbone-min\",<br>            \"backbone-forms\": \"{{ handler.request.protocol }}://cdnjs.cloudflare.com/ajax/libs/backbone-forms/0.12.0/backbone-forms\",<br>            \"backbone-relational\": \"{{ handler.request.protocol }}://cdnjs.cloudflare.com/ajax/libs/backbone-relational/0.8.5/backbone-relational\"<br>        },<br>        shim: {<br>            underscore: {<br>                exports: '_'<br>            },<br>            backbone: {<br>                deps: [\"underscore\", \"jquery\"],<br>                exports: \"Backbone\"<br>            },<br>            \"backbone-forms\": {<br>                deps: [\"backbone\"]<br>            },<br>            \"backbone-relational\": {<br>                deps: [\"backbone\"]<br>            }<br>        }<br>    });<br><br><br>backbone-forms<br>==============<br><br>A version of Backbone-Forms is included in the distribution folder, a copy of it can be<br>obtained from https://github.com/powmedia/backbone-forms . Note that you must include the list<br>editor as soon as you use relationship properties.<br><br>If you want to have support for backbone-forms include the `form.js`.<br>Tornado Backbone exposes all information of the `info` dict as schema attribute in the backbone model<br> and falls back on some defaults if there is no information (like for integer).<br>For interaction with backbone-forms you can define for example your column like:<br><br>    class User(Base):<br>        email = Column(String, info={'type': 'Text', 'dataType': 'email', 'validators': ['email']})<br><br>And then create a form like:<br><br>    require(['/api/js/user'], function () {<br>        var user = new UserModel();<br><br>        var form = new Backbone.Form({<br>            model: user<br>        }).render();<br>        $('body').append(form.el);<br>    }<br><br>Or directly use a bootstrap similiar approach:<br><br>    &lt;form data-require=\"/api/js/user\" data-model=\"UserModel\"&gt;<br>      &lt;legend&gt;User Form&lt;/legend&gt;<br><br>      &lt;!-- Form content will be injecked here, any existing content is preserved --&gt;<br>      &lt;div data-fields=\"email\"&gt;&lt;/div&gt;<br>    &lt;/form&gt;<br><br>All options for Backbone.Form can be passed as data-\\* attributes.<br>If you have relations in your model that you want to use, it may require to load the depencies:<br><br>    class UserTitle(Base):<br>        id: Column(Integer)<br>        title: Column(String)<br><br>    class User(Base):<br>        title_id = Column(ForeignId(UserTitle.id))<br>        title = relationship(UserTitle)<br>        email = Column(String, info={'type': 'Text', 'dataType': 'email', 'validators': ['email']})<br><br>Leads to displaying a form with email and title:<br><br>    &lt;form data-require=\"/api/js/user_title /api/js/user\" data-model=\"UserModel\"&gt;<br>      &lt;legend&gt;User Form&lt;/legend&gt;<br><br>      &lt;div data-fields=\"title\"&gt;&lt;/div&gt; &lt;!-- Select Box with Title --&gt;<br>      &lt;div data-fields=\"email\"&gt;&lt;/div&gt; &lt;!-- Text Box with Validator for email --&gt;<br>    &lt;/form&gt;<br><br>backbone-relations<br>==================<br><br>Tornado Backbone exposes relations in a backbone-relations compatible way.<br>If you include `relations.js` in your project all models will be based on Backbone.RelationalModel<br><br>Copyright license<br>=================<br><br>tornado-backbone is licensed under the GNU Affero General Public License, for more information see the LICENSE.txt.<br><br>Installing<br>==========<br><br>tornado-backbone was developed under python3.3, sqlalchemy0.9 and tornado3.1<br><br>It may work with sqlalchemy 0.8 and older tornado releases but I did not test it at all.<br><br>To install this libary as an egg use:<br><br>    python setup.py install\n          </div>"}, "last_serial": 986045, "releases": {"0.1.0": [], "0.2.0": [], "0.2.2": []}, "urls": [], "timestamp": "Fri May  8 03:49:54 2020"}