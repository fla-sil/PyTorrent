{"info": {"author": "Mark Sandstrom", "author_email": "mark@deliciouslynerdy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing"], "description": "factory_boy\n===========\n\n.. image:: https://secure.travis-ci.org/FactoryBoy/factory_boy.svg?branch=master\n    :target: https://travis-ci.org/FactoryBoy/factory_boy/\n\n.. image:: https://img.shields.io/pypi/v/factory_boy.svg\n    :target: https://factoryboy.readthedocs.io/en/latest/changelog.html\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/factory_boy.svg\n    :target: https://pypi.org/project/factory_boy/\n    :alt: Supported Python versions\n\n.. image:: https://img.shields.io/pypi/wheel/factory_boy.svg\n    :target: https://pypi.org/project/factory_boy/\n    :alt: Wheel status\n\n.. image:: https://img.shields.io/pypi/l/factory_boy.svg\n    :target: https://pypi.org/project/factory_boy/\n    :alt: License\n\nfactory_boy is a fixtures replacement based on thoughtbot's `factory_bot <https://github.com/thoughtbot/factory_bot>`_.\n\nAs a fixtures replacement tool, it aims to replace static, hard to maintain fixtures\nwith easy-to-use factories for complex object.\n\nInstead of building an exhaustive test setup with every possible combination of corner cases,\n``factory_boy`` allows you to use objects customized for the current test,\nwhile only declaring the test-specific fields:\n\n.. code-block:: python\n\n    class FooTests(unittest.TestCase):\n\n        def test_with_factory_boy(self):\n            # We need a 200\u20ac, paid order, shipping to australia, for a VIP customer\n            order = OrderFactory(\n                amount=200,\n                status='PAID',\n                customer__is_vip=True,\n                address__country='AU',\n            )\n            # Run the tests here\n\n        def test_without_factory_boy(self):\n            address = Address(\n                street=\"42 fubar street\",\n                zipcode=\"42Z42\",\n                city=\"Sydney\",\n                country=\"AU\",\n            )\n            customer = Customer(\n                first_name=\"John\",\n                last_name=\"Doe\",\n                phone=\"+1234\",\n                email=\"john.doe@example.org\",\n                active=True,\n                is_vip=True,\n                address=address,\n            )\n            # etc.\n\nfactory_boy is designed to work well with various ORMs (Django, Mongo, SQLAlchemy),\nand can easily be extended for other libraries.\n\nIts main features include:\n\n- Straightforward declarative syntax\n- Chaining factory calls while retaining the global context\n- Support for multiple build strategies (saved/unsaved instances, stubbed objects)\n- Multiple factories per class support, including inheritance\n\n\nLinks\n-----\n\n* Documentation: https://factoryboy.readthedocs.io/\n* Repository: https://github.com/FactoryBoy/factory_boy\n* Package: https://pypi.org/project/factory_boy/\n* Mailing-list: `factoryboy@googlegroups.com <mailto:factoryboy@googlegroups.com>`_ | https://groups.google.com/forum/#!forum/factoryboy\n\nfactory_boy supports Python 2.7, 3.4 to 3.7, as well as PyPy 2.7 and 5.8.\n\n\nDownload\n--------\n\nPyPI: https://pypi.org/project/factory_boy/\n\n.. code-block:: sh\n\n    $ pip install factory_boy\n\nSource: https://github.com/FactoryBoy/factory_boy/\n\n.. code-block:: sh\n\n    $ git clone git://github.com/FactoryBoy/factory_boy/\n    $ python setup.py install\n\n\nUsage\n-----\n\n\n.. note:: This section provides a quick summary of factory_boy features.\n          A more detailed listing is available in the full documentation.\n\n\nDefining factories\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nFactories declare a set of attributes used to instantiate an object.\nThe class of the object must be defined in the ``model`` field of a ``class Meta:`` attribute:\n\n.. code-block:: python\n\n    import factory\n    from . import models\n\n    class UserFactory(factory.Factory):\n        class Meta:\n            model = models.User\n\n        first_name = 'John'\n        last_name = 'Doe'\n        admin = False\n\n    # Another, different, factory for the same object\n    class AdminFactory(factory.Factory):\n        class Meta:\n            model = models.User\n\n        first_name = 'Admin'\n        last_name = 'User'\n        admin = True\n\n\nUsing factories\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nfactory_boy supports several different build strategies: build, create, and stub:\n\n.. code-block:: python\n\n    # Returns a User instance that's not saved\n    user = UserFactory.build()\n\n    # Returns a saved User instance\n    user = UserFactory.create()\n\n    # Returns a stub object (just a bunch of attributes)\n    obj = UserFactory.stub()\n\n\nYou can use the Factory class as a shortcut for the default build strategy:\n\n.. code-block:: python\n\n    # Same as UserFactory.create()\n    user = UserFactory()\n\n\nNo matter which strategy is used, it's possible to override the defined attributes by passing keyword arguments:\n\n.. code-block:: pycon\n\n    # Build a User instance and override first_name\n    >>> user = UserFactory.build(first_name='Joe')\n    >>> user.first_name\n    \"Joe\"\n\n\nIt is also possible to create a bunch of objects in a single call:\n\n.. code-block:: pycon\n\n    >>> users = UserFactory.build_batch(10, first_name=\"Joe\")\n    >>> len(users)\n    10\n    >>> [user.first_name for user in users]\n    [\"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\"]\n\n\nRealistic, random values\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nDemos look better with random yet realistic values; and those realistic values can also help discover bugs.\nFor this, factory_boy relies on the excellent `faker <https://faker.readthedocs.io/en/latest/>`_ library:\n\n.. code-block:: python\n\n    class RandomUserFactory(factory.Factory):\n        class Meta:\n            model = models.User\n\n        first_name = factory.Faker('first_name')\n        last_name = factory.Faker('last_name')\n\n.. code-block:: pycon\n\n    >>> UserFactory()\n    <User: Lucy Murray>\n\n\nReproducible random values\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe use of fully randomized data in tests is quickly a problem for reproducing broken builds.\nTo that purpose, factory_boy provides helpers to handle the random seeds it uses, located in the ``factory.random`` module:\n\n.. code-block:: python\n\n    import factory.random\n\n    def setup_test_environment():\n        factory.random.reseed_random('my_awesome_project')\n        # Other setup here\n\n\nLazy Attributes\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nMost factory attributes can be added using static values that are evaluated when the factory is defined,\nbut some attributes (such as fields whose value is computed from other elements)\nwill need values assigned each time an instance is generated.\n\nThese \"lazy\" attributes can be added as follows:\n\n.. code-block:: python\n\n    class UserFactory(factory.Factory):\n        class Meta:\n            model = models.User\n\n        first_name = 'Joe'\n        last_name = 'Blow'\n        email = factory.LazyAttribute(lambda a: '{0}.{1}@example.com'.format(a.first_name, a.last_name).lower())\n        date_joined = factory.LazyFunction(datetime.now)\n\n.. code-block:: pycon\n\n    >>> UserFactory().email\n    \"joe.blow@example.com\"\n\n\n.. note:: ``LazyAttribute`` calls the function with the object being constructed as an argument, when\n          ``LazyFunction`` does not send any argument.\n\n\nSequences\n\"\"\"\"\"\"\"\"\"\n\nUnique values in a specific format (for example, e-mail addresses) can be generated using sequences. Sequences are defined by using ``Sequence`` or the decorator ``sequence``:\n\n.. code-block:: python\n\n    class UserFactory(factory.Factory):\n        class Meta:\n            model = models.User\n\n        email = factory.Sequence(lambda n: 'person{0}@example.com'.format(n))\n\n    >>> UserFactory().email\n    'person0@example.com'\n    >>> UserFactory().email\n    'person1@example.com'\n\n\nAssociations\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nSome objects have a complex field, that should itself be defined from a dedicated factories.\nThis is handled by the ``SubFactory`` helper:\n\n.. code-block:: python\n\n    class PostFactory(factory.Factory):\n        class Meta:\n            model = models.Post\n\n        author = factory.SubFactory(UserFactory)\n\n\nThe associated object's strategy will be used:\n\n\n.. code-block:: python\n\n    # Builds and saves a User and a Post\n    >>> post = PostFactory()\n    >>> post.id is None  # Post has been 'saved'\n    False\n    >>> post.author.id is None  # post.author has been saved\n    False\n\n    # Builds but does not save a User, and then builds but does not save a Post\n    >>> post = PostFactory.build()\n    >>> post.id is None\n    True\n    >>> post.author.id is None\n    True\n\n\nORM Support\n\"\"\"\"\"\"\"\"\"\"\"\n\nfactory_boy has specific support for a few ORMs, through specific ``factory.Factory`` subclasses:\n\n* Django, with ``factory.django.DjangoModelFactory``\n* Mogo, with ``factory.mogo.MogoFactory``\n* MongoEngine, with ``factory.mongoengine.MongoEngineFactory``\n* SQLAlchemy, with ``factory.alchemy.SQLAlchemyModelFactory``\n\n\nDebugging factory_boy\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nDebugging factory_boy can be rather complex due to the long chains of calls.\nDetailed logging is available through the ``factory`` logger.\n\nA helper, `factory.debug()`, is available to ease debugging:\n\n.. code-block:: python\n\n    with factory.debug():\n        obj = TestModel2Factory()\n\n\n    import logging\n    logger = logging.getLogger('factory')\n    logger.addHandler(logging.StreamHandler())\n    logger.setLevel(logging.DEBUG)\n\nThis will yield messages similar to those (artificial indentation):\n\n.. code-block:: ini\n\n    BaseFactory: Preparing tests.test_using.TestModel2Factory(extra={})\n      LazyStub: Computing values for tests.test_using.TestModel2Factory(two=<OrderedDeclarationWrapper for <factory.declarations.SubFactory object at 0x1e15610>>)\n        SubFactory: Instantiating tests.test_using.TestModelFactory(__containers=(<LazyStub for tests.test_using.TestModel2Factory>,), one=4), create=True\n        BaseFactory: Preparing tests.test_using.TestModelFactory(extra={'__containers': (<LazyStub for tests.test_using.TestModel2Factory>,), 'one': 4})\n          LazyStub: Computing values for tests.test_using.TestModelFactory(one=4)\n          LazyStub: Computed values, got tests.test_using.TestModelFactory(one=4)\n        BaseFactory: Generating tests.test_using.TestModelFactory(one=4)\n      LazyStub: Computed values, got tests.test_using.TestModel2Factory(two=<tests.test_using.TestModel object at 0x1e15410>)\n    BaseFactory: Generating tests.test_using.TestModel2Factory(two=<tests.test_using.TestModel object at 0x1e15410>)\n\n\nContributing\n------------\n\nfactory_boy is distributed under the MIT License.\n\nIssues should be opened through `GitHub Issues <https://github.com/FactoryBoy/factory_boy/issues/>`_; whenever possible, a pull request should be included.\nQuestions and suggestions are welcome on the `mailing-list <mailto:factoryboy@googlegroups.com>`_.\n\nAll pull request should pass the test suite, which can be launched simply with:\n\n.. code-block:: sh\n\n    $ make test\n\n\n\nIn order to test coverage, please use:\n\n.. code-block:: sh\n\n    $ make coverage\n\n\nTo test with a specific framework version, you may use a ``tox`` target:\n\n.. code-block:: sh\n\n    # list all tox environments\n    $ tox --listenvs\n\n    # run tests inside a specific environment\n    $ tox -e py36-django20-alchemy13-mongoengine017\n\nValid options are:\n\n* ``DJANGO`` for ``Django``\n* ``MONGOENGINE`` for ``mongoengine``\n* ``ALCHEMY`` for ``SQLAlchemy``\n\n\nTo avoid running ``mongoengine`` tests (e.g no mongo server installed), run:\n\n.. code-block:: sh\n\n    $ make SKIP_MONGOENGINE=1 test\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FactoryBoy/factory_boy", "keywords": "factory_boy,factory,fixtures", "license": "MIT", "maintainer": "Rapha\u00ebl Barrois", "maintainer_email": "raphael.barrois+fboy@polytechnique.org", "name": "factory-boy", "package_url": "https://pypi.org/project/factory-boy/", "platform": "", "project_url": "https://pypi.org/project/factory-boy/", "project_urls": {"Homepage": "https://github.com/FactoryBoy/factory_boy"}, "release_url": "https://pypi.org/project/factory-boy/2.12.0/", "requires_dist": ["Faker (>=0.7.0)"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "A versatile test fixtures replacement based on thoughtbot's factory_bot for Ruby.", "version": "2.12.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/FactoryBoy/factory_boy/\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/FactoryBoy/factory_boy.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7872b14d804455012e36bd88097de9376621923b/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f466163746f7279426f792f666163746f72795f626f792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://factoryboy.readthedocs.io/en/latest/changelog.html\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9881f701696f0bda0a375c4e0c5f2c4e1c0a672e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666163746f72795f626f792e737667\"></a>\n<a href=\"https://pypi.org/project/factory_boy/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/674f24ea85332dcce057ac5d8f29f322d15a8198/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f666163746f72795f626f792e737667\"></a>\n<a href=\"https://pypi.org/project/factory_boy/\" rel=\"nofollow\"><img alt=\"Wheel status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba15e4c60d0c4bc1724a2ca41e3dbfd9661b3ccc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f666163746f72795f626f792e737667\"></a>\n<a href=\"https://pypi.org/project/factory_boy/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10bfb5d67bc052f1030973d078d9fa6b7076a284/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f666163746f72795f626f792e737667\"></a>\n<p>factory_boy is a fixtures replacement based on thoughtbot\u2019s <a href=\"https://github.com/thoughtbot/factory_bot\" rel=\"nofollow\">factory_bot</a>.</p>\n<p>As a fixtures replacement tool, it aims to replace static, hard to maintain fixtures\nwith easy-to-use factories for complex object.</p>\n<p>Instead of building an exhaustive test setup with every possible combination of corner cases,\n<tt>factory_boy</tt> allows you to use objects customized for the current test,\nwhile only declaring the test-specific fields:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FooTests</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_with_factory_boy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># We need a 200\u20ac, paid order, shipping to australia, for a VIP customer</span>\n        <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">OrderFactory</span><span class=\"p\">(</span>\n            <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n            <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s1\">'PAID'</span><span class=\"p\">,</span>\n            <span class=\"n\">customer__is_vip</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">address__country</span><span class=\"o\">=</span><span class=\"s1\">'AU'</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># Run the tests here</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_without_factory_boy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">Address</span><span class=\"p\">(</span>\n            <span class=\"n\">street</span><span class=\"o\">=</span><span class=\"s2\">\"42 fubar street\"</span><span class=\"p\">,</span>\n            <span class=\"n\">zipcode</span><span class=\"o\">=</span><span class=\"s2\">\"42Z42\"</span><span class=\"p\">,</span>\n            <span class=\"n\">city</span><span class=\"o\">=</span><span class=\"s2\">\"Sydney\"</span><span class=\"p\">,</span>\n            <span class=\"n\">country</span><span class=\"o\">=</span><span class=\"s2\">\"AU\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">customer</span> <span class=\"o\">=</span> <span class=\"n\">Customer</span><span class=\"p\">(</span>\n            <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"John\"</span><span class=\"p\">,</span>\n            <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">\"Doe\"</span><span class=\"p\">,</span>\n            <span class=\"n\">phone</span><span class=\"o\">=</span><span class=\"s2\">\"+1234\"</span><span class=\"p\">,</span>\n            <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s2\">\"john.doe@example.org\"</span><span class=\"p\">,</span>\n            <span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">is_vip</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"n\">address</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># etc.</span>\n</pre>\n<p>factory_boy is designed to work well with various ORMs (Django, Mongo, SQLAlchemy),\nand can easily be extended for other libraries.</p>\n<p>Its main features include:</p>\n<ul>\n<li>Straightforward declarative syntax</li>\n<li>Chaining factory calls while retaining the global context</li>\n<li>Support for multiple build strategies (saved/unsaved instances, stubbed objects)</li>\n<li>Multiple factories per class support, including inheritance</li>\n</ul>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li>Documentation: <a href=\"https://factoryboy.readthedocs.io/\" rel=\"nofollow\">https://factoryboy.readthedocs.io/</a></li>\n<li>Repository: <a href=\"https://github.com/FactoryBoy/factory_boy\" rel=\"nofollow\">https://github.com/FactoryBoy/factory_boy</a></li>\n<li>Package: <a href=\"https://pypi.org/project/factory_boy/\" rel=\"nofollow\">https://pypi.org/project/factory_boy/</a></li>\n<li>Mailing-list: <a href=\"mailto:factoryboy%40googlegroups.com\">factoryboy<span>@</span>googlegroups<span>.</span>com</a> | <a href=\"https://groups.google.com/forum/#!forum/factoryboy\" rel=\"nofollow\">https://groups.google.com/forum/#!forum/factoryboy</a></li>\n</ul>\n<p>factory_boy supports Python 2.7, 3.4 to 3.7, as well as PyPy 2.7 and 5.8.</p>\n</div>\n<div id=\"download\">\n<h2>Download</h2>\n<p>PyPI: <a href=\"https://pypi.org/project/factory_boy/\" rel=\"nofollow\">https://pypi.org/project/factory_boy/</a></p>\n<pre>$ pip install factory_boy\n</pre>\n<p>Source: <a href=\"https://github.com/FactoryBoy/factory_boy/\" rel=\"nofollow\">https://github.com/FactoryBoy/factory_boy/</a></p>\n<pre>$ git clone git://github.com/FactoryBoy/factory_boy/\n$ python setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div>\n<p>Note</p>\n<p>This section provides a quick summary of factory_boy features.\nA more detailed listing is available in the full documentation.</p>\n</div>\n<div id=\"defining-factories\">\n<h3>Defining factories</h3>\n<p>Factories declare a set of attributes used to instantiate an object.\nThe class of the object must be defined in the <tt>model</tt> field of a <tt>class Meta:</tt> attribute:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">factory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">User</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"s1\">'John'</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Doe'</span>\n    <span class=\"n\">admin</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Another, different, factory for the same object</span>\n<span class=\"k\">class</span> <span class=\"nc\">AdminFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">User</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Admin'</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"s1\">'User'</span>\n    <span class=\"n\">admin</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"using-factories\">\n<h3>Using factories</h3>\n<p>factory_boy supports several different build strategies: build, create, and stub:</p>\n<pre><span class=\"c1\"># Returns a User instance that's not saved</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserFactory</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Returns a saved User instance</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserFactory</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Returns a stub object (just a bunch of attributes)</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">UserFactory</span><span class=\"o\">.</span><span class=\"n\">stub</span><span class=\"p\">()</span>\n</pre>\n<p>You can use the Factory class as a shortcut for the default build strategy:</p>\n<pre><span class=\"c1\"># Same as UserFactory.create()</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserFactory</span><span class=\"p\">()</span>\n</pre>\n<p>No matter which strategy is used, it\u2019s possible to override the defined attributes by passing keyword arguments:</p>\n<pre><span class=\"go\"># Build a User instance and override first_name\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserFactory</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">'Joe'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">first_name</span>\n<span class=\"go\">\"Joe\"</span>\n</pre>\n<p>It is also possible to create a bunch of objects in a single call:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">UserFactory</span><span class=\"o\">.</span><span class=\"n\">build_batch</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"Joe\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span>\n<span class=\"go\">10\n</span><span class=\"p\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">first_name</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">]</span>\n<span class=\"go\">[\"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\", \"Joe\"]</span>\n</pre>\n</div>\n<div id=\"realistic-random-values\">\n<h3>Realistic, random values</h3>\n<p>Demos look better with random yet realistic values; and those realistic values can also help discover bugs.\nFor this, factory_boy relies on the excellent <a href=\"https://faker.readthedocs.io/en/latest/\" rel=\"nofollow\">faker</a> library:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">RandomUserFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">User</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Faker</span><span class=\"p\">(</span><span class=\"s1\">'first_name'</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Faker</span><span class=\"p\">(</span><span class=\"s1\">'last_name'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">UserFactory</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;User: Lucy Murray&gt;</span>\n</pre>\n</div>\n<div id=\"reproducible-random-values\">\n<h3>Reproducible random values</h3>\n<p>The use of fully randomized data in tests is quickly a problem for reproducing broken builds.\nTo that purpose, factory_boy provides helpers to handle the random seeds it uses, located in the <tt>factory.random</tt> module:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">factory.random</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">setup_test_environment</span><span class=\"p\">():</span>\n    <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">reseed_random</span><span class=\"p\">(</span><span class=\"s1\">'my_awesome_project'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Other setup here</span>\n</pre>\n</div>\n<div id=\"lazy-attributes\">\n<h3>Lazy Attributes</h3>\n<p>Most factory attributes can be added using static values that are evaluated when the factory is defined,\nbut some attributes (such as fields whose value is computed from other elements)\nwill need values assigned each time an instance is generated.</p>\n<p>These \u201clazy\u201d attributes can be added as follows:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">User</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Joe'</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Blow'</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">LazyAttribute</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{0}</span><span class=\"s1\">.</span><span class=\"si\">{1}</span><span class=\"s1\">@example.com'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n    <span class=\"n\">date_joined</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">LazyFunction</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">UserFactory</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">email</span>\n<span class=\"go\">\"joe.blow@example.com\"</span>\n</pre>\n<div>\n<p>Note</p>\n<p><tt>LazyAttribute</tt> calls the function with the object being constructed as an argument, when\n<tt>LazyFunction</tt> does not send any argument.</p>\n</div>\n</div>\n<div id=\"sequences\">\n<h3>Sequences</h3>\n<p>Unique values in a specific format (for example, e-mail addresses) can be generated using sequences. Sequences are defined by using <tt>Sequence</tt> or the decorator <tt>sequence</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">User</span>\n\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"s1\">'person</span><span class=\"si\">{0}</span><span class=\"s1\">@example.com'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">UserFactory</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">email</span>\n<span class=\"s1\">'person0@example.com'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">UserFactory</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">email</span>\n<span class=\"s1\">'person1@example.com'</span>\n</pre>\n</div>\n<div id=\"associations\">\n<h3>Associations</h3>\n<p>Some objects have a complex field, that should itself be defined from a dedicated factories.\nThis is handled by the <tt>SubFactory</tt> helper:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PostFactory</span><span class=\"p\">(</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">Factory</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Post</span>\n\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">SubFactory</span><span class=\"p\">(</span><span class=\"n\">UserFactory</span><span class=\"p\">)</span>\n</pre>\n<p>The associated object\u2019s strategy will be used:</p>\n<pre><span class=\"c1\"># Builds and saves a User and a Post</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">PostFactory</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Post has been 'saved'</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>  <span class=\"c1\"># post.author has been saved</span>\n<span class=\"kc\">False</span>\n\n<span class=\"c1\"># Builds but does not save a User, and then builds but does not save a Post</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">PostFactory</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"orm-support\">\n<h3>ORM Support</h3>\n<p>factory_boy has specific support for a few ORMs, through specific <tt>factory.Factory</tt> subclasses:</p>\n<ul>\n<li>Django, with <tt>factory.django.DjangoModelFactory</tt></li>\n<li>Mogo, with <tt>factory.mogo.MogoFactory</tt></li>\n<li>MongoEngine, with <tt>factory.mongoengine.MongoEngineFactory</tt></li>\n<li>SQLAlchemy, with <tt>factory.alchemy.SQLAlchemyModelFactory</tt></li>\n</ul>\n</div>\n<div id=\"debugging-factory-boy\">\n<h3>Debugging factory_boy</h3>\n<p>Debugging factory_boy can be rather complex due to the long chains of calls.\nDetailed logging is available through the <tt>factory</tt> logger.</p>\n<p>A helper, <cite>factory.debug()</cite>, is available to ease debugging:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">():</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">TestModel2Factory</span><span class=\"p\">()</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'factory'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">())</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n</pre>\n<p>This will yield messages similar to those (artificial indentation):</p>\n<pre><span class=\"na\">BaseFactory: Preparing tests.test_using.TestModel2Factory(extra</span><span class=\"o\">=</span><span class=\"s\">{})\n  LazyStub: Computing values for tests.test_using.TestModel2Factory(two=&lt;OrderedDeclarationWrapper for &lt;factory.declarations.SubFactory object at 0x1e15610&gt;&gt;)\n    SubFactory: Instantiating tests.test_using.TestModelFactory(__containers=(&lt;LazyStub for tests.test_using.TestModel2Factory&gt;,), one=4), create=True\n    BaseFactory: Preparing tests.test_using.TestModelFactory(extra={'__containers': (&lt;LazyStub for tests.test_using.TestModel2Factory&gt;,), 'one': 4})\n      LazyStub: Computing values for tests.test_using.TestModelFactory(one=4)\n      LazyStub: Computed values, got tests.test_using.TestModelFactory(one=4)\n    BaseFactory: Generating tests.test_using.TestModelFactory(one=4)\n  LazyStub: Computed values, got tests.test_using.TestModel2Factory(two=&lt;tests.test_using.TestModel object at 0x1e15410&gt;)</span>\n<span class=\"na\">BaseFactory: Generating tests.test_using.TestModel2Factory(two</span><span class=\"o\">=</span><span class=\"s\">&lt;tests.test_using.TestModel object at 0x1e15410&gt;)</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>factory_boy is distributed under the MIT License.</p>\n<p>Issues should be opened through <a href=\"https://github.com/FactoryBoy/factory_boy/issues/\" rel=\"nofollow\">GitHub Issues</a>; whenever possible, a pull request should be included.\nQuestions and suggestions are welcome on the <a href=\"mailto:factoryboy%40googlegroups.com\">mailing-list</a>.</p>\n<p>All pull request should pass the test suite, which can be launched simply with:</p>\n<pre>$ make <span class=\"nb\">test</span>\n</pre>\n<p>In order to test coverage, please use:</p>\n<pre>$ make coverage\n</pre>\n<p>To test with a specific framework version, you may use a <tt>tox</tt> target:</p>\n<pre><span class=\"c1\"># list all tox environments\n</span>$ tox --listenvs\n\n<span class=\"c1\"># run tests inside a specific environment\n</span>$ tox -e py36-django20-alchemy13-mongoengine017\n</pre>\n<p>Valid options are:</p>\n<ul>\n<li><tt>DJANGO</tt> for <tt>Django</tt></li>\n<li><tt>MONGOENGINE</tt> for <tt>mongoengine</tt></li>\n<li><tt>ALCHEMY</tt> for <tt>SQLAlchemy</tt></li>\n</ul>\n<p>To avoid running <tt>mongoengine</tt> tests (e.g no mongo server installed), run:</p>\n<pre>$ make <span class=\"nv\">SKIP_MONGOENGINE</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"nb\">test</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5256274, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0d81ef73d6446e0e26ac7ce593b8a2a9", "sha256": "014b8868502151d82e38844449ba6d883003e091afbd0b75828d972eac2e4d31"}, "downloads": -1, "filename": "factory_boy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0d81ef73d6446e0e26ac7ce593b8a2a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4934, "upload_time": "2010-08-22T21:03:50", "upload_time_iso_8601": "2010-08-22T21:03:50.284541Z", "url": "https://files.pythonhosted.org/packages/75/d5/540ec1db22ada0fd5774c935059d3ecf8cddb85c1523db68d997ee79f96c/factory_boy-1.0.0.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "d72054134529453dbbcb86a4805527ff", "sha256": "923416592bc38d63bdfb93a56cb540a1ba230e80a1aa22f1eacc7bc37a2b1593"}, "downloads": -1, "filename": "factory_boy-1.0.4.tar.gz", "has_sig": false, "md5_digest": "d72054134529453dbbcb86a4805527ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8761, "upload_time": "2011-12-22T01:44:57", "upload_time_iso_8601": "2011-12-22T01:44:57.252235Z", "url": "https://files.pythonhosted.org/packages/53/4c/3b73729e29bdaa1b85e6773bf0fd7f9351bf67ef4b17617373abd7d82a54/factory_boy-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d69ae2ec17cae2f865ae97dd4b469978", "sha256": "a796a9854482e6ff2d7c13b79c4d2b2da5048cb0cb685857f15b43295c885aef"}, "downloads": -1, "filename": "factory_boy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d69ae2ec17cae2f865ae97dd4b469978", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12361, "upload_time": "2012-02-24T01:12:07", "upload_time_iso_8601": "2012-02-24T01:12:07.446237Z", "url": "https://files.pythonhosted.org/packages/36/4b/a57b75bf9cb9badd209c73f2633788c2ff9ee639bb143271a27c3b252261/factory_boy-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "51ed688648d4bf8e588e3f1d814c16fa", "sha256": "30019d60a7edf64641cfc3c9a1f6ece4267652948422da7caf9f165272add0f2"}, "downloads": -1, "filename": "factory_boy-1.1.1.tar.gz", "has_sig": false, "md5_digest": "51ed688648d4bf8e588e3f1d814c16fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12548, "upload_time": "2012-02-24T09:50:36", "upload_time_iso_8601": "2012-02-24T09:50:36.639110Z", "url": "https://files.pythonhosted.org/packages/74/28/a170b6d16945337588220da9ed6740ded1b6dacabb06f5e5e775ce0c063c/factory_boy-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "64d677c2830c8639591df227b42eae9d", "sha256": "c49b25f78dc74075187f3fd6e7dab2c0fae6f324c3af02c106777d04f12714d2"}, "downloads": -1, "filename": "factory_boy-1.1.2.tar.gz", "has_sig": false, "md5_digest": "64d677c2830c8639591df227b42eae9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19222, "upload_time": "2012-03-09T22:22:43", "upload_time_iso_8601": "2012-03-09T22:22:43.366195Z", "url": "https://files.pythonhosted.org/packages/52/58/633722977d6594714ba9fbc8d3e41a8b0225cbbadedb1e6779387945b371/factory_boy-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "5aff77ed4423dc29736c018f9282f05a", "sha256": "68602106da99e2bfc1bd014079b92689b96d79acd32b7c5192c145dd4fa3f0d3"}, "downloads": -1, "filename": "factory_boy-1.1.3.tar.gz", "has_sig": false, "md5_digest": "5aff77ed4423dc29736c018f9282f05a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25874, "upload_time": "2012-03-09T22:34:08", "upload_time_iso_8601": "2012-03-09T22:34:08.640592Z", "url": "https://files.pythonhosted.org/packages/0a/c1/9fe3f57aeb4bf59a6def229a170c0a4a0a6bf7ba67afcaa9531e59be27b1/factory_boy-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "8fa9d4fdb92f6f0a8eb03983449a5b27", "sha256": "e8c7333735ed1969a464788eba9cff2b1448141437a2e31e01502c86dc5841ca"}, "downloads": -1, "filename": "factory_boy-1.1.4.tar.gz", "has_sig": false, "md5_digest": "8fa9d4fdb92f6f0a8eb03983449a5b27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30688, "upload_time": "2012-06-19T12:44:13", "upload_time_iso_8601": "2012-06-19T12:44:13.282342Z", "url": "https://files.pythonhosted.org/packages/1b/5d/6b1b873d98e8c404d6d7a53df9676df3f9910b1ff04b11eb99454afee9e1/factory_boy-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "cccbf2975c3dc68c6f81a1b075f11a80", "sha256": "1f4133bbcc53c8dfb30363690c17e0a34bc79eaa08b285b0f0090c55c7c416e6"}, "downloads": -1, "filename": "factory_boy-1.1.5.tar.gz", "has_sig": false, "md5_digest": "cccbf2975c3dc68c6f81a1b075f11a80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31654, "upload_time": "2012-07-09T20:28:49", "upload_time_iso_8601": "2012-07-09T20:28:49.138328Z", "url": "https://files.pythonhosted.org/packages/38/4c/e33ffc707367d4756e8ea93d7dfe7729e2695fa88bc857e24132a5514bb8/factory_boy-1.1.5.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "5884ff6ec211fef9a21c71649d0acaf6", "sha256": "a5d69a4d7ca8fde1d52cabdce63d11dc2d753d3c533e400694e45f2a952d33b7"}, "downloads": -1, "filename": "factory_boy-1.2.0.tar.gz", "has_sig": false, "md5_digest": "5884ff6ec211fef9a21c71649d0acaf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32693, "upload_time": "2012-08-09T02:20:48", "upload_time_iso_8601": "2012-08-09T02:20:48.230305Z", "url": "https://files.pythonhosted.org/packages/32/39/592c601b044530c63800c27fde93dbca20a43f14b4ed4398145f0fd6d309/factory_boy-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "74f8387a4b7da014da0e8a1bda1c990a", "sha256": "bd5d87634946c8831c0d1389b5995da5dd64ccd97088eebc311eb0c9ef75ae3b"}, "downloads": -1, "filename": "factory_boy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "74f8387a4b7da014da0e8a1bda1c990a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49088, "upload_time": "2013-03-11T16:24:10", "upload_time_iso_8601": "2013-03-11T16:24:10.128414Z", "url": "https://files.pythonhosted.org/packages/22/64/e2e795c7050e289058ccfd407397202ee7e811eceb5c70a852ffe94da345/factory_boy-1.3.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "6e99a7f950298e77e888b88b96ee2879", "sha256": "0567b0bd141842b02722deeaa2409408da9f21faabf773e8ce3ff70238d9abc0"}, "downloads": -1, "filename": "factory_boy-2.0.0.tar.gz", "has_sig": false, "md5_digest": "6e99a7f950298e77e888b88b96ee2879", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52016, "upload_time": "2013-04-15T21:23:04", "upload_time_iso_8601": "2013-04-15T21:23:04.743349Z", "url": "https://files.pythonhosted.org/packages/9c/7a/7922818b2feff88d7a422be2082784f74d6fc496249dcf588fec8653b517/factory_boy-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "2a02155a13149aebe53dd98826d1e316", "sha256": "28f3a1e37459968cad8593e9dcdc0b5edc67af7326c9d38b65595b5c67b4b948"}, "downloads": -1, "filename": "factory_boy-2.0.1.tar.gz", "has_sig": false, "md5_digest": "2a02155a13149aebe53dd98826d1e316", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52130, "upload_time": "2013-04-16T09:20:49", "upload_time_iso_8601": "2013-04-16T09:20:49.977027Z", "url": "https://files.pythonhosted.org/packages/4e/a3/1e34e69ad4c230f62a0715db04ad4f244bfb350ebca8c805a01177ce9453/factory_boy-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "3c33cb6066592e606510761e92a7cbec", "sha256": "427427118e2c5e230b0b8e50424fff1d300d6c56f4035d15d2a967c3028d2c60"}, "downloads": -1, "filename": "factory_boy-2.0.2.tar.gz", "has_sig": false, "md5_digest": "3c33cb6066592e606510761e92a7cbec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52307, "upload_time": "2013-04-16T09:33:44", "upload_time_iso_8601": "2013-04-16T09:33:44.639109Z", "url": "https://files.pythonhosted.org/packages/f3/e8/c63483b1a5556a9f2ef31b064c7a10ccaf2eca18384c9f24fe68274957bb/factory_boy-2.0.2.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "077903d84c81c5dfd07ce8b5ef605958", "sha256": "30ffc8a896969c91f2b132139dabd5a33e1e3e89389ec725ecb7fe21faa74fa6"}, "downloads": -1, "filename": "factory_boy-2.1.0.tar.gz", "has_sig": false, "md5_digest": "077903d84c81c5dfd07ce8b5ef605958", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67427, "upload_time": "2013-06-26T23:35:34", "upload_time_iso_8601": "2013-06-26T23:35:34.332836Z", "url": "https://files.pythonhosted.org/packages/c8/8c/f08452e0e3c8d6a9a589a0cc9f019267ee07a402173ce088b7b1d0038b6a/factory_boy-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "bf252ff4e5f72d25b62fd316772c872f", "sha256": "98880c0c564df9712d37e18ba108e087f0114e67c3b57dc573cc0d0fbd7d9cf2"}, "downloads": -1, "filename": "factory_boy-2.1.1.tar.gz", "has_sig": false, "md5_digest": "bf252ff4e5f72d25b62fd316772c872f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67653, "upload_time": "2013-07-02T09:36:15", "upload_time_iso_8601": "2013-07-02T09:36:15.997409Z", "url": "https://files.pythonhosted.org/packages/f1/e2/ddb7f640b19286e0555e4252726bfc53c37359d9e4e80926a6de120d86c1/factory_boy-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "fc3d8e3c349be225ee8a96e772b87455", "sha256": "561d9986e9dbf77efa0e3c4907d4558c95ec092a04459c79450ad718fba53b80"}, "downloads": -1, "filename": "factory_boy-2.1.2.tar.gz", "has_sig": false, "md5_digest": "fc3d8e3c349be225ee8a96e772b87455", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68457, "upload_time": "2013-08-14T16:03:33", "upload_time_iso_8601": "2013-08-14T16:03:33.016301Z", "url": "https://files.pythonhosted.org/packages/83/15/1e1febbf4a7b12377837692c3e64e62ae5905d4382595aa737df931a18fb/factory_boy-2.1.2.tar.gz", "yanked": false}], "2.10.0": [{"comment_text": "", "digests": {"md5": "c58c0e383b7f4661e52d5483bb6de940", "sha256": "be2abc8092294e4097935a29b4e37f5b9ed3e4205e2e32df215c0315b625995e"}, "downloads": -1, "filename": "factory_boy-2.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c58c0e383b7f4661e52d5483bb6de940", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 41307, "upload_time": "2018-01-28T22:55:46", "upload_time_iso_8601": "2018-01-28T22:55:46.264868Z", "url": "https://files.pythonhosted.org/packages/c4/ba/dc416e59b9f02da600c36125591ef2f2bd32a54dde405d6d3969abb09341/factory_boy-2.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a62d97d9fd12162080dd83aaa43c1651", "sha256": "bd5a096d0f102d79b6c78cef1c8c0b650f2e1a3ecba351c735c6d2df8dabd29c"}, "downloads": -1, "filename": "factory_boy-2.10.0.tar.gz", "has_sig": false, "md5_digest": "a62d97d9fd12162080dd83aaa43c1651", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 42769, "upload_time": "2018-01-28T22:55:47", "upload_time_iso_8601": "2018-01-28T22:55:47.976710Z", "url": "https://files.pythonhosted.org/packages/ea/b6/d94a2df8981af1698f7bc14820033cf288263212fc97980dea1a1a5a7eed/factory_boy-2.10.0.tar.gz", "yanked": false}], "2.11.0": [{"comment_text": "", "digests": {"md5": "e48e920fdcd84ec1ee062cd9cd55a330", "sha256": "3763ecabafb341df75b82f3a80c40747adef32d0288282c0c2db7a13e53c6944"}, "downloads": -1, "filename": "factory_boy-2.11.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e48e920fdcd84ec1ee062cd9cd55a330", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 36766, "upload_time": "2018-05-04T22:12:41", "upload_time_iso_8601": "2018-05-04T22:12:41.822464Z", "url": "https://files.pythonhosted.org/packages/90/68/e63cac9e36f9204c8b01d1bbe6108c4a09fbd674033017caa2cf61d0b993/factory_boy-2.11.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22c024823e192adc93420e6bb7707544", "sha256": "d0f7209473312c99dfcf154069a1c559d83cfcae0979af43cf8779c9a9f645b3"}, "downloads": -1, "filename": "factory_boy-2.11.0.tar.gz", "has_sig": false, "md5_digest": "22c024823e192adc93420e6bb7707544", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 43175, "upload_time": "2018-05-04T22:12:43", "upload_time_iso_8601": "2018-05-04T22:12:43.634445Z", "url": "https://files.pythonhosted.org/packages/0c/fb/0ae25d4e6ed9dd8d05fb5168b27c72b307d0c34b38c93dae569a40ce1a27/factory_boy-2.11.0.tar.gz", "yanked": false}], "2.11.1": [{"comment_text": "", "digests": {"md5": "20113693a55178f6ef1a901b38b3d559", "sha256": "d552cb872b310ae78bd7429bf318e42e1e903b1a109e899a523293dfa762ea4f"}, "downloads": -1, "filename": "factory_boy-2.11.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "20113693a55178f6ef1a901b38b3d559", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 36795, "upload_time": "2018-05-05T15:05:40", "upload_time_iso_8601": "2018-05-05T15:05:40.728162Z", "url": "https://files.pythonhosted.org/packages/19/6c/b2ac85b3f0b48ac968af3741c4f020bf272ab9dabbd1643e9c719441099a/factory_boy-2.11.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34f7141c95dddac5e1384935a75e9d82", "sha256": "6f25cc4761ac109efd503f096e2ad99421b1159f01a29dbb917359dcd68e08ca"}, "downloads": -1, "filename": "factory_boy-2.11.1.tar.gz", "has_sig": false, "md5_digest": "34f7141c95dddac5e1384935a75e9d82", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 43254, "upload_time": "2018-05-05T15:05:42", "upload_time_iso_8601": "2018-05-05T15:05:42.587345Z", "url": "https://files.pythonhosted.org/packages/d5/b4/649fc4bfd0daf308b5cd10bfa51c50bfa4c4c79e091ed301aca69ef6780e/factory_boy-2.11.1.tar.gz", "yanked": false}], "2.12.0": [{"comment_text": "", "digests": {"md5": "389fbad709658f2b7e42a0504dd6fb80", "sha256": "728df59b372c9588b83153facf26d3d28947fc750e8e3c95cefa9bed0e6394ee"}, "downloads": -1, "filename": "factory_boy-2.12.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "389fbad709658f2b7e42a0504dd6fb80", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 36911, "upload_time": "2019-05-11T14:39:40", "upload_time_iso_8601": "2019-05-11T14:39:40.493611Z", "url": "https://files.pythonhosted.org/packages/63/c3/e4d5ed760f09f5dfb6ebbc44e22801a5fa9fcad9158f5ec59d8304092833/factory_boy-2.12.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcd752dc821c5d7ee91b5733e4ed9ad0", "sha256": "faf48d608a1735f0d0a3c9cbf536d64f9132b547dae7ba452c4d99a79e84a370"}, "downloads": -1, "filename": "factory_boy-2.12.0.tar.gz", "has_sig": false, "md5_digest": "bcd752dc821c5d7ee91b5733e4ed9ad0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 153557, "upload_time": "2019-05-11T14:39:42", "upload_time_iso_8601": "2019-05-11T14:39:42.384691Z", "url": "https://files.pythonhosted.org/packages/5d/28/9f2284328547a3e29b39422a0a138d118a57686c0b4479f00c72240668d7/factory_boy-2.12.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "636d065843eab938b5808688daecee83", "sha256": "32067e6d3a4ac15104acf6ecc26dffb7041e0613753607d2bb5b64295215ee18"}, "downloads": -1, "filename": "factory_boy-2.2.0.tar.gz", "has_sig": false, "md5_digest": "636d065843eab938b5808688daecee83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71664, "upload_time": "2013-09-24T18:55:32", "upload_time_iso_8601": "2013-09-24T18:55:32.053154Z", "url": "https://files.pythonhosted.org/packages/98/e7/b2a35cb11ac1892c6734ed23c86fa00ddcc0b104c9cf685adf0c80cba163/factory_boy-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "d95ee0c1b3864c0bd04a85b6dc846ce1", "sha256": "d94c63814195cae8ffad89046d425cdab414aecf2c0f2cb17c88cbe49bbb554c"}, "downloads": -1, "filename": "factory_boy-2.2.1.tar.gz", "has_sig": false, "md5_digest": "d95ee0c1b3864c0bd04a85b6dc846ce1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71953, "upload_time": "2013-09-25T09:03:13", "upload_time_iso_8601": "2013-09-25T09:03:13.652645Z", "url": "https://files.pythonhosted.org/packages/a5/e0/fd7dfb42bb66192a033f575a7cbc3ddaa1386abda1f5451714cf53ffbba7/factory_boy-2.2.1.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "a6bb7ad6e1c279f0720167b009e19460", "sha256": "d808a212b4611d633217271dbc688981f24aa63682383383c65618ffb749dffe"}, "downloads": -1, "filename": "factory_boy-2.3.0.tar.gz", "has_sig": false, "md5_digest": "a6bb7ad6e1c279f0720167b009e19460", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73713, "upload_time": "2013-12-25T00:54:12", "upload_time_iso_8601": "2013-12-25T00:54:12.918554Z", "url": "https://files.pythonhosted.org/packages/db/15/1601c534047edeaeac294d33989771e0a5685e2927f04f6fed683519c14e/factory_boy-2.3.0.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "f3946c731555a96e5c849eef4fb0bcbb", "sha256": "2ee51f31a17ec70adca416ad4bf4a0645bdfff3718fd5ee561eeb04aeaea08eb"}, "downloads": -1, "filename": "factory_boy-2.3.1.tar.gz", "has_sig": false, "md5_digest": "f3946c731555a96e5c849eef4fb0bcbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74406, "upload_time": "2014-01-22T22:04:01", "upload_time_iso_8601": "2014-01-22T22:04:01.230151Z", "url": "https://files.pythonhosted.org/packages/9b/30/5446816b984efeb7c9d945bf32c541999344793f8c4741966eb8d67a95a5/factory_boy-2.3.1.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "b8d21d970152afc7d5ea2d8d20364fc5", "sha256": "bc4cb8adf583ca75fdca863f5da4d61cc27d13553af624df998f7f1bcf5294e7"}, "downloads": -1, "filename": "factory_boy-2.4.0.tar.gz", "has_sig": false, "md5_digest": "b8d21d970152afc7d5ea2d8d20364fc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78314, "upload_time": "2014-06-21T11:35:57", "upload_time_iso_8601": "2014-06-21T11:35:57.693998Z", "url": "https://files.pythonhosted.org/packages/cc/26/aadb91454b83638dc3874c2a29a5da76053bc879ab26bfcde0b68a973397/factory_boy-2.4.0.tar.gz", "yanked": false}], "2.4.1": [{"comment_text": "", "digests": {"md5": "bb54100b327d32b58c06648e753dfc91", "sha256": "d7012499e52de5a4413e22aed51df8948533685452dfe16b41001f28f9ce5b1c"}, "downloads": -1, "filename": "factory_boy-2.4.1.tar.gz", "has_sig": false, "md5_digest": "bb54100b327d32b58c06648e753dfc91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78378, "upload_time": "2014-06-23T09:11:50", "upload_time_iso_8601": "2014-06-23T09:11:50.440862Z", "url": "https://files.pythonhosted.org/packages/c5/b3/86303d63d30dca1e89bcf651d0893f725b8f63cdb7144dc15264d89c69f9/factory_boy-2.4.1.tar.gz", "yanked": false}], "2.5.0": [{"comment_text": "", "digests": {"md5": "f0eabac5d41943838e69ab72b81e4a21", "sha256": "33cfd50cb0a554706d3c4fa91499ae0ef7c03cb5efffd89dfd16f9720d9109b6"}, "downloads": -1, "filename": "factory_boy-2.5.0.tar.gz", "has_sig": false, "md5_digest": "f0eabac5d41943838e69ab72b81e4a21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80599, "upload_time": "2015-03-26T22:42:52", "upload_time_iso_8601": "2015-03-26T22:42:52.426291Z", "url": "https://files.pythonhosted.org/packages/ec/f1/6eedb9377e54ac949a69486f2b6cf114c4ec92a28ecbe26b9a5eadc6fc78/factory_boy-2.5.0.tar.gz", "yanked": false}], "2.5.1": [{"comment_text": "", "digests": {"md5": "2ee7f1dafdbe96ea2d94efaf6c2bbb07", "sha256": "27834efe7f88963cdbbcdf02932c95aff31f38b6db4043981afb9fd9f6b40c6a"}, "downloads": -1, "filename": "factory_boy-2.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "2ee7f1dafdbe96ea2d94efaf6c2bbb07", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 33388, "upload_time": "2015-04-21T09:27:52", "upload_time_iso_8601": "2015-04-21T09:27:52.338359Z", "url": "https://files.pythonhosted.org/packages/bc/30/4220470e152247a5ce6f9dd213359e3444eb51e08f16c53bb1b61f4f25c2/factory_boy-2.5.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3286ed573a601276292d15aec3abcf97", "sha256": "9e639e1121b93550ffb74f638c7268eab01f2ba10920cec66ee8d298b4b85281"}, "downloads": -1, "filename": "factory_boy-2.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3286ed573a601276292d15aec3abcf97", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 33393, "upload_time": "2015-04-21T09:28:28", "upload_time_iso_8601": "2015-04-21T09:28:28.743006Z", "url": "https://files.pythonhosted.org/packages/07/78/6bee6fba4f2856c2c889838129bab2cfc302d146453ac74f9a0aa3055b84/factory_boy-2.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6958eed505238a9792422f0342a335fc", "sha256": "ffb8a77043fdc7366b581db99c6b036b75e0fb9dc34148e06540d8a871b7caa3"}, "downloads": -1, "filename": "factory_boy-2.5.1.tar.gz", "has_sig": false, "md5_digest": "6958eed505238a9792422f0342a335fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81143, "upload_time": "2015-03-27T16:50:20", "upload_time_iso_8601": "2015-03-27T16:50:20.721473Z", "url": "https://files.pythonhosted.org/packages/ce/e3/918aa67a6f992ec8491e28ee8e8c2c1b073bf3727e38a1283985703ddbc7/factory_boy-2.5.1.tar.gz", "yanked": false}], "2.5.2": [{"comment_text": "", "digests": {"md5": "a20692e6a276418c82cdb8a6c074a59f", "sha256": "102c8141511443df01d354610d3b268924100654316709b43ac04648b50bf703"}, "downloads": -1, "filename": "factory_boy-2.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a20692e6a276418c82cdb8a6c074a59f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 33470, "upload_time": "2015-04-21T09:39:11", "upload_time_iso_8601": "2015-04-21T09:39:11.969594Z", "url": "https://files.pythonhosted.org/packages/3a/5c/ab7f3afabc442772cac6190ba658c5af775852c8e0710e0901f0ad93f608/factory_boy-2.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7fb4533e7b4ddce1f2bdbc9f807c2d3", "sha256": "cd8306e64c3a115deca136685e945db88ffe171382012ec938ed241a20dd7eba"}, "downloads": -1, "filename": "factory_boy-2.5.2.tar.gz", "has_sig": false, "md5_digest": "c7fb4533e7b4ddce1f2bdbc9f807c2d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81518, "upload_time": "2015-04-21T09:39:08", "upload_time_iso_8601": "2015-04-21T09:39:08.238270Z", "url": "https://files.pythonhosted.org/packages/30/5f/57d2d51600d9f413d13c5620c41f609c87460b2537355c47e2e2ae2f62e2/factory_boy-2.5.2.tar.gz", "yanked": false}], "2.6.0": [{"comment_text": "", "digests": {"md5": "cd951907733843f426d76e7d834d44f8", "sha256": "116610a170918df342db2c4bafbc8f4b91780c49878f929d89e360f10ad29d2a"}, "downloads": -1, "filename": "factory_boy-2.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cd951907733843f426d76e7d834d44f8", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 36037, "upload_time": "2015-10-20T21:59:57", "upload_time_iso_8601": "2015-10-20T21:59:57.484817Z", "url": "https://files.pythonhosted.org/packages/ae/7e/cf05c8dcf87955d3cc9b67b45cb3f44d0d1876809ce1e363eff9af7b8c11/factory_boy-2.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d61ee02c6ac8d992f228c0346bd52f32", "sha256": "75e4c9786ed28d19ec7fb500f3c7221a6eb87748cbc6f5e2eeaca4c3d68f30cb"}, "downloads": -1, "filename": "factory_boy-2.6.0.tar.gz", "has_sig": false, "md5_digest": "d61ee02c6ac8d992f228c0346bd52f32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86076, "upload_time": "2015-10-20T21:59:50", "upload_time_iso_8601": "2015-10-20T21:59:50.348889Z", "url": "https://files.pythonhosted.org/packages/fd/a8/34755156d03a89f39e072d97f070e045ee20a69c94d14ccd02b5c2d64fbc/factory_boy-2.6.0.tar.gz", "yanked": false}], "2.6.1": [{"comment_text": "", "digests": {"md5": "080dde3031d7787b849de02a94127561", "sha256": "bda95f9b97cc6b4938906af1d79809d8f44bb9deee6927b5fa8fff4983226009"}, "downloads": -1, "filename": "factory_boy-2.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "080dde3031d7787b849de02a94127561", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 36030, "upload_time": "2016-02-10T00:08:39", "upload_time_iso_8601": "2016-02-10T00:08:39.327709Z", "url": "https://files.pythonhosted.org/packages/9c/ef/1221950abf61ab623a2a8d87dbb5c6a02b7b0ac4796e81acbc4b5a62aec3/factory_boy-2.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "051957f11006863b7813057e91adb49c", "sha256": "b82de0db927b40731ad00a0364f9fb9f66b6917fe6fafa3a92ee848427724128"}, "downloads": -1, "filename": "factory_boy-2.6.1.tar.gz", "has_sig": false, "md5_digest": "051957f11006863b7813057e91adb49c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86950, "upload_time": "2016-02-10T00:08:31", "upload_time_iso_8601": "2016-02-10T00:08:31.883726Z", "url": "https://files.pythonhosted.org/packages/ee/1a/32e9cbd1e737928b53c554c3e0c3f82a3e276bc71991a035862df1764cb2/factory_boy-2.6.1.tar.gz", "yanked": false}], "2.7.0": [{"comment_text": "", "digests": {"md5": "9e09a7fb3b8c337ce103796c5bbdd945", "sha256": "36c949d5c7adefb02d25323b7a5a97dc698e58ef84c4654845ecb2e34bee9a23"}, "downloads": -1, "filename": "factory_boy-2.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9e09a7fb3b8c337ce103796c5bbdd945", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 38718, "upload_time": "2016-04-19T20:56:06", "upload_time_iso_8601": "2016-04-19T20:56:06.343732Z", "url": "https://files.pythonhosted.org/packages/23/c6/41f609ed578ad35e08590ab65633aa783dcb9fa51ac6b140bc10351cb0e3/factory_boy-2.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4df3387b258b11e4dd4641b1561315d7", "sha256": "a65ff40d2f478d926539e4687e8033c1eff0f8ec9ea9031a8f7e0d385014a6aa"}, "downloads": -1, "filename": "factory_boy-2.7.0.tar.gz", "has_sig": false, "md5_digest": "4df3387b258b11e4dd4641b1561315d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28484, "upload_time": "2016-04-19T20:55:32", "upload_time_iso_8601": "2016-04-19T20:55:32.257688Z", "url": "https://files.pythonhosted.org/packages/57/27/7b547bcc26b012d5a7e1108276931a12013a02c5ad3ee9548f8d72fd2a58/factory_boy-2.7.0.tar.gz", "yanked": false}], "2.8.0": [{"comment_text": "", "digests": {"md5": "0f3c491544066ef21e1b6ee7270a8d64", "sha256": "4b30ace5690cc286060c676140955ff9f22a8ce2ca6f2ee81b30c561b811a510"}, "downloads": -1, "filename": "factory_boy-2.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0f3c491544066ef21e1b6ee7270a8d64", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 39707, "upload_time": "2016-12-17T00:28:09", "upload_time_iso_8601": "2016-12-17T00:28:09.832626Z", "url": "https://files.pythonhosted.org/packages/48/da/ec165774931205aa424b41a6d1fd620c704130e05cb1d303bbde33d546a0/factory_boy-2.8.0-py2.py3-none-any.whl", "yanked": false}], "2.8.1": [{"comment_text": "", "digests": {"md5": "eb16cdd976ca15f74e2f5b6c6491ed45", "sha256": "246f7da9caf9bf855aaa73b4963353ccb147fdd3adcbc419fa29422c5b69dd4c"}, "downloads": -1, "filename": "factory_boy-2.8.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eb16cdd976ca15f74e2f5b6c6491ed45", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 46680, "upload_time": "2016-12-17T00:45:11", "upload_time_iso_8601": "2016-12-17T00:45:11.509176Z", "url": "https://files.pythonhosted.org/packages/8d/0a/1466fd13883dbc4a47e16d4a316389f0e0aa23bdef27759603467f9e6ecb/factory_boy-2.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c01f1bdf0049991875cbdf60135c978", "sha256": "a6644e391a371be603aca8624f3dedbc5a2aa4622878c20494ba17abb4b171bb"}, "downloads": -1, "filename": "factory_boy-2.8.1.tar.gz", "has_sig": false, "md5_digest": "4c01f1bdf0049991875cbdf60135c978", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38531, "upload_time": "2016-12-17T00:45:09", "upload_time_iso_8601": "2016-12-17T00:45:09.457008Z", "url": "https://files.pythonhosted.org/packages/3b/e7/cc3abcf261f10ef643b8edbd530f55e6533d08cc3bb575c5ff9e731e11a6/factory_boy-2.8.1.tar.gz", "yanked": false}], "2.9.0": [{"comment_text": "", "digests": {"md5": "9b46f7d35fe68efb893b438e8177ed2a", "sha256": "1be38f0516e8a3343954f259fc3276d4d1bf6faec2240c6bd49df21a2dfe3753"}, "downloads": -1, "filename": "factory_boy-2.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9b46f7d35fe68efb893b438e8177ed2a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 39555, "upload_time": "2017-07-30T21:38:57", "upload_time_iso_8601": "2017-07-30T21:38:57.742639Z", "url": "https://files.pythonhosted.org/packages/4d/0e/9c81a8f3bf9b3d013a123b816415707b1fbc32da5b61d921995eb1bbaf1f/factory_boy-2.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1b549d72cd397c76d81bc3269ed1db2", "sha256": "c56d51f92c18fdfe809fe7ba2f0e228cc5a7e1710705231f588954f670e219d0"}, "downloads": -1, "filename": "factory_boy-2.9.0.tar.gz", "has_sig": false, "md5_digest": "c1b549d72cd397c76d81bc3269ed1db2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41739, "upload_time": "2017-07-30T21:38:59", "upload_time_iso_8601": "2017-07-30T21:38:59.912169Z", "url": "https://files.pythonhosted.org/packages/05/0f/3f09a1634de33298585ef7df7e5346fef37aef8e6d7a0aa642eafa10ce85/factory_boy-2.9.0.tar.gz", "yanked": false}], "2.9.1": [{"comment_text": "", "digests": {"md5": "c993c2d3eadce95b088705cb8ed1ced7", "sha256": "ecc1c6918e45bc863cbcd3d6885383586f8945eed86f6d88755e0cfb2e1cec78"}, "downloads": -1, "filename": "factory_boy-2.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c993c2d3eadce95b088705cb8ed1ced7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 39571, "upload_time": "2017-08-02T11:26:36", "upload_time_iso_8601": "2017-08-02T11:26:36.784740Z", "url": "https://files.pythonhosted.org/packages/f7/22/124216ec491503c838b85fce4afa0ee529b8dadc4598837cc0a349d5d600/factory_boy-2.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d9b90ebc4d8b78a6b5a55eff3883653", "sha256": "5fd30d819c4d64c60c836e34c1f69bf7097c16f90ab4531fa35830045976cdcc"}, "downloads": -1, "filename": "factory_boy-2.9.1.tar.gz", "has_sig": false, "md5_digest": "5d9b90ebc4d8b78a6b5a55eff3883653", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42323, "upload_time": "2017-08-02T11:26:35", "upload_time_iso_8601": "2017-08-02T11:26:35.498617Z", "url": "https://files.pythonhosted.org/packages/75/c3/83841370d9885ec6876923af61d2330e3223fe582387985e42fba4b0844f/factory_boy-2.9.1.tar.gz", "yanked": false}], "2.9.2": [{"comment_text": "", "digests": {"md5": "6804a2019deaccf5ef7a14fe10c7e91e", "sha256": "b8334bcc3c5b10af9a83ab5b8786f98cb322638dc1e6d320cad01c7f2b420e87"}, "downloads": -1, "filename": "factory_boy-2.9.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6804a2019deaccf5ef7a14fe10c7e91e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 39555, "upload_time": "2017-08-03T21:07:35", "upload_time_iso_8601": "2017-08-03T21:07:35.727326Z", "url": "https://files.pythonhosted.org/packages/81/b9/ca160fdcfd7313d59151aa60a2d2125d5677f4147a2c7e14a3736560e271/factory_boy-2.9.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d54b175ffb30274a89835f06ba39207e", "sha256": "340c602f6fed2d8dd160397f28f2c0219e937f0488460450e8e5bf2add020ed6"}, "downloads": -1, "filename": "factory_boy-2.9.2.tar.gz", "has_sig": false, "md5_digest": "d54b175ffb30274a89835f06ba39207e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41847, "upload_time": "2017-08-03T21:07:38", "upload_time_iso_8601": "2017-08-03T21:07:38.178815Z", "url": "https://files.pythonhosted.org/packages/6a/29/f52ab1f7ea4613e51a5d405b4c6d1ef3b0e9c08931f5dd9c651f2a3ba21d/factory_boy-2.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "389fbad709658f2b7e42a0504dd6fb80", "sha256": "728df59b372c9588b83153facf26d3d28947fc750e8e3c95cefa9bed0e6394ee"}, "downloads": -1, "filename": "factory_boy-2.12.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "389fbad709658f2b7e42a0504dd6fb80", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 36911, "upload_time": "2019-05-11T14:39:40", "upload_time_iso_8601": "2019-05-11T14:39:40.493611Z", "url": "https://files.pythonhosted.org/packages/63/c3/e4d5ed760f09f5dfb6ebbc44e22801a5fa9fcad9158f5ec59d8304092833/factory_boy-2.12.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcd752dc821c5d7ee91b5733e4ed9ad0", "sha256": "faf48d608a1735f0d0a3c9cbf536d64f9132b547dae7ba452c4d99a79e84a370"}, "downloads": -1, "filename": "factory_boy-2.12.0.tar.gz", "has_sig": false, "md5_digest": "bcd752dc821c5d7ee91b5733e4ed9ad0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 153557, "upload_time": "2019-05-11T14:39:42", "upload_time_iso_8601": "2019-05-11T14:39:42.384691Z", "url": "https://files.pythonhosted.org/packages/5d/28/9f2284328547a3e29b39422a0a138d118a57686c0b4479f00c72240668d7/factory_boy-2.12.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:02 2020"}