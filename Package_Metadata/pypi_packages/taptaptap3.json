{"info": {"author": "Lukas Prokop", "author_email": "admin@lukas-prokop.at", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Documentation", "Topic :: Software Development :: Testing", "Topic :: System :: Logging", "Topic :: System :: Systems Administration"], "description": "Documentation\n=============\n\n:name:          taptaptap\n:author:        Lukas Prokop\n:date:          Feb-Apr 2014, Jul 2018\n:license:       BSD 3-clause\n:version:       3.0.0\n:issues:        http://github.com/meisterluk/taptaptap3/issues\n\nTest Anything Protocol handling for cat lovers \\*rawwr*\n\n.. contents:: Table of contents\n\n``taptaptap3`` provides parsers, writers and APIs to handle the Test Anything Protocol (TAP). The implementation focuses on the most-current TAP version 13. TAP originates from the Perl community, but is a general format to document runs of testsuites. The reference to cats is just a pun for the noise of cats sneaking on floors and \"3\" is part of \"<3\", thus \"lovers\".\n\nCompatibility\n-------------\n\n``taptaptap3`` is only supposed to be working with python 3.5 upwards.\nIt was written for python 2.7 as package `taptaptap <https://github.com/meisterluk/taptaptap>`_ and this implementation is a port to python3.\nIt has been tested with Python 3.6.5 on xubuntu 18.04 (Linux 4.15 x86_64) \n\nThe File Format\n---------------\n\nA basic introduction is given by Wikipedia. The format was specified by the Perl community.\n\n* `The Wikipedia article <https://en.wikipedia.org/wiki/Test_Anything_Protocol>`_\n* `Original specification <http://web.archive.org/web/20120730055134/http://testanything.org/wiki/index.php/TAP_specification>`_\n* `Test::Harness <https://metacpan.org/pod/release/PETDANCE/Test-Harness-2.64/lib/Test/Harness/TAP.pod#THE-TAP-FORMAT>`_\n\nTestsuite & Examples\n--------------------\n\n``taptaptap3`` comes with a testsuite, which covers many special cases of the TAP format and tests the provided APIs. Please don't hesitate to report any issues_.\n\nYou can run the ``taptaptap3`` testcases yourself using::\n\n    ./run.sh\n\nin the tests directory. The testsuite also shows some API usage examples, but I want to provide some here. The procedural API is well-suited if you are in the python REPL::\n\n    from taptaptap3.proc import plan, ok, not_ok, out\n    plan(tests=10)\n    ok('Starting the robot')\n    not_ok('Starting the engine')\n    not_ok('Find the object', skip='Setup required')\n    not_ok('Terminate', skip='Setup required')\n\n    out()\n\nThe output looks like this::\n\n    1..10\n    ok - Starting the robot\n    not ok - Starting the engine\n    not ok - Find the object  # SKIP Setup required\n    not ok - Terminate  # SKIP Setup required\n\nBe aware that the state is stored within the module. This is not what you want if you are outside the REPL. The ``TapWriter`` class is more convenient in this case::\n\n    import taptaptap3\n\n    writer = taptaptap3.TapWriter()\n    writer.plan(1, 3)\n    writer.ok('This testcase went fine')\n    writer.ok('And another one')\n    writer.ok('And also the last one')\n\nIf you like python's generators, you want to use ``SimpleTapCreator``::\n\n    @taptaptap3.SimpleTapCreator\n    def runTests():\n        yield True\n        yield True\n        yield False\n\n    print runTests()\n\nGiving us::\n\n    1..3\n    ok\n    ok\n    not ok\n\nOr take a look at the more sophisticated ``TapCreator``. If you are a real expert, you can use ``TapDocument`` directly, which covers all possibilities of TAP.\n\nCommand line tools\n------------------\n\nYou can also invoke ``taptaptap3`` directly from the command line::\n\n    python -m taptaptap3.__main__ some_tap_file_to_validate.tap\n\nThis command will parse the file and write the file in a way how it was understood by the module. The exit code indicates its validity:\n\n0\n  Everything fine.\n1\n  The TAP file is missing some testcases or contains failed testcases.\n2\n  A bailout was raised. So the testing environment crashed during the run.\n\nPickling\n--------\n\nAll objects are pickable.\n\nWhen to use ``taptaptap3``\n--------------------------\n\nDoes ``taptaptap3`` suite your needs?\nIt does, if you are looking for a parser and validator for your TAP documents and you don't want to care about details and just need a gentle API.\n\nbest regards,\nmeisterluk\n\n.. _issues: https://github.com/meisterluk/taptaptap\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://lukas-prokop.at/proj/taptaptap/", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "taptaptap3", "package_url": "https://pypi.org/project/taptaptap3/", "platform": "any", "project_url": "https://pypi.org/project/taptaptap3/", "project_urls": {"Homepage": "http://lukas-prokop.at/proj/taptaptap/"}, "release_url": "https://pypi.org/project/taptaptap3/3.0.0/", "requires_dist": null, "requires_python": "", "summary": "Test Anything Protocol handling for cats", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>name:</th><td>taptaptap</td>\n</tr>\n<tr><th>Author:</th>\n<td>Lukas Prokop</td></tr>\n<tr><th>Date:</th>\n<td>Feb-Apr 2014, Jul 2018</td></tr>\n<tr><th>license:</th><td>BSD 3-clause</td>\n</tr>\n<tr><th>Version:</th>\n<td>3.0.0</td></tr>\n<tr><th>issues:</th><td><a href=\"http://github.com/meisterluk/taptaptap3/issues\" rel=\"nofollow\">http://github.com/meisterluk/taptaptap3/issues</a></td>\n</tr>\n</tbody>\n</table>\n<p>Test Anything Protocol handling for cat lovers *rawwr*</p>\n<div id=\"table-of-contents\">\n<p>Table of contents</p>\n<ul>\n<li><a href=\"#compatibility\" id=\"id1\" rel=\"nofollow\">Compatibility</a></li>\n<li><a href=\"#the-file-format\" id=\"id2\" rel=\"nofollow\">The File Format</a></li>\n<li><a href=\"#testsuite-examples\" id=\"id3\" rel=\"nofollow\">Testsuite &amp; Examples</a></li>\n<li><a href=\"#command-line-tools\" id=\"id4\" rel=\"nofollow\">Command line tools</a></li>\n<li><a href=\"#pickling\" id=\"id5\" rel=\"nofollow\">Pickling</a></li>\n<li><a href=\"#when-to-use-taptaptap3\" id=\"id6\" rel=\"nofollow\">When to use <tt>taptaptap3</tt></a></li>\n</ul>\n</div>\n<p><tt>taptaptap3</tt> provides parsers, writers and APIs to handle the Test Anything Protocol (TAP). The implementation focuses on the most-current TAP version 13. TAP originates from the Perl community, but is a general format to document runs of testsuites. The reference to cats is just a pun for the noise of cats sneaking on floors and \u201c3\u201d is part of \u201c&lt;3\u201d, thus \u201clovers\u201d.</p>\n<div id=\"compatibility\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Compatibility</a></h2>\n<p><tt>taptaptap3</tt> is only supposed to be working with python 3.5 upwards.\nIt was written for python 2.7 as package <a href=\"https://github.com/meisterluk/taptaptap\" rel=\"nofollow\">taptaptap</a> and this implementation is a port to python3.\nIt has been tested with Python 3.6.5 on xubuntu 18.04 (Linux 4.15 x86_64)</p>\n</div>\n<div id=\"the-file-format\">\n<h2><a href=\"#id2\" rel=\"nofollow\">The File Format</a></h2>\n<p>A basic introduction is given by Wikipedia. The format was specified by the Perl community.</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Test_Anything_Protocol\" rel=\"nofollow\">The Wikipedia article</a></li>\n<li><a href=\"http://web.archive.org/web/20120730055134/http://testanything.org/wiki/index.php/TAP_specification\" rel=\"nofollow\">Original specification</a></li>\n<li><a href=\"https://metacpan.org/pod/release/PETDANCE/Test-Harness-2.64/lib/Test/Harness/TAP.pod#THE-TAP-FORMAT\" rel=\"nofollow\">Test::Harness</a></li>\n</ul>\n</div>\n<div id=\"testsuite-examples\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Testsuite &amp; Examples</a></h2>\n<p><tt>taptaptap3</tt> comes with a testsuite, which covers many special cases of the TAP format and tests the provided APIs. Please don\u2019t hesitate to report any <a href=\"https://github.com/meisterluk/taptaptap\" rel=\"nofollow\">issues</a>.</p>\n<p>You can run the <tt>taptaptap3</tt> testcases yourself using:</p>\n<pre>./run.sh\n</pre>\n<p>in the tests directory. The testsuite also shows some API usage examples, but I want to provide some here. The procedural API is well-suited if you are in the python REPL:</p>\n<pre>from taptaptap3.proc import plan, ok, not_ok, out\nplan(tests=10)\nok('Starting the robot')\nnot_ok('Starting the engine')\nnot_ok('Find the object', skip='Setup required')\nnot_ok('Terminate', skip='Setup required')\n\nout()\n</pre>\n<p>The output looks like this:</p>\n<pre>1..10\nok - Starting the robot\nnot ok - Starting the engine\nnot ok - Find the object  # SKIP Setup required\nnot ok - Terminate  # SKIP Setup required\n</pre>\n<p>Be aware that the state is stored within the module. This is not what you want if you are outside the REPL. The <tt>TapWriter</tt> class is more convenient in this case:</p>\n<pre>import taptaptap3\n\nwriter = taptaptap3.TapWriter()\nwriter.plan(1, 3)\nwriter.ok('This testcase went fine')\nwriter.ok('And another one')\nwriter.ok('And also the last one')\n</pre>\n<p>If you like python\u2019s generators, you want to use <tt>SimpleTapCreator</tt>:</p>\n<pre>@taptaptap3.SimpleTapCreator\ndef runTests():\n    yield True\n    yield True\n    yield False\n\nprint runTests()\n</pre>\n<p>Giving us:</p>\n<pre>1..3\nok\nok\nnot ok\n</pre>\n<p>Or take a look at the more sophisticated <tt>TapCreator</tt>. If you are a real expert, you can use <tt>TapDocument</tt> directly, which covers all possibilities of TAP.</p>\n</div>\n<div id=\"command-line-tools\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Command line tools</a></h2>\n<p>You can also invoke <tt>taptaptap3</tt> directly from the command line:</p>\n<pre>python -m taptaptap3.__main__ some_tap_file_to_validate.tap\n</pre>\n<p>This command will parse the file and write the file in a way how it was understood by the module. The exit code indicates its validity:</p>\n<dl>\n<dt>0</dt>\n<dd>Everything fine.</dd>\n<dt>1</dt>\n<dd>The TAP file is missing some testcases or contains failed testcases.</dd>\n<dt>2</dt>\n<dd>A bailout was raised. So the testing environment crashed during the run.</dd>\n</dl>\n</div>\n<div id=\"pickling\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Pickling</a></h2>\n<p>All objects are pickable.</p>\n</div>\n<div id=\"when-to-use-taptaptap3\">\n<h2><a href=\"#id6\" rel=\"nofollow\">When to use <tt>taptaptap3</tt></a></h2>\n<p>Does <tt>taptaptap3</tt> suite your needs?\nIt does, if you are looking for a parser and validator for your TAP documents and you don\u2019t want to care about details and just need a gentle API.</p>\n<p>best regards,\nmeisterluk</p>\n</div>\n\n          </div>"}, "last_serial": 4025906, "releases": {"3.0.0": [{"comment_text": "", "digests": {"md5": "799a4c92c88575e0572073747009fa97", "sha256": "4fbba8e9785d0b6f6b8e325289a5dad245cf2e8f9d70949f27a6478db2ee8193"}, "downloads": -1, "filename": "taptaptap3-3.0.0.tar.gz", "has_sig": true, "md5_digest": "799a4c92c88575e0572073747009fa97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19484, "upload_time": "2018-07-03T11:48:30", "upload_time_iso_8601": "2018-07-03T11:48:30.220588Z", "url": "https://files.pythonhosted.org/packages/94/4e/abd6e9fe63c54fb4adf9ac103ceefdffb7e6a446c9f28715dd400e68d56b/taptaptap3-3.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "799a4c92c88575e0572073747009fa97", "sha256": "4fbba8e9785d0b6f6b8e325289a5dad245cf2e8f9d70949f27a6478db2ee8193"}, "downloads": -1, "filename": "taptaptap3-3.0.0.tar.gz", "has_sig": true, "md5_digest": "799a4c92c88575e0572073747009fa97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19484, "upload_time": "2018-07-03T11:48:30", "upload_time_iso_8601": "2018-07-03T11:48:30.220588Z", "url": "https://files.pythonhosted.org/packages/94/4e/abd6e9fe63c54fb4adf9ac103ceefdffb7e6a446c9f28715dd400e68d56b/taptaptap3-3.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:59 2020"}