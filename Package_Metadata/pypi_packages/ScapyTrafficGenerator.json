{"info": {"author": "Nathan Hosington", "author_email": "nathan.hoisington@vipre.com", "bugtrack_url": null, "classifiers": [], "description": "README\n======\n\nImplementation of Scapy Traffic Generator\n\nWhat is this package for?\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Simulating network traffic by creating packets and either saving a\n   pcap file for further use or replaying the packets on a given\n   interface\n\nHow to install\n~~~~~~~~~~~~~~\n\n::\n\n    pip install ScapyTrafficGenerator\n\nHow To run\n~~~~~~~~~~\n\nUse -X to define protocol\n'''''''''''''''''''''''''\n\n::\n\n       ScapyTrafficGenerator -X http\n\nScapy Traffic Generators runtime Basic Arguments defined with -r\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n::\n\n    -F File  (can be given multiple times)\n    -i interface to run\n    -s src ip\n    -S src PORT\n    -d dst ip\n    -D dst port\n    -m scr mac\n    -M dst mac\n    -X Method(integer 1-6)  (1= GET, 2 = PUT, 3 = POST, 4 = GET, 5= PUT, 6 = POST)  *methods 1,2,3 are for HTTP and 4,5,6 are for FTP\n    -E Encoding (integer 2-6) (2=CHUNKED, 3 = GZIP, 4 = CHUNKED+GZIP, 5 = MULTIPART single form, 6 = MULTIPART multi form)  *encoding for http only, 2-4 is for GET only, 5-6 is for PUT/POST only.\n\n    #example \n\n    ScapyTrafficGenerator -X http -r '-X 1 -F /files/Malicious_DOC.doc -i eth0 -s 1.1.1.1 -S 33333 -d 2.2.2.2 -D 80 -m 12:31:25:15:a1:55 -M 12:31:25:15:a1:2b'\n\n    ### not specifying a field will default to a random value (file should default to none)\n\nAdditional HTTP specific arguments\n''''''''''''''''''''''''''''''''''\n\n::\n\n    --host <host>  specify a host\n    -u <url>  specify a request url\n    -B swap destination ip to use ipv6\n    -b swap source ip to use ipv6\n    -R <response string> set server response (HTTP/1.1 200 OK is default)\n    -L <dir> location to transfer files (instead of just one file it will sent whole dir)\n    -N <server name> specify server name\n    --gretunnel encapsulate traffic as gre\n    -A swap all default ip to use ipv6\n    -l http pipeline files (if one file is in request it will download it multiple times)\n    -x <packets per second>  specify packets per second to replay traffic\n    -j <request header>  add a request header\n    -k <response header> add a response header\n    -v <vlan tag id>  specify a vlan tag id\n    -O <offset>  specify how long ago packet occured\n    -V  <Version> http version (default HTTP/1.1)\n    -U  <useragent string>  specify particular user agent for windows/linux/etc  (default curl/7.35.0)\n    -T  timeout  >> repeat replaying traffic until time\n\nAdditional FTP specific arguments\n'''''''''''''''''''''''''''''''''\n\n::\n\n    -c command source port\n    -C command destination port\n    -B swap destination ip to use ipv6\n    -b swap source ip to use ipv6\n    -L <dir> location to transfer files (instead of just one file it will sent whole dir)\n    -N <server name> specify server name\n    -A swap all default ip to use ipv6\n    -x <packets per second>  specify packets per second to replay traffic\n    -w specify server diretory\n    -W specify working directory\n    -a use active ftp\n    -v <vlan tag id>  specify a vlan tag id\n    -u user password\n    -z <number of segments> specify segmentation\n    -P specify same dataport umougst multiple sessons/segments\n\nAdditional TCP specific arguments\n'''''''''''''''''''''''''''''''''\n\n::\n\n    -p <data_from_source:data_response_from_destination> packet data (default=\"HELLOSERVER:HELLOCLIENT\")\n\nother supported protocols\n'''''''''''''''''''''''''\n\n::\n\n    -DNS\n    -DHCP\n    -ICMP\n    -SMB\n    -SMB2\n    -HTTPS (with fake data for encrypting files)\n\nTo Save as a pcap instead of replaying envoronment vaiable must be set to where you want to save the pcap file to\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n::\n\n    export CREATE_PCAP_ONLY=\\tmp\\mypcap.pcap; ScapyTrafficGenerator -X http -r '-i eth1 -s 10.21.21.21 -u \"/mybadurl.com\"'", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ScapyTrafficGenerator", "package_url": "https://pypi.org/project/ScapyTrafficGenerator/", "platform": "", "project_url": "https://pypi.org/project/ScapyTrafficGenerator/", "project_urls": null, "release_url": "https://pypi.org/project/ScapyTrafficGenerator/2.19.1/", "requires_dist": null, "requires_python": "", "summary": "create pcaps, or replay traffic on an interface", "version": "2.19.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Implementation of Scapy Traffic Generator</p>\n<div id=\"what-is-this-package-for\">\n<h2>What is this package for?</h2>\n<ul>\n<li>Simulating network traffic by creating packets and either saving a\npcap file for further use or replaying the packets on a given\ninterface</li>\n</ul>\n</div>\n<div id=\"how-to-install\">\n<h2>How to install</h2>\n<pre>pip install ScapyTrafficGenerator\n</pre>\n</div>\n<div id=\"how-to-run\">\n<h2>How To run</h2>\n<div id=\"use-x-to-define-protocol\">\n<h3>Use -X to define protocol</h3>\n<pre>ScapyTrafficGenerator -X http\n</pre>\n</div>\n<div id=\"scapy-traffic-generators-runtime-basic-arguments-defined-with-r\">\n<h3>Scapy Traffic Generators runtime Basic Arguments defined with -r</h3>\n<pre>-F File  (can be given multiple times)\n-i interface to run\n-s src ip\n-S src PORT\n-d dst ip\n-D dst port\n-m scr mac\n-M dst mac\n-X Method(integer 1-6)  (1= GET, 2 = PUT, 3 = POST, 4 = GET, 5= PUT, 6 = POST)  *methods 1,2,3 are for HTTP and 4,5,6 are for FTP\n-E Encoding (integer 2-6) (2=CHUNKED, 3 = GZIP, 4 = CHUNKED+GZIP, 5 = MULTIPART single form, 6 = MULTIPART multi form)  *encoding for http only, 2-4 is for GET only, 5-6 is for PUT/POST only.\n\n#example\n\nScapyTrafficGenerator -X http -r '-X 1 -F /files/Malicious_DOC.doc -i eth0 -s 1.1.1.1 -S 33333 -d 2.2.2.2 -D 80 -m 12:31:25:15:a1:55 -M 12:31:25:15:a1:2b'\n\n### not specifying a field will default to a random value (file should default to none)\n</pre>\n</div>\n<div id=\"additional-http-specific-arguments\">\n<h3>Additional HTTP specific arguments</h3>\n<pre>--host &lt;host&gt;  specify a host\n-u &lt;url&gt;  specify a request url\n-B swap destination ip to use ipv6\n-b swap source ip to use ipv6\n-R &lt;response string&gt; set server response (HTTP/1.1 200 OK is default)\n-L &lt;dir&gt; location to transfer files (instead of just one file it will sent whole dir)\n-N &lt;server name&gt; specify server name\n--gretunnel encapsulate traffic as gre\n-A swap all default ip to use ipv6\n-l http pipeline files (if one file is in request it will download it multiple times)\n-x &lt;packets per second&gt;  specify packets per second to replay traffic\n-j &lt;request header&gt;  add a request header\n-k &lt;response header&gt; add a response header\n-v &lt;vlan tag id&gt;  specify a vlan tag id\n-O &lt;offset&gt;  specify how long ago packet occured\n-V  &lt;Version&gt; http version (default HTTP/1.1)\n-U  &lt;useragent string&gt;  specify particular user agent for windows/linux/etc  (default curl/7.35.0)\n-T  timeout  &gt;&gt; repeat replaying traffic until time\n</pre>\n</div>\n<div id=\"additional-ftp-specific-arguments\">\n<h3>Additional FTP specific arguments</h3>\n<pre>-c command source port\n-C command destination port\n-B swap destination ip to use ipv6\n-b swap source ip to use ipv6\n-L &lt;dir&gt; location to transfer files (instead of just one file it will sent whole dir)\n-N &lt;server name&gt; specify server name\n-A swap all default ip to use ipv6\n-x &lt;packets per second&gt;  specify packets per second to replay traffic\n-w specify server diretory\n-W specify working directory\n-a use active ftp\n-v &lt;vlan tag id&gt;  specify a vlan tag id\n-u user password\n-z &lt;number of segments&gt; specify segmentation\n-P specify same dataport umougst multiple sessons/segments\n</pre>\n</div>\n<div id=\"additional-tcp-specific-arguments\">\n<h3>Additional TCP specific arguments</h3>\n<pre>-p &lt;data_from_source:data_response_from_destination&gt; packet data (default=\"HELLOSERVER:HELLOCLIENT\")\n</pre>\n</div>\n<div id=\"other-supported-protocols\">\n<h3>other supported protocols</h3>\n<pre>-DNS\n-DHCP\n-ICMP\n-SMB\n-SMB2\n-HTTPS (with fake data for encrypting files)\n</pre>\n</div>\n<div id=\"to-save-as-a-pcap-instead-of-replaying-envoronment-vaiable-must-be-set-to-where-you-want-to-save-the-pcap-file-to\">\n<h3>To Save as a pcap instead of replaying envoronment vaiable must be set to where you want to save the pcap file to</h3>\n<pre>export CREATE_PCAP_ONLY=\\tmp\\mypcap.pcap; ScapyTrafficGenerator -X http -r '-i eth1 -s 10.21.21.21 -u \"/mybadurl.com\"'\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3567138, "releases": {"1.12.3": [{"comment_text": "", "digests": {"md5": "fb1f7df317be70f3b6a0a4dfa53f376f", "sha256": "f034dc7806829888acabcb5f18709af5b9c99aa4ba67948ca4dcaf14092f3f1c"}, "downloads": -1, "filename": "ScapyTrafficGenerator-1.12.3.tar.gz", "has_sig": false, "md5_digest": "fb1f7df317be70f3b6a0a4dfa53f376f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 474558, "upload_time": "2018-01-02T18:01:19", "upload_time_iso_8601": "2018-01-02T18:01:19.197162Z", "url": "https://files.pythonhosted.org/packages/a8/0a/954d68328788896324688bdaece63ab52f401be6771cf0a1d6f4ee235f87/ScapyTrafficGenerator-1.12.3.tar.gz", "yanked": false}], "2.17.1": [{"comment_text": "", "digests": {"md5": "4af5c0130095d485cd9eef1334c5ea26", "sha256": "de49a7128af0b8867e599b231215548e448326474ce2d082d53e4dbc518786c8"}, "downloads": -1, "filename": "ScapyTrafficGenerator-2.17.1.tar.gz", "has_sig": false, "md5_digest": "4af5c0130095d485cd9eef1334c5ea26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 476310, "upload_time": "2018-01-09T18:04:36", "upload_time_iso_8601": "2018-01-09T18:04:36.622266Z", "url": "https://files.pythonhosted.org/packages/b7/8a/3d038fab4549dd1baeb205b61facac08ba7b2b8c1010f0fef025519f5d98/ScapyTrafficGenerator-2.17.1.tar.gz", "yanked": false}], "2.18.1": [{"comment_text": "", "digests": {"md5": "78e2194498c83e11903841f5ff85ac71", "sha256": "859ba6a0a321667a9e6eaffe21c4d745973704a9a19c349546a1a0ecb2229e57"}, "downloads": -1, "filename": "ScapyTrafficGenerator-2.18.1.tar.gz", "has_sig": false, "md5_digest": "78e2194498c83e11903841f5ff85ac71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 476312, "upload_time": "2018-01-11T17:55:26", "upload_time_iso_8601": "2018-01-11T17:55:26.330357Z", "url": "https://files.pythonhosted.org/packages/7e/0e/14393d532c9f2a631e35f7ddd96e7a256c2000dff832a2fe65009b0d87e1/ScapyTrafficGenerator-2.18.1.tar.gz", "yanked": false}], "2.19.1": [{"comment_text": "", "digests": {"md5": "6769502b5f9765814f88643c01e472cf", "sha256": "85e2a5586fdfabdcda206e306c55a68db6604fc3e50cc12fc2c15dcff6737804"}, "downloads": -1, "filename": "ScapyTrafficGenerator-2.19.1.tar.gz", "has_sig": false, "md5_digest": "6769502b5f9765814f88643c01e472cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 477012, "upload_time": "2018-02-09T12:53:00", "upload_time_iso_8601": "2018-02-09T12:53:00.368600Z", "url": "https://files.pythonhosted.org/packages/fd/80/e5e90df55cf3e09722596e46ae34ecc297701e533f263f7b64cc4c470b4d/ScapyTrafficGenerator-2.19.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6769502b5f9765814f88643c01e472cf", "sha256": "85e2a5586fdfabdcda206e306c55a68db6604fc3e50cc12fc2c15dcff6737804"}, "downloads": -1, "filename": "ScapyTrafficGenerator-2.19.1.tar.gz", "has_sig": false, "md5_digest": "6769502b5f9765814f88643c01e472cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 477012, "upload_time": "2018-02-09T12:53:00", "upload_time_iso_8601": "2018-02-09T12:53:00.368600Z", "url": "https://files.pythonhosted.org/packages/fd/80/e5e90df55cf3e09722596e46ae34ecc297701e533f263f7b64cc4c470b4d/ScapyTrafficGenerator-2.19.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:02 2020"}