{"info": {"author": "Louis Tsiattalou", "author_email": "louis.tsi@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "`tfidf_matcher` is a package for fuzzymatching large datasets together. Most fuzzy\nmatching libraries like `fuzzywuzzy` get great results, but perform very poorly\ndue to their O(n^2) complexity.\n\n\n# How does it work?\n\nThis package provides two functions:\n\n-   `ngrams()`: Simple ngram generator.\n-   `matcher()`: Matches a list of strings against a reference corpus. Does this by:\n    -   Vectorizing the reference corpus using TF-IDF into a term-document matrix.\n    -   Fitting a K-NearestNeighbours model to the sparse matrix.\n    -   Vectorizing the list of strings to be matched and passing it in to the KNN\n        model to calculate the cosine distance (the OOTB `cosine_similarity`\n        function in sklearn is very memory-inefficient for our use case).\n    -   Some data manipulation to emit `k_matches` closest matches.\n\n\n# Yeah ok, but how do I use it?\n\nDefine two lists; your **original** list (list you want matches for) and your\n**lookup** list (list you want to match against). Typically your lookup list will\nbe much longer than your original list. Pass them into the `matcher` function\nalong with the number of matches you want to display from the **lookup** list\nusing the `k_matches` argument. The result will be a pandas DataFrame containing\n1 row per item in your **original** list, along with \\`k\\\\\\_matches\\` columns\ncontaining the closest match from the **lookup** list, and a match score for the\nclosest match (which is 1 - the cosine distance between the matches normalised\nto [0,1])\n\nSimply import with `import tfidf_matcher as tm`, and call the matcher function\nwith `tm.matcher()`. It takes the following arguments:\n\n-   \\`original\\`: List of strings you want to match.\n-   \\`lookup\\`: List of strings you want to match against.\n-   \\`k\\_matches\\`: Number of the closest results from \\`lookup\\` to return (1 per column).\n-   \\`ngram\\_length\\`: Length of \\`ngrams\\` used in the algorithm. Anecdotal testing\n    shows 2 or 3 to be optimal, but feel free to tinker.\n\n\n# Strengths and Weaknesses\n\n-   Quick. Very quick.\n-   Can emit however many closest matches you want. I found that 3 worked best.\n-   Not very well tested so potentially unstable results. Worked well for 640\n    company names matched against a lookup corpus of >700,000 company names.\n-   It&rsquo;s pretty complicated to get to grips with the method if you wanted to apply\n    it in different ways. The underlying algorithms are pretty hard to reason\n    about when you jump to the definition of, say, `TfidfVectorizer` from sklearn.\n    I *just about* understand the method, which I adapted from [this blog post by\n    Josh Taylor](https://towardsdatascience.com/fuzzy-matching-at-scale-84f2bfd0c536), which itself was adapted from another blog post.\n\n\n# Who do I thank?\n\nAs above, credit for the method goes to Josh Taylor and [van den Blog](https://bergvca.github.io/). I wanted\nto adapt the methods to work nicely on a company mathcing problem I was having,\nand decided to build out my resultant code into a package for two reasons:\n\n1.  Package building experience.\n2.  Utility for future projects which may require large-domain fuzzy matching.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/louistsiattalou/tfidf_matcher", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tfidf-matcher", "package_url": "https://pypi.org/project/tfidf-matcher/", "platform": "", "project_url": "https://pypi.org/project/tfidf-matcher/", "project_urls": {"Homepage": "https://github.com/louistsiattalou/tfidf_matcher"}, "release_url": "https://pypi.org/project/tfidf-matcher/0.2.1/", "requires_dist": ["sklearn", "pandas"], "requires_python": ">=3.0", "summary": "A small package that enables super-fast TF-IDF based string matching.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><code>tfidf_matcher</code> is a package for fuzzymatching large datasets together. Most fuzzy\nmatching libraries like <code>fuzzywuzzy</code> get great results, but perform very poorly\ndue to their O(n^2) complexity.</p>\n<h1>How does it work?</h1>\n<p>This package provides two functions:</p>\n<ul>\n<li><code>ngrams()</code>: Simple ngram generator.</li>\n<li><code>matcher()</code>: Matches a list of strings against a reference corpus. Does this by:\n<ul>\n<li>Vectorizing the reference corpus using TF-IDF into a term-document matrix.</li>\n<li>Fitting a K-NearestNeighbours model to the sparse matrix.</li>\n<li>Vectorizing the list of strings to be matched and passing it in to the KNN\nmodel to calculate the cosine distance (the OOTB <code>cosine_similarity</code>\nfunction in sklearn is very memory-inefficient for our use case).</li>\n<li>Some data manipulation to emit <code>k_matches</code> closest matches.</li>\n</ul>\n</li>\n</ul>\n<h1>Yeah ok, but how do I use it?</h1>\n<p>Define two lists; your <strong>original</strong> list (list you want matches for) and your\n<strong>lookup</strong> list (list you want to match against). Typically your lookup list will\nbe much longer than your original list. Pass them into the <code>matcher</code> function\nalong with the number of matches you want to display from the <strong>lookup</strong> list\nusing the <code>k_matches</code> argument. The result will be a pandas DataFrame containing\n1 row per item in your <strong>original</strong> list, along with `k\\_matches` columns\ncontaining the closest match from the <strong>lookup</strong> list, and a match score for the\nclosest match (which is 1 - the cosine distance between the matches normalised\nto [0,1])</p>\n<p>Simply import with <code>import tfidf_matcher as tm</code>, and call the matcher function\nwith <code>tm.matcher()</code>. It takes the following arguments:</p>\n<ul>\n<li>`original`: List of strings you want to match.</li>\n<li>`lookup`: List of strings you want to match against.</li>\n<li>`k_matches`: Number of the closest results from `lookup` to return (1 per column).</li>\n<li>`ngram_length`: Length of `ngrams` used in the algorithm. Anecdotal testing\nshows 2 or 3 to be optimal, but feel free to tinker.</li>\n</ul>\n<h1>Strengths and Weaknesses</h1>\n<ul>\n<li>Quick. Very quick.</li>\n<li>Can emit however many closest matches you want. I found that 3 worked best.</li>\n<li>Not very well tested so potentially unstable results. Worked well for 640\ncompany names matched against a lookup corpus of &gt;700,000 company names.</li>\n<li>It\u2019s pretty complicated to get to grips with the method if you wanted to apply\nit in different ways. The underlying algorithms are pretty hard to reason\nabout when you jump to the definition of, say, <code>TfidfVectorizer</code> from sklearn.\nI <em>just about</em> understand the method, which I adapted from <a href=\"https://towardsdatascience.com/fuzzy-matching-at-scale-84f2bfd0c536\" rel=\"nofollow\">this blog post by\nJosh Taylor</a>, which itself was adapted from another blog post.</li>\n</ul>\n<h1>Who do I thank?</h1>\n<p>As above, credit for the method goes to Josh Taylor and <a href=\"https://bergvca.github.io/\" rel=\"nofollow\">van den Blog</a>. I wanted\nto adapt the methods to work nicely on a company mathcing problem I was having,\nand decided to build out my resultant code into a package for two reasons:</p>\n<ol>\n<li>Package building experience.</li>\n<li>Utility for future projects which may require large-domain fuzzy matching.</li>\n</ol>\n\n          </div>"}, "last_serial": 6667840, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c1cfd4824584c244a005ae547a4d7cec", "sha256": "b86e422dd042d7475e3451733d560b6ce718aa91c9c4b325ddb7f4b618decf5f"}, "downloads": -1, "filename": "tfidf_matcher-0.1.0.zip", "has_sig": false, "md5_digest": "c1cfd4824584c244a005ae547a4d7cec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 7424, "upload_time": "2020-02-19T17:53:18", "upload_time_iso_8601": "2020-02-19T17:53:18.845068Z", "url": "https://files.pythonhosted.org/packages/2f/05/54a4eeb28f05083609b2d45416342e1fd17c388216e97850ff70a14fccc6/tfidf_matcher-0.1.0.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1e371ef865c1fc70145e53848303d785", "sha256": "b39564b8ec0b3f0bb4bae5b275b3bab92e6770fa7459be43fb828416f772a048"}, "downloads": -1, "filename": "tfidf_matcher-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e371ef865c1fc70145e53848303d785", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0", "size": 7706, "upload_time": "2020-02-20T11:58:31", "upload_time_iso_8601": "2020-02-20T11:58:31.425114Z", "url": "https://files.pythonhosted.org/packages/33/8e/c0546fe276165cdf868dd38ce17eb1437e306545c392a455fec0f08ee7a1/tfidf_matcher-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f04cd413b4b8fcef8fe691c2c424f6e", "sha256": "e54a1bf63ff860450654a7f3825c01f7d1c0bed56f7cb2ff55caeb96e0596d8f"}, "downloads": -1, "filename": "tfidf_matcher-0.2.0.zip", "has_sig": false, "md5_digest": "5f04cd413b4b8fcef8fe691c2c424f6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 11762, "upload_time": "2020-02-20T11:58:33", "upload_time_iso_8601": "2020-02-20T11:58:33.210779Z", "url": "https://files.pythonhosted.org/packages/73/95/6bdd05e457076c581b4c9e13c2d67a4ddd0dee88fb5b3eea02c01263d731/tfidf_matcher-0.2.0.zip", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "a430a3f9e8ba13509dafa1b7feb20bab", "sha256": "3b883355d584ac59f834d77d889be20c972cee856948c100877470d3d87b2358"}, "downloads": -1, "filename": "tfidf_matcher-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a430a3f9e8ba13509dafa1b7feb20bab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0", "size": 7845, "upload_time": "2020-02-20T12:11:51", "upload_time_iso_8601": "2020-02-20T12:11:51.527686Z", "url": "https://files.pythonhosted.org/packages/27/fc/bce2327e3de47a49b0f2650f29cc1f978ccde2b7a6123b1c9f48328d7633/tfidf_matcher-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8243b18a3f6833a46a5ffc53f4a59510", "sha256": "11f9c96718afee9c8cd343f2fcc57b9e6c5eda0c879dc8f75f2548c57f6b47f3"}, "downloads": -1, "filename": "tfidf_matcher-0.2.1.zip", "has_sig": false, "md5_digest": "8243b18a3f6833a46a5ffc53f4a59510", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 12170, "upload_time": "2020-02-20T12:11:52", "upload_time_iso_8601": "2020-02-20T12:11:52.965232Z", "url": "https://files.pythonhosted.org/packages/05/73/226667c480d503826981da2f242709e5c2bf247a74aa95ba27b5e44cd337/tfidf_matcher-0.2.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a430a3f9e8ba13509dafa1b7feb20bab", "sha256": "3b883355d584ac59f834d77d889be20c972cee856948c100877470d3d87b2358"}, "downloads": -1, "filename": "tfidf_matcher-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a430a3f9e8ba13509dafa1b7feb20bab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0", "size": 7845, "upload_time": "2020-02-20T12:11:51", "upload_time_iso_8601": "2020-02-20T12:11:51.527686Z", "url": "https://files.pythonhosted.org/packages/27/fc/bce2327e3de47a49b0f2650f29cc1f978ccde2b7a6123b1c9f48328d7633/tfidf_matcher-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8243b18a3f6833a46a5ffc53f4a59510", "sha256": "11f9c96718afee9c8cd343f2fcc57b9e6c5eda0c879dc8f75f2548c57f6b47f3"}, "downloads": -1, "filename": "tfidf_matcher-0.2.1.zip", "has_sig": false, "md5_digest": "8243b18a3f6833a46a5ffc53f4a59510", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 12170, "upload_time": "2020-02-20T12:11:52", "upload_time_iso_8601": "2020-02-20T12:11:52.965232Z", "url": "https://files.pythonhosted.org/packages/05/73/226667c480d503826981da2f242709e5c2bf247a74aa95ba27b5e44cd337/tfidf_matcher-0.2.1.zip", "yanked": false}], "timestamp": "Fri May  8 02:54:34 2020"}