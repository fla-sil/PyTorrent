{"info": {"author": "Hugo Doria", "author_email": "hugodoria@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "HnTool\n------\n\nWhat is it?\n~~~~~~~~~~~\n\nHnTool is an open source (GPLv2) hardening tool for Unix. It scans your system for\nvulnerabilities or problems in configuration files allowing you to get a quick\noverview of the security status of your system.\n\nTo use HnTool download it and run: ::\n\n\t# ./hntool\n\nSupported systems\n~~~~~~~~~~~~~~~~~\n\nHnTool was already tested and is working on:\n\n * Arch Linux\n * CentOS\n * Debian\n * Fedora\n * Gentoo\n * Ubuntu\n\nIf you are using HnTool on a system that is not listed above, please, let us know.\n\nHow to install\n~~~~~~~~~~~~~~\n\nTo install HnTool run the following command, as root: ::\n\n\t# python setup.py install --prefix /usr/ --root /\n\nHow to use\n~~~~~~~~~~\n\nRun HnTool with: ::\n\n\t# ./hntool\n\nYou can also see the hntool(1) manual by typing 'man hntool' at the command line\nor see the usage help: ::\n\n\t$ hntool -h\n\n\nUnderstanding the output\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are 5 types of results:\n\n * OK :\n\tMeans that the item checked is fine and that you do not need to worry\n\n * INFO:\n\tMeans that you should know the item status, but probably it is fine. A port\n\topened, for example.\n\n * LOW:\n\tMeans that a security problem was found, but it does not provides a high risk\n\tfor your system.\n\n * MEDIUM:\n\tThings are getting worse and you should start to worry about these itens.\n\n * HIGH:\n\tYou have an important security hole/problem on your system and you\n\tshould fix it NOW or run and save your life.\n\n\nHow can I help?\n~~~~~~~~~~~~~~~\n\nThere are several ways that you can contribute and help HnTool's development.\nYou can contribute with code, patchs, bugs and feature requests.\n\nTo report a bug or a feature request for HnTool, file a issue in our Google Code\npage: http://code.google.com/p/hntool/\n\nIf you're reporting a bug, please give concrete examples of how and where the\nproblem occurs.\n\nIf you've a patch (fixing a bug or a new HnTool module), then you can file an\nissue on Google Code too: http://code.google.com/p/hntool/issues/list\n\nHnTool's source is available on:\n\nhttp://code.google.com/p/hntool/\n\n\nHow to create a module\n~~~~~~~~~~~~~~~~~~~~~~\n\nThis section documents the innards of HnTool and specifies how to create\na new module.\n\nThe main HnTool program (hntool.py) runs a list of rules defined in __files__\nand __services__.\n\n * __files__ :\n\tdefines the rules which process simple files and configs.\n\n * __services__ :\n\tdefines the rules which checks the security on services and\n\tdaemons.\n\nOnce your module is finalized, remember to add it to the appropriate array\n(__files__ or __services__) defined in hntool/__init__.py\n\nA sample HnTool module is like this (hntool/ssh.py): ::\n\n\timport os\n\n\tclass rule:\n\t\tdef short_name(self):\n\t\t\treturn \"ssh\"\n\t\tdef long_name(self):\n\t\t\treturn \"Checks security problems on sshd config file\"\n\t\tdef __init__(self, options):\n\t\t\tpass\n\t\tdef analyze(self, options):\n\t\t\tcheck_results = {'ok': [], 'low': [], 'medium': [], 'high': [], 'info': []}\n\t\t\tssh_conf_file = ['/etc/ssh/sshd_config', '/etc/sshd_config']\n\n\t\t\tfor sshd_conf in ssh_conf_file:\n\t\t\t\tif os.path.isfile(sshd_conf):\n\t\t\t\t\ttry:\n\t\t\t\t\t\tfp = open(sshd_conf,'r')\n\t\t\t\t\texcept IOError, (errno, strerror):\n\t\t\t\t\t\tcheck_results['info'].append('Could not open %s: %s' % (sshd_conf, strerror))\n\t\t\t\t\t\tcontinue\n\n\t\t\t\t\tlines = [x.strip('\\n') for x in fp.readlines()]\n\n\t\t\t\t\t# Checking if SSH is using the default port\n\t\t\t\t\tif 'Port 22' in lines or '#Port 22' in lines:\n\t\t\t\t\t\tcheck_results['low'].append('SSH is using the default port')\n\t\t\t\t\telse:\n\t\t\t\t\t\tcheck_results['ok'].append('SSH is not using the default port')\n\n\t\t\t\t\t# Closing the sshd_config file\n\t\t\t\t\tfp.close()\n\n\t\t\t\treturn check_results\n\t\tdef type(self):\n\t\t\treturn \"files\"\n\n\nMostly, the code is self-explanatory. The following are the list of the methods\nthat each HnTool module must have:\n\n * short_name(self)\n\tReturns a string containing a short name of the module. Usually,this is the\n\tsame as the basename of the module file.\n\n * long_name(self)\n\tReturns a string containing a concise description of the module. This\n\tdescription is used when listing all the rules using hntool -l.\n\n * analyze(self)\n\tShould return a list comprising in turn of five lists: ok, low, medium,\n\thigh and info.\n\n * type(self)\n\t\"files\" for a module processing simple files and configs\n\t\"services\" for a module processing services and daemons", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/hntool/", "keywords": null, "license": "GPL-2", "maintainer": null, "maintainer_email": null, "name": "HnTool", "package_url": "https://pypi.org/project/HnTool/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/HnTool/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/hntool/"}, "release_url": "https://pypi.org/project/HnTool/0.1/", "requires_dist": null, "requires_python": null, "summary": "A hardening tool for *nixes", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-it\">\n<h2>What is it?</h2>\n<p>HnTool is an open source (GPLv2) hardening tool for Unix. It scans your system for\nvulnerabilities or problems in configuration files allowing you to get a quick\noverview of the security status of your system.</p>\n<p>To use HnTool download it and run:</p>\n<pre># ./hntool\n</pre>\n</div>\n<div id=\"supported-systems\">\n<h2>Supported systems</h2>\n<p>HnTool was already tested and is working on:</p>\n<blockquote>\n<ul>\n<li>Arch Linux</li>\n<li>CentOS</li>\n<li>Debian</li>\n<li>Fedora</li>\n<li>Gentoo</li>\n<li>Ubuntu</li>\n</ul>\n</blockquote>\n<p>If you are using HnTool on a system that is not listed above, please, let us know.</p>\n</div>\n<div id=\"how-to-install\">\n<h2>How to install</h2>\n<p>To install HnTool run the following command, as root:</p>\n<pre># python setup.py install --prefix /usr/ --root /\n</pre>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<p>Run HnTool with:</p>\n<pre># ./hntool\n</pre>\n<p>You can also see the hntool(1) manual by typing \u2018man hntool\u2019 at the command line\nor see the usage help:</p>\n<pre>$ hntool -h\n</pre>\n</div>\n<div id=\"understanding-the-output\">\n<h2>Understanding the output</h2>\n<p>There are 5 types of results:</p>\n<blockquote>\n<ul>\n<li><dl>\n<dt>OK :</dt>\n<dd>Means that the item checked is fine and that you do not need to worry</dd>\n</dl>\n</li>\n<li><dl>\n<dt>INFO:</dt>\n<dd>Means that you should know the item status, but probably it is fine. A port\nopened, for example.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>LOW:</dt>\n<dd>Means that a security problem was found, but it does not provides a high risk\nfor your system.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>MEDIUM:</dt>\n<dd>Things are getting worse and you should start to worry about these itens.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>HIGH:</dt>\n<dd>You have an important security hole/problem on your system and you\nshould fix it NOW or run and save your life.</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"how-can-i-help\">\n<h2>How can I help?</h2>\n<p>There are several ways that you can contribute and help HnTool\u2019s development.\nYou can contribute with code, patchs, bugs and feature requests.</p>\n<p>To report a bug or a feature request for HnTool, file a issue in our Google Code\npage: <a href=\"http://code.google.com/p/hntool/\" rel=\"nofollow\">http://code.google.com/p/hntool/</a></p>\n<p>If you\u2019re reporting a bug, please give concrete examples of how and where the\nproblem occurs.</p>\n<p>If you\u2019ve a patch (fixing a bug or a new HnTool module), then you can file an\nissue on Google Code too: <a href=\"http://code.google.com/p/hntool/issues/list\" rel=\"nofollow\">http://code.google.com/p/hntool/issues/list</a></p>\n<p>HnTool\u2019s source is available on:</p>\n<p><a href=\"http://code.google.com/p/hntool/\" rel=\"nofollow\">http://code.google.com/p/hntool/</a></p>\n</div>\n<div id=\"how-to-create-a-module\">\n<h2>How to create a module</h2>\n<p>This section documents the innards of HnTool and specifies how to create\na new module.</p>\n<p>The main HnTool program (hntool.py) runs a list of rules defined in __files__\nand __services__.</p>\n<blockquote>\n<ul>\n<li><dl>\n<dt>__files__ :</dt>\n<dd>defines the rules which process simple files and configs.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>__services__ :</dt>\n<dd>defines the rules which checks the security on services and\ndaemons.</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n<p>Once your module is finalized, remember to add it to the appropriate array\n(__files__ or __services__) defined in hntool/__init__.py</p>\n<p>A sample HnTool module is like this (hntool/ssh.py):</p>\n<pre>import os\n\nclass rule:\n        def short_name(self):\n                return \"ssh\"\n        def long_name(self):\n                return \"Checks security problems on sshd config file\"\n        def __init__(self, options):\n                pass\n        def analyze(self, options):\n                check_results = {'ok': [], 'low': [], 'medium': [], 'high': [], 'info': []}\n                ssh_conf_file = ['/etc/ssh/sshd_config', '/etc/sshd_config']\n\n                for sshd_conf in ssh_conf_file:\n                        if os.path.isfile(sshd_conf):\n                                try:\n                                        fp = open(sshd_conf,'r')\n                                except IOError, (errno, strerror):\n                                        check_results['info'].append('Could not open %s: %s' % (sshd_conf, strerror))\n                                        continue\n\n                                lines = [x.strip('\\n') for x in fp.readlines()]\n\n                                # Checking if SSH is using the default port\n                                if 'Port 22' in lines or '#Port 22' in lines:\n                                        check_results['low'].append('SSH is using the default port')\n                                else:\n                                        check_results['ok'].append('SSH is not using the default port')\n\n                                # Closing the sshd_config file\n                                fp.close()\n\n                        return check_results\n        def type(self):\n                return \"files\"\n</pre>\n<p>Mostly, the code is self-explanatory. The following are the list of the methods\nthat each HnTool module must have:</p>\n<blockquote>\n<ul>\n<li><dl>\n<dt>short_name(self)</dt>\n<dd>Returns a string containing a short name of the module. Usually,this is the\nsame as the basename of the module file.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>long_name(self)</dt>\n<dd>Returns a string containing a concise description of the module. This\ndescription is used when listing all the rules using hntool -l.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>analyze(self)</dt>\n<dd>Should return a list comprising in turn of five lists: ok, low, medium,\nhigh and info.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>type(self)</dt>\n<dd>\u201cfiles\u201d for a module processing simple files and configs\n\u201cservices\u201d for a module processing services and daemons</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 165570, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 00:50:53 2020"}