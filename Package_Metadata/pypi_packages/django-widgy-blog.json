{"info": {"author": "Fusionbox, Inc.", "author_email": "programmers@fusionbox.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7"], "description": "Django Widgy Blog\n=================\n\nThis is reusable blog app designed for use with django-widgy_. It can\nbe utilized as a drop-in addition to a widgy project for creating a\nquick, run-of-the-mill blog or as an abstract guide to building your\nown custom app that takes advantage of all the wonderful features that\nwidgy offers.\n\nQuickstart\n----------\n\n(This guide assumes that your project is already using widgy. Please see\nthis tutorial_ if this is not the case.)\n\n1.  Install the package\n\n        $ pip install django-widgy-blog\n\n2.  Add ``widgy_blog`` to your ``INSTALLED_APPS``.\n\n3.  Run ``python manage.py migrate`` in\n    order to generate the relevant models in the database.\n\n4.  Configure the urls:\n\n    a.  If you're using widgy's ``contrib.urlconf_include`` package, you can\n        opt to use widgy_blog as a plugin. This allows admin users of the site\n        to take advantage of plugin-specific features, such as editing the url\n        route of the blog and customizing its addition to menus. See\n        urlconf_include_ for more information.\n\n    b.  Alternatively, you can include the widgy_blog urls within your urls.py\n        file as you normally would. Just remember to add them before the\n        included Mezzanine urls if you're editing the root conf!\n\n5.  That's it. Log in to the admin center and start adding blog posts!\n\n.. _django-widgy: https://github.com/fusionbox/django-widgy\n.. _tutorial: http://docs.wid.gy/en/latest/tutorials/widgy-mezzanine-tutorial.html\n.. _urlconf_include: http://docs.wid.gy/en/latest/tutorials/widgy-mezzanine-tutorial.html#urlconf-include\n\n\nCHANGES\n=======\n\n0.2.3 (2019-07-15)\n------------------\n\n- Blog views with pagination will now calculate appropriate `rel=prev`\n  and `rel=next` links.\n- Added Django 1.10 support.\n\n\n0.2.2 (2016-02-08)\n------------------\n\n- Fix subclassing view name bug\n\n\n0.2.1 (2016-01-14)\n------------------\n\n- Fix PyPI bug\n\n\n0.2.0 (2016-01-14)\n------------------\n\n- Support for Django 1.8\n- Blog archives are now shown in reverse chronological order.\n- Blogs now have date and time rather than just date published.\n- Tags are now supported\n- Various small bugfixes.\n- Blog views with a page querystring equal to 1 will now have a canonical_url\n  in the template context pointing to the same page without that querystring.\n\n0.1.0 (release 2014-12-03)\n--------------------------\n\n- Add model attributes to AbstractBlogLayout and BlogAdmin\n  that make them easier to subclass. Update AbstractBlogLayout\n  published queryset function to use fewer queries [Scott Clark, #18]\n- **Backwards Incompatible:** Registered the ``BlogLayout`` model with widgy.\n  If you weren't using this as your Blog layout, you will need to unregister\n  it::\n\n      import widgy\n      from widgy_blog.models import BlogLayout\n\n      widgy.unregister(BlogLayout)\n\n  If you were already registering the ``BlogLayout`` yourself, you can just\n  remove that code.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fusionbox/django-widgy-blog/", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-widgy-blog", "package_url": "https://pypi.org/project/django-widgy-blog/", "platform": "", "project_url": "https://pypi.org/project/django-widgy-blog/", "project_urls": {"Homepage": "https://github.com/fusionbox/django-widgy-blog/"}, "release_url": "https://pypi.org/project/django-widgy-blog/0.2.3/", "requires_dist": null, "requires_python": "", "summary": "Reusable blog app for Django-Widgy", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-widgy-blog\">\n<h2>Django Widgy Blog</h2>\n<p>This is reusable blog app designed for use with <a href=\"https://github.com/fusionbox/django-widgy\" rel=\"nofollow\">django-widgy</a>. It can\nbe utilized as a drop-in addition to a widgy project for creating a\nquick, run-of-the-mill blog or as an abstract guide to building your\nown custom app that takes advantage of all the wonderful features that\nwidgy offers.</p>\n<div id=\"quickstart\">\n<h3>Quickstart</h3>\n<p>(This guide assumes that your project is already using widgy. Please see\nthis <a href=\"http://docs.wid.gy/en/latest/tutorials/widgy-mezzanine-tutorial.html\" rel=\"nofollow\">tutorial</a> if this is not the case.)</p>\n<ol>\n<li><p>Install the package</p>\n<blockquote>\n<p>$ pip install django-widgy-blog</p>\n</blockquote>\n</li>\n<li><p>Add <tt>widgy_blog</tt> to your <tt>INSTALLED_APPS</tt>.</p>\n</li>\n<li><p>Run <tt>python manage.py migrate</tt> in\norder to generate the relevant models in the database.</p>\n</li>\n<li><p>Configure the urls:</p>\n<ol>\n<li>If you\u2019re using widgy\u2019s <tt>contrib.urlconf_include</tt> package, you can\nopt to use widgy_blog as a plugin. This allows admin users of the site\nto take advantage of plugin-specific features, such as editing the url\nroute of the blog and customizing its addition to menus. See\n<a href=\"http://docs.wid.gy/en/latest/tutorials/widgy-mezzanine-tutorial.html#urlconf-include\" rel=\"nofollow\">urlconf_include</a> for more information.</li>\n<li>Alternatively, you can include the widgy_blog urls within your urls.py\nfile as you normally would. Just remember to add them before the\nincluded Mezzanine urls if you\u2019re editing the root conf!</li>\n</ol>\n</li>\n<li><p>That\u2019s it. Log in to the admin center and start adding blog posts!</p>\n</li>\n</ol>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>0.2.3 (2019-07-15)</h3>\n<ul>\n<li>Blog views with pagination will now calculate appropriate <cite>rel=prev</cite>\nand <cite>rel=next</cite> links.</li>\n<li>Added Django 1.10 support.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.2 (2016-02-08)</h3>\n<ul>\n<li>Fix subclassing view name bug</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.2.1 (2016-01-14)</h3>\n<ul>\n<li>Fix PyPI bug</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.2.0 (2016-01-14)</h3>\n<ul>\n<li>Support for Django 1.8</li>\n<li>Blog archives are now shown in reverse chronological order.</li>\n<li>Blogs now have date and time rather than just date published.</li>\n<li>Tags are now supported</li>\n<li>Various small bugfixes.</li>\n<li>Blog views with a page querystring equal to 1 will now have a canonical_url\nin the template context pointing to the same page without that querystring.</li>\n</ul>\n</div>\n<div id=\"release-2014-12-03\">\n<h3>0.1.0 (release 2014-12-03)</h3>\n<ul>\n<li><p>Add model attributes to AbstractBlogLayout and BlogAdmin\nthat make them easier to subclass. Update AbstractBlogLayout\npublished queryset function to use fewer queries [Scott Clark, #18]</p>\n</li>\n<li><p><strong>Backwards Incompatible:</strong> Registered the <tt>BlogLayout</tt> model with widgy.\nIf you weren\u2019t using this as your Blog layout, you will need to unregister\nit:</p>\n<pre>import widgy\nfrom widgy_blog.models import BlogLayout\n\nwidgy.unregister(BlogLayout)\n</pre>\n<p>If you were already registering the <tt>BlogLayout</tt> yourself, you can just\nremove that code.</p>\n</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5537484, "releases": {"0.1.0": [], "0.2.0": [{"comment_text": "", "digests": {"md5": "ed0a71f5b7eb77fae8430772bb3ba4f5", "sha256": "8bcd7f9cec2165e9748199e3eecfd9f5cdb1716b37f5d665293e6d81e93c1c03"}, "downloads": -1, "filename": "django_widgy_blog-0.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "ed0a71f5b7eb77fae8430772bb3ba4f5", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 24785, "upload_time": "2016-01-14T23:27:44", "upload_time_iso_8601": "2016-01-14T23:27:44.635661Z", "url": "https://files.pythonhosted.org/packages/83/ea/51a3e4f127465cdd44da022096a11e095e0d2d3e3f7b632bf65c098755eb/django_widgy_blog-0.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "114f3f206fb692d61214a1e9d06b82f4", "sha256": "4f736bca3e2afc17fd057aa3decb5990538a834107829b387e105f3ebaae482e"}, "downloads": -1, "filename": "django-widgy-blog-0.2.0.tar.gz", "has_sig": false, "md5_digest": "114f3f206fb692d61214a1e9d06b82f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15612, "upload_time": "2016-01-14T23:27:37", "upload_time_iso_8601": "2016-01-14T23:27:37.324547Z", "url": "https://files.pythonhosted.org/packages/51/45/db9d37808ffad0d70958062079dd0b9bda1563086a7d99088efc5864276e/django-widgy-blog-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9d27c5fc2b47ead4da62a1c8df2e8784", "sha256": "47d4f8fada23e1406065e67dffc4c741fd391f139bbfa3dc831e1cddc0558feb"}, "downloads": -1, "filename": "django-widgy-blog-0.2.1.tar.gz", "has_sig": false, "md5_digest": "9d27c5fc2b47ead4da62a1c8df2e8784", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15857, "upload_time": "2016-01-14T23:55:04", "upload_time_iso_8601": "2016-01-14T23:55:04.328347Z", "url": "https://files.pythonhosted.org/packages/48/b9/d82237f3334933b6cf4f12c80f46714c46432a1875b69e8ca796c41a86fb/django-widgy-blog-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "5e72cb4f3125293733e2c4951f046e83", "sha256": "852d0f105c75c883305154c1cf7990bf237b7e00196baaa07d7a3346dff0eea4"}, "downloads": -1, "filename": "django-widgy-blog-0.2.2.tar.gz", "has_sig": false, "md5_digest": "5e72cb4f3125293733e2c4951f046e83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14940, "upload_time": "2016-02-09T00:35:38", "upload_time_iso_8601": "2016-02-09T00:35:38.572822Z", "url": "https://files.pythonhosted.org/packages/78/2a/37919eff999bf4f78250791a5f6d363b7bd489d9cf45f4389608687ad971/django-widgy-blog-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "26dae1bfc5c3aab99213bb6b8a11b5a3", "sha256": "64e1118076853f7bb3d11a0a14942f7db00d232a1273a4ed12eb652dd4865618"}, "downloads": -1, "filename": "django-widgy-blog-0.2.3.tar.gz", "has_sig": false, "md5_digest": "26dae1bfc5c3aab99213bb6b8a11b5a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15119, "upload_time": "2019-07-15T23:14:06", "upload_time_iso_8601": "2019-07-15T23:14:06.997506Z", "url": "https://files.pythonhosted.org/packages/6d/cf/4bed3145efee5c8a088627680f447b7b7566d261ba575735c95501f552e3/django-widgy-blog-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26dae1bfc5c3aab99213bb6b8a11b5a3", "sha256": "64e1118076853f7bb3d11a0a14942f7db00d232a1273a4ed12eb652dd4865618"}, "downloads": -1, "filename": "django-widgy-blog-0.2.3.tar.gz", "has_sig": false, "md5_digest": "26dae1bfc5c3aab99213bb6b8a11b5a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15119, "upload_time": "2019-07-15T23:14:06", "upload_time_iso_8601": "2019-07-15T23:14:06.997506Z", "url": "https://files.pythonhosted.org/packages/6d/cf/4bed3145efee5c8a088627680f447b7b7566d261ba575735c95501f552e3/django-widgy-blog-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:52 2020"}