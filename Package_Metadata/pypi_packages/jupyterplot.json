{"info": {"author": "Leandro von Werra", "author_email": "leandro.vonwerra@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "<!--\n\n#################################################\n### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###\n#################################################\n# file to edit: notebooks/index.ipynb\n# command to build the docs after a change: nbdev_build_docs\n\n-->\n\n# jupyterplot\n\n> Create real-time plots in Jupyter notebooks.\n\n\n## What is it?\n\nIt generalises Andreas Madsen's excellent [python-lrcurve](https://github.com/AndreasMadsen/python-lrcurve) library for machine learning to produce visualisations for arbitrary functions in real-time.\n\n![single-plot](notebooks/images/plot_multiple_static.gif)\n\n## Install\n\n`pip install jupyterplot`\n\n## How to use\n### Single plot\n\nCreating a simple real-time plot in a Jupyter notebook is as easy as easy as the following snippet:\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```\nfrom jupyterplot import ProgressPlot\nimport numpy as np\n\npp = ProgressPlot()\nfor i in range(1000):\n    pp.update(np.sin(i / 100))\npp.finalize()\n```\n\n</div>\n\n</div>\n\n![single-plot](notebooks/images/plot_single_dynamic.gif)\n\n**Note:** The `pp.finalize()` statement is necessary to make the plots persistent between notebook sessions.\n\n### Custom range\nBy default, the x and y ranges adapt to new data points. If the scale is known beforehand, it can be steadier to set it beforehand:\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```\npp = ProgressPlot(x_lim=[0, 1000], y_lim=[-1.5, 1.5])\nfor i in range(1000):\n    pp.update(np.sin(i / 100))\npp.finalize()\n```\n\n</div>\n\n</div>\n\n![single-plot](notebooks/images/plot_single_static.gif)\n\n### Multiple lines\nOne can also plot several lines in parallel by specifying the line names in the constructor and passing all values in a list.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```\npp = ProgressPlot(line_names=[\"lin\", \"log\", \"cos\", \"sin\"],\n                  x_lim=[0, 1000],\n                  y_lim=[-1, 4])\n\nfor i in range(1000):\n    pp.update([[i / 250, np.log10(i + 1), np.cos(i / 100), np.sin(i / 100)]])\npp.finalize()\n```\n\n</div>\n\n</div>\n\n![single-plot](notebooks/images/plot_multiple_static.gif)\n\n**Note:** The data is fed to `pp.update()` as a list of lists, where each sublist corresponds to the curves that are generated in each subplot.\n\n### Multiple plots\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```\npp = ProgressPlot(plot_names=[\"cos\", \"sin\"],\n                  line_names=[\"data\", \"delayed-data\"],\n                  x_lim=[0, 1000],\n                  y_lim=[-1, 1])\n\nfor i in range(1000):\n    pp.update([[np.cos(i / 100), np.cos((i + 20) / 100)],\n               [np.sin(i / 100), np.sin((i + 20) / 100)]])\npp.finalize()\n```\n\n</div>\n\n</div>\n\n![single-plot](notebooks/images/plot_multiple_plots_static.gif)\n\n### Custom x-values\nIf the x values should not be incremented by 1 at every update one can set the `x_iterator=False`. This requires passing two values to the `update(x, y)`, where `x` is an `int` or `float` and `y` follows the same format as in the previous examples.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```\npp = ProgressPlot(x_iterator=False, x_label=\"custom-x\", x_lim=[0, 10000], y_lim=[0, 10])\nfor i in range(1000):\n    pp.update(10 * i, i / 100)\npp.finalize()\n```\n\n</div>\n\n</div>\n\n![single-plot](notebooks/images/plot_single_static_custom.gif)\n\n### Decoupled y-limits\nIf each subplot should have different y-limits then the y-limits can be passed as a list containing the the limits for each subplot.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```\npp = ProgressPlot(plot_names=['plot 1', 'plot 2'], x_lim=[0, 1000], y_lim=[[0, 10],[0, 100]])\nfor i in range(1000):\n    pp.update([[(i/100)], [(i/100)**2]])\n```\n\n</div>\n\n</div>\n\n![single-plot](notebooks/images/plot_separate_ylim.gif)\n\n### Input format\n#### Single plot, single line\nIf the progress plot consists of a single plot with a single line one can pass the y-updates as `int` or `float`.\n#### Multiple plots, multiple lines\nIf multiple plots or lines are used, the y-updates can either be lists or dicts:\n```python\ny_update_list = [[y_plot_1_line_1, y_plot_1_line_2],\n                 [y_plot_2_line_1, y_plot_2_line_2]]\n\ny_update_dict = {'plot_name_1': {'line_name_1': y_plot_1_line_1,\n                                 'line_name_2': y_plot_1_line_2},\n                 'plot_name_2': {'line_name_1': y_plot_2_line_1,\n                                 'line_name_2': y_plot_2_line_2}}\n``` \n\n## Limitations\n\n* Only one `ProgressPlot()` object can be used at a time. \n* Each subplot must have the same number of lines.\n* The same color cycle for each subplot is used.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lvwerra/jupyterplot", "keywords": "real-time,plot,jupyter,notebooks", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "jupyterplot", "package_url": "https://pypi.org/project/jupyterplot/", "platform": "", "project_url": "https://pypi.org/project/jupyterplot/", "project_urls": {"Homepage": "https://github.com/lvwerra/jupyterplot"}, "release_url": "https://pypi.org/project/jupyterplot/0.0.2/", "requires_dist": ["lrcurve", "numpy", "matplotlib"], "requires_python": ">=3.6", "summary": "Create real-time plots in Jupyter Notebooks.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jupyterplot</h1>\n<blockquote>\n<p>Create real-time plots in Jupyter notebooks.</p>\n</blockquote>\n<h2>What is it?</h2>\n<p>It generalises Andreas Madsen's excellent <a href=\"https://github.com/AndreasMadsen/python-lrcurve\" rel=\"nofollow\">python-lrcurve</a> library for machine learning to produce visualisations for arbitrary functions in real-time.</p>\n<p><img alt=\"single-plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e4e89e230f1e9f4bd122d329a1a5fde63d73b97/6e6f7465626f6f6b732f696d616765732f706c6f745f6d756c7469706c655f7374617469632e676966\"></p>\n<h2>Install</h2>\n<p><code>pip install jupyterplot</code></p>\n<h2>How to use</h2>\n<h3>Single plot</h3>\n<p>Creating a simple real-time plot in a Jupyter notebook is as easy as easy as the following snippet:</p>\n<div>\n<div>\n<pre><code>from jupyterplot import ProgressPlot\nimport numpy as np\n\npp = ProgressPlot()\nfor i in range(1000):\n    pp.update(np.sin(i / 100))\npp.finalize()\n</code></pre>\n</div>\n</div>\n<p><img alt=\"single-plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6da3a643a68d25315b94319f71b203793957046c/6e6f7465626f6f6b732f696d616765732f706c6f745f73696e676c655f64796e616d69632e676966\"></p>\n<p><strong>Note:</strong> The <code>pp.finalize()</code> statement is necessary to make the plots persistent between notebook sessions.</p>\n<h3>Custom range</h3>\n<p>By default, the x and y ranges adapt to new data points. If the scale is known beforehand, it can be steadier to set it beforehand:</p>\n<div>\n<div>\n<pre><code>pp = ProgressPlot(x_lim=[0, 1000], y_lim=[-1.5, 1.5])\nfor i in range(1000):\n    pp.update(np.sin(i / 100))\npp.finalize()\n</code></pre>\n</div>\n</div>\n<p><img alt=\"single-plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f213bcfa55c3185380ccea27edc09bc40e7da2e5/6e6f7465626f6f6b732f696d616765732f706c6f745f73696e676c655f7374617469632e676966\"></p>\n<h3>Multiple lines</h3>\n<p>One can also plot several lines in parallel by specifying the line names in the constructor and passing all values in a list.</p>\n<div>\n<div>\n<pre><code>pp = ProgressPlot(line_names=[\"lin\", \"log\", \"cos\", \"sin\"],\n                  x_lim=[0, 1000],\n                  y_lim=[-1, 4])\n\nfor i in range(1000):\n    pp.update([[i / 250, np.log10(i + 1), np.cos(i / 100), np.sin(i / 100)]])\npp.finalize()\n</code></pre>\n</div>\n</div>\n<p><img alt=\"single-plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e4e89e230f1e9f4bd122d329a1a5fde63d73b97/6e6f7465626f6f6b732f696d616765732f706c6f745f6d756c7469706c655f7374617469632e676966\"></p>\n<p><strong>Note:</strong> The data is fed to <code>pp.update()</code> as a list of lists, where each sublist corresponds to the curves that are generated in each subplot.</p>\n<h3>Multiple plots</h3>\n<div>\n<div>\n<pre><code>pp = ProgressPlot(plot_names=[\"cos\", \"sin\"],\n                  line_names=[\"data\", \"delayed-data\"],\n                  x_lim=[0, 1000],\n                  y_lim=[-1, 1])\n\nfor i in range(1000):\n    pp.update([[np.cos(i / 100), np.cos((i + 20) / 100)],\n               [np.sin(i / 100), np.sin((i + 20) / 100)]])\npp.finalize()\n</code></pre>\n</div>\n</div>\n<p><img alt=\"single-plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/921aef95d6ba0cccdd60b25ee4b9dd253e277b9f/6e6f7465626f6f6b732f696d616765732f706c6f745f6d756c7469706c655f706c6f74735f7374617469632e676966\"></p>\n<h3>Custom x-values</h3>\n<p>If the x values should not be incremented by 1 at every update one can set the <code>x_iterator=False</code>. This requires passing two values to the <code>update(x, y)</code>, where <code>x</code> is an <code>int</code> or <code>float</code> and <code>y</code> follows the same format as in the previous examples.</p>\n<div>\n<div>\n<pre><code>pp = ProgressPlot(x_iterator=False, x_label=\"custom-x\", x_lim=[0, 10000], y_lim=[0, 10])\nfor i in range(1000):\n    pp.update(10 * i, i / 100)\npp.finalize()\n</code></pre>\n</div>\n</div>\n<p><img alt=\"single-plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b327f0e61065553b4d6eb8f68ea6806c65ddc39e/6e6f7465626f6f6b732f696d616765732f706c6f745f73696e676c655f7374617469635f637573746f6d2e676966\"></p>\n<h3>Decoupled y-limits</h3>\n<p>If each subplot should have different y-limits then the y-limits can be passed as a list containing the the limits for each subplot.</p>\n<div>\n<div>\n<pre><code>pp = ProgressPlot(plot_names=['plot 1', 'plot 2'], x_lim=[0, 1000], y_lim=[[0, 10],[0, 100]])\nfor i in range(1000):\n    pp.update([[(i/100)], [(i/100)**2]])\n</code></pre>\n</div>\n</div>\n<p><img alt=\"single-plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb365c97591ec8e4c5a7d97f22fb19176d01daf5/6e6f7465626f6f6b732f696d616765732f706c6f745f73657061726174655f796c696d2e676966\"></p>\n<h3>Input format</h3>\n<h4>Single plot, single line</h4>\n<p>If the progress plot consists of a single plot with a single line one can pass the y-updates as <code>int</code> or <code>float</code>.</p>\n<h4>Multiple plots, multiple lines</h4>\n<p>If multiple plots or lines are used, the y-updates can either be lists or dicts:</p>\n<pre><span class=\"n\">y_update_list</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">y_plot_1_line_1</span><span class=\"p\">,</span> <span class=\"n\">y_plot_1_line_2</span><span class=\"p\">],</span>\n                 <span class=\"p\">[</span><span class=\"n\">y_plot_2_line_1</span><span class=\"p\">,</span> <span class=\"n\">y_plot_2_line_2</span><span class=\"p\">]]</span>\n\n<span class=\"n\">y_update_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'plot_name_1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'line_name_1'</span><span class=\"p\">:</span> <span class=\"n\">y_plot_1_line_1</span><span class=\"p\">,</span>\n                                 <span class=\"s1\">'line_name_2'</span><span class=\"p\">:</span> <span class=\"n\">y_plot_1_line_2</span><span class=\"p\">},</span>\n                 <span class=\"s1\">'plot_name_2'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'line_name_1'</span><span class=\"p\">:</span> <span class=\"n\">y_plot_2_line_1</span><span class=\"p\">,</span>\n                                 <span class=\"s1\">'line_name_2'</span><span class=\"p\">:</span> <span class=\"n\">y_plot_2_line_2</span><span class=\"p\">}}</span>\n</pre>\n<h2>Limitations</h2>\n<ul>\n<li>Only one <code>ProgressPlot()</code> object can be used at a time.</li>\n<li>Each subplot must have the same number of lines.</li>\n<li>The same color cycle for each subplot is used.</li>\n</ul>\n\n          </div>"}, "last_serial": 6816599, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ee7fa3822cf1f52c4142fedba7415925", "sha256": "5f0a357032aef381627dc9a0174a6ae177b13edb2d8d98c99c04f5af5f7cd157"}, "downloads": -1, "filename": "jupyterplot-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ee7fa3822cf1f52c4142fedba7415925", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10091, "upload_time": "2020-01-18T13:27:34", "upload_time_iso_8601": "2020-01-18T13:27:34.099018Z", "url": "https://files.pythonhosted.org/packages/07/50/2aebd256cf2714cabbf6d07d146e36e69d2703a9e1466791452a06ac2ba2/jupyterplot-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56278d4b58c6a0b13ec5d45491342dbb", "sha256": "9930b7dfc51a3498a9812a9223e07f0d916ce314cbd71af1b619b79fddd93a4c"}, "downloads": -1, "filename": "jupyterplot-0.0.1.tar.gz", "has_sig": false, "md5_digest": "56278d4b58c6a0b13ec5d45491342dbb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11576, "upload_time": "2020-01-18T13:27:36", "upload_time_iso_8601": "2020-01-18T13:27:36.809764Z", "url": "https://files.pythonhosted.org/packages/2f/5e/5acc1999ac138e376a57195861ff328c6beb4037aec7e6f546b25ee02d70/jupyterplot-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9f8bc4c66417450b650d167887d0900c", "sha256": "5ccc9f98d5e545dbf36a831c8a11c42fea5307f03e3364914cfcd3d438d89677"}, "downloads": -1, "filename": "jupyterplot-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9f8bc4c66417450b650d167887d0900c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10294, "upload_time": "2020-03-15T18:20:04", "upload_time_iso_8601": "2020-03-15T18:20:04.703915Z", "url": "https://files.pythonhosted.org/packages/6d/03/148b6e179db3e787ce995574cf7ca7c97914239770b6f08121ed7487a2be/jupyterplot-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15fd664e3d552596108e321d8a3cae86", "sha256": "9da93b5ef82cdea8ffd18f6f40fe1162561402e809b9711e754a615607da2f19"}, "downloads": -1, "filename": "jupyterplot-0.0.2.tar.gz", "has_sig": false, "md5_digest": "15fd664e3d552596108e321d8a3cae86", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11904, "upload_time": "2020-03-15T18:20:06", "upload_time_iso_8601": "2020-03-15T18:20:06.257381Z", "url": "https://files.pythonhosted.org/packages/1b/d6/ef749c4ca883cf7983b5092cd3c4edce7b9979ad269797204e88d64a39b5/jupyterplot-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f8bc4c66417450b650d167887d0900c", "sha256": "5ccc9f98d5e545dbf36a831c8a11c42fea5307f03e3364914cfcd3d438d89677"}, "downloads": -1, "filename": "jupyterplot-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9f8bc4c66417450b650d167887d0900c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10294, "upload_time": "2020-03-15T18:20:04", "upload_time_iso_8601": "2020-03-15T18:20:04.703915Z", "url": "https://files.pythonhosted.org/packages/6d/03/148b6e179db3e787ce995574cf7ca7c97914239770b6f08121ed7487a2be/jupyterplot-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15fd664e3d552596108e321d8a3cae86", "sha256": "9da93b5ef82cdea8ffd18f6f40fe1162561402e809b9711e754a615607da2f19"}, "downloads": -1, "filename": "jupyterplot-0.0.2.tar.gz", "has_sig": false, "md5_digest": "15fd664e3d552596108e321d8a3cae86", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11904, "upload_time": "2020-03-15T18:20:06", "upload_time_iso_8601": "2020-03-15T18:20:06.257381Z", "url": "https://files.pythonhosted.org/packages/1b/d6/ef749c4ca883cf7983b5092cd3c4edce7b9979ad269797204e88d64a39b5/jupyterplot-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:09 2020"}