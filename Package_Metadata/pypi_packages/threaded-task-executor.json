{"info": {"author": "enchant97", "author_email": "contact@enchantedcode.co.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Utilities"], "description": "# Threaded Task Executor\nAllows functions to be called in a seperate thread and executed in FIFO order.\n## Possible Uses:\n- For serial communication where send/recv order matters\n- Run background tasks in tkinter easily, without freezing gui\n- Any application where background tasks are required to be executed in order\n## Gettings Started:\n### Installing\n```\npip install threaded-task-executor\n```\n### Importing\n```python\nfrom threaded_task_executor import Task_Queue, Task\n```\n### How To Use\n```python\ntasks = Task_Queue()\ntasks.add_task(Task(print, args=(\"test 1\")))\ntasks.add_task(Task(print, args=(\"test 2\")))\n```\nWhen this is run it should start the thread\nand execute the tasks in FIFO order.\n\n## Documentation:\n```python\nTask(func, callback=None, task_name=\"\", args=(), kwargs={})\n```\n- func : the function that will be called when executed\n- callback : function that will be run when the task has started and finished\n    - callback(\"STARTED\", task_name)\n    - callback(\"FINISHED\", task_name)\n- task_name : the name of the task\n- args : tuple of arguments that will be given to the function\n- kwargs : dict of keyword arguments that will be given to the function\n\n```python\nTask_Queue(daemon=None)\n```\n- daemon : (True, False, None) : Whether main thread has to wait for thread to finish before stopping main thread\n- add_task(new_task) : Adds a new task obj, if there is no threads running will start one\n- get_current_task() : Allows for the current task that is executing to be returned\n- tasks_left() : Returns the number of tasks left to be completed, includes currently executing task if any.\n- add_from_func(callback, task_name) : used as a decorator which acts as add_task()\n\n## Updates:\n### 1.1\n- New decorator method that allows for adding to a Task_Queue obj\n### 1.0\nFirst version\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/enchant97/python-threadedtaskexecutor", "keywords": "threading tasks order queue", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "threaded-task-executor", "package_url": "https://pypi.org/project/threaded-task-executor/", "platform": "", "project_url": "https://pypi.org/project/threaded-task-executor/", "project_urls": {"Homepage": "http://github.com/enchant97/python-threadedtaskexecutor"}, "release_url": "https://pypi.org/project/threaded-task-executor/1.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Spawn a thread that executes tasks in order", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Threaded Task Executor</h1>\n<p>Allows functions to be called in a seperate thread and executed in FIFO order.</p>\n<h2>Possible Uses:</h2>\n<ul>\n<li>For serial communication where send/recv order matters</li>\n<li>Run background tasks in tkinter easily, without freezing gui</li>\n<li>Any application where background tasks are required to be executed in order</li>\n</ul>\n<h2>Gettings Started:</h2>\n<h3>Installing</h3>\n<pre><code>pip install threaded-task-executor\n</code></pre>\n<h3>Importing</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">threaded_task_executor</span> <span class=\"kn\">import</span> <span class=\"n\">Task_Queue</span><span class=\"p\">,</span> <span class=\"n\">Task</span>\n</pre>\n<h3>How To Use</h3>\n<pre><span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"n\">Task_Queue</span><span class=\"p\">()</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">add_task</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"test 1\"</span><span class=\"p\">)))</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">add_task</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"test 2\"</span><span class=\"p\">)))</span>\n</pre>\n<p>When this is run it should start the thread\nand execute the tasks in FIFO order.</p>\n<h2>Documentation:</h2>\n<pre><span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">task_name</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(),</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n</pre>\n<ul>\n<li>func : the function that will be called when executed</li>\n<li>callback : function that will be run when the task has started and finished\n<ul>\n<li>callback(\"STARTED\", task_name)</li>\n<li>callback(\"FINISHED\", task_name)</li>\n</ul>\n</li>\n<li>task_name : the name of the task</li>\n<li>args : tuple of arguments that will be given to the function</li>\n<li>kwargs : dict of keyword arguments that will be given to the function</li>\n</ul>\n<pre><span class=\"n\">Task_Queue</span><span class=\"p\">(</span><span class=\"n\">daemon</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>daemon : (True, False, None) : Whether main thread has to wait for thread to finish before stopping main thread</li>\n<li>add_task(new_task) : Adds a new task obj, if there is no threads running will start one</li>\n<li>get_current_task() : Allows for the current task that is executing to be returned</li>\n<li>tasks_left() : Returns the number of tasks left to be completed, includes currently executing task if any.</li>\n<li>add_from_func(callback, task_name) : used as a decorator which acts as add_task()</li>\n</ul>\n<h2>Updates:</h2>\n<h3>1.1</h3>\n<ul>\n<li>New decorator method that allows for adding to a Task_Queue obj</li>\n</ul>\n<h3>1.0</h3>\n<p>First version</p>\n\n          </div>"}, "last_serial": 6371469, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "6769e3d9d8dc9c21905531de65f78ff7", "sha256": "8263069c932d031f273a498abb845667535fd81dfe859103692ba21856f0b92d"}, "downloads": -1, "filename": "threaded_task_executor-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6769e3d9d8dc9c21905531de65f78ff7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5219, "upload_time": "2019-12-29T12:26:09", "upload_time_iso_8601": "2019-12-29T12:26:09.308662Z", "url": "https://files.pythonhosted.org/packages/cc/06/ae286be73c4bffca82900d16ebd2eb1e53aa04f9ca68a547a45e01ae70ba/threaded_task_executor-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd15e166680c8477a2ecb93b6c7391b2", "sha256": "f0889d47e81a67bcce1c2fea9925f63836cc44ead97b78ab7a92c7733649858e"}, "downloads": -1, "filename": "threaded-task-executor-1.0.tar.gz", "has_sig": false, "md5_digest": "fd15e166680c8477a2ecb93b6c7391b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3216, "upload_time": "2019-12-29T12:26:11", "upload_time_iso_8601": "2019-12-29T12:26:11.395294Z", "url": "https://files.pythonhosted.org/packages/c9/5a/4eb65fa0e70d0394ac16ee1c93749660be8d0ca5a07b2124baf14b02c464/threaded-task-executor-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "c885d09388ae6829747867d7b3edba66", "sha256": "0bb49c0a0b9445827db8d3571e46bd9688b9261735f41d88f8a6a2f67e9a7d8b"}, "downloads": -1, "filename": "threaded_task_executor-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c885d09388ae6829747867d7b3edba66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5473, "upload_time": "2019-12-29T12:29:23", "upload_time_iso_8601": "2019-12-29T12:29:23.982440Z", "url": "https://files.pythonhosted.org/packages/f6/d3/e2492f6ba9e3fedba819fb6efe746b9d8c6595b4e3585b8ee15627bcd944/threaded_task_executor-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42bcd58002160768da48ae00b2ea6837", "sha256": "888ce0989ed9ed590732794cfb99e870ddfb1693bf03ad6e1d6cb1b3661d87b5"}, "downloads": -1, "filename": "threaded-task-executor-1.1.tar.gz", "has_sig": false, "md5_digest": "42bcd58002160768da48ae00b2ea6837", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3453, "upload_time": "2019-12-29T12:29:25", "upload_time_iso_8601": "2019-12-29T12:29:25.443564Z", "url": "https://files.pythonhosted.org/packages/14/2c/809db51a04536f5e4c6908695336c354c60a2f9e91014310122339b8b0e0/threaded-task-executor-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c885d09388ae6829747867d7b3edba66", "sha256": "0bb49c0a0b9445827db8d3571e46bd9688b9261735f41d88f8a6a2f67e9a7d8b"}, "downloads": -1, "filename": "threaded_task_executor-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c885d09388ae6829747867d7b3edba66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5473, "upload_time": "2019-12-29T12:29:23", "upload_time_iso_8601": "2019-12-29T12:29:23.982440Z", "url": "https://files.pythonhosted.org/packages/f6/d3/e2492f6ba9e3fedba819fb6efe746b9d8c6595b4e3585b8ee15627bcd944/threaded_task_executor-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42bcd58002160768da48ae00b2ea6837", "sha256": "888ce0989ed9ed590732794cfb99e870ddfb1693bf03ad6e1d6cb1b3661d87b5"}, "downloads": -1, "filename": "threaded-task-executor-1.1.tar.gz", "has_sig": false, "md5_digest": "42bcd58002160768da48ae00b2ea6837", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3453, "upload_time": "2019-12-29T12:29:25", "upload_time_iso_8601": "2019-12-29T12:29:25.443564Z", "url": "https://files.pythonhosted.org/packages/14/2c/809db51a04536f5e4c6908695336c354c60a2f9e91014310122339b8b0e0/threaded-task-executor-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:46 2020"}