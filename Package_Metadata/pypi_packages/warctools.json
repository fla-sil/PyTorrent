{"info": {"author": "Thomas Figg", "author_email": "tef@warctools.twentygototen.org", "bugtrack_url": null, "classifiers": [], "description": "dependencies\n\tsetuptools\n\tunittest2\n\tpython 2.6\n\nhanzo warc tools:\n\n    warcvalid.py\n        returns 0 if the arguments are all valid arc/warc files\n        non zero on error \n\n    warcdump.py - writes human readable summary of warcfiles:\n        usage: python warcdump.py foo.warc foo.warc.gz\n        autodetects input format when filenames are passed\n        i.e recordgzip vs plaintext, warc vs arc\n\n        assumes uncompressed warc on stdin if no args\n\n    warcfilter.py \n        python warcfilter.py pattern file file file\n            searches all headers for regex pattern\n        use -i to invert search\n        use -U to constrain to url\n        use -T to constrain to record type\n        use -C to constrain to content-type\n            \n        autodetects and stdin like warcdump\n\n        prints out a warc format by default.\n\n    warc2warc.py:\n        python warc2warc <input files>\n\n        autodetects compression on file\n        args, assumes uncompressed stdin if none\n\n        use -Z to write compressed output\n\n        i.e warc2warc -Z input > input.gz\n\n        should ignore buggy records in input\n\n    arc2warc.py\n        creates a crappy warc file from arc files on input\n        a handful of headers are preserved\n        use -Z to write compressed output\n        i.e arc2warc -Z input.arc > input.warc.gz\n\n    warcindex.py\n        spits out an index like this:\n#WARC filename offset warc-type warc-subject-uri warc-record-id content-type content-length\nwarccrap/mywarc.warc 1196018 request /images/slides/hanzo_markm__wwwoh.pdf <urn:uuid:fd1255a8-d07c-11df-b125-12313b0a18c6> application/http;msgtype=request 193\nwarccrap/mywarc.warc 1196631 response http://www.hanzoarchives.com/images/slides/hanzo_markm__wwwoh.pdf <urn:uuid:fd2614f8-d07c-11df-b125-12313b0a18c6> application/http;msgtype=response 3279474\n        not great, but a start\n                \nnotes:\n\n    arc2warc uses the conversion rules from the earlier arc2warc.c\n    as a starter for converting the headers\n\n    I haven't profiled the code yet (and don't plan to until it falls over)\n\n    warcvalid barely skirts some of the iso standard:\n        missing things: strict whitespace, required headers check...\n\tmime quoted printable header encoding\n\ttreating headers as utf8\n\nthings left to do (in no order):\n    lots more testing.\n    supporting pre 1.0 warc files\n    add more documentation\n    support more commandline options for output and filenames\n    s3 urls\n\n\n-- tef thomas.figg@hanzoarchives.com\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "warctools", "package_url": "https://pypi.org/project/warctools/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/warctools/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/warctools/4.10.0/", "requires_dist": null, "requires_python": null, "summary": "Command line tools and libraries for handling and manipulating WARC files (and HTTP contents)", "version": "4.10.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            dependencies<br>\tsetuptools<br>\tunittest2<br>\tpython 2.6<br><br>hanzo warc tools:<br><br>    warcvalid.py<br>        returns 0 if the arguments are all valid arc/warc files<br>        non zero on error <br><br>    warcdump.py - writes human readable summary of warcfiles:<br>        usage: python warcdump.py foo.warc foo.warc.gz<br>        autodetects input format when filenames are passed<br>        i.e recordgzip vs plaintext, warc vs arc<br><br>        assumes uncompressed warc on stdin if no args<br><br>    warcfilter.py <br>        python warcfilter.py pattern file file file<br>            searches all headers for regex pattern<br>        use -i to invert search<br>        use -U to constrain to url<br>        use -T to constrain to record type<br>        use -C to constrain to content-type<br>            <br>        autodetects and stdin like warcdump<br><br>        prints out a warc format by default.<br><br>    warc2warc.py:<br>        python warc2warc &lt;input files&gt;<br><br>        autodetects compression on file<br>        args, assumes uncompressed stdin if none<br><br>        use -Z to write compressed output<br><br>        i.e warc2warc -Z input &gt; input.gz<br><br>        should ignore buggy records in input<br><br>    arc2warc.py<br>        creates a crappy warc file from arc files on input<br>        a handful of headers are preserved<br>        use -Z to write compressed output<br>        i.e arc2warc -Z input.arc &gt; input.warc.gz<br><br>    warcindex.py<br>        spits out an index like this:<br>#WARC filename offset warc-type warc-subject-uri warc-record-id content-type content-length<br>warccrap/mywarc.warc 1196018 request /images/slides/hanzo_markm__wwwoh.pdf &lt;urn:uuid:fd1255a8-d07c-11df-b125-12313b0a18c6&gt; application/http;msgtype=request 193<br>warccrap/mywarc.warc 1196631 response http://www.hanzoarchives.com/images/slides/hanzo_markm__wwwoh.pdf &lt;urn:uuid:fd2614f8-d07c-11df-b125-12313b0a18c6&gt; application/http;msgtype=response 3279474<br>        not great, but a start<br>                <br>notes:<br><br>    arc2warc uses the conversion rules from the earlier arc2warc.c<br>    as a starter for converting the headers<br><br>    I haven't profiled the code yet (and don't plan to until it falls over)<br><br>    warcvalid barely skirts some of the iso standard:<br>        missing things: strict whitespace, required headers check...<br>\tmime quoted printable header encoding<br>\ttreating headers as utf8<br><br>things left to do (in no order):<br>    lots more testing.<br>    supporting pre 1.0 warc files<br>    add more documentation<br>    support more commandline options for output and filenames<br>    s3 urls<br><br><br>-- tef thomas.figg@hanzoarchives.com<br>\n          </div>"}, "last_serial": 2321418, "releases": {"4.10.0": [{"comment_text": "", "digests": {"md5": "85fe5aca687632ad7962272404458547", "sha256": "ce0c6e274db8ac8810f7c97b3943e8e8deadbc3f5c982db77cddaae2d2ae6170"}, "downloads": -1, "filename": "warctools-4.10.0.tar.gz", "has_sig": false, "md5_digest": "85fe5aca687632ad7962272404458547", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24619, "upload_time": "2016-09-02T16:06:52", "upload_time_iso_8601": "2016-09-02T16:06:52.310940Z", "url": "https://files.pythonhosted.org/packages/e6/5b/17eacaa14dde83dbecb62be44c21c5e9b8f2c709c1da5846e361c3033f3b/warctools-4.10.0.tar.gz", "yanked": false}], "4.7": [{"comment_text": "built for Darwin-12.4.0", "digests": {"md5": "48fb6cf3ed9d05b446034588c3ee4e54", "sha256": "b7c316206c9245eb9281d180f7af44160b5231960b7710e2619ca95c92f63da8"}, "downloads": -1, "filename": "warctools-4.7.macosx-10.8-intel.tar.gz", "has_sig": false, "md5_digest": "48fb6cf3ed9d05b446034588c3ee4e54", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 54299, "upload_time": "2013-10-01T16:31:17", "upload_time_iso_8601": "2013-10-01T16:31:17.095097Z", "url": "https://files.pythonhosted.org/packages/89/85/ea703995b979017c61f6dda6395aeae11cea871586e7b6ebe0de6e25da06/warctools-4.7.macosx-10.8-intel.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "43230b20df27ce2252ef3e74d0ed467b", "sha256": "9b883ff5e21e47cc16b10d0d23e99e553bbb78682842aaa89f6a345e6eb792f1"}, "downloads": -1, "filename": "warctools-4.7-py2.7.egg", "has_sig": false, "md5_digest": "43230b20df27ce2252ef3e74d0ed467b", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 75329, "upload_time": "2013-10-01T16:32:20", "upload_time_iso_8601": "2013-10-01T16:32:20.979939Z", "url": "https://files.pythonhosted.org/packages/7f/39/89fa38aeebb00df6bd76d42e1f66ac8921258bbce157438d8f11588be972/warctools-4.7-py2.7.egg", "yanked": false}], "4.8-": [{"comment_text": "", "digests": {"md5": "d88a2d44c5411d210543391bb6d5a91c", "sha256": "6475adb5b2bf1b999b3dee8211476d247ab8353842aa078003c0b3a63e24c52b"}, "downloads": -1, "filename": "warctools-4.8_-py2.7.egg", "has_sig": false, "md5_digest": "d88a2d44c5411d210543391bb6d5a91c", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 75330, "upload_time": "2013-10-01T16:32:36", "upload_time_iso_8601": "2013-10-01T16:32:36.240737Z", "url": "https://files.pythonhosted.org/packages/0e/ce/8446429ada5ddfa7ed160826aea0c3ea1bb4be84e8c1e6c1ed7613390b24/warctools-4.8_-py2.7.egg", "yanked": false}], "4.8.1-": [{"comment_text": "", "digests": {"md5": "a5b116c60cfae7e2f91a705af31fff9e", "sha256": "58160cf26e4a0193928b677fd0b747704d4ef6853ed093657f31f72dfcd06af3"}, "downloads": -1, "filename": "warctools-4.8.1_-py2.7.egg", "has_sig": false, "md5_digest": "a5b116c60cfae7e2f91a705af31fff9e", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 75340, "upload_time": "2013-10-07T16:11:04", "upload_time_iso_8601": "2013-10-07T16:11:04.198680Z", "url": "https://files.pythonhosted.org/packages/3d/ed/e0fd660f758380d4cd3e96fb232c073afbacaa8865bf3ae70fe77c7b7de8/warctools-4.8.1_-py2.7.egg", "yanked": false}], "4.9.0": [{"comment_text": "", "digests": {"md5": "a391cddf672a790a88a3fa59bd9097f5", "sha256": "81796a4a05779e6746930d3e43a556363fcf77d0361c10611c78db4109a8817f"}, "downloads": -1, "filename": "warctools-4.9.0.tar.gz", "has_sig": false, "md5_digest": "a391cddf672a790a88a3fa59bd9097f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24099, "upload_time": "2014-01-04T14:55:30", "upload_time_iso_8601": "2014-01-04T14:55:30.072951Z", "url": "https://files.pythonhosted.org/packages/1f/64/e9773e62702a18119c19ada6fd6220339853c89af1e405b8348b5351bbfe/warctools-4.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "85fe5aca687632ad7962272404458547", "sha256": "ce0c6e274db8ac8810f7c97b3943e8e8deadbc3f5c982db77cddaae2d2ae6170"}, "downloads": -1, "filename": "warctools-4.10.0.tar.gz", "has_sig": false, "md5_digest": "85fe5aca687632ad7962272404458547", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24619, "upload_time": "2016-09-02T16:06:52", "upload_time_iso_8601": "2016-09-02T16:06:52.310940Z", "url": "https://files.pythonhosted.org/packages/e6/5b/17eacaa14dde83dbecb62be44c21c5e9b8f2c709c1da5846e361c3033f3b/warctools-4.10.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:26 2020"}