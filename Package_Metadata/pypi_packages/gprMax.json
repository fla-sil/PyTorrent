{"info": {"author": "Craig Warren and Antonis Giannopoulos", "author_email": "", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Cython", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering"], "description": ".. image:: https://readthedocs.org/projects/gprmax/badge/?version=latest\n    :target: http://docs.gprmax.com/en/latest/?badge=latest\n    :alt: Documentation Status\n\n|\n\n.. image:: docs/source/images/gprMax_logo_small.png\n    :target: http://www.gprmax.com\n\n***************\nGetting Started\n***************\n\nWhat is gprMax?\n===============\n\n`gprMax <http://www.gprmax.com>`_ is open source software that simulates electromagnetic wave propagation. It solves Maxwell's equations in 3D using the Finite-Difference Time-Domain (FDTD) method. gprMax was designed for modelling Ground Penetrating Radar (GPR) but can also be used to model electromagnetic wave propagation for many other applications.\n\ngprMax is currently released under the `GNU General Public License v3 or higher <http://www.gnu.org/copyleft/gpl.html>`_.\n\ngprMax is principally written in `Python <https://www.python.org>`_ 3 with performance-critical parts written in `Cython <http://cython.org>`_. It includes a CPU-based solver parallelised using `OpenMP <http://www.openmp.org>`_, and a GPU-based solver written using the `NVIDIA CUDA <https://developer.nvidia.com/cuda-zone>`_ programming model.\n\nUsing gprMax? Cite us\n---------------------\n\nIf you use gprMax and publish your work we would be grateful if you could cite our work using:\n\n* Warren, C., Giannopoulos, A., & Giannakis I. (2016). gprMax: Open source software to simulate electromagnetic wave propagation for Ground Penetrating Radar, `Computer Physics Communications` (http://dx.doi.org/10.1016/j.cpc.2016.08.020)\n\nFor further information on referencing gprMax visit the `Publications section of our website <http://www.gprmax.com/publications.shtml>`_.\n\n\nPackage overview\n================\n\n.. code-block:: bash\n\n    gprMax/\n        conda_env.yml\n        CONTRIBUTORS\n        docs/\n        gprMax/\n        gsoc-ideas.md\n        LICENSE\n        README.rst\n        setup.cfg\n        setup.py\n        tests/\n        tools/\n        user_libs/\n        user_models/\n\n\n* ``conda_env.yml`` is a configuration file for Anaconda (Miniconda) that sets up a Python environment with all the required Python packages for gprMax.\n* ``CONTRIBUTORS`` contains a list of names of people who have contributed to the gprMax codebase.\n* ``docs`` contains source files for the User Guide. The User Guide is written using `reStructuredText <http://docutils.sourceforge.net/rst.html>`_ markup, and is built using `Sphinx <http://sphinx-doc.org>`_ and `Read the Docs <https://readthedocs.org>`_.\n* ``gprMax`` is the main package. Within this package the main module is ``gprMax.py``\n* ``gsoc-ideas.md`` is a list of potential project ideas for `Google Summer of Code <https://summerofcode.withgoogle.com>`_ program\n* ``LICENSE`` contains information on the `GNU General Public License v3 or higher <http://www.gnu.org/copyleft/gpl.html>`_.\n* ``README.rst`` contains getting started information on installation, usage, and new features/changes.\n* ``setup.cfg`` is used to set preference for code formatting/styling using flake8.\n* ``setup.py`` is used to compile the Cython extension modules.\n* ``tests`` is a sub-package which contains test modules and input files.\n* ``tools`` is a sub-package which contains scripts to assist with viewing and post-processing output from models.\n* ``user_libs`` is a sub-package where useful modules contributed by users are stored.\n* ``user_models`` is a sub-package where useful input files contributed by users are stored.\n\nInstallation\n============\n\nThe following steps provide guidance on how to install gprMax:\n\n1. Install Python, required Python packages, and get the gprMax source code from GitHub\n2. Install a C compiler which supports OpenMP\n3. Build and install gprMax\n\nYou can `watch screencasts <http://docs.gprmax.com/en/latest/screencasts.html>`_ that demonstrate the installation and update processes.\n\n1. Install Python, required Python packages, and get gprMax source\n------------------------------------------------------------------\n\nWe recommend using Miniconda to install Python and the required Python packages for gprMax in a self-contained Python environment. Miniconda is a mini version of Anaconda which is a completely free Python distribution (including for commercial use and redistribution). It includes more than 300 of the most popular Python packages for science, math, engineering, and data analysis.\n\n* `Download and install Miniconda <http://conda.pydata.org/miniconda.html>`_. Choose the Python 3.x version for your platform. We recommend choosing the installation options to: install Miniconda only for your user account; add Miniconda to your PATH environment variable; and to register Miniconda Python as your default Python. See the `Quick Install page <http://conda.pydata.org/docs/install/quick.html>`_ for help installing Miniconda.\n* Open a Terminal (Linux/macOS) or Command Prompt (Windows) and run the following commands:\n\n.. code-block:: bash\n\n    $ conda update conda\n    $ conda install git\n    $ git clone https://github.com/gprMax/gprMax.git\n    $ cd gprMax\n    $ conda env create -f conda_env.yml\n\nThis will make sure conda is up-to-date, install Git, get the latest gprMax source code from GitHub, and create an environment for gprMax with all the necessary Python packages.\n\nIf you prefer to install Python and the required Python packages manually, i.e. without using Anaconda/Miniconda, look in the ``conda_env.yml`` file for a list of the requirements.\n\n2. Install a C compiler which supports OpenMP\n---------------------------------------------\n\nLinux\n^^^^^\n\n* `gcc <https://gcc.gnu.org>`_ should be already installed, so no action is required.\n\n\nmacOS\n^^^^^\n\n* Xcode (the IDE for macOS) comes with the LLVM (clang) compiler, but it does not currently support OpenMP, so you must install `gcc <https://gcc.gnu.org>`_. That said, it is still useful to have Xcode (with command line tools) installed. It can be downloaded from the App Store. Once Xcode is installed, download and install the `Homebrew package manager <http://brew.sh>`_ and then to install gcc, run:\n\n.. code-block:: bash\n\n    $ brew install gcc\n\nMicrosoft Windows\n^^^^^^^^^^^^^^^^^\n\n* Download and install `Microsoft Visual C++ 2015 Build Tools <http://download.microsoft.com/download/5/F/7/5F7ACAEB-8363-451F-9425-68A90F98B238/visualcppbuildtools_full.exe>`_ (currently you must use the 2015 version, not 2017). Use the custom installation option and deselect everything apart from the Windows SDK for your version of Windows.\n\nAlternatively if you are using Windows 10 and feeling adventurous you can install the `Windows Subsystem for Linux <https://docs.microsoft.com/en-gb/windows/wsl/about>`_ and then follow the Linux install instructions for gprMax. Note however that currently WSL does not aim to support GUI desktops or applications, e.g. Gnome, KDE, etc....\n\n\n\n3. Build and install gprMax\n---------------------------\n\nOnce you have installed the aforementioned tools follow these steps to build and install gprMax:\n\n* Open a Terminal (Linux/macOS) or Command Prompt (Windows), navigate into the top-level gprMax directory, and if it is not already active, activate the gprMax conda environment :code:`conda activate gprMax`. Run the following commands:\n\n.. code-block:: bash\n\n    (gprMax)$ python setup.py build\n    (gprMax)$ python setup.py install\n\n**You are now ready to proceed to running gprMax.**\n\nIf you have problems with building gprMax on Microsoft Windows, you may need to add :code:`C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin` to your path environment variable.\n\nRunning gprMax\n==============\n\ngprMax is designed as a Python package, i.e. a namespace which can contain multiple packages and modules, much like a directory.\n\nOpen a Terminal (Linux/macOS) or Command Prompt (Windows), navigate into the top-level gprMax directory, and if it is not already active, activate the gprMax conda environment :code:`conda activate gprMax`.\n\nBasic usage of gprMax is:\n\n.. code-block:: bash\n\n    (gprMax)$ python -m gprMax path_to/name_of_input_file\n\nFor example to run one of the test models:\n\n.. code-block:: bash\n\n    (gprMax)$ python -m gprMax user_models/cylinder_Ascan_2D.in\n\nWhen the simulation is complete you can plot the A-scan using:\n\n.. code-block:: bash\n\n    (gprMax)$ python -m tools.plot_Ascan user_models/cylinder_Ascan_2D.out\n\nYour results should like those from the A-scan from the metal cylinder example in `introductory/basic 2D models section <http://docs.gprmax.com/en/latest/examples_simple_2D.html#view-the-results>`_\n\nWhen you are finished using gprMax, the conda environment can be deactivated using :code:`conda deactivate`.\n\nOptional command line arguments\n-------------------------------\n\n====================== ========= ===========\nArgument name          Type      Description\n====================== ========= ===========\n``-n``                 integer   number of times to run the input file. This option can be used to run a series of models, e.g. to create a B-scan with 60 traces: ``(gprMax)$ python -m gprMax user_models/cylinder_Bscan_2D.in -n 60``\n``-gpu``               flag/list flag to use NVIDIA GPU or list of NVIDIA GPU device ID(s) for specific GPU card(s).\n``-restart``           integer   model number to start/restart simulation from. It would typically be used to restart a series of models from a specific model number, with the ``-n`` argument, e.g. to restart from A-scan 45 when creating a B-scan with 60 traces: ``(gprMax)$ python -m gprMax user_models/cylinder_Bscan_2D.in -n 15 -restart 45``\n``-task``              integer   task identifier (model number) when running simulation as a job array on `Open Grid Scheduler/Grid Engine <http://gridscheduler.sourceforge.net/index.html>`_. For further details see the `parallel performance section of the User Guide <http://docs.gprmax.com/en/latest/openmp_mpi.html>`_\n``-mpi``               integer   number of Message Passing Interface (MPI) tasks, i.e. master + workers, for MPI task farm. This option is most usefully combined with ``-n`` to allow individual models to be farmed out using a MPI task farm, e.g. to create a B-scan with 60 traces and use MPI to farm out each trace: ``(gprMax)$ python -m gprMax user_models/cylinder_Bscan_2D.in -n 60 -mpi 61``. For further details see the `parallel performance section of the User Guide <http://docs.gprmax.com/en/latest/openmp_mpi.html>`_\n``--mpi-no-spawn``     flag      use MPI task farm without spawn mechanism. For further details see the `parallel performance section of the User Guide <http://docs.gprmax.com/en/latest/openmp_mpi.html>`_\n``-benchmark``         flag      switch on benchmarking mode. This can be used to benchmark the threading (parallel) performance of gprMax on different hardware. For further details see the `benchmarking section of the User Guide <http://docs.gprmax.com/en/latest/benchmarking.html>`_\n``--geometry-only``    flag      build a model and produce any geometry views but do not run the simulation, e.g. to check the geometry of a model is correct: ``(gprMax)$ python -m gprMax user_models/heterogeneous_soil.in --geometry-only``\n``--geometry-fixed``   flag      run a series of models where the geometry does not change between models, e.g. a B-scan where *only* the position of simple sources and receivers, moved using ``#src_steps`` and ``#rx_steps``, changes between models.\n``--opt-taguchi``      flag      run a series of models using an optimisation process based on Taguchi's method. For further details see the `user libraries section of the User Guide <http://docs.gprmax.com/en/latest/user_libs_opt_taguchi.html>`_\n``--write-processed``  flag      write another input file after any Python code and include commands in the original input file have been processed. Useful for checking that any Python code is being correctly processed into gprMax commands.\n``-h`` or ``--help``   flag      used to get help on command line options.\n====================== ========= ===========\n\nUpdating gprMax\n===============\n\n* Open a Terminal (Linux/macOS) or Command Prompt (Windows), navigate into the top-level gprMax directory, and if it is not already active, activate the gprMax conda environment :code:`conda activate gprMax`. Run the following commands:\n\n.. code-block:: bash\n\n    (gprMax)$ git pull\n    (gprMax)$ python setup.py cleanall\n    (gprMax)$ python setup.py build\n    (gprMax)$ python setup.py install\n\nThis will pull the most recent gprMax source code form GitHub, remove/clean previously built modules, and then build and install the latest version of gprMax.\n\n\nUpdating conda and Python packages\n----------------------------------\n\nPeriodically you should update conda and the required Python packages. With the gprMax environment deactivated and from the top-level gprMax directory, run the following commands:\n\n.. code-block:: bash\n\n    $ conda update conda\n    $ conda env update -f conda_env.yml\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.gprmax.com", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "gprMax", "package_url": "https://pypi.org/project/gprMax/", "platform": "", "project_url": "https://pypi.org/project/gprMax/", "project_urls": {"Homepage": "http://www.gprmax.com"}, "release_url": "https://pypi.org/project/gprMax/3.1.4/", "requires_dist": ["colorama", "cython", "h5py", "jupyter", "matplotlib", "numpy", "psutil", "scipy", "terminaltables", "tqdm"], "requires_python": ">3.6", "summary": "Electromagnetic Modelling Software based on the Finite-Difference Time-Domain (FDTD) method", "version": "3.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://docs.gprmax.com/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0db88632db3d8aab30bdc5cf61610adcde1d189c/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6770726d61782f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<div>\n<div><br></div>\n</div>\n<a href=\"http://www.gprmax.com\" rel=\"nofollow\"><img alt=\"docs/source/images/gprMax_logo_small.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b64657caa534dbcfe6cebebb918e3996d61b8ad/646f63732f736f757263652f696d616765732f6770724d61785f6c6f676f5f736d616c6c2e706e67\"></a>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<div id=\"what-is-gprmax\">\n<h3>What is gprMax?</h3>\n<p><a href=\"http://www.gprmax.com\" rel=\"nofollow\">gprMax</a> is open source software that simulates electromagnetic wave propagation. It solves Maxwell\u2019s equations in 3D using the Finite-Difference Time-Domain (FDTD) method. gprMax was designed for modelling Ground Penetrating Radar (GPR) but can also be used to model electromagnetic wave propagation for many other applications.</p>\n<p>gprMax is currently released under the <a href=\"http://www.gnu.org/copyleft/gpl.html\" rel=\"nofollow\">GNU General Public License v3 or higher</a>.</p>\n<p>gprMax is principally written in <a href=\"https://www.python.org\" rel=\"nofollow\">Python</a> 3 with performance-critical parts written in <a href=\"http://cython.org\" rel=\"nofollow\">Cython</a>. It includes a CPU-based solver parallelised using <a href=\"http://www.openmp.org\" rel=\"nofollow\">OpenMP</a>, and a GPU-based solver written using the <a href=\"https://developer.nvidia.com/cuda-zone\" rel=\"nofollow\">NVIDIA CUDA</a> programming model.</p>\n<div id=\"using-gprmax-cite-us\">\n<h4>Using gprMax? Cite us</h4>\n<p>If you use gprMax and publish your work we would be grateful if you could cite our work using:</p>\n<ul>\n<li>Warren, C., Giannopoulos, A., &amp; Giannakis I. (2016). gprMax: Open source software to simulate electromagnetic wave propagation for Ground Penetrating Radar, <cite>Computer Physics Communications</cite> (<a href=\"http://dx.doi.org/10.1016/j.cpc.2016.08.020\" rel=\"nofollow\">http://dx.doi.org/10.1016/j.cpc.2016.08.020</a>)</li>\n</ul>\n<p>For further information on referencing gprMax visit the <a href=\"http://www.gprmax.com/publications.shtml\" rel=\"nofollow\">Publications section of our website</a>.</p>\n</div>\n</div>\n<div id=\"package-overview\">\n<h3>Package overview</h3>\n<pre>gprMax/\n    conda_env.yml\n    CONTRIBUTORS\n    docs/\n    gprMax/\n    gsoc-ideas.md\n    LICENSE\n    README.rst\n    setup.cfg\n    setup.py\n    tests/\n    tools/\n    user_libs/\n    user_models/\n</pre>\n<ul>\n<li><tt>conda_env.yml</tt> is a configuration file for Anaconda (Miniconda) that sets up a Python environment with all the required Python packages for gprMax.</li>\n<li><tt>CONTRIBUTORS</tt> contains a list of names of people who have contributed to the gprMax codebase.</li>\n<li><tt>docs</tt> contains source files for the User Guide. The User Guide is written using <a href=\"http://docutils.sourceforge.net/rst.html\" rel=\"nofollow\">reStructuredText</a> markup, and is built using <a href=\"http://sphinx-doc.org\" rel=\"nofollow\">Sphinx</a> and <a href=\"https://readthedocs.org\" rel=\"nofollow\">Read the Docs</a>.</li>\n<li><tt>gprMax</tt> is the main package. Within this package the main module is <tt>gprMax.py</tt></li>\n<li><tt><span class=\"pre\">gsoc-ideas.md</span></tt> is a list of potential project ideas for <a href=\"https://summerofcode.withgoogle.com\" rel=\"nofollow\">Google Summer of Code</a> program</li>\n<li><tt>LICENSE</tt> contains information on the <a href=\"http://www.gnu.org/copyleft/gpl.html\" rel=\"nofollow\">GNU General Public License v3 or higher</a>.</li>\n<li><tt>README.rst</tt> contains getting started information on installation, usage, and new features/changes.</li>\n<li><tt>setup.cfg</tt> is used to set preference for code formatting/styling using flake8.</li>\n<li><tt>setup.py</tt> is used to compile the Cython extension modules.</li>\n<li><tt>tests</tt> is a sub-package which contains test modules and input files.</li>\n<li><tt>tools</tt> is a sub-package which contains scripts to assist with viewing and post-processing output from models.</li>\n<li><tt>user_libs</tt> is a sub-package where useful modules contributed by users are stored.</li>\n<li><tt>user_models</tt> is a sub-package where useful input files contributed by users are stored.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>The following steps provide guidance on how to install gprMax:</p>\n<ol>\n<li>Install Python, required Python packages, and get the gprMax source code from GitHub</li>\n<li>Install a C compiler which supports OpenMP</li>\n<li>Build and install gprMax</li>\n</ol>\n<p>You can <a href=\"http://docs.gprmax.com/en/latest/screencasts.html\" rel=\"nofollow\">watch screencasts</a> that demonstrate the installation and update processes.</p>\n<div id=\"install-python-required-python-packages-and-get-gprmax-source\">\n<h4>1. Install Python, required Python packages, and get gprMax source</h4>\n<p>We recommend using Miniconda to install Python and the required Python packages for gprMax in a self-contained Python environment. Miniconda is a mini version of Anaconda which is a completely free Python distribution (including for commercial use and redistribution). It includes more than 300 of the most popular Python packages for science, math, engineering, and data analysis.</p>\n<ul>\n<li><a href=\"http://conda.pydata.org/miniconda.html\" rel=\"nofollow\">Download and install Miniconda</a>. Choose the Python 3.x version for your platform. We recommend choosing the installation options to: install Miniconda only for your user account; add Miniconda to your PATH environment variable; and to register Miniconda Python as your default Python. See the <a href=\"http://conda.pydata.org/docs/install/quick.html\" rel=\"nofollow\">Quick Install page</a> for help installing Miniconda.</li>\n<li>Open a Terminal (Linux/macOS) or Command Prompt (Windows) and run the following commands:</li>\n</ul>\n<pre>$ conda update conda\n$ conda install git\n$ git clone https://github.com/gprMax/gprMax.git\n$ <span class=\"nb\">cd</span> gprMax\n$ conda env create -f conda_env.yml\n</pre>\n<p>This will make sure conda is up-to-date, install Git, get the latest gprMax source code from GitHub, and create an environment for gprMax with all the necessary Python packages.</p>\n<p>If you prefer to install Python and the required Python packages manually, i.e. without using Anaconda/Miniconda, look in the <tt>conda_env.yml</tt> file for a list of the requirements.</p>\n</div>\n<div id=\"install-a-c-compiler-which-supports-openmp\">\n<h4>2. Install a C compiler which supports OpenMP</h4>\n<div id=\"linux\">\n<h5>Linux</h5>\n<ul>\n<li><a href=\"https://gcc.gnu.org\" rel=\"nofollow\">gcc</a> should be already installed, so no action is required.</li>\n</ul>\n</div>\n<div id=\"macos\">\n<h5>macOS</h5>\n<ul>\n<li>Xcode (the IDE for macOS) comes with the LLVM (clang) compiler, but it does not currently support OpenMP, so you must install <a href=\"https://gcc.gnu.org\" rel=\"nofollow\">gcc</a>. That said, it is still useful to have Xcode (with command line tools) installed. It can be downloaded from the App Store. Once Xcode is installed, download and install the <a href=\"http://brew.sh\" rel=\"nofollow\">Homebrew package manager</a> and then to install gcc, run:</li>\n</ul>\n<pre>$ brew install gcc\n</pre>\n</div>\n<div id=\"microsoft-windows\">\n<h5>Microsoft Windows</h5>\n<ul>\n<li>Download and install <a href=\"http://download.microsoft.com/download/5/F/7/5F7ACAEB-8363-451F-9425-68A90F98B238/visualcppbuildtools_full.exe\" rel=\"nofollow\">Microsoft Visual C++ 2015 Build Tools</a> (currently you must use the 2015 version, not 2017). Use the custom installation option and deselect everything apart from the Windows SDK for your version of Windows.</li>\n</ul>\n<p>Alternatively if you are using Windows 10 and feeling adventurous you can install the <a href=\"https://docs.microsoft.com/en-gb/windows/wsl/about\" rel=\"nofollow\">Windows Subsystem for Linux</a> and then follow the Linux install instructions for gprMax. Note however that currently WSL does not aim to support GUI desktops or applications, e.g. Gnome, KDE, etc\u2026.</p>\n</div>\n</div>\n<div id=\"build-and-install-gprmax\">\n<h4>3. Build and install gprMax</h4>\n<p>Once you have installed the aforementioned tools follow these steps to build and install gprMax:</p>\n<ul>\n<li>Open a Terminal (Linux/macOS) or Command Prompt (Windows), navigate into the top-level gprMax directory, and if it is not already active, activate the gprMax conda environment <code>conda activate gprMax</code>. Run the following commands:</li>\n</ul>\n<pre><span class=\"o\">(</span>gprMax<span class=\"o\">)</span>$ python setup.py build\n<span class=\"o\">(</span>gprMax<span class=\"o\">)</span>$ python setup.py install\n</pre>\n<p><strong>You are now ready to proceed to running gprMax.</strong></p>\n<p>If you have problems with building gprMax on Microsoft Windows, you may need to add <code>C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin</code> to your path environment variable.</p>\n</div>\n</div>\n<div id=\"running-gprmax\">\n<h3>Running gprMax</h3>\n<p>gprMax is designed as a Python package, i.e. a namespace which can contain multiple packages and modules, much like a directory.</p>\n<p>Open a Terminal (Linux/macOS) or Command Prompt (Windows), navigate into the top-level gprMax directory, and if it is not already active, activate the gprMax conda environment <code>conda activate gprMax</code>.</p>\n<p>Basic usage of gprMax is:</p>\n<pre><span class=\"o\">(</span>gprMax<span class=\"o\">)</span>$ python -m gprMax path_to/name_of_input_file\n</pre>\n<p>For example to run one of the test models:</p>\n<pre><span class=\"o\">(</span>gprMax<span class=\"o\">)</span>$ python -m gprMax user_models/cylinder_Ascan_2D.in\n</pre>\n<p>When the simulation is complete you can plot the A-scan using:</p>\n<pre><span class=\"o\">(</span>gprMax<span class=\"o\">)</span>$ python -m tools.plot_Ascan user_models/cylinder_Ascan_2D.out\n</pre>\n<p>Your results should like those from the A-scan from the metal cylinder example in <a href=\"http://docs.gprmax.com/en/latest/examples_simple_2D.html#view-the-results\" rel=\"nofollow\">introductory/basic 2D models section</a></p>\n<p>When you are finished using gprMax, the conda environment can be deactivated using <code>conda deactivate</code>.</p>\n<div id=\"optional-command-line-arguments\">\n<h4>Optional command line arguments</h4>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Argument name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt><span class=\"pre\">-n</span></tt></td>\n<td>integer</td>\n<td>number of times to run the input file. This option can be used to run a series of models, e.g. to create a B-scan with 60 traces: <tt>(gprMax)$ python <span class=\"pre\">-m</span> gprMax user_models/cylinder_Bscan_2D.in <span class=\"pre\">-n</span> 60</tt></td>\n</tr>\n<tr><td><tt><span class=\"pre\">-gpu</span></tt></td>\n<td>flag/list</td>\n<td>flag to use NVIDIA GPU or list of NVIDIA GPU device ID(s) for specific GPU card(s).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-restart</span></tt></td>\n<td>integer</td>\n<td>model number to start/restart simulation from. It would typically be used to restart a series of models from a specific model number, with the <tt><span class=\"pre\">-n</span></tt> argument, e.g. to restart from A-scan 45 when creating a B-scan with 60 traces: <tt>(gprMax)$ python <span class=\"pre\">-m</span> gprMax user_models/cylinder_Bscan_2D.in <span class=\"pre\">-n</span> 15 <span class=\"pre\">-restart</span> 45</tt></td>\n</tr>\n<tr><td><tt><span class=\"pre\">-task</span></tt></td>\n<td>integer</td>\n<td>task identifier (model number) when running simulation as a job array on <a href=\"http://gridscheduler.sourceforge.net/index.html\" rel=\"nofollow\">Open Grid Scheduler/Grid Engine</a>. For further details see the <a href=\"http://docs.gprmax.com/en/latest/openmp_mpi.html\" rel=\"nofollow\">parallel performance section of the User Guide</a></td>\n</tr>\n<tr><td><tt><span class=\"pre\">-mpi</span></tt></td>\n<td>integer</td>\n<td>number of Message Passing Interface (MPI) tasks, i.e. master + workers, for MPI task farm. This option is most usefully combined with <tt><span class=\"pre\">-n</span></tt> to allow individual models to be farmed out using a MPI task farm, e.g. to create a B-scan with 60 traces and use MPI to farm out each trace: <tt>(gprMax)$ python <span class=\"pre\">-m</span> gprMax user_models/cylinder_Bscan_2D.in <span class=\"pre\">-n</span> 60 <span class=\"pre\">-mpi</span> 61</tt>. For further details see the <a href=\"http://docs.gprmax.com/en/latest/openmp_mpi.html\" rel=\"nofollow\">parallel performance section of the User Guide</a></td>\n</tr>\n<tr><td><tt><span class=\"pre\">--mpi-no-spawn</span></tt></td>\n<td>flag</td>\n<td>use MPI task farm without spawn mechanism. For further details see the <a href=\"http://docs.gprmax.com/en/latest/openmp_mpi.html\" rel=\"nofollow\">parallel performance section of the User Guide</a></td>\n</tr>\n<tr><td><tt><span class=\"pre\">-benchmark</span></tt></td>\n<td>flag</td>\n<td>switch on benchmarking mode. This can be used to benchmark the threading (parallel) performance of gprMax on different hardware. For further details see the <a href=\"http://docs.gprmax.com/en/latest/benchmarking.html\" rel=\"nofollow\">benchmarking section of the User Guide</a></td>\n</tr>\n<tr><td><tt><span class=\"pre\">--geometry-only</span></tt></td>\n<td>flag</td>\n<td>build a model and produce any geometry views but do not run the simulation, e.g. to check the geometry of a model is correct: <tt>(gprMax)$ python <span class=\"pre\">-m</span> gprMax user_models/heterogeneous_soil.in <span class=\"pre\">--geometry-only</span></tt></td>\n</tr>\n<tr><td><tt><span class=\"pre\">--geometry-fixed</span></tt></td>\n<td>flag</td>\n<td>run a series of models where the geometry does not change between models, e.g. a B-scan where <em>only</em> the position of simple sources and receivers, moved using <tt>#src_steps</tt> and <tt>#rx_steps</tt>, changes between models.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--opt-taguchi</span></tt></td>\n<td>flag</td>\n<td>run a series of models using an optimisation process based on Taguchi\u2019s method. For further details see the <a href=\"http://docs.gprmax.com/en/latest/user_libs_opt_taguchi.html\" rel=\"nofollow\">user libraries section of the User Guide</a></td>\n</tr>\n<tr><td><tt><span class=\"pre\">--write-processed</span></tt></td>\n<td>flag</td>\n<td>write another input file after any Python code and include commands in the original input file have been processed. Useful for checking that any Python code is being correctly processed into gprMax commands.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-h</span></tt> or <tt><span class=\"pre\">--help</span></tt></td>\n<td>flag</td>\n<td>used to get help on command line options.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"updating-gprmax\">\n<h3>Updating gprMax</h3>\n<ul>\n<li>Open a Terminal (Linux/macOS) or Command Prompt (Windows), navigate into the top-level gprMax directory, and if it is not already active, activate the gprMax conda environment <code>conda activate gprMax</code>. Run the following commands:</li>\n</ul>\n<pre><span class=\"o\">(</span>gprMax<span class=\"o\">)</span>$ git pull\n<span class=\"o\">(</span>gprMax<span class=\"o\">)</span>$ python setup.py cleanall\n<span class=\"o\">(</span>gprMax<span class=\"o\">)</span>$ python setup.py build\n<span class=\"o\">(</span>gprMax<span class=\"o\">)</span>$ python setup.py install\n</pre>\n<p>This will pull the most recent gprMax source code form GitHub, remove/clean previously built modules, and then build and install the latest version of gprMax.</p>\n<div id=\"updating-conda-and-python-packages\">\n<h4>Updating conda and Python packages</h4>\n<p>Periodically you should update conda and the required Python packages. With the gprMax environment deactivated and from the top-level gprMax directory, run the following commands:</p>\n<pre>$ conda update conda\n$ conda env update -f conda_env.yml\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5119981, "releases": {"3.1.4": [{"comment_text": "", "digests": {"md5": "c6aaf84d749ff2761353f98825927a16", "sha256": "04f1358941c0c9fef2b88eb2dd485ff7aeb2cf33e4c2b343111a91296cb5d8d2"}, "downloads": -1, "filename": "gprMax-3.1.4-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c6aaf84d749ff2761353f98825927a16", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">3.6", "size": 33711108, "upload_time": "2019-04-09T17:34:22", "upload_time_iso_8601": "2019-04-09T17:34:22.427985Z", "url": "https://files.pythonhosted.org/packages/73/39/74ded4d4929c92d728938a1522b744b61b8ad1d11c3e6bb7d7a1e271210c/gprMax-3.1.4-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52f58389d7c5c5872e1866c1e0e85c3b", "sha256": "2b4318148ac40d920f0fd0ed29acc255211b03a51a5278a80e77854a36fed9dc"}, "downloads": -1, "filename": "gprMax-3.1.4.tar.gz", "has_sig": false, "md5_digest": "52f58389d7c5c5872e1866c1e0e85c3b", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 30797760, "upload_time": "2019-04-09T17:34:33", "upload_time_iso_8601": "2019-04-09T17:34:33.575053Z", "url": "https://files.pythonhosted.org/packages/a0/f5/2980cdb28ece5b66996490444f1c0379348a9f272a9f10929b53f02c5c06/gprMax-3.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c6aaf84d749ff2761353f98825927a16", "sha256": "04f1358941c0c9fef2b88eb2dd485ff7aeb2cf33e4c2b343111a91296cb5d8d2"}, "downloads": -1, "filename": "gprMax-3.1.4-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c6aaf84d749ff2761353f98825927a16", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">3.6", "size": 33711108, "upload_time": "2019-04-09T17:34:22", "upload_time_iso_8601": "2019-04-09T17:34:22.427985Z", "url": "https://files.pythonhosted.org/packages/73/39/74ded4d4929c92d728938a1522b744b61b8ad1d11c3e6bb7d7a1e271210c/gprMax-3.1.4-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52f58389d7c5c5872e1866c1e0e85c3b", "sha256": "2b4318148ac40d920f0fd0ed29acc255211b03a51a5278a80e77854a36fed9dc"}, "downloads": -1, "filename": "gprMax-3.1.4.tar.gz", "has_sig": false, "md5_digest": "52f58389d7c5c5872e1866c1e0e85c3b", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 30797760, "upload_time": "2019-04-09T17:34:33", "upload_time_iso_8601": "2019-04-09T17:34:33.575053Z", "url": "https://files.pythonhosted.org/packages/a0/f5/2980cdb28ece5b66996490444f1c0379348a9f272a9f10929b53f02c5c06/gprMax-3.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:13 2020"}