{"info": {"author": "pauliusbaulius", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8", "Topic :: Internet"], "description": "## Table of contents <a name=\"toc\">\n\n1. [Table of contents](#toc)\n2. [Project](#project)\n3. [Installation](#installation)\n4. [Usage](#usage)\n   1. [Developers](#developers)\n5. [Roadmap](#roadmap)\n6. [Changelog](#changelog)\n7. [Authors and acknowledment](#aaa)\n8. [License](#license)\n\n\n\n# lil ripper <a name=\"project\">\n\nLil ripper is a media archival tool for subreddits/chan threads. It downloads images and video files from given subreddit(s) by extracting all urls from posts. It uses [pushshift](https://pushshift.io/) to generate json links containing Reddit post data, which includes urls. **Generating links will take a while, to not spam pushshift with API calls.** Be patient, program is not frozen. If you are trying to archive a big subreddit, there might be a few thousand of urls that have to be parsed. Chan threads are downloaded without having to generate anything.\n\n**This project requires `ffmpeg` to download v.reddit videos**, since they are made out of two parts. One file is video without sound, another is just sound. `ffmpeg` is used to join both files together and create one `.webm`. \n\nSince this project does not eploy proxies, you may encounter trouble with subreddits that contain a lot of gfycat links. Gfycat does not like people scrapping their website and will blacklist your IP for several hours, if you make a lot of requests. This is a problem I am trying to solve in next updates.\n\n\n\n**! WORKS ON LINUX ONLY !** Since I haven't tested it on other systems, I made it Linux only. This might change in the future, when I will get access to a Windows machine and/or a Mac.\n\n![https://i.imgur.com/BsNMI3a.png](https://i.imgur.com/BsNMI3a.png)\n\n### Currently supported links\n\n- [x] direct uri to the media file\n- [x] i.reddit\n- [x] v.reddit\n- [x] imgur direct link\n- [x] imgur album\n- [x] imgur album with one item aka no /a/ in link\n- [x] gfycat video\n- [x] 4chan thread\n\n\n\n## Installation <a name=\"installation\">\n\nLil ripper can be installed via pip, since it has been uploaded to [pypi](https://pypi.org/). Type `pip3 install lilripper` in your shell to install it. You can then call `python3 -m lilripper <arguments>`. Take a look at [usage](#usage) for examples.\n\nIf you do not want to install a pip package, you can clone the project and then execute `python3 lilripper <arguments>` in the root directory.\n\n\n\n## Usage <a name=\"usage\">\n\nFollowing arguments can be passed:\n\n```\n-r, --reddit <subreddit(s)>\n\tSubreddit(s) you want to archive\n\n\t-r cars, --reddit cars, -r homelab linux\n\n-c, --fourchan <thread(s)>\n\tDownloads thread(s) you want to archive.\n\n-u, --min-upvotes <integer> \n\tMinimum upvotes to consider a post for ripping/indexing.\n\tDefault minimum is 5 upvotes.\n\n\t-u 10, --min-upvotes 9999\n\n-d, --download-path <path>\n\tLocation for downloads, empty will use current location.\n\n\t-d /home/mamamia/Downloads/reddit\n\n-f, --formats\n\tFormats of media files you want to download, leaving this blank\n\twill use default list of: [\"jpg\", \"jpeg\", \"png\", \"gif\", \"mp4\", \"webm\"]\n\tNotice: gifv links are converted to mp4, since mp4 is supported on more systems.\n\tIf you wan't gifvs, you can pass mp4 to -f.\n\n\t-f jpg png, -f webm, --formats gif mp4 webm\n\n-l, --log\n\tLevel of logging, default will only log WARNING messages and up.\n\tTakes DEBUG or INFO as arguments. Logs are saved in logs/ direcotry in the root \n\tdirectory of the project.\n\n\t-l DEBUG, if you want to see a lot of information how the program works.\n```\n\n\n\nSome examples:\n\n```python\n# Download all possible media from r/dankmemes from posts with >=10.000 upvotes to Downloads directory. It will create a folder \"dankmemes\".\npython3 -m lilripper -r dankmemes -u 10000 -d /home/boolean/Downloads\n\n# Download all possible media from r/dankmemes and r/memes with >=1.00 upvotes to Download directory. Will create directories for each subreddit.\npython3 -m lilripper -r dankmemes memes -u 1000 -d /home/boolean/Downloads\n\n# Download all media from a thread in /g/.\npython3 -m lilripper -c https://boards.4channel.org/g/thread/51971506/the-g-wiki -d /home/boolean/Downloads\n\n# Download all webms from a subreddit.\npython3 -m lilripper -r idiotsincars -f webm -d /home/boolean/Downloads\n```\n\n\n\n### Developers <a name=\"developers\">\n\n#TODO information how to build the package, run tests and create venv.\n\n\n\n## Roadmap <a name=\"roadmap\">\n\n- [x] fix -f flag, since it does not work at all anymore.\n- [x] 4chan thread media archiving, under -c flag.\n- [x] add pytest tests WIP\n- [ ] a better way to quit program, since ctrl+c does not cancel all threads at once.\n- [ ] show status how long it took to generate links and download each file. maybe a progress bar?\n  - [x] download time\n  - [ ] generation time\n- [ ] maybe add image/video compression option to reduce size of media on disk in exchange for cpu usage and electricity?\n- [ ] skip v.reddit videos if user has no ffmpeg, check for it first.\n\n\n\n## Changelog <a name=\"changelog\">\n\n[0.0.8]\n\n- -l is added. Lil ripper will make logs as of this version.\n\n\n\n[0.0.7] \n\n- You can now download 4chan threads with -c flag.\n- -f flag is working as intended.\n\n## Authors and acknowledgment <a name=\"aaa\">\n\nNothing yet, reserved for contributors.\n\n\n\n## License <a name=\"license\">\n\nThis project is licensed under [MIT](https://choosealicense.com/licenses/mit/) License.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pauliusbaulius/lil_ripper", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lilripper", "package_url": "https://pypi.org/project/lilripper/", "platform": "", "project_url": "https://pypi.org/project/lilripper/", "project_urls": {"Homepage": "https://github.com/pauliusbaulius/lil_ripper"}, "release_url": "https://pypi.org/project/lilripper/0.0.9/", "requires_dist": ["beautifulsoup4 (>=4.9.0)", "fake-useragent (>=0.1.11)", "requests (>=2.23.0)"], "requires_python": ">=3.8", "summary": "Reddit subreddit/4chan archival tool, can download pictures, videos, gifs from i.reddit, v.reddit, imgur, gfycat. Requires ffmpeg to download v.reddit videos.", "version": "0.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Table of contents <a></a></h2><a>\n</a><ol><a>\n</a><li><a></a><a href=\"#toc\" rel=\"nofollow\">Table of contents</a></li>\n<li><a href=\"#project\" rel=\"nofollow\">Project</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ol>\n<li><a href=\"#developers\" rel=\"nofollow\">Developers</a></li>\n</ol>\n</li>\n<li><a href=\"#roadmap\" rel=\"nofollow\">Roadmap</a></li>\n<li><a href=\"#changelog\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#aaa\" rel=\"nofollow\">Authors and acknowledment</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ol>\n<h1>lil ripper <a></a></h1><a>\n</a><p><a>Lil ripper is a media archival tool for subreddits/chan threads. It downloads images and video files from given subreddit(s) by extracting all urls from posts. It uses </a><a href=\"https://pushshift.io/\" rel=\"nofollow\">pushshift</a> to generate json links containing Reddit post data, which includes urls. <strong>Generating links will take a while, to not spam pushshift with API calls.</strong> Be patient, program is not frozen. If you are trying to archive a big subreddit, there might be a few thousand of urls that have to be parsed. Chan threads are downloaded without having to generate anything.</p>\n<p><strong>This project requires <code>ffmpeg</code> to download v.reddit videos</strong>, since they are made out of two parts. One file is video without sound, another is just sound. <code>ffmpeg</code> is used to join both files together and create one <code>.webm</code>.</p>\n<p>Since this project does not eploy proxies, you may encounter trouble with subreddits that contain a lot of gfycat links. Gfycat does not like people scrapping their website and will blacklist your IP for several hours, if you make a lot of requests. This is a problem I am trying to solve in next updates.</p>\n<p><strong>! WORKS ON LINUX ONLY !</strong> Since I haven't tested it on other systems, I made it Linux only. This might change in the future, when I will get access to a Windows machine and/or a Mac.</p>\n<p><img alt=\"https://i.imgur.com/BsNMI3a.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04d821e44500a052ed758b2af099f50a343fdde1/68747470733a2f2f692e696d6775722e636f6d2f42734e4d4933612e706e67\"></p>\n<h3>Currently supported links</h3>\n<ul>\n<li>[x] direct uri to the media file</li>\n<li>[x] i.reddit</li>\n<li>[x] v.reddit</li>\n<li>[x] imgur direct link</li>\n<li>[x] imgur album</li>\n<li>[x] imgur album with one item aka no /a/ in link</li>\n<li>[x] gfycat video</li>\n<li>[x] 4chan thread</li>\n</ul>\n<h2>Installation <a></a></h2><a>\n</a><p><a>Lil ripper can be installed via pip, since it has been uploaded to </a><a href=\"https://pypi.org/\" rel=\"nofollow\">pypi</a>. Type <code>pip3 install lilripper</code> in your shell to install it. You can then call <code>python3 -m lilripper &lt;arguments&gt;</code>. Take a look at <a href=\"#usage\" rel=\"nofollow\">usage</a> for examples.</p>\n<p>If you do not want to install a pip package, you can clone the project and then execute <code>python3 lilripper &lt;arguments&gt;</code> in the root directory.</p>\n<h2>Usage <a></a></h2><a>\n<p>Following arguments can be passed:</p>\n<pre><code>-r, --reddit &lt;subreddit(s)&gt;\n\tSubreddit(s) you want to archive\n\n\t-r cars, --reddit cars, -r homelab linux\n\n-c, --fourchan &lt;thread(s)&gt;\n\tDownloads thread(s) you want to archive.\n\n-u, --min-upvotes &lt;integer&gt; \n\tMinimum upvotes to consider a post for ripping/indexing.\n\tDefault minimum is 5 upvotes.\n\n\t-u 10, --min-upvotes 9999\n\n-d, --download-path &lt;path&gt;\n\tLocation for downloads, empty will use current location.\n\n\t-d /home/mamamia/Downloads/reddit\n\n-f, --formats\n\tFormats of media files you want to download, leaving this blank\n\twill use default list of: [\"jpg\", \"jpeg\", \"png\", \"gif\", \"mp4\", \"webm\"]\n\tNotice: gifv links are converted to mp4, since mp4 is supported on more systems.\n\tIf you wan't gifvs, you can pass mp4 to -f.\n\n\t-f jpg png, -f webm, --formats gif mp4 webm\n\n-l, --log\n\tLevel of logging, default will only log WARNING messages and up.\n\tTakes DEBUG or INFO as arguments. Logs are saved in logs/ direcotry in the root \n\tdirectory of the project.\n\n\t-l DEBUG, if you want to see a lot of information how the program works.\n</code></pre>\n<p>Some examples:</p>\n<pre><span class=\"c1\"># Download all possible media from r/dankmemes from posts with &gt;=10.000 upvotes to Downloads directory. It will create a folder \"dankmemes\".</span>\n<span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">lilripper</span> <span class=\"o\">-</span><span class=\"n\">r</span> <span class=\"n\">dankmemes</span> <span class=\"o\">-</span><span class=\"n\">u</span> <span class=\"mi\">10000</span> <span class=\"o\">-</span><span class=\"n\">d</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">boolean</span><span class=\"o\">/</span><span class=\"n\">Downloads</span>\n\n<span class=\"c1\"># Download all possible media from r/dankmemes and r/memes with &gt;=1.00 upvotes to Download directory. Will create directories for each subreddit.</span>\n<span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">lilripper</span> <span class=\"o\">-</span><span class=\"n\">r</span> <span class=\"n\">dankmemes</span> <span class=\"n\">memes</span> <span class=\"o\">-</span><span class=\"n\">u</span> <span class=\"mi\">1000</span> <span class=\"o\">-</span><span class=\"n\">d</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">boolean</span><span class=\"o\">/</span><span class=\"n\">Downloads</span>\n\n<span class=\"c1\"># Download all media from a thread in /g/.</span>\n<span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">lilripper</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">boards</span><span class=\"o\">.</span><span class=\"mi\">4</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">g</span><span class=\"o\">/</span><span class=\"n\">thread</span><span class=\"o\">/</span><span class=\"mi\">51971506</span><span class=\"o\">/</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"o\">-</span><span class=\"n\">wiki</span> <span class=\"o\">-</span><span class=\"n\">d</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">boolean</span><span class=\"o\">/</span><span class=\"n\">Downloads</span>\n\n<span class=\"c1\"># Download all webms from a subreddit.</span>\n<span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">lilripper</span> <span class=\"o\">-</span><span class=\"n\">r</span> <span class=\"n\">idiotsincars</span> <span class=\"o\">-</span><span class=\"n\">f</span> <span class=\"n\">webm</span> <span class=\"o\">-</span><span class=\"n\">d</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">boolean</span><span class=\"o\">/</span><span class=\"n\">Downloads</span>\n</pre>\n</a><h3><a>Developers </a><a></a></h3><a>\n<p>#TODO information how to build the package, run tests and create venv.</p>\n</a><h2><a>Roadmap </a><a></a></h2><a>\n<ul>\n<li>[x] fix -f flag, since it does not work at all anymore.</li>\n<li>[x] 4chan thread media archiving, under -c flag.</li>\n<li>[x] add pytest tests WIP</li>\n<li>[ ] a better way to quit program, since ctrl+c does not cancel all threads at once.</li>\n<li>[ ] show status how long it took to generate links and download each file. maybe a progress bar?\n<ul>\n<li>[x] download time</li>\n<li>[ ] generation time</li>\n</ul>\n</li>\n<li>[ ] maybe add image/video compression option to reduce size of media on disk in exchange for cpu usage and electricity?</li>\n<li>[ ] skip v.reddit videos if user has no ffmpeg, check for it first.</li>\n</ul>\n</a><h2><a>Changelog </a><a></a></h2><a>\n<p>[0.0.8]</p>\n<ul>\n<li>-l is added. Lil ripper will make logs as of this version.</li>\n</ul>\n<p>[0.0.7]</p>\n<ul>\n<li>You can now download 4chan threads with -c flag.</li>\n<li>-f flag is working as intended.</li>\n</ul>\n</a><h2><a>Authors and acknowledgment </a><a></a></h2><a>\n<p>Nothing yet, reserved for contributors.</p>\n</a><h2><a>License </a><a></a></h2><a>\n</a><p><a>This project is licensed under </a><a href=\"https://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a> License.</p>\n\n          </div>"}, "last_serial": 7173041, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "bef5f0b87ea4c5e58bb7078a7bb5083a", "sha256": "2a561bf39997362fc5bf689591fbc250f3b405e4427a5b07575dd943163c8115"}, "downloads": -1, "filename": "lilripper-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "bef5f0b87ea4c5e58bb7078a7bb5083a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 10488, "upload_time": "2020-05-02T16:11:41", "upload_time_iso_8601": "2020-05-02T16:11:41.947805Z", "url": "https://files.pythonhosted.org/packages/e1/6f/6dc85ae4f3214b2b24cfcb41dd81e5cc5b240187c41eb760e6e06ddffdf5/lilripper-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dfb3a89a2b1934cd6d810c94a546ea7", "sha256": "41b349ade1106239925e54d50d18f3a3f8ea16c7d4134e282bc24f5e98980c35"}, "downloads": -1, "filename": "lilripper-0.0.6.tar.gz", "has_sig": false, "md5_digest": "9dfb3a89a2b1934cd6d810c94a546ea7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 13762, "upload_time": "2020-05-02T16:11:44", "upload_time_iso_8601": "2020-05-02T16:11:44.335357Z", "url": "https://files.pythonhosted.org/packages/3a/26/720148325f4aa06bd1cfa62cdb856895a46b649c81cad4dbcc45faa6c588/lilripper-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "7152efd0d01a241c5c523b66b2ce6209", "sha256": "14345c5fcb82f372152fe8a3e4b2de19c402bddd9251686057008f3634155902"}, "downloads": -1, "filename": "lilripper-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "7152efd0d01a241c5c523b66b2ce6209", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 9243, "upload_time": "2020-05-04T16:15:20", "upload_time_iso_8601": "2020-05-04T16:15:20.990331Z", "url": "https://files.pythonhosted.org/packages/a1/d1/a62a685cc28372b7d354598a285327adb74598b9fa97a49c5107966bf9ee/lilripper-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69c70a2fb2deb63dfc8c777524702010", "sha256": "ccdcab1beaaf561a29787121fb73002e9aee05bc6caa27d2238dd52d12b764c8"}, "downloads": -1, "filename": "lilripper-0.0.7.tar.gz", "has_sig": false, "md5_digest": "69c70a2fb2deb63dfc8c777524702010", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 13750, "upload_time": "2020-05-04T16:15:22", "upload_time_iso_8601": "2020-05-04T16:15:22.479299Z", "url": "https://files.pythonhosted.org/packages/6c/e4/1a1038feaca03c7358b5ead28acde4542c38da146bdb58f47a0a6bef31aa/lilripper-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "96a0dc5b753785a107f4d5f0d9d673da", "sha256": "1b486e51d2883ead7aa0d83db8e3653830487c9e63f02bbea070afb5fb1820a4"}, "downloads": -1, "filename": "lilripper-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "96a0dc5b753785a107f4d5f0d9d673da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 14672, "upload_time": "2020-05-05T15:48:16", "upload_time_iso_8601": "2020-05-05T15:48:16.897694Z", "url": "https://files.pythonhosted.org/packages/19/e0/9e27da3dd6e9dd24bf9e170733d77ed6f1c82703b7c30de02021b925d82a/lilripper-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d1db1f4333537f1425bacd4c9255b44", "sha256": "3587c37b1f6101e97a6d2c7d796251112e7199168c8fb0f4ebca476ba7d62b93"}, "downloads": -1, "filename": "lilripper-0.0.8.tar.gz", "has_sig": false, "md5_digest": "4d1db1f4333537f1425bacd4c9255b44", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 21043, "upload_time": "2020-05-05T15:48:18", "upload_time_iso_8601": "2020-05-05T15:48:18.422213Z", "url": "https://files.pythonhosted.org/packages/e6/7e/fb3a271310ab3d0eae9b7af064c08433ce17fe4a791f88252128cd67833c/lilripper-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "42e7f5598c97f8d18c4ec58616662dec", "sha256": "9585a086f379e1575ddd74235bc22c29cb536606a860a3a06533fd3b1cf81632"}, "downloads": -1, "filename": "lilripper-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "42e7f5598c97f8d18c4ec58616662dec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 14686, "upload_time": "2020-05-05T16:08:08", "upload_time_iso_8601": "2020-05-05T16:08:08.566423Z", "url": "https://files.pythonhosted.org/packages/22/e7/95adf3e6a77b2796bf342dfb9cf5fdf0590628c263fd5b002409c366080d/lilripper-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90237e8ca58a2a1066099c0cf53f55df", "sha256": "9c961a300b8450d7c66b61c67c9813e384dc30808304ff4e031c6df6abb8be70"}, "downloads": -1, "filename": "lilripper-0.0.9.tar.gz", "has_sig": false, "md5_digest": "90237e8ca58a2a1066099c0cf53f55df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 21218, "upload_time": "2020-05-05T16:08:09", "upload_time_iso_8601": "2020-05-05T16:08:09.925571Z", "url": "https://files.pythonhosted.org/packages/44/e0/3a4a7244403cb0e70837a832baa345abc30bad4f9fb4fee77c11a303c722/lilripper-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42e7f5598c97f8d18c4ec58616662dec", "sha256": "9585a086f379e1575ddd74235bc22c29cb536606a860a3a06533fd3b1cf81632"}, "downloads": -1, "filename": "lilripper-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "42e7f5598c97f8d18c4ec58616662dec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 14686, "upload_time": "2020-05-05T16:08:08", "upload_time_iso_8601": "2020-05-05T16:08:08.566423Z", "url": "https://files.pythonhosted.org/packages/22/e7/95adf3e6a77b2796bf342dfb9cf5fdf0590628c263fd5b002409c366080d/lilripper-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90237e8ca58a2a1066099c0cf53f55df", "sha256": "9c961a300b8450d7c66b61c67c9813e384dc30808304ff4e031c6df6abb8be70"}, "downloads": -1, "filename": "lilripper-0.0.9.tar.gz", "has_sig": false, "md5_digest": "90237e8ca58a2a1066099c0cf53f55df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 21218, "upload_time": "2020-05-05T16:08:09", "upload_time_iso_8601": "2020-05-05T16:08:09.925571Z", "url": "https://files.pythonhosted.org/packages/44/e0/3a4a7244403cb0e70837a832baa345abc30bad4f9fb4fee77c11a303c722/lilripper-0.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:54 2020"}