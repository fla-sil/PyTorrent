{"info": {"author": "Christian L\u00f6lkes", "author_email": "christian.loelkes@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "# obelixtools\n\n1. Install it with ```pip install obelixtools```\n\n## API\n\nThis is a small wrapper I wrote around the requests library. It has some extra features like a speedtest and connectivity check.\n\n### Basic use\n\n```\nfrom obelixtools import API\nendpoint = API(url, 'json')\nendpoint.query()\nprint(endpoint.content)\n```\n\n### Speedtest and connectivity check\n\n```\n% python -m obelixtools\n06-Oct-19 11:28:44 - obelixtools - INFO: Performing selftest with https://1.1.1.1\n06-Oct-19 11:28:44 - obelixtools - INFO: Connected to the internet.\n06-Oct-19 11:28:44 - obelixtools - INFO: Performing speedtest with http://speedtest.belwue.net/100M\n06-Oct-19 11:29:11 - obelixtools - INFO: Connection speed is 3MB/s\u00b5\n```\n\n### Variables\n\n#### .url : str\n\nThe URL of the API.\n\n#### .format : str\n\nDefine a certain data format for the data return by the API. This can by either _json_, _xml_ or raw. Any other value will sit it to raw.\n\n#### .content\n\nThe content of the API response after postprocessing. Postprocessing happens by setting _.format_\n\n### Methods\n\n#### .query(url : str, optional) -> bool\n\nFetched the data from the API if the age of the existing data in .content is older than *.last_update*. This timeout is ignored if _url_ is set (useful for speedtests).\n\n#### .check_connection(url='https://1.1.1.1', timeout=5) -> bool\n\nFetches the given url and and returns True if the servers returns a status code 200 and False otherwise. Comprehensive log messages are passed to the loggin module.\n\n#### .speedtest(url='http://speedtest.belwue.net/100M') -> bool\n\nDownloads the file provided at the given url and returns the speed in bytes per second. The logging module received a log message with humand readable speed (e.g. kB/s, MB/s...)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/loelkes/pypi-obelixtools", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "obelixtools", "package_url": "https://pypi.org/project/obelixtools/", "platform": "", "project_url": "https://pypi.org/project/obelixtools/", "project_urls": {"Homepage": "https://github.com/loelkes/pypi-obelixtools"}, "release_url": "https://pypi.org/project/obelixtools/1.1.1/", "requires_dist": ["requests", "requests[security]", "sseclient"], "requires_python": ">=2.7", "summary": "Useful tools I need in many projects.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>obelixtools</h1>\n<ol>\n<li>Install it with <code>pip install obelixtools</code></li>\n</ol>\n<h2>API</h2>\n<p>This is a small wrapper I wrote around the requests library. It has some extra features like a speedtest and connectivity check.</p>\n<h3>Basic use</h3>\n<pre><code>from obelixtools import API\nendpoint = API(url, 'json')\nendpoint.query()\nprint(endpoint.content)\n</code></pre>\n<h3>Speedtest and connectivity check</h3>\n<pre><code>% python -m obelixtools\n06-Oct-19 11:28:44 - obelixtools - INFO: Performing selftest with https://1.1.1.1\n06-Oct-19 11:28:44 - obelixtools - INFO: Connected to the internet.\n06-Oct-19 11:28:44 - obelixtools - INFO: Performing speedtest with http://speedtest.belwue.net/100M\n06-Oct-19 11:29:11 - obelixtools - INFO: Connection speed is 3MB/s\u00b5\n</code></pre>\n<h3>Variables</h3>\n<h4>.url : str</h4>\n<p>The URL of the API.</p>\n<h4>.format : str</h4>\n<p>Define a certain data format for the data return by the API. This can by either <em>json</em>, <em>xml</em> or raw. Any other value will sit it to raw.</p>\n<h4>.content</h4>\n<p>The content of the API response after postprocessing. Postprocessing happens by setting <em>.format</em></p>\n<h3>Methods</h3>\n<h4>.query(url : str, optional) -&gt; bool</h4>\n<p>Fetched the data from the API if the age of the existing data in .content is older than <em>.last_update</em>. This timeout is ignored if <em>url</em> is set (useful for speedtests).</p>\n<h4>.check_connection(url='<a href=\"https://1.1.1.1\" rel=\"nofollow\">https://1.1.1.1</a>', timeout=5) -&gt; bool</h4>\n<p>Fetches the given url and and returns True if the servers returns a status code 200 and False otherwise. Comprehensive log messages are passed to the loggin module.</p>\n<h4>.speedtest(url='<a href=\"http://speedtest.belwue.net/100M\" rel=\"nofollow\">http://speedtest.belwue.net/100M</a>') -&gt; bool</h4>\n<p>Downloads the file provided at the given url and returns the speed in bytes per second. The logging module received a log message with humand readable speed (e.g. kB/s, MB/s...)</p>\n\n          </div>"}, "last_serial": 6202176, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "8b7c310dae17e2df163db235d370b9fa", "sha256": "c0486c18598b40d031e26f610024f16570716e4d627aef0123131e8d69aab897"}, "downloads": -1, "filename": "obelixtools-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8b7c310dae17e2df163db235d370b9fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4291, "upload_time": "2019-11-10T01:10:08", "upload_time_iso_8601": "2019-11-10T01:10:08.849226Z", "url": "https://files.pythonhosted.org/packages/b8/8c/96f522b01096b24aeb50d80c701f7dea5e8d262ee705f1590bb23d5afc1e/obelixtools-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ecd4a3d3582d8fb9e70e34b3781b486", "sha256": "c47523255511e3b1ea4bc0992fb7557f4d29fcd78f8741bb1ebbf0b80a57dc91"}, "downloads": -1, "filename": "obelixtools-1.1.0.tar.gz", "has_sig": false, "md5_digest": "2ecd4a3d3582d8fb9e70e34b3781b486", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2926, "upload_time": "2019-11-10T01:10:11", "upload_time_iso_8601": "2019-11-10T01:10:11.597118Z", "url": "https://files.pythonhosted.org/packages/00/16/195ccd1824c57cd33649fc037df4537089e9b09457e78fb29fb81c994b8c/obelixtools-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "16c628728d43c96c4c0bd2acd58191d8", "sha256": "89417ac3b3dd88081a947aa6d2edebdc6b5bfb1e826bf3b3da2c891ad6f90461"}, "downloads": -1, "filename": "obelixtools-1.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "16c628728d43c96c4c0bd2acd58191d8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 5188, "upload_time": "2019-11-26T15:58:09", "upload_time_iso_8601": "2019-11-26T15:58:09.368107Z", "url": "https://files.pythonhosted.org/packages/c0/87/98f61e7e1e6208b771a20fdce348fe61b3fcacde78813e376e605a0875d2/obelixtools-1.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "155180d2c5adc138554f847f97dd20d3", "sha256": "d01956b00dd1e97457bcb1f9bf6becaba114329d75cb896ffbf10da702139970"}, "downloads": -1, "filename": "obelixtools-1.1.1.tar.gz", "has_sig": false, "md5_digest": "155180d2c5adc138554f847f97dd20d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3821, "upload_time": "2019-11-26T15:58:10", "upload_time_iso_8601": "2019-11-26T15:58:10.707680Z", "url": "https://files.pythonhosted.org/packages/be/4d/40d610593d194c2b436a841b97884050dea28ca8b0f4e2c7230a46165b5d/obelixtools-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16c628728d43c96c4c0bd2acd58191d8", "sha256": "89417ac3b3dd88081a947aa6d2edebdc6b5bfb1e826bf3b3da2c891ad6f90461"}, "downloads": -1, "filename": "obelixtools-1.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "16c628728d43c96c4c0bd2acd58191d8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 5188, "upload_time": "2019-11-26T15:58:09", "upload_time_iso_8601": "2019-11-26T15:58:09.368107Z", "url": "https://files.pythonhosted.org/packages/c0/87/98f61e7e1e6208b771a20fdce348fe61b3fcacde78813e376e605a0875d2/obelixtools-1.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "155180d2c5adc138554f847f97dd20d3", "sha256": "d01956b00dd1e97457bcb1f9bf6becaba114329d75cb896ffbf10da702139970"}, "downloads": -1, "filename": "obelixtools-1.1.1.tar.gz", "has_sig": false, "md5_digest": "155180d2c5adc138554f847f97dd20d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3821, "upload_time": "2019-11-26T15:58:10", "upload_time_iso_8601": "2019-11-26T15:58:10.707680Z", "url": "https://files.pythonhosted.org/packages/be/4d/40d610593d194c2b436a841b97884050dea28ca8b0f4e2c7230a46165b5d/obelixtools-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:51 2020"}