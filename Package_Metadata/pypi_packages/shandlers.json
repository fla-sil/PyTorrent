{"info": {"author": "GonzaloSaad", "author_email": "saad.gonzalo.ale@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# shandlers\n\n[![serverless](http://public.serverless.com/badges/v3.svg)](http://www.serverless.com)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Build Status](https://travis-ci.com/GonzaloSaad/shandlers.svg?branch=master)](https://travis-ci.com/GonzaloSaad/shandlers)\n\nA python lib that provides handlers for serverless events\n\n&nbsp;\n## Installation\n\nFrom PyPI:\n\n    shandlers==0.0.1\n\n&nbsp;\n## Supported events\n- [x] sqs\n- [ ] apigw\n- [ ] sns\n- [ ] kinesis stream\n- [ ] kinesis firehose\n\n\n&nbsp;\n## Basic Usage\n\n### SQS Handler\n\nCreate a function that accepts a `payload` and `kwargs` as parameters, that contains the logic\nthat you want to apply to **each** of your records in the event.\n\n```python\ndef handle(payload, **kwargs):\n    pass\n```\n\nAdd the `@sqs_handler` decorator to the function\n\n```python\nfrom shandlers.sqs.handler import sqs_handler\n\n@sqs_handler()\ndef handle(payload, **kwargs):\n    pass\n```\n\nThe decorator will allow your function to:\n- Parse the SQS event (using [`marshmallow`](https://github.com/marshmallow-code/marshmallow))\n- Parse the `body` of each record to a `dict` and pass it to your function\n- Handle a basic retry logic\n- Handle `ValidationError` and `JSONDecodeError`\n\n&nbsp;\n#### The kwargs argument in your function\n\nYou can have extra arguemtns in your function if you need to. The `sqs_handler` decorator\nalso passes `receive_count` and `event` as parameters, in case you need to perform\nextra actions with that information.\n\n```python\nfrom shandlers.sqs.handler import sqs_handler\n\n@sqs_handler()\ndef handle(payload, receive_count, event, **kwargs):\n    pass\n```\n\n&nbsp;\n#### Configuring the decorator\n\n#### Schema\n\nYou can add `schema` to the decorator parameters, in case you have for example\na `marshmallow` schema or if you have any other mechanism to parse that responds to\nthe `.loads(json_string)` call.\n\n```python\nfrom shandlers.sqs.handler import sqs_handler\nfrom myschema import MyMarshmallowSchema\n\n@sqs_handler(schema=MyMarshmallowSchema())\ndef handle(payload, **kwargs):\n    pass\n```\n\nHere the `payload` argument type will depend on the passed schema output.\n\nAlso, if while parsing the record `body` a parsing error occurs, the event\nwill be **DISCARDED**.\n\n> The default value of `schema` is the `json` module from python\n\n#### Retry threshold\n\nYou can add `retry_theshold` to the decorator parameters to specify the\namount of times a `record` can retry to be processed.\n\n```python\nfrom shandlers.sqs.handler import sqs_handler\n\n@sqs_handler(retry_threshold=5)\ndef handle(payload, **kwargs):\n    pass\n```\n\n> The default value is set to `1`\n\n#### Logger\n\nYou can add `logger` to the decorator parameter, so the handlers uses your logger\nwhen an error occurs.\n\n```python\nfrom shandlers.sqs.handler import sqs_handler\nimport logging\n\n_LOGGER = logging.getLogger()\n\n@sqs_handler(logger=_LOGGER)\ndef handle(payload, **kwargs):\n    pass\n```\n\n> The default logger can be checked [here](shandlers/logger.py)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GonzaloSaad/shandlers", "keywords": "python aws serverless", "license": "", "maintainer": "", "maintainer_email": "", "name": "shandlers", "package_url": "https://pypi.org/project/shandlers/", "platform": "", "project_url": "https://pypi.org/project/shandlers/", "project_urls": {"Homepage": "https://github.com/GonzaloSaad/shandlers"}, "release_url": "https://pypi.org/project/shandlers/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A python lib that provides handlers for serverless events", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>shandlers</h1>\n<p><a href=\"http://www.serverless.com\" rel=\"nofollow\"><img alt=\"serverless\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79423c54cfb61aa126ef32722f62a4a6846e9358/687474703a2f2f7075626c69632e7365727665726c6573732e636f6d2f6261646765732f76332e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<a href=\"https://travis-ci.com/GonzaloSaad/shandlers\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c9090b06bd732fd859ae435e8a9594eb493f889b/68747470733a2f2f7472617669732d63692e636f6d2f476f6e7a616c6f536161642f7368616e646c6572732e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>A python lib that provides handlers for serverless events</p>\n<p>\u00a0</p>\n<h2>Installation</h2>\n<p>From PyPI:</p>\n<pre><code>shandlers==0.0.1\n</code></pre>\n<p>\u00a0</p>\n<h2>Supported events</h2>\n<ul>\n<li>[x] sqs</li>\n<li>[ ] apigw</li>\n<li>[ ] sns</li>\n<li>[ ] kinesis stream</li>\n<li>[ ] kinesis firehose</li>\n</ul>\n<p>\u00a0</p>\n<h2>Basic Usage</h2>\n<h3>SQS Handler</h3>\n<p>Create a function that accepts a <code>payload</code> and <code>kwargs</code> as parameters, that contains the logic\nthat you want to apply to <strong>each</strong> of your records in the event.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Add the <code>@sqs_handler</code> decorator to the function</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shandlers.sqs.handler</span> <span class=\"kn\">import</span> <span class=\"n\">sqs_handler</span>\n\n<span class=\"nd\">@sqs_handler</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>The decorator will allow your function to:</p>\n<ul>\n<li>Parse the SQS event (using <a href=\"https://github.com/marshmallow-code/marshmallow\" rel=\"nofollow\"><code>marshmallow</code></a>)</li>\n<li>Parse the <code>body</code> of each record to a <code>dict</code> and pass it to your function</li>\n<li>Handle a basic retry logic</li>\n<li>Handle <code>ValidationError</code> and <code>JSONDecodeError</code></li>\n</ul>\n<p>\u00a0</p>\n<h4>The kwargs argument in your function</h4>\n<p>You can have extra arguemtns in your function if you need to. The <code>sqs_handler</code> decorator\nalso passes <code>receive_count</code> and <code>event</code> as parameters, in case you need to perform\nextra actions with that information.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shandlers.sqs.handler</span> <span class=\"kn\">import</span> <span class=\"n\">sqs_handler</span>\n\n<span class=\"nd\">@sqs_handler</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">receive_count</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>\u00a0</p>\n<h4>Configuring the decorator</h4>\n<h4>Schema</h4>\n<p>You can add <code>schema</code> to the decorator parameters, in case you have for example\na <code>marshmallow</code> schema or if you have any other mechanism to parse that responds to\nthe <code>.loads(json_string)</code> call.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shandlers.sqs.handler</span> <span class=\"kn\">import</span> <span class=\"n\">sqs_handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myschema</span> <span class=\"kn\">import</span> <span class=\"n\">MyMarshmallowSchema</span>\n\n<span class=\"nd\">@sqs_handler</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">MyMarshmallowSchema</span><span class=\"p\">())</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Here the <code>payload</code> argument type will depend on the passed schema output.</p>\n<p>Also, if while parsing the record <code>body</code> a parsing error occurs, the event\nwill be <strong>DISCARDED</strong>.</p>\n<blockquote>\n<p>The default value of <code>schema</code> is the <code>json</code> module from python</p>\n</blockquote>\n<h4>Retry threshold</h4>\n<p>You can add <code>retry_theshold</code> to the decorator parameters to specify the\namount of times a <code>record</code> can retry to be processed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shandlers.sqs.handler</span> <span class=\"kn\">import</span> <span class=\"n\">sqs_handler</span>\n\n<span class=\"nd\">@sqs_handler</span><span class=\"p\">(</span><span class=\"n\">retry_threshold</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<blockquote>\n<p>The default value is set to <code>1</code></p>\n</blockquote>\n<h4>Logger</h4>\n<p>You can add <code>logger</code> to the decorator parameter, so the handlers uses your logger\nwhen an error occurs.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shandlers.sqs.handler</span> <span class=\"kn\">import</span> <span class=\"n\">sqs_handler</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">_LOGGER</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@sqs_handler</span><span class=\"p\">(</span><span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"n\">_LOGGER</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<blockquote>\n<p>The default logger can be checked <a href=\"shandlers/logger.py\" rel=\"nofollow\">here</a></p>\n</blockquote>\n\n          </div>"}, "last_serial": 7160711, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "972e36efe6ef6f25a44ff715ee65f3cb", "sha256": "7dfec069a09a6b65fda23fadab718085dc9879fbefb3fd6e41c85440487c32db"}, "downloads": -1, "filename": "shandlers-0.0.1.tar.gz", "has_sig": false, "md5_digest": "972e36efe6ef6f25a44ff715ee65f3cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5534, "upload_time": "2020-05-04T01:18:24", "upload_time_iso_8601": "2020-05-04T01:18:24.086773Z", "url": "https://files.pythonhosted.org/packages/ab/2d/6720c53d02f253e92c50b7dfa8bf73016f6b2c6803601c00c1f262688aee/shandlers-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "972e36efe6ef6f25a44ff715ee65f3cb", "sha256": "7dfec069a09a6b65fda23fadab718085dc9879fbefb3fd6e41c85440487c32db"}, "downloads": -1, "filename": "shandlers-0.0.1.tar.gz", "has_sig": false, "md5_digest": "972e36efe6ef6f25a44ff715ee65f3cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5534, "upload_time": "2020-05-04T01:18:24", "upload_time_iso_8601": "2020-05-04T01:18:24.086773Z", "url": "https://files.pythonhosted.org/packages/ab/2d/6720c53d02f253e92c50b7dfa8bf73016f6b2c6803601c00c1f262688aee/shandlers-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:48 2020"}