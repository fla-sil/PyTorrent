{"info": {"author": "jan grant", "author_email": "argparse-helper@ioctl.org", "bugtrack_url": null, "classifiers": [], "description": "# Yet another argparse helper: complex sub-command trees made simple\n\nWriting complex subcommand parsers using `argparse` is certainly possible, but it involves a lot\nof laborious repetition.\n\nThis library provides a small wrapper around `argparse` that adds a convenience method. That\nlets you specify a sequence of words that form a command, together with flags - and the\ndefinitions of those flags are passed at the same time.\n\n    parser = ArgumentParser()\n    parser.add_command(\"foo bar baz --json\",\n                       func=lambda *args: print(\"foo-bar-baz\"),\n                       json=dict(default=False, action=\"store_true\"),\n                       )\n    parser.add_command(\"foo bar quux\",\n                       func=lambda *args: print(\"foo-bar-quux\"),\n                       )\n\nThe `func` parameter will be set on the resulting namespace. Note, there is no particular requirement\nfor the arguments that must be passed to `func` - this is down to the library user to define.\n\nAdditionally, a new `argparse.Action` subclass is provided, `OptionalOverride`. This supports\nhaving the *same* flag appear in a global position and be repeated by a subcommand. It works\nwell - in as much as defaults set by the global position won't be re-set in the subordinate\nposition.\n\n    parser.add_command(\"--flag\", flag=dict(default=\"foo\"))\n    parser.add_command(\"xyzzy --flag\", flag=dict(action=OptionalOverride))\n\nWhere a flag is repeated in an `add_command` call, the second and subsequent values receive an\n`OptionalOveride` setting automatically.\n\n    parser.add_command(\"--glob xyzzy --glob\", glob=dict(action=AtMostOnce))\n    # the second iteration becomes OptionalOverride\n\n`AtMostOnce` is supplied as an action type; this causes an explicit error (rather than\njust overriding the previous value) if a flag is specified more than once.\n\nWe also have `AppendN(t)` as an action type. It works like `Append`, but the type constructor\n`t` is applied to its collected argument(s) before the result is appended to the list.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jan-g/{name}", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "argparse-helper", "package_url": "https://pypi.org/project/argparse-helper/", "platform": "", "project_url": "https://pypi.org/project/argparse-helper/", "project_urls": {"Homepage": "https://github.com/jan-g/{name}"}, "release_url": "https://pypi.org/project/argparse-helper/0.9.3/", "requires_dist": null, "requires_python": "", "summary": "Yet another argparse helper: complex sub-command trees made simple", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Yet another argparse helper: complex sub-command trees made simple</h1>\n<p>Writing complex subcommand parsers using <code>argparse</code> is certainly possible, but it involves a lot\nof laborious repetition.</p>\n<p>This library provides a small wrapper around <code>argparse</code> that adds a convenience method. That\nlets you specify a sequence of words that form a command, together with flags - and the\ndefinitions of those flags are passed at the same time.</p>\n<pre><code>parser = ArgumentParser()\nparser.add_command(\"foo bar baz --json\",\n                   func=lambda *args: print(\"foo-bar-baz\"),\n                   json=dict(default=False, action=\"store_true\"),\n                   )\nparser.add_command(\"foo bar quux\",\n                   func=lambda *args: print(\"foo-bar-quux\"),\n                   )\n</code></pre>\n<p>The <code>func</code> parameter will be set on the resulting namespace. Note, there is no particular requirement\nfor the arguments that must be passed to <code>func</code> - this is down to the library user to define.</p>\n<p>Additionally, a new <code>argparse.Action</code> subclass is provided, <code>OptionalOverride</code>. This supports\nhaving the <em>same</em> flag appear in a global position and be repeated by a subcommand. It works\nwell - in as much as defaults set by the global position won't be re-set in the subordinate\nposition.</p>\n<pre><code>parser.add_command(\"--flag\", flag=dict(default=\"foo\"))\nparser.add_command(\"xyzzy --flag\", flag=dict(action=OptionalOverride))\n</code></pre>\n<p>Where a flag is repeated in an <code>add_command</code> call, the second and subsequent values receive an\n<code>OptionalOveride</code> setting automatically.</p>\n<pre><code>parser.add_command(\"--glob xyzzy --glob\", glob=dict(action=AtMostOnce))\n# the second iteration becomes OptionalOverride\n</code></pre>\n<p><code>AtMostOnce</code> is supplied as an action type; this causes an explicit error (rather than\njust overriding the previous value) if a flag is specified more than once.</p>\n<p>We also have <code>AppendN(t)</code> as an action type. It works like <code>Append</code>, but the type constructor\n<code>t</code> is applied to its collected argument(s) before the result is appended to the list.</p>\n\n          </div>"}, "last_serial": 7041021, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "28a83d7d224a1471bfcac08e489ef5c1", "sha256": "543cc2a26aba9b7595a767db4c2559159a72811c1d038413a3fef9dfdf2a51e6"}, "downloads": -1, "filename": "argparse_helper-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "28a83d7d224a1471bfcac08e489ef5c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4761, "upload_time": "2020-04-04T13:36:45", "upload_time_iso_8601": "2020-04-04T13:36:45.786703Z", "url": "https://files.pythonhosted.org/packages/d8/47/459995ad418e73dd3d7e4bcbffec447b778645d9fdcf6033bbdae42b1ddb/argparse_helper-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "803ee7e59e33d28b4f021d8c433801a0", "sha256": "0a230aa9505e6f9bcc81673662e9b28fc4fbd5ee4a5b4fe76eacd06ab22d2ed8"}, "downloads": -1, "filename": "argparse_helper-0.9.0.tar.gz", "has_sig": false, "md5_digest": "803ee7e59e33d28b4f021d8c433801a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4123, "upload_time": "2020-04-04T13:36:47", "upload_time_iso_8601": "2020-04-04T13:36:47.644596Z", "url": "https://files.pythonhosted.org/packages/8b/9e/9449ec8359653261ab978e2db5932bcc0dcbb484d2fd98ad080b51f42e71/argparse_helper-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "90750709dbaa9eae7a3417e68fd7399f", "sha256": "aff59ba2f2c4a937910e82881a37032c227e87062ec969213298d1bf3be9c228"}, "downloads": -1, "filename": "argparse_helper-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "90750709dbaa9eae7a3417e68fd7399f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4734, "upload_time": "2020-04-04T13:48:22", "upload_time_iso_8601": "2020-04-04T13:48:22.371165Z", "url": "https://files.pythonhosted.org/packages/60/39/7c5ff170cf52a9311ee6cb589fc4321131e23a1e24ed9731cd2d3c06f037/argparse_helper-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a56a39f9d0e3919175aa2593f03795b1", "sha256": "06b551e5e637d13ca31622bf678baca5af512e778b57c345a8a9074374bc216c"}, "downloads": -1, "filename": "argparse_helper-0.9.1.tar.gz", "has_sig": false, "md5_digest": "a56a39f9d0e3919175aa2593f03795b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4121, "upload_time": "2020-04-04T13:48:23", "upload_time_iso_8601": "2020-04-04T13:48:23.403607Z", "url": "https://files.pythonhosted.org/packages/01/fa/27d35414b4d48b96332e889b625f24e0d9943b30c3e6fbb27439aaf9224c/argparse_helper-0.9.1.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "c7dfb9870aa15ccbb121b8af38481087", "sha256": "b0b621589b2901455129f1789858991e67df8a58679aae910340c8e57b29ff3e"}, "downloads": -1, "filename": "argparse_helper-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c7dfb9870aa15ccbb121b8af38481087", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4946, "upload_time": "2020-04-17T15:29:38", "upload_time_iso_8601": "2020-04-17T15:29:38.582353Z", "url": "https://files.pythonhosted.org/packages/c8/b4/853195e461994ac38b076e6b2c5b7102c71798c49af57525ecb03563af21/argparse_helper-0.9.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7dfb9870aa15ccbb121b8af38481087", "sha256": "b0b621589b2901455129f1789858991e67df8a58679aae910340c8e57b29ff3e"}, "downloads": -1, "filename": "argparse_helper-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c7dfb9870aa15ccbb121b8af38481087", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4946, "upload_time": "2020-04-17T15:29:38", "upload_time_iso_8601": "2020-04-17T15:29:38.582353Z", "url": "https://files.pythonhosted.org/packages/c8/b4/853195e461994ac38b076e6b2c5b7102c71798c49af57525ecb03563af21/argparse_helper-0.9.3-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:17:17 2020"}