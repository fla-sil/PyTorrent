{"info": {"author": "LAZR Developers", "author_email": "lazr-developers@lists.launchpad.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "..\r\n            This file is part of lazr.json.\r\n        \r\n            lazr.json is free software: you can redistribute it and/or modify it\r\n            under the terms of the GNU Lesser General Public License as published by\r\n            the Free Software Foundation, version 3 of the License.\r\n        \r\n            lazr.json is distributed in the hope that it will be useful, but\r\n            WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n            or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\r\n            License for more details.\r\n        \r\n            You should have received a copy of the GNU Lesser General Public License\r\n            along with lazr.json.  If not, see <http://www.gnu.org/licenses/>.\r\n        \r\n        ==========\r\n        Importable\r\n        ==========\r\n        \r\n        The lazr.json package is importable, and has a version number.\r\n        \r\n            >>> import lazr.json\r\n            >>> print 'VERSION:', lazr.json.__version__\r\n            VERSION: ...\r\n        \r\n        ====================\r\n        Object Serialisation\r\n        ====================\r\n        \r\n        Import the methods and classes relevant to this package.\r\n        \r\n            >>> import json\r\n            >>> from lazr.json import (\r\n            ...     custom_type_decoder,\r\n            ...     CustomTypeEncoder,\r\n            ...     register_serialisable_type,\r\n            ...     )\r\n        \r\n        Define a complex object class we want to serialse.\r\n        \r\n            >>> class ComplexObject:\r\n            ...     def __init__(self, str='string_value', i=5):\r\n            ...         self.f_string = str\r\n            ...         self.f_int = i\r\n            ...     def __eq__(self, other):\r\n            ...         return (self.f_int == other.f_int and\r\n            ...             self.f_string == other.f_string)\r\n        \r\n        By default an instance of the complex object cannot be serialised.\r\n            >>> obj = ComplexObject()\r\n            >>> try:\r\n            ...     json.dumps(obj)\r\n            ... except TypeError as e:\r\n            ...      print e\r\n            <...> is not JSON serializable\r\n        \r\n        The CustomTypeEncoder is used to serialise complex objects. However,\r\n        until the class of object is registered as being serialisable, an\r\n        exception will still be raised.\r\n        \r\n            >>> try:\r\n            ...     json.dumps(obj, cls=CustomTypeEncoder)\r\n            ... except TypeError as e:\r\n            ...      print e\r\n            <...> is not JSON serializable\r\n        \r\n        We can register the object's class as being serialisable. If we don't specify an encoder\r\n        then the object's __dict__ is used.\r\n        \r\n            >>> register_serialisable_type(\"complex\", ComplexObject)\r\n            >>> print json.dumps(obj, cls=CustomTypeEncoder)\r\n            {\"complex,__builtin__.ComplexObject\": {\"f_int\": 5, \"f_string\": \"string_value\"}}\r\n        \r\n        We can register an encoder for a complex object.\r\n        \r\n            >>> class ComplexObjectEncoder(json.JSONEncoder):\r\n            ...     def default(self, obj):\r\n            ...         if isinstance(obj, ComplexObject):\r\n            ...             return {\r\n            ...                 'int_value': obj.f_int,\r\n            ...                 'str_value': obj.f_string}\r\n            ...         return json.JSONEncoder.default(self, obj)\r\n        \r\n            >>> register_serialisable_type(\"complex\", ComplexObject, ComplexObjectEncoder)\r\n        \r\n        The json encoding of the object is changed accordingly.\r\n        \r\n            >>> print json.dumps(obj, cls=CustomTypeEncoder)\r\n            {\"complex,__builtin__.ComplexObject\": \"{\\\"int_value\\\": 5, \\\"str_value\\\": \\\"string_value\\\"}\"}\r\n        \r\n        Arbitrarily complex objects are supported, including those with complex attributes.\r\n        \r\n            >>> class AnotherComplexObject:\r\n            ...     def __init__(self):\r\n            ...         self.obj = ComplexObject()\r\n        \r\n            >>> register_serialisable_type(\"another\", AnotherComplexObject)\r\n            >>> another = AnotherComplexObject()\r\n            >>> print json.dumps(another, cls=CustomTypeEncoder)\r\n            {\"another,__builtin__.AnotherComplexObject\": {\"obj\": {\"complex,__builtin__.ComplexObject\": \"{\\\"int_value\\\": 5, \\\"str_value\\\": \\\"string_value\\\"}\"}}}\r\n        \r\n        Collections of complex objects can be serialised.\r\n        \r\n            >>> complex_collection = [ComplexObject() for x in range(4)]\r\n            >>> json_collection = json.dumps(complex_collection, cls=CustomTypeEncoder)\r\n            >>> print json_collection\r\n            [{\"complex,__builtin__.ComplexObject\": \"{\\\"int_value\\\": 5, \\\"str_value\\\": \\\"string_value\\\"}\"}, ...]\r\n        \r\n        ==========================\r\n        Serialising Built In Types\r\n        ==========================\r\n        \r\n        Support for some object types is included out-of-the-box.\r\n        \r\n        1. lazr.enum\r\n        \r\n            >>> from lazr.enum import (\r\n            ...     EnumeratedType,\r\n            ...     Item,\r\n            ...     )\r\n            >>> class Fruit(EnumeratedType):\r\n            ...     \"A choice of fruit.\"\r\n            ...     APPLE = Item('Apple')\r\n        \r\n            >>> an_apple = Fruit.APPLE\r\n            >>> print json.dumps(an_apple, cls=CustomTypeEncoder)\r\n            {\"BaseItem,lazr.enum._enum.Item\": \"{\\\"type\\\": \\\"Fruit\\\", \\\"name\\\": \\\"APPLE\\\"}\"}\r\n        \r\n        \r\n        ======================\r\n        Object Deserialisation\r\n        ======================\r\n        \r\n        To deserialise a json string containing complex objects, the json.loads()\r\n        object_hook is used. One of two requirements must be met for an object to\r\n        be able to be deserialised:\r\n        \r\n        1. The object class provides a from_dict() method.\r\n        2. A decoder for the object class is specified.\r\n        \r\n        If none of the above is true, the object dict from the serialisation process is\r\n        returned. There's been no decoder for ComplexObject registered yet so all that\r\n        can be expected is the object's dict:\r\n        \r\n            >>> obj = ComplexObject('complex', 6)\r\n            >>> json_data = json.dumps(obj, cls=CustomTypeEncoder)\r\n            >>> deserialised = json.loads(json_data, object_hook=custom_type_decoder)\r\n            >>> print deserialised\r\n            {\"int_value\": 6, \"str_value\": \"complex\"}\r\n        \r\n        Create a decoder for ComplexObject:\r\n            >>> class ComplexObjectDecoder:\r\n            ...     @classmethod\r\n            ...     def from_dict(cls, class_, value_dict):\r\n            ...         return class_(\r\n            ...             value_dict['str_value'], value_dict['int_value'])\r\n        \r\n        Register the decoder:\r\n            >>> register_serialisable_type(\"complex\", ComplexObject, ComplexObjectEncoder, ComplexObjectDecoder)\r\n        \r\n        Now do the deserialisation again and we expect a ComplexObject back:\r\n        \r\n            >>> deserialised = json.loads(json_data, object_hook=custom_type_decoder)\r\n            >>> print deserialised == obj\r\n            True\r\n        \r\n        Collections of complex objects can be deserialised:\r\n            >>> deserialised_collection = json.loads(json_collection, object_hook=custom_type_decoder)\r\n            >>> print len(deserialised_collection)\r\n            4\r\n            >>> print deserialised_collection[0] == complex_collection[0]\r\n            True\r\n        \r\n        Now we'll use a from_dict() method on the object class itself.\r\n        Remove the registered decoder:\r\n            >>> register_serialisable_type(\"complex\", ComplexObject, ComplexObjectEncoder)\r\n        \r\n        Add a from_dict method to ComplexObject:\r\n        \r\n            >>> def from_dict(class_, value_dict):\r\n            ...     return class_(\r\n            ...         value_dict['str_value'], value_dict['int_value'])\r\n            >>> import types\r\n            >>> ComplexObject.from_dict = types.MethodType(from_dict, ComplexObject)\r\n        \r\n        Do the deserialisation again and we expect a ComplexObject back:\r\n        \r\n            >>> deserialised = json.loads(json_data, object_hook=custom_type_decoder)\r\n            >>> print deserialised == obj\r\n            True\r\n        \r\n        ============================\r\n        Deserialising Built In Types\r\n        ============================\r\n        \r\n        Support for deserialising some types is supported out-of-the-box.\r\n        \r\n        1. lazr.enum\r\n        \r\n            >>> json_apple = json.dumps(an_apple, cls=CustomTypeEncoder)\r\n            >>> deserialised_apple = json.loads(json_apple, object_hook=custom_type_decoder)\r\n            >>> print deserialised_apple == an_apple\r\n            True\r\n        \r\n        .. pypi description ends here\r\n        \r\n        ===============\r\n        Other Documents\r\n        ===============\r\n        \r\n        .. toctree::\r\n           :glob:\r\n        \r\n           *\r\n           docs/*\r\n        \r\n        =====================\r\n        NEWS for lazr.json\r\n        =====================\r\n        \r\n        0.2 (2012-04-23)\r\n        ================\r\n\r\n        - Fix issue with deserialising single value dicts (bug 987043)\r\n\r\n        0.1 (2012-04-19)\r\n        ================\r\n        \r\n        - Initial release", "description_content_type": null, "docs_url": null, "download_url": "https://launchpad.net/lazr.json/+download", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://launchpad.net/lazr.json", "keywords": "", "license": "LGPL v3", "maintainer": "", "maintainer_email": "", "name": "lazr.json", "package_url": "https://pypi.org/project/lazr.json/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lazr.json/", "project_urls": {"Download": "https://launchpad.net/lazr.json/+download", "Homepage": "https://launchpad.net/lazr.json"}, "release_url": "https://pypi.org/project/lazr.json/0.2/", "requires_dist": null, "requires_python": null, "summary": "JSON serialisation utilities.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            ..\n<br>            This file is part of lazr.json.\n<br>        \n<br>            lazr.json is free software: you can redistribute it and/or modify it\n<br>            under the terms of the GNU Lesser General Public License as published by\n<br>            the Free Software Foundation, version 3 of the License.\n<br>        \n<br>            lazr.json is distributed in the hope that it will be useful, but\n<br>            WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n<br>            or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n<br>            License for more details.\n<br>        \n<br>            You should have received a copy of the GNU Lesser General Public License\n<br>            along with lazr.json.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n<br>        \n<br>        ==========\n<br>        Importable\n<br>        ==========\n<br>        \n<br>        The lazr.json package is importable, and has a version number.\n<br>        \n<br>            &gt;&gt;&gt; import lazr.json\n<br>            &gt;&gt;&gt; print 'VERSION:', lazr.json.__version__\n<br>            VERSION: ...\n<br>        \n<br>        ====================\n<br>        Object Serialisation\n<br>        ====================\n<br>        \n<br>        Import the methods and classes relevant to this package.\n<br>        \n<br>            &gt;&gt;&gt; import json\n<br>            &gt;&gt;&gt; from lazr.json import (\n<br>            ...     custom_type_decoder,\n<br>            ...     CustomTypeEncoder,\n<br>            ...     register_serialisable_type,\n<br>            ...     )\n<br>        \n<br>        Define a complex object class we want to serialse.\n<br>        \n<br>            &gt;&gt;&gt; class ComplexObject:\n<br>            ...     def __init__(self, str='string_value', i=5):\n<br>            ...         self.f_string = str\n<br>            ...         self.f_int = i\n<br>            ...     def __eq__(self, other):\n<br>            ...         return (self.f_int == other.f_int and\n<br>            ...             self.f_string == other.f_string)\n<br>        \n<br>        By default an instance of the complex object cannot be serialised.\n<br>            &gt;&gt;&gt; obj = ComplexObject()\n<br>            &gt;&gt;&gt; try:\n<br>            ...     json.dumps(obj)\n<br>            ... except TypeError as e:\n<br>            ...      print e\n<br>            &lt;...&gt; is not JSON serializable\n<br>        \n<br>        The CustomTypeEncoder is used to serialise complex objects. However,\n<br>        until the class of object is registered as being serialisable, an\n<br>        exception will still be raised.\n<br>        \n<br>            &gt;&gt;&gt; try:\n<br>            ...     json.dumps(obj, cls=CustomTypeEncoder)\n<br>            ... except TypeError as e:\n<br>            ...      print e\n<br>            &lt;...&gt; is not JSON serializable\n<br>        \n<br>        We can register the object's class as being serialisable. If we don't specify an encoder\n<br>        then the object's __dict__ is used.\n<br>        \n<br>            &gt;&gt;&gt; register_serialisable_type(\"complex\", ComplexObject)\n<br>            &gt;&gt;&gt; print json.dumps(obj, cls=CustomTypeEncoder)\n<br>            {\"complex,__builtin__.ComplexObject\": {\"f_int\": 5, \"f_string\": \"string_value\"}}\n<br>        \n<br>        We can register an encoder for a complex object.\n<br>        \n<br>            &gt;&gt;&gt; class ComplexObjectEncoder(json.JSONEncoder):\n<br>            ...     def default(self, obj):\n<br>            ...         if isinstance(obj, ComplexObject):\n<br>            ...             return {\n<br>            ...                 'int_value': obj.f_int,\n<br>            ...                 'str_value': obj.f_string}\n<br>            ...         return json.JSONEncoder.default(self, obj)\n<br>        \n<br>            &gt;&gt;&gt; register_serialisable_type(\"complex\", ComplexObject, ComplexObjectEncoder)\n<br>        \n<br>        The json encoding of the object is changed accordingly.\n<br>        \n<br>            &gt;&gt;&gt; print json.dumps(obj, cls=CustomTypeEncoder)\n<br>            {\"complex,__builtin__.ComplexObject\": \"{\\\"int_value\\\": 5, \\\"str_value\\\": \\\"string_value\\\"}\"}\n<br>        \n<br>        Arbitrarily complex objects are supported, including those with complex attributes.\n<br>        \n<br>            &gt;&gt;&gt; class AnotherComplexObject:\n<br>            ...     def __init__(self):\n<br>            ...         self.obj = ComplexObject()\n<br>        \n<br>            &gt;&gt;&gt; register_serialisable_type(\"another\", AnotherComplexObject)\n<br>            &gt;&gt;&gt; another = AnotherComplexObject()\n<br>            &gt;&gt;&gt; print json.dumps(another, cls=CustomTypeEncoder)\n<br>            {\"another,__builtin__.AnotherComplexObject\": {\"obj\": {\"complex,__builtin__.ComplexObject\": \"{\\\"int_value\\\": 5, \\\"str_value\\\": \\\"string_value\\\"}\"}}}\n<br>        \n<br>        Collections of complex objects can be serialised.\n<br>        \n<br>            &gt;&gt;&gt; complex_collection = [ComplexObject() for x in range(4)]\n<br>            &gt;&gt;&gt; json_collection = json.dumps(complex_collection, cls=CustomTypeEncoder)\n<br>            &gt;&gt;&gt; print json_collection\n<br>            [{\"complex,__builtin__.ComplexObject\": \"{\\\"int_value\\\": 5, \\\"str_value\\\": \\\"string_value\\\"}\"}, ...]\n<br>        \n<br>        ==========================\n<br>        Serialising Built In Types\n<br>        ==========================\n<br>        \n<br>        Support for some object types is included out-of-the-box.\n<br>        \n<br>        1. lazr.enum\n<br>        \n<br>            &gt;&gt;&gt; from lazr.enum import (\n<br>            ...     EnumeratedType,\n<br>            ...     Item,\n<br>            ...     )\n<br>            &gt;&gt;&gt; class Fruit(EnumeratedType):\n<br>            ...     \"A choice of fruit.\"\n<br>            ...     APPLE = Item('Apple')\n<br>        \n<br>            &gt;&gt;&gt; an_apple = Fruit.APPLE\n<br>            &gt;&gt;&gt; print json.dumps(an_apple, cls=CustomTypeEncoder)\n<br>            {\"BaseItem,lazr.enum._enum.Item\": \"{\\\"type\\\": \\\"Fruit\\\", \\\"name\\\": \\\"APPLE\\\"}\"}\n<br>        \n<br>        \n<br>        ======================\n<br>        Object Deserialisation\n<br>        ======================\n<br>        \n<br>        To deserialise a json string containing complex objects, the json.loads()\n<br>        object_hook is used. One of two requirements must be met for an object to\n<br>        be able to be deserialised:\n<br>        \n<br>        1. The object class provides a from_dict() method.\n<br>        2. A decoder for the object class is specified.\n<br>        \n<br>        If none of the above is true, the object dict from the serialisation process is\n<br>        returned. There's been no decoder for ComplexObject registered yet so all that\n<br>        can be expected is the object's dict:\n<br>        \n<br>            &gt;&gt;&gt; obj = ComplexObject('complex', 6)\n<br>            &gt;&gt;&gt; json_data = json.dumps(obj, cls=CustomTypeEncoder)\n<br>            &gt;&gt;&gt; deserialised = json.loads(json_data, object_hook=custom_type_decoder)\n<br>            &gt;&gt;&gt; print deserialised\n<br>            {\"int_value\": 6, \"str_value\": \"complex\"}\n<br>        \n<br>        Create a decoder for ComplexObject:\n<br>            &gt;&gt;&gt; class ComplexObjectDecoder:\n<br>            ...     @classmethod\n<br>            ...     def from_dict(cls, class_, value_dict):\n<br>            ...         return class_(\n<br>            ...             value_dict['str_value'], value_dict['int_value'])\n<br>        \n<br>        Register the decoder:\n<br>            &gt;&gt;&gt; register_serialisable_type(\"complex\", ComplexObject, ComplexObjectEncoder, ComplexObjectDecoder)\n<br>        \n<br>        Now do the deserialisation again and we expect a ComplexObject back:\n<br>        \n<br>            &gt;&gt;&gt; deserialised = json.loads(json_data, object_hook=custom_type_decoder)\n<br>            &gt;&gt;&gt; print deserialised == obj\n<br>            True\n<br>        \n<br>        Collections of complex objects can be deserialised:\n<br>            &gt;&gt;&gt; deserialised_collection = json.loads(json_collection, object_hook=custom_type_decoder)\n<br>            &gt;&gt;&gt; print len(deserialised_collection)\n<br>            4\n<br>            &gt;&gt;&gt; print deserialised_collection[0] == complex_collection[0]\n<br>            True\n<br>        \n<br>        Now we'll use a from_dict() method on the object class itself.\n<br>        Remove the registered decoder:\n<br>            &gt;&gt;&gt; register_serialisable_type(\"complex\", ComplexObject, ComplexObjectEncoder)\n<br>        \n<br>        Add a from_dict method to ComplexObject:\n<br>        \n<br>            &gt;&gt;&gt; def from_dict(class_, value_dict):\n<br>            ...     return class_(\n<br>            ...         value_dict['str_value'], value_dict['int_value'])\n<br>            &gt;&gt;&gt; import types\n<br>            &gt;&gt;&gt; ComplexObject.from_dict = types.MethodType(from_dict, ComplexObject)\n<br>        \n<br>        Do the deserialisation again and we expect a ComplexObject back:\n<br>        \n<br>            &gt;&gt;&gt; deserialised = json.loads(json_data, object_hook=custom_type_decoder)\n<br>            &gt;&gt;&gt; print deserialised == obj\n<br>            True\n<br>        \n<br>        ============================\n<br>        Deserialising Built In Types\n<br>        ============================\n<br>        \n<br>        Support for deserialising some types is supported out-of-the-box.\n<br>        \n<br>        1. lazr.enum\n<br>        \n<br>            &gt;&gt;&gt; json_apple = json.dumps(an_apple, cls=CustomTypeEncoder)\n<br>            &gt;&gt;&gt; deserialised_apple = json.loads(json_apple, object_hook=custom_type_decoder)\n<br>            &gt;&gt;&gt; print deserialised_apple == an_apple\n<br>            True\n<br>        \n<br>        .. pypi description ends here\n<br>        \n<br>        ===============\n<br>        Other Documents\n<br>        ===============\n<br>        \n<br>        .. toctree::\n<br>           :glob:\n<br>        \n<br>           *\n<br>           docs/*\n<br>        \n<br>        =====================\n<br>        NEWS for lazr.json\n<br>        =====================\n<br>        \n<br>        0.2 (2012-04-23)\n<br>        ================\n<br>\n<br>        - Fix issue with deserialising single value dicts (bug 987043)\n<br>\n<br>        0.1 (2012-04-19)\n<br>        ================\n<br>        \n<br>        - Initial release\n          </div>"}, "last_serial": 6191564, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "39b27cdc83abffe11a3df7e979cec517", "sha256": "0ee116c4ece0cbc258b82c7ef6fea6c48531157a1dab1e75d60ff24eb1799f6e"}, "downloads": -1, "filename": "lazr.json-0.1.tar.gz", "has_sig": true, "md5_digest": "39b27cdc83abffe11a3df7e979cec517", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 244114, "upload_time": "2012-04-20T01:26:12", "upload_time_iso_8601": "2012-04-20T01:26:12.272524Z", "url": "https://files.pythonhosted.org/packages/b0/68/afd6fbece7d7d6f9769fd44650213daeba9d23b101fb6c75552e3efb8480/lazr.json-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3a8c5c51b3d83480d12731d4fe683f36", "sha256": "bf00c835ef4f1de9c2a9589ae86e4faaf809df30944eb179c71b13df4a348e0b"}, "downloads": -1, "filename": "lazr.json-0.2.tar.gz", "has_sig": true, "md5_digest": "3a8c5c51b3d83480d12731d4fe683f36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 244412, "upload_time": "2012-04-23T03:30:10", "upload_time_iso_8601": "2012-04-23T03:30:10.661324Z", "url": "https://files.pythonhosted.org/packages/05/29/ee747ac4a0864035d57f86bccbcf02a798fa8f6d00ab54f2dd8d0472c05e/lazr.json-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a8c5c51b3d83480d12731d4fe683f36", "sha256": "bf00c835ef4f1de9c2a9589ae86e4faaf809df30944eb179c71b13df4a348e0b"}, "downloads": -1, "filename": "lazr.json-0.2.tar.gz", "has_sig": true, "md5_digest": "3a8c5c51b3d83480d12731d4fe683f36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 244412, "upload_time": "2012-04-23T03:30:10", "upload_time_iso_8601": "2012-04-23T03:30:10.661324Z", "url": "https://files.pythonhosted.org/packages/05/29/ee747ac4a0864035d57f86bccbcf02a798fa8f6d00ab54f2dd8d0472c05e/lazr.json-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:38 2020"}