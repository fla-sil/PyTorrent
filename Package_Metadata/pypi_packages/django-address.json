{"info": {"author": "Luke Hodkinson", "author_email": "furious.luke@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "# django-address\n\n## Disclaimer\n\nThese instructions are a little shabby, I haven't had a whole lot of time to\ndevote to explaining things thoroughly. If you're interested in using this\nbut are having trouble getting it setup please feel free to email me at\nfurious.luke@gmail.com, I'll assist as best I can and update the instructions\nin the process. Cheers!\n\nAlso, *there will be bugs*, please let me know of any issues and I'll do my\nbest to fix them.\n\n## Installation\n\nPreviously a patch for Django was required to make this app work, but as\nof 1.7 the patch is no longer needed. Installation is now done as per\nusual. The package is installed with:\n\n```bash\npython setup.py install\n```\n\nThen, add `address` to your `INSTALLED_APPS` list in `settings.py`:\n\n```python\nINSTALLED_APPS = (\n    ...\n    'address',\n)\n```\n\nYou wil need to add your Google Maps API key to `settings.py` too:\n```\nGOOGLE_API_KEY = 'AIzaSyD--your-google-maps-key-SjQBE'\n```\n\n## The Model\n\nThe rationale behind the model structure is centered on trying to make\nit easy to enter addresses that may be poorly defined. The model field included\nuses Google Maps API v3 (via the nicely done [geocomplete jquery plugin](http://ubilabs.github.io/geocomplete/)) to\ndetermine a proper address where possible. However if this isn't possible the\nraw address is used and the user is responsible for breaking the address down\ninto components.\n\nIt's currently assumed any address is represent-able using four components:\ncountry, state, locality and street address. In addition, country code, state\ncode and postal code may be stored, if they exist.\n\nThere are four Django models used:\n\n```\n  Country\n    name\n    code\n\n  State\n    name\n    code\n    country -> Country\n\n  Locality\n    name\n    postal_code\n    state -> State\n\n  Address\n    raw\n    street_number\n    route\n    locality -> Locality\n```\n\n## Address Field\n\nTo simplify storage and access of addresses, a subclass of `ForeignKey` named\n`AddressField` has been created. It provides an easy method for setting new\naddresses.\n\n### Creation\n\nIt can be created using the same optional arguments as a ForeignKey field.\nFor example:\n\n```python\n  from address.models import AddressField\n\n  class MyModel(models.Model):\n    address1 = AddressField()\n    address2 = AddressField(related_name='+', blank=True, null=True)\n```\n\n### Setting Values\n\nValues can be set either by assigning an Address object:\n\n```python\n  addr = Address(...)\n  addr.save()\n  obj.address = addr\n```\n\nOr by supplying a dictionary of address components:\n\n```python\n  obj.address = {'street_number': '1', route='Somewhere Ave', ...}\n```\n\nThe structure of the address components is as follows:\n\n```python\n  {\n    'raw': '1 Somewhere Ave, Northcote, VIC 3070, AU',\n    'street_number': '1',\n    'route': 'Somewhere Ave',\n    'locality': 'Northcote',\n    'postal_code': '3070',\n    'state': 'Victoria',\n    'state_code': 'VIC',\n    'country': 'Australia',\n    'country_code': 'AU'\n  }\n```\n\nAll except the `raw` field can be omitted. In addition, a raw address may\nbe set directly:\n\n```python\nobj.address = 'Out the back of 1 Somewhere Ave, Northcote, Australia'\n```\n\n### Getting Values\n\nWhen accessed, the address field simply returns an Address object. This way\nall components may be accessed naturally through the object. For example::\n\n```python\n  route = obj.address.route\n  state_name = obj.address.locality.state.name\n```\n\n## Forms\n\nIncluded is a form field for simplifying address entry. A Google maps\nauto-complete is performed in the browser and passed to the view. If\nthe lookup fails the raw entered value is used.\n\nTODO: Talk about this more.\n\n## Partial Example\n\nThe model:\n\n```python\nfrom address.models import AddressField\n\nclass Person(models.Model):\n  address = AddressField()\n```\n\nThe form:\n\n```\nfrom address.forms import AddressField\n\nclass PersonForm(forms.Form):\n  address = AddressField()\n```\n\nThe template:\n\n```html\n<head>\n{{ form.media }} <!-- needed for JS/GoogleMaps lookup -->\n</head>\n<body>\n  {{ form }}\n</body>\n```", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/furious-luke/django-address", "keywords": "", "license": "BSD", "maintainer": "Luke Hodkinson", "maintainer_email": "furious.luke@gmail.com", "name": "django-address", "package_url": "https://pypi.org/project/django-address/", "platform": "", "project_url": "https://pypi.org/project/django-address/", "project_urls": {"Homepage": "https://github.com/furious-luke/django-address"}, "release_url": "https://pypi.org/project/django-address/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "A django application for describing addresses.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # django-address<br><br>## Disclaimer<br><br>These instructions are a little shabby, I haven't had a whole lot of time to<br>devote to explaining things thoroughly. If you're interested in using this<br>but are having trouble getting it setup please feel free to email me at<br>furious.luke@gmail.com, I'll assist as best I can and update the instructions<br>in the process. Cheers!<br><br>Also, *there will be bugs*, please let me know of any issues and I'll do my<br>best to fix them.<br><br>## Installation<br><br>Previously a patch for Django was required to make this app work, but as<br>of 1.7 the patch is no longer needed. Installation is now done as per<br>usual. The package is installed with:<br><br>```bash<br>python setup.py install<br>```<br><br>Then, add `address` to your `INSTALLED_APPS` list in `settings.py`:<br><br>```python<br>INSTALLED_APPS = (<br>    ...<br>    'address',<br>)<br>```<br><br>You wil need to add your Google Maps API key to `settings.py` too:<br>```<br>GOOGLE_API_KEY = 'AIzaSyD--your-google-maps-key-SjQBE'<br>```<br><br>## The Model<br><br>The rationale behind the model structure is centered on trying to make<br>it easy to enter addresses that may be poorly defined. The model field included<br>uses Google Maps API v3 (via the nicely done [geocomplete jquery plugin](http://ubilabs.github.io/geocomplete/)) to<br>determine a proper address where possible. However if this isn't possible the<br>raw address is used and the user is responsible for breaking the address down<br>into components.<br><br>It's currently assumed any address is represent-able using four components:<br>country, state, locality and street address. In addition, country code, state<br>code and postal code may be stored, if they exist.<br><br>There are four Django models used:<br><br>```<br>  Country<br>    name<br>    code<br><br>  State<br>    name<br>    code<br>    country -&gt; Country<br><br>  Locality<br>    name<br>    postal_code<br>    state -&gt; State<br><br>  Address<br>    raw<br>    street_number<br>    route<br>    locality -&gt; Locality<br>```<br><br>## Address Field<br><br>To simplify storage and access of addresses, a subclass of `ForeignKey` named<br>`AddressField` has been created. It provides an easy method for setting new<br>addresses.<br><br>### Creation<br><br>It can be created using the same optional arguments as a ForeignKey field.<br>For example:<br><br>```python<br>  from address.models import AddressField<br><br>  class MyModel(models.Model):<br>    address1 = AddressField()<br>    address2 = AddressField(related_name='+', blank=True, null=True)<br>```<br><br>### Setting Values<br><br>Values can be set either by assigning an Address object:<br><br>```python<br>  addr = Address(...)<br>  addr.save()<br>  obj.address = addr<br>```<br><br>Or by supplying a dictionary of address components:<br><br>```python<br>  obj.address = {'street_number': '1', route='Somewhere Ave', ...}<br>```<br><br>The structure of the address components is as follows:<br><br>```python<br>  {<br>    'raw': '1 Somewhere Ave, Northcote, VIC 3070, AU',<br>    'street_number': '1',<br>    'route': 'Somewhere Ave',<br>    'locality': 'Northcote',<br>    'postal_code': '3070',<br>    'state': 'Victoria',<br>    'state_code': 'VIC',<br>    'country': 'Australia',<br>    'country_code': 'AU'<br>  }<br>```<br><br>All except the `raw` field can be omitted. In addition, a raw address may<br>be set directly:<br><br>```python<br>obj.address = 'Out the back of 1 Somewhere Ave, Northcote, Australia'<br>```<br><br>### Getting Values<br><br>When accessed, the address field simply returns an Address object. This way<br>all components may be accessed naturally through the object. For example::<br><br>```python<br>  route = obj.address.route<br>  state_name = obj.address.locality.state.name<br>```<br><br>## Forms<br><br>Included is a form field for simplifying address entry. A Google maps<br>auto-complete is performed in the browser and passed to the view. If<br>the lookup fails the raw entered value is used.<br><br>TODO: Talk about this more.<br><br>## Partial Example<br><br>The model:<br><br>```python<br>from address.models import AddressField<br><br>class Person(models.Model):<br>  address = AddressField()<br>```<br><br>The form:<br><br>```<br>from address.forms import AddressField<br><br>class PersonForm(forms.Form):<br>  address = AddressField()<br>```<br><br>The template:<br><br>```html<br>&lt;head&gt;<br>{{ form.media }} &lt;!-- needed for JS/GoogleMaps lookup --&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>  {{ form }}<br>&lt;/body&gt;<br>```\n          </div>"}, "last_serial": 7175998, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3ef3f0d6a724b04cfe1075013b054824", "sha256": "d8711fe8c599290610dc9736c20c5f53bd0354d208ec52154f6cfcad193c2748"}, "downloads": -1, "filename": "django-address-0.1.tar.gz", "has_sig": false, "md5_digest": "3ef3f0d6a724b04cfe1075013b054824", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8173, "upload_time": "2015-01-22T23:31:24", "upload_time_iso_8601": "2015-01-22T23:31:24.838467Z", "url": "https://files.pythonhosted.org/packages/0a/78/0c8d2fcf4050a200592d77937f4994297c73c2b04ea963858c4bbef14086/django-address-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "053c6510f7bfb81cf78e4b41b2558bac", "sha256": "df7d82c8fa6d5995bec9a3d366659f4834e0b4602b4e35ff4461774bdd2a5119"}, "downloads": -1, "filename": "django-address-0.1.1.tar.gz", "has_sig": false, "md5_digest": "053c6510f7bfb81cf78e4b41b2558bac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11427, "upload_time": "2015-01-22T23:44:22", "upload_time_iso_8601": "2015-01-22T23:44:22.454954Z", "url": "https://files.pythonhosted.org/packages/64/cf/7e1636b3f0e7b874f2e8eb9b206f10d81a1077424ec4f92f708682215330/django-address-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "72056567024ce97281b6b808864c8289", "sha256": "42b1d00bbd76ce85f9d094995e090eaebace3ca2ffef3e5775d22252a7d5d68c"}, "downloads": -1, "filename": "django-address-0.1.2.tar.gz", "has_sig": false, "md5_digest": "72056567024ce97281b6b808864c8289", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145419, "upload_time": "2015-06-03T00:23:30", "upload_time_iso_8601": "2015-06-03T00:23:30.098475Z", "url": "https://files.pythonhosted.org/packages/b6/f7/1871cd747e3c7f6e83283a748afaa83cb650f0cd59cbacc272c0c1032407/django-address-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9b1c4348c40b4dc05ecda9f893fe4be5", "sha256": "08dacf7ba6c997cbbb1b9600be1f96d594f6dea28ea786c2ab61630d9753934a"}, "downloads": -1, "filename": "django-address-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9b1c4348c40b4dc05ecda9f893fe4be5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145419, "upload_time": "2015-06-03T00:35:39", "upload_time_iso_8601": "2015-06-03T00:35:39.733593Z", "url": "https://files.pythonhosted.org/packages/2b/2f/5623ac4d70b5814bf325a8bd6b7329d73e0e1362aaf47e5aa1c6deeeb901/django-address-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "1c62c06d3b115abf284379efbdb75280", "sha256": "68feb4532e05e0c07fc9b3ed918fc084a1c5dc87705d3c12a09df6f9c915c38f"}, "downloads": -1, "filename": "django_address-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c62c06d3b115abf284379efbdb75280", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 197287, "upload_time": "2015-08-27T23:56:53", "upload_time_iso_8601": "2015-08-27T23:56:53.042447Z", "url": "https://files.pythonhosted.org/packages/b7/c9/e028705223c7e298ac7c5e2caa71b004152a08bfc25a773a1500740d2901/django_address-0.1.4-py2.py3-none-any.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "426b5f1b65a8389352fa7d79962538cc", "sha256": "c2dca48f5d4c61f580300045ce95712ffaf3b0f6efbcf3f428c44c59228decdc"}, "downloads": -1, "filename": "django-address-0.1.5.tar.gz", "has_sig": false, "md5_digest": "426b5f1b65a8389352fa7d79962538cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13194, "upload_time": "2016-01-19T22:15:25", "upload_time_iso_8601": "2016-01-19T22:15:25.359390Z", "url": "https://files.pythonhosted.org/packages/5e/ab/f30eeb02dae90318d36d614d4cb057c7652cdbb43beb10e3f9eb9e78e00c/django-address-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7119ee4e2a6b86946d4e2f8d69b68845", "sha256": "cb5a9672c0bd7be84ab89f0db773bf5285ee3ae6489b10935a1c57c3c80d2680"}, "downloads": -1, "filename": "django-address-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7119ee4e2a6b86946d4e2f8d69b68845", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13855, "upload_time": "2018-05-18T05:21:41", "upload_time_iso_8601": "2018-05-18T05:21:41.600949Z", "url": "https://files.pythonhosted.org/packages/e2/b5/a8cfaf8a7e281def52aa40b60a929222900a73ab4180862417b8b6967400/django-address-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b3a8e2dca7a883a4be102bfc5c2c380e", "sha256": "30d5a7c89ba40b0459020573d3d7335196bca9a22fbed208d5a21fbea25d1008"}, "downloads": -1, "filename": "django-address-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b3a8e2dca7a883a4be102bfc5c2c380e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16187, "upload_time": "2019-03-17T23:02:10", "upload_time_iso_8601": "2019-03-17T23:02:10.611716Z", "url": "https://files.pythonhosted.org/packages/05/27/1042e06b7e74008dda1530858754742aaab530e120f33346fceb1f5de47d/django-address-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3a8e2dca7a883a4be102bfc5c2c380e", "sha256": "30d5a7c89ba40b0459020573d3d7335196bca9a22fbed208d5a21fbea25d1008"}, "downloads": -1, "filename": "django-address-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b3a8e2dca7a883a4be102bfc5c2c380e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16187, "upload_time": "2019-03-17T23:02:10", "upload_time_iso_8601": "2019-03-17T23:02:10.611716Z", "url": "https://files.pythonhosted.org/packages/05/27/1042e06b7e74008dda1530858754742aaab530e120f33346fceb1f5de47d/django-address-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:52 2020"}