{"info": {"author": "Emin Martinian", "author_email": "emin.martinian@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3"], "description": "Introduction\n============\n\nThe ``ox_profile`` package provides a python framework for statistical\nprofiling. If you are using ``Flask``, then ``ox_profile`` provides a\nflask blueprint so that you can start/stop/analyze profiling from within\nyour application. You can also run the profiler stand-alone without\n``Flask`` as well.\n\nTo learn more, you can browse the overview slides in `PDF\nform <https://github.com/emin63/ox_profile/blob/master/docs/overview_slides.pdf>`__\nor read more details below.\n\nWhy statistical profiling (and why ox\\_profile)?\n================================================\n\nPython contains many profilers which instrument your code and give you\nexact results. A main benefit here is you know *exactly* what your\nprogram is doing. The disadvantage is that there can be significant\noverhead. With a statistical profiler such as ``ox_profile``, we sample\na running program periodically to get a sense of what the program is\ndoing with an overhead that can be tuned as desired.\n\nOne main use case for ``ox_profile`` specifically (and statistical\nprofiling in general) is that you can apply it to a production server to\nsee how things work \"in the wild\".\n\nThere are other statistical profilers out there for python (such as\nstatprof), which are pretty good and may be better for your needs than\n``ox_profile``. So why would you consider ``ox_profile``? Some possible\nreasons include:\n\n1. Works on non-UNIX systems (e.g., works on Windows).\n\n   -  Many other statistical profilers use various excellent features of\n      LINUX or UNIX while ``ox_profile`` only really relies on the\n      python ``sys._current_frames`` method.\n\n2. Simple to understand.\n\n   -  The code for ``ox_profile`` is fairly simple. The main work is\n      really inside ``ox_profile.core.sampling.Sampler`` so it is easy\n      to reason about or modify if you need slightly different\n      profiling.\n\n3. Flask Blueprint provided.\n\n   -  If you are using Flask, then you can register the ``ox_profile``\n      blueprint and easily get statistical profiling in your flask app.\n\nUsage\n=====\n\nStand alone\n-----------\n\nYou can install ``ox_profile`` using pip via something like\n\n.. code:: sh\n\n        $ pip install ox_profile\n\nThe simplest way to run the profiler is by starting the launcher,\ncalling some functions, and the printing the profiled data via something\nlike:\n\n::\n\n        >>> from ox_profile.core.launchers import SimpleLauncher\n        >>> profiler = SimpleLauncher.launch()      # Create and start a profiler.\n        >>> # call some functions\n        >>> print(profiler.show())                  # Print current results in preformated way.\n        >>> profiler.cancel()                       # Turns off the profiler for good.\n\nOften you may want a slightly more sophisticated use case where you can\npause and unpause the profiler and get more details about its status as\nshown below:\n\n::\n\n        >>> from ox_profile.core import launchers\n        >>> profiler = launchers.SimpleLauncher()    # Create an instance of launcher to be your profiler\n        >>> profiler.start()                         # The profiler is a thread so we need to call start\n        >>> profiler.unpause()                       # The profiler starts out paused so we unpause it\n        >>> # call functions or start main program\n        >>> profiler.pause()                         # You can pause if done profiling or leave running\n        >>> query, total_records = profiler.query()  # Query for what the profiler has found\n        >>> info = ['%s: %s' % (i.name, i.hits) for i in query]\n        >>> print('Items in query:\\n  - %s' % (('\\n  - '.join(info))))\n        >>> profiler.cancel()                        # This turns off the profiler for good\n\nWith Flask\n----------\n\nIf you are using the python flask framework and have installed\n``ox_profile`` (e.g., with ``pip install ox_profile``) then you can\nsimply do the following in the appropriate place after initializing your\napp:\n\n::\n\n        from ox_profile.ui.flask.views import OX_PROF_BP\n        app.register_blueprint(OX_PROF_BP)\n        app.config['OX_PROF_USERS'] = {<admin_user_1>, <admin_user_2>, ...}\n\nwhere ``<admin_user_>``, etc. are strings referring to users who are\nallowed to access ``ox_profile``. By default, we check\n``current_user.name``, but you can set the ``OX_PROF_USERNAME_FIELD`` in\n``app.config`` to something else (e.g., ``'email'`` to choose which\nfield of ``current_user`` is checked against the sequence of strings in\n``OX_PROF_USERS``.\n\nPointing your browser to the route ``/ox_profile/status`` will then show\nyou the profiling status. By default, ``ox_profile`` starts out paused\nso that it will not incur any overhead for your app. Go to the\n``/ox_profile/unpause`` route to unpause and begin profiling so that\n``/ox_profile/status`` shows something interesting.\n\nOutput\n======\n\nCurrently ``ox_profile`` is in alpha mode and so the output is fairly\nbare bones. When you look at the results of calling the ``query`` method\nof an instance of ``SimpleLauncher`` in stand alone mode or at the\n``/ox_profile/status`` route when running with flask, what you get is a\nraw list of each function your program has called along with how many\ntimes that function was called in our sampling.\n\nDesign\n======\n\nHigh Level Design\n-----------------\n\nPython offers a number of ways to get profiling information. In addition\nto high-level profiling tools such as in the ``profile`` package, there\nare specialized functions like ``sys.settrace`` and ``sys.setprofile``.\nThese are used for deterministic profiling and relatively robust but\nhave some overhead as they are invoked on each function call.\n\nAt a high level, we want a way to get a sample of what the python\ninterpreter is doing at any give instance. The sampling approach has the\nadvantage that by turning the sampling interval low enough, we can add\narbitrarily low overhead and make profiling feasible in a production\nsystem. By taking a long enough sample, however, we should be able to\nget arbitrarily accurate profiling information.\n\nLow Level Design\n----------------\n\nAt a low level, we do this sampling using ``sys._current_frames``. As\nsuggested by the leading underscore, this system function may be a bit\nless robust. Indeed, the documentation says \"This function should be\nused for specialized purposes only.\" Hopefully the core python\ndevelopers will not make major changes to such a useful function.\n\nIn any case, the most interesting class is the ``Sampler`` class in the\n``ox_profile.core.sampling`` module. This class has a run method which\ndoes the following:\n\n1. Uses ``sys.setswitchinterval`` to try and prevent a thread context\n   switch.\n2. Calls ``sys._current_frames`` to sample what the python interpreter\n   is doing.\n3. Updates a simple in-memory database of what functions are running.\n\nIn principle, you could just use the Sampler via something like\n\n::\n\n        >>> from ox_profile.core import sampling, recording\n        >>> sampler = sampling.Sampler(recording.CountingRecorder())\n        >>> def foo():\n        ...     sampler.run()\n        ...     return 'done'\n        ... \n        >>> foo()\n\nThe above would have the sampler take a snapshot of the stack frames\nwhen the ``foo`` function is run. Of course, this isn't very useful by\nitself because it just tells you that ``foo`` is being run. It could be\nuseful if there were other threads which were running because the\nsampler would tell you what stack frame those threads were in.\n\nIn principle, you could just call the ``Sampler.run`` method to track\nother threads but that still isn't very convenient. To make things easy\nto use, we provide the ``SimpleLauncher`` class in the\n``ox_profile.core.launchers`` module as shown in the Usage section. The\n``SimpleLauncher`` basically does the following:\n\n1. Creates an instance of the ``Sampler`` class with reasonable\n   defaults.\n2. Initializes itself as a daemon thread and starts.\n3. Pauses itself so the thread does nothing so as to not load the\n   system.\n4. Provides an ``unpause`` method you can use when you want to turn on\n   profiling.\n5. Provides a ``pause`` method if you want to turn off profiling.\n\nIn principle, you don't need much beyond the ``Sampler`` but the\n``SimpleLauncher`` makes it easier to launch a ``Sampler`` in a separate\nthread.\n\nKnown Issues\n============\n\nGranularity\n-----------\n\nWith statistical profiling, we need to ask the thread to sleep for some\nsmall amount so that it does not overuse CPU resources. Sadly, the\nminimum sleep time (using either ``time.sleep`` or ``wait`` on a thread\nevent) is on the order of 1--10 milliseconds on most operating systems.\nThis means that you can not efficiently do statistical profiling at a\ngranularity finer than about 1 millisecond.\n\nThus you should consider statistical profiling as a tool to find the\nrelatively slow issues in production and not a tool for optimizing\nissues faster than about a millisecond.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/emin63/ox_profile", "keywords": "statistical profiling", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ox_profile", "package_url": "https://pypi.org/project/ox_profile/", "platform": "", "project_url": "https://pypi.org/project/ox_profile/", "project_urls": {"Homepage": "http://github.com/emin63/ox_profile"}, "release_url": "https://pypi.org/project/ox_profile/0.2.6/", "requires_dist": null, "requires_python": "", "summary": "Tools for statistical profiling.", "version": "0.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>The <tt>ox_profile</tt> package provides a python framework for statistical\nprofiling. If you are using <tt>Flask</tt>, then <tt>ox_profile</tt> provides a\nflask blueprint so that you can start/stop/analyze profiling from within\nyour application. You can also run the profiler stand-alone without\n<tt>Flask</tt> as well.</p>\n<p>To learn more, you can browse the overview slides in <a href=\"https://github.com/emin63/ox_profile/blob/master/docs/overview_slides.pdf\" rel=\"nofollow\">PDF\nform</a>\nor read more details below.</p>\n</div>\n<div id=\"why-statistical-profiling-and-why-ox-profile\">\n<h2>Why statistical profiling (and why ox_profile)?</h2>\n<p>Python contains many profilers which instrument your code and give you\nexact results. A main benefit here is you know <em>exactly</em> what your\nprogram is doing. The disadvantage is that there can be significant\noverhead. With a statistical profiler such as <tt>ox_profile</tt>, we sample\na running program periodically to get a sense of what the program is\ndoing with an overhead that can be tuned as desired.</p>\n<p>One main use case for <tt>ox_profile</tt> specifically (and statistical\nprofiling in general) is that you can apply it to a production server to\nsee how things work \u201cin the wild\u201d.</p>\n<p>There are other statistical profilers out there for python (such as\nstatprof), which are pretty good and may be better for your needs than\n<tt>ox_profile</tt>. So why would you consider <tt>ox_profile</tt>? Some possible\nreasons include:</p>\n<ol>\n<li>Works on non-UNIX systems (e.g., works on Windows).<ul>\n<li>Many other statistical profilers use various excellent features of\nLINUX or UNIX while <tt>ox_profile</tt> only really relies on the\npython <tt>sys._current_frames</tt> method.</li>\n</ul>\n</li>\n<li>Simple to understand.<ul>\n<li>The code for <tt>ox_profile</tt> is fairly simple. The main work is\nreally inside <tt>ox_profile.core.sampling.Sampler</tt> so it is easy\nto reason about or modify if you need slightly different\nprofiling.</li>\n</ul>\n</li>\n<li>Flask Blueprint provided.<ul>\n<li>If you are using Flask, then you can register the <tt>ox_profile</tt>\nblueprint and easily get statistical profiling in your flask app.</li>\n</ul>\n</li>\n</ol>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"stand-alone\">\n<h3>Stand alone</h3>\n<p>You can install <tt>ox_profile</tt> using pip via something like</p>\n<pre>$ pip install ox_profile\n</pre>\n<p>The simplest way to run the profiler is by starting the launcher,\ncalling some functions, and the printing the profiled data via something\nlike:</p>\n<pre>&gt;&gt;&gt; from ox_profile.core.launchers import SimpleLauncher\n&gt;&gt;&gt; profiler = SimpleLauncher.launch()      # Create and start a profiler.\n&gt;&gt;&gt; # call some functions\n&gt;&gt;&gt; print(profiler.show())                  # Print current results in preformated way.\n&gt;&gt;&gt; profiler.cancel()                       # Turns off the profiler for good.\n</pre>\n<p>Often you may want a slightly more sophisticated use case where you can\npause and unpause the profiler and get more details about its status as\nshown below:</p>\n<pre>&gt;&gt;&gt; from ox_profile.core import launchers\n&gt;&gt;&gt; profiler = launchers.SimpleLauncher()    # Create an instance of launcher to be your profiler\n&gt;&gt;&gt; profiler.start()                         # The profiler is a thread so we need to call start\n&gt;&gt;&gt; profiler.unpause()                       # The profiler starts out paused so we unpause it\n&gt;&gt;&gt; # call functions or start main program\n&gt;&gt;&gt; profiler.pause()                         # You can pause if done profiling or leave running\n&gt;&gt;&gt; query, total_records = profiler.query()  # Query for what the profiler has found\n&gt;&gt;&gt; info = ['%s: %s' % (i.name, i.hits) for i in query]\n&gt;&gt;&gt; print('Items in query:\\n  - %s' % (('\\n  - '.join(info))))\n&gt;&gt;&gt; profiler.cancel()                        # This turns off the profiler for good\n</pre>\n</div>\n<div id=\"with-flask\">\n<h3>With Flask</h3>\n<p>If you are using the python flask framework and have installed\n<tt>ox_profile</tt> (e.g., with <tt>pip install ox_profile</tt>) then you can\nsimply do the following in the appropriate place after initializing your\napp:</p>\n<pre>from ox_profile.ui.flask.views import OX_PROF_BP\napp.register_blueprint(OX_PROF_BP)\napp.config['OX_PROF_USERS'] = {&lt;admin_user_1&gt;, &lt;admin_user_2&gt;, ...}\n</pre>\n<p>where <tt>&lt;admin_user_&gt;</tt>, etc. are strings referring to users who are\nallowed to access <tt>ox_profile</tt>. By default, we check\n<tt>current_user.name</tt>, but you can set the <tt>OX_PROF_USERNAME_FIELD</tt> in\n<tt>app.config</tt> to something else (e.g., <tt>'email'</tt> to choose which\nfield of <tt>current_user</tt> is checked against the sequence of strings in\n<tt>OX_PROF_USERS</tt>.</p>\n<p>Pointing your browser to the route <tt>/ox_profile/status</tt> will then show\nyou the profiling status. By default, <tt>ox_profile</tt> starts out paused\nso that it will not incur any overhead for your app. Go to the\n<tt>/ox_profile/unpause</tt> route to unpause and begin profiling so that\n<tt>/ox_profile/status</tt> shows something interesting.</p>\n</div>\n</div>\n<div id=\"output\">\n<h2>Output</h2>\n<p>Currently <tt>ox_profile</tt> is in alpha mode and so the output is fairly\nbare bones. When you look at the results of calling the <tt>query</tt> method\nof an instance of <tt>SimpleLauncher</tt> in stand alone mode or at the\n<tt>/ox_profile/status</tt> route when running with flask, what you get is a\nraw list of each function your program has called along with how many\ntimes that function was called in our sampling.</p>\n</div>\n<div id=\"design\">\n<h2>Design</h2>\n<div id=\"high-level-design\">\n<h3>High Level Design</h3>\n<p>Python offers a number of ways to get profiling information. In addition\nto high-level profiling tools such as in the <tt>profile</tt> package, there\nare specialized functions like <tt>sys.settrace</tt> and <tt>sys.setprofile</tt>.\nThese are used for deterministic profiling and relatively robust but\nhave some overhead as they are invoked on each function call.</p>\n<p>At a high level, we want a way to get a sample of what the python\ninterpreter is doing at any give instance. The sampling approach has the\nadvantage that by turning the sampling interval low enough, we can add\narbitrarily low overhead and make profiling feasible in a production\nsystem. By taking a long enough sample, however, we should be able to\nget arbitrarily accurate profiling information.</p>\n</div>\n<div id=\"low-level-design\">\n<h3>Low Level Design</h3>\n<p>At a low level, we do this sampling using <tt>sys._current_frames</tt>. As\nsuggested by the leading underscore, this system function may be a bit\nless robust. Indeed, the documentation says \u201cThis function should be\nused for specialized purposes only.\u201d Hopefully the core python\ndevelopers will not make major changes to such a useful function.</p>\n<p>In any case, the most interesting class is the <tt>Sampler</tt> class in the\n<tt>ox_profile.core.sampling</tt> module. This class has a run method which\ndoes the following:</p>\n<ol>\n<li>Uses <tt>sys.setswitchinterval</tt> to try and prevent a thread context\nswitch.</li>\n<li>Calls <tt>sys._current_frames</tt> to sample what the python interpreter\nis doing.</li>\n<li>Updates a simple in-memory database of what functions are running.</li>\n</ol>\n<p>In principle, you could just use the Sampler via something like</p>\n<pre>&gt;&gt;&gt; from ox_profile.core import sampling, recording\n&gt;&gt;&gt; sampler = sampling.Sampler(recording.CountingRecorder())\n&gt;&gt;&gt; def foo():\n...     sampler.run()\n...     return 'done'\n...\n&gt;&gt;&gt; foo()\n</pre>\n<p>The above would have the sampler take a snapshot of the stack frames\nwhen the <tt>foo</tt> function is run. Of course, this isn\u2019t very useful by\nitself because it just tells you that <tt>foo</tt> is being run. It could be\nuseful if there were other threads which were running because the\nsampler would tell you what stack frame those threads were in.</p>\n<p>In principle, you could just call the <tt>Sampler.run</tt> method to track\nother threads but that still isn\u2019t very convenient. To make things easy\nto use, we provide the <tt>SimpleLauncher</tt> class in the\n<tt>ox_profile.core.launchers</tt> module as shown in the Usage section. The\n<tt>SimpleLauncher</tt> basically does the following:</p>\n<ol>\n<li>Creates an instance of the <tt>Sampler</tt> class with reasonable\ndefaults.</li>\n<li>Initializes itself as a daemon thread and starts.</li>\n<li>Pauses itself so the thread does nothing so as to not load the\nsystem.</li>\n<li>Provides an <tt>unpause</tt> method you can use when you want to turn on\nprofiling.</li>\n<li>Provides a <tt>pause</tt> method if you want to turn off profiling.</li>\n</ol>\n<p>In principle, you don\u2019t need much beyond the <tt>Sampler</tt> but the\n<tt>SimpleLauncher</tt> makes it easier to launch a <tt>Sampler</tt> in a separate\nthread.</p>\n</div>\n</div>\n<div id=\"known-issues\">\n<h2>Known Issues</h2>\n<h2 id=\"granularity\"><span class=\"section-subtitle\">Granularity</span></h2>\n<p>With statistical profiling, we need to ask the thread to sleep for some\nsmall amount so that it does not overuse CPU resources. Sadly, the\nminimum sleep time (using either <tt>time.sleep</tt> or <tt>wait</tt> on a thread\nevent) is on the order of 1\u201310 milliseconds on most operating systems.\nThis means that you can not efficiently do statistical profiling at a\ngranularity finer than about 1 millisecond.</p>\n<p>Thus you should consider statistical profiling as a tool to find the\nrelatively slow issues in production and not a tool for optimizing\nissues faster than about a millisecond.</p>\n</div>\n\n          </div>"}, "last_serial": 6353545, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1da2112f2bda444ab4553cacdf129b3f", "sha256": "e234ae6820d06923ced5f0821bf61d7998cc2ef01d82117b5b6168410fb2a02d"}, "downloads": -1, "filename": "ox_profile-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1da2112f2bda444ab4553cacdf129b3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3528, "upload_time": "2017-09-20T18:24:05", "upload_time_iso_8601": "2017-09-20T18:24:05.349456Z", "url": "https://files.pythonhosted.org/packages/e0/88/870282c104ab552b07c77c2b6e8bb2ab801d011ff55e2abd2c1a503ee163/ox_profile-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0172c1e25b3e2f5b1c6ab1e449aed378", "sha256": "87ae77ab486d0d43e2b861b2ea12dd5c1aab8437c397cb366cd5a9773c50672e"}, "downloads": -1, "filename": "ox_profile-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0172c1e25b3e2f5b1c6ab1e449aed378", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3430, "upload_time": "2017-09-20T18:24:58", "upload_time_iso_8601": "2017-09-20T18:24:58.552873Z", "url": "https://files.pythonhosted.org/packages/e8/81/51a36a26cf51a72754fc3fbe06b725c5842545810eccc133ed0b6c5f3901/ox_profile-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "240a7630cdc3ec5ede997e4b05199271", "sha256": "532fc34c02a2d0e531c473cc66aa637b213b4f3e110862ecbb935a7361c3cbe7"}, "downloads": -1, "filename": "ox_profile-0.1.10.tar.gz", "has_sig": false, "md5_digest": "240a7630cdc3ec5ede997e4b05199271", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12522, "upload_time": "2017-10-12T01:02:14", "upload_time_iso_8601": "2017-10-12T01:02:14.300204Z", "url": "https://files.pythonhosted.org/packages/ca/60/3deb5127e938958fba392b0b86bb7444b1095a9e26960f969e04ce11a90d/ox_profile-0.1.10.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6bd9d45874ec1a6adaa98700c33ef95d", "sha256": "82ba20dd8af9592a165a2494992a8c1fd9de24dac5744d335803f0a9ccb0b435"}, "downloads": -1, "filename": "ox_profile-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6bd9d45874ec1a6adaa98700c33ef95d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5170, "upload_time": "2017-09-20T18:49:00", "upload_time_iso_8601": "2017-09-20T18:49:00.151622Z", "url": "https://files.pythonhosted.org/packages/83/bf/459068d9e655357f1e2a6bdeec4173915a3e9ba732c296a6b422ac55a0bf/ox_profile-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "0789a1dc3228b679479249871515dd8d", "sha256": "dbd01a374455d39527541ecc26d1d5eb3564bdec3106d84ce9b574c160036830"}, "downloads": -1, "filename": "ox_profile-0.1.3.tar.gz", "has_sig": false, "md5_digest": "0789a1dc3228b679479249871515dd8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9305, "upload_time": "2017-09-20T19:07:44", "upload_time_iso_8601": "2017-09-20T19:07:44.314200Z", "url": "https://files.pythonhosted.org/packages/60/74/488f2a1313913ccd95fda753e169d0f358a352beeb86be3c0a23a762fad7/ox_profile-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "8ce8d8b8078ebf53819ef622240a8434", "sha256": "2eff991e1e428517fd7fd9e4f5d2fff04a7e6ab7c1b0047b47920e9bf80fbecd"}, "downloads": -1, "filename": "ox_profile-0.1.4.tar.gz", "has_sig": false, "md5_digest": "8ce8d8b8078ebf53819ef622240a8434", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9311, "upload_time": "2017-09-22T21:14:48", "upload_time_iso_8601": "2017-09-22T21:14:48.062248Z", "url": "https://files.pythonhosted.org/packages/fd/09/3df0e9235ad658c79dfeb752f5092987aa789a140f72724b32682f3d61ce/ox_profile-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "13435f5e9d304c9e6680c1feb971f115", "sha256": "20d31372ee154dd2c012e1a470763edaf2047a67d8b0748b81126de7d66c2ada"}, "downloads": -1, "filename": "ox_profile-0.1.5.tar.gz", "has_sig": false, "md5_digest": "13435f5e9d304c9e6680c1feb971f115", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10644, "upload_time": "2017-09-22T21:22:29", "upload_time_iso_8601": "2017-09-22T21:22:29.572416Z", "url": "https://files.pythonhosted.org/packages/e0/2b/8a6b62908f8f47eaa851ed94850cc92bb90f0d1db5348405d121c9461826/ox_profile-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "11b8a0272ff3e4131768d946b7af743d", "sha256": "166c1229ac45ab54db9f7e7a94ea826f2d384bc706e1f0cc5af17da32f481018"}, "downloads": -1, "filename": "ox_profile-0.1.6.tar.gz", "has_sig": false, "md5_digest": "11b8a0272ff3e4131768d946b7af743d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10660, "upload_time": "2017-09-22T21:28:39", "upload_time_iso_8601": "2017-09-22T21:28:39.251398Z", "url": "https://files.pythonhosted.org/packages/47/cc/6d2b7aafb756aa5515ce927e333b6acab7e11dde08de5e79aaa49f664de6/ox_profile-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "3ebbafc2b7a42f35d4d5af0cf0c86348", "sha256": "53d6906e668e64bbbbb259d49298685b9b60db61b15ed4931e76122e9bb1d500"}, "downloads": -1, "filename": "ox_profile-0.1.7.tar.gz", "has_sig": false, "md5_digest": "3ebbafc2b7a42f35d4d5af0cf0c86348", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10718, "upload_time": "2017-10-10T19:52:13", "upload_time_iso_8601": "2017-10-10T19:52:13.968901Z", "url": "https://files.pythonhosted.org/packages/f4/e4/207f51cddcb44a01846ea1600c7e6cbfbd043a11e3ddd59de8ffdc3f0c59/ox_profile-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "9702ae7ace45658c497de2b2e1017962", "sha256": "5364f2deca30abeb252b819aff7b8cf397bbc5fb03e8dc46c85320688b8961eb"}, "downloads": -1, "filename": "ox_profile-0.1.8.tar.gz", "has_sig": false, "md5_digest": "9702ae7ace45658c497de2b2e1017962", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10909, "upload_time": "2017-10-11T03:12:29", "upload_time_iso_8601": "2017-10-11T03:12:29.538543Z", "url": "https://files.pythonhosted.org/packages/33/f0/83c86f30f9c4bdcaff0e6cd74082d2cc514fb9e197e03350a3aedda139ca/ox_profile-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "1897d317a00d4d9ae07831594815537a", "sha256": "1aa4705dd7bdf4c354f7261a24ff99f5de6941e26b69d93dc6f69fcc3e62309f"}, "downloads": -1, "filename": "ox_profile-0.1.9.tar.gz", "has_sig": false, "md5_digest": "1897d317a00d4d9ae07831594815537a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11056, "upload_time": "2017-10-11T03:46:29", "upload_time_iso_8601": "2017-10-11T03:46:29.737392Z", "url": "https://files.pythonhosted.org/packages/ff/38/add2128c9a6f98000890512b62efe97f00bc16e031aef1ae69bc5de3490c/ox_profile-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "fd88dc507d1cfbd68c5e263ced2684f2", "sha256": "2178655f79f1c45ed07e90c8c358a446abcbd31c0a996d30286a8f0b7cf54a61"}, "downloads": -1, "filename": "ox_profile-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fd88dc507d1cfbd68c5e263ced2684f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12548, "upload_time": "2018-06-09T01:16:19", "upload_time_iso_8601": "2018-06-09T01:16:19.144430Z", "url": "https://files.pythonhosted.org/packages/e3/60/abd2e50627d2386ee2e6e0741551783b0e56374b2f64120589f7357e671d/ox_profile-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "fcbfd74f327f9a73bea299796e4d6916", "sha256": "a3fe4af557ac9b4104f4044c184e02309273264e7a6ae2f4558f61649b0d80b9"}, "downloads": -1, "filename": "ox_profile-0.2.1.tar.gz", "has_sig": false, "md5_digest": "fcbfd74f327f9a73bea299796e4d6916", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15975, "upload_time": "2018-10-12T20:10:00", "upload_time_iso_8601": "2018-10-12T20:10:00.201699Z", "url": "https://files.pythonhosted.org/packages/11/cc/94af77d3d1dcd89de9d271a4f544ff3d8edbc9cedffe7beffd6faf40e7ff/ox_profile-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "4625d4b04ec5a9a291117102c5046dad", "sha256": "956184d6155ef7e6a653b81e42a1d463114de93fc1116d36f055a5ac36e0ebc1"}, "downloads": -1, "filename": "ox_profile-0.2.2.tar.gz", "has_sig": false, "md5_digest": "4625d4b04ec5a9a291117102c5046dad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17369, "upload_time": "2018-10-12T20:22:28", "upload_time_iso_8601": "2018-10-12T20:22:28.277336Z", "url": "https://files.pythonhosted.org/packages/97/02/d710242f9f681da516fa4c15316e98cde160ac343d38f7ab708c8b355720/ox_profile-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "84c7bfb8026f3cca0885156e63d73cc9", "sha256": "b0466ea3c672b1f4232a5d75e3d0d2a0be24f0c4df82ebe61761b333085ee786"}, "downloads": -1, "filename": "ox_profile-0.2.3.tar.gz", "has_sig": false, "md5_digest": "84c7bfb8026f3cca0885156e63d73cc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18758, "upload_time": "2018-10-12T20:40:06", "upload_time_iso_8601": "2018-10-12T20:40:06.183530Z", "url": "https://files.pythonhosted.org/packages/49/b3/7647f5e4803da2686a6614104135108e96cd80a67136dfe20425c53619b9/ox_profile-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "7624ffbeb6192d34f756bc9ac35ecb62", "sha256": "10e9cfdfb7d51c241b33fd3314123aeba10103fe41a22d958386f9f3ac1fb5da"}, "downloads": -1, "filename": "ox_profile-0.2.4.tar.gz", "has_sig": false, "md5_digest": "7624ffbeb6192d34f756bc9ac35ecb62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18742, "upload_time": "2018-10-12T20:42:28", "upload_time_iso_8601": "2018-10-12T20:42:28.423212Z", "url": "https://files.pythonhosted.org/packages/20/00/3c6560290d4a125b68e0dacb2176468c6fe3634bf460e6dca4099d710feb/ox_profile-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "5daba18add381c4c6d087c1c7253e2f1", "sha256": "2f44ec959011efc9316319c1874d2dc36014136547721631cb311514a4b2d660"}, "downloads": -1, "filename": "ox_profile-0.2.5.tar.gz", "has_sig": false, "md5_digest": "5daba18add381c4c6d087c1c7253e2f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20870, "upload_time": "2019-07-09T02:22:19", "upload_time_iso_8601": "2019-07-09T02:22:19.333451Z", "url": "https://files.pythonhosted.org/packages/f4/45/350688929fc5a60f1f5074410445f19db3818eba68fee8f5e952e5ba97de/ox_profile-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "602c21c9aaa97077e2fd11511e7c5494", "sha256": "74930f45cfcb0da807d557707ad0fcae9fd5fb68e1b712e0676245b78de69a8b"}, "downloads": -1, "filename": "ox_profile-0.2.6.tar.gz", "has_sig": false, "md5_digest": "602c21c9aaa97077e2fd11511e7c5494", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19867, "upload_time": "2019-12-24T02:50:59", "upload_time_iso_8601": "2019-12-24T02:50:59.905469Z", "url": "https://files.pythonhosted.org/packages/ce/fb/a8b76ea8bae73886358ebba090bd2373955b92f75adcce5634553673750a/ox_profile-0.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "602c21c9aaa97077e2fd11511e7c5494", "sha256": "74930f45cfcb0da807d557707ad0fcae9fd5fb68e1b712e0676245b78de69a8b"}, "downloads": -1, "filename": "ox_profile-0.2.6.tar.gz", "has_sig": false, "md5_digest": "602c21c9aaa97077e2fd11511e7c5494", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19867, "upload_time": "2019-12-24T02:50:59", "upload_time_iso_8601": "2019-12-24T02:50:59.905469Z", "url": "https://files.pythonhosted.org/packages/ce/fb/a8b76ea8bae73886358ebba090bd2373955b92f75adcce5634553673750a/ox_profile-0.2.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:27 2020"}