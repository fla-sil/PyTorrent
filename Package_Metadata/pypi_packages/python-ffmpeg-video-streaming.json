{"info": {"author": "Amin Yazdanpanah", "author_email": "contact@aminyazdanpanah.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# \u00f0\u0178\u201c\u00bc Python FFmpeg Video Streaming\n[![Build Status](https://travis-ci.org/aminyazdanpanah/python-ffmpeg-video-streaming.svg?branch=master)](https://travis-ci.org/aminyazdanpanah/python-ffmpeg-video-streaming)\n[![Build status](https://ci.appveyor.com/api/projects/status/qy712tou5pvq629y?svg=true)](https://ci.appveyor.com/project/aminyazdanpanah/python-ffmpeg-video-streaming)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/aminyazdanpanah/python-ffmpeg-video-streaming/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/aminyazdanpanah/python-ffmpeg-video-streaming/?branch=master)\n[![Downloads](https://pepy.tech/badge/python-ffmpeg-video-streaming)](https://pepy.tech/project/python-ffmpeg-video-streaming)\n[![PyPI version](https://badge.fury.io/py/python-ffmpeg-video-streaming.svg)](https://badge.fury.io/py/python-ffmpeg-video-streaming)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/LICENSE)\n\n## Overview\nThis package uses the **[FFmpeg](https://ffmpeg.org)** to package media content for online streaming such as DASH and HLS. You can also use **[DRM](https://en.wikipedia.org/wiki/Digital_rights_management)** for HLS packaging. There are several options to open a file from a cloud and save files to clouds as well.\n- **[Full Documentation](https://video.aminyazdanpanah.com/python/)** is available describing all features and components.\n- In this version(>=v0.1.0) all codes are rewritten from scratch. If you find any bugs in the library, please **[file an issue](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/issues)**. **[Pull requests](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/pulls)** are also welcome.\n\n**Contents**\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [Quickstart](#quickstart)\n  - [Opening a Resource](#opening-a-resource)\n  - [DASH](#dash)\n  - [HLS](#hls)\n    - [Encryption(DRM)](#encryptiondrm)\n  - [Transcoding](#transcoding)\n  - [Saving Files](#saving-files)\n  - [Metadata](#metadata)\n  - [Conversion](#conversion)\n- [Several Open Source Players](#several-open-source-players)\n- [Contributing and Reporting Bugs](#contributing-and-reporting-bugs)\n- [Credits](#credits)\n- [License](#license)\n\n## Requirements\n1. This version of the package is only compatible with **[Python 3.6](https://www.python.org/downloads/)** or higher.\n\n2. To use this package, you need to **[install the FFmpeg](https://ffmpeg.org/download.html)**. You will need both FFmpeg and FFProbe binaries to use it.\n\n## Installation\nInstall the package via **[pip](https://pypi.org/project/pip/)**:\n``` bash\npip install python-ffmpeg-video-streaming\n```\nAlternatively, add the dependency directly to your `requirements.txt` file:\n``` txt\npython-ffmpeg-video-streaming>=0.1\n```\n\n## Quickstart\nFirst of all, you need to import the package in your code:\n```python\nimport ffmpeg_streaming\n```\n\n### Opening a Resource\nThere are several ways to open a resource.\n\n#### 1. From a FFmpeg supported resource\nYou can pass a local path of video(or a supported resource) to the `input` method:\n```python\nvideo = ffmpeg_streaming.input('/var/media/video.mp4')\n```\n\nSee **[FFmpeg Protocols Documentation](https://ffmpeg.org/ffmpeg-protocols.html)** for more information about supported resources such as http, ftp, and etc.\n\n**For example:** \n```python\nvideo = ffmpeg_streaming.input('https://www.aminyazdanpanah.com/?\"PATH TO A VIDEO FILE\" or \"PATH TO A LIVE HTTP STREAM\"')\n```\n\n#### 2. From Clouds\nYou can open a file from a cloud by passing an instance of a cloud configuration to the `input` method. \n\n```python\nfrom ffmpeg_streaming import S3\ns3 = S3(aws_access_key_id='YOUR_KEY_ID', aws_secret_access_key='YOUR_KEY_SECRET', region_name='YOUR_REGION')\n\nvideo = ffmpeg_streaming.input(s3, bucket_name=\"bucket-name\", key=\"video.mp4\")\n```\nVisit **[this page](https://video.aminyazdanpanah.com/python/start/clouds?r=open)** to see some examples of opening a file from **[Amazon S3](https://aws.amazon.com/s3)**, **[Google Cloud Storage](https://console.cloud.google.com/storage)**, **[Microsoft Azure Storage](https://azure.microsoft.com/en-us/features/storage-explorer/)**, and a custom cloud.\n\n#### 3. Capture Webcam or Screen (Live Streaming)\nYou can pass a name of the supported, connected capture device(i.e. a name of webcam, camera, screen and etc) to the `input` method to stream a live media over network from your connected device. \n\n ```python\ncapture = ffmpeg_streaming.input('CAMERA NAME OR SCREEN NAME', capture=True)\n ```\nTo list the supported, connected capture devices, see **[FFmpeg Capture Webcam](https://trac.ffmpeg.org/wiki/Capture/Webcam)** and **[FFmpeg Capture Desktop](https://trac.ffmpeg.org/wiki/Capture/Desktop)**.\n\n\n### DASH\n**[Dynamic Adaptive Streaming over HTTP (DASH)](http://dashif.org/)**, also known as MPEG-DASH, is an adaptive bitrate streaming technique that enables high quality streaming of media content over the Internet delivered from conventional HTTP web servers. [Learn more](https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP)\n\nCreate DASH files:\n```python\nfrom ffmpeg_streaming import Formats\n\ndash = video.dash(Formats.h264())\ndash.auto_generate_representations()\ndash.output('/var/media/dash.mpd')\n```\nGenerate representations manually:\n```python\nfrom ffmpeg_streaming import Formats, Bitrate, Representation, Size\n\n_144p  = Representation(Size(256, 144), Bitrate(95 * 1024, 64 * 1024))\n_240p  = Representation(Size(426, 240), Bitrate(150 * 1024, 94 * 1024))\n_360p  = Representation(Size(640, 360), Bitrate(276 * 1024, 128 * 1024))\n_480p  = Representation(Size(854, 480), Bitrate(750 * 1024, 192 * 1024))\n_720p  = Representation(Size(1280, 720), Bitrate(2048 * 1024, 320 * 1024))\n_1080p = Representation(Size(1920, 1080), Bitrate(4096 * 1024, 320 * 1024))\n_2k    = Representation(Size(2560, 1440), Bitrate(6144 * 1024, 320 * 1024))\n_4k    = Representation(Size(3840, 2160), Bitrate(17408 * 1024, 320 * 1024))\n\ndash = video.dash(Formats.h264())\ndash.representations(_144p, _240p, _360p, _480p, _720p, _1080p, _2k, _4k)\ndash.output('/var/media/dash.mpd')\n```\nSee **[DASH section](https://video.aminyazdanpanah.com/python/start?r=dash#dash)** in the documentation, for more examples.\n\n### HLS\n**[HTTP Live Streaming (also known as HLS)](https://developer.apple.com/streaming/)** is an HTTP-based adaptive bitrate streaming communications protocol implemented by Apple Inc. as part of its QuickTime, Safari, OS X, and iOS software. Client implementations are also available in Microsoft Edge, Firefox and some versions of Google Chrome. Support is widespread in streaming media servers. [Learn more](https://en.wikipedia.org/wiki/HTTP_Live_Streaming)\n\nCreate HLS files:\n```python\nfrom ffmpeg_streaming import Formats\n\nhls = video.hls(Formats.h264())\nhls.auto_generate_representations()\nhls.output('/var/media/hls.m3u8')\n```\nGenerate representations manually:\n```python\nfrom ffmpeg_streaming import Formats, Bitrate, Representation, Size\n\n_360p  = Representation(Size(640, 360), Bitrate(276 * 1024, 128 * 1024))\n_480p  = Representation(Size(854, 480), Bitrate(750 * 1024, 192 * 1024))\n_720p  = Representation(Size(1280, 720), Bitrate(2048 * 1024, 320 * 1024))\n\nhls = video.hls(Formats.h264())\nhls.representations(_360p, _480p, _720p)\nhls.output('/var/media/hls.m3u8')\n```\nSee **[HLS section](https://video.aminyazdanpanah.com/python/start?r=hls#hls)** in the documentation, for more examples such as Fragmented MP4, live from camera/screen and so on.\n\n#### Encryption(DRM)\nThe encryption process requires some kind of secret (key) together with an encryption algorithm. HLS uses AES in cipher block chaining (CBC) mode. This means each block is encrypted using the ciphertext of the preceding block. [Learn more](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation)\n\nYou must specify a path to save a random key to your local machine and also a URL(or a path) to access the key on your website(the key you will save must be accessible from your website). You must pass both these parameters to the `encryption` method:\n\n##### Single Key\nThe following code generates a key for all segment files.\n\n```python\nfrom ffmpeg_streaming import Formats\n\n#A path you want to save a random key to your local machine\nsave_to = '/home/public_html/\"PATH TO THE KEY DIRECTORY\"/key'\n\n#A URL (or a path) to access the key on your website\nurl = 'https://www.aminyazdanpanah.com/?\"PATH TO THE KEY DIRECTORY\"/key'\n# or url = '/\"PATH TO THE KEY DIRECTORY\"/key';\n\nhls = video.hls(Formats.h264())\nhls.encryption(save_to, url)\nhls.auto_generate_representations()\nhls.output('/var/media/hls.m3u8')\n```\n\n##### Key Rotation\nAn integer as a \"key rotation period\" can also be passed to the `encryption` method (i.e. `encryption(save_to, url, 10)`) to use a different key for each set of segments, rotating to a new key after this many segments. For example, if 10 segment files have been generated then it will generate a new key. If you set this value to **`1`**, each segment file will be encrypted with a new encryption key. This can improve security and allows for more flexibility. \n\nSee **[the example](https://video.aminyazdanpanah.com/python/start?r=enc-hls#hls-encryption)** for more information.\n\n**IMPORTANT:** It is very important to protect your key(s) on your website. For example, you can use a token(using a Get or Post HTTP method) to check if the user is eligible to access to the key or not. You can also use a session(or cookie) on your website to restrict access to the key(s)(**It is highly recommended**).    \n\n##### DRM\nHowever FFmpeg supports AES encryption for HLS packaging, which you can encrypt your content, it is not a full **[DRM](https://en.wikipedia.org/wiki/Digital_rights_management)** solution. If you want to use a full DRM solution, I recommend trying **[FairPlay Streaming](https://developer.apple.com/streaming/fps/)** solution which then securely exchange keys, and protect playback on devices.\n\n**Besides [Apple's FairPlay](https://developer.apple.com/streaming/fps/)** DRM system, you can also use other DRM systems such as **[Microsoft's PlayReady](https://www.microsoft.com/playready/overview/)** and **[Google's Widevine](https://www.widevine.com/)**.\n\n### Transcoding\nYou can get realtime information about the transcoding using the following code. \n```python\nfrom ffmpeg_streaming import Formats\nimport sys\n\ndef monitor(ffmpeg, duration, time_):\n    per = round(time_ / duration * 100)\n    sys.stdout.write(\"\\rTranscoding...(%s%%) [%s%s]\" % (per, '#' * per, '-' * (100 - per)))\n    sys.stdout.flush()\n\nhls = video.hls(Formats.h264())\nhls.auto_generate_representations()\nhls.output('/var/media/hls.m3u8', monitor=monitor)\n```\n\n##### Output From a Terminal:\n![transcoding](https://github.com/aminyazdanpanah/aminyazdanpanah.github.io/blob/master/video-streaming/transcoding.gif?raw=true \"transcoding\" )\n\n### Saving Files\nThere are several ways to save files.\n\n#### 1. To a Local Path\nYou can pass a local path to the `output` method. If there is no directory, then the package will create it.\n```python\nfrom ffmpeg_streaming import Formats\n\ndash = video.dash(Formats.h264())\ndash.auto_generate_representations()\n\ndash.output('/var/media/dash.mpd')\n```\nIt can also be None. The default path to save files is the input directory.\n```python\nfrom ffmpeg_streaming import Formats\n\nhls = video.hls(Formats.h264())\nhls.auto_generate_representations()\n\nhls.output()\n```\n**NOTE:** If you open a file from a cloud and do not pass a path to save the file to your local machine, you will have to pass a local path to the `output` method.\n\n#### 2. To Clouds\nYou can save your files to a cloud by passing an instance of a `CloudManager` to the `output` method. \n\n```python\nfrom ffmpeg_streaming import  S3, CloudManager\n\ns3 = S3(aws_access_key_id='YOUR_KEY_ID', aws_secret_access_key='YOUR_KEY_SECRET', region_name='YOUR_REGION')\nsave_to_s3 = CloudManager().add(s3, bucket_name=\"bucket-name\")\n\nhls.output(clouds=save_to_s3)\n``` \nA path can also be passed to save a copy of files to your local machine.\n```python\nhls.output('/var/media/hls.m3u8', clouds=save_to_s3)\n```\n\nVisit **[this page](https://video.aminyazdanpanah.com/python/start/clouds?r=save)** to see some examples of saving files to **[Amazon S3](https://aws.amazon.com/s3)**, **[Google Cloud Storage](https://console.cloud.google.com/storage)**, **[Microsoft Azure Storage](https://azure.microsoft.com/en-us/features/storage-explorer/)**, and a custom cloud. \n\n**NOTE:** This option is only valid for **[VOD](https://en.wikipedia.org/wiki/Video_on_demand)** (it does not support live streaming).\n\n**Schema:** The relation is `one-to-many`\n\n<p align=\"center\"><img src=\"https://github.com/aminyazdanpanah/aminyazdanpanah.github.io/blob/master/video-streaming/video-streaming.gif?raw=true\" width=\"100%\"></p>\n\n#### 3. To a Server Instantly\nYou can pass a url(or a supported resource like `ftp`) to the `output` method to upload all the segments files to the HTTP server(or other protocols) using the HTTP PUT method, and update the manifest files every refresh times.\n\n```python\n# DASH\ndash.output('http://YOUR-WEBSITE.COM/live-stream/out.mpd')\n\n# HLS\nhls.output('http://YOUR-WEBSITE.COM/live-stream/out.m3u8')\n```\n\n**NOTE:** In the HLS method, you must upload the master playlist to the server manually.\n\nSee **[FFmpeg Protocols Documentation](https://ffmpeg.org/ffmpeg-protocols.html)** for more information about supported resources.\n\n### Metadata\nYou can get information from the video file using the following code.\n```python\nfrom ffmpeg_streaming import FFProbe\n\nffprobe = FFProbe('/var/media/video.mp4')\n```\n\nSee **[the example](https://video.aminyazdanpanah.com/python/start?r=metadata#metadata)** for more information.\n\n### Conversion\nYou can convert your stream to a file or to another stream protocols. You should pass a manifest of the stream to the `input` method:\n\n#### 1. HLS To DASH\n```python\nfrom ffmpeg_streaming import Formats, Bitrate, Representation, Size\n\nvideo = ffmpeg_streaming.input('https://www.aminyazdanpanah.com/?PATH/TO/HLS-MANIFEST.M3U8')\n\n_480p  = Representation(Size(854, 480), Bitrate(750 * 1024, 192 * 1024))\n\ndash = video.dash(Formats.h264())\ndash.representations(_480p)\ndash.output('/var/media/dash.mpd')\n```\n\n#### 2. DASH To HLS\n```python\nvideo = ffmpeg_streaming.input('https://www.aminyazdanpanah.com/?PATH/TO/DASH-MANIFEST.MPD')\n\nhls = video.hls(Formats.h264())\nhls.auto_generate_representations()\nhls.output('/var/media/hls.m3u8')\n```\n\n#### 3. Stream(DASH or HLS) To File\n```python\nvideo = ffmpeg_streaming.input('https://www.aminyazdanpanah.com/?PATH/TO/MANIFEST.MPD or M3U8')\n\nstream = video.stream2file(Formats.h264())\nstream.output('/var/media/new-video.mp4')\n```\n\n## Several Open Source Players\nYou can use these libraries to play your streams.\n- **WEB**\n    - DASH and HLS: \n        - **[Video.js 7](https://github.com/videojs/video.js) (Recommended) - [videojs-http-streaming (VHS)](https://github.com/videojs/http-streaming)**\n        - **[Plyr](https://github.com/sampotts/plyr)**\n        - **[DPlayer](https://github.com/MoePlayer/DPlayer)**\n        - **[MediaElement.js](https://github.com/mediaelement/mediaelement)**\n        - **[Clappr](https://github.com/clappr/clappr)**\n        - **[Shaka Player](https://github.com/google/shaka-player)**\n        - **[Flowplayer](https://github.com/flowplayer/flowplayer)**\n    - DASH:\n        - **[dash.js](https://github.com/Dash-Industry-Forum/dash.js)**\n    - HLS: \n        - **[hls.js](https://github.com/video-dev/hls.js)**\n- **Android**\n    - DASH and HLS: \n        - **[ExoPlayer](https://github.com/google/ExoPlayer)**\n- **IOS**\n    - DASH: \n        - **[MPEGDASH-iOS-Player](https://github.com/MPEGDASHPlayer/MPEGDASH-iOS-Player)**\n    - HLS: \n        - **[Player](https://github.com/piemonte/Player)**\n- **Windows, Linux, and macOS**\n    - DASH and HLS:\n        - **[FFmpeg(ffplay)](https://github.com/FFmpeg/FFmpeg)**\n        - **[VLC media player](https://github.com/videolan/vlc)**\n\n**NOTE-1:** You must pass a **link of the master playlist(manifest)**(i.e. `https://www.aminyazdanpanah.com/?\"PATH TO STREAM DIRECTORY\"/dash-stream.mpd` or `/PATH_TO_STREAM_DIRECTORY/hls-stream.m3u8` ) to these players.\n\n**NOTE-2:** If you save your stream content to a cloud(i.e. **[Amazon S3](https://aws.amazon.com/s3)**), the link of your playlist and other content **MUST BE PUBLIC**. \n\n**NOTE-3:** As you may know, **[IOS](https://www.apple.com/ios)** does not have native support for DASH. Although there are some libraries such as **[Viblast](https://github.com/Viblast/ios-player-sdk)** and **[MPEGDASH-iOS-Player](https://github.com/MPEGDASHPlayer/MPEGDASH-iOS-Player)** to support this technique, I have never tested them. So maybe som of them will not work correctly.\n\n\n## Contributing and Reporting Bugs\nI'd love your help in improving, correcting, adding to the specification. Please **[file an issue](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/issues)** or **[submit a pull request](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/pulls)**.\n- See **[Contributing File](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/CONTRIBUTING.md)** for more information.\n- If you discover a security vulnerability within this package, please see **[SECURITY File](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/SECURITY.md)** for more information.\n\n## Credits\n- **[Amin Yazdanpanah](https://www.aminyazdanpanah.com/?u=github.com/aminyazdanpanah/python-ffmpeg-video-streaming)**\n- **[All Contributors](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/graphs/contributors)**\n\n## License\nThe MIT License (MIT). See **[License File](https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/LICENSE)** for more information.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-ffmpeg-video-streaming", "package_url": "https://pypi.org/project/python-ffmpeg-video-streaming/", "platform": "", "project_url": "https://pypi.org/project/python-ffmpeg-video-streaming/", "project_urls": {"Bug Tracker": "https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/issues", "Documentation": "https://video.aminyazdanpanah.com/python", "Homepage": "https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming", "Source Code": "https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming"}, "release_url": "https://pypi.org/project/python-ffmpeg-video-streaming/0.1.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Package media content for online streaming(DASH and HLS) using ffmpeg", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\u00f0\u0178\u201c\u00bc Python FFmpeg Video Streaming</h1>\n<p><a href=\"https://travis-ci.org/aminyazdanpanah/python-ffmpeg-video-streaming\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97944bbf4962dea9a6f3aa9ed17b6b19290343ed/68747470733a2f2f7472617669732d63692e6f72672f616d696e79617a64616e70616e61682f707974686f6e2d66666d7065672d766964656f2d73747265616d696e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/aminyazdanpanah/python-ffmpeg-video-streaming\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2f8c94be7ffa692968492fd417880d4b008bca7/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7179373132746f7535707671363239793f7376673d74727565\"></a>\n<a href=\"https://scrutinizer-ci.com/g/aminyazdanpanah/python-ffmpeg-video-streaming/?branch=master\" rel=\"nofollow\"><img alt=\"Scrutinizer Code Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9050dc577f6d34228e602696d32018f4a60e5109/68747470733a2f2f7363727574696e697a65722d63692e636f6d2f672f616d696e79617a64616e70616e61682f707974686f6e2d66666d7065672d766964656f2d73747265616d696e672f6261646765732f7175616c6974792d73636f72652e706e673f623d6d6173746572\"></a>\n<a href=\"https://pepy.tech/project/python-ffmpeg-video-streaming\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e1b3e7f40a396b7c05fe025a0eec6609d890560/68747470733a2f2f706570792e746563682f62616467652f707974686f6e2d66666d7065672d766964656f2d73747265616d696e67\"></a>\n<a href=\"https://badge.fury.io/py/python-ffmpeg-video-streaming\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ec317e810e99b882247660056115994f1da8781/68747470733a2f2f62616467652e667572792e696f2f70792f707974686f6e2d66666d7065672d766964656f2d73747265616d696e672e737667\"></a>\n<a href=\"https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"Software License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26595147bc342e703bae2b2d2d9b2fc5e1c35f95/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174\"></a></p>\n<h2>Overview</h2>\n<p>This package uses the <strong><a href=\"https://ffmpeg.org\" rel=\"nofollow\">FFmpeg</a></strong> to package media content for online streaming such as DASH and HLS. You can also use <strong><a href=\"https://en.wikipedia.org/wiki/Digital_rights_management\" rel=\"nofollow\">DRM</a></strong> for HLS packaging. There are several options to open a file from a cloud and save files to clouds as well.</p>\n<ul>\n<li><strong><a href=\"https://video.aminyazdanpanah.com/python/\" rel=\"nofollow\">Full Documentation</a></strong> is available describing all features and components.</li>\n<li>In this version(&gt;=v0.1.0) all codes are rewritten from scratch. If you find any bugs in the library, please <strong><a href=\"https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/issues\" rel=\"nofollow\">file an issue</a></strong>. <strong><a href=\"https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/pulls\" rel=\"nofollow\">Pull requests</a></strong> are also welcome.</li>\n</ul>\n<p><strong>Contents</strong></p>\n<ul>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a>\n<ul>\n<li><a href=\"#opening-a-resource\" rel=\"nofollow\">Opening a Resource</a></li>\n<li><a href=\"#dash\" rel=\"nofollow\">DASH</a></li>\n<li><a href=\"#hls\" rel=\"nofollow\">HLS</a>\n<ul>\n<li><a href=\"#encryptiondrm\" rel=\"nofollow\">Encryption(DRM)</a></li>\n</ul>\n</li>\n<li><a href=\"#transcoding\" rel=\"nofollow\">Transcoding</a></li>\n<li><a href=\"#saving-files\" rel=\"nofollow\">Saving Files</a></li>\n<li><a href=\"#metadata\" rel=\"nofollow\">Metadata</a></li>\n<li><a href=\"#conversion\" rel=\"nofollow\">Conversion</a></li>\n</ul>\n</li>\n<li><a href=\"#several-open-source-players\" rel=\"nofollow\">Several Open Source Players</a></li>\n<li><a href=\"#contributing-and-reporting-bugs\" rel=\"nofollow\">Contributing and Reporting Bugs</a></li>\n<li><a href=\"#credits\" rel=\"nofollow\">Credits</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Requirements</h2>\n<ol>\n<li>\n<p>This version of the package is only compatible with <strong><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3.6</a></strong> or higher.</p>\n</li>\n<li>\n<p>To use this package, you need to <strong><a href=\"https://ffmpeg.org/download.html\" rel=\"nofollow\">install the FFmpeg</a></strong>. You will need both FFmpeg and FFProbe binaries to use it.</p>\n</li>\n</ol>\n<h2>Installation</h2>\n<p>Install the package via <strong><a href=\"https://pypi.org/project/pip/\" rel=\"nofollow\">pip</a></strong>:</p>\n<pre>pip install python-ffmpeg-video-streaming\n</pre>\n<p>Alternatively, add the dependency directly to your <code>requirements.txt</code> file:</p>\n<pre>python-ffmpeg-video-streaming&gt;=0.1\n</pre>\n<h2>Quickstart</h2>\n<p>First of all, you need to import the package in your code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ffmpeg_streaming</span>\n</pre>\n<h3>Opening a Resource</h3>\n<p>There are several ways to open a resource.</p>\n<h4>1. From a FFmpeg supported resource</h4>\n<p>You can pass a local path of video(or a supported resource) to the <code>input</code> method:</p>\n<pre><span class=\"n\">video</span> <span class=\"o\">=</span> <span class=\"n\">ffmpeg_streaming</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/video.mp4'</span><span class=\"p\">)</span>\n</pre>\n<p>See <strong><a href=\"https://ffmpeg.org/ffmpeg-protocols.html\" rel=\"nofollow\">FFmpeg Protocols Documentation</a></strong> for more information about supported resources such as http, ftp, and etc.</p>\n<p><strong>For example:</strong></p>\n<pre><span class=\"n\">video</span> <span class=\"o\">=</span> <span class=\"n\">ffmpeg_streaming</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">'https://www.aminyazdanpanah.com/?\"PATH TO A VIDEO FILE\" or \"PATH TO A LIVE HTTP STREAM\"'</span><span class=\"p\">)</span>\n</pre>\n<h4>2. From Clouds</h4>\n<p>You can open a file from a cloud by passing an instance of a cloud configuration to the <code>input</code> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">S3</span>\n<span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">S3</span><span class=\"p\">(</span><span class=\"n\">aws_access_key_id</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_KEY_ID'</span><span class=\"p\">,</span> <span class=\"n\">aws_secret_access_key</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_KEY_SECRET'</span><span class=\"p\">,</span> <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_REGION'</span><span class=\"p\">)</span>\n\n<span class=\"n\">video</span> <span class=\"o\">=</span> <span class=\"n\">ffmpeg_streaming</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"n\">s3</span><span class=\"p\">,</span> <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"s2\">\"bucket-name\"</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"video.mp4\"</span><span class=\"p\">)</span>\n</pre>\n<p>Visit <strong><a href=\"https://video.aminyazdanpanah.com/python/start/clouds?r=open\" rel=\"nofollow\">this page</a></strong> to see some examples of opening a file from <strong><a href=\"https://aws.amazon.com/s3\" rel=\"nofollow\">Amazon S3</a></strong>, <strong><a href=\"https://console.cloud.google.com/storage\" rel=\"nofollow\">Google Cloud Storage</a></strong>, <strong><a href=\"https://azure.microsoft.com/en-us/features/storage-explorer/\" rel=\"nofollow\">Microsoft Azure Storage</a></strong>, and a custom cloud.</p>\n<h4>3. Capture Webcam or Screen (Live Streaming)</h4>\n<p>You can pass a name of the supported, connected capture device(i.e. a name of webcam, camera, screen and etc) to the <code>input</code> method to stream a live media over network from your connected device.</p>\n<pre><span class=\"n\">capture</span> <span class=\"o\">=</span> <span class=\"n\">ffmpeg_streaming</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">'CAMERA NAME OR SCREEN NAME'</span><span class=\"p\">,</span> <span class=\"n\">capture</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>To list the supported, connected capture devices, see <strong><a href=\"https://trac.ffmpeg.org/wiki/Capture/Webcam\" rel=\"nofollow\">FFmpeg Capture Webcam</a></strong> and <strong><a href=\"https://trac.ffmpeg.org/wiki/Capture/Desktop\" rel=\"nofollow\">FFmpeg Capture Desktop</a></strong>.</p>\n<h3>DASH</h3>\n<p><strong><a href=\"http://dashif.org/\" rel=\"nofollow\">Dynamic Adaptive Streaming over HTTP (DASH)</a></strong>, also known as MPEG-DASH, is an adaptive bitrate streaming technique that enables high quality streaming of media content over the Internet delivered from conventional HTTP web servers. <a href=\"https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\" rel=\"nofollow\">Learn more</a></p>\n<p>Create DASH files:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">Formats</span>\n\n<span class=\"n\">dash</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">dash</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">dash</span><span class=\"o\">.</span><span class=\"n\">auto_generate_representations</span><span class=\"p\">()</span>\n<span class=\"n\">dash</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/dash.mpd'</span><span class=\"p\">)</span>\n</pre>\n<p>Generate representations manually:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">Formats</span><span class=\"p\">,</span> <span class=\"n\">Bitrate</span><span class=\"p\">,</span> <span class=\"n\">Representation</span><span class=\"p\">,</span> <span class=\"n\">Size</span>\n\n<span class=\"n\">_144p</span>  <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">144</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">95</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">64</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n<span class=\"n\">_240p</span>  <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">426</span><span class=\"p\">,</span> <span class=\"mi\">240</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">150</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">94</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n<span class=\"n\">_360p</span>  <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">640</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">276</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">128</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n<span class=\"n\">_480p</span>  <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">854</span><span class=\"p\">,</span> <span class=\"mi\">480</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">750</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">192</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n<span class=\"n\">_720p</span>  <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">1280</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">2048</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">320</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n<span class=\"n\">_1080p</span> <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">1920</span><span class=\"p\">,</span> <span class=\"mi\">1080</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">4096</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">320</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n<span class=\"n\">_2k</span>    <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">2560</span><span class=\"p\">,</span> <span class=\"mi\">1440</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">6144</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">320</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n<span class=\"n\">_4k</span>    <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">3840</span><span class=\"p\">,</span> <span class=\"mi\">2160</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">17408</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">320</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n\n<span class=\"n\">dash</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">dash</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">dash</span><span class=\"o\">.</span><span class=\"n\">representations</span><span class=\"p\">(</span><span class=\"n\">_144p</span><span class=\"p\">,</span> <span class=\"n\">_240p</span><span class=\"p\">,</span> <span class=\"n\">_360p</span><span class=\"p\">,</span> <span class=\"n\">_480p</span><span class=\"p\">,</span> <span class=\"n\">_720p</span><span class=\"p\">,</span> <span class=\"n\">_1080p</span><span class=\"p\">,</span> <span class=\"n\">_2k</span><span class=\"p\">,</span> <span class=\"n\">_4k</span><span class=\"p\">)</span>\n<span class=\"n\">dash</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/dash.mpd'</span><span class=\"p\">)</span>\n</pre>\n<p>See <strong><a href=\"https://video.aminyazdanpanah.com/python/start?r=dash#dash\" rel=\"nofollow\">DASH section</a></strong> in the documentation, for more examples.</p>\n<h3>HLS</h3>\n<p><strong><a href=\"https://developer.apple.com/streaming/\" rel=\"nofollow\">HTTP Live Streaming (also known as HLS)</a></strong> is an HTTP-based adaptive bitrate streaming communications protocol implemented by Apple Inc. as part of its QuickTime, Safari, OS X, and iOS software. Client implementations are also available in Microsoft Edge, Firefox and some versions of Google Chrome. Support is widespread in streaming media servers. <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" rel=\"nofollow\">Learn more</a></p>\n<p>Create HLS files:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">Formats</span>\n\n<span class=\"n\">hls</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">hls</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">auto_generate_representations</span><span class=\"p\">()</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/hls.m3u8'</span><span class=\"p\">)</span>\n</pre>\n<p>Generate representations manually:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">Formats</span><span class=\"p\">,</span> <span class=\"n\">Bitrate</span><span class=\"p\">,</span> <span class=\"n\">Representation</span><span class=\"p\">,</span> <span class=\"n\">Size</span>\n\n<span class=\"n\">_360p</span>  <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">640</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">276</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">128</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n<span class=\"n\">_480p</span>  <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">854</span><span class=\"p\">,</span> <span class=\"mi\">480</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">750</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">192</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n<span class=\"n\">_720p</span>  <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">1280</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">2048</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">320</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n\n<span class=\"n\">hls</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">hls</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">representations</span><span class=\"p\">(</span><span class=\"n\">_360p</span><span class=\"p\">,</span> <span class=\"n\">_480p</span><span class=\"p\">,</span> <span class=\"n\">_720p</span><span class=\"p\">)</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/hls.m3u8'</span><span class=\"p\">)</span>\n</pre>\n<p>See <strong><a href=\"https://video.aminyazdanpanah.com/python/start?r=hls#hls\" rel=\"nofollow\">HLS section</a></strong> in the documentation, for more examples such as Fragmented MP4, live from camera/screen and so on.</p>\n<h4>Encryption(DRM)</h4>\n<p>The encryption process requires some kind of secret (key) together with an encryption algorithm. HLS uses AES in cipher block chaining (CBC) mode. This means each block is encrypted using the ciphertext of the preceding block. <a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\" rel=\"nofollow\">Learn more</a></p>\n<p>You must specify a path to save a random key to your local machine and also a URL(or a path) to access the key on your website(the key you will save must be accessible from your website). You must pass both these parameters to the <code>encryption</code> method:</p>\n<h5>Single Key</h5>\n<p>The following code generates a key for all segment files.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">Formats</span>\n\n<span class=\"c1\">#A path you want to save a random key to your local machine</span>\n<span class=\"n\">save_to</span> <span class=\"o\">=</span> <span class=\"s1\">'/home/public_html/\"PATH TO THE KEY DIRECTORY\"/key'</span>\n\n<span class=\"c1\">#A URL (or a path) to access the key on your website</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://www.aminyazdanpanah.com/?\"PATH TO THE KEY DIRECTORY\"/key'</span>\n<span class=\"c1\"># or url = '/\"PATH TO THE KEY DIRECTORY\"/key';</span>\n\n<span class=\"n\">hls</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">hls</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">encryption</span><span class=\"p\">(</span><span class=\"n\">save_to</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">auto_generate_representations</span><span class=\"p\">()</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/hls.m3u8'</span><span class=\"p\">)</span>\n</pre>\n<h5>Key Rotation</h5>\n<p>An integer as a \"key rotation period\" can also be passed to the <code>encryption</code> method (i.e. <code>encryption(save_to, url, 10)</code>) to use a different key for each set of segments, rotating to a new key after this many segments. For example, if 10 segment files have been generated then it will generate a new key. If you set this value to <strong><code>1</code></strong>, each segment file will be encrypted with a new encryption key. This can improve security and allows for more flexibility.</p>\n<p>See <strong><a href=\"https://video.aminyazdanpanah.com/python/start?r=enc-hls#hls-encryption\" rel=\"nofollow\">the example</a></strong> for more information.</p>\n<p><strong>IMPORTANT:</strong> It is very important to protect your key(s) on your website. For example, you can use a token(using a Get or Post HTTP method) to check if the user is eligible to access to the key or not. You can also use a session(or cookie) on your website to restrict access to the key(s)(<strong>It is highly recommended</strong>).</p>\n<h5>DRM</h5>\n<p>However FFmpeg supports AES encryption for HLS packaging, which you can encrypt your content, it is not a full <strong><a href=\"https://en.wikipedia.org/wiki/Digital_rights_management\" rel=\"nofollow\">DRM</a></strong> solution. If you want to use a full DRM solution, I recommend trying <strong><a href=\"https://developer.apple.com/streaming/fps/\" rel=\"nofollow\">FairPlay Streaming</a></strong> solution which then securely exchange keys, and protect playback on devices.</p>\n<p><strong>Besides <a href=\"https://developer.apple.com/streaming/fps/\" rel=\"nofollow\">Apple's FairPlay</a></strong> DRM system, you can also use other DRM systems such as <strong><a href=\"https://www.microsoft.com/playready/overview/\" rel=\"nofollow\">Microsoft's PlayReady</a></strong> and <strong><a href=\"https://www.widevine.com/\" rel=\"nofollow\">Google's Widevine</a></strong>.</p>\n<h3>Transcoding</h3>\n<p>You can get realtime information about the transcoding using the following code.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">Formats</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">monitor</span><span class=\"p\">(</span><span class=\"n\">ffmpeg</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">time_</span><span class=\"p\">):</span>\n    <span class=\"n\">per</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">time_</span> <span class=\"o\">/</span> <span class=\"n\">duration</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\r</span><span class=\"s2\">Transcoding...(</span><span class=\"si\">%s%%</span><span class=\"s2\">) [</span><span class=\"si\">%s%s</span><span class=\"s2\">]\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">per</span><span class=\"p\">,</span> <span class=\"s1\">'#'</span> <span class=\"o\">*</span> <span class=\"n\">per</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">100</span> <span class=\"o\">-</span> <span class=\"n\">per</span><span class=\"p\">)))</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n\n<span class=\"n\">hls</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">hls</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">auto_generate_representations</span><span class=\"p\">()</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/hls.m3u8'</span><span class=\"p\">,</span> <span class=\"n\">monitor</span><span class=\"o\">=</span><span class=\"n\">monitor</span><span class=\"p\">)</span>\n</pre>\n<h5>Output From a Terminal:</h5>\n<p><img alt=\"transcoding\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e5d02c3e9025fc893c6cb4199edf9fd3f60ba3c/68747470733a2f2f6769746875622e636f6d2f616d696e79617a64616e70616e61682f616d696e79617a64616e70616e61682e6769746875622e696f2f626c6f622f6d61737465722f766964656f2d73747265616d696e672f7472616e73636f64696e672e6769663f7261773d74727565\"></p>\n<h3>Saving Files</h3>\n<p>There are several ways to save files.</p>\n<h4>1. To a Local Path</h4>\n<p>You can pass a local path to the <code>output</code> method. If there is no directory, then the package will create it.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">Formats</span>\n\n<span class=\"n\">dash</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">dash</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">dash</span><span class=\"o\">.</span><span class=\"n\">auto_generate_representations</span><span class=\"p\">()</span>\n\n<span class=\"n\">dash</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/dash.mpd'</span><span class=\"p\">)</span>\n</pre>\n<p>It can also be None. The default path to save files is the input directory.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">Formats</span>\n\n<span class=\"n\">hls</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">hls</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">auto_generate_representations</span><span class=\"p\">()</span>\n\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">()</span>\n</pre>\n<p><strong>NOTE:</strong> If you open a file from a cloud and do not pass a path to save the file to your local machine, you will have to pass a local path to the <code>output</code> method.</p>\n<h4>2. To Clouds</h4>\n<p>You can save your files to a cloud by passing an instance of a <code>CloudManager</code> to the <code>output</code> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span>  <span class=\"n\">S3</span><span class=\"p\">,</span> <span class=\"n\">CloudManager</span>\n\n<span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">S3</span><span class=\"p\">(</span><span class=\"n\">aws_access_key_id</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_KEY_ID'</span><span class=\"p\">,</span> <span class=\"n\">aws_secret_access_key</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_KEY_SECRET'</span><span class=\"p\">,</span> <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s1\">'YOUR_REGION'</span><span class=\"p\">)</span>\n<span class=\"n\">save_to_s3</span> <span class=\"o\">=</span> <span class=\"n\">CloudManager</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">s3</span><span class=\"p\">,</span> <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"s2\">\"bucket-name\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"n\">clouds</span><span class=\"o\">=</span><span class=\"n\">save_to_s3</span><span class=\"p\">)</span>\n</pre>\n<p>A path can also be passed to save a copy of files to your local machine.</p>\n<pre><span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/hls.m3u8'</span><span class=\"p\">,</span> <span class=\"n\">clouds</span><span class=\"o\">=</span><span class=\"n\">save_to_s3</span><span class=\"p\">)</span>\n</pre>\n<p>Visit <strong><a href=\"https://video.aminyazdanpanah.com/python/start/clouds?r=save\" rel=\"nofollow\">this page</a></strong> to see some examples of saving files to <strong><a href=\"https://aws.amazon.com/s3\" rel=\"nofollow\">Amazon S3</a></strong>, <strong><a href=\"https://console.cloud.google.com/storage\" rel=\"nofollow\">Google Cloud Storage</a></strong>, <strong><a href=\"https://azure.microsoft.com/en-us/features/storage-explorer/\" rel=\"nofollow\">Microsoft Azure Storage</a></strong>, and a custom cloud.</p>\n<p><strong>NOTE:</strong> This option is only valid for <strong><a href=\"https://en.wikipedia.org/wiki/Video_on_demand\" rel=\"nofollow\">VOD</a></strong> (it does not support live streaming).</p>\n<p><strong>Schema:</strong> The relation is <code>one-to-many</code></p>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5677d3e84f7776e8c7020d2620c6beea29c95b0/68747470733a2f2f6769746875622e636f6d2f616d696e79617a64616e70616e61682f616d696e79617a64616e70616e61682e6769746875622e696f2f626c6f622f6d61737465722f766964656f2d73747265616d696e672f766964656f2d73747265616d696e672e6769663f7261773d74727565\" width=\"100%\"></p>\n<h4>3. To a Server Instantly</h4>\n<p>You can pass a url(or a supported resource like <code>ftp</code>) to the <code>output</code> method to upload all the segments files to the HTTP server(or other protocols) using the HTTP PUT method, and update the manifest files every refresh times.</p>\n<pre><span class=\"c1\"># DASH</span>\n<span class=\"n\">dash</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'http://YOUR-WEBSITE.COM/live-stream/out.mpd'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># HLS</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'http://YOUR-WEBSITE.COM/live-stream/out.m3u8'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>NOTE:</strong> In the HLS method, you must upload the master playlist to the server manually.</p>\n<p>See <strong><a href=\"https://ffmpeg.org/ffmpeg-protocols.html\" rel=\"nofollow\">FFmpeg Protocols Documentation</a></strong> for more information about supported resources.</p>\n<h3>Metadata</h3>\n<p>You can get information from the video file using the following code.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">FFProbe</span>\n\n<span class=\"n\">ffprobe</span> <span class=\"o\">=</span> <span class=\"n\">FFProbe</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/video.mp4'</span><span class=\"p\">)</span>\n</pre>\n<p>See <strong><a href=\"https://video.aminyazdanpanah.com/python/start?r=metadata#metadata\" rel=\"nofollow\">the example</a></strong> for more information.</p>\n<h3>Conversion</h3>\n<p>You can convert your stream to a file or to another stream protocols. You should pass a manifest of the stream to the <code>input</code> method:</p>\n<h4>1. HLS To DASH</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ffmpeg_streaming</span> <span class=\"kn\">import</span> <span class=\"n\">Formats</span><span class=\"p\">,</span> <span class=\"n\">Bitrate</span><span class=\"p\">,</span> <span class=\"n\">Representation</span><span class=\"p\">,</span> <span class=\"n\">Size</span>\n\n<span class=\"n\">video</span> <span class=\"o\">=</span> <span class=\"n\">ffmpeg_streaming</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">'https://www.aminyazdanpanah.com/?PATH/TO/HLS-MANIFEST.M3U8'</span><span class=\"p\">)</span>\n\n<span class=\"n\">_480p</span>  <span class=\"o\">=</span> <span class=\"n\">Representation</span><span class=\"p\">(</span><span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">854</span><span class=\"p\">,</span> <span class=\"mi\">480</span><span class=\"p\">),</span> <span class=\"n\">Bitrate</span><span class=\"p\">(</span><span class=\"mi\">750</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">192</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">))</span>\n\n<span class=\"n\">dash</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">dash</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">dash</span><span class=\"o\">.</span><span class=\"n\">representations</span><span class=\"p\">(</span><span class=\"n\">_480p</span><span class=\"p\">)</span>\n<span class=\"n\">dash</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/dash.mpd'</span><span class=\"p\">)</span>\n</pre>\n<h4>2. DASH To HLS</h4>\n<pre><span class=\"n\">video</span> <span class=\"o\">=</span> <span class=\"n\">ffmpeg_streaming</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">'https://www.aminyazdanpanah.com/?PATH/TO/DASH-MANIFEST.MPD'</span><span class=\"p\">)</span>\n\n<span class=\"n\">hls</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">hls</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">auto_generate_representations</span><span class=\"p\">()</span>\n<span class=\"n\">hls</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/hls.m3u8'</span><span class=\"p\">)</span>\n</pre>\n<h4>3. Stream(DASH or HLS) To File</h4>\n<pre><span class=\"n\">video</span> <span class=\"o\">=</span> <span class=\"n\">ffmpeg_streaming</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"s1\">'https://www.aminyazdanpanah.com/?PATH/TO/MANIFEST.MPD or M3U8'</span><span class=\"p\">)</span>\n\n<span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">video</span><span class=\"o\">.</span><span class=\"n\">stream2file</span><span class=\"p\">(</span><span class=\"n\">Formats</span><span class=\"o\">.</span><span class=\"n\">h264</span><span class=\"p\">())</span>\n<span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">'/var/media/new-video.mp4'</span><span class=\"p\">)</span>\n</pre>\n<h2>Several Open Source Players</h2>\n<p>You can use these libraries to play your streams.</p>\n<ul>\n<li><strong>WEB</strong>\n<ul>\n<li>DASH and HLS:\n<ul>\n<li><strong><a href=\"https://github.com/videojs/video.js\" rel=\"nofollow\">Video.js 7</a> (Recommended) - <a href=\"https://github.com/videojs/http-streaming\" rel=\"nofollow\">videojs-http-streaming (VHS)</a></strong></li>\n<li><strong><a href=\"https://github.com/sampotts/plyr\" rel=\"nofollow\">Plyr</a></strong></li>\n<li><strong><a href=\"https://github.com/MoePlayer/DPlayer\" rel=\"nofollow\">DPlayer</a></strong></li>\n<li><strong><a href=\"https://github.com/mediaelement/mediaelement\" rel=\"nofollow\">MediaElement.js</a></strong></li>\n<li><strong><a href=\"https://github.com/clappr/clappr\" rel=\"nofollow\">Clappr</a></strong></li>\n<li><strong><a href=\"https://github.com/google/shaka-player\" rel=\"nofollow\">Shaka Player</a></strong></li>\n<li><strong><a href=\"https://github.com/flowplayer/flowplayer\" rel=\"nofollow\">Flowplayer</a></strong></li>\n</ul>\n</li>\n<li>DASH:\n<ul>\n<li><strong><a href=\"https://github.com/Dash-Industry-Forum/dash.js\" rel=\"nofollow\">dash.js</a></strong></li>\n</ul>\n</li>\n<li>HLS:\n<ul>\n<li><strong><a href=\"https://github.com/video-dev/hls.js\" rel=\"nofollow\">hls.js</a></strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Android</strong>\n<ul>\n<li>DASH and HLS:\n<ul>\n<li><strong><a href=\"https://github.com/google/ExoPlayer\" rel=\"nofollow\">ExoPlayer</a></strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>IOS</strong>\n<ul>\n<li>DASH:\n<ul>\n<li><strong><a href=\"https://github.com/MPEGDASHPlayer/MPEGDASH-iOS-Player\" rel=\"nofollow\">MPEGDASH-iOS-Player</a></strong></li>\n</ul>\n</li>\n<li>HLS:\n<ul>\n<li><strong><a href=\"https://github.com/piemonte/Player\" rel=\"nofollow\">Player</a></strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Windows, Linux, and macOS</strong>\n<ul>\n<li>DASH and HLS:\n<ul>\n<li><strong><a href=\"https://github.com/FFmpeg/FFmpeg\" rel=\"nofollow\">FFmpeg(ffplay)</a></strong></li>\n<li><strong><a href=\"https://github.com/videolan/vlc\" rel=\"nofollow\">VLC media player</a></strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>NOTE-1:</strong> You must pass a <strong>link of the master playlist(manifest)</strong>(i.e. <code>https://www.aminyazdanpanah.com/?\"PATH TO STREAM DIRECTORY\"/dash-stream.mpd</code> or <code>/PATH_TO_STREAM_DIRECTORY/hls-stream.m3u8</code> ) to these players.</p>\n<p><strong>NOTE-2:</strong> If you save your stream content to a cloud(i.e. <strong><a href=\"https://aws.amazon.com/s3\" rel=\"nofollow\">Amazon S3</a></strong>), the link of your playlist and other content <strong>MUST BE PUBLIC</strong>.</p>\n<p><strong>NOTE-3:</strong> As you may know, <strong><a href=\"https://www.apple.com/ios\" rel=\"nofollow\">IOS</a></strong> does not have native support for DASH. Although there are some libraries such as <strong><a href=\"https://github.com/Viblast/ios-player-sdk\" rel=\"nofollow\">Viblast</a></strong> and <strong><a href=\"https://github.com/MPEGDASHPlayer/MPEGDASH-iOS-Player\" rel=\"nofollow\">MPEGDASH-iOS-Player</a></strong> to support this technique, I have never tested them. So maybe som of them will not work correctly.</p>\n<h2>Contributing and Reporting Bugs</h2>\n<p>I'd love your help in improving, correcting, adding to the specification. Please <strong><a href=\"https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/issues\" rel=\"nofollow\">file an issue</a></strong> or <strong><a href=\"https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/pulls\" rel=\"nofollow\">submit a pull request</a></strong>.</p>\n<ul>\n<li>See <strong><a href=\"https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">Contributing File</a></strong> for more information.</li>\n<li>If you discover a security vulnerability within this package, please see <strong><a href=\"https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/SECURITY.md\" rel=\"nofollow\">SECURITY File</a></strong> for more information.</li>\n</ul>\n<h2>Credits</h2>\n<ul>\n<li><strong><a href=\"https://www.aminyazdanpanah.com/?u=github.com/aminyazdanpanah/python-ffmpeg-video-streaming\" rel=\"nofollow\">Amin Yazdanpanah</a></strong></li>\n<li><strong><a href=\"https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/graphs/contributors\" rel=\"nofollow\">All Contributors</a></strong></li>\n</ul>\n<h2>License</h2>\n<p>The MIT License (MIT). See <strong><a href=\"https://github.com/aminyazdanpanah/python-ffmpeg-video-streaming/blob/master/LICENSE\" rel=\"nofollow\">License File</a></strong> for more information.</p>\n\n          </div>"}, "last_serial": 7124179, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e692eb4a46716efd507f2970d07847fd", "sha256": "24f88231aa82707fae49d79558c3e5b04884cfac8d3e970c52c58a8ef7e6912b"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e692eb4a46716efd507f2970d07847fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10147, "upload_time": "2019-04-05T21:45:18", "upload_time_iso_8601": "2019-04-05T21:45:18.992756Z", "url": "https://files.pythonhosted.org/packages/df/ea/ff74a01a04fab04090dadee74dfab25ba054e44a29e0b4ac77f21465e7bd/python_ffmpeg_video_streaming-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bb9ce394818ec0a2201c6674cc4229f", "sha256": "f59a59eada9dbd5f0a1cecf495675e8968681a93ef19bb9b67d62520fb2d77eb"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4bb9ce394818ec0a2201c6674cc4229f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7092, "upload_time": "2019-04-05T21:45:21", "upload_time_iso_8601": "2019-04-05T21:45:21.383776Z", "url": "https://files.pythonhosted.org/packages/2d/03/836ce6e441ab044120084bc85d02a06e726536d17cbda84ed4f8ecd44bb7/python-ffmpeg-video-streaming-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "ccb1767029f3223183df70c32468637d", "sha256": "35992a865130fa7259899c40e6d8dd2e7852e7628277072e1b635e78cb5286f6"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "ccb1767029f3223183df70c32468637d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15727, "upload_time": "2019-09-14T19:40:09", "upload_time_iso_8601": "2019-09-14T19:40:09.461185Z", "url": "https://files.pythonhosted.org/packages/97/32/00ac144952e922191ea53a4aab63346acd65c20322378bfd93bc04565125/python_ffmpeg_video_streaming-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4312c74f93eaeed81db9396752ab1cef", "sha256": "d092049d844740578474c1743d7aa4641c248aebf48f8db03630aee89b24be80"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.10.tar.gz", "has_sig": false, "md5_digest": "4312c74f93eaeed81db9396752ab1cef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14934, "upload_time": "2019-09-14T19:40:11", "upload_time_iso_8601": "2019-09-14T19:40:11.690354Z", "url": "https://files.pythonhosted.org/packages/0c/c5/5198cb6ca89c410586ee4c7851e109bbd12fe7a4b96d88cd2b9a90eab003/python-ffmpeg-video-streaming-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "f3abd9db4c3928f4477aba6f0feff1b4", "sha256": "50a0b1ae35c1e8135729d224efb2379a70bbfeb747ba164536006f15e6f15765"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "f3abd9db4c3928f4477aba6f0feff1b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15766, "upload_time": "2019-09-16T19:29:09", "upload_time_iso_8601": "2019-09-16T19:29:09.514913Z", "url": "https://files.pythonhosted.org/packages/0f/f9/cab743334d13eff7b04eff02d4c36e7e7854d625bcef3eec586a92b66e00/python_ffmpeg_video_streaming-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bed15b402880c083031b2ba5b5ac49fa", "sha256": "74ab6b71cd1ebb87ad73ed8082d202303ea62e0619cbf111266bc4f8dd7c2bd6"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.11.tar.gz", "has_sig": false, "md5_digest": "bed15b402880c083031b2ba5b5ac49fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15029, "upload_time": "2019-09-16T19:29:18", "upload_time_iso_8601": "2019-09-16T19:29:18.029319Z", "url": "https://files.pythonhosted.org/packages/03/d2/6f2cc057610033688358b4c1fd934472258b5287b7489b66c5da5709f829/python-ffmpeg-video-streaming-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "fee07ce7c549d4c7628ec03ac2c351d2", "sha256": "db7f9b03e930057c57a834abedf24f1c9ddde7e31565d8e16a1c8bab0f4ff7db"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "fee07ce7c549d4c7628ec03ac2c351d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15808, "upload_time": "2019-09-29T13:42:09", "upload_time_iso_8601": "2019-09-29T13:42:09.269437Z", "url": "https://files.pythonhosted.org/packages/d2/a6/d809f52bbc7c5ad2ffdafdd710dccbebc24f107613269bf8fa98830b24ab/python_ffmpeg_video_streaming-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46668a11d0d0e6152de57eb86cb9fb74", "sha256": "4b14cc2e48d9b689394d9de885a7874d5587e4d0d589cdfe8c221d37dff42fb9"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.12.tar.gz", "has_sig": false, "md5_digest": "46668a11d0d0e6152de57eb86cb9fb74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15070, "upload_time": "2019-09-29T13:42:13", "upload_time_iso_8601": "2019-09-29T13:42:13.934785Z", "url": "https://files.pythonhosted.org/packages/1f/af/66582d76ee7471fe0bdab624d1928b088db402069b5885e296564c06d1ba/python-ffmpeg-video-streaming-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "2c65c6f6d8f54c864576a878150b12ff", "sha256": "3b76a09e27eac06a99def7cf8db9f07acaedce6a50cd0542bd38eedd05cbaef4"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "2c65c6f6d8f54c864576a878150b12ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21392, "upload_time": "2019-10-12T19:30:42", "upload_time_iso_8601": "2019-10-12T19:30:42.286778Z", "url": "https://files.pythonhosted.org/packages/26/fe/cba4939766ae53cd231a7639ebe91815a337086c83b7a447d15af111d65e/python_ffmpeg_video_streaming-0.0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be2baf0ca4529a8c9004914a3eb48b4a", "sha256": "ad6441b042d78955b5065bd3bc544dc8c9810f97a4b496ec1e17f063de067031"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.13.tar.gz", "has_sig": false, "md5_digest": "be2baf0ca4529a8c9004914a3eb48b4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18823, "upload_time": "2019-10-12T19:30:45", "upload_time_iso_8601": "2019-10-12T19:30:45.913578Z", "url": "https://files.pythonhosted.org/packages/db/7a/f8b6c598b6210fce6d40adb936e3d2ee5555b2810208a1e5ace89eb1cded/python-ffmpeg-video-streaming-0.0.13.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "69f69d6a1570a7eb4821ac7fbce64b8f", "sha256": "01f24ac13a5ae9b699149dd8fa0eec45070dae01aec7d748cdc9693ec254287e"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.17-py3-none-any.whl", "has_sig": false, "md5_digest": "69f69d6a1570a7eb4821ac7fbce64b8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21512, "upload_time": "2019-10-16T14:54:12", "upload_time_iso_8601": "2019-10-16T14:54:12.050780Z", "url": "https://files.pythonhosted.org/packages/1b/92/19294a3c8fee14aeb0651c26351e6574c142f7ac7a7124f3e279a5d85e36/python_ffmpeg_video_streaming-0.0.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab05487fdeb9ff61494ec34cd4e371ec", "sha256": "0fe5e9bf1c311612c1ed330a58577da4e42ac7f242865b6af93b3b91c46e4867"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.17.tar.gz", "has_sig": false, "md5_digest": "ab05487fdeb9ff61494ec34cd4e371ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19127, "upload_time": "2019-10-16T14:54:15", "upload_time_iso_8601": "2019-10-16T14:54:15.741009Z", "url": "https://files.pythonhosted.org/packages/b1/78/30ee1aca96bc44907f6766c73ca0a83c5522435b515530ba1051ed7a2b34/python-ffmpeg-video-streaming-0.0.17.tar.gz", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "be69d912c33b49ad8e06b11429c71654", "sha256": "ffe3699a340b73d211607bb7ec9a940b318757ea534645d19e2d81548e5250c3"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.18-py3-none-any.whl", "has_sig": false, "md5_digest": "be69d912c33b49ad8e06b11429c71654", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21900, "upload_time": "2019-12-11T15:13:36", "upload_time_iso_8601": "2019-12-11T15:13:36.862290Z", "url": "https://files.pythonhosted.org/packages/28/7d/43e93a57cd57f230d6cfba24ab4cd7db81c625ea3e5b109c674eb9904ba4/python_ffmpeg_video_streaming-0.0.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39dcd4ef0838da880f65c47fdef68ba4", "sha256": "f460d4df79494ffe8e9b631f60232382d581f1fffa7b93a9d0eb9a4ae227894e"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.18.tar.gz", "has_sig": false, "md5_digest": "39dcd4ef0838da880f65c47fdef68ba4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20020, "upload_time": "2019-12-11T15:13:39", "upload_time_iso_8601": "2019-12-11T15:13:39.133678Z", "url": "https://files.pythonhosted.org/packages/d2/00/732f0bb36a6e30255d9744ce6cc5f2713acde148ad36b8d2026e439d98d6/python-ffmpeg-video-streaming-0.0.18.tar.gz", "yanked": false}], "0.0.19": [{"comment_text": "", "digests": {"md5": "c76f15b35205a8ea0b8e2b3418cb1255", "sha256": "b316ddd43cbeaf2e8f1b9801a33826d32817fd9a0d3233866e1890118dcdad5e"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.19-py3-none-any.whl", "has_sig": false, "md5_digest": "c76f15b35205a8ea0b8e2b3418cb1255", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21369, "upload_time": "2019-12-18T16:58:19", "upload_time_iso_8601": "2019-12-18T16:58:19.784575Z", "url": "https://files.pythonhosted.org/packages/1b/e0/e094942ce7278f78eac02fcdfb869a30b9e5cb7ac0695149b5394db2310f/python_ffmpeg_video_streaming-0.0.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b99c4deb2a971a65b0f54e4ca17e096", "sha256": "af1da5698a46b06b3f2bda69204d851225bad70b4c0f246bbb9621ea6e5e8cd5"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.19.tar.gz", "has_sig": false, "md5_digest": "9b99c4deb2a971a65b0f54e4ca17e096", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18860, "upload_time": "2019-12-18T16:58:21", "upload_time_iso_8601": "2019-12-18T16:58:21.984603Z", "url": "https://files.pythonhosted.org/packages/f1/84/050bf4bbb8996df36b19f3db5a7b37e7be16dd9f025412ad0cc302ac41de/python-ffmpeg-video-streaming-0.0.19.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "170ac2f13bc6d42e2ec307d60422260d", "sha256": "4cfd9a44483ef26bfe8e65d403a59bb0652ded85f49ce51446ae141a5a34dbd6"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "170ac2f13bc6d42e2ec307d60422260d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10146, "upload_time": "2019-04-06T14:36:08", "upload_time_iso_8601": "2019-04-06T14:36:08.783387Z", "url": "https://files.pythonhosted.org/packages/25/6e/7c18a0b7e29dbf2df18e485dbb57d0dea1f78533c504582b562e80e3cb45/python_ffmpeg_video_streaming-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb988ea8babb7d60ce97065b54647b7e", "sha256": "9eadc2556dad8b28ab50f0801e9716d6486062f775ded95a0d7dc76109064119"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bb988ea8babb7d60ce97065b54647b7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7084, "upload_time": "2019-04-06T14:36:10", "upload_time_iso_8601": "2019-04-06T14:36:10.385797Z", "url": "https://files.pythonhosted.org/packages/2d/a3/e5fda4eec720511d3f2f5173ba3513497a5cfce14c8b73480ca7a4aa7673/python-ffmpeg-video-streaming-0.0.2.tar.gz", "yanked": false}], "0.0.20": [{"comment_text": "", "digests": {"md5": "7f8e660cbdf8bcc125f1789ea155be28", "sha256": "b2c9cc9c50c89f15040f19d9e75728997fe3bade9d035a66462abcd098b7353a"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.20-py3-none-any.whl", "has_sig": false, "md5_digest": "7f8e660cbdf8bcc125f1789ea155be28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19244, "upload_time": "2019-12-26T17:16:45", "upload_time_iso_8601": "2019-12-26T17:16:45.539294Z", "url": "https://files.pythonhosted.org/packages/af/b5/72506f2cb9aa2415586054b1245a52090623226200d1e9beb9dc4f6b672c/python_ffmpeg_video_streaming-0.0.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d5001de2d8f953a7c3c2f25d9b1d70f", "sha256": "402ac971a94884c48470cf5f33ee74df749c3a9401904b8d3026f749d798b87b"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.20.tar.gz", "has_sig": false, "md5_digest": "1d5001de2d8f953a7c3c2f25d9b1d70f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17424, "upload_time": "2019-12-26T17:16:47", "upload_time_iso_8601": "2019-12-26T17:16:47.795160Z", "url": "https://files.pythonhosted.org/packages/12/48/9a9156907370f2ebb2eb6ae3c2f38436a2086a825afea22d9853c760d222/python-ffmpeg-video-streaming-0.0.20.tar.gz", "yanked": false}], "0.0.21": [{"comment_text": "", "digests": {"md5": "866417133c37709ee3d7ce87bdf03388", "sha256": "2aac483101572615a752dc22bb70f5982e4459c415130b96f10e9be39c236ab9"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.21-py3-none-any.whl", "has_sig": false, "md5_digest": "866417133c37709ee3d7ce87bdf03388", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19371, "upload_time": "2020-01-23T22:00:06", "upload_time_iso_8601": "2020-01-23T22:00:06.080990Z", "url": "https://files.pythonhosted.org/packages/b1/8f/f2714eb5f6556d7ce8507db6ce44e3df4e3af0c45fd9e4acb8ca356c099d/python_ffmpeg_video_streaming-0.0.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13991ea63a362154b9fe6595ce51a0db", "sha256": "6955fa4014a1d02e7c775b70523bd1d857738d5d8018ff88af56d035116626de"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.21.tar.gz", "has_sig": false, "md5_digest": "13991ea63a362154b9fe6595ce51a0db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17442, "upload_time": "2020-01-23T22:00:08", "upload_time_iso_8601": "2020-01-23T22:00:08.195496Z", "url": "https://files.pythonhosted.org/packages/31/5f/529643de8370f324c7e4e7268cfd821163ea867775d08372e3da7df32766/python-ffmpeg-video-streaming-0.0.21.tar.gz", "yanked": false}], "0.0.24": [{"comment_text": "", "digests": {"md5": "c493edde51c0a06693ca0fd33b6401be", "sha256": "0024b7dc1e7f53ecd2a5062fd9091c419886aae212edc4b430f52df0aa4859c4"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.24-py3-none-any.whl", "has_sig": false, "md5_digest": "c493edde51c0a06693ca0fd33b6401be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20865, "upload_time": "2020-02-11T00:31:07", "upload_time_iso_8601": "2020-02-11T00:31:07.807299Z", "url": "https://files.pythonhosted.org/packages/fc/f4/6cf0e85bbf482327f810a798c10c929b8affe4a0e269af281b34370d5ca1/python_ffmpeg_video_streaming-0.0.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47b9eabb50e5131e06b86485c883d7a3", "sha256": "52fc909b12e6bc8d769f0cb49ee7b13e2ae800742d7df0cb95b08c11e2b98772"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.24.tar.gz", "has_sig": false, "md5_digest": "47b9eabb50e5131e06b86485c883d7a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20246, "upload_time": "2020-02-11T00:31:09", "upload_time_iso_8601": "2020-02-11T00:31:09.908469Z", "url": "https://files.pythonhosted.org/packages/e7/f9/b74ffa9d0e36e6db63452ae09568cf4ab320b3ecc210c1b4dcd835224883/python-ffmpeg-video-streaming-0.0.24.tar.gz", "yanked": false}], "0.0.25": [{"comment_text": "", "digests": {"md5": "1d3baa38fa7a0d2732493aa8b04ab107", "sha256": "7d5f5fadb9b98b1c73a533bb4128e8f0d69ce353bf24be46f85ee36d527c472b"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.25-py3-none-any.whl", "has_sig": false, "md5_digest": "1d3baa38fa7a0d2732493aa8b04ab107", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21542, "upload_time": "2020-02-11T22:41:05", "upload_time_iso_8601": "2020-02-11T22:41:05.418246Z", "url": "https://files.pythonhosted.org/packages/0f/ed/6e01a4349e0cb1a99a8f80318087448cd19e419e8c1455ff0fe0322dbbc8/python_ffmpeg_video_streaming-0.0.25-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32ceae3d933e979fd2fec5eeb5ac7fdc", "sha256": "6ca2c14eb38583c3920a044c498d76b15f5950cdc3d4e1557357fa617a653fc7"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.25.tar.gz", "has_sig": false, "md5_digest": "32ceae3d933e979fd2fec5eeb5ac7fdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21555, "upload_time": "2020-02-11T22:41:07", "upload_time_iso_8601": "2020-02-11T22:41:07.632353Z", "url": "https://files.pythonhosted.org/packages/ed/bd/29887a8817927199f56a78f84e2709321bad26c344c3acfbe417b8d1917a/python-ffmpeg-video-streaming-0.0.25.tar.gz", "yanked": false}], "0.0.26": [{"comment_text": "", "digests": {"md5": "9b3b8b6f9ef0f124828c5cabaf51b467", "sha256": "e7420ef387973f1bbbb116e48bc8df52e4bbd131d8135f9b905a206aeb7180ec"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.26-py3-none-any.whl", "has_sig": false, "md5_digest": "9b3b8b6f9ef0f124828c5cabaf51b467", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21571, "upload_time": "2020-04-02T19:17:13", "upload_time_iso_8601": "2020-04-02T19:17:13.188906Z", "url": "https://files.pythonhosted.org/packages/51/ca/322161550e65a1be1c1a82f341fc14498e1724908fbf21a052616fa486e0/python_ffmpeg_video_streaming-0.0.26-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb4134b1a1b930865a9d8a010b28dfcf", "sha256": "e22c9618f70b2e2029f791b79a59ae464fb2ff0620093f5ef93cf034d3fc677b"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.26.tar.gz", "has_sig": false, "md5_digest": "fb4134b1a1b930865a9d8a010b28dfcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21611, "upload_time": "2020-04-02T19:17:15", "upload_time_iso_8601": "2020-04-02T19:17:15.402427Z", "url": "https://files.pythonhosted.org/packages/2a/90/2d8c9bf2094b7fabb22f9e97dc7370184d76a14233057cb86f6e5a3a89ea/python-ffmpeg-video-streaming-0.0.26.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "767c4c8ed9f730dd9bfc8ada75b68706", "sha256": "c3f03c8b35b21361f12b2406fb4b16c97425590123abfe68fac2f2a6890e3adb"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "767c4c8ed9f730dd9bfc8ada75b68706", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10101, "upload_time": "2019-04-07T15:20:45", "upload_time_iso_8601": "2019-04-07T15:20:45.838758Z", "url": "https://files.pythonhosted.org/packages/2c/5b/063e897d48ab622138602352ce455f11ca442555f2bf389d20d5fcdef2cb/python_ffmpeg_video_streaming-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7311fad98f8362b13fe3f17bd2326dca", "sha256": "265375221d51bc33d9fdf2ac51d55cbf8529f2e0cbae479865b460c3ab360b78"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.3.tar.gz", "has_sig": false, "md5_digest": "7311fad98f8362b13fe3f17bd2326dca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7058, "upload_time": "2019-04-07T15:20:47", "upload_time_iso_8601": "2019-04-07T15:20:47.542516Z", "url": "https://files.pythonhosted.org/packages/1a/07/c3fe644cff058ac619b516cbf41d4ad04db8f409d5598687bc8527e44438/python-ffmpeg-video-streaming-0.0.3.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "a037582d0dc5105e5c9890fed1f54258", "sha256": "f7199772e218acf18e31fb74ef9f282505e0c731b06af1eb8294db7545a961ff"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "a037582d0dc5105e5c9890fed1f54258", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11916, "upload_time": "2019-09-04T15:31:48", "upload_time_iso_8601": "2019-09-04T15:31:48.217953Z", "url": "https://files.pythonhosted.org/packages/30/2b/27a133f4f10be6b9b8f53d742350cbf1f9dabe5504218e257344e4ac70ab/python_ffmpeg_video_streaming-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba4af76a971230a4551e5cc0f02edfe4", "sha256": "ab2852cf7bfff0c335ac43f879ff552a7a0b8cf372a87966d266217a44bf0844"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.5.tar.gz", "has_sig": false, "md5_digest": "ba4af76a971230a4551e5cc0f02edfe4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11057, "upload_time": "2019-09-04T15:31:51", "upload_time_iso_8601": "2019-09-04T15:31:51.338781Z", "url": "https://files.pythonhosted.org/packages/2a/92/00074c333f6b8f9db9abd39015498b408d3f645ec56ab17603b1e657c265/python-ffmpeg-video-streaming-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "b5ad3faf01f7cc981818c49ba3e82c75", "sha256": "cb7d7fb084a77075fe9b97931a2b4dbef43922d991782baf7b5433c0dde25f02"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "b5ad3faf01f7cc981818c49ba3e82c75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12768, "upload_time": "2019-09-06T20:34:01", "upload_time_iso_8601": "2019-09-06T20:34:01.401707Z", "url": "https://files.pythonhosted.org/packages/9a/6a/3971f767896d90938ed91b7ecd592f926ec68ac059ca30fa7d326fe13b28/python_ffmpeg_video_streaming-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "354c31ff317b5ef2b455e2785491d18b", "sha256": "3c513a3a5839e41c5ffd362796242e41294b1323001925b3209ff2443bc747ad"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.6.tar.gz", "has_sig": false, "md5_digest": "354c31ff317b5ef2b455e2785491d18b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11965, "upload_time": "2019-09-06T20:34:04", "upload_time_iso_8601": "2019-09-06T20:34:04.968561Z", "url": "https://files.pythonhosted.org/packages/ce/b1/b1057650d6e3583846a2b80f15ffce480b3d41f8ac95573b201137c92452/python-ffmpeg-video-streaming-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "0ea5062fbdede0b70a6f4c6c1e6aa0e0", "sha256": "7b76bb80e0c9502d1b2a660dbc59d1f2c006d157107d448c8f4f49d354ad808f"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "0ea5062fbdede0b70a6f4c6c1e6aa0e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12821, "upload_time": "2019-09-07T12:44:18", "upload_time_iso_8601": "2019-09-07T12:44:18.222787Z", "url": "https://files.pythonhosted.org/packages/c4/cf/2f1f42b87cb386045fbbd32ae8045640b39e0675478e71c66a81cc43515d/python_ffmpeg_video_streaming-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c775137992259eb32d87fd5e87209300", "sha256": "a4e155ab6a03f8db1bcf3c5f65c17a58e00ce0cc94ffe75f6bab4eb4c1a62eb7"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.7.tar.gz", "has_sig": false, "md5_digest": "c775137992259eb32d87fd5e87209300", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12067, "upload_time": "2019-09-07T12:44:21", "upload_time_iso_8601": "2019-09-07T12:44:21.273501Z", "url": "https://files.pythonhosted.org/packages/29/63/ec13e6cafaa0c8eec2127cb289bce6b27e43f139f12a2c576aa406c630c5/python-ffmpeg-video-streaming-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "68ce1aac26cf931b911b56fb7e70af53", "sha256": "04ef276ce2c27cf4ddfba55c81b7f7f951996958f52bfeff5fada4fed654c80c"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "68ce1aac26cf931b911b56fb7e70af53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14556, "upload_time": "2019-09-08T20:07:43", "upload_time_iso_8601": "2019-09-08T20:07:43.978953Z", "url": "https://files.pythonhosted.org/packages/77/a1/d9528ca1357df01f2d6b4c4306f4df39a9f7c366fa5daea9055f9b09dd72/python_ffmpeg_video_streaming-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4325e77816d85c216e40f01980991d04", "sha256": "7df4151800bbc7a16a276f67a4a77b861cd8e0e95ed142763b8419346ef92df8"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.8.tar.gz", "has_sig": false, "md5_digest": "4325e77816d85c216e40f01980991d04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13774, "upload_time": "2019-09-08T20:07:47", "upload_time_iso_8601": "2019-09-08T20:07:47.304850Z", "url": "https://files.pythonhosted.org/packages/78/da/a377474f7f6228c7b11bd79180b698f3087c214b6e05a0464a00d1c52f1e/python-ffmpeg-video-streaming-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "36480d607049c36f84c07409cc978d1e", "sha256": "139dcf623ba76c2937d2acbee9d47c77bd4236d3fd90301909ebaee0741b024e"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "36480d607049c36f84c07409cc978d1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15413, "upload_time": "2019-09-11T18:17:10", "upload_time_iso_8601": "2019-09-11T18:17:10.303509Z", "url": "https://files.pythonhosted.org/packages/8c/52/c369655b19b61f573141ca3392845f65af2dd877a8ee65ae7b8db192c343/python_ffmpeg_video_streaming-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9665a9c57d9440c8d1a2a8bdd4713d4", "sha256": "916cf17e89f280039779934fd4d54be6003c4a3137db65a551769da0eedc04bb"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.0.9.tar.gz", "has_sig": false, "md5_digest": "e9665a9c57d9440c8d1a2a8bdd4713d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14634, "upload_time": "2019-09-11T18:17:15", "upload_time_iso_8601": "2019-09-11T18:17:15.903119Z", "url": "https://files.pythonhosted.org/packages/cb/08/dc4748031a41122b003f3609b8fd90f7c9a30b75e32d5bc14afce207264f/python-ffmpeg-video-streaming-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "38d9f50c5e508d8c0b4092aa0923c44a", "sha256": "9e6c1934c11fd45c6680e293ac6dd992319eac2c5009506b39d7cbd35625d3bd"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "38d9f50c5e508d8c0b4092aa0923c44a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24390, "upload_time": "2020-04-20T02:41:19", "upload_time_iso_8601": "2020-04-20T02:41:19.200439Z", "url": "https://files.pythonhosted.org/packages/e3/15/d996138d528810b402df4db9fa0e52eb1e49b19a4a4ebcc87e9fd196ea7f/python_ffmpeg_video_streaming-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11d118e007e8e20276104cae421c7af9", "sha256": "1b67c4651058562e37e35c3be7bdc987893412471de8b5e2b4a48bfa92ee994e"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.1.0.tar.gz", "has_sig": false, "md5_digest": "11d118e007e8e20276104cae421c7af9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24570, "upload_time": "2020-04-20T02:41:21", "upload_time_iso_8601": "2020-04-20T02:41:21.116012Z", "url": "https://files.pythonhosted.org/packages/74/fe/322c13171623fbb6a17f1ec82c380b75f3c33a90c7d3b0ae81a600b69cad/python-ffmpeg-video-streaming-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e196bced514e697615fa4a290fde9ea7", "sha256": "793a1444788e70ce81acdeab37d6545326bd7aaba9b29744d1beae7c0e2ecc83"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e196bced514e697615fa4a290fde9ea7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24743, "upload_time": "2020-04-21T22:22:59", "upload_time_iso_8601": "2020-04-21T22:22:59.478682Z", "url": "https://files.pythonhosted.org/packages/72/bd/a62babe56d0a67632f59e052c1d81fa30967388b5ad319d033942afd288c/python_ffmpeg_video_streaming-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a7aa12781379128df7391d11ead8d14", "sha256": "9fe7c80d8571b7fcd629c995fc37add962213a3d47bea9f3142777deac17ba6e"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9a7aa12781379128df7391d11ead8d14", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24591, "upload_time": "2020-04-21T22:23:01", "upload_time_iso_8601": "2020-04-21T22:23:01.367081Z", "url": "https://files.pythonhosted.org/packages/92/5e/1e22d4cad9c512eb3ce18c720a43c0c13cf6b89fed6f39966d0d3e2d6e8c/python-ffmpeg-video-streaming-0.1.2.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "10c6f25a7fb5da3edf19f9852ad01024", "sha256": "ae09d82aa9fabd98e4aabd0a136b979204418ef893118b782d375799f05ec1a9"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "10c6f25a7fb5da3edf19f9852ad01024", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24712, "upload_time": "2020-04-28T23:03:00", "upload_time_iso_8601": "2020-04-28T23:03:00.610070Z", "url": "https://files.pythonhosted.org/packages/b2/9c/4e4334a79dd10b3d3af2def120a38f5d269cdba1cbbba005ce22dea8555f/python_ffmpeg_video_streaming-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca65dd07e0bb8bd4509d52fb9f4388a3", "sha256": "79b98812447a933aab14e875791adf76ca8e5a44a672bac6ea194a9cdee013a0"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ca65dd07e0bb8bd4509d52fb9f4388a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24835, "upload_time": "2020-04-28T23:03:02", "upload_time_iso_8601": "2020-04-28T23:03:02.466026Z", "url": "https://files.pythonhosted.org/packages/2a/6e/716337ee95d064a68a6d8e9e967a0bf21048ea335a6435c61c6ad4edfe17/python-ffmpeg-video-streaming-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10c6f25a7fb5da3edf19f9852ad01024", "sha256": "ae09d82aa9fabd98e4aabd0a136b979204418ef893118b782d375799f05ec1a9"}, "downloads": -1, "filename": "python_ffmpeg_video_streaming-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "10c6f25a7fb5da3edf19f9852ad01024", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24712, "upload_time": "2020-04-28T23:03:00", "upload_time_iso_8601": "2020-04-28T23:03:00.610070Z", "url": "https://files.pythonhosted.org/packages/b2/9c/4e4334a79dd10b3d3af2def120a38f5d269cdba1cbbba005ce22dea8555f/python_ffmpeg_video_streaming-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca65dd07e0bb8bd4509d52fb9f4388a3", "sha256": "79b98812447a933aab14e875791adf76ca8e5a44a672bac6ea194a9cdee013a0"}, "downloads": -1, "filename": "python-ffmpeg-video-streaming-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ca65dd07e0bb8bd4509d52fb9f4388a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24835, "upload_time": "2020-04-28T23:03:02", "upload_time_iso_8601": "2020-04-28T23:03:02.466026Z", "url": "https://files.pythonhosted.org/packages/2a/6e/716337ee95d064a68a6d8e9e967a0bf21048ea335a6435c61c6ad4edfe17/python-ffmpeg-video-streaming-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:40 2020"}