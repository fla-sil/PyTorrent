{"info": {"author": "whiskyechobravo and other contributors", "author_email": "info@whiskyechobravo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Web Environment", "Framework :: Pelican :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Affero General Public License v3", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Multimedia :: Graphics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==============\n Image Process\n==============\n\n*Image Process* is a plugin for `Pelican <http://docs.getpelican.com/>`_,\na static site generator written in Python.\n\n*Image Process* let you automate the processing of images based on their\nclass attribute. Use this plugin to minimize the overall page weight\nand to save you a trip to Gimp or Photoshop each time you include an\nimage in your post.\n\n*Image Process* also makes it easy to create responsive images using\nthe new HTML5 ``srcset`` attribute and ``<picture>`` tag. It does this\nby generating multiple derivative images from one or more sources.\n\n*Image Process* will not overwrite your original images.\n\n\nInstallation\n============\n\nThe easiest way to install *Image Process* is through the use of pip. This\nwill also install the required dependencies automatically.\n\n.. code-block:: sh\n\n  pip install pelican_image_process\n\nThen, in your ``pelicanconf.py`` file, add *Image Process* to your list of\nplugins:\n\n.. code-block:: python\n\n  from distutils.sysconfig import get_python_lib\n  PLUGIN_PATHS = [get_python_lib()]\n  PLUGINS = [\n              # ...\n              'pelican_image_process',\n              # ...\n            ]\n\nYou will also need to configure your desired transformations (see *Usage*\nbelow) and add the appropriate class to images you want processed.\n\nPlugin development\n==================\n\nIf you want to contribute to this plugin you can easily check out this project and\nuse a Pipenv based virtual environment to develop.\nShortcuts through a ``Makefile`` are provided for development:\n\n.. code-block:: sh\n\n  make lint\n  make unittest\n\n\nUsage\n=====\n\n*Image Process* scans your content for ``<img>`` tags with special\nclasses. It then maps the classes to a set of image processing\ninstructions, computes new images and modifies HTML code according to\nthe instructions.\n\nDefine Transformations\n----------------------\n\nThe first step in using this module is to define some image\ntransformations in your Pelican configuration file. Transformations\nare defined in the ``IMAGE_PROCESS`` dictionary, mapping a\ntransformation name to a list of operations. There are three kinds of\ntransformations: image replacement, responsive image and picture set.\n\nImage Replacement\n~~~~~~~~~~~~~~~~~\n\nThe simplest image processing will replace the original image by a\nnew, transformed image computed from the original. You may use this,\nfor example, to ensure that all images are of the same size, or to\ncompute a thumbnail from a larger image:\n\n.. code-block:: python\n\n  IMAGE_PROCESS = {\n      'article-image': [\"scale_in 300 300 True\"],\n      'thumb': [\"crop 0 0 50% 50%\", \"scale_out 150 150 True\", \"crop 0 0 150 150\"],\n      }\n\nThese transformations tell *Image Process* to transform the image\nreferred by the ``src`` attribute of an ``<img>`` according to the\nlist of operations specified and replace the ``src`` attribute by the\nURL of the transformed image.\n\nFor consistency with the other type of transformations described\nbelow, there is an alternative syntax for the processing instructions:\n\n.. code-block:: python\n\n  IMAGE_PROCESS = {\n      'thumb': {'type': 'image',\n                'ops': [\"crop 0 0 50% 50%\", \"scale_out 150 150 True\", \"crop 0 0 150 150\"],\n                },\n      'article-image': {'type': 'image',\n                        'ops': [\"scale_in 300 300 True\"],\n                        }\n      }\n\n\nTo apply image replacement to the images in your articles, you must\nadd them the special class ``image-process-`` followed by the name of\nthe transformation you wish to apply. For example, let's pretend you\nhave defined the transformation described above. If you write your\ncontent in HTML or in Markdown, do something like this:\n\n.. code-block:: html\n\n  <img class=\"image-process-article-image\" src=\"/images/pelican.jpg\"/>\n\n\nIn reStructuredText, use the ``:class:`` attribute of the ``image`` or\nthe ``figure`` directive:\n\n.. code-block:: rst\n\n   .. image:: /images/pelican.png\n      :class: image-process-article-image\n\n   .. figure:: /images/pelican.png\n      :class: image-process-article-image\n\n.. note::\n\n   The reStructuredText reader will convert underscores (``_``) to\n   dashes (``-``) in class names. To make sure everything runs\n   smoothly, do not use underscores in your transformation names.\n\n\nResponsive Image\n~~~~~~~~~~~~~~~~\n\nYou can use *Image Process* to automatically generate a set of\nimages that will be selected for display by browsers according to the\nviewport width or according to the device resolution. To accomplish\nthis, *Image Process* will add a ``srcset`` attribute (and maybe a\n``media`` and a ``sizes`` attribute) to the ``<img>``.\n\nNote that the ``srcset`` syntax is currently not supported by all\nbrowsers. However, browsers who do not support the ``srcset``\nattribute will fall back to a default image specified by the\nstill-present ``src`` attribute. See `Can I Use`_ for the current\nstatus on ``srcset`` support.\n\n.. _Can I Use: http://caniuse.com/#feat=srcset\n\nHTML5 supports two types of responsive image set. The first one is\ndevice-pixel-ratio-based, selecting higher resolution images for higher\nresolution devices; the second one is viewport-based, selecting\nimages according to the viewport width. If you want to know more about\nHTML5 responsive images, I recommend `this article`_ for a gentle\nintroduction to the ``srcset`` and ``<picture>`` syntaxes.\n\n.. _this article: http://www.smashingmagazine.com/2014/05/14/responsive-images-done-right-guide-picture-srcset/\n\nTo tell *Image Process* to generate a responsive image, add a\n``responsive-image`` transformation to your your ``IMAGE_PROCESS``\ndictionary, with the following syntax:\n\n.. code-block:: python\n\n  IMAGE_PROCESS = {\n      'crisp': {'type': 'responsive-image',\n                'srcset': [('1x', [\"scale_in 800 600 True\"]),\n                           ('2x', [\"scale_in 1600 1200 True\"]),\n                           ('4x', [\"scale_in 3200 2400 True\"]),\n                           ],\n                 'default': '1x',\n               },\n      'large-photo': {'type': 'responsive-image',\n                      'sizes': '(min-width: 1200px) 800px, (min-width: 992px) 650px, \\\n                                (min-width: 768px) 718px, 100vw',\n                      'srcset': [('600w', [\"scale_in 600 450 True\"]),\n                                 ('800w', [\"scale_in 800 600 True\"]),\n                                 ('1600w', [\"scale_in 1600 1200 True\"]),\n                                 ],\n                      'default': '800w',\n                     },\n      }\n\nThe ``crisp`` transformation is an example of a transformation\nenabling device-pixel-ratio-based selection. The ``srcset`` is a list\nof tuple, each tuple containing the image description (``'1x'``,\n``'2x'``, etc.) and the list of operations to generate the derivative\nimage from the original image (the original image is the value of the\n``src`` attribute of the ``<img>``). Image descriptions are hints\nabout the resolution of the associated image and must have the suffix\n``x``. The ``default`` names the image to use to replace the ``src``\nattribute of the image.  This is the image that will be displayed by\nbrowsers that do not support the ``srcset`` syntax.\n\nThe ``large-photo`` transformation is an example of a transformation\nenabling viewport-based selection. The ``sizes`` contains a rule to\ncompute the width of the displayed image from the width of the\nviewport. Once the browser knows the image width, it will select an\nimage source from the ``srcset``. The ``srcset`` is a list of tuple,\neach tuple containing the image description (``'600w'``, ``'800w'``,\netc.) and the list of operations to generate the derivative image from\nthe original image (the original image is the value of the ``src``\nattribute of the ``<img>``). Image descriptions are hints about the\nwidth in pixels of the associated image and must have the suffix\n``w``. The ``default`` names the image to use to replace the ``src``\nattribute of the image.  This is the image that will be displayed by\nbrowsers that do not support the ``srcset`` syntax.\n\nIn the two examples above, the ``default`` is a string referring to\none of the images in the ``srcset``. However, the ``default`` value\ncould also be a list of operations to generate a different derivative\nimage.\n\nTo make the images in your article responsive, you must add them the\nspecial class ``image-process-`` followed by the name of the\ntransformation you wish to apply, exactly like you would do for the\nimage replacement case, described above. So, if you write your content\nin HTML or in Markdown, do something like this:\n\n.. code-block:: html\n\n  <img class=\"image-process-large-photo\" src=\"/images/pelican.jpg\"/>\n\n\nIn reStructuredText, use the ``:class:`` attribute of the ``image`` of\nthe ``figure`` directive:\n\n.. code-block:: rst\n\n   .. image:: /images/pelican.png\n      :class: image-process-large-photo\n\n   .. figure:: /images/pelican.png\n      :class: image-process-large-photo\n\n\nPicture Set\n~~~~~~~~~~~\n\n*Image Process* can be use to generate the images used by a\n``<picture>`` tag. The ``<picture>`` syntax allows for more\nflexibility in providing a choice of image to the browser. Again, if\nyou want to know more about HTML5 responsive images, see `this\narticle`_ for a gentle introduction to the ``srcset`` and\n``<picture>`` syntaxes.\n\nTo tell *Image Process* to generate the images for a ``<picture>``,\nadd a ``picture`` entry to your ``IMAGE_PROCESS`` dictionary with the\nfollowing syntax:\n\n.. code-block:: python\n\n  IMAGE_PROCESS = {\n    'example-pict': {'type': 'picture',\n                     'sources': [{'name': 'default',\n                                  'media': '(min-width: 640px)',\n                                  'srcset': [('640w', [\"scale_in 640 480 True\"]),\n                                             ('1024w', [\"scale_in 1024 683 True\"]),\n                                             ('1600w', [\"scale_in 1600 1200 True\"]),\n                                             ],\n                                  'sizes': '100vw',\n                                  },\n                                 {'name': 'source-1',\n                                  'srcset': [('1x', [\"crop 100 100 200 200\"]),\n                                             ('2x', [\"crop 100 100 300 300\"]),\n                                             ]\n                                  }\n                                 ],\n                     'default': ('default', '640w'),\n                     },\n    }\n\nEach of the ``sources`` entry is very similar to the ``responsive\nimage`` describe above. Here, each source must have a ``name``, which\nwill be used to find the URL of the original image for this source in\nyour article. The source may also have a ``media``, which contains a\nrule used by the browser to select the active source. The ``default``\nnames the image to use to replace the ``src`` attribute of the\n``<img>`` inside the ``<picture>``.  This is the image that will be\ndisplayed by browsers that do not support the ``<picture>`` syntax. In\nthis example, it will use the image ``640w`` from the source\n``default``. A list of operations could have been specified instead of\n``640w``.\n\nTo generate a responsive ``<picture>`` for the images in your\narticles, you must add to your article a pseudo ``<picture>`` tag that\nlooks like this:\n\n.. code-block:: html\n\n   <picture>\n       <source class=\"source-1\" src=\"/images/pelican-closeup.jpg\"></source>\n       <img class=\"image-process-example-pict\" src=\"/images/pelican.jpg\"/>\n   </picture>\n\nEach ``<source>`` tag maps a source name (the ``class`` attribute) to\na file (the ``src`` attribute). The ``<img>`` must have the special\nclass ``image-process-`` followed by the name of the transformation\nyou wish to apply. The file referenced by the ``src`` attribute of the\n``<img>>`` will be used as the special ``default`` source in your\ntransformation definition.\n\n\nThe pseudo ``<picture>`` tag above can be used in articles written in\nHTML, Markdown or restructuredText. In reStructuredText, however, you\ncan also use the ``figure`` directive to generate a ``<picture>``. The\nfigure image file will be used as the special ``default`` source;\nother sources must be added in the the legend section of the\n``figure`` as ``image`` directives. The figure class must be\n``image-process-`` followed by the name of the transformation you wish\nto apply, while the other images must have two classes:\n``image-process`` and the name of the source they provide an image\nfor:\n\n.. code-block:: rst\n\n   .. figure:: /images/pelican.png\n      :class: image-process-large-photo\n\n       Test picture\n\n       .. image:: /images/pelican-closeup.jpg\n          :class: image-process source-1\n\nThe images in the legend section that are used as source for the\n``<picture>`` will be removed from the image legend, so that they do\nnot appear in your final article.\n\n\nTransformations\n---------------\n\nAvailable operations for transformations are:\n\ncrop <top> <left> <right> <bottom>\n  Crop the image to the box (*left*, *top*)-(*right*, *bottom*). Values\n  can be absolute (a number) or relative to the size of the image (a\n  number followed by a percent sign ``%``).\n\nflip_horizontal\n  Flip the image horizontally.\n\nflip_vertical\n  Flip the image vertically.\n\ngrayscale\n  Convert the image to grayscale.\n\nresize *width* *height*\n  Resize the image. This operation does *not* preserve the image aspect\n  ratio. Values can be absolute (a number) or relative to the\n  size of the image (a number followed by a percent sign ``%``).\n\nrotate <degrees>\n  Rotate the image.\n\nscale_in <width> <height> <upscale>\n  Resize the image. This operation preserves the image aspect ratio\n  and the resulting image will be no larger than *width* x\n  *height*. Values can be absolute (a number) or relative to the\n  size of the image (a number followed by a percent sign ``%``).\n  If *upscale* is False, smaller images will not be enlarged.\n\nscale_out <width> <height> <upscale>\n  Resize the image. This operation preserves the image aspect ratio\n  and the resulting image will be no smaller than *width* x\n  *height*. Values can be absolute (a number) or relative to the\n  size of the image (a number followed by a percent sign ``%``).\n  If *upscale* is False, smaller images will not be enlarged.\n\nblur\n  Apply the ``pillow.ImageFilter.BLUR`` filter to the image.\n\ncontour\n  Apply the ``pillow.ImageFilter.CONTOUR`` filter to the image.\n\ndetail\n  Apply the ``pillow.ImageFilter.DETAIL`` filter to the image.\n\nedge_enhance\n  Apply the ``pillow.ImageFilter.EDGE_ENHANCE`` filter to the image.\n\nedge_enhance_more\n  Apply the ``pillow.ImageFilter.EDGE_ENHANCE_MORE`` filter to the image.\n\nemboss\n  Apply the ``pillow.ImageFilter.EMBOSS`` filter to the image.\n\nfind_edges\n  Apply the ``pillow.ImageFilter.FIND_EDGES`` filter to the image.\n\nsmooth\n  Apply the ``pillow.ImageFilter.SMOOTH filter`` to the image.\n\nsmooth_more\n  Apply the ``pillow.ImageFilter.SMOOTH_MORE`` filter to the image.\n\nsharpen\n  Apply the ``pillow.ImageFilter.SHARPEN`` filter to the image.\n\n\nYou can also define your own operations; the only requirement is that\nyour operation should be a callable object expecting a ``pillow.Image`` as\nits first parameter and it should return the transformed image:\n\n.. code-block:: python\n\n  def crop_face(image):\n      \"\"\"Detect face in image and crop around it.\"\"\"\n      # TODO: Fancy algorithm.\n      return image\n\n  IMAGE_PROCESS = {\n      'face-thumbnail': [crop_face, \"scale_out 150 150 True\"]\n      }\n\n\nAdditional Settings\n-------------------\n\nDestination Directory\n~~~~~~~~~~~~~~~~~~~~~\n\nBy default, the new images will be stored in a directory named\n``derivative/<TRANSFORMATION_NAME>`` in the output folder at\nthe same location as the original image.\nFor example if the original image is located in\nthe ``content/images`` folder. The computed images will be stored\nin the ``output/images/derivative/<TRANSFORMATION_NAME>``.\nAll the transformations are done in the output directory in order\nto avoid confusion with the source files or if we test multiple\ntransformations.\nYou can replace ``derivative`` by something else using the\n``IMAGE_PROCESS_DIR`` setting in your Pelican configuration file:\n\n.. code-block:: python\n\n   IMAGE_PROCESS_DIR = 'derivees'\n\n\nForce Image Processing\n~~~~~~~~~~~~~~~~~~~~~~\n\nIf the transformed image already exists and is newer than the original\nimage, the plugin assumes that it should not recompute it again. You\ncan force the plugin to recompute all images by setting\n``IMAGE_PROCESS_FORCE`` to ``True`` in your Pelican configuration\nfile.\n\n.. code-block:: python\n\n   IMAGE_PROCESS_FORCE = True\n\n\nSelecting a HTML Parser\n~~~~~~~~~~~~~~~~~~~~~~~\n\nYou may select the HTML parser which is used. The default is the builtin\n``html.parser`` but you may also select ``html5lib`` or ``lxml`` by setting\n``IMAGE_PROCESS_PARSER`` in your pelican configuration file , e.g.:\n\n.. code-block:: python\n\n   IMAGE_PROCESS_PARSER = \"html5lib\"\n\nFor details, refer to the `BeautifulSoup documentation on parsers\n<https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser>`_.\n\n\nFile Encoding\n~~~~~~~~~~~~~\n\nYou may select a different file encoding to be used by BeautifulSoup as it\nopens your files. The default is ``uft-8``.\n\n.. code-block:: python\n\n  IMAGE_PROCESS_ENCODING = \"uft-8\"\n\n\nKnown Issues\n============\n\n- Pillow, when resizing animated GIF files, does not return an animated file\n- the ``setup.py`` file for this project does not run on Python 2.7. However,\n  wheels of this project are \"universal\" and so can be generated by Python 3\n  and subsequently installed by Python 2.7.\n- test mostly pass, but not entirely. The tests also fail on Windows due to\n  path separator issues. The test suite remains a work in progress.\n- version 1.1.2, as uploaded to PyPI, is broken; use a different version. (see\n  `issue #2 <https://github.com/MinchinWeb/minchin.pelican.plugins.image_process/issues/2>`_\n  for details)\n\n\nCredits\n=======\n\nPelican image in test data by Jon Sullivan. Source:\nhttp://www.pdphoto.org/PictureDetail.php?mat=&pg=5726\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/whiskyechobravo/image_process", "keywords": "", "license": "GNU Affero General Public License v3", "maintainer": "", "maintainer_email": "", "name": "pelican-image-process", "package_url": "https://pypi.org/project/pelican-image-process/", "platform": "any", "project_url": "https://pypi.org/project/pelican-image-process/", "project_urls": {"Homepage": "https://github.com/whiskyechobravo/image_process"}, "release_url": "https://pypi.org/project/pelican-image-process/1.3.0/", "requires_dist": ["beautifulsoup4", "pelican", "six", "pillow"], "requires_python": "", "summary": "Pelican plugin for automating image processing. Written in Python.", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Image Process</em> is a plugin for <a href=\"http://docs.getpelican.com/\" rel=\"nofollow\">Pelican</a>,\na static site generator written in Python.</p>\n<p><em>Image Process</em> let you automate the processing of images based on their\nclass attribute. Use this plugin to minimize the overall page weight\nand to save you a trip to Gimp or Photoshop each time you include an\nimage in your post.</p>\n<p><em>Image Process</em> also makes it easy to create responsive images using\nthe new HTML5 <tt>srcset</tt> attribute and <tt>&lt;picture&gt;</tt> tag. It does this\nby generating multiple derivative images from one or more sources.</p>\n<p><em>Image Process</em> will not overwrite your original images.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The easiest way to install <em>Image Process</em> is through the use of pip. This\nwill also install the required dependencies automatically.</p>\n<pre>pip install pelican_image_process\n</pre>\n<p>Then, in your <tt>pelicanconf.py</tt> file, add <em>Image Process</em> to your list of\nplugins:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">distutils.sysconfig</span> <span class=\"kn\">import</span> <span class=\"n\">get_python_lib</span>\n<span class=\"n\">PLUGIN_PATHS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">get_python_lib</span><span class=\"p\">()]</span>\n<span class=\"n\">PLUGINS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"c1\"># ...</span>\n            <span class=\"s1\">'pelican_image_process'</span><span class=\"p\">,</span>\n            <span class=\"c1\"># ...</span>\n          <span class=\"p\">]</span>\n</pre>\n<p>You will also need to configure your desired transformations (see <em>Usage</em>\nbelow) and add the appropriate class to images you want processed.</p>\n</div>\n<div id=\"plugin-development\">\n<h2>Plugin development</h2>\n<p>If you want to contribute to this plugin you can easily check out this project and\nuse a Pipenv based virtual environment to develop.\nShortcuts through a <tt>Makefile</tt> are provided for development:</p>\n<pre>make lint\nmake unittest\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><em>Image Process</em> scans your content for <tt>&lt;img&gt;</tt> tags with special\nclasses. It then maps the classes to a set of image processing\ninstructions, computes new images and modifies HTML code according to\nthe instructions.</p>\n<div id=\"define-transformations\">\n<h3>Define Transformations</h3>\n<p>The first step in using this module is to define some image\ntransformations in your Pelican configuration file. Transformations\nare defined in the <tt>IMAGE_PROCESS</tt> dictionary, mapping a\ntransformation name to a list of operations. There are three kinds of\ntransformations: image replacement, responsive image and picture set.</p>\n<div id=\"image-replacement\">\n<h4>Image Replacement</h4>\n<p>The simplest image processing will replace the original image by a\nnew, transformed image computed from the original. You may use this,\nfor example, to ensure that all images are of the same size, or to\ncompute a thumbnail from a larger image:</p>\n<pre><span class=\"n\">IMAGE_PROCESS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'article-image'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 300 300 True\"</span><span class=\"p\">],</span>\n    <span class=\"s1\">'thumb'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"crop 0 0 50</span><span class=\"si\">% 50%</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"s2\">\"scale_out 150 150 True\"</span><span class=\"p\">,</span> <span class=\"s2\">\"crop 0 0 150 150\"</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>These transformations tell <em>Image Process</em> to transform the image\nreferred by the <tt>src</tt> attribute of an <tt>&lt;img&gt;</tt> according to the\nlist of operations specified and replace the <tt>src</tt> attribute by the\nURL of the transformed image.</p>\n<p>For consistency with the other type of transformations described\nbelow, there is an alternative syntax for the processing instructions:</p>\n<pre><span class=\"n\">IMAGE_PROCESS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'thumb'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'image'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'ops'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"crop 0 0 50</span><span class=\"si\">% 50%</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"s2\">\"scale_out 150 150 True\"</span><span class=\"p\">,</span> <span class=\"s2\">\"crop 0 0 150 150\"</span><span class=\"p\">],</span>\n              <span class=\"p\">},</span>\n    <span class=\"s1\">'article-image'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'image'</span><span class=\"p\">,</span>\n                      <span class=\"s1\">'ops'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 300 300 True\"</span><span class=\"p\">],</span>\n                      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>To apply image replacement to the images in your articles, you must\nadd them the special class <tt><span class=\"pre\">image-process-</span></tt> followed by the name of\nthe transformation you wish to apply. For example, let\u2019s pretend you\nhave defined the transformation described above. If you write your\ncontent in HTML or in Markdown, do something like this:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"image-process-article-image\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"/images/pelican.jpg\"</span><span class=\"p\">/&gt;</span>\n</pre>\n<p>In reStructuredText, use the <tt>:class:</tt> attribute of the <tt>image</tt> or\nthe <tt>figure</tt> directive:</p>\n<pre><span class=\"p\">..</span> <span class=\"ow\">image</span><span class=\"p\">::</span> /images/pelican.png\n   <span class=\"nc\">:class:</span> image-process-article-image\n\n<span class=\"p\">..</span> <span class=\"ow\">figure</span><span class=\"p\">::</span> /images/pelican.png\n   <span class=\"nc\">:class:</span> image-process-article-image\n</pre>\n<div>\n<p>Note</p>\n<p>The reStructuredText reader will convert underscores (<tt>_</tt>) to\ndashes (<tt>-</tt>) in class names. To make sure everything runs\nsmoothly, do not use underscores in your transformation names.</p>\n</div>\n</div>\n<div id=\"responsive-image\">\n<h4>Responsive Image</h4>\n<p>You can use <em>Image Process</em> to automatically generate a set of\nimages that will be selected for display by browsers according to the\nviewport width or according to the device resolution. To accomplish\nthis, <em>Image Process</em> will add a <tt>srcset</tt> attribute (and maybe a\n<tt>media</tt> and a <tt>sizes</tt> attribute) to the <tt>&lt;img&gt;</tt>.</p>\n<p>Note that the <tt>srcset</tt> syntax is currently not supported by all\nbrowsers. However, browsers who do not support the <tt>srcset</tt>\nattribute will fall back to a default image specified by the\nstill-present <tt>src</tt> attribute. See <a href=\"http://caniuse.com/#feat=srcset\" rel=\"nofollow\">Can I Use</a> for the current\nstatus on <tt>srcset</tt> support.</p>\n<p>HTML5 supports two types of responsive image set. The first one is\ndevice-pixel-ratio-based, selecting higher resolution images for higher\nresolution devices; the second one is viewport-based, selecting\nimages according to the viewport width. If you want to know more about\nHTML5 responsive images, I recommend <a href=\"http://www.smashingmagazine.com/2014/05/14/responsive-images-done-right-guide-picture-srcset/\" rel=\"nofollow\">this article</a> for a gentle\nintroduction to the <tt>srcset</tt> and <tt>&lt;picture&gt;</tt> syntaxes.</p>\n<p>To tell <em>Image Process</em> to generate a responsive image, add a\n<tt><span class=\"pre\">responsive-image</span></tt> transformation to your your <tt>IMAGE_PROCESS</tt>\ndictionary, with the following syntax:</p>\n<pre><span class=\"n\">IMAGE_PROCESS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'crisp'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'responsive-image'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'srcset'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'1x'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 800 600 True\"</span><span class=\"p\">]),</span>\n                         <span class=\"p\">(</span><span class=\"s1\">'2x'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 1600 1200 True\"</span><span class=\"p\">]),</span>\n                         <span class=\"p\">(</span><span class=\"s1\">'4x'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 3200 2400 True\"</span><span class=\"p\">]),</span>\n                         <span class=\"p\">],</span>\n               <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"s1\">'1x'</span><span class=\"p\">,</span>\n             <span class=\"p\">},</span>\n    <span class=\"s1\">'large-photo'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'responsive-image'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'sizes'</span><span class=\"p\">:</span> <span class=\"s1\">'(min-width: 1200px) 800px, (min-width: 992px) 650px, </span><span class=\"se\">\\\n</span><span class=\"s1\">                              (min-width: 768px) 718px, 100vw'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'srcset'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'600w'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 600 450 True\"</span><span class=\"p\">]),</span>\n                               <span class=\"p\">(</span><span class=\"s1\">'800w'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 800 600 True\"</span><span class=\"p\">]),</span>\n                               <span class=\"p\">(</span><span class=\"s1\">'1600w'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 1600 1200 True\"</span><span class=\"p\">]),</span>\n                               <span class=\"p\">],</span>\n                    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"s1\">'800w'</span><span class=\"p\">,</span>\n                   <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>The <tt>crisp</tt> transformation is an example of a transformation\nenabling device-pixel-ratio-based selection. The <tt>srcset</tt> is a list\nof tuple, each tuple containing the image description (<tt>'1x'</tt>,\n<tt>'2x'</tt>, etc.) and the list of operations to generate the derivative\nimage from the original image (the original image is the value of the\n<tt>src</tt> attribute of the <tt>&lt;img&gt;</tt>). Image descriptions are hints\nabout the resolution of the associated image and must have the suffix\n<tt>x</tt>. The <tt>default</tt> names the image to use to replace the <tt>src</tt>\nattribute of the image.  This is the image that will be displayed by\nbrowsers that do not support the <tt>srcset</tt> syntax.</p>\n<p>The <tt><span class=\"pre\">large-photo</span></tt> transformation is an example of a transformation\nenabling viewport-based selection. The <tt>sizes</tt> contains a rule to\ncompute the width of the displayed image from the width of the\nviewport. Once the browser knows the image width, it will select an\nimage source from the <tt>srcset</tt>. The <tt>srcset</tt> is a list of tuple,\neach tuple containing the image description (<tt>'600w'</tt>, <tt>'800w'</tt>,\netc.) and the list of operations to generate the derivative image from\nthe original image (the original image is the value of the <tt>src</tt>\nattribute of the <tt>&lt;img&gt;</tt>). Image descriptions are hints about the\nwidth in pixels of the associated image and must have the suffix\n<tt>w</tt>. The <tt>default</tt> names the image to use to replace the <tt>src</tt>\nattribute of the image.  This is the image that will be displayed by\nbrowsers that do not support the <tt>srcset</tt> syntax.</p>\n<p>In the two examples above, the <tt>default</tt> is a string referring to\none of the images in the <tt>srcset</tt>. However, the <tt>default</tt> value\ncould also be a list of operations to generate a different derivative\nimage.</p>\n<p>To make the images in your article responsive, you must add them the\nspecial class <tt><span class=\"pre\">image-process-</span></tt> followed by the name of the\ntransformation you wish to apply, exactly like you would do for the\nimage replacement case, described above. So, if you write your content\nin HTML or in Markdown, do something like this:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"image-process-large-photo\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"/images/pelican.jpg\"</span><span class=\"p\">/&gt;</span>\n</pre>\n<p>In reStructuredText, use the <tt>:class:</tt> attribute of the <tt>image</tt> of\nthe <tt>figure</tt> directive:</p>\n<pre><span class=\"p\">..</span> <span class=\"ow\">image</span><span class=\"p\">::</span> /images/pelican.png\n   <span class=\"nc\">:class:</span> image-process-large-photo\n\n<span class=\"p\">..</span> <span class=\"ow\">figure</span><span class=\"p\">::</span> /images/pelican.png\n   <span class=\"nc\">:class:</span> image-process-large-photo\n</pre>\n</div>\n<div id=\"picture-set\">\n<h4>Picture Set</h4>\n<p><em>Image Process</em> can be use to generate the images used by a\n<tt>&lt;picture&gt;</tt> tag. The <tt>&lt;picture&gt;</tt> syntax allows for more\nflexibility in providing a choice of image to the browser. Again, if\nyou want to know more about HTML5 responsive images, see <a href=\"http://www.smashingmagazine.com/2014/05/14/responsive-images-done-right-guide-picture-srcset/\" rel=\"nofollow\">this\narticle</a> for a gentle introduction to the <tt>srcset</tt> and\n<tt>&lt;picture&gt;</tt> syntaxes.</p>\n<p>To tell <em>Image Process</em> to generate the images for a <tt>&lt;picture&gt;</tt>,\nadd a <tt>picture</tt> entry to your <tt>IMAGE_PROCESS</tt> dictionary with the\nfollowing syntax:</p>\n<pre><span class=\"n\">IMAGE_PROCESS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'example-pict'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'picture'</span><span class=\"p\">,</span>\n                   <span class=\"s1\">'sources'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'default'</span><span class=\"p\">,</span>\n                                <span class=\"s1\">'media'</span><span class=\"p\">:</span> <span class=\"s1\">'(min-width: 640px)'</span><span class=\"p\">,</span>\n                                <span class=\"s1\">'srcset'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'640w'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 640 480 True\"</span><span class=\"p\">]),</span>\n                                           <span class=\"p\">(</span><span class=\"s1\">'1024w'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 1024 683 True\"</span><span class=\"p\">]),</span>\n                                           <span class=\"p\">(</span><span class=\"s1\">'1600w'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"scale_in 1600 1200 True\"</span><span class=\"p\">]),</span>\n                                           <span class=\"p\">],</span>\n                                <span class=\"s1\">'sizes'</span><span class=\"p\">:</span> <span class=\"s1\">'100vw'</span><span class=\"p\">,</span>\n                                <span class=\"p\">},</span>\n                               <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'source-1'</span><span class=\"p\">,</span>\n                                <span class=\"s1\">'srcset'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'1x'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"crop 100 100 200 200\"</span><span class=\"p\">]),</span>\n                                           <span class=\"p\">(</span><span class=\"s1\">'2x'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"crop 100 100 300 300\"</span><span class=\"p\">]),</span>\n                                           <span class=\"p\">]</span>\n                                <span class=\"p\">}</span>\n                               <span class=\"p\">],</span>\n                   <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"s1\">'640w'</span><span class=\"p\">),</span>\n                   <span class=\"p\">},</span>\n  <span class=\"p\">}</span>\n</pre>\n<p>Each of the <tt>sources</tt> entry is very similar to the <tt>responsive\nimage</tt> describe above. Here, each source must have a <tt>name</tt>, which\nwill be used to find the URL of the original image for this source in\nyour article. The source may also have a <tt>media</tt>, which contains a\nrule used by the browser to select the active source. The <tt>default</tt>\nnames the image to use to replace the <tt>src</tt> attribute of the\n<tt>&lt;img&gt;</tt> inside the <tt>&lt;picture&gt;</tt>.  This is the image that will be\ndisplayed by browsers that do not support the <tt>&lt;picture&gt;</tt> syntax. In\nthis example, it will use the image <tt>640w</tt> from the source\n<tt>default</tt>. A list of operations could have been specified instead of\n<tt>640w</tt>.</p>\n<p>To generate a responsive <tt>&lt;picture&gt;</tt> for the images in your\narticles, you must add to your article a pseudo <tt>&lt;picture&gt;</tt> tag that\nlooks like this:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">picture</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">source</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"source-1\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"/images/pelican-closeup.jpg\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">source</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"image-process-example-pict\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"/images/pelican.jpg\"</span><span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">picture</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Each <tt>&lt;source&gt;</tt> tag maps a source name (the <tt>class</tt> attribute) to\na file (the <tt>src</tt> attribute). The <tt>&lt;img&gt;</tt> must have the special\nclass <tt><span class=\"pre\">image-process-</span></tt> followed by the name of the transformation\nyou wish to apply. The file referenced by the <tt>src</tt> attribute of the\n<tt>&lt;img&gt;&gt;</tt> will be used as the special <tt>default</tt> source in your\ntransformation definition.</p>\n<p>The pseudo <tt>&lt;picture&gt;</tt> tag above can be used in articles written in\nHTML, Markdown or restructuredText. In reStructuredText, however, you\ncan also use the <tt>figure</tt> directive to generate a <tt>&lt;picture&gt;</tt>. The\nfigure image file will be used as the special <tt>default</tt> source;\nother sources must be added in the the legend section of the\n<tt>figure</tt> as <tt>image</tt> directives. The figure class must be\n<tt><span class=\"pre\">image-process-</span></tt> followed by the name of the transformation you wish\nto apply, while the other images must have two classes:\n<tt><span class=\"pre\">image-process</span></tt> and the name of the source they provide an image\nfor:</p>\n<pre><span class=\"p\">..</span> <span class=\"ow\">figure</span><span class=\"p\">::</span> /images/pelican.png\n   <span class=\"nc\">:class:</span> image-process-large-photo\n\n    Test picture\n\n<span class=\"p\">    ..</span> <span class=\"ow\">image</span><span class=\"p\">::</span> /images/pelican-closeup.jpg\n       <span class=\"nc\">:class:</span> image-process source-1\n</pre>\n<p>The images in the legend section that are used as source for the\n<tt>&lt;picture&gt;</tt> will be removed from the image legend, so that they do\nnot appear in your final article.</p>\n</div>\n</div>\n<div id=\"transformations\">\n<h3>Transformations</h3>\n<p>Available operations for transformations are:</p>\n<dl>\n<dt>crop &lt;top&gt; &lt;left&gt; &lt;right&gt; &lt;bottom&gt;</dt>\n<dd>Crop the image to the box (<em>left</em>, <em>top</em>)-(<em>right</em>, <em>bottom</em>). Values\ncan be absolute (a number) or relative to the size of the image (a\nnumber followed by a percent sign <tt>%</tt>).</dd>\n<dt>flip_horizontal</dt>\n<dd>Flip the image horizontally.</dd>\n<dt>flip_vertical</dt>\n<dd>Flip the image vertically.</dd>\n<dt>grayscale</dt>\n<dd>Convert the image to grayscale.</dd>\n<dt>resize <em>width</em> <em>height</em></dt>\n<dd>Resize the image. This operation does <em>not</em> preserve the image aspect\nratio. Values can be absolute (a number) or relative to the\nsize of the image (a number followed by a percent sign <tt>%</tt>).</dd>\n<dt>rotate &lt;degrees&gt;</dt>\n<dd>Rotate the image.</dd>\n<dt>scale_in &lt;width&gt; &lt;height&gt; &lt;upscale&gt;</dt>\n<dd>Resize the image. This operation preserves the image aspect ratio\nand the resulting image will be no larger than <em>width</em> x\n<em>height</em>. Values can be absolute (a number) or relative to the\nsize of the image (a number followed by a percent sign <tt>%</tt>).\nIf <em>upscale</em> is False, smaller images will not be enlarged.</dd>\n<dt>scale_out &lt;width&gt; &lt;height&gt; &lt;upscale&gt;</dt>\n<dd>Resize the image. This operation preserves the image aspect ratio\nand the resulting image will be no smaller than <em>width</em> x\n<em>height</em>. Values can be absolute (a number) or relative to the\nsize of the image (a number followed by a percent sign <tt>%</tt>).\nIf <em>upscale</em> is False, smaller images will not be enlarged.</dd>\n<dt>blur</dt>\n<dd>Apply the <tt>pillow.ImageFilter.BLUR</tt> filter to the image.</dd>\n<dt>contour</dt>\n<dd>Apply the <tt>pillow.ImageFilter.CONTOUR</tt> filter to the image.</dd>\n<dt>detail</dt>\n<dd>Apply the <tt>pillow.ImageFilter.DETAIL</tt> filter to the image.</dd>\n<dt>edge_enhance</dt>\n<dd>Apply the <tt>pillow.ImageFilter.EDGE_ENHANCE</tt> filter to the image.</dd>\n<dt>edge_enhance_more</dt>\n<dd>Apply the <tt>pillow.ImageFilter.EDGE_ENHANCE_MORE</tt> filter to the image.</dd>\n<dt>emboss</dt>\n<dd>Apply the <tt>pillow.ImageFilter.EMBOSS</tt> filter to the image.</dd>\n<dt>find_edges</dt>\n<dd>Apply the <tt>pillow.ImageFilter.FIND_EDGES</tt> filter to the image.</dd>\n<dt>smooth</dt>\n<dd>Apply the <tt>pillow.ImageFilter.SMOOTH filter</tt> to the image.</dd>\n<dt>smooth_more</dt>\n<dd>Apply the <tt>pillow.ImageFilter.SMOOTH_MORE</tt> filter to the image.</dd>\n<dt>sharpen</dt>\n<dd>Apply the <tt>pillow.ImageFilter.SHARPEN</tt> filter to the image.</dd>\n</dl>\n<p>You can also define your own operations; the only requirement is that\nyour operation should be a callable object expecting a <tt>pillow.Image</tt> as\nits first parameter and it should return the transformed image:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">crop_face</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Detect face in image and crop around it.\"\"\"</span>\n    <span class=\"c1\"># TODO: Fancy algorithm.</span>\n    <span class=\"k\">return</span> <span class=\"n\">image</span>\n\n<span class=\"n\">IMAGE_PROCESS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'face-thumbnail'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">crop_face</span><span class=\"p\">,</span> <span class=\"s2\">\"scale_out 150 150 True\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"additional-settings\">\n<h3>Additional Settings</h3>\n<div id=\"destination-directory\">\n<h4>Destination Directory</h4>\n<p>By default, the new images will be stored in a directory named\n<tt><span class=\"pre\">derivative/&lt;TRANSFORMATION_NAME&gt;</span></tt> in the output folder at\nthe same location as the original image.\nFor example if the original image is located in\nthe <tt>content/images</tt> folder. The computed images will be stored\nin the <tt><span class=\"pre\">output/images/derivative/&lt;TRANSFORMATION_NAME&gt;</span></tt>.\nAll the transformations are done in the output directory in order\nto avoid confusion with the source files or if we test multiple\ntransformations.\nYou can replace <tt>derivative</tt> by something else using the\n<tt>IMAGE_PROCESS_DIR</tt> setting in your Pelican configuration file:</p>\n<pre><span class=\"n\">IMAGE_PROCESS_DIR</span> <span class=\"o\">=</span> <span class=\"s1\">'derivees'</span>\n</pre>\n</div>\n<div id=\"force-image-processing\">\n<h4>Force Image Processing</h4>\n<p>If the transformed image already exists and is newer than the original\nimage, the plugin assumes that it should not recompute it again. You\ncan force the plugin to recompute all images by setting\n<tt>IMAGE_PROCESS_FORCE</tt> to <tt>True</tt> in your Pelican configuration\nfile.</p>\n<pre><span class=\"n\">IMAGE_PROCESS_FORCE</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"selecting-a-html-parser\">\n<h4>Selecting a HTML Parser</h4>\n<p>You may select the HTML parser which is used. The default is the builtin\n<tt>html.parser</tt> but you may also select <tt>html5lib</tt> or <tt>lxml</tt> by setting\n<tt>IMAGE_PROCESS_PARSER</tt> in your pelican configuration file , e.g.:</p>\n<pre><span class=\"n\">IMAGE_PROCESS_PARSER</span> <span class=\"o\">=</span> <span class=\"s2\">\"html5lib\"</span>\n</pre>\n<p>For details, refer to the <a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser\" rel=\"nofollow\">BeautifulSoup documentation on parsers</a>.</p>\n</div>\n<div id=\"file-encoding\">\n<h4>File Encoding</h4>\n<p>You may select a different file encoding to be used by BeautifulSoup as it\nopens your files. The default is <tt><span class=\"pre\">uft-8</span></tt>.</p>\n<pre><span class=\"n\">IMAGE_PROCESS_ENCODING</span> <span class=\"o\">=</span> <span class=\"s2\">\"uft-8\"</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"known-issues\">\n<h2>Known Issues</h2>\n<ul>\n<li>Pillow, when resizing animated GIF files, does not return an animated file</li>\n<li>the <tt>setup.py</tt> file for this project does not run on Python 2.7. However,\nwheels of this project are \u201cuniversal\u201d and so can be generated by Python 3\nand subsequently installed by Python 2.7.</li>\n<li>test mostly pass, but not entirely. The tests also fail on Windows due to\npath separator issues. The test suite remains a work in progress.</li>\n<li>version 1.1.2, as uploaded to PyPI, is broken; use a different version. (see\n<a href=\"https://github.com/MinchinWeb/minchin.pelican.plugins.image_process/issues/2\" rel=\"nofollow\">issue #2</a>\nfor details)</li>\n</ul>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Pelican image in test data by Jon Sullivan. Source:\n<a href=\"http://www.pdphoto.org/PictureDetail.php?mat=&amp;pg=5726\" rel=\"nofollow\">http://www.pdphoto.org/PictureDetail.php?mat=&amp;pg=5726</a></p>\n</div>\n\n          </div>"}, "last_serial": 6034097, "releases": {"1.3.0": [{"comment_text": "", "digests": {"md5": "5586966fb62bff200f900bec5db7c6ec", "sha256": "2b26e91853b84a711b67f005f26fab49b29854af00493d1f00b1f40bb10a6b0c"}, "downloads": -1, "filename": "pelican_image_process-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5586966fb62bff200f900bec5db7c6ec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24005, "upload_time": "2019-10-26T15:50:41", "upload_time_iso_8601": "2019-10-26T15:50:41.682928Z", "url": "https://files.pythonhosted.org/packages/a0/b1/30e24c0fb8a676107e397d9b164b89d0ef8bda5e770076c8bf376e77ef4a/pelican_image_process-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72192f4fda42dbafa805e7be5e1d4be7", "sha256": "e2c5323904f21b918fe757fd3dc5591f4ad7d2d7b1aaaef87ea4cd7ad5a19b25"}, "downloads": -1, "filename": "pelican_image_process-1.3.0.tar.gz", "has_sig": false, "md5_digest": "72192f4fda42dbafa805e7be5e1d4be7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30018, "upload_time": "2019-10-26T15:50:44", "upload_time_iso_8601": "2019-10-26T15:50:44.666888Z", "url": "https://files.pythonhosted.org/packages/b8/cc/74564faa2d66cf1f677c139ad1f95d86a0171fd1bd5ce6dd70e3cc3c9e5a/pelican_image_process-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5586966fb62bff200f900bec5db7c6ec", "sha256": "2b26e91853b84a711b67f005f26fab49b29854af00493d1f00b1f40bb10a6b0c"}, "downloads": -1, "filename": "pelican_image_process-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5586966fb62bff200f900bec5db7c6ec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24005, "upload_time": "2019-10-26T15:50:41", "upload_time_iso_8601": "2019-10-26T15:50:41.682928Z", "url": "https://files.pythonhosted.org/packages/a0/b1/30e24c0fb8a676107e397d9b164b89d0ef8bda5e770076c8bf376e77ef4a/pelican_image_process-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72192f4fda42dbafa805e7be5e1d4be7", "sha256": "e2c5323904f21b918fe757fd3dc5591f4ad7d2d7b1aaaef87ea4cd7ad5a19b25"}, "downloads": -1, "filename": "pelican_image_process-1.3.0.tar.gz", "has_sig": false, "md5_digest": "72192f4fda42dbafa805e7be5e1d4be7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30018, "upload_time": "2019-10-26T15:50:44", "upload_time_iso_8601": "2019-10-26T15:50:44.666888Z", "url": "https://files.pythonhosted.org/packages/b8/cc/74564faa2d66cf1f677c139ad1f95d86a0171fd1bd5ce6dd70e3cc3c9e5a/pelican_image_process-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:39 2020"}