{"info": {"author": "Yiorgis Gozadinos", "author_email": "ggozad@crypho.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "behaving\n========\n\n*behaving* is a web application testing framework for\nBehavior-Driven-Development, based on `behave`_ and `splinter`_.\n\n*behave* is written in Python and is similar to `Cucumber`_ or `lettuce`_.\n*behaving* adds the step-libraries for multi-user web/email/sms/gcm\ninteractions, and provides the Python *behaving* namespace so that\nindependent step-libraries can work together.\n\nPlease refer to *behave*'s excellent `documentation <http://pythonhosted.org/behave/>`_ for a guide on how to use it, how to write your custom steps and make it possible to extend *behaving*.\n\nHello world\n-----------\n\nStarting to use *behaving* is pretty easy. Inside some python module, add your *features* consisting each of one or more scenarios. These features are Gherkin language files with an extension of ``.feature``. In the same directory you should have a steps module which imports the *behaving* steps as well as your own custom steps (more on that later in the setup_ section) . Here's a basic example:\n\n::\n\n    Feature: Text presence\n\n        Background:\n            Given a browser\n\n        Scenario: Search for BDD\n            When I visit \"http://www.wikipedia.org/\"\n            And I fill in \"search\" with \"BDD\"\n            And I press \"go\"\n            Then I should see \"Behavior-driven development\" within 5 seconds\n\n\nEmail, SMS & GCM (Google Cloud Messaging)\n-----------------------------------------\n\nWhile the web is the focus of *behaving*, it also includes simple mocks for a mail, SMS and a GCM server. These come with a small collection of steps allowing you to do things like:\n\n::\n\n    Feature: Email & SMS\n\n        Scenario: Click link in an email\n            Given a browser\n            When I send an email to \"foo@bar.com\" with subject \"Crypho\" and body \"Try out our product at http://crypho.com\"\n            And I click the link in the email I received at \"foo@bar.com\"\n            Then the browser's URL should be \"http://crypho.com/\"\n\n        Scenario: Receive SMS with body\n            When I send an sms to \"+4745690001\" with body \"Hello world\"\n            Then I should receive an sms at \"+4745690001\" containing \"world\"\n\n        Scenario: Receive GCM Notification\n            When I send a gcm message \"{\"to\":\"deviceID\", \"data\": {\"message\": \"Foo Bar\", \"badge\": 6}}\"\n            Then I should receive a gcm notification at \"deviceID\" containing \"{'data': {'message': 'Foo Bar'}}\"\n\nTypically, it will be your web application that sends email/sms/notifications and testing it comes down to configuring the application to send email/sms/notifications to the mock servers.\n\n\nPersonas & state\n----------------\n\nA lot of web apps today rely on multi-user interactions. To help you with those interactions, *behaving* uses the notion of *personas*. A persona within a test runs in its own instance of a browser and you can have more than one persona (and its browser instance) running concurrently. You switch among personas by calling\n\n::\n\n    Given \"PersonaName\" as the persona\n\nPersonas are also typically implemented as simple dictionaries allowing them to carry state, save and reuse variables inside a scenario. When a persona is first invoked it is created as an empty dictionary. You can predefine personas though with set values.\n\nLet's take the familiar LOTR characters as our test users. On setting up the test environment (details later in the setup_ section), we set up the characters basic variables we might be needing in the tests as such:\n\n::\n\n    PERSONAS = {\n        'Frodo': dict(\n                fullname=u'Frodo Baggins',\n                email=u'frodo@shire.com',\n                password=u'frodopass',\n                mobile='+4745690001',\n                address: {\n                    street: \"The Shire\",\n                    zip: \"4321\"\n                }\n\n            ),\n\n        'Gandalf': dict(\n                fullname=u'Gandalf the Grey',\n                email=u'gandalf@wizardry.com',\n                password=u'gandalfpass',\n                mobile='+4745690004',\n                address: {\n                    street: \"Rivendell street 1\",\n                    zip: \"1234\"\n                }\n            ),\n        ...\n    }\n\n    def before_scenario(context, scenario):\n        ...\n        context.personas = PERSONAS\n\n\nWithin a test and given a persona, you can now use ``$var_name`` to access a variable of a persona. You can also set new variables on personas. So the following,\n\n::\n\n    Given \"Gandalf\" as the persona\n    When I fill in \"name\" with \"$fullname\"\n    And I fill in \"street\" with \"$address.street\"\n    And I set \"title\" to the text of \"document-title\"\n    And I fill in \"delete\" with \"$title\"\n    And I set \"address.country\" to the text of \"country\"\n    And I set \"postaddress\" to:\n    \"\"\"\n    $fullname\n    $address.street, $address.zip, $address.country\n    \"\"\"\n\nwould fill in the field with id ``name`` with ``Gandalf the Grey``, ``street`` with ``Rivendell street 1`` set the variable ``title`` to the text of the element with id ``document-title`` and reuse the variable ``title`` to fill in the field with id ``delete``. It would also store the value of the field with id \"country\" in address[``country``].\nThe ``$var_name`` pattern is also usable in the text received by steps that expect a body of text, which means that the ``postaddress`` persona variable will contain Gandalf's complete snail-mail postage address nicely formatted on multiple lines.\n\nHello Persona example\n---------------------\n\nLet us assume the following (coming from a real example) scenario. `Crypho`_, is an online messaging/sharing site that provides users with end-to-end encrypted real-time communications. *behaving* was written to help test Crypho.\n\nIn Crypho, teams collaborate in *spaces*. To invite somebody in a *space* the invitee has to share a token with an invitor, so both can verify each other's identity.\n\n::\n\n    Feature: Frodo invites Gandalf to The Shire space\n\n        Given state \"the-shire\"\n\n        Scenario: Frodo invites Gandalf to The Shire\n\n            Given \"Gandalf\" as the persona\n            When I log in\n\nBefore the scenarios start, the custom step ``Given state \"the-shire\"`` executes. This preloads the db with data, sets up the server etc. Then the scenario executes:\n\nFirst Gandalf logs in. The step ``Given \"Gandalf\" as the persona``, fires up a browser that belongs to the persona Gandalf. The following step, ``When I log in`` is a custom step defined as follows:\n\n::\n\n    @when('I log in')\n    def log_in(context):\n\n        assert context.persona\n        context.execute_steps(u\"\"\"\n            When I go to Home\n                Then I should see an element with id \"email\" within 2 seconds\n            When I fill in \"email\" with \"$email\"\n            And I press \"send-sms\"\n                Then I should see \"We have sent you an SMS with a security code\" within 2 seconds\n                And I should receive an sms at \"$mobile\"\n                And \"token\" should be enabled\n            When I parse the sms I received at \"$mobile\" and set \"Your Crypho code is {token}\"\n            And I fill in \"token\" with \"$token\"\n            And I fill in \"password\" with \"$password\"\n            And I press \"login\"\n                Then I should see \"Crypho\" within 5 seconds\n        \"\"\")\n\nObserve above how the current persona (Gandalf) parses the sms it receives and saves it as \"token\". Later Gandalf reuses it to fill in the two-factor authentication field.\n\nNow that Gandalf is logged in, the test proceeds with Frodo. Frodo will log in, and invite Gandalf to a private space.\n\n::\n\n            Given \"Frodo\" as the persona\n            When I log in\n            And I click the link with text that contains \"My spaces\"\n            And I click the link with text that contains \"The Shire\"\n            And I press \"invite-members\"\n                Then I should see \"Invite members\" within 1 seconds\n            When I fill in \"invitees\" with \"gandalf@wizardry.com\"\n            And I fill in \"invitation-message\" with \"Come and join us!\"\n            And I press \"send-invitations\"\n                Then I should see \"Your invitations have been sent\" within 2 seconds\n\n\nOnce the invitations are sent we switch back to Gandalf's browser, who should have received a notification in his browser, as well as an email. He then proceeds to send an sms to Frodo with the token who completes the invitation.\n\n::\n\n            Given \"Gandalf\" as the persona\n            Then I should see \"Your invitations have been updated\" within 2 seconds\n            And I should receive an email at \"gandalf@wizardry.com\" containing \"Frodo Baggins has invited you to join a private workspace in Crypho\"\n            When I click the link with text that contains \"Invitations\"\n            And I click the link with text that contains \"Pending invitations\"\n                Then I should see \"Come and join us!\"\n            When I set \"token\" to the text of \"invitation-token\"\n            And I send an sms to \"45699900\" with body \"$token\"\n\n            Given \"Frodo\" as the persona\n                Then I should receive an sms at \"45699900\"\n            When I set \"FrodoToken\" to the body of the sms I received at \"45699900\"\n            And I click the link with text that contains \"Invitations\"\n            And I click the link with text that contains \"Enter authorization token\"\n            And I fill in \"auth-token\" with \"$FrodoToken\"\n            And I press \"Submit\"\n                Then I should see \"The invitation has been accepted.\" within 5 seconds\n                And I should see \"Gandalf the Grey has joined the space, invited by Frodo Baggins\" within 10 seconds\n\nYou can see the test in action on video `here <http://vimeo.com/63672466/>`_.\n\nThere maybe instances where you require personas but do not want a seperate browser associated with each persona, this can be achieved by adding the attribute *single_browser* to the context object (usually performed in one of the hooks in ``environment.py``), e.g:\n\n::\n\n    def before_scenario(context):\n      context.single_browser = True\n\n.. _setup:\n\nSetting up a test environment\n-----------------------------\n\nStart by installing *behaving* by using either ``pip`` or ``easy_install``. This will also install dependencies and create the ``behave`` script with which you invoke your tests. If you prefer using buildout, clone the package itself from its repository, it contains already a buildout configuration.\n\nTypically you will be having a folder containing all your features and steps. For example a directory structure like the following:\n\n::\n\n    features/\n    features/mytest.feature\n    features/myothertest.feature\n    features/environment.py\n    features/steps/\n    features/steps/steps.py\n\nIn the steps directory you will need to import the *behaving* steps you need. You can also define your own steps. So ``steps.py`` might look like:\n\n::\n\n    from behave import when\n    from behaving.web.steps import *\n    from behaving.sms.steps import *\n    from behaving.mail.steps import *\n    from behaving.notifications.gcm.steps import *\n    from behaving.personas.steps import *\n\n    @when('I go to home')\n    def go_to_home(context):\n        context.browser.visit('https://localhost:8080/')\n\nIn ``environment.py`` you specify settings as well the things that need to happen at various stages of testing, i.e. before and after everything, a feature run, or a scenario run. For convenience you can import and reuse ``behaving.environment`` which will perform default actions like closing all browsers after a scenario, clean the email folder etc.\n\nIt is also possible to use ``behaving.web.environment``, ``behaving.mail.environment``, ``behaving.sms.environment`` and ``behaving.personas.environment`` on their own, if you don't have need for SMS for example.\n\nAn example of an environment that does simply set some variables and then rely on default actions for the various stages, might look like the following:\n\n::\n\n    import os\n    from behaving import environment as benv\n\n    PERSONAS = {}\n\n    def before_all(context):\n        import mypackage\n        context.attachment_dir = os.path.join(os.path.dirname(mypackage.__file__), 'tests/data')\n        context.sms_path = os.path.join(os.path.dirname(mypackage.__file__), '../../var/sms/')\n        context.gcm_path = os.path.join(os.path.dirname(mypackage.__file__), '../../var/gcm/')\n        context.mail_path = os.path.join(os.path.dirname(mypackage.__file__), '../../var/mail/')\n        benv.before_all(context)\n\n\n    def after_all(context):\n        benv.after_all(context)\n\n\n    def before_feature(context, feature):\n        benv.before_feature(context, feature)\n\n\n    def after_feature(context, feature):\n        benv.after_feature(context, feature)\n\n\n    def before_scenario(context, scenario):\n        benv.before_scenario(context, scenario)\n        context.personas = PERSONAS\n\n    def after_scenario(context, scenario):\n        benv.after_scenario(context, scenario)\n\nThe following variables are supported and can be set to override defaults:\n\n* ``screenshots_dir`` (the path where screenshots will be saved. If it is set, any failure in a scenario will result in a screenshot of the browser at the time when the failure happened.)\n* ``attachment_dir`` (the path where file attachments can be found)\n* ``sms_path`` (the path to be used by ``smsmock`` to save sms. Defaults to ``current_dir/sms`` )\n* ``gcm_path`` (the path to be used by ``gcmmock`` to save gcm notifications. Defaults to ``current_dir/gcm`` )\n* ``mail_path`` (the path to be used by ``mailmock`` to save mail. Defaults to ``current_dir/mail`` )\n* ``default_browser``\n* ``default_browser_size`` (tuple (width, height), applied to each browser as it's created)\n* ``max_browser_attempts`` (how many times to retry creating the browser if it fails)\n* ``remote_webdriver`` (whether to use the remote webdriver. Defaults to ``False``)\n* ``browser_args`` (a dict of additional keyword arguments used when creating a browser)\n* ``base_url`` (the base url for a browser, allows you to use relative paths)\n\nYou can run the tests simply by issuing\n\n::\n\n    ./bin/behave ./features\n\nFor chrome and docker issues, the code below is useful\n\n::\n\n    from selenium.webdriver.chrome.options import Options\n    chrome_options = Options()\n    chrome_options.add_argument('--no-sandbox')\n    context.browser_args = {\n        'options': chrome_options\n    }\n\nMail, GCM and SMS mock servers\n-------------------------\n\nWhen *behaving* is installed, it creates three scripts to help you test mail, gcm and sms, ``mailmock``, ``gcmmock`` and ``smsmock`` respectively. You can directly invoke them before running your tests, they all take a port as well as the directory to output data as parameters. For example,\n\n::\n\n    ./bin/smsmock -p 8081 -o ./var/sms\n    ./bin/gcmmock -p 8082 -o ./var/notifications/gcm\n    ./bin/mailmock -p 8083 -o ./var/mail [--no-stdout]\n\n\n``behaving.web`` Supported matchers/steps\n-----------------------------------------\n\n* Browsers\n\n    * Given a browser\n      [opens the default browser, i.e. Firefox]\n    * Given ``brand`` as the default browser\n      [sets the default browser to be ``brand``, this is the browser name when using the remote webdriver or Firefox, Chrome, Safari, or PhantomJS]\n    * Given Cordova as the default browser\n      [for use with Cordova mobile apps]\n    * Given the electron app \"``app_path``\"\n      [for use with electron-based desktop apps]\n    * Given browser \"``name``\"\n      [opens the browser named ``name``]\n    * When I reload\n    * When I go back\n    * When I go forward\n    * When I resize the browser to ``width``x``height``\n    * When I resize the viewport to ``width``x``height``\n    * When I take a screenshot\n      [will save a screenshot of the browser if ``screenshots_dir`` is set on the environment. Also, if ``screenshots_dir`` is set, all failing tests will result in a screenshot.]\n    * When I execute the script \"``script``\"\n    * When I set the cookie \"``key``\" to \"``value``\"\n    * When I delete the cookie \"``key``\"\n    * When I delete all cookies\n    * When I close the browser \"``name``\"\n\n* Frames\n\n    * When I switch to frame with css \"``css``\"\n    * When I switch back to the main page\n\n* Windows\n\n    * When I open a new window named \"``name``\" at \"``url``\"\n    * When I name the current window \"``name``\"\n    * When I switch to the window named \"``name``\"\n\n* URLs\n\n    * Given the base url \"``url``\"\n      [sets the base url to ``url``, alternatively set ``context.base_url`` directly in ``environment.py``]\n    * When I visit \"``url``\"\n    * When I go to \"``url``\"\n    * When I parse the url path and set \"``{expression}``\"\n    * Then the browser's URL should be \"``url``\"\n    * Then the browser's URL should contain \"``text``\"\n    * Then the browser's URL should not contain \"``text``\"\n\n* Links\n\n    * When I click the link to \"``url``\"\n    * When I click the link to a url that contains \"``url``\"\n    * When I click the link with text \"``text``\"\n    * When I click the link with text that contains \"``text``\"\n\n* Text, element & class presence\n\n    * When I wait for ``timeout`` seconds\n    * When I show the element with id \"``id``\"\n    * When I hide the element with id \"``id``\"\n\n    * Text\n\n        * Then I should see \"``text``\"\n        * Then I should not see \"``text``\"\n        * Then I should see \"``text``\" within ``timeout`` seconds\n        * Then I should not see \"``text``\" within ``timeout`` seconds\n\n    * ID\n\n        * Then I should see an element with id \"``id``\"\n        * Then I should not see an element with id \"``id``\"\n        * Then I should see an element with id \"``id``\" within ``timeout`` seconds\n        * Then I should not see an element with id \"``id``\" within ``timeout`` seconds\n\n    * CSS\n\n        * Existence\n\n            * Then I should see an element with the css selector \"``selector``\"\n            * Then I should not see an element with the css selector \"``selector``\"\n            * Then I should see an element with the css selector \"``selector``\" within ``timeout`` seconds\n            * Then I should not see an element with the css selector \"``selector``\" within ``timeout`` seconds\n            * Then I should see ``n`` elements with the css selector \"``css``\"\n            * Then I should see at least ``n`` elements with the css selector \"``css``\" within ``timeout`` seconds\n\n        * Visibility\n\n            * Then the element with the css selector \"``css``\" should be visible\n            * Then the element with the css selector \"``css``\" should be visible within ``timeout`` seconds\n            * Then the element with the css selector \"``css``\" should not be visible\n            * Then the element with the css selector \"``css``\" should be visible within ``timeout`` seconds\n            * Then {n:d} elements with the css selector \"``css``\" should be visible\n            * Then {n:d} elements with the css selector \"``css``\" should be visible within ``timeout`` seconds\n            * Then at least {n:d} elements with the css selector \"``css``\" should be visible\n            * Then at least {n:d} elements with the css selector \"``css``\" should be visible within ``timeout`` seconds\n\n        * Existence of a class on an element\n\n            * Then the element with xpath \"``xpath``\" should have the class \"``cls``\"\n            * Then the element with xpath \"``xpath``\" should not have the class \"``cls``\"\n            * Then the element with xpath \"``xpath``\" should have the class \"``cls``\" within ``timeout`` seconds\n            * Then the element with xpath \"``xpath``\" should not have the class \"``cls``\" within ``timeout`` seconds\n            * Then \"``name``\" should have the class \"``cls``\"\n            * Then \"``name``\" should not have the class \"``cls``\"\n            * Then \"``name``\" should have the class \"``cls``\" within ``timeout`` seconds\n            * Then \"``name``\" should not have the class \"``cls``\" within ``timeout:d`` seconds\n\n    * XPath\n\n        * Then I should see an element with xpath \"``xpath``\"\n        * Then I should not see an element with xpath \"``xpath``\"\n        * Then I should see an element with xpath \"``xpath``\" within ``timeout`` seconds\n        * Then I should not see an element with xpath \"``xpath``\" within ``timeout`` seconds\n\n\n* Forms\n\n    * When I fill in \"``name``\" with \"``value``\"\n    * When I clear field \"``name``\"\n    * When I type \"``value``\" to \"``name``\"\n      [same as fill, but happens slowly triggering keyboard events]\n    * When I choose \"``value``\" from \"``name``\"\n    * When I check \"``name``\"\n    * When I uncheck \"``name``\"\n    * When I select \"``value``\" from \"``name``\"\"\n    * When I select by text \"``text``\" from \"``name``\"\"\n    * When I press \"``name|id|text|innerText``\"\n    * When I press the element with xpath \"``xpath``\"\n    * When I attach the file \"``path``\" to \"``name``\"\n    * When I set the innner HTML of the element with id \"``id``\" to \"``contents``\"\n      [Sets html on a ``contenteditable`` element with id ``id`` to ``contents``]\n    * When I set the innner HTML of the element with class \"``class``\" to \"``contents``\"\n    * When I set the innner HTML of the element with class \"``class``\" to \"``contents``\"\n    * When I send \"``KEY``\" to \"``name``\"\n    * When I focus on \"``name``\"\n    * Then field \"``name``\" should have the value \"``value``\"\n    * Then \"``name``\" should be enabled\n    * Then \"``name``\" should be disabled\n    * Then \"``name``\" should not be enabled\n    * Then \"``name``\" should be valid\n    * Then \"``name``\" should be invalid\n    * Then \"``name``\" should not be valid\n    * Then \"``name``\" should be required\n    * Then \"``name``\" should not be required\n\n* Alerts & prompts\n    * When I enter \"``text``\" to the alert\n    * When I accept the alert\n    * When I dismiss the alert\n    * Then I should see an alert\n    * Then I should see an alert within ``timeout`` seconds\n    * Then I should see an alert containing \"``text``\"\n    * Then I should see an alert containing \"``text``\" within ``timeout`` seconds\n\n* Mouse\n\n    * When I mouse over the element with xpath \"``xpath``\"\n    * When I mouse out of the element with xpath \"``xpath``\"\n\n* Downloads\n\n    * Then the file \"``filename``\" with contents \"``text``\" should have been downloaded within ``timeout`` seconds\n    * Then the file \"``filename``\" should have been downloaded within ``timeout`` seconds\n\n* Persona interaction & variables\n\n    * When I set \"``key``\" to the text of \"``id|name``\"\n    * When I set \"``key``\" to the attribute \"``attr``\" of the element with xpath \"``xpath``\"\n    * When I evaluate the script \"``script``\" and assign the result to \"``key``\"\n\n\n``behaving.mail`` Supported matchers/steps\n------------------------------------------\n\n* When I click the link in the email I received at \"``address``\"\n* When I parse the email I received at \"``address``\" and set \"``expression``\"\n* Then I should receive an email at \"``address``\"\n* Then I should receive an email at \"``address``\" with subject \"``subject``\"\n* Then I should receive an email at \"``address``\" containing \"``text``\"\n* Then I should receive an email at \"``address``\" with attachment \"``filename``\"\n* Then I should not have received any emails at \"``address``\"\n\n``behaving.sms`` Supported matchers/steps\n-----------------------------------------\n\n* When I set \"``key``\" to the body of the sms I received at \"``number``\"\n* When I parse the sms I received at \"``number``\" and set \"``expression``\"\n* Then I should receive an sms at \"``number``\"\n* Then I should receive an sms at \"``number``\" containing \"``text``\"\n\n``behaving.notifications.gcm`` Supported matchers/steps\n-----------------------------------------\n\n* When I send a gcm message \"{\"to\":\"deviceID\", \"data\": {\"message\": \"Foo Bar\", \"badge\": 6}}\"\n* Then I should receive a gcm notification at \"deviceID\" containing \"{'data': {'message': 'Foo Bar'}}\"\n* Then I should have received any gcm notifications at \"deviceID\"\n\n``behaving.personas`` Supported matchers/steps\n----------------------------------------------\n\n* Given \"``name``\" as the persona\n* When I set \"``key``\" to \"``value``\"\n* When I set \"``key``\" to:\n  \"\"\"\n  ``some longer body of text``\n  ``usually multiline``\n  \"\"\"\n* When I clone persona \"``source``\" to \"``target``\"\n* Then \"``key``\" is set to \"``value``\"\n\nDebugging\n---------\n\n* When I pause the tests\n\nContributing to behaving\n------------------------\nPlease see the `Contribution Guidelines`_\n\n.. _`Cucumber`: http://cukes.info/\n.. _`lettuce`: http://lettuce.it/\n.. _`behave`: http://pypi.python.org/pypi/behave\n.. _`splinter`: http://splinter.cobrateam.info/\n.. _`Crypho`: http://crypho.com\n.. _`Contribution Guidelines`: https://github.com/ggozad/behaving/blob/master/CONTRIBUTING.rst\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ggozad/behaving", "keywords": "BDD Behavior-Driven-Development testing", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "behaving", "package_url": "https://pypi.org/project/behaving/", "platform": "", "project_url": "https://pypi.org/project/behaving/", "project_urls": {"Homepage": "http://github.com/ggozad/behaving"}, "release_url": "https://pypi.org/project/behaving/1.5.6/", "requires_dist": null, "requires_python": "", "summary": "Behavior-Driven-Development testing for multi-user web/mail/sms apps", "version": "1.5.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            behaving<br>========<br><br>*behaving* is a web application testing framework for<br>Behavior-Driven-Development, based on `behave`_ and `splinter`_.<br><br>*behave* is written in Python and is similar to `Cucumber`_ or `lettuce`_.<br>*behaving* adds the step-libraries for multi-user web/email/sms/gcm<br>interactions, and provides the Python *behaving* namespace so that<br>independent step-libraries can work together.<br><br>Please refer to *behave*'s excellent `documentation &lt;http://pythonhosted.org/behave/&gt;`_ for a guide on how to use it, how to write your custom steps and make it possible to extend *behaving*.<br><br>Hello world<br>-----------<br><br>Starting to use *behaving* is pretty easy. Inside some python module, add your *features* consisting each of one or more scenarios. These features are Gherkin language files with an extension of ``.feature``. In the same directory you should have a steps module which imports the *behaving* steps as well as your own custom steps (more on that later in the setup_ section) . Here's a basic example:<br><br>::<br><br>    Feature: Text presence<br><br>        Background:<br>            Given a browser<br><br>        Scenario: Search for BDD<br>            When I visit \"http://www.wikipedia.org/\"<br>            And I fill in \"search\" with \"BDD\"<br>            And I press \"go\"<br>            Then I should see \"Behavior-driven development\" within 5 seconds<br><br><br>Email, SMS &amp; GCM (Google Cloud Messaging)<br>-----------------------------------------<br><br>While the web is the focus of *behaving*, it also includes simple mocks for a mail, SMS and a GCM server. These come with a small collection of steps allowing you to do things like:<br><br>::<br><br>    Feature: Email &amp; SMS<br><br>        Scenario: Click link in an email<br>            Given a browser<br>            When I send an email to \"foo@bar.com\" with subject \"Crypho\" and body \"Try out our product at http://crypho.com\"<br>            And I click the link in the email I received at \"foo@bar.com\"<br>            Then the browser's URL should be \"http://crypho.com/\"<br><br>        Scenario: Receive SMS with body<br>            When I send an sms to \"+4745690001\" with body \"Hello world\"<br>            Then I should receive an sms at \"+4745690001\" containing \"world\"<br><br>        Scenario: Receive GCM Notification<br>            When I send a gcm message \"{\"to\":\"deviceID\", \"data\": {\"message\": \"Foo Bar\", \"badge\": 6}}\"<br>            Then I should receive a gcm notification at \"deviceID\" containing \"{'data': {'message': 'Foo Bar'}}\"<br><br>Typically, it will be your web application that sends email/sms/notifications and testing it comes down to configuring the application to send email/sms/notifications to the mock servers.<br><br><br>Personas &amp; state<br>----------------<br><br>A lot of web apps today rely on multi-user interactions. To help you with those interactions, *behaving* uses the notion of *personas*. A persona within a test runs in its own instance of a browser and you can have more than one persona (and its browser instance) running concurrently. You switch among personas by calling<br><br>::<br><br>    Given \"PersonaName\" as the persona<br><br>Personas are also typically implemented as simple dictionaries allowing them to carry state, save and reuse variables inside a scenario. When a persona is first invoked it is created as an empty dictionary. You can predefine personas though with set values.<br><br>Let's take the familiar LOTR characters as our test users. On setting up the test environment (details later in the setup_ section), we set up the characters basic variables we might be needing in the tests as such:<br><br>::<br><br>    PERSONAS = {<br>        'Frodo': dict(<br>                fullname=u'Frodo Baggins',<br>                email=u'frodo@shire.com',<br>                password=u'frodopass',<br>                mobile='+4745690001',<br>                address: {<br>                    street: \"The Shire\",<br>                    zip: \"4321\"<br>                }<br><br>            ),<br><br>        'Gandalf': dict(<br>                fullname=u'Gandalf the Grey',<br>                email=u'gandalf@wizardry.com',<br>                password=u'gandalfpass',<br>                mobile='+4745690004',<br>                address: {<br>                    street: \"Rivendell street 1\",<br>                    zip: \"1234\"<br>                }<br>            ),<br>        ...<br>    }<br><br>    def before_scenario(context, scenario):<br>        ...<br>        context.personas = PERSONAS<br><br><br>Within a test and given a persona, you can now use ``$var_name`` to access a variable of a persona. You can also set new variables on personas. So the following,<br><br>::<br><br>    Given \"Gandalf\" as the persona<br>    When I fill in \"name\" with \"$fullname\"<br>    And I fill in \"street\" with \"$address.street\"<br>    And I set \"title\" to the text of \"document-title\"<br>    And I fill in \"delete\" with \"$title\"<br>    And I set \"address.country\" to the text of \"country\"<br>    And I set \"postaddress\" to:<br>    \"\"\"<br>    $fullname<br>    $address.street, $address.zip, $address.country<br>    \"\"\"<br><br>would fill in the field with id ``name`` with ``Gandalf the Grey``, ``street`` with ``Rivendell street 1`` set the variable ``title`` to the text of the element with id ``document-title`` and reuse the variable ``title`` to fill in the field with id ``delete``. It would also store the value of the field with id \"country\" in address[``country``].<br>The ``$var_name`` pattern is also usable in the text received by steps that expect a body of text, which means that the ``postaddress`` persona variable will contain Gandalf's complete snail-mail postage address nicely formatted on multiple lines.<br><br>Hello Persona example<br>---------------------<br><br>Let us assume the following (coming from a real example) scenario. `Crypho`_, is an online messaging/sharing site that provides users with end-to-end encrypted real-time communications. *behaving* was written to help test Crypho.<br><br>In Crypho, teams collaborate in *spaces*. To invite somebody in a *space* the invitee has to share a token with an invitor, so both can verify each other's identity.<br><br>::<br><br>    Feature: Frodo invites Gandalf to The Shire space<br><br>        Given state \"the-shire\"<br><br>        Scenario: Frodo invites Gandalf to The Shire<br><br>            Given \"Gandalf\" as the persona<br>            When I log in<br><br>Before the scenarios start, the custom step ``Given state \"the-shire\"`` executes. This preloads the db with data, sets up the server etc. Then the scenario executes:<br><br>First Gandalf logs in. The step ``Given \"Gandalf\" as the persona``, fires up a browser that belongs to the persona Gandalf. The following step, ``When I log in`` is a custom step defined as follows:<br><br>::<br><br>    @when('I log in')<br>    def log_in(context):<br><br>        assert context.persona<br>        context.execute_steps(u\"\"\"<br>            When I go to Home<br>                Then I should see an element with id \"email\" within 2 seconds<br>            When I fill in \"email\" with \"$email\"<br>            And I press \"send-sms\"<br>                Then I should see \"We have sent you an SMS with a security code\" within 2 seconds<br>                And I should receive an sms at \"$mobile\"<br>                And \"token\" should be enabled<br>            When I parse the sms I received at \"$mobile\" and set \"Your Crypho code is {token}\"<br>            And I fill in \"token\" with \"$token\"<br>            And I fill in \"password\" with \"$password\"<br>            And I press \"login\"<br>                Then I should see \"Crypho\" within 5 seconds<br>        \"\"\")<br><br>Observe above how the current persona (Gandalf) parses the sms it receives and saves it as \"token\". Later Gandalf reuses it to fill in the two-factor authentication field.<br><br>Now that Gandalf is logged in, the test proceeds with Frodo. Frodo will log in, and invite Gandalf to a private space.<br><br>::<br><br>            Given \"Frodo\" as the persona<br>            When I log in<br>            And I click the link with text that contains \"My spaces\"<br>            And I click the link with text that contains \"The Shire\"<br>            And I press \"invite-members\"<br>                Then I should see \"Invite members\" within 1 seconds<br>            When I fill in \"invitees\" with \"gandalf@wizardry.com\"<br>            And I fill in \"invitation-message\" with \"Come and join us!\"<br>            And I press \"send-invitations\"<br>                Then I should see \"Your invitations have been sent\" within 2 seconds<br><br><br>Once the invitations are sent we switch back to Gandalf's browser, who should have received a notification in his browser, as well as an email. He then proceeds to send an sms to Frodo with the token who completes the invitation.<br><br>::<br><br>            Given \"Gandalf\" as the persona<br>            Then I should see \"Your invitations have been updated\" within 2 seconds<br>            And I should receive an email at \"gandalf@wizardry.com\" containing \"Frodo Baggins has invited you to join a private workspace in Crypho\"<br>            When I click the link with text that contains \"Invitations\"<br>            And I click the link with text that contains \"Pending invitations\"<br>                Then I should see \"Come and join us!\"<br>            When I set \"token\" to the text of \"invitation-token\"<br>            And I send an sms to \"45699900\" with body \"$token\"<br><br>            Given \"Frodo\" as the persona<br>                Then I should receive an sms at \"45699900\"<br>            When I set \"FrodoToken\" to the body of the sms I received at \"45699900\"<br>            And I click the link with text that contains \"Invitations\"<br>            And I click the link with text that contains \"Enter authorization token\"<br>            And I fill in \"auth-token\" with \"$FrodoToken\"<br>            And I press \"Submit\"<br>                Then I should see \"The invitation has been accepted.\" within 5 seconds<br>                And I should see \"Gandalf the Grey has joined the space, invited by Frodo Baggins\" within 10 seconds<br><br>You can see the test in action on video `here &lt;http://vimeo.com/63672466/&gt;`_.<br><br>There maybe instances where you require personas but do not want a seperate browser associated with each persona, this can be achieved by adding the attribute *single_browser* to the context object (usually performed in one of the hooks in ``environment.py``), e.g:<br><br>::<br><br>    def before_scenario(context):<br>      context.single_browser = True<br><br>.. _setup:<br><br>Setting up a test environment<br>-----------------------------<br><br>Start by installing *behaving* by using either ``pip`` or ``easy_install``. This will also install dependencies and create the ``behave`` script with which you invoke your tests. If you prefer using buildout, clone the package itself from its repository, it contains already a buildout configuration.<br><br>Typically you will be having a folder containing all your features and steps. For example a directory structure like the following:<br><br>::<br><br>    features/<br>    features/mytest.feature<br>    features/myothertest.feature<br>    features/environment.py<br>    features/steps/<br>    features/steps/steps.py<br><br>In the steps directory you will need to import the *behaving* steps you need. You can also define your own steps. So ``steps.py`` might look like:<br><br>::<br><br>    from behave import when<br>    from behaving.web.steps import *<br>    from behaving.sms.steps import *<br>    from behaving.mail.steps import *<br>    from behaving.notifications.gcm.steps import *<br>    from behaving.personas.steps import *<br><br>    @when('I go to home')<br>    def go_to_home(context):<br>        context.browser.visit('https://localhost:8080/')<br><br>In ``environment.py`` you specify settings as well the things that need to happen at various stages of testing, i.e. before and after everything, a feature run, or a scenario run. For convenience you can import and reuse ``behaving.environment`` which will perform default actions like closing all browsers after a scenario, clean the email folder etc.<br><br>It is also possible to use ``behaving.web.environment``, ``behaving.mail.environment``, ``behaving.sms.environment`` and ``behaving.personas.environment`` on their own, if you don't have need for SMS for example.<br><br>An example of an environment that does simply set some variables and then rely on default actions for the various stages, might look like the following:<br><br>::<br><br>    import os<br>    from behaving import environment as benv<br><br>    PERSONAS = {}<br><br>    def before_all(context):<br>        import mypackage<br>        context.attachment_dir = os.path.join(os.path.dirname(mypackage.__file__), 'tests/data')<br>        context.sms_path = os.path.join(os.path.dirname(mypackage.__file__), '../../var/sms/')<br>        context.gcm_path = os.path.join(os.path.dirname(mypackage.__file__), '../../var/gcm/')<br>        context.mail_path = os.path.join(os.path.dirname(mypackage.__file__), '../../var/mail/')<br>        benv.before_all(context)<br><br><br>    def after_all(context):<br>        benv.after_all(context)<br><br><br>    def before_feature(context, feature):<br>        benv.before_feature(context, feature)<br><br><br>    def after_feature(context, feature):<br>        benv.after_feature(context, feature)<br><br><br>    def before_scenario(context, scenario):<br>        benv.before_scenario(context, scenario)<br>        context.personas = PERSONAS<br><br>    def after_scenario(context, scenario):<br>        benv.after_scenario(context, scenario)<br><br>The following variables are supported and can be set to override defaults:<br><br>* ``screenshots_dir`` (the path where screenshots will be saved. If it is set, any failure in a scenario will result in a screenshot of the browser at the time when the failure happened.)<br>* ``attachment_dir`` (the path where file attachments can be found)<br>* ``sms_path`` (the path to be used by ``smsmock`` to save sms. Defaults to ``current_dir/sms`` )<br>* ``gcm_path`` (the path to be used by ``gcmmock`` to save gcm notifications. Defaults to ``current_dir/gcm`` )<br>* ``mail_path`` (the path to be used by ``mailmock`` to save mail. Defaults to ``current_dir/mail`` )<br>* ``default_browser``<br>* ``default_browser_size`` (tuple (width, height), applied to each browser as it's created)<br>* ``max_browser_attempts`` (how many times to retry creating the browser if it fails)<br>* ``remote_webdriver`` (whether to use the remote webdriver. Defaults to ``False``)<br>* ``browser_args`` (a dict of additional keyword arguments used when creating a browser)<br>* ``base_url`` (the base url for a browser, allows you to use relative paths)<br><br>You can run the tests simply by issuing<br><br>::<br><br>    ./bin/behave ./features<br><br>For chrome and docker issues, the code below is useful<br><br>::<br><br>    from selenium.webdriver.chrome.options import Options<br>    chrome_options = Options()<br>    chrome_options.add_argument('--no-sandbox')<br>    context.browser_args = {<br>        'options': chrome_options<br>    }<br><br>Mail, GCM and SMS mock servers<br>-------------------------<br><br>When *behaving* is installed, it creates three scripts to help you test mail, gcm and sms, ``mailmock``, ``gcmmock`` and ``smsmock`` respectively. You can directly invoke them before running your tests, they all take a port as well as the directory to output data as parameters. For example,<br><br>::<br><br>    ./bin/smsmock -p 8081 -o ./var/sms<br>    ./bin/gcmmock -p 8082 -o ./var/notifications/gcm<br>    ./bin/mailmock -p 8083 -o ./var/mail [--no-stdout]<br><br><br>``behaving.web`` Supported matchers/steps<br>-----------------------------------------<br><br>* Browsers<br><br>    * Given a browser<br>      [opens the default browser, i.e. Firefox]<br>    * Given ``brand`` as the default browser<br>      [sets the default browser to be ``brand``, this is the browser name when using the remote webdriver or Firefox, Chrome, Safari, or PhantomJS]<br>    * Given Cordova as the default browser<br>      [for use with Cordova mobile apps]<br>    * Given the electron app \"``app_path``\"<br>      [for use with electron-based desktop apps]<br>    * Given browser \"``name``\"<br>      [opens the browser named ``name``]<br>    * When I reload<br>    * When I go back<br>    * When I go forward<br>    * When I resize the browser to ``width``x``height``<br>    * When I resize the viewport to ``width``x``height``<br>    * When I take a screenshot<br>      [will save a screenshot of the browser if ``screenshots_dir`` is set on the environment. Also, if ``screenshots_dir`` is set, all failing tests will result in a screenshot.]<br>    * When I execute the script \"``script``\"<br>    * When I set the cookie \"``key``\" to \"``value``\"<br>    * When I delete the cookie \"``key``\"<br>    * When I delete all cookies<br>    * When I close the browser \"``name``\"<br><br>* Frames<br><br>    * When I switch to frame with css \"``css``\"<br>    * When I switch back to the main page<br><br>* Windows<br><br>    * When I open a new window named \"``name``\" at \"``url``\"<br>    * When I name the current window \"``name``\"<br>    * When I switch to the window named \"``name``\"<br><br>* URLs<br><br>    * Given the base url \"``url``\"<br>      [sets the base url to ``url``, alternatively set ``context.base_url`` directly in ``environment.py``]<br>    * When I visit \"``url``\"<br>    * When I go to \"``url``\"<br>    * When I parse the url path and set \"``{expression}``\"<br>    * Then the browser's URL should be \"``url``\"<br>    * Then the browser's URL should contain \"``text``\"<br>    * Then the browser's URL should not contain \"``text``\"<br><br>* Links<br><br>    * When I click the link to \"``url``\"<br>    * When I click the link to a url that contains \"``url``\"<br>    * When I click the link with text \"``text``\"<br>    * When I click the link with text that contains \"``text``\"<br><br>* Text, element &amp; class presence<br><br>    * When I wait for ``timeout`` seconds<br>    * When I show the element with id \"``id``\"<br>    * When I hide the element with id \"``id``\"<br><br>    * Text<br><br>        * Then I should see \"``text``\"<br>        * Then I should not see \"``text``\"<br>        * Then I should see \"``text``\" within ``timeout`` seconds<br>        * Then I should not see \"``text``\" within ``timeout`` seconds<br><br>    * ID<br><br>        * Then I should see an element with id \"``id``\"<br>        * Then I should not see an element with id \"``id``\"<br>        * Then I should see an element with id \"``id``\" within ``timeout`` seconds<br>        * Then I should not see an element with id \"``id``\" within ``timeout`` seconds<br><br>    * CSS<br><br>        * Existence<br><br>            * Then I should see an element with the css selector \"``selector``\"<br>            * Then I should not see an element with the css selector \"``selector``\"<br>            * Then I should see an element with the css selector \"``selector``\" within ``timeout`` seconds<br>            * Then I should not see an element with the css selector \"``selector``\" within ``timeout`` seconds<br>            * Then I should see ``n`` elements with the css selector \"``css``\"<br>            * Then I should see at least ``n`` elements with the css selector \"``css``\" within ``timeout`` seconds<br><br>        * Visibility<br><br>            * Then the element with the css selector \"``css``\" should be visible<br>            * Then the element with the css selector \"``css``\" should be visible within ``timeout`` seconds<br>            * Then the element with the css selector \"``css``\" should not be visible<br>            * Then the element with the css selector \"``css``\" should be visible within ``timeout`` seconds<br>            * Then {n:d} elements with the css selector \"``css``\" should be visible<br>            * Then {n:d} elements with the css selector \"``css``\" should be visible within ``timeout`` seconds<br>            * Then at least {n:d} elements with the css selector \"``css``\" should be visible<br>            * Then at least {n:d} elements with the css selector \"``css``\" should be visible within ``timeout`` seconds<br><br>        * Existence of a class on an element<br><br>            * Then the element with xpath \"``xpath``\" should have the class \"``cls``\"<br>            * Then the element with xpath \"``xpath``\" should not have the class \"``cls``\"<br>            * Then the element with xpath \"``xpath``\" should have the class \"``cls``\" within ``timeout`` seconds<br>            * Then the element with xpath \"``xpath``\" should not have the class \"``cls``\" within ``timeout`` seconds<br>            * Then \"``name``\" should have the class \"``cls``\"<br>            * Then \"``name``\" should not have the class \"``cls``\"<br>            * Then \"``name``\" should have the class \"``cls``\" within ``timeout`` seconds<br>            * Then \"``name``\" should not have the class \"``cls``\" within ``timeout:d`` seconds<br><br>    * XPath<br><br>        * Then I should see an element with xpath \"``xpath``\"<br>        * Then I should not see an element with xpath \"``xpath``\"<br>        * Then I should see an element with xpath \"``xpath``\" within ``timeout`` seconds<br>        * Then I should not see an element with xpath \"``xpath``\" within ``timeout`` seconds<br><br><br>* Forms<br><br>    * When I fill in \"``name``\" with \"``value``\"<br>    * When I clear field \"``name``\"<br>    * When I type \"``value``\" to \"``name``\"<br>      [same as fill, but happens slowly triggering keyboard events]<br>    * When I choose \"``value``\" from \"``name``\"<br>    * When I check \"``name``\"<br>    * When I uncheck \"``name``\"<br>    * When I select \"``value``\" from \"``name``\"\"<br>    * When I select by text \"``text``\" from \"``name``\"\"<br>    * When I press \"``name|id|text|innerText``\"<br>    * When I press the element with xpath \"``xpath``\"<br>    * When I attach the file \"``path``\" to \"``name``\"<br>    * When I set the innner HTML of the element with id \"``id``\" to \"``contents``\"<br>      [Sets html on a ``contenteditable`` element with id ``id`` to ``contents``]<br>    * When I set the innner HTML of the element with class \"``class``\" to \"``contents``\"<br>    * When I set the innner HTML of the element with class \"``class``\" to \"``contents``\"<br>    * When I send \"``KEY``\" to \"``name``\"<br>    * When I focus on \"``name``\"<br>    * Then field \"``name``\" should have the value \"``value``\"<br>    * Then \"``name``\" should be enabled<br>    * Then \"``name``\" should be disabled<br>    * Then \"``name``\" should not be enabled<br>    * Then \"``name``\" should be valid<br>    * Then \"``name``\" should be invalid<br>    * Then \"``name``\" should not be valid<br>    * Then \"``name``\" should be required<br>    * Then \"``name``\" should not be required<br><br>* Alerts &amp; prompts<br>    * When I enter \"``text``\" to the alert<br>    * When I accept the alert<br>    * When I dismiss the alert<br>    * Then I should see an alert<br>    * Then I should see an alert within ``timeout`` seconds<br>    * Then I should see an alert containing \"``text``\"<br>    * Then I should see an alert containing \"``text``\" within ``timeout`` seconds<br><br>* Mouse<br><br>    * When I mouse over the element with xpath \"``xpath``\"<br>    * When I mouse out of the element with xpath \"``xpath``\"<br><br>* Downloads<br><br>    * Then the file \"``filename``\" with contents \"``text``\" should have been downloaded within ``timeout`` seconds<br>    * Then the file \"``filename``\" should have been downloaded within ``timeout`` seconds<br><br>* Persona interaction &amp; variables<br><br>    * When I set \"``key``\" to the text of \"``id|name``\"<br>    * When I set \"``key``\" to the attribute \"``attr``\" of the element with xpath \"``xpath``\"<br>    * When I evaluate the script \"``script``\" and assign the result to \"``key``\"<br><br><br>``behaving.mail`` Supported matchers/steps<br>------------------------------------------<br><br>* When I click the link in the email I received at \"``address``\"<br>* When I parse the email I received at \"``address``\" and set \"``expression``\"<br>* Then I should receive an email at \"``address``\"<br>* Then I should receive an email at \"``address``\" with subject \"``subject``\"<br>* Then I should receive an email at \"``address``\" containing \"``text``\"<br>* Then I should receive an email at \"``address``\" with attachment \"``filename``\"<br>* Then I should not have received any emails at \"``address``\"<br><br>``behaving.sms`` Supported matchers/steps<br>-----------------------------------------<br><br>* When I set \"``key``\" to the body of the sms I received at \"``number``\"<br>* When I parse the sms I received at \"``number``\" and set \"``expression``\"<br>* Then I should receive an sms at \"``number``\"<br>* Then I should receive an sms at \"``number``\" containing \"``text``\"<br><br>``behaving.notifications.gcm`` Supported matchers/steps<br>-----------------------------------------<br><br>* When I send a gcm message \"{\"to\":\"deviceID\", \"data\": {\"message\": \"Foo Bar\", \"badge\": 6}}\"<br>* Then I should receive a gcm notification at \"deviceID\" containing \"{'data': {'message': 'Foo Bar'}}\"<br>* Then I should have received any gcm notifications at \"deviceID\"<br><br>``behaving.personas`` Supported matchers/steps<br>----------------------------------------------<br><br>* Given \"``name``\" as the persona<br>* When I set \"``key``\" to \"``value``\"<br>* When I set \"``key``\" to:<br>  \"\"\"<br>  ``some longer body of text``<br>  ``usually multiline``<br>  \"\"\"<br>* When I clone persona \"``source``\" to \"``target``\"<br>* Then \"``key``\" is set to \"``value``\"<br><br>Debugging<br>---------<br><br>* When I pause the tests<br><br>Contributing to behaving<br>------------------------<br>Please see the `Contribution Guidelines`_<br><br>.. _`Cucumber`: http://cukes.info/<br>.. _`lettuce`: http://lettuce.it/<br>.. _`behave`: http://pypi.python.org/pypi/behave<br>.. _`splinter`: http://splinter.cobrateam.info/<br>.. _`Crypho`: http://crypho.com<br>.. _`Contribution Guidelines`: https://github.com/ggozad/behaving/blob/master/CONTRIBUTING.rst<br>\n          </div>"}, "last_serial": 2810571, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5c19cf6b21afe46d0b776790f29bbc3d", "sha256": "40164b955594fb255ce11e3e6c11f413d5098ba8e4d7c9161319134171d8a586"}, "downloads": -1, "filename": "behaving-0.1.zip", "has_sig": false, "md5_digest": "5c19cf6b21afe46d0b776790f29bbc3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48646, "upload_time": "2013-04-09T18:31:56", "upload_time_iso_8601": "2013-04-09T18:31:56.249249Z", "url": "https://files.pythonhosted.org/packages/b9/c5/0fa27ddee71e0c7b60731522deee8536274c8fd0f715cbb86cd5b0f461b7/behaving-0.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d89fdc27330169e12c1195b919ced29e", "sha256": "4df46973d6899b4dd29dd7c70b54ea95958753df3d9883ae961fde2477f4e4bd"}, "downloads": -1, "filename": "behaving-0.2.zip", "has_sig": false, "md5_digest": "d89fdc27330169e12c1195b919ced29e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50420, "upload_time": "2013-04-19T10:58:43", "upload_time_iso_8601": "2013-04-19T10:58:43.114183Z", "url": "https://files.pythonhosted.org/packages/80/4b/75061b6d991d5824f16c875d3dd32b5203cb22d13d8fcb5243e80453de76/behaving-0.2.zip", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "24c83a1b1dd300f725fcb91f6232994f", "sha256": "dde098cd02599dca37a00a739e43b70a91992b16a78df4385290b61c181d8ff8"}, "downloads": -1, "filename": "behaving-0.3.zip", "has_sig": false, "md5_digest": "24c83a1b1dd300f725fcb91f6232994f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51376, "upload_time": "2013-09-05T08:21:25", "upload_time_iso_8601": "2013-09-05T08:21:25.181582Z", "url": "https://files.pythonhosted.org/packages/9f/46/e54199c409e74d2066b31693181c196c76298c111ad1348251f2acd18de6/behaving-0.3.zip", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "4f91cd7d064443034ef16a5a61306856", "sha256": "c04b657f1d5fdb2fa674b36b08c50c4f8956b95dc261d7a73c3a1e8a52200627"}, "downloads": -1, "filename": "behaving-0.4.zip", "has_sig": false, "md5_digest": "4f91cd7d064443034ef16a5a61306856", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51869, "upload_time": "2013-11-08T13:38:40", "upload_time_iso_8601": "2013-11-08T13:38:40.559952Z", "url": "https://files.pythonhosted.org/packages/97/c4/1bcaaecbf3bf28ed35420bb5b44969e1ecb738abe4a2d72392e2576ab56e/behaving-0.4.zip", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "501a464d6306a6e2ac600f29d3b0ebd4", "sha256": "9115ce03d2bb7c1f84c99e539580c54068fbfd67da6dcbe023ce39b2cc1e1830"}, "downloads": -1, "filename": "behaving-0.5.zip", "has_sig": false, "md5_digest": "501a464d6306a6e2ac600f29d3b0ebd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53514, "upload_time": "2014-02-04T13:21:41", "upload_time_iso_8601": "2014-02-04T13:21:41.032234Z", "url": "https://files.pythonhosted.org/packages/6b/b8/1a9bcf4c3e5f2212e7d46c583047a67e148aadc1fcdf08f9bf130d032346/behaving-0.5.zip", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "c97aa2529ba84ccfa0662c4931db228e", "sha256": "efe1ddd72bc4c294ee4265848a79ef3be3f833ae2bc5f796b3e75c371a9b2724"}, "downloads": -1, "filename": "behaving-0.6.zip", "has_sig": false, "md5_digest": "c97aa2529ba84ccfa0662c4931db228e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53499, "upload_time": "2014-02-07T08:53:23", "upload_time_iso_8601": "2014-02-07T08:53:23.927847Z", "url": "https://files.pythonhosted.org/packages/f0/e2/45ba37916871aa029b84d6f0424ddb121d93d327f26c0e793066c3d91439/behaving-0.6.zip", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "ceaf878f7ae28072fb4405dea7340f76", "sha256": "1854a45d4d4835a9fc3ec191834a067b022793adad56aced6894ece157e97156"}, "downloads": -1, "filename": "behaving-0.7.zip", "has_sig": false, "md5_digest": "ceaf878f7ae28072fb4405dea7340f76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54269, "upload_time": "2014-04-07T08:00:48", "upload_time_iso_8601": "2014-04-07T08:00:48.239753Z", "url": "https://files.pythonhosted.org/packages/4b/7b/cf2c224522e3a08fd6e445182c9389036dcb646ccce0be3bdf82548922bb/behaving-0.7.zip", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "3176d6774386b4cf7e75b8198601112a", "sha256": "572453cdf683237193fb71dc2d876e3b8f37468b2b5ff2e187c2a4ba87263408"}, "downloads": -1, "filename": "behaving-0.8.zip", "has_sig": false, "md5_digest": "3176d6774386b4cf7e75b8198601112a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56688, "upload_time": "2014-07-18T08:58:52", "upload_time_iso_8601": "2014-07-18T08:58:52.818345Z", "url": "https://files.pythonhosted.org/packages/e3/1d/b08b28aa50660a7a64aa4d38bedfcdd078190d1465106611b7ae28c4586e/behaving-0.8.zip", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "2adba6ee6da40de4bbc2a69561146a69", "sha256": "c9457879bec3a2af86cc5918ef3be1ded8b939f8891e8fe250a525772cc8f3d7"}, "downloads": -1, "filename": "behaving-1.0.zip", "has_sig": false, "md5_digest": "2adba6ee6da40de4bbc2a69561146a69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62982, "upload_time": "2015-01-16T13:54:02", "upload_time_iso_8601": "2015-01-16T13:54:02.126201Z", "url": "https://files.pythonhosted.org/packages/40/1d/089ad114115b4a0483f9df61953259a588f9295ec800bb6e19e4c8e41039/behaving-1.0.zip", "yanked": false}], "1.0rc1": [{"comment_text": "", "digests": {"md5": "929c4372f2840901ea9db23e8e3ba1e7", "sha256": "ea6ed19e955fc0b2e2afbdf9a399e90795b3dc13309b984d7b45938a98285d77"}, "downloads": -1, "filename": "behaving-1.0rc1.zip", "has_sig": false, "md5_digest": "929c4372f2840901ea9db23e8e3ba1e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 174476, "upload_time": "2014-08-25T11:48:25", "upload_time_iso_8601": "2014-08-25T11:48:25.988844Z", "url": "https://files.pythonhosted.org/packages/fa/8f/c14ac3f4ef89a555a7a7a95bc185890df7e0558572b2f5696861193c262d/behaving-1.0rc1.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "e92413d6d08c9b44d1fb2fcb026f653e", "sha256": "8ed4d41e8c6c2d1a97d45d6f5417be6011c1405653f92898e3ed5a1544e003b7"}, "downloads": -1, "filename": "behaving-1.1.zip", "has_sig": false, "md5_digest": "e92413d6d08c9b44d1fb2fcb026f653e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64083, "upload_time": "2015-01-26T10:41:03", "upload_time_iso_8601": "2015-01-26T10:41:03.371166Z", "url": "https://files.pythonhosted.org/packages/1a/41/ac3fa54286beea70a096bd2b89d9875c160b0f715d07634d65bf1b4181ba/behaving-1.1.zip", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "eedf3443a3c4aded92ea50c7071fc445", "sha256": "38c06f4dbe9b361ff9de8f0cb104a12181cba8c1ddbf545283e5060c93330338"}, "downloads": -1, "filename": "behaving-1.2.zip", "has_sig": false, "md5_digest": "eedf3443a3c4aded92ea50c7071fc445", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64915, "upload_time": "2015-05-18T08:56:56", "upload_time_iso_8601": "2015-05-18T08:56:56.561274Z", "url": "https://files.pythonhosted.org/packages/54/f8/d485e58119d3b3d0abefc68ac19a424b9cec984dee8b6368787ee5f5be96/behaving-1.2.zip", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "1f94d93948f3549f277e134d4fd4a3cc", "sha256": "ddb525213ced4e0ed00e737e756c70af033040298c30030231d8f7efaab7f421"}, "downloads": -1, "filename": "behaving-1.3.zip", "has_sig": false, "md5_digest": "1f94d93948f3549f277e134d4fd4a3cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69260, "upload_time": "2015-08-18T10:15:07", "upload_time_iso_8601": "2015-08-18T10:15:07.602737Z", "url": "https://files.pythonhosted.org/packages/c5/5b/f3c9de26de0c682b74cf33c4875b2df3571234fcfba5c76b3c3decc610fc/behaving-1.3.zip", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "84f219f6000e80ab7068e053d640060c", "sha256": "dc753683bd7f7305967ee2c27cf31d481fdf5e8607bab0eb38f080f7de374b27"}, "downloads": -1, "filename": "behaving-1.4.zip", "has_sig": false, "md5_digest": "84f219f6000e80ab7068e053d640060c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69642, "upload_time": "2015-09-03T13:11:02", "upload_time_iso_8601": "2015-09-03T13:11:02.374495Z", "url": "https://files.pythonhosted.org/packages/2c/fa/cd6b1d5985ea21a34901446a1eeda22ee15904f567c7158cd1c516098b99/behaving-1.4.zip", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "9be0d637648fbabc89e78a6b9e954d9a", "sha256": "d5871550fa4dbdb7aa9214b4645c4774207a63a88dd6b5bc0fd2041ba92f5905"}, "downloads": -1, "filename": "behaving-1.4.1.zip", "has_sig": false, "md5_digest": "9be0d637648fbabc89e78a6b9e954d9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70069, "upload_time": "2015-09-09T06:29:39", "upload_time_iso_8601": "2015-09-09T06:29:39.703612Z", "url": "https://files.pythonhosted.org/packages/68/d7/ca73772f239b0e6d10fabba5620380585543df827b69bf5ffe2b156d3b8c/behaving-1.4.1.zip", "yanked": false}], "1.5.0": [], "1.5.1": [{"comment_text": "", "digests": {"md5": "3441b2fc81344b8e9184bdb78be02e44", "sha256": "5ad890ef791dacac60b10e7405ec61b77f2e15bf5a2e794125b1220dabc204bf"}, "downloads": -1, "filename": "behaving-1.5.1.zip", "has_sig": false, "md5_digest": "3441b2fc81344b8e9184bdb78be02e44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84464, "upload_time": "2016-04-14T13:21:27", "upload_time_iso_8601": "2016-04-14T13:21:27.951456Z", "url": "https://files.pythonhosted.org/packages/8f/77/12328cdaa6531de85758ecc66dc340e153e74db7c82c7ec315320572646d/behaving-1.5.1.zip", "yanked": false}], "1.5.2": [], "1.5.3": [{"comment_text": "", "digests": {"md5": "2338440eb3b7488bae7d650e5d73a03b", "sha256": "e362877ab9a3a2d83f30ca125293ca8c3b753f8e3fc993acdea6078c958f0c1f"}, "downloads": -1, "filename": "behaving-1.5.3.zip", "has_sig": false, "md5_digest": "2338440eb3b7488bae7d650e5d73a03b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81203, "upload_time": "2016-05-02T11:15:35", "upload_time_iso_8601": "2016-05-02T11:15:35.106257Z", "url": "https://files.pythonhosted.org/packages/52/19/6a81aead43d59cc1c0805259092bb3f406c75e6340d6f93b1e398ac682cc/behaving-1.5.3.zip", "yanked": false}], "1.5.4": [{"comment_text": "", "digests": {"md5": "68960dd97b2ce96c7685059b38caa544", "sha256": "b8b64a32651f89ed632730bbbd64622ca79b6da940df672c306dd7a772d54309"}, "downloads": -1, "filename": "behaving-1.5.4.zip", "has_sig": false, "md5_digest": "68960dd97b2ce96c7685059b38caa544", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80472, "upload_time": "2016-05-04T09:48:22", "upload_time_iso_8601": "2016-05-04T09:48:22.743577Z", "url": "https://files.pythonhosted.org/packages/99/6c/14b33ad4ac9f54ccb098dac8c2d26eba5b5ccf50a5b7a4555486f40226ab/behaving-1.5.4.zip", "yanked": false}], "1.5.5": [{"comment_text": "", "digests": {"md5": "3a023aeb469f60197cc02c8eff5ba951", "sha256": "17b01c5f35721a5d02e29f8de889ca145c05a6e3edf7f0a2ae21a3f5650b9925"}, "downloads": -1, "filename": "behaving-1.5.5.zip", "has_sig": false, "md5_digest": "3a023aeb469f60197cc02c8eff5ba951", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80993, "upload_time": "2016-09-09T18:22:11", "upload_time_iso_8601": "2016-09-09T18:22:11.000419Z", "url": "https://files.pythonhosted.org/packages/47/71/28be93bc3267f3c8848a611aead118d6f3f92eb5d7e7f6b824b7767d1acd/behaving-1.5.5.zip", "yanked": false}], "1.5.6": [{"comment_text": "", "digests": {"md5": "007a3580e76020e4657c46a79b2125bb", "sha256": "80b985fa81822ea4fdcbaffc0df6c3cd2ca430b80f3d138137721fe672293542"}, "downloads": -1, "filename": "behaving-1.5.6.tar.gz", "has_sig": false, "md5_digest": "007a3580e76020e4657c46a79b2125bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51058, "upload_time": "2017-04-18T08:20:54", "upload_time_iso_8601": "2017-04-18T08:20:54.301631Z", "url": "https://files.pythonhosted.org/packages/78/fa/cfcb0c8b299a97ece12dbed44e02b7f5efeb691c86797ddf0db0268aed87/behaving-1.5.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "007a3580e76020e4657c46a79b2125bb", "sha256": "80b985fa81822ea4fdcbaffc0df6c3cd2ca430b80f3d138137721fe672293542"}, "downloads": -1, "filename": "behaving-1.5.6.tar.gz", "has_sig": false, "md5_digest": "007a3580e76020e4657c46a79b2125bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51058, "upload_time": "2017-04-18T08:20:54", "upload_time_iso_8601": "2017-04-18T08:20:54.301631Z", "url": "https://files.pythonhosted.org/packages/78/fa/cfcb0c8b299a97ece12dbed44e02b7f5efeb691c86797ddf0db0268aed87/behaving-1.5.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:50 2020"}