{"info": {"author": "Dmitry Shachnev", "author_email": "mitya57@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only"], "description": ".. image:: https://api.travis-ci.org/mitya57/infseq.svg\n   :target: https://travis-ci.org/mitya57/infseq\n   :alt: Travis CI status\n\nInfinite sequences for Python\n=============================\n\nThe ``infseq`` module implements cached lazy infinite sequences for Python 3.\n\nHere, the word \u201clazy\u201d means that values of the sequence will never be calculated\nunless they are really used, and the word \u201ccached\u201d means that every value will\nbe calculated no more than once.\n\nSequences can contain items of any type \u2014 such as numbers, strings or even\nother sequences.\n\nUsing this module is pretty straightforward \u2014 everything just works. Here are\nsome usage examples:\n\nCreating sequences\n------------------\n\n.. code:: python\n\n  >>> from infseq import InfSequence\n  >>> InfSequence(5)\n  <InfSequence: 5 5 5 5 5 5 ...>\n  >>> InfSequence(5, 6, ...)\n  <InfSequence: 5 6 7 8 9 10 ...>\n  >>> InfSequence(lambda index: index * 2 + 1)\n  <InfSequence: 1 3 5 7 9 11 ...>\n  >>> InfSequence.geometric_progression(3)\n  <InfSequence: 1 3 9 27 81 243 ...>\n  >>> InfSequence.cycle('a', 'b', 'c')\n  <InfSequence: 'a' 'b' 'c' 'a' 'b' 'c' ...>\n  >>> InfSequence.fibonacci()\n  <InfSequence: 0 1 1 2 3 5 ...>\n\n**Note**: for the ease of debugging the first six values are calculated when\n``repr()`` is called on the sequence. If you just create the sequence without\nprinting it, the values are not calculated. The number of items can be adjusted\nby modifying the ``infseq.REPR_VALUES`` number (it is set to 6 by default).\n\nRetrieving the values\n---------------------\n\n.. code:: python\n\n  >>> a = InfSequence.geometric_progression(2)\n  >>> a\n  <InfSequence: 1 2 4 8 16 32 ...>\n  >>> a[10]\n  1024\n  >>> a.partial_sum(10)  # a[0] + ... + a[9]\n  1023\n  >>> a.partial_sum(4, 10)  # sum(a[i] for i in range(4, 10))\n  1008\n  >>> a.partial_product(5)  # a[0] * ... * a[4]\n  1024\n\nSlicing and prepending elements\n-------------------------------\n\n.. code:: python\n\n  >>> a[5:]\n  <InfSequence: 32 64 128 256 512 1024 ...>\n  >>> a[::2]\n  <InfSequence: 1 4 16 64 256 1024 ...>\n  >>> list(a[5:10])  # a[5:10] returns a map object, because of laziness\n  [32, 64, 128, 256, 512]\n  >>> list(a[4::-1])  # reverse slices also work\n  [16, 8, 4, 2, 1]\n  >>> (5, 7) + a\n  <InfSequence: 5 7 1 2 4 8 ...>\n\nArithmetic operations\n---------------------\n\n.. code:: python\n\n  >>> b = InfSequence(1, 2, ...)\n  >>> b\n  <InfSequence: 1 2 3 4 5 6 ...>\n  >>> b * 2\n  <InfSequence: 2 4 6 8 10 12 ...>\n  >>> b ** 2\n  <InfSequence: 1 4 9 16 25 36 ...>\n  >>> a + b\n  <InfSequence: 2 4 7 12 21 38 ...>\n\nApplying any functions\n----------------------\n\n.. code:: python\n\n  >>> c = InfSequence.geometric_progression(9)\n  >>> c\n  <InfSequence: 1 9 81 729 6561 59049 ...>\n  >>> import math\n  >>> c.apply_function(math.sqrt)\n  <InfSequence: 1.0 3.0 9.0 27.0 81.0 243.0 ...>\n\nUsing the ``accumulate`` method\n-------------------------------\n\nThe ``accumulate`` method returns a sequence of partial sums of the original\nsequence (similar to itertools.accumulate_)::\n\n  result[0] = a[0]\n  result[1] = a[0] + a[1]\n  result[2] = a[0] + a[1] + a[2]\n  ...\n\n.. _itertools.accumulate: https://docs.python.org/3/library/itertools.html#itertools.accumulate\n\nIf a custom function is passed as an argument, it is used to do\nthe reducing instead of the sum function.\n\nIn the examples below we can get the sequence of *n(n+1)/2* and the sequence of\n*n!* using this method:\n\n.. code:: python\n\n  >>> from operator import mul\n  >>> b\n  <InfSequence: 1 2 3 4 5 6 ...>\n  >>> b.accumulate()\n  <InfSequence: 1 3 6 10 15 21 ...>\n  >>> b.accumulate(mul)\n  <InfSequence: 1 2 6 24 120 720 ...>\n\nUsing the matrix multiplication operator\n----------------------------------------\n\nIf you are using Python 3.5+, you can use the new \u201cmatrix multiplication\u201d\noperator that was introduced in that version.\n\nThe expression ``a @ b`` will produce the following result::\n\n  result[0] = a[0] * b[0]\n  result[1] = a[0] * b[1] + a[1] * b[0]\n  result[2] = a[0] * b[2] + a[1] * b[1] + a[2] * b[0]\n  ...\n\nExample:\n\n.. code:: python\n\n  >>> InfSequence(0, 2, ...) @ InfSequence(1)\n  <InfSequence: 1 4 9 16 25 36 ...>\n\nInstalling the module and running the tests\n-------------------------------------------\n\nThe module is available on PyPI_. To install the module, simply use::\n\n  pip3 install infseq\n\nThe source code is hosted on GitHub_.\n\nTo run the doctests in this module, use::\n\n  python3 -m doctest ./README.rst\n\n.. _PyPI: https://pypi.python.org/pypi/infseq\n.. _GitHub: https://github.com/mitya57/infseq", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mitya57/infseq", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "infseq", "package_url": "https://pypi.org/project/infseq/", "platform": "any", "project_url": "https://pypi.org/project/infseq/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mitya57/infseq"}, "release_url": "https://pypi.org/project/infseq/0.2/", "requires_dist": null, "requires_python": null, "summary": "Lazy infinite cached sequences", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/mitya57/infseq\" rel=\"nofollow\"><img alt=\"Travis CI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef37d3a07b52ebe799366d6c3b99f52bde13b540/68747470733a2f2f6170692e7472617669732d63692e6f72672f6d6974796135372f696e667365712e737667\"></a>\n<div id=\"infinite-sequences-for-python\">\n<h2>Infinite sequences for Python</h2>\n<p>The <tt>infseq</tt> module implements cached lazy infinite sequences for Python 3.</p>\n<p>Here, the word \u201clazy\u201d means that values of the sequence will never be calculated\nunless they are really used, and the word \u201ccached\u201d means that every value will\nbe calculated no more than once.</p>\n<p>Sequences can contain items of any type \u2014 such as numbers, strings or even\nother sequences.</p>\n<p>Using this module is pretty straightforward \u2014 everything just works. Here are\nsome usage examples:</p>\n<div id=\"creating-sequences\">\n<h3>Creating sequences</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">infseq</span> <span class=\"kn\">import</span> <span class=\"n\">InfSequence</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">InfSequence</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"mi\">5</span> <span class=\"mi\">5</span> <span class=\"mi\">5</span> <span class=\"mi\">5</span> <span class=\"mi\">5</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">InfSequence</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">7</span> <span class=\"mi\">8</span> <span class=\"mi\">9</span> <span class=\"mi\">10</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">InfSequence</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">index</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"mi\">7</span> <span class=\"mi\">9</span> <span class=\"mi\">11</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">InfSequence</span><span class=\"o\">.</span><span class=\"n\">geometric_progression</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"mi\">9</span> <span class=\"mi\">27</span> <span class=\"mi\">81</span> <span class=\"mi\">243</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">InfSequence</span><span class=\"o\">.</span><span class=\"n\">cycle</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span> <span class=\"s1\">'b'</span> <span class=\"s1\">'c'</span> <span class=\"s1\">'a'</span> <span class=\"s1\">'b'</span> <span class=\"s1\">'c'</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">InfSequence</span><span class=\"o\">.</span><span class=\"n\">fibonacci</span><span class=\"p\">()</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"o\">...&gt;</span>\n</pre>\n<p><strong>Note</strong>: for the ease of debugging the first six values are calculated when\n<tt>repr()</tt> is called on the sequence. If you just create the sequence without\nprinting it, the values are not calculated. The number of items can be adjusted\nby modifying the <tt>infseq.REPR_VALUES</tt> number (it is set to 6 by default).</p>\n</div>\n<div id=\"retrieving-the-values\">\n<h3>Retrieving the values</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">InfSequence</span><span class=\"o\">.</span><span class=\"n\">geometric_progression</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"mi\">16</span> <span class=\"mi\">32</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"mi\">1024</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">partial_sum</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># a[0] + ... + a[9]</span>\n<span class=\"mi\">1023</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">partial_sum</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># sum(a[i] for i in range(4, 10))</span>\n<span class=\"mi\">1008</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">partial_product</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># a[0] * ... * a[4]</span>\n<span class=\"mi\">1024</span>\n</pre>\n</div>\n<div id=\"slicing-and-prepending-elements\">\n<h3>Slicing and prepending elements</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">:]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">32</span> <span class=\"mi\">64</span> <span class=\"mi\">128</span> <span class=\"mi\">256</span> <span class=\"mi\">512</span> <span class=\"mi\">1024</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">16</span> <span class=\"mi\">64</span> <span class=\"mi\">256</span> <span class=\"mi\">1024</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">])</span>  <span class=\"c1\"># a[5:10] returns a map object, because of laziness</span>\n<span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>  <span class=\"c1\"># reverse slices also work</span>\n<span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"mi\">7</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span> <span class=\"mi\">8</span> <span class=\"o\">...&gt;</span>\n</pre>\n</div>\n<div id=\"arithmetic-operations\">\n<h3>Arithmetic operations</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">InfSequence</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span> <span class=\"mi\">6</span> <span class=\"mi\">8</span> <span class=\"mi\">10</span> <span class=\"mi\">12</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">9</span> <span class=\"mi\">16</span> <span class=\"mi\">25</span> <span class=\"mi\">36</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span> <span class=\"mi\">7</span> <span class=\"mi\">12</span> <span class=\"mi\">21</span> <span class=\"mi\">38</span> <span class=\"o\">...&gt;</span>\n</pre>\n</div>\n<div id=\"applying-any-functions\">\n<h3>Applying any functions</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">InfSequence</span><span class=\"o\">.</span><span class=\"n\">geometric_progression</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">9</span> <span class=\"mi\">81</span> <span class=\"mi\">729</span> <span class=\"mi\">6561</span> <span class=\"mi\">59049</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">apply_function</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span> <span class=\"mf\">3.0</span> <span class=\"mf\">9.0</span> <span class=\"mf\">27.0</span> <span class=\"mf\">81.0</span> <span class=\"mf\">243.0</span> <span class=\"o\">...&gt;</span>\n</pre>\n</div>\n<div id=\"using-the-accumulate-method\">\n<h3>Using the <tt>accumulate</tt> method</h3>\n<p>The <tt>accumulate</tt> method returns a sequence of partial sums of the original\nsequence (similar to <a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\" rel=\"nofollow\">itertools.accumulate</a>):</p>\n<pre>result[0] = a[0]\nresult[1] = a[0] + a[1]\nresult[2] = a[0] + a[1] + a[2]\n...\n</pre>\n<p>If a custom function is passed as an argument, it is used to do\nthe reducing instead of the sum function.</p>\n<p>In the examples below we can get the sequence of <em>n(n+1)/2</em> and the sequence of\n<em>n!</em> using this method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">mul</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">accumulate</span><span class=\"p\">()</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"mi\">6</span> <span class=\"mi\">10</span> <span class=\"mi\">15</span> <span class=\"mi\">21</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"n\">mul</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">6</span> <span class=\"mi\">24</span> <span class=\"mi\">120</span> <span class=\"mi\">720</span> <span class=\"o\">...&gt;</span>\n</pre>\n</div>\n<div id=\"using-the-matrix-multiplication-operator\">\n<h3>Using the matrix multiplication operator</h3>\n<p>If you are using Python 3.5+, you can use the new \u201cmatrix multiplication\u201d\noperator that was introduced in that version.</p>\n<p>The expression <tt>a @ b</tt> will produce the following result:</p>\n<pre>result[0] = a[0] * b[0]\nresult[1] = a[0] * b[1] + a[1] * b[0]\nresult[2] = a[0] * b[2] + a[1] * b[1] + a[2] * b[0]\n...\n</pre>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">InfSequence</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">InfSequence</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">InfSequence</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"mi\">4</span> <span class=\"mi\">9</span> <span class=\"mi\">16</span> <span class=\"mi\">25</span> <span class=\"mi\">36</span> <span class=\"o\">...&gt;</span>\n</pre>\n</div>\n<div id=\"installing-the-module-and-running-the-tests\">\n<h3>Installing the module and running the tests</h3>\n<p>The module is available on <a href=\"https://pypi.python.org/pypi/infseq\" rel=\"nofollow\">PyPI</a>. To install the module, simply use:</p>\n<pre>pip3 install infseq\n</pre>\n<p>The source code is hosted on <a href=\"https://github.com/mitya57/infseq\" rel=\"nofollow\">GitHub</a>.</p>\n<p>To run the doctests in this module, use:</p>\n<pre>python3 -m doctest ./README.rst\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1860064, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8fd99fe63d9671fe2bcbf641251184b2", "sha256": "53942d6a9b0243a009547d5986d671c0e9d0c54eb1b04c67e63d66a383216881"}, "downloads": -1, "filename": "infseq-0.1.tar.gz", "has_sig": true, "md5_digest": "8fd99fe63d9671fe2bcbf641251184b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4705, "upload_time": "2015-12-10T17:22:02", "upload_time_iso_8601": "2015-12-10T17:22:02.173950Z", "url": "https://files.pythonhosted.org/packages/8e/d3/c5f347ec80a56b3a024519531cdf251771c8408db6eb65e60abc5d0b5bf0/infseq-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e1604924c4ba69ac856a529094331649", "sha256": "32076dcc0618d9289437d551166e2fa354a53f290746ef0a85574dd2ad11e5b1"}, "downloads": -1, "filename": "infseq-0.2.tar.gz", "has_sig": true, "md5_digest": "e1604924c4ba69ac856a529094331649", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5284, "upload_time": "2015-12-13T15:05:23", "upload_time_iso_8601": "2015-12-13T15:05:23.681950Z", "url": "https://files.pythonhosted.org/packages/23/71/0755016aa3fefddafc1d4b62c7ae7e906b6592aaafc2a8fb5b6007256181/infseq-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1604924c4ba69ac856a529094331649", "sha256": "32076dcc0618d9289437d551166e2fa354a53f290746ef0a85574dd2ad11e5b1"}, "downloads": -1, "filename": "infseq-0.2.tar.gz", "has_sig": true, "md5_digest": "e1604924c4ba69ac856a529094331649", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5284, "upload_time": "2015-12-13T15:05:23", "upload_time_iso_8601": "2015-12-13T15:05:23.681950Z", "url": "https://files.pythonhosted.org/packages/23/71/0755016aa3fefddafc1d4b62c7ae7e906b6592aaafc2a8fb5b6007256181/infseq-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:00 2020"}