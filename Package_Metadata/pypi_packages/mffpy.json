{"info": {"author": "Justus Schwabedal, Wayne Manselle", "author_email": "jschwabedal@belco.tech, wayne.manselle@belco.tech", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Introduction\n\n[![CircleCI](https://circleci.com/gh/BEL-Public/mffpy.svg?style=svg)](https://circleci.com/gh/BEL-Public/mffpy)\n\n`mffpy` is a lean reader for EGI's MFF file format.  These files are\ndirectories containing several files of mostly xml files, but also binary\nfiles.\n\nThe main entry point into the library is class `Reader` that accesses a\nselection of functions in the .mff directory to return signal data and its meta\ninformation.\n\n## Installation\n\n```bash\n$ conda create -n mffpy python=3.6 pip\n$ conda activate mffpy\n$ pip install -r requirements.txt\n$ python setup.py install\n$ # and to run the test\n$ make test\n```\n\n## Contribute\n\nDefinitely run:\n```bash\n$ pip install pre-commit\n$ pre-commit install\n```\n\n### Test Coverage\n\n```\nName                                Stmts   Miss  Cover\n-------------------------------------------------------\nmffpy/__init__.py                       2      0   100%\nmffpy/bin_files.py                     40      8    80%\nmffpy/bin_writer.py                    47      7    85%\nmffpy/devices.py                       10      0   100%\nmffpy/dict2xml.py                      31      3    90%\nmffpy/epoch.py                         23      5    78%\nmffpy/header_block.py                  49      1    98%\nmffpy/mffdir.py                        92     18    80%\nmffpy/raw_bin_files.py                 95      0   100%\nmffpy/reader.py                        57      2    96%\nmffpy/tests/__init__.py                 0      0   100%\nmffpy/tests/test_devices.py            12      0   100%\nmffpy/tests/test_dict2xml.py           15      0   100%\nmffpy/tests/test_header_block.py       37      0   100%\nmffpy/tests/test_mffdir.py             30      0   100%\nmffpy/tests/test_raw_bin_files.py      33      0   100%\nmffpy/tests/test_reader.py             26      0   100%\nmffpy/tests/test_writer.py             50      2    96%\nmffpy/tests/test_xml_files.py         130      1    99%\nmffpy/tests/test_zipfile.py            34      0   100%\nmffpy/writer.py                        51      2    96%\nmffpy/xml_files.py                    325      8    98%\nmffpy/zipfile.py                       45      0   100%\n-------------------------------------------------------\nTOTAL                                1234     57    95%\n```\n\n## View the Docs\n\nAll documentation and API guidance are generated from the python doc-strings\nand this README file using pydoc-markdown.  To view the docs:\n\n* install pydoc-markdown: `pip install pydoc-markdown`\n* build and run:  `pydocmd build; pydocmd serve`\n* Navigate to the [docs](http://localhost:8000)\n\n## Example Code\n\n### Example 1:  Basic Information\n\n```python\nimport mffpy\nfo = mffpy.Reader(\"./examples/example_1.mff\")\nprint(\"time and date of the start of recording:\", fo.startdatetime)\nprint(\"number of channels:\", fo.num_channels)\nprint(\"sampling rates:\", fo.sampling_rates, \"(in Hz)\")\nprint(\"durations:\", fo.durations, \"(in sec.)\")\nprint(\"Here's the epoch information\")\nfor i, e in enumerate(fo.epochs):\n    print(\"Epoch number\", i)\n    print(e)\n```\n\n### Example 2: Reading Samples\n\n```python\nfrom mffpy import Reader\nfo = Reader(\"./examples/example_1.mff\")\nfo.set_unit('EEG', 'uV')\neeg_in_mV, t0_EEG = fo.get_physical_samples_from_epoch(fo.epochs[0], dt=0.1)['EEG']\nfo.set_unit('EEG', 'V')\neeg_in_V, t0_EEG = fo.get_physical_samples_from_epoch(fo.epochs[0], dt=0.1)['EEG']\nprint('data in mV:', eeg_in_mV[0])\nprint('data in V :', eeg_in_V[0])\n```\n\n### Example 3: Reading .mff xml files\n\n```python\nfrom mffpy import XML\ncategories = XML.from_file(\"./examples/example_1.mff/categories.xml\")\nprint(categories['ULRN'])\n```\n\n### Example 4: Writing random numbers into an .mff file\n\n```python\nfrom os.path import join\nfrom datetime import datetime\nimport numpy as np\nfrom mffpy import Reader\nfrom mffpy.writer import *\n\n# write 256 channels of 10 data points at a sampling rate of 128 Hz\nB = BinWriter(sampling_rate=128)\nB.add_block(np.random.randn(256, 10).astype(np.float32))\nW = Writer(join('examples', 'my_new_file.mff'))\nstartdatetime = datetime.strptime('1984-02-18T14:00:10.000000+0100',\n        \"%Y-%m-%dT%H:%M:%S.%f%z\")\nW.addxml('fileInfo', recordTime=startdatetime)\nW.add_coordinates_and_sensor_layout(device='HydroCel GSN 256 1.0')\nW.addbin(B)\nW.write()\n```\n\n\n### Example 5: Exporting MFF content to a .json file\n\n```python\nfrom mffpy import Reader, Writer\n\n# Read data from an MFF file\nreader = Reader(\"./examples/example_2.mff\")\ndata = reader.get_mff_content()\n\n# Write data to a JSON file\nwriter = Writer(\"./examples/example_2.json\")\nwriter.export_to_json(data)\n```\n**Note: for now, the JSON exporting feature only works for segmented mffs files.**\n\n## License and Copyright\n\nCopyright 2019 Brain Electrophysiology Laboratory Company LLC\n\nLicensed under the ApacheLicense, Version 2.0(the \"License\");\nyou may not use this module except in compliance with the License.\nYou may obtain a copy of the License at:\n\nhttp: // www.apache.org / licenses / LICENSE - 2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "Evan Hathaway", "maintainer_email": "evan.hathaway@belco.tech", "name": "mffpy", "package_url": "https://pypi.org/project/mffpy/", "platform": "", "project_url": "https://pypi.org/project/mffpy/", "project_urls": null, "release_url": "https://pypi.org/project/mffpy/0.5.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Reader and Writer for Philips' MFF file format.", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Introduction</h1>\n<p><a href=\"https://circleci.com/gh/BEL-Public/mffpy\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ed22b3312fea92e9c2696f786f248654e4ed3b4/68747470733a2f2f636972636c6563692e636f6d2f67682f42454c2d5075626c69632f6d666670792e7376673f7374796c653d737667\"></a></p>\n<p><code>mffpy</code> is a lean reader for EGI's MFF file format.  These files are\ndirectories containing several files of mostly xml files, but also binary\nfiles.</p>\n<p>The main entry point into the library is class <code>Reader</code> that accesses a\nselection of functions in the .mff directory to return signal data and its meta\ninformation.</p>\n<h2>Installation</h2>\n<pre>$ conda create -n mffpy <span class=\"nv\">python</span><span class=\"o\">=</span><span class=\"m\">3</span>.6 pip\n$ conda activate mffpy\n$ pip install -r requirements.txt\n$ python setup.py install\n$ <span class=\"c1\"># and to run the test</span>\n$ make <span class=\"nb\">test</span>\n</pre>\n<h2>Contribute</h2>\n<p>Definitely run:</p>\n<pre>$ pip install pre-commit\n$ pre-commit install\n</pre>\n<h3>Test Coverage</h3>\n<pre><code>Name                                Stmts   Miss  Cover\n-------------------------------------------------------\nmffpy/__init__.py                       2      0   100%\nmffpy/bin_files.py                     40      8    80%\nmffpy/bin_writer.py                    47      7    85%\nmffpy/devices.py                       10      0   100%\nmffpy/dict2xml.py                      31      3    90%\nmffpy/epoch.py                         23      5    78%\nmffpy/header_block.py                  49      1    98%\nmffpy/mffdir.py                        92     18    80%\nmffpy/raw_bin_files.py                 95      0   100%\nmffpy/reader.py                        57      2    96%\nmffpy/tests/__init__.py                 0      0   100%\nmffpy/tests/test_devices.py            12      0   100%\nmffpy/tests/test_dict2xml.py           15      0   100%\nmffpy/tests/test_header_block.py       37      0   100%\nmffpy/tests/test_mffdir.py             30      0   100%\nmffpy/tests/test_raw_bin_files.py      33      0   100%\nmffpy/tests/test_reader.py             26      0   100%\nmffpy/tests/test_writer.py             50      2    96%\nmffpy/tests/test_xml_files.py         130      1    99%\nmffpy/tests/test_zipfile.py            34      0   100%\nmffpy/writer.py                        51      2    96%\nmffpy/xml_files.py                    325      8    98%\nmffpy/zipfile.py                       45      0   100%\n-------------------------------------------------------\nTOTAL                                1234     57    95%\n</code></pre>\n<h2>View the Docs</h2>\n<p>All documentation and API guidance are generated from the python doc-strings\nand this README file using pydoc-markdown.  To view the docs:</p>\n<ul>\n<li>install pydoc-markdown: <code>pip install pydoc-markdown</code></li>\n<li>build and run:  <code>pydocmd build; pydocmd serve</code></li>\n<li>Navigate to the <a href=\"http://localhost:8000\" rel=\"nofollow\">docs</a></li>\n</ul>\n<h2>Example Code</h2>\n<h3>Example 1:  Basic Information</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mffpy</span>\n<span class=\"n\">fo</span> <span class=\"o\">=</span> <span class=\"n\">mffpy</span><span class=\"o\">.</span><span class=\"n\">Reader</span><span class=\"p\">(</span><span class=\"s2\">\"./examples/example_1.mff\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"time and date of the start of recording:\"</span><span class=\"p\">,</span> <span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">startdatetime</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"number of channels:\"</span><span class=\"p\">,</span> <span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">num_channels</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"sampling rates:\"</span><span class=\"p\">,</span> <span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">sampling_rates</span><span class=\"p\">,</span> <span class=\"s2\">\"(in Hz)\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"durations:\"</span><span class=\"p\">,</span> <span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">durations</span><span class=\"p\">,</span> <span class=\"s2\">\"(in sec.)\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Here's the epoch information\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">epochs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Epoch number\"</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<h3>Example 2: Reading Samples</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mffpy</span> <span class=\"kn\">import</span> <span class=\"n\">Reader</span>\n<span class=\"n\">fo</span> <span class=\"o\">=</span> <span class=\"n\">Reader</span><span class=\"p\">(</span><span class=\"s2\">\"./examples/example_1.mff\"</span><span class=\"p\">)</span>\n<span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">set_unit</span><span class=\"p\">(</span><span class=\"s1\">'EEG'</span><span class=\"p\">,</span> <span class=\"s1\">'uV'</span><span class=\"p\">)</span>\n<span class=\"n\">eeg_in_mV</span><span class=\"p\">,</span> <span class=\"n\">t0_EEG</span> <span class=\"o\">=</span> <span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">get_physical_samples_from_epoch</span><span class=\"p\">(</span><span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">epochs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)[</span><span class=\"s1\">'EEG'</span><span class=\"p\">]</span>\n<span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">set_unit</span><span class=\"p\">(</span><span class=\"s1\">'EEG'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">)</span>\n<span class=\"n\">eeg_in_V</span><span class=\"p\">,</span> <span class=\"n\">t0_EEG</span> <span class=\"o\">=</span> <span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">get_physical_samples_from_epoch</span><span class=\"p\">(</span><span class=\"n\">fo</span><span class=\"o\">.</span><span class=\"n\">epochs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)[</span><span class=\"s1\">'EEG'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'data in mV:'</span><span class=\"p\">,</span> <span class=\"n\">eeg_in_mV</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'data in V :'</span><span class=\"p\">,</span> <span class=\"n\">eeg_in_V</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre>\n<h3>Example 3: Reading .mff xml files</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mffpy</span> <span class=\"kn\">import</span> <span class=\"n\">XML</span>\n<span class=\"n\">categories</span> <span class=\"o\">=</span> <span class=\"n\">XML</span><span class=\"o\">.</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"s2\">\"./examples/example_1.mff/categories.xml\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"s1\">'ULRN'</span><span class=\"p\">])</span>\n</pre>\n<h3>Example 4: Writing random numbers into an .mff file</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"kn\">import</span> <span class=\"n\">join</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mffpy</span> <span class=\"kn\">import</span> <span class=\"n\">Reader</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mffpy.writer</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"c1\"># write 256 channels of 10 data points at a sampling rate of 128 Hz</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">BinWriter</span><span class=\"p\">(</span><span class=\"n\">sampling_rate</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n<span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">add_block</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">))</span>\n<span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">'examples'</span><span class=\"p\">,</span> <span class=\"s1\">'my_new_file.mff'</span><span class=\"p\">))</span>\n<span class=\"n\">startdatetime</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"s1\">'1984-02-18T14:00:10.000000+0100'</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\">T%H:%M:%S.</span><span class=\"si\">%f</span><span class=\"s2\">%z\"</span><span class=\"p\">)</span>\n<span class=\"n\">W</span><span class=\"o\">.</span><span class=\"n\">addxml</span><span class=\"p\">(</span><span class=\"s1\">'fileInfo'</span><span class=\"p\">,</span> <span class=\"n\">recordTime</span><span class=\"o\">=</span><span class=\"n\">startdatetime</span><span class=\"p\">)</span>\n<span class=\"n\">W</span><span class=\"o\">.</span><span class=\"n\">add_coordinates_and_sensor_layout</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">'HydroCel GSN 256 1.0'</span><span class=\"p\">)</span>\n<span class=\"n\">W</span><span class=\"o\">.</span><span class=\"n\">addbin</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"n\">W</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Example 5: Exporting MFF content to a .json file</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mffpy</span> <span class=\"kn\">import</span> <span class=\"n\">Reader</span><span class=\"p\">,</span> <span class=\"n\">Writer</span>\n\n<span class=\"c1\"># Read data from an MFF file</span>\n<span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">Reader</span><span class=\"p\">(</span><span class=\"s2\">\"./examples/example_2.mff\"</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_mff_content</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Write data to a JSON file</span>\n<span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"s2\">\"./examples/example_2.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">export_to_json</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note: for now, the JSON exporting feature only works for segmented mffs files.</strong></p>\n<h2>License and Copyright</h2>\n<p>Copyright 2019 Brain Electrophysiology Laboratory Company LLC</p>\n<p>Licensed under the ApacheLicense, Version 2.0(the \"License\");\nyou may not use this module except in compliance with the License.\nYou may obtain a copy of the License at:</p>\n<p>http: // <a href=\"http://www.apache.org\" rel=\"nofollow\">www.apache.org</a> / licenses / LICENSE - 2.0</p>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\nANY KIND, either express or implied.</p>\n\n          </div>"}, "last_serial": 6634631, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "76ae8820078f837e86ed7e3e739b42b2", "sha256": "cec000d6d161a882730a451c2749871014af5a0f7b692080ee69b6e878681d8f"}, "downloads": -1, "filename": "mffpy-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "76ae8820078f837e86ed7e3e739b42b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 131974, "upload_time": "2019-09-25T23:26:34", "upload_time_iso_8601": "2019-09-25T23:26:34.018779Z", "url": "https://files.pythonhosted.org/packages/c0/f5/7b0bbf4ae4ef27adde2f39b8cdab928d1b8049d98769fb76200ce5ad5887/mffpy-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c229d2715313509a4c9a354ea03c8fb9", "sha256": "2c6aaa47e3da453237efceb9561f3ab9386fd2039e2c84afac84a5f1763bae2a"}, "downloads": -1, "filename": "mffpy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c229d2715313509a4c9a354ea03c8fb9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 108633, "upload_time": "2019-09-25T23:26:37", "upload_time_iso_8601": "2019-09-25T23:26:37.634785Z", "url": "https://files.pythonhosted.org/packages/b4/b8/85aa06bd629af7035920fd4ceddf08d60b894e216739ee8a5a62acb3a1ee/mffpy-0.3.0.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "1d44ad99337cf4cbcaf7e6b90b025537", "sha256": "a0db8997d04880b0a0e95e0105bf014448dd5a08c0d582a3fe49dbcb6a3a9a13"}, "downloads": -1, "filename": "mffpy-0.4.2-py3.6.egg", "has_sig": false, "md5_digest": "1d44ad99337cf4cbcaf7e6b90b025537", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 196150, "upload_time": "2020-02-14T23:53:49", "upload_time_iso_8601": "2020-02-14T23:53:49.160723Z", "url": "https://files.pythonhosted.org/packages/52/6d/7d09d8148da72b2c29c1123c6c09ae316127b90bd0a7aad758f90c91e779/mffpy-0.4.2-py3.6.egg", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "408f3e5dee75d91374f9659438f5bab1", "sha256": "94c8b9b8ca3677afc0b95342766843b6cf1ff9a76e4cb991af2c7768eedb2864"}, "downloads": -1, "filename": "mffpy-0.5.0-py3.6.egg", "has_sig": false, "md5_digest": "408f3e5dee75d91374f9659438f5bab1", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 196918, "upload_time": "2020-02-14T23:53:51", "upload_time_iso_8601": "2020-02-14T23:53:51.193630Z", "url": "https://files.pythonhosted.org/packages/90/86/f21ccf90780b197def344e487c693118e6aa27dd887a191caf7ab7d2cd59/mffpy-0.5.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7353818770eb7ca05912a1faa27dbbb5", "sha256": "2bcddd7d490e393c93cc8d4c391b983920c016e55ea2771c89659395cff38632"}, "downloads": -1, "filename": "mffpy-0.5.0-py3.7.egg", "has_sig": false, "md5_digest": "7353818770eb7ca05912a1faa27dbbb5", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 196656, "upload_time": "2020-02-14T23:53:52", "upload_time_iso_8601": "2020-02-14T23:53:52.993105Z", "url": "https://files.pythonhosted.org/packages/2d/ce/d8c05f3647ce625223b63dadf72bd9d6131ca41a4fe6dfe23b6f87f29d63/mffpy-0.5.0-py3.7.egg", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "a3696efeb654fb3781706e941ab26651", "sha256": "1ed67367d2445d9dde854140544da0e8ed99ca6827f5d381a61ec986e8a7db03"}, "downloads": -1, "filename": "mffpy-0.5.1-py3.6.egg", "has_sig": false, "md5_digest": "a3696efeb654fb3781706e941ab26651", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 197595, "upload_time": "2020-02-14T23:53:54", "upload_time_iso_8601": "2020-02-14T23:53:54.728452Z", "url": "https://files.pythonhosted.org/packages/68/d5/585d1b6720eda418d05997794935830380e1abbfa5c96fe790968b7dfd0c/mffpy-0.5.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1506f9a8e4e7abf0efcfacb6dbad68a", "sha256": "c8cbc1c5f1a5612c3394ff121ac71318efcf2fd22be3e4438d50f06070219211"}, "downloads": -1, "filename": "mffpy-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c1506f9a8e4e7abf0efcfacb6dbad68a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 136427, "upload_time": "2020-02-14T23:53:47", "upload_time_iso_8601": "2020-02-14T23:53:47.224835Z", "url": "https://files.pythonhosted.org/packages/04/99/aa688b62f3a9e4c2f01c6ca800197099ea1b97a07fe0b347edf1844e7381/mffpy-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "072fc55a4ccfe33e7c400427d5561f6b", "sha256": "b3b291b804938d825c79eaaf1fe7ecbdaa99d8d6d73acb81e7252a8417b3fd1f"}, "downloads": -1, "filename": "mffpy-0.5.1.tar.gz", "has_sig": false, "md5_digest": "072fc55a4ccfe33e7c400427d5561f6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 111204, "upload_time": "2020-02-14T23:53:56", "upload_time_iso_8601": "2020-02-14T23:53:56.141521Z", "url": "https://files.pythonhosted.org/packages/7b/3d/d7ef00d32e644b4336da2b22829b9fda0edc6d2a72d59e3534673039aeef/mffpy-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3696efeb654fb3781706e941ab26651", "sha256": "1ed67367d2445d9dde854140544da0e8ed99ca6827f5d381a61ec986e8a7db03"}, "downloads": -1, "filename": "mffpy-0.5.1-py3.6.egg", "has_sig": false, "md5_digest": "a3696efeb654fb3781706e941ab26651", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 197595, "upload_time": "2020-02-14T23:53:54", "upload_time_iso_8601": "2020-02-14T23:53:54.728452Z", "url": "https://files.pythonhosted.org/packages/68/d5/585d1b6720eda418d05997794935830380e1abbfa5c96fe790968b7dfd0c/mffpy-0.5.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1506f9a8e4e7abf0efcfacb6dbad68a", "sha256": "c8cbc1c5f1a5612c3394ff121ac71318efcf2fd22be3e4438d50f06070219211"}, "downloads": -1, "filename": "mffpy-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c1506f9a8e4e7abf0efcfacb6dbad68a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 136427, "upload_time": "2020-02-14T23:53:47", "upload_time_iso_8601": "2020-02-14T23:53:47.224835Z", "url": "https://files.pythonhosted.org/packages/04/99/aa688b62f3a9e4c2f01c6ca800197099ea1b97a07fe0b347edf1844e7381/mffpy-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "072fc55a4ccfe33e7c400427d5561f6b", "sha256": "b3b291b804938d825c79eaaf1fe7ecbdaa99d8d6d73acb81e7252a8417b3fd1f"}, "downloads": -1, "filename": "mffpy-0.5.1.tar.gz", "has_sig": false, "md5_digest": "072fc55a4ccfe33e7c400427d5561f6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 111204, "upload_time": "2020-02-14T23:53:56", "upload_time_iso_8601": "2020-02-14T23:53:56.141521Z", "url": "https://files.pythonhosted.org/packages/7b/3d/d7ef00d32e644b4336da2b22829b9fda0edc6d2a72d59e3534673039aeef/mffpy-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:30 2020"}