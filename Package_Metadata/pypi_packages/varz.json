{"info": {"author": "Wessel Bruinsma", "author_email": "wessel.p.bruinsma@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# [Varz](http://github.com/wesselb/varz)\n\n[![Build](https://travis-ci.org/wesselb/varz.svg?branch=master)](https://travis-ci.org/wesselb/varz)\n[![Coverage Status](https://coveralls.io/repos/github/wesselb/varz/badge.svg?branch=master&service=github)](https://coveralls.io/github/wesselb/varz?branch=master)\n[![Latest Docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://wesselb.github.io/varz)\n\nPainless optimisation of constrained variables in AutoGrad, TensorFlow, and\nPyTorch\n\n_Note:_ Varz requires Python 3.6 or higher and TensorFlow 2 if TensorFlow is \nused.\n\n* [Installation](#installation)\n* [Manual](#manual)\n    - [Basics](#basics)\n    - [Naming](#naming)\n    - [Constrained Variables](#constrained-variables)\n    - [Automatic Naming of Variables](#automatic-naming-of-variables)\n    - [Optimisers](#optimisers)\n    - [PyTorch Specifics](#pytorch-specifics)\n    - [Getting and Setting Variables as a Vector](#getting-and-setting-variables-as-a-vector)\n    - [Getting Variables from a Source](#get-variables-from-a-source)\n * [Examples](#examples)\n    - [AutoGrad](#autograd)\n    - [TensorFlow](#tensorflow)\n    - [PyTorch](#pytorch)\n    \n## Installation\n\nBefore installing the package, please ensure that `gcc` and `gfortran` are \navailable.\nOn OS X, these are both installed with `brew install gcc`;\nusers of Anaconda may want to instead consider `conda install gcc`.\nOn Linux, `gcc` is most likely already available, and `gfortran` can be\ninstalled with `apt-get install gfortran`.\nThen simply\n\n```bash\npip install varz\n```\n\n## Manual\n\n### Basics\n```python\nfrom varz import Vars\n```\n\nTo begin with, create a *variable container* of the right data type.\nFor use with AutoGrad, use a `np.*` data type;\nfor use with PyTorch, use a `torch.*` data type;\nand for use with TensorFlow, use a `tf.*` data type.\nIn this example we'll use AutoGrad.\n\n```python\n>>> vs = Vars(np.float64)\n```\n\nNow a variable can be created by requesting it, giving it an initial value and\na name.\n \n```python\n>>> vs.get(np.random.randn(2, 2), name='x')\narray([[ 1.04404354, -1.98478763],\n       [ 1.14176728, -3.2915562 ]])\n```\n\nIf the same variable is created again, because a variable with the name `x` \nalready exists, the existing variable will be returned.\n\n```python\n>>> vs.get(name='x')\narray([[ 1.04404354, -1.98478763],\n       [ 1.14176728, -3.2915562 ]])\n```\n\nAlternatively, indexing syntax may be used to get the existing variable `x`.\nThis asserts that a variable with the name `x` already exists and will throw a\n`KeyError` otherwise.\n\n```python\n>>> vs['x']\narray([[ 1.04404354, -1.98478763],\n       [ 1.14176728, -3.2915562 ]])\n       \n>>> vs['y']\nKeyError: 'y'\n```\n\nThe value of `x` can be changed by assigning it a different value.\n\n```python\n>>> vs.assign('x', np.random.randn(2, 2))\narray([[ 1.43477728,  0.51006941],\n       [-0.74686452, -1.05285767]])\n```\n\nBy default, assignment is non-differentiable and _overwrites_ data.\nFor differentiable assignment, which _replaces_ data, set the keyword argument \n`differentiable=True`.\n\n```python\n>>> vs.assign('x', np.random.randn(2, 2), differentiable=True)\narray([[ 0.12500578, -0.21510423],\n       [-0.61336039,  1.23074066]])\n```\n\nThe variable container can be copied with `vs.copy()`.\nNote that the copy _shares its variables with the original_.\nThis means that non-differentiable assignment will also mutate the original;\ndifferentiable assignment, however, will not.\n\n### Naming\n\nVariables may be organised by naming them hierarchically using `/`s. \nFor example, `group1/bar`, `group1/foo`, and `group2/bar`.\nThis is helpful for extracting collections of variables, where wildcards may \nbe used to match names.\nFor example, `*/bar` would match `group1/bar` and `group2/bar`, and \n`group1/*` would match `group1/bar` and `group1/foo`.\n\nThe names of all variables can be obtained with `Vars.names`, and variables can \nbe printed with `Vars.print`.\n\nExample:\n\n\n```python\n>>> vs = Vars(np.float64)\n\n>>> vs.get(1, name='x1')\narray(1.)\n\n>>> vs.get(2, name='x2')\narray(2.)\n\n>>> vs.get(3, name='y')\narray(3.)\n\n>>> vs.names\n['x1', 'x2', 'y']\n\n>>> vs.print()\nx1:         1.0\nx2:         2.0\ny:          3.0\n```\n\n### Constrained Variables\n\n* **Positive variables:**\n    A variable that is constrained to be *positive* can be created using\n    `Vars.positive` or `Vars.pos`.\n\n    ```python\n    >>> vs.pos(name='positive_variable')\n    0.016925610008314832\n    ```\n\n* **Bounded variables:**\n    A variable that is constrained to be *bounded* can be created using\n    `Vars.bounded` or `Vars.bnd`.\n\n    ```python\n    >>> vs.bnd(name='bounded_variable', lower=1, upper=2)\n    1.646772663807718\n    ```\n  \n* **Lower-triangular matrix:**\n    A matrix variable that is contrained to be *lower triangular* can be\n    created using `Vars.lower_triangular` or `Vars.tril`. Either an\n    initialisation or a shape of square matrix must be given.\n    \n    ```python\n    >>> vs.tril(shape=(2, 2), name='lower_triangular')\n    array([[ 2.64204459,  0.        ],\n           [-0.14055559, -1.91298679]])\n    ```\n  \n* **Positive-definite matrix:**\n    A matrix variable that is contrained to be *positive definite* can be\n    created using `Vars.positive_definite` or `Vars.pd`. Either an\n    initialisation or a shape of square matrix must be given.\n    \n    ```python\n    >>> vs.pd(shape=(2, 2), name='positive_definite')\n    array([[ 1.64097496, -0.52302151],\n           [-0.52302151,  0.32628302]])\n    ```\n  \n* **Orthogonal matrix:**\n    A matrix variable that is contrained to be *orthogonal* can be created using\n    `Vars.orthogonal` or `Vars.orth`. Either an initialisation or a\n    shape of square matrix must be given.\n    \n    ```python\n    >>> vs.orth(shape=(2, 2), name='orthogonal')\n    array([[ 0.31290403, -0.94978475],\n           [ 0.94978475,  0.31290403]])\n    ```\n\nThese constrained variables are created by transforming some *latent \nunconstrained representation* to the desired constrained space.\nThe latent variables can be obtained using `Vars.get_vars`.\n\n```python\n>>> vs.get_vars('positive_variable', 'bounded_variable')\n[array(-4.07892742), array(-0.604883)]\n```\n\nTo illustrate the use of wildcards, the following is equivalent:\n\n```python\n>>> vs.get_vars('*_variable')\n[array(-4.07892742), array(-0.604883)]\n```\n\n### Automatic Naming of Variables\n\nTo parametrise functions, a common pattern is the following:\n\n```python\ndef objective(vs):\n    x = vs.get(5, name='x')\n    y = vs.get(10, name='y')\n    \n    return (x * y - 5) ** 2 + x ** 2\n```\n\nThe names for `x` and `y` are necessary, because otherwise new variables will\n be created and initialised every time `objective` is run.\nVarz offers two ways to not having to specify a name for every variable: \nsequential and parametrised specification.\n\n#### Sequential Specification\n\nSequential specification can be used if, upon execution of `objective`, \nvariables are always obtained in the *same order*.\nThis means that variables can be identified with their position in this order\nand hence be named accordingly.\nTo use sequential specification, decorate the function with `sequential`.\n\nExample:\n\n```python\nfrom varz import sequential\n\n\n@sequential\ndef objective(vs):\n    x = vs.get(5)  # Initialise to 5.\n    y = vs.get()   # Initialise randomly.\n    \n    return (x * y - 5) ** 2 + x ** 2\n```\n\n```python\n>>> vs = Vars(np.float64)\n\n>>> objective(vs)\n68.65047879833773\n\n>>> objective(vs)  # Running the objective again reuses the same variables.\n68.65047879833773\n\n>>> vs.names\n['0', '1']\n\n>>> vs.print()\n0:          5.0      # This is `x`.\n1:          -0.3214  # This is `y`.\n```\n\n#### Parametrised Specification\n\nSequential specification still suffers from boilerplate code like\n`x = vs.get(5)` and `y = vs.get()`.\nThis is the problem that parametrised specification addresses, which allows \nyou to specify variables as *arguments to your function*.\nTo indicate that an argument of the function is a variable, as opposed to a \nregular argument, the argument's type hint must be set accordingly, as follows:\n\n* **Unbounded variables:**\n    ```python\n    @parametrised\n    def f(vs, x: Unbounded):\n        ...\n    ```\n\n* **Positive variables:**\n    ```python\n    @parametrised\n    def f(vs, x: Positive):\n        ...\n    ```\n\n* **Bounded variables:**\n    The following two specifications are possible. The former uses the\n    default bounds and the latter uses specified bounds.\n     \n    ```python\n    @parametrised\n    def f(vs, x: Bounded):\n        ...\n    ```\n  \n    ```python\n    @parametrised\n    def f(vs, x: Bounded(lower=1, upper=10)):\n        ...\n    ```\n    \n* **Lower-triangular variables:**\n    ```python\n    @parametrised\n    def f(vs, x: LowerTriangular(shape=(2, 2))):\n        ...\n    ```\n\n* **Positive-definite variables:**\n    ```python\n    @parametrised\n    def f(vs, x: PositiveDefinite(shape=(2, 2))):\n        ...\n    ```\n  \n* **Orthogonal variables:**\n    ```python\n    @parametrised\n    def f(vs, x: Orthogonal(shape=(2, 2))):\n        ...\n    ```\n    \nAs can be seen from the above, the variable container must also be an argument \nof the function, because that is where the variables will be obtained from.\nA variable can be given an initial value in the way you would expect:\n```python\n@parametrised\ndef f(vs, x: Unbounded = 5):\n    ...\n```\n\nVariable arguments and regular arguments can be mixed.\nIf `f` is called, variable arguments must not be specified, because they \nwill be obtained automatically.\nRegular arguments, however, must be specified.\n\nTo use parametrised specification, decorate the function with `parametrised`.\n\nExample:\n\n```python\nfrom varz import parametrised, Unbounded, Bounded\n\n\n@parametrised\ndef objective(vs, x: Unbounded, y: Bounded(lower=1, upper=3) = 2, option=None):\n    print('Option:', option)\n    return (x * y - 5) ** 2 + x ** 2\n```\n\n```python\n>>> vs = Vars(np.float64)\n\n>>> objective(vs)\nOption: None\n9.757481795615316\n\n>>> objective(vs, 'other')\nOption: other\n9.757481795615316\n\n>>> objective(vs, option='other')\nOption: other\n9.757481795615316\n\n>>> objective(vs, x=5)  # This is not valid, because `x` will be obtained automatically from `vs`.\nValueError: 1 keyword argument(s) not parsed: x.\n\n>>> vs.print()\nx:          1.025\ny:          2.0\n```\n\n### Optimisers\n\nThe following optimisers are available:\n\n```\nvarz.{autograd,tensorflow,torch}.minimise_l_bfgs_b (L-BFGS-B)\nvarz.{autograd,tensorflow,torch}.minimise_adam     (Adam)\n```\n\nThe L-BFGS-B algorithm is recommended for deterministic objectives, and Adam\nis recommended for stochastic objectives.\n\nSee the examples for an illustration how these optimisers can be used.\n\n### PyTorch Specifics\n\nAll the variables held by a container can be detached from the current \ncomputation graph with `Vars.detach` .\nTo make a copy of the container with detached versions of the variables, use\n`Vars.copy` with `detach=True` instead.\nWhether variables require gradients can be configured with `Vars.requires_grad`.\nBy default, no variable requires a gradient.\n\n### Getting and Setting Variables as a Vector\n\nIt may be desirable to get the latent representations of a collection of \nvariables as a single vector, e.g. when feeding them to an optimiser.\nThis can be achieved with `Vars.get_vector`.\n\n```python\n>>> vs.get_vector('x', '*_variable')\narray([ 0.12500578, -0.21510423, -0.61336039,  1.23074066, -4.07892742,\n       -0.604883  ])\n```\n\nSimilarly, to update the latent representation of a collection of variables,\n`Vars.set_vector` can be used.\n\n```python\n>>> vs.set_vector(np.ones(6), 'x', '*_variable')\n[array([[1., 1.],\n        [1., 1.]]), array(1.), array(1.)]\n\n>>> vs.get_vector('x', '*_variable')\narray([1., 1., 1., 1., 1., 1.])\n```\n\n### Get Variables from a Source\n\nThe keyword argument `source` can set to a tensor from which the latent \nvariables will be obtained.\n\nExample:\n\n```python\n>>> vs = Vars(np.float32, source=np.array([1, 2, 3, 4, 5]))\n\n>>> vs.get()\narray(1., dtype=float32)\n\n>>> vs.get(shape=(3,))\narray([2., 3., 4.], dtype=float32)\n\n>>> vs.pos()\n148.41316\n\n>>> np.exp(5).astype(np.float32)\n148.41316\n```\n\n## Examples\nThe follow examples show how a function can be minimised using the L-BFGS-B\nalgorithm.\n\n### AutoGrad\n\n```python\nimport autograd.numpy as np\nfrom varz.autograd import Vars, minimise_l_bfgs_b\n\ntarget = 5. \n\n\ndef objective(vs):\n    # Get a variable named \"x\", which must be positive, initialised to 10.\n    x = vs.pos(10., name='x')  \n    \n    return (x ** .5 - target) ** 2  \n```\n\n```python\n>>> vs = Vars(np.float64)\n\n>>> minimise_l_bfgs_b(objective, vs)\n3.17785950743424e-19  # Final objective function value.\n\n>>> vs['x'] - target ** 2\n-5.637250666268301e-09\n```\n\n### TensorFlow\n\n```python\nimport tensorflow as tf\nfrom varz.tensorflow import Vars, minimise_l_bfgs_b\n\ntarget = 5.\n\n\ndef objective(vs):\n    # Get a variable named \"x\", which must be positive, initialised to 10.\n    x = vs.pos(10., name='x')  \n    \n    return (x ** .5 - target) ** 2  \n```\n\n```python\n>>> vs = Vars(tf.float64)\n\n>>> minimise_l_bfgs_b(objective, vs)\n3.17785950743424e-19  # Final objective function value.\n\n>>> vs['x'] - target ** 2\n<tf.Tensor: id=562, shape=(), dtype=float64, numpy=-5.637250666268301e-09>\n```\n\n### PyTorch\n\n```python\nimport torch\nfrom varz.torch import Vars, minimise_l_bfgs_b\n\ntarget = torch.tensor(5., dtype=torch.float64)\n\n\ndef objective(vs):\n    # Get a variable named \"x\", which must be positive, initialised to 10.\n    x = vs.pos(10., name='x')  \n    \n    return (x ** .5 - target) ** 2  \n```\n\n```python\n>>> vs = Vars(torch.float64)\n\n>>> minimise_l_bfgs_b(lambda v: objective(v['x']), vs, names=['x'])\narray(3.17785951e-19)  # Final objective function value.\n\n>>> vs['x'] - target ** 2\ntensor(-5.6373e-09, dtype=torch.float64)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wesselb/varz", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "varz", "package_url": "https://pypi.org/project/varz/", "platform": "", "project_url": "https://pypi.org/project/varz/", "project_urls": {"Homepage": "https://github.com/wesselb/varz"}, "release_url": "https://pypi.org/project/varz/0.4.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Painless variables in PyTorch and TensorFlow", "version": "0.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"http://github.com/wesselb/varz\" rel=\"nofollow\">Varz</a></h1>\n<p><a href=\"https://travis-ci.org/wesselb/varz\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d751b7d4a2a537704190c24bf748a643c4b4746/68747470733a2f2f7472617669732d63692e6f72672f77657373656c622f7661727a2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/wesselb/varz?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2576934a558f4a15882f413446104762585662f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f77657373656c622f7661727a2f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<a href=\"https://wesselb.github.io/varz\" rel=\"nofollow\"><img alt=\"Latest Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35e0b9e630dbc347bd4718399aa51fb3bb2bb889/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667\"></a></p>\n<p>Painless optimisation of constrained variables in AutoGrad, TensorFlow, and\nPyTorch</p>\n<p><em>Note:</em> Varz requires Python 3.6 or higher and TensorFlow 2 if TensorFlow is\nused.</p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#manual\" rel=\"nofollow\">Manual</a>\n<ul>\n<li><a href=\"#basics\" rel=\"nofollow\">Basics</a></li>\n<li><a href=\"#naming\" rel=\"nofollow\">Naming</a></li>\n<li><a href=\"#constrained-variables\" rel=\"nofollow\">Constrained Variables</a></li>\n<li><a href=\"#automatic-naming-of-variables\" rel=\"nofollow\">Automatic Naming of Variables</a></li>\n<li><a href=\"#optimisers\" rel=\"nofollow\">Optimisers</a></li>\n<li><a href=\"#pytorch-specifics\" rel=\"nofollow\">PyTorch Specifics</a></li>\n<li><a href=\"#getting-and-setting-variables-as-a-vector\" rel=\"nofollow\">Getting and Setting Variables as a Vector</a></li>\n<li><a href=\"#get-variables-from-a-source\" rel=\"nofollow\">Getting Variables from a Source</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a>\n<ul>\n<li><a href=\"#autograd\" rel=\"nofollow\">AutoGrad</a></li>\n<li><a href=\"#tensorflow\" rel=\"nofollow\">TensorFlow</a></li>\n<li><a href=\"#pytorch\" rel=\"nofollow\">PyTorch</a></li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Before installing the package, please ensure that <code>gcc</code> and <code>gfortran</code> are\navailable.\nOn OS X, these are both installed with <code>brew install gcc</code>;\nusers of Anaconda may want to instead consider <code>conda install gcc</code>.\nOn Linux, <code>gcc</code> is most likely already available, and <code>gfortran</code> can be\ninstalled with <code>apt-get install gfortran</code>.\nThen simply</p>\n<pre>pip install varz\n</pre>\n<h2>Manual</h2>\n<h3>Basics</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">varz</span> <span class=\"kn\">import</span> <span class=\"n\">Vars</span>\n</pre>\n<p>To begin with, create a <em>variable container</em> of the right data type.\nFor use with AutoGrad, use a <code>np.*</code> data type;\nfor use with PyTorch, use a <code>torch.*</code> data type;\nand for use with TensorFlow, use a <code>tf.*</code> data type.\nIn this example we'll use AutoGrad.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n</pre>\n<p>Now a variable can be created by requesting it, giving it an initial value and\na name.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">1.04404354</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.98478763</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">1.14176728</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">3.2915562</span> <span class=\"p\">]])</span>\n</pre>\n<p>If the same variable is created again, because a variable with the name <code>x</code>\nalready exists, the existing variable will be returned.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">1.04404354</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.98478763</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">1.14176728</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">3.2915562</span> <span class=\"p\">]])</span>\n</pre>\n<p>Alternatively, indexing syntax may be used to get the existing variable <code>x</code>.\nThis asserts that a variable with the name <code>x</code> already exists and will throw a\n<code>KeyError</code> otherwise.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">]</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">1.04404354</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.98478763</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">1.14176728</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">3.2915562</span> <span class=\"p\">]])</span>\n       \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"p\">[</span><span class=\"s1\">'y'</span><span class=\"p\">]</span>\n<span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"s1\">'y'</span>\n</pre>\n<p>The value of <code>x</code> can be changed by assigning it a different value.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">1.43477728</span><span class=\"p\">,</span>  <span class=\"mf\">0.51006941</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.74686452</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.05285767</span><span class=\"p\">]])</span>\n</pre>\n<p>By default, assignment is non-differentiable and <em>overwrites</em> data.\nFor differentiable assignment, which <em>replaces</em> data, set the keyword argument\n<code>differentiable=True</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">differentiable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">0.12500578</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.21510423</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.61336039</span><span class=\"p\">,</span>  <span class=\"mf\">1.23074066</span><span class=\"p\">]])</span>\n</pre>\n<p>The variable container can be copied with <code>vs.copy()</code>.\nNote that the copy <em>shares its variables with the original</em>.\nThis means that non-differentiable assignment will also mutate the original;\ndifferentiable assignment, however, will not.</p>\n<h3>Naming</h3>\n<p>Variables may be organised by naming them hierarchically using <code>/</code>s.\nFor example, <code>group1/bar</code>, <code>group1/foo</code>, and <code>group2/bar</code>.\nThis is helpful for extracting collections of variables, where wildcards may\nbe used to match names.\nFor example, <code>*/bar</code> would match <code>group1/bar</code> and <code>group2/bar</code>, and\n<code>group1/*</code> would match <code>group1/bar</code> and <code>group1/foo</code>.</p>\n<p>The names of all variables can be obtained with <code>Vars.names</code>, and variables can\nbe printed with <code>Vars.print</code>.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x1'</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x2'</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">(</span><span class=\"mf\">2.</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'y'</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">(</span><span class=\"mf\">3.</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">names</span>\n<span class=\"p\">[</span><span class=\"s1\">'x1'</span><span class=\"p\">,</span> <span class=\"s1\">'x2'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">()</span>\n<span class=\"n\">x1</span><span class=\"p\">:</span>         <span class=\"mf\">1.0</span>\n<span class=\"n\">x2</span><span class=\"p\">:</span>         <span class=\"mf\">2.0</span>\n<span class=\"n\">y</span><span class=\"p\">:</span>          <span class=\"mf\">3.0</span>\n</pre>\n<h3>Constrained Variables</h3>\n<ul>\n<li>\n<p><strong>Positive variables:</strong>\nA variable that is constrained to be <em>positive</em> can be created using\n<code>Vars.positive</code> or <code>Vars.pos</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'positive_variable'</span><span class=\"p\">)</span>\n<span class=\"mf\">0.016925610008314832</span>\n</pre>\n</li>\n<li>\n<p><strong>Bounded variables:</strong>\nA variable that is constrained to be <em>bounded</em> can be created using\n<code>Vars.bounded</code> or <code>Vars.bnd</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">bnd</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'bounded_variable'</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mf\">1.646772663807718</span>\n</pre>\n</li>\n<li>\n<p><strong>Lower-triangular matrix:</strong>\nA matrix variable that is contrained to be <em>lower triangular</em> can be\ncreated using <code>Vars.lower_triangular</code> or <code>Vars.tril</code>. Either an\ninitialisation or a shape of square matrix must be given.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">tril</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'lower_triangular'</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">2.64204459</span><span class=\"p\">,</span>  <span class=\"mf\">0.</span>        <span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.14055559</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.91298679</span><span class=\"p\">]])</span>\n</pre>\n</li>\n<li>\n<p><strong>Positive-definite matrix:</strong>\nA matrix variable that is contrained to be <em>positive definite</em> can be\ncreated using <code>Vars.positive_definite</code> or <code>Vars.pd</code>. Either an\ninitialisation or a shape of square matrix must be given.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pd</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'positive_definite'</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">1.64097496</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.52302151</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.52302151</span><span class=\"p\">,</span>  <span class=\"mf\">0.32628302</span><span class=\"p\">]])</span>\n</pre>\n</li>\n<li>\n<p><strong>Orthogonal matrix:</strong>\nA matrix variable that is contrained to be <em>orthogonal</em> can be created using\n<code>Vars.orthogonal</code> or <code>Vars.orth</code>. Either an initialisation or a\nshape of square matrix must be given.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">orth</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'orthogonal'</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span> <span class=\"mf\">0.31290403</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.94978475</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span> <span class=\"mf\">0.94978475</span><span class=\"p\">,</span>  <span class=\"mf\">0.31290403</span><span class=\"p\">]])</span>\n</pre>\n</li>\n</ul>\n<p>These constrained variables are created by transforming some <em>latent\nunconstrained representation</em> to the desired constrained space.\nThe latent variables can be obtained using <code>Vars.get_vars</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get_vars</span><span class=\"p\">(</span><span class=\"s1\">'positive_variable'</span><span class=\"p\">,</span> <span class=\"s1\">'bounded_variable'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">4.07892742</span><span class=\"p\">),</span> <span class=\"n\">array</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.604883</span><span class=\"p\">)]</span>\n</pre>\n<p>To illustrate the use of wildcards, the following is equivalent:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get_vars</span><span class=\"p\">(</span><span class=\"s1\">'*_variable'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">4.07892742</span><span class=\"p\">),</span> <span class=\"n\">array</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.604883</span><span class=\"p\">)]</span>\n</pre>\n<h3>Automatic Naming of Variables</h3>\n<p>To parametrise functions, a common pattern is the following:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'y'</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n</pre>\n<p>The names for <code>x</code> and <code>y</code> are necessary, because otherwise new variables will\nbe created and initialised every time <code>objective</code> is run.\nVarz offers two ways to not having to specify a name for every variable:\nsequential and parametrised specification.</p>\n<h4>Sequential Specification</h4>\n<p>Sequential specification can be used if, upon execution of <code>objective</code>,\nvariables are always obtained in the <em>same order</em>.\nThis means that variables can be identified with their position in this order\nand hence be named accordingly.\nTo use sequential specification, decorate the function with <code>sequential</code>.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">varz</span> <span class=\"kn\">import</span> <span class=\"n\">sequential</span>\n\n\n<span class=\"nd\">@sequential</span>\n<span class=\"k\">def</span> <span class=\"nf\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># Initialise to 5.</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>   <span class=\"c1\"># Initialise randomly.</span>\n    \n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>\n<span class=\"mf\">68.65047879833773</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>  <span class=\"c1\"># Running the objective again reuses the same variables.</span>\n<span class=\"mf\">68.65047879833773</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">names</span>\n<span class=\"p\">[</span><span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">()</span>\n<span class=\"mi\">0</span><span class=\"p\">:</span>          <span class=\"mf\">5.0</span>      <span class=\"c1\"># This is `x`.</span>\n<span class=\"mi\">1</span><span class=\"p\">:</span>          <span class=\"o\">-</span><span class=\"mf\">0.3214</span>  <span class=\"c1\"># This is `y`.</span>\n</pre>\n<h4>Parametrised Specification</h4>\n<p>Sequential specification still suffers from boilerplate code like\n<code>x = vs.get(5)</code> and <code>y = vs.get()</code>.\nThis is the problem that parametrised specification addresses, which allows\nyou to specify variables as <em>arguments to your function</em>.\nTo indicate that an argument of the function is a variable, as opposed to a\nregular argument, the argument's type hint must be set accordingly, as follows:</p>\n<ul>\n<li>\n<p><strong>Unbounded variables:</strong></p>\n<pre><span class=\"nd\">@parametrised</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Unbounded</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p><strong>Positive variables:</strong></p>\n<pre><span class=\"nd\">@parametrised</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Positive</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p><strong>Bounded variables:</strong>\nThe following two specifications are possible. The former uses the\ndefault bounds and the latter uses specified bounds.</p>\n<pre><span class=\"nd\">@parametrised</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Bounded</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<pre><span class=\"nd\">@parametrised</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Bounded</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)):</span>\n    <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p><strong>Lower-triangular variables:</strong></p>\n<pre><span class=\"nd\">@parametrised</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">LowerTriangular</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))):</span>\n    <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p><strong>Positive-definite variables:</strong></p>\n<pre><span class=\"nd\">@parametrised</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">PositiveDefinite</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))):</span>\n    <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p><strong>Orthogonal variables:</strong></p>\n<pre><span class=\"nd\">@parametrised</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Orthogonal</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))):</span>\n    <span class=\"o\">...</span>\n</pre>\n</li>\n</ul>\n<p>As can be seen from the above, the variable container must also be an argument\nof the function, because that is where the variables will be obtained from.\nA variable can be given an initial value in the way you would expect:</p>\n<pre><span class=\"nd\">@parametrised</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Unbounded</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Variable arguments and regular arguments can be mixed.\nIf <code>f</code> is called, variable arguments must not be specified, because they\nwill be obtained automatically.\nRegular arguments, however, must be specified.</p>\n<p>To use parametrised specification, decorate the function with <code>parametrised</code>.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">varz</span> <span class=\"kn\">import</span> <span class=\"n\">parametrised</span><span class=\"p\">,</span> <span class=\"n\">Unbounded</span><span class=\"p\">,</span> <span class=\"n\">Bounded</span>\n\n\n<span class=\"nd\">@parametrised</span>\n<span class=\"k\">def</span> <span class=\"nf\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Unbounded</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Bounded</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Option:'</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">)</span>\n<span class=\"n\">Option</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n<span class=\"mf\">9.757481795615316</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"s1\">'other'</span><span class=\"p\">)</span>\n<span class=\"n\">Option</span><span class=\"p\">:</span> <span class=\"n\">other</span>\n<span class=\"mf\">9.757481795615316</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"o\">=</span><span class=\"s1\">'other'</span><span class=\"p\">)</span>\n<span class=\"n\">Option</span><span class=\"p\">:</span> <span class=\"n\">other</span>\n<span class=\"mf\">9.757481795615316</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># This is not valid, because `x` will be obtained automatically from `vs`.</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"n\">keyword</span> <span class=\"n\">argument</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">not</span> <span class=\"n\">parsed</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">()</span>\n<span class=\"n\">x</span><span class=\"p\">:</span>          <span class=\"mf\">1.025</span>\n<span class=\"n\">y</span><span class=\"p\">:</span>          <span class=\"mf\">2.0</span>\n</pre>\n<h3>Optimisers</h3>\n<p>The following optimisers are available:</p>\n<pre><code>varz.{autograd,tensorflow,torch}.minimise_l_bfgs_b (L-BFGS-B)\nvarz.{autograd,tensorflow,torch}.minimise_adam     (Adam)\n</code></pre>\n<p>The L-BFGS-B algorithm is recommended for deterministic objectives, and Adam\nis recommended for stochastic objectives.</p>\n<p>See the examples for an illustration how these optimisers can be used.</p>\n<h3>PyTorch Specifics</h3>\n<p>All the variables held by a container can be detached from the current\ncomputation graph with <code>Vars.detach</code> .\nTo make a copy of the container with detached versions of the variables, use\n<code>Vars.copy</code> with <code>detach=True</code> instead.\nWhether variables require gradients can be configured with <code>Vars.requires_grad</code>.\nBy default, no variable requires a gradient.</p>\n<h3>Getting and Setting Variables as a Vector</h3>\n<p>It may be desirable to get the latent representations of a collection of\nvariables as a single vector, e.g. when feeding them to an optimiser.\nThis can be achieved with <code>Vars.get_vector</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get_vector</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'*_variable'</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([</span> <span class=\"mf\">0.12500578</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.21510423</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.61336039</span><span class=\"p\">,</span>  <span class=\"mf\">1.23074066</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">4.07892742</span><span class=\"p\">,</span>\n       <span class=\"o\">-</span><span class=\"mf\">0.604883</span>  <span class=\"p\">])</span>\n</pre>\n<p>Similarly, to update the latent representation of a collection of variables,\n<code>Vars.set_vector</code> can be used.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">set_vector</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'*_variable'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">]]),</span> <span class=\"n\">array</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">),</span> <span class=\"n\">array</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get_vector</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'*_variable'</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">])</span>\n</pre>\n<h3>Get Variables from a Source</h3>\n<p>The keyword argument <code>source</code> can set to a tensor from which the latent\nvariables will be obtained.</p>\n<p>Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"n\">array</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,))</span>\n<span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">3.</span><span class=\"p\">,</span> <span class=\"mf\">4.</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">()</span>\n<span class=\"mf\">148.41316</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"mf\">148.41316</span>\n</pre>\n<h2>Examples</h2>\n<p>The follow examples show how a function can be minimised using the L-BFGS-B\nalgorithm.</p>\n<h3>AutoGrad</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">autograd.numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">varz.autograd</span> <span class=\"kn\">import</span> <span class=\"n\">Vars</span><span class=\"p\">,</span> <span class=\"n\">minimise_l_bfgs_b</span>\n\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"mf\">5.</span> \n\n\n<span class=\"k\">def</span> <span class=\"nf\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Get a variable named \"x\", which must be positive, initialised to 10.</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">10.</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>  \n    \n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"o\">.</span><span class=\"mi\">5</span> <span class=\"o\">-</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>  \n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">minimise_l_bfgs_b</span><span class=\"p\">(</span><span class=\"n\">objective</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"p\">)</span>\n<span class=\"mf\">3.17785950743424e-19</span>  <span class=\"c1\"># Final objective function value.</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">target</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"o\">-</span><span class=\"mf\">5.637250666268301e-09</span>\n</pre>\n<h3>TensorFlow</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">varz.tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">Vars</span><span class=\"p\">,</span> <span class=\"n\">minimise_l_bfgs_b</span>\n\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"mf\">5.</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Get a variable named \"x\", which must be positive, initialised to 10.</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">10.</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>  \n    \n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"o\">.</span><span class=\"mi\">5</span> <span class=\"o\">-</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>  \n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">minimise_l_bfgs_b</span><span class=\"p\">(</span><span class=\"n\">objective</span><span class=\"p\">,</span> <span class=\"n\">vs</span><span class=\"p\">)</span>\n<span class=\"mf\">3.17785950743424e-19</span>  <span class=\"c1\"># Final objective function value.</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">target</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"o\">&lt;</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">:</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">562</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">=-</span><span class=\"mf\">5.637250666268301e-09</span><span class=\"o\">&gt;</span>\n</pre>\n<h3>PyTorch</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">varz.torch</span> <span class=\"kn\">import</span> <span class=\"n\">Vars</span><span class=\"p\">,</span> <span class=\"n\">minimise_l_bfgs_b</span>\n\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"p\">(</span><span class=\"mf\">5.</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">objective</span><span class=\"p\">(</span><span class=\"n\">vs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Get a variable named \"x\", which must be positive, initialised to 10.</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">vs</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">(</span><span class=\"mf\">10.</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>  \n    \n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"o\">.</span><span class=\"mi\">5</span> <span class=\"o\">-</span> <span class=\"n\">target</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>  \n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">(</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">minimise_l_bfgs_b</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">objective</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">]),</span> <span class=\"n\">vs</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">])</span>\n<span class=\"n\">array</span><span class=\"p\">(</span><span class=\"mf\">3.17785951e-19</span><span class=\"p\">)</span>  <span class=\"c1\"># Final objective function value.</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vs</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">target</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n<span class=\"n\">tensor</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">5.6373e-09</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6479007, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7790a446c6bda587b2478a44299aa29f", "sha256": "16b3f94f89720661e0a7d3f597b2f2f560daa16c8cf0de2417a04de654a98c51"}, "downloads": -1, "filename": "varz-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7790a446c6bda587b2478a44299aa29f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15342, "upload_time": "2019-06-13T16:58:40", "upload_time_iso_8601": "2019-06-13T16:58:40.753522Z", "url": "https://files.pythonhosted.org/packages/cb/fc/047b84ac1aeab39d8a5a595d88005e289467e552efbb7f3b09b7e9ec857e/varz-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3b4092121a8e32ed047d0dd9265ad7c6", "sha256": "16f05576c5056858366e8458d12a1b311e54c527f112acc2c8d2a1cfcc1b76b1"}, "downloads": -1, "filename": "varz-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3b4092121a8e32ed047d0dd9265ad7c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15411, "upload_time": "2019-06-13T18:01:34", "upload_time_iso_8601": "2019-06-13T18:01:34.810276Z", "url": "https://files.pythonhosted.org/packages/3c/fa/2623fdf0ac28cac995e29792508c0119c5f8454e3422ab17c4d6550f5493/varz-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4552b37c588975e374a4416f096e51a1", "sha256": "2b7ba495c436eaefbcc41f3f4d62ccb23d9ddeadccd448b2c0cfd97f9d54cf5e"}, "downloads": -1, "filename": "varz-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4552b37c588975e374a4416f096e51a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15583, "upload_time": "2019-07-09T22:38:24", "upload_time_iso_8601": "2019-07-09T22:38:24.812886Z", "url": "https://files.pythonhosted.org/packages/40/cf/96c891fa4f7a3ad4f8b5ebbbedbd1267db64c62fc377984490df817699c5/varz-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "42336cbb45c1d33d2630bdb46ebd93f3", "sha256": "48203d5f557b5ea9338e662c58e92b6a535919fdf37267781f2acf2b73e45e8c"}, "downloads": -1, "filename": "varz-0.3.0.tar.gz", "has_sig": false, "md5_digest": "42336cbb45c1d33d2630bdb46ebd93f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16946, "upload_time": "2019-10-29T22:07:50", "upload_time_iso_8601": "2019-10-29T22:07:50.715781Z", "url": "https://files.pythonhosted.org/packages/43/3f/f6b10dc0af9657aebb8793f95142ed695c6197c58b705235c3b662539865/varz-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "10736faeb033cfef8ec3052d998949d8", "sha256": "7aea224e32f1df9d6ef4312881d043a20148884548188cf46cc300d6b5526261"}, "downloads": -1, "filename": "varz-0.3.1.tar.gz", "has_sig": false, "md5_digest": "10736faeb033cfef8ec3052d998949d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18742, "upload_time": "2019-11-06T00:37:35", "upload_time_iso_8601": "2019-11-06T00:37:35.131987Z", "url": "https://files.pythonhosted.org/packages/b0/20/c4a033b0a8e38955103b9c4974472a5aab9548cd5aa92a91878dc80fd2c2/varz-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f19814ff0c7549a8efcbd412de155b26", "sha256": "fb0b9f4e65bfd5ec19d8f39ac0cba27e118b7327c938f0710760c4011135c8cb"}, "downloads": -1, "filename": "varz-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f19814ff0c7549a8efcbd412de155b26", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22928, "upload_time": "2019-11-07T16:22:37", "upload_time_iso_8601": "2019-11-07T16:22:37.866536Z", "url": "https://files.pythonhosted.org/packages/74/f4/c3c1da90ab72c9fb6e3f0918b8437288373ddc2a3ca931430349657d9634/varz-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "664de356b252a68b16ccc0d45f8e008d", "sha256": "8cf9fa72a5be813b43d421d5eb12b8de62aba4b39eda76b04510c265dbad1b32"}, "downloads": -1, "filename": "varz-0.4.1.tar.gz", "has_sig": false, "md5_digest": "664de356b252a68b16ccc0d45f8e008d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25562, "upload_time": "2020-01-03T13:24:32", "upload_time_iso_8601": "2020-01-03T13:24:32.782966Z", "url": "https://files.pythonhosted.org/packages/6c/d3/4030369fc86225f62bec9c7b603f3a7a8d45d26560cd1edf0d5dc000b154/varz-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "ea322bca83d02897eed0d3120cdc145e", "sha256": "4cddc1ecdd54c3b1b4529c48d496855e75406fc7877052ab573874ebf972a30d"}, "downloads": -1, "filename": "varz-0.4.2.tar.gz", "has_sig": false, "md5_digest": "ea322bca83d02897eed0d3120cdc145e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25715, "upload_time": "2020-01-04T15:43:09", "upload_time_iso_8601": "2020-01-04T15:43:09.326642Z", "url": "https://files.pythonhosted.org/packages/c0/d5/6735ae95110788be4d80fc4cfd0d3433cbc7a6c3c67618960d1f0175b679/varz-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "16f8469769c345c9ca0c564123a0eebf", "sha256": "43e92069ad3c276f3a0a8f053c10babff58cb5d469c071919a310a9635b627b1"}, "downloads": -1, "filename": "varz-0.4.3.tar.gz", "has_sig": false, "md5_digest": "16f8469769c345c9ca0c564123a0eebf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25750, "upload_time": "2020-01-18T18:02:31", "upload_time_iso_8601": "2020-01-18T18:02:31.788882Z", "url": "https://files.pythonhosted.org/packages/d5/e2/02cfb67e9ee94133bc0cfe08ccd890605ffe8eef1911e0582ed60cc4ec4b/varz-0.4.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16f8469769c345c9ca0c564123a0eebf", "sha256": "43e92069ad3c276f3a0a8f053c10babff58cb5d469c071919a310a9635b627b1"}, "downloads": -1, "filename": "varz-0.4.3.tar.gz", "has_sig": false, "md5_digest": "16f8469769c345c9ca0c564123a0eebf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25750, "upload_time": "2020-01-18T18:02:31", "upload_time_iso_8601": "2020-01-18T18:02:31.788882Z", "url": "https://files.pythonhosted.org/packages/d5/e2/02cfb67e9ee94133bc0cfe08ccd890605ffe8eef1911e0582ed60cc4ec4b/varz-0.4.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:43 2020"}