{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": ".. image:: https://github.com/jp43/DockBox/raw/master/logo_small.png\n   :align: right\n\n*******\nDockBox\n*******\n\nDockBox is a python wrapper library designed to facilitate the use of standard docking\nprograms either alone or in combination. In addition, DockBox enables to rescore the\ngenerated docking poses with different popular scoring algorithms as well as to analyze\nthe results using different consensus docking/scoring strategies.\n\n**List of programs supported by DockBox**\n\n* **Docking**:\n\n  * AutoDock 4 (http://autodock.scripps.edu)\n  * AutoDock Vina (http://vina.scripps.edu/index.html)\n  * DOCK 6 (http://dock.compbio.ucsf.edu/DOCK_6/index.htm)\n  * Glide (https://www.schrodinger.com/glide)\n  * GOLD (https://www.ccdc.cam.ac.uk/solutions/csd-discovery/components/gold/)\n  * MOE (https://www.chemcomp.com/MOE-Molecular_Operating_Environment.htm)\n\n* **Rescoring**:\n\n  * AutoDock 4 (http://autodock.scripps.edu)\n  * AutoDock Vina (http://vina.scripps.edu/index.html)\n  * DOCK 6 (http://dock.compbio.ucsf.edu/DOCK_6/index.htm)\n  * DSX (http://pc1664.pharmazie.uni-marburg.de/drugscore/)\n  * Glide (https://www.schrodinger.com/glide)\n  * MOE (https://www.chemcomp.com/MOE-Molecular_Operating_Environment.htm)\n\nNone of the above docking or scoring programs are included in the current repository.\nHence the user eager to test a docking/scoring program with DockBox should first \ninstall the program separately on the same system DockBox is installed. \n\nTo make a docking or scoring program usable by DockBox, make sure all the executable files\nrequired for each program can be directly run on the command line from any location,\ni.e., are in your PATH (see section **executable files required for each program** \nto find out the executables needed to run each docking/scoring programs). For MOE and \nGlide, additional environment variables, i.e, MOE and SCHRODINGER, respectively, must be set up.\n\n.. contents:: **Table of Contents**\n\nPrerequisites\n*************\n\nThe following are the minimal requirements to install the DockBox module\n\n* python version 2.6 or 2.7\n\n* virtualenv version 1.11 or later\n\n* pip version 1.5 or later\n\n\nInstallation\n************\n\nThe easiest way to install DockBox is to create a virtual environment. In this way, DockBox \nand its dependencies can easily be installed in user-space without clashing with potentially \nincompatible system-wide packages.\n\nOnce virtualenv has been properly installed, simply type (and press the return key)\n\n::\n\n virtualenv env\n  \non the command line followed by\n\n::\n\n source env/bin/activate\n \nto activate the virtual environment (do not forget to activate your environment every time you log into a new shell environment).\n\nFinally, the DockBox package can be set up using pip by typing\n\n::\n\n pip install dockbox\n \n \nInstallation is complete!\n\n\nRequired executable files\n*************************\n\nAny docking/scoring software intended to be used by DockBox should be installed separetely and should work as a standalone program. In addition, make sure the following exectuables are in your PATH, depending on which docking/scoring software should be used:\n\n* **AutoDock 4** \n\n  * autodock4\n  * autogrid4\n  * babel\n  * prepare_dpf4.py\n  * prepare_gpf4.py\n  * prepare_ligand4.py\n  * prepare_receptor4.py\n\n  The autodock4 and autogrid4 executables can be installed by installing `AutoDock4   <http://autodock.scripps.edu/downloads/autodock-registration/autodock-4-2-download-page/>`_. All the .py executable files are included in the `MGLTools <http://mgltools.scripps.edu/downloads>`_ package. It is important to not move those executable to different locations outside of the MGLTools package as DockBox uses those locations to deduce additional MGLTools python modules (PyBabel, MolKit). The babel routine can be set by installing OpenBabel from it official `website <http://openbabel.org/wiki/Main_Page>`_.\n\n* **AutoDock Vina**\n\n  * babel\n  * prepare_ligand4.py\n  * prepare_receptor4.py\n  * vina\n\n  The vina executable is available within the `AutoDock Vina <http://vina.scripps.edu/index.html>`_ package. See AutoDock 4 section for other executables.\n\n* **DOCK 6**\n\n  * chimera\n  * dms\n  * dock6\n  * grid\n  * showbox\n  * sphere_selector\n  * sphgen_cpp\n\n  The chimera command is accessible when installing `CHIMERA <http://www.cgl.ucsf.edu/chimera>`_. The dock6, grid, showbox and sphere_selector commands are all part of the `DOCK 6 package <http://dock.compbio.ucsf.edu/Online_Licensing/index.htm>`_. The dms program can be installed seperately from `here <http://www.cgl.ucsf.edu/chimera/docs/UsersGuide/midas/dms1.html>`_ while sphgen_cpp can be downloaded from the following `url <http://dock.compbio.ucsf.edu/Contributed_Code/sphgen_cpp.htm>`_.\n\n* **DSX**\n\n  * dsx\n\n  The dsx-like routines can be downloaded from the official `link <http://pc1664.pharmazie.uni-marburg.de/drugscore/dsx_download.php>`_. Note that DockBox assumes DSX is run via an executable file called dsx. Therefore, once you selected the appropriate routine to be run (e.g., dsx_linux_64.lnx for linux systems), create a symbolic link via ln. For example, assuming you are located in the same directory as dsx_linux_64.lnx, you can use the following command:\n  \n::\n\n  ln -s dsx_linux_64.lnx dsx\n\n* **Glide**\n\n  * glide\n  * glide_sort\n  * pdbconvert\n  * prepwizard\n  \n  All the executables can be found within the `Schrodinger package <https://www.schrodinger.com>`_. Make sure the SCHRODINGER environment variable (pointing towards Schrodinger's installation directory) has been correctly exported. Note that a valid license for Glide is required.\n\n* **GOLD**\n\n  * gold_auto\n  \n  gold_auto is the main executable of `GOLD <https://www.ccdc.cam.ac.uk/solutions/csd-discovery/components/gold/>`_.Note that a valid license of GOLD is required.\n\n* **MOE**\n\n  * moebatch\n  \n  Can be downloaded over `there <https://www.chemcomp.com/MOE-Molecular_Operating_Environment.htm>`_. Make sure the MOE environment variable (pointing towards MOE's installation directory) has been correctly exported. Note that a valid license of MOE is required.\n\nCommands\n********\n\nThe DockBox package contains two main routines: *rundbx* and *extract_dbx_best_poses*. The former is intended to be used solely for docking and rescoring while the latter enables to analyze the results and to select the best pose(s) from a combination of scores or among different consensus docking schemes.\n\n*rundbx*\n########\n\nrundbx is used to dock a ligand to a protein structure and possibly minimize and rescore the output poses. When typing \"rundbx -h\" on the command line, the following help message will pop up:\n\n:: \n\n    usage: rundbx [-h] -l INPUT_FILE_L -r INPUT_FILE_R -f CONFIG_FILE\n                  [-prepare_only] [-rescore_only]\n    \n    rundbx : dock and rescore with multiple programs -------- Requires one file\n    for the ligand (1 struct.) and one file for the receptor (1 struct.)\n    \n    optional arguments:\n      -h, --help       show this help message and exit\n      -l INPUT_FILE_L  Ligand coordinate file(s): .mol2\n      -r INPUT_FILE_R  Receptor coordinate file(s): .pdb\n      -f CONFIG_FILE   config file containing docking parameters\n      -prepare_only    Only prepare scripts for docking (does not run docking)\n      -rescore_only    Run rescoring only\n\n* Inputs\n\n  * -l INPUT_FILE_L: **.mol2** file containing the coordinates of the ligand (only one structure allowed)\n  \n  * -r INPUT_FILE_R: **.pdb** file containing the receptor coordinates (only one structure allowed)\n  \n  * -f CONFIG_FILE: **.ini** configuration file containing the docking parameters (see the section **preparing the rundbx configuration file**)\n  \n* Options\n\n  * -prepare_only: generate all docking folders and scripts needed to run each docking program separately. Does actually not run docking.\n  \n  * -rescore_only: option used to perform the rescoring step only. Using this option implies that you have already run *rundbx* and generated a **poses** folder in the current directory. If a **rescoring** folder already exists as an output of a previous *rundbx* run, every data generated previously by rescoring with the same scoring functions as the current ones will be overwritten while data generated with scoring functions different from the current ones will be kept.\n\n\n*extract_dbx_best_poses*\n#########################\n\n*extract_dbx_best_poses* is the routine used to analyze the results and select the best docking poses from the outputs of the *rundbx* command. When typing \"extract_dbx_best_poses -h\" on the command line, the following help message will pop up:\n\n::\n\n  usage: extract_dbx_best_poses [-h] [-all-targets] [-all-isomers] [-csv FILE]\n                              [-cutoff RMSD_VALUE] [-d PRGM1 [PRGM2 ...]]\n                              [-dirs DIR1 [DIR2 ...]] [-r DIRECTORY NAME]\n                              [-s FUNC [FUNC ...] | -cd PRGM [PRGM ...] |\n                              -sbcd FUNC [FUNC ...]]\n\n  Extract best docking poses after rundbx finished.\n\n  optional arguments:\n  -h, --help            show this help message and exit\n  -all-targets          Select best poses over all the targets. If not\n                        specified, extract best pose separately for each\n                        target. A \"lig/target/isomer\" architecture of the\n                        folders is assumed\n  -all-isomers          Select best poses over all the isomers. If not\n                        specified, extract best pose separately for every\n                        isomer. A \"lig/target/isomer\" architecture of the\n                        folders is assumed\n  -csv FILE             .csv filename with compounds. Used to add names of\n                        compounds. Default: none\n  -cutoff RMSD_VALUE    RMSD cutoff used for consensus docking or score-based\n                        consensus docking. Default: 2.0 A\n  -d PRGM1 [PRGM2 ...]  Docking programs (instances) to be considered when\n                        extracting best poses\n  -dirs DIR1 [DIR2 ...]\n                        Directories considered for analysis. Should contain a\n                        folder called \"poses\". Default: curr. dir\n  -r DIRECTORY NAME     Name of results directory. Default: results\n  -s FUNC [FUNC ...]    Scoring functions used to extract the best pose\n                        (combination of scores)\n  -cd PRGM [PRGM ...]   Docking programs used for standard consensus docking\n  -sbcd FUNC [FUNC ...]\n                        Scoring functions used for score-based consensus\n                        docking\n\n\nUsing *rundbx*\n**************\n\nThe *rundbx* routine allows the user to dock and rescore a ligand to a protein target using multiple docking \nand scoring functions. Running *rundbx* is fairly simple as it requires only three input files, namely a PDB file \nincluding the protein structure to dock on (-r flag), a file with Tripos Mol2 format containing a 3D structure of the \nligand (1 structure per file, -l flag) and an INI configuration file (-f flag) which contains all the options \nrelated to docking and/or rescoring (see section **Preparing the INI configuration file**). \n\nWhen finished correcly, a *rundbx* job should have created a folder called **poses** containing all the poses \ngenerated by the different docking programs as specified in the INI configuration file. Each pose is provided \nin a file with .mol2 format named *lig-<index>.mol2*, where <index> is the index of the pose. Within the **poses**\nfolder, a file called info.dat can also be found. The file contains information relative to each docking program/site\ncombination specified in the INI file, including the number of poses generated and the index of the first \npose generated for that combination. \n\nBelow is an example of an *info.dat* file obtained when docking was performed with Autodock, Autodock Vina and DOCK 6 on the same binding site:\n\n::\n\n  #1,28\n  program,nposes,firstidx,site\n  autodock,10,1,\n  vina,10,11,\n  dock,7,21,\n \nshowing that a total of 27 poses were generated (28 minus 1). 10 poses were generated with Autodock, namely, poses from index 1 to 10, 10 were generated with Autodock Vina, i.e., poses from index 11 to 20, and 7 were generated with DOCK 6, poses from index 21 to 27. No label for the binding site was specified as docking was performed on the same site.\n  \nOther outputs of the *rundbx* command are folders created for every docking program/site combination specified in the INI file, which contain the docking poses, the docking scores (obtained with docking) and intermediate files generated by the docking software. For example, if Autodock and Autodock Vina were used to dock on three different binding sites called site1, site2 and site3 (see section **Preparing the INI configuration file**), then a total of six folders named **autodock.site1**, **autodock.site2**, **autodock.site3**, **vina.site1**, **vina.site2** and **vina.site3**, should have been created.\n  \nFinally, if the rescoring option was enabled in the INI file, a folder called **rescoring** should have been created as well, containing file(s) named <program>.score, where <program> is the name of each program used for rescoring.\n\n\nPreparing the INI configuration file\n####################################\n\nBesides one MOL2 file containing the ligand structure (-l flag) and one PDB file containing the receptor structure (-r flag), running *rundbx* requires a configuration file (-f flag) that specifies all the parameters needed for the docking procedure.\n\nThe *rundbx* configuration file should be a INI file (https://en.wikipedia.org/wiki/INI_file), i.e., the file should be split in sections, each section name appearing on a line by itself, in square brackets (\"[\" and \"]\"). Each section contains a certain number of keys which refer to specific options used; all keys after the section declaration are associated with that section. Finally, every key should have a name (option name) and a value (option value), delimited by an equals sign (=).\n\nBelow is an example of configuration file used to dock on two binding sites and rescore with DrugScoreX (dsx), Autodock and Autodock Vina.\n\n::\n\n    [DOCKING]\n    site = site1, site2\n    program = autodock, vina, dock, glide\n    rescoring = yes\n    minimize = yes\n    cleanup = yes\n    \n    [RESCORING]\n    program = dsx, autodock, vina\n    \n    [DSX]\n    pot_dir = /pmshare/jordane/CSD_potentials/DSX_CSD_Potentials_v0511/csd_pot_0511/\n    other_flags = -T0 1.0 -T1 1.0 -T3 1.0 -j\n    \n    [AUTODOCK]\n    ga_run = 20\n    spacing = 0.4\n    \n    [VINA]\n    num_modes = 20\n    \n    [DOCK]\n    nposes = 20\n    \n    [GLIDE]\n    poses_per_lig = 20\n    \n    [SITE1]\n    center = 75.5, 80.0, 31.0\n    boxsize = 40.0, 40.0, 40.0\n    \n    [SITE2]\n    center = 75.5, 40.0, 50.0\n    boxsize = 40.0, 40.0, 40.0\n\nGeneral options\n###############\n\n* The **DOCKING** section includes the software that should be used for docking, and if minimization, rescoring and/or cleanup should be performed. The docking software should be specified with coma separation through the key **programs**. The keys relative to the **DOCKING** section are:\n\n\n  * **programs**: specifies the software which are used for docking (autodock, dock6, glide, gold, moe and/or vina). Options relative to each program (or instance) are specfied within the section of the same name. For example, if autodock is in the list of programs, options associated with autodock should be specified in the **AUTODOCK** section. In case the same software needs to be used multiple times, numbering can be appended to the name of the program (e.g., in the first example below, multiple runs of MOE are performed using different scoring methods: moe, moe1, moe2).\n\n  * **minimization**: performs minimization on the generated poses (yes or no).\n\n  * **rescoring**: performs rescoring on the generated poses (yes or no). I strongly recommend to enable minimization in case rescoring is done. This will avoid a lot clashes, especially when the software used for rescoring are different from those used for docking. If the rescoring option is enabled, a section RESCORING should be created that contains all the options relative to that step (see below).\n\n  * **cleanup**: specifies if big intermediate files should be removed (yes or no).\n\n  * **site**: specifies the labels for the binding sites in case multiple binding sites are considered (site1, site2,...). See the example configuration to dock on multiple binding site, minimize and rescore the poses with multiple software.\n\n\nDocking and rescoring options relative to each program are detailed in the section **Docking/scoring options relative to each software**\n\n* The **SITE** section includes the information about the box to spot the binding site. The keys are the following:\n\n  * **center**: x, y, z coordinates of the center of the binding box (in \u00c5).\n\n  * **boxsize**: size of the box along each dimension x, y, z. The dimensions of the box should be no more than 50.0, 50.0, 50.0 (in \u00c5).\n\n\n* The **RESCORING** section has only one key specifying the programs used to rescore:\n\n  * **program**: specifies the software which are used for docking (autodock, dock6, glide, gold, moe and/or vina). Options relative to each program (or instance) are specfied within the section of the same name. For example, if autodock is in the list of programs, options associated with autodock should be specified in the **AUTODOCK** section. In case the same software needs to be used multiple times, numbering can be appended to the name of the program (e.g., in the example below, multiple runs of MOE are performed using different scoring methods: moe, moe1, moe2).\n\n\nDocking/scoring options\n#######################\n\nEach section relative to a docking/scoring program should be named the way it was specified under **program** in the **DOCKING** and/or **RESCORING** section. Below is a list of all the options per software that can be specified in the configuration file.\n\n**Autodock**\n\n* ga_run (default: 100): number of autodock runs = targeted number of final poses\n* spacing (default: 0.3): grid spacing\n\n**Note 1**: the partial charges of the ligand are obtained from the Gasteiger method using the AutodockTools command *prepare_ligand4.py*\n\n**Note 2**: the number of energy evalutations *ga_num_evals* is automatically calculated from the number of torsions angles in the ligand structure via the formula:\n\n::\n\n        ga_num_evals = min(25000000, 987500 * n_torsion_angles + 125000)\n\n**Note 3**: As is usually the case for Autodock, non polar hydrogens in the ligand structure are removed prior to docking in order to properly use the Autodock force field. Once the docking has been performed, nonpolar hydrogens are reattributed in a way consistent with the input structure. Unless the *minimize* option in the configuration file is set to *yes*, no minimization is performed on those hydrogens.\n\n**Note 4** Final poses are extracted from the .dlg file using Open Babel via the following command:\n\n::\n\n        babel -ad -ipdbqt dock.dlg -omol2 lig-.mol2 -m\n\n**Autodock Vina**\n\n* cpu (default: 1)\n* energy_range (default: 3)\n* num_modes (default: 9): targeted number of final poses\n\n**Note 1**: the partial charges of the ligand are obtained from the Gasteiger method using the AutodockTools command *prepare_ligand4.py*\n\n**Note 2**: As is usually the case for Autodock Vina, non polar hydrogens in the ligand structure are removed prior to docking in order to properly use the Autodock force field. Once the docking has been performed, nonpolar hydrogens are reattributed in a way consistent with the input structure. Unless the *minimize* option in the configuration file is set to *yes*, no minimization is performed on those hydrogens.\n\n**DOCK 6**\n\n* attractive_exponent (default: 6)\n* extra_margin (default: 2.0)\n* grid_spacing (default: 0.3)\n* maximum_sphere_radius (default: 4.0)\n* max_orientations (default: 10000)\n* minimum_sphere_radius (default: 1.4)\n* nposes (default: 20): targeted number of final poses\n* num_scored_conformers (default 5000)\n* probe_radius (default: 1.4)\n* repulsive_exponent (default: 12)\n\n**DSX**\n\n**Glide**\n\n* pose_rmsd (default: 0.5):\n* poses_per_lig (default: 10): targeted number of final poses\n* precision (default: SP):\n* use_prepwizard (default: True):\n\n**GOLD**\n\n* nposes (default: 20)\n\n**MOE** (scoring)\n\n* gtest (default: 0.01)\n* maxpose (default: 5)\n* placement (default: Triangle Matcher)\n* placement_maxpose (default: 250)\n* placement_nsample (default: 10)\n* remaxpose (default: 1)\n* rescoring (default: GBVI/WSA dG)\n* scoring (default: London dG)\n\n\nExamples\n########\n\n**Multi-program docking on a single binding site**\n\nBelow is an example of configuration file that can be used as an input of *rundbx*. The docking procedure is carried out on a single binding site specied as a box with dimensions 30.0 x 30.0 x 30.0 centered at the position (x, y, z) = 8.446, 25.365, 4.394.\n\n::\n\n    [DOCKING]\n    program = autodock, vina, dock, glide, moe, moe1, moe2\n    rescoring = no\n    minimize = yes\n    cleanup = no\n    \n    [AUTODOCK]\n    ga_run = 50\n    spacing = 0.3\n    \n    [VINA]\n    num_modes = 20\n    \n    [DOCK]\n    nposes = 200\n    \n    [GLIDE]\n    poses_per_lig = 200\n    pose_rmsd = 2.0\n    precision = SP\n    use_prepwizard = False\n    \n    [MOE]\n    scoring = London dG\n    maxpose = 100\n    remaxpose = 50\n    \n    [MOE1]\n    scoring = GBVI/WSA dG\n    maxpose = 100\n    remaxpose = 50\n    \n    [MOE2]\n    scoring = Affinity dG\n    maxpose = 100\n    remaxpose = 50\n    \n    [SITE]\n    center = 8.446, 25.365, 4.394\n    boxsize = 30.0, 30.0, 30.0\n\n\n**Multi-program docking and rescoring on multiple binding sites**\n\nBelow is another example of configuration file for *rundbx* used to dock on two binding sites and rescore with DrugScoreX (dsx), Autodock and Autodock Vina.\n\n::\n\n    [DOCKING]\n    site = site1, site2\n    program = autodock, vina, dock, glide\n    rescoring = yes\n    minimize = yes\n    cleanup = yes\n    \n    [RESCORING]\n    program = dsx, autodock, vina\n    \n    [DSX]\n    pot_dir = /pmshare/jordane/CSD_potentials/DSX_CSD_Potentials_v0511/csd_pot_0511/\n    other_flags = -T0 1.0 -T1 1.0 -T3 1.0 -j\n    \n    [AUTODOCK]\n    ga_run = 20\n    spacing = 0.4\n    \n    [VINA]\n    num_modes = 20\n    \n    [DOCK]\n    nposes = 20\n    \n    [GLIDE]\n    poses_per_lig = 20\n    \n    [SITE1]\n    center = 75.5, 80.0, 31.0\n    boxsize = 40.0, 40.0, 40.0\n    \n    [SITE2]\n    center = 75.5, 40.0, 50.0\n    boxsize = 40.0, 40.0, 40.0\n\nNote that the DOCKING section includes the label of the binding sites through the keyword *site*, here, site1 and site2. Each label refers to the section of the same name SITE1 and SITE2, respectively.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "dockbox", "package_url": "https://pypi.org/project/dockbox/", "platform": "", "project_url": "https://pypi.org/project/dockbox/", "project_urls": null, "release_url": "https://pypi.org/project/dockbox/1.3/", "requires_dist": null, "requires_python": "", "summary": "Platform package to simplify the use of docking programs and consensus methods", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://github.com/jp43/DockBox/raw/master/logo_small.png\" class=\"align-right\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa1e6b440d48e50ae810ea92f78d7b9f6147a54b/68747470733a2f2f6769746875622e636f6d2f6a7034332f446f636b426f782f7261772f6d61737465722f6c6f676f5f736d616c6c2e706e67\">\n<div id=\"dockbox\">\n<h2><a href=\"#id1\" rel=\"nofollow\">DockBox</a></h2>\n<p>DockBox is a python wrapper library designed to facilitate the use of standard docking\nprograms either alone or in combination. In addition, DockBox enables to rescore the\ngenerated docking poses with different popular scoring algorithms as well as to analyze\nthe results using different consensus docking/scoring strategies.</p>\n<p><strong>List of programs supported by DockBox</strong></p>\n<ul>\n<li><strong>Docking</strong>:<ul>\n<li>AutoDock 4 (<a href=\"http://autodock.scripps.edu\" rel=\"nofollow\">http://autodock.scripps.edu</a>)</li>\n<li>AutoDock Vina (<a href=\"http://vina.scripps.edu/index.html\" rel=\"nofollow\">http://vina.scripps.edu/index.html</a>)</li>\n<li>DOCK 6 (<a href=\"http://dock.compbio.ucsf.edu/DOCK_6/index.htm\" rel=\"nofollow\">http://dock.compbio.ucsf.edu/DOCK_6/index.htm</a>)</li>\n<li>Glide (<a href=\"https://www.schrodinger.com/glide\" rel=\"nofollow\">https://www.schrodinger.com/glide</a>)</li>\n<li>GOLD (<a href=\"https://www.ccdc.cam.ac.uk/solutions/csd-discovery/components/gold/\" rel=\"nofollow\">https://www.ccdc.cam.ac.uk/solutions/csd-discovery/components/gold/</a>)</li>\n<li>MOE (<a href=\"https://www.chemcomp.com/MOE-Molecular_Operating_Environment.htm\" rel=\"nofollow\">https://www.chemcomp.com/MOE-Molecular_Operating_Environment.htm</a>)</li>\n</ul>\n</li>\n<li><strong>Rescoring</strong>:<ul>\n<li>AutoDock 4 (<a href=\"http://autodock.scripps.edu\" rel=\"nofollow\">http://autodock.scripps.edu</a>)</li>\n<li>AutoDock Vina (<a href=\"http://vina.scripps.edu/index.html\" rel=\"nofollow\">http://vina.scripps.edu/index.html</a>)</li>\n<li>DOCK 6 (<a href=\"http://dock.compbio.ucsf.edu/DOCK_6/index.htm\" rel=\"nofollow\">http://dock.compbio.ucsf.edu/DOCK_6/index.htm</a>)</li>\n<li>DSX (<a href=\"http://pc1664.pharmazie.uni-marburg.de/drugscore/\" rel=\"nofollow\">http://pc1664.pharmazie.uni-marburg.de/drugscore/</a>)</li>\n<li>Glide (<a href=\"https://www.schrodinger.com/glide\" rel=\"nofollow\">https://www.schrodinger.com/glide</a>)</li>\n<li>MOE (<a href=\"https://www.chemcomp.com/MOE-Molecular_Operating_Environment.htm\" rel=\"nofollow\">https://www.chemcomp.com/MOE-Molecular_Operating_Environment.htm</a>)</li>\n</ul>\n</li>\n</ul>\n<p>None of the above docking or scoring programs are included in the current repository.\nHence the user eager to test a docking/scoring program with DockBox should first\ninstall the program separately on the same system DockBox is installed.</p>\n<p>To make a docking or scoring program usable by DockBox, make sure all the executable files\nrequired for each program can be directly run on the command line from any location,\ni.e., are in your PATH (see section <strong>executable files required for each program</strong>\nto find out the executables needed to run each docking/scoring programs). For MOE and\nGlide, additional environment variables, i.e, MOE and SCHRODINGER, respectively, must be set up.</p>\n<div id=\"table-of-contents\">\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#dockbox\" id=\"id1\" rel=\"nofollow\">DockBox</a><ul>\n<li><a href=\"#prerequisites\" id=\"id2\" rel=\"nofollow\">Prerequisites</a></li>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#required-executable-files\" id=\"id4\" rel=\"nofollow\">Required executable files</a></li>\n<li><a href=\"#commands\" id=\"id5\" rel=\"nofollow\">Commands</a><ul>\n<li><a href=\"#rundbx\" id=\"id6\" rel=\"nofollow\"><em>rundbx</em></a></li>\n<li><a href=\"#extract-dbx-best-poses\" id=\"id7\" rel=\"nofollow\"><em>extract_dbx_best_poses</em></a></li>\n</ul>\n</li>\n<li><a href=\"#using-rundbx\" id=\"id8\" rel=\"nofollow\">Using <em>rundbx</em></a><ul>\n<li><a href=\"#preparing-the-ini-configuration-file\" id=\"id9\" rel=\"nofollow\">Preparing the INI configuration file</a></li>\n<li><a href=\"#general-options\" id=\"id10\" rel=\"nofollow\">General options</a></li>\n<li><a href=\"#docking-scoring-options\" id=\"id11\" rel=\"nofollow\">Docking/scoring options</a></li>\n<li><a href=\"#examples\" id=\"id12\" rel=\"nofollow\">Examples</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"prerequisites\">\n<h3><a href=\"#id2\" rel=\"nofollow\">Prerequisites</a></h3>\n<p>The following are the minimal requirements to install the DockBox module</p>\n<ul>\n<li>python version 2.6 or 2.7</li>\n<li>virtualenv version 1.11 or later</li>\n<li>pip version 1.5 or later</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Installation</a></h3>\n<p>The easiest way to install DockBox is to create a virtual environment. In this way, DockBox\nand its dependencies can easily be installed in user-space without clashing with potentially\nincompatible system-wide packages.</p>\n<p>Once virtualenv has been properly installed, simply type (and press the return key)</p>\n<pre>virtualenv env\n</pre>\n<p>on the command line followed by</p>\n<pre>source env/bin/activate\n</pre>\n<p>to activate the virtual environment (do not forget to activate your environment every time you log into a new shell environment).</p>\n<p>Finally, the DockBox package can be set up using pip by typing</p>\n<pre>pip install dockbox\n</pre>\n<p>Installation is complete!</p>\n</div>\n<div id=\"required-executable-files\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Required executable files</a></h3>\n<p>Any docking/scoring software intended to be used by DockBox should be installed separetely and should work as a standalone program. In addition, make sure the following exectuables are in your PATH, depending on which docking/scoring software should be used:</p>\n<ul>\n<li><p><strong>AutoDock 4</strong></p>\n<ul>\n<li>autodock4</li>\n<li>autogrid4</li>\n<li>babel</li>\n<li>prepare_dpf4.py</li>\n<li>prepare_gpf4.py</li>\n<li>prepare_ligand4.py</li>\n<li>prepare_receptor4.py</li>\n</ul>\n<p>The autodock4 and autogrid4 executables can be installed by installing <a href=\"http://autodock.scripps.edu/downloads/autodock-registration/autodock-4-2-download-page/\" rel=\"nofollow\">AutoDock4</a>. All the .py executable files are included in the <a href=\"http://mgltools.scripps.edu/downloads\" rel=\"nofollow\">MGLTools</a> package. It is important to not move those executable to different locations outside of the MGLTools package as DockBox uses those locations to deduce additional MGLTools python modules (PyBabel, MolKit). The babel routine can be set by installing OpenBabel from it official <a href=\"http://openbabel.org/wiki/Main_Page\" rel=\"nofollow\">website</a>.</p>\n</li>\n<li><p><strong>AutoDock Vina</strong></p>\n<ul>\n<li>babel</li>\n<li>prepare_ligand4.py</li>\n<li>prepare_receptor4.py</li>\n<li>vina</li>\n</ul>\n<p>The vina executable is available within the <a href=\"http://vina.scripps.edu/index.html\" rel=\"nofollow\">AutoDock Vina</a> package. See AutoDock 4 section for other executables.</p>\n</li>\n<li><p><strong>DOCK 6</strong></p>\n<ul>\n<li>chimera</li>\n<li>dms</li>\n<li>dock6</li>\n<li>grid</li>\n<li>showbox</li>\n<li>sphere_selector</li>\n<li>sphgen_cpp</li>\n</ul>\n<p>The chimera command is accessible when installing <a href=\"http://www.cgl.ucsf.edu/chimera\" rel=\"nofollow\">CHIMERA</a>. The dock6, grid, showbox and sphere_selector commands are all part of the <a href=\"http://dock.compbio.ucsf.edu/Online_Licensing/index.htm\" rel=\"nofollow\">DOCK 6 package</a>. The dms program can be installed seperately from <a href=\"http://www.cgl.ucsf.edu/chimera/docs/UsersGuide/midas/dms1.html\" rel=\"nofollow\">here</a> while sphgen_cpp can be downloaded from the following <a href=\"http://dock.compbio.ucsf.edu/Contributed_Code/sphgen_cpp.htm\" rel=\"nofollow\">url</a>.</p>\n</li>\n<li><p><strong>DSX</strong></p>\n<ul>\n<li>dsx</li>\n</ul>\n<p>The dsx-like routines can be downloaded from the official <a href=\"http://pc1664.pharmazie.uni-marburg.de/drugscore/dsx_download.php\" rel=\"nofollow\">link</a>. Note that DockBox assumes DSX is run via an executable file called dsx. Therefore, once you selected the appropriate routine to be run (e.g., dsx_linux_64.lnx for linux systems), create a symbolic link via ln. For example, assuming you are located in the same directory as dsx_linux_64.lnx, you can use the following command:</p>\n</li>\n</ul>\n<pre>ln -s dsx_linux_64.lnx dsx\n</pre>\n<ul>\n<li><p><strong>Glide</strong></p>\n<ul>\n<li>glide</li>\n<li>glide_sort</li>\n<li>pdbconvert</li>\n<li>prepwizard</li>\n</ul>\n<p>All the executables can be found within the <a href=\"https://www.schrodinger.com\" rel=\"nofollow\">Schrodinger package</a>. Make sure the SCHRODINGER environment variable (pointing towards Schrodinger\u2019s installation directory) has been correctly exported. Note that a valid license for Glide is required.</p>\n</li>\n<li><p><strong>GOLD</strong></p>\n<ul>\n<li>gold_auto</li>\n</ul>\n<p>gold_auto is the main executable of <a href=\"https://www.ccdc.cam.ac.uk/solutions/csd-discovery/components/gold/\" rel=\"nofollow\">GOLD</a>.Note that a valid license of GOLD is required.</p>\n</li>\n<li><p><strong>MOE</strong></p>\n<ul>\n<li>moebatch</li>\n</ul>\n<p>Can be downloaded over <a href=\"https://www.chemcomp.com/MOE-Molecular_Operating_Environment.htm\" rel=\"nofollow\">there</a>. Make sure the MOE environment variable (pointing towards MOE\u2019s installation directory) has been correctly exported. Note that a valid license of MOE is required.</p>\n</li>\n</ul>\n</div>\n<div id=\"commands\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Commands</a></h3>\n<p>The DockBox package contains two main routines: <em>rundbx</em> and <em>extract_dbx_best_poses</em>. The former is intended to be used solely for docking and rescoring while the latter enables to analyze the results and to select the best pose(s) from a combination of scores or among different consensus docking schemes.</p>\n<div id=\"rundbx\">\n<h4><a href=\"#id6\" rel=\"nofollow\"><em>rundbx</em></a></h4>\n<p>rundbx is used to dock a ligand to a protein structure and possibly minimize and rescore the output poses. When typing \u201crundbx -h\u201d on the command line, the following help message will pop up:</p>\n<pre>usage: rundbx [-h] -l INPUT_FILE_L -r INPUT_FILE_R -f CONFIG_FILE\n              [-prepare_only] [-rescore_only]\n\nrundbx : dock and rescore with multiple programs -------- Requires one file\nfor the ligand (1 struct.) and one file for the receptor (1 struct.)\n\noptional arguments:\n  -h, --help       show this help message and exit\n  -l INPUT_FILE_L  Ligand coordinate file(s): .mol2\n  -r INPUT_FILE_R  Receptor coordinate file(s): .pdb\n  -f CONFIG_FILE   config file containing docking parameters\n  -prepare_only    Only prepare scripts for docking (does not run docking)\n  -rescore_only    Run rescoring only\n</pre>\n<ul>\n<li>Inputs<ul>\n<li>-l INPUT_FILE_L: <strong>.mol2</strong> file containing the coordinates of the ligand (only one structure allowed)</li>\n<li>-r INPUT_FILE_R: <strong>.pdb</strong> file containing the receptor coordinates (only one structure allowed)</li>\n<li>-f CONFIG_FILE: <strong>.ini</strong> configuration file containing the docking parameters (see the section <strong>preparing the rundbx configuration file</strong>)</li>\n</ul>\n</li>\n<li>Options<ul>\n<li>-prepare_only: generate all docking folders and scripts needed to run each docking program separately. Does actually not run docking.</li>\n<li>-rescore_only: option used to perform the rescoring step only. Using this option implies that you have already run <em>rundbx</em> and generated a <strong>poses</strong> folder in the current directory. If a <strong>rescoring</strong> folder already exists as an output of a previous <em>rundbx</em> run, every data generated previously by rescoring with the same scoring functions as the current ones will be overwritten while data generated with scoring functions different from the current ones will be kept.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"extract-dbx-best-poses\">\n<h4><a href=\"#id7\" rel=\"nofollow\"><em>extract_dbx_best_poses</em></a></h4>\n<p><em>extract_dbx_best_poses</em> is the routine used to analyze the results and select the best docking poses from the outputs of the <em>rundbx</em> command. When typing \u201cextract_dbx_best_poses -h\u201d on the command line, the following help message will pop up:</p>\n<pre>usage: extract_dbx_best_poses [-h] [-all-targets] [-all-isomers] [-csv FILE]\n                            [-cutoff RMSD_VALUE] [-d PRGM1 [PRGM2 ...]]\n                            [-dirs DIR1 [DIR2 ...]] [-r DIRECTORY NAME]\n                            [-s FUNC [FUNC ...] | -cd PRGM [PRGM ...] |\n                            -sbcd FUNC [FUNC ...]]\n\nExtract best docking poses after rundbx finished.\n\noptional arguments:\n-h, --help            show this help message and exit\n-all-targets          Select best poses over all the targets. If not\n                      specified, extract best pose separately for each\n                      target. A \"lig/target/isomer\" architecture of the\n                      folders is assumed\n-all-isomers          Select best poses over all the isomers. If not\n                      specified, extract best pose separately for every\n                      isomer. A \"lig/target/isomer\" architecture of the\n                      folders is assumed\n-csv FILE             .csv filename with compounds. Used to add names of\n                      compounds. Default: none\n-cutoff RMSD_VALUE    RMSD cutoff used for consensus docking or score-based\n                      consensus docking. Default: 2.0 A\n-d PRGM1 [PRGM2 ...]  Docking programs (instances) to be considered when\n                      extracting best poses\n-dirs DIR1 [DIR2 ...]\n                      Directories considered for analysis. Should contain a\n                      folder called \"poses\". Default: curr. dir\n-r DIRECTORY NAME     Name of results directory. Default: results\n-s FUNC [FUNC ...]    Scoring functions used to extract the best pose\n                      (combination of scores)\n-cd PRGM [PRGM ...]   Docking programs used for standard consensus docking\n-sbcd FUNC [FUNC ...]\n                      Scoring functions used for score-based consensus\n                      docking\n</pre>\n</div>\n</div>\n<div id=\"using-rundbx\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Using <em>rundbx</em></a></h3>\n<p>The <em>rundbx</em> routine allows the user to dock and rescore a ligand to a protein target using multiple docking\nand scoring functions. Running <em>rundbx</em> is fairly simple as it requires only three input files, namely a PDB file\nincluding the protein structure to dock on (-r flag), a file with Tripos Mol2 format containing a 3D structure of the\nligand (1 structure per file, -l flag) and an INI configuration file (-f flag) which contains all the options\nrelated to docking and/or rescoring (see section <strong>Preparing the INI configuration file</strong>).</p>\n<p>When finished correcly, a <em>rundbx</em> job should have created a folder called <strong>poses</strong> containing all the poses\ngenerated by the different docking programs as specified in the INI configuration file. Each pose is provided\nin a file with .mol2 format named <em>lig-&lt;index&gt;.mol2</em>, where &lt;index&gt; is the index of the pose. Within the <strong>poses</strong>\nfolder, a file called info.dat can also be found. The file contains information relative to each docking program/site\ncombination specified in the INI file, including the number of poses generated and the index of the first\npose generated for that combination.</p>\n<p>Below is an example of an <em>info.dat</em> file obtained when docking was performed with Autodock, Autodock Vina and DOCK 6 on the same binding site:</p>\n<pre>#1,28\nprogram,nposes,firstidx,site\nautodock,10,1,\nvina,10,11,\ndock,7,21,\n</pre>\n<p>showing that a total of 27 poses were generated (28 minus 1). 10 poses were generated with Autodock, namely, poses from index 1 to 10, 10 were generated with Autodock Vina, i.e., poses from index 11 to 20, and 7 were generated with DOCK 6, poses from index 21 to 27. No label for the binding site was specified as docking was performed on the same site.</p>\n<p>Other outputs of the <em>rundbx</em> command are folders created for every docking program/site combination specified in the INI file, which contain the docking poses, the docking scores (obtained with docking) and intermediate files generated by the docking software. For example, if Autodock and Autodock Vina were used to dock on three different binding sites called site1, site2 and site3 (see section <strong>Preparing the INI configuration file</strong>), then a total of six folders named <strong>autodock.site1</strong>, <strong>autodock.site2</strong>, <strong>autodock.site3</strong>, <strong>vina.site1</strong>, <strong>vina.site2</strong> and <strong>vina.site3</strong>, should have been created.</p>\n<p>Finally, if the rescoring option was enabled in the INI file, a folder called <strong>rescoring</strong> should have been created as well, containing file(s) named &lt;program&gt;.score, where &lt;program&gt; is the name of each program used for rescoring.</p>\n<div id=\"preparing-the-ini-configuration-file\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Preparing the INI configuration file</a></h4>\n<p>Besides one MOL2 file containing the ligand structure (-l flag) and one PDB file containing the receptor structure (-r flag), running <em>rundbx</em> requires a configuration file (-f flag) that specifies all the parameters needed for the docking procedure.</p>\n<p>The <em>rundbx</em> configuration file should be a INI file (<a href=\"https://en.wikipedia.org/wiki/INI_file\" rel=\"nofollow\">https://en.wikipedia.org/wiki/INI_file</a>), i.e., the file should be split in sections, each section name appearing on a line by itself, in square brackets (\u201c[\u201d and \u201c]\u201d). Each section contains a certain number of keys which refer to specific options used; all keys after the section declaration are associated with that section. Finally, every key should have a name (option name) and a value (option value), delimited by an equals sign (=).</p>\n<p>Below is an example of configuration file used to dock on two binding sites and rescore with DrugScoreX (dsx), Autodock and Autodock Vina.</p>\n<pre>[DOCKING]\nsite = site1, site2\nprogram = autodock, vina, dock, glide\nrescoring = yes\nminimize = yes\ncleanup = yes\n\n[RESCORING]\nprogram = dsx, autodock, vina\n\n[DSX]\npot_dir = /pmshare/jordane/CSD_potentials/DSX_CSD_Potentials_v0511/csd_pot_0511/\nother_flags = -T0 1.0 -T1 1.0 -T3 1.0 -j\n\n[AUTODOCK]\nga_run = 20\nspacing = 0.4\n\n[VINA]\nnum_modes = 20\n\n[DOCK]\nnposes = 20\n\n[GLIDE]\nposes_per_lig = 20\n\n[SITE1]\ncenter = 75.5, 80.0, 31.0\nboxsize = 40.0, 40.0, 40.0\n\n[SITE2]\ncenter = 75.5, 40.0, 50.0\nboxsize = 40.0, 40.0, 40.0\n</pre>\n</div>\n<div id=\"general-options\">\n<h4><a href=\"#id10\" rel=\"nofollow\">General options</a></h4>\n<ul>\n<li>The <strong>DOCKING</strong> section includes the software that should be used for docking, and if minimization, rescoring and/or cleanup should be performed. The docking software should be specified with coma separation through the key <strong>programs</strong>. The keys relative to the <strong>DOCKING</strong> section are:<ul>\n<li><strong>programs</strong>: specifies the software which are used for docking (autodock, dock6, glide, gold, moe and/or vina). Options relative to each program (or instance) are specfied within the section of the same name. For example, if autodock is in the list of programs, options associated with autodock should be specified in the <strong>AUTODOCK</strong> section. In case the same software needs to be used multiple times, numbering can be appended to the name of the program (e.g., in the first example below, multiple runs of MOE are performed using different scoring methods: moe, moe1, moe2).</li>\n<li><strong>minimization</strong>: performs minimization on the generated poses (yes or no).</li>\n<li><strong>rescoring</strong>: performs rescoring on the generated poses (yes or no). I strongly recommend to enable minimization in case rescoring is done. This will avoid a lot clashes, especially when the software used for rescoring are different from those used for docking. If the rescoring option is enabled, a section RESCORING should be created that contains all the options relative to that step (see below).</li>\n<li><strong>cleanup</strong>: specifies if big intermediate files should be removed (yes or no).</li>\n<li><strong>site</strong>: specifies the labels for the binding sites in case multiple binding sites are considered (site1, site2,\u2026). See the example configuration to dock on multiple binding site, minimize and rescore the poses with multiple software.</li>\n</ul>\n</li>\n</ul>\n<p>Docking and rescoring options relative to each program are detailed in the section <strong>Docking/scoring options relative to each software</strong></p>\n<ul>\n<li>The <strong>SITE</strong> section includes the information about the box to spot the binding site. The keys are the following:<ul>\n<li><strong>center</strong>: x, y, z coordinates of the center of the binding box (in \u00c5).</li>\n<li><strong>boxsize</strong>: size of the box along each dimension x, y, z. The dimensions of the box should be no more than 50.0, 50.0, 50.0 (in \u00c5).</li>\n</ul>\n</li>\n<li>The <strong>RESCORING</strong> section has only one key specifying the programs used to rescore:<ul>\n<li><strong>program</strong>: specifies the software which are used for docking (autodock, dock6, glide, gold, moe and/or vina). Options relative to each program (or instance) are specfied within the section of the same name. For example, if autodock is in the list of programs, options associated with autodock should be specified in the <strong>AUTODOCK</strong> section. In case the same software needs to be used multiple times, numbering can be appended to the name of the program (e.g., in the example below, multiple runs of MOE are performed using different scoring methods: moe, moe1, moe2).</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"docking-scoring-options\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Docking/scoring options</a></h4>\n<p>Each section relative to a docking/scoring program should be named the way it was specified under <strong>program</strong> in the <strong>DOCKING</strong> and/or <strong>RESCORING</strong> section. Below is a list of all the options per software that can be specified in the configuration file.</p>\n<p><strong>Autodock</strong></p>\n<ul>\n<li>ga_run (default: 100): number of autodock runs = targeted number of final poses</li>\n<li>spacing (default: 0.3): grid spacing</li>\n</ul>\n<p><strong>Note 1</strong>: the partial charges of the ligand are obtained from the Gasteiger method using the AutodockTools command <em>prepare_ligand4.py</em></p>\n<p><strong>Note 2</strong>: the number of energy evalutations <em>ga_num_evals</em> is automatically calculated from the number of torsions angles in the ligand structure via the formula:</p>\n<pre>ga_num_evals = min(25000000, 987500 * n_torsion_angles + 125000)\n</pre>\n<p><strong>Note 3</strong>: As is usually the case for Autodock, non polar hydrogens in the ligand structure are removed prior to docking in order to properly use the Autodock force field. Once the docking has been performed, nonpolar hydrogens are reattributed in a way consistent with the input structure. Unless the <em>minimize</em> option in the configuration file is set to <em>yes</em>, no minimization is performed on those hydrogens.</p>\n<p><strong>Note 4</strong> Final poses are extracted from the .dlg file using Open Babel via the following command:</p>\n<pre>babel -ad -ipdbqt dock.dlg -omol2 lig-.mol2 -m\n</pre>\n<p><strong>Autodock Vina</strong></p>\n<ul>\n<li>cpu (default: 1)</li>\n<li>energy_range (default: 3)</li>\n<li>num_modes (default: 9): targeted number of final poses</li>\n</ul>\n<p><strong>Note 1</strong>: the partial charges of the ligand are obtained from the Gasteiger method using the AutodockTools command <em>prepare_ligand4.py</em></p>\n<p><strong>Note 2</strong>: As is usually the case for Autodock Vina, non polar hydrogens in the ligand structure are removed prior to docking in order to properly use the Autodock force field. Once the docking has been performed, nonpolar hydrogens are reattributed in a way consistent with the input structure. Unless the <em>minimize</em> option in the configuration file is set to <em>yes</em>, no minimization is performed on those hydrogens.</p>\n<p><strong>DOCK 6</strong></p>\n<ul>\n<li>attractive_exponent (default: 6)</li>\n<li>extra_margin (default: 2.0)</li>\n<li>grid_spacing (default: 0.3)</li>\n<li>maximum_sphere_radius (default: 4.0)</li>\n<li>max_orientations (default: 10000)</li>\n<li>minimum_sphere_radius (default: 1.4)</li>\n<li>nposes (default: 20): targeted number of final poses</li>\n<li>num_scored_conformers (default 5000)</li>\n<li>probe_radius (default: 1.4)</li>\n<li>repulsive_exponent (default: 12)</li>\n</ul>\n<p><strong>DSX</strong></p>\n<p><strong>Glide</strong></p>\n<ul>\n<li>pose_rmsd (default: 0.5):</li>\n<li>poses_per_lig (default: 10): targeted number of final poses</li>\n<li>precision (default: SP):</li>\n<li>use_prepwizard (default: True):</li>\n</ul>\n<p><strong>GOLD</strong></p>\n<ul>\n<li>nposes (default: 20)</li>\n</ul>\n<p><strong>MOE</strong> (scoring)</p>\n<ul>\n<li>gtest (default: 0.01)</li>\n<li>maxpose (default: 5)</li>\n<li>placement (default: Triangle Matcher)</li>\n<li>placement_maxpose (default: 250)</li>\n<li>placement_nsample (default: 10)</li>\n<li>remaxpose (default: 1)</li>\n<li>rescoring (default: GBVI/WSA dG)</li>\n<li>scoring (default: London dG)</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Examples</a></h4>\n<p><strong>Multi-program docking on a single binding site</strong></p>\n<p>Below is an example of configuration file that can be used as an input of <em>rundbx</em>. The docking procedure is carried out on a single binding site specied as a box with dimensions 30.0 x 30.0 x 30.0 centered at the position (x, y, z) = 8.446, 25.365, 4.394.</p>\n<pre>[DOCKING]\nprogram = autodock, vina, dock, glide, moe, moe1, moe2\nrescoring = no\nminimize = yes\ncleanup = no\n\n[AUTODOCK]\nga_run = 50\nspacing = 0.3\n\n[VINA]\nnum_modes = 20\n\n[DOCK]\nnposes = 200\n\n[GLIDE]\nposes_per_lig = 200\npose_rmsd = 2.0\nprecision = SP\nuse_prepwizard = False\n\n[MOE]\nscoring = London dG\nmaxpose = 100\nremaxpose = 50\n\n[MOE1]\nscoring = GBVI/WSA dG\nmaxpose = 100\nremaxpose = 50\n\n[MOE2]\nscoring = Affinity dG\nmaxpose = 100\nremaxpose = 50\n\n[SITE]\ncenter = 8.446, 25.365, 4.394\nboxsize = 30.0, 30.0, 30.0\n</pre>\n<p><strong>Multi-program docking and rescoring on multiple binding sites</strong></p>\n<p>Below is another example of configuration file for <em>rundbx</em> used to dock on two binding sites and rescore with DrugScoreX (dsx), Autodock and Autodock Vina.</p>\n<pre>[DOCKING]\nsite = site1, site2\nprogram = autodock, vina, dock, glide\nrescoring = yes\nminimize = yes\ncleanup = yes\n\n[RESCORING]\nprogram = dsx, autodock, vina\n\n[DSX]\npot_dir = /pmshare/jordane/CSD_potentials/DSX_CSD_Potentials_v0511/csd_pot_0511/\nother_flags = -T0 1.0 -T1 1.0 -T3 1.0 -j\n\n[AUTODOCK]\nga_run = 20\nspacing = 0.4\n\n[VINA]\nnum_modes = 20\n\n[DOCK]\nnposes = 20\n\n[GLIDE]\nposes_per_lig = 20\n\n[SITE1]\ncenter = 75.5, 80.0, 31.0\nboxsize = 40.0, 40.0, 40.0\n\n[SITE2]\ncenter = 75.5, 40.0, 50.0\nboxsize = 40.0, 40.0, 40.0\n</pre>\n<p>Note that the DOCKING section includes the label of the binding sites through the keyword <em>site</em>, here, site1 and site2. Each label refers to the section of the same name SITE1 and SITE2, respectively.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5849923, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "ff06329b8be3c1db5cda6e1449880342", "sha256": "09430283349540b68b40bd8f222e6ce784971e5d25a324eb0a36520cfee6139c"}, "downloads": -1, "filename": "dockbox-1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "ff06329b8be3c1db5cda6e1449880342", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 45867, "upload_time": "2019-06-12T18:04:43", "upload_time_iso_8601": "2019-06-12T18:04:43.488559Z", "url": "https://files.pythonhosted.org/packages/b2/f4/a89572d15f532d392b0c82528f0824787afe72c2e8e6e6a1e3721e2ba58e/dockbox-1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "370107e96dc4e1c47aa31d64128fd119", "sha256": "1e9e66dd0c05a89794143e4733499264263da0d02c7a7ddc5bed42e071564089"}, "downloads": -1, "filename": "dockbox-1.1.tar.gz", "has_sig": false, "md5_digest": "370107e96dc4e1c47aa31d64128fd119", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36918, "upload_time": "2019-06-12T18:04:45", "upload_time_iso_8601": "2019-06-12T18:04:45.671192Z", "url": "https://files.pythonhosted.org/packages/ce/0c/c29dbf561b0c55f89d6c5ee7246a06427fbd4cac429e90a805955f6be1e7/dockbox-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "bf5a9e8fff3f268a9fdf119f880d399d", "sha256": "58e536393e62e9e7ef90aa98b038a31c44db09f1c8dfe56d4b9c80dc7cb3c014"}, "downloads": -1, "filename": "dockbox-1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "bf5a9e8fff3f268a9fdf119f880d399d", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 45881, "upload_time": "2019-07-01T11:35:46", "upload_time_iso_8601": "2019-07-01T11:35:46.659568Z", "url": "https://files.pythonhosted.org/packages/61/e5/3de0af29081a0737a620892fc9cad5b5f5de9617ac1489b89fb56586f38f/dockbox-1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cf269d6fc8f4d4f271797f791b89ee4", "sha256": "08de07cfa9d20c1fb5a6ff56204f4e398b89ec8a0437904b9c28f46dde70ef87"}, "downloads": -1, "filename": "dockbox-1.2.tar.gz", "has_sig": false, "md5_digest": "4cf269d6fc8f4d4f271797f791b89ee4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42294, "upload_time": "2019-07-01T11:35:48", "upload_time_iso_8601": "2019-07-01T11:35:48.632966Z", "url": "https://files.pythonhosted.org/packages/e1/a1/32a2238269c7378169ad28ab1aed2c2cf360af7c3c282ea28449aa9368fa/dockbox-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "939ec92715cf43dce839ad24a025c1ef", "sha256": "2122b4f4be619f110f6afc005e5685efbe1497ef7ff23d058fab7b5fd72ee18d"}, "downloads": -1, "filename": "dockbox-1.3.tar.gz", "has_sig": false, "md5_digest": "939ec92715cf43dce839ad24a025c1ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108794, "upload_time": "2019-09-18T12:49:19", "upload_time_iso_8601": "2019-09-18T12:49:19.739457Z", "url": "https://files.pythonhosted.org/packages/c6/91/e4570854e9b997388a95b61f754e6487089d9d0ac3aec7d7480a052de68c/dockbox-1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "939ec92715cf43dce839ad24a025c1ef", "sha256": "2122b4f4be619f110f6afc005e5685efbe1497ef7ff23d058fab7b5fd72ee18d"}, "downloads": -1, "filename": "dockbox-1.3.tar.gz", "has_sig": false, "md5_digest": "939ec92715cf43dce839ad24a025c1ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108794, "upload_time": "2019-09-18T12:49:19", "upload_time_iso_8601": "2019-09-18T12:49:19.739457Z", "url": "https://files.pythonhosted.org/packages/c6/91/e4570854e9b997388a95b61f754e6487089d9d0ac3aec7d7480a052de68c/dockbox-1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:56 2020"}