{"info": {"author": "Kevin Stone", "author_email": "kevinastone@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "===============================\nGenerator\n===============================\n\n.. image:: https://img.shields.io/travis/kevinastone/generator.svg\n        :target: https://travis-ci.org/kevinastone/generator\n\n.. image:: https://img.shields.io/pypi/v/generator.svg\n        :target: https://pypi.python.org/pypi/generator\n\n\nGenerator is a helper for generating test methods for nose while still using unittest.\n\n* Free software: ISC license\n* Documentation: https://generator.readthedocs.org.\n\n\nInstallation\n------------\n\n::\n\n    pip install test-generator\n\n\nIntroduction\n------------\n\nHave you ever written tests that loop through a list of inputs to validate the functionality?\n\nSomething like?\n\n.. code-block:: python\n\n    from mything import thingy\n\n    class MyTestCase(unittest.TestCase):\n        def test_thingy(self):\n            for input in [\n                'a',\n                'b',\n                'cccc',\n                'ddd'\n                'eeeeee',\n                'f',\n                'g'\n            ]:\n                self.assertTrue(thingy(input))\n\n\nBut running in a loop limits all the functionality in ``TestCase`` like per-\ntest setUp or tearDown.  It also fails on the first input and you can't run a\nsingle test input, you have to run them all?  (Doesn't work well when each\ntest is more complicated than this toy case).\n\nInstead, what if you wrote your test like:\n\n.. code-block:: python\n\n    from generator import generator, generate\n    from mything import thingy\n\n    @generator\n    class MyTestCase(unittest.TestCase):\n\n        @generate('a', 'b', 'cccc', 'ddd', 'eeeeee', 'f', 'g')\n        def test_thingy(self, input):\n            self.assertTrue(thingy(input))\n\n\nAnd when you run your tests, you see:\n\n.. code-block:: shell\n\n    ----------------------------------------------------------------------\n    Ran 7 tests in 0.001s\n\n    OK\n\nGenerator gives you simple decorators to mulitply your test methods based on\nan argument list.  It's great for checking a range of inputs, a list of error\nconditions or expected status codes.\n\n\nExamples\n--------\n\nAPI Client Error Handling\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLet's make sure our API client properly handles error conditions and raises a\ngeneric APIError under the conditions.  We'll use mock to patch out the actual\nAPI call to return our response.\n\n.. code-block:: python\n\n    import mock\n    from generator import generator, generate\n    from example import client, APIError\n\n    @generator\n    class TestAPIErrorHandling(unittest.TestCase):\n\n        @generate(400, 401, 403, 404, 500, 502, 503)\n        def test_error(self, status_code):\n            with mock.patch(client, '_request') as _request_stub:\n                _request_stub.return_value.status_code = status_code\n\n                self.assertRaises(APIError):\n                    client.get('/path/')\n\n\nTest Fixtures\n^^^^^^^^^^^^^\n\nLet's make sure our API client properly handles error conditions and raises a\ngeneric APIError under the conditions.  We'll use mock to patch out the actual\nAPI call to return our response.\n\n.. code-block:: python\n\n    from generator import generator, generate\n    from example.sanitize import strip_tags\n\n    @generator\n    class TestStripTags(unittest.TestCase):\n\n        @generate(\n            ('<h1>hi</h1>', 'hi'),\n            ('<script></script>something', 'something'),\n            ('<div class=\"important\"><p>some text</p></div>', 'some text'),\n        )\n        def test_strip_tags(self, input, expected):\n            self.assertEqual(strip_tags(input), expected)\n\n\n\n\nHistory\n-------\n\n0.1.1 (2015-10-15)\n---------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kevinastone/generator", "keywords": "generator", "license": "ISCL", "maintainer": "", "maintainer_email": "", "name": "test-generator", "package_url": "https://pypi.org/project/test-generator/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/test-generator/", "project_urls": {"Homepage": "https://github.com/kevinastone/generator"}, "release_url": "https://pypi.org/project/test-generator/0.1.2/", "requires_dist": ["six"], "requires_python": "", "summary": "Generator is a helper for generating test methods for nose while still using unittest", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/kevinastone/generator\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/kevinastone/generator.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c12951c8e29e56048abda8fa9f6b9a8cba1b4b08/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6b6576696e6173746f6e652f67656e657261746f722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/generator\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/generator.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4be95dc284d900d11221afe157e833e04b8fb77a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f67656e657261746f722e737667\"></a>\n<p>Generator is a helper for generating test methods for nose while still using unittest.</p>\n<ul>\n<li>Free software: ISC license</li>\n<li>Documentation: <a href=\"https://generator.readthedocs.org\" rel=\"nofollow\">https://generator.readthedocs.org</a>.</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install test-generator\n</pre>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Have you ever written tests that loop through a list of inputs to validate the functionality?</p>\n<p>Something like?</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mything</span> <span class=\"kn\">import</span> <span class=\"n\">thingy</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_thingy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"nb\">input</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'a'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'b'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'cccc'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'ddd'</span>\n            <span class=\"s1\">'eeeeee'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'f'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'g'</span>\n        <span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">thingy</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">))</span>\n</pre>\n<p>But running in a loop limits all the functionality in <tt>TestCase</tt> like per-\ntest setUp or tearDown.  It also fails on the first input and you can\u2019t run a\nsingle test input, you have to run them all?  (Doesn\u2019t work well when each\ntest is more complicated than this toy case).</p>\n<p>Instead, what if you wrote your test like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">generator</span> <span class=\"kn\">import</span> <span class=\"n\">generator</span><span class=\"p\">,</span> <span class=\"n\">generate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mything</span> <span class=\"kn\">import</span> <span class=\"n\">thingy</span>\n\n<span class=\"nd\">@generator</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@generate</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'cccc'</span><span class=\"p\">,</span> <span class=\"s1\">'ddd'</span><span class=\"p\">,</span> <span class=\"s1\">'eeeeee'</span><span class=\"p\">,</span> <span class=\"s1\">'f'</span><span class=\"p\">,</span> <span class=\"s1\">'g'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_thingy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">thingy</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">))</span>\n</pre>\n<p>And when you run your tests, you see:</p>\n<pre>----------------------------------------------------------------------\nRan <span class=\"m\">7</span> tests in <span class=\"m\">0</span>.001s\n\nOK\n</pre>\n<p>Generator gives you simple decorators to mulitply your test methods based on\nan argument list.  It\u2019s great for checking a range of inputs, a list of error\nconditions or expected status codes.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"api-client-error-handling\">\n<h3>API Client Error Handling</h3>\n<p>Let\u2019s make sure our API client properly handles error conditions and raises a\ngeneric APIError under the conditions.  We\u2019ll use mock to patch out the actual\nAPI call to return our response.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mock</span>\n<span class=\"kn\">from</span> <span class=\"nn\">generator</span> <span class=\"kn\">import</span> <span class=\"n\">generator</span><span class=\"p\">,</span> <span class=\"n\">generate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">example</span> <span class=\"kn\">import</span> <span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">APIError</span>\n\n<span class=\"nd\">@generator</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestAPIErrorHandling</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@generate</span><span class=\"p\">(</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">401</span><span class=\"p\">,</span> <span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"mi\">502</span><span class=\"p\">,</span> <span class=\"mi\">503</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s1\">'_request'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">_request_stub</span><span class=\"p\">:</span>\n            <span class=\"n\">_request_stub</span><span class=\"o\">.</span><span class=\"n\">return_value</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"n\">status_code</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertRaises</span><span class=\"p\">(</span><span class=\"n\">APIError</span><span class=\"p\">):</span>\n                <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/path/'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"test-fixtures\">\n<h3>Test Fixtures</h3>\n<p>Let\u2019s make sure our API client properly handles error conditions and raises a\ngeneric APIError under the conditions.  We\u2019ll use mock to patch out the actual\nAPI call to return our response.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">generator</span> <span class=\"kn\">import</span> <span class=\"n\">generator</span><span class=\"p\">,</span> <span class=\"n\">generate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">example.sanitize</span> <span class=\"kn\">import</span> <span class=\"n\">strip_tags</span>\n\n<span class=\"nd\">@generator</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestStripTags</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@generate</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"s1\">'&lt;h1&gt;hi&lt;/h1&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'hi'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'&lt;script&gt;&lt;/script&gt;something'</span><span class=\"p\">,</span> <span class=\"s1\">'something'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'&lt;div class=\"important\"&gt;&lt;p&gt;some text&lt;/p&gt;&lt;/div&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'some text'</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_strip_tags</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">expected</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">strip_tags</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">),</span> <span class=\"n\">expected</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n</div>\n<div id=\"id1\">\n<h2>0.1.1 (2015-10-15)</h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2265884, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "ed54c94d785a0e28c1c0af832bef180c", "sha256": "01e6aa3e01b5a0cb2ef05c80cdb259abae820d82f07ffcd0ded9bce03f3c38d4"}, "downloads": -1, "filename": "test_generator-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed54c94d785a0e28c1c0af832bef180c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5517, "upload_time": "2015-10-15T08:36:02", "upload_time_iso_8601": "2015-10-15T08:36:02.612172Z", "url": "https://files.pythonhosted.org/packages/4a/52/e5eec4d926eb466844eaeeaac84af5372e946dd520fb2b6adf3388e620b0/test_generator-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79a838ebea6088a34bc6ba6d8b896f93", "sha256": "da9cfc2a26bc5bd1f43ef20050fd531790cc5283adcc49e34e0cf33345d6583d"}, "downloads": -1, "filename": "test-generator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "79a838ebea6088a34bc6ba6d8b896f93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13280, "upload_time": "2015-10-15T08:36:12", "upload_time_iso_8601": "2015-10-15T08:36:12.449950Z", "url": "https://files.pythonhosted.org/packages/0d/42/381803d0066154f7971a4f9175710d2e123dd403e64291799e9f2978da6d/test-generator-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b2075e2d02536088d57e806ecd42d7cc", "sha256": "7de659848ca3fafd6b64b802d06872d7c5eaa3835818083c4eb9c142e90fd904"}, "downloads": -1, "filename": "test_generator-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2075e2d02536088d57e806ecd42d7cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6045, "upload_time": "2016-08-06T18:25:14", "upload_time_iso_8601": "2016-08-06T18:25:14.286287Z", "url": "https://files.pythonhosted.org/packages/e3/1c/6cf39cf103e6a6f5b236a882c6da38688af58da1e5cdb25afa18ea12683a/test_generator-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c69e73ba5b4b3ed62f7bcda071c64f1", "sha256": "ad5925c814bfe79497b43df096e3bb52c166d1577f7aff160137301676232f4a"}, "downloads": -1, "filename": "test-generator-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6c69e73ba5b4b3ed62f7bcda071c64f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13635, "upload_time": "2016-08-06T18:25:16", "upload_time_iso_8601": "2016-08-06T18:25:16.479797Z", "url": "https://files.pythonhosted.org/packages/1e/b3/90a71f2f4f9de5467c5518f0d75876eb7501c07fa1e25353ceaa56da3973/test-generator-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2075e2d02536088d57e806ecd42d7cc", "sha256": "7de659848ca3fafd6b64b802d06872d7c5eaa3835818083c4eb9c142e90fd904"}, "downloads": -1, "filename": "test_generator-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2075e2d02536088d57e806ecd42d7cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6045, "upload_time": "2016-08-06T18:25:14", "upload_time_iso_8601": "2016-08-06T18:25:14.286287Z", "url": "https://files.pythonhosted.org/packages/e3/1c/6cf39cf103e6a6f5b236a882c6da38688af58da1e5cdb25afa18ea12683a/test_generator-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c69e73ba5b4b3ed62f7bcda071c64f1", "sha256": "ad5925c814bfe79497b43df096e3bb52c166d1577f7aff160137301676232f4a"}, "downloads": -1, "filename": "test-generator-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6c69e73ba5b4b3ed62f7bcda071c64f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13635, "upload_time": "2016-08-06T18:25:16", "upload_time_iso_8601": "2016-08-06T18:25:16.479797Z", "url": "https://files.pythonhosted.org/packages/1e/b3/90a71f2f4f9de5467c5518f0d75876eb7501c07fa1e25353ceaa56da3973/test-generator-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:34 2020"}