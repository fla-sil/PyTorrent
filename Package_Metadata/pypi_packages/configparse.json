{"info": {"author": "Joshua Nelson", "author_email": "jyn514@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "# configparse\n\n[![Build Status](https://travis-ci.org/jyn514/py-autoconfig.svg?branch=master)](https://travis-ci.org/jyn514/py-autoconfig)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## Summary\n\nconfigparse is a drop-in-place replacement for python's `argparse` module\nwhich reads configuration files in addition to command line arguments.\n\n## Features\n\nIf the configuration directory exists, all of files in `<config_directory>/<prog>/` are read.\nAll files matching `~/.<prog>*` are read.\n\nFiles are treated according to their extension: `config.json` will be parsed as JSON,\n`myconf.yml` will be parsed as YAML.\n\nIf a file does not have an extension, it will be parsed according to the default\nfile format. This is preset to JSON, but can be changed by applications.\n\n\n### Configuration Directory\n\nOn Windows, the configuration directory looked up in `%AppData%`.\nOn any other OS, it is looked up from `$XDG_CONFIG_HOME`.\nIf the variable is not present (on any OS), files are read from `~/.config`.\n\n### Supported Formats\n\nThe following file formats are currently supported:\n\n- JSON (.json)\n- YAML (.yml)\n- INI  (.ini)\n- TOML (.toml)\n\nFeel free to submit a pull request adding more formats.\nSee CONTRIBUTING.md for an overview,\nif you already have a parser it should be very simple.\n\n## Using configparse\n\n### As a library\n\nIf you are an application developer who wants to use the library,\nthere is one entry point: the `ConfigParser` class,\nwhich is also aliased to `Parser` for convenience.\nYou can treat a `ConfigParser` instance exactly as you would an `ArgumentParser`\ninstance (as long as you pass `prog` to the constructor).\n\nNote that this means that `parse_args` will parse `sys.argv`\nin addition to parsing configuration files. If you don't want this behavior,\npass an empty list to `parse_args` like this: `args = parser.parse_args([])`.\n\nIf you want to change the default file format (e.g. for files named `~/.myprog`\nwithout an extension), use  `parser.set_default_ext(ext)`, where 'ext' is the\nfile extension for your format.\n\n#### Differences from `argparse`\n\nThe only API differences are as follows:\n\n- the name of the parser is `ConfigParser`, not `ArgumentParser`\n- the `prog` keyword is required for initializing `ConfigParser` (so that it knows where to look for configuration files)\n\nThat's it. Everything else is done automatically.\n\n#### Example\n\n```python\nfrom configparse import Parser\n\nparser = Parser(prog='myprogram')\nparser.add_argument('--short', '-s', help='use short format')\nargs = parser.parse_args()\n```\n\n### As an end user\n\nYou can put a configuration file in any of the following locations:\n\n- `~/.config/<prog>/`\n- `~/.<prog>*`\n\nSee `Features` for a full overview.\n\n#### Example\n\nAssume that the program `basic` takes the arguments '--short' and '--long'.\n\n```sh\n$ cat ~/.config/basic/config.yml\nshort: true\n$ basic\nYou chose the 'short' option.\n$ rm ~/.config/basic/config.yml\n$ echo 'long: true' > ~/.basic.yml\n$ basic\nYou chose the 'long' option.\n```\n\n## Limitations\n\n- Only long options will be applied. If a short option is present in a config file,\nit will be treated as if it were a long option, i.e. not looked up.\nFor example, assuming some backend returns the dictionary `{'s': 'some value'}`:\n\n```\nfrom configparse import Parser\n\np = Parser(prog='myprog')\np.add_argument('-s', '--short')\nargs = p.parse_args()\nassert args.short is None\nassert args.s == 'some value'\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jyn514/configparse/", "keywords": "configuration,argparse", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "configparse", "package_url": "https://pypi.org/project/configparse/", "platform": "", "project_url": "https://pypi.org/project/configparse/", "project_urls": {"Homepage": "https://github.com/jyn514/configparse/"}, "release_url": "https://pypi.org/project/configparse/0.1.5/", "requires_dist": ["toml ; extra == 'toml'", "pyyaml ; extra == 'yaml'"], "requires_python": "", "summary": "Drop-in substitute for argparse that reads config files", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>configparse</h1>\n<p><a href=\"https://travis-ci.org/jyn514/py-autoconfig\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61745757eafde5b84f02e22d064ae7113eda231e/68747470733a2f2f7472617669732d63692e6f72672f6a796e3531342f70792d6175746f636f6e6669672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<h2>Summary</h2>\n<p>configparse is a drop-in-place replacement for python's <code>argparse</code> module\nwhich reads configuration files in addition to command line arguments.</p>\n<h2>Features</h2>\n<p>If the configuration directory exists, all of files in <code>&lt;config_directory&gt;/&lt;prog&gt;/</code> are read.\nAll files matching <code>~/.&lt;prog&gt;*</code> are read.</p>\n<p>Files are treated according to their extension: <code>config.json</code> will be parsed as JSON,\n<code>myconf.yml</code> will be parsed as YAML.</p>\n<p>If a file does not have an extension, it will be parsed according to the default\nfile format. This is preset to JSON, but can be changed by applications.</p>\n<h3>Configuration Directory</h3>\n<p>On Windows, the configuration directory looked up in <code>%AppData%</code>.\nOn any other OS, it is looked up from <code>$XDG_CONFIG_HOME</code>.\nIf the variable is not present (on any OS), files are read from <code>~/.config</code>.</p>\n<h3>Supported Formats</h3>\n<p>The following file formats are currently supported:</p>\n<ul>\n<li>JSON (.json)</li>\n<li>YAML (.yml)</li>\n<li>INI  (.ini)</li>\n<li>TOML (.toml)</li>\n</ul>\n<p>Feel free to submit a pull request adding more formats.\nSee CONTRIBUTING.md for an overview,\nif you already have a parser it should be very simple.</p>\n<h2>Using configparse</h2>\n<h3>As a library</h3>\n<p>If you are an application developer who wants to use the library,\nthere is one entry point: the <code>ConfigParser</code> class,\nwhich is also aliased to <code>Parser</code> for convenience.\nYou can treat a <code>ConfigParser</code> instance exactly as you would an <code>ArgumentParser</code>\ninstance (as long as you pass <code>prog</code> to the constructor).</p>\n<p>Note that this means that <code>parse_args</code> will parse <code>sys.argv</code>\nin addition to parsing configuration files. If you don't want this behavior,\npass an empty list to <code>parse_args</code> like this: <code>args = parser.parse_args([])</code>.</p>\n<p>If you want to change the default file format (e.g. for files named <code>~/.myprog</code>\nwithout an extension), use  <code>parser.set_default_ext(ext)</code>, where 'ext' is the\nfile extension for your format.</p>\n<h4>Differences from <code>argparse</code></h4>\n<p>The only API differences are as follows:</p>\n<ul>\n<li>the name of the parser is <code>ConfigParser</code>, not <code>ArgumentParser</code></li>\n<li>the <code>prog</code> keyword is required for initializing <code>ConfigParser</code> (so that it knows where to look for configuration files)</li>\n</ul>\n<p>That's it. Everything else is done automatically.</p>\n<h4>Example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configparse</span> <span class=\"kn\">import</span> <span class=\"n\">Parser</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">Parser</span><span class=\"p\">(</span><span class=\"n\">prog</span><span class=\"o\">=</span><span class=\"s1\">'myprogram'</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--short'</span><span class=\"p\">,</span> <span class=\"s1\">'-s'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'use short format'</span><span class=\"p\">)</span>\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n</pre>\n<h3>As an end user</h3>\n<p>You can put a configuration file in any of the following locations:</p>\n<ul>\n<li><code>~/.config/&lt;prog&gt;/</code></li>\n<li><code>~/.&lt;prog&gt;*</code></li>\n</ul>\n<p>See <code>Features</code> for a full overview.</p>\n<h4>Example</h4>\n<p>Assume that the program <code>basic</code> takes the arguments '--short' and '--long'.</p>\n<pre>$ cat ~/.config/basic/config.yml\nshort: <span class=\"nb\">true</span>\n$ basic\nYou chose the <span class=\"s1\">'short'</span> option.\n$ rm ~/.config/basic/config.yml\n$ <span class=\"nb\">echo</span> <span class=\"s1\">'long: true'</span> &gt; ~/.basic.yml\n$ basic\nYou chose the <span class=\"s1\">'long'</span> option.\n</pre>\n<h2>Limitations</h2>\n<ul>\n<li>Only long options will be applied. If a short option is present in a config file,\nit will be treated as if it were a long option, i.e. not looked up.\nFor example, assuming some backend returns the dictionary <code>{'s': 'some value'}</code>:</li>\n</ul>\n<pre><code>from configparse import Parser\n\np = Parser(prog='myprog')\np.add_argument('-s', '--short')\nargs = p.parse_args()\nassert args.short is None\nassert args.s == 'some value'\n</code></pre>\n\n          </div>"}, "last_serial": 6221807, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "508547946c7a504cad193be5830454c0", "sha256": "e94945b1d5cbfca9513a7d959c4585cc9a67d5ad5ade3be85890432183d8d6ed"}, "downloads": -1, "filename": "configparse-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "508547946c7a504cad193be5830454c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7555, "upload_time": "2019-11-30T14:04:58", "upload_time_iso_8601": "2019-11-30T14:04:58.255342Z", "url": "https://files.pythonhosted.org/packages/b8/50/eeeade4fab1d5fd6921ca1e2933c3db94b9f4c4c1fdbd0300ba154a41ec2/configparse-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d476e42a5746f101d8c4ed1d600676f5", "sha256": "c2b45af4cfcae2785ab6706185768e3ce443acce989436f08a9ba9331a98aafd"}, "downloads": -1, "filename": "configparse-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d476e42a5746f101d8c4ed1d600676f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5773, "upload_time": "2019-11-30T14:05:00", "upload_time_iso_8601": "2019-11-30T14:05:00.663093Z", "url": "https://files.pythonhosted.org/packages/8a/87/3f46e7e285eff1206b9f10509bd0ffb946dbd10eae84777ee75621ba2a70/configparse-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6d58f7b4fc9751ea9f494f31314b3f74", "sha256": "93774ad4e85a5d634e57f6dca59010f74902cca1ac82e2c5d5771cbcdc16dbcd"}, "downloads": -1, "filename": "configparse-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6d58f7b4fc9751ea9f494f31314b3f74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7563, "upload_time": "2019-11-30T14:12:55", "upload_time_iso_8601": "2019-11-30T14:12:55.329374Z", "url": "https://files.pythonhosted.org/packages/1c/53/e7ace8d3b335b26bf98def70973c48d571fdb3386d421b8f7ea0047aecad/configparse-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d27f30d47e3b1cfba207e101814e0a0", "sha256": "ff13388abd82d0039f3f58b17b16de6355e94f5f12f9f6697f4d0c3848a8ab06"}, "downloads": -1, "filename": "configparse-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5d27f30d47e3b1cfba207e101814e0a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5776, "upload_time": "2019-11-30T14:12:56", "upload_time_iso_8601": "2019-11-30T14:12:56.891476Z", "url": "https://files.pythonhosted.org/packages/e1/c5/aa435f441cd2ff372a0bfb538be355121792432ad88531007311256af048/configparse-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d575640270765077fe7701b1c500d113", "sha256": "406be380f534f66a31b43d30a59a11483c9d93dc0e4bf23957a0c8e2427bc648"}, "downloads": -1, "filename": "configparse-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d575640270765077fe7701b1c500d113", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9149, "upload_time": "2019-11-30T15:25:06", "upload_time_iso_8601": "2019-11-30T15:25:06.570655Z", "url": "https://files.pythonhosted.org/packages/45/35/8da10636dbfb0042fb5355b8599e631121320be129967736ceccad8dd98c/configparse-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fdd0c3cd1ed70ac5f150a26426de66e", "sha256": "e28a3064578efb9953661abf0da140a2a1b9ba0dc4bf1db605706ed5f6e94fc7"}, "downloads": -1, "filename": "configparse-0.1.3.tar.gz", "has_sig": false, "md5_digest": "7fdd0c3cd1ed70ac5f150a26426de66e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6345, "upload_time": "2019-11-30T15:25:08", "upload_time_iso_8601": "2019-11-30T15:25:08.152996Z", "url": "https://files.pythonhosted.org/packages/38/e3/f5e5e37abb711125c64fcd8a05dbab84e487a6b677d39c08243ccf65e838/configparse-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "3d44d0a734ba48bd37cbf729c85cb7e9", "sha256": "de57849eea1abb82ddc6e495ff4739ced29fdcffffc9b239dd7d5933bfe07ed7"}, "downloads": -1, "filename": "configparse-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3d44d0a734ba48bd37cbf729c85cb7e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9145, "upload_time": "2019-11-30T15:32:13", "upload_time_iso_8601": "2019-11-30T15:32:13.728263Z", "url": "https://files.pythonhosted.org/packages/97/0e/f3f0a024ddd4efe23fe58c2813b18d633b8d3040383a2c83b3ace4c84915/configparse-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d11ecacc51fd31a6bcaf6c6bf8f1c50d", "sha256": "61d1e338e0d221e84ca19adc429fc75ec8368f5e95f04c19289fccf3b36c914d"}, "downloads": -1, "filename": "configparse-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d11ecacc51fd31a6bcaf6c6bf8f1c50d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6339, "upload_time": "2019-11-30T15:32:15", "upload_time_iso_8601": "2019-11-30T15:32:15.239543Z", "url": "https://files.pythonhosted.org/packages/3d/b1/ef55c9768928dfe9dc634c5bb416fda02772837bf6ec0279863c09e42a35/configparse-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "5aeddbe7ded8baf86de10b5fcbb2100f", "sha256": "ddeb41045dc2fa1fe34f4c52ade06dbb69e0c8822256f43522b6fe2e29bec57a"}, "downloads": -1, "filename": "configparse-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "5aeddbe7ded8baf86de10b5fcbb2100f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7241, "upload_time": "2019-11-30T15:38:25", "upload_time_iso_8601": "2019-11-30T15:38:25.611269Z", "url": "https://files.pythonhosted.org/packages/5b/ee/0bf6d28248c0cf5b5820405693952f611ce6696b65d289cd1bc1781969f7/configparse-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce9f2f52ce602134aa3393036e54e26e", "sha256": "60c13a99aaa76207425f00ad997d7849894596ab8c21c6b7e7c3cbf75135932c"}, "downloads": -1, "filename": "configparse-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ce9f2f52ce602134aa3393036e54e26e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6343, "upload_time": "2019-11-30T15:38:27", "upload_time_iso_8601": "2019-11-30T15:38:27.200956Z", "url": "https://files.pythonhosted.org/packages/ec/1b/78550818f8cae3a9bae3e1e4632e849c6e1edb9917746b05dcc2827c0baa/configparse-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5aeddbe7ded8baf86de10b5fcbb2100f", "sha256": "ddeb41045dc2fa1fe34f4c52ade06dbb69e0c8822256f43522b6fe2e29bec57a"}, "downloads": -1, "filename": "configparse-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "5aeddbe7ded8baf86de10b5fcbb2100f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7241, "upload_time": "2019-11-30T15:38:25", "upload_time_iso_8601": "2019-11-30T15:38:25.611269Z", "url": "https://files.pythonhosted.org/packages/5b/ee/0bf6d28248c0cf5b5820405693952f611ce6696b65d289cd1bc1781969f7/configparse-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce9f2f52ce602134aa3393036e54e26e", "sha256": "60c13a99aaa76207425f00ad997d7849894596ab8c21c6b7e7c3cbf75135932c"}, "downloads": -1, "filename": "configparse-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ce9f2f52ce602134aa3393036e54e26e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6343, "upload_time": "2019-11-30T15:38:27", "upload_time_iso_8601": "2019-11-30T15:38:27.200956Z", "url": "https://files.pythonhosted.org/packages/ec/1b/78550818f8cae3a9bae3e1e4632e849c6e1edb9917746b05dcc2827c0baa/configparse-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:54 2020"}