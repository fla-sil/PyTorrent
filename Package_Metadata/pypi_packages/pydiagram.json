{"info": {"author": "Yi-Xin Liu", "author_email": "liuyxpp@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "PyDiagram\n=========\n\nPyDiagram is a python package for generating a phase diagram from results output by polymer field-theoretic simulations. PyDiagram also provides functions for analysis of simulation results.\n\nQuickstart\n----------\n\n1. Install\n^^^^^^^^^^\n\n::\n\n    $ pip install pydiagram\n\n**Required Packages**\n\n* ``numpy``\n* ``scipy``\n* ``matplotlib``\n* ``mpltex``\n* ``attrdict``\n* ``PyYAML``\n\n*Important note*: PyYAML cannot be installed by pip or easy_install. Please install it by downloading its source code and use ``python setup.py install`` to install it, see details at `PyYAML Documentation <http://pyyaml.org/wiki/PyYAMLDocumentation#Installation>`_.\n\n2. Use PyDiagram as An Executable\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo use the executable, ``pydiagram``, you need to provide a project configuration file. The configuration file is in YAML format. Three sample configuration files, ``config_polyorder.yml``, ``config_polyfts.yml``, and ``config_pydiagram.yml``, are shipped with PyDiagram package. You can copy one of them to your project root directory and make any necessary modifications to it.\n\nTypical usage.\n\n.. code:: bash\n\n    pydiagram [-v] [-h] [-p] [-q] [-s] [-m]\n\n* ``pydiagram -p``\n\nThis command processes the simulation data in the current directory. It will save ``diagram``, ``info_map``, and ``boundary`` objects as Python pickle files. The parser can be specified in the project configuration file using the ``solver`` option.\n\n* ``pydiagram -q``\n\nAccording to the plot mode specified in the project configuration file, this command will plot requested figures and save them as files.\n\n* ``pydiagram -s``\n\nThis command will run pydiagram as a server.\n\n* ``pydiagram -m``\n\nThis command will run pydiagram in manual mode, which will submit additional simulation jobs specified in the ``predictor.manual`` in the project configuration file.\n\n3. Use PyDiagram as A Library\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can customize your own processing, plotting and predicting scripts by utilizing PyDiagram functions. As described in the last section, your script will also depend on a project configuration file.\n\nTypical usage.\n\n.. code:: python\n\n    import pydiagram\n    import matplotlib.pyplot as plt\n\n    # Generate diagram by specifying the folder where data locate.\n    # This will require the output data files from supported solvers.\n    # Here assume the project configuration file in the current directory.\n    diagram = pydiagram.get_diagram()\n    # Plot the raw diagram\n    fig, ax = plt.subplots(1)\n    pydiagram.plot_diagram(ax, diagram)\n\n    # Or you can generate diagram from .dgm file\n    # First load .dgm file to get info_map\n    xaxis, yaxis, info_map = pydiagram.load_dgm('phase_data.dgm')\n    diagram = pydiagram.get_diagram_from_info_map(info_map)\n\n    # You can find phase boundary from digaram\n    boundary = pydiagram.get_boundary(diagram, info_map)\n    # And plot it as scatter points\n    pydiagram.plot_boundary_point(ax, boundary)\n    # Or plot it as line\n    pydiagram.plot_boundary_line(ax, boundary)\n\n    # PyDiagram also provides a plot function for plotting diagram points\n    # and phase boundary together.\n    pydiagram.plot_phase_diagram(diagram, boundary, settings, xaxis, yaxis)\n\n    # To analyze the simulation results, PyDiagram also provides\n    # a plotting function which will plot F vs. x or F vs. y,\n    # a vs. x or a vs. y, and accuracy vs. x or accuracy vs. y.\n    pydiagram(info_map, xaxis, yaxis, path, phases, val)\n\nAll above mentioned functions have more available options to fine tune the processing and plotting. For more details, please consult the source code or directly contact me via E-mail.\n\n4. dgm File Format\n^^^^^^^^^^^^^^^^^^\n\nFor non `Polyorder <http://ngpy.org/software/#polyorder>`_ or `PolyFTS <http://polybot.mrl.ucsb.edu/cfdc/polyfts>`_ users, to use PyDiagram you have to generate your own ``dgm`` file from your simulation results by following the ``dgm`` file format.\n\nThe format of the ``dgm`` file.\n\nFirst line::\n\n    [x-axis name] [y-axis name]\n\nOther lines::\n\n    [x] [y] [phase] [F] [a] [accuracy] [separation state]\n\n* ``x-axis name``: the variable name of the x axis in the phase diagram.\n* ``y-axis name``: the variable name of the y axis in the phase diagram.\n* ``x`` and ``y``: the coordinates in the phase diagram.\n* ``phase``: the name of the phase structure.\n* ``F``: the Gibbs free energy of the corresponding phase structure.\n* ``a``: the stretch-free cell size.\n* ``accuracy``: the residual error for the corresponding simulation.\n* ``separation state``: Does the simulation yield phase separated structures? 0 for no and 1 for yes.\n\nThe first five columns are mandatory while the last two are optional.\nThe optional values are assumed by their order.\nFor example, if only 6 columns are provided, then the 6th column is interpreted as ``accuracy``.\n\nExample::\n\n    f   xN\n    0.1 12.5    HEX 3.953993    2.9543  8.7e-7  1\n    0.1 12.6    LAM 3.970134    2.5877  1.7e-8  1\n\nLinks\n-----\n\n* `Yi-Xin Liu's academic homepage <http://ngpy.org/software/>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/liuyxpp/pydiagram", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "pydiagram", "package_url": "https://pypi.org/project/pydiagram/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pydiagram/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/liuyxpp/pydiagram"}, "release_url": "https://pypi.org/project/pydiagram/0.6/", "requires_dist": null, "requires_python": null, "summary": "PyDiagram is a python package for generating a phase diagram from results output by polymer field-theoretic simulations. PyDiagram also provides functions for analysis of simulation results.", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyDiagram is a python package for generating a phase diagram from results output by polymer field-theoretic simulations. PyDiagram also provides functions for analysis of simulation results.</p>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<div id=\"install\">\n<h3>1. Install</h3>\n<pre>$ pip install pydiagram\n</pre>\n<p><strong>Required Packages</strong></p>\n<ul>\n<li><tt>numpy</tt></li>\n<li><tt>scipy</tt></li>\n<li><tt>matplotlib</tt></li>\n<li><tt>mpltex</tt></li>\n<li><tt>attrdict</tt></li>\n<li><tt>PyYAML</tt></li>\n</ul>\n<p><em>Important note</em>: PyYAML cannot be installed by pip or easy_install. Please install it by downloading its source code and use <tt>python setup.py install</tt> to install it, see details at <a href=\"http://pyyaml.org/wiki/PyYAMLDocumentation#Installation\" rel=\"nofollow\">PyYAML Documentation</a>.</p>\n</div>\n<div id=\"use-pydiagram-as-an-executable\">\n<h3>2. Use PyDiagram as An Executable</h3>\n<p>To use the executable, <tt>pydiagram</tt>, you need to provide a project configuration file. The configuration file is in YAML format. Three sample configuration files, <tt>config_polyorder.yml</tt>, <tt>config_polyfts.yml</tt>, and <tt>config_pydiagram.yml</tt>, are shipped with PyDiagram package. You can copy one of them to your project root directory and make any necessary modifications to it.</p>\n<p>Typical usage.</p>\n<pre>pydiagram <span class=\"o\">[</span>-v<span class=\"o\">]</span> <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-p<span class=\"o\">]</span> <span class=\"o\">[</span>-q<span class=\"o\">]</span> <span class=\"o\">[</span>-s<span class=\"o\">]</span> <span class=\"o\">[</span>-m<span class=\"o\">]</span>\n</pre>\n<ul>\n<li><tt>pydiagram <span class=\"pre\">-p</span></tt></li>\n</ul>\n<p>This command processes the simulation data in the current directory. It will save <tt>diagram</tt>, <tt>info_map</tt>, and <tt>boundary</tt> objects as Python pickle files. The parser can be specified in the project configuration file using the <tt>solver</tt> option.</p>\n<ul>\n<li><tt>pydiagram <span class=\"pre\">-q</span></tt></li>\n</ul>\n<p>According to the plot mode specified in the project configuration file, this command will plot requested figures and save them as files.</p>\n<ul>\n<li><tt>pydiagram <span class=\"pre\">-s</span></tt></li>\n</ul>\n<p>This command will run pydiagram as a server.</p>\n<ul>\n<li><tt>pydiagram <span class=\"pre\">-m</span></tt></li>\n</ul>\n<p>This command will run pydiagram in manual mode, which will submit additional simulation jobs specified in the <tt>predictor.manual</tt> in the project configuration file.</p>\n</div>\n<div id=\"use-pydiagram-as-a-library\">\n<h3>3. Use PyDiagram as A Library</h3>\n<p>You can customize your own processing, plotting and predicting scripts by utilizing PyDiagram functions. As described in the last section, your script will also depend on a project configuration file.</p>\n<p>Typical usage.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pydiagram</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"c1\"># Generate diagram by specifying the folder where data locate.</span>\n<span class=\"c1\"># This will require the output data files from supported solvers.</span>\n<span class=\"c1\"># Here assume the project configuration file in the current directory.</span>\n<span class=\"n\">diagram</span> <span class=\"o\">=</span> <span class=\"n\">pydiagram</span><span class=\"o\">.</span><span class=\"n\">get_diagram</span><span class=\"p\">()</span>\n<span class=\"c1\"># Plot the raw diagram</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">pydiagram</span><span class=\"o\">.</span><span class=\"n\">plot_diagram</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">diagram</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or you can generate diagram from .dgm file</span>\n<span class=\"c1\"># First load .dgm file to get info_map</span>\n<span class=\"n\">xaxis</span><span class=\"p\">,</span> <span class=\"n\">yaxis</span><span class=\"p\">,</span> <span class=\"n\">info_map</span> <span class=\"o\">=</span> <span class=\"n\">pydiagram</span><span class=\"o\">.</span><span class=\"n\">load_dgm</span><span class=\"p\">(</span><span class=\"s1\">'phase_data.dgm'</span><span class=\"p\">)</span>\n<span class=\"n\">diagram</span> <span class=\"o\">=</span> <span class=\"n\">pydiagram</span><span class=\"o\">.</span><span class=\"n\">get_diagram_from_info_map</span><span class=\"p\">(</span><span class=\"n\">info_map</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can find phase boundary from digaram</span>\n<span class=\"n\">boundary</span> <span class=\"o\">=</span> <span class=\"n\">pydiagram</span><span class=\"o\">.</span><span class=\"n\">get_boundary</span><span class=\"p\">(</span><span class=\"n\">diagram</span><span class=\"p\">,</span> <span class=\"n\">info_map</span><span class=\"p\">)</span>\n<span class=\"c1\"># And plot it as scatter points</span>\n<span class=\"n\">pydiagram</span><span class=\"o\">.</span><span class=\"n\">plot_boundary_point</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">boundary</span><span class=\"p\">)</span>\n<span class=\"c1\"># Or plot it as line</span>\n<span class=\"n\">pydiagram</span><span class=\"o\">.</span><span class=\"n\">plot_boundary_line</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">boundary</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># PyDiagram also provides a plot function for plotting diagram points</span>\n<span class=\"c1\"># and phase boundary together.</span>\n<span class=\"n\">pydiagram</span><span class=\"o\">.</span><span class=\"n\">plot_phase_diagram</span><span class=\"p\">(</span><span class=\"n\">diagram</span><span class=\"p\">,</span> <span class=\"n\">boundary</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"n\">xaxis</span><span class=\"p\">,</span> <span class=\"n\">yaxis</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To analyze the simulation results, PyDiagram also provides</span>\n<span class=\"c1\"># a plotting function which will plot F vs. x or F vs. y,</span>\n<span class=\"c1\"># a vs. x or a vs. y, and accuracy vs. x or accuracy vs. y.</span>\n<span class=\"n\">pydiagram</span><span class=\"p\">(</span><span class=\"n\">info_map</span><span class=\"p\">,</span> <span class=\"n\">xaxis</span><span class=\"p\">,</span> <span class=\"n\">yaxis</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">phases</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n</pre>\n<p>All above mentioned functions have more available options to fine tune the processing and plotting. For more details, please consult the source code or directly contact me via E-mail.</p>\n</div>\n<div id=\"dgm-file-format\">\n<h3>4. dgm File Format</h3>\n<p>For non <a href=\"http://ngpy.org/software/#polyorder\" rel=\"nofollow\">Polyorder</a> or <a href=\"http://polybot.mrl.ucsb.edu/cfdc/polyfts\" rel=\"nofollow\">PolyFTS</a> users, to use PyDiagram you have to generate your own <tt>dgm</tt> file from your simulation results by following the <tt>dgm</tt> file format.</p>\n<p>The format of the <tt>dgm</tt> file.</p>\n<p>First line:</p>\n<pre>[x-axis name] [y-axis name]\n</pre>\n<p>Other lines:</p>\n<pre>[x] [y] [phase] [F] [a] [accuracy] [separation state]\n</pre>\n<ul>\n<li><tt><span class=\"pre\">x-axis</span> name</tt>: the variable name of the x axis in the phase diagram.</li>\n<li><tt><span class=\"pre\">y-axis</span> name</tt>: the variable name of the y axis in the phase diagram.</li>\n<li><tt>x</tt> and <tt>y</tt>: the coordinates in the phase diagram.</li>\n<li><tt>phase</tt>: the name of the phase structure.</li>\n<li><tt>F</tt>: the Gibbs free energy of the corresponding phase structure.</li>\n<li><tt>a</tt>: the stretch-free cell size.</li>\n<li><tt>accuracy</tt>: the residual error for the corresponding simulation.</li>\n<li><tt>separation state</tt>: Does the simulation yield phase separated structures? 0 for no and 1 for yes.</li>\n</ul>\n<p>The first five columns are mandatory while the last two are optional.\nThe optional values are assumed by their order.\nFor example, if only 6 columns are provided, then the 6th column is interpreted as <tt>accuracy</tt>.</p>\n<p>Example:</p>\n<pre>f   xN\n0.1 12.5    HEX 3.953993    2.9543  8.7e-7  1\n0.1 12.6    LAM 3.970134    2.5877  1.7e-8  1\n</pre>\n</div>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li><a href=\"http://ngpy.org/software/\" rel=\"nofollow\">Yi-Xin Liu\u2019s academic homepage</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1574073, "releases": {"0.4": [], "0.5": [{"comment_text": "", "digests": {"md5": "23d1ee0ad458f4858f4a6ebeba842d38", "sha256": "14cf3a53cdb8596db2106076dda258194799f1896c8aa4fba415130cf5f90596"}, "downloads": -1, "filename": "pydiagram-0.5.tar.gz", "has_sig": false, "md5_digest": "23d1ee0ad458f4858f4a6ebeba842d38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 95529, "upload_time": "2015-05-20T00:00:01", "upload_time_iso_8601": "2015-05-20T00:00:01.768193Z", "url": "https://files.pythonhosted.org/packages/41/9e/577d34ce1f4ab643450ba2b020e35bd212db45055cfb1070a7ac78fe37a0/pydiagram-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "0412d4812d41bfea02d28fe6dafb0d55", "sha256": "1b62b16d91415b7b40c43e0cd12fe35318d74699d20e0b5a7cd8511ade57ce0a"}, "downloads": -1, "filename": "pydiagram-0.6.tar.gz", "has_sig": false, "md5_digest": "0412d4812d41bfea02d28fe6dafb0d55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100129, "upload_time": "2015-06-01T23:35:54", "upload_time_iso_8601": "2015-06-01T23:35:54.832992Z", "url": "https://files.pythonhosted.org/packages/60/45/01af08f03a924d692bc7bef74677d75555a4a3a8a03727ff8c96d8ac7ee4/pydiagram-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0412d4812d41bfea02d28fe6dafb0d55", "sha256": "1b62b16d91415b7b40c43e0cd12fe35318d74699d20e0b5a7cd8511ade57ce0a"}, "downloads": -1, "filename": "pydiagram-0.6.tar.gz", "has_sig": false, "md5_digest": "0412d4812d41bfea02d28fe6dafb0d55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100129, "upload_time": "2015-06-01T23:35:54", "upload_time_iso_8601": "2015-06-01T23:35:54.832992Z", "url": "https://files.pythonhosted.org/packages/60/45/01af08f03a924d692bc7bef74677d75555a4a3a8a03727ff8c96d8ac7ee4/pydiagram-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:03 2020"}