{"info": {"author": "Guido Kollerie", "author_email": "guido@kollerie.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python :: 3", "Topic :: Security :: Cryptography", "Topic :: Software Development :: Libraries"], "description": "Wachtwoord\n==========\n\nWachtwoord is a ridiculously simple Python 3 specific password hashing library.\nIt was written as none of the existing password hashing libraries, most notably\nfshp_, passlib_, cryha_ and Bcryptor_ supported Python 3.\n\nSupported Hashing Schemes\n-------------------------\n\nCurrently only one specific hashing scheme is supported: PBKDF2_.\n\n**IMPORTANT** Versions up to and including 0.12 didn't implement PBKDF2\ncorrectly. This version implements PBKDF2 directly from the specification as\ndetailed in RFC2898. The implementation is tested against publicized test\nvectors (RFC6070)\n\nBasic Usage\n-----------\n\nAs Python 3 is very strict about the distinction between unicode\nstrings and byte strings, Wachtwoord was designed to provide a uniform interface\nby requiring all input to be unicode strings and generating unicode strings as\noutput exclusively.\n\nWachtwoord supports all the hash functions from the hashlib module. The length\nof the salt (default: 32) and the number of iterations (default: 10000) are\nconfigurable.\n\nTwo Modes Of Operation\n~~~~~~~~~~~~~~~~~~~~~~\n\nWachtwoord has two modes of operation. One where some minor initialization\n(that can fail) is done separately from the hashing of a password and one where\nboth are done in one go. The former is more convenient when multiple passwords\nneed to be hashed one after another. The other is more convenient when hashing\nis incidental.\n\nFuture hashing scheme extensions to Wachtwoord might make the initialization\npart more expensive. For the PBKDF2_ scheme the difference is very small.\n\nSeparate initialization and hashing\n+++++++++++++++++++++++++++++++++++\n\n::\n\n    >>> from wachtwoord.pbkdf2 import Engine\n    >>> engine = Engine()\n    >>> hash_encoded_password = engine.hash('secret_123')\n    >>> print(hash_encoded_password)\n    pbkdf2$sha512$10000$2qf1oL9GU0gq+Zf2+vWmuliL0WizwvyFUMWV3jG3o/M=$gzSkk0/WjTHACyaeDBe3czNdI+3iukVUm3f+vzNop2b/LwLQWf0r8WKv1TfzWaqYOnPH8vC3tDTBxdGDzEDYRw==\n    >>>\n    >>> is_correct_password = engine.verify('secret_123', hash_encoded_password)\n    >>> print(is_correct_password)\n    True\n    >>>\n\nThe ``Engine`` object allows certain parameters to be set that influence all\nthe hashes that are subsequently generated. For instance, say we want to use the\n``sha256`` hash function instead of the default ``sha512`` hash function::\n\n    >>> from wachtwoord.pbkdf2 import Engine\n    >>> engine = Engine(digestmod='sha256')\n    >>>\n\nSimilarly if we want to change the salt size and number of iterations we would\ncall Engine as follows::\n\n    >>> from wachtwoord.pbkdf2 import Engine\n    >>> engine = Engine(digestmod='sha256', iterations=20000, salt_size=64)\n    >>>\n\nInitialization and hashing in one go\n++++++++++++++++++++++++++++++++++++\n\n::\n\n    >>> from wachtwoord.pbkdf2 import hash_password, verify_password\n    >>> hash_encoded_password = hash_password('secret_123')\n    >>> print(hash_encoded_password)\n    pbkdf2$sha512$10000$f6ULrQBJspk6JiwHiEDL8fpFLCf90mOAxAM1LCY4dO0=$xzCLvTdp7eQUuY5pfgFl33dx7/uGIMaeZ5Bm5hmLTMx43zi/OCiNgORRmkb5KfkjxRDkD7VNc/45DbHX1zDhcA==\n    >>>\n    >>> is_correct_password = verify_password('secret_123', hash_encoded_password)\n    >>> print(is_correct_password)\n    True\n    >>>\n\nThe fact that the initialization and hashing happen in one go does not prevent\nus from changing the default values. We could have called ``hash_password`` as\nfollows::\n\n    >>> from wachtwoord.pbkdf2 import hash_password\n    >>> hash_encoded_password = hash_password('secret_123', digestmod='sha256', iterations=20000, salt_size=64)\n\nOrigin of the name Wachtwoord\n-----------------------------\n\nWachtwoord is Dutch for password.\n\n.. _fshp: http://pypi.python.org/pypi/fshp/\n.. _passlib: http://pypi.python.org/pypi/passlib/\n.. _cryha: http://pypi.python.org/pypi/cryha/\n.. _Bcryptor: http://pypi.python.org/pypi/Bcryptor/\n.. _PBKDF2: http://en.wikipedia.org/wiki/PBKDF2", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/gkoller/wachtwoord", "keywords": null, "license": "2-clause BSD", "maintainer": null, "maintainer_email": null, "name": "wachtwoord", "package_url": "https://pypi.org/project/wachtwoord/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/wachtwoord/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/gkoller/wachtwoord"}, "release_url": "https://pypi.org/project/wachtwoord/0.14/", "requires_dist": null, "requires_python": null, "summary": "Python 3 password hashing library", "version": "0.14", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Wachtwoord is a ridiculously simple Python 3 specific password hashing library.\nIt was written as none of the existing password hashing libraries, most notably\n<a href=\"http://pypi.python.org/pypi/fshp/\" rel=\"nofollow\">fshp</a>, <a href=\"http://pypi.python.org/pypi/passlib/\" rel=\"nofollow\">passlib</a>, <a href=\"http://pypi.python.org/pypi/cryha/\" rel=\"nofollow\">cryha</a> and <a href=\"http://pypi.python.org/pypi/Bcryptor/\" rel=\"nofollow\">Bcryptor</a> supported Python 3.</p>\n<div id=\"supported-hashing-schemes\">\n<h2>Supported Hashing Schemes</h2>\n<p>Currently only one specific hashing scheme is supported: <a href=\"http://en.wikipedia.org/wiki/PBKDF2\" rel=\"nofollow\">PBKDF2</a>.</p>\n<p><strong>IMPORTANT</strong> Versions up to and including 0.12 didn\u2019t implement PBKDF2\ncorrectly. This version implements PBKDF2 directly from the specification as\ndetailed in RFC2898. The implementation is tested against publicized test\nvectors (RFC6070)</p>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<p>As Python 3 is very strict about the distinction between unicode\nstrings and byte strings, Wachtwoord was designed to provide a uniform interface\nby requiring all input to be unicode strings and generating unicode strings as\noutput exclusively.</p>\n<p>Wachtwoord supports all the hash functions from the hashlib module. The length\nof the salt (default: 32) and the number of iterations (default: 10000) are\nconfigurable.</p>\n<div id=\"two-modes-of-operation\">\n<h3>Two Modes Of Operation</h3>\n<p>Wachtwoord has two modes of operation. One where some minor initialization\n(that can fail) is done separately from the hashing of a password and one where\nboth are done in one go. The former is more convenient when multiple passwords\nneed to be hashed one after another. The other is more convenient when hashing\nis incidental.</p>\n<p>Future hashing scheme extensions to Wachtwoord might make the initialization\npart more expensive. For the <a href=\"http://en.wikipedia.org/wiki/PBKDF2\" rel=\"nofollow\">PBKDF2</a> scheme the difference is very small.</p>\n<div id=\"separate-initialization-and-hashing\">\n<h4>Separate initialization and hashing</h4>\n<pre>&gt;&gt;&gt; from wachtwoord.pbkdf2 import Engine\n&gt;&gt;&gt; engine = Engine()\n&gt;&gt;&gt; hash_encoded_password = engine.hash('secret_123')\n&gt;&gt;&gt; print(hash_encoded_password)\npbkdf2$sha512$10000$2qf1oL9GU0gq+Zf2+vWmuliL0WizwvyFUMWV3jG3o/M=$gzSkk0/WjTHACyaeDBe3czNdI+3iukVUm3f+vzNop2b/LwLQWf0r8WKv1TfzWaqYOnPH8vC3tDTBxdGDzEDYRw==\n&gt;&gt;&gt;\n&gt;&gt;&gt; is_correct_password = engine.verify('secret_123', hash_encoded_password)\n&gt;&gt;&gt; print(is_correct_password)\nTrue\n&gt;&gt;&gt;\n</pre>\n<p>The <tt>Engine</tt> object allows certain parameters to be set that influence all\nthe hashes that are subsequently generated. For instance, say we want to use the\n<tt>sha256</tt> hash function instead of the default <tt>sha512</tt> hash function:</p>\n<pre>&gt;&gt;&gt; from wachtwoord.pbkdf2 import Engine\n&gt;&gt;&gt; engine = Engine(digestmod='sha256')\n&gt;&gt;&gt;\n</pre>\n<p>Similarly if we want to change the salt size and number of iterations we would\ncall Engine as follows:</p>\n<pre>&gt;&gt;&gt; from wachtwoord.pbkdf2 import Engine\n&gt;&gt;&gt; engine = Engine(digestmod='sha256', iterations=20000, salt_size=64)\n&gt;&gt;&gt;\n</pre>\n</div>\n<div id=\"initialization-and-hashing-in-one-go\">\n<h4>Initialization and hashing in one go</h4>\n<pre>&gt;&gt;&gt; from wachtwoord.pbkdf2 import hash_password, verify_password\n&gt;&gt;&gt; hash_encoded_password = hash_password('secret_123')\n&gt;&gt;&gt; print(hash_encoded_password)\npbkdf2$sha512$10000$f6ULrQBJspk6JiwHiEDL8fpFLCf90mOAxAM1LCY4dO0=$xzCLvTdp7eQUuY5pfgFl33dx7/uGIMaeZ5Bm5hmLTMx43zi/OCiNgORRmkb5KfkjxRDkD7VNc/45DbHX1zDhcA==\n&gt;&gt;&gt;\n&gt;&gt;&gt; is_correct_password = verify_password('secret_123', hash_encoded_password)\n&gt;&gt;&gt; print(is_correct_password)\nTrue\n&gt;&gt;&gt;\n</pre>\n<p>The fact that the initialization and hashing happen in one go does not prevent\nus from changing the default values. We could have called <tt>hash_password</tt> as\nfollows:</p>\n<pre>&gt;&gt;&gt; from wachtwoord.pbkdf2 import hash_password\n&gt;&gt;&gt; hash_encoded_password = hash_password('secret_123', digestmod='sha256', iterations=20000, salt_size=64)\n</pre>\n</div>\n</div>\n</div>\n<div id=\"origin-of-the-name-wachtwoord\">\n<h2>Origin of the name Wachtwoord</h2>\n<p>Wachtwoord is Dutch for password.</p>\n</div>\n\n          </div>"}, "last_serial": 896121, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b7ce53f72aae1f0da52023a104a2f603", "sha256": "55fcc4ea6a7ad54bd9e1298d634d521f6e5bac94e79b693816526dc1d38d28b6"}, "downloads": -1, "filename": "wachtwoord-0.1.tar.gz", "has_sig": false, "md5_digest": "b7ce53f72aae1f0da52023a104a2f603", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4865, "upload_time": "2011-05-27T16:07:09", "upload_time_iso_8601": "2011-05-27T16:07:09.519056Z", "url": "https://files.pythonhosted.org/packages/13/4d/a9e9c2bb9c3434c8c93f2c0273eaccb091284f793d4acb05bdb05dab6ca2/wachtwoord-0.1.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "9d808dd7210c4c44f6fead2667052da4", "sha256": "4ba6612a96710c4605d3870c62b0d3de85f80993822f4701ac4ba291a341e6af"}, "downloads": -1, "filename": "wachtwoord-0.11.tar.gz", "has_sig": false, "md5_digest": "9d808dd7210c4c44f6fead2667052da4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5987, "upload_time": "2011-05-28T15:04:14", "upload_time_iso_8601": "2011-05-28T15:04:14.985772Z", "url": "https://files.pythonhosted.org/packages/c6/da/5552546d8ca4cb524071b79f729975091871489369f8e160a157d59ad497/wachtwoord-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "3f37e99dbb8ed7ed8bb0c88e2abe093f", "sha256": "ac5c9322aa71047b6fbd5124da6d3d62b9c05b0a9e2c4ba918ef0d3ec9533d6a"}, "downloads": -1, "filename": "wachtwoord-0.12.tar.gz", "has_sig": false, "md5_digest": "3f37e99dbb8ed7ed8bb0c88e2abe093f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6099, "upload_time": "2011-05-28T21:08:04", "upload_time_iso_8601": "2011-05-28T21:08:04.810235Z", "url": "https://files.pythonhosted.org/packages/8b/9d/83fe51ac246b95a3d2faef11df45aa7f76e5f7b774e070247bc274267d93/wachtwoord-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "549834eb4a2d48d1cec00bfc0197e3a5", "sha256": "9a7879552d8bf4d458c1ea39763e0c522b80c73c6a09baf2e4a35a5a0e070711"}, "downloads": -1, "filename": "wachtwoord-0.13.tar.gz", "has_sig": false, "md5_digest": "549834eb4a2d48d1cec00bfc0197e3a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6902, "upload_time": "2012-01-23T15:57:30", "upload_time_iso_8601": "2012-01-23T15:57:30.625699Z", "url": "https://files.pythonhosted.org/packages/1f/53/ac131a221edfb31bda012d12a6fd08e56229bde4173f106caa796b614abb/wachtwoord-0.13.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "bfd74e797bfa7f4c77818bcb7eb61181", "sha256": "f39c4b468c7aece17ff6f0bf80f48d34d3877343105feaeb92d75a8b6e46fdbf"}, "downloads": -1, "filename": "wachtwoord-0.14.tar.gz", "has_sig": false, "md5_digest": "bfd74e797bfa7f4c77818bcb7eb61181", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7203, "upload_time": "2013-10-16T20:00:10", "upload_time_iso_8601": "2013-10-16T20:00:10.988413Z", "url": "https://files.pythonhosted.org/packages/ed/a7/14a9621b2b83396bae26f11be9c6a94d3dfe9f13f01e58dc38a025e782e0/wachtwoord-0.14.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bfd74e797bfa7f4c77818bcb7eb61181", "sha256": "f39c4b468c7aece17ff6f0bf80f48d34d3877343105feaeb92d75a8b6e46fdbf"}, "downloads": -1, "filename": "wachtwoord-0.14.tar.gz", "has_sig": false, "md5_digest": "bfd74e797bfa7f4c77818bcb7eb61181", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7203, "upload_time": "2013-10-16T20:00:10", "upload_time_iso_8601": "2013-10-16T20:00:10.988413Z", "url": "https://files.pythonhosted.org/packages/ed/a7/14a9621b2b83396bae26f11be9c6a94d3dfe9f13f01e58dc38a025e782e0/wachtwoord-0.14.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:33:20 2020"}