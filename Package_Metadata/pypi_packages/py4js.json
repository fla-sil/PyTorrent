{"info": {"author": "Xiangkui Li", "author_email": "1749498702@qq.com", "bugtrack_url": null, "classifiers": [], "description": "# py4js\npy4js is a fast and simple micro-framework for small web applications. Its goal is to enable you to develop\nweb applications in a simple and understandable way. \n\nWith it, you don't need to know the HTTP protocol, or how Python communicates with JavaScript. You can use Python functions in JavaScript just like native JavaScript functions.\n\n## Usage steps\n\n### Step 1\nInstall py4js package: `pip install py4js` or `pip3 install py4js`\n\n### Step 2\nFirst, create a package, named service, and then create a Python file in the package, such as `hello.py`:\n```python\ndef say_hello(name):\n    \"\"\"\n    say hello test\n\n    :param name:\n    :return:\n    \"\"\"\n    return 'Hello %s!' % name\n```\n\n### Step 3\nCreate a Python file that is at the same level as the service package, such as `main.py`:\n```python\nfrom py4js import Server\n\nServer().run()\n```\nThen run it(By default, the server will launch wsgiref server at port `5000`. You can also use other port and wsgi server).\n\n### Step 4\nCreate a HTML file, anywhere, such as `index.html`:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>hello</title>\n    <script src=\"http://localhost:5000/service.js\"></script>\n</head>\n<body>\n    <script>\n        service.hello.say_hello('World', function(data){\n            alert(data);\n        });\n    </script>\n</body>\n</html>\n```\n\nOpen the `index.html`in browser and you will see the alert message:\n![image](https://github.com/lixk/py4js/raw/master/sample/screenshots/alert-hello.png)\n\nIt's so easy, yes?\n\n## Server\n### Server parameters\nThe server has several startup parameters that can be specified, for example:\n\n| Name | Description |\n| :--- | :--- |\n| host | Server address to bind to(default: `0.0.0.0`). Pass `0.0.0.0` to listens on  all services including the external one. |\n| port | Server port to bind to(default: 5000). Values below 1024 require root privileges. if port is None, server will use a random port. |\n| server | Specify the server adapter to use. For more details: [Server adapter](#server-adapter). (default: `wsgiref`, others: `paste`/`waitress`/`gevent`/`cherrypy`/`gunicorn`.etc). |\n| service_package | A package that will be scanned by the server. All modules and public functions in the package will be loaded as service for JavaScript. Default package name is `service`, also you can change it to another name if you like. |\n| js_route | the path of JavaScript for browser to load. |\n| access_control_allow_origin | default: `*` , all cross domain requests are allowed. |\n\n### Server adapter\nAs the py4js server is based on Bottle, the built-in default server is based on wsgiref WSGIServer. This non-threading HTTP server may become a performance bottleneck when server load increases. \nSo it's better to use a different server that is either multi-threaded or supports asynchronous IO.\n\nBottle ships with a lot of ready-to-use adapters for the most common WSGI servers, such as:\n`cherrypy`, `paste`, `waitress`, `gevent`, `eventlet`, `tornado`, `twisted`.etc. \nUsage:\n 1. waitress\n    ```python\n    from py4js import Server\n\n    Server(server='waitress').run()\n    ```\n    If you haven't installed the `waitress` package, please install it first by `pip install waitress` or `pip3 install waitress`.\n\n 2. gevent\n    ```python\n    from gevent import monkey\n\n    from py4js import Server\n    \n    monkey.patch_all()\n    \n    Server(server='gevent').run()\n    ```\n    If you haven't installed the `gevent` package, please install it first by `pip install gevent` or `pip3 install gevent`.  \n    As `gevent` is Asynchronous, the server can be very fast, can handle a virtually unlimited number of concurrent connections and are easy to manage.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lixk/py4js", "keywords": "pip,py4js", "license": "MIT Licence", "maintainer": "", "maintainer_email": "", "name": "py4js", "package_url": "https://pypi.org/project/py4js/", "platform": "any", "project_url": "https://pypi.org/project/py4js/", "project_urls": {"Homepage": "https://github.com/lixk/py4js"}, "release_url": "https://pypi.org/project/py4js/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "a fast and simple micro-framework for small web applications", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py4js</h1>\n<p>py4js is a fast and simple micro-framework for small web applications. Its goal is to enable you to develop\nweb applications in a simple and understandable way.</p>\n<p>With it, you don't need to know the HTTP protocol, or how Python communicates with JavaScript. You can use Python functions in JavaScript just like native JavaScript functions.</p>\n<h2>Usage steps</h2>\n<h3>Step 1</h3>\n<p>Install py4js package: <code>pip install py4js</code> or <code>pip3 install py4js</code></p>\n<h3>Step 2</h3>\n<p>First, create a package, named service, and then create a Python file in the package, such as <code>hello.py</code>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    say hello test</span>\n\n<span class=\"sd\">    :param name:</span>\n<span class=\"sd\">    :return:</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Hello </span><span class=\"si\">%s</span><span class=\"s1\">!'</span> <span class=\"o\">%</span> <span class=\"n\">name</span>\n</pre>\n<h3>Step 3</h3>\n<p>Create a Python file that is at the same level as the service package, such as <code>main.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py4js</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"n\">Server</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Then run it(By default, the server will launch wsgiref server at port <code>5000</code>. You can also use other port and wsgi server).</p>\n<h3>Step 4</h3>\n<p>Create a HTML file, anywhere, such as <code>index.html</code>:</p>\n<pre><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"en\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"UTF-8\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>hello<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"http://localhost:5000/service.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n        <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">hello</span><span class=\"p\">.</span><span class=\"nx\">say_hello</span><span class=\"p\">(</span><span class=\"s1\">'World'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">){</span>\n            <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Open the <code>index.html</code>in browser and you will see the alert message:\n<img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58b9871480f820f650aae984bb8cf68d6ac27a4c/68747470733a2f2f6769746875622e636f6d2f6c69786b2f7079346a732f7261772f6d61737465722f73616d706c652f73637265656e73686f74732f616c6572742d68656c6c6f2e706e67\"></p>\n<p>It's so easy, yes?</p>\n<h2>Server</h2>\n<h3>Server parameters</h3>\n<p>The server has several startup parameters that can be specified, for example:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">host</td>\n<td align=\"left\">Server address to bind to(default: <code>0.0.0.0</code>). Pass <code>0.0.0.0</code> to listens on  all services including the external one.</td>\n</tr>\n<tr>\n<td align=\"left\">port</td>\n<td align=\"left\">Server port to bind to(default: 5000). Values below 1024 require root privileges. if port is None, server will use a random port.</td>\n</tr>\n<tr>\n<td align=\"left\">server</td>\n<td align=\"left\">Specify the server adapter to use. For more details: <a href=\"#server-adapter\" rel=\"nofollow\">Server adapter</a>. (default: <code>wsgiref</code>, others: <code>paste</code>/<code>waitress</code>/<code>gevent</code>/<code>cherrypy</code>/<code>gunicorn</code>.etc).</td>\n</tr>\n<tr>\n<td align=\"left\">service_package</td>\n<td align=\"left\">A package that will be scanned by the server. All modules and public functions in the package will be loaded as service for JavaScript. Default package name is <code>service</code>, also you can change it to another name if you like.</td>\n</tr>\n<tr>\n<td align=\"left\">js_route</td>\n<td align=\"left\">the path of JavaScript for browser to load.</td>\n</tr>\n<tr>\n<td align=\"left\">access_control_allow_origin</td>\n<td align=\"left\">default: <code>*</code> , all cross domain requests are allowed.</td>\n</tr></tbody></table>\n<h3>Server adapter</h3>\n<p>As the py4js server is based on Bottle, the built-in default server is based on wsgiref WSGIServer. This non-threading HTTP server may become a performance bottleneck when server load increases.\nSo it's better to use a different server that is either multi-threaded or supports asynchronous IO.</p>\n<p>Bottle ships with a lot of ready-to-use adapters for the most common WSGI servers, such as:\n<code>cherrypy</code>, <code>paste</code>, <code>waitress</code>, <code>gevent</code>, <code>eventlet</code>, <code>tornado</code>, <code>twisted</code>.etc.\nUsage:</p>\n<ol>\n<li>\n<p>waitress</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py4js</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s1\">'waitress'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>If you haven't installed the <code>waitress</code> package, please install it first by <code>pip install waitress</code> or <code>pip3 install waitress</code>.</p>\n</li>\n<li>\n<p>gevent</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gevent</span> <span class=\"kn\">import</span> <span class=\"n\">monkey</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">py4js</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"n\">monkey</span><span class=\"o\">.</span><span class=\"n\">patch_all</span><span class=\"p\">()</span>\n\n<span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s1\">'gevent'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>If you haven't installed the <code>gevent</code> package, please install it first by <code>pip install gevent</code> or <code>pip3 install gevent</code>.<br>\nAs <code>gevent</code> is Asynchronous, the server can be very fast, can handle a virtually unlimited number of concurrent connections and are easy to manage.</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 4425717, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "841286764b7b3a9f7d6fb363cd21e73b", "sha256": "32385eb82feeb5a100f9afe1ca941abcfd0af89511fae01261c79e8f452747ac"}, "downloads": -1, "filename": "py4js-0.1.0.tar.gz", "has_sig": false, "md5_digest": "841286764b7b3a9f7d6fb363cd21e73b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4752, "upload_time": "2018-10-28T10:49:17", "upload_time_iso_8601": "2018-10-28T10:49:17.652504Z", "url": "https://files.pythonhosted.org/packages/06/0b/2026a194c042f925e369a9d38721ae3192e6337bbd113de3a3d70f12240b/py4js-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8465533fafd100d739af24924849b323", "sha256": "53473624474e25bf9b9814e90b3057d1b4fbaa453143879e070547bd1f33535e"}, "downloads": -1, "filename": "py4js-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8465533fafd100d739af24924849b323", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5197, "upload_time": "2018-10-28T11:04:01", "upload_time_iso_8601": "2018-10-28T11:04:01.880475Z", "url": "https://files.pythonhosted.org/packages/e4/0c/ceeb3356593104ba036f0aa59afd268802b3f4186232040ca12a539829bd/py4js-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0b5b6b54f70d2007b4156f966447ecd4", "sha256": "53a589a2d8d60cc3c89a4421057ded2c7449f8c0b763b0ae9bcc0308dfcbcea8"}, "downloads": -1, "filename": "py4js-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0b5b6b54f70d2007b4156f966447ecd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5251, "upload_time": "2018-10-29T01:44:16", "upload_time_iso_8601": "2018-10-29T01:44:16.473730Z", "url": "https://files.pythonhosted.org/packages/56/8b/25a3dcd9b819ea8b0aaaba45f7346a175656c25642912fdbe2e9cb343cef/py4js-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0b5b6b54f70d2007b4156f966447ecd4", "sha256": "53a589a2d8d60cc3c89a4421057ded2c7449f8c0b763b0ae9bcc0308dfcbcea8"}, "downloads": -1, "filename": "py4js-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0b5b6b54f70d2007b4156f966447ecd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5251, "upload_time": "2018-10-29T01:44:16", "upload_time_iso_8601": "2018-10-29T01:44:16.473730Z", "url": "https://files.pythonhosted.org/packages/56/8b/25a3dcd9b819ea8b0aaaba45f7346a175656c25642912fdbe2e9cb343cef/py4js-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:13 2020"}