{"info": {"author": "Lautaro Navarro", "author_email": "navarro_lautaro@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Affero General Public License v3", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "httperrors\n==========\n\nHttp errors provide a list of easy to test and descriptive set of python\nerrors.\n\nCode example\n------------\n\nRaising exception\n~~~~~~~~~~~~~~~~~\n\n::\n\n   from httperrors import BadRequestError\n   class View(BaseView):\n       def validate(self, request):\n           ... \n           if not request.body.is_json():\n               raise BadRequestError(\n                   error_message=\"You must provide a JSON body\",\n                   error_code=\"NOT_A_JSON_BODY_ERROR\",\n               )\n       def run(self,request):\n           ...\n\nSerialization\n~~~~~~~~~~~~~\n\nYou will be able to catch this exception somewhere in the flow of your\napplication, map it and serialize it to the corresponding request.\n\n::\n\n   from httperrors import BadRequestError\n   class BaseView:\n   def __init__(self):\n       try:\n           self.validate()\n       except BadRequestError as e:\n           return json_response(\n               status_code=e.status_code,\n               body=e.serialize()\n           )\n\nTesting\n~~~~~~~\n\nYou will be able to easily test your application\n\n::\n\n   from httperrors import BadRequestError\n   class TestView:\n   def test_it_raises_bad_request_error_not_json_body(self):\n       view = View()\n       request = Mock()\n       request.body.is_json.return_value = False\n       with pytest.raises(BadRequestError) as error:\n           view.validate()\n           assert error.error_code == \"NOT_A_JSON_BODY_ERROR\"\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LautaroNavarro/httperrors", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "httperrors", "package_url": "https://pypi.org/project/httperrors/", "platform": "", "project_url": "https://pypi.org/project/httperrors/", "project_urls": {"Homepage": "https://github.com/LautaroNavarro/httperrors"}, "release_url": "https://pypi.org/project/httperrors/1.0.0/", "requires_dist": null, "requires_python": ">=3.0", "summary": "Library that provides a easy to use set of http errors along with useful descriptions", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Http errors provide a list of easy to test and descriptive set of python\nerrors.</p>\n<div id=\"code-example\">\n<h2>Code example</h2>\n<div id=\"raising-exception\">\n<h3>Raising exception</h3>\n<pre>from httperrors import BadRequestError\nclass View(BaseView):\n    def validate(self, request):\n        ...\n        if not request.body.is_json():\n            raise BadRequestError(\n                error_message=\"You must provide a JSON body\",\n                error_code=\"NOT_A_JSON_BODY_ERROR\",\n            )\n    def run(self,request):\n        ...\n</pre>\n</div>\n<div id=\"serialization\">\n<h3>Serialization</h3>\n<p>You will be able to catch this exception somewhere in the flow of your\napplication, map it and serialize it to the corresponding request.</p>\n<pre>from httperrors import BadRequestError\nclass BaseView:\ndef __init__(self):\n    try:\n        self.validate()\n    except BadRequestError as e:\n        return json_response(\n            status_code=e.status_code,\n            body=e.serialize()\n        )\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>You will be able to easily test your application</p>\n<pre>from httperrors import BadRequestError\nclass TestView:\ndef test_it_raises_bad_request_error_not_json_body(self):\n    view = View()\n    request = Mock()\n    request.body.is_json.return_value = False\n    with pytest.raises(BadRequestError) as error:\n        view.validate()\n        assert error.error_code == \"NOT_A_JSON_BODY_ERROR\"\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6925015, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1463a0d60847813f97d70c8485db8a1f", "sha256": "c7cbd841e930cd5249d0f63c55c4fd9f5b40b4ed0addccb66553bc987573c395"}, "downloads": -1, "filename": "httperrors-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1463a0d60847813f97d70c8485db8a1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 5874, "upload_time": "2020-04-01T04:07:54", "upload_time_iso_8601": "2020-04-01T04:07:54.657322Z", "url": "https://files.pythonhosted.org/packages/7b/cd/731bcbbf37444f3049a7f045cd0c528fa88ba92a62008cb1d812d2e18478/httperrors-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bcb5c5c30eca4bf29056e38b9638455", "sha256": "0fb2ac562f7c46ce4a82d55dfb90381074faff34f0127315221ed3023915e91f"}, "downloads": -1, "filename": "httperrors-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7bcb5c5c30eca4bf29056e38b9638455", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 4107, "upload_time": "2020-04-01T04:07:57", "upload_time_iso_8601": "2020-04-01T04:07:57.448045Z", "url": "https://files.pythonhosted.org/packages/89/7a/b8379d2af0ad6d025a272004af3b6e0b0e9dbd923a77e8046deb3e8547b9/httperrors-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1463a0d60847813f97d70c8485db8a1f", "sha256": "c7cbd841e930cd5249d0f63c55c4fd9f5b40b4ed0addccb66553bc987573c395"}, "downloads": -1, "filename": "httperrors-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1463a0d60847813f97d70c8485db8a1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 5874, "upload_time": "2020-04-01T04:07:54", "upload_time_iso_8601": "2020-04-01T04:07:54.657322Z", "url": "https://files.pythonhosted.org/packages/7b/cd/731bcbbf37444f3049a7f045cd0c528fa88ba92a62008cb1d812d2e18478/httperrors-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bcb5c5c30eca4bf29056e38b9638455", "sha256": "0fb2ac562f7c46ce4a82d55dfb90381074faff34f0127315221ed3023915e91f"}, "downloads": -1, "filename": "httperrors-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7bcb5c5c30eca4bf29056e38b9638455", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 4107, "upload_time": "2020-04-01T04:07:57", "upload_time_iso_8601": "2020-04-01T04:07:57.448045Z", "url": "https://files.pythonhosted.org/packages/89/7a/b8379d2af0ad6d025a272004af3b6e0b0e9dbd923a77e8046deb3e8547b9/httperrors-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:09 2020"}