{"info": {"author": "Peter Linss", "author_email": "pypi@linss.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# sem_ver\n\nThis package contains a parser for Semantic Version labels complete with type annotations. \n\nIn addition to parsing version labels they may be compared via standard comparison operators \nand modified directly.\nNote that comparison operators, including equality, do not consider build information.\nTo test for equality including build information, convert to, and compare strings.\nSemVer objects may be directly compared to strings, or other objects that can be converted to strings,\na `ValueError` will be raised if the other object is not a valid SemVer.\n\nSee https://semver.org for details.\n\n### sem_ver.SemVer\n\n#### sem_ver.validate(version: str) -> bool\n\nTest if string is a valid SemVer.\n\n#### sem_ver.compare(version_a: str, version_b: str) -> int\n\nCompare two SemVer strings.\nWill raise `ValueError` if either string is not a valid SemVer.\n\n#### sem_ver.force(version: str) -> Optional[SemVer]\n\nUse relaxed parsing rules to attempt to create a SemVer.\nReturns `None` if no version info found.\n\n#### SemVer(version: str = None, major: int = 0, minor: int = 0, patch: int = 0, prerelease: Union[str, Sequence[Union[int, str]]] = '', build: Union[str, Sequence[str]] = '')\n\nConstructor.\nWill raise `ValueError` if the passed version string does not match the proper format.\n\n#### SemVer.major: int\n\nMajor version.\nChanging the major version will reset the minor, patch, prerelease, and build versions.\n\n#### SemVer.minor: int\n\nMinor version.\nChanging the minor version will reset the patch, prerelease, and build versions.\n\n#### SemVer.patch: int\n\nPatch version.\nChanging the patch version will reset the prerelease and build versions.\n\n#### SemVer.prerelease: Optional[str]\n\nPrerelease tags as a single string.\nWill raise `ValueError` if the prerelease string does not match the proper format.\n\n#### SemVer.prereleases: List[Union[int, str]]\n\nPrerelease tags as a list of int or string.\nDoes not validate the strings.\n\n#### SemVer.build: Optional[str]\n\nBuild labels as a single string.\nWill raise `ValueError` if the build string does not match the proper format.\n\n#### SemVer.builds: List[str]\n\nBuild labels as a list of strings.\nDoes not validate the strings.\n\n#### SemVer.next_major() -> SemVer\n\nCreate a new SemVer for the next major release.\nMinor, patch, prerelease, and build will be reset.\n\n#### SemVer.next_minor() -> SemVer\n\nCreate a new SemVer for the next minor release.\nPatch, prerelease, and build will be reset.\n\n#### SemVer.next_patch() -> SemVer\n\nCreate a new SemVer for the next patch release.\nPrerelease and build will be reset.\n\n#### SemVer.__str__() -> str\n\nConvert to string.\n\n### Installation\n\nInstall with pip:\n\n    pip install sem_ver\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/plinss/sem_ver/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sem-ver", "package_url": "https://pypi.org/project/sem-ver/", "platform": "", "project_url": "https://pypi.org/project/sem-ver/", "project_urls": {"Homepage": "https://github.com/plinss/sem_ver/"}, "release_url": "https://pypi.org/project/sem-ver/1.2.0/", "requires_dist": ["mypy ; extra == 'dev'", "flake8 ; extra == 'dev'", "flake8-import-order ; extra == 'dev'", "flake8-annotations ; extra == 'dev'", "flake8-type-annotations ; extra == 'dev'", "flake8-docstrings ; extra == 'dev'", "pep8-naming ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "Semantic Version Processor", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sem_ver</h1>\n<p>This package contains a parser for Semantic Version labels complete with type annotations.</p>\n<p>In addition to parsing version labels they may be compared via standard comparison operators\nand modified directly.\nNote that comparison operators, including equality, do not consider build information.\nTo test for equality including build information, convert to, and compare strings.\nSemVer objects may be directly compared to strings, or other objects that can be converted to strings,\na <code>ValueError</code> will be raised if the other object is not a valid SemVer.</p>\n<p>See <a href=\"https://semver.org\" rel=\"nofollow\">https://semver.org</a> for details.</p>\n<h3>sem_ver.SemVer</h3>\n<h4>sem_ver.validate(version: str) -&gt; bool</h4>\n<p>Test if string is a valid SemVer.</p>\n<h4>sem_ver.compare(version_a: str, version_b: str) -&gt; int</h4>\n<p>Compare two SemVer strings.\nWill raise <code>ValueError</code> if either string is not a valid SemVer.</p>\n<h4>sem_ver.force(version: str) -&gt; Optional[SemVer]</h4>\n<p>Use relaxed parsing rules to attempt to create a SemVer.\nReturns <code>None</code> if no version info found.</p>\n<h4>SemVer(version: str = None, major: int = 0, minor: int = 0, patch: int = 0, prerelease: Union[str, Sequence[Union[int, str]]] = '', build: Union[str, Sequence[str]] = '')</h4>\n<p>Constructor.\nWill raise <code>ValueError</code> if the passed version string does not match the proper format.</p>\n<h4>SemVer.major: int</h4>\n<p>Major version.\nChanging the major version will reset the minor, patch, prerelease, and build versions.</p>\n<h4>SemVer.minor: int</h4>\n<p>Minor version.\nChanging the minor version will reset the patch, prerelease, and build versions.</p>\n<h4>SemVer.patch: int</h4>\n<p>Patch version.\nChanging the patch version will reset the prerelease and build versions.</p>\n<h4>SemVer.prerelease: Optional[str]</h4>\n<p>Prerelease tags as a single string.\nWill raise <code>ValueError</code> if the prerelease string does not match the proper format.</p>\n<h4>SemVer.prereleases: List[Union[int, str]]</h4>\n<p>Prerelease tags as a list of int or string.\nDoes not validate the strings.</p>\n<h4>SemVer.build: Optional[str]</h4>\n<p>Build labels as a single string.\nWill raise <code>ValueError</code> if the build string does not match the proper format.</p>\n<h4>SemVer.builds: List[str]</h4>\n<p>Build labels as a list of strings.\nDoes not validate the strings.</p>\n<h4>SemVer.next_major() -&gt; SemVer</h4>\n<p>Create a new SemVer for the next major release.\nMinor, patch, prerelease, and build will be reset.</p>\n<h4>SemVer.next_minor() -&gt; SemVer</h4>\n<p>Create a new SemVer for the next minor release.\nPatch, prerelease, and build will be reset.</p>\n<h4>SemVer.next_patch() -&gt; SemVer</h4>\n<p>Create a new SemVer for the next patch release.\nPrerelease and build will be reset.</p>\n<h4>SemVer.<strong>str</strong>() -&gt; str</h4>\n<p>Convert to string.</p>\n<h3>Installation</h3>\n<p>Install with pip:</p>\n<pre><code>pip install sem_ver\n</code></pre>\n\n          </div>"}, "last_serial": 7192079, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "0f2b9fb0bf282fbec62c0dbb29c18e84", "sha256": "4eeca4f46587bdd85b32edfa8ac7ca392b9635d0938abd0a4262cff60b37ddb1"}, "downloads": -1, "filename": "sem_ver-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0f2b9fb0bf282fbec62c0dbb29c18e84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4353, "upload_time": "2020-02-02T21:14:51", "upload_time_iso_8601": "2020-02-02T21:14:51.935987Z", "url": "https://files.pythonhosted.org/packages/95/67/d479df34cb8ded7b1333b2deac6642aebc71ef4f3478b17e3c42a8b510dc/sem_ver-1.0.1-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "466ad7fa07675394518074c8f016b848", "sha256": "1380e6d5a31287cf476d47bc125a783b3d2b098d9f046d8dcf4b5e4a59ea94a7"}, "downloads": -1, "filename": "sem_ver-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "466ad7fa07675394518074c8f016b848", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4741, "upload_time": "2020-02-22T20:17:50", "upload_time_iso_8601": "2020-02-22T20:17:50.493845Z", "url": "https://files.pythonhosted.org/packages/bd/69/6c8f8351d037c1bbe9bc345e2e0812b0559d4ac0800ebd623bd1db0bf625/sem_ver-1.1.0-py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "e448df150e8821c5a66c8c1c55dec3b9", "sha256": "88196fe2e86b68d3a05991761b5d44523dc7bd59f574d5d76e9159145ebc3126"}, "downloads": -1, "filename": "sem_ver-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e448df150e8821c5a66c8c1c55dec3b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5055, "upload_time": "2020-05-07T21:54:40", "upload_time_iso_8601": "2020-05-07T21:54:40.601698Z", "url": "https://files.pythonhosted.org/packages/cb/bd/bceddb708be46448b82bc1999b83a221ca027fa8ae7bd6d23078c0c8ed16/sem_ver-1.2.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e448df150e8821c5a66c8c1c55dec3b9", "sha256": "88196fe2e86b68d3a05991761b5d44523dc7bd59f574d5d76e9159145ebc3126"}, "downloads": -1, "filename": "sem_ver-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e448df150e8821c5a66c8c1c55dec3b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5055, "upload_time": "2020-05-07T21:54:40", "upload_time_iso_8601": "2020-05-07T21:54:40.601698Z", "url": "https://files.pythonhosted.org/packages/cb/bd/bceddb708be46448b82bc1999b83a221ca027fa8ae7bd6d23078c0c8ed16/sem_ver-1.2.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:55:20 2020"}