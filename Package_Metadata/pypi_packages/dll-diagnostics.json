{"info": {"author": "Adam Rehn", "author_email": "adam@adamrehn.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# DLL Diagnostic Tools\n\nThe `dlldiag` command-line tool provides functionality to assist in identifying the DLL dependencies of an application or library and diagnosing dependency loading issues. It is primarily intended for use when migrating existing applications to Windows containers, where traditional GUI-based tools are unavailable. Identifying the minimal set of dependencies for an application facilitates a workflow where the required DLL files can be copied from the [mcr.microsoft.com/windows](https://hub.docker.com/_/microsoft-windows) base image into the [mcr.microsoft.com/windows/servercore](https://hub.docker.com/_/microsoft-windows-servercore) base image, thus maximising application compatibility whilst maintaining the minimum possible image size.\n\n\n## Contents\n\n- [Requirements and installation](#requirements-and-installation)\n- [Usage](#usage)\n- [Legal](#Legal)\n\n\n## Requirements and installation\n\nThe `dll-diagnostics` Python package requires the following:\n\n- Python 3.5 or newer\n- Windows Server 2016 or newer, or Windows 10 version 1607 or newer\n- [Microsoft Visual C++ Redistributable for Visual Studio 2015-2019](https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads)\n- [Debugging Tools for Windows 10 (WinDbg)](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools) (only needed for running the `dlldiag trace` command)\n\nYou can install the package by running the following command:\n\n```\npip install dll-diagnostics\n```\n\nIf you don't need the package on your host system then you can [download a prebuilt container image from Docker Hub](https://hub.docker.com/r/adamrehn/dll-diagnostics) to start using the `dlldiag` command inside a Windows container.\n\n\n## Usage\n\nThe `dlldiag` command-line tool provides the following subcommands:\n\n- `dlldiag deps`: this subcommand lists the direct dependencies for a module (DLL/EXE) and checks if each one can be loaded. [Delay-loaded dependencies](https://docs.microsoft.com/en-us/cpp/build/reference/linker-support-for-delay-loaded-dlls) are also listed, but indirect dependencies (i.e. dependencies of dependencies) are not.\n\n- `dlldiag docker` this subcommand generates a Dockerfile suitable for using the `dlldiag` command inside a Windows container, allowing the user to optionally specify the base image to be used in the Dockerfile's `FROM` clause. This is handy when you want to extend an existing image of your choice, rather than simply extending the Windows Server Core image as the [prebuilt images from Docker Hub](https://hub.docker.com/r/adamrehn/dll-diagnostics) do.\n\n- `dlldiag trace`: this subcommand uses the Windows debugger to trace a [LoadLibrary()](https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibraryw) call for a module (DLL/EXE) and provide detailed reports of the results. The trace makes use of the Windows kernel [loader snaps](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/show-loader-snaps) feature to obtain fine-grained information, as discussed in [Junfeng Zhang's blog post \"Debugging LoadLibrary Failures\"](https://blogs.msdn.microsoft.com/junfeng/2006/11/20/debugging-loadlibrary-failures/). The trace captures information about both indirect dependencies and delay-loaded dependencies.\n\n\n## Legal\n\nCopyright &copy; 2019, Adam Rehn. Licensed under the MIT License, see the file [LICENSE](https://github.com/adamrehn/dll-diagnostics/blob/master/LICENSE) for details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/adamrehn/dll-diagnostics", "keywords": "dll windows containers", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dll-diagnostics", "package_url": "https://pypi.org/project/dll-diagnostics/", "platform": "", "project_url": "https://pypi.org/project/dll-diagnostics/", "project_urls": {"Homepage": "http://github.com/adamrehn/dll-diagnostics"}, "release_url": "https://pypi.org/project/dll-diagnostics/0.0.3/", "requires_dist": ["colorama", "pefile", "pywin32", "setuptools (>=38.6.0)", "termcolor", "twine (>=1.11.0)", "wheel (>=0.31.0)"], "requires_python": ">=3.5", "summary": "Tools for diagnosing DLL dependency loading issues", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DLL Diagnostic Tools</h1>\n<p>The <code>dlldiag</code> command-line tool provides functionality to assist in identifying the DLL dependencies of an application or library and diagnosing dependency loading issues. It is primarily intended for use when migrating existing applications to Windows containers, where traditional GUI-based tools are unavailable. Identifying the minimal set of dependencies for an application facilitates a workflow where the required DLL files can be copied from the <a href=\"https://hub.docker.com/_/microsoft-windows\" rel=\"nofollow\">mcr.microsoft.com/windows</a> base image into the <a href=\"https://hub.docker.com/_/microsoft-windows-servercore\" rel=\"nofollow\">mcr.microsoft.com/windows/servercore</a> base image, thus maximising application compatibility whilst maintaining the minimum possible image size.</p>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#requirements-and-installation\" rel=\"nofollow\">Requirements and installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#Legal\" rel=\"nofollow\">Legal</a></li>\n</ul>\n<h2>Requirements and installation</h2>\n<p>The <code>dll-diagnostics</code> Python package requires the following:</p>\n<ul>\n<li>Python 3.5 or newer</li>\n<li>Windows Server 2016 or newer, or Windows 10 version 1607 or newer</li>\n<li><a href=\"https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads\" rel=\"nofollow\">Microsoft Visual C++ Redistributable for Visual Studio 2015-2019</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools\" rel=\"nofollow\">Debugging Tools for Windows 10 (WinDbg)</a> (only needed for running the <code>dlldiag trace</code> command)</li>\n</ul>\n<p>You can install the package by running the following command:</p>\n<pre><code>pip install dll-diagnostics\n</code></pre>\n<p>If you don't need the package on your host system then you can <a href=\"https://hub.docker.com/r/adamrehn/dll-diagnostics\" rel=\"nofollow\">download a prebuilt container image from Docker Hub</a> to start using the <code>dlldiag</code> command inside a Windows container.</p>\n<h2>Usage</h2>\n<p>The <code>dlldiag</code> command-line tool provides the following subcommands:</p>\n<ul>\n<li>\n<p><code>dlldiag deps</code>: this subcommand lists the direct dependencies for a module (DLL/EXE) and checks if each one can be loaded. <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/linker-support-for-delay-loaded-dlls\" rel=\"nofollow\">Delay-loaded dependencies</a> are also listed, but indirect dependencies (i.e. dependencies of dependencies) are not.</p>\n</li>\n<li>\n<p><code>dlldiag docker</code> this subcommand generates a Dockerfile suitable for using the <code>dlldiag</code> command inside a Windows container, allowing the user to optionally specify the base image to be used in the Dockerfile's <code>FROM</code> clause. This is handy when you want to extend an existing image of your choice, rather than simply extending the Windows Server Core image as the <a href=\"https://hub.docker.com/r/adamrehn/dll-diagnostics\" rel=\"nofollow\">prebuilt images from Docker Hub</a> do.</p>\n</li>\n<li>\n<p><code>dlldiag trace</code>: this subcommand uses the Windows debugger to trace a <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibraryw\" rel=\"nofollow\">LoadLibrary()</a> call for a module (DLL/EXE) and provide detailed reports of the results. The trace makes use of the Windows kernel <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/show-loader-snaps\" rel=\"nofollow\">loader snaps</a> feature to obtain fine-grained information, as discussed in <a href=\"https://blogs.msdn.microsoft.com/junfeng/2006/11/20/debugging-loadlibrary-failures/\" rel=\"nofollow\">Junfeng Zhang's blog post \"Debugging LoadLibrary Failures\"</a>. The trace captures information about both indirect dependencies and delay-loaded dependencies.</p>\n</li>\n</ul>\n<h2>Legal</h2>\n<p>Copyright \u00a9 2019, Adam Rehn. Licensed under the MIT License, see the file <a href=\"https://github.com/adamrehn/dll-diagnostics/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> for details.</p>\n\n          </div>"}, "last_serial": 6198987, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "58fcdeceae6af1f95f4417163917a579", "sha256": "b29d89c6a488f863a5e967e538b357b1e5a550a07684bcf581c6fed54fd9b9cc"}, "downloads": -1, "filename": "dll_diagnostics-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "58fcdeceae6af1f95f4417163917a579", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28376, "upload_time": "2019-11-16T13:15:29", "upload_time_iso_8601": "2019-11-16T13:15:29.503085Z", "url": "https://files.pythonhosted.org/packages/a7/ca/e7d04b105c9eb7afc315c72641ba01d2fe0fa788abef428b510ec541f28a/dll_diagnostics-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "31e142b75395a8a36e5c896c84743e7c", "sha256": "9c0f055b327efc17126ee89a71c355e6ce91aab4b739506e9443dcc68f16a36c"}, "downloads": -1, "filename": "dll_diagnostics-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "31e142b75395a8a36e5c896c84743e7c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29738, "upload_time": "2019-11-17T05:00:09", "upload_time_iso_8601": "2019-11-17T05:00:09.401195Z", "url": "https://files.pythonhosted.org/packages/0b/4e/6d9ce05b00d614540892beaab43da42be6c09725022bd879a3bd80effd8b/dll_diagnostics-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4263737e0806ee1d6cc38c267475a8a9", "sha256": "e22748373b23dbf76c510d216c6186cf851341694792ccf2d3ba1cd62909b190"}, "downloads": -1, "filename": "dll_diagnostics-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4263737e0806ee1d6cc38c267475a8a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29825, "upload_time": "2019-11-26T04:00:10", "upload_time_iso_8601": "2019-11-26T04:00:10.640742Z", "url": "https://files.pythonhosted.org/packages/8c/75/bf54c9865cd76b112a40cd1a9da61c5d86b02c60d57eb40e43a43bedf7e9/dll_diagnostics-0.0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4263737e0806ee1d6cc38c267475a8a9", "sha256": "e22748373b23dbf76c510d216c6186cf851341694792ccf2d3ba1cd62909b190"}, "downloads": -1, "filename": "dll_diagnostics-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4263737e0806ee1d6cc38c267475a8a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29825, "upload_time": "2019-11-26T04:00:10", "upload_time_iso_8601": "2019-11-26T04:00:10.640742Z", "url": "https://files.pythonhosted.org/packages/8c/75/bf54c9865cd76b112a40cd1a9da61c5d86b02c60d57eb40e43a43bedf7e9/dll_diagnostics-0.0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:19 2020"}