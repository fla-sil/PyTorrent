{"info": {"author": "Annika Neidhardt, Florian Klein, Thomas Koellmer", "author_email": "thomas.koellmer@tu-ilmenau.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Multimedia :: Sound/Audio"], "description": ".. image:: https://travis-ci.org/pyBinSim/pyBinSim.svg?branch=master\n    :target: https://travis-ci.org/pyBinSim/pyBinSim\n\nPyBinSim\n========\n\nInstall\n-------\n\n::\n\n    $ conda create --name binsim python=3.5 numpy\n    $ source activate binsim\n    $ pip install pybinsim\n    \nOn linux, make sure that gcc and the development headers for libfftw and portaudio are installed, before invoking `pip install pybinsim`.\nFor ubuntu::\n\n    $ apt-get install gcc portaudio19-dev libfftw3-dev\n    \n\nRun\n---\n\nCreate ``pyBinSimSettings.txt`` file with content like this\n\n::\n\n    soundfile signals/test441kHz.wav\n    blockSize 512\n    filterSize 16384\n    filterList brirs/filter_list_kemar5.txt\n    maxChannels 2\n    samplingRate 44100\n    enableCrossfading True\n    useHeadphoneFilter False\n    loudnessFactor 0.5\n    loopSound False\n\n\nStart Binaural Simulation\n\n::\n\n    import pybinsim\n    import logging\n\n    pybinsim.logger.setLevel(logging.DEBUG)    # defaults to INFO\n    #Use logging.WARNING for printing warnings only\n\n    with pybinsim.BinSim('pyBinSimSettings.txt') as binsim:\n        binsim.stream_start()\n\nDescription\n===========\n\nBasic principle:\n----------------\n\nDepending on the number of input channels (wave-file channels) the corresponding number of virtual sound sources is created. The filter for each sound source can selected and activitated via OSC messages. The messages basically contain the number\nindex of the source for which the filter should be switched and an identifier string to address the correct filter. The correspondence between parameter value and filter is determined by a filter list which can be adjusted individually for the specific use case.\n    \nConfig parameter description:\n-----------------------------\n\nsoundfile: \n    Defines \\*.wav file which is played back at startup. Sound file can contain up to maxChannels audio channels. Also accepts multiple files separated by '#'; Example: 'soundfile signals/sound1.wav#signals/sound2.wav\nblockSize: \n    Number of samples which are processed per block. Low values reduce delay but increase cpu load.\nfilterSize: \n    Defines filter size of the filters loaded with the filter list. Filter size should be a mutltiple of blockSize.\nmaxChannels: \n    Maximum number of sound sources/audio channels which can be controlled during runtime. The value for maxChannels must match or exceed the number of channels of soundFile(s).\nsamplingRate: \n    Sample rate for filters and soundfiles. Caution: No automatic sample rate conversion.\nenableCrossfading: \n    Enable cross fade between audio blocks. Set 'False' or 'True'.\nuseHeadphoneFilter: \n    Enables headhpone equalization. The filterset should contain a filter with the identifier HPFILTER. Set 'False' or 'True'.\nloudnessFactor: \n    Factor for overall output loudness. Attention: Clipping may occur\nloopSound:\n    Enables looping of sound file or sound file list. Set 'False' or 'True'.\n\n\nOSC Messages and filter lists:\n------------------------------\n\nExample line from filter list:\n165 2 0 0 0 0 brirs/kemar5/kemar_0_165.wav\n\nTo activate this filter for the third channel (counting starts at zero) for your wav file you have to send the following message to the pc where pyBinSim runs (port 10000):\n\n::\n\n    /pyBinSim 2 165 2 0 0 0 0\n        \nWhen you want to play another sound file you send:\n\n::\n\n    /pyBinSimFile folder/file_new.wav\n\nOr a sound file list\n\n::\n\n    /pyBinSimFile folder/file_1.wav#folder/file_2.wav\n\nThe audiofile has to be located on the pc where pyBinSim runs. Files are not transmitted over network.\n\n\nDemos\n-----\n\nCheck the https://github.com/pyBinSim/AppExamples repository for ready-to-use demos.\n\n\n\n\nReference:\n----------\n\nPlease cite our work:\n\nNeidhardt, A.; Klein, F.; Knoop, N. and K\u00f6llmer, T., \"Flexible Python tool for dynamic binaural synthesis applications\", 142nd AES Convention, Berlin, 2017.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyBinSim/pyBinSim", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pybinsim", "package_url": "https://pypi.org/project/pybinsim/", "platform": "any", "project_url": "https://pypi.org/project/pybinsim/", "project_urls": {"Homepage": "https://github.com/pyBinSim/pyBinSim"}, "release_url": "https://pypi.org/project/pybinsim/1.2.3/", "requires_dist": null, "requires_python": "", "summary": "Real-time dynamic binaural synthesis with head tracking.", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/pyBinSim/pyBinSim\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/pyBinSim/pyBinSim.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/169f04a90a4f7f9b00004866aab5dab2dc7be162/68747470733a2f2f7472617669732d63692e6f72672f707942696e53696d2f707942696e53696d2e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"pybinsim\">\n<h2>PyBinSim</h2>\n<div id=\"install\">\n<h3>Install</h3>\n<pre>$ conda create --name binsim python=3.5 numpy\n$ source activate binsim\n$ pip install pybinsim\n</pre>\n<p>On linux, make sure that gcc and the development headers for libfftw and portaudio are installed, before invoking <cite>pip install pybinsim</cite>.\nFor ubuntu:</p>\n<pre>$ apt-get install gcc portaudio19-dev libfftw3-dev\n</pre>\n</div>\n<div id=\"run\">\n<h3>Run</h3>\n<p>Create <tt>pyBinSimSettings.txt</tt> file with content like this</p>\n<pre>soundfile signals/test441kHz.wav\nblockSize 512\nfilterSize 16384\nfilterList brirs/filter_list_kemar5.txt\nmaxChannels 2\nsamplingRate 44100\nenableCrossfading True\nuseHeadphoneFilter False\nloudnessFactor 0.5\nloopSound False\n</pre>\n<p>Start Binaural Simulation</p>\n<pre>import pybinsim\nimport logging\n\npybinsim.logger.setLevel(logging.DEBUG)    # defaults to INFO\n#Use logging.WARNING for printing warnings only\n\nwith pybinsim.BinSim('pyBinSimSettings.txt') as binsim:\n    binsim.stream_start()\n</pre>\n</div>\n</div>\n<div id=\"description\">\n<h2>Description</h2>\n<div id=\"basic-principle\">\n<h3>Basic principle:</h3>\n<p>Depending on the number of input channels (wave-file channels) the corresponding number of virtual sound sources is created. The filter for each sound source can selected and activitated via OSC messages. The messages basically contain the number\nindex of the source for which the filter should be switched and an identifier string to address the correct filter. The correspondence between parameter value and filter is determined by a filter list which can be adjusted individually for the specific use case.</p>\n</div>\n<div id=\"config-parameter-description\">\n<h3>Config parameter description:</h3>\n<dl>\n<dt>soundfile:</dt>\n<dd>Defines *.wav file which is played back at startup. Sound file can contain up to maxChannels audio channels. Also accepts multiple files separated by \u2018#\u2019; Example: \u2018soundfile signals/sound1.wav#signals/sound2.wav</dd>\n<dt>blockSize:</dt>\n<dd>Number of samples which are processed per block. Low values reduce delay but increase cpu load.</dd>\n<dt>filterSize:</dt>\n<dd>Defines filter size of the filters loaded with the filter list. Filter size should be a mutltiple of blockSize.</dd>\n<dt>maxChannels:</dt>\n<dd>Maximum number of sound sources/audio channels which can be controlled during runtime. The value for maxChannels must match or exceed the number of channels of soundFile(s).</dd>\n<dt>samplingRate:</dt>\n<dd>Sample rate for filters and soundfiles. Caution: No automatic sample rate conversion.</dd>\n<dt>enableCrossfading:</dt>\n<dd>Enable cross fade between audio blocks. Set \u2018False\u2019 or \u2018True\u2019.</dd>\n<dt>useHeadphoneFilter:</dt>\n<dd>Enables headhpone equalization. The filterset should contain a filter with the identifier HPFILTER. Set \u2018False\u2019 or \u2018True\u2019.</dd>\n<dt>loudnessFactor:</dt>\n<dd>Factor for overall output loudness. Attention: Clipping may occur</dd>\n<dt>loopSound:</dt>\n<dd>Enables looping of sound file or sound file list. Set \u2018False\u2019 or \u2018True\u2019.</dd>\n</dl>\n</div>\n<div id=\"osc-messages-and-filter-lists\">\n<h3>OSC Messages and filter lists:</h3>\n<p>Example line from filter list:\n165 2 0 0 0 0 brirs/kemar5/kemar_0_165.wav</p>\n<p>To activate this filter for the third channel (counting starts at zero) for your wav file you have to send the following message to the pc where pyBinSim runs (port 10000):</p>\n<pre>/pyBinSim 2 165 2 0 0 0 0\n</pre>\n<p>When you want to play another sound file you send:</p>\n<pre>/pyBinSimFile folder/file_new.wav\n</pre>\n<p>Or a sound file list</p>\n<pre>/pyBinSimFile folder/file_1.wav#folder/file_2.wav\n</pre>\n<p>The audiofile has to be located on the pc where pyBinSim runs. Files are not transmitted over network.</p>\n</div>\n<div id=\"demos\">\n<h3>Demos</h3>\n<p>Check the <a href=\"https://github.com/pyBinSim/AppExamples\" rel=\"nofollow\">https://github.com/pyBinSim/AppExamples</a> repository for ready-to-use demos.</p>\n</div>\n<div id=\"reference\">\n<h3>Reference:</h3>\n<p>Please cite our work:</p>\n<p>Neidhardt, A.; Klein, F.; Knoop, N. and K\u00f6llmer, T., \u201cFlexible Python tool for dynamic binaural synthesis applications\u201d, 142nd AES Convention, Berlin, 2017.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4731145, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b7e5db2eb548a137a675a6a7d2b4eb71", "sha256": "3a0ad0b3b1b3b08ab6cb7ebf9307d821f9ceb94ffc50bf0997fbd4f8f570d306"}, "downloads": -1, "filename": "pybinsim-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b7e5db2eb548a137a675a6a7d2b4eb71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13123, "upload_time": "2017-05-12T13:52:44", "upload_time_iso_8601": "2017-05-12T13:52:44.056765Z", "url": "https://files.pythonhosted.org/packages/d2/43/504452e013bfb5c64292fc1eb60fec05e6bd4f8c41443d458647b29c69df/pybinsim-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "be603ee8f641e3f054624f4fd5db4031", "sha256": "15208595276f3f601958edd7138e21c5b65d5d2ebebdd0c582b9dfe93c1b0155"}, "downloads": -1, "filename": "pybinsim-1.0.1.tar.gz", "has_sig": false, "md5_digest": "be603ee8f641e3f054624f4fd5db4031", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15211, "upload_time": "2017-05-19T15:25:06", "upload_time_iso_8601": "2017-05-19T15:25:06.332378Z", "url": "https://files.pythonhosted.org/packages/a0/99/a9f8455d4066d856f456d870db0af8ba11fdaf26bd9792c7c5b9e7c4e141/pybinsim-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d4b87099345fde9c7e252003f66522b5", "sha256": "53723545d300cccd69f9b784ab635a4611ad518c3e5083d8d5824e29a972bfa3"}, "downloads": -1, "filename": "pybinsim-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d4b87099345fde9c7e252003f66522b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17097, "upload_time": "2017-12-11T18:45:27", "upload_time_iso_8601": "2017-12-11T18:45:27.379662Z", "url": "https://files.pythonhosted.org/packages/75/95/775881cbf853a01e786421c868e48cf6f6a440df6af97e94cce325a49378/pybinsim-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "bb847b7c1811b10d6a4078a926bb8dc5", "sha256": "0fd31643cecd85a2d74c018d97be12fb849162769facf396e7738b6e39e3286b"}, "downloads": -1, "filename": "pybinsim-1.1.1.tar.gz", "has_sig": false, "md5_digest": "bb847b7c1811b10d6a4078a926bb8dc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16575, "upload_time": "2017-12-12T15:37:32", "upload_time_iso_8601": "2017-12-12T15:37:32.898125Z", "url": "https://files.pythonhosted.org/packages/39/7b/634bbd059777b196fd6a38e5c0335add765cb339a2cef49eab6128a338b6/pybinsim-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "0b5629466d3dc09b26cf627f2ce0be64", "sha256": "9be0ee6a466bae756443d6404f55678a7eed4a741a1e97cf7689cae6c8b97b88"}, "downloads": -1, "filename": "pybinsim-1.2.0.tar.gz", "has_sig": false, "md5_digest": "0b5629466d3dc09b26cf627f2ce0be64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17060, "upload_time": "2018-01-21T18:25:58", "upload_time_iso_8601": "2018-01-21T18:25:58.560478Z", "url": "https://files.pythonhosted.org/packages/e5/64/5072fcf8e755dcf10e4afefa484e1bafeef395736ecdb869d17687c77efb/pybinsim-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "7ec788bdb97e4cd0a4d66782ed87afaf", "sha256": "ba43ce6e192411a2e0e781883115ff9335e40697f48eabc5d9eb1e5582ac8fb6"}, "downloads": -1, "filename": "pybinsim-1.2.1.tar.gz", "has_sig": false, "md5_digest": "7ec788bdb97e4cd0a4d66782ed87afaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17191, "upload_time": "2018-01-23T18:04:18", "upload_time_iso_8601": "2018-01-23T18:04:18.136002Z", "url": "https://files.pythonhosted.org/packages/c3/56/9cfc09bb848cbc5880dceed7473623d8eb2af5f4847d1e304bea5950c1ba/pybinsim-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "24d99b19e1ee3928b30faeb182a253ce", "sha256": "0c6e6bd4999c35d01556fe74be61d96e6b6b80766333a24c0b808e6a94f8adb3"}, "downloads": -1, "filename": "pybinsim-1.2.2.tar.gz", "has_sig": false, "md5_digest": "24d99b19e1ee3928b30faeb182a253ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17172, "upload_time": "2018-11-29T18:38:44", "upload_time_iso_8601": "2018-11-29T18:38:44.983262Z", "url": "https://files.pythonhosted.org/packages/6e/1d/b2c2e68cee77c2b063b57eff85b32e3bc5947e4c79d4345d84b6049a6fd3/pybinsim-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "b959bd9a4b174f422dd9b6816b8a9b99", "sha256": "4fd96510a3a27886240abf23b28b976d1cad8c2448200e84da5aa3b5880728f8"}, "downloads": -1, "filename": "pybinsim-1.2.3.tar.gz", "has_sig": false, "md5_digest": "b959bd9a4b174f422dd9b6816b8a9b99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17170, "upload_time": "2019-01-23T12:18:27", "upload_time_iso_8601": "2019-01-23T12:18:27.733839Z", "url": "https://files.pythonhosted.org/packages/1b/2c/66e4d4b0f6de9cb436d6af23f82ab3b1ac2ee1dfe80481f6ad294b56218c/pybinsim-1.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b959bd9a4b174f422dd9b6816b8a9b99", "sha256": "4fd96510a3a27886240abf23b28b976d1cad8c2448200e84da5aa3b5880728f8"}, "downloads": -1, "filename": "pybinsim-1.2.3.tar.gz", "has_sig": false, "md5_digest": "b959bd9a4b174f422dd9b6816b8a9b99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17170, "upload_time": "2019-01-23T12:18:27", "upload_time_iso_8601": "2019-01-23T12:18:27.733839Z", "url": "https://files.pythonhosted.org/packages/1b/2c/66e4d4b0f6de9cb436d6af23f82ab3b1ac2ee1dfe80481f6ad294b56218c/pybinsim-1.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:14 2020"}