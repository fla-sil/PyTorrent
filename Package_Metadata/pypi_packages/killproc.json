{"info": {"author": "Jeff Fischer", "author_email": "jeffrey.fischer@genforma.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX", "Topic :: System :: Systems Administration"], "description": "=========\nkillproc\n=========\n\nIntroduction\n============\n*killproc* is a command-line utility to terminate or killl Unix processes by name. The standard Unix\n*kill* command identifies processes by process id, rather than by process name. For example, to terminate instances of the django-admin.py script, one might use the following sequence::\n\n  $  ps -ef | grep django-admin.py | grep -v grep\n  501 20060     1   0   0:00.11 ttys001    0:00.38 python django-admin.py runserver 0.0.0.0:8002\n  501 20063 20060   0   0:00.35 ttys001    0:01.07 python django-admin.py runserver 0.0.0.0:8002\n  $ kill -TERM 20060 20063\n  $ ps -ef | grep django-admin.py | grep -v grep\n\nRunning the extra *ps* command and picking out process ids from its output can get rather\ntedious.\n\n*killproc* automates this sequence: you provide part of a process name and it executes *ps*, filtering\nthe results by matching the process name fragment with the CMD column of the *ps* output. For each\nmatch, the user is prompted whether they wish to terminate the process (the prompting can be turned\noff via a command line option). Accomplishing the above task with *killproc* might look as follows::\n\n  killproc django-admin.py\n  python django-admin.py runserver 0.0.0.0:8002\n  Kill process 20106? [y] y\n  Sending signal SIGTERM to process 20106\n  python django-admin.py runserver 0.0.0.0:8002\n  Kill process 20109? [y] y\n  Sending signal SIGTERM to process 20109\n  Sent signal SIGTERM to 2 processes\n\n\nSupported Platforms\n===================\n*killproc* has been tested on Mac OSX and Ubuntu Linux. It is expected to work on most Linux and BSD variants.\n\n\nInstallation\n============\n*killproc* is written in Python and packaged using `setuptools <http://pypi.python.org/pypi/setuptools>`_. It has been registered\non `PyPi <http://pipi.python.org/pypi>`_ under *killproc*. Thus, if you have Python and setuptools installed on your machine,\nyou can run install it via easy_install::\n\n  easy_install killproc\n\nor pip::\n\n  pip killproc\n\nEither command will place the Python package in your Python environment and create the *killproc* script in your Python's binary\ndirectory (thus making it available in your PATH).\n\nThe file killproc.py can function as a standalone command line utility. Thus, as an alternative installation approach, you can grab the\nkillproc.py file out of the source distribution, place it in a directory on your executable path, rename it to killproc, and add execute\npermissions.\n\n\nUsage\n=====\nThe command line format for killproc is::\n\n  killproc [options] process_name\n\nThe available options are::\n\n   -h, --help            show help message and exit\n   -k, --with-extreme-prejudice\n                          If specified, use SIGKILL (default is SIGTERM)\n   -s SIGNAL_NO, --signal=SIGNAL_NO\n                          Use the specified signal. Defaults to 15 (SIGTERM)\n   -n, --non-interactive\n                          If specified, don't ask user for confirmation\n\n\nCaveats, Limitations and Future Enhancements\n============================================\nMatching processes are not filtered by user. If the processes of other users match the process name fragment, the *killproc*\nuser will be prompted for those users as well, and the termination of those processes will fail. As a future enhancement,\n*killproc* should return only matching processes of the current user by default, with a command line option to return\nmatches for all users (useful when running as root or sudo).\n\nIt would be nice to interpret the process name fragment as a regular expression to be matched against running commands.\nHowever, this should not be the default behavior.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jfischer/killproc", "keywords": null, "license": "Apache V2.0", "maintainer": null, "maintainer_email": null, "name": "killproc", "package_url": "https://pypi.org/project/killproc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/killproc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jfischer/killproc"}, "release_url": "https://pypi.org/project/killproc/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Kill unix processes by name", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p><em>killproc</em> is a command-line utility to terminate or killl Unix processes by name. The standard Unix\n<em>kill</em> command identifies processes by process id, rather than by process name. For example, to terminate instances of the django-admin.py script, one might use the following sequence:</p>\n<pre>$  ps -ef | grep django-admin.py | grep -v grep\n501 20060     1   0   0:00.11 ttys001    0:00.38 python django-admin.py runserver 0.0.0.0:8002\n501 20063 20060   0   0:00.35 ttys001    0:01.07 python django-admin.py runserver 0.0.0.0:8002\n$ kill -TERM 20060 20063\n$ ps -ef | grep django-admin.py | grep -v grep\n</pre>\n<p>Running the extra <em>ps</em> command and picking out process ids from its output can get rather\ntedious.</p>\n<p><em>killproc</em> automates this sequence: you provide part of a process name and it executes <em>ps</em>, filtering\nthe results by matching the process name fragment with the CMD column of the <em>ps</em> output. For each\nmatch, the user is prompted whether they wish to terminate the process (the prompting can be turned\noff via a command line option). Accomplishing the above task with <em>killproc</em> might look as follows:</p>\n<pre>killproc django-admin.py\npython django-admin.py runserver 0.0.0.0:8002\nKill process 20106? [y] y\nSending signal SIGTERM to process 20106\npython django-admin.py runserver 0.0.0.0:8002\nKill process 20109? [y] y\nSending signal SIGTERM to process 20109\nSent signal SIGTERM to 2 processes\n</pre>\n</div>\n<div id=\"supported-platforms\">\n<h2>Supported Platforms</h2>\n<p><em>killproc</em> has been tested on Mac OSX and Ubuntu Linux. It is expected to work on most Linux and BSD variants.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><em>killproc</em> is written in Python and packaged using <a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">setuptools</a>. It has been registered\non <a href=\"http://pipi.python.org/pypi\" rel=\"nofollow\">PyPi</a> under <em>killproc</em>. Thus, if you have Python and setuptools installed on your machine,\nyou can run install it via easy_install:</p>\n<pre>easy_install killproc\n</pre>\n<p>or pip:</p>\n<pre>pip killproc\n</pre>\n<p>Either command will place the Python package in your Python environment and create the <em>killproc</em> script in your Python\u2019s binary\ndirectory (thus making it available in your PATH).</p>\n<p>The file killproc.py can function as a standalone command line utility. Thus, as an alternative installation approach, you can grab the\nkillproc.py file out of the source distribution, place it in a directory on your executable path, rename it to killproc, and add execute\npermissions.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The command line format for killproc is:</p>\n<pre>killproc [options] process_name\n</pre>\n<p>The available options are:</p>\n<pre>-h, --help            show help message and exit\n-k, --with-extreme-prejudice\n                       If specified, use SIGKILL (default is SIGTERM)\n-s SIGNAL_NO, --signal=SIGNAL_NO\n                       Use the specified signal. Defaults to 15 (SIGTERM)\n-n, --non-interactive\n                       If specified, don't ask user for confirmation\n</pre>\n</div>\n<div id=\"caveats-limitations-and-future-enhancements\">\n<h2>Caveats, Limitations and Future Enhancements</h2>\n<p>Matching processes are not filtered by user. If the processes of other users match the process name fragment, the <em>killproc</em>\nuser will be prompted for those users as well, and the termination of those processes will fail. As a future enhancement,\n<em>killproc</em> should return only matching processes of the current user by default, with a command line option to return\nmatches for all users (useful when running as root or sudo).</p>\n<p>It would be nice to interpret the process name fragment as a regular expression to be matched against running commands.\nHowever, this should not be the default behavior.</p>\n</div>\n\n          </div>"}, "last_serial": 793947, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "7c380d2d107a2e0f2df068086277fa4c", "sha256": "b7d4310855d2c5fb32d04280ec31e5e5eae71d0465e74330aa7e5a748e27dfba"}, "downloads": -1, "filename": "killproc-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7c380d2d107a2e0f2df068086277fa4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7961, "upload_time": "2011-04-28T07:49:20", "upload_time_iso_8601": "2011-04-28T07:49:20.320453Z", "url": "https://files.pythonhosted.org/packages/2b/ec/59e24f60418067d47f56b10a808ddf466cac9ffbca313cb6cd7a24634823/killproc-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f57d02cab405d4aba3419139bd40f8a5", "sha256": "a8a4372248d84d3ea5c36c2a5330fca18f6ed7232790537e6f217199bffd2b58"}, "downloads": -1, "filename": "killproc-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f57d02cab405d4aba3419139bd40f8a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8080, "upload_time": "2011-04-28T23:44:27", "upload_time_iso_8601": "2011-04-28T23:44:27.003051Z", "url": "https://files.pythonhosted.org/packages/40/15/229627d07d788fd94dfd4070a48647f6ad806dc8f15867fb35f53411872f/killproc-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f57d02cab405d4aba3419139bd40f8a5", "sha256": "a8a4372248d84d3ea5c36c2a5330fca18f6ed7232790537e6f217199bffd2b58"}, "downloads": -1, "filename": "killproc-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f57d02cab405d4aba3419139bd40f8a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8080, "upload_time": "2011-04-28T23:44:27", "upload_time_iso_8601": "2011-04-28T23:44:27.003051Z", "url": "https://files.pythonhosted.org/packages/40/15/229627d07d788fd94dfd4070a48647f6ad806dc8f15867fb35f53411872f/killproc-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:45 2020"}