{"info": {"author": "Ulrich Lautenschlager", "author_email": "ulrich.lautenschlager@ur.de", "bugtrack_url": null, "classifiers": [], "description": "# AllCoPol\n\nAllCoPol is collection of tools for the analysis of polyploids, that allows \nto infer ancestral allele combinations as well as corresponding subgenome phylogenies.\n\n## Installation\n\nAllCoPol is hosted at the Python Package Index (PyPI), so it can be easily \ninstalled via pip:\n\n```bash\npython3 -m pip install allcopol\n```\n\nTo run PhyloNet, Java 1.7 or later has to be installed.\n\n## Contained tools\n\n### allcopol\n\nThis is the main tool of the package implementing heuristic optimization of\nancestral allele combinations. It requires at least four arguments, \nspecifying the input files (`-A`, `-G`), the number of supplied gene trees per marker \n(`-S`), and the path to a PhyloNet jar file (`-P`), \nwhich can can be obtained from https://bioinfocs.rice.edu/phylonet (newest tested version: 3.8.0).\nBesides, the tabu tenure (`-t`) and the number of iterations (`-i`) are crucial \nparameters, which have to be tuned for proper optimization. \n\nThe allele mapping file (`-A`) is a tab-delimited text file with one line \nper accession and four columns: accession, taxon, allele IDs (comma separated), \nand ploidy level.\nThe gene tree file (`-G`) consists of newick strings supplied as one tree per line. \nFor the trees, which are assumed to be rooted, topologies are sufficient while \nedge lengths, support values, etc. will be ignored. Multiple gene trees per \nmarker can be supplied as consecutive lines in the tree file, e.g.\n\n```text\n<tree1 for marker1>\n<tree2 for marker1>\n<tree3 for marker1>\n<tree1 for marker2>\n<tree2 for marker2>\n<tree3 for marker2>\n...\n```\n\nBecause the program cannot know from the input file which trees belong to the \nsame marker, the `-S` option has to be set correctly (for the example above: `-S 3`).\n\nTo get a complete list of program options, type\n\n```bash\nallcopol --help\n```\n\n_Minimal example:_\n\nmapping.nw (input):\n\n```text\nacc1\tsp1\tA_1,A_2\t2\nacc2\tsp1\tB_1,B_2\t2\nacc3\tsp2\tC_1,C_2\t2\nacc4\tsp2\tD_1,D_2\t2\nacc5\tsp3\tE_1,E_2\t2\nacc6\tsp4\tF_1,F_2\t2\nacc7\tsp5\tG_1,G_2,H_1,H_2\t4\n```\n\ntrees.nw (input):\n\n```text\n(((E_2,(B_1,C_2)),(G_1,F_2)),((H_1,H_2),((A_2,A_1),((G_2,D_2),(F_1,((C_1,B_2),(D_1,E_1)))))));\n((((F_2,(G_2,(G_1,F_1))),(A_1,A_2)),((((C_1,C_2),B_1),B_2),(((D_2,D_1),E_1),E_2))),(H_1,H_2));\n((((G_2,((F_1,F_2),G_1)),A_1),((H_2,H_1),(D_1,E_1))),(((D_2,E_2),(C_2,(B_2,(C_1,B_1)))),A_2));\n(((B_2,(C_2,B_1)),(H_2,H_1)),((A_2,A_1),(((G_2,G_1),(F_2,F_1)),((E_1,D_1),((D_2,E_2),C_1)))));\n(((A_1,A_2),(H_2,H_1)),(((E_1,D_1),((F_1,F_2),(G_2,G_1))),(((E_2,D_2),(B_1,(C_2,B_2))),C_1)));\n```\n\ncommand:\n\n```bash\nallcopol -A mapping.txt -G trees.nw -S 1 -P PhyloNet_3.8.0.jar -t 5 -i 20\n```\n\nSetting the tabu tenure to zero and using reinitialization (-u), it is also \npossible to perform random restart hillclimbing instead of tabu search.\nWhile this avoids extensive parameter tuning, it usually requires a higher \nnumber of iterations to obtain satisfactory solutions:\n\n```bash\nallcopol -A mapping.txt -G trees.nw -S 1 -P PhyloNet_3.8.0.jar -t 0 -u 1 -i 100\n```\n\nIf runtime is limiting, the number of evaluated solutions per iteration can be \nlimited via the -s option. Note that this may be at the expense of a lower final\nsolution quality.\n\n\n### create_indfile\n\nThis script takes a number of allele mapping strings (one per line, obtained \nby multiple runs of `allcopol` based on the same\\* input files) as input and \nprints a matrix representation of the inferred allele partitions. The latter can\nbe used as input for Clumpp or `align_clusters`.\n\n\\* The used gene trees may vary, but the underlying markers and their order in \nthe tree files must be identical.\n\n_Example:_\n\nmappings.txt (input):\n\n```text\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:B_1_m0,B_2_m0,B_1_m1,B_2_m1;sp1___02:A_1_m0,A_2_m0,A_1_m1,A_2_m1\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,B_2_m0,B_1_m1,B_2_m1;sp1___02:A_2_m0,A_1_m1,A_2_m1,B_1_m0\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,A_2_m0,A_1_m1,A_2_m1;sp1___02:B_1_m0,B_2_m0,B_1_m1,B_2_m1\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,A_2_m0,A_1_m1,B_2_m1;sp1___02:B_1_m0,B_2_m0,B_1_m1,A_2_m1\n```\n\ncommand:\n\n```bash\ncreate_indfile mappings.txt sp1 > example.indfile\n```\n\nThe second argument `sp1` is the name of the polyploid taxon, whose \npseudo-diploid ancestors have been inferred.\n\nexample.indfile (output):\n\n```text\n1 1 (x) 1 : 0 1\n2 2 (x) 1 : 0 1\n3 3 (x) 1 : 0 1\n4 4 (x) 1 : 0 1\n5 5 (x) 1 : 1 0\n6 6 (x) 1 : 1 0\n7 7 (x) 1 : 1 0\n8 8 (x) 1 : 1 0\n\n1 1 (x) 1 : 1 0\n2 2 (x) 1 : 0 1\n...\n```\n\n### align_clusters\n\nThis tool can be used to match clusters (pseudo-diploids) among multiple\nreconstructions. To avoid getting stuck in a local optimum, a tabu list is \napplied, whose size can be specified via the `-t` option - unlike `allcopol`, \nthe heuristic used for this step seems to be relatively robust.\n`-n` sets the total number of optimization iterations.\n\nApplied to the matrix representation written above, the command\n\n```bash\nalign_clusters -n 50 -t 2 example.indfile\n```\n\ncreates the output file example.permutations:\n\n```text\n2\t1\n2\t1\n1\t2\n1\t2\n```\n\nand a second file containing the averaged cluster coefficients \n(example.clustering).\n\n### relabel_trees\n\nUsing the output of `align_clusters`, the species trees obtained by multiple\nruns of `allcopol` can be relabeled to mitigate label switching.\n`relabel_trees` expects three arguments, a file containing the inferred species\ntrees, the name of the analyzed polyploid taxon and a permutation file as \nwritten by `align_clusters`.\n\n_Example:_\n\nsp_trees.nw (input):\n\n```text\n(sp3,(sp1___02,(sp1___01,sp2)));\n(sp3,(sp1___02,(sp1___01,sp2)));\n(sp3,(sp1___01,(sp1___02,sp2)));\n(sp3,(sp1___01,(sp1___02,sp2)));\n```\n\nThe command\n\n```bash\nrelabel_trees sp_trees.nw sp1 example.permutations\n```\n\nyields\n\n```text\n(sp3,(sp1_P1,(sp1_P2,sp2)));\n(sp3,(sp1_P1,(sp1_P2,sp2)));\n(sp3,(sp1_P1,(sp1_P2,sp2)));\n(sp3,(sp1_P1,(sp1_P2,sp2)));\n```\n\nNow that the pseudo-diploids are labeled according to their homology, \nconventional consensus methods can be applied to the trees.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AGOberprieler/allcopol", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "allcopol", "package_url": "https://pypi.org/project/allcopol/", "platform": "", "project_url": "https://pypi.org/project/allcopol/", "project_urls": {"Homepage": "https://github.com/AGOberprieler/allcopol"}, "release_url": "https://pypi.org/project/allcopol/0.1.2/", "requires_dist": ["argparse", "biopython", "configargparse", "numpy", "scipy"], "requires_python": ">=3.5", "summary": "AllCoPol: Inferring allele co-ancestry in polyploids", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AllCoPol</h1>\n<p>AllCoPol is collection of tools for the analysis of polyploids, that allows\nto infer ancestral allele combinations as well as corresponding subgenome phylogenies.</p>\n<h2>Installation</h2>\n<p>AllCoPol is hosted at the Python Package Index (PyPI), so it can be easily\ninstalled via pip:</p>\n<pre>python3 -m pip install allcopol\n</pre>\n<p>To run PhyloNet, Java 1.7 or later has to be installed.</p>\n<h2>Contained tools</h2>\n<h3>allcopol</h3>\n<p>This is the main tool of the package implementing heuristic optimization of\nancestral allele combinations. It requires at least four arguments,\nspecifying the input files (<code>-A</code>, <code>-G</code>), the number of supplied gene trees per marker\n(<code>-S</code>), and the path to a PhyloNet jar file (<code>-P</code>),\nwhich can can be obtained from <a href=\"https://bioinfocs.rice.edu/phylonet\" rel=\"nofollow\">https://bioinfocs.rice.edu/phylonet</a> (newest tested version: 3.8.0).\nBesides, the tabu tenure (<code>-t</code>) and the number of iterations (<code>-i</code>) are crucial\nparameters, which have to be tuned for proper optimization.</p>\n<p>The allele mapping file (<code>-A</code>) is a tab-delimited text file with one line\nper accession and four columns: accession, taxon, allele IDs (comma separated),\nand ploidy level.\nThe gene tree file (<code>-G</code>) consists of newick strings supplied as one tree per line.\nFor the trees, which are assumed to be rooted, topologies are sufficient while\nedge lengths, support values, etc. will be ignored. Multiple gene trees per\nmarker can be supplied as consecutive lines in the tree file, e.g.</p>\n<pre>&lt;tree1 for marker1&gt;\n&lt;tree2 for marker1&gt;\n&lt;tree3 for marker1&gt;\n&lt;tree1 for marker2&gt;\n&lt;tree2 for marker2&gt;\n&lt;tree3 for marker2&gt;\n...\n</pre>\n<p>Because the program cannot know from the input file which trees belong to the\nsame marker, the <code>-S</code> option has to be set correctly (for the example above: <code>-S 3</code>).</p>\n<p>To get a complete list of program options, type</p>\n<pre>allcopol --help\n</pre>\n<p><em>Minimal example:</em></p>\n<p>mapping.nw (input):</p>\n<pre>acc1\tsp1\tA_1,A_2\t2\nacc2\tsp1\tB_1,B_2\t2\nacc3\tsp2\tC_1,C_2\t2\nacc4\tsp2\tD_1,D_2\t2\nacc5\tsp3\tE_1,E_2\t2\nacc6\tsp4\tF_1,F_2\t2\nacc7\tsp5\tG_1,G_2,H_1,H_2\t4\n</pre>\n<p>trees.nw (input):</p>\n<pre>(((E_2,(B_1,C_2)),(G_1,F_2)),((H_1,H_2),((A_2,A_1),((G_2,D_2),(F_1,((C_1,B_2),(D_1,E_1)))))));\n((((F_2,(G_2,(G_1,F_1))),(A_1,A_2)),((((C_1,C_2),B_1),B_2),(((D_2,D_1),E_1),E_2))),(H_1,H_2));\n((((G_2,((F_1,F_2),G_1)),A_1),((H_2,H_1),(D_1,E_1))),(((D_2,E_2),(C_2,(B_2,(C_1,B_1)))),A_2));\n(((B_2,(C_2,B_1)),(H_2,H_1)),((A_2,A_1),(((G_2,G_1),(F_2,F_1)),((E_1,D_1),((D_2,E_2),C_1)))));\n(((A_1,A_2),(H_2,H_1)),(((E_1,D_1),((F_1,F_2),(G_2,G_1))),(((E_2,D_2),(B_1,(C_2,B_2))),C_1)));\n</pre>\n<p>command:</p>\n<pre>allcopol -A mapping.txt -G trees.nw -S <span class=\"m\">1</span> -P PhyloNet_3.8.0.jar -t <span class=\"m\">5</span> -i <span class=\"m\">20</span>\n</pre>\n<p>Setting the tabu tenure to zero and using reinitialization (-u), it is also\npossible to perform random restart hillclimbing instead of tabu search.\nWhile this avoids extensive parameter tuning, it usually requires a higher\nnumber of iterations to obtain satisfactory solutions:</p>\n<pre>allcopol -A mapping.txt -G trees.nw -S <span class=\"m\">1</span> -P PhyloNet_3.8.0.jar -t <span class=\"m\">0</span> -u <span class=\"m\">1</span> -i <span class=\"m\">100</span>\n</pre>\n<p>If runtime is limiting, the number of evaluated solutions per iteration can be\nlimited via the -s option. Note that this may be at the expense of a lower final\nsolution quality.</p>\n<h3>create_indfile</h3>\n<p>This script takes a number of allele mapping strings (one per line, obtained\nby multiple runs of <code>allcopol</code> based on the same* input files) as input and\nprints a matrix representation of the inferred allele partitions. The latter can\nbe used as input for Clumpp or <code>align_clusters</code>.</p>\n<p>* The used gene trees may vary, but the underlying markers and their order in\nthe tree files must be identical.</p>\n<p><em>Example:</em></p>\n<p>mappings.txt (input):</p>\n<pre>sp2:C_1,C_2;sp3:D_1,D_2;sp1___01:B_1_m0,B_2_m0,B_1_m1,B_2_m1;sp1___02:A_1_m0,A_2_m0,A_1_m1,A_2_m1\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,B_2_m0,B_1_m1,B_2_m1;sp1___02:A_2_m0,A_1_m1,A_2_m1,B_1_m0\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,A_2_m0,A_1_m1,A_2_m1;sp1___02:B_1_m0,B_2_m0,B_1_m1,B_2_m1\nsp2:C_1,C_2;sp3:D_1,D_2;sp1___01:A_1_m0,A_2_m0,A_1_m1,B_2_m1;sp1___02:B_1_m0,B_2_m0,B_1_m1,A_2_m1\n</pre>\n<p>command:</p>\n<pre>create_indfile mappings.txt sp1 &gt; example.indfile\n</pre>\n<p>The second argument <code>sp1</code> is the name of the polyploid taxon, whose\npseudo-diploid ancestors have been inferred.</p>\n<p>example.indfile (output):</p>\n<pre>1 1 (x) 1 : 0 1\n2 2 (x) 1 : 0 1\n3 3 (x) 1 : 0 1\n4 4 (x) 1 : 0 1\n5 5 (x) 1 : 1 0\n6 6 (x) 1 : 1 0\n7 7 (x) 1 : 1 0\n8 8 (x) 1 : 1 0\n\n1 1 (x) 1 : 1 0\n2 2 (x) 1 : 0 1\n...\n</pre>\n<h3>align_clusters</h3>\n<p>This tool can be used to match clusters (pseudo-diploids) among multiple\nreconstructions. To avoid getting stuck in a local optimum, a tabu list is\napplied, whose size can be specified via the <code>-t</code> option - unlike <code>allcopol</code>,\nthe heuristic used for this step seems to be relatively robust.\n<code>-n</code> sets the total number of optimization iterations.</p>\n<p>Applied to the matrix representation written above, the command</p>\n<pre>align_clusters -n <span class=\"m\">50</span> -t <span class=\"m\">2</span> example.indfile\n</pre>\n<p>creates the output file example.permutations:</p>\n<pre>2\t1\n2\t1\n1\t2\n1\t2\n</pre>\n<p>and a second file containing the averaged cluster coefficients\n(example.clustering).</p>\n<h3>relabel_trees</h3>\n<p>Using the output of <code>align_clusters</code>, the species trees obtained by multiple\nruns of <code>allcopol</code> can be relabeled to mitigate label switching.\n<code>relabel_trees</code> expects three arguments, a file containing the inferred species\ntrees, the name of the analyzed polyploid taxon and a permutation file as\nwritten by <code>align_clusters</code>.</p>\n<p><em>Example:</em></p>\n<p>sp_trees.nw (input):</p>\n<pre>(sp3,(sp1___02,(sp1___01,sp2)));\n(sp3,(sp1___02,(sp1___01,sp2)));\n(sp3,(sp1___01,(sp1___02,sp2)));\n(sp3,(sp1___01,(sp1___02,sp2)));\n</pre>\n<p>The command</p>\n<pre>relabel_trees sp_trees.nw sp1 example.permutations\n</pre>\n<p>yields</p>\n<pre>(sp3,(sp1_P1,(sp1_P2,sp2)));\n(sp3,(sp1_P1,(sp1_P2,sp2)));\n(sp3,(sp1_P1,(sp1_P2,sp2)));\n(sp3,(sp1_P1,(sp1_P2,sp2)));\n</pre>\n<p>Now that the pseudo-diploids are labeled according to their homology,\nconventional consensus methods can be applied to the trees.</p>\n\n          </div>"}, "last_serial": 6311728, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a9ff129c3ba0cb15f5c9d44eabc79905", "sha256": "874bd60e9174c17c68d874ae33d9ed7aaa4ac0bb93cdbd2a4f1f517881b1d3a1"}, "downloads": -1, "filename": "allcopol-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a9ff129c3ba0cb15f5c9d44eabc79905", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19147, "upload_time": "2019-12-06T18:38:44", "upload_time_iso_8601": "2019-12-06T18:38:44.751711Z", "url": "https://files.pythonhosted.org/packages/65/3a/69ada8386ffdcd51439ef5ec28fc77bb79b327a390511196529d620b78c5/allcopol-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa76b347cad8cf64e8c37373683a7840", "sha256": "c53ed6d4acbb98cf4c083609c776d6697d629cfa8845291c7479a4e2410595ce"}, "downloads": -1, "filename": "allcopol-0.1.tar.gz", "has_sig": false, "md5_digest": "aa76b347cad8cf64e8c37373683a7840", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16963, "upload_time": "2019-12-06T18:38:47", "upload_time_iso_8601": "2019-12-06T18:38:47.098454Z", "url": "https://files.pythonhosted.org/packages/99/d0/9be38f3151eaa2ef8e10c38796d71b0c0813c5cb94dc2ff1187435f646a7/allcopol-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "897883fc13d5522bfb863b36a678ad8a", "sha256": "f76cff4eb0a9aadfbcc242355112421f01aadbf0237b1043ecd3f290ab33696a"}, "downloads": -1, "filename": "allcopol-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "897883fc13d5522bfb863b36a678ad8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19703, "upload_time": "2019-12-10T19:42:08", "upload_time_iso_8601": "2019-12-10T19:42:08.856133Z", "url": "https://files.pythonhosted.org/packages/ff/8c/a97b03a92a43bff87c939a4905aeb53e02a60e2c13890e764830fd790bb5/allcopol-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b426ecc64bedec83cdbf4623dd156cf", "sha256": "640861ac28021bb55ae094449190c0aada6ee231a60cf921caa4e4ff401e3ba5"}, "downloads": -1, "filename": "allcopol-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7b426ecc64bedec83cdbf4623dd156cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15713, "upload_time": "2019-12-10T19:42:10", "upload_time_iso_8601": "2019-12-10T19:42:10.574231Z", "url": "https://files.pythonhosted.org/packages/1e/47/3a56ff5cdab656bea96836c529258a63e23273fa456492b661277fd249d8/allcopol-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "cbcf5ebfe318ed1c67b0a1f8da66a534", "sha256": "e62fe253577ac5e12d860fbe683d0c9f54337c2d24e9f757203c978efe18607a"}, "downloads": -1, "filename": "allcopol-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cbcf5ebfe318ed1c67b0a1f8da66a534", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19671, "upload_time": "2019-12-16T14:56:12", "upload_time_iso_8601": "2019-12-16T14:56:12.436479Z", "url": "https://files.pythonhosted.org/packages/be/20/7a496268dec5ccdb7c2dcb99b1def78f686a13e9da3f466127eab828d3bb/allcopol-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d49582926dac7f7a0127b83cd07646a", "sha256": "59028e33e69dabcd1c0f75edd93baccf65554ea4b036b6a39b6b35effd90ac54"}, "downloads": -1, "filename": "allcopol-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8d49582926dac7f7a0127b83cd07646a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15711, "upload_time": "2019-12-16T14:56:14", "upload_time_iso_8601": "2019-12-16T14:56:14.012569Z", "url": "https://files.pythonhosted.org/packages/32/8e/ccefd511909b1a728e4f63d815b1a85706a53c4a1e28a6ea05326992744a/allcopol-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cbcf5ebfe318ed1c67b0a1f8da66a534", "sha256": "e62fe253577ac5e12d860fbe683d0c9f54337c2d24e9f757203c978efe18607a"}, "downloads": -1, "filename": "allcopol-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cbcf5ebfe318ed1c67b0a1f8da66a534", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19671, "upload_time": "2019-12-16T14:56:12", "upload_time_iso_8601": "2019-12-16T14:56:12.436479Z", "url": "https://files.pythonhosted.org/packages/be/20/7a496268dec5ccdb7c2dcb99b1def78f686a13e9da3f466127eab828d3bb/allcopol-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d49582926dac7f7a0127b83cd07646a", "sha256": "59028e33e69dabcd1c0f75edd93baccf65554ea4b036b6a39b6b35effd90ac54"}, "downloads": -1, "filename": "allcopol-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8d49582926dac7f7a0127b83cd07646a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15711, "upload_time": "2019-12-16T14:56:14", "upload_time_iso_8601": "2019-12-16T14:56:14.012569Z", "url": "https://files.pythonhosted.org/packages/32/8e/ccefd511909b1a728e4f63d815b1a85706a53c4a1e28a6ea05326992744a/allcopol-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:33 2020"}