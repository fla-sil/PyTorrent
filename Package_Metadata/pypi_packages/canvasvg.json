{"info": {"author": "Wojciech Mu\u0142a", "author_email": "wojciech_mula@poczta.onet.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Multimedia :: Graphics :: Capture :: Screen Capture", "Topic :: Multimedia :: Graphics :: Graphics Conversion", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Tkinter canvas to SVG exporter\n========================================================================\n\nThis module provides function ``convert`` that convert all or selected\nitems placed on given canvas object.\n\nSupported items:\n\n* lines\n* lines with arrows\n* polygons\n* smoothed lines and polygons\n* ovals (i.e. circle & ellipse)\n* arcs (all kind, i.e. ARC, CHORD, PIESLICE)\n* rectangles\n* text (**unwrapped** only i.e. attribute ``width = 0``)\n\nUnsupported items:\n\n* images\n* bitmaps\n* windows\n\nStipples are not applied.\n\n\nPublic functions\n------------------------------------------------------------------------\n\n``convert(document, canvas, items=None, tounicode=None)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``document`` --- SVG document, object that support DOM, i.e. provides\n  ``createElement`` method etc. (function ``SVGdocument`` can be used\n  to get such object)\n* ``canvas`` --- Tkinter.Canvas object\n* ``items`` --- list of objects to convert; if ``None`` then all items\n  are converted\n* ``tounicode`` --- user function that should return proper unicode\n  string if Tkinter app use other then ASCII encoding. By default\n  ``tounicode = lambda text: unicode(text).encode('utf-8')``.\n  Thanks to **Jan B\u00f6cker** who provided solution.\n\n\n``SVGdocument``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTakes no arguments, returns SVG document;  class provided in standard\n``xml.dom.minidom`` module is used.\n\n\n``saveall(filename, canvas, items=None, margin=10, tounicode=None)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHelper function: saves whole canvas or selected items in SVG file,\nsets proper  dimensions, and viewport;  additional ``margin`` can\nbe set.\n\n\n``warnings(mode)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nModule might emit warnings. By default it use custom function which\nprints message on the standard error. You can change this by calling\nmethod ``canvasvg.warnings(mode)`` with three possible values:\n\n* ``canvasvg.PYTHON`` --- use ``warn`` from the standard module\n  ``warnings``;\n* ``canvasvg.MODULE`` --- use the custom function;\n* ``canvasvg.NONE``   --- do not print any message.\n\n\n``configure(*flags)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nModule might use either ``<path>`` or ``<line>`` tag for segment\nrepresentation. By default it uses ``<line>``. The behaviour could be changed\nglobally by calling ``canvasvg.configure(*flags)`` with one of consequent\nvalues:\n\n* ``canvasvg.SEGMENT_TO_LINE`` --- use ``<line>`` tag;\n* ``canvasvg.SEGMENT_TO_PATH`` --- use ``<path>`` tag.\n\n\nChangelog\n------------------------------------------------------------------------\n\nBelow are major changes made before moving on Github__.\n\n* 2013-07-23 --- support for \"raw\" smoothed lines (contributed by Marc Culler, author of plink__)\n* 2011-02-20 --- python3 compatibility\n* 2011-01-25 --- update ``saveall``: use list of items to export\n* 2008-11-08 --- added ``tounicode``, optional argument\n* 2006-12-01 --- initial release\n\n__ https://github.com/WojciechMula/canvas2svg\n__ http://www.math.uic.edu/t3m/plink/doc/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/WojciechMula/canvas2svg", "keywords": "tkinter,tk,canvas,svg,screenshot", "license": "BSD (3 clauses)", "maintainer": null, "maintainer_email": null, "name": "canvasvg", "package_url": "https://pypi.org/project/canvasvg/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/canvasvg/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/WojciechMula/canvas2svg"}, "release_url": "https://pypi.org/project/canvasvg/1.0.5/", "requires_dist": null, "requires_python": null, "summary": "Save Tkinter Canvas in SVG file", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This module provides function <tt>convert</tt> that convert all or selected\nitems placed on given canvas object.</p>\n<p>Supported items:</p>\n<ul>\n<li>lines</li>\n<li>lines with arrows</li>\n<li>polygons</li>\n<li>smoothed lines and polygons</li>\n<li>ovals (i.e. circle &amp; ellipse)</li>\n<li>arcs (all kind, i.e. ARC, CHORD, PIESLICE)</li>\n<li>rectangles</li>\n<li>text (<strong>unwrapped</strong> only i.e. attribute <tt>width = 0</tt>)</li>\n</ul>\n<p>Unsupported items:</p>\n<ul>\n<li>images</li>\n<li>bitmaps</li>\n<li>windows</li>\n</ul>\n<p>Stipples are not applied.</p>\n<div id=\"public-functions\">\n<h2>Public functions</h2>\n<div id=\"convert-document-canvas-items-none-tounicode-none\">\n<h3><tt>convert(document, canvas, items=None, tounicode=None)</tt></h3>\n<ul>\n<li><tt>document</tt> \u2014 SVG document, object that support DOM, i.e. provides\n<tt>createElement</tt> method etc. (function <tt>SVGdocument</tt> can be used\nto get such object)</li>\n<li><tt>canvas</tt> \u2014 Tkinter.Canvas object</li>\n<li><tt>items</tt> \u2014 list of objects to convert; if <tt>None</tt> then all items\nare converted</li>\n<li><tt>tounicode</tt> \u2014 user function that should return proper unicode\nstring if Tkinter app use other then ASCII encoding. By default\n<tt>tounicode = lambda text: <span class=\"pre\">unicode(text).encode('utf-8')</span></tt>.\nThanks to <strong>Jan B\u00f6cker</strong> who provided solution.</li>\n</ul>\n</div>\n<div id=\"svgdocument\">\n<h3><tt>SVGdocument</tt></h3>\n<p>Takes no arguments, returns SVG document;  class provided in standard\n<tt>xml.dom.minidom</tt> module is used.</p>\n</div>\n<div id=\"saveall-filename-canvas-items-none-margin-10-tounicode-none\">\n<h3><tt>saveall(filename, canvas, items=None, margin=10, tounicode=None)</tt></h3>\n<p>Helper function: saves whole canvas or selected items in SVG file,\nsets proper  dimensions, and viewport;  additional <tt>margin</tt> can\nbe set.</p>\n</div>\n<div id=\"warnings-mode\">\n<h3><tt>warnings(mode)</tt></h3>\n<p>Module might emit warnings. By default it use custom function which\nprints message on the standard error. You can change this by calling\nmethod <tt>canvasvg.warnings(mode)</tt> with three possible values:</p>\n<ul>\n<li><tt>canvasvg.PYTHON</tt> \u2014 use <tt>warn</tt> from the standard module\n<tt>warnings</tt>;</li>\n<li><tt>canvasvg.MODULE</tt> \u2014 use the custom function;</li>\n<li><tt>canvasvg.NONE</tt>   \u2014 do not print any message.</li>\n</ul>\n</div>\n<div id=\"configure-flags\">\n<h3><tt><span class=\"pre\">configure(*flags)</span></tt></h3>\n<p>Module might use either <tt>&lt;path&gt;</tt> or <tt>&lt;line&gt;</tt> tag for segment\nrepresentation. By default it uses <tt>&lt;line&gt;</tt>. The behaviour could be changed\nglobally by calling <tt><span class=\"pre\">canvasvg.configure(*flags)</span></tt> with one of consequent\nvalues:</p>\n<ul>\n<li><tt>canvasvg.SEGMENT_TO_LINE</tt> \u2014 use <tt>&lt;line&gt;</tt> tag;</li>\n<li><tt>canvasvg.SEGMENT_TO_PATH</tt> \u2014 use <tt>&lt;path&gt;</tt> tag.</li>\n</ul>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>Below are major changes made before moving on <a href=\"https://github.com/WojciechMula/canvas2svg\" rel=\"nofollow\">Github</a>.</p>\n<ul>\n<li>2013-07-23 \u2014 support for \u201craw\u201d smoothed lines (contributed by Marc Culler, author of <a href=\"http://www.math.uic.edu/t3m/plink/doc/\" rel=\"nofollow\">plink</a>)</li>\n<li>2011-02-20 \u2014 python3 compatibility</li>\n<li>2011-01-25 \u2014 update <tt>saveall</tt>: use list of items to export</li>\n<li>2008-11-08 \u2014 added <tt>tounicode</tt>, optional argument</li>\n<li>2006-12-01 \u2014 initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2646454, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8fe44c797a62f26776d96c981c0e35f3", "sha256": "febff94241fed86ff1e6ba61bd88edaa2afa067ede83a17d0a45cee2e519e754"}, "downloads": -1, "filename": "canvasvg-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8fe44c797a62f26776d96c981c0e35f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10091, "upload_time": "2014-11-23T09:57:08", "upload_time_iso_8601": "2014-11-23T09:57:08.393355Z", "url": "https://files.pythonhosted.org/packages/ac/c6/d14dc9ce199895f837ba0eeda6428417c2e42021f01266d1a1d42d535fd7/canvasvg-1.0.0.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "12190ecf3d2b789889d340443d2489b5", "sha256": "275b7f48dc72f61ac98d14a32ad191e4af7b5ea6105d4559ef3cf5d7e47d9a99"}, "downloads": -1, "filename": "canvasvg-1.0.3.tar.gz", "has_sig": false, "md5_digest": "12190ecf3d2b789889d340443d2489b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10958, "upload_time": "2017-01-15T19:00:14", "upload_time_iso_8601": "2017-01-15T19:00:14.706537Z", "url": "https://files.pythonhosted.org/packages/7d/0c/7d9ae025e224528d4fdc659c9ddb70be07b7172daf9ef0d6cd0bfb51ec32/canvasvg-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "a6102a562d1366376eb623abe9459f64", "sha256": "02b265050a8d2084827c9d8590285bef5899a391759ab8db8bb81b8983dfb076"}, "downloads": -1, "filename": "canvasvg-1.0.4.tar.gz", "has_sig": false, "md5_digest": "a6102a562d1366376eb623abe9459f64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11590, "upload_time": "2017-02-10T17:42:38", "upload_time_iso_8601": "2017-02-10T17:42:38.693821Z", "url": "https://files.pythonhosted.org/packages/5e/49/d11567da9f1c398a0b4880cbfad18380e0c99a16d0fa597807945876a2ec/canvasvg-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "ef6b286343e63bbf61786305ecec3f03", "sha256": "d98d5ff84a511a3bf777b5899cbc8fb780a2bfbbafb54fbb18b49ac5cf2732a8"}, "downloads": -1, "filename": "canvasvg-1.0.5.tar.gz", "has_sig": false, "md5_digest": "ef6b286343e63bbf61786305ecec3f03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11609, "upload_time": "2017-02-16T10:01:40", "upload_time_iso_8601": "2017-02-16T10:01:40.243586Z", "url": "https://files.pythonhosted.org/packages/73/9d/f5ab2a9c0784d9de7bc1c35f81813b50c557cf9f7b39dd27747abb6388d8/canvasvg-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef6b286343e63bbf61786305ecec3f03", "sha256": "d98d5ff84a511a3bf777b5899cbc8fb780a2bfbbafb54fbb18b49ac5cf2732a8"}, "downloads": -1, "filename": "canvasvg-1.0.5.tar.gz", "has_sig": false, "md5_digest": "ef6b286343e63bbf61786305ecec3f03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11609, "upload_time": "2017-02-16T10:01:40", "upload_time_iso_8601": "2017-02-16T10:01:40.243586Z", "url": "https://files.pythonhosted.org/packages/73/9d/f5ab2a9c0784d9de7bc1c35f81813b50c557cf9f7b39dd27747abb6388d8/canvasvg-1.0.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:29 2020"}