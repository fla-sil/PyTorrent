{"info": {"author": "Endurant Devs", "author_email": "info@endurantdevs.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# sanic-asyncjinja2\nJinja2 in async mode with Sanic [experimental]\n\n[![Build Status](https://img.shields.io/travis/EndurantDevs/sanic-asyncjinja2.svg?logo=travis)](https://travis-ci.org/EndurantDevs/sanic-asyncjinja2) [![Latest Version](https://img.shields.io/pypi/v/sanic-asyncjinja2.svg)](https://pypi.python.org/pypi/sanic-asyncjinja2/) [![Python Versions](https://img.shields.io/pypi/pyversions/sanic-asyncjinja2.svg)](https://github.com/EndurantDevs/sanic-asyncjinja2/blob/master/setup.py) [![Tests Coverage](https://img.shields.io/codecov/c/github/EndurantDevs/sanic-asyncjinja2/master.svg)](https://codecov.io/gh/EndurantDevs/sanic-asyncjinja2)\n\nIt is based on [sanic-jinja2](https://github.com/lixxu/sanic-jinja2). \nIt provides two decorators @template and @stream_template.\nThe main change is in using render_async and generate_async for the decorator functions.\n\n@stream_template is just and experimental way to make HTTP response via sanic.response.stream\nIt gives you ability to decrease time to the first byte on response and stream long response during the processing template with data.\n\n### Example code ###\n```python\nimport asyncio\nfrom sanic import Sanic\nfrom sanic_asyncjinja2 import SanicAsyncJinja2\n\n\napp = Sanic(__name__)\njinja = SanicAsyncJinja2()\njinja.init_app(app)\n\n\n@app.route('/', methods=[\"GET\", ])\n@jinja.template(\"hello.html\")\ndef index(request):\n    return {\"name\": \"world\"}\n\n\n@app.route('/slow_query', methods=[\"GET\", ])\n@jinja.template(\"hello.html\")\nasync def slow_handler(request):\n    async def func1():\n        await asyncio.sleep(2)\n        return \"name\"\n\n    async def func2():\n        await asyncio.sleep(2)\n        return \"world\"\n\n    async def gfunc(k, v):\n        key, value = await asyncio.gather(k, v)\n        return {key: value}\n\n    f1 = func1()\n    f2 = func2()\n    g = await gfunc(f1, f2)\n    return g\n\n\n# this is just a stupid idea\n# to win the time to the first byte on response\n# on one of our production servers\n# it is helpful with big responses\n@app.route('/simplestream', methods=[\"GET\", ])\n@jinja.stream_template(\"hello.html\")\nasync def handler2(request):\n    very_long_text = \"Very long response here...\" \n    return {\"name\": \"world\", \"text\": very_long_text}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/EndurantDevs/sanic-asyncjinja2", "keywords": "sanic-asyncjinja2 sanic jinja2 template", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sanic-asyncjinja2", "package_url": "https://pypi.org/project/sanic-asyncjinja2/", "platform": "", "project_url": "https://pypi.org/project/sanic-asyncjinja2/", "project_urls": {"Homepage": "https://github.com/EndurantDevs/sanic-asyncjinja2"}, "release_url": "https://pypi.org/project/sanic-asyncjinja2/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Sanic integration with Jinja2 in async mode [experimental]", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sanic-asyncjinja2</h1>\n<p>Jinja2 in async mode with Sanic [experimental]</p>\n<p><a href=\"https://travis-ci.org/EndurantDevs/sanic-asyncjinja2\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ae418dd9f80a3ae7c4f413ab6784cf024faafff/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f456e647572616e74446576732f73616e69632d6173796e636a696e6a61322e7376673f6c6f676f3d747261766973\"></a> <a href=\"https://pypi.python.org/pypi/sanic-asyncjinja2/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d60bf9ba34e6154c574ca00a1f4d043e813aa333/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73616e69632d6173796e636a696e6a61322e737667\"></a> <a href=\"https://github.com/EndurantDevs/sanic-asyncjinja2/blob/master/setup.py\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46b453adc380b593f8d390c072a17fd8f7b5ecde/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73616e69632d6173796e636a696e6a61322e737667\"></a> <a href=\"https://codecov.io/gh/EndurantDevs/sanic-asyncjinja2\" rel=\"nofollow\"><img alt=\"Tests Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39145cb5f17151cf2071d2a0562bcc95547e4005/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f456e647572616e74446576732f73616e69632d6173796e636a696e6a61322f6d61737465722e737667\"></a></p>\n<p>It is based on <a href=\"https://github.com/lixxu/sanic-jinja2\" rel=\"nofollow\">sanic-jinja2</a>.\nIt provides two decorators @template and @stream_template.\nThe main change is in using render_async and generate_async for the decorator functions.</p>\n<p>@stream_template is just and experimental way to make HTTP response via sanic.response.stream\nIt gives you ability to decrease time to the first byte on response and stream long response during the processing template with data.</p>\n<h3>Example code</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sanic</span> <span class=\"kn\">import</span> <span class=\"n\">Sanic</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sanic_asyncjinja2</span> <span class=\"kn\">import</span> <span class=\"n\">SanicAsyncJinja2</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Sanic</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">jinja</span> <span class=\"o\">=</span> <span class=\"n\">SanicAsyncJinja2</span><span class=\"p\">()</span>\n<span class=\"n\">jinja</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"p\">])</span>\n<span class=\"nd\">@jinja</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s2\">\"hello.html\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span><span class=\"p\">}</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/slow_query'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"p\">])</span>\n<span class=\"nd\">@jinja</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s2\">\"hello.html\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">slow_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">func1</span><span class=\"p\">():</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"name\"</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">func2</span><span class=\"p\">():</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"world\"</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">gfunc</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">):</span>\n        <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">}</span>\n\n    <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">func1</span><span class=\"p\">()</span>\n    <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">func2</span><span class=\"p\">()</span>\n    <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">gfunc</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">g</span>\n\n\n<span class=\"c1\"># this is just a stupid idea</span>\n<span class=\"c1\"># to win the time to the first byte on response</span>\n<span class=\"c1\"># on one of our production servers</span>\n<span class=\"c1\"># it is helpful with big responses</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/simplestream'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"p\">])</span>\n<span class=\"nd\">@jinja</span><span class=\"o\">.</span><span class=\"n\">stream_template</span><span class=\"p\">(</span><span class=\"s2\">\"hello.html\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handler2</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">very_long_text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Very long response here...\"</span> \n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span><span class=\"p\">,</span> <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"n\">very_long_text</span><span class=\"p\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 4430949, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5c91e3de927aa3f3b5e89f6aa378c002", "sha256": "46296669dd571fa294cd08ac7e2635626de51dc03f97751f9b88b2b405914b34"}, "downloads": -1, "filename": "sanic-asyncjinja2-0.1.tar.gz", "has_sig": false, "md5_digest": "5c91e3de927aa3f3b5e89f6aa378c002", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3433, "upload_time": "2018-09-21T11:55:56", "upload_time_iso_8601": "2018-09-21T11:55:56.877075Z", "url": "https://files.pythonhosted.org/packages/3b/77/2538d613cbbbe61b0ae736c5082379844db3c50529ff5dc498a0a915476c/sanic-asyncjinja2-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "df90d6512ba8156e2246d9fe35251e9d", "sha256": "c39c9d8bf382f4936c61df24dce42745d942acb6014faea036b484b9bbadd4f8"}, "downloads": -1, "filename": "sanic-asyncjinja2-0.1.1.tar.gz", "has_sig": false, "md5_digest": "df90d6512ba8156e2246d9fe35251e9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3595, "upload_time": "2018-09-21T12:05:04", "upload_time_iso_8601": "2018-09-21T12:05:04.089858Z", "url": "https://files.pythonhosted.org/packages/3f/b0/dfad483489dc8fba6c77d9b9ceed0079f9dcce119cd701285a3254b45615/sanic-asyncjinja2-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "86bacfd0d6dccb6d37515ec93620bd1f", "sha256": "57d74c5a2a2aeaf02532a8a57396d583778bc3a714482413e2c7d39090a4b281"}, "downloads": -1, "filename": "sanic-asyncjinja2-0.1.2.tar.gz", "has_sig": false, "md5_digest": "86bacfd0d6dccb6d37515ec93620bd1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3610, "upload_time": "2018-10-30T10:06:49", "upload_time_iso_8601": "2018-10-30T10:06:49.260399Z", "url": "https://files.pythonhosted.org/packages/5b/55/32b5860b16ca904a6c9a911c4ca7fe748b82e6a3d21013b3cb6276777683/sanic-asyncjinja2-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "86bacfd0d6dccb6d37515ec93620bd1f", "sha256": "57d74c5a2a2aeaf02532a8a57396d583778bc3a714482413e2c7d39090a4b281"}, "downloads": -1, "filename": "sanic-asyncjinja2-0.1.2.tar.gz", "has_sig": false, "md5_digest": "86bacfd0d6dccb6d37515ec93620bd1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3610, "upload_time": "2018-10-30T10:06:49", "upload_time_iso_8601": "2018-10-30T10:06:49.260399Z", "url": "https://files.pythonhosted.org/packages/5b/55/32b5860b16ca904a6c9a911c4ca7fe748b82e6a3d21013b3cb6276777683/sanic-asyncjinja2-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:47 2020"}