{"info": {"author": "Minyoung Choi", "author_email": "minyoung.choi@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pyvisauto\n\n**pyvisauto** is a Python visual automation tool. Inspired by Sikuli, pyvisauto provides Python-native easy-to-use abstractions for complex interactions with on-screen visual elements by wrapping [OpenCV](https://opencv.org/) (specifically [opencv-contrib-python-headless](https://pypi.org/project/opencv-contrib-python-headless/)), [pyautogui](https://github.com/asweigart/pyautogui), [pytesseract](https://pypi.org/project/pytesseract/), and [numpy](https://numpy.org/).\n\nFeatures include:\n\n* OpenCV and numpy-driven image matching of on-screen elements\n* TesseractOCR support\n* Methods to find an image match (`find`), find all matches (`find_all`), check if a match exists (`exists`), wait until an image match occurs (`wait`), and wait for an image match to disappear (`wait_vanish`)\n* Methods to click and hover over regions and matches (`click` and `hover`, respectively) with random x and y coordinates within the region\n* Sub-region and cached matching for faster performance\n* Method to save screenshots of matches and regions to a file (`screenshot`)\n\n## Requirements\n\npyvisauto has been tested on Python 3.7. The `opencv-contrib-python-headless` package limits availability to Python 2.7 and 3.4 ~ 3.7. While pyvisauto should be compatible with Python 3, **Python 3.8 is currently not supported.**\n\n## Installation and Usage\n\n1. Install OS-specific dependencies:\n    * Windows: No extra dependencies needed\n    * Linux: `python3-xlib`\n    * OSX: `pyobjc-core` and `pyobjc`, in that order\n2. Install pyvisauto using pip: `pip install pyvisauto`\n3. Import pyvisauto: `import pyvisauto`\n4. Read the Quick Start and API docs\n\n## Quick Start\n\n* Define a full-screen region and assign it to `r`:\n\n    ```\n    r = pyvisauto.Region()\n    ```\n\n* Define a region with the upper-left corner at x: 50px and y: 100px, with a width of 500px and height of 300px and assign it to `r`:\n\n    ```\n    r = pyvisauto.Region(50, 100, 500, 300)\n    ```\n\n* Find the image `asset1.png` in the defined region, with a similarity score of 0.9:\n\n    ```\n    match1 = r.find('asset1.png', 0.8)\n    ```\n\n* If there has been no visual changes in the defined region, subsequent `find` actions can be expedited by passing in `cached=True`:\n\n    ```\n    match2 = r.find('asset2.png', 0.9, cached=True)\n    ```\n\n* `find_all` and `exists` can be used in a similar fashion as `find`.\n\n* Hover over a random point in the first returned match:\n\n    ```\n    match1.hover()\n    ```\n\n* Click a random point in the second returned match:\n\n    ```\n    match2.click()\n    ```\n\n* One can use `wait` and `vanish` to wait for on-screen changes, detected by the presence or disappearance of an image on-screen, respectively:\n\n    ```\n    r.wait('wait_asset1.png', 30, 0.8)\n    ```\n\n    The above code will wait for `wait_asset1.png` in the previously defined region `r`, with a minimum similarity score of 0.8, waiting a maximum of 30 seconds before throwing a `FindFailed` exception. `vanish`, on the other hand, throws a `VanishFailed` exception. Both exceptions are defined in the `pyvisauto` module.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mrmin123/pyvisauto", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyvisauto", "package_url": "https://pypi.org/project/pyvisauto/", "platform": "", "project_url": "https://pypi.org/project/pyvisauto/", "project_urls": {"Homepage": "https://github.com/mrmin123/pyvisauto"}, "release_url": "https://pypi.org/project/pyvisauto/1.0.2/", "requires_dist": ["opencv-contrib-python-headless (~=4.1.2.30)", "pillow (~=6.2.1)", "pyautogui (~=0.9.48)", "pytesseract (~=0.3.0)", "numpy (~=1.17.4)"], "requires_python": ">=3.4.*, <3.8", "summary": "pyvisauto - a vision-based automation tool", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyvisauto</h1>\n<p><strong>pyvisauto</strong> is a Python visual automation tool. Inspired by Sikuli, pyvisauto provides Python-native easy-to-use abstractions for complex interactions with on-screen visual elements by wrapping <a href=\"https://opencv.org/\" rel=\"nofollow\">OpenCV</a> (specifically <a href=\"https://pypi.org/project/opencv-contrib-python-headless/\" rel=\"nofollow\">opencv-contrib-python-headless</a>), <a href=\"https://github.com/asweigart/pyautogui\" rel=\"nofollow\">pyautogui</a>, <a href=\"https://pypi.org/project/pytesseract/\" rel=\"nofollow\">pytesseract</a>, and <a href=\"https://numpy.org/\" rel=\"nofollow\">numpy</a>.</p>\n<p>Features include:</p>\n<ul>\n<li>OpenCV and numpy-driven image matching of on-screen elements</li>\n<li>TesseractOCR support</li>\n<li>Methods to find an image match (<code>find</code>), find all matches (<code>find_all</code>), check if a match exists (<code>exists</code>), wait until an image match occurs (<code>wait</code>), and wait for an image match to disappear (<code>wait_vanish</code>)</li>\n<li>Methods to click and hover over regions and matches (<code>click</code> and <code>hover</code>, respectively) with random x and y coordinates within the region</li>\n<li>Sub-region and cached matching for faster performance</li>\n<li>Method to save screenshots of matches and regions to a file (<code>screenshot</code>)</li>\n</ul>\n<h2>Requirements</h2>\n<p>pyvisauto has been tested on Python 3.7. The <code>opencv-contrib-python-headless</code> package limits availability to Python 2.7 and 3.4 ~ 3.7. While pyvisauto should be compatible with Python 3, <strong>Python 3.8 is currently not supported.</strong></p>\n<h2>Installation and Usage</h2>\n<ol>\n<li>Install OS-specific dependencies:\n<ul>\n<li>Windows: No extra dependencies needed</li>\n<li>Linux: <code>python3-xlib</code></li>\n<li>OSX: <code>pyobjc-core</code> and <code>pyobjc</code>, in that order</li>\n</ul>\n</li>\n<li>Install pyvisauto using pip: <code>pip install pyvisauto</code></li>\n<li>Import pyvisauto: <code>import pyvisauto</code></li>\n<li>Read the Quick Start and API docs</li>\n</ol>\n<h2>Quick Start</h2>\n<ul>\n<li>\n<p>Define a full-screen region and assign it to <code>r</code>:</p>\n<pre><code>r = pyvisauto.Region()\n</code></pre>\n</li>\n<li>\n<p>Define a region with the upper-left corner at x: 50px and y: 100px, with a width of 500px and height of 300px and assign it to <code>r</code>:</p>\n<pre><code>r = pyvisauto.Region(50, 100, 500, 300)\n</code></pre>\n</li>\n<li>\n<p>Find the image <code>asset1.png</code> in the defined region, with a similarity score of 0.9:</p>\n<pre><code>match1 = r.find('asset1.png', 0.8)\n</code></pre>\n</li>\n<li>\n<p>If there has been no visual changes in the defined region, subsequent <code>find</code> actions can be expedited by passing in <code>cached=True</code>:</p>\n<pre><code>match2 = r.find('asset2.png', 0.9, cached=True)\n</code></pre>\n</li>\n<li>\n<p><code>find_all</code> and <code>exists</code> can be used in a similar fashion as <code>find</code>.</p>\n</li>\n<li>\n<p>Hover over a random point in the first returned match:</p>\n<pre><code>match1.hover()\n</code></pre>\n</li>\n<li>\n<p>Click a random point in the second returned match:</p>\n<pre><code>match2.click()\n</code></pre>\n</li>\n<li>\n<p>One can use <code>wait</code> and <code>vanish</code> to wait for on-screen changes, detected by the presence or disappearance of an image on-screen, respectively:</p>\n<pre><code>r.wait('wait_asset1.png', 30, 0.8)\n</code></pre>\n<p>The above code will wait for <code>wait_asset1.png</code> in the previously defined region <code>r</code>, with a minimum similarity score of 0.8, waiting a maximum of 30 seconds before throwing a <code>FindFailed</code> exception. <code>vanish</code>, on the other hand, throws a <code>VanishFailed</code> exception. Both exceptions are defined in the <code>pyvisauto</code> module.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6216245, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "6e2d60ccfb2703bd0fa92e8460f6fcbd", "sha256": "bef1af9a7b9802961465b551439ce6b6559f4b731d95458671688b0cdb59a124"}, "downloads": -1, "filename": "pyvisauto-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6e2d60ccfb2703bd0fa92e8460f6fcbd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.*, <3.8", "size": 22079, "upload_time": "2019-11-10T10:04:48", "upload_time_iso_8601": "2019-11-10T10:04:48.286628Z", "url": "https://files.pythonhosted.org/packages/c3/33/1d3ef249f743a1a0055755441eb31b79056f8f6045d98d2c4cc32b6e8cf7/pyvisauto-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "455f404c68b6d3d8f036f72fd3b4d80c", "sha256": "2f0739d9309a9158203a5c8803449f886ed4a3e8c640c43cf2e677cd993c9754"}, "downloads": -1, "filename": "pyvisauto-1.0.1.tar.gz", "has_sig": false, "md5_digest": "455f404c68b6d3d8f036f72fd3b4d80c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.*, <3.8", "size": 6030, "upload_time": "2019-11-10T10:04:49", "upload_time_iso_8601": "2019-11-10T10:04:49.608818Z", "url": "https://files.pythonhosted.org/packages/9c/b4/50731c1d812a5296cbda5fde90b544437ee55d691b241211bb624e73a7a1/pyvisauto-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "79cc5475c41372c8e2f7c1876a096dfc", "sha256": "fd2a1a7fc1b091a23f4ee2f8f61ccf3403bb910ad72fceb27a8423e1cc152af9"}, "downloads": -1, "filename": "pyvisauto-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "79cc5475c41372c8e2f7c1876a096dfc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.*, <3.8", "size": 22085, "upload_time": "2019-11-28T23:51:54", "upload_time_iso_8601": "2019-11-28T23:51:54.741938Z", "url": "https://files.pythonhosted.org/packages/48/2f/1da0aec704cc6ac91e44ef7fc3f78726fb19da171f2a0e8156aff25cce96/pyvisauto-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a54b087d4d6f3cd83b73f79b96205bed", "sha256": "590f4763cffbb4ea4d15bff8788605ad7d708386b4d6a685cc676e774124d5d7"}, "downloads": -1, "filename": "pyvisauto-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a54b087d4d6f3cd83b73f79b96205bed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.*, <3.8", "size": 6032, "upload_time": "2019-11-28T23:51:56", "upload_time_iso_8601": "2019-11-28T23:51:56.820611Z", "url": "https://files.pythonhosted.org/packages/ae/38/862c916e7581a607630591a72a6d3cfde321f4005ee20d51b197be60d8a0/pyvisauto-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79cc5475c41372c8e2f7c1876a096dfc", "sha256": "fd2a1a7fc1b091a23f4ee2f8f61ccf3403bb910ad72fceb27a8423e1cc152af9"}, "downloads": -1, "filename": "pyvisauto-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "79cc5475c41372c8e2f7c1876a096dfc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.*, <3.8", "size": 22085, "upload_time": "2019-11-28T23:51:54", "upload_time_iso_8601": "2019-11-28T23:51:54.741938Z", "url": "https://files.pythonhosted.org/packages/48/2f/1da0aec704cc6ac91e44ef7fc3f78726fb19da171f2a0e8156aff25cce96/pyvisauto-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a54b087d4d6f3cd83b73f79b96205bed", "sha256": "590f4763cffbb4ea4d15bff8788605ad7d708386b4d6a685cc676e774124d5d7"}, "downloads": -1, "filename": "pyvisauto-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a54b087d4d6f3cd83b73f79b96205bed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.*, <3.8", "size": 6032, "upload_time": "2019-11-28T23:51:56", "upload_time_iso_8601": "2019-11-28T23:51:56.820611Z", "url": "https://files.pythonhosted.org/packages/ae/38/862c916e7581a607630591a72a6d3cfde321f4005ee20d51b197be60d8a0/pyvisauto-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:55 2020"}