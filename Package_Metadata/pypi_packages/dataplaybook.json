{"info": {"author": "Johann Kellerman", "author_email": "kellerza@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Data Playbook\n:book: Playbooks for data. Open, process and save table based data.\n[![CircleCI](https://circleci.com/gh/kellerza/data-playbook/tree/master.svg?style=svg)](https://circleci.com/gh/kellerza/data-playbook/tree/master)\n[![codecov](https://codecov.io/gh/kellerza/data-playbook/branch/master/graph/badge.svg)](https://codecov.io/gh/kellerza/data-playbook)\n\nAutomate repetitive tasks on table based data. Include various input and output tasks. Can be extended with custom modules.\n\nInstall: `pip install dataplaybook`\n\nUse: `dataplaybook playbook.yaml`\n\n## Playbook structure\n\nThe playbook.yaml file allows you to load additional modules (containing tasks) and specify the tasks to execute in sequence, with all their parameters.\n\nThe `tasks` to perform typically follow the the structure of read, process, write.\n\nExample yaml: (please note yaml is case sensitive)\n```yaml\nmodules: [list, of, modules]\n\ntasks:\n  - task_name:  # See a list of tasks below\n      task_setting_1: 1\n    tables: # The INPUT. One of more tables used by this task\n    target: # The OUTPUT. Target table name of this function\n    debug: True/False # Print extra debug message, default: False\n```\n\n## Templating\n\nJinja2 and JMESPath expressions can be used to create parameters for subsequent tasks. Jinja2 simly use the `\"{{ var[res1] }}\"` bracket syntax and jmespath expressions should start with the word *jmespath* followed by a space.\n\nBoth the `vars` and `template` tasks achieve a similar result: (this will search a table matching string \"2\" on the key column and return the value in the value column)\n```yaml\n  - vars:\n      res1: jmespath test[?key=='2'].value | [0]\n  # is equal to\n  - template:\n      jmespath: \"test[?key=='2'].value | [0]\"\n    target: res1\n\n  # ... then use it with `{{ var.res1 }}`\n```\nThe JMESpath task `template` task has an advantage that you can create new variables **or tables**.\n\nIf you have a lookup you use regularly you can do the following:\n```yaml\n - build_lookup_var:\n     key: key\n     columns: [value]\n   target: lookup1\n  # and then use it as follows to get a similar results to the previous example\n  - vars:\n      res1: \"{{ var['lookup1']['2'].value }}\"\n```\n\nWhen searching through a table with Jinja, a similar one-liner, using `selectattr`, seems much more complex:\n```yaml\n  - vars:\n      res1: \"{{ test | selectattr('key', 'equalto', '2') | map(attribute='value') | first }}\"\n```\n\n\n## Tasks\nTasks are implemented as simple Python functions and the modules can be found in the dataplaybook/tasks folder.\n\n### Default tasks `dataplaybook.tasks` (loaded by default)\n* build_lookup\n* build_lookup_var\n* combine\n* drop\n* extend\n* filter\n* fuzzy_match (`pip install fuzzywuzzy`)\n* print\n* replace\n* unique\n* vlookup\n\n### Templates (loaded by default)\n* template - can be used to\n* vars - set variables using\n\n### Other modules\nThese modules can be loaded if required\n* IETF `dataplaybook.tasks.ietf` - IETF/RFC/draft related tasks\n* GIS `dataplaybook.tasks.gis` - tasks for QGIS data\n* FNB `dataplaybook.tasks.fnb`\n\n## IO Tasks\n\n### Excel files `dataplaybook.tasks.io_xlsx` (loaded by default)\n* read_excel\n* write_excel\n\n### Miscellaneous I/O `dataplaybook.tasks.io_misc` (loaded by default)\n* read_csv\n* read_tab_delim\n* read_text_regex\n* wget\n* write_csv\n\n### Mongo DB `dataplaybook.tasks.io_mongo`\nRequires pymongo\n* read_mongo\n* write_mongo\n* columns_to_list\n* list_to_columns\n\n### Module `io_pdf`\nRequires pdftotext executable file on your path\n* read_pdf_pages\n* read_pdf_files\n\n### Module `io_xml`\n* read_xml\n\n## Special yaml functions\n\n* `!re <expression>` Regular expression\n* `!es <search string>` Search a file using Everything by Voidtools\n\n## Install the development version\n\n1. Clone the repo\n2. `pip install <path> -e`\n\n## Data Playbook origins\nData playbooks was created to replace various snippets of code I had lying around. They were all created to ensure repeatability of some menial task, and generally followed a similar structure of load something, process it and save it. (Process network data into GIS tools, network audits & reporting on router & NMS output, Extract IETF standards to complete SOCs, read my bank statements into my Excel budgeting tool, etc.)\n\nFor many of these tasks I have specific processing code (`tasks_x.py`, loaded with `modules: [tasks_x]` in the playbook), but in almost all cases input & output tasks (and configuring these names etc) are common. The idea of the modular tasks originally came from Home Assistant, where I started learning Python and the idea of \"custom components\" to add your own integrations, although one could argue this also has similarities to Ansible playbooks.\n\nIn many cases I have a 'loose' coupling to actual file names, using Everything search (`!es search_pattern` in the playbook) to resolve a search pattern to the correct file used for input.\n\nIt has some parts in common with Ansible Playbooks, especially the name was chosen after I was introduced to Ansible Playbooks. The task structure has been updated in 2019 to match the Ansible Playbooks 2.0/2.5+ format and allow names. This format will also be easier to introduce loop mechanisms etc.\n\n*Comparison to Ansible Playbooks*\n\nData playbooks is intended to create and modify variables in the environment (similar to **inventory**). Data playbooks starts with an empty environment (although you can read the environment from various sources inside the play).\nAlthough new variables can be created using **register:** in Ansible, data playbook functions requires the output to be captured through `target:`.\n\nData playbook tasks are different form Ansible's **actions**:\n- They are mostly not idempotent, since the intention is to modify tables as we go along,\n- they can return lists containing rows or be Python iterators (that `yield` rows of a table)\n- if they dont return any tabular data (a list), the return value will be added to the `var` table in the environment\n- Each have a strict voluptuous schema, evaluated when loading and during runtime (e.g. to expand templates) to allow quick troubleshooting\n\nYou could argue I can do this with Ansible, but it won't be as elegant with single item hosts files, `gather_facts: no` and `delegate_to: localhost` throughout the playbooks. It will likely only be half as much fun trying to force it into my way of thinking.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kellerza/data-playbook", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "dataplaybook", "package_url": "https://pypi.org/project/dataplaybook/", "platform": "any", "project_url": "https://pypi.org/project/dataplaybook/", "project_urls": {"Homepage": "https://github.com/kellerza/data-playbook"}, "release_url": "https://pypi.org/project/dataplaybook/0.6.8/", "requires_dist": null, "requires_python": "", "summary": "Playbooks for data. Open, process and save table based data.", "version": "0.6.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Data Playbook</h1>\n<p>:book: Playbooks for data. Open, process and save table based data.\n<a href=\"https://circleci.com/gh/kellerza/data-playbook/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31ddc246e94c7b4820bbd651f86a023110c1f17e/68747470733a2f2f636972636c6563692e636f6d2f67682f6b656c6c65727a612f646174612d706c6179626f6f6b2f747265652f6d61737465722e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/kellerza/data-playbook\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04c60047e60c082d96e18f57b0c8767fa03a3294/68747470733a2f2f636f6465636f762e696f2f67682f6b656c6c65727a612f646174612d706c6179626f6f6b2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Automate repetitive tasks on table based data. Include various input and output tasks. Can be extended with custom modules.</p>\n<p>Install: <code>pip install dataplaybook</code></p>\n<p>Use: <code>dataplaybook playbook.yaml</code></p>\n<h2>Playbook structure</h2>\n<p>The playbook.yaml file allows you to load additional modules (containing tasks) and specify the tasks to execute in sequence, with all their parameters.</p>\n<p>The <code>tasks</code> to perform typically follow the the structure of read, process, write.</p>\n<p>Example yaml: (please note yaml is case sensitive)</p>\n<pre><span class=\"nt\">modules</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">list</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">of</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">modules</span><span class=\"p p-Indicator\">]</span>\n\n<span class=\"nt\">tasks</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">task_name</span><span class=\"p\">:</span>  <span class=\"c1\"># See a list of tasks below</span>\n      <span class=\"nt\">task_setting_1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n    <span class=\"nt\">tables</span><span class=\"p\">:</span> <span class=\"c1\"># The INPUT. One of more tables used by this task</span>\n    <span class=\"nt\">target</span><span class=\"p\">:</span> <span class=\"c1\"># The OUTPUT. Target table name of this function</span>\n    <span class=\"nt\">debug</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True/False</span> <span class=\"c1\"># Print extra debug message, default: False</span>\n</pre>\n<h2>Templating</h2>\n<p>Jinja2 and JMESPath expressions can be used to create parameters for subsequent tasks. Jinja2 simly use the <code>\"{{ var[res1] }}\"</code> bracket syntax and jmespath expressions should start with the word <em>jmespath</em> followed by a space.</p>\n<p>Both the <code>vars</code> and <code>template</code> tasks achieve a similar result: (this will search a table matching string \"2\" on the key column and return the value in the value column)</p>\n<pre>  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">vars</span><span class=\"p\">:</span>\n      <span class=\"nt\">res1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">jmespath test[?key=='2'].value | [0]</span>\n  <span class=\"c1\"># is equal to</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">template</span><span class=\"p\">:</span>\n      <span class=\"nt\">jmespath</span><span class=\"p\">:</span> <span class=\"s\">\"test[?key=='2'].value</span><span class=\"nv\"> </span><span class=\"s\">|</span><span class=\"nv\"> </span><span class=\"s\">[0]\"</span>\n    <span class=\"nt\">target</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">res1</span>\n\n  <span class=\"c1\"># ... then use it with `{{ var.res1 }}`</span>\n</pre>\n<p>The JMESpath task <code>template</code> task has an advantage that you can create new variables <strong>or tables</strong>.</p>\n<p>If you have a lookup you use regularly you can do the following:</p>\n<pre> <span class=\"p p-Indicator\">-</span> <span class=\"nt\">build_lookup_var</span><span class=\"p\">:</span>\n     <span class=\"nt\">key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">key</span>\n     <span class=\"nt\">columns</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">value</span><span class=\"p p-Indicator\">]</span>\n   <span class=\"nt\">target</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">lookup1</span>\n  <span class=\"c1\"># and then use it as follows to get a similar results to the previous example</span>\n <span class=\" -Error\"> </span><span class=\"p p-Indicator\">-</span> <span class=\"nt\">vars</span><span class=\"p\">:</span>\n      <span class=\"nt\">res1</span><span class=\"p\">:</span> <span class=\"s\">\"{{</span><span class=\"nv\"> </span><span class=\"s\">var['lookup1']['2'].value</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n</pre>\n<p>When searching through a table with Jinja, a similar one-liner, using <code>selectattr</code>, seems much more complex:</p>\n<pre>  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">vars</span><span class=\"p\">:</span>\n      <span class=\"nt\">res1</span><span class=\"p\">:</span> <span class=\"s\">\"{{</span><span class=\"nv\"> </span><span class=\"s\">test</span><span class=\"nv\"> </span><span class=\"s\">|</span><span class=\"nv\"> </span><span class=\"s\">selectattr('key',</span><span class=\"nv\"> </span><span class=\"s\">'equalto',</span><span class=\"nv\"> </span><span class=\"s\">'2')</span><span class=\"nv\"> </span><span class=\"s\">|</span><span class=\"nv\"> </span><span class=\"s\">map(attribute='value')</span><span class=\"nv\"> </span><span class=\"s\">|</span><span class=\"nv\"> </span><span class=\"s\">first</span><span class=\"nv\"> </span><span class=\"s\">}}\"</span>\n</pre>\n<h2>Tasks</h2>\n<p>Tasks are implemented as simple Python functions and the modules can be found in the dataplaybook/tasks folder.</p>\n<h3>Default tasks <code>dataplaybook.tasks</code> (loaded by default)</h3>\n<ul>\n<li>build_lookup</li>\n<li>build_lookup_var</li>\n<li>combine</li>\n<li>drop</li>\n<li>extend</li>\n<li>filter</li>\n<li>fuzzy_match (<code>pip install fuzzywuzzy</code>)</li>\n<li>print</li>\n<li>replace</li>\n<li>unique</li>\n<li>vlookup</li>\n</ul>\n<h3>Templates (loaded by default)</h3>\n<ul>\n<li>template - can be used to</li>\n<li>vars - set variables using</li>\n</ul>\n<h3>Other modules</h3>\n<p>These modules can be loaded if required</p>\n<ul>\n<li>IETF <code>dataplaybook.tasks.ietf</code> - IETF/RFC/draft related tasks</li>\n<li>GIS <code>dataplaybook.tasks.gis</code> - tasks for QGIS data</li>\n<li>FNB <code>dataplaybook.tasks.fnb</code></li>\n</ul>\n<h2>IO Tasks</h2>\n<h3>Excel files <code>dataplaybook.tasks.io_xlsx</code> (loaded by default)</h3>\n<ul>\n<li>read_excel</li>\n<li>write_excel</li>\n</ul>\n<h3>Miscellaneous I/O <code>dataplaybook.tasks.io_misc</code> (loaded by default)</h3>\n<ul>\n<li>read_csv</li>\n<li>read_tab_delim</li>\n<li>read_text_regex</li>\n<li>wget</li>\n<li>write_csv</li>\n</ul>\n<h3>Mongo DB <code>dataplaybook.tasks.io_mongo</code></h3>\n<p>Requires pymongo</p>\n<ul>\n<li>read_mongo</li>\n<li>write_mongo</li>\n<li>columns_to_list</li>\n<li>list_to_columns</li>\n</ul>\n<h3>Module <code>io_pdf</code></h3>\n<p>Requires pdftotext executable file on your path</p>\n<ul>\n<li>read_pdf_pages</li>\n<li>read_pdf_files</li>\n</ul>\n<h3>Module <code>io_xml</code></h3>\n<ul>\n<li>read_xml</li>\n</ul>\n<h2>Special yaml functions</h2>\n<ul>\n<li><code>!re &lt;expression&gt;</code> Regular expression</li>\n<li><code>!es &lt;search string&gt;</code> Search a file using Everything by Voidtools</li>\n</ul>\n<h2>Install the development version</h2>\n<ol>\n<li>Clone the repo</li>\n<li><code>pip install &lt;path&gt; -e</code></li>\n</ol>\n<h2>Data Playbook origins</h2>\n<p>Data playbooks was created to replace various snippets of code I had lying around. They were all created to ensure repeatability of some menial task, and generally followed a similar structure of load something, process it and save it. (Process network data into GIS tools, network audits &amp; reporting on router &amp; NMS output, Extract IETF standards to complete SOCs, read my bank statements into my Excel budgeting tool, etc.)</p>\n<p>For many of these tasks I have specific processing code (<code>tasks_x.py</code>, loaded with <code>modules: [tasks_x]</code> in the playbook), but in almost all cases input &amp; output tasks (and configuring these names etc) are common. The idea of the modular tasks originally came from Home Assistant, where I started learning Python and the idea of \"custom components\" to add your own integrations, although one could argue this also has similarities to Ansible playbooks.</p>\n<p>In many cases I have a 'loose' coupling to actual file names, using Everything search (<code>!es search_pattern</code> in the playbook) to resolve a search pattern to the correct file used for input.</p>\n<p>It has some parts in common with Ansible Playbooks, especially the name was chosen after I was introduced to Ansible Playbooks. The task structure has been updated in 2019 to match the Ansible Playbooks 2.0/2.5+ format and allow names. This format will also be easier to introduce loop mechanisms etc.</p>\n<p><em>Comparison to Ansible Playbooks</em></p>\n<p>Data playbooks is intended to create and modify variables in the environment (similar to <strong>inventory</strong>). Data playbooks starts with an empty environment (although you can read the environment from various sources inside the play).\nAlthough new variables can be created using <strong>register:</strong> in Ansible, data playbook functions requires the output to be captured through <code>target:</code>.</p>\n<p>Data playbook tasks are different form Ansible's <strong>actions</strong>:</p>\n<ul>\n<li>They are mostly not idempotent, since the intention is to modify tables as we go along,</li>\n<li>they can return lists containing rows or be Python iterators (that <code>yield</code> rows of a table)</li>\n<li>if they dont return any tabular data (a list), the return value will be added to the <code>var</code> table in the environment</li>\n<li>Each have a strict voluptuous schema, evaluated when loading and during runtime (e.g. to expand templates) to allow quick troubleshooting</li>\n</ul>\n<p>You could argue I can do this with Ansible, but it won't be as elegant with single item hosts files, <code>gather_facts: no</code> and <code>delegate_to: localhost</code> throughout the playbooks. It will likely only be half as much fun trying to force it into my way of thinking.</p>\n\n          </div>"}, "last_serial": 6922517, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "53ea512b0298aa62f1f6cc692debf079", "sha256": "fba98b83303aa0da45af2f418d7ab9244413790a294ae324adf9a0d4651b7376"}, "downloads": -1, "filename": "dataplaybook-0.1.tar.gz", "has_sig": false, "md5_digest": "53ea512b0298aa62f1f6cc692debf079", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 19816, "upload_time": "2018-06-14T14:36:03", "upload_time_iso_8601": "2018-06-14T14:36:03.065558Z", "url": "https://files.pythonhosted.org/packages/bf/0c/5c112c37ca13764803d6c64baac97c4b915da04554d05019359da02c02d2/dataplaybook-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e8c63ce2f8cbd062f61441cbe716458c", "sha256": "297aaec316a84fa5a40b41350b642ccbca974a1079ef9a868bdd22191219dfb1"}, "downloads": -1, "filename": "dataplaybook-0.2.tar.gz", "has_sig": false, "md5_digest": "e8c63ce2f8cbd062f61441cbe716458c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 21629, "upload_time": "2018-07-05T23:31:27", "upload_time_iso_8601": "2018-07-05T23:31:27.925837Z", "url": "https://files.pythonhosted.org/packages/a1/0e/f45089c9eb0c4b8144570b66cd1eb8cec825ace4fefeb94b73c4f0088552/dataplaybook-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "8d231f53230e8afdad2ea8e5e82238f0", "sha256": "785feee02cb0ed554574bd1b5dc36161224cb795c11415d77f14181f188ffe6e"}, "downloads": -1, "filename": "dataplaybook-0.2.1.tar.gz", "has_sig": false, "md5_digest": "8d231f53230e8afdad2ea8e5e82238f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 21309, "upload_time": "2018-07-06T07:04:36", "upload_time_iso_8601": "2018-07-06T07:04:36.638078Z", "url": "https://files.pythonhosted.org/packages/4a/f3/1f58773c4e1a8827cf5bd28c2da0dcf9d85a920c1892350863f1ce977e81/dataplaybook-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "08c80847e0db615be20e274497558dc0", "sha256": "82d50cfa32d13ee53916fe4fa1541b7d0f2df4ca7b4d274695c2b322c8cd107f"}, "downloads": -1, "filename": "dataplaybook-0.2.2.tar.gz", "has_sig": false, "md5_digest": "08c80847e0db615be20e274497558dc0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 21630, "upload_time": "2018-07-06T07:29:41", "upload_time_iso_8601": "2018-07-06T07:29:41.174193Z", "url": "https://files.pythonhosted.org/packages/a3/3b/4665622487665a02bd1e285a28ef0d727e2afc90cdebd43aa0c4fe18ed17/dataplaybook-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "13727f61356bc39e04a340cf126f31ba", "sha256": "75432dee350e089f9b12e204aaababe375aeba9b848a3f2853f88b2b801b0f9f"}, "downloads": -1, "filename": "dataplaybook-0.2.3.tar.gz", "has_sig": false, "md5_digest": "13727f61356bc39e04a340cf126f31ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22014, "upload_time": "2018-07-11T21:56:43", "upload_time_iso_8601": "2018-07-11T21:56:43.741792Z", "url": "https://files.pythonhosted.org/packages/22/b5/9cb5703b0520a36258ea320dd4edbdec6cea8ead48e738f4e8c3e32fabb9/dataplaybook-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "c6610244b44c2cd7c645b46b58cb7dec", "sha256": "1204ddcad138e84a5247c11878323a33a7cb5b720a6b56b500d7162a0738db55"}, "downloads": -1, "filename": "dataplaybook-0.2.4.tar.gz", "has_sig": false, "md5_digest": "c6610244b44c2cd7c645b46b58cb7dec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22203, "upload_time": "2018-07-12T21:50:19", "upload_time_iso_8601": "2018-07-12T21:50:19.292273Z", "url": "https://files.pythonhosted.org/packages/5e/3e/b2881b0b48e73ad3edf1ceda969911867f5a1336a8674d3040df41edb7fb/dataplaybook-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2d1c1ffa795657b166b5123d6e5f3909", "sha256": "3687dbbd54294fb847a2cb675d9beb985b51324a3df20e51d29584b02d63df9d"}, "downloads": -1, "filename": "dataplaybook-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2d1c1ffa795657b166b5123d6e5f3909", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25027, "upload_time": "2018-11-06T20:53:34", "upload_time_iso_8601": "2018-11-06T20:53:34.241006Z", "url": "https://files.pythonhosted.org/packages/af/7d/c710d3e9d3f5f86c186751373d7d5902c88c0f98bd6985a43fa0a7e03a88/dataplaybook-0.3.0.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "8bb88897e4b443f74d4317e1afb91848", "sha256": "c428ed4afab7f52e6651729f8f86efae0d2adadca1419c6075cdc879d8d91c32"}, "downloads": -1, "filename": "dataplaybook-0.3.2.tar.gz", "has_sig": false, "md5_digest": "8bb88897e4b443f74d4317e1afb91848", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25467, "upload_time": "2019-01-11T04:00:23", "upload_time_iso_8601": "2019-01-11T04:00:23.503520Z", "url": "https://files.pythonhosted.org/packages/03/06/f87141e7d8a80a59cf1cbca1bbc5f6c79b54a3f137f20110bcdad7535f33/dataplaybook-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "a16ac74930cf85fcb0fbd56ff3d1a3c8", "sha256": "569b16c7b984d978c4a049f59a88430899a4d8326739ddf6fe0b3c03936a2e4e"}, "downloads": -1, "filename": "dataplaybook-0.3.3.tar.gz", "has_sig": false, "md5_digest": "a16ac74930cf85fcb0fbd56ff3d1a3c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24598, "upload_time": "2019-01-14T21:24:13", "upload_time_iso_8601": "2019-01-14T21:24:13.261135Z", "url": "https://files.pythonhosted.org/packages/00/54/41592e7246f39af747274fd804bc763759739efd90486546d12a47d16aa5/dataplaybook-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "e7b06093043af88f93a0f22df27eefda", "sha256": "eba32dde84917d69ad2f4cc177c2586deb733129833aafe47fe7f35e4ade2919"}, "downloads": -1, "filename": "dataplaybook-0.3.4.tar.gz", "has_sig": false, "md5_digest": "e7b06093043af88f93a0f22df27eefda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25312, "upload_time": "2019-01-24T04:33:39", "upload_time_iso_8601": "2019-01-24T04:33:39.835555Z", "url": "https://files.pythonhosted.org/packages/21/80/94bdbf0626b77ddd0c4a0563bd2a8d3308e60605a11bc3145e4fe630963a/dataplaybook-0.3.4.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "3d4c119d6d3259ae567121ea107115d4", "sha256": "a03e7fcbffff56864cebe5eb9a20c9a657a67f100718b8696290eb71a074e3a6"}, "downloads": -1, "filename": "dataplaybook-0.6.tar.gz", "has_sig": false, "md5_digest": "3d4c119d6d3259ae567121ea107115d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33981, "upload_time": "2019-04-24T20:42:53", "upload_time_iso_8601": "2019-04-24T20:42:53.410779Z", "url": "https://files.pythonhosted.org/packages/b5/d9/9c726742681991f2470e099db3a2e7ce4e110d8a5a7f66c18454a4f86a36/dataplaybook-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "8eb68c728e9b5ba8b5e09b3f430021a6", "sha256": "86c185592adce1b7c05c7479832c8767dfcc17fc24549567f9a1c6697575362e"}, "downloads": -1, "filename": "dataplaybook-0.6.1.tar.gz", "has_sig": false, "md5_digest": "8eb68c728e9b5ba8b5e09b3f430021a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34991, "upload_time": "2019-05-09T07:15:39", "upload_time_iso_8601": "2019-05-09T07:15:39.002928Z", "url": "https://files.pythonhosted.org/packages/84/5a/688ecb9157f9b9e1eb491f491ae7ae7849208d215d0b834f76a8f67a0bce/dataplaybook-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "d7aa03b743be01770d8d119383e7ef7c", "sha256": "57eca6ada9f44096f4825a5761326248f265e2510336bf2cef69bd3dfd189357"}, "downloads": -1, "filename": "dataplaybook-0.6.2.tar.gz", "has_sig": false, "md5_digest": "d7aa03b743be01770d8d119383e7ef7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37498, "upload_time": "2019-05-29T09:39:32", "upload_time_iso_8601": "2019-05-29T09:39:32.648026Z", "url": "https://files.pythonhosted.org/packages/7b/f6/28c578d6a1c97d433c3266204e3d5b12f9710036b0101b10b1ae5153a7f1/dataplaybook-0.6.2.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "f121e0bc4c856eb6a8ab09cb9594d3cd", "sha256": "2ac6a3b46b9e349b3290fb90d8e26bc8c8dc2955d3b2cb5b2f8680262968a481"}, "downloads": -1, "filename": "dataplaybook-0.6.5.tar.gz", "has_sig": false, "md5_digest": "f121e0bc4c856eb6a8ab09cb9594d3cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40827, "upload_time": "2019-10-30T08:19:04", "upload_time_iso_8601": "2019-10-30T08:19:04.448628Z", "url": "https://files.pythonhosted.org/packages/48/ef/8f5c928b08ee8629cb2a3787dbcbd05a1db3b01493fa6749f83998cd27b9/dataplaybook-0.6.5.tar.gz", "yanked": false}], "0.6.7": [{"comment_text": "", "digests": {"md5": "e4ff1bacd4bb19561dc526b8d6b043ea", "sha256": "29196989717a0c230218dc112f04fd41c78827ac50cbc7a9097a71057c8b4fab"}, "downloads": -1, "filename": "dataplaybook-0.6.7.tar.gz", "has_sig": false, "md5_digest": "e4ff1bacd4bb19561dc526b8d6b043ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41537, "upload_time": "2020-01-14T09:26:48", "upload_time_iso_8601": "2020-01-14T09:26:48.189587Z", "url": "https://files.pythonhosted.org/packages/1b/b9/388df75ede8e8b16f66cc76a58da048882a66a3d7de19e89956cd0503a60/dataplaybook-0.6.7.tar.gz", "yanked": false}], "0.6.8": [{"comment_text": "", "digests": {"md5": "0318d62d1ccecd083aa8ec14152e368f", "sha256": "6c727c9339fe2a8db17263c32a863b6c6bce7c2643cbb4f6d56684cc52559f85"}, "downloads": -1, "filename": "dataplaybook-0.6.8.tar.gz", "has_sig": false, "md5_digest": "0318d62d1ccecd083aa8ec14152e368f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43044, "upload_time": "2020-03-31T19:50:59", "upload_time_iso_8601": "2020-03-31T19:50:59.664149Z", "url": "https://files.pythonhosted.org/packages/d5/36/f46d0b26ebc5efaca2fc49fbde69c45c74eb301580cb940d2b659d6e762f/dataplaybook-0.6.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0318d62d1ccecd083aa8ec14152e368f", "sha256": "6c727c9339fe2a8db17263c32a863b6c6bce7c2643cbb4f6d56684cc52559f85"}, "downloads": -1, "filename": "dataplaybook-0.6.8.tar.gz", "has_sig": false, "md5_digest": "0318d62d1ccecd083aa8ec14152e368f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43044, "upload_time": "2020-03-31T19:50:59", "upload_time_iso_8601": "2020-03-31T19:50:59.664149Z", "url": "https://files.pythonhosted.org/packages/d5/36/f46d0b26ebc5efaca2fc49fbde69c45c74eb301580cb940d2b659d6e762f/dataplaybook-0.6.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:16 2020"}