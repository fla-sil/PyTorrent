{"info": {"author": "Texas Advanced Computing Center", "author_email": "jstubbs@tacc.utexas.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.6"], "description": "=======\nTapisPy\n=======\n\n.. image:: https://badge.fury.io/py/agavepy.svg\n    :target: http://badge.fury.io/py/agavepy\n\n.. image:: https://travis-ci.org/TACC/agavepy.svg?branch=develop\n    :target: https://travis-ci.org/TACC/agavepy\n\n.. image:: https://readthedocs.org/projects/agavepy/badge/?version=latest\n    :target: https://readthedocs.org/projects/agavepy/?badge=latest\n\n.. image:: https://img.shields.io/pypi/l/Django.svg\n    :target: https://raw.githubusercontent.com/TACC/agavepy/master/LICENSE\n\n**Python2/3 binding for TACC.Cloud Tapis and Abaco APIs**\n\n- Documentation: https://agavepy.readthedocs.io/en/latest/\n- GitHub: https://github.com/TACC/agavepy\n- PyPI: https://pypi.python.org/pypi/agavepy\n- Free software: 3-Clause BSD License\n\n\nInstallation\n============\n\nInstall from PyPI_::\n\n    pip install tapispy\n\n\nInstall from GitHub checkout::\n\n    cd tapispy\n    python setup.py install\n    # or #\n    make install\n\n\nContributing\n============\nIn case you want to contribute, you should read our\n`contributing guidelines`_ and we have a contributor's guide\nthat explains `setting up a development environment and the contribution process`_.\n\n.. _contributing guidelines: CONTRIBUTING.md\n.. _setting up a development environment and the contribution process: docs/contributing/\n\n\nQuickstart\n==========\n\nIf you already have an active installation of the TACC Cloud CLI, TapisPy will\npick up on your existing credential cache, stored in `$HOME/.tapis/current`.\nWe illustrate this usage pattern first, as it's **really** straightforward.\n\nTACC Cloud CLI\n--------------\n\n.. code-block:: pycon\n\n   >>> from tapispy.tapis import Tapis\n   >>> ta = Tapis.restore()\n\nVoila! You have an active, authenticated API client. TapisPy will use a cached\nrefresh token to keep this session active as long as the code is running.\n\nPure Python\n-----------\n\nAuthentication and authorization to the TACC Cloud APIs uses OAuth2, a\nwidely-adopted web standard. Our implementation of Oauth2 is designed to give\nyou the flexibility you need to script and automate use of TACC Cloud while\nkeeping your access credentials and digital assets secure.\n\nThis is covered in great detail in our `Developer Documentation`_ but some key\nconcepts will be highlighted here, interleaved with Python code.\n\nThe first step is to create a Python object ``ta`` which will interact with an\nTapis tenant.\n\n.. code-block:: pycon\n\n    >>> from tapispy.tapis import Tapis\n    >>> ta = Tapis()\n    CODE                 NAME                                     URL\n    3dem                 3dem Tenant                              https://api.3dem.org/\n    agave.prod           Agave Public Tenant                      https://public.agaveapi.co/\n    araport.org          Araport                                  https://api.araport.org/\n    designsafe           DesignSafe                               https://agave.designsafe-ci.org/\n    iplantc.org          CyVerse Science APIs                     https://agave.iplantc.org/\n    irec                 iReceptor                                https://irec.tenants.prod.tacc.cloud/\n    sd2e                 SD2E Tenant                              https://api.sd2e.org/\n    sgci                 Science Gateways Community Institute     https://sgci.tacc.cloud/\n    tacc.prod            TACC                                     https://api.tacc.utexas.edu/\n    vdjserver.org        VDJ Server                               https://vdj-agave-api.tacc.utexas.edu/\n\n    Please specify the ID of a tenant to interact with: araport.org\n    >>> ta.api_server\n    'https://api.araport.org/'\n\n\nIf you already now what tenant you want to work with, you can instantiate\n``Tapis`` as follows:\n\n.. code-block:: pycon\n\n   >>> from tapispy.tapis import Tapis\n   >>> ta = Tapis(api_server=\"https://api.tacc.cloud\")\n\nor\n\n.. code-block:: pycon\n\n    >>> from tapispy.tapis import Tapis\n    >>> ta = Tapis(tenant_id=\"tacc.prod\")\n\nOnce the object is instantiated, interact with it according to the API\ndocumentation and your specific usage needs.\n\nCreate a new Oauth client\n^^^^^^^^^^^^^^^^^^^^^^^^^\nIn order to interact with Tapis, you'll need to first create an Oauth client so\nthat later on you can create access tokens to do work.\n\nTo create a client you can do the following:\n\n.. code-block:: pycon\n\n    >>> from tapispy.tapis import Tapis\n    >>> ta = Tapis(api_server='https://api.tacc.cloud')\n    >>> ta.clients_create(\"client-name\", \"some description\")\n    API username: your-username\n    API password:\n    >>> ta.api_key\n    'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n    >>> ta.api_secret\n    'XXXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n\nYou will use the api key and secret to generate Oauth *tokens*,\nwhich are temporary credentials that you can use in place of putting your real\ncredentials into code that is interacting with TACC APIs.\n\nReuse an existing Oauth client\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOnce you generate a client, you can re-use its key and secret. Clients can be\ncreated using the Python-based approach illustrated above, via the TACC Cloud\nCLI ``clients-create`` command, or by a direct, correctly-structured ``POST``\nto the ``clients`` web service. No matter how you've created a client, setting\nTapisPy up to use it works the same way:\n\n.. code-block:: pycon\n\n   >>> from tapispy.tapis import Tapis\n   >>> ta = Tapis(api_server='https://api.tacc.cloud',\n   ...            username='mwvaughn',\n   ...            client_name='my_client',\n   ...            api_key='kV4XLPhVBAv9RTf7a2QyBHhQAXca',\n   ...            api_secret='5EbjEOcyzzIsAAE3vBS7nspVqHQa')\n\nThe Tapis object ``ta`` is now configured to talk to all TACC Cloud services.\n\n\n\nGenerate an Access Token\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn order to interact with the TACC cloud services in a more secure and\ncontrolled manner - without constantly using your username and password - we\nwill use the oauth client, created in the previous step, to generate access\ntokens.\n\nThe generated tokens will by default have a lifetime of 4 hours, or 14400\nseconds.\n\nTo create a token\n\n.. code-block:: pycon\n\n    >>> ta.get_access_token()\n    API password:\n    >>> ta.token\n    'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\nKeep in mind that you will need to create an oauth client first!\n\n\n\nSaving your credentials\n^^^^^^^^^^^^^^^^^^^^^^^\n\nTo save your process (api key, api secret, access token, refresh token, tenant\ninformation) you can use the method ``Tapis.save_configs()``\n\n.. code-block:: pycon\n\n    >>> ta.save_configs()\n\nBy default, ``Tapis.save_configs`` will store credentials in ``~/.tapis``.\nIt will save all session in ``~/.tapis/config.json`` and, for\nbackwards-compatibility with other tapis tooling, it will save the current\nsession in ``~/.tapis/current``.\n\n\nThe refresh token\n^^^^^^^^^^^^^^^^^\n\nNobody likes to change their password, but they have to if it leaks out into\nthe wild. A tragically easy way for that to happen is in committed code or a\nDocker container where it's been hard-coded. To get around this, TapisPy works\nwith the TACC authentication APIs to support using a **refresh token**.\nBasically, as long as you have the apikey, apisecret, and the last refresh\ntoken for an authenticated session, you can renew the session without sending\na password. Neat, right? Let's build on the ``ta`` object from above to learn\nabout this.\n\nLet's start by inspecting its ``token`` property, which will also demonstrate\nhow you can access token data programmatically for your own purposes.\n\n.. code-block:: pycon\n\n    >>> ta.token.token_info\n    {u'access_token': u'14f0bbd0b334e594e676661bf9ccc136', 'created_at':\n     1518136421, u'expires_in': 13283, 'expires_at': 'Thu Feb  8 22:15:04',\n     u'token_type': u'bearer', 'expiration': 1518149704, u'scope': u'default',\n     u'refresh_token': u'b138c49040a6f67f80d49a1c112e44b'}\n    >>> ta.token.token_info['refresh_token']\n    u'b138c49046f67f80d49a1c10a12e44b'\n\n\n.. _Agave: https://agaveapi.co/\n.. _Abaco: http://useabaco.cloud/\n.. _PyPI: https://pypi.python.org/pypi\n.. _Developer Documentation: http://developer.tacc.cloud/\n.. _Docker: https://docs.docker.com/installation/#installation\n.. _Jupyter: https://jupyter.org/\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tapis-project/tapispy", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "tapispy", "package_url": "https://pypi.org/project/tapispy/", "platform": "", "project_url": "https://pypi.org/project/tapispy/", "project_urls": {"Homepage": "https://github.com/tapis-project/tapispy"}, "release_url": "https://pypi.org/project/tapispy/0.1.0.dev0/", "requires_dist": null, "requires_python": "", "summary": "Python SDK for the Tapis computing platform.", "version": "0.1.0.dev0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://badge.fury.io/py/agavepy\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/agavepy.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/818e132b12e5159bbf73993a31e032155a232cc3/68747470733a2f2f62616467652e667572792e696f2f70792f616761766570792e737667\"></a>\n<a href=\"https://travis-ci.org/TACC/agavepy\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/TACC/agavepy.svg?branch=develop\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/feb5c94d703e1b14ecd9ca0d3f5b7336a587957a/68747470733a2f2f7472617669732d63692e6f72672f544143432f616761766570792e7376673f6272616e63683d646576656c6f70\"></a>\n<a href=\"https://readthedocs.org/projects/agavepy/?badge=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/agavepy/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/874d31da9f5df583698dfdcdaf2dccfa686cf9f7/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f616761766570792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://raw.githubusercontent.com/TACC/agavepy/master/LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/Django.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0da7a2328c55c03ada1e5333308662dbfad097d1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f446a616e676f2e737667\"></a>\n<p><strong>Python2/3 binding for TACC.Cloud Tapis and Abaco APIs</strong></p>\n<ul>\n<li>Documentation: <a href=\"https://agavepy.readthedocs.io/en/latest/\" rel=\"nofollow\">https://agavepy.readthedocs.io/en/latest/</a></li>\n<li>GitHub: <a href=\"https://github.com/TACC/agavepy\" rel=\"nofollow\">https://github.com/TACC/agavepy</a></li>\n<li>PyPI: <a href=\"https://pypi.python.org/pypi/agavepy\" rel=\"nofollow\">https://pypi.python.org/pypi/agavepy</a></li>\n<li>Free software: 3-Clause BSD License</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from <a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>pip install tapispy\n</pre>\n<p>Install from GitHub checkout:</p>\n<pre>cd tapispy\npython setup.py install\n# or #\nmake install\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>In case you want to contribute, you should read our\n<a href=\"CONTRIBUTING.md\" rel=\"nofollow\">contributing guidelines</a> and we have a contributor\u2019s guide\nthat explains <a href=\"docs/contributing/\" rel=\"nofollow\">setting up a development environment and the contribution process</a>.</p>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>If you already have an active installation of the TACC Cloud CLI, TapisPy will\npick up on your existing credential cache, stored in <cite>$HOME/.tapis/current</cite>.\nWe illustrate this usage pattern first, as it\u2019s <strong>really</strong> straightforward.</p>\n<div id=\"tacc-cloud-cli\">\n<h3>TACC Cloud CLI</h3>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tapispy.tapis</span> <span class=\"kn\">import</span> <span class=\"n\">Tapis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span> <span class=\"o\">=</span> <span class=\"n\">Tapis</span><span class=\"o\">.</span><span class=\"n\">restore</span><span class=\"p\">()</span>\n</pre>\n<p>Voila! You have an active, authenticated API client. TapisPy will use a cached\nrefresh token to keep this session active as long as the code is running.</p>\n</div>\n<div id=\"pure-python\">\n<h3>Pure Python</h3>\n<p>Authentication and authorization to the TACC Cloud APIs uses OAuth2, a\nwidely-adopted web standard. Our implementation of Oauth2 is designed to give\nyou the flexibility you need to script and automate use of TACC Cloud while\nkeeping your access credentials and digital assets secure.</p>\n<p>This is covered in great detail in our <a href=\"http://developer.tacc.cloud/\" rel=\"nofollow\">Developer Documentation</a> but some key\nconcepts will be highlighted here, interleaved with Python code.</p>\n<p>The first step is to create a Python object <tt>ta</tt> which will interact with an\nTapis tenant.</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tapispy.tapis</span> <span class=\"kn\">import</span> <span class=\"n\">Tapis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span> <span class=\"o\">=</span> <span class=\"n\">Tapis</span><span class=\"p\">()</span>\n<span class=\"go\">CODE                 NAME                                     URL\n3dem                 3dem Tenant                              https://api.3dem.org/\nagave.prod           Agave Public Tenant                      https://public.agaveapi.co/\naraport.org          Araport                                  https://api.araport.org/\ndesignsafe           DesignSafe                               https://agave.designsafe-ci.org/\niplantc.org          CyVerse Science APIs                     https://agave.iplantc.org/\nirec                 iReceptor                                https://irec.tenants.prod.tacc.cloud/\nsd2e                 SD2E Tenant                              https://api.sd2e.org/\nsgci                 Science Gateways Community Institute     https://sgci.tacc.cloud/\ntacc.prod            TACC                                     https://api.tacc.utexas.edu/\nvdjserver.org        VDJ Server                               https://vdj-agave-api.tacc.utexas.edu/\n\nPlease specify the ID of a tenant to interact with: araport.org\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">api_server</span>\n<span class=\"go\">'https://api.araport.org/'</span>\n</pre>\n<p>If you already now what tenant you want to work with, you can instantiate\n<tt>Tapis</tt> as follows:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tapispy.tapis</span> <span class=\"kn\">import</span> <span class=\"n\">Tapis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span> <span class=\"o\">=</span> <span class=\"n\">Tapis</span><span class=\"p\">(</span><span class=\"n\">api_server</span><span class=\"o\">=</span><span class=\"s2\">\"https://api.tacc.cloud\"</span><span class=\"p\">)</span>\n</pre>\n<p>or</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tapispy.tapis</span> <span class=\"kn\">import</span> <span class=\"n\">Tapis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span> <span class=\"o\">=</span> <span class=\"n\">Tapis</span><span class=\"p\">(</span><span class=\"n\">tenant_id</span><span class=\"o\">=</span><span class=\"s2\">\"tacc.prod\"</span><span class=\"p\">)</span>\n</pre>\n<p>Once the object is instantiated, interact with it according to the API\ndocumentation and your specific usage needs.</p>\n<div id=\"create-a-new-oauth-client\">\n<h4>Create a new Oauth client</h4>\n<p>In order to interact with Tapis, you\u2019ll need to first create an Oauth client so\nthat later on you can create access tokens to do work.</p>\n<p>To create a client you can do the following:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tapispy.tapis</span> <span class=\"kn\">import</span> <span class=\"n\">Tapis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span> <span class=\"o\">=</span> <span class=\"n\">Tapis</span><span class=\"p\">(</span><span class=\"n\">api_server</span><span class=\"o\">=</span><span class=\"s1\">'https://api.tacc.cloud'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">clients_create</span><span class=\"p\">(</span><span class=\"s2\">\"client-name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"some description\"</span><span class=\"p\">)</span>\n<span class=\"go\">API username: your-username\nAPI password:\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">api_key</span>\n<span class=\"go\">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">api_secret</span>\n<span class=\"go\">'XXXXXXXXXXXXXXXXXXXXXXXXXXXXX'</span>\n</pre>\n<p>You will use the api key and secret to generate Oauth <em>tokens</em>,\nwhich are temporary credentials that you can use in place of putting your real\ncredentials into code that is interacting with TACC APIs.</p>\n</div>\n<div id=\"reuse-an-existing-oauth-client\">\n<h4>Reuse an existing Oauth client</h4>\n<p>Once you generate a client, you can re-use its key and secret. Clients can be\ncreated using the Python-based approach illustrated above, via the TACC Cloud\nCLI <tt><span class=\"pre\">clients-create</span></tt> command, or by a direct, correctly-structured <tt>POST</tt>\nto the <tt>clients</tt> web service. No matter how you\u2019ve created a client, setting\nTapisPy up to use it works the same way:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tapispy.tapis</span> <span class=\"kn\">import</span> <span class=\"n\">Tapis</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span> <span class=\"o\">=</span> <span class=\"n\">Tapis</span><span class=\"p\">(</span><span class=\"n\">api_server</span><span class=\"o\">=</span><span class=\"s1\">'https://api.tacc.cloud'</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>           <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'mwvaughn'</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>           <span class=\"n\">client_name</span><span class=\"o\">=</span><span class=\"s1\">'my_client'</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>           <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">'kV4XLPhVBAv9RTf7a2QyBHhQAXca'</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>           <span class=\"n\">api_secret</span><span class=\"o\">=</span><span class=\"s1\">'5EbjEOcyzzIsAAE3vBS7nspVqHQa'</span><span class=\"p\">)</span>\n</pre>\n<p>The Tapis object <tt>ta</tt> is now configured to talk to all TACC Cloud services.</p>\n</div>\n<div id=\"generate-an-access-token\">\n<h4>Generate an Access Token</h4>\n<p>In order to interact with the TACC cloud services in a more secure and\ncontrolled manner - without constantly using your username and password - we\nwill use the oauth client, created in the previous step, to generate access\ntokens.</p>\n<p>The generated tokens will by default have a lifetime of 4 hours, or 14400\nseconds.</p>\n<p>To create a token</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">get_access_token</span><span class=\"p\">()</span>\n<span class=\"go\">API password:\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">token</span>\n<span class=\"go\">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>\n</pre>\n<p>Keep in mind that you will need to create an oauth client first!</p>\n</div>\n<div id=\"saving-your-credentials\">\n<h4>Saving your credentials</h4>\n<p>To save your process (api key, api secret, access token, refresh token, tenant\ninformation) you can use the method <tt>Tapis.save_configs()</tt></p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">save_configs</span><span class=\"p\">()</span>\n</pre>\n<p>By default, <tt>Tapis.save_configs</tt> will store credentials in <tt><span class=\"pre\">~/.tapis</span></tt>.\nIt will save all session in <tt><span class=\"pre\">~/.tapis/config.json</span></tt> and, for\nbackwards-compatibility with other tapis tooling, it will save the current\nsession in <tt><span class=\"pre\">~/.tapis/current</span></tt>.</p>\n</div>\n<div id=\"the-refresh-token\">\n<h4>The refresh token</h4>\n<p>Nobody likes to change their password, but they have to if it leaks out into\nthe wild. A tragically easy way for that to happen is in committed code or a\nDocker container where it\u2019s been hard-coded. To get around this, TapisPy works\nwith the TACC authentication APIs to support using a <strong>refresh token</strong>.\nBasically, as long as you have the apikey, apisecret, and the last refresh\ntoken for an authenticated session, you can renew the session without sending\na password. Neat, right? Let\u2019s build on the <tt>ta</tt> object from above to learn\nabout this.</p>\n<p>Let\u2019s start by inspecting its <tt>token</tt> property, which will also demonstrate\nhow you can access token data programmatically for your own purposes.</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">token_info</span>\n<span class=\"go\">{u'access_token': u'14f0bbd0b334e594e676661bf9ccc136', 'created_at':\n 1518136421, u'expires_in': 13283, 'expires_at': 'Thu Feb  8 22:15:04',\n u'token_type': u'bearer', 'expiration': 1518149704, u'scope': u'default',\n u'refresh_token': u'b138c49040a6f67f80d49a1c112e44b'}\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">token_info</span><span class=\"p\">[</span><span class=\"s1\">'refresh_token'</span><span class=\"p\">]</span>\n<span class=\"go\">u'b138c49046f67f80d49a1c10a12e44b'</span>\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5492423, "releases": {"0.1.0.dev0": [{"comment_text": "", "digests": {"md5": "6c5c9384ee64d80ff697bed7ba418c6e", "sha256": "9e3a8b2a819f47f986bc0fb3a943bf87cc28a416b917a30fd85111c55ba7955b"}, "downloads": -1, "filename": "tapispy-0.1.0.dev0.tar.gz", "has_sig": false, "md5_digest": "6c5c9384ee64d80ff697bed7ba418c6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 152572, "upload_time": "2019-07-05T17:26:48", "upload_time_iso_8601": "2019-07-05T17:26:48.813356Z", "url": "https://files.pythonhosted.org/packages/c7/e0/3d52caee8bc632918bf6f409a9d7e974048078f41103c76353a9701fc812/tapispy-0.1.0.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c5c9384ee64d80ff697bed7ba418c6e", "sha256": "9e3a8b2a819f47f986bc0fb3a943bf87cc28a416b917a30fd85111c55ba7955b"}, "downloads": -1, "filename": "tapispy-0.1.0.dev0.tar.gz", "has_sig": false, "md5_digest": "6c5c9384ee64d80ff697bed7ba418c6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 152572, "upload_time": "2019-07-05T17:26:48", "upload_time_iso_8601": "2019-07-05T17:26:48.813356Z", "url": "https://files.pythonhosted.org/packages/c7/e0/3d52caee8bc632918bf6f409a9d7e974048078f41103c76353a9701fc812/tapispy-0.1.0.dev0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:03 2020"}