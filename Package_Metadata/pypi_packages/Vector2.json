{"info": {"author": "philip r brenan", "author_email": "philiprbrenan@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<h1>Table of contents</h1>\n<p><table cellpadding=10>\n\n<tr><td><a href=\"#2a84ce044b53bb3902f080782d296b09\">Vector2()</a><td>Vectors in 2 dimensional euclidean space.\n\n</table>\n\n<h1 id=\"2a84ce044b53bb3902f080782d296b09\">Class: Vector2()</h1>\n<p>Vectors in 2 dimensional euclidean space.</p>\n\n<h2>Normalize</h2>\nNormalize a copy of vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert((x * 3 + y * 4).Normalize() == x * 0.6 + y * 0.8)\n</pre>\n<hr>\n<h2>R180</h2>\nRotate  a copy of a vector by 180 degrees.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x.R180() == -x)\n</pre>\n<hr>\n<h2>R270</h2>\nRotate a vector by 270 degrees anticlockwise.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x.R270() == -y)\n</pre>\n<hr>\n<h2>R90</h2>\nRotate a copy of a vector by 90 degrees anticlockwise.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x.R90() == y)\n</pre>\n<hr>\n<h2>Swap</h2>\nSwap the components of a copy of a vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nz = x + y * 2\nZ = z.Swap()\nassert(z != Z)\n</pre>\n<hr>\n<h2>__abs__</h2>\nLength of a vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(abs(x * 3 + y * 4) == 5)\n</pre>\n<hr>\n<h2>__add__ **+ **</h2>\nAdd the second vector to a copy of the first vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x + y == Vector2(1, 1))\n</pre>\n<hr>\n<h2>__eq__ **==**</h2>\nWhether two vectors are equal within a radius of floating point epsilon.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x * 2 + y - x - y == x)\n</pre>\n<hr>\n<h2>__iadd__ **+=**</h2>\nAdd the second vector to the first vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nX = x\nX = X + x\nassert(x == Vector2(1, 0) and X == Vector2(2, 0))\n</pre>\n<hr>\n<h2>__imul__ ***=**</h2>\nMultiply a vector by a scalar.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>scalar\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nX = x\nX = X * 2\nassert(x == Vector2(1, 0) and X == Vector2(2, 0))\n</pre>\n<hr>\n<h2>__init__</h2>\nCreate a vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>x = 0\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x + y == Vector2(1, 1))\n</pre>\n<hr>\n<h2>__isub__ **-=**</h2>\nSubtract the second vector from the first vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nX = x\nX = X - x\nassert(x == Vector2(1, 0) and X == Vector2(0, 0))\n</pre>\n<hr>\n<h2>__itruediv__ **/=**</h2>\nDivide a vector by a scalar.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>scalar\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nX = x * 4\nX = X / 2\nassert(x == Vector2(1, 0) and X == Vector2(2, 0))\n</pre>\n<hr>\n<h2>__mul__ *** **</h2>\nMultiply a copy of vector by a scalar.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>scalar\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x * 2 + y * 3 == Vector2(2, 3))\n</pre>\n<hr>\n<h2>__neg__ **- **</h2>\nRotate a copy of a vector by 180 degrees.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(- y == Vector2(0, -1))\n</pre>\n<hr>\n<h2>__repr__</h2>\nString representation of a vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(repr(x + y * 2) == 'Vector2(1, 2)')\n</pre>\n<hr>\n<h2>__sub__ **- **</h2>\nSubtract the second vector from a copy of the first vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x - y == Vector2(1, -1))\n</pre>\n<hr>\n<h2>__truediv__ **/ **</h2>\nDivide a copy of a vector by a scalar.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>scalar\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert((x * 4 + y * 2) / 2 == x * 2 + y)\n</pre>\n<hr>\n<h2>angle</h2>\nAngle in radians anticlockwise that the first vector must be rotated to point along the second vector normalized to the range: -pi to +pi.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>o</i></b><td>p\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nfor i in range(-179, +179): # Anticlockwise angle from x\nassert(Vector2.close\n(x.angle(x * math.cos(dr(i)) + y * math.sin(dr(i))), dr(i)))\n</pre>\n<hr>\n<h2>area</h2>\nSigned area of the parallelogram defined by the two vectors. The area is negative if the second vector appears to the right of the first if they are both placed at the origin and the observer stands against the z-axis in a left handed coordinate system.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert((x + y).area(-x + y) == 2)\n</pre>\n<hr>\n<h2>clone</h2>\nClone a vector to allow it to be modified by other operations.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nz = x + y * 2\nZ = z.clone()\nassert(z == Z)\n</pre>\n<hr>\n<h2>close</h2>\nWhether two numbers are close.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>a</i></b><td>b\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(Vector2.close(0, Vector2.closeRadius() / 2))\n</pre>\n<hr>\n<h2>closeRadius</h2>\nTwo numbers are equal if they are less than this far apart.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i></i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(Vector2.closeRadius() < 1)\n</pre>\n<hr>\n<h2>cos</h2>\ncos(angle between two vectors).\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(Vector2.close((x + y).cos(y), 1 / r2))\nassert(Vector2.close( x.cos(x + yr3), 0.5))\n</pre>\n<hr>\n<h2>distance</h2>\nDistance between the points identified by two vectors when placed on the same point.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert((x * 3 + y * 4).distance (-(x * 3 + y * 4)) == 10)\n</pre>\n<hr>\n<h2>distance2</h2>\nDistance squared between the points identified\n\n       by two vectors when placed on the same point.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert((x * 3 + y * 4).distance2(-(x * 3 + y * 4)) == 100)\n</pre>\n<hr>\n<h2>dot</h2>\nDot product of two vectors.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert((x * 2 + y).dot(x + y * 3) == 5)\n</pre>\n<hr>\n<h2>length</h2>\nLength of a vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert((x * 3 + y * 4).length() == 5)\n</pre>\n<hr>\n<h2>length2</h2>\nLength squared of a vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert((x * 3 + y * 4).length2() == 25)\n</pre>\n<hr>\n<h2>nonZero</h2>\nWhether a number is non zero.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>n</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(Vector2.nonZero(Vector2.closeRadius()))\n</pre>\n<hr>\n<h2>normalize</h2>\nNormalize a vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert((x * 3 + y * 4).clone().normalize() == x * 0.6 + y * 0.8)\n</pre>\n<hr>\n<h2>r180</h2>\nRotate a vector by 180 degrees.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x.clone().r180() == -x)\n</pre>\n<hr>\n<h2>r270</h2>\nRotate a copy of a vector by 270 degrees anticlockwise.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x.clone().r270() == -y)\n</pre>\n<hr>\n<h2>r90</h2>\nRotate a vector by 90 degrees anticlockwise.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(x.clone().r90() == y)\n</pre>\n<hr>\n<h2>sin</h2>\nsin(angle between two vectors).\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>other\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(Vector2.close((x + y).sin(y), 1 / r2))\nassert(Vector2.close( x.sin(x + yr3), r3 / 2))\n</pre>\n<hr>\n<h2>smallestAngleToNormalPlane</h2>\nThe smallest angle between the second vector and a plane normal to the first vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>a</i></b><td>b\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(Vector2.close(dr( 0), y.smallestAngleToNormalPlane( x))) # First vector is y, second vector is 0 degrees anti-clockwise from x axis\nassert(Vector2.close(dr(+45), y.smallestAngleToNormalPlane( x + y))) # +45\nassert(Vector2.close(dr(+90), y.smallestAngleToNormalPlane( y))) # +90\nassert(Vector2.close(dr(+45), y.smallestAngleToNormalPlane(-x + -y))) # +135\nassert(Vector2.close(dr( 0), y.smallestAngleToNormalPlane(-x))) # +180\nassert(Vector2.close(dr(+45), y.smallestAngleToNormalPlane(-x + -y))) # +225\nassert(Vector2.close(dr(+90), y.smallestAngleToNormalPlane( -y))) # +270\nassert(Vector2.close(dr(+45), y.smallestAngleToNormalPlane(-x + -y))) # +315\nassert(Vector2.close(dr( 0), y.smallestAngleToNormalPlane( x))) # +360\n</pre>\n<hr>\n<h2>swap</h2>\nSwap the components of a vector.\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i>this</i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert((x + y * 2).swap() == y + x * 2)\n</pre>\n<hr>\n<h2>zeroAndUnits</h2>\nCreate the useful vectors: zero=(0,0), x=(1,0), y=(0,1).\n<h4>Parameters</h4>\n<table cellpadding=10>\n<tr><th>Name<th>Description\n<tr><td><b><i></i></b><td>\n\n</table>\n\n<h4>Examples</h4>\n<pre language=\"python\">\nassert(zero != x and zero != y and x != y)\n</pre>\n<hr>\n<h1>Possible improvements to documentation</h1>\n<h2>/home/phil/python/Vector2/Vector2.py</h2>\n<p><table cellpadding=10>\n\n<tr><td>No parameter definitions for Vector2().__init__\n\n<tr><td>No parameter definitions for Vector2().__repr__\n\n<tr><td>No parameter definitions for Vector2().__neg__\n\n<tr><td>No parameter definitions for Vector2().__abs__\n\n<tr><td>No parameter definitions for Vector2().__eq__\n\n<tr><td>No parameter definitions for Vector2().__iadd__\n\n<tr><td>No parameter definitions for Vector2().__add__\n\n<tr><td>No parameter definitions for Vector2().__isub__\n\n<tr><td>No parameter definitions for Vector2().__sub__\n\n<tr><td>No parameter definitions for Vector2().__imul__\n\n<tr><td>No parameter definitions for Vector2().__mul__\n\n<tr><td>No parameter definitions for Vector2().__itruediv__\n\n<tr><td>No parameter definitions for Vector2().__truediv__\n\n<tr><td>No parameter definitions for Vector2().zeroAndUnits\n\n<tr><td>No parameter definitions for Vector2().clone\n\n<tr><td>No parameter definitions for Vector2().closeRadius\n\n<tr><td>No parameter definitions for Vector2().close\n\n<tr><td>No parameter definitions for Vector2().nonZero\n\n<tr><td>No parameter definitions for Vector2().length\n\n<tr><td>No parameter definitions for Vector2().length2\n\n<tr><td>No parameter definitions for Vector2().distance\n\n<tr><td>No parameter definitions for Vector2().distance2\n\n<tr><td>No parameter definitions for Vector2().normalize\n\n<tr><td>No parameter definitions for Vector2().Normalize\n\n<tr><td>No parameter definitions for Vector2().dot\n\n<tr><td>No parameter definitions for Vector2().area\n\n<tr><td>No parameter definitions for Vector2().cos\n\n<tr><td>No parameter definitions for Vector2().sin\n\n<tr><td>No parameter definitions for Vector2().angle\n\n<tr><td>No parameter definitions for Vector2().smallestAngleToNormalPlane\n\n<tr><td>No parameter definitions for Vector2().r90\n\n<tr><td>No parameter definitions for Vector2().R90\n\n<tr><td>No parameter definitions for Vector2().r180\n\n<tr><td>No parameter definitions for Vector2().R180\n\n<tr><td>No parameter definitions for Vector2().r270\n\n<tr><td>No parameter definitions for Vector2().R270\n\n<tr><td>No parameter definitions for Vector2().swap\n\n<tr><td>No parameter definitions for Vector2().Swap\n\n</table>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pypa/Vector2", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Vector2", "package_url": "https://pypi.org/project/Vector2/", "platform": "", "project_url": "https://pypi.org/project/Vector2/", "project_urls": {"Homepage": "https://github.com/pypa/Vector2"}, "release_url": "https://pypi.org/project/Vector2/20200430/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Vectors in 2 dimensional Euclidean space", "version": "20200430", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Table of contents</h1>\n<p></p><table>\n<tr><td><a href=\"#2a84ce044b53bb3902f080782d296b09\" rel=\"nofollow\">Vector2()</a></td><td>Vectors in 2 dimensional euclidean space.\n</td></tr></table>\n<h1 id=\"2a84ce044b53bb3902f080782d296b09\">Class: Vector2()</h1>\n<p>Vectors in 2 dimensional euclidean space.</p>\n<h2>Normalize</h2>\nNormalize a copy of vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert((x * 3 + y * 4).Normalize() == x * 0.6 + y * 0.8)\n</pre>\n<hr>\n<h2>R180</h2>\nRotate  a copy of a vector by 180 degrees.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x.R180() == -x)\n</pre>\n<hr>\n<h2>R270</h2>\nRotate a vector by 270 degrees anticlockwise.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x.R270() == -y)\n</pre>\n<hr>\n<h2>R90</h2>\nRotate a copy of a vector by 90 degrees anticlockwise.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x.R90() == y)\n</pre>\n<hr>\n<h2>Swap</h2>\nSwap the components of a copy of a vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>z = x + y * 2\nZ = z.Swap()\nassert(z != Z)\n</pre>\n<hr>\n<h2>__abs__</h2>\nLength of a vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(abs(x * 3 + y * 4) == 5)\n</pre>\n<hr>\n<h2>__add__ **+ **</h2>\nAdd the second vector to a copy of the first vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x + y == Vector2(1, 1))\n</pre>\n<hr>\n<h2>__eq__ **==**</h2>\nWhether two vectors are equal within a radius of floating point epsilon.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x * 2 + y - x - y == x)\n</pre>\n<hr>\n<h2>__iadd__ **+=**</h2>\nAdd the second vector to the first vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>X = x\nX = X + x\nassert(x == Vector2(1, 0) and X == Vector2(2, 0))\n</pre>\n<hr>\n<h2>__imul__ ***=**</h2>\nMultiply a vector by a scalar.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>scalar\n</td></tr></table>\n<h4>Examples</h4>\n<pre>X = x\nX = X * 2\nassert(x == Vector2(1, 0) and X == Vector2(2, 0))\n</pre>\n<hr>\n<h2>__init__</h2>\nCreate a vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>x = 0\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x + y == Vector2(1, 1))\n</pre>\n<hr>\n<h2>__isub__ **-=**</h2>\nSubtract the second vector from the first vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>X = x\nX = X - x\nassert(x == Vector2(1, 0) and X == Vector2(0, 0))\n</pre>\n<hr>\n<h2>__itruediv__ **/=**</h2>\nDivide a vector by a scalar.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>scalar\n</td></tr></table>\n<h4>Examples</h4>\n<pre>X = x * 4\nX = X / 2\nassert(x == Vector2(1, 0) and X == Vector2(2, 0))\n</pre>\n<hr>\n<h2>__mul__ *** **</h2>\nMultiply a copy of vector by a scalar.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>scalar\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x * 2 + y * 3 == Vector2(2, 3))\n</pre>\n<hr>\n<h2>__neg__ **- **</h2>\nRotate a copy of a vector by 180 degrees.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(- y == Vector2(0, -1))\n</pre>\n<hr>\n<h2>__repr__</h2>\nString representation of a vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(repr(x + y * 2) == 'Vector2(1, 2)')\n</pre>\n<hr>\n<h2>__sub__ **- **</h2>\nSubtract the second vector from a copy of the first vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x - y == Vector2(1, -1))\n</pre>\n<hr>\n<h2>__truediv__ **/ **</h2>\nDivide a copy of a vector by a scalar.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>scalar\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert((x * 4 + y * 2) / 2 == x * 2 + y)\n</pre>\n<hr>\n<h2>angle</h2>\nAngle in radians anticlockwise that the first vector must be rotated to point along the second vector normalized to the range: -pi to +pi.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>o</i></b></td><td>p\n</td></tr></table>\n<h4>Examples</h4>\n<pre>for i in range(-179, +179): # Anticlockwise angle from x\nassert(Vector2.close\n(x.angle(x * math.cos(dr(i)) + y * math.sin(dr(i))), dr(i)))\n</pre>\n<hr>\n<h2>area</h2>\nSigned area of the parallelogram defined by the two vectors. The area is negative if the second vector appears to the right of the first if they are both placed at the origin and the observer stands against the z-axis in a left handed coordinate system.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert((x + y).area(-x + y) == 2)\n</pre>\n<hr>\n<h2>clone</h2>\nClone a vector to allow it to be modified by other operations.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>z = x + y * 2\nZ = z.clone()\nassert(z == Z)\n</pre>\n<hr>\n<h2>close</h2>\nWhether two numbers are close.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>a</i></b></td><td>b\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(Vector2.close(0, Vector2.closeRadius() / 2))\n</pre>\n<hr>\n<h2>closeRadius</h2>\nTwo numbers are equal if they are less than this far apart.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i></i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(Vector2.closeRadius() &lt; 1)\n</pre>\n<hr>\n<h2>cos</h2>\ncos(angle between two vectors).\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(Vector2.close((x + y).cos(y), 1 / r2))\nassert(Vector2.close( x.cos(x + yr3), 0.5))\n</pre>\n<hr>\n<h2>distance</h2>\nDistance between the points identified by two vectors when placed on the same point.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert((x * 3 + y * 4).distance (-(x * 3 + y * 4)) == 10)\n</pre>\n<hr>\n<h2>distance2</h2>\nDistance squared between the points identified\n<pre><code>   by two vectors when placed on the same point.\n</code></pre>\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert((x * 3 + y * 4).distance2(-(x * 3 + y * 4)) == 100)\n</pre>\n<hr>\n<h2>dot</h2>\nDot product of two vectors.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert((x * 2 + y).dot(x + y * 3) == 5)\n</pre>\n<hr>\n<h2>length</h2>\nLength of a vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert((x * 3 + y * 4).length() == 5)\n</pre>\n<hr>\n<h2>length2</h2>\nLength squared of a vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert((x * 3 + y * 4).length2() == 25)\n</pre>\n<hr>\n<h2>nonZero</h2>\nWhether a number is non zero.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>n</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(Vector2.nonZero(Vector2.closeRadius()))\n</pre>\n<hr>\n<h2>normalize</h2>\nNormalize a vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert((x * 3 + y * 4).clone().normalize() == x * 0.6 + y * 0.8)\n</pre>\n<hr>\n<h2>r180</h2>\nRotate a vector by 180 degrees.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x.clone().r180() == -x)\n</pre>\n<hr>\n<h2>r270</h2>\nRotate a copy of a vector by 270 degrees anticlockwise.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x.clone().r270() == -y)\n</pre>\n<hr>\n<h2>r90</h2>\nRotate a vector by 90 degrees anticlockwise.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(x.clone().r90() == y)\n</pre>\n<hr>\n<h2>sin</h2>\nsin(angle between two vectors).\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>other\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(Vector2.close((x + y).sin(y), 1 / r2))\nassert(Vector2.close( x.sin(x + yr3), r3 / 2))\n</pre>\n<hr>\n<h2>smallestAngleToNormalPlane</h2>\nThe smallest angle between the second vector and a plane normal to the first vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>a</i></b></td><td>b\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(Vector2.close(dr( 0), y.smallestAngleToNormalPlane( x))) # First vector is y, second vector is 0 degrees anti-clockwise from x axis\nassert(Vector2.close(dr(+45), y.smallestAngleToNormalPlane( x + y))) # +45\nassert(Vector2.close(dr(+90), y.smallestAngleToNormalPlane( y))) # +90\nassert(Vector2.close(dr(+45), y.smallestAngleToNormalPlane(-x + -y))) # +135\nassert(Vector2.close(dr( 0), y.smallestAngleToNormalPlane(-x))) # +180\nassert(Vector2.close(dr(+45), y.smallestAngleToNormalPlane(-x + -y))) # +225\nassert(Vector2.close(dr(+90), y.smallestAngleToNormalPlane( -y))) # +270\nassert(Vector2.close(dr(+45), y.smallestAngleToNormalPlane(-x + -y))) # +315\nassert(Vector2.close(dr( 0), y.smallestAngleToNormalPlane( x))) # +360\n</pre>\n<hr>\n<h2>swap</h2>\nSwap the components of a vector.\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i>this</i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert((x + y * 2).swap() == y + x * 2)\n</pre>\n<hr>\n<h2>zeroAndUnits</h2>\nCreate the useful vectors: zero=(0,0), x=(1,0), y=(0,1).\n<h4>Parameters</h4>\n<table>\n<tr><th>Name</th><th>Description\n</th></tr><tr><td><b><i></i></b></td><td>\n</td></tr></table>\n<h4>Examples</h4>\n<pre>assert(zero != x and zero != y and x != y)\n</pre>\n<hr>\n<h1>Possible improvements to documentation</h1>\n<h2>/home/phil/python/Vector2/Vector2.py</h2>\n<p></p><table>\n<tr><td>No parameter definitions for Vector2().__init__\n</td></tr><tr><td>No parameter definitions for Vector2().__repr__\n</td></tr><tr><td>No parameter definitions for Vector2().__neg__\n</td></tr><tr><td>No parameter definitions for Vector2().__abs__\n</td></tr><tr><td>No parameter definitions for Vector2().__eq__\n</td></tr><tr><td>No parameter definitions for Vector2().__iadd__\n</td></tr><tr><td>No parameter definitions for Vector2().__add__\n</td></tr><tr><td>No parameter definitions for Vector2().__isub__\n</td></tr><tr><td>No parameter definitions for Vector2().__sub__\n</td></tr><tr><td>No parameter definitions for Vector2().__imul__\n</td></tr><tr><td>No parameter definitions for Vector2().__mul__\n</td></tr><tr><td>No parameter definitions for Vector2().__itruediv__\n</td></tr><tr><td>No parameter definitions for Vector2().__truediv__\n</td></tr><tr><td>No parameter definitions for Vector2().zeroAndUnits\n</td></tr><tr><td>No parameter definitions for Vector2().clone\n</td></tr><tr><td>No parameter definitions for Vector2().closeRadius\n</td></tr><tr><td>No parameter definitions for Vector2().close\n</td></tr><tr><td>No parameter definitions for Vector2().nonZero\n</td></tr><tr><td>No parameter definitions for Vector2().length\n</td></tr><tr><td>No parameter definitions for Vector2().length2\n</td></tr><tr><td>No parameter definitions for Vector2().distance\n</td></tr><tr><td>No parameter definitions for Vector2().distance2\n</td></tr><tr><td>No parameter definitions for Vector2().normalize\n</td></tr><tr><td>No parameter definitions for Vector2().Normalize\n</td></tr><tr><td>No parameter definitions for Vector2().dot\n</td></tr><tr><td>No parameter definitions for Vector2().area\n</td></tr><tr><td>No parameter definitions for Vector2().cos\n</td></tr><tr><td>No parameter definitions for Vector2().sin\n</td></tr><tr><td>No parameter definitions for Vector2().angle\n</td></tr><tr><td>No parameter definitions for Vector2().smallestAngleToNormalPlane\n</td></tr><tr><td>No parameter definitions for Vector2().r90\n</td></tr><tr><td>No parameter definitions for Vector2().R90\n</td></tr><tr><td>No parameter definitions for Vector2().r180\n</td></tr><tr><td>No parameter definitions for Vector2().R180\n</td></tr><tr><td>No parameter definitions for Vector2().r270\n</td></tr><tr><td>No parameter definitions for Vector2().R270\n</td></tr><tr><td>No parameter definitions for Vector2().swap\n</td></tr><tr><td>No parameter definitions for Vector2().Swap\n</td></tr></table>\n\n          </div>"}, "last_serial": 7112084, "releases": {"20200430": [{"comment_text": "", "digests": {"md5": "38bf8b7c8bcc34c142debe3abf99c79b", "sha256": "e70dcb354d4d5027b91328f072abd0ad9e72340360a57fd84b178328a0e694a8"}, "downloads": -1, "filename": "Vector2-20200430-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "38bf8b7c8bcc34c142debe3abf99c79b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 4038, "upload_time": "2020-04-27T14:18:39", "upload_time_iso_8601": "2020-04-27T14:18:39.875887Z", "url": "https://files.pythonhosted.org/packages/9a/ab/d44ba38e677a1f3bcc2604059458e696ffbff52aa42b7632fb9941f87ee5/Vector2-20200430-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70500344174d18d49efbeeaf81012631", "sha256": "783dff87321d2d190b255ecc48e50a720e04e8224d921cb310b6ac7617eedf84"}, "downloads": -1, "filename": "Vector2-20200430.tar.gz", "has_sig": false, "md5_digest": "70500344174d18d49efbeeaf81012631", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5022, "upload_time": "2020-04-27T14:18:41", "upload_time_iso_8601": "2020-04-27T14:18:41.946877Z", "url": "https://files.pythonhosted.org/packages/e7/37/98049b7c79eb2722fcaeaa3ef9c9f5e7bcded787b39e1cf718d0e6724d5c/Vector2-20200430.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "38bf8b7c8bcc34c142debe3abf99c79b", "sha256": "e70dcb354d4d5027b91328f072abd0ad9e72340360a57fd84b178328a0e694a8"}, "downloads": -1, "filename": "Vector2-20200430-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "38bf8b7c8bcc34c142debe3abf99c79b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 4038, "upload_time": "2020-04-27T14:18:39", "upload_time_iso_8601": "2020-04-27T14:18:39.875887Z", "url": "https://files.pythonhosted.org/packages/9a/ab/d44ba38e677a1f3bcc2604059458e696ffbff52aa42b7632fb9941f87ee5/Vector2-20200430-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70500344174d18d49efbeeaf81012631", "sha256": "783dff87321d2d190b255ecc48e50a720e04e8224d921cb310b6ac7617eedf84"}, "downloads": -1, "filename": "Vector2-20200430.tar.gz", "has_sig": false, "md5_digest": "70500344174d18d49efbeeaf81012631", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5022, "upload_time": "2020-04-27T14:18:41", "upload_time_iso_8601": "2020-04-27T14:18:41.946877Z", "url": "https://files.pythonhosted.org/packages/e7/37/98049b7c79eb2722fcaeaa3ef9c9f5e7bcded787b39e1cf718d0e6724d5c/Vector2-20200430.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:14 2020"}