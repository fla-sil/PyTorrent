{"info": {"author": "David Schoonover", "author_email": "dsc@less.ly", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "bunch\r\n=====\r\n\r\nBunch is a dictionary that supports attribute-style access, a la JavaScript.\r\n\r\n>>> b = Bunch()\r\n>>> b.hello = 'world'\r\n>>> b.hello\r\n'world'\r\n>>> b['hello'] += \"!\"\r\n>>> b.hello\r\n'world!'\r\n>>> b.foo = Bunch(lol=True)\r\n>>> b.foo.lol\r\nTrue\r\n>>> b.foo is b['foo']\r\nTrue\r\n\r\n\r\nDictionary Methods\r\n------------------\r\n\r\nA Bunch is a subclass of ``dict``; it supports all the methods a ``dict`` does:\r\n\r\n>>> b.keys()\r\n['foo', 'hello']\r\n\r\nIncluding ``update()``:\r\n\r\n>>> b.update({ 'ponies': 'are pretty!' }, hello=42)\r\n>>> print repr(b)\r\nBunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\r\n\r\nAs well as iteration:\r\n\r\n>>> [ (k,b[k]) for k in b ]\r\n[('ponies', 'are pretty!'), ('foo', Bunch(lol=True)), ('hello', 42)]\r\n\r\nAnd \"splats\":\r\n\r\n>>> \"The {knights} who say {ni}!\".format(**Bunch(knights='lolcats', ni='can haz'))\r\n'The lolcats who say can haz!'\r\n\r\n\r\nSerialization\r\n-------------\r\n\r\nBunches happily and transparently serialize to JSON and YAML.\r\n\r\n>>> b = Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\r\n>>> import json\r\n>>> json.dumps(b)\r\n'{\"ponies\": \"are pretty!\", \"foo\": {\"lol\": true}, \"hello\": 42}'\r\n\r\nIf JSON support is present (``json`` or ``simplejson``), ``Bunch`` will have a ``toJSON()`` method which returns the object as a JSON string.\r\n\r\nIf you have PyYAML_ installed, Bunch attempts to register itself with the various YAML Representers so that Bunches can be transparently dumped and loaded.\r\n\r\n>>> b = Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\r\n>>> import yaml\r\n>>> yaml.dump(b)\r\n'!bunch.Bunch\\nfoo: !bunch.Bunch {lol: true}\\nhello: 42\\nponies: are pretty!\\n'\r\n>>> yaml.safe_dump(b)\r\n'foo: {lol: true}\\nhello: 42\\nponies: are pretty!\\n'\r\n\r\nIn addition, Bunch instances will have a ``toYAML()`` method that returns the YAML string using ``yaml.safe_dump()``. This method also replaces ``__str__`` if present, as I find it far more readable. You can revert back to Python's default use of ``__repr__`` with a simple assignment: ``Bunch.__str__ = Bunch.__repr__``. The Bunch class will also have a static method ``Bunch.fromYAML()``, which loads a Bunch out of a YAML string.\r\n\r\nFinally, Bunch converts easily and recursively to (``unbunchify()``, ``Bunch.toDict()``) and from (``bunchify()``, ``Bunch.fromDict()``) a normal ``dict``, making it easy to cleanly serialize them in other formats.\r\n\r\n\r\nMiscellaneous\r\n-------------\r\n\r\n* It is safe to ``import *`` from this module. You'll get: ``Bunch``, ``bunchify``, and ``unbunchify``.\r\n\r\n* Ample doctests::\r\n\r\n    $ python -m bunch.test -v\r\n\r\n\r\nFeedback\r\n--------\r\n\r\nOpen a ticket at http://github.com/dsc/bunch or send me an email at dsc@less.ly .\r\n\r\n.. _PyYAML: http://pyyaml.org/wiki/PyYAML", "description_content_type": null, "docs_url": null, "download_url": "http://pypi.python.org/packages/source/b/bunch/bunch-1.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/dsc/bunch", "keywords": "bunch,dict,mapping,container,collection", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bunch", "package_url": "https://pypi.org/project/bunch/", "platform": "", "project_url": "https://pypi.org/project/bunch/", "project_urls": {"Download": "http://pypi.python.org/packages/source/b/bunch/bunch-1.0.1.tar.gz", "Homepage": "http://github.com/dsc/bunch"}, "release_url": "https://pypi.org/project/bunch/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "A dot-accessible dictionary (a la JavaScript objects)", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Bunch is a dictionary that supports attribute-style access, a la JavaScript.</p>\n<pre>&gt;&gt;&gt; b = Bunch()\n&gt;&gt;&gt; b.hello = 'world'\n&gt;&gt;&gt; b.hello\n'world'\n&gt;&gt;&gt; b['hello'] += \"!\"\n&gt;&gt;&gt; b.hello\n'world!'\n&gt;&gt;&gt; b.foo = Bunch(lol=True)\n&gt;&gt;&gt; b.foo.lol\nTrue\n&gt;&gt;&gt; b.foo is b['foo']\nTrue\n</pre>\n<div id=\"dictionary-methods\">\n<h2>Dictionary Methods</h2>\n<p>A Bunch is a subclass of <tt>dict</tt>; it supports all the methods a <tt>dict</tt> does:</p>\n<pre>&gt;&gt;&gt; b.keys()\n['foo', 'hello']\n</pre>\n<p>Including <tt>update()</tt>:</p>\n<pre>&gt;&gt;&gt; b.update({ 'ponies': 'are pretty!' }, hello=42)\n&gt;&gt;&gt; print repr(b)\nBunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\n</pre>\n<p>As well as iteration:</p>\n<pre>&gt;&gt;&gt; [ (k,b[k]) for k in b ]\n[('ponies', 'are pretty!'), ('foo', Bunch(lol=True)), ('hello', 42)]\n</pre>\n<p>And \u201csplats\u201d:</p>\n<pre>&gt;&gt;&gt; \"The {knights} who say {ni}!\".format(**Bunch(knights='lolcats', ni='can haz'))\n'The lolcats who say can haz!'\n</pre>\n</div>\n<div id=\"serialization\">\n<h2>Serialization</h2>\n<p>Bunches happily and transparently serialize to JSON and YAML.</p>\n<pre>&gt;&gt;&gt; b = Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; json.dumps(b)\n'{\"ponies\": \"are pretty!\", \"foo\": {\"lol\": true}, \"hello\": 42}'\n</pre>\n<p>If JSON support is present (<tt>json</tt> or <tt>simplejson</tt>), <tt>Bunch</tt> will have a <tt>toJSON()</tt> method which returns the object as a JSON string.</p>\n<p>If you have <a href=\"http://pyyaml.org/wiki/PyYAML\" rel=\"nofollow\">PyYAML</a> installed, Bunch attempts to register itself with the various YAML Representers so that Bunches can be transparently dumped and loaded.</p>\n<pre>&gt;&gt;&gt; b = Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\n&gt;&gt;&gt; import yaml\n&gt;&gt;&gt; yaml.dump(b)\n'!bunch.Bunch\\nfoo: !bunch.Bunch {lol: true}\\nhello: 42\\nponies: are pretty!\\n'\n&gt;&gt;&gt; yaml.safe_dump(b)\n'foo: {lol: true}\\nhello: 42\\nponies: are pretty!\\n'\n</pre>\n<p>In addition, Bunch instances will have a <tt>toYAML()</tt> method that returns the YAML string using <tt>yaml.safe_dump()</tt>. This method also replaces <tt>__str__</tt> if present, as I find it far more readable. You can revert back to Python\u2019s default use of <tt>__repr__</tt> with a simple assignment: <tt>Bunch.__str__ = Bunch.__repr__</tt>. The Bunch class will also have a static method <tt>Bunch.fromYAML()</tt>, which loads a Bunch out of a YAML string.</p>\n<p>Finally, Bunch converts easily and recursively to (<tt>unbunchify()</tt>, <tt>Bunch.toDict()</tt>) and from (<tt>bunchify()</tt>, <tt>Bunch.fromDict()</tt>) a normal <tt>dict</tt>, making it easy to cleanly serialize them in other formats.</p>\n</div>\n<div id=\"miscellaneous\">\n<h2>Miscellaneous</h2>\n<ul>\n<li><p>It is safe to <tt>import *</tt> from this module. You\u2019ll get: <tt>Bunch</tt>, <tt>bunchify</tt>, and <tt>unbunchify</tt>.</p>\n</li>\n<li><p>Ample doctests:</p>\n<pre>$ python -m bunch.test -v\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"feedback\">\n<h2>Feedback</h2>\n<p>Open a ticket at <a href=\"http://github.com/dsc/bunch\" rel=\"nofollow\">http://github.com/dsc/bunch</a> or send me an email at <a href=\"mailto:dsc%40less.ly\">dsc<span>@</span>less<span>.</span>ly</a> .</p>\n</div>\n\n          </div>"}, "last_serial": 787125, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "944d2e8f222ed032961daa34c5b5151c", "sha256": "c3c0ee685431ae2a624e28107a2cf50ee84edfbd97297b1af207b938248eb54a"}, "downloads": -1, "filename": "bunch-1.0.0.tar.gz", "has_sig": false, "md5_digest": "944d2e8f222ed032961daa34c5b5151c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5217, "upload_time": "2010-01-26T06:33:08", "upload_time_iso_8601": "2010-01-26T06:33:08.199492Z", "url": "https://files.pythonhosted.org/packages/d9/59/139794ac055e37f90b6543143acb600b0da7c5859704daec35e0c7f59320/bunch-1.0.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "3341659771b7f5805e6efd361c8996e4", "sha256": "64b0ae772518584256df8a6a583739787c683173c8e0a2b0e71d2e87245dbdfb"}, "downloads": -1, "filename": "bunch-1.0.0.zip", "has_sig": false, "md5_digest": "3341659771b7f5805e6efd361c8996e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8311, "upload_time": "2010-01-26T06:33:07", "upload_time_iso_8601": "2010-01-26T06:33:07.283335Z", "url": "https://files.pythonhosted.org/packages/d4/16/789b94d9ea7e79538dfb155934d7cf6f12c9349f567ff6be6119238a8ca7/bunch-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0a829d64e95ed96defbcae2bf9061bb0", "sha256": "50c77a0fc0cb372dfe48b5e11937d5f70e743adbf42683f3a6d2857645a76aaa"}, "downloads": -1, "filename": "bunch-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0a829d64e95ed96defbcae2bf9061bb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6577, "upload_time": "2011-12-27T21:43:57", "upload_time_iso_8601": "2011-12-27T21:43:57.873610Z", "url": "https://files.pythonhosted.org/packages/ef/bf/a4cf1779a4ffb4f610903fa08e15d1f4a8a2f4e3353a02afbe097c5bf4a8/bunch-1.0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d89b4e6ac970368cba8d8d47b2ba915", "sha256": "3c554816ba260634b55c1edf8de6467d8122dbd18ec20f323e181869bc48ac93"}, "downloads": -1, "filename": "bunch-1.0.1.zip", "has_sig": false, "md5_digest": "1d89b4e6ac970368cba8d8d47b2ba915", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11108, "upload_time": "2011-12-27T21:43:56", "upload_time_iso_8601": "2011-12-27T21:43:56.663580Z", "url": "https://files.pythonhosted.org/packages/cc/56/ceef9c8c12600a1ceb3dcefdd9e5094c72fbdba0c3af785b4a69205022c1/bunch-1.0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0a829d64e95ed96defbcae2bf9061bb0", "sha256": "50c77a0fc0cb372dfe48b5e11937d5f70e743adbf42683f3a6d2857645a76aaa"}, "downloads": -1, "filename": "bunch-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0a829d64e95ed96defbcae2bf9061bb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6577, "upload_time": "2011-12-27T21:43:57", "upload_time_iso_8601": "2011-12-27T21:43:57.873610Z", "url": "https://files.pythonhosted.org/packages/ef/bf/a4cf1779a4ffb4f610903fa08e15d1f4a8a2f4e3353a02afbe097c5bf4a8/bunch-1.0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d89b4e6ac970368cba8d8d47b2ba915", "sha256": "3c554816ba260634b55c1edf8de6467d8122dbd18ec20f323e181869bc48ac93"}, "downloads": -1, "filename": "bunch-1.0.1.zip", "has_sig": false, "md5_digest": "1d89b4e6ac970368cba8d8d47b2ba915", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11108, "upload_time": "2011-12-27T21:43:56", "upload_time_iso_8601": "2011-12-27T21:43:56.663580Z", "url": "https://files.pythonhosted.org/packages/cc/56/ceef9c8c12600a1ceb3dcefdd9e5094c72fbdba0c3af785b4a69205022c1/bunch-1.0.1.zip", "yanked": false}], "timestamp": "Thu May  7 22:35:59 2020"}