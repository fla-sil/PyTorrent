{"info": {"author": "Fabien MARTY", "author_email": "fabien.marty@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "## What is it ?\n\nIt is an opinionated python (structured) logging library built on [structlog](https://www.structlog.org/)\nfor the [MetWork Framework](http://metwork-framework.org) (but it can be used in any context).\n\n- [Coverage](https://metwork-framework.org/pub/misc/mflog/coverage/)\n\n> Structured logging means that you don\u2019t write hard-to-parse and hard-to-keep-consistent prose in your logs but that you log events that happen in a context instead.\n> - https://www.structlog.org/en/stable/why.html\n\nExample:\n\n```python\n\nfrom mflog import get_logger\n\n# Get a logger\nlog = get_logger(\"foo.bar\")\n\n# Bind some attributes to the logger depending on the context\nlog = log.bind(user=\"john\")\nlog = log.bind(user_id=123)\n\n# [...]\n\n# Log something\nlog.warning(\"user logged in\", happy=True, another_key=42)\n```\n\nOn `stderr`, you will get:\n\n```\n2019-01-28T07:52:42.903067Z  [WARNING] (foo.bar#7343) user logged in {another_key=42 happy=True user=john user_id=123}\n```\n\nOn `json output file`, you will get:\n\n```json\n{\n    \"timestamp\": \"2019-01-28T08:16:40.047710Z\",\n    \"level\": \"warning\",\n    \"name\": \"foo.bar\",\n    \"pid\": 29317,\n    \"event\": \"user logged in\",\n    \"another_key\": 42,\n    \"happy\": true,\n    \"user\": \"john\",\n    \"user_id\": 123\n}\n```\n\n## (opinionated) Choices and Features\n\n- we use main ideas from `structlog` library\n- we log `[DEBUG]` and `[INFO]` messages on `stdout` (in a human friendly way)\n- we log `[WARNING]`, `[ERROR]` and `[CRITICAL]` on `stderr` (in a human friendly way)\n- (and optionally) we log all messages (worse than a minimal configurable level) in a configurable file in `JSON` (for easy automatic parsing)\n- (and optionally) we send all messages (worse than a minimal configurable level) to an UDP syslog server (in JSON or in plain text)\n- we can configure a global minimal level to ignore all messages below\n- we reconfigure automatically python standard logging library to use `mflog`\n- Unicode and Bytes messages are supported (in Python2 and Python3)\n- good support for exceptions (with backtraces)\n- override easily minimal levels (for patterns of logger names) programmatically or with plain text configuration files\n\n## How to use ?\n\nA `mflog` logger can be used as a standard `logging` logger.\n\nFor example:\n\n```python\n# Import\nfrom mflog import get_logger\n\n# Get a logger\nx = get_logger(\"foo.bar\")\n\n# Usage\nx.warning(\"basic message\")\nx.critical(\"message with templates: %i, %s\", 2, \"foo\")\nx.debug(\"message with key/values\", foo=True, bar=\"string\")\n\ntry:\n    1/0\nexcept Exception:\n    x.exception(\"we catched an exception with automatic traceback\")\n\nx = log.bind(context1=\"foo\")\nx = log.bind(context2=\"bar\")\nx.info(\"this is a contexted message\", extra_var=123)\n```\n\n## How to configure ?\n\n### In python\n\n```python\nimport mflog\n\n# Configure\nmflog.set_config(minimal_level=\"DEBUG\", json_minimal_level=\"WARNING\",\n                 json_file=\"/foo/bar/my_output.json\")\n\n# Get a logger\nx = mflog.get_logger(\"foo.bar\")\n\n# [...]\n```\n\n### With environment variables\n\n```bash\n\n$ export MFLOG_MINIMAL_LEVEL=\"DEBUG\"\n$ export MFLOG_JSON_MINIMAL_LEVEL=\"WARNING\"\n$ export MFLOG_JSON_FILE=\"/foo/bar/my_output.json\"\n\n$ python\n\n>>> import mflog\n>>>\n>>> # Get a logger\n>>> x = mflog.get_logger(\"foo.bar\")\n>>>\n>>> # [...]\n```\n\n### Note\n\nWhen you get a `mflog` logger, if default configuration is applied automatically\nif not set manually before.\n\n## How to override minimal level for a specific logger\n\nIf you have a \"noisy\" specific logger, you can override its minimal log level.\n\nThe idea is to configure this in a file like this:\n\n```\n# lines beginning with # are comments\n\n# this line say 'foo.bar' logger will have a minimal level of WARNING\nfoo.bar => WARNING\n\n# this line say 'foo.*' loggers will have a minimal level of DEBUG\n# (see python fnmatch for accepted wildcards)\nfoo.* => DEBUG\n\n# The first match wins\n```\n\nThen, you can use\n\n```python\n\n# yes we use a list here because you can use several files\n# (the first match wins)\nmflog.configure([...], override_files=[\"/full/path/to/your/override.conf\"])\n```\n\nor\n\n```\n# if you want to provide multiple files, use ';' as a separator\nexport MFLOG_MINIMAL_LEVEL_OVERRIDE_FILES=/full/path/to/your/override.conf\n```\n\n## Link with standard python logging library\n\nWhen you get a `mflog` logger or when you call `set_config()` function,\nthe standard python `logging` library is reconfigured to use `mflog`.\n\nExample:\n\n```python\nimport logging\nimport mflog\n\n# standard use of logging library\nx = logging.getLogger(\"standard.logger\")\nprint(\"<output of the standard logging library>\")\nx.warning(\"foo bar\")\nprint(\"</output of the standard logging library>\")\n\n# we set the mflog configuration\nmflog.set_config()\n\n# now logging library use mflog\nprint()\nprint(\"<output of the standard logging library through mflog>\")\nx.warning(\"foo bar\")\nprint(\"</output of the standard logging library through mflog>\")\n```\n\nOutput:\n\n```\n<output of the standard logging library>\nfoo bar\n</output of the standard logging library>\n\n<output of the standard logging library through mflog>\n2019-01-29T09:32:37.093240Z  [WARNING] (standard.logger#15809) foo bar\n</output of the standard logging library through mflog>\n```\n\n## mflog loggers API\n\n### `.debug(message, *args, **kwargs)`\n\nLog the given message as `[DEBUG]`.\n\n- `*args` can be used for placeholders (to format the given message)\n- `**kwargs` can be used for key/values (log context).\n\nExamples:\n\n```python\nfrom mflog import get_logger\n\nx = get_logger('my.logger')\nx.debug(\"my debug message with placeholders: %s and %i\", \"foo\", 123,\n        key1=\"value1, key2=True, key5=123)\n```\n\n### `.info(message, *args, **kwargs)`\n\nSame as `.debug` but with `[INFO]` severity level.\n\n### `.warning(message, *args, **kwargs)`\n\nSame as `.debug` but with `[WARNING]` severity level.\n\n### `.error(message, *args, **kwargs)`\n\nSame as `.debug` but with `[ERROR]` severity level.\n\n### `.critical(message, *args, **kwargs)`\n\nSame as `.debug` but with `[CRITICAL]` severity level.\n\n### `.exception(message, *args, **kwargs)`\n\nSame as `.error` (so with `[ERROR]` severity level) but we automatically add\nthe current stacktrace in the message through special key/values.\n\n### `.bind(**new_values)`\n\nReturn a new logger with `**new_values` added to the existing ones\n(see examples at the beginning).\n\n### `.unbind(*keys)`\n\nReturn a new logger with `*keys` removed from the context.\nIt raises `KeyError` if the key is not part of the context.\n\n### `.try_unbind(*keys)`\n\nLike `.unbind` but best effort:  missing keys are ignored.\n\n## FAQ\n\n## If I want to use mflog inside my library ?\n\nIf you write a library and if you want to use `mflog`, use `mflog` normally.\nYou just should avoid to call `set_config()` inside your library.\n\n\n## Do you have \"thread local context mode\" ?\n\nThis mode is explained [here](https://www.structlog.org/en/stable/thread-local.html).\n\nYou have to understand what you are doing.\n\nIf you want to use it, just add `thread_local_context=True` to your `set_config()`\ncall. And you can use `.new(**new_values)` on mflog loggers to clear context\nand binds some initial values.\n\n\n## Can I globally add an extra context to each log line ?\n\nIf you add `extra_context_func=your_python_func` to your `set_config()` call,\nand if `your_python_func` returns a dict of key/values as strings when called\nwith no argument, these key/values will be added to your log context.\n\nAnother way to do that without even calling `set_config()` is to define\nan environment variable called `MFLOG_EXTRA_CONTEXT_FUNC` containing the\nfull path to your python func.\n\nFull example:\n\n```bash\n# in shell\nexport MFLOG_EXTRA_CONTEXT_FUNC=\"mflog.unittests.extra_context\"\n```\n\nthen, in your python interpreter:\n\n```python\n>>> from mflog import get_logger\n>>> get_logger(\"foo\").info(\"bar\")\n2019-04-11T07:32:53.517260Z     [INFO] (foo#15379) bar {extra_context_key1=extra_context_value1 extra_context_key2=extra_context_value2}\n```\n\nHere is the code of `mflog.unittests.extra_context`:\n\n```python\ndef extra_context():\n    return {\"extra_context_key1\": \"extra_context_value1\",\n            \"extra_context_key2\": \"extra_context_value2\"}\n```\n\n## Can I filter some context keys in stdout/stderr output (but keep them in json output) ?\n\nYes, add `json_only_keys=[\"key1\", \"key2\"]` to your `set_config()` call or use\n`MFLOG_JSON_ONLY_KEYS=key1,key2` environment variable.\n\n## What about if I don't want to redirect standard python `logging` to `mflog` ?\n\nYou can add `standard_logging_redirect=False` in your `set_config()` call\nof set `MFLOG_STANDARD_LOGGING_REDIRECT=0` environment variable.\n\n## Can I silent a specific noisy logger?\n\nYou can use `override_files` feature to do that or you can also use the\n`mflog.add_override` function.\n\nFor example:\n\n```python\nimport mflog\n\n# for all mylogger.* loggers (fnmatch pattern), the minimal level is CRITICAL\nmflog.add_override(\"mylogger.*\", CRITICAL)\n\n# Not very interesting but this call will be ignored\nmflog.get_logger(\"mylogger.foo\").warning(\"foo\")\n```\n\n## How can I use syslog logging?\n\nYou can configure it with these keyword arguments during `set_config()` call:\n\n- `syslog_minimal_level`: `WARNING`, `CRITICAL`...\n- `syslog_address`: `null` (no syslog (defaut)), `127.0.0.1:514` (send packets to 127.0.0.1:514), `/dev/log` (unix socket)...\n- `syslog_format`: `msg_only` (default) or `json`\n\nor with corresponding env vars:\n\n- `MFLOG_SYSLOG_MINIMAL_LEVEL`\n- `MFLOG_SYSLOG_ADDRESS`\n- `MFLOG_SYSLOG_FORMAT`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/metwork-framework/mflog", "keywords": "", "license": "BSD 3", "maintainer": "", "maintainer_email": "", "name": "mflog", "package_url": "https://pypi.org/project/mflog/", "platform": "", "project_url": "https://pypi.org/project/mflog/", "project_urls": {"Homepage": "https://github.com/metwork-framework/mflog"}, "release_url": "https://pypi.org/project/mflog/0.0.2/", "requires_dist": ["structlog (>=19.1.0)"], "requires_python": ">=2.7", "summary": "opinionated python (structured) logging library built on structlog", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>What is it ?</h2>\n<p>It is an opinionated python (structured) logging library built on <a href=\"https://www.structlog.org/\" rel=\"nofollow\">structlog</a>\nfor the <a href=\"http://metwork-framework.org\" rel=\"nofollow\">MetWork Framework</a> (but it can be used in any context).</p>\n<ul>\n<li><a href=\"https://metwork-framework.org/pub/misc/mflog/coverage/\" rel=\"nofollow\">Coverage</a></li>\n</ul>\n<blockquote>\n<p>Structured logging means that you don\u2019t write hard-to-parse and hard-to-keep-consistent prose in your logs but that you log events that happen in a context instead.</p>\n<ul>\n<li><a href=\"https://www.structlog.org/en/stable/why.html\" rel=\"nofollow\">https://www.structlog.org/en/stable/why.html</a></li>\n</ul>\n</blockquote>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mflog</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span>\n\n<span class=\"c1\"># Get a logger</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Bind some attributes to the logger depending on the context</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s2\">\"john\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [...]</span>\n\n<span class=\"c1\"># Log something</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">\"user logged in\"</span><span class=\"p\">,</span> <span class=\"n\">happy</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">another_key</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n</pre>\n<p>On <code>stderr</code>, you will get:</p>\n<pre><code>2019-01-28T07:52:42.903067Z  [WARNING] (foo.bar#7343) user logged in {another_key=42 happy=True user=john user_id=123}\n</code></pre>\n<p>On <code>json output file</code>, you will get:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-01-28T08:16:40.047710Z\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"warning\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo.bar\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"pid\"</span><span class=\"p\">:</span> <span class=\"mi\">29317</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"user logged in\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"another_key\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"happy\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"user\"</span><span class=\"p\">:</span> <span class=\"s2\">\"john\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"user_id\"</span><span class=\"p\">:</span> <span class=\"mi\">123</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>(opinionated) Choices and Features</h2>\n<ul>\n<li>we use main ideas from <code>structlog</code> library</li>\n<li>we log <code>[DEBUG]</code> and <code>[INFO]</code> messages on <code>stdout</code> (in a human friendly way)</li>\n<li>we log <code>[WARNING]</code>, <code>[ERROR]</code> and <code>[CRITICAL]</code> on <code>stderr</code> (in a human friendly way)</li>\n<li>(and optionally) we log all messages (worse than a minimal configurable level) in a configurable file in <code>JSON</code> (for easy automatic parsing)</li>\n<li>(and optionally) we send all messages (worse than a minimal configurable level) to an UDP syslog server (in JSON or in plain text)</li>\n<li>we can configure a global minimal level to ignore all messages below</li>\n<li>we reconfigure automatically python standard logging library to use <code>mflog</code></li>\n<li>Unicode and Bytes messages are supported (in Python2 and Python3)</li>\n<li>good support for exceptions (with backtraces)</li>\n<li>override easily minimal levels (for patterns of logger names) programmatically or with plain text configuration files</li>\n</ul>\n<h2>How to use ?</h2>\n<p>A <code>mflog</code> logger can be used as a standard <code>logging</code> logger.</p>\n<p>For example:</p>\n<pre><span class=\"c1\"># Import</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mflog</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span>\n\n<span class=\"c1\"># Get a logger</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Usage</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">\"basic message\"</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s2\">\"message with templates: </span><span class=\"si\">%i</span><span class=\"s2\">, </span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"message with key/values\"</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s2\">\"string\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">0</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n    <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"s2\">\"we catched an exception with automatic traceback\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">context1</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">context2</span><span class=\"o\">=</span><span class=\"s2\">\"bar\"</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"this is a contexted message\"</span><span class=\"p\">,</span> <span class=\"n\">extra_var</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n</pre>\n<h2>How to configure ?</h2>\n<h3>In python</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mflog</span>\n\n<span class=\"c1\"># Configure</span>\n<span class=\"n\">mflog</span><span class=\"o\">.</span><span class=\"n\">set_config</span><span class=\"p\">(</span><span class=\"n\">minimal_level</span><span class=\"o\">=</span><span class=\"s2\">\"DEBUG\"</span><span class=\"p\">,</span> <span class=\"n\">json_minimal_level</span><span class=\"o\">=</span><span class=\"s2\">\"WARNING\"</span><span class=\"p\">,</span>\n                 <span class=\"n\">json_file</span><span class=\"o\">=</span><span class=\"s2\">\"/foo/bar/my_output.json\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get a logger</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">mflog</span><span class=\"o\">.</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [...]</span>\n</pre>\n<h3>With environment variables</h3>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">MFLOG_MINIMAL_LEVEL</span><span class=\"o\">=</span><span class=\"s2\">\"DEBUG\"</span>\n$ <span class=\"nb\">export</span> <span class=\"nv\">MFLOG_JSON_MINIMAL_LEVEL</span><span class=\"o\">=</span><span class=\"s2\">\"WARNING\"</span>\n$ <span class=\"nb\">export</span> <span class=\"nv\">MFLOG_JSON_FILE</span><span class=\"o\">=</span><span class=\"s2\">\"/foo/bar/my_output.json\"</span>\n\n$ python\n\n&gt;&gt;&gt; import mflog\n&gt;&gt;&gt;\n&gt;&gt;&gt; <span class=\"c1\"># Get a logger</span>\n&gt;&gt;&gt; <span class=\"nv\">x</span> <span class=\"o\">=</span> mflog.get_logger<span class=\"o\">(</span><span class=\"s2\">\"foo.bar\"</span><span class=\"o\">)</span>\n&gt;&gt;&gt;\n&gt;&gt;&gt; <span class=\"c1\"># [...]</span>\n</pre>\n<h3>Note</h3>\n<p>When you get a <code>mflog</code> logger, if default configuration is applied automatically\nif not set manually before.</p>\n<h2>How to override minimal level for a specific logger</h2>\n<p>If you have a \"noisy\" specific logger, you can override its minimal log level.</p>\n<p>The idea is to configure this in a file like this:</p>\n<pre><code># lines beginning with # are comments\n\n# this line say 'foo.bar' logger will have a minimal level of WARNING\nfoo.bar =&gt; WARNING\n\n# this line say 'foo.*' loggers will have a minimal level of DEBUG\n# (see python fnmatch for accepted wildcards)\nfoo.* =&gt; DEBUG\n\n# The first match wins\n</code></pre>\n<p>Then, you can use</p>\n<pre><span class=\"c1\"># yes we use a list here because you can use several files</span>\n<span class=\"c1\"># (the first match wins)</span>\n<span class=\"n\">mflog</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">([</span><span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">override_files</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"/full/path/to/your/override.conf\"</span><span class=\"p\">])</span>\n</pre>\n<p>or</p>\n<pre><code># if you want to provide multiple files, use ';' as a separator\nexport MFLOG_MINIMAL_LEVEL_OVERRIDE_FILES=/full/path/to/your/override.conf\n</code></pre>\n<h2>Link with standard python logging library</h2>\n<p>When you get a <code>mflog</code> logger or when you call <code>set_config()</code> function,\nthe standard python <code>logging</code> library is reconfigured to use <code>mflog</code>.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mflog</span>\n\n<span class=\"c1\"># standard use of logging library</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">\"standard.logger\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;output of the standard logging library&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">\"foo bar\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;/output of the standard logging library&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># we set the mflog configuration</span>\n<span class=\"n\">mflog</span><span class=\"o\">.</span><span class=\"n\">set_config</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># now logging library use mflog</span>\n<span class=\"nb\">print</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;output of the standard logging library through mflog&gt;\"</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">\"foo bar\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;/output of the standard logging library through mflog&gt;\"</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><code>&lt;output of the standard logging library&gt;\nfoo bar\n&lt;/output of the standard logging library&gt;\n\n&lt;output of the standard logging library through mflog&gt;\n2019-01-29T09:32:37.093240Z  [WARNING] (standard.logger#15809) foo bar\n&lt;/output of the standard logging library through mflog&gt;\n</code></pre>\n<h2>mflog loggers API</h2>\n<h3><code>.debug(message, *args, **kwargs)</code></h3>\n<p>Log the given message as <code>[DEBUG]</code>.</p>\n<ul>\n<li><code>*args</code> can be used for placeholders (to format the given message)</li>\n<li><code>**kwargs</code> can be used for key/values (log context).</li>\n</ul>\n<p>Examples:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mflog</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s1\">'my.logger'</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"my debug message with placeholders: </span><span class=\"si\">%s</span><span class=\"s2\"> and </span><span class=\"si\">%i</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n        <span class=\"n\">key1</span><span class=\"o\">=</span><span class=\"s2\">\"value1, key2=True, key5=123)</span>\n</pre>\n<h3><code>.info(message, *args, **kwargs)</code></h3>\n<p>Same as <code>.debug</code> but with <code>[INFO]</code> severity level.</p>\n<h3><code>.warning(message, *args, **kwargs)</code></h3>\n<p>Same as <code>.debug</code> but with <code>[WARNING]</code> severity level.</p>\n<h3><code>.error(message, *args, **kwargs)</code></h3>\n<p>Same as <code>.debug</code> but with <code>[ERROR]</code> severity level.</p>\n<h3><code>.critical(message, *args, **kwargs)</code></h3>\n<p>Same as <code>.debug</code> but with <code>[CRITICAL]</code> severity level.</p>\n<h3><code>.exception(message, *args, **kwargs)</code></h3>\n<p>Same as <code>.error</code> (so with <code>[ERROR]</code> severity level) but we automatically add\nthe current stacktrace in the message through special key/values.</p>\n<h3><code>.bind(**new_values)</code></h3>\n<p>Return a new logger with <code>**new_values</code> added to the existing ones\n(see examples at the beginning).</p>\n<h3><code>.unbind(*keys)</code></h3>\n<p>Return a new logger with <code>*keys</code> removed from the context.\nIt raises <code>KeyError</code> if the key is not part of the context.</p>\n<h3><code>.try_unbind(*keys)</code></h3>\n<p>Like <code>.unbind</code> but best effort:  missing keys are ignored.</p>\n<h2>FAQ</h2>\n<h2>If I want to use mflog inside my library ?</h2>\n<p>If you write a library and if you want to use <code>mflog</code>, use <code>mflog</code> normally.\nYou just should avoid to call <code>set_config()</code> inside your library.</p>\n<h2>Do you have \"thread local context mode\" ?</h2>\n<p>This mode is explained <a href=\"https://www.structlog.org/en/stable/thread-local.html\" rel=\"nofollow\">here</a>.</p>\n<p>You have to understand what you are doing.</p>\n<p>If you want to use it, just add <code>thread_local_context=True</code> to your <code>set_config()</code>\ncall. And you can use <code>.new(**new_values)</code> on mflog loggers to clear context\nand binds some initial values.</p>\n<h2>Can I globally add an extra context to each log line ?</h2>\n<p>If you add <code>extra_context_func=your_python_func</code> to your <code>set_config()</code> call,\nand if <code>your_python_func</code> returns a dict of key/values as strings when called\nwith no argument, these key/values will be added to your log context.</p>\n<p>Another way to do that without even calling <code>set_config()</code> is to define\nan environment variable called <code>MFLOG_EXTRA_CONTEXT_FUNC</code> containing the\nfull path to your python func.</p>\n<p>Full example:</p>\n<pre><span class=\"c1\"># in shell</span>\n<span class=\"nb\">export</span> <span class=\"nv\">MFLOG_EXTRA_CONTEXT_FUNC</span><span class=\"o\">=</span><span class=\"s2\">\"mflog.unittests.extra_context\"</span>\n</pre>\n<p>then, in your python interpreter:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">mflog</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"bar\"</span><span class=\"p\">)</span>\n<span class=\"mi\">2019</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"n\">T07</span><span class=\"p\">:</span><span class=\"mi\">32</span><span class=\"p\">:</span><span class=\"mf\">53.517260</span><span class=\"n\">Z</span>     <span class=\"p\">[</span><span class=\"n\">INFO</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"c1\">#15379) bar {extra_context_key1=extra_context_value1 extra_context_key2=extra_context_value2}</span>\n</pre>\n<p>Here is the code of <code>mflog.unittests.extra_context</code>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">extra_context</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"extra_context_key1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"extra_context_value1\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"extra_context_key2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"extra_context_value2\"</span><span class=\"p\">}</span>\n</pre>\n<h2>Can I filter some context keys in stdout/stderr output (but keep them in json output) ?</h2>\n<p>Yes, add <code>json_only_keys=[\"key1\", \"key2\"]</code> to your <code>set_config()</code> call or use\n<code>MFLOG_JSON_ONLY_KEYS=key1,key2</code> environment variable.</p>\n<h2>What about if I don't want to redirect standard python <code>logging</code> to <code>mflog</code> ?</h2>\n<p>You can add <code>standard_logging_redirect=False</code> in your <code>set_config()</code> call\nof set <code>MFLOG_STANDARD_LOGGING_REDIRECT=0</code> environment variable.</p>\n<h2>Can I silent a specific noisy logger?</h2>\n<p>You can use <code>override_files</code> feature to do that or you can also use the\n<code>mflog.add_override</code> function.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mflog</span>\n\n<span class=\"c1\"># for all mylogger.* loggers (fnmatch pattern), the minimal level is CRITICAL</span>\n<span class=\"n\">mflog</span><span class=\"o\">.</span><span class=\"n\">add_override</span><span class=\"p\">(</span><span class=\"s2\">\"mylogger.*\"</span><span class=\"p\">,</span> <span class=\"n\">CRITICAL</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Not very interesting but this call will be ignored</span>\n<span class=\"n\">mflog</span><span class=\"o\">.</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"s2\">\"mylogger.foo\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">)</span>\n</pre>\n<h2>How can I use syslog logging?</h2>\n<p>You can configure it with these keyword arguments during <code>set_config()</code> call:</p>\n<ul>\n<li><code>syslog_minimal_level</code>: <code>WARNING</code>, <code>CRITICAL</code>...</li>\n<li><code>syslog_address</code>: <code>null</code> (no syslog (defaut)), <code>127.0.0.1:514</code> (send packets to 127.0.0.1:514), <code>/dev/log</code> (unix socket)...</li>\n<li><code>syslog_format</code>: <code>msg_only</code> (default) or <code>json</code></li>\n</ul>\n<p>or with corresponding env vars:</p>\n<ul>\n<li><code>MFLOG_SYSLOG_MINIMAL_LEVEL</code></li>\n<li><code>MFLOG_SYSLOG_ADDRESS</code></li>\n<li><code>MFLOG_SYSLOG_FORMAT</code></li>\n</ul>\n\n          </div>"}, "last_serial": 7180147, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "3fccaf4d95256b1b88d26c85266564b5", "sha256": "a27cff2b31828aafe8a5276a51405b340415cec25578ab1626fb00cc4c6e13e7"}, "downloads": -1, "filename": "mflog-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3fccaf4d95256b1b88d26c85266564b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 14363, "upload_time": "2020-05-06T13:04:33", "upload_time_iso_8601": "2020-05-06T13:04:33.154824Z", "url": "https://files.pythonhosted.org/packages/13/9a/ec686f847424952d6c2baf803f663dc9b66ef6a8570d2e5e17e8bd2591c0/mflog-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47769e77555fbdfcf9ac56d6df46380b", "sha256": "80f19647eafe99602cd5a97b9f9ffbf2be4d7b9812f015e7474059b4bdb50163"}, "downloads": -1, "filename": "mflog-0.0.2.tar.gz", "has_sig": false, "md5_digest": "47769e77555fbdfcf9ac56d6df46380b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 16229, "upload_time": "2020-05-06T13:04:34", "upload_time_iso_8601": "2020-05-06T13:04:34.156090Z", "url": "https://files.pythonhosted.org/packages/32/ca/8baa2e09ed83c529769659e0dc27502e223505b64058143e2f47520827e8/mflog-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3fccaf4d95256b1b88d26c85266564b5", "sha256": "a27cff2b31828aafe8a5276a51405b340415cec25578ab1626fb00cc4c6e13e7"}, "downloads": -1, "filename": "mflog-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3fccaf4d95256b1b88d26c85266564b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 14363, "upload_time": "2020-05-06T13:04:33", "upload_time_iso_8601": "2020-05-06T13:04:33.154824Z", "url": "https://files.pythonhosted.org/packages/13/9a/ec686f847424952d6c2baf803f663dc9b66ef6a8570d2e5e17e8bd2591c0/mflog-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47769e77555fbdfcf9ac56d6df46380b", "sha256": "80f19647eafe99602cd5a97b9f9ffbf2be4d7b9812f015e7474059b4bdb50163"}, "downloads": -1, "filename": "mflog-0.0.2.tar.gz", "has_sig": false, "md5_digest": "47769e77555fbdfcf9ac56d6df46380b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 16229, "upload_time": "2020-05-06T13:04:34", "upload_time_iso_8601": "2020-05-06T13:04:34.156090Z", "url": "https://files.pythonhosted.org/packages/32/ca/8baa2e09ed83c529769659e0dc27502e223505b64058143e2f47520827e8/mflog-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:30 2020"}