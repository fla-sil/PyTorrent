{"info": {"author": "Steve Moss", "author_email": "gawbul@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Topic :: Internet", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=============\npyEnsemblRest\n=============\n\n``pyEnsemblRest`` is a simple Python wrapper around the EnsEMBL REST API\n\n.. image:: https://travis-ci.org/pyOpenSci/pyEnsemblRest.svg?branch=master\n    :target: https://travis-ci.org/pyOpenSci/pyEnsemblRest\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/pyOpenSci/pyEnsemblRest/badge.svg?branch=master\n    :target: https://coveralls.io/github/pyOpenSci/pyEnsemblRest?branch=master\n    :alt: Code Coverage\n\n.. image:: https://img.shields.io/scrutinizer/g/pyOpenSci/pyEnsemblRest.svg?maxAge=2592000\n    :target: https://img.shields.io/scrutinizer/g/pyOpenSci/pyEnsemblRest.svg?maxAge=2592000\n    :alt: Code Quality\n\n.. image:: https://img.shields.io/gitter/room/pyOpenSci/pyEnsemblRest.js.svg?maxAge=2592000\n    :target: https://gitter.im/pyOpenSci/pyEnsemblRest\n    :alt: Gitter Chat\n\n.. image:: https://img.shields.io/pypi/v/pyensemblrest.svg?maxAge=2592000\n    :target: https://pypi.python.org/pypi/pyensemblrest\n    :alt: PyPi Package\n\n.. image:: https://img.shields.io/github/downloads/pyOpenSci/pyEnsemblRest/total.svg?maxAge=2592000\n    :target: https://github.com/pyOpenSci/pyEnsemblRest\n    :alt: GitHub Downloads\n\n.. image:: https://img.shields.io/pypi/dd/pyensemblrest.svg?maxAge=2592000\n    :target: https://img.shields.io/pypi/dd/pyensemblrest.svg?maxAge=2592000\n    :alt: PyPi Downloads\n    \nLicense\n=======\n\npyEnsemblRest - A wrapper for the EnsEMBL REST API\n\nCopyright (C) 2013-2016, Steve Moss\n\npyEnsemblRest is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\npyEnsemblRest is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with pyEnsemblRest.  If not, see <http://www.gnu.org/licenses/>.\n\n\nInstallation\n============\n\nUsing pip\n---------\n\nSimply type:\n\n.. code:: bash\n\n  pip install pyensemblrest\n\n\nFrom source\n-----------\n\nClone the pyEnsemblRest then install package from source:\n\n.. code:: bash\n\n  git clone https://github.com/pyOpenSci/pyEnsemblRest.git\n  cd pyEnsemblRest\n  sudo python setup.py install\n\nUsage\n=====\n\nTo import an setup a new EnsemblRest object you should do the following:\n\n.. code:: python\n\n  from ensemblrest import EnsemblRest\n  ensRest = EnsemblRest()\n\nEnsemblRest() istance points to http://rest.ensembl.org/ . In order to use EnsemblGenome, you can import a different object:\n\n.. code:: python\n\n  from ensemblrest import EnsemblGenomeRest\n  ensGenomeRest = EnsemblGenomeRest()\n\nOr, as an alternative, you can give a different base url during EnsemblRest class instantiation:\n\n.. code:: python\n\n  from ensemblrest import EnsemblRest\n  ensGenomeRest = EnsemblRest(base_url='http://rest.ensemblgenomes.org')\n\nTo use a custom EnsEMBL REST server you should setup the EnsemblRest as the precedent way:\n\n.. code:: python\n\n  from ensemblrest import EnsemblRest\n  # setup rest object to point to localhost server. The 3000 stands for REST default port\n  ensRest = EnsemblRest(base_url='http://localhost:3000')\n\nYou may also provide proxy server settings in the form of a dict, as follows:\n\n.. code:: python\n\n  from ensemblrest import EnsemblRest\n  # setup rest object to point to a proxy server\n  ensRest = EnsemblRest(proxies={'http':'proxy.address.com:3128', 'https':'proxy.address.com:3128'})\n\nEnsEMBL has a rate-limit policy to deal with requests. You can do up to 15 requests per second. You could wait a little during your requests:\n\n.. code:: python\n\n  from time import sleep\n  # sleep for a second so we don't get rate-limited\n  sleep(1)\n\nAlternatively this library verifies and limits your requests to 15 requests per second. Avoid to run different python processes to get your data, otherwise you will be blacklisted by ensembl team. If you have to do a lot or requests, consider to use POST supported endpoints, or contact ensembl team to add POST support to endpoints of your interest.\n\nGET endpoints\n-------------\n\nEnsemblRest and EnsemblGenomeRest class methods are not defined in libraries, so you cannot see docstring using help() method on python or ipython terminal. However you can see all methods available for ensembl_ and ensemblgenomes_ rest server once class is instantiate. To get help on a particular method, please refer to ensembl help documentation on different endpoints in the ensembl_ and ensemblgenomes_ rest service. Please note that endpoints on ensembl_ may be different from ensemblgenomes_ endpoints.\nIf you look, for example, at sequence_ endpoint documentation, you will find optional and required parameters. Required parameters must be specified in order to work properly, otherwise you will get an exception. Optional parameters may be specified or not, depending on your request. In all cases parameter name are the same used in documentation. For example to get data using sequence_ endpoint, you must specify at least required parameters:\n\n.. code:: python\n\n  seq = ensRest.getSequenceById(id='ENSG00000157764')\n\nIn order to mask sequence and to expand the 5' UTR you may set optional parameters using the same name described in documentation:\n\n.. code:: python\n\n  seq = ensRest.getSequenceById(id='ENSG00000157764', mask=\"soft\", expand_5prime=1000)\n\nMultiple values for a certain parameters (for GET methods) can be submitted in a list. For example, to get the same results of\n\n.. code:: bash\n\n  curl 'http://rest.ensembl.org/overlap/region/human/7:140424943-140624564?feature=gene;feature=transcript;feature=cds;feature=exon' -H 'Content-type:application/json'\n\nas described in `overlap region`_ GET endpoint, you can use the following function:\n\n.. code:: python\n\n  data = ensRest.getOverlapByRegion(species=\"human\", region=\"7:140424943-140624564\", feature=[\"gene\", \"transcript\", \"cds\", \"exon\"])\n\n.. _overlap region: http://rest.ensembl.org/documentation/info/overlap_region\n\nPOST endpoints\n--------------\n\nPOST endpoints can be used as the GET endpoints, the only difference is that they support parameters in python list in order to perform multiple queries on the same ensembl endpoint. The parameters name are the same used in documentation, for example we can use the `POST sequence`_ endpoint in such way:\n\n.. code:: python\n\n  seqs = ensRest.getSequenceByMultipleIds(ids=[\"ENSG00000157764\", \"ENSG00000248378\" ])\n\nwhere the example value ``{ \"ids\" : [\"ENSG00000157764\", \"ENSG00000248378\" ] }`` is converted in the non-positional argument ``ids=[\"ENSG00000157764\", \"ENSG00000248378\" ]``. As the previous example, we can add optional parameters:\n\n.. code:: python\n\n  seqs = ensRest.getSequenceByMultipleIds(ids=[\"ENSG00000157764\", \"ENSG00000248378\"], mask=\"soft\")\n\nChange the default Output format\n--------------------------------\n\nYou can change the default output format by passing a supported ``Content-type`` using\nthe ``content_type`` parameter, for example:\n\n.. code:: python\n\n  plain_xml = ensRest.getArchiveById(id='ENSG00000157764', content_type=\"text/xml\")\n\nFor a complete list of supported ``Content-type`` see `Supported MIME Types`_ from\nensembl REST documentation. You need also to check if the same ``Content-type``\nis supported in the EnsEMBL endpoint description.\n\n.. _Supported MIME Types: https://github.com/Ensembl/ensembl-rest/wiki/Output-formats#supported-mime-types\n\nRate limiting\n-------------\n\nSometime you can be rate limited if you are querying EnsEMBL REST services with more than one concurrent processes, or by `sharing ip addresses`_. In such case, you can have a message like this:\n\n.. _sharing ip addresses: https://github.com/Ensembl/ensembl-rest/wiki#example-clients\n\n.. code:: bash\n\n  ensemblrest.exceptions.EnsemblRestRateLimitError: EnsEMBL REST API returned a 429 (Too Many Requests): You have been rate-limited; wait and retry. The headers X-RateLimit-Reset, X-RateLimit-Limit and X-RateLimit-Remaining will inform you of how long you have until your limit is reset and what that limit was. If you get this response and have not exceeded your limit then check if you have made too many requests per second. (Rate limit hit:  Retry after 2 seconds)\n\nEven if this library tries to do 15 request per seconds, you should avoid to run multiple\nEnsEMBL REST clients. To deal which such problem without interrupting your code, try\nto deal with the exception; For example:\n\n.. code:: python\n\n  # import required modules\n  import os\n  import sys\n  import time\n  import logging\n\n  # get ensembl REST modules and exception\n  from ensemblrest import EnsemblRest\n  from ensemblrest import EnsemblRestRateLimitError\n\n  # An useful way to defined a logger lever, handler, and formatter\n  logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)\n  logger = logging.getLogger(os.path.basename(sys.argv[0]))\n\n  # setup a new EnsemblRest object\n  ensRest = EnsemblRest()\n\n  # Get a request and deal with retry_after. Set a maximum number of retries (don't\n  # try to do the same request forever or you will be banned from ensembl!)\n  attempt = 0\n  max_attempts = 3\n\n  while attempt < max_attempts:\n      # update attempt count\n      attempt += 1\n\n      try:\n          result = ensRest.getLookupById(id='ENSG00000157764')\n          # exit while on success\n          break\n\n      # log exception and sleep a certain amount of time (sleeping time increases at each step)\n      except EnsemblRestRateLimitError, message:\n          logger.warn(message)\n          time.sleep(ensRest.retry_after*attempt)\n\n      finally:\n          if attempt >= max_attempts:\n              raise Exception(\"max attempts exceeded (%s)\" %(max_attempts))\n\n  sys.stdout.write(\"%s\\n\" %(result))\n  sys.stdout.flush()\n\nMethods list\n------------\n\nHere is a list of all methods defined. Methods called by ``ensRest`` instance are specific to ensembl_ rest server, while methods called via ``ensGenomeRest`` instance are specific of ensemblgenomes_ rest server.\n\nTo access the *Archive* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getArchiveById(id=\"ENSG00000157764\")\n  print ensRest.getArchiveByMultipleIds(id=[\"ENSG00000157764\", \"ENSG00000248378\"])\n\nTo access the *Comparative Genomics* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensGenomeRest.getGeneFamilyById(id=\"MF_01687\", compara=\"bacteria\")\n  print ensGenomeRest.getGeneFamilyMemberById(id=\"b0344\", compara=\"bacteria\")\n  print ensGenomeRest.getGeneFamilyMemberBySymbol(symbol=\"lacZ\", species=\"escherichia_coli_str_k_12_substr_mg1655\", compara=\"bacteria\")\n  # Change the returned content type to \"Newick\" format\n  print ensRest.getGeneTreeById(id='ENSGT00390000003602', nh_format=\"simple\", content_type=\"text/x-nh\")\n  print ensRest.getGeneTreeMemberById(id='ENSG00000157764')\n  print ensRest.getGeneTreeMemberBySymbol(species='human', symbol='BRCA2')\n  print ensRest.getAlignmentByRegion(species=\"taeniopygia_guttata\", region=\"2:106040000-106040050:1\", species_set_group=\"sauropsids\")\n  print ensRest.getHomologyById(id='ENSG00000157764')\n  print ensRest.getHomologyBySymbol(species='human', symbol='BRCA2')\n\nTo access the *Cross References* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getXrefsById(id='ENSG00000157764')\n  print ensRest.getXrefsByName(species='human', name='BRCA2')\n  print ensRest.getXrefsBySymbol(species='human', symbol='BRCA2')\n\nTo access the *Information* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getInfoAnalysis(species=\"homo_sapiens\")\n  print ensRest.getInfoAssembly(species=\"homo_sapiens\", bands=1) #bands is an optional parameter\n  print ensRest.getInfoAssemblyRegion(species=\"homo_sapiens\", region_name=\"X\")\n  print ensRest.getInfoBiotypes(species=\"homo_sapiens\")\n  print ensRest.getInfoComparaMethods()\n  print ensRest.getInfoComparaSpeciesSets(methods=\"EPO\")\n  print ensRest.getInfoComparas()\n  print ensRest.getInfoData()\n  print ensGenomeRest.getInfoEgVersion()\n  print ensRest.getInfoExternalDbs(species=\"homo_sapiens\")\n  print ensGenomeRest.getInfoDivisions()\n  print ensGenomeRest.getInfoGenomesByName(name=\"campylobacter_jejuni_subsp_jejuni_bh_01_0142\")\n\n  #This response is very heavy\n  #print ensGenomeRest.getInfoGenomes()\n\n  print ensGenomeRest.getInfoGenomesByAccession(division=\"U00096\")\n  print ensGenomeRest.getInfoGenomesByAssembly(division=\"GCA_000005845\")\n  print ensGenomeRest.getInfoGenomesByDivision(division=\"EnsemblPlants\")\n  print ensGenomeRest.getInfoGenomesByTaxonomy(division=\"Arabidopsis\")\n  print ensRest.getInfoPing()\n  print ensRest.getInfoRest()\n  print ensRest.getInfoSoftware()\n  print ensRest.getInfoSpecies(division=\"ensembl\")\n  print ensRest.getInfoVariation(species=\"homo_sapiens\")\n  # Restrict populations returned to e.g. only populations with LD data. It is highly recommended\n  # to set a filter and to avoid loading the complete list of populations.\n  print ensRest.getInfoVariationPopulations(species=\"homo_sapiens\", filter=\"LD\")\n\nTo access the *Linkage Disequilibrium* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getLdId(species=\"human\", id=\"rs1042779\", population_name=\"1000GENOMES:phase_3:KHV\", window_size=500, d_prime=1.0)\n  print ensRest.getLdPairwise(species=\"human\", id1=\"rs6792369\", id2=\"rs1042779\")\n  print ensRest.getLdRegion(species=\"human\", region=\"6:25837556..25843455\", population_name=\"1000GENOMES:phase_3:KHV\")\n\nTo access the *Lookup* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getLookupById(id='ENSG00000157764')\n  print ensRest.getLookupByMultipleIds(ids=[\"ENSG00000157764\", \"ENSG00000248378\" ])\n  print ensRest.getLookupBySymbol(species=\"homo_sapiens\", symbol=\"BRCA2\", expand=1)\n  print ensRest.getLookupByMultipleSymbols(species=\"homo_sapiens\", symbols=[\"BRCA2\", \"BRAF\"])\n\nTo access the *Mapping* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getMapCdnaToRegion(id='ENST00000288602', region='100..300')\n  print ensRest.getMapCdsToRegion(id='ENST00000288602', region='1..1000')\n  print ensRest.getMapAssemblyOneToTwo(species='human', asm_one='NCBI36', region='X:1000000..1000100:1', asm_two='GRCh37')\n  print ensRest.getMapTranslationToRegion(id='ENSP00000288602', region='100..300')\n\nTo access the *Ontologies and Taxonomy* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getAncestorsById(id='GO:0005667')\n  print ensRest.getAncestorsChartById(id='GO:0005667')\n  print ensRest.getDescendantsById(id='GO:0005667')\n  print ensRest.getOntologyById(id='GO:0005667')\n  print ensRest.getOntologyByName(name='transcription factor complex')\n  print ensRest.getTaxonomyClassificationById(id='9606')\n  print ensRest.getTaxonomyById(id='9606')\n  print ensRest.getTaxonomyByName(name=\"Homo%25\")\n\nTo access the *Overlap* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getOverlapById(id=\"ENSG00000157764\", feature=\"gene\")\n  print ensRest.getOverlapByRegion(species=\"human\", region=\"7:140424943-140624564\", feature=\"gene\")\n  print ensRest.getOverlapByTranslation(id=\"ENSP00000288602\")\n\nTo access the *Regulation* endpoints you can use the following method:\n\n.. code:: python\n\n  print ensRest.getRegulatoryFeatureById(species=\"homo_sapiens\", id=\"ENSR00001348195\")\n\nTo access the *Sequences* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getSequenceById(id='ENSG00000157764')\n  print ensRest.getSequenceByMultipleIds(ids=[\"ENSG00000157764\", \"ENSG00000248378\" ])\n  print ensRest.getSequenceByRegion(species='human', region='X:1000000..1000100')\n  print ensRest.getSequenceByMultipleRegions(species=\"homo_sapiens\", regions=[\"X:1000000..1000100:1\", \"ABBA01004489.1:1..100\"])\n\nTo access the *Transcript Haplotypes* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getTranscripsHaplotypes(species=\"homo_sapiens\", id=\"ENST00000288602\")\n\nTo access the *VEP* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getVariantConsequencesByHGVSnotation(species=\"human\", hgvs_notation=\"AGT:c.803T>C\")\n  print ensRest.getVariantConsequencesById(species='human', id='COSM476')\n  print ensRest.getVariantConsequencesByMultipleIds(species=\"human\", ids=[ \"rs116035550\", \"COSM476\" ])\n  print ensRest.getVariantConsequencesByRegion(species='human', region='9:22125503-22125502:1', allele='C')\n  print ensRest.getVariantConsequencesByMultipleRegions(species=\"human\", variants=[\"21 26960070 rs116645811 G A . . .\", \"21 26965148 rs1135638 G A . . .\" ] )\n\nTo access the *Variation* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.getVariationById(id=\"rs56116432\", species=\"homo_sapiens\")\n  print ensRest.getVariationByMultipleIds(ids=[\"rs56116432\", \"COSM476\" ], species=\"homo_sapiens\")\n\nTo access the *Variation GA4GH* endpoints you can use the following methods:\n\n.. code:: python\n\n  print ensRest.searchGA4GHCallSet(variantSetId=1, pageSize=2)\n  print ensRest.getGA4GHCallSetById(id=\"1:NA19777\")\n  print ensRest.searchGA4GHDataset(pageSize=3)\n  print ensRest.getGA4GHDatasetById(id=\"6e340c4d1e333c7a676b1710d2e3953c\")\n  print ensRest.getGA4GHVariantsById(id=\"1:rs1333049\")\n  print ensRest.searchGA4GHVariants(variantSetId=1, referenceName=22, start=17190024, end=17671934, pageToken=\"\", pageSize=1)\n  print ensRest.searchGA4GHVariantsets(datasetId=\"6e340c4d1e333c7a676b1710d2e3953c\", pageToken=\"\", pageSize=2)\n  print ensRest.getGA4GHVariantsetsById(id=1)\n  print ensRest.searchGA4GHReferences(referenceSetId=\"GRCh38\", pageSize=10)\n  print ensRest.getGA4GHReferencesById(id=\"9489ae7581e14efcad134f02afafe26c\")\n  print ensRest.searchGA4GHReferenceSets()\n  print ensRest.getGA4GHReferenceSetsById(id=\"GRCh38\")\n\n\n.. _ensembl: http://rest.ensembl.org/\n.. _ensemblgenomes: http://rest.ensemblgenomes.org/\n.. _sequence: http://rest.ensembl.org/documentation/info/sequence_id\n.. _POST sequence: http://rest.ensembl.org/documentation/info/sequence_id_post\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pyopensci/pyensemblrest/tree/master", "keywords": "ensembl python rest api", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pyensemblrest", "package_url": "https://pypi.org/project/pyensemblrest/", "platform": "", "project_url": "https://pypi.org/project/pyensemblrest/", "project_urls": {"Homepage": "http://github.com/pyopensci/pyensemblrest/tree/master"}, "release_url": "https://pypi.org/project/pyensemblrest/0.2.3/", "requires_dist": null, "requires_python": "", "summary": "An easy way to access EnsEMBL data with Python.", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>pyEnsemblRest</tt> is a simple Python wrapper around the EnsEMBL REST API</p>\n<a href=\"https://travis-ci.org/pyOpenSci/pyEnsemblRest\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/248b786e0062df210bacebec0a9829ba238f4535/68747470733a2f2f7472617669732d63692e6f72672f70794f70656e5363692f7079456e73656d626c526573742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/pyOpenSci/pyEnsemblRest?branch=master\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92f9ff1313e18b0974aead7cad9d269ca1efa246/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f70794f70656e5363692f7079456e73656d626c526573742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://img.shields.io/scrutinizer/g/pyOpenSci/pyEnsemblRest.svg?maxAge=2592000\" rel=\"nofollow\"><img alt=\"Code Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0de16297183fc469d38087c96655dd10e4125a4f/68747470733a2f2f696d672e736869656c64732e696f2f7363727574696e697a65722f672f70794f70656e5363692f7079456e73656d626c526573742e7376673f6d61784167653d32353932303030\"></a>\n<a href=\"https://gitter.im/pyOpenSci/pyEnsemblRest\" rel=\"nofollow\"><img alt=\"Gitter Chat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c92ff50f4ac9ddc0f1259ff16d015f67c6884cf6/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f70794f70656e5363692f7079456e73656d626c526573742e6a732e7376673f6d61784167653d32353932303030\"></a>\n<a href=\"https://pypi.python.org/pypi/pyensemblrest\" rel=\"nofollow\"><img alt=\"PyPi Package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e946995cbcd5f679ce13af8572b65e532956bd9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079656e73656d626c726573742e7376673f6d61784167653d32353932303030\"></a>\n<a href=\"https://github.com/pyOpenSci/pyEnsemblRest\" rel=\"nofollow\"><img alt=\"GitHub Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4bf62d7eaaabf2d3483b328a930cdc1e81f02b49/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f70794f70656e5363692f7079456e73656d626c526573742f746f74616c2e7376673f6d61784167653d32353932303030\"></a>\n<a href=\"https://img.shields.io/pypi/dd/pyensemblrest.svg?maxAge=2592000\" rel=\"nofollow\"><img alt=\"PyPi Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e8121d848dc0957ad94f03adf0a6dbe845c1578/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f7079656e73656d626c726573742e7376673f6d61784167653d32353932303030\"></a>\n<div id=\"license\">\n<h2>License</h2>\n<p>pyEnsemblRest - A wrapper for the EnsEMBL REST API</p>\n<p>Copyright (C) 2013-2016, Steve Moss</p>\n<p>pyEnsemblRest is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.</p>\n<p>pyEnsemblRest is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.</p>\n<p>You should have received a copy of the GNU General Public License\nalong with pyEnsemblRest.  If not, see &lt;<a href=\"http://www.gnu.org/licenses/\" rel=\"nofollow\">http://www.gnu.org/licenses/</a>&gt;.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"using-pip\">\n<h3>Using pip</h3>\n<p>Simply type:</p>\n<pre>pip install pyensemblrest\n</pre>\n</div>\n<div id=\"from-source\">\n<h3>From source</h3>\n<p>Clone the pyEnsemblRest then install package from source:</p>\n<pre>git clone https://github.com/pyOpenSci/pyEnsemblRest.git\n<span class=\"nb\">cd</span> pyEnsemblRest\nsudo python setup.py install\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To import an setup a new EnsemblRest object you should do the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ensemblrest</span> <span class=\"kn\">import</span> <span class=\"n\">EnsemblRest</span>\n<span class=\"n\">ensRest</span> <span class=\"o\">=</span> <span class=\"n\">EnsemblRest</span><span class=\"p\">()</span>\n</pre>\n<p>EnsemblRest() istance points to <a href=\"http://rest.ensembl.org/\" rel=\"nofollow\">http://rest.ensembl.org/</a> . In order to use EnsemblGenome, you can import a different object:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ensemblrest</span> <span class=\"kn\">import</span> <span class=\"n\">EnsemblGenomeRest</span>\n<span class=\"n\">ensGenomeRest</span> <span class=\"o\">=</span> <span class=\"n\">EnsemblGenomeRest</span><span class=\"p\">()</span>\n</pre>\n<p>Or, as an alternative, you can give a different base url during EnsemblRest class instantiation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ensemblrest</span> <span class=\"kn\">import</span> <span class=\"n\">EnsemblRest</span>\n<span class=\"n\">ensGenomeRest</span> <span class=\"o\">=</span> <span class=\"n\">EnsemblRest</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">'http://rest.ensemblgenomes.org'</span><span class=\"p\">)</span>\n</pre>\n<p>To use a custom EnsEMBL REST server you should setup the EnsemblRest as the precedent way:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ensemblrest</span> <span class=\"kn\">import</span> <span class=\"n\">EnsemblRest</span>\n<span class=\"c1\"># setup rest object to point to localhost server. The 3000 stands for REST default port</span>\n<span class=\"n\">ensRest</span> <span class=\"o\">=</span> <span class=\"n\">EnsemblRest</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">'http://localhost:3000'</span><span class=\"p\">)</span>\n</pre>\n<p>You may also provide proxy server settings in the form of a dict, as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ensemblrest</span> <span class=\"kn\">import</span> <span class=\"n\">EnsemblRest</span>\n<span class=\"c1\"># setup rest object to point to a proxy server</span>\n<span class=\"n\">ensRest</span> <span class=\"o\">=</span> <span class=\"n\">EnsemblRest</span><span class=\"p\">(</span><span class=\"n\">proxies</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'http'</span><span class=\"p\">:</span><span class=\"s1\">'proxy.address.com:3128'</span><span class=\"p\">,</span> <span class=\"s1\">'https'</span><span class=\"p\">:</span><span class=\"s1\">'proxy.address.com:3128'</span><span class=\"p\">})</span>\n</pre>\n<p>EnsEMBL has a rate-limit policy to deal with requests. You can do up to 15 requests per second. You could wait a little during your requests:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"c1\"># sleep for a second so we don't get rate-limited</span>\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Alternatively this library verifies and limits your requests to 15 requests per second. Avoid to run different python processes to get your data, otherwise you will be blacklisted by ensembl team. If you have to do a lot or requests, consider to use POST supported endpoints, or contact ensembl team to add POST support to endpoints of your interest.</p>\n<div id=\"get-endpoints\">\n<h3>GET endpoints</h3>\n<p>EnsemblRest and EnsemblGenomeRest class methods are not defined in libraries, so you cannot see docstring using help() method on python or ipython terminal. However you can see all methods available for <a href=\"http://rest.ensembl.org/\" rel=\"nofollow\">ensembl</a> and <a href=\"http://rest.ensemblgenomes.org/\" rel=\"nofollow\">ensemblgenomes</a> rest server once class is instantiate. To get help on a particular method, please refer to ensembl help documentation on different endpoints in the <a href=\"http://rest.ensembl.org/\" rel=\"nofollow\">ensembl</a> and <a href=\"http://rest.ensemblgenomes.org/\" rel=\"nofollow\">ensemblgenomes</a> rest service. Please note that endpoints on <a href=\"http://rest.ensembl.org/\" rel=\"nofollow\">ensembl</a> may be different from <a href=\"http://rest.ensemblgenomes.org/\" rel=\"nofollow\">ensemblgenomes</a> endpoints.\nIf you look, for example, at <a href=\"http://rest.ensembl.org/documentation/info/sequence_id\" rel=\"nofollow\">sequence</a> endpoint documentation, you will find optional and required parameters. Required parameters must be specified in order to work properly, otherwise you will get an exception. Optional parameters may be specified or not, depending on your request. In all cases parameter name are the same used in documentation. For example to get data using <a href=\"http://rest.ensembl.org/documentation/info/sequence_id\" rel=\"nofollow\">sequence</a> endpoint, you must specify at least required parameters:</p>\n<pre><span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getSequenceById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">)</span>\n</pre>\n<p>In order to mask sequence and to expand the 5\u2019 UTR you may set optional parameters using the same name described in documentation:</p>\n<pre><span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getSequenceById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"s2\">\"soft\"</span><span class=\"p\">,</span> <span class=\"n\">expand_5prime</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<p>Multiple values for a certain parameters (for GET methods) can be submitted in a list. For example, to get the same results of</p>\n<pre>curl <span class=\"s1\">'http://rest.ensembl.org/overlap/region/human/7:140424943-140624564?feature=gene;feature=transcript;feature=cds;feature=exon'</span> -H <span class=\"s1\">'Content-type:application/json'</span>\n</pre>\n<p>as described in <a href=\"http://rest.ensembl.org/documentation/info/overlap_region\" rel=\"nofollow\">overlap region</a> GET endpoint, you can use the following function:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getOverlapByRegion</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"human\"</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s2\">\"7:140424943-140624564\"</span><span class=\"p\">,</span> <span class=\"n\">feature</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"gene\"</span><span class=\"p\">,</span> <span class=\"s2\">\"transcript\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cds\"</span><span class=\"p\">,</span> <span class=\"s2\">\"exon\"</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"post-endpoints\">\n<h3>POST endpoints</h3>\n<p>POST endpoints can be used as the GET endpoints, the only difference is that they support parameters in python list in order to perform multiple queries on the same ensembl endpoint. The parameters name are the same used in documentation, for example we can use the <a href=\"http://rest.ensembl.org/documentation/info/sequence_id_post\" rel=\"nofollow\">POST sequence</a> endpoint in such way:</p>\n<pre><span class=\"n\">seqs</span> <span class=\"o\">=</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getSequenceByMultipleIds</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"ENSG00000157764\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENSG00000248378\"</span> <span class=\"p\">])</span>\n</pre>\n<p>where the example value <tt>{ \"ids\" : [\"ENSG00000157764\", \"ENSG00000248378\" ] }</tt> is converted in the non-positional argument <tt><span class=\"pre\">ids=[\"ENSG00000157764\",</span> \"ENSG00000248378\" ]</tt>. As the previous example, we can add optional parameters:</p>\n<pre><span class=\"n\">seqs</span> <span class=\"o\">=</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getSequenceByMultipleIds</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"ENSG00000157764\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENSG00000248378\"</span><span class=\"p\">],</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"s2\">\"soft\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"change-the-default-output-format\">\n<h3>Change the default Output format</h3>\n<p>You can change the default output format by passing a supported <tt><span class=\"pre\">Content-type</span></tt> using\nthe <tt>content_type</tt> parameter, for example:</p>\n<pre><span class=\"n\">plain_xml</span> <span class=\"o\">=</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getArchiveById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">\"text/xml\"</span><span class=\"p\">)</span>\n</pre>\n<p>For a complete list of supported <tt><span class=\"pre\">Content-type</span></tt> see <a href=\"https://github.com/Ensembl/ensembl-rest/wiki/Output-formats#supported-mime-types\" rel=\"nofollow\">Supported MIME Types</a> from\nensembl REST documentation. You need also to check if the same <tt><span class=\"pre\">Content-type</span></tt>\nis supported in the EnsEMBL endpoint description.</p>\n</div>\n<div id=\"rate-limiting\">\n<h3>Rate limiting</h3>\n<p>Sometime you can be rate limited if you are querying EnsEMBL REST services with more than one concurrent processes, or by <a href=\"https://github.com/Ensembl/ensembl-rest/wiki#example-clients\" rel=\"nofollow\">sharing ip addresses</a>. In such case, you can have a message like this:</p>\n<pre>ensemblrest.exceptions.EnsemblRestRateLimitError: EnsEMBL REST API returned a <span class=\"m\">429</span> <span class=\"o\">(</span>Too Many Requests<span class=\"o\">)</span>: You have been rate-limited<span class=\"p\">;</span> <span class=\"nb\">wait</span> and retry. The headers X-RateLimit-Reset, X-RateLimit-Limit and X-RateLimit-Remaining will inform you of how long you have <span class=\"k\">until</span> your limit is reset and what that limit was. If you get this response and have not exceeded your limit <span class=\"k\">then</span> check <span class=\"k\">if</span> you have made too many requests per second. <span class=\"o\">(</span>Rate limit hit:  Retry after <span class=\"m\">2</span> seconds<span class=\"o\">)</span>\n</pre>\n<p>Even if this library tries to do 15 request per seconds, you should avoid to run multiple\nEnsEMBL REST clients. To deal which such problem without interrupting your code, try\nto deal with the exception; For example:</p>\n<pre><span class=\"c1\"># import required modules</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"c1\"># get ensembl REST modules and exception</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ensemblrest</span> <span class=\"kn\">import</span> <span class=\"n\">EnsemblRest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ensemblrest</span> <span class=\"kn\">import</span> <span class=\"n\">EnsemblRestRateLimitError</span>\n\n<span class=\"c1\"># An useful way to defined a logger lever, handler, and formatter</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(name)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># setup a new EnsemblRest object</span>\n<span class=\"n\">ensRest</span> <span class=\"o\">=</span> <span class=\"n\">EnsemblRest</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get a request and deal with retry_after. Set a maximum number of retries (don't</span>\n<span class=\"c1\"># try to do the same request forever or you will be banned from ensembl!)</span>\n<span class=\"n\">attempt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">max_attempts</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"k\">while</span> <span class=\"n\">attempt</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_attempts</span><span class=\"p\">:</span>\n    <span class=\"c1\"># update attempt count</span>\n    <span class=\"n\">attempt</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getLookupById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># exit while on success</span>\n        <span class=\"k\">break</span>\n\n    <span class=\"c1\"># log exception and sleep a certain amount of time (sleeping time increases at each step)</span>\n    <span class=\"k\">except</span> <span class=\"n\">EnsemblRestRateLimitError</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">retry_after</span><span class=\"o\">*</span><span class=\"n\">attempt</span><span class=\"p\">)</span>\n\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">attempt</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max_attempts</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"max attempts exceeded (</span><span class=\"si\">%s</span><span class=\"s2\">)\"</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">max_attempts</span><span class=\"p\">))</span>\n\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"methods-list\">\n<h3>Methods list</h3>\n<p>Here is a list of all methods defined. Methods called by <tt>ensRest</tt> instance are specific to <a href=\"http://rest.ensembl.org/\" rel=\"nofollow\">ensembl</a> rest server, while methods called via <tt>ensGenomeRest</tt> instance are specific of <a href=\"http://rest.ensemblgenomes.org/\" rel=\"nofollow\">ensemblgenomes</a> rest server.</p>\n<p>To access the <em>Archive</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getArchiveById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"ENSG00000157764\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getArchiveByMultipleIds</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"ENSG00000157764\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENSG00000248378\"</span><span class=\"p\">])</span>\n</pre>\n<p>To access the <em>Comparative Genomics</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensGenomeRest</span><span class=\"o\">.</span><span class=\"n\">getGeneFamilyById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"MF_01687\"</span><span class=\"p\">,</span> <span class=\"n\">compara</span><span class=\"o\">=</span><span class=\"s2\">\"bacteria\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensGenomeRest</span><span class=\"o\">.</span><span class=\"n\">getGeneFamilyMemberById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"b0344\"</span><span class=\"p\">,</span> <span class=\"n\">compara</span><span class=\"o\">=</span><span class=\"s2\">\"bacteria\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensGenomeRest</span><span class=\"o\">.</span><span class=\"n\">getGeneFamilyMemberBySymbol</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">\"lacZ\"</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"escherichia_coli_str_k_12_substr_mg1655\"</span><span class=\"p\">,</span> <span class=\"n\">compara</span><span class=\"o\">=</span><span class=\"s2\">\"bacteria\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Change the returned content type to \"Newick\" format</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getGeneTreeById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSGT00390000003602'</span><span class=\"p\">,</span> <span class=\"n\">nh_format</span><span class=\"o\">=</span><span class=\"s2\">\"simple\"</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">\"text/x-nh\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getGeneTreeMemberById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getGeneTreeMemberBySymbol</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span> <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'BRCA2'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getAlignmentByRegion</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"taeniopygia_guttata\"</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s2\">\"2:106040000-106040050:1\"</span><span class=\"p\">,</span> <span class=\"n\">species_set_group</span><span class=\"o\">=</span><span class=\"s2\">\"sauropsids\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getHomologyById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getHomologyBySymbol</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span> <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'BRCA2'</span><span class=\"p\">)</span>\n</pre>\n<p>To access the <em>Cross References</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getXrefsById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getXrefsByName</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'BRCA2'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getXrefsBySymbol</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span> <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'BRCA2'</span><span class=\"p\">)</span>\n</pre>\n<p>To access the <em>Information</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoAnalysis</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoAssembly</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">,</span> <span class=\"n\">bands</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">#bands is an optional parameter</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoAssemblyRegion</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">,</span> <span class=\"n\">region_name</span><span class=\"o\">=</span><span class=\"s2\">\"X\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoBiotypes</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoComparaMethods</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoComparaSpeciesSets</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"s2\">\"EPO\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoComparas</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoData</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensGenomeRest</span><span class=\"o\">.</span><span class=\"n\">getInfoEgVersion</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoExternalDbs</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensGenomeRest</span><span class=\"o\">.</span><span class=\"n\">getInfoDivisions</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensGenomeRest</span><span class=\"o\">.</span><span class=\"n\">getInfoGenomesByName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"campylobacter_jejuni_subsp_jejuni_bh_01_0142\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#This response is very heavy</span>\n<span class=\"c1\">#print ensGenomeRest.getInfoGenomes()</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">ensGenomeRest</span><span class=\"o\">.</span><span class=\"n\">getInfoGenomesByAccession</span><span class=\"p\">(</span><span class=\"n\">division</span><span class=\"o\">=</span><span class=\"s2\">\"U00096\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensGenomeRest</span><span class=\"o\">.</span><span class=\"n\">getInfoGenomesByAssembly</span><span class=\"p\">(</span><span class=\"n\">division</span><span class=\"o\">=</span><span class=\"s2\">\"GCA_000005845\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensGenomeRest</span><span class=\"o\">.</span><span class=\"n\">getInfoGenomesByDivision</span><span class=\"p\">(</span><span class=\"n\">division</span><span class=\"o\">=</span><span class=\"s2\">\"EnsemblPlants\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensGenomeRest</span><span class=\"o\">.</span><span class=\"n\">getInfoGenomesByTaxonomy</span><span class=\"p\">(</span><span class=\"n\">division</span><span class=\"o\">=</span><span class=\"s2\">\"Arabidopsis\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoPing</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoRest</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoSoftware</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoSpecies</span><span class=\"p\">(</span><span class=\"n\">division</span><span class=\"o\">=</span><span class=\"s2\">\"ensembl\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoVariation</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Restrict populations returned to e.g. only populations with LD data. It is highly recommended</span>\n<span class=\"c1\"># to set a filter and to avoid loading the complete list of populations.</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getInfoVariationPopulations</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"s2\">\"LD\"</span><span class=\"p\">)</span>\n</pre>\n<p>To access the <em>Linkage Disequilibrium</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getLdId</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"human\"</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"rs1042779\"</span><span class=\"p\">,</span> <span class=\"n\">population_name</span><span class=\"o\">=</span><span class=\"s2\">\"1000GENOMES:phase_3:KHV\"</span><span class=\"p\">,</span> <span class=\"n\">window_size</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">d_prime</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getLdPairwise</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"human\"</span><span class=\"p\">,</span> <span class=\"n\">id1</span><span class=\"o\">=</span><span class=\"s2\">\"rs6792369\"</span><span class=\"p\">,</span> <span class=\"n\">id2</span><span class=\"o\">=</span><span class=\"s2\">\"rs1042779\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getLdRegion</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"human\"</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s2\">\"6:25837556..25843455\"</span><span class=\"p\">,</span> <span class=\"n\">population_name</span><span class=\"o\">=</span><span class=\"s2\">\"1000GENOMES:phase_3:KHV\"</span><span class=\"p\">)</span>\n</pre>\n<p>To access the <em>Lookup</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getLookupById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getLookupByMultipleIds</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"ENSG00000157764\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENSG00000248378\"</span> <span class=\"p\">])</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getLookupBySymbol</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">,</span> <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">\"BRCA2\"</span><span class=\"p\">,</span> <span class=\"n\">expand</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getLookupByMultipleSymbols</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">,</span> <span class=\"n\">symbols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"BRCA2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"BRAF\"</span><span class=\"p\">])</span>\n</pre>\n<p>To access the <em>Mapping</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getMapCdnaToRegion</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENST00000288602'</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'100..300'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getMapCdsToRegion</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENST00000288602'</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'1..1000'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getMapAssemblyOneToTwo</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span> <span class=\"n\">asm_one</span><span class=\"o\">=</span><span class=\"s1\">'NCBI36'</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'X:1000000..1000100:1'</span><span class=\"p\">,</span> <span class=\"n\">asm_two</span><span class=\"o\">=</span><span class=\"s1\">'GRCh37'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getMapTranslationToRegion</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSP00000288602'</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'100..300'</span><span class=\"p\">)</span>\n</pre>\n<p>To access the <em>Ontologies and Taxonomy</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getAncestorsById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'GO:0005667'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getAncestorsChartById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'GO:0005667'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getDescendantsById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'GO:0005667'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getOntologyById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'GO:0005667'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getOntologyByName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'transcription factor complex'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getTaxonomyClassificationById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'9606'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getTaxonomyById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'9606'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getTaxonomyByName</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Homo%25\"</span><span class=\"p\">)</span>\n</pre>\n<p>To access the <em>Overlap</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getOverlapById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"ENSG00000157764\"</span><span class=\"p\">,</span> <span class=\"n\">feature</span><span class=\"o\">=</span><span class=\"s2\">\"gene\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getOverlapByRegion</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"human\"</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s2\">\"7:140424943-140624564\"</span><span class=\"p\">,</span> <span class=\"n\">feature</span><span class=\"o\">=</span><span class=\"s2\">\"gene\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getOverlapByTranslation</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"ENSP00000288602\"</span><span class=\"p\">)</span>\n</pre>\n<p>To access the <em>Regulation</em> endpoints you can use the following method:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getRegulatoryFeatureById</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"ENSR00001348195\"</span><span class=\"p\">)</span>\n</pre>\n<p>To access the <em>Sequences</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getSequenceById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getSequenceByMultipleIds</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"ENSG00000157764\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ENSG00000248378\"</span> <span class=\"p\">])</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getSequenceByRegion</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'X:1000000..1000100'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getSequenceByMultipleRegions</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">,</span> <span class=\"n\">regions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"X:1000000..1000100:1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ABBA01004489.1:1..100\"</span><span class=\"p\">])</span>\n</pre>\n<p>To access the <em>Transcript Haplotypes</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getTranscripsHaplotypes</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"ENST00000288602\"</span><span class=\"p\">)</span>\n</pre>\n<p>To access the <em>VEP</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getVariantConsequencesByHGVSnotation</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"human\"</span><span class=\"p\">,</span> <span class=\"n\">hgvs_notation</span><span class=\"o\">=</span><span class=\"s2\">\"AGT:c.803T&gt;C\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getVariantConsequencesById</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'COSM476'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getVariantConsequencesByMultipleIds</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"human\"</span><span class=\"p\">,</span> <span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"p\">[</span> <span class=\"s2\">\"rs116035550\"</span><span class=\"p\">,</span> <span class=\"s2\">\"COSM476\"</span> <span class=\"p\">])</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getVariantConsequencesByRegion</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'9:22125503-22125502:1'</span><span class=\"p\">,</span> <span class=\"n\">allele</span><span class=\"o\">=</span><span class=\"s1\">'C'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getVariantConsequencesByMultipleRegions</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"human\"</span><span class=\"p\">,</span> <span class=\"n\">variants</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"21 26960070 rs116645811 G A . . .\"</span><span class=\"p\">,</span> <span class=\"s2\">\"21 26965148 rs1135638 G A . . .\"</span> <span class=\"p\">]</span> <span class=\"p\">)</span>\n</pre>\n<p>To access the <em>Variation</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getVariationById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"rs56116432\"</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getVariationByMultipleIds</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"rs56116432\"</span><span class=\"p\">,</span> <span class=\"s2\">\"COSM476\"</span> <span class=\"p\">],</span> <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s2\">\"homo_sapiens\"</span><span class=\"p\">)</span>\n</pre>\n<p>To access the <em>Variation GA4GH</em> endpoints you can use the following methods:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">searchGA4GHCallSet</span><span class=\"p\">(</span><span class=\"n\">variantSetId</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pageSize</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getGA4GHCallSetById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"1:NA19777\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">searchGA4GHDataset</span><span class=\"p\">(</span><span class=\"n\">pageSize</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getGA4GHDatasetById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"6e340c4d1e333c7a676b1710d2e3953c\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getGA4GHVariantsById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"1:rs1333049\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">searchGA4GHVariants</span><span class=\"p\">(</span><span class=\"n\">variantSetId</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">referenceName</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">17190024</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">17671934</span><span class=\"p\">,</span> <span class=\"n\">pageToken</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">pageSize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">searchGA4GHVariantsets</span><span class=\"p\">(</span><span class=\"n\">datasetId</span><span class=\"o\">=</span><span class=\"s2\">\"6e340c4d1e333c7a676b1710d2e3953c\"</span><span class=\"p\">,</span> <span class=\"n\">pageToken</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">pageSize</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getGA4GHVariantsetsById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">searchGA4GHReferences</span><span class=\"p\">(</span><span class=\"n\">referenceSetId</span><span class=\"o\">=</span><span class=\"s2\">\"GRCh38\"</span><span class=\"p\">,</span> <span class=\"n\">pageSize</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getGA4GHReferencesById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"9489ae7581e14efcad134f02afafe26c\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">searchGA4GHReferenceSets</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">ensRest</span><span class=\"o\">.</span><span class=\"n\">getGA4GHReferenceSetsById</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"GRCh38\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3601923, "releases": {"0.1.7b": [{"comment_text": "", "digests": {"md5": "2f6608cce21240d7993208948afbdcad", "sha256": "4c2b5955f11db5386c59a9f464763d06cf4557ccc89064fb02d31a6cec8a3f58"}, "downloads": -1, "filename": "pyensemblrest-0.1.7b.tar.gz", "has_sig": false, "md5_digest": "2f6608cce21240d7993208948afbdcad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6185, "upload_time": "2013-05-13T18:27:17", "upload_time_iso_8601": "2013-05-13T18:27:17.736972Z", "url": "https://files.pythonhosted.org/packages/31/aa/5cef949c37cd7551beebbc42002609a27a9dc447b425ff59c2f871e76a4b/pyensemblrest-0.1.7b.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "18131756d783ed25f7a38a6858edfe72", "sha256": "a47198216abcf27861b7a038f7a73b4b328ba0e3ddc6e4d56fbc4ef033d4beba"}, "downloads": -1, "filename": "pyensemblrest-0.2.2.tar.gz", "has_sig": false, "md5_digest": "18131756d783ed25f7a38a6858edfe72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22871, "upload_time": "2016-06-13T14:12:32", "upload_time_iso_8601": "2016-06-13T14:12:32.507042Z", "url": "https://files.pythonhosted.org/packages/ad/cc/39c6641469e914e083393662cb0b5f136d5f34eb4f1a0834f0107be8cf5b/pyensemblrest-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "61c57cf690eb4dd2bf54572a3d35841f", "sha256": "a547bb7c6c45ac0466f82e18831652c378ba16a1a0efc85781ff14c1b058be9e"}, "downloads": -1, "filename": "pyensemblrest-0.2.3.tar.gz", "has_sig": false, "md5_digest": "61c57cf690eb4dd2bf54572a3d35841f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31565, "upload_time": "2018-02-21T12:03:50", "upload_time_iso_8601": "2018-02-21T12:03:50.317936Z", "url": "https://files.pythonhosted.org/packages/f2/91/714fbcaf508fab71ae7da647d2713e515cfc47dbd4d2de442ffe9b3ec1c4/pyensemblrest-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "61c57cf690eb4dd2bf54572a3d35841f", "sha256": "a547bb7c6c45ac0466f82e18831652c378ba16a1a0efc85781ff14c1b058be9e"}, "downloads": -1, "filename": "pyensemblrest-0.2.3.tar.gz", "has_sig": false, "md5_digest": "61c57cf690eb4dd2bf54572a3d35841f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31565, "upload_time": "2018-02-21T12:03:50", "upload_time_iso_8601": "2018-02-21T12:03:50.317936Z", "url": "https://files.pythonhosted.org/packages/f2/91/714fbcaf508fab71ae7da647d2713e515cfc47dbd4d2de442ffe9b3ec1c4/pyensemblrest-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:22 2020"}