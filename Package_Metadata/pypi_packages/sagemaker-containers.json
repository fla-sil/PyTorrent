{"info": {"author": "Amazon Web Services", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6"], "description": "WARNING: This package has been deprecated. Please use the `SageMaker Training Toolkit <https://github.com/aws/sagemaker-training-toolkit>`__ for model training and the `SageMaker Inference Toolkit <https://github.com/aws/sagemaker-inference-toolkit>`__ for model serving.\n================================================================================================================================================================================================================================================================================\n\n.. _header-n957:\n\nSageMaker Containers\n====================\n\n.. image:: https://img.shields.io/badge/code_style-black-000000.svg\n   :target: https://github.com/python/black\n   :alt: Code style: black\n\nSageMaker Containers gives you tools to create SageMaker-compatible Docker containers, and has additional tools for letting you create Frameworks\n(SageMaker-compatible Docker containers that can run arbitrary Python or shell scripts).\n\nCurrently, this library is used by the following containers: `TensorFlow\nScript Mode <https://github.com/aws/sagemaker-tensorflow-container/tree/script-mode>`__,\n`MXNet <https://github.com/aws/sagemaker-mxnet-container>`__,\n`PyTorch <https://github.com/aws/sagemaker-pytorch-container>`__,\n`Chainer <https://github.com/aws/sagemaker-chainer-container>`__, and\n`Scikit-learn <https://github.com/aws/sagemaker-scikit-learn-container>`__.\n\n.. contents::\n\n.. _header-n1174:\n\nGetting Started\n===============\n\n.. _header-n962:\n\nCreating a container using SageMaker Containers\n-----------------------------------------------\n\nHere we'll demonstrate how to create a Docker image using SageMaker Containers in order to show the simplicity of using this library.\n\nLet's suppose we need to train a model with the following training script ``train.py`` using TF 2.0 in SageMaker:\n\n.. code:: python\n\n   import tensorflow as tf\n\n   mnist = tf.keras.datasets.mnist\n\n   (x_train, y_train), (x_test, y_test) = mnist.load_data()\n   x_train, x_test = x_train / 255.0, x_test / 255.0\n\n   model = tf.keras.models.Sequential([\n     tf.keras.layers.Flatten(input_shape=(28, 28)),\n     tf.keras.layers.Dense(128, activation='relu'),\n     tf.keras.layers.Dropout(0.2),\n     tf.keras.layers.Dense(10, activation='softmax')\n   ])\n\n   model.compile(optimizer='adam',\n                 loss='sparse_categorical_crossentropy',\n                 metrics=['accuracy'])\n\n   model.fit(x_train, y_train, epochs=1)\n\n   model.evaluate(x_test, y_test)\n\n.. _header-n965:\n\nThe Dockerfile\n~~~~~~~~~~~~~~\n\nWe then create a Dockerfile with our dependencies and define the\nprogram that will be executed in SageMaker:\n\n.. code:: docker\n\n   FROM tensorflow/tensorflow:2.0.0a0\n\n   RUN pip install sagemaker-containers\n\n   # Copies the training code inside the container\n   COPY train.py /opt/ml/code/train.py\n\n   # Defines train.py as script entry point\n   ENV SAGEMAKER_PROGRAM train.py\n\nMore documentation on how to build a Docker container can be found `here <https://docs.docker.com/get-started/part2/#define-a-container-with-dockerfile>`__\n\n.. _header-n968:\n\nBuilding the container\n~~~~~~~~~~~~~~~~~~~~~~\n\nWe then build the Docker image using ``docker build``:\n\n.. code:: shell\n\n   docker build -t tf-2.0 .\n\n.. _header-n971:\n\nTraining with Local Mode\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe can use `Local\nMode <https://sagemaker.readthedocs.io/en/stable/overview.html#local-mode>`__\nto test the container locally:\n\n.. code:: python\n\n   from sagemaker.estimator import Estimator\n\n   estimator = Estimator(image_name='tf-2.0',\n                         role='SageMakerRole',\n                         train_instance_count=1,\n                         train_instance_type='local')\n\n   estimator.fit()\n\nAfter using Local Mode, we can push the image to ECR and run a SageMaker training job. To see a complete example on how to create a container using SageMaker\nContainer, including pushing it to ECR, see the example notebook `tensorflow_bring_your_own.ipynb  <https://github.com/awslabs/amazon-sagemaker-examples/blob/master/advanced_functionality/tensorflow_bring_your_own/tensorflow_bring_your_own.ipynb>`__.\n\n.. _header-n975:\n\nHow a script is executed inside the container\n---------------------------------------------\n\nThe training script must be located under the folder ``/opt/ml/code`` and its relative path is defined in the environment variable ``SAGEMAKER_PROGRAM``. The following scripts are supported:\n\n-  **Python scripts**: uses the Python interpreter for any script with\n   .py suffix\n\n-  **Shell scripts**: uses the Shell interpreter to execute any other\n   script\n\nWhen training starts, the interpreter executes the entry point, from the\nexample above:\n\n.. code:: python\n\n   python train.py\n\n.. _header-n984:\n\nMapping hyperparameters to script arguments\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAny hyperparameters provided by the training job will be passed by the\ninterpreter to the entry point as script arguments. For example the\ntraining job hyperparameters:\n\n.. code:: python\n\n   {\"HyperParameters\": {\"batch-size\": 256, \"learning-rate\": 0.0001, \"communicator\": \"pure_nccl\"}}\n\nWill be executed as:\n\n.. code:: shell\n\n   ./user_script.sh --batch-size 256 --learning_rate 0.0001 --communicator pure_nccl\n\nThe entry point is responsible for parsing these script arguments. For\nexample, in a Python script:\n\n.. code:: python\n\n   import argparse\n   \n   if __name__ == '__main__':\n     parser = argparse.ArgumentParser()\n\n     parser.add_argument('--learning-rate', type=int, default=1)\n     parser.add_argument('--batch-size', type=int, default=64)\n     parser.add_argument('--communicator', type=str)\n     parser.add_argument('--frequency', type=int, default=20)\n\n     args = parser.parse_args()\n     ...\n\n.. _header-n991:\n\nReading additional information from the container\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nVery often, an entry point needs additional information from the\ncontainer that is not available in ``hyperparameters``. SageMaker\nContainers writes this information as **environment variables** that are\navailable inside the script. For example, the training job below\nincludes the channels **training** and **testing**:\n\n.. code:: python\n\n   from sagemaker.pytorch import PyTorch\n\n   estimator = PyTorch(entry_point='train.py', ...)\n\n   estimator.fit({'training': 's3://bucket/path/to/training/data', \n                  'testing': 's3://bucket/path/to/testing/data'})\n\nThe environment variable ``SM_CHANNEL_{channel_name}`` provides the\npath were the channel is located:\n\n.. code:: python\n\n   import argparse\n   import os\n\n   if __name__ == '__main__':\n     parser = argparse.ArgumentParser()\n\n     ...\n\n     # reads input channels training and testing from the environment variables\n     parser.add_argument('--training', type=str, default=os.environ['SM_CHANNEL_TRAINING'])\n     parser.add_argument('--testing', type=str, default=os.environ['SM_CHANNEL_TESTING'])\n\n     args = parser.parse_args()\n     ...\n\nWhen training starts, SageMaker Containers will print all available\nenvironment variables.\n\n.. _header-n997:\n\nIMPORTANT ENVIRONMENT VARIABLES\n-------------------------------\n\nThese environment variables are those that you're likely to use when\nwriting a user script. A full list of environment variables is given\nbelow.\n\n.. _header-n999:\n\nSM_MODEL_DIR\n~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_MODEL_DIR=/opt/ml/model\n\nWhen the training job finishes, the container will be **deleted**\nincluding its file system with **exception** of the ``/opt/ml/model`` and\n``/opt/ml/output`` folders. Use ``/opt/ml/model`` to save the model\ncheckpoints. These checkpoints will be uploaded to the default S3\nbucket. Usage example:\n\n.. code:: python\n\n   import os\n\n   # using it in argparse\n   parser.add_argument('model_dir', type=str, default=os.environ['SM_MODEL_DIR'])\n\n   # using it as variable\n   model_dir = os.environ['SM_MODEL_DIR']\n\n   # saving checkpoints to model dir in chainer\n   serializers.save_npz(os.path.join(os.environ['SM_MODEL_DIR'], 'model.npz'), model)\n\nFor more information, see: `How Amazon SageMaker Processes Training\nOutput <https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html#your-algorithms-training-algo-envvariables>`__.\n\n.. _header-n1004:\n\nSM_CHANNELS\n~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_CHANNELS='[\"testing\",\"training\"]'\n\nContains the list of input data channels in the container.\n\nWhen you run training, you can partition your training data into\ndifferent logical \"channels\". Depending on your problem, some common\nchannel ideas are: \"training\", \"testing\", \"evaluation\" or \"images\" and\n\"labels\".\n\n``SM_CHANNELS`` includes the name of the available channels in the\ncontainer as a JSON encoded list. Usage example:\n\n.. code:: python\n\n   import os\n   import json\n\n   # using it in argparse\n   parser.add_argument('channel_names', default=json.loads(os.environ['SM_CHANNELS'])))\n\n   # using it as variable\n   channel_names = json.loads(os.environ['SM_CHANNELS']))\n\n.. _header-n1010:\n\nSM_CHANNEL_{channel_name}\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_CHANNEL_TRAINING='/opt/ml/input/data/training'\n   SM_CHANNEL_TESTING='/opt/ml/input/data/testing'\n\nContains the directory where the channel named ``channel_name`` is\nlocated in the container. Usage examples:\n\n.. code:: python\n\n   import os\n   import json\n\n   parser.add_argument('--train', type=str, default=os.environ['SM_CHANNEL_TRAINING'])\n   parser.add_argument('--test', type=str, default=os.environ['SM_CHANNEL_TESTING'])\n\n\n   args = parser.parse_args()\n\n   train_file = np.load(os.path.join(args.train, 'train.npz'))\n   test_file = np.load(os.path.join(args.test, 'test.npz'))\n\n.. _header-n1014:\n\nSM_HPS\n~~~~~~\n\n.. code:: shell\n\n   SM_HPS='{\"batch-size\": \"256\", \"learning-rate\": \"0.0001\",\"communicator\": \"pure_nccl\"}'\n\nContains a JSON encoded dictionary with the user provided\nhyperparameters. Example usage:\n\n.. code:: python\n\n   import os\n   import json\n\n   hyperparameters = json.loads(os.environ['SM_HPS']))\n   # {\"batch-size\": 256, \"learning-rate\": 0.0001, \"communicator\": \"pure_nccl\"}\n\n.. _header-n1020:\n\nSM_HP_{hyperparameter_name}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_HP_LEARNING-RATE=0.0001\n   SM_HP_BATCH-SIZE=10000\n   SM_HP_COMMUNICATOR=pure_nccl\n\nContains value of the hyperparameter named ``hyperparameter_name``.\nUsage examples:\n\n.. code:: python\n\n   learning_rate = float(os.environ['SM_HP_LEARNING-RATE'])\n   batch_size = int(os.environ['SM_HP_BATCH-SIZE'])\n   comminicator = os.environ['SM_HP_COMMUNICATOR']\n\n.. _header-n1026:\n\nSM_CURRENT_HOST\n~~~~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_CURRENT_HOST=algo-1\n\nThe name of the current container on the container network. Usage\nexample:\n\n.. code:: python\n\n   import os\n\n   # using it in argparse\n   parser.add_argument('current_host', type=str, default=os.environ['SM_CURRENT_HOST'])\n\n   # using it as variable\n   current_host = os.environ['SM_CURRENT_HOST']\n\n.. _header-n1032:\n\nSM_HOSTS\n~~~~~~~~\n\n.. code:: shell\n\n   SM_HOSTS='[\"algo-1\",\"algo-2\"]'\n\nJSON encoded list containing all the hosts . Usage example:\n\n.. code:: python\n\n   import os\n   import json\n\n   # using it in argparse\n   parser.add_argument('hosts', type=str, default=json.loads(os.environ['SM_HOSTS']))\n\n   # using it as variable\n   hosts = json.loads(os.environ['SM_HOSTS'])\n\n.. _header-n1038:\n\nSM_NUM_GPUS\n~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_NUM_GPUS=1\n\nThe number of gpus available in the current container. Usage example:\n\n.. code:: python\n\n   import os\n   \n   # using it in argparse\n   parser.add_argument('num_gpus', type=int, default=os.environ['SM_NUM_GPUS'])\n\n   # using it as variable\n   num_gpus = int(os.environ['SM_NUM_GPUS'])\n\n.. _header-n1042:\n\nList of provided environment variables by SageMaker Containers\n--------------------------------------------------------------\n\n.. _header-n1043:\n\nSM_NUM_CPUS\n~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_NUM_CPUS=32\n\nThe number of cpus available in the current container. Usage example:\n\n.. code:: python\n\n   # using it in argparse\n   parser.add_argument('num_cpus', type=int, default=os.environ['SM_NUM_CPUS'])\n\n   # using it as variable\n   num_cpus = int(os.environ['SM_NUM_CPUS'])\n\n.. _header-n1047:\n\nSM_LOG_LEVEL\n~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_LOG_LEVEL=20\n\nThe current log level in the container. Usage example:\n\n.. code:: python\n\n   import os\n   import logging\n\n   logger = logging.getLogger(__name__)\n\n   logger.setLevel(int(os.environ.get('SM_LOG_LEVEL', logging.INFO)))\n\n.. _header-n1053:\n\nSM_NETWORK_INTERFACE_NAME\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_NETWORK_INTERFACE_NAME=ethwe\n\nName of the network interface, useful for distributed training. Usage\nexample:\n\n.. code:: python\n\n   # using it in argparse\n   parser.add_argument('network_interface', type=str, default=os.environ['SM_NETWORK_INTERFACE_NAME'])\n\n   # using it as variable\n   network_interface = os.environ['SM_NETWORK_INTERFACE_NAME']\n\n.. _header-n1057:\n\nSM_USER_ARGS\n~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_USER_ARGS='[\"--batch-size\",\"256\",\"--learning_rate\",\"0.0001\",\"--communicator\",\"pure_nccl\"]'\n\nJSON encoded list with the script arguments provided for training.\n\n.. _header-n1060:\n\nSM_INPUT_DIR\n~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_INPUT_DIR=/opt/ml/input/\n\nThe path of the input directory, e.g. ``/opt/ml/input/`` The input_dir,\ne.g. ``/opt/ml/input/``, is the directory where SageMaker saves input\ndata and configuration files before and during training.\n\n.. _header-n1063:\n\nSM_INPUT_CONFIG_DIR\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_INPUT_CONFIG_DIR=/opt/ml/input/config\n\nThe path of the input configuration directory, e.g. ``/opt/ml/input/config/``. The\ndirectory where standard SageMaker configuration files are located, e.g.\n``/opt/ml/input/config/``.\n\nSageMaker training creates the following files in this folder when\ntraining starts: \n\n- ``hyperparameters.json``: Amazon SageMaker makes the hyperparameters in a CreateTrainingJob request available in this file. \n\n- ``inputdataconfig.json``: You specify data channel information in the InputDataConfig parameter in a CreateTrainingJob request. Amazon SageMaker makes this information available in this file. \n\n- ``resourceconfig.json``: name of the current host and all host containers in the training.\n\nMore information about this files can be find here:\nhttps://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html\n\n.. _header-n1068:\n\nSM_OUTPUT_DATA_DIR\n~~~~~~~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_OUTPUT_DATA_DIR=/opt/ml/output/data/algo-1\n\nThe dir to write non-model training artifacts (e.g. evaluation results)\nwhich will be retained by SageMaker, e.g. ``/opt/ml/output/data``.\n\nAs your algorithm runs in a container, it generates output including the\nstatus of the training job and model and output artifacts. Your\nalgorithm should write this information to the this directory.\n\n.. _header-n1072:\n\nSM_RESOURCE_CONFIG\n~~~~~~~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_RESOURCE_CONFIG='{\"current_host\":\"algo-1\",\"hosts\":[\"algo-1\",\"algo-2\"]}'\n\nThe contents from ``/opt/ml/input/config/resourceconfig.json``. It has\nthe following keys:\n\n-  current_host: The name of the current container on the container\n   network. For example, ``'algo-1'``.\n\n-  hosts: The list of names of all containers on the container network,\n   sorted lexicographically. For example,\n   ``['algo-1', 'algo-2', 'algo-3']`` for a three-node cluster.\n\nFor more information about ``resourceconfig.json``:\nhttps://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html#your-algorithms-training-algo-running-container-dist-training\n\n.. _header-n1081:\n\nSM_INPUT_DATA_CONFIG\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_INPUT_DATA_CONFIG='{\n       \"testing\": {\n           \"RecordWrapperType\": \"None\",\n           \"S3DistributionType\": \"FullyReplicated\",\n           \"TrainingInputMode\": \"File\"\n       },\n       \"training\": {\n           \"RecordWrapperType\": \"None\",\n           \"S3DistributionType\": \"FullyReplicated\",\n           \"TrainingInputMode\": \"File\"\n       }\n   }'\n\nInput data configuration from\n``/opt/ml/input/config/inputdataconfig.json``.\n\nFor more information about ``inpudataconfig.json``:\nhttps://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html#your-algorithms-training-algo-running-container-dist-training\n\n.. _header-n1085:\n\nSM_TRAINING_ENV\n~~~~~~~~~~~~~~~\n\n.. code:: shell\n\n   SM_TRAINING_ENV='\n   {\n       \"channel_input_dirs\": {\n           \"test\": \"/opt/ml/input/data/testing\",\n           \"train\": \"/opt/ml/input/data/training\"\n       },\n       \"current_host\": \"algo-1\",\n       \"framework_module\": \"sagemaker_chainer_container.training:main\",\n       \"hosts\": [\n           \"algo-1\",\n           \"algo-2\"\n       ],\n       \"hyperparameters\": {\n           \"batch-size\": 10000,\n           \"epochs\": 1\n       },\n       \"input_config_dir\": \"/opt/ml/input/config\",\n       \"input_data_config\": {\n           \"test\": {\n               \"RecordWrapperType\": \"None\",\n               \"S3DistributionType\": \"FullyReplicated\",\n               \"TrainingInputMode\": \"File\"\n           },\n           \"train\": {\n               \"RecordWrapperType\": \"None\",\n               \"S3DistributionType\": \"FullyReplicated\",\n               \"TrainingInputMode\": \"File\"\n           }\n       },\n       \"input_dir\": \"/opt/ml/input\",\n       \"job_name\": \"preprod-chainer-2018-05-31-06-27-15-511\",\n       \"log_level\": 20,\n       \"model_dir\": \"/opt/ml/model\",\n       \"module_dir\": \"s3://sagemaker-{aws-region}-{aws-id}/{training-job-name}/source/sourcedir.tar.gz\",\n       \"module_name\": \"user_script\",\n       \"network_interface_name\": \"ethwe\",\n       \"num_cpus\": 4,\n       \"num_gpus\": 1,\n       \"output_data_dir\": \"/opt/ml/output/data/algo-1\",\n       \"output_dir\": \"/opt/ml/output\",\n       \"resource_config\": {\n           \"current_host\": \"algo-1\",\n           \"hosts\": [\n               \"algo-1\",\n               \"algo-2\"\n           ]\n       }\n   }'\n\nProvides the entire training information as a JSON-encoded dictionary.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aws/sagemaker-containers/", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "sagemaker-containers", "package_url": "https://pypi.org/project/sagemaker-containers/", "platform": "", "project_url": "https://pypi.org/project/sagemaker-containers/", "project_urls": {"Homepage": "https://github.com/aws/sagemaker-containers/"}, "release_url": "https://pypi.org/project/sagemaker-containers/2.8.6.post0/", "requires_dist": null, "requires_python": "", "summary": "Open source library for creating containers to run on Amazon SageMaker.", "version": "2.8.6.post0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"warning-this-package-has-been-deprecated-please-use-the-sagemaker-training-toolkit-for-model-training-and-the-sagemaker-inference-toolkit-for-model-serving\">\n<h2>WARNING: This package has been deprecated. Please use the <a href=\"https://github.com/aws/sagemaker-training-toolkit\" rel=\"nofollow\">SageMaker Training Toolkit</a> for model training and the <a href=\"https://github.com/aws/sagemaker-inference-toolkit\" rel=\"nofollow\">SageMaker Inference Toolkit</a> for model serving.</h2>\n</div>\n<div id=\"sagemaker-containers\">\n<span id=\"header-n957\"></span><h2><a href=\"#id2\" rel=\"nofollow\">SageMaker Containers</a></h2>\n<a href=\"https://github.com/python/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60c9766d3e4743ac1ccc37cf3755aa6609b5ce47/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d626c61636b2d3030303030302e737667\"></a>\n<p>SageMaker Containers gives you tools to create SageMaker-compatible Docker containers, and has additional tools for letting you create Frameworks\n(SageMaker-compatible Docker containers that can run arbitrary Python or shell scripts).</p>\n<p>Currently, this library is used by the following containers: <a href=\"https://github.com/aws/sagemaker-tensorflow-container/tree/script-mode\" rel=\"nofollow\">TensorFlow\nScript Mode</a>,\n<a href=\"https://github.com/aws/sagemaker-mxnet-container\" rel=\"nofollow\">MXNet</a>,\n<a href=\"https://github.com/aws/sagemaker-pytorch-container\" rel=\"nofollow\">PyTorch</a>,\n<a href=\"https://github.com/aws/sagemaker-chainer-container\" rel=\"nofollow\">Chainer</a>, and\n<a href=\"https://github.com/aws/sagemaker-scikit-learn-container\" rel=\"nofollow\">Scikit-learn</a>.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#warning-this-package-has-been-deprecated-please-use-the-sagemaker-training-toolkit-for-model-training-and-the-sagemaker-inference-toolkit-for-model-serving\" id=\"id1\" rel=\"nofollow\">WARNING: This package has been deprecated. Please use the SageMaker Training Toolkit for model training and the SageMaker Inference Toolkit for model serving.</a></li>\n<li><a href=\"#sagemaker-containers\" id=\"id2\" rel=\"nofollow\">SageMaker Containers</a></li>\n<li><a href=\"#getting-started\" id=\"id3\" rel=\"nofollow\">Getting Started</a><ul>\n<li><a href=\"#creating-a-container-using-sagemaker-containers\" id=\"id4\" rel=\"nofollow\">Creating a container using SageMaker Containers</a><ul>\n<li><a href=\"#the-dockerfile\" id=\"id5\" rel=\"nofollow\">The Dockerfile</a></li>\n<li><a href=\"#building-the-container\" id=\"id6\" rel=\"nofollow\">Building the container</a></li>\n<li><a href=\"#training-with-local-mode\" id=\"id7\" rel=\"nofollow\">Training with Local Mode</a></li>\n</ul>\n</li>\n<li><a href=\"#how-a-script-is-executed-inside-the-container\" id=\"id8\" rel=\"nofollow\">How a script is executed inside the container</a><ul>\n<li><a href=\"#mapping-hyperparameters-to-script-arguments\" id=\"id9\" rel=\"nofollow\">Mapping hyperparameters to script arguments</a></li>\n<li><a href=\"#reading-additional-information-from-the-container\" id=\"id10\" rel=\"nofollow\">Reading additional information from the container</a></li>\n</ul>\n</li>\n<li><a href=\"#important-environment-variables\" id=\"id11\" rel=\"nofollow\">IMPORTANT ENVIRONMENT VARIABLES</a><ul>\n<li><a href=\"#sm-model-dir\" id=\"id12\" rel=\"nofollow\">SM_MODEL_DIR</a></li>\n<li><a href=\"#sm-channels\" id=\"id13\" rel=\"nofollow\">SM_CHANNELS</a></li>\n<li><a href=\"#sm-channel-channel-name\" id=\"id14\" rel=\"nofollow\">SM_CHANNEL_{channel_name}</a></li>\n<li><a href=\"#sm-hps\" id=\"id15\" rel=\"nofollow\">SM_HPS</a></li>\n<li><a href=\"#sm-hp-hyperparameter-name\" id=\"id16\" rel=\"nofollow\">SM_HP_{hyperparameter_name}</a></li>\n<li><a href=\"#sm-current-host\" id=\"id17\" rel=\"nofollow\">SM_CURRENT_HOST</a></li>\n<li><a href=\"#sm-hosts\" id=\"id18\" rel=\"nofollow\">SM_HOSTS</a></li>\n<li><a href=\"#sm-num-gpus\" id=\"id19\" rel=\"nofollow\">SM_NUM_GPUS</a></li>\n</ul>\n</li>\n<li><a href=\"#list-of-provided-environment-variables-by-sagemaker-containers\" id=\"id20\" rel=\"nofollow\">List of provided environment variables by SageMaker Containers</a><ul>\n<li><a href=\"#sm-num-cpus\" id=\"id21\" rel=\"nofollow\">SM_NUM_CPUS</a></li>\n<li><a href=\"#sm-log-level\" id=\"id22\" rel=\"nofollow\">SM_LOG_LEVEL</a></li>\n<li><a href=\"#sm-network-interface-name\" id=\"id23\" rel=\"nofollow\">SM_NETWORK_INTERFACE_NAME</a></li>\n<li><a href=\"#sm-user-args\" id=\"id24\" rel=\"nofollow\">SM_USER_ARGS</a></li>\n<li><a href=\"#sm-input-dir\" id=\"id25\" rel=\"nofollow\">SM_INPUT_DIR</a></li>\n<li><a href=\"#sm-input-config-dir\" id=\"id26\" rel=\"nofollow\">SM_INPUT_CONFIG_DIR</a></li>\n<li><a href=\"#sm-output-data-dir\" id=\"id27\" rel=\"nofollow\">SM_OUTPUT_DATA_DIR</a></li>\n<li><a href=\"#sm-resource-config\" id=\"id28\" rel=\"nofollow\">SM_RESOURCE_CONFIG</a></li>\n<li><a href=\"#sm-input-data-config\" id=\"id29\" rel=\"nofollow\">SM_INPUT_DATA_CONFIG</a></li>\n<li><a href=\"#sm-training-env\" id=\"id30\" rel=\"nofollow\">SM_TRAINING_ENV</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"getting-started\">\n<span id=\"header-n1174\"></span><h2><a href=\"#id3\" rel=\"nofollow\">Getting Started</a></h2>\n<div id=\"creating-a-container-using-sagemaker-containers\">\n<span id=\"header-n962\"></span><h3><a href=\"#id4\" rel=\"nofollow\">Creating a container using SageMaker Containers</a></h3>\n<p>Here we\u2019ll demonstrate how to create a Docker image using SageMaker Containers in order to show the simplicity of using this library.</p>\n<p>Let\u2019s suppose we need to train a model with the following training script <tt>train.py</tt> using TF 2.0 in SageMaker:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n\n<span class=\"n\">mnist</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">mnist</span>\n\n<span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">mnist</span><span class=\"o\">.</span><span class=\"n\">load_data</span><span class=\"p\">()</span>\n<span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">x_test</span> <span class=\"o\">=</span> <span class=\"n\">x_train</span> <span class=\"o\">/</span> <span class=\"mf\">255.0</span><span class=\"p\">,</span> <span class=\"n\">x_test</span> <span class=\"o\">/</span> <span class=\"mf\">255.0</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">([</span>\n  <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Flatten</span><span class=\"p\">(</span><span class=\"n\">input_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">)),</span>\n  <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">'relu'</span><span class=\"p\">),</span>\n  <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">),</span>\n  <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">'softmax'</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s1\">'adam'</span><span class=\"p\">,</span>\n              <span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">'sparse_categorical_crossentropy'</span><span class=\"p\">,</span>\n              <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'accuracy'</span><span class=\"p\">])</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n</pre>\n<div id=\"the-dockerfile\">\n<span id=\"header-n965\"></span><h4><a href=\"#id5\" rel=\"nofollow\">The Dockerfile</a></h4>\n<p>We then create a Dockerfile with our dependencies and define the\nprogram that will be executed in SageMaker:</p>\n<pre><span class=\"k\">FROM</span> <span class=\"s\">tensorflow/tensorflow:2.0.0a0</span>\n\n<span class=\"k\">RUN</span> pip install sagemaker-containers\n\n<span class=\"c\"># Copies the training code inside the container</span>\n<span class=\"k\">COPY</span> train.py /opt/ml/code/train.py\n\n<span class=\"c\"># Defines train.py as script entry point</span>\n<span class=\"k\">ENV</span> SAGEMAKER_PROGRAM train.py\n</pre>\n<p>More documentation on how to build a Docker container can be found <a href=\"https://docs.docker.com/get-started/part2/#define-a-container-with-dockerfile\" rel=\"nofollow\">here</a></p>\n</div>\n<div id=\"building-the-container\">\n<span id=\"header-n968\"></span><h4><a href=\"#id6\" rel=\"nofollow\">Building the container</a></h4>\n<p>We then build the Docker image using <tt>docker build</tt>:</p>\n<pre>docker build -t tf-2.0 .\n</pre>\n</div>\n<div id=\"training-with-local-mode\">\n<span id=\"header-n971\"></span><h4><a href=\"#id7\" rel=\"nofollow\">Training with Local Mode</a></h4>\n<p>We can use <a href=\"https://sagemaker.readthedocs.io/en/stable/overview.html#local-mode\" rel=\"nofollow\">Local\nMode</a>\nto test the container locally:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sagemaker.estimator</span> <span class=\"kn\">import</span> <span class=\"n\">Estimator</span>\n\n<span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">Estimator</span><span class=\"p\">(</span><span class=\"n\">image_name</span><span class=\"o\">=</span><span class=\"s1\">'tf-2.0'</span><span class=\"p\">,</span>\n                      <span class=\"n\">role</span><span class=\"o\">=</span><span class=\"s1\">'SageMakerRole'</span><span class=\"p\">,</span>\n                      <span class=\"n\">train_instance_count</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                      <span class=\"n\">train_instance_type</span><span class=\"o\">=</span><span class=\"s1\">'local'</span><span class=\"p\">)</span>\n\n<span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">()</span>\n</pre>\n<p>After using Local Mode, we can push the image to ECR and run a SageMaker training job. To see a complete example on how to create a container using SageMaker\nContainer, including pushing it to ECR, see the example notebook <a href=\"https://github.com/awslabs/amazon-sagemaker-examples/blob/master/advanced_functionality/tensorflow_bring_your_own/tensorflow_bring_your_own.ipynb\" rel=\"nofollow\">tensorflow_bring_your_own.ipynb</a>.</p>\n</div>\n</div>\n<div id=\"how-a-script-is-executed-inside-the-container\">\n<span id=\"header-n975\"></span><h3><a href=\"#id8\" rel=\"nofollow\">How a script is executed inside the container</a></h3>\n<p>The training script must be located under the folder <tt>/opt/ml/code</tt> and its relative path is defined in the environment variable <tt>SAGEMAKER_PROGRAM</tt>. The following scripts are supported:</p>\n<ul>\n<li><strong>Python scripts</strong>: uses the Python interpreter for any script with\n.py suffix</li>\n<li><strong>Shell scripts</strong>: uses the Shell interpreter to execute any other\nscript</li>\n</ul>\n<p>When training starts, the interpreter executes the entry point, from the\nexample above:</p>\n<pre><span class=\"n\">python</span> <span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</pre>\n<div id=\"mapping-hyperparameters-to-script-arguments\">\n<span id=\"header-n984\"></span><h4><a href=\"#id9\" rel=\"nofollow\">Mapping hyperparameters to script arguments</a></h4>\n<p>Any hyperparameters provided by the training job will be passed by the\ninterpreter to the entry point as script arguments. For example the\ntraining job hyperparameters:</p>\n<pre><span class=\"p\">{</span><span class=\"s2\">\"HyperParameters\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"batch-size\"</span><span class=\"p\">:</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"s2\">\"learning-rate\"</span><span class=\"p\">:</span> <span class=\"mf\">0.0001</span><span class=\"p\">,</span> <span class=\"s2\">\"communicator\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pure_nccl\"</span><span class=\"p\">}}</span>\n</pre>\n<p>Will be executed as:</p>\n<pre>./user_script.sh --batch-size <span class=\"m\">256</span> --learning_rate <span class=\"m\">0</span>.0001 --communicator pure_nccl\n</pre>\n<p>The entry point is responsible for parsing these script arguments. For\nexample, in a Python script:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n\n  <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--learning-rate'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--batch-size'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n  <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--communicator'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n  <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--frequency'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n  <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n  <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"reading-additional-information-from-the-container\">\n<span id=\"header-n991\"></span><h4><a href=\"#id10\" rel=\"nofollow\">Reading additional information from the container</a></h4>\n<p>Very often, an entry point needs additional information from the\ncontainer that is not available in <tt>hyperparameters</tt>. SageMaker\nContainers writes this information as <strong>environment variables</strong> that are\navailable inside the script. For example, the training job below\nincludes the channels <strong>training</strong> and <strong>testing</strong>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sagemaker.pytorch</span> <span class=\"kn\">import</span> <span class=\"n\">PyTorch</span>\n\n<span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">PyTorch</span><span class=\"p\">(</span><span class=\"n\">entry_point</span><span class=\"o\">=</span><span class=\"s1\">'train.py'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">({</span><span class=\"s1\">'training'</span><span class=\"p\">:</span> <span class=\"s1\">'s3://bucket/path/to/training/data'</span><span class=\"p\">,</span>\n               <span class=\"s1\">'testing'</span><span class=\"p\">:</span> <span class=\"s1\">'s3://bucket/path/to/testing/data'</span><span class=\"p\">})</span>\n</pre>\n<p>The environment variable <tt>SM_CHANNEL_{channel_name}</tt> provides the\npath were the channel is located:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n\n  <span class=\"o\">...</span>\n\n  <span class=\"c1\"># reads input channels training and testing from the environment variables</span>\n  <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--training'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_CHANNEL_TRAINING'</span><span class=\"p\">])</span>\n  <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--testing'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_CHANNEL_TESTING'</span><span class=\"p\">])</span>\n\n  <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n  <span class=\"o\">...</span>\n</pre>\n<p>When training starts, SageMaker Containers will print all available\nenvironment variables.</p>\n</div>\n</div>\n<div id=\"important-environment-variables\">\n<span id=\"header-n997\"></span><h3><a href=\"#id11\" rel=\"nofollow\">IMPORTANT ENVIRONMENT VARIABLES</a></h3>\n<p>These environment variables are those that you\u2019re likely to use when\nwriting a user script. A full list of environment variables is given\nbelow.</p>\n<div id=\"sm-model-dir\">\n<span id=\"header-n999\"></span><h4><a href=\"#id12\" rel=\"nofollow\">SM_MODEL_DIR</a></h4>\n<pre><span class=\"nv\">SM_MODEL_DIR</span><span class=\"o\">=</span>/opt/ml/model\n</pre>\n<p>When the training job finishes, the container will be <strong>deleted</strong>\nincluding its file system with <strong>exception</strong> of the <tt>/opt/ml/model</tt> and\n<tt>/opt/ml/output</tt> folders. Use <tt>/opt/ml/model</tt> to save the model\ncheckpoints. These checkpoints will be uploaded to the default S3\nbucket. Usage example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"c1\"># using it in argparse</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'model_dir'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_MODEL_DIR'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># using it as variable</span>\n<span class=\"n\">model_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_MODEL_DIR'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># saving checkpoints to model dir in chainer</span>\n<span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">save_npz</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_MODEL_DIR'</span><span class=\"p\">],</span> <span class=\"s1\">'model.npz'</span><span class=\"p\">),</span> <span class=\"n\">model</span><span class=\"p\">)</span>\n</pre>\n<p>For more information, see: <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html#your-algorithms-training-algo-envvariables\" rel=\"nofollow\">How Amazon SageMaker Processes Training\nOutput</a>.</p>\n</div>\n<div id=\"sm-channels\">\n<span id=\"header-n1004\"></span><h4><a href=\"#id13\" rel=\"nofollow\">SM_CHANNELS</a></h4>\n<pre><span class=\"nv\">SM_CHANNELS</span><span class=\"o\">=</span><span class=\"s1\">'[\"testing\",\"training\"]'</span>\n</pre>\n<p>Contains the list of input data channels in the container.</p>\n<p>When you run training, you can partition your training data into\ndifferent logical \u201cchannels\u201d. Depending on your problem, some common\nchannel ideas are: \u201ctraining\u201d, \u201ctesting\u201d, \u201cevaluation\u201d or \u201cimages\u201d and\n\u201clabels\u201d.</p>\n<p><tt>SM_CHANNELS</tt> includes the name of the available channels in the\ncontainer as a JSON encoded list. Usage example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"c1\"># using it in argparse</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'channel_names'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_CHANNELS'</span><span class=\"p\">])))</span>\n\n<span class=\"c1\"># using it as variable</span>\n<span class=\"n\">channel_names</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_CHANNELS'</span><span class=\"p\">]))</span>\n</pre>\n</div>\n<div id=\"sm-channel-channel-name\">\n<span id=\"header-n1010\"></span><h4><a href=\"#id14\" rel=\"nofollow\">SM_CHANNEL_{channel_name}</a></h4>\n<pre><span class=\"nv\">SM_CHANNEL_TRAINING</span><span class=\"o\">=</span><span class=\"s1\">'/opt/ml/input/data/training'</span>\n<span class=\"nv\">SM_CHANNEL_TESTING</span><span class=\"o\">=</span><span class=\"s1\">'/opt/ml/input/data/testing'</span>\n</pre>\n<p>Contains the directory where the channel named <tt>channel_name</tt> is\nlocated in the container. Usage examples:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--train'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_CHANNEL_TRAINING'</span><span class=\"p\">])</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--test'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_CHANNEL_TESTING'</span><span class=\"p\">])</span>\n\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n<span class=\"n\">train_file</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"s1\">'train.npz'</span><span class=\"p\">))</span>\n<span class=\"n\">test_file</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"s1\">'test.npz'</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"sm-hps\">\n<span id=\"header-n1014\"></span><h4><a href=\"#id15\" rel=\"nofollow\">SM_HPS</a></h4>\n<pre><span class=\"nv\">SM_HPS</span><span class=\"o\">=</span><span class=\"s1\">'{\"batch-size\": \"256\", \"learning-rate\": \"0.0001\",\"communicator\": \"pure_nccl\"}'</span>\n</pre>\n<p>Contains a JSON encoded dictionary with the user provided\nhyperparameters. Example usage:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">hyperparameters</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_HPS'</span><span class=\"p\">]))</span>\n<span class=\"c1\"># {\"batch-size\": 256, \"learning-rate\": 0.0001, \"communicator\": \"pure_nccl\"}</span>\n</pre>\n</div>\n<div id=\"sm-hp-hyperparameter-name\">\n<span id=\"header-n1020\"></span><h4><a href=\"#id16\" rel=\"nofollow\">SM_HP_{hyperparameter_name}</a></h4>\n<pre>SM_HP_LEARNING-RATE<span class=\"o\">=</span><span class=\"m\">0</span>.0001\nSM_HP_BATCH-SIZE<span class=\"o\">=</span><span class=\"m\">10000</span>\n<span class=\"nv\">SM_HP_COMMUNICATOR</span><span class=\"o\">=</span>pure_nccl\n</pre>\n<p>Contains value of the hyperparameter named <tt>hyperparameter_name</tt>.\nUsage examples:</p>\n<pre><span class=\"n\">learning_rate</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_HP_LEARNING-RATE'</span><span class=\"p\">])</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_HP_BATCH-SIZE'</span><span class=\"p\">])</span>\n<span class=\"n\">comminicator</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_HP_COMMUNICATOR'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"sm-current-host\">\n<span id=\"header-n1026\"></span><h4><a href=\"#id17\" rel=\"nofollow\">SM_CURRENT_HOST</a></h4>\n<pre><span class=\"nv\">SM_CURRENT_HOST</span><span class=\"o\">=</span>algo-1\n</pre>\n<p>The name of the current container on the container network. Usage\nexample:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"c1\"># using it in argparse</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'current_host'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_CURRENT_HOST'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># using it as variable</span>\n<span class=\"n\">current_host</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_CURRENT_HOST'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"sm-hosts\">\n<span id=\"header-n1032\"></span><h4><a href=\"#id18\" rel=\"nofollow\">SM_HOSTS</a></h4>\n<pre><span class=\"nv\">SM_HOSTS</span><span class=\"o\">=</span><span class=\"s1\">'[\"algo-1\",\"algo-2\"]'</span>\n</pre>\n<p>JSON encoded list containing all the hosts . Usage example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"c1\"># using it in argparse</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'hosts'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_HOSTS'</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># using it as variable</span>\n<span class=\"n\">hosts</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_HOSTS'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"sm-num-gpus\">\n<span id=\"header-n1038\"></span><h4><a href=\"#id19\" rel=\"nofollow\">SM_NUM_GPUS</a></h4>\n<pre><span class=\"nv\">SM_NUM_GPUS</span><span class=\"o\">=</span><span class=\"m\">1</span>\n</pre>\n<p>The number of gpus available in the current container. Usage example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"c1\"># using it in argparse</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'num_gpus'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_NUM_GPUS'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># using it as variable</span>\n<span class=\"n\">num_gpus</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_NUM_GPUS'</span><span class=\"p\">])</span>\n</pre>\n</div>\n</div>\n<div id=\"list-of-provided-environment-variables-by-sagemaker-containers\">\n<span id=\"header-n1042\"></span><h3><a href=\"#id20\" rel=\"nofollow\">List of provided environment variables by SageMaker Containers</a></h3>\n<div id=\"sm-num-cpus\">\n<span id=\"header-n1043\"></span><h4><a href=\"#id21\" rel=\"nofollow\">SM_NUM_CPUS</a></h4>\n<pre><span class=\"nv\">SM_NUM_CPUS</span><span class=\"o\">=</span><span class=\"m\">32</span>\n</pre>\n<p>The number of cpus available in the current container. Usage example:</p>\n<pre><span class=\"c1\"># using it in argparse</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'num_cpus'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_NUM_CPUS'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># using it as variable</span>\n<span class=\"n\">num_cpus</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_NUM_CPUS'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"sm-log-level\">\n<span id=\"header-n1047\"></span><h4><a href=\"#id22\" rel=\"nofollow\">SM_LOG_LEVEL</a></h4>\n<pre><span class=\"nv\">SM_LOG_LEVEL</span><span class=\"o\">=</span><span class=\"m\">20</span>\n</pre>\n<p>The current log level in the container. Usage example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'SM_LOG_LEVEL'</span><span class=\"p\">,</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"sm-network-interface-name\">\n<span id=\"header-n1053\"></span><h4><a href=\"#id23\" rel=\"nofollow\">SM_NETWORK_INTERFACE_NAME</a></h4>\n<pre><span class=\"nv\">SM_NETWORK_INTERFACE_NAME</span><span class=\"o\">=</span>ethwe\n</pre>\n<p>Name of the network interface, useful for distributed training. Usage\nexample:</p>\n<pre><span class=\"c1\"># using it in argparse</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'network_interface'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_NETWORK_INTERFACE_NAME'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># using it as variable</span>\n<span class=\"n\">network_interface</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SM_NETWORK_INTERFACE_NAME'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"sm-user-args\">\n<span id=\"header-n1057\"></span><h4><a href=\"#id24\" rel=\"nofollow\">SM_USER_ARGS</a></h4>\n<pre><span class=\"nv\">SM_USER_ARGS</span><span class=\"o\">=</span><span class=\"s1\">'[\"--batch-size\",\"256\",\"--learning_rate\",\"0.0001\",\"--communicator\",\"pure_nccl\"]'</span>\n</pre>\n<p>JSON encoded list with the script arguments provided for training.</p>\n</div>\n<div id=\"sm-input-dir\">\n<span id=\"header-n1060\"></span><h4><a href=\"#id25\" rel=\"nofollow\">SM_INPUT_DIR</a></h4>\n<pre><span class=\"nv\">SM_INPUT_DIR</span><span class=\"o\">=</span>/opt/ml/input/\n</pre>\n<p>The path of the input directory, e.g. <tt>/opt/ml/input/</tt> The input_dir,\ne.g. <tt>/opt/ml/input/</tt>, is the directory where SageMaker saves input\ndata and configuration files before and during training.</p>\n</div>\n<div id=\"sm-input-config-dir\">\n<span id=\"header-n1063\"></span><h4><a href=\"#id26\" rel=\"nofollow\">SM_INPUT_CONFIG_DIR</a></h4>\n<pre><span class=\"nv\">SM_INPUT_CONFIG_DIR</span><span class=\"o\">=</span>/opt/ml/input/config\n</pre>\n<p>The path of the input configuration directory, e.g. <tt>/opt/ml/input/config/</tt>. The\ndirectory where standard SageMaker configuration files are located, e.g.\n<tt>/opt/ml/input/config/</tt>.</p>\n<p>SageMaker training creates the following files in this folder when\ntraining starts:</p>\n<ul>\n<li><tt>hyperparameters.json</tt>: Amazon SageMaker makes the hyperparameters in a CreateTrainingJob request available in this file.</li>\n<li><tt>inputdataconfig.json</tt>: You specify data channel information in the InputDataConfig parameter in a CreateTrainingJob request. Amazon SageMaker makes this information available in this file.</li>\n<li><tt>resourceconfig.json</tt>: name of the current host and all host containers in the training.</li>\n</ul>\n<p>More information about this files can be find here:\n<a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html\" rel=\"nofollow\">https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html</a></p>\n</div>\n<div id=\"sm-output-data-dir\">\n<span id=\"header-n1068\"></span><h4><a href=\"#id27\" rel=\"nofollow\">SM_OUTPUT_DATA_DIR</a></h4>\n<pre><span class=\"nv\">SM_OUTPUT_DATA_DIR</span><span class=\"o\">=</span>/opt/ml/output/data/algo-1\n</pre>\n<p>The dir to write non-model training artifacts (e.g. evaluation results)\nwhich will be retained by SageMaker, e.g. <tt>/opt/ml/output/data</tt>.</p>\n<p>As your algorithm runs in a container, it generates output including the\nstatus of the training job and model and output artifacts. Your\nalgorithm should write this information to the this directory.</p>\n</div>\n<div id=\"sm-resource-config\">\n<span id=\"header-n1072\"></span><h4><a href=\"#id28\" rel=\"nofollow\">SM_RESOURCE_CONFIG</a></h4>\n<pre><span class=\"nv\">SM_RESOURCE_CONFIG</span><span class=\"o\">=</span><span class=\"s1\">'{\"current_host\":\"algo-1\",\"hosts\":[\"algo-1\",\"algo-2\"]}'</span>\n</pre>\n<p>The contents from <tt>/opt/ml/input/config/resourceconfig.json</tt>. It has\nthe following keys:</p>\n<ul>\n<li>current_host: The name of the current container on the container\nnetwork. For example, <tt><span class=\"pre\">'algo-1'</span></tt>.</li>\n<li>hosts: The list of names of all containers on the container network,\nsorted lexicographically. For example,\n<tt><span class=\"pre\">['algo-1',</span> <span class=\"pre\">'algo-2',</span> <span class=\"pre\">'algo-3']</span></tt> for a three-node cluster.</li>\n</ul>\n<p>For more information about <tt>resourceconfig.json</tt>:\n<a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html#your-algorithms-training-algo-running-container-dist-training\" rel=\"nofollow\">https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html#your-algorithms-training-algo-running-container-dist-training</a></p>\n</div>\n<div id=\"sm-input-data-config\">\n<span id=\"header-n1081\"></span><h4><a href=\"#id29\" rel=\"nofollow\">SM_INPUT_DATA_CONFIG</a></h4>\n<pre><span class=\"nv\">SM_INPUT_DATA_CONFIG</span><span class=\"o\">=</span><span class=\"s1\">'{\n    \"testing\": {\n        \"RecordWrapperType\": \"None\",\n        \"S3DistributionType\": \"FullyReplicated\",\n        \"TrainingInputMode\": \"File\"\n    },\n    \"training\": {\n        \"RecordWrapperType\": \"None\",\n        \"S3DistributionType\": \"FullyReplicated\",\n        \"TrainingInputMode\": \"File\"\n    }\n}'</span>\n</pre>\n<p>Input data configuration from\n<tt>/opt/ml/input/config/inputdataconfig.json</tt>.</p>\n<p>For more information about <tt>inpudataconfig.json</tt>:\n<a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html#your-algorithms-training-algo-running-container-dist-training\" rel=\"nofollow\">https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html#your-algorithms-training-algo-running-container-dist-training</a></p>\n</div>\n<div id=\"sm-training-env\">\n<span id=\"header-n1085\"></span><h4><a href=\"#id30\" rel=\"nofollow\">SM_TRAINING_ENV</a></h4>\n<pre><span class=\"nv\">SM_TRAINING_ENV</span><span class=\"o\">=</span><span class=\"s1\">'\n{\n    \"channel_input_dirs\": {\n        \"test\": \"/opt/ml/input/data/testing\",\n        \"train\": \"/opt/ml/input/data/training\"\n    },\n    \"current_host\": \"algo-1\",\n    \"framework_module\": \"sagemaker_chainer_container.training:main\",\n    \"hosts\": [\n        \"algo-1\",\n        \"algo-2\"\n    ],\n    \"hyperparameters\": {\n        \"batch-size\": 10000,\n        \"epochs\": 1\n    },\n    \"input_config_dir\": \"/opt/ml/input/config\",\n    \"input_data_config\": {\n        \"test\": {\n            \"RecordWrapperType\": \"None\",\n            \"S3DistributionType\": \"FullyReplicated\",\n            \"TrainingInputMode\": \"File\"\n        },\n        \"train\": {\n            \"RecordWrapperType\": \"None\",\n            \"S3DistributionType\": \"FullyReplicated\",\n            \"TrainingInputMode\": \"File\"\n        }\n    },\n    \"input_dir\": \"/opt/ml/input\",\n    \"job_name\": \"preprod-chainer-2018-05-31-06-27-15-511\",\n    \"log_level\": 20,\n    \"model_dir\": \"/opt/ml/model\",\n    \"module_dir\": \"s3://sagemaker-{aws-region}-{aws-id}/{training-job-name}/source/sourcedir.tar.gz\",\n    \"module_name\": \"user_script\",\n    \"network_interface_name\": \"ethwe\",\n    \"num_cpus\": 4,\n    \"num_gpus\": 1,\n    \"output_data_dir\": \"/opt/ml/output/data/algo-1\",\n    \"output_dir\": \"/opt/ml/output\",\n    \"resource_config\": {\n        \"current_host\": \"algo-1\",\n        \"hosts\": [\n            \"algo-1\",\n            \"algo-2\"\n        ]\n    }\n}'</span>\n</pre>\n<p>Provides the entire training information as a JSON-encoded dictionary.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7077797, "releases": {"2.0.1": [{"comment_text": "", "digests": {"md5": "e234a1bfb7aed554d5a903b4e77d3db6", "sha256": "f8273077a702e5c3c41422504bf89e26864ca0879f7c0bd1179a4411f2cf239d"}, "downloads": -1, "filename": "sagemaker_containers-2.0.1.tar.gz", "has_sig": true, "md5_digest": "e234a1bfb7aed554d5a903b4e77d3db6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20889, "upload_time": "2018-05-30T20:33:11", "upload_time_iso_8601": "2018-05-30T20:33:11.905784Z", "url": "https://files.pythonhosted.org/packages/09/b0/af13ead6d711b6d040435e366c4190027d4f578afb504be8596c19f0a133/sagemaker_containers-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "9430e240beca2599999b67f1cd6b49f2", "sha256": "a0629ff219e9469d8684e7f2619124015e154fd9e2709d1aa6d5fca7d4f4f7b3"}, "downloads": -1, "filename": "sagemaker_containers-2.0.2.tar.gz", "has_sig": true, "md5_digest": "9430e240beca2599999b67f1cd6b49f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24760, "upload_time": "2018-05-30T20:59:05", "upload_time_iso_8601": "2018-05-30T20:59:05.238375Z", "url": "https://files.pythonhosted.org/packages/c3/90/f09c09d884395d244154caa0744e99b7f5b44a69e155c31226c48c6fe14b/sagemaker_containers-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "9cb6fa10287ec241ad8bd555db433f30", "sha256": "2505cdde6dc28e2ad285d8d250486f625eb0b9b9201b1cecbe766a3ad8ac3db6"}, "downloads": -1, "filename": "sagemaker_containers-2.0.3.tar.gz", "has_sig": true, "md5_digest": "9cb6fa10287ec241ad8bd555db433f30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30311, "upload_time": "2018-06-05T20:01:31", "upload_time_iso_8601": "2018-06-05T20:01:31.661554Z", "url": "https://files.pythonhosted.org/packages/f8/eb/a6daba478be809d47c6bd2f65c2f6010832aa2251845210b07188af66c80/sagemaker_containers-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "b53375752720bf304501577ddd02173c", "sha256": "da34d2d4d2ff056c8d2db1588d3fd27edeefb87a36f8edfd5cabdb3392ac6d56"}, "downloads": -1, "filename": "sagemaker_containers-2.0.4.tar.gz", "has_sig": true, "md5_digest": "b53375752720bf304501577ddd02173c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30320, "upload_time": "2018-06-13T18:55:34", "upload_time_iso_8601": "2018-06-13T18:55:34.548871Z", "url": "https://files.pythonhosted.org/packages/ac/9f/9094f75c38d48aa216aaa1ef0f312de49201f1406fc336e8292daa783186/sagemaker_containers-2.0.4.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "0d336291be3498c8b7e4030ce5dcc45a", "sha256": "014c0e255ffee5bc065c0354b5a066809353a73c4f5adcd4510ded1b206702a0"}, "downloads": -1, "filename": "sagemaker_containers-2.1.0.tar.gz", "has_sig": true, "md5_digest": "0d336291be3498c8b7e4030ce5dcc45a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31557, "upload_time": "2018-08-06T19:21:38", "upload_time_iso_8601": "2018-08-06T19:21:38.240008Z", "url": "https://files.pythonhosted.org/packages/81/d7/79b10bcbac7411f6786c9a7e64ec57b626de7ef78aeb30e05843e4659dd8/sagemaker_containers-2.1.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "bf7777909ac17afc054bac4e379df15f", "sha256": "c9bd9058b3d8de5db5848bf1dfac3a3107e5029d417b938a55b7115b7de8e3d2"}, "downloads": -1, "filename": "sagemaker_containers-2.2.1.tar.gz", "has_sig": true, "md5_digest": "bf7777909ac17afc054bac4e379df15f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31662, "upload_time": "2018-09-25T22:08:39", "upload_time_iso_8601": "2018-09-25T22:08:39.529737Z", "url": "https://files.pythonhosted.org/packages/44/1a/775d90b4a38c3353a443ab9632b0cb43e9d9a7fa221fa4b2ce5131a045c1/sagemaker_containers-2.2.1.tar.gz", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "aa788c614e071df591f4435027e38db5", "sha256": "b44e055f53c257cc16b069c62655585931b75a5cdbc6d9ece72ed5dc7719d1a5"}, "downloads": -1, "filename": "sagemaker_containers-2.2.2.tar.gz", "has_sig": true, "md5_digest": "aa788c614e071df591f4435027e38db5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31707, "upload_time": "2018-09-26T23:11:11", "upload_time_iso_8601": "2018-09-26T23:11:11.571376Z", "url": "https://files.pythonhosted.org/packages/1a/d7/bf34a092974174a1765de7b5cd5d67b9de8727260b0ac112bad2ea2e092d/sagemaker_containers-2.2.2.tar.gz", "yanked": false}], "2.2.4": [{"comment_text": "", "digests": {"md5": "a0b0892ca7b9a51195405836ea22f2bf", "sha256": "040a9d6d3f12e33bf3fa6dce6a9de2a5e296926b53740aaf4ff980ce369ca628"}, "downloads": -1, "filename": "sagemaker_containers-2.2.4.tar.gz", "has_sig": true, "md5_digest": "a0b0892ca7b9a51195405836ea22f2bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31683, "upload_time": "2018-10-18T20:51:14", "upload_time_iso_8601": "2018-10-18T20:51:14.753015Z", "url": "https://files.pythonhosted.org/packages/ec/fe/c856408413dc2a5d867bf04a2d3fd88950c909aba15dec1d17d4e54cd969/sagemaker_containers-2.2.4.tar.gz", "yanked": false}], "2.2.5": [{"comment_text": "", "digests": {"md5": "816c4c06d230a78c4be81e529f64f38b", "sha256": "239e2610fa55dc3a502b9e97cf8ab7fc62e902119c7b8cfef01b62d718d9b119"}, "downloads": -1, "filename": "sagemaker_containers-2.2.5.tar.gz", "has_sig": true, "md5_digest": "816c4c06d230a78c4be81e529f64f38b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32001, "upload_time": "2018-10-23T23:06:28", "upload_time_iso_8601": "2018-10-23T23:06:28.135689Z", "url": "https://files.pythonhosted.org/packages/98/51/de08d7c73927ff7158c8fbec4a45e33c5a29c1ea15e67fe31efbaac4892e/sagemaker_containers-2.2.5.tar.gz", "yanked": false}], "2.2.6": [{"comment_text": "", "digests": {"md5": "52c223672ebcc5b30b9fbcc432c8a916", "sha256": "368e97a08b72ed7a65d5af709c6261326fe71be95ea4596d3c3fe6b903045445"}, "downloads": -1, "filename": "sagemaker_containers-2.2.6.tar.gz", "has_sig": true, "md5_digest": "52c223672ebcc5b30b9fbcc432c8a916", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32322, "upload_time": "2018-10-24T18:13:17", "upload_time_iso_8601": "2018-10-24T18:13:17.233983Z", "url": "https://files.pythonhosted.org/packages/a5/9d/309235cd64a46ef0468b77b065b2c85d86acbc292c58a1655dfe4871366b/sagemaker_containers-2.2.6.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "04283c98884cd440ab75611aa33a67f1", "sha256": "7e44843b943ce2818a6fd8a8d3f0c254630fbfd7d1dbc69a5a30249cbe2c5b74"}, "downloads": -1, "filename": "sagemaker_containers-2.3.0.tar.gz", "has_sig": true, "md5_digest": "04283c98884cd440ab75611aa33a67f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33077, "upload_time": "2018-11-15T20:46:47", "upload_time_iso_8601": "2018-11-15T20:46:47.133015Z", "url": "https://files.pythonhosted.org/packages/09/99/0a062b612a283538c8d1e81871abb5519ab009e80a9c36dae631bb3de8b3/sagemaker_containers-2.3.0.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "9829d70b16217a78e16056bab81298ff", "sha256": "f218f4b7abb09ac1d2eeeccbbca6895f12e1f9ca878241b2686311e275dd9b60"}, "downloads": -1, "filename": "sagemaker_containers-2.3.1.tar.gz", "has_sig": true, "md5_digest": "9829d70b16217a78e16056bab81298ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35110, "upload_time": "2018-11-19T19:38:45", "upload_time_iso_8601": "2018-11-19T19:38:45.872553Z", "url": "https://files.pythonhosted.org/packages/e3/84/7565c9aa0877112cabc230e358a9da901c422a31120873d3bac183943059/sagemaker_containers-2.3.1.tar.gz", "yanked": false}], "2.3.2": [{"comment_text": "", "digests": {"md5": "0f31b31cdaf73d64793e7c0b7a49d603", "sha256": "71e6e2cc3af1a2688fedde17e837e3361852a492220741a15a546fff2d8704ef"}, "downloads": -1, "filename": "sagemaker_containers-2.3.2.tar.gz", "has_sig": true, "md5_digest": "0f31b31cdaf73d64793e7c0b7a49d603", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35441, "upload_time": "2018-11-20T01:35:23", "upload_time_iso_8601": "2018-11-20T01:35:23.103147Z", "url": "https://files.pythonhosted.org/packages/66/69/ea17055768c6205d2686817b041bda46dd044b508ecf898f33c2afc253bd/sagemaker_containers-2.3.2.tar.gz", "yanked": false}], "2.3.3": [{"comment_text": "", "digests": {"md5": "f5d11951fb8ef89333b4f23410145ec5", "sha256": "badcf0e1862ca52bf445974fb43315a2c8f5cb2e93442b2c1efa234e735eab8d"}, "downloads": -1, "filename": "sagemaker_containers-2.3.3.tar.gz", "has_sig": true, "md5_digest": "f5d11951fb8ef89333b4f23410145ec5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35435, "upload_time": "2018-11-20T03:25:30", "upload_time_iso_8601": "2018-11-20T03:25:30.550856Z", "url": "https://files.pythonhosted.org/packages/ef/03/c8c25be68d060cbb30d6282f0ca31c06fcda18d2a1c6d4c15ddb59ef3d67/sagemaker_containers-2.3.3.tar.gz", "yanked": false}], "2.3.4": [{"comment_text": "", "digests": {"md5": "61b2506b98575bce01e7a105db04940c", "sha256": "1e0ae266079bb4fe5da99c30914584a7007673bd8d408a60f188e88cf9c05118"}, "downloads": -1, "filename": "sagemaker_containers-2.3.4.tar.gz", "has_sig": true, "md5_digest": "61b2506b98575bce01e7a105db04940c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35817, "upload_time": "2018-11-20T08:08:19", "upload_time_iso_8601": "2018-11-20T08:08:19.125903Z", "url": "https://files.pythonhosted.org/packages/d1/1c/3d5a6fc301ca37052db1e76c24b892842dc2d12d899055428275b8f01133/sagemaker_containers-2.3.4.tar.gz", "yanked": false}], "2.3.5": [{"comment_text": "", "digests": {"md5": "19b18a6084208405af45297a0d0b0601", "sha256": "1c90263acb54867e814c0989bdf690c9b6f7d0421bef5c3b9e90120285f62fb1"}, "downloads": -1, "filename": "sagemaker_containers-2.3.5.tar.gz", "has_sig": true, "md5_digest": "19b18a6084208405af45297a0d0b0601", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38958, "upload_time": "2018-11-24T15:01:24", "upload_time_iso_8601": "2018-11-24T15:01:24.851842Z", "url": "https://files.pythonhosted.org/packages/72/38/4a01ca403883733856a28d75d3454b4e822678458b621d9a61b44b8a541e/sagemaker_containers-2.3.5.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "3a32fa69478518053c5ccebf9654186c", "sha256": "eaad15b31d807b2036422461330f6cbe2b05853f7d75de6b26d42f2e8d027317"}, "downloads": -1, "filename": "sagemaker_containers-2.4.0.tar.gz", "has_sig": true, "md5_digest": "3a32fa69478518053c5ccebf9654186c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43544, "upload_time": "2018-12-20T00:17:29", "upload_time_iso_8601": "2018-12-20T00:17:29.586236Z", "url": "https://files.pythonhosted.org/packages/be/7f/d5011a5d24d86872813140a31d9b8f6d38395a5937c917b9cff1c16e2a6d/sagemaker_containers-2.4.0.tar.gz", "yanked": false}], "2.4.1": [{"comment_text": "", "digests": {"md5": "0d99b8e4188bccee3901605808857064", "sha256": "4848e587e0318a65eaf8f2c1bafe5789063a1f934d8e812f72fb51b637d61e93"}, "downloads": -1, "filename": "sagemaker_containers-2.4.1.tar.gz", "has_sig": true, "md5_digest": "0d99b8e4188bccee3901605808857064", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46838, "upload_time": "2019-01-09T23:20:32", "upload_time_iso_8601": "2019-01-09T23:20:32.815191Z", "url": "https://files.pythonhosted.org/packages/2f/a7/892dd801ad5f7f2874144cb3de818da9d46a52bbf47070895426e918e0ce/sagemaker_containers-2.4.1.tar.gz", "yanked": false}], "2.4.10": [{"comment_text": "", "digests": {"md5": "53e76b72144d9fc5d0d585ff763391c0", "sha256": "627cd84f886457ccd195539fd71d37f71d26e93d54bc67f7adb79231f21580a8"}, "downloads": -1, "filename": "sagemaker_containers-2.4.10.tar.gz", "has_sig": true, "md5_digest": "53e76b72144d9fc5d0d585ff763391c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44525, "upload_time": "2019-05-20T16:24:34", "upload_time_iso_8601": "2019-05-20T16:24:34.196804Z", "url": "https://files.pythonhosted.org/packages/ac/76/c4bb56cc49f32ee7b8ace2ba6203c9f09f7359ac833935f78a419874cab5/sagemaker_containers-2.4.10.tar.gz", "yanked": false}], "2.4.10.post0": [{"comment_text": "", "digests": {"md5": "4346ccf792879dcd9111253ffa97b37b", "sha256": "dba535a5791a5d6dc65b87ceba4d60fe79cda280efddb6de0ee191e06f1300cb"}, "downloads": -1, "filename": "sagemaker_containers-2.4.10.post0.tar.gz", "has_sig": true, "md5_digest": "4346ccf792879dcd9111253ffa97b37b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48851, "upload_time": "2019-05-29T16:24:43", "upload_time_iso_8601": "2019-05-29T16:24:43.069253Z", "url": "https://files.pythonhosted.org/packages/34/a9/85445e62846f5ddfa730bd730e87cc9ea13c7efb7ad903916c781bd05aed/sagemaker_containers-2.4.10.post0.tar.gz", "yanked": false}], "2.4.2": [{"comment_text": "", "digests": {"md5": "325ed42eabff1a65b76e06a5c312e915", "sha256": "37c3cb6f4a7ce1ae2458e5ead8bf4c4fcf785a0837522fe7eb6dfba6e48a8825"}, "downloads": -1, "filename": "sagemaker_containers-2.4.2.tar.gz", "has_sig": true, "md5_digest": "325ed42eabff1a65b76e06a5c312e915", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46880, "upload_time": "2019-01-10T21:47:12", "upload_time_iso_8601": "2019-01-10T21:47:12.515929Z", "url": "https://files.pythonhosted.org/packages/ac/cb/fc4a5b0a2c000fce67604fe0b3713d88f7cdead2116bf5abc3a1462baf22/sagemaker_containers-2.4.2.tar.gz", "yanked": false}], "2.4.3": [{"comment_text": "", "digests": {"md5": "7bbd58ca9159784a150a8635b0709358", "sha256": "f4b534f2ff5572dd33502448b86898da46ffb1c66f57648a40d2b44aa47c7458"}, "downloads": -1, "filename": "sagemaker_containers-2.4.3.tar.gz", "has_sig": true, "md5_digest": "7bbd58ca9159784a150a8635b0709358", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46890, "upload_time": "2019-01-23T19:25:26", "upload_time_iso_8601": "2019-01-23T19:25:26.486779Z", "url": "https://files.pythonhosted.org/packages/3d/dd/26a346f1137c44f24a16b51b88314c0e5bbc93d7a9cc31f8671cc3746117/sagemaker_containers-2.4.3.tar.gz", "yanked": false}], "2.4.4": [{"comment_text": "", "digests": {"md5": "7f261dd207088bd2fd9ad1494442f2f8", "sha256": "e9d7126c1ff803dc7d1a82efbd867a4db903b367456829c221b39a12c8414459"}, "downloads": -1, "filename": "sagemaker_containers-2.4.4.tar.gz", "has_sig": true, "md5_digest": "7f261dd207088bd2fd9ad1494442f2f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46959, "upload_time": "2019-02-20T17:20:05", "upload_time_iso_8601": "2019-02-20T17:20:05.286768Z", "url": "https://files.pythonhosted.org/packages/a1/18/a16b5ecbe23bb9d548a35ccbab09dcf0cbbf58b0d0c2c96137a135207260/sagemaker_containers-2.4.4.tar.gz", "yanked": false}], "2.4.4.post1": [{"comment_text": "", "digests": {"md5": "a5268c0deeb9b990250ecc35bda2d1f3", "sha256": "07e5bb1234f469447db0f656cc9f21fae816a2e176f822b06683efb254edf9d6"}, "downloads": -1, "filename": "sagemaker_containers-2.4.4.post1.tar.gz", "has_sig": true, "md5_digest": "a5268c0deeb9b990250ecc35bda2d1f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46996, "upload_time": "2019-02-20T18:48:07", "upload_time_iso_8601": "2019-02-20T18:48:07.384082Z", "url": "https://files.pythonhosted.org/packages/8e/4a/77646ce9310e14915c245474376c6ffc5d5893c86214e593eaa2f9e2912e/sagemaker_containers-2.4.4.post1.tar.gz", "yanked": false}], "2.4.4.post2": [{"comment_text": "", "digests": {"md5": "e820b113626acd4f85f34db5f45acad4", "sha256": "cfb24599d419ff99560361ca674ee0312d87221ed898bb0a3652d4fb3d760f86"}, "downloads": -1, "filename": "sagemaker_containers-2.4.4.post2.tar.gz", "has_sig": true, "md5_digest": "e820b113626acd4f85f34db5f45acad4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49486, "upload_time": "2019-02-25T19:27:00", "upload_time_iso_8601": "2019-02-25T19:27:00.386295Z", "url": "https://files.pythonhosted.org/packages/cf/97/2e24b306b518960a4c58514d9b43f90c1ab626e72a4108bf8101e4303849/sagemaker_containers-2.4.4.post2.tar.gz", "yanked": false}], "2.4.5": [{"comment_text": "", "digests": {"md5": "c68594aa0219a4c729f471302c6a59fb", "sha256": "a5b5ebc61d9f50b321d2e77998d7155ed22afd61cb4b6dbc3cbfad575be49370"}, "downloads": -1, "filename": "sagemaker_containers-2.4.5.tar.gz", "has_sig": true, "md5_digest": "c68594aa0219a4c729f471302c6a59fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49498, "upload_time": "2019-04-23T16:19:53", "upload_time_iso_8601": "2019-04-23T16:19:53.497307Z", "url": "https://files.pythonhosted.org/packages/61/e8/a2e890c1bd0952f4585809c46967dd1b5fdd2d177b4e71edef4a8c0bbd30/sagemaker_containers-2.4.5.tar.gz", "yanked": false}], "2.4.6": [{"comment_text": "", "digests": {"md5": "3f255abc3e7bacaa27ff117dec09f548", "sha256": "698475b32752ce91c65668c8cd154a4767843df7c217f4482e4b6ec452c12ef6"}, "downloads": -1, "filename": "sagemaker_containers-2.4.6.tar.gz", "has_sig": true, "md5_digest": "3f255abc3e7bacaa27ff117dec09f548", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46350, "upload_time": "2019-04-23T17:14:11", "upload_time_iso_8601": "2019-04-23T17:14:11.298299Z", "url": "https://files.pythonhosted.org/packages/be/9b/b67a291854dd86b08ca9bf327d3ad599da8c6dc48309a06b83796d5fa5ee/sagemaker_containers-2.4.6.tar.gz", "yanked": false}], "2.4.6.post0": [{"comment_text": "", "digests": {"md5": "2d831b6b1ac150af9a5ad8c8ff218379", "sha256": "33c435d135ec80dbe1a6d36eaed0187ffce7ad2c78f5cd78437112a132adf605"}, "downloads": -1, "filename": "sagemaker_containers-2.4.6.post0.tar.gz", "has_sig": true, "md5_digest": "2d831b6b1ac150af9a5ad8c8ff218379", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46369, "upload_time": "2019-04-24T16:25:14", "upload_time_iso_8601": "2019-04-24T16:25:14.577813Z", "url": "https://files.pythonhosted.org/packages/84/93/afa466aaac4d34074ba9cc184a8b67a6cb3ce5c0cc135f2a8191a4c334a8/sagemaker_containers-2.4.6.post0.tar.gz", "yanked": false}], "2.4.7": [{"comment_text": "", "digests": {"md5": "9c6fe74e3bc4e7d632e7d50ddcdd999c", "sha256": "1432124adcc7a48874d7735ca217b99216db9146f402a43a2c45efe0de793fb4"}, "downloads": -1, "filename": "sagemaker_containers-2.4.7.tar.gz", "has_sig": true, "md5_digest": "9c6fe74e3bc4e7d632e7d50ddcdd999c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43680, "upload_time": "2019-04-30T16:25:15", "upload_time_iso_8601": "2019-04-30T16:25:15.298792Z", "url": "https://files.pythonhosted.org/packages/ad/d8/5cd13f50cc14aa8f749239abd04adbd246c5fc84359a4fd7971e9e7f2059/sagemaker_containers-2.4.7.tar.gz", "yanked": false}], "2.4.8": [{"comment_text": "", "digests": {"md5": "822837eda060114e148c9f30cbb2f7a4", "sha256": "cdf030729d953b7774de57f6dce32436a61be24207569fa071169477d9a8d3e9"}, "downloads": -1, "filename": "sagemaker_containers-2.4.8.tar.gz", "has_sig": true, "md5_digest": "822837eda060114e148c9f30cbb2f7a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43858, "upload_time": "2019-05-02T16:24:11", "upload_time_iso_8601": "2019-05-02T16:24:11.227833Z", "url": "https://files.pythonhosted.org/packages/24/c3/db327f0f8e3c2391f460958b0d8d08385a328a2751e8ddea45ec40e67129/sagemaker_containers-2.4.8.tar.gz", "yanked": false}], "2.4.9": [{"comment_text": "", "digests": {"md5": "ca02a996201b347d5576e9eeb643df25", "sha256": "ea6938284f3b0a756e166b95497a54cfe4b3361bad37a786c0f91be9a502bf76"}, "downloads": -1, "filename": "sagemaker_containers-2.4.9.tar.gz", "has_sig": true, "md5_digest": "ca02a996201b347d5576e9eeb643df25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43861, "upload_time": "2019-05-08T16:24:41", "upload_time_iso_8601": "2019-05-08T16:24:41.653579Z", "url": "https://files.pythonhosted.org/packages/a7/61/7611256176d26685e557c21b4d6521b8bb49d8e27a5d4689d175bece0905/sagemaker_containers-2.4.9.tar.gz", "yanked": false}], "2.5.0": [{"comment_text": "", "digests": {"md5": "a049c0861faf9dd59dea28dd5282f8f8", "sha256": "db4da571902af05cae750815e848a39049272f2e5cc2efdec79ec950200b360c"}, "downloads": -1, "filename": "sagemaker_containers-2.5.0.tar.gz", "has_sig": true, "md5_digest": "a049c0861faf9dd59dea28dd5282f8f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47649, "upload_time": "2019-06-24T16:24:43", "upload_time_iso_8601": "2019-06-24T16:24:43.347572Z", "url": "https://files.pythonhosted.org/packages/1c/b3/6e81ba3c5586eec94f35e25125831e3d817dfd35db57fa3c20036a94efef/sagemaker_containers-2.5.0.tar.gz", "yanked": false}], "2.5.1": [{"comment_text": "", "digests": {"md5": "98746d45d9e0e8e2351941c380b2924c", "sha256": "eb948d5187334c77b27a520e804b699d5a73721dfbf6c8c1093ad76ce94d7325"}, "downloads": -1, "filename": "sagemaker_containers-2.5.1.tar.gz", "has_sig": true, "md5_digest": "98746d45d9e0e8e2351941c380b2924c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47664, "upload_time": "2019-06-27T16:24:45", "upload_time_iso_8601": "2019-06-27T16:24:45.392364Z", "url": "https://files.pythonhosted.org/packages/bd/fc/275f50a6348ba6604c7952f38de7f7ba96d31e254e7ff8cc680eb4886fa8/sagemaker_containers-2.5.1.tar.gz", "yanked": false}], "2.5.10": [{"comment_text": "", "digests": {"md5": "99b73ae67b3a090e038e451bdbbbe810", "sha256": "1573ae4d01623c12d7c9161a6ab205a8192b675254e6b151b30ef493629db59f"}, "downloads": -1, "filename": "sagemaker_containers-2.5.10.tar.gz", "has_sig": true, "md5_digest": "99b73ae67b3a090e038e451bdbbbe810", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49297, "upload_time": "2019-10-24T16:24:07", "upload_time_iso_8601": "2019-10-24T16:24:07.699051Z", "url": "https://files.pythonhosted.org/packages/f2/eb/24ebf92db43b404e18b11e5bc2fff9086a81df2422234824b39566b74b6f/sagemaker_containers-2.5.10.tar.gz", "yanked": false}], "2.5.11": [{"comment_text": "", "digests": {"md5": "d6db9782301ffface6a47d6ad88cc8bc", "sha256": "0db8554d04fe4af728388895be2eb3bc1b88f4719dea3bdba9935ed060ec6472"}, "downloads": -1, "filename": "sagemaker_containers-2.5.11.tar.gz", "has_sig": true, "md5_digest": "d6db9782301ffface6a47d6ad88cc8bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49820, "upload_time": "2019-10-29T18:47:41", "upload_time_iso_8601": "2019-10-29T18:47:41.264836Z", "url": "https://files.pythonhosted.org/packages/c4/70/691fb0621632d49ffdb381073fecb293d9176883b6be13cc1cc19e398897/sagemaker_containers-2.5.11.tar.gz", "yanked": false}], "2.5.12": [{"comment_text": "", "digests": {"md5": "493d6323037661fd3b8c67f8d17f6793", "sha256": "92b14ce9064c5b19bfbbb015d98dcd42977415fb0eadd90bfc2d7c5063f40a11"}, "downloads": -1, "filename": "sagemaker_containers-2.5.12.tar.gz", "has_sig": true, "md5_digest": "493d6323037661fd3b8c67f8d17f6793", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54975, "upload_time": "2019-11-15T20:00:54", "upload_time_iso_8601": "2019-11-15T20:00:54.385500Z", "url": "https://files.pythonhosted.org/packages/b0/9d/6561a13d27615c332dcab129693af11644d7eb7bd10be3473c020f4d8e04/sagemaker_containers-2.5.12.tar.gz", "yanked": false}], "2.5.2": [{"comment_text": "", "digests": {"md5": "33ff7a7f5e79726240bfded7562f4bd7", "sha256": "a3c5e24486e64df79a67c7082743c448b46a0b851985d2cabe7a26f903b8d4a6"}, "downloads": -1, "filename": "sagemaker_containers-2.5.2.tar.gz", "has_sig": true, "md5_digest": "33ff7a7f5e79726240bfded7562f4bd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47772, "upload_time": "2019-07-18T16:24:42", "upload_time_iso_8601": "2019-07-18T16:24:42.226107Z", "url": "https://files.pythonhosted.org/packages/15/14/20271b6f554083ee5596d93baa8bba9d2ac6e5d7f0e8bc62728f7901e056/sagemaker_containers-2.5.2.tar.gz", "yanked": false}], "2.5.3": [{"comment_text": "", "digests": {"md5": "f83f543a5c0f587f19b1fa8237862dd0", "sha256": "c2238445ca0b63599287774e14e5bfc34754be0d1ec0454d45fe4b6d65945a1b"}, "downloads": -1, "filename": "sagemaker_containers-2.5.3.tar.gz", "has_sig": true, "md5_digest": "f83f543a5c0f587f19b1fa8237862dd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47814, "upload_time": "2019-07-22T16:25:15", "upload_time_iso_8601": "2019-07-22T16:25:15.497004Z", "url": "https://files.pythonhosted.org/packages/2c/ac/619401d629e3694db08305346f46d4e278d81b974c444a20d60159d6b60c/sagemaker_containers-2.5.3.tar.gz", "yanked": false}], "2.5.4": [{"comment_text": "", "digests": {"md5": "a35e7bbd9bfe07ed1a87910d4a85f811", "sha256": "0a66c7867f7b17f91ac44d46fe9bf0d2a1662b65a23b44669255260faca87f65"}, "downloads": -1, "filename": "sagemaker_containers-2.5.4.tar.gz", "has_sig": true, "md5_digest": "a35e7bbd9bfe07ed1a87910d4a85f811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47962, "upload_time": "2019-07-30T16:24:38", "upload_time_iso_8601": "2019-07-30T16:24:38.823997Z", "url": "https://files.pythonhosted.org/packages/a2/b1/a4980ec2a5fc53df3880c255a46dac8278ec30abff853d0ea0c4fd456ac3/sagemaker_containers-2.5.4.tar.gz", "yanked": false}], "2.5.5": [{"comment_text": "", "digests": {"md5": "c3f65d739d54b52be246cc32e969d549", "sha256": "a39e48abadd9dbac82970b3aaa295f0cf69abb84c54d656c1d02647822362de6"}, "downloads": -1, "filename": "sagemaker_containers-2.5.5.tar.gz", "has_sig": true, "md5_digest": "c3f65d739d54b52be246cc32e969d549", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47956, "upload_time": "2019-07-31T16:24:42", "upload_time_iso_8601": "2019-07-31T16:24:42.700982Z", "url": "https://files.pythonhosted.org/packages/af/a8/6de32cdf216b15f0c2bb707094739b71a826f64e629154c6af376062f41b/sagemaker_containers-2.5.5.tar.gz", "yanked": false}], "2.5.6": [{"comment_text": "", "digests": {"md5": "55e5c530ea5b84de9085fee7202f5579", "sha256": "755e0262f4e2fd3ea01d0674f60f862ba76711053f896136eee852ffbd18e0e0"}, "downloads": -1, "filename": "sagemaker_containers-2.5.6.tar.gz", "has_sig": true, "md5_digest": "55e5c530ea5b84de9085fee7202f5579", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48348, "upload_time": "2019-09-19T21:12:21", "upload_time_iso_8601": "2019-09-19T21:12:21.703357Z", "url": "https://files.pythonhosted.org/packages/73/50/f76960b5e2aa87a1b8c3f308dd2aedbb0ce0d95f97b7d379949aa4c43b51/sagemaker_containers-2.5.6.tar.gz", "yanked": false}], "2.5.7": [{"comment_text": "", "digests": {"md5": "9b42640652c9004e8fafa5262ee0cfef", "sha256": "3e9a9627b516d28afba77248c7fd85c004fc7d64ea3eb1afdd116c92df05657c"}, "downloads": -1, "filename": "sagemaker_containers-2.5.7.tar.gz", "has_sig": true, "md5_digest": "9b42640652c9004e8fafa5262ee0cfef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49043, "upload_time": "2019-09-23T16:25:41", "upload_time_iso_8601": "2019-09-23T16:25:41.341725Z", "url": "https://files.pythonhosted.org/packages/5d/2d/c5fe1f16a6229d7238228b765f77094691b84517962c950c199c5b7aaf62/sagemaker_containers-2.5.7.tar.gz", "yanked": false}], "2.5.8": [{"comment_text": "", "digests": {"md5": "9ae15329c7a2a974887b7f97bca1bf98", "sha256": "3e4ed32924a47e81e3b1bc1d6e75e0906c3d87ba4c805955390f9e759f81b77e"}, "downloads": -1, "filename": "sagemaker_containers-2.5.8.tar.gz", "has_sig": true, "md5_digest": "9ae15329c7a2a974887b7f97bca1bf98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49039, "upload_time": "2019-09-24T16:25:46", "upload_time_iso_8601": "2019-09-24T16:25:46.036927Z", "url": "https://files.pythonhosted.org/packages/77/4c/1259ca671c168c56e96e63006da75d6787922551dceba619bfe9ea6f4dcb/sagemaker_containers-2.5.8.tar.gz", "yanked": false}], "2.5.9": [{"comment_text": "", "digests": {"md5": "92187ef2357268592df208a9a23ae18d", "sha256": "013e393b610ae8515e585a54c03a967b7075b36fd50f97b964973bdf6ca73a5f"}, "downloads": -1, "filename": "sagemaker_containers-2.5.9.tar.gz", "has_sig": true, "md5_digest": "92187ef2357268592df208a9a23ae18d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49042, "upload_time": "2019-09-25T16:25:45", "upload_time_iso_8601": "2019-09-25T16:25:45.209002Z", "url": "https://files.pythonhosted.org/packages/83/83/cd532caad28ff6880b34b893dd9115d22caad11f7c1c00c1e18e5b730722/sagemaker_containers-2.5.9.tar.gz", "yanked": false}], "2.6.0": [{"comment_text": "", "digests": {"md5": "850868931241171b2886d79fa673a7c5", "sha256": "45e0fd746f111db33f39755786a9685070ca24beac0f8034cdfe70eeaf1948c5"}, "downloads": -1, "filename": "sagemaker_containers-2.6.0.tar.gz", "has_sig": true, "md5_digest": "850868931241171b2886d79fa673a7c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55148, "upload_time": "2019-11-25T00:49:19", "upload_time_iso_8601": "2019-11-25T00:49:19.918781Z", "url": "https://files.pythonhosted.org/packages/69/8a/265cf74f0b298c64d389da348fc641f8c343b1d35023494558802163816b/sagemaker_containers-2.6.0.tar.gz", "yanked": false}], "2.6.1": [{"comment_text": "", "digests": {"md5": "a44b0821fd068e08523f617dfddc6625", "sha256": "159f08fbf3efa34cfe9bea2ed9da7f11383e4b96f2c45964861391ebc2413149"}, "downloads": -1, "filename": "sagemaker_containers-2.6.1.tar.gz", "has_sig": true, "md5_digest": "a44b0821fd068e08523f617dfddc6625", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55142, "upload_time": "2019-11-30T08:00:09", "upload_time_iso_8601": "2019-11-30T08:00:09.340862Z", "url": "https://files.pythonhosted.org/packages/52/b8/75660824365831a66f1f965944f28f177a21050a7e0d00bf3a3b54d7ac95/sagemaker_containers-2.6.1.tar.gz", "yanked": false}], "2.6.2": [{"comment_text": "", "digests": {"md5": "d16260a7bbef72dd1ed5bf13c9dcba2b", "sha256": "eec70954b46ec5f2cddbfda47a5869212e584b432e84c4d303c31ea32a833ce5"}, "downloads": -1, "filename": "sagemaker_containers-2.6.2.tar.gz", "has_sig": true, "md5_digest": "d16260a7bbef72dd1ed5bf13c9dcba2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55165, "upload_time": "2019-12-18T16:25:47", "upload_time_iso_8601": "2019-12-18T16:25:47.187690Z", "url": "https://files.pythonhosted.org/packages/c0/4f/84d28b0dd9a84bb3c3d8f89c43762697080c5c22730b43ec9f0a16a2c735/sagemaker_containers-2.6.2.tar.gz", "yanked": false}], "2.6.3": [{"comment_text": "", "digests": {"md5": "0a2fbc700fd58f866e09d76c18af1bc7", "sha256": "6d2917890bc0a4786c88018a7da402bb079404e87d983975e5c91fb71eda2257"}, "downloads": -1, "filename": "sagemaker_containers-2.6.3.tar.gz", "has_sig": true, "md5_digest": "0a2fbc700fd58f866e09d76c18af1bc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55119, "upload_time": "2020-02-06T19:44:32", "upload_time_iso_8601": "2020-02-06T19:44:32.644812Z", "url": "https://files.pythonhosted.org/packages/92/aa/533468d9353ff99b25023aa97dd5f3681219e7ab8db80137d9d1655b9a4a/sagemaker_containers-2.6.3.tar.gz", "yanked": false}], "2.6.4": [{"comment_text": "", "digests": {"md5": "0baccdfabcefb836c3c1324c51936620", "sha256": "b8183349420ab5ad478ef19eb91a23360f73ebd2e0d014249f70f5125389bc56"}, "downloads": -1, "filename": "sagemaker_containers-2.6.4.tar.gz", "has_sig": true, "md5_digest": "0baccdfabcefb836c3c1324c51936620", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55090, "upload_time": "2020-02-07T18:52:45", "upload_time_iso_8601": "2020-02-07T18:52:45.763693Z", "url": "https://files.pythonhosted.org/packages/9f/6c/6cfb2602ba576033d20f2e79a05d8e681391da583e12bad8bb1220d952c7/sagemaker_containers-2.6.4.tar.gz", "yanked": false}], "2.7.0": [{"comment_text": "", "digests": {"md5": "2d17b73c74f8cd815d5b7f27ba4c0b43", "sha256": "762f4356aaf13bf22ab96bf684d125bba15a28558e0496213ebd0e648a0fab3b"}, "downloads": -1, "filename": "sagemaker_containers-2.7.0.tar.gz", "has_sig": true, "md5_digest": "2d17b73c74f8cd815d5b7f27ba4c0b43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55366, "upload_time": "2020-02-17T16:24:45", "upload_time_iso_8601": "2020-02-17T16:24:45.132849Z", "url": "https://files.pythonhosted.org/packages/2a/c2/8260c8542121eea313c08b430a57446aace610ffc8330a6eeb74b1c30fcc/sagemaker_containers-2.7.0.tar.gz", "yanked": false}], "2.8.0": [{"comment_text": "", "digests": {"md5": "d2aa42944806cdbe27913dc2a4d83dac", "sha256": "06e45e6ef6cb63858bbb2bc07a4acb90c610b5b54adc20cd3a86bb6c830fcdf1"}, "downloads": -1, "filename": "sagemaker_containers-2.8.0.tar.gz", "has_sig": true, "md5_digest": "d2aa42944806cdbe27913dc2a4d83dac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55364, "upload_time": "2020-02-19T23:59:16", "upload_time_iso_8601": "2020-02-19T23:59:16.585041Z", "url": "https://files.pythonhosted.org/packages/15/98/6449ac16130f8ce263fd4bd74fb56c8ea4b2d9d97bafa694774b5953d6a4/sagemaker_containers-2.8.0.tar.gz", "yanked": false}], "2.8.1": [{"comment_text": "", "digests": {"md5": "84582868e3cc6469f7a9617ac02f85e0", "sha256": "036584c483c969096898ec0df667aa1516f315b94b98370c81498e95914f7281"}, "downloads": -1, "filename": "sagemaker_containers-2.8.1.tar.gz", "has_sig": true, "md5_digest": "84582868e3cc6469f7a9617ac02f85e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55362, "upload_time": "2020-02-20T16:24:55", "upload_time_iso_8601": "2020-02-20T16:24:55.239025Z", "url": "https://files.pythonhosted.org/packages/a7/0f/755bd289dab1e0333521357bb862da1faf05075c4f2aacc152deead2c9a5/sagemaker_containers-2.8.1.tar.gz", "yanked": false}], "2.8.2": [{"comment_text": "", "digests": {"md5": "d8db1f20ca8f2d9a015aa277f582cbc7", "sha256": "31b9713704609c6568298f3a18ba18f72d33400839cb8f632b23dc24b96c59d0"}, "downloads": -1, "filename": "sagemaker_containers-2.8.2.tar.gz", "has_sig": true, "md5_digest": "d8db1f20ca8f2d9a015aa277f582cbc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51844, "upload_time": "2020-03-20T16:36:23", "upload_time_iso_8601": "2020-03-20T16:36:23.210339Z", "url": "https://files.pythonhosted.org/packages/b0/a3/35c6402f54fcb032cf85f6067d464c608e2a8e787a651fec2fde2b366e9e/sagemaker_containers-2.8.2.tar.gz", "yanked": false}], "2.8.2.post0": [{"comment_text": "", "digests": {"md5": "ba07d7e15a6bb641d44ce74895330e16", "sha256": "38ddd721fc3a16007d835a3f2cd644a7f0cf5f2da352f0cac1e69f3cf6bed563"}, "downloads": -1, "filename": "sagemaker_containers-2.8.2.post0.tar.gz", "has_sig": true, "md5_digest": "ba07d7e15a6bb641d44ce74895330e16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51854, "upload_time": "2020-03-24T18:10:33", "upload_time_iso_8601": "2020-03-24T18:10:33.878248Z", "url": "https://files.pythonhosted.org/packages/c9/51/5fcfb76350f4f6e41efcd2ea0ec11f5b14f219cb29a4d6347ced99121064/sagemaker_containers-2.8.2.post0.tar.gz", "yanked": false}], "2.8.3": [{"comment_text": "", "digests": {"md5": "9517257f9ffcc28a174f473363c4dd12", "sha256": "ac6dbc411e0afaed7965eaa3e3958b9cf5b7fbccbe02032da99b9c526ea90b7a"}, "downloads": -1, "filename": "sagemaker_containers-2.8.3.tar.gz", "has_sig": true, "md5_digest": "9517257f9ffcc28a174f473363c4dd12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51882, "upload_time": "2020-03-25T16:25:56", "upload_time_iso_8601": "2020-03-25T16:25:56.510793Z", "url": "https://files.pythonhosted.org/packages/22/0f/6bacc7e964c0f4d979d2b7bbb4dadf116493d4fd875b129db3fbcdebcaf8/sagemaker_containers-2.8.3.tar.gz", "yanked": false}], "2.8.4": [{"comment_text": "", "digests": {"md5": "4ba158b3cb8f14c5aeb2e992af7a25f5", "sha256": "9323a0ff4aa90319ae650fe504021df0ce71b8d0d15ca19a291f1c03522a3f30"}, "downloads": -1, "filename": "sagemaker_containers-2.8.4.tar.gz", "has_sig": true, "md5_digest": "4ba158b3cb8f14c5aeb2e992af7a25f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51873, "upload_time": "2020-03-31T23:07:48", "upload_time_iso_8601": "2020-03-31T23:07:48.438341Z", "url": "https://files.pythonhosted.org/packages/86/a6/cf65880279e3ab3d99f80e8bc69ff378d7875c847257d0835e428acd93c6/sagemaker_containers-2.8.4.tar.gz", "yanked": false}], "2.8.5": [{"comment_text": "", "digests": {"md5": "c52a4af884021b8ea34a3524e3ea7666", "sha256": "70ef21601ae473b4962ceb8c0a19bc17f46e640c44fa30ff7b246dfc40b7c161"}, "downloads": -1, "filename": "sagemaker_containers-2.8.5.tar.gz", "has_sig": true, "md5_digest": "c52a4af884021b8ea34a3524e3ea7666", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51896, "upload_time": "2020-04-01T04:39:29", "upload_time_iso_8601": "2020-04-01T04:39:29.438977Z", "url": "https://files.pythonhosted.org/packages/94/7a/2169f13c428df8bb662f00bd9c3ea3ba56f0b08c476378fc7ae9a65eb9c5/sagemaker_containers-2.8.5.tar.gz", "yanked": false}], "2.8.6": [{"comment_text": "", "digests": {"md5": "1be0224d97c0d8f72e1dfd0a62cec36c", "sha256": "6fecea75c48d0f7defeebb3aacf00e7fc67cd7d01aaf54678c725d0160d7ad53"}, "downloads": -1, "filename": "sagemaker_containers-2.8.6.tar.gz", "has_sig": true, "md5_digest": "1be0224d97c0d8f72e1dfd0a62cec36c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51292, "upload_time": "2020-04-01T21:29:56", "upload_time_iso_8601": "2020-04-01T21:29:56.079905Z", "url": "https://files.pythonhosted.org/packages/37/be/c57baebb8ac4f32b0725c330f4938df0199f3f2f33665259ca33667f8782/sagemaker_containers-2.8.6.tar.gz", "yanked": false}], "2.8.6.post0": [{"comment_text": "", "digests": {"md5": "c201ac91d2e5913095f67346ddc6ac64", "sha256": "eb8398dd34e97e7b224b778b9e7b81034a5a62bf15117f83ce4ce24ee4cd54c2"}, "downloads": -1, "filename": "sagemaker_containers-2.8.6.post0.tar.gz", "has_sig": true, "md5_digest": "c201ac91d2e5913095f67346ddc6ac64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51489, "upload_time": "2020-04-22T16:26:02", "upload_time_iso_8601": "2020-04-22T16:26:02.192039Z", "url": "https://files.pythonhosted.org/packages/6a/06/07648993a9ee4503d7183a20339b0dc1fcea977b40ab42504cedfc35b73b/sagemaker_containers-2.8.6.post0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c201ac91d2e5913095f67346ddc6ac64", "sha256": "eb8398dd34e97e7b224b778b9e7b81034a5a62bf15117f83ce4ce24ee4cd54c2"}, "downloads": -1, "filename": "sagemaker_containers-2.8.6.post0.tar.gz", "has_sig": true, "md5_digest": "c201ac91d2e5913095f67346ddc6ac64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51489, "upload_time": "2020-04-22T16:26:02", "upload_time_iso_8601": "2020-04-22T16:26:02.192039Z", "url": "https://files.pythonhosted.org/packages/6a/06/07648993a9ee4503d7183a20339b0dc1fcea977b40ab42504cedfc35b73b/sagemaker_containers-2.8.6.post0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:18 2020"}