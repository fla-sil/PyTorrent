{"info": {"author": "songlijun", "author_email": "songlijun@dobot.cc", "bugtrack_url": null, "classifiers": [], "description": "***This version is relevant for Dobotlink 5.0.0***\n\nDobotRPC is a dobotlink communication module based on websocket and\nJSON-RPC . It provides python ports to communicate with dobotlink and\nallows developers to communicate with the GUI. Here is a more detailed\nlist of the package contents:\n\n-  The file contains both RPCClient and RPCServer files that users can\n   call upon their own needs\n-  DobotlinkAdapter: The adapter module is used to adapt to the new set\n   of interfaces\n\nUtils\n\n-  Loggers: Loggers information\n\nExamples\n--------\n\n-  Users can communicate synchronously or asynchronously.The\n   asynchronous mode is as follows:\n\n::\n\n    # Async demo\n    from DobotRPC import DobotlinkAdapter, RPCClient\n    # The asyncio module provides infrastructure for writing single-threaded concurrent code using coroutines, multiplexing I/O access over sockets and other resources, running network clients and servers, and other related primitives.\n    import asyncio\n\n\n    # Coroutines function\n    async def main(dobotlink_async):\n        # Display information with Dobotlink\n        await dobotlink_async.api.ShowMessage(title=\"Async Demo Message\",\n                                              message=\"Async Demo is running.\")\n\n        # Search for available ports\n        res = await dobotlink_async.Magician.SearchDobot()\n\n        # Get ports\n        if len(res) < 1:\n            return\n        port_name = res[0][\"portName\"]\n\n        # Connect\n        await dobotlink_async.Magician.ConnectDobot(portName=port_name)\n\n        # PTP\n        await dobotlink_async.Magician.SetPTPCmd(portName=port_name,\n                                                 ptpMode=0,\n                                                 x=230,\n                                                 y=50,\n                                                 z=0,\n                                                 r=20)\n        # Disconnect\n        await dobotlink_async.Magician.DisconnectDobot(portName=port_name,\n                                                       queueStop=True,\n                                                       queueClear=True)\n\n\n    if __name__ == \"__main__\":\n    '''\n        The log prints info information by default, which can be modified by the user\n        Log levels include:NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL\n    '''\n        loggers.set_level(loggers.DEBUG)\n        # Get the Eventloop reference\n        loop = asyncio.get_event_loop()\n        # Initializes, connects to dobotlink, and is executed before the Loop runs\n        dobotlink_async = DobotlinkAdapter(RPCClient(loop=loop), is_sync=False)\n        # Perform coroutines\n        loop.run_until_complete(main(dobotlink_async))\n\n-  The synchronization mode is as follows:\n\n::\n\n    # Sync Demo\n    from DobotRPC import RPCClient, DobotlinkAdapter\n\n\n    def main(dobotlink_sync):\n        # Display information with Dobotlink\n        dobotlink_sync.api.ShowMessage(title=\"Sync Demo Message\",\n                                       message=\"Sync Demo is running.\")\n\n        # Search for available ports\n        res = dobotlink_sync.Magician.SearchDobot()\n\n        # Get ports\n        if len(res) < 1:\n            return\n        port_name = res[0][\"portName\"]\n\n        # Connect\n        dobotlink_sync.Magician.ConnectDobot(portName=port_name)\n\n        # PTP\n        dobotlink_sync.Magician.SetPTPCmd(portName=port_name,\n                                          ptpMode=0,\n                                          x=230,\n                                          y=50,\n                                          z=0,\n                                          r=20)\n\n        # Disconnect\n        dobotlink_sync.Magician.DisconnectDobot(portName=port_name)\n\n\n    if __name__ == \"__main__\":\n    '''\n        The log prints info information by default, which can be modified by the user.\n        Log levels include:NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL\n    '''\n        loggers.set_level(loggers.DEBUG)\n        # Initialize, connect to dobotlink\n        dobotlink_sync = DobotlinkAdapter(RPCClient(), is_sync=True)\n\n        main(dobotlink_sync)\n\nInstalltion\n-----------\n\nTo install DobotRPC, type:\n\n::\n\n    pip install DobotRPC\n\nDobotRPC is a free software distributed under the Apache license\n\nUsage\n-----\n\n- Users can use the API:\n    loggers, RPCClient, DobotlinkAdapter, NetworkError, client, aip\n-  Install [Dobotlink](https://cn.dobot.cc/downloadcenter.html)\n-  Right-click the Dobotlink icon and click ``help``, pop up a\n   ``Dobotlink help documentation``.\n-  You can guide by ``examples``, reference the\n   ``Dobotlink help documentation``.\n-  Then go ahead and develop your first python script.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "websocket,JSON-RPC,asyncio,Dobot,Dobotlink", "license": "Apache Licence", "maintainer": "", "maintainer_email": "", "name": "DobotRPC", "package_url": "https://pypi.org/project/DobotRPC/", "platform": "any", "project_url": "https://pypi.org/project/DobotRPC/", "project_urls": null, "release_url": "https://pypi.org/project/DobotRPC/3.3.4/", "requires_dist": null, "requires_python": "", "summary": "Dobotlink communication module", "version": "3.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em><strong>This version is relevant for Dobotlink 5.0.0</strong></em></p>\n<p>DobotRPC is a dobotlink communication module based on websocket and\nJSON-RPC . It provides python ports to communicate with dobotlink and\nallows developers to communicate with the GUI. Here is a more detailed\nlist of the package contents:</p>\n<ul>\n<li>The file contains both RPCClient and RPCServer files that users can\ncall upon their own needs</li>\n<li>DobotlinkAdapter: The adapter module is used to adapt to the new set\nof interfaces</li>\n</ul>\n<p>Utils</p>\n<ul>\n<li>Loggers: Loggers information</li>\n</ul>\n<h2>Examples</h2>\n<ul>\n<li>Users can communicate synchronously or asynchronously.The\nasynchronous mode is as follows:</li>\n</ul>\n<p>::</p>\n<pre><code># Async demo\nfrom DobotRPC import DobotlinkAdapter, RPCClient\n# The asyncio module provides infrastructure for writing single-threaded concurrent code using coroutines, multiplexing I/O access over sockets and other resources, running network clients and servers, and other related primitives.\nimport asyncio\n\n\n# Coroutines function\nasync def main(dobotlink_async):\n    # Display information with Dobotlink\n    await dobotlink_async.api.ShowMessage(title=\"Async Demo Message\",\n                                          message=\"Async Demo is running.\")\n\n    # Search for available ports\n    res = await dobotlink_async.Magician.SearchDobot()\n\n    # Get ports\n    if len(res) &lt; 1:\n        return\n    port_name = res[0][\"portName\"]\n\n    # Connect\n    await dobotlink_async.Magician.ConnectDobot(portName=port_name)\n\n    # PTP\n    await dobotlink_async.Magician.SetPTPCmd(portName=port_name,\n                                             ptpMode=0,\n                                             x=230,\n                                             y=50,\n                                             z=0,\n                                             r=20)\n    # Disconnect\n    await dobotlink_async.Magician.DisconnectDobot(portName=port_name,\n                                                   queueStop=True,\n                                                   queueClear=True)\n\n\nif __name__ == \"__main__\":\n'''\n    The log prints info information by default, which can be modified by the user\n    Log levels include:NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL\n'''\n    loggers.set_level(loggers.DEBUG)\n    # Get the Eventloop reference\n    loop = asyncio.get_event_loop()\n    # Initializes, connects to dobotlink, and is executed before the Loop runs\n    dobotlink_async = DobotlinkAdapter(RPCClient(loop=loop), is_sync=False)\n    # Perform coroutines\n    loop.run_until_complete(main(dobotlink_async))\n</code></pre>\n<ul>\n<li>The synchronization mode is as follows:</li>\n</ul>\n<p>::</p>\n<pre><code># Sync Demo\nfrom DobotRPC import RPCClient, DobotlinkAdapter\n\n\ndef main(dobotlink_sync):\n    # Display information with Dobotlink\n    dobotlink_sync.api.ShowMessage(title=\"Sync Demo Message\",\n                                   message=\"Sync Demo is running.\")\n\n    # Search for available ports\n    res = dobotlink_sync.Magician.SearchDobot()\n\n    # Get ports\n    if len(res) &lt; 1:\n        return\n    port_name = res[0][\"portName\"]\n\n    # Connect\n    dobotlink_sync.Magician.ConnectDobot(portName=port_name)\n\n    # PTP\n    dobotlink_sync.Magician.SetPTPCmd(portName=port_name,\n                                      ptpMode=0,\n                                      x=230,\n                                      y=50,\n                                      z=0,\n                                      r=20)\n\n    # Disconnect\n    dobotlink_sync.Magician.DisconnectDobot(portName=port_name)\n\n\nif __name__ == \"__main__\":\n'''\n    The log prints info information by default, which can be modified by the user.\n    Log levels include:NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL\n'''\n    loggers.set_level(loggers.DEBUG)\n    # Initialize, connect to dobotlink\n    dobotlink_sync = DobotlinkAdapter(RPCClient(), is_sync=True)\n\n    main(dobotlink_sync)\n</code></pre>\n<h2>Installtion</h2>\n<p>To install DobotRPC, type:</p>\n<p>::</p>\n<pre><code>pip install DobotRPC\n</code></pre>\n<p>DobotRPC is a free software distributed under the Apache license</p>\n<h2>Usage</h2>\n<ul>\n<li>Users can use the API:\nloggers, RPCClient, DobotlinkAdapter, NetworkError, client, aip</li>\n<li>Install <a href=\"https://cn.dobot.cc/downloadcenter.html\" rel=\"nofollow\">Dobotlink</a></li>\n<li>Right-click the Dobotlink icon and click <code>help</code>, pop up a\n<code>Dobotlink help documentation</code>.</li>\n<li>You can guide by <code>examples</code>, reference the\n<code>Dobotlink help documentation</code>.</li>\n<li>Then go ahead and develop your first python script.</li>\n</ul>\n\n          </div>"}, "last_serial": 7188443, "releases": {"3.0.0": [{"comment_text": "", "digests": {"md5": "47d4367e2de7081be631d54e67a3ca0b", "sha256": "89a0493e47f98a242f88ae63f7dd414986b0402dab9dc377ea4c34575b1d8678"}, "downloads": -1, "filename": "DobotRPC-3.0.0.tar.gz", "has_sig": false, "md5_digest": "47d4367e2de7081be631d54e67a3ca0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7297, "upload_time": "2019-12-06T08:39:45", "upload_time_iso_8601": "2019-12-06T08:39:45.281704Z", "url": "https://files.pythonhosted.org/packages/ee/d5/203e1ba43085469dcf893faee1b29588cabdb42002b1eb058395961e0068/DobotRPC-3.0.0.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "4f1ef4fdcd57c3b711bdef3c7b58e50c", "sha256": "0c43d356020750e52f8ff417905688ca181714d43a26cc8cfbc77627ab95b25d"}, "downloads": -1, "filename": "DobotRPC-3.1.0.tar.gz", "has_sig": false, "md5_digest": "4f1ef4fdcd57c3b711bdef3c7b58e50c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7429, "upload_time": "2019-12-17T07:37:21", "upload_time_iso_8601": "2019-12-17T07:37:21.824764Z", "url": "https://files.pythonhosted.org/packages/01/7c/6c8c4c80bf487f8adac1c190604f6dbd97af878d43899c848c8504bea974/DobotRPC-3.1.0.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "511e5a730fcd55e87e314d5211c95058", "sha256": "57cdea7a77d193ba6cff3a6be1e05a196f4c3df8c8082bbd3e109b8b9068d986"}, "downloads": -1, "filename": "DobotRPC-3.2.0.tar.gz", "has_sig": false, "md5_digest": "511e5a730fcd55e87e314d5211c95058", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8958, "upload_time": "2019-12-21T07:59:03", "upload_time_iso_8601": "2019-12-21T07:59:03.502351Z", "url": "https://files.pythonhosted.org/packages/b2/ec/e481a78411db131dd6939a767d740c55eadb6749ed1223e2c060a7f4860c/DobotRPC-3.2.0.tar.gz", "yanked": false}], "3.3.0": [{"comment_text": "", "digests": {"md5": "0e853e0c637721f9c6b5eb922193fc2d", "sha256": "089735615eacdebf9d5840e5bbba3f16cd4a4b00cd229d0503406b1c0cb855a1"}, "downloads": -1, "filename": "DobotRPC-3.3.0.tar.gz", "has_sig": false, "md5_digest": "0e853e0c637721f9c6b5eb922193fc2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7553, "upload_time": "2020-05-07T12:32:05", "upload_time_iso_8601": "2020-05-07T12:32:05.717759Z", "url": "https://files.pythonhosted.org/packages/c1/75/803dee7d3787d065efeb0fa5c06749450d3829941fb310d60489137e92d3/DobotRPC-3.3.0.tar.gz", "yanked": false}], "3.3.4": [{"comment_text": "", "digests": {"md5": "63b563b4eb35b51e7f0f05029a4cdd30", "sha256": "92ced7d0ae0a6743e5526aea24d1e9a02b24bcc5acd19a7e2d12f1eaaf47313c"}, "downloads": -1, "filename": "DobotRPC-3.3.4.tar.gz", "has_sig": false, "md5_digest": "63b563b4eb35b51e7f0f05029a4cdd30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7554, "upload_time": "2020-05-07T13:07:42", "upload_time_iso_8601": "2020-05-07T13:07:42.518504Z", "url": "https://files.pythonhosted.org/packages/09/9a/f9dc048b0b426187d1818b2916ff67714e7781ea63c35fbbcb909bea0947/DobotRPC-3.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63b563b4eb35b51e7f0f05029a4cdd30", "sha256": "92ced7d0ae0a6743e5526aea24d1e9a02b24bcc5acd19a7e2d12f1eaaf47313c"}, "downloads": -1, "filename": "DobotRPC-3.3.4.tar.gz", "has_sig": false, "md5_digest": "63b563b4eb35b51e7f0f05029a4cdd30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7554, "upload_time": "2020-05-07T13:07:42", "upload_time_iso_8601": "2020-05-07T13:07:42.518504Z", "url": "https://files.pythonhosted.org/packages/09/9a/f9dc048b0b426187d1818b2916ff67714e7781ea63c35fbbcb909bea0947/DobotRPC-3.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:03 2020"}