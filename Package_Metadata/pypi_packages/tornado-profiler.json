{"info": {"author": "garenchan", "author_email": "1412950785@qq.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# Tornado-Profiler\n\nA profiler measures endpoints defined in your tornado application.\n\n\n## Screenshots\n\n### Dashboard: Give a summary of all datas\n\nIf an endpoint has been accessed before, you can see its summary data as follows.\n\n![dashboard](https://raw.githubusercontent.com/garenchan/tornado-profiler/master/docs/screenshots/dashboard.png)\n\n### Filtering: Give filtered datas \n\nYou can create filters to get datas that meet the criterias.\n\n![filtering](https://raw.githubusercontent.com/garenchan/tornado-profiler/master/docs/screenshots/filtering.png)\n\n### Context: Give all details of a request\n\nYou can get all details of a request as you wish.\n\n![context](https://raw.githubusercontent.com/garenchan/tornado-profiler/master/docs/screenshots/context.png)\n\n\n## Installation\n\nPyPI version:\n\n    $ pip install tornado-profiler\n\nDevelopment version:\n\n    $ pip install https://github.com/garenchan/tornado-profiler/zipball/master\n\n\n## Quick Start\n\nJust add a few lines to you codes:\n```python\n# demo.py\nimport tornado.ioloop\nimport tornado.web\n\nfrom tornado_profiler import Profiler\n\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"main\")\n\nclass HelloHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\ndef make_app():\n    app = tornado.web.Application([\n        (r\"/\", MainHandler),\n    ])\n\n    # use to store measurement datas\n    backend = {\n        \"engine\": \"sqlalchemy\",\n    }\n    # instantiate profiler\n    profiler = Profiler(backend)\n    # do something to your app\n    profiler.init_app(app)\n\n    # you can add some rules that won't be profiled here\n    app.add_handlers(r\".*\", [\n        (r\"/hello\", HelloHandler),\n    ])\n\n    return app\n\nif __name__ == \"__main__\":\n    app = make_app()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n```\n\nNow run your `demo.py` and make some requests as follows:\n\n    $ curl http://127.0.0.1:8888/\n    $ curl http://127.0.0.1:8888/hello\n\nIf everything is ok, tornado-profiler will measure these requests. You can see the result heading to http://127.0.0.1:8888/tornado-profiler or get results as JSON http://127.0.0.1:8888/tornado-profiler/api/measurements\n\n\n## Data Storage Backend\n\nYou can use some databases to store your measurement data, such as SQLite, Mysql. The drivers we support are shown as follows:\n\n### SQLAlchemy\n\nIn order to use SQLAlchemy, just specify backend's engine as \"sqlalchemy\". This will use `SQLite` by default and save it to `tornado_profiler.db` in your working directory.\n\n    backend = {\n        \"engine\": \"sqlalchemy\",\n    }\n\nIf your want to change default sqlite database filename or use other databases, you need to set `db_url` manually:\n\n    backend = {\n        \"engine\": \"sqlalchemy\",\n        \"db_url\": \"sqlite:///dbname.db\",\n    }\n\n    backend = {\n        \"engine\": \"sqlalchemy\",\n        \"db_url\": \"mysql+<driver-name>://user:password@<host>[:<port>]/<dbname>\",\n    }\n\nSetting some attributes of SQLAlchemy is also necessary, you just need to pass them into the backend dict:\n\n    backend = {\n        \"engine\": \"sqlalchemy\",\n        \"db_url\": \"mysql+<driver-name>://user:password@<host>[:<port>]/<dbname>\",\n        # attributes\n        \"pool_recycle\": 3600,\n        \"pool_timeout\": 30,\n        \"pool_size\": 30,\n        \"max_overflow\": 20,\n    }\n\nIn some scenarios, we do not want to persist measurement datas, we can use the in-memory database of SQLite and datas will be lost when your web server stops or restarts:\n\n    backend = {\n        \"engine\": \"sqlalchemy\",\n        \"db_url\": \"sqlite://\",\n    }\n\n### Other Drivers\n\n**coming soon!**\n\n## Comment\n\nIf you have any other requirements, please submit PR or issues. I will reply to you as soon as possible.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/garenchan/tornado-profiler", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "tornado-profiler", "package_url": "https://pypi.org/project/tornado-profiler/", "platform": "", "project_url": "https://pypi.org/project/tornado-profiler/", "project_urls": {"Homepage": "https://github.com/garenchan/tornado-profiler"}, "release_url": "https://pypi.org/project/tornado-profiler/1.0.0/", "requires_dist": ["tornado (>=4.5)"], "requires_python": "", "summary": "A profiler for Tornado Web Server", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tornado-Profiler</h1>\n<p>A profiler measures endpoints defined in your tornado application.</p>\n<h2>Screenshots</h2>\n<h3>Dashboard: Give a summary of all datas</h3>\n<p>If an endpoint has been accessed before, you can see its summary data as follows.</p>\n<p><img alt=\"dashboard\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e267c8ba2e7fe8d17e022838ddb1b6b21fc6e151/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f676172656e6368616e2f746f726e61646f2d70726f66696c65722f6d61737465722f646f63732f73637265656e73686f74732f64617368626f6172642e706e67\"></p>\n<h3>Filtering: Give filtered datas</h3>\n<p>You can create filters to get datas that meet the criterias.</p>\n<p><img alt=\"filtering\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca2a6394c6ce1370d98bad077a7c18b042094596/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f676172656e6368616e2f746f726e61646f2d70726f66696c65722f6d61737465722f646f63732f73637265656e73686f74732f66696c746572696e672e706e67\"></p>\n<h3>Context: Give all details of a request</h3>\n<p>You can get all details of a request as you wish.</p>\n<p><img alt=\"context\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a41c6327e465ae93fd100a2ba48c5ade2daba302/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f676172656e6368616e2f746f726e61646f2d70726f66696c65722f6d61737465722f646f63732f73637265656e73686f74732f636f6e746578742e706e67\"></p>\n<h2>Installation</h2>\n<p>PyPI version:</p>\n<pre><code>$ pip install tornado-profiler\n</code></pre>\n<p>Development version:</p>\n<pre><code>$ pip install https://github.com/garenchan/tornado-profiler/zipball/master\n</code></pre>\n<h2>Quick Start</h2>\n<p>Just add a few lines to you codes:</p>\n<pre><span class=\"c1\"># demo.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tornado.ioloop</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tornado.web</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tornado_profiler</span> <span class=\"kn\">import</span> <span class=\"n\">Profiler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MainHandler</span><span class=\"p\">(</span><span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">RequestHandler</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"main\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HelloHandler</span><span class=\"p\">(</span><span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">RequestHandler</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"Hello, world\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_app</span><span class=\"p\">():</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">MainHandler</span><span class=\"p\">),</span>\n    <span class=\"p\">])</span>\n\n    <span class=\"c1\"># use to store measurement datas</span>\n    <span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"engine\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sqlalchemy\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\"># instantiate profiler</span>\n    <span class=\"n\">profiler</span> <span class=\"o\">=</span> <span class=\"n\">Profiler</span><span class=\"p\">(</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n    <span class=\"c1\"># do something to your app</span>\n    <span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># you can add some rules that won't be profiled here</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_handlers</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\".*\"</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">,</span> <span class=\"n\">HelloHandler</span><span class=\"p\">),</span>\n    <span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">make_app</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">8888</span><span class=\"p\">)</span>\n    <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">ioloop</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>Now run your <code>demo.py</code> and make some requests as follows:</p>\n<pre><code>$ curl http://127.0.0.1:8888/\n$ curl http://127.0.0.1:8888/hello\n</code></pre>\n<p>If everything is ok, tornado-profiler will measure these requests. You can see the result heading to <a href=\"http://127.0.0.1:8888/tornado-profiler\" rel=\"nofollow\">http://127.0.0.1:8888/tornado-profiler</a> or get results as JSON <a href=\"http://127.0.0.1:8888/tornado-profiler/api/measurements\" rel=\"nofollow\">http://127.0.0.1:8888/tornado-profiler/api/measurements</a></p>\n<h2>Data Storage Backend</h2>\n<p>You can use some databases to store your measurement data, such as SQLite, Mysql. The drivers we support are shown as follows:</p>\n<h3>SQLAlchemy</h3>\n<p>In order to use SQLAlchemy, just specify backend's engine as \"sqlalchemy\". This will use <code>SQLite</code> by default and save it to <code>tornado_profiler.db</code> in your working directory.</p>\n<pre><code>backend = {\n    \"engine\": \"sqlalchemy\",\n}\n</code></pre>\n<p>If your want to change default sqlite database filename or use other databases, you need to set <code>db_url</code> manually:</p>\n<pre><code>backend = {\n    \"engine\": \"sqlalchemy\",\n    \"db_url\": \"sqlite:///dbname.db\",\n}\n\nbackend = {\n    \"engine\": \"sqlalchemy\",\n    \"db_url\": \"mysql+&lt;driver-name&gt;://user:password@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;\",\n}\n</code></pre>\n<p>Setting some attributes of SQLAlchemy is also necessary, you just need to pass them into the backend dict:</p>\n<pre><code>backend = {\n    \"engine\": \"sqlalchemy\",\n    \"db_url\": \"mysql+&lt;driver-name&gt;://user:password@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;\",\n    # attributes\n    \"pool_recycle\": 3600,\n    \"pool_timeout\": 30,\n    \"pool_size\": 30,\n    \"max_overflow\": 20,\n}\n</code></pre>\n<p>In some scenarios, we do not want to persist measurement datas, we can use the in-memory database of SQLite and datas will be lost when your web server stops or restarts:</p>\n<pre><code>backend = {\n    \"engine\": \"sqlalchemy\",\n    \"db_url\": \"sqlite://\",\n}\n</code></pre>\n<h3>Other Drivers</h3>\n<p><strong>coming soon!</strong></p>\n<h2>Comment</h2>\n<p>If you have any other requirements, please submit PR or issues. I will reply to you as soon as possible.</p>\n\n          </div>"}, "last_serial": 4050025, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "222a3e63667b01cb7f6e6330bcb5dcea", "sha256": "59b977563c583ca553b921d88111fac49e534df8a375d5d437dcf2e0af8959ee"}, "downloads": -1, "filename": "tornado_profiler-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "222a3e63667b01cb7f6e6330bcb5dcea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1241040, "upload_time": "2018-07-11T08:23:27", "upload_time_iso_8601": "2018-07-11T08:23:27.436817Z", "url": "https://files.pythonhosted.org/packages/66/8e/9a4b34d81d2fa4cdf01d5b6f3fd96af3c6a0f45b54bd9a3ce5112e980469/tornado_profiler-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c03f4438b9ade3f8a49def3fe4565701", "sha256": "f7ba8422333d0886c070b06a0c5777e237175d20208efb386dc240400ac69392"}, "downloads": -1, "filename": "tornado-profiler-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c03f4438b9ade3f8a49def3fe4565701", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1255682, "upload_time": "2018-07-11T08:24:15", "upload_time_iso_8601": "2018-07-11T08:24:15.549068Z", "url": "https://files.pythonhosted.org/packages/b1/53/650b3d4c31213c71afba652d821d562298f8a03a70a8a2522ec9df1d5811/tornado-profiler-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "222a3e63667b01cb7f6e6330bcb5dcea", "sha256": "59b977563c583ca553b921d88111fac49e534df8a375d5d437dcf2e0af8959ee"}, "downloads": -1, "filename": "tornado_profiler-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "222a3e63667b01cb7f6e6330bcb5dcea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1241040, "upload_time": "2018-07-11T08:23:27", "upload_time_iso_8601": "2018-07-11T08:23:27.436817Z", "url": "https://files.pythonhosted.org/packages/66/8e/9a4b34d81d2fa4cdf01d5b6f3fd96af3c6a0f45b54bd9a3ce5112e980469/tornado_profiler-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c03f4438b9ade3f8a49def3fe4565701", "sha256": "f7ba8422333d0886c070b06a0c5777e237175d20208efb386dc240400ac69392"}, "downloads": -1, "filename": "tornado-profiler-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c03f4438b9ade3f8a49def3fe4565701", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1255682, "upload_time": "2018-07-11T08:24:15", "upload_time_iso_8601": "2018-07-11T08:24:15.549068Z", "url": "https://files.pythonhosted.org/packages/b1/53/650b3d4c31213c71afba652d821d562298f8a03a70a8a2522ec9df1d5811/tornado-profiler-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:50 2020"}