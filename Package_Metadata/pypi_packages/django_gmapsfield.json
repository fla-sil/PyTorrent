{"info": {"author": "Bocoup, LLC", "author_email": "tim@bocoup.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "django_gmapsfield\n=================\n\nDjango Google Maps Field is a robust way to customize and display a Google Map in Django, and use it as a UI for selecting/displaying location information in the Django admin.\n\nDeveloped By Tim Branyen, Bocoup LLC for Community Planit on behalf of Engagement Game Labs\n\nFeatures\n--------\nThis project is currently under development and has not yet reached a beta phase.  It should be treated and used as alpha within development environments.  Features will be added\nas the host project work continues.\n\nSo far several features exist:\n    * Custom admin site field.\n        - Specify a JSON-formatted defaults\n    * Custom public template filter\n    * Customizable properties:\n        - Zoom\n        - Width/Height\n        - Center coordinates\n\nSimple to use:\n==============\n\nInstallation\n-------------\nIts simple to install - use this command to upgrade as well:\n    #  python setup.py install\nOr\n    # easy_install django_gmapsfield\n\n/settings.py\n------------\n\n    INSTALLED_APPS = (\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        ...\n        'gmapsfield', # Make sure to register this\n        ...\n    )\n\n/urls.py\n--------\n\n    # Note: the following approach is non-standand, while it remains functional there are many disadvantages that django 1.3\n    # static file handling will correct.\n\n    # Add this to serve correct admin js\n    (r'^admin/gmapsfield/admin/(?P<file>.*)$', 'gmapsfield.views.serve'),\n\n    # Optionally symlink this folder to your admin media path\n\n/models.py\n----------\n\n    from gmapsfield.fields import GoogleMapsField\n    \n    from django.db import models\n    from django.contrib import admin\n    \n    class Test(models.Model):\n        map = GoogleMapsField()\n\n        # Can optionally specify defaults via JSON string\n        #map2 = GoogleMapsField(default=\"{ coordinates: [-40, 50], zoom: 10, size: [400, 200] }\")\n    \n    admin.site.register(Test)\n\n/views.py\n---------\n\n    from demo.map.models import Test\n    \n    from django.template import RequestContext, loader\n    from django.http import HttpResponse\n    \n    def index(request):\n        template = loader.get_template(\"index.html\")\n    \n        # Grab the first map if one exists - for purposes of example \n        test = (Test.objects.all() and Test.objects.all()[0]) or { \"map\": { show: \"No maps defined\" } }\n    \n        return HttpResponse(template.render(RequestContext(request, {\n            \"test\": test\n        })))\n\n/template.html\n--------------\n\n    <!-- Required to view result in a template -->\n    {% load gmap %}\n\n    <!-- Will display the actual map -->\n    {{ test.map|show }}\n\n    <!-- Includes the necessary scripts on the page, place anywhere, but only once and do not forget! -->\n    {% gmap_includes %}\n\nDevelopment Notes:\n------------------\n1/04/11: Updated path to serve admin.js to be called admin instead of public.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mintchaos/django_compressor", "keywords": null, "license": "MIT and GPL", "maintainer": null, "maintainer_email": null, "name": "django_gmapsfield", "package_url": "https://pypi.org/project/django_gmapsfield/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django_gmapsfield/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/mintchaos/django_compressor"}, "release_url": "https://pypi.org/project/django_gmapsfield/0.1/", "requires_dist": null, "requires_python": null, "summary": "Compresses linked and inline javascript or CSS into a single cached file.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            django_gmapsfield<br>=================<br><br>Django Google Maps Field is a robust way to customize and display a Google Map in Django, and use it as a UI for selecting/displaying location information in the Django admin.<br><br>Developed By Tim Branyen, Bocoup LLC for Community Planit on behalf of Engagement Game Labs<br><br>Features<br>--------<br>This project is currently under development and has not yet reached a beta phase.  It should be treated and used as alpha within development environments.  Features will be added<br>as the host project work continues.<br><br>So far several features exist:<br>    * Custom admin site field.<br>        - Specify a JSON-formatted defaults<br>    * Custom public template filter<br>    * Customizable properties:<br>        - Zoom<br>        - Width/Height<br>        - Center coordinates<br><br>Simple to use:<br>==============<br><br>Installation<br>-------------<br>Its simple to install - use this command to upgrade as well:<br>    #  python setup.py install<br>Or<br>    # easy_install django_gmapsfield<br><br>/settings.py<br>------------<br><br>    INSTALLED_APPS = (<br>        'django.contrib.auth',<br>        'django.contrib.contenttypes',<br>        ...<br>        'gmapsfield', # Make sure to register this<br>        ...<br>    )<br><br>/urls.py<br>--------<br><br>    # Note: the following approach is non-standand, while it remains functional there are many disadvantages that django 1.3<br>    # static file handling will correct.<br><br>    # Add this to serve correct admin js<br>    (r'^admin/gmapsfield/admin/(?P&lt;file&gt;.*)$', 'gmapsfield.views.serve'),<br><br>    # Optionally symlink this folder to your admin media path<br><br>/models.py<br>----------<br><br>    from gmapsfield.fields import GoogleMapsField<br>    <br>    from django.db import models<br>    from django.contrib import admin<br>    <br>    class Test(models.Model):<br>        map = GoogleMapsField()<br><br>        # Can optionally specify defaults via JSON string<br>        #map2 = GoogleMapsField(default=\"{ coordinates: [-40, 50], zoom: 10, size: [400, 200] }\")<br>    <br>    admin.site.register(Test)<br><br>/views.py<br>---------<br><br>    from demo.map.models import Test<br>    <br>    from django.template import RequestContext, loader<br>    from django.http import HttpResponse<br>    <br>    def index(request):<br>        template = loader.get_template(\"index.html\")<br>    <br>        # Grab the first map if one exists - for purposes of example <br>        test = (Test.objects.all() and Test.objects.all()[0]) or { \"map\": { show: \"No maps defined\" } }<br>    <br>        return HttpResponse(template.render(RequestContext(request, {<br>            \"test\": test<br>        })))<br><br>/template.html<br>--------------<br><br>    &lt;!-- Required to view result in a template --&gt;<br>    {% load gmap %}<br><br>    &lt;!-- Will display the actual map --&gt;<br>    {{ test.map|show }}<br><br>    &lt;!-- Includes the necessary scripts on the page, place anywhere, but only once and do not forget! --&gt;<br>    {% gmap_includes %}<br><br>Development Notes:<br>------------------<br>1/04/11: Updated path to serve admin.js to be called admin instead of public.\n          </div>"}, "last_serial": 242365, "releases": {"0.1": [], "alpha": []}, "urls": [], "timestamp": "Fri May  8 00:35:50 2020"}