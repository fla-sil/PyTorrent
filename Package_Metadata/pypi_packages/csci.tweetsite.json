{"info": {"author": "Plone Foundation", "author_email": "plone-developers@lists.sourceforge.net", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)"], "description": ".. contents::\n        \n        .. Note!\n        -----\n        Update the following URLs to point to your:\n        \n        - code repository\n        - bug tracker\n        - questions/comments feedback mail\n        (do not set a real mail, to avoid spams)\n        \n        Or remove it if not used.\n        \n        - Code repository: http://svn.somewhere.com/...\n        - Questions and comments to somemailing_list\n        - Report bugs at http://bug.somewhere.com/..\n        \n        \n        Change history\n        **************\n        \n        Changelog\n        =========\n        \n        1.0 (xxxx-xx-xx)\n        ----------------\n        \n        - Created recipe with ZopeSkel\n        [Plone Foundation]\n        \n        Detailed Documentation\n        **********************\n        \n        Introduction\n        ============\n        \n        This is a full-blown functional test. The emphasis here is on testing what\n        the user may input and see, and the system is largely tested as a black box.\n        We use PloneTestCase to set up this test as well, so we have a full Plone site\n        to play with. We *can* inspect the state of the portal, e.g. using\n        self.portal and self.folder, but it is often frowned upon since you are not\n        treating the system as a black box. Also, if you, for example, log in or set\n        roles using calls like self.setRoles(), these are not reflected in the test\n        browser, which runs as a separate session.\n        \n        Being a doctest, we can tell a story here.\n        \n        First, we must perform some setup. We use the testbrowser that is shipped\n        with Five, as this provides proper Zope 2 integration. Most of the\n        documentation, though, is in the underlying zope.testbrower package.\n        \n        >>> from Products.Five.testbrowser import Browser\n        >>> browser = Browser()\n        >>> portal_url = self.portal.absolute_url()\n        \n        The following is useful when writing and debugging testbrowser tests. It lets\n        us see all error messages in the error_log.\n        \n        >>> self.portal.error_log._ignored_exceptions = ()\n        \n        With that in place, we can go to the portal front page and log in. We will\n        do this using the default user from PloneTestCase:\n        \n        >>> from Products.PloneTestCase.setup import portal_owner, default_password\n        \n        >>> browser.open(portal_url)\n        \n        We have the login portlet, so let's use that.\n        \n        >>> browser.getControl(name='__ac_name').value = portal_owner\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        \n        Here, we set the value of the fields on the login form and then simulate a\n        submit click.\n        \n        We then test that we are still on the portal front page:\n        \n        >>> browser.url == portal_url\n        True\n        \n        And we ensure that we get the friendly logged-in message:\n        \n        >>> \"You are now logged in\" in browser.contents\n        True\n        \n        \n        -*- extra stuff goes here -*-\n        The tweetfolder content type\n        ===============================\n        \n        In this section we are tesing the tweetfolder content type by performing\n        basic operations like adding, updadating and deleting tweetfolder content\n        items.\n        \n        Adding a new tweetfolder content item\n        --------------------------------\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        Then we select the type of item we want to add. In this case we select\n        'tweetfolder' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('tweetfolder').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'tweetfolder' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'tweetfolder Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        And we are done! We added a new 'tweetfolder' content item to the portal.\n        \n        Updating an existing tweetfolder content item\n        ---------------------------------------\n        \n        Let's click on the 'edit' tab and update the object attribute values.\n        \n        >>> browser.getLink('Edit').click()\n        >>> browser.getControl(name='title').value = 'New tweetfolder Sample'\n        >>> browser.getControl('Save').click()\n        \n        We check that the changes were applied.\n        \n        >>> 'Changes saved' in browser.contents\n        True\n        >>> 'New tweetfolder Sample' in browser.contents\n        True\n        \n        Removing a/an tweetfolder content item\n        --------------------------------\n        \n        If we go to the home page, we can see a tab with the 'New tweetfolder\n        Sample' title in the global navigation tabs.\n        \n        >>> browser.open(portal_url)\n        >>> 'New tweetfolder Sample' in browser.contents\n        True\n        \n        Now we are going to delete the 'New tweetfolder Sample' object. First we\n        go to the contents tab and select the 'New tweetfolder Sample' for\n        deletion.\n        \n        >>> browser.getLink('Contents').click()\n        >>> browser.getControl('New tweetfolder Sample').click()\n        \n        We click on the 'Delete' button.\n        \n        >>> browser.getControl('Delete').click()\n        >>> 'Item(s) deleted' in browser.contents\n        True\n        \n        So, if we go back to the home page, there is no longer a 'New tweetfolder\n        Sample' tab.\n        \n        >>> browser.open(portal_url)\n        >>> 'New tweetfolder Sample' in browser.contents\n        False\n        \n        Adding a new tweetfolder content item as contributor\n        ------------------------------------------------\n        \n        Not only site managers are allowed to add tweetfolder content items, but\n        also site contributors.\n        \n        Let's logout and then login as 'contributor', a portal member that has the\n        contributor role assigned.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = 'contributor'\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        We select 'tweetfolder' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('tweetfolder').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'tweetfolder' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'tweetfolder Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        Done! We added a new tweetfolder content item logged in as contributor.\n        \n        Finally, let's login back as manager.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = portal_owner\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        \n        The onlineFeed content type\n        ===============================\n        \n        In this section we are tesing the onlineFeed content type by performing\n        basic operations like adding, updadating and deleting onlineFeed content\n        items.\n        \n        Adding a new onlineFeed content item\n        --------------------------------\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        Then we select the type of item we want to add. In this case we select\n        'onlineFeed' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('onlineFeed').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'onlineFeed' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'onlineFeed Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        And we are done! We added a new 'onlineFeed' content item to the portal.\n        \n        Updating an existing onlineFeed content item\n        ---------------------------------------\n        \n        Let's click on the 'edit' tab and update the object attribute values.\n        \n        >>> browser.getLink('Edit').click()\n        >>> browser.getControl(name='title').value = 'New onlineFeed Sample'\n        >>> browser.getControl('Save').click()\n        \n        We check that the changes were applied.\n        \n        >>> 'Changes saved' in browser.contents\n        True\n        >>> 'New onlineFeed Sample' in browser.contents\n        True\n        \n        Removing a/an onlineFeed content item\n        --------------------------------\n        \n        If we go to the home page, we can see a tab with the 'New onlineFeed\n        Sample' title in the global navigation tabs.\n        \n        >>> browser.open(portal_url)\n        >>> 'New onlineFeed Sample' in browser.contents\n        True\n        \n        Now we are going to delete the 'New onlineFeed Sample' object. First we\n        go to the contents tab and select the 'New onlineFeed Sample' for\n        deletion.\n        \n        >>> browser.getLink('Contents').click()\n        >>> browser.getControl('New onlineFeed Sample').click()\n        \n        We click on the 'Delete' button.\n        \n        >>> browser.getControl('Delete').click()\n        >>> 'Item(s) deleted' in browser.contents\n        True\n        \n        So, if we go back to the home page, there is no longer a 'New onlineFeed\n        Sample' tab.\n        \n        >>> browser.open(portal_url)\n        >>> 'New onlineFeed Sample' in browser.contents\n        False\n        \n        Adding a new onlineFeed content item as contributor\n        ------------------------------------------------\n        \n        Not only site managers are allowed to add onlineFeed content items, but\n        also site contributors.\n        \n        Let's logout and then login as 'contributor', a portal member that has the\n        contributor role assigned.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = 'contributor'\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        We select 'onlineFeed' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('onlineFeed').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'onlineFeed' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'onlineFeed Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        Done! We added a new onlineFeed content item logged in as contributor.\n        \n        Finally, let's login back as manager.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = portal_owner\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        \n        The controlPanel content type\n        ===============================\n        \n        In this section we are tesing the controlPanel content type by performing\n        basic operations like adding, updadating and deleting controlPanel content\n        items.\n        \n        Adding a new controlPanel content item\n        --------------------------------\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        Then we select the type of item we want to add. In this case we select\n        'controlPanel' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('controlPanel').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'controlPanel' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'controlPanel Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        And we are done! We added a new 'controlPanel' content item to the portal.\n        \n        Updating an existing controlPanel content item\n        ---------------------------------------\n        \n        Let's click on the 'edit' tab and update the object attribute values.\n        \n        >>> browser.getLink('Edit').click()\n        >>> browser.getControl(name='title').value = 'New controlPanel Sample'\n        >>> browser.getControl('Save').click()\n        \n        We check that the changes were applied.\n        \n        >>> 'Changes saved' in browser.contents\n        True\n        >>> 'New controlPanel Sample' in browser.contents\n        True\n        \n        Removing a/an controlPanel content item\n        --------------------------------\n        \n        If we go to the home page, we can see a tab with the 'New controlPanel\n        Sample' title in the global navigation tabs.\n        \n        >>> browser.open(portal_url)\n        >>> 'New controlPanel Sample' in browser.contents\n        True\n        \n        Now we are going to delete the 'New controlPanel Sample' object. First we\n        go to the contents tab and select the 'New controlPanel Sample' for\n        deletion.\n        \n        >>> browser.getLink('Contents').click()\n        >>> browser.getControl('New controlPanel Sample').click()\n        \n        We click on the 'Delete' button.\n        \n        >>> browser.getControl('Delete').click()\n        >>> 'Item(s) deleted' in browser.contents\n        True\n        \n        So, if we go back to the home page, there is no longer a 'New controlPanel\n        Sample' tab.\n        \n        >>> browser.open(portal_url)\n        >>> 'New controlPanel Sample' in browser.contents\n        False\n        \n        Adding a new controlPanel content item as contributor\n        ------------------------------------------------\n        \n        Not only site managers are allowed to add controlPanel content items, but\n        also site contributors.\n        \n        Let's logout and then login as 'contributor', a portal member that has the\n        contributor role assigned.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = 'contributor'\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        We use the 'Add new' menu to add a new content item.\n        \n        >>> browser.getLink('Add new').click()\n        \n        We select 'controlPanel' and click the 'Add' button to get to the add form.\n        \n        >>> browser.getControl('controlPanel').click()\n        >>> browser.getControl(name='form.button.Add').click()\n        >>> 'controlPanel' in browser.contents\n        True\n        \n        Now we fill the form and submit it.\n        \n        >>> browser.getControl(name='title').value = 'controlPanel Sample'\n        >>> browser.getControl('Save').click()\n        >>> 'Changes saved' in browser.contents\n        True\n        \n        Done! We added a new controlPanel content item logged in as contributor.\n        \n        Finally, let's login back as manager.\n        \n        >>> browser.getLink('Log out').click()\n        >>> browser.open(portal_url)\n        >>> browser.getControl(name='__ac_name').value = portal_owner\n        >>> browser.getControl(name='__ac_password').value = default_password\n        >>> browser.getControl(name='submit').click()\n        >>> browser.open(portal_url)\n        \n        \n        \n        \n        Contributors\n        ************\n        \n        Plone Foundation, Author\n        \n        \n        Download\n        ********", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/plone/plone.example", "keywords": null, "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "csci.tweetsite", "package_url": "https://pypi.org/project/csci.tweetsite/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/csci.tweetsite/", "project_urls": {"Homepage": "http://svn.plone.org/svn/plone/plone.example"}, "release_url": "https://pypi.org/project/csci.tweetsite/1.0/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. contents::<br>        <br>        .. Note!<br>        -----<br>        Update the following URLs to point to your:<br>        <br>        - code repository<br>        - bug tracker<br>        - questions/comments feedback mail<br>        (do not set a real mail, to avoid spams)<br>        <br>        Or remove it if not used.<br>        <br>        - Code repository: http://svn.somewhere.com/...<br>        - Questions and comments to somemailing_list<br>        - Report bugs at http://bug.somewhere.com/..<br>        <br>        <br>        Change history<br>        **************<br>        <br>        Changelog<br>        =========<br>        <br>        1.0 (xxxx-xx-xx)<br>        ----------------<br>        <br>        - Created recipe with ZopeSkel<br>        [Plone Foundation]<br>        <br>        Detailed Documentation<br>        **********************<br>        <br>        Introduction<br>        ============<br>        <br>        This is a full-blown functional test. The emphasis here is on testing what<br>        the user may input and see, and the system is largely tested as a black box.<br>        We use PloneTestCase to set up this test as well, so we have a full Plone site<br>        to play with. We *can* inspect the state of the portal, e.g. using<br>        self.portal and self.folder, but it is often frowned upon since you are not<br>        treating the system as a black box. Also, if you, for example, log in or set<br>        roles using calls like self.setRoles(), these are not reflected in the test<br>        browser, which runs as a separate session.<br>        <br>        Being a doctest, we can tell a story here.<br>        <br>        First, we must perform some setup. We use the testbrowser that is shipped<br>        with Five, as this provides proper Zope 2 integration. Most of the<br>        documentation, though, is in the underlying zope.testbrower package.<br>        <br>        &gt;&gt;&gt; from Products.Five.testbrowser import Browser<br>        &gt;&gt;&gt; browser = Browser()<br>        &gt;&gt;&gt; portal_url = self.portal.absolute_url()<br>        <br>        The following is useful when writing and debugging testbrowser tests. It lets<br>        us see all error messages in the error_log.<br>        <br>        &gt;&gt;&gt; self.portal.error_log._ignored_exceptions = ()<br>        <br>        With that in place, we can go to the portal front page and log in. We will<br>        do this using the default user from PloneTestCase:<br>        <br>        &gt;&gt;&gt; from Products.PloneTestCase.setup import portal_owner, default_password<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        We have the login portlet, so let's use that.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        <br>        Here, we set the value of the fields on the login form and then simulate a<br>        submit click.<br>        <br>        We then test that we are still on the portal front page:<br>        <br>        &gt;&gt;&gt; browser.url == portal_url<br>        True<br>        <br>        And we ensure that we get the friendly logged-in message:<br>        <br>        &gt;&gt;&gt; \"You are now logged in\" in browser.contents<br>        True<br>        <br>        <br>        -*- extra stuff goes here -*-<br>        The tweetfolder content type<br>        ===============================<br>        <br>        In this section we are tesing the tweetfolder content type by performing<br>        basic operations like adding, updadating and deleting tweetfolder content<br>        items.<br>        <br>        Adding a new tweetfolder content item<br>        --------------------------------<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        Then we select the type of item we want to add. In this case we select<br>        'tweetfolder' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('tweetfolder').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'tweetfolder' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'tweetfolder Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        And we are done! We added a new 'tweetfolder' content item to the portal.<br>        <br>        Updating an existing tweetfolder content item<br>        ---------------------------------------<br>        <br>        Let's click on the 'edit' tab and update the object attribute values.<br>        <br>        &gt;&gt;&gt; browser.getLink('Edit').click()<br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'New tweetfolder Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        <br>        We check that the changes were applied.<br>        <br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        &gt;&gt;&gt; 'New tweetfolder Sample' in browser.contents<br>        True<br>        <br>        Removing a/an tweetfolder content item<br>        --------------------------------<br>        <br>        If we go to the home page, we can see a tab with the 'New tweetfolder<br>        Sample' title in the global navigation tabs.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New tweetfolder Sample' in browser.contents<br>        True<br>        <br>        Now we are going to delete the 'New tweetfolder Sample' object. First we<br>        go to the contents tab and select the 'New tweetfolder Sample' for<br>        deletion.<br>        <br>        &gt;&gt;&gt; browser.getLink('Contents').click()<br>        &gt;&gt;&gt; browser.getControl('New tweetfolder Sample').click()<br>        <br>        We click on the 'Delete' button.<br>        <br>        &gt;&gt;&gt; browser.getControl('Delete').click()<br>        &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>        True<br>        <br>        So, if we go back to the home page, there is no longer a 'New tweetfolder<br>        Sample' tab.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New tweetfolder Sample' in browser.contents<br>        False<br>        <br>        Adding a new tweetfolder content item as contributor<br>        ------------------------------------------------<br>        <br>        Not only site managers are allowed to add tweetfolder content items, but<br>        also site contributors.<br>        <br>        Let's logout and then login as 'contributor', a portal member that has the<br>        contributor role assigned.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        We select 'tweetfolder' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('tweetfolder').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'tweetfolder' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'tweetfolder Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        Done! We added a new tweetfolder content item logged in as contributor.<br>        <br>        Finally, let's login back as manager.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        <br>        The onlineFeed content type<br>        ===============================<br>        <br>        In this section we are tesing the onlineFeed content type by performing<br>        basic operations like adding, updadating and deleting onlineFeed content<br>        items.<br>        <br>        Adding a new onlineFeed content item<br>        --------------------------------<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        Then we select the type of item we want to add. In this case we select<br>        'onlineFeed' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('onlineFeed').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'onlineFeed' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'onlineFeed Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        And we are done! We added a new 'onlineFeed' content item to the portal.<br>        <br>        Updating an existing onlineFeed content item<br>        ---------------------------------------<br>        <br>        Let's click on the 'edit' tab and update the object attribute values.<br>        <br>        &gt;&gt;&gt; browser.getLink('Edit').click()<br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'New onlineFeed Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        <br>        We check that the changes were applied.<br>        <br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        &gt;&gt;&gt; 'New onlineFeed Sample' in browser.contents<br>        True<br>        <br>        Removing a/an onlineFeed content item<br>        --------------------------------<br>        <br>        If we go to the home page, we can see a tab with the 'New onlineFeed<br>        Sample' title in the global navigation tabs.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New onlineFeed Sample' in browser.contents<br>        True<br>        <br>        Now we are going to delete the 'New onlineFeed Sample' object. First we<br>        go to the contents tab and select the 'New onlineFeed Sample' for<br>        deletion.<br>        <br>        &gt;&gt;&gt; browser.getLink('Contents').click()<br>        &gt;&gt;&gt; browser.getControl('New onlineFeed Sample').click()<br>        <br>        We click on the 'Delete' button.<br>        <br>        &gt;&gt;&gt; browser.getControl('Delete').click()<br>        &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>        True<br>        <br>        So, if we go back to the home page, there is no longer a 'New onlineFeed<br>        Sample' tab.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New onlineFeed Sample' in browser.contents<br>        False<br>        <br>        Adding a new onlineFeed content item as contributor<br>        ------------------------------------------------<br>        <br>        Not only site managers are allowed to add onlineFeed content items, but<br>        also site contributors.<br>        <br>        Let's logout and then login as 'contributor', a portal member that has the<br>        contributor role assigned.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        We select 'onlineFeed' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('onlineFeed').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'onlineFeed' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'onlineFeed Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        Done! We added a new onlineFeed content item logged in as contributor.<br>        <br>        Finally, let's login back as manager.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        <br>        The controlPanel content type<br>        ===============================<br>        <br>        In this section we are tesing the controlPanel content type by performing<br>        basic operations like adding, updadating and deleting controlPanel content<br>        items.<br>        <br>        Adding a new controlPanel content item<br>        --------------------------------<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        Then we select the type of item we want to add. In this case we select<br>        'controlPanel' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('controlPanel').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'controlPanel' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'controlPanel Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        And we are done! We added a new 'controlPanel' content item to the portal.<br>        <br>        Updating an existing controlPanel content item<br>        ---------------------------------------<br>        <br>        Let's click on the 'edit' tab and update the object attribute values.<br>        <br>        &gt;&gt;&gt; browser.getLink('Edit').click()<br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'New controlPanel Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        <br>        We check that the changes were applied.<br>        <br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        &gt;&gt;&gt; 'New controlPanel Sample' in browser.contents<br>        True<br>        <br>        Removing a/an controlPanel content item<br>        --------------------------------<br>        <br>        If we go to the home page, we can see a tab with the 'New controlPanel<br>        Sample' title in the global navigation tabs.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New controlPanel Sample' in browser.contents<br>        True<br>        <br>        Now we are going to delete the 'New controlPanel Sample' object. First we<br>        go to the contents tab and select the 'New controlPanel Sample' for<br>        deletion.<br>        <br>        &gt;&gt;&gt; browser.getLink('Contents').click()<br>        &gt;&gt;&gt; browser.getControl('New controlPanel Sample').click()<br>        <br>        We click on the 'Delete' button.<br>        <br>        &gt;&gt;&gt; browser.getControl('Delete').click()<br>        &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>        True<br>        <br>        So, if we go back to the home page, there is no longer a 'New controlPanel<br>        Sample' tab.<br>        <br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; 'New controlPanel Sample' in browser.contents<br>        False<br>        <br>        Adding a new controlPanel content item as contributor<br>        ------------------------------------------------<br>        <br>        Not only site managers are allowed to add controlPanel content items, but<br>        also site contributors.<br>        <br>        Let's logout and then login as 'contributor', a portal member that has the<br>        contributor role assigned.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        We use the 'Add new' menu to add a new content item.<br>        <br>        &gt;&gt;&gt; browser.getLink('Add new').click()<br>        <br>        We select 'controlPanel' and click the 'Add' button to get to the add form.<br>        <br>        &gt;&gt;&gt; browser.getControl('controlPanel').click()<br>        &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>        &gt;&gt;&gt; 'controlPanel' in browser.contents<br>        True<br>        <br>        Now we fill the form and submit it.<br>        <br>        &gt;&gt;&gt; browser.getControl(name='title').value = 'controlPanel Sample'<br>        &gt;&gt;&gt; browser.getControl('Save').click()<br>        &gt;&gt;&gt; 'Changes saved' in browser.contents<br>        True<br>        <br>        Done! We added a new controlPanel content item logged in as contributor.<br>        <br>        Finally, let's login back as manager.<br>        <br>        &gt;&gt;&gt; browser.getLink('Log out').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>        &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>        &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        <br>        <br>        <br>        Contributors<br>        ************<br>        <br>        Plone Foundation, Author<br>        <br>        <br>        Download<br>        ********\n          </div>"}, "last_serial": 788568, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "70e3da0732702690d912724177917385", "sha256": "45f63cefa5ffa39698d2f3088a662fbbfedf40aad7f4f64f337e7eb169e0fdcb"}, "downloads": -1, "filename": "csci.tweetsite-1.0-py2.4.egg", "has_sig": false, "md5_digest": "70e3da0732702690d912724177917385", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 163165, "upload_time": "2009-11-19T18:06:08", "upload_time_iso_8601": "2009-11-19T18:06:08.734491Z", "url": "https://files.pythonhosted.org/packages/3b/33/bc464c1415dbba24aec166374f3c95bc66b10ade391337241f3d7f1c0421/csci.tweetsite-1.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f151d8571b6a94808d8e33424ce337a5", "sha256": "54c841b99a534c5cd2d72443942db3167855b5a015cba4add03a3a0930ccccb1"}, "downloads": -1, "filename": "csci.tweetsite-1.1-py2.4.egg", "has_sig": false, "md5_digest": "f151d8571b6a94808d8e33424ce337a5", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 163931, "upload_time": "2009-11-20T14:13:31", "upload_time_iso_8601": "2009-11-20T14:13:31.709973Z", "url": "https://files.pythonhosted.org/packages/6e/bc/c09c61f4ddc9292cd802c518e106e76c85e96ead8eb0a63b0a62a5079d1b/csci.tweetsite-1.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "dee804ef65e77f827c6fafb03afd301a", "sha256": "1e1e7b3356f88a96d66fc58362a64926a86b40cd5a8d5c8059be2540728ef806"}, "downloads": -1, "filename": "csci.tweetsite-1.2.1-py2.4.egg", "has_sig": false, "md5_digest": "dee804ef65e77f827c6fafb03afd301a", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 164201, "upload_time": "2009-11-23T11:15:21", "upload_time_iso_8601": "2009-11-23T11:15:21.254908Z", "url": "https://files.pythonhosted.org/packages/9a/d6/20c42aafa3bb59dcd12619b4f41c12dc10135024d813903975df9eabc5ec/csci.tweetsite-1.2.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "796144d1305788fd8488278751c1a432", "sha256": "aa12dcc408f4829ea7c92c8bdfa562d5ffebcbd23a76372e262a86efc2c25b33"}, "downloads": -1, "filename": "csci.tweetsite-1.2.2-py2.4.egg", "has_sig": false, "md5_digest": "796144d1305788fd8488278751c1a432", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 164297, "upload_time": "2009-11-23T11:46:25", "upload_time_iso_8601": "2009-11-23T11:46:25.783567Z", "url": "https://files.pythonhosted.org/packages/b7/df/dde93e7fbf5f04e13b8dd361d170f6e5118bdfe641a710b1f3dec257f289/csci.tweetsite-1.2.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3ffbfad3ec43a2c8be06b1fad5c51a0", "sha256": "2c94092d35937258b14eda020f513f773634f5256b7c118c0bdbf4ed5b357a61"}, "downloads": -1, "filename": "csci.tweetsite-1.2-py2.4.egg", "has_sig": false, "md5_digest": "e3ffbfad3ec43a2c8be06b1fad5c51a0", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 163998, "upload_time": "2009-11-20T15:46:27", "upload_time_iso_8601": "2009-11-20T15:46:27.028109Z", "url": "https://files.pythonhosted.org/packages/4d/45/cef2e531ce6f32f1b512e1d1223b29175f17eb9f3adae198b53dc37a2a3a/csci.tweetsite-1.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7df05cc0f742c4c176296c124a4250c", "sha256": "08be0b8da0b4d9ff06990d97b345baa621301fdbe33258a1e8a3f05e1b98b5b4"}, "downloads": -1, "filename": "csci.tweetsite-1.3.1-py2.4.egg", "has_sig": false, "md5_digest": "e7df05cc0f742c4c176296c124a4250c", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 165258, "upload_time": "2009-11-24T12:20:08", "upload_time_iso_8601": "2009-11-24T12:20:08.393555Z", "url": "https://files.pythonhosted.org/packages/7a/44/c27da3c921967efeb8d98bed286cd2c1fbda2b773829fe1b40736132fbcd/csci.tweetsite-1.3.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b5fdb5c5562b509430fdd1b09ebf506", "sha256": "35b41e6e642a8a316ab70024ef47c6cc8f32905e2540da662842aa12f595979a"}, "downloads": -1, "filename": "csci.tweetsite-1.3-py2.4.egg", "has_sig": false, "md5_digest": "4b5fdb5c5562b509430fdd1b09ebf506", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 165218, "upload_time": "2009-11-23T18:15:00", "upload_time_iso_8601": "2009-11-23T18:15:00.668554Z", "url": "https://files.pythonhosted.org/packages/f2/3b/d6dd38daf9ea614d3efe7e597870ae3e89b44214b8f62b63c7aac042f92d/csci.tweetsite-1.3-py2.4.egg", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "70e3da0732702690d912724177917385", "sha256": "45f63cefa5ffa39698d2f3088a662fbbfedf40aad7f4f64f337e7eb169e0fdcb"}, "downloads": -1, "filename": "csci.tweetsite-1.0-py2.4.egg", "has_sig": false, "md5_digest": "70e3da0732702690d912724177917385", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 163165, "upload_time": "2009-11-19T18:06:08", "upload_time_iso_8601": "2009-11-19T18:06:08.734491Z", "url": "https://files.pythonhosted.org/packages/3b/33/bc464c1415dbba24aec166374f3c95bc66b10ade391337241f3d7f1c0421/csci.tweetsite-1.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f151d8571b6a94808d8e33424ce337a5", "sha256": "54c841b99a534c5cd2d72443942db3167855b5a015cba4add03a3a0930ccccb1"}, "downloads": -1, "filename": "csci.tweetsite-1.1-py2.4.egg", "has_sig": false, "md5_digest": "f151d8571b6a94808d8e33424ce337a5", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 163931, "upload_time": "2009-11-20T14:13:31", "upload_time_iso_8601": "2009-11-20T14:13:31.709973Z", "url": "https://files.pythonhosted.org/packages/6e/bc/c09c61f4ddc9292cd802c518e106e76c85e96ead8eb0a63b0a62a5079d1b/csci.tweetsite-1.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "dee804ef65e77f827c6fafb03afd301a", "sha256": "1e1e7b3356f88a96d66fc58362a64926a86b40cd5a8d5c8059be2540728ef806"}, "downloads": -1, "filename": "csci.tweetsite-1.2.1-py2.4.egg", "has_sig": false, "md5_digest": "dee804ef65e77f827c6fafb03afd301a", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 164201, "upload_time": "2009-11-23T11:15:21", "upload_time_iso_8601": "2009-11-23T11:15:21.254908Z", "url": "https://files.pythonhosted.org/packages/9a/d6/20c42aafa3bb59dcd12619b4f41c12dc10135024d813903975df9eabc5ec/csci.tweetsite-1.2.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "796144d1305788fd8488278751c1a432", "sha256": "aa12dcc408f4829ea7c92c8bdfa562d5ffebcbd23a76372e262a86efc2c25b33"}, "downloads": -1, "filename": "csci.tweetsite-1.2.2-py2.4.egg", "has_sig": false, "md5_digest": "796144d1305788fd8488278751c1a432", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 164297, "upload_time": "2009-11-23T11:46:25", "upload_time_iso_8601": "2009-11-23T11:46:25.783567Z", "url": "https://files.pythonhosted.org/packages/b7/df/dde93e7fbf5f04e13b8dd361d170f6e5118bdfe641a710b1f3dec257f289/csci.tweetsite-1.2.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3ffbfad3ec43a2c8be06b1fad5c51a0", "sha256": "2c94092d35937258b14eda020f513f773634f5256b7c118c0bdbf4ed5b357a61"}, "downloads": -1, "filename": "csci.tweetsite-1.2-py2.4.egg", "has_sig": false, "md5_digest": "e3ffbfad3ec43a2c8be06b1fad5c51a0", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 163998, "upload_time": "2009-11-20T15:46:27", "upload_time_iso_8601": "2009-11-20T15:46:27.028109Z", "url": "https://files.pythonhosted.org/packages/4d/45/cef2e531ce6f32f1b512e1d1223b29175f17eb9f3adae198b53dc37a2a3a/csci.tweetsite-1.2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7df05cc0f742c4c176296c124a4250c", "sha256": "08be0b8da0b4d9ff06990d97b345baa621301fdbe33258a1e8a3f05e1b98b5b4"}, "downloads": -1, "filename": "csci.tweetsite-1.3.1-py2.4.egg", "has_sig": false, "md5_digest": "e7df05cc0f742c4c176296c124a4250c", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 165258, "upload_time": "2009-11-24T12:20:08", "upload_time_iso_8601": "2009-11-24T12:20:08.393555Z", "url": "https://files.pythonhosted.org/packages/7a/44/c27da3c921967efeb8d98bed286cd2c1fbda2b773829fe1b40736132fbcd/csci.tweetsite-1.3.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b5fdb5c5562b509430fdd1b09ebf506", "sha256": "35b41e6e642a8a316ab70024ef47c6cc8f32905e2540da662842aa12f595979a"}, "downloads": -1, "filename": "csci.tweetsite-1.3-py2.4.egg", "has_sig": false, "md5_digest": "4b5fdb5c5562b509430fdd1b09ebf506", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 165218, "upload_time": "2009-11-23T18:15:00", "upload_time_iso_8601": "2009-11-23T18:15:00.668554Z", "url": "https://files.pythonhosted.org/packages/f2/3b/d6dd38daf9ea614d3efe7e597870ae3e89b44214b8f62b63c7aac042f92d/csci.tweetsite-1.3-py2.4.egg", "yanked": false}], "timestamp": "Fri May  8 00:41:51 2020"}