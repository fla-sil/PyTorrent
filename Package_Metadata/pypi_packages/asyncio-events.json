{"info": {"author": "Ondrej Novak", "author_email": "ondrej.novak.2@cvut.cz", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development"], "description": "Events-asyncio\n----\nThis is a modification of `Events library`_ that adds support for asyncio.\nUnlike the original library, this modification only supports Python 3.5+.\n\nThe C# language provides a handy way to declare, subscribe to and fire events.\nTechnically, an event is a \"slot\" where callback functions (event handlers) can\nbe attached to - a process referred to as subscribing to an event. Here is\na handy package that encapsulates the core to event subscription and event\nfiring and feels like a \"natural\" part of the language.\n\n.. code-block:: pycon\n\n    >>> async def something_changed(reason):\n    ...     await some_awaitable()\n    ...     print \"something changed because %s\" % reason\n    ...\n\n    >>> from events import Events\n    >>> events = Events()\n    >>> events.on_change += something_changed\n\nMultiple callback functions can subscribe to the same event. When the event is\nfired, all attached event handlers are invoked in sequence. To fire the event,\nperform a call on the slot:\n\n.. code-block:: pycon\n\n    >>> await events.on_change('it had to happen')\n    'something changed because it had to happen'\n\nBy default, Events does not check if an event can be subscribed to and fired.\nYou can predefine events by subclassing Events and listing them. Attempts to\nsubscribe to or fire an undefined event will raise an EventsException.\n\n.. code-block:: pycon\n\n    >>> class MyEvents(Events):\n    ...     __events__ = ('on_this', 'on_that', )\n\n    >>> events = MyEvents()\n\n    # this will raise an EventsException as `on_change` is unknown to MyEvents:\n    >>> events.on_change += something_changed\n\nYou can also predefine events for a single Events instance by passing an iterator to the constructor.\n\n.. code-block:: pycon\n\n    >>> events = Events(('on_this', 'on_that'))\n\n    # this will raise an EventsException as `on_change` is unknown to events:\n    >>> events.on_change += something_changed\n\n\nInstalling\n----------\nEvents is on PyPI so all you need to do is: ::\n\n    pip install asyncio-events\n\nTesting\n-------\nJust run: ::\n\n    python setup.py test\n\n\nLicense\n-------\nAsyncio-events is BSD licensed. See the LICENSE_ for details.\n\n\nAttribution\n-----------\nBased on Events library by `Nicola Iarocci`.\n\n.. _LICENSE: https://github.com/pyeve/events/blob/master/LICENSE\n.. _`Zoran Isailovski`: http://code.activestate.com/recipes/410686/\n.. _`Nicola Iarocci`: https://github.com/nicolaiarocci\n.. _`Events Library`: https://github.com/pyeve/events\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ondrejnovakcvut/asyncio-events", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "asyncio-events", "package_url": "https://pypi.org/project/asyncio-events/", "platform": "any", "project_url": "https://pypi.org/project/asyncio-events/", "project_urls": {"Homepage": "https://github.com/ondrejnovakcvut/asyncio-events"}, "release_url": "https://pypi.org/project/asyncio-events/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Events inspired by C# EventHandler supporting async methods", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Events-asyncio</h2>\n<p>This is a modification of <code>Events library</code>_ that adds support for asyncio.\nUnlike the original library, this modification only supports Python 3.5+.</p>\n<p>The C# language provides a handy way to declare, subscribe to and fire events.\nTechnically, an event is a \"slot\" where callback functions (event handlers) can\nbe attached to - a process referred to as subscribing to an event. Here is\na handy package that encapsulates the core to event subscription and event\nfiring and feels like a \"natural\" part of the language.</p>\n<p>.. code-block:: pycon</p>\n<pre><code>&gt;&gt;&gt; async def something_changed(reason):\n...     await some_awaitable()\n...     print \"something changed because %s\" % reason\n...\n\n&gt;&gt;&gt; from events import Events\n&gt;&gt;&gt; events = Events()\n&gt;&gt;&gt; events.on_change += something_changed\n</code></pre>\n<p>Multiple callback functions can subscribe to the same event. When the event is\nfired, all attached event handlers are invoked in sequence. To fire the event,\nperform a call on the slot:</p>\n<p>.. code-block:: pycon</p>\n<pre><code>&gt;&gt;&gt; await events.on_change('it had to happen')\n'something changed because it had to happen'\n</code></pre>\n<p>By default, Events does not check if an event can be subscribed to and fired.\nYou can predefine events by subclassing Events and listing them. Attempts to\nsubscribe to or fire an undefined event will raise an EventsException.</p>\n<p>.. code-block:: pycon</p>\n<pre><code>&gt;&gt;&gt; class MyEvents(Events):\n...     __events__ = ('on_this', 'on_that', )\n\n&gt;&gt;&gt; events = MyEvents()\n\n# this will raise an EventsException as `on_change` is unknown to MyEvents:\n&gt;&gt;&gt; events.on_change += something_changed\n</code></pre>\n<p>You can also predefine events for a single Events instance by passing an iterator to the constructor.</p>\n<p>.. code-block:: pycon</p>\n<pre><code>&gt;&gt;&gt; events = Events(('on_this', 'on_that'))\n\n# this will raise an EventsException as `on_change` is unknown to events:\n&gt;&gt;&gt; events.on_change += something_changed\n</code></pre>\n<h2>Installing</h2>\n<p>Events is on PyPI so all you need to do is: ::</p>\n<pre><code>pip install asyncio-events\n</code></pre>\n<h2>Testing</h2>\n<p>Just run: ::</p>\n<pre><code>python setup.py test\n</code></pre>\n<h2>License</h2>\n<p>Asyncio-events is BSD licensed. See the LICENSE_ for details.</p>\n<h2>Attribution</h2>\n<p>Based on Events library by <code>Nicola Iarocci</code>.</p>\n<p>.. _LICENSE: <a href=\"https://github.com/pyeve/events/blob/master/LICENSE\" rel=\"nofollow\">https://github.com/pyeve/events/blob/master/LICENSE</a>\n.. _<code>Zoran Isailovski</code>: <a href=\"http://code.activestate.com/recipes/410686/\" rel=\"nofollow\">http://code.activestate.com/recipes/410686/</a>\n.. _<code>Nicola Iarocci</code>: <a href=\"https://github.com/nicolaiarocci\" rel=\"nofollow\">https://github.com/nicolaiarocci</a>\n.. _<code>Events Library</code>: <a href=\"https://github.com/pyeve/events\" rel=\"nofollow\">https://github.com/pyeve/events</a></p>\n\n          </div>"}, "last_serial": 7173167, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "350d8b21b100a47a0edf83df35373be8", "sha256": "9746c8825700d227dacbe7cf347d4f4b42e2eb0a711ad387a7785472f8fa843c"}, "downloads": -1, "filename": "asyncio_events-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "350d8b21b100a47a0edf83df35373be8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10828, "upload_time": "2020-05-05T16:20:44", "upload_time_iso_8601": "2020-05-05T16:20:44.835854Z", "url": "https://files.pythonhosted.org/packages/6b/8f/6b437f52ecafa1f7d68da2684bb9b9ce557460e8d80d1194333ac8a067b1/asyncio_events-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff6532c77d5e2905e222fe2b5e2644c4", "sha256": "8c25f2cc4cea72107e937ef80a28f309022dbc692d086cdb9a8f242be1d2c48a"}, "downloads": -1, "filename": "asyncio-events-0.1.4.tar.gz", "has_sig": false, "md5_digest": "ff6532c77d5e2905e222fe2b5e2644c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5384, "upload_time": "2020-05-05T16:20:47", "upload_time_iso_8601": "2020-05-05T16:20:47.013523Z", "url": "https://files.pythonhosted.org/packages/e4/f4/5187707adefdd025442be0fe29a7dc4815ba609cee2dff05c82cd0575742/asyncio-events-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "350d8b21b100a47a0edf83df35373be8", "sha256": "9746c8825700d227dacbe7cf347d4f4b42e2eb0a711ad387a7785472f8fa843c"}, "downloads": -1, "filename": "asyncio_events-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "350d8b21b100a47a0edf83df35373be8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10828, "upload_time": "2020-05-05T16:20:44", "upload_time_iso_8601": "2020-05-05T16:20:44.835854Z", "url": "https://files.pythonhosted.org/packages/6b/8f/6b437f52ecafa1f7d68da2684bb9b9ce557460e8d80d1194333ac8a067b1/asyncio_events-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff6532c77d5e2905e222fe2b5e2644c4", "sha256": "8c25f2cc4cea72107e937ef80a28f309022dbc692d086cdb9a8f242be1d2c48a"}, "downloads": -1, "filename": "asyncio-events-0.1.4.tar.gz", "has_sig": false, "md5_digest": "ff6532c77d5e2905e222fe2b5e2644c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5384, "upload_time": "2020-05-05T16:20:47", "upload_time_iso_8601": "2020-05-05T16:20:47.013523Z", "url": "https://files.pythonhosted.org/packages/e4/f4/5187707adefdd025442be0fe29a7dc4815ba609cee2dff05c82cd0575742/asyncio-events-0.1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:44 2020"}