{"info": {"author": "Damian Mirecki", "author_email": "damian.mirecki@identt.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "R&D toolkit\n===========\n\nInstallation\n'''''''''''''''''''\n\n    ::\n\n        pip install rndtools\n\nMini-framework for keras model training\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen you call ``train_model`` function then this framework will do few\nuseful things: 1. it creates dirs when it do not exist 1. it\nautomatically save architecture into ``atrchitecture.json``, 1. plot\nmodel graph 1. save python source code of ``get_model_function`` and\n``training_function``, 1. after each epoch draw loss and accuray chart,\n1. after each epoch save csv file with learning history. 1. saves some\nmeta information about model, for example: 1. processing time 1. best\ntrain and test loss 1. date of model creation\n\nWhat you should do:\n'''''''''''''''''''\n\n1. Implement ``load_data`` function.\n2. Implement function that returns compiled keras model. Function should\n   not have any parameters. Example:\n\n   ::\n\n       def get_model():\n         model = Sequential()\n         model.add(Dense(12, input_dim=8, init='uniform', activation='relu'))\n         model.add(Dense(8, init='uniform', activation='relu'))\n         model.add(Dense(1, init='uniform', activation='sigmoid'))\n\n         model.compile(\n           optimizer=Adam(),\n           loss='binary_crossentropy',\n           metrics=['accuracy']\n         )\n\n        return model\n\n3. Implement function that trains model. Function should return model\n   history. Example: \\``\\` def train(data, model, model_folder,\n   callbacks=None): if callbacks is None: callbacks = []\n\n   ::\n\n        history = model.fit(data.X, data.Y, nb_epoch=150, batch_size=10, callbacks=callbacks)\n\n        return history\n\n   \\`\\`\\ ``Pay attention to callbacks parameter. There are some extra callbacks that you should add to model callbacks.  Also note that as in``\\ data\\ ``parameter function pass what``\\ load_data\\`\n   function returns.\n\nExample:\n\n::\n\n    >>> import rndtools as rnd\n    >>> rnd.train.train_model(\n        model_dir,\n        get_model_function=get_model,\n        training_function=train,\n        loading_data_function=load_data\n    )\n\n    Model path: /home/rd/notebooks/documents-detector/damian/models/in_the_wild/unet_mrz/7\n\n    ------------------------------\n    Creating dirs...\n    ------------------------------\n    ------------------------------\n    Creating and compiling model...\n    ------------------------------\n    ------------------------------\n    Saving architecture...\n    ------------------------------\n    ------------------------------\n    Plotting model...\n    ------------------------------\n    ------------------------------\n    Saving model source code...\n    ------------------------------\n    ------------------------------\n    Loading data...\n    ------------------------------\n    ------------------------------\n    Instantiating callbacks...\n    ------------------------------\n    ------------------------------\n    Training model...\n    ------------------------------\n    Epoch 1/1000\n\n    Finished!\n\nDataset In Parts Generator\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSometimes there is so many data that it is problem to store it in\nmemory. Then you can use divide your dataset into parts\n``DatasetInPartsGenerator`` that will load this parts in turn, so you\nwill have only part of dataset in memory.\n\nPipeline\n~~~~~~~~\n\nPipeline consists of steps. Each step is a tuple (name of step, step class). Example pipeline:\n\n::\n\n    pipeline = Pipeline(\n        (\n            'grayscale',\n            Grayscale()\n        ),\n        (\n            'threshold',\n            Threshold()\n        ),\n        (\n            'blur',\n            Blur(\n                sigma=1.5\n            )\n        ),\n        (\n            'watershed',\n            Watershed(\n                min_distance=5,\n                threshold_rel=0.1\n            )\n        ),\n        show_progressbar=True\n    )\n\nTo create your own step just inherit from ``Step`` and implement\n``transform`` method:\n\n::\n\n    from rndtools.pipeline import Step\n\n    class CustomStep(Step):\n        def transform(self, params):\n            pass", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/identt-rnd/rnd-tools", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "rndtools", "package_url": "https://pypi.org/project/rndtools/", "platform": "", "project_url": "https://pypi.org/project/rndtools/", "project_urls": {"Homepage": "https://gitlab.com/identt-rnd/rnd-tools"}, "release_url": "https://pypi.org/project/rndtools/3.0.7/", "requires_dist": null, "requires_python": "", "summary": "R&D tools", "version": "3.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\n<pre>pip install rndtools\n</pre>\n</blockquote>\n<div id=\"mini-framework-for-keras-model-training\">\n<h3>Mini-framework for keras model training</h3>\n<p>When you call <tt>train_model</tt> function then this framework will do few\nuseful things: 1. it creates dirs when it do not exist 1. it\nautomatically save architecture into <tt>atrchitecture.json</tt>, 1. plot\nmodel graph 1. save python source code of <tt>get_model_function</tt> and\n<tt>training_function</tt>, 1. after each epoch draw loss and accuray chart,\n1. after each epoch save csv file with learning history. 1. saves some\nmeta information about model, for example: 1. processing time 1. best\ntrain and test loss 1. date of model creation</p>\n</div>\n</div>\n<div id=\"what-you-should-do\">\n<h2>What you should do:</h2>\n<ol>\n<li><p>Implement <tt>load_data</tt> function.</p>\n</li>\n<li><p>Implement function that returns compiled keras model. Function should\nnot have any parameters. Example:</p>\n<pre>def get_model():\n  model = Sequential()\n  model.add(Dense(12, input_dim=8, init='uniform', activation='relu'))\n  model.add(Dense(8, init='uniform', activation='relu'))\n  model.add(Dense(1, init='uniform', activation='sigmoid'))\n\n  model.compile(\n    optimizer=Adam(),\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n  )\n\n return model\n</pre>\n</li>\n<li><p>Implement function that trains model. Function should return model\nhistory. Example: ``` def train(data, model, model_folder,\ncallbacks=None): if callbacks is None: callbacks = []</p>\n<pre>history = model.fit(data.X, data.Y, nb_epoch=150, batch_size=10, callbacks=callbacks)\n\nreturn history\n</pre>\n<p>``<tt>Pay attention to callbacks parameter. There are some extra callbacks that you should add to model callbacks.\u00a0 Also note that as in</tt>data<tt>parameter function pass what</tt>load_data`\nfunction returns.</p>\n</li>\n</ol>\n<p>Example:</p>\n<pre>&gt;&gt;&gt; import rndtools as rnd\n&gt;&gt;&gt; rnd.train.train_model(\n    model_dir,\n    get_model_function=get_model,\n    training_function=train,\n    loading_data_function=load_data\n)\n\nModel path: /home/rd/notebooks/documents-detector/damian/models/in_the_wild/unet_mrz/7\n\n------------------------------\nCreating dirs...\n------------------------------\n------------------------------\nCreating and compiling model...\n------------------------------\n------------------------------\nSaving architecture...\n------------------------------\n------------------------------\nPlotting model...\n------------------------------\n------------------------------\nSaving model source code...\n------------------------------\n------------------------------\nLoading data...\n------------------------------\n------------------------------\nInstantiating callbacks...\n------------------------------\n------------------------------\nTraining model...\n------------------------------\nEpoch 1/1000\n\nFinished!\n</pre>\n<div id=\"dataset-in-parts-generator\">\n<h3>Dataset In Parts Generator</h3>\n<p>Sometimes there is so many data that it is problem to store it in\nmemory. Then you can use divide your dataset into parts\n<tt>DatasetInPartsGenerator</tt> that will load this parts in turn, so you\nwill have only part of dataset in memory.</p>\n</div>\n<div id=\"pipeline\">\n<h3>Pipeline</h3>\n<p>Pipeline consists of steps. Each step is a tuple (name of step, step class). Example pipeline:</p>\n<pre>pipeline = Pipeline(\n    (\n        'grayscale',\n        Grayscale()\n    ),\n    (\n        'threshold',\n        Threshold()\n    ),\n    (\n        'blur',\n        Blur(\n            sigma=1.5\n        )\n    ),\n    (\n        'watershed',\n        Watershed(\n            min_distance=5,\n            threshold_rel=0.1\n        )\n    ),\n    show_progressbar=True\n)\n</pre>\n<p>To create your own step just inherit from <tt>Step</tt> and implement\n<tt>transform</tt> method:</p>\n<pre>from rndtools.pipeline import Step\n\nclass CustomStep(Step):\n    def transform(self, params):\n        pass\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3560026, "releases": {"3.0": [{"comment_text": "", "digests": {"md5": "47d9d3b70b7ff9867069fd41bd7e90c4", "sha256": "9c2a29d86ed61bfb8eebf18a00c40ecc538634bac472b2ca494e3452cab1e3ba"}, "downloads": -1, "filename": "rndtools-3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "47d9d3b70b7ff9867069fd41bd7e90c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15735, "upload_time": "2018-01-29T10:29:41", "upload_time_iso_8601": "2018-01-29T10:29:41.388605Z", "url": "https://files.pythonhosted.org/packages/6d/99/ec0b14776121e8aefff5d296ce8ca1e68821bb2cbca23efc839d25cc0bdf/rndtools-3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4d9acfe35079d29f38972a67dc84aca", "sha256": "0629e3605083d05e2dddd3aaa086be6632ebb1f3330d954e5fc739325318612d"}, "downloads": -1, "filename": "rndtools-3.0.tar.gz", "has_sig": false, "md5_digest": "b4d9acfe35079d29f38972a67dc84aca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16431, "upload_time": "2018-01-29T10:29:42", "upload_time_iso_8601": "2018-01-29T10:29:42.574331Z", "url": "https://files.pythonhosted.org/packages/c4/6c/0ac2475a6b0aa0d679c0024959e3ad18b1c4586f7cf2a217061e3715a3cf/rndtools-3.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "9324497f63ff4e984c22c724e1ff6dbc", "sha256": "68a247dc06bdd3e22f2fb1b090bad4b3802dec2aa326d8098b39bfdf04364c19"}, "downloads": -1, "filename": "rndtools-3.0.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "9324497f63ff4e984c22c724e1ff6dbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29281, "upload_time": "2018-01-29T10:51:25", "upload_time_iso_8601": "2018-01-29T10:51:25.625720Z", "url": "https://files.pythonhosted.org/packages/23/e9/8ea2eff28072ee7653684a71af6217d3eb84ccbd3fef99d37f2a22c2d9bb/rndtools-3.0.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "d96d428b0ce90d98d2c767c989a9f629", "sha256": "abf1474d34b8c13361dd4781d51c4f29a59631d51d0374055fadeee3761aee54"}, "downloads": -1, "filename": "rndtools-3.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "d96d428b0ce90d98d2c767c989a9f629", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 15764, "upload_time": "2018-01-29T11:08:31", "upload_time_iso_8601": "2018-01-29T11:08:31.898858Z", "url": "https://files.pythonhosted.org/packages/47/7d/61b12a51e81f2cdeba07f4b6b983d426ca5605a3d8b14ee90340b5c24f0b/rndtools-3.0.1-py2-none-any.whl", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "41b4f9815cd14d293b58267a76dc460b", "sha256": "5494edce26f750ec0d86359684c0e7319d82501c3dc224daa04e1c204e4e1221"}, "downloads": -1, "filename": "rndtools-3.0.2.tar.gz", "has_sig": false, "md5_digest": "41b4f9815cd14d293b58267a76dc460b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16386, "upload_time": "2018-01-29T11:26:30", "upload_time_iso_8601": "2018-01-29T11:26:30.646573Z", "url": "https://files.pythonhosted.org/packages/85/79/341202fdf58e0c6169c844f5837f8f0f072c0a7dbbc1c91eb018f6fb1218/rndtools-3.0.2.tar.gz", "yanked": false}], "3.0.3": [{"comment_text": "", "digests": {"md5": "85c445be8aeda8b25083a345d9006167", "sha256": "5209eb473043f338d4add7595b9fc3605990d6e13788d3b6e865f777e1e320d4"}, "downloads": -1, "filename": "rndtools-3.0.3.tar.gz", "has_sig": false, "md5_digest": "85c445be8aeda8b25083a345d9006167", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17804, "upload_time": "2018-01-29T11:36:48", "upload_time_iso_8601": "2018-01-29T11:36:48.648479Z", "url": "https://files.pythonhosted.org/packages/7c/f4/a5a9734fa0eb2d6ad7501b1ffd402f33bd834b0ee6ca05139d3298a6138c/rndtools-3.0.3.tar.gz", "yanked": false}], "3.0.4": [{"comment_text": "", "digests": {"md5": "c530fbb81cc5e5082b01ea3499378d85", "sha256": "7fcef679ad7d970e700c7ad595cacd312668d16caeb431d289cc02a1c5cad543"}, "downloads": -1, "filename": "rndtools-3.0.4.tar.gz", "has_sig": false, "md5_digest": "c530fbb81cc5e5082b01ea3499378d85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18138, "upload_time": "2018-01-29T12:49:37", "upload_time_iso_8601": "2018-01-29T12:49:37.316777Z", "url": "https://files.pythonhosted.org/packages/61/e2/7863351d5946500fcc5b3a8a53587052439259b3cad3617819cec0eb0d55/rndtools-3.0.4.tar.gz", "yanked": false}], "3.0.5": [{"comment_text": "", "digests": {"md5": "2c9de6fda0cbda0f8efdd8d17f33990d", "sha256": "aac9dadc1e12c28c80d9df3cb688a0f268ef5d0ee8c64097564208c5c8fea6da"}, "downloads": -1, "filename": "rndtools-3.0.5.tar.gz", "has_sig": false, "md5_digest": "2c9de6fda0cbda0f8efdd8d17f33990d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17273, "upload_time": "2018-02-02T12:59:57", "upload_time_iso_8601": "2018-02-02T12:59:57.106483Z", "url": "https://files.pythonhosted.org/packages/ea/42/d28e02a283fd674287974011da7aaf71b23b390e752e6acbba741191d84f/rndtools-3.0.5.tar.gz", "yanked": false}], "3.0.6": [{"comment_text": "", "digests": {"md5": "d3732e3d8fb411f071108d41ca84a270", "sha256": "c1736f5966e96e9c3703022597c381402677ece2d6d0702e08fe47b442e890a1"}, "downloads": -1, "filename": "rndtools-3.0.6.tar.gz", "has_sig": false, "md5_digest": "d3732e3d8fb411f071108d41ca84a270", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18369, "upload_time": "2018-02-07T10:19:32", "upload_time_iso_8601": "2018-02-07T10:19:32.598223Z", "url": "https://files.pythonhosted.org/packages/84/46/375da44def72cabaade4d1a21be7f7c2d636882b833a2f994e1e2a703b9e/rndtools-3.0.6.tar.gz", "yanked": false}], "3.0.7": [{"comment_text": "", "digests": {"md5": "497702652490328558b83e91520576a4", "sha256": "7f1893cfaea9770d31be89cec58e97f867491888e131b3d412508a3b47da213e"}, "downloads": -1, "filename": "rndtools-3.0.7.tar.gz", "has_sig": false, "md5_digest": "497702652490328558b83e91520576a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17461, "upload_time": "2018-02-07T11:36:30", "upload_time_iso_8601": "2018-02-07T11:36:30.039849Z", "url": "https://files.pythonhosted.org/packages/a7/a2/0ab1fd03fccdf825ec865d33d97510aa035acb2d1e16b3992999a971f319/rndtools-3.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "497702652490328558b83e91520576a4", "sha256": "7f1893cfaea9770d31be89cec58e97f867491888e131b3d412508a3b47da213e"}, "downloads": -1, "filename": "rndtools-3.0.7.tar.gz", "has_sig": false, "md5_digest": "497702652490328558b83e91520576a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17461, "upload_time": "2018-02-07T11:36:30", "upload_time_iso_8601": "2018-02-07T11:36:30.039849Z", "url": "https://files.pythonhosted.org/packages/a7/a2/0ab1fd03fccdf825ec865d33d97510aa035acb2d1e16b3992999a971f319/rndtools-3.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:09 2020"}