{"info": {"author": "M.Furkan", "author_email": "furkan@telegmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# remoteunrar\n\n\nThis module provides a way to access single members of a zip file archive without downloading the full content from a remote web server. For this library to work, the web server hosting the archive needs to support the [range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests) header. \n\n## Installation\n\n`pip install remoteunrar`\n\n## Usage\n\n### Initialization\n\n`remoteunrar(url, ...)`\n\nTo download the content, this library rely on the `requests` module. The constructor interface matches the function `requests.get` module.\n\n* **url**: Url where the rar file is located *(required)*.\n* **auth**: authentication credentials.\n* **headers**: headers to pass to the request.\n* **timeout**: timeout for the request.\n* **verify**: enable/disable certificate verification or set custom certificates location.\n* ... Please look at the [requests](http://docs.python-requests.org/en/master/user/quickstart/#make-a-request) documentation for futher usage details.\n* **initial\\_buffer\\_size**: How much data (in bytes) to fetch during the first connection to download the rar file central directory. If your zip file conteins a lot of files, would be a good idea to increase this parameter in order to avoid the need for further remote requests. *Default: 64kb*.\n\n### Class Interface\n\n`remoteunrar` is a subclass of the python standard library class `zipfile.ZipFile`, so it supports all its read methods:\n\n* `remoteunrar.close()`\n* `remoteunrar.getinfo(name)`\n* `remoteunrar.extract(member[, path[, pwd]])`\n* `remoteunrar.extractall([path[, members[, pwd]]])`\n* `remoteunrar.infolist()`\n* `remoteunrar.namelist()`\n* `remoteunrar.open(name[, mode[, pwd]])`\n* `remoteunrar.printdir()`\n* `remoteunrar.read(name[, pwd])`\n* `remoteunrar.testzip()`\n* `remoteunrar.filename`\n* `remoteunrar.debug`\n* `remoteunrar.comment`\n\nPlease look at the [zipfile](https://docs.python.org/3/library/zipfile.html#zipfile-objects) documentation for usage details.\n\n\n**NOTE**: `extractall()` and `testzip()` require to access the full content of the archive. If you need to use such methods, a full download of it would be probably more efficient.\n\n### Examples\n\n#### List members in archive\n\nPrint all members part of the archive:\n\n```python\nimport remoteunrar\n\nwith remoteunrar('http://.../myfile.rar') as rar:\n    for zip_info in rar.infolist():\n        print(zip_info.filename)\n```\n\n\n#### Download a member\nThe following example will extract the file `somefile.txt` from the archive stored at the url `http://.../myfile.zip`.\n\n```python\nimport remoteunrar\n\nwith remoteunrar('http://.../myfile.rar') as rar:\n    rar.extract('somefile.txt')\n```\n\n#### S3 example\n\nIf you are trying to download a member from a rar archive hosted on S3 you can use the [aws-requests-auth](https://github.com/DavidMuller/aws-requests-auth) library for that as follow: \n\n```python\nfrom aws_requests_auth.boto_utils import BotoAWSRequestsAuth\nfrom hashlib import sha256\n\nauth = BotoAWSRequestsAuth(\n    aws_host='s3-eu-west-1.amazonaws.com',\n    aws_region='eu-west-1',\n    aws_service='s3'\n)\nheaders = {'x-amz-content-sha256': sha256('').hexdigest()}\nurl = \"https://s3-eu-west-1.amazonaws.com/.../file.rar\"\n\nwith remoteunrar(url, auth=auth, headers=headers) as z: \n    rar.extract('somefile.txt')\n```\n\n## Command line tool\n\nA simple command line tool is included in this distribution.\n\n```\nusage: remoteunrar [-h] [-l] [-d DIR] url [filename [filename ...]]\n\nUnrar remote files\n\npositional arguments:\n  url                Url of the rar archive\n  filename           File to extract\n\noptional arguments:\n  -h, --help         show this help message and exit\n  -l, --list         List files in the archive\n  -d DIR, --dir DIR  Extract directory, default current directory\n```\n\n#### Example\n\n```\n$ remoteunrar -l \"http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.rar\"\n  Length  DateTime             Name\n--------  -------------------  ------------------------\n    2962  2008-07-30 13:58:46  Readme.txt\n   24740  2008-07-30 12:16:46  TM_WORLD_BORDERS-0.3.dbf\n     145  2008-03-12 13:11:54  TM_WORLD_BORDERS-0.3.prj\n 6478464  2008-07-30 12:16:46  TM_WORLD_BORDERS-0.3.shp\n    2068  2008-07-30 12:16:46  TM_WORLD_BORDERS-0.3.shx\n    \n$ remoteunrar \"http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.rar\" Readme.txt\nExtracting Readme.txt...\n```\n\n## How it works\n\nThis module uses the `zipfile.ZipFile` class under the hood to decode the zip file format. The `ZipFile` class is initialized with a file like object that will perform transparently the remote queries.\n\nThe rar format is composed by the content of each compressed member followed by the central directory.\n\nHow many requests will this module perform to download a member?\n\n* If the full archive content is smaller than **initial\\_buffer\\_size**, only one request will be needed.\n* Normally two requests are needed, one to download the central directory and one to download the archive member.\n* If the central directory is bigger than **initial\\_buffer\\_size**, a third request will be required.\n\n## Alternative modules\n\nThere is a similar module available for python [pyremotezip](https://github.com/fcvarela/pyremotezip).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/muhammedfurkan/python-remoteunrar", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "remoteunrar", "package_url": "https://pypi.org/project/remoteunrar/", "platform": "", "project_url": "https://pypi.org/project/remoteunrar/", "project_urls": {"Homepage": "https://github.com/muhammedfurkan/python-remoteunrar"}, "release_url": "https://pypi.org/project/remoteunrar/0.9.2/", "requires_dist": null, "requires_python": "", "summary": "Access rar file content hosted remotely without downloading the full file.", "version": "0.9.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>remoteunrar</h1>\n<p>This module provides a way to access single members of a zip file archive without downloading the full content from a remote web server. For this library to work, the web server hosting the archive needs to support the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests\" rel=\"nofollow\">range</a> header.</p>\n<h2>Installation</h2>\n<p><code>pip install remoteunrar</code></p>\n<h2>Usage</h2>\n<h3>Initialization</h3>\n<p><code>remoteunrar(url, ...)</code></p>\n<p>To download the content, this library rely on the <code>requests</code> module. The constructor interface matches the function <code>requests.get</code> module.</p>\n<ul>\n<li><strong>url</strong>: Url where the rar file is located <em>(required)</em>.</li>\n<li><strong>auth</strong>: authentication credentials.</li>\n<li><strong>headers</strong>: headers to pass to the request.</li>\n<li><strong>timeout</strong>: timeout for the request.</li>\n<li><strong>verify</strong>: enable/disable certificate verification or set custom certificates location.</li>\n<li>... Please look at the <a href=\"http://docs.python-requests.org/en/master/user/quickstart/#make-a-request\" rel=\"nofollow\">requests</a> documentation for futher usage details.</li>\n<li><strong>initial_buffer_size</strong>: How much data (in bytes) to fetch during the first connection to download the rar file central directory. If your zip file conteins a lot of files, would be a good idea to increase this parameter in order to avoid the need for further remote requests. <em>Default: 64kb</em>.</li>\n</ul>\n<h3>Class Interface</h3>\n<p><code>remoteunrar</code> is a subclass of the python standard library class <code>zipfile.ZipFile</code>, so it supports all its read methods:</p>\n<ul>\n<li><code>remoteunrar.close()</code></li>\n<li><code>remoteunrar.getinfo(name)</code></li>\n<li><code>remoteunrar.extract(member[, path[, pwd]])</code></li>\n<li><code>remoteunrar.extractall([path[, members[, pwd]]])</code></li>\n<li><code>remoteunrar.infolist()</code></li>\n<li><code>remoteunrar.namelist()</code></li>\n<li><code>remoteunrar.open(name[, mode[, pwd]])</code></li>\n<li><code>remoteunrar.printdir()</code></li>\n<li><code>remoteunrar.read(name[, pwd])</code></li>\n<li><code>remoteunrar.testzip()</code></li>\n<li><code>remoteunrar.filename</code></li>\n<li><code>remoteunrar.debug</code></li>\n<li><code>remoteunrar.comment</code></li>\n</ul>\n<p>Please look at the <a href=\"https://docs.python.org/3/library/zipfile.html#zipfile-objects\" rel=\"nofollow\">zipfile</a> documentation for usage details.</p>\n<p><strong>NOTE</strong>: <code>extractall()</code> and <code>testzip()</code> require to access the full content of the archive. If you need to use such methods, a full download of it would be probably more efficient.</p>\n<h3>Examples</h3>\n<h4>List members in archive</h4>\n<p>Print all members part of the archive:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">remoteunrar</span>\n\n<span class=\"k\">with</span> <span class=\"n\">remoteunrar</span><span class=\"p\">(</span><span class=\"s1\">'http://.../myfile.rar'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">rar</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">zip_info</span> <span class=\"ow\">in</span> <span class=\"n\">rar</span><span class=\"o\">.</span><span class=\"n\">infolist</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">zip_info</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<h4>Download a member</h4>\n<p>The following example will extract the file <code>somefile.txt</code> from the archive stored at the url <code>http://.../myfile.zip</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">remoteunrar</span>\n\n<span class=\"k\">with</span> <span class=\"n\">remoteunrar</span><span class=\"p\">(</span><span class=\"s1\">'http://.../myfile.rar'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">rar</span><span class=\"p\">:</span>\n    <span class=\"n\">rar</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"p\">(</span><span class=\"s1\">'somefile.txt'</span><span class=\"p\">)</span>\n</pre>\n<h4>S3 example</h4>\n<p>If you are trying to download a member from a rar archive hosted on S3 you can use the <a href=\"https://github.com/DavidMuller/aws-requests-auth\" rel=\"nofollow\">aws-requests-auth</a> library for that as follow:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aws_requests_auth.boto_utils</span> <span class=\"kn\">import</span> <span class=\"n\">BotoAWSRequestsAuth</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hashlib</span> <span class=\"kn\">import</span> <span class=\"n\">sha256</span>\n\n<span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"n\">BotoAWSRequestsAuth</span><span class=\"p\">(</span>\n    <span class=\"n\">aws_host</span><span class=\"o\">=</span><span class=\"s1\">'s3-eu-west-1.amazonaws.com'</span><span class=\"p\">,</span>\n    <span class=\"n\">aws_region</span><span class=\"o\">=</span><span class=\"s1\">'eu-west-1'</span><span class=\"p\">,</span>\n    <span class=\"n\">aws_service</span><span class=\"o\">=</span><span class=\"s1\">'s3'</span>\n<span class=\"p\">)</span>\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'x-amz-content-sha256'</span><span class=\"p\">:</span> <span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()}</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://s3-eu-west-1.amazonaws.com/.../file.rar\"</span>\n\n<span class=\"k\">with</span> <span class=\"n\">remoteunrar</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">auth</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">z</span><span class=\"p\">:</span> \n    <span class=\"n\">rar</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"p\">(</span><span class=\"s1\">'somefile.txt'</span><span class=\"p\">)</span>\n</pre>\n<h2>Command line tool</h2>\n<p>A simple command line tool is included in this distribution.</p>\n<pre><code>usage: remoteunrar [-h] [-l] [-d DIR] url [filename [filename ...]]\n\nUnrar remote files\n\npositional arguments:\n  url                Url of the rar archive\n  filename           File to extract\n\noptional arguments:\n  -h, --help         show this help message and exit\n  -l, --list         List files in the archive\n  -d DIR, --dir DIR  Extract directory, default current directory\n</code></pre>\n<h4>Example</h4>\n<pre><code>$ remoteunrar -l \"http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.rar\"\n  Length  DateTime             Name\n--------  -------------------  ------------------------\n    2962  2008-07-30 13:58:46  Readme.txt\n   24740  2008-07-30 12:16:46  TM_WORLD_BORDERS-0.3.dbf\n     145  2008-03-12 13:11:54  TM_WORLD_BORDERS-0.3.prj\n 6478464  2008-07-30 12:16:46  TM_WORLD_BORDERS-0.3.shp\n    2068  2008-07-30 12:16:46  TM_WORLD_BORDERS-0.3.shx\n    \n$ remoteunrar \"http://thematicmapping.org/downloads/TM_WORLD_BORDERS-0.3.rar\" Readme.txt\nExtracting Readme.txt...\n</code></pre>\n<h2>How it works</h2>\n<p>This module uses the <code>zipfile.ZipFile</code> class under the hood to decode the zip file format. The <code>ZipFile</code> class is initialized with a file like object that will perform transparently the remote queries.</p>\n<p>The rar format is composed by the content of each compressed member followed by the central directory.</p>\n<p>How many requests will this module perform to download a member?</p>\n<ul>\n<li>If the full archive content is smaller than <strong>initial_buffer_size</strong>, only one request will be needed.</li>\n<li>Normally two requests are needed, one to download the central directory and one to download the archive member.</li>\n<li>If the central directory is bigger than <strong>initial_buffer_size</strong>, a third request will be required.</li>\n</ul>\n<h2>Alternative modules</h2>\n<p>There is a similar module available for python <a href=\"https://github.com/fcvarela/pyremotezip\" rel=\"nofollow\">pyremotezip</a>.</p>\n\n          </div>"}, "last_serial": 5831427, "releases": {"0.9.2": [{"comment_text": "", "digests": {"md5": "3fef1a5def2e5b3f94307663d2f33655", "sha256": "fcebab092d862d794760d5f16bae92a1e728605a1ee33d3b0c5de1ff17a6a198"}, "downloads": -1, "filename": "remoteunrar-0.9.2.tar.gz", "has_sig": false, "md5_digest": "3fef1a5def2e5b3f94307663d2f33655", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5673, "upload_time": "2019-09-15T10:49:50", "upload_time_iso_8601": "2019-09-15T10:49:50.912145Z", "url": "https://files.pythonhosted.org/packages/e0/47/e7fe4e062dab314fe24918fd2a027735bb5bafd5fe6970045499d1a6c933/remoteunrar-0.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3fef1a5def2e5b3f94307663d2f33655", "sha256": "fcebab092d862d794760d5f16bae92a1e728605a1ee33d3b0c5de1ff17a6a198"}, "downloads": -1, "filename": "remoteunrar-0.9.2.tar.gz", "has_sig": false, "md5_digest": "3fef1a5def2e5b3f94307663d2f33655", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5673, "upload_time": "2019-09-15T10:49:50", "upload_time_iso_8601": "2019-09-15T10:49:50.912145Z", "url": "https://files.pythonhosted.org/packages/e0/47/e7fe4e062dab314fe24918fd2a027735bb5bafd5fe6970045499d1a6c933/remoteunrar-0.9.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:50 2020"}