{"info": {"author": "Selwin Ong", "author_email": "selwin.ong@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "============\nRQ Scheduler\n============\n\n`RQ Scheduler <https://github.com/rq/rq-scheduler>`_ is a small package that\nadds job scheduling capabilities to `RQ <https://github.com/nvie/rq>`_,\na `Redis <http://redis.io/>`_ based Python queuing library.\n\n.. image:: https://travis-ci.org/rq/rq-scheduler.svg?branch=master\n    :target: https://travis-ci.org/rq/rq-scheduler\n\n====================\nSupport RQ Scheduler\n====================\n\nIf you find ``rq-scheduler`` useful, please consider supporting its development via `Tidelift <https://tidelift.com/subscription/pkg/pypi-rq_scheduler?utm_source=pypi-rq-scheduler&utm_medium=referral&utm_campaign=readme>`_.\n\n============\nRequirements\n============\n\n* `RQ`_\n\n============\nInstallation\n============\n\nYou can install `RQ Scheduler`_ via pip::\n\n    pip install rq-scheduler\n\nOr you can download the latest stable package from `PyPI <http://pypi.python.org/pypi/rq-scheduler>`_.\n\n=====\nUsage\n=====\n\nSchedule a job involves doing two different things:\n\n1. Putting a job in the scheduler\n2. Running a scheduler that will move scheduled jobs into queues when the time comes\n\n----------------\nScheduling a Job\n----------------\n\nThere are two ways you can schedule a job. The first is using RQ Scheduler's ``enqueue_at``\n\n.. code-block:: python\n\n    from redis import Redis\n    from rq import Queue\n    from rq_scheduler import Scheduler\n    from datetime import datetime\n\n    scheduler = Scheduler(connection=Redis()) # Get a scheduler for the \"default\" queue\n    scheduler = Scheduler('foo', connection=Redis()) # Get a scheduler for the \"foo\" queue\n\n    # You can also instantiate a Scheduler using an RQ Queue\n    queue = Queue('bar', connection=Redis())\n    scheduler = Scheduler(queue=queue)\n\n    # Puts a job into the scheduler. The API is similar to RQ except that it\n    # takes a datetime object as first argument. So for example to schedule a\n    # job to run on Jan 1st 2020 we do:\n    scheduler.enqueue_at(datetime(2020, 1, 1), func) # Date time should be in UTC\n\n    # Here's another example scheduling a job to run at a specific date and time (in UTC),\n    # complete with args and kwargs.\n    scheduler.enqueue_at(datetime(2020, 1, 1, 3, 4), func, foo, bar=baz)\n\n\nThe second way is using ``enqueue_in``. Instead of taking a ``datetime`` object,\nthis method expects a ``timedelta`` and schedules the job to run at\nX seconds/minutes/hours/days/weeks later. For example, if we want to monitor how\npopular a tweet is a few times during the course of the day, we could do something like\n\n.. code-block:: python\n\n    from datetime import timedelta\n\n    # Schedule a job to run 10 minutes, 1 hour and 1 day later\n    scheduler.enqueue_in(timedelta(minutes=10), count_retweets, tweet_id)\n    scheduler.enqueue_in(timedelta(hours=1), count_retweets, tweet_id)\n    scheduler.enqueue_in(timedelta(days=1), count_retweets, tweet_id)\n\n**IMPORTANT**: You should always use UTC datetime when working with `RQ Scheduler`_.\n\n------------------------\nPeriodic & Repeated Jobs\n------------------------\n\nAs of version 0.3, `RQ Scheduler`_ also supports creating periodic and repeated jobs.\nYou can do this via the ``schedule`` method. Note that this feature needs\n`RQ`_ >= 0.3.1.\n\nThis is how you do it\n\n.. code-block:: python\n\n    scheduler.schedule(\n        scheduled_time=datetime.utcnow(), # Time for first execution, in UTC timezone\n        func=func,                     # Function to be queued\n        args=[arg1, arg2],             # Arguments passed into function when executed\n        kwargs={'foo': 'bar'},         # Keyword arguments passed into function when executed\n        interval=60,                   # Time before the function is called again, in seconds\n        repeat=10,                     # Repeat this number of times (None means repeat forever)\n        meta={'foo': 'bar'}            # Arbitrary pickleable data on the job itself\n    )\n\n**IMPORTANT NOTE**: If you set up a repeated job, you must make sure that you\neither do not set a `result_ttl` value or you set a value larger than the interval.\nOtherwise, the entry with the job details will expire and the job will not get re-scheduled.\n\n------------------------\nCron Jobs\n------------------------\n\nAs of version 0.6.0, `RQ Scheduler`_ also supports creating Cron Jobs, which you can use for\nrepeated jobs to run periodically at fixed times, dates or intervals, for more info check\nhttps://en.wikipedia.org/wiki/Cron. You can do this via the ``cron`` method.\n\nThis is how you do it\n\n.. code-block:: python\n\n    scheduler.cron(\n        cron_string,                # A cron string (e.g. \"0 0 * * 0\")\n        func=func,                  # Function to be queued\n        args=[arg1, arg2],          # Arguments passed into function when executed\n        kwargs={'foo': 'bar'},      # Keyword arguments passed into function when executed\n        repeat=10,                  # Repeat this number of times (None means repeat forever)\n        queue_name=queue_name,      # In which queue the job should be put in\n        meta={'foo': 'bar'},        # Arbitrary pickleable data on the job itself\n        use_local_timezone=False    # Interpret hours in the local timezone\n    )\n\n-------------------------\nRetrieving scheduled jobs\n-------------------------\n\nSometimes you need to know which jobs have already been scheduled. You can get a\nlist of enqueued jobs with the ``get_jobs`` method\n\n.. code-block:: python\n\n    list_of_job_instances = scheduler.get_jobs()\n\nIn it's simplest form (as seen in the above example) this method returns a list\nof all job instances that are currently scheduled for execution.\n\nAdditionally the method takes two optional keyword arguments ``until`` and\n``with_times``. The first one specifies up to which point in time scheduled jobs\nshould be returned. It can be given as either a datetime / timedelta instance\nor an integer denoting the number of seconds since epoch (1970-01-01 00:00:00).\nThe second argument is a boolean that determines whether the scheduled execution\ntime should be returned along with the job instances.\n\nExample\n\n.. code-block:: python\n\n    # get all jobs until 2012-11-30 10:00:00\n    list_of_job_instances = scheduler.get_jobs(until=datetime(2012, 10, 30, 10))\n\n    # get all jobs for the next hour\n    list_of_job_instances = scheduler.get_jobs(until=timedelta(hours=1))\n\n    # get all jobs with execution times\n    jobs_and_times = scheduler.get_jobs(with_times=True)\n    # returns a list of tuples:\n    # [(<rq.job.Job object at 0x123456789>, datetime.datetime(2012, 11, 25, 12, 30)), ...]\n\n------------------------------\nChecking if a job is scheduled\n------------------------------\n\nYou can check whether a specific job instance or job id is scheduled for\nexecution using the familiar python ``in`` operator\n\n.. code-block:: python\n\n    if job_instance in scheduler:\n        # Do something\n    # or\n    if job_id in scheduler:\n        # Do something\n\n---------------\nCanceling a job\n---------------\n\nTo cancel a job, simply pass a ``Job`` or a job id to ``scheduler.cancel``\n\n.. code-block:: python\n\n    scheduler.cancel(job)\n\nNote that this method returns ``None`` whether the specified job was found or not.\n\n---------------------\nRunning the scheduler\n---------------------\n\n`RQ Scheduler`_ comes with a script ``rqscheduler`` that runs a scheduler\nprocess that polls Redis once every minute and move scheduled jobs to the\nrelevant queues when they need to be executed\n\n.. code-block:: bash\n\n    # This runs a scheduler process using the default Redis connection\n    rqscheduler\n\nIf you want to use a different Redis server you could also do\n\n.. code-block:: bash\n\n    rqscheduler --host localhost --port 6379 --db 0\n\nThe script accepts these arguments:\n\n* ``-H`` or ``--host``: Redis server to connect to\n* ``-p`` or ``--port``: port to connect to\n* ``-d`` or ``--db``: Redis db to use\n* ``-P`` or ``--password``: password to connect to Redis\n* ``-b`` or ``--burst``: runs in burst mode (enqueue scheduled jobs whose execution time is in the past and quit)\n* ``-i INTERVAL`` or ``--interval INTERVAL``: How often the scheduler checks for new jobs to add to the queue (in seconds, can be floating-point for more precision).\n* ``-j`` or ``--job-class``: specify custom job class for rq to use (python module.Class)\n* ``-q`` or ``--queue-class``: specify custom queue class for rq to use (python module.Class)\n\nThe arguments pull default values from environment variables with the\nsame names but with a prefix of ``RQ_REDIS_``.\n\nRunning the Scheduler as a Service on Ubuntu\n--------------------------------------------\n\nsudo /etc/systemd/system/rqscheduler.service\n\n.. code-block:: bash\n\n    [Unit]\n    Description=RQScheduler\n    After=network.target\n\n    [Service]\n    ExecStart=/home/<<User>>/.virtualenvs/<<YourVirtualEnv>>/bin/python \\\n        /home/<<User>>/.virtualenvs/<<YourVirtualEnv>>/lib/<<YourPythonVersion>>/site-packages/rq_scheduler/scripts/rqscheduler.py\n\n    [Install]\n    WantedBy=multi-user.target\n\nYou will also want to add any command line parameters if your configuration is not localhost or not set in the environmnt variabes.\n\nStart, check Status and Enable the service\n\n.. code-block:: bash\n\n    sudo systemctl start rqscheduler.service\n    sudo systemctl status rqscheduler.service\n    sudo systemctl enable rqscheduler.service\n\n---------------------------\nRunning Multiple Schedulers\n---------------------------\n\nMultiple instances of the rq-scheduler can be run simultaneously. It allows for\n\n* Reliability (no single point of failure)\n* Failover (scheduler instances automatically retry to attain lock and schedule jobs)\n* Running scheduler on multiple server instances to make deployment identical and easier\n\nMultiple schedulers can be run in any way you want. Typically you'll only want to run one scheduler per server/instance.\n\n.. code-block:: bash\n\n   rqscheduler -i 5\n\n   # another shell/systemd service or ideally another server\n   rqscheduler -i 5\n\n   # different parameters can be provided to different schedulers\n   rqscheduler -i 10\n\n**Practical example**:\n\n- ``scheduler_a`` is running on ``ec2_instance_a``\n- If ``scheduler_a`` crashes or ``ec2_instance_a`` goes down, then our tasks won't be scheduled at all\n- Instead we can simply run 2 schedulers. Another scheduler called ``scheduler_b`` can be run on ``ec2_instance_b``\n- Now both ``scheduler_a`` and ``scheduler_b`` will periodically check and schedule the jobs\n- If one fails, the other still works\n\nYou can read more about multiple schedulers in `#212 <https://github.com/rq/rq-scheduler/pull/212>`_ and `#195 <https://github.com/rq/rq-scheduler/issues/195>`_\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rq/rq-scheduler", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rq-scheduler", "package_url": "https://pypi.org/project/rq-scheduler/", "platform": "", "project_url": "https://pypi.org/project/rq-scheduler/", "project_urls": {"Homepage": "https://github.com/rq/rq-scheduler"}, "release_url": "https://pypi.org/project/rq-scheduler/0.10.0/", "requires_dist": ["croniter (>=0.3.9)", "rq (>=0.13)"], "requires_python": "", "summary": "Provides job scheduling capabilities to RQ (Redis Queue)", "version": "0.10.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"rq-scheduler\">\n<h2>RQ Scheduler</h2>\n<p><a href=\"https://github.com/rq/rq-scheduler\" rel=\"nofollow\">RQ Scheduler</a> is a small package that\nadds job scheduling capabilities to <a href=\"https://github.com/nvie/rq\" rel=\"nofollow\">RQ</a>,\na <a href=\"http://redis.io/\" rel=\"nofollow\">Redis</a> based Python queuing library.</p>\n<a href=\"https://travis-ci.org/rq/rq-scheduler\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/rq/rq-scheduler.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37078634d390a116cdc0b1c37a7de9c2562fecf4/68747470733a2f2f7472617669732d63692e6f72672f72712f72712d7363686564756c65722e7376673f6272616e63683d6d6173746572\"></a>\n</div>\n<div id=\"support-rq-scheduler\">\n<h2>Support RQ Scheduler</h2>\n<p>If you find <tt><span class=\"pre\">rq-scheduler</span></tt> useful, please consider supporting its development via <a href=\"https://tidelift.com/subscription/pkg/pypi-rq_scheduler?utm_source=pypi-rq-scheduler&amp;utm_medium=referral&amp;utm_campaign=readme\" rel=\"nofollow\">Tidelift</a>.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://github.com/nvie/rq\" rel=\"nofollow\">RQ</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install <a href=\"https://github.com/rq/rq-scheduler\" rel=\"nofollow\">RQ Scheduler</a> via pip:</p>\n<pre>pip install rq-scheduler\n</pre>\n<p>Or you can download the latest stable package from <a href=\"http://pypi.python.org/pypi/rq-scheduler\" rel=\"nofollow\">PyPI</a>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Schedule a job involves doing two different things:</p>\n<ol>\n<li>Putting a job in the scheduler</li>\n<li>Running a scheduler that will move scheduled jobs into queues when the time comes</li>\n</ol>\n<div id=\"scheduling-a-job\">\n<h3>Scheduling a Job</h3>\n<p>There are two ways you can schedule a job. The first is using RQ Scheduler\u2019s <tt>enqueue_at</tt></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">Redis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rq</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rq_scheduler</span> <span class=\"kn\">import</span> <span class=\"n\">Scheduler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"n\">scheduler</span> <span class=\"o\">=</span> <span class=\"n\">Scheduler</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">Redis</span><span class=\"p\">())</span> <span class=\"c1\"># Get a scheduler for the \"default\" queue</span>\n<span class=\"n\">scheduler</span> <span class=\"o\">=</span> <span class=\"n\">Scheduler</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">Redis</span><span class=\"p\">())</span> <span class=\"c1\"># Get a scheduler for the \"foo\" queue</span>\n\n<span class=\"c1\"># You can also instantiate a Scheduler using an RQ Queue</span>\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">Redis</span><span class=\"p\">())</span>\n<span class=\"n\">scheduler</span> <span class=\"o\">=</span> <span class=\"n\">Scheduler</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Puts a job into the scheduler. The API is similar to RQ except that it</span>\n<span class=\"c1\"># takes a datetime object as first argument. So for example to schedule a</span>\n<span class=\"c1\"># job to run on Jan 1st 2020 we do:</span>\n<span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">enqueue_at</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">func</span><span class=\"p\">)</span> <span class=\"c1\"># Date time should be in UTC</span>\n\n<span class=\"c1\"># Here's another example scheduling a job to run at a specific date and time (in UTC),</span>\n<span class=\"c1\"># complete with args and kwargs.</span>\n<span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">enqueue_at</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"n\">baz</span><span class=\"p\">)</span>\n</pre>\n<p>The second way is using <tt>enqueue_in</tt>. Instead of taking a <tt>datetime</tt> object,\nthis method expects a <tt>timedelta</tt> and schedules the job to run at\nX seconds/minutes/hours/days/weeks later. For example, if we want to monitor how\npopular a tweet is a few times during the course of the day, we could do something like</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n\n<span class=\"c1\"># Schedule a job to run 10 minutes, 1 hour and 1 day later</span>\n<span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">enqueue_in</span><span class=\"p\">(</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">count_retweets</span><span class=\"p\">,</span> <span class=\"n\">tweet_id</span><span class=\"p\">)</span>\n<span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">enqueue_in</span><span class=\"p\">(</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">count_retweets</span><span class=\"p\">,</span> <span class=\"n\">tweet_id</span><span class=\"p\">)</span>\n<span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">enqueue_in</span><span class=\"p\">(</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">count_retweets</span><span class=\"p\">,</span> <span class=\"n\">tweet_id</span><span class=\"p\">)</span>\n</pre>\n<p><strong>IMPORTANT</strong>: You should always use UTC datetime when working with <a href=\"https://github.com/rq/rq-scheduler\" rel=\"nofollow\">RQ Scheduler</a>.</p>\n</div>\n<div id=\"periodic-repeated-jobs\">\n<h3>Periodic &amp; Repeated Jobs</h3>\n<p>As of version 0.3, <a href=\"https://github.com/rq/rq-scheduler\" rel=\"nofollow\">RQ Scheduler</a> also supports creating periodic and repeated jobs.\nYou can do this via the <tt>schedule</tt> method. Note that this feature needs\n<a href=\"https://github.com/nvie/rq\" rel=\"nofollow\">RQ</a> &gt;= 0.3.1.</p>\n<p>This is how you do it</p>\n<pre><span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">schedule</span><span class=\"p\">(</span>\n    <span class=\"n\">scheduled_time</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">(),</span> <span class=\"c1\"># Time for first execution, in UTC timezone</span>\n    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">func</span><span class=\"p\">,</span>                     <span class=\"c1\"># Function to be queued</span>\n    <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">],</span>             <span class=\"c1\"># Arguments passed into function when executed</span>\n    <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">},</span>         <span class=\"c1\"># Keyword arguments passed into function when executed</span>\n    <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">,</span>                   <span class=\"c1\"># Time before the function is called again, in seconds</span>\n    <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>                     <span class=\"c1\"># Repeat this number of times (None means repeat forever)</span>\n    <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">}</span>            <span class=\"c1\"># Arbitrary pickleable data on the job itself</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>IMPORTANT NOTE</strong>: If you set up a repeated job, you must make sure that you\neither do not set a <cite>result_ttl</cite> value or you set a value larger than the interval.\nOtherwise, the entry with the job details will expire and the job will not get re-scheduled.</p>\n</div>\n<div id=\"cron-jobs\">\n<h3>Cron Jobs</h3>\n<p>As of version 0.6.0, <a href=\"https://github.com/rq/rq-scheduler\" rel=\"nofollow\">RQ Scheduler</a> also supports creating Cron Jobs, which you can use for\nrepeated jobs to run periodically at fixed times, dates or intervals, for more info check\n<a href=\"https://en.wikipedia.org/wiki/Cron\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Cron</a>. You can do this via the <tt>cron</tt> method.</p>\n<p>This is how you do it</p>\n<pre><span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">cron</span><span class=\"p\">(</span>\n    <span class=\"n\">cron_string</span><span class=\"p\">,</span>                <span class=\"c1\"># A cron string (e.g. \"0 0 * * 0\")</span>\n    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">func</span><span class=\"p\">,</span>                  <span class=\"c1\"># Function to be queued</span>\n    <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">],</span>          <span class=\"c1\"># Arguments passed into function when executed</span>\n    <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">},</span>      <span class=\"c1\"># Keyword arguments passed into function when executed</span>\n    <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>                  <span class=\"c1\"># Repeat this number of times (None means repeat forever)</span>\n    <span class=\"n\">queue_name</span><span class=\"o\">=</span><span class=\"n\">queue_name</span><span class=\"p\">,</span>      <span class=\"c1\"># In which queue the job should be put in</span>\n    <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">},</span>        <span class=\"c1\"># Arbitrary pickleable data on the job itself</span>\n    <span class=\"n\">use_local_timezone</span><span class=\"o\">=</span><span class=\"kc\">False</span>    <span class=\"c1\"># Interpret hours in the local timezone</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"retrieving-scheduled-jobs\">\n<h3>Retrieving scheduled jobs</h3>\n<p>Sometimes you need to know which jobs have already been scheduled. You can get a\nlist of enqueued jobs with the <tt>get_jobs</tt> method</p>\n<pre><span class=\"n\">list_of_job_instances</span> <span class=\"o\">=</span> <span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">get_jobs</span><span class=\"p\">()</span>\n</pre>\n<p>In it\u2019s simplest form (as seen in the above example) this method returns a list\nof all job instances that are currently scheduled for execution.</p>\n<p>Additionally the method takes two optional keyword arguments <tt>until</tt> and\n<tt>with_times</tt>. The first one specifies up to which point in time scheduled jobs\nshould be returned. It can be given as either a datetime / timedelta instance\nor an integer denoting the number of seconds since epoch (1970-01-01 00:00:00).\nThe second argument is a boolean that determines whether the scheduled execution\ntime should be returned along with the job instances.</p>\n<p>Example</p>\n<pre><span class=\"c1\"># get all jobs until 2012-11-30 10:00:00</span>\n<span class=\"n\">list_of_job_instances</span> <span class=\"o\">=</span> <span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">get_jobs</span><span class=\"p\">(</span><span class=\"n\">until</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2012</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># get all jobs for the next hour</span>\n<span class=\"n\">list_of_job_instances</span> <span class=\"o\">=</span> <span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">get_jobs</span><span class=\"p\">(</span><span class=\"n\">until</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># get all jobs with execution times</span>\n<span class=\"n\">jobs_and_times</span> <span class=\"o\">=</span> <span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">get_jobs</span><span class=\"p\">(</span><span class=\"n\">with_times</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># returns a list of tuples:</span>\n<span class=\"c1\"># [(&lt;rq.job.Job object at 0x123456789&gt;, datetime.datetime(2012, 11, 25, 12, 30)), ...]</span>\n</pre>\n</div>\n<div id=\"checking-if-a-job-is-scheduled\">\n<h3>Checking if a job is scheduled</h3>\n<p>You can check whether a specific job instance or job id is scheduled for\nexecution using the familiar python <tt>in</tt> operator</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">job_instance</span> <span class=\"ow\">in</span> <span class=\"n\">scheduler</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Do something</span>\n<span class=\"c1\"># or</span>\n<span class=\"k\">if</span> <span class=\"n\">job_id</span> <span class=\"ow\">in</span> <span class=\"n\">scheduler</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Do something</span>\n</pre>\n</div>\n<div id=\"canceling-a-job\">\n<h3>Canceling a job</h3>\n<p>To cancel a job, simply pass a <tt>Job</tt> or a job id to <tt>scheduler.cancel</tt></p>\n<pre><span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"n\">job</span><span class=\"p\">)</span>\n</pre>\n<p>Note that this method returns <tt>None</tt> whether the specified job was found or not.</p>\n</div>\n<div id=\"running-the-scheduler\">\n<h3>Running the scheduler</h3>\n<p><a href=\"https://github.com/rq/rq-scheduler\" rel=\"nofollow\">RQ Scheduler</a> comes with a script <tt>rqscheduler</tt> that runs a scheduler\nprocess that polls Redis once every minute and move scheduled jobs to the\nrelevant queues when they need to be executed</p>\n<pre><span class=\"c1\"># This runs a scheduler process using the default Redis connection\n</span>rqscheduler\n</pre>\n<p>If you want to use a different Redis server you could also do</p>\n<pre>rqscheduler --host localhost --port <span class=\"m\">6379</span> --db <span class=\"m\">0</span>\n</pre>\n<p>The script accepts these arguments:</p>\n<ul>\n<li><tt><span class=\"pre\">-H</span></tt> or <tt><span class=\"pre\">--host</span></tt>: Redis server to connect to</li>\n<li><tt><span class=\"pre\">-p</span></tt> or <tt><span class=\"pre\">--port</span></tt>: port to connect to</li>\n<li><tt><span class=\"pre\">-d</span></tt> or <tt><span class=\"pre\">--db</span></tt>: Redis db to use</li>\n<li><tt><span class=\"pre\">-P</span></tt> or <tt><span class=\"pre\">--password</span></tt>: password to connect to Redis</li>\n<li><tt><span class=\"pre\">-b</span></tt> or <tt><span class=\"pre\">--burst</span></tt>: runs in burst mode (enqueue scheduled jobs whose execution time is in the past and quit)</li>\n<li><tt><span class=\"pre\">-i</span> INTERVAL</tt> or <tt><span class=\"pre\">--interval</span> INTERVAL</tt>: How often the scheduler checks for new jobs to add to the queue (in seconds, can be floating-point for more precision).</li>\n<li><tt><span class=\"pre\">-j</span></tt> or <tt><span class=\"pre\">--job-class</span></tt>: specify custom job class for rq to use (python module.Class)</li>\n<li><tt><span class=\"pre\">-q</span></tt> or <tt><span class=\"pre\">--queue-class</span></tt>: specify custom queue class for rq to use (python module.Class)</li>\n</ul>\n<p>The arguments pull default values from environment variables with the\nsame names but with a prefix of <tt>RQ_REDIS_</tt>.</p>\n<div id=\"running-the-scheduler-as-a-service-on-ubuntu\">\n<h4>Running the Scheduler as a Service on Ubuntu</h4>\n<p>sudo /etc/systemd/system/rqscheduler.service</p>\n<pre><span class=\"o\">[</span>Unit<span class=\"o\">]</span>\n<span class=\"nv\">Description</span><span class=\"o\">=</span>RQScheduler\n<span class=\"nv\">After</span><span class=\"o\">=</span>network.target\n\n<span class=\"o\">[</span>Service<span class=\"o\">]</span>\n<span class=\"nv\">ExecStart</span><span class=\"o\">=</span>/home/<span class=\"s\">&lt;&lt;User&gt;&gt;/.virtualenvs/&lt;&lt;YourVirtualEnv&gt;&gt;/bin/python \\\n    /home/&lt;&lt;User</span>&gt;&gt;/.virtualenvs/<span class=\"s\">&lt;&lt;YourVirtualEnv&gt;&gt;/lib/&lt;&lt;Your</span>PythonVersion&gt;&gt;/site-packages/rq_scheduler/scripts/rqscheduler.py\n\n<span class=\"o\">[</span>Install<span class=\"o\">]</span>\n<span class=\"nv\">WantedBy</span><span class=\"o\">=</span>multi-user.target\n</pre>\n<p>You will also want to add any command line parameters if your configuration is not localhost or not set in the environmnt variabes.</p>\n<p>Start, check Status and Enable the service</p>\n<pre>sudo systemctl start rqscheduler.service\nsudo systemctl status rqscheduler.service\nsudo systemctl <span class=\"nb\">enable</span> rqscheduler.service\n</pre>\n</div>\n</div>\n<div id=\"running-multiple-schedulers\">\n<h3>Running Multiple Schedulers</h3>\n<p>Multiple instances of the rq-scheduler can be run simultaneously. It allows for</p>\n<ul>\n<li>Reliability (no single point of failure)</li>\n<li>Failover (scheduler instances automatically retry to attain lock and schedule jobs)</li>\n<li>Running scheduler on multiple server instances to make deployment identical and easier</li>\n</ul>\n<p>Multiple schedulers can be run in any way you want. Typically you\u2019ll only want to run one scheduler per server/instance.</p>\n<pre>rqscheduler -i <span class=\"m\">5</span>\n\n<span class=\"c1\"># another shell/systemd service or ideally another server\n</span>rqscheduler -i <span class=\"m\">5</span>\n\n<span class=\"c1\"># different parameters can be provided to different schedulers\n</span>rqscheduler -i <span class=\"m\">10</span>\n</pre>\n<p><strong>Practical example</strong>:</p>\n<ul>\n<li><tt>scheduler_a</tt> is running on <tt>ec2_instance_a</tt></li>\n<li>If <tt>scheduler_a</tt> crashes or <tt>ec2_instance_a</tt> goes down, then our tasks won\u2019t be scheduled at all</li>\n<li>Instead we can simply run 2 schedulers. Another scheduler called <tt>scheduler_b</tt> can be run on <tt>ec2_instance_b</tt></li>\n<li>Now both <tt>scheduler_a</tt> and <tt>scheduler_b</tt> will periodically check and schedule the jobs</li>\n<li>If one fails, the other still works</li>\n</ul>\n<p>You can read more about multiple schedulers in <a href=\"https://github.com/rq/rq-scheduler/pull/212\" rel=\"nofollow\">#212</a> and <a href=\"https://github.com/rq/rq-scheduler/issues/195\" rel=\"nofollow\">#195</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7116234, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2646bdd3514b8dfa0204e99c9946ce34", "sha256": "71dfe58dbe2f5dc6df831b1514b2a71904b98bdf2e7ec38bfc1e2a3e4fecb723"}, "downloads": -1, "filename": "rq-scheduler-0.1.tar.gz", "has_sig": false, "md5_digest": "2646bdd3514b8dfa0204e99c9946ce34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4593, "upload_time": "2012-06-17T05:43:37", "upload_time_iso_8601": "2012-06-17T05:43:37.093597Z", "url": "https://files.pythonhosted.org/packages/34/47/9d3854eccd338155388d5c64b99036335afa6a9ab4b199ed58a0d0e4392a/rq-scheduler-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "60039b8bc6ef1032ac4859b8f2f333db", "sha256": "9efc7628f9b3adb1b80f243c64d68c4068bd07c2715de078d751892a601ec378"}, "downloads": -1, "filename": "rq-scheduler-0.1.1.tar.gz", "has_sig": false, "md5_digest": "60039b8bc6ef1032ac4859b8f2f333db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4802, "upload_time": "2012-06-17T10:35:23", "upload_time_iso_8601": "2012-06-17T10:35:23.291339Z", "url": "https://files.pythonhosted.org/packages/90/0c/166d38a8e76a36a020a9b0c64b3bf3a28239cf2961f993a4259b3d553cc2/rq-scheduler-0.1.1.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "ed9517a2fa0928d6699446befda43345", "sha256": "f19486671473eba42095163f2ae829d5dcb046dde01628233871ee830c1c3c2e"}, "downloads": -1, "filename": "rq_scheduler-0.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed9517a2fa0928d6699446befda43345", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12405, "upload_time": "2020-04-28T00:54:31", "upload_time_iso_8601": "2020-04-28T00:54:31.563944Z", "url": "https://files.pythonhosted.org/packages/d7/b1/fb1f503574a9bf7f5e36cfc62f79318f6763b66c6cb0c19617c244913bda/rq_scheduler-0.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec969f5542fcab371d3d2ef972eca70f", "sha256": "de2e2754a05549dadbe7422d2d1fa5ad0c1d556280515af9c3b9c1eba0db5ddb"}, "downloads": -1, "filename": "rq-scheduler-0.10.0.tar.gz", "has_sig": false, "md5_digest": "ec969f5542fcab371d3d2ef972eca70f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12504, "upload_time": "2020-04-28T00:54:33", "upload_time_iso_8601": "2020-04-28T00:54:33.751106Z", "url": "https://files.pythonhosted.org/packages/bb/5c/d5886cc55b7b0b9ca9be6f7fd85b0cbb1670948487f2bbd1daab162c7c67/rq-scheduler-0.10.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a5be94260a40504bfdd29438c13b3081", "sha256": "ff08d9007aed9f726215a0c8e13baba64a3ad03d018ab59a2a5fa7dda9860df4"}, "downloads": -1, "filename": "rq-scheduler-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a5be94260a40504bfdd29438c13b3081", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5405, "upload_time": "2012-06-17T12:11:08", "upload_time_iso_8601": "2012-06-17T12:11:08.619654Z", "url": "https://files.pythonhosted.org/packages/27/8c/b304db373427badcdfe613fa8e88a963cfc1c01213b4b6cadda9bcf55523/rq-scheduler-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "cd765bb2e282c306942bfab617b59853", "sha256": "846330204a51f6fc1825ff871b3a677da5f978ec31f7dd79ac51e0d1a7a50888"}, "downloads": -1, "filename": "rq-scheduler-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cd765bb2e282c306942bfab617b59853", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7057, "upload_time": "2012-07-20T09:31:27", "upload_time_iso_8601": "2012-07-20T09:31:27.347900Z", "url": "https://files.pythonhosted.org/packages/90/e0/9bb12249cc36fd5de536cb6e41da5b29f42be50c9061aad022cc6e98b3d0/rq-scheduler-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "8fde1990d755af17c16b6c2fbfe9cd85", "sha256": "d72c1b8a7f3423fc409f23431ef2296663f2a2fd4477cb52e65fb2cca8b004b8"}, "downloads": -1, "filename": "rq-scheduler-0.3.1.tar.gz", "has_sig": false, "md5_digest": "8fde1990d755af17c16b6c2fbfe9cd85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6765, "upload_time": "2012-08-06T04:12:47", "upload_time_iso_8601": "2012-08-06T04:12:47.300708Z", "url": "https://files.pythonhosted.org/packages/94/95/a1febaad2184e287dc90dd9e828893ccd43e4581f0bb3aa41bb6bb280e80/rq-scheduler-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "b4018406dafdf1d70a84a1c894474271", "sha256": "0a8f5408f29e8b28a11934eb2e05b575d5137240c491c0cefab7e6b10fd6dca1"}, "downloads": -1, "filename": "rq-scheduler-0.3.2.tar.gz", "has_sig": false, "md5_digest": "b4018406dafdf1d70a84a1c894474271", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6844, "upload_time": "2012-09-02T09:39:23", "upload_time_iso_8601": "2012-09-02T09:39:23.346728Z", "url": "https://files.pythonhosted.org/packages/4d/c4/f657ece22755108f76ca0c9c8604a85b8d74afb2fb24b1436e9a54a95acb/rq-scheduler-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "429b46429bfa93254fe4febade027bf8", "sha256": "a3d9c7e2c60c14004fd2b7b77a73af7cfea6554b51da400d1b37e72f174feb4b"}, "downloads": -1, "filename": "rq-scheduler-0.3.3.tar.gz", "has_sig": false, "md5_digest": "429b46429bfa93254fe4febade027bf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9099, "upload_time": "2012-11-25T09:58:39", "upload_time_iso_8601": "2012-11-25T09:58:39.114732Z", "url": "https://files.pythonhosted.org/packages/c8/d8/7044a7f364f07370ae5f0d8bb2d250098ef3b393451ad6db9529677b0d2d/rq-scheduler-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "e297bf4ba6e2b2a6b37cefb784742e36", "sha256": "4fdb5830798b0d70b94370471926176173e0027c283b6a88427e769efa87657e"}, "downloads": -1, "filename": "rq-scheduler-0.3.4.tar.gz", "has_sig": false, "md5_digest": "e297bf4ba6e2b2a6b37cefb784742e36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9192, "upload_time": "2013-01-30T12:30:01", "upload_time_iso_8601": "2013-01-30T12:30:01.000617Z", "url": "https://files.pythonhosted.org/packages/50/68/6b7a22eaebc23438bba9d7c5cdab1cbc96379cfa55f61fdb7a904a07f9b9/rq-scheduler-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "55d294ab353aad4253f1ae2e1c807cab", "sha256": "9dc75c9d7ad9b946e1399fbe0c3bc99cb4cb0930791bb4256819bfa4d842cd5b"}, "downloads": -1, "filename": "rq-scheduler-0.3.5.tar.gz", "has_sig": false, "md5_digest": "55d294ab353aad4253f1ae2e1c807cab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9178, "upload_time": "2013-02-07T10:15:48", "upload_time_iso_8601": "2013-02-07T10:15:48.776689Z", "url": "https://files.pythonhosted.org/packages/7a/c6/497bea138cb80d4dc705ca69e5622681f40508f0682cefe93035070d9338/rq-scheduler-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "26c0d7f5804b5dd8c587730b095141e9", "sha256": "f5a20d06a461d062e0529d651cf7225ff88833ac98f8b694ca1b54680617af41"}, "downloads": -1, "filename": "rq-scheduler-0.3.6.tar.gz", "has_sig": false, "md5_digest": "26c0d7f5804b5dd8c587730b095141e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9398, "upload_time": "2013-03-06T11:42:13", "upload_time_iso_8601": "2013-03-06T11:42:13.569101Z", "url": "https://files.pythonhosted.org/packages/f0/ab/6de940027303a2c7e9cba50999755f4ee47a872802a08f22f8c5232a3b85/rq-scheduler-0.3.6.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "86405ef58cd3a82f5bdc4ce6fb9b2340", "sha256": "6a76656228d6a6ccb02145af5d42442c30443215dcb54d387b85c542ca7eb863"}, "downloads": -1, "filename": "rq_scheduler-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "86405ef58cd3a82f5bdc4ce6fb9b2340", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 12492, "upload_time": "2013-11-17T04:44:57", "upload_time_iso_8601": "2013-11-17T04:44:57.849399Z", "url": "https://files.pythonhosted.org/packages/b1/e3/76a5d82f92739d09008b480aa6bac45e51766c9eb4a298aec1d651d09ab6/rq_scheduler-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc310c49f4e0276c2378edbc17cf0eda", "sha256": "365562d0acb404f2a4bcfca30b03911fea5e1018558868a8733432616ff219c1"}, "downloads": -1, "filename": "rq-scheduler-0.4.0.tar.gz", "has_sig": false, "md5_digest": "dc310c49f4e0276c2378edbc17cf0eda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9694, "upload_time": "2013-11-17T04:31:37", "upload_time_iso_8601": "2013-11-17T04:31:37.735840Z", "url": "https://files.pythonhosted.org/packages/5e/6e/437789cde7fe0fb709c099b91fb6030ab86af2c1b76b2e9694034c45e69a/rq-scheduler-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "eb25011406e7001f3667a7d8c2f1a00d", "sha256": "d2096365fc8bd5d9e3065d9eea888c7ef75bf7d6b9ddee0469c0d100b8dc2a36"}, "downloads": -1, "filename": "rq-scheduler-0.5.0.tar.gz", "has_sig": false, "md5_digest": "eb25011406e7001f3667a7d8c2f1a00d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10545, "upload_time": "2014-04-04T09:44:54", "upload_time_iso_8601": "2014-04-04T09:44:54.275457Z", "url": "https://files.pythonhosted.org/packages/4a/0e/5b7d9460be830af0a3e99c337b7198b3a677417e03c68497e15775fca13a/rq-scheduler-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "e4e1d68700536627ecfac44e98c9d4d0", "sha256": "afb428037b561c2f786a64ca035d975061752cc5511ccaeaeb426696c4b5f0b3"}, "downloads": -1, "filename": "rq_scheduler-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e4e1d68700536627ecfac44e98c9d4d0", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13515, "upload_time": "2015-02-17T09:11:11", "upload_time_iso_8601": "2015-02-17T09:11:11.674488Z", "url": "https://files.pythonhosted.org/packages/32/4a/0cdbfa665b4d776106706e962e1118afcb26716704bc82d6fb19954427f1/rq_scheduler-0.5.1-py2.py3-none-any.whl", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "f2dee1497e7a53b6274dd3036f905c73", "sha256": "c534ec83a27d16c5b06d375ca9865c742a214a82a6a1d0c9de59687eaddcb843"}, "downloads": -1, "filename": "rq_scheduler-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f2dee1497e7a53b6274dd3036f905c73", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 14928, "upload_time": "2016-03-14T11:55:58", "upload_time_iso_8601": "2016-03-14T11:55:58.678130Z", "url": "https://files.pythonhosted.org/packages/c2/f8/20bffa6f82d62f91250d9de2a7f71cded36d3b8258e2b21da21946f64a5d/rq_scheduler-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc5c0cfae2defabd7f722c5627185c9e", "sha256": "60d1e0a87c2ebe44ac88abe67b37300d800937b70b21353572e2b9026e5bed36"}, "downloads": -1, "filename": "rq-scheduler-0.6.0.tar.gz", "has_sig": false, "md5_digest": "fc5c0cfae2defabd7f722c5627185c9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13855, "upload_time": "2016-03-14T11:55:49", "upload_time_iso_8601": "2016-03-14T11:55:49.919905Z", "url": "https://files.pythonhosted.org/packages/f9/ca/147e4a3a070760730362b3570ae85b39d6406b9b5565f657e6dc774471d6/rq-scheduler-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "240b77e42390bcb70ca09aec4216bd60", "sha256": "12880fcbbb4bd426916f7fea8c6af4fb4bd707dfeb77f2790c9372250b21161d"}, "downloads": -1, "filename": "rq_scheduler-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "240b77e42390bcb70ca09aec4216bd60", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 15273, "upload_time": "2016-05-06T04:21:01", "upload_time_iso_8601": "2016-05-06T04:21:01.564435Z", "url": "https://files.pythonhosted.org/packages/46/e7/a11c9cb3756d5096e926d9e4fa69b4d93a11cb9a2421ed287323b4c173c4/rq_scheduler-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b793da7d9f1d4cf8402688abbd5f81e", "sha256": "e889bcf111361bf21d5093920a00d35a49c8e42a3e33281951bd11b5348e6ffd"}, "downloads": -1, "filename": "rq-scheduler-0.6.1.tar.gz", "has_sig": false, "md5_digest": "6b793da7d9f1d4cf8402688abbd5f81e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14159, "upload_time": "2016-05-06T04:20:51", "upload_time_iso_8601": "2016-05-06T04:20:51.849039Z", "url": "https://files.pythonhosted.org/packages/a7/bd/94595478355e92f32ccbf4a38a17094d8a3daf668c3daf39099220b3f7f9/rq-scheduler-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "6e21700e7aba9d84db9dda29a1d29380", "sha256": "ae609515d408ebd33e7869fa0abe97ddb203b6ada0d6591531dbc9c4f0f8ac3c"}, "downloads": -1, "filename": "rq_scheduler-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6e21700e7aba9d84db9dda29a1d29380", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 15579, "upload_time": "2016-07-24T11:45:23", "upload_time_iso_8601": "2016-07-24T11:45:23.380108Z", "url": "https://files.pythonhosted.org/packages/b7/52/0cbe6c529d5b079f54e2f1fa32a15bd9fbcb6e0c32d98f7ea9cbbda98a50/rq_scheduler-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7aa83aae7adcfdf22b3f225f9277e09e", "sha256": "c09048a3b64dedc12e16d08f441f093618a959c46f0f2f439897752c70a7f104"}, "downloads": -1, "filename": "rq-scheduler-0.7.0.tar.gz", "has_sig": false, "md5_digest": "7aa83aae7adcfdf22b3f225f9277e09e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14455, "upload_time": "2016-07-24T11:45:18", "upload_time_iso_8601": "2016-07-24T11:45:18.840488Z", "url": "https://files.pythonhosted.org/packages/fb/85/f777fe3a7e5b22e4c15c820c6bb1fb4b923e22f557fbd57b72847995414e/rq-scheduler-0.7.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "40568c3a53d63ef80042f81be3884c43", "sha256": "cfbfda7415a5af5642ed934c22453713198e00ab730cdd277992f83829a9aa60"}, "downloads": -1, "filename": "rq_scheduler-0.8.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "40568c3a53d63ef80042f81be3884c43", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 14789, "upload_time": "2018-02-04T11:25:41", "upload_time_iso_8601": "2018-02-04T11:25:41.907615Z", "url": "https://files.pythonhosted.org/packages/4a/30/6e1d174fe4f898317c29cfaa8770e18ac050a66475c1281b268d143bcff4/rq_scheduler-0.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c846be9efbf97701e23725faea5c5e9", "sha256": "0a7b1ac5bf70b48a59f7b28a47114e85143c3cea4e05b89921038acf1971f6d1"}, "downloads": -1, "filename": "rq-scheduler-0.8.1.tar.gz", "has_sig": false, "md5_digest": "8c846be9efbf97701e23725faea5c5e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10813, "upload_time": "2018-02-04T11:25:37", "upload_time_iso_8601": "2018-02-04T11:25:37.624809Z", "url": "https://files.pythonhosted.org/packages/5a/a7/dd03f14b991e4a1a6fdae6827a57ea7b02991d01d3d601f5aa738bc4e29a/rq-scheduler-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "1078fee821017d4f2ef31dd052427ee5", "sha256": "fe71cc657942605d44a1e8c4c8bf326c9dd907d4b2788fc8e48f7d89314645d6"}, "downloads": -1, "filename": "rq_scheduler-0.8.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1078fee821017d4f2ef31dd052427ee5", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 14789, "upload_time": "2018-03-02T07:47:11", "upload_time_iso_8601": "2018-03-02T07:47:11.556967Z", "url": "https://files.pythonhosted.org/packages/5f/e5/f07a6550ee0ff994d5ed762f1039d8f6be6fccb1bac52fffc39a50b712e6/rq_scheduler-0.8.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5116efc66060fc85bc7618a002d26e84", "sha256": "2bec9a04321d9f873480660d49a2fa09041a5d6fd7348dd267cd1c26c023dca3"}, "downloads": -1, "filename": "rq-scheduler-0.8.2.tar.gz", "has_sig": false, "md5_digest": "5116efc66060fc85bc7618a002d26e84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10823, "upload_time": "2018-03-02T07:47:08", "upload_time_iso_8601": "2018-03-02T07:47:08.746178Z", "url": "https://files.pythonhosted.org/packages/3b/db/07969cf85cc17b7845c57f1e1597e187c8334fe86c5bbf77c46e782f5fe4/rq-scheduler-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "a40b86867960ccae8602c93aee2a2a8c", "sha256": "6cad6b6d29eae55d4585e2ac9be3b8a36b3f18c87a494fc508a4fa19b9c845d6"}, "downloads": -1, "filename": "rq_scheduler-0.8.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a40b86867960ccae8602c93aee2a2a8c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 14795, "upload_time": "2018-05-16T23:23:15", "upload_time_iso_8601": "2018-05-16T23:23:15.966470Z", "url": "https://files.pythonhosted.org/packages/3f/ae/afc91dbc5cd90d85ec2f787d45eda1a4c602b64aa9860891ab5c7dcd426e/rq_scheduler-0.8.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b10803a998097f0c5c7d6e390e75151e", "sha256": "fc51da3d4ad1a047cada3b97a96afea21a3102ea5aa5b79ed2ea97d8ffdf8821"}, "downloads": -1, "filename": "rq-scheduler-0.8.3.tar.gz", "has_sig": false, "md5_digest": "b10803a998097f0c5c7d6e390e75151e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10828, "upload_time": "2018-05-16T23:23:11", "upload_time_iso_8601": "2018-05-16T23:23:11.516951Z", "url": "https://files.pythonhosted.org/packages/0e/48/20eb776ecce4fff8ecb9344c441ce4e5180688b01ca2a4979c7414d1ddf9/rq-scheduler-0.8.3.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "1de592a8f8d2658285be207116341781", "sha256": "90eb3915e31cc2032c301e5ab1fd5ad6f23d9500435046995e009f098e18efbe"}, "downloads": -1, "filename": "rq_scheduler-0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1de592a8f8d2658285be207116341781", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15409, "upload_time": "2018-12-11T23:16:04", "upload_time_iso_8601": "2018-12-11T23:16:04.425068Z", "url": "https://files.pythonhosted.org/packages/da/97/0180f3c327b2102cf1cfd32a248e6496478c8bd1619a78218aac0db46844/rq_scheduler-0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f2fc1e69fc8c7e6f78d938d73127654", "sha256": "ff7d45b34a8a39c9c83634f642aeef950641c75c4eeea3fa140bf574bfc6aca2"}, "downloads": -1, "filename": "rq-scheduler-0.9.tar.gz", "has_sig": false, "md5_digest": "3f2fc1e69fc8c7e6f78d938d73127654", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11235, "upload_time": "2018-12-11T23:16:06", "upload_time_iso_8601": "2018-12-11T23:16:06.465790Z", "url": "https://files.pythonhosted.org/packages/84/70/24126f656da4e2845bd6ee09f7d149891ba64ec587e9b5f26109613e10f8/rq-scheduler-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "06bcc6e52dcbd38d9e60ebebd7ecb596", "sha256": "9f9f68d0a4749c83f023d903e148b81da2191229e25ac644a9ff9d6eac31bff4"}, "downloads": -1, "filename": "rq_scheduler-0.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "06bcc6e52dcbd38d9e60ebebd7ecb596", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11403, "upload_time": "2019-10-08T03:25:20", "upload_time_iso_8601": "2019-10-08T03:25:20.343703Z", "url": "https://files.pythonhosted.org/packages/d8/03/b3f4da874e64965a37993ca911638c891a2b473173af186e58a8306c1879/rq_scheduler-0.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2669b9e94fd81cbd8f58696428f8080", "sha256": "06038a42d33d653f89d534ba3bb95694b9d82b39fdd17c6ac6d9bf77d1acdefb"}, "downloads": -1, "filename": "rq-scheduler-0.9.1.tar.gz", "has_sig": false, "md5_digest": "e2669b9e94fd81cbd8f58696428f8080", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11410, "upload_time": "2019-10-08T03:25:23", "upload_time_iso_8601": "2019-10-08T03:25:23.034781Z", "url": "https://files.pythonhosted.org/packages/8e/b5/35911786cb91411a2b7984288ce9eb7435ff66a693ab35601aa550826298/rq-scheduler-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed9517a2fa0928d6699446befda43345", "sha256": "f19486671473eba42095163f2ae829d5dcb046dde01628233871ee830c1c3c2e"}, "downloads": -1, "filename": "rq_scheduler-0.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed9517a2fa0928d6699446befda43345", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12405, "upload_time": "2020-04-28T00:54:31", "upload_time_iso_8601": "2020-04-28T00:54:31.563944Z", "url": "https://files.pythonhosted.org/packages/d7/b1/fb1f503574a9bf7f5e36cfc62f79318f6763b66c6cb0c19617c244913bda/rq_scheduler-0.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec969f5542fcab371d3d2ef972eca70f", "sha256": "de2e2754a05549dadbe7422d2d1fa5ad0c1d556280515af9c3b9c1eba0db5ddb"}, "downloads": -1, "filename": "rq-scheduler-0.10.0.tar.gz", "has_sig": false, "md5_digest": "ec969f5542fcab371d3d2ef972eca70f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12504, "upload_time": "2020-04-28T00:54:33", "upload_time_iso_8601": "2020-04-28T00:54:33.751106Z", "url": "https://files.pythonhosted.org/packages/bb/5c/d5886cc55b7b0b9ca9be6f7fd85b0cbb1670948487f2bbd1daab162c7c67/rq-scheduler-0.10.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:46 2020"}