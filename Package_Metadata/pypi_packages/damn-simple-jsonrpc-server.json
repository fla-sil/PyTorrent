{"info": {"author": "Marcin Nowak", "author_email": "marcin.j.nowak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# JSON-RPC Server for Python\n\nThis is damn simple, framework-agnostic JSON-RPC v2.0 server for Python.\n\n**This package has no dependencies.**\nYou can build service API without thinking about any framework nor toolkit, and even without thinking about HTTP itself.\nThis package is an implementation of JSON-RPC protocol only, following rules described on http://www.jsonrpc.org/specification\n\n## What is JSON-RPC?\n\nJSON-RPC is a protocor similar to XML-RPC, but simpler and very lightweight.\nThere is no necessary to generate nor parse XML documents by using heavy librariers. \n\nYou can build easily remote services and call them using clients implemented in many languages.\nJSON-RPC services are always exposed using HTTP(S) protocol.\n\nFor more information please read JSON-RPC v2.0 specification: http://www.jsonrpc.org/specification\n\n## Getting started\n\n### Installation\n\nUse `setuptools` or `pip`:\n\n```\neasy_install damn-simple-jsonrpc-server\n```\n\nor\n\n```\npip install damn-simple-jsonrpc-server\n```\n\n### Calculator service example\n\nLet's make calculator service which supports `add` and `subtract` operations. \n\n(calculator_service.py)\n```python\n\nimport jsonrpcserver as rpc\n\ncalculator = rpc.Service()\n\n@calculator.method\ndef add(x, y):\n    return x+y\n\n@calculator.method('subtract')\ndef sub(x, y):\n    return x-y\n\n```\n\nWell... it's done. But where it is accessible? Nowhere! \nYou can access it directly by `calculator` variable, but this is nonsense.\nThis is an API for HTTP adapters, but not for humans.\n\n\n### Exposing JSON-RPC service via HTTP\n\nSimplest way to expose `calculator` service is to use well-known HTTP framework.\nIt may be a Django, for example:\n\n(urls.py)\n```python\n\nfrom django.conf.urls import patterns, include, url\nfrom .calculator_service import calculator\n\ndef calculator_service_view(request):\n    return calculator.handle_request_body(request.body)\n\nurlpatterns = patterns('',\n        url(r'^$', calculator_service_view, name='calculator'),\n)\n```\n\nBut there is a simpler way! :)\n\n\n#### Using existing adaptors\n\nIf you need quickly expose your service using Django, just use [damn simple JSON-RPC Django adaptor](https://pypi.python.org/pypi/damn-simple-jsonrpc-server-django),\nwhich contains ready to use adaptor:\n\n(urls.py)\n```python\nfrom django.conf.urls import patterns, include, url\nfrom calculator_service import calculator\n\nurlpatterns = patterns('',\n        url(r'^$', 'jsonrpcdjango.serve', kwargs={'service': calculator},\n            name='calculator'),\n)\n```\n\nThat's all. Nothing more, nothing less!\n\n\n### Writing custom adaptors\n\nJSON-RPC `Service` class has very simple API based on str/unicode or request-like object.\nYou may use one of the following methods available in `Service` class:\n  - `handle_request_body`\n  - `handle_http_request`\n\nThe `handle_request_body` method expects that input string will be a representation of a JSON-RPC Request object. \n\nThe `handle_http_request` method expects that request-like object will be passed as an argument. \nIn that case request-like object **must** contain `body` attribute with string representation \nof JSON-RPC request.\n\nReturn value of `handle_request_body` and `handle_http_request` is always a str/unicode\nwith a JSON-RPC Response object representation (success and error responses are returned\nsame way, as described in http://www.jsonrpc.org/specification, but will contain `result`\nand `error` keys respectively).\n\n\n## Authentication, CSRF, other stuff...\n\nAuthentication and CSRF are HTTP-related topics. \nYou may implement them in adaptors or just use tools from your favourite HTTP framework.\nFor Django framework you may simply decorate whole service:\n\n(urls.py)\n```python\nimport jsonrpcdjango as rpc\n\n[...]\n\nurlpatterns = patterns('',\n        url(r'^$', login_required(rpc.serve), kwargs={'service': calculator},\n            name='calculator'),\n```\n\nTo enable or disable CSRF just use specific adaptor:\n  - `jsonrpcdjango.serve` for CSRF-less handler\n  - `jsonrpcdjango.csrf_serve` for CSRF-protected handler\n  - or use disrectly Django's decorators `csrf_exempt`, `csrf_protect` or enable `CsrfViewMiddleware` (read https://docs.djangoproject.com/en/dev/ref/csrf/ for details) \n\n*Currently there is no possibility to decorate specific methods of the service with `jsonrpcdjango` adaptor.*\n\n## Authorization\n\nIf you want add authorization to your method you should use similar solution as for authentication. \nFor Django framework you may simply decorate whole service:\n\n(urls.py)\n```python\nimport jsonrpcdjango as rpc\n\n[...]\n\nurlpatterns = patterns('',\n        url(r'^$', permission_required('can_use_rpc')(rpc.serve), kwargs={'service': calculator},\n            name='calculator'),\n```\n\n*Currently there is no possibility to decorate specific methods of the service with `jsonrpcdjango` adaptor.*\n\n## Accessing original HTTP request inside service methods\n\nSometimes you may need access to specific request data added somewhere\nin middleware stack. In that case you can register JSON-RPC method with\nadditional argument `takes_http_request=True`. Original `request` object\nwill be passed as first argument.\n\nIf you're using Django as an HTTP framework and `jsonrpcdjango` adaptor,\nyou can provide access to Django's `HttpRequest` object inside service method\nwithout any hacks. Just declare `takes_http_request=True` at registering\ntime. This will make your service dependend on Django, but will add more flexibility.\n\n\n(calculator_service.py)\n```python\n\ncalculator = rpc.Service()\n\n[...]\n\n@calculator.method(takes_http_request=True)\ndef beast_add(request, x, y):\n    if request.user.is_superuser:\n        return x+y\n    else:\n        return 666\n\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marcinn/json-rpc-server", "keywords": "web json rpc python server", "license": "", "maintainer": "", "maintainer_email": "", "name": "damn-simple-jsonrpc-server", "package_url": "https://pypi.org/project/damn-simple-jsonrpc-server/", "platform": "", "project_url": "https://pypi.org/project/damn-simple-jsonrpc-server/", "project_urls": {"Homepage": "https://github.com/marcinn/json-rpc-server"}, "release_url": "https://pypi.org/project/damn-simple-jsonrpc-server/0.4.4.post1/", "requires_dist": null, "requires_python": "", "summary": "Damn simple, framework-agnostic JSON-RPC server", "version": "0.4.4.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>JSON-RPC Server for Python</h1>\n<p>This is damn simple, framework-agnostic JSON-RPC v2.0 server for Python.</p>\n<p><strong>This package has no dependencies.</strong>\nYou can build service API without thinking about any framework nor toolkit, and even without thinking about HTTP itself.\nThis package is an implementation of JSON-RPC protocol only, following rules described on <a href=\"http://www.jsonrpc.org/specification\" rel=\"nofollow\">http://www.jsonrpc.org/specification</a></p>\n<h2>What is JSON-RPC?</h2>\n<p>JSON-RPC is a protocor similar to XML-RPC, but simpler and very lightweight.\nThere is no necessary to generate nor parse XML documents by using heavy librariers.</p>\n<p>You can build easily remote services and call them using clients implemented in many languages.\nJSON-RPC services are always exposed using HTTP(S) protocol.</p>\n<p>For more information please read JSON-RPC v2.0 specification: <a href=\"http://www.jsonrpc.org/specification\" rel=\"nofollow\">http://www.jsonrpc.org/specification</a></p>\n<h2>Getting started</h2>\n<h3>Installation</h3>\n<p>Use <code>setuptools</code> or <code>pip</code>:</p>\n<pre><code>easy_install damn-simple-jsonrpc-server\n</code></pre>\n<p>or</p>\n<pre><code>pip install damn-simple-jsonrpc-server\n</code></pre>\n<h3>Calculator service example</h3>\n<p>Let's make calculator service which supports <code>add</code> and <code>subtract</code> operations.</p>\n<p>(calculator_service.py)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jsonrpcserver</span> <span class=\"k\">as</span> <span class=\"nn\">rpc</span>\n\n<span class=\"n\">calculator</span> <span class=\"o\">=</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">Service</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@calculator</span><span class=\"o\">.</span><span class=\"n\">method</span>\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span>\n\n<span class=\"nd\">@calculator</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">(</span><span class=\"s1\">'subtract'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">-</span><span class=\"n\">y</span>\n</pre>\n<p>Well... it's done. But where it is accessible? Nowhere!\nYou can access it directly by <code>calculator</code> variable, but this is nonsense.\nThis is an API for HTTP adapters, but not for humans.</p>\n<h3>Exposing JSON-RPC service via HTTP</h3>\n<p>Simplest way to expose <code>calculator</code> service is to use well-known HTTP framework.\nIt may be a Django, for example:</p>\n<p>(urls.py)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">patterns</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.calculator_service</span> <span class=\"kn\">import</span> <span class=\"n\">calculator</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">calculator_service_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">calculator</span><span class=\"o\">.</span><span class=\"n\">handle_request_body</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^$'</span><span class=\"p\">,</span> <span class=\"n\">calculator_service_view</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'calculator'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>But there is a simpler way! :)</p>\n<h4>Using existing adaptors</h4>\n<p>If you need quickly expose your service using Django, just use <a href=\"https://pypi.python.org/pypi/damn-simple-jsonrpc-server-django\" rel=\"nofollow\">damn simple JSON-RPC Django adaptor</a>,\nwhich contains ready to use adaptor:</p>\n<p>(urls.py)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">patterns</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">calculator_service</span> <span class=\"kn\">import</span> <span class=\"n\">calculator</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^$'</span><span class=\"p\">,</span> <span class=\"s1\">'jsonrpcdjango.serve'</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'service'</span><span class=\"p\">:</span> <span class=\"n\">calculator</span><span class=\"p\">},</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'calculator'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>That's all. Nothing more, nothing less!</p>\n<h3>Writing custom adaptors</h3>\n<p>JSON-RPC <code>Service</code> class has very simple API based on str/unicode or request-like object.\nYou may use one of the following methods available in <code>Service</code> class:</p>\n<ul>\n<li><code>handle_request_body</code></li>\n<li><code>handle_http_request</code></li>\n</ul>\n<p>The <code>handle_request_body</code> method expects that input string will be a representation of a JSON-RPC Request object.</p>\n<p>The <code>handle_http_request</code> method expects that request-like object will be passed as an argument.\nIn that case request-like object <strong>must</strong> contain <code>body</code> attribute with string representation\nof JSON-RPC request.</p>\n<p>Return value of <code>handle_request_body</code> and <code>handle_http_request</code> is always a str/unicode\nwith a JSON-RPC Response object representation (success and error responses are returned\nsame way, as described in <a href=\"http://www.jsonrpc.org/specification\" rel=\"nofollow\">http://www.jsonrpc.org/specification</a>, but will contain <code>result</code>\nand <code>error</code> keys respectively).</p>\n<h2>Authentication, CSRF, other stuff...</h2>\n<p>Authentication and CSRF are HTTP-related topics.\nYou may implement them in adaptors or just use tools from your favourite HTTP framework.\nFor Django framework you may simply decorate whole service:</p>\n<p>(urls.py)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jsonrpcdjango</span> <span class=\"k\">as</span> <span class=\"nn\">rpc</span>\n\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^$'</span><span class=\"p\">,</span> <span class=\"n\">login_required</span><span class=\"p\">(</span><span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">serve</span><span class=\"p\">),</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'service'</span><span class=\"p\">:</span> <span class=\"n\">calculator</span><span class=\"p\">},</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'calculator'</span><span class=\"p\">),</span>\n</pre>\n<p>To enable or disable CSRF just use specific adaptor:</p>\n<ul>\n<li><code>jsonrpcdjango.serve</code> for CSRF-less handler</li>\n<li><code>jsonrpcdjango.csrf_serve</code> for CSRF-protected handler</li>\n<li>or use disrectly Django's decorators <code>csrf_exempt</code>, <code>csrf_protect</code> or enable <code>CsrfViewMiddleware</code> (read <a href=\"https://docs.djangoproject.com/en/dev/ref/csrf/\" rel=\"nofollow\">https://docs.djangoproject.com/en/dev/ref/csrf/</a> for details)</li>\n</ul>\n<p><em>Currently there is no possibility to decorate specific methods of the service with <code>jsonrpcdjango</code> adaptor.</em></p>\n<h2>Authorization</h2>\n<p>If you want add authorization to your method you should use similar solution as for authentication.\nFor Django framework you may simply decorate whole service:</p>\n<p>(urls.py)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jsonrpcdjango</span> <span class=\"k\">as</span> <span class=\"nn\">rpc</span>\n\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^$'</span><span class=\"p\">,</span> <span class=\"n\">permission_required</span><span class=\"p\">(</span><span class=\"s1\">'can_use_rpc'</span><span class=\"p\">)(</span><span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">serve</span><span class=\"p\">),</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'service'</span><span class=\"p\">:</span> <span class=\"n\">calculator</span><span class=\"p\">},</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'calculator'</span><span class=\"p\">),</span>\n</pre>\n<p><em>Currently there is no possibility to decorate specific methods of the service with <code>jsonrpcdjango</code> adaptor.</em></p>\n<h2>Accessing original HTTP request inside service methods</h2>\n<p>Sometimes you may need access to specific request data added somewhere\nin middleware stack. In that case you can register JSON-RPC method with\nadditional argument <code>takes_http_request=True</code>. Original <code>request</code> object\nwill be passed as first argument.</p>\n<p>If you're using Django as an HTTP framework and <code>jsonrpcdjango</code> adaptor,\nyou can provide access to Django's <code>HttpRequest</code> object inside service method\nwithout any hacks. Just declare <code>takes_http_request=True</code> at registering\ntime. This will make your service dependend on Django, but will add more flexibility.</p>\n<p>(calculator_service.py)</p>\n<pre><span class=\"n\">calculator</span> <span class=\"o\">=</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">Service</span><span class=\"p\">()</span>\n\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@calculator</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">takes_http_request</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">beast_add</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_superuser</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">666</span>\n</pre>\n\n          </div>"}, "last_serial": 6348752, "releases": {"0.1": [{"comment_text": "built for Linux-3.18.6-1-ARCH-x86_64-with-glibc2.2.5", "digests": {"md5": "07e721ae662562687f0ed8dde16263e1", "sha256": "02262d9c7b515744edaa8c20c60e7411b944d9a8c3e94ae910c4f6a60fec569b"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "07e721ae662562687f0ed8dde16263e1", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 4878, "upload_time": "2015-03-23T01:13:45", "upload_time_iso_8601": "2015-03-23T01:13:45.306271Z", "url": "https://files.pythonhosted.org/packages/83/56/a1f1a981e1d0dc2ee377749eba4c5b59350774ad9a2ebe9d7eaeac6a4f40/damn-simple-jsonrpc-server-0.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0a0971ad5595f8d7d9cf842d0db003f", "sha256": "85fc512f59a444f9d8beae6a1bb8739e724f4c33b90105f6f04cd628223afdb9"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.1.tar.gz", "has_sig": false, "md5_digest": "c0a0971ad5595f8d7d9cf842d0db003f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2585, "upload_time": "2015-03-23T01:13:48", "upload_time_iso_8601": "2015-03-23T01:13:48.665483Z", "url": "https://files.pythonhosted.org/packages/f3/c8/2d86bf2bfb8ba4b72e8015a5c4b60297be37b63366e4fac627018974e867/damn-simple-jsonrpc-server-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b2e76061343b18360546d63c4073d08d", "sha256": "3bd45a61d640c51beded0a69bcd2613c0937a72ed83f9d127f0d4210421af1f3"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.2.tar.gz", "has_sig": false, "md5_digest": "b2e76061343b18360546d63c4073d08d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2775, "upload_time": "2015-04-08T16:06:56", "upload_time_iso_8601": "2015-04-08T16:06:56.008714Z", "url": "https://files.pythonhosted.org/packages/95/6c/95216d65b38fb03d6c6bb9110784d25e8af44ddd651c3087c6ff33a3a024/damn-simple-jsonrpc-server-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "f099d9d69c4f601d9cb8eaef7cf989c3", "sha256": "db635c74fd251ba0b01f2b5310411ac35cd835957447b141e312c1b0848ae263"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.3.tar.gz", "has_sig": false, "md5_digest": "f099d9d69c4f601d9cb8eaef7cf989c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3446, "upload_time": "2015-04-08T22:14:23", "upload_time_iso_8601": "2015-04-08T22:14:23.769178Z", "url": "https://files.pythonhosted.org/packages/a4/60/5e03968c640f16dd141eaff08634b27f7d3e7ec11f3a99b9eb64ef429c9c/damn-simple-jsonrpc-server-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "6b991dc061347d2318bc8dc53f93ba26", "sha256": "d3b2c8f70acad55cfb86391c363377017c62251689f741ceff8efeac3c8ff64f"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.3.1.tar.gz", "has_sig": false, "md5_digest": "6b991dc061347d2318bc8dc53f93ba26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3448, "upload_time": "2015-04-09T09:41:06", "upload_time_iso_8601": "2015-04-09T09:41:06.701134Z", "url": "https://files.pythonhosted.org/packages/ab/dd/ca4309eb94f4850e85159bb870711cfe05ba56ea0669d5d9768c1ec0649e/damn-simple-jsonrpc-server-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "7c61a31e453468fb8559e1fa863a7e45", "sha256": "65d1b76503d5237ecccacd154bd224520c5969331df9ec04d14da8a96ecf07ba"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.4.0.tar.gz", "has_sig": false, "md5_digest": "7c61a31e453468fb8559e1fa863a7e45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3560, "upload_time": "2015-04-09T10:05:03", "upload_time_iso_8601": "2015-04-09T10:05:03.360222Z", "url": "https://files.pythonhosted.org/packages/a5/a2/7da1492ff1537fa451ef4c28d4d2d5b8349d126faa8a365edb5a392bb84f/damn-simple-jsonrpc-server-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "50e578d683dd69b4465bd56a035bbbb8", "sha256": "521f5764059a5f7e160b7ee7133699a0c73388dae4b7e155234b5847e2a2c5f0"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.4.1.tar.gz", "has_sig": false, "md5_digest": "50e578d683dd69b4465bd56a035bbbb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3600, "upload_time": "2015-04-09T11:00:17", "upload_time_iso_8601": "2015-04-09T11:00:17.647476Z", "url": "https://files.pythonhosted.org/packages/35/c3/28fc0b943f17f9ee1c6b13025333317e16bf144b7ad845e766ce3fb61bec/damn-simple-jsonrpc-server-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "8abbd619545d82c324ebe6b3b443df77", "sha256": "89f08cf816733e1e5d9dedbb8efce7ffaed46dfbc877d7f616910323db84c51a"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.4.2.tar.gz", "has_sig": false, "md5_digest": "8abbd619545d82c324ebe6b3b443df77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3688, "upload_time": "2015-04-09T11:15:45", "upload_time_iso_8601": "2015-04-09T11:15:45.839211Z", "url": "https://files.pythonhosted.org/packages/5a/bf/471b9feab1f9ec846f9ed0007144b1b0b73928cce73b26a3acb93ce16ec2/damn-simple-jsonrpc-server-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "18783b33a1416813f19606216da53b4c", "sha256": "c48f368e18b2e7760eee1a9dc7e603a20680d320807fd4d49148caa5a5b18416"}, "downloads": -1, "filename": "damn_simple_jsonrpc_server-0.4.3-py3.7.egg", "has_sig": false, "md5_digest": "18783b33a1416813f19606216da53b4c", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 8809, "upload_time": "2019-10-14T15:33:48", "upload_time_iso_8601": "2019-10-14T15:33:48.682791Z", "url": "https://files.pythonhosted.org/packages/9d/5b/b14426fc406ac24afe9f5e39463856c8f725790aa500475d1f9192944981/damn_simple_jsonrpc_server-0.4.3-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc315aafa0b01d1eed5981000f5dadf5", "sha256": "aa11a997ec8f3a4cf61e0fc9805db76b49a458d91e288d136ea67540436198ce"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.4.3.tar.gz", "has_sig": false, "md5_digest": "bc315aafa0b01d1eed5981000f5dadf5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5681, "upload_time": "2019-10-14T15:33:38", "upload_time_iso_8601": "2019-10-14T15:33:38.177629Z", "url": "https://files.pythonhosted.org/packages/0f/fc/355ac5f77894e1eae29c072ee6127ab72e51e0a4f1caa4907d015ec96c16/damn-simple-jsonrpc-server-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "0336ac883a6aeab467560b37177eb039", "sha256": "7037ef77cafaf4b85e5169ca193f8ad50e15cc5e8aba7138446040ff23306509"}, "downloads": -1, "filename": "damn_simple_jsonrpc_server-0.4.4-py2-none-any.whl", "has_sig": false, "md5_digest": "0336ac883a6aeab467560b37177eb039", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5323, "upload_time": "2019-11-14T21:20:05", "upload_time_iso_8601": "2019-11-14T21:20:05.734823Z", "url": "https://files.pythonhosted.org/packages/7c/d3/923e6e62869963dcb6cff3aa04d5ca2b8f2c1a870a38a5e1a2b44b11c96a/damn_simple_jsonrpc_server-0.4.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f136728b0d312d46d1a2525261171dee", "sha256": "76d878dfb0bca2fc1870d6bbcc8317ac6589c4753aff7a1355e5e95c890f9995"}, "downloads": -1, "filename": "damn_simple_jsonrpc_server-0.4.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f136728b0d312d46d1a2525261171dee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5320, "upload_time": "2019-11-14T21:21:29", "upload_time_iso_8601": "2019-11-14T21:21:29.376481Z", "url": "https://files.pythonhosted.org/packages/2d/e2/f3c7e64591663004eaa7a8ce3bc3bfd1150210c224b8aaf3bfd04145487d/damn_simple_jsonrpc_server-0.4.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64a5a84ff4da48849d75a68ac696ec0a", "sha256": "fe897488442e4fab7ef57642d4299c8175f7e2a40b4ccc756fe72dea60432216"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.4.4.tar.gz", "has_sig": false, "md5_digest": "64a5a84ff4da48849d75a68ac696ec0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5705, "upload_time": "2019-11-14T21:21:30", "upload_time_iso_8601": "2019-11-14T21:21:30.975442Z", "url": "https://files.pythonhosted.org/packages/51/26/08efd56c208303e3ee2883dfca9e56a9334984b1544114d4863d321731c8/damn-simple-jsonrpc-server-0.4.4.tar.gz", "yanked": false}], "0.4.4.post1": [{"comment_text": "", "digests": {"md5": "5972c4d1ea2aee0582d7e46c6d697e91", "sha256": "afb63b394e21b2f1db65c89284fbe3155dcc8659ea3be40b841079764577da21"}, "downloads": -1, "filename": "damn_simple_jsonrpc_server-0.4.4.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "5972c4d1ea2aee0582d7e46c6d697e91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7469, "upload_time": "2019-12-22T22:58:30", "upload_time_iso_8601": "2019-12-22T22:58:30.151813Z", "url": "https://files.pythonhosted.org/packages/df/6d/4cec1a542beda39fde29e5b8b0ffdbd3a8b83f38a38f46987f33034e398f/damn_simple_jsonrpc_server-0.4.4.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "701a769cea029178be252d1d1e813e58", "sha256": "7575674a3b59750d1ff154055cc390cc47db55d2970736da5b7083463b24d10f"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.4.4.post1.tar.gz", "has_sig": false, "md5_digest": "701a769cea029178be252d1d1e813e58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6695, "upload_time": "2019-12-22T22:58:31", "upload_time_iso_8601": "2019-12-22T22:58:31.959832Z", "url": "https://files.pythonhosted.org/packages/e4/e1/dd2309b8f5a574bb7c9412fc35d800cf8afc12c87838f0549891f4ccf899/damn-simple-jsonrpc-server-0.4.4.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5972c4d1ea2aee0582d7e46c6d697e91", "sha256": "afb63b394e21b2f1db65c89284fbe3155dcc8659ea3be40b841079764577da21"}, "downloads": -1, "filename": "damn_simple_jsonrpc_server-0.4.4.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "5972c4d1ea2aee0582d7e46c6d697e91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7469, "upload_time": "2019-12-22T22:58:30", "upload_time_iso_8601": "2019-12-22T22:58:30.151813Z", "url": "https://files.pythonhosted.org/packages/df/6d/4cec1a542beda39fde29e5b8b0ffdbd3a8b83f38a38f46987f33034e398f/damn_simple_jsonrpc_server-0.4.4.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "701a769cea029178be252d1d1e813e58", "sha256": "7575674a3b59750d1ff154055cc390cc47db55d2970736da5b7083463b24d10f"}, "downloads": -1, "filename": "damn-simple-jsonrpc-server-0.4.4.post1.tar.gz", "has_sig": false, "md5_digest": "701a769cea029178be252d1d1e813e58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6695, "upload_time": "2019-12-22T22:58:31", "upload_time_iso_8601": "2019-12-22T22:58:31.959832Z", "url": "https://files.pythonhosted.org/packages/e4/e1/dd2309b8f5a574bb7c9412fc35d800cf8afc12c87838f0549891f4ccf899/damn-simple-jsonrpc-server-0.4.4.post1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:45 2020"}