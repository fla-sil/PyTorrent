{"info": {"author": "Andranik Sargsyan", "author_email": "and.sargsyan@yahoo.com", "bugtrack_url": null, "classifiers": [], "description": "pylsd-nova\n=============\n\n### 1. Introduction\n\npylsd-nova is a python binding for [LSD - Line Segment Detector](http://www.ipol.im/pub/art/2012/gjmr-lsd/).\n\nThis is a fork from original [pylsd binding](https://github.com/primetang/pylsd/). This fork works for Python 3 and adds the ability to change lsd parameters from python call. \n\n### 2. Install\n\nThis package uses distutils, which is the default way of installing python modules. For installing by cloning the repository you can run the following commands:\n```\ngit clone https://github.com/AndranikSargsyan/pylsd-nova.git\ncd pylsd-nova\npip install .\n```\n\nOr install directly through `pip`:\n```\npip install pylsd-nova\n```\n\n### 3. Usage\n\nYou can use the package by importing like  `from pylsd import lsd`, and calling `segments = lsd(img)` by optionally passing other lsd parameters mentioned below. `img` is a Grayscale Image (`H x W` numpy.ndarray), and the return value `segments` contains detected line segments.\n\n`segments` is an `N x 5` numpy.ndarray. Each row represents a straight line. The 5-dimensional row format is:\n\n```\n[point1.x, point1.y, point2.x, point2.y, width]\n```\n\nThese are the parameters of lsd, which can be changed through keyword arguments of lsd call:\n\n\n* `scale (float)`: Scale the image by Gaussian filter to 'scale'.\n\n* `sigma_scale (float)`: Sigma for Gaussian filter is computed as `sigma = sigma_scale / scale`.\n\n* `quant (float)`: Bound to the quantization error on the gradient norm.\n\n* `ang_th (float)`: Gradient angle tolerance in degrees.\n\n* `eps (float)`: Detection threshold, `-log10(NFA)`.\n\n* `density_th (float)`: Minimal density of region points in rectangle.\n\n* `n_bins (int)`: Number of bins in pseudo-ordering of gradient modulus.\n\n* `max_grad (float)`: Gradient modulus in the highest bin. The default value corresponds to the highest gradient modulus on images with gray levels in [0,255].\n\n\nYou can use it just like the following code ([here is the link to examples](https://github.com/AndranikSargsyan/pylsd-nova/tree/master/example)):\n\n* by using cv2 module\n\n```python\nimport cv2\nimport numpy as np\nimport os\nfrom pylsd import lsd\n\nfull_name = 'car.jpg'\nfolder, img_name = os.path.split(full_name)\nimg = cv2.imread(full_name, cv2.IMREAD_COLOR)\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nsegments = lsd(img_gray)\n\nfor i in range(segments.shape[0]):\n    pt1 = (int(segments[i, 0]), int(segments[i, 1]))\n    pt2 = (int(segments[i, 2]), int(segments[i, 3]))\n    width = segments[i, 4]\n    cv2.line(img, pt1, pt2, (0, 0, 255), int(np.ceil(width / 2)))\n\ncv2.imwrite(os.path.join(folder, 'cv2_' + img_name.split('.')[0] + '.jpg'), img)\n```\n\n* by using PIL(Image) module\n\n```python\nimport numpy as np\nimport os\nfrom PIL import Image, ImageDraw\nfrom pylsd import lsd\n\nfull_name = 'house.png'\nfolder, img_name = os.path.split(full_name)\nimg = Image.open(full_name)\nimg_gray = np.asarray(img.convert('L'))\n\nsegments = lsd(img_gray)\n\ndraw = ImageDraw.Draw(img)\nfor i in range(segments.shape[0]):\n    pt1 = (int(segments[i, 0]), int(segments[i, 1]))\n    pt2 = (int(segments[i, 2]), int(segments[i, 3]))\n    width = segments[i, 4]\n    draw.line((pt1, pt2), fill=(0, 0, 255), width=int(np.ceil(width / 2)))\n\nimg.save(os.path.join(folder, 'PIL_' + img_name.split('.')[0] + '.jpg'))\n```\n\nThe following is the result:\n\n* car.jpg by using cv2 module\n\n![](https://github.com/AndranikSargsyan/pylsd-nova/blob/master/example/car.jpg)\n\n![](https://github.com/AndranikSargsyan/pylsd-nova/blob/master/example/cv2_car.jpg)\n\n* house.png by using PIL(Image) module\n\n![](https://github.com/AndranikSargsyan/pylsd-nova/blob/master/example/house.png)\n\n![](https://github.com/AndranikSargsyan/pylsd-nova/blob/master/example/PIL_house.jpg)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AndranikSargsyan/pylsd-nova", "keywords": "LSD", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pylsd-nova", "package_url": "https://pypi.org/project/pylsd-nova/", "platform": "", "project_url": "https://pypi.org/project/pylsd-nova/", "project_urls": {"Homepage": "https://github.com/AndranikSargsyan/pylsd-nova"}, "release_url": "https://pypi.org/project/pylsd-nova/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "pylsd-nova is a python binding for LSD - Line Segment Detector", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pylsd-nova</h1>\n<h3>1. Introduction</h3>\n<p>pylsd-nova is a python binding for <a href=\"http://www.ipol.im/pub/art/2012/gjmr-lsd/\" rel=\"nofollow\">LSD - Line Segment Detector</a>.</p>\n<p>This is a fork from original <a href=\"https://github.com/primetang/pylsd/\" rel=\"nofollow\">pylsd binding</a>. This fork works for Python 3 and adds the ability to change lsd parameters from python call.</p>\n<h3>2. Install</h3>\n<p>This package uses distutils, which is the default way of installing python modules. For installing by cloning the repository you can run the following commands:</p>\n<pre><code>git clone https://github.com/AndranikSargsyan/pylsd-nova.git\ncd pylsd-nova\npip install .\n</code></pre>\n<p>Or install directly through <code>pip</code>:</p>\n<pre><code>pip install pylsd-nova\n</code></pre>\n<h3>3. Usage</h3>\n<p>You can use the package by importing like  <code>from pylsd import lsd</code>, and calling <code>segments = lsd(img)</code> by optionally passing other lsd parameters mentioned below. <code>img</code> is a Grayscale Image (<code>H x W</code> numpy.ndarray), and the return value <code>segments</code> contains detected line segments.</p>\n<p><code>segments</code> is an <code>N x 5</code> numpy.ndarray. Each row represents a straight line. The 5-dimensional row format is:</p>\n<pre><code>[point1.x, point1.y, point2.x, point2.y, width]\n</code></pre>\n<p>These are the parameters of lsd, which can be changed through keyword arguments of lsd call:</p>\n<ul>\n<li>\n<p><code>scale (float)</code>: Scale the image by Gaussian filter to 'scale'.</p>\n</li>\n<li>\n<p><code>sigma_scale (float)</code>: Sigma for Gaussian filter is computed as <code>sigma = sigma_scale / scale</code>.</p>\n</li>\n<li>\n<p><code>quant (float)</code>: Bound to the quantization error on the gradient norm.</p>\n</li>\n<li>\n<p><code>ang_th (float)</code>: Gradient angle tolerance in degrees.</p>\n</li>\n<li>\n<p><code>eps (float)</code>: Detection threshold, <code>-log10(NFA)</code>.</p>\n</li>\n<li>\n<p><code>density_th (float)</code>: Minimal density of region points in rectangle.</p>\n</li>\n<li>\n<p><code>n_bins (int)</code>: Number of bins in pseudo-ordering of gradient modulus.</p>\n</li>\n<li>\n<p><code>max_grad (float)</code>: Gradient modulus in the highest bin. The default value corresponds to the highest gradient modulus on images with gray levels in [0,255].</p>\n</li>\n</ul>\n<p>You can use it just like the following code (<a href=\"https://github.com/AndranikSargsyan/pylsd-nova/tree/master/example\" rel=\"nofollow\">here is the link to examples</a>):</p>\n<ul>\n<li>by using cv2 module</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylsd</span> <span class=\"kn\">import</span> <span class=\"n\">lsd</span>\n\n<span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"s1\">'car.jpg'</span>\n<span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"n\">img_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">full_name</span><span class=\"p\">)</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">full_name</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">IMREAD_COLOR</span><span class=\"p\">)</span>\n<span class=\"n\">img_gray</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">COLOR_BGR2GRAY</span><span class=\"p\">)</span>\n\n<span class=\"n\">segments</span> <span class=\"o\">=</span> <span class=\"n\">lsd</span><span class=\"p\">(</span><span class=\"n\">img_gray</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n    <span class=\"n\">pt1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n    <span class=\"n\">pt2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>\n    <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n    <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">pt1</span><span class=\"p\">,</span> <span class=\"n\">pt2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">width</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n\n<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"s1\">'cv2_'</span> <span class=\"o\">+</span> <span class=\"n\">img_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s1\">'.jpg'</span><span class=\"p\">),</span> <span class=\"n\">img</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>by using PIL(Image) module</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"n\">ImageDraw</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylsd</span> <span class=\"kn\">import</span> <span class=\"n\">lsd</span>\n\n<span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"s1\">'house.png'</span>\n<span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"n\">img_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">full_name</span><span class=\"p\">)</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">full_name</span><span class=\"p\">)</span>\n<span class=\"n\">img_gray</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"s1\">'L'</span><span class=\"p\">))</span>\n\n<span class=\"n\">segments</span> <span class=\"o\">=</span> <span class=\"n\">lsd</span><span class=\"p\">(</span><span class=\"n\">img_gray</span><span class=\"p\">)</span>\n\n<span class=\"n\">draw</span> <span class=\"o\">=</span> <span class=\"n\">ImageDraw</span><span class=\"o\">.</span><span class=\"n\">Draw</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n    <span class=\"n\">pt1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n    <span class=\"n\">pt2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>\n    <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n    <span class=\"n\">draw</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">((</span><span class=\"n\">pt1</span><span class=\"p\">,</span> <span class=\"n\">pt2</span><span class=\"p\">),</span> <span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">width</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n\n<span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"s1\">'PIL_'</span> <span class=\"o\">+</span> <span class=\"n\">img_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s1\">'.jpg'</span><span class=\"p\">))</span>\n</pre>\n<p>The following is the result:</p>\n<ul>\n<li>car.jpg by using cv2 module</li>\n</ul>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8dcd1a0b8e7d39c2d8d3665d7ef663d322267195/68747470733a2f2f6769746875622e636f6d2f416e6472616e696b536172677379616e2f70796c73642d6e6f76612f626c6f622f6d61737465722f6578616d706c652f6361722e6a7067\"></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5efb7a94ca6713090665066553f19ae1f658abdb/68747470733a2f2f6769746875622e636f6d2f416e6472616e696b536172677379616e2f70796c73642d6e6f76612f626c6f622f6d61737465722f6578616d706c652f6376325f6361722e6a7067\"></p>\n<ul>\n<li>house.png by using PIL(Image) module</li>\n</ul>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6d33465a1e3c50cc4bd53c97333cf7543eb7dbd/68747470733a2f2f6769746875622e636f6d2f416e6472616e696b536172677379616e2f70796c73642d6e6f76612f626c6f622f6d61737465722f6578616d706c652f686f7573652e706e67\"></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9d68539f51b9ea4061bcbf36b5a2c2a8245c45c/68747470733a2f2f6769746875622e636f6d2f416e6472616e696b536172677379616e2f70796c73642d6e6f76612f626c6f622f6d61737465722f6578616d706c652f50494c5f686f7573652e6a7067\"></p>\n\n          </div>"}, "last_serial": 6949896, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "caac38cb36e3363bbb0fee81d928cef3", "sha256": "a2be003fe67c0960a268adb76edb490952bcb5a026f33ed9724b854f3ac3084b"}, "downloads": -1, "filename": "pylsd_nova-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "caac38cb36e3363bbb0fee81d928cef3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58496, "upload_time": "2020-04-04T14:22:30", "upload_time_iso_8601": "2020-04-04T14:22:30.160225Z", "url": "https://files.pythonhosted.org/packages/dc/54/cd95b11667e71654769491cc6a4a075ef54e9398c12e7b037ada9c2838d4/pylsd_nova-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b00cbe8108778de12408cdd575d722e", "sha256": "e188e1821723d64293b67f64d6cec0edda4d862d9fea598b1e911c68e9042085"}, "downloads": -1, "filename": "pylsd-nova-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1b00cbe8108778de12408cdd575d722e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56982, "upload_time": "2020-04-04T14:22:33", "upload_time_iso_8601": "2020-04-04T14:22:33.027945Z", "url": "https://files.pythonhosted.org/packages/d5/8e/b852c9c3bf8a46f9b1da385e871eae95e38d9582897cd40f750ec7d52232/pylsd-nova-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "caac38cb36e3363bbb0fee81d928cef3", "sha256": "a2be003fe67c0960a268adb76edb490952bcb5a026f33ed9724b854f3ac3084b"}, "downloads": -1, "filename": "pylsd_nova-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "caac38cb36e3363bbb0fee81d928cef3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58496, "upload_time": "2020-04-04T14:22:30", "upload_time_iso_8601": "2020-04-04T14:22:30.160225Z", "url": "https://files.pythonhosted.org/packages/dc/54/cd95b11667e71654769491cc6a4a075ef54e9398c12e7b037ada9c2838d4/pylsd_nova-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b00cbe8108778de12408cdd575d722e", "sha256": "e188e1821723d64293b67f64d6cec0edda4d862d9fea598b1e911c68e9042085"}, "downloads": -1, "filename": "pylsd-nova-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1b00cbe8108778de12408cdd575d722e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56982, "upload_time": "2020-04-04T14:22:33", "upload_time_iso_8601": "2020-04-04T14:22:33.027945Z", "url": "https://files.pythonhosted.org/packages/d5/8e/b852c9c3bf8a46f9b1da385e871eae95e38d9582897cd40f750ec7d52232/pylsd-nova-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:45 2020"}