{"info": {"author": "Einar Forselv", "author_email": "eforselv@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: zlib/libpng License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Multimedia :: Graphics", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "|pypi| |travis|\n\npyrocket\n========\n\nA `rocket <https://github.com/rocket/rocket>`__ client written in Python.\n\n- The port was inspired by `Moonlander <https://github.com/anttihirvonen/moonlander>`_\n- Tested with `Rocket OpenGL editor <https://github.com/emoon/rocket>`_\n\nThis project is written in python 3 and is verified to work on\nWindows, OS X and Linux.\n\n|editor|\n\npyrocket was originally part of demosys-py_ and was separated into this project.\nThe screenshot shows pyrocket with demosys-py and Rocket OpenGL editor.\n\nWhat is Rocket?\n===============\n\nRocket is a sync-tracker tool for synchronizing music and visuals in demoscene productions.\nIt consists of an editor and a client that can either communicate with the editor over a\nnetwork socket, or play back an exported data-set.\n\nThis project is only a client (for now), so you will have to find an editor. You include\nthis client in your application so it can easily talk to an external editor or play back\nkey frame data in the final product.\n\nDo note that the rocket system can also be used for other purposes were you need a static\nset of interpolating key frames. There are no requirements for music to be involved.\n\nContributing\n============\n\nBe free to post questions and create issues. Do not hesitate to open a pull request\n(completed or work in progress). The worst thing that can happen is that we learn something.\n\nContributors:\n\n- `Einar Forselv <https://github.com/einarf>`_\n- `Arttu Tamminen <https://github.com/helgrima>`_\n\nHow Rocket Works\n================\n\nRocket data is a collection of named groups (\"tracks\") containing key frames. Each key\nframe contains a row number (int), value (float) and interpolation type (enum/byte).\nThe row number is a time unit. This is translated to seconds based on a configured rows\nper second value. Rows per second is normally adjusted based on the music such as beats\nper minute. The row resolution will then be a grid that helps the user to place key\nframes accurately in sync with the music.\n\nThe rocket client can be used in three different modes:\n\n- **Editor mode**: Use the socket connector to connect to an external editor. The editor\n  should ideally already be opened and you have loaded an xml file containing all the key\n  frame data. When the client connects it will download all the key frames from the editor\n  and will keep synchronizing the data as you edit the key frames.\n- **Playback: Editor Data**: The client will load the xml file created by the editor and\n  play it back. This is a perfectly valid option in the final product if you don't care\n  that others can easily inspect and edit the project file and you are not constrained by\n  file size limits. (Project files are xml with lots of additional metadata used by the editor)\n- **Playback: Exported**: In editor mode you can select \"export remote\" that will tell\n  the client to save all the current tracks in separate files in a binary format. This\n  mode loads and plays back this data. The main purpose if this option is to vastly\n  reduce the size of all the key frame data.\n\n\nInterpolation Types\n===================\n\nThe client library will do all the interpolation calculations for you.\nThe rocket protocol is supposed to be as simple as possible. If you need any other\ninterpolation types you can for example use linear interpolation and apply\na formula on these values.\n\nSupported interpolation modes are:\n - Step: Key frame produces a constant value)\n - Linear: Linear interpolation between key frames\n - Smooth: Interpolates key frames using: ``t * t * (3 - 2 * t)``\n - Ramp: Interpolates key frame using: ``t^2``\n\nUsing the Client\n================\n\nFirst of all you have to create a controller. This class keeps track of the current\ntime. We currently only implement a basic ``TimeController``. If you want music\nplayback you will have to implement your own controller by extending the base\n``Controller`` class. The reason for this is simply that we don't want to lock\nusers into using a specific library. The support for audio playback in Python is\nalso a bit flaky and almost always requires some third party binary dependency.\nThe easiest way to get music playback up and running is probably to use the\n``mixer`` module in ``pygame``, but this requires SDL libraries to be installed.\n\nQuick draw loop setup:\n\n(Do note that both time and track row is interpolated as floats,\nso even low values for ``rows_per_second`` will yield smoothly interpolated\nkey frame values)\n\n.. code:: python\n\n    import time\n    from rocket import Rocket\n    from rocket.controllers import TimeController\n\n    # Simple controller tracking time at 24 rows per second\n    controller = TimeController(24)\n\n    # Create the rocket client in different modes\n    # Editor mode (track_path: where binary track data ends up when doing a remote export)\n    rocket = Rocket.from_socket(controller, track_path=\"./data\")\n    # Playback using the editor file\n    rocket = Rocket.from_project_file(controller, 'example.xml')\n    # Playback using binary track data\n    rocket = Rocket.from_files(controller, './data')\n\n    # Register some tracks\n    # Just register a track\n    rocket.track(\"cube:rotation\")\n    # Register a track and store the reference for later\n    size_track = rocket.track(\"cube:size\")\n\n    # Enter the draw loop\n    rocket.start()\n    while True:\n        # Update inner states. The controller is mainly involved in that.\n        rocket.update()\n\n        # Get the cube rotation value at the current time (when update() was last called)\n        cube_rot = rocket.value(\"cube:rotation\")\n\n        # Get the cube size by accessing the track directly (using seconds)\n        cube_size = size_track.time_value(rocket.time)\n        # Get the cube size by accessing the track directly (using track location)\n        cube_size = size_track.track_value(rocket.track)\n\n        # Emulate 60 fps\n        time.sleep(1.0 / 1000 * 16)\n\nTrack Names\n===========\n\nThe standard rocket editor support track names using utf-8, but this is not a 100%\nguarantee that other track editors also support this.\n\nSome editors such as `Rocket OpenGL editor <https://github.com/emoon/rocket>`_\nsupport track grouping. Grouping is done by adding a prefix in the track name\nfollowed by a colon.\n\nExample:\n::\n\n    cube:rot.x\n    cube:rot.y\n    cube:rot.z\n\n    monkey:rot.x\n    monkey:rot.y\n    monkey:rot.z\n\nThe uniqueness of the track is based on the entire name, so you can re-use\nthe same name across different groups.\n\nTrack names (after colon) should ideally be as short as possible. 12 characters is\na good limit as editors either cut off the name or expand the column width with\nlarger names. It's common to use dot as a separator in track names as well, but\nthis is not enforced as far as we know.\n\nWhen tracks are serialized into binary format the colon is replaced with #.\n``cube:rot.x`` track is save in the file ``cube#rot.x.track``.\n\nLogging\n=======\n\nThe default log level of the client is ``ERROR``.\n\nYou can override the log level when initializing rocket:\n\n.. code:: python\n\n    import logging\n\n    rocket = Rocket.from_socket(controller, track_path=\"./data\", log_level=logging.INFO)\n    rocket = Rocket.from_project_file(controller, 'example.xml', log_level=logging.INFO)\n    rocket = Rocket.from_files(controller, './data', log_level=logging.INFO)\n\nWhen adding custom controllers you can emit to the rocket logger:\n\n.. code:: python\n\n    import logging\n    from rocket.controllers import Controller\n\n    logger = logging.getLogger(\"rocket\")\n\n    class MyController(Controller):\n        def __init__(self, rows_per_second):\n            logger.info(\"Hello, Rocket!\")\n\n\n.. |editor| image:: https://raw.githubusercontent.com/Contraz/pyrocket/master/editor.png\n.. |pypi| image:: https://img.shields.io/pypi/v/pyrocket.svg\n   :target: https://pypi.python.org/pypi/pyrocket\n.. |travis| image:: https://travis-ci.org/Contraz/pyrocket.svg?branch=master\n   :target: https://travis-ci.org/Contraz/pyrocket\n.. _demosys-py: https://github.com/Contraz/demosys-py\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Contraz/pyrocket", "keywords": "synchronizing,music,rocket", "license": "", "maintainer": "Einar Forselv", "maintainer_email": "eforselv@gmail.com", "name": "pyrocket", "package_url": "https://pypi.org/project/pyrocket/", "platform": "", "project_url": "https://pypi.org/project/pyrocket/", "project_urls": {"Homepage": "https://github.com/Contraz/pyrocket"}, "release_url": "https://pypi.org/project/pyrocket/0.2.8/", "requires_dist": null, "requires_python": "", "summary": "Rocket sync-tracker client", "version": "0.2.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/pyrocket\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2abfc64cbf7a8b23bddc372be9da53fc008e4e5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079726f636b65742e737667\"></a> <a href=\"https://travis-ci.org/Contraz/pyrocket\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8795ae7c925fd35b932aa203058223f2e538c50d/68747470733a2f2f7472617669732d63692e6f72672f436f6e7472617a2f7079726f636b65742e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"pyrocket\">\n<h2>pyrocket</h2>\n<p>A <a href=\"https://github.com/rocket/rocket\" rel=\"nofollow\">rocket</a> client written in Python.</p>\n<ul>\n<li>The port was inspired by <a href=\"https://github.com/anttihirvonen/moonlander\" rel=\"nofollow\">Moonlander</a></li>\n<li>Tested with <a href=\"https://github.com/emoon/rocket\" rel=\"nofollow\">Rocket OpenGL editor</a></li>\n</ul>\n<p>This project is written in python 3 and is verified to work on\nWindows, OS X and Linux.</p>\n<p><img alt=\"editor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c14b027cfbd4b645bd12d2c36ec3c86e0e72780/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f436f6e7472617a2f7079726f636b65742f6d61737465722f656469746f722e706e67\"></p>\n<p>pyrocket was originally part of <a href=\"https://github.com/Contraz/demosys-py\" rel=\"nofollow\">demosys-py</a> and was separated into this project.\nThe screenshot shows pyrocket with demosys-py and Rocket OpenGL editor.</p>\n</div>\n<div id=\"what-is-rocket\">\n<h2>What is Rocket?</h2>\n<p>Rocket is a sync-tracker tool for synchronizing music and visuals in demoscene productions.\nIt consists of an editor and a client that can either communicate with the editor over a\nnetwork socket, or play back an exported data-set.</p>\n<p>This project is only a client (for now), so you will have to find an editor. You include\nthis client in your application so it can easily talk to an external editor or play back\nkey frame data in the final product.</p>\n<p>Do note that the rocket system can also be used for other purposes were you need a static\nset of interpolating key frames. There are no requirements for music to be involved.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Be free to post questions and create issues. Do not hesitate to open a pull request\n(completed or work in progress). The worst thing that can happen is that we learn something.</p>\n<p>Contributors:</p>\n<ul>\n<li><a href=\"https://github.com/einarf\" rel=\"nofollow\">Einar Forselv</a></li>\n<li><a href=\"https://github.com/helgrima\" rel=\"nofollow\">Arttu Tamminen</a></li>\n</ul>\n</div>\n<div id=\"how-rocket-works\">\n<h2>How Rocket Works</h2>\n<p>Rocket data is a collection of named groups (\u201ctracks\u201d) containing key frames. Each key\nframe contains a row number (int), value (float) and interpolation type (enum/byte).\nThe row number is a time unit. This is translated to seconds based on a configured rows\nper second value. Rows per second is normally adjusted based on the music such as beats\nper minute. The row resolution will then be a grid that helps the user to place key\nframes accurately in sync with the music.</p>\n<p>The rocket client can be used in three different modes:</p>\n<ul>\n<li><strong>Editor mode</strong>: Use the socket connector to connect to an external editor. The editor\nshould ideally already be opened and you have loaded an xml file containing all the key\nframe data. When the client connects it will download all the key frames from the editor\nand will keep synchronizing the data as you edit the key frames.</li>\n<li><strong>Playback: Editor Data</strong>: The client will load the xml file created by the editor and\nplay it back. This is a perfectly valid option in the final product if you don\u2019t care\nthat others can easily inspect and edit the project file and you are not constrained by\nfile size limits. (Project files are xml with lots of additional metadata used by the editor)</li>\n<li><strong>Playback: Exported</strong>: In editor mode you can select \u201cexport remote\u201d that will tell\nthe client to save all the current tracks in separate files in a binary format. This\nmode loads and plays back this data. The main purpose if this option is to vastly\nreduce the size of all the key frame data.</li>\n</ul>\n</div>\n<div id=\"interpolation-types\">\n<h2>Interpolation Types</h2>\n<p>The client library will do all the interpolation calculations for you.\nThe rocket protocol is supposed to be as simple as possible. If you need any other\ninterpolation types you can for example use linear interpolation and apply\na formula on these values.</p>\n<dl>\n<dt>Supported interpolation modes are:</dt>\n<dd><ul>\n<li>Step: Key frame produces a constant value)</li>\n<li>Linear: Linear interpolation between key frames</li>\n<li>Smooth: Interpolates key frames using: <tt>t * t * (3 - 2 * t)</tt></li>\n<li>Ramp: Interpolates key frame using: <tt>t^2</tt></li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"using-the-client\">\n<h2>Using the Client</h2>\n<p>First of all you have to create a controller. This class keeps track of the current\ntime. We currently only implement a basic <tt>TimeController</tt>. If you want music\nplayback you will have to implement your own controller by extending the base\n<tt>Controller</tt> class. The reason for this is simply that we don\u2019t want to lock\nusers into using a specific library. The support for audio playback in Python is\nalso a bit flaky and almost always requires some third party binary dependency.\nThe easiest way to get music playback up and running is probably to use the\n<tt>mixer</tt> module in <tt>pygame</tt>, but this requires SDL libraries to be installed.</p>\n<p>Quick draw loop setup:</p>\n<p>(Do note that both time and track row is interpolated as floats,\nso even low values for <tt>rows_per_second</tt> will yield smoothly interpolated\nkey frame values)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rocket</span> <span class=\"kn\">import</span> <span class=\"n\">Rocket</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rocket.controllers</span> <span class=\"kn\">import</span> <span class=\"n\">TimeController</span>\n\n<span class=\"c1\"># Simple controller tracking time at 24 rows per second</span>\n<span class=\"n\">controller</span> <span class=\"o\">=</span> <span class=\"n\">TimeController</span><span class=\"p\">(</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create the rocket client in different modes</span>\n<span class=\"c1\"># Editor mode (track_path: where binary track data ends up when doing a remote export)</span>\n<span class=\"n\">rocket</span> <span class=\"o\">=</span> <span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">from_socket</span><span class=\"p\">(</span><span class=\"n\">controller</span><span class=\"p\">,</span> <span class=\"n\">track_path</span><span class=\"o\">=</span><span class=\"s2\">\"./data\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Playback using the editor file</span>\n<span class=\"n\">rocket</span> <span class=\"o\">=</span> <span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">from_project_file</span><span class=\"p\">(</span><span class=\"n\">controller</span><span class=\"p\">,</span> <span class=\"s1\">'example.xml'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Playback using binary track data</span>\n<span class=\"n\">rocket</span> <span class=\"o\">=</span> <span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">from_files</span><span class=\"p\">(</span><span class=\"n\">controller</span><span class=\"p\">,</span> <span class=\"s1\">'./data'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Register some tracks</span>\n<span class=\"c1\"># Just register a track</span>\n<span class=\"n\">rocket</span><span class=\"o\">.</span><span class=\"n\">track</span><span class=\"p\">(</span><span class=\"s2\">\"cube:rotation\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Register a track and store the reference for later</span>\n<span class=\"n\">size_track</span> <span class=\"o\">=</span> <span class=\"n\">rocket</span><span class=\"o\">.</span><span class=\"n\">track</span><span class=\"p\">(</span><span class=\"s2\">\"cube:size\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Enter the draw loop</span>\n<span class=\"n\">rocket</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Update inner states. The controller is mainly involved in that.</span>\n    <span class=\"n\">rocket</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Get the cube rotation value at the current time (when update() was last called)</span>\n    <span class=\"n\">cube_rot</span> <span class=\"o\">=</span> <span class=\"n\">rocket</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">(</span><span class=\"s2\">\"cube:rotation\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Get the cube size by accessing the track directly (using seconds)</span>\n    <span class=\"n\">cube_size</span> <span class=\"o\">=</span> <span class=\"n\">size_track</span><span class=\"o\">.</span><span class=\"n\">time_value</span><span class=\"p\">(</span><span class=\"n\">rocket</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Get the cube size by accessing the track directly (using track location)</span>\n    <span class=\"n\">cube_size</span> <span class=\"o\">=</span> <span class=\"n\">size_track</span><span class=\"o\">.</span><span class=\"n\">track_value</span><span class=\"p\">(</span><span class=\"n\">rocket</span><span class=\"o\">.</span><span class=\"n\">track</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Emulate 60 fps</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span> <span class=\"o\">*</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"track-names\">\n<h2>Track Names</h2>\n<p>The standard rocket editor support track names using utf-8, but this is not a 100%\nguarantee that other track editors also support this.</p>\n<p>Some editors such as <a href=\"https://github.com/emoon/rocket\" rel=\"nofollow\">Rocket OpenGL editor</a>\nsupport track grouping. Grouping is done by adding a prefix in the track name\nfollowed by a colon.</p>\n<p>Example:</p>\n<pre>cube:rot.x\ncube:rot.y\ncube:rot.z\n\nmonkey:rot.x\nmonkey:rot.y\nmonkey:rot.z\n</pre>\n<p>The uniqueness of the track is based on the entire name, so you can re-use\nthe same name across different groups.</p>\n<p>Track names (after colon) should ideally be as short as possible. 12 characters is\na good limit as editors either cut off the name or expand the column width with\nlarger names. It\u2019s common to use dot as a separator in track names as well, but\nthis is not enforced as far as we know.</p>\n<p>When tracks are serialized into binary format the colon is replaced with #.\n<tt>cube:rot.x</tt> track is save in the file <tt>cube#rot.x.track</tt>.</p>\n</div>\n<div id=\"logging\">\n<h2>Logging</h2>\n<p>The default log level of the client is <tt>ERROR</tt>.</p>\n<p>You can override the log level when initializing rocket:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">rocket</span> <span class=\"o\">=</span> <span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">from_socket</span><span class=\"p\">(</span><span class=\"n\">controller</span><span class=\"p\">,</span> <span class=\"n\">track_path</span><span class=\"o\">=</span><span class=\"s2\">\"./data\"</span><span class=\"p\">,</span> <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">rocket</span> <span class=\"o\">=</span> <span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">from_project_file</span><span class=\"p\">(</span><span class=\"n\">controller</span><span class=\"p\">,</span> <span class=\"s1\">'example.xml'</span><span class=\"p\">,</span> <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">rocket</span> <span class=\"o\">=</span> <span class=\"n\">Rocket</span><span class=\"o\">.</span><span class=\"n\">from_files</span><span class=\"p\">(</span><span class=\"n\">controller</span><span class=\"p\">,</span> <span class=\"s1\">'./data'</span><span class=\"p\">,</span> <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n</pre>\n<p>When adding custom controllers you can emit to the rocket logger:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rocket.controllers</span> <span class=\"kn\">import</span> <span class=\"n\">Controller</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">\"rocket\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyController</span><span class=\"p\">(</span><span class=\"n\">Controller</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">rows_per_second</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Hello, Rocket!\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4170698, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "23a141532f878b9410bdc5382606a3d4", "sha256": "9e9e93e18f93d73306b41fd13796c28bdd45e412acc6bddf879d0381f19b0dbb"}, "downloads": -1, "filename": "pyrocket-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "23a141532f878b9410bdc5382606a3d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2737, "upload_time": "2017-04-14T03:34:31", "upload_time_iso_8601": "2017-04-14T03:34:31.636577Z", "url": "https://files.pythonhosted.org/packages/9d/17/e2c19fbdb84fb65df963ed891f37cbc4f244bb9cb4b62b767571ea790fb2/pyrocket-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2bff539938959a4826562e13c5149a24", "sha256": "38fac6d13e5bc3fc4b6f2a900e77124d2377ad30be8297598aa4b20635bb90fd"}, "downloads": -1, "filename": "pyrocket-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2bff539938959a4826562e13c5149a24", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2943, "upload_time": "2017-04-14T20:33:49", "upload_time_iso_8601": "2017-04-14T20:33:49.693404Z", "url": "https://files.pythonhosted.org/packages/4c/f4/33addd663d84e01a311a54cef057128c4aa4769320f76641005596ea8591/pyrocket-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "cff41fc7e65ec058b17a7623cfdea59e", "sha256": "d74645e1e3fb18de17d65e15929b79c7b567f4cbb934ae756e68ee8b3e045f4f"}, "downloads": -1, "filename": "pyrocket-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cff41fc7e65ec058b17a7623cfdea59e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7336, "upload_time": "2017-04-14T21:13:24", "upload_time_iso_8601": "2017-04-14T21:13:24.003395Z", "url": "https://files.pythonhosted.org/packages/5a/a1/24654534d3acb26ec114141f43d28b78616203e8961714ca8c4e960c53dc/pyrocket-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "44e13fb0a418e33da5f65d8650ad5088", "sha256": "a8a67371d4fb574a77d7739c7536db8ae9114ecde1449e8ec03c5d0545e4c317"}, "downloads": -1, "filename": "pyrocket-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "44e13fb0a418e33da5f65d8650ad5088", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7508, "upload_time": "2017-04-14T23:41:11", "upload_time_iso_8601": "2017-04-14T23:41:11.641709Z", "url": "https://files.pythonhosted.org/packages/7b/18/d17c60f4ac71bcec778c93d7ed07f7c988a6c748cfce4cb39bf3182f10ac/pyrocket-0.1.3-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "631b78e221e01923aa6d5002ad8d3895", "sha256": "bcb247b0bbe4ce3681cd414978ddd4cf1fea285ec7d68e037deda52e2f36abc3"}, "downloads": -1, "filename": "pyrocket-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "631b78e221e01923aa6d5002ad8d3895", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12745, "upload_time": "2017-04-16T23:32:12", "upload_time_iso_8601": "2017-04-16T23:32:12.230913Z", "url": "https://files.pythonhosted.org/packages/90/71/f63426836ffa9578e0a04015e378912d1ae04ed89ac2b9e2bc22743f857c/pyrocket-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "8e3f7d42a2507da5594828adfa667105", "sha256": "04fd0562826b23009256f27518bffff77bfb7dbea30db33a561b5d697ba701ea"}, "downloads": -1, "filename": "pyrocket-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8e3f7d42a2507da5594828adfa667105", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17156, "upload_time": "2017-04-17T17:49:16", "upload_time_iso_8601": "2017-04-17T17:49:16.370711Z", "url": "https://files.pythonhosted.org/packages/93/58/2d5c6aa936953de5bc7d6212a58da7a16348e619870c5b1679a0089e7965/pyrocket-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "74d72291a481e46cf624b3b343dd2fe1", "sha256": "c34c22ee280870d24f2c0b2c8f7aa2ecce4d80cbc135464d52d2b92b5a471169"}, "downloads": -1, "filename": "pyrocket-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "74d72291a481e46cf624b3b343dd2fe1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17557, "upload_time": "2017-04-17T17:54:39", "upload_time_iso_8601": "2017-04-17T17:54:39.538570Z", "url": "https://files.pythonhosted.org/packages/34/35/40d515b8ecbc5045937f902dec294726385c84d1f3e927e917fda7802190/pyrocket-0.2.2-py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "b3470185b465ae27ab93bb9d0b958d76", "sha256": "48e61cc5ed9269b15bbdae93f7f45860df70933b47bd688d4ea80a3d9006ffe8"}, "downloads": -1, "filename": "pyrocket-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b3470185b465ae27ab93bb9d0b958d76", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17729, "upload_time": "2017-04-17T22:18:29", "upload_time_iso_8601": "2017-04-17T22:18:29.869037Z", "url": "https://files.pythonhosted.org/packages/9f/0d/b53348702f8e25aa08619aab88ce4b48d9cab0189fbced3d52995d011dd8/pyrocket-0.2.3-py3-none-any.whl", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "f1a46eb0416658ad07072a0071755898", "sha256": "8bfe479e0be975f1a4b0e37379ec8ea2ffa74addbc6c83193010ba26decefaea"}, "downloads": -1, "filename": "pyrocket-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f1a46eb0416658ad07072a0071755898", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18537, "upload_time": "2017-04-17T23:37:30", "upload_time_iso_8601": "2017-04-17T23:37:30.266476Z", "url": "https://files.pythonhosted.org/packages/69/f8/4ccc7dfcb4d63b66090b2d87ff4c0a71704f0e27ae1c8bade5187e53fbc9/pyrocket-0.2.4-py3-none-any.whl", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "509e6e0d2523aa4f6c1a1f4bbadee2ec", "sha256": "69dd3914e197d8e1278b070790e71d623f8ea5140e0b8333ee3ba3c3ffc114f4"}, "downloads": -1, "filename": "pyrocket-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "509e6e0d2523aa4f6c1a1f4bbadee2ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19093, "upload_time": "2017-04-19T23:20:52", "upload_time_iso_8601": "2017-04-19T23:20:52.383141Z", "url": "https://files.pythonhosted.org/packages/18/68/010878aa6f65e7023665c82ee108f737b4b113f53ce91612c80de6b9b382/pyrocket-0.2.5-py3-none-any.whl", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "4df17d057482099e1e5f4972feba00e4", "sha256": "65e81047bbe9ad2ad4ebf8ec67e834c95f1594674d248897cc77e43907c2b130"}, "downloads": -1, "filename": "pyrocket-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "4df17d057482099e1e5f4972feba00e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12407, "upload_time": "2018-07-03T21:35:25", "upload_time_iso_8601": "2018-07-03T21:35:25.947015Z", "url": "https://files.pythonhosted.org/packages/bb/15/d3f86101ac47fe3f37573b173b3396a7d32c81fdfe070feeffbee14042e0/pyrocket-0.2.6-py3-none-any.whl", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "a444107a6af82b47c5dc21360ed28159", "sha256": "825afd5306728b55cacb0306e139efba9761072b0f18e70e1609a24844dcafad"}, "downloads": -1, "filename": "pyrocket-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a444107a6af82b47c5dc21360ed28159", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12457, "upload_time": "2018-07-04T17:34:38", "upload_time_iso_8601": "2018-07-04T17:34:38.085746Z", "url": "https://files.pythonhosted.org/packages/7a/b0/bbf5260b8746dbcf72f21086fcb71d5547f2d9c5ff3a1a0e28db1c05b73a/pyrocket-0.2.7-py3-none-any.whl", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "752e406d0b507e19fc01c143284d8087", "sha256": "f72da5cf9f7bf741283e009016a57b014b84bddbfff7cd5120d1dcdc7ae74ac4"}, "downloads": -1, "filename": "pyrocket-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "752e406d0b507e19fc01c143284d8087", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12481, "upload_time": "2018-08-14T19:38:10", "upload_time_iso_8601": "2018-08-14T19:38:10.963557Z", "url": "https://files.pythonhosted.org/packages/8c/9e/2a0a5fb0e44d8b19ba6d4003b57bf1dcd459cd9b690331d43a04fbcc5bdd/pyrocket-0.2.8-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "752e406d0b507e19fc01c143284d8087", "sha256": "f72da5cf9f7bf741283e009016a57b014b84bddbfff7cd5120d1dcdc7ae74ac4"}, "downloads": -1, "filename": "pyrocket-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "752e406d0b507e19fc01c143284d8087", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12481, "upload_time": "2018-08-14T19:38:10", "upload_time_iso_8601": "2018-08-14T19:38:10.963557Z", "url": "https://files.pythonhosted.org/packages/8c/9e/2a0a5fb0e44d8b19ba6d4003b57bf1dcd459cd9b690331d43a04fbcc5bdd/pyrocket-0.2.8-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:57:43 2020"}