{"info": {"author": "Chris Bouchard", "author_email": "chris@upliftinglemma.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python :: 3 :: Only", "Topic :: Utilities"], "description": "braillegraph\n============\n\n**A library for creating graphs using Unicode braille characters**\n\nSomeone on reddit posted a screenshot of their xmobar setup, which used\nbraille characters to show the loads of their four processor cores, as\nwell as several other metrics. I was impressed that you could fit so\nmuch data into a single line. I immediately set out to implement braille\nbar graphs for myself.\n\nThe characters this script outputs are in the Unicode Braille Patterns\nsection, code points ``0x2800`` through ``0x28FF``. Not all fonts\nsupport these characters, so if you can't see the examples below check\nyour font settings.\n\nInstallation\n------------\n\nThis package is hosted on PyPI, so installation should be as simple as\n\n.. code:: sh\n\n    % pip install braillegraph\n\nNote that this package requires **at least Python 3.3**, so if your\ndefault Python installation is still Python 2, make sure you use\n``pip3``.\n\nIf you want to install from this repository, download it and run\n\n.. code:: sh\n\n    % python setup.py install\n\nAgain, use ``python3`` if necessary.\n\nUsage\n-----\n\nThere are two ways to use this package: imported in Python code, or as a\ncommand line script.\n\nTo use the package in Python, import it and use the ``vertical_graph``\nand ``horizontal_graph`` functions.\n\n.. code:: python\n\n    >>> from braillegraph import vertical_graph, horizontal_graph\n    >>> vertical_graph([3, 1, 4, 1])\n    '\u286f\u2825'\n    >>> vertical_graph([1, 2, 3, 4, 5, 6])\n    '\u28f7\u28c4\\n\u281b\u281b\u2813'\n    >>> print(vertical_graph([1, 2, 3, 4, 5, 6]))\n    \u28f7\u28c4\n    \u281b\u281b\u2813\n    >>> horizontal_graph([3, 1, 4, 1])\n    '\u28c6\u28c7'\n    >>> horizontal_graph([1, 2, 3, 4, 5, 6])\n    '\u2800\u2800\u28e0\\n\u28e0\u28fe\u28ff'\n    >>> print(horizontal_graph([1, 2, 3, 4, 5, 6]))\n    \u2800\u2800\u28e0\n    \u28e0\u28fe\u28ff\n\nAlternately, the arguments can be passed directly:\n\n.. code:: python\n\n    >>> vertical_graph(3, 1, 4, 1)\n    '\u286f\u2825'\n    >>> horizontal_graph(3, 1, 4, 1)\n    '\u28c6\u28c7'\n\nTo use the package as a script, run it as\n\n.. code:: sh\n\n    % python -m braillegraph vertical 3 1 4 1 5 9 2 6\n    \u286f\u2825\n    \u28ff\u28db\u28d3\u2812\u2802\n    % python -m braillegraph horizontal 3 1 4 1 5 9 2 6\n    \u2800\u2800\u2880\n    \u2800\u2800\u28f8\u28a0\n    \u28c6\u28c7\u28ff\u28fc\n\nFor a description of the arguments and flags, run\n\n.. code:: sh\n\n    % python -m braillegraph --help\n\nFunctions\n---------\n\nThe following functions are defined in the ``braillegraph`` package.\nThis documentation is also available via the built-in Python ``help``\nfunction.\n\nvertical\\_graph\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    vertical_graph(*args, sep='\\n')\n\nConsume an iterable of integers and produce a vertical bar graph using\nbraille characters.\n\nThe graph is vertical in that its dependent axis is the vertical axis.\nThus each value is represented as a row running left to right, and\nvalues are listed top to bottom.\n\nIf the iterable contains more than four integers, it will be chunked\ninto groups of four, separated with newlines by default.\n\n.. code:: python\n\n    >>> vertical_graph([1, 2, 3, 4])\n    '\u28f7\u28c4'\n    >>> vertical_graph([1, 2, 3, 4, 5, 6])\n    '\u28f7\u28c4\\n\u281b\u281b\u2813'\n    >>> print(vertical_graph([1, 2, 3, 4, 5, 6]))\n    \u28f7\u28c4\n    \u281b\u281b\u2813\n\nAlternately, the arguments can be passed directly:\n\n.. code:: python\n\n    >>> vertical_graph(1, 2, 3, 4)\n    '\u28f7\u28c4'\n\nThe optional ``sep`` parameter controls how groups are separated. If\n``sep`` is not passed (or if it is ``None``), they are put on their own\nlines. For example, to keep everything on one line, space could be used:\n\n.. code:: python\n\n    >>> vertical_graph(3, 1, 4, 1, 5, 9, 2, 6, sep=' ')\n    '\u286f\u2825 \u28ff\u28db\u28d3\u2812\u2802'\n\nhorizontal\\_graph\n~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    horizontal_graph(*args)\n\nConsume an iterable of integers and produce a horizontal bar graph using\nbraille characters.\n\nThe graph is horizontal in that its dependent axis is the horizontal\naxis. Thus each value is represented as a column running bottom to top,\nand values are listed left to right.\n\nThe graph is anchored to the bottom, so columns fill in from the bottom\nof the current braille character and the next character is added on top\nwhen needed. For columns with no dots, the blank braille character is\nused, not a space character.\n\n.. code:: python\n\n    >>> horizontal_graph([1, 2, 3, 4])\n    '\u28e0\u28fe'\n    >>> horizontal_graph([1, 2, 3, 4, 5, 6])\n    '\u2800\u2800\u28e0\\n\u28e0\u28fe\u28ff'\n    >>> print(horizontal_graph([1, 2, 3, 4, 5, 6]))\n    \u2800\u2800\u28e0\n    \u28e0\u28fe\u28ff\n\nAlternately, the arguments can be passed directly:\n\n.. code:: python\n\n    >>> horizontal_graph(1, 2, 3, 4)\n    '\u28e0\u28fe'\n\nTesting\n-------\n\nTo run the unit tests, use the ``unittest`` module from the standard\nPython library.\n\n.. code:: sh\n\n    % python -m unittest\n\nThis will automatically discover and run unit tests from the\n``braillegraph.tests`` package. The package also supports the\n``doctest`` module, which pulls examples out of docstrings.\n\n.. code:: sh\n\n    % python -m doctest braillegraph/braillegraph.py\n\nLicense\n-------\n\nThe code is licensed under the BSD 2-clause license. Please feel free to\nfork it, mess around with it, or submit issues and pull requests.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/chrisbouchard/braillegraph", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "braillegraph", "package_url": "https://pypi.org/project/braillegraph/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/braillegraph/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/chrisbouchard/braillegraph"}, "release_url": "https://pypi.org/project/braillegraph/0.10/", "requires_dist": null, "requires_python": null, "summary": "A library for creating graphs using Unicode braille characters", "version": "0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>A library for creating graphs using Unicode braille characters</strong></p>\n<p>Someone on reddit posted a screenshot of their xmobar setup, which used\nbraille characters to show the loads of their four processor cores, as\nwell as several other metrics. I was impressed that you could fit so\nmuch data into a single line. I immediately set out to implement braille\nbar graphs for myself.</p>\n<p>The characters this script outputs are in the Unicode Braille Patterns\nsection, code points <tt>0x2800</tt> through <tt>0x28FF</tt>. Not all fonts\nsupport these characters, so if you can\u2019t see the examples below check\nyour font settings.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>This package is hosted on PyPI, so installation should be as simple as</p>\n<pre>% pip install braillegraph\n</pre>\n<p>Note that this package requires <strong>at least Python 3.3</strong>, so if your\ndefault Python installation is still Python 2, make sure you use\n<tt>pip3</tt>.</p>\n<p>If you want to install from this repository, download it and run</p>\n<pre>% python setup.py install\n</pre>\n<p>Again, use <tt>python3</tt> if necessary.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>There are two ways to use this package: imported in Python code, or as a\ncommand line script.</p>\n<p>To use the package in Python, import it and use the <tt>vertical_graph</tt>\nand <tt>horizontal_graph</tt> functions.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">braillegraph</span> <span class=\"kn\">import</span> <span class=\"n\">vertical_graph</span><span class=\"p\">,</span> <span class=\"n\">horizontal_graph</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vertical_graph</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"s1\">'\u286f\u2825'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vertical_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"s1\">'\u28f7\u28c4</span><span class=\"se\">\\n</span><span class=\"s1\">\u281b\u281b\u2813'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vertical_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>\n<span class=\"err\">\u28f7\u28c4</span>\n<span class=\"err\">\u281b\u281b\u2813</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">horizontal_graph</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"s1\">'\u28c6\u28c7'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">horizontal_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"s1\">'\u2800\u2800\u28e0</span><span class=\"se\">\\n</span><span class=\"s1\">\u28e0\u28fe\u28ff'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">horizontal_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>\n<span class=\"err\">\u2800\u2800\u28e0</span>\n<span class=\"err\">\u28e0\u28fe\u28ff</span>\n</pre>\n<p>Alternately, the arguments can be passed directly:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vertical_graph</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'\u286f\u2825'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">horizontal_graph</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'\u28c6\u28c7'</span>\n</pre>\n<p>To use the package as a script, run it as</p>\n<pre>% python -m braillegraph vertical <span class=\"m\">3</span> <span class=\"m\">1</span> <span class=\"m\">4</span> <span class=\"m\">1</span> <span class=\"m\">5</span> <span class=\"m\">9</span> <span class=\"m\">2</span> <span class=\"m\">6</span>\n\u286f\u2825\n\u28ff\u28db\u28d3\u2812\u2802\n% python -m braillegraph horizontal <span class=\"m\">3</span> <span class=\"m\">1</span> <span class=\"m\">4</span> <span class=\"m\">1</span> <span class=\"m\">5</span> <span class=\"m\">9</span> <span class=\"m\">2</span> <span class=\"m\">6</span>\n\u2800\u2800\u2880\n\u2800\u2800\u28f8\u28a0\n\u28c6\u28c7\u28ff\u28fc\n</pre>\n<p>For a description of the arguments and flags, run</p>\n<pre>% python -m braillegraph --help\n</pre>\n</div>\n<div id=\"functions\">\n<h2>Functions</h2>\n<p>The following functions are defined in the <tt>braillegraph</tt> package.\nThis documentation is also available via the built-in Python <tt>help</tt>\nfunction.</p>\n<div id=\"vertical-graph\">\n<h3>vertical_graph</h3>\n<pre><span class=\"n\">vertical_graph</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>Consume an iterable of integers and produce a vertical bar graph using\nbraille characters.</p>\n<p>The graph is vertical in that its dependent axis is the vertical axis.\nThus each value is represented as a row running left to right, and\nvalues are listed top to bottom.</p>\n<p>If the iterable contains more than four integers, it will be chunked\ninto groups of four, separated with newlines by default.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vertical_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"s1\">'\u28f7\u28c4'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vertical_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"s1\">'\u28f7\u28c4</span><span class=\"se\">\\n</span><span class=\"s1\">\u281b\u281b\u2813'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vertical_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>\n<span class=\"err\">\u28f7\u28c4</span>\n<span class=\"err\">\u281b\u281b\u2813</span>\n</pre>\n<p>Alternately, the arguments can be passed directly:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vertical_graph</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"s1\">'\u28f7\u28c4'</span>\n</pre>\n<p>The optional <tt>sep</tt> parameter controls how groups are separated. If\n<tt>sep</tt> is not passed (or if it is <tt>None</tt>), they are put on their own\nlines. For example, to keep everything on one line, space could be used:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vertical_graph</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">' '</span><span class=\"p\">)</span>\n<span class=\"s1\">'\u286f\u2825 \u28ff\u28db\u28d3\u2812\u2802'</span>\n</pre>\n</div>\n<div id=\"horizontal-graph\">\n<h3>horizontal_graph</h3>\n<pre><span class=\"n\">horizontal_graph</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n<p>Consume an iterable of integers and produce a horizontal bar graph using\nbraille characters.</p>\n<p>The graph is horizontal in that its dependent axis is the horizontal\naxis. Thus each value is represented as a column running bottom to top,\nand values are listed left to right.</p>\n<p>The graph is anchored to the bottom, so columns fill in from the bottom\nof the current braille character and the next character is added on top\nwhen needed. For columns with no dots, the blank braille character is\nused, not a space character.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">horizontal_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"s1\">'\u28e0\u28fe'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">horizontal_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"s1\">'\u2800\u2800\u28e0</span><span class=\"se\">\\n</span><span class=\"s1\">\u28e0\u28fe\u28ff'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">horizontal_graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>\n<span class=\"err\">\u2800\u2800\u28e0</span>\n<span class=\"err\">\u28e0\u28fe\u28ff</span>\n</pre>\n<p>Alternately, the arguments can be passed directly:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">horizontal_graph</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"s1\">'\u28e0\u28fe'</span>\n</pre>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>To run the unit tests, use the <tt>unittest</tt> module from the standard\nPython library.</p>\n<pre>% python -m unittest\n</pre>\n<p>This will automatically discover and run unit tests from the\n<tt>braillegraph.tests</tt> package. The package also supports the\n<tt>doctest</tt> module, which pulls examples out of docstrings.</p>\n<pre>% python -m doctest braillegraph/braillegraph.py\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The code is licensed under the BSD 2-clause license. Please feel free to\nfork it, mess around with it, or submit issues and pull requests.</p>\n</div>\n\n          </div>"}, "last_serial": 1327201, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "75799af8783a3defe2c4a23b2b3d0267", "sha256": "4bff070980b8b7f79a55dd7881239343c356801eb2553c1d297c8faecdc7b118"}, "downloads": -1, "filename": "braillegraph-0.1.tar.gz", "has_sig": false, "md5_digest": "75799af8783a3defe2c4a23b2b3d0267", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2507, "upload_time": "2014-11-20T21:17:29", "upload_time_iso_8601": "2014-11-20T21:17:29.066729Z", "url": "https://files.pythonhosted.org/packages/37/89/89fa35e1bb0bb5753f14d6f6c1ed726d3ce647050f8705925aabdcc8811d/braillegraph-0.1.tar.gz", "yanked": false}], "0.10": [{"comment_text": "built for Darwin-14.0.0", "digests": {"md5": "59d21bcfd2f846e434d0f88a53b956bb", "sha256": "872fd2d8a7a58dffef920197d8cc0e33855e5e91098ff6db294c02f835798e04"}, "downloads": -1, "filename": "braillegraph-0.10.macosx-10.10-x86_64.tar.gz", "has_sig": false, "md5_digest": "59d21bcfd2f846e434d0f88a53b956bb", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 8608, "upload_time": "2014-12-01T20:51:05", "upload_time_iso_8601": "2014-12-01T20:51:05.777909Z", "url": "https://files.pythonhosted.org/packages/20/25/b387ea201f32f5bc52d4b48706ef9f6cc70ff531dad01862019172a78832/braillegraph-0.10.macosx-10.10-x86_64.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "151574dc3ff3ef072ae758efa12279f8", "sha256": "48475fdbdac95d8e8126c38e578c02df8153e4b156bc2718f55dac0a6cf4ec02"}, "downloads": -1, "filename": "braillegraph-0.2.tar.gz", "has_sig": false, "md5_digest": "151574dc3ff3ef072ae758efa12279f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2486, "upload_time": "2014-11-20T21:22:14", "upload_time_iso_8601": "2014-11-20T21:22:14.623296Z", "url": "https://files.pythonhosted.org/packages/8e/0d/c4aff977a93095b73a0a2791b0b0defbcec92be936d92af68a73dbbbcdf7/braillegraph-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "cb9ae2f45a87c42daf1995634a2f988d", "sha256": "8315282dffe1805053dc0339bd8c3e800f2db3634af130eea9d1dfecdd7be74f"}, "downloads": -1, "filename": "braillegraph-0.3.tar.gz", "has_sig": false, "md5_digest": "cb9ae2f45a87c42daf1995634a2f988d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2517, "upload_time": "2014-11-20T21:33:21", "upload_time_iso_8601": "2014-11-20T21:33:21.244898Z", "url": "https://files.pythonhosted.org/packages/a3/80/fa833a42e01727142c1759f7e5d0096f98e8512fb3ecf903a00ba698f23b/braillegraph-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "114e0f955820f925740a0a039e37040d", "sha256": "bdbf23a26c55076cfaa103fa69fe42914e1c602e468e9c59933a43203d427749"}, "downloads": -1, "filename": "braillegraph-0.4.tar.gz", "has_sig": false, "md5_digest": "114e0f955820f925740a0a039e37040d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3748, "upload_time": "2014-11-21T17:52:57", "upload_time_iso_8601": "2014-11-21T17:52:57.437510Z", "url": "https://files.pythonhosted.org/packages/98/23/4639a5b6fb3c88758145ade3554bea64cfc2bafb3224ce139406de47f344/braillegraph-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "9b7c2a5c4d42c9464bab7ff578fc6f4a", "sha256": "8e63c73aff3bcd38e673a169e629a7e02c0b6f4e2e1420e1004b02d5b6885641"}, "downloads": -1, "filename": "braillegraph-0.5.tar.gz", "has_sig": false, "md5_digest": "9b7c2a5c4d42c9464bab7ff578fc6f4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5035, "upload_time": "2014-11-23T04:26:47", "upload_time_iso_8601": "2014-11-23T04:26:47.872142Z", "url": "https://files.pythonhosted.org/packages/16/a6/ddf6213a2120b6037e49bf16bc90c270ba3928c8ebdc204b04c9a1bf93a4/braillegraph-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "941df95ef2d1683060a6ece3e42c758a", "sha256": "dd5656c371c4a60734013222b9ff9dbf4c27105090e66e5ef64cde1f6708d636"}, "downloads": -1, "filename": "braillegraph-0.6.tar.gz", "has_sig": false, "md5_digest": "941df95ef2d1683060a6ece3e42c758a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5092, "upload_time": "2014-11-23T04:46:24", "upload_time_iso_8601": "2014-11-23T04:46:24.463931Z", "url": "https://files.pythonhosted.org/packages/74/cf/f70fb67f740a12754c93039bf7977a2ca79737c8a5900c900c77a7afc13e/braillegraph-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "built for Darwin-14.0.0", "digests": {"md5": "95ea5718fb3384f635099d2d9bba7265", "sha256": "81549bb6ec698fc3b542d27abeb42c33c84f2189e8ed5e1e221107a322aa52c1"}, "downloads": -1, "filename": "braillegraph-0.7.macosx-10.10-x86_64.tar.gz", "has_sig": false, "md5_digest": "95ea5718fb3384f635099d2d9bba7265", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 7597, "upload_time": "2014-12-01T20:19:36", "upload_time_iso_8601": "2014-12-01T20:19:36.977513Z", "url": "https://files.pythonhosted.org/packages/8a/0a/7d82670637611e2c38e0b4b3156f4749c92ee406502204894c109154227a/braillegraph-0.7.macosx-10.10-x86_64.tar.gz", "yanked": false}], "0.8": [{"comment_text": "built for Darwin-14.0.0", "digests": {"md5": "b2a8996b407c7ade8fe72b445bb469c0", "sha256": "d1e520c8c828367aa0e0f94aafb5a854aafe0854f4aea46f7915504dbc6318ef"}, "downloads": -1, "filename": "braillegraph-0.8.macosx-10.10-x86_64.tar.gz", "has_sig": false, "md5_digest": "b2a8996b407c7ade8fe72b445bb469c0", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 7605, "upload_time": "2014-12-01T20:35:40", "upload_time_iso_8601": "2014-12-01T20:35:40.416782Z", "url": "https://files.pythonhosted.org/packages/0e/08/9c8c08930b2ecc8b264f3612eadee12b52ff175397ed7b834463e916913c/braillegraph-0.8.macosx-10.10-x86_64.tar.gz", "yanked": false}], "0.9": [{"comment_text": "built for Darwin-14.0.0", "digests": {"md5": "425e5b1c3cba1653ea6422301b782bc4", "sha256": "ce5a921d858971c20277bfbc48ae6ab5b551578d61bf47400db1f5b0518d307a"}, "downloads": -1, "filename": "braillegraph-0.9.macosx-10.10-x86_64.tar.gz", "has_sig": false, "md5_digest": "425e5b1c3cba1653ea6422301b782bc4", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 8595, "upload_time": "2014-12-01T20:45:26", "upload_time_iso_8601": "2014-12-01T20:45:26.968613Z", "url": "https://files.pythonhosted.org/packages/ed/82/7d113c70eea2c8d5de6dc4eaf9cac22a59e46c7f7d1ad395885373c85401/braillegraph-0.9.macosx-10.10-x86_64.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "built for Darwin-14.0.0", "digests": {"md5": "59d21bcfd2f846e434d0f88a53b956bb", "sha256": "872fd2d8a7a58dffef920197d8cc0e33855e5e91098ff6db294c02f835798e04"}, "downloads": -1, "filename": "braillegraph-0.10.macosx-10.10-x86_64.tar.gz", "has_sig": false, "md5_digest": "59d21bcfd2f846e434d0f88a53b956bb", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 8608, "upload_time": "2014-12-01T20:51:05", "upload_time_iso_8601": "2014-12-01T20:51:05.777909Z", "url": "https://files.pythonhosted.org/packages/20/25/b387ea201f32f5bc52d4b48706ef9f6cc70ff531dad01862019172a78832/braillegraph-0.10.macosx-10.10-x86_64.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:25 2020"}