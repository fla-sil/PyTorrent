{"info": {"author": "John Wiseman", "author_email": "jjwiseman@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "arduinoserial.py \n================\n\n``arduinoserial.py`` is a Python port of `Tod E. Kurt's\narduino-serial.c program`_ for communicating with an Arduino\nmicrocontroller board over a serial port. It only uses standard Python\nmodules (notably ``termios`` and ``fcntl``) and does not require any\nspecial serial communications modules.\n\n\nLike Tod's program, you can use it from the command line.\n\nSend the string \"a5050\" to Arduino::\n\n  $ ./arduinoserial.py -b 19200 -p /dev/tty.usbserial-A50018fz -s a5050\n\nThis would cause the pan-tilt head described in the `lemonodor post \"Tilt\"`_ to\nreturn to its middle position.\n\nRecieve a line of text from Arduino, wait 1000 milliseconds, then send\nthe string \"a0000\"::\n\n  $ ./arduinoserial.py -b 19200 -p /dev/tty.usbserial-A50018fz -r -d 1000 -s a0000\n\nComplete command line usage information::\n\n  Usage: arduinoserial.py -p <serialport> [OPTIONS]\n  Options:\n    -h, --help                   Print this help message.\n    -p, --port=SERIALPORT        Serial port Arduino is on.\n    -b, --baud=BAUDRATE          Baudrate (bps) of Arduino.\n    -s, --send=DATA              Send data to Arduino.\n    -r, --receive                Receive data from Arduino & print it out.\n    -n  --num=NUM                Send a number as a single byte.\n    -d  --delay=MILLIS           Delay for specified milliseconds.\n\n  Note: Order is important. Set '-b' before doing '-p'.\n        Used to make series of actions:  '-d 2000 -s hello -d 100 -r'\n        means 'wait 2 seconds, send 'hello', wait 100 msec, get reply'.\n\nYou can also import ``arduinoserial`` and use its ``SerialPort`` class\nto communicate with an Arduino from a Python program::\n\n  import arduinoserial\n\n  arduino = arduinoserial.SerialPort('/dev/ttyUSB0', 19200)\n  print arduino.read_until('\\n')\n  arduino.write('a5050')\n\nAlso see the `lemonodor post \"arduino_serial\"`_.\n\n\nMIT License\n-----------\n\nCopyright (c) 2009 John Wiseman\n\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n.. _Tod E. Kurt's arduino-serial.c program: http://todbot.com/blog/2006/12/06/arduino-serial-c-code-to-talk-to-arduino/\n.. _lemonodor post \"Tilt\": http://lemonodor.com/archives/2008/02/tilt.html\n.. _lemonodor post \"arduino_serial\": http://lemonodor.com/archives/2008/02/arduino_serial.html", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wiseman/arduino-serial", "keywords": "nlp nlu naturallanguage text classification development", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "arduinoserial", "package_url": "https://pypi.org/project/arduinoserial/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/arduinoserial/", "project_urls": {"Homepage": "https://github.com/wiseman/arduino-serial"}, "release_url": "https://pypi.org/project/arduinoserial/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "A Python interface to Arduino serial ports.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>arduinoserial.py</tt> is a Python port of <a href=\"http://todbot.com/blog/2006/12/06/arduino-serial-c-code-to-talk-to-arduino/\" rel=\"nofollow\">Tod E. Kurt\u2019s\narduino-serial.c program</a> for communicating with an Arduino\nmicrocontroller board over a serial port. It only uses standard Python\nmodules (notably <tt>termios</tt> and <tt>fcntl</tt>) and does not require any\nspecial serial communications modules.</p>\n<p>Like Tod\u2019s program, you can use it from the command line.</p>\n<p>Send the string \u201ca5050\u201d to Arduino:</p>\n<pre>$ ./arduinoserial.py -b 19200 -p /dev/tty.usbserial-A50018fz -s a5050\n</pre>\n<p>This would cause the pan-tilt head described in the <a href=\"http://lemonodor.com/archives/2008/02/tilt.html\" rel=\"nofollow\">lemonodor post \u201cTilt\u201d</a> to\nreturn to its middle position.</p>\n<p>Recieve a line of text from Arduino, wait 1000 milliseconds, then send\nthe string \u201ca0000\u201d:</p>\n<pre>$ ./arduinoserial.py -b 19200 -p /dev/tty.usbserial-A50018fz -r -d 1000 -s a0000\n</pre>\n<p>Complete command line usage information:</p>\n<pre>Usage: arduinoserial.py -p &lt;serialport&gt; [OPTIONS]\nOptions:\n  -h, --help                   Print this help message.\n  -p, --port=SERIALPORT        Serial port Arduino is on.\n  -b, --baud=BAUDRATE          Baudrate (bps) of Arduino.\n  -s, --send=DATA              Send data to Arduino.\n  -r, --receive                Receive data from Arduino &amp; print it out.\n  -n  --num=NUM                Send a number as a single byte.\n  -d  --delay=MILLIS           Delay for specified milliseconds.\n\nNote: Order is important. Set '-b' before doing '-p'.\n      Used to make series of actions:  '-d 2000 -s hello -d 100 -r'\n      means 'wait 2 seconds, send 'hello', wait 100 msec, get reply'.\n</pre>\n<p>You can also import <tt>arduinoserial</tt> and use its <tt>SerialPort</tt> class\nto communicate with an Arduino from a Python program:</p>\n<pre>import arduinoserial\n\narduino = arduinoserial.SerialPort('/dev/ttyUSB0', 19200)\nprint arduino.read_until('\\n')\narduino.write('a5050')\n</pre>\n<p>Also see the <a href=\"http://lemonodor.com/archives/2008/02/arduino_serial.html\" rel=\"nofollow\">lemonodor post \u201carduino_serial\u201d</a>.</p>\n<div id=\"mit-license\">\n<h2>MIT License</h2>\n<p>Copyright (c) 2009 John Wiseman</p>\n<p>Permission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \u201cSoftware\u201d), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:</p>\n<p>The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.</p>\n</div>\n\n          </div>"}, "last_serial": 1946124, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "e7575e6b62093e3b3a6be5fad881d95d", "sha256": "4fb05ef0238b1d41250cf4b6d7811822304da0cebdc1c6621877530c46884660"}, "downloads": -1, "filename": "arduinoserial-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e7575e6b62093e3b3a6be5fad881d95d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5567, "upload_time": "2016-02-08T18:58:22", "upload_time_iso_8601": "2016-02-08T18:58:22.135626Z", "url": "https://files.pythonhosted.org/packages/6b/f4/b0871155a9eb5ed68cee80f9ee496e49b9fc9bc5998e2ffe86b27a01904e/arduinoserial-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e7575e6b62093e3b3a6be5fad881d95d", "sha256": "4fb05ef0238b1d41250cf4b6d7811822304da0cebdc1c6621877530c46884660"}, "downloads": -1, "filename": "arduinoserial-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e7575e6b62093e3b3a6be5fad881d95d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5567, "upload_time": "2016-02-08T18:58:22", "upload_time_iso_8601": "2016-02-08T18:58:22.135626Z", "url": "https://files.pythonhosted.org/packages/6b/f4/b0871155a9eb5ed68cee80f9ee496e49b9fc9bc5998e2ffe86b27a01904e/arduinoserial-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:20 2020"}