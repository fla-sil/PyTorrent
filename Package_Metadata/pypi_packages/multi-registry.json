{"info": {"author": "Evgeny.Fadeev", "author_email": "evgeny.fadeev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Communications :: Usenet News"], "description": "Allows to aggregate key-value data from many sources.\n    Can be used, for example, as a proxy to settings object in Django framework.\n\n    The sources of key-value data are appended to :class:`MultiRegistry`\n    vi ``append()`` method, then looked up via standard Python\n    dotted notation, as explained in more detail below.\n\n    Upon access, attributes will be looked up in the parent objects\n    in the order the latter were appended.\n\n    For example, if we have two settings like objects:\n    ``A`` with attribute ``a``\n    and ``B`` with attribute ``b``\n    and a third one, found in module importable from ``'some.registry.C'``,\n    we can construct the registry as:\n\n    >>>r = MultiRegistry(A, B, 'some.registry.C')\n\n    or alternatively:\n\n    >>>r = MultiRegistry()\n    >>>r.append(A)\n    >>>r.append(B)\n    >>>r.insert(2, 'some.registry.C')\n\n    .. note::\n        The registries can be provided as python objects or\n        dotted python paths. In the latter case an import error will\n        be raised if module at the path does not exist\n\n    then access the registry as:\n\n    r.b - attrubute b will be first looked\n    up in the object A, then in the object B, where\n    it will be found.\n\n    If there is an attribute present in more than one appended object,\n    the first one will be returned - in the same order the \n    registries are stored internally, which takes into account:\n\n    * order the registries were provided at the object initialization\n    * order of ``append()`` calls.\n    * taking into account indices provided with ``insert()`` call\n\n    If the attribute is not found, attribute error will be \n    raised.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://askbot.org", "keywords": "settings,registry", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "multi-registry", "package_url": "https://pypi.org/project/multi-registry/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/multi-registry/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://askbot.org"}, "release_url": "https://pypi.org/project/multi-registry/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "A module that aggregates key-value attributes from multiple sources", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Allows to aggregate key-value data from many sources.<br>    Can be used, for example, as a proxy to settings object in Django framework.<br><br>    The sources of key-value data are appended to :class:`MultiRegistry`<br>    vi ``append()`` method, then looked up via standard Python<br>    dotted notation, as explained in more detail below.<br><br>    Upon access, attributes will be looked up in the parent objects<br>    in the order the latter were appended.<br><br>    For example, if we have two settings like objects:<br>    ``A`` with attribute ``a``<br>    and ``B`` with attribute ``b``<br>    and a third one, found in module importable from ``'some.registry.C'``,<br>    we can construct the registry as:<br><br>    &gt;&gt;&gt;r = MultiRegistry(A, B, 'some.registry.C')<br><br>    or alternatively:<br><br>    &gt;&gt;&gt;r = MultiRegistry()<br>    &gt;&gt;&gt;r.append(A)<br>    &gt;&gt;&gt;r.append(B)<br>    &gt;&gt;&gt;r.insert(2, 'some.registry.C')<br><br>    .. note::<br>        The registries can be provided as python objects or<br>        dotted python paths. In the latter case an import error will<br>        be raised if module at the path does not exist<br><br>    then access the registry as:<br><br>    r.b - attrubute b will be first looked<br>    up in the object A, then in the object B, where<br>    it will be found.<br><br>    If there is an attribute present in more than one appended object,<br>    the first one will be returned - in the same order the <br>    registries are stored internally, which takes into account:<br><br>    * order the registries were provided at the object initialization<br>    * order of ``append()`` calls.<br>    * taking into account indices provided with ``insert()`` call<br><br>    If the attribute is not found, attribute error will be <br>    raised.\n          </div>"}, "last_serial": 795080, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "611e08174875bc63ff6ebacb6a5757a9", "sha256": "c5e0f819cbd2520031271f9627314aec68066a423cfb8a49082017b2c46d9d4a"}, "downloads": -1, "filename": "multi-registry-0.0.2.tar.gz", "has_sig": false, "md5_digest": "611e08174875bc63ff6ebacb6a5757a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7671, "upload_time": "2011-09-15T17:27:06", "upload_time_iso_8601": "2011-09-15T17:27:06.682519Z", "url": "https://files.pythonhosted.org/packages/f0/f7/f64cb2047ac63ebea54f7c52f3a0b27133427798881548956569bdc31435/multi-registry-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "611e08174875bc63ff6ebacb6a5757a9", "sha256": "c5e0f819cbd2520031271f9627314aec68066a423cfb8a49082017b2c46d9d4a"}, "downloads": -1, "filename": "multi-registry-0.0.2.tar.gz", "has_sig": false, "md5_digest": "611e08174875bc63ff6ebacb6a5757a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7671, "upload_time": "2011-09-15T17:27:06", "upload_time_iso_8601": "2011-09-15T17:27:06.682519Z", "url": "https://files.pythonhosted.org/packages/f0/f7/f64cb2047ac63ebea54f7c52f3a0b27133427798881548956569bdc31435/multi-registry-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:20 2020"}