{"info": {"author": "Imre Purret, P\u00e4ivi Kristiina Jokinen", "author_email": "Imre.Purret@gmail.com, kristiina.jokinen@ut.ee", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha"], "description": "Knowledge base\r\nFor getting information into the program we created a couple of text files: PersonRoom.txt which contains information with persons name and their room number and RoomLocation.txt which contains information with the room number and short information about how to get into that room.\r\nWe also use the third file RegularExpression.txt, which will be generated by program. This file contains information with persons name and a regular expression about how to ascertain that it is the right person.\r\n\r\nProgram\r\nProgram checks if file RegularExpression.txt exists, if not it creates it. For creating it, it uses information from file PersonRoom.txt, mainly the information about names.\r\nIf RegularExpression.txt exists then checks if it is up to date, if not then updates it. If yes then it sets up the pyttsx engine and reads in the files with knowledge. After that it generates a Tkinter window and starts waiting for the user input.\r\nProgram sets up the pyttsx engine, reads in the text file about knowledge and generates a Tkinter window. After that it will be waiting for the users text input.\r\nAfter getting an input it starts checking if the input matches to any of the regular expressions about persons given in file. If no match was found it calculates all Levenshtein distances[3] from all ordered word pairs given in input to all person names given in PersonRoom.txt file. It finds smallest distance and selects the person who had the smallest distance with two words in input and in that case the program says: \"Could not find person with this name.\" But maybe you are looking for and adds name what has closest distance. Same information is also shown on the Tkinter window as well. Then program moves to the second state in which it first recognizes if the user confirms that it is correct person. If not then it starts looking again. If it is confirmed then the program generates the route to the room using the knowledge from the text files and gives the route as a speech input and also as a text input to Tkinter window.\r\nIf the input string matches to a regular expression then it generates the route to the room using the knowledge from the text file and gives the route as a speech input and also as a text input to Tkinter window.\r\nEstonian language has particular sounds, corresponding to the letters \"\u00dc\", \"\u00d5\", \"\u00d6\" and \"\u00c4\" which are not found in English. Before checking if the input string matches to a regular expression, the Unicode characters are replaced by the ASCII code characters, and thus we have replacements \"\u00dc\" -> \"Y\", \"\u00d6\" and \"\u00d5\" -> \"O\" as well as \"\u00c4\" -> \"A\". The same replacements occur with pronunciation when giving a speech output from program.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/imrePurret/Speech-based_Interactive_Location_Guide_For_Liivi_2/archive/0.1.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "speech synthesis, knowledge base, room finder", "license": "", "maintainer": "", "maintainer_email": "", "name": "Speech_based_Interactive_Location_Guide", "package_url": "https://pypi.org/project/Speech_based_Interactive_Location_Guide/", "platform": "It is tested on Windows 7 and Mac OS X", "project_url": "https://pypi.org/project/Speech_based_Interactive_Location_Guide/", "project_urls": {"Download": "https://github.com/imrePurret/Speech-based_Interactive_Location_Guide_For_Liivi_2/archive/0.1.zip"}, "release_url": "https://pypi.org/project/Speech_based_Interactive_Location_Guide/0.2/", "requires_dist": null, "requires_python": null, "summary": "Speech-based Interactive Location Guide for Liivi 2", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Knowledge base\nFor getting information into the program we created a couple of text files: PersonRoom.txt which contains information with persons name and their room number and RoomLocation.txt which contains information with the room number and short information about how to get into that room.\nWe also use the third file RegularExpression.txt, which will be generated by program. This file contains information with persons name and a regular expression about how to ascertain that it is the right person.</p>\n<p>Program\nProgram checks if file RegularExpression.txt exists, if not it creates it. For creating it, it uses information from file PersonRoom.txt, mainly the information about names.\nIf RegularExpression.txt exists then checks if it is up to date, if not then updates it. If yes then it sets up the pyttsx engine and reads in the files with knowledge. After that it generates a Tkinter window and starts waiting for the user input.\nProgram sets up the pyttsx engine, reads in the text file about knowledge and generates a Tkinter window. After that it will be waiting for the users text input.\nAfter getting an input it starts checking if the input matches to any of the regular expressions about persons given in file. If no match was found it calculates all Levenshtein distances[3] from all ordered word pairs given in input to all person names given in PersonRoom.txt file. It finds smallest distance and selects the person who had the smallest distance with two words in input and in that case the program says: \u201cCould not find person with this name.\u201d But maybe you are looking for and adds name what has closest distance. Same information is also shown on the Tkinter window as well. Then program moves to the second state in which it first recognizes if the user confirms that it is correct person. If not then it starts looking again. If it is confirmed then the program generates the route to the room using the knowledge from the text files and gives the route as a speech input and also as a text input to Tkinter window.\nIf the input string matches to a regular expression then it generates the route to the room using the knowledge from the text file and gives the route as a speech input and also as a text input to Tkinter window.\nEstonian language has particular sounds, corresponding to the letters \u201c\u00dc\u201d, \u201c\u00d5\u201d, \u201c\u00d6\u201d and \u201c\u00c4\u201d which are not found in English. Before checking if the input string matches to a regular expression, the Unicode characters are replaced by the ASCII code characters, and thus we have replacements \u201c\u00dc\u201d -&gt; \u201cY\u201d, \u201c\u00d6\u201d and \u201c\u00d5\u201d -&gt; \u201cO\u201d as well as \u201c\u00c4\u201d -&gt; \u201cA\u201d. The same replacements occur with pronunciation when giving a speech output from program.</p>\n\n          </div>"}, "last_serial": 1181119, "releases": {"0.2": []}, "urls": [], "timestamp": "Fri May  8 03:05:35 2020"}