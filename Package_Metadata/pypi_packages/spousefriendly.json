{"info": {"author": "Luke Plant", "author_email": "L.Plant.98@cantab.net", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4"], "description": "===============================\r\nspousefriendly\r\n===============================\r\n\r\n.. image:: https://img.shields.io/pypi/v/spousefriendly.svg\r\n        :target: https://pypi.python.org/pypi/spousefriendly\r\n\r\n\r\nBe nice to your spouse (or other person who needs to run your scripts) - give your command line scripts some GUI feedback when needed.\r\n\r\n* Free software: ISC license\r\n* Documentation: https://bitbucket.org/spookylukey/spousefriendly\r\n\r\nMotivation\r\n----------\r\n\r\nDevelopers usually like to run scripts from a terminal. In addition,\r\nfor these kind of Python scripts, if something goes wrong, the easiest thing to\r\ndo is let it fail 'ungracefully', at which point you get a helpful stacktrace on\r\nthe screen. And if it goes well, it should just exit without printing anything.\r\n\r\nFor your spouse or friend who just wants to double click an icon, both these\r\nbehaviours will be very confusing. They normally want confirmation that it\r\nworked and is finished, and if it doesn't it should show some kind of nice error\r\nmessage.\r\n\r\nThis package provides some simple wrappers (normally context managers) so that\r\nyou can get the best of both worlds.\r\n\r\nBasic usage\r\n-----------\r\n\r\nTake a typical script::\r\n\r\n    def main():\r\n        # Stuff here\r\n\r\n\r\n    if __name__ == '__main__':\r\n        main()\r\n\r\n\r\nSimply wrap the call to main in a spousefriendly.friendly_success_and_failure with block::\r\n\r\n\r\n    import spousefriendly\r\n\r\n    if __name__ == '__main__':\r\n        with spousefriendly.friendly_success_and_failure():\r\n            main()\r\n\r\n\r\nIf running from a terminal, there will be no change in behaviour. From a GUI,\r\nhowever (e.g. launched from a file manager), upon exit there will be a success\r\nmessage, or a failure message if appropriate.\r\n\r\n\r\nDetailed usage\r\n--------------\r\n\r\n``friendly_success_and_failure`` composes two context managers::\r\n\r\n  spousefriendly.friendly_success(success_message='Optional success message')\r\n\r\n  spousefriendly.friendly_failure(failure_message='Optional failure message')\r\n\r\nBoth ``success_message`` and ``failure_message`` can also be passed to\r\n``friendly_success_and_failure`` as keyword arguments. Sensible defaults are\r\nused if not supplied.\r\n\r\n\r\nLimitations\r\n-----------\r\n\r\nObviously, the context managers can't protect against anything that happens\r\noutside their scope (e.g. import errors etc.).\r\n\r\n\r\nTODO\r\n----\r\n\r\nWindows support! This is the most obvious one. Since I don't use Windows, I'm\r\nnot in a position to test this. I've put some rudimentary things in, but it\r\nprobably doesn't work.\r\n\r\n\r\n\r\n\r\nHistory\r\n-------\r\n\r\n0.1.0 (2015-01-11)\r\n---------------------\r\n\r\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.com/spookylukey/spousefriendly", "keywords": "spousefriendly", "license": "ISCL", "maintainer": "", "maintainer_email": "", "name": "spousefriendly", "package_url": "https://pypi.org/project/spousefriendly/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/spousefriendly/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.com/spookylukey/spousefriendly"}, "release_url": "https://pypi.org/project/spousefriendly/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Be nice to your spouse - give your command line scripts some GUI feedback when needed.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/spousefriendly\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/spousefriendly.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11cdd2deeaeeac37cdff99dc601fdc4a01211f9b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73706f757365667269656e646c792e737667\"></a>\n<p>Be nice to your spouse (or other person who needs to run your scripts) - give your command line scripts some GUI feedback when needed.</p>\n<ul>\n<li>Free software: ISC license</li>\n<li>Documentation: <a href=\"https://bitbucket.org/spookylukey/spousefriendly\" rel=\"nofollow\">https://bitbucket.org/spookylukey/spousefriendly</a></li>\n</ul>\n<div id=\"motivation\">\n<h2>Motivation</h2>\n<p>Developers usually like to run scripts from a terminal. In addition,\nfor these kind of Python scripts, if something goes wrong, the easiest thing to\ndo is let it fail \u2018ungracefully\u2019, at which point you get a helpful stacktrace on\nthe screen. And if it goes well, it should just exit without printing anything.</p>\n<p>For your spouse or friend who just wants to double click an icon, both these\nbehaviours will be very confusing. They normally want confirmation that it\nworked and is finished, and if it doesn\u2019t it should show some kind of nice error\nmessage.</p>\n<p>This package provides some simple wrappers (normally context managers) so that\nyou can get the best of both worlds.</p>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<p>Take a typical script:</p>\n<pre>def main():\n    # Stuff here\n\n\nif __name__ == '__main__':\n    main()\n</pre>\n<p>Simply wrap the call to main in a spousefriendly.friendly_success_and_failure with block:</p>\n<pre>import spousefriendly\n\nif __name__ == '__main__':\n    with spousefriendly.friendly_success_and_failure():\n        main()\n</pre>\n<p>If running from a terminal, there will be no change in behaviour. From a GUI,\nhowever (e.g. launched from a file manager), upon exit there will be a success\nmessage, or a failure message if appropriate.</p>\n</div>\n<div id=\"detailed-usage\">\n<h2>Detailed usage</h2>\n<p><tt>friendly_success_and_failure</tt> composes two context managers:</p>\n<pre>spousefriendly.friendly_success(success_message='Optional success message')\n\nspousefriendly.friendly_failure(failure_message='Optional failure message')\n</pre>\n<p>Both <tt>success_message</tt> and <tt>failure_message</tt> can also be passed to\n<tt>friendly_success_and_failure</tt> as keyword arguments. Sensible defaults are\nused if not supplied.</p>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>Obviously, the context managers can\u2019t protect against anything that happens\noutside their scope (e.g. import errors etc.).</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<p>Windows support! This is the most obvious one. Since I don\u2019t use Windows, I\u2019m\nnot in a position to test this. I\u2019ve put some rudimentary things in, but it\nprobably doesn\u2019t work.</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n</div>\n<div id=\"id1\">\n<h2>0.1.0 (2015-01-11)</h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1723335, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0c65ff6315b683f2984c92f249490227", "sha256": "1309dfa01a38d1a07a80ebc541ba2d4131b5639c9811ad818026def85b290076"}, "downloads": -1, "filename": "spousefriendly-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0c65ff6315b683f2984c92f249490227", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 5842, "upload_time": "2015-09-15T10:47:44", "upload_time_iso_8601": "2015-09-15T10:47:44.114646Z", "url": "https://files.pythonhosted.org/packages/3d/ed/249eeb6410588704dea46cb761047f9c86478cfd5ef2e7e617a22c4d62fe/spousefriendly-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc528dff8699d55f6f44eecedbdd3210", "sha256": "0c6dd31b4b8613d092564bc06499d12588df69957a140a737f9fa8c958e6aa01"}, "downloads": -1, "filename": "spousefriendly-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dc528dff8699d55f6f44eecedbdd3210", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6661, "upload_time": "2015-09-15T10:47:39", "upload_time_iso_8601": "2015-09-15T10:47:39.830140Z", "url": "https://files.pythonhosted.org/packages/43/c9/5162102859e865c578748e3425b49bf6d5a37ed4a4431badd7f60be914e3/spousefriendly-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c65ff6315b683f2984c92f249490227", "sha256": "1309dfa01a38d1a07a80ebc541ba2d4131b5639c9811ad818026def85b290076"}, "downloads": -1, "filename": "spousefriendly-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0c65ff6315b683f2984c92f249490227", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 5842, "upload_time": "2015-09-15T10:47:44", "upload_time_iso_8601": "2015-09-15T10:47:44.114646Z", "url": "https://files.pythonhosted.org/packages/3d/ed/249eeb6410588704dea46cb761047f9c86478cfd5ef2e7e617a22c4d62fe/spousefriendly-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc528dff8699d55f6f44eecedbdd3210", "sha256": "0c6dd31b4b8613d092564bc06499d12588df69957a140a737f9fa8c958e6aa01"}, "downloads": -1, "filename": "spousefriendly-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dc528dff8699d55f6f44eecedbdd3210", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6661, "upload_time": "2015-09-15T10:47:39", "upload_time_iso_8601": "2015-09-15T10:47:39.830140Z", "url": "https://files.pythonhosted.org/packages/43/c9/5162102859e865c578748e3425b49bf6d5a37ed4a4431badd7f60be914e3/spousefriendly-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:26 2020"}