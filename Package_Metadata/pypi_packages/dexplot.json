{"info": {"author": "Ted Petrou", "author_email": "petrou.theodore@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# Dexplot\n\nA Python library for making data visualizations.\n\nThe current aim of Dexplot is to make data visualization creation in Python more robust and straightforward. Dexplot is built on top of Matplotlib and accepts Pandas DataFrames as inputs. \n\n## Installation\n\n`pip install dexplot`\n\n## Goals\n\nThe primary goals for Dexplot are:\n\n* Maintain a very consistent API with as few functions as necessary to make the desired statistical plots\n* Allow the user to tweak the plots without digging into Matplotlib\n\n\n## Tidy Data from Pandas\nDexplot only accepts Pandas DataFrames as input for its plotting functions that are in \"tidy\" form. \n\n## Sample plots\nDexplot currently maintains two primary functions, `aggplot` which is used to aggregate data and `jointplot`, which is used to plot raw values from two variables against each other. `heatmap` is another function available that produces just a single heatmap.\n\n`aggplot` can create five different kinds of plots.\n\n* `bar`\n* `line`\n* `box`\n* `hist`\n* `kde`\n\n`jointplot` can create four different kinds of plots\n\n* `scatter`\n* `line`\n* `2D kde`\n* `bar`\n\nThere are 7 primary parameters to `aggplot`:\n\n* `agg` - Name of column to be aggregated. If it is a column with string/categorical values, then the counts or relative frequency percentage will be returned.\n* `groupby` - Name of column whose unique values will form independent groups. This is used in a similar fashion as the `group by` SQL clause.\n* `data` - The Pandas DataFrame\n* `hue` - The name of the column to further group the data within a single plot\n* `row` - The name of the column who's unique values split the data in to separate rows\n* `col` - The name of the column who's unique values split the data in to separate columns\n* `kind` - The kind of plot to create. One of the five strings from above.\n\n`jointplot` uses `x` and `y` instead of `groupby` and `agg`.\n\n### City of Houston Data\n\nTo get started, we will use City of Houston employee data collected from the year 2016. It contains public information from about 1500 employees and is located in Dexplot's GitHub repository.\n\n\n\n```python\nimport pandas as pd\nimport dexplot as dxp\n```\n\n\n```python\nemp = pd.read_csv('notebooks/data/employee.csv')\nemp.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>dept</th>\n      <th>salary</th>\n      <th>race</th>\n      <th>gender</th>\n      <th>experience</th>\n      <th>experience_level</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>POLICE OFFICER</td>\n      <td>Houston Police Department-HPD</td>\n      <td>45279.0</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>1</td>\n      <td>Novice</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ENGINEER/OPERATOR</td>\n      <td>Houston Fire Department (HFD)</td>\n      <td>63166.0</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>34</td>\n      <td>Veteran</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SENIOR POLICE OFFICER</td>\n      <td>Houston Police Department-HPD</td>\n      <td>66614.0</td>\n      <td>Black</td>\n      <td>Male</td>\n      <td>32</td>\n      <td>Veteran</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ENGINEER</td>\n      <td>Public Works &amp; Engineering-PWE</td>\n      <td>71680.0</td>\n      <td>Asian</td>\n      <td>Male</td>\n      <td>4</td>\n      <td>Novice</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CARPENTER</td>\n      <td>Houston Airport System (HAS)</td>\n      <td>42390.0</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>3</td>\n      <td>Novice</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Plotting the average salary by department\nThe `agg` parameter is very important and is what will be aggregated (summarized by a single point statistic, like the mean or median). It is the first parameter and only parameter you must specify (besides `data`). If this column is numeric, then by default, the mean of it will be calculated. Here, we specify the `groupby` parameter, who's unique values form the independent groups and label the x-axis.\n\n\n```python\ndxp.aggplot(agg='salary', groupby='dept', data=emp)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1190d2128>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_6_1.png)\n\n\n### Make horizontal with the `orient` parameter\nThe `orient` parameter controls whether the plot will be horizontal or vertical. By default it is set to `'h'`.\n\n\n```python\ndxp.aggplot(agg='salary', groupby='dept', data=emp, orient='h')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1192f7160>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_8_1.png)\n\n\n### Controlling the figure size\nOne of the goals of Dexplot is to not have you dip down into the details of Matplotlib. We can use the `figsize` parameter to change the size of our plot.\n\n\n```python\ndxp.aggplot(agg='salary', groupby='dept', data=emp, orient='h', figsize=(8, 4))\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x119377b00>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_10_1.png)\n\n\n### Adding another dimension with `hue`\nThe `hue` parameter may be used to further subdivide each unique value in the `groupby` column. Notice that long tick labels are automatically wrapped.\n\n\n```python\ndxp.aggplot(agg='salary', groupby='dept', data=emp, hue='gender')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1193b1208>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_12_1.png)\n\n\n## Aggregating a String/Categorical column\nIt is possible to use a string/categorical column as the aggregating variable. In this instance, the counts of the unique values of that column will be returned. Because this is already doing a `groupby`, you cannot specify a `groupby` column in this instance. Let's get the count of employees by race.\n\n\n```python\ndxp.aggplot(agg='race', data=emp, figsize=(8, 4))\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x119377cf8>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_14_1.png)\n\n\n## Using `hue` with a String/Categorical column\nUsing a `groupby` is not allowed when a string/categorical column is being aggregated. But, we can still sub-divide the groups further by specifying `hue`.\n\n\n```python\ndxp.aggplot(agg='race', data=emp, hue='dept')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11b7d1588>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_16_1.png)\n\n\n## Getting the relative frequency percentage with `normalize`\nIt is possible to turn the raw counts into percentages by passing a value to `normalize`. Let's find the percentage of all employees by race.\n\n\n```python\ndxp.aggplot(agg='race', data=emp, normalize='all', figsize=(8, 4))\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11b7f1e10>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_18_1.png)\n\n\n## You can normalize over any variable\nThe parameter `normalize` can be one of the values passed to the parameters `'agg'`, `'hue'`, `'row'`, `'col'`, or a tuple containing any number of these or `'all'`. For instance, in the following plot, you can normalize by either `race` or `dept`.\n\n\n```python\ndxp.aggplot(agg='race', data=emp, hue='dept', normalize='race')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11bb0d048>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_20_1.png)\n\n\n## Data normalized by race\nAs you can see, the data was normalized by race. For example, from the graph, we can tell that about 30% of black employees were members of the police department. We can also normalize by department. From the graph, about 10% of the Health & Human Services employees were Asian.\n\n\n```python\ndxp.aggplot(agg='race', data=emp, hue='dept', normalize='dept')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11bf4f0b8>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_22_1.png)\n\n\n## Stacked Bar Plots\nAll bar plots that have use the `hue` variable, can be stacked. Here, we stack the maximum salary by department grouped by race.\n\n\n```python\ndxp.aggplot(agg='salary', data=emp, hue='dept', groupby='race', aggfunc='max', stacked=True)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11b7d1208>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_24_1.png)\n\n\n## Stacking counts\nThe raw counts of each department by experience level are stacked here.\n\n\n```python\ndxp.aggplot(agg='experience_level', data=emp, hue='dept', aggfunc='max', stacked=True)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11c41b0f0>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_26_1.png)\n\n\n## Stacking relative frequencies\nThe relative frequencies of each department by each race and experience level.\n\n\n```python\ndxp.aggplot(agg='experience_level', data=emp, hue='dept', row='race', \n            normalize=('race', 'experience_level'), wrap=3, stacked=True)\n```\n\n\n\n\n    (<Figure size 864x720 with 5 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_28_1.png)\n\n\n# Other kinds of plots `line`, `box`, `hist`, and `kde`\n`aggplot` is capable of making four other kinds of plots. The `line` plot is very similar to the bar plot but simply connects the values together. Let's go back to a numeric column and calculate the **median** salary by department across each gender.\n\n\n```python\ndxp.aggplot(agg='salary', data=emp, groupby='dept', hue='gender', kind='line', aggfunc='median')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11c994eb8>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_30_1.png)\n\n\n## `aggfunc` can take any string value that Pandas can\nThere are more than a dozen string values that `aggfunc` can take. These are simply passed to Pandas `groupby` method which does the aggregation.\n\n## All plots can be both vertical and horizontal\nWe can rotate all plots with `orient`. \n\n\n```python\ndxp.aggplot(agg='salary', data=emp, groupby='dept', hue='gender', kind='line', aggfunc='median', orient='h')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11cd2ad68>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_32_1.png)\n\n\n## Boxplots\nHere is the same data plotted as a box plot. This isn't actually an aggregation, so the `aggfunc` parameter is meaningless here. Instead, all the values of the particular group are plotted.\n\n\n```python\ndxp.aggplot(agg='salary', data=emp, groupby='dept', hue='gender', kind='box', orient='h')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11d0c27f0>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_34_1.png)\n\n\n## Histograms and KDE's\nAs with boxplots, histograms and kdes do not function with `aggfunc` as they aren't aggregating but simply displaying all the data for us. Also, it is not possible to use both `groupby` and `agg` with these plots.\n\n\n```python\ndxp.aggplot(agg='salary', data=emp, groupby='dept', kind='hist', orient='v')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11d37c780>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_36_1.png)\n\n\n\n```python\ndxp.aggplot(agg='salary', data=emp, groupby='dept', kind='kde', orient='v')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x11d5ee748>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_37_1.png)\n\n\n## Splitting into separate plots\nThe `row` and `col` parameters can be used to split the data into separate plots. Each unique value of `row` or `col` will create a new plot. A one-item tuple consisting of the entire Figure is returned.\n\n\n```python\ndxp.aggplot(agg='salary', data=emp, groupby='experience_level', kind='kde', orient='v', row='dept')\n```\n\n\n\n\n    (<Figure size 720x1152 with 6 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_39_1.png)\n\n\n## Use the `wrap` parameter to make new rows/columns\nSet the `wrap` parameter to an integer to determine where a new row/column will be formed.\n\n\n```python\ndxp.aggplot(agg='salary', data=emp, groupby='experience_level', kind='box', orient='v', row='dept', wrap=3)\n```\n\n\n\n\n    (<Figure size 864x720 with 6 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_41_1.png)\n\n\n## `wrap` works for both `row` or `col`\n\n\n```python\ndxp.aggplot(agg='salary', data=emp, groupby='experience_level', kind='box', orient='v', col='dept', wrap=5)\n```\n\n\n\n\n    (<Figure size 1296x576 with 6 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_43_1.png)\n\n\n# Use both `row` and `col` for a entire grid\nBy using both `row` and `col`, you can maximize the number of variables you divide the data into.\n\n\n```python\ndxp.aggplot(agg='salary', data=emp, groupby='gender', kind='kde', row='dept', col='experience_level')\n```\n\n\n\n\n    (<Figure size 1008x1152 with 18 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_45_1.png)\n\n\n# Normalize by more than one variable\n\nBefore, we normalized by just a single variable. It is possible to normalize by multiple variables with a tuple. Here we normalize by department and gender. Adding up all the blue bars for each department should add to 1.\n\n\n```python\ndxp.aggplot(agg='dept', data=emp, hue='gender', kind='bar', row='race', normalize=('dept', 'gender'))\n```\n\n\n\n\n    (<Figure size 720x1008 with 5 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_47_1.png)\n\n\n## Normalize by three variables\nHere we normalize by race, experience level, and gender. Each set of orange/blue bars within each plot will add to 1.\n\n\n```python\ndxp.aggplot(agg='dept', data=emp, hue='gender', kind='bar', row='race', \n            col='experience_level', normalize=('gender', 'experience_level', 'race'), orient='h')\n```\n\n\n\n\n    (<Figure size 1008x1008 with 15 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_49_1.png)\n\n\n# Joint Plots\n`joinplot` works differently than `aggplot` in that no aggregation takes place. It plots the raw values between two variables. It can split the data into groups or new plots with `hue`, `row`, and `col`. The default plot is a scatter plot, but you can also provide a string value to the `kind` parameter to make line, kde, or bar plots. \n\n\n```python\ndxp.jointplot('experience', 'salary', data=emp)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x120b9af60>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_51_1.png)\n\n\n## Split data in the same plot with `hue`\n\n\n```python\ndxp.jointplot('experience', 'salary', data=emp, hue='gender')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x12171e6d8>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_53_1.png)\n\n\n## Plot a regression line by setting `fit_reg` equal to `True`\nBy default it plots the 95% confidence interval around the mean.\n\n\n```python\ndxp.jointplot('experience', 'salary', data=emp, hue='gender', fit_reg=True)\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x1218e6c18>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_55_1.png)\n\n\n## Further split the data into separate plots with `row` and `col`\n\n\n```python\ndxp.jointplot('experience', 'salary', data=emp, hue='gender', row='dept', wrap=3, fit_reg=True)\n```\n\n\n\n\n    (<Figure size 864x720 with 6 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_57_1.png)\n\n\n\n```python\ndxp.jointplot('experience', 'salary', data=emp, hue='gender', row='dept', col='experience_level')\n```\n\n\n\n\n    (<Figure size 1008x1152 with 18 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_58_1.png)\n\n\n## Use the `s` parameter to change the size of each marker\nLet `s` equal a column name containing numeric values to set each marker size individually. We need to create another numeric variable first since the dataset only contains two.\n\n\n```python\nimport numpy as np\nemp['num'] = np.random.randint(10, 300, len(emp))\n```\n\n\n```python\ndxp.jointplot('experience', 'salary', data=emp, hue='gender', row='dept', wrap=3, s='num')\n```\n\n\n\n\n    (<Figure size 864x720 with 6 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_61_1.png)\n\n\n# Line Plots\n\n\n```python\ndf_stocks = pd.read_csv('notebooks/data/stocks.csv', parse_dates=['date'])\ndf_stocks.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>close</th>\n      <th>symbol</th>\n      <th>percent_gain</th>\n      <th>year</th>\n      <th>month</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2013-10-07</td>\n      <td>63.7997</td>\n      <td>aapl</td>\n      <td>0.0</td>\n      <td>2013</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2013-10-07</td>\n      <td>96.6579</td>\n      <td>cvx</td>\n      <td>0.0</td>\n      <td>2013</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013-10-07</td>\n      <td>35.0541</td>\n      <td>txn</td>\n      <td>0.0</td>\n      <td>2013</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2013-10-07</td>\n      <td>19.4912</td>\n      <td>csco</td>\n      <td>0.0</td>\n      <td>2013</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2013-10-07</td>\n      <td>310.0300</td>\n      <td>amzn</td>\n      <td>0.0</td>\n      <td>2013</td>\n      <td>10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndxp.jointplot(x='date', y='percent_gain', data=df_stocks, hue='symbol', kind='line')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x121ad34a8>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_64_1.png)\n\n\n\n```python\ndxp.jointplot(x='date', y='percent_gain', data=df_stocks, kind='line', hue='symbol', row='year', wrap=3,\n             sharex=False, sharey=False)\n```\n\n\n\n\n    (<Figure size 864x720 with 6 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_65_1.png)\n\n\n# 2D KDE Plots\n\n\n```python\ndxp.jointplot('experience', 'salary', data=emp, kind='kde')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x12290e898>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_67_1.png)\n\n\n\n```python\ndxp.jointplot('experience', 'salary', data=emp, kind='kde', row='dept', col='gender', sharex=False, sharey=False)\n```\n\n\n\n\n    (<Figure size 864x1152 with 12 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_68_1.png)\n\n\n# Bar Plots for aggregated data\n\nIf your data is already aggregated, you can use `jointplot` to plot it.\n\n\n```python\ndf = emp.groupby('dept').agg({'salary':'mean'}).reset_index()\ndf\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>dept</th>\n      <th>salary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Health &amp; Human Services</td>\n      <td>51324.980583</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Houston Airport System (HAS)</td>\n      <td>53990.368932</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Houston Fire Department (HFD)</td>\n      <td>59960.441096</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Houston Police Department-HPD</td>\n      <td>60428.745614</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Parks &amp; Recreation</td>\n      <td>39426.150943</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Public Works &amp; Engineering-PWE</td>\n      <td>50207.806452</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndxp.jointplot('dept', 'salary', data=df, kind='bar')\n```\n\n\n\n\n    <matplotlib.axes._subplots.AxesSubplot at 0x12512fe10>\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_71_1.png)\n\n\n# Heatmaps\n\nHeatmaps work with both tidy and aggregated data. \n\n## Frequency\nWhen working with tidy data, passing it just `x` and `y` will plot the frequency of occurrences for all of the combinations of their unique values. Place the count as text in the box with `annot`. The default formatting has two decimals.\n\n\n```python\ndxp.heatmap(x='dept', y='race', data=emp, annot=True, fmt='.0f')\n```\n\n\n\n\n    (<Figure size 720x576 with 2 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_73_1.png)\n\n\n## Aggregating a variable with heatmaps\nSet the `agg` parameter to aggregate a particular variable. Choose how you will aggregate with the `aggfunc` parameter, which takes any string that Pandas can. The default it the mean.\n\n\n```python\ndxp.heatmap(x='dept', y='race', agg='salary', aggfunc='max', data=emp, annot=True, fmt='.0f')\n```\n\n\n\n\n    (<Figure size 720x576 with 2 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_75_1.png)\n\n\n## Normalize heatmaps by row, column, or all data\nYou can normalize the data by row, column, or all data with. Use the string name of the column for row and column normalization. Below we find the total percentage of all combined years of experience normalized by race. For example, of all the total years of experience for White employees, 89% of those years are male.\n\n\n```python\ndxp.heatmap(x='race', y='gender', agg='experience', aggfunc='sum', \n            data=emp, annot=True, fmt='.3f', normalize='race')\n```\n\n\n\n\n    (<Figure size 720x576 with 2 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_77_1.png)\n\n\n\n```python\ndxp.heatmap(x='race', y='dept', agg='experience', aggfunc='sum', \n            data=emp, annot=True, fmt='.3f', normalize='race', corr=True)\n```\n\n\n\n\n    (<Figure size 720x576 with 2 Axes>,)\n\n\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_78_1.png)\n\n\n## Heatmaps without aggregating data\nIf you pass just the DataFrame into `heatmap` then those raw values will be used to create the colors. Here we plot some random numbers from a normal distribution.\n\n\n```python\ndf = pd.DataFrame(np.random.randn(10, 5), columns=list('abcde'))\nfig, = dxp.heatmap(data=df, annot=True)\n```\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_80_0.png)\n\n\n## Find correlations by setting `corr` equal to `True`\n\nSetting the `corr` parameter to True computes the pairwise correlation matrix between the columns. Any string columns are discarded. Below, we use the popular Kaggle housing dataset.\n\n\n```python\nhousing = pd.read_csv('notebooks/data/housing.csv')\nfig, = dxp.heatmap(data=housing, corr=True, figsize=(16, 16))\n```\n\n\n![png](https://raw.githubusercontent.com/dexplo/dexplot/master/images/output_82_0.png)\n\n\n# Comparison with Seaborn\nIf you have used the Seaborn library, then you should notice a lot of similarities. Much of Dexplot was inspired by Seaborn. Below is a list of the extra features in Dexplot not found in Seaborn\n\n* The ability to graph relative frequency percentage and normalize over any number of variables\n* Far fewer public functions. Only two at the moment\n* No need for multiple functions to do the same thing. Seaborn has both `countplot` and `barplot`\n* Ability to make grids with a single function instead of having to use a higher level function like `catplot`\n* Pandas `groupby` methods are available as strings\n* Both x/y-labels and titles are automatically wrapped so that they don't overlap\n* The figure size (plus several other options) and available to change without dipping down into matplotlib\n* No new types like FacetGrid. Only matplotlib objects are returned\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dexplo/dexplot", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dexplot", "package_url": "https://pypi.org/project/dexplot/", "platform": "", "project_url": "https://pypi.org/project/dexplot/", "project_urls": {"Homepage": "https://github.com/dexplo/dexplot"}, "release_url": "https://pypi.org/project/dexplot/0.0.9/", "requires_dist": null, "requires_python": "", "summary": "Simple plotting library for both long and wide data integrated with DataFrames", "version": "0.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Dexplot</h1>\n<p>A Python library for making data visualizations.</p>\n<p>The current aim of Dexplot is to make data visualization creation in Python more robust and straightforward. Dexplot is built on top of Matplotlib and accepts Pandas DataFrames as inputs.</p>\n<h2>Installation</h2>\n<p><code>pip install dexplot</code></p>\n<h2>Goals</h2>\n<p>The primary goals for Dexplot are:</p>\n<ul>\n<li>Maintain a very consistent API with as few functions as necessary to make the desired statistical plots</li>\n<li>Allow the user to tweak the plots without digging into Matplotlib</li>\n</ul>\n<h2>Tidy Data from Pandas</h2>\n<p>Dexplot only accepts Pandas DataFrames as input for its plotting functions that are in \"tidy\" form.</p>\n<h2>Sample plots</h2>\n<p>Dexplot currently maintains two primary functions, <code>aggplot</code> which is used to aggregate data and <code>jointplot</code>, which is used to plot raw values from two variables against each other. <code>heatmap</code> is another function available that produces just a single heatmap.</p>\n<p><code>aggplot</code> can create five different kinds of plots.</p>\n<ul>\n<li><code>bar</code></li>\n<li><code>line</code></li>\n<li><code>box</code></li>\n<li><code>hist</code></li>\n<li><code>kde</code></li>\n</ul>\n<p><code>jointplot</code> can create four different kinds of plots</p>\n<ul>\n<li><code>scatter</code></li>\n<li><code>line</code></li>\n<li><code>2D kde</code></li>\n<li><code>bar</code></li>\n</ul>\n<p>There are 7 primary parameters to <code>aggplot</code>:</p>\n<ul>\n<li><code>agg</code> - Name of column to be aggregated. If it is a column with string/categorical values, then the counts or relative frequency percentage will be returned.</li>\n<li><code>groupby</code> - Name of column whose unique values will form independent groups. This is used in a similar fashion as the <code>group by</code> SQL clause.</li>\n<li><code>data</code> - The Pandas DataFrame</li>\n<li><code>hue</code> - The name of the column to further group the data within a single plot</li>\n<li><code>row</code> - The name of the column who's unique values split the data in to separate rows</li>\n<li><code>col</code> - The name of the column who's unique values split the data in to separate columns</li>\n<li><code>kind</code> - The kind of plot to create. One of the five strings from above.</li>\n</ul>\n<p><code>jointplot</code> uses <code>x</code> and <code>y</code> instead of <code>groupby</code> and <code>agg</code>.</p>\n<h3>City of Houston Data</h3>\n<p>To get started, we will use City of Houston employee data collected from the year 2016. It contains public information from about 1500 employees and is located in Dexplot's GitHub repository.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dexplot</span> <span class=\"k\">as</span> <span class=\"nn\">dxp</span>\n</pre>\n<pre><span class=\"n\">emp</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'notebooks/data/employee.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>title</th>\n      <th>dept</th>\n      <th>salary</th>\n      <th>race</th>\n      <th>gender</th>\n      <th>experience</th>\n      <th>experience_level</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>POLICE OFFICER</td>\n      <td>Houston Police Department-HPD</td>\n      <td>45279.0</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>1</td>\n      <td>Novice</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ENGINEER/OPERATOR</td>\n      <td>Houston Fire Department (HFD)</td>\n      <td>63166.0</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>34</td>\n      <td>Veteran</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SENIOR POLICE OFFICER</td>\n      <td>Houston Police Department-HPD</td>\n      <td>66614.0</td>\n      <td>Black</td>\n      <td>Male</td>\n      <td>32</td>\n      <td>Veteran</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ENGINEER</td>\n      <td>Public Works &amp; Engineering-PWE</td>\n      <td>71680.0</td>\n      <td>Asian</td>\n      <td>Male</td>\n      <td>4</td>\n      <td>Novice</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CARPENTER</td>\n      <td>Houston Airport System (HAS)</td>\n      <td>42390.0</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>3</td>\n      <td>Novice</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<h3>Plotting the average salary by department</h3>\n<p>The <code>agg</code> parameter is very important and is what will be aggregated (summarized by a single point statistic, like the mean or median). It is the first parameter and only parameter you must specify (besides <code>data</code>). If this column is numeric, then by default, the mean of it will be calculated. Here, we specify the <code>groupby</code> parameter, who's unique values form the independent groups and label the x-axis.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1190d2128&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6aeebf465d6f3affe5d092cebea29cdc54ab48f/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f365f312e706e67\"></p>\n<h3>Make horizontal with the <code>orient</code> parameter</h3>\n<p>The <code>orient</code> parameter controls whether the plot will be horizontal or vertical. By default it is set to <code>'h'</code>.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'h'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1192f7160&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6bab75a8c0fc6afb6e18aadefa1a27281fc72d6d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f385f312e706e67\"></p>\n<h3>Controlling the figure size</h3>\n<p>One of the goals of Dexplot is to not have you dip down into the details of Matplotlib. We can use the <code>figsize</code> parameter to change the size of our plot.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'h'</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x119377b00&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f2e0e7f81d58315b50559847daa597f2df27213/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f31305f312e706e67\"></p>\n<h3>Adding another dimension with <code>hue</code></h3>\n<p>The <code>hue</code> parameter may be used to further subdivide each unique value in the <code>groupby</code> column. Notice that long tick labels are automatically wrapped.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1193b1208&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f15a564fb66bef2c62fadaccf528d90f1b330308/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f31325f312e706e67\"></p>\n<h2>Aggregating a String/Categorical column</h2>\n<p>It is possible to use a string/categorical column as the aggregating variable. In this instance, the counts of the unique values of that column will be returned. Because this is already doing a <code>groupby</code>, you cannot specify a <code>groupby</code> column in this instance. Let's get the count of employees by race.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x119377cf8&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00854902b9f2d12d8e8fed9ee63890d598d79a2b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f31345f312e706e67\"></p>\n<h2>Using <code>hue</code> with a String/Categorical column</h2>\n<p>Using a <code>groupby</code> is not allowed when a string/categorical column is being aggregated. But, we can still sub-divide the groups further by specifying <code>hue</code>.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11b7d1588&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aea90eab34c05fbaa2b030dd00913828ec3d43b3/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f31365f312e706e67\"></p>\n<h2>Getting the relative frequency percentage with <code>normalize</code></h2>\n<p>It is possible to turn the raw counts into percentages by passing a value to <code>normalize</code>. Let's find the percentage of all employees by race.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"s1\">'all'</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11b7f1e10&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40cf19255e0f10d9db561ec28f28b68273307fec/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f31385f312e706e67\"></p>\n<h2>You can normalize over any variable</h2>\n<p>The parameter <code>normalize</code> can be one of the values passed to the parameters <code>'agg'</code>, <code>'hue'</code>, <code>'row'</code>, <code>'col'</code>, or a tuple containing any number of these or <code>'all'</code>. For instance, in the following plot, you can normalize by either <code>race</code> or <code>dept</code>.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11bb0d048&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f2e987d6e5220f7bf4925b919f0f0f6fcbc8736/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f32305f312e706e67\"></p>\n<h2>Data normalized by race</h2>\n<p>As you can see, the data was normalized by race. For example, from the graph, we can tell that about 30% of black employees were members of the police department. We can also normalize by department. From the graph, about 10% of the Health &amp; Human Services employees were Asian.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11bf4f0b8&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92431187b13276d779e3b08670de1ff53c101345/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f32325f312e706e67\"></p>\n<h2>Stacked Bar Plots</h2>\n<p>All bar plots that have use the <code>hue</code> variable, can be stacked. Here, we stack the maximum salary by department grouped by race.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">aggfunc</span><span class=\"o\">=</span><span class=\"s1\">'max'</span><span class=\"p\">,</span> <span class=\"n\">stacked</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11b7d1208&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75d5f44868f672d10b44bb0d3f59e329168b36f6/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f32345f312e706e67\"></p>\n<h2>Stacking counts</h2>\n<p>The raw counts of each department by experience level are stacked here.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'experience_level'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">aggfunc</span><span class=\"o\">=</span><span class=\"s1\">'max'</span><span class=\"p\">,</span> <span class=\"n\">stacked</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11c41b0f0&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/258b29af535740d1de2d59f99f0b197231aa5945/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f32365f312e706e67\"></p>\n<h2>Stacking relative frequencies</h2>\n<p>The relative frequencies of each department by each race and experience level.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'experience_level'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> \n            <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"s1\">'experience_level'</span><span class=\"p\">),</span> <span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">stacked</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 864x720 with 5 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87b7bab5faa303582edd2ffb85cc7968cfb3bfad/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f32385f312e706e67\"></p>\n<h1>Other kinds of plots <code>line</code>, <code>box</code>, <code>hist</code>, and <code>kde</code></h1>\n<p><code>aggplot</code> is capable of making four other kinds of plots. The <code>line</code> plot is very similar to the bar plot but simply connects the values together. Let's go back to a numeric column and calculate the <strong>median</strong> salary by department across each gender.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'line'</span><span class=\"p\">,</span> <span class=\"n\">aggfunc</span><span class=\"o\">=</span><span class=\"s1\">'median'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11c994eb8&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e68faaa459eb4afd8994c4a32a56bb516c075c21/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f33305f312e706e67\"></p>\n<h2><code>aggfunc</code> can take any string value that Pandas can</h2>\n<p>There are more than a dozen string values that <code>aggfunc</code> can take. These are simply passed to Pandas <code>groupby</code> method which does the aggregation.</p>\n<h2>All plots can be both vertical and horizontal</h2>\n<p>We can rotate all plots with <code>orient</code>.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'line'</span><span class=\"p\">,</span> <span class=\"n\">aggfunc</span><span class=\"o\">=</span><span class=\"s1\">'median'</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'h'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11cd2ad68&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1a2aaf71ccc5552ece6b045c61f99f4dab38225/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f33325f312e706e67\"></p>\n<h2>Boxplots</h2>\n<p>Here is the same data plotted as a box plot. This isn't actually an aggregation, so the <code>aggfunc</code> parameter is meaningless here. Instead, all the values of the particular group are plotted.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'box'</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'h'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11d0c27f0&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32924dbf49dc036fb6e88366cab072a8e8383205/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f33345f312e706e67\"></p>\n<h2>Histograms and KDE's</h2>\n<p>As with boxplots, histograms and kdes do not function with <code>aggfunc</code> as they aren't aggregating but simply displaying all the data for us. Also, it is not possible to use both <code>groupby</code> and <code>agg</code> with these plots.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'hist'</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'v'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11d37c780&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66140dc7b0d4bf09e0d00215ddb82f7d88d09e6b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f33365f312e706e67\"></p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'kde'</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'v'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11d5ee748&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/edc62cf0a7109532d76e719d92672390ab63a620/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f33375f312e706e67\"></p>\n<h2>Splitting into separate plots</h2>\n<p>The <code>row</code> and <code>col</code> parameters can be used to split the data into separate plots. Each unique value of <code>row</code> or <code>col</code> will create a new plot. A one-item tuple consisting of the entire Figure is returned.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'experience_level'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'kde'</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'v'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 720x1152 with 6 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55a52be451c2dd3e3fbf1e3f9a2c91a7eb9a08b9/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f33395f312e706e67\"></p>\n<h2>Use the <code>wrap</code> parameter to make new rows/columns</h2>\n<p>Set the <code>wrap</code> parameter to an integer to determine where a new row/column will be formed.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'experience_level'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'box'</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'v'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 864x720 with 6 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2013419775a429aefa9d9e45b70271cd0e4a2c6f/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f34315f312e706e67\"></p>\n<h2><code>wrap</code> works for both <code>row</code> or <code>col</code></h2>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'experience_level'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'box'</span><span class=\"p\">,</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'v'</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 1296x576 with 6 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/791aee42a2ac6e224a4823d7f815382d67e6065a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f34335f312e706e67\"></p>\n<h1>Use both <code>row</code> and <code>col</code> for a entire grid</h1>\n<p>By using both <code>row</code> and <code>col</code>, you can maximize the number of variables you divide the data into.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">groupby</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'kde'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"o\">=</span><span class=\"s1\">'experience_level'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 1008x1152 with 18 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/786dcf81155800ae2ae61c859ab044447afc8183/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f34355f312e706e67\"></p>\n<h1>Normalize by more than one variable</h1>\n<p>Before, we normalized by just a single variable. It is possible to normalize by multiple variables with a tuple. Here we normalize by department and gender. Adding up all the blue bars for each department should add to 1.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"s1\">'gender'</span><span class=\"p\">))</span>\n</pre>\n<pre><code>(&lt;Figure size 720x1008 with 5 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7cdc540b6ab0651805211b7d1fc8cda322ac8edf/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f34375f312e706e67\"></p>\n<h2>Normalize by three variables</h2>\n<p>Here we normalize by race, experience level, and gender. Each set of orange/blue bars within each plot will add to 1.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">aggplot</span><span class=\"p\">(</span><span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> \n            <span class=\"n\">col</span><span class=\"o\">=</span><span class=\"s1\">'experience_level'</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"s1\">'experience_level'</span><span class=\"p\">,</span> <span class=\"s1\">'race'</span><span class=\"p\">),</span> <span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">'h'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 1008x1008 with 15 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3123d5276c2198092a3e2d5e44ab0bcd336239c1/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f34395f312e706e67\"></p>\n<h1>Joint Plots</h1>\n<p><code>joinplot</code> works differently than <code>aggplot</code> in that no aggregation takes place. It plots the raw values between two variables. It can split the data into groups or new plots with <code>hue</code>, <code>row</code>, and <code>col</code>. The default plot is a scatter plot, but you can also provide a string value to the <code>kind</code> parameter to make line, kde, or bar plots.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"s1\">'experience'</span><span class=\"p\">,</span> <span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x120b9af60&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e3af13ee98ee428868a844ef06a27c01cff09f3/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f35315f312e706e67\"></p>\n<h2>Split data in the same plot with <code>hue</code></h2>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"s1\">'experience'</span><span class=\"p\">,</span> <span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x12171e6d8&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a4b44b68a86516a96c67a97c069a0448cb1a21c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f35335f312e706e67\"></p>\n<h2>Plot a regression line by setting <code>fit_reg</code> equal to <code>True</code></h2>\n<p>By default it plots the 95% confidence interval around the mean.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"s1\">'experience'</span><span class=\"p\">,</span> <span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">fit_reg</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1218e6c18&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77016dd1799f88a6b176bc17cd1a0ffd456a7fd1/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f35355f312e706e67\"></p>\n<h2>Further split the data into separate plots with <code>row</code> and <code>col</code></h2>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"s1\">'experience'</span><span class=\"p\">,</span> <span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">fit_reg</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 864x720 with 6 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9bc3db924cd164dd24a03ce75044633bf8b68312/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f35375f312e706e67\"></p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"s1\">'experience'</span><span class=\"p\">,</span> <span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"o\">=</span><span class=\"s1\">'experience_level'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 1008x1152 with 18 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50f0b02664e9b3f9a9df9ee370b149b54320158e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f35385f312e706e67\"></p>\n<h2>Use the <code>s</code> parameter to change the size of each marker</h2>\n<p>Let <code>s</code> equal a column name containing numeric values to set each marker size individually. We need to create another numeric variable first since the dataset only contains two.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">emp</span><span class=\"p\">[</span><span class=\"s1\">'num'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">emp</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"s1\">'experience'</span><span class=\"p\">,</span> <span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"s1\">'num'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 864x720 with 6 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a1d78a46f231a55128c5b9597a9bc1b6c55f140/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f36315f312e706e67\"></p>\n<h1>Line Plots</h1>\n<pre><span class=\"n\">df_stocks</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'notebooks/data/stocks.csv'</span><span class=\"p\">,</span> <span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'date'</span><span class=\"p\">])</span>\n<span class=\"n\">df_stocks</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>date</th>\n      <th>close</th>\n      <th>symbol</th>\n      <th>percent_gain</th>\n      <th>year</th>\n      <th>month</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2013-10-07</td>\n      <td>63.7997</td>\n      <td>aapl</td>\n      <td>0.0</td>\n      <td>2013</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2013-10-07</td>\n      <td>96.6579</td>\n      <td>cvx</td>\n      <td>0.0</td>\n      <td>2013</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013-10-07</td>\n      <td>35.0541</td>\n      <td>txn</td>\n      <td>0.0</td>\n      <td>2013</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2013-10-07</td>\n      <td>19.4912</td>\n      <td>csco</td>\n      <td>0.0</td>\n      <td>2013</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2013-10-07</td>\n      <td>310.0300</td>\n      <td>amzn</td>\n      <td>0.0</td>\n      <td>2013</td>\n      <td>10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s1\">'date'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s1\">'percent_gain'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df_stocks</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'symbol'</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'line'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x121ad34a8&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c26a8ed62c50e6a2730c8391572d8ddd0bb2f4e8/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f36345f312e706e67\"></p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s1\">'date'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s1\">'percent_gain'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df_stocks</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'line'</span><span class=\"p\">,</span> <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s1\">'symbol'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'year'</span><span class=\"p\">,</span> <span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n             <span class=\"n\">sharex</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">sharey</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 864x720 with 6 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ccd78eda261d29c9f0705b901a9a5b0076f3bd8/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f36355f312e706e67\"></p>\n<h1>2D KDE Plots</h1>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"s1\">'experience'</span><span class=\"p\">,</span> <span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'kde'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x12290e898&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51004ffb3a37c4682971cc353547898d384aab56/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f36375f312e706e67\"></p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"s1\">'experience'</span><span class=\"p\">,</span> <span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'kde'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">sharex</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">sharey</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 864x1152 with 12 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd732bb66917a3b91f60a7fcc257b4adb60ed030/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f36385f312e706e67\"></p>\n<h1>Bar Plots for aggregated data</h1>\n<p>If your data is already aggregated, you can use <code>jointplot</code> to plot it.</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">emp</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">'dept'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">({</span><span class=\"s1\">'salary'</span><span class=\"p\">:</span><span class=\"s1\">'mean'</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">()</span>\n<span class=\"n\">df</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>dept</th>\n      <th>salary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Health &amp; Human Services</td>\n      <td>51324.980583</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Houston Airport System (HAS)</td>\n      <td>53990.368932</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Houston Fire Department (HFD)</td>\n      <td>59960.441096</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Houston Police Department-HPD</td>\n      <td>60428.745614</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Parks &amp; Recreation</td>\n      <td>39426.150943</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Public Works &amp; Engineering-PWE</td>\n      <td>50207.806452</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">jointplot</span><span class=\"p\">(</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x12512fe10&gt;\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/374587d6e31144229374ac24583f2172bfc5c213/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f37315f312e706e67\"></p>\n<h1>Heatmaps</h1>\n<p>Heatmaps work with both tidy and aggregated data.</p>\n<h2>Frequency</h2>\n<p>When working with tidy data, passing it just <code>x</code> and <code>y</code> will plot the frequency of occurrences for all of the combinations of their unique values. Place the count as text in the box with <code>annot</code>. The default formatting has two decimals.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">annot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'.0f'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 720x576 with 2 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1ab1a585039c371fd9b2017aff1bbced8647dc5/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f37335f312e706e67\"></p>\n<h2>Aggregating a variable with heatmaps</h2>\n<p>Set the <code>agg</code> parameter to aggregate a particular variable. Choose how you will aggregate with the <code>aggfunc</code> parameter, which takes any string that Pandas can. The default it the mean.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'salary'</span><span class=\"p\">,</span> <span class=\"n\">aggfunc</span><span class=\"o\">=</span><span class=\"s1\">'max'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">annot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'.0f'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 720x576 with 2 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af8bd0677ee646a1fb2f87a0cc9e192cf31071d3/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f37355f312e706e67\"></p>\n<h2>Normalize heatmaps by row, column, or all data</h2>\n<p>You can normalize the data by row, column, or all data with. Use the string name of the column for row and column normalization. Below we find the total percentage of all combined years of experience normalized by race. For example, of all the total years of experience for White employees, 89% of those years are male.</p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'experience'</span><span class=\"p\">,</span> <span class=\"n\">aggfunc</span><span class=\"o\">=</span><span class=\"s1\">'sum'</span><span class=\"p\">,</span> \n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">annot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'.3f'</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 720x576 with 2 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3be1b7a35a87f4d987a90438ffcde2a13526ce6/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f37375f312e706e67\"></p>\n<pre><span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s1\">'dept'</span><span class=\"p\">,</span> <span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">'experience'</span><span class=\"p\">,</span> <span class=\"n\">aggfunc</span><span class=\"o\">=</span><span class=\"s1\">'sum'</span><span class=\"p\">,</span> \n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">emp</span><span class=\"p\">,</span> <span class=\"n\">annot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'.3f'</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"s1\">'race'</span><span class=\"p\">,</span> <span class=\"n\">corr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<pre><code>(&lt;Figure size 720x576 with 2 Axes&gt;,)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/552dc6a3a3555eec40d6fdcd18b22ea22cd41b28/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f37385f312e706e67\"></p>\n<h2>Heatmaps without aggregating data</h2>\n<p>If you pass just the DataFrame into <code>heatmap</code> then those raw values will be used to create the colors. Here we plot some random numbers from a normal distribution.</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s1\">'abcde'</span><span class=\"p\">))</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">annot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e962761a4fc427b7ec0bb901a0b37939cdf91129/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f38305f302e706e67\"></p>\n<h2>Find correlations by setting <code>corr</code> equal to <code>True</code></h2>\n<p>Setting the <code>corr</code> parameter to True computes the pairwise correlation matrix between the columns. Any string columns are discarded. Below, we use the popular Kaggle housing dataset.</p>\n<pre><span class=\"n\">housing</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'notebooks/data/housing.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"n\">dxp</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">housing</span><span class=\"p\">,</span> <span class=\"n\">corr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60a279670561adf9cee717464e8e354bf14cc963/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646578706c6f2f646578706c6f742f6d61737465722f696d616765732f6f75747075745f38325f302e706e67\"></p>\n<h1>Comparison with Seaborn</h1>\n<p>If you have used the Seaborn library, then you should notice a lot of similarities. Much of Dexplot was inspired by Seaborn. Below is a list of the extra features in Dexplot not found in Seaborn</p>\n<ul>\n<li>The ability to graph relative frequency percentage and normalize over any number of variables</li>\n<li>Far fewer public functions. Only two at the moment</li>\n<li>No need for multiple functions to do the same thing. Seaborn has both <code>countplot</code> and <code>barplot</code></li>\n<li>Ability to make grids with a single function instead of having to use a higher level function like <code>catplot</code></li>\n<li>Pandas <code>groupby</code> methods are available as strings</li>\n<li>Both x/y-labels and titles are automatically wrapped so that they don't overlap</li>\n<li>The figure size (plus several other options) and available to change without dipping down into matplotlib</li>\n<li>No new types like FacetGrid. Only matplotlib objects are returned</li>\n</ul>\n\n          </div>"}, "last_serial": 4350039, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b1a9c15e801d4a675236bfde4cfe1f09", "sha256": "3d6052673966d9999af6cdba35744aa779dba062e76a6d004f0327e3a0685ef0"}, "downloads": -1, "filename": "dexplot-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b1a9c15e801d4a675236bfde4cfe1f09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1220, "upload_time": "2018-08-21T16:59:41", "upload_time_iso_8601": "2018-08-21T16:59:41.672347Z", "url": "https://files.pythonhosted.org/packages/f6/db/b65ea84c49deab2e118e87b8304f9a790285c4fe39a6ba30634bd95f009e/dexplot-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e300600aeacf2545af6117ebfd7d6547", "sha256": "1380f4fdfac1163942b9dcf3d52f5e781a302eaa09ea1f2aaffd6acf4a2f45cb"}, "downloads": -1, "filename": "dexplot-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e300600aeacf2545af6117ebfd7d6547", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1016, "upload_time": "2018-08-21T16:59:42", "upload_time_iso_8601": "2018-08-21T16:59:42.868123Z", "url": "https://files.pythonhosted.org/packages/97/06/a756a63c0c242e47b3a59bfd83d52dc9470cc3a829c0a82f7a6b9797b2da/dexplot-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "cf4fb9c9b6f4c7647c4c9fbaba22a5b1", "sha256": "9eaaff137db5c318154e7fe9413a01b0a32dfb411d39b314bc8449ecb66adfce"}, "downloads": -1, "filename": "dexplot-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cf4fb9c9b6f4c7647c4c9fbaba22a5b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5387, "upload_time": "2018-09-14T01:01:58", "upload_time_iso_8601": "2018-09-14T01:01:58.880000Z", "url": "https://files.pythonhosted.org/packages/8f/7e/0a8a7a0dfd69dae8aeda507a372f88dc3f7f938c2642078092ff8375d199/dexplot-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c3e91a3d498670cfebc64708aeeb9fc", "sha256": "fb73e1d06492be1e79475228479b08ca06bf0cab830098d990dc6c3465b61177"}, "downloads": -1, "filename": "dexplot-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5c3e91a3d498670cfebc64708aeeb9fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4968, "upload_time": "2018-09-14T01:02:00", "upload_time_iso_8601": "2018-09-14T01:02:00.040279Z", "url": "https://files.pythonhosted.org/packages/cf/66/1f4e95d5a60349d0d9eaf10d167da3fbad0ac93157920c239443884ba80e/dexplot-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "0e4aeeb10c38a8c92e8a69ae6848b562", "sha256": "961837e69f5cc0c7b26589118cd2b44d3d518aca9d69b394ad570764adaac176"}, "downloads": -1, "filename": "dexplot-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0e4aeeb10c38a8c92e8a69ae6848b562", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18145, "upload_time": "2018-10-04T21:49:18", "upload_time_iso_8601": "2018-10-04T21:49:18.476831Z", "url": "https://files.pythonhosted.org/packages/c5/0b/f349f7f561832fd85bab4e1bad0752a77b347849e395d1a8093e1db904b0/dexplot-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcffc98e55d7fefe9b2dfbf80b4dd510", "sha256": "4f93a726691ed8641155946462ac65edd081e04e4c4ff927fb2d6495598f408c"}, "downloads": -1, "filename": "dexplot-0.0.3.tar.gz", "has_sig": false, "md5_digest": "dcffc98e55d7fefe9b2dfbf80b4dd510", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17859, "upload_time": "2018-10-04T21:49:20", "upload_time_iso_8601": "2018-10-04T21:49:20.019207Z", "url": "https://files.pythonhosted.org/packages/5a/65/7f21661a4517cfd212eac649fe180fee66d040e52e668ac894efec0e5d24/dexplot-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "c7cc52d5c8e50e089efbddf6e0ad28c6", "sha256": "1ba1c18ab471aa34e9e8cb275148d6a1aec28a62814a29c31ed509fcee485939"}, "downloads": -1, "filename": "dexplot-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c7cc52d5c8e50e089efbddf6e0ad28c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18144, "upload_time": "2018-10-04T22:17:25", "upload_time_iso_8601": "2018-10-04T22:17:25.628681Z", "url": "https://files.pythonhosted.org/packages/e2/17/0bf17ee576ff110cb945c60ecc075cda5bb01090c75f63a8d8945c3389e8/dexplot-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26e45990148018f201d644056b40e693", "sha256": "3ded42abf855bb6a9d8c7f162dc8c6bcd1c152e6b4bfeede64f336eb89c1ef75"}, "downloads": -1, "filename": "dexplot-0.0.4.tar.gz", "has_sig": false, "md5_digest": "26e45990148018f201d644056b40e693", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17929, "upload_time": "2018-10-04T22:17:26", "upload_time_iso_8601": "2018-10-04T22:17:26.999570Z", "url": "https://files.pythonhosted.org/packages/d8/13/b6a0d9e83e6470a50791ef334a990e3ce168c92864323f66afdbc2a6b3f0/dexplot-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "224b28d9f0d71d8684afc96a6cd730dd", "sha256": "3be0f0df7434b1f6ee923794592efd334ef2659f6341116047c0bc242e1febb3"}, "downloads": -1, "filename": "dexplot-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "224b28d9f0d71d8684afc96a6cd730dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18146, "upload_time": "2018-10-04T22:21:49", "upload_time_iso_8601": "2018-10-04T22:21:49.442944Z", "url": "https://files.pythonhosted.org/packages/ce/6e/29e1e9760d494543761e6d76d1659fe655638ae97d59e2734fd32fe52895/dexplot-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "222dc7d573c7f88a3b21b8de8fc148e7", "sha256": "eb2a47626137529aa6a2dc1960f8e9347db5432eb38158a45f1e982d58b6fb23"}, "downloads": -1, "filename": "dexplot-0.0.5.tar.gz", "has_sig": false, "md5_digest": "222dc7d573c7f88a3b21b8de8fc148e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17924, "upload_time": "2018-10-04T22:21:50", "upload_time_iso_8601": "2018-10-04T22:21:50.782043Z", "url": "https://files.pythonhosted.org/packages/53/31/e7235b3e6fc9f17c696ddb21446d02e9890186e30ad940dde82a39e378d1/dexplot-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "e966abeb6bd16c2ba39fc9d3e70fee0b", "sha256": "d952fb166365458fd717cd79dfda3bbb677a8ecaa291c6db68b494c11e237017"}, "downloads": -1, "filename": "dexplot-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e966abeb6bd16c2ba39fc9d3e70fee0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18195, "upload_time": "2018-10-04T22:22:40", "upload_time_iso_8601": "2018-10-04T22:22:40.579898Z", "url": "https://files.pythonhosted.org/packages/0c/2a/d254df6da96f66cbf48af98788def73ff9115cef2d8e6fb0f88a41a63d26/dexplot-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac2fc289bccd315708386103dc9a6d7b", "sha256": "93603fe6cd0364ac3df48ce58baa7d49db4493201e65152cd492ea447afc1ab7"}, "downloads": -1, "filename": "dexplot-0.0.6.tar.gz", "has_sig": false, "md5_digest": "ac2fc289bccd315708386103dc9a6d7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17928, "upload_time": "2018-10-04T22:22:41", "upload_time_iso_8601": "2018-10-04T22:22:41.796448Z", "url": "https://files.pythonhosted.org/packages/bf/3c/8f2876106f30963b66a82c19b9510c2d34ffd9f3edab03b854fc71124353/dexplot-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "61f9bd6a1da7854ff393352739d89862", "sha256": "f14bc48bbffb4cfa068af398548af1fd0d98aec6d488a61cf6a6c0832f0ff43b"}, "downloads": -1, "filename": "dexplot-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "61f9bd6a1da7854ff393352739d89862", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36014, "upload_time": "2018-10-07T05:07:36", "upload_time_iso_8601": "2018-10-07T05:07:36.999798Z", "url": "https://files.pythonhosted.org/packages/99/1b/8ef680d8fb59317e23618fb0ec6613670b6e89d03b5a9e8f8190b266c8af/dexplot-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c5f942a4f0ad8794e5669647722b487", "sha256": "c141737428809740a8210580037134ab05c57096a98a92ef12aeea24e798c5fa"}, "downloads": -1, "filename": "dexplot-0.0.7.tar.gz", "has_sig": false, "md5_digest": "1c5f942a4f0ad8794e5669647722b487", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29240, "upload_time": "2018-10-07T05:07:38", "upload_time_iso_8601": "2018-10-07T05:07:38.858707Z", "url": "https://files.pythonhosted.org/packages/4f/c6/0af96dcb66e09c99eb26f76f47f999268c1d964cf630a15a1ec195292b8d/dexplot-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "60b1f3fb8a662681a9d13cea9e67ae74", "sha256": "b49ed955afcd78c70c9ea742e2da262430df4f6786546632637cf17e0af21152"}, "downloads": -1, "filename": "dexplot-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "60b1f3fb8a662681a9d13cea9e67ae74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36025, "upload_time": "2018-10-07T19:44:25", "upload_time_iso_8601": "2018-10-07T19:44:25.163026Z", "url": "https://files.pythonhosted.org/packages/5e/e1/f9c42f0689f48daebb17b845441b7442e1e8e939159a861cbdfab29b4218/dexplot-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c93571adddc8ea29a50e521511cadc5d", "sha256": "37f8af7c562052f62dc63797bed03162752a0e0d628c49cc8ff9126842b40f6c"}, "downloads": -1, "filename": "dexplot-0.0.8.tar.gz", "has_sig": false, "md5_digest": "c93571adddc8ea29a50e521511cadc5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29255, "upload_time": "2018-10-07T19:44:26", "upload_time_iso_8601": "2018-10-07T19:44:26.652882Z", "url": "https://files.pythonhosted.org/packages/5a/3d/ec3a5cf426a6ca02c7356c08062c398c103ccc668dd421ec479c535b9af3/dexplot-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "d15460467d1147919ea0438f7b34c4bc", "sha256": "62dca3add28758a16f38577239e3ae6d9121102e222009a68f55f8013e0a251f"}, "downloads": -1, "filename": "dexplot-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "d15460467d1147919ea0438f7b34c4bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36112, "upload_time": "2018-10-07T20:46:53", "upload_time_iso_8601": "2018-10-07T20:46:53.781690Z", "url": "https://files.pythonhosted.org/packages/5b/af/555b6189101197f4b2eb3319c96b98aa4e94c1b4bfb22953324f81ced326/dexplot-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0feb5bcf28b98a4f43d1de1aee5c32c6", "sha256": "1e6af6a6e139a57bb7cf9b7f1ddac3ef42e8b0ed0c223edf67f65a90a9d10f78"}, "downloads": -1, "filename": "dexplot-0.0.9.tar.gz", "has_sig": false, "md5_digest": "0feb5bcf28b98a4f43d1de1aee5c32c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29323, "upload_time": "2018-10-07T20:46:54", "upload_time_iso_8601": "2018-10-07T20:46:54.778685Z", "url": "https://files.pythonhosted.org/packages/58/e6/c002865394758a1c79b3879dc04dd7ec78b8dd5f210a752fc36b9c52055d/dexplot-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d15460467d1147919ea0438f7b34c4bc", "sha256": "62dca3add28758a16f38577239e3ae6d9121102e222009a68f55f8013e0a251f"}, "downloads": -1, "filename": "dexplot-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "d15460467d1147919ea0438f7b34c4bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36112, "upload_time": "2018-10-07T20:46:53", "upload_time_iso_8601": "2018-10-07T20:46:53.781690Z", "url": "https://files.pythonhosted.org/packages/5b/af/555b6189101197f4b2eb3319c96b98aa4e94c1b4bfb22953324f81ced326/dexplot-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0feb5bcf28b98a4f43d1de1aee5c32c6", "sha256": "1e6af6a6e139a57bb7cf9b7f1ddac3ef42e8b0ed0c223edf67f65a90a9d10f78"}, "downloads": -1, "filename": "dexplot-0.0.9.tar.gz", "has_sig": false, "md5_digest": "0feb5bcf28b98a4f43d1de1aee5c32c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29323, "upload_time": "2018-10-07T20:46:54", "upload_time_iso_8601": "2018-10-07T20:46:54.778685Z", "url": "https://files.pythonhosted.org/packages/58/e6/c002865394758a1c79b3879dc04dd7ec78b8dd5f210a752fc36b9c52055d/dexplot-0.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:48 2020"}