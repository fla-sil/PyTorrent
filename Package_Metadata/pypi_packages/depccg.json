{"info": {"author": "Masashi Yoshikawa", "author_email": "yoshikawa.masashi.yh8@is.naist.jp", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# depccg v1\n\nUPDATE 2019/6/7  \n_The datasets and codes for my ACL2019 paper ([Automatic Generation of High Quality CCGbanks for Parser Domain Adaptation](https://arxiv.org/abs/1906.01834)) are available at the following repo!_: https://github.com/masashi-y/ud2ccg\n\nCodebase for [A\\* CCG Parsing with a Supertag and Dependency Factored Model](https://arxiv.org/abs/1704.06936)\n\n### Requirements\n\n* Python >= 3.6.0\n* A C++ compiler supporting [C++11 standard](https://en.wikipedia.org/wiki/C%2B%2B11) (in case of gcc, must be >= 4.8)\n* OpenMP (optional, for efficient batched parsing)\n\n\n## Installation\n\nUsing pip:\n```sh\n\u279c pip install cython numpy depccg\n```\n\nIf OpenMP is available in your environment, you can use it for more efficient parsing:\n```sh\n\u279c USE_OPENMP=1 pip install cython numpy depccg\n```\n\n## Usage\n\n### Using a pretrained English parser\n\nCurrently following models are available for English:\n\n|Name| Description | unlabeled/labeled F1 on CCGbank| Download |\n|:-|:-|:-|:-|\n| basic |model trained on the combination of CCGbank and tri-training dataset (Yoshikawa et al., 2017)|94.0%/88.8%| [link](https://drive.google.com/file/d/1mxl1HU99iEQcUYhWhvkowbE4WOH0UKxv/view?usp=sharing) (189M) |\n| `elmo` | basic model with its embeddings replaced with ELMo (Peters et al., 2018) |94.98%/90.51%| [link](https://drive.google.com/file/d/1UldQDigVq4VG2pJx9yf3krFjV0IYOwLr/view?usp=sharing) (649M) |\n| `rebank` | basic model trained on Rebanked CCGbank (Honnibal et al., 2010) | - | [link](https://drive.google.com/file/d/1Az840uCW8QuAkNCZq_Y8VOkW5j0Vtcj9/view) (337M) |\n| `elmo_rebank` |ELMo model trained on Rebanked CCGbank | - | [link](https://drive.google.com/open?id=1deyCjSgCuD16WkEhOL3IXEfQBfARh_ll) (1G) |\n\nThe basic model is available by:\n```sh\n\u279c depccg_en download\n```\nTo use:\n```sh\n\u279c echo \"this is a test sentence .\" | depccg_en\nID=1, Prob=-0.0006299018859863281\n(<T S[dcl] 0 2> (<T S[dcl] 0 2> (<L NP XX XX this NP>) (<T S[dcl]\\NP 0 2> (<L (S[dcl]\\NP)/NP XX XX is (S[dcl]\\NP)/NP>) (<T NP 0 2> (<L NP[nb]/N XX XX a NP[nb]/N>) (<T N 0 2> (<L N/N XX XX test N/N>) (<L N XX XX sentence N>) ) ) ) ) (<L . XX XX . .>) )\n```\n\nYou can download other models by specifying their names:\n```sh\n\u279c depccg_en download elmo\n```\nTo use, make sure to install [allennlp](https://github.com/allenai/allennlp):\n```sh\n\u279c pip install allennlp\n\u279c echo \"this is a test sentence .\" | depccg_en --model elmo\n```\n\nYou can also specify in the `--model` option the path of a model file (in tar.gz) that is available from links above.\n\nUsing a GPU (by `--gpu` option) is recommended if possible.\n\nThere are several output formats (see [below](#available-output-formats)).\n\n```sh\n\u279c echo \"this is a test sentence .\" | depccg_en --format deriv\nID=1, Prob=-0.0006299018859863281\n this        is           a      test  sentence  .\n  NP   (S[dcl]\\NP)/NP  NP[nb]/N  N/N      N      .\n                                ---------------->\n                                       N\n                      -------------------------->\n                                  NP\n      ------------------------------------------>\n                      S[dcl]\\NP\n------------------------------------------------<\n                     S[dcl]\n---------------------------------------------------<rp>\n                      S[dcl]\n```\n\nBy default, the input is expected to be pre-tokenized. If you want to process untokenized sentences, you can pass `--tokenize` option.\n\nThe POS and NER tags in the output are filled with `XX` by default. You can replace them with ones predicted using [SpaCy](https://spacy.io):\n```sh\n\u279c pip install spacy\n\u279c python -m spacy download en\n\u279c echo \"this is a test sentence .\" | depccg_en --annotator spacy\nID=1, Prob=-0.0006299018859863281\n(<T S[dcl] 0 2> (<T S[dcl] 0 2> (<L NP DT DT this NP>) (<T S[dcl]\\NP 0 2> (<L (S[dcl]\\NP)/NP VBZ VBZ is (S[dcl]\\NP)/NP>) (<T NP 0 2> (<L NP[nb]/N DT DT a NP[nb]/N>) (<T N 0 2> (<L N/N NN NN test N/N>) (<L N NN NN sentence N>) ) ) ) ) (<L . . . . .>) )\n```\nThe parser uses a SpaCy's model symbolic-linked to `en` (it loads a model by `spacy('en')`).\n\nOrelse, you can use POS/NER taggers implemented in [C&C](https://www.cl.cam.ac.uk/~sc609/candc-1.00.html), which may be useful in some sorts of parsing experiments:\n\n```sh\n\u279c export CANDC=/path/to/candc\n\u279c echo \"this is a test sentence .\" | depccg_en --annotator candc\nID=1, Prob=-0.0006299018859863281\n(<T S[dcl] 0 2> (<T S[dcl] 0 2> (<L NP DT DT this NP>) (<T S[dcl]\\NP 0 2> (<L (S[dcl]\\NP)/NP VBZ VBZ is (S[dcl]\\NP)/NP>) (<T NP 0 2> (<L NP[nb]/N DT DT a NP[nb]/N>) (<T N 0 2> (<L N/N NN NN test N/N>) (<L N NN NN sentence N>) ) ) ) ) (<L . . . . .>) )\n```\n\nBy default, depccg expects the POS and NER models are placed in `$CANDC/models/pos` and `$CANDC/models/ner`, but you can explicitly specify them by setting `CANDC_MODEL_POS` and `CANDC_MODEL_NER` environmental variables.\n\nIt is also possible to obtain logical formulas using [ccg2lambda](https://github.com/mynlp/ccg2lambda)'s semantic parsing algorithm.\n```sh\n\u279c echo \"This is a test sentence .\" | depccg_en --format ccg2lambda --annotator spacy\nID=0 log probability=-0.0006299018859863281\nexists x.(_this(x) & exists z1.(_sentence(z1) & _test(z1) & (x = z1)))\n```\n\n\n### Using a pretrained Japanese parser\n\nThe best performing model is available by:\n```sh\n\u279c depccg_ja download\n```\n\nIt can be downloaded directly [here](https://drive.google.com/file/d/1bblQ6FYugXtgNNKnbCYgNfnQRkBATSY3/view?usp=sharing) (56M).\n\nThe Japanese parser depends on [Janome](https://github.com/mocobeta/janome) for the tokenization. Please install it by:\n```sh\n\u279c pip install janome\n```\n\nThe parser provides the almost same interface as with the English one, with slight differences including the default output format, which is now one compatible with the Japanese CCGbank:\n```sh\n\u279c echo \"\u3053\u308c\u306f\u30c6\u30b9\u30c8\u306e\u6587\u3067\u3059\u3002\" | depccg_ja\nID=1, Prob=-53.98793411254883\n{< S[mod=nm,form=base,fin=t] {< S[mod=nm,form=base,fin=f] {< NP[case=nc,mod=nm,fin=f] {NP[case=nc,mod=nm,fin=f] \u3053\u308c/\u3053\u308c/**} {NP[case=nc,mod=nm,fin=f]\\NP[case=nc,mod=nm,fin=f] \u306f/\u306f/**}} {< S[mod=nm,form=base,fin=f]\\NP[case=nc,mod=nm,fin=f] {< NP[case=nc,mod=nm,fin=f] {< NP[case=nc,mod=nm,fin=f] {NP[case=nc,mod=nm,fin=f] \u30c6\u30b9\u30c8/\u30c6\u30b9\u30c8/**} {NP[case=nc,mod=nm,fin=f]\\NP[case=nc,mod=nm,fin=f] \u306e/\u306e/**}} {NP[case=nc,mod=nm,fin=f]\\NP[case=nc,mod=nm,fin=f] \u6587/\u6587/**}} {(S[mod=nm,form=base,fin=f]\\NP[case=nc,mod=nm,fin=f])\\NP[case=nc,mod=nm,fin=f] \u3067\u3059/\u3067\u3059/**}}} {S[mod=nm,form=base,fin=t]\\S[mod=nm,form=base,fin=f] \u3002/\u3002/**}}\n```\n\nYou can pass pre-tokenized sentences as well:\n```sh\n\u279c echo \"\u3053\u308c \u306f \u30c6\u30b9\u30c8 \u306e \u6587 \u3067\u3059 \u3002\" | depccg_ja --pre-tokenized\nID=1, Prob=-53.98793411254883\n{< S[mod=nm,form=base,fin=t] {< S[mod=nm,form=base,fin=f] {< NP[case=nc,mod=nm,fin=f] {NP[case=nc,mod=nm,fin=f] \u3053\u308c/\u3053\u308c/**} {NP[case=nc,mod=nm,fin=f]\\NP[case=nc,mod=nm,fin=f] \u306f/\u306f/**}} {< S[mod=nm,form=base,fin=f]\\NP[case=nc,mod=nm,fin=f] {< NP[case=nc,mod=nm,fin=f] {< NP[case=nc,mod=nm,fin=f] {NP[case=nc,mod=nm,fin=f] \u30c6\u30b9\u30c8/\u30c6\u30b9\u30c8/**} {NP[case=nc,mod=nm,fin=f]\\NP[case=nc,mod=nm,fin=f] \u306e/\u306e/**}} {NP[case=nc,mod=nm,fin=f]\\NP[case=nc,mod=nm,fin=f] \u6587/\u6587/**}} {(S[mod=nm,form=base,fin=f]\\NP[case=nc,mod=nm,fin=f])\\NP[case=nc,mod=nm,fin=f] \u3067\u3059/\u3067\u3059/**}}} {S[mod=nm,form=base,fin=t]\\S[mod=nm,form=base,fin=f] \u3002/\u3002/**}}\n```\n\n### Available output formats\n\n* `auto` - the most standard format following AUTO format in the English CCGbank\n* `auto_extended` - extension of auto format with combinator info and POS/NER tags\n* `deriv` - visualized derivations in ASCII art\n* `xml` - XML format compatible with C&C's XML format (only for English parsing)\n* `conll` - CoNLL format\n* `html` - visualized trees in MathML\n* `prolog` - Prolog-like format\n* `jigg_xml` - XML format compatible with [Jigg](https://github.com/mynlp/jigg)\n* `ptb` - Penn Treebank-style format\n* `ccg2lambda` - logical formula converted from a derivation using [ccg2lambda](https://github.com/mynlp/ccg2lambda)\n* `jigg_xml_ccg2lambda` - jigg_xml format with ccg2lambda logical formula inserted\n* `json` - JSON format\n* `ja` - a format adopted in Japanese CCGbank (only for Japanese)\n\n### Programmatic Usage\n\n```python\nfrom depccg.parser import EnglishCCGParser\nfrom pathlib import Path\n\n# Available keyword arguments in initializing a CCG parser\n# Please refer to the following paper for category dictionary, seen rules, pruning etc.\n# \"A* CCG Parsing with a Supertag-factored Model\", Lewis and Steedman, 2014\nkwargs = dict(\n    # A list of binary rules \n    # By default: depccg.combinator.en_default_binary_rules\n    binary_rules=None,\n    # Penalize an application of a unary rule by adding this value (negative log probability)\n    unary_penalty=0.1,\n    # Prune supertags with low probabilities using this value\n    beta=0.00001,\n    # Set False if not prune\n    use_beta=True,\n    # Use category dictionary\n    use_category_dict=True,\n    # Use seen rules\n    use_seen_rules=True,\n    # This also used to prune supertags\n    pruning_size=50,\n    # Nbest outputs\n    nbest=1,\n    # Limit categories that can appear at the root of a CCG tree\n    # By default: S[dcl], S[wq], S[q], S[qem], NP.\n    possible_root_cats=None,\n    # Give up parsing long sentences\n    max_length=250,\n    # Give up parsing if it runs too many steps\n    max_steps=100000,\n    # You can specify a GPU\n    gpu=-1\n)\n\n# Initialize a parser from a model directory\nmodel = \"/path/to/model/directory\"\nparser = EnglishCCGParser.from_dir(\n    model,\n    load_tagger=True, # Load supertagging model\n    **kwargs)\n\nmodel = Path(\"/path/to/model/directory\")\nparser = EnglishCCGParser.from_files(\n    unary_rules=model / 'unary_rules.txt',\n    category_dict=model / 'cat_dict.txt',\n    seen_rules=model / 'seen_rules.txt',\n    tagger_model=model / 'tagger_model',\n    **kwargs)\n\n# If you don't like to keep separate files,\n# wget http://cl.naist.jp/~masashi-y/resources/depccg/config.json\nmodel = Path(\"/path/to/model/directory\")\nparser = EnglishCCGParser.from_json(\n    model / 'config.json',\n    tagger_model=model / 'tagger_model',\n    **kwargs)\n\nsents = [\n  \"This is a test sentence .\",\n  \"This is second .\"\n]\n\nresults = parser.parse_doc(sents)\nfor nbests in results:\n    for tree, log_prob in nbests:\n        print(tree.deriv)\n```\n\nFor Japanese CCG parsing, use `depccg.parser.JapaneseCCGParser`,\nwhich has the exactly same interface.\nNote that the Japanese parser accepts pre-tokenized sentences as input.\n\n## Train your own English supertagging model\n\nYou can use my [allennlp](https://allennlp.org/)-based supertagger and extend it.\n\nTo train a supertagger, prepare [the English CCGbank](https://catalog.ldc.upenn.edu/LDC2005T13) and download [vocab](http://cl.naist.jp/~masashi-y/resources/depccg/vocabulary.tar.gz):\n```sh\n\u279c cat ccgbank/data/AUTO/{0[2-9],1[0-9],20,21}/* > wsj_02-21.auto\n\u279c cat ccgbank/data/AUTO/00/* > wsj_00.auto\n```\n```sh\n\u279c wget http://cl.naist.jp/~masashi-y/resources/depccg/vocabulary.tar.gz\n\u279c tar xvf vocabulary.tar.gz\n```\n\nthen,\n```sh\n\u279c vocab=vocabulary train_data=wsj_02-21.auto test_data=wsj_00.auto gpu=0 \\\n  encoder_type=lstm token_embedding_type=char \\\n  allennlp train --include-package depccg.models.my_allennlp --serialization-dir results supertagger.jsonnet\n```\nThe training configs are passed either through environmental variables or directly writing to jsonnet config files, which are available in [supertagger.jsonnet](depccg/models/my_allennlp/config/supertagger.jsonnet) or [supertagger_tritrain.jsonnet](depccg/models/my_allennlp/config/supertagger_tritrain.jsonnet).\nThe latter is a config file for using [tri-training silver data](http://cl.naist.jp/~masashi-y/resources/depccg/headfirst_parsed.conll.stagged.gz) (309M) constructed in (Yoshikawa et al., 2017), on top of the English CCGbank.\n\nTo use the trained supertagger,\n```sh\n\u279c echo \"this is a test sentence .\"  | depccg_en --model results/model.tar.gz\n```\n\nor alternatively,\n```sh\n\u279c echo '{\"sentence\": \"this is a test sentence .\"}' > input.jsonl\n\u279c allennlp predict results/model.tar.gz --include-package depccg.models.my_allennlp --output-file weights.json input.jsonl\n\u279c cat weights.json | depccg_en --input-format json\n```\nwhere `weights.json` contains probabilities used in the parser (`p_tag` and `p_dep`).\n\n### Evaluation in terms of predicate-argument dependencies\nThe standard CCG parsing evaluation can be performed with the following script:\n\n```sh\n\u279c cat ccgbank/data/PARG/00/* > wsj_00.parg\n\u279c export CANDC=/path/to/candc\n\u279c python -m depccg.tools.evaluate wsj_00.parg wsj_00.predicted.auto\n```\nCurrently, the script is dependent on [C&C](https://www.cl.cam.ac.uk/~sc609/candc-1.00.html)'s `generate` program, which is only available by compiling the C&C program from the source.\n\n## Miscellaneous\n\n### Diff tool\n\nIn error analysis, you must want to see diffs between trees in an intuitive way.\n`depccg.tools.diff` does exactly this:\n\n```sh\n\u279c python -m depccg.tools.diff file1.auto file2.auto > diff.html\n```\n\nwhich outputs:\n\n![show diffs between trees](images/diff.png)\n\nwhere trees in the same lines of the files are compared and the diffs are marked in color.\n\n## Citation\n\nIf you make use of this software, please cite the following:\n\n    @inproceedings{yoshikawa:2017acl,\n      author={Yoshikawa, Masashi and Noji, Hiroshi and Matsumoto, Yuji},\n      title={A* CCG Parsing with a Supertag and Dependency Factored Model},\n      booktitle={Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)},\n      publisher={Association for Computational Linguistics},\n      year={2017},\n      pages={277--287},\n      location={Vancouver, Canada},\n      doi={10.18653/v1/P17-1026},\n      url={http://aclweb.org/anthology/P17-1026}\n    }\n\n\n\n## Licence\nMIT Licence\n\n## Contact\nFor questions and usage issues, please contact yoshikawa.masashi.yh8@is.naist.jp .\n\n## Acknowledgement\nIn creating the parser, I owe very much to:\n- [EasyCCG](https://github.com/mikelewis0/easyccg): from which I learned everything\n- [NLTK](http://www.nltk.org/): for nice pretty printing for parse derivation", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/masashi-y/depccg", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "depccg", "package_url": "https://pypi.org/project/depccg/", "platform": "", "project_url": "https://pypi.org/project/depccg/", "project_urls": {"Homepage": "https://github.com/masashi-y/depccg"}, "release_url": "https://pypi.org/project/depccg/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "A parser for natural language based on combinatory categorial grammar", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>depccg v1</h1>\n<p>UPDATE 2019/6/7<br>\n<em>The datasets and codes for my ACL2019 paper (<a href=\"https://arxiv.org/abs/1906.01834\" rel=\"nofollow\">Automatic Generation of High Quality CCGbanks for Parser Domain Adaptation</a>) are available at the following repo!</em>: <a href=\"https://github.com/masashi-y/ud2ccg\" rel=\"nofollow\">https://github.com/masashi-y/ud2ccg</a></p>\n<p>Codebase for <a href=\"https://arxiv.org/abs/1704.06936\" rel=\"nofollow\">A* CCG Parsing with a Supertag and Dependency Factored Model</a></p>\n<h3>Requirements</h3>\n<ul>\n<li>Python &gt;= 3.6.0</li>\n<li>A C++ compiler supporting <a href=\"https://en.wikipedia.org/wiki/C%2B%2B11\" rel=\"nofollow\">C++11 standard</a> (in case of gcc, must be &gt;= 4.8)</li>\n<li>OpenMP (optional, for efficient batched parsing)</li>\n</ul>\n<h2>Installation</h2>\n<p>Using pip:</p>\n<pre>\u279c pip install cython numpy depccg\n</pre>\n<p>If OpenMP is available in your environment, you can use it for more efficient parsing:</p>\n<pre>\u279c <span class=\"nv\">USE_OPENMP</span><span class=\"o\">=</span><span class=\"m\">1</span> pip install cython numpy depccg\n</pre>\n<h2>Usage</h2>\n<h3>Using a pretrained English parser</h3>\n<p>Currently following models are available for English:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">unlabeled/labeled F1 on CCGbank</th>\n<th align=\"left\">Download</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">basic</td>\n<td align=\"left\">model trained on the combination of CCGbank and tri-training dataset (Yoshikawa et al., 2017)</td>\n<td align=\"left\">94.0%/88.8%</td>\n<td align=\"left\"><a href=\"https://drive.google.com/file/d/1mxl1HU99iEQcUYhWhvkowbE4WOH0UKxv/view?usp=sharing\" rel=\"nofollow\">link</a> (189M)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>elmo</code></td>\n<td align=\"left\">basic model with its embeddings replaced with ELMo (Peters et al., 2018)</td>\n<td align=\"left\">94.98%/90.51%</td>\n<td align=\"left\"><a href=\"https://drive.google.com/file/d/1UldQDigVq4VG2pJx9yf3krFjV0IYOwLr/view?usp=sharing\" rel=\"nofollow\">link</a> (649M)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>rebank</code></td>\n<td align=\"left\">basic model trained on Rebanked CCGbank (Honnibal et al., 2010)</td>\n<td align=\"left\">-</td>\n<td align=\"left\"><a href=\"https://drive.google.com/file/d/1Az840uCW8QuAkNCZq_Y8VOkW5j0Vtcj9/view\" rel=\"nofollow\">link</a> (337M)</td>\n</tr>\n<tr>\n<td align=\"left\"><code>elmo_rebank</code></td>\n<td align=\"left\">ELMo model trained on Rebanked CCGbank</td>\n<td align=\"left\">-</td>\n<td align=\"left\"><a href=\"https://drive.google.com/open?id=1deyCjSgCuD16WkEhOL3IXEfQBfARh_ll\" rel=\"nofollow\">link</a> (1G)</td>\n</tr></tbody></table>\n<p>The basic model is available by:</p>\n<pre>\u279c depccg_en download\n</pre>\n<p>To use:</p>\n<pre>\u279c <span class=\"nb\">echo</span> <span class=\"s2\">\"this is a test sentence .\"</span> <span class=\"p\">|</span> depccg_en\n<span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">1</span>, <span class=\"nv\">Prob</span><span class=\"o\">=</span>-0.0006299018859863281\n<span class=\"o\">(</span>&lt;T S<span class=\"o\">[</span>dcl<span class=\"o\">]</span> <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;T S<span class=\"o\">[</span>dcl<span class=\"o\">]</span> <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L NP XX XX this NP&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;T S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L <span class=\"o\">(</span>S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">)</span>/NP XX XX is <span class=\"o\">(</span>S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">)</span>/NP&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;T NP <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L NP<span class=\"o\">[</span>nb<span class=\"o\">]</span>/N XX XX a NP<span class=\"o\">[</span>nb<span class=\"o\">]</span>/N&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;T N <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L N/N XX XX <span class=\"nb\">test</span> N/N&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;L N XX XX sentence N&gt;<span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span>&lt;L . XX XX . .&gt;<span class=\"o\">)</span> <span class=\"o\">)</span>\n</pre>\n<p>You can download other models by specifying their names:</p>\n<pre>\u279c depccg_en download elmo\n</pre>\n<p>To use, make sure to install <a href=\"https://github.com/allenai/allennlp\" rel=\"nofollow\">allennlp</a>:</p>\n<pre>\u279c pip install allennlp\n\u279c <span class=\"nb\">echo</span> <span class=\"s2\">\"this is a test sentence .\"</span> <span class=\"p\">|</span> depccg_en --model elmo\n</pre>\n<p>You can also specify in the <code>--model</code> option the path of a model file (in tar.gz) that is available from links above.</p>\n<p>Using a GPU (by <code>--gpu</code> option) is recommended if possible.</p>\n<p>There are several output formats (see <a href=\"#available-output-formats\" rel=\"nofollow\">below</a>).</p>\n<pre>\u279c <span class=\"nb\">echo</span> <span class=\"s2\">\"this is a test sentence .\"</span> <span class=\"p\">|</span> depccg_en --format deriv\n<span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">1</span>, <span class=\"nv\">Prob</span><span class=\"o\">=</span>-0.0006299018859863281\n this        is           a      <span class=\"nb\">test</span>  sentence  .\n  NP   <span class=\"o\">(</span>S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">)</span>/NP  NP<span class=\"o\">[</span>nb<span class=\"o\">]</span>/N  N/N      N      .\n                                ----------------&gt;\n                                       N\n                      --------------------------&gt;\n                                  NP\n      ------------------------------------------&gt;\n                      S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P\n------------------------------------------------&lt;\n                     S<span class=\"o\">[</span>dcl<span class=\"o\">]</span>\n---------------------------------------------------&lt;rp&gt;\n                      S<span class=\"o\">[</span>dcl<span class=\"o\">]</span>\n</pre>\n<p>By default, the input is expected to be pre-tokenized. If you want to process untokenized sentences, you can pass <code>--tokenize</code> option.</p>\n<p>The POS and NER tags in the output are filled with <code>XX</code> by default. You can replace them with ones predicted using <a href=\"https://spacy.io\" rel=\"nofollow\">SpaCy</a>:</p>\n<pre>\u279c pip install spacy\n\u279c python -m spacy download en\n\u279c <span class=\"nb\">echo</span> <span class=\"s2\">\"this is a test sentence .\"</span> <span class=\"p\">|</span> depccg_en --annotator spacy\n<span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">1</span>, <span class=\"nv\">Prob</span><span class=\"o\">=</span>-0.0006299018859863281\n<span class=\"o\">(</span>&lt;T S<span class=\"o\">[</span>dcl<span class=\"o\">]</span> <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;T S<span class=\"o\">[</span>dcl<span class=\"o\">]</span> <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L NP DT DT this NP&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;T S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L <span class=\"o\">(</span>S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">)</span>/NP VBZ VBZ is <span class=\"o\">(</span>S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">)</span>/NP&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;T NP <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L NP<span class=\"o\">[</span>nb<span class=\"o\">]</span>/N DT DT a NP<span class=\"o\">[</span>nb<span class=\"o\">]</span>/N&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;T N <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L N/N NN NN <span class=\"nb\">test</span> N/N&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;L N NN NN sentence N&gt;<span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span>&lt;L . . . . .&gt;<span class=\"o\">)</span> <span class=\"o\">)</span>\n</pre>\n<p>The parser uses a SpaCy's model symbolic-linked to <code>en</code> (it loads a model by <code>spacy('en')</code>).</p>\n<p>Orelse, you can use POS/NER taggers implemented in <a href=\"https://www.cl.cam.ac.uk/%7Esc609/candc-1.00.html\" rel=\"nofollow\">C&amp;C</a>, which may be useful in some sorts of parsing experiments:</p>\n<pre>\u279c <span class=\"nb\">export</span> <span class=\"nv\">CANDC</span><span class=\"o\">=</span>/path/to/candc\n\u279c <span class=\"nb\">echo</span> <span class=\"s2\">\"this is a test sentence .\"</span> <span class=\"p\">|</span> depccg_en --annotator candc\n<span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">1</span>, <span class=\"nv\">Prob</span><span class=\"o\">=</span>-0.0006299018859863281\n<span class=\"o\">(</span>&lt;T S<span class=\"o\">[</span>dcl<span class=\"o\">]</span> <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;T S<span class=\"o\">[</span>dcl<span class=\"o\">]</span> <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L NP DT DT this NP&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;T S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L <span class=\"o\">(</span>S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">)</span>/NP VBZ VBZ is <span class=\"o\">(</span>S<span class=\"o\">[</span>dcl<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">)</span>/NP&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;T NP <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L NP<span class=\"o\">[</span>nb<span class=\"o\">]</span>/N DT DT a NP<span class=\"o\">[</span>nb<span class=\"o\">]</span>/N&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;T N <span class=\"m\">0</span> <span class=\"m\">2</span>&gt; <span class=\"o\">(</span>&lt;L N/N NN NN <span class=\"nb\">test</span> N/N&gt;<span class=\"o\">)</span> <span class=\"o\">(</span>&lt;L N NN NN sentence N&gt;<span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span>&lt;L . . . . .&gt;<span class=\"o\">)</span> <span class=\"o\">)</span>\n</pre>\n<p>By default, depccg expects the POS and NER models are placed in <code>$CANDC/models/pos</code> and <code>$CANDC/models/ner</code>, but you can explicitly specify them by setting <code>CANDC_MODEL_POS</code> and <code>CANDC_MODEL_NER</code> environmental variables.</p>\n<p>It is also possible to obtain logical formulas using <a href=\"https://github.com/mynlp/ccg2lambda\" rel=\"nofollow\">ccg2lambda</a>'s semantic parsing algorithm.</p>\n<pre>\u279c <span class=\"nb\">echo</span> <span class=\"s2\">\"This is a test sentence .\"</span> <span class=\"p\">|</span> depccg_en --format ccg2lambda --annotator spacy\n<span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">0</span> log <span class=\"nv\">probability</span><span class=\"o\">=</span>-0.0006299018859863281\nexists x.<span class=\"o\">(</span>_this<span class=\"o\">(</span>x<span class=\"o\">)</span> <span class=\"p\">&amp;</span> exists z1.<span class=\"o\">(</span>_sentence<span class=\"o\">(</span>z1<span class=\"o\">)</span> <span class=\"p\">&amp;</span> _test<span class=\"o\">(</span>z1<span class=\"o\">)</span> <span class=\"p\">&amp;</span> <span class=\"o\">(</span><span class=\"nv\">x</span> <span class=\"o\">=</span> z1<span class=\"o\">)))</span>\n</pre>\n<h3>Using a pretrained Japanese parser</h3>\n<p>The best performing model is available by:</p>\n<pre>\u279c depccg_ja download\n</pre>\n<p>It can be downloaded directly <a href=\"https://drive.google.com/file/d/1bblQ6FYugXtgNNKnbCYgNfnQRkBATSY3/view?usp=sharing\" rel=\"nofollow\">here</a> (56M).</p>\n<p>The Japanese parser depends on <a href=\"https://github.com/mocobeta/janome\" rel=\"nofollow\">Janome</a> for the tokenization. Please install it by:</p>\n<pre>\u279c pip install janome\n</pre>\n<p>The parser provides the almost same interface as with the English one, with slight differences including the default output format, which is now one compatible with the Japanese CCGbank:</p>\n<pre>\u279c <span class=\"nb\">echo</span> <span class=\"s2\">\"\u3053\u308c\u306f\u30c6\u30b9\u30c8\u306e\u6587\u3067\u3059\u3002\"</span> <span class=\"p\">|</span> depccg_ja\n<span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">1</span>, <span class=\"nv\">Prob</span><span class=\"o\">=</span>-53.98793411254883\n<span class=\"o\">{</span>&lt; S<span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>t<span class=\"o\">]</span> <span class=\"o\">{</span>&lt; S<span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> <span class=\"o\">{</span>&lt; NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> <span class=\"o\">{</span>NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u3053\u308c/\u3053\u308c/**<span class=\"o\">}</span> <span class=\"o\">{</span>NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u306f/\u306f/**<span class=\"o\">}}</span> <span class=\"o\">{</span>&lt; S<span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>f<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> <span class=\"o\">{</span>&lt; NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> <span class=\"o\">{</span>&lt; NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> <span class=\"o\">{</span>NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u30c6\u30b9\u30c8/\u30c6\u30b9\u30c8/**<span class=\"o\">}</span> <span class=\"o\">{</span>NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u306e/\u306e/**<span class=\"o\">}}</span> <span class=\"o\">{</span>NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u6587/\u6587/**<span class=\"o\">}}</span> <span class=\"o\">{(</span>S<span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>f<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">])</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u3067\u3059/\u3067\u3059/**<span class=\"o\">}}}</span> <span class=\"o\">{</span>S<span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>t<span class=\"o\">]</span><span class=\"se\">\\S</span><span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u3002/\u3002/**<span class=\"o\">}}</span>\n</pre>\n<p>You can pass pre-tokenized sentences as well:</p>\n<pre>\u279c <span class=\"nb\">echo</span> <span class=\"s2\">\"\u3053\u308c \u306f \u30c6\u30b9\u30c8 \u306e \u6587 \u3067\u3059 \u3002\"</span> <span class=\"p\">|</span> depccg_ja --pre-tokenized\n<span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">1</span>, <span class=\"nv\">Prob</span><span class=\"o\">=</span>-53.98793411254883\n<span class=\"o\">{</span>&lt; S<span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>t<span class=\"o\">]</span> <span class=\"o\">{</span>&lt; S<span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> <span class=\"o\">{</span>&lt; NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> <span class=\"o\">{</span>NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u3053\u308c/\u3053\u308c/**<span class=\"o\">}</span> <span class=\"o\">{</span>NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u306f/\u306f/**<span class=\"o\">}}</span> <span class=\"o\">{</span>&lt; S<span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>f<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> <span class=\"o\">{</span>&lt; NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> <span class=\"o\">{</span>&lt; NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> <span class=\"o\">{</span>NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u30c6\u30b9\u30c8/\u30c6\u30b9\u30c8/**<span class=\"o\">}</span> <span class=\"o\">{</span>NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u306e/\u306e/**<span class=\"o\">}}</span> <span class=\"o\">{</span>NP<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u6587/\u6587/**<span class=\"o\">}}</span> <span class=\"o\">{(</span>S<span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>f<span class=\"o\">]</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">])</span><span class=\"se\">\\N</span>P<span class=\"o\">[</span><span class=\"k\">case</span><span class=\"o\">=</span>nc,mod<span class=\"o\">=</span>nm,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u3067\u3059/\u3067\u3059/**<span class=\"o\">}}}</span> <span class=\"o\">{</span>S<span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>t<span class=\"o\">]</span><span class=\"se\">\\S</span><span class=\"o\">[</span><span class=\"nv\">mod</span><span class=\"o\">=</span>nm,form<span class=\"o\">=</span>base,fin<span class=\"o\">=</span>f<span class=\"o\">]</span> \u3002/\u3002/**<span class=\"o\">}}</span>\n</pre>\n<h3>Available output formats</h3>\n<ul>\n<li><code>auto</code> - the most standard format following AUTO format in the English CCGbank</li>\n<li><code>auto_extended</code> - extension of auto format with combinator info and POS/NER tags</li>\n<li><code>deriv</code> - visualized derivations in ASCII art</li>\n<li><code>xml</code> - XML format compatible with C&amp;C's XML format (only for English parsing)</li>\n<li><code>conll</code> - CoNLL format</li>\n<li><code>html</code> - visualized trees in MathML</li>\n<li><code>prolog</code> - Prolog-like format</li>\n<li><code>jigg_xml</code> - XML format compatible with <a href=\"https://github.com/mynlp/jigg\" rel=\"nofollow\">Jigg</a></li>\n<li><code>ptb</code> - Penn Treebank-style format</li>\n<li><code>ccg2lambda</code> - logical formula converted from a derivation using <a href=\"https://github.com/mynlp/ccg2lambda\" rel=\"nofollow\">ccg2lambda</a></li>\n<li><code>jigg_xml_ccg2lambda</code> - jigg_xml format with ccg2lambda logical formula inserted</li>\n<li><code>json</code> - JSON format</li>\n<li><code>ja</code> - a format adopted in Japanese CCGbank (only for Japanese)</li>\n</ul>\n<h3>Programmatic Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">depccg.parser</span> <span class=\"kn\">import</span> <span class=\"n\">EnglishCCGParser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"c1\"># Available keyword arguments in initializing a CCG parser</span>\n<span class=\"c1\"># Please refer to the following paper for category dictionary, seen rules, pruning etc.</span>\n<span class=\"c1\"># \"A* CCG Parsing with a Supertag-factored Model\", Lewis and Steedman, 2014</span>\n<span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"c1\"># A list of binary rules </span>\n    <span class=\"c1\"># By default: depccg.combinator.en_default_binary_rules</span>\n    <span class=\"n\">binary_rules</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Penalize an application of a unary rule by adding this value (negative log probability)</span>\n    <span class=\"n\">unary_penalty</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Prune supertags with low probabilities using this value</span>\n    <span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"mf\">0.00001</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Set False if not prune</span>\n    <span class=\"n\">use_beta</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Use category dictionary</span>\n    <span class=\"n\">use_category_dict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Use seen rules</span>\n    <span class=\"n\">use_seen_rules</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"c1\"># This also used to prune supertags</span>\n    <span class=\"n\">pruning_size</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Nbest outputs</span>\n    <span class=\"n\">nbest</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Limit categories that can appear at the root of a CCG tree</span>\n    <span class=\"c1\"># By default: S[dcl], S[wq], S[q], S[qem], NP.</span>\n    <span class=\"n\">possible_root_cats</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Give up parsing long sentences</span>\n    <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Give up parsing if it runs too many steps</span>\n    <span class=\"n\">max_steps</span><span class=\"o\">=</span><span class=\"mi\">100000</span><span class=\"p\">,</span>\n    <span class=\"c1\"># You can specify a GPU</span>\n    <span class=\"n\">gpu</span><span class=\"o\">=-</span><span class=\"mi\">1</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Initialize a parser from a model directory</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"s2\">\"/path/to/model/directory\"</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">EnglishCCGParser</span><span class=\"o\">.</span><span class=\"n\">from_dir</span><span class=\"p\">(</span>\n    <span class=\"n\">model</span><span class=\"p\">,</span>\n    <span class=\"n\">load_tagger</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># Load supertagging model</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/model/directory\"</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">EnglishCCGParser</span><span class=\"o\">.</span><span class=\"n\">from_files</span><span class=\"p\">(</span>\n    <span class=\"n\">unary_rules</span><span class=\"o\">=</span><span class=\"n\">model</span> <span class=\"o\">/</span> <span class=\"s1\">'unary_rules.txt'</span><span class=\"p\">,</span>\n    <span class=\"n\">category_dict</span><span class=\"o\">=</span><span class=\"n\">model</span> <span class=\"o\">/</span> <span class=\"s1\">'cat_dict.txt'</span><span class=\"p\">,</span>\n    <span class=\"n\">seen_rules</span><span class=\"o\">=</span><span class=\"n\">model</span> <span class=\"o\">/</span> <span class=\"s1\">'seen_rules.txt'</span><span class=\"p\">,</span>\n    <span class=\"n\">tagger_model</span><span class=\"o\">=</span><span class=\"n\">model</span> <span class=\"o\">/</span> <span class=\"s1\">'tagger_model'</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If you don't like to keep separate files,</span>\n<span class=\"c1\"># wget http://cl.naist.jp/~masashi-y/resources/depccg/config.json</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/model/directory\"</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">EnglishCCGParser</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span>\n    <span class=\"n\">model</span> <span class=\"o\">/</span> <span class=\"s1\">'config.json'</span><span class=\"p\">,</span>\n    <span class=\"n\">tagger_model</span><span class=\"o\">=</span><span class=\"n\">model</span> <span class=\"o\">/</span> <span class=\"s1\">'tagger_model'</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"n\">sents</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s2\">\"This is a test sentence .\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"This is second .\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_doc</span><span class=\"p\">(</span><span class=\"n\">sents</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">nbests</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">log_prob</span> <span class=\"ow\">in</span> <span class=\"n\">nbests</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">deriv</span><span class=\"p\">)</span>\n</pre>\n<p>For Japanese CCG parsing, use <code>depccg.parser.JapaneseCCGParser</code>,\nwhich has the exactly same interface.\nNote that the Japanese parser accepts pre-tokenized sentences as input.</p>\n<h2>Train your own English supertagging model</h2>\n<p>You can use my <a href=\"https://allennlp.org/\" rel=\"nofollow\">allennlp</a>-based supertagger and extend it.</p>\n<p>To train a supertagger, prepare <a href=\"https://catalog.ldc.upenn.edu/LDC2005T13\" rel=\"nofollow\">the English CCGbank</a> and download <a href=\"http://cl.naist.jp/%7Emasashi-y/resources/depccg/vocabulary.tar.gz\" rel=\"nofollow\">vocab</a>:</p>\n<pre>\u279c cat ccgbank/data/AUTO/<span class=\"o\">{</span><span class=\"m\">0</span><span class=\"o\">[</span><span class=\"m\">2</span>-9<span class=\"o\">]</span>,1<span class=\"o\">[</span><span class=\"m\">0</span>-9<span class=\"o\">]</span>,20,21<span class=\"o\">}</span>/* &gt; wsj_02-21.auto\n\u279c cat ccgbank/data/AUTO/00/* &gt; wsj_00.auto\n</pre>\n<pre>\u279c wget http://cl.naist.jp/~masashi-y/resources/depccg/vocabulary.tar.gz\n\u279c tar xvf vocabulary.tar.gz\n</pre>\n<p>then,</p>\n<pre>\u279c <span class=\"nv\">vocab</span><span class=\"o\">=</span>vocabulary <span class=\"nv\">train_data</span><span class=\"o\">=</span>wsj_02-21.auto <span class=\"nv\">test_data</span><span class=\"o\">=</span>wsj_00.auto <span class=\"nv\">gpu</span><span class=\"o\">=</span><span class=\"m\">0</span> <span class=\"se\">\\</span>\n  <span class=\"nv\">encoder_type</span><span class=\"o\">=</span>lstm <span class=\"nv\">token_embedding_type</span><span class=\"o\">=</span>char <span class=\"se\">\\</span>\n  allennlp train --include-package depccg.models.my_allennlp --serialization-dir results supertagger.jsonnet\n</pre>\n<p>The training configs are passed either through environmental variables or directly writing to jsonnet config files, which are available in <a href=\"depccg/models/my_allennlp/config/supertagger.jsonnet\" rel=\"nofollow\">supertagger.jsonnet</a> or <a href=\"depccg/models/my_allennlp/config/supertagger_tritrain.jsonnet\" rel=\"nofollow\">supertagger_tritrain.jsonnet</a>.\nThe latter is a config file for using <a href=\"http://cl.naist.jp/%7Emasashi-y/resources/depccg/headfirst_parsed.conll.stagged.gz\" rel=\"nofollow\">tri-training silver data</a> (309M) constructed in (Yoshikawa et al., 2017), on top of the English CCGbank.</p>\n<p>To use the trained supertagger,</p>\n<pre>\u279c <span class=\"nb\">echo</span> <span class=\"s2\">\"this is a test sentence .\"</span>  <span class=\"p\">|</span> depccg_en --model results/model.tar.gz\n</pre>\n<p>or alternatively,</p>\n<pre>\u279c <span class=\"nb\">echo</span> <span class=\"s1\">'{\"sentence\": \"this is a test sentence .\"}'</span> &gt; input.jsonl\n\u279c allennlp predict results/model.tar.gz --include-package depccg.models.my_allennlp --output-file weights.json input.jsonl\n\u279c cat weights.json <span class=\"p\">|</span> depccg_en --input-format json\n</pre>\n<p>where <code>weights.json</code> contains probabilities used in the parser (<code>p_tag</code> and <code>p_dep</code>).</p>\n<h3>Evaluation in terms of predicate-argument dependencies</h3>\n<p>The standard CCG parsing evaluation can be performed with the following script:</p>\n<pre>\u279c cat ccgbank/data/PARG/00/* &gt; wsj_00.parg\n\u279c <span class=\"nb\">export</span> <span class=\"nv\">CANDC</span><span class=\"o\">=</span>/path/to/candc\n\u279c python -m depccg.tools.evaluate wsj_00.parg wsj_00.predicted.auto\n</pre>\n<p>Currently, the script is dependent on <a href=\"https://www.cl.cam.ac.uk/%7Esc609/candc-1.00.html\" rel=\"nofollow\">C&amp;C</a>'s <code>generate</code> program, which is only available by compiling the C&amp;C program from the source.</p>\n<h2>Miscellaneous</h2>\n<h3>Diff tool</h3>\n<p>In error analysis, you must want to see diffs between trees in an intuitive way.\n<code>depccg.tools.diff</code> does exactly this:</p>\n<pre>\u279c python -m depccg.tools.diff file1.auto file2.auto &gt; diff.html\n</pre>\n<p>which outputs:</p>\n<p><img alt=\"show diffs between trees\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13e2c37a9fa966e0d9d0938fb97d3e1c4baeaae7/696d616765732f646966662e706e67\"></p>\n<p>where trees in the same lines of the files are compared and the diffs are marked in color.</p>\n<h2>Citation</h2>\n<p>If you make use of this software, please cite the following:</p>\n<pre><code>@inproceedings{yoshikawa:2017acl,\n  author={Yoshikawa, Masashi and Noji, Hiroshi and Matsumoto, Yuji},\n  title={A* CCG Parsing with a Supertag and Dependency Factored Model},\n  booktitle={Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)},\n  publisher={Association for Computational Linguistics},\n  year={2017},\n  pages={277--287},\n  location={Vancouver, Canada},\n  doi={10.18653/v1/P17-1026},\n  url={http://aclweb.org/anthology/P17-1026}\n}\n</code></pre>\n<h2>Licence</h2>\n<p>MIT Licence</p>\n<h2>Contact</h2>\n<p>For questions and usage issues, please contact <a href=\"mailto:yoshikawa.masashi.yh8@is.naist.jp\">yoshikawa.masashi.yh8@is.naist.jp</a> .</p>\n<h2>Acknowledgement</h2>\n<p>In creating the parser, I owe very much to:</p>\n<ul>\n<li><a href=\"https://github.com/mikelewis0/easyccg\" rel=\"nofollow\">EasyCCG</a>: from which I learned everything</li>\n<li><a href=\"http://www.nltk.org/\" rel=\"nofollow\">NLTK</a>: for nice pretty printing for parse derivation</li>\n</ul>\n\n          </div>"}, "last_serial": 6905755, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "923594962678697a2c304b3ccd4ff71e", "sha256": "40c3f3356328cf599a66ae1ff79c15dd9f6765f7e8668fc4455ae265f0c8eaa2"}, "downloads": -1, "filename": "depccg-1.0.0.tar.gz", "has_sig": false, "md5_digest": "923594962678697a2c304b3ccd4ff71e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3307635, "upload_time": "2019-04-09T10:24:50", "upload_time_iso_8601": "2019-04-09T10:24:50.282209Z", "url": "https://files.pythonhosted.org/packages/58/49/98e546a5f52d1b99b65ba5765dbc3c5f7867d1eda7d32f9e4660beb80ca0/depccg-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "9f82b8aee87a47c4dbc24b492d130a9e", "sha256": "668ca6ef0ded3452940f73c25cafca46de80f22e292164b9450a967c735cb735"}, "downloads": -1, "filename": "depccg-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9f82b8aee87a47c4dbc24b492d130a9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3309196, "upload_time": "2019-04-09T10:30:21", "upload_time_iso_8601": "2019-04-09T10:30:21.052547Z", "url": "https://files.pythonhosted.org/packages/b6/06/17ab7dc9b078baf86b2682a0f5eeb91011d6644a8235e3e4ee5669013c6c/depccg-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "79681519edb8c10defc809e140ebdaf1", "sha256": "6d6d77a8c3f99f5ac0869fddce61df801ac52072523ef1dc3bcd632c63d31d77"}, "downloads": -1, "filename": "depccg-1.0.2.tar.gz", "has_sig": false, "md5_digest": "79681519edb8c10defc809e140ebdaf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3311779, "upload_time": "2019-04-09T10:39:43", "upload_time_iso_8601": "2019-04-09T10:39:43.477988Z", "url": "https://files.pythonhosted.org/packages/68/1b/f6089b576116fa059298a977322ed99c675a5e65a86679114b1ad7d0bed8/depccg-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "5b795244b38eaed3de3625ebde0342a0", "sha256": "099016259c57f136ec9674d9974ebde570ace1b63ed9e55632f38bc2e2e52ed6"}, "downloads": -1, "filename": "depccg-1.0.3.tar.gz", "has_sig": false, "md5_digest": "5b795244b38eaed3de3625ebde0342a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3479410, "upload_time": "2019-04-13T07:48:32", "upload_time_iso_8601": "2019-04-13T07:48:32.498785Z", "url": "https://files.pythonhosted.org/packages/c3/b1/f929b373d2adf666082f4e11a5a0568e206758fcd28029a23c8930104651/depccg-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "da9176f56c47bfb89605436ad1ae72e4", "sha256": "082d1c5a7750de80fd8917c9c170f23cafd4942d17de9f6d806872cf11e8363e"}, "downloads": -1, "filename": "depccg-1.0.4.tar.gz", "has_sig": false, "md5_digest": "da9176f56c47bfb89605436ad1ae72e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3482289, "upload_time": "2019-04-25T14:44:23", "upload_time_iso_8601": "2019-04-25T14:44:23.406777Z", "url": "https://files.pythonhosted.org/packages/b8/b7/370e753d6832582a30544462a62737b1241f9e3aa68742173aa024627d75/depccg-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "80c8a0ee4679ad174ce21c0d0c5b287b", "sha256": "0071101aea0369358452705289b22ae419cf002084f8d17af173c51bd36d2477"}, "downloads": -1, "filename": "depccg-1.0.5.tar.gz", "has_sig": false, "md5_digest": "80c8a0ee4679ad174ce21c0d0c5b287b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3482289, "upload_time": "2019-04-25T14:46:55", "upload_time_iso_8601": "2019-04-25T14:46:55.354784Z", "url": "https://files.pythonhosted.org/packages/dd/22/08ac5f2a06453be03df0f1b4438aa00d36f1b13c5c10848433ce3960a8b9/depccg-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "f470a0e8f16f1b2882ce92b2352387d6", "sha256": "c4caedde98a8f6c64832985adaca7ae9394f593c3ea2e3f527411ee84358df4f"}, "downloads": -1, "filename": "depccg-1.0.6.tar.gz", "has_sig": false, "md5_digest": "f470a0e8f16f1b2882ce92b2352387d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3483063, "upload_time": "2019-06-10T17:19:25", "upload_time_iso_8601": "2019-06-10T17:19:25.646779Z", "url": "https://files.pythonhosted.org/packages/5f/2e/49edf3d7df404c8bbcb8db21918274193287bdbf0b78338ddfc1921ef617/depccg-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "94bdb674ceb186312f85cb7d2cbeb5a0", "sha256": "285dcd640db4ac8c9e4009d6d098931d78c318d47073bd126cbfc72a064edbe9"}, "downloads": -1, "filename": "depccg-1.0.7.tar.gz", "has_sig": false, "md5_digest": "94bdb674ceb186312f85cb7d2cbeb5a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3480701, "upload_time": "2019-06-13T07:04:55", "upload_time_iso_8601": "2019-06-13T07:04:55.304299Z", "url": "https://files.pythonhosted.org/packages/e6/49/45f4f4b38192a6ff619a0f1eea39c7c3ad01dd03c1d4b99be4f4c9ba2375/depccg-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "8e78d42cba57f78bd25823d2ce799982", "sha256": "6d4e2c7c437cf3e71d7859a68f0753d28ad69180cd3f8ac00376b8dcc99b455e"}, "downloads": -1, "filename": "depccg-1.0.8.tar.gz", "has_sig": false, "md5_digest": "8e78d42cba57f78bd25823d2ce799982", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61877367, "upload_time": "2019-09-22T12:59:05", "upload_time_iso_8601": "2019-09-22T12:59:05.258854Z", "url": "https://files.pythonhosted.org/packages/83/0b/6df5160a885e3bad64f910ca95495e73208f94d11a054eec9f9949f7094e/depccg-1.0.8.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "631e60ac68944d7d1440b41c1da6f113", "sha256": "428d3a5bc25270a65fb8870de1069db75b4525e378c8d90b454f632ab1a1940a"}, "downloads": -1, "filename": "depccg-1.1.0.tar.gz", "has_sig": false, "md5_digest": "631e60ac68944d7d1440b41c1da6f113", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3508655, "upload_time": "2020-03-29T09:21:03", "upload_time_iso_8601": "2020-03-29T09:21:03.071668Z", "url": "https://files.pythonhosted.org/packages/66/6c/c5bc949d8aa8fb89dc88a508299f2889149cccd7e309792a2401f15499b3/depccg-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "631e60ac68944d7d1440b41c1da6f113", "sha256": "428d3a5bc25270a65fb8870de1069db75b4525e378c8d90b454f632ab1a1940a"}, "downloads": -1, "filename": "depccg-1.1.0.tar.gz", "has_sig": false, "md5_digest": "631e60ac68944d7d1440b41c1da6f113", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3508655, "upload_time": "2020-03-29T09:21:03", "upload_time_iso_8601": "2020-03-29T09:21:03.071668Z", "url": "https://files.pythonhosted.org/packages/66/6c/c5bc949d8aa8fb89dc88a508299f2889149cccd7e309792a2401f15499b3/depccg-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:05 2020"}