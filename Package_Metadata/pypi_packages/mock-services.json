{"info": {"author": "Florent Pigout", "author_email": "florent.pigout@novapost.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "=============\nMock services\n=============\n\n.. image:: https://circleci.com/gh/novafloss/mock-services.svg?style=shield\n   :target: https://circleci.com/gh/novafloss/mock-services\n   :alt: We are under CI!!\n\nAims to provide an easy way to mock an entire service API based on\n`requests-mock`_ and a simple dict definition of a service. The idea is to mock\neverything at start according given rules. Then `mock-services`_ allows to\n*start/stop* http mock locally.\n\nDuring our session we can:\n\n- add rules\n- permit external calls\n- stop mocking\n- reset rules\n- restart mocking\n- etc.\n\n\nMock endpoints explicitly\n=========================\n\n\n*Note:* rules urls must be regex. They always will be compiled before updating\nthe main `requests-mock`_ urls registry.\n\nLet's mock our favorite search engine::\n\n    >>> def fake_duckduckgo_cb(request):\n    ...     return 200, {}, 'Coincoin!'\n\n    >>> rules = [\n    ...     {\n    ...         'text': fake_duckduckgo_cb,\n    ...         'headers': {'Content-Type': 'text/html'},\n    ...         'method': 'GET',\n    ...         'url': r'^https://duckduckgo.com/\\?q='\n    ...     },\n    ... ]\n\n    >>> from mock_services import update_http_rules\n    >>> update_http_rules(rules)\n\n    >>> import requests\n    >>> requests.get('https://duckduckgo.com/?q=mock-services').content[:15]\n    '<!DOCTYPE html>'\n\n    >>> from mock_services import start_http_mock\n    >>> start_http_mock()\n\n    >>> requests.get('https://duckduckgo.com/?q=mock-services').content\n    'Coincoin!'\n\n\nWhen the http_mock is started if you try to call an external url, it should\nfail::\n\n    >>> requests.get('https://www.google.com/#q=mock-services')\n    ...\n    ConnectionError: Connection refused: GET https://www.google.com/#q=mock-services\n\n\nThen you can allow external calls if needed::\n\n    >>> from mock_services import http_mock\n    >>> http_mock.set_allow_external(True)\n\n    >>> requests.get('https://www.google.com/#q=mock-services').content[:15]\n    '<!doctype html>'\n\n\nAt anytime you can stop the mocking as follow::\n\n    >>> from mock_services import stop_http_mock\n    >>> stop_http_mock()\n\n    >>> requests.get('https://duckduckgo.com/?q=mock-services').content[:15]\n    '<!DOCTYPE html>'\n\n\nOr stop mocking during a function call::\n\n    >>> start_http_mock()\n\n    >>> @no_http_mock\n    ... def please_do_not_mock_me():\n    ...     return requests.get('https://duckduckgo.com/?q=mock-services').content[:15] == '<!DOCTYPE html>', 'mocked!'\n\n    >>> please_do_not_mock_me\n\n\nOr start mocking for another function call::\n\n    >>> stop_http_mock()\n\n    >>> @with_http_mock\n    ... def please_mock_me():\n    ...     assert requests.get('https://duckduckgo.com/?q=mock-services').content == 'Coincoin', 'no mock!'\n\n    >>> please_mock_me\n\n\nMock service easy\n=================\n\n\nYou can add REST rules with an explicit method. It will add rules as above and\nautomatically bind callbacks to fake a REST service.\n\n*Note:* *resource* and *id* regex options are mandatory in the rules urls.\n\nAdditionally, `mock_services`_ include `attrs`_ library. It can be use for\nfield validation as follow.\n\nThis service mock will create, get, update and delete resources for you::\n\n    >>> import attr\n\n    >>> rest_rules = [\n    ...     {\n    ...         'method': 'LIST',\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)$'\n    ...     },\n    ...     {\n    ...         'method': 'GET',\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)/(?P<id>\\d+)$',\n    ...     },\n    ...     {\n    ...         'method': 'GET',\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)/(?P<id>\\d+)/(?P<action>download)$',\n    ...     },\n    ...     {\n    ...         'method': 'POST',\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)$',\n    ...         'id_name': 'id',\n    ...         'id_factory': int,\n    ...         'attrs': {\n    ...             'bar': attr.ib(),\n    ...             'foo':attr.ib(default=True)\n    ...         }\n    ...     },\n    ...     {\n    ...         'method': 'PATCH',\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)/(?P<id>\\d+)$',\n    ...     },\n    ...     {\n    ...         'method': 'DELETE',\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)/(?P<id>\\d+)$'\n    ...     },\n    ... ]\n\n    >>> from mock_services import update_rest_rules\n    >>> update_rest_rules(rest_rules)\n\n    >>> from mock_services import start_http_mock\n    >>> start_http_mock()\n\n    >>> response = requests.get('http://my_fake_service/api')\n    >>> response.status_code\n    200\n    >>> response.json()\n    []\n\n    >>> response = requests.get('http://my_fake_service/api/1')\n    >>> response.status_code\n    404\n\n    >>> import json\n\n    >>> response = requests.post('http://my_fake_service/api',\n    ...                          data=json.dumps({}),\n    ...                          headers={'content-type': 'application/json'})\n    >>> response.status_code\n    400\n\n    >>> response = requests.post('http://my_fake_service/api',\n    ...                          data=json.dumps({'bar': 'Python will save the world'}),\n    ...                          headers={'content-type': 'application/json'})\n    >>> response.status_code\n    201\n    >>> response.json()\n    {\n      'id': 1,\n      'foo'; True,\n      'bar'; 'Python will save the world.'\n    }\n\n    >>> response = requests.patch('http://my_fake_service/api/1',\n    ...                           data=json.dumps({'bar': \"Python will save the world. I don't know how. But it will.\"}),\n    ...                           headers={'content-type': 'application/json'})\n    >>> response.status_code\n    200\n\n    >>> response = requests.get('http://my_fake_service/api/1')\n    >>> response.status_code\n    200\n    >>> response.json()\n    {\n      'id': 1,\n      'foo'; True,\n      'bar'; \"Python will save the world. I don't know how. But it will.\"\n    }\n\n    >>> response = requests.delete('http://my_fake_service/api/1')\n    >>> response.status_code\n    204\n\n\nMore validation\n===============\n\n\nIs some cases you need to validate a resource against another. Then you can add\nglobal validators per endpoint as follow::\n\n    >>> from mock_services import storage\n    >>> from mock_services.service import ResourceContext\n    >>> from mock_services.exceptions import Http409\n\n    >>> def duplicate_foo(request):\n    ...     data = json.loads(request.body)\n    ...     ctx = ResourceContext(hostname='my_fake_service', resource='api')\n    ...     if data['foo'] in [o['foo'] for o in storage.list(ctx)]:\n    ...         raise Http409\n\n    >>> rest_rules_with_validators = [\n    ...     {\n    ...         'method': 'POST',\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)$',\n    ...         'validators': [\n    ...             duplicate_foo,\n    ...         ],\n    ...     },\n    ... ]\n\n    >>> response = requests.post('http://my_fake_service/api',\n    ...                          data=json.dumps({'foo': 'bar'}),\n    ...                          headers={'content-type': 'application/json'})\n    >>> response.status_code\n    201\n\n    >>> response = requests.post('http://my_fake_service/api',\n    ...                          data=json.dumps({'foo': 'bar'}),\n    ...                          headers={'content-type': 'application/json'})\n    >>> response.status_code\n    409\n\n\nHave fun in testing external APIs ;)\n\n\n.. _`attrs`: https://github.com/hynek/attrs\n.. _`requests-mock`: https://github.com/openstack/requests-mock\n.. _`mock-services`: https://github.com/novafloss/mock-services\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/novafloss/mock-services", "keywords": "http", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mock-services", "package_url": "https://pypi.org/project/mock-services/", "platform": "", "project_url": "https://pypi.org/project/mock-services/", "project_urls": {"Homepage": "https://github.com/novafloss/mock-services"}, "release_url": "https://pypi.org/project/mock-services/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "Mock services.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            =============<br>Mock services<br>=============<br><br>.. image:: https://circleci.com/gh/novafloss/mock-services.svg?style=shield<br>   :target: https://circleci.com/gh/novafloss/mock-services<br>   :alt: We are under CI!!<br><br>Aims to provide an easy way to mock an entire service API based on<br>`requests-mock`_ and a simple dict definition of a service. The idea is to mock<br>everything at start according given rules. Then `mock-services`_ allows to<br>*start/stop* http mock locally.<br><br>During our session we can:<br><br>- add rules<br>- permit external calls<br>- stop mocking<br>- reset rules<br>- restart mocking<br>- etc.<br><br><br>Mock endpoints explicitly<br>=========================<br><br><br>*Note:* rules urls must be regex. They always will be compiled before updating<br>the main `requests-mock`_ urls registry.<br><br>Let's mock our favorite search engine::<br><br>    &gt;&gt;&gt; def fake_duckduckgo_cb(request):<br>    ...     return 200, {}, 'Coincoin!'<br><br>    &gt;&gt;&gt; rules = [<br>    ...     {<br>    ...         'text': fake_duckduckgo_cb,<br>    ...         'headers': {'Content-Type': 'text/html'},<br>    ...         'method': 'GET',<br>    ...         'url': r'^https://duckduckgo.com/\\?q='<br>    ...     },<br>    ... ]<br><br>    &gt;&gt;&gt; from mock_services import update_http_rules<br>    &gt;&gt;&gt; update_http_rules(rules)<br><br>    &gt;&gt;&gt; import requests<br>    &gt;&gt;&gt; requests.get('https://duckduckgo.com/?q=mock-services').content[:15]<br>    '&lt;!DOCTYPE html&gt;'<br><br>    &gt;&gt;&gt; from mock_services import start_http_mock<br>    &gt;&gt;&gt; start_http_mock()<br><br>    &gt;&gt;&gt; requests.get('https://duckduckgo.com/?q=mock-services').content<br>    'Coincoin!'<br><br><br>When the http_mock is started if you try to call an external url, it should<br>fail::<br><br>    &gt;&gt;&gt; requests.get('https://www.google.com/#q=mock-services')<br>    ...<br>    ConnectionError: Connection refused: GET https://www.google.com/#q=mock-services<br><br><br>Then you can allow external calls if needed::<br><br>    &gt;&gt;&gt; from mock_services import http_mock<br>    &gt;&gt;&gt; http_mock.set_allow_external(True)<br><br>    &gt;&gt;&gt; requests.get('https://www.google.com/#q=mock-services').content[:15]<br>    '&lt;!doctype html&gt;'<br><br><br>At anytime you can stop the mocking as follow::<br><br>    &gt;&gt;&gt; from mock_services import stop_http_mock<br>    &gt;&gt;&gt; stop_http_mock()<br><br>    &gt;&gt;&gt; requests.get('https://duckduckgo.com/?q=mock-services').content[:15]<br>    '&lt;!DOCTYPE html&gt;'<br><br><br>Or stop mocking during a function call::<br><br>    &gt;&gt;&gt; start_http_mock()<br><br>    &gt;&gt;&gt; @no_http_mock<br>    ... def please_do_not_mock_me():<br>    ...     return requests.get('https://duckduckgo.com/?q=mock-services').content[:15] == '&lt;!DOCTYPE html&gt;', 'mocked!'<br><br>    &gt;&gt;&gt; please_do_not_mock_me<br><br><br>Or start mocking for another function call::<br><br>    &gt;&gt;&gt; stop_http_mock()<br><br>    &gt;&gt;&gt; @with_http_mock<br>    ... def please_mock_me():<br>    ...     assert requests.get('https://duckduckgo.com/?q=mock-services').content == 'Coincoin', 'no mock!'<br><br>    &gt;&gt;&gt; please_mock_me<br><br><br>Mock service easy<br>=================<br><br><br>You can add REST rules with an explicit method. It will add rules as above and<br>automatically bind callbacks to fake a REST service.<br><br>*Note:* *resource* and *id* regex options are mandatory in the rules urls.<br><br>Additionally, `mock_services`_ include `attrs`_ library. It can be use for<br>field validation as follow.<br><br>This service mock will create, get, update and delete resources for you::<br><br>    &gt;&gt;&gt; import attr<br><br>    &gt;&gt;&gt; rest_rules = [<br>    ...     {<br>    ...         'method': 'LIST',<br>    ...         'url': r'^http://my_fake_service/(?P&lt;resource&gt;api)$'<br>    ...     },<br>    ...     {<br>    ...         'method': 'GET',<br>    ...         'url': r'^http://my_fake_service/(?P&lt;resource&gt;api)/(?P&lt;id&gt;\\d+)$',<br>    ...     },<br>    ...     {<br>    ...         'method': 'GET',<br>    ...         'url': r'^http://my_fake_service/(?P&lt;resource&gt;api)/(?P&lt;id&gt;\\d+)/(?P&lt;action&gt;download)$',<br>    ...     },<br>    ...     {<br>    ...         'method': 'POST',<br>    ...         'url': r'^http://my_fake_service/(?P&lt;resource&gt;api)$',<br>    ...         'id_name': 'id',<br>    ...         'id_factory': int,<br>    ...         'attrs': {<br>    ...             'bar': attr.ib(),<br>    ...             'foo':attr.ib(default=True)<br>    ...         }<br>    ...     },<br>    ...     {<br>    ...         'method': 'PATCH',<br>    ...         'url': r'^http://my_fake_service/(?P&lt;resource&gt;api)/(?P&lt;id&gt;\\d+)$',<br>    ...     },<br>    ...     {<br>    ...         'method': 'DELETE',<br>    ...         'url': r'^http://my_fake_service/(?P&lt;resource&gt;api)/(?P&lt;id&gt;\\d+)$'<br>    ...     },<br>    ... ]<br><br>    &gt;&gt;&gt; from mock_services import update_rest_rules<br>    &gt;&gt;&gt; update_rest_rules(rest_rules)<br><br>    &gt;&gt;&gt; from mock_services import start_http_mock<br>    &gt;&gt;&gt; start_http_mock()<br><br>    &gt;&gt;&gt; response = requests.get('http://my_fake_service/api')<br>    &gt;&gt;&gt; response.status_code<br>    200<br>    &gt;&gt;&gt; response.json()<br>    []<br><br>    &gt;&gt;&gt; response = requests.get('http://my_fake_service/api/1')<br>    &gt;&gt;&gt; response.status_code<br>    404<br><br>    &gt;&gt;&gt; import json<br><br>    &gt;&gt;&gt; response = requests.post('http://my_fake_service/api',<br>    ...                          data=json.dumps({}),<br>    ...                          headers={'content-type': 'application/json'})<br>    &gt;&gt;&gt; response.status_code<br>    400<br><br>    &gt;&gt;&gt; response = requests.post('http://my_fake_service/api',<br>    ...                          data=json.dumps({'bar': 'Python will save the world'}),<br>    ...                          headers={'content-type': 'application/json'})<br>    &gt;&gt;&gt; response.status_code<br>    201<br>    &gt;&gt;&gt; response.json()<br>    {<br>      'id': 1,<br>      'foo'; True,<br>      'bar'; 'Python will save the world.'<br>    }<br><br>    &gt;&gt;&gt; response = requests.patch('http://my_fake_service/api/1',<br>    ...                           data=json.dumps({'bar': \"Python will save the world. I don't know how. But it will.\"}),<br>    ...                           headers={'content-type': 'application/json'})<br>    &gt;&gt;&gt; response.status_code<br>    200<br><br>    &gt;&gt;&gt; response = requests.get('http://my_fake_service/api/1')<br>    &gt;&gt;&gt; response.status_code<br>    200<br>    &gt;&gt;&gt; response.json()<br>    {<br>      'id': 1,<br>      'foo'; True,<br>      'bar'; \"Python will save the world. I don't know how. But it will.\"<br>    }<br><br>    &gt;&gt;&gt; response = requests.delete('http://my_fake_service/api/1')<br>    &gt;&gt;&gt; response.status_code<br>    204<br><br><br>More validation<br>===============<br><br><br>Is some cases you need to validate a resource against another. Then you can add<br>global validators per endpoint as follow::<br><br>    &gt;&gt;&gt; from mock_services import storage<br>    &gt;&gt;&gt; from mock_services.service import ResourceContext<br>    &gt;&gt;&gt; from mock_services.exceptions import Http409<br><br>    &gt;&gt;&gt; def duplicate_foo(request):<br>    ...     data = json.loads(request.body)<br>    ...     ctx = ResourceContext(hostname='my_fake_service', resource='api')<br>    ...     if data['foo'] in [o['foo'] for o in storage.list(ctx)]:<br>    ...         raise Http409<br><br>    &gt;&gt;&gt; rest_rules_with_validators = [<br>    ...     {<br>    ...         'method': 'POST',<br>    ...         'url': r'^http://my_fake_service/(?P&lt;resource&gt;api)$',<br>    ...         'validators': [<br>    ...             duplicate_foo,<br>    ...         ],<br>    ...     },<br>    ... ]<br><br>    &gt;&gt;&gt; response = requests.post('http://my_fake_service/api',<br>    ...                          data=json.dumps({'foo': 'bar'}),<br>    ...                          headers={'content-type': 'application/json'})<br>    &gt;&gt;&gt; response.status_code<br>    201<br><br>    &gt;&gt;&gt; response = requests.post('http://my_fake_service/api',<br>    ...                          data=json.dumps({'foo': 'bar'}),<br>    ...                          headers={'content-type': 'application/json'})<br>    &gt;&gt;&gt; response.status_code<br>    409<br><br><br>Have fun in testing external APIs ;)<br><br><br>.. _`attrs`: https://github.com/hynek/attrs<br>.. _`requests-mock`: https://github.com/openstack/requests-mock<br>.. _`mock-services`: https://github.com/novafloss/mock-services<br>\n          </div>"}, "last_serial": 3676271, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d6b80860b39e5e797b9f216e5d5d593d", "sha256": "e21741d28282ad69da09f47c3da5e6b8babc09bef8ed7deb0c633a90270013f0"}, "downloads": -1, "filename": "mock_services-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "d6b80860b39e5e797b9f216e5d5d593d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10400, "upload_time": "2015-12-10T16:41:20", "upload_time_iso_8601": "2015-12-10T16:41:20.711981Z", "url": "https://files.pythonhosted.org/packages/db/c8/168602ef56adb7f6208f9c82e6caa04ac9f64edcce4d84e980d1f9c88e10/mock_services-0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59a98378b01e0d97a2d5e820409c486e", "sha256": "a0a35699529e7c256fdc9ad61900253f35b0052ae0488be377d75124156f9262"}, "downloads": -1, "filename": "mock-services-0.1.tar.gz", "has_sig": false, "md5_digest": "59a98378b01e0d97a2d5e820409c486e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7462, "upload_time": "2015-12-10T16:39:18", "upload_time_iso_8601": "2015-12-10T16:39:18.431616Z", "url": "https://files.pythonhosted.org/packages/4d/56/550b281dc1672b09765ef81b3ff5ef964a807120ef567e49d75def7a3f02/mock-services-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "52130efc95c123e361347d91e7615102", "sha256": "469501f6c6ba3b363c7a901162308b05f87abafd8b6b43bb51da2b9ae8161099"}, "downloads": -1, "filename": "mock-services-0.2.tar.gz", "has_sig": false, "md5_digest": "52130efc95c123e361347d91e7615102", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8415, "upload_time": "2016-01-07T11:25:06", "upload_time_iso_8601": "2016-01-07T11:25:06.303557Z", "url": "https://files.pythonhosted.org/packages/59/63/759f875507aa092ed9db76e1803bbdb6707f1777d91552a93fc2d1c1a609/mock-services-0.2.tar.gz", "yanked": false}], "0.2.dev0": [], "0.3": [{"comment_text": "", "digests": {"md5": "d775a8c9eae374db0fc2ff33c93d414d", "sha256": "bd53a3c9d7e6b3a81d94808d01412b009852343ee7c89abcbfb7ccafa393263b"}, "downloads": -1, "filename": "mock-services-0.3.tar.gz", "has_sig": false, "md5_digest": "d775a8c9eae374db0fc2ff33c93d414d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8584, "upload_time": "2016-10-13T13:00:34", "upload_time_iso_8601": "2016-10-13T13:00:34.981818Z", "url": "https://files.pythonhosted.org/packages/52/73/160e9df2e3948d6118426282673b1661b941229771e988f2883e9df998b4/mock-services-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "e1b130bb22c4ec35af503703d892c034", "sha256": "dc3a3c69b122f6647857f12748cb02a195e8216ba7b8513352d96c2a2768933a"}, "downloads": -1, "filename": "mock_services-0.3.1-py2-none-any.whl", "has_sig": false, "md5_digest": "e1b130bb22c4ec35af503703d892c034", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 12080, "upload_time": "2018-03-16T13:39:23", "upload_time_iso_8601": "2018-03-16T13:39:23.576662Z", "url": "https://files.pythonhosted.org/packages/1e/7e/294d8a5b2edf1880ba6f709b8461029a6971e72e646cb906bcf40784ea3a/mock_services-0.3.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92513ec7e175c011ef6deca8e8e894b6", "sha256": "b07d51a55b18b7399a2c30fdb9008697df17d7717a04afccc9f89656ce82c193"}, "downloads": -1, "filename": "mock-services-0.3.1.tar.gz", "has_sig": false, "md5_digest": "92513ec7e175c011ef6deca8e8e894b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8668, "upload_time": "2018-03-16T13:39:21", "upload_time_iso_8601": "2018-03-16T13:39:21.852671Z", "url": "https://files.pythonhosted.org/packages/a2/6d/291552d2b8c710de5736d4db821707d48f03cecafe908ccfc3dbf08da183/mock-services-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1b130bb22c4ec35af503703d892c034", "sha256": "dc3a3c69b122f6647857f12748cb02a195e8216ba7b8513352d96c2a2768933a"}, "downloads": -1, "filename": "mock_services-0.3.1-py2-none-any.whl", "has_sig": false, "md5_digest": "e1b130bb22c4ec35af503703d892c034", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 12080, "upload_time": "2018-03-16T13:39:23", "upload_time_iso_8601": "2018-03-16T13:39:23.576662Z", "url": "https://files.pythonhosted.org/packages/1e/7e/294d8a5b2edf1880ba6f709b8461029a6971e72e646cb906bcf40784ea3a/mock_services-0.3.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92513ec7e175c011ef6deca8e8e894b6", "sha256": "b07d51a55b18b7399a2c30fdb9008697df17d7717a04afccc9f89656ce82c193"}, "downloads": -1, "filename": "mock-services-0.3.1.tar.gz", "has_sig": false, "md5_digest": "92513ec7e175c011ef6deca8e8e894b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8668, "upload_time": "2018-03-16T13:39:21", "upload_time_iso_8601": "2018-03-16T13:39:21.852671Z", "url": "https://files.pythonhosted.org/packages/a2/6d/291552d2b8c710de5736d4db821707d48f03cecafe908ccfc3dbf08da183/mock-services-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:01 2020"}