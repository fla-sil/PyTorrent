{"info": {"author": "Tarcisio Cantalice", "author_email": "tarcisiocantalice@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Flask", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Tiny Router\nTiny Router \u00e9 um roteador de caminhos para aplica\u00e7\u00f5es [Flask](https://github.com/pallets/flask). A biblioteca centraliza a defini\u00e7\u00e3o e gerenciamento das rotas utilizadas na aplica\u00e7\u00e3o, criar, editar, remover ou trocar controladores facilmente evitando conflitos.\n\n- [Criando rotas](#criando-rotas)\n- [Registrando rotas](#registrando-rotas)\n- [Fun\u00e7\u00f5es Helper](#fun\u00e7\u00f5es-helper)\n    - [M\u00e9todos HTTP](#m\u00e9todos-http)\n    - [Pr\u00e9fixos](#pr\u00e9fixos)\n- [Dicas de uso](#dicas-de-uso)\n\n## Criando rotas\n\nUma rota \u00e9 representada pela classe ```Route```. Ela possui os seguinte atributos:\n\n* **endpoint** - Nome utilizado para identificar a rota. Em caso de endpoints com m\u00faltiplos termos, recomendado separ\u00e1-los por ponto ou sublinhado.\n* **rule** - Caminho para um recurso espec\u00edfico\n* **view** - Fun\u00e7\u00e3o ou classe que ir\u00e1 manipular a requisi\u00e7\u00e3o\n* **methods** - M\u00e9todos HTTP para chamada da rota (Default: ```{'GET'}```)\n* **parameters** - Par\u00e2metros que podem ser passados na url.\n\nAo criar uma rota apenas s\u00e3o obrigat\u00f3rios ```endpoint```, ```rule``` e ```view```.\n\nExemplo de uma rota simples:\n```python\nfrom tinyrouter import Route\nfrom views import user_index\n\nRoute('user.index', '/user', user_index)\n```\nPor padr\u00e3o, as rotas s\u00e3o definidas para aceitas apenas o m\u00e9todo ```GET```. Entretanto outros m\u00e9todos podem ser definidos, ou at\u00e9 mais de um.\n```python\nfrom tinyrouter import Route\nfrom views import user_index\n\n# Defini\u00e7\u00e3o dos m\u00e9todos\nmethods = ['GET', 'POST']\n\nRoute('user.index', '/user', user_index, methods)\n```\n## Registrando as rotas\n\nPrimeiro cria-se uma inst\u00e2ncia do roteador\n```python\nfrom flask import Flask\nfrom tinyrouter import Router\n\napp = Flask(__name__)\nrouter = Router(app)\n```\n\nE invoca o m\u00e9todo ```register``` passando a lista de rotas que deseja registrar na aplica\u00e7\u00e3o\n```python\n'''\nImporta\u00e7\u00e3oes anteriores\n'''\nfrom my_app.routes import routes\n\n'''\n Inst\u00e2ncia da aplica\u00e7\u00e3o e do roteador\n'''\nrouter.register(routes)\n```\n\nPronto! As rotas agora est\u00e3o registradas na aplica\u00e7\u00e3o.\n\n\u00c9 poss\u00edvel registrar v\u00e1rios grupos de rotas.\n```python\nfrom webapp.routes import routes as web_routes\nfrom api.routes import routes as api_routes\n\nrouter.register(web_routes)\nrouter.register(api_routes)\n```\nOu ainda...\n```python\nrouter.register(web_routes, api_routes)\n```\n\n## Fun\u00e7\u00f5es Helper\n### **M\u00e9todos HTTP**\nCriar uma rota que aceite apenas uma m\u00e9todo HTTP utilizando Route fica da seguinte forma:\n```python\n# Importa\u00e7\u00e3o da view...\nfrom tinyrouter import Route\n\n\nRoute('cliente.create', '/cliente', cliente_create, ['POST'])\n```\nEntretanto esse processo pode ser encurtado com os helpers de m\u00e9todos.\nUtilizando os helpers, o exemplo acima ficaria assim:\n```python\n# Importa\u00e7\u00e3o da view...\nfrom tinyrouter.helpers import route_post as post\n\npost('cliente.create', '/cliente', cliente_create)\n```\nO resultado ser\u00e1 exatamente o mesmo. Os m\u00e9todos suportados s\u00e3o:\n- GET\n- POST\n- PUT\n- DELETE\n\n\n### **Pr\u00e9fixos**\nAgrupar rotas de acordo com o recurso ou contexto utilizando o Route pode ser um pouco verboso, como por exemplo, rotas associadas ao recurso Cliente.\n\n**[GET] - /cliente/** (Lista todos os Clientes)<br>\n**[POST] - /cliente/** (Cria um novo registro de Cliente)<br>\n**[GET] - /cliente/{id}** (Recupera um registro espec\u00edfico de Cliente)<br>\n**[PUT] - /cliente/{id}** (Atualiza um registro espec\u00edfico de Cliente)<br>\n**[DELETE] - /cliente/{id}** (Deleta um registro espec\u00edfico de Cliente )\n\n\u00c9 poss\u00edvel notar que para cada um dos endpoints foi necess\u00e1rio p\u00f4r o nome do recurso (Cliente) como pr\u00e9fixo. Utilizando o helper de pr\u00e9fixo esse trabalho n\u00e3o ser\u00e1 mais necess\u00e1rio. A fun\u00e7\u00e3o recebe o pr\u00e9fixo a ser adicionado e as rotas que receber\u00e3o o mesmo. Exemplo:\n\n```python\n# Importa\u00e7\u00e3o das views\nfrom tinyrouter.helpers import route_prefix as prefix\nfrom tinyrouter.helpers import (route_get as get,\\\n                                route_post as post,\\\n                                route_put as put,\\\n                                route_delete as delete)\n\n*prefix('cliente', \n        get('cliente.all', '/', cliente_all),\n        post('cliente.create', '/', cliente_create),\n        put('cliente.udpate', '/<id>', cliente_update),\n        get('cliente.show'), '/<id>', cliente_show),\n        delete('cliente.delete', '/<id>', cliente_delete)\n    )\n```\nNOTA: *Ao utilizar o route_prefix \u00e9 necess\u00e1rio p\u00f4r um * na frente da fun\u00e7\u00e3o pois \u00e9 retornado uma cole\u00e7\u00e3o de rotas alteradas, e este artif\u00edcio garante que as rotas ser\u00e3o \"desempacotadas\". Entretanto n\u00e3o impede que as novas rotas sejam armazenadas em uma vari\u00e1vel.*\n\n\u00c9 poss\u00edvel tamb\u00e9m utilizar aninhamentos do ```route_prefix```\n```python\n# Importa\u00e7\u00f5es...\n\n*prefix('sistema', \n    *prefix('cliente',\n        ...\n    )\n)\n```\nCom isso \u00e9 poss\u00edvel agrupar diversos contextos com um mesmo pr\u00e9fixo sem a necessidade de definir por extenso um a um.\n\n## Dicas de Uso\n1. Utilizar um arquivo de rotas para cada parte da aplica\u00e7\u00e3o. Exemplo:\n```python\n# ./clientes/routes.py\nfrom tinyrouter import Route\nfrom .views\n\nroutes = [\n    *route_prefix('/cliente',\n        Route('cliente.index', '/', views.index),\n        Route('cliente.show', '/<int:id>', views.show),\n        Route('cliente.create', '/create', views.create, ['GET', 'POST'])\n    )\n]\n```\n```python\n# ./app.py\nfrom flask import Flask\nfrom tinyrouter import Router\nfrom clientes.routes import routes as rotas_clientes\n\napp = Flask(__name__)\nrouter = Router(app)\nrouter.register(rotas_clientes)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tcantalice/tinyrouter", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tinyrouter", "package_url": "https://pypi.org/project/tinyrouter/", "platform": "", "project_url": "https://pypi.org/project/tinyrouter/", "project_urls": {"Homepage": "https://github.com/tcantalice/tinyrouter"}, "release_url": "https://pypi.org/project/tinyrouter/0.2.1/", "requires_dist": ["flask"], "requires_python": "", "summary": "", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tiny Router</h1>\n<p>Tiny Router \u00e9 um roteador de caminhos para aplica\u00e7\u00f5es <a href=\"https://github.com/pallets/flask\" rel=\"nofollow\">Flask</a>. A biblioteca centraliza a defini\u00e7\u00e3o e gerenciamento das rotas utilizadas na aplica\u00e7\u00e3o, criar, editar, remover ou trocar controladores facilmente evitando conflitos.</p>\n<ul>\n<li><a href=\"#criando-rotas\" rel=\"nofollow\">Criando rotas</a></li>\n<li><a href=\"#registrando-rotas\" rel=\"nofollow\">Registrando rotas</a></li>\n<li><a href=\"#fun%C3%A7%C3%B5es-helper\" rel=\"nofollow\">Fun\u00e7\u00f5es Helper</a>\n<ul>\n<li><a href=\"#m%C3%A9todos-http\" rel=\"nofollow\">M\u00e9todos HTTP</a></li>\n<li><a href=\"#pr%C3%A9fixos\" rel=\"nofollow\">Pr\u00e9fixos</a></li>\n</ul>\n</li>\n<li><a href=\"#dicas-de-uso\" rel=\"nofollow\">Dicas de uso</a></li>\n</ul>\n<h2>Criando rotas</h2>\n<p>Uma rota \u00e9 representada pela classe <code>Route</code>. Ela possui os seguinte atributos:</p>\n<ul>\n<li><strong>endpoint</strong> - Nome utilizado para identificar a rota. Em caso de endpoints com m\u00faltiplos termos, recomendado separ\u00e1-los por ponto ou sublinhado.</li>\n<li><strong>rule</strong> - Caminho para um recurso espec\u00edfico</li>\n<li><strong>view</strong> - Fun\u00e7\u00e3o ou classe que ir\u00e1 manipular a requisi\u00e7\u00e3o</li>\n<li><strong>methods</strong> - M\u00e9todos HTTP para chamada da rota (Default: <code>{'GET'}</code>)</li>\n<li><strong>parameters</strong> - Par\u00e2metros que podem ser passados na url.</li>\n</ul>\n<p>Ao criar uma rota apenas s\u00e3o obrigat\u00f3rios <code>endpoint</code>, <code>rule</code> e <code>view</code>.</p>\n<p>Exemplo de uma rota simples:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tinyrouter</span> <span class=\"kn\">import</span> <span class=\"n\">Route</span>\n<span class=\"kn\">from</span> <span class=\"nn\">views</span> <span class=\"kn\">import</span> <span class=\"n\">user_index</span>\n\n<span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'user.index'</span><span class=\"p\">,</span> <span class=\"s1\">'/user'</span><span class=\"p\">,</span> <span class=\"n\">user_index</span><span class=\"p\">)</span>\n</pre>\n<p>Por padr\u00e3o, as rotas s\u00e3o definidas para aceitas apenas o m\u00e9todo <code>GET</code>. Entretanto outros m\u00e9todos podem ser definidos, ou at\u00e9 mais de um.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tinyrouter</span> <span class=\"kn\">import</span> <span class=\"n\">Route</span>\n<span class=\"kn\">from</span> <span class=\"nn\">views</span> <span class=\"kn\">import</span> <span class=\"n\">user_index</span>\n\n<span class=\"c1\"># Defini\u00e7\u00e3o dos m\u00e9todos</span>\n<span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">]</span>\n\n<span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'user.index'</span><span class=\"p\">,</span> <span class=\"s1\">'/user'</span><span class=\"p\">,</span> <span class=\"n\">user_index</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"p\">)</span>\n</pre>\n<h2>Registrando as rotas</h2>\n<p>Primeiro cria-se uma inst\u00e2ncia do roteador</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tinyrouter</span> <span class=\"kn\">import</span> <span class=\"n\">Router</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">router</span> <span class=\"o\">=</span> <span class=\"n\">Router</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>E invoca o m\u00e9todo <code>register</code> passando a lista de rotas que deseja registrar na aplica\u00e7\u00e3o</p>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">Importa\u00e7\u00e3oes anteriores</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_app.routes</span> <span class=\"kn\">import</span> <span class=\"n\">routes</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\"> Inst\u00e2ncia da aplica\u00e7\u00e3o e do roteador</span>\n<span class=\"sd\">'''</span>\n<span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">routes</span><span class=\"p\">)</span>\n</pre>\n<p>Pronto! As rotas agora est\u00e3o registradas na aplica\u00e7\u00e3o.</p>\n<p>\u00c9 poss\u00edvel registrar v\u00e1rios grupos de rotas.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">webapp.routes</span> <span class=\"kn\">import</span> <span class=\"n\">routes</span> <span class=\"k\">as</span> <span class=\"n\">web_routes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">api.routes</span> <span class=\"kn\">import</span> <span class=\"n\">routes</span> <span class=\"k\">as</span> <span class=\"n\">api_routes</span>\n\n<span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">web_routes</span><span class=\"p\">)</span>\n<span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">api_routes</span><span class=\"p\">)</span>\n</pre>\n<p>Ou ainda...</p>\n<pre><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">web_routes</span><span class=\"p\">,</span> <span class=\"n\">api_routes</span><span class=\"p\">)</span>\n</pre>\n<h2>Fun\u00e7\u00f5es Helper</h2>\n<h3><strong>M\u00e9todos HTTP</strong></h3>\n<p>Criar uma rota que aceite apenas uma m\u00e9todo HTTP utilizando Route fica da seguinte forma:</p>\n<pre><span class=\"c1\"># Importa\u00e7\u00e3o da view...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tinyrouter</span> <span class=\"kn\">import</span> <span class=\"n\">Route</span>\n\n\n<span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'cliente.create'</span><span class=\"p\">,</span> <span class=\"s1\">'/cliente'</span><span class=\"p\">,</span> <span class=\"n\">cliente_create</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n</pre>\n<p>Entretanto esse processo pode ser encurtado com os helpers de m\u00e9todos.\nUtilizando os helpers, o exemplo acima ficaria assim:</p>\n<pre><span class=\"c1\"># Importa\u00e7\u00e3o da view...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tinyrouter.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">route_post</span> <span class=\"k\">as</span> <span class=\"n\">post</span>\n\n<span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'cliente.create'</span><span class=\"p\">,</span> <span class=\"s1\">'/cliente'</span><span class=\"p\">,</span> <span class=\"n\">cliente_create</span><span class=\"p\">)</span>\n</pre>\n<p>O resultado ser\u00e1 exatamente o mesmo. Os m\u00e9todos suportados s\u00e3o:</p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>PUT</li>\n<li>DELETE</li>\n</ul>\n<h3><strong>Pr\u00e9fixos</strong></h3>\n<p>Agrupar rotas de acordo com o recurso ou contexto utilizando o Route pode ser um pouco verboso, como por exemplo, rotas associadas ao recurso Cliente.</p>\n<p><strong>[GET] - /cliente/</strong> (Lista todos os Clientes)<br>\n<strong>[POST] - /cliente/</strong> (Cria um novo registro de Cliente)<br>\n<strong>[GET] - /cliente/{id}</strong> (Recupera um registro espec\u00edfico de Cliente)<br>\n<strong>[PUT] - /cliente/{id}</strong> (Atualiza um registro espec\u00edfico de Cliente)<br>\n<strong>[DELETE] - /cliente/{id}</strong> (Deleta um registro espec\u00edfico de Cliente )</p>\n<p>\u00c9 poss\u00edvel notar que para cada um dos endpoints foi necess\u00e1rio p\u00f4r o nome do recurso (Cliente) como pr\u00e9fixo. Utilizando o helper de pr\u00e9fixo esse trabalho n\u00e3o ser\u00e1 mais necess\u00e1rio. A fun\u00e7\u00e3o recebe o pr\u00e9fixo a ser adicionado e as rotas que receber\u00e3o o mesmo. Exemplo:</p>\n<pre><span class=\"c1\"># Importa\u00e7\u00e3o das views</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tinyrouter.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">route_prefix</span> <span class=\"k\">as</span> <span class=\"n\">prefix</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tinyrouter.helpers</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">route_get</span> <span class=\"k\">as</span> <span class=\"n\">get</span><span class=\"p\">,</span>\\\n                                <span class=\"n\">route_post</span> <span class=\"k\">as</span> <span class=\"n\">post</span><span class=\"p\">,</span>\\\n                                <span class=\"n\">route_put</span> <span class=\"k\">as</span> <span class=\"n\">put</span><span class=\"p\">,</span>\\\n                                <span class=\"n\">route_delete</span> <span class=\"k\">as</span> <span class=\"n\">delete</span><span class=\"p\">)</span>\n\n<span class=\"o\">*</span><span class=\"n\">prefix</span><span class=\"p\">(</span><span class=\"s1\">'cliente'</span><span class=\"p\">,</span> \n        <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'cliente.all'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">cliente_all</span><span class=\"p\">),</span>\n        <span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'cliente.create'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">cliente_create</span><span class=\"p\">),</span>\n        <span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'cliente.udpate'</span><span class=\"p\">,</span> <span class=\"s1\">'/&lt;id&gt;'</span><span class=\"p\">,</span> <span class=\"n\">cliente_update</span><span class=\"p\">),</span>\n        <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'cliente.show'</span><span class=\"p\">),</span> <span class=\"s1\">'/&lt;id&gt;'</span><span class=\"p\">,</span> <span class=\"n\">cliente_show</span><span class=\"p\">),</span>\n        <span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'cliente.delete'</span><span class=\"p\">,</span> <span class=\"s1\">'/&lt;id&gt;'</span><span class=\"p\">,</span> <span class=\"n\">cliente_delete</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>NOTA: <em>Ao utilizar o route_prefix \u00e9 necess\u00e1rio p\u00f4r um * na frente da fun\u00e7\u00e3o pois \u00e9 retornado uma cole\u00e7\u00e3o de rotas alteradas, e este artif\u00edcio garante que as rotas ser\u00e3o \"desempacotadas\". Entretanto n\u00e3o impede que as novas rotas sejam armazenadas em uma vari\u00e1vel.</em></p>\n<p>\u00c9 poss\u00edvel tamb\u00e9m utilizar aninhamentos do <code>route_prefix</code></p>\n<pre><span class=\"c1\"># Importa\u00e7\u00f5es...</span>\n\n<span class=\"o\">*</span><span class=\"n\">prefix</span><span class=\"p\">(</span><span class=\"s1\">'sistema'</span><span class=\"p\">,</span> \n    <span class=\"o\">*</span><span class=\"n\">prefix</span><span class=\"p\">(</span><span class=\"s1\">'cliente'</span><span class=\"p\">,</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Com isso \u00e9 poss\u00edvel agrupar diversos contextos com um mesmo pr\u00e9fixo sem a necessidade de definir por extenso um a um.</p>\n<h2>Dicas de Uso</h2>\n<ol>\n<li>Utilizar um arquivo de rotas para cada parte da aplica\u00e7\u00e3o. Exemplo:</li>\n</ol>\n<pre><span class=\"c1\"># ./clientes/routes.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tinyrouter</span> <span class=\"kn\">import</span> <span class=\"n\">Route</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.views</span>\n\n<span class=\"n\">routes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">*</span><span class=\"n\">route_prefix</span><span class=\"p\">(</span><span class=\"s1\">'/cliente'</span><span class=\"p\">,</span>\n        <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'cliente.index'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">),</span>\n        <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'cliente.show'</span><span class=\"p\">,</span> <span class=\"s1\">'/&lt;int:id&gt;'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">),</span>\n        <span class=\"n\">Route</span><span class=\"p\">(</span><span class=\"s1\">'cliente.create'</span><span class=\"p\">,</span> <span class=\"s1\">'/create'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</pre>\n<pre><span class=\"c1\"># ./app.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tinyrouter</span> <span class=\"kn\">import</span> <span class=\"n\">Router</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clientes.routes</span> <span class=\"kn\">import</span> <span class=\"n\">routes</span> <span class=\"k\">as</span> <span class=\"n\">rotas_clientes</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">router</span> <span class=\"o\">=</span> <span class=\"n\">Router</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n<span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">rotas_clientes</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6850224, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "d08392913f525eabd8676241290f6c78", "sha256": "532478c052c6c31f5aca17eaa907981973f560ff363531baa359040f68b74df7"}, "downloads": -1, "filename": "tinyrouter-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d08392913f525eabd8676241290f6c78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6306, "upload_time": "2020-02-11T19:30:25", "upload_time_iso_8601": "2020-02-11T19:30:25.838845Z", "url": "https://files.pythonhosted.org/packages/3c/4d/7028b08f6012f2678fcf44becfadb90502acf7e519d4f35de0c3fa0f7624/tinyrouter-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18fb7a10f6ce65721144abaf42f991e9", "sha256": "a03c13cba4c40aac5a94088391a40627f87cc1a44a75250c93c32fe0fe096ec0"}, "downloads": -1, "filename": "tinyrouter-0.1.4.tar.gz", "has_sig": false, "md5_digest": "18fb7a10f6ce65721144abaf42f991e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5571, "upload_time": "2020-02-11T19:30:27", "upload_time_iso_8601": "2020-02-11T19:30:27.946689Z", "url": "https://files.pythonhosted.org/packages/3e/78/c147d868bbdc8a54bb948caf8382659a818fe882462d5f8eaab456512ade/tinyrouter-0.1.4.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "04a94f4be0c340559e188466fac47d91", "sha256": "6774692d367ba82009522957ac4ba62f2f8a2e0649525190eb1a21c3dc72383c"}, "downloads": -1, "filename": "tinyrouter-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "04a94f4be0c340559e188466fac47d91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6210, "upload_time": "2020-02-16T14:59:53", "upload_time_iso_8601": "2020-02-16T14:59:53.520180Z", "url": "https://files.pythonhosted.org/packages/60/f8/c07573e035b9362fa8f5028b0f48d93168ac1b561a8bfdf46e8d9f8bdd21/tinyrouter-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f901c7571988feb5105e41f2ceaf4068", "sha256": "4be33b258c820c9b2755c6eeb0509cf2a262b6c80ada3e5562b76f55c6de7388"}, "downloads": -1, "filename": "tinyrouter-0.2.tar.gz", "has_sig": false, "md5_digest": "f901c7571988feb5105e41f2ceaf4068", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5185, "upload_time": "2020-02-16T14:59:55", "upload_time_iso_8601": "2020-02-16T14:59:55.734191Z", "url": "https://files.pythonhosted.org/packages/62/fc/1b17afa8fce63c9e9ade178a6cceedbb360bf45b3176013391ada9fa864f/tinyrouter-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f8abfa37412fc9f2f8519f60da365039", "sha256": "f63e56571709c55e4e3ff12a9c2a0617b6d6f274fef984678b26e45ea0ee2b84"}, "downloads": -1, "filename": "tinyrouter-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f8abfa37412fc9f2f8519f60da365039", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6235, "upload_time": "2020-03-20T14:57:22", "upload_time_iso_8601": "2020-03-20T14:57:22.523184Z", "url": "https://files.pythonhosted.org/packages/b0/21/6c72f86cf15f41b543b3d62a6e15869bb90111aebd90b9b0df5833f2b058/tinyrouter-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d8b2b521d9e2d246353161b554d09cc", "sha256": "5b4ea82a9d2f1a48e45a079e1b1adf242f0ef475e894b6b18afcf76051ae5961"}, "downloads": -1, "filename": "tinyrouter-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5d8b2b521d9e2d246353161b554d09cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5195, "upload_time": "2020-03-20T14:57:26", "upload_time_iso_8601": "2020-03-20T14:57:26.062783Z", "url": "https://files.pythonhosted.org/packages/a4/82/f8029b6d9d95e576045829275364d58276333adfc46aebbf4f4fb3e5c0be/tinyrouter-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f8abfa37412fc9f2f8519f60da365039", "sha256": "f63e56571709c55e4e3ff12a9c2a0617b6d6f274fef984678b26e45ea0ee2b84"}, "downloads": -1, "filename": "tinyrouter-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f8abfa37412fc9f2f8519f60da365039", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6235, "upload_time": "2020-03-20T14:57:22", "upload_time_iso_8601": "2020-03-20T14:57:22.523184Z", "url": "https://files.pythonhosted.org/packages/b0/21/6c72f86cf15f41b543b3d62a6e15869bb90111aebd90b9b0df5833f2b058/tinyrouter-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d8b2b521d9e2d246353161b554d09cc", "sha256": "5b4ea82a9d2f1a48e45a079e1b1adf242f0ef475e894b6b18afcf76051ae5961"}, "downloads": -1, "filename": "tinyrouter-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5d8b2b521d9e2d246353161b554d09cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5195, "upload_time": "2020-03-20T14:57:26", "upload_time_iso_8601": "2020-03-20T14:57:26.062783Z", "url": "https://files.pythonhosted.org/packages/a4/82/f8029b6d9d95e576045829275364d58276333adfc46aebbf4f4fb3e5c0be/tinyrouter-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:56 2020"}