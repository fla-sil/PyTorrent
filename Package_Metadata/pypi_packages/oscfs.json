{"info": {"author": "Matthias Gerstner", "author_email": "matthias.gerstner@suse.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Programming Language :: Python :: 2.7", "Topic :: System :: Filesystems"], "description": "OSC File System\n===============\n\nIntroduction\n------------\n\n*oscfs* is a FUSE based user space file system that allows to access\nopen build service (OBS) instances. It is based on the *osc* (openSUSE\nCommander) python package for interfacing with OBS. At the moment it\nprovides read-only access for inspecting packages and their metadata.\n\nDependencies\n============\n\n*oscfs* itself is implemented in python and uses the *fusepy* module to\nimplement the file system portion. There is another python fuse package\ncalled *python-fuse* which **is not compatible** with *oscfs*.\n\nFor accessing OBS instances the python *osc* module is required.\n\nCurrently *oscfs* only works with python2, because the *osc* module is\nnot available for python3 at the moment.\n\nFeatures\n--------\n\n-  Representation of all OBS projects and packages in a hierarchical\n   file system.\n-  Access to individual package files including old revisions.\n-  Access to project and package metadata via pseudo files.\n-  Access to package buildlogs and artifacts.\n-  Configurable runtime caching of cached data.\n\nUsage\n-----\n\n*oscfs* ships one main script called ``oscfs``. It supports a couple of\ncommand line parameters to influence its behaviour. It should only be\ncalled by a regular user and never by the ``root`` user.\n\nFor mounting the file system simply provide the *mountpoint* argument to\nthe ``oscfs`` main script. By default the openSUSE build service is\naccessed. For authentication at the OBS instance, the configuration file\nin the home directory in ``~/.oscrc`` needs to be setup. This file is\npart of the *osc* python module for which you can find more\ndocumentation in the `openSUSE\nwiki <https://en.opensuse.org/openSUSE:OSC>`__.\n\nTo specify a different OBS instance, provide the URL via the\n``--apiurl`` parameter. For example to mount the SUSE internal build\nservice (IBS) under the home directory in a directory ``ibs`` use the\nfollowing command line:\n\n.. code:: sh\n\n   $ oscfs --apiurl https://api.suse.de ~/ibs\n\nBy default ``oscfs`` detaches and runs in the background. For testing\npurposes it can be run in the foreground by passing the ``-f``\nparameter.\n\nCertain special OBS projects are excluded by default like the users\u2019\n*home:* projects, maintenance incident projects or PTF (Program\nTemporary Fix) projects. This is the case, because a lot of these\nprojects can exist in an OBS which would clutter the file system\ncontents.\n\nIf you want to include these types of projects you can pass the\naccording command line parameter like ``--homes``, ``--maintenance`` or\n``--ptf``. Your own home projects will always be included in the file\nsystem independently of the ``--homes`` switch.\n\nContent that has been fetched from the OBS instance will be cached\nlocally for a certain time to improve response times. The time before\ncontent will be refreshed can be tuned via the ``--cache-time``\nparameter.\n\nFile System Structure\n---------------------\n\nOn the first level of the file system, a directory for each OBS project\nis found. When working against the openSUSE OBS you can find the\n``openSUSE:Factory`` directory, for example. On the second level the\npackages within a project are found. Within ``openSUSE:Factory`` all\npackages that make up the openSUSE Tumbleweed rolling release codebase\nare found. For example you can find the package bash within\n``openSUSE:Factory/bash``.\n\nWithin each package directory you can find a list of flat files that\nmake up the package\u2019s data like RPM spec file, patches, source tarballs\nand so on. You can read the file contents like every other file with\nyour editor or tools like ``cat`` and ``less``. There are no regular\nsubdirectories found in a package.\n\nEach project and package directory contains a hidden ``.oscfs``\ndirectory which contains metadata and pseudo files provided by\n``oscfs``. These files are not actually existing in OBS.\n\nThe following is a list of pseudo files provided in each project\u2019s\n``.oscfs`` directory:\n\n-  ``bugowners``: contains a list of the usernames of the bugowners of\n   the project, one per line. If the name starts with an \u2018@\u2019 then the\n   name refers to a group of users.\n-  ``maintainers``: just like ``bugowners`` but contains a list of the\n   project\u2019s maintainers.\n-  ``debuginfo``: returns a boolean \u201c0\u201d or \u201c1\u201d, indicating whether\n   debuginfo generation is enabled.\n-  ``locked``: returns a boolean \u201c0\u201d or \u201c1\u201d, indicating whether the\n   project is in the locked state.\n-  ``meta``: returns the complete XML metadata for the project as\n   provided by the OBS instance.\n-  ``refresh``: this is a control file. When you write the value of \u201c1\u201d\n   into the file then the cache for the project will be flushed. This\n   can be used to force regeneration of cached content.\n-  ``repositories``: this file returns a list of all the repositories\n   defined for the project. Each new repository starts with a line\n   ``# <name>``. Following are a number of lines providing additional\n   information about the repository like ``archs: <...>``, defining the\n   architectures used in the repository.\n\nThe following is a list of pseudo files provided in each package\u2019s\n``.oscfs`` directory:\n\n-  ``bugowners``: the same as for projects above.\n-  ``maintainers``: the same as for projects above.\n-  ``description``: contains the human readable description of the\n   package.\n-  ``log``: contains the changelog of the package.\n-  ``meta``: returns the complete XML metadata for the package as\n   provided by the OBS instance.\n-  ``num_revisions``: returns an integer denoting the number of commit\n   revisions that are available for the package.\n-  ``commits``: a directory that contains one file for each commit\n   available for the package. Each file is named after the commit\n   revision number. Each file returns a description of the commit user,\n   date and description.\n-  ``requests``: a directory that contains one file for each OBS request\n   that exists for the package. Each file is named in the format\n   ``<num>:<state>``, where ``<num>`` is the submit request ID and\n   ``<state>`` is the current state of the request. Upon reading each\n   file returns the description and history of the submit request it\n   represents.\n-  ``revisions``: a directory that contains a subdirectory for each\n   commit available for the package. Each directory is named after the\n   commit revision number. Each directory contains the state of the\n   package\u2019s files as of that revision.\n-  ``buildresults``: A file that contains the current package build\n   results for each repository/architecture combination.\n-  ``buildlogs``: a directory below which a hierarchy of\n   repository/architecture files can be found. The architecture files\n   are regular files that return the build log of the package for the\n   repository/architecture combination it represents.\n-  ``binaries``: a directory below which a hierarchy of\n   repository/architecture directories can be found. Within the\n   architecture directory the binary artifacts can be found that have\n   been produced in the package for the repository/architecture\n   combination it represents.\n-  ``incident``: a symlink only present in package updates that\n   originate from a maintenance incident. In this case this symlink\n   points to the maintenance project where the package was built. For\n   this to work the file system needs to be mounted with the\n   ``--maintenance`` parameter.\n\nUsage Hints\n-----------\n\nHow the Runtime Caching Works\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEach operation performed on the file system in some way needs to talk to\nthe remote OBS instance. This is a slow process and needs to be\nminimized. The ``oscfs`` performs lazy evaluation of directory contents.\nThis means that only when you access a certain path for the first time\nwill the actual contents be determined by communicating with the OBS\ninstance. This will take a noticeable amount of time. The second time\nyou will access the same path a locally cached version of the file or\ndirectory will be served. This will take considerably less time.\n\nCaching also means that the state of files shown in the file system may\nnot correspond to the state on the remote server any more. Therefore\n``oscfs`` refetches the contents of files and directories after the\ncache has reached a certain age as is determined by the ``--cache-time``\nparameter. This only happens when a cached path is accessed after the\nconfigured cache time has passed since the last retrieval of data from\nthe remote server. You can also explicitly invalidate the caching for a\ncomplete package by writing to the ``refresh`` control file documented\nabove.\n\nWhen ``oscfs`` is restarted then any previously cached contents are\nlost. This means that the cache is not written to the local disk in any\nform. Fetching a lot amount of data from the remote server should be\navoided (e.g.\u00a0don\u2019t call ``find`` for the complete file system). This\nwould be a kind of denial of service attack on the remote server.\n\nSorting of Directory Contents\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nListing directories with ``ls`` can feel a bit on the slow side, even if\ndata is cached by ``oscfs``. This results from ``ls`` sorting the\ndirectory contents by name. Since e.g.\u00a0\\ ``openSUSE:Factory`` contains\nmore than 10.000 entries this can take about a second to complete. When\nlisting without sorting i.e.\u00a0by running ``ls -f`` then the time required\nis considerably lower. Similar considerations need to be made when\naccessing the file system by other means like from programming languages\nthat could sort directory contents by default.\n\nMetadata of Pseudo Files\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe pseudo files contained in the ``.oscfs`` directory of a package\nstart out with a size of zero bytes, although they may actually contain\ndata. The reason for this is that for determining the size of the\ncontent, the content would need to be accessed right away. This would\nslow down e.g.\u00a0recursive searching for file names considerably.\nTherefore some metadata like the size of pseudo files is only calculated\nafter it is accessed the first time. Since some of the pseudo files may\nreturn dynamic data the displayed file size is also subject to change at\nany time i.e.\u00a0it only reflects a snapshot of the data as it was last\nseen by ``oscfs``.\n\nUsage Examples\n--------------\n\nFinding Packages\n~~~~~~~~~~~~~~~~\n\nYou can find packages by using tools like ``find`` or shell wildcards\nexpansion. To find all fuse related packages you do this for example:\n\n.. code:: sh\n\n   $ cd openSUSE:Factory\n   $ ls -d *fuse*\n   enblend-enfuse  fuse  fuse-exfat  fuseiso  fusepod  fusesmb  ifuse  ldapfuse  libconfuse0  python-defusedxml  python-fuse  python-fusepy  unionfs-fuse\n\nMatching Lines from RPM Specs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can query for packages containing certain RPM spec statements. For\nexample to find packages that require some perl package by using grep\nlike this:\n\n.. code:: sh\n\n   $ cd openSUSE:Factory\n   $ grep -H \"^Requires:.*perl\" */*.spec\n\nNote that this is going to take a long time, because each package needs\nto be queried on OBS.\n\nComparing Two Package Revisions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can check two package revisions for differences by taking this\napproach:\n\n.. code:: sh\n\n   $ cd openSUSE:Factory/bash/.oscfs/revisions\n   $ diff -r 1 2\n   <diff output...>", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mgerstner/oscfs", "keywords": "fuse obs osc openSUSE", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "oscfs", "package_url": "https://pypi.org/project/oscfs/", "platform": "", "project_url": "https://pypi.org/project/oscfs/", "project_urls": {"Homepage": "https://github.com/mgerstner/oscfs"}, "release_url": "https://pypi.org/project/oscfs/0.7.1/", "requires_dist": null, "requires_python": "", "summary": "A FUSE based file system to access Open Build Service (OBS) instances", "version": "0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"osc-file-system\">\n<h2>OSC File System</h2>\n<h2 id=\"introduction\"><span class=\"section-subtitle\">Introduction</span></h2>\n<p><em>oscfs</em> is a FUSE based user space file system that allows to access\nopen build service (OBS) instances. It is based on the <em>osc</em> (openSUSE\nCommander) python package for interfacing with OBS. At the moment it\nprovides read-only access for inspecting packages and their metadata.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p><em>oscfs</em> itself is implemented in python and uses the <em>fusepy</em> module to\nimplement the file system portion. There is another python fuse package\ncalled <em>python-fuse</em> which <strong>is not compatible</strong> with <em>oscfs</em>.</p>\n<p>For accessing OBS instances the python <em>osc</em> module is required.</p>\n<p>Currently <em>oscfs</em> only works with python2, because the <em>osc</em> module is\nnot available for python3 at the moment.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Representation of all OBS projects and packages in a hierarchical\nfile system.</li>\n<li>Access to individual package files including old revisions.</li>\n<li>Access to project and package metadata via pseudo files.</li>\n<li>Access to package buildlogs and artifacts.</li>\n<li>Configurable runtime caching of cached data.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p><em>oscfs</em> ships one main script called <tt>oscfs</tt>. It supports a couple of\ncommand line parameters to influence its behaviour. It should only be\ncalled by a regular user and never by the <tt>root</tt> user.</p>\n<p>For mounting the file system simply provide the <em>mountpoint</em> argument to\nthe <tt>oscfs</tt> main script. By default the openSUSE build service is\naccessed. For authentication at the OBS instance, the configuration file\nin the home directory in <tt><span class=\"pre\">~/.oscrc</span></tt> needs to be setup. This file is\npart of the <em>osc</em> python module for which you can find more\ndocumentation in the <a href=\"https://en.opensuse.org/openSUSE:OSC\" rel=\"nofollow\">openSUSE\nwiki</a>.</p>\n<p>To specify a different OBS instance, provide the URL via the\n<tt><span class=\"pre\">--apiurl</span></tt> parameter. For example to mount the SUSE internal build\nservice (IBS) under the home directory in a directory <tt>ibs</tt> use the\nfollowing command line:</p>\n<pre>$ oscfs --apiurl https://api.suse.de ~/ibs\n</pre>\n<p>By default <tt>oscfs</tt> detaches and runs in the background. For testing\npurposes it can be run in the foreground by passing the <tt><span class=\"pre\">-f</span></tt>\nparameter.</p>\n<p>Certain special OBS projects are excluded by default like the users\u2019\n<em>home:</em> projects, maintenance incident projects or PTF (Program\nTemporary Fix) projects. This is the case, because a lot of these\nprojects can exist in an OBS which would clutter the file system\ncontents.</p>\n<p>If you want to include these types of projects you can pass the\naccording command line parameter like <tt><span class=\"pre\">--homes</span></tt>, <tt><span class=\"pre\">--maintenance</span></tt> or\n<tt><span class=\"pre\">--ptf</span></tt>. Your own home projects will always be included in the file\nsystem independently of the <tt><span class=\"pre\">--homes</span></tt> switch.</p>\n<p>Content that has been fetched from the OBS instance will be cached\nlocally for a certain time to improve response times. The time before\ncontent will be refreshed can be tuned via the <tt><span class=\"pre\">--cache-time</span></tt>\nparameter.</p>\n</div>\n<div id=\"file-system-structure\">\n<h3>File System Structure</h3>\n<p>On the first level of the file system, a directory for each OBS project\nis found. When working against the openSUSE OBS you can find the\n<tt>openSUSE:Factory</tt> directory, for example. On the second level the\npackages within a project are found. Within <tt>openSUSE:Factory</tt> all\npackages that make up the openSUSE Tumbleweed rolling release codebase\nare found. For example you can find the package bash within\n<tt>openSUSE:Factory/bash</tt>.</p>\n<p>Within each package directory you can find a list of flat files that\nmake up the package\u2019s data like RPM spec file, patches, source tarballs\nand so on. You can read the file contents like every other file with\nyour editor or tools like <tt>cat</tt> and <tt>less</tt>. There are no regular\nsubdirectories found in a package.</p>\n<p>Each project and package directory contains a hidden <tt>.oscfs</tt>\ndirectory which contains metadata and pseudo files provided by\n<tt>oscfs</tt>. These files are not actually existing in OBS.</p>\n<p>The following is a list of pseudo files provided in each project\u2019s\n<tt>.oscfs</tt> directory:</p>\n<ul>\n<li><tt>bugowners</tt>: contains a list of the usernames of the bugowners of\nthe project, one per line. If the name starts with an \u2018@\u2019 then the\nname refers to a group of users.</li>\n<li><tt>maintainers</tt>: just like <tt>bugowners</tt> but contains a list of the\nproject\u2019s maintainers.</li>\n<li><tt>debuginfo</tt>: returns a boolean \u201c0\u201d or \u201c1\u201d, indicating whether\ndebuginfo generation is enabled.</li>\n<li><tt>locked</tt>: returns a boolean \u201c0\u201d or \u201c1\u201d, indicating whether the\nproject is in the locked state.</li>\n<li><tt>meta</tt>: returns the complete XML metadata for the project as\nprovided by the OBS instance.</li>\n<li><tt>refresh</tt>: this is a control file. When you write the value of \u201c1\u201d\ninto the file then the cache for the project will be flushed. This\ncan be used to force regeneration of cached content.</li>\n<li><tt>repositories</tt>: this file returns a list of all the repositories\ndefined for the project. Each new repository starts with a line\n<tt># &lt;name&gt;</tt>. Following are a number of lines providing additional\ninformation about the repository like <tt>archs: <span class=\"pre\">&lt;...&gt;</span></tt>, defining the\narchitectures used in the repository.</li>\n</ul>\n<p>The following is a list of pseudo files provided in each package\u2019s\n<tt>.oscfs</tt> directory:</p>\n<ul>\n<li><tt>bugowners</tt>: the same as for projects above.</li>\n<li><tt>maintainers</tt>: the same as for projects above.</li>\n<li><tt>description</tt>: contains the human readable description of the\npackage.</li>\n<li><tt>log</tt>: contains the changelog of the package.</li>\n<li><tt>meta</tt>: returns the complete XML metadata for the package as\nprovided by the OBS instance.</li>\n<li><tt>num_revisions</tt>: returns an integer denoting the number of commit\nrevisions that are available for the package.</li>\n<li><tt>commits</tt>: a directory that contains one file for each commit\navailable for the package. Each file is named after the commit\nrevision number. Each file returns a description of the commit user,\ndate and description.</li>\n<li><tt>requests</tt>: a directory that contains one file for each OBS request\nthat exists for the package. Each file is named in the format\n<tt><span class=\"pre\">&lt;num&gt;:&lt;state&gt;</span></tt>, where <tt>&lt;num&gt;</tt> is the submit request ID and\n<tt>&lt;state&gt;</tt> is the current state of the request. Upon reading each\nfile returns the description and history of the submit request it\nrepresents.</li>\n<li><tt>revisions</tt>: a directory that contains a subdirectory for each\ncommit available for the package. Each directory is named after the\ncommit revision number. Each directory contains the state of the\npackage\u2019s files as of that revision.</li>\n<li><tt>buildresults</tt>: A file that contains the current package build\nresults for each repository/architecture combination.</li>\n<li><tt>buildlogs</tt>: a directory below which a hierarchy of\nrepository/architecture files can be found. The architecture files\nare regular files that return the build log of the package for the\nrepository/architecture combination it represents.</li>\n<li><tt>binaries</tt>: a directory below which a hierarchy of\nrepository/architecture directories can be found. Within the\narchitecture directory the binary artifacts can be found that have\nbeen produced in the package for the repository/architecture\ncombination it represents.</li>\n<li><tt>incident</tt>: a symlink only present in package updates that\noriginate from a maintenance incident. In this case this symlink\npoints to the maintenance project where the package was built. For\nthis to work the file system needs to be mounted with the\n<tt><span class=\"pre\">--maintenance</span></tt> parameter.</li>\n</ul>\n</div>\n<div id=\"usage-hints\">\n<h3>Usage Hints</h3>\n<div id=\"how-the-runtime-caching-works\">\n<h4>How the Runtime Caching Works</h4>\n<p>Each operation performed on the file system in some way needs to talk to\nthe remote OBS instance. This is a slow process and needs to be\nminimized. The <tt>oscfs</tt> performs lazy evaluation of directory contents.\nThis means that only when you access a certain path for the first time\nwill the actual contents be determined by communicating with the OBS\ninstance. This will take a noticeable amount of time. The second time\nyou will access the same path a locally cached version of the file or\ndirectory will be served. This will take considerably less time.</p>\n<p>Caching also means that the state of files shown in the file system may\nnot correspond to the state on the remote server any more. Therefore\n<tt>oscfs</tt> refetches the contents of files and directories after the\ncache has reached a certain age as is determined by the <tt><span class=\"pre\">--cache-time</span></tt>\nparameter. This only happens when a cached path is accessed after the\nconfigured cache time has passed since the last retrieval of data from\nthe remote server. You can also explicitly invalidate the caching for a\ncomplete package by writing to the <tt>refresh</tt> control file documented\nabove.</p>\n<p>When <tt>oscfs</tt> is restarted then any previously cached contents are\nlost. This means that the cache is not written to the local disk in any\nform. Fetching a lot amount of data from the remote server should be\navoided (e.g.\u00a0don\u2019t call <tt>find</tt> for the complete file system). This\nwould be a kind of denial of service attack on the remote server.</p>\n</div>\n<div id=\"sorting-of-directory-contents\">\n<h4>Sorting of Directory Contents</h4>\n<p>Listing directories with <tt>ls</tt> can feel a bit on the slow side, even if\ndata is cached by <tt>oscfs</tt>. This results from <tt>ls</tt> sorting the\ndirectory contents by name. Since e.g.\u00a0<tt>openSUSE:Factory</tt> contains\nmore than 10.000 entries this can take about a second to complete. When\nlisting without sorting i.e.\u00a0by running <tt>ls <span class=\"pre\">-f</span></tt> then the time required\nis considerably lower. Similar considerations need to be made when\naccessing the file system by other means like from programming languages\nthat could sort directory contents by default.</p>\n</div>\n<div id=\"metadata-of-pseudo-files\">\n<h4>Metadata of Pseudo Files</h4>\n<p>The pseudo files contained in the <tt>.oscfs</tt> directory of a package\nstart out with a size of zero bytes, although they may actually contain\ndata. The reason for this is that for determining the size of the\ncontent, the content would need to be accessed right away. This would\nslow down e.g.\u00a0recursive searching for file names considerably.\nTherefore some metadata like the size of pseudo files is only calculated\nafter it is accessed the first time. Since some of the pseudo files may\nreturn dynamic data the displayed file size is also subject to change at\nany time i.e.\u00a0it only reflects a snapshot of the data as it was last\nseen by <tt>oscfs</tt>.</p>\n</div>\n</div>\n<div id=\"usage-examples\">\n<h3>Usage Examples</h3>\n<div id=\"finding-packages\">\n<h4>Finding Packages</h4>\n<p>You can find packages by using tools like <tt>find</tt> or shell wildcards\nexpansion. To find all fuse related packages you do this for example:</p>\n<pre>$ <span class=\"nb\">cd</span> openSUSE:Factory\n$ ls -d *fuse*\nenblend-enfuse  fuse  fuse-exfat  fuseiso  fusepod  fusesmb  ifuse  ldapfuse  libconfuse0  python-defusedxml  python-fuse  python-fusepy  unionfs-fuse\n</pre>\n</div>\n<div id=\"matching-lines-from-rpm-specs\">\n<h4>Matching Lines from RPM Specs</h4>\n<p>You can query for packages containing certain RPM spec statements. For\nexample to find packages that require some perl package by using grep\nlike this:</p>\n<pre>$ <span class=\"nb\">cd</span> openSUSE:Factory\n$ grep -H <span class=\"s2\">\"^Requires:.*perl\"</span> */*.spec\n</pre>\n<p>Note that this is going to take a long time, because each package needs\nto be queried on OBS.</p>\n</div>\n<div id=\"comparing-two-package-revisions\">\n<h4>Comparing Two Package Revisions</h4>\n<p>You can check two package revisions for differences by taking this\napproach:</p>\n<pre>$ <span class=\"nb\">cd</span> openSUSE:Factory/bash/.oscfs/revisions\n$ diff -r <span class=\"m\">1</span> <span class=\"m\">2</span>\n&lt;diff output...&gt;\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6675167, "releases": {"0.6.0": [{"comment_text": "", "digests": {"md5": "202c92b289faa8a49833f909c9c570c3", "sha256": "0d1cb75b021a5722464dc4aac1e39fa2ffeee2c95b892f69bdbf1c4ee08b2d11"}, "downloads": -1, "filename": "oscfs-0.6.0-py2-none-any.whl", "has_sig": false, "md5_digest": "202c92b289faa8a49833f909c9c570c3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 32149, "upload_time": "2018-07-12T09:50:08", "upload_time_iso_8601": "2018-07-12T09:50:08.216089Z", "url": "https://files.pythonhosted.org/packages/bc/bd/86917603b04311a800888d548934872a86c1df0e4839e061945c85ef0042/oscfs-0.6.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e08d9c2528db7d0298ac58bc735339a5", "sha256": "3c4fe513f3a4d14887e71f2a11c8d6b77d96059a4b245c97e607f3bbbc02a4a3"}, "downloads": -1, "filename": "oscfs-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e08d9c2528db7d0298ac58bc735339a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38201, "upload_time": "2018-07-12T09:50:09", "upload_time_iso_8601": "2018-07-12T09:50:09.760663Z", "url": "https://files.pythonhosted.org/packages/65/6f/9c49337630c2ce1fb870f1192d7c2e36e4fd1492eca8aea0226827194845/oscfs-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "b7fbb4b8a057514198879f664bb172cd", "sha256": "fb317516f9f96a67185292bf4bdb6f0f2596af886425ea08706a882db521b775"}, "downloads": -1, "filename": "oscfs-0.6.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b7fbb4b8a057514198879f664bb172cd", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 23984, "upload_time": "2018-08-09T13:55:22", "upload_time_iso_8601": "2018-08-09T13:55:22.095376Z", "url": "https://files.pythonhosted.org/packages/39/40/a254a453f80d7f6c3aa8639ebbf836e5cf7027ab95dab5ba0c325ccc66b1/oscfs-0.6.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11d25d593cf6e62444d6d0e8984bdeac", "sha256": "23ca18993fa166985fcd99bf832ee4dc71b3a4d23314a74de2c2f3fb7961af5a"}, "downloads": -1, "filename": "oscfs-0.6.1.tar.gz", "has_sig": false, "md5_digest": "11d25d593cf6e62444d6d0e8984bdeac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32008, "upload_time": "2018-08-09T13:55:23", "upload_time_iso_8601": "2018-08-09T13:55:23.829540Z", "url": "https://files.pythonhosted.org/packages/0d/79/470a21cdd779cff94c26ec1beb0e6998a0bb04f1fa8bc62214bf5ca9f1b1/oscfs-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "0c05678392ff4f7c46f0fe01663a9af1", "sha256": "e8c2b9347de6ba07ddf826d460d8e144ca7bcf59a24fa6b21080baa19625f0f8"}, "downloads": -1, "filename": "oscfs-0.7.0-py2-none-any.whl", "has_sig": false, "md5_digest": "0c05678392ff4f7c46f0fe01663a9af1", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 24565, "upload_time": "2019-05-27T11:39:34", "upload_time_iso_8601": "2019-05-27T11:39:34.465483Z", "url": "https://files.pythonhosted.org/packages/7d/a3/74156c6ffee6adf6f173624b6cd622fc1a03154743925a1d1d7cdb2e8f8a/oscfs-0.7.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62e6adf3b14e71775063bba5dc76a167", "sha256": "8aa84d2db792a576a2cc84613d3422b8dc0abda9e50df15f9867f9aae166814d"}, "downloads": -1, "filename": "oscfs-0.7.0.tar.gz", "has_sig": false, "md5_digest": "62e6adf3b14e71775063bba5dc76a167", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32652, "upload_time": "2019-05-27T11:39:36", "upload_time_iso_8601": "2019-05-27T11:39:36.326365Z", "url": "https://files.pythonhosted.org/packages/ea/63/81445768791f8eaa48dbe7f839279a706014de73c3c562e70dbbce1bc61f/oscfs-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "1c581039b78593dd719804d037d08e23", "sha256": "7e831fbb14eee9693ead381c59935f65c54d1792021b1c9d5323c1b838d8fbc6"}, "downloads": -1, "filename": "oscfs-0.7.1.tar.gz", "has_sig": false, "md5_digest": "1c581039b78593dd719804d037d08e23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36699, "upload_time": "2020-02-21T13:05:55", "upload_time_iso_8601": "2020-02-21T13:05:55.327454Z", "url": "https://files.pythonhosted.org/packages/c2/1b/03477e516b4833f03e1a399066a951514d6247c957b60d9e69880d2b4e81/oscfs-0.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c581039b78593dd719804d037d08e23", "sha256": "7e831fbb14eee9693ead381c59935f65c54d1792021b1c9d5323c1b838d8fbc6"}, "downloads": -1, "filename": "oscfs-0.7.1.tar.gz", "has_sig": false, "md5_digest": "1c581039b78593dd719804d037d08e23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36699, "upload_time": "2020-02-21T13:05:55", "upload_time_iso_8601": "2020-02-21T13:05:55.327454Z", "url": "https://files.pythonhosted.org/packages/c2/1b/03477e516b4833f03e1a399066a951514d6247c957b60d9e69880d2b4e81/oscfs-0.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:23 2020"}