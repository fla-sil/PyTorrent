{"info": {"author": "Rafael Gonzalez", "author_email": "astrorafael@yahoo.es", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: No Input/Output (Daemon)", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: SQL", "Topic :: Scientific/Engineering :: Astronomy", "Topic :: Scientific/Engineering :: Atmospheric Science"], "description": "# tessdb-server(overview)\n\nLinux service to collect measurements pubished by TESS Sky Quality Meter via MQTT. TESS stands for [Cristobal Garcia's Telescope Encoder and Sky Sensor](http://www.observatorioremoto.com/TESS.pdf)\n\n**tessdb** is being used as part of the [STARS4ALL Project](http://www.stars4all.eu/).\n\n## Description\n\n**tessdb** is a software package that collects measurements from one or several\nTESS instruments into database (currently a SQLite Database).  \n\nIt is a [Python Twisted Application](https://twistedmatrix.com/trac/)\nthat uses a [custom Twisted library implementing the MQTT protocol](https://github.com/astrorafael/twisted-mqtt)\n\nDesktop applicatons may query the database to generate reports and graphs\nusing the accumulated, historic data. There are some reports scripts already included in the package, specially an IDA-format monthly report script.\n\n**Note**: The Windows version has been dropped, as it was never used.\n\nThese data sources are available:\n\n+ individual samples (real time, configurable, 1 min. aprox between samples).\n\nInstrument should send their readings at twice the time resolution specified in the config file (in seconds).\n\n**Warning**: Time referencie is always UTC, not local time.\n\n# INSTALLATION\n    \n## Requirements\n\nThe following components are needed and should be installed first:\n\n * python 2.7.x (tested on Ubuntu Python 2.7.6) or python 3.6+\n\n**Note:** It is foreseen a Python 3 migration in the future, retaining Python 2.7.x compatibility.\n\n### Installation\n\nInstallation is done from GitHub:\n\n    git clone https://github.com/astrorafael/tessdb.git\n    cd tessdb\n    sudo python setup.py install\n\n**Note:** Installation from PyPi is now obsolete. Do not use the package uploaded in PyPi.\n\n* All executables are copied to `/usr/local/bin`\n* The database is located at `/var/dbase/tess.db` by default\n* The log file is located at `/var/log/tessdb.log`\n* The following required PIP packages will be automatically installed:\n    - twisted,\n    - twisted-mqtt\n    - pyephem\n    \n### Start up and Verification\n\n* Type `sudo tessdb -k` to start the service in foreground with console output.\nVerify that it starts without errors or exceptions. When done, abort it with `^C`\n\nFrom tessdb release 1.2.0, the background execution is handled as a `systemd` service instead of the old system V style init script:\n\n    `sudo systemctl start tessdb`\n\nalthough the old `sudo service tessdb start` command still works.\n* It is strongly recommended to enable the service at boot time by issuing:\n\n`sudo systemctl enable tessdb`\n\n# CONFIGURATION\n\nThere is a small configuration file for this service:\n\n* `/etc/tessdb/config` (Linux)\n\nThis file is self explanatory. \nIn special, the database file name and location is specified in this file.\nSome of the properities marked in this file are marked as *reloadable property*. This means that this value can be changed and the process reloads its new value on the fly.\n\n## Sunrise / Sunset filtering\n\nA configurable window (7 samples by default) is stored in the server for each photometer. \nA filter process analyzes the middle sample in this window, if it finds all saturated values (magnitude=0)\naround this middle sample (past and future), this sample is discarded, otherwise it is elegible to be written to the database.\n\n*Positive*: This filtering does not need to know the position where the photometer is placed.\n*Negative*: There is a time lag (Window size/2) between receiving the sample and storing it.\nFurthermore, if the server crashes or is abruptly stopped, the so-called \"future samples\" are lost.\n\n## Logging\n\nLog file is usually placed under `/var/log/tessdb.log` in Linux or under `C:\\tessdb\\log` folder on Windows. \nDefault log level is `info`. It generates very litte logging at this level.\nFile is rotated by logrotate **only under Linux**. \n\n# OPERATION\n\n## Server Status/Start/Stop/Restart\n\n* Service status: `sudo systemctl status tessdb` or `sudo service tessdb status`\n* Start Service:  `sudo systemctl start tessdb`  or `sudo service tessdb start`\n\nStrongly recommended:\n* Stop Service:    `sudo /usr/local/bin/tessdb_stop`\n* Restart Service: `sudo /usr/local/bin/tessdb_restart`\n\nNo don use:\n* Stop Service:    `sudo systemctl stop tessdb`    or `sudo service tessdb stop`\n* Restart Service: `sudo systemctl restart tessdb` or `sudo service tessdb stop`\n\n## Service Pause/Resume\n\nThe server can be put in *pause mode*, in which will be still receiving incoming MQTT messages but will be internally enqueued and not written to the database. Also, all connections to the database are closed. This allows to perform high risk operations on the database without loss of incoming data. Examples:\n\n* Compact the database using the SQLite `VACUUM` pragma\n* Migrating data from tables.\n* etc.\n\nService pause/resume use internally signals `SIGUSR1` and `SIGUSR2`.\n\nTo pause the server, type: `sudo tessdb_pause` and watch the log file output wit `tail -f /var/log/tessdb.log`:\n\n```\n2018-11-23T13:08:25+0100 [dbase#info] TESS database writer paused\n2018-11-23T13:08:25+0100 [dbase#info] Closed a DB Connection to /var/dbase/tess.db\n```\n\n**Note:** The old  `sudo service tessdb pause` command do not work anymore.\n\nTo resume normal operation type `sudo tessdb_resume` and watch the same log file:\n\n```\n2018-11-23T13:10:37+0100 [dbase#info] TESS database writer resumed\n2018-11-23T13:10:37+0100 [dbase#info] Opened a DB Connection to /var/dbase/tess.db\n```\n\n##  Service reload\n\nDuring a reload the service is not stopped and re-reads the new values form the configuration file and apply the changes. In general, all aspects not related to maintaining the current connection to the MQTT broker or changing the database schema can be reloaded. The full list of reloadadble properties is described inside the configuration file.\n\n* Type `sudo systemctl reload tessdb` or `sudo service tessdb reload`. \n\n## Mainteinance\n\nDatabase mainteinance is made through the `tess` command line utility, installed by the tessdb-reports package.\nMainteninance operations include:\n- create new locations\n- create new TESS instruments (manually)\n- assign locations to instruments\n- enable recording of data received from an instrument\n- listing current instruments\n- listing instruments not assigned to any known location\n- etc.\n\n\n# DATA MODEL\n\n## Dimensional Modelling\n\nThe data model follows the [dimensional modelling]\n(https://en.wikipedia.org/wiki/Dimensional_modeling) approach by Ralph Kimball. More references can also be found in [Star Schemas](https://en.wikipedia.org/wiki/Star_schema).\n\n## The data model\n\nThe figure below shows the layout of **tessdb**.\n\n![TESS Database Model](doc/tessdb-full.png)\n\n### Dimension Tables\n\nThey are:\n\n* `date_t`      : preloaded from 2016 to 2026\n* `time_t`      : preloaded, with seconds resolution (configurable)\n* `tess_t`      : registered TESS instruments collecting data\n* `location_t`  : locations where instruments are deployed\n* `tess_units_t`     : an assorted collection of unit labels for reports, preloaded with current units.\n* `tess_v`      : View with TESS instrument and current location. It is recommended that reporting applications use this view, instead of the underlying `tess_t` and `location_t` tables.\n\n#### Date Dimension\n\nPretty much standard date table from dimensional modelling. Contains most used attributes plus `julian_day` specific to Astronomy domain.\n\n#### Time of the day Dimension\n\nPretty much standard time of the day table from dimensional modelling. Contains well known attributes.\n\n#### Instrument Dimension\n\nThis dimension holds the current list of TESS instruments. \n\n* The real key is an artificial key `tess_id` linked to the Fact table.\n* The `mac_address` could be the natural key if it weren't for the zero point and filter history tracking.\n* The `location_id` is a reference to the current location assigned to the instrument. Location id -1 denotes the \"Unknown\" location.\n* `model` refers to the current TESS model.\n* `firmware` contains the current firmware version.\n* `fov` contains the Field of View, in degrees.\n* `cover_offset` is an additional offset in mag/arcserc^2 to account for an additional optical window attenuation attached tothe TESS itself. Defaults to 0.0.\n* `channel` is the current channel identifier. Default value is 0. Currently, the TESS photometer has only one channel.\n* `authorised` to allow the TESS instrument to store readings on the database. Authorization is a manual process done by the *tess utility*.\n* `registered` shos if the TESS instrument registered itself on the database (\"Automatic\") or it was done by a manual process (\"Manual\") using the *tess utility*. The default value is \"Unknown\" for the TESS instrument registered before adding this feature to the software. It is expected to identify these cases one by one and set them to 'Manual' or 'Automatic'.\n\n##### Version-controlled Attributes\nThese attubutes are version-controlled and a historic of these is maintained. A new change in any of them will generate a new row in the `tess_t` table\n* The `zero_point` holds the current value of the instrument calibration constant. Defaults to '20.5' (uncalibrated photometer).\n* The `filter` holds the current TESS filter (i.e. 'UVIR' or Dichroic Glass). Defaults to 'UVIR'\n* The `azimuth` and `altitude` attributes hold the photometer current orientation, in degrees. Default azimuth is 0.0 and default altitude is 90.0\n\n##### Version Control Attributes\nThese columns manage the version control of a given TESS attributes.\n* Columns `valid_since` and `valid_until` hold the timestamps where the changes to version controlled attributes are valid. \n* Column `valid_state` is an indicator. Its values are either **`Current`** or **`Expired`**. \nThe current valid TESS instrument has its `valid_state` set to `Current` and the expiration date in a far away future (Y2999).\n\n#### Unit dimension\n\nThe `tess_units_t` table collects various flags for the fact table. \n\n* (OBSOLETE) Columns `valid_since`, `valid_until` and `valid_state` keep track of any units change in a similar technique as above should the units change.\n\n#### Location dimension\n\nThis dimension table holds all known locations where TESS photometers are to be deployed.\n\n* `site`. Unique site name describing the this location.\n* `contact_person`. Person to account for observations.\n* `organization`. Organization where the contact person belongs to or running the facilities in the location.\n* `contact_email`. Contact person email address.\n* `longitude` Location longitude in degrees. West is negative.\n* `latitude`. Location latitude in degrees\n* `elevation`. Location elevation in meters\n* `zipcode`. Location ZIP code\n* `province`. Location country\n* `country`. Location country\n* `timezone`. Time zone (to calculate local time) in standard format described by Wikipedia[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]\n* `sunrise` & `sunset`. Computed attributes (oce per day) used to filter out readings in daylight.\n\n### Fact Tables\nThey are:\n\n* `tess_readings_t` : Accumulating snapshot fact table containing measurements from several TESS instruments.\n\nTESS devices with accelerometer will send `azimuth` and `altitude` values, otherwise they are `NULL`.\n\nTESS devices with a GPS will send `longitude`, `latitude` and `height` values, otherwise they are `NULL`.\n\n### Other Tables\n\nIt is possible now to replace a given TESS-W and keep the name. This is sueful for sites that wish to announce a simbolic name for its TESS-W photometer and never change even if the device is replaced (i.e. by being broken).\n\nSo now, a given name ***does not*** identify a TESS-W photometer, only the MAC address does. An association table is needed\n\n* `name_to_mac_t` : Association table to label a given TESS-W device (identified by its MAC address) to a symbolic name.\n\n\n## Sample SQL Queries\n\nThe following are samples queries illustraing how to use the data model. They are actually being used by the STARS4ALL project\n\n1. Get a daily report of readings per instrument:\n\n```sh\n#!/bin/bash\nsqlite3 /var/dbase/tess.db <<EOF\n.mode column\n.headers on\nSELECT d.sql_date, i.mac_address, count(*) AS readings\nFROM tess_readings_t AS r\nJOIN tess_t AS i USING (tess_id)\nJOIN date_t AS d USING (date_id)\nGROUP BY r.date_id, r.tess_id\nORDER BY d.sql_date DESC;\nEOF\n```\n\n2. Extract a CSV (semicolon separated) with all readings for an instrument passed as a command line argument:\n\n```sh\n#!/bin/bash\ninstrument_name=$1\nsqlite3 -csv -header /var/dbase/tess.db <<EOF\nSELECT (d.julian_day + t.day_fraction) AS julian_day, (d.sql_date || 'T' || t.time) AS timestamp, r.sequence_number, l.site, i.mac_address, r.frequency, r.magnitude, i.zero_point, r.sky_temperature, r.ambient_temperature\nFROM tess_readings_t AS r\nJOIN tess_t          AS i USING (tess_id)\nJOIN location_t      AS l USING (location_id)\nJOIN date_t          AS d USING (date_id)\nJOIN time_t          AS t USING (time_id)\nWHERE i.mac_address  IN (SELECT mac_address FROM name_to_mac_t WHERE name = \"${instrument_name}\")\nORDER BY r.date_id ASC, r.time_id ASC;\nEOF\n```\n\n3. Show current TESS instruments. Note that we are using the `tess_v` View,so that the current location info is already included.\n\n```sh\n#!/bin/bash\nsqlite3 /var/dbase/tess.db <<EOF\n.mode column\n.headers on\nSELECT v.name AS Name, v.mac_address AS MAC, (v.latitude || ' ' || v.longitude) AS Coordinates , (v.site || ', ' || v.location || ', ' || v.province) AS Location, v.contact_email as User, v.zero_point as ZP, v.filter as Filter\nFROM tess_v AS v\nWHERE v.valid_state = \"Current\"\nORDER BY v.name ASC;\nEOF\n```\n\n4. Show TESS instruments changes (zero point and/or filter)\n\n```sh\n#!/bin/bash\nsqlite3 /var/dbase/tess.db <<EOF\n.mode column\n.headers on;\nSELECT i.name AS Name, i.zero_point as ZP, i.filter as Filter, i.valid_since AS Since, i.valid_until AS Until, i.valid_state AS 'Change State'\nFROM tess_t AS i\nORDER BY i.name ASC, i.valid_since ASC;\nEOF\n```\n\n5. Show the time span of readings per TESS\n```sh\n#!/bin/bash\nsqlite3 /var/dbase/tess.db <<EOF\n.mode column\n.headers on;\nSELECT i.mac_address, MIN(d.sql_date || 'T' || t.time || 'Z') AS earliest, MAX(d.sql_date || 'T' || t.time || 'Z') AS latest\nFROM tess_readings_t AS r\nJOIN tess_t          AS i USING (tess_id)\nJOIN location_t      AS l USING (location_id)\nJOIN date_t          AS d USING (date_id)\nJOIN time_t          AS t USING (time_id)\nGROUP BY i.mac_address;\nEOF\n```\n\n6. Show locations not assigned to any TESS\n```sh\n#!/bin/bash\nsqlite3 /var/dbase/tess.db <<EOF\n.mode column\n.headers on;\nSELECT l.site\nFROM location_t        AS l \nLEFT OUTER JOIN tess_t AS i USING (location_id)\nWHERE i.mac_address IS NULL;\nEOF\n```\n\n# MQTT PAYLOAD INFORMATION\n\nPayloads are transmitted in JSON format, with the format described below.\n\n## Published on  topic 'STARS4ALL/{channel}/reading'\n\n| Field name |  Type  | Units | Optional | Description                       |\n|:----------:|:------:|:-----:|:--------:|:----------------------------------|\n| seq        | int    |   -   | mand  | Sequence number. If possible use 32 bits. The sequence number will start in 1 at each device reboot. |\n| name       | string |   -   | mand  | Instrument friendly name. Should be unique as it identifies the device. |\n| freq       | float  | Hz    | mand  | Raw reading as a frequency with 3 decimal digits precision (millihertz) NNNNN.NNN |\n| mag        | float  | mag/arcsec^2 | mandat. | Visual magnitude (formulae?) corresponding to the raw reading). Transmitted up to two decimal places NN.NN |\n| tamb       | float   | \u00baC    | mandat. | Ambient Temperature. Transmitted up to one decimal place. |\n| tsky       | float   | \u00baC    | mandat.  | Sky Temperature. Transmitted up to one decimal place. |\n| wdBm       | int     | dBm | opt | WiFi Received Signal Strength. |\n| az         | int     | deg | opt | Photometer optical axis Azimuth sent only on instruments with accelerometer. |\n| alt | int | deg | opt | Photometer optical axis Altitude (angle): sent only on instruments with accelerometer. |\n| lat | float | deg | opt | Instrument latitude. Only sent by instruments with GPS integration. |\n| long | float | deg | opt | Instrument longitude. Only sent by instruments with GPS integration. |\n| height | float | meters | opt | Instrument height above the sea level. Only sent by instruments with GPS integration. |\n| rev | int | - | mand | Payload data format revision number. Current version is 1. |\n| tstamp | string | UTC | opt | Timestamp,\u201cYYYY-MM-DDTHH:MM:SS\u201d format. Must be UTC. |\n\n## Published on  topic 'STARS4ALL/register'\n\n| Field name |  Type  | Units | Optional | Description                       |\n|:----------:|:------:|:-----:|:--------:|:----------------------------------|\n| name  | string | - | mand | Instrument friendly name. Should be unique as it identifies the device. |\n| mac   | string | - | mand. | Device MAC address, format \u201cxx:yy:zz:rr:ss:tt\u201d |\n| calib | float  | mag/arcsec^2 | mand | Per-device Zero Point. Transmitted as NN.NN floating point. |\n| rev   | int    | - | mand | Payload data format revision number. Current version is 1. |\n| chan  | string | - | opt | Channel where this instrument will publish its readings. |\n\n\n# OPERATION & MAINTENANCE\n\n## Pause & resume\n\nSince the current database used is SQLite - a single user database - you need to pause tessdb-server if dealing directly with the database\nlike issuing SQL commands directly or using the `tess` command line utility\n\nUse `/usr/local/bin/tessdb_pause` and `/usr/local/bin/tessdb_resume` to coordinate your direct interactions to the database with tessdb-server.\n\n## Reload\n\nSince tessdb-server maintains a RAM cache of photometers data, some `tess` command requires a server reload to rfefress the cache.\nThe `tess`utility wanrs you when this is necessary.\n\n## Restart\n\nThe newest filter operation mode in tessdb-server maintains a sliding window of photometers samples before writting to database\nIf it is necessary to restart the server, use `/usr/local/bin/tessdb_restart` instead of `service tessdb restart`. This will ensure that the lastest\nreadings are stored in the database.\n\n## The `tess` utility\n\n`tess` is a command line utility to perform some common operations on the database without having to write SQL statements. As this utility modifies the database, it is necessary to invoke it within using `sudo`. Also, you should ensure that the database is not being written by `tessdb` to avoid *database is locked* exceptions, either by using it at daytime or by pausing the `tessdb` service with `/usr/local/bin/tessdb_pause` and then resume it with `/usr/local/bin/tessdb_resume`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/stars4all/tessdb/", "keywords": "Astronomy Python RaspberryPi LightPollution", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tessdb-server", "package_url": "https://pypi.org/project/tessdb-server/", "platform": "", "project_url": "https://pypi.org/project/tessdb-server/", "project_urls": {"Homepage": "http://github.com/stars4all/tessdb/"}, "release_url": "https://pypi.org/project/tessdb-server/2.6.4/", "requires_dist": null, "requires_python": "", "summary": "('A package to collect measurements published by TESS instruments into a SQlite database',)", "version": "2.6.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tessdb-server(overview)</h1>\n<p>Linux service to collect measurements pubished by TESS Sky Quality Meter via MQTT. TESS stands for <a href=\"http://www.observatorioremoto.com/TESS.pdf\" rel=\"nofollow\">Cristobal Garcia's Telescope Encoder and Sky Sensor</a></p>\n<p><strong>tessdb</strong> is being used as part of the <a href=\"http://www.stars4all.eu/\" rel=\"nofollow\">STARS4ALL Project</a>.</p>\n<h2>Description</h2>\n<p><strong>tessdb</strong> is a software package that collects measurements from one or several\nTESS instruments into database (currently a SQLite Database).</p>\n<p>It is a <a href=\"https://twistedmatrix.com/trac/\" rel=\"nofollow\">Python Twisted Application</a>\nthat uses a <a href=\"https://github.com/astrorafael/twisted-mqtt\" rel=\"nofollow\">custom Twisted library implementing the MQTT protocol</a></p>\n<p>Desktop applicatons may query the database to generate reports and graphs\nusing the accumulated, historic data. There are some reports scripts already included in the package, specially an IDA-format monthly report script.</p>\n<p><strong>Note</strong>: The Windows version has been dropped, as it was never used.</p>\n<p>These data sources are available:</p>\n<ul>\n<li>individual samples (real time, configurable, 1 min. aprox between samples).</li>\n</ul>\n<p>Instrument should send their readings at twice the time resolution specified in the config file (in seconds).</p>\n<p><strong>Warning</strong>: Time referencie is always UTC, not local time.</p>\n<h1>INSTALLATION</h1>\n<h2>Requirements</h2>\n<p>The following components are needed and should be installed first:</p>\n<ul>\n<li>python 2.7.x (tested on Ubuntu Python 2.7.6) or python 3.6+</li>\n</ul>\n<p><strong>Note:</strong> It is foreseen a Python 3 migration in the future, retaining Python 2.7.x compatibility.</p>\n<h3>Installation</h3>\n<p>Installation is done from GitHub:</p>\n<pre><code>git clone https://github.com/astrorafael/tessdb.git\ncd tessdb\nsudo python setup.py install\n</code></pre>\n<p><strong>Note:</strong> Installation from PyPi is now obsolete. Do not use the package uploaded in PyPi.</p>\n<ul>\n<li>All executables are copied to <code>/usr/local/bin</code></li>\n<li>The database is located at <code>/var/dbase/tess.db</code> by default</li>\n<li>The log file is located at <code>/var/log/tessdb.log</code></li>\n<li>The following required PIP packages will be automatically installed:\n<ul>\n<li>twisted,</li>\n<li>twisted-mqtt</li>\n<li>pyephem</li>\n</ul>\n</li>\n</ul>\n<h3>Start up and Verification</h3>\n<ul>\n<li>Type <code>sudo tessdb -k</code> to start the service in foreground with console output.\nVerify that it starts without errors or exceptions. When done, abort it with <code>^C</code></li>\n</ul>\n<p>From tessdb release 1.2.0, the background execution is handled as a <code>systemd</code> service instead of the old system V style init script:</p>\n<pre><code>`sudo systemctl start tessdb`\n</code></pre>\n<p>although the old <code>sudo service tessdb start</code> command still works.</p>\n<ul>\n<li>It is strongly recommended to enable the service at boot time by issuing:</li>\n</ul>\n<p><code>sudo systemctl enable tessdb</code></p>\n<h1>CONFIGURATION</h1>\n<p>There is a small configuration file for this service:</p>\n<ul>\n<li><code>/etc/tessdb/config</code> (Linux)</li>\n</ul>\n<p>This file is self explanatory.\nIn special, the database file name and location is specified in this file.\nSome of the properities marked in this file are marked as <em>reloadable property</em>. This means that this value can be changed and the process reloads its new value on the fly.</p>\n<h2>Sunrise / Sunset filtering</h2>\n<p>A configurable window (7 samples by default) is stored in the server for each photometer.\nA filter process analyzes the middle sample in this window, if it finds all saturated values (magnitude=0)\naround this middle sample (past and future), this sample is discarded, otherwise it is elegible to be written to the database.</p>\n<p><em>Positive</em>: This filtering does not need to know the position where the photometer is placed.\n<em>Negative</em>: There is a time lag (Window size/2) between receiving the sample and storing it.\nFurthermore, if the server crashes or is abruptly stopped, the so-called \"future samples\" are lost.</p>\n<h2>Logging</h2>\n<p>Log file is usually placed under <code>/var/log/tessdb.log</code> in Linux or under <code>C:\\tessdb\\log</code> folder on Windows.\nDefault log level is <code>info</code>. It generates very litte logging at this level.\nFile is rotated by logrotate <strong>only under Linux</strong>.</p>\n<h1>OPERATION</h1>\n<h2>Server Status/Start/Stop/Restart</h2>\n<ul>\n<li>Service status: <code>sudo systemctl status tessdb</code> or <code>sudo service tessdb status</code></li>\n<li>Start Service:  <code>sudo systemctl start tessdb</code>  or <code>sudo service tessdb start</code></li>\n</ul>\n<p>Strongly recommended:</p>\n<ul>\n<li>Stop Service:    <code>sudo /usr/local/bin/tessdb_stop</code></li>\n<li>Restart Service: <code>sudo /usr/local/bin/tessdb_restart</code></li>\n</ul>\n<p>No don use:</p>\n<ul>\n<li>Stop Service:    <code>sudo systemctl stop tessdb</code>    or <code>sudo service tessdb stop</code></li>\n<li>Restart Service: <code>sudo systemctl restart tessdb</code> or <code>sudo service tessdb stop</code></li>\n</ul>\n<h2>Service Pause/Resume</h2>\n<p>The server can be put in <em>pause mode</em>, in which will be still receiving incoming MQTT messages but will be internally enqueued and not written to the database. Also, all connections to the database are closed. This allows to perform high risk operations on the database without loss of incoming data. Examples:</p>\n<ul>\n<li>Compact the database using the SQLite <code>VACUUM</code> pragma</li>\n<li>Migrating data from tables.</li>\n<li>etc.</li>\n</ul>\n<p>Service pause/resume use internally signals <code>SIGUSR1</code> and <code>SIGUSR2</code>.</p>\n<p>To pause the server, type: <code>sudo tessdb_pause</code> and watch the log file output wit <code>tail -f /var/log/tessdb.log</code>:</p>\n<pre><code>2018-11-23T13:08:25+0100 [dbase#info] TESS database writer paused\n2018-11-23T13:08:25+0100 [dbase#info] Closed a DB Connection to /var/dbase/tess.db\n</code></pre>\n<p><strong>Note:</strong> The old  <code>sudo service tessdb pause</code> command do not work anymore.</p>\n<p>To resume normal operation type <code>sudo tessdb_resume</code> and watch the same log file:</p>\n<pre><code>2018-11-23T13:10:37+0100 [dbase#info] TESS database writer resumed\n2018-11-23T13:10:37+0100 [dbase#info] Opened a DB Connection to /var/dbase/tess.db\n</code></pre>\n<h2>Service reload</h2>\n<p>During a reload the service is not stopped and re-reads the new values form the configuration file and apply the changes. In general, all aspects not related to maintaining the current connection to the MQTT broker or changing the database schema can be reloaded. The full list of reloadadble properties is described inside the configuration file.</p>\n<ul>\n<li>Type <code>sudo systemctl reload tessdb</code> or <code>sudo service tessdb reload</code>.</li>\n</ul>\n<h2>Mainteinance</h2>\n<p>Database mainteinance is made through the <code>tess</code> command line utility, installed by the tessdb-reports package.\nMainteninance operations include:</p>\n<ul>\n<li>create new locations</li>\n<li>create new TESS instruments (manually)</li>\n<li>assign locations to instruments</li>\n<li>enable recording of data received from an instrument</li>\n<li>listing current instruments</li>\n<li>listing instruments not assigned to any known location</li>\n<li>etc.</li>\n</ul>\n<h1>DATA MODEL</h1>\n<h2>Dimensional Modelling</h2>\n<p>The data model follows the [dimensional modelling]\n(<a href=\"https://en.wikipedia.org/wiki/Dimensional_modeling\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Dimensional_modeling</a>) approach by Ralph Kimball. More references can also be found in <a href=\"https://en.wikipedia.org/wiki/Star_schema\" rel=\"nofollow\">Star Schemas</a>.</p>\n<h2>The data model</h2>\n<p>The figure below shows the layout of <strong>tessdb</strong>.</p>\n<p><img alt=\"TESS Database Model\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4d7d6382e5879670e1dd52f277fb6aad5778a19/646f632f7465737364622d66756c6c2e706e67\"></p>\n<h3>Dimension Tables</h3>\n<p>They are:</p>\n<ul>\n<li><code>date_t</code>      : preloaded from 2016 to 2026</li>\n<li><code>time_t</code>      : preloaded, with seconds resolution (configurable)</li>\n<li><code>tess_t</code>      : registered TESS instruments collecting data</li>\n<li><code>location_t</code>  : locations where instruments are deployed</li>\n<li><code>tess_units_t</code>     : an assorted collection of unit labels for reports, preloaded with current units.</li>\n<li><code>tess_v</code>      : View with TESS instrument and current location. It is recommended that reporting applications use this view, instead of the underlying <code>tess_t</code> and <code>location_t</code> tables.</li>\n</ul>\n<h4>Date Dimension</h4>\n<p>Pretty much standard date table from dimensional modelling. Contains most used attributes plus <code>julian_day</code> specific to Astronomy domain.</p>\n<h4>Time of the day Dimension</h4>\n<p>Pretty much standard time of the day table from dimensional modelling. Contains well known attributes.</p>\n<h4>Instrument Dimension</h4>\n<p>This dimension holds the current list of TESS instruments.</p>\n<ul>\n<li>The real key is an artificial key <code>tess_id</code> linked to the Fact table.</li>\n<li>The <code>mac_address</code> could be the natural key if it weren't for the zero point and filter history tracking.</li>\n<li>The <code>location_id</code> is a reference to the current location assigned to the instrument. Location id -1 denotes the \"Unknown\" location.</li>\n<li><code>model</code> refers to the current TESS model.</li>\n<li><code>firmware</code> contains the current firmware version.</li>\n<li><code>fov</code> contains the Field of View, in degrees.</li>\n<li><code>cover_offset</code> is an additional offset in mag/arcserc^2 to account for an additional optical window attenuation attached tothe TESS itself. Defaults to 0.0.</li>\n<li><code>channel</code> is the current channel identifier. Default value is 0. Currently, the TESS photometer has only one channel.</li>\n<li><code>authorised</code> to allow the TESS instrument to store readings on the database. Authorization is a manual process done by the <em>tess utility</em>.</li>\n<li><code>registered</code> shos if the TESS instrument registered itself on the database (\"Automatic\") or it was done by a manual process (\"Manual\") using the <em>tess utility</em>. The default value is \"Unknown\" for the TESS instrument registered before adding this feature to the software. It is expected to identify these cases one by one and set them to 'Manual' or 'Automatic'.</li>\n</ul>\n<h5>Version-controlled Attributes</h5>\n<p>These attubutes are version-controlled and a historic of these is maintained. A new change in any of them will generate a new row in the <code>tess_t</code> table</p>\n<ul>\n<li>The <code>zero_point</code> holds the current value of the instrument calibration constant. Defaults to '20.5' (uncalibrated photometer).</li>\n<li>The <code>filter</code> holds the current TESS filter (i.e. 'UVIR' or Dichroic Glass). Defaults to 'UVIR'</li>\n<li>The <code>azimuth</code> and <code>altitude</code> attributes hold the photometer current orientation, in degrees. Default azimuth is 0.0 and default altitude is 90.0</li>\n</ul>\n<h5>Version Control Attributes</h5>\n<p>These columns manage the version control of a given TESS attributes.</p>\n<ul>\n<li>Columns <code>valid_since</code> and <code>valid_until</code> hold the timestamps where the changes to version controlled attributes are valid.</li>\n<li>Column <code>valid_state</code> is an indicator. Its values are either <strong><code>Current</code></strong> or <strong><code>Expired</code></strong>.\nThe current valid TESS instrument has its <code>valid_state</code> set to <code>Current</code> and the expiration date in a far away future (Y2999).</li>\n</ul>\n<h4>Unit dimension</h4>\n<p>The <code>tess_units_t</code> table collects various flags for the fact table.</p>\n<ul>\n<li>(OBSOLETE) Columns <code>valid_since</code>, <code>valid_until</code> and <code>valid_state</code> keep track of any units change in a similar technique as above should the units change.</li>\n</ul>\n<h4>Location dimension</h4>\n<p>This dimension table holds all known locations where TESS photometers are to be deployed.</p>\n<ul>\n<li><code>site</code>. Unique site name describing the this location.</li>\n<li><code>contact_person</code>. Person to account for observations.</li>\n<li><code>organization</code>. Organization where the contact person belongs to or running the facilities in the location.</li>\n<li><code>contact_email</code>. Contact person email address.</li>\n<li><code>longitude</code> Location longitude in degrees. West is negative.</li>\n<li><code>latitude</code>. Location latitude in degrees</li>\n<li><code>elevation</code>. Location elevation in meters</li>\n<li><code>zipcode</code>. Location ZIP code</li>\n<li><code>province</code>. Location country</li>\n<li><code>country</code>. Location country</li>\n<li><code>timezone</code>. Time zone (to calculate local time) in standard format described by Wikipedia[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]</li>\n<li><code>sunrise</code> &amp; <code>sunset</code>. Computed attributes (oce per day) used to filter out readings in daylight.</li>\n</ul>\n<h3>Fact Tables</h3>\n<p>They are:</p>\n<ul>\n<li><code>tess_readings_t</code> : Accumulating snapshot fact table containing measurements from several TESS instruments.</li>\n</ul>\n<p>TESS devices with accelerometer will send <code>azimuth</code> and <code>altitude</code> values, otherwise they are <code>NULL</code>.</p>\n<p>TESS devices with a GPS will send <code>longitude</code>, <code>latitude</code> and <code>height</code> values, otherwise they are <code>NULL</code>.</p>\n<h3>Other Tables</h3>\n<p>It is possible now to replace a given TESS-W and keep the name. This is sueful for sites that wish to announce a simbolic name for its TESS-W photometer and never change even if the device is replaced (i.e. by being broken).</p>\n<p>So now, a given name <em><strong>does not</strong></em> identify a TESS-W photometer, only the MAC address does. An association table is needed</p>\n<ul>\n<li><code>name_to_mac_t</code> : Association table to label a given TESS-W device (identified by its MAC address) to a symbolic name.</li>\n</ul>\n<h2>Sample SQL Queries</h2>\n<p>The following are samples queries illustraing how to use the data model. They are actually being used by the STARS4ALL project</p>\n<ol>\n<li>Get a daily report of readings per instrument:</li>\n</ol>\n<pre><span class=\"ch\">#!/bin/bash</span>\nsqlite3 /var/dbase/tess.db <span class=\"s\">&lt;&lt;EOF</span>\n<span class=\"s\">.mode column</span>\n<span class=\"s\">.headers on</span>\n<span class=\"s\">SELECT d.sql_date, i.mac_address, count(*) AS readings</span>\n<span class=\"s\">FROM tess_readings_t AS r</span>\n<span class=\"s\">JOIN tess_t AS i USING (tess_id)</span>\n<span class=\"s\">JOIN date_t AS d USING (date_id)</span>\n<span class=\"s\">GROUP BY r.date_id, r.tess_id</span>\n<span class=\"s\">ORDER BY d.sql_date DESC;</span>\n<span class=\"s\">EOF</span>\n</pre>\n<ol>\n<li>Extract a CSV (semicolon separated) with all readings for an instrument passed as a command line argument:</li>\n</ol>\n<pre><span class=\"ch\">#!/bin/bash</span>\n<span class=\"nv\">instrument_name</span><span class=\"o\">=</span><span class=\"nv\">$1</span>\nsqlite3 -csv -header /var/dbase/tess.db <span class=\"s\">&lt;&lt;EOF</span>\n<span class=\"s\">SELECT (d.julian_day + t.day_fraction) AS julian_day, (d.sql_date || 'T' || t.time) AS timestamp, r.sequence_number, l.site, i.mac_address, r.frequency, r.magnitude, i.zero_point, r.sky_temperature, r.ambient_temperature</span>\n<span class=\"s\">FROM tess_readings_t AS r</span>\n<span class=\"s\">JOIN tess_t          AS i USING (tess_id)</span>\n<span class=\"s\">JOIN location_t      AS l USING (location_id)</span>\n<span class=\"s\">JOIN date_t          AS d USING (date_id)</span>\n<span class=\"s\">JOIN time_t          AS t USING (time_id)</span>\n<span class=\"s\">WHERE i.mac_address  IN (SELECT mac_address FROM name_to_mac_t WHERE name = \"${instrument_name}\")</span>\n<span class=\"s\">ORDER BY r.date_id ASC, r.time_id ASC;</span>\n<span class=\"s\">EOF</span>\n</pre>\n<ol>\n<li>Show current TESS instruments. Note that we are using the <code>tess_v</code> View,so that the current location info is already included.</li>\n</ol>\n<pre><span class=\"ch\">#!/bin/bash</span>\nsqlite3 /var/dbase/tess.db <span class=\"s\">&lt;&lt;EOF</span>\n<span class=\"s\">.mode column</span>\n<span class=\"s\">.headers on</span>\n<span class=\"s\">SELECT v.name AS Name, v.mac_address AS MAC, (v.latitude || ' ' || v.longitude) AS Coordinates , (v.site || ', ' || v.location || ', ' || v.province) AS Location, v.contact_email as User, v.zero_point as ZP, v.filter as Filter</span>\n<span class=\"s\">FROM tess_v AS v</span>\n<span class=\"s\">WHERE v.valid_state = \"Current\"</span>\n<span class=\"s\">ORDER BY v.name ASC;</span>\n<span class=\"s\">EOF</span>\n</pre>\n<ol>\n<li>Show TESS instruments changes (zero point and/or filter)</li>\n</ol>\n<pre><span class=\"ch\">#!/bin/bash</span>\nsqlite3 /var/dbase/tess.db <span class=\"s\">&lt;&lt;EOF</span>\n<span class=\"s\">.mode column</span>\n<span class=\"s\">.headers on;</span>\n<span class=\"s\">SELECT i.name AS Name, i.zero_point as ZP, i.filter as Filter, i.valid_since AS Since, i.valid_until AS Until, i.valid_state AS 'Change State'</span>\n<span class=\"s\">FROM tess_t AS i</span>\n<span class=\"s\">ORDER BY i.name ASC, i.valid_since ASC;</span>\n<span class=\"s\">EOF</span>\n</pre>\n<ol>\n<li>Show the time span of readings per TESS</li>\n</ol>\n<pre><span class=\"ch\">#!/bin/bash</span>\nsqlite3 /var/dbase/tess.db <span class=\"s\">&lt;&lt;EOF</span>\n<span class=\"s\">.mode column</span>\n<span class=\"s\">.headers on;</span>\n<span class=\"s\">SELECT i.mac_address, MIN(d.sql_date || 'T' || t.time || 'Z') AS earliest, MAX(d.sql_date || 'T' || t.time || 'Z') AS latest</span>\n<span class=\"s\">FROM tess_readings_t AS r</span>\n<span class=\"s\">JOIN tess_t          AS i USING (tess_id)</span>\n<span class=\"s\">JOIN location_t      AS l USING (location_id)</span>\n<span class=\"s\">JOIN date_t          AS d USING (date_id)</span>\n<span class=\"s\">JOIN time_t          AS t USING (time_id)</span>\n<span class=\"s\">GROUP BY i.mac_address;</span>\n<span class=\"s\">EOF</span>\n</pre>\n<ol>\n<li>Show locations not assigned to any TESS</li>\n</ol>\n<pre><span class=\"ch\">#!/bin/bash</span>\nsqlite3 /var/dbase/tess.db <span class=\"s\">&lt;&lt;EOF</span>\n<span class=\"s\">.mode column</span>\n<span class=\"s\">.headers on;</span>\n<span class=\"s\">SELECT l.site</span>\n<span class=\"s\">FROM location_t        AS l </span>\n<span class=\"s\">LEFT OUTER JOIN tess_t AS i USING (location_id)</span>\n<span class=\"s\">WHERE i.mac_address IS NULL;</span>\n<span class=\"s\">EOF</span>\n</pre>\n<h1>MQTT PAYLOAD INFORMATION</h1>\n<p>Payloads are transmitted in JSON format, with the format described below.</p>\n<h2>Published on  topic 'STARS4ALL/{channel}/reading'</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Field name</th>\n<th align=\"center\">Type</th>\n<th align=\"center\">Units</th>\n<th align=\"center\">Optional</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">seq</td>\n<td align=\"center\">int</td>\n<td align=\"center\">-</td>\n<td align=\"center\">mand</td>\n<td align=\"left\">Sequence number. If possible use 32 bits. The sequence number will start in 1 at each device reboot.</td>\n</tr>\n<tr>\n<td align=\"center\">name</td>\n<td align=\"center\">string</td>\n<td align=\"center\">-</td>\n<td align=\"center\">mand</td>\n<td align=\"left\">Instrument friendly name. Should be unique as it identifies the device.</td>\n</tr>\n<tr>\n<td align=\"center\">freq</td>\n<td align=\"center\">float</td>\n<td align=\"center\">Hz</td>\n<td align=\"center\">mand</td>\n<td align=\"left\">Raw reading as a frequency with 3 decimal digits precision (millihertz) NNNNN.NNN</td>\n</tr>\n<tr>\n<td align=\"center\">mag</td>\n<td align=\"center\">float</td>\n<td align=\"center\">mag/arcsec^2</td>\n<td align=\"center\">mandat.</td>\n<td align=\"left\">Visual magnitude (formulae?) corresponding to the raw reading). Transmitted up to two decimal places NN.NN</td>\n</tr>\n<tr>\n<td align=\"center\">tamb</td>\n<td align=\"center\">float</td>\n<td align=\"center\">\u00baC</td>\n<td align=\"center\">mandat.</td>\n<td align=\"left\">Ambient Temperature. Transmitted up to one decimal place.</td>\n</tr>\n<tr>\n<td align=\"center\">tsky</td>\n<td align=\"center\">float</td>\n<td align=\"center\">\u00baC</td>\n<td align=\"center\">mandat.</td>\n<td align=\"left\">Sky Temperature. Transmitted up to one decimal place.</td>\n</tr>\n<tr>\n<td align=\"center\">wdBm</td>\n<td align=\"center\">int</td>\n<td align=\"center\">dBm</td>\n<td align=\"center\">opt</td>\n<td align=\"left\">WiFi Received Signal Strength.</td>\n</tr>\n<tr>\n<td align=\"center\">az</td>\n<td align=\"center\">int</td>\n<td align=\"center\">deg</td>\n<td align=\"center\">opt</td>\n<td align=\"left\">Photometer optical axis Azimuth sent only on instruments with accelerometer.</td>\n</tr>\n<tr>\n<td align=\"center\">alt</td>\n<td align=\"center\">int</td>\n<td align=\"center\">deg</td>\n<td align=\"center\">opt</td>\n<td align=\"left\">Photometer optical axis Altitude (angle): sent only on instruments with accelerometer.</td>\n</tr>\n<tr>\n<td align=\"center\">lat</td>\n<td align=\"center\">float</td>\n<td align=\"center\">deg</td>\n<td align=\"center\">opt</td>\n<td align=\"left\">Instrument latitude. Only sent by instruments with GPS integration.</td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">float</td>\n<td align=\"center\">deg</td>\n<td align=\"center\">opt</td>\n<td align=\"left\">Instrument longitude. Only sent by instruments with GPS integration.</td>\n</tr>\n<tr>\n<td align=\"center\">height</td>\n<td align=\"center\">float</td>\n<td align=\"center\">meters</td>\n<td align=\"center\">opt</td>\n<td align=\"left\">Instrument height above the sea level. Only sent by instruments with GPS integration.</td>\n</tr>\n<tr>\n<td align=\"center\">rev</td>\n<td align=\"center\">int</td>\n<td align=\"center\">-</td>\n<td align=\"center\">mand</td>\n<td align=\"left\">Payload data format revision number. Current version is 1.</td>\n</tr>\n<tr>\n<td align=\"center\">tstamp</td>\n<td align=\"center\">string</td>\n<td align=\"center\">UTC</td>\n<td align=\"center\">opt</td>\n<td align=\"left\">Timestamp,\u201cYYYY-MM-DDTHH:MM:SS\u201d format. Must be UTC.</td>\n</tr></tbody></table>\n<h2>Published on  topic 'STARS4ALL/register'</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Field name</th>\n<th align=\"center\">Type</th>\n<th align=\"center\">Units</th>\n<th align=\"center\">Optional</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">name</td>\n<td align=\"center\">string</td>\n<td align=\"center\">-</td>\n<td align=\"center\">mand</td>\n<td align=\"left\">Instrument friendly name. Should be unique as it identifies the device.</td>\n</tr>\n<tr>\n<td align=\"center\">mac</td>\n<td align=\"center\">string</td>\n<td align=\"center\">-</td>\n<td align=\"center\">mand.</td>\n<td align=\"left\">Device MAC address, format \u201cxx:yy:zz:rr:ss:tt\u201d</td>\n</tr>\n<tr>\n<td align=\"center\">calib</td>\n<td align=\"center\">float</td>\n<td align=\"center\">mag/arcsec^2</td>\n<td align=\"center\">mand</td>\n<td align=\"left\">Per-device Zero Point. Transmitted as NN.NN floating point.</td>\n</tr>\n<tr>\n<td align=\"center\">rev</td>\n<td align=\"center\">int</td>\n<td align=\"center\">-</td>\n<td align=\"center\">mand</td>\n<td align=\"left\">Payload data format revision number. Current version is 1.</td>\n</tr>\n<tr>\n<td align=\"center\">chan</td>\n<td align=\"center\">string</td>\n<td align=\"center\">-</td>\n<td align=\"center\">opt</td>\n<td align=\"left\">Channel where this instrument will publish its readings.</td>\n</tr></tbody></table>\n<h1>OPERATION &amp; MAINTENANCE</h1>\n<h2>Pause &amp; resume</h2>\n<p>Since the current database used is SQLite - a single user database - you need to pause tessdb-server if dealing directly with the database\nlike issuing SQL commands directly or using the <code>tess</code> command line utility</p>\n<p>Use <code>/usr/local/bin/tessdb_pause</code> and <code>/usr/local/bin/tessdb_resume</code> to coordinate your direct interactions to the database with tessdb-server.</p>\n<h2>Reload</h2>\n<p>Since tessdb-server maintains a RAM cache of photometers data, some <code>tess</code> command requires a server reload to rfefress the cache.\nThe <code>tess</code>utility wanrs you when this is necessary.</p>\n<h2>Restart</h2>\n<p>The newest filter operation mode in tessdb-server maintains a sliding window of photometers samples before writting to database\nIf it is necessary to restart the server, use <code>/usr/local/bin/tessdb_restart</code> instead of <code>service tessdb restart</code>. This will ensure that the lastest\nreadings are stored in the database.</p>\n<h2>The <code>tess</code> utility</h2>\n<p><code>tess</code> is a command line utility to perform some common operations on the database without having to write SQL statements. As this utility modifies the database, it is necessary to invoke it within using <code>sudo</code>. Also, you should ensure that the database is not being written by <code>tessdb</code> to avoid <em>database is locked</em> exceptions, either by using it at daytime or by pausing the <code>tessdb</code> service with <code>/usr/local/bin/tessdb_pause</code> and then resume it with <code>/usr/local/bin/tessdb_resume</code>.</p>\n\n          </div>"}, "last_serial": 6732309, "releases": {"2.6.0": [{"comment_text": "", "digests": {"md5": "e83930a23b868a6adc023b17956c18b3", "sha256": "a705798e104e1a194b62c2242fa82ab75452702ccfb3286f43fce30759c42f8a"}, "downloads": -1, "filename": "tessdb-server-2.6.0.tar.gz", "has_sig": false, "md5_digest": "e83930a23b868a6adc023b17956c18b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63517, "upload_time": "2020-02-13T10:45:05", "upload_time_iso_8601": "2020-02-13T10:45:05.398779Z", "url": "https://files.pythonhosted.org/packages/9a/76/148ed62a607b89063ece93a033e8085267ceda67186567450416be6e8064/tessdb-server-2.6.0.tar.gz", "yanked": false}], "2.6.1": [{"comment_text": "", "digests": {"md5": "4fe1ee7e27b4100b94ba07e7b434d8e7", "sha256": "df052365963ee26a1dd11aade655db20755d91da8a3ff545a9d6c2e1ec867ba5"}, "downloads": -1, "filename": "tessdb-server-2.6.1.tar.gz", "has_sig": false, "md5_digest": "4fe1ee7e27b4100b94ba07e7b434d8e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59021, "upload_time": "2020-02-27T12:29:15", "upload_time_iso_8601": "2020-02-27T12:29:15.264142Z", "url": "https://files.pythonhosted.org/packages/7d/c7/23d10dbc52b066de7eb390db9a12d424a18098cf6a416e296fa220242766/tessdb-server-2.6.1.tar.gz", "yanked": false}], "2.6.2": [{"comment_text": "", "digests": {"md5": "dfa6382716f13c57c7ba81814adfcd80", "sha256": "4a263afd41d577f2a41e52cf6409599a813e20864e9ff90d3906d8b50312e7ec"}, "downloads": -1, "filename": "tessdb-server-2.6.2.tar.gz", "has_sig": false, "md5_digest": "dfa6382716f13c57c7ba81814adfcd80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65758, "upload_time": "2020-02-27T12:42:04", "upload_time_iso_8601": "2020-02-27T12:42:04.844224Z", "url": "https://files.pythonhosted.org/packages/58/10/157966f4064797a7f3156f8e9dc99d713f3c39557e2dfe002c8b4663074e/tessdb-server-2.6.2.tar.gz", "yanked": false}], "2.6.3": [{"comment_text": "", "digests": {"md5": "ea05afd11cbe333080a0cfa696c831fa", "sha256": "e42b703447f954369a285874f2186b4fb27a4c56d2ba861c832697f863653f6e"}, "downloads": -1, "filename": "tessdb-server-2.6.3.tar.gz", "has_sig": false, "md5_digest": "ea05afd11cbe333080a0cfa696c831fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58993, "upload_time": "2020-02-27T13:04:04", "upload_time_iso_8601": "2020-02-27T13:04:04.301751Z", "url": "https://files.pythonhosted.org/packages/0d/8f/38d5b34760bf51280a1825c694666bd79f3248191d2a794c0991cdd414fb/tessdb-server-2.6.3.tar.gz", "yanked": false}], "2.6.4": [{"comment_text": "", "digests": {"md5": "be293e891594076aaafe6671cae08294", "sha256": "b6422eb84b857f3f77a89f288f18ca2cfae55242f32c13614d25aa4a07d52f7e"}, "downloads": -1, "filename": "tessdb-server-2.6.4.tar.gz", "has_sig": false, "md5_digest": "be293e891594076aaafe6671cae08294", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59035, "upload_time": "2020-03-02T09:56:32", "upload_time_iso_8601": "2020-03-02T09:56:32.409636Z", "url": "https://files.pythonhosted.org/packages/28/c6/2cd4a85a72c2e9952e552b0712f06c3a2cf8c166b677f56bc4e7617360c0/tessdb-server-2.6.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be293e891594076aaafe6671cae08294", "sha256": "b6422eb84b857f3f77a89f288f18ca2cfae55242f32c13614d25aa4a07d52f7e"}, "downloads": -1, "filename": "tessdb-server-2.6.4.tar.gz", "has_sig": false, "md5_digest": "be293e891594076aaafe6671cae08294", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59035, "upload_time": "2020-03-02T09:56:32", "upload_time_iso_8601": "2020-03-02T09:56:32.409636Z", "url": "https://files.pythonhosted.org/packages/28/c6/2cd4a85a72c2e9952e552b0712f06c3a2cf8c166b677f56bc4e7617360c0/tessdb-server-2.6.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:43 2020"}