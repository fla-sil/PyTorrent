{"info": {"author": "Tiziano M\u00fcller", "author_email": "tiziano.mueller@chem.uzh.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Chemistry", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# AiiDA Gaussian Data Plugin\n\n[![Build Status](https://travis-ci.com/dev-zero/aiida-gaussian-datatypes.svg?branch=develop)](https://travis-ci.com/dev-zero/aiida-gaussian-datatypes) [![codecov](https://codecov.io/gh/dev-zero/aiida-gaussian-datatypes/branch/develop/graph/badge.svg)](https://codecov.io/gh/dev-zero/aiida-gaussian-datatypes) [![PyPI](https://img.shields.io/pypi/pyversions/aiida-gaussian-datatypes)](https://pypi.org/project/aiida-gaussian-datatypes/)\n\n\nPlugin to handle GTO-based basis sets and pseudopotentials and manage them as first-class citizens in AiiDA.\n\n## Commandline usage\n\nAfter the installation, you will get new commands in `verdi data`\n\n```console\n$ verdi data\nUsage: verdi data [OPTIONS] COMMAND [ARGS]...\n\n  Inspect, create and manage data nodes.\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  array              Manipulate ArrayData objects.\n  bands              Manipulate BandsData objects.\n  cif                Manipulation of CIF data objects.\n  parameter          View and manipulate Dict objects.\n  plugins            Print a list of registered data plugins or details of\n                     a...\n  remote             Managing RemoteData objects.\n  structure          Manipulation of StructureData objects.\n  trajectory         View and manipulate TrajectoryData instances.\n  upf                Manipulation of the upf families.\n  gaussian.basisset  Manage basis sets for GTO-based codes\n  gaussian.pseudo    Manage Pseudopotentials for GTO-based codes\n\n$ verdi data gaussian.basisset\nUsage: verdi data gaussian.basisset [OPTIONS] COMMAND [ARGS]...\n\n  Manage basis sets for GTO-based codes\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  dump    Print specified Basis Sets\n  import  Add a basis sets from a file to the database\n  list    List Gaussian Basis Sets\n\n$ verdi data gaussian.pseudo\nUsage: verdi data gaussian.pseudo [OPTIONS] COMMAND [ARGS]...\n\n  Manage Pseudopotentials for GTO-based codes\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  dump    Print specified Pseudopotential\n  import  Add a pseudopotential from a file to the database\n  list    List Gaussian Pseudopotentials\n```\n\n## Examples\n\n### Import and use Basis Set from CP2K\n\nTo import a specific basis set from a file with basis sets in CP2K's native format, simply use:\n\n```console\n$ verdi data gaussian.basisset import --sym He data/BASIS_MOLOPT\nInfo: 2 Gaussian Basis Sets found:\n\n  Nr.  Sym    Names                                      Tags                         # Val. e\u207b    Version\n-----  -----  -----------------------------------------  -------------------------  -----------  ---------\n    1  He     SZV-MOLOPT-SR-GTH-q2, SZV-MOLOPT-SR-GTH    SZV, MOLOPT, SR, GTH, q2             2          1\n    2  He     DZVP-MOLOPT-SR-GTH-q2, DZVP-MOLOPT-SR-GTH  DZVP, MOLOPT, SR, GTH, q2            2          1\n\nWhich Gaussian Basis Set do you want to add? ('n' for none, 'a' for all, comma-seperated list or range of numbers): 2\nInfo: Adding Gaussian Basis Set for: He (DZVP-MOLOPT-SR-GTH-q2)... DONE\n\n$ verdi data gaussian.basisset list\nInfo: 1 Gaussian Basis Sets found:\n\nID                                    Sym    Names                                      Tags                       # Val. e\u207b      Version\n------------------------------------  -----  -----------------------------------------  -------------------------  -----------  ---------\n4a173d43-b022-4e1e-aca9-c4db51da223b  He     DZVP-MOLOPT-SR-GTH-q2, DZVP-MOLOPT-SR-GTH  DZVP, MOLOPT, SR, GTH, q2  2                    1\n```\n\nNotes:\n\n* The command line argument `--sym He` is optional (leaving it away will simply show all available entries)\n* The plugin automatically filters already imported basis sets\n\nTo reference this in a `verdi` script, you can use the following snippet:\n\n```python\nfrom aiida.plugins import DataFactory\n\nBasisSet = DataFactory('gaussian.basisset')\n\nbasis_He = BasisSet.get(element=\"He\", name=\"DZVP-MOLOPT-SR-GTH\")\n\n# the generic way using BasisSet.objects.find(...) works too, of course\n```\n\nNotes:\n\n* You don't have to specify the full name (`DZVP-MOLOPT-SR-GTH-q2`), the shorter name (`DZVP-MOLOPT-SR-GTH`) also works\n\n### Import and use Pseudopotential from CP2K\n\nTo import a specific pseudopotential from a file with pseudopotentials in CP2K's native format, simply use:\n\n```console\n$ verdi data gaussian.pseudo import --sym He data/GTH_POTENTIALS\nInfo: 4 Gaussian Pseudopotentials found:\n\n  Nr.  Sym    Names                                       Tags           Val. e\u207b (s, p, d)      Version\n-----  -----  ------------------------------------------  -------------  -------------------  ---------\n    1  He     GTH-BLYP-q2, GTH-BLYP                       GTH, BLYP, q2  2, 0, 0                      1\n    2  He     GTH-BP-q2, GTH-BP                           GTH, BP, q2    2, 0, 0                      1\n    3  He     GTH-PADE-q2, GTH-LDA-q2, GTH-PADE, GTH-LDA  GTH, PADE, q2  2, 0, 0                      1\n    4  He     GTH-PBE-q2, GTH-PBE                         GTH, PBE, q2   2, 0, 0                      1\n\nWhich Gaussian Pseudopotentials do you want to add? ('n' for none, 'a' for all, comma-seperated list or range of numbers): 4\nInfo: Adding Gaussian Pseudopotentials for: He (GTH-PBE-q2)... DONE\n\n$ verdi data gaussian.pseudo list\nInfo: 1 Gaussian Pseudopotential found:\n\nID                                    Sym    Names                                         Tags            Val. e\u207b (s, p, d)      Version\n------------------------------------  -----  --------------------------------------------  --------------  -------------------  ---------\n5838b0b7-336a-4b97-b76a-e5c42a4e98ac  He     GTH-PBE-q2, GTH-PBE                           GTH, PBE, q2    2, 0, 0                      1\n```\n\nNotes:\n\n* The command line argument `--sym He` is optional (leaving it away will simply show all available entries)\n* The plugin automatically filters already imported basis sets\n\nTo reference this in a `verdi` script, you can use the following snippet:\n\n```python\nfrom aiida.plugins import DataFactory\n\nPseudopotential = DataFactory('gaussian.pseudo')\n\npseudo_He = Pseudopotential.get(element=\"He\", name=\"GTH-PBE\")\n\n# the generic way using Pseudopotential.objects.find(...) works too, of course\n```\n\nNotes:\n\n* You don't have to specify the full name (`GTH-PBE-q2`), the shorter name (`GTH-PBE`) also works\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dev-zero/aiida-gaussian-datatypes", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "aiida-gaussian-datatypes", "package_url": "https://pypi.org/project/aiida-gaussian-datatypes/", "platform": "", "project_url": "https://pypi.org/project/aiida-gaussian-datatypes/", "project_urls": {"Homepage": "https://github.com/dev-zero/aiida-gaussian-datatypes"}, "release_url": "https://pypi.org/project/aiida-gaussian-datatypes/0.3.0/", "requires_dist": ["voluptuous (>=0.11.7)", "aiida-core (>=1.0.0b6)", "sphinx (<2.2.0,>=2.1.0) ; extra == 'docs'", "sphinx-click (>=2.2.0) ; extra == 'docs'", "pre-commit (>=1.18.3) ; extra == 'pre-commit'", "pytest (>=5.1.2) ; extra == 'testing'", "pytest-cov (>=2.7.1) ; extra == 'testing'", "codecov (>=2.0.15) ; extra == 'testing'", "pgtest (>=1.2.0) ; extra == 'testing'"], "requires_python": "", "summary": "AiiDA data plugin to manage gaussian datatypes (basis sets and pseudopotentials) as first-class citizens", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AiiDA Gaussian Data Plugin</h1>\n<p><a href=\"https://travis-ci.com/dev-zero/aiida-gaussian-datatypes\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12d61d4c00045ac8858ffbccb311b36fe6e7b00f/68747470733a2f2f7472617669732d63692e636f6d2f6465762d7a65726f2f61696964612d676175737369616e2d6461746174797065732e7376673f6272616e63683d646576656c6f70\"></a> <a href=\"https://codecov.io/gh/dev-zero/aiida-gaussian-datatypes\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a0842ee7ccecada2b0c735a94cf22189d37789b/68747470733a2f2f636f6465636f762e696f2f67682f6465762d7a65726f2f61696964612d676175737369616e2d6461746174797065732f6272616e63682f646576656c6f702f67726170682f62616467652e737667\"></a> <a href=\"https://pypi.org/project/aiida-gaussian-datatypes/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77d37c7079a31914f9a3b3d28dc9d9ceb0c474af/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f61696964612d676175737369616e2d646174617479706573\"></a></p>\n<p>Plugin to handle GTO-based basis sets and pseudopotentials and manage them as first-class citizens in AiiDA.</p>\n<h2>Commandline usage</h2>\n<p>After the installation, you will get new commands in <code>verdi data</code></p>\n<pre><span class=\"gp\">$</span> verdi data\n<span class=\"go\">Usage: verdi data [OPTIONS] COMMAND [ARGS]...</span>\n\n<span class=\"go\">  Inspect, create and manage data nodes.</span>\n\n<span class=\"go\">Options:</span>\n<span class=\"go\">  -h, --help  Show this message and exit.</span>\n\n<span class=\"go\">Commands:</span>\n<span class=\"go\">  array              Manipulate ArrayData objects.</span>\n<span class=\"go\">  bands              Manipulate BandsData objects.</span>\n<span class=\"go\">  cif                Manipulation of CIF data objects.</span>\n<span class=\"go\">  parameter          View and manipulate Dict objects.</span>\n<span class=\"go\">  plugins            Print a list of registered data plugins or details of</span>\n<span class=\"go\">                     a...</span>\n<span class=\"go\">  remote             Managing RemoteData objects.</span>\n<span class=\"go\">  structure          Manipulation of StructureData objects.</span>\n<span class=\"go\">  trajectory         View and manipulate TrajectoryData instances.</span>\n<span class=\"go\">  upf                Manipulation of the upf families.</span>\n<span class=\"go\">  gaussian.basisset  Manage basis sets for GTO-based codes</span>\n<span class=\"go\">  gaussian.pseudo    Manage Pseudopotentials for GTO-based codes</span>\n\n<span class=\"gp\">$</span> verdi data gaussian.basisset\n<span class=\"go\">Usage: verdi data gaussian.basisset [OPTIONS] COMMAND [ARGS]...</span>\n\n<span class=\"go\">  Manage basis sets for GTO-based codes</span>\n\n<span class=\"go\">Options:</span>\n<span class=\"go\">  -h, --help  Show this message and exit.</span>\n\n<span class=\"go\">Commands:</span>\n<span class=\"go\">  dump    Print specified Basis Sets</span>\n<span class=\"go\">  import  Add a basis sets from a file to the database</span>\n<span class=\"go\">  list    List Gaussian Basis Sets</span>\n\n<span class=\"gp\">$</span> verdi data gaussian.pseudo\n<span class=\"go\">Usage: verdi data gaussian.pseudo [OPTIONS] COMMAND [ARGS]...</span>\n\n<span class=\"go\">  Manage Pseudopotentials for GTO-based codes</span>\n\n<span class=\"go\">Options:</span>\n<span class=\"go\">  -h, --help  Show this message and exit.</span>\n\n<span class=\"go\">Commands:</span>\n<span class=\"go\">  dump    Print specified Pseudopotential</span>\n<span class=\"go\">  import  Add a pseudopotential from a file to the database</span>\n<span class=\"go\">  list    List Gaussian Pseudopotentials</span>\n</pre>\n<h2>Examples</h2>\n<h3>Import and use Basis Set from CP2K</h3>\n<p>To import a specific basis set from a file with basis sets in CP2K's native format, simply use:</p>\n<pre><span class=\"gp\">$</span> verdi data gaussian.basisset import --sym He data/BASIS_MOLOPT\n<span class=\"go\">Info: 2 Gaussian Basis Sets found:</span>\n\n<span class=\"go\">  Nr.  Sym    Names                                      Tags                         # Val. e\u207b    Version</span>\n<span class=\"go\">-----  -----  -----------------------------------------  -------------------------  -----------  ---------</span>\n<span class=\"go\">    1  He     SZV-MOLOPT-SR-GTH-q2, SZV-MOLOPT-SR-GTH    SZV, MOLOPT, SR, GTH, q2             2          1</span>\n<span class=\"go\">    2  He     DZVP-MOLOPT-SR-GTH-q2, DZVP-MOLOPT-SR-GTH  DZVP, MOLOPT, SR, GTH, q2            2          1</span>\n\n<span class=\"go\">Which Gaussian Basis Set do you want to add? ('n' for none, 'a' for all, comma-seperated list or range of numbers): 2</span>\n<span class=\"go\">Info: Adding Gaussian Basis Set for: He (DZVP-MOLOPT-SR-GTH-q2)... DONE</span>\n\n<span class=\"gp\">$</span> verdi data gaussian.basisset list\n<span class=\"go\">Info: 1 Gaussian Basis Sets found:</span>\n\n<span class=\"go\">ID                                    Sym    Names                                      Tags                       # Val. e\u207b      Version</span>\n<span class=\"go\">------------------------------------  -----  -----------------------------------------  -------------------------  -----------  ---------</span>\n<span class=\"go\">4a173d43-b022-4e1e-aca9-c4db51da223b  He     DZVP-MOLOPT-SR-GTH-q2, DZVP-MOLOPT-SR-GTH  DZVP, MOLOPT, SR, GTH, q2  2                    1</span>\n</pre>\n<p>Notes:</p>\n<ul>\n<li>The command line argument <code>--sym He</code> is optional (leaving it away will simply show all available entries)</li>\n<li>The plugin automatically filters already imported basis sets</li>\n</ul>\n<p>To reference this in a <code>verdi</code> script, you can use the following snippet:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiida.plugins</span> <span class=\"kn\">import</span> <span class=\"n\">DataFactory</span>\n\n<span class=\"n\">BasisSet</span> <span class=\"o\">=</span> <span class=\"n\">DataFactory</span><span class=\"p\">(</span><span class=\"s1\">'gaussian.basisset'</span><span class=\"p\">)</span>\n\n<span class=\"n\">basis_He</span> <span class=\"o\">=</span> <span class=\"n\">BasisSet</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"o\">=</span><span class=\"s2\">\"He\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"DZVP-MOLOPT-SR-GTH\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># the generic way using BasisSet.objects.find(...) works too, of course</span>\n</pre>\n<p>Notes:</p>\n<ul>\n<li>You don't have to specify the full name (<code>DZVP-MOLOPT-SR-GTH-q2</code>), the shorter name (<code>DZVP-MOLOPT-SR-GTH</code>) also works</li>\n</ul>\n<h3>Import and use Pseudopotential from CP2K</h3>\n<p>To import a specific pseudopotential from a file with pseudopotentials in CP2K's native format, simply use:</p>\n<pre><span class=\"gp\">$</span> verdi data gaussian.pseudo import --sym He data/GTH_POTENTIALS\n<span class=\"go\">Info: 4 Gaussian Pseudopotentials found:</span>\n\n<span class=\"go\">  Nr.  Sym    Names                                       Tags           Val. e\u207b (s, p, d)      Version</span>\n<span class=\"go\">-----  -----  ------------------------------------------  -------------  -------------------  ---------</span>\n<span class=\"go\">    1  He     GTH-BLYP-q2, GTH-BLYP                       GTH, BLYP, q2  2, 0, 0                      1</span>\n<span class=\"go\">    2  He     GTH-BP-q2, GTH-BP                           GTH, BP, q2    2, 0, 0                      1</span>\n<span class=\"go\">    3  He     GTH-PADE-q2, GTH-LDA-q2, GTH-PADE, GTH-LDA  GTH, PADE, q2  2, 0, 0                      1</span>\n<span class=\"go\">    4  He     GTH-PBE-q2, GTH-PBE                         GTH, PBE, q2   2, 0, 0                      1</span>\n\n<span class=\"go\">Which Gaussian Pseudopotentials do you want to add? ('n' for none, 'a' for all, comma-seperated list or range of numbers): 4</span>\n<span class=\"go\">Info: Adding Gaussian Pseudopotentials for: He (GTH-PBE-q2)... DONE</span>\n\n<span class=\"gp\">$</span> verdi data gaussian.pseudo list\n<span class=\"go\">Info: 1 Gaussian Pseudopotential found:</span>\n\n<span class=\"go\">ID                                    Sym    Names                                         Tags            Val. e\u207b (s, p, d)      Version</span>\n<span class=\"go\">------------------------------------  -----  --------------------------------------------  --------------  -------------------  ---------</span>\n<span class=\"go\">5838b0b7-336a-4b97-b76a-e5c42a4e98ac  He     GTH-PBE-q2, GTH-PBE                           GTH, PBE, q2    2, 0, 0                      1</span>\n</pre>\n<p>Notes:</p>\n<ul>\n<li>The command line argument <code>--sym He</code> is optional (leaving it away will simply show all available entries)</li>\n<li>The plugin automatically filters already imported basis sets</li>\n</ul>\n<p>To reference this in a <code>verdi</code> script, you can use the following snippet:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiida.plugins</span> <span class=\"kn\">import</span> <span class=\"n\">DataFactory</span>\n\n<span class=\"n\">Pseudopotential</span> <span class=\"o\">=</span> <span class=\"n\">DataFactory</span><span class=\"p\">(</span><span class=\"s1\">'gaussian.pseudo'</span><span class=\"p\">)</span>\n\n<span class=\"n\">pseudo_He</span> <span class=\"o\">=</span> <span class=\"n\">Pseudopotential</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"o\">=</span><span class=\"s2\">\"He\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"GTH-PBE\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># the generic way using Pseudopotential.objects.find(...) works too, of course</span>\n</pre>\n<p>Notes:</p>\n<ul>\n<li>You don't have to specify the full name (<code>GTH-PBE-q2</code>), the shorter name (<code>GTH-PBE</code>) also works</li>\n</ul>\n\n          </div>"}, "last_serial": 5825007, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "9ee79584122430a45153f8f14074c350", "sha256": "95aad4574990d65c7033d15d3aec6e0077614030b006412774a5b03f4cbc840e"}, "downloads": -1, "filename": "aiida_gaussian_datatypes-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9ee79584122430a45153f8f14074c350", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23864, "upload_time": "2019-05-06T14:24:05", "upload_time_iso_8601": "2019-05-06T14:24:05.802077Z", "url": "https://files.pythonhosted.org/packages/59/1e/0ebb287290009888ac75cfd48388be91a6ddb7c10242473fbcd2c9bf02fb/aiida_gaussian_datatypes-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9b84217b163418f202cecd4c951ac81", "sha256": "3f9dcc2b96a67702d098b03261af24e1dd600f11f355f132deacc682ec9a9449"}, "downloads": -1, "filename": "aiida-gaussian-datatypes-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c9b84217b163418f202cecd4c951ac81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13377, "upload_time": "2019-05-06T14:24:07", "upload_time_iso_8601": "2019-05-06T14:24:07.984194Z", "url": "https://files.pythonhosted.org/packages/d0/12/8341eb7b135f0074a6fe8b61d63e9d19e078c55fd63621644e35d799ddf1/aiida-gaussian-datatypes-0.2.0.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "455445d51a61d8358080d33c85d4ce61", "sha256": "92f2c4cb488c0783b3a5bad99cfe867b1a307795cdd135991bab99d6634c70e7"}, "downloads": -1, "filename": "aiida_gaussian_datatypes-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "455445d51a61d8358080d33c85d4ce61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25315, "upload_time": "2019-05-06T15:02:45", "upload_time_iso_8601": "2019-05-06T15:02:45.253463Z", "url": "https://files.pythonhosted.org/packages/43/4d/6302173dd6af9c329dc2470dbaac52fc1ffce3f56c89c3b9147fb2af1bc2/aiida_gaussian_datatypes-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2ea3756f60e36187f013dbaa505528c", "sha256": "e429664bb708f5a4b99f0fd674924f4cdc8ca3760b48f17925dce7bdfef9189a"}, "downloads": -1, "filename": "aiida-gaussian-datatypes-0.2.2.tar.gz", "has_sig": false, "md5_digest": "f2ea3756f60e36187f013dbaa505528c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14032, "upload_time": "2019-05-06T15:02:46", "upload_time_iso_8601": "2019-05-06T15:02:46.477338Z", "url": "https://files.pythonhosted.org/packages/f7/f4/0711db046cc2b25631bdd3dd68b6fed3bf16a71a59f59eaf9c60c1196a5f/aiida-gaussian-datatypes-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "caacd5fb320113fddc392e3508e9ce43", "sha256": "fa48d19226f9b1cc7a5c1bf80ee94bdde1ab44734d6980adb8c62f35c170a803"}, "downloads": -1, "filename": "aiida_gaussian_datatypes-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "caacd5fb320113fddc392e3508e9ce43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21628, "upload_time": "2019-09-12T14:57:27", "upload_time_iso_8601": "2019-09-12T14:57:27.145506Z", "url": "https://files.pythonhosted.org/packages/5a/e2/c15dcdf7ae4da638b834d5052d6c8d61c781f209dc717997007fe5542b83/aiida_gaussian_datatypes-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87b47751e5be5c60f4bcc8486eb0eb33", "sha256": "a4807a05c6237c240993ae936922fa0c782138d34b901168d5578aa96d28a2ad"}, "downloads": -1, "filename": "aiida-gaussian-datatypes-0.2.3.tar.gz", "has_sig": false, "md5_digest": "87b47751e5be5c60f4bcc8486eb0eb33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15497, "upload_time": "2019-09-12T14:57:28", "upload_time_iso_8601": "2019-09-12T14:57:28.704465Z", "url": "https://files.pythonhosted.org/packages/0d/2f/b101aba01c85b0982cebc346527a143082c774f020c354ca571dc8ce998c/aiida-gaussian-datatypes-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a34cdaca62cdff8f7ea71b7e6751cb16", "sha256": "6736aacd1785c69b94c48f8f6d06359b64268e972ea9d05462cfad781b3e8c60"}, "downloads": -1, "filename": "aiida_gaussian_datatypes-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a34cdaca62cdff8f7ea71b7e6751cb16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24769, "upload_time": "2019-09-13T11:01:09", "upload_time_iso_8601": "2019-09-13T11:01:09.997752Z", "url": "https://files.pythonhosted.org/packages/37/63/329cd57393f34122b1664dd38fb7ad0dee3281a3fdf7887edfeafa375b92/aiida_gaussian_datatypes-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdc4edefcfba134a7024ff95da97afb2", "sha256": "ddc514896963abdd3aa35e3a1e06df2af7375ab1c8c7cbc8ecabd602de08e277"}, "downloads": -1, "filename": "aiida-gaussian-datatypes-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cdc4edefcfba134a7024ff95da97afb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15609, "upload_time": "2019-09-13T11:01:11", "upload_time_iso_8601": "2019-09-13T11:01:11.437943Z", "url": "https://files.pythonhosted.org/packages/f9/bc/f73be3cf077f8ede49403934fe31084db0096cc5f371a8a909bf054f5a5b/aiida-gaussian-datatypes-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a34cdaca62cdff8f7ea71b7e6751cb16", "sha256": "6736aacd1785c69b94c48f8f6d06359b64268e972ea9d05462cfad781b3e8c60"}, "downloads": -1, "filename": "aiida_gaussian_datatypes-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a34cdaca62cdff8f7ea71b7e6751cb16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24769, "upload_time": "2019-09-13T11:01:09", "upload_time_iso_8601": "2019-09-13T11:01:09.997752Z", "url": "https://files.pythonhosted.org/packages/37/63/329cd57393f34122b1664dd38fb7ad0dee3281a3fdf7887edfeafa375b92/aiida_gaussian_datatypes-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdc4edefcfba134a7024ff95da97afb2", "sha256": "ddc514896963abdd3aa35e3a1e06df2af7375ab1c8c7cbc8ecabd602de08e277"}, "downloads": -1, "filename": "aiida-gaussian-datatypes-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cdc4edefcfba134a7024ff95da97afb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15609, "upload_time": "2019-09-13T11:01:11", "upload_time_iso_8601": "2019-09-13T11:01:11.437943Z", "url": "https://files.pythonhosted.org/packages/f9/bc/f73be3cf077f8ede49403934fe31084db0096cc5f371a8a909bf054f5a5b/aiida-gaussian-datatypes-0.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:01 2020"}