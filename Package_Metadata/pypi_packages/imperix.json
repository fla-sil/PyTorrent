{"info": {"author": "Aptus Engineering Inc.", "author_email": "software@aptusai.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Imperix Node SDK - Python\n\n## Overview\n\n**Imperix** is a new fleet control *philosophy*, not just a *ground control program*. **Imperix** connects an entire fleet to the internet using secured and encrypted communication protocols, and provides a command center interface to all units on the fleet.\n\nThe **Imperix Node SDK** is a set of open-source *Software Developer Kits* in common programming languages allowing users to connect and interface custom *autopilot* systems with the **Imperix Cloud**.\n\nThe core functionality of the **SDK** includes:\n* Authenticating node with the **Imperix Cloud**\n* Synchronizing mission state with the cloud\n* Streaming manual control commands from the cloud\n* Streaming telemetry, video, and data to the cloud\n\n\n## Installation\n\nAll dependencies for the **Imperix Node SDK** Python implementation are provided in the *requirements.txt* file. To install the dependencies, run the following command:\n\n```sh\npip3 install -r requirements.txt\n```\n\n\n## Setup\n\nThe SDK requires a *node configuration* file ***node.cfg*** to be placed in the program's root directory. The *node configuration* requires the following parameters:\n* Unique node identifier string provided upon node registration\n* Node authorization access key provided upon node registration\n* Imperix Commander API URL (standard)\n* Streamer/Stream Controller IP address/URL available in fleet manager\n\nThe ***node.cfg*** file may be downloaded from the Imperix Commander node configuration page.\n\n\n## Usage\n\nThe **Imperix Node SDK** is designed to authenticate the node and initialize communications in its own thread. Review detailed SDK documentation available on: https://docs.imperix.ai.\n\nTo use the SDK functions, import the SDK into your Python workspace/project using:\n\n```python\nimport asyncio\nfrom imperix import NodeLink\n```\n\n### Async/Await Operations\n\nThe NodeLink handlers and communication threads use the **asyncio** package's ***async/await*** calls for concurrent operations. In order to set this up correctly, an event loop must be created and handled.\n\nSee the example below for a main file definition:\n\n```python\n# Developed by Aptus Engineering, Inc. <https://aptus.aero>\n# See LICENSE.md file in project root directory\n\nimport asyncio\nfrom imperix import NodeLink\n\n\n# Set up callback functions\n# Called when mission is updated\nasync def missionUpdateCallback(mission):\n    print(mission)\n\n\n# Called with manual control command is received\nasync def manualControlCallback(control):\n    print(control)\n\n\n# Instantiate node link with callbacks\nnode = NodeLink(\n    missionUpdateCallback=missionUpdateCallback,\n    manualControlCallback=manualControlCallback\n)\n\n\nasync def main():\n\n    # Connect and authenticate\n    await node.connect()\n\n    # Main loop...\n    while True:\n        await asyncio.sleep(1)\n        print(\"hello\")\n\n\n# Start event loop\neventLoop = asyncio.get_event_loop()\n\ntry:\n    asyncio.ensure_future(main())               # Main thread\n    eventLoop.run_forever()\n\nexcept KeyboardInterrupt:\n    pass\n\nfinally:\n    eventLoop.close()\n\nasyncio.get_event_loop().run_until_complete(NodeLinkThread(node))\nasyncio.get_event_loop().run_forever()\n```\n\n\n### Initialization and Recieve Commands\n\nInitialize a communication stream with the **Imperix Cloud** using the following command:\n\n```python\nnode = NodeLink(\n    missionUpdateCallback=handleMissionUpdate,\n    manualControlCallback=handleManualControl\n)\n```\n\nWhere:\n* **handleMissionUpdate** is a callback/lambda function which accepts the updated mission as a dictionary.\n* **handleManualControl** is a callback/lambda function which accepts manual control command as a dictionary.\n\nTo connect to the ***Imperix Cloud***, use the following command:\n\n```\nawait node.connect(config='node.cfg')\n```\n\nWhere **config** is the path to the *node configuration* file.\n\n\n### Sending Mission Updates\n\nIn order to update mission parameters, call the function:\n```python\nawait node.updateMission(\n    activeWaypoint=wptIdx,\n    missionStatus=status\n)\n```\n\nWhere:\n* **wptIdx** is a dict key to the waypoint index the node is currently moving to/on.\n* **status** is a string defining the current mission status. It can be one of:\n    * **Standby** if the mission is loaded but not active\n    * **Active** if the node is performing the loaded mission.\n    * **Complete** if the node successfully finished the mission\n    * **Failed:[ERROR]** if the node failed the mission. **[ERROR]** must be replaced with the reason for mission failure \n\n\n### Streaming Data\n\nThree kinds of data streams are available to send to the **Imperix Cloud**. Users can send one of:\n* **Telemetry** - live data representing critical node status, such as location, velocities, attitude, etc.\n* **Video/Image** - live or pre-captured video/image feeds for live view on the **Imperix Commander** or for future analytics using **Imperix Intelligence**.\n* **Data** - any JSON-serializable data strings, such as sensor readings, messages etc.\n\nIn order to stream telemetry, construct a dictionary with keys indicating the following variables:\n\n* ATT_ROLL (degrees)\n* ATT_PITCH (degrees)\n* ATT_HEADING (degrees)\n* LOC_LATITUDE (degrees)\n* LOC_LONGITUDE (degrees)\n* LOC_ALTITUDE (meters)\n* VEL_GROUNDSPEED (meters per second)\n* VEL_AIRSPEED (meters per second)\n* VEL_VERTICAL_SPEED (meters per second)\n* VEL_ROLL_RATE (degrees per second)\n* VEL_PITCH_RATE (degrees per second)\n* VEL_YAW_RATE (degrees per second)\n* STS_BATTERY (percentage 0-100)\n* STS_SIGNAL (percentage 0-100)\n\nAnd call the function:\n\n```python\nawait node.transmitTelemetry(telemetry)\n```\n\nWhere **telemetry** is the dict with the above variables.\n\nIn order to stream image, either provide the image as a 1 or 3 channel numpy array to the function:\n\n```python\nawait node.transmitImage(\n    image,\n    timeStamp=timestamp,\n    feed=feed\n)\n```\n\nWhere:\n* **image** is the numpy image,\n* **timestamp** is a *datetime* object, or *None* to use current timestamp (live feed), and\n* **feed** is a string identifying the name of the video feed. Default is *PRIMARY*.\n\nA pre-compressed JPEG image binary (avaiable using OpenCV, or Pillow) can also be streamed by calling the function:\n\n```python\nawait node.transmitImageBinary(\n    image,\n    timeStamp=timestamp,\n    feed=feed\n)\n```\n\nWhere **image** is the pre-compressed JPEG image binary as a **bytes** object.\n\n\nTo stream an encoded MPEG(-4) video from a live camera, streaming can be started using the call:\n\n```python\nawait node.streamVideoFromSource(feed, source)\n```\n\nWhere **source** is a string representing the camera source ***(eg. /dev/video0)***.\n\nVideos can also be streamed from files by replacing the **source** argument with the file name, and by passing the **isFile** flag to the call:\n\n```python\nawait node.streamVideoFromSource(feed, source, isFile=True)\n```\n\n\nFinally, to stream data to the **Imperix Cloud**, the following function may be called:\n\n```python\nawait node.transmitData(data)\n```\n\nWhere **data** is a dictionary with JSON-serializable keys-value pairs.\n\n\n### Streaming Latency Feedback\n\nA mechanism is built to allow in optimizing video/image frame-rate and latency. Every second, an image/video feedback packet is sent back to the node, whose data can be used to adjust the stream quality accordingly. The following variables can be used to access framerate and latency.\n\n```python\nnode.imageFrameRate\nnode.imageLatency\n```\n\n\n### Ending Session\n\nIn order to close out of a session - to be used when disconnecting the node, performing updates, or shutting down the node, the following function may be called:\n\n```python\nawait node.disconnect()\n```\n\nShutting down the node, or exiting the program also automatically disconnects the node from the **Imperix Cloud**.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/pinetree-ai/imperix-node-sdk-python3", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "imperix", "package_url": "https://pypi.org/project/imperix/", "platform": "", "project_url": "https://pypi.org/project/imperix/", "project_urls": {"Homepage": "https://bitbucket.org/pinetree-ai/imperix-node-sdk-python3"}, "release_url": "https://pypi.org/project/imperix/0.2.5/", "requires_dist": ["Pillow", "asyncio", "numpy", "requests", "websockets"], "requires_python": ">=3.6", "summary": "Imperix Node SDK including the NodeLink communication handlers that allow robots and drones to communicate with the Imperix streamers and Commander API.", "version": "0.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Imperix Node SDK - Python</h1>\n<h2>Overview</h2>\n<p><strong>Imperix</strong> is a new fleet control <em>philosophy</em>, not just a <em>ground control program</em>. <strong>Imperix</strong> connects an entire fleet to the internet using secured and encrypted communication protocols, and provides a command center interface to all units on the fleet.</p>\n<p>The <strong>Imperix Node SDK</strong> is a set of open-source <em>Software Developer Kits</em> in common programming languages allowing users to connect and interface custom <em>autopilot</em> systems with the <strong>Imperix Cloud</strong>.</p>\n<p>The core functionality of the <strong>SDK</strong> includes:</p>\n<ul>\n<li>Authenticating node with the <strong>Imperix Cloud</strong></li>\n<li>Synchronizing mission state with the cloud</li>\n<li>Streaming manual control commands from the cloud</li>\n<li>Streaming telemetry, video, and data to the cloud</li>\n</ul>\n<h2>Installation</h2>\n<p>All dependencies for the <strong>Imperix Node SDK</strong> Python implementation are provided in the <em>requirements.txt</em> file. To install the dependencies, run the following command:</p>\n<pre>pip3 install -r requirements.txt\n</pre>\n<h2>Setup</h2>\n<p>The SDK requires a <em>node configuration</em> file <em><strong>node.cfg</strong></em> to be placed in the program's root directory. The <em>node configuration</em> requires the following parameters:</p>\n<ul>\n<li>Unique node identifier string provided upon node registration</li>\n<li>Node authorization access key provided upon node registration</li>\n<li>Imperix Commander API URL (standard)</li>\n<li>Streamer/Stream Controller IP address/URL available in fleet manager</li>\n</ul>\n<p>The <em><strong>node.cfg</strong></em> file may be downloaded from the Imperix Commander node configuration page.</p>\n<h2>Usage</h2>\n<p>The <strong>Imperix Node SDK</strong> is designed to authenticate the node and initialize communications in its own thread. Review detailed SDK documentation available on: <a href=\"https://docs.imperix.ai\" rel=\"nofollow\">https://docs.imperix.ai</a>.</p>\n<p>To use the SDK functions, import the SDK into your Python workspace/project using:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">imperix</span> <span class=\"kn\">import</span> <span class=\"n\">NodeLink</span>\n</pre>\n<h3>Async/Await Operations</h3>\n<p>The NodeLink handlers and communication threads use the <strong>asyncio</strong> package's <em><strong>async/await</strong></em> calls for concurrent operations. In order to set this up correctly, an event loop must be created and handled.</p>\n<p>See the example below for a main file definition:</p>\n<pre><span class=\"c1\"># Developed by Aptus Engineering, Inc. &lt;https://aptus.aero&gt;</span>\n<span class=\"c1\"># See LICENSE.md file in project root directory</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">imperix</span> <span class=\"kn\">import</span> <span class=\"n\">NodeLink</span>\n\n\n<span class=\"c1\"># Set up callback functions</span>\n<span class=\"c1\"># Called when mission is updated</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">missionUpdateCallback</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Called with manual control command is received</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">manualControlCallback</span><span class=\"p\">(</span><span class=\"n\">control</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">control</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Instantiate node link with callbacks</span>\n<span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">NodeLink</span><span class=\"p\">(</span>\n    <span class=\"n\">missionUpdateCallback</span><span class=\"o\">=</span><span class=\"n\">missionUpdateCallback</span><span class=\"p\">,</span>\n    <span class=\"n\">manualControlCallback</span><span class=\"o\">=</span><span class=\"n\">manualControlCallback</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># Connect and authenticate</span>\n    <span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Main loop...</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Start event loop</span>\n<span class=\"n\">eventLoop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ensure_future</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>               <span class=\"c1\"># Main thread</span>\n    <span class=\"n\">eventLoop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n\n<span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">eventLoop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">NodeLinkThread</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">))</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n<h3>Initialization and Recieve Commands</h3>\n<p>Initialize a communication stream with the <strong>Imperix Cloud</strong> using the following command:</p>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">NodeLink</span><span class=\"p\">(</span>\n    <span class=\"n\">missionUpdateCallback</span><span class=\"o\">=</span><span class=\"n\">handleMissionUpdate</span><span class=\"p\">,</span>\n    <span class=\"n\">manualControlCallback</span><span class=\"o\">=</span><span class=\"n\">handleManualControl</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Where:</p>\n<ul>\n<li><strong>handleMissionUpdate</strong> is a callback/lambda function which accepts the updated mission as a dictionary.</li>\n<li><strong>handleManualControl</strong> is a callback/lambda function which accepts manual control command as a dictionary.</li>\n</ul>\n<p>To connect to the <em><strong>Imperix Cloud</strong></em>, use the following command:</p>\n<pre><code>await node.connect(config='node.cfg')\n</code></pre>\n<p>Where <strong>config</strong> is the path to the <em>node configuration</em> file.</p>\n<h3>Sending Mission Updates</h3>\n<p>In order to update mission parameters, call the function:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">updateMission</span><span class=\"p\">(</span>\n    <span class=\"n\">activeWaypoint</span><span class=\"o\">=</span><span class=\"n\">wptIdx</span><span class=\"p\">,</span>\n    <span class=\"n\">missionStatus</span><span class=\"o\">=</span><span class=\"n\">status</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Where:</p>\n<ul>\n<li><strong>wptIdx</strong> is a dict key to the waypoint index the node is currently moving to/on.</li>\n<li><strong>status</strong> is a string defining the current mission status. It can be one of:\n<ul>\n<li><strong>Standby</strong> if the mission is loaded but not active</li>\n<li><strong>Active</strong> if the node is performing the loaded mission.</li>\n<li><strong>Complete</strong> if the node successfully finished the mission</li>\n<li><strong>Failed:[ERROR]</strong> if the node failed the mission. <strong>[ERROR]</strong> must be replaced with the reason for mission failure</li>\n</ul>\n</li>\n</ul>\n<h3>Streaming Data</h3>\n<p>Three kinds of data streams are available to send to the <strong>Imperix Cloud</strong>. Users can send one of:</p>\n<ul>\n<li><strong>Telemetry</strong> - live data representing critical node status, such as location, velocities, attitude, etc.</li>\n<li><strong>Video/Image</strong> - live or pre-captured video/image feeds for live view on the <strong>Imperix Commander</strong> or for future analytics using <strong>Imperix Intelligence</strong>.</li>\n<li><strong>Data</strong> - any JSON-serializable data strings, such as sensor readings, messages etc.</li>\n</ul>\n<p>In order to stream telemetry, construct a dictionary with keys indicating the following variables:</p>\n<ul>\n<li>ATT_ROLL (degrees)</li>\n<li>ATT_PITCH (degrees)</li>\n<li>ATT_HEADING (degrees)</li>\n<li>LOC_LATITUDE (degrees)</li>\n<li>LOC_LONGITUDE (degrees)</li>\n<li>LOC_ALTITUDE (meters)</li>\n<li>VEL_GROUNDSPEED (meters per second)</li>\n<li>VEL_AIRSPEED (meters per second)</li>\n<li>VEL_VERTICAL_SPEED (meters per second)</li>\n<li>VEL_ROLL_RATE (degrees per second)</li>\n<li>VEL_PITCH_RATE (degrees per second)</li>\n<li>VEL_YAW_RATE (degrees per second)</li>\n<li>STS_BATTERY (percentage 0-100)</li>\n<li>STS_SIGNAL (percentage 0-100)</li>\n</ul>\n<p>And call the function:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">transmitTelemetry</span><span class=\"p\">(</span><span class=\"n\">telemetry</span><span class=\"p\">)</span>\n</pre>\n<p>Where <strong>telemetry</strong> is the dict with the above variables.</p>\n<p>In order to stream image, either provide the image as a 1 or 3 channel numpy array to the function:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">transmitImage</span><span class=\"p\">(</span>\n    <span class=\"n\">image</span><span class=\"p\">,</span>\n    <span class=\"n\">timeStamp</span><span class=\"o\">=</span><span class=\"n\">timestamp</span><span class=\"p\">,</span>\n    <span class=\"n\">feed</span><span class=\"o\">=</span><span class=\"n\">feed</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Where:</p>\n<ul>\n<li><strong>image</strong> is the numpy image,</li>\n<li><strong>timestamp</strong> is a <em>datetime</em> object, or <em>None</em> to use current timestamp (live feed), and</li>\n<li><strong>feed</strong> is a string identifying the name of the video feed. Default is <em>PRIMARY</em>.</li>\n</ul>\n<p>A pre-compressed JPEG image binary (avaiable using OpenCV, or Pillow) can also be streamed by calling the function:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">transmitImageBinary</span><span class=\"p\">(</span>\n    <span class=\"n\">image</span><span class=\"p\">,</span>\n    <span class=\"n\">timeStamp</span><span class=\"o\">=</span><span class=\"n\">timestamp</span><span class=\"p\">,</span>\n    <span class=\"n\">feed</span><span class=\"o\">=</span><span class=\"n\">feed</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Where <strong>image</strong> is the pre-compressed JPEG image binary as a <strong>bytes</strong> object.</p>\n<p>To stream an encoded MPEG(-4) video from a live camera, streaming can be started using the call:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">streamVideoFromSource</span><span class=\"p\">(</span><span class=\"n\">feed</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">)</span>\n</pre>\n<p>Where <strong>source</strong> is a string representing the camera source ***(eg. /dev/video0)***.</p>\n<p>Videos can also be streamed from files by replacing the <strong>source</strong> argument with the file name, and by passing the <strong>isFile</strong> flag to the call:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">streamVideoFromSource</span><span class=\"p\">(</span><span class=\"n\">feed</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">isFile</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, to stream data to the <strong>Imperix Cloud</strong>, the following function may be called:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">transmitData</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>Where <strong>data</strong> is a dictionary with JSON-serializable keys-value pairs.</p>\n<h3>Streaming Latency Feedback</h3>\n<p>A mechanism is built to allow in optimizing video/image frame-rate and latency. Every second, an image/video feedback packet is sent back to the node, whose data can be used to adjust the stream quality accordingly. The following variables can be used to access framerate and latency.</p>\n<pre><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">imageFrameRate</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">imageLatency</span>\n</pre>\n<h3>Ending Session</h3>\n<p>In order to close out of a session - to be used when disconnecting the node, performing updates, or shutting down the node, the following function may be called:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n<p>Shutting down the node, or exiting the program also automatically disconnects the node from the <strong>Imperix Cloud</strong>.</p>\n\n          </div>"}, "last_serial": 6796543, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "48fb7d4b6d29a52473d09d91c272c991", "sha256": "7c2eca0f9b3d6d9cb633e682ac7a3c3b5b3bb729bb8072acd77572b3244176a6"}, "downloads": -1, "filename": "imperix-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "48fb7d4b6d29a52473d09d91c272c991", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15467, "upload_time": "2020-02-18T00:11:19", "upload_time_iso_8601": "2020-02-18T00:11:19.206071Z", "url": "https://files.pythonhosted.org/packages/e2/ee/7f8571902483e56846ca2f29dd8fa04663063b8b89c5cb6f48ba94ff725f/imperix-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b72ad24d8b119ae30104bca5d3920691", "sha256": "15354391e308efd879fc3906f26ab08fd5bffb264e4e76cb5a9e589c45346955"}, "downloads": -1, "filename": "imperix-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b72ad24d8b119ae30104bca5d3920691", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9951, "upload_time": "2020-02-18T00:11:20", "upload_time_iso_8601": "2020-02-18T00:11:20.562367Z", "url": "https://files.pythonhosted.org/packages/fa/d8/3a2f9d7f7130fb3967be060115f7a18ad4b903df4050a9cca9ca211e70c0/imperix-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "373d097159a2478a12ac17cc1a5b66b7", "sha256": "a12458bf7eb33134e442ae952983f9adb7d6cdd9d214c41486e62bacf9462860"}, "downloads": -1, "filename": "imperix-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "373d097159a2478a12ac17cc1a5b66b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16755, "upload_time": "2020-02-20T00:26:17", "upload_time_iso_8601": "2020-02-20T00:26:17.664435Z", "url": "https://files.pythonhosted.org/packages/ac/9f/b7a4f5c75f59d9e0e7c2ccbf6808086d06cd2d0de7383919c547403243c2/imperix-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "236af00ae22e622819e8daf2737a4ba1", "sha256": "7fc5ae260870011f61423b8099f6828b37aaf208cdb3e258661af391b89a0a53"}, "downloads": -1, "filename": "imperix-0.1.5.tar.gz", "has_sig": false, "md5_digest": "236af00ae22e622819e8daf2737a4ba1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9825, "upload_time": "2020-02-20T00:26:19", "upload_time_iso_8601": "2020-02-20T00:26:19.281334Z", "url": "https://files.pythonhosted.org/packages/c5/1e/3144bd6fbde57e5a08c238bd92e1ad2b232447813eb76f70ceaa4b17969d/imperix-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "348490b409bf1ce573d54e23a6a7401e", "sha256": "5bd4bac358b45f5c01c9059b5e62ddd4b57b418212843fac6653825c57513045"}, "downloads": -1, "filename": "imperix-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "348490b409bf1ce573d54e23a6a7401e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15887, "upload_time": "2020-02-23T02:18:39", "upload_time_iso_8601": "2020-02-23T02:18:39.820405Z", "url": "https://files.pythonhosted.org/packages/b5/da/540e7b013f70a4bb79b72cbeccd430a7b2e3dc033845e9da86345dccb3ee/imperix-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "add6864df107327fc63497dad3678fea", "sha256": "6948d46ef6dd6f70900c08dfde887ccda5f91b5a7e6c7918f8dec0402d881c04"}, "downloads": -1, "filename": "imperix-0.1.6.tar.gz", "has_sig": false, "md5_digest": "add6864df107327fc63497dad3678fea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12478, "upload_time": "2020-02-23T02:18:41", "upload_time_iso_8601": "2020-02-23T02:18:41.300278Z", "url": "https://files.pythonhosted.org/packages/63/44/529013f09fbcbba571836660bead112250bffe0796eafe4f716c09f4a335/imperix-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "24d7bf7114cbed44adf36893cd21fb4f", "sha256": "78cae21508af40279f2da85a03ff235f86ec151d52501410a3188c910d8a58fb"}, "downloads": -1, "filename": "imperix-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "24d7bf7114cbed44adf36893cd21fb4f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18311, "upload_time": "2020-02-25T21:55:36", "upload_time_iso_8601": "2020-02-25T21:55:36.637109Z", "url": "https://files.pythonhosted.org/packages/22/98/625d247f731c4b47dbc1b41980106854f5bb38363b99567a6a58f29e0f6b/imperix-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54a3d9603a72e09fd28ce0ff8ae1714b", "sha256": "87da7d59469c86acf04cc885e27b4d3ae3004d4c3e5e7452735549df1d6f15e8"}, "downloads": -1, "filename": "imperix-0.1.7.tar.gz", "has_sig": false, "md5_digest": "54a3d9603a72e09fd28ce0ff8ae1714b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15111, "upload_time": "2020-02-25T21:55:40", "upload_time_iso_8601": "2020-02-25T21:55:40.996207Z", "url": "https://files.pythonhosted.org/packages/55/6b/5dbf7e937aa76e82f8aebaa275f4bfb561de33dbec377dc1b206a6186bf2/imperix-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "e664256d66d110b4b8ab9de52f4ee639", "sha256": "88a48432b9b35c2da7015610a41684665103dbbadd0feedad7d2dedf209310e1"}, "downloads": -1, "filename": "imperix-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "e664256d66d110b4b8ab9de52f4ee639", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18632, "upload_time": "2020-02-27T20:55:57", "upload_time_iso_8601": "2020-02-27T20:55:57.313032Z", "url": "https://files.pythonhosted.org/packages/91/fc/362e420bee1c00b448984762875ee3b1bd84c54f366f9773b842a859513b/imperix-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86972c416cc19256a5e1f515f38dfd43", "sha256": "f21dedfff7be2ee7b6993d728718887a26c872d0f21e4bd509fa40dcdc83fbc5"}, "downloads": -1, "filename": "imperix-0.1.8.tar.gz", "has_sig": false, "md5_digest": "86972c416cc19256a5e1f515f38dfd43", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15460, "upload_time": "2020-02-27T20:55:59", "upload_time_iso_8601": "2020-02-27T20:55:59.116742Z", "url": "https://files.pythonhosted.org/packages/a0/38/366e4ed0b9922b41e7e97617cf3909a9f2ad45f91328c8d20ae66bdc32c3/imperix-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "f35bd1efab80a26c2c3e6bd301eeaa72", "sha256": "946f7be539e35fb14c7d76bc6dfd0680bb7fcd5c540fd40267b124438c06eb17"}, "downloads": -1, "filename": "imperix-0.1.9.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "f35bd1efab80a26c2c3e6bd301eeaa72", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23003, "upload_time": "2020-02-27T21:15:00", "upload_time_iso_8601": "2020-02-27T21:15:00.218103Z", "url": "https://files.pythonhosted.org/packages/5d/00/f37e2d08d2faec2c0497754c90fe9af70bede3ba2b4d71176e20a50aa565/imperix-0.1.9.linux-x86_64.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "44072c09cbedf98ecce8d5657401bde3", "sha256": "f4dd5e86ed60bca0e4a0d106cd4f42270708e89d605966b96417e5c582d7b225"}, "downloads": -1, "filename": "imperix-0.2.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "44072c09cbedf98ecce8d5657401bde3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23082, "upload_time": "2020-02-27T21:17:48", "upload_time_iso_8601": "2020-02-27T21:17:48.478185Z", "url": "https://files.pythonhosted.org/packages/c1/da/60f4e0d9f1411bdb5c607806ee2caff40cf7fc037b24914891be128ab1ed/imperix-0.2.0.linux-x86_64.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b7ba497763e93af97c2b9c6054c0e607", "sha256": "4d427831022ed1d4678ad077cbc4136e701262be3bc8e2a2cac2788c2b884d8c"}, "downloads": -1, "filename": "imperix-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b7ba497763e93af97c2b9c6054c0e607", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18631, "upload_time": "2020-02-27T21:22:24", "upload_time_iso_8601": "2020-02-27T21:22:24.891100Z", "url": "https://files.pythonhosted.org/packages/d4/c3/ba3b0d4b7a8d31bf55f94443587c2b0652e60417e35eb96e80f5e3dd1807/imperix-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4e82576550ff795f579d12b3e60e5d0", "sha256": "3c905095584f05e440b40dcada3e47859e5764972bafe18e63b608bf97488758"}, "downloads": -1, "filename": "imperix-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c4e82576550ff795f579d12b3e60e5d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15464, "upload_time": "2020-02-27T21:22:26", "upload_time_iso_8601": "2020-02-27T21:22:26.745498Z", "url": "https://files.pythonhosted.org/packages/f7/86/821c38350085ec416c30f9a35b3e99152dbca675970c5d08899039bb5975/imperix-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d562a222c6cb8780dbebee9ac3b8ae42", "sha256": "3311bc4161358bdec219e2152bcf796304e167f4c40411c6944ae457ee719dbc"}, "downloads": -1, "filename": "imperix-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d562a222c6cb8780dbebee9ac3b8ae42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18673, "upload_time": "2020-02-27T21:25:14", "upload_time_iso_8601": "2020-02-27T21:25:14.271040Z", "url": "https://files.pythonhosted.org/packages/50/8a/7ef33d747c109e96edfa96f604cdd6d66867e619e1239be97ba856a569ca/imperix-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "366b23a58b1742a89c01ab0d599ba3dc", "sha256": "6dfdef12ee73ca7092cbb77defb01338f49e55537b6e00558f5c9734f7b1b5f5"}, "downloads": -1, "filename": "imperix-0.2.2.tar.gz", "has_sig": false, "md5_digest": "366b23a58b1742a89c01ab0d599ba3dc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15554, "upload_time": "2020-02-27T21:25:16", "upload_time_iso_8601": "2020-02-27T21:25:16.115930Z", "url": "https://files.pythonhosted.org/packages/0f/a5/74a66121de359f80d4b9d262240baff7b5f49fe7e6f14ac5cf077487effd/imperix-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "308e4e8338254882e41e326facdceda7", "sha256": "a7f4d089c33b824e4a7856c7c32e440c1f9e1517d8486824119d7afcaabbd168"}, "downloads": -1, "filename": "imperix-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "308e4e8338254882e41e326facdceda7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18623, "upload_time": "2020-02-28T18:28:19", "upload_time_iso_8601": "2020-02-28T18:28:19.431886Z", "url": "https://files.pythonhosted.org/packages/aa/ee/466e709dcdc6e39c2c80cbccc608c2a286627ae7c6a4fb71b940179add00/imperix-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50cf5e82852046cbf05bea972c06307a", "sha256": "2908f3017472159537204e2ef72b2c48ed0663483074302ea02882f3d3344e14"}, "downloads": -1, "filename": "imperix-0.2.3.tar.gz", "has_sig": false, "md5_digest": "50cf5e82852046cbf05bea972c06307a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15504, "upload_time": "2020-02-28T18:28:21", "upload_time_iso_8601": "2020-02-28T18:28:21.135258Z", "url": "https://files.pythonhosted.org/packages/ec/28/2986622ffd744fcfe96ea14f85220e7bb2a0bd3d807469b906f66dfaf49c/imperix-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "4a725e63e169140c1af7918031c2c56f", "sha256": "48283d34a06974ff47558acfcb4af868628f608497e353e52c875d0badeb660d"}, "downloads": -1, "filename": "imperix-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4a725e63e169140c1af7918031c2c56f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18582, "upload_time": "2020-03-05T03:17:21", "upload_time_iso_8601": "2020-03-05T03:17:21.404060Z", "url": "https://files.pythonhosted.org/packages/85/8b/cfeab052753f77b8d18ecb1b69f2ad09743693a9a0b9404b2170d925bfd1/imperix-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58778d6d92f9d23da8b3d0eecda3e954", "sha256": "1d882c600b304a6d7d811fbdeb6c0e9a2a300a40ab19f648f54a37337c8a08cf"}, "downloads": -1, "filename": "imperix-0.2.4.tar.gz", "has_sig": false, "md5_digest": "58778d6d92f9d23da8b3d0eecda3e954", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15466, "upload_time": "2020-03-05T03:17:22", "upload_time_iso_8601": "2020-03-05T03:17:22.957639Z", "url": "https://files.pythonhosted.org/packages/4d/5c/bfc5453da5155f693cde0fd09decada7b70ea39c0e096329130df3113243/imperix-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "9c8a4e1f1fe59982548787175592a896", "sha256": "58e82eba13cca97ed0c3e944b470e3fa91e004f2ca282da54174ea2a0428545a"}, "downloads": -1, "filename": "imperix-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "9c8a4e1f1fe59982548787175592a896", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18691, "upload_time": "2020-03-12T01:19:30", "upload_time_iso_8601": "2020-03-12T01:19:30.088019Z", "url": "https://files.pythonhosted.org/packages/eb/d0/1a418513d2d49a145236d3e742e7767ddf868e5fd85194f93d330f3e548f/imperix-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52e2138c4d69476259e268ee0dcff5c4", "sha256": "d49f36161b229a871d0df0f86cdcb55d0d183fbdd8957da8d2ca0703f4b64e47"}, "downloads": -1, "filename": "imperix-0.2.5.tar.gz", "has_sig": false, "md5_digest": "52e2138c4d69476259e268ee0dcff5c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14971, "upload_time": "2020-03-12T01:19:31", "upload_time_iso_8601": "2020-03-12T01:19:31.486955Z", "url": "https://files.pythonhosted.org/packages/5e/13/b6e503df0b0642f1883db88eda358846cb56aaf32d33656f5b332a330712/imperix-0.2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c8a4e1f1fe59982548787175592a896", "sha256": "58e82eba13cca97ed0c3e944b470e3fa91e004f2ca282da54174ea2a0428545a"}, "downloads": -1, "filename": "imperix-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "9c8a4e1f1fe59982548787175592a896", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18691, "upload_time": "2020-03-12T01:19:30", "upload_time_iso_8601": "2020-03-12T01:19:30.088019Z", "url": "https://files.pythonhosted.org/packages/eb/d0/1a418513d2d49a145236d3e742e7767ddf868e5fd85194f93d330f3e548f/imperix-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52e2138c4d69476259e268ee0dcff5c4", "sha256": "d49f36161b229a871d0df0f86cdcb55d0d183fbdd8957da8d2ca0703f4b64e47"}, "downloads": -1, "filename": "imperix-0.2.5.tar.gz", "has_sig": false, "md5_digest": "52e2138c4d69476259e268ee0dcff5c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14971, "upload_time": "2020-03-12T01:19:31", "upload_time_iso_8601": "2020-03-12T01:19:31.486955Z", "url": "https://files.pythonhosted.org/packages/5e/13/b6e503df0b0642f1883db88eda358846cb56aaf32d33656f5b332a330712/imperix-0.2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:34 2020"}