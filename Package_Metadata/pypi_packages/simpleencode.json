{"info": {"author": "Doug Napoleone", "author_email": "doug.napoleone@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "simple encode decode w/ private key, based on the base64 encode and decode.\n\nInitially developed for turning database ID's into URL's without exposing the\nids in the url, or having a bot iterate over the values.\n\nAlso useful for storing passwords which need to be converted back to\nclear text, in alphanumeric form given a secret word. This is NOT encryption\nnor a hash. This is NOT cryptographically safe. For that an SSL public/private\nkey pair is preferred. For situations where the encoded string is already\nprotected by a privileged account, and the secret key is stored in a\nconfiguration file which is also protected by a privileged login, this system\nis secure. It is secure by virtue of having all its elements secure, and\nmitigates the risk of compromise of either one of those vectors (but not both).\n\nThis is good for websites which store the secret key in a configuration file\non disk, and the encoded word in a database (accessible by a different user),\nand where both values are not in transactional memory except for the duration\nof decoding and using the decoded string, which should be immediate.\n\nRequires Python 2.4 or greater\n\n\n    >>> from simpleencode import encode, decode, mksecret\n    >>> secret_key = mksecret()\n    >>> secret_key\n    \"{iIb'd/y!%w$'BDL&6NkWf`LeyZvp+}6QFm3~sBQjP)[!8xZ}a\"\n    >>> encoded = encode(\"Some Text\", secret_key)\n    >>> encoded\n    'S1lwA3QLQhwBcRJcUxs5fQNSekZjNjwREzFzNSthFh9kNj5PSzl6Cih6HxtWa1lvKhE='\n    >>> decode(encoded, secret_key)\n    'Some Text'\n    >>>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/python-simpleencode/", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "simpleencode", "package_url": "https://pypi.org/project/simpleencode/", "platform": "any", "project_url": "https://pypi.org/project/simpleencode/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/python-simpleencode/"}, "release_url": "https://pypi.org/project/simpleencode/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "simple encode decode with a private key, based on the base64 encode and decode.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>simple encode decode w/ private key, based on the base64 encode and decode.</p>\n<p>Initially developed for turning database ID\u2019s into URL\u2019s without exposing the\nids in the url, or having a bot iterate over the values.</p>\n<p>Also useful for storing passwords which need to be converted back to\nclear text, in alphanumeric form given a secret word. This is NOT encryption\nnor a hash. This is NOT cryptographically safe. For that an SSL public/private\nkey pair is preferred. For situations where the encoded string is already\nprotected by a privileged account, and the secret key is stored in a\nconfiguration file which is also protected by a privileged login, this system\nis secure. It is secure by virtue of having all its elements secure, and\nmitigates the risk of compromise of either one of those vectors (but not both).</p>\n<p>This is good for websites which store the secret key in a configuration file\non disk, and the encoded word in a database (accessible by a different user),\nand where both values are not in transactional memory except for the duration\nof decoding and using the decoded string, which should be immediate.</p>\n<p>Requires Python 2.4 or greater</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from simpleencode import encode, decode, mksecret\n&gt;&gt;&gt; secret_key = mksecret()\n&gt;&gt;&gt; secret_key\n\"{iIb'd/y!%w$'BDL&amp;6NkWf`LeyZvp+}6QFm3~sBQjP)[!8xZ}a\"\n&gt;&gt;&gt; encoded = encode(\"Some Text\", secret_key)\n&gt;&gt;&gt; encoded\n'S1lwA3QLQhwBcRJcUxs5fQNSekZjNjwREzFzNSthFh9kNj5PSzl6Cih6HxtWa1lvKhE='\n&gt;&gt;&gt; decode(encoded, secret_key)\n'Some Text'\n&gt;&gt;&gt;\n</pre>\n</blockquote>\n\n          </div>"}, "last_serial": 167319, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f6a4638270fa9ef6769691c9b93a3dd5", "sha256": "b95392f095db4dbcf1908ccc8437f5f526ad829a2124a3ac48c7eccd843cbf3b"}, "downloads": -1, "filename": "simpleencode-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f6a4638270fa9ef6769691c9b93a3dd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4262, "upload_time": "2010-04-16T22:17:02", "upload_time_iso_8601": "2010-04-16T22:17:02.163183Z", "url": "https://files.pythonhosted.org/packages/30/99/62e60f9a6ab9d55487a3a0d9090424d828f13d9120a5a0eebcec615c5e79/simpleencode-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f6a4638270fa9ef6769691c9b93a3dd5", "sha256": "b95392f095db4dbcf1908ccc8437f5f526ad829a2124a3ac48c7eccd843cbf3b"}, "downloads": -1, "filename": "simpleencode-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f6a4638270fa9ef6769691c9b93a3dd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4262, "upload_time": "2010-04-16T22:17:02", "upload_time_iso_8601": "2010-04-16T22:17:02.163183Z", "url": "https://files.pythonhosted.org/packages/30/99/62e60f9a6ab9d55487a3a0d9090424d828f13d9120a5a0eebcec615c5e79/simpleencode-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:50 2020"}