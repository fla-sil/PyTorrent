{"info": {"author": "Matt Westcott", "author_email": "matt@west.co.tt", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-unjoinify\n\nA library for efficiently retrieving deeply-nested data sets\n(for people who aren't afraid of a bit of SQL)\n\nThe problem\n-----------\nSuppose you have a website about film festivals. Each festival has many awards,\nand each award has many nominations. A nomination belongs to a movie, and a\nmovie can have several directors (in a many-to-many relation). You want to have\na page listing the full roster of nominated movies at a festival, including\ntheir directors.\n\nIf you do this the naive way (looping over awards, then nominations / movies,\nthen directors), you'll end up making lots and lots of little queries. This is\nbad.\n\nselect_related won't help you here - it can't follow one-to-many and\nmany-to-many relations. (See Django tickets #2238 and #6432.)\n\nThe traditional answer is to bite the bullet and drop down to raw SQL at this\npoint:\n\nSELECT\n\ttinseltown_award.id,\n\ttinseltown_award.name,\n\ttinseltown_nomination.id AS nomination__id,\n\ttinseltown_nomination.ranking AS nomination__ranking,\n\ttinseltown_movie.id AS nomination__movie__id,\n\ttinseltown_movie.title AS nomination__movie__title,\n\ttinseltown_person.id AS nomination__movie__directors__id,\n\ttinseltown_person.first_name AS nomination__movie__directors__first_name\n\ttinseltown_person.surname AS nomination__movie__directors__surname\nFROM\n\ttinseltown_award\n\tLEFT JOIN tinseltown_nomination ON (tinseltown_award.id = tinseltown_nomination.award_id)\n\tLEFT JOIN tinseltown_movie ON (tinseltown_nomination.movie_id = tinseltown_movie.id)\n\tLEFT JOIN tinseltown_movie_directors ON (tinseltown_movie.id = tinseltown_movie_directors.movie_id)\n\tLEFT JOIN tinseltown_person ON (tinseltown_movie_directors.person_id = tinseltown_person.id)\nWHERE\n\ttinseltown_award.festival_id = ?\nORDER BY\n\ttinseltown_award.name,\n\ttinseltown_nomination.ranking\n\nThis captures all the data you need for the page in a single query, but there's\na downside: all you get back is a plain SQL result table, with no access to\nyour model objects and their lovingly-crafted methods (think get_absolute_url).\n\nunjoinify to the rescue\n-----------------------\nProvided you've used the double-underscore notation above for your column\nnames, and made them match up with your relation names, unjoinify will take\nyour query, and through some cunning ORM introspection, reconstruct an object\ntree:\n\nawards = unjoinify(Award, \"SELECT tinseltown_award.id...\", (festival_id,))\n\n(Here Award is the base class that all the joins are hanging off, and\nfestival_id is a parameter to the query.)\n\nWell... almost. Due to limitations of Django's ORM, we can't return a proper\nobject tree with the ability to refer to award.nominations and so on. Instead,\nwhat you get back is an array of (award, nominations) tuples, where nominations\nis itself an array of (nomination, movie, directors) tuples, and directors is\nan array of person objects. This is good enough for iterating through in a\ntemplate, though:\n\n{% for award, nominations in awards %}\n\t<h1>{{ award.name }}</h1>\n\t<ul>\n\t\t{% for nomination, movie, directors in nominations %}\n\t\t\t<li>\n\t\t\t\t{{ nomination.ranking }}:\n\t\t\t\t<a href=\"{{ movie.get_absolute_url }}\">{{ movie.title }}</a>\n\t\t\t\t- {% for director in directors %}\n\t\t\t\t\t{{ director.first_name }} {{ director.surname }}\n\t\t\t\t{% endfor %}\n\t\t\t</li>\n\t\t{% endfor %}\n\t</ul>\n{% endfor %}\n\nunjoinify will even handle cartesian joins - for example, if a movie had\nmultiple studios as well as multiple directors, you could join on both\nrelations and have it successfully unpack to a tuple of\n(nomination, movie, directors, studios). You're advised to use this sparingly,\nthough - this will result in count(directors) * count(studios) rows being\nreturned for each movie, which, depending on your particular use-case, could\nend up being far worse than running separate queries...\n\nExplicit column names\n---------------------\nUnfortunately, database engines are liable to have a fairly low limit on column\nname length (63 characters, in the case of Postgres), and it's easy to run into\nthis limit when working with deeply-nested relations. To work around this, you\ncan pass the list of column names as an additional parameter (in the same order\nthat they appear in the query):\n\nawards = unjoinify(Award, sql, (festival_id,),\n\tcolumns = ['id', 'name', 'nomination__id', 'nomination__ranking', 'nomination__movie__id', 'nomination__movie__title'])\n\nAuthor\n------\nMatt Westcott <matt@west.co.tt>\nhttp://matt.west.co.tt/ - @westdotcodottt", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gasman/django-unjoinify", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-unjoinify", "package_url": "https://pypi.org/project/django-unjoinify/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-unjoinify/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/gasman/django-unjoinify"}, "release_url": "https://pypi.org/project/django-unjoinify/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "A helper for efficiently retrieving deeply-nested data sets", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            django-unjoinify<br><br>A library for efficiently retrieving deeply-nested data sets<br>(for people who aren't afraid of a bit of SQL)<br><br>The problem<br>-----------<br>Suppose you have a website about film festivals. Each festival has many awards,<br>and each award has many nominations. A nomination belongs to a movie, and a<br>movie can have several directors (in a many-to-many relation). You want to have<br>a page listing the full roster of nominated movies at a festival, including<br>their directors.<br><br>If you do this the naive way (looping over awards, then nominations / movies,<br>then directors), you'll end up making lots and lots of little queries. This is<br>bad.<br><br>select_related won't help you here - it can't follow one-to-many and<br>many-to-many relations. (See Django tickets #2238 and #6432.)<br><br>The traditional answer is to bite the bullet and drop down to raw SQL at this<br>point:<br><br>SELECT<br>\ttinseltown_award.id,<br>\ttinseltown_award.name,<br>\ttinseltown_nomination.id AS nomination__id,<br>\ttinseltown_nomination.ranking AS nomination__ranking,<br>\ttinseltown_movie.id AS nomination__movie__id,<br>\ttinseltown_movie.title AS nomination__movie__title,<br>\ttinseltown_person.id AS nomination__movie__directors__id,<br>\ttinseltown_person.first_name AS nomination__movie__directors__first_name<br>\ttinseltown_person.surname AS nomination__movie__directors__surname<br>FROM<br>\ttinseltown_award<br>\tLEFT JOIN tinseltown_nomination ON (tinseltown_award.id = tinseltown_nomination.award_id)<br>\tLEFT JOIN tinseltown_movie ON (tinseltown_nomination.movie_id = tinseltown_movie.id)<br>\tLEFT JOIN tinseltown_movie_directors ON (tinseltown_movie.id = tinseltown_movie_directors.movie_id)<br>\tLEFT JOIN tinseltown_person ON (tinseltown_movie_directors.person_id = tinseltown_person.id)<br>WHERE<br>\ttinseltown_award.festival_id = ?<br>ORDER BY<br>\ttinseltown_award.name,<br>\ttinseltown_nomination.ranking<br><br>This captures all the data you need for the page in a single query, but there's<br>a downside: all you get back is a plain SQL result table, with no access to<br>your model objects and their lovingly-crafted methods (think get_absolute_url).<br><br>unjoinify to the rescue<br>-----------------------<br>Provided you've used the double-underscore notation above for your column<br>names, and made them match up with your relation names, unjoinify will take<br>your query, and through some cunning ORM introspection, reconstruct an object<br>tree:<br><br>awards = unjoinify(Award, \"SELECT tinseltown_award.id...\", (festival_id,))<br><br>(Here Award is the base class that all the joins are hanging off, and<br>festival_id is a parameter to the query.)<br><br>Well... almost. Due to limitations of Django's ORM, we can't return a proper<br>object tree with the ability to refer to award.nominations and so on. Instead,<br>what you get back is an array of (award, nominations) tuples, where nominations<br>is itself an array of (nomination, movie, directors) tuples, and directors is<br>an array of person objects. This is good enough for iterating through in a<br>template, though:<br><br>{% for award, nominations in awards %}<br>\t&lt;h1&gt;{{ award.name }}&lt;/h1&gt;<br>\t&lt;ul&gt;<br>\t\t{% for nomination, movie, directors in nominations %}<br>\t\t\t&lt;li&gt;<br>\t\t\t\t{{ nomination.ranking }}:<br>\t\t\t\t&lt;a href=\"{{ movie.get_absolute_url }}\"&gt;{{ movie.title }}&lt;/a&gt;<br>\t\t\t\t- {% for director in directors %}<br>\t\t\t\t\t{{ director.first_name }} {{ director.surname }}<br>\t\t\t\t{% endfor %}<br>\t\t\t&lt;/li&gt;<br>\t\t{% endfor %}<br>\t&lt;/ul&gt;<br>{% endfor %}<br><br>unjoinify will even handle cartesian joins - for example, if a movie had<br>multiple studios as well as multiple directors, you could join on both<br>relations and have it successfully unpack to a tuple of<br>(nomination, movie, directors, studios). You're advised to use this sparingly,<br>though - this will result in count(directors) * count(studios) rows being<br>returned for each movie, which, depending on your particular use-case, could<br>end up being far worse than running separate queries...<br><br>Explicit column names<br>---------------------<br>Unfortunately, database engines are liable to have a fairly low limit on column<br>name length (63 characters, in the case of Postgres), and it's easy to run into<br>this limit when working with deeply-nested relations. To work around this, you<br>can pass the list of column names as an additional parameter (in the same order<br>that they appear in the query):<br><br>awards = unjoinify(Award, sql, (festival_id,),<br>\tcolumns = ['id', 'name', 'nomination__id', 'nomination__ranking', 'nomination__movie__id', 'nomination__movie__title'])<br><br>Author<br>------<br>Matt Westcott &lt;matt@west.co.tt&gt;<br>http://matt.west.co.tt/ - @westdotcodottt\n          </div>"}, "last_serial": 790933, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c16bf6e6c881e721d1c68c752a34bff7", "sha256": "63ca6c2c0f935dce389b9f004575da4ad881523ffd8b4968861d489f1e1e62ec"}, "downloads": -1, "filename": "django-unjoinify-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c16bf6e6c881e721d1c68c752a34bff7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4971, "upload_time": "2011-05-23T22:28:23", "upload_time_iso_8601": "2011-05-23T22:28:23.923046Z", "url": "https://files.pythonhosted.org/packages/2d/a8/38b3e178c0677a1b68c28b95931b948a949712842a5eada5988bfa867fee/django-unjoinify-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c16bf6e6c881e721d1c68c752a34bff7", "sha256": "63ca6c2c0f935dce389b9f004575da4ad881523ffd8b4968861d489f1e1e62ec"}, "downloads": -1, "filename": "django-unjoinify-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c16bf6e6c881e721d1c68c752a34bff7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4971, "upload_time": "2011-05-23T22:28:23", "upload_time_iso_8601": "2011-05-23T22:28:23.923046Z", "url": "https://files.pythonhosted.org/packages/2d/a8/38b3e178c0677a1b68c28b95931b948a949712842a5eada5988bfa867fee/django-unjoinify-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:13 2020"}