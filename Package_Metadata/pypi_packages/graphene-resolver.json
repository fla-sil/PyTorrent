{"info": {"author": "NateScarlet", "author_email": "NateScarlet@Gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Graphene resolvers\n\n[![build status](https://github.com/NateScarlet/graphene-resolver/workflows/Python%20package/badge.svg)](https://github.com/NateScarlet/graphene-resolver/actions)\n[![version](https://img.shields.io/pypi/v/graphene-resolver)](https://pypi.org/project/graphene-resolver/)\n![python version](https://img.shields.io/pypi/pyversions/graphene-resolver)\n![wheel](https://img.shields.io/pypi/wheel/graphene-resolver)\n![maintenance](https://img.shields.io/maintenance/yes/2020)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n\nUsing mongoose-like schema to write apollo-like resolver.\n\n## Install\n\n`pip install graphene-resolver`\n\n## Usage\n\nsimple example:\n\n```python\nimport graphene\nimport graphene_resolver as resolver\n\nclass Foo(resolver.Resolver):\n    schema = {\n        \"args\": {\n            \"key\":  'String!',\n            \"value\": 'String!',\n        },\n        \"type\": 'String!',\n    }\n\n    def resolve(self, **kwargs):\n        self.parent # parent field\n        self.info # resolve info\n        self.context # resolve context\n        return kwargs['value']\n\nclass Query(graphene.ObjectType):\n    foo = Foo.as_field()\n```\n\n```graphql\n{\n  foo(key: \"k\", value: \"v\")\n}\n```\n\n```json\n{ \"foo\": \"v\" }\n```\n\nrelay node:\n\n```python\npets = [dict(\n    id=1,\n    name='pet1',\n    age=1,\n)]\nclass Pet(resolver.Resolver):\n    schema = {\n        'type': {\n            'name': 'String',\n            'age': 'Int',\n        },\n        'interfaces': (graphene.Node,)\n    }\n\n    def get_node(self, id_):\n        return next(i for i in pets if i['id'] == int(id_))\n\n    def validate(self, value):\n        return (\n            isinstance(value, typing.Mapping)\n            and isinstance(value.get('name'), str)\n            and isinstance(value.get('age'), int)\n        )\nclass Query(graphene.ObjectType):\n    node = graphene.Node.Field()\n\nschema = graphene.Schema(query=Query, types=[Pet.as_type()])\n```\n\n```graphql\n{\n  node(id: \"UGV0OjE=\") {\n    id\n    __typename\n    ... on Pet {\n      name\n      age\n    }\n  }\n}\n```\n\n```json\n{ \"node\": { \"id\": \"UGV0OjE=\", \"__typename\": \"Pet\", \"name\": \"pet1\", \"age\": 1 } }\n```\n\nrelay connection:\n\n```python\nclass Item(resolver.Resolver):\n    schema = {'name': 'String!'}\n\nclass Items(resolver.Resolver):\n    schema = resolver.connection.get_type(Item)\n\n    def resolve(self, **kwargs):\n        return resolver.connection.resolve([{'name': 'a'}, {'name': 'b'}], **kwargs)\n```\n\n```graphql\n{\n  items {\n    edges {\n      node {\n        name\n      }\n      cursor\n    }\n    pageInfo {\n      total\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}\n```\n\n```json\n{\n  \"items\": {\n    \"edges\": [\n      { \"node\": { \"name\": \"a\" }, \"cursor\": \"YXJyYXljb25uZWN0aW9uOjA=\" },\n      { \"node\": { \"name\": \"b\" }, \"cursor\": \"YXJyYXljb25uZWN0aW9uOjE=\" }\n    ],\n    \"pageInfo\": {\n      \"total\": 2,\n      \"hasNextPage\": false,\n      \"hasPreviousPage\": false,\n      \"startCursor\": \"YXJyYXljb25uZWN0aW9uOjA=\",\n      \"endCursor\": \"YXJyYXljb25uZWN0aW9uOjE=\"\n    }\n  }\n}\n```\n\nenum:\n\n```python\n\n    class Foo(resolver.Resolver):\n        schema = ('a', 'b')\n\n        def resolve(self, **kwargs):\n            return 'a'\n\n    class Query(graphene.ObjectType):\n        foo = Foo.as_field()\n\n    schema = graphene.Schema(query=Query)\n    assert str(schema) == '''\\\nschema {\n  query: Query\n}\n\nenum Foo {\n  a\n  b\n}\n\ntype Query {\n  foo: Foo\n}\n'''\n```\n\nenum with description:\n\n```python\n\n    class Foo(resolver.Resolver):\n        schema = {\n            'type': [('a', 'this is a'), ('b', 'this is b'), 'c'],\n            'description': 'A enum',\n        }\n\n        def resolve(self, **kwargs):\n            return 'a'\n\n    class Query(graphene.ObjectType):\n        foo = Foo.as_field()\n\n    schema = graphene.Schema(query=Query)\n    enum_type = schema.get_type('Foo')\n    assert enum_type.description == 'A enum'\n    assert enum_type.get_value('a').value == 'a'\n    assert enum_type.get_value('a').description == 'this is a'\n    assert enum_type.get_value('b').value == 'b'\n    assert enum_type.get_value('b').description == 'this is b'\n    assert enum_type.get_value('c').value == 'c'\n    assert enum_type.get_value('c').description is None\n```\n\nunion:\n\n```python\n    class Foo(resolver.Resolver):\n        schema = ({'a': 'String'}, {'b': 'Int'})\n\n        def resolve(self, **kwargs):\n            return {'__typename': 'Foo0', 'a': 'a'}\n\n    class Query(graphene.ObjectType):\n        foo = Foo.as_field()\n\n    schema = graphene.Schema(query=Query)\n    assert str(schema) == '''\\\nschema {\n  query: Query\n}\n\nunion Foo = Foo0 | Foo1\n\ntype Foo0 {\n  a: String\n}\n\ntype Foo1 {\n  b: Int\n}\n\ntype Query {\n  foo: Foo\n}\n'''\n```\n\n```graphql\n{\n  foo {\n    __typename\n    ... on Foo0 {\n      a\n    }\n  }\n}\n```\n\n```json\n{ \"foo\": { \"__typename\": \"Foo0\", \"a\": \"a\" } }\n```\n\ncomplicated example:\n\n```python\nclass Foo(resolver.Resolver):\n    _input_schema = {\n        \"type\": {\"type\": 'String'},\n        \"data\": [\n            {\n                \"type\":\n                {\n                    \"key\": {\n                        \"type\": 'String',\n                        \"required\": True,\n                        \"description\": \"<description>\",\n                    },\n                    \"value\": 'Int',\n                    \"extra\": {\n                        \"type\": ['String!'],\n                        \"deprecation_reason\": \"<deprecated>\"\n                    },\n                },\n                \"required\": True\n            },\n        ],\n    }\n    schema = {\n        \"args\": {\n            \"input\": _input_schema\n        },\n        \"type\": _input_schema,\n        \"description\": \"description\",\n        \"deprecation_reason\": None\n    }\n\n    def resolve(self, **kwargs):\n        return kwargs['input']\n```\n\n```graphql\n{\n  foo(\n    input: { type: \"type\", data: [{ key: \"key\", value: 42, extra: [\"extra\"] }] }\n  ) {\n    type\n    data {\n      key\n      value\n      extra\n    }\n  }\n}\n```\n\n```json\n{\n  \"foo\": {\n    \"type\": \"type\",\n    \"data\": [{ \"key\": \"key\", \"value\": 42, \"extra\": [\"extra\"] }]\n  }\n}\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NateScarlet/graphene-resolver", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "graphene-resolver", "package_url": "https://pypi.org/project/graphene-resolver/", "platform": "", "project_url": "https://pypi.org/project/graphene-resolver/", "project_urls": {"Documentation": "https://natescarlet.github.io/graphene-resolver/", "Homepage": "https://github.com/NateScarlet/graphene-resolver", "Repository": "https://github.com/NateScarlet/graphene-resolver"}, "release_url": "https://pypi.org/project/graphene-resolver/0.1.10/", "requires_dist": ["graphene (>=2.1,<3.0)", "isodate (>=0.6,<0.7)", "lazy-object-proxy (>=1.4,<2.0)", "phrases-case (>=0.1.1,<0.2.0)", "dataclasses (>=0.7,<0.8); python_version >= \"3.6\" and python_version < \"3.7\""], "requires_python": ">=3.6,<4.0", "summary": "Using mongoose-like schema to write apollo-like resolver for graphene.", "version": "0.1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Graphene resolvers</h1>\n<p><a href=\"https://github.com/NateScarlet/graphene-resolver/actions\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e288ee175941b3fe0ff03791b53ab2252182f23/68747470733a2f2f6769746875622e636f6d2f4e617465536361726c65742f6772617068656e652d7265736f6c7665722f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/graphene-resolver/\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a8d89c2b8b71712dd0e625f7232009d3cad3e09/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6772617068656e652d7265736f6c766572\"></a>\n<img alt=\"python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/611670a8958a2adc7d8c28c6edf38546d461b789/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6772617068656e652d7265736f6c766572\">\n<img alt=\"wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/528e4cb71cda5a532d3400924b0a906db85a1fec/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f6772617068656e652d7265736f6c766572\">\n<img alt=\"maintenance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d26c89a30c7a216b90c06752077d51e62706e999/68747470733a2f2f696d672e736869656c64732e696f2f6d61696e74656e616e63652f7965732f32303230\">\n<a href=\"https://conventionalcommits.org\" rel=\"nofollow\"><img alt=\"Conventional Commits\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c56cb99c6fb01fa6c680929fe04e2e8152f5315/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e76656e74696f6e616c253230436f6d6d6974732d312e302e302d79656c6c6f772e737667\"></a></p>\n<p>Using mongoose-like schema to write apollo-like resolver.</p>\n<h2>Install</h2>\n<p><code>pip install graphene-resolver</code></p>\n<h2>Usage</h2>\n<p>simple example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">import</span> <span class=\"nn\">graphene_resolver</span> <span class=\"k\">as</span> <span class=\"nn\">resolver</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">Resolver</span><span class=\"p\">):</span>\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"key\"</span><span class=\"p\">:</span>  <span class=\"s1\">'String!'</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s1\">'String!'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s1\">'String!'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"c1\"># parent field</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">info</span> <span class=\"c1\"># resolve info</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"c1\"># resolve context</span>\n        <span class=\"k\">return</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">as_field</span><span class=\"p\">()</span>\n</pre>\n<pre>{\n  foo(key: \"k\", value: \"v\")\n}\n</pre>\n<pre><span class=\"p\">{</span> <span class=\"nt\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"v\"</span> <span class=\"p\">}</span>\n</pre>\n<p>relay node:</p>\n<pre><span class=\"n\">pets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'pet1'</span><span class=\"p\">,</span>\n    <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">)]</span>\n<span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">Resolver</span><span class=\"p\">):</span>\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'String'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"s1\">'Int'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">'interfaces'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">,)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_node</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pets</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">id_</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Mapping</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">),</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Pet</span><span class=\"o\">.</span><span class=\"n\">as_type</span><span class=\"p\">()])</span>\n</pre>\n<pre>{\n  node(id: \"UGV0OjE=\") {\n    id\n    __typename\n    ... on Pet {\n      name\n      age\n    }\n  }\n}\n</pre>\n<pre><span class=\"p\">{</span> <span class=\"nt\">\"node\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"UGV0OjE=\"</span><span class=\"p\">,</span> <span class=\"nt\">\"__typename\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Pet\"</span><span class=\"p\">,</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pet1\"</span><span class=\"p\">,</span> <span class=\"nt\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n</pre>\n<p>relay connection:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">Resolver</span><span class=\"p\">):</span>\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'String!'</span><span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Items</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">Resolver</span><span class=\"p\">):</span>\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">get_type</span><span class=\"p\">(</span><span class=\"n\">Item</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">([{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">}],</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<pre>{\n  items {\n    edges {\n      node {\n        name\n      }\n      cursor\n    }\n    pageInfo {\n      total\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}\n</pre>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"edges\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span> <span class=\"nt\">\"node\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a\"</span> <span class=\"p\">},</span> <span class=\"nt\">\"cursor\"</span><span class=\"p\">:</span> <span class=\"s2\">\"YXJyYXljb25uZWN0aW9uOjA=\"</span> <span class=\"p\">},</span>\n      <span class=\"p\">{</span> <span class=\"nt\">\"node\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"b\"</span> <span class=\"p\">},</span> <span class=\"nt\">\"cursor\"</span><span class=\"p\">:</span> <span class=\"s2\">\"YXJyYXljb25uZWN0aW9uOjE=\"</span> <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"pageInfo\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"total\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"hasNextPage\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"hasPreviousPage\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"startCursor\"</span><span class=\"p\">:</span> <span class=\"s2\">\"YXJyYXljb25uZWN0aW9uOjA=\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"endCursor\"</span><span class=\"p\">:</span> <span class=\"s2\">\"YXJyYXljb25uZWN0aW9uOjE=\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>enum:</p>\n<pre>    <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">Resolver</span><span class=\"p\">):</span>\n        <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'a'</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n        <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">as_field</span><span class=\"p\">()</span>\n\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'''</span><span class=\"se\">\\</span>\n<span class=\"s1\">schema {</span>\n<span class=\"s1\">  query: Query</span>\n<span class=\"s1\">}</span>\n\n<span class=\"s1\">enum Foo {</span>\n<span class=\"s1\">  a</span>\n<span class=\"s1\">  b</span>\n<span class=\"s1\">}</span>\n\n<span class=\"s1\">type Query {</span>\n<span class=\"s1\">  foo: Foo</span>\n<span class=\"s1\">}</span>\n<span class=\"s1\">'''</span>\n</pre>\n<p>enum with description:</p>\n<pre>    <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">Resolver</span><span class=\"p\">):</span>\n        <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'this is a'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'this is b'</span><span class=\"p\">),</span> <span class=\"s1\">'c'</span><span class=\"p\">],</span>\n            <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'A enum'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'a'</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n        <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">as_field</span><span class=\"p\">()</span>\n\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">)</span>\n    <span class=\"n\">enum_type</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">get_type</span><span class=\"p\">(</span><span class=\"s1\">'Foo'</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">enum_type</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">==</span> <span class=\"s1\">'A enum'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">enum_type</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s1\">'a'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">enum_type</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">==</span> <span class=\"s1\">'this is a'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">enum_type</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s1\">'b'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">enum_type</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">==</span> <span class=\"s1\">'this is b'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">enum_type</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s1\">'c'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">enum_type</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n</pre>\n<p>union:</p>\n<pre>    <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">Resolver</span><span class=\"p\">):</span>\n        <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'String'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'Int'</span><span class=\"p\">})</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'__typename'</span><span class=\"p\">:</span> <span class=\"s1\">'Foo0'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">}</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n        <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">as_field</span><span class=\"p\">()</span>\n\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'''</span><span class=\"se\">\\</span>\n<span class=\"s1\">schema {</span>\n<span class=\"s1\">  query: Query</span>\n<span class=\"s1\">}</span>\n\n<span class=\"s1\">union Foo = Foo0 | Foo1</span>\n\n<span class=\"s1\">type Foo0 {</span>\n<span class=\"s1\">  a: String</span>\n<span class=\"s1\">}</span>\n\n<span class=\"s1\">type Foo1 {</span>\n<span class=\"s1\">  b: Int</span>\n<span class=\"s1\">}</span>\n\n<span class=\"s1\">type Query {</span>\n<span class=\"s1\">  foo: Foo</span>\n<span class=\"s1\">}</span>\n<span class=\"s1\">'''</span>\n</pre>\n<pre>{\n  foo {\n    __typename\n    ... on Foo0 {\n      a\n    }\n  }\n}\n</pre>\n<pre><span class=\"p\">{</span> <span class=\"nt\">\"foo\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"__typename\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Foo0\"</span><span class=\"p\">,</span> <span class=\"nt\">\"a\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a\"</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n</pre>\n<p>complicated example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">Resolver</span><span class=\"p\">):</span>\n    <span class=\"n\">_input_schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s1\">'String'</span><span class=\"p\">},</span>\n        <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"type\"</span><span class=\"p\">:</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s1\">'String'</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;description&gt;\"</span><span class=\"p\">,</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s1\">'Int'</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"extra\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'String!'</span><span class=\"p\">],</span>\n                        <span class=\"s2\">\"deprecation_reason\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;deprecated&gt;\"</span>\n                    <span class=\"p\">},</span>\n                <span class=\"p\">},</span>\n                <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"input\"</span><span class=\"p\">:</span> <span class=\"n\">_input_schema</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"n\">_input_schema</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"description\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"deprecation_reason\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'input'</span><span class=\"p\">]</span>\n</pre>\n<pre>{\n  foo(\n    input: { type: \"type\", data: [{ key: \"key\", value: 42, extra: [\"extra\"] }] }\n  ) {\n    type\n    data {\n      key\n      value\n      extra\n    }\n  }\n}\n</pre>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"foo\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"type\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"key\"</span><span class=\"p\">,</span> <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"nt\">\"extra\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"extra\"</span><span class=\"p\">]</span> <span class=\"p\">}]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 7103419, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7b1e8a4b19bc801199eaa4cb060e0316", "sha256": "ef9652ac6456a249aee5ec57f6015511f631c8ca1e49afcd3bbb33b6e022d552"}, "downloads": -1, "filename": "graphene_resolver-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7b1e8a4b19bc801199eaa4cb060e0316", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 12746, "upload_time": "2019-11-30T08:20:00", "upload_time_iso_8601": "2019-11-30T08:20:00.239722Z", "url": "https://files.pythonhosted.org/packages/66/8e/812086a7c31ee93274ab269e6eb2701edabde4c807e736232b2d7e48e38c/graphene_resolver-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd8a0e084c1d44717ad619b3c9a682b4", "sha256": "a5ee483bbc009c33a7e870ee3c5a8929570aa533cf390e96a206883d7c394f15"}, "downloads": -1, "filename": "graphene-resolver-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dd8a0e084c1d44717ad619b3c9a682b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11367, "upload_time": "2019-11-30T08:19:57", "upload_time_iso_8601": "2019-11-30T08:19:57.451312Z", "url": "https://files.pythonhosted.org/packages/c8/fa/d5a2c829205ba0239464208d7760b1b215ef3a2402f4a826ff1a8e79a04d/graphene-resolver-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f2c97acb4a089bf0da7cb3cdb653a401", "sha256": "a8c941fa120ef05f082e03a682a7a7d4ecc4d12c2f8cfd6f6167d08bb56947c0"}, "downloads": -1, "filename": "graphene_resolver-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f2c97acb4a089bf0da7cb3cdb653a401", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 12742, "upload_time": "2019-11-30T08:51:16", "upload_time_iso_8601": "2019-11-30T08:51:16.403995Z", "url": "https://files.pythonhosted.org/packages/34/94/012812f805aff0727c6ffba0df3b0853c5a7e132c81a888bd65ce707bae5/graphene_resolver-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3325af319775f792e5eb49439c64fd05", "sha256": "59ade56e6839b3e551cb1ddf2704c0eb5b338aa7601aa58c450c3886bae1f3a2"}, "downloads": -1, "filename": "graphene-resolver-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3325af319775f792e5eb49439c64fd05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11357, "upload_time": "2019-11-30T08:51:14", "upload_time_iso_8601": "2019-11-30T08:51:14.336886Z", "url": "https://files.pythonhosted.org/packages/97/3a/eacccd790748ba2b7b47c72f1e2fbcf348df2c0f61160de993595dc370da/graphene-resolver-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "7ae9fe81b5aeddd4ba40f0ddd9ae1c9b", "sha256": "22f4961f64ac5b1ea66b6c5cd85454d2e5d5ab21df60826545ba43cfacab6b73"}, "downloads": -1, "filename": "graphene_resolver-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "7ae9fe81b5aeddd4ba40f0ddd9ae1c9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 13499, "upload_time": "2020-04-26T07:37:36", "upload_time_iso_8601": "2020-04-26T07:37:36.414529Z", "url": "https://files.pythonhosted.org/packages/6e/a1/9032228be2ad24823492f962e1a647efc006acc1f77ff504c99ca1b9a360/graphene_resolver-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be7142f89af007189e6f477597cb404f", "sha256": "4e98271d44c133701442df87e8ff684574f69887921d58e4c4a53b235c358703"}, "downloads": -1, "filename": "graphene-resolver-0.1.10.tar.gz", "has_sig": false, "md5_digest": "be7142f89af007189e6f477597cb404f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12020, "upload_time": "2020-04-26T07:37:33", "upload_time_iso_8601": "2020-04-26T07:37:33.270554Z", "url": "https://files.pythonhosted.org/packages/01/e3/23d5dd197c84844fc8aa9dc70452fd726e110352448e356ba93d2c48b9e2/graphene-resolver-0.1.10.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f9419350b81eccfc28d81c8e63ff2b5d", "sha256": "84bd8d1e7a30a312cf92cf92d691cb0b1c7691ec34439c6f00d364f60f22b3e6"}, "downloads": -1, "filename": "graphene_resolver-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f9419350b81eccfc28d81c8e63ff2b5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 13085, "upload_time": "2019-12-02T15:56:19", "upload_time_iso_8601": "2019-12-02T15:56:19.410599Z", "url": "https://files.pythonhosted.org/packages/4d/f3/d4e7abaf7c0581c5109c91916702b0c9896be872c4849cc3d9b0ef99b8a2/graphene_resolver-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6c591f7dd509b73c69234ebf4763772", "sha256": "820ee36af17fb3ba2807e8f74f1c5148fcb31a068180817c000fa820219df724"}, "downloads": -1, "filename": "graphene-resolver-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a6c591f7dd509b73c69234ebf4763772", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11544, "upload_time": "2019-12-02T15:56:16", "upload_time_iso_8601": "2019-12-02T15:56:16.318443Z", "url": "https://files.pythonhosted.org/packages/8e/e0/6072760721bc407a0ae87f88e9b8936785d39351ad35e5fbe419625cdb7a/graphene-resolver-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "fcc7feaadee0330292cb7ae2e42e6968", "sha256": "aafd13b8ae332094e3c6f890dfab0c7b26e5871a64b82fe842ab34c16b727fac"}, "downloads": -1, "filename": "graphene_resolver-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fcc7feaadee0330292cb7ae2e42e6968", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 13232, "upload_time": "2020-01-07T09:09:59", "upload_time_iso_8601": "2020-01-07T09:09:59.093148Z", "url": "https://files.pythonhosted.org/packages/d7/6b/ee5cf4e0d521079b022c094612e82cdf4253361400fef1e670224e475cec/graphene_resolver-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5746dcfc1c7ce000fa13c10c7580efb4", "sha256": "a4a5944d70bb40f810f7b4da49151ba2447972bb5b12be57907375709e89a200"}, "downloads": -1, "filename": "graphene-resolver-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5746dcfc1c7ce000fa13c10c7580efb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11722, "upload_time": "2020-01-07T09:09:56", "upload_time_iso_8601": "2020-01-07T09:09:56.620109Z", "url": "https://files.pythonhosted.org/packages/3a/d3/d70e6646b4a7b4e1a0864495231642e54066612fb885de49eb7afb52ed4b/graphene-resolver-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "e902bfc6e1f273aab8944439a9564bd2", "sha256": "2df1172076d21a380e054f34893cf672988060fce181d3cc8ed8fcb0b9d231f2"}, "downloads": -1, "filename": "graphene_resolver-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e902bfc6e1f273aab8944439a9564bd2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 13366, "upload_time": "2020-01-07T10:55:53", "upload_time_iso_8601": "2020-01-07T10:55:53.813273Z", "url": "https://files.pythonhosted.org/packages/40/f5/95cdd92b8f212b67a2e708e269aac07865cbcfd4d93309ed0a553ea13238/graphene_resolver-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "602850723407d9a1647d29e62e25d007", "sha256": "4f6b9998682272d6275dba93eb1b4efd2f3dd8968d7284543864f494f002f7ce"}, "downloads": -1, "filename": "graphene-resolver-0.1.4.tar.gz", "has_sig": false, "md5_digest": "602850723407d9a1647d29e62e25d007", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11837, "upload_time": "2020-01-07T10:55:51", "upload_time_iso_8601": "2020-01-07T10:55:51.830252Z", "url": "https://files.pythonhosted.org/packages/c9/b5/97e4d68c7554b43c8286542e61595fc6ad24efc8515b1de79dd3eaeed540/graphene-resolver-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "fa2039231d985a0fb89593e2a93e5e16", "sha256": "d176cfbdd4001cd06cb5c303c86fbad9ac67e258a193b4bd31200ea89a300f7c"}, "downloads": -1, "filename": "graphene_resolver-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fa2039231d985a0fb89593e2a93e5e16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 13482, "upload_time": "2020-01-08T03:21:13", "upload_time_iso_8601": "2020-01-08T03:21:13.351877Z", "url": "https://files.pythonhosted.org/packages/c4/ec/71737b1fb6f3f4b1fba115275eeb381ae15f8e9bf2c15deab5bf3b0c9356/graphene_resolver-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "679019a361c36773bc91977adf031515", "sha256": "a09842be81fec105b37e0e8f08ad892fe138ed6b8c57b1075c25e4f5540cfbb1"}, "downloads": -1, "filename": "graphene-resolver-0.1.5.tar.gz", "has_sig": false, "md5_digest": "679019a361c36773bc91977adf031515", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11932, "upload_time": "2020-01-08T03:21:11", "upload_time_iso_8601": "2020-01-08T03:21:11.550776Z", "url": "https://files.pythonhosted.org/packages/1d/ad/cad601a1f449bb5f20231eb5fc6b4b8aac1ee871f19e4a9a837526a77019/graphene-resolver-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "24f83de9a397f0381436f1a8f476a203", "sha256": "ef35a73d1f1e5ce4f104c641628caead20de24c9dd3e7be770ef736229c5a252"}, "downloads": -1, "filename": "graphene_resolver-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "24f83de9a397f0381436f1a8f476a203", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 13426, "upload_time": "2020-01-08T03:40:33", "upload_time_iso_8601": "2020-01-08T03:40:33.400177Z", "url": "https://files.pythonhosted.org/packages/d9/37/cae12446a330d8602af35dceace9d13523342bd175a2e0fca68a200ed66a/graphene_resolver-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9abf9cd04124b7be765a7e1142b1540c", "sha256": "20e942e877ebc9e8fade9c9c53b3938c7981f5108a95c04f6a616636e8a72937"}, "downloads": -1, "filename": "graphene-resolver-0.1.6.tar.gz", "has_sig": false, "md5_digest": "9abf9cd04124b7be765a7e1142b1540c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11872, "upload_time": "2020-01-08T03:40:31", "upload_time_iso_8601": "2020-01-08T03:40:31.368948Z", "url": "https://files.pythonhosted.org/packages/40/4a/de0442d864563c94f2a3922ce5811cc45da8407299391e61b0b3caa247fb/graphene-resolver-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "2c3fb199f29115337d61e9f193c11a31", "sha256": "1c2f8015438ad4f496494f11cb98fc97a10a7009d14bc796b69b0d050b3fd823"}, "downloads": -1, "filename": "graphene_resolver-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "2c3fb199f29115337d61e9f193c11a31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 13446, "upload_time": "2020-01-08T04:20:32", "upload_time_iso_8601": "2020-01-08T04:20:32.778782Z", "url": "https://files.pythonhosted.org/packages/f5/94/f252b505dee6c712afb07b056286d73e14dfa9a37a5f175c0804b2f87d1e/graphene_resolver-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93f5e3e453d7c76ac82d3d256be5efdc", "sha256": "a1c8b5885ef1e4be045d01abc14a364c09357027399700bd6386894c4c067ca6"}, "downloads": -1, "filename": "graphene-resolver-0.1.7.tar.gz", "has_sig": false, "md5_digest": "93f5e3e453d7c76ac82d3d256be5efdc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11891, "upload_time": "2020-01-08T04:20:29", "upload_time_iso_8601": "2020-01-08T04:20:29.777413Z", "url": "https://files.pythonhosted.org/packages/f7/e2/ebc010aa327afeca7138a45cbfec56abdfac396a40a35960768a65fa4c60/graphene-resolver-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "55ceb589a4676f2fcaf08470632c2669", "sha256": "ffc7d932b75aafedf687d4b65778fbeb6697531be73fb4e6837a15d7175fb54f"}, "downloads": -1, "filename": "graphene_resolver-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "55ceb589a4676f2fcaf08470632c2669", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 13440, "upload_time": "2020-01-19T03:09:57", "upload_time_iso_8601": "2020-01-19T03:09:57.165599Z", "url": "https://files.pythonhosted.org/packages/83/10/1a8300612e3a899ddd9e9f27d1b1b3a811b564eafedc7dc514385a905e82/graphene_resolver-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1168d11d5839f807aa7c1f86a43510fb", "sha256": "65e82587c89f27202932f3eac604feba52db7b66e399b5952b50695b0f1db7e2"}, "downloads": -1, "filename": "graphene-resolver-0.1.8.tar.gz", "has_sig": false, "md5_digest": "1168d11d5839f807aa7c1f86a43510fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11965, "upload_time": "2020-01-19T03:09:55", "upload_time_iso_8601": "2020-01-19T03:09:55.091585Z", "url": "https://files.pythonhosted.org/packages/1e/45/5e4108e5ba0cafff69120bcfa415ca857e7083d8570772b8c344336b4e30/graphene-resolver-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "0d1305ef4f00c860a9581bf35f3ebc6c", "sha256": "3754638fb4803887abbb128722bfcea4f19d9a7bc0f4d750aebb8cb75765939c"}, "downloads": -1, "filename": "graphene_resolver-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "0d1305ef4f00c860a9581bf35f3ebc6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 13473, "upload_time": "2020-03-12T02:13:12", "upload_time_iso_8601": "2020-03-12T02:13:12.813240Z", "url": "https://files.pythonhosted.org/packages/cc/d5/a4f4e04da9293d1d53d40d97d4c3d16e930d109519574715ece0cc96d58d/graphene_resolver-0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73e12d3d443c2bf1639119aac5739786", "sha256": "e8e7e3e8d9ead0761d0322efb1156e3f64096b1aa096f1089606e255efc04ca1"}, "downloads": -1, "filename": "graphene-resolver-0.1.9.tar.gz", "has_sig": false, "md5_digest": "73e12d3d443c2bf1639119aac5739786", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12010, "upload_time": "2020-03-12T02:13:10", "upload_time_iso_8601": "2020-03-12T02:13:10.990642Z", "url": "https://files.pythonhosted.org/packages/fa/58/b30c6c05ccb56306ae3864e5b63a958bee057c4d37b22c46592c193822a8/graphene-resolver-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7ae9fe81b5aeddd4ba40f0ddd9ae1c9b", "sha256": "22f4961f64ac5b1ea66b6c5cd85454d2e5d5ab21df60826545ba43cfacab6b73"}, "downloads": -1, "filename": "graphene_resolver-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "7ae9fe81b5aeddd4ba40f0ddd9ae1c9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 13499, "upload_time": "2020-04-26T07:37:36", "upload_time_iso_8601": "2020-04-26T07:37:36.414529Z", "url": "https://files.pythonhosted.org/packages/6e/a1/9032228be2ad24823492f962e1a647efc006acc1f77ff504c99ca1b9a360/graphene_resolver-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be7142f89af007189e6f477597cb404f", "sha256": "4e98271d44c133701442df87e8ff684574f69887921d58e4c4a53b235c358703"}, "downloads": -1, "filename": "graphene-resolver-0.1.10.tar.gz", "has_sig": false, "md5_digest": "be7142f89af007189e6f477597cb404f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12020, "upload_time": "2020-04-26T07:37:33", "upload_time_iso_8601": "2020-04-26T07:37:33.270554Z", "url": "https://files.pythonhosted.org/packages/01/e3/23d5dd197c84844fc8aa9dc70452fd726e110352448e356ba93d2c48b9e2/graphene-resolver-0.1.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:42 2020"}