{"info": {"author": "Omar Shaban", "author_email": "o.shaban.000@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "object-graph-builder\n====================\n\n.. image:: https://img.shields.io/pypi/v/object-graph-builder.svg\n   :target: https://pypi.org/project/object-graph-builder/\n   :alt: Latest Version\n\n.. image:: https://coveralls.io/repos/github/eshta/object-graph-builder/badge.svg\n   :target: https://coveralls.io/github/eshta/object-graph-builder\n   :alt: Coverage Status\n\n.. image:: https://readthedocs.org/projects/object-graph-builder/badge/?version=latest\n   :target: https://object-graph-builder.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://travis-ci.org/eshta/object-graph-builder.svg?branch=master\n   :target: https://travis-ci.org/eshta/object-graph-builder\n\n\n\nProvides a multi-step dependency injection container builder to allow adding/recreating object graphs in different stages through an app life-cycle\n\nFeatures\n--------\n\n* Offering a container builder, so one can dynamically build the object graph with many apps adding their specs, classes, modules\n* Dependency Injection Container (`pinject <https://github.com/google/pinject>`_)\n\n\nRequirements\n------------\n\n* Python 3.6+\n\n\nUsage\n-----\n\n1. Framework Agnostic App\n=========================\n**In container.py**\n\n.. code-block:: python\n\n  import object_graph.builder\n\n  builder =  object_graph.builder.ObjectGraphBuilder()\n\n\n**App 1**\n\n.. code-block:: python\n\n  import container\n  import pinject\n\n\n  class MyService(object):\n\t  def __init__(long_name: SomeReallyLongClassName):\n\t\t  self.my_dep = long_name\n\n  class MyBindingSpec(pinject.BindingSpec):\n\t   def configure(self, bind):\n\t\t   bind('long_name', to_class=SomeReallyLongClassName)\n\n  container.builder.addBindingSpec(MyBindingSpec)\n\n**App 2**\n\n.. code-block:: python\n\n  import container\n\n\n  container.builder.addModules([app2.module1, app2.module2])\n\n**Client**\n\n.. code-block:: python\n\n  import container\n\n  object_graph = container.builder.get_object_graph()\n\n  my_service = object_graph.provide(MyService)\n\n\n2. Django Example\n=================\n\nOne can define the builder in your settings.py and then import it\nin each app and add the configurations you need\n\n**In settings.py**\n\n.. code-block:: python\n\n  import object_graph.builder\n\n  object_graph_builder =  object_graph.builder.ObjectGraphBuilder()\n\n\n**App 1** in apps.App1Config.ready()\n\n.. code-block:: python\n\n  from config.settings import object_graph_builder\n  import pinject\n\n\n  class MyService(object):\n\t  def __init__(long_name: SomeReallyLongClassName):\n\t\t  self.my_dep = long_name\n\n  class MyBindingSpec(pinject.BindingSpec):\n\t   def configure(self, bind):\n\t\t   bind('long_name', to_class=SomeReallyLongClassName)\n\n  object_graph_builder.addBindingSpec(MyBindingSpec)\n\n**App 2**\nin apps.App2Config.ready()\n\n.. code-block:: python\n\n  from config.settings import object_graph_builder\n\n\n  object_graph_builder.addModules([app2.module1, app2.module2])\n\n**Client**\n\n.. code-block:: python\n\n  object_graph = object_graph_builder.get_object_graph()\n\n  my_service = object_graph.provide(MyService)\n\n\nEach time you call *object_graph_builder.get_object_graph()*, it will check if it needs to rebuild the object graph.\n\n\nPrepare for development\n-----------------------\n\nA Python 3.6+ interpreter is required in addition to pipenv.\n\n.. code-block:: bash\n\n    $ make init\n\n\nNow you're ready to run the tests:\n\n.. code-block:: bash\n\n    $ make test\n\n\nResources\n---------\n\n* `Documentation <https://object-graph-builder.readthedocs.io>`_\n* `Bug Tracker <https://github.com/eshta/object-graph-builder/issues>`_\n* `Code <https://github.com/eshta/object-graph-builder/>`_", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eshta/object-graph-builder", "keywords": "Dependency injection,dependency-injection,dependency-injection-container,dependency-injection-framework,design-patterns,factory,ioc,ioc-container,python,pinject,singleton", "license": "", "maintainer": "", "maintainer_email": "", "name": "object-graph-builder", "package_url": "https://pypi.org/project/object-graph-builder/", "platform": "", "project_url": "https://pypi.org/project/object-graph-builder/", "project_urls": {"Homepage": "https://github.com/eshta/object-graph-builder"}, "release_url": "https://pypi.org/project/object-graph-builder/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Provides an interface to build the dependency injection container.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"object-graph-builder\">\n<h2>object-graph-builder</h2>\n<a href=\"https://pypi.org/project/object-graph-builder/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/208643b568a56600d7531ea80ec03d2092fde659/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6f626a6563742d67726170682d6275696c6465722e737667\"></a>\n<a href=\"https://coveralls.io/github/eshta/object-graph-builder\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0112f7493bcdf51a80347c06b963762a22085d90/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f65736874612f6f626a6563742d67726170682d6275696c6465722f62616467652e737667\"></a>\n<a href=\"https://object-graph-builder.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/753eeb0fadb1e7cb08c54330d4dfe56c5b2fc237/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6f626a6563742d67726170682d6275696c6465722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/eshta/object-graph-builder\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/eshta/object-graph-builder.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/039ea9dc05a615dae03348091a034bc882f491ea/68747470733a2f2f7472617669732d63692e6f72672f65736874612f6f626a6563742d67726170682d6275696c6465722e7376673f6272616e63683d6d6173746572\"></a>\n<p>Provides a multi-step dependency injection container builder to allow adding/recreating object graphs in different stages through an app life-cycle</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Offering a container builder, so one can dynamically build the object graph with many apps adding their specs, classes, modules</li>\n<li>Dependency Injection Container (<a href=\"https://github.com/google/pinject\" rel=\"nofollow\">pinject</a>)</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>Python 3.6+</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n</div>\n</div>\n<div id=\"framework-agnostic-app\">\n<h2>1. Framework Agnostic App</h2>\n<p><strong>In container.py</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">object_graph.builder</span>\n\n<span class=\"n\">builder</span> <span class=\"o\">=</span>  <span class=\"n\">object_graph</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">ObjectGraphBuilder</span><span class=\"p\">()</span>\n</pre>\n<p><strong>App 1</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">container</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pinject</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyService</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">long_name</span><span class=\"p\">:</span> <span class=\"n\">SomeReallyLongClassName</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_dep</span> <span class=\"o\">=</span> <span class=\"n\">long_name</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyBindingSpec</span><span class=\"p\">(</span><span class=\"n\">pinject</span><span class=\"o\">.</span><span class=\"n\">BindingSpec</span><span class=\"p\">):</span>\n         <span class=\"k\">def</span> <span class=\"nf\">configure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bind</span><span class=\"p\">):</span>\n                 <span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"s1\">'long_name'</span><span class=\"p\">,</span> <span class=\"n\">to_class</span><span class=\"o\">=</span><span class=\"n\">SomeReallyLongClassName</span><span class=\"p\">)</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">addBindingSpec</span><span class=\"p\">(</span><span class=\"n\">MyBindingSpec</span><span class=\"p\">)</span>\n</pre>\n<p><strong>App 2</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">container</span>\n\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">addModules</span><span class=\"p\">([</span><span class=\"n\">app2</span><span class=\"o\">.</span><span class=\"n\">module1</span><span class=\"p\">,</span> <span class=\"n\">app2</span><span class=\"o\">.</span><span class=\"n\">module2</span><span class=\"p\">])</span>\n</pre>\n<p><strong>Client</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">container</span>\n\n<span class=\"n\">object_graph</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">get_object_graph</span><span class=\"p\">()</span>\n\n<span class=\"n\">my_service</span> <span class=\"o\">=</span> <span class=\"n\">object_graph</span><span class=\"o\">.</span><span class=\"n\">provide</span><span class=\"p\">(</span><span class=\"n\">MyService</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"django-example\">\n<h2>2. Django Example</h2>\n<p>One can define the builder in your settings.py and then import it\nin each app and add the configurations you need</p>\n<p><strong>In settings.py</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">object_graph.builder</span>\n\n<span class=\"n\">object_graph_builder</span> <span class=\"o\">=</span>  <span class=\"n\">object_graph</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">ObjectGraphBuilder</span><span class=\"p\">()</span>\n</pre>\n<p><strong>App 1</strong> in apps.App1Config.ready()</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config.settings</span> <span class=\"kn\">import</span> <span class=\"n\">object_graph_builder</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pinject</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyService</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">long_name</span><span class=\"p\">:</span> <span class=\"n\">SomeReallyLongClassName</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">my_dep</span> <span class=\"o\">=</span> <span class=\"n\">long_name</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyBindingSpec</span><span class=\"p\">(</span><span class=\"n\">pinject</span><span class=\"o\">.</span><span class=\"n\">BindingSpec</span><span class=\"p\">):</span>\n         <span class=\"k\">def</span> <span class=\"nf\">configure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bind</span><span class=\"p\">):</span>\n                 <span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"s1\">'long_name'</span><span class=\"p\">,</span> <span class=\"n\">to_class</span><span class=\"o\">=</span><span class=\"n\">SomeReallyLongClassName</span><span class=\"p\">)</span>\n\n<span class=\"n\">object_graph_builder</span><span class=\"o\">.</span><span class=\"n\">addBindingSpec</span><span class=\"p\">(</span><span class=\"n\">MyBindingSpec</span><span class=\"p\">)</span>\n</pre>\n<p><strong>App 2</strong>\nin apps.App2Config.ready()</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config.settings</span> <span class=\"kn\">import</span> <span class=\"n\">object_graph_builder</span>\n\n\n<span class=\"n\">object_graph_builder</span><span class=\"o\">.</span><span class=\"n\">addModules</span><span class=\"p\">([</span><span class=\"n\">app2</span><span class=\"o\">.</span><span class=\"n\">module1</span><span class=\"p\">,</span> <span class=\"n\">app2</span><span class=\"o\">.</span><span class=\"n\">module2</span><span class=\"p\">])</span>\n</pre>\n<p><strong>Client</strong></p>\n<pre><span class=\"n\">object_graph</span> <span class=\"o\">=</span> <span class=\"n\">object_graph_builder</span><span class=\"o\">.</span><span class=\"n\">get_object_graph</span><span class=\"p\">()</span>\n\n<span class=\"n\">my_service</span> <span class=\"o\">=</span> <span class=\"n\">object_graph</span><span class=\"o\">.</span><span class=\"n\">provide</span><span class=\"p\">(</span><span class=\"n\">MyService</span><span class=\"p\">)</span>\n</pre>\n<p>Each time you call <em>object_graph_builder.get_object_graph()</em>, it will check if it needs to rebuild the object graph.</p>\n<div id=\"prepare-for-development\">\n<h3>Prepare for development</h3>\n<p>A Python 3.6+ interpreter is required in addition to pipenv.</p>\n<pre>$ make init\n</pre>\n<p>Now you\u2019re ready to run the tests:</p>\n<pre>$ make <span class=\"nb\">test</span>\n</pre>\n</div>\n<div id=\"resources\">\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://object-graph-builder.readthedocs.io\" rel=\"nofollow\">Documentation</a></li>\n<li><a href=\"https://github.com/eshta/object-graph-builder/issues\" rel=\"nofollow\">Bug Tracker</a></li>\n<li><a href=\"https://github.com/eshta/object-graph-builder/\" rel=\"nofollow\">Code</a></li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5441235, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "6229b7c0b8db0464473795408e2b3007", "sha256": "2c8f054a1e7f317c2e332a4ba5cddb8afd59230582fd2871a26088b839d9a401"}, "downloads": -1, "filename": "object-graph-builder-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6229b7c0b8db0464473795408e2b3007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4508, "upload_time": "2019-06-24T15:44:43", "upload_time_iso_8601": "2019-06-24T15:44:43.164466Z", "url": "https://files.pythonhosted.org/packages/2e/df/c74c38afa6fe975846fe213260b12a980952f6236ef9d2478538e68c9ece/object-graph-builder-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6229b7c0b8db0464473795408e2b3007", "sha256": "2c8f054a1e7f317c2e332a4ba5cddb8afd59230582fd2871a26088b839d9a401"}, "downloads": -1, "filename": "object-graph-builder-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6229b7c0b8db0464473795408e2b3007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4508, "upload_time": "2019-06-24T15:44:43", "upload_time_iso_8601": "2019-06-24T15:44:43.164466Z", "url": "https://files.pythonhosted.org/packages/2e/df/c74c38afa6fe975846fe213260b12a980952f6236ef9d2478538e68c9ece/object-graph-builder-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:50 2020"}