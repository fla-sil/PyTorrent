{"info": {"author": "Paulo Mateus Moura da Silva (SrMouraSilva)", "author_email": "mateus.moura@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Multimedia :: Sound/Audio"], "description": "Pedal Pi - WebService\n=====================\n\n.. image:: https://travis-ci.org/PedalPi/WebService.svg?branch=master\n    :target: https://travis-ci.org/PedalPi/WebService\n    :alt: Build Status\n\n.. image:: https://codecov.io/gh/PedalPi/WebService/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/PedalPi/WebService\n    :alt: Code coverage\n\n.. image:: https://landscape.io/github/PedalPi/WebService/master/landscape.svg?style=flat\n    :target: https://landscape.io/github/PedalPi/WebService/master\n    :alt: Code Health\n\n**Pedal Pi - WebService** is a Pedal Pi component that offers a\nPedal Pi management over REST + WebSocket.\n\nWebService also supports auto discover: by publishing to the network using *zeroconf*,\nit offers a certain level of location transparency, allowing applications to connect to\nthe WebService with minimal user effort.\n\n**Documentation:**\n   http://pedalpi.github.io/WebService/\n\n**Code:**\n   https://github.com/PedalPi/WebService\n\n**Python Package Index:**\n   https://pypi.org/project/PedalPi-WebService\n\n**License:**\n   `Apache License 2.0`_\n\n.. _Apache License 2.0: https://github.com/PedalPi/WebService/blob/master/LICENSE\n\n\nUse\n---\n\nInstallation and dependencies\n*****************************\n\nMost dependencies will be installed through `pip`\n\n.. code-block:: bash\n\n    pip install PedalPi-WebService\n\nWebService, for its publication in the network for auto discover, needs the installation\nof `pybonjour-python3`_. On debian/ubuntu-based systems, run:\n\n.. code-block:: bash\n\n    sudo apt-get install libavahi-compat-libdnssd1\n    pip3 install git+https://github.com/depl0y/pybonjour-python3\n\n.. _pybonjour-python3: https://github.com/depl0y/pybonjour-python3\n\nConfiguring the component\n*************************\n\nPedalPi components enable the extension of `Pedal Pi - Application`_.\nThrough them, opening services are offered. A list of components can be found in the `Components repository`_.\n\nTo use this component, two steps are required:\n\n.. _Pedal Pi - Application: http://pedalpi-application.readthedocs.io/en/latest/\n.. _Components repository: https://github.com/PedalPi/Components#list\n\n1. Registering the webservice in Application\n++++++++++++++++++++++++++++++++++++++++++++\n\nThe registration must occur before application initialization (``application.start``)\n\n.. code-block:: python\n\n    from application.application import Application\n    application = Application(path_data=\"data/\", address='localhost')\n\n    from webservice.webservice import WebService\n    application.register(WebService(application, port))\n\n2. Initialization of the web server\n+++++++++++++++++++++++++++++++++++\n\nThe Application documentation suggests using `signal.pause` so\nthat the program does not terminate at the end of initialization:\n`signal.pause` causes the program to be terminated only when it is\nrequested (`Ctrl + C`).\n\nWhen we use PedalPi-WebService, we must replace the use of `signal.pause`\nby initializing the web server. This is done using the following\nlines of code:\n\n.. code-block:: python\n\n    application.start()\n\n    import tornado\n    try:\n        tornado.ioloop.IOLoop.current().start()\n    except KeyboardInterrupt:\n        application.stop()\n\n    # Not more necessary\n    #from signal import pause\n    #try:\n    #    pause()\n    #except KeyboardInterrupt:\n    #    application.stop()\n\nConfig file\n+++++++++++\n\nThe code for starting the Application using the WebService component\nlook like the following code:\n\n.. code-block:: python\n\n    from application.application import Application\n    application = Application(path_data=\"data/\", address='localhost')\n\n    from webservice.webservice import WebService\n    application.register(WebService(application, port))\n\n    application.start()\n\n    import tornado\n    tornado.ioloop.IOLoop.current().start()\n\nAPI\n---\n\nRest\n****\n\nAPI documentation can be found at http://pedalpi.github.io/WebService/\n\nWebSocket\n*********\n\nCommunication via WebService basically consists of receiving updates\nabout the state of the application.\n\nWebService API documentation can be found at http://pedalpi.github.io/WebService/#websocket\n\nUsing in your client\n--------------------\n\nWebService disposes the Application features in a web service. These projects uses it for control:\n\n* `Apk`_: App controller for smart devices and navigators.\n\n.. _Apk: https://github.com/PedalPi/Apk\n\nIf you are using too, please, send a pull request for this project.\n\n\nMaintenance\n-----------\n\nDocumentation\n*************\n\n.. code-block:: bash\n\n    # Installing dependencies\n    npm install -g aglio\n\n    # Generate doc\n    cd docs/\n    aglio -i documentation.apib --theme-variables streak --theme-template triple -o index.html\n\n    # View documentation\n    firefox index.html\n\nTest\n****\n\n.. code-block:: bash\n\n    # if number != 0 error\n    sh -c 'coverage3 run --source=webservice wstest/config.py test'; echo $?\n\n    coverage3 run --source=webservice wstest/config.py test\n    coverage3 report\n    coverage3 html\n    firefox htmlcov/index.html\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PedalPi/WebService", "keywords": "pedal-pi mod-host lv2 audio plugins-manager pedal-pi-component", "license": "Apache Software License v2", "maintainer": "", "maintainer_email": "", "name": "PedalPi-WebService", "package_url": "https://pypi.org/project/PedalPi-WebService/", "platform": "Linux", "project_url": "https://pypi.org/project/PedalPi-WebService/", "project_urls": {"Homepage": "https://github.com/PedalPi/WebService"}, "release_url": "https://pypi.org/project/PedalPi-WebService/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "WebService (REST and WebSocket) to access and controller your Pedal Pi pedals set configurations", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/PedalPi/WebService\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c033c01ceb879dcb09e59ff92bdedf3352d75a7/68747470733a2f2f7472617669732d63692e6f72672f506564616c50692f576562536572766963652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/PedalPi/WebService\" rel=\"nofollow\"><img alt=\"Code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/553a732a60b0ae6952e66cd2e78621aa1bd129cd/68747470733a2f2f636f6465636f762e696f2f67682f506564616c50692f576562536572766963652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://landscape.io/github/PedalPi/WebService/master\" rel=\"nofollow\"><img alt=\"Code Health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34326b661999443a03180740d7c2bc8261e8c7b9/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f506564616c50692f576562536572766963652f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a>\n<p><strong>Pedal Pi - WebService</strong> is a Pedal Pi component that offers a\nPedal Pi management over REST + WebSocket.</p>\n<p>WebService also supports auto discover: by publishing to the network using <em>zeroconf</em>,\nit offers a certain level of location transparency, allowing applications to connect to\nthe WebService with minimal user effort.</p>\n<dl>\n<dt><strong>Documentation:</strong></dt>\n<dd><a href=\"http://pedalpi.github.io/WebService/\" rel=\"nofollow\">http://pedalpi.github.io/WebService/</a></dd>\n<dt><strong>Code:</strong></dt>\n<dd><a href=\"https://github.com/PedalPi/WebService\" rel=\"nofollow\">https://github.com/PedalPi/WebService</a></dd>\n<dt><strong>Python Package Index:</strong></dt>\n<dd><a href=\"https://pypi.org/project/PedalPi-WebService\" rel=\"nofollow\">https://pypi.org/project/PedalPi-WebService</a></dd>\n<dt><strong>License:</strong></dt>\n<dd><a href=\"https://github.com/PedalPi/WebService/blob/master/LICENSE\" rel=\"nofollow\">Apache License 2.0</a></dd>\n</dl>\n<div id=\"use\">\n<h2>Use</h2>\n<div id=\"installation-and-dependencies\">\n<h3>Installation and dependencies</h3>\n<p>Most dependencies will be installed through <cite>pip</cite></p>\n<pre>pip install PedalPi-WebService\n</pre>\n<p>WebService, for its publication in the network for auto discover, needs the installation\nof <a href=\"https://github.com/depl0y/pybonjour-python3\" rel=\"nofollow\">pybonjour-python3</a>. On debian/ubuntu-based systems, run:</p>\n<pre>sudo apt-get install libavahi-compat-libdnssd1\npip3 install git+https://github.com/depl0y/pybonjour-python3\n</pre>\n</div>\n<div id=\"configuring-the-component\">\n<h3>Configuring the component</h3>\n<p>PedalPi components enable the extension of <a href=\"http://pedalpi-application.readthedocs.io/en/latest/\" rel=\"nofollow\">Pedal Pi - Application</a>.\nThrough them, opening services are offered. A list of components can be found in the <a href=\"https://github.com/PedalPi/Components#list\" rel=\"nofollow\">Components repository</a>.</p>\n<p>To use this component, two steps are required:</p>\n<div id=\"registering-the-webservice-in-application\">\n<h4>1. Registering the webservice in Application</h4>\n<p>The registration must occur before application initialization (<tt>application.start</tt>)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">application.application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">path_data</span><span class=\"o\">=</span><span class=\"s2\">\"data/\"</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">webservice.webservice</span> <span class=\"kn\">import</span> <span class=\"n\">WebService</span>\n<span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">WebService</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"initialization-of-the-web-server\">\n<h4>2. Initialization of the web server</h4>\n<p>The Application documentation suggests using <cite>signal.pause</cite> so\nthat the program does not terminate at the end of initialization:\n<cite>signal.pause</cite> causes the program to be terminated only when it is\nrequested (<cite>Ctrl + C</cite>).</p>\n<p>When we use PedalPi-WebService, we must replace the use of <cite>signal.pause</cite>\nby initializing the web server. This is done using the following\nlines of code:</p>\n<pre><span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">tornado</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">ioloop</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n    <span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Not more necessary</span>\n<span class=\"c1\">#from signal import pause</span>\n<span class=\"c1\">#try:</span>\n<span class=\"c1\">#    pause()</span>\n<span class=\"c1\">#except KeyboardInterrupt:</span>\n<span class=\"c1\">#    application.stop()</span>\n</pre>\n</div>\n<div id=\"config-file\">\n<h4>Config file</h4>\n<p>The code for starting the Application using the WebService component\nlook like the following code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">application.application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">path_data</span><span class=\"o\">=</span><span class=\"s2\">\"data/\"</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">webservice.webservice</span> <span class=\"kn\">import</span> <span class=\"n\">WebService</span>\n<span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">WebService</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">))</span>\n\n<span class=\"n\">application</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">tornado</span>\n<span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">ioloop</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<div id=\"rest\">\n<h3>Rest</h3>\n<p>API documentation can be found at <a href=\"http://pedalpi.github.io/WebService/\" rel=\"nofollow\">http://pedalpi.github.io/WebService/</a></p>\n</div>\n<div id=\"websocket\">\n<h3>WebSocket</h3>\n<p>Communication via WebService basically consists of receiving updates\nabout the state of the application.</p>\n<p>WebService API documentation can be found at <a href=\"http://pedalpi.github.io/WebService/#websocket\" rel=\"nofollow\">http://pedalpi.github.io/WebService/#websocket</a></p>\n</div>\n</div>\n<div id=\"using-in-your-client\">\n<h2>Using in your client</h2>\n<p>WebService disposes the Application features in a web service. These projects uses it for control:</p>\n<ul>\n<li><a href=\"https://github.com/PedalPi/Apk\" rel=\"nofollow\">Apk</a>: App controller for smart devices and navigators.</li>\n</ul>\n<p>If you are using too, please, send a pull request for this project.</p>\n</div>\n<div id=\"maintenance\">\n<h2>Maintenance</h2>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<pre><span class=\"c1\"># Installing dependencies\n</span>npm install -g aglio\n\n<span class=\"c1\"># Generate doc\n</span><span class=\"nb\">cd</span> docs/\naglio -i documentation.apib --theme-variables streak --theme-template triple -o index.html\n\n<span class=\"c1\"># View documentation\n</span>firefox index.html\n</pre>\n</div>\n<div id=\"test\">\n<h3>Test</h3>\n<pre><span class=\"c1\"># if number != 0 error\n</span>sh -c <span class=\"s1\">'coverage3 run --source=webservice wstest/config.py test'</span><span class=\"p\">;</span> <span class=\"nb\">echo</span> <span class=\"nv\">$?</span>\n\ncoverage3 run --source<span class=\"o\">=</span>webservice wstest/config.py <span class=\"nb\">test</span>\ncoverage3 report\ncoverage3 html\nfirefox htmlcov/index.html\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2915456, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "3d620be94969be458785efca614c386f", "sha256": "ccec3395480268289c7fbc54985cfe4c25ca10d55226d1697c8098080e1a86d8"}, "downloads": -1, "filename": "PedalPi-WebService-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3d620be94969be458785efca614c386f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16628, "upload_time": "2017-05-14T00:57:23", "upload_time_iso_8601": "2017-05-14T00:57:23.356992Z", "url": "https://files.pythonhosted.org/packages/32/79/b4d6842193c69893baeb2a39ccf9aa70237fad497376b2e90c4e95fa89f4/PedalPi-WebService-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3a8cc3e9043dc835c7fd34b562e93cee", "sha256": "edd584a0c01812622c2128d10a545bea18fe13eb7dbd89813db3623697b2a3a3"}, "downloads": -1, "filename": "PedalPi-WebService-0.3.0.tar.gz", "has_sig": false, "md5_digest": "3a8cc3e9043dc835c7fd34b562e93cee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17366, "upload_time": "2017-06-01T02:37:22", "upload_time_iso_8601": "2017-06-01T02:37:22.552641Z", "url": "https://files.pythonhosted.org/packages/02/16/c456eb372e748f1111872ad1b4fe1868e479cb036336bf781e563ecddad4/PedalPi-WebService-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a8cc3e9043dc835c7fd34b562e93cee", "sha256": "edd584a0c01812622c2128d10a545bea18fe13eb7dbd89813db3623697b2a3a3"}, "downloads": -1, "filename": "PedalPi-WebService-0.3.0.tar.gz", "has_sig": false, "md5_digest": "3a8cc3e9043dc835c7fd34b562e93cee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17366, "upload_time": "2017-06-01T02:37:22", "upload_time_iso_8601": "2017-06-01T02:37:22.552641Z", "url": "https://files.pythonhosted.org/packages/02/16/c456eb372e748f1111872ad1b4fe1868e479cb036336bf781e563ecddad4/PedalPi-WebService-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:53 2020"}