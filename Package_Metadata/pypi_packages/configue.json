{"info": {"author": "Illuin Technology", "author_email": "contact@illuin.tech", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "Configue\n========\n\nA YAML parser with advanced functionalities to ease your application configuration.\n\n# Who is this library for ?\nThis library is meant to be used in medium to large-scale applications, that have a lot of parameters to configure. \n\nModular applications especially can greatly benefit from using `configue` to easily inject new modules.\n\n# Installation\n\nRun `pip install configue` to install from PyPI.\n\nRun `pip install .` to install from sources.\n\n# Usage\n\n### Basic usage\nThis library uses [PyYAML](https://github.com/yaml/pyyaml) to parse the YAML files and return the file content.\n\n```python\nfrom configue import load_config_from_file\n\n\nconfig = load_config_from_file(\"/path/to/yaml/file.yml\")\n```\n\n### Instantiating classes\n\nUse `()` in your YAML files to instantiate classes:\n```yaml\n# config.yml\n(): \"my_project.MyAwesomeClass\"\nmy_argument: \"my_value\"\nmy_other_argument:\n  (): \"my_project.my_module.MyOtherClass\"\n```\n\n```python\nfrom configue import load_config_from_file\nfrom my_project import MyAwesomeClass\nfrom my_project.my_module import MyOtherClass\n\n\nmy_instance = load_config_from_file(\"config.yml\")\nassert isinstance(my_instance, MyAwesomeClass)\nassert my_instance.my_argument == \"my_value\"\nassert isinstance(my_instance.my_other_argument, MyOtherClass)\n```\n\nNote that the instance is lazy-loaded if it is contained in a list or a dictionary, it is only created when the element\nis called.\n\n### Loading external variables\n\n```yaml\n# config.yml\nmy_argument: ext://my_project.my_module.my_variable\n```\n\nWhen a value starts with `ext://`, the value will be imported from the corresponding python module.\n\n\n### Loading internal variables\n\n```yaml\n# config.yml\nmy_object:\n    my_instance:\n        (): my_project.MyClass\nmy_instance_shortcut: cfg://my_object.my_instance\n```\n\nWhen a value starts with `cfg://`, the value will be loaded from the same configuration file (useful for a DRY\nconfiguration).\n\n### Environment variables\n\nIf you want to load an environment variable in your YAML config file, you can use this syntax:\n```yaml\n# config.yml\nmy_key: ${var_name}\n```\nThis will resolve as `\"my_value\"` if the environment variable `var_name` is set to this value.\n\nIf you need a default value in case the environment variable is not set:\n```yaml\n# config.yml\nmy_key: ${var_name-default}\n```\n\nYou can insert this syntax in the middle of a string:\n```yaml\n# config.yml\nmy_key: prefix${var_name-default}suffix\n```\nThis will resolve as `\"prefixmy_value_suffix\"` if the value is set, `\"prefixdefaultsuffix\"` if it is not.\n\nIf your value string starts with a special character (`%-.[]{},?:*&!|>\\`), you need to quote it for the YAML parser.\nUnfortunately, this breaks the detection of the `${}` pattern. You have to use this syntax instead:\n```yaml\nmy_final_key: !env \"{${var_name}}\"\n```\nThis will resolve as `\"{my_value}\"`.\n\nIn all those examples, if both the variable and the default value are not defined, the value is replaced by an empty\nstring, and then the field value is cast by the yaml loader (`\"\"` becomes `None`, `\"10\"` becomes `10`, and `\"true\"`\nbecomes `True`).\n\n#### Lists in environment variables\nYou can store a list in your environment variable, and use this syntax to split it on commas:\n```yaml\n# config.yml\nmy_list: !list ${my_var}\n```\nwith `my_var=my_first_value,my_second_value`\n\nThis will resolve as `[\"my_value\", \"my_second_value\"]`.\n\n\n### Relative paths\n\nIf you want to expand a relative path in your YAML config file:\n\n````yaml\n# config.yml\nmy_path: !path my_folder/my_file.txt  \n````\nAssuming your file structure looks like this:\n```\nroot/\n\u251c\u2500\u2500 config.yml\n\u251c\u2500\u2500 my_folder\n    \u251c\u2500\u2500 my_file.txt\n```\n\nThe path is resolved starting from the folder containing the parent yml file, this example will resolve to\n`/root/my_folder/my_file.txt`\n\nDo not start the path with `/` as it will be treated as an absolute path instead.\n\nYou can use environment variables in your file path.\n\n### Importing other files\n\nYou can import another file directly in your YAML config file:\n\n````yaml\n# config.yml\nmy_import: !import my_folder/my_other_config.yml\n````\n\n```yaml\n# my_other_config.yml\n- var_1\n- var_2\n```\n\nThe path is resolved starting from the folder containing the parent yml file, this example will resolve to\n`\"my_import\": [var_1, var_2]`\n\nDo not start the import path with `/` as it will be treated as an absolute path instead.\n\nYou can use environment variables in your import path.\n\n# Testing\n\nInstall the development dependencies with `pip install -r dev.requirements.txt`.\n\nRun `python -m unitttest discover` to run the tests.\n\nRun `pylint configue` to check the files linting.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/illuin-tech/configue/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "configue", "package_url": "https://pypi.org/project/configue/", "platform": "any", "project_url": "https://pypi.org/project/configue/", "project_urls": {"Homepage": "https://github.com/illuin-tech/configue/"}, "release_url": "https://pypi.org/project/configue/3.0.3/", "requires_dist": ["pyyaml (<6.0.0,>=5.1.0)"], "requires_python": ">=3.6,<4.0", "summary": "Helpers to load your application configuration from YAML files", "version": "3.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Configue</h1>\n<p>A YAML parser with advanced functionalities to ease your application configuration.</p>\n<h1>Who is this library for ?</h1>\n<p>This library is meant to be used in medium to large-scale applications, that have a lot of parameters to configure.</p>\n<p>Modular applications especially can greatly benefit from using <code>configue</code> to easily inject new modules.</p>\n<h1>Installation</h1>\n<p>Run <code>pip install configue</code> to install from PyPI.</p>\n<p>Run <code>pip install .</code> to install from sources.</p>\n<h1>Usage</h1>\n<h3>Basic usage</h3>\n<p>This library uses <a href=\"https://github.com/yaml/pyyaml\" rel=\"nofollow\">PyYAML</a> to parse the YAML files and return the file content.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configue</span> <span class=\"kn\">import</span> <span class=\"n\">load_config_from_file</span>\n\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">load_config_from_file</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/yaml/file.yml\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Instantiating classes</h3>\n<p>Use <code>()</code> in your YAML files to instantiate classes:</p>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">()</span><span class=\"p\">:</span> <span class=\"s\">\"my_project.MyAwesomeClass\"</span>\n<span class=\"nt\">my_argument</span><span class=\"p\">:</span> <span class=\"s\">\"my_value\"</span>\n<span class=\"nt\">my_other_argument</span><span class=\"p\">:</span>\n  <span class=\"nt\">()</span><span class=\"p\">:</span> <span class=\"s\">\"my_project.my_module.MyOtherClass\"</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">configue</span> <span class=\"kn\">import</span> <span class=\"n\">load_config_from_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_project</span> <span class=\"kn\">import</span> <span class=\"n\">MyAwesomeClass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_project.my_module</span> <span class=\"kn\">import</span> <span class=\"n\">MyOtherClass</span>\n\n\n<span class=\"n\">my_instance</span> <span class=\"o\">=</span> <span class=\"n\">load_config_from_file</span><span class=\"p\">(</span><span class=\"s2\">\"config.yml\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">my_instance</span><span class=\"p\">,</span> <span class=\"n\">MyAwesomeClass</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">my_instance</span><span class=\"o\">.</span><span class=\"n\">my_argument</span> <span class=\"o\">==</span> <span class=\"s2\">\"my_value\"</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">my_instance</span><span class=\"o\">.</span><span class=\"n\">my_other_argument</span><span class=\"p\">,</span> <span class=\"n\">MyOtherClass</span><span class=\"p\">)</span>\n</pre>\n<p>Note that the instance is lazy-loaded if it is contained in a list or a dictionary, it is only created when the element\nis called.</p>\n<h3>Loading external variables</h3>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">my_argument</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ext://my_project.my_module.my_variable</span>\n</pre>\n<p>When a value starts with <code>ext://</code>, the value will be imported from the corresponding python module.</p>\n<h3>Loading internal variables</h3>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">my_object</span><span class=\"p\">:</span>\n    <span class=\"nt\">my_instance</span><span class=\"p\">:</span>\n        <span class=\"nt\">()</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_project.MyClass</span>\n<span class=\"nt\">my_instance_shortcut</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">cfg://my_object.my_instance</span>\n</pre>\n<p>When a value starts with <code>cfg://</code>, the value will be loaded from the same configuration file (useful for a DRY\nconfiguration).</p>\n<h3>Environment variables</h3>\n<p>If you want to load an environment variable in your YAML config file, you can use this syntax:</p>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">my_key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">${var_name}</span>\n</pre>\n<p>This will resolve as <code>\"my_value\"</code> if the environment variable <code>var_name</code> is set to this value.</p>\n<p>If you need a default value in case the environment variable is not set:</p>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">my_key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">${var_name-default}</span>\n</pre>\n<p>You can insert this syntax in the middle of a string:</p>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">my_key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">prefix${var_name-default}suffix</span>\n</pre>\n<p>This will resolve as <code>\"prefixmy_value_suffix\"</code> if the value is set, <code>\"prefixdefaultsuffix\"</code> if it is not.</p>\n<p>If your value string starts with a special character (<code>%-.[]{},?:*&amp;!|&gt;\\</code>), you need to quote it for the YAML parser.\nUnfortunately, this breaks the detection of the <code>${}</code> pattern. You have to use this syntax instead:</p>\n<pre><span class=\"nt\">my_final_key</span><span class=\"p\">:</span> <span class=\"kt\">!env</span> <span class=\"s\">\"{${var_name}}\"</span>\n</pre>\n<p>This will resolve as <code>\"{my_value}\"</code>.</p>\n<p>In all those examples, if both the variable and the default value are not defined, the value is replaced by an empty\nstring, and then the field value is cast by the yaml loader (<code>\"\"</code> becomes <code>None</code>, <code>\"10\"</code> becomes <code>10</code>, and <code>\"true\"</code>\nbecomes <code>True</code>).</p>\n<h4>Lists in environment variables</h4>\n<p>You can store a list in your environment variable, and use this syntax to split it on commas:</p>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">my_list</span><span class=\"p\">:</span> <span class=\"kt\">!list</span> <span class=\"l l-Scalar l-Scalar-Plain\">${my_var}</span>\n</pre>\n<p>with <code>my_var=my_first_value,my_second_value</code></p>\n<p>This will resolve as <code>[\"my_value\", \"my_second_value\"]</code>.</p>\n<h3>Relative paths</h3>\n<p>If you want to expand a relative path in your YAML config file:</p>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">my_path</span><span class=\"p\">:</span> <span class=\"kt\">!path</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_folder/my_file.txt</span>  \n</pre>\n<p>Assuming your file structure looks like this:</p>\n<pre><code>root/\n\u251c\u2500\u2500 config.yml\n\u251c\u2500\u2500 my_folder\n    \u251c\u2500\u2500 my_file.txt\n</code></pre>\n<p>The path is resolved starting from the folder containing the parent yml file, this example will resolve to\n<code>/root/my_folder/my_file.txt</code></p>\n<p>Do not start the path with <code>/</code> as it will be treated as an absolute path instead.</p>\n<p>You can use environment variables in your file path.</p>\n<h3>Importing other files</h3>\n<p>You can import another file directly in your YAML config file:</p>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">my_import</span><span class=\"p\">:</span> <span class=\"kt\">!import</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_folder/my_other_config.yml</span>\n</pre>\n<pre><span class=\"c1\"># my_other_config.yml</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">var_1</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">var_2</span>\n</pre>\n<p>The path is resolved starting from the folder containing the parent yml file, this example will resolve to\n<code>\"my_import\": [var_1, var_2]</code></p>\n<p>Do not start the import path with <code>/</code> as it will be treated as an absolute path instead.</p>\n<p>You can use environment variables in your import path.</p>\n<h1>Testing</h1>\n<p>Install the development dependencies with <code>pip install -r dev.requirements.txt</code>.</p>\n<p>Run <code>python -m unitttest discover</code> to run the tests.</p>\n<p>Run <code>pylint configue</code> to check the files linting.</p>\n\n          </div>"}, "last_serial": 6741982, "releases": {"3.0.0": [{"comment_text": "", "digests": {"md5": "bca28c8704740815c608f84acbcc1e56", "sha256": "7ec880efb6d767e3ef5c0e45bbb8fc76cf77f3ed7210616a15811392bd4c1841"}, "downloads": -1, "filename": "configue-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bca28c8704740815c608f84acbcc1e56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5945, "upload_time": "2020-02-22T15:43:51", "upload_time_iso_8601": "2020-02-22T15:43:51.523263Z", "url": "https://files.pythonhosted.org/packages/83/2e/1d5ed7969bc45ad055b2a949cd1f18848870239be0dbde086ee2cc5e6b0c/configue-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20a126eacf04df894ff43ef029ec707f", "sha256": "270203aae4fa0eb428aaacf8c7e038d3fee5e387ebcbac920e885644810bb858"}, "downloads": -1, "filename": "configue-3.0.0.tar.gz", "has_sig": false, "md5_digest": "20a126eacf04df894ff43ef029ec707f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5506, "upload_time": "2020-02-22T15:43:53", "upload_time_iso_8601": "2020-02-22T15:43:53.453841Z", "url": "https://files.pythonhosted.org/packages/eb/eb/a3b326b6601f3d62d70abdc5c005c9f5a4483882f171e30d283b4ea0e0f0/configue-3.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "63912498d433d503eb6399d9f364fee6", "sha256": "a0f3a8d8d9f186fc460d9e9a6f31fc504a7b413e7f52ae44c024804e98923621"}, "downloads": -1, "filename": "configue-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "63912498d433d503eb6399d9f364fee6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7638, "upload_time": "2020-02-22T16:00:22", "upload_time_iso_8601": "2020-02-22T16:00:22.516123Z", "url": "https://files.pythonhosted.org/packages/5b/fa/8892e1d3e4ff33ed5475068792e1eb1c0f8a8bb7003eacda3d801acb54c8/configue-3.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97e2ffa5d86ad0a2496929eff7c5098c", "sha256": "b1c3f623193f1b094e99a8dcae39f7db0ab80e6459ec14a6095cb20c7f0eea92"}, "downloads": -1, "filename": "configue-3.0.1.tar.gz", "has_sig": false, "md5_digest": "97e2ffa5d86ad0a2496929eff7c5098c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6149, "upload_time": "2020-02-22T16:00:23", "upload_time_iso_8601": "2020-02-22T16:00:23.728243Z", "url": "https://files.pythonhosted.org/packages/67/c9/d20032d540e20483cb14d0b08c76e0d7420d64c2e1a3f62aca86e710cc7e/configue-3.0.1.tar.gz", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "fe65388d3c9f531f5b1b0f36235a5731", "sha256": "d34d62d4c64342100c369a1ea2c2fb8bbaf3cd2192e5c701d5d7036ec80525fc"}, "downloads": -1, "filename": "configue-3.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fe65388d3c9f531f5b1b0f36235a5731", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7673, "upload_time": "2020-02-28T14:12:23", "upload_time_iso_8601": "2020-02-28T14:12:23.747828Z", "url": "https://files.pythonhosted.org/packages/eb/9b/6f489360fbc5af0d6e6dc1eba6c2ff9d54ce1ec203a5fb6551f7044f4ef7/configue-3.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3107d0126e54929f666e2fb4e4cdbd56", "sha256": "54861fd49078a4f96d618de89be3e55af4bb7cf346089650e2e4c2ff9665c682"}, "downloads": -1, "filename": "configue-3.0.2.tar.gz", "has_sig": false, "md5_digest": "3107d0126e54929f666e2fb4e4cdbd56", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6197, "upload_time": "2020-02-28T14:12:25", "upload_time_iso_8601": "2020-02-28T14:12:25.047352Z", "url": "https://files.pythonhosted.org/packages/12/90/e74580c120eb245286cb50db37a35019b46a6614bd9e3e494d348a3ba103/configue-3.0.2.tar.gz", "yanked": false}], "3.0.3": [{"comment_text": "", "digests": {"md5": "9b5018077481bb3a6328c6f46ae17101", "sha256": "f98b9b063b03ab04ac16dc02d0f98e69504f303272fac0b09625dfd5bdd745dd"}, "downloads": -1, "filename": "configue-3.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9b5018077481bb3a6328c6f46ae17101", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7666, "upload_time": "2020-03-03T16:41:06", "upload_time_iso_8601": "2020-03-03T16:41:06.705845Z", "url": "https://files.pythonhosted.org/packages/a4/91/eaff849fa2a9037309d0b04d985ad1f2095f51017f2b618e32b18bee5c8b/configue-3.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa3bacfc461e5045cf695c5e912dfdae", "sha256": "75fad9b74604bc3060bb3659ed44cdeed8cfcacc20c6d571e7fb12b954311575"}, "downloads": -1, "filename": "configue-3.0.3.tar.gz", "has_sig": false, "md5_digest": "aa3bacfc461e5045cf695c5e912dfdae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6185, "upload_time": "2020-03-03T16:41:07", "upload_time_iso_8601": "2020-03-03T16:41:07.918124Z", "url": "https://files.pythonhosted.org/packages/aa/8c/d7688e5dbba23bf0593b56e647e2c06d7e9c468aa81f581bf813123eb818/configue-3.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b5018077481bb3a6328c6f46ae17101", "sha256": "f98b9b063b03ab04ac16dc02d0f98e69504f303272fac0b09625dfd5bdd745dd"}, "downloads": -1, "filename": "configue-3.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9b5018077481bb3a6328c6f46ae17101", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7666, "upload_time": "2020-03-03T16:41:06", "upload_time_iso_8601": "2020-03-03T16:41:06.705845Z", "url": "https://files.pythonhosted.org/packages/a4/91/eaff849fa2a9037309d0b04d985ad1f2095f51017f2b618e32b18bee5c8b/configue-3.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa3bacfc461e5045cf695c5e912dfdae", "sha256": "75fad9b74604bc3060bb3659ed44cdeed8cfcacc20c6d571e7fb12b954311575"}, "downloads": -1, "filename": "configue-3.0.3.tar.gz", "has_sig": false, "md5_digest": "aa3bacfc461e5045cf695c5e912dfdae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6185, "upload_time": "2020-03-03T16:41:07", "upload_time_iso_8601": "2020-03-03T16:41:07.918124Z", "url": "https://files.pythonhosted.org/packages/aa/8c/d7688e5dbba23bf0593b56e647e2c06d7e9c468aa81f581bf813123eb818/configue-3.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:52 2020"}