{"info": {"author": "Colin Wren", "author_email": "gimpneek@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Pytest", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# notion-pytest-reporter\nA PyTest Reporter to send test runs to Notion.so and enable bi-directional \ntraceability.\n\n![Example Test Cycle Report](https://github.com/Gimpneek/notion-pytest-reporter/raw/master/images/test-cycle.png)\nTest Cycle Report - Shows Test Execution Results from run\n\n![Example Test Execution](https://github.com/Gimpneek/notion-pytest-reporter/raw/master/images/test-execution.png)\nTest Execution - Shows Stack trace if failed\n\n![Example Test Case](https://github.com/Gimpneek/notion-pytest-reporter/raw/master/images/test-case.png)\nTest Case - Shows Test Executions\n\n## How it works\n`notion-pytest-reporter` uses the unofficial Notion API to create new items in\nthe Test collection templates found here: [Test Report Template](https://www.notion.so/colinwren/Test-Reports-4415da888bf84457af49f18e9d25e62b)\n\nFor every test run `notion-pytest-reporter` will create a new Test Cycle and\nwithin the Test Cycle create a Test Execution.\n\nThe Test Execution can be linked to a Test Case using the `@pytest.mark.notion_test(test_name)` decorator \nwith the `test_name` argument being the title of the test case.\n\nIf a Test Case has been linked to a Test Execution then the Test Case page will\nbe updated to show that Test Execution allowing for bi-directional traceability\nbetween the executed test and the test case.\n\nIf the Test Case is linked to a user story or specification then you'll\nhave bi-directional traceability between the tests and the user story!\n\n## Running the reporter\nThe reporter takes the following arguments:\n\n| Argument              | Description                                |\n|-----------------------|--------------------------------------------|\n| `--notion-token`      | API token used to authenticate with Notion |\n| `--test-cycle-url`    | URL of the Test Cycle collection           |\n| `--test-case-url`     | URL of the Test Case collection            |\n| `--test-execution-url`| URL of the Test Execution collection       |\n| `--test-cycle-name`   | Name to use for the Test Cycle             |\n\nAll arguments execpt `--test-cycle-name` are required for the reporter to run.\n\n### Getting the Authentication Token and collections URLS\nIn order to get the authentication token used by the test reporter\nyou'll need to use the web version of Notion.\n\nOnce you've logged into Notion open the inspector panel on your web browser\nand locate the cookie named `token_v2` - the value stored in that cookie is\nauthentication token.\n\nThe Test Cycle and Test Case URLs are simpler to extract. \n\nRight click the Test Cycle page in the side navigation and select `Copy Link` to\nget the URL for the Test Cycle collection.\n\nRight click the Test Cases page in the side navigation and select `Copy Link` to\nget the URL for the Test Cases collection.\n\nRight click the Test Executions page in the side navigation and select `Copy Link` to\nget the URL for the Test Executions collection.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Gimpneek/notion-pytest-reporter", "keywords": "notion pytest reporter", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pytest-notion", "package_url": "https://pypi.org/project/pytest-notion/", "platform": "", "project_url": "https://pypi.org/project/pytest-notion/", "project_urls": {"Homepage": "https://github.com/Gimpneek/notion-pytest-reporter"}, "release_url": "https://pypi.org/project/pytest-notion/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "A PyTest Reporter to send test runs to Notion.so", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>notion-pytest-reporter</h1>\n<p>A PyTest Reporter to send test runs to Notion.so and enable bi-directional\ntraceability.</p>\n<p><img alt=\"Example Test Cycle Report\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0db7fd4a68f424c9599c5fa62fc26f075dc41a38/68747470733a2f2f6769746875622e636f6d2f47696d706e65656b2f6e6f74696f6e2d7079746573742d7265706f727465722f7261772f6d61737465722f696d616765732f746573742d6379636c652e706e67\">\nTest Cycle Report - Shows Test Execution Results from run</p>\n<p><img alt=\"Example Test Execution\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e2a25f3eec28d9828ab4116f8a5c8a5a7b13b76/68747470733a2f2f6769746875622e636f6d2f47696d706e65656b2f6e6f74696f6e2d7079746573742d7265706f727465722f7261772f6d61737465722f696d616765732f746573742d657865637574696f6e2e706e67\">\nTest Execution - Shows Stack trace if failed</p>\n<p><img alt=\"Example Test Case\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a7bf9e67a66a2fd966e7d2fb0984c9e6fdf36d4/68747470733a2f2f6769746875622e636f6d2f47696d706e65656b2f6e6f74696f6e2d7079746573742d7265706f727465722f7261772f6d61737465722f696d616765732f746573742d636173652e706e67\">\nTest Case - Shows Test Executions</p>\n<h2>How it works</h2>\n<p><code>notion-pytest-reporter</code> uses the unofficial Notion API to create new items in\nthe Test collection templates found here: <a href=\"https://www.notion.so/colinwren/Test-Reports-4415da888bf84457af49f18e9d25e62b\" rel=\"nofollow\">Test Report Template</a></p>\n<p>For every test run <code>notion-pytest-reporter</code> will create a new Test Cycle and\nwithin the Test Cycle create a Test Execution.</p>\n<p>The Test Execution can be linked to a Test Case using the <code>@pytest.mark.notion_test(test_name)</code> decorator\nwith the <code>test_name</code> argument being the title of the test case.</p>\n<p>If a Test Case has been linked to a Test Execution then the Test Case page will\nbe updated to show that Test Execution allowing for bi-directional traceability\nbetween the executed test and the test case.</p>\n<p>If the Test Case is linked to a user story or specification then you'll\nhave bi-directional traceability between the tests and the user story!</p>\n<h2>Running the reporter</h2>\n<p>The reporter takes the following arguments:</p>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--notion-token</code></td>\n<td>API token used to authenticate with Notion</td>\n</tr>\n<tr>\n<td><code>--test-cycle-url</code></td>\n<td>URL of the Test Cycle collection</td>\n</tr>\n<tr>\n<td><code>--test-case-url</code></td>\n<td>URL of the Test Case collection</td>\n</tr>\n<tr>\n<td><code>--test-execution-url</code></td>\n<td>URL of the Test Execution collection</td>\n</tr>\n<tr>\n<td><code>--test-cycle-name</code></td>\n<td>Name to use for the Test Cycle</td>\n</tr></tbody></table>\n<p>All arguments execpt <code>--test-cycle-name</code> are required for the reporter to run.</p>\n<h3>Getting the Authentication Token and collections URLS</h3>\n<p>In order to get the authentication token used by the test reporter\nyou'll need to use the web version of Notion.</p>\n<p>Once you've logged into Notion open the inspector panel on your web browser\nand locate the cookie named <code>token_v2</code> - the value stored in that cookie is\nauthentication token.</p>\n<p>The Test Cycle and Test Case URLs are simpler to extract.</p>\n<p>Right click the Test Cycle page in the side navigation and select <code>Copy Link</code> to\nget the URL for the Test Cycle collection.</p>\n<p>Right click the Test Cases page in the side navigation and select <code>Copy Link</code> to\nget the URL for the Test Cases collection.</p>\n<p>Right click the Test Executions page in the side navigation and select <code>Copy Link</code> to\nget the URL for the Test Executions collection.</p>\n\n          </div>"}, "last_serial": 5647360, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "53446a8cca8b2083b9c8e1c093a20c30", "sha256": "69117e66e5489e9ce5b8c4c7d64f8d04ac8883443b8d3dffcd5a0f273c1aad28"}, "downloads": -1, "filename": "pytest-notion-1.0.0.tar.gz", "has_sig": false, "md5_digest": "53446a8cca8b2083b9c8e1c093a20c30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4414, "upload_time": "2019-08-06T21:59:07", "upload_time_iso_8601": "2019-08-06T21:59:07.049223Z", "url": "https://files.pythonhosted.org/packages/00/be/fc9f76766e287a56c3c7cdc889b310e7023dbb6395be920b62fabb2896fa/pytest-notion-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "827e92910ac41a60286b59734254452c", "sha256": "79bef72c32ea3bc3684ac460b7686168a54c39737bdd872f2896c48d4b44667e"}, "downloads": -1, "filename": "pytest-notion-1.0.1.tar.gz", "has_sig": false, "md5_digest": "827e92910ac41a60286b59734254452c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4429, "upload_time": "2019-08-07T23:07:11", "upload_time_iso_8601": "2019-08-07T23:07:11.394698Z", "url": "https://files.pythonhosted.org/packages/4a/31/3ef409fd5cffd517a8f6ba12275a0c21e6723604e4d51029a4d4c74ac7e8/pytest-notion-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "827e92910ac41a60286b59734254452c", "sha256": "79bef72c32ea3bc3684ac460b7686168a54c39737bdd872f2896c48d4b44667e"}, "downloads": -1, "filename": "pytest-notion-1.0.1.tar.gz", "has_sig": false, "md5_digest": "827e92910ac41a60286b59734254452c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4429, "upload_time": "2019-08-07T23:07:11", "upload_time_iso_8601": "2019-08-07T23:07:11.394698Z", "url": "https://files.pythonhosted.org/packages/4a/31/3ef409fd5cffd517a8f6ba12275a0c21e6723604e4d51029a4d4c74ac7e8/pytest-notion-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:55 2020"}