{"info": {"author": "Fan Feng", "author_email": "fanfeng@umich.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# scHiCTools\n\n### Summary\nA computational toolbox for analyzing single cell Hi-C (high-throughput sequencing for 3C) data which includes functions for:\n1. Load single-cell HiC datasets\n2. Smoothing the contact maps with linear convolution, random walk or network enhancing\n3. Calculating embeddings for single cell HiC datasets efficiently with reproducibility measures include InnerProduct, fastHiCRep and Selfish\n\n### Installation\n  **Required Python Packages**\n  - Python (version >= 3.6)\n  - numpy (version >= 1.15.4)\n  - scipy (version >= 1.0)\n\n  **Install from GitHub**\n\n  You can install the package with following command:\n\n  ```console\n    $ git clone https://github.com/liu-bioinfo-lab/scHiCTools.git\n    $ cd scHiCTools\n    $ python setup.py install\n  ```\n\n  \n\n### Usage\n   **Supported Formats**\n\n  - Pre-processed Matrices:\n  If the data is already processed into matrices for intra-chromosomal contacts,\n  the chromosome from the same cell must be stored in the same folder with\n  chromosome names as file names (e.g., scHiC/cell_1/chr1.txt).\n  You only need to provide the folder name for a cell (e.g., scHiC/cell_1).\n    - npy: numpy.array / numpy.matrix\n    - npz: scipy.sparse.coo_matrix\n    - matrix: matrix stored as pure text\n    - matrix_txt: matrix stored as .txt file\n    - HiCRep: the format required by HiCRep package\n\n  - Edge List <br />\n   For all formats below:<br />\n   &nbsp; str - strand (forward / reverse)<br />\n   &nbsp; chr - chromosome<br />\n   &nbsp; pos - position<br />\n   &nbsp; score - contact reads<br />\n   &nbsp; frag - fragments (will be ignored)<br />\n   &nbsp; mapq - map quality<br />\n\n    - Shortest\n     ```\n    <chr1> <pos1> <chr2> <pos2>\n     ```\n    - Shortest_Score\n     ```\n    <chr1> <pos1> <chr2> <pos2> <score>\n     ```\n    - Short\n     ```\n    <str1> <chr1> <pos1> <frag1> <str2> <chr2> <pos2> <frag2>\n     ```\n    - Short_Score\n     ```\n    <str1> <chr1> <pos1> <frag1> <str2> <chr2> <pos2> <frag2> <score>\n     ```\n    - Medium\n     ```\n    <readname> <str1> <chr1> <pos1> <frag1> <str2> <chr2> <pos2> <frag2> <mapq1> <mapq2>\n     ```\n    - Long\n     ```\n    <str1> <chr1> <pos1> <frag1> <str2> <chr2> <pos2> <frag2> <mapq1> <cigar1> <sequence1> <mapq2> <cigar2> <sequence2> <readname1> <readname2>\n     ```\n    - 4DN\n     ```\n    ## pairs format v1.0\n    #columns: readID chr1 position1 chr2 position2 strand1 strand2\n     ```\n   - .hic format: we adapted \"straw\" from JuiceTools.\n\n   - .mcool format: we adapted \"dump\" from cool.\n\n   - Other formats: simply give the indices (start from 1) in the order of<br />\n \"chromosome1 - position1 - chromosome2 - position2 - score\" or<br />\n \"chromosome1 - position1 - chromosome2 - position2\" or<br />\n \"chromosome1 - position1 - chromosome2 - position2 - mapq1 - mapq2\".<br />\n   For example, you can provide \"2356\" or [2, 3, 5, 6] if the file takes this format:\n   ```\n   <name> <chromosome1> <position1> <frag1> <chromosome2> <position2> <frag2> <strand1> <strand2>\n   contact_1 chr1 3000000 1 chr1 3001000 1 + -\n   ```\n\n  **Import Package**\n  ```console\n  >>>import scHiCTools\n  ```\n\n  **Load scHiC data**\n\n  The scHiC data is stored in a series of files, with each of the files corresponding to one cell.\n  You need to specify the list of scHiC file paths.\n\n  Only intra-chromosomal interactions are counted.\n  ```console\n  >>>from scHiCTools import scHiCs\n  >>>files = ['./cell_1', './cell_2', './cell_3']\n  >>>loaded_data = scHiCs(\n  ... files, reference_genome='mm9',\n  ... resolution=500000, keep_n_strata=10,\n  ... format='customized', adjust_resolution=True,\n  ... customized_format=12345, header=0, chromosomes='except Y',\n  ... operations=['OE_norm', 'convolution']\n  ... )\n  ```\n  - reference genome (dict or str): now supporting 'mm9', 'mm10', 'hg19', 'hg38'.\n  If your reference genome is not in ['mm9', 'mm10', 'hg19', 'hg38'], you need to provide the lengths of chromosomes\n  you are going to use with a Python dict. e.g. {'chr1': 150000000, 'chr2': 130000000, 'chr3': 200000000}\n  - resolution (int): the resolution to separate genome into bins.\n  If using .hic file format, the given resolution must match with the resolutions in .hic file.\n  - keep_n_strata (None or int): only store contacts within n strata near the diagonal. Default: None.\n  If 'None', it will not store strata\n  - store_full_map (bool): whether store full contact maps in numpy matrices or\n  scipy sparse matrices\uff0cIf False, it will save memory.\n  - sparse (bool): whether to use sparse matrices\n  - format (str): file format, supported formats: 'shortest', 'shortest_score', 'short',\n  'short_score' , 'medium', 'long', '4DN', '.hic', '.mcool', 'npy', 'npz', 'matrix',\n  'HiCRep', 'matrix_txt' and 'customized'. Default: 'customized'.\n  - customized_format (int or str or list): the column indices in the order of\n  \"chromosome 1 - position 1 - chromosome 2 - position 2 - contact reads\" or\n  \"chromosome 1 - position 1 - chromosome 2 - position 2\" or\n  \"chromosome 1 - position 1 - chromosome 2 - position 2 - map quality 1 - map quality 2\".\n  e.g. if the line is \"chr1 5000000 chr2 3500000 2\", the format should be '12345' or [1, 2, 3, 4, 5]; if there is no column\n  indicating number of reads, you can just provide 4 numbers like '1234', and contact read will be set as 1.\n  Default: '12345'.\n  - adjust_resolution: whether to adjust resolution for the input file.\n  Sometimes the input file is already in the proper resolution (e.g. position 3000000 has already been changed to 6 with 500kb resolution).\n  For this situation you can set adjust_resolution=False. Default: True.\n  - map_filter (float): keep all contacts with mapq higher than this threshold. Default: 0.0\n  - header (int): how many header lines does the file have. Default: 0.\n  - chromosomes (list or str): chromosomes to use, eg. ['chr1', 'chr2'], or\n  just 'except Y', 'except XY', 'all'.\n  Default: 'all', which means chr 1-19 + XY for mouse and chr 1-22 + XY for human.\n  - operations (list or None): the operations use for pre-processing or smoothing the maps given in a list.\n  The operations will happen in the given order.\n  Supported operations: 'logarithm', 'power', 'convolution', 'random_walk',\n  'network_enhancing', 'OE_norm', 'VC_norm', 'VC_SQRT_norm', 'KR_norm'\u3002\n  Default: None.\n  - For preprocessing and smoothing operations, sometimes you need additional arguments\n  (introduced in next sub-section).\n\n  You can also skip pre-processing and smoothing in loading step (operations=None),\n  and do them in next lines:\n  ```console\n  >>>loaded_data.processing(['random_walk', 'network_enhancing'])\n  ```\n  But if you didn't store full map (i.e. store_full_map=False), processing is not\n  doable in a separate step.\n\n  **Pre-processing and Smoothing Operations**\n  - logarithm:\n  new_W_ij = log_(base) (W_ij + epsilon). Additional arguments:\n    - log_base: default: e\n    - epsilon: default: 1\n  - power: new_W_ij = (W_ij)^pow. Additional argument:\n    - pow: default: 0.5 (i.e., sqrt(W_ij))\n\n  - VC_norm: VC normalization - each value divided by the sum of\n  corresponding row then divided by the sum of corresponding column\n  - VC_SQRT_norm: VC_SQRT normalization - each value divided by the sqrt of the sum\n  of corresponding row then divided by the sqrt of the sum of corresponding column\n  - KR_norm: KR normalization - iterating until the sum of each row / column is one\n  Argument:\n    - maximum_error_rate (float): iteration ends when max error is smaller\n    than (maximum_error_rate). Default: 1e-4\n  - OE_norm: OE normalization -  each value divided by the average of its\n  corresponding strata (diagonal line)\n\n  - convolution: smoothing with a N by N convolution kernel, with each value equal to 1/N^2.\n  Argument:\n    - kernel_shape: an integer. e.g. kernel_shape=3 means a 3*3 matrix with each value = 1/9. Default: 3.\n  - Random walk: multiply by a transition matrix (also calculated from contact map itself).\n  Argument:\n    - random_walk_ratio: a value between 0 and 1, e.g. if ratio=0.9, the result will be\n    0.9 * matrix_after_random_walk + 0.1 * original_matrix. Default: 1.0.\n  - Network enhancing: transition matrix only comes from k-nearest neighbors of each line.\n  Arguments:\n    - kNN: value 'k' in kNN. Default: 20.\n    - iterations: number of iterations for network enhancing. Default: 1\n    - alpha: similar with random_walk_ratio. Default: 0.9\n\n  **Learn Embeddings**\n  ```console\n  >>>embs = loaded_data.learn embedding(\n  ... dim=2, similarity_method='inner_product', embedding_method='MDS',\n  ... n_strata=None, aggregation='median', return_distance=False\n  ... )\n  ```\n  This function will return the embeddings in the format of a numpy array with shape (#_of_cells, #_of_dimensions).\n  - dim (int): the dimension for the embedding\n  - similarity_method (str): reproducibility measure, 'InnerProduct', 'fastHiCRep' or\n  'Selfish'. Default: 'InnerProduct'\n  - embedding_method (str): 'MDS', 'tSNE' or 'UMAP'\n  - n_strata (int): only consider contacts within this genomic distance. Default: None.\n  If it is None, it will use the all strata kept (the argument keep_n_strata from\n  previous loading process). Thus n_strata and keep_n_strata (loading step) cannot be\n  None at the same time.\n  - aggregation (str): method to aggregate different chromosomes,\n  'mean' or 'median'. Default: 'median'.\n  - return_distance (bool): if True, return (embeddings, distance_matrix); if False, only return embeddings. Default: False.\n  - Some additional argument for Selfish:\n    - n_windows (int): split contact map into n windows, default: 10\n    - sigma (float): sigma in the Gaussian-like kernel: default: 1.6\n\n### Citation\nFan Feng, and Jie Liu. \"scHiCTools: a computational toolbox for analyzing single cell Hi-C data.\"\nbioRxiv (2019): 769513.\n\n### References\nA. R. Ardakany, F. Ay, and S. Lonardi.  Selfish: Discovery of differential chromatininteractions via a self-similarity measure.bioRxiv, 2019.\n\nN. C. Durand, J. T. Robinson, M. S. Shamim, I. Machol, J. P. Mesirov, E. S. Lander, and E. Lieberman Aiden. \"Juicebox provides a visualization system for Hi-C contact maps with unlimited zoom.\" Cell Systems 3(1), 2016.\n\nJ. Liu, D. Lin, G. Yardimci, and W. S. Noble. Unsupervised embedding of single-cellHi-C data.Bioinformatics, 34:96\u2013104, 2018.\n\nT. Nagano, Y. Lubling, C. V\u00e1rnai, C. Dudley, W. Leung, Y. Baran, N. M. Cohen,S.  Wingett,  P.  Fraser,  and  A.  Tanay.    Cell-cycle  dynamics  of  chromosomal organization at single-cell resolution.Nature, 547:61\u201367, 2017.\n\nB. Wang, A. Pourshafeie, M. Zitnik, J. Zhu, C. D. Bustamante, S. Batzoglou, andJ.  Leskovec.   Network  enhancement  as  a  general  method  to  denoise  weighted biological networks.Nature Communications, 9(1):3108, 2018.\n\nT. Yang, F. Zhang, G. G. Y. mc\u0131, F. Song, R. C. Hardison, W. S. Noble, F. Yue, andQ. Li. HiCRep: assessing the reproducibility of Hi-C data using a stratum-adjusted correlation coefficient.Genome Research, 27(11):1939\u20131949, 2017.\n\nG.  G.  Yard\u0131mc\u0131,   H.  Ozadam,   M.  E.  Sauria,   O.  Ursu,   K. K.  Yan,   T.  Yang,A. Chakraborty, A. Kaul, B. R. Lajoie, F. Song, et al. Measuring the reproducibilityand quality of hi-c data.Genome Biology, 20(1):57, 2019.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/liu-bioinfo-lab/scHiCTool", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "scHiCTools", "package_url": "https://pypi.org/project/scHiCTools/", "platform": "", "project_url": "https://pypi.org/project/scHiCTools/", "project_urls": {"Homepage": "https://github.com/liu-bioinfo-lab/scHiCTool"}, "release_url": "https://pypi.org/project/scHiCTools/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "A user-friendly package for processing single cell HiC data", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>scHiCTools</h1>\n<h3>Summary</h3>\n<p>A computational toolbox for analyzing single cell Hi-C (high-throughput sequencing for 3C) data which includes functions for:</p>\n<ol>\n<li>Load single-cell HiC datasets</li>\n<li>Smoothing the contact maps with linear convolution, random walk or network enhancing</li>\n<li>Calculating embeddings for single cell HiC datasets efficiently with reproducibility measures include InnerProduct, fastHiCRep and Selfish</li>\n</ol>\n<h3>Installation</h3>\n<p><strong>Required Python Packages</strong></p>\n<ul>\n<li>Python (version &gt;= 3.6)</li>\n<li>numpy (version &gt;= 1.15.4)</li>\n<li>scipy (version &gt;= 1.0)</li>\n</ul>\n<p><strong>Install from GitHub</strong></p>\n<p>You can install the package with following command:</p>\n<pre><span class=\"gp\">  $</span> git clone https://github.com/liu-bioinfo-lab/scHiCTools.git\n<span class=\"gp\">  $</span> <span class=\"nb\">cd</span> scHiCTools\n<span class=\"gp\">  $</span> python setup.py install\n</pre>\n<h3>Usage</h3>\n<p><strong>Supported Formats</strong></p>\n<ul>\n<li>\n<p>Pre-processed Matrices:\nIf the data is already processed into matrices for intra-chromosomal contacts,\nthe chromosome from the same cell must be stored in the same folder with\nchromosome names as file names (e.g., scHiC/cell_1/chr1.txt).\nYou only need to provide the folder name for a cell (e.g., scHiC/cell_1).</p>\n<ul>\n<li>npy: numpy.array / numpy.matrix</li>\n<li>npz: scipy.sparse.coo_matrix</li>\n<li>matrix: matrix stored as pure text</li>\n<li>matrix_txt: matrix stored as .txt file</li>\n<li>HiCRep: the format required by HiCRep package</li>\n</ul>\n</li>\n<li>\n<p>Edge List <br>\nFor all formats below:<br>\n\u00a0 str - strand (forward / reverse)<br>\n\u00a0 chr - chromosome<br>\n\u00a0 pos - position<br>\n\u00a0 score - contact reads<br>\n\u00a0 frag - fragments (will be ignored)<br>\n\u00a0 mapq - map quality<br></p>\n<ul>\n<li>Shortest</li>\n</ul>\n<pre><code>&lt;chr1&gt; &lt;pos1&gt; &lt;chr2&gt; &lt;pos2&gt;\n</code></pre>\n<ul>\n<li>Shortest_Score</li>\n</ul>\n<pre><code>&lt;chr1&gt; &lt;pos1&gt; &lt;chr2&gt; &lt;pos2&gt; &lt;score&gt;\n</code></pre>\n<ul>\n<li>Short</li>\n</ul>\n<pre><code>&lt;str1&gt; &lt;chr1&gt; &lt;pos1&gt; &lt;frag1&gt; &lt;str2&gt; &lt;chr2&gt; &lt;pos2&gt; &lt;frag2&gt;\n</code></pre>\n<ul>\n<li>Short_Score</li>\n</ul>\n<pre><code>&lt;str1&gt; &lt;chr1&gt; &lt;pos1&gt; &lt;frag1&gt; &lt;str2&gt; &lt;chr2&gt; &lt;pos2&gt; &lt;frag2&gt; &lt;score&gt;\n</code></pre>\n<ul>\n<li>Medium</li>\n</ul>\n<pre><code>&lt;readname&gt; &lt;str1&gt; &lt;chr1&gt; &lt;pos1&gt; &lt;frag1&gt; &lt;str2&gt; &lt;chr2&gt; &lt;pos2&gt; &lt;frag2&gt; &lt;mapq1&gt; &lt;mapq2&gt;\n</code></pre>\n<ul>\n<li>Long</li>\n</ul>\n<pre><code>&lt;str1&gt; &lt;chr1&gt; &lt;pos1&gt; &lt;frag1&gt; &lt;str2&gt; &lt;chr2&gt; &lt;pos2&gt; &lt;frag2&gt; &lt;mapq1&gt; &lt;cigar1&gt; &lt;sequence1&gt; &lt;mapq2&gt; &lt;cigar2&gt; &lt;sequence2&gt; &lt;readname1&gt; &lt;readname2&gt;\n</code></pre>\n<ul>\n<li>4DN</li>\n</ul>\n<pre><code>## pairs format v1.0\n#columns: readID chr1 position1 chr2 position2 strand1 strand2\n</code></pre>\n</li>\n<li>\n<p>.hic format: we adapted \"straw\" from JuiceTools.</p>\n</li>\n<li>\n<p>.mcool format: we adapted \"dump\" from cool.</p>\n</li>\n<li>\n<p>Other formats: simply give the indices (start from 1) in the order of<br>\n\"chromosome1 - position1 - chromosome2 - position2 - score\" or<br>\n\"chromosome1 - position1 - chromosome2 - position2\" or<br>\n\"chromosome1 - position1 - chromosome2 - position2 - mapq1 - mapq2\".<br>\nFor example, you can provide \"2356\" or [2, 3, 5, 6] if the file takes this format:</p>\n</li>\n</ul>\n<pre><code>&lt;name&gt; &lt;chromosome1&gt; &lt;position1&gt; &lt;frag1&gt; &lt;chromosome2&gt; &lt;position2&gt; &lt;frag2&gt; &lt;strand1&gt; &lt;strand2&gt;\ncontact_1 chr1 3000000 1 chr1 3001000 1 + -\n</code></pre>\n<p><strong>Import Package</strong></p>\n<pre><span class=\"gp\">&gt;</span>&gt;&gt;import scHiCTools\n</pre>\n<p><strong>Load scHiC data</strong></p>\n<p>The scHiC data is stored in a series of files, with each of the files corresponding to one cell.\nYou need to specify the list of scHiC file paths.</p>\n<p>Only intra-chromosomal interactions are counted.</p>\n<pre><span class=\"gp\">&gt;</span>&gt;&gt;from scHiCTools import scHiCs\n<span class=\"gp\">&gt;</span>&gt;&gt;files <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"s1\">'./cell_1'</span>, <span class=\"s1\">'./cell_2'</span>, <span class=\"s1\">'./cell_3'</span><span class=\"o\">]</span>\n<span class=\"gp\">&gt;</span>&gt;&gt;loaded_data <span class=\"o\">=</span> scHiCs<span class=\"o\">(</span>\n<span class=\"go\">... files, reference_genome='mm9',</span>\n<span class=\"go\">... resolution=500000, keep_n_strata=10,</span>\n<span class=\"go\">... format='customized', adjust_resolution=True,</span>\n<span class=\"go\">... customized_format=12345, header=0, chromosomes='except Y',</span>\n<span class=\"go\">... operations=['OE_norm', 'convolution']</span>\n<span class=\"go\">... )</span>\n</pre>\n<ul>\n<li>reference genome (dict or str): now supporting 'mm9', 'mm10', 'hg19', 'hg38'.\nIf your reference genome is not in ['mm9', 'mm10', 'hg19', 'hg38'], you need to provide the lengths of chromosomes\nyou are going to use with a Python dict. e.g. {'chr1': 150000000, 'chr2': 130000000, 'chr3': 200000000}</li>\n<li>resolution (int): the resolution to separate genome into bins.\nIf using .hic file format, the given resolution must match with the resolutions in .hic file.</li>\n<li>keep_n_strata (None or int): only store contacts within n strata near the diagonal. Default: None.\nIf 'None', it will not store strata</li>\n<li>store_full_map (bool): whether store full contact maps in numpy matrices or\nscipy sparse matrices\uff0cIf False, it will save memory.</li>\n<li>sparse (bool): whether to use sparse matrices</li>\n<li>format (str): file format, supported formats: 'shortest', 'shortest_score', 'short',\n'short_score' , 'medium', 'long', '4DN', '.hic', '.mcool', 'npy', 'npz', 'matrix',\n'HiCRep', 'matrix_txt' and 'customized'. Default: 'customized'.</li>\n<li>customized_format (int or str or list): the column indices in the order of\n\"chromosome 1 - position 1 - chromosome 2 - position 2 - contact reads\" or\n\"chromosome 1 - position 1 - chromosome 2 - position 2\" or\n\"chromosome 1 - position 1 - chromosome 2 - position 2 - map quality 1 - map quality 2\".\ne.g. if the line is \"chr1 5000000 chr2 3500000 2\", the format should be '12345' or [1, 2, 3, 4, 5]; if there is no column\nindicating number of reads, you can just provide 4 numbers like '1234', and contact read will be set as 1.\nDefault: '12345'.</li>\n<li>adjust_resolution: whether to adjust resolution for the input file.\nSometimes the input file is already in the proper resolution (e.g. position 3000000 has already been changed to 6 with 500kb resolution).\nFor this situation you can set adjust_resolution=False. Default: True.</li>\n<li>map_filter (float): keep all contacts with mapq higher than this threshold. Default: 0.0</li>\n<li>header (int): how many header lines does the file have. Default: 0.</li>\n<li>chromosomes (list or str): chromosomes to use, eg. ['chr1', 'chr2'], or\njust 'except Y', 'except XY', 'all'.\nDefault: 'all', which means chr 1-19 + XY for mouse and chr 1-22 + XY for human.</li>\n<li>operations (list or None): the operations use for pre-processing or smoothing the maps given in a list.\nThe operations will happen in the given order.\nSupported operations: 'logarithm', 'power', 'convolution', 'random_walk',\n'network_enhancing', 'OE_norm', 'VC_norm', 'VC_SQRT_norm', 'KR_norm'\u3002\nDefault: None.</li>\n<li>For preprocessing and smoothing operations, sometimes you need additional arguments\n(introduced in next sub-section).</li>\n</ul>\n<p>You can also skip pre-processing and smoothing in loading step (operations=None),\nand do them in next lines:</p>\n<pre><span class=\"gp\">&gt;</span>&gt;&gt;loaded_data.processing<span class=\"o\">([</span><span class=\"s1\">'random_walk'</span>, <span class=\"s1\">'network_enhancing'</span><span class=\"o\">])</span>\n</pre>\n<p>But if you didn't store full map (i.e. store_full_map=False), processing is not\ndoable in a separate step.</p>\n<p><strong>Pre-processing and Smoothing Operations</strong></p>\n<ul>\n<li>\n<p>logarithm:\nnew_W_ij = log_(base) (W_ij + epsilon). Additional arguments:</p>\n<ul>\n<li>log_base: default: e</li>\n<li>epsilon: default: 1</li>\n</ul>\n</li>\n<li>\n<p>power: new_W_ij = (W_ij)^pow. Additional argument:</p>\n<ul>\n<li>pow: default: 0.5 (i.e., sqrt(W_ij))</li>\n</ul>\n</li>\n<li>\n<p>VC_norm: VC normalization - each value divided by the sum of\ncorresponding row then divided by the sum of corresponding column</p>\n</li>\n<li>\n<p>VC_SQRT_norm: VC_SQRT normalization - each value divided by the sqrt of the sum\nof corresponding row then divided by the sqrt of the sum of corresponding column</p>\n</li>\n<li>\n<p>KR_norm: KR normalization - iterating until the sum of each row / column is one\nArgument:</p>\n<ul>\n<li>maximum_error_rate (float): iteration ends when max error is smaller\nthan (maximum_error_rate). Default: 1e-4</li>\n</ul>\n</li>\n<li>\n<p>OE_norm: OE normalization -  each value divided by the average of its\ncorresponding strata (diagonal line)</p>\n</li>\n<li>\n<p>convolution: smoothing with a N by N convolution kernel, with each value equal to 1/N^2.\nArgument:</p>\n<ul>\n<li>kernel_shape: an integer. e.g. kernel_shape=3 means a 3*3 matrix with each value = 1/9. Default: 3.</li>\n</ul>\n</li>\n<li>\n<p>Random walk: multiply by a transition matrix (also calculated from contact map itself).\nArgument:</p>\n<ul>\n<li>random_walk_ratio: a value between 0 and 1, e.g. if ratio=0.9, the result will be\n0.9 * matrix_after_random_walk + 0.1 * original_matrix. Default: 1.0.</li>\n</ul>\n</li>\n<li>\n<p>Network enhancing: transition matrix only comes from k-nearest neighbors of each line.\nArguments:</p>\n<ul>\n<li>kNN: value 'k' in kNN. Default: 20.</li>\n<li>iterations: number of iterations for network enhancing. Default: 1</li>\n<li>alpha: similar with random_walk_ratio. Default: 0.9</li>\n</ul>\n</li>\n</ul>\n<p><strong>Learn Embeddings</strong></p>\n<pre><span class=\"gp\">&gt;</span>&gt;&gt;embs <span class=\"o\">=</span> loaded_data.learn embedding<span class=\"o\">(</span>\n<span class=\"go\">... dim=2, similarity_method='inner_product', embedding_method='MDS',</span>\n<span class=\"go\">... n_strata=None, aggregation='median', return_distance=False</span>\n<span class=\"go\">... )</span>\n</pre>\n<p>This function will return the embeddings in the format of a numpy array with shape (#_of_cells, #_of_dimensions).</p>\n<ul>\n<li>dim (int): the dimension for the embedding</li>\n<li>similarity_method (str): reproducibility measure, 'InnerProduct', 'fastHiCRep' or\n'Selfish'. Default: 'InnerProduct'</li>\n<li>embedding_method (str): 'MDS', 'tSNE' or 'UMAP'</li>\n<li>n_strata (int): only consider contacts within this genomic distance. Default: None.\nIf it is None, it will use the all strata kept (the argument keep_n_strata from\nprevious loading process). Thus n_strata and keep_n_strata (loading step) cannot be\nNone at the same time.</li>\n<li>aggregation (str): method to aggregate different chromosomes,\n'mean' or 'median'. Default: 'median'.</li>\n<li>return_distance (bool): if True, return (embeddings, distance_matrix); if False, only return embeddings. Default: False.</li>\n<li>Some additional argument for Selfish:\n<ul>\n<li>n_windows (int): split contact map into n windows, default: 10</li>\n<li>sigma (float): sigma in the Gaussian-like kernel: default: 1.6</li>\n</ul>\n</li>\n</ul>\n<h3>Citation</h3>\n<p>Fan Feng, and Jie Liu. \"scHiCTools: a computational toolbox for analyzing single cell Hi-C data.\"\nbioRxiv (2019): 769513.</p>\n<h3>References</h3>\n<p>A. R. Ardakany, F. Ay, and S. Lonardi.  Selfish: Discovery of differential chromatininteractions via a self-similarity measure.bioRxiv, 2019.</p>\n<p>N. C. Durand, J. T. Robinson, M. S. Shamim, I. Machol, J. P. Mesirov, E. S. Lander, and E. Lieberman Aiden. \"Juicebox provides a visualization system for Hi-C contact maps with unlimited zoom.\" Cell Systems 3(1), 2016.</p>\n<p>J. Liu, D. Lin, G. Yardimci, and W. S. Noble. Unsupervised embedding of single-cellHi-C data.Bioinformatics, 34:96\u2013104, 2018.</p>\n<p>T. Nagano, Y. Lubling, C. V\u00e1rnai, C. Dudley, W. Leung, Y. Baran, N. M. Cohen,S.  Wingett,  P.  Fraser,  and  A.  Tanay.    Cell-cycle  dynamics  of  chromosomal organization at single-cell resolution.Nature, 547:61\u201367, 2017.</p>\n<p>B. Wang, A. Pourshafeie, M. Zitnik, J. Zhu, C. D. Bustamante, S. Batzoglou, andJ.  Leskovec.   Network  enhancement  as  a  general  method  to  denoise  weighted biological networks.Nature Communications, 9(1):3108, 2018.</p>\n<p>T. Yang, F. Zhang, G. G. Y. mc\u0131, F. Song, R. C. Hardison, W. S. Noble, F. Yue, andQ. Li. HiCRep: assessing the reproducibility of Hi-C data using a stratum-adjusted correlation coefficient.Genome Research, 27(11):1939\u20131949, 2017.</p>\n<p>G.  G.  Yard\u0131mc\u0131,   H.  Ozadam,   M.  E.  Sauria,   O.  Ursu,   K. K.  Yan,   T.  Yang,A. Chakraborty, A. Kaul, B. R. Lajoie, F. Song, et al. Measuring the reproducibilityand quality of hi-c data.Genome Biology, 20(1):57, 2019.</p>\n\n          </div>"}, "last_serial": 6550765, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5b6e97ba4c74832ffc1a9b0cf0990a12", "sha256": "5d20a3f965b4919ba13647785d2e8e395cf7353eb344f28ab188a2c2f638d87a"}, "downloads": -1, "filename": "scHiCTools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5b6e97ba4c74832ffc1a9b0cf0990a12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53134, "upload_time": "2020-01-19T05:17:50", "upload_time_iso_8601": "2020-01-19T05:17:50.509118Z", "url": "https://files.pythonhosted.org/packages/a2/9f/6b20e58eed146082c6e8d14d4313a5c6043366fed84f65c3222f8d2261a0/scHiCTools-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "41a4cfe546d1ac2714a417ee2acdc196", "sha256": "a7b2a3b17de3302ca10b9abec06f707125c2e8114f39274aee117dd8416f352f"}, "downloads": -1, "filename": "scHiCTools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "41a4cfe546d1ac2714a417ee2acdc196", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44847, "upload_time": "2020-01-31T17:21:19", "upload_time_iso_8601": "2020-01-31T17:21:19.218110Z", "url": "https://files.pythonhosted.org/packages/7a/d8/f23804803f0290950482e4500fad0f9756707ead98b04cf7218f6366979a/scHiCTools-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "41a4cfe546d1ac2714a417ee2acdc196", "sha256": "a7b2a3b17de3302ca10b9abec06f707125c2e8114f39274aee117dd8416f352f"}, "downloads": -1, "filename": "scHiCTools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "41a4cfe546d1ac2714a417ee2acdc196", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44847, "upload_time": "2020-01-31T17:21:19", "upload_time_iso_8601": "2020-01-31T17:21:19.218110Z", "url": "https://files.pythonhosted.org/packages/7a/d8/f23804803f0290950482e4500fad0f9756707ead98b04cf7218f6366979a/scHiCTools-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:46 2020"}