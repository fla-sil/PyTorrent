{"info": {"author": "Simon Fransson", "author_email": "simon@dessibelle.se", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Topic :: Software Development"], "description": "Django SHOP Payer Backend\n=========================\n\n|Build Status| |Coverage Status| |Latest Version|\n\nDjango SHOP payment backend for `Payer <http://payer.se>`__. Uses\n`python-payer-api <https://github.com/dessibelle/python-payer-api>`__\nfor interacting with the API.\n\nInstallation\n------------\n\n::\n\n    pip install django-shop-payer-backend\n\nAdd to installed apps\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        ...\n        'polymorphic',\n        'shop'\n        'shop.addressmodel',\n        'django_shop_payer_backend',\n        ...\n    ]\n\nConfigure one ore more payment backends\n\n.. code:: python\n\n    SHOP_PAYMENT_BACKENDS = [\n        'django_shop_payer_backend.backends.PayerCreditCardPaymentBackend',\n        'django_shop_payer_backend.backends.PayerBankPaymentBackend',\n        'django_shop_payer_backend.backends.PayerInvoicePaymentBackend',\n        'django_shop_payer_backend.backends.PayerPhonePaymentBackend',\n    ]\n\nYou could also use the ``GenericPayerBackend`` in order to let the user\nchoose payment method *after* being redirected to Payer, or define a\nsubclass of your own, listing a custom set of methods in the\n``payment_methods`` property. This might be a good option if you are\nusing the Payer backend along with other backends such as Paypal etc.\n\nConfiguration\n-------------\n\nAdd your keys to settings.py\n\n.. code:: python\n\n    SHOP_PAYER_BACKEND_AGENT_ID = \"AGENT_ID\"\n    SHOP_PAYER_BACKEND_ID1 = \"6866ef97a972ba3a2c6ff8bb2812981054770162\"\n    SHOP_PAYER_BACKEND_ID2 = \"1388ac756f07b0dda2961436ba8596c7b7995e94\"\n\nThe following settings are optional\n\n.. code:: python\n\n    # Used for white/blacklisting callback IPs\n    SHOP_PAYER_BACKEND_IP_WHITELIST = [\"192.168.0.1\"]\n    SHOP_PAYER_BACKEND_IP_BLACKLIST = [\"10.0.1.1\"] \n    # Used for suppliying an address model\n    SHOP_PAYER_BACKEND_ADDRESS_HANDLER = 'project.app.path.to.address_model_callback'\n\n    SHOP_PAYER_BACKEND_HIDE_DETAILS = False     # Hide order details during payment\n    SHOP_PAYER_BACKEND_DEBUG_MODE = 'verbose'   # 'silent', 'brief'\n    SHOP_PAYER_BACKEND_TEST_MODE = True\n\nConsiderations\n--------------\n\nDue to the fact that django SHOP by default does not store any relation\nbetween the Order model and the AddressModel model there is no good way\nfor payment backends to determine the shipping/billing address for a\ngiven order. For some backends this might not be an issue, but in this\ncase Payer expects to address data in the order details.\n\ndjango-shop-payer-backend tries to tackle by determining the order\n(billing) address using the following strategy:\n\n1. Try to fetch AddressModel from current user (if\n   ``user.is_authenticated()``).\n2. Try to load an AddressModel using a callback supplied in the\n   ``SHOP_PAYER_BACKEND_ADDRESS_HANDLER`` setting.\n3. Try to extract address details from ``order.billing_address_text`` by\n   reverse parsing the address template used by django SHOP.\n4. Let you override/complete the data returned using the above methods\n   using the ``populate_buyer_details_dict`` signal.\n\nThis has two implications:\n\n1. For non-authenticated users it is simply not possible get an\n   AddressModel object using the default setup. In this case a reverse\n   parsing of the address template string django SHOP uses to store the\n   textual address representation on the Order object. Due to the\n   somewhat fragile nature of this parsing method, you should take\n   extreme precautions when modifying the ``SHOP_ADDRESS_TEMPLATE``\n   setting. For the parser to function it is recommended that you use\n   some form identifying \"key\" to identify each keyword (as with\n   \"Name:\"\" etc. in the default pattern). Patterns such as\n   ``%(name)s, %(address)s,[...]`` will likely fail as there is nothing\n   differentiating the ``name`` and ``address`` keywords in the string\n   format, and alas the regexp will not be able to identify the keywords\n   correctly.\n2. Fields supported by the Payer API that do not have an obvious\n   counterpart on the AddressModel model (e.g. email, phone,\n   organisation, etc.) will unsurprisingly not be included in the\n   PayerBuyerDetails data using the default settings. To make sure they\n   are included, use the methods described in the *Extensibility*\n   section below.\n\nThe way to tackle both of the issues outlined above, is probably to add\na foreign key to AddressModel on Order and store the object used when\nsetting ``order.billing_address_text``. That way you could add a address\nmodel callback handler (described below), which will let you return that\n(or any other) object to the backend.\n\nExtensibility\n-------------\n\nLet's say you have a custom address model based on\n``shop.addressmodel.models.Address`` which adds the field ``company``.\nNaturally you would want this data sent to Payer as well, in order to\nhave it appear on invoices etc. To accomplish that, add a receiver for\nthe ``populate_buyer_details_dict`` signal and update the buyer details\ndict like so:\n\n.. code:: python\n\n    from django_shop_payer_backend.helper import populate_buyer_details_dict\n    from django.dispatch import receiver\n\n    @receiver(populate_buyer_details_dict)\n    def add_additional_buyer_details(sender, **kwargs):\n\n        buyer_details_dict = kwargs.get('buyer_details_dict', None)\n        user = kwargs.get('user', None)\n        address = kwargs.get('address', None)\n        order = kwargs.get('order', None)\n\n        buyer_details_dict.update({\n            'organisation': address.company,\n        })\n\nThere is a similar signal, ``populate_order_item_dict``, for order\nitems, allowing you to modify the data that before the PayerOrderItem\nobject is initialized. This can be useful for example if your Product\nmodel has a field holding VAT percentages, in which case you could\ninject that value using this method.\n\nAnother option for supplying an address to the backend is to implement\nand address callback handler, and return an AddressModel object. This is\na good option if you are using a custom Order model that has foreign\nkeys to the AddressModel. In that case, you can implement a callback\nsomething along the lines of the following:\n\n.. code:: python\n\n    def address_model_callback(*args, **kwargs):\n\n        address = kwargs.get('address', None)\n        order = kwargs.get('order', None)\n\n        if address is None and order is not None:\n            try:\n                address = order.billing_address\n            except Exception:\n                pass\n\n        return address\n\nAnd add the following to ``settings.py``:\n\n.. code:: python\n\n    SHOP_PAYER_BACKEND_ADDRESS_HANDLER = 'project.app.path.to.address_model_callback'\n\n.. |Build Status| image:: https://travis-ci.org/dessibelle/django-shop-payer-backend.svg?branch=master\n   :target: https://travis-ci.org/dessibelle/django-shop-payer-backend\n.. |Coverage Status| image:: https://coveralls.io/repos/dessibelle/django-shop-payer-backend/badge.svg?branch=master\n   :target: https://coveralls.io/r/dessibelle/django-shop-payer-backend?branch=master\n.. |Latest Version| image:: https://pypip.in/version/django-shop-payer-backend/badge.svg?style=flat\n   :target: https://pypi.python.org/pypi/django-shop-payer-backend/", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/dessibelle/django-shop-payer-backend/archive/0.1.7.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dessibelle/django-shop-payer-backend", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-shop-payer-backend", "package_url": "https://pypi.org/project/django-shop-payer-backend/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-shop-payer-backend/", "project_urls": {"Download": "https://github.com/dessibelle/django-shop-payer-backend/archive/0.1.7.tar.gz", "Homepage": "https://github.com/dessibelle/django-shop-payer-backend"}, "release_url": "https://pypi.org/project/django-shop-payer-backend/0.1.7/", "requires_dist": null, "requires_python": null, "summary": "Payment backend for django SHOP and Payer.", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/dessibelle/django-shop-payer-backend\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3bf2bccb3e2e0ec1527d6afc2b3bf705dcdbf958/68747470733a2f2f7472617669732d63692e6f72672f646573736962656c6c652f646a616e676f2d73686f702d70617965722d6261636b656e642e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/dessibelle/django-shop-payer-backend?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd49c9b21798de5438c84427d30460e7f7045c9f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f646573736962656c6c652f646a616e676f2d73686f702d70617965722d6261636b656e642f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/django-shop-payer-backend/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6025ddd1a5470235d7c8ba50aa57d9b0bdd62d9a/68747470733a2f2f70797069702e696e2f76657273696f6e2f646a616e676f2d73686f702d70617965722d6261636b656e642f62616467652e7376673f7374796c653d666c6174\"></a></p>\n<p>Django SHOP payment backend for <a href=\"http://payer.se\" rel=\"nofollow\">Payer</a>. Uses\n<a href=\"https://github.com/dessibelle/python-payer-api\" rel=\"nofollow\">python-payer-api</a>\nfor interacting with the API.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install django-shop-payer-backend\n</pre>\n<p>Add to installed apps</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'polymorphic'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'shop'</span>\n    <span class=\"s1\">'shop.addressmodel'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_shop_payer_backend'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Configure one ore more payment backends</p>\n<pre><span class=\"n\">SHOP_PAYMENT_BACKENDS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'django_shop_payer_backend.backends.PayerCreditCardPaymentBackend'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_shop_payer_backend.backends.PayerBankPaymentBackend'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_shop_payer_backend.backends.PayerInvoicePaymentBackend'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_shop_payer_backend.backends.PayerPhonePaymentBackend'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>You could also use the <tt>GenericPayerBackend</tt> in order to let the user\nchoose payment method <em>after</em> being redirected to Payer, or define a\nsubclass of your own, listing a custom set of methods in the\n<tt>payment_methods</tt> property. This might be a good option if you are\nusing the Payer backend along with other backends such as Paypal etc.</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Add your keys to settings.py</p>\n<pre><span class=\"n\">SHOP_PAYER_BACKEND_AGENT_ID</span> <span class=\"o\">=</span> <span class=\"s2\">\"AGENT_ID\"</span>\n<span class=\"n\">SHOP_PAYER_BACKEND_ID1</span> <span class=\"o\">=</span> <span class=\"s2\">\"6866ef97a972ba3a2c6ff8bb2812981054770162\"</span>\n<span class=\"n\">SHOP_PAYER_BACKEND_ID2</span> <span class=\"o\">=</span> <span class=\"s2\">\"1388ac756f07b0dda2961436ba8596c7b7995e94\"</span>\n</pre>\n<p>The following settings are optional</p>\n<pre><span class=\"c1\"># Used for white/blacklisting callback IPs</span>\n<span class=\"n\">SHOP_PAYER_BACKEND_IP_WHITELIST</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"192.168.0.1\"</span><span class=\"p\">]</span>\n<span class=\"n\">SHOP_PAYER_BACKEND_IP_BLACKLIST</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"10.0.1.1\"</span><span class=\"p\">]</span>\n<span class=\"c1\"># Used for suppliying an address model</span>\n<span class=\"n\">SHOP_PAYER_BACKEND_ADDRESS_HANDLER</span> <span class=\"o\">=</span> <span class=\"s1\">'project.app.path.to.address_model_callback'</span>\n\n<span class=\"n\">SHOP_PAYER_BACKEND_HIDE_DETAILS</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>     <span class=\"c1\"># Hide order details during payment</span>\n<span class=\"n\">SHOP_PAYER_BACKEND_DEBUG_MODE</span> <span class=\"o\">=</span> <span class=\"s1\">'verbose'</span>   <span class=\"c1\"># 'silent', 'brief'</span>\n<span class=\"n\">SHOP_PAYER_BACKEND_TEST_MODE</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"considerations\">\n<h2>Considerations</h2>\n<p>Due to the fact that django SHOP by default does not store any relation\nbetween the Order model and the AddressModel model there is no good way\nfor payment backends to determine the shipping/billing address for a\ngiven order. For some backends this might not be an issue, but in this\ncase Payer expects to address data in the order details.</p>\n<p>django-shop-payer-backend tries to tackle by determining the order\n(billing) address using the following strategy:</p>\n<ol>\n<li>Try to fetch AddressModel from current user (if\n<tt>user.is_authenticated()</tt>).</li>\n<li>Try to load an AddressModel using a callback supplied in the\n<tt>SHOP_PAYER_BACKEND_ADDRESS_HANDLER</tt> setting.</li>\n<li>Try to extract address details from <tt>order.billing_address_text</tt> by\nreverse parsing the address template used by django SHOP.</li>\n<li>Let you override/complete the data returned using the above methods\nusing the <tt>populate_buyer_details_dict</tt> signal.</li>\n</ol>\n<p>This has two implications:</p>\n<ol>\n<li>For non-authenticated users it is simply not possible get an\nAddressModel object using the default setup. In this case a reverse\nparsing of the address template string django SHOP uses to store the\ntextual address representation on the Order object. Due to the\nsomewhat fragile nature of this parsing method, you should take\nextreme precautions when modifying the <tt>SHOP_ADDRESS_TEMPLATE</tt>\nsetting. For the parser to function it is recommended that you use\nsome form identifying \u201ckey\u201d to identify each keyword (as with\n\u201cName:\u201d\u201d etc. in the default pattern). Patterns such as\n<tt>%(name)s, <span class=\"pre\">%(address)s,[...]</span></tt> will likely fail as there is nothing\ndifferentiating the <tt>name</tt> and <tt>address</tt> keywords in the string\nformat, and alas the regexp will not be able to identify the keywords\ncorrectly.</li>\n<li>Fields supported by the Payer API that do not have an obvious\ncounterpart on the AddressModel model (e.g. email, phone,\norganisation, etc.) will unsurprisingly not be included in the\nPayerBuyerDetails data using the default settings. To make sure they\nare included, use the methods described in the <em>Extensibility</em>\nsection below.</li>\n</ol>\n<p>The way to tackle both of the issues outlined above, is probably to add\na foreign key to AddressModel on Order and store the object used when\nsetting <tt>order.billing_address_text</tt>. That way you could add a address\nmodel callback handler (described below), which will let you return that\n(or any other) object to the backend.</p>\n</div>\n<div id=\"extensibility\">\n<h2>Extensibility</h2>\n<p>Let\u2019s say you have a custom address model based on\n<tt>shop.addressmodel.models.Address</tt> which adds the field <tt>company</tt>.\nNaturally you would want this data sent to Payer as well, in order to\nhave it appear on invoices etc. To accomplish that, add a receiver for\nthe <tt>populate_buyer_details_dict</tt> signal and update the buyer details\ndict like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_shop_payer_backend.helper</span> <span class=\"kn\">import</span> <span class=\"n\">populate_buyer_details_dict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">receiver</span>\n\n<span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">populate_buyer_details_dict</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_additional_buyer_details</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\n    <span class=\"n\">buyer_details_dict</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'buyer_details_dict'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'address'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'order'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"n\">buyer_details_dict</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n        <span class=\"s1\">'organisation'</span><span class=\"p\">:</span> <span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">company</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n</pre>\n<p>There is a similar signal, <tt>populate_order_item_dict</tt>, for order\nitems, allowing you to modify the data that before the PayerOrderItem\nobject is initialized. This can be useful for example if your Product\nmodel has a field holding VAT percentages, in which case you could\ninject that value using this method.</p>\n<p>Another option for supplying an address to the backend is to implement\nand address callback handler, and return an AddressModel object. This is\na good option if you are using a custom Order model that has foreign\nkeys to the AddressModel. In that case, you can implement a callback\nsomething along the lines of the following:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">address_model_callback</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'address'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'order'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">address</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">order</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">billing_address</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">address</span>\n</pre>\n<p>And add the following to <tt>settings.py</tt>:</p>\n<pre><span class=\"n\">SHOP_PAYER_BACKEND_ADDRESS_HANDLER</span> <span class=\"o\">=</span> <span class=\"s1\">'project.app.path.to.address_model_callback'</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1425670, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a871b7cceebc9dd156492d9594c842c8", "sha256": "da1779494cb2ad4a581333e72c5b9df21260e34c2dcbcf74544392795d20811d"}, "downloads": -1, "filename": "django-shop-payer-backend-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a871b7cceebc9dd156492d9594c842c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5251, "upload_time": "2015-01-29T23:28:27", "upload_time_iso_8601": "2015-01-29T23:28:27.669339Z", "url": "https://files.pythonhosted.org/packages/33/10/a78c01648b11f9b21ddeba37e18a4cec87048f738880c4a20a00ebae0c89/django-shop-payer-backend-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "05cecb3820762c6e673073169caf5875", "sha256": "11c1e941c7ca6082b23cbc91c2b302b788446933ca20cf8b8281fb185c11c9ff"}, "downloads": -1, "filename": "django-shop-payer-backend-0.1.1.tar.gz", "has_sig": false, "md5_digest": "05cecb3820762c6e673073169caf5875", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8477, "upload_time": "2015-02-01T12:50:23", "upload_time_iso_8601": "2015-02-01T12:50:23.564851Z", "url": "https://files.pythonhosted.org/packages/3b/3f/d0fde7710f26c19fdf989c842cf21b4c493f5c9d9b4e2f456cac5b187914/django-shop-payer-backend-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f45e01e4d59c0615fee6cdcb5daf5d65", "sha256": "52f8a1aafe3a2593126b7c1598c1d38e49a0076036dddf8bf861814be07bd4fb"}, "downloads": -1, "filename": "django-shop-payer-backend-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f45e01e4d59c0615fee6cdcb5daf5d65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11198, "upload_time": "2015-02-01T17:28:03", "upload_time_iso_8601": "2015-02-01T17:28:03.906322Z", "url": "https://files.pythonhosted.org/packages/b3/5d/a9a827990061250fd7bb265465955424b56d45b50211350424afa581235f/django-shop-payer-backend-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "6ca9f517b38226354a7bcba42838ba72", "sha256": "c8435d4339556d303046ccf8ba61c3a6242b75881bbb443a709b5dbb88f2535b"}, "downloads": -1, "filename": "django-shop-payer-backend-0.1.3r4.tar.gz", "has_sig": false, "md5_digest": "6ca9f517b38226354a7bcba42838ba72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13173, "upload_time": "2015-02-01T18:30:55", "upload_time_iso_8601": "2015-02-01T18:30:55.424726Z", "url": "https://files.pythonhosted.org/packages/b5/cd/c617c9b0d9c819d228c1177d7c1ac2f9f61d2c9a5dabb7a2cd1cb5fd8f7c/django-shop-payer-backend-0.1.3r4.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "04fd31f9e5b1880362031be60fc34cef", "sha256": "c289ba9a16312f18b2cc6f0afb36f1376802448d3203cdbd711f19066e74aba3"}, "downloads": -1, "filename": "django-shop-payer-backend-0.1.4.tar.gz", "has_sig": false, "md5_digest": "04fd31f9e5b1880362031be60fc34cef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13169, "upload_time": "2015-02-01T18:35:10", "upload_time_iso_8601": "2015-02-01T18:35:10.161594Z", "url": "https://files.pythonhosted.org/packages/3f/6f/f21992d1d017360d2817b1f6d0f9d9874116bff1d8eb559c9fb2bdbf17ed/django-shop-payer-backend-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "916359cfa60d2b1f0dba97b7556a55f4", "sha256": "2c97c1a55ee6b6e6d8e6914a7191f821221605f3cacf565e19d71d6401e0b215"}, "downloads": -1, "filename": "django-shop-payer-backend-0.1.5.tar.gz", "has_sig": false, "md5_digest": "916359cfa60d2b1f0dba97b7556a55f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13784, "upload_time": "2015-02-05T10:01:56", "upload_time_iso_8601": "2015-02-05T10:01:56.992923Z", "url": "https://files.pythonhosted.org/packages/41/4b/a90f566dbfd63d5794a96626e8a9da9703ab3bf50b5ef27c9edccc2d3827/django-shop-payer-backend-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "747a4108c428f7e22a9cda17393a29d5", "sha256": "8e8bb27669903926eb9fb16fe6ac9def63c5a4be8548431bb8a1fb69756b8c81"}, "downloads": -1, "filename": "django-shop-payer-backend-0.1.6.tar.gz", "has_sig": false, "md5_digest": "747a4108c428f7e22a9cda17393a29d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13805, "upload_time": "2015-02-05T10:44:38", "upload_time_iso_8601": "2015-02-05T10:44:38.109546Z", "url": "https://files.pythonhosted.org/packages/dc/ba/f7c71b75015f3a81e5b8648f49397f86bcf14649a3c6f93e9d50ef8cb709/django-shop-payer-backend-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "56abe0e7943f1a5c5a35c5ba1eb52174", "sha256": "7f002a83b66fd5d0524381aa287505aa3a0b107692150694b217865e8c9e67e0"}, "downloads": -1, "filename": "django-shop-payer-backend-0.1.7.tar.gz", "has_sig": false, "md5_digest": "56abe0e7943f1a5c5a35c5ba1eb52174", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17405, "upload_time": "2015-02-16T17:38:59", "upload_time_iso_8601": "2015-02-16T17:38:59.726852Z", "url": "https://files.pythonhosted.org/packages/45/3a/473e3e83ab3d0af5c62489f5109aacb4aa27396aade6b87e128e5e9d09a8/django-shop-payer-backend-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "56abe0e7943f1a5c5a35c5ba1eb52174", "sha256": "7f002a83b66fd5d0524381aa287505aa3a0b107692150694b217865e8c9e67e0"}, "downloads": -1, "filename": "django-shop-payer-backend-0.1.7.tar.gz", "has_sig": false, "md5_digest": "56abe0e7943f1a5c5a35c5ba1eb52174", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17405, "upload_time": "2015-02-16T17:38:59", "upload_time_iso_8601": "2015-02-16T17:38:59.726852Z", "url": "https://files.pythonhosted.org/packages/45/3a/473e3e83ab3d0af5c62489f5109aacb4aa27396aade6b87e128e5e9d09a8/django-shop-payer-backend-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:30 2020"}