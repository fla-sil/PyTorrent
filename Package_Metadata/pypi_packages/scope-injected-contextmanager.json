{"info": {"author": "sloev", "author_email": "johannes.valbjorn@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Scope Injected ContextManager\n\n[![Build Status](https://travis-ci.org/sloev/scope_injected_contextmanager.svg?branch=master)](https://travis-ci.org/sloev/scope_injected_contextmanager) [![Latest Version](https://img.shields.io/pypi/v/scope_injected_contextmanager.svg)](https://pypi.python.org/pypi/scope_injected_contextmanager) [![Python Support](https://img.shields.io/pypi/pyversions/scope_injected_contextmanager.svg)](https://pypi.python.org/pypi/scope_injected_contextmanager) [![Examples tested with pytest-readme](http://img.shields.io/badge/readme-tested-brightgreen.svg)](https://github.com/boxed/pytest-readme)\n\nA decorator/context manager that injects scope vars into a function\n\n* A context manager decorator for **Python 3**\n* Lets you specify variables to extract from the innner-scope (the managed scope)\nand will inject them into the `@scope_injected_contextmanager` decorated function\n* acts like a defaulted function *(think functools.partial)*\n* allows you to pass in kwargs at runtime as well\n\n## Usage\n\n*For an extensive collection of examples see [tests](./tests/test_all.py)*\n\nFunctions decorated with `@scope_injected_contextmanager` becomes context managers that can be invoked in two different ways:\n\n**As an instance** \n```python\nfrom scope_injected_contextmanager import scope_injected_contextmanager\n@scope_injected_contextmanager\ndef decorated_function(): pass\n\nwith decorated_function:\n    something = 100\n```\n\n**Or as a function**\n\n```python\nfrom scope_injected_contextmanager import scope_injected_contextmanager\n@scope_injected_contextmanager\ndef decorated_function(): pass\n\nwith decorated_function():\n    something = 100\n```\n\n### Simple example\n\n```python\n\nfrom scope_injected_contextmanager import scope_injected_contextmanager\n\nfetch = lambda request: (\"ok\", 200)\n\n@scope_injected_contextmanager\ndef log_request(request, response):\n    print(f\"request: {request} response: {response}\")\n\nwith log_request:\n    request = {\n        \"query_args\": {\n            'foo': 10\n        }\n    }\n    response = fetch(request)\n\n# prints\n# request: {'query_args': {'foo': 10}} response: ('ok', 200)\n```\n\n### Advanced example\n\n```python\n\nfrom scope_injected_contextmanager import scope_injected_contextmanager\n\nfetch = lambda request: (\"ok\", 200)\n\n@scope_injected_contextmanager\ndef log_request(request, response, some_explicit_variable=None):\n    print(f\"request: {request} response: {response} some_explicit_variable: {some_explicit_variable}\")\n\nwith log_request(some_explicit_variable=\"foo):\n    request = {\n        \"query_args\": {\n            'foo': 10\n        }\n    }\n    response = fetch(request)\n\n# prints\n# request: {'query_args': {'foo': 10}} response: ('ok', 200) some_explicit_variable: foo\n```\n\n## why?\n\nI needed a low-on-syntax context-manager that would log request_args and response.\nWhen looking at implementing it i ran into this issue, and asked for help: \n[\"Spooky action observed in Python context manager\"](https://stackoverflow.com/questions/60270909/spooky-action-observed-in-python-context-manager)\n\nI was let down by the fact that you apparently can't give a context manager access to your variables.\n\nThats why i hacked this together ;-)\n\n## Testing\n\nsee [tests](./tests/test_all.py)\n\nrun `make setup-all tox` on a (linux or osx) with [pyenv](https://github.com/pyenv/pyenv#installation) installed.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sloev/scope_injected_contextmanager", "keywords": "contextmanager decorator scope inject", "license": "", "maintainer": "", "maintainer_email": "", "name": "scope-injected-contextmanager", "package_url": "https://pypi.org/project/scope-injected-contextmanager/", "platform": "", "project_url": "https://pypi.org/project/scope-injected-contextmanager/", "project_urls": {"Homepage": "https://github.com/sloev/scope_injected_contextmanager"}, "release_url": "https://pypi.org/project/scope-injected-contextmanager/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "A decorator/context manager that injects scope vars into a function", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Scope Injected ContextManager</h1>\n<p><a href=\"https://travis-ci.org/sloev/scope_injected_contextmanager\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53082ff24754cff718a13c5f67811b71b6f549a6/68747470733a2f2f7472617669732d63692e6f72672f736c6f65762f73636f70655f696e6a65637465645f636f6e746578746d616e616765722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/scope_injected_contextmanager\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e868c7046610f6d94a2fa98feefb5a33d83ed9db/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73636f70655f696e6a65637465645f636f6e746578746d616e616765722e737667\"></a> <a href=\"https://pypi.python.org/pypi/scope_injected_contextmanager\" rel=\"nofollow\"><img alt=\"Python Support\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49a354385582f831037dfd038088b0e79ceff400/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73636f70655f696e6a65637465645f636f6e746578746d616e616765722e737667\"></a> <a href=\"https://github.com/boxed/pytest-readme\" rel=\"nofollow\"><img alt=\"Examples tested with pytest-readme\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f383ec26d7de8ebe4e4066de3f394faa52e78b78/687474703a2f2f696d672e736869656c64732e696f2f62616467652f726561646d652d7465737465642d627269676874677265656e2e737667\"></a></p>\n<p>A decorator/context manager that injects scope vars into a function</p>\n<ul>\n<li>A context manager decorator for <strong>Python 3</strong></li>\n<li>Lets you specify variables to extract from the innner-scope (the managed scope)\nand will inject them into the <code>@scope_injected_contextmanager</code> decorated function</li>\n<li>acts like a defaulted function <em>(think functools.partial)</em></li>\n<li>allows you to pass in kwargs at runtime as well</li>\n</ul>\n<h2>Usage</h2>\n<p><em>For an extensive collection of examples see <a href=\"./tests/test_all.py\" rel=\"nofollow\">tests</a></em></p>\n<p>Functions decorated with <code>@scope_injected_contextmanager</code> becomes context managers that can be invoked in two different ways:</p>\n<p><strong>As an instance</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scope_injected_contextmanager</span> <span class=\"kn\">import</span> <span class=\"n\">scope_injected_contextmanager</span>\n<span class=\"nd\">@scope_injected_contextmanager</span>\n<span class=\"k\">def</span> <span class=\"nf\">decorated_function</span><span class=\"p\">():</span> <span class=\"k\">pass</span>\n\n<span class=\"k\">with</span> <span class=\"n\">decorated_function</span><span class=\"p\">:</span>\n    <span class=\"n\">something</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n</pre>\n<p><strong>Or as a function</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scope_injected_contextmanager</span> <span class=\"kn\">import</span> <span class=\"n\">scope_injected_contextmanager</span>\n<span class=\"nd\">@scope_injected_contextmanager</span>\n<span class=\"k\">def</span> <span class=\"nf\">decorated_function</span><span class=\"p\">():</span> <span class=\"k\">pass</span>\n\n<span class=\"k\">with</span> <span class=\"n\">decorated_function</span><span class=\"p\">():</span>\n    <span class=\"n\">something</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n</pre>\n<h3>Simple example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scope_injected_contextmanager</span> <span class=\"kn\">import</span> <span class=\"n\">scope_injected_contextmanager</span>\n\n<span class=\"n\">fetch</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s2\">\"ok\"</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@scope_injected_contextmanager</span>\n<span class=\"k\">def</span> <span class=\"nf\">log_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"request: </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"si\">}</span><span class=\"s2\"> response: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">log_request</span><span class=\"p\">:</span>\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"query_args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">10</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># prints</span>\n<span class=\"c1\"># request: {'query_args': {'foo': 10}} response: ('ok', 200)</span>\n</pre>\n<h3>Advanced example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scope_injected_contextmanager</span> <span class=\"kn\">import</span> <span class=\"n\">scope_injected_contextmanager</span>\n\n<span class=\"n\">fetch</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s2\">\"ok\"</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@scope_injected_contextmanager</span>\n<span class=\"k\">def</span> <span class=\"nf\">log_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">some_explicit_variable</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"request: </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"si\">}</span><span class=\"s2\"> response: </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"si\">}</span><span class=\"s2\"> some_explicit_variable: </span><span class=\"si\">{</span><span class=\"n\">some_explicit_variable</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">log_request</span><span class=\"p\">(</span><span class=\"n\">some_explicit_variable</span><span class=\"o\">=</span><span class=\"s2\">\"foo):</span>\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"query_args\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">10</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># prints</span>\n<span class=\"c1\"># request: {'query_args': {'foo': 10}} response: ('ok', 200) some_explicit_variable: foo</span>\n</pre>\n<h2>why?</h2>\n<p>I needed a low-on-syntax context-manager that would log request_args and response.\nWhen looking at implementing it i ran into this issue, and asked for help:\n<a href=\"https://stackoverflow.com/questions/60270909/spooky-action-observed-in-python-context-manager\" rel=\"nofollow\">\"Spooky action observed in Python context manager\"</a></p>\n<p>I was let down by the fact that you apparently can't give a context manager access to your variables.</p>\n<p>Thats why i hacked this together ;-)</p>\n<h2>Testing</h2>\n<p>see <a href=\"./tests/test_all.py\" rel=\"nofollow\">tests</a></p>\n<p>run <code>make setup-all tox</code> on a (linux or osx) with <a href=\"https://github.com/pyenv/pyenv#installation\" rel=\"nofollow\">pyenv</a> installed.</p>\n\n          </div>"}, "last_serial": 6653896, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0b43c9f29245702e6f9cf53afc4f9bb5", "sha256": "369aef6265191700930278a13ef5b625837a250cc44f6e9fb6bda6f01acde4f8"}, "downloads": -1, "filename": "scope_injected_contextmanager-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0b43c9f29245702e6f9cf53afc4f9bb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3938, "upload_time": "2020-02-18T14:53:25", "upload_time_iso_8601": "2020-02-18T14:53:25.742669Z", "url": "https://files.pythonhosted.org/packages/8b/0d/86248be8e9731166cc062c20d874eb2409338358b2cc264f0afa47fd9582/scope_injected_contextmanager-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3962aff261bef1b4dd18ed09c3a722ad", "sha256": "fd60c2cee8ba04ed14f23868e22f1f9dbffc669ecdc2107c817e944995f1e00e"}, "downloads": -1, "filename": "scope_injected_contextmanager-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3962aff261bef1b4dd18ed09c3a722ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4102, "upload_time": "2020-02-18T15:09:07", "upload_time_iso_8601": "2020-02-18T15:09:07.001382Z", "url": "https://files.pythonhosted.org/packages/02/e3/aa7449697d06a9b5f08a7ae4d4ff7aa14b48dd02576e7fc157e1992eb15f/scope_injected_contextmanager-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3962aff261bef1b4dd18ed09c3a722ad", "sha256": "fd60c2cee8ba04ed14f23868e22f1f9dbffc669ecdc2107c817e944995f1e00e"}, "downloads": -1, "filename": "scope_injected_contextmanager-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3962aff261bef1b4dd18ed09c3a722ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4102, "upload_time": "2020-02-18T15:09:07", "upload_time_iso_8601": "2020-02-18T15:09:07.001382Z", "url": "https://files.pythonhosted.org/packages/02/e3/aa7449697d06a9b5f08a7ae4d4ff7aa14b48dd02576e7fc157e1992eb15f/scope_injected_contextmanager-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:06 2020"}