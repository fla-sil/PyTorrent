{"info": {"author": "Charles Hayden", "author_email": "cchayden@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "XFrames 0.3 Library (BETA)\n==========================\n\nThe XFrames Library provides a consistent and scalable data science\nlibrary that is built on top of industry-standard open source\ntechnologies. XFrames provides the following advantages compared to other\nDataFrame implementations:\n\n-  A simple and well-tested Data Science library and Python based\n   interface.\n-  Powerful abstraction over underlying scalable big data and machine\n   learning frameworks: Apache Spark, Spark DataFrames and ML libraries.\n-  Dockerized container that bundles IPython notebooks, scientific\n   libraries, Apache Spark and other dependencies for painless setup.\n-  The library is extensible, allowing developers to add their own\n   useful features and functionality.\n\nHow XFrames Benefits You\n------------------------\n\nIf you're a data scientist, XFrames will isolate framework dependencies\nand their configuration within a single disposable, containerized\nenvironment, without compromising on any of the tools you're used to\nworking with (notebooks, dataframes, machine learning and big data\nframeworks, etc.). Once you or someone else creates a single XFrames\ncontainer, you just need to run the container and everything is\ninstalled and configured for you to work. Other members of your team\ncreate their development environments from the same configuration, so\nwhether you're working on Linux, Mac OS X, or Windows, all your team\nmembers are running data experiments in the same environment, against\nthe same dependencies, all configured the same way. Say goodbye to\npainful setup times and \"works on my machine\" bugs.\n\nMinimum Requirements\n--------------------\n\nSpark 1.6 or 2.1.\n\n*Linux*:\n\n-  Ubuntu 12.04 and above\n-  Docker >= 1.5 installation\n\n*Mac*:\n\n-  Docker >= 1.5 installation\n\n*Windows*\n\n-  Run in VM\n\nGetting Started\n---------------\n\nThe easiest way to get started is to download the XFrames library, build a\nDocker container that has everything you need, and run using an ipython notebook\nwithin Docker.\n\nDownload Library\n----------------\n\nClone XFrames this way::\n\n    git clone https://github.com/chayden/xframes.git\n\nBuild Docker Container\n----------------------\n\nGo to the docker directory and follow the build instructions in\nREADME.md.\n\nReview Introductory Presentation\n--------------------------------\n\nAfter starting docker container, browse to http://localhost:7777/tree.\nThen open info/Presentation.ipynb.  If you execute the cells in this\nnotebook, then XFrames is up and running.\n\nDocumentation\n-------------\n\nYou can view local documentation with the Docker container on http://localhost:8000.\n\nYou can also view documentation at http://xframes.readthedocs.org/\n\n\n\nInstall Library On Existing Spark Installation\n----------------------------------------------\n\nIf you have an existing Spark installation that you already use with\npySpark, then you can simply install the library to work with that.\n\nYou can install using pip or you can get the source and either:\n\n1. Include the xframes directory in PYTHONPATH, or\n2. Build an archive (see below) and install it on a different machine.\n\nInstall With Pip\n----------------\n\nYou can also install with pip::\n\n    pip install xframes\n\nUsing XFrames Directory\n-----------------------\n\nIf you want to run using the source distribution, the most direct way\nis to include its xframes directory in PYTHONPATH::\n\n    export PYTHONPATH=<path to xframes>:$PYTHONPATH\n\nBuilding the Library\n--------------------\n\nIf you want to make a zip file that you can use to install XFrames on a\ndifferent machine, go to the source main directory and run::\n\n  python setup.py sdist --formats=zip\n\nThis will create a file dist/xframes-<version>.zip This file can be copied to\nthe server where you want to install xframes.\n\nInstall by::\n\n    unzip xframes.<version>.zip\n    cd xframes.<version>\n    python setup.py install\n\n\nRunning XFrames\n---------------\nXFrames uses pySpark, so you have to have Spark set up.\n\nYou might have an existing Spark installation running in Cluster Mode,\nmanaged by the the Standalone, YARN, or Mesos cluster manager.\nIn this case, you need to set \"master\" to point to the cluster, using one\nof the configuration methods described below.\n\nSetting Up Spark\n----------------\n\nIf you do not already have Spark, it is easy to set it up in local mode.\n\nDownload spark from http://spark.apache.org/downloads.html\n\nGet the tar.gz, uncompress it, and put it in some convenient directory.\nThe path to py4j is dependent on the spark version: this one works with spark 1.2.\nThen set::\n\n    export SPARK_HOME=<spark distribution>\n    export PYTHONPATH=${SPARK_HOME}/python:${SPARK_HOME}/python/lib/py4j-0.10.4-src.zip\n\nYou can test by running this program::\n\n    test.py:\n    from xframes import XFrame\n    print XFrame({'id': [1, 2, 3], 'val': ['a', 'b', 'c']})\n\nRun::\n\n    $ python test.py\n\nThis should print::\n\n    +----+-----+\n    | id | val |\n    +----+-----+\n    | 1  |  a  |\n    | 2  |  b  |\n    | 3  |  c  |\n    +----+-----+\n    [? rows x 2 columns]\n\n\nYou may notice that a great deal of debug output appears on stdout.\nThis is because, by default, Spark displays log output on stdout.\nYou can change this by supplying a log4j.properties file and setting\nSPARK_CONF_DIR to the directory containing it.  There is a sample\nconfig dir \"conf\" under the xframes install directory.  You can copy this\nto your current directory and set::\n\n    export SPARK_CONF_DIR=`pwd`/conf\n\nThen when you run, you will see only the output that your program prints.\n\nRunning in a IPython Notebook\n-----------------------------\n\nXFrames works especially well in an IPython notebook.\nIf you set up Spark as outline above, by setting PYTHONPATH, SPARK_HOME\nand SPARK_CONF_DIR before you launch the notebook server, then\nyou can run the same test program and get the expected results.\n\nSee the blog http://blog.cloudera.com/blog/2014/08/how-to-use-ipython-notebook-with-apache-spark/\nfor more information on how to set up an existing Spark installation to use with\niIPython notebook.\n\n\nRunning in a Virtual Environment\n--------------------------------\n\nXFrames works well in a virtual environment.\n\nCreate a virtual environment::\n\n    virtualenv venv\n\nAnd then install into it::\n\n    source venv/bin/activate\n    pip install xframes\n\nXFrames includes support for pandas and matplotlib, which you can\ninstall if you want to use them.  For exammple::\n\n    pip install pandas\n    pip install matplotlib\n\nAfter this, make sure Spark is set up.  For example::\n\n    export SPARK_HOME=~/tools/spark\n    export PYTHONPATH=${SPARK_HOME}/python:${SPARK_HOME}/python/lib/py4j-0.10.4-src.zip\n\nThen test::\n\n    cat <<EOF test.py\n    from xframes import XFrame\n    print XFrame({'id': [1, 2, 3], 'val': ['a', 'b', 'c']})\n    EOF\n    python test.py\n\nIf running in a notebook, you could run the notebook server and run the test program::\n\n  ipython notebook\n\n\nConfigurating Spark\n-------------------\n\nSpark has a large number of configuration parameters, described at:\nhttp://spark.apache.org/docs/latest/configuration.html\n\nThere are a number of ways to supply these configuration parameters.\nOne of these is to supply a file spark-defaults.conf, in the directory pointed\nto by SPARK_CONF_DIR described above.  There is a template to guide you.\nThis works when you start a local spark instance.\n\nTo affect only the spark context used by a single XFrames program, you can\neither provide XFrames-specific defaults, application-speficic configuration,\nor you can supply configurations at run time.\n\nFor XFrames-specific defaults, edit the file \"defaults.ini\" found in the xframes\ndirectory in the xframe installation.\n\nFor application-specific defaults, use a file \"config.ini\" in the current directory where you run\nyour XFrames application.  It is structured similarly to \"defaults.ini\".\n\nTo provide run-time configuration, use XFrame.init_context to set configuration parameters before\nrunning any Spark operations.\n\nLicense\n-------\n\nThis SDK is provided under the 3-clause BSD `license <LICENSE>`__.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cchayden/xframes.git", "keywords": null, "license": "Apache Software License 2.0", "maintainer": null, "maintainer_email": null, "name": "xframes", "package_url": "https://pypi.org/project/xframes/", "platform": "any", "project_url": "https://pypi.org/project/xframes/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/cchayden/xframes.git"}, "release_url": "https://pypi.org/project/xframes/0.3.7/", "requires_dist": null, "requires_python": null, "summary": "XFrame data manipulation for Spark.", "version": "0.3.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The XFrames Library provides a consistent and scalable data science\nlibrary that is built on top of industry-standard open source\ntechnologies. XFrames provides the following advantages compared to other\nDataFrame implementations:</p>\n<ul>\n<li>A simple and well-tested Data Science library and Python based\ninterface.</li>\n<li>Powerful abstraction over underlying scalable big data and machine\nlearning frameworks: Apache Spark, Spark DataFrames and ML libraries.</li>\n<li>Dockerized container that bundles IPython notebooks, scientific\nlibraries, Apache Spark and other dependencies for painless setup.</li>\n<li>The library is extensible, allowing developers to add their own\nuseful features and functionality.</li>\n</ul>\n<div id=\"how-xframes-benefits-you\">\n<h2>How XFrames Benefits You</h2>\n<p>If you\u2019re a data scientist, XFrames will isolate framework dependencies\nand their configuration within a single disposable, containerized\nenvironment, without compromising on any of the tools you\u2019re used to\nworking with (notebooks, dataframes, machine learning and big data\nframeworks, etc.). Once you or someone else creates a single XFrames\ncontainer, you just need to run the container and everything is\ninstalled and configured for you to work. Other members of your team\ncreate their development environments from the same configuration, so\nwhether you\u2019re working on Linux, Mac OS X, or Windows, all your team\nmembers are running data experiments in the same environment, against\nthe same dependencies, all configured the same way. Say goodbye to\npainful setup times and \u201cworks on my machine\u201d bugs.</p>\n</div>\n<div id=\"minimum-requirements\">\n<h2>Minimum Requirements</h2>\n<p>Spark 1.6 or 2.1.</p>\n<p><em>Linux</em>:</p>\n<ul>\n<li>Ubuntu 12.04 and above</li>\n<li>Docker &gt;= 1.5 installation</li>\n</ul>\n<p><em>Mac</em>:</p>\n<ul>\n<li>Docker &gt;= 1.5 installation</li>\n</ul>\n<p><em>Windows</em></p>\n<ul>\n<li>Run in VM</li>\n</ul>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>The easiest way to get started is to download the XFrames library, build a\nDocker container that has everything you need, and run using an ipython notebook\nwithin Docker.</p>\n</div>\n<div id=\"download-library\">\n<h2>Download Library</h2>\n<p>Clone XFrames this way:</p>\n<pre>git clone https://github.com/chayden/xframes.git\n</pre>\n</div>\n<div id=\"build-docker-container\">\n<h2>Build Docker Container</h2>\n<p>Go to the docker directory and follow the build instructions in\nREADME.md.</p>\n</div>\n<div id=\"review-introductory-presentation\">\n<h2>Review Introductory Presentation</h2>\n<p>After starting docker container, browse to <a href=\"http://localhost:7777/tree\" rel=\"nofollow\">http://localhost:7777/tree</a>.\nThen open info/Presentation.ipynb.  If you execute the cells in this\nnotebook, then XFrames is up and running.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>You can view local documentation with the Docker container on <a href=\"http://localhost:8000\" rel=\"nofollow\">http://localhost:8000</a>.</p>\n<p>You can also view documentation at <a href=\"http://xframes.readthedocs.org/\" rel=\"nofollow\">http://xframes.readthedocs.org/</a></p>\n</div>\n<div id=\"install-library-on-existing-spark-installation\">\n<h2>Install Library On Existing Spark Installation</h2>\n<p>If you have an existing Spark installation that you already use with\npySpark, then you can simply install the library to work with that.</p>\n<p>You can install using pip or you can get the source and either:</p>\n<ol>\n<li>Include the xframes directory in PYTHONPATH, or</li>\n<li>Build an archive (see below) and install it on a different machine.</li>\n</ol>\n</div>\n<div id=\"install-with-pip\">\n<h2>Install With Pip</h2>\n<p>You can also install with pip:</p>\n<pre>pip install xframes\n</pre>\n</div>\n<div id=\"using-xframes-directory\">\n<h2>Using XFrames Directory</h2>\n<p>If you want to run using the source distribution, the most direct way\nis to include its xframes directory in PYTHONPATH:</p>\n<pre>export PYTHONPATH=&lt;path to xframes&gt;:$PYTHONPATH\n</pre>\n</div>\n<div id=\"building-the-library\">\n<h2>Building the Library</h2>\n<p>If you want to make a zip file that you can use to install XFrames on a\ndifferent machine, go to the source main directory and run:</p>\n<pre>python setup.py sdist --formats=zip\n</pre>\n<p>This will create a file dist/xframes-&lt;version&gt;.zip This file can be copied to\nthe server where you want to install xframes.</p>\n<p>Install by:</p>\n<pre>unzip xframes.&lt;version&gt;.zip\ncd xframes.&lt;version&gt;\npython setup.py install\n</pre>\n</div>\n<div id=\"running-xframes\">\n<h2>Running XFrames</h2>\n<p>XFrames uses pySpark, so you have to have Spark set up.</p>\n<p>You might have an existing Spark installation running in Cluster Mode,\nmanaged by the the Standalone, YARN, or Mesos cluster manager.\nIn this case, you need to set \u201cmaster\u201d to point to the cluster, using one\nof the configuration methods described below.</p>\n</div>\n<div id=\"setting-up-spark\">\n<h2>Setting Up Spark</h2>\n<p>If you do not already have Spark, it is easy to set it up in local mode.</p>\n<p>Download spark from <a href=\"http://spark.apache.org/downloads.html\" rel=\"nofollow\">http://spark.apache.org/downloads.html</a></p>\n<p>Get the tar.gz, uncompress it, and put it in some convenient directory.\nThe path to py4j is dependent on the spark version: this one works with spark 1.2.\nThen set:</p>\n<pre>export SPARK_HOME=&lt;spark distribution&gt;\nexport PYTHONPATH=${SPARK_HOME}/python:${SPARK_HOME}/python/lib/py4j-0.10.4-src.zip\n</pre>\n<p>You can test by running this program:</p>\n<pre>test.py:\nfrom xframes import XFrame\nprint XFrame({'id': [1, 2, 3], 'val': ['a', 'b', 'c']})\n</pre>\n<p>Run:</p>\n<pre>$ python test.py\n</pre>\n<p>This should print:</p>\n<pre>+----+-----+\n| id | val |\n+----+-----+\n| 1  |  a  |\n| 2  |  b  |\n| 3  |  c  |\n+----+-----+\n[? rows x 2 columns]\n</pre>\n<p>You may notice that a great deal of debug output appears on stdout.\nThis is because, by default, Spark displays log output on stdout.\nYou can change this by supplying a log4j.properties file and setting\nSPARK_CONF_DIR to the directory containing it.  There is a sample\nconfig dir \u201cconf\u201d under the xframes install directory.  You can copy this\nto your current directory and set:</p>\n<pre>export SPARK_CONF_DIR=`pwd`/conf\n</pre>\n<p>Then when you run, you will see only the output that your program prints.</p>\n</div>\n<div id=\"running-in-a-ipython-notebook\">\n<h2>Running in a IPython Notebook</h2>\n<p>XFrames works especially well in an IPython notebook.\nIf you set up Spark as outline above, by setting PYTHONPATH, SPARK_HOME\nand SPARK_CONF_DIR before you launch the notebook server, then\nyou can run the same test program and get the expected results.</p>\n<p>See the blog <a href=\"http://blog.cloudera.com/blog/2014/08/how-to-use-ipython-notebook-with-apache-spark/\" rel=\"nofollow\">http://blog.cloudera.com/blog/2014/08/how-to-use-ipython-notebook-with-apache-spark/</a>\nfor more information on how to set up an existing Spark installation to use with\niIPython notebook.</p>\n</div>\n<div id=\"running-in-a-virtual-environment\">\n<h2>Running in a Virtual Environment</h2>\n<p>XFrames works well in a virtual environment.</p>\n<p>Create a virtual environment:</p>\n<pre>virtualenv venv\n</pre>\n<p>And then install into it:</p>\n<pre>source venv/bin/activate\npip install xframes\n</pre>\n<p>XFrames includes support for pandas and matplotlib, which you can\ninstall if you want to use them.  For exammple:</p>\n<pre>pip install pandas\npip install matplotlib\n</pre>\n<p>After this, make sure Spark is set up.  For example:</p>\n<pre>export SPARK_HOME=~/tools/spark\nexport PYTHONPATH=${SPARK_HOME}/python:${SPARK_HOME}/python/lib/py4j-0.10.4-src.zip\n</pre>\n<p>Then test:</p>\n<pre>cat &lt;&lt;EOF test.py\nfrom xframes import XFrame\nprint XFrame({'id': [1, 2, 3], 'val': ['a', 'b', 'c']})\nEOF\npython test.py\n</pre>\n<p>If running in a notebook, you could run the notebook server and run the test program:</p>\n<pre>ipython notebook\n</pre>\n</div>\n<div id=\"configurating-spark\">\n<h2>Configurating Spark</h2>\n<p>Spark has a large number of configuration parameters, described at:\n<a href=\"http://spark.apache.org/docs/latest/configuration.html\" rel=\"nofollow\">http://spark.apache.org/docs/latest/configuration.html</a></p>\n<p>There are a number of ways to supply these configuration parameters.\nOne of these is to supply a file spark-defaults.conf, in the directory pointed\nto by SPARK_CONF_DIR described above.  There is a template to guide you.\nThis works when you start a local spark instance.</p>\n<p>To affect only the spark context used by a single XFrames program, you can\neither provide XFrames-specific defaults, application-speficic configuration,\nor you can supply configurations at run time.</p>\n<p>For XFrames-specific defaults, edit the file \u201cdefaults.ini\u201d found in the xframes\ndirectory in the xframe installation.</p>\n<p>For application-specific defaults, use a file \u201cconfig.ini\u201d in the current directory where you run\nyour XFrames application.  It is structured similarly to \u201cdefaults.ini\u201d.</p>\n<p>To provide run-time configuration, use XFrame.init_context to set configuration parameters before\nrunning any Spark operations.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This SDK is provided under the 3-clause BSD <a href=\"LICENSE\" rel=\"nofollow\">license</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2930714, "releases": {"0.2.7": [{"comment_text": "", "digests": {"md5": "7ecea86086cabe4ebd775c4254cbbebb", "sha256": "d25ad73f6251158cb2af69611eb718476739eafd1f5289257a856546ef575b26"}, "downloads": -1, "filename": "xframes-0.2.7.tar.gz", "has_sig": false, "md5_digest": "7ecea86086cabe4ebd775c4254cbbebb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113632, "upload_time": "2015-07-26T15:13:21", "upload_time_iso_8601": "2015-07-26T15:13:21.323045Z", "url": "https://files.pythonhosted.org/packages/59/09/8a0a68d86785cf66b413e4e1ce6af313e4db478da6f6ecbe1c95a1866f2e/xframes-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "7aa21738e8def2101862a0df209fd450", "sha256": "31d2e3cc4a73bd6a0d18614eab32ef06ac766e604ec1a3a7b3d1233bca8f79d1"}, "downloads": -1, "filename": "xframes-0.2.8.tar.gz", "has_sig": false, "md5_digest": "7aa21738e8def2101862a0df209fd450", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 114134, "upload_time": "2015-07-29T14:21:44", "upload_time_iso_8601": "2015-07-29T14:21:44.277041Z", "url": "https://files.pythonhosted.org/packages/e8/60/86b0dc056ec6f9710f2805a48f069035dca604651288b790dcacd2fb7fbe/xframes-0.2.8.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "80f4d5199e3eb60183e6f3bed7d091f0", "sha256": "f227013f124248f818c7ad16e92d5073a4bc2f663baeb3ed508aef733e08c5ce"}, "downloads": -1, "filename": "xframes-0.3.0.tar.gz", "has_sig": false, "md5_digest": "80f4d5199e3eb60183e6f3bed7d091f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166204, "upload_time": "2017-04-05T03:31:24", "upload_time_iso_8601": "2017-04-05T03:31:24.827549Z", "url": "https://files.pythonhosted.org/packages/42/71/6f3a705be443abe1d9e3f98417f5f8eef017db318b9c5c8a38ca34d7f91c/xframes-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "37197d7627d0dc7f045f61fde19fa5c1", "sha256": "6085a492a44192af1eed7af587f4090694e36308e9e1076530817000ba800d85"}, "downloads": -1, "filename": "xframes-0.3.1.tar.gz", "has_sig": false, "md5_digest": "37197d7627d0dc7f045f61fde19fa5c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166201, "upload_time": "2017-04-05T03:52:25", "upload_time_iso_8601": "2017-04-05T03:52:25.618583Z", "url": "https://files.pythonhosted.org/packages/a1/bf/2c022cb50a58bf533e1f9c13c66709f50a486dc0514938667eca5eccd2e1/xframes-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "7191de7041ed4cf8ad03646adb77655a", "sha256": "7a4911fb79defbdf0584a90d35e9a45c0798ac1aaa2ed970dd5fedd256553e89"}, "downloads": -1, "filename": "xframes-0.3.2.tar.gz", "has_sig": false, "md5_digest": "7191de7041ed4cf8ad03646adb77655a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166436, "upload_time": "2017-04-05T12:36:33", "upload_time_iso_8601": "2017-04-05T12:36:33.250056Z", "url": "https://files.pythonhosted.org/packages/0f/d7/3090e54eae1994d3ca94069fc0d7debba3bdfcacd7e9b4cbb84c2e1948bc/xframes-0.3.2.tar.gz", "yanked": false}], "0.3.3": [], "0.3.4": [], "0.3.5": [{"comment_text": "", "digests": {"md5": "000d8e22429e98aec98623336d17aee8", "sha256": "b1ee38fafdd444a3facc167c0074f27b869ad499019f5b3f0bc4f8859f5a6478"}, "downloads": -1, "filename": "xframes-0.3.5.tar.gz", "has_sig": false, "md5_digest": "000d8e22429e98aec98623336d17aee8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166761, "upload_time": "2017-06-04T21:26:51", "upload_time_iso_8601": "2017-06-04T21:26:51.868099Z", "url": "https://files.pythonhosted.org/packages/05/5e/1766a8c54f5f0f11d3489a9883f0504fd708391e55685232332df4827813/xframes-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "f42defacaf1cb9ac8924e5a1cbf18407", "sha256": "ef9431b19188832a67be2dd1c404448f12ab298792a05ef44ec815d3d0f1d36a"}, "downloads": -1, "filename": "xframes-0.3.6.tar.gz", "has_sig": false, "md5_digest": "f42defacaf1cb9ac8924e5a1cbf18407", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166764, "upload_time": "2017-06-04T21:53:19", "upload_time_iso_8601": "2017-06-04T21:53:19.926298Z", "url": "https://files.pythonhosted.org/packages/d7/d8/26ef999774375e2edc93607155ec3b6f967a0d6b11ddd41804221c9e18b1/xframes-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "f7b7af17e5c9db64e19bc03a1620250c", "sha256": "13ac038ace5db55b94bc5ff330e85b407c9304e03db130dc6baa809fee3d21e2"}, "downloads": -1, "filename": "xframes-0.3.7.tar.gz", "has_sig": false, "md5_digest": "f7b7af17e5c9db64e19bc03a1620250c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163440, "upload_time": "2017-06-06T22:54:59", "upload_time_iso_8601": "2017-06-06T22:54:59.255508Z", "url": "https://files.pythonhosted.org/packages/77/22/68c622e816940d1d75a6e9fb9d20094fafed992fdee6a475a0b97f26e68e/xframes-0.3.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f7b7af17e5c9db64e19bc03a1620250c", "sha256": "13ac038ace5db55b94bc5ff330e85b407c9304e03db130dc6baa809fee3d21e2"}, "downloads": -1, "filename": "xframes-0.3.7.tar.gz", "has_sig": false, "md5_digest": "f7b7af17e5c9db64e19bc03a1620250c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163440, "upload_time": "2017-06-06T22:54:59", "upload_time_iso_8601": "2017-06-06T22:54:59.255508Z", "url": "https://files.pythonhosted.org/packages/77/22/68c622e816940d1d75a6e9fb9d20094fafed992fdee6a475a0b97f26e68e/xframes-0.3.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:36 2020"}