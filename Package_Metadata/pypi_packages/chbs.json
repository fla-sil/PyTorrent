{"info": {"author": "Wayne Werner", "author_email": "wayne@waynewerner.com", "bugtrack_url": null, "classifiers": [], "description": "correcthorsebatterystaple\n=========================\n\nthis: http://xkcd.com/936/\n\nYou can try it out at https://correcthorsebatterystaple.waynewerner.com\n\nI don't log which passwords I generate, but if you're paranoid about security\nyou probably should just generate the passwords locally.\n\n---\n\nThis project started off using Flask. Then I realized that was overkill. I\ndecdied to make this server be able to run with pure Python, because there's\nliterally no reason *not* to.\n\nYou can just run this as:\n\n    python3 server.py\n\nAnd then connect to it:\n\n    $ curl localhost:8000\n    correct horse battery staple$\n\nYeah. It won't return an ending newline. That's intentional.\n\n---\n\nI also decided that for funsies I should make this into a test. What is the difference between just:\n\n- Single threaded server.\n- A server using `select`.\n- A server using `epoll`.\n- A multithreaded server.\n- A server using asyncio.\n- A server using an aiohttp server.\n\nMy theory is that a single threaded server should be about as good as it gets.\nOr possibly using epoll or select? Given the size of the data that we're\nreturning, I don't think that I'll get a lot of difference between any of these\nservers. We shall see.\n\nThe first server that I will produce will be just a single threaded server\nusing raw sockets and `listen(20)`. That seems like a reasonably large queue?\nTo be honest, I'm not *entirely* certain how that works - in the past I've used\nhuge numbers or smaller numbers and didn't really see a difference.\n\n\n---\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/waynew/chbs", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "chbs", "package_url": "https://pypi.org/project/chbs/", "platform": "", "project_url": "https://pypi.org/project/chbs/", "project_urls": {"Homepage": "https://github.com/waynew/chbs"}, "release_url": "https://pypi.org/project/chbs/0.1.0/", "requires_dist": ["wheel ; extra == 'build'", "pytest ; extra == 'test'"], "requires_python": "", "summary": "", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>correcthorsebatterystaple</h1>\n<p>this: <a href=\"http://xkcd.com/936/\" rel=\"nofollow\">http://xkcd.com/936/</a></p>\n<p>You can try it out at <a href=\"https://correcthorsebatterystaple.waynewerner.com\" rel=\"nofollow\">https://correcthorsebatterystaple.waynewerner.com</a></p>\n<p>I don't log which passwords I generate, but if you're paranoid about security\nyou probably should just generate the passwords locally.</p>\n<hr>\n<p>This project started off using Flask. Then I realized that was overkill. I\ndecdied to make this server be able to run with pure Python, because there's\nliterally no reason <em>not</em> to.</p>\n<p>You can just run this as:</p>\n<pre><code>python3 server.py\n</code></pre>\n<p>And then connect to it:</p>\n<pre><code>$ curl localhost:8000\ncorrect horse battery staple$\n</code></pre>\n<p>Yeah. It won't return an ending newline. That's intentional.</p>\n<hr>\n<p>I also decided that for funsies I should make this into a test. What is the difference between just:</p>\n<ul>\n<li>Single threaded server.</li>\n<li>A server using <code>select</code>.</li>\n<li>A server using <code>epoll</code>.</li>\n<li>A multithreaded server.</li>\n<li>A server using asyncio.</li>\n<li>A server using an aiohttp server.</li>\n</ul>\n<p>My theory is that a single threaded server should be about as good as it gets.\nOr possibly using epoll or select? Given the size of the data that we're\nreturning, I don't think that I'll get a lot of difference between any of these\nservers. We shall see.</p>\n<p>The first server that I will produce will be just a single threaded server\nusing raw sockets and <code>listen(20)</code>. That seems like a reasonably large queue?\nTo be honest, I'm not <em>entirely</em> certain how that works - in the past I've used\nhuge numbers or smaller numbers and didn't really see a difference.</p>\n<hr>\n\n          </div>"}, "last_serial": 6164710, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0230a40758efae733d88924954f7ecf7", "sha256": "786170eb8f97d82418d12bf8adf7e6958fd3088cba5075ccba2c1492cfed6028"}, "downloads": -1, "filename": "chbs-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0230a40758efae733d88924954f7ecf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2895, "upload_time": "2019-11-19T21:22:25", "upload_time_iso_8601": "2019-11-19T21:22:25.663959Z", "url": "https://files.pythonhosted.org/packages/09/b8/48b49e8ca866667f022ff3b3e4cf45c590ef55ffd51549ec7afc177d869a/chbs-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0230a40758efae733d88924954f7ecf7", "sha256": "786170eb8f97d82418d12bf8adf7e6958fd3088cba5075ccba2c1492cfed6028"}, "downloads": -1, "filename": "chbs-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0230a40758efae733d88924954f7ecf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2895, "upload_time": "2019-11-19T21:22:25", "upload_time_iso_8601": "2019-11-19T21:22:25.663959Z", "url": "https://files.pythonhosted.org/packages/09/b8/48b49e8ca866667f022ff3b3e4cf45c590ef55ffd51549ec7afc177d869a/chbs-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:34:22 2020"}