{"info": {"author": "Daniel J. R. May", "author_email": "daniel.may@danieljrmay.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pyinilint\nThe `pyinilint` command line utility allows you to lint (check the\nsyntax) of [INI](https://en.wikipedia.org/wiki/INI_file)-like\nconfiguration files. Here\u2019s an example of the simplest possible\nuseage.\n\n```console\n$ pyinilint myfile.ini\n```\n\nSilent output, and a `0` exit status means that `myfile.ini` has been\nparsed successfully.\n\nThe `pyinilint` utility is a front-end to the Python\n[configparser](https://docs.python.org/3/library/configparser.html)\nmodule, which supports interpolation. This means you can have\n\"variables\" in your INI-files which can be optionally replaced with\nvalues, which can be defined within the same, or different,\nINI-file. Using different pyinilint command line switches you can\ninspect what is happening with variable interpolation in your INI-files.\n\n\n## Installation\n\n### Copr\n\nIf you use Fedora then you can install `pyinilint` via a [Copr\nrespository](https://copr.fedorainfracloud.org/coprs/danieljrmay/pyinilint/).\n\n```console\n$ dnf copr enable danieljrmay/pyinilint \n$ dnf install pyinilint \n```\n\nThe installed RPMs include a man page and Bash completion script.\n\n\n### PyPI\n\nYou can get a distribution of [`pyinilint` from\nPyPI](https://pypi.org/project/pyinilint/).\n\n```console\n$ pip install pyinilint\n```\n\nHowever, this distribution currently does not include the man page or\nBash completion script.\n\n\n### Source Code Release\n\nYou can download a source code release from the [`pyinilint` project\u2019s\nGitLab releases](https://gitlab.com/danieljrmay/pyinilint/releases)\npage. You can then install with something like the following:\n\n```console\n$ tar -xzf pyinilint-0.10.tar.gz\n$ cd pyinilint-0.10\n$ make\n$ make pybuild\n$ sudo make install\n$ sudo make pyinstall\n```\n\nThe `make` and `sudo make install` builds and installs the man page\nand Bash completion script. The `make pybuild` and `sudo make\npyinstall` builds and installs the Python module and console script.\n\n\n## Usage\n\n```console\n$ pyinilint --help\nusage: pyinilint [-h] [-b] [-d] [-e ENCODING] [-m] [-o] [-r] [-s] [-v]\n                 paths [paths ...]\n\npyinilint (version 0.10) is a linter and inspector for INI format files.\n\npositional arguments:\n  paths                 paths of the file(s) to check\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b, --basic           use basic interpolation, the default is extended\n  -d, --debug           show debugging messages\n  -e ENCODING, --encoding ENCODING\n                        set the encoding to be used, omit to use the default\n  -i, --interpolate     interpolate the parsed configuration without output\n  -m, --merge           merge files into a single configuration\n  -o, --output          output the parsed configuration to stdout\n  -r, --raw             output raw, do not interpolate\n  -s, --serialize       output the interpolated and serialized configuration\n                        to stdout\n  -v, --verbose         show verbose messages\n\nSee https://github.com/danieljrmay/pyinilint for more information.\n```\n\n### Options\n\n#### `-b`, `--basic`\nUse basic interpolation when parsing. See the Python configparser\ninterpolation documentation below for more information.\n\n#### `-d`, `--debug`\nOutput debugging messages, probably only of interest to those\ndeveloping pyinilint.\n\n#### `-e ENCODING`, `--encoding ENCODING`\nSpecifiy a non-default encoding to use when parsing the files to be\nchecked.\n\n#### `h`, `--help`\nDisplay help and version information.\n\n#### `i`, `--interpolate`\nInterpolate the parsed configuration but do not output anything. This\nis useful for detecting warnings and errors in the interpolation\nsyntax or values.\n\n#### `-m`, `--merge`\nRead all the specified `file`s into a single Python `ConfigParser`\nobject; this allows interpolation between files. When this option is\nnot specified each file is read into its own seperate `ConfigParser`\nobject.\n\n#### `-o`, `--output`\nOutput the parsed configuration to `STDOUT` without any\ninterpolation. Use the `--serialize` options to enable interpolation.\n\n#### `-r`, `--raw`\nUse raw mode, so there is no interpolation when parsing. See the\nPython configparser interpolation documentation below for more\ninformation.\n\n#### `-s`, `--serialize` \nOutput the parsed, interpolated and serialized configuration to\n`STDOUT`. Use this together with the `--basic`, `--merge` and `--raw`\noptions to inspect the interpolation of \"variables\" within you\nINI-files.\n\n#### `-v`, `--verbose`\nPrint verbose messages.\n\n\n### Exit status\nThis is the list of exit status codes and their meanings returned to the shell by `pyinilint`.\n\n| Exit Status  | Name                              | Meaning                                                                               |\n| :----------: | --------------------------------  | ------------------------------------------------------------------------------------- |\n| 0            | EXIT_OK                           | Everything went well, all files linted successfully.                                  |\n| 1            | EXIT_NON_EXISTANT_FILE            | At least one of the specified files does not exist.                                   |\n| 2            | EXIT_SYNTAX_ERROR                 | There was an error in the command line syntax.                                        |\n| 3            | EXIT_UNREADABLE_FILE              | At least one of the specified files existed but was not readable.                     |\n| 4            | EXIT_DUPLICATE_SECTION            | There is a duplicate section in the parsed configuration.                             |\n| 5            | EXIT_DUPLICATE_OPTION             | There is a duplicate option in the parsed configuration.                              |\n| 6            | EXIT_INTERPOLATION_MISSING_OPTION | There is no corresponding option to a given interpolation key in the configuration.   |\n| 7            | EXIT_INTERPOLATION_DEPTH          | Maximum recursion depth has been exceeded in interpolation.                           |\n| 8            | EXIT_MISSING_SECTION_HEADER       | There is a missing section header in a file.                                          |\n| 9            | EXIT_PARSING_ERROR                | Usually some kind of syntax error within a parsed file.                               |\n| 10           | EXIT_UNKNOWN_ERROR                | A catch-all for some other kind of error, inspect the error message for more details. |\n\n\n### Examples\n\n#### Check a single file\n```console\n$ pyinilint myfile.ini\n```\nA silent response (with exit status of 0) means that `myfile.ini` has\npassed the lint check.\n\n#### Check multiple individual files\n```console\n$ pyinilint -v myfile1.ini myfile2.ini\n```\nCheck multiple files treating each one individually and output verbose\nmessages.\n\n#### Check multiple files in a collection, and output the serialized results\n```console\n$ pyinilint -m -s myfile1.ini myfile2.ini\n```\nCheck multiple files as part of a single `ConfigParser` object,\nand output the parsed and interpolated values.\n\n#### Check a file with a custom encoding\n```console\n$ pyinilint -e iso8859_15 myfile.ini\n```\nCheck `myfile.ini` using  iso8859_15 encoding.\n\n\n### Caution \n\nIf your INI-files are ultimatly going to be parsed by an INI-parser\ndifferent from `ConfigParser` then you should be aware that there can\nbe subtle differences in INI-file format between parsers. However, it\nshould still spot most howling errors!\n\n\n## Contact\n\nPlease get in contact via the [`pyinilint` project\u2019s GitLab\nwebsite](https://gitlab.com/danieljrmay/pyinilint) to:\n\n* [Report issues](https://gitlab.com/danieljrmay/pyinilint/issues) or make feature requests.\n* Clone or fork the Git source code tree.\n* Say \u201chello!\u201d \ud83d\ude09\n\n\n## References\n* Python [configparser interpolation documentation](https://docs.python.org/3/library/configparser.html#interpolation-of-values)\n* The [pyinilint project website](https://gitlab.com/danieljrmay/pyinilint)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/danieljrmay/pyinilint", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyinilint", "package_url": "https://pypi.org/project/pyinilint/", "platform": "", "project_url": "https://pypi.org/project/pyinilint/", "project_urls": {"Homepage": "https://gitlab.com/danieljrmay/pyinilint"}, "release_url": "https://pypi.org/project/pyinilint/0.11/", "requires_dist": null, "requires_python": "", "summary": "A linter and inspector for INI format files", "version": "0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyinilint</h1>\n<p>The <code>pyinilint</code> command line utility allows you to lint (check the\nsyntax) of <a href=\"https://en.wikipedia.org/wiki/INI_file\" rel=\"nofollow\">INI</a>-like\nconfiguration files. Here\u2019s an example of the simplest possible\nuseage.</p>\n<pre><span class=\"gp\">$</span> pyinilint myfile.ini\n</pre>\n<p>Silent output, and a <code>0</code> exit status means that <code>myfile.ini</code> has been\nparsed successfully.</p>\n<p>The <code>pyinilint</code> utility is a front-end to the Python\n<a href=\"https://docs.python.org/3/library/configparser.html\" rel=\"nofollow\">configparser</a>\nmodule, which supports interpolation. This means you can have\n\"variables\" in your INI-files which can be optionally replaced with\nvalues, which can be defined within the same, or different,\nINI-file. Using different pyinilint command line switches you can\ninspect what is happening with variable interpolation in your INI-files.</p>\n<h2>Installation</h2>\n<h3>Copr</h3>\n<p>If you use Fedora then you can install <code>pyinilint</code> via a <a href=\"https://copr.fedorainfracloud.org/coprs/danieljrmay/pyinilint/\" rel=\"nofollow\">Copr\nrespository</a>.</p>\n<pre><span class=\"gp\">$</span> dnf copr <span class=\"nb\">enable</span> danieljrmay/pyinilint \n<span class=\"gp\">$</span> dnf install pyinilint \n</pre>\n<p>The installed RPMs include a man page and Bash completion script.</p>\n<h3>PyPI</h3>\n<p>You can get a distribution of <a href=\"https://pypi.org/project/pyinilint/\" rel=\"nofollow\"><code>pyinilint</code> from\nPyPI</a>.</p>\n<pre><span class=\"gp\">$</span> pip install pyinilint\n</pre>\n<p>However, this distribution currently does not include the man page or\nBash completion script.</p>\n<h3>Source Code Release</h3>\n<p>You can download a source code release from the <a href=\"https://gitlab.com/danieljrmay/pyinilint/releases\" rel=\"nofollow\"><code>pyinilint</code> project\u2019s\nGitLab releases</a>\npage. You can then install with something like the following:</p>\n<pre><span class=\"gp\">$</span> tar -xzf pyinilint-0.10.tar.gz\n<span class=\"gp\">$</span> <span class=\"nb\">cd</span> pyinilint-0.10\n<span class=\"gp\">$</span> make\n<span class=\"gp\">$</span> make pybuild\n<span class=\"gp\">$</span> sudo make install\n<span class=\"gp\">$</span> sudo make pyinstall\n</pre>\n<p>The <code>make</code> and <code>sudo make install</code> builds and installs the man page\nand Bash completion script. The <code>make pybuild</code> and <code>sudo make pyinstall</code> builds and installs the Python module and console script.</p>\n<h2>Usage</h2>\n<pre><span class=\"gp\">$</span> pyinilint --help\n<span class=\"go\">usage: pyinilint [-h] [-b] [-d] [-e ENCODING] [-m] [-o] [-r] [-s] [-v]</span>\n<span class=\"go\">                 paths [paths ...]</span>\n\n<span class=\"go\">pyinilint (version 0.10) is a linter and inspector for INI format files.</span>\n\n<span class=\"go\">positional arguments:</span>\n<span class=\"go\">  paths                 paths of the file(s) to check</span>\n\n<span class=\"go\">optional arguments:</span>\n<span class=\"go\">  -h, --help            show this help message and exit</span>\n<span class=\"go\">  -b, --basic           use basic interpolation, the default is extended</span>\n<span class=\"go\">  -d, --debug           show debugging messages</span>\n<span class=\"go\">  -e ENCODING, --encoding ENCODING</span>\n<span class=\"go\">                        set the encoding to be used, omit to use the default</span>\n<span class=\"go\">  -i, --interpolate     interpolate the parsed configuration without output</span>\n<span class=\"go\">  -m, --merge           merge files into a single configuration</span>\n<span class=\"go\">  -o, --output          output the parsed configuration to stdout</span>\n<span class=\"go\">  -r, --raw             output raw, do not interpolate</span>\n<span class=\"go\">  -s, --serialize       output the interpolated and serialized configuration</span>\n<span class=\"go\">                        to stdout</span>\n<span class=\"go\">  -v, --verbose         show verbose messages</span>\n\n<span class=\"go\">See https://github.com/danieljrmay/pyinilint for more information.</span>\n</pre>\n<h3>Options</h3>\n<h4><code>-b</code>, <code>--basic</code></h4>\n<p>Use basic interpolation when parsing. See the Python configparser\ninterpolation documentation below for more information.</p>\n<h4><code>-d</code>, <code>--debug</code></h4>\n<p>Output debugging messages, probably only of interest to those\ndeveloping pyinilint.</p>\n<h4><code>-e ENCODING</code>, <code>--encoding ENCODING</code></h4>\n<p>Specifiy a non-default encoding to use when parsing the files to be\nchecked.</p>\n<h4><code>h</code>, <code>--help</code></h4>\n<p>Display help and version information.</p>\n<h4><code>i</code>, <code>--interpolate</code></h4>\n<p>Interpolate the parsed configuration but do not output anything. This\nis useful for detecting warnings and errors in the interpolation\nsyntax or values.</p>\n<h4><code>-m</code>, <code>--merge</code></h4>\n<p>Read all the specified <code>file</code>s into a single Python <code>ConfigParser</code>\nobject; this allows interpolation between files. When this option is\nnot specified each file is read into its own seperate <code>ConfigParser</code>\nobject.</p>\n<h4><code>-o</code>, <code>--output</code></h4>\n<p>Output the parsed configuration to <code>STDOUT</code> without any\ninterpolation. Use the <code>--serialize</code> options to enable interpolation.</p>\n<h4><code>-r</code>, <code>--raw</code></h4>\n<p>Use raw mode, so there is no interpolation when parsing. See the\nPython configparser interpolation documentation below for more\ninformation.</p>\n<h4><code>-s</code>, <code>--serialize</code></h4>\n<p>Output the parsed, interpolated and serialized configuration to\n<code>STDOUT</code>. Use this together with the <code>--basic</code>, <code>--merge</code> and <code>--raw</code>\noptions to inspect the interpolation of \"variables\" within you\nINI-files.</p>\n<h4><code>-v</code>, <code>--verbose</code></h4>\n<p>Print verbose messages.</p>\n<h3>Exit status</h3>\n<p>This is the list of exit status codes and their meanings returned to the shell by <code>pyinilint</code>.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Exit Status</th>\n<th>Name</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">0</td>\n<td>EXIT_OK</td>\n<td>Everything went well, all files linted successfully.</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td>EXIT_NON_EXISTANT_FILE</td>\n<td>At least one of the specified files does not exist.</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td>EXIT_SYNTAX_ERROR</td>\n<td>There was an error in the command line syntax.</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td>EXIT_UNREADABLE_FILE</td>\n<td>At least one of the specified files existed but was not readable.</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td>EXIT_DUPLICATE_SECTION</td>\n<td>There is a duplicate section in the parsed configuration.</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td>EXIT_DUPLICATE_OPTION</td>\n<td>There is a duplicate option in the parsed configuration.</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td>EXIT_INTERPOLATION_MISSING_OPTION</td>\n<td>There is no corresponding option to a given interpolation key in the configuration.</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td>EXIT_INTERPOLATION_DEPTH</td>\n<td>Maximum recursion depth has been exceeded in interpolation.</td>\n</tr>\n<tr>\n<td align=\"center\">8</td>\n<td>EXIT_MISSING_SECTION_HEADER</td>\n<td>There is a missing section header in a file.</td>\n</tr>\n<tr>\n<td align=\"center\">9</td>\n<td>EXIT_PARSING_ERROR</td>\n<td>Usually some kind of syntax error within a parsed file.</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td>EXIT_UNKNOWN_ERROR</td>\n<td>A catch-all for some other kind of error, inspect the error message for more details.</td>\n</tr></tbody></table>\n<h3>Examples</h3>\n<h4>Check a single file</h4>\n<pre><span class=\"gp\">$</span> pyinilint myfile.ini\n</pre>\n<p>A silent response (with exit status of 0) means that <code>myfile.ini</code> has\npassed the lint check.</p>\n<h4>Check multiple individual files</h4>\n<pre><span class=\"gp\">$</span> pyinilint -v myfile1.ini myfile2.ini\n</pre>\n<p>Check multiple files treating each one individually and output verbose\nmessages.</p>\n<h4>Check multiple files in a collection, and output the serialized results</h4>\n<pre><span class=\"gp\">$</span> pyinilint -m -s myfile1.ini myfile2.ini\n</pre>\n<p>Check multiple files as part of a single <code>ConfigParser</code> object,\nand output the parsed and interpolated values.</p>\n<h4>Check a file with a custom encoding</h4>\n<pre><span class=\"gp\">$</span> pyinilint -e iso8859_15 myfile.ini\n</pre>\n<p>Check <code>myfile.ini</code> using  iso8859_15 encoding.</p>\n<h3>Caution</h3>\n<p>If your INI-files are ultimatly going to be parsed by an INI-parser\ndifferent from <code>ConfigParser</code> then you should be aware that there can\nbe subtle differences in INI-file format between parsers. However, it\nshould still spot most howling errors!</p>\n<h2>Contact</h2>\n<p>Please get in contact via the <a href=\"https://gitlab.com/danieljrmay/pyinilint\" rel=\"nofollow\"><code>pyinilint</code> project\u2019s GitLab\nwebsite</a> to:</p>\n<ul>\n<li><a href=\"https://gitlab.com/danieljrmay/pyinilint/issues\" rel=\"nofollow\">Report issues</a> or make feature requests.</li>\n<li>Clone or fork the Git source code tree.</li>\n<li>Say \u201chello!\u201d \ud83d\ude09</li>\n</ul>\n<h2>References</h2>\n<ul>\n<li>Python <a href=\"https://docs.python.org/3/library/configparser.html#interpolation-of-values\" rel=\"nofollow\">configparser interpolation documentation</a></li>\n<li>The <a href=\"https://gitlab.com/danieljrmay/pyinilint\" rel=\"nofollow\">pyinilint project website</a></li>\n</ul>\n\n          </div>"}, "last_serial": 4930691, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "796d07df813812d46012df12c5c7961e", "sha256": "072ffd01f1ef258049150442af2cbae1d40bfa1c184f19f6050d43825c05372b"}, "downloads": -1, "filename": "pyinilint-0.10.tar.gz", "has_sig": false, "md5_digest": "796d07df813812d46012df12c5c7961e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20040, "upload_time": "2019-01-23T19:57:04", "upload_time_iso_8601": "2019-01-23T19:57:04.824539Z", "url": "https://files.pythonhosted.org/packages/26/37/5d75528679a2996a280bdbaf447fadc9f53ca8efe424f3aa72173ee82280/pyinilint-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "300ca647831d3ce7a899356008e32ee6", "sha256": "20c39c211ddcc1b323e182e96853101603463d77227594ddc0c8a88bce658208"}, "downloads": -1, "filename": "pyinilint-0.11.tar.gz", "has_sig": false, "md5_digest": "300ca647831d3ce7a899356008e32ee6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23101, "upload_time": "2019-03-12T15:40:54", "upload_time_iso_8601": "2019-03-12T15:40:54.573213Z", "url": "https://files.pythonhosted.org/packages/4f/12/d0c6316bb4862a115b3f4e631ce6efcd46d1cc918a4783b9e0adb43edab6/pyinilint-0.11.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "2ac6f9eb57a2bfee394d5e64bf42c387", "sha256": "88878eb18bee400c3b33d49dfc89aed3519cfde9d43f775067a119e7a15447f9"}, "downloads": -1, "filename": "pyinilint-0.9.tar.gz", "has_sig": false, "md5_digest": "2ac6f9eb57a2bfee394d5e64bf42c387", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19267, "upload_time": "2019-01-23T16:38:08", "upload_time_iso_8601": "2019-01-23T16:38:08.217623Z", "url": "https://files.pythonhosted.org/packages/9f/b9/02188c202566c7f391c1925f4913838d43eb6fb96b6add8c9acadf31c571/pyinilint-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "300ca647831d3ce7a899356008e32ee6", "sha256": "20c39c211ddcc1b323e182e96853101603463d77227594ddc0c8a88bce658208"}, "downloads": -1, "filename": "pyinilint-0.11.tar.gz", "has_sig": false, "md5_digest": "300ca647831d3ce7a899356008e32ee6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23101, "upload_time": "2019-03-12T15:40:54", "upload_time_iso_8601": "2019-03-12T15:40:54.573213Z", "url": "https://files.pythonhosted.org/packages/4f/12/d0c6316bb4862a115b3f4e631ce6efcd46d1cc918a4783b9e0adb43edab6/pyinilint-0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:01 2020"}