{"info": {"author": "Rob van der Most", "author_email": "Rob.vanderMost@TomTom.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Documentation", "Topic :: Software Development :: Documentation"], "description": "# AsciiDoxy\n\nAsciiDoxy generates API documentation from Doxygen XML output to AsciiDoc.\n\nSupported languages:\n- C++\n- Java\n- Objective C\n\n## Credits\n\nThis package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter) and the\n[audreyr/cookiecutter-pypackage](https://github.com/audreyr/cookiecutter-pypackage) project\ntemplate.\n\n## What does AsciiDoxy do?\n\nIn essence AsciiDoxy is a preprocessor for AsciiDoc files. It looks for specific tags in these files\nand replaces them with valid AsciiDoc syntax. The information it inserts into the AsciiDoc files\ncomes from Doxygen XML output.\n\n### 1\\. Collects Doxygen XML and include files\n\nDoxygen XML files are collected from remote HTTP servers, from the local file system, or a\ncombination of both. What files are collected is specified in a package specification file and\noptionally a version file. See [Package specification](#package-specification) for details.\n\nThe packages can also contain other files that can be included in the documentation. These can be\nother AsciiDoc files, images, and other included files. The included AsciiDoc files can alo contain\nAsciiDoxy directives.\n\n### 2\\. Copies files to an intermediate directory\n\nThe input file and all files from the same directory and sub directories will be copied to an\nintermediate directory. After this all `adoc` directories from the downloaded archives will also be\ncopied inside the intermediate directory preserving their directory structure.\n\n### 3\\. Parses Doxygen XML\n\nThe downloaded Doxygen XML files are parsed into an internal representation that can be converted to\nAsciiDoc on demand. References between separate packages are detected and resolved.\n\nThe parsing takes the source language into account. Specific cases for each language, like the\nformat of type specifications, are handled based on the language specified in the Doxygen XML files.\n\n### 4\\. Preprocesses Asciidoc files\n\nThe input AsciiDoc file is preprocessed using Mako. Mako looks for special syntax, the most common\nbeing `${...}`. Any valid python code can be placed between the braces, and will be executed by Mako.\nFor more details on the syntax, see the [Mako syntax\ndocumentation](https://docs.makotemplates.org/en/latest/syntax.html).\n\nThe code executed by Mako inserts additional AsciiDoc into the file. Methods are provided to use the\ninformation from the Doxygen XML files. See [Usage](#usage) for more details.\n\nConsistency checking is performed to make sure links to, and between, API reference documentation\nare valid. Depending on the command line options either a warning or an error is thrown if an\ninconsistency is found.\n\nThe results of preprocessing are pure AsciiDoc files. They are stored as temporary files next to the\ninput files inside the intermediate directory. This should preserve all relative links to other\nfiles.\n\n### 5\\. Invokes Asciidoctor\n\nWhen preprocessing is successful, Asciidoctor is invoked to generate single- or multi-paged HTML\noutput depending on whether the `--multi-page` option was set.\n\n## Installation\n\nThe preferred way to install is using pip:\n\n``` bash\npip3 install asciidoxy\n```\n\nAlternatively you can directly install the development version:\n\n``` bash\nmake install\n```\n\n## Usage\n\nThe minimal invocation takes an input AsciiDoc file and creates the HTML representation:\n\n``` bash\nasciidoxy input_file.adoc\n```\n\nFor more information about command line options:\n\n``` bash\nasciidoxy -h\n```\n\nIn the input AsciiDoc file, you can use any [Mako\nsyntax](https://docs.makotemplates.org/en/latest/syntax.html). Mako syntax looks like `${...}` where\n`...` can contain any valid python code. This python code is executed when the file is processed by\nAsciiDoxy.\n\nA special object `api` provides methods to insert API reference documentation and link to its\nelements.\n\n### Generating XML using Doxygen\n\nFor extracting documentation from source code, AsciiDoxy relies on Doxygen. You are expected to run\nDoxygen on your source code, and then provide the path to the generated XML files to AsciiDoxy. It\nis recommended to set at least the following non-default settings in your Doxyfile when generating\nthe XML.\n\n#### C++\n\n    GENERATE_XML           = YES\n\n#### Java\n\n    GENERATE_XML           = YES\n    JAVADOC_AUTOBRIEF      = YES\n    OPTIMIZE_OUTPUT_JAVA   = YES\n\n#### Objective C\n\n    GENERATE_XML           = YES\n    EXTENSION_MAPPING      = h=objective-c\n\n### Package specification\n\nDoxygen XML files and other files to include in the documentation are specified in a package\nspecification file. The package specification file is in [TOML](https://github.com/toml-lang/toml)\nformat. It contains 2 main sections: `packages` and `sources`.\n\n#### Packages\n\nThe `packages` section is the only mandatory section. It contains a separate subsection for each\npackage to include. The name of the subsection is the name of the package:\n\n``` toml\n[packages]\n\n[packages.package1]\n# Specification of `package1`\n\n[packages.package2]\n# Specification of `package2`\n```\n\nA package has a specific type and based on the type different key/value pairs are required. For all\ntypes of packages the following key/value pairs are required:\n\n  - `type`: The type of the package.\n\n  - `xml_subdir`: Subdirectory in the root of the package in which all Doxygen XML files are stored.\n\n  - `include_subdir`: Subdirectory in the root of the package in which all other include files are\n    stored.\n\nPackages of type `local` refer to a local directory. They require the following additional key/value\npairs:\n\n  - `package_dir`: Absolute or relative path to the directory containing the package.\n\nExample:\n\n``` toml\n[packages.local_package]\ntype = \"local\"\nxml_subdir = \"xml\"\ninclude_subdir = \"adoc\"\npackage_dir = \"/path/to/my/package/\"\n```\n\nPackages of type `http` are downloaded from a remote location. They can consist of multiple files,\nall of which need to be (compressed) tarballs. Each file can contain XML files, include files, or\nboth.\n\nThe following additional key/value pairs are required:\n\n  - `url_template`: Template for constructing the URL to download the package file from.\n\n  - `file_names`: List of file names making up the package.\n\nThe following additional key/value pairs are optional:\n\n  - `version`: Version number of the package.\n\nThe `url_template` can contain the following placeholders, that are replaced when creating the URL\nto download each package file:\n\n  - `{name}`: Replaced with the name of the package.\n\n  - `{version}`: Replaced with the version of the package.\n\n  - `{file_name}`: Replaced with the file name.\n\nExample:\n\n``` toml\n[packages]\n\n[packages.package1]\ntype = \"http\"\nurl_template = \"https://example.com/{name}/{version}/{file_name}\"\nxml_subdir = \"xml\"\ninclude_subdir = \"adoc\"\nversion = \"12.3.4\"\n```\n\nIf no `version` is specified for the package, the version is retrieved from a version file. The\nversion file is a comma separated values file containing pairs of package names and corresponding\nversions. It can contain any number of fields, but it is required to have a header containing the\nnames `Component name` and `Version` for the columns containing these.\n\nExample:\n\n``` text\nComponent name, Version\npackage1,3.0.0\npackage2,4.5.1\n```\n\n#### Sources\n\nThe `sources` section allows specifying templates for packages. Each template can specify a common\n\"source\" of packages. With a source, settings that are duplicated for many packages can be specified\nonly once.\n\nA source section can contain every key/value pair that is allowed for a package. Packages can\nspecify the source they are based on by using the `source` key/value pair.\n\nWhen a source is used, the key/value pairs of the source and the pacakge are merged. Values for keys\nthat are present in both the package and the source will be taken from the package. So the package\nvalues override source values.\n\nExample:\n\n``` toml\n[sources]\n\n[sources.remote_server]\ntype = \"http\"\nurl_template = \"https://example.com/{name}/{version}/{file_name}\"\nxml_subdir = \"xml\"\ninclude_subdir = \"adoc\"\n\n[packages]\n\n[packages.package1]\nsource = \"remote_server\"\nversion = \"12.3.4\"\n```\n\n### Inserting API reference\n\n``` python\n${api.insert(<name>[, kind=<kind>][, lang=<language>][, leveloffset])}\n${api.insert_<kind>(<name>[, lang=<language>][, leveloffset=<offset>])}\n\n# Examples:\n${api.insert(\"MyNamespace::MyClass\")}\n${api.insert(\"com.tomtom.Class\", leveloffset=\"+2\")}\n${api.insert(\"com.tomtom.Class\", kind=\"class\")}\n${api.insert(\"MyNamespace::FreeFunction\", lang=\"c++\")}\n${api.insert_class(\"MyNamespace::MyClass\")}\n${api.insert_function(\"MyNamespace::FreeFunction\", lang=\"c++\")}\n```\n\nUse the `insert` methods to insert API reference documentation at the current location.\n\n  - `name`  \n    Fully qualified name of the element to insert.\n\n  - `lang`  \n    Name of the programming language.\n\n  - `kind`  \n    Kind of element to insert.\n\n  - `leveloffset`  \n    Offset for the headers in the reference from the top level of the current file. Defaults to +1.\n\nTrying to insert an unknown element will result in an error.\n\nWhen not specifying the language and kind, AsciiDoxy will try to find the element by name, and\ndeduce the kind and language. If there are multiple matching elements, an error is raised.\n\n### Linking to API reference\n\n``` python\n${api.link(<name>[, kind=<kind>][, lang=<language>][, text][, full_name])}\n${api.link_<kind>(<name>[, lang=<language>][, text][, full_name])}\n\n# Examples:\n${api.link(\"MyNamespace::MyClass\")}\n${api.link(\"MyNamespace::MyClass\", lang=\"c++\")}\n${api.link(\"com.tomtom.Class.Method\", full_name=True)}\n${api.link(\"MyNamespace::FreeFunction\", text=\"FreeFunction\")}\n${api.link_class(\"MyNamespace::MyClass\")}\n${api.link_class(\"MyNamespace::MyClass\", lang=\"c++\")}\n```\n\nInsert a link to an API reference element. By default the short name of the element is used as the\ntext of the link.\n\n  - `name`  \n    Fully qualified name of the element to insert.\n\n  - `lang`  \n    Name of the programming language.\n\n  - `kind`  \n    Kind of element to insert.\n\n  - `text`  \n    Alternative text to use for the link.\n\n  - `full_name`  \n    Use the fully qualified name of the referenced element.\n\nBy default a warning is shown if the element is unknown, or is not inserted in the same document\nusing an `insert_` method. There is a command-line option to throw an error instead.\n\nWhen not specifying the language and kind, AsciiDoxy will try to find the element by name, and\ndeduce the kind and language. If there are multiple matching elements, an error is raised.\n\n### Function or method overloads\n\nIn languages that support overloading functions, methods or other callables, the name alone is not\nsufficient to select the correct element to link to or to insert. In this case the exact list of\ntypes of the parameters can be provided to select the right element.\n\nThe list of parameter types should be specified in parentheses after the function name:\n\n``` python\n${api.link(\"MyFunction(int, std::string)\")}\n```\n\nEmpty parentheses indicate the function should accept no parameters:\n\n``` python\n${api.link(\"MyFunction()\")}\n```\n\nIf no parentheses are given, the parameters are ignored. If there are multiple overloads, AsciiDoxy\nwill not be able to pick one:\n\n``` python\n${api.link(\"MyFunction\")}\n```\n\n### Including other AsciiDoc files\n\n``` python\n${api.include(<file_name>[, leveloffset=<offset>][, link_text=<text>][, link_prefix=<prefix>][, multi_page_link=<bool>])}\n\n# Examples:\n${api.include(\"component/reference.adoc\")}\n${api.include(\"/mount/data/reference.adoc\", leveloffset=\"+3\")}\n\n# If you want your documentation to look nicely also as multi-page document, don't forget to pass\n# link_text and optionally link_prefix arguments, e.g.:\n${api.include(\"component/reference.adoc\", link_text=\"Reference\", link_prefix=\". \")}\n\n# If you want to embed a file in single-page, but not include a link in multi-page\n${api.include(\"/component/reference.adoc\", multi_page_link=False)}\n```\n\nInclude another AsciiDoc file and process it using Mako as well. The normal AsciiDoc include\ndirectives can be used as well, but will not process any Mako directives. With `--multi-page` option\nthe include method doesn\u2019t embed the included document in its parent document but generates separate\noutput document instead. By default `multi_page_link` is `True`, so a link to the included document\nis inserted in the parent document then.\n\nSometimes it is desirable to link from the parent document to the included document in a table, or\nanother place where the included document cannot be embedded. In this case, use\n`api.cross_document_ref()` from the table and include the document where it should be embedded,\nsetting `multi_page_link` to `False`. The included document will still be processed using Mako, but\nthere will be no link.\n\n  - `file_name`  \n    Relative or absolute path to the file to include.\n\n  - `leveloffset`  \n    Offset for the headers in the included file from the top level of the current file. Defaults to\n    +1.\n\n### Cross-referencing sections in other AsciiDoc files\n\n    ${api.cross_document_ref(<file_name>, anchor=<section-anchor>[, link_text=<text>])}\n\n    # Examples:\n    ${api.cross_document_ref(\"component/component_a.adoc\", anchor=\"section-1\")}\n    ${api.cross_document_ref(\"component/component_a.adoc\", anchor=\"section 1\", link_text=\"Component A - Section 1\")}\n\nIf you want your documentation to cross-reference sections between different AsciiDoc files and be\ncorrectly rendered also in multi-page format you need to use this method to generate the reference.\n\n### Setting default programming language\n\n``` python\n${api.language(<language>)}\n\n# Examples:\n${api.language(\"cpp\")}\n${api.language(\"c++\")}\n${api.language(\"java\")}\n${api.language(None)}\n```\n\nSet the default language for all following commands. Other languages will be ignored, unless\noverridden with a `lang` argument. This setting also applies to all files included afterwards.\n\n  - `language`  \n    Language to use as default, or `None` to reset.\n\n### Starting namespace\n\n``` python\n${api.namespace(<namespace>)}\n\n# Examples:\n${api.namespace(\"com.tomtom.navkit2.\")}\n${api.namespace(\"tomtom::navkit2::\")}\n${api.namespace(None)}\n```\n\nSet a namespace prefix to start searching elements in. If the element is not found in this prefix,\nit is treated as a fully qualified name.\n\nCurrent support is not very smart yet. It only looks for the concatenation of namespace and name,\nand if not found it searches again for just name. It does not understand namespace separators yet,\nand will not try to find elements on other levels in the same namespace tree.\n\n  - `namespace`  \n    Namespace prefix to search first, or `None` to reset.\n\n## Development\n\nAsciiDoxy is developed in python 3.6. For development it is recommended to set up a virtual\nenvironment with all dependencies. Use the following commands to quickly set up the entire\nenvironment:\n\n``` bash\nmake virtualenv\n```\n\nThen enable the virtual environment to be able to run tests:\n\n``` bash\n. .venv/bin/activate\n```\n\nThe make file defines several other helpful commands:\n\n  - `make test`: Run unit tests using the current python version.\n\n  - `make lint`: Check code style.\n\n  - `make type-check`: Static analysis using type hints.\n\n  - `make test-all`: Run all checks and tests on all available and supported python versions.\n\n  - `make dist`: Create distribution packages in `dist/`.\n\n  - `make release`: Upload packages created with `make dist` to PyPI.\n\n  - `make docker`: Create a local build of the docker image.\n\nBefore creating a PR, you should run `make test-all` to run all tests, the linter and the type\nchecker. Packaging and specified requirements are verified as well by installing into a clean\nvirtual environment. Tests will be run on all available, and supported, python versions.\n\n### Architecture overview\n\nModules:\n\n  - `artifactory`: Downloads Doxygen XML archives from Artifactory and unpacks them.\n\n  - `doxygen_xml`: Reads the Doxygen XML files and creates an internal representation that can be\n    converted to AsciiDoc.\n\n  - `model`: Internal representation of API reference elements.\n\n  - `asciidoc`: Enriches an AsciiDoc file with API reference information.\n\n  - `cli`: The command line interface.\n\n### Adding programming language support\n\n`DoxygenXmlParser` (in `doxygen_xml`) is the main entry point for loading the API reference from\nDoxygen XML files. It uses an instance of `Language` to parse XML files with language specific\ntransformations. Too add support for an extra language:\n\n  - Add a subclass of `Language`.\n\n  - Register it in the constructor of `DoxygenXmlParser`.\n\n  - If needed, add aliases in `safe_language_tag`.\n\n### Adding methods for use in AsciiDoc files\n\nThe entry point for enriching an AsciiDoc file is `process_adoc()`. It treats the AsciiDoc input\nfile as a Mako template. Any [Mako syntax](https://docs.makotemplates.org/en/latest/syntax.html) can\nbe used in the AsciiDoc file. API enrichment methods are provided by passing an instance of `Api` to\nthe Mako processor. It is exposed in the document as `api`. Add methods to `Api` to provide more\nfunctionality to document writers.\n\n### Supporting more kinds of API reference elements\n\nAPI reference fragments are also generated from Mako templates. These templates are in\n`asciidoxy/templates` and are organised in separate directories per programming language. To add\nsupport for a specific API reference element, add a Mako template with the name of the element in\nthe directory for the corresponding programming language. It will automatically be picked up when an\ninsert method is called. The special method `getattr` is used to provide the `insert_<kind>` and\n`link_<kind>` methods.\n\n### Coding style\n\nFor coding style we use [PEP8](https://www.python.org/dev/peps/pep-0008/), enforced by\n[yapf](https://github.com/google/yapf). For docstrings we follow [Google\nStyle](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings).\n\n### Test data\n\nWhere possible, Doxygen XML files for testing are generated from custom source code. This allows\nchecking compatibility with different Doxygen versions. Inside the `tests` directory there are\nmultiple directories for test data:\n\n  - `adoc`: AsciiDoc input files for testing. Usually pairs of `<NAME>.input.adoc` and\n    `<NAME>.expected.adoc`. The expected file contains what AsciiDoxy should output when processing\n    the input file.\n\n  - `data`: Handcrafted test data.\n\n  - `source_code`: The source code from which Doxygen XML test data is generated.\n\n  - `xml`: Doxygen XML test data generated from the source code.\n\nThe Doxygen XML data can be regenerated by running `tests/source_code/generate_xml.py`, and\nproviding the path to the version of Doxygen to use.\n\n<div class=\"note\">\n\nA separate directory is created for each version of Doxygen. The tests will run on each directory.\n\n</div>\n\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project\nadheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [0.5.2] - (24 Apr 2020)\n### Added\n  - Support for free functions in C++\n\n## [0.5.1] - (22 Apr 2020)\n### Added\n  - Added option multi\\_page\\_link to include() method, so an included adoc file is generated but\n    not linked to in multi-page mode.\n\n## [0.5.0] - (21 Apr 2020)\n### Added\n  - When api.insert or api.link is ambiguous, all matching candidates are shown.\n\n### Changed\n  - Links that are part of an inserted element are also considered when looking for dangling links.\n\n### Fixed\n  - Report full error information when collection fails.\n\n## [0.4.3] - (2 Apr 2020)\n### Fixed\n  - Nested enums are no longer ignored in Java.\n  - Fix enum template for Java. Descriptions are now complete and in the right column.\n\n## [0.4.2] - (30 Mar 2020)\n### Fixed\n  - Ignore friend declarations for C++.\n  - Improve handling of Java generics.\n  - Improve type handling for Objective C.\n\n## [0.4.1] - (27 Mar 2020)\n### Added\n  - Disambiguate function overloads (and other callables) based on the types of the parameters.\n\n### Changed\n  - Search by name with an originating namespace now also finds partial namespace overlaps.\n  - Correctly take the originating namespace into account when resolving type references.\n\n## [0.4.0] - (19 Mar 2020)\n### Added\n  - Unknown command line options are now forwarded to AsciiDoctor.\n  - New collect module. Uses a package specification file to get Doxygen XML files and other include\n    files from both remote (HTTP) locations and the local file system.\n  - Support for generating PDF files.\n\n### Changed\n  - Option `-a linkcss` is no longer provided to AsciiDoctor by default. You need to add it to the\n    command line invocation of AsciiDoxy if needed.\n  - Command line parameters are updated to use the collect module instead of Artifactory.\n  - AsciiDoxy is now licensed under the Apache 2.0 license.\n  - Code style has been updated to match PEP-008, enforced by yapf.\n  - Docstrings have been updated to match Google style.\n  - All TomTom proprietary material has been removed. It is replaced by material under the Apache\n    2.0 license.\n\n### Removed\n  - The Artifactory module is replaced by the collect module.\n\n## [0.3.4] - (4 Mar 2020)\n### Added\n  - Support for enums in Java\n\n## [0.3.3] - (10 Feb 2020)\n### Added\n  - Support for downloading and extracting of multiple archive files per package\n\n### Changed\n  - Archives are downloaded to `download` directory\n  - The documentation is now built from an intermediate directory\n\n### Fixed\n  - getBuildVersion() in the Jenkins file to create a version based on build number and start time\n    instead of branch name and start time. Before it was not possible to use a branch name\n    containing `/` or other special characters in the branch name.\n\n## [0.3.2] - (26 Feb 2020)\n### Fixed\n  - Prevent infinite loop on unrecognized function pointer type.\n\n## [0.3.1] - (20 Feb 2020)\n### Added\n  - Support for nested classes in Java and C++\n\n## [0.3.0] - (5 Feb 2020)\n### Added\n  - Argument `--multi-page` to generate separate page for each document included by `api.include()`\n    call\n\n## [0.2.2] - (3 Feb 2020)\n### Added\n  - Support for Java interfaces.\n\n## [0.2.1] - (15 Jan 2020)\n### Added\n  - Argument `--force-language` to force the language used for reading Doxygen XML files. This is\n    currently required to properly interpret Objective C header files.\n  - Support for Objective-C typedefs and blocks.\n\n### Changed\n  - Try to use the detailed description if there is no brief description.\n\n### Fixed\n  - Debug output is now valid, indented, JSON.\n  - Objective C types with a space are now correctly detected.\n  - Type resolving is not limited to just classes.\n  - Do not prepend header file name to Objective C types that are members of files only.\n  - Remove spurious spaces in method argument list when the argument has no name.\n\n## [0.2.0] - (23 Dec 2019)\n### Changed\n  - Short names are now default, use `full_name` to get the fully qualified name again.\n  - Parameters for `link`, `insert`, `link_*`, and `insert_*` have changed. The language and kind\n    are no longer mandatory. They will be deduced if there is only one element with the specified\n    name. An error is raised if there are multiple matches. Only `name` can be passed as positional\n    argument now.\n\n### Fixed\n  - Remove surrounding whitespace for types and parameters. This caused incorrect rendering of\n    monospace text.\n  - C++: Include enclosed structs.\n\n### Removed\n  - The `short_name` argument for linking to documentation. This is now the default.\n\n## [0.1.4] - (12 Dec 2019)\n### Added\n  - Support inheritance in template files.\n  - Support for C++ interfaces (Doxygen concept).\n\n## [0.1.3] - (14 Nov 2019)\n### Added\n  - Show required include file for C++ and Objective C types.\n\n### Changed\n  - Static methods are separated from normal methods for Java.\n  - Class methods are separated from instance methods for Objective C.\n\n### Fixed\n  - Indentation of Objective C methods was off when the return type contained a link.\n  - Variables were missing from the overview of C++ structs.\n  - Decode templates and input document using UTF-8.\n  - Ignore Objective C methods marked NS\\_UNAVAILABLE.\n\n## [0.1.2] - (04 Nov 2019)\n### Added\n  - Support for C++ structs.\n  - Overview table for compound members.\n  - Include make in the Docker image.\n\n### Changed\n  - Show enclosed typedefs in C++ classes and structs.\n  - Improved formatting.\n  - Clean up extra whitespace.\n\n## [0.1.1] - (04 Nov 2019)\n### Fixed\n  - Fix publishing Docker image on CI.\n\n## [0.1.0] - (22 Oct 2019)\n  - First internal release.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tomtom-international/asciidoxy", "keywords": "asciidoxy", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "asciidoxy", "package_url": "https://pypi.org/project/asciidoxy/", "platform": "", "project_url": "https://pypi.org/project/asciidoxy/", "project_urls": {"Homepage": "https://github.com/tomtom-international/asciidoxy"}, "release_url": "https://pypi.org/project/asciidoxy/0.5.2/", "requires_dist": ["mako (~=1.1)", "aiohttp (~=3.6)", "aiodns", "cchardet", "toml (~=0.10)"], "requires_python": ">=3.6", "summary": "AsciiDoxy generates API documentation from Doxygen XML output to AsciiDoc.", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AsciiDoxy</h1>\n<p>AsciiDoxy generates API documentation from Doxygen XML output to AsciiDoc.</p>\n<p>Supported languages:</p>\n<ul>\n<li>C++</li>\n<li>Java</li>\n<li>Objective C</li>\n</ul>\n<h2>Credits</h2>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the\n<a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project\ntemplate.</p>\n<h2>What does AsciiDoxy do?</h2>\n<p>In essence AsciiDoxy is a preprocessor for AsciiDoc files. It looks for specific tags in these files\nand replaces them with valid AsciiDoc syntax. The information it inserts into the AsciiDoc files\ncomes from Doxygen XML output.</p>\n<h3>1. Collects Doxygen XML and include files</h3>\n<p>Doxygen XML files are collected from remote HTTP servers, from the local file system, or a\ncombination of both. What files are collected is specified in a package specification file and\noptionally a version file. See <a href=\"#package-specification\" rel=\"nofollow\">Package specification</a> for details.</p>\n<p>The packages can also contain other files that can be included in the documentation. These can be\nother AsciiDoc files, images, and other included files. The included AsciiDoc files can alo contain\nAsciiDoxy directives.</p>\n<h3>2. Copies files to an intermediate directory</h3>\n<p>The input file and all files from the same directory and sub directories will be copied to an\nintermediate directory. After this all <code>adoc</code> directories from the downloaded archives will also be\ncopied inside the intermediate directory preserving their directory structure.</p>\n<h3>3. Parses Doxygen XML</h3>\n<p>The downloaded Doxygen XML files are parsed into an internal representation that can be converted to\nAsciiDoc on demand. References between separate packages are detected and resolved.</p>\n<p>The parsing takes the source language into account. Specific cases for each language, like the\nformat of type specifications, are handled based on the language specified in the Doxygen XML files.</p>\n<h3>4. Preprocesses Asciidoc files</h3>\n<p>The input AsciiDoc file is preprocessed using Mako. Mako looks for special syntax, the most common\nbeing <code>${...}</code>. Any valid python code can be placed between the braces, and will be executed by Mako.\nFor more details on the syntax, see the <a href=\"https://docs.makotemplates.org/en/latest/syntax.html\" rel=\"nofollow\">Mako syntax\ndocumentation</a>.</p>\n<p>The code executed by Mako inserts additional AsciiDoc into the file. Methods are provided to use the\ninformation from the Doxygen XML files. See <a href=\"#usage\" rel=\"nofollow\">Usage</a> for more details.</p>\n<p>Consistency checking is performed to make sure links to, and between, API reference documentation\nare valid. Depending on the command line options either a warning or an error is thrown if an\ninconsistency is found.</p>\n<p>The results of preprocessing are pure AsciiDoc files. They are stored as temporary files next to the\ninput files inside the intermediate directory. This should preserve all relative links to other\nfiles.</p>\n<h3>5. Invokes Asciidoctor</h3>\n<p>When preprocessing is successful, Asciidoctor is invoked to generate single- or multi-paged HTML\noutput depending on whether the <code>--multi-page</code> option was set.</p>\n<h2>Installation</h2>\n<p>The preferred way to install is using pip:</p>\n<pre>pip3 install asciidoxy\n</pre>\n<p>Alternatively you can directly install the development version:</p>\n<pre>make install\n</pre>\n<h2>Usage</h2>\n<p>The minimal invocation takes an input AsciiDoc file and creates the HTML representation:</p>\n<pre>asciidoxy input_file.adoc\n</pre>\n<p>For more information about command line options:</p>\n<pre>asciidoxy -h\n</pre>\n<p>In the input AsciiDoc file, you can use any <a href=\"https://docs.makotemplates.org/en/latest/syntax.html\" rel=\"nofollow\">Mako\nsyntax</a>. Mako syntax looks like <code>${...}</code> where\n<code>...</code> can contain any valid python code. This python code is executed when the file is processed by\nAsciiDoxy.</p>\n<p>A special object <code>api</code> provides methods to insert API reference documentation and link to its\nelements.</p>\n<h3>Generating XML using Doxygen</h3>\n<p>For extracting documentation from source code, AsciiDoxy relies on Doxygen. You are expected to run\nDoxygen on your source code, and then provide the path to the generated XML files to AsciiDoxy. It\nis recommended to set at least the following non-default settings in your Doxyfile when generating\nthe XML.</p>\n<h4>C++</h4>\n<pre><code>GENERATE_XML           = YES\n</code></pre>\n<h4>Java</h4>\n<pre><code>GENERATE_XML           = YES\nJAVADOC_AUTOBRIEF      = YES\nOPTIMIZE_OUTPUT_JAVA   = YES\n</code></pre>\n<h4>Objective C</h4>\n<pre><code>GENERATE_XML           = YES\nEXTENSION_MAPPING      = h=objective-c\n</code></pre>\n<h3>Package specification</h3>\n<p>Doxygen XML files and other files to include in the documentation are specified in a package\nspecification file. The package specification file is in <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a>\nformat. It contains 2 main sections: <code>packages</code> and <code>sources</code>.</p>\n<h4>Packages</h4>\n<p>The <code>packages</code> section is the only mandatory section. It contains a separate subsection for each\npackage to include. The name of the subsection is the name of the package:</p>\n<pre><span class=\"k\">[packages]</span>\n\n<span class=\"k\">[packages.package1]</span>\n<span class=\"c1\"># Specification of `package1`</span>\n\n<span class=\"k\">[packages.package2]</span>\n<span class=\"c1\"># Specification of `package2`</span>\n</pre>\n<p>A package has a specific type and based on the type different key/value pairs are required. For all\ntypes of packages the following key/value pairs are required:</p>\n<ul>\n<li>\n<p><code>type</code>: The type of the package.</p>\n</li>\n<li>\n<p><code>xml_subdir</code>: Subdirectory in the root of the package in which all Doxygen XML files are stored.</p>\n</li>\n<li>\n<p><code>include_subdir</code>: Subdirectory in the root of the package in which all other include files are\nstored.</p>\n</li>\n</ul>\n<p>Packages of type <code>local</code> refer to a local directory. They require the following additional key/value\npairs:</p>\n<ul>\n<li><code>package_dir</code>: Absolute or relative path to the directory containing the package.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"k\">[packages.local_package]</span>\n<span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s\">\"local\"</span>\n<span class=\"n\">xml_subdir</span> <span class=\"o\">=</span> <span class=\"s\">\"xml\"</span>\n<span class=\"n\">include_subdir</span> <span class=\"o\">=</span> <span class=\"s\">\"adoc\"</span>\n<span class=\"n\">package_dir</span> <span class=\"o\">=</span> <span class=\"s\">\"/path/to/my/package/\"</span>\n</pre>\n<p>Packages of type <code>http</code> are downloaded from a remote location. They can consist of multiple files,\nall of which need to be (compressed) tarballs. Each file can contain XML files, include files, or\nboth.</p>\n<p>The following additional key/value pairs are required:</p>\n<ul>\n<li>\n<p><code>url_template</code>: Template for constructing the URL to download the package file from.</p>\n</li>\n<li>\n<p><code>file_names</code>: List of file names making up the package.</p>\n</li>\n</ul>\n<p>The following additional key/value pairs are optional:</p>\n<ul>\n<li><code>version</code>: Version number of the package.</li>\n</ul>\n<p>The <code>url_template</code> can contain the following placeholders, that are replaced when creating the URL\nto download each package file:</p>\n<ul>\n<li>\n<p><code>{name}</code>: Replaced with the name of the package.</p>\n</li>\n<li>\n<p><code>{version}</code>: Replaced with the version of the package.</p>\n</li>\n<li>\n<p><code>{file_name}</code>: Replaced with the file name.</p>\n</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"k\">[packages]</span>\n\n<span class=\"k\">[packages.package1]</span>\n<span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s\">\"http\"</span>\n<span class=\"n\">url_template</span> <span class=\"o\">=</span> <span class=\"s\">\"https://example.com/{name}/{version}/{file_name}\"</span>\n<span class=\"n\">xml_subdir</span> <span class=\"o\">=</span> <span class=\"s\">\"xml\"</span>\n<span class=\"n\">include_subdir</span> <span class=\"o\">=</span> <span class=\"s\">\"adoc\"</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"12.3.4\"</span>\n</pre>\n<p>If no <code>version</code> is specified for the package, the version is retrieved from a version file. The\nversion file is a comma separated values file containing pairs of package names and corresponding\nversions. It can contain any number of fields, but it is required to have a header containing the\nnames <code>Component name</code> and <code>Version</code> for the columns containing these.</p>\n<p>Example:</p>\n<pre>Component name, Version\npackage1,3.0.0\npackage2,4.5.1\n</pre>\n<h4>Sources</h4>\n<p>The <code>sources</code> section allows specifying templates for packages. Each template can specify a common\n\"source\" of packages. With a source, settings that are duplicated for many packages can be specified\nonly once.</p>\n<p>A source section can contain every key/value pair that is allowed for a package. Packages can\nspecify the source they are based on by using the <code>source</code> key/value pair.</p>\n<p>When a source is used, the key/value pairs of the source and the pacakge are merged. Values for keys\nthat are present in both the package and the source will be taken from the package. So the package\nvalues override source values.</p>\n<p>Example:</p>\n<pre><span class=\"k\">[sources]</span>\n\n<span class=\"k\">[sources.remote_server]</span>\n<span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s\">\"http\"</span>\n<span class=\"n\">url_template</span> <span class=\"o\">=</span> <span class=\"s\">\"https://example.com/{name}/{version}/{file_name}\"</span>\n<span class=\"n\">xml_subdir</span> <span class=\"o\">=</span> <span class=\"s\">\"xml\"</span>\n<span class=\"n\">include_subdir</span> <span class=\"o\">=</span> <span class=\"s\">\"adoc\"</span>\n\n<span class=\"k\">[packages]</span>\n\n<span class=\"k\">[packages.package1]</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"s\">\"remote_server\"</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"12.3.4\"</span>\n</pre>\n<h3>Inserting API reference</h3>\n<pre><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;</span><span class=\"p\">[,</span> <span class=\"n\">kind</span><span class=\"o\">=&lt;</span><span class=\"n\">kind</span><span class=\"o\">&gt;</span><span class=\"p\">][,</span> <span class=\"n\">lang</span><span class=\"o\">=&lt;</span><span class=\"n\">language</span><span class=\"o\">&gt;</span><span class=\"p\">][,</span> <span class=\"n\">leveloffset</span><span class=\"p\">])}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">insert_</span><span class=\"o\">&lt;</span><span class=\"n\">kind</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;</span><span class=\"p\">[,</span> <span class=\"n\">lang</span><span class=\"o\">=&lt;</span><span class=\"n\">language</span><span class=\"o\">&gt;</span><span class=\"p\">][,</span> <span class=\"n\">leveloffset</span><span class=\"o\">=&lt;</span><span class=\"n\">offset</span><span class=\"o\">&gt;</span><span class=\"p\">])}</span>\n\n<span class=\"c1\"># Examples:</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s2\">\"MyNamespace::MyClass\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s2\">\"com.tomtom.Class\"</span><span class=\"p\">,</span> <span class=\"n\">leveloffset</span><span class=\"o\">=</span><span class=\"s2\">\"+2\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s2\">\"com.tomtom.Class\"</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">\"class\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s2\">\"MyNamespace::FreeFunction\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"c++\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">insert_class</span><span class=\"p\">(</span><span class=\"s2\">\"MyNamespace::MyClass\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">insert_function</span><span class=\"p\">(</span><span class=\"s2\">\"MyNamespace::FreeFunction\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"c++\"</span><span class=\"p\">)}</span>\n</pre>\n<p>Use the <code>insert</code> methods to insert API reference documentation at the current location.</p>\n<ul>\n<li>\n<p><code>name</code><br>\nFully qualified name of the element to insert.</p>\n</li>\n<li>\n<p><code>lang</code><br>\nName of the programming language.</p>\n</li>\n<li>\n<p><code>kind</code><br>\nKind of element to insert.</p>\n</li>\n<li>\n<p><code>leveloffset</code><br>\nOffset for the headers in the reference from the top level of the current file. Defaults to +1.</p>\n</li>\n</ul>\n<p>Trying to insert an unknown element will result in an error.</p>\n<p>When not specifying the language and kind, AsciiDoxy will try to find the element by name, and\ndeduce the kind and language. If there are multiple matching elements, an error is raised.</p>\n<h3>Linking to API reference</h3>\n<pre><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;</span><span class=\"p\">[,</span> <span class=\"n\">kind</span><span class=\"o\">=&lt;</span><span class=\"n\">kind</span><span class=\"o\">&gt;</span><span class=\"p\">][,</span> <span class=\"n\">lang</span><span class=\"o\">=&lt;</span><span class=\"n\">language</span><span class=\"o\">&gt;</span><span class=\"p\">][,</span> <span class=\"n\">text</span><span class=\"p\">][,</span> <span class=\"n\">full_name</span><span class=\"p\">])}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link_</span><span class=\"o\">&lt;</span><span class=\"n\">kind</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;</span><span class=\"p\">[,</span> <span class=\"n\">lang</span><span class=\"o\">=&lt;</span><span class=\"n\">language</span><span class=\"o\">&gt;</span><span class=\"p\">][,</span> <span class=\"n\">text</span><span class=\"p\">][,</span> <span class=\"n\">full_name</span><span class=\"p\">])}</span>\n\n<span class=\"c1\"># Examples:</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link</span><span class=\"p\">(</span><span class=\"s2\">\"MyNamespace::MyClass\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link</span><span class=\"p\">(</span><span class=\"s2\">\"MyNamespace::MyClass\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"c++\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link</span><span class=\"p\">(</span><span class=\"s2\">\"com.tomtom.Class.Method\"</span><span class=\"p\">,</span> <span class=\"n\">full_name</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link</span><span class=\"p\">(</span><span class=\"s2\">\"MyNamespace::FreeFunction\"</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"FreeFunction\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link_class</span><span class=\"p\">(</span><span class=\"s2\">\"MyNamespace::MyClass\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link_class</span><span class=\"p\">(</span><span class=\"s2\">\"MyNamespace::MyClass\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"c++\"</span><span class=\"p\">)}</span>\n</pre>\n<p>Insert a link to an API reference element. By default the short name of the element is used as the\ntext of the link.</p>\n<ul>\n<li>\n<p><code>name</code><br>\nFully qualified name of the element to insert.</p>\n</li>\n<li>\n<p><code>lang</code><br>\nName of the programming language.</p>\n</li>\n<li>\n<p><code>kind</code><br>\nKind of element to insert.</p>\n</li>\n<li>\n<p><code>text</code><br>\nAlternative text to use for the link.</p>\n</li>\n<li>\n<p><code>full_name</code><br>\nUse the fully qualified name of the referenced element.</p>\n</li>\n</ul>\n<p>By default a warning is shown if the element is unknown, or is not inserted in the same document\nusing an <code>insert_</code> method. There is a command-line option to throw an error instead.</p>\n<p>When not specifying the language and kind, AsciiDoxy will try to find the element by name, and\ndeduce the kind and language. If there are multiple matching elements, an error is raised.</p>\n<h3>Function or method overloads</h3>\n<p>In languages that support overloading functions, methods or other callables, the name alone is not\nsufficient to select the correct element to link to or to insert. In this case the exact list of\ntypes of the parameters can be provided to select the right element.</p>\n<p>The list of parameter types should be specified in parentheses after the function name:</p>\n<pre><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link</span><span class=\"p\">(</span><span class=\"s2\">\"MyFunction(int, std::string)\"</span><span class=\"p\">)}</span>\n</pre>\n<p>Empty parentheses indicate the function should accept no parameters:</p>\n<pre><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link</span><span class=\"p\">(</span><span class=\"s2\">\"MyFunction()\"</span><span class=\"p\">)}</span>\n</pre>\n<p>If no parentheses are given, the parameters are ignored. If there are multiple overloads, AsciiDoxy\nwill not be able to pick one:</p>\n<pre><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">link</span><span class=\"p\">(</span><span class=\"s2\">\"MyFunction\"</span><span class=\"p\">)}</span>\n</pre>\n<h3>Including other AsciiDoc files</h3>\n<pre><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">file_name</span><span class=\"o\">&gt;</span><span class=\"p\">[,</span> <span class=\"n\">leveloffset</span><span class=\"o\">=&lt;</span><span class=\"n\">offset</span><span class=\"o\">&gt;</span><span class=\"p\">][,</span> <span class=\"n\">link_text</span><span class=\"o\">=&lt;</span><span class=\"n\">text</span><span class=\"o\">&gt;</span><span class=\"p\">][,</span> <span class=\"n\">link_prefix</span><span class=\"o\">=&lt;</span><span class=\"n\">prefix</span><span class=\"o\">&gt;</span><span class=\"p\">][,</span> <span class=\"n\">multi_page_link</span><span class=\"o\">=&lt;</span><span class=\"nb\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">])}</span>\n\n<span class=\"c1\"># Examples:</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">\"component/reference.adoc\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">\"/mount/data/reference.adoc\"</span><span class=\"p\">,</span> <span class=\"n\">leveloffset</span><span class=\"o\">=</span><span class=\"s2\">\"+3\"</span><span class=\"p\">)}</span>\n\n<span class=\"c1\"># If you want your documentation to look nicely also as multi-page document, don't forget to pass</span>\n<span class=\"c1\"># link_text and optionally link_prefix arguments, e.g.:</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">\"component/reference.adoc\"</span><span class=\"p\">,</span> <span class=\"n\">link_text</span><span class=\"o\">=</span><span class=\"s2\">\"Reference\"</span><span class=\"p\">,</span> <span class=\"n\">link_prefix</span><span class=\"o\">=</span><span class=\"s2\">\". \"</span><span class=\"p\">)}</span>\n\n<span class=\"c1\"># If you want to embed a file in single-page, but not include a link in multi-page</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">\"/component/reference.adoc\"</span><span class=\"p\">,</span> <span class=\"n\">multi_page_link</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)}</span>\n</pre>\n<p>Include another AsciiDoc file and process it using Mako as well. The normal AsciiDoc include\ndirectives can be used as well, but will not process any Mako directives. With <code>--multi-page</code> option\nthe include method doesn\u2019t embed the included document in its parent document but generates separate\noutput document instead. By default <code>multi_page_link</code> is <code>True</code>, so a link to the included document\nis inserted in the parent document then.</p>\n<p>Sometimes it is desirable to link from the parent document to the included document in a table, or\nanother place where the included document cannot be embedded. In this case, use\n<code>api.cross_document_ref()</code> from the table and include the document where it should be embedded,\nsetting <code>multi_page_link</code> to <code>False</code>. The included document will still be processed using Mako, but\nthere will be no link.</p>\n<ul>\n<li>\n<p><code>file_name</code><br>\nRelative or absolute path to the file to include.</p>\n</li>\n<li>\n<p><code>leveloffset</code><br>\nOffset for the headers in the included file from the top level of the current file. Defaults to\n+1.</p>\n</li>\n</ul>\n<h3>Cross-referencing sections in other AsciiDoc files</h3>\n<pre><code>${api.cross_document_ref(&lt;file_name&gt;, anchor=&lt;section-anchor&gt;[, link_text=&lt;text&gt;])}\n\n# Examples:\n${api.cross_document_ref(\"component/component_a.adoc\", anchor=\"section-1\")}\n${api.cross_document_ref(\"component/component_a.adoc\", anchor=\"section 1\", link_text=\"Component A - Section 1\")}\n</code></pre>\n<p>If you want your documentation to cross-reference sections between different AsciiDoc files and be\ncorrectly rendered also in multi-page format you need to use this method to generate the reference.</p>\n<h3>Setting default programming language</h3>\n<pre><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">language</span><span class=\"o\">&gt;</span><span class=\"p\">)}</span>\n\n<span class=\"c1\"># Examples:</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">(</span><span class=\"s2\">\"cpp\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">(</span><span class=\"s2\">\"c++\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">(</span><span class=\"s2\">\"java\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)}</span>\n</pre>\n<p>Set the default language for all following commands. Other languages will be ignored, unless\noverridden with a <code>lang</code> argument. This setting also applies to all files included afterwards.</p>\n<ul>\n<li><code>language</code><br>\nLanguage to use as default, or <code>None</code> to reset.</li>\n</ul>\n<h3>Starting namespace</h3>\n<pre><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">namespace</span><span class=\"o\">&gt;</span><span class=\"p\">)}</span>\n\n<span class=\"c1\"># Examples:</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"s2\">\"com.tomtom.navkit2.\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"s2\">\"tomtom::navkit2::\"</span><span class=\"p\">)}</span>\n<span class=\"err\">$</span><span class=\"p\">{</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)}</span>\n</pre>\n<p>Set a namespace prefix to start searching elements in. If the element is not found in this prefix,\nit is treated as a fully qualified name.</p>\n<p>Current support is not very smart yet. It only looks for the concatenation of namespace and name,\nand if not found it searches again for just name. It does not understand namespace separators yet,\nand will not try to find elements on other levels in the same namespace tree.</p>\n<ul>\n<li><code>namespace</code><br>\nNamespace prefix to search first, or <code>None</code> to reset.</li>\n</ul>\n<h2>Development</h2>\n<p>AsciiDoxy is developed in python 3.6. For development it is recommended to set up a virtual\nenvironment with all dependencies. Use the following commands to quickly set up the entire\nenvironment:</p>\n<pre>make virtualenv\n</pre>\n<p>Then enable the virtual environment to be able to run tests:</p>\n<pre>. .venv/bin/activate\n</pre>\n<p>The make file defines several other helpful commands:</p>\n<ul>\n<li>\n<p><code>make test</code>: Run unit tests using the current python version.</p>\n</li>\n<li>\n<p><code>make lint</code>: Check code style.</p>\n</li>\n<li>\n<p><code>make type-check</code>: Static analysis using type hints.</p>\n</li>\n<li>\n<p><code>make test-all</code>: Run all checks and tests on all available and supported python versions.</p>\n</li>\n<li>\n<p><code>make dist</code>: Create distribution packages in <code>dist/</code>.</p>\n</li>\n<li>\n<p><code>make release</code>: Upload packages created with <code>make dist</code> to PyPI.</p>\n</li>\n<li>\n<p><code>make docker</code>: Create a local build of the docker image.</p>\n</li>\n</ul>\n<p>Before creating a PR, you should run <code>make test-all</code> to run all tests, the linter and the type\nchecker. Packaging and specified requirements are verified as well by installing into a clean\nvirtual environment. Tests will be run on all available, and supported, python versions.</p>\n<h3>Architecture overview</h3>\n<p>Modules:</p>\n<ul>\n<li>\n<p><code>artifactory</code>: Downloads Doxygen XML archives from Artifactory and unpacks them.</p>\n</li>\n<li>\n<p><code>doxygen_xml</code>: Reads the Doxygen XML files and creates an internal representation that can be\nconverted to AsciiDoc.</p>\n</li>\n<li>\n<p><code>model</code>: Internal representation of API reference elements.</p>\n</li>\n<li>\n<p><code>asciidoc</code>: Enriches an AsciiDoc file with API reference information.</p>\n</li>\n<li>\n<p><code>cli</code>: The command line interface.</p>\n</li>\n</ul>\n<h3>Adding programming language support</h3>\n<p><code>DoxygenXmlParser</code> (in <code>doxygen_xml</code>) is the main entry point for loading the API reference from\nDoxygen XML files. It uses an instance of <code>Language</code> to parse XML files with language specific\ntransformations. Too add support for an extra language:</p>\n<ul>\n<li>\n<p>Add a subclass of <code>Language</code>.</p>\n</li>\n<li>\n<p>Register it in the constructor of <code>DoxygenXmlParser</code>.</p>\n</li>\n<li>\n<p>If needed, add aliases in <code>safe_language_tag</code>.</p>\n</li>\n</ul>\n<h3>Adding methods for use in AsciiDoc files</h3>\n<p>The entry point for enriching an AsciiDoc file is <code>process_adoc()</code>. It treats the AsciiDoc input\nfile as a Mako template. Any <a href=\"https://docs.makotemplates.org/en/latest/syntax.html\" rel=\"nofollow\">Mako syntax</a> can\nbe used in the AsciiDoc file. API enrichment methods are provided by passing an instance of <code>Api</code> to\nthe Mako processor. It is exposed in the document as <code>api</code>. Add methods to <code>Api</code> to provide more\nfunctionality to document writers.</p>\n<h3>Supporting more kinds of API reference elements</h3>\n<p>API reference fragments are also generated from Mako templates. These templates are in\n<code>asciidoxy/templates</code> and are organised in separate directories per programming language. To add\nsupport for a specific API reference element, add a Mako template with the name of the element in\nthe directory for the corresponding programming language. It will automatically be picked up when an\ninsert method is called. The special method <code>getattr</code> is used to provide the <code>insert_&lt;kind&gt;</code> and\n<code>link_&lt;kind&gt;</code> methods.</p>\n<h3>Coding style</h3>\n<p>For coding style we use <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP8</a>, enforced by\n<a href=\"https://github.com/google/yapf\" rel=\"nofollow\">yapf</a>. For docstrings we follow <a href=\"http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings\" rel=\"nofollow\">Google\nStyle</a>.</p>\n<h3>Test data</h3>\n<p>Where possible, Doxygen XML files for testing are generated from custom source code. This allows\nchecking compatibility with different Doxygen versions. Inside the <code>tests</code> directory there are\nmultiple directories for test data:</p>\n<ul>\n<li>\n<p><code>adoc</code>: AsciiDoc input files for testing. Usually pairs of <code>&lt;NAME&gt;.input.adoc</code> and\n<code>&lt;NAME&gt;.expected.adoc</code>. The expected file contains what AsciiDoxy should output when processing\nthe input file.</p>\n</li>\n<li>\n<p><code>data</code>: Handcrafted test data.</p>\n</li>\n<li>\n<p><code>source_code</code>: The source code from which Doxygen XML test data is generated.</p>\n</li>\n<li>\n<p><code>xml</code>: Doxygen XML test data generated from the source code.</p>\n</li>\n</ul>\n<p>The Doxygen XML data can be regenerated by running <code>tests/source_code/generate_xml.py</code>, and\nproviding the path to the version of Doxygen to use.</p>\n<div>\n<p>A separate directory is created for each version of Doxygen. The tests will run on each directory.</p>\n</div>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>The format is based on <a href=\"https://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a>, and this project\nadheres to <a href=\"https://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<h2>[0.5.2] - (24 Apr 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>Support for free functions in C++</li>\n</ul>\n<h2>[0.5.1] - (22 Apr 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>Added option multi_page_link to include() method, so an included adoc file is generated but\nnot linked to in multi-page mode.</li>\n</ul>\n<h2>[0.5.0] - (21 Apr 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>When api.insert or api.link is ambiguous, all matching candidates are shown.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Links that are part of an inserted element are also considered when looking for dangling links.</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>Report full error information when collection fails.</li>\n</ul>\n<h2>[0.4.3] - (2 Apr 2020)</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Nested enums are no longer ignored in Java.</li>\n<li>Fix enum template for Java. Descriptions are now complete and in the right column.</li>\n</ul>\n<h2>[0.4.2] - (30 Mar 2020)</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Ignore friend declarations for C++.</li>\n<li>Improve handling of Java generics.</li>\n<li>Improve type handling for Objective C.</li>\n</ul>\n<h2>[0.4.1] - (27 Mar 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>Disambiguate function overloads (and other callables) based on the types of the parameters.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Search by name with an originating namespace now also finds partial namespace overlaps.</li>\n<li>Correctly take the originating namespace into account when resolving type references.</li>\n</ul>\n<h2>[0.4.0] - (19 Mar 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>Unknown command line options are now forwarded to AsciiDoctor.</li>\n<li>New collect module. Uses a package specification file to get Doxygen XML files and other include\nfiles from both remote (HTTP) locations and the local file system.</li>\n<li>Support for generating PDF files.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Option <code>-a linkcss</code> is no longer provided to AsciiDoctor by default. You need to add it to the\ncommand line invocation of AsciiDoxy if needed.</li>\n<li>Command line parameters are updated to use the collect module instead of Artifactory.</li>\n<li>AsciiDoxy is now licensed under the Apache 2.0 license.</li>\n<li>Code style has been updated to match PEP-008, enforced by yapf.</li>\n<li>Docstrings have been updated to match Google style.</li>\n<li>All TomTom proprietary material has been removed. It is replaced by material under the Apache\n2.0 license.</li>\n</ul>\n<h3>Removed</h3>\n<ul>\n<li>The Artifactory module is replaced by the collect module.</li>\n</ul>\n<h2>[0.3.4] - (4 Mar 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>Support for enums in Java</li>\n</ul>\n<h2>[0.3.3] - (10 Feb 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>Support for downloading and extracting of multiple archive files per package</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Archives are downloaded to <code>download</code> directory</li>\n<li>The documentation is now built from an intermediate directory</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>getBuildVersion() in the Jenkins file to create a version based on build number and start time\ninstead of branch name and start time. Before it was not possible to use a branch name\ncontaining <code>/</code> or other special characters in the branch name.</li>\n</ul>\n<h2>[0.3.2] - (26 Feb 2020)</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Prevent infinite loop on unrecognized function pointer type.</li>\n</ul>\n<h2>[0.3.1] - (20 Feb 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>Support for nested classes in Java and C++</li>\n</ul>\n<h2>[0.3.0] - (5 Feb 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>Argument <code>--multi-page</code> to generate separate page for each document included by <code>api.include()</code>\ncall</li>\n</ul>\n<h2>[0.2.2] - (3 Feb 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>Support for Java interfaces.</li>\n</ul>\n<h2>[0.2.1] - (15 Jan 2020)</h2>\n<h3>Added</h3>\n<ul>\n<li>Argument <code>--force-language</code> to force the language used for reading Doxygen XML files. This is\ncurrently required to properly interpret Objective C header files.</li>\n<li>Support for Objective-C typedefs and blocks.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Try to use the detailed description if there is no brief description.</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>Debug output is now valid, indented, JSON.</li>\n<li>Objective C types with a space are now correctly detected.</li>\n<li>Type resolving is not limited to just classes.</li>\n<li>Do not prepend header file name to Objective C types that are members of files only.</li>\n<li>Remove spurious spaces in method argument list when the argument has no name.</li>\n</ul>\n<h2>[0.2.0] - (23 Dec 2019)</h2>\n<h3>Changed</h3>\n<ul>\n<li>Short names are now default, use <code>full_name</code> to get the fully qualified name again.</li>\n<li>Parameters for <code>link</code>, <code>insert</code>, <code>link_*</code>, and <code>insert_*</code> have changed. The language and kind\nare no longer mandatory. They will be deduced if there is only one element with the specified\nname. An error is raised if there are multiple matches. Only <code>name</code> can be passed as positional\nargument now.</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>Remove surrounding whitespace for types and parameters. This caused incorrect rendering of\nmonospace text.</li>\n<li>C++: Include enclosed structs.</li>\n</ul>\n<h3>Removed</h3>\n<ul>\n<li>The <code>short_name</code> argument for linking to documentation. This is now the default.</li>\n</ul>\n<h2>[0.1.4] - (12 Dec 2019)</h2>\n<h3>Added</h3>\n<ul>\n<li>Support inheritance in template files.</li>\n<li>Support for C++ interfaces (Doxygen concept).</li>\n</ul>\n<h2>[0.1.3] - (14 Nov 2019)</h2>\n<h3>Added</h3>\n<ul>\n<li>Show required include file for C++ and Objective C types.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Static methods are separated from normal methods for Java.</li>\n<li>Class methods are separated from instance methods for Objective C.</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>Indentation of Objective C methods was off when the return type contained a link.</li>\n<li>Variables were missing from the overview of C++ structs.</li>\n<li>Decode templates and input document using UTF-8.</li>\n<li>Ignore Objective C methods marked NS_UNAVAILABLE.</li>\n</ul>\n<h2>[0.1.2] - (04 Nov 2019)</h2>\n<h3>Added</h3>\n<ul>\n<li>Support for C++ structs.</li>\n<li>Overview table for compound members.</li>\n<li>Include make in the Docker image.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Show enclosed typedefs in C++ classes and structs.</li>\n<li>Improved formatting.</li>\n<li>Clean up extra whitespace.</li>\n</ul>\n<h2>[0.1.1] - (04 Nov 2019)</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Fix publishing Docker image on CI.</li>\n</ul>\n<h2>[0.1.0] - (22 Oct 2019)</h2>\n<ul>\n<li>First internal release.</li>\n</ul>\n\n          </div>"}, "last_serial": 7136503, "releases": {"0.5.2": [{"comment_text": "", "digests": {"md5": "dd4814904c2683a67d08d590da93ef54", "sha256": "e7dd77b7a2f6277a758d4f9196d9276d1507dd6bf936c7a1b0bc999fc7fd603b"}, "downloads": -1, "filename": "asciidoxy-0.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dd4814904c2683a67d08d590da93ef54", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 61644, "upload_time": "2020-04-25T10:05:33", "upload_time_iso_8601": "2020-04-25T10:05:33.508076Z", "url": "https://files.pythonhosted.org/packages/9b/82/2dee10930879ae39b832f832c2b6eb299e5df9023c333a6adae287eff830/asciidoxy-0.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fa6773889e0d88ea46e573d242f718c", "sha256": "e69786f51b9707359a23d559f2b9e0eee694674218497415f8e59fa2979d31ed"}, "downloads": -1, "filename": "asciidoxy-0.5.2.tar.gz", "has_sig": false, "md5_digest": "5fa6773889e0d88ea46e573d242f718c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 132475, "upload_time": "2020-04-25T10:05:36", "upload_time_iso_8601": "2020-04-25T10:05:36.003303Z", "url": "https://files.pythonhosted.org/packages/58/bc/8763d1469f32d982a26c5d6da0338756706be56db6722581382a782324f7/asciidoxy-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dd4814904c2683a67d08d590da93ef54", "sha256": "e7dd77b7a2f6277a758d4f9196d9276d1507dd6bf936c7a1b0bc999fc7fd603b"}, "downloads": -1, "filename": "asciidoxy-0.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dd4814904c2683a67d08d590da93ef54", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 61644, "upload_time": "2020-04-25T10:05:33", "upload_time_iso_8601": "2020-04-25T10:05:33.508076Z", "url": "https://files.pythonhosted.org/packages/9b/82/2dee10930879ae39b832f832c2b6eb299e5df9023c333a6adae287eff830/asciidoxy-0.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fa6773889e0d88ea46e573d242f718c", "sha256": "e69786f51b9707359a23d559f2b9e0eee694674218497415f8e59fa2979d31ed"}, "downloads": -1, "filename": "asciidoxy-0.5.2.tar.gz", "has_sig": false, "md5_digest": "5fa6773889e0d88ea46e573d242f718c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 132475, "upload_time": "2020-04-25T10:05:36", "upload_time_iso_8601": "2020-04-25T10:05:36.003303Z", "url": "https://files.pythonhosted.org/packages/58/bc/8763d1469f32d982a26c5d6da0338756706be56db6722581382a782324f7/asciidoxy-0.5.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:03 2020"}