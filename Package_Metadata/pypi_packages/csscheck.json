{"info": {"author": "Vincent Pretre (Zest software)", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "CSS check\n=========\n\nCSS check is a Python library/command line meant to help CSS\ndevelopers.\n\nThe main use is to see which CSS rule are applied to more than one\nelement in all your CSS files.\n\nInstall\n-------\n\nThe tool can be installed using easy_install::\n\n  easy_install csscheck\n\n\nYou can then define an alias to run the tool (in your .bashrc or\n.profile file)::\n\n  alias css_check=\"python -m csscheck.main\"\n\nIf you have a buildout with the ``bin`` flder contained in your path,\nyou can add this part::\n\n  [css_check]\n  recipe = zc.recipe.egg\n  eggs = csscheck\n\nThat will automatically create a new executable ``cs_check`` in the\n``bin`` folder of your buildout.\n\nUsage\n-----\n\nWhen you simply run the ``css_check`` command created earlier, it will\nseek for all CSS files in the current directory (and sub-directories)\nand provide the list of CSS rules applied to more than one element.\nFor example::\n\n  Rule \"display: block\" -  used 4 times:\n  ______________________________________\n   - header\n   - nav\n   - article\n   - footer\n\n\n  Rule \"background: #008BCD;\" -  used 3 times:\n  ____________________________________________\n   - #main > header\n   - #main > nav > ul > li\n   - #main > footer\n\n\nYou can also specify the directory in which the CSS files must be\nchecked, using the ``-d`` option::\n\n  css_check -d media/green_theme\n\n\nYou can also check for which elements a CSS rule is applied. To do so,\nyou can use the ``-r`` or ``--rule=`` option.\nFor example::\n\n  css_check  --rule=\"display: block\"\n\n\nThose options will check all rules that contain the one you asked\nfor. So if you run ``css_check -r background``, the output will\nbe::\n\n  Selectors for which \"background: #F60;\" is applied:\n  ___________________________________________________\n   - #main > header > nav\n  \n  \n  Selectors for which \"background: #89BEFC;\" is applied:\n  ______________________________________________________\n   - body\n  \n  \n  Selectors for which \"background: #008BCD;\" is applied:\n  ______________________________________________________\n   - #main > header\n   - #main > nav > ul > li\n   - #main > footer\n\n\nYou can use a strict rule checking using the ``-R`` or\n``--exact_rule`` option. In that case, you'll get an exact\nmatch. Running ``css_check -R background`` will not give any\nresult.\n\nThe tool also allows to know which rules are applied to a selector,\nusing the ``-s`` or ``--selector`` option.\nFor example, running ``css_check -s footer`` will output all\nrules applied for selectors containing the work ``footer``::\n\n  Rules applied for \"#main > footer a:hover\":\n  ___________________________________________\n   - text-decoration: underline\n  \n  \n  Rules applied for \"#main > footer a\":\n  _____________________________________\n   - color: #FFF\n  \n  \n  Rules applied for \"#main > footer li\":\n  ______________________________________\n   - display: inline\n\n\nOnce again, you can specify the exact selector, using options ``-S``\nor ``--exact_selector``.\nRunning the command ``css_check -S footer`` will only output\nthis::\n\n  Rules applied for \"footer\":\n  ___________________________\n   - display: block\n\n\nThe option used to specify the CSS directory is compatible with all\nother options. The other options can't be mixed (you can't specify a\nselector and a rule for example).\n\n\n\nChange log for CSSCheck\n=======================\n\n1.0 (2012-01-11)\n----------------\n\n - created product. [vincent]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "csscheck", "package_url": "https://pypi.org/project/csscheck/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/csscheck/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/csscheck/1.0/", "requires_dist": null, "requires_python": null, "summary": "Simple command line tool to help CSS developers", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"css-check\">\n<h2>CSS check</h2>\n<p>CSS check is a Python library/command line meant to help CSS\ndevelopers.</p>\n<p>The main use is to see which CSS rule are applied to more than one\nelement in all your CSS files.</p>\n<div id=\"install\">\n<h3>Install</h3>\n<p>The tool can be installed using easy_install:</p>\n<pre>easy_install csscheck\n</pre>\n<p>You can then define an alias to run the tool (in your .bashrc or\n.profile file):</p>\n<pre>alias css_check=\"python -m csscheck.main\"\n</pre>\n<p>If you have a buildout with the <tt>bin</tt> flder contained in your path,\nyou can add this part:</p>\n<pre>[css_check]\nrecipe = zc.recipe.egg\neggs = csscheck\n</pre>\n<p>That will automatically create a new executable <tt>cs_check</tt> in the\n<tt>bin</tt> folder of your buildout.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>When you simply run the <tt>css_check</tt> command created earlier, it will\nseek for all CSS files in the current directory (and sub-directories)\nand provide the list of CSS rules applied to more than one element.\nFor example:</p>\n<pre>Rule \"display: block\" -  used 4 times:\n______________________________________\n - header\n - nav\n - article\n - footer\n\n\nRule \"background: #008BCD;\" -  used 3 times:\n____________________________________________\n - #main &gt; header\n - #main &gt; nav &gt; ul &gt; li\n - #main &gt; footer\n</pre>\n<p>You can also specify the directory in which the CSS files must be\nchecked, using the <tt><span class=\"pre\">-d</span></tt> option:</p>\n<pre>css_check -d media/green_theme\n</pre>\n<p>You can also check for which elements a CSS rule is applied. To do so,\nyou can use the <tt><span class=\"pre\">-r</span></tt> or <tt><span class=\"pre\">--rule=</span></tt> option.\nFor example:</p>\n<pre>css_check  --rule=\"display: block\"\n</pre>\n<p>Those options will check all rules that contain the one you asked\nfor. So if you run <tt>css_check <span class=\"pre\">-r</span> background</tt>, the output will\nbe:</p>\n<pre>Selectors for which \"background: #F60;\" is applied:\n___________________________________________________\n - #main &gt; header &gt; nav\n\n\nSelectors for which \"background: #89BEFC;\" is applied:\n______________________________________________________\n - body\n\n\nSelectors for which \"background: #008BCD;\" is applied:\n______________________________________________________\n - #main &gt; header\n - #main &gt; nav &gt; ul &gt; li\n - #main &gt; footer\n</pre>\n<p>You can use a strict rule checking using the <tt><span class=\"pre\">-R</span></tt> or\n<tt><span class=\"pre\">--exact_rule</span></tt> option. In that case, you\u2019ll get an exact\nmatch. Running <tt>css_check <span class=\"pre\">-R</span> background</tt> will not give any\nresult.</p>\n<p>The tool also allows to know which rules are applied to a selector,\nusing the <tt><span class=\"pre\">-s</span></tt> or <tt><span class=\"pre\">--selector</span></tt> option.\nFor example, running <tt>css_check <span class=\"pre\">-s</span> footer</tt> will output all\nrules applied for selectors containing the work <tt>footer</tt>:</p>\n<pre>Rules applied for \"#main &gt; footer a:hover\":\n___________________________________________\n - text-decoration: underline\n\n\nRules applied for \"#main &gt; footer a\":\n_____________________________________\n - color: #FFF\n\n\nRules applied for \"#main &gt; footer li\":\n______________________________________\n - display: inline\n</pre>\n<p>Once again, you can specify the exact selector, using options <tt><span class=\"pre\">-S</span></tt>\nor <tt><span class=\"pre\">--exact_selector</span></tt>.\nRunning the command <tt>css_check <span class=\"pre\">-S</span> footer</tt> will only output\nthis:</p>\n<pre>Rules applied for \"footer\":\n___________________________\n - display: block\n</pre>\n<p>The option used to specify the CSS directory is compatible with all\nother options. The other options can\u2019t be mixed (you can\u2019t specify a\nselector and a rule for example).</p>\n</div>\n</div>\n<div id=\"change-log-for-csscheck\">\n<h2>Change log for CSSCheck</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">1.0 (2012-01-11)</span></h2>\n<blockquote>\n<ul>\n<li>created product. [vincent]</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 743140, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "7f1cb3928a0f77a43109e95a20c24a07", "sha256": "fa44c9d15ac9078f002656daaf495266b7035f760b9b1a0828f4ad8923f3cc92"}, "downloads": -1, "filename": "csscheck-1.0.zip", "has_sig": false, "md5_digest": "7f1cb3928a0f77a43109e95a20c24a07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12367, "upload_time": "2012-01-11T09:48:08", "upload_time_iso_8601": "2012-01-11T09:48:08.539788Z", "url": "https://files.pythonhosted.org/packages/48/ed/8bb52625f5a6c2bbf243532cd148291568778e04196f4055bf356fbb5f87/csscheck-1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f1cb3928a0f77a43109e95a20c24a07", "sha256": "fa44c9d15ac9078f002656daaf495266b7035f760b9b1a0828f4ad8923f3cc92"}, "downloads": -1, "filename": "csscheck-1.0.zip", "has_sig": false, "md5_digest": "7f1cb3928a0f77a43109e95a20c24a07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12367, "upload_time": "2012-01-11T09:48:08", "upload_time_iso_8601": "2012-01-11T09:48:08.539788Z", "url": "https://files.pythonhosted.org/packages/48/ed/8bb52625f5a6c2bbf243532cd148291568778e04196f4055bf356fbb5f87/csscheck-1.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:41:45 2020"}