{"info": {"author": "Paixi", "author_email": "paixi@protonmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Image Recognition"], "description": "# ImageAug\nImage augmentation for PyTorch\n\n* Apply random cropped rotations without going out of image bounds\n* Convert RGB to YUV color space\n* Adjust brightness and contrast, and more\n\n![Example](https://i.imgur.com/lyINe9Z.gif \"Example\")\n\n[Artwork](https://twitter.com/hcnone/status/1085740161600651269) by @[hcnone](https://twitter.com/hcnone)\n\n## Quick Start\n\nThe transformations are designed to be chained together using `torchvision.transforms.Compose`. Additionally, there is a functional module. Functional transforms give more fine-grained control if you have to build a more complex transformation pipeline.\n\n### Install\n\n```sh\npip3 install -r requirements.txt\npython3 setup.py install\n```\n**Requirements:**\n\n* Pillow\n* torchvision\n* numpy\n\n### Example\n\n```python\nfrom torchvision.transforms import ToTensor, ToPILImage, Compose\nfrom PIL import Image\nfrom imageaug.transforms import Colorspace, RandomAdjustment, RandomRotatedCrop\n\nimage_filename = 'test.png'\nimg = Image.open(image_filename, 'r').convert(\"RGB\")\n\ncrop_size = (64, 64)\nangle_std = 90 # in degrees\n# Note: apply color adjustments before a random rotated crop so that so that the\n#       fillcolor for out of bounds is not randomly adjusted (this only applies\n#       if you have images smaller than the crop size)\ntransform = Compose([\n    # convert PIL Image to Tensor\n    ToTensor(),\n    # convert RGB to YUV colorspace\n    Colorspace(\"rgb\", \"yuv\"),\n    # randomly adjust the brightness and contrast of channel 0 (Y: luminance)\n    RandomAdjustment(0, 0.1, 0.1, rgb=False),\n    # randomly adjust the contrast of channel 1 and 2 (UV: color channels)\n    RandomAdjustment((1,2), 0, 0.38, rgb=False),\n    # convert YUV to RGB colorspace\n    Colorspace(\"yuv\", \"rgb\"),\n    # convert Tensor back to PIL Image\n    ToPILImage(),\n    # random rotated crop\n    RandomRotatedCrop(crop_size, 0.0, angle_std, downscale=0.5)\n])\nout = transform(img)\nout.save(\"out.png\")\n```\n\n## Current Features\n* Rotate and crop images within the bounds of the original image for any given degree of angle perturbation (for training samples with rotational noise)\n* Convert images to and from RGB/YUV/YCH colorspace with alpha channel support\n* Adjust contrast and brightness of channels\n* Noise occulsion\n\n## To-do\n\nThis project is still a work in progress.\n\n* Uniform distribution for RandomRotatedCrop\n* Color lookup table for faster conversions between colorspaces\n* Add image, text, shape, and pixelation occulsions\n\n## Project Page\nGithub: [https://github.com/paixi/ImageAug](https://github.com/paixi/ImageAug)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/paixi/ImageAug", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ImageAug", "package_url": "https://pypi.org/project/ImageAug/", "platform": "", "project_url": "https://pypi.org/project/ImageAug/", "project_urls": {"Homepage": "https://github.com/paixi/ImageAug"}, "release_url": "https://pypi.org/project/ImageAug/0.1.0.post0/", "requires_dist": null, "requires_python": "", "summary": "Image augmentation for PyTorch", "version": "0.1.0.post0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ImageAug</h1>\n<p>Image augmentation for PyTorch</p>\n<ul>\n<li>Apply random cropped rotations without going out of image bounds</li>\n<li>Convert RGB to YUV color space</li>\n<li>Adjust brightness and contrast, and more</li>\n</ul>\n<p><img alt=\"Example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71b9f96e4d364df5ca88708a12ed16bbe51b8766/68747470733a2f2f692e696d6775722e636f6d2f6c79494e65395a2e676966\"></p>\n<p><a href=\"https://twitter.com/hcnone/status/1085740161600651269\" rel=\"nofollow\">Artwork</a> by @<a href=\"https://twitter.com/hcnone\" rel=\"nofollow\">hcnone</a></p>\n<h2>Quick Start</h2>\n<p>The transformations are designed to be chained together using <code>torchvision.transforms.Compose</code>. Additionally, there is a functional module. Functional transforms give more fine-grained control if you have to build a more complex transformation pipeline.</p>\n<h3>Install</h3>\n<pre>pip3 install -r requirements.txt\npython3 setup.py install\n</pre>\n<p><strong>Requirements:</strong></p>\n<ul>\n<li>Pillow</li>\n<li>torchvision</li>\n<li>numpy</li>\n</ul>\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">torchvision.transforms</span> <span class=\"kn\">import</span> <span class=\"n\">ToTensor</span><span class=\"p\">,</span> <span class=\"n\">ToPILImage</span><span class=\"p\">,</span> <span class=\"n\">Compose</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"kn\">from</span> <span class=\"nn\">imageaug.transforms</span> <span class=\"kn\">import</span> <span class=\"n\">Colorspace</span><span class=\"p\">,</span> <span class=\"n\">RandomAdjustment</span><span class=\"p\">,</span> <span class=\"n\">RandomRotatedCrop</span>\n\n<span class=\"n\">image_filename</span> <span class=\"o\">=</span> <span class=\"s1\">'test.png'</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">image_filename</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"s2\">\"RGB\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">crop_size</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"n\">angle_std</span> <span class=\"o\">=</span> <span class=\"mi\">90</span> <span class=\"c1\"># in degrees</span>\n<span class=\"c1\"># Note: apply color adjustments before a random rotated crop so that so that the</span>\n<span class=\"c1\">#       fillcolor for out of bounds is not randomly adjusted (this only applies</span>\n<span class=\"c1\">#       if you have images smaller than the crop size)</span>\n<span class=\"n\">transform</span> <span class=\"o\">=</span> <span class=\"n\">Compose</span><span class=\"p\">([</span>\n    <span class=\"c1\"># convert PIL Image to Tensor</span>\n    <span class=\"n\">ToTensor</span><span class=\"p\">(),</span>\n    <span class=\"c1\"># convert RGB to YUV colorspace</span>\n    <span class=\"n\">Colorspace</span><span class=\"p\">(</span><span class=\"s2\">\"rgb\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yuv\"</span><span class=\"p\">),</span>\n    <span class=\"c1\"># randomly adjust the brightness and contrast of channel 0 (Y: luminance)</span>\n    <span class=\"n\">RandomAdjustment</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"c1\"># randomly adjust the contrast of channel 1 and 2 (UV: color channels)</span>\n    <span class=\"n\">RandomAdjustment</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.38</span><span class=\"p\">,</span> <span class=\"n\">rgb</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"c1\"># convert YUV to RGB colorspace</span>\n    <span class=\"n\">Colorspace</span><span class=\"p\">(</span><span class=\"s2\">\"yuv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rgb\"</span><span class=\"p\">),</span>\n    <span class=\"c1\"># convert Tensor back to PIL Image</span>\n    <span class=\"n\">ToPILImage</span><span class=\"p\">(),</span>\n    <span class=\"c1\"># random rotated crop</span>\n    <span class=\"n\">RandomRotatedCrop</span><span class=\"p\">(</span><span class=\"n\">crop_size</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">angle_std</span><span class=\"p\">,</span> <span class=\"n\">downscale</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">\"out.png\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Current Features</h2>\n<ul>\n<li>Rotate and crop images within the bounds of the original image for any given degree of angle perturbation (for training samples with rotational noise)</li>\n<li>Convert images to and from RGB/YUV/YCH colorspace with alpha channel support</li>\n<li>Adjust contrast and brightness of channels</li>\n<li>Noise occulsion</li>\n</ul>\n<h2>To-do</h2>\n<p>This project is still a work in progress.</p>\n<ul>\n<li>Uniform distribution for RandomRotatedCrop</li>\n<li>Color lookup table for faster conversions between colorspaces</li>\n<li>Add image, text, shape, and pixelation occulsions</li>\n</ul>\n<h2>Project Page</h2>\n<p>Github: <a href=\"https://github.com/paixi/ImageAug\" rel=\"nofollow\">https://github.com/paixi/ImageAug</a></p>\n\n          </div>"}, "last_serial": 6400455, "releases": {"0.1.0.post0": [{"comment_text": "", "digests": {"md5": "4240fc50e59c10a689b5346c251a6adc", "sha256": "516c231941b02d618d5a34c5d29a11cab1d37e6d596de773e066d1431b2e7a43"}, "downloads": -1, "filename": "ImageAug-0.1.0.post0-py3.7.egg", "has_sig": false, "md5_digest": "4240fc50e59c10a689b5346c251a6adc", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 15695, "upload_time": "2020-01-06T03:52:43", "upload_time_iso_8601": "2020-01-06T03:52:43.426783Z", "url": "https://files.pythonhosted.org/packages/4a/a4/888ec8bdfba978f4841ee51d06e9fe72e76830c11a7536a33a68852a1a83/ImageAug-0.1.0.post0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2be7889784c820ee5cc0bba1ba2d2b3f", "sha256": "6e2f57e50208bd5a4add2245ba7fe10b1730fdd25506a0548c309bc98990ee50"}, "downloads": -1, "filename": "ImageAug-0.1.0.post0-py3-none-any.whl", "has_sig": false, "md5_digest": "2be7889784c820ee5cc0bba1ba2d2b3f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8368, "upload_time": "2020-01-06T03:52:40", "upload_time_iso_8601": "2020-01-06T03:52:40.637616Z", "url": "https://files.pythonhosted.org/packages/b0/32/94b150eaacdf0320e30b7ac65bed574dcfa3a65d72c6487f1e7f7e7b1a8f/ImageAug-0.1.0.post0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79793bfa06ab43fbec7e27f4eab57502", "sha256": "f2e67cfa2b9602c70e2b9152d02875111df59ad7ac1082560eca17c327a31f59"}, "downloads": -1, "filename": "ImageAug-0.1.0.post0.tar.gz", "has_sig": false, "md5_digest": "79793bfa06ab43fbec7e27f4eab57502", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6463, "upload_time": "2020-01-06T03:52:46", "upload_time_iso_8601": "2020-01-06T03:52:46.713649Z", "url": "https://files.pythonhosted.org/packages/2b/06/a7205b1a49976cf92073344d230add959b92b19de326d1f4ebb3b7dcba5c/ImageAug-0.1.0.post0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4240fc50e59c10a689b5346c251a6adc", "sha256": "516c231941b02d618d5a34c5d29a11cab1d37e6d596de773e066d1431b2e7a43"}, "downloads": -1, "filename": "ImageAug-0.1.0.post0-py3.7.egg", "has_sig": false, "md5_digest": "4240fc50e59c10a689b5346c251a6adc", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 15695, "upload_time": "2020-01-06T03:52:43", "upload_time_iso_8601": "2020-01-06T03:52:43.426783Z", "url": "https://files.pythonhosted.org/packages/4a/a4/888ec8bdfba978f4841ee51d06e9fe72e76830c11a7536a33a68852a1a83/ImageAug-0.1.0.post0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2be7889784c820ee5cc0bba1ba2d2b3f", "sha256": "6e2f57e50208bd5a4add2245ba7fe10b1730fdd25506a0548c309bc98990ee50"}, "downloads": -1, "filename": "ImageAug-0.1.0.post0-py3-none-any.whl", "has_sig": false, "md5_digest": "2be7889784c820ee5cc0bba1ba2d2b3f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8368, "upload_time": "2020-01-06T03:52:40", "upload_time_iso_8601": "2020-01-06T03:52:40.637616Z", "url": "https://files.pythonhosted.org/packages/b0/32/94b150eaacdf0320e30b7ac65bed574dcfa3a65d72c6487f1e7f7e7b1a8f/ImageAug-0.1.0.post0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79793bfa06ab43fbec7e27f4eab57502", "sha256": "f2e67cfa2b9602c70e2b9152d02875111df59ad7ac1082560eca17c327a31f59"}, "downloads": -1, "filename": "ImageAug-0.1.0.post0.tar.gz", "has_sig": false, "md5_digest": "79793bfa06ab43fbec7e27f4eab57502", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6463, "upload_time": "2020-01-06T03:52:46", "upload_time_iso_8601": "2020-01-06T03:52:46.713649Z", "url": "https://files.pythonhosted.org/packages/2b/06/a7205b1a49976cf92073344d230add959b92b19de326d1f4ebb3b7dcba5c/ImageAug-0.1.0.post0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:55 2020"}