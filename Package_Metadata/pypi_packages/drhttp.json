{"info": {"author": "Pierre-Olivier Marec", "author_email": "contact@drhttp.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "This is the official [python](https://python.org/) client for [Dr. Ashtetepe](https://drhttp.com/) service.\n\n\nDrHTTP let's you record two types of requests :\n\n - Inbound : requests that are performed by clients of your server (eg. API calls from a mobile app)\n - Outbound (optional) : requests that are performed by your server (eg. API call to third parties)\n\nNote: You need to configure inbound request recording to have outbound request recording working.\n\n# Installation\n\n 1) Install package with `pip` (or any compatible package manager) :\n    ```\n    pip install drhttp\n    ```\n\n 2) You will need a `dsn` ([Data source name](https://en.wikipedia.org/wiki/Data_source_name)) which can be found in [your project](https://drhttp.com/projects).\n\n# Usage for [Django](https://www.djangoproject.com/)\n\n[An integraion example is provided here](https://bitbucket.org/drhttp/drhttp-python/src/master/examples/django/)\n\n## Inbound request recording\n\n\nThis recording is done via a [wsgi](https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface) middleware. You can configure it in `wsgi.py`:\n\n```python\napplication = ... # get your application from existing code\n\nimport drhttp\napplication = drhttp.WSGIMiddleware(app=application,\n                                    dsn=\"<insert_dsn_here\")\n```\n\n### User identification\n\nIt allows the identification of the user issuing the inbound request. You'll be able to filter requests based on this field in the web interface. `drhttp` will identify your user if you set the `x-drhttp-user` response header with the user's id as value. Fortunately, we provide you a django middleware that does it automaticaly.\n\n```python\nMIDDLEWARE = [\n    ...\n    'drhttp.DjangoUserMiddleware',\n]\n```\n\n### Device identification\n\nDevice identification works as user identification, only the header name changes (`x-drhttp-device`). No django middleware is provided though, it's up to you to set this header depending your device identification strategy.\n\n## Outbound request recording\n\n*Note: Outbound request recording is not available yet in the python library*\n\n# Usage for [Flask](https://www.djangoproject.com/)\n\n[An integraion example is provided here](https://bitbucket.org/drhttp/drhttp-python/src/master/examples/flask/)\n\n## Inbound request recording\n\nThis recording is done via a wsgi middleware. You may need to change some code in your flask app file.\nThe goal is to encapsulate the wsgi app in the drhttp middleware. As `drhttp.WSGIMiddleware()` returns a wsgi application (not a full flask application) it can't be run by flask cli, you need a wsgi application server like `werkzeug/gunicorn/uwsgi`.\n\n```python\n...\napp = Flask(__name__)\n...\n\nif __name__ == '__main__':\n    import drhttp\n    from werkzeug.serving import run_simple\n    app = drhttp.WSGIMiddleware(app=app, dsn=\"<insert_dsn_here>\")\n    run_simple('0.0.0.0', 80, app)\n```\n\n### User identification\n\nIt allows the identification of the user issuing the inbound request. You'll be able to filter requests based on this field in the web interface. `drhttp` will identify your user if you set the `x-drhttp-user` response header with the user's id as value.\n\nHere is an example if you use `Flask-HTTPAuth` :\n\n```python\nfrom drhttp import DRHTTP_HEADER_USER\n@app.after_request\ndef apply_caching(response):\n    response.headers[DRHTTP_HEADER_USER] = auth.username()\n    return response\n```\n\n### Device identification\n\nDevice identification works as user identification, only the header name changes (`x-drhttp-device`). It's up to you to set this header depending your device identification strategy.\n\n## Outbound request recording\n\n*Note: Outbound request recording is not available yet in the python library*\n\n# Troubleshooting\n\nPlease [report any issue](https://bitbucket.org/drhttp/drhttp-python/issues/new) you encounter concerning documentation or implementation. This is very much appreciated.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://drhttp.com/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "drhttp", "package_url": "https://pypi.org/project/drhttp/", "platform": "", "project_url": "https://pypi.org/project/drhttp/", "project_urls": {"Homepage": "https://drhttp.com/"}, "release_url": "https://pypi.org/project/drhttp/0.2.0/", "requires_dist": ["requests (==2.22.*)"], "requires_python": "", "summary": "Dr. Ashtetepe (drhttp) agent for python application servers", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is the official <a href=\"https://python.org/\" rel=\"nofollow\">python</a> client for <a href=\"https://drhttp.com/\" rel=\"nofollow\">Dr. Ashtetepe</a> service.</p>\n<p>DrHTTP let's you record two types of requests :</p>\n<ul>\n<li>Inbound : requests that are performed by clients of your server (eg. API calls from a mobile app)</li>\n<li>Outbound (optional) : requests that are performed by your server (eg. API call to third parties)</li>\n</ul>\n<p>Note: You need to configure inbound request recording to have outbound request recording working.</p>\n<h1>Installation</h1>\n<ol>\n<li>\n<p>Install package with <code>pip</code> (or any compatible package manager) :</p>\n<pre><code>pip install drhttp\n</code></pre>\n</li>\n<li>\n<p>You will need a <code>dsn</code> (<a href=\"https://en.wikipedia.org/wiki/Data_source_name\" rel=\"nofollow\">Data source name</a>) which can be found in <a href=\"https://drhttp.com/projects\" rel=\"nofollow\">your project</a>.</p>\n</li>\n</ol>\n<h1>Usage for <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a></h1>\n<p><a href=\"https://bitbucket.org/drhttp/drhttp-python/src/master/examples/django/\" rel=\"nofollow\">An integraion example is provided here</a></p>\n<h2>Inbound request recording</h2>\n<p>This recording is done via a <a href=\"https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\" rel=\"nofollow\">wsgi</a> middleware. You can configure it in <code>wsgi.py</code>:</p>\n<pre><span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"c1\"># get your application from existing code</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">drhttp</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">drhttp</span><span class=\"o\">.</span><span class=\"n\">WSGIMiddleware</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">application</span><span class=\"p\">,</span>\n                                    <span class=\"n\">dsn</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;insert_dsn_here\"</span><span class=\"p\">)</span>\n</pre>\n<h3>User identification</h3>\n<p>It allows the identification of the user issuing the inbound request. You'll be able to filter requests based on this field in the web interface. <code>drhttp</code> will identify your user if you set the <code>x-drhttp-user</code> response header with the user's id as value. Fortunately, we provide you a django middleware that does it automaticaly.</p>\n<pre><span class=\"n\">MIDDLEWARE</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'drhttp.DjangoUserMiddleware'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>Device identification</h3>\n<p>Device identification works as user identification, only the header name changes (<code>x-drhttp-device</code>). No django middleware is provided though, it's up to you to set this header depending your device identification strategy.</p>\n<h2>Outbound request recording</h2>\n<p><em>Note: Outbound request recording is not available yet in the python library</em></p>\n<h1>Usage for <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Flask</a></h1>\n<p><a href=\"https://bitbucket.org/drhttp/drhttp-python/src/master/examples/flask/\" rel=\"nofollow\">An integraion example is provided here</a></p>\n<h2>Inbound request recording</h2>\n<p>This recording is done via a wsgi middleware. You may need to change some code in your flask app file.\nThe goal is to encapsulate the wsgi app in the drhttp middleware. As <code>drhttp.WSGIMiddleware()</code> returns a wsgi application (not a full flask application) it can't be run by flask cli, you need a wsgi application server like <code>werkzeug/gunicorn/uwsgi</code>.</p>\n<pre><span class=\"o\">...</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">drhttp</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">werkzeug.serving</span> <span class=\"kn\">import</span> <span class=\"n\">run_simple</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">drhttp</span><span class=\"o\">.</span><span class=\"n\">WSGIMiddleware</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">dsn</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;insert_dsn_here&gt;\"</span><span class=\"p\">)</span>\n    <span class=\"n\">run_simple</span><span class=\"p\">(</span><span class=\"s1\">'0.0.0.0'</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<h3>User identification</h3>\n<p>It allows the identification of the user issuing the inbound request. You'll be able to filter requests based on this field in the web interface. <code>drhttp</code> will identify your user if you set the <code>x-drhttp-user</code> response header with the user's id as value.</p>\n<p>Here is an example if you use <code>Flask-HTTPAuth</code> :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">drhttp</span> <span class=\"kn\">import</span> <span class=\"n\">DRHTTP_HEADER_USER</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">after_request</span>\n<span class=\"k\">def</span> <span class=\"nf\">apply_caching</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"n\">DRHTTP_HEADER_USER</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<h3>Device identification</h3>\n<p>Device identification works as user identification, only the header name changes (<code>x-drhttp-device</code>). It's up to you to set this header depending your device identification strategy.</p>\n<h2>Outbound request recording</h2>\n<p><em>Note: Outbound request recording is not available yet in the python library</em></p>\n<h1>Troubleshooting</h1>\n<p>Please <a href=\"https://bitbucket.org/drhttp/drhttp-python/issues/new\" rel=\"nofollow\">report any issue</a> you encounter concerning documentation or implementation. This is very much appreciated.</p>\n\n          </div>"}, "last_serial": 6689358, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "36c4aa6c843b2213e928fc972b04a412", "sha256": "be0724be2e7a74cd5e66e3095ba5f7c62dbc3751eecc91beacb9c2353a88df9a"}, "downloads": -1, "filename": "drhttp-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "36c4aa6c843b2213e928fc972b04a412", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16803, "upload_time": "2019-12-18T11:32:53", "upload_time_iso_8601": "2019-12-18T11:32:53.010986Z", "url": "https://files.pythonhosted.org/packages/78/57/52aaf52d04961a7920dd5b8bcc284e111de67f57206ec33dc9dc2afc2bac/drhttp-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "672ec69dd1fda415e52c6d2bf66bbcbb", "sha256": "b54f1b1a0043e209d7d0136d994a1634fc5f641fd182ae08b73c6f79517d6b2a"}, "downloads": -1, "filename": "drhttp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "672ec69dd1fda415e52c6d2bf66bbcbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3790, "upload_time": "2019-12-18T11:32:55", "upload_time_iso_8601": "2019-12-18T11:32:55.374779Z", "url": "https://files.pythonhosted.org/packages/36/cf/f8970438aef15781a076f9112bde37307efa467d17854f1ebef504e0f580/drhttp-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "67d265943032a1e16032dee3a355e699", "sha256": "804b5f101b7cc4db231fb16311c6ae847cb1333ada74f41af59e6cef01b06fc3"}, "downloads": -1, "filename": "drhttp-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "67d265943032a1e16032dee3a355e699", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17742, "upload_time": "2020-01-27T17:19:50", "upload_time_iso_8601": "2020-01-27T17:19:50.813783Z", "url": "https://files.pythonhosted.org/packages/1d/cd/8721fdce6565c9f46603b02e8781ab953da1d03831741cd98d37a03b7780/drhttp-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07be04f31510ed55e4b4472ab83dbdbd", "sha256": "b48a171cd4e9160883ecdf49a0775eaf0e48b2c5f36dbcdd3a7185691b6edfb5"}, "downloads": -1, "filename": "drhttp-0.1.2.tar.gz", "has_sig": false, "md5_digest": "07be04f31510ed55e4b4472ab83dbdbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4895, "upload_time": "2020-01-27T17:19:53", "upload_time_iso_8601": "2020-01-27T17:19:53.224278Z", "url": "https://files.pythonhosted.org/packages/7d/92/ab2eb4aaa269a1fdd556ce99b9802ec654b1646d6b22cefa8bc7d5d8ce58/drhttp-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "90675fa1899b6dfce3f5c1cf95ce2344", "sha256": "1a561a2d102d834f3899b4982c600b4cb8e0fa64580fa7118e6c80be8599d7a2"}, "downloads": -1, "filename": "drhttp-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "90675fa1899b6dfce3f5c1cf95ce2344", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18425, "upload_time": "2020-02-09T11:56:57", "upload_time_iso_8601": "2020-02-09T11:56:57.055319Z", "url": "https://files.pythonhosted.org/packages/75/24/3eb0745cfc4a4ede08267e886081b165d3db86d49b34424f31174300b28b/drhttp-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d07fe77e0f80f0c3015aefd69635848d", "sha256": "a382213d5dbdebf58519b119833a02d45f3f2304c7f5afddbb0d0a04c8d33a93"}, "downloads": -1, "filename": "drhttp-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d07fe77e0f80f0c3015aefd69635848d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5152, "upload_time": "2020-02-09T11:57:00", "upload_time_iso_8601": "2020-02-09T11:57:00.150793Z", "url": "https://files.pythonhosted.org/packages/48/94/d301bde773541a90d21b2d84cf3047493c20dedc9c4e5dc80610377c58b0/drhttp-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a6038581a4cb9652a047c8ad6c16875e", "sha256": "9dbb7d39d0b260c23f863a68a148fb5f6b3ee3c4ac4ebcb26a77154d047d76ff"}, "downloads": -1, "filename": "drhttp-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a6038581a4cb9652a047c8ad6c16875e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19459, "upload_time": "2020-02-24T15:56:00", "upload_time_iso_8601": "2020-02-24T15:56:00.218407Z", "url": "https://files.pythonhosted.org/packages/b3/9d/8d153b5c5d7064be346781e97fc3091ae93e061f175fe972adf88df9b2a7/drhttp-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af35aa5ad7f9278cf69f52e691222d12", "sha256": "a3f3464931357768a978390a22751a5675f7d294593c3fe3eecdac8f17d9aea7"}, "downloads": -1, "filename": "drhttp-0.2.0.tar.gz", "has_sig": false, "md5_digest": "af35aa5ad7f9278cf69f52e691222d12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5747, "upload_time": "2020-02-24T15:56:04", "upload_time_iso_8601": "2020-02-24T15:56:04.433816Z", "url": "https://files.pythonhosted.org/packages/9f/75/529ab9b2db34e35c1d418da43bd90407625fcbb60a1c3a026a37966409e5/drhttp-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a6038581a4cb9652a047c8ad6c16875e", "sha256": "9dbb7d39d0b260c23f863a68a148fb5f6b3ee3c4ac4ebcb26a77154d047d76ff"}, "downloads": -1, "filename": "drhttp-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a6038581a4cb9652a047c8ad6c16875e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19459, "upload_time": "2020-02-24T15:56:00", "upload_time_iso_8601": "2020-02-24T15:56:00.218407Z", "url": "https://files.pythonhosted.org/packages/b3/9d/8d153b5c5d7064be346781e97fc3091ae93e061f175fe972adf88df9b2a7/drhttp-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af35aa5ad7f9278cf69f52e691222d12", "sha256": "a3f3464931357768a978390a22751a5675f7d294593c3fe3eecdac8f17d9aea7"}, "downloads": -1, "filename": "drhttp-0.2.0.tar.gz", "has_sig": false, "md5_digest": "af35aa5ad7f9278cf69f52e691222d12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5747, "upload_time": "2020-02-24T15:56:04", "upload_time_iso_8601": "2020-02-24T15:56:04.433816Z", "url": "https://files.pythonhosted.org/packages/9f/75/529ab9b2db34e35c1d418da43bd90407625fcbb60a1c3a026a37966409e5/drhttp-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:37 2020"}