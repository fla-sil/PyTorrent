{"info": {"author": "Julian Nash", "author_email": "julianjamesnash@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "## httpz - A handy HTTP status code library\n\n#### Installation\n\n```shell script\npip install httpz\n```\n\n#### API\n\nGet an HTTP status code\n\n```pycon\n>>> HTTPStatusCodes.get(\"200\")\nHTTPStatusCode(code=200, message=OK, description=The request has succeeded)\n```\n\n`HTTPStatusCode` objects have several useful attributes:\n\n| Attribute | Type | Example |\n| --------- | ---- | ------- |\n| `code` | `int` | 200 |\n| `message` | `str` | OK |\n| `description` | `str` | The request has succeeded |\n| `category` | `str` | successful |\n| `webdav` | `bool` | `False` |\n| `experimental` | `bool` | `False` |\n\n\nFor example:\n\n```pycon\n>>> code = HTTPStatusCodes.get(\"100\")\n>>> code.code\n100\n>>> code.message\n'Continue'\n>>> code.category\n'informational'\n>>> code.description\n'This interim response indicates that everything so far is OK and that the client should continue the request, or ignore the response if the request is already fi\nnished'\n```\n\nCalling `to_dict()` on an `HTTPStatusCode` object will return a dict:\n\n```pycon\n>>> code = HTTPStatusCodes.get(\"200\")\n>>> code.to_dict()\n{'description': 'The request has succeeded', 'code': 200, 'message': 'OK', 'webdav': False, 'category': 'successful'}\n```\n\nGet a list of `HTTPStatusCode` objects by category\n\n```pycon\n>>> HTTPStatusCodes.get_category(\"informational\")\n[HTTPStatusCode(code=100, message=Continue, description=This interim response indicates that everything so far is OK and that the client should continue the reque\nst, or ignore the response if the request is already finished), HTTPStatusCode(code=101, message=Switching Protocol, description=This code is sent in response to\nan Upgrade request header from the client, and indicates the protocol the server is switching to), HTTPStatusCode(code=102, message=Processing, description=This c\node indicates that the server has received and is processing the request, but no response is available yet), HTTPStatusCode(code=103, message=Early Hints, descrip\ntion=This status code is primarily intended to be used with the Link header, letting the user agent start preloading resources while the server prepares a respons\ne)]\n```\n\nCategories:\n\n- `informational` - 100 range\n- `successful` - 200 range\n- `redirection` - 300 range\n- `client_error` - 400 range\n- `server_error` - 500 range\n\nAn enum of categories is also available:\n\n```pycon\n>>> from httpz import HTTPStatusCodeCategory\n>>> HTTPStatusCodeCategory.CLIENT_ERROR\n<HTTPStatusCodeCategory.CLIENT_ERROR: 'client_error'>\n>>> HTTPStatusCodeCategory.CLIENT_ERROR.value\n'client_error'\n```\n\nAn ordered list of all `HTTPStatusCode` objects (from low to high) can be obtained with:\n\n```pycon\n>>> from httpz import HTTPStatusCodes\n>>> all_codes = HTTPStatusCodes.get_all()\n>>> for status_code in all_codes:\n...     print(status_code.code, status_code.message)\n100 Continue\n101 Switching Protocol\n102 Processing\n103 Early Hints\n200 OK\n201 Created\n202 Accepted\n203 Non-Authoritative Information\n204 No Content\n205 Reset Content\n206 Partial Content\n207 Multi-Status\n208 Already Reported\n226 IM Used\n300 Multiple Choice\n301 Moved Permanently\n302 Found\n303 See Other\n304 Not Modified\n305 Use Proxy\n306 Unused\n307 Temporary Redirect\n308 Permanent Redirect\n400 Bad Request\n401 Unauthorized\n402 Payment Required\n403 Forbidden\n404 Not Found\n405 Method Not Allowed\n406 Not Acceptable\n407 Proxy Authentication Required\n408 Request Timeout\n409 Conflict\n410 Gone\n411 Length Required\n412 Precondition Failed\n413 Payload Too Large\n414 URI Too Long\n415 Unsupported Media Type\n416 Range Not Satisfiable\n417 Expectation Failed\n418 I'm a teapot\n421 Misdirected Request\n422 Unprocessable Entity\n423 Locked\n424 Failed Dependency\n425 Too Early\n426 Upgrade Required\n428 Precondition Required\n429 Too Many Requests\n431 Request Header Fields Too Large\n451 Unavailable For Legal Reasons\n500 Internal Server Error\n501 Not Implemented\n502 Bad Gateway\n503 Service Unavailable\n504 Gateway Timeout\n505 HTTP Version Not Supported\n506 Variant Also Negotiates\n507 Insufficient Storage\n508 Loop Detected\n510 Not Extended\n511 Network Authentication Required\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Julian-Nash/httpz", "keywords": "http status codes", "license": "", "maintainer": "", "maintainer_email": "", "name": "httpz", "package_url": "https://pypi.org/project/httpz/", "platform": "", "project_url": "https://pypi.org/project/httpz/", "project_urls": {"Bug Tracker": "https://github.com/Julian-Nash/httpz", "Documentation": "https://github.com/Julian-Nash/httpz", "Homepage": "https://github.com/Julian-Nash/httpz", "Source Code": "https://github.com/Julian-Nash/httpz"}, "release_url": "https://pypi.org/project/httpz/1.0/", "requires_dist": null, "requires_python": "", "summary": "HTTP Status code utils", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>httpz - A handy HTTP status code library</h2>\n<h4>Installation</h4>\n<pre>pip install httpz\n</pre>\n<h4>API</h4>\n<p>Get an HTTP status code</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HTTPStatusCodes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"200\"</span><span class=\"p\">)</span>\n<span class=\"go\">HTTPStatusCode(code=200, message=OK, description=The request has succeeded)</span>\n</pre>\n<p><code>HTTPStatusCode</code> objects have several useful attributes:</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Type</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>code</code></td>\n<td><code>int</code></td>\n<td>200</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td><code>str</code></td>\n<td>OK</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td><code>str</code></td>\n<td>The request has succeeded</td>\n</tr>\n<tr>\n<td><code>category</code></td>\n<td><code>str</code></td>\n<td>successful</td>\n</tr>\n<tr>\n<td><code>webdav</code></td>\n<td><code>bool</code></td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>experimental</code></td>\n<td><code>bool</code></td>\n<td><code>False</code></td>\n</tr></tbody></table>\n<p>For example:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">HTTPStatusCodes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"100\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">code</span>\n<span class=\"go\">100</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">message</span>\n<span class=\"go\">'Continue'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">category</span>\n<span class=\"go\">'informational'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">description</span>\n<span class=\"go\">'This interim response indicates that everything so far is OK and that the client should continue the request, or ignore the response if the request is already fi</span>\n<span class=\"go\">nished'</span>\n</pre>\n<p>Calling <code>to_dict()</code> on an <code>HTTPStatusCode</code> object will return a dict:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">HTTPStatusCodes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"200\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n<span class=\"go\">{'description': 'The request has succeeded', 'code': 200, 'message': 'OK', 'webdav': False, 'category': 'successful'}</span>\n</pre>\n<p>Get a list of <code>HTTPStatusCode</code> objects by category</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HTTPStatusCodes</span><span class=\"o\">.</span><span class=\"n\">get_category</span><span class=\"p\">(</span><span class=\"s2\">\"informational\"</span><span class=\"p\">)</span>\n<span class=\"go\">[HTTPStatusCode(code=100, message=Continue, description=This interim response indicates that everything so far is OK and that the client should continue the reque</span>\n<span class=\"go\">st, or ignore the response if the request is already finished), HTTPStatusCode(code=101, message=Switching Protocol, description=This code is sent in response to</span>\n<span class=\"go\">an Upgrade request header from the client, and indicates the protocol the server is switching to), HTTPStatusCode(code=102, message=Processing, description=This c</span>\n<span class=\"go\">ode indicates that the server has received and is processing the request, but no response is available yet), HTTPStatusCode(code=103, message=Early Hints, descrip</span>\n<span class=\"go\">tion=This status code is primarily intended to be used with the Link header, letting the user agent start preloading resources while the server prepares a respons</span>\n<span class=\"go\">e)]</span>\n</pre>\n<p>Categories:</p>\n<ul>\n<li><code>informational</code> - 100 range</li>\n<li><code>successful</code> - 200 range</li>\n<li><code>redirection</code> - 300 range</li>\n<li><code>client_error</code> - 400 range</li>\n<li><code>server_error</code> - 500 range</li>\n</ul>\n<p>An enum of categories is also available:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">httpz</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPStatusCodeCategory</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HTTPStatusCodeCategory</span><span class=\"o\">.</span><span class=\"n\">CLIENT_ERROR</span>\n<span class=\"go\">&lt;HTTPStatusCodeCategory.CLIENT_ERROR: 'client_error'&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">HTTPStatusCodeCategory</span><span class=\"o\">.</span><span class=\"n\">CLIENT_ERROR</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"go\">'client_error'</span>\n</pre>\n<p>An ordered list of all <code>HTTPStatusCode</code> objects (from low to high) can be obtained with:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">httpz</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPStatusCodes</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">all_codes</span> <span class=\"o\">=</span> <span class=\"n\">HTTPStatusCodes</span><span class=\"o\">.</span><span class=\"n\">get_all</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">status_code</span> <span class=\"ow\">in</span> <span class=\"n\">all_codes</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n<span class=\"go\">100 Continue</span>\n<span class=\"go\">101 Switching Protocol</span>\n<span class=\"go\">102 Processing</span>\n<span class=\"go\">103 Early Hints</span>\n<span class=\"go\">200 OK</span>\n<span class=\"go\">201 Created</span>\n<span class=\"go\">202 Accepted</span>\n<span class=\"go\">203 Non-Authoritative Information</span>\n<span class=\"go\">204 No Content</span>\n<span class=\"go\">205 Reset Content</span>\n<span class=\"go\">206 Partial Content</span>\n<span class=\"go\">207 Multi-Status</span>\n<span class=\"go\">208 Already Reported</span>\n<span class=\"go\">226 IM Used</span>\n<span class=\"go\">300 Multiple Choice</span>\n<span class=\"go\">301 Moved Permanently</span>\n<span class=\"go\">302 Found</span>\n<span class=\"go\">303 See Other</span>\n<span class=\"go\">304 Not Modified</span>\n<span class=\"go\">305 Use Proxy</span>\n<span class=\"go\">306 Unused</span>\n<span class=\"go\">307 Temporary Redirect</span>\n<span class=\"go\">308 Permanent Redirect</span>\n<span class=\"go\">400 Bad Request</span>\n<span class=\"go\">401 Unauthorized</span>\n<span class=\"go\">402 Payment Required</span>\n<span class=\"go\">403 Forbidden</span>\n<span class=\"go\">404 Not Found</span>\n<span class=\"go\">405 Method Not Allowed</span>\n<span class=\"go\">406 Not Acceptable</span>\n<span class=\"go\">407 Proxy Authentication Required</span>\n<span class=\"go\">408 Request Timeout</span>\n<span class=\"go\">409 Conflict</span>\n<span class=\"go\">410 Gone</span>\n<span class=\"go\">411 Length Required</span>\n<span class=\"go\">412 Precondition Failed</span>\n<span class=\"go\">413 Payload Too Large</span>\n<span class=\"go\">414 URI Too Long</span>\n<span class=\"go\">415 Unsupported Media Type</span>\n<span class=\"go\">416 Range Not Satisfiable</span>\n<span class=\"go\">417 Expectation Failed</span>\n<span class=\"go\">418 I'm a teapot</span>\n<span class=\"go\">421 Misdirected Request</span>\n<span class=\"go\">422 Unprocessable Entity</span>\n<span class=\"go\">423 Locked</span>\n<span class=\"go\">424 Failed Dependency</span>\n<span class=\"go\">425 Too Early</span>\n<span class=\"go\">426 Upgrade Required</span>\n<span class=\"go\">428 Precondition Required</span>\n<span class=\"go\">429 Too Many Requests</span>\n<span class=\"go\">431 Request Header Fields Too Large</span>\n<span class=\"go\">451 Unavailable For Legal Reasons</span>\n<span class=\"go\">500 Internal Server Error</span>\n<span class=\"go\">501 Not Implemented</span>\n<span class=\"go\">502 Bad Gateway</span>\n<span class=\"go\">503 Service Unavailable</span>\n<span class=\"go\">504 Gateway Timeout</span>\n<span class=\"go\">505 HTTP Version Not Supported</span>\n<span class=\"go\">506 Variant Also Negotiates</span>\n<span class=\"go\">507 Insufficient Storage</span>\n<span class=\"go\">508 Loop Detected</span>\n<span class=\"go\">510 Not Extended</span>\n<span class=\"go\">511 Network Authentication Required</span>\n</pre>\n\n          </div>"}, "last_serial": 7027454, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "019c066d3119a9d878b32aa18afa7196", "sha256": "a0f66e9a73ec8c6e8646d872ad566a5fd4509016a444c9bd6129164547d793e0"}, "downloads": -1, "filename": "httpz-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "019c066d3119a9d878b32aa18afa7196", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12429, "upload_time": "2020-04-15T21:02:46", "upload_time_iso_8601": "2020-04-15T21:02:46.563100Z", "url": "https://files.pythonhosted.org/packages/82/51/8b462d2fb3a95a23ff599262dbdde58f97d4522b857de53cfaff9095e9b4/httpz-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afbf04b2229b33f52fd70008e1ee0b12", "sha256": "c1aca2e34086e1f8a9f648affa75c02e4a89818d19b5284c1084e5d1017d8503"}, "downloads": -1, "filename": "httpz-1.0.tar.gz", "has_sig": false, "md5_digest": "afbf04b2229b33f52fd70008e1ee0b12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11560, "upload_time": "2020-04-15T21:02:49", "upload_time_iso_8601": "2020-04-15T21:02:49.196053Z", "url": "https://files.pythonhosted.org/packages/04/78/4c9ebe4648d44bd991018e9f4f6fc6ddba55600de766b1d1b56ffc6ab15d/httpz-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "019c066d3119a9d878b32aa18afa7196", "sha256": "a0f66e9a73ec8c6e8646d872ad566a5fd4509016a444c9bd6129164547d793e0"}, "downloads": -1, "filename": "httpz-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "019c066d3119a9d878b32aa18afa7196", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12429, "upload_time": "2020-04-15T21:02:46", "upload_time_iso_8601": "2020-04-15T21:02:46.563100Z", "url": "https://files.pythonhosted.org/packages/82/51/8b462d2fb3a95a23ff599262dbdde58f97d4522b857de53cfaff9095e9b4/httpz-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afbf04b2229b33f52fd70008e1ee0b12", "sha256": "c1aca2e34086e1f8a9f648affa75c02e4a89818d19b5284c1084e5d1017d8503"}, "downloads": -1, "filename": "httpz-1.0.tar.gz", "has_sig": false, "md5_digest": "afbf04b2229b33f52fd70008e1ee0b12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11560, "upload_time": "2020-04-15T21:02:49", "upload_time_iso_8601": "2020-04-15T21:02:49.196053Z", "url": "https://files.pythonhosted.org/packages/04/78/4c9ebe4648d44bd991018e9f4f6fc6ddba55600de766b1d1b56ffc6ab15d/httpz-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:01 2020"}