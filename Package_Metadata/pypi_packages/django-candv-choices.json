{"info": {"author": "Alexander Oblovatniy", "author_email": "oblovatniy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries"], "description": "django-candv-choices\n====================\n\n|pypi_package| |pypi_downloads| |python_versions| |license|\n\nUse complex constants built with `candv`_ library instead of standard\n`choices`_ fields for `Django`_ models.\n\nTry `online live demo <http://django-candv-choices.herokuapp.com/>`_! Use\n``demo``/``demo`` as login/pass for authentication.\n\n|demo_preview|\n\n\n**Table of contents**\n\n.. contents::\n    :local:\n    :depth: 1\n    :backlinks: none\n\n\nInstallation\n------------\n\nInstall from `PyPI <https://pypi.python.org/pypi/django-candv-choices>`_:\n\n.. code-block:: bash\n\n    $ pip install django-candv-choices\n\n\nProblem overview\n----------------\n\nWell, you need to define some constant choices for your Django model field.\nLet's start from defining constants themselves:\n\n.. code-block:: python\n\n    # constants.py\n    from django.utils.translation import ugettext_lazy as _\n\n    AUTH_TYPE_BASIC = 'BASIC'\n    AUTH_TYPE_DIGEST = 'DIGEST'\n    AUTH_TYPE_CLIENT_CERT = 'CLIENT-CERT'\n    AUTH_TYPE_FORM = 'FORM'\n\n    AUTH_TYPES = (\n        (AUTH_TYPE_BASIC, _(\"HTTP Basic Authentication\")),\n        (AUTH_TYPE_DIGEST, _(\"HTTP Digest Authentication \")),\n        (AUTH_TYPE_CLIENT_CERT, _(\"HTTPS Client Authentication \")),\n        (AUTH_TYPE_FORM, _(\"Form Based Authentication \")),\n    )\n\nHere we define constant names and attach verbose names to them. Bloated\ndefinition, no docstring for constants group, no docstings per constant. What\nif you need to define some help text per constant? 4 more definitions? Well,\nthen just imagine, how you will attach them. And what about other attributes?\nAnd what about adding some methods for constants? How about getting constant by\nits name? By value? And how about performing some operations on the whole\nconstants group?\n\nOnly at this point you may end up with one big module which will work only with\none group of constants. And this work will be a big pain.\n\nBut OK, let's go further and define some DB model field:\n\n.. code-block:: python\n\n    # models.py\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n\n    from . constants import AUTH_TYPES, AUTH_TYPE_BASIC\n\n\n    class Request(models.Model):\n\n        auth_type = models.CharField(\n            verbose_name=_(\"Auth type\"),\n            help_text=_(\"Example of default constants\"),\n            choices=AUTH_TYPES,\n            blank=False,\n            max_length=11,\n            default=AUTH_TYPE_BASIC)\n\n3 things to mention here:\n\n* you have to import constant group itself;\n* you may have to import dafault value too;\n* you need go back to constants definition, iterate over each constant,\n  calculate its length and select the longest value to pass it as\n  ``max_length`` argument. And don't try to make a mistake, or you will be\n  punished otherwise.\n\nI use ``CharField`` here intentionally. It can be good to use ``IntegerField``,\n``PositiveSmallIntegerField`` and so on, but it is very probable that you will\nbe willing someone to kill you due to hidden bugs.\n\nNow it's showtime! Let's render our field:\n\n.. code-block:: jinja\n\n    <ul>\n    {% for r in requests %}\n      <li>{{ r.auth_type }}</li>\n    {% endfor %}\n    </ul>\n\nWhat do you see? ``BASIC``, ``DIGEST``, ``FORM``, etc. Oops! How to get our\nhuman messages like ``HTTP Basic Authentication``?\n\nYou need to convert constants group to ``dict`` and pass it to template's\ncontext! But wait, this is not the end. You can not access dict values directly\nwithin templates. You need to create a library of template tags, register a\nfilter and load the library to template:\n\n.. code-block:: python\n\n    # templatetags/custom_tags.py\n    from django import template\n\n    register = template.Library()\n\n\n    @register.filter\n    def lookup(d, key):\n        return d[key]\n\n\n.. code-block:: jinja\n\n    {% load custom_tags %}\n    <ul>\n    {% for r in requests %}\n      <li>{{ AUTH_TYPES|lookup:r.auth_type }}</li>\n    {% endfor %}\n    </ul>\n\n\nThis is madness!\n\n\nSolution\n--------\n\nThe solution is to use `candv`_ and this library. The former allows you to\ndefine stand-alone groups of complex constants and latter allows you to use\nthose constants as choises.\n\nLet's examine some simple example and define some constants:\n\n.. code-block:: python\n\n    # constants.py\n    from candv import SimpleConstant, Constants\n\n    class METHOD_TYPE(Constants):\n        \"\"\"\n        Available HTTP methods.\n        \"\"\"\n        GET = SimpleConstant()\n        PUT = SimpleConstant()\n        POST = SimpleConstant()\n        DELETE = SimpleConstant()\n        TRACE = SimpleConstant()\n\nHere we defined a group of constants with no attributes. Looks pretty, let's\nuse it:\n\n.. code-block:: python\n\n    # models.py\n    from candv_x.django.choices import ChoicesField\n\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n\n    from . constants import METHOD_TYPE\n\n    class Request(models.Model):\n\n        method = ChoicesField(\n            verbose_name=_(\"method\"),\n            help_text=_(\"Example of simple candv constants\"),\n            choices=METHOD_TYPE,\n            blank=False,\n        )\n\nThat's all. You can pass some default value if you want,\ne.g. ``default=METHOD_TYPE.GET``.\n\nNow you can render it:\n\n.. code-block:: jinja\n\n    <ul>\n    {% for r in requests %}\n      <li>{{ r.method.name }}</li>\n    {% endfor %}\n    </ul>\n\nThe output will contain ``GET``, ``PUT``, ``POST``, etc. Want more? Let's add\nvalues, verbose names and help texts:\n\n.. code-block:: python\n\n    # constants.py\n    from candv import VerboseValueConstant, Values\n    from django.utils.translation import ugettext_lazy as _\n\n    class RESULT_TYPE(Values):\n        \"\"\"\n        Possible operation results.\n        \"\"\"\n        SUCCESS = VerboseValueConstant(\n            value='2C7517',\n            verbose_name=_(\"Success\"),\n            help_text=_(\"Yay! Everything is good!\")\n        )\n        FAILURE = VerboseValueConstant(\n            value='A30D0D',\n            verbose_name=_(\"Failure\"),\n            help_text=_(\"Oops! Something went wrong!\")\n        )\n        PENDING = VerboseValueConstant(\n            value='E09F26',\n            verbose_name=_(\"Pending\"),\n            help_text=_(\"Still waiting for the task to complete...\")\n        )\n\n..\n\n    Please, refer to `candv usage`_ to learn how to define and use constants.\n    You may find `candv customization`_ useful too.\n\nHere we have used `Values`_ as container and `VerboseValueConstant`_ as class\nfor items. Each constant has a ``name`` (e.g. ``SUCCESS``), a value, a verbose\ntext and a help text. All of this you can access directly from everywhere.\n\nField definition does not differ much from previous:\n\n.. code-block:: python\n\n    # models.py\n    from candv_x.django.choices import ChoicesField\n\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n\n    from . constants import RESULT_TYPE\n\n    class Request(models.Model):\n\n        result = ChoicesField(\n                verbose_name=_(\"result\"),\n                help_text=_(\"Example of complex candv constants with verbose names, \"\n                            \"help texts and inner values\"),\n                choices=RESULT_TYPE,\n                blank=False,\n                default=RESULT_TYPE.SUCCESS,\n            )\n\nYou may use ``blank=True`` if you wish, there's no problem. Let's output our\ndata:\n\n.. code-block:: jinja\n\n    <table>\n    {% for r in requests %}\n      <tr>\n        <td style=\"color: #{{ r.result.value }};\" title=\"{{ r.result.help_text }}\">\n          {{ r.result.verbose_name }}\n        </td>\n      </tr>\n    {% endfor %}\n    </table>\n\nNot so hard, innit?\n\nYou can pass any constants to ``ChoicesField`` from your old projects or\nexternal libraries. Enjoy!\n\n\nCaveats\n-------\n\n* Django admin renders choices by converting them to strings. So,\n  ``__str__`` and ``__unicode__`` methods will be automatically overriden for\n  constant items. It will return the name of the constant. By default,\n  constants in ``candv`` do not have those methods at all (I cannot find a\n  reason why the should to), so it seems not to be a problem. Just be aware.\n* ``candv`` supports creating `hierarchies of constants`_. If you have some\n  reason to use them as choices for DB field, take into accout that choices\n  will be built only from top-level group of constants.\n\n\nThings to think about\n---------------------\n\n* Django has `MultipleChoiceField`_ and `TypedMultipleChoiceField`_. I haven't\n  used used them, but I think it can be useful to implement analogues for\n  'candv', especially for ``MultipleChoiceField``.\n* I think, there is a place to think about implementation of full support of\n  hierarchies. Maybe it's possible to make some nested choices, or at least\n  flatten them.\n\n\nChangelog\n---------\n\n*You can click a version name to see a diff with the previous one.*\n\n* `1.1.5`_ (Aug 1, 2015)\n\n  * Fix usage of default values for migrations in Django >= 1.7\n    (`issue #8`_).\n  * Implement field serializer for restframework as a separate library\n    `django-rf-candv-choices`_ (`issue #9`_).\n\n* `1.1.4`_ (Jul 2, 2015)\n\n  * Add support for Python 3 (`issue #6`_).\n  * Add support for migrations in Django >= 1.7 (`issue #7`_).\n  * Imports which will become deprecated in Django 1.9 are not used now.\n\n* `1.1.3`_ (Oct 11, 2014)\n\n  * ``candv`` dependency updated up to *v1.2.0*.\n  * Add support for South (`issue #4`_).\n  * Choices' form field can display help text as option's title now\n    (`issue #1`_).\n\n* `1.1.0`_ (Jul 19, 2014)\n\n  * rename package to ``choices`` and move into ``candv_x.django``\n    (``x`` stands for ``extensions``)\n\n* `1.0.0`_ (Jun 22, 2014)\n\n  Initial version\n\n\n.. |pypi_package| image:: http://img.shields.io/pypi/v/django-candv-choices.svg?style=flat\n   :target: http://badge.fury.io/py/django-candv-choices/\n   :alt: Version of PyPI package\n\n.. |pypi_downloads| image:: http://img.shields.io/pypi/dm/django-candv-choices.svg?style=flat\n   :target: https://crate.io/packages/django-candv-choices/\n   :alt: Number of downloads of PyPI package\n\n.. |python_versions| image:: https://img.shields.io/badge/Python-2.7,3.4-brightgreen.svg?style=flat\n   :alt: Supported versions of Python\n\n.. |license| image:: https://img.shields.io/badge/license-LGPLv3-blue.svg?style=flat\n   :target: https://github.com/oblalex/django-candv-choices/blob/master/LICENSE\n   :alt: Package license\n\n.. |demo_preview| image:: http://i.imgur.com/NXKsgRA.png\n   :target: http://django-candv-choices.herokuapp.com/\n   :alt: Live demo screenshot\n\n.. _candv: http://candv.readthedocs.org/en/latest/\n.. _choices: https://docs.djangoproject.com/en/1.6/ref/models/fields/#django.db.models.Field.choices\n.. _Django: https://www.djangoproject.com/\n.. _django-rf-candv-choices: https://github.com/oblalex/django-rf-candv-choices\n\n.. _Values: http://candv.readthedocs.org/en/latest/candv.html#candv.Values\n.. _VerboseValueConstant: http://candv.readthedocs.org/en/latest/candv.html#candv.VerboseValueConstant\n\n.. _candv usage: http://candv.readthedocs.org/en/latest/usage.html#usage\n.. _candv customization: http://candv.readthedocs.org/en/latest/customization.html\n\n.. _hierarchies of constants: http://candv.readthedocs.org/en/latest/usage.html#hierarchies\n\n.. _MultipleChoiceField: https://docs.djangoproject.com/en/1.6/ref/forms/fields/#multiplechoicefield\n.. _TypedMultipleChoiceField: https://docs.djangoproject.com/en/1.6/ref/forms/fields/#typedmultiplechoicefield\n\n.. _issue #9: https://github.com/oblalex/django-candv-choices/issues/8\n.. _issue #8: https://github.com/oblalex/django-candv-choices/issues/8\n.. _issue #7: https://github.com/oblalex/django-candv-choices/issues/7\n.. _issue #6: https://github.com/oblalex/django-candv-choices/issues/6\n.. _issue #4: https://github.com/oblalex/django-candv-choices/issues/4\n.. _issue #1: https://github.com/oblalex/django-candv-choices/issues/1\n\n.. _1.1.5: https://github.com/oblalex/django-candv-choices/compare/v1.1.4...v1.1.5\n.. _1.1.4: https://github.com/oblalex/django-candv-choices/compare/v1.1.3...v1.1.4\n.. _1.1.3: https://github.com/oblalex/django-candv-choices/compare/v1.1.0...v1.1.3\n.. _1.1.0: https://github.com/oblalex/django-candv-choices/compare/v1.0.0...v1.1.0\n.. _1.0.0: https://github.com/oblalex/django-candv-choices/releases/tag/v1.0.0\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oblalex/django-candv-choices", "keywords": "choices,constants,Django,candv,values", "license": "LGPLv3", "maintainer": null, "maintainer_email": null, "name": "django-candv-choices", "package_url": "https://pypi.org/project/django-candv-choices/", "platform": "any", "project_url": "https://pypi.org/project/django-candv-choices/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/oblalex/django-candv-choices"}, "release_url": "https://pypi.org/project/django-candv-choices/1.1.5/", "requires_dist": null, "requires_python": null, "summary": "Use complex constants built with 'candv' library instead of standard 'choices' fields for 'Django' models.", "version": "1.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://badge.fury.io/py/django-candv-choices/\" rel=\"nofollow\"><img alt=\"Version of PyPI package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57180849ecbcf11735726aefaf74a70e11ad2f3e/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d63616e64762d63686f696365732e7376673f7374796c653d666c6174\"></a> <a href=\"https://crate.io/packages/django-candv-choices/\" rel=\"nofollow\"><img alt=\"Number of downloads of PyPI package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15b4d3646e76bcf3bf020dc753bf70c0368ce4f5/687474703a2f2f696d672e736869656c64732e696f2f707970692f646d2f646a616e676f2d63616e64762d63686f696365732e7376673f7374796c653d666c6174\"></a> <img alt=\"Supported versions of Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d882b568e30fd9342c57e5ae5c80bc5bfb34a8e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d322e372c332e342d627269676874677265656e2e7376673f7374796c653d666c6174\"> <a href=\"https://github.com/oblalex/django-candv-choices/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"Package license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f4a5ff984e4af0726458ef6c6de7d71493c849c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4c47504c76332d626c75652e7376673f7374796c653d666c6174\"></a></p>\n<p>Use complex constants built with <a href=\"http://candv.readthedocs.org/en/latest/\" rel=\"nofollow\">candv</a> library instead of standard\n<a href=\"https://docs.djangoproject.com/en/1.6/ref/models/fields/#django.db.models.Field.choices\" rel=\"nofollow\">choices</a> fields for <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> models.</p>\n<p>Try <a href=\"http://django-candv-choices.herokuapp.com/\" rel=\"nofollow\">online live demo</a>! Use\n<tt>demo</tt>/<tt>demo</tt> as login/pass for authentication.</p>\n<p><a href=\"http://django-candv-choices.herokuapp.com/\" rel=\"nofollow\"><img alt=\"Live demo screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bada5bb301f6ccce186145f8d5dddb54669d108c/687474703a2f2f692e696d6775722e636f6d2f4e584b736752412e706e67\"></a></p>\n<p><strong>Table of contents</strong></p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#installation\" id=\"id6\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#problem-overview\" id=\"id7\" rel=\"nofollow\">Problem overview</a></li>\n<li><a href=\"#solution\" id=\"id8\" rel=\"nofollow\">Solution</a></li>\n<li><a href=\"#caveats\" id=\"id9\" rel=\"nofollow\">Caveats</a></li>\n<li><a href=\"#things-to-think-about\" id=\"id10\" rel=\"nofollow\">Things to think about</a></li>\n<li><a href=\"#changelog\" id=\"id11\" rel=\"nofollow\">Changelog</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from <a href=\"https://pypi.python.org/pypi/django-candv-choices\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install django-candv-choices\n</pre>\n</div>\n<div id=\"problem-overview\">\n<h2>Problem overview</h2>\n<p>Well, you need to define some constant choices for your Django model field.\nLet\u2019s start from defining constants themselves:</p>\n<pre><span class=\"c1\"># constants.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"n\">AUTH_TYPE_BASIC</span> <span class=\"o\">=</span> <span class=\"s1\">'BASIC'</span>\n<span class=\"n\">AUTH_TYPE_DIGEST</span> <span class=\"o\">=</span> <span class=\"s1\">'DIGEST'</span>\n<span class=\"n\">AUTH_TYPE_CLIENT_CERT</span> <span class=\"o\">=</span> <span class=\"s1\">'CLIENT-CERT'</span>\n<span class=\"n\">AUTH_TYPE_FORM</span> <span class=\"o\">=</span> <span class=\"s1\">'FORM'</span>\n\n<span class=\"n\">AUTH_TYPES</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"n\">AUTH_TYPE_BASIC</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"HTTP Basic Authentication\"</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"n\">AUTH_TYPE_DIGEST</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"HTTP Digest Authentication \"</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"n\">AUTH_TYPE_CLIENT_CERT</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"HTTPS Client Authentication \"</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"n\">AUTH_TYPE_FORM</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Form Based Authentication \"</span><span class=\"p\">)),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Here we define constant names and attach verbose names to them. Bloated\ndefinition, no docstring for constants group, no docstings per constant. What\nif you need to define some help text per constant? 4 more definitions? Well,\nthen just imagine, how you will attach them. And what about other attributes?\nAnd what about adding some methods for constants? How about getting constant by\nits name? By value? And how about performing some operations on the whole\nconstants group?</p>\n<p>Only at this point you may end up with one big module which will work only with\none group of constants. And this work will be a big pain.</p>\n<p>But OK, let\u2019s go further and define some DB model field:</p>\n<pre><span class=\"c1\"># models.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"n\">constants</span> <span class=\"kn\">import</span> <span class=\"nn\">AUTH_TYPES</span><span class=\"o\">,</span> <span class=\"nn\">AUTH_TYPE_BASIC</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Request</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n    <span class=\"n\">auth_type</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Auth type\"</span><span class=\"p\">),</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Example of default constants\"</span><span class=\"p\">),</span>\n        <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">AUTH_TYPES</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">11</span><span class=\"p\">,</span>\n        <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">AUTH_TYPE_BASIC</span><span class=\"p\">)</span>\n</pre>\n<p>3 things to mention here:</p>\n<ul>\n<li>you have to import constant group itself;</li>\n<li>you may have to import dafault value too;</li>\n<li>you need go back to constants definition, iterate over each constant,\ncalculate its length and select the longest value to pass it as\n<tt>max_length</tt> argument. And don\u2019t try to make a mistake, or you will be\npunished otherwise.</li>\n</ul>\n<p>I use <tt>CharField</tt> here intentionally. It can be good to use <tt>IntegerField</tt>,\n<tt>PositiveSmallIntegerField</tt> and so on, but it is very probable that you will\nbe willing someone to kill you due to hidden bugs.</p>\n<p>Now it\u2019s showtime! Let\u2019s render our field:</p>\n<pre><span class=\"x\">&lt;ul&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">r</span> <span class=\"k\">in</span> <span class=\"nv\">requests</span> <span class=\"cp\">%}</span><span class=\"x\">\n  &lt;li&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">r.auth_type</span> <span class=\"cp\">}}</span><span class=\"x\">&lt;/li&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span><span class=\"x\">\n&lt;/ul&gt;</span>\n</pre>\n<p>What do you see? <tt>BASIC</tt>, <tt>DIGEST</tt>, <tt>FORM</tt>, etc. Oops! How to get our\nhuman messages like <tt>HTTP Basic Authentication</tt>?</p>\n<p>You need to convert constants group to <tt>dict</tt> and pass it to template\u2019s\ncontext! But wait, this is not the end. You can not access dict values directly\nwithin templates. You need to create a library of template tags, register a\nfilter and load the library to template:</p>\n<pre><span class=\"c1\"># templatetags/custom_tags.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n<span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Library</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">filter</span>\n<span class=\"k\">def</span> <span class=\"nf\">lookup</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">custom_tags</span> <span class=\"cp\">%}</span><span class=\"x\">\n&lt;ul&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">r</span> <span class=\"k\">in</span> <span class=\"nv\">requests</span> <span class=\"cp\">%}</span><span class=\"x\">\n  &lt;li&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">AUTH_TYPES</span><span class=\"o\">|</span><span class=\"nf\">lookup</span><span class=\"o\">:</span><span class=\"nv\">r.auth_type</span> <span class=\"cp\">}}</span><span class=\"x\">&lt;/li&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span><span class=\"x\">\n&lt;/ul&gt;</span>\n</pre>\n<p>This is madness!</p>\n</div>\n<div id=\"solution\">\n<h2>Solution</h2>\n<p>The solution is to use <a href=\"http://candv.readthedocs.org/en/latest/\" rel=\"nofollow\">candv</a> and this library. The former allows you to\ndefine stand-alone groups of complex constants and latter allows you to use\nthose constants as choises.</p>\n<p>Let\u2019s examine some simple example and define some constants:</p>\n<pre><span class=\"c1\"># constants.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">candv</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleConstant</span><span class=\"p\">,</span> <span class=\"n\">Constants</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">METHOD_TYPE</span><span class=\"p\">(</span><span class=\"n\">Constants</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Available HTTP methods.\n    \"\"\"</span>\n    <span class=\"n\">GET</span> <span class=\"o\">=</span> <span class=\"n\">SimpleConstant</span><span class=\"p\">()</span>\n    <span class=\"n\">PUT</span> <span class=\"o\">=</span> <span class=\"n\">SimpleConstant</span><span class=\"p\">()</span>\n    <span class=\"n\">POST</span> <span class=\"o\">=</span> <span class=\"n\">SimpleConstant</span><span class=\"p\">()</span>\n    <span class=\"n\">DELETE</span> <span class=\"o\">=</span> <span class=\"n\">SimpleConstant</span><span class=\"p\">()</span>\n    <span class=\"n\">TRACE</span> <span class=\"o\">=</span> <span class=\"n\">SimpleConstant</span><span class=\"p\">()</span>\n</pre>\n<p>Here we defined a group of constants with no attributes. Looks pretty, let\u2019s\nuse it:</p>\n<pre><span class=\"c1\"># models.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">candv_x.django.choices</span> <span class=\"kn\">import</span> <span class=\"n\">ChoicesField</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"n\">constants</span> <span class=\"kn\">import</span> <span class=\"nn\">METHOD_TYPE</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Request</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n    <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"n\">ChoicesField</span><span class=\"p\">(</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"method\"</span><span class=\"p\">),</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Example of simple candv constants\"</span><span class=\"p\">),</span>\n        <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">METHOD_TYPE</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>That\u2019s all. You can pass some default value if you want,\ne.g. <tt>default=METHOD_TYPE.GET</tt>.</p>\n<p>Now you can render it:</p>\n<pre><span class=\"x\">&lt;ul&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">r</span> <span class=\"k\">in</span> <span class=\"nv\">requests</span> <span class=\"cp\">%}</span><span class=\"x\">\n  &lt;li&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">r.method.name</span> <span class=\"cp\">}}</span><span class=\"x\">&lt;/li&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span><span class=\"x\">\n&lt;/ul&gt;</span>\n</pre>\n<p>The output will contain <tt>GET</tt>, <tt>PUT</tt>, <tt>POST</tt>, etc. Want more? Let\u2019s add\nvalues, verbose names and help texts:</p>\n<pre><span class=\"c1\"># constants.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">candv</span> <span class=\"kn\">import</span> <span class=\"n\">VerboseValueConstant</span><span class=\"p\">,</span> <span class=\"n\">Values</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RESULT_TYPE</span><span class=\"p\">(</span><span class=\"n\">Values</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Possible operation results.\n    \"\"\"</span>\n    <span class=\"n\">SUCCESS</span> <span class=\"o\">=</span> <span class=\"n\">VerboseValueConstant</span><span class=\"p\">(</span>\n        <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">'2C7517'</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Success\"</span><span class=\"p\">),</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Yay! Everything is good!\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">FAILURE</span> <span class=\"o\">=</span> <span class=\"n\">VerboseValueConstant</span><span class=\"p\">(</span>\n        <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">'A30D0D'</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Failure\"</span><span class=\"p\">),</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Oops! Something went wrong!\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">PENDING</span> <span class=\"o\">=</span> <span class=\"n\">VerboseValueConstant</span><span class=\"p\">(</span>\n        <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">'E09F26'</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Pending\"</span><span class=\"p\">),</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Still waiting for the task to complete...\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<blockquote>\nPlease, refer to <a href=\"http://candv.readthedocs.org/en/latest/usage.html#usage\" rel=\"nofollow\">candv usage</a> to learn how to define and use constants.\nYou may find <a href=\"http://candv.readthedocs.org/en/latest/customization.html\" rel=\"nofollow\">candv customization</a> useful too.</blockquote>\n<p>Here we have used <a href=\"http://candv.readthedocs.org/en/latest/candv.html#candv.Values\" rel=\"nofollow\">Values</a> as container and <a href=\"http://candv.readthedocs.org/en/latest/candv.html#candv.VerboseValueConstant\" rel=\"nofollow\">VerboseValueConstant</a> as class\nfor items. Each constant has a <tt>name</tt> (e.g. <tt>SUCCESS</tt>), a value, a verbose\ntext and a help text. All of this you can access directly from everywhere.</p>\n<p>Field definition does not differ much from previous:</p>\n<pre><span class=\"c1\"># models.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">candv_x.django.choices</span> <span class=\"kn\">import</span> <span class=\"n\">ChoicesField</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"n\">constants</span> <span class=\"kn\">import</span> <span class=\"nn\">RESULT_TYPE</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Request</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ChoicesField</span><span class=\"p\">(</span>\n            <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"result\"</span><span class=\"p\">),</span>\n            <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Example of complex candv constants with verbose names, \"</span>\n                        <span class=\"s2\">\"help texts and inner values\"</span><span class=\"p\">),</span>\n            <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">RESULT_TYPE</span><span class=\"p\">,</span>\n            <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">RESULT_TYPE</span><span class=\"o\">.</span><span class=\"n\">SUCCESS</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n</pre>\n<p>You may use <tt>blank=True</tt> if you wish, there\u2019s no problem. Let\u2019s output our\ndata:</p>\n<pre><span class=\"x\">&lt;table&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">r</span> <span class=\"k\">in</span> <span class=\"nv\">requests</span> <span class=\"cp\">%}</span><span class=\"x\">\n  &lt;tr&gt;\n    &lt;td style=\"color: #</span><span class=\"cp\">{{</span> <span class=\"nv\">r.result.value</span> <span class=\"cp\">}}</span><span class=\"x\">;\" title=\"</span><span class=\"cp\">{{</span> <span class=\"nv\">r.result.help_text</span> <span class=\"cp\">}}</span><span class=\"x\">\"&gt;\n      </span><span class=\"cp\">{{</span> <span class=\"nv\">r.result.verbose_name</span> <span class=\"cp\">}}</span><span class=\"x\">\n    &lt;/td&gt;\n  &lt;/tr&gt;\n</span><span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span><span class=\"x\">\n&lt;/table&gt;</span>\n</pre>\n<p>Not so hard, innit?</p>\n<p>You can pass any constants to <tt>ChoicesField</tt> from your old projects or\nexternal libraries. Enjoy!</p>\n</div>\n<div id=\"caveats\">\n<h2>Caveats</h2>\n<ul>\n<li>Django admin renders choices by converting them to strings. So,\n<tt>__str__</tt> and <tt>__unicode__</tt> methods will be automatically overriden for\nconstant items. It will return the name of the constant. By default,\nconstants in <tt>candv</tt> do not have those methods at all (I cannot find a\nreason why the should to), so it seems not to be a problem. Just be aware.</li>\n<li><tt>candv</tt> supports creating <a href=\"http://candv.readthedocs.org/en/latest/usage.html#hierarchies\" rel=\"nofollow\">hierarchies of constants</a>. If you have some\nreason to use them as choices for DB field, take into accout that choices\nwill be built only from top-level group of constants.</li>\n</ul>\n</div>\n<div id=\"things-to-think-about\">\n<h2>Things to think about</h2>\n<ul>\n<li>Django has <a href=\"https://docs.djangoproject.com/en/1.6/ref/forms/fields/#multiplechoicefield\" rel=\"nofollow\">MultipleChoiceField</a> and <a href=\"https://docs.djangoproject.com/en/1.6/ref/forms/fields/#typedmultiplechoicefield\" rel=\"nofollow\">TypedMultipleChoiceField</a>. I haven\u2019t\nused used them, but I think it can be useful to implement analogues for\n\u2018candv\u2019, especially for <tt>MultipleChoiceField</tt>.</li>\n<li>I think, there is a place to think about implementation of full support of\nhierarchies. Maybe it\u2019s possible to make some nested choices, or at least\nflatten them.</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p><em>You can click a version name to see a diff with the previous one.</em></p>\n<ul>\n<li><p><a href=\"https://github.com/oblalex/django-candv-choices/compare/v1.1.4...v1.1.5\" rel=\"nofollow\">1.1.5</a> (Aug 1, 2015)</p>\n<ul>\n<li>Fix usage of default values for migrations in Django &gt;= 1.7\n(<a href=\"https://github.com/oblalex/django-candv-choices/issues/8\" rel=\"nofollow\">issue #8</a>).</li>\n<li>Implement field serializer for restframework as a separate library\n<a href=\"https://github.com/oblalex/django-rf-candv-choices\" rel=\"nofollow\">django-rf-candv-choices</a> (<a href=\"https://github.com/oblalex/django-candv-choices/issues/8\" rel=\"nofollow\">issue #9</a>).</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/oblalex/django-candv-choices/compare/v1.1.3...v1.1.4\" rel=\"nofollow\">1.1.4</a> (Jul 2, 2015)</p>\n<ul>\n<li>Add support for Python 3 (<a href=\"https://github.com/oblalex/django-candv-choices/issues/6\" rel=\"nofollow\">issue #6</a>).</li>\n<li>Add support for migrations in Django &gt;= 1.7 (<a href=\"https://github.com/oblalex/django-candv-choices/issues/7\" rel=\"nofollow\">issue #7</a>).</li>\n<li>Imports which will become deprecated in Django 1.9 are not used now.</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/oblalex/django-candv-choices/compare/v1.1.0...v1.1.3\" rel=\"nofollow\">1.1.3</a> (Oct 11, 2014)</p>\n<ul>\n<li><tt>candv</tt> dependency updated up to <em>v1.2.0</em>.</li>\n<li>Add support for South (<a href=\"https://github.com/oblalex/django-candv-choices/issues/4\" rel=\"nofollow\">issue #4</a>).</li>\n<li>Choices\u2019 form field can display help text as option\u2019s title now\n(<a href=\"https://github.com/oblalex/django-candv-choices/issues/1\" rel=\"nofollow\">issue #1</a>).</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/oblalex/django-candv-choices/compare/v1.0.0...v1.1.0\" rel=\"nofollow\">1.1.0</a> (Jul 19, 2014)</p>\n<ul>\n<li>rename package to <tt>choices</tt> and move into <tt>candv_x.django</tt>\n(<tt>x</tt> stands for <tt>extensions</tt>)</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/oblalex/django-candv-choices/releases/tag/v1.0.0\" rel=\"nofollow\">1.0.0</a> (Jun 22, 2014)</p>\n<p>Initial version</p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1660082, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "14f85887554f520d2a566bfc2cd6e544", "sha256": "8d3c61d4ee9383bea0d951df15e7989830d503ec3caf62efde7c19d031b675b3"}, "downloads": -1, "filename": "django-candv-choices-1.0.0.tar.gz", "has_sig": false, "md5_digest": "14f85887554f520d2a566bfc2cd6e544", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8827, "upload_time": "2014-06-22T17:59:19", "upload_time_iso_8601": "2014-06-22T17:59:19.868462Z", "url": "https://files.pythonhosted.org/packages/6d/9e/0da1ad1f3f4e401909922060627dec4d2c22874ddb85e37f16118d1c57f2/django-candv-choices-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "7f5e8f80370eec8c85309cfe85b269d5", "sha256": "0adc87bddd7def319cbc3fdb5a8077bec5484d927eda4b171c8cf4852db135ef"}, "downloads": -1, "filename": "django-candv-choices-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7f5e8f80370eec8c85309cfe85b269d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9169, "upload_time": "2014-07-19T07:39:41", "upload_time_iso_8601": "2014-07-19T07:39:41.599056Z", "url": "https://files.pythonhosted.org/packages/8e/2a/c026b3d5fd7c67ebd76ff52140a9db50ca21329a64cdc3845a36a98a8016/django-candv-choices-1.1.0.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "0f1b3b23b5638f33010ca7cf53daf613", "sha256": "5660c83ba47f776bebd3617ee9e3a37a33f167452ebdb16535c4e98ff3ea98c7"}, "downloads": -1, "filename": "django-candv-choices-1.1.3.tar.gz", "has_sig": false, "md5_digest": "0f1b3b23b5638f33010ca7cf53daf613", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11221, "upload_time": "2014-10-12T15:06:39", "upload_time_iso_8601": "2014-10-12T15:06:39.833811Z", "url": "https://files.pythonhosted.org/packages/71/6a/1c404226298cc3f81cc96c496e29485adcc1377afdcb1ac5f75dfcdfec1e/django-candv-choices-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "5d832907278f7fc31634224f842848ff", "sha256": "3f123d0bafa73f19ebfd02a1877e954040e7cb995e2f2681761246a3231b8b44"}, "downloads": -1, "filename": "django-candv-choices-1.1.4.tar.gz", "has_sig": false, "md5_digest": "5d832907278f7fc31634224f842848ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11512, "upload_time": "2015-07-01T22:35:21", "upload_time_iso_8601": "2015-07-01T22:35:21.246993Z", "url": "https://files.pythonhosted.org/packages/17/5b/95255802a8f72dd3a8e1d7ef1b9a98860d7630445ddd86cd870223215484/django-candv-choices-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "7f2f882454b823e504024ead66c54c29", "sha256": "8a4c370753d9b8dbcc1894ba6a135bec0f7557b6e239d246fb32e9c4d5f6bfc9"}, "downloads": -1, "filename": "django-candv-choices-1.1.5.tar.gz", "has_sig": false, "md5_digest": "7f2f882454b823e504024ead66c54c29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11789, "upload_time": "2015-08-01T18:26:02", "upload_time_iso_8601": "2015-08-01T18:26:02.871545Z", "url": "https://files.pythonhosted.org/packages/05/a7/caf353015f9a9ee8c1188c927bf8e1b066f30e0627367e0888f30e9cb2f5/django-candv-choices-1.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f2f882454b823e504024ead66c54c29", "sha256": "8a4c370753d9b8dbcc1894ba6a135bec0f7557b6e239d246fb32e9c4d5f6bfc9"}, "downloads": -1, "filename": "django-candv-choices-1.1.5.tar.gz", "has_sig": false, "md5_digest": "7f2f882454b823e504024ead66c54c29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11789, "upload_time": "2015-08-01T18:26:02", "upload_time_iso_8601": "2015-08-01T18:26:02.871545Z", "url": "https://files.pythonhosted.org/packages/05/a7/caf353015f9a9ee8c1188c927bf8e1b066f30e0627367e0888f30e9cb2f5/django-candv-choices-1.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:16 2020"}