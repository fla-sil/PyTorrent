{"info": {"author": "sriolo", "author_email": "sriolo@raptus.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: ZODB", "Framework :: Zope2", "Framework :: Zope3", "Programming Language :: Python"], "description": "Introduction\n============\nTorii allows access to a running zope server over a unix-domain-socket. Torii makes it\nalso possible to run scripts from the command line on the server. In addition it provides \na python-prompt. That means full access to the Zope and ZODB at runtime.\n\n\nUsage\n=====\nIf you use the buildout-recipe, a shell-script is generated in buildout-directory/bin/torii.\nWhen the zope server is started, execute ./bin/torii in an other shell.\n\nOptions:\n--------\n\n:help:            print help text and exit\n                      \n:debug:           interactive mode\n                 \n:list:            summary-list of all available scripts\n\n:run <script>:    run the given script\n\n\nInstallation\n============\n\nThe simplest way to install torii is to use raptus.recipe.torii in the buildout for your project.\nThis will add the required information in the zope.conf and build a startup script. The recipe provides\ntwo buildout-variables. The first is named ${torii:additonal-conf} and holds the additional information\nfor the zope.conf. The second variable ${torii:eggs} is a list of all required eggs to add to the\npython-path. Like this torii can also be used for non-plone projects.\n\nOptions\n-------\nsocket-path\n    path of the unix-domain-socket to create\nthreaded\n    If true, torii creates a new thread for each connection.\n    Default is False (which blocks requests when torii is active)\nextends\n    additional-packages for extending torii. e.g. raptus.troii.plone\nparams\n    additional-parameters required for extending packages.\n    notation: key:value;key:value or key:value'newline'key:value\n\nExample\n-------\n::\n\n    [buildout]\n    parts =\n        torii\n        ...(other parts)...\n\n    [torii]\n    recipe = raptus.recipe.torii\n    socket-path = ${buildout:directory}/var/torii.sock\n    threaded = True\n    extends =\n        raptus.torii.plone\n        raptus.torii.ipython\n    params =\n        plone-location:test.plone\n\n    [instance]\n    recipe = plone.recipe.zope2instance\n    zope-conf-additional = ${torii:additional-conf}\n    eggs =\n        ...(other eggs)...\n        ${buildout:eggs}\n        ${torii:eggs}\n        ...\n\n    or\n\n    [instance]\n    recipe = plone.recipe.zope2instance\n    zope-conf-additional = \n        <zodb_db myproject>\n          mount-point /myproject\n          <filestorage>\n            path ${buildout:directory}/var/filestorage/myproject-prod.fs\n            blob-dir ${buildout:directory}/var/blobstorage/prod\n          </filestorage>\n        </zodb_db>\n        ${torii:additional-conf}\n    eggs =\n        ...(other eggs)...\n        ${buildout:eggs}\n        ${torii:eggs}\n        ...\n\n\nAdditional components\n=====================\n\nraptus.torii.plone\n    This additional package offers the interface to plone. It provides some scripts,\n    a global variable 'plone' and sets the siteManager(access to persistence zope.components )\n    at startup time.\n\nraptus.torii.ipython\n    An implementation of ipython. Code-completion, readline and colored python prompt.\n\n\nCreate new additional components\n================================\n\nTorii is pluggable. If you write a package, use the following attributes. These attributes \nare stored in your module (__init__.py) and by each connection they are read by torii.\n\nutilities = dict(name=method)\n    utilities are a set of helper functions. They will appear as globals\n    in your python prompt. The globals can be extended with additional\n    packages. To extend take a look in raptus.torii.plone.\n\nproperties = dict(name=method)\n    properties are a set of helper attributes. Similar to the utilities, but\n    properties are called by each connection. The call of the function is performed\n    in the context of the connection. This means you can use local attributes\n    in your function, like app, arguments ... Only the return value is stored \n    in the globals. To extend, take a look in raptus.torii.plone.\n\nscripts = dict(name=path)\n    scripts can be run directly without the python prompt over torii. It's\n    easy to build you own scripts. Again please take a look\n    at raptus.torii.plone\n\ninterpreter = Python\n    The standard python interpreter. To create your own interpreter, subclass\n    interpreter.AbstractInterpreter and override all methods. Take a look at\n    raptus.torii.python and raptus.torii.ipython.ipython\n\n\nExamples\n========\n\nChange the front-page text on the plonesite::\n\n    # ./bin/torii debug\n    Available global variables:\n    conversation\n    ls\n    app\n    sdir\n    plone\n    arguments\n    \n    In [1]: frontpage = plone['front-page']\n    \n    In [2]: frontpage.setText('The power of torii')\n    \n    In [3]: import transaction\n    \n    In [4]: transaction.commit()\n\nGet all plone users::\n    \n    In [5]: plone.acl_users.getUsers()\n    Out[5]: [<PloneUser 'dagobert_duck'>, <PloneUser 'donald_duck'>]\n\n\nTests\n=====\nCurrently, there are no automated tests (yet). This project was created on SnowLeopard\nand was running on plone 3 and plone 4.\n\n\nCopyright and credits\n=====================\n\nraptus.torii is copyright 2010 by raptus_ , and is licensed under the GPL. \nSee LICENSE.txt for details.\n\n.. _raptus: http://www.raptus.com/ \n\n\n\nChangelog\n=========\n\n1.0a2 (2011-3-11)\n-------------------\n\n- fixed error in ubuntu that had cpu run at 100% usage\n\n1.0a1 (2010-10-24)\n-------------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/raptus.torii", "keywords": "zope remote prompt zodb", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "raptus.torii", "package_url": "https://pypi.org/project/raptus.torii/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/raptus.torii/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective/raptus.torii"}, "release_url": "https://pypi.org/project/raptus.torii/1.0b2/", "requires_dist": null, "requires_python": null, "summary": "Torii allows access to a running zope instance over a python prompt", "version": "1.0b2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Torii allows access to a running zope server over a unix-domain-socket. Torii makes it\nalso possible to run scripts from the command line on the server. In addition it provides\na python-prompt. That means full access to the Zope and ZODB at runtime.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>If you use the buildout-recipe, a shell-script is generated in buildout-directory/bin/torii.\nWhen the zope server is started, execute ./bin/torii in an other shell.</p>\n<div id=\"options\">\n<h3>Options:</h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>help:</th><td>print help text and exit</td>\n</tr>\n<tr><th>debug:</th><td>interactive mode</td>\n</tr>\n<tr><th>list:</th><td>summary-list of all available scripts</td>\n</tr>\n<tr><th>run &lt;script&gt;:</th><td>run the given script</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The simplest way to install torii is to use raptus.recipe.torii in the buildout for your project.\nThis will add the required information in the zope.conf and build a startup script. The recipe provides\ntwo buildout-variables. The first is named ${torii:additonal-conf} and holds the additional information\nfor the zope.conf. The second variable ${torii:eggs} is a list of all required eggs to add to the\npython-path. Like this torii can also be used for non-plone projects.</p>\n<div id=\"id1\">\n<h3>Options</h3>\n<dl>\n<dt>socket-path</dt>\n<dd>path of the unix-domain-socket to create</dd>\n<dt>threaded</dt>\n<dd>If true, torii creates a new thread for each connection.\nDefault is False (which blocks requests when torii is active)</dd>\n<dt>extends</dt>\n<dd>additional-packages for extending torii. e.g. raptus.troii.plone</dd>\n<dt>params</dt>\n<dd>additional-parameters required for extending packages.\nnotation: key:value;key:value or key:value\u2019newline\u2019key:value</dd>\n</dl>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<pre>[buildout]\nparts =\n    torii\n    ...(other parts)...\n\n[torii]\nrecipe = raptus.recipe.torii\nsocket-path = ${buildout:directory}/var/torii.sock\nthreaded = True\nextends =\n    raptus.torii.plone\n    raptus.torii.ipython\nparams =\n    plone-location:test.plone\n\n[instance]\nrecipe = plone.recipe.zope2instance\nzope-conf-additional = ${torii:additional-conf}\neggs =\n    ...(other eggs)...\n    ${buildout:eggs}\n    ${torii:eggs}\n    ...\n\nor\n\n[instance]\nrecipe = plone.recipe.zope2instance\nzope-conf-additional =\n    &lt;zodb_db myproject&gt;\n      mount-point /myproject\n      &lt;filestorage&gt;\n        path ${buildout:directory}/var/filestorage/myproject-prod.fs\n        blob-dir ${buildout:directory}/var/blobstorage/prod\n      &lt;/filestorage&gt;\n    &lt;/zodb_db&gt;\n    ${torii:additional-conf}\neggs =\n    ...(other eggs)...\n    ${buildout:eggs}\n    ${torii:eggs}\n    ...\n</pre>\n</div>\n</div>\n<div id=\"additional-components\">\n<h2>Additional components</h2>\n<dl>\n<dt>raptus.torii.plone</dt>\n<dd>This additional package offers the interface to plone. It provides some scripts,\na global variable \u2018plone\u2019 and sets the siteManager(access to persistence zope.components )\nat startup time.</dd>\n<dt>raptus.torii.ipython</dt>\n<dd>An implementation of ipython. Code-completion, readline and colored python prompt.</dd>\n</dl>\n</div>\n<div id=\"create-new-additional-components\">\n<h2>Create new additional components</h2>\n<p>Torii is pluggable. If you write a package, use the following attributes. These attributes\nare stored in your module (__init__.py) and by each connection they are read by torii.</p>\n<dl>\n<dt>utilities = dict(name=method)</dt>\n<dd>utilities are a set of helper functions. They will appear as globals\nin your python prompt. The globals can be extended with additional\npackages. To extend take a look in raptus.torii.plone.</dd>\n<dt>properties = dict(name=method)</dt>\n<dd>properties are a set of helper attributes. Similar to the utilities, but\nproperties are called by each connection. The call of the function is performed\nin the context of the connection. This means you can use local attributes\nin your function, like app, arguments \u2026 Only the return value is stored\nin the globals. To extend, take a look in raptus.torii.plone.</dd>\n<dt>scripts = dict(name=path)</dt>\n<dd>scripts can be run directly without the python prompt over torii. It\u2019s\neasy to build you own scripts. Again please take a look\nat raptus.torii.plone</dd>\n<dt>interpreter = Python</dt>\n<dd>The standard python interpreter. To create your own interpreter, subclass\ninterpreter.AbstractInterpreter and override all methods. Take a look at\nraptus.torii.python and raptus.torii.ipython.ipython</dd>\n</dl>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Change the front-page text on the plonesite:</p>\n<pre># ./bin/torii debug\nAvailable global variables:\nconversation\nls\napp\nsdir\nplone\narguments\n\nIn [1]: frontpage = plone['front-page']\n\nIn [2]: frontpage.setText('The power of torii')\n\nIn [3]: import transaction\n\nIn [4]: transaction.commit()\n</pre>\n<p>Get all plone users:</p>\n<pre>In [5]: plone.acl_users.getUsers()\nOut[5]: [&lt;PloneUser 'dagobert_duck'&gt;, &lt;PloneUser 'donald_duck'&gt;]\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Currently, there are no automated tests (yet). This project was created on SnowLeopard\nand was running on plone 3 and plone 4.</p>\n</div>\n<div id=\"copyright-and-credits\">\n<h2>Copyright and credits</h2>\n<p>raptus.torii is copyright 2010 by <a href=\"http://www.raptus.com/\" rel=\"nofollow\">raptus</a> , and is licensed under the GPL.\nSee LICENSE.txt for details.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"a2-2011-3-11\">\n<h3>1.0a2 (2011-3-11)</h3>\n<ul>\n<li>fixed error in ubuntu that had cpu run at 100% usage</li>\n</ul>\n</div>\n<div id=\"a1-2010-10-24\">\n<h3>1.0a1 (2010-10-24)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 798538, "releases": {"1.0b1": [{"comment_text": "", "digests": {"md5": "96c9dc2a6bdd568c0d8233569374c33e", "sha256": "532b6ea8ee9894098fab5ead6afaca4baa4eb9041619acec26d4b2ce234d8854"}, "downloads": -1, "filename": "raptus.torii-1.0b1.tar.gz", "has_sig": false, "md5_digest": "96c9dc2a6bdd568c0d8233569374c33e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16060, "upload_time": "2010-10-27T19:00:15", "upload_time_iso_8601": "2010-10-27T19:00:15.623059Z", "url": "https://files.pythonhosted.org/packages/4b/50/0c473522366d9e280d9a2a8670fe9bc04c76a04030b6327fb7a0979b89a8/raptus.torii-1.0b1.tar.gz", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "cd2dd246b0498e8b7f67a1e7956423bc", "sha256": "17572547f91f5b058fd1e174a9216d85c80aaff16437499a986dbcc6f9807ba7"}, "downloads": -1, "filename": "raptus.torii-1.0b2.tar.gz", "has_sig": false, "md5_digest": "cd2dd246b0498e8b7f67a1e7956423bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16136, "upload_time": "2012-03-27T23:11:20", "upload_time_iso_8601": "2012-03-27T23:11:20.894609Z", "url": "https://files.pythonhosted.org/packages/e8/bc/4abbd874f9ebfa2180c7ce669d5a1f934d9c2257479068d910c19519009a/raptus.torii-1.0b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd2dd246b0498e8b7f67a1e7956423bc", "sha256": "17572547f91f5b058fd1e174a9216d85c80aaff16437499a986dbcc6f9807ba7"}, "downloads": -1, "filename": "raptus.torii-1.0b2.tar.gz", "has_sig": false, "md5_digest": "cd2dd246b0498e8b7f67a1e7956423bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16136, "upload_time": "2012-03-27T23:11:20", "upload_time_iso_8601": "2012-03-27T23:11:20.894609Z", "url": "https://files.pythonhosted.org/packages/e8/bc/4abbd874f9ebfa2180c7ce669d5a1f934d9c2257479068d910c19519009a/raptus.torii-1.0b2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:19 2020"}