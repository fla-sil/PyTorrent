{"info": {"author": "RedisLabs", "author_email": "oss@redislabs.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Database"], "description": "[![license](https://img.shields.io/github/license/RedisJSON/RedisJSON-py.svg)](https://github.com/RedisJSON/redisjson-py/blob/master/LICENSE)\n[![CircleCI](https://circleci.com/gh/RedisJSON/redisjson-py/tree/master.svg?style=svg)](https://circleci.com/gh/RedisJSON/redisjson-py/tree/master)\n[![pypi](https://badge.fury.io/py/rejson.svg)](https://badge.fury.io/py/rejson)\n[![PyVersions](https://img.shields.io/pypi/pyversions/rejson.svg)](https://github.com/RedisJSON/redisjson-py)\n[![GitHub issues](https://img.shields.io/github/release/RedisJSON/redisjson-py.svg)](https://github.com/RedisJSON/redisjson-py/releases/latest)\n[![Codecov](https://coveralls.io/repos/github/RedisLabs/rejson-py/badge.svg?branch=master)](https://coveralls.io/github/RedisLabs/rejson-py?branch=master)\n\n# RedisJSON Python Client\n\n[![Mailing List](https://img.shields.io/badge/Mailing%20List-RedisJSON-blue)](https://groups.google.com/forum/#!forum/redisjson)\n[![Gitter](https://badges.gitter.im/RedisLabs/RedisJSON.svg)](https://gitter.im/RedisLabs/RedisJSON?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n    \nrejson-py is a package that allows storing, updating and querying objects as\nJSON documents in a [Redis](https://redis.io) database that is extended with the\n[ReJSON module](https://github.com/redislabsmodules/rejson). The package extends\n[redis-py](https://github.com/andymccurdy/redis-py)'s interface with ReJSON's\nAPI, and performs on-the-fly serialization/deserialization of objects to/from\nJSON.\n\n## Installation\n\n```bash\n$ pip install rejson\n```\n\n## Usage example\n\n```python\n   from rejson import Client, Path\n\n   rj = Client(host='localhost', port=6379, decode_responses=True)\n\n   # Set the key `obj` to some object\n   obj = {\n       'answer': 42,\n       'arr': [None, True, 3.14],\n       'truth': {\n           'coord': 'out there'\n       }\n   }\n   rj.jsonset('obj', Path.rootPath(), obj)\n\n   # Get something\n   print 'Is there anybody... {}?'.format(\n       rj.jsonget('obj', Path('.truth.coord'))\n   )\n\n   # Delete something (or perhaps nothing), append something and pop it\n   rj.jsondel('obj', Path('.arr[0]'))\n   rj.jsonarrappend('obj', Path('.arr'), 'something')\n   print '{} popped!'.format(rj.jsonarrpop('obj', Path('.arr')))\n\n   # Update something else\n   rj.jsonset('obj', Path('.answer'), 2.17)\n\n   # And use just like the regular redis-py client\n   jp = rj.pipeline()\n   jp.set('foo', 'bar')\n   jp.jsonset('baz', Path.rootPath(), 'qaz')\n   jp.execute()\n\n   # If you use non-ascii character in your JSON data, you can add the no_escape flag to JSON.GET command\n   obj_non_ascii = {\n     'non_ascii_string': 'hyv\u00e4\u00e4'\n   }\n   rj.jsonset('non-ascii', Path.rootPath(), obj_non_ascii)\n   print '{} is a non-ascii string'.format(rj.jsonget('non-ascii', Path('.non_ascii_string'), no_escape=True))\n```\n\n## Encoding/Decoding\n\nrejson-py uses Python's [json](https://docs.python.org/2/library/json.html).\nThe client can be set to use custom encoders/decoders at creation, or by calling\nexplicitly the [setEncoder()](./API.md#setencoder) and\n[setDecoder()](./API.md#setencoder) methods, respectively.\n\nThe following shows how to use this for a custom class that's stored as\na JSON string for example:\n\n```python\n\n   from json import JSONEncoder, JSONDecoder\n   from rejson import Client\n\n   class CustomClass(object):\n       \"Some non-JSON-serializable\"\n       def __init__(self, s=None):\n           if s is not None:\n               # deserialize the instance from the serialization\n               if s.startswith('CustomClass:'):\n                   ...\n               else:\n                   raise Exception('unknown format')\n           else:\n               # initialize the instance\n               ...\n\n       def __str__(self):\n           _str = 'CustomClass:'\n           # append the instance's state to the serialization\n           ...\n           return _str\n\n       ...\n\n   class CustomEncoder(JSONEncoder):\n       \"A custom encoder for the custom class\"\n       def default(self, obj):\n           if isinstance(obj, CustomClass):\n               return str(obj)\n           return json.JSONEncoder.encode(self, obj)\n\n   class TestDecoder(JSONDecoder):\n       \"A custom decoder for the custom class\"\n       def decode(self, obj):\n           d = json.JSONDecoder.decode(self, obj)\n           if isinstance(d, basestring) and d.startswith('CustomClass:'):\n               return CustomClass(d)\n           return d\n\n   # Create a new instance of CustomClass\n   obj = CustomClass()\n\n   # Create a new client with the custom encoder and decoder\n   rj = Client(encoder=CustomEncoder(), decoder=CustomDecoder())\n\n   # Store the object\n   rj.jsonset('custom', Path.rootPath(), obj))\n\n   # Retrieve it\n   obj = rj.jsonget('custom', Path.rootPath())\n```\n\n## API\n\nAs rejson-py exposes the same methods as redis-py, it can be used as a drop-in\nreplacement. On top of Redis' core commands, the client also adds ReJSON's\nvocabulary and a couple of helper methods. These are documented in the\n[API.md](API.md) file, which can be generated by running:\n\n```bash\n$ python gendoc rejson > API.md\n```\n\nFor complete documentation about ReJSON's commands, refer to [ReJSON's website](http://rejson.io).\n\n## License\n\n[BSD 2-Clause](https://github.com/RedisLabs/rejson-py/blob/master/LICENSE)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/RedisLabs/rejson-py", "keywords": "Redis JSON Extension", "license": "", "maintainer": "", "maintainer_email": "", "name": "rejson", "package_url": "https://pypi.org/project/rejson/", "platform": "", "project_url": "https://pypi.org/project/rejson/", "project_urls": {"Homepage": "http://github.com/RedisLabs/rejson-py"}, "release_url": "https://pypi.org/project/rejson/0.5.4/", "requires_dist": null, "requires_python": "", "summary": "ReJSON Python Client", "version": "0.5.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/RedisJSON/redisjson-py/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e61d7e54af99fd34ff6fbd293d330918d76fb2c0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f52656469734a534f4e2f52656469734a534f4e2d70792e737667\"></a>\n<a href=\"https://circleci.com/gh/RedisJSON/redisjson-py/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de75ea75331d168cd5e2c78cf8e9d70fa1957506/68747470733a2f2f636972636c6563692e636f6d2f67682f52656469734a534f4e2f72656469736a736f6e2d70792f747265652f6d61737465722e7376673f7374796c653d737667\"></a>\n<a href=\"https://badge.fury.io/py/rejson\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c53042f22e9174abe60dea56981dddd370f43de6/68747470733a2f2f62616467652e667572792e696f2f70792f72656a736f6e2e737667\"></a>\n<a href=\"https://github.com/RedisJSON/redisjson-py\" rel=\"nofollow\"><img alt=\"PyVersions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d7f66619fc74a4c5afda7d09dc33c442aa4d06a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72656a736f6e2e737667\"></a>\n<a href=\"https://github.com/RedisJSON/redisjson-py/releases/latest\" rel=\"nofollow\"><img alt=\"GitHub issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e930326671b9b56d27a09fc07d807a2ada15d68/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f52656469734a534f4e2f72656469736a736f6e2d70792e737667\"></a>\n<a href=\"https://coveralls.io/github/RedisLabs/rejson-py?branch=master\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc988fa51ae92982043734cc4d047d73865aba82/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f52656469734c6162732f72656a736f6e2d70792f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>RedisJSON Python Client</h1>\n<p><a href=\"https://groups.google.com/forum/#!forum/redisjson\" rel=\"nofollow\"><img alt=\"Mailing List\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a22fa7201769f02903d62c60abb4e1498795a9bb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d61696c696e672532304c6973742d52656469734a534f4e2d626c7565\"></a>\n<a href=\"https://gitter.im/RedisLabs/RedisJSON?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge\" rel=\"nofollow\"><img alt=\"Gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5888182cff06d0a4c0bf24d6f4ae274a2e98cd14/68747470733a2f2f6261646765732e6769747465722e696d2f52656469734c6162732f52656469734a534f4e2e737667\"></a></p>\n<p>rejson-py is a package that allows storing, updating and querying objects as\nJSON documents in a <a href=\"https://redis.io\" rel=\"nofollow\">Redis</a> database that is extended with the\n<a href=\"https://github.com/redislabsmodules/rejson\" rel=\"nofollow\">ReJSON module</a>. The package extends\n<a href=\"https://github.com/andymccurdy/redis-py\" rel=\"nofollow\">redis-py</a>'s interface with ReJSON's\nAPI, and performs on-the-fly serialization/deserialization of objects to/from\nJSON.</p>\n<h2>Installation</h2>\n<pre>$ pip install rejson\n</pre>\n<h2>Usage example</h2>\n<pre>   <span class=\"kn\">from</span> <span class=\"nn\">rejson</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">Path</span>\n\n   <span class=\"n\">rj</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">6379</span><span class=\"p\">,</span> <span class=\"n\">decode_responses</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n   <span class=\"c1\"># Set the key `obj` to some object</span>\n   <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'answer'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n       <span class=\"s1\">'arr'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mf\">3.14</span><span class=\"p\">],</span>\n       <span class=\"s1\">'truth'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n           <span class=\"s1\">'coord'</span><span class=\"p\">:</span> <span class=\"s1\">'out there'</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">jsonset</span><span class=\"p\">(</span><span class=\"s1\">'obj'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">rootPath</span><span class=\"p\">(),</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n\n   <span class=\"c1\"># Get something</span>\n   <span class=\"nb\">print</span> <span class=\"s1\">'Is there anybody... </span><span class=\"si\">{}</span><span class=\"s1\">?'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n       <span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">jsonget</span><span class=\"p\">(</span><span class=\"s1\">'obj'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'.truth.coord'</span><span class=\"p\">))</span>\n   <span class=\"p\">)</span>\n\n   <span class=\"c1\"># Delete something (or perhaps nothing), append something and pop it</span>\n   <span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">jsondel</span><span class=\"p\">(</span><span class=\"s1\">'obj'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'.arr[0]'</span><span class=\"p\">))</span>\n   <span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">jsonarrappend</span><span class=\"p\">(</span><span class=\"s1\">'obj'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'.arr'</span><span class=\"p\">),</span> <span class=\"s1\">'something'</span><span class=\"p\">)</span>\n   <span class=\"nb\">print</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> popped!'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">jsonarrpop</span><span class=\"p\">(</span><span class=\"s1\">'obj'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'.arr'</span><span class=\"p\">)))</span>\n\n   <span class=\"c1\"># Update something else</span>\n   <span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">jsonset</span><span class=\"p\">(</span><span class=\"s1\">'obj'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'.answer'</span><span class=\"p\">),</span> <span class=\"mf\">2.17</span><span class=\"p\">)</span>\n\n   <span class=\"c1\"># And use just like the regular redis-py client</span>\n   <span class=\"n\">jp</span> <span class=\"o\">=</span> <span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">pipeline</span><span class=\"p\">()</span>\n   <span class=\"n\">jp</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n   <span class=\"n\">jp</span><span class=\"o\">.</span><span class=\"n\">jsonset</span><span class=\"p\">(</span><span class=\"s1\">'baz'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">rootPath</span><span class=\"p\">(),</span> <span class=\"s1\">'qaz'</span><span class=\"p\">)</span>\n   <span class=\"n\">jp</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n\n   <span class=\"c1\"># If you use non-ascii character in your JSON data, you can add the no_escape flag to JSON.GET command</span>\n   <span class=\"n\">obj_non_ascii</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"s1\">'non_ascii_string'</span><span class=\"p\">:</span> <span class=\"s1\">'hyv\u00e4\u00e4'</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">jsonset</span><span class=\"p\">(</span><span class=\"s1\">'non-ascii'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">rootPath</span><span class=\"p\">(),</span> <span class=\"n\">obj_non_ascii</span><span class=\"p\">)</span>\n   <span class=\"nb\">print</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> is a non-ascii string'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">jsonget</span><span class=\"p\">(</span><span class=\"s1\">'non-ascii'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'.non_ascii_string'</span><span class=\"p\">),</span> <span class=\"n\">no_escape</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre>\n<h2>Encoding/Decoding</h2>\n<p>rejson-py uses Python's <a href=\"https://docs.python.org/2/library/json.html\" rel=\"nofollow\">json</a>.\nThe client can be set to use custom encoders/decoders at creation, or by calling\nexplicitly the <a href=\"./API.md#setencoder\" rel=\"nofollow\">setEncoder()</a> and\n<a href=\"./API.md#setencoder\" rel=\"nofollow\">setDecoder()</a> methods, respectively.</p>\n<p>The following shows how to use this for a custom class that's stored as\na JSON string for example:</p>\n<pre>   <span class=\"kn\">from</span> <span class=\"nn\">json</span> <span class=\"kn\">import</span> <span class=\"n\">JSONEncoder</span><span class=\"p\">,</span> <span class=\"n\">JSONDecoder</span>\n   <span class=\"kn\">from</span> <span class=\"nn\">rejson</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">CustomClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n       <span class=\"s2\">\"Some non-JSON-serializable\"</span>\n       <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n           <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n               <span class=\"c1\"># deserialize the instance from the serialization</span>\n               <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'CustomClass:'</span><span class=\"p\">):</span>\n                   <span class=\"o\">...</span>\n               <span class=\"k\">else</span><span class=\"p\">:</span>\n                   <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">'unknown format'</span><span class=\"p\">)</span>\n           <span class=\"k\">else</span><span class=\"p\">:</span>\n               <span class=\"c1\"># initialize the instance</span>\n               <span class=\"o\">...</span>\n\n       <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n           <span class=\"n\">_str</span> <span class=\"o\">=</span> <span class=\"s1\">'CustomClass:'</span>\n           <span class=\"c1\"># append the instance's state to the serialization</span>\n           <span class=\"o\">...</span>\n           <span class=\"k\">return</span> <span class=\"n\">_str</span>\n\n       <span class=\"o\">...</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">CustomEncoder</span><span class=\"p\">(</span><span class=\"n\">JSONEncoder</span><span class=\"p\">):</span>\n       <span class=\"s2\">\"A custom encoder for the custom class\"</span>\n       <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n           <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">CustomClass</span><span class=\"p\">):</span>\n               <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n           <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">JSONEncoder</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">TestDecoder</span><span class=\"p\">(</span><span class=\"n\">JSONDecoder</span><span class=\"p\">):</span>\n       <span class=\"s2\">\"A custom decoder for the custom class\"</span>\n       <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n           <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">JSONDecoder</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n           <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">basestring</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'CustomClass:'</span><span class=\"p\">):</span>\n               <span class=\"k\">return</span> <span class=\"n\">CustomClass</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n           <span class=\"k\">return</span> <span class=\"n\">d</span>\n\n   <span class=\"c1\"># Create a new instance of CustomClass</span>\n   <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">CustomClass</span><span class=\"p\">()</span>\n\n   <span class=\"c1\"># Create a new client with the custom encoder and decoder</span>\n   <span class=\"n\">rj</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"n\">CustomEncoder</span><span class=\"p\">(),</span> <span class=\"n\">decoder</span><span class=\"o\">=</span><span class=\"n\">CustomDecoder</span><span class=\"p\">())</span>\n\n   <span class=\"c1\"># Store the object</span>\n   <span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">jsonset</span><span class=\"p\">(</span><span class=\"s1\">'custom'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">rootPath</span><span class=\"p\">(),</span> <span class=\"n\">obj</span><span class=\"p\">))</span>\n\n   <span class=\"c1\"># Retrieve it</span>\n   <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">rj</span><span class=\"o\">.</span><span class=\"n\">jsonget</span><span class=\"p\">(</span><span class=\"s1\">'custom'</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">rootPath</span><span class=\"p\">())</span>\n</pre>\n<h2>API</h2>\n<p>As rejson-py exposes the same methods as redis-py, it can be used as a drop-in\nreplacement. On top of Redis' core commands, the client also adds ReJSON's\nvocabulary and a couple of helper methods. These are documented in the\n<a href=\"API.md\" rel=\"nofollow\">API.md</a> file, which can be generated by running:</p>\n<pre>$ python gendoc rejson &gt; API.md\n</pre>\n<p>For complete documentation about ReJSON's commands, refer to <a href=\"http://rejson.io\" rel=\"nofollow\">ReJSON's website</a>.</p>\n<h2>License</h2>\n<p><a href=\"https://github.com/RedisLabs/rejson-py/blob/master/LICENSE\" rel=\"nofollow\">BSD 2-Clause</a></p>\n\n          </div>"}, "last_serial": 6398376, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f3a619da207c2850d72da1c9a4137a34", "sha256": "859cea11803aa6afba8b4a0f0daa657f85fffaad5e7c0bd87923b436da4fa005"}, "downloads": -1, "filename": "rejson-0.1.tar.gz", "has_sig": false, "md5_digest": "f3a619da207c2850d72da1c9a4137a34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5192, "upload_time": "2017-05-11T19:26:27", "upload_time_iso_8601": "2017-05-11T19:26:27.736573Z", "url": "https://files.pythonhosted.org/packages/51/72/f1160821a18c5d282f32c7c835077b15113936badc73053e5e23a309ed20/rejson-0.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9e580e2af5557c699f3c8f14ef2d2e8c", "sha256": "d34830edd8add521c9b537ad76fdb84ed07540f53f8835dda1bbe903893c3e66"}, "downloads": -1, "filename": "rejson-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9e580e2af5557c699f3c8f14ef2d2e8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6560, "upload_time": "2017-06-05T16:12:06", "upload_time_iso_8601": "2017-06-05T16:12:06.839165Z", "url": "https://files.pythonhosted.org/packages/de/25/545270325e24d2b5c1aee52f97b6ef76334ad08ae4c0d3a73cfc026846ae/rejson-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1057e0aa5f1b47670cef048a0947635f", "sha256": "41afbf26eb8a788aa6377a3463e57d61e55f167cc2bd1dbfd0e96c8d54519efa"}, "downloads": -1, "filename": "rejson-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1057e0aa5f1b47670cef048a0947635f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7468, "upload_time": "2017-06-05T16:58:16", "upload_time_iso_8601": "2017-06-05T16:58:16.398662Z", "url": "https://files.pythonhosted.org/packages/77/a4/bbb898ca52d2f535f4d346f20f48e989be72910982910f557b5ace6fcb9e/rejson-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "64b847b7269d211661529a4055fcf208", "sha256": "9cae89c81d90574d153676b69c2b7d456234ebeb7a90cfbbb58be71c72fd2af3"}, "downloads": -1, "filename": "rejson-0.3.0.tar.gz", "has_sig": false, "md5_digest": "64b847b7269d211661529a4055fcf208", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7493, "upload_time": "2019-01-07T13:57:39", "upload_time_iso_8601": "2019-01-07T13:57:39.720110Z", "url": "https://files.pythonhosted.org/packages/0c/97/0b76541a753838083ba2bdf6501dd5278394d997993bdcd1afa5457e3a9a/rejson-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "961166f55cc671a50a10e18e38f18d84", "sha256": "381a920c6f79d6710c493a6da4abbd5511f27b6db1f3fc2bd6038e16c46be245"}, "downloads": -1, "filename": "rejson-0.4.0.tar.gz", "has_sig": false, "md5_digest": "961166f55cc671a50a10e18e38f18d84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7648, "upload_time": "2019-03-08T06:22:19", "upload_time_iso_8601": "2019-03-08T06:22:19.353496Z", "url": "https://files.pythonhosted.org/packages/69/b9/204574bc41d29c9727249a117ac7969879ddccdd133a661db9e702ed58a9/rejson-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "049805037aa6a0d6a50bd0cc7e81161d", "sha256": "7f2db37e8f4f0a05e7e210dbd1d9a583ce2b8a3fdfa3a6e9b47498b1536559df"}, "downloads": -1, "filename": "rejson-0.5.0.tar.gz", "has_sig": false, "md5_digest": "049805037aa6a0d6a50bd0cc7e81161d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8474, "upload_time": "2019-09-01T15:46:35", "upload_time_iso_8601": "2019-09-01T15:46:35.344666Z", "url": "https://files.pythonhosted.org/packages/33/31/d85098ce0718e86b147296b296fd66b5f82f3d638d60a8798e6824b71a7a/rejson-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "36bfa01d9adc61a8fd6160e66013afc4", "sha256": "dc8daa2b2a57f0b1de58ca7a34ad48632daf6c0ad26b901dacf62bc189c4ddc9"}, "downloads": -1, "filename": "rejson-0.5.1.tar.gz", "has_sig": false, "md5_digest": "36bfa01d9adc61a8fd6160e66013afc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8554, "upload_time": "2019-12-01T18:39:12", "upload_time_iso_8601": "2019-12-01T18:39:12.458533Z", "url": "https://files.pythonhosted.org/packages/ee/19/b0fe9f85673ed6adb02da97ce967257e6ce1d221142ddca79d2f344f125c/rejson-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "dbcd4a1d6f89175065a43036c1e4380d", "sha256": "d49d4551063b4c83875ea03b2f749aa0154f095c91181b08725dc58c7a2ba4a0"}, "downloads": -1, "filename": "rejson-0.5.2.tar.gz", "has_sig": false, "md5_digest": "dbcd4a1d6f89175065a43036c1e4380d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8567, "upload_time": "2019-12-15T13:52:14", "upload_time_iso_8601": "2019-12-15T13:52:14.390780Z", "url": "https://files.pythonhosted.org/packages/b9/e7/4a2b45bb3adf5acbc99544efd2ebb26ab210eb84e3ee1285a2cc264b244c/rejson-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "ed8a686d68a5ae5cb47aa6195affeef8", "sha256": "c1940f743934fccfb29596dff3ee43c9ef4d58e8910ad22e63bdc8046bb6178c"}, "downloads": -1, "filename": "rejson-0.5.3.tar.gz", "has_sig": false, "md5_digest": "ed8a686d68a5ae5cb47aa6195affeef8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8418, "upload_time": "2019-12-26T17:00:23", "upload_time_iso_8601": "2019-12-26T17:00:23.389983Z", "url": "https://files.pythonhosted.org/packages/6b/78/1702c6eac765e36b0c4816ec7178906015d4cbc7de6d57f9ed7ad255825d/rejson-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "e66e479bfa9b2f1b7e961e2b70d50ef8", "sha256": "0fd0933412c36f7928d6072efc7d795368342344fc19698341604414cfbc2e6e"}, "downloads": -1, "filename": "rejson-0.5.4.tar.gz", "has_sig": false, "md5_digest": "e66e479bfa9b2f1b7e961e2b70d50ef8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8413, "upload_time": "2020-01-05T14:59:40", "upload_time_iso_8601": "2020-01-05T14:59:40.052636Z", "url": "https://files.pythonhosted.org/packages/7c/54/2272be7df97eeff9188424dbc9ff6634d11b2df98031ce52dc65f608d3f7/rejson-0.5.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e66e479bfa9b2f1b7e961e2b70d50ef8", "sha256": "0fd0933412c36f7928d6072efc7d795368342344fc19698341604414cfbc2e6e"}, "downloads": -1, "filename": "rejson-0.5.4.tar.gz", "has_sig": false, "md5_digest": "e66e479bfa9b2f1b7e961e2b70d50ef8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8413, "upload_time": "2020-01-05T14:59:40", "upload_time_iso_8601": "2020-01-05T14:59:40.052636Z", "url": "https://files.pythonhosted.org/packages/7c/54/2272be7df97eeff9188424dbc9ff6634d11b2df98031ce52dc65f608d3f7/rejson-0.5.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:06 2020"}