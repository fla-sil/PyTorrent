{"info": {"author": "Tim Savannah", "author_email": "kata198@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "findProcessOwner\n================\n\nAn application which scans a list of given pids and determines the executing user.\n\n\nEach line on stdout contains the result, either a username or a uid (if --uid is specified, or a username cannot be determined from a uid), or \"unknown\" on complete failure (like invalid PID).\n\nError messages are on the same line, but in stderr, such that any script can use the stdout result and simply check for \"unknown\" instead of needing to parse the errors.\n\n\n**Usage**\n\n\n\tUsage: findProcessOwner (options) [pid1] (optional: pid2, pid3)\n\n\n\tPrints the owner (account running) processes, given their pids. They are returned one per line on stdout.\n\n\t Any errors reported go to stderr. If no owner can be determined, stdout will contain \"unknown\" for that line.\n\n\t Thus your program can always ensure parsable output by parsing stdout, one-entry per line, and checking for \"unknown\".\n\n\n\t If a username can not be determined (like user deleted, or uid changed, etc) a pid will be printed.\n\n\n\t\tOptions:\n\n\n\t\t   \\-\\-uid                  Print the UID instead of the username\n\n\t\t   \\-\\-version              Print the version\n\n\n\n\n\tExamples:\n\n\t  findProcessOwner 1234\n\n\t  findProcessOwner \\-\\-uid 1234 3231\n\n\n\tReturn:\n\n\t  Returns zero if all searches were successful, otherwise non-zero.\n\n\n\n\n**Examples**\n\n\nCurrent shell user:\n\n\t$] findProcessOwner $$\n\n\tmyuser\n\n\nThree processes, two invalid:\n\n\t$] findProcessOwner 12345 $$ 12233\n\n\tunknown (Could not determine owner of pid 12345)\n\n\tmyuser\n\n\tunknown (Could not determine owner of pid 12233)\n\n\nThree processes, two invalid, stderr nullified:\n\n\t$] findProcessOwner 12345 $$ 12233 2>/dev/null\n\n\tunknown \n\n\tmyuser\n\n\tunknown", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kata198/findProcessOwner", "keywords": "find,process,owner,unix,linux,pid,execute,running,username,uid", "license": "LGPLv3", "maintainer": null, "maintainer_email": null, "name": "findProcessOwner", "package_url": "https://pypi.org/project/findProcessOwner/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/findProcessOwner/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kata198/findProcessOwner"}, "release_url": "https://pypi.org/project/findProcessOwner/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Application which scans a list of given pids and determines the executing user", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>An application which scans a list of given pids and determines the executing user.</p>\n<p>Each line on stdout contains the result, either a username or a uid (if \u2013uid is specified, or a username cannot be determined from a uid), or \u201cunknown\u201d on complete failure (like invalid PID).</p>\n<p>Error messages are on the same line, but in stderr, such that any script can use the stdout result and simply check for \u201cunknown\u201d instead of needing to parse the errors.</p>\n<p><strong>Usage</strong></p>\n<blockquote>\n<p>Usage: findProcessOwner (options) [pid1] (optional: pid2, pid3)</p>\n<p>Prints the owner (account running) processes, given their pids. They are returned one per line on stdout.</p>\n<blockquote>\n<p>Any errors reported go to stderr. If no owner can be determined, stdout will contain \u201cunknown\u201d for that line.</p>\n<p>Thus your program can always ensure parsable output by parsing stdout, one-entry per line, and checking for \u201cunknown\u201d.</p>\n<p>If a username can not be determined (like user deleted, or uid changed, etc) a pid will be printed.</p>\n<blockquote>\n<p>Options:</p>\n<blockquote>\n<p>\u2013uid                  Print the UID instead of the username</p>\n<p>\u2013version              Print the version</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Examples:</p>\n<blockquote>\n<p>findProcessOwner 1234</p>\n<p>findProcessOwner \u2013uid 1234 3231</p>\n</blockquote>\n<p>Return:</p>\n<blockquote>\nReturns zero if all searches were successful, otherwise non-zero.</blockquote>\n</blockquote>\n<p><strong>Examples</strong></p>\n<p>Current shell user:</p>\n<blockquote>\n<p>$] findProcessOwner $$</p>\n<p>myuser</p>\n</blockquote>\n<p>Three processes, two invalid:</p>\n<blockquote>\n<p>$] findProcessOwner 12345 $$ 12233</p>\n<p>unknown (Could not determine owner of pid 12345)</p>\n<p>myuser</p>\n<p>unknown (Could not determine owner of pid 12233)</p>\n</blockquote>\n<p>Three processes, two invalid, stderr nullified:</p>\n<blockquote>\n<p>$] findProcessOwner 12345 $$ 12233 2&gt;/dev/null</p>\n<p>unknown</p>\n<p>myuser</p>\n<p>unknown</p>\n</blockquote>\n\n          </div>"}, "last_serial": 1776453, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2ba98f790c14dfd1ca5dfeeda6258f99", "sha256": "aba089462e695fa5b28909b49fe6df278a1b1ca30d503db859cb6ca81aa5e920"}, "downloads": -1, "filename": "findProcessOwner-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2ba98f790c14dfd1ca5dfeeda6258f99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9999, "upload_time": "2015-09-08T20:20:24", "upload_time_iso_8601": "2015-09-08T20:20:24.471406Z", "url": "https://files.pythonhosted.org/packages/ae/a4/39fe9c0ea85368ed2b7252340733cb603dd4602123b9c29d471624b9e842/findProcessOwner-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4a208a1fde0f43c3e455f42475da7d1f", "sha256": "31588a563387fdc4c89ef0cdd2aec9a205ae41516a859b948de9173bd2027a1b"}, "downloads": -1, "filename": "findProcessOwner-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4a208a1fde0f43c3e455f42475da7d1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10054, "upload_time": "2015-10-19T16:43:00", "upload_time_iso_8601": "2015-10-19T16:43:00.698821Z", "url": "https://files.pythonhosted.org/packages/27/ba/0304c59c5c4dd4a5e1f24a17788fd0738d9879856f7e193faf5267df53f9/findProcessOwner-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a208a1fde0f43c3e455f42475da7d1f", "sha256": "31588a563387fdc4c89ef0cdd2aec9a205ae41516a859b948de9173bd2027a1b"}, "downloads": -1, "filename": "findProcessOwner-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4a208a1fde0f43c3e455f42475da7d1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10054, "upload_time": "2015-10-19T16:43:00", "upload_time_iso_8601": "2015-10-19T16:43:00.698821Z", "url": "https://files.pythonhosted.org/packages/27/ba/0304c59c5c4dd4a5e1f24a17788fd0738d9879856f7e193faf5267df53f9/findProcessOwner-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:23 2020"}