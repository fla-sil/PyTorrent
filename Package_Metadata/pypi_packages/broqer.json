{"info": {"author": "G\u00fcnther Jena", "author_email": "guenther@jena.at", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "===================\nPython Broqer\n===================\n\n.. image:: https://img.shields.io/pypi/v/broqer.svg\n  :target: https://pypi.python.org/pypi/broqer\n\n.. image:: https://img.shields.io/travis/semiversus/python-broqer/master.svg\n  :target: https://travis-ci.org/semiversus/python-broqer\n\n.. image:: https://readthedocs.org/projects/python-broqer/badge/?version=latest\n  :target: https://python-broqer.readthedocs.io/en/latest\n\n.. image:: https://codecov.io/gh/semiversus/python-broqer/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/semiversus/python-broqer\n\n.. image:: https://img.shields.io/github/license/semiversus/python-broqer.svg\n  :target: https://en.wikipedia.org/wiki/MIT_License\n\nInitial focus on embedded systems *Broqer* can be used wherever continuous streams of data have to be processed - and they are everywhere. Watch out!\n\n.. image:: https://cdn.rawgit.com/semiversus/python-broqer/7beb7379/docs/logo.svg\n\n.. header\n\nSynopsis\n========\n\n- Pure python implementation without dependencies\n- Under MIT license (2018 G\u00fcnther Jena)\n- Source is hosted on GitHub.com_\n- Documentation is hosted on ReadTheDocs.com_\n- Tested on Python 3.5, 3.6, 3.7 and 3.8-dev\n- Unit tested with pytest_, coding style checked with Flake8_, static type checked with mypy_, static code checked with Pylint_, documented with Sphinx_\n- Operators known from ReactiveX_ and other streaming frameworks (like Map_, CombineLatest_, ...)\n- Broker functionality via Hub_\n\n  + Centralised object to keep track of publishers and subscribers\n  + Starting point to build applications with a microservice architecture\n\n.. _pytest: https://docs.pytest.org/en/latest\n.. _Flake8: http://flake8.pycqa.org/en/latest/\n.. _mypy: http://mypy-lang.org/\n.. _Pylint: https://www.pylint.org/\n.. _Sphinx: http://www.sphinx-doc.org\n.. _GitHub.com: https://github.com/semiversus/python-broqer\n.. _ReadTheDocs.com: http://python-broqer.readthedocs.io\n.. _ReactiveX: http://reactivex.io/\n.. _Hub: https://python-broqer.readthedocs.io/en/latest/hub.html\n\nShowcase\n========\n\nIn other frameworks a *Publisher* is sometimes called *Oberservable*. A *Subscriber*\nis able to observe changes the publisher is emitting. With these basics you're\nable to use the observer pattern - let's see!\n\nObserver pattern\n----------------\n\nSubscribing to a publisher is done via the ``|`` operator - here used as a pipe.\nA simple subscriber is ``op.Sink`` which is calling a function with optional positional\nand keyword arguments.\n\n.. code-block:: python3\n\n    >>> from broqer import Value, op\n    >>> a = Value(5)  # create a value (publisher and subscriber with state)\n    >>> disposable = a | op.Sink(print, 'Change:')  # subscribe a callback\n    Change: 5\n\n    >>> a.emit(3)  # change the value\n    Change: 3\n\n    >>> disposable.dispose()  # unsubscribe\n\nCombine publishers with arithmetic operators\n--------------------------------------------\n\nYou're able to create publishers on the fly by combining two publishers with\nthe common operators (like ``+``, ``>``, ``<<``, ...).\n\n.. code-block:: python3\n\n    >>> from broqer import Value, op\n    >>> a = Value(1)\n    >>> b = Value(3)\n\n    >>> c = a * 3 > b  # create a new publisher via operator overloading\n    >>> c | op.Sink(print, 'c:')\n    c: False\n\n    >>> a.emit(1)  # will not change the state of c\n    >>> a.emit(2)\n    c: True\n\nAlso fancy stuff like getting item by index or key is possible:\n\n.. code-block:: python3\n\n    >>> i = Value('a')\n    >>> d = Value({'a':100, 'b':200, 'c':300})\n\n    >>> d[i] | op.Sink(print, 'r:')\n    r: 100\n\n    >>> i.emit('c')\n    r: 300\n    >>> d.emit({'c':123})\n    r: 123\n\nSome python built in functions can't return Publishers (e.g. ``len()`` needs to\nreturn an integer). For this cases special functions are defined in broqer: ``Str``,\n``Int``, ``Float``, ``Len`` and ``In`` (for ``x in y``). Also other functions\nfor convenience are available: ``All``, ``Any``, ``BitwiseAnd`` and ``BitwiseOr``.\n\nAttribute access on a publisher is building a publisher where the actual attribute\naccess is done on emitting values. A publisher has to know, which type it should\nmimic - this is done via ``.inherit_type(type)``.\n\n.. code-block:: python3\n\n    >>> i = Value('Attribute access made REACTIVE')\n    >>> i.inherit_type(str)\n    >>> i.lower().split(sep=' ') | op.Sink(print)\n    ['attribute', 'access', 'made', 'reactive']\n\n    >>> i.emit('Reactive and pythonic')\n    ['reactive', 'and', 'pythonic']\n\nAsyncio Support\n---------------\n\nA lot of operators are made for asynchronous operations. You're able to debounce\nand throttle emits (via ``op.Debounce`` and ``op.Throttle``), sample and delay\n(via ``op.Sample`` and ``op.Delay``) or start coroutines and when finishing the\nresult will be emitted.\n\n.. code-block:: python3\n\n    >>> async def long_running_coro(value):\n    ...     await asyncio.sleep(3)\n    ...     return value + 1\n    ...\n    >>> a = Value(0)\n    >>> a | op.MapAsync(long_running_coro) | op.Sink(print, 'Result:')\n\nAfter 3 seconds the result will be:\n\n.. code-block:: bash\n\n    Result: 0\n\n``MapAsync`` supports various modes how to handle a new emit when a coroutine\nis running. Default is a concurrent run of coroutines, but also various queue\nor interrupt mode is available.\n\nEvery publisher can be awaited in coroutines:\n\n.. code-block:: python3\n\n    await signal_publisher\n\nFunction decorators\n-------------------\n\nMake your own operators on the fly with function decorators. Decorators are\navailable for ``Accumulate``, ``CombineLatest``, ``Filter``, ``Map``, ``MapAsync``,\n``MapThreaded``, ``Reduce`` and ``Sink``.\n\n.. code-block:: python3\n\n    >>> @build_map\n    ... def count_vowels(s):\n    ...     return sum([s.count(v) for v in 'aeiou'])\n\n    >>> msg = Value('Hello World!)\n    >>> msg | count_vowels() | Sink(print, 'Number of vowels:')\n    Number of vowels: 3\n    >>> msg.emit('Wahuuu')\n    Number of vowels: 4\n\nYou can even make configurable ``Map`` s and ``Filter`` s:\n\n.. code-block:: python3\n\n    >>> import re\n\n    >>> @build_filter\n    ... def filter_pattern(pattern, s):\n    ...     return re.search(pattern, s) is not None\n\n    >>> msg = Value('Cars passed: 135!')\n    >>> msg | filter_pattern('[0-9]*') | Sink(print)\n    Cars passed: 135!\n    >>> msg.emit('No cars have passed')\n    >>> msg.emit('Only 1 car has passed')\n    Only 1 car has passed\n\n\nInstall\n=======\n\n.. code-block:: bash\n\n    pip install broqer\n\nCredits\n=======\n\nBroqer was inspired by:\n\n* RxPY_: Reactive Extension for Python (by B\u00f8rge Lanes and Dag Brattli)\n* aioreactive_: Async/Await reactive tools for Python (by Dag Brattli)\n* streamz_: build pipelines to manage continuous streams of data (by Matthew Rocklin)\n* MQTT_: M2M connectivity protocol\n* Florian Feurstein: spending hours of discussion, coming up with great ideas and help me understand the concepts!\n\n.. _RxPY: https://github.com/ReactiveX/RxPY\n.. _aioreactive: https://github.com/dbrattli/aioreactive\n.. _streamz: https://github.com/mrocklin/streamz\n.. _MQTT: http://mqtt.org/\n.. _Subject: https://python-broqer.readthedocs.io/en/latest/subjects.html#subject\n.. _Value: https://python-broqer.readthedocs.io/en/latest/subjects.html#value\n.. _Publisher: https://python-broqer.readthedocs.io/en/latest/publishers.html#publisher\n.. _StatefulPublisher: https://python-broqer.readthedocs.io/en/latest/publishers.html#statefulpublisher\n.. _Subscriber: https://python-broqer.readthedocs.io/en/latest/subscribers.html#subscriber\n.. _Accumulate: https://python-broqer.readthedocs.io/en/latest/operators/accumulate.html\n.. _Cache: https://python-broqer.readthedocs.io/en/latest/operators/cache.html\n.. _CatchException: https://python-broqer.readthedocs.io/en/latest/operators/catch_exception.py\n.. _CombineLatest: https://python-broqer.readthedocs.io/en/latest/operators/combine_latest.py\n.. _Debounce: https://python-broqer.readthedocs.io/en/latest/operators/debounce.py\n.. _Delay: https://python-broqer.readthedocs.io/en/latest/operators/delay.py\n.. _Filter: https://python-broqer.readthedocs.io/en/latest/operators/filter_.py\n.. _FromPolling: https://python-broqer.readthedocs.io/en/latest/operators/publishers/from_polling.py\n.. _MapAsync: https://python-broqer.readthedocs.io/en/latest/operators/map_async.py\n.. _MapThreaded: https://python-broqer.readthedocs.io/en/latest/operators/map_threaded.py\n.. _Map: https://python-broqer.readthedocs.io/en/latest/operators/map_.py\n.. _Merge: https://python-broqer.readthedocs.io/en/latest/operators/merge.py\n.. _Partition: https://python-broqer.readthedocs.io/en/latest/operators/partition.py\n.. _Reduce: https://python-broqer.readthedocs.io/en/latest/operators/reduce.py\n.. _Replace: https://python-broqer.readthedocs.io/en/latest/operators/replace.py\n.. _Sample: https://python-broqer.readthedocs.io/en/latest/operators/sample.py\n.. _Sink: https://python-broqer.readthedocs.io/en/latest/operators/subscribers/sink.py\n.. _SinkAsync: https://python-broqer.readthedocs.io/en/latest/operators/subscribers/sink_async.py\n.. _SlidingWindow: https://python-broqer.readthedocs.io/en/latest/operators/sliding_window.py\n.. _Switch: https://python-broqer.readthedocs.io/en/latest/operators/switch.py\n.. _Throttle: https://python-broqer.readthedocs.io/en/latest/operators/throttle.py\n.. _OnEmitFuture: https://python-broqer.readthedocs.io/en/latest/subscribers.html#trace\n.. _Trace: https://python-broqer.readthedocs.io/en/latest/subscribers.html#trace\n.. _hub.utils.TopicMapper: https://python-broqer.readthedocs.io/en/latest/subscribers.html#trace\n\n.. api\n\nAPI\n===\n\nPublishers\n----------\n\nA Publisher_ is the source for messages.\n\nUsing ``asyncio`` event loop:\n\n+------------------------------------+--------------------------------------------------------------------------+\n| Publisher_ ()                      | Basic publisher                                                          |\n+------------------------------------+--------------------------------------------------------------------------+\n| StatefulPublisher_ (init)          | Publisher keeping an internal state                                      |\n+------------------------------------+--------------------------------------------------------------------------+\n| FromPolling_ (interval, func, ...) | Call ``func(*args, **kwargs)`` periodically and emit the returned values |\n+------------------------------------+--------------------------------------------------------------------------+\n\nOperators\n---------\n\n+-------------------------------------+-----------------------------------------------------------------------------+\n| Accumulate_ (func, init)            | Apply ``func(value, state)`` which is returning new state and value to emit |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| Cache_ (\\*init)                     | Caching the emitted values to access it via ``.cache`` property             |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| CatchException_ (\\*exceptions)      | Catching exceptions of following operators in the pipelines                 |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| CombineLatest_ (\\*publishers)       | Combine the latest emit of multiple publishers and emit the combination     |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| Filter_ (predicate, ...)            | Filters values based on a ``predicate`` function                            |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| Map_ (map_func, \\*args, \\*\\*kwargs) | Apply ``map_func(*args, value, **kwargs)`` to each emitted value            |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| Merge_ (\\*publishers)               | Merge emits of multiple publishers into one stream                          |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| Partition_ (size)                   | Group ``size`` emits into one emit as tuple                                 |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| Reduce_ (func, init)                | Apply ``func`` to the current emitted value and the last result of ``func`` |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| Replace_ (value)                    | Replace each received value by the given value                              |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| SlidingWindow_ (size, ...)          | Group ``size`` emitted values overlapping                                   |\n+-------------------------------------+-----------------------------------------------------------------------------+\n| Switch_ (mapping)                   | Emit selected source mapped by ``mapping``                                  |\n+-------------------------------------+-----------------------------------------------------------------------------+\n\nUsing ``asyncio`` event loop:\n\n+-------------------------------------+-------------------------------------------------------------------------+\n| Debounce_ (duetime, \\*reset_value)  | Emit a value only after a given idle time (emits meanwhile are skipped) |\n+-------------------------------------+-------------------------------------------------------------------------+\n| Delay_ (delay)                      | Emit every value delayed by the given time                              |\n+-------------------------------------+-------------------------------------------------------------------------+\n| MapAsync_ (map_coro, mode, ...)     | Apply ``map_coro`` to each emitted value allowing async processing      |\n+-------------------------------------+-------------------------------------------------------------------------+\n| MapThreaded_ (map_func, mode, ...)  | Apply ``map_func`` to each emitted value allowing threaded processing   |\n+-------------------------------------+-------------------------------------------------------------------------+\n| Sample_ (interval)                  | Emit the last received value periodically                               |\n+-------------------------------------+-------------------------------------------------------------------------+\n| Throttle_ (duration)                | Rate limit emits by the given time                                      |\n+-------------------------------------+-------------------------------------------------------------------------+\n\nSubscribers\n-----------\n\nA Subscriber_ is the sink for messages.\n\n+----------------------------------+--------------------------------------------------------------+\n| Sink_ (func, \\*args, \\*\\*kwargs) | Apply ``func(*args, value, **kwargs)`` to each emitted value |\n+----------------------------------+--------------------------------------------------------------+\n| SinkAsync_ (coro, ...)           | Start ``coro(*args, value, **kwargs)`` like MapAsync_        |\n+----------------------------------+--------------------------------------------------------------+\n| OnEmitFuture_ (timeout=None)     | Build a future able to await for                             |\n+----------------------------------+--------------------------------------------------------------+\n| hub.utils.TopicMapper_ (d)       | Update a dictionary with changes from topics                 |\n+----------------------------------+--------------------------------------------------------------+\n| Trace_ (d)                       | Debug output for publishers                                  |\n+----------------------------------+--------------------------------------------------------------+\n\nSubjects\n--------\n\n+--------------------------+--------------------------------------------------------------+\n| Subject_ ()              | Source with ``.emit(*args)`` method to publish a new message |\n+--------------------------+--------------------------------------------------------------+\n| Value_ (\\*init)          | Source with a state (initialized via ``init``)               |\n+--------------------------+--------------------------------------------------------------+\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/semiversus/python-broqer", "keywords": "broker publisher subscriber reactive frp observable", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "broqer", "package_url": "https://pypi.org/project/broqer/", "platform": "", "project_url": "https://pypi.org/project/broqer/", "project_urls": {"Homepage": "https://github.com/semiversus/python-broqer"}, "release_url": "https://pypi.org/project/broqer/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Carefully crafted library to operate with continuous streams of data in a reactive style with publish/subscribe and broker functionality.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/broqer\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/broqer.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf5560809d983fed2ffe52846c1b7e2e47456bb0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f62726f7165722e737667\"></a>\n<a href=\"https://travis-ci.org/semiversus/python-broqer\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/semiversus/python-broqer/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc07b69ecf6cb4779f09d3498929f6a41c214d44/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f73656d697665727375732f707974686f6e2d62726f7165722f6d61737465722e737667\"></a>\n<a href=\"https://python-broqer.readthedocs.io/en/latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/python-broqer/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3471326001241e1e1ac3bc135a503112c2f4a218/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707974686f6e2d62726f7165722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://codecov.io/gh/semiversus/python-broqer\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/semiversus/python-broqer/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e60e4fc1f3442c08a18166a6e1bf8ca12037686/68747470733a2f2f636f6465636f762e696f2f67682f73656d697665727375732f707974686f6e2d62726f7165722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/license/semiversus/python-broqer.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b02d5442d6004b3faf9ce54625e7589b60214cb2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f73656d697665727375732f707974686f6e2d62726f7165722e737667\"></a>\n<p>Initial focus on embedded systems <em>Broqer</em> can be used wherever continuous streams of data have to be processed - and they are everywhere. Watch out!</p>\n<img alt=\"https://cdn.rawgit.com/semiversus/python-broqer/7beb7379/docs/logo.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44df2ac387249d854a22aaf5d9b51fa3bc258427/68747470733a2f2f63646e2e7261776769742e636f6d2f73656d697665727375732f707974686f6e2d62726f7165722f37626562373337392f646f63732f6c6f676f2e737667\">\n<div id=\"synopsis\">\n<h2>Synopsis</h2>\n<ul>\n<li>Pure python implementation without dependencies</li>\n<li>Under MIT license (2018 G\u00fcnther Jena)</li>\n<li>Source is hosted on <a href=\"https://github.com/semiversus/python-broqer\" rel=\"nofollow\">GitHub.com</a></li>\n<li>Documentation is hosted on <a href=\"http://python-broqer.readthedocs.io\" rel=\"nofollow\">ReadTheDocs.com</a></li>\n<li>Tested on Python 3.5, 3.6, 3.7 and 3.8-dev</li>\n<li>Unit tested with <a href=\"https://docs.pytest.org/en/latest\" rel=\"nofollow\">pytest</a>, coding style checked with <a href=\"http://flake8.pycqa.org/en/latest/\" rel=\"nofollow\">Flake8</a>, static type checked with <a href=\"http://mypy-lang.org/\" rel=\"nofollow\">mypy</a>, static code checked with <a href=\"https://www.pylint.org/\" rel=\"nofollow\">Pylint</a>, documented with <a href=\"http://www.sphinx-doc.org\" rel=\"nofollow\">Sphinx</a></li>\n<li>Operators known from <a href=\"http://reactivex.io/\" rel=\"nofollow\">ReactiveX</a> and other streaming frameworks (like <a href=\"https://python-broqer.readthedocs.io/en/latest/operators/map_.py\" rel=\"nofollow\">Map</a>, <a href=\"https://python-broqer.readthedocs.io/en/latest/operators/combine_latest.py\" rel=\"nofollow\">CombineLatest</a>, \u2026)</li>\n<li>Broker functionality via <a href=\"https://python-broqer.readthedocs.io/en/latest/hub.html\" rel=\"nofollow\">Hub</a><ul>\n<li>Centralised object to keep track of publishers and subscribers</li>\n<li>Starting point to build applications with a microservice architecture</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"showcase\">\n<h2>Showcase</h2>\n<p>In other frameworks a <em>Publisher</em> is sometimes called <em>Oberservable</em>. A <em>Subscriber</em>\nis able to observe changes the publisher is emitting. With these basics you\u2019re\nable to use the observer pattern - let\u2019s see!</p>\n<div id=\"observer-pattern\">\n<h3>Observer pattern</h3>\n<p>Subscribing to a publisher is done via the <tt>|</tt> operator - here used as a pipe.\nA simple subscriber is <tt>op.Sink</tt> which is calling a function with optional positional\nand keyword arguments.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">broqer</span> <span class=\"kn\">import</span> <span class=\"n\">Value</span><span class=\"p\">,</span> <span class=\"n\">op</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># create a value (publisher and subscriber with state)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">disposable</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">|</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">Sink</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"s1\">'Change:'</span><span class=\"p\">)</span>  <span class=\"c1\"># subscribe a callback</span>\n<span class=\"n\">Change</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># change the value</span>\n<span class=\"n\">Change</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">disposable</span><span class=\"o\">.</span><span class=\"n\">dispose</span><span class=\"p\">()</span>  <span class=\"c1\"># unsubscribe</span>\n</pre>\n</div>\n<div id=\"combine-publishers-with-arithmetic-operators\">\n<h3>Combine publishers with arithmetic operators</h3>\n<p>You\u2019re able to create publishers on the fly by combining two publishers with\nthe common operators (like <tt>+</tt>, <tt>&gt;</tt>, <tt>&lt;&lt;</tt>, \u2026).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">broqer</span> <span class=\"kn\">import</span> <span class=\"n\">Value</span><span class=\"p\">,</span> <span class=\"n\">op</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span>  <span class=\"c1\"># create a new publisher via operator overloading</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">|</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">Sink</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"s1\">'c:'</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># will not change the state of c</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n</pre>\n<p>Also fancy stuff like getting item by index or key is possible:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span><span class=\"mi\">300</span><span class=\"p\">})</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">Sink</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"s1\">'r:'</span><span class=\"p\">)</span>\n<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"mi\">100</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"mi\">300</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">({</span><span class=\"s1\">'c'</span><span class=\"p\">:</span><span class=\"mi\">123</span><span class=\"p\">})</span>\n<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"mi\">123</span>\n</pre>\n<p>Some python built in functions can\u2019t return Publishers (e.g. <tt>len()</tt> needs to\nreturn an integer). For this cases special functions are defined in broqer: <tt>Str</tt>,\n<tt>Int</tt>, <tt>Float</tt>, <tt>Len</tt> and <tt>In</tt> (for <tt>x in y</tt>). Also other functions\nfor convenience are available: <tt>All</tt>, <tt>Any</tt>, <tt>BitwiseAnd</tt> and <tt>BitwiseOr</tt>.</p>\n<p>Attribute access on a publisher is building a publisher where the actual attribute\naccess is done on emitting values. A publisher has to know, which type it should\nmimic - this is done via <tt>.inherit_type(type)</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s1\">'Attribute access made REACTIVE'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">inherit_type</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">' '</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">Sink</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'attribute'</span><span class=\"p\">,</span> <span class=\"s1\">'access'</span><span class=\"p\">,</span> <span class=\"s1\">'made'</span><span class=\"p\">,</span> <span class=\"s1\">'reactive'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'Reactive and pythonic'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'reactive'</span><span class=\"p\">,</span> <span class=\"s1\">'and'</span><span class=\"p\">,</span> <span class=\"s1\">'pythonic'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"asyncio-support\">\n<h3>Asyncio Support</h3>\n<p>A lot of operators are made for asynchronous operations. You\u2019re able to debounce\nand throttle emits (via <tt>op.Debounce</tt> and <tt>op.Throttle</tt>), sample and delay\n(via <tt>op.Sample</tt> and <tt>op.Delay</tt>) or start coroutines and when finishing the\nresult will be emitted.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">long_running_coro</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">|</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">MapAsync</span><span class=\"p\">(</span><span class=\"n\">long_running_coro</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">Sink</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"s1\">'Result:'</span><span class=\"p\">)</span>\n</pre>\n<p>After 3 seconds the result will be:</p>\n<pre>Result: <span class=\"m\">0</span>\n</pre>\n<p><tt>MapAsync</tt> supports various modes how to handle a new emit when a coroutine\nis running. Default is a concurrent run of coroutines, but also various queue\nor interrupt mode is available.</p>\n<p>Every publisher can be awaited in coroutines:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">signal_publisher</span>\n</pre>\n</div>\n<div id=\"function-decorators\">\n<h3>Function decorators</h3>\n<p>Make your own operators on the fly with function decorators. Decorators are\navailable for <tt>Accumulate</tt>, <tt>CombineLatest</tt>, <tt>Filter</tt>, <tt>Map</tt>, <tt>MapAsync</tt>,\n<tt>MapThreaded</tt>, <tt>Reduce</tt> and <tt>Sink</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@build_map</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">count_vowels</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"s1\">'aeiou'</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s1\">'Hello World!)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span> <span class=\"o\">|</span> <span class=\"n\">count_vowels</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"n\">Sink</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"s1\">'Number of vowels:'</span><span class=\"p\">)</span>\n<span class=\"n\">Number</span> <span class=\"n\">of</span> <span class=\"n\">vowels</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'Wahuuu'</span><span class=\"p\">)</span>\n<span class=\"n\">Number</span> <span class=\"n\">of</span> <span class=\"n\">vowels</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n</pre>\n<p>You can even make configurable <tt>Map</tt> s and <tt>Filter</tt> s:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@build_filter</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">filter_pattern</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s1\">'Cars passed: 135!'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span> <span class=\"o\">|</span> <span class=\"n\">filter_pattern</span><span class=\"p\">(</span><span class=\"s1\">'[0-9]*'</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Sink</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">)</span>\n<span class=\"n\">Cars</span> <span class=\"n\">passed</span><span class=\"p\">:</span> <span class=\"mi\">135</span><span class=\"err\">!</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'No cars have passed'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'Only 1 car has passed'</span><span class=\"p\">)</span>\n<span class=\"n\">Only</span> <span class=\"mi\">1</span> <span class=\"n\">car</span> <span class=\"n\">has</span> <span class=\"n\">passed</span>\n</pre>\n</div>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install broqer\n</pre>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Broqer was inspired by:</p>\n<ul>\n<li><a href=\"https://github.com/ReactiveX/RxPY\" rel=\"nofollow\">RxPY</a>: Reactive Extension for Python (by B\u00f8rge Lanes and Dag Brattli)</li>\n<li><a href=\"https://github.com/dbrattli/aioreactive\" rel=\"nofollow\">aioreactive</a>: Async/Await reactive tools for Python (by Dag Brattli)</li>\n<li><a href=\"https://github.com/mrocklin/streamz\" rel=\"nofollow\">streamz</a>: build pipelines to manage continuous streams of data (by Matthew Rocklin)</li>\n<li><a href=\"http://mqtt.org/\" rel=\"nofollow\">MQTT</a>: M2M connectivity protocol</li>\n<li>Florian Feurstein: spending hours of discussion, coming up with great ideas and help me understand the concepts!</li>\n</ul>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<div id=\"publishers\">\n<h3>Publishers</h3>\n<p>A <a href=\"https://python-broqer.readthedocs.io/en/latest/publishers.html#publisher\" rel=\"nofollow\">Publisher</a> is the source for messages.</p>\n<p>Using <tt>asyncio</tt> event loop:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/publishers.html#publisher\" rel=\"nofollow\">Publisher</a> ()</td>\n<td>Basic publisher</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/publishers.html#statefulpublisher\" rel=\"nofollow\">StatefulPublisher</a> (init)</td>\n<td>Publisher keeping an internal state</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/publishers/from_polling.py\" rel=\"nofollow\">FromPolling</a> (interval, func, \u2026)</td>\n<td>Call <tt><span class=\"pre\">func(*args,</span> **kwargs)</tt> periodically and emit the returned values</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"operators\">\n<h3>Operators</h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/accumulate.html\" rel=\"nofollow\">Accumulate</a> (func, init)</td>\n<td>Apply <tt>func(value, state)</tt> which is returning new state and value to emit</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/cache.html\" rel=\"nofollow\">Cache</a> (*init)</td>\n<td>Caching the emitted values to access it via <tt>.cache</tt> property</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/catch_exception.py\" rel=\"nofollow\">CatchException</a> (*exceptions)</td>\n<td>Catching exceptions of following operators in the pipelines</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/combine_latest.py\" rel=\"nofollow\">CombineLatest</a> (*publishers)</td>\n<td>Combine the latest emit of multiple publishers and emit the combination</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/filter_.py\" rel=\"nofollow\">Filter</a> (predicate, \u2026)</td>\n<td>Filters values based on a <tt>predicate</tt> function</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/map_.py\" rel=\"nofollow\">Map</a> (map_func, *args, **kwargs)</td>\n<td>Apply <tt><span class=\"pre\">map_func(*args,</span> value, **kwargs)</tt> to each emitted value</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/merge.py\" rel=\"nofollow\">Merge</a> (*publishers)</td>\n<td>Merge emits of multiple publishers into one stream</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/partition.py\" rel=\"nofollow\">Partition</a> (size)</td>\n<td>Group <tt>size</tt> emits into one emit as tuple</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/reduce.py\" rel=\"nofollow\">Reduce</a> (func, init)</td>\n<td>Apply <tt>func</tt> to the current emitted value and the last result of <tt>func</tt></td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/replace.py\" rel=\"nofollow\">Replace</a> (value)</td>\n<td>Replace each received value by the given value</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/sliding_window.py\" rel=\"nofollow\">SlidingWindow</a> (size, \u2026)</td>\n<td>Group <tt>size</tt> emitted values overlapping</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/switch.py\" rel=\"nofollow\">Switch</a> (mapping)</td>\n<td>Emit selected source mapped by <tt>mapping</tt></td>\n</tr>\n</tbody>\n</table>\n<p>Using <tt>asyncio</tt> event loop:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/debounce.py\" rel=\"nofollow\">Debounce</a> (duetime, *reset_value)</td>\n<td>Emit a value only after a given idle time (emits meanwhile are skipped)</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/delay.py\" rel=\"nofollow\">Delay</a> (delay)</td>\n<td>Emit every value delayed by the given time</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/map_async.py\" rel=\"nofollow\">MapAsync</a> (map_coro, mode, \u2026)</td>\n<td>Apply <tt>map_coro</tt> to each emitted value allowing async processing</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/map_threaded.py\" rel=\"nofollow\">MapThreaded</a> (map_func, mode, \u2026)</td>\n<td>Apply <tt>map_func</tt> to each emitted value allowing threaded processing</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/sample.py\" rel=\"nofollow\">Sample</a> (interval)</td>\n<td>Emit the last received value periodically</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/throttle.py\" rel=\"nofollow\">Throttle</a> (duration)</td>\n<td>Rate limit emits by the given time</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"subscribers\">\n<h3>Subscribers</h3>\n<p>A <a href=\"https://python-broqer.readthedocs.io/en/latest/subscribers.html#subscriber\" rel=\"nofollow\">Subscriber</a> is the sink for messages.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/subscribers/sink.py\" rel=\"nofollow\">Sink</a> (func, *args, **kwargs)</td>\n<td>Apply <tt><span class=\"pre\">func(*args,</span> value, **kwargs)</tt> to each emitted value</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/operators/subscribers/sink_async.py\" rel=\"nofollow\">SinkAsync</a> (coro, \u2026)</td>\n<td>Start <tt><span class=\"pre\">coro(*args,</span> value, **kwargs)</tt> like <a href=\"https://python-broqer.readthedocs.io/en/latest/operators/map_async.py\" rel=\"nofollow\">MapAsync</a></td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/subscribers.html#trace\" rel=\"nofollow\">OnEmitFuture</a> (timeout=None)</td>\n<td>Build a future able to await for</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/subscribers.html#trace\" rel=\"nofollow\">hub.utils.TopicMapper</a> (d)</td>\n<td>Update a dictionary with changes from topics</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/subscribers.html#trace\" rel=\"nofollow\">Trace</a> (d)</td>\n<td>Debug output for publishers</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"subjects\">\n<h3>Subjects</h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/subjects.html#subject\" rel=\"nofollow\">Subject</a> ()</td>\n<td>Source with <tt><span class=\"pre\">.emit(*args)</span></tt> method to publish a new message</td>\n</tr>\n<tr><td><a href=\"https://python-broqer.readthedocs.io/en/latest/subjects.html#value\" rel=\"nofollow\">Value</a> (*init)</td>\n<td>Source with a state (initialized via <tt>init</tt>)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5041247, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "c1194f2b1dce84ab366ed3290f05e5bc", "sha256": "dc2587a71d4a762d3ed845b94ae722d0917df8b5362ee920a36b1bf71198da96"}, "downloads": -1, "filename": "broqer-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c1194f2b1dce84ab366ed3290f05e5bc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5737, "upload_time": "2018-04-26T23:55:17", "upload_time_iso_8601": "2018-04-26T23:55:17.775432Z", "url": "https://files.pythonhosted.org/packages/2d/00/fcef450719c43245921256885eff5653619069a247800844093554944177/broqer-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2dd3cd05dde9ebb8faba2a5e3e338f02", "sha256": "83198a048d7be2bc484af2397a907971667f54504350fef715faa622b87c3f17"}, "downloads": -1, "filename": "broqer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2dd3cd05dde9ebb8faba2a5e3e338f02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7610, "upload_time": "2018-04-26T23:55:18", "upload_time_iso_8601": "2018-04-26T23:55:18.878556Z", "url": "https://files.pythonhosted.org/packages/f6/dd/f87be0ffbdcb32e25b790da1d00b234f4538f434ac73b2d8308737e6caab/broqer-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "935da6ac1fd44051cb07c6da9d0f70e3", "sha256": "b2757cc3ed15e5324f009cee90a35aecfa5cb2905d14fd4107b148627a501862"}, "downloads": -1, "filename": "broqer-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "935da6ac1fd44051cb07c6da9d0f70e3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5714, "upload_time": "2018-04-27T00:16:00", "upload_time_iso_8601": "2018-04-27T00:16:00.911976Z", "url": "https://files.pythonhosted.org/packages/19/2b/02d9dbcc4d0b0dec71630f2611fef78d22c991aa667615f671aebd622575/broqer-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7225f65f94fe30d5d4f92aa756bfba01", "sha256": "1f5eabcc329a0570d10babfa32eaf2476c898b6c7696cac6ce47d1a5dc074d4d"}, "downloads": -1, "filename": "broqer-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7225f65f94fe30d5d4f92aa756bfba01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7593, "upload_time": "2018-04-27T00:16:02", "upload_time_iso_8601": "2018-04-27T00:16:02.407098Z", "url": "https://files.pythonhosted.org/packages/3b/66/a0d87c0a27c51020b313d54098c3fcfcd941dc4df5b726ba5c0c914ee818/broqer-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "67a57511bb2805db76592740375e5783", "sha256": "8fa60e7aab288220bb4f08f7d57e19b380968a6cbd5a49f115321f9b19d15a05"}, "downloads": -1, "filename": "broqer-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "67a57511bb2805db76592740375e5783", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5720, "upload_time": "2018-04-27T00:40:06", "upload_time_iso_8601": "2018-04-27T00:40:06.694479Z", "url": "https://files.pythonhosted.org/packages/c3/21/d09753f4fd048b1af198e0b1df8eda4d09d27ea82cce954e5b935feb87a9/broqer-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf8b8b4e0367682c52aa724699aacd6e", "sha256": "f2738fff5f8553139fa6be2ac3400ebdbf5de35e500497cbb7e18de0bb2b1c72"}, "downloads": -1, "filename": "broqer-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bf8b8b4e0367682c52aa724699aacd6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7601, "upload_time": "2018-04-27T00:40:07", "upload_time_iso_8601": "2018-04-27T00:40:07.925328Z", "url": "https://files.pythonhosted.org/packages/2c/62/7e1423bfccfb851a8bfc7e17a2b5b0fbe671f7e448ca091dcba33bc0a03b/broqer-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "f19d7a3036c15ba68b0c0e54db8ab35b", "sha256": "2221e4b29bb12068b99d5ab4735768001c96dd8511e5f33a5febea5b1c71aae4"}, "downloads": -1, "filename": "broqer-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f19d7a3036c15ba68b0c0e54db8ab35b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27893, "upload_time": "2018-04-29T20:56:44", "upload_time_iso_8601": "2018-04-29T20:56:44.767732Z", "url": "https://files.pythonhosted.org/packages/ff/13/90c493211f58805c0cf3574888cc67fe473ea3d5ad328145dde6e9e0b46a/broqer-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1268da57529fbe54202cbeeb351a2da", "sha256": "48eca1670c333b3e4750d236b36d3813de4315172c9fea5b851235db933084b2"}, "downloads": -1, "filename": "broqer-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c1268da57529fbe54202cbeeb351a2da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16181, "upload_time": "2018-04-29T20:56:45", "upload_time_iso_8601": "2018-04-29T20:56:45.752939Z", "url": "https://files.pythonhosted.org/packages/a3/cb/8e22cf34bfb95e7395bc0cf97b7007df2e268cc3273e9de230220875d201/broqer-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "388f7b1810c3e2f2d652cc308b6a4a6d", "sha256": "b1e51beecc140b266ba53d0a0e816a3b9c685fd2acb51b8480bd3512b0179d09"}, "downloads": -1, "filename": "broqer-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "388f7b1810c3e2f2d652cc308b6a4a6d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27891, "upload_time": "2018-04-29T21:23:24", "upload_time_iso_8601": "2018-04-29T21:23:24.316917Z", "url": "https://files.pythonhosted.org/packages/dd/97/c8049b177dac80253814e4d813ea0b6f9c63225734b67bedeaf1c42ff82f/broqer-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc505b41f563e8ee4d82afc3b7ad6a6a", "sha256": "5ada91a4562a33faf18e6173211b4a2247ed9ef4f4fa0ac1efa7ec88131194e0"}, "downloads": -1, "filename": "broqer-0.1.5.tar.gz", "has_sig": false, "md5_digest": "bc505b41f563e8ee4d82afc3b7ad6a6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16173, "upload_time": "2018-04-29T21:23:25", "upload_time_iso_8601": "2018-04-29T21:23:25.304824Z", "url": "https://files.pythonhosted.org/packages/ce/db/9584878b89427ca6fa36936222225fc6cb68645477c98c64cc390ba3ba5a/broqer-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2a8331d9570ae3b1fa33e852fe5c1369", "sha256": "a588997fe61a0419c17aeb1828369a5265d24fdcfb003a55c68ed4b36712b8cb"}, "downloads": -1, "filename": "broqer-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2a8331d9570ae3b1fa33e852fe5c1369", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 32397, "upload_time": "2018-05-28T21:00:14", "upload_time_iso_8601": "2018-05-28T21:00:14.348220Z", "url": "https://files.pythonhosted.org/packages/24/05/059dbc2d3c76d537fcdf3ff5b6c51e59c27878dd9540e2ebb2769170b9b4/broqer-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dd528266321619dd11cc7d13f5ee02a", "sha256": "29260c1743b135a4ed1749f66c485325a34e8c0a6d8eda01db12e2aa1719299d"}, "downloads": -1, "filename": "broqer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1dd528266321619dd11cc7d13f5ee02a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18731, "upload_time": "2018-05-28T21:00:15", "upload_time_iso_8601": "2018-05-28T21:00:15.776957Z", "url": "https://files.pythonhosted.org/packages/fa/c5/cc94480cbc36839a9b5fbfc175a23dc4cef3fc799b1b814053390c729ac0/broqer-0.2.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "3382bed7426ad059c48e91c73c4a7775", "sha256": "91c7061ccb86e2b7ddf867d0b85e5be445515f82554a4e02589dc0e097c7a9eb"}, "downloads": -1, "filename": "broqer-0.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3382bed7426ad059c48e91c73c4a7775", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78413, "upload_time": "2018-09-30T14:53:26", "upload_time_iso_8601": "2018-09-30T14:53:26.001692Z", "url": "https://files.pythonhosted.org/packages/ae/98/af8ed5dd394580464fc8d924f8f4d7e2f10998b034d2794a32676ba6d88a/broqer-0.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca6e59cbc44b559dd2478236aa146923", "sha256": "5eeb1e4e1d928f9ed3b800689f6523838678e7a3c6836dba33388c9f254b458c"}, "downloads": -1, "filename": "broqer-0.9.0.tar.gz", "has_sig": false, "md5_digest": "ca6e59cbc44b559dd2478236aa146923", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53489, "upload_time": "2018-09-30T14:53:27", "upload_time_iso_8601": "2018-09-30T14:53:27.504713Z", "url": "https://files.pythonhosted.org/packages/cc/33/1656b16750095881338278728fc45f7046dada60cc18c62c76ac1c325dc9/broqer-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "8b5e308b62bf1c33266ac644963248e0", "sha256": "e29006b4a743ef91bd2f45213f51f0b1511a28e0691f056184f4c949c8b4cea0"}, "downloads": -1, "filename": "broqer-0.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8b5e308b62bf1c33266ac644963248e0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78425, "upload_time": "2019-01-08T09:10:54", "upload_time_iso_8601": "2019-01-08T09:10:54.662440Z", "url": "https://files.pythonhosted.org/packages/01/0a/ea72e504247b6fd395724d357a369c000823d9694c268ca79ad00b18aac7/broqer-0.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2324edf08ddc27e23bd72113e25cb0d7", "sha256": "dbef16fdb7ae49a3424eec4bc20049b43992284fd0c6fd15c5a0727fd549e72c"}, "downloads": -1, "filename": "broqer-0.9.1.tar.gz", "has_sig": false, "md5_digest": "2324edf08ddc27e23bd72113e25cb0d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52055, "upload_time": "2019-01-08T09:10:56", "upload_time_iso_8601": "2019-01-08T09:10:56.487973Z", "url": "https://files.pythonhosted.org/packages/ba/d2/c34ee61f5d4a6cbc7bf7741720f3509fb47b704e19620102d35ac0f45198/broqer-0.9.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "f5471ea93e25d79db3f1d179b9090975", "sha256": "5de8410c72fffcdf50e7e5f0f4dec9dbdbedb94c6a2aea01b8e93c7b8b7638d3"}, "downloads": -1, "filename": "broqer-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f5471ea93e25d79db3f1d179b9090975", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 81759, "upload_time": "2019-01-16T09:45:49", "upload_time_iso_8601": "2019-01-16T09:45:49.928725Z", "url": "https://files.pythonhosted.org/packages/35/4e/5474fcc3d8d5e946553d679cb30f3391b1a7948322a4fe3f2dc8c2c84c48/broqer-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "479e860fc634954c4adccb0ba627e2b3", "sha256": "d63cf26ead202f3d57f3349689b0029891962190a5caf03c29073cebc27b0323"}, "downloads": -1, "filename": "broqer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "479e860fc634954c4adccb0ba627e2b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54387, "upload_time": "2019-01-16T09:45:51", "upload_time_iso_8601": "2019-01-16T09:45:51.674440Z", "url": "https://files.pythonhosted.org/packages/40/75/960735903fdc55f07c592f0496ae3a006439760500019470751ea5b0fe57/broqer-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "9f1caf0d7b916859c76e4bb47a40b40f", "sha256": "681d5357176684acf2b6bf8ee34521f8225941ac244bb9cf35dc430d8c821947"}, "downloads": -1, "filename": "broqer-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9f1caf0d7b916859c76e4bb47a40b40f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 84063, "upload_time": "2019-01-16T12:19:56", "upload_time_iso_8601": "2019-01-16T12:19:56.152157Z", "url": "https://files.pythonhosted.org/packages/43/6d/5cde3f7969f5b8e3db96596752718db64b5072f46324200c04a4555020fe/broqer-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3553dfb2824c53a203fec9d04f9643c5", "sha256": "8bf63f6373cd4591bd5bb7323bebacab0161bc47c3e1c2da0a565630e69273dc"}, "downloads": -1, "filename": "broqer-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3553dfb2824c53a203fec9d04f9643c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55264, "upload_time": "2019-01-16T12:19:57", "upload_time_iso_8601": "2019-01-16T12:19:57.654328Z", "url": "https://files.pythonhosted.org/packages/41/d2/9c0f7ae1b029e68a54c3a181c88dd7113df671bc93ab940d064368cd9dd5/broqer-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "67725a65337f04223854447686178841", "sha256": "a31cb4011c68116a61efb0bfa05e97307d7082b5134c2cfbc3a3c625b8b6dc08"}, "downloads": -1, "filename": "broqer-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "67725a65337f04223854447686178841", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 84310, "upload_time": "2019-04-01T22:16:46", "upload_time_iso_8601": "2019-04-01T22:16:46.578612Z", "url": "https://files.pythonhosted.org/packages/43/73/9db3190d7f99c109d84dd10503b927eaa0f53251bb344656bdedc8aea622/broqer-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69eee884d2b51d464ecb78813c196ec8", "sha256": "aabb187af50a74664b1b8fddc7a7768e2ad7b01a22d8d1ceef4876a5328769fd"}, "downloads": -1, "filename": "broqer-1.0.2.tar.gz", "has_sig": false, "md5_digest": "69eee884d2b51d464ecb78813c196ec8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55578, "upload_time": "2019-04-01T22:16:48", "upload_time_iso_8601": "2019-04-01T22:16:48.090123Z", "url": "https://files.pythonhosted.org/packages/d6/0b/396109a2f4de38e3aa19c330fd4807e1d7f7d7d16592884a30bc3a285257/broqer-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "67725a65337f04223854447686178841", "sha256": "a31cb4011c68116a61efb0bfa05e97307d7082b5134c2cfbc3a3c625b8b6dc08"}, "downloads": -1, "filename": "broqer-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "67725a65337f04223854447686178841", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 84310, "upload_time": "2019-04-01T22:16:46", "upload_time_iso_8601": "2019-04-01T22:16:46.578612Z", "url": "https://files.pythonhosted.org/packages/43/73/9db3190d7f99c109d84dd10503b927eaa0f53251bb344656bdedc8aea622/broqer-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69eee884d2b51d464ecb78813c196ec8", "sha256": "aabb187af50a74664b1b8fddc7a7768e2ad7b01a22d8d1ceef4876a5328769fd"}, "downloads": -1, "filename": "broqer-1.0.2.tar.gz", "has_sig": false, "md5_digest": "69eee884d2b51d464ecb78813c196ec8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55578, "upload_time": "2019-04-01T22:16:48", "upload_time_iso_8601": "2019-04-01T22:16:48.090123Z", "url": "https://files.pythonhosted.org/packages/d6/0b/396109a2f4de38e3aa19c330fd4807e1d7f7d7d16592884a30bc3a285257/broqer-1.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:15 2020"}