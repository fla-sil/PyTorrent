{"info": {"author": "David Fierro, Guillermo Menendez, N. Angulo & Charles Gordon", "author_email": "info@touchvie.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Database"], "description": "pyelasticache_client\n========================\n\n.. image:: https://travis-ci.org/touchvie/pyelasticache_client.svg?branch=master\n    :target: https://travis-ci.org/touchvie/pyelasticache_client\n\n.. image:: https://img.shields.io/pypi/v/pyelasticache_client.svg\n    :target: https://pypi.python.org/pypi/pyelasticache_client\n\nA comprehensive, fast, pure-Python memcached client with consistent key hashing \nand node autodiscovery.\nForked from the Pinterest pymemcache project:\n\nhttps://github.com/pinterest/pymemcache\n\n\npyelasticache_client supports the following features:\n\n* Complete implementation of the memcached text protocol.\n* Configurable timeouts for socket connect and send/recv calls.\n* Access to the \"noreply\" flag, which can significantly increase the speed of writes.\n* Flexible, simple approach to serialization and deserialization.\n* The (optional) ability to treat network and memcached errors as cache misses.\n* Optional use of Ketama hashing to consistently distribute cache keys on nodes.\n* Automatic cluster nodes autodiscovery and update through the \"config cluster\" option\n\nInstalling pyelasticache_client\n===================================\n\nInstall from pip:\n\n.. code-block:: bash\n\n  pip install pyelasticache_client\n\nFor development, clone from github and run the tests with:\n\n.. code-block:: bash\n\n    git clone https://github.com/touchvie/pyelasticache_client.git\n    cd pyelasticache_client\n    python setup.py nosetests\n\nUsage\n=====\n\nSee the documentation here: http://pymemcache.readthedocs.org/en/latest/\n\nComparison with Other Libraries\n===============================\n\npylibmc\n-------\n\nThe pylibmc library is a wrapper around libmemcached, implemented in C. It is\nfast, implements consistent hashing, the full memcached protocol and timeouts.\nIt does not provide access to the \"noreply\" flag, and it doesn't provide a\nbuilt-in API for serialization and deserialization. It also isn't pure Python,\nso using it with libraries like gevent is out of the question.\n\nPython-memcache\n---------------\n\nThe python-memcache library implements the entire memcached text protocol, has\na single timeout for all socket calls and has a flexible approach to\nserialization and deserialization. It is also written entirely in Python, so\nit works well with libraries like gevent. However, it is tied to using thread\nlocals, doesn't implement \"noreply\", can't treat errors as cache misses and is\nslower than both pylibmc and pymemcache. It is also tied to a specific method\nfor handling clusters of memcached servers.\n\nmemcache_client\n---------------\n\nThe team at mixpanel put together a pure Python memcached client as well. It\nhas more fine grained support for socket timeouts, only connects to a single\nhost. However, it doesn't support most of the memcached API (just get, set,\ndelete and stats), doesn't support \"noreply\", has no serialization or\ndeserialization support and can't treat errors as cache misses.\n\nExternal Links\n==============\n\nThe memcached text protocol reference page:\n  https://github.com/memcached/memcached/blob/master/doc/protocol.txt\n\nThe python-memcached library (another pure-Python library):\n  https://github.com/linsomniac/python-memcached\n\nMixpanel's Blog post about their memcached client for Python:\n  http://code.mixpanel.com/2012/07/16/we-went-down-so-we-wrote-a-better-pure-python-memcache-client/\n\nMixpanel's pure Python memcached client:\n  https://github.com/mixpanel/memcache_client\n\nKetama hashing algorithm:\n  http://www.last.fm/user/RJ/journal/2007/04/10/rz_libketama_-_a_consistent_hashing_algo_for_memcache_clients\n\nMemcached autodiscovery feature:\n  http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/AutoDiscovery.AddingToYourClientLibrary.html\n\n\nCredits\n=======\n\n* `Charles Gordon <http://github.com/cgordon>`_\n* `Dave Dash <http://github.com/davedash>`_\n* `Dan Crosta <http://github.com/dcrosta>`_\n* `Julian Berman <http://github.com/Julian>`_\n* `Mark Shirley <http://github.com/maspwr>`_\n* `Tim Bart <http://github.com/pims>`_\n* `Thomas Orozco <http://github.com/krallin>`_\n* `Marc Abramowitz <http://github.com/msabramo>`_\n* `Marc-Andre Courtois <http://github.com/mcourtois>`_\n* `Julien Danjou <http://github.com/jd>`_\n* `INADA Naoki <http://github.com/methane>`_\n* `James Socol <http://github.com/jsocol>`_\n* `Joshua Harlow <http://github.com/harlowja>`_\n* `John Anderson <http://github.com/sontek>`_\n* `Adam Chainz <http://github.com/adamchainz>`_\n* `Ernest W. Durbin III <https://github.com/ewdurbin>`_\n* `Remco van Oosterhout <https://github.com/Vhab>`_\n* `David Fierro <https://github.com/davidfierro>`_\n* `Guillermo Men\u00e9ndez <https://github.com/gmcorral>`_\n* `Natalia Angulo <https://github.com/AnguloHerrera>`_\n\nChange Log\n==========\nNew in version 1.3.5\n--------------------\n* Bug fix for HashClient when retries is set to zero.\n* Adding the VERSION command to the clients.\n\nNew in version 1.3.4\n--------------------\n* Bug fix for the HashClient that corrects behavior when there are no working servers.\n\nNew in version 1.3.3\n--------------------\n* Adding caching to the Travis build.\n* A bug fix for pluggable hashing in HashClient.\n* Adding a default_noreply argument to the Client ctor.\n\nNew in version 1.3.2\n--------------------\n* Making the location of Memcache Exceptions backwards compatible.\n\nNew in version 1.3.0\n--------------------\n* Python 3 Support\n* Introduced HashClient that uses consistent hasing for allocating keys across many memcached nodes. It also can detect servers going down and rebalance keys across the available nodes.\n* Retry sock.recv() when it raises EINTR\n\nNew in version 1.2.9\n--------------------\n* Introduced PooledClient a thread-safe pool of clients", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/touchvie/pyelasticache_client", "keywords": "AWS,elasticache,memcached,autodiscovery", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "pyelasticache_client", "package_url": "https://pypi.org/project/pyelasticache_client/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyelasticache_client/", "project_urls": {"Homepage": "https://github.com/touchvie/pyelasticache_client"}, "release_url": "https://pypi.org/project/pyelasticache_client/0.1.3/", "requires_dist": ["six", "sortedcontainers"], "requires_python": "", "summary": "A comprehensive, fast, pure Python memcached client", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            pyelasticache_client<br>========================<br><br>.. image:: https://travis-ci.org/touchvie/pyelasticache_client.svg?branch=master<br>    :target: https://travis-ci.org/touchvie/pyelasticache_client<br><br>.. image:: https://img.shields.io/pypi/v/pyelasticache_client.svg<br>    :target: https://pypi.python.org/pypi/pyelasticache_client<br><br>A comprehensive, fast, pure-Python memcached client with consistent key hashing <br>and node autodiscovery.<br>Forked from the Pinterest pymemcache project:<br><br>https://github.com/pinterest/pymemcache<br><br><br>pyelasticache_client supports the following features:<br><br>* Complete implementation of the memcached text protocol.<br>* Configurable timeouts for socket connect and send/recv calls.<br>* Access to the \"noreply\" flag, which can significantly increase the speed of writes.<br>* Flexible, simple approach to serialization and deserialization.<br>* The (optional) ability to treat network and memcached errors as cache misses.<br>* Optional use of Ketama hashing to consistently distribute cache keys on nodes.<br>* Automatic cluster nodes autodiscovery and update through the \"config cluster\" option<br><br>Installing pyelasticache_client<br>===================================<br><br>Install from pip:<br><br>.. code-block:: bash<br><br>  pip install pyelasticache_client<br><br>For development, clone from github and run the tests with:<br><br>.. code-block:: bash<br><br>    git clone https://github.com/touchvie/pyelasticache_client.git<br>    cd pyelasticache_client<br>    python setup.py nosetests<br><br>Usage<br>=====<br><br>See the documentation here: http://pymemcache.readthedocs.org/en/latest/<br><br>Comparison with Other Libraries<br>===============================<br><br>pylibmc<br>-------<br><br>The pylibmc library is a wrapper around libmemcached, implemented in C. It is<br>fast, implements consistent hashing, the full memcached protocol and timeouts.<br>It does not provide access to the \"noreply\" flag, and it doesn't provide a<br>built-in API for serialization and deserialization. It also isn't pure Python,<br>so using it with libraries like gevent is out of the question.<br><br>Python-memcache<br>---------------<br><br>The python-memcache library implements the entire memcached text protocol, has<br>a single timeout for all socket calls and has a flexible approach to<br>serialization and deserialization. It is also written entirely in Python, so<br>it works well with libraries like gevent. However, it is tied to using thread<br>locals, doesn't implement \"noreply\", can't treat errors as cache misses and is<br>slower than both pylibmc and pymemcache. It is also tied to a specific method<br>for handling clusters of memcached servers.<br><br>memcache_client<br>---------------<br><br>The team at mixpanel put together a pure Python memcached client as well. It<br>has more fine grained support for socket timeouts, only connects to a single<br>host. However, it doesn't support most of the memcached API (just get, set,<br>delete and stats), doesn't support \"noreply\", has no serialization or<br>deserialization support and can't treat errors as cache misses.<br><br>External Links<br>==============<br><br>The memcached text protocol reference page:<br>  https://github.com/memcached/memcached/blob/master/doc/protocol.txt<br><br>The python-memcached library (another pure-Python library):<br>  https://github.com/linsomniac/python-memcached<br><br>Mixpanel's Blog post about their memcached client for Python:<br>  http://code.mixpanel.com/2012/07/16/we-went-down-so-we-wrote-a-better-pure-python-memcache-client/<br><br>Mixpanel's pure Python memcached client:<br>  https://github.com/mixpanel/memcache_client<br><br>Ketama hashing algorithm:<br>  http://www.last.fm/user/RJ/journal/2007/04/10/rz_libketama_-_a_consistent_hashing_algo_for_memcache_clients<br><br>Memcached autodiscovery feature:<br>  http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/AutoDiscovery.AddingToYourClientLibrary.html<br><br><br>Credits<br>=======<br><br>* `Charles Gordon &lt;http://github.com/cgordon&gt;`_<br>* `Dave Dash &lt;http://github.com/davedash&gt;`_<br>* `Dan Crosta &lt;http://github.com/dcrosta&gt;`_<br>* `Julian Berman &lt;http://github.com/Julian&gt;`_<br>* `Mark Shirley &lt;http://github.com/maspwr&gt;`_<br>* `Tim Bart &lt;http://github.com/pims&gt;`_<br>* `Thomas Orozco &lt;http://github.com/krallin&gt;`_<br>* `Marc Abramowitz &lt;http://github.com/msabramo&gt;`_<br>* `Marc-Andre Courtois &lt;http://github.com/mcourtois&gt;`_<br>* `Julien Danjou &lt;http://github.com/jd&gt;`_<br>* `INADA Naoki &lt;http://github.com/methane&gt;`_<br>* `James Socol &lt;http://github.com/jsocol&gt;`_<br>* `Joshua Harlow &lt;http://github.com/harlowja&gt;`_<br>* `John Anderson &lt;http://github.com/sontek&gt;`_<br>* `Adam Chainz &lt;http://github.com/adamchainz&gt;`_<br>* `Ernest W. Durbin III &lt;https://github.com/ewdurbin&gt;`_<br>* `Remco van Oosterhout &lt;https://github.com/Vhab&gt;`_<br>* `David Fierro &lt;https://github.com/davidfierro&gt;`_<br>* `Guillermo Men\u00e9ndez &lt;https://github.com/gmcorral&gt;`_<br>* `Natalia Angulo &lt;https://github.com/AnguloHerrera&gt;`_<br><br>Change Log<br>==========<br>New in version 1.3.5<br>--------------------<br>* Bug fix for HashClient when retries is set to zero.<br>* Adding the VERSION command to the clients.<br><br>New in version 1.3.4<br>--------------------<br>* Bug fix for the HashClient that corrects behavior when there are no working servers.<br><br>New in version 1.3.3<br>--------------------<br>* Adding caching to the Travis build.<br>* A bug fix for pluggable hashing in HashClient.<br>* Adding a default_noreply argument to the Client ctor.<br><br>New in version 1.3.2<br>--------------------<br>* Making the location of Memcache Exceptions backwards compatible.<br><br>New in version 1.3.0<br>--------------------<br>* Python 3 Support<br>* Introduced HashClient that uses consistent hasing for allocating keys across many memcached nodes. It also can detect servers going down and rebalance keys across the available nodes.<br>* Retry sock.recv() when it raises EINTR<br><br>New in version 1.2.9<br>--------------------<br>* Introduced PooledClient a thread-safe pool of clients\n          </div>"}, "last_serial": 2177518, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7c47a0475819035356d05645e107fb44", "sha256": "a1a993d48ffcba9954bfa8fb9143471bd0fa238d76e199fe7a2f44c934bc52d8"}, "downloads": -1, "filename": "pyelasticache_client-0.1.zip", "has_sig": false, "md5_digest": "7c47a0475819035356d05645e107fb44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18432, "upload_time": "2016-05-05T10:00:40", "upload_time_iso_8601": "2016-05-05T10:00:40.677786Z", "url": "https://files.pythonhosted.org/packages/da/7e/323c734724e40c473c24df552c7bd4a4dd41cca74729b87145a8c2312f40/pyelasticache_client-0.1.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "311c7d760d60f0d0df8608faa248bec2", "sha256": "c63a9e78aae6bc21a3bf7d17674651795228081cc67ae77367d6b51d45c7e0bb"}, "downloads": -1, "filename": "pyelasticache_client-0.1.1.zip", "has_sig": false, "md5_digest": "311c7d760d60f0d0df8608faa248bec2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64894, "upload_time": "2016-05-05T10:46:56", "upload_time_iso_8601": "2016-05-05T10:46:56.170768Z", "url": "https://files.pythonhosted.org/packages/43/d1/49f378282b1d4415546b60417472f7178e85ca170d79b3e412fc76705fc5/pyelasticache_client-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a7dd411c94b2d8f594f66e22635d8862", "sha256": "b6cb924dfeb80881029ea38d7228124865a19033c58a2f93c2179ef0d9104fd0"}, "downloads": -1, "filename": "pyelasticache_client-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a7dd411c94b2d8f594f66e22635d8862", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52370, "upload_time": "2016-05-05T15:29:41", "upload_time_iso_8601": "2016-05-05T15:29:41.109107Z", "url": "https://files.pythonhosted.org/packages/b4/fc/7907966efb56f6ac059f183bb95e56b3762d9fc7694c55291e3ac40685e2/pyelasticache_client-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "53e2c068eda5c4a49f211d8c9ab6b0c2", "sha256": "92608b0979534249051af1fab64fd248bbad1b869eaa40a431972cea1525eaa3"}, "downloads": -1, "filename": "pyelasticache_client-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "53e2c068eda5c4a49f211d8c9ab6b0c2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 56664, "upload_time": "2016-06-20T16:24:08", "upload_time_iso_8601": "2016-06-20T16:24:08.342714Z", "url": "https://files.pythonhosted.org/packages/29/fa/785b73273fdda1296e4e3e35cba955ec039821cb88178decc6eb246e871a/pyelasticache_client-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "214664a6d2e4a67d9ae6de19e9922fe5", "sha256": "2fd7e21d84a93a87e72477c18fb89a20271d3ebf4b33996eb6b9845ad05111aa"}, "downloads": -1, "filename": "pyelasticache_client-0.1.3.tar.gz", "has_sig": false, "md5_digest": "214664a6d2e4a67d9ae6de19e9922fe5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52333, "upload_time": "2016-06-20T16:24:12", "upload_time_iso_8601": "2016-06-20T16:24:12.291830Z", "url": "https://files.pythonhosted.org/packages/c1/8f/48b0386cedc1e395ac1ea44dccc043f589735ab2d0cc8b4fecc00fd44abc/pyelasticache_client-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "53e2c068eda5c4a49f211d8c9ab6b0c2", "sha256": "92608b0979534249051af1fab64fd248bbad1b869eaa40a431972cea1525eaa3"}, "downloads": -1, "filename": "pyelasticache_client-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "53e2c068eda5c4a49f211d8c9ab6b0c2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 56664, "upload_time": "2016-06-20T16:24:08", "upload_time_iso_8601": "2016-06-20T16:24:08.342714Z", "url": "https://files.pythonhosted.org/packages/29/fa/785b73273fdda1296e4e3e35cba955ec039821cb88178decc6eb246e871a/pyelasticache_client-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "214664a6d2e4a67d9ae6de19e9922fe5", "sha256": "2fd7e21d84a93a87e72477c18fb89a20271d3ebf4b33996eb6b9845ad05111aa"}, "downloads": -1, "filename": "pyelasticache_client-0.1.3.tar.gz", "has_sig": false, "md5_digest": "214664a6d2e4a67d9ae6de19e9922fe5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52333, "upload_time": "2016-06-20T16:24:12", "upload_time_iso_8601": "2016-06-20T16:24:12.291830Z", "url": "https://files.pythonhosted.org/packages/c1/8f/48b0386cedc1e395ac1ea44dccc043f589735ab2d0cc8b4fecc00fd44abc/pyelasticache_client-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:29 2020"}