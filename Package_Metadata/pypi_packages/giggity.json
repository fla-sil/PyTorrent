{"info": {"author": "Adam Musciano", "author_email": "amusciano@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "#  Giggity - grab hierarchical data about a github organization, user, or repo\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/9204902/51312125-3aa4d700-1a53-11e9-89e8-a02063d93595.gif\"></img>\n</p>\n\nGet information about an organization, user, or repo on github. Stores all data in a json file, organized in a tree of dictionaries for easy database transfer or data analysis. All done through the github api, with or without authentication (authentication highly recommended).\n\n## Setup\n\n`pip3 install giggity`\n\n\nor clone the repository and run: \n\n`pip3 install -r requirements.txt`\n\n\n## Operation\n\n```\ngiggity.py [-h] [-v] [-a] [-u] [-o] [-O OUTPUT] path\n\npositional arguments:\n  path                  name of organization or user (or url of repository)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         increase output verbosity\n  -a, --authenticate    allows github authentication to avoid ratelimiting\n  -u, --user            denotes that given input is a user\n  -o, --org             denotes that given input is an organization\n  -O OUTPUT, --outfile OUTPUT\n                        location to put generated json file\n\n```\n\n**Example of Scraping a User**\n\n    python3 giggity.py -a -O needmorecowbell.json -v -u needmorecowbell\n\n- This will ask for authentication credentials, put the program into verbose mode, scrape github for the user needmorecowbell, then put the results into needmorecowbell.json\n\n**Example of Scraping an Organization**\n\n    python3 giggity.py -a -o github -O github.json\n\n- This will ask for authentication, scrape the github organization on github, then put out the results in github.json\n\n**Giggity as a Module** \n\n- giggity can also be used as a module -- all data is stored within orgTree as a nested dict.\n\n```python\nfrom giggity import giggity\n\ng = giggity(\"username\",\"password\")\ndata = g.getUsers(\"organization-name\", followers=True)\n\nprint(\"List of users in organization: \")\nfor user, info in data.items():\n    print(user)\n\ndata = g.getEmails(\"username\", verbose=True) # Get any emails found\n```\n\n**Other examples of how to use giggity are available in the util folder.**\n\n**Example Output**\n\n\nWhen `python3 giggity.py -a -u geohot -O output.json` is used..\n\noutput.json contains: \n\n```json\n{\n    \"emails\": [\n        \"george@comma.ai\",\n        \"other emails taken out of example\"\n    \n    ],\n    \"names\": [\n        \"Charles Ellis\",\n        \"George Hotz\"\n    ],\n    \"repos\": {\n        \"ORB_SLAM2\": {\n            \"created_at\": \"2017-04-08T00:21:13Z\",\n            \"description\": \"ORBSLAM2 running on Mac OS X cause I was on a plane and bored and maybe useful for someone?\",\n            \"fork\": true,\n            \"name\": \"ORB_SLAM2\",\n            \"updated_at\": \"2018-10-22T23:51:28Z\",\n            \"url\": \"https://github.com/geohot/ORB_SLAM2\"\n        },\n        { Many more repositories cut out for the example },\n        \"xnu-deps-linux\": {\n            \"created_at\": \"2013-10-02T00:36:29Z\",\n            \"description\": \"Mig/cctools for Linux combo makefile thingy\",\n            \"fork\": true,\n            \"name\": \"xnu-deps-linux\",\n            \"updated_at\": \"2016-05-01T16:04:45Z\",\n            \"url\": \"https://github.com/geohot/xnu-deps-linux\"\n        }\n    }\n}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/needmorecowbell/giggity", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "giggity", "package_url": "https://pypi.org/project/giggity/", "platform": "", "project_url": "https://pypi.org/project/giggity/", "project_urls": {"Homepage": "https://github.com/needmorecowbell/giggity"}, "release_url": "https://pypi.org/project/giggity/1.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "CLI Git Sleuth Tool", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Giggity - grab hierarchical data about a github organization, user, or repo</h1>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c264fa28c0ac5792a5de5428aa2858f69785057/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f393230343930322f35313331323132352d33616134643730302d316135332d313165392d383965382d6130323036336439333539352e676966\">\n</p>\n<p>Get information about an organization, user, or repo on github. Stores all data in a json file, organized in a tree of dictionaries for easy database transfer or data analysis. All done through the github api, with or without authentication (authentication highly recommended).</p>\n<h2>Setup</h2>\n<p><code>pip3 install giggity</code></p>\n<p>or clone the repository and run:</p>\n<p><code>pip3 install -r requirements.txt</code></p>\n<h2>Operation</h2>\n<pre><code>giggity.py [-h] [-v] [-a] [-u] [-o] [-O OUTPUT] path\n\npositional arguments:\n  path                  name of organization or user (or url of repository)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         increase output verbosity\n  -a, --authenticate    allows github authentication to avoid ratelimiting\n  -u, --user            denotes that given input is a user\n  -o, --org             denotes that given input is an organization\n  -O OUTPUT, --outfile OUTPUT\n                        location to put generated json file\n\n</code></pre>\n<p><strong>Example of Scraping a User</strong></p>\n<pre><code>python3 giggity.py -a -O needmorecowbell.json -v -u needmorecowbell\n</code></pre>\n<ul>\n<li>This will ask for authentication credentials, put the program into verbose mode, scrape github for the user needmorecowbell, then put the results into needmorecowbell.json</li>\n</ul>\n<p><strong>Example of Scraping an Organization</strong></p>\n<pre><code>python3 giggity.py -a -o github -O github.json\n</code></pre>\n<ul>\n<li>This will ask for authentication, scrape the github organization on github, then put out the results in github.json</li>\n</ul>\n<p><strong>Giggity as a Module</strong></p>\n<ul>\n<li>giggity can also be used as a module -- all data is stored within orgTree as a nested dict.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">giggity</span> <span class=\"kn\">import</span> <span class=\"n\">giggity</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">giggity</span><span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span><span class=\"s2\">\"password\"</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">getUsers</span><span class=\"p\">(</span><span class=\"s2\">\"organization-name\"</span><span class=\"p\">,</span> <span class=\"n\">followers</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"List of users in organization: \"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">info</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">getEmails</span><span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># Get any emails found</span>\n</pre>\n<p><strong>Other examples of how to use giggity are available in the util folder.</strong></p>\n<p><strong>Example Output</strong></p>\n<p>When <code>python3 giggity.py -a -u geohot -O output.json</code> is used..</p>\n<p>output.json contains:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"emails\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"george@comma.ai\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"other emails taken out of example\"</span>\n    \n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"names\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"Charles Ellis\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"George Hotz\"</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"repos\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"ORB_SLAM2\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2017-04-08T00:21:13Z\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ORBSLAM2 running on Mac OS X cause I was on a plane and bored and maybe useful for someone?\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"fork\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ORB_SLAM2\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"updated_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2018-10-22T23:51:28Z\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://github.com/geohot/ORB_SLAM2\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"err\">{</span> <span class=\"err\">Many</span> <span class=\"err\">more</span> <span class=\"err\">repositories</span> <span class=\"err\">cut</span> <span class=\"err\">out</span> <span class=\"err\">for</span> <span class=\"err\">the</span> <span class=\"err\">example</span> <span class=\"p\">},</span>\n        <span class=\"nt\">\"xnu-deps-linux\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2013-10-02T00:36:29Z\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mig/cctools for Linux combo makefile thingy\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"fork\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"xnu-deps-linux\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"updated_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2016-05-01T16:04:45Z\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://github.com/geohot/xnu-deps-linux\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"err\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6646700, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "192f794ae1add50c6d250f46cfa1d5cc", "sha256": "7c7e33908f23dc6c21a33af491c145118e8b8c7d78fd400d2b4ce07c286b9456"}, "downloads": -1, "filename": "giggity-1.0.0.tar.gz", "has_sig": false, "md5_digest": "192f794ae1add50c6d250f46cfa1d5cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4545, "upload_time": "2020-02-17T14:47:35", "upload_time_iso_8601": "2020-02-17T14:47:35.270163Z", "url": "https://files.pythonhosted.org/packages/8c/4d/febeac349abeb09fa4e7c32aaad101515c7d1cdaba71eda86c2e9176c107/giggity-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6fa97506041ba3b0c53999516366b361", "sha256": "5d64ec07b908c4e6452e02d196be946e985b586df93ed17d5ed420bf443d1c0c"}, "downloads": -1, "filename": "giggity-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6fa97506041ba3b0c53999516366b361", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5117, "upload_time": "2020-02-17T15:01:41", "upload_time_iso_8601": "2020-02-17T15:01:41.279896Z", "url": "https://files.pythonhosted.org/packages/f9/63/e601e0031b7377c88a0e6e55727a226298e747856f381135db41ccb651f7/giggity-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6fa97506041ba3b0c53999516366b361", "sha256": "5d64ec07b908c4e6452e02d196be946e985b586df93ed17d5ed420bf443d1c0c"}, "downloads": -1, "filename": "giggity-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6fa97506041ba3b0c53999516366b361", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5117, "upload_time": "2020-02-17T15:01:41", "upload_time_iso_8601": "2020-02-17T15:01:41.279896Z", "url": "https://files.pythonhosted.org/packages/f9/63/e601e0031b7377c88a0e6e55727a226298e747856f381135db41ccb651f7/giggity-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:27 2020"}