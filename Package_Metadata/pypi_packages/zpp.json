{"info": {"author": "Julien Bigot", "author_email": "julien.bigot@cea.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "License :: OSI Approved :: MIT License"], "description": "# zpp\n\nThis is zpp, the Z Pre-Processor.\n\nZpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n## Syntax\n\nZpp files are typically named `*.F90.zpp`.\n\nIn these files, the lines that start with `!$SH` are interpreted as bash lines. \nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands `${VAR}` or `$(command)`.\nIf inside a bash control block (`if`, `for`, etc.), the output generation obeys\nthe control statement.\n\nFor example, this code:\n```\n!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n```\n\nWould produce the following result:\n```\nprint *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n```\n\n### Support functions\n\nPredefined bash functions, variable and code can be provided in `.zpp.sh` files\nthat can be included with `#!SH source <filename>.zpp.sh`.\n\n**Beware**: a file NEEDs to have the `.zpp.sh` extension to be included from\nzpp.\n\nZpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.\n\n#### zpp_str_repeat\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times.\n\nParameters:\n1. the string to Repeat\n2. the lower bound of the iterations (inclusive)\n3. the upper bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$3`-`$2`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v5...v6...v7>>\n<<w1>>\n```\n\n#### zpp_str_repeat_reverse\n\nFound in `base.zpp.sh`\n\nOutputs a string multiple times in reverse order.\n\nParameters:\n1. the string to Repeat\n2. the upper bound of the iterations (inclusive)\n3. the lower bound of the iterations (inclusive)\n4. the string separator\n5. the string starter\n6. the string ender\n\nRepeats string `$1` (`$2`-`$3`+1) times, separated by string `$4` inside `$5`\n`$6`.\n* If the number of repetitions is negative, the result is empty.\n* If `$1` contains the '@N' substring, it will be replaced by the iteration\n  number (from `$2` to `$3`, i.e. upper to lower).\n\nexample:\n```\n#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '<<' '>>'\nzpp_str_repeat_reverse w@N 1 1 '...' '<<' '>>'\nzpp_str_repeat_reverse x@N 1 0 '...' '<<' '>>'\n```\noutput:\n```\n<<v7...v6...v5>>\n<<w1>>\n```\n\n#### ZPP_FORT_TYPES\n\nFound in `fortran.zpp.sh`\n\nThe list of types supported by the fortran compiler as zpp:typeIDs.\n\nThe compiler ID should be provided in `ZPP_CONFIG` as `config.<ID>`.\nThe supported predefined IDs are: `Gnu`, `Intel`, `PGI` and `XL`.\nYou can also provide definitions for an additional compiler by defining\n`ZPP_FORT_TYPES` in a file named `config.<ID>.zpp.sh`.\n\nIf you use cmake, it will automatically generate such a file for your compiler\nand define  `ZPP_CONFIG` so you don't have to handle it.\n\n### zpp_fort_array_desc\n\nFound in `fortran.zpp.sh`\n\nOutputs an assumed shaped array descriptor of the provided size.\n\nParameters:\n1. the size of the assumed shaped array\n\nexample:\n```\n#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n```\noutput:\n```\ninteger:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n```\n\n### zpp_fort_ptype\n\nFound in `fortran.zpp.sh`\n\nOutputs the type associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n```\nexample output:\n```\nCHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n```\n\n### zpp_fort_kind\n\nFound in `fortran.zpp.sh`\n\nOutputs the kind associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n```\nexample output:\n```\n1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n```\n\n### zpp_fort_type\n\nFound in `fortran.zpp.sh`\n\nOutputs the full type (with kind included) associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n2. additional attributes for the type\n\nexample:\n```\n#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n```\nexample output:\n```\nCHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n```\n\n### zpp_fort_sizeof\n\nFound in `fortran.zpp.sh`\n\nOutputs the size in bits associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### zpp_fort_io_format\n\nFound in `fortran.zpp.sh`\n\nOutputs an IO descriptor suitable for a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\n### ZPP_HDF5F_TYPES\n\nFound in `hdf5_fortran.zpp.sh`\n\nA list of zpp:typeIDs supported by HDF5.\n\n### hdf5_constant\n\nFound in `hdf5_fortran.zpp.sh`\n\nOutputs the HDF5 type constant associated to a zpp:typeID.\n\nParameters:\n1. a zpp:typeID\n\nexample:\n```\n#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n```\nexample output:\n```\nH5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n```\n\n\n## Command-line interface\n\nZpp basic usage is as follow:\n```\nUsage: zpp [Options...] <source> [<destination>]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n```\n\n## CMake interface\n\nSupport is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.\n\nThere are two ways you can use zpp from your CMake project:\n* with `add_subdirectory`: include zpp in your project and use it directly from\n  there,\n* with `find_package`: install zpp and use it as an external dependency of your\n  project.\n\n#### CMake subdirectory usage\n\nUsing zpp with `add_subdirectory` is very simple.\nJust copy the `zpp` directory in your source and point to it with\n`add_subdirectory(zpp)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_subdirectory`.\n\n#### CMake find usage\n\nUsing zpp with `find_package` is no more complex.\nIf zpp is installed, just add a `find_package(zpp REQUIRED)`.\nThe `zpp_preprocess` then becomes available to process zpp files.\n\nThis is demonstrated in `example/cmake_find`.\n\n## GMake usage\n\nUsing zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.\n\nTo use zpp from a Makefile, include the `share/zpp/zpp.mk` file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the `zpp_COMPILER_ID` variable to the compiler you use and\n`.F90` files will be automatically generated from their `.F90.zpp` equivalent.\nThe `zppFLAGS` variable is automatically passed to zpp similarly to `CFLAGS` or\n`CXXFLAGS` for `cc` and `cxx`.\n\nThis is demonstrated in `example/cmake_makefile`.\n\n## Installation\n\nZpp can be installed using the usual python way with `setup.py`.\n```\n./setup.py --help\n```\n\nThe cmake approach is deprecated.\n\n## FAQ\n\nQ. Isn't zpp redundant with assumed type parameters?\n\nA.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.\n\nIn addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "bash Fortran pre-processor", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "zpp", "package_url": "https://pypi.org/project/zpp/", "platform": "", "project_url": "https://pypi.org/project/zpp/", "project_urls": {"Source Code": "https://github.com/pdidev/zpp/"}, "release_url": "https://pypi.org/project/zpp/1.0.4/", "requires_dist": ["setuptools"], "requires_python": "", "summary": "a Bash Pre-Processor for Fortran. ZPP is useful in order to build clean Fortran90 interfaces. It allows to generate Fortran code for all types, kinds, and array ranks supported by the compiler.", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>zpp</h1>\n<p>This is zpp, the Z Pre-Processor.</p>\n<p>Zpp transforms bash in a pre-processor for F90 source files.\nIt offers a set of functions specifically tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.</p>\n<h2>Syntax</h2>\n<p>Zpp files are typically named <code>*.F90.zpp</code>.</p>\n<p>In these files, the lines that start with <code>!$SH</code> are interpreted as bash lines.\nOther lines are copied as-is, except that variable substitution is operated as\nin a double-quoted string, including bash commands <code>${VAR}</code> or <code>$(command)</code>.\nIf inside a bash control block (<code>if</code>, <code>for</code>, etc.), the output generation obeys\nthe control statement.</p>\n<p>For example, this code:</p>\n<pre><code>!$SH for GREETED in world universe multiverse ; do\nprint *, \"Hello ${GREETED}\"\n!$SH done\n</code></pre>\n<p>Would produce the following result:</p>\n<pre><code>print *, \"Hello world\"\nprint *, \"Hello universe\"\nprint *, \"Hello multiverse\"\n</code></pre>\n<h3>Support functions</h3>\n<p>Predefined bash functions, variable and code can be provided in <code>.zpp.sh</code> files\nthat can be included with <code>#!SH source &lt;filename&gt;.zpp.sh</code>.</p>\n<p><strong>Beware</strong>: a file NEEDs to have the <code>.zpp.sh</code> extension to be included from\nzpp.</p>\n<p>Zpp provides a standard library of functions tailored to build clean Fortran90\ninterfaces by generating code for all types, kinds, and array ranks supported by\na given compiler.</p>\n<h4>zpp_str_repeat</h4>\n<p>Found in <code>base.zpp.sh</code></p>\n<p>Outputs a string multiple times.</p>\n<p>Parameters:</p>\n<ol>\n<li>the string to Repeat</li>\n<li>the lower bound of the iterations (inclusive)</li>\n<li>the upper bound of the iterations (inclusive)</li>\n<li>the string separator</li>\n<li>the string starter</li>\n<li>the string ender</li>\n</ol>\n<p>Repeats string <code>$1</code> (<code>$3</code>-<code>$2</code>+1) times, separated by string <code>$4</code> inside <code>$5</code>\n<code>$6</code>.</p>\n<ul>\n<li>If the number of repetitions is negative, the result is empty.</li>\n<li>If <code>$1</code> contains the '@N' substring, it will be replaced by the iteration\nnumber (from <code>$2</code> to <code>$3</code>).</li>\n</ul>\n<p>example:</p>\n<pre><code>#!SH source base.zpp.sh\nzpp_str_repeat v@N 5 7 '...' '&lt;&lt;' '&gt;&gt;'\nzpp_str_repeat w@N 1 1 '...' '&lt;&lt;' '&gt;&gt;'\nzpp_str_repeat x@N 1 0 '...' '&lt;&lt;' '&gt;&gt;'\n</code></pre>\n<p>output:</p>\n<pre><code>&lt;&lt;v5...v6...v7&gt;&gt;\n&lt;&lt;w1&gt;&gt;\n</code></pre>\n<h4>zpp_str_repeat_reverse</h4>\n<p>Found in <code>base.zpp.sh</code></p>\n<p>Outputs a string multiple times in reverse order.</p>\n<p>Parameters:</p>\n<ol>\n<li>the string to Repeat</li>\n<li>the upper bound of the iterations (inclusive)</li>\n<li>the lower bound of the iterations (inclusive)</li>\n<li>the string separator</li>\n<li>the string starter</li>\n<li>the string ender</li>\n</ol>\n<p>Repeats string <code>$1</code> (<code>$2</code>-<code>$3</code>+1) times, separated by string <code>$4</code> inside <code>$5</code>\n<code>$6</code>.</p>\n<ul>\n<li>If the number of repetitions is negative, the result is empty.</li>\n<li>If <code>$1</code> contains the '@N' substring, it will be replaced by the iteration\nnumber (from <code>$2</code> to <code>$3</code>, i.e. upper to lower).</li>\n</ul>\n<p>example:</p>\n<pre><code>#!SH source base.zpp.sh\nzpp_str_repeat_reverse v@N 5 7 '...' '&lt;&lt;' '&gt;&gt;'\nzpp_str_repeat_reverse w@N 1 1 '...' '&lt;&lt;' '&gt;&gt;'\nzpp_str_repeat_reverse x@N 1 0 '...' '&lt;&lt;' '&gt;&gt;'\n</code></pre>\n<p>output:</p>\n<pre><code>&lt;&lt;v7...v6...v5&gt;&gt;\n&lt;&lt;w1&gt;&gt;\n</code></pre>\n<h4>ZPP_FORT_TYPES</h4>\n<p>Found in <code>fortran.zpp.sh</code></p>\n<p>The list of types supported by the fortran compiler as zpp:typeIDs.</p>\n<p>The compiler ID should be provided in <code>ZPP_CONFIG</code> as <code>config.&lt;ID&gt;</code>.\nThe supported predefined IDs are: <code>Gnu</code>, <code>Intel</code>, <code>PGI</code> and <code>XL</code>.\nYou can also provide definitions for an additional compiler by defining\n<code>ZPP_FORT_TYPES</code> in a file named <code>config.&lt;ID&gt;.zpp.sh</code>.</p>\n<p>If you use cmake, it will automatically generate such a file for your compiler\nand define  <code>ZPP_CONFIG</code> so you don't have to handle it.</p>\n<h3>zpp_fort_array_desc</h3>\n<p>Found in <code>fortran.zpp.sh</code></p>\n<p>Outputs an assumed shaped array descriptor of the provided size.</p>\n<p>Parameters:</p>\n<ol>\n<li>the size of the assumed shaped array</li>\n</ol>\n<p>example:</p>\n<pre><code>#!SH source fortran.zpp.sh\ninteger:: scalar$(zpp_fort_array_desc 0)\ninteger:: array1d$(zpp_fort_array_desc 1)\ninteger:: array2d$(zpp_fort_array_desc 2)\n</code></pre>\n<p>output:</p>\n<pre><code>integer:: scalar\ninteger:: array1d(:)\ninteger:: array2d(:,:)\n</code></pre>\n<h3>zpp_fort_ptype</h3>\n<p>Found in <code>fortran.zpp.sh</code></p>\n<p>Outputs the type associated to a zpp:typeID.</p>\n<p>Parameters:</p>\n<ol>\n<li>a zpp:typeID</li>\n</ol>\n<p>example:</p>\n<pre><code>#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_ptype $1)\n!$SH done\n</code></pre>\n<p>example output:</p>\n<pre><code>CHARACTER\nCOMPLEX\nCOMPLEX\nINTEGER\nINTEGER\nINTEGER\nINTEGER\nLOGICAL\nREAL\nREAL\n</code></pre>\n<h3>zpp_fort_kind</h3>\n<p>Found in <code>fortran.zpp.sh</code></p>\n<p>Outputs the kind associated to a zpp:typeID.</p>\n<p>Parameters:</p>\n<ol>\n<li>a zpp:typeID</li>\n</ol>\n<p>example:</p>\n<pre><code>#!SH source fortran.zpp.sh\n!$SH for T in ${ZPP_FORT_TYPES} ; do\n$(zpp_fort_kind $1)\n!$SH done\n</code></pre>\n<p>example output:</p>\n<pre><code>1\n4\n8\n1\n2\n4\n8\n1\n4\n8\n</code></pre>\n<h3>zpp_fort_type</h3>\n<p>Found in <code>fortran.zpp.sh</code></p>\n<p>Outputs the full type (with kind included) associated to a zpp:typeID.</p>\n<p>Parameters:</p>\n<ol>\n<li>a zpp:typeID</li>\n<li>additional attributes for the type</li>\n</ol>\n<p>example:</p>\n<pre><code>#!SH source fortran.zpp.sh\n!$SH for T in ${MY_CHAR_TYPES} ; do\n$(zpp_fort_type $1)\n$(zpp_fort_type $1 \"len=5\")\n!$SH done\n</code></pre>\n<p>example output:</p>\n<pre><code>CHARACTER(KIND=1)\nCHARACTER(KIND=1,len=5)\n</code></pre>\n<h3>zpp_fort_sizeof</h3>\n<p>Found in <code>fortran.zpp.sh</code></p>\n<p>Outputs the size in bits associated to a zpp:typeID.</p>\n<p>Parameters:</p>\n<ol>\n<li>a zpp:typeID</li>\n</ol>\n<h3>zpp_fort_io_format</h3>\n<p>Found in <code>fortran.zpp.sh</code></p>\n<p>Outputs an IO descriptor suitable for a zpp:typeID.</p>\n<p>Parameters:</p>\n<ol>\n<li>a zpp:typeID</li>\n</ol>\n<h3>ZPP_HDF5F_TYPES</h3>\n<p>Found in <code>hdf5_fortran.zpp.sh</code></p>\n<p>A list of zpp:typeIDs supported by HDF5.</p>\n<h3>hdf5_constant</h3>\n<p>Found in <code>hdf5_fortran.zpp.sh</code></p>\n<p>Outputs the HDF5 type constant associated to a zpp:typeID.</p>\n<p>Parameters:</p>\n<ol>\n<li>a zpp:typeID</li>\n</ol>\n<p>example:</p>\n<pre><code>#!SH source hdf5_fortran.zpp.sh\n!$SH for T in ${ZPP_HDF5F_TYPES} ; do\n$(hdf5_constant $1)\n!$SH done\n</code></pre>\n<p>example output:</p>\n<pre><code>H5T_NATIVE_INTEGER\nH5T_NATIVE_REAL\nH5T_NATIVE_REAL\nH5T_NATIVE_CHARACTER\n</code></pre>\n<h2>Command-line interface</h2>\n<p>Zpp basic usage is as follow:</p>\n<pre><code>Usage: zpp [Options...] &lt;source&gt; [&lt;destination&gt;]\n  use `zpp -h' for more info\n\nPreprocesses BASH in-line commands in a source file\n\nOptions:\n  --version        show program's version number and exit\n  -h, --help       show this help message and exit\n  -I DIR           Add DIR to search list for source directives\n  -o FILE          Place the preprocessed code in file FILE.\n  -D OPTION=VALUE  Set the value of OPTION to VALUE\n</code></pre>\n<h2>CMake interface</h2>\n<p>Support is provided for using zpp from CMake based projects, but you can use\nit from plain Makefiles too.</p>\n<p>There are two ways you can use zpp from your CMake project:</p>\n<ul>\n<li>with <code>add_subdirectory</code>: include zpp in your project and use it directly from\nthere,</li>\n<li>with <code>find_package</code>: install zpp and use it as an external dependency of your\nproject.</li>\n</ul>\n<h4>CMake subdirectory usage</h4>\n<p>Using zpp with <code>add_subdirectory</code> is very simple.\nJust copy the <code>zpp</code> directory in your source and point to it with\n<code>add_subdirectory(zpp)</code>.\nThe <code>zpp_preprocess</code> then becomes available to process zpp files.</p>\n<p>This is demonstrated in <code>example/cmake_subdirectory</code>.</p>\n<h4>CMake find usage</h4>\n<p>Using zpp with <code>find_package</code> is no more complex.\nIf zpp is installed, just add a <code>find_package(zpp REQUIRED)</code>.\nThe <code>zpp_preprocess</code> then becomes available to process zpp files.</p>\n<p>This is demonstrated in <code>example/cmake_find</code>.</p>\n<h2>GMake usage</h2>\n<p>Using zpp from a GNU Makefile is slightly less powerful than from CMake.\nThe types and kinds supported by the Fortran compiler will not be automatically\ndetected.\nPredefined lists of supported types for well known compilers are provided\ninstead.</p>\n<p>To use zpp from a Makefile, include the <code>share/zpp/zpp.mk</code> file (either from an\ninstalled location or from a subdirectory in your project).\nYou can then set the <code>zpp_COMPILER_ID</code> variable to the compiler you use and\n<code>.F90</code> files will be automatically generated from their <code>.F90.zpp</code> equivalent.\nThe <code>zppFLAGS</code> variable is automatically passed to zpp similarly to <code>CFLAGS</code> or\n<code>CXXFLAGS</code> for <code>cc</code> and <code>cxx</code>.</p>\n<p>This is demonstrated in <code>example/cmake_makefile</code>.</p>\n<h2>Installation</h2>\n<p>Zpp can be installed using the usual python way with <code>setup.py</code>.</p>\n<pre><code>./setup.py --help\n</code></pre>\n<p>The cmake approach is deprecated.</p>\n<h2>FAQ</h2>\n<p>Q. Isn't zpp redundant with assumed type parameters?</p>\n<p>A.\nThe assumed type parameters functionality allows to implement part of what can\nbe done with zpp (support for all kinds of a type). However as of 2013 it was\nnot correctly supported on most compilers installed on the supercomputers.</p>\n<p>In addition, many things can be done with zpp but not with assumed type\nparameters, such as support for variable array rank or small variations of the\ncode depending on the kind.</p>\n\n          </div>"}, "last_serial": 7146711, "releases": {"0.4.5": [{"comment_text": "", "digests": {"md5": "6bd8041893082fbd9af944d65b6e2188", "sha256": "793d7c19f50a58fde437d53b7268090627849b9d3db57c313692a5767b4ac305"}, "downloads": -1, "filename": "zpp-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "6bd8041893082fbd9af944d65b6e2188", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35130, "upload_time": "2020-04-19T16:22:21", "upload_time_iso_8601": "2020-04-19T16:22:21.493618Z", "url": "https://files.pythonhosted.org/packages/38/38/c7f07ba37e1dec3b214f13fb34ec13781af925f9cc014d6e3d3baac07304/zpp-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9aac7d7139b4cae531c6df9b0b0d899f", "sha256": "a92a5ae206aa1f3aed42c86200c2b3887dddf334d94e91497358a1437b08cf9c"}, "downloads": -1, "filename": "zpp-0.4.5.tar.gz", "has_sig": false, "md5_digest": "9aac7d7139b4cae531c6df9b0b0d899f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16727, "upload_time": "2020-04-19T16:22:26", "upload_time_iso_8601": "2020-04-19T16:22:26.148639Z", "url": "https://files.pythonhosted.org/packages/13/0b/f1e78d5419b2c3a5c166e43caa187f18a828243ec6710a0f36b50bc910f5/zpp-0.4.5.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b33484fe9d561f6d65c0a99058bd7746", "sha256": "10656d6b9d45b06837986bceb61540a5e1493526d36f175bf89573becad1e610"}, "downloads": -1, "filename": "zpp-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b33484fe9d561f6d65c0a99058bd7746", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35125, "upload_time": "2020-04-19T16:28:39", "upload_time_iso_8601": "2020-04-19T16:28:39.261322Z", "url": "https://files.pythonhosted.org/packages/f9/9e/abf725690c8314acc02cb6b1e73473502536efd8db001c58eeb76deaba13/zpp-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b71ededca06686267b2d49fbb528f9c3", "sha256": "f6eea8b263c61b89432a976deecf28ac3fd79be101b85b73506480885a4a85fd"}, "downloads": -1, "filename": "zpp-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b71ededca06686267b2d49fbb528f9c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16715, "upload_time": "2020-04-19T16:28:40", "upload_time_iso_8601": "2020-04-19T16:28:40.620612Z", "url": "https://files.pythonhosted.org/packages/e5/14/55ca0ab7f539cd837ef756e82fd95299a44c6ceb7e1f0b42d633b4f33640/zpp-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ac29764bde1397c6c4b97ec547ed750d", "sha256": "567bc01a2406b8569c00c2748ddeb42f92e1827254ee3f14607d67e62d94c51f"}, "downloads": -1, "filename": "zpp-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ac29764bde1397c6c4b97ec547ed750d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35130, "upload_time": "2020-04-19T21:52:11", "upload_time_iso_8601": "2020-04-19T21:52:11.450619Z", "url": "https://files.pythonhosted.org/packages/58/22/76f7ffae9c664ff0d50fa63f957e84b1fca48f44d5416a5229dacb9cc642/zpp-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fa12340ae850708dbc41b7cd74a5290", "sha256": "d0dcc9cda2d87ed0dd9434854d8eeca90c318b0f89b633d2250f22706229b4ad"}, "downloads": -1, "filename": "zpp-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2fa12340ae850708dbc41b7cd74a5290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16726, "upload_time": "2020-04-19T21:52:12", "upload_time_iso_8601": "2020-04-19T21:52:12.543390Z", "url": "https://files.pythonhosted.org/packages/87/4a/27b18b4a8dae53e89fa61c077f88014717759e05062906fc4559926bb8db/zpp-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "27b46780887471fc781146d43f298f84", "sha256": "f9ced8e9ee1460e8e2076dad806c74deb0377b39483bf8206bd808be096cfe9a"}, "downloads": -1, "filename": "zpp-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "27b46780887471fc781146d43f298f84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35206, "upload_time": "2020-05-01T17:27:15", "upload_time_iso_8601": "2020-05-01T17:27:15.830961Z", "url": "https://files.pythonhosted.org/packages/ef/69/d88ede40d88741dd6928e854da965e88beb4e86ac9ff5dd95cbd188ebd38/zpp-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d3d00834286fee7a2bff5ec5b614786", "sha256": "89928c4fa4f14630eca43982d7c484f8e8df94b9f54c01a2acce8cc4d0bc716e"}, "downloads": -1, "filename": "zpp-1.0.3.tar.gz", "has_sig": false, "md5_digest": "8d3d00834286fee7a2bff5ec5b614786", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16175, "upload_time": "2020-05-01T17:27:17", "upload_time_iso_8601": "2020-05-01T17:27:17.031865Z", "url": "https://files.pythonhosted.org/packages/c1/eb/b89cc39e44b41157f10cdd35098b87658c62f98a177770770bdc29119506/zpp-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "dfd2c5975a48884e71f74fb2e29e15c6", "sha256": "4d67a17d7ceaf35ed76dd01dd20c4ccf19d24ee2bd651676d3d5357f02e31290"}, "downloads": -1, "filename": "zpp-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "dfd2c5975a48884e71f74fb2e29e15c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35213, "upload_time": "2020-05-01T17:42:26", "upload_time_iso_8601": "2020-05-01T17:42:26.162493Z", "url": "https://files.pythonhosted.org/packages/88/92/278032a4025bd48ccabfec8e047d3ff3175716c6547a6af41ff8648e86b2/zpp-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a7d735a032870214b74600c2b79c098", "sha256": "64f8de1af3a69e2fa000d858f3efc4b99307bc6d01cd4206b843015c1c1df347"}, "downloads": -1, "filename": "zpp-1.0.4.tar.gz", "has_sig": false, "md5_digest": "5a7d735a032870214b74600c2b79c098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16813, "upload_time": "2020-05-01T17:42:27", "upload_time_iso_8601": "2020-05-01T17:42:27.415538Z", "url": "https://files.pythonhosted.org/packages/d9/f4/b4d1e9309638da7107dc0f65cd3bf3420f782e37dc6ac652b7a7c0b1877d/zpp-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dfd2c5975a48884e71f74fb2e29e15c6", "sha256": "4d67a17d7ceaf35ed76dd01dd20c4ccf19d24ee2bd651676d3d5357f02e31290"}, "downloads": -1, "filename": "zpp-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "dfd2c5975a48884e71f74fb2e29e15c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35213, "upload_time": "2020-05-01T17:42:26", "upload_time_iso_8601": "2020-05-01T17:42:26.162493Z", "url": "https://files.pythonhosted.org/packages/88/92/278032a4025bd48ccabfec8e047d3ff3175716c6547a6af41ff8648e86b2/zpp-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a7d735a032870214b74600c2b79c098", "sha256": "64f8de1af3a69e2fa000d858f3efc4b99307bc6d01cd4206b843015c1c1df347"}, "downloads": -1, "filename": "zpp-1.0.4.tar.gz", "has_sig": false, "md5_digest": "5a7d735a032870214b74600c2b79c098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16813, "upload_time": "2020-05-01T17:42:27", "upload_time_iso_8601": "2020-05-01T17:42:27.415538Z", "url": "https://files.pythonhosted.org/packages/d9/f4/b4d1e9309638da7107dc0f65cd3bf3420f782e37dc6ac652b7a7c0b1877d/zpp-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:23 2020"}