{"info": {"author": "t3chn0tr0n", "author_email": "technotron.avik@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# termstrap\n\na css file (Bootstrap like) for unicode text formatting in python console output :)\n\n## USAGE\n\nInstall it using pip: `pip install termstrap`\n\nImport in your code: `import css` or `from css import Bootstrap, printc`.\n\nCreate an object: `text = Bootstrap()`\n\nUse as: `text.colorize(<string>, <color>)` or `text.stylize(<string>, < b / i / u >)` or `text.start_block(<color>, <formatter>)`\n\n## Accessible functions/methods\n\nSimple ones :\n\n- `colorize()` : Takes a text, font color(optional) and bgcolor(optional).\n- `stylize()` : Takes a text, style name (bold, italics, underline and blink). Passing only initials work (e.g. 'b' for bold). You can pass multiple styles simultaneously.\n\n_INFO_ : blink is experimental, if it doesn't work, it does not break anything! Therefore no shorthand for it!\n\nLil advanced ones:\n\n- `get_color()` : Takes name of a font color and returns its color code\n- `get_bgcolor()` : Takes name of a background color and returns its color code\n- `new_color()`: Takes a color name and color code. Can be used to add a new custom font color entry\n- `new_bgcolor()`: Takes a color name and color code. Can be used to add a new custom background color entry\n\n_WARNING_ : Only use `new_color()` or `new_bgcolor()` if you know what you are doing!\n\n## Accessible Variables\n\nAll colors can be accessed by the class instance. Overwriting them will/may break functionality.\n\n- **Color variables**: Bootstrap names - primary, danger, warning, etc.\n- **Background color variables**: bg_primary, bg_danger, bg_warning, etc.\n- **Style variables**: bold, italics, underline, selected, blink\n\n## More Utility Functions\n\nTHESE ARE NOT MEMBERS OF BOOTSTRAP CLASS. NO NEED FOR INSTANCE CREATION. just import and use.\n\n- **printc**: Like standard print(). Except: Does not have flush and file params. Have color param, takes name of the color. style param, takes a list or tuple of all styles. bgcolor param, takes name of the bgcolor!\n- **hide_cursor**: Hides cursor in the console\n- **show_cursor**: Restores cursor visibility.\n\n## Example\n\n```Python\n    from css import  Bootstrap, printc # make sure you have downloaded the css.py file in the same folder/directory\n    text = Bootstrap()\n\n    # Using colorize to color\n    print(text.colorize(\"THIS IS RED\", \"red\")) # You can also use Bootstrap classes, eg. danger\n    print(text.colorize(\"THIS IS blue\", \"primary\")) # blue will also work.\n\n    # Using stylize to format text- bold(b), italics(i), underline(u), selected(s), blink\n    print(text.stylize(\"A BOLD move\", \"bold\")) # b also works in place of bold\n    print(text.stylize(\"Slightly slanted\", \"i\"))\n    print(text.stylize(\"More the merrier\", 'b', 'u', 's', 'i'))\n\n    # You can also combine colors and formats:\n    print(text.stylize(text.colorize(\"This is bold in red\"), 'b'))\n\n    # Change color for multiple lines if needed!\n    text.start_block('red', bold=True)\n    # Any text in this clock will be printed in RED, and BOLD by default\n    text.end_block()\n\n    # Using the printc\n    printc(\"RED text in *BOLD*\", color='red', style=('b'))\n    printc(\"[1,2,3,4]\", color='warning', style=('b', 'u'), sep='***') # yellow text, styled bold and underlined, seperated by - ***\n    printc(\"a\", \"b\", \"cdf\", color=\"primary\", end='') # print multiple strings and specify end param as none, ie. no newline at end!\n```\n\n_IMPORTANT_: Info is not the same color as bootstrap info, its violet!\n\n## KNOWN ISSUES\n\n1. Style - blink DOES NOT work in most cases.\n2. Windows cmd only supports color in windows 10 (v1511 onwards)!\n\n## INSPIRATION\n\n[This](https://stackoverflow.com/questions/287871/how-to-print-colored-text-in-terminal-in-python/39452138#39452138) stackoverflow was the inspiration for this project.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/t3chn0tr0n/termstrap", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "termstrap", "package_url": "https://pypi.org/project/termstrap/", "platform": "", "project_url": "https://pypi.org/project/termstrap/", "project_urls": {"Homepage": "https://github.com/t3chn0tr0n/termstrap", "Source": "https://github.com/t3chn0tr0n/termstrap"}, "release_url": "https://pypi.org/project/termstrap/1.2.4/", "requires_dist": null, "requires_python": ">=3.*.*", "summary": "Terminal Bootstrap - A Python css file for unicode text formatting in python console output", "version": "1.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>termstrap</h1>\n<p>a css file (Bootstrap like) for unicode text formatting in python console output :)</p>\n<h2>USAGE</h2>\n<p>Install it using pip: <code>pip install termstrap</code></p>\n<p>Import in your code: <code>import css</code> or <code>from css import Bootstrap, printc</code>.</p>\n<p>Create an object: <code>text = Bootstrap()</code></p>\n<p>Use as: <code>text.colorize(&lt;string&gt;, &lt;color&gt;)</code> or <code>text.stylize(&lt;string&gt;, &lt; b / i / u &gt;)</code> or <code>text.start_block(&lt;color&gt;, &lt;formatter&gt;)</code></p>\n<h2>Accessible functions/methods</h2>\n<p>Simple ones :</p>\n<ul>\n<li><code>colorize()</code> : Takes a text, font color(optional) and bgcolor(optional).</li>\n<li><code>stylize()</code> : Takes a text, style name (bold, italics, underline and blink). Passing only initials work (e.g. 'b' for bold). You can pass multiple styles simultaneously.</li>\n</ul>\n<p><em>INFO</em> : blink is experimental, if it doesn't work, it does not break anything! Therefore no shorthand for it!</p>\n<p>Lil advanced ones:</p>\n<ul>\n<li><code>get_color()</code> : Takes name of a font color and returns its color code</li>\n<li><code>get_bgcolor()</code> : Takes name of a background color and returns its color code</li>\n<li><code>new_color()</code>: Takes a color name and color code. Can be used to add a new custom font color entry</li>\n<li><code>new_bgcolor()</code>: Takes a color name and color code. Can be used to add a new custom background color entry</li>\n</ul>\n<p><em>WARNING</em> : Only use <code>new_color()</code> or <code>new_bgcolor()</code> if you know what you are doing!</p>\n<h2>Accessible Variables</h2>\n<p>All colors can be accessed by the class instance. Overwriting them will/may break functionality.</p>\n<ul>\n<li><strong>Color variables</strong>: Bootstrap names - primary, danger, warning, etc.</li>\n<li><strong>Background color variables</strong>: bg_primary, bg_danger, bg_warning, etc.</li>\n<li><strong>Style variables</strong>: bold, italics, underline, selected, blink</li>\n</ul>\n<h2>More Utility Functions</h2>\n<p>THESE ARE NOT MEMBERS OF BOOTSTRAP CLASS. NO NEED FOR INSTANCE CREATION. just import and use.</p>\n<ul>\n<li><strong>printc</strong>: Like standard print(). Except: Does not have flush and file params. Have color param, takes name of the color. style param, takes a list or tuple of all styles. bgcolor param, takes name of the bgcolor!</li>\n<li><strong>hide_cursor</strong>: Hides cursor in the console</li>\n<li><strong>show_cursor</strong>: Restores cursor visibility.</li>\n</ul>\n<h2>Example</h2>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">css</span> <span class=\"kn\">import</span>  <span class=\"n\">Bootstrap</span><span class=\"p\">,</span> <span class=\"n\">printc</span> <span class=\"c1\"># make sure you have downloaded the css.py file in the same folder/directory</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">Bootstrap</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Using colorize to color</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">colorize</span><span class=\"p\">(</span><span class=\"s2\">\"THIS IS RED\"</span><span class=\"p\">,</span> <span class=\"s2\">\"red\"</span><span class=\"p\">))</span> <span class=\"c1\"># You can also use Bootstrap classes, eg. danger</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">colorize</span><span class=\"p\">(</span><span class=\"s2\">\"THIS IS blue\"</span><span class=\"p\">,</span> <span class=\"s2\">\"primary\"</span><span class=\"p\">))</span> <span class=\"c1\"># blue will also work.</span>\n\n    <span class=\"c1\"># Using stylize to format text- bold(b), italics(i), underline(u), selected(s), blink</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">stylize</span><span class=\"p\">(</span><span class=\"s2\">\"A BOLD move\"</span><span class=\"p\">,</span> <span class=\"s2\">\"bold\"</span><span class=\"p\">))</span> <span class=\"c1\"># b also works in place of bold</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">stylize</span><span class=\"p\">(</span><span class=\"s2\">\"Slightly slanted\"</span><span class=\"p\">,</span> <span class=\"s2\">\"i\"</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">stylize</span><span class=\"p\">(</span><span class=\"s2\">\"More the merrier\"</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'u'</span><span class=\"p\">,</span> <span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"s1\">'i'</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># You can also combine colors and formats:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">stylize</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">colorize</span><span class=\"p\">(</span><span class=\"s2\">\"This is bold in red\"</span><span class=\"p\">),</span> <span class=\"s1\">'b'</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Change color for multiple lines if needed!</span>\n    <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">start_block</span><span class=\"p\">(</span><span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"n\">bold</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Any text in this clock will be printed in RED, and BOLD by default</span>\n    <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">end_block</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Using the printc</span>\n    <span class=\"n\">printc</span><span class=\"p\">(</span><span class=\"s2\">\"RED text in *BOLD*\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">))</span>\n    <span class=\"n\">printc</span><span class=\"p\">(</span><span class=\"s2\">\"[1,2,3,4]\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'warning'</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'u'</span><span class=\"p\">),</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'***'</span><span class=\"p\">)</span> <span class=\"c1\"># yellow text, styled bold and underlined, seperated by - ***</span>\n    <span class=\"n\">printc</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cdf\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"primary\"</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span> <span class=\"c1\"># print multiple strings and specify end param as none, ie. no newline at end!</span>\n</pre>\n<p><em>IMPORTANT</em>: Info is not the same color as bootstrap info, its violet!</p>\n<h2>KNOWN ISSUES</h2>\n<ol>\n<li>Style - blink DOES NOT work in most cases.</li>\n<li>Windows cmd only supports color in windows 10 (v1511 onwards)!</li>\n</ol>\n<h2>INSPIRATION</h2>\n<p><a href=\"https://stackoverflow.com/questions/287871/how-to-print-colored-text-in-terminal-in-python/39452138#39452138\" rel=\"nofollow\">This</a> stackoverflow was the inspiration for this project.</p>\n\n          </div>"}, "last_serial": 6193168, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "4836db380260d7f7d21ba71643bb80be", "sha256": "6502e923194689113aec1d969ee61b0c8c7677ad00a3fa23fd59882e53af452b"}, "downloads": -1, "filename": "termstrap-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4836db380260d7f7d21ba71643bb80be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.*.*", "size": 3487, "upload_time": "2019-08-07T17:11:52", "upload_time_iso_8601": "2019-08-07T17:11:52.996356Z", "url": "https://files.pythonhosted.org/packages/9e/16/77513a2fba1cf5d99657fa479e77bac97ade3274c35c652f67b6b7fce643/termstrap-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8efda5ed3f65121a9f86f931678a2089", "sha256": "9c98a901b3403efc03b9f0bf7f1286587e8f9df52e36ee563d9731de71662241"}, "downloads": -1, "filename": "termstrap-1.2.0.tar.gz", "has_sig": false, "md5_digest": "8efda5ed3f65121a9f86f931678a2089", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.*.*", "size": 3533, "upload_time": "2019-08-07T17:11:54", "upload_time_iso_8601": "2019-08-07T17:11:54.222584Z", "url": "https://files.pythonhosted.org/packages/5b/3c/f2fc8ec984d3519c76ab19448be8c0204f4815c84b5d18aa3a06ee1d440a/termstrap-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "e38c0b9014d7731028310cfd51ddaf07", "sha256": "c486155f1bf99a094548c7c71d3e063713feea0e30e88292620de2763669f5f4"}, "downloads": -1, "filename": "termstrap-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e38c0b9014d7731028310cfd51ddaf07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.*.*", "size": 5185, "upload_time": "2019-08-07T17:36:52", "upload_time_iso_8601": "2019-08-07T17:36:52.297667Z", "url": "https://files.pythonhosted.org/packages/44/95/58f6bed10013be91ca166b813ed80a85856c23e09047bf330e24dd6b4e1b/termstrap-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbdcc1db921eeb2c81f0a713570688f5", "sha256": "722fe8ea758e632e26abe3dd58a16adbfaaa861d8923733650a04c0241c72ef1"}, "downloads": -1, "filename": "termstrap-1.2.1.tar.gz", "has_sig": false, "md5_digest": "cbdcc1db921eeb2c81f0a713570688f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.*.*", "size": 4303, "upload_time": "2019-08-07T17:36:54", "upload_time_iso_8601": "2019-08-07T17:36:54.606449Z", "url": "https://files.pythonhosted.org/packages/53/8e/a70899c54ee304db7a6b512d9a7ada1449a81388395a151478cf06383401/termstrap-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "3250d1b02a65318bd992290e2cf668f8", "sha256": "7ca3eba88620fd3e00b05700b43f42df357f15c0f9dcfefe4f4600533c61a1bf"}, "downloads": -1, "filename": "termstrap-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3250d1b02a65318bd992290e2cf668f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.*.*", "size": 5163, "upload_time": "2019-08-08T17:47:28", "upload_time_iso_8601": "2019-08-08T17:47:28.209407Z", "url": "https://files.pythonhosted.org/packages/ba/fa/1de9ee4e5b74a6cf79273cdcee7d795b7a9ff2f90041bd4631ee65a2b28b/termstrap-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efb00dc42d7dcd2efef295baa680c947", "sha256": "fb45bfe0ac101027f8825b62fa1b82609a2e225613724dd3bc95f063b29750e7"}, "downloads": -1, "filename": "termstrap-1.2.2.tar.gz", "has_sig": false, "md5_digest": "efb00dc42d7dcd2efef295baa680c947", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.*.*", "size": 4277, "upload_time": "2019-08-08T17:47:31", "upload_time_iso_8601": "2019-08-08T17:47:31.449114Z", "url": "https://files.pythonhosted.org/packages/0a/1e/73ad0f9de4fad48716f3f640d36dbd4b29282b6b94e95a36d409b09783a6/termstrap-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "e0472f81e7d3ea4b70f183b475881bde", "sha256": "217adbc2906e4afcb9b79669dced4f2baf8efe5d44d9e851a0b33f90384212c2"}, "downloads": -1, "filename": "termstrap-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e0472f81e7d3ea4b70f183b475881bde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.*.*", "size": 5161, "upload_time": "2019-08-09T06:17:54", "upload_time_iso_8601": "2019-08-09T06:17:54.224612Z", "url": "https://files.pythonhosted.org/packages/aa/e8/17201e1da70113fdaf782b80fecf467e4b1dd5e4f658f366a6d2935b26fc/termstrap-1.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ef9ff3b4f4508c560275178472dc13b", "sha256": "e9ae6d49c4edac3e9790b25e9071e05186e7c5e55ee0d0dffe8586dd2fdc1794"}, "downloads": -1, "filename": "termstrap-1.2.3.tar.gz", "has_sig": false, "md5_digest": "5ef9ff3b4f4508c560275178472dc13b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.*.*", "size": 4277, "upload_time": "2019-08-09T06:18:01", "upload_time_iso_8601": "2019-08-09T06:18:01.120709Z", "url": "https://files.pythonhosted.org/packages/f8/dd/63a3144dffacfd8ce27a366974728d7c940919c1acf08d528536c79960bf/termstrap-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "c51303aa3a333538180f8027e3b02ae3", "sha256": "9d1a8a36f6cd285507830df242ed84bbec70b89fcaf5dd83639da77c843b52fd"}, "downloads": -1, "filename": "termstrap-1.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c51303aa3a333538180f8027e3b02ae3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.*.*", "size": 5154, "upload_time": "2019-11-25T10:14:44", "upload_time_iso_8601": "2019-11-25T10:14:44.346314Z", "url": "https://files.pythonhosted.org/packages/1f/6e/2c067c4f20d437d23a671a8646a1b5a99c47e512aa3d4542f8a8890d71bf/termstrap-1.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8438e24db632603a3e7a08ce51ff177", "sha256": "b0a431192a12453d85ef05706fd2e14f3f20930ca8e5d178f4274cce2e0f2c36"}, "downloads": -1, "filename": "termstrap-1.2.4.tar.gz", "has_sig": false, "md5_digest": "f8438e24db632603a3e7a08ce51ff177", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.*.*", "size": 4224, "upload_time": "2019-11-25T10:14:50", "upload_time_iso_8601": "2019-11-25T10:14:50.054233Z", "url": "https://files.pythonhosted.org/packages/13/d3/c36d3c89ca88b2ccd71579da63f35951814ccd836cfb00e8fb4473b409d0/termstrap-1.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c51303aa3a333538180f8027e3b02ae3", "sha256": "9d1a8a36f6cd285507830df242ed84bbec70b89fcaf5dd83639da77c843b52fd"}, "downloads": -1, "filename": "termstrap-1.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c51303aa3a333538180f8027e3b02ae3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.*.*", "size": 5154, "upload_time": "2019-11-25T10:14:44", "upload_time_iso_8601": "2019-11-25T10:14:44.346314Z", "url": "https://files.pythonhosted.org/packages/1f/6e/2c067c4f20d437d23a671a8646a1b5a99c47e512aa3d4542f8a8890d71bf/termstrap-1.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8438e24db632603a3e7a08ce51ff177", "sha256": "b0a431192a12453d85ef05706fd2e14f3f20930ca8e5d178f4274cce2e0f2c36"}, "downloads": -1, "filename": "termstrap-1.2.4.tar.gz", "has_sig": false, "md5_digest": "f8438e24db632603a3e7a08ce51ff177", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.*.*", "size": 4224, "upload_time": "2019-11-25T10:14:50", "upload_time_iso_8601": "2019-11-25T10:14:50.054233Z", "url": "https://files.pythonhosted.org/packages/13/d3/c36d3c89ca88b2ccd71579da63f35951814ccd836cfb00e8fb4473b409d0/termstrap-1.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:52 2020"}