{"info": {"author": "Quantomatic", "author_email": "john@vdwetering.name", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Affero General Public License v3", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "## PyZX\n\n[![Unitary Fund](https://img.shields.io/badge/Supported%20By-UNITARY%20FUND-brightgreen.svg?style=for-the-badge)](http://unitary.fund)\n\nPyZX (pronounce as *Pisics*) is a **Py**thon tool implementing the theory of **ZX**-calculus for the creation, visualisation, and automated rewriting of large-scale quantum circuits. Please watch [this 2-minute video](https://www.youtube.com/watch?v=iC-KVdB8pf0) for a short introduction.\n\nPyZX currently allows you to:\n\n* Read in quantum circuits in the file format of [QASM](https://en.wikipedia.org/wiki/OpenQASM), [Quipper](https://www.mathstat.dal.ca/~selinger/quipper/doc/) or [Quantomatic](https://quantomatic.github.io/).\n* Rewrite circuits into a pseudo-normal form using the ZX-calculus.\n* Extract new simplified circuits from these reduced graphs.\n* Visualise the ZX-graphs and rewrites using either [Matplotlib](https://matplotlib.org/), Quantomatic or as a TikZ file for use in LaTeX documents.\n* Output the optimised circuits in QASM, QC or QUIPPER format.\n\nYou can try out the in-browser demo which shows some of these features [here](http://zxcalculus.com/pyzx.html).\n\n## About the ZX-calculus\n\nZX-diagrams are a type of tensor network built out of combinations of linear maps known as *spiders*. There are 2 types of spiders: the Z-spiders (represented as green dots in PyZX) and the X-spiders (represented as red dots). Every linear map between some set of qubits can be represented by a ZX-diagram.\nThe ZX-calculus is a set of rewrite rules for ZX-diagrams. There are various extensive set of rewrite rules. PyZX however, uses only rewrite rules concerning the Clifford fragment of the ZX-calculus. Importantly, this set of rewrite rules is *complete* for Clifford diagrams, meaning that two representations of a Clifford map can be rewritten into one another if and only if the two linear maps they represent are equal.\n\n[Here](http://zxcalculus.com) is a website with resources and information about the ZX-calculus. For a short introduction to the ZX-calculus see [this paper](https://arxiv.org/abs/1602.04744) while for a complete overview we recommend [this book](https://www.amazon.com/Picturing-Quantum-Processes-Diagrammatic-Reasoning/dp/110710422X). PyZX extensively uses two derived rewrite rules known as *local complementation* and *pivoting*. More information about these operations can be found in [this paper](https://arxiv.org/abs/1307.7048).\n\n\n## Installation\n\nTo install pyzx from source, clone this repository, `cd` into it, and run:\n```\npip install -e .\n```\n\n\n## Usage\n\nSee the [Documentation](https://pyzx.readthedocs.io/en/latest/) for a full overview of the features of PyZX.\n\nIf you have [Jupyter](https://jupyter.org/) installed you can use one of the demonstration notebooks in the demos folder for an illustration of what PyZX can do.\n\nThis is some example Python code for generating a random circuit, optimizing it, and finally displaying it:\n\n```python\nimport pyzx as zx\nqubit_amount = 5\ngate_count = 80\n#Generate random circuit of Clifford gates\ncircuit = zx.generate.cliffordT(qubit_amount, gate_count)\n#If running in Jupyter, draw the circuit\nzx.draw(circuit)\n#Use one of the built-in rewriting strategies to simplify the circuit\nzx.simplify.full_reduce(circuit)\n#See the result\nzx.draw(circuit)\n```\n\nPyZX can also be run from the commandline. To optimise a circuit you can for instance run\n```python -m pyzx opt input_circuit.qasm```\n\n## Attribution\n\nIf you wish to cite PyZX in an academic work, please cite the [accompanying paper](https://arxiv.org/abs/1904.04735):\n<pre>\n  @article{kissinger2019pyzx,\n    title={Pyzx: Large scale automated diagrammatic reasoning},\n    author={Kissinger, Aleks and van de Wetering, John},\n    journal={arXiv preprint arXiv:1904.04735},\n    year={2019}\n  }\n</pre>\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Quantomatic/pyzx.git", "keywords": "", "license": "GNUv3", "maintainer": "", "maintainer_email": "", "name": "pyzx", "package_url": "https://pypi.org/project/pyzx/", "platform": "", "project_url": "https://pypi.org/project/pyzx/", "project_urls": {"Homepage": "https://github.com/Quantomatic/pyzx.git"}, "release_url": "https://pypi.org/project/pyzx/0.5.1/", "requires_dist": ["numpy (>=1.12)"], "requires_python": "", "summary": "Library for quantum circuit rewriting and optimisation using the ZX-calculus", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>PyZX</h2>\n<p><a href=\"http://unitary.fund\" rel=\"nofollow\"><img alt=\"Unitary Fund\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/892f7e8ba0c9932db72df2645ecbb48c3daff841/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f7274656425323042792d554e495441525925323046554e442d627269676874677265656e2e7376673f7374796c653d666f722d7468652d6261646765\"></a></p>\n<p>PyZX (pronounce as <em>Pisics</em>) is a <strong>Py</strong>thon tool implementing the theory of <strong>ZX</strong>-calculus for the creation, visualisation, and automated rewriting of large-scale quantum circuits. Please watch <a href=\"https://www.youtube.com/watch?v=iC-KVdB8pf0\" rel=\"nofollow\">this 2-minute video</a> for a short introduction.</p>\n<p>PyZX currently allows you to:</p>\n<ul>\n<li>Read in quantum circuits in the file format of <a href=\"https://en.wikipedia.org/wiki/OpenQASM\" rel=\"nofollow\">QASM</a>, <a href=\"https://www.mathstat.dal.ca/%7Eselinger/quipper/doc/\" rel=\"nofollow\">Quipper</a> or <a href=\"https://quantomatic.github.io/\" rel=\"nofollow\">Quantomatic</a>.</li>\n<li>Rewrite circuits into a pseudo-normal form using the ZX-calculus.</li>\n<li>Extract new simplified circuits from these reduced graphs.</li>\n<li>Visualise the ZX-graphs and rewrites using either <a href=\"https://matplotlib.org/\" rel=\"nofollow\">Matplotlib</a>, Quantomatic or as a TikZ file for use in LaTeX documents.</li>\n<li>Output the optimised circuits in QASM, QC or QUIPPER format.</li>\n</ul>\n<p>You can try out the in-browser demo which shows some of these features <a href=\"http://zxcalculus.com/pyzx.html\" rel=\"nofollow\">here</a>.</p>\n<h2>About the ZX-calculus</h2>\n<p>ZX-diagrams are a type of tensor network built out of combinations of linear maps known as <em>spiders</em>. There are 2 types of spiders: the Z-spiders (represented as green dots in PyZX) and the X-spiders (represented as red dots). Every linear map between some set of qubits can be represented by a ZX-diagram.\nThe ZX-calculus is a set of rewrite rules for ZX-diagrams. There are various extensive set of rewrite rules. PyZX however, uses only rewrite rules concerning the Clifford fragment of the ZX-calculus. Importantly, this set of rewrite rules is <em>complete</em> for Clifford diagrams, meaning that two representations of a Clifford map can be rewritten into one another if and only if the two linear maps they represent are equal.</p>\n<p><a href=\"http://zxcalculus.com\" rel=\"nofollow\">Here</a> is a website with resources and information about the ZX-calculus. For a short introduction to the ZX-calculus see <a href=\"https://arxiv.org/abs/1602.04744\" rel=\"nofollow\">this paper</a> while for a complete overview we recommend <a href=\"https://www.amazon.com/Picturing-Quantum-Processes-Diagrammatic-Reasoning/dp/110710422X\" rel=\"nofollow\">this book</a>. PyZX extensively uses two derived rewrite rules known as <em>local complementation</em> and <em>pivoting</em>. More information about these operations can be found in <a href=\"https://arxiv.org/abs/1307.7048\" rel=\"nofollow\">this paper</a>.</p>\n<h2>Installation</h2>\n<p>To install pyzx from source, clone this repository, <code>cd</code> into it, and run:</p>\n<pre><code>pip install -e .\n</code></pre>\n<h2>Usage</h2>\n<p>See the <a href=\"https://pyzx.readthedocs.io/en/latest/\" rel=\"nofollow\">Documentation</a> for a full overview of the features of PyZX.</p>\n<p>If you have <a href=\"https://jupyter.org/\" rel=\"nofollow\">Jupyter</a> installed you can use one of the demonstration notebooks in the demos folder for an illustration of what PyZX can do.</p>\n<p>This is some example Python code for generating a random circuit, optimizing it, and finally displaying it:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyzx</span> <span class=\"k\">as</span> <span class=\"nn\">zx</span>\n<span class=\"n\">qubit_amount</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">gate_count</span> <span class=\"o\">=</span> <span class=\"mi\">80</span>\n<span class=\"c1\">#Generate random circuit of Clifford gates</span>\n<span class=\"n\">circuit</span> <span class=\"o\">=</span> <span class=\"n\">zx</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"o\">.</span><span class=\"n\">cliffordT</span><span class=\"p\">(</span><span class=\"n\">qubit_amount</span><span class=\"p\">,</span> <span class=\"n\">gate_count</span><span class=\"p\">)</span>\n<span class=\"c1\">#If running in Jupyter, draw the circuit</span>\n<span class=\"n\">zx</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">circuit</span><span class=\"p\">)</span>\n<span class=\"c1\">#Use one of the built-in rewriting strategies to simplify the circuit</span>\n<span class=\"n\">zx</span><span class=\"o\">.</span><span class=\"n\">simplify</span><span class=\"o\">.</span><span class=\"n\">full_reduce</span><span class=\"p\">(</span><span class=\"n\">circuit</span><span class=\"p\">)</span>\n<span class=\"c1\">#See the result</span>\n<span class=\"n\">zx</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">circuit</span><span class=\"p\">)</span>\n</pre>\n<p>PyZX can also be run from the commandline. To optimise a circuit you can for instance run\n<code>python -m pyzx opt input_circuit.qasm</code></p>\n<h2>Attribution</h2>\n<p>If you wish to cite PyZX in an academic work, please cite the <a href=\"https://arxiv.org/abs/1904.04735\" rel=\"nofollow\">accompanying paper</a>:</p>\n<pre>  @article{kissinger2019pyzx,\n    title={Pyzx: Large scale automated diagrammatic reasoning},\n    author={Kissinger, Aleks and van de Wetering, John},\n    journal={arXiv preprint arXiv:1904.04735},\n    year={2019}\n  }\n</pre>\n\n          </div>"}, "last_serial": 6976128, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "30542b46c5dd88b2987a1ad747a7f910", "sha256": "f4e9da0265471b5cf52b68cb5a9aa7671757160c48792d900761b2a227ce4b6f"}, "downloads": -1, "filename": "pyzx-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "30542b46c5dd88b2987a1ad747a7f910", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 167334, "upload_time": "2020-04-07T15:00:47", "upload_time_iso_8601": "2020-04-07T15:00:47.915964Z", "url": "https://files.pythonhosted.org/packages/e1/3a/229fd4185422775781de7ec7abb18595658eaca29ec3575b7a8de06f3f4e/pyzx-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d35e892c7bc941faa74221abcc0e6ca9", "sha256": "15bb3027da21ec472f12bd07afebca522ac17efa26f9125e05f9233f77373036"}, "downloads": -1, "filename": "pyzx-0.5.0.tar.gz", "has_sig": false, "md5_digest": "d35e892c7bc941faa74221abcc0e6ca9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121420, "upload_time": "2020-04-07T15:00:51", "upload_time_iso_8601": "2020-04-07T15:00:51.417029Z", "url": "https://files.pythonhosted.org/packages/1f/ff/266d8071ad0b384d4e6e9ee9b63cac4111f5277c00049592a0e9f8900c07/pyzx-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "d999b44e37ac355a4141859b0a97b8e7", "sha256": "121319d02f4476def9b91dcbadf9ee1e969ab93891f61881861a450800bc5bda"}, "downloads": -1, "filename": "pyzx-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d999b44e37ac355a4141859b0a97b8e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 167327, "upload_time": "2020-04-08T09:04:04", "upload_time_iso_8601": "2020-04-08T09:04:04.419005Z", "url": "https://files.pythonhosted.org/packages/c9/ba/fe3e0690009f290652cb7b5a0dc3fea6eb0f41947a8e45d398ead4dd14e1/pyzx-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55e0770af8534906f82364b7fc59dbb6", "sha256": "039e1ab46d90de568f2b4c6b05da47e4c927ba548af19221bdfbfbe3768a19d8"}, "downloads": -1, "filename": "pyzx-0.5.1.tar.gz", "has_sig": false, "md5_digest": "55e0770af8534906f82364b7fc59dbb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121420, "upload_time": "2020-04-08T09:04:07", "upload_time_iso_8601": "2020-04-08T09:04:07.461248Z", "url": "https://files.pythonhosted.org/packages/86/e0/b5b6bc133ddb520dc014f75ad1d8050e4e6fa26abf451041f360a11bafc6/pyzx-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d999b44e37ac355a4141859b0a97b8e7", "sha256": "121319d02f4476def9b91dcbadf9ee1e969ab93891f61881861a450800bc5bda"}, "downloads": -1, "filename": "pyzx-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d999b44e37ac355a4141859b0a97b8e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 167327, "upload_time": "2020-04-08T09:04:04", "upload_time_iso_8601": "2020-04-08T09:04:04.419005Z", "url": "https://files.pythonhosted.org/packages/c9/ba/fe3e0690009f290652cb7b5a0dc3fea6eb0f41947a8e45d398ead4dd14e1/pyzx-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55e0770af8534906f82364b7fc59dbb6", "sha256": "039e1ab46d90de568f2b4c6b05da47e4c927ba548af19221bdfbfbe3768a19d8"}, "downloads": -1, "filename": "pyzx-0.5.1.tar.gz", "has_sig": false, "md5_digest": "55e0770af8534906f82364b7fc59dbb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121420, "upload_time": "2020-04-08T09:04:07", "upload_time_iso_8601": "2020-04-08T09:04:07.461248Z", "url": "https://files.pythonhosted.org/packages/86/e0/b5b6bc133ddb520dc014f75ad1d8050e4e6fa26abf451041f360a11bafc6/pyzx-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:24 2020"}