{"info": {"author": "Rudolph Pienaar", "author_email": "rudolph.pienaar@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "###################\npfstorage  v1.1.0.2\n###################\n\n.. image:: https://badge.fury.io/py/pfstorage.svg\n    :target: https://badge.fury.io/py/pfstorage\n\n.. image:: https://travis-ci.org/FNNDSC/pfstorage.svg?branch=master\n    :target: https://travis-ci.org/FNNDSC/pfstorage\n\n.. image:: https://img.shields.io/badge/python-3.5%2B-blue.svg\n    :target: https://badge.fury.io/py/pfcon\n\n.. contents:: Table of Contents\n\n********\nOverview\n********\n\nThis repository provides ``pfstorage`` -- a library / module that speaks to an object storage backend (such as *swift*) and also provides logic for handling input/output data locations for the ChRIS system.\n\npfstorage\n=========\n\nMost simply, ``pfstorage`` is a module that offers a regularized interface to some other backend object storage. While currently supporting ``swift``, the long term idea is to support a multitude of backends. By providing its own interface to several storage backends, this module removes the need for client code to change when a different object storage backend is used.\n\nWhile at its core a module/library, ``pfstorage`` also provides two modes of stand-alone access: (1) a command line script interface mode to the library, and (2) a persistent http server mode. In the command line mode, the main module functions are exposed to appropriate CLI. In the http server mode, a client can use curl-type http calls to call the underlying library functions.\n\n************\nInstallation\n************\n\nInstallation is relatively straightforward, and we recommend using either python virtual environments or docker.\n\nPython Virtual Environment\n==========================\n\nOn Ubuntu, install the Python virtual environment creator\n\n.. code-block:: bash\n\n  sudo apt install virtualenv\n\nThen, create a directory for your virtual environments e.g.:\n\n.. code-block:: bash\n\n  mkdir ~/python-envs\n\nYou might want to add to your .bashrc file these two lines:\n\n.. code-block:: bash\n\n    export WORKON_HOME=~/python-envs\n    source /usr/local/bin/virtualenvwrapper.sh\n\nNote that depending on distro, the virtualenvwrapper.sh path might be\n\n.. code-block:: bash\n\n    /usr/share/virtualenvwrapper/virtualenvwrapper.sh\n\nSubsequently, you can source your ``.bashrc`` and create a new Python3 virtual environment:\n\n.. code-block:: bash\n\n    source .bashrc\n    mkvirtualenv --python=python3 python_env\n\nTo activate or \"enter\" the virtual env:\n\n.. code-block:: bash\n\n    workon python_env\n\nTo deactivate virtual env:\n\n.. code-block:: bash\n\n    deactivate\n\nUsing the ``fnndsc/pfstorage`` docker container\n================================================\n\nThe easiest option however, is to just use the ``fnndsc/pfstorage`` dock.\n\n.. code-block:: bash\n\n    docker pull fnndsc/pfstorage\n    \nand then run (for example in http server mode access to the library):\n\n.. code-block:: bash\n\n    docker run --name pfstorage -v /home:/Users --rm -ti \\\n           fnndsc/pfstorage \\\n           --ipSwift localhost \\\n           --portSwift 8080 \\\n           --forever \\\n           --httpResponse \\\n           --server\n\nor in CLI mode:\n\n.. code-block:: bash\n\n    docker run --name pfstorage -v /home:/Users --rm -ti \\\n           fnndsc/pfstorage \\\n           --ipSwift localhost \\\n           --portSwift 8080 \\\n           --msg '\n            { \"action\": \"ls\",\n              \"meta\": {\n                            \"path\":         \"\",       \n                            \"retSpec\":      [\"name\", \"bytes\"]\n                      }                                   \n            }'\n        \n\n*****\nUsage\n*****\n\nFor usage of  ``pfstorage``, consult the relevant wiki pages  <https://github.com/FNNDSC/pfstorage/wiki/pfcon-overview>`.\n\nCommand line arguments\n======================\n\n.. code-block:: html\n\n        --msg '<JSON_formatted>'\n        The action to perform. This can be one of:\n\n            * objPull -- pull data from storage to file system\n            * objPush -- push data from file system to storage\n            * ls      -- listing of data within storage\n\n        with a JSON formatted string similar to:\n\n            * ls:\n            { \"action\": \"ls\",\n              \"meta\": {\n                            \"path\":         \"\",       \n                            \"retSpec\":      [\"name\", \"bytes\"]\n                      }                                   \n            }\n\n            * objPut:\n            {  \"action\": \"objPut\",\n                \"meta\": {\n                            \"putSpec\":              \"./data\",\n                            \"inLocation\":           \"storage\",\n                            \"mapLocationOver\":      \"./data\"\n                        }\n            } \n\n            * objPull:\n            {  \"action\": \"objPull\",\n                \"meta\": {\n                            \"path\":                 \"chris\",\n                            \"substr\":               \"/018\",\n                            \"fromLocation\":         \"chris/uploads/DICOM\",\n                            \"mapLocationOver\":      \"./data\"\n                        }\n            }                     \n\n        [--type <storageBackendType>]\n        The type of object storage. Currently this is 'swift'.\n\n        [--ipSwift <swiftIP>]                            \n        The IP interface of the object storage service. Default %s.\n\n        [--portSwift <swiftPort>]\n        The port of the object storage service. Defaults to '8080'.\n\n        [--ipSelf <selfIP>]                            \n        The IP interface of the pfstorage service for server mode. Default %s.\n\n        [--portSelf <selfPort>]\n        The port of the pfstorage service for server mode. Defaults to '4055'.\n\n        [--httpResponse]\n        In servier mode, send return strings as HTTP formatted replies \n        with content-type html.\n\n        [--configFileLoad <file>]\n        Load configuration information from the JSON formatted <file>.\n\n        [--configFileSave <file>]\n        Save configuration information to the JSON formatted <file>.\n\n        [-x|--desc]                                     \n        Provide an overview help page.\n\n        [-y|--synopsis]\n        Provide a synopsis help summary.\n\n        [--version]\n        Print internal version number and exit.\n\n        [--debugToDir <dir>]\n        A directory to contain various debugging output -- these are typically\n        JSON object strings capturing internal state. If empty string (default)\n        then no debugging outputs are captured/generated. If specified, then\n        ``pfcon`` will check for dir existence and attempt to create if\n        needed.\n\n        [-v|--verbosity <level>]\n        Set the verbosity level. \"0\" typically means no/minimal output. Allows for\n        more fine tuned output control as opposed to '--quiet' that effectively\n        silences everything.\n\n\n********\nEXAMPLES\n********\n\nscript mode\n===========\n\n.. code-block:: bash\n\n    pfstorage                                               \\\n        --ipSwift localhost                                 \\\n        --portSwift 8080                                    \\\n        --verbosity 1                                       \\\n        --debugToDir /tmp                                   \\\n        --type swift                                        \\\n        --msg ' \n        {\n            \"action\":   \"ls\",\n            \"meta\": {\n                \"path\":         \"\",       \n                \"retSpec\":      [\"name\", \"bytes\"]\n            }\n        }\n        '\n\nserver mode\n===========\n\n*start server*:\n\n.. code-block:: bash\n\n    pfstorage                                               \\\n        --ipSwift localhost                                 \\\n        --portSwift 8080                                    \\\n        --ipSelf localhost                                  \\\n        --portSelf 4055                                     \\\n        --httpResponse                                      \\\n        --verbosity 1                                       \\\n        --debugToDir /tmp                                   \\\n        --type swift                                        \\\n        --server                                            \\\n        --forever \n\n*query server*:\n\n.. code-block:: bash\n\n    pfurl --verb POST --raw                                 \\\n          --http localhost:4055/api/v1/cmd                  \\\n          --httpResponseBodyParse                           \\\n          --jsonwrapper 'payload'                           \\\n          --msg '\n                {\n                    \"action\":   \"ls\",\n                    \"meta\": {\n                        \"path\":         \"\",\n                        \"retSpec\":      [\"name\", \"bytes\"]\n                    }\n                }\n        '", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FNNDSC/pfstorage", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pfstorage1", "package_url": "https://pypi.org/project/pfstorage1/", "platform": "", "project_url": "https://pypi.org/project/pfstorage1/", "project_urls": {"Homepage": "https://github.com/FNNDSC/pfstorage"}, "release_url": "https://pypi.org/project/pfstorage1/1.1.0.2/", "requires_dist": null, "requires_python": "", "summary": "object storage interface", "version": "1.1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/pfstorage\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pfstorage.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b13bd40a83c206ce3c5e31acd7831956a85cf52/68747470733a2f2f62616467652e667572792e696f2f70792f706673746f726167652e737667\"></a>\n<a href=\"https://travis-ci.org/FNNDSC/pfstorage\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/FNNDSC/pfstorage.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2509adfef1f84b11f52d41d745af35461cefb84/68747470733a2f2f7472617669732d63692e6f72672f464e4e4453432f706673746f726167652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/pfcon\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/python-3.5%2B-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72717db1f08ff88b6b237ad21c89e86732f2fa28/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e352532422d626c75652e737667\"></a>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id1\" rel=\"nofollow\">Overview</a><ul>\n<li><a href=\"#pfstorage\" id=\"id2\" rel=\"nofollow\">pfstorage</a></li>\n</ul>\n</li>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#python-virtual-environment\" id=\"id4\" rel=\"nofollow\">Python Virtual Environment</a></li>\n<li><a href=\"#using-the-fnndsc-pfstorage-docker-container\" id=\"id5\" rel=\"nofollow\">Using the <tt>fnndsc/pfstorage</tt> docker container</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" id=\"id6\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#command-line-arguments\" id=\"id7\" rel=\"nofollow\">Command line arguments</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" id=\"id8\" rel=\"nofollow\">EXAMPLES</a><ul>\n<li><a href=\"#script-mode\" id=\"id9\" rel=\"nofollow\">script mode</a></li>\n<li><a href=\"#server-mode\" id=\"id10\" rel=\"nofollow\">server mode</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Overview</a></h2>\n<p>This repository provides <tt>pfstorage</tt> \u2013 a library / module that speaks to an object storage backend (such as <em>swift</em>) and also provides logic for handling input/output data locations for the ChRIS system.</p>\n<div id=\"pfstorage\">\n<h3><a href=\"#id2\" rel=\"nofollow\">pfstorage</a></h3>\n<p>Most simply, <tt>pfstorage</tt> is a module that offers a regularized interface to some other backend object storage. While currently supporting <tt>swift</tt>, the long term idea is to support a multitude of backends. By providing its own interface to several storage backends, this module removes the need for client code to change when a different object storage backend is used.</p>\n<p>While at its core a module/library, <tt>pfstorage</tt> also provides two modes of stand-alone access: (1) a command line script interface mode to the library, and (2) a persistent http server mode. In the command line mode, the main module functions are exposed to appropriate CLI. In the http server mode, a client can use curl-type http calls to call the underlying library functions.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Installation</a></h2>\n<p>Installation is relatively straightforward, and we recommend using either python virtual environments or docker.</p>\n<div id=\"python-virtual-environment\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Python Virtual Environment</a></h3>\n<p>On Ubuntu, install the Python virtual environment creator</p>\n<pre>sudo apt install virtualenv\n</pre>\n<p>Then, create a directory for your virtual environments e.g.:</p>\n<pre>mkdir ~/python-envs\n</pre>\n<p>You might want to add to your .bashrc file these two lines:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">WORKON_HOME</span><span class=\"o\">=</span>~/python-envs\n<span class=\"nb\">source</span> /usr/local/bin/virtualenvwrapper.sh\n</pre>\n<p>Note that depending on distro, the virtualenvwrapper.sh path might be</p>\n<pre>/usr/share/virtualenvwrapper/virtualenvwrapper.sh\n</pre>\n<p>Subsequently, you can source your <tt>.bashrc</tt> and create a new Python3 virtual environment:</p>\n<pre><span class=\"nb\">source</span> .bashrc\nmkvirtualenv --python<span class=\"o\">=</span>python3 python_env\n</pre>\n<p>To activate or \u201center\u201d the virtual env:</p>\n<pre>workon python_env\n</pre>\n<p>To deactivate virtual env:</p>\n<pre>deactivate\n</pre>\n</div>\n<div id=\"using-the-fnndsc-pfstorage-docker-container\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Using the <tt>fnndsc/pfstorage</tt> docker container</a></h3>\n<p>The easiest option however, is to just use the <tt>fnndsc/pfstorage</tt> dock.</p>\n<pre>docker pull fnndsc/pfstorage\n</pre>\n<p>and then run (for example in http server mode access to the library):</p>\n<pre>docker run --name pfstorage -v /home:/Users --rm -ti <span class=\"se\">\\\n</span>       fnndsc/pfstorage <span class=\"se\">\\\n</span>       --ipSwift localhost <span class=\"se\">\\\n</span>       --portSwift <span class=\"m\">8080</span> <span class=\"se\">\\\n</span>       --forever <span class=\"se\">\\\n</span>       --httpResponse <span class=\"se\">\\\n</span>       --server\n</pre>\n<p>or in CLI mode:</p>\n<pre>docker run --name pfstorage -v /home:/Users --rm -ti <span class=\"se\">\\\n</span>       fnndsc/pfstorage <span class=\"se\">\\\n</span>       --ipSwift localhost <span class=\"se\">\\\n</span>       --portSwift <span class=\"m\">8080</span> <span class=\"se\">\\\n</span>       --msg <span class=\"s1\">'\n        { \"action\": \"ls\",\n          \"meta\": {\n                        \"path\":         \"\",\n                        \"retSpec\":      [\"name\", \"bytes\"]\n                  }\n        }'</span>\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Usage</a></h2>\n<p>For usage of  <tt>pfstorage</tt>, consult the relevant wiki pages  &lt;<a href=\"https://github.com/FNNDSC/pfstorage/wiki/pfcon-overview\" rel=\"nofollow\">https://github.com/FNNDSC/pfstorage/wiki/pfcon-overview</a>&gt;`.</p>\n<div id=\"command-line-arguments\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Command line arguments</a></h3>\n<pre>--msg '<span class=\"p\">&lt;</span><span class=\"nt\">JSON_formatted</span><span class=\"p\">&gt;</span>'\nThe action to perform. This can be one of:\n\n    * objPull -- pull data from storage to file system\n    * objPush -- push data from file system to storage\n    * ls      -- listing of data within storage\n\nwith a JSON formatted string similar to:\n\n    * ls:\n    { \"action\": \"ls\",\n      \"meta\": {\n                    \"path\":         \"\",\n                    \"retSpec\":      [\"name\", \"bytes\"]\n              }\n    }\n\n    * objPut:\n    {  \"action\": \"objPut\",\n        \"meta\": {\n                    \"putSpec\":              \"./data\",\n                    \"inLocation\":           \"storage\",\n                    \"mapLocationOver\":      \"./data\"\n                }\n    }\n\n    * objPull:\n    {  \"action\": \"objPull\",\n        \"meta\": {\n                    \"path\":                 \"chris\",\n                    \"substr\":               \"/018\",\n                    \"fromLocation\":         \"chris/uploads/DICOM\",\n                    \"mapLocationOver\":      \"./data\"\n                }\n    }\n\n[--type <span class=\"p\">&lt;</span><span class=\"nt\">storageBackendType</span><span class=\"p\">&gt;</span>]\nThe type of object storage. Currently this is 'swift'.\n\n[--ipSwift <span class=\"p\">&lt;</span><span class=\"nt\">swiftIP</span><span class=\"p\">&gt;</span>]\nThe IP interface of the object storage service. Default %s.\n\n[--portSwift <span class=\"p\">&lt;</span><span class=\"nt\">swiftPort</span><span class=\"p\">&gt;</span>]\nThe port of the object storage service. Defaults to '8080'.\n\n[--ipSelf <span class=\"p\">&lt;</span><span class=\"nt\">selfIP</span><span class=\"p\">&gt;</span>]\nThe IP interface of the pfstorage service for server mode. Default %s.\n\n[--portSelf <span class=\"p\">&lt;</span><span class=\"nt\">selfPort</span><span class=\"p\">&gt;</span>]\nThe port of the pfstorage service for server mode. Defaults to '4055'.\n\n[--httpResponse]\nIn servier mode, send return strings as HTTP formatted replies\nwith content-type html.\n\n[--configFileLoad <span class=\"p\">&lt;</span><span class=\"nt\">file</span><span class=\"p\">&gt;</span>]\nLoad configuration information from the JSON formatted <span class=\"p\">&lt;</span><span class=\"nt\">file</span><span class=\"p\">&gt;</span>.\n\n[--configFileSave <span class=\"p\">&lt;</span><span class=\"nt\">file</span><span class=\"p\">&gt;</span>]\nSave configuration information to the JSON formatted <span class=\"p\">&lt;</span><span class=\"nt\">file</span><span class=\"p\">&gt;</span>.\n\n[-x|--desc]\nProvide an overview help page.\n\n[-y|--synopsis]\nProvide a synopsis help summary.\n\n[--version]\nPrint internal version number and exit.\n\n[--debugToDir <span class=\"p\">&lt;</span><span class=\"nt\">dir</span><span class=\"p\">&gt;</span>]\nA directory to contain various debugging output -- these are typically\nJSON object strings capturing internal state. If empty string (default)\nthen no debugging outputs are captured/generated. If specified, then\n``pfcon`` will check for dir existence and attempt to create if\nneeded.\n\n[-v|--verbosity <span class=\"p\">&lt;</span><span class=\"nt\">level</span><span class=\"p\">&gt;</span>]\nSet the verbosity level. \"0\" typically means no/minimal output. Allows for\nmore fine tuned output control as opposed to '--quiet' that effectively\nsilences everything.\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h2><a href=\"#id8\" rel=\"nofollow\">EXAMPLES</a></h2>\n<div id=\"script-mode\">\n<h3><a href=\"#id9\" rel=\"nofollow\">script mode</a></h3>\n<pre>pfstorage                                               <span class=\"se\">\\\n</span>    --ipSwift localhost                                 <span class=\"se\">\\\n</span>    --portSwift <span class=\"m\">8080</span>                                    <span class=\"se\">\\\n</span>    --verbosity <span class=\"m\">1</span>                                       <span class=\"se\">\\\n</span>    --debugToDir /tmp                                   <span class=\"se\">\\\n</span>    --type swift                                        <span class=\"se\">\\\n</span>    --msg <span class=\"s1\">'\n    {\n        \"action\":   \"ls\",\n        \"meta\": {\n            \"path\":         \"\",\n            \"retSpec\":      [\"name\", \"bytes\"]\n        }\n    }\n    '</span>\n</pre>\n</div>\n<div id=\"server-mode\">\n<h3><a href=\"#id10\" rel=\"nofollow\">server mode</a></h3>\n<p><em>start server</em>:</p>\n<pre>pfstorage                                               <span class=\"se\">\\\n</span>    --ipSwift localhost                                 <span class=\"se\">\\\n</span>    --portSwift <span class=\"m\">8080</span>                                    <span class=\"se\">\\\n</span>    --ipSelf localhost                                  <span class=\"se\">\\\n</span>    --portSelf <span class=\"m\">4055</span>                                     <span class=\"se\">\\\n</span>    --httpResponse                                      <span class=\"se\">\\\n</span>    --verbosity <span class=\"m\">1</span>                                       <span class=\"se\">\\\n</span>    --debugToDir /tmp                                   <span class=\"se\">\\\n</span>    --type swift                                        <span class=\"se\">\\\n</span>    --server                                            <span class=\"se\">\\\n</span>    --forever\n</pre>\n<p><em>query server</em>:</p>\n<pre>pfurl --verb POST --raw                                 <span class=\"se\">\\\n</span>      --http localhost:4055/api/v1/cmd                  <span class=\"se\">\\\n</span>      --httpResponseBodyParse                           <span class=\"se\">\\\n</span>      --jsonwrapper <span class=\"s1\">'payload'</span>                           <span class=\"se\">\\\n</span>      --msg <span class=\"s1\">'\n            {\n                \"action\":   \"ls\",\n                \"meta\": {\n                    \"path\":         \"\",\n                    \"retSpec\":      [\"name\", \"bytes\"]\n                }\n            }\n    '</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5745723, "releases": {"1.1.0.2": [{"comment_text": "", "digests": {"md5": "a846fe0f99ec4602242aa1b4465a73c2", "sha256": "d001b00d99f0c997d22d54adabbaf06e0263ee6a356d036f18f38336cf807a3f"}, "downloads": -1, "filename": "pfstorage1-1.1.0.2.tar.gz", "has_sig": false, "md5_digest": "a846fe0f99ec4602242aa1b4465a73c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17977, "upload_time": "2019-08-28T21:04:47", "upload_time_iso_8601": "2019-08-28T21:04:47.715427Z", "url": "https://files.pythonhosted.org/packages/44/18/544cf122034877c235ca7aeb088a5e5c237c132c9b6e432bf120181717e9/pfstorage1-1.1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a846fe0f99ec4602242aa1b4465a73c2", "sha256": "d001b00d99f0c997d22d54adabbaf06e0263ee6a356d036f18f38336cf807a3f"}, "downloads": -1, "filename": "pfstorage1-1.1.0.2.tar.gz", "has_sig": false, "md5_digest": "a846fe0f99ec4602242aa1b4465a73c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17977, "upload_time": "2019-08-28T21:04:47", "upload_time_iso_8601": "2019-08-28T21:04:47.715427Z", "url": "https://files.pythonhosted.org/packages/44/18/544cf122034877c235ca7aeb088a5e5c237c132c9b6e432bf120181717e9/pfstorage1-1.1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:54 2020"}