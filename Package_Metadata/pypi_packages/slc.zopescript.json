{"info": {"author": "Syslab.com GmbH", "author_email": "info@syslab.com", "bugtrack_url": null, "classifiers": ["Framework :: Zope2", "Programming Language :: Python", "Programming Language :: Python :: 2.7"], "description": ".. image:: https://secure.travis-ci.org/syslabcom/slc.zopescript.png\n    :target: http://travis-ci.org/#!/syslabcom/slc.zopescript\n\n====================\nslc.zopescript\n====================\n\nBase classes for running code as Zope console scripts\n\n* `Source code @ GitHub <https://github.com/syslabcom/slc.zopescript>`_\n* `Releases @ PyPI <http://pypi.python.org/pypi/slc.zopescript>`_\n* `Documentation @ ReadTheDocs <http://slczopescript.readthedocs.org>`_\n* `Continuous Integration @ Travis-CI <http://travis-ci.org/syslabcom/slc.zopescript>`_\n\nInstallation\n============\n\nTo install `slc.zopescript` you add ``slc.zopescript``\nto the dependencies of your own egg.\n\nUsage\n=====\n\nslc.zopescript allows running code from the command line with a full Zope\ninstance and request available.\n\nConsole Script\n--------------\n\nTo create a console script, i.e a script that you can run standalone from a\nterminal, you can derive a class from `slc.zopescript.script.ConsoleScript` and\nimplement the `run()` method. The Zope app will be available as self.app and\nthe first Plone Site as self.portal.  If you pass a context_path then\nself.context will be the object represented by this path; otherwise\nself.context will be the portal as well.\nA request will be set up so that you can e.g. call browser views.\nExample::\n\n    from my.egg import MailHandler\n    from slc.zopescript.script import ConsoleScript\n\n\n    class MailHandlerScript(ConsoleScript):\n        def run(self):\n            mailhandler_view = MailHandler(self.context, self.context.REQUEST)\n            mailhandler_view()\n\n    mail_handler = MailHandlerScript()\n\n\nIn your buildout you can generate the console script e.g. with zc.recipe.egg::\n\n    [mail_handler]\n    recipe = zc.recipe.egg\n    eggs = ${instance:eggs}\n    scripts = mail_handler\n    arguments = '${instance:location}/etc/zope.conf','admin',server_url='http://localhost:8081/Plone',context_path='/Plone/news'\n\nThe first argument must be the path to a valid zope.conf file. The second\nargument is the user to run the script as. The optional server_url should be\nthe URL under which your site is externally reachable and allows you to use\nmeaningful absolute_url() calls. The optional context_path is the path to\nan object that will be available as self.context in your script class.\n\nInstance Script\n---------------\n\nTo create an instance script, i.e. a script that you can pass to a zope\ninstance via `instance run my_script.py`, you can derive a class from\n`slc.zopescript.script.InstanceScript` and implement the `run()` method. The\nbehaviour is similar to ConsoleScript, except that it doesn't set up the app\nobject but expects it to be passed in when it is instantiated.\nExample::\n\n    from my.egg import MailHandler\n    from slc.zopescript.script import InstanceScript\n\n\n    class MailHandlerScript(InstanceScript):\n        def run(self):\n            mailhandler_view = MailHandler(self.context, self.context.REQUEST)\n            mailhandler_view()\n\n\n    if \"app\" in locals():\n        mail_handler = MailHandlerScript(app)\n        mail_handler('admin', server_url='http://localhost:8081/Plone', context_path='/Plone/news')\n\nSave this code as e.g. `mail_handler.py` and call it with `instance run\nmail_handler.py`. No buildout configuration is necessary. The arguments for the\ncall in the last line are the same as the ones you pass in the `arguments`\noption for the console script, except that no zope.conf file can be passed.\n:orphan:\n\nChangelog\n=========\n\n\n1.1.1 (2020-01-24)\n------------------\n\n- ZCML namespace cleanup.\n  [thet]\n\n\n1.1.0 (2019-01-28)\n------------------\n\n- Added InstanceScript class for use with `instance run`.\n  [reinhardt]\n\n\n1.0.4 (2017-08-29)\n------------------\n\n- Improve log handling:\n\n  * only log errors during startup\n  * log INFO to stdout\n  * log ERROR to stderr\n  * log to instance's event.log too\n\n  This makes it possible to only escalate errors in cronjobs, send\n  normal logging to /dev/null and protocol what has been done in\n  the instance.log\n\n  [frisi]\n\n\n1.0.3 (2016-05-19)\n------------------\n\n- traverse to context as run_as user [reinhardt]\n- Allow selecting a portal by id [reinhardt]\n\n\n1.0.2 (2016-03-18)\n------------------\n\n- better manifest [reinhardt]\n\n\n1.0.1 (2016-03-18)\n------------------\n\n- Allow passing a context_path [reinhardt]\n- Updated README [reinhardt]\n\n\n1.0 (2015-12-11)\n----------------\n\n- Initial release.\n  [reinhardt]\n\n:orphan:\n\nLicense (3-clause BSD)\n======================\n\nCopyright (c) 2013, Syslab.com GmbH. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n * Neither the name of Syslab.com GmbH. nor the names of its contributors may\n   be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL SYSLAB.COM GMBH BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/slc.zopescript", "keywords": "Zope console script", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "slc.zopescript", "package_url": "https://pypi.org/project/slc.zopescript/", "platform": "", "project_url": "https://pypi.org/project/slc.zopescript/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/slc.zopescript"}, "release_url": "https://pypi.org/project/slc.zopescript/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Base classes for running code as Zope console scripts", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.org/#!/syslabcom/slc.zopescript\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/syslabcom/slc.zopescript.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5004c1e835394c0569bb45f4765e49538a3ea002/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f7379736c6162636f6d2f736c632e7a6f70657363726970742e706e67\"></a>\n<div id=\"slc-zopescript\">\n<h2>slc.zopescript</h2>\n<p>Base classes for running code as Zope console scripts</p>\n<ul>\n<li><a href=\"https://github.com/syslabcom/slc.zopescript\" rel=\"nofollow\">Source code @ GitHub</a></li>\n<li><a href=\"http://pypi.python.org/pypi/slc.zopescript\" rel=\"nofollow\">Releases @ PyPI</a></li>\n<li><a href=\"http://slczopescript.readthedocs.org\" rel=\"nofollow\">Documentation @ ReadTheDocs</a></li>\n<li><a href=\"http://travis-ci.org/syslabcom/slc.zopescript\" rel=\"nofollow\">Continuous Integration @ Travis-CI</a></li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install <cite>slc.zopescript</cite> you add <tt>slc.zopescript</tt>\nto the dependencies of your own egg.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>slc.zopescript allows running code from the command line with a full Zope\ninstance and request available.</p>\n<div id=\"console-script\">\n<h4>Console Script</h4>\n<p>To create a console script, i.e a script that you can run standalone from a\nterminal, you can derive a class from <cite>slc.zopescript.script.ConsoleScript</cite> and\nimplement the <cite>run()</cite> method. The Zope app will be available as self.app and\nthe first Plone Site as self.portal.  If you pass a context_path then\nself.context will be the object represented by this path; otherwise\nself.context will be the portal as well.\nA request will be set up so that you can e.g. call browser views.\nExample:</p>\n<pre>from my.egg import MailHandler\nfrom slc.zopescript.script import ConsoleScript\n\n\nclass MailHandlerScript(ConsoleScript):\n    def run(self):\n        mailhandler_view = MailHandler(self.context, self.context.REQUEST)\n        mailhandler_view()\n\nmail_handler = MailHandlerScript()\n</pre>\n<p>In your buildout you can generate the console script e.g. with zc.recipe.egg:</p>\n<pre>[mail_handler]\nrecipe = zc.recipe.egg\neggs = ${instance:eggs}\nscripts = mail_handler\narguments = '${instance:location}/etc/zope.conf','admin',server_url='http://localhost:8081/Plone',context_path='/Plone/news'\n</pre>\n<p>The first argument must be the path to a valid zope.conf file. The second\nargument is the user to run the script as. The optional server_url should be\nthe URL under which your site is externally reachable and allows you to use\nmeaningful absolute_url() calls. The optional context_path is the path to\nan object that will be available as self.context in your script class.</p>\n</div>\n<div id=\"instance-script\">\n<h4>Instance Script</h4>\n<p>To create an instance script, i.e. a script that you can pass to a zope\ninstance via <cite>instance run my_script.py</cite>, you can derive a class from\n<cite>slc.zopescript.script.InstanceScript</cite> and implement the <cite>run()</cite> method. The\nbehaviour is similar to ConsoleScript, except that it doesn\u2019t set up the app\nobject but expects it to be passed in when it is instantiated.\nExample:</p>\n<pre>from my.egg import MailHandler\nfrom slc.zopescript.script import InstanceScript\n\n\nclass MailHandlerScript(InstanceScript):\n    def run(self):\n        mailhandler_view = MailHandler(self.context, self.context.REQUEST)\n        mailhandler_view()\n\n\nif \"app\" in locals():\n    mail_handler = MailHandlerScript(app)\n    mail_handler('admin', server_url='http://localhost:8081/Plone', context_path='/Plone/news')\n</pre>\n<p>Save this code as e.g. <cite>mail_handler.py</cite> and call it with <cite>instance run\nmail_handler.py</cite>. No buildout configuration is necessary. The arguments for the\ncall in the last line are the same as the ones you pass in the <cite>arguments</cite>\noption for the console script, except that no zope.conf file can be passed.\n:orphan:</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<div id=\"id1\">\n<h4>1.1.1 (2020-01-24)</h4>\n<ul>\n<li>ZCML namespace cleanup.\n[thet]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4>1.1.0 (2019-01-28)</h4>\n<ul>\n<li>Added InstanceScript class for use with <cite>instance run</cite>.\n[reinhardt]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>1.0.4 (2017-08-29)</h4>\n<ul>\n<li><p>Improve log handling:</p>\n<ul>\n<li>only log errors during startup</li>\n<li>log INFO to stdout</li>\n<li>log ERROR to stderr</li>\n<li>log to instance\u2019s event.log too</li>\n</ul>\n<p>This makes it possible to only escalate errors in cronjobs, send\nnormal logging to /dev/null and protocol what has been done in\nthe instance.log</p>\n<p>[frisi]</p>\n</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4>1.0.3 (2016-05-19)</h4>\n<ul>\n<li>traverse to context as run_as user [reinhardt]</li>\n<li>Allow selecting a portal by id [reinhardt]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h4>1.0.2 (2016-03-18)</h4>\n<ul>\n<li>better manifest [reinhardt]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h4>1.0.1 (2016-03-18)</h4>\n<ul>\n<li>Allow passing a context_path [reinhardt]</li>\n<li>Updated README [reinhardt]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h4>1.0 (2015-12-11)</h4>\n<ul>\n<li>Initial release.\n[reinhardt]</li>\n</ul>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>orphan:</th><td></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"license-3-clause-bsd\">\n<h3>License (3-clause BSD)</h3>\n<p>Copyright (c) 2013, Syslab.com GmbH. All rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:</p>\n<blockquote>\n<ul>\n<li>Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.</li>\n<li>Neither the name of Syslab.com GmbH. nor the names of its contributors may\nbe used to endorse or promote products derived from this software\nwithout specific prior written permission.</li>\n</ul>\n</blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \u201cAS IS\u201d\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL SYSLAB.COM GMBH BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6512834, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "fba7c306be14782913041be8a6c2040a", "sha256": "8b3242ca97cd70149a4f45d1ba2f7121ff901eef9b7a66285a5dac38bd3d1a2f"}, "downloads": -1, "filename": "slc.zopescript-1.0.2.tar.gz", "has_sig": false, "md5_digest": "fba7c306be14782913041be8a6c2040a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7613, "upload_time": "2016-03-18T16:37:59", "upload_time_iso_8601": "2016-03-18T16:37:59.655330Z", "url": "https://files.pythonhosted.org/packages/2a/be/a36a571df263d8f33ed597d5870a6be35c1e997ae5a8389671635664d804/slc.zopescript-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "5a1676a31732d29d94c1725fce5644dd", "sha256": "8ff34af946f5ab920c912d3e1e4e845b6a7eaf6da7d127739a22993866d4c8c0"}, "downloads": -1, "filename": "slc.zopescript-1.0.3.tar.gz", "has_sig": false, "md5_digest": "5a1676a31732d29d94c1725fce5644dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7811, "upload_time": "2016-05-19T09:38:01", "upload_time_iso_8601": "2016-05-19T09:38:01.746676Z", "url": "https://files.pythonhosted.org/packages/e9/3f/3929d79bb4593bf6683077ef8a30ed5fa53c39391c99b3c5e682705af0dd/slc.zopescript-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "2df01c60a9d8825428aef1f79d6e9c8f", "sha256": "7fbc27f978a4da4f2cb1991af19b55c95094cbbabeb124e854eb5c5048e5f312"}, "downloads": -1, "filename": "slc.zopescript-1.0.4.tar.gz", "has_sig": false, "md5_digest": "2df01c60a9d8825428aef1f79d6e9c8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14629, "upload_time": "2017-08-29T10:41:32", "upload_time_iso_8601": "2017-08-29T10:41:32.860349Z", "url": "https://files.pythonhosted.org/packages/ac/b3/c9298f4943ef1139094b1291e92f25e7c331bce636bedf4e72c6f171fcc2/slc.zopescript-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "85e2f38476e18574ec89c10f82912567", "sha256": "e9e0acd0f853ccf768f224fc329ac487b76ad08ca8904c58677864d8a67648f5"}, "downloads": -1, "filename": "slc.zopescript-1.1.0.tar.gz", "has_sig": false, "md5_digest": "85e2f38476e18574ec89c10f82912567", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15499, "upload_time": "2019-01-28T10:31:28", "upload_time_iso_8601": "2019-01-28T10:31:28.489074Z", "url": "https://files.pythonhosted.org/packages/a0/86/dd0d04aea8cfd675fdbd9ef3e95b9d9b89814168fde60d46caadd75c95c5/slc.zopescript-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "65d1b262962ce15074a4abab8d648c38", "sha256": "5277fa1214724bccbd7cf4ac28a43b3261a1160b206b72c260a5f74dd60890a4"}, "downloads": -1, "filename": "slc.zopescript-1.1.1.tar.gz", "has_sig": false, "md5_digest": "65d1b262962ce15074a4abab8d648c38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14853, "upload_time": "2020-01-24T10:15:04", "upload_time_iso_8601": "2020-01-24T10:15:04.816140Z", "url": "https://files.pythonhosted.org/packages/a9/ba/733264b61040306280cf84e92ec195ccc855a200a41c6b322271a71ef7f4/slc.zopescript-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "65d1b262962ce15074a4abab8d648c38", "sha256": "5277fa1214724bccbd7cf4ac28a43b3261a1160b206b72c260a5f74dd60890a4"}, "downloads": -1, "filename": "slc.zopescript-1.1.1.tar.gz", "has_sig": false, "md5_digest": "65d1b262962ce15074a4abab8d648c38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14853, "upload_time": "2020-01-24T10:15:04", "upload_time_iso_8601": "2020-01-24T10:15:04.816140Z", "url": "https://files.pythonhosted.org/packages/a9/ba/733264b61040306280cf84e92ec195ccc855a200a41c6b322271a71ef7f4/slc.zopescript-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:28 2020"}