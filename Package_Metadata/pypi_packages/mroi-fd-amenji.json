{"info": {"author": "ailab", "author_email": "ailab@space.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## Installation\n\nThis project is developed and tested on python version `3.7.4`. Please check\nyour python version using `python --version`. If your system has a different\npython version, you may want to consider using\n[pyenv](https://github.com/pyenv/pyenv) (See [Using pyenv](#using-pyenv-linux-windows-macos))\n\nFirst, clone and `cd` into the repository:\n\n```\ngit clone https://gitlab.com/ailabuser/bacha_hybrid_mroi_face_detection\ncd bacha_hybrid_mroi_face_detection\n```\n\n### On Windows:\n\nCreate a python virtual environment:\n\n```\nmkvirtualenv venv\n```\n\nActivate the virtual environment (`deactivate` to deactivate the virtual\nenvironment):\n\n```\nworkon venv\n```\n\nInstall all the required dependencies while still having the virtual environment\nactive:\n\n```\npip install -r requirements.txt\n```\n\n\n### On Linux:\n\nCreate a python virtual environment:\n\n```\nvirtualenv -p /usr/bin/python3 venv\n```\n\nActivate the virtual environment (`deactivate` to deactivate the virtual\nenvironment):\n\n```\nsource venv/bin/activate\n```\n\nInstall all the required dependencies while still having the virtual environment\nactive:\n\n```\npip install -r requirements.txt\n```\n\n### Using pyenv (Linux, Windows, MacOS)\n\nIf your python version is not 3.7.4, you may want to use\n[pyenv](https://github.com/pyenv/pyenv). After you have installed `pyenv`,\ninstall the specific python version. On Linux, this can be done by running the\nfollowing command:\n\n```\nenv PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 3.7.4\n```\n\nThen, create a virtual environment:\n\n```\npyenv virtualenv 3.7.4 bacha_mroi_face_detection\n```\n\nYou can activate the virtual environment using `pyenv` like so:\n\n```\npyenv activate bacha_mroi_face_detection\n```\n\n## Description \n\nThe face detection technique used hybrid margin-based region of interest (MROI)\napproach. It is hybrid in the sense that the implementation runs one main\nroutine to detect a face, but switch to an escape routine when the main routine\nfails. Using MROI increase the face detection speed by having the selected face\ndetection algorithm to only consider a sub-region (where a face was previously\ndetected) instead of the full frame.\n\nThere are three pre-defined selection of main routines available for you to use:\n\n1. Haar cascade classifier\n2. Joint cascade\n3. Multi-task Convolutional Neural Network (MTCNN)\n\nWhen the main routine failed to detect a face, the implementation switch to the\nescape routine which runs template matching algorithm.\n\nFurthermore, there are five possible different hybrid combinations of the face\ndetection approach, in addition to a non-hybrid approach using only the main\nroutine.\n\n1. Normal routine only (N)\n2. Normal routine with fixed-margin (FM)\n3. Normal routine with dynamic-margin (DM)\n4. Normal routine with escape routine (NTM)\n5. Normal routine with fixed-margin and escape routine (FMTM)\n6. Normal routine with dynamic-margin and escape routine (DMTM)\n\nThree video sources are also supported:\n\n1. Webcam\n2. Kinect\n3. Video files\n\nFor example to use Haar cascade classifier as the main routine using FM\napproach while using image frames from your webcam, you can run the following on\nLinux (while having the virtual environment active):\n\n```\n./main.py webcam haar fm\n```\n\nYou can run the program without any argument to print a help message (or by\nsupplying it with `-h`) for more information about the usage of the program.\n\n# Example\n\n## Using the hybrid MROI for your face detection implementation\n\nIn order to use your face detection algorithm with the hybrid MROI face\ndetector, you need to create a subclass which inherit from `FaceDetector`, and\noverride its `detect` method. The implementation requires the`detect` method\nto return either a face ROI or `None`; otherwise, the hybrid MROI face detector\nmay fail.\n\nHere's an example, in which we use a [python implementation of\nMTCNN](https://pypi.org/project/mtcnn/):\n\n```python\nimport cv2\nfrom mtcnn.mtcnn import MTCNN\nfrom routines import FaceDetector\n\nclass MROI_MTCNN(FaceDetector):\n\n    def __init__(self):\n\n    \t# The main routine face detector object used to detect faces.\n        fd_obj = MTCNN()\n\n\t# Initialize using base class constructor. We pass the face detector\n\t# object (fd_obj) and use the MROI with fixed-margin approach with\n\t# a template matching escape routine.\n        super().__init__(fd_obj, mode=FaceDetector.FMTM)\n\n    @staticmethod\n    def detect(fd_obj, image):\n\n        rgb_src = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        result = fd_obj.detect_faces(rgb_src)\n\n        if len(result) > 0:\n            return result[0]['box']\n        else:\n            return None\n```\n\nInternally, this was basically how the pre-defined hyrbid MROI face detectors\n(i.e., `MROI_HaarCascade` and `MROI_MTCNN`) was defined. Simply import them with\n\n```python\nfrom routines import MROI_HaarCascade, MROI_MTCNN\n```\n\n## Running the face detector\n\nTo use the face detector, simply instantiate the hybrid MROI face detector and\nrun it by invoking its `run` method. Below is a simple script that runs the\nface detector and feed it images in a loop.\n\n```python\nfd = MROI_MTCNN()\nfd.run() # This runs the face detector in the background.\n\nwhile True:\n\tret, frame = cv2.VideoCapture(\"/path/to/video/file\")\n\n\t# No more images; exit.\n\tif not ret:\n\t\tbreak\n\n\t# Feed the image into the face detector.\n\tfd.input_image(frame)\n\n\t# Get the ROI containing the face. This will be `None` if no face is\n\t# detected.\n\tROI = fd.get_face_region()\n\n\tif ROI is not None:\n\t\tx, y, w, h = ROI\n\t\tcv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)\n\n\tcv2.imshow(\"MROI_MTCNN Face Detector\", frame)\n\n\tif cv2.waitKey(1) == ord('q'):\n\t\tbreak\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/ailabuser/bacha-hybrid-mroi-face-detection", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mroi-fd-amenji", "package_url": "https://pypi.org/project/mroi-fd-amenji/", "platform": "", "project_url": "https://pypi.org/project/mroi-fd-amenji/", "project_urls": {"Homepage": "https://gitlab.com/ailabuser/bacha-hybrid-mroi-face-detection"}, "release_url": "https://pypi.org/project/mroi-fd-amenji/0.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A small example package", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Installation</h2>\n<p>This project is developed and tested on python version <code>3.7.4</code>. Please check\nyour python version using <code>python --version</code>. If your system has a different\npython version, you may want to consider using\n<a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">pyenv</a> (See <a href=\"#using-pyenv-linux-windows-macos\" rel=\"nofollow\">Using pyenv</a>)</p>\n<p>First, clone and <code>cd</code> into the repository:</p>\n<pre><code>git clone https://gitlab.com/ailabuser/bacha_hybrid_mroi_face_detection\ncd bacha_hybrid_mroi_face_detection\n</code></pre>\n<h3>On Windows:</h3>\n<p>Create a python virtual environment:</p>\n<pre><code>mkvirtualenv venv\n</code></pre>\n<p>Activate the virtual environment (<code>deactivate</code> to deactivate the virtual\nenvironment):</p>\n<pre><code>workon venv\n</code></pre>\n<p>Install all the required dependencies while still having the virtual environment\nactive:</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<h3>On Linux:</h3>\n<p>Create a python virtual environment:</p>\n<pre><code>virtualenv -p /usr/bin/python3 venv\n</code></pre>\n<p>Activate the virtual environment (<code>deactivate</code> to deactivate the virtual\nenvironment):</p>\n<pre><code>source venv/bin/activate\n</code></pre>\n<p>Install all the required dependencies while still having the virtual environment\nactive:</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<h3>Using pyenv (Linux, Windows, MacOS)</h3>\n<p>If your python version is not 3.7.4, you may want to use\n<a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">pyenv</a>. After you have installed <code>pyenv</code>,\ninstall the specific python version. On Linux, this can be done by running the\nfollowing command:</p>\n<pre><code>env PYTHON_CONFIGURE_OPTS=\"--enable-shared\" pyenv install 3.7.4\n</code></pre>\n<p>Then, create a virtual environment:</p>\n<pre><code>pyenv virtualenv 3.7.4 bacha_mroi_face_detection\n</code></pre>\n<p>You can activate the virtual environment using <code>pyenv</code> like so:</p>\n<pre><code>pyenv activate bacha_mroi_face_detection\n</code></pre>\n<h2>Description</h2>\n<p>The face detection technique used hybrid margin-based region of interest (MROI)\napproach. It is hybrid in the sense that the implementation runs one main\nroutine to detect a face, but switch to an escape routine when the main routine\nfails. Using MROI increase the face detection speed by having the selected face\ndetection algorithm to only consider a sub-region (where a face was previously\ndetected) instead of the full frame.</p>\n<p>There are three pre-defined selection of main routines available for you to use:</p>\n<ol>\n<li>Haar cascade classifier</li>\n<li>Joint cascade</li>\n<li>Multi-task Convolutional Neural Network (MTCNN)</li>\n</ol>\n<p>When the main routine failed to detect a face, the implementation switch to the\nescape routine which runs template matching algorithm.</p>\n<p>Furthermore, there are five possible different hybrid combinations of the face\ndetection approach, in addition to a non-hybrid approach using only the main\nroutine.</p>\n<ol>\n<li>Normal routine only (N)</li>\n<li>Normal routine with fixed-margin (FM)</li>\n<li>Normal routine with dynamic-margin (DM)</li>\n<li>Normal routine with escape routine (NTM)</li>\n<li>Normal routine with fixed-margin and escape routine (FMTM)</li>\n<li>Normal routine with dynamic-margin and escape routine (DMTM)</li>\n</ol>\n<p>Three video sources are also supported:</p>\n<ol>\n<li>Webcam</li>\n<li>Kinect</li>\n<li>Video files</li>\n</ol>\n<p>For example to use Haar cascade classifier as the main routine using FM\napproach while using image frames from your webcam, you can run the following on\nLinux (while having the virtual environment active):</p>\n<pre><code>./main.py webcam haar fm\n</code></pre>\n<p>You can run the program without any argument to print a help message (or by\nsupplying it with <code>-h</code>) for more information about the usage of the program.</p>\n<h1>Example</h1>\n<h2>Using the hybrid MROI for your face detection implementation</h2>\n<p>In order to use your face detection algorithm with the hybrid MROI face\ndetector, you need to create a subclass which inherit from <code>FaceDetector</code>, and\noverride its <code>detect</code> method. The implementation requires the<code>detect</code> method\nto return either a face ROI or <code>None</code>; otherwise, the hybrid MROI face detector\nmay fail.</p>\n<p>Here's an example, in which we use a <a href=\"https://pypi.org/project/mtcnn/\" rel=\"nofollow\">python implementation of\nMTCNN</a>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mtcnn.mtcnn</span> <span class=\"kn\">import</span> <span class=\"n\">MTCNN</span>\n<span class=\"kn\">from</span> <span class=\"nn\">routines</span> <span class=\"kn\">import</span> <span class=\"n\">FaceDetector</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MROI_MTCNN</span><span class=\"p\">(</span><span class=\"n\">FaceDetector</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n    \t<span class=\"c1\"># The main routine face detector object used to detect faces.</span>\n        <span class=\"n\">fd_obj</span> <span class=\"o\">=</span> <span class=\"n\">MTCNN</span><span class=\"p\">()</span>\n\n\t<span class=\"c1\"># Initialize using base class constructor. We pass the face detector</span>\n\t<span class=\"c1\"># object (fd_obj) and use the MROI with fixed-margin approach with</span>\n\t<span class=\"c1\"># a template matching escape routine.</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">fd_obj</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">FaceDetector</span><span class=\"o\">.</span><span class=\"n\">FMTM</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">detect</span><span class=\"p\">(</span><span class=\"n\">fd_obj</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">):</span>\n\n        <span class=\"n\">rgb_src</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">COLOR_BGR2RGB</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">fd_obj</span><span class=\"o\">.</span><span class=\"n\">detect_faces</span><span class=\"p\">(</span><span class=\"n\">rgb_src</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'box'</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre>\n<p>Internally, this was basically how the pre-defined hyrbid MROI face detectors\n(i.e., <code>MROI_HaarCascade</code> and <code>MROI_MTCNN</code>) was defined. Simply import them with</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">routines</span> <span class=\"kn\">import</span> <span class=\"n\">MROI_HaarCascade</span><span class=\"p\">,</span> <span class=\"n\">MROI_MTCNN</span>\n</pre>\n<h2>Running the face detector</h2>\n<p>To use the face detector, simply instantiate the hybrid MROI face detector and\nrun it by invoking its <code>run</code> method. Below is a simple script that runs the\nface detector and feed it images in a loop.</p>\n<pre><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">MROI_MTCNN</span><span class=\"p\">()</span>\n<span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"c1\"># This runs the face detector in the background.</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n\t<span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">VideoCapture</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/video/file\"</span><span class=\"p\">)</span>\n\n\t<span class=\"c1\"># No more images; exit.</span>\n\t<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ret</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">break</span>\n\n\t<span class=\"c1\"># Feed the image into the face detector.</span>\n\t<span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">input_image</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">)</span>\n\n\t<span class=\"c1\"># Get the ROI containing the face. This will be `None` if no face is</span>\n\t<span class=\"c1\"># detected.</span>\n\t<span class=\"n\">ROI</span> <span class=\"o\">=</span> <span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">get_face_region</span><span class=\"p\">()</span>\n\n\t<span class=\"k\">if</span> <span class=\"n\">ROI</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">ROI</span>\n\t\t<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">rectangle</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">+</span><span class=\"n\">h</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\t<span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s2\">\"MROI_MTCNN Face Detector\"</span><span class=\"p\">,</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">if</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s1\">'q'</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">break</span>\n</pre>\n\n          </div>"}, "last_serial": 6265013, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "224c94fcaba53fb3f3f4db7271cd4010", "sha256": "afe3f925a49e364438f51467ea20395f4900a1cb69a0f25c988b3ff917667f41"}, "downloads": -1, "filename": "mroi_fd_amenji-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "224c94fcaba53fb3f3f4db7271cd4010", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12110, "upload_time": "2019-12-09T07:22:13", "upload_time_iso_8601": "2019-12-09T07:22:13.294784Z", "url": "https://files.pythonhosted.org/packages/77/34/c7821f937b67e43b31178972123f7711b12df9a674b9b63998c1e7205ef0/mroi_fd_amenji-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11d78a128db072c6a6d074584d95c0bf", "sha256": "f25888da89bf1a42f737b5a76f4dfa2b40115a59b0606b17095c6a8e3d8cca83"}, "downloads": -1, "filename": "mroi-fd-amenji-0.0.1.tar.gz", "has_sig": false, "md5_digest": "11d78a128db072c6a6d074584d95c0bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8437, "upload_time": "2019-12-09T07:22:35", "upload_time_iso_8601": "2019-12-09T07:22:35.779482Z", "url": "https://files.pythonhosted.org/packages/34/90/dc73f46820e67f635c4951eeccc345bc41be14fdfa2d12b4907956b1184c/mroi-fd-amenji-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "93a905ce07699abae095552643372307", "sha256": "2732156ac64451431e29c47099c0a9cf67e29e22d3296611ca00d17ba27ab1ea"}, "downloads": -1, "filename": "mroi_fd_amenji-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "93a905ce07699abae095552643372307", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8216, "upload_time": "2019-12-09T07:22:15", "upload_time_iso_8601": "2019-12-09T07:22:15.988732Z", "url": "https://files.pythonhosted.org/packages/40/7c/bfadf0ad62de3048bf842f1f8d1e0d63272f9757a1ab3095142be05d4b57/mroi_fd_amenji-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a67b1bd44e8349e2c7e67e2d763bf2ab", "sha256": "36ed1f4beb411975baed52658911e8b2792401be6a05616b718e7e3fda292e48"}, "downloads": -1, "filename": "mroi-fd-amenji-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a67b1bd44e8349e2c7e67e2d763bf2ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8405, "upload_time": "2019-12-09T07:22:37", "upload_time_iso_8601": "2019-12-09T07:22:37.352034Z", "url": "https://files.pythonhosted.org/packages/a5/cb/3c9ace7b87379a2fb662468541e9214fa11cffdda7d1834ae6d2fb63bdff/mroi-fd-amenji-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "422e077f5976818cad3ee022066eaf0c", "sha256": "1505ad38a5a78803ca02459bcbcd5e7e0f159c45b23e24ed99bbc95d6e9a8647"}, "downloads": -1, "filename": "mroi_fd_amenji-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "422e077f5976818cad3ee022066eaf0c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12112, "upload_time": "2019-12-09T07:22:17", "upload_time_iso_8601": "2019-12-09T07:22:17.829866Z", "url": "https://files.pythonhosted.org/packages/fc/bf/5290a07fbb421d0a95da3458963e735ecc922475b92b5699103ea38b75a0/mroi_fd_amenji-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba5494361b4debcddf40e37e1f5f9502", "sha256": "6023d5d9f1971aa22a9dcc2e4c1cae6121293a7701dbe97992b25dc133fe5c8c"}, "downloads": -1, "filename": "mroi-fd-amenji-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ba5494361b4debcddf40e37e1f5f9502", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8439, "upload_time": "2019-12-09T07:22:38", "upload_time_iso_8601": "2019-12-09T07:22:38.862877Z", "url": "https://files.pythonhosted.org/packages/79/17/5d2121d6e7e55165bfa739101c42c8b61f5c993db857a9e88113f09bb030/mroi-fd-amenji-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a4409c29bbfaf2811f28fc4833d79e1c", "sha256": "1bce3f27468b750e5284f5b4114603c2d12b0d61ef5c16303567309e08f7c030"}, "downloads": -1, "filename": "mroi_fd_amenji-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a4409c29bbfaf2811f28fc4833d79e1c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12113, "upload_time": "2019-12-09T07:22:19", "upload_time_iso_8601": "2019-12-09T07:22:19.674016Z", "url": "https://files.pythonhosted.org/packages/dc/a4/701e7c0b35945fa0e96c2789a93db85e4e52446227b08c5d4f77d4d4771e/mroi_fd_amenji-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad44e276905166afc325bcedadb763ab", "sha256": "0f31d0da9f50e6b89d8c5305a4860b6e220961b7f56471f998c748c5d1fd19d6"}, "downloads": -1, "filename": "mroi-fd-amenji-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ad44e276905166afc325bcedadb763ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8438, "upload_time": "2019-12-09T07:22:40", "upload_time_iso_8601": "2019-12-09T07:22:40.633232Z", "url": "https://files.pythonhosted.org/packages/b5/c6/56339526c526d50b9f780ed8da87761ada7ea87c7da85a1be5e1f57e869c/mroi-fd-amenji-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a4409c29bbfaf2811f28fc4833d79e1c", "sha256": "1bce3f27468b750e5284f5b4114603c2d12b0d61ef5c16303567309e08f7c030"}, "downloads": -1, "filename": "mroi_fd_amenji-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a4409c29bbfaf2811f28fc4833d79e1c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12113, "upload_time": "2019-12-09T07:22:19", "upload_time_iso_8601": "2019-12-09T07:22:19.674016Z", "url": "https://files.pythonhosted.org/packages/dc/a4/701e7c0b35945fa0e96c2789a93db85e4e52446227b08c5d4f77d4d4771e/mroi_fd_amenji-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad44e276905166afc325bcedadb763ab", "sha256": "0f31d0da9f50e6b89d8c5305a4860b6e220961b7f56471f998c748c5d1fd19d6"}, "downloads": -1, "filename": "mroi-fd-amenji-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ad44e276905166afc325bcedadb763ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8438, "upload_time": "2019-12-09T07:22:40", "upload_time_iso_8601": "2019-12-09T07:22:40.633232Z", "url": "https://files.pythonhosted.org/packages/b5/c6/56339526c526d50b9f780ed8da87761ada7ea87c7da85a1be5e1f57e869c/mroi-fd-amenji-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:00 2020"}