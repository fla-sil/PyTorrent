{"info": {"author": "Erdogan Taskesen", "author_email": "erdogant@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# bnlearn\n\n[![Python](https://img.shields.io/pypi/pyversions/bnlearn)](https://img.shields.io/pypi/pyversions/bnlearn)\n[![PyPI Version](https://img.shields.io/pypi/v/bnlearn)](https://pypi.org/project/bnlearn/)\n[![License](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/erdogant/bnlearn/blob/master/LICENSE)\n[![Downloads](https://pepy.tech/badge/bnlearn/month)](https://pepy.tech/project/bnlearn/month)\n[![Sphinx](https://img.shields.io/badge/Sphinx-Docs-blue)](https://erdogant.github.io/bnlearn/)\n[![Donate](https://img.shields.io/badge/donate-grey.svg)](https://erdogant.github.io/donate/?currency=USD&amount=5)\n\n\n* Bnlearn is Python package for learning the graphical structure of Bayesian networks, parameter learning, inference and sampling methods. This work is inspired by the R package (bnlearn.com) that has been very usefull to me for many years. Although there are very good Python packages for probabilistic graphical models, it still can remain difficult (and somethimes unnecessarily) to (re)build certain pipelines. Bnlearn for python (this package) is build on the <a href=\"https://github.com/pgmpy/pgmpy\">pgmpy</a> package and contains the most-wanted pipelines.\n\n### Docs\nNavigate to [API documentations](https://erdogant.github.io/bnlearn/) for more detailed information.\n\n\n\n### Method overview\nLearning a Bayesian network can be split into two problems which are both implemented in this package:\n* Structure learning: Given a set of data samples, estimate a DAG that captures the dependencies between the variables.\n* Parameter learning: Given a set of data samples and a DAG that captures the dependencies between the variables, e\nstimate the (conditional) probability distributions of the individual variables.\n\n#### The following functions are available after importing bnlearn.\n```python\n# Structure learning\nbnlearn.structure_learning.fit()\n# Parameter learning\nbnlearn.parameter_learning.fit()\n# Inference\nbnlearn.inference.fit()\n# Based on a DAG, you can sample the number of samples you want.\nbnlearn.sampling()\n# Load well known examples to play arround with or load your own .bif file.\nbnlearn.import_DAG()\n# Load simple dataframe of sprinkler dataset.\nbnlearn.import_example()\n# Compare 2 graphs\nbnlearn.compare_networks()\n# Plot graph\nbnlearn.plot()\n# To make the directed grapyh undirected\nbnlearn.to_undirected()\n# Convert to one-hot datamatrix\nbnlearn.df2onehot()\n\n# See below for the exact working of the functions\n```\n\n#### The following methods are also included:\n* inference\n* sampling\n* comparing two networks\n* loading bif files\n* conversion of directed to undirected graphs\n\n## Contents\n- [Installation](#-installation)\n- [Requirements](#-Requirements)\n- [Quick Start](#-quick-start)\n- [Contribute](#-contribute)\n- [Citation](#-citation)\n- [Maintainers](#-maintainers)\n- [License](#-copyright)\n\n## Installation\n* Install bnlearn from PyPI (recommended). bnlearn is compatible with Python 3.6+ and runs on Linux, MacOS X and Windows. \n* It is distributed under the MIT license.\n\n## Requirements\n* It is advisable to create a new environment. \n```python\nconda create -n env_BNLEARN python=3.6\nconda activate env_BNLEARN\nconda install -c ankurankan pgmpy\n#conda install pytorch -c pytorch\n\n# You may need to deactivate and then activate your environment otherwise the packages may not been recognized.\nconda deactivate\nconda activate env_BNLEARN\n\n# The packages below are handled by the requirements in the bnlearn pip installer. So you dont need to do them manually.\npip install sklearn pandas tqdm funcsigs statsmodels community packaging\n```\n\n## Quick Start\n```\npip install bnlearn\n```\n\n* Alternatively, install bnlearn from the GitHub source:\n```bash\ngit clone https://github.com/erdogant/bnlearn.git\ncd bnlearn\npython setup.py install\n```  \n\n## Import bnlearn package\n```python\n import bnlearn\n```\n\n## Example: Structure Learning\n```python\n# Example dataframe sprinkler_data.csv can be loaded with: \ndf = bnlearn.import_example()\n# df = pd.read_csv('sprinkler_data.csv')\nmodel = bnlearn.structure_learning.fit(df)\nG = bnlearn.plot(model)\n```\n\n#### df looks like this\n```\n     Cloudy  Sprinkler  Rain  Wet_Grass\n0         0          1     0          1\n1         1          1     1          1\n2         1          0     1          1\n3         0          0     1          1\n4         1          0     1          1\n..      ...        ...   ...        ...\n995       0          0     0          0\n996       1          0     0          0\n997       0          0     1          0\n998       1          1     0          1\n999       1          0     1          1\n```\n\n<p align=\"center\">\n  <img src=\"https://github.com/erdogant/bnlearn/blob/master/docs/figs/fig_sprinkler_sl.png\" width=\"600\" />\n</p>\n\n* Choosing various methodtypes and scoringtypes:\n```python\nmodel_hc_bic  = bnlearn.structure_learning.fit(df, methodtype='hc', scoretype='bic')\nmodel_hc_k2   = bnlearn.structure_learning.fit(df, methodtype='hc', scoretype='k2')\nmodel_hc_bdeu = bnlearn.structure_learning.fit(df, methodtype='hc', scoretype='bdeu')\nmodel_ex_bic  = bnlearn.structure_learning.fit(df, methodtype='ex', scoretype='bic')\nmodel_ex_k2   = bnlearn.structure_learning.fit(df, methodtype='ex', scoretype='k2')\nmodel_ex_bdeu = bnlearn.structure_learning.fit(df, methodtype='ex', scoretype='bdeu')\n```\n\n## Example: Parameter Learning\n```python\n# Import dataframe\ndf = bnlearn.import_example()\n# As an example we set the CPD at False which returns an \"empty\" DAG\nmodel = bnlearn.import_DAG('sprinkler', CPD=False)\n# Now we learn the parameters of the DAG using the df\nmodel_update = bnlearn.parameter_learning.fit(model, df)\n# Make plot\nG = bnlearn.plot(model_update)\n```\n\n## Example: Inference\n```python\nmodel = bnlearn.import_DAG('sprinkler')\nq_1 = bnlearn.inference.fit(model, variables=['Rain'], evidence={'Cloudy':1,'Sprinkler':0, 'Wet_Grass':1})\nq_2 = bnlearn.inference.fit(model, variables=['Rain'], evidence={'Cloudy':1})\n```\n\n## Example: Sampling to create dataframe\n```python\nmodel = bnlearn.import_DAG('sprinkler')\ndf = bnlearn.sampling(model, n=1000)\n```\n\n* Output of the model:\n```\n[BNLEARN] Model correct: True\nCPD of Cloudy:\n+-----------+-----+\n| Cloudy(0) | 0.5 |\n+-----------+-----+\n| Cloudy(1) | 0.5 |\n+-----------+-----+\nCPD of Sprinkler:\n+--------------+-----------+-----------+\n| Cloudy       | Cloudy(0) | Cloudy(1) |\n+--------------+-----------+-----------+\n| Sprinkler(0) | 0.5       | 0.9       |\n+--------------+-----------+-----------+\n| Sprinkler(1) | 0.5       | 0.1       |\n+--------------+-----------+-----------+\nCPD of Rain:\n+---------+-----------+-----------+\n| Cloudy  | Cloudy(0) | Cloudy(1) |\n+---------+-----------+-----------+\n| Rain(0) | 0.8       | 0.2       |\n+---------+-----------+-----------+\n| Rain(1) | 0.2       | 0.8       |\n+---------+-----------+-----------+\nCPD of Wet_Grass:\n+--------------+--------------+--------------+--------------+--------------+\n| Sprinkler    | Sprinkler(0) | Sprinkler(0) | Sprinkler(1) | Sprinkler(1) |\n+--------------+--------------+--------------+--------------+--------------+\n| Rain         | Rain(0)      | Rain(1)      | Rain(0)      | Rain(1)      |\n+--------------+--------------+--------------+--------------+--------------+\n| Wet_Grass(0) | 1.0          | 0.1          | 0.1          | 0.01         |\n+--------------+--------------+--------------+--------------+--------------+\n| Wet_Grass(1) | 0.0          | 0.9          | 0.9          | 0.99         |\n+--------------+--------------+--------------+--------------+--------------+\n[BNLEARN] Nodes: ['Cloudy', 'Sprinkler', 'Rain', 'Wet_Grass']\n[BNLEARN] Edges: [('Cloudy', 'Sprinkler'), ('Cloudy', 'Rain'), ('Sprinkler', 'Wet_Grass'), ('Rain', 'Wet_Grass')]\n[BNLEARN] Independencies:\n(Cloudy _|_ Wet_Grass | Rain, Sprinkler)\n(Sprinkler _|_ Rain | Cloudy)\n(Rain _|_ Sprinkler | Cloudy)\n(Wet_Grass _|_ Cloudy | Rain, Sprinkler)\n```\n\n## Example: Loading DAG from bif files\n```python\nbif_file= 'sprinkler'\nbif_file= 'alarm'\nbif_file= 'andes'\nbif_file= 'asia'\nbif_file= 'pathfinder'\nbif_file= 'sachs'\nbif_file= 'miserables'\nbif_file= 'filepath/to/model.bif'\n\n# Loading example dataset\nmodel = bnlearn.import_DAG(bif_file)\n```\n\n## Example: Comparing networks\n```python\n# Load asia DAG\nmodel = bnlearn.import_DAG('asia')\n# plot ground truth\nG = bnlearn.plot(model)\n# Sampling\ndf = bnlearn.sampling(model, n=10000)\n# Structure learning of sampled dataset\nmodel_sl = bnlearn.structure_learning.fit(df, methodtype='hc', scoretype='bic')\n# Plot based on structure learning of sampled data\nbnlearn.plot(model_sl, pos=G['pos'])\n# Compare networks and make plot\nbnlearn.compare_networks(model, model_sl, pos=G['pos'])\n```\n\n#### Graph of ground truth\n<p align=\"center\">\n  <img src=\"https://github.com/erdogant/bnlearn/blob/master/docs/figs/fig2a_asia_groundtruth.png\" width=\"600\" />\n</p>\n\n#### Graph based on Structure learning\n<p align=\"center\">\n  <img src=\"https://github.com/erdogant/bnlearn/blob/master/docs/figs/fig2b_asia_structurelearning.png\" width=\"600\" />\n</p>\n\n#### Graph comparison ground truth vs. structure learning\n<p align=\"center\">\n  <img src=\"https://github.com/erdogant/bnlearn/blob/master/docs/figs/fig2c_asia_comparion.png\" width=\"600\" />\n  <img src=\"https://github.com/erdogant/bnlearn/blob/master/docs/figs/fig2d_confmatrix.png\" width=\"400\" />\n</p>\n\n\n## Citation\nPlease cite bnlearn in your publications if this is useful for your research. Here is an example BibTeX entry:\n```BibTeX\n@misc{erdogant2019bnlearn,\n  title={bnlearn},\n  author={Erdogan Taskesen},\n  year={2019},\n  howpublished={\\url{https://github.com/erdogant/bnlearn}},\n}\n```\n\n## References\n* https://erdogant.github.io/bnlearn/\n* http://pgmpy.org\n* https://programtalk.com/python-examples/pgmpy.factors.discrete.TabularCPD/\n* http://www.bnlearn.com/\n* http://www.bnlearn.com/bnrepository/\n\n## Maintainers\n* Erdogan Taskesen, github: [erdogant](https://github.com/erdogant)\n\n## Contribute\n* All kinds of contributions are welcome!\n\n## Licence\nSee [LICENSE](LICENSE) for details.\n\n### Donation\n* This work is created and maintained in my free time. If you wish to buy me a <a href=\"https://erdogant.github.io/donate/?currency=USD&amount=5\">Coffee</a> for this work, it is very appreciated.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/erdogant/bnlearn/archive/0.3.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/erdogant/bnlearn", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bnlearn", "package_url": "https://pypi.org/project/bnlearn/", "platform": "", "project_url": "https://pypi.org/project/bnlearn/", "project_urls": {"Download": "https://github.com/erdogant/bnlearn/archive/0.3.3.tar.gz", "Homepage": "https://github.com/erdogant/bnlearn"}, "release_url": "https://pypi.org/project/bnlearn/0.3.3/", "requires_dist": ["networkx", "matplotlib", "numpy", "pandas", "tqdm", "ismember", "sklearn", "funcsigs", "statsmodels", "community", "packaging", "wget", "df2onehot"], "requires_python": ">=3", "summary": "Python package for learning the graphical structure of Bayesian networks, parameter learning, inference and sampling methods.", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bnlearn</h1>\n<p><a href=\"https://img.shields.io/pypi/pyversions/bnlearn\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1aa849e41f643c0b14512b77457e97fccda9729b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f626e6c6561726e\"></a>\n<a href=\"https://pypi.org/project/bnlearn/\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7eca279683bb740719abd029de096d1892012f25/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f626e6c6561726e\"></a>\n<a href=\"https://github.com/erdogant/bnlearn/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7db8d43223f55fabe102838639f47819829c1ca/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667\"></a>\n<a href=\"https://pepy.tech/project/bnlearn/month\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc1c0abe42932b0eff92281488488b064941f9ba/68747470733a2f2f706570792e746563682f62616467652f626e6c6561726e2f6d6f6e7468\"></a>\n<a href=\"https://erdogant.github.io/bnlearn/\" rel=\"nofollow\"><img alt=\"Sphinx\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4dc1a73ac83d05deed0f2a5171a719fd37e9e308/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537068696e782d446f63732d626c7565\"></a>\n<a href=\"https://erdogant.github.io/donate/?currency=USD&amp;amount=5\" rel=\"nofollow\"><img alt=\"Donate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d247f2ee8150dde473374d2cbbdfc61302673e04/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f6e6174652d677265792e737667\"></a></p>\n<ul>\n<li>Bnlearn is Python package for learning the graphical structure of Bayesian networks, parameter learning, inference and sampling methods. This work is inspired by the R package (bnlearn.com) that has been very usefull to me for many years. Although there are very good Python packages for probabilistic graphical models, it still can remain difficult (and somethimes unnecessarily) to (re)build certain pipelines. Bnlearn for python (this package) is build on the <a href=\"https://github.com/pgmpy/pgmpy\" rel=\"nofollow\">pgmpy</a> package and contains the most-wanted pipelines.</li>\n</ul>\n<h3>Docs</h3>\n<p>Navigate to <a href=\"https://erdogant.github.io/bnlearn/\" rel=\"nofollow\">API documentations</a> for more detailed information.</p>\n<h3>Method overview</h3>\n<p>Learning a Bayesian network can be split into two problems which are both implemented in this package:</p>\n<ul>\n<li>Structure learning: Given a set of data samples, estimate a DAG that captures the dependencies between the variables.</li>\n<li>Parameter learning: Given a set of data samples and a DAG that captures the dependencies between the variables, e\nstimate the (conditional) probability distributions of the individual variables.</li>\n</ul>\n<h4>The following functions are available after importing bnlearn.</h4>\n<pre><span class=\"c1\"># Structure learning</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">structure_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">()</span>\n<span class=\"c1\"># Parameter learning</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">parameter_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">()</span>\n<span class=\"c1\"># Inference</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">inference</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">()</span>\n<span class=\"c1\"># Based on a DAG, you can sample the number of samples you want.</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">sampling</span><span class=\"p\">()</span>\n<span class=\"c1\"># Load well known examples to play arround with or load your own .bif file.</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">import_DAG</span><span class=\"p\">()</span>\n<span class=\"c1\"># Load simple dataframe of sprinkler dataset.</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">import_example</span><span class=\"p\">()</span>\n<span class=\"c1\"># Compare 2 graphs</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">compare_networks</span><span class=\"p\">()</span>\n<span class=\"c1\"># Plot graph</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n<span class=\"c1\"># To make the directed grapyh undirected</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">to_undirected</span><span class=\"p\">()</span>\n<span class=\"c1\"># Convert to one-hot datamatrix</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">df2onehot</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># See below for the exact working of the functions</span>\n</pre>\n<h4>The following methods are also included:</h4>\n<ul>\n<li>inference</li>\n<li>sampling</li>\n<li>comparing two networks</li>\n<li>loading bif files</li>\n<li>conversion of directed to undirected graphs</li>\n</ul>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#-installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#-Requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#-quick-start\" rel=\"nofollow\">Quick Start</a></li>\n<li><a href=\"#-contribute\" rel=\"nofollow\">Contribute</a></li>\n<li><a href=\"#-citation\" rel=\"nofollow\">Citation</a></li>\n<li><a href=\"#-maintainers\" rel=\"nofollow\">Maintainers</a></li>\n<li><a href=\"#-copyright\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>Install bnlearn from PyPI (recommended). bnlearn is compatible with Python 3.6+ and runs on Linux, MacOS X and Windows.</li>\n<li>It is distributed under the MIT license.</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>It is advisable to create a new environment.</li>\n</ul>\n<pre><span class=\"n\">conda</span> <span class=\"n\">create</span> <span class=\"o\">-</span><span class=\"n\">n</span> <span class=\"n\">env_BNLEARN</span> <span class=\"n\">python</span><span class=\"o\">=</span><span class=\"mf\">3.6</span>\n<span class=\"n\">conda</span> <span class=\"n\">activate</span> <span class=\"n\">env_BNLEARN</span>\n<span class=\"n\">conda</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"n\">ankurankan</span> <span class=\"n\">pgmpy</span>\n<span class=\"c1\">#conda install pytorch -c pytorch</span>\n\n<span class=\"c1\"># You may need to deactivate and then activate your environment otherwise the packages may not been recognized.</span>\n<span class=\"n\">conda</span> <span class=\"n\">deactivate</span>\n<span class=\"n\">conda</span> <span class=\"n\">activate</span> <span class=\"n\">env_BNLEARN</span>\n\n<span class=\"c1\"># The packages below are handled by the requirements in the bnlearn pip installer. So you dont need to do them manually.</span>\n<span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">sklearn</span> <span class=\"n\">pandas</span> <span class=\"n\">tqdm</span> <span class=\"n\">funcsigs</span> <span class=\"n\">statsmodels</span> <span class=\"n\">community</span> <span class=\"n\">packaging</span>\n</pre>\n<h2>Quick Start</h2>\n<pre><code>pip install bnlearn\n</code></pre>\n<ul>\n<li>Alternatively, install bnlearn from the GitHub source:</li>\n</ul>\n<pre>git clone https://github.com/erdogant/bnlearn.git\n<span class=\"nb\">cd</span> bnlearn\npython setup.py install\n</pre>\n<h2>Import bnlearn package</h2>\n<pre> <span class=\"kn\">import</span> <span class=\"nn\">bnlearn</span>\n</pre>\n<h2>Example: Structure Learning</h2>\n<pre><span class=\"c1\"># Example dataframe sprinkler_data.csv can be loaded with: </span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">import_example</span><span class=\"p\">()</span>\n<span class=\"c1\"># df = pd.read_csv('sprinkler_data.csv')</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">structure_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</pre>\n<h4>df looks like this</h4>\n<pre><code>     Cloudy  Sprinkler  Rain  Wet_Grass\n0         0          1     0          1\n1         1          1     1          1\n2         1          0     1          1\n3         0          0     1          1\n4         1          0     1          1\n..      ...        ...   ...        ...\n995       0          0     0          0\n996       1          0     0          0\n997       0          0     1          0\n998       1          1     0          1\n999       1          0     1          1\n</code></pre>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c285d368849c03ac87392ecfebaf01919614b9f/68747470733a2f2f6769746875622e636f6d2f6572646f67616e742f626e6c6561726e2f626c6f622f6d61737465722f646f63732f666967732f6669675f737072696e6b6c65725f736c2e706e67\" width=\"600\">\n</p>\n<ul>\n<li>Choosing various methodtypes and scoringtypes:</li>\n</ul>\n<pre><span class=\"n\">model_hc_bic</span>  <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">structure_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">methodtype</span><span class=\"o\">=</span><span class=\"s1\">'hc'</span><span class=\"p\">,</span> <span class=\"n\">scoretype</span><span class=\"o\">=</span><span class=\"s1\">'bic'</span><span class=\"p\">)</span>\n<span class=\"n\">model_hc_k2</span>   <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">structure_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">methodtype</span><span class=\"o\">=</span><span class=\"s1\">'hc'</span><span class=\"p\">,</span> <span class=\"n\">scoretype</span><span class=\"o\">=</span><span class=\"s1\">'k2'</span><span class=\"p\">)</span>\n<span class=\"n\">model_hc_bdeu</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">structure_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">methodtype</span><span class=\"o\">=</span><span class=\"s1\">'hc'</span><span class=\"p\">,</span> <span class=\"n\">scoretype</span><span class=\"o\">=</span><span class=\"s1\">'bdeu'</span><span class=\"p\">)</span>\n<span class=\"n\">model_ex_bic</span>  <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">structure_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">methodtype</span><span class=\"o\">=</span><span class=\"s1\">'ex'</span><span class=\"p\">,</span> <span class=\"n\">scoretype</span><span class=\"o\">=</span><span class=\"s1\">'bic'</span><span class=\"p\">)</span>\n<span class=\"n\">model_ex_k2</span>   <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">structure_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">methodtype</span><span class=\"o\">=</span><span class=\"s1\">'ex'</span><span class=\"p\">,</span> <span class=\"n\">scoretype</span><span class=\"o\">=</span><span class=\"s1\">'k2'</span><span class=\"p\">)</span>\n<span class=\"n\">model_ex_bdeu</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">structure_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">methodtype</span><span class=\"o\">=</span><span class=\"s1\">'ex'</span><span class=\"p\">,</span> <span class=\"n\">scoretype</span><span class=\"o\">=</span><span class=\"s1\">'bdeu'</span><span class=\"p\">)</span>\n</pre>\n<h2>Example: Parameter Learning</h2>\n<pre><span class=\"c1\"># Import dataframe</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">import_example</span><span class=\"p\">()</span>\n<span class=\"c1\"># As an example we set the CPD at False which returns an \"empty\" DAG</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">import_DAG</span><span class=\"p\">(</span><span class=\"s1\">'sprinkler'</span><span class=\"p\">,</span> <span class=\"n\">CPD</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># Now we learn the parameters of the DAG using the df</span>\n<span class=\"n\">model_update</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">parameter_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"c1\"># Make plot</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">model_update</span><span class=\"p\">)</span>\n</pre>\n<h2>Example: Inference</h2>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">import_DAG</span><span class=\"p\">(</span><span class=\"s1\">'sprinkler'</span><span class=\"p\">)</span>\n<span class=\"n\">q_1</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">inference</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Rain'</span><span class=\"p\">],</span> <span class=\"n\">evidence</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Cloudy'</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s1\">'Sprinkler'</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'Wet_Grass'</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"n\">q_2</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">inference</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Rain'</span><span class=\"p\">],</span> <span class=\"n\">evidence</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Cloudy'</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n</pre>\n<h2>Example: Sampling to create dataframe</h2>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">import_DAG</span><span class=\"p\">(</span><span class=\"s1\">'sprinkler'</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">sampling</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Output of the model:</li>\n</ul>\n<pre><code>[BNLEARN] Model correct: True\nCPD of Cloudy:\n+-----------+-----+\n| Cloudy(0) | 0.5 |\n+-----------+-----+\n| Cloudy(1) | 0.5 |\n+-----------+-----+\nCPD of Sprinkler:\n+--------------+-----------+-----------+\n| Cloudy       | Cloudy(0) | Cloudy(1) |\n+--------------+-----------+-----------+\n| Sprinkler(0) | 0.5       | 0.9       |\n+--------------+-----------+-----------+\n| Sprinkler(1) | 0.5       | 0.1       |\n+--------------+-----------+-----------+\nCPD of Rain:\n+---------+-----------+-----------+\n| Cloudy  | Cloudy(0) | Cloudy(1) |\n+---------+-----------+-----------+\n| Rain(0) | 0.8       | 0.2       |\n+---------+-----------+-----------+\n| Rain(1) | 0.2       | 0.8       |\n+---------+-----------+-----------+\nCPD of Wet_Grass:\n+--------------+--------------+--------------+--------------+--------------+\n| Sprinkler    | Sprinkler(0) | Sprinkler(0) | Sprinkler(1) | Sprinkler(1) |\n+--------------+--------------+--------------+--------------+--------------+\n| Rain         | Rain(0)      | Rain(1)      | Rain(0)      | Rain(1)      |\n+--------------+--------------+--------------+--------------+--------------+\n| Wet_Grass(0) | 1.0          | 0.1          | 0.1          | 0.01         |\n+--------------+--------------+--------------+--------------+--------------+\n| Wet_Grass(1) | 0.0          | 0.9          | 0.9          | 0.99         |\n+--------------+--------------+--------------+--------------+--------------+\n[BNLEARN] Nodes: ['Cloudy', 'Sprinkler', 'Rain', 'Wet_Grass']\n[BNLEARN] Edges: [('Cloudy', 'Sprinkler'), ('Cloudy', 'Rain'), ('Sprinkler', 'Wet_Grass'), ('Rain', 'Wet_Grass')]\n[BNLEARN] Independencies:\n(Cloudy _|_ Wet_Grass | Rain, Sprinkler)\n(Sprinkler _|_ Rain | Cloudy)\n(Rain _|_ Sprinkler | Cloudy)\n(Wet_Grass _|_ Cloudy | Rain, Sprinkler)\n</code></pre>\n<h2>Example: Loading DAG from bif files</h2>\n<pre><span class=\"n\">bif_file</span><span class=\"o\">=</span> <span class=\"s1\">'sprinkler'</span>\n<span class=\"n\">bif_file</span><span class=\"o\">=</span> <span class=\"s1\">'alarm'</span>\n<span class=\"n\">bif_file</span><span class=\"o\">=</span> <span class=\"s1\">'andes'</span>\n<span class=\"n\">bif_file</span><span class=\"o\">=</span> <span class=\"s1\">'asia'</span>\n<span class=\"n\">bif_file</span><span class=\"o\">=</span> <span class=\"s1\">'pathfinder'</span>\n<span class=\"n\">bif_file</span><span class=\"o\">=</span> <span class=\"s1\">'sachs'</span>\n<span class=\"n\">bif_file</span><span class=\"o\">=</span> <span class=\"s1\">'miserables'</span>\n<span class=\"n\">bif_file</span><span class=\"o\">=</span> <span class=\"s1\">'filepath/to/model.bif'</span>\n\n<span class=\"c1\"># Loading example dataset</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">import_DAG</span><span class=\"p\">(</span><span class=\"n\">bif_file</span><span class=\"p\">)</span>\n</pre>\n<h2>Example: Comparing networks</h2>\n<pre><span class=\"c1\"># Load asia DAG</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">import_DAG</span><span class=\"p\">(</span><span class=\"s1\">'asia'</span><span class=\"p\">)</span>\n<span class=\"c1\"># plot ground truth</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n<span class=\"c1\"># Sampling</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">sampling</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"c1\"># Structure learning of sampled dataset</span>\n<span class=\"n\">model_sl</span> <span class=\"o\">=</span> <span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">structure_learning</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">methodtype</span><span class=\"o\">=</span><span class=\"s1\">'hc'</span><span class=\"p\">,</span> <span class=\"n\">scoretype</span><span class=\"o\">=</span><span class=\"s1\">'bic'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Plot based on structure learning of sampled data</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">model_sl</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"n\">G</span><span class=\"p\">[</span><span class=\"s1\">'pos'</span><span class=\"p\">])</span>\n<span class=\"c1\"># Compare networks and make plot</span>\n<span class=\"n\">bnlearn</span><span class=\"o\">.</span><span class=\"n\">compare_networks</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">model_sl</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"n\">G</span><span class=\"p\">[</span><span class=\"s1\">'pos'</span><span class=\"p\">])</span>\n</pre>\n<h4>Graph of ground truth</h4>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7470b5915f8d0b15e19d92c1708e4d0bcfcd4c0b/68747470733a2f2f6769746875622e636f6d2f6572646f67616e742f626e6c6561726e2f626c6f622f6d61737465722f646f63732f666967732f66696732615f617369615f67726f756e6474727574682e706e67\" width=\"600\">\n</p>\n<h4>Graph based on Structure learning</h4>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/848c02b1239c3501953363d7d63894068b8a7dcf/68747470733a2f2f6769746875622e636f6d2f6572646f67616e742f626e6c6561726e2f626c6f622f6d61737465722f646f63732f666967732f66696732625f617369615f7374727563747572656c6561726e696e672e706e67\" width=\"600\">\n</p>\n<h4>Graph comparison ground truth vs. structure learning</h4>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ffaff8e4007565e07b76aa7f2d3a94e10de2fd8/68747470733a2f2f6769746875622e636f6d2f6572646f67616e742f626e6c6561726e2f626c6f622f6d61737465722f646f63732f666967732f66696732635f617369615f636f6d706172696f6e2e706e67\" width=\"600\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12ab502eeca3f6db229cec1c2be65ec34942cbb4/68747470733a2f2f6769746875622e636f6d2f6572646f67616e742f626e6c6561726e2f626c6f622f6d61737465722f646f63732f666967732f66696732645f636f6e666d61747269782e706e67\" width=\"400\">\n</p>\n<h2>Citation</h2>\n<p>Please cite bnlearn in your publications if this is useful for your research. Here is an example BibTeX entry:</p>\n<pre><span class=\"nc\">@misc</span><span class=\"p\">{</span><span class=\"nl\">erdogant2019bnlearn</span><span class=\"p\">,</span>\n  <span class=\"na\">title</span><span class=\"p\">=</span><span class=\"s\">{bnlearn}</span><span class=\"p\">,</span>\n  <span class=\"na\">author</span><span class=\"p\">=</span><span class=\"s\">{Erdogan Taskesen}</span><span class=\"p\">,</span>\n  <span class=\"na\">year</span><span class=\"p\">=</span><span class=\"s\">{2019}</span><span class=\"p\">,</span>\n  <span class=\"na\">howpublished</span><span class=\"p\">=</span><span class=\"s\">{\\url{https://github.com/erdogant/bnlearn}}</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://erdogant.github.io/bnlearn/\" rel=\"nofollow\">https://erdogant.github.io/bnlearn/</a></li>\n<li><a href=\"http://pgmpy.org\" rel=\"nofollow\">http://pgmpy.org</a></li>\n<li><a href=\"https://programtalk.com/python-examples/pgmpy.factors.discrete.TabularCPD/\" rel=\"nofollow\">https://programtalk.com/python-examples/pgmpy.factors.discrete.TabularCPD/</a></li>\n<li><a href=\"http://www.bnlearn.com/\" rel=\"nofollow\">http://www.bnlearn.com/</a></li>\n<li><a href=\"http://www.bnlearn.com/bnrepository/\" rel=\"nofollow\">http://www.bnlearn.com/bnrepository/</a></li>\n</ul>\n<h2>Maintainers</h2>\n<ul>\n<li>Erdogan Taskesen, github: <a href=\"https://github.com/erdogant\" rel=\"nofollow\">erdogant</a></li>\n</ul>\n<h2>Contribute</h2>\n<ul>\n<li>All kinds of contributions are welcome!</li>\n</ul>\n<h2>Licence</h2>\n<p>See <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> for details.</p>\n<h3>Donation</h3>\n<ul>\n<li>This work is created and maintained in my free time. If you wish to buy me a <a href=\"https://erdogant.github.io/donate/?currency=USD&amp;amount=5\" rel=\"nofollow\">Coffee</a> for this work, it is very appreciated.</li>\n</ul>\n\n          </div>"}, "last_serial": 7018724, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "c0b77376acfd452feb0e5bce128f3055", "sha256": "b9ac238e464908a192b3b25a7d0885cdb4a28f1680eda2c94ef89da9334da594"}, "downloads": -1, "filename": "bnlearn-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c0b77376acfd452feb0e5bce128f3055", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 330229, "upload_time": "2020-01-05T22:56:40", "upload_time_iso_8601": "2020-01-05T22:56:40.693073Z", "url": "https://files.pythonhosted.org/packages/26/51/1728ab757928f190ba319539204af478dee61b98ef9446c633fe9571bf6b/bnlearn-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8f21f6150da281524cfb145326b323e", "sha256": "06876b18ff18ca58e6dae4684104eab8497977da327aa6ab698fe7fab4136ed7"}, "downloads": -1, "filename": "bnlearn-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a8f21f6150da281524cfb145326b323e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 343454, "upload_time": "2020-01-05T22:56:47", "upload_time_iso_8601": "2020-01-05T22:56:47.291912Z", "url": "https://files.pythonhosted.org/packages/f4/a7/39debdd052a6931af6489094f940ddec0d8f0f4d72b780a75cdd4d622e33/bnlearn-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d14b488e4467df171da7b6e7ba7f4ef0", "sha256": "9ef16ed58816e56d07e3167586d7643b29a54e02b29fe598639005c4f52ffb62"}, "downloads": -1, "filename": "bnlearn-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d14b488e4467df171da7b6e7ba7f4ef0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 330535, "upload_time": "2020-01-06T15:42:34", "upload_time_iso_8601": "2020-01-06T15:42:34.953732Z", "url": "https://files.pythonhosted.org/packages/9c/ea/3f6ef964edadf32d543ea34e8da470401b898c0295fc93095bd8e1fc1edf/bnlearn-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da4b0e1109ac83584ccc468a9c3ae372", "sha256": "439b9968f4f4e9c5c3154eb6d24d6a62a39b4b375426713b40a14f6060ab1724"}, "downloads": -1, "filename": "bnlearn-0.1.4.tar.gz", "has_sig": false, "md5_digest": "da4b0e1109ac83584ccc468a9c3ae372", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 343742, "upload_time": "2020-01-06T15:42:37", "upload_time_iso_8601": "2020-01-06T15:42:37.184436Z", "url": "https://files.pythonhosted.org/packages/51/13/090f23544317e53f85ceaa987383692c76d0e31acb4c270406946ef29308/bnlearn-0.1.4.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9e08d585db65f6c2a2e7d2b5483ba520", "sha256": "3d87770d5dc242cb0eaa92669cc2e76c30d036a649acc95aead58e0db759bddf"}, "downloads": -1, "filename": "bnlearn-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9e08d585db65f6c2a2e7d2b5483ba520", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 328016, "upload_time": "2020-01-31T21:15:39", "upload_time_iso_8601": "2020-01-31T21:15:39.840189Z", "url": "https://files.pythonhosted.org/packages/55/ae/9c2692b34fbe9ca96f8970120ba38d74ff7751e082b86d559013e943fb17/bnlearn-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af41d30770c91de9726270e04f8459f5", "sha256": "e6ceef76af864053c7b866ff2731a9b039fdb568e493ef6cafad5a0467854067"}, "downloads": -1, "filename": "bnlearn-0.2.1.tar.gz", "has_sig": false, "md5_digest": "af41d30770c91de9726270e04f8459f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 327196, "upload_time": "2020-01-31T21:15:46", "upload_time_iso_8601": "2020-01-31T21:15:46.150376Z", "url": "https://files.pythonhosted.org/packages/8c/4a/e74bbf698081d8222b195b458a93151f931a15e2697734d518ae2db2d23e/bnlearn-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "838dd4d29e4f6274190f9d2b9f285be7", "sha256": "c269eb7b92c1441c20c1affa524af543c157a075498fb0d388833faeaaebe3b2"}, "downloads": -1, "filename": "bnlearn-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "838dd4d29e4f6274190f9d2b9f285be7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 329085, "upload_time": "2020-02-22T22:40:17", "upload_time_iso_8601": "2020-02-22T22:40:17.420128Z", "url": "https://files.pythonhosted.org/packages/17/e0/6ce357841aa5dcb53d4066998f13146f65dd3f4bc94d8379509e429e92e8/bnlearn-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa211fa22e438cd497c5b3a19e7f2d5c", "sha256": "3e1ebfa77e0ab9fd1c1a7dddbc5796e655cb54298624b9ef7b00585e1053a174"}, "downloads": -1, "filename": "bnlearn-0.2.2.tar.gz", "has_sig": false, "md5_digest": "aa211fa22e438cd497c5b3a19e7f2d5c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 325276, "upload_time": "2020-02-22T22:40:22", "upload_time_iso_8601": "2020-02-22T22:40:22.822249Z", "url": "https://files.pythonhosted.org/packages/2b/97/16d4efc018d440cf93dea0698841516c4777c99cbad5ce132ed437a55399/bnlearn-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "3afb21adf47dc729a4c506a7ea4d00b5", "sha256": "414731250ed27259cbd93759b6063f1a8cce3560172a43d5316834b8370bf6d1"}, "downloads": -1, "filename": "bnlearn-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3afb21adf47dc729a4c506a7ea4d00b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 329027, "upload_time": "2020-02-23T18:00:53", "upload_time_iso_8601": "2020-02-23T18:00:53.581024Z", "url": "https://files.pythonhosted.org/packages/dd/da/2457fba2521f0a4d5097285bf5110285523339f9bfeb00ff95b5174187b7/bnlearn-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "347cf56b5666426affc977975a879ee6", "sha256": "ef2e04bc7688737642db6362986666e279dcbfb7f1a08f6572fe4c82967c7216"}, "downloads": -1, "filename": "bnlearn-0.2.3.tar.gz", "has_sig": false, "md5_digest": "347cf56b5666426affc977975a879ee6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 325205, "upload_time": "2020-02-23T18:00:58", "upload_time_iso_8601": "2020-02-23T18:00:58.964303Z", "url": "https://files.pythonhosted.org/packages/0d/fd/15e48fb92cae33568c18cd34251c1a169854d24d8348a218071a44534a16/bnlearn-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ad65c476b146f53e46af2a48cb79006e", "sha256": "4687c80909164438cf89e551d75a329401c733006cfc576419cfb5812cd1d66c"}, "downloads": -1, "filename": "bnlearn-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ad65c476b146f53e46af2a48cb79006e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 329131, "upload_time": "2020-02-24T21:48:12", "upload_time_iso_8601": "2020-02-24T21:48:12.327040Z", "url": "https://files.pythonhosted.org/packages/0e/c0/6dd6a1a9f5553d81d5f7f6f58f74263971dac2741d5d85ba46491ae3e0e3/bnlearn-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdb21f39504900c51dcfb64534f00962", "sha256": "a7faf2e1f86cbfb909d6c7cea9ad9d3a2c9a0ab79768a626dbf289e71c312d5c"}, "downloads": -1, "filename": "bnlearn-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cdb21f39504900c51dcfb64534f00962", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 325303, "upload_time": "2020-02-24T21:48:20", "upload_time_iso_8601": "2020-02-24T21:48:20.288234Z", "url": "https://files.pythonhosted.org/packages/cb/1c/d22909aee23bc8c766239f257c1e14c171b021412d1fa663714e71f76f63/bnlearn-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "ad4e39a8e36ba922b6c7522f193b2019", "sha256": "29c92b38bd2e5c26e5ba5f3d0a57691cb2f53d6885bd600761bccbd34ce6be5d"}, "downloads": -1, "filename": "bnlearn-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ad4e39a8e36ba922b6c7522f193b2019", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 323628, "upload_time": "2020-04-13T22:16:11", "upload_time_iso_8601": "2020-04-13T22:16:11.738142Z", "url": "https://files.pythonhosted.org/packages/8c/b1/5b1bfb0837f61e9e5c8e3d98a0a11711ec7e45e7309fbfa60050b1cf2cf0/bnlearn-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0c3a24c6d1a83ca378ac20422cf5c96", "sha256": "190d4c3cff03b3ef42221a7af7992e6c0b05e32412f8226c489f8ea70cbf53ec"}, "downloads": -1, "filename": "bnlearn-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f0c3a24c6d1a83ca378ac20422cf5c96", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 324682, "upload_time": "2020-04-13T22:16:17", "upload_time_iso_8601": "2020-04-13T22:16:17.051889Z", "url": "https://files.pythonhosted.org/packages/38/1f/0a8c01c77137fcb747f7086616c0a56819271d581568ff696c19d62711b7/bnlearn-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "d2c85e44ff881d1797bfaa2d3df3e9d7", "sha256": "2c3f7d1326bc59080d9aaef6069279ff84c840469b600308c59ac2e98d83b69e"}, "downloads": -1, "filename": "bnlearn-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d2c85e44ff881d1797bfaa2d3df3e9d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 324196, "upload_time": "2020-04-14T15:21:35", "upload_time_iso_8601": "2020-04-14T15:21:35.188125Z", "url": "https://files.pythonhosted.org/packages/b4/bb/6480ad6f97db3e719ae72851fb1b10021145efbaec7e4aca5d5eade4c412/bnlearn-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6525d0a42a63c6304ca71c059c359d63", "sha256": "63fd27527e1f29e866c65b6deeb4485bb02507ecad53efc8e74e9b8a699bbf0e"}, "downloads": -1, "filename": "bnlearn-0.3.2.tar.gz", "has_sig": false, "md5_digest": "6525d0a42a63c6304ca71c059c359d63", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 322050, "upload_time": "2020-04-14T15:21:39", "upload_time_iso_8601": "2020-04-14T15:21:39.950995Z", "url": "https://files.pythonhosted.org/packages/ce/41/72e7322e3678e01553aae7c896787e8009cc0a6bf2b0ab74025ef6dcac7b/bnlearn-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "d4f32d13be3e6af264f3591044f38df6", "sha256": "6f6575b2db710c0411375f2763597e3e1d6eae5737cec901265a57b8e4e97480"}, "downloads": -1, "filename": "bnlearn-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d4f32d13be3e6af264f3591044f38df6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 324297, "upload_time": "2020-04-14T17:25:50", "upload_time_iso_8601": "2020-04-14T17:25:50.636732Z", "url": "https://files.pythonhosted.org/packages/d7/8a/6a1d3a5f2637af65f097720f0f16a8d86c89ff5283eee93c0ee832d08e3d/bnlearn-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe00bbf953cb86345cf4822efafa6a4b", "sha256": "d8dd0530a5849a0592abaac7f88e209167ff57ec33ed56e1054b1751cc2799d4"}, "downloads": -1, "filename": "bnlearn-0.3.3.tar.gz", "has_sig": false, "md5_digest": "fe00bbf953cb86345cf4822efafa6a4b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 322166, "upload_time": "2020-04-14T17:25:55", "upload_time_iso_8601": "2020-04-14T17:25:55.461050Z", "url": "https://files.pythonhosted.org/packages/75/b2/12328484ee53bf40070b38758572dd52801878d76064a95ba20e08b2c96c/bnlearn-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d4f32d13be3e6af264f3591044f38df6", "sha256": "6f6575b2db710c0411375f2763597e3e1d6eae5737cec901265a57b8e4e97480"}, "downloads": -1, "filename": "bnlearn-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d4f32d13be3e6af264f3591044f38df6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 324297, "upload_time": "2020-04-14T17:25:50", "upload_time_iso_8601": "2020-04-14T17:25:50.636732Z", "url": "https://files.pythonhosted.org/packages/d7/8a/6a1d3a5f2637af65f097720f0f16a8d86c89ff5283eee93c0ee832d08e3d/bnlearn-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe00bbf953cb86345cf4822efafa6a4b", "sha256": "d8dd0530a5849a0592abaac7f88e209167ff57ec33ed56e1054b1751cc2799d4"}, "downloads": -1, "filename": "bnlearn-0.3.3.tar.gz", "has_sig": false, "md5_digest": "fe00bbf953cb86345cf4822efafa6a4b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 322166, "upload_time": "2020-04-14T17:25:55", "upload_time_iso_8601": "2020-04-14T17:25:55.461050Z", "url": "https://files.pythonhosted.org/packages/75/b2/12328484ee53bf40070b38758572dd52801878d76064a95ba20e08b2c96c/bnlearn-0.3.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:55 2020"}