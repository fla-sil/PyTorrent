{"info": {"author": "miphreal", "author_email": "miphreal@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8"], "description": "<p align=\"center\">\n    <a href=\"https://pypi.org/project/confctl/\">\n        <img src=\"https://badge.fury.io/py/confctl.svg\" alt=\"Package version\">\n    </a>\n</p>\n\n# confctl\n\nHelps to organize you configs and how they generated, installed.\n\n```sh\n$ confctl configure i3 rofi\n```\n\n![Example execution](https://github.com/miphreal/confctl/raw/master/docs/example_output.png)\n\n\n```sh\n$ confctl --help\nUsage:\n  confctl configure [self] [<configuration>...]\n                   [--target=<target-system>|--nb|--pc|--srv]\n                   [--flags=<list-of-flags>] [--machine-id=<unique-node-id>]\n\nCommands:\n  configure       Cofiugre software on the host system (e.g. i3)\n\nOptions:\n  -h --help       Show this help\n  -v --version    Show version\n\nOptions for `confctl configure`:\n  --target=<target>  Current system type (nb, pc, srv)\n  --machine-id=<node-id>  Current system unique id (e.g. work.pc)\n  --flags=<flags>    A comma separated list of extra flags\n  ```\n\n## Getting started\n\n1. Create a virtual env specially for your configuration (use any tool you prefer for managing/creating python virtual envs)\n\n```sh\n$ pyenv virtualenv 3.8.2 confctl\n```\n\n2. Activate & install `confctl`\n```sh\n$ pyenv shell confctl\n$ pip install confctl\n$ confctl configure self --target=laptop --machine-id=dellxps\n```\n\nNote, we pass `--target` to specify the \"type\" of device and `--machine-id` to identify current device.\nThis info will be remembered in `~/.config/confctl/config` file. It might be usefull to understand\nduring configuration what it's applied to (e.g. to render differend configs for pc and laptop as\nthey might have differnt parameters).\n\n3. Create a couple configs\n\nGo to `~/.config/confctl/user-configs` and create there a folder with `__init__.py` inside.\n`__init__.py` must define `Configuration` class (inherited from `Base`, which btw also provides some handy utils to run sh commands, render templates, etc).\n\n```py\n# ~/.config/confctl/user-configs/console/__init__.py\nfrom confctl import Base, Param\n\n\nclass Configuration(Base):\n    HOME = Param.PATH(\"~\")\n    TARGET = Param()\n    tmux_plugin_manager_dir = Param.PATH(\"~/.tmux/plugins/tpm\")\n    tpm_repo = \"https://github.com/tmux-plugins/tpm\"\n    fonts_repo = \"https://github.com/ryanoasis/nerd-fonts\"\n    prezto_repo = \"https://github.com/sorin-ionescu/prezto\"\n\n    def configure(self):\n        # patched fonts\n        fonts_dir = self.CACHE_DIR / \"fonts\"\n        if not (fonts_dir / \".git\").exists():\n            self.run_sh(f\"git clone --depth 1 {self.fonts_repo} {fonts_dir}\")\n            self.run_sh(f'bash {fonts_dir / \"install.sh\"}')\n\n        # tmux\n        self.ensure_folders(self.tmux_plugin_manager_dir)\n        if not (self.tmux_plugin_manager_dir / \".git\").exists():\n            self.run_sh(f\"git clone {self.tpm_repo} {self.tmux_plugin_manager_dir}\")\n        self.template(\"tmux.conf.j2\", symlink=self.HOME / \".tmux.conf\")\n\n        # prezto\n        prezto_dir = self.HOME / \".zprezto\"\n        if not (prezto_dir / \".git\").exists():\n            self.run_sh(f'git clone --recursive {self.prezto_repo} \"{prezto_dir}\"')\n\n        if not (self.HOME / \".zpreztorc\").exists():\n            init_zprezto = \"\"\"\nsetopt EXTENDED_GLOB\nfor rcfile in \"${ZDOTDIR:-$HOME}\"/.zprezto/runcoms/^README.md(.N); do\nln -s \"$rcfile\" \"${ZDOTDIR:-$HOME}/.${rcfile:t}\"\ndone\n\"\"\"\n            self.warning(\n                f\"You may need to manually setup `zprezto`: \\n{init_zprezto}\"\n            )\n```\n\nThe folder with configuration can contain any assets/templates used during configuration.\nIn this example, there should be `tmux.conf.j2`.\n\n\n4. Then you simply run this configuration\n\n```sh\n$ confctl configure console\n```\n\nOr just\n\n```sh\n$ confctl configure\n```\nwhich will apply all defined configurations.\n\n## API\n\nTBD\n\n\n## Internals\n\nTBD\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/miphreal/confctl", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "confctl", "package_url": "https://pypi.org/project/confctl/", "platform": "", "project_url": "https://pypi.org/project/confctl/", "project_urls": {"Homepage": "https://github.com/miphreal/confctl", "Repository": "https://github.com/miphreal/confctl"}, "release_url": "https://pypi.org/project/confctl/0.3.1/", "requires_dist": ["docopt (>=0.6.2,<0.7.0)", "jinja2 (>=2.11.1,<3.0.0)"], "requires_python": ">=3.8,<4.0", "summary": "Simple configuration management", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n    <a href=\"https://pypi.org/project/confctl/\" rel=\"nofollow\">\n        <img alt=\"Package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7c4cdb25222009ccd6dc056c3f726f8048a8675/68747470733a2f2f62616467652e667572792e696f2f70792f636f6e6663746c2e737667\">\n    </a>\n</p>\n<h1>confctl</h1>\n<p>Helps to organize you configs and how they generated, installed.</p>\n<pre>$ confctl configure i3 rofi\n</pre>\n<p><img alt=\"Example execution\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87d36b14fbf5f19bda34242ce698d04efeb5e247/68747470733a2f2f6769746875622e636f6d2f6d6970687265616c2f636f6e6663746c2f7261772f6d61737465722f646f63732f6578616d706c655f6f75747075742e706e67\"></p>\n<pre>$ confctl --help\nUsage:\n  confctl configure <span class=\"o\">[</span>self<span class=\"o\">]</span> <span class=\"o\">[</span>&lt;configuration&gt;...<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--target<span class=\"o\">=</span>&lt;target-system&gt;<span class=\"p\">|</span>--nb<span class=\"p\">|</span>--pc<span class=\"p\">|</span>--srv<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--flags<span class=\"o\">=</span>&lt;list-of-flags&gt;<span class=\"o\">]</span> <span class=\"o\">[</span>--machine-id<span class=\"o\">=</span>&lt;unique-node-id&gt;<span class=\"o\">]</span>\n\nCommands:\n  configure       Cofiugre software on the host system <span class=\"o\">(</span>e.g. i3<span class=\"o\">)</span>\n\nOptions:\n  -h --help       Show this <span class=\"nb\">help</span>\n  -v --version    Show version\n\nOptions <span class=\"k\">for</span> <span class=\"sb\">`</span>confctl configure<span class=\"sb\">`</span>:\n  --target<span class=\"o\">=</span>&lt;target&gt;  Current system <span class=\"nb\">type</span> <span class=\"o\">(</span>nb, pc, srv<span class=\"o\">)</span>\n  --machine-id<span class=\"o\">=</span>&lt;node-id&gt;  Current system unique id <span class=\"o\">(</span>e.g. work.pc<span class=\"o\">)</span>\n  --flags<span class=\"o\">=</span>&lt;flags&gt;    A comma separated list of extra flags\n</pre>\n<h2>Getting started</h2>\n<ol>\n<li>Create a virtual env specially for your configuration (use any tool you prefer for managing/creating python virtual envs)</li>\n</ol>\n<pre>$ pyenv virtualenv <span class=\"m\">3</span>.8.2 confctl\n</pre>\n<ol>\n<li>Activate &amp; install <code>confctl</code></li>\n</ol>\n<pre>$ pyenv shell confctl\n$ pip install confctl\n$ confctl configure self --target<span class=\"o\">=</span>laptop --machine-id<span class=\"o\">=</span>dellxps\n</pre>\n<p>Note, we pass <code>--target</code> to specify the \"type\" of device and <code>--machine-id</code> to identify current device.\nThis info will be remembered in <code>~/.config/confctl/config</code> file. It might be usefull to understand\nduring configuration what it's applied to (e.g. to render differend configs for pc and laptop as\nthey might have differnt parameters).</p>\n<ol>\n<li>Create a couple configs</li>\n</ol>\n<p>Go to <code>~/.config/confctl/user-configs</code> and create there a folder with <code>__init__.py</code> inside.\n<code>__init__.py</code> must define <code>Configuration</code> class (inherited from <code>Base</code>, which btw also provides some handy utils to run sh commands, render templates, etc).</p>\n<pre><span class=\"c1\"># ~/.config/confctl/user-configs/console/__init__.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">confctl</span> <span class=\"kn\">import</span> <span class=\"n\">Base</span><span class=\"p\">,</span> <span class=\"n\">Param</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Configuration</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">HOME</span> <span class=\"o\">=</span> <span class=\"n\">Param</span><span class=\"o\">.</span><span class=\"n\">PATH</span><span class=\"p\">(</span><span class=\"s2\">\"~\"</span><span class=\"p\">)</span>\n    <span class=\"n\">TARGET</span> <span class=\"o\">=</span> <span class=\"n\">Param</span><span class=\"p\">()</span>\n    <span class=\"n\">tmux_plugin_manager_dir</span> <span class=\"o\">=</span> <span class=\"n\">Param</span><span class=\"o\">.</span><span class=\"n\">PATH</span><span class=\"p\">(</span><span class=\"s2\">\"~/.tmux/plugins/tpm\"</span><span class=\"p\">)</span>\n    <span class=\"n\">tpm_repo</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://github.com/tmux-plugins/tpm\"</span>\n    <span class=\"n\">fonts_repo</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://github.com/ryanoasis/nerd-fonts\"</span>\n    <span class=\"n\">prezto_repo</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://github.com/sorin-ionescu/prezto\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">configure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># patched fonts</span>\n        <span class=\"n\">fonts_dir</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">CACHE_DIR</span> <span class=\"o\">/</span> <span class=\"s2\">\"fonts\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">fonts_dir</span> <span class=\"o\">/</span> <span class=\"s2\">\".git\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_sh</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"git clone --depth 1 </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fonts_repo</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">fonts_dir</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_sh</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'bash </span><span class=\"si\">{</span><span class=\"n\">fonts_dir</span> <span class=\"o\">/</span> <span class=\"s2\">\"install.sh\"</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># tmux</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ensure_folders</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tmux_plugin_manager_dir</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tmux_plugin_manager_dir</span> <span class=\"o\">/</span> <span class=\"s2\">\".git\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_sh</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"git clone </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tpm_repo</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tmux_plugin_manager_dir</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s2\">\"tmux.conf.j2\"</span><span class=\"p\">,</span> <span class=\"n\">symlink</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME</span> <span class=\"o\">/</span> <span class=\"s2\">\".tmux.conf\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># prezto</span>\n        <span class=\"n\">prezto_dir</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME</span> <span class=\"o\">/</span> <span class=\"s2\">\".zprezto\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">prezto_dir</span> <span class=\"o\">/</span> <span class=\"s2\">\".git\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_sh</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'git clone --recursive </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prezto_repo</span><span class=\"si\">}</span><span class=\"s1\"> \"</span><span class=\"si\">{</span><span class=\"n\">prezto_dir</span><span class=\"si\">}</span><span class=\"s1\">\"'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">HOME</span> <span class=\"o\">/</span> <span class=\"s2\">\".zpreztorc\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"n\">init_zprezto</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">setopt EXTENDED_GLOB</span>\n<span class=\"s2\">for rcfile in \"${ZDOTDIR:-$HOME}\"/.zprezto/runcoms/^README.md(.N); do</span>\n<span class=\"s2\">ln -s \"$rcfile\" \"${ZDOTDIR:-$HOME}/.${rcfile:t}\"</span>\n<span class=\"s2\">done</span>\n<span class=\"s2\">\"\"\"</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">\"You may need to manually setup `zprezto`: </span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">init_zprezto</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n            <span class=\"p\">)</span>\n</pre>\n<p>The folder with configuration can contain any assets/templates used during configuration.\nIn this example, there should be <code>tmux.conf.j2</code>.</p>\n<ol>\n<li>Then you simply run this configuration</li>\n</ol>\n<pre>$ confctl configure console\n</pre>\n<p>Or just</p>\n<pre>$ confctl configure\n</pre>\n<p>which will apply all defined configurations.</p>\n<h2>API</h2>\n<p>TBD</p>\n<h2>Internals</h2>\n<p>TBD</p>\n\n          </div>"}, "last_serial": 6927677, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "15bb3e5d5ed820365e7e6447fc7ef2ef", "sha256": "167e2b307aeb3c8bae632c14c5770bf3cadd2ffafa79369f22a94fe42917198e"}, "downloads": -1, "filename": "confctl-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "15bb3e5d5ed820365e7e6447fc7ef2ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 5851, "upload_time": "2020-03-31T12:39:50", "upload_time_iso_8601": "2020-03-31T12:39:50.868710Z", "url": "https://files.pythonhosted.org/packages/74/23/b18394ddb4180adb398e9e452d47415d838d55efd2f6bc1db3c84fdfa884/confctl-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ad004aa2f097dc4712f4b766b77a720", "sha256": "9509eb59f047fd2510170096725a6c0c1e1b22be656eb1ba93a12199bad2a164"}, "downloads": -1, "filename": "confctl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4ad004aa2f097dc4712f4b766b77a720", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 5135, "upload_time": "2020-03-31T12:39:52", "upload_time_iso_8601": "2020-03-31T12:39:52.905702Z", "url": "https://files.pythonhosted.org/packages/ff/01/f019ff45f5143cf725ceff26fd89a095966dd1258e706f69d8dd02a8e6bb/confctl-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ca989b70ad75c4c8ec49057c6ff189f2", "sha256": "58fe9264be2bbb5085551f110dcb9fc535abd71e504b89e9b104f4dfbd892408"}, "downloads": -1, "filename": "confctl-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ca989b70ad75c4c8ec49057c6ff189f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 6441, "upload_time": "2020-03-31T16:30:41", "upload_time_iso_8601": "2020-03-31T16:30:41.731737Z", "url": "https://files.pythonhosted.org/packages/e1/b2/0f60bc8d99ecf3b27ebfbf8dbaefd4582878b2ac4bd7eab5d351f10b9462/confctl-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91cd8b4150992f34b7e15a1d908c0ef5", "sha256": "a5911e72453ed339d902f2c4d1a1b4670dbcc8b208869646526ed579fb951f24"}, "downloads": -1, "filename": "confctl-0.2.0.tar.gz", "has_sig": false, "md5_digest": "91cd8b4150992f34b7e15a1d908c0ef5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 5731, "upload_time": "2020-03-31T16:30:43", "upload_time_iso_8601": "2020-03-31T16:30:43.041329Z", "url": "https://files.pythonhosted.org/packages/3b/5c/0884faa30692469b28be7b1c1800121227687ea147e9479be0f48979ba21/confctl-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5e8706ae82a841741e5f52480198da39", "sha256": "682be50d1946617c5fb2feed7bfbe689b33ef4a6e20a505c60586df09ba11530"}, "downloads": -1, "filename": "confctl-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5e8706ae82a841741e5f52480198da39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 9355, "upload_time": "2020-04-01T13:16:15", "upload_time_iso_8601": "2020-04-01T13:16:15.674090Z", "url": "https://files.pythonhosted.org/packages/82/82/1408ffacd663e359093b4b92a79f34832e9a540c7c03cbaa0401ba3260e8/confctl-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9181141cd236bb81c0e091809e61fe91", "sha256": "e80979809e6b1f9a0ad76b4882f100e7e44a76aebc27de0cd90801040baa5491"}, "downloads": -1, "filename": "confctl-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9181141cd236bb81c0e091809e61fe91", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 9477, "upload_time": "2020-04-01T13:16:35", "upload_time_iso_8601": "2020-04-01T13:16:35.446995Z", "url": "https://files.pythonhosted.org/packages/79/39/491e3e9a6dae5cfbcae46c14a694156158c545df439f6279dba911a2da7e/confctl-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "391132ac19db0839f731d28693fd36f1", "sha256": "b5a70dc7d81a92ff5f4044a2be1e4b35a512783dd726aecb2f4063afac650a78"}, "downloads": -1, "filename": "confctl-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "391132ac19db0839f731d28693fd36f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 9323, "upload_time": "2020-04-01T13:31:31", "upload_time_iso_8601": "2020-04-01T13:31:31.507794Z", "url": "https://files.pythonhosted.org/packages/48/0e/1beddcef343a0fc600d4ea48a848936f59281ce0f0cb6a6f9eb11bc1601a/confctl-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a13e701923ded61f327acda271040dc3", "sha256": "fff7fa13f2895e38d998f152d0154b2bba62282302500735a3917c92a67e302b"}, "downloads": -1, "filename": "confctl-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a13e701923ded61f327acda271040dc3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 9416, "upload_time": "2020-04-01T13:31:33", "upload_time_iso_8601": "2020-04-01T13:31:33.405843Z", "url": "https://files.pythonhosted.org/packages/f3/d4/1808f85cf6089f58512e2f5aa6a4af3c212aba8233c613b223656bfb2047/confctl-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "391132ac19db0839f731d28693fd36f1", "sha256": "b5a70dc7d81a92ff5f4044a2be1e4b35a512783dd726aecb2f4063afac650a78"}, "downloads": -1, "filename": "confctl-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "391132ac19db0839f731d28693fd36f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 9323, "upload_time": "2020-04-01T13:31:31", "upload_time_iso_8601": "2020-04-01T13:31:31.507794Z", "url": "https://files.pythonhosted.org/packages/48/0e/1beddcef343a0fc600d4ea48a848936f59281ce0f0cb6a6f9eb11bc1601a/confctl-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a13e701923ded61f327acda271040dc3", "sha256": "fff7fa13f2895e38d998f152d0154b2bba62282302500735a3917c92a67e302b"}, "downloads": -1, "filename": "confctl-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a13e701923ded61f327acda271040dc3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 9416, "upload_time": "2020-04-01T13:31:33", "upload_time_iso_8601": "2020-04-01T13:31:33.405843Z", "url": "https://files.pythonhosted.org/packages/f3/d4/1808f85cf6089f58512e2f5aa6a4af3c212aba8233c613b223656bfb2047/confctl-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:00 2020"}