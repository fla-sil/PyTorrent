{"info": {"author": "Edmund Pfeil", "author_email": "edmundpf@buffalo.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Data Type Tools\n[![Build Status](https://travis-ci.org/edmundpf/datatype_tools.svg?branch=master)](https://travis-ci.org/edmundpf/datatype_tools)\n[![PyPI version](https://badge.fury.io/py/datatype-tools.svg)](https://badge.fury.io/py/datatype-tools)\n> Includes useful helper methods for Python's immutable data types using the *forbiddenfruit* library.\n## Install\n* `python3 -m pip install datatype-tools`\n## Usage\n* Import single datatype\n\t* `from datatype_tools.lib import Float`\n* Import all datatypes\n\t* `from datatype_tools.lib import *`\n## Dict Tools\n* *sort_by_val*\n\t * Sorts dictionary by values, expects dictionary with a depth of 1\n\t\t ``` python\n\t\t >>> obj = {'a': 3, 'b': 1, 'c': 2}\n\t\t >>> obj.sort_by_val(sort_type='int')\n\t\t {'b': 1, 'c': 2, 'a': 3}\n\t\t ```\n\t* Arguments\n\t\t* *self*: dictionary\n\t\t* *asc*: boolean (True)\n\t\t\t* Ascending order when True, Descending when False\n\t\t* *sort_type*: string ('string')\n\t\t\t* Data Type for sort, includes 'string', 'int', 'float', and 'date' types\n\t\t\t* Date Type is a string representing a date\n\t\t\t* Data does not need to match type i.e. a string with an int value '1'\n\t\t\t* Returns original data type\n\t\t* *date_input*: string ('mdy')\n\t\t\t* Date input format\n\t\t\t* i.e. 'ymd', 'mdy', etc.\n\t* Returns sorted dict\n* *sort_by_key*\n\t* Sorts dictionary by keys, expects dictionary with a depth of 1\n\t\t ``` python\n\t\t >>> obj = {'c': 1, 'a': 3, 'b': 2}\n\t\t >>> obj.sort_by_key(sort_type='string')\n\t\t {'a': 3, 'b': 2, 'c': 1}\n\t\t ```\t\n\t* Arguments\n\t\t* *self*: dictionary\n\t\t* *asc*: boolean (True)\n\t\t\t* Ascending order when True, Descending when False\n\t\t* *sort_type*: string ('string')\n\t\t\t* Data Type for sort, includes 'string', 'int', 'float', and 'date' types\n\t\t\t* Date Type is a string representing a date\n\t\t\t* Data does not need to match type i.e. a string with an int value '1'\n\t\t\t* Returns original data type\n\t\t* *date_input*: string ('mdy')\n\t\t\t* Date input format\n\t\t\t* i.e. 'ymd', 'mdy', etc.\n\t* Returns sorted dict\n* *nested_sort*\n\t* Sorts dictionary by nested key value\n\t\t ``` python\n\t\t >>> obj = {'a': {'b': {'c': 2}}, 'b': {'b': {'c': 1}}}\n\t\t >>> obj.nested_sort(nested_args=[{'keys': ['b', 'c'], 'sort_type': 'int'}])\n\t\t {'b': {'b': {'c': 1}}, 'a': {'b': {'c': 2}}}\n\t\t ```\n\t* Arguments\n\t\t* *self*: dictionary\n\t\t* *asc*: boolean (True)\n\t\t\t* Ascending order when True, Descending when False\n\t\t* *nested_args*: list\n\t\t\t* List of sort argument dicts, can include multiple to sort by multiple nested keys respectively\n\t\t\t* Args\n\t\t\t\t* *keys*: list\n\t\t\t\t\t* list of nested keys respectively i.e. ['b', 'c', 'd'] will sort by key ['b']['c']['d']\n\t\t\t\t* *sort_type*: string ('string')\n\t\t\t\t\t* Data Type for sort, includes 'string', 'int', 'float', and 'date' types\n\t\t\t\t\t* Date Type is a string representing a date\n\t\t\t\t\t* Data does not need to match type i.e. a string with an int value '1'\n\t\t\t\t\t* Returns original data type\n\t\t\t\t* *date_input*: string ('mdy')\n\t\t\t\t\t* Date input format\n\t\t\t\t\t* i.e. 'ymd', 'mdy', etc.\n\t* Returns sorted dict\n## List Tools\n* *sort_by_val*\n\t * Sorts list of dictionaries by values, expects dictionaries with a depth of 1\n\t\t ``` python\n\t\t >>> li = [{'a': 3}, {'b': 1}, {'c': 2}]\n\t\t >>> li.sort_by_val(sort_type='int')\n\t\t [{'b': 1}, {'c': 2}, {'a': 3}]\n\t\t ```\n\t* Arguments\n\t\t* *self*: list\n\t\t* *asc*: boolean (True)\n\t\t\t* Ascending order when True, Descending when False\n\t\t* *sort_type*: string ('string')\n\t\t\t* Data Type for sort, includes 'string', 'int', 'float', and 'date' types\n\t\t\t* Date Type is a string representing a date\n\t\t\t* Data does not need to match type i.e. a string with an int value '1'\n\t\t\t* Returns original data type\n\t\t* *date_input*: string ('mdy')\n\t\t\t* Date input format\n\t\t\t* i.e. 'ymd', 'mdy', etc.\n\t* Returns sorted list\n* *sort_by_key*\n\t* Sorts list of dictionaries by keys, expects dictionaries with a depth of 1\n\t\t ``` python\n\t\t >>> li = [{'c': 1}, {'a': 3}, {'b': 2}]\n\t\t >>> li.sort_by_key(sort_type='string')\n\t\t [{'a': 3}, {'b': 2}, {'c': 1}]\n\t\t ```\t\n\t* Arguments\n\t\t* *self*: list\n\t\t* *asc*: boolean (True)\n\t\t\t* Ascending order when True, Descending when False\n\t\t* *sort_type*: string ('string')\n\t\t\t* Data Type for sort, includes 'string', 'int', 'float', and 'date' types\n\t\t\t* Date Type is a string representing a date\n\t\t\t* Data does not need to match type i.e. a string with an int value '1'\n\t\t\t* Returns original data type\n\t\t* *date_input*: string ('mdy')\n\t\t\t* Date input format\n\t\t\t* i.e. 'ymd', 'mdy', etc.\n\t* Returns sorted list\n* *sort_by_key_val*\n\t* Sorts list of dictionaries by specific key value, expects dictionaries with a depth of 1\n\t\t ``` python\n\t\t >>> li = [{'a': 1, 'b': 2}, {'a': 2, 'b': 1}]\n\t\t >>> li.sort_by_key_val(key='b', sort_type='string')\n\t\t [{'a': 2, 'b': 1}, {'a': 1, 'b': 2}]\n\t\t ```\t\n\t* Arguments\n\t\t* *self*: list\n\t\t* *asc*: boolean (True)\n\t\t\t* Ascending order when True, Descending when False\n\t\t* *sort_type*: string ('string')\n\t\t\t* Data Type for sort, includes 'string', 'int', 'float', and 'date' types\n\t\t\t* Date Type is a string representing a date\n\t\t\t* Data does not need to match type i.e. a string with an int value '1'\n\t\t\t* Returns original data type\n\t\t* *date_input*: string ('mdy')\n\t\t\t* Date input format\n\t\t\t* i.e. 'ymd', 'mdy', etc.\n\t* Returns sorted list\n* *nested_sort*\n\t* Sorts list of dictionaries by nested key value\n\t\t ``` python\n\t\t >>> li = [{'a': {'b': {'c': 2}}}, {'b': {'b': {'c': 1}}}]\n\t\t >>> li.nested_sort(nested_args=[{'keys': ['b', 'c'], 'sort_type': 'int'}])\n\t\t [{'b': {'b': {'c': 1}}}, {'a': {'b': {'c': 2}}}]\n\t\t ```\n\t* Arguments\n\t\t* *self*: list\n\t\t* *asc*: boolean (True)\n\t\t\t* Ascending order when True, Descending when False\n\t\t* *nested_args*: list\n\t\t\t* List of sort argument dicts, can include multiple to sort by multiple nested keys respectively\n\t\t\t* Args\n\t\t\t\t* *keys*: list\n\t\t\t\t\t* list of nested keys respectively i.e. ['b', 'c', 'd'] will sort by key ['b']['c']['d']\n\t\t\t\t* *sort_type*: string ('string')\n\t\t\t\t\t* Data Type for sort, includes 'string', 'int', 'float', and 'date' types\n\t\t\t\t\t* Date Type is a string representing a date\n\t\t\t\t\t* Data does not need to match type i.e. a string with an int value '1'\n\t\t\t\t\t* Returns original data type\n\t\t\t\t* *date_input*: string ('mdy')\n\t\t\t\t\t* Date input format\n\t\t\t\t\t* i.e. 'ymd', 'mdy', etc.\n\t* Returns sorted list\n## String Tools\n* *replace_multiple*\n\t* Replace multiple substrings or characters in a string with their respective replacements\n\t\t``` python\n\t\t>>> 'The Apple is Red'.replace_multiple({'Apple': 'Grass', 'Red': 'Green'})\n\t\t'The Grass is Green'\n\t\t```\n\t* Arguments\n\t\t* *self*: string\n\t\t* *dictionary*: dict\n\t\t\t* dict keys are the values to replace, and key values will be their respective replacements in the string\n\t* Returns string with replacements\n* *format_date*\n\t* Formats string representing date in multiple formats\n\t\t``` python\n\t\t>>> '1/01/75'.format_date(date_input='mdy', date_format='mmddyyyy', delimiter='-')\n\t\t'01-01-1975'\n\t\t```\n\t* Arguments\n\t\t* *self*: string\n\t\t* *date_input*: string ('mdy')\n\t\t\t* date input order, i.e. 'mdy' for month, day, year, and 'ymd' for year, month, day\n\t\t* *date_format* string ('mmddyy')\n\t\t\t* date output format, the number of each letter correspond to date digits, i.e. a date with 'mmddyyyy' will have 4 digits for year while a date with 'mmddyy' will only have 2 digits for year\n\t\t* delimiter: string ('')\n\t\t\t* delimiter for date output, i.e. '/' yields 01/01/2019\n\t* Returns formatted date string\n* *find_nth*\n\t* Find nth occurence of substring in string\n\t\t``` python\n\t\t>>> 'apple picking'.find_nth('p', 3)\n\t\t11\n\t\t```\n\t* Arguments\n\t\t* *self*: string\n\t\t* *string*: string\n\t\t\t* substring to search in string\n\t\t* *n*: int\n\t\t\t* 1-based occurence number of substring to find in string.\n\t* Returns int index\n* *b64_enc*\n\t* Base64 encode string\n\t``` python\n\t>>> 'plain_text'.b64_enc()\n\t'cGxhaW5fdGV4dA=='\n\t```\n\t* Arguments\n\t\t* *self*: string\n\t* Returns string\n* *b64_dec*\n\t* Base64 decode string\n\t``` python\n\t>>> 'cGxhaW5fdGV4dA=='.b64_dec()\n\t'plain_text'\n\t```\n\t* Arguments\n\t\t* *self*: string\n\t* Returns string\n* *get_iso_date*\n\t* Get ISO Date from string\n\t``` python\n\t>>> '2019-05-27T19:09:04.285211Z'.get_iso_date()\n\t{'date': '05/27/2019', 'time': '19:09:04', 'micros': '285211', 'date_and_time': '05/27/2019-19:09:04', 'full_date': '05/27/2019-19:09:04.285211'}\n\t```\n\t* Arguments\n\t\t* *self*: string\n\t\t* iso_format: string, ISO datetime format for strftime\n\t\t* date_format: string, date output format\n\t\t* delimiter: string, date output delimiter\n\t* Returns dict\n## Float Tools\n* *round*\n\t* Round value to n decimal places (scientific rounding, fixes python rounding errors)\n\t\t``` python\n\t\t>>> 4.055.round(2)\n\t\t4.06\n\t\t>>> 4.054(2)\n\t\t4.05\n\t\t```\n\t* Arguments\n\t\t* *self*: float\n\t\t* *places*: int (2)\n\t\t\t* Number of places to round to\n\t* Returns rounded float\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/edmundpf/datatype_tools", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "datatype-tools", "package_url": "https://pypi.org/project/datatype-tools/", "platform": "", "project_url": "https://pypi.org/project/datatype-tools/", "project_urls": {"Homepage": "https://github.com/edmundpf/datatype_tools"}, "release_url": "https://pypi.org/project/datatype-tools/0.1.3/", "requires_dist": ["forbiddenfruit"], "requires_python": "", "summary": "Additional methods for Python's immutable data types.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Data Type Tools</h1>\n<p><a href=\"https://travis-ci.org/edmundpf/datatype_tools\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26cc5dbe44101954e62f9ad38872328a9ab8c760/68747470733a2f2f7472617669732d63692e6f72672f65646d756e6470662f64617461747970655f746f6f6c732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/datatype-tools\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63c93fe089a682da6c27e9ed43c432981db7e39e/68747470733a2f2f62616467652e667572792e696f2f70792f64617461747970652d746f6f6c732e737667\"></a></p>\n<blockquote>\n<p>Includes useful helper methods for Python's immutable data types using the <em>forbiddenfruit</em> library.</p>\n</blockquote>\n<h2>Install</h2>\n<ul>\n<li><code>python3 -m pip install datatype-tools</code></li>\n</ul>\n<h2>Usage</h2>\n<ul>\n<li>Import single datatype\n<ul>\n<li><code>from datatype_tools.lib import Float</code></li>\n</ul>\n</li>\n<li>Import all datatypes\n<ul>\n<li><code>from datatype_tools.lib import *</code></li>\n</ul>\n</li>\n</ul>\n<h2>Dict Tools</h2>\n<ul>\n<li><em>sort_by_val</em>\n<ul>\n<li>Sorts dictionary by values, expects dictionary with a depth of 1\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">sort_by_val</span><span class=\"p\">(</span><span class=\"n\">sort_type</span><span class=\"o\">=</span><span class=\"s1\">'int'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: dictionary</li>\n<li><em>asc</em>: boolean (True)\n<ul>\n<li>Ascending order when True, Descending when False</li>\n</ul>\n</li>\n<li><em>sort_type</em>: string ('string')\n<ul>\n<li>Data Type for sort, includes 'string', 'int', 'float', and 'date' types</li>\n<li>Date Type is a string representing a date</li>\n<li>Data does not need to match type i.e. a string with an int value '1'</li>\n<li>Returns original data type</li>\n</ul>\n</li>\n<li><em>date_input</em>: string ('mdy')\n<ul>\n<li>Date input format</li>\n<li>i.e. 'ymd', 'mdy', etc.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns sorted dict</li>\n</ul>\n</li>\n<li><em>sort_by_key</em>\n<ul>\n<li>Sorts dictionary by keys, expects dictionary with a depth of 1\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">sort_by_key</span><span class=\"p\">(</span><span class=\"n\">sort_type</span><span class=\"o\">=</span><span class=\"s1\">'string'</span><span class=\"p\">)</span>\n <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: dictionary</li>\n<li><em>asc</em>: boolean (True)\n<ul>\n<li>Ascending order when True, Descending when False</li>\n</ul>\n</li>\n<li><em>sort_type</em>: string ('string')\n<ul>\n<li>Data Type for sort, includes 'string', 'int', 'float', and 'date' types</li>\n<li>Date Type is a string representing a date</li>\n<li>Data does not need to match type i.e. a string with an int value '1'</li>\n<li>Returns original data type</li>\n</ul>\n</li>\n<li><em>date_input</em>: string ('mdy')\n<ul>\n<li>Date input format</li>\n<li>i.e. 'ymd', 'mdy', etc.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns sorted dict</li>\n</ul>\n</li>\n<li><em>nested_sort</em>\n<ul>\n<li>Sorts dictionary by nested key value\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}},</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}}}</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">nested_sort</span><span class=\"p\">(</span><span class=\"n\">nested_args</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'keys'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">],</span> <span class=\"s1\">'sort_type'</span><span class=\"p\">:</span> <span class=\"s1\">'int'</span><span class=\"p\">}])</span>\n <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}},</span> <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}}}</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: dictionary</li>\n<li><em>asc</em>: boolean (True)\n<ul>\n<li>Ascending order when True, Descending when False</li>\n</ul>\n</li>\n<li><em>nested_args</em>: list\n<ul>\n<li>List of sort argument dicts, can include multiple to sort by multiple nested keys respectively</li>\n<li>Args\n<ul>\n<li><em>keys</em>: list\n<ul>\n<li>list of nested keys respectively i.e. ['b', 'c', 'd'] will sort by key ['b']['c']['d']</li>\n</ul>\n</li>\n<li><em>sort_type</em>: string ('string')\n<ul>\n<li>Data Type for sort, includes 'string', 'int', 'float', and 'date' types</li>\n<li>Date Type is a string representing a date</li>\n<li>Data does not need to match type i.e. a string with an int value '1'</li>\n<li>Returns original data type</li>\n</ul>\n</li>\n<li><em>date_input</em>: string ('mdy')\n<ul>\n<li>Date input format</li>\n<li>i.e. 'ymd', 'mdy', etc.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns sorted dict</li>\n</ul>\n</li>\n</ul>\n<h2>List Tools</h2>\n<ul>\n<li><em>sort_by_val</em>\n<ul>\n<li>Sorts list of dictionaries by values, expects dictionaries with a depth of 1\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">li</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">li</span><span class=\"o\">.</span><span class=\"n\">sort_by_val</span><span class=\"p\">(</span><span class=\"n\">sort_type</span><span class=\"o\">=</span><span class=\"s1\">'int'</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}]</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: list</li>\n<li><em>asc</em>: boolean (True)\n<ul>\n<li>Ascending order when True, Descending when False</li>\n</ul>\n</li>\n<li><em>sort_type</em>: string ('string')\n<ul>\n<li>Data Type for sort, includes 'string', 'int', 'float', and 'date' types</li>\n<li>Date Type is a string representing a date</li>\n<li>Data does not need to match type i.e. a string with an int value '1'</li>\n<li>Returns original data type</li>\n</ul>\n</li>\n<li><em>date_input</em>: string ('mdy')\n<ul>\n<li>Date input format</li>\n<li>i.e. 'ymd', 'mdy', etc.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns sorted list</li>\n</ul>\n</li>\n<li><em>sort_by_key</em>\n<ul>\n<li>Sorts list of dictionaries by keys, expects dictionaries with a depth of 1\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">li</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}]</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">li</span><span class=\"o\">.</span><span class=\"n\">sort_by_key</span><span class=\"p\">(</span><span class=\"n\">sort_type</span><span class=\"o\">=</span><span class=\"s1\">'string'</span><span class=\"p\">)</span>\n <span class=\"p\">[{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}]</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: list</li>\n<li><em>asc</em>: boolean (True)\n<ul>\n<li>Ascending order when True, Descending when False</li>\n</ul>\n</li>\n<li><em>sort_type</em>: string ('string')\n<ul>\n<li>Data Type for sort, includes 'string', 'int', 'float', and 'date' types</li>\n<li>Date Type is a string representing a date</li>\n<li>Data does not need to match type i.e. a string with an int value '1'</li>\n<li>Returns original data type</li>\n</ul>\n</li>\n<li><em>date_input</em>: string ('mdy')\n<ul>\n<li>Date input format</li>\n<li>i.e. 'ymd', 'mdy', etc.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns sorted list</li>\n</ul>\n</li>\n<li><em>sort_by_key_val</em>\n<ul>\n<li>Sorts list of dictionaries by specific key value, expects dictionaries with a depth of 1\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">li</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}]</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">li</span><span class=\"o\">.</span><span class=\"n\">sort_by_key_val</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"n\">sort_type</span><span class=\"o\">=</span><span class=\"s1\">'string'</span><span class=\"p\">)</span>\n <span class=\"p\">[{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}]</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: list</li>\n<li><em>asc</em>: boolean (True)\n<ul>\n<li>Ascending order when True, Descending when False</li>\n</ul>\n</li>\n<li><em>sort_type</em>: string ('string')\n<ul>\n<li>Data Type for sort, includes 'string', 'int', 'float', and 'date' types</li>\n<li>Date Type is a string representing a date</li>\n<li>Data does not need to match type i.e. a string with an int value '1'</li>\n<li>Returns original data type</li>\n</ul>\n</li>\n<li><em>date_input</em>: string ('mdy')\n<ul>\n<li>Date input format</li>\n<li>i.e. 'ymd', 'mdy', etc.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns sorted list</li>\n</ul>\n</li>\n<li><em>nested_sort</em>\n<ul>\n<li>Sorts list of dictionaries by nested key value\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">li</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}}},</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}}}]</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">li</span><span class=\"o\">.</span><span class=\"n\">nested_sort</span><span class=\"p\">(</span><span class=\"n\">nested_args</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'keys'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">],</span> <span class=\"s1\">'sort_type'</span><span class=\"p\">:</span> <span class=\"s1\">'int'</span><span class=\"p\">}])</span>\n <span class=\"p\">[{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}}},</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}}}]</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: list</li>\n<li><em>asc</em>: boolean (True)\n<ul>\n<li>Ascending order when True, Descending when False</li>\n</ul>\n</li>\n<li><em>nested_args</em>: list\n<ul>\n<li>List of sort argument dicts, can include multiple to sort by multiple nested keys respectively</li>\n<li>Args\n<ul>\n<li><em>keys</em>: list\n<ul>\n<li>list of nested keys respectively i.e. ['b', 'c', 'd'] will sort by key ['b']['c']['d']</li>\n</ul>\n</li>\n<li><em>sort_type</em>: string ('string')\n<ul>\n<li>Data Type for sort, includes 'string', 'int', 'float', and 'date' types</li>\n<li>Date Type is a string representing a date</li>\n<li>Data does not need to match type i.e. a string with an int value '1'</li>\n<li>Returns original data type</li>\n</ul>\n</li>\n<li><em>date_input</em>: string ('mdy')\n<ul>\n<li>Date input format</li>\n<li>i.e. 'ymd', 'mdy', etc.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns sorted list</li>\n</ul>\n</li>\n</ul>\n<h2>String Tools</h2>\n<ul>\n<li><em>replace_multiple</em>\n<ul>\n<li>Replace multiple substrings or characters in a string with their respective replacements\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'The Apple is Red'</span><span class=\"o\">.</span><span class=\"n\">replace_multiple</span><span class=\"p\">({</span><span class=\"s1\">'Apple'</span><span class=\"p\">:</span> <span class=\"s1\">'Grass'</span><span class=\"p\">,</span> <span class=\"s1\">'Red'</span><span class=\"p\">:</span> <span class=\"s1\">'Green'</span><span class=\"p\">})</span>\n <span class=\"s1\">'The Grass is Green'</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: string</li>\n<li><em>dictionary</em>: dict\n<ul>\n<li>dict keys are the values to replace, and key values will be their respective replacements in the string</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns string with replacements</li>\n</ul>\n</li>\n<li><em>format_date</em>\n<ul>\n<li>Formats string representing date in multiple formats\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'1/01/75'</span><span class=\"o\">.</span><span class=\"n\">format_date</span><span class=\"p\">(</span><span class=\"n\">date_input</span><span class=\"o\">=</span><span class=\"s1\">'mdy'</span><span class=\"p\">,</span> <span class=\"n\">date_format</span><span class=\"o\">=</span><span class=\"s1\">'mmddyyyy'</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">'-'</span><span class=\"p\">)</span>\n <span class=\"s1\">'01-01-1975'</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: string</li>\n<li><em>date_input</em>: string ('mdy')\n<ul>\n<li>date input order, i.e. 'mdy' for month, day, year, and 'ymd' for year, month, day</li>\n</ul>\n</li>\n<li><em>date_format</em> string ('mmddyy')\n<ul>\n<li>date output format, the number of each letter correspond to date digits, i.e. a date with 'mmddyyyy' will have 4 digits for year while a date with 'mmddyy' will only have 2 digits for year</li>\n</ul>\n</li>\n<li>delimiter: string ('')\n<ul>\n<li>delimiter for date output, i.e. '/' yields 01/01/2019</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns formatted date string</li>\n</ul>\n</li>\n<li><em>find_nth</em>\n<ul>\n<li>Find nth occurence of substring in string\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'apple picking'</span><span class=\"o\">.</span><span class=\"n\">find_nth</span><span class=\"p\">(</span><span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n <span class=\"mi\">11</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: string</li>\n<li><em>string</em>: string\n<ul>\n<li>substring to search in string</li>\n</ul>\n</li>\n<li><em>n</em>: int\n<ul>\n<li>1-based occurence number of substring to find in string.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns int index</li>\n</ul>\n</li>\n<li><em>b64_enc</em>\n<ul>\n<li>Base64 encode string</li>\n</ul>\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'plain_text'</span><span class=\"o\">.</span><span class=\"n\">b64_enc</span><span class=\"p\">()</span>\n <span class=\"s1\">'cGxhaW5fdGV4dA=='</span>\n</pre>\n<ul>\n<li>Arguments\n<ul>\n<li><em>self</em>: string</li>\n</ul>\n</li>\n<li>Returns string</li>\n</ul>\n</li>\n<li><em>b64_dec</em>\n<ul>\n<li>Base64 decode string</li>\n</ul>\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'cGxhaW5fdGV4dA=='</span><span class=\"o\">.</span><span class=\"n\">b64_dec</span><span class=\"p\">()</span>\n <span class=\"s1\">'plain_text'</span>\n</pre>\n<ul>\n<li>Arguments\n<ul>\n<li><em>self</em>: string</li>\n</ul>\n</li>\n<li>Returns string</li>\n</ul>\n</li>\n<li><em>get_iso_date</em>\n<ul>\n<li>Get ISO Date from string</li>\n</ul>\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'2019-05-27T19:09:04.285211Z'</span><span class=\"o\">.</span><span class=\"n\">get_iso_date</span><span class=\"p\">()</span>\n <span class=\"p\">{</span><span class=\"s1\">'date'</span><span class=\"p\">:</span> <span class=\"s1\">'05/27/2019'</span><span class=\"p\">,</span> <span class=\"s1\">'time'</span><span class=\"p\">:</span> <span class=\"s1\">'19:09:04'</span><span class=\"p\">,</span> <span class=\"s1\">'micros'</span><span class=\"p\">:</span> <span class=\"s1\">'285211'</span><span class=\"p\">,</span> <span class=\"s1\">'date_and_time'</span><span class=\"p\">:</span> <span class=\"s1\">'05/27/2019-19:09:04'</span><span class=\"p\">,</span> <span class=\"s1\">'full_date'</span><span class=\"p\">:</span> <span class=\"s1\">'05/27/2019-19:09:04.285211'</span><span class=\"p\">}</span>\n</pre>\n<ul>\n<li>Arguments\n<ul>\n<li><em>self</em>: string</li>\n<li>iso_format: string, ISO datetime format for strftime</li>\n<li>date_format: string, date output format</li>\n<li>delimiter: string, date output delimiter</li>\n</ul>\n</li>\n<li>Returns dict</li>\n</ul>\n</li>\n</ul>\n<h2>Float Tools</h2>\n<ul>\n<li><em>round</em>\n<ul>\n<li>Round value to n decimal places (scientific rounding, fixes python rounding errors)\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mf\">4.055</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n <span class=\"mf\">4.06</span>\n <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mf\">4.054</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n <span class=\"mf\">4.05</span>\n</pre>\n</li>\n<li>Arguments\n<ul>\n<li><em>self</em>: float</li>\n<li><em>places</em>: int (2)\n<ul>\n<li>Number of places to round to</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Returns rounded float</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 5391598, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f393db9a92cf84df86502895b191b29d", "sha256": "66a09a1a8650ee3bc48d3cc6d20bfaa5c9232e18c9fd13ccd8cad1fa0a6717cf"}, "downloads": -1, "filename": "datatype_tools-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f393db9a92cf84df86502895b191b29d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9013, "upload_time": "2019-05-31T18:00:02", "upload_time_iso_8601": "2019-05-31T18:00:02.733023Z", "url": "https://files.pythonhosted.org/packages/f5/51/801ccaedf977b4dba39cb1341892e0ce7317b2b66d0ba3ed055ddd225b8a/datatype_tools-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a28cf1d90bde4d25e01ef51b679d667b", "sha256": "305ea1d887eaf765a71b081eeb45fdec4b53e6868385895f3483864dc3a4b754"}, "downloads": -1, "filename": "datatype-tools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a28cf1d90bde4d25e01ef51b679d667b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6437, "upload_time": "2019-05-31T18:00:04", "upload_time_iso_8601": "2019-05-31T18:00:04.910520Z", "url": "https://files.pythonhosted.org/packages/39/a4/3ae1c5740fae377e5771b31aed7afaf68d6620e7bd31e47c9de81eef1af2/datatype-tools-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b72c11ad55a36af506c21caf9e7ed50a", "sha256": "0fee5b7fbc18e03865e927ecc286ab932ee4e1066cf70bded35503de7f55314a"}, "downloads": -1, "filename": "datatype_tools-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b72c11ad55a36af506c21caf9e7ed50a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9086, "upload_time": "2019-05-31T18:09:45", "upload_time_iso_8601": "2019-05-31T18:09:45.769331Z", "url": "https://files.pythonhosted.org/packages/ea/17/c705e1c04a44085fbeff42dd86cd2ef178f039d6de2828023296777a5bf3/datatype_tools-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea6d0b2cab49558eb8b6dac66814353f", "sha256": "7de6d7505fc1a711ea2890e365eeac25af7bf30b4921a83f957797c06bffb104"}, "downloads": -1, "filename": "datatype-tools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ea6d0b2cab49558eb8b6dac66814353f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6527, "upload_time": "2019-05-31T18:09:47", "upload_time_iso_8601": "2019-05-31T18:09:47.270721Z", "url": "https://files.pythonhosted.org/packages/1a/6d/1310e16a1d12e822e992fdbbe7e3a0158f6a439534927d6986e3d4c99c7e/datatype-tools-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "0adf8de9e2b643c8ff1c326a94e03a5d", "sha256": "4d1ca095dea68f6315b97533f4faf738ed7d5f72ca55ec1351879864a11a14e3"}, "downloads": -1, "filename": "datatype_tools-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0adf8de9e2b643c8ff1c326a94e03a5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9135, "upload_time": "2019-06-03T11:30:17", "upload_time_iso_8601": "2019-06-03T11:30:17.530754Z", "url": "https://files.pythonhosted.org/packages/fa/69/02980309acbee4c0eb495cf976c1aaece1ef55532bb530fba23335b9c8ba/datatype_tools-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc748094a8c4c25ba146a7e9f76d10dd", "sha256": "e970a5f8ee1333c929ecbffa6acec3f925bab39d19085bc211440c27991f6065"}, "downloads": -1, "filename": "datatype-tools-0.0.3.tar.gz", "has_sig": false, "md5_digest": "bc748094a8c4c25ba146a7e9f76d10dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6581, "upload_time": "2019-06-03T11:30:18", "upload_time_iso_8601": "2019-06-03T11:30:18.704987Z", "url": "https://files.pythonhosted.org/packages/16/4f/2b4ea86f12f41802121da9da2d98b944971a1fa93e79a2116cf6aa6736c0/datatype-tools-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "698ba14a4d7ab5b02622fbbd0652c31f", "sha256": "f582c3716caafe4a09b5e6794f2a9712639fd51a304b2f85732fc2558ee119dc"}, "downloads": -1, "filename": "datatype_tools-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "698ba14a4d7ab5b02622fbbd0652c31f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9914, "upload_time": "2019-06-03T21:03:41", "upload_time_iso_8601": "2019-06-03T21:03:41.300075Z", "url": "https://files.pythonhosted.org/packages/92/51/dbb2cdf92c6afb785c6de813c3a0b0bec1029fe8623ef3f74523582d4e95/datatype_tools-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8ca41bab1c5a19a53ddfb5f816fefba", "sha256": "11dce7767baea74b385cbb3dfa634ea6b197e6a6d0766981557d8958940f96da"}, "downloads": -1, "filename": "datatype-tools-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b8ca41bab1c5a19a53ddfb5f816fefba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6664, "upload_time": "2019-06-03T21:03:42", "upload_time_iso_8601": "2019-06-03T21:03:42.769055Z", "url": "https://files.pythonhosted.org/packages/81/a3/4ffbe8ee6d29b91ed2390975b5725ffc78dd9e745e56d2cbc03bb90d7517/datatype-tools-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "98b44ce14e2ae0411a86ffb1a4e5766f", "sha256": "2f8d7f27efcf7a569e39c5df37cc4ad6637bf846b8547afa1622fafe2a1b711f"}, "downloads": -1, "filename": "datatype_tools-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "98b44ce14e2ae0411a86ffb1a4e5766f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9957, "upload_time": "2019-06-04T11:09:15", "upload_time_iso_8601": "2019-06-04T11:09:15.062484Z", "url": "https://files.pythonhosted.org/packages/f1/3a/00db4c3d024196c6ee0009cdbcf82638c3753bb524fad58a41f7e7987361/datatype_tools-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b25f10b5b64a0179b1014ab8db2f13e3", "sha256": "017e8d50afbc77d098a8de8890c806d757cdb3f698f517b9bd263f0bc77c5646"}, "downloads": -1, "filename": "datatype-tools-0.0.5.tar.gz", "has_sig": false, "md5_digest": "b25f10b5b64a0179b1014ab8db2f13e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6647, "upload_time": "2019-06-04T11:09:16", "upload_time_iso_8601": "2019-06-04T11:09:16.614920Z", "url": "https://files.pythonhosted.org/packages/a2/9f/38c4b4f1546f8748a861c8e415067a0808f542613781716a929bf34ee4c2/datatype-tools-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "e857fc947808a48a4db80a22f98199cc", "sha256": "7d5798a6d863676d3249559a17426faee746e09563d8a1ab045447865f1cd1bf"}, "downloads": -1, "filename": "datatype_tools-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e857fc947808a48a4db80a22f98199cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9941, "upload_time": "2019-06-04T11:12:27", "upload_time_iso_8601": "2019-06-04T11:12:27.926779Z", "url": "https://files.pythonhosted.org/packages/55/d9/10004f0dd060b40066696f21cdfba6fc8bf313fbc6b594f946c860e5e0ce/datatype_tools-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbca568fcd5a8670dec7f39cdf1e01d5", "sha256": "ee56d878ce5f6e1c475aeeffadb236521ad681f981ac4fe5e1a5ab8358be0dbb"}, "downloads": -1, "filename": "datatype-tools-0.0.6.tar.gz", "has_sig": false, "md5_digest": "dbca568fcd5a8670dec7f39cdf1e01d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6656, "upload_time": "2019-06-04T11:12:29", "upload_time_iso_8601": "2019-06-04T11:12:29.455301Z", "url": "https://files.pythonhosted.org/packages/fe/7b/aff2f6453df1c67304d6b33fc47177a646492b36b0a087a9b22fad961e9e/datatype-tools-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "7c88ae1da867d953cfa90a76a7b688ca", "sha256": "9c50d643fb876afcb381f04e6ec8cdf148ae55090abb3cc900b3bb926495f2e3"}, "downloads": -1, "filename": "datatype_tools-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "7c88ae1da867d953cfa90a76a7b688ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9903, "upload_time": "2019-06-04T11:28:55", "upload_time_iso_8601": "2019-06-04T11:28:55.482519Z", "url": "https://files.pythonhosted.org/packages/e6/9a/88e09c3a6a89eca0bbf41867cd082fb6792b775611a10771130a7d8f2b6e/datatype_tools-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af800a9bca7b9e5fe1205c10be2d55c6", "sha256": "3b7c667f851e5a0c1e1fe85789ca3a108205737ac0e1b32d07baf759e84889c9"}, "downloads": -1, "filename": "datatype-tools-0.0.7.tar.gz", "has_sig": false, "md5_digest": "af800a9bca7b9e5fe1205c10be2d55c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6661, "upload_time": "2019-06-04T11:28:57", "upload_time_iso_8601": "2019-06-04T11:28:57.020709Z", "url": "https://files.pythonhosted.org/packages/7f/c7/09b921d5115eee5e76fd1fb9d197db91cd1a16df58fb518755ba9043f635/datatype-tools-0.0.7.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "dd3ff91f8de5e883f90e2b746556997c", "sha256": "a2a9e36266fa90c7912b8460b348b1714ed6fa3d5990471d0392740d6b6d240b"}, "downloads": -1, "filename": "datatype_tools-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dd3ff91f8de5e883f90e2b746556997c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9729, "upload_time": "2019-06-04T12:37:05", "upload_time_iso_8601": "2019-06-04T12:37:05.724681Z", "url": "https://files.pythonhosted.org/packages/2f/95/bc0f7fe47ab3286077f42a6d6c4b9463b3daba1ce9443f2f1086c55ceacd/datatype_tools-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbfab261420c325cca9c52669f302dee", "sha256": "ff8275d265ba23a6b1de40865e32e6b835b2c12b3d405362ee77ae5d3aa7e697"}, "downloads": -1, "filename": "datatype-tools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cbfab261420c325cca9c52669f302dee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6614, "upload_time": "2019-06-04T12:37:07", "upload_time_iso_8601": "2019-06-04T12:37:07.468428Z", "url": "https://files.pythonhosted.org/packages/b9/53/b2e7027d110548d6ea4f51b0db5a8d84db7926356870e3eba05d63dab514/datatype-tools-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f74ba53310e7cc5127a512c6b1bed90e", "sha256": "89341bb4c07311404dfc896ae80ecc75603d9ec354c937b849b8051943bc81fa"}, "downloads": -1, "filename": "datatype_tools-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f74ba53310e7cc5127a512c6b1bed90e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9997, "upload_time": "2019-06-05T12:51:14", "upload_time_iso_8601": "2019-06-05T12:51:14.946259Z", "url": "https://files.pythonhosted.org/packages/57/bc/61f76a4fbbe750c767286f55792628ad5c753d5ff0276f7a19f8400916be/datatype_tools-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8f9688022f15d292433ce99e6a3a1b7", "sha256": "2298f028ce78790cf8cd6ed92c66a35b4f7ebd2dbf29d16d3082f04ec08e18c1"}, "downloads": -1, "filename": "datatype-tools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c8f9688022f15d292433ce99e6a3a1b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6879, "upload_time": "2019-06-05T12:51:16", "upload_time_iso_8601": "2019-06-05T12:51:16.476806Z", "url": "https://files.pythonhosted.org/packages/10/f6/d8b856cc0969f144d0bafc5f33cac79c174f967ad979f6588d8ee24720a9/datatype-tools-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b3bffd6eb635add5a2cda795f517fb5a", "sha256": "956437a9e5398a1dc481af356af8477f91883fc9e6cca6e44ec35ca862c5931e"}, "downloads": -1, "filename": "datatype_tools-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b3bffd6eb635add5a2cda795f517fb5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10283, "upload_time": "2019-06-06T16:22:51", "upload_time_iso_8601": "2019-06-06T16:22:51.111890Z", "url": "https://files.pythonhosted.org/packages/19/62/b62efacf290408e53dd80d3cf3d4da95135b991e1eee2c75f51591c6a08b/datatype_tools-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f53d5f86ed9d7d56c0735876ee8b69f", "sha256": "ffac42855f5520c8e03290f63ca3342e9c9a5e43c5ff9b97347de4b78509cf43"}, "downloads": -1, "filename": "datatype-tools-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5f53d5f86ed9d7d56c0735876ee8b69f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7161, "upload_time": "2019-06-06T16:22:52", "upload_time_iso_8601": "2019-06-06T16:22:52.602111Z", "url": "https://files.pythonhosted.org/packages/f3/3f/ccc28c41b9f314a3ba580ecfc167b600eb661ecc19b30b37a4a001564961/datatype-tools-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "904f26f7b3107a7241876d991782ad38", "sha256": "f16d4fa6d89964a0b4765506cbed04d40c444eebb3e0548b5ef854bcce9f5c4e"}, "downloads": -1, "filename": "datatype_tools-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "904f26f7b3107a7241876d991782ad38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11261, "upload_time": "2019-06-12T14:58:38", "upload_time_iso_8601": "2019-06-12T14:58:38.698040Z", "url": "https://files.pythonhosted.org/packages/7d/01/46e1b7729076e7dd822fc313becd16abcdfa5cb5fc08876fb1f96b8ae73e/datatype_tools-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48c7d34ce25321fe664cd11e3ea8806c", "sha256": "c8430897697a1aa142702b21c3203a0eb7eb9dec3137f671eed9bbaf871c1009"}, "downloads": -1, "filename": "datatype-tools-0.1.3.tar.gz", "has_sig": false, "md5_digest": "48c7d34ce25321fe664cd11e3ea8806c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7267, "upload_time": "2019-06-12T14:58:40", "upload_time_iso_8601": "2019-06-12T14:58:40.233592Z", "url": "https://files.pythonhosted.org/packages/4f/dc/8003090cd47d7289c50ded37fd59da4598edf3d056dae4120318ded819f7/datatype-tools-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "904f26f7b3107a7241876d991782ad38", "sha256": "f16d4fa6d89964a0b4765506cbed04d40c444eebb3e0548b5ef854bcce9f5c4e"}, "downloads": -1, "filename": "datatype_tools-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "904f26f7b3107a7241876d991782ad38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11261, "upload_time": "2019-06-12T14:58:38", "upload_time_iso_8601": "2019-06-12T14:58:38.698040Z", "url": "https://files.pythonhosted.org/packages/7d/01/46e1b7729076e7dd822fc313becd16abcdfa5cb5fc08876fb1f96b8ae73e/datatype_tools-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48c7d34ce25321fe664cd11e3ea8806c", "sha256": "c8430897697a1aa142702b21c3203a0eb7eb9dec3137f671eed9bbaf871c1009"}, "downloads": -1, "filename": "datatype-tools-0.1.3.tar.gz", "has_sig": false, "md5_digest": "48c7d34ce25321fe664cd11e3ea8806c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7267, "upload_time": "2019-06-12T14:58:40", "upload_time_iso_8601": "2019-06-12T14:58:40.233592Z", "url": "https://files.pythonhosted.org/packages/4f/dc/8003090cd47d7289c50ded37fd59da4598edf3d056dae4120318ded819f7/datatype-tools-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:08 2020"}