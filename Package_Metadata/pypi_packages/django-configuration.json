{"info": {"author": "Richard Ward", "author_email": "richard.ward@fah-designs.co.uk", "bugtrack_url": null, "classifiers": [], "description": "====================\nDjango Configuration\n====================\n\nSome site wide settings belong in the database. This Django-Configure provides\na familiar way to implement this pattern. It uses django-polymorphic, mostly to\nprovide a clean admin interface. Any model field can be used in a\nconfiguration, and any of the standard django admin utilities (like\npermissions) can be used.\n\n\nInstallation\n============\nInstall from pypi using your favorite method:::\n\n    pip install django-configuration\n\n\nUsage\n=====\n\nIn ``myapp/models.py``:::\n\n    from configuration.models import Configuration\n\n    class MyConfiguration(Configuration):\n        my_var = models.CharField(max_length=255, default='Hello!')\n\n\nThen elsewhere:::\n\n    >>> from myapp.models import MyConfiguration\n    >>> print MyConfiguration.objects.get()\n    Hello!\n\n\nA Configuration instance is not saved to the database until ``save`` is\nexplicitly called or until it is saved in the admin, so it is important to\nspecify default values on your fields.\n\nA custom admin interface can be provided as follows:::\n\n    from configuration.models import Configuration\n    from configuration.admin import ConfigurationAdmin\n    \n    class MyAdmin(ConfigurationAdmin):\n        pass\n    \n    class MyConfiguration(Configuration):\n        my_var = models.CharField(max_length=255, default='Hello!')\n\n        admin_class = MyAdmin\n\nThe admin class must inherit from ``ConfigurationAdmin``. The admin_class\nattribute can also be given as a dotted string:::\n\n    class MyConfiguration(Configuration):\n        my_var = models.CharField(max_length=255, default='Hello!')\n\n        admin_class = 'myapp.admin.MyAdmin'\n\nEfficiency and Caching\n======================\nDjango-Configuration is quick, easy and intuitive, and allows you to follow\ndjango patterns. However it is not the most efficient method of keeping\nconfiguration optinos in the database. The use of django-polymorphic allows for\na great admin interface but makes queries more costly. The library currently\nprovides no caching - although caching apps that cache query results should\nhelp with that.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fah-designs/django-configuration", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-configuration", "package_url": "https://pypi.org/project/django-configuration/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-configuration/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/fah-designs/django-configuration"}, "release_url": "https://pypi.org/project/django-configuration/0.0.3/", "requires_dist": null, "requires_python": null, "summary": "Configuration admin/models for Django.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Some site wide settings belong in the database. This Django-Configure provides\na familiar way to implement this pattern. It uses django-polymorphic, mostly to\nprovide a clean admin interface. Any model field can be used in a\nconfiguration, and any of the standard django admin utilities (like\npermissions) can be used.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from pypi using your favorite method::</p>\n<pre>pip install django-configuration\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In <tt>myapp/models.py</tt>::</p>\n<pre>from configuration.models import Configuration\n\nclass MyConfiguration(Configuration):\n    my_var = models.CharField(max_length=255, default='Hello!')\n</pre>\n<p>Then elsewhere::</p>\n<pre>&gt;&gt;&gt; from myapp.models import MyConfiguration\n&gt;&gt;&gt; print MyConfiguration.objects.get()\nHello!\n</pre>\n<p>A Configuration instance is not saved to the database until <tt>save</tt> is\nexplicitly called or until it is saved in the admin, so it is important to\nspecify default values on your fields.</p>\n<p>A custom admin interface can be provided as follows::</p>\n<pre>from configuration.models import Configuration\nfrom configuration.admin import ConfigurationAdmin\n\nclass MyAdmin(ConfigurationAdmin):\n    pass\n\nclass MyConfiguration(Configuration):\n    my_var = models.CharField(max_length=255, default='Hello!')\n\n    admin_class = MyAdmin\n</pre>\n<p>The admin class must inherit from <tt>ConfigurationAdmin</tt>. The admin_class\nattribute can also be given as a dotted string::</p>\n<pre>class MyConfiguration(Configuration):\n    my_var = models.CharField(max_length=255, default='Hello!')\n\n    admin_class = 'myapp.admin.MyAdmin'\n</pre>\n</div>\n<div id=\"efficiency-and-caching\">\n<h2>Efficiency and Caching</h2>\n<p>Django-Configuration is quick, easy and intuitive, and allows you to follow\ndjango patterns. However it is not the most efficient method of keeping\nconfiguration optinos in the database. The use of django-polymorphic allows for\na great admin interface but makes queries more costly. The library currently\nprovides no caching - although caching apps that cache query results should\nhelp with that.</p>\n</div>\n\n          </div>"}, "last_serial": 1047654, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f698d72fbb917bffba65b59f525f8183", "sha256": "1e74c98bf5934e00cd3bd201ac4ec7baf7f740c90970ac4948c2a2d6d58e1f62"}, "downloads": -1, "filename": "django-configuration-0.0.1.zip", "has_sig": false, "md5_digest": "f698d72fbb917bffba65b59f525f8183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6482, "upload_time": "2014-04-01T10:51:47", "upload_time_iso_8601": "2014-04-01T10:51:47.878761Z", "url": "https://files.pythonhosted.org/packages/f1/3b/8c32046e8c5503df0326eb866b0d40e2bbb378ba1deb8c691328a1b6c12e/django-configuration-0.0.1.zip", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5db700b545bf922a1ce6dd65652853ed", "sha256": "da686ffb0016d23c1ed1f174e6928f9c9e1de6196c6e2de96e3ffed693f45480"}, "downloads": -1, "filename": "django-configuration-0.0.2.zip", "has_sig": false, "md5_digest": "5db700b545bf922a1ce6dd65652853ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8441, "upload_time": "2014-04-01T10:58:07", "upload_time_iso_8601": "2014-04-01T10:58:07.763374Z", "url": "https://files.pythonhosted.org/packages/c9/0c/8533912feda14f27385166e5ea8c0e9284e2a8d877a8375b3cb688b4cca8/django-configuration-0.0.2.zip", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "12d4a13d6b3c6473cab17887e0c6ddef", "sha256": "a410b082a13dc9d67bcff8e39dd2365c747c09a8e400f65ea103e14fa949122d"}, "downloads": -1, "filename": "django-configuration-0.0.3.zip", "has_sig": false, "md5_digest": "12d4a13d6b3c6473cab17887e0c6ddef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8508, "upload_time": "2014-04-01T11:05:07", "upload_time_iso_8601": "2014-04-01T11:05:07.953278Z", "url": "https://files.pythonhosted.org/packages/4b/1b/7536c246848031a9375562c9e3026ae12578a3c38c4462fb24e8d6955827/django-configuration-0.0.3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "12d4a13d6b3c6473cab17887e0c6ddef", "sha256": "a410b082a13dc9d67bcff8e39dd2365c747c09a8e400f65ea103e14fa949122d"}, "downloads": -1, "filename": "django-configuration-0.0.3.zip", "has_sig": false, "md5_digest": "12d4a13d6b3c6473cab17887e0c6ddef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8508, "upload_time": "2014-04-01T11:05:07", "upload_time_iso_8601": "2014-04-01T11:05:07.953278Z", "url": "https://files.pythonhosted.org/packages/4b/1b/7536c246848031a9375562c9e3026ae12578a3c38c4462fb24e8d6955827/django-configuration-0.0.3.zip", "yanked": false}], "timestamp": "Fri May  8 00:36:53 2020"}