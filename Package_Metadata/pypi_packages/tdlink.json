{"info": {"author": "Sriram Yarlagadda", "author_email": "ysriram@umich.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![GitHub license](https://img.shields.io/github/license/Naereen/StrapDown.js.svg)](https://github.com/Naereen/StrapDown.js/blob/master/LICENSE)\n\n\n# tdlink\nPython Library for TDAmeritrade API\n\nAll the dates and times are in UTC.\n\n<h3> Authentication </h3>\n\n**NOTE:** Please make sure you obtain a code or refresh token from TDAmeritrade before using this library.\n\nFollow these steps to get a code:\n\n1) Go to TDAmeritrade developer: https://developer.tdameritrade.com/</br>\n2) Login and go to \"My Apps\" </br>\n3) Create an app. Use http://localhost as the callback url.</br>\n4) Go to this url: https://auth.tdameritrade.com/auth?response_type=code&redirect_uri=http://localhost&client_id=[YourAppName]@AMER.OAUTHAP </br>\n5) Enter your TD credentials and give premission </br>\n6) Once you login, you will be redirected to a url of this form https://localhost/?code=[code] </br>\n7) Copy the [code] part. Add it as a parameter to the TDAmeritrade class. </br>\n8) The TDAmeritrade class should now work!\n\n**NOTE:** The code you obtain is only valid for a limited period of time. If expired, follow steps again to get a new code.\n\n\n\n\n<h3> Installation </h3>\n\n<h4> From PyPI </h4>\n\n```\npip install tdlink\n```\n\n<h4> From Source </h4>\n\n```\npip install --upgrade git+git://github.com/ysriram1/tdlink\n```\n\n<h3> Examples </h3>\n\n<h4> Connect to the API </h4>\n\n```python\nfrom tdlink import TDlink\n\ntd = TDlink(app_key='TRADING123',\n                redirect_uri='http://localhost',\n                code=code, # follow instructions to get the code\n                return_raw_response=False # will return formatted df if False, else returns HTTP response\n                )\n```\n\n<h4> Get the refresh and access tokens </h4>\n\n```python\ntd.refresh_token # returns refresh token\n\ntd.access_token # returns the access token\n```\n\n*Note:* You can save the refresh token for creating a future session instead of using a code.\n\n<h3> Get Data from API </h3>\n\n<h4> Current Quote </h4>\n```python\ntd.get_current_quote(symbol='QQQ',\n          to_return=['askPrice', 'bidPrice', 'totalVolume'])\n```\n<div><img src=\"docs/img/quote.png\" alt=\"quote\" width=\"200\"/></div>\n\n*NOTE:* Use this also for prices of options.\n\n<h4> Historical Data </h4>\n\n```python\ntd.get_historical_prices(symbol='QQQ',\n                    period_type='day', # 'day'\n                    period=2, # day: 1, 2, 3, 4, 5, 10* month: 1*, 2, 3, 6 year: 1*, 2, 3, 5, 10, 15, 20 ytd: 1*\n                    frequency_type='minute', # day: minute* month: daily, weekly* year: daily, weekly, monthly* ytd: daily, weekly*\n                    frequency=5, # minute: 1*, 5, 10, 15, 30 daily: 1* weekly: 1* monthly: 1*\n                    start_date='06/03/2019', # mm/dd/yyyy\n                    start_time=None, # hh:mm:ss\n                    end_date='06/04/2019',\n                    end_time=None,\n                    extended_hours=True,\n                    return_df=True # if False, returns a dictionary instead\n                    )\n```\n\n<div><img src=\"docs/img/historical_data.png\" alt=\"Historical Data\"/></div>\n\n<h4> Options Chain </h4>\n\n```python\ntd.get_options_chain(symbol='QQQ', # symbol of underlying security\n                    strike=None, # mention a specific strike\n                    from_date='01/01/2020', # only expirations after this date (mm/dd/yyyy)\n                    from_time=None,\n                    to_date='01/30/2020', # only expirations before this date\n                    to_time=None,\n                    expiry_month='ALL', # option expiry month ALL or JAN\n                    kind='OTM', # ITM, NTM, OTM, SAK (Strikes Above Market), ALL etc.\n                    include_quotes=False, # if FALSE only returns the option names (use get_current_quote() to get value)\n                    contract_type='CALL', # CALL, PUT\n                    strikes=5, # number of strikes above or below at-the-money price\n                    strategy='SINGLE',\n                    return_df=True # if False, returns a dictionary instead\n                    )\n```\n\n<div><img src=\"docs/img/options.png\" alt=\"Options Chain\"/></div>\n\n\n<h4> Top Movers of an Index </h4>\n\n```python\ntd.get_movers_for_index(symbol = 'DJI', # has to be an index DJI, SPX.X  etc\n                        direction = None, # 'up' or 'down'. if None, returns both\n                        change = None # 'value' or 'percent'. if None, defaults to percentage\n                        )\n```\n\n<div><img src=\"docs/img/movers.png\" alt=\"Top Movers\"/></div>\n\n\n<h3> Support </h3>\n\nPlease email me at ysriram@umich.edu if you have any questions, suggestions, or ideas for improvement. \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ysriram1/tdlink", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tdlink", "package_url": "https://pypi.org/project/tdlink/", "platform": "", "project_url": "https://pypi.org/project/tdlink/", "project_urls": {"Homepage": "https://github.com/ysriram1/tdlink"}, "release_url": "https://pypi.org/project/tdlink/0.3/", "requires_dist": null, "requires_python": "", "summary": "Python Library for TDAmeritrade API", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/Naereen/StrapDown.js/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5430f2fec42899073d5720f6a3dbe4f7297713b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4e61657265656e2f5374726170446f776e2e6a732e737667\"></a></p>\n<h1>tdlink</h1>\n<p>Python Library for TDAmeritrade API</p>\n<p>All the dates and times are in UTC.</p>\n<h3> Authentication </h3>\n<p><strong>NOTE:</strong> Please make sure you obtain a code or refresh token from TDAmeritrade before using this library.</p>\n<p>Follow these steps to get a code:</p>\n<ol>\n<li>Go to TDAmeritrade developer: <a href=\"https://developer.tdameritrade.com/\" rel=\"nofollow\">https://developer.tdameritrade.com/</a><br></li>\n<li>Login and go to \"My Apps\" <br></li>\n<li>Create an app. Use <a href=\"http://localhost\" rel=\"nofollow\">http://localhost</a> as the callback url.<br></li>\n<li>Go to this url: <a href=\"https://auth.tdameritrade.com/auth?response_type=code&amp;redirect_uri=http://localhost&amp;client_id=%5BYourAppName%5D@AMER.OAUTHAP\" rel=\"nofollow\">https://auth.tdameritrade.com/auth?response_type=code&amp;redirect_uri=http://localhost&amp;client_id=[YourAppName]@AMER.OAUTHAP</a> <br></li>\n<li>Enter your TD credentials and give premission <br></li>\n<li>Once you login, you will be redirected to a url of this form <a href=\"https://localhost/?code=%5Bcode%5D\" rel=\"nofollow\">https://localhost/?code=[code]</a> <br></li>\n<li>Copy the [code] part. Add it as a parameter to the TDAmeritrade class. <br></li>\n<li>The TDAmeritrade class should now work!</li>\n</ol>\n<p><strong>NOTE:</strong> The code you obtain is only valid for a limited period of time. If expired, follow steps again to get a new code.</p>\n<h3> Installation </h3>\n<h4> From PyPI </h4>\n<pre><code>pip install tdlink\n</code></pre>\n<h4> From Source </h4>\n<pre><code>pip install --upgrade git+git://github.com/ysriram1/tdlink\n</code></pre>\n<h3> Examples </h3>\n<h4> Connect to the API </h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tdlink</span> <span class=\"kn\">import</span> <span class=\"n\">TDlink</span>\n\n<span class=\"n\">td</span> <span class=\"o\">=</span> <span class=\"n\">TDlink</span><span class=\"p\">(</span><span class=\"n\">app_key</span><span class=\"o\">=</span><span class=\"s1\">'TRADING123'</span><span class=\"p\">,</span>\n                <span class=\"n\">redirect_uri</span><span class=\"o\">=</span><span class=\"s1\">'http://localhost'</span><span class=\"p\">,</span>\n                <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"c1\"># follow instructions to get the code</span>\n                <span class=\"n\">return_raw_response</span><span class=\"o\">=</span><span class=\"kc\">False</span> <span class=\"c1\"># will return formatted df if False, else returns HTTP response</span>\n                <span class=\"p\">)</span>\n</pre>\n<h4> Get the refresh and access tokens </h4>\n<pre><span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">refresh_token</span> <span class=\"c1\"># returns refresh token</span>\n\n<span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">access_token</span> <span class=\"c1\"># returns the access token</span>\n</pre>\n<p><em>Note:</em> You can save the refresh token for creating a future session instead of using a code.</p>\n<h3> Get Data from API </h3>\n<h4> Current Quote </h4>\n```python\ntd.get_current_quote(symbol='QQQ',\n          to_return=['askPrice', 'bidPrice', 'totalVolume'])\n```\n<div><img alt=\"quote\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/198a00f08793d893848b9f25183f749bc568bbf9/646f63732f696d672f71756f74652e706e67\" width=\"200\"></div>\n<p><em>NOTE:</em> Use this also for prices of options.</p>\n<h4> Historical Data </h4>\n<pre><span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">get_historical_prices</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'QQQ'</span><span class=\"p\">,</span>\n                    <span class=\"n\">period_type</span><span class=\"o\">=</span><span class=\"s1\">'day'</span><span class=\"p\">,</span> <span class=\"c1\"># 'day'</span>\n                    <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"c1\"># day: 1, 2, 3, 4, 5, 10* month: 1*, 2, 3, 6 year: 1*, 2, 3, 5, 10, 15, 20 ytd: 1*</span>\n                    <span class=\"n\">frequency_type</span><span class=\"o\">=</span><span class=\"s1\">'minute'</span><span class=\"p\">,</span> <span class=\"c1\"># day: minute* month: daily, weekly* year: daily, weekly, monthly* ytd: daily, weekly*</span>\n                    <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"c1\"># minute: 1*, 5, 10, 15, 30 daily: 1* weekly: 1* monthly: 1*</span>\n                    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"s1\">'06/03/2019'</span><span class=\"p\">,</span> <span class=\"c1\"># mm/dd/yyyy</span>\n                    <span class=\"n\">start_time</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># hh:mm:ss</span>\n                    <span class=\"n\">end_date</span><span class=\"o\">=</span><span class=\"s1\">'06/04/2019'</span><span class=\"p\">,</span>\n                    <span class=\"n\">end_time</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">extended_hours</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">return_df</span><span class=\"o\">=</span><span class=\"kc\">True</span> <span class=\"c1\"># if False, returns a dictionary instead</span>\n                    <span class=\"p\">)</span>\n</pre>\n<div><img alt=\"Historical Data\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d28742d7093c4a84e8e2e7d90b753256b7c2429/646f63732f696d672f686973746f726963616c5f646174612e706e67\"></div>\n<h4> Options Chain </h4>\n<pre><span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">get_options_chain</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'QQQ'</span><span class=\"p\">,</span> <span class=\"c1\"># symbol of underlying security</span>\n                    <span class=\"n\">strike</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># mention a specific strike</span>\n                    <span class=\"n\">from_date</span><span class=\"o\">=</span><span class=\"s1\">'01/01/2020'</span><span class=\"p\">,</span> <span class=\"c1\"># only expirations after this date (mm/dd/yyyy)</span>\n                    <span class=\"n\">from_time</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">to_date</span><span class=\"o\">=</span><span class=\"s1\">'01/30/2020'</span><span class=\"p\">,</span> <span class=\"c1\"># only expirations before this date</span>\n                    <span class=\"n\">to_time</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">expiry_month</span><span class=\"o\">=</span><span class=\"s1\">'ALL'</span><span class=\"p\">,</span> <span class=\"c1\"># option expiry month ALL or JAN</span>\n                    <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'OTM'</span><span class=\"p\">,</span> <span class=\"c1\"># ITM, NTM, OTM, SAK (Strikes Above Market), ALL etc.</span>\n                    <span class=\"n\">include_quotes</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"c1\"># if FALSE only returns the option names (use get_current_quote() to get value)</span>\n                    <span class=\"n\">contract_type</span><span class=\"o\">=</span><span class=\"s1\">'CALL'</span><span class=\"p\">,</span> <span class=\"c1\"># CALL, PUT</span>\n                    <span class=\"n\">strikes</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"c1\"># number of strikes above or below at-the-money price</span>\n                    <span class=\"n\">strategy</span><span class=\"o\">=</span><span class=\"s1\">'SINGLE'</span><span class=\"p\">,</span>\n                    <span class=\"n\">return_df</span><span class=\"o\">=</span><span class=\"kc\">True</span> <span class=\"c1\"># if False, returns a dictionary instead</span>\n                    <span class=\"p\">)</span>\n</pre>\n<div><img alt=\"Options Chain\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf504bb0ed12687e75856eb465f92251a3f432cb/646f63732f696d672f6f7074696f6e732e706e67\"></div>\n<h4> Top Movers of an Index </h4>\n<pre><span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">get_movers_for_index</span><span class=\"p\">(</span><span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s1\">'DJI'</span><span class=\"p\">,</span> <span class=\"c1\"># has to be an index DJI, SPX.X  etc</span>\n                        <span class=\"n\">direction</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># 'up' or 'down'. if None, returns both</span>\n                        <span class=\"n\">change</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"c1\"># 'value' or 'percent'. if None, defaults to percentage</span>\n                        <span class=\"p\">)</span>\n</pre>\n<div><img alt=\"Top Movers\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbe43ca7140f5381108acb17879aa9a8dd2561b5/646f63732f696d672f6d6f766572732e706e67\"></div>\n<h3> Support </h3>\n<p>Please email me at <a href=\"mailto:ysriram@umich.edu\">ysriram@umich.edu</a> if you have any questions, suggestions, or ideas for improvement.</p>\n\n          </div>"}, "last_serial": 5479335, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "55000b1102dbd4ccce2a955ee69a910b", "sha256": "d10a574360ad7d00bb962dc6fe6c8d2b016d470ab67e0aa2adc2e9c76f5f4786"}, "downloads": -1, "filename": "tdlink-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "55000b1102dbd4ccce2a955ee69a910b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8058, "upload_time": "2019-07-03T03:37:55", "upload_time_iso_8601": "2019-07-03T03:37:55.773484Z", "url": "https://files.pythonhosted.org/packages/9b/b6/ff47686b4324457f2c7473528e1bc0383521db797a08b399d82c9995cc6c/tdlink-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7a43d6e0045334275b60261afedc5a7", "sha256": "87489c926799078845559aad312ec0973f21fb25dfea91b11b70a1d3a4bca9e3"}, "downloads": -1, "filename": "tdlink-0.1.tar.gz", "has_sig": false, "md5_digest": "b7a43d6e0045334275b60261afedc5a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6163, "upload_time": "2019-07-03T03:37:57", "upload_time_iso_8601": "2019-07-03T03:37:57.955267Z", "url": "https://files.pythonhosted.org/packages/44/23/bb8a0f189e5c059dbdbbd58326613d355964102f15a4703810581c8333e0/tdlink-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "06cffa7a79d89733ebe5ce724f696053", "sha256": "8580477f18a32fa85706ee64e25eadd4328a591ce3767bf48ebc50c0106a12dc"}, "downloads": -1, "filename": "tdlink-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "06cffa7a79d89733ebe5ce724f696053", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8549, "upload_time": "2019-07-03T03:52:41", "upload_time_iso_8601": "2019-07-03T03:52:41.081032Z", "url": "https://files.pythonhosted.org/packages/67/3f/76217df4128f19eb752eae7ef6e8d90112ffdd4da32af3baa30d29d84ef2/tdlink-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de2ca70c38fabb9626584cc846f645b6", "sha256": "419704d22ea6537af8a967c27950646ae2f046358e9d1152b0c2f2db7e2dcd8a"}, "downloads": -1, "filename": "tdlink-0.2.tar.gz", "has_sig": false, "md5_digest": "de2ca70c38fabb9626584cc846f645b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7153, "upload_time": "2019-07-03T03:52:42", "upload_time_iso_8601": "2019-07-03T03:52:42.488821Z", "url": "https://files.pythonhosted.org/packages/c7/18/a0561977926ab955cce6e37d41e0c9baefee8e19bc83973ceb246fe29856/tdlink-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "6acc5ba4ce79c184765324b3b6a5f289", "sha256": "578ae986f6f77ff6fad4858cd1463d050b3d0fdd3dc45f1b6fb2d885cc3e8a3c"}, "downloads": -1, "filename": "tdlink-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6acc5ba4ce79c184765324b3b6a5f289", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8554, "upload_time": "2019-07-03T03:58:17", "upload_time_iso_8601": "2019-07-03T03:58:17.119001Z", "url": "https://files.pythonhosted.org/packages/56/b3/5ef3e3cba8c8522af18cd0e47f43a33ea52bfa1f5d7cffa2e2658f9ceaa9/tdlink-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b52d13edab2ee6472bb532a6f2b3d543", "sha256": "588bd0194ec3139710deff6c802ed03d1ac9878ec3f7fc539eac34c2f5ea517a"}, "downloads": -1, "filename": "tdlink-0.3.tar.gz", "has_sig": false, "md5_digest": "b52d13edab2ee6472bb532a6f2b3d543", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7154, "upload_time": "2019-07-03T03:58:18", "upload_time_iso_8601": "2019-07-03T03:58:18.593286Z", "url": "https://files.pythonhosted.org/packages/ca/2b/c7734cce9a255334a62663f2586e54aefb6f649102c90ea7ab87cad31337/tdlink-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6acc5ba4ce79c184765324b3b6a5f289", "sha256": "578ae986f6f77ff6fad4858cd1463d050b3d0fdd3dc45f1b6fb2d885cc3e8a3c"}, "downloads": -1, "filename": "tdlink-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6acc5ba4ce79c184765324b3b6a5f289", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8554, "upload_time": "2019-07-03T03:58:17", "upload_time_iso_8601": "2019-07-03T03:58:17.119001Z", "url": "https://files.pythonhosted.org/packages/56/b3/5ef3e3cba8c8522af18cd0e47f43a33ea52bfa1f5d7cffa2e2658f9ceaa9/tdlink-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b52d13edab2ee6472bb532a6f2b3d543", "sha256": "588bd0194ec3139710deff6c802ed03d1ac9878ec3f7fc539eac34c2f5ea517a"}, "downloads": -1, "filename": "tdlink-0.3.tar.gz", "has_sig": false, "md5_digest": "b52d13edab2ee6472bb532a6f2b3d543", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7154, "upload_time": "2019-07-03T03:58:18", "upload_time_iso_8601": "2019-07-03T03:58:18.593286Z", "url": "https://files.pythonhosted.org/packages/ca/2b/c7734cce9a255334a62663f2586e54aefb6f649102c90ea7ab87cad31337/tdlink-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:11 2020"}