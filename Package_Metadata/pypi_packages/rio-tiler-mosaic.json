{"info": {"author": "Vincent Sarago", "author_email": "vincent@developmentseed.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: GIS"], "description": "# rio-tiler-mosaic\n\n[![Packaging status](https://badge.fury.io/py/rio-tiler-mosaic.svg)](https://badge.fury.io/py/rio-tiler-mosaic)\n[![CircleCI](https://circleci.com/gh/cogeotiff/rio-tiler-mosaic.svg?style=svg)](https://circleci.com/gh/cogeotiff/rio-tiler-mosaic)\n[![codecov](https://codecov.io/gh/cogeotiff/rio-tiler-mosaic/branch/master/graph/badge.svg)](https://codecov.io/gh/cogeotiff/rio-tiler-mosaic)\n\nA rio-tiler plugin for creating tiles from multiple observations.\n\n![](https://user-images.githubusercontent.com/10407788/57466726-304f5880-724f-11e9-9969-bec4ce940e07.png)\n\n\n## Install\n\n```bash\n$ pip install rio-tiler-mosaic\n```\nOr \n```bash\n$ git clone http://github.com/cogeotiff/rio-tiler-mosaic\n$ cd rio-tiler-mosaic\n$ pip install -e .\n```\n\n## Rio-tiler + Mosaic\n\n![](https://user-images.githubusercontent.com/10407788/57467798-30505800-7251-11e9-9bde-6f50801dc851.png)\n\nThe goal of this rio-tiler plugin is to create tiles from multiple observations. \n\nBecause user might want to choose which pixel goes on top of the tile, this plugin comes with 5 differents `pixel selection` algorithms:\n- **First**: takes the first pixel received\n- **Highest**: loop though all the assets and return the highest value \n- **Lowest**: loop though all the assets and return the lowest value\n- **Mean**: compute the mean value of the whole stack\n- **Median**: compute the median value of the whole stack\n\n### API\n\n`mosaic_tiler(assets, tile_x, tile_y, tile_z, tiler, pixel_selection=None, chunk_size=5, kwargs)`\n\nInputs:\n- assets : list, tuple of rio-tiler compatible assets (url or sceneid)\n- tile_x : Mercator tile X index. \n- tile_y : Mercator tile Y index. \n- tile_z : Mercator tile ZOOM level. \n- tiler: Rio-tiler's tiler function (e.g rio_tiler.landsat8.tile) \n- pixel_selection : optional **pixel selection** algorithm (default: \"first\"). \n- chunk_size: optional, control the number of asset to process per loop.\n- kwargs: Rio-tiler tiler module specific otions.\n\nReturns:\n- tile, mask : tuple of ndarray Return tile and mask data.\n\n#### Examples\n\n```python\nfrom rio_tiler.main import tile as cogTiler\nfrom rio_tiler_mosaic.mosaic import mosaic_tiler\nfrom rio_tiler_mosaic.methods import defaults\n\nassets = [\"mytif1.tif\", \"mytif2.tif\", \"mytif3.tif\"]\ntile = (1000, 1000, 9)\nx, y, z = tile\n\n# Use Default First value method\nmosaic_tiler(assets, x, y, z, cogTiler)\n\n# Use Highest value: defaults.HighestMethod()\nmosaic_tiler(\n    assets,\n    x,\n    y,\n    z,\n    cogTiler,\n    pixel_selection=defaults.HighestMethod()\n)\n\n# Use Lowest value: defaults.LowestMethod()\nmosaic_tiler(\n    assets,\n    x,\n    y,\n    z,\n    cogTiler,\n    pixel_selection=defaults.LowestMethod()\n)\n```\n\n### The `MosaicMethod` interface\n\nthe `rio-tiler-mosaic.methods.base.MosaicMethodBase` class defines an abstract \ninterface for all `pixel selection` methods allowed by `rio-tiler-mosaic`. its methods and properties are:\n\n- `is_done`: property, returns a boolean indicating if the process is done filling the tile\n- `data`: property, returns the output **tile** and **mask** numpy arrays\n- `feed(tile: numpy.ma.ndarray)`: method, update the tile\n\nThe MosaicMethodBase class is not intended to be used directly but as an abstract base class, a template for concrete implementations.\n\n#### Writing your own Pixel Selection method\n\nThe rules for writing your own `pixel selection algorithm` class are as follows:\n\n- Must inherit from MosaicMethodBase\n- Must provide concrete implementations of all the above methods.\n\nSee [rio_tiler_mosaic.methods.defaults](/rio_tiler_mosaic/defaults.py) classes for examples.\n\n#### Smart Multi-Threading \n\nWhen dealing with an important number of image, you might not want to process the whole stack, especially if the pixel selection method stops when the tile is filled. To allow better optimization, `rio-tiler-mosaic` is fetching the tiles in parallel (threads) but to limit the number of files we also embeded the fetching in a loop (creating 2 level of processing): \n\n```python\nassets = [\"1.tif\", \"2.tif\", \"3.tif\", \"4.tif\", \"5.tif\", \"6.tif\"]\n\n# 1st level loop - Creates chuncks of assets\nfor chunks in _chunks(assets, chunk_size):\n    # 2nd level loop - Uses threads for process each `chunck`\n    with futures.ThreadPoolExecutor(max_workers=max_threads) as executor:\n        future_tasks = [executor.submit(_tiler, asset) for asset in chunks]\n```\n\nBy default the chunck_size is equal to max_threads ([default](https://github.com/cogeotiff/rio-tiler-mosaic/blob/4a4d188a9b0fefbf244af3cf52cf2695db7e0cf1/rio_tiler_mosaic/mosaic.py#L77))\n\n## Example\n\nSee [/example](/example)\n\n## Contribution & Development\n\nIssues and pull requests are more than welcome.\n\n**dev install**\n\n```bash\n$ git clone https://github.com/cogeotiff/rio-tiler-mosaic.git\n$ cd rio-tiler-mosaic\n$ pip install -e .[dev]\n```\n\n**Python3.6 only**\n\nThis repo is set to use `pre-commit` to run *flake8*, *pydocstring* and *black* (\"uncompromising Python code formatter\") when commiting new code.\n\n```bash\n$ pre-commit install\n```\n\n\n## Implementation\n[cogeo-mosaic](http://github.com/developmentseed/cogeo-mosaic.git)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cogeotiff/rio-tiler-mosaic", "keywords": "COG Mosaic GIS", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rio-tiler-mosaic", "package_url": "https://pypi.org/project/rio-tiler-mosaic/", "platform": "", "project_url": "https://pypi.org/project/rio-tiler-mosaic/", "project_urls": {"Homepage": "https://github.com/cogeotiff/rio-tiler-mosaic"}, "release_url": "https://pypi.org/project/rio-tiler-mosaic/0.0.1.dev4/", "requires_dist": null, "requires_python": "", "summary": "A rio-tiler plugin to create mosaic tiles.", "version": "0.0.1.dev4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>rio-tiler-mosaic</h1>\n<p><a href=\"https://badge.fury.io/py/rio-tiler-mosaic\" rel=\"nofollow\"><img alt=\"Packaging status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b29011909dac3c8b8ee0eff1652b6edb129934a7/68747470733a2f2f62616467652e667572792e696f2f70792f72696f2d74696c65722d6d6f736169632e737667\"></a>\n<a href=\"https://circleci.com/gh/cogeotiff/rio-tiler-mosaic\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb43501c287ff599424f99e1d69ff4a6761d76e1/68747470733a2f2f636972636c6563692e636f6d2f67682f636f67656f746966662f72696f2d74696c65722d6d6f736169632e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/cogeotiff/rio-tiler-mosaic\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed20456221e6940fe959228a07f69f0535b8776d/68747470733a2f2f636f6465636f762e696f2f67682f636f67656f746966662f72696f2d74696c65722d6d6f736169632f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>A rio-tiler plugin for creating tiles from multiple observations.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/417bf5c6e7f14b4b6569b405d56e0d873d53e4cb/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31303430373738382f35373436363732362d33303466353838302d373234662d313165392d393936392d6265633463653934306530372e706e67\"></p>\n<h2>Install</h2>\n<pre>$ pip install rio-tiler-mosaic\n</pre>\n<p>Or</p>\n<pre>$ git clone http://github.com/cogeotiff/rio-tiler-mosaic\n$ <span class=\"nb\">cd</span> rio-tiler-mosaic\n$ pip install -e .\n</pre>\n<h2>Rio-tiler + Mosaic</h2>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/de95bc747d112046508e7c0abf949a33e91b50c3/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31303430373738382f35373436373739382d33303530353830302d373235312d313165392d396264652d3666353038303164633835312e706e67\"></p>\n<p>The goal of this rio-tiler plugin is to create tiles from multiple observations.</p>\n<p>Because user might want to choose which pixel goes on top of the tile, this plugin comes with 5 differents <code>pixel selection</code> algorithms:</p>\n<ul>\n<li><strong>First</strong>: takes the first pixel received</li>\n<li><strong>Highest</strong>: loop though all the assets and return the highest value</li>\n<li><strong>Lowest</strong>: loop though all the assets and return the lowest value</li>\n<li><strong>Mean</strong>: compute the mean value of the whole stack</li>\n<li><strong>Median</strong>: compute the median value of the whole stack</li>\n</ul>\n<h3>API</h3>\n<p><code>mosaic_tiler(assets, tile_x, tile_y, tile_z, tiler, pixel_selection=None, chunk_size=5, kwargs)</code></p>\n<p>Inputs:</p>\n<ul>\n<li>assets : list, tuple of rio-tiler compatible assets (url or sceneid)</li>\n<li>tile_x : Mercator tile X index.</li>\n<li>tile_y : Mercator tile Y index.</li>\n<li>tile_z : Mercator tile ZOOM level.</li>\n<li>tiler: Rio-tiler's tiler function (e.g rio_tiler.landsat8.tile)</li>\n<li>pixel_selection : optional <strong>pixel selection</strong> algorithm (default: \"first\").</li>\n<li>chunk_size: optional, control the number of asset to process per loop.</li>\n<li>kwargs: Rio-tiler tiler module specific otions.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>tile, mask : tuple of ndarray Return tile and mask data.</li>\n</ul>\n<h4>Examples</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rio_tiler.main</span> <span class=\"kn\">import</span> <span class=\"n\">tile</span> <span class=\"k\">as</span> <span class=\"n\">cogTiler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rio_tiler_mosaic.mosaic</span> <span class=\"kn\">import</span> <span class=\"n\">mosaic_tiler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rio_tiler_mosaic.methods</span> <span class=\"kn\">import</span> <span class=\"n\">defaults</span>\n\n<span class=\"n\">assets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"mytif1.tif\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mytif2.tif\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mytif3.tif\"</span><span class=\"p\">]</span>\n<span class=\"n\">tile</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">tile</span>\n\n<span class=\"c1\"># Use Default First value method</span>\n<span class=\"n\">mosaic_tiler</span><span class=\"p\">(</span><span class=\"n\">assets</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">cogTiler</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Use Highest value: defaults.HighestMethod()</span>\n<span class=\"n\">mosaic_tiler</span><span class=\"p\">(</span>\n    <span class=\"n\">assets</span><span class=\"p\">,</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span>\n    <span class=\"n\">y</span><span class=\"p\">,</span>\n    <span class=\"n\">z</span><span class=\"p\">,</span>\n    <span class=\"n\">cogTiler</span><span class=\"p\">,</span>\n    <span class=\"n\">pixel_selection</span><span class=\"o\">=</span><span class=\"n\">defaults</span><span class=\"o\">.</span><span class=\"n\">HighestMethod</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Use Lowest value: defaults.LowestMethod()</span>\n<span class=\"n\">mosaic_tiler</span><span class=\"p\">(</span>\n    <span class=\"n\">assets</span><span class=\"p\">,</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span>\n    <span class=\"n\">y</span><span class=\"p\">,</span>\n    <span class=\"n\">z</span><span class=\"p\">,</span>\n    <span class=\"n\">cogTiler</span><span class=\"p\">,</span>\n    <span class=\"n\">pixel_selection</span><span class=\"o\">=</span><span class=\"n\">defaults</span><span class=\"o\">.</span><span class=\"n\">LowestMethod</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>The <code>MosaicMethod</code> interface</h3>\n<p>the <code>rio-tiler-mosaic.methods.base.MosaicMethodBase</code> class defines an abstract\ninterface for all <code>pixel selection</code> methods allowed by <code>rio-tiler-mosaic</code>. its methods and properties are:</p>\n<ul>\n<li><code>is_done</code>: property, returns a boolean indicating if the process is done filling the tile</li>\n<li><code>data</code>: property, returns the output <strong>tile</strong> and <strong>mask</strong> numpy arrays</li>\n<li><code>feed(tile: numpy.ma.ndarray)</code>: method, update the tile</li>\n</ul>\n<p>The MosaicMethodBase class is not intended to be used directly but as an abstract base class, a template for concrete implementations.</p>\n<h4>Writing your own Pixel Selection method</h4>\n<p>The rules for writing your own <code>pixel selection algorithm</code> class are as follows:</p>\n<ul>\n<li>Must inherit from MosaicMethodBase</li>\n<li>Must provide concrete implementations of all the above methods.</li>\n</ul>\n<p>See <a href=\"/rio_tiler_mosaic/defaults.py\" rel=\"nofollow\">rio_tiler_mosaic.methods.defaults</a> classes for examples.</p>\n<h4>Smart Multi-Threading</h4>\n<p>When dealing with an important number of image, you might not want to process the whole stack, especially if the pixel selection method stops when the tile is filled. To allow better optimization, <code>rio-tiler-mosaic</code> is fetching the tiles in parallel (threads) but to limit the number of files we also embeded the fetching in a loop (creating 2 level of processing):</p>\n<pre><span class=\"n\">assets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"1.tif\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2.tif\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3.tif\"</span><span class=\"p\">,</span> <span class=\"s2\">\"4.tif\"</span><span class=\"p\">,</span> <span class=\"s2\">\"5.tif\"</span><span class=\"p\">,</span> <span class=\"s2\">\"6.tif\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># 1st level loop - Creates chuncks of assets</span>\n<span class=\"k\">for</span> <span class=\"n\">chunks</span> <span class=\"ow\">in</span> <span class=\"n\">_chunks</span><span class=\"p\">(</span><span class=\"n\">assets</span><span class=\"p\">,</span> <span class=\"n\">chunk_size</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 2nd level loop - Uses threads for process each `chunck`</span>\n    <span class=\"k\">with</span> <span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"n\">max_threads</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n        <span class=\"n\">future_tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">_tiler</span><span class=\"p\">,</span> <span class=\"n\">asset</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">asset</span> <span class=\"ow\">in</span> <span class=\"n\">chunks</span><span class=\"p\">]</span>\n</pre>\n<p>By default the chunck_size is equal to max_threads (<a href=\"https://github.com/cogeotiff/rio-tiler-mosaic/blob/4a4d188a9b0fefbf244af3cf52cf2695db7e0cf1/rio_tiler_mosaic/mosaic.py#L77\" rel=\"nofollow\">default</a>)</p>\n<h2>Example</h2>\n<p>See <a href=\"/example\" rel=\"nofollow\">/example</a></p>\n<h2>Contribution &amp; Development</h2>\n<p>Issues and pull requests are more than welcome.</p>\n<p><strong>dev install</strong></p>\n<pre>$ git clone https://github.com/cogeotiff/rio-tiler-mosaic.git\n$ <span class=\"nb\">cd</span> rio-tiler-mosaic\n$ pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p><strong>Python3.6 only</strong></p>\n<p>This repo is set to use <code>pre-commit</code> to run <em>flake8</em>, <em>pydocstring</em> and <em>black</em> (\"uncompromising Python code formatter\") when commiting new code.</p>\n<pre>$ pre-commit install\n</pre>\n<h2>Implementation</h2>\n<p><a href=\"http://github.com/developmentseed/cogeo-mosaic.git\" rel=\"nofollow\">cogeo-mosaic</a></p>\n\n          </div>"}, "last_serial": 7079163, "releases": {"0.0.1.dev0": [{"comment_text": "", "digests": {"md5": "4e9c47af8566573d54e26376deb9e2d7", "sha256": "e379ca0060434c40bbf4ac61023034063500c9acafc1f87d7ce68d5274613007"}, "downloads": -1, "filename": "rio-tiler-mosaic-0.0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "4e9c47af8566573d54e26376deb9e2d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3229, "upload_time": "2019-05-23T19:14:16", "upload_time_iso_8601": "2019-05-23T19:14:16.758044Z", "url": "https://files.pythonhosted.org/packages/0b/4a/f9bb73e216293f901cb3cad57cec91b1b240a5f70cd019dd3fb88b62a796/rio-tiler-mosaic-0.0.1.dev0.tar.gz", "yanked": false}], "0.0.1.dev1": [{"comment_text": "", "digests": {"md5": "5c372f336213496d6f26636eb4f88882", "sha256": "3be60b9152cfd2e7d9ed92e4e12a67d8f4c38826adb3f1df121ee10aa346a85e"}, "downloads": -1, "filename": "rio-tiler-mosaic-0.0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "5c372f336213496d6f26636eb4f88882", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4991, "upload_time": "2019-07-18T18:25:38", "upload_time_iso_8601": "2019-07-18T18:25:38.015974Z", "url": "https://files.pythonhosted.org/packages/87/7f/fe37b4c745e48ce71bb86397480c71579068e70bbccf3300b02c01ccc6dd/rio-tiler-mosaic-0.0.1.dev1.tar.gz", "yanked": false}], "0.0.1.dev2": [{"comment_text": "", "digests": {"md5": "f32efc90e1f92313c6f6ce7411be2457", "sha256": "825bab3fe41bfd0e3832f91a329348dec20898c7477b020cd3ee611b94624034"}, "downloads": -1, "filename": "rio-tiler-mosaic-0.0.1.dev2.tar.gz", "has_sig": false, "md5_digest": "f32efc90e1f92313c6f6ce7411be2457", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5052, "upload_time": "2019-07-19T01:57:57", "upload_time_iso_8601": "2019-07-19T01:57:57.913524Z", "url": "https://files.pythonhosted.org/packages/fb/73/7c4f15e748a55c470b3d98c9b93d7544e4bea956707874fc0252c61d2556/rio-tiler-mosaic-0.0.1.dev2.tar.gz", "yanked": false}], "0.0.1.dev3": [{"comment_text": "", "digests": {"md5": "b259714c1a1cc381d1e6e52f423dbd52", "sha256": "f09644e85960b321319a0efc02f2f7928179e6230dcc8d725ced5938d60509f1"}, "downloads": -1, "filename": "rio-tiler-mosaic-0.0.1.dev3.tar.gz", "has_sig": false, "md5_digest": "b259714c1a1cc381d1e6e52f423dbd52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5636, "upload_time": "2019-07-26T02:47:28", "upload_time_iso_8601": "2019-07-26T02:47:28.631660Z", "url": "https://files.pythonhosted.org/packages/09/16/d440c8cbbe5f3b4e1ff3a5e770a0b4d19876e03e9760d54931b9094b215c/rio-tiler-mosaic-0.0.1.dev3.tar.gz", "yanked": false}], "0.0.1.dev4": [{"comment_text": "", "digests": {"md5": "73edb6e86841a58b5d95ac2fd9fea0da", "sha256": "60b0fcfa818445fcb9a811d6690b824c4f9d7d504e4dc300dafa76b663de4f81"}, "downloads": -1, "filename": "rio-tiler-mosaic-0.0.1.dev4.tar.gz", "has_sig": false, "md5_digest": "73edb6e86841a58b5d95ac2fd9fea0da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5635, "upload_time": "2020-04-22T19:56:27", "upload_time_iso_8601": "2020-04-22T19:56:27.963640Z", "url": "https://files.pythonhosted.org/packages/ee/f0/1d40882e0611c23165b4ca53dda16577d137eeeaaa38b1590ca8ac469392/rio-tiler-mosaic-0.0.1.dev4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73edb6e86841a58b5d95ac2fd9fea0da", "sha256": "60b0fcfa818445fcb9a811d6690b824c4f9d7d504e4dc300dafa76b663de4f81"}, "downloads": -1, "filename": "rio-tiler-mosaic-0.0.1.dev4.tar.gz", "has_sig": false, "md5_digest": "73edb6e86841a58b5d95ac2fd9fea0da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5635, "upload_time": "2020-04-22T19:56:27", "upload_time_iso_8601": "2020-04-22T19:56:27.963640Z", "url": "https://files.pythonhosted.org/packages/ee/f0/1d40882e0611c23165b4ca53dda16577d137eeeaaa38b1590ca8ac469392/rio-tiler-mosaic-0.0.1.dev4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:31 2020"}