{"info": {"author": "Kristian Klemon", "author_email": "kristian.klemon@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Keras \u2764\ufe0f torchtext\n=================\n\n> Keras is love  \nKeras is life  \nKeras loves torchtext\n\n[torchtext](https://github.com/pytorch/text) is a great library, putting a layer of abstraction over the usually very heavy data component in NLP projects, making the work with complex datasets a pace.\nSadly, as torchtext is based and built on PyTorch, using it with Keras is not directly possible.\n\n_Keras \u2764\ufe0f torchtext_ is to the rescue by providing lightweight wrappers for some Torchtext classes, making them easily work with Keras.\n\nInstallation\n------------\n```bash\npip install keras-loves-torchtext\n```\n\nExamples\n--------\nWrap a `torchtext.data.Iterator` with `WrapIterator` and use it to train a Keras model:\n```python\nfrom torchtext.data import Dataset, Field, Iterator\nfrom kltt import WrapIterator\n\n...\n\nfields  = [('text', Field()),\n           ('label', Field(sequential=False))]\ndataset = Dataset(examples, fields)\niterator = Iterator(dataset, batch_size=32)\n\n# Keras \u2764\ufe0f torchtext comes to play\ndata_gen = WrapIterator(iterator, x_fields=['text'], y_fields=['label'])\n\nmodel.fit_generator(iter(data_gen), steps_per_epoch=len(data_gen))\n```\n\n\nEasily wrap multiple iterators at once:\n```python\nfrom torchtext.data import Dataset, Field, Iterator\nfrom kltt import WrapIterator\n\n...\n\nfields  = [('text', Field()),\n           ('label', Field(sequential=False))]\ndataset = Dataset(examples, fields)\nsplits = dataset.split()\n\niterators = Iterator.splits(splits, batch_size=32)\ntrain, valid, test = WrapIterator.wraps(iterators, x_fields=['text'], y_fields=['label'])\nmodel.fit_generator(iter(train), steps_per_epoch=len(train),\n                    validation_data=iter(valid), validation_steps=len(valid))\nloss, acc = model.evaluate_generator(iter(test), steps=len(test))\n```\n\nFurther and full working examples can be found in the `examples` folder. \n\nDocumentation\n-------------\nTodo\n\nSee `examples` and inline documentation for now.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kklemon/keras-loves-torchtext", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "keras-loves-torchtext", "package_url": "https://pypi.org/project/keras-loves-torchtext/", "platform": "", "project_url": "https://pypi.org/project/keras-loves-torchtext/", "project_urls": {"Homepage": "https://github.com/kklemon/keras-loves-torchtext"}, "release_url": "https://pypi.org/project/keras-loves-torchtext/0.0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Make torchtext work with Keras", "version": "0.0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Keras \u2764\ufe0f torchtext</h1>\n<blockquote>\n<p>Keras is love<br>\nKeras is life<br>\nKeras loves torchtext</p>\n</blockquote>\n<p><a href=\"https://github.com/pytorch/text\" rel=\"nofollow\">torchtext</a> is a great library, putting a layer of abstraction over the usually very heavy data component in NLP projects, making the work with complex datasets a pace.\nSadly, as torchtext is based and built on PyTorch, using it with Keras is not directly possible.</p>\n<p><em>Keras \u2764\ufe0f torchtext</em> is to the rescue by providing lightweight wrappers for some Torchtext classes, making them easily work with Keras.</p>\n<h2>Installation</h2>\n<pre>pip install keras-loves-torchtext\n</pre>\n<h2>Examples</h2>\n<p>Wrap a <code>torchtext.data.Iterator</code> with <code>WrapIterator</code> and use it to train a Keras model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">torchtext.data</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">Iterator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kltt</span> <span class=\"kn\">import</span> <span class=\"n\">WrapIterator</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">fields</span>  <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'text'</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">()),</span>\n           <span class=\"p\">(</span><span class=\"s1\">'label'</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">sequential</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))]</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">examples</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"p\">)</span>\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">Iterator</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Keras \u2764\ufe0f torchtext comes to play</span>\n<span class=\"n\">data_gen</span> <span class=\"o\">=</span> <span class=\"n\">WrapIterator</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">,</span> <span class=\"n\">x_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">],</span> <span class=\"n\">y_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">])</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_generator</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">data_gen</span><span class=\"p\">),</span> <span class=\"n\">steps_per_epoch</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data_gen</span><span class=\"p\">))</span>\n</pre>\n<p>Easily wrap multiple iterators at once:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">torchtext.data</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">Iterator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kltt</span> <span class=\"kn\">import</span> <span class=\"n\">WrapIterator</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">fields</span>  <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'text'</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">()),</span>\n           <span class=\"p\">(</span><span class=\"s1\">'label'</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">sequential</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))]</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">examples</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"p\">)</span>\n<span class=\"n\">splits</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\n<span class=\"n\">iterators</span> <span class=\"o\">=</span> <span class=\"n\">Iterator</span><span class=\"o\">.</span><span class=\"n\">splits</span><span class=\"p\">(</span><span class=\"n\">splits</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"n\">valid</span><span class=\"p\">,</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">WrapIterator</span><span class=\"o\">.</span><span class=\"n\">wraps</span><span class=\"p\">(</span><span class=\"n\">iterators</span><span class=\"p\">,</span> <span class=\"n\">x_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">],</span> <span class=\"n\">y_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">])</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_generator</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">),</span> <span class=\"n\">steps_per_epoch</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">),</span>\n                    <span class=\"n\">validation_data</span><span class=\"o\">=</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"p\">),</span> <span class=\"n\">validation_steps</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"p\">))</span>\n<span class=\"n\">loss</span><span class=\"p\">,</span> <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">evaluate_generator</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">),</span> <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">))</span>\n</pre>\n<p>Further and full working examples can be found in the <code>examples</code> folder.</p>\n<h2>Documentation</h2>\n<p>Todo</p>\n<p>See <code>examples</code> and inline documentation for now.</p>\n\n          </div>"}, "last_serial": 4323429, "releases": {"0.0.1": [], "0.0.1.1": [{"comment_text": "", "digests": {"md5": "bb7ae80953e946e7917f3bf5e4fe4a25", "sha256": "d34d9308e7dac577330daf8add3e590e86f8267e81bc6e7989f0ba3393541d2e"}, "downloads": -1, "filename": "keras_loves_torchtext-0.0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bb7ae80953e946e7917f3bf5e4fe4a25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3474, "upload_time": "2018-09-29T19:51:54", "upload_time_iso_8601": "2018-09-29T19:51:54.842039Z", "url": "https://files.pythonhosted.org/packages/2b/53/3869583538fa61e1a559a627c0ee5c2ba41c1a88e3b7d076dfc73f48957d/keras_loves_torchtext-0.0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53012fce88ae08d1bdb4666e89b14934", "sha256": "4ae04689f30ea2b3ae5250fac604ab143f19f513ffaa4683dc30009ace68063d"}, "downloads": -1, "filename": "keras-loves-torchtext-0.0.1.1.tar.gz", "has_sig": false, "md5_digest": "53012fce88ae08d1bdb4666e89b14934", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3643, "upload_time": "2018-09-29T19:51:56", "upload_time_iso_8601": "2018-09-29T19:51:56.310500Z", "url": "https://files.pythonhosted.org/packages/40/6c/2c95a107df8e3afd0a247212a838fdfbaf780d387ebdcb4d19b600a70faf/keras-loves-torchtext-0.0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb7ae80953e946e7917f3bf5e4fe4a25", "sha256": "d34d9308e7dac577330daf8add3e590e86f8267e81bc6e7989f0ba3393541d2e"}, "downloads": -1, "filename": "keras_loves_torchtext-0.0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bb7ae80953e946e7917f3bf5e4fe4a25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3474, "upload_time": "2018-09-29T19:51:54", "upload_time_iso_8601": "2018-09-29T19:51:54.842039Z", "url": "https://files.pythonhosted.org/packages/2b/53/3869583538fa61e1a559a627c0ee5c2ba41c1a88e3b7d076dfc73f48957d/keras_loves_torchtext-0.0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53012fce88ae08d1bdb4666e89b14934", "sha256": "4ae04689f30ea2b3ae5250fac604ab143f19f513ffaa4683dc30009ace68063d"}, "downloads": -1, "filename": "keras-loves-torchtext-0.0.1.1.tar.gz", "has_sig": false, "md5_digest": "53012fce88ae08d1bdb4666e89b14934", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3643, "upload_time": "2018-09-29T19:51:56", "upload_time_iso_8601": "2018-09-29T19:51:56.310500Z", "url": "https://files.pythonhosted.org/packages/40/6c/2c95a107df8e3afd0a247212a838fdfbaf780d387ebdcb4d19b600a70faf/keras-loves-torchtext-0.0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:11 2020"}