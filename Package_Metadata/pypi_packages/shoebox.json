{"info": {"author": "Dark Secret Software Inc.", "author_email": "admin@darksecretsoftware.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "shoebox\n=======\n\nbinary data archiving library - supports uploading to object storage\n\nJson payloads and string:string metadata dicts are stored in local-disk\nbinary files. The binary file format is versioned and tagged to allow\nfor easy extension. \n\nThere are ArchiveReaders and ArchiveWriters which are managed\nby the RollManager. \"Roll\" comes from \"roll over\". It controls when \nroll-over occurs from one Archive to the next. There is only one \nArchiver active at a time per RollManager. \n\nThe RollManager opens and closes Archivers as\nneeded. \"As needed\" is determined by which RollChecker that was\npassed into the RollManager. Archive files can roll over based\non file size or elapsed time (for writing). For reading, archive\nfiles are only rolled over when the EOF is reached.\n\nRoll Managers also take care of filename creation, compression\nof completed archives and transfer of archive files to remote\nstorage locations.\n\nThe RollCheckers have a reference to the current Archive so\nthey can ask file-related questions (like \"how big are you?\")\n\nYou can register callbacks with the RollManager for notifications\non when new Archive files are opened or closed.\n\nImportant Note! The Callback handlers and the RollCheckers take\nkwargs in the constructor since they can be dynamically loaded as\nplugins. So, make sure you provide named parameters to the constructors. \n\nUsage:\n\n    # Make a roll checker of whatever strategy you choose.\n    checker = roll_checker.SizeRollChecker(roll_size_mb=100)  # 100mb files\n\n    # Make a roll manager for reading or writing. \n    # Give the filename template and the checker. \n    # (and an optional working directory for new files)\n\n    # The %c in the template is per the python strptime method: \n    # https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior \n\n    x = roll_manager.WritingRollManager(\"test_%c.events\", checker)\n\n    # Write some metadata and payload ...\n    #\n    # WritingRollManager.write(metadata, payload) where\n    # metadata = string:string dict\n    # payload = string of data. Most likely a json structure.\n\n    # If the archive file grows beyond 100mb the old one\n    # will automatically close and a new one created.\n    for index in range(10):\n        x.write({\"index\": str(index)}, \"payload_%d\" % index)\n\n    x.close()\n\nFor Reading:\n\n    # Read from all the event data files using wildcards ...\n    manager = roll_manager.ReadingRollManager(\"test_*.events\")\n\n    # This will keep reading across all files in the archive\n    # until we reach the end.\n    while True:\n        try:\n            metadata, json_payload = manager.read()\n        except roll_manager.NoMoreFiles:\n            break\n\nLook at `test/integration/test_rolling.py` for a more complete example.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stackforge/stacktach-shoebox", "keywords": "json\narchive\nswift\nopenstack", "license": "Apache-2", "maintainer": null, "maintainer_email": null, "name": "shoebox", "package_url": "https://pypi.org/project/shoebox/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/shoebox/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/stackforge/stacktach-shoebox"}, "release_url": "https://pypi.org/project/shoebox/0.7.dev52/", "requires_dist": null, "requires_python": null, "summary": "data archiving library", "version": "0.7.dev52", "yanked": false, "html_description": "<div class=\"project-description\">\n            shoebox<br>=======<br><br>binary data archiving library - supports uploading to object storage<br><br>Json payloads and string:string metadata dicts are stored in local-disk<br>binary files. The binary file format is versioned and tagged to allow<br>for easy extension. <br><br>There are ArchiveReaders and ArchiveWriters which are managed<br>by the RollManager. \"Roll\" comes from \"roll over\". It controls when <br>roll-over occurs from one Archive to the next. There is only one <br>Archiver active at a time per RollManager. <br><br>The RollManager opens and closes Archivers as<br>needed. \"As needed\" is determined by which RollChecker that was<br>passed into the RollManager. Archive files can roll over based<br>on file size or elapsed time (for writing). For reading, archive<br>files are only rolled over when the EOF is reached.<br><br>Roll Managers also take care of filename creation, compression<br>of completed archives and transfer of archive files to remote<br>storage locations.<br><br>The RollCheckers have a reference to the current Archive so<br>they can ask file-related questions (like \"how big are you?\")<br><br>You can register callbacks with the RollManager for notifications<br>on when new Archive files are opened or closed.<br><br>Important Note! The Callback handlers and the RollCheckers take<br>kwargs in the constructor since they can be dynamically loaded as<br>plugins. So, make sure you provide named parameters to the constructors. <br><br>Usage:<br><br>    # Make a roll checker of whatever strategy you choose.<br>    checker = roll_checker.SizeRollChecker(roll_size_mb=100)  # 100mb files<br><br>    # Make a roll manager for reading or writing. <br>    # Give the filename template and the checker. <br>    # (and an optional working directory for new files)<br><br>    # The %c in the template is per the python strptime method: <br>    # https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior <br><br>    x = roll_manager.WritingRollManager(\"test_%c.events\", checker)<br><br>    # Write some metadata and payload ...<br>    #<br>    # WritingRollManager.write(metadata, payload) where<br>    # metadata = string:string dict<br>    # payload = string of data. Most likely a json structure.<br><br>    # If the archive file grows beyond 100mb the old one<br>    # will automatically close and a new one created.<br>    for index in range(10):<br>        x.write({\"index\": str(index)}, \"payload_%d\" % index)<br><br>    x.close()<br><br>For Reading:<br><br>    # Read from all the event data files using wildcards ...<br>    manager = roll_manager.ReadingRollManager(\"test_*.events\")<br><br>    # This will keep reading across all files in the archive<br>    # until we reach the end.<br>    while True:<br>        try:<br>            metadata, json_payload = manager.read()<br>        except roll_manager.NoMoreFiles:<br>            break<br><br>Look at `test/integration/test_rolling.py` for a more complete example.\n          </div>"}, "last_serial": 1534141, "releases": {"0.2.dev46": [{"comment_text": "", "digests": {"md5": "25d1dfc0f3fa71fb21d4231454418b7c", "sha256": "6e6c5d9109e3439dca90682abc21d189682edc67b8d91eb49674366579bce455"}, "downloads": -1, "filename": "shoebox-0.2.dev46.tar.gz", "has_sig": false, "md5_digest": "25d1dfc0f3fa71fb21d4231454418b7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58479, "upload_time": "2015-02-17T20:08:07", "upload_time_iso_8601": "2015-02-17T20:08:07.644112Z", "url": "https://files.pythonhosted.org/packages/2e/b7/479e49ffb762ff01fa8c37c7bc9df9e99cd561877f435a8c86b7abed215f/shoebox-0.2.dev46.tar.gz", "yanked": false}], "0.3.dev47": [{"comment_text": "", "digests": {"md5": "058552f8d933557b6105cb8bef4d85bc", "sha256": "dbf56d83259c299d2e0c185fd80dc33310dda634523abe7e0c95b803675f31d6"}, "downloads": -1, "filename": "shoebox-0.3.dev47.tar.gz", "has_sig": false, "md5_digest": "058552f8d933557b6105cb8bef4d85bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59149, "upload_time": "2015-02-24T15:14:42", "upload_time_iso_8601": "2015-02-24T15:14:42.974420Z", "url": "https://files.pythonhosted.org/packages/27/cf/6d9066e6effa18d0e3ab87ab9195d3a1c1feebbdf2c45f1632662c06b002/shoebox-0.3.dev47.tar.gz", "yanked": false}], "0.4.dev47": [{"comment_text": "", "digests": {"md5": "0d3b9a40b84cdedc5d1390890664df49", "sha256": "b3ce570bc4663e065a0c585d69b4e6357b6a7ed66dc6910513d95442b8f1c726"}, "downloads": -1, "filename": "shoebox-0.4.dev47.tar.gz", "has_sig": false, "md5_digest": "0d3b9a40b84cdedc5d1390890664df49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59144, "upload_time": "2015-02-24T15:58:48", "upload_time_iso_8601": "2015-02-24T15:58:48.363657Z", "url": "https://files.pythonhosted.org/packages/49/89/3a404a8613ba26ccd84b2efe0d3e40548a68f259ea33bcf14d75ea6eae00/shoebox-0.4.dev47.tar.gz", "yanked": false}], "0.5.dev50": [{"comment_text": "", "digests": {"md5": "6385ed49d643885dc777a5364a5231e7", "sha256": "b31f6648c15bb109bfeabed3cf71eb4ce05a2d5bf7db8348d063057b36532319"}, "downloads": -1, "filename": "shoebox-0.5.dev50.tar.gz", "has_sig": false, "md5_digest": "6385ed49d643885dc777a5364a5231e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59591, "upload_time": "2015-03-27T16:43:52", "upload_time_iso_8601": "2015-03-27T16:43:52.119401Z", "url": "https://files.pythonhosted.org/packages/af/09/3f2b8b27efd2e31f5a8807b3ffb61a807998e864519c51a7d1dc74b1e301/shoebox-0.5.dev50.tar.gz", "yanked": false}], "0.6.dev51": [{"comment_text": "", "digests": {"md5": "a269a3638be4fd29f7e356b1bc3b4071", "sha256": "ac22ff20e7cda44408854ce190d02073bf3f00e04c0659f73556064b6c5e6551"}, "downloads": -1, "filename": "shoebox-0.6.dev51.tar.gz", "has_sig": false, "md5_digest": "a269a3638be4fd29f7e356b1bc3b4071", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59978, "upload_time": "2015-04-10T17:10:17", "upload_time_iso_8601": "2015-04-10T17:10:17.354065Z", "url": "https://files.pythonhosted.org/packages/a4/b3/5a6888a4f5f2e9928ab312364fc5915c54763fe2a48e876319fa807bfc53/shoebox-0.6.dev51.tar.gz", "yanked": false}], "0.7.dev52": [{"comment_text": "", "digests": {"md5": "a47ea732369338605ae0e2d0a6b935d3", "sha256": "e68bb568e33fe9b27e02ffed277f3afc12b2dd33fca2a30fb66cb7e665b40007"}, "downloads": -1, "filename": "shoebox-0.7.dev52.tar.gz", "has_sig": false, "md5_digest": "a47ea732369338605ae0e2d0a6b935d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59891, "upload_time": "2015-04-16T14:55:22", "upload_time_iso_8601": "2015-04-16T14:55:22.265638Z", "url": "https://files.pythonhosted.org/packages/23/d6/e2d973ff06dceda8fbcaad7f464d416095eff7bb0d33bfc98d43e87d453b/shoebox-0.7.dev52.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a47ea732369338605ae0e2d0a6b935d3", "sha256": "e68bb568e33fe9b27e02ffed277f3afc12b2dd33fca2a30fb66cb7e665b40007"}, "downloads": -1, "filename": "shoebox-0.7.dev52.tar.gz", "has_sig": false, "md5_digest": "a47ea732369338605ae0e2d0a6b935d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59891, "upload_time": "2015-04-16T14:55:22", "upload_time_iso_8601": "2015-04-16T14:55:22.265638Z", "url": "https://files.pythonhosted.org/packages/23/d6/e2d973ff06dceda8fbcaad7f464d416095eff7bb0d33bfc98d43e87d453b/shoebox-0.7.dev52.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:47 2020"}