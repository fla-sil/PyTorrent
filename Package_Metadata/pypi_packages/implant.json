{"info": {"author": "Oliver Berger", "author_email": "diefans@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP"], "description": ".. container:: bagdes\n\n    .. image:: https://travis-ci.org/diefans/implant.svg?branch=master\n       :target: https://travis-ci.org/diefans/implant\n       :align: right\n\n    .. image:: https://img.shields.io/pypi/pyversions/implant.svg\n       :target: https://pypi.org/project/implant/\n       :alt: PyPI - Python Version\n\n    .. image:: https://img.shields.io/pypi/v/implant.svg\n       :target: https://pypi.org/project/implant/\n       :alt: PyPI\n\n    .. image:: https://img.shields.io/readthedocs/implant.svg\n       :target: http://docs.implant.codes\n       :alt: Read the Docs\n\n    .. image:: https://codecov.io/gh/diefans/implant/branch/master/graph/badge.svg\n       :target: https://codecov.io/gh/diefans/implant\n\n----\n\n.. image:: implant.png\n   :alt: implant\n   :align: left\n\n\nimplant\n**********\n\nA proof-of-concept for asynchronous adhoc remote procedure calls in Python.\n\nThis is work in progress and serves basically as an exercise.\n\n\n.. inclusion-marker-do-not-remove\n\n\nFeatures\n========\n\n- Python >= 3.5 asyncio\n\n- adhoc transferable remote procedures\n\n- remote part of a `implant.core.Command` may reside in a separate module\n\n- a `implant.core.Command` specific `implant.core.Channel`\n  enables arbitrary protocols between local and remote side\n\n- events\n\n- quite small core\n\n- tests\n\n\nLimitations\n===========\n\n- Python >= 3.5\n\n- only pure Python modules are supported for remote import, if no venv is used\n\n- `implant.core.Command` s must reside in a module other then `__main__`\n\n- at the moment sudo must not ask for password\n\n\n\nExample\n=======\n\n\nGeneral application\n-------------------\n\n.. code:: python\n\n    import asyncio\n    import pathlib\n\n    from implant import core, connect, commands\n\n\n    async def remote_tasks():\n        # create a connector for a python process\n        connector = connect.Lxd(\n            container='zesty',\n            hostname='localhost'\n        )\n        connector_args = {\n            'python_bin': pathlib.Path('/usr/bin/python3')\n        }\n        # connect to a remote python process\n        remote = await connector.launch(**connector_args)\n\n        # start remote communication tasks\n        com_remote = asyncio.ensure_future(remote.communicate())\n        try:\n            # execute command\n            cmd = commands.SystemLoad()\n            result = await remote.execute(cmd)\n\n            print(\"Remote system load:\", result)\n\n        finally:\n            # stop communication tasks\n            com_remote.cancel()\n            await com_remote\n\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(remote_tasks())\n        loop.close()\n\n\nAn example Echo Command\n-----------------------\n\n.. code:: python\n\n    import logging\n    import os\n\n    from implant import core\n\n\n    log = logging.getLogger(__name__)\n\n\n    class Echo(core.Command):\n\n        \"\"\"Demonstrate the basic command API.\"\"\"\n\n        async def local(self, context):\n            \"\"\"The local side of the RPC.\n\n               :param context: :py:obj:`implant.core.DispatchLocalContext`\n            \"\"\"\n            # custom protocol\n            # first: send\n            await context.channel.send_iteration(\"send to remote\")\n\n            # second: receive\n            from_remote = []\n            async for x in context.channel:\n                from_remote.append(x)\n            log.debug(\"************ receiving from remote: %s\", from_remote)\n\n            # third: wait for remote to finish and return result\n            remote_result = await context.remote_future\n\n            result = {\n                'from_remote': ''.join(from_remote),\n            }\n            result.update(remote_result)\n            return result\n\n        async def remote(self, context):\n            \"\"\"The remote side of the RPC.\n\n               :param context: :py:obj:`implant.core.DispatchRemoteContext`\n            \"\"\"\n            # first: receive\n            from_local = []\n            async for x in context.channel:\n                from_local.append(x)\n            log.debug(\"************ receiving from local: %s\", from_local)\n\n            # second: send\n            await context.channel.send_iteration(\"send to local\")\n\n            # third: return result\n            return {\n                'from_local': ''.join(from_local),\n                'remote_self': self,\n                'pid': os.getpid()\n            }\n\n\nInternals\n=========\n\n::\n\n    master <-----------------------------------------> remote\n                                |\n                           stdin/stdout\n                                |\n                              chunks\n                                |\n                             channels\n                                |\n        --> send ---> |                   |  --> queue -->\n                      | module:class/fqin |\n        <-- queue <-- |                   |  <--- send <--\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/diefans/implant", "keywords": "asyncio ssh RPC Remote execution dependency injection stdin stdout messaging", "license": "Apache License Version 2.0", "maintainer": "", "maintainer_email": "", "name": "implant", "package_url": "https://pypi.org/project/implant/", "platform": "", "project_url": "https://pypi.org/project/implant/", "project_urls": {"Homepage": "https://github.com/diefans/implant"}, "release_url": "https://pypi.org/project/implant/0.1.2/", "requires_dist": ["click", "ruamel.yaml (==0.15.37)", "async-generator; extra == 'dev'", "pytest; extra == 'dev'", "pytest-cache; extra == 'dev'", "pytest-asyncio; extra == 'dev'", "pytest-random; extra == 'dev'", "pytest-cov; extra == 'dev'", "pytest-benchmark; extra == 'dev'", "pytest-watch; extra == 'dev'", "pytest-testmon; extra == 'dev'", "pylama; extra == 'dev'", "pylama-pylint; extra == 'dev'", "pycodestyle; extra == 'dev'", "pydocstyle; extra == 'dev'", "radon; extra == 'dev'", "isort; extra == 'dev'", "ipython; extra == 'dev'", "pdbpp; extra == 'dev'", "colorlog; extra == 'dev'", "tox; extra == 'dev'", "sphinx; extra == 'docs'", "sphinxcontrib-asyncio; extra == 'docs'", "sphinxcontrib-fulltoc; extra == 'docs'", "humanfriendly; extra == 'docs'", "tokio (==0.99.0); extra == 'tokio'", "uvloop; extra == 'uvloop'"], "requires_python": ">= 3.5.0.0, < 4.0.1.2", "summary": "Remote execution via stdin/stdout messaging.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<a href=\"https://travis-ci.org/diefans/implant\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/diefans/implant.svg?branch=master\" class=\"align-right\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd0bcea696c21ea2a81fa1e1171d883d8f6c5f0a/68747470733a2f2f7472617669732d63692e6f72672f64696566616e732f696d706c616e742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/implant/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/533fbe9114b83e75e1b92bb846bb4c880a962ce5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f696d706c616e742e737667\"></a>\n<a href=\"https://pypi.org/project/implant/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/481592af7aa3b45e2155ccc6931d8ca896680653/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f696d706c616e742e737667\"></a>\n<a href=\"http://docs.implant.codes\" rel=\"nofollow\"><img alt=\"Read the Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/468617dfbaf822f2f8f7be0cdda2ed3a6f31f680/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f696d706c616e742e737667\"></a>\n<a href=\"https://codecov.io/gh/diefans/implant\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/diefans/implant/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c34da46e008d84c791da40a5110e6bd1a965f3d/68747470733a2f2f636f6465636f762e696f2f67682f64696566616e732f696d706c616e742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n</div>\n<hr class=\"docutils\">\n<img alt=\"implant\" class=\"align-left\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ccbae8415aee3d1f6c057b712847612a4e58962b/696d706c616e742e706e67\">\n<div id=\"implant\">\n<h2>implant</h2>\n<p>A proof-of-concept for asynchronous adhoc remote procedure calls in Python.</p>\n<p>This is work in progress and serves basically as an exercise.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Python &gt;= 3.5 asyncio</li>\n<li>adhoc transferable remote procedures</li>\n<li>remote part of a <cite>implant.core.Command</cite> may reside in a separate module</li>\n<li>a <cite>implant.core.Command</cite> specific <cite>implant.core.Channel</cite>\nenables arbitrary protocols between local and remote side</li>\n<li>events</li>\n<li>quite small core</li>\n<li>tests</li>\n</ul>\n</div>\n<div id=\"limitations\">\n<h3>Limitations</h3>\n<ul>\n<li>Python &gt;= 3.5</li>\n<li>only pure Python modules are supported for remote import, if no venv is used</li>\n<li><cite>implant.core.Command</cite> s must reside in a module other then <cite>__main__</cite></li>\n<li>at the moment sudo must not ask for password</li>\n</ul>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<div id=\"general-application\">\n<h4>General application</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">implant</span> <span class=\"kn\">import</span> <span class=\"n\">core</span><span class=\"p\">,</span> <span class=\"n\">connect</span><span class=\"p\">,</span> <span class=\"n\">commands</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">remote_tasks</span><span class=\"p\">():</span>\n    <span class=\"c1\"># create a connector for a python process</span>\n    <span class=\"n\">connector</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"o\">.</span><span class=\"n\">Lxd</span><span class=\"p\">(</span>\n        <span class=\"n\">container</span><span class=\"o\">=</span><span class=\"s1\">'zesty'</span><span class=\"p\">,</span>\n        <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">connector_args</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'python_bin'</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/usr/bin/python3'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\"># connect to a remote python process</span>\n    <span class=\"n\">remote</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">connector</span><span class=\"o\">.</span><span class=\"n\">launch</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">connector_args</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># start remote communication tasks</span>\n    <span class=\"n\">com_remote</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ensure_future</span><span class=\"p\">(</span><span class=\"n\">remote</span><span class=\"o\">.</span><span class=\"n\">communicate</span><span class=\"p\">())</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># execute command</span>\n        <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">commands</span><span class=\"o\">.</span><span class=\"n\">SystemLoad</span><span class=\"p\">()</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">remote</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Remote system load:\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"c1\"># stop communication tasks</span>\n        <span class=\"n\">com_remote</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">com_remote</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">remote_tasks</span><span class=\"p\">())</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"an-example-echo-command\">\n<h4>An example Echo Command</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">implant</span> <span class=\"kn\">import</span> <span class=\"n\">core</span>\n\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Echo</span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Command</span><span class=\"p\">):</span>\n\n    <span class=\"sd\">\"\"\"Demonstrate the basic command API.\"\"\"</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">local</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"The local side of the RPC.\n\n           :param context: :py:obj:`implant.core.DispatchLocalContext`\n        \"\"\"</span>\n        <span class=\"c1\"># custom protocol</span>\n        <span class=\"c1\"># first: send</span>\n        <span class=\"k\">await</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">send_iteration</span><span class=\"p\">(</span><span class=\"s2\">\"send to remote\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># second: receive</span>\n        <span class=\"n\">from_remote</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">:</span>\n            <span class=\"n\">from_remote</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"************ receiving from remote: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">from_remote</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># third: wait for remote to finish and return result</span>\n        <span class=\"n\">remote_result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">remote_future</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'from_remote'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">from_remote</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">remote_result</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">remote</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"The remote side of the RPC.\n\n           :param context: :py:obj:`implant.core.DispatchRemoteContext`\n        \"\"\"</span>\n        <span class=\"c1\"># first: receive</span>\n        <span class=\"n\">from_local</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">:</span>\n            <span class=\"n\">from_local</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"************ receiving from local: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">from_local</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># second: send</span>\n        <span class=\"k\">await</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">send_iteration</span><span class=\"p\">(</span><span class=\"s2\">\"send to local\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># third: return result</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'from_local'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">from_local</span><span class=\"p\">),</span>\n            <span class=\"s1\">'remote_self'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"s1\">'pid'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"internals\">\n<h3>Internals</h3>\n<pre>master &lt;-----------------------------------------&gt; remote\n                            |\n                       stdin/stdout\n                            |\n                          chunks\n                            |\n                         channels\n                            |\n    --&gt; send ---&gt; |                   |  --&gt; queue --&gt;\n                  | module:class/fqin |\n    &lt;-- queue &lt;-- |                   |  &lt;--- send &lt;--\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3920297, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "99edae1da01b97beacd7b963050ccb55", "sha256": "53c4035f53922fed07f009f82152491d94d4606b1dd111f0bc17e4e7a3bac710"}, "downloads": -1, "filename": "implant-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "99edae1da01b97beacd7b963050ccb55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 146589, "upload_time": "2018-05-30T20:08:17", "upload_time_iso_8601": "2018-05-30T20:08:17.542630Z", "url": "https://files.pythonhosted.org/packages/c2/bc/5ffc4988c757f7ea60bb65aaafd41b811e280b4fce01a201da1d4a01ef16/implant-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "205aea9e6ee1b262727c68c79c50eb23", "sha256": "c8bc4d289e4f72d83b0ae15fafe44f3ecbb6e0d3b0b21e34ffdbdd07b8c36a7d"}, "downloads": -1, "filename": "implant-0.1.0.tar.gz", "has_sig": false, "md5_digest": "205aea9e6ee1b262727c68c79c50eb23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 38228, "upload_time": "2018-05-30T20:08:20", "upload_time_iso_8601": "2018-05-30T20:08:20.207934Z", "url": "https://files.pythonhosted.org/packages/33/3a/0954de8ded67c932757e841c8279c9e7fd49bc5ea84afa49453bd0e3e3af/implant-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6d6969e7a5f00105fc6305b6e80f081c", "sha256": "fd1068c72073905437bbc47a8546573bac9689f5897d423fc252848d2485f376"}, "downloads": -1, "filename": "implant-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6d6969e7a5f00105fc6305b6e80f081c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 146584, "upload_time": "2018-05-30T20:13:59", "upload_time_iso_8601": "2018-05-30T20:13:59.777392Z", "url": "https://files.pythonhosted.org/packages/ca/67/d37d83bd58b5436bc4a77131be1704d74759e5bf2bd7268b2691e7474007/implant-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1cef84453ee13a3e152c70b73b40ec3", "sha256": "6994ec2c8d543e1888571104348b6dc2773b10d2246cc2df2b18683c33f7f254"}, "downloads": -1, "filename": "implant-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b1cef84453ee13a3e152c70b73b40ec3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 38214, "upload_time": "2018-05-30T20:14:02", "upload_time_iso_8601": "2018-05-30T20:14:02.264136Z", "url": "https://files.pythonhosted.org/packages/6e/2d/39acdb9463d50f4760222e5c66ffdbcbae0ecbba96d931b825565a51ccd3/implant-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9ab1e625b2ec595ae81bda97ce6003e7", "sha256": "c08d251be9e63e0027bded83607244a6382f34e784ad4276f586e693ef85973c"}, "downloads": -1, "filename": "implant-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9ab1e625b2ec595ae81bda97ce6003e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.5.0.0, < 4.0.1.2", "size": 40683, "upload_time": "2018-06-01T11:12:04", "upload_time_iso_8601": "2018-06-01T11:12:04.696823Z", "url": "https://files.pythonhosted.org/packages/60/e1/72c18f680f6aef28ca4c52c43b20105de25d97375936c32e8f200a5b03d5/implant-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0eafbd15183cbbedf476280ebffbf7d0", "sha256": "ace257625b46a2644d74d97ddfc867561c54f3d041f606ec68ef711af4f69a73"}, "downloads": -1, "filename": "implant-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0eafbd15183cbbedf476280ebffbf7d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5.0.0, < 4.0.1.2", "size": 34348, "upload_time": "2018-06-01T11:12:06", "upload_time_iso_8601": "2018-06-01T11:12:06.128399Z", "url": "https://files.pythonhosted.org/packages/9c/37/55a8048e40d4ba6497497f87af847910752a929120ce0c87732305b8a411/implant-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9ab1e625b2ec595ae81bda97ce6003e7", "sha256": "c08d251be9e63e0027bded83607244a6382f34e784ad4276f586e693ef85973c"}, "downloads": -1, "filename": "implant-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9ab1e625b2ec595ae81bda97ce6003e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.5.0.0, < 4.0.1.2", "size": 40683, "upload_time": "2018-06-01T11:12:04", "upload_time_iso_8601": "2018-06-01T11:12:04.696823Z", "url": "https://files.pythonhosted.org/packages/60/e1/72c18f680f6aef28ca4c52c43b20105de25d97375936c32e8f200a5b03d5/implant-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0eafbd15183cbbedf476280ebffbf7d0", "sha256": "ace257625b46a2644d74d97ddfc867561c54f3d041f606ec68ef711af4f69a73"}, "downloads": -1, "filename": "implant-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0eafbd15183cbbedf476280ebffbf7d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5.0.0, < 4.0.1.2", "size": 34348, "upload_time": "2018-06-01T11:12:06", "upload_time_iso_8601": "2018-06-01T11:12:06.128399Z", "url": "https://files.pythonhosted.org/packages/9c/37/55a8048e40d4ba6497497f87af847910752a929120ce0c87732305b8a411/implant-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:33 2020"}