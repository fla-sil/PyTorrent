{"info": {"author": "MediaMath", "author_email": "developers@mediamath.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "# TerminalOne-Python\n\n[![image](https://travis-ci.org/MediaMath/t1-python.svg?branch=master)](https://travis-ci.org/MediaMath/t1-python)\n\n[![Codacy\nBadge](https://api.codacy.com/project/badge/Grade/4dc5cc975f5a48078f68994d6c546e25)](https://www.codacy.com/app/fsargent/t1-python?utm_source=github.com&utm_medium=referral&utm_content=MediaMath/t1-python&utm_campaign=badger)\n\n[![Codacy Badge\nCoverage](https://api.codacy.com/project/badge/Coverage/4dc5cc975f5a48078f68994d6c546e25)](https://www.codacy.com/app/fsargent/t1-python?utm_source=github.com&utm_medium=referral&utm_content=MediaMath/t1-python&utm_campaign=Badge_Coverage)\n\nPython library for MediaMath\\'s APIs. This library consists of classes\nfor working with T1 APIs and managing entities. It is written for Python\n2.7 and \\>=3.3. Compatibility with Python 3 is made possible by bundling\nthe module [six](https://pypi.python.org/pypi/six).\n\nAPI Documentation is available at [\\<https://apidocs.mediamath.com/\\>\n\\<https://apidocs.mediamath.com/\\>]{.title-ref}\\_\\_.\n\n<!-- TOC -->\n\n-   [TerminalOne-Python](#terminalone-python)\n-   [Installation](#installation)\n-   [Execution and Management API](#execution-and-management-api)\n    -   [Service Object](#service-object)\n    -   [Fetching Entities and\n        Collections](#fetching-entities-and-collections)\n    -   [Collections](#collections)\n    -   [Searching for entities](#searching-for-entities)\n    -   [Entities](#entities)\n    -   [Child Entities](#child-entities)\n    -   [Reports](#reports)\n    -   [Appendix](#appendix)\n\n<!-- /TOC -->\n\nInstallation\n============\n\nInstallation is simple with pip in a virtual environment:\n\n``` {.bash}\n$ pip install TerminalOne\n```\n\nAlternatively, download the latest tag of the repository as a tarball or\nzip file and run:\n\n``` {.bash}\n$ python setup.py install\n```\n\nExecution and Management API\n============================\n\nService Object\n--------------\n\n*class* `terminalone.T1`(*username*=`None`, *password*=`None`,\n*api\\_key*=`None`, *client\\_secret*=`None`, *auth\\_method*=`None`,\n*session\\_id*=`None`, *environment*=`\"production\"`, *api\\_base*=`None`,\n*token*=`None`, *token\\_updater*=`None`)\n\nThe starting point for this package. Authentication and session, entity\nretrieval, creation, etc. are handled here. Parameters:\n\n-   *username*: Username of a valid T1 user (that is, valid at\n    [\\<https://t1.mediamath.com\\>\n    \\<https://t1.mediamath.com\\>]{.title-ref}\\_\\_).\n-   *password*: Password for corresponding T1 user\n-   *api\\_key*: Approved API key generated at [MediaMath\\'s Developer\n    Portal](https://developer.mediamath.com).\n-   *client\\_secret*: Client Secret for use with OAuth2 authentication\n-   *session\\_id*: For applications receiving a session ID instead of\n    user credentials, such as an app in T1\\'s Apps tab. *api\\_key*\n    should still be provided.\n-   *auth\\_method*: string enum corresponding to which method of\n    authentication the session to use. Currently \\\"cookie\\\" and\n    \\\"oauth2\\\" are supported. The auth method will usually be detected,\n    so this can be ommitted. (Omission new in v1.2.0!)\n-   *token*: dict OAuth2 token as generated by the session. If you have\n    a web app, you can store the token in the browser session, and then\n    use that to generate a new T1 session. See the documentation for\n    examples.\n-   *token\\_updater*: function with one argument, token, to be used to\n    update your token databse on automatic token refresh. If not\n    provided, a TokenUpdated warning will be raised when a token has\n    been refreshed. This warning will carry the token in its token\n    argument.\n-   Either *environment* or *api\\_base* can be provided to specify where\n    the request goes.\n\nT1-Python includes support for resource-owner code grant. Include a\nclient ID and secret alongside your credentials:\n\n``` {.python}\n>>> t1 = T1(auth_method='oauth2-resourceowner', client_id=\"my_client_id\", client_secret=\"my_secret\", username=\"my@user\", password=\"mypass\")\n```\n\nIf you already have a valid access token (e.g. by following the authorization code flow - outside this library), you can also pass it in order to get authenticated:\n``` {.python}\n>>> t1 = t1 = terminalone.T1(access_token=token, environment=environment, auth_method='oauth2-existingaccesstoken', json=True)\n```\n\nIf you have a specific API base (for instance, if you are testing\nagainst a sandbox deployment) (*Note*: sandbox environments are not yet\nuseable), you can use the `api_base` keyword with the *domain*. For\nproduction endpoints, neither `environment` nor `api_base` should be\nprovided:\n\n``` {.python}\n>>> t1 = terminalone.T1(\"myusername\", \"mypassword\", \"my_api_key\", api_base=\"myqaserver.domain.com\", auth_method=\"cookie\")\n```\n\nIf you are receiving a (cloned) session ID, for instance the norm for\napps, you will not have user credentials to log in with. Instead,\nprovide the session ID and API key:\n\n``` {.python}\n>>> t1 = terminalone.T1(session_id=\"13ea5a26e77b64e7361c7ef84910c18a8d952cf0\", api_key=\"my_api_key\")\n```\n\nCookie Auth (username/password) exists, but it is not recommended for\nuse.\n\n``` {.python}\n>>> import terminalone\n>>> t1 = terminalone.T1(\"myusername\", \"mypassword\")\n```\n\nFetching Entities and Collections\n---------------------------------\n\nEntity and collection retrieval. Parameters:\n\n`T1.get`(*collection*, *entity*=`None`, *child*=`None`, *limit*=`None`,\n*include*=`None`, *full*=`None`, *page\\_limit*=`100`,\n*page\\_offset*=`0`, *sort\\_by*=`\"id\"`, *get\\_all*=`False`,\n*parent*`None`, *query*=`None`, *count*=`False`)\n\n-   *collection*: T1 collection, e.g. `\"advertisers\"`\n-   *entity*: Integer ID of entity being retrieved from T1\n-   *child*: Child object of a particular entity, e.g. `\"dma\"`, `\"acl\"`\n-   *limit*: dict to query for relation entity, e.g.\n    `{\"advertiser\": 123456}`\n-   *include*: str/list of relations:\n    -   string, e.g.\n        -   `T1.get('advertiser', include='agency')`\n    -   list of *lateral* (non-hierarchical) relations, e.g.\n        -   `T1.get('advertiser', include=['agency', 'ad_server'])`\n    -   list of list/strings of *hierarchical* relations, e.g.\n        -   `T1.get('advertiser', include=[['agency', 'organization'],]`\n        -   `T1.get('advertiser', include=[['agency', 'organization'], 'ad_server']`\n-   *full*: When retrieving multiple entities, specifies which types to\n    return the full record for. e.g.\n    -   `\"campaign\"` (full record for campaign entities returned)\n    -   `True` (full record of all entities returned),\n    -   `[\"campaign\", \"advertiser\"]` (full record for campaigns and\n        advertisers returned)\n-   *page\\_limit* and *page\\_offset* handle pagination. *page\\_limit*\n    specifies how many entities to return at a time, default and max of\n    100. *page\\_offset* specifies which entity to start at for that\n        page.\n-   *sort\\_by*: sort order. Default `\"id\"`. e.g. `\"-id\"`, `\"name\"`\n-   *get\\_all*: Whether to retrieve all results for a query or just a\n    single page. Mutually exclusive with *page\\_limit*/*page\\_offset*\n-   *parent*: Only return entities with this `parent_id`. Used for\n    `audience_segments`.\n-   *query*: Search parameters. *Note*: it\\'s much simpler to use `find`\n    instead of `get`, allowing `find` to construct the query.\n-   *count*: bool return the number of entities as a second parameter\n-   *other\\_params*: dict of additional, service-specific parameters to\n    be passed.\n\n| Raises: `terminalone.errors.ClientError` if *page\\_limit* \\> 100,\n  `terminalone.errors.APIError` on \\>399 HTTP status code.\n| Returns: If single entity is specified, returns a single entity\n  object. If multiple entities, generator yielding each entity.\n\n### Collections\n\n``` {.python}\n>>> advertisers = t1.get(\"advertisers\")\n>>> for advertiser in advertisers:\n...     print(advertiser)\n...\nAdvertiser(id=1, name=\"My Brand Advertiser\", _type=\"advertiser\")\n```\n\nReturns generator over the first 100 advertisers (or fewer if the user\nonly has access to fewer), ordered ascending by ID. Each entity is the\nlimited object, containing just `id`, `name`, and `_type` (`_type` just\nsignifies the type returned by the API, in this case, \\\"advertiser\\\").\n\n``` {.python}\n>>> ag_advertisers = t1.get(\"advertisers\",\n...                         limit={\"agency\": 123456},\n...                         include=\"agency\",\n...                         full=\"advertiser\")\n>>> for advertiser in ag_advertisers:\n...     print(advertiser)\n...\nAdvertiser(id=1, name=\"My Brand Advertiser\", agency=Agency(id=123456, name=\"Operating Agency\", _type=\"agency\"), agency_id=123456, status=True, ...)\n```\n\n\nGenerator over up to 100 advertisers within agency ID 123456. Each\nadvertiser includes its parent agency object as an attribute. The\nadvertiser objects are the full entities, so all fields are returned.\nAgency objects are limited and have the same fields as advertisers in\nthe previous example.\n\n``` {.python}\n>>> campaigns, count = t1.get(\"campaigns\",\n...                           get_all=True,\n...                           full=True,\n...                           sort_by=\"-updated_on\")\n>>> print(count)\n539\n>>> for campaign in campaigns:\n...     print(campaign)\nCampaign(id=123, name=\"Summer Acquisition\", updated_on=datetime.datetime(2015, 4, 4, 0, 15, 0, 0), ...)\nCampaign(id=456, name=\"Spring Acquisition\", updated_on=datetime.datetime(2015, 4, 4, 0, 10, 0, 0), ...)\n...\n```\n\nGenerator over every campaign accessible by the user, sorted in\ndescending order of last update. Second argument is integer number of\ncampaigns retrieved, as returned by the API. `get_all=True` removes the\nneed to worry about pagination ---\u00a0it is handled by the SDK internally.\n\n``` {.python}\n>>> _, count = t1.get(\"advertisers\",\n...                   page_limit=1,\n...                   count=True)\n>>> print(count)\n23\n```\n\nSole purpose is to get the count of advertisers accessible by the user.\nUse `page_limit=1` to minimize unnecessary resources, and assign to `_`\nto throw away the single entity retrieved.\n\n### Searching for entities\n\nLimiting entities by relation ID is one way to limit entities, but we\ncan also search with more intricate queries using `find`:\n\n`T1.find`(*collection*, *variable*, *operator*, *candidates*,\n\\*\\**kwargs*)\n\n-   *collection*: T1 collection, same use as with `get`\n-   *variable*: Field to query for, e.g. `name`\n-   *operator*: Arithmetic operator, e.g. `\"<\"`\n-   *candidates*: Query value, e.g. `\"jonsmith*\"`\n-   *kwargs*: Additional keyword arguments to pass onto `get`. All\n    keyword arguments applicable for `get` are applicable here as well.\n\n*module* `terminalone.filters`\n\n-   `IN`\n-   `NULL`\n-   `NOT_NULL`\n-   `EQUALS`\n-   `NOT_EQUALS`\n-   `GREATER`\n-   `GREATER_OR_EQUAL`\n-   `LESS`\n-   `LESS_OR_EQUAL`\n-   `CASE_INS_STRING`\n\n``` {.python}\n>>> greens = t1.find(\"atomic_creatives\",\n...                  \"name\",\n...                  terminalone.filters.CASE_INS_STRING,\n...                  \"*Green*\",\n...                  include=\"concept\",\n...                  get_all=True)\n```\n\nGenerator over all creatives with \\\"Green\\\" in the name. Include\nconcept.\n\n``` {.python}\n>>> my_campaigns = t1.find(\"campaigns\",\n...                       \"id\",\n...                       terminalone.filers.IN,\n...                       [123, 234, 345],\n...                       full=True)\n```\n\nGenerator over campaign IDs 123, 234, and 345. Note that when using\n`terminalone.filers.IN`, *variable* is automatically ID, so that\nargument is effectively ignored. Further, *candidates* must be a list of\ninteger IDs.\n\n``` {.python}\n>>> pixels = t1.find(\"pixel_bundles\",\n...                  \"keywords\",\n...                  terminalone.filters.NOT_NULL,\n...                  None)\n```\n\nGenerator over first 100 pixels with non-null keywords field.\n\n``` {.python}\n>>> strats = t1.find(\"strategies\",\n...                  \"status\",\n...                  terminalone.filters.EQUALS,\n...                  True,\n...                  limit={\"campaign\": 123456})\n```\n\nActive strategies within campaign ID 123456.\n\n### Entities\n\nA specific entity can be retrieved by using `get` with an entity ID as\nthe second argument, or using the `entity` keyword. You can then access\nthat entity\\'s properties using instance attributes:\n\n``` {.python}\n>>> my_advertiser = t1.get(\"advertisers\", 111111)\n>>> my_advertiser.id\n111111\n```\n\n*class* `terminalone.Entity`\n\n-   `set(properties)` Set all data in mapping object `properties` to the\n    entity.\n-   `save(data=None)`\n\n: Save the entity. If `data` is provided, send that. Typically used with\nno arguments.\n\n(*Note: you will typically interact with subclasses, not \\`\\`Entity\\`\\`\nitself*)\n\nIf for some reason you need to access the object like a dictionary (for\ninstance, if you need to iterate over fields or dump to a CSV), the\nmethod `get_properties()` is available. However, you shouldn\\'t modify\n`_properties` directly, as it will cause incorrect behaviour.\n\nOnce you have your instance, you can modify its values, and then save it\nback. A return value of `None` indicates success. Otherwise, an error is\nraised.\n\n``` {.python}\n>>> my_advertiser.name = \"Updated name\"\n>>> my_advertiser.save()\n>>>\n```\n\nCreate new entities by calling `T1.new` on your instance.\n\n`T1.new`(*collection*, *report=None*, *properties=None*)\n\n-   *collection*: T1 collection, same as above\n-   *report*: New report object; discussed in [Reports](#reports)\n-   *properties*: Properties to pass into new object.\n\n``` {.python}\n>>> new_properties = {\n...     \"name\": \"Spring Green\",\n...     \"status\": True,\n... }\n>>> new_concept = t1.new(\"concept\", properties=new_properties)\n>>> new_concept.advertiser_id = 123456\n>>> new_concept.save()\n>>>\n```\n\n`properties` is an optional mapping object with properties to get passed\nin. You can use a string representation of the object (such as\n`\"concept\"` above); or, you can use the object itself from\n`terminalone.models`:\n\n``` {.python}\n>>> new_concept = t1.new(terminalone.models.Concept, properties=new_properties)\n>>> \n```\n\n### Child Entities\n\nTo retrieve child entities (for instance, `/users/:id/permissions`),\ninclude the `child` argument in a call to `T1.get`:\n\n``` {.python}\n>>> permissions = t1.get(\"users\", 1, child=\"permissions\")\n```\n\nReports\n-------\n\nTo use MediaMath\\'s Reports API instantiate an instance with `T1.new`:\n\n``` {.python}\n>>> rpts = t1.new(\"report\")\n```\n\n*class* `terminalone.Report`\n\n-   `metadata` Metadata of reports available or of individual report.\n    Calculated on first call (API request made); cached for future\n    calls.\n-   `parameters` Dictionary of request parameters\n-   `set(data)` Set request parameters with a mapping object `data`\n-   `report_uri(report)` Get URI stub for report\n-   `get(as_dict=False)` Get report data (requires calling `T1.new` with\n    a report name). Returns headers and `csv.reader`. If `as_dict` is\n    True, returns data as `csv.DictReader`\n\nThis is a metadata object, and can be used to retrieve information about\nwhich reports are available.\n\n``` {.python}\n>>> pprint.pprint(rpts.metadata)\n{'reports': {...\n             'geo': {'Description': 'Standard Geo Report',\n                     'Name': 'Geo Report',\n                     'URI_Data': 'https://api.mediamath.com/reporting/v1/std/geo',\n                     'URI_Meta': 'https://api.mediamath.com/reporting/v1/std/geo/meta'},\n...}\n>>> pprint.pprint(rpts.metadata, depth=2)\n{'reports': {'audience_index': {...},\n             'audience_index_pixel': {...},\n             'day_part': {...},\n             'device_technology': {...},\n             'geo': {...},\n             'performance': {...},\n             'pulse': {...},\n             'reach_frequency': {...},\n             'site_transparency': {...},\n             'technology': {...},\n             'video': {...},\n             'watermark': {...}}}\n```\n\nYou can retrieve the URI stub of any report by calling\n`Report.report_uri`:\n\n``` {.python}\n>>> print(rpts.report_uri(\"geo\"))\n'geo'\n```\n\nWhich is just a short-cut to getting the final part of the path of\n`Report.metadata[report]['URI_Data']`. Getting the URI from the\nspecification is preferred to assuming that the name is the same as the\nstub. This is more directly applicable by instantiating the object for\nit:\n\n``` {.python}\n>>> report = t1.new(\"report\", rpts.report_uri(\"performance\"))\n```\n\nThe Reporting Service has two version of the API: `/reporting/v1/std` and `reporting-beta/v1/std/`. To call the `beta` version of reporting API:\n\n\n``` {.python}\n>>> rpts = t1.new(\"report\", version=\"beta\")\n```\n\n``` {.python}\n>>> report = t1.new(\"report\", rpts.report_uri(\"performance\"), version=\"beta\")\n```\n\nA short way to do it if the url is known:\n\n``` {.python}\n>>> report = t1.new( \"report\", \"deals?v1\", version=\"beta\" )\n\n```\n\n\nYou can access metadata about this report from the `Report.metadata`\nproperty as well. To get data, first set properties about the query with\n`Report.set`, and use the `Report.get` method, which returns a tuple\n`(headers, data)`.:\n\n``` {.python}\n>>> report.set({\n...     'dimensions': ['campaign_id', 'strategy_name'],\n...     'filter': {'campaign_id': 126173},\n...     'metrics': ['impressions', 'total_spend'],\n...     'time_rollup': 'by_day',\n...     'start_date': '2013-01-01',\n...     'end_date': '2013-12-31',\n...     'order': ['date'],\n... })\n>>> headers, data = report.get()\n>>> print(headers)\n['start_date', 'end_date', 'campaign_id', 'strategy_name', 'impressions']\n>>> for line in data:\n...     # do work on line\n...     print(line)\n...\n['2013-06-27', '2013-06-27', '126173', 'PS', '231']\n...\n```\n\n`headers` is a list of headers, while `data` is a `csv.reader` object.\nType casting is not present in the current version, but is tentatively\nplanned for a future date.\n\nMore information about these parameters can be found\n[here](https://mm-reports.api-docs.io/v1/welcome/introduction).\n\n### Appendix\n\nWhy don\\'t we import the object classes directly? For instance, why\ndoesn\\'t this work?\n\n``` {.python}\n>>> from terminalone import Campaign\n```\n\nThe answer here is that we need to keep a common session so that we can\nshare session information across requests. This allows you to work with\nmany objects, only passing in authentication information once.\n\n``` {.python}\n>>> t1 = T1(\"myusername\", \"mypassword\", \"my_api_key\")\n>>> t1.authenticate(\"cookie\")\n>>> c = t1.new(\"campaign\")\n>>> c.session is t1.session\nTrue\n```\n\nContact\n=======\n\nFor questions about either API workflow or this library, email\n[\\<developers\\@mediamath.com\\>\n\\<mailto:developers\\@mediamath.com\\>]{.title-ref}\\_\\_.\n\nCopyright\n=========\n\nCopyright MediaMath 2015-2017. All rights reserved.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.mediamath.com", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "TerminalOne", "package_url": "https://pypi.org/project/TerminalOne/", "platform": "any", "project_url": "https://pypi.org/project/TerminalOne/", "project_urls": {"Homepage": "http://www.mediamath.com"}, "release_url": "https://pypi.org/project/TerminalOne/1.9.11/", "requires_dist": null, "requires_python": "", "summary": "A package for interacting with MediaMath's TerminalOne API.", "version": "1.9.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TerminalOne-Python</h1>\n<p><a href=\"https://travis-ci.org/MediaMath/t1-python\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d99444d4d7ebb8088d45dbd1182802f84124ab96/68747470733a2f2f7472617669732d63692e6f72672f4d656469614d6174682f74312d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><a href=\"https://www.codacy.com/app/fsargent/t1-python?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=MediaMath/t1-python&amp;utm_campaign=badger\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4452c15573bcd6da71338e2abd35884b1c1af72/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3464633563633937356635613438303738663638393934643663353436653235\"></a></p>\n<p><a href=\"https://www.codacy.com/app/fsargent/t1-python?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=MediaMath/t1-python&amp;utm_campaign=Badge_Coverage\" rel=\"nofollow\"><img alt=\"Codacy Badge Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37b49ae22f012dce0dec0c5179d05a1829c84061/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f436f7665726167652f3464633563633937356635613438303738663638393934643663353436653235\"></a></p>\n<p>Python library for MediaMath's APIs. This library consists of classes\nfor working with T1 APIs and managing entities. It is written for Python\n2.7 and &gt;=3.3. Compatibility with Python 3 is made possible by bundling\nthe module <a href=\"https://pypi.python.org/pypi/six\" rel=\"nofollow\">six</a>.</p>\n<p>API Documentation is available at [&lt;https://apidocs.mediamath.com/&gt;\n&lt;https://apidocs.mediamath.com/&gt;]{.title-ref}__.</p>\n\n<ul>\n<li><a href=\"#terminalone-python\" rel=\"nofollow\">TerminalOne-Python</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#execution-and-management-api\" rel=\"nofollow\">Execution and Management API</a>\n<ul>\n<li><a href=\"#service-object\" rel=\"nofollow\">Service Object</a></li>\n<li><a href=\"#fetching-entities-and-collections\" rel=\"nofollow\">Fetching Entities and\nCollections</a></li>\n<li><a href=\"#collections\" rel=\"nofollow\">Collections</a></li>\n<li><a href=\"#searching-for-entities\" rel=\"nofollow\">Searching for entities</a></li>\n<li><a href=\"#entities\" rel=\"nofollow\">Entities</a></li>\n<li><a href=\"#child-entities\" rel=\"nofollow\">Child Entities</a></li>\n<li><a href=\"#reports\" rel=\"nofollow\">Reports</a></li>\n<li><a href=\"#appendix\" rel=\"nofollow\">Appendix</a></li>\n</ul>\n</li>\n</ul>\n\n<h1>Installation</h1>\n<p>Installation is simple with pip in a virtual environment:</p>\n<pre>$ pip install TerminalOne\n</pre>\n<p>Alternatively, download the latest tag of the repository as a tarball or\nzip file and run:</p>\n<pre>$ python setup.py install\n</pre>\n<h1>Execution and Management API</h1>\n<h2>Service Object</h2>\n<p><em>class</em> <code>terminalone.T1</code>(<em>username</em>=<code>None</code>, <em>password</em>=<code>None</code>,\n<em>api_key</em>=<code>None</code>, <em>client_secret</em>=<code>None</code>, <em>auth_method</em>=<code>None</code>,\n<em>session_id</em>=<code>None</code>, <em>environment</em>=<code>\"production\"</code>, <em>api_base</em>=<code>None</code>,\n<em>token</em>=<code>None</code>, <em>token_updater</em>=<code>None</code>)</p>\n<p>The starting point for this package. Authentication and session, entity\nretrieval, creation, etc. are handled here. Parameters:</p>\n<ul>\n<li><em>username</em>: Username of a valid T1 user (that is, valid at\n[&lt;https://t1.mediamath.com&gt;\n&lt;https://t1.mediamath.com&gt;]{.title-ref}__).</li>\n<li><em>password</em>: Password for corresponding T1 user</li>\n<li><em>api_key</em>: Approved API key generated at <a href=\"https://developer.mediamath.com\" rel=\"nofollow\">MediaMath's Developer\nPortal</a>.</li>\n<li><em>client_secret</em>: Client Secret for use with OAuth2 authentication</li>\n<li><em>session_id</em>: For applications receiving a session ID instead of\nuser credentials, such as an app in T1's Apps tab. <em>api_key</em>\nshould still be provided.</li>\n<li><em>auth_method</em>: string enum corresponding to which method of\nauthentication the session to use. Currently \"cookie\" and\n\"oauth2\" are supported. The auth method will usually be detected,\nso this can be ommitted. (Omission new in v1.2.0!)</li>\n<li><em>token</em>: dict OAuth2 token as generated by the session. If you have\na web app, you can store the token in the browser session, and then\nuse that to generate a new T1 session. See the documentation for\nexamples.</li>\n<li><em>token_updater</em>: function with one argument, token, to be used to\nupdate your token databse on automatic token refresh. If not\nprovided, a TokenUpdated warning will be raised when a token has\nbeen refreshed. This warning will carry the token in its token\nargument.</li>\n<li>Either <em>environment</em> or <em>api_base</em> can be provided to specify where\nthe request goes.</li>\n</ul>\n<p>T1-Python includes support for resource-owner code grant. Include a\nclient ID and secret alongside your credentials:</p>\n<pre>&gt;&gt;&gt; t1 = T1(auth_method='oauth2-resourceowner', client_id=\"my_client_id\", client_secret=\"my_secret\", username=\"my@user\", password=\"mypass\")\n</pre>\n<p>If you already have a valid access token (e.g. by following the authorization code flow - outside this library), you can also pass it in order to get authenticated:</p>\n<pre>&gt;&gt;&gt; t1 = t1 = terminalone.T1(access_token=token, environment=environment, auth_method='oauth2-existingaccesstoken', json=True)\n</pre>\n<p>If you have a specific API base (for instance, if you are testing\nagainst a sandbox deployment) (<em>Note</em>: sandbox environments are not yet\nuseable), you can use the <code>api_base</code> keyword with the <em>domain</em>. For\nproduction endpoints, neither <code>environment</code> nor <code>api_base</code> should be\nprovided:</p>\n<pre>&gt;&gt;&gt; t1 = terminalone.T1(\"myusername\", \"mypassword\", \"my_api_key\", api_base=\"myqaserver.domain.com\", auth_method=\"cookie\")\n</pre>\n<p>If you are receiving a (cloned) session ID, for instance the norm for\napps, you will not have user credentials to log in with. Instead,\nprovide the session ID and API key:</p>\n<pre>&gt;&gt;&gt; t1 = terminalone.T1(session_id=\"13ea5a26e77b64e7361c7ef84910c18a8d952cf0\", api_key=\"my_api_key\")\n</pre>\n<p>Cookie Auth (username/password) exists, but it is not recommended for\nuse.</p>\n<pre>&gt;&gt;&gt; import terminalone\n&gt;&gt;&gt; t1 = terminalone.T1(\"myusername\", \"mypassword\")\n</pre>\n<h2>Fetching Entities and Collections</h2>\n<p>Entity and collection retrieval. Parameters:</p>\n<p><code>T1.get</code>(<em>collection</em>, <em>entity</em>=<code>None</code>, <em>child</em>=<code>None</code>, <em>limit</em>=<code>None</code>,\n<em>include</em>=<code>None</code>, <em>full</em>=<code>None</code>, <em>page_limit</em>=<code>100</code>,\n<em>page_offset</em>=<code>0</code>, <em>sort_by</em>=<code>\"id\"</code>, <em>get_all</em>=<code>False</code>,\n<em>parent</em><code>None</code>, <em>query</em>=<code>None</code>, <em>count</em>=<code>False</code>)</p>\n<ul>\n<li><em>collection</em>: T1 collection, e.g. <code>\"advertisers\"</code></li>\n<li><em>entity</em>: Integer ID of entity being retrieved from T1</li>\n<li><em>child</em>: Child object of a particular entity, e.g. <code>\"dma\"</code>, <code>\"acl\"</code></li>\n<li><em>limit</em>: dict to query for relation entity, e.g.\n<code>{\"advertiser\": 123456}</code></li>\n<li><em>include</em>: str/list of relations:\n<ul>\n<li>string, e.g.\n<ul>\n<li><code>T1.get('advertiser', include='agency')</code></li>\n</ul>\n</li>\n<li>list of <em>lateral</em> (non-hierarchical) relations, e.g.\n<ul>\n<li><code>T1.get('advertiser', include=['agency', 'ad_server'])</code></li>\n</ul>\n</li>\n<li>list of list/strings of <em>hierarchical</em> relations, e.g.\n<ul>\n<li><code>T1.get('advertiser', include=[['agency', 'organization'],]</code></li>\n<li><code>T1.get('advertiser', include=[['agency', 'organization'], 'ad_server']</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><em>full</em>: When retrieving multiple entities, specifies which types to\nreturn the full record for. e.g.\n<ul>\n<li><code>\"campaign\"</code> (full record for campaign entities returned)</li>\n<li><code>True</code> (full record of all entities returned),</li>\n<li><code>[\"campaign\", \"advertiser\"]</code> (full record for campaigns and\nadvertisers returned)</li>\n</ul>\n</li>\n<li><em>page_limit</em> and <em>page_offset</em> handle pagination. <em>page_limit</em>\nspecifies how many entities to return at a time, default and max of\n100. <em>page_offset</em> specifies which entity to start at for that\npage.</li>\n<li><em>sort_by</em>: sort order. Default <code>\"id\"</code>. e.g. <code>\"-id\"</code>, <code>\"name\"</code></li>\n<li><em>get_all</em>: Whether to retrieve all results for a query or just a\nsingle page. Mutually exclusive with <em>page_limit</em>/<em>page_offset</em></li>\n<li><em>parent</em>: Only return entities with this <code>parent_id</code>. Used for\n<code>audience_segments</code>.</li>\n<li><em>query</em>: Search parameters. <em>Note</em>: it's much simpler to use <code>find</code>\ninstead of <code>get</code>, allowing <code>find</code> to construct the query.</li>\n<li><em>count</em>: bool return the number of entities as a second parameter</li>\n<li><em>other_params</em>: dict of additional, service-specific parameters to\nbe passed.</li>\n</ul>\n<p>| Raises: <code>terminalone.errors.ClientError</code> if <em>page_limit</em> &gt; 100,\n<code>terminalone.errors.APIError</code> on &gt;399 HTTP status code.\n| Returns: If single entity is specified, returns a single entity\nobject. If multiple entities, generator yielding each entity.</p>\n<h3>Collections</h3>\n<pre>&gt;&gt;&gt; advertisers = t1.get(\"advertisers\")\n&gt;&gt;&gt; for advertiser in advertisers:\n...     print(advertiser)\n...\nAdvertiser(id=1, name=\"My Brand Advertiser\", _type=\"advertiser\")\n</pre>\n<p>Returns generator over the first 100 advertisers (or fewer if the user\nonly has access to fewer), ordered ascending by ID. Each entity is the\nlimited object, containing just <code>id</code>, <code>name</code>, and <code>_type</code> (<code>_type</code> just\nsignifies the type returned by the API, in this case, \"advertiser\").</p>\n<pre>&gt;&gt;&gt; ag_advertisers = t1.get(\"advertisers\",\n...                         limit={\"agency\": 123456},\n...                         include=\"agency\",\n...                         full=\"advertiser\")\n&gt;&gt;&gt; for advertiser in ag_advertisers:\n...     print(advertiser)\n...\nAdvertiser(id=1, name=\"My Brand Advertiser\", agency=Agency(id=123456, name=\"Operating Agency\", _type=\"agency\"), agency_id=123456, status=True, ...)\n</pre>\n<p>Generator over up to 100 advertisers within agency ID 123456. Each\nadvertiser includes its parent agency object as an attribute. The\nadvertiser objects are the full entities, so all fields are returned.\nAgency objects are limited and have the same fields as advertisers in\nthe previous example.</p>\n<pre>&gt;&gt;&gt; campaigns, count = t1.get(\"campaigns\",\n...                           get_all=True,\n...                           full=True,\n...                           sort_by=\"-updated_on\")\n&gt;&gt;&gt; print(count)\n539\n&gt;&gt;&gt; for campaign in campaigns:\n...     print(campaign)\nCampaign(id=123, name=\"Summer Acquisition\", updated_on=datetime.datetime(2015, 4, 4, 0, 15, 0, 0), ...)\nCampaign(id=456, name=\"Spring Acquisition\", updated_on=datetime.datetime(2015, 4, 4, 0, 10, 0, 0), ...)\n...\n</pre>\n<p>Generator over every campaign accessible by the user, sorted in\ndescending order of last update. Second argument is integer number of\ncampaigns retrieved, as returned by the API. <code>get_all=True</code> removes the\nneed to worry about pagination ---\u00a0it is handled by the SDK internally.</p>\n<pre>&gt;&gt;&gt; _, count = t1.get(\"advertisers\",\n...                   page_limit=1,\n...                   count=True)\n&gt;&gt;&gt; print(count)\n23\n</pre>\n<p>Sole purpose is to get the count of advertisers accessible by the user.\nUse <code>page_limit=1</code> to minimize unnecessary resources, and assign to <code>_</code>\nto throw away the single entity retrieved.</p>\n<h3>Searching for entities</h3>\n<p>Limiting entities by relation ID is one way to limit entities, but we\ncan also search with more intricate queries using <code>find</code>:</p>\n<p><code>T1.find</code>(<em>collection</em>, <em>variable</em>, <em>operator</em>, <em>candidates</em>,\n**<em>kwargs</em>)</p>\n<ul>\n<li><em>collection</em>: T1 collection, same use as with <code>get</code></li>\n<li><em>variable</em>: Field to query for, e.g. <code>name</code></li>\n<li><em>operator</em>: Arithmetic operator, e.g. <code>\"&lt;\"</code></li>\n<li><em>candidates</em>: Query value, e.g. <code>\"jonsmith*\"</code></li>\n<li><em>kwargs</em>: Additional keyword arguments to pass onto <code>get</code>. All\nkeyword arguments applicable for <code>get</code> are applicable here as well.</li>\n</ul>\n<p><em>module</em> <code>terminalone.filters</code></p>\n<ul>\n<li><code>IN</code></li>\n<li><code>NULL</code></li>\n<li><code>NOT_NULL</code></li>\n<li><code>EQUALS</code></li>\n<li><code>NOT_EQUALS</code></li>\n<li><code>GREATER</code></li>\n<li><code>GREATER_OR_EQUAL</code></li>\n<li><code>LESS</code></li>\n<li><code>LESS_OR_EQUAL</code></li>\n<li><code>CASE_INS_STRING</code></li>\n</ul>\n<pre>&gt;&gt;&gt; greens = t1.find(\"atomic_creatives\",\n...                  \"name\",\n...                  terminalone.filters.CASE_INS_STRING,\n...                  \"*Green*\",\n...                  include=\"concept\",\n...                  get_all=True)\n</pre>\n<p>Generator over all creatives with \"Green\" in the name. Include\nconcept.</p>\n<pre>&gt;&gt;&gt; my_campaigns = t1.find(\"campaigns\",\n...                       \"id\",\n...                       terminalone.filers.IN,\n...                       [123, 234, 345],\n...                       full=True)\n</pre>\n<p>Generator over campaign IDs 123, 234, and 345. Note that when using\n<code>terminalone.filers.IN</code>, <em>variable</em> is automatically ID, so that\nargument is effectively ignored. Further, <em>candidates</em> must be a list of\ninteger IDs.</p>\n<pre>&gt;&gt;&gt; pixels = t1.find(\"pixel_bundles\",\n...                  \"keywords\",\n...                  terminalone.filters.NOT_NULL,\n...                  None)\n</pre>\n<p>Generator over first 100 pixels with non-null keywords field.</p>\n<pre>&gt;&gt;&gt; strats = t1.find(\"strategies\",\n...                  \"status\",\n...                  terminalone.filters.EQUALS,\n...                  True,\n...                  limit={\"campaign\": 123456})\n</pre>\n<p>Active strategies within campaign ID 123456.</p>\n<h3>Entities</h3>\n<p>A specific entity can be retrieved by using <code>get</code> with an entity ID as\nthe second argument, or using the <code>entity</code> keyword. You can then access\nthat entity's properties using instance attributes:</p>\n<pre>&gt;&gt;&gt; my_advertiser = t1.get(\"advertisers\", 111111)\n&gt;&gt;&gt; my_advertiser.id\n111111\n</pre>\n<p><em>class</em> <code>terminalone.Entity</code></p>\n<ul>\n<li><code>set(properties)</code> Set all data in mapping object <code>properties</code> to the\nentity.</li>\n<li><code>save(data=None)</code></li>\n</ul>\n<p>: Save the entity. If <code>data</code> is provided, send that. Typically used with\nno arguments.</p>\n<p>(<em>Note: you will typically interact with subclasses, not ``Entity``\nitself</em>)</p>\n<p>If for some reason you need to access the object like a dictionary (for\ninstance, if you need to iterate over fields or dump to a CSV), the\nmethod <code>get_properties()</code> is available. However, you shouldn't modify\n<code>_properties</code> directly, as it will cause incorrect behaviour.</p>\n<p>Once you have your instance, you can modify its values, and then save it\nback. A return value of <code>None</code> indicates success. Otherwise, an error is\nraised.</p>\n<pre>&gt;&gt;&gt; my_advertiser.name = \"Updated name\"\n&gt;&gt;&gt; my_advertiser.save()\n&gt;&gt;&gt;\n</pre>\n<p>Create new entities by calling <code>T1.new</code> on your instance.</p>\n<p><code>T1.new</code>(<em>collection</em>, <em>report=None</em>, <em>properties=None</em>)</p>\n<ul>\n<li><em>collection</em>: T1 collection, same as above</li>\n<li><em>report</em>: New report object; discussed in <a href=\"#reports\" rel=\"nofollow\">Reports</a></li>\n<li><em>properties</em>: Properties to pass into new object.</li>\n</ul>\n<pre>&gt;&gt;&gt; new_properties = {\n...     \"name\": \"Spring Green\",\n...     \"status\": True,\n... }\n&gt;&gt;&gt; new_concept = t1.new(\"concept\", properties=new_properties)\n&gt;&gt;&gt; new_concept.advertiser_id = 123456\n&gt;&gt;&gt; new_concept.save()\n&gt;&gt;&gt;\n</pre>\n<p><code>properties</code> is an optional mapping object with properties to get passed\nin. You can use a string representation of the object (such as\n<code>\"concept\"</code> above); or, you can use the object itself from\n<code>terminalone.models</code>:</p>\n<pre>&gt;&gt;&gt; new_concept = t1.new(terminalone.models.Concept, properties=new_properties)\n&gt;&gt;&gt; \n</pre>\n<h3>Child Entities</h3>\n<p>To retrieve child entities (for instance, <code>/users/:id/permissions</code>),\ninclude the <code>child</code> argument in a call to <code>T1.get</code>:</p>\n<pre>&gt;&gt;&gt; permissions = t1.get(\"users\", 1, child=\"permissions\")\n</pre>\n<h2>Reports</h2>\n<p>To use MediaMath's Reports API instantiate an instance with <code>T1.new</code>:</p>\n<pre>&gt;&gt;&gt; rpts = t1.new(\"report\")\n</pre>\n<p><em>class</em> <code>terminalone.Report</code></p>\n<ul>\n<li><code>metadata</code> Metadata of reports available or of individual report.\nCalculated on first call (API request made); cached for future\ncalls.</li>\n<li><code>parameters</code> Dictionary of request parameters</li>\n<li><code>set(data)</code> Set request parameters with a mapping object <code>data</code></li>\n<li><code>report_uri(report)</code> Get URI stub for report</li>\n<li><code>get(as_dict=False)</code> Get report data (requires calling <code>T1.new</code> with\na report name). Returns headers and <code>csv.reader</code>. If <code>as_dict</code> is\nTrue, returns data as <code>csv.DictReader</code></li>\n</ul>\n<p>This is a metadata object, and can be used to retrieve information about\nwhich reports are available.</p>\n<pre>&gt;&gt;&gt; pprint.pprint(rpts.metadata)\n{'reports': {...\n             'geo': {'Description': 'Standard Geo Report',\n                     'Name': 'Geo Report',\n                     'URI_Data': 'https://api.mediamath.com/reporting/v1/std/geo',\n                     'URI_Meta': 'https://api.mediamath.com/reporting/v1/std/geo/meta'},\n...}\n&gt;&gt;&gt; pprint.pprint(rpts.metadata, depth=2)\n{'reports': {'audience_index': {...},\n             'audience_index_pixel': {...},\n             'day_part': {...},\n             'device_technology': {...},\n             'geo': {...},\n             'performance': {...},\n             'pulse': {...},\n             'reach_frequency': {...},\n             'site_transparency': {...},\n             'technology': {...},\n             'video': {...},\n             'watermark': {...}}}\n</pre>\n<p>You can retrieve the URI stub of any report by calling\n<code>Report.report_uri</code>:</p>\n<pre>&gt;&gt;&gt; print(rpts.report_uri(\"geo\"))\n'geo'\n</pre>\n<p>Which is just a short-cut to getting the final part of the path of\n<code>Report.metadata[report]['URI_Data']</code>. Getting the URI from the\nspecification is preferred to assuming that the name is the same as the\nstub. This is more directly applicable by instantiating the object for\nit:</p>\n<pre>&gt;&gt;&gt; report = t1.new(\"report\", rpts.report_uri(\"performance\"))\n</pre>\n<p>The Reporting Service has two version of the API: <code>/reporting/v1/std</code> and <code>reporting-beta/v1/std/</code>. To call the <code>beta</code> version of reporting API:</p>\n<pre>&gt;&gt;&gt; rpts = t1.new(\"report\", version=\"beta\")\n</pre>\n<pre>&gt;&gt;&gt; report = t1.new(\"report\", rpts.report_uri(\"performance\"), version=\"beta\")\n</pre>\n<p>A short way to do it if the url is known:</p>\n<pre>&gt;&gt;&gt; report = t1.new( \"report\", \"deals?v1\", version=\"beta\" )\n</pre>\n<p>You can access metadata about this report from the <code>Report.metadata</code>\nproperty as well. To get data, first set properties about the query with\n<code>Report.set</code>, and use the <code>Report.get</code> method, which returns a tuple\n<code>(headers, data)</code>.:</p>\n<pre>&gt;&gt;&gt; report.set({\n...     'dimensions': ['campaign_id', 'strategy_name'],\n...     'filter': {'campaign_id': 126173},\n...     'metrics': ['impressions', 'total_spend'],\n...     'time_rollup': 'by_day',\n...     'start_date': '2013-01-01',\n...     'end_date': '2013-12-31',\n...     'order': ['date'],\n... })\n&gt;&gt;&gt; headers, data = report.get()\n&gt;&gt;&gt; print(headers)\n['start_date', 'end_date', 'campaign_id', 'strategy_name', 'impressions']\n&gt;&gt;&gt; for line in data:\n...     # do work on line\n...     print(line)\n...\n['2013-06-27', '2013-06-27', '126173', 'PS', '231']\n...\n</pre>\n<p><code>headers</code> is a list of headers, while <code>data</code> is a <code>csv.reader</code> object.\nType casting is not present in the current version, but is tentatively\nplanned for a future date.</p>\n<p>More information about these parameters can be found\n<a href=\"https://mm-reports.api-docs.io/v1/welcome/introduction\" rel=\"nofollow\">here</a>.</p>\n<h3>Appendix</h3>\n<p>Why don't we import the object classes directly? For instance, why\ndoesn't this work?</p>\n<pre>&gt;&gt;&gt; from terminalone import Campaign\n</pre>\n<p>The answer here is that we need to keep a common session so that we can\nshare session information across requests. This allows you to work with\nmany objects, only passing in authentication information once.</p>\n<pre>&gt;&gt;&gt; t1 = T1(\"myusername\", \"mypassword\", \"my_api_key\")\n&gt;&gt;&gt; t1.authenticate(\"cookie\")\n&gt;&gt;&gt; c = t1.new(\"campaign\")\n&gt;&gt;&gt; c.session is t1.session\nTrue\n</pre>\n<h1>Contact</h1>\n<p>For questions about either API workflow or this library, email\n[&lt;<a href=\"mailto:developers@mediamath.com\">developers@mediamath.com</a>&gt;\n&lt;mailto:<a href=\"mailto:developers@mediamath.com\">developers@mediamath.com</a>&gt;]{.title-ref}__.</p>\n<h1>Copyright</h1>\n<p>Copyright MediaMath 2015-2017. All rights reserved.</p>\n\n          </div>"}, "last_serial": 6962551, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1f456d218f8752a0faaff83e28628e45", "sha256": "05997a4c8f1af025c77442a0224d53e7a1bffcade44e07af7d23390b78c76152"}, "downloads": -1, "filename": "TerminalOne-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1f456d218f8752a0faaff83e28628e45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46095, "upload_time": "2015-07-09T19:02:42", "upload_time_iso_8601": "2015-07-09T19:02:42.610434Z", "url": "https://files.pythonhosted.org/packages/d5/e0/113ece29d7c1755d39d7ed000eb39355963bc2792723b6f1cfff681ddc36/TerminalOne-1.0.0.tar.gz", "yanked": false}], "1.0.1": [], "1.0.2": [{"comment_text": "", "digests": {"md5": "39985e1ed40402e2d6f55288e39fc54a", "sha256": "9e823aceefcb9fbe7cc67aa1bba25a0b7fd6a4ef6c1cbf86d6f3c29f10bd9d41"}, "downloads": -1, "filename": "TerminalOne-1.0.2.tar.gz", "has_sig": false, "md5_digest": "39985e1ed40402e2d6f55288e39fc54a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47051, "upload_time": "2015-07-16T13:55:54", "upload_time_iso_8601": "2015-07-16T13:55:54.354471Z", "url": "https://files.pythonhosted.org/packages/b5/6c/05c45fc21306470c6da80da76457dc234633845e605c209e398da2b3a75f/TerminalOne-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "d53df0d5b9cb97e00a4c5b1be8ca7c0f", "sha256": "214f19bd3fc81c39c4d069714690c49d1301fe8379b6ec5f4dd6b85485ba6b43"}, "downloads": -1, "filename": "TerminalOne-1.0.3.tar.gz", "has_sig": false, "md5_digest": "d53df0d5b9cb97e00a4c5b1be8ca7c0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47239, "upload_time": "2015-07-28T20:56:10", "upload_time_iso_8601": "2015-07-28T20:56:10.167314Z", "url": "https://files.pythonhosted.org/packages/3a/62/f05a1c95df70ab5b5cf3cc808ba4fa958fee45ab6718b1295297d857d3f2/TerminalOne-1.0.3.tar.gz", "yanked": false}], "1.0.3a1": [{"comment_text": "", "digests": {"md5": "2ff082d5a123dd0830a1a0881ecf6587", "sha256": "b55274a5d799ef923b426ccdd5e7c0ed2fdd9f22816a5a9d957697e0d9e909d8"}, "downloads": -1, "filename": "TerminalOne-1.0.3a1.tar.gz", "has_sig": false, "md5_digest": "2ff082d5a123dd0830a1a0881ecf6587", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47245, "upload_time": "2015-07-28T20:46:40", "upload_time_iso_8601": "2015-07-28T20:46:40.775876Z", "url": "https://files.pythonhosted.org/packages/fb/87/8854503e9895a8284ef67a2d9ca35e5d2ec4edb81033bf0c35fcc0e3ed59/TerminalOne-1.0.3a1.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "9c2f3b45d87195d8620c39db34099f70", "sha256": "a7e80caf75e4fe9a76358d6305c2fda5c7114c8816bb342736d98f72949c512c"}, "downloads": -1, "filename": "TerminalOne-1.0.4.tar.gz", "has_sig": false, "md5_digest": "9c2f3b45d87195d8620c39db34099f70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48921, "upload_time": "2015-08-28T18:13:20", "upload_time_iso_8601": "2015-08-28T18:13:20.540620Z", "url": "https://files.pythonhosted.org/packages/5c/fd/d9af650a6203d3a76921d9b20ed6728c445ed8bbddaf997938c461735dcd/TerminalOne-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "2274aa83f0779bc2c3fd46ddecabc330", "sha256": "5c8868cc59519a70c48e0d111611779bfaab54871364fbb74734d84041ed13d7"}, "downloads": -1, "filename": "TerminalOne-1.0.5.tar.gz", "has_sig": false, "md5_digest": "2274aa83f0779bc2c3fd46ddecabc330", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49597, "upload_time": "2015-10-06T23:16:45", "upload_time_iso_8601": "2015-10-06T23:16:45.228878Z", "url": "https://files.pythonhosted.org/packages/3e/7d/5d5a479827bec632cabb4df4457d35581725dd6c843019d982317880cbfa/TerminalOne-1.0.5.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "b6e00946110b692be41838c3047969fa", "sha256": "94a47aecbb5322ef36882f5c4db5e06203764828ca210ca73b7ec4e4f84ff6cd"}, "downloads": -1, "filename": "TerminalOne-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b6e00946110b692be41838c3047969fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52032, "upload_time": "2015-11-06T22:48:16", "upload_time_iso_8601": "2015-11-06T22:48:16.735117Z", "url": "https://files.pythonhosted.org/packages/b8/1f/5a10a10d508324621c0751bb937cf59ac58110db7605f4e6410410fcc110/TerminalOne-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "4d0247b27de02de4a54bf32b258ab915", "sha256": "4f210397a0a7eef27692f7887b84a0078e8e18802fb8dd424abac3967293ab64"}, "downloads": -1, "filename": "TerminalOne-1.1.1.tar.gz", "has_sig": false, "md5_digest": "4d0247b27de02de4a54bf32b258ab915", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52062, "upload_time": "2015-12-02T16:52:45", "upload_time_iso_8601": "2015-12-02T16:52:45.982859Z", "url": "https://files.pythonhosted.org/packages/bd/a7/5737a10129b86443744af3de3b9255c49c938dd114373f228446253c8ad4/TerminalOne-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "0f54b4c8c2f45157004c4309110f144c", "sha256": "ddd7999af013ae09d33323b6ef20effc7ec1145984a411be6b98df67fb62f2b9"}, "downloads": -1, "filename": "TerminalOne-1.1.2.tar.gz", "has_sig": false, "md5_digest": "0f54b4c8c2f45157004c4309110f144c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52678, "upload_time": "2016-01-25T20:55:33", "upload_time_iso_8601": "2016-01-25T20:55:33.093552Z", "url": "https://files.pythonhosted.org/packages/da/31/13bfbae61031ab46a155021211231710e4c7808861ed605c299601f8df75/TerminalOne-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "69212e9e2a90b8faff4d726cd388876c", "sha256": "115e693d522fb35efe23a98237f8df11508efd6602dd8a5fdd610c7d213a26ee"}, "downloads": -1, "filename": "TerminalOne-1.1.3.tar.gz", "has_sig": false, "md5_digest": "69212e9e2a90b8faff4d726cd388876c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52708, "upload_time": "2016-02-03T17:27:12", "upload_time_iso_8601": "2016-02-03T17:27:12.661328Z", "url": "https://files.pythonhosted.org/packages/48/f0/ba7a10683f4607d3be16c534c7c4abcb548004526820d54ac9c945499aa1/TerminalOne-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "47e9e239383fe6d2d0e1583e1d50e383", "sha256": "c4e39a296cbb2f090f84e1953eaa72b8ba4b87648024fbe65b7104e29fb26b04"}, "downloads": -1, "filename": "TerminalOne-1.1.4.tar.gz", "has_sig": false, "md5_digest": "47e9e239383fe6d2d0e1583e1d50e383", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53425, "upload_time": "2016-02-05T17:59:50", "upload_time_iso_8601": "2016-02-05T17:59:50.963375Z", "url": "https://files.pythonhosted.org/packages/39/38/a3b2ac4296a5c1813a2f93dfbb35515ae4e032ccb82779a5e03ccfd83cad/TerminalOne-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "7c1698bcace40219144ee8ca2a8b377b", "sha256": "67bc81b3eb0e73b6c1b2d547bc9d8d929708b49d89e4c9db78eafb8b3506db27"}, "downloads": -1, "filename": "TerminalOne-1.1.5.tar.gz", "has_sig": false, "md5_digest": "7c1698bcace40219144ee8ca2a8b377b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53687, "upload_time": "2016-03-18T16:35:27", "upload_time_iso_8601": "2016-03-18T16:35:27.117368Z", "url": "https://files.pythonhosted.org/packages/af/5a/09497a4029f7cc75f35dcb9fdc3d6aab3e81d84156d1cdf702eed3c357a9/TerminalOne-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "146a6b0237709aafdbbe6f8f57453d2d", "sha256": "485c2268f413ff602c394b06f4773c64dedf054812fae13d0807cf0c26af6cf6"}, "downloads": -1, "filename": "TerminalOne-1.1.6.tar.gz", "has_sig": false, "md5_digest": "146a6b0237709aafdbbe6f8f57453d2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54973, "upload_time": "2016-04-18T20:33:29", "upload_time_iso_8601": "2016-04-18T20:33:29.458169Z", "url": "https://files.pythonhosted.org/packages/1c/e4/2ab1679b4432175af9d544b999b3e87f6cd2ef51627d9d93761d626c3e84/TerminalOne-1.1.6.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "b3d755db3f8178901456839fe63f6703", "sha256": "d5999e313c3c459a7974104085c78f604bb77c8abede9c3e7ab72d2bd356be7c"}, "downloads": -1, "filename": "TerminalOne-1.2.0.tar.gz", "has_sig": false, "md5_digest": "b3d755db3f8178901456839fe63f6703", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57776, "upload_time": "2016-05-06T19:37:13", "upload_time_iso_8601": "2016-05-06T19:37:13.844280Z", "url": "https://files.pythonhosted.org/packages/db/d6/8e3e6bafb336822a006311681e5198653608a449b953af9f70a7127e1b89/TerminalOne-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "8d8fd36268ca1f0f446345fd2f2ac1a8", "sha256": "f3ebeae485804fa5e0208cac0e16416d5c13d498716c34dd8d3cd91301e87921"}, "downloads": -1, "filename": "TerminalOne-1.2.1.tar.gz", "has_sig": false, "md5_digest": "8d8fd36268ca1f0f446345fd2f2ac1a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57808, "upload_time": "2016-05-12T15:03:21", "upload_time_iso_8601": "2016-05-12T15:03:21.902685Z", "url": "https://files.pythonhosted.org/packages/dc/cf/f34524a9d94d2729d4825799a7ad87595308c51dafc313a51a5803f4a100/TerminalOne-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "139452570eeb1921f61505a9fda26418", "sha256": "e90dadb93efdf53e51d7b8c77e84342ad360e063ce0adcb3c7a1cd12b1c1e5b9"}, "downloads": -1, "filename": "TerminalOne-1.2.2.tar.gz", "has_sig": false, "md5_digest": "139452570eeb1921f61505a9fda26418", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57824, "upload_time": "2016-06-10T15:39:57", "upload_time_iso_8601": "2016-06-10T15:39:57.334220Z", "url": "https://files.pythonhosted.org/packages/02/45/4459b840a34f6f8d60adc3819dd8638654fc570a3d5b0e81bf4f65a37c76/TerminalOne-1.2.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "3c2a20e49028e3c6e0ee47c53990062b", "sha256": "5a7437ead83342349bc4f41777709d16c4dcd85518c2eb8f1003a7e5de4780bf"}, "downloads": -1, "filename": "TerminalOne-1.3.0.tar.gz", "has_sig": false, "md5_digest": "3c2a20e49028e3c6e0ee47c53990062b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57762, "upload_time": "2016-08-15T21:00:01", "upload_time_iso_8601": "2016-08-15T21:00:01.619380Z", "url": "https://files.pythonhosted.org/packages/11/77/d17f989bbc1fc8774603144885a49094b1c92e50506b0894c0c1af460376/TerminalOne-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "8059d3861d8857c1582c075e5ef0daa6", "sha256": "b1e8d0022445e9cfcf7108e63cc3e93a1c0b44fc2b59f27e2c239aefc4760e7a"}, "downloads": -1, "filename": "TerminalOne-1.3.1.tar.gz", "has_sig": false, "md5_digest": "8059d3861d8857c1582c075e5ef0daa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57770, "upload_time": "2016-08-16T18:23:57", "upload_time_iso_8601": "2016-08-16T18:23:57.652951Z", "url": "https://files.pythonhosted.org/packages/c9/f2/163a35d3475bd3c2ee2df955556b620ecf631651752e1fcf53302a8b5064/TerminalOne-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "2a141d247fb62a910bebff7b72202ae3", "sha256": "16b309d37dd069929f4ea7de0f13a931e2e09e0c9ea2647de3c9751647715451"}, "downloads": -1, "filename": "TerminalOne-1.4.0.tar.gz", "has_sig": false, "md5_digest": "2a141d247fb62a910bebff7b72202ae3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59656, "upload_time": "2016-10-04T09:45:03", "upload_time_iso_8601": "2016-10-04T09:45:03.229591Z", "url": "https://files.pythonhosted.org/packages/b8/17/ea273ecd1455955ab8281d5ccf3253bd879555201dae404296ebf4e125fc/TerminalOne-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "073eb888c0d73031251e365293701a6d", "sha256": "c91a94e7e9705bb3e904a313fa38845fcb6733e8209ef7fc937d55b727fab97c"}, "downloads": -1, "filename": "TerminalOne-1.4.1.tar.gz", "has_sig": false, "md5_digest": "073eb888c0d73031251e365293701a6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59748, "upload_time": "2016-10-07T14:07:39", "upload_time_iso_8601": "2016-10-07T14:07:39.177750Z", "url": "https://files.pythonhosted.org/packages/2c/87/524ed3f3d00bbaa2b6b646099121382ed8823eacccb37005e76260fd576b/TerminalOne-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "43c2946f3584f59f4691228704ab10b1", "sha256": "26711ff9a07972b3464bf0fdb9aa8dc1f46e7feb2a83f5c87d603a96f6bfe3d4"}, "downloads": -1, "filename": "TerminalOne-1.4.2.tar.gz", "has_sig": false, "md5_digest": "43c2946f3584f59f4691228704ab10b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59659, "upload_time": "2016-10-19T10:19:59", "upload_time_iso_8601": "2016-10-19T10:19:59.904788Z", "url": "https://files.pythonhosted.org/packages/e3/b6/9429795b8b449f9ea1e02cdad55044d8368fb003acc9049f8839444dc30e/TerminalOne-1.4.2.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "3c7b58995c3d1eafbbfce2156c2173d4", "sha256": "c4cf8c7472bd566c7d5057ada6a0870b15e1f12b32dde7173188bb87e68a0b4a"}, "downloads": -1, "filename": "TerminalOne-1.4.3.tar.gz", "has_sig": false, "md5_digest": "3c7b58995c3d1eafbbfce2156c2173d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59871, "upload_time": "2016-10-25T16:45:50", "upload_time_iso_8601": "2016-10-25T16:45:50.727423Z", "url": "https://files.pythonhosted.org/packages/53/b7/b8b2b07f9b8ffbccf2ec679c01ca1865ee51fb248f9060d14a13c6f59fa3/TerminalOne-1.4.3.tar.gz", "yanked": false}], "1.4.4": [{"comment_text": "", "digests": {"md5": "1d41bdc14fa9b936e680f7e0cd28bcd3", "sha256": "333820f2672917755dbbfac51fcd52e2bb11c26813aa7b7d98ea1ee56048d055"}, "downloads": -1, "filename": "TerminalOne-1.4.4.tar.gz", "has_sig": false, "md5_digest": "1d41bdc14fa9b936e680f7e0cd28bcd3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59823, "upload_time": "2016-11-08T16:30:30", "upload_time_iso_8601": "2016-11-08T16:30:30.477383Z", "url": "https://files.pythonhosted.org/packages/d9/ae/40e3e2b3f4c0f94725195c4fe736adc92b1370dcd643a0521a3046ad1155/TerminalOne-1.4.4.tar.gz", "yanked": false}], "1.4.5": [{"comment_text": "", "digests": {"md5": "5b99b2cecbfd0071a2f4ebbf57f9ae7a", "sha256": "269a089a88a4f67b6d26b72fffdf64e4a42ac3d2dc8b2071d86facb1d8d8ee80"}, "downloads": -1, "filename": "TerminalOne-1.4.5_1.tar.gz", "has_sig": false, "md5_digest": "5b99b2cecbfd0071a2f4ebbf57f9ae7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59816, "upload_time": "2016-11-09T16:57:57", "upload_time_iso_8601": "2016-11-09T16:57:57.086713Z", "url": "https://files.pythonhosted.org/packages/e9/ad/000f4bf1b268f6b05a17387530d0ff1716be322cbaf78ba25b92ee31a406/TerminalOne-1.4.5_1.tar.gz", "yanked": false}], "1.4.6": [{"comment_text": "", "digests": {"md5": "cbf03f725ca4c585e7a327d833f9dbe4", "sha256": "1512e45b7cc71c5d13008f8b389eee09758fb93eacc9f11fc54b6f5285b90e12"}, "downloads": -1, "filename": "TerminalOne-1.4.6.tar.gz", "has_sig": false, "md5_digest": "cbf03f725ca4c585e7a327d833f9dbe4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59819, "upload_time": "2016-11-09T17:26:22", "upload_time_iso_8601": "2016-11-09T17:26:22.426018Z", "url": "https://files.pythonhosted.org/packages/7a/6f/ad89058045b761ae2cdacff4b724db5bd8bfd167085fb28d5b3e5ef4f00b/TerminalOne-1.4.6.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "5da880dbb5ff8e13730a164981e830a5", "sha256": "dd78c53e850563770f21e6b61cf50084989f7a5fc224028b5118d7a56bbe0590"}, "downloads": -1, "filename": "TerminalOne-1.5.0.tar.gz", "has_sig": false, "md5_digest": "5da880dbb5ff8e13730a164981e830a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66232, "upload_time": "2016-12-02T11:03:51", "upload_time_iso_8601": "2016-12-02T11:03:51.524873Z", "url": "https://files.pythonhosted.org/packages/a0/91/2b24ca0c10cda078de0d49bbdf0dec071923de7e6c82761aa6a210f37043/TerminalOne-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "20f22b00184f3f0477aaa663e0ae6640", "sha256": "5c57d71d1b9adcbf016dd692a52df29ff479ed42392bc632280ce84051ec1aad"}, "downloads": -1, "filename": "TerminalOne-1.5.1.tar.gz", "has_sig": false, "md5_digest": "20f22b00184f3f0477aaa663e0ae6640", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66225, "upload_time": "2016-12-19T11:31:07", "upload_time_iso_8601": "2016-12-19T11:31:07.801349Z", "url": "https://files.pythonhosted.org/packages/ad/98/66fac5d3502d0a9b6ae40573e2d7672d3fad1e379c82f670b637e0ccccb0/TerminalOne-1.5.1.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "4ec90a01aabd3683fbe74f50fb836db3", "sha256": "af892a00fb65fc6c96a2c74de5f273e094d7d9ca53ff49c76c6f9d7d2c9ec557"}, "downloads": -1, "filename": "TerminalOne-1.6.0.tar.gz", "has_sig": false, "md5_digest": "4ec90a01aabd3683fbe74f50fb836db3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66789, "upload_time": "2017-01-17T11:43:54", "upload_time_iso_8601": "2017-01-17T11:43:54.742022Z", "url": "https://files.pythonhosted.org/packages/88/e7/debbca3b507ec11a45c73de9df5e29ea2d722b90a4ca8c33819489ef2765/TerminalOne-1.6.0.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "ba637d89908957864fb1486f36b155eb", "sha256": "47c7a867cfce4917daa7b035752f240791ddf2e39da40a86636298ce410eb120"}, "downloads": -1, "filename": "TerminalOne-1.6.1.tar.gz", "has_sig": false, "md5_digest": "ba637d89908957864fb1486f36b155eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67962, "upload_time": "2017-01-24T16:52:27", "upload_time_iso_8601": "2017-01-24T16:52:27.754918Z", "url": "https://files.pythonhosted.org/packages/98/c4/885217ef4f5246690cd26b1e691a2b16179831ed74da9928dcacab609098/TerminalOne-1.6.1.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "1d083596b11966685bea211e21c5d26b", "sha256": "5c6880b260c187dba06e148e120a1e153440f228c4b1a50dc3f78eca54b0d81e"}, "downloads": -1, "filename": "TerminalOne-1.7.0.tar.gz", "has_sig": false, "md5_digest": "1d083596b11966685bea211e21c5d26b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66867, "upload_time": "2017-03-24T21:20:17", "upload_time_iso_8601": "2017-03-24T21:20:17.001938Z", "url": "https://files.pythonhosted.org/packages/5a/dd/7fd5fa89a6bfb4d607fd6dfd55330757a35e7b346b095a96447439a9a95a/TerminalOne-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "5e278b0bba604e9cacaa027fd94a3c52", "sha256": "87eb62b8f8e69eb8660499eabf6cf59dcb606b4655d76511b6886ffab0c3a164"}, "downloads": -1, "filename": "TerminalOne-1.7.1.tar.gz", "has_sig": false, "md5_digest": "5e278b0bba604e9cacaa027fd94a3c52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66908, "upload_time": "2017-04-24T17:35:35", "upload_time_iso_8601": "2017-04-24T17:35:35.061510Z", "url": "https://files.pythonhosted.org/packages/e6/0f/12dfee5f1082643e63631335a6b9fb4b1511e14afa0e81d3126fe97187fd/TerminalOne-1.7.1.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "0bb44b2c1dc702b56a0aface246cc29c", "sha256": "4f4a902922505c2cd291d8541cd40f7882439672574a80305a3ec5b929952d3b"}, "downloads": -1, "filename": "TerminalOne-1.8.0.tar.gz", "has_sig": false, "md5_digest": "0bb44b2c1dc702b56a0aface246cc29c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66931, "upload_time": "2017-05-01T20:42:44", "upload_time_iso_8601": "2017-05-01T20:42:44.655194Z", "url": "https://files.pythonhosted.org/packages/a3/8e/9b90e9808283461e7c7d27b64fece06e781a770bf06e7c7cbd2f378ff78b/TerminalOne-1.8.0.tar.gz", "yanked": false}], "1.8.2": [{"comment_text": "", "digests": {"md5": "aba3b3d56444018a1712e93cbdd33d0d", "sha256": "ad243237edec52eb5d847b6acc744004680d38e353857d05d1fa0a7ffc31580b"}, "downloads": -1, "filename": "TerminalOne-1.8.2.tar.gz", "has_sig": false, "md5_digest": "aba3b3d56444018a1712e93cbdd33d0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68266, "upload_time": "2017-09-11T15:49:31", "upload_time_iso_8601": "2017-09-11T15:49:31.861380Z", "url": "https://files.pythonhosted.org/packages/67/06/20410eef9c5e09fa87e7a50258fa3b493352d5fba78db5c4c3b0e4b152af/TerminalOne-1.8.2.tar.gz", "yanked": false}], "1.8.3": [{"comment_text": "", "digests": {"md5": "0bf38632b19fae871e5633bb51f89b5c", "sha256": "70057ea7fd61873047895718344c450ba50c2cc40e9176aec3e3f74a337c10e2"}, "downloads": -1, "filename": "TerminalOne-1.8.3.tar.gz", "has_sig": false, "md5_digest": "0bf38632b19fae871e5633bb51f89b5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68267, "upload_time": "2017-11-09T14:08:39", "upload_time_iso_8601": "2017-11-09T14:08:39.446166Z", "url": "https://files.pythonhosted.org/packages/b3/1e/9b79651c3a2cef744c1f773612f2fd29551a6c5503d1a02576a83454b369/TerminalOne-1.8.3.tar.gz", "yanked": false}], "1.8.4": [{"comment_text": "", "digests": {"md5": "bb830f98ec7672868c741e79f87efdc6", "sha256": "ccf187d064f977bd391181645bd5266e38503e28dc74fe28de6e29af9c40593e"}, "downloads": -1, "filename": "TerminalOne-1.8.4.tar.gz", "has_sig": false, "md5_digest": "bb830f98ec7672868c741e79f87efdc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68837, "upload_time": "2018-03-23T18:01:22", "upload_time_iso_8601": "2018-03-23T18:01:22.045412Z", "url": "https://files.pythonhosted.org/packages/8f/17/f81a696bd72a1dc69c0f3220a923f68258b9a335b7450a901ccf7eb4739c/TerminalOne-1.8.4.tar.gz", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "f23dad43cf59854b9ea3bde1222da044", "sha256": "91031698efea27db8817fe7bd7e90d33162155c1e613e35fae5233fb2112df18"}, "downloads": -1, "filename": "TerminalOne-1.9.0.tar.gz", "has_sig": false, "md5_digest": "f23dad43cf59854b9ea3bde1222da044", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72675, "upload_time": "2018-09-24T18:04:49", "upload_time_iso_8601": "2018-09-24T18:04:49.455470Z", "url": "https://files.pythonhosted.org/packages/67/fd/1a02bb317f55926aa07e9865ebc2bd665f34591997d3b79a760bceccd91f/TerminalOne-1.9.0.tar.gz", "yanked": false}], "1.9.1": [{"comment_text": "", "digests": {"md5": "a235e69ea5c5b0585f2ac83fd91a12da", "sha256": "a3aa4811cc350e60a4dad730eaa1654366e86111c8d7220ce9db4199f2db4c49"}, "downloads": -1, "filename": "TerminalOne-1.9.1.tar.gz", "has_sig": false, "md5_digest": "a235e69ea5c5b0585f2ac83fd91a12da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67170, "upload_time": "2019-01-19T01:28:05", "upload_time_iso_8601": "2019-01-19T01:28:05.377992Z", "url": "https://files.pythonhosted.org/packages/e0/c7/7145e0a267530edb73acf7f3ef7050460a50d4f220e82520a78d418765e2/TerminalOne-1.9.1.tar.gz", "yanked": false}], "1.9.10": [{"comment_text": "", "digests": {"md5": "1b77a18952cdb885579de71cab3b33e3", "sha256": "86a5635e03ce0c5456c97a90b354f03ebd0eb2218c093588a566dffefc3de9ed"}, "downloads": -1, "filename": "TerminalOne-1.9.10.tar.gz", "has_sig": false, "md5_digest": "1b77a18952cdb885579de71cab3b33e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60803, "upload_time": "2020-03-16T14:57:06", "upload_time_iso_8601": "2020-03-16T14:57:06.985878Z", "url": "https://files.pythonhosted.org/packages/33/5b/f0a78bc292c3ce402c38b763447db25554025be8539700133725e0497149/TerminalOne-1.9.10.tar.gz", "yanked": false}], "1.9.11": [{"comment_text": "", "digests": {"md5": "a01db469da33a1c8186f5cc53fcd81ee", "sha256": "f866f5af76195697f1658403ef84eb9a9bd46f90ad3d089d6420d36f67e0185c"}, "downloads": -1, "filename": "TerminalOne-1.9.11.tar.gz", "has_sig": false, "md5_digest": "a01db469da33a1c8186f5cc53fcd81ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60825, "upload_time": "2020-04-06T15:32:39", "upload_time_iso_8601": "2020-04-06T15:32:39.740362Z", "url": "https://files.pythonhosted.org/packages/43/73/5e08763d34927cb3c504fc1dbcaa41583570663eb32819c531ef7e2c377c/TerminalOne-1.9.11.tar.gz", "yanked": false}], "1.9.2": [{"comment_text": "", "digests": {"md5": "b6ce7636d2c601728356e23f6b0a4dc0", "sha256": "8f256aa6ceddd744f01c483e736fd3f97d31c22b5067fd86ffd369051bc97ea0"}, "downloads": -1, "filename": "TerminalOne-1.9.2.tar.gz", "has_sig": false, "md5_digest": "b6ce7636d2c601728356e23f6b0a4dc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60204, "upload_time": "2019-06-07T14:44:30", "upload_time_iso_8601": "2019-06-07T14:44:30.760882Z", "url": "https://files.pythonhosted.org/packages/3c/db/4a01cbacf12275d4bc38ec95e63d94096ce5621f74dc6a17d6c3c554d341/TerminalOne-1.9.2.tar.gz", "yanked": false}], "1.9.3": [{"comment_text": "", "digests": {"md5": "7ecae88dad77c93e9b44fb66e5582d96", "sha256": "80bfb755c41b25a8a45bcd728af611d2dc6f4f32105a4be5c006609007182f41"}, "downloads": -1, "filename": "TerminalOne-1.9.3.tar.gz", "has_sig": false, "md5_digest": "7ecae88dad77c93e9b44fb66e5582d96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60209, "upload_time": "2019-06-11T18:51:17", "upload_time_iso_8601": "2019-06-11T18:51:17.429153Z", "url": "https://files.pythonhosted.org/packages/9e/80/4c951e45d2e71347079a39b28e45a25feebaa5e5dd10cecee1a54dcf43a9/TerminalOne-1.9.3.tar.gz", "yanked": false}], "1.9.4": [{"comment_text": "", "digests": {"md5": "d1e9b6788621ca101bd8a37e2d0bec77", "sha256": "b6993066985da0f2d040a10df129f6418f03039acc2c810b643647bb37eb0e46"}, "downloads": -1, "filename": "TerminalOne-1.9.4.tar.gz", "has_sig": false, "md5_digest": "d1e9b6788621ca101bd8a37e2d0bec77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60438, "upload_time": "2019-09-19T16:05:01", "upload_time_iso_8601": "2019-09-19T16:05:01.454678Z", "url": "https://files.pythonhosted.org/packages/80/fa/8cfc2bdfdd8d853947488b8df0fbe53b272efb51b8e63d49da85bbcf5db1/TerminalOne-1.9.4.tar.gz", "yanked": false}], "1.9.5": [{"comment_text": "", "digests": {"md5": "dc25e2851b7381d500872d1bbd611daa", "sha256": "b896fbc04bf8f2afa5b82db75778055a8c5e38d4df9b95f89ab9c9715954afff"}, "downloads": -1, "filename": "TerminalOne-1.9.5.tar.gz", "has_sig": false, "md5_digest": "dc25e2851b7381d500872d1bbd611daa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60563, "upload_time": "2019-10-08T21:22:37", "upload_time_iso_8601": "2019-10-08T21:22:37.651939Z", "url": "https://files.pythonhosted.org/packages/83/e8/baf51809dc1d7d5d3da213397216d9855502d6cc4b3048c4933b5a89572e/TerminalOne-1.9.5.tar.gz", "yanked": false}], "1.9.6": [{"comment_text": "", "digests": {"md5": "311eac383c4819b41cfe2b947c766a8a", "sha256": "5724bf09547ca22aa2294d25be24669864c6512de9289fea3d4a5b0b7a58c21f"}, "downloads": -1, "filename": "TerminalOne-1.9.6.tar.gz", "has_sig": false, "md5_digest": "311eac383c4819b41cfe2b947c766a8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60636, "upload_time": "2019-11-12T12:20:13", "upload_time_iso_8601": "2019-11-12T12:20:13.187992Z", "url": "https://files.pythonhosted.org/packages/4c/29/2ee122b1ce9cc94f9ed2686860dd03f10652667fa5eb65b198fe92523861/TerminalOne-1.9.6.tar.gz", "yanked": false}], "1.9.7": [{"comment_text": "", "digests": {"md5": "f5ec2bc770f11b9ab0e7c48d9f033cff", "sha256": "351368b9df4b23d6f7f64973f4c7fab28147200710f4201b48a6a6c6cb873a6c"}, "downloads": -1, "filename": "TerminalOne-1.9.7.tar.gz", "has_sig": false, "md5_digest": "f5ec2bc770f11b9ab0e7c48d9f033cff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60387, "upload_time": "2019-12-11T12:25:11", "upload_time_iso_8601": "2019-12-11T12:25:11.625363Z", "url": "https://files.pythonhosted.org/packages/b8/8e/003b6daf92a1ff6c8cbf0f6990092aab7d4e1b13da93d23e7ff39d709891/TerminalOne-1.9.7.tar.gz", "yanked": false}], "1.9.8": [{"comment_text": "", "digests": {"md5": "70d3224660390584bd3564b804329c11", "sha256": "6572c331cbca8dfedfe845760011d0602de1bf941e61cefc5f37e2c4b898c423"}, "downloads": -1, "filename": "TerminalOne-1.9.8.tar.gz", "has_sig": false, "md5_digest": "70d3224660390584bd3564b804329c11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60732, "upload_time": "2019-12-17T10:16:38", "upload_time_iso_8601": "2019-12-17T10:16:38.126968Z", "url": "https://files.pythonhosted.org/packages/3c/1c/82bf513f9f0180f0ebc734e20f3e6ebe2d628d386d74ee7060dfabbab465/TerminalOne-1.9.8.tar.gz", "yanked": false}], "1.9.9": [{"comment_text": "", "digests": {"md5": "4066c0655752490281bd705f61e748ed", "sha256": "29896cf27361f1d5343c4bf225664881b618f278a1c93afcca02e60be36e5e3f"}, "downloads": -1, "filename": "TerminalOne-1.9.9.tar.gz", "has_sig": false, "md5_digest": "4066c0655752490281bd705f61e748ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60743, "upload_time": "2020-03-09T09:46:37", "upload_time_iso_8601": "2020-03-09T09:46:37.141259Z", "url": "https://files.pythonhosted.org/packages/0b/93/27061ed6cd7984921caeb3b8ddf09e93ca75d02701cb136fe94542283324/TerminalOne-1.9.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a01db469da33a1c8186f5cc53fcd81ee", "sha256": "f866f5af76195697f1658403ef84eb9a9bd46f90ad3d089d6420d36f67e0185c"}, "downloads": -1, "filename": "TerminalOne-1.9.11.tar.gz", "has_sig": false, "md5_digest": "a01db469da33a1c8186f5cc53fcd81ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60825, "upload_time": "2020-04-06T15:32:39", "upload_time_iso_8601": "2020-04-06T15:32:39.740362Z", "url": "https://files.pythonhosted.org/packages/43/73/5e08763d34927cb3c504fc1dbcaa41583570663eb32819c531ef7e2c377c/TerminalOne-1.9.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:55 2020"}