{"info": {"author": "Peter Bittner", "author_email": "peter@painless.software", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Testing", "Topic :: Software Development :: Testing :: Mocking", "Topic :: Software Development :: Testing :: Unit"], "description": "cli-test-helpers |latest-version|\n=================================\n\n|build-status| |python-support| |license|\n\nUseful helpers for writing tests for your Python CLI program.\n\nWriting tests for a command line interface (CLI) tool `may not seem strictly\nstraight-forward`_ when you think in terms of unit tests. Especially, when you\nuse the `argparse`_ module or the `click`_ package, control of the application\nentry point is a bit taken away from you.\n\nBut it's not all that bad. This package is here to help. The examples give you\nsome guidance on how to get started, and the helpers allow you to deal with\ncommon cases, such as mocking CLI arguments and environment variable values.\n\n.. |latest-version| image:: https://img.shields.io/pypi/v/cli-test-helpers.svg\n   :alt: Latest version on PyPI\n   :target: https://pypi.org/project/cli-test-helpers\n.. |build-status| image:: https://img.shields.io/travis/painless-software/python-cli-test-helpers/master.svg\n   :alt: Build status\n   :target: https://travis-ci.org/painless-software/python-cli-test-helpers\n.. |python-support| image:: https://img.shields.io/pypi/pyversions/cli-test-helpers.svg\n   :alt: Python versions\n   :target: https://pypi.org/project/cli-test-helpers\n.. |license| image:: https://img.shields.io/pypi/l/cli-test-helpers.svg\n   :alt: Software license\n   :target: https://github.com/painless-software/python-cli-test-helpers/blob/master/LICENSE\n.. _may not seem strictly straight-forward: https://stackoverflow.com/questions/13493288/\n.. _argparse: https://docs.python.org/3/library/argparse.html\n.. _click: https://click.palletsprojects.com/\n\nInstallation\n============\n\n.. code:: console\n\n    pip install cli-test-helpers\n\nPreferably, though, you add ``cli-test-helpers`` as a dependency to your Tox\nenvironment (see `example\n<https://github.com/painless-software/python-cli-test-helpers/blob/master/examples/tox.ini#L7-L9>`__).\n\nUsage\n=====\n\nLet's assume you use `pytest`_ for running your tests, which is certainly a\ngood idea. Your CLI program is called ``foobar``. You have prepared a\n``setup.py`` with a CLI entrypoint. For the tests you have prepared a\n``tests/`` folder (outside of ``foobar/``, because you don't want your tests\nto be packaged up with your application code). Then your directory layout\nlooks somewhat like `our example\n<https://github.com/painless-software/python-cli-test-helpers/tree/master/examples>`__.\n\nFunctional tests\n----------------\n\nStart with a simple set of functional tests:\n\n- Is the entrypoint script installed? (tests the configuration in your setup.py)\n- Can this package be run as a Python module? (i.e. without having to be installed)\n- Is command XYZ available? etc. Cover your entire CLI usage here!\n\nThis is almost a stupid exercise: Run the command as a shell command\nand inspect the status code of the exiting process (see `example\n<https://github.com/painless-software/python-cli-test-helpers/blob/master/examples/tests/test_cli.py>`__).\nThe trick is that you run a non-destructive command, e.g. by using the usual\n``--help`` option of every command. This should cover your entire CLI user\ninterface definition.\n\nUnit tests\n----------\n\nThen you're ready to take advantage of our helpers.\n\n``ArgvContext`` allows you to mimic the use of specific CLI arguments:\n\n.. code:: python\n\n    @patch('foobar.command.baz')\n    def test_cli_command(mock_command):\n        \"\"\"Is the correct code called when invoked via the CLI?\"\"\"\n        with ArgvContext('foobar', 'baz'), pytest.raises(SystemExit):\n            foobar.cli.main()\n\n        assert mock_command.called\n\n``EnvironContext`` allows you to mimic the presence of environment values:\n\n.. code:: python\n\n    def test_fail_without_secret():\n        \"\"\"Must fail without a ``SECRET`` environment variable specified\"\"\"\n        message_regex = \"Environment value SECRET not set.\"\n\n        with EnvironContext(SECRET=None):\n            with pytest.raises(SystemExit, match=message_regex):\n                foobar.command.baz()\n                pytest.fail(\"CLI doesn't abort with missing SECRET\")\n\nSee `example\n<https://github.com/painless-software/python-cli-test-helpers/blob/master/examples/tests/test_command.py>`__.\n\nTDD\n---\n\nRemember to stick to the test-driven mantra:\n\n#. Write one line of test code. Make the test fail.\n#. Write one line of application code. Make the test pass.\n#. Goto 1.\n\n\n.. _pytest: https://pytest.org/\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/painless-software/python-cli-test-helpers", "keywords": "python,cli,testing,helpers", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "cli-test-helpers", "package_url": "https://pypi.org/project/cli-test-helpers/", "platform": "", "project_url": "https://pypi.org/project/cli-test-helpers/", "project_urls": {"Homepage": "https://github.com/painless-software/python-cli-test-helpers"}, "release_url": "https://pypi.org/project/cli-test-helpers/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Useful helpers for writing tests for your Python CLI program.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"cli-test-helpers-latest-version\">\n<h2>cli-test-helpers <a href=\"https://pypi.org/project/cli-test-helpers\" rel=\"nofollow\"><img alt=\"Latest version on PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca54a315a6b66f8ff87efb3f9582d9dab876f555/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636c692d746573742d68656c706572732e737667\"></a></h2>\n<p><a href=\"https://travis-ci.org/painless-software/python-cli-test-helpers\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8d965ea712b66e2e73d91f44e9abf9d39b74292/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7061696e6c6573732d736f6674776172652f707974686f6e2d636c692d746573742d68656c706572732f6d61737465722e737667\"></a> <a href=\"https://pypi.org/project/cli-test-helpers\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac13593cff6985b5248a16338219e4f07431cab4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636c692d746573742d68656c706572732e737667\"></a> <a href=\"https://github.com/painless-software/python-cli-test-helpers/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"Software license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb8b7c057de09767cc24efc52b419faf565c22d0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f636c692d746573742d68656c706572732e737667\"></a></p>\n<p>Useful helpers for writing tests for your Python CLI program.</p>\n<p>Writing tests for a command line interface (CLI) tool <a href=\"https://stackoverflow.com/questions/13493288/\" rel=\"nofollow\">may not seem strictly\nstraight-forward</a> when you think in terms of unit tests. Especially, when you\nuse the <a href=\"https://docs.python.org/3/library/argparse.html\" rel=\"nofollow\">argparse</a> module or the <a href=\"https://click.palletsprojects.com/\" rel=\"nofollow\">click</a> package, control of the application\nentry point is a bit taken away from you.</p>\n<p>But it\u2019s not all that bad. This package is here to help. The examples give you\nsome guidance on how to get started, and the helpers allow you to deal with\ncommon cases, such as mocking CLI arguments and environment variable values.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre><span class=\"go\">pip install cli-test-helpers</span>\n</pre>\n<p>Preferably, though, you add <tt><span class=\"pre\">cli-test-helpers</span></tt> as a dependency to your Tox\nenvironment (see <a href=\"https://github.com/painless-software/python-cli-test-helpers/blob/master/examples/tox.ini#L7-L9\" rel=\"nofollow\">example</a>).</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Let\u2019s assume you use <a href=\"https://pytest.org/\" rel=\"nofollow\">pytest</a> for running your tests, which is certainly a\ngood idea. Your CLI program is called <tt>foobar</tt>. You have prepared a\n<tt>setup.py</tt> with a CLI entrypoint. For the tests you have prepared a\n<tt>tests/</tt> folder (outside of <tt>foobar/</tt>, because you don\u2019t want your tests\nto be packaged up with your application code). Then your directory layout\nlooks somewhat like <a href=\"https://github.com/painless-software/python-cli-test-helpers/tree/master/examples\" rel=\"nofollow\">our example</a>.</p>\n<div id=\"functional-tests\">\n<h3>Functional tests</h3>\n<p>Start with a simple set of functional tests:</p>\n<ul>\n<li>Is the entrypoint script installed? (tests the configuration in your setup.py)</li>\n<li>Can this package be run as a Python module? (i.e. without having to be installed)</li>\n<li>Is command XYZ available? etc. Cover your entire CLI usage here!</li>\n</ul>\n<p>This is almost a stupid exercise: Run the command as a shell command\nand inspect the status code of the exiting process (see <a href=\"https://github.com/painless-software/python-cli-test-helpers/blob/master/examples/tests/test_cli.py\" rel=\"nofollow\">example</a>).\nThe trick is that you run a non-destructive command, e.g. by using the usual\n<tt><span class=\"pre\">--help</span></tt> option of every command. This should cover your entire CLI user\ninterface definition.</p>\n</div>\n<div id=\"unit-tests\">\n<h3>Unit tests</h3>\n<p>Then you\u2019re ready to take advantage of our helpers.</p>\n<p><tt>ArgvContext</tt> allows you to mimic the use of specific CLI arguments:</p>\n<pre><span class=\"nd\">@patch</span><span class=\"p\">(</span><span class=\"s1\">'foobar.command.baz'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_cli_command</span><span class=\"p\">(</span><span class=\"n\">mock_command</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Is the correct code called when invoked via the CLI?\"\"\"</span>\n    <span class=\"k\">with</span> <span class=\"n\">ArgvContext</span><span class=\"p\">(</span><span class=\"s1\">'foobar'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">),</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">SystemExit</span><span class=\"p\">):</span>\n        <span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">mock_command</span><span class=\"o\">.</span><span class=\"n\">called</span>\n</pre>\n<p><tt>EnvironContext</tt> allows you to mimic the presence of environment values:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_fail_without_secret</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Must fail without a ``SECRET`` environment variable specified\"\"\"</span>\n    <span class=\"n\">message_regex</span> <span class=\"o\">=</span> <span class=\"s2\">\"Environment value SECRET not set.\"</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">EnvironContext</span><span class=\"p\">(</span><span class=\"n\">SECRET</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">SystemExit</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"o\">=</span><span class=\"n\">message_regex</span><span class=\"p\">):</span>\n            <span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">()</span>\n            <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"p\">(</span><span class=\"s2\">\"CLI doesn't abort with missing SECRET\"</span><span class=\"p\">)</span>\n</pre>\n<p>See <a href=\"https://github.com/painless-software/python-cli-test-helpers/blob/master/examples/tests/test_command.py\" rel=\"nofollow\">example</a>.</p>\n</div>\n<div id=\"tdd\">\n<h3>TDD</h3>\n<p>Remember to stick to the test-driven mantra:</p>\n<ol>\n<li>Write one line of test code. Make the test fail.</li>\n<li>Write one line of application code. Make the test pass.</li>\n<li>Goto 1.</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6044191, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f5858821f887c8f31db82e3476b6a43a", "sha256": "ed1bbae7031f66339510076450ad4ccff918ffadf565f7dfa884f148cb674d00"}, "downloads": -1, "filename": "cli_test_helpers-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "f5858821f887c8f31db82e3476b6a43a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16253, "upload_time": "2019-10-27T22:48:51", "upload_time_iso_8601": "2019-10-27T22:48:51.258677Z", "url": "https://files.pythonhosted.org/packages/19/69/2df351e8e099b562ff17bda3a8e9d9ba09d283165119d0a826335670d604/cli_test_helpers-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9eda53e40f8fe91a79e3801f81121430", "sha256": "eedff2c4f754f250042702089219dc29827b2c8d53a7d2dd1c3d4ce3d05af8df"}, "downloads": -1, "filename": "cli-test-helpers-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9eda53e40f8fe91a79e3801f81121430", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17269, "upload_time": "2019-10-27T22:48:53", "upload_time_iso_8601": "2019-10-27T22:48:53.880063Z", "url": "https://files.pythonhosted.org/packages/b5/bf/a7326bb5b54c78ec67eed7c1e9341a67c24ef09e13814164f7b30f1b03a0/cli-test-helpers-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b2e72abfc8179617a774e513cc713b5f", "sha256": "8a3f470c730d19f8092f074dda82f1cd47cf0114557e791757cb495a1bf5f3d2"}, "downloads": -1, "filename": "cli_test_helpers-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b2e72abfc8179617a774e513cc713b5f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16326, "upload_time": "2019-10-28T22:02:25", "upload_time_iso_8601": "2019-10-28T22:02:25.385501Z", "url": "https://files.pythonhosted.org/packages/cf/70/fc64bbc59d281137e5fab0334d689120bdfd21dc06d1f5335feda7e5724f/cli_test_helpers-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e260bad09dee0a717130e57664df757", "sha256": "a1b3e2d901e0eb356e051cb3d78d99c1f1590a3c6b20df9cde8564b8d4c4ee03"}, "downloads": -1, "filename": "cli-test-helpers-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4e260bad09dee0a717130e57664df757", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17422, "upload_time": "2019-10-28T22:02:27", "upload_time_iso_8601": "2019-10-28T22:02:27.104788Z", "url": "https://files.pythonhosted.org/packages/7c/b5/1a372ea120928d379e0dc330683e5288cfce6c3f3c55ed5c56cee147401b/cli-test-helpers-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2e72abfc8179617a774e513cc713b5f", "sha256": "8a3f470c730d19f8092f074dda82f1cd47cf0114557e791757cb495a1bf5f3d2"}, "downloads": -1, "filename": "cli_test_helpers-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b2e72abfc8179617a774e513cc713b5f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16326, "upload_time": "2019-10-28T22:02:25", "upload_time_iso_8601": "2019-10-28T22:02:25.385501Z", "url": "https://files.pythonhosted.org/packages/cf/70/fc64bbc59d281137e5fab0334d689120bdfd21dc06d1f5335feda7e5724f/cli_test_helpers-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e260bad09dee0a717130e57664df757", "sha256": "a1b3e2d901e0eb356e051cb3d78d99c1f1590a3c6b20df9cde8564b8d4c4ee03"}, "downloads": -1, "filename": "cli-test-helpers-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4e260bad09dee0a717130e57664df757", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17422, "upload_time": "2019-10-28T22:02:27", "upload_time_iso_8601": "2019-10-28T22:02:27.104788Z", "url": "https://files.pythonhosted.org/packages/7c/b5/1a372ea120928d379e0dc330683e5288cfce6c3f3c55ed5c56cee147401b/cli-test-helpers-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:56 2020"}