{"info": {"author": "Mikhail Podgurskiy", "author_email": "kmmbvnr@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "===============\r\ndjango-viewform\r\n===============\r\n\r\nTemplate driven form rendering for django\r\n\r\nFeatures\r\n========\r\n\r\n* Strong python/html code separation\r\n* Easy redefinition of particular fields rendering\r\n* Complex form layout support\r\n* Formsets and js goodies out of the box\r\n\r\nDemo: http://forms.viewflow.io/\r\n\r\n\r\nInstallation\r\n============\r\n\r\ndjango-viewform tested with Python 2.7/3.3, django 1.6/1.7::\r\n\r\n    pip install django-viewform\r\n\r\nAnd add it into INSTALLED_APPS settings\r\n\r\n\r\n    INSTALLED_APPS = (\r\n         ...\r\n         'viewform',\r\n    )\r\n\r\n\r\nQuick start\r\n===========\r\n\r\nInclude formpack javascript and styles into your base template \r\n\r\n\r\n        {% include 'viewform/bootstrap3/include_css.html' %}\r\n        {% include 'viewform/bootstrap3/include_js.html' %}\r\n\r\nPacks for bootstrap3 and foundation5 are available out of the box\r\n\r\nRender your form with {% viewform %} template tag\r\n\r\n\r\n    <form method=\"POST\">\r\n        {% csrf_token %}\r\n        {% viewform 'viewform/bootstrap3/form.html' form=form %}{% endviewform %}\r\n        <button type=\"submit\" name=\"_submit\" class=\"btn\">Submit</button>\r\n    </form>\r\n\r\n\r\nTemplate tags\r\n=============\r\n\r\n`viewform` is built around simple concept called viewpart. `Viewpart`\r\nis like django template block, it has a default value and could be\r\noverriden.  But `viewparts` are created dynamically for each form\r\nfield, which allows you to redefine specific form field html render output.\r\n\r\nHere is the example of rendering form with predefined bootstrap template,\r\nbut prepend email field with `@` sign.\r\n\r\n\r\n    <form method=\"POST\">\r\n        {% csrf_token %}\r\n        {% viewform 'viewform/bootstrap3/form.html' form=form layout=view.layout %}\r\n            {% viewpart form.email.field prepend %}\r\n                 <div class=\"input-group-addon\">@</div>\r\n            {% endviewpart %}\r\n        {% endviewform %}\r\n        <button type=\"submit\" name=\"_submit\" class=\"btn\">Submit</button>\r\n    </form>\r\n\r\nThere is a lot of other viewparts declared in default templates. See template code for details.\r\nIf your widget is so special, just provide `{% viewpart form.my_field.field %}any html code{% endviewpart %}`\r\n\r\nLayout\r\n======\r\n\r\nLayout object is the way to specify relative fields placements and sizes.\r\n\r\n\r\n    from viewform import *\r\n\r\n    layout = Layout(\r\n        Row('shipment_no', 'description')\r\n        Fieldset(\"Add to inventory\",\r\n                 Row(Span3('product_name'), 'tags'),\r\n                 Row('vendor', 'product_type'),\r\n                 Row(Column('sku',\r\n                            'stock_level',\r\n                            span_columns=4),\r\n                     'gender', 'desired_gender'),\r\n                 Row('cost_price', Span2('wholesale_price'), 'retail_price')))\r\n\r\nSpanXX elements are not directly mapped to bootstrap or foundation grid\r\nclasses, but used to determine relative fields width. Each row occupies\r\n12 grid columns.  Elements in Row('elem1', 'elem2') would be rendered\r\nin 6 grid coulmns each, and in Row(Span2('elem1'), 'elem2') `elem1`\r\nwould be rendered in 8 grid columns, and `elem2` in 4 grid columns.\r\n\r\nLayouts rendering itself is specified in template. See\r\ntemplates/viewform/<tempalte_pack>/layout code folder for details.\r\n\r\n\r\nModelForm Views\r\n===============\r\n\r\nViewform library provides  LayoutMixin for model form views, populates\r\nform fields list directly from layout object\r\n\r\n\r\n    from django import generic\r\n    from viewform import LayoutMixin\r\n\r\n    class SampleView(LayoutMixin, generic.ModelFormView):\r\n        layout = Layout(...)\r\n\r\n\r\n\r\nFormset and inlines\r\n===================\r\n\r\nWith django-extra-views NamedFormsetsMixin you can use inline names inside viewform layout\r\n\r\n\r\n    class FormsetView(LayoutMixin,\r\n                      extra_views.NamedFormsetsMixin,\r\n                      extra_views.CreateWithInlinesView):\r\n        model = Shipment\r\n\r\n        class ItemInline(extra_views.InlineFormSet):\r\n            model = ShipmentItem\r\n            fields = ['name', 'quantity']\r\n\r\n        layout = Layout(\r\n            Row(Column('name', 'city'),\r\n                Column('address_line1', 'address_line2')),\r\n            Inline('Items', ItemInline)\r\n        )\r\n\r\n\r\nChangelog\r\n=========\r\n\r\n0.1.0 2014-11-05 - Alpha\r\n------------------------\r\n\r\n* First alpha version extracted from `Viewflow <http://viewflow.io>`_ library\r\n* Initial bootstrap3 and foundation5 support\r\n* Basic django widgets support\r\n\r\n\r\nLicense\r\n=======\r\n\r\nViewform code and html templates licensed under `LGPL <https://www.gnu.org/licenses/lgpl.html>`_\r\n\r\nComponents (bootstrap/foundation/jquery and etc) have own licenses. Referer to the source code for the details.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/viewflow/viewform", "keywords": "django", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "django-viewform", "package_url": "https://pypi.org/project/django-viewform/", "platform": "any", "project_url": "https://pypi.org/project/django-viewform/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/viewflow/viewform"}, "release_url": "https://pypi.org/project/django-viewform/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Template driven form rendering for django.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ===============\n<br>django-viewform\n<br>===============\n<br>\n<br>Template driven form rendering for django\n<br>\n<br>Features\n<br>========\n<br>\n<br>* Strong python/html code separation\n<br>* Easy redefinition of particular fields rendering\n<br>* Complex form layout support\n<br>* Formsets and js goodies out of the box\n<br>\n<br>Demo: http://forms.viewflow.io/\n<br>\n<br>\n<br>Installation\n<br>============\n<br>\n<br>django-viewform tested with Python 2.7/3.3, django 1.6/1.7::\n<br>\n<br>    pip install django-viewform\n<br>\n<br>And add it into INSTALLED_APPS settings\n<br>\n<br>\n<br>    INSTALLED_APPS = (\n<br>         ...\n<br>         'viewform',\n<br>    )\n<br>\n<br>\n<br>Quick start\n<br>===========\n<br>\n<br>Include formpack javascript and styles into your base template \n<br>\n<br>\n<br>        {% include 'viewform/bootstrap3/include_css.html' %}\n<br>        {% include 'viewform/bootstrap3/include_js.html' %}\n<br>\n<br>Packs for bootstrap3 and foundation5 are available out of the box\n<br>\n<br>Render your form with {% viewform %} template tag\n<br>\n<br>\n<br>    &lt;form method=\"POST\"&gt;\n<br>        {% csrf_token %}\n<br>        {% viewform 'viewform/bootstrap3/form.html' form=form %}{% endviewform %}\n<br>        &lt;button type=\"submit\" name=\"_submit\" class=\"btn\"&gt;Submit&lt;/button&gt;\n<br>    &lt;/form&gt;\n<br>\n<br>\n<br>Template tags\n<br>=============\n<br>\n<br>`viewform` is built around simple concept called viewpart. `Viewpart`\n<br>is like django template block, it has a default value and could be\n<br>overriden.  But `viewparts` are created dynamically for each form\n<br>field, which allows you to redefine specific form field html render output.\n<br>\n<br>Here is the example of rendering form with predefined bootstrap template,\n<br>but prepend email field with `@` sign.\n<br>\n<br>\n<br>    &lt;form method=\"POST\"&gt;\n<br>        {% csrf_token %}\n<br>        {% viewform 'viewform/bootstrap3/form.html' form=form layout=view.layout %}\n<br>            {% viewpart form.email.field prepend %}\n<br>                 &lt;div class=\"input-group-addon\"&gt;@&lt;/div&gt;\n<br>            {% endviewpart %}\n<br>        {% endviewform %}\n<br>        &lt;button type=\"submit\" name=\"_submit\" class=\"btn\"&gt;Submit&lt;/button&gt;\n<br>    &lt;/form&gt;\n<br>\n<br>There is a lot of other viewparts declared in default templates. See template code for details.\n<br>If your widget is so special, just provide `{% viewpart form.my_field.field %}any html code{% endviewpart %}`\n<br>\n<br>Layout\n<br>======\n<br>\n<br>Layout object is the way to specify relative fields placements and sizes.\n<br>\n<br>\n<br>    from viewform import *\n<br>\n<br>    layout = Layout(\n<br>        Row('shipment_no', 'description')\n<br>        Fieldset(\"Add to inventory\",\n<br>                 Row(Span3('product_name'), 'tags'),\n<br>                 Row('vendor', 'product_type'),\n<br>                 Row(Column('sku',\n<br>                            'stock_level',\n<br>                            span_columns=4),\n<br>                     'gender', 'desired_gender'),\n<br>                 Row('cost_price', Span2('wholesale_price'), 'retail_price')))\n<br>\n<br>SpanXX elements are not directly mapped to bootstrap or foundation grid\n<br>classes, but used to determine relative fields width. Each row occupies\n<br>12 grid columns.  Elements in Row('elem1', 'elem2') would be rendered\n<br>in 6 grid coulmns each, and in Row(Span2('elem1'), 'elem2') `elem1`\n<br>would be rendered in 8 grid columns, and `elem2` in 4 grid columns.\n<br>\n<br>Layouts rendering itself is specified in template. See\n<br>templates/viewform/&lt;tempalte_pack&gt;/layout code folder for details.\n<br>\n<br>\n<br>ModelForm Views\n<br>===============\n<br>\n<br>Viewform library provides  LayoutMixin for model form views, populates\n<br>form fields list directly from layout object\n<br>\n<br>\n<br>    from django import generic\n<br>    from viewform import LayoutMixin\n<br>\n<br>    class SampleView(LayoutMixin, generic.ModelFormView):\n<br>        layout = Layout(...)\n<br>\n<br>\n<br>\n<br>Formset and inlines\n<br>===================\n<br>\n<br>With django-extra-views NamedFormsetsMixin you can use inline names inside viewform layout\n<br>\n<br>\n<br>    class FormsetView(LayoutMixin,\n<br>                      extra_views.NamedFormsetsMixin,\n<br>                      extra_views.CreateWithInlinesView):\n<br>        model = Shipment\n<br>\n<br>        class ItemInline(extra_views.InlineFormSet):\n<br>            model = ShipmentItem\n<br>            fields = ['name', 'quantity']\n<br>\n<br>        layout = Layout(\n<br>            Row(Column('name', 'city'),\n<br>                Column('address_line1', 'address_line2')),\n<br>            Inline('Items', ItemInline)\n<br>        )\n<br>\n<br>\n<br>Changelog\n<br>=========\n<br>\n<br>0.1.0 2014-11-05 - Alpha\n<br>------------------------\n<br>\n<br>* First alpha version extracted from `Viewflow &lt;http://viewflow.io&gt;`_ library\n<br>* Initial bootstrap3 and foundation5 support\n<br>* Basic django widgets support\n<br>\n<br>\n<br>License\n<br>=======\n<br>\n<br>Viewform code and html templates licensed under `LGPL &lt;https://www.gnu.org/licenses/lgpl.html&gt;`_\n<br>\n<br>Components (bootstrap/foundation/jquery and etc) have own licenses. Referer to the source code for the details.\n          </div>"}, "last_serial": 1295263, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ae05ec05ea244778460e181f73ae5d6f", "sha256": "975b9489b54650120ec2e1de311142f201c6f629683424914d2e27ad61b8ff83"}, "downloads": -1, "filename": "django-viewform-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ae05ec05ea244778460e181f73ae5d6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 363411, "upload_time": "2014-11-05T10:52:03", "upload_time_iso_8601": "2014-11-05T10:52:03.530734Z", "url": "https://files.pythonhosted.org/packages/c2/45/01a11f571af13b9b67ad308106a8200df41e7fa0f9ef784e94b34d3db003/django-viewform-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae05ec05ea244778460e181f73ae5d6f", "sha256": "975b9489b54650120ec2e1de311142f201c6f629683424914d2e27ad61b8ff83"}, "downloads": -1, "filename": "django-viewform-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ae05ec05ea244778460e181f73ae5d6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 363411, "upload_time": "2014-11-05T10:52:03", "upload_time_iso_8601": "2014-11-05T10:52:03.530734Z", "url": "https://files.pythonhosted.org/packages/c2/45/01a11f571af13b9b67ad308106a8200df41e7fa0f9ef784e94b34d3db003/django-viewform-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:01 2020"}