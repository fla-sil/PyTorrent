{"info": {"author": "Vincent Pelletier", "author_email": "plr.vincent@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: IronPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development"], "description": ".. contents::\n\nLine-granularity, thread-aware deterministic and statistic pure-python profiler\n\nInspired from Robert Kern's line_profiler_ .\n\nUsage\n=====\n\nAs a command::\n\n  $ pprofile some_python_executable arg1 ...\n\nOnce `some_python_executable` returns, prints annotated code of each file\ninvolved in the execution.\n\nAs a command, ignoring any files from default `sys.path` (ie, python modules\nthemselves), for shorter output::\n\n  $ pprofile --exclude-syspath some_python_executable arg1 ...\n\nExecuting a module, like :code:`python -m`. `--exclude-syspath` is not\nrecommended in this mode, as it will likely hide what you intend to profile.\nAlso, explicitly ending pprofile arguments with `--` will prevent accidentally\nstealing command's arguments::\n\n  $ pprofile -m some_python_module -- arg1 ...\n\nAs a module:\n\n.. code:: python\n\n  import pprofile\n\n  def someHotSpotCallable():\n      # Deterministic profiler\n      prof = pprofile.Profile()\n      with prof():\n          # Code to profile\n      prof.print_stats()\n\n  def someOtherHotSpotCallable():\n      # Statistic profiler\n      prof = pprofile.StatisticalProfile()\n      with prof(\n          period=0.001, # Sample every 1ms\n          single=True, # Only sample current thread\n      ):\n          # Code to profile\n      prof.print_stats()\n\nFor advanced usage, see :code:`pprofile --help` and :code:`pydoc pprofile`.\n\nProfiling overhead\n------------------\n\npprofile default mode (`Deterministic profiling`_) has a large overhead.\nPart of the reason being that it is written to be as portable as possible\n(so no C extension). This large overhead can be an issue, which can be\navoided by using `Statistic profiling`_ at the cost of some result\nreadability decrease.\n\nRule of thumb:\n\n+-----------------------------+----------------------------+------------------------+\n| Code to profile runs for... | `Deterministic profiling`_ | `Statistic profiling`_ |\n+=============================+============================+========================+\n| a few seconds               | Yes                        | No [#]_                |\n+-----------------------------+----------------------------+------------------------+\n| a few minutes               | Maybe                      | Yes                    |\n+-----------------------------+----------------------------+------------------------+\n| more (ex: daemon)           | No                         | Yes [#]_               |\n+-----------------------------+----------------------------+------------------------+\n\nOnce you identified the hot spot and you decide you need finer-grained\nprofiling to understand what needs fixing, you should try to make to-profile\ncode run for shorter time so you can reasonably use deterministic profiling:\nuse a smaller data set triggering the same code path, modify the code to only\nenable profiling on small pieces of code...\n\n.. [#] Statistic profiling will not have time to collect\n       enough samples to produce usable output.\n\n.. [#] You may want to consider triggering pprofile from\n       a signal handler or other IPC mechanism to profile\n       a shorter subset. See `zpprofile.py` for how it can\n       be used to profile code inside a running (zope)\n       service (in which case the IPC mechanism is just\n       Zope normal URL handling).\n\nOutput\n======\n\nSupported output formats.\n\nCallgrind\n---------\n\nThe most useful output mode of pprofile is `Callgrind Profile Format`_, allows\nbrowsing profiling results with kcachegrind_ (or qcachegrind_ on Windows).\n\n::\n\n  $ pprofile --format callgrind --out cachegrind.out.threads demo/threads.py\n\nCallgrind format is implicitly enabled if ``--out`` basename starts with\n``cachegrind.out.``, so above command can be simplified as::\n\n  $ pprofile --out cachegrind.out.threads demo/threads.py\n\nIf you are analyzing callgrind traces on a different machine, you may want to\nuse the ``--zipfile`` option to generate a zip file containing all files::\n\n  $ pprofile --out cachegrind.out.threads --zipfile threads_source.zip demo/threads.py\n\nGenerated files will use relative paths, so you can extract generated archive\nin the same path as profiling result, and kcachegrind will load them - and not\nyour system-wide files, which may differ.\n\nAnnotated code\n--------------\n\nHuman-readable output, but can become difficult to use with large programs.\n\n::\n\n  $ pprofile demo/threads.py\n\nProfiling modes\n===============\n\nDeterministic profiling\n-----------------------\n\nIn deterministic profiling mode, pprofile gets notified of each executed line.\nThis mode generates very detailed reports, but at the cost of a large overhead.\nAlso, profiling hooks being per-thread, either profiling must be enable before\nspawning threads (if you want to profile more than just the current thread),\nor profiled application must provide ways of enabling profiling afterwards\n- which is not very convenient.\n\n::\n\n  $ pprofile --threads 0 demo/threads.py\n  Command line: ['demo/threads.py']\n  Total duration: 1.00573s\n  File: demo/threads.py\n  File duration: 1.00168s (99.60%)\n  Line #|      Hits|         Time| Time per hit|      %|Source code\n  ------+----------+-------------+-------------+-------+-----------\n       1|         2|  3.21865e-05|  1.60933e-05|  0.00%|import threading\n       2|         1|  5.96046e-06|  5.96046e-06|  0.00%|import time\n       3|         0|            0|            0|  0.00%|\n       4|         2|   1.5974e-05|  7.98702e-06|  0.00%|def func():\n       5|         1|      1.00111|      1.00111| 99.54%|  time.sleep(1)\n       6|         0|            0|            0|  0.00%|\n       7|         2|  2.00272e-05|  1.00136e-05|  0.00%|def func2():\n       8|         1|  1.69277e-05|  1.69277e-05|  0.00%|  pass\n       9|         0|            0|            0|  0.00%|\n      10|         1|  1.81198e-05|  1.81198e-05|  0.00%|t1 = threading.Thread(target=func)\n  (call)|         1|  0.000610828|  0.000610828|  0.06%|# /usr/lib/python2.7/threading.py:436 __init__\n      11|         1|  1.52588e-05|  1.52588e-05|  0.00%|t2 = threading.Thread(target=func)\n  (call)|         1|  0.000438929|  0.000438929|  0.04%|# /usr/lib/python2.7/threading.py:436 __init__\n      12|         1|  4.79221e-05|  4.79221e-05|  0.00%|t1.start()\n  (call)|         1|  0.000843048|  0.000843048|  0.08%|# /usr/lib/python2.7/threading.py:485 start\n      13|         1|  6.48499e-05|  6.48499e-05|  0.01%|t2.start()\n  (call)|         1|   0.00115609|   0.00115609|  0.11%|# /usr/lib/python2.7/threading.py:485 start\n      14|         1|  0.000205994|  0.000205994|  0.02%|(func(), func2())\n  (call)|         1|      1.00112|      1.00112| 99.54%|# demo/threads.py:4 func\n  (call)|         1|  3.09944e-05|  3.09944e-05|  0.00%|# demo/threads.py:7 func2\n      15|         1|  7.62939e-05|  7.62939e-05|  0.01%|t1.join()\n  (call)|         1|  0.000423908|  0.000423908|  0.04%|# /usr/lib/python2.7/threading.py:653 join\n      16|         1|  5.26905e-05|  5.26905e-05|  0.01%|t2.join()\n  (call)|         1|  0.000320196|  0.000320196|  0.03%|# /usr/lib/python2.7/threading.py:653 join\n\nNote that time.sleep call is not counted as such. For some reason, python is\nnot generating c_call/c_return/c_exception events (which are ignored by current\ncode, as a result).\n\nStatistic profiling\n-------------------\n\nIn statistic profiling mode, pprofile periodically snapshots the current\ncallstack(s) of current process to see what is being executed.\nAs a result, profiler overhead can be dramatically reduced, making it possible\nto profile real workloads. Also, as statistic profiling acts at the\nwhole-process level, it can be toggled independently of profiled code.\n\nThe downside of statistic profiling is that output lacks timing information,\nwhich makes it harder to understand.\n\n::\n\n  $ pprofile --statistic .01 demo/threads.py\n  Command line: ['demo/threads.py']\n  Total duration: 1.0026s\n  File: demo/threads.py\n  File duration: 0s (0.00%)\n  Line #|      Hits|         Time| Time per hit|      %|Source code\n  ------+----------+-------------+-------------+-------+-----------\n       1|         0|            0|            0|  0.00%|import threading\n       2|         0|            0|            0|  0.00%|import time\n       3|         0|            0|            0|  0.00%|\n       4|         0|            0|            0|  0.00%|def func():\n       5|       288|            0|            0|  0.00%|  time.sleep(1)\n       6|         0|            0|            0|  0.00%|\n       7|         0|            0|            0|  0.00%|def func2():\n       8|         0|            0|            0|  0.00%|  pass\n       9|         0|            0|            0|  0.00%|\n      10|         0|            0|            0|  0.00%|t1 = threading.Thread(target=func)\n      11|         0|            0|            0|  0.00%|t2 = threading.Thread(target=func)\n      12|         0|            0|            0|  0.00%|t1.start()\n      13|         0|            0|            0|  0.00%|t2.start()\n      14|         0|            0|            0|  0.00%|(func(), func2())\n  (call)|        96|            0|            0|  0.00%|# demo/threads.py:4 func\n      15|         0|            0|            0|  0.00%|t1.join()\n      16|         0|            0|            0|  0.00%|t2.join()\n  File: /usr/lib/python2.7/threading.py\n  File duration: 0s (0.00%)\n  Line #|      Hits|         Time| Time per hit|      %|Source code\n  ------+----------+-------------+-------------+-------+-----------\n  [...]\n     308|         0|            0|            0|  0.00%|    def wait(self, timeout=None):\n  [...]\n     338|         0|            0|            0|  0.00%|            if timeout is None:\n     339|         1|            0|            0|  0.00%|                waiter.acquire()\n     340|         0|            0|            0|  0.00%|                if __debug__:\n  [...]\n     600|         0|            0|            0|  0.00%|    def wait(self, timeout=None):\n  [...]\n     617|         0|            0|            0|  0.00%|            if not self.__flag:\n     618|         0|            0|            0|  0.00%|                self.__cond.wait(timeout)\n  (call)|         1|            0|            0|  0.00%|# /usr/lib/python2.7/threading.py:308 wait\n  [...]\n     724|         0|            0|            0|  0.00%|    def start(self):\n  [...]\n     748|         0|            0|            0|  0.00%|        self.__started.wait()\n  (call)|         1|            0|            0|  0.00%|# /usr/lib/python2.7/threading.py:600 wait\n     749|         0|            0|            0|  0.00%|\n     750|         0|            0|            0|  0.00%|    def run(self):\n  [...]\n     760|         0|            0|            0|  0.00%|            if self.__target:\n     761|         0|            0|            0|  0.00%|                self.__target(*self.__args, **self.__kwargs)\n  (call)|       192|            0|            0|  0.00%|# demo/threads.py:4 func\n     762|         0|            0|            0|  0.00%|        finally:\n  [...]\n     767|         0|            0|            0|  0.00%|    def __bootstrap(self):\n  [...]\n     780|         0|            0|            0|  0.00%|        try:\n     781|         0|            0|            0|  0.00%|            self.__bootstrap_inner()\n  (call)|       192|            0|            0|  0.00%|# /usr/lib/python2.7/threading.py:790 __bootstrap_inner\n  [...]\n     790|         0|            0|            0|  0.00%|    def __bootstrap_inner(self):\n  [...]\n     807|         0|            0|            0|  0.00%|            try:\n     808|         0|            0|            0|  0.00%|                self.run()\n  (call)|       192|            0|            0|  0.00%|# /usr/lib/python2.7/threading.py:750 run\n\nSome details are lost (not all executed lines have a non-null hit-count), but\nthe hot spot is still easily identifiable in this trivial example, and its call\nstack is still visible.\n\nThread-aware profiling\n======================\n\n``ThreadProfile`` class provides the same features as ``Profile``, but uses\n``threading.settrace`` to propagate tracing to ``threading.Thread`` threads\nstarted after profiling is enabled.\n\nLimitations\n-----------\n\nThe time spent in another thread is not discounted from interrupted line.\nOn the long run, it should not be a problem if switches are evenly distributed\namong lines, but threads executing fewer lines will appear as eating more CPU\ntime than they really do.\n\nThis is not specific to simultaneous multi-thread profiling: profiling a single\nthread of a multi-threaded application will also be polluted by time spent in\nother threads.\n\nExample (lines are reported as taking longer to execute when profiled along\nwith another thread - although the other thread is not profiled)::\n\n  $ demo/embedded.py\n  Total duration: 1.00013s\n  File: demo/embedded.py\n  File duration: 1.00003s (99.99%)\n  Line #|      Hits|         Time| Time per hit|      %|Source code\n  ------+----------+-------------+-------------+-------+-----------\n       1|         0|            0|            0|  0.00%|#!/usr/bin/env python\n       2|         0|            0|            0|  0.00%|import threading\n       3|         0|            0|            0|  0.00%|import pprofile\n       4|         0|            0|            0|  0.00%|import time\n       5|         0|            0|            0|  0.00%|import sys\n       6|         0|            0|            0|  0.00%|\n       7|         1|   1.5974e-05|   1.5974e-05|  0.00%|def func():\n       8|         0|            0|            0|  0.00%|  # Busy loop, so context switches happen\n       9|         1|  1.40667e-05|  1.40667e-05|  0.00%|  end = time.time() + 1\n      10|    146604|     0.511392|  3.48826e-06| 51.13%|  while time.time() < end:\n      11|    146603|      0.48861|  3.33288e-06| 48.85%|    pass\n      12|         0|            0|            0|  0.00%|\n      13|         0|            0|            0|  0.00%|# Single-treaded run\n      14|         0|            0|            0|  0.00%|prof = pprofile.Profile()\n      15|         0|            0|            0|  0.00%|with prof:\n      16|         0|            0|            0|  0.00%|  func()\n  (call)|         1|      1.00003|      1.00003| 99.99%|# ./demo/embedded.py:7 func\n      17|         0|            0|            0|  0.00%|prof.annotate(sys.stdout, __file__)\n      18|         0|            0|            0|  0.00%|\n      19|         0|            0|            0|  0.00%|# Dual-threaded run\n      20|         0|            0|            0|  0.00%|t1 = threading.Thread(target=func)\n      21|         0|            0|            0|  0.00%|prof = pprofile.Profile()\n      22|         0|            0|            0|  0.00%|with prof:\n      23|         0|            0|            0|  0.00%|  t1.start()\n      24|         0|            0|            0|  0.00%|  func()\n      25|         0|            0|            0|  0.00%|  t1.join()\n      26|         0|            0|            0|  0.00%|prof.annotate(sys.stdout, __file__)\n  Total duration: 1.00129s\n  File: demo/embedded.py\n  File duration: 1.00004s (99.88%)\n  Line #|      Hits|         Time| Time per hit|      %|Source code\n  ------+----------+-------------+-------------+-------+-----------\n  [...]\n       7|         1|  1.50204e-05|  1.50204e-05|  0.00%|def func():\n       8|         0|            0|            0|  0.00%|  # Busy loop, so context switches happen\n       9|         1|  2.38419e-05|  2.38419e-05|  0.00%|  end = time.time() + 1\n      10|     64598|     0.538571|  8.33728e-06| 53.79%|  while time.time() < end:\n      11|     64597|     0.461432|  7.14324e-06| 46.08%|    pass\n  [...]\n\nThis also means that the sum of the percentage of all lines can exceed 100%. It\ncan reach the number of concurrent threads (200% with 2 threads being busy for\nthe whole profiled execution time, etc).\n\nExample with 3 threads::\n\n  $ pprofile demo/threads.py\n  Command line: ['demo/threads.py']\n  Total duration: 1.00798s\n  File: demo/threads.py\n  File duration: 3.00604s (298.22%)\n  Line #|      Hits|         Time| Time per hit|      %|Source code\n  ------+----------+-------------+-------------+-------+-----------\n       1|         2|  3.21865e-05|  1.60933e-05|  0.00%|import threading\n       2|         1|  6.91414e-06|  6.91414e-06|  0.00%|import time\n       3|         0|            0|            0|  0.00%|\n       4|         4|  3.91006e-05|  9.77516e-06|  0.00%|def func():\n       5|         3|      3.00539|       1.0018|298.16%|  time.sleep(1)\n       6|         0|            0|            0|  0.00%|\n       7|         2|  2.31266e-05|  1.15633e-05|  0.00%|def func2():\n       8|         1|  2.38419e-05|  2.38419e-05|  0.00%|  pass\n       9|         0|            0|            0|  0.00%|\n      10|         1|  1.81198e-05|  1.81198e-05|  0.00%|t1 = threading.Thread(target=func)\n  (call)|         1|  0.000612974|  0.000612974|  0.06%|# /usr/lib/python2.7/threading.py:436 __init__\n      11|         1|  1.57356e-05|  1.57356e-05|  0.00%|t2 = threading.Thread(target=func)\n  (call)|         1|  0.000438213|  0.000438213|  0.04%|# /usr/lib/python2.7/threading.py:436 __init__\n      12|         1|  6.60419e-05|  6.60419e-05|  0.01%|t1.start()\n  (call)|         1|  0.000913858|  0.000913858|  0.09%|# /usr/lib/python2.7/threading.py:485 start\n      13|         1|   6.8903e-05|   6.8903e-05|  0.01%|t2.start()\n  (call)|         1|   0.00167513|   0.00167513|  0.17%|# /usr/lib/python2.7/threading.py:485 start\n      14|         1|  0.000200272|  0.000200272|  0.02%|(func(), func2())\n  (call)|         1|      1.00274|      1.00274| 99.48%|# demo/threads.py:4 func\n  (call)|         1|  4.19617e-05|  4.19617e-05|  0.00%|# demo/threads.py:7 func2\n      15|         1|  9.58443e-05|  9.58443e-05|  0.01%|t1.join()\n  (call)|         1|  0.000411987|  0.000411987|  0.04%|# /usr/lib/python2.7/threading.py:653 join\n      16|         1|  5.29289e-05|  5.29289e-05|  0.01%|t2.join()\n  (call)|         1|  0.000316143|  0.000316143|  0.03%|# /usr/lib/python2.7/threading.py:653 join\n\nNote that the call time is not added to file total: it's already accounted\nfor inside \"func\".\n\nWhy another profiler ?\n======================\n\nPython's standard profiling tools have a callable-level granularity, which\nmeans it is only possible to tell which function is a hot-spot, not which\nlines in that function.\n\nRobert Kern's line_profiler_ is a very nice alternative providing line-level\nprofiling granularity, but in my opinion it has a few drawbacks which (in\naddition to the attractive technical challenge) made me start pprofile:\n\n- It is not pure-python. This choice makes sense for performance\n  but makes usage with pypy difficult and requires installation (I value\n  execution straight from checkout).\n\n- It requires source code modification to select what should be profiled.\n  I prefer to have the option to do an in-depth, non-intrusive profiling.\n\n- As an effect of previous point, it does not have a notion above individual\n  callable, annotating functions but not whole files - preventing module\n  import profiling.\n\n- Profiling recursive code provides unexpected results (recursion cost is\n  accumulated on callable's first line) because it doesn't track call stack.\n  This may be unintended, and may be fixed at some point in line_profiler.\n\n.. _line_profiler: https://github.com/rkern/line_profiler\n.. _`Callgrind Profile Format`: http://valgrind.org/docs/manual/cl-format.html\n.. _kcachegrind: http://kcachegrind.sourceforge.net\n.. _qcachegrind: http://sourceforge.net/projects/qcachegrindwin/\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/vpelletier/pprofile", "keywords": "", "license": "GPL 2+", "maintainer": "", "maintainer_email": "", "name": "pprofile", "package_url": "https://pypi.org/project/pprofile/", "platform": "any", "project_url": "https://pypi.org/project/pprofile/", "project_urls": {"Homepage": "http://github.com/vpelletier/pprofile"}, "release_url": "https://pypi.org/project/pprofile/2.0.4/", "requires_dist": null, "requires_python": "", "summary": "Line-granularity, thread-aware deterministic and statistic pure-python profiler", "version": "2.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#usage\" id=\"id5\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#profiling-overhead\" id=\"id6\" rel=\"nofollow\">Profiling overhead</a></li>\n</ul>\n</li>\n<li><a href=\"#output\" id=\"id7\" rel=\"nofollow\">Output</a><ul>\n<li><a href=\"#callgrind\" id=\"id8\" rel=\"nofollow\">Callgrind</a></li>\n<li><a href=\"#annotated-code\" id=\"id9\" rel=\"nofollow\">Annotated code</a></li>\n</ul>\n</li>\n<li><a href=\"#profiling-modes\" id=\"id10\" rel=\"nofollow\">Profiling modes</a><ul>\n<li><a href=\"#deterministic-profiling\" id=\"id11\" rel=\"nofollow\">Deterministic profiling</a></li>\n<li><a href=\"#statistic-profiling\" id=\"id12\" rel=\"nofollow\">Statistic profiling</a></li>\n</ul>\n</li>\n<li><a href=\"#thread-aware-profiling\" id=\"id13\" rel=\"nofollow\">Thread-aware profiling</a><ul>\n<li><a href=\"#limitations\" id=\"id14\" rel=\"nofollow\">Limitations</a></li>\n</ul>\n</li>\n<li><a href=\"#why-another-profiler\" id=\"id15\" rel=\"nofollow\">Why another profiler ?</a></li>\n</ul>\n</div>\n<p>Line-granularity, thread-aware deterministic and statistic pure-python profiler</p>\n<p>Inspired from Robert Kern\u2019s <a href=\"https://github.com/rkern/line_profiler\" rel=\"nofollow\">line_profiler</a> .</p>\n<div id=\"usage\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Usage</a></h2>\n<p>As a command:</p>\n<pre>$ pprofile some_python_executable arg1 ...\n</pre>\n<p>Once <cite>some_python_executable</cite> returns, prints annotated code of each file\ninvolved in the execution.</p>\n<p>As a command, ignoring any files from default <cite>sys.path</cite> (ie, python modules\nthemselves), for shorter output:</p>\n<pre>$ pprofile --exclude-syspath some_python_executable arg1 ...\n</pre>\n<p>Executing a module, like <code>python -m</code>. <cite>\u2013exclude-syspath</cite> is not\nrecommended in this mode, as it will likely hide what you intend to profile.\nAlso, explicitly ending pprofile arguments with <cite>\u2013</cite> will prevent accidentally\nstealing command\u2019s arguments:</p>\n<pre>$ pprofile -m some_python_module -- arg1 ...\n</pre>\n<p>As a module:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pprofile</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">someHotSpotCallable</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Deterministic profiler</span>\n    <span class=\"n\">prof</span> <span class=\"o\">=</span> <span class=\"n\">pprofile</span><span class=\"o\">.</span><span class=\"n\">Profile</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">prof</span><span class=\"p\">():</span>\n        <span class=\"c1\"># Code to profile</span>\n    <span class=\"n\">prof</span><span class=\"o\">.</span><span class=\"n\">print_stats</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">someOtherHotSpotCallable</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Statistic profiler</span>\n    <span class=\"n\">prof</span> <span class=\"o\">=</span> <span class=\"n\">pprofile</span><span class=\"o\">.</span><span class=\"n\">StatisticalProfile</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">prof</span><span class=\"p\">(</span>\n        <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"c1\"># Sample every 1ms</span>\n        <span class=\"n\">single</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># Only sample current thread</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># Code to profile</span>\n    <span class=\"n\">prof</span><span class=\"o\">.</span><span class=\"n\">print_stats</span><span class=\"p\">()</span>\n</pre>\n<p>For advanced usage, see <code>pprofile --help</code> and <code>pydoc pprofile</code>.</p>\n<div id=\"profiling-overhead\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Profiling overhead</a></h3>\n<p>pprofile default mode (<a href=\"#deterministic-profiling\" rel=\"nofollow\">Deterministic profiling</a>) has a large overhead.\nPart of the reason being that it is written to be as portable as possible\n(so no C extension). This large overhead can be an issue, which can be\navoided by using <a href=\"#statistic-profiling\" rel=\"nofollow\">Statistic profiling</a> at the cost of some result\nreadability decrease.</p>\n<p>Rule of thumb:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Code to profile runs for\u2026</th>\n<th><a href=\"#deterministic-profiling\" rel=\"nofollow\">Deterministic profiling</a></th>\n<th><a href=\"#statistic-profiling\" rel=\"nofollow\">Statistic profiling</a></th>\n</tr>\n</thead>\n<tbody>\n<tr><td>a few seconds</td>\n<td>Yes</td>\n<td>No <a href=\"#id3\" id=\"id1\" rel=\"nofollow\">[1]</a></td>\n</tr>\n<tr><td>a few minutes</td>\n<td>Maybe</td>\n<td>Yes</td>\n</tr>\n<tr><td>more (ex: daemon)</td>\n<td>No</td>\n<td>Yes <a href=\"#id4\" id=\"id2\" rel=\"nofollow\">[2]</a></td>\n</tr>\n</tbody>\n</table>\n<p>Once you identified the hot spot and you decide you need finer-grained\nprofiling to understand what needs fixing, you should try to make to-profile\ncode run for shorter time so you can reasonably use deterministic profiling:\nuse a smaller data set triggering the same code path, modify the code to only\nenable profiling on small pieces of code\u2026</p>\n<table id=\"id3\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>Statistic profiling will not have time to collect\nenough samples to produce usable output.</td></tr>\n</tbody>\n</table>\n<table id=\"id4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td>You may want to consider triggering pprofile from\na signal handler or other IPC mechanism to profile\na shorter subset. See <cite>zpprofile.py</cite> for how it can\nbe used to profile code inside a running (zope)\nservice (in which case the IPC mechanism is just\nZope normal URL handling).</td></tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"output\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Output</a></h2>\n<p>Supported output formats.</p>\n<div id=\"callgrind\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Callgrind</a></h3>\n<p>The most useful output mode of pprofile is <a href=\"http://valgrind.org/docs/manual/cl-format.html\" rel=\"nofollow\">Callgrind Profile Format</a>, allows\nbrowsing profiling results with <a href=\"http://kcachegrind.sourceforge.net\" rel=\"nofollow\">kcachegrind</a> (or <a href=\"http://sourceforge.net/projects/qcachegrindwin/\" rel=\"nofollow\">qcachegrind</a> on Windows).</p>\n<pre>$ pprofile --format callgrind --out cachegrind.out.threads demo/threads.py\n</pre>\n<p>Callgrind format is implicitly enabled if <tt><span class=\"pre\">--out</span></tt> basename starts with\n<tt>cachegrind.out.</tt>, so above command can be simplified as:</p>\n<pre>$ pprofile --out cachegrind.out.threads demo/threads.py\n</pre>\n<p>If you are analyzing callgrind traces on a different machine, you may want to\nuse the <tt><span class=\"pre\">--zipfile</span></tt> option to generate a zip file containing all files:</p>\n<pre>$ pprofile --out cachegrind.out.threads --zipfile threads_source.zip demo/threads.py\n</pre>\n<p>Generated files will use relative paths, so you can extract generated archive\nin the same path as profiling result, and kcachegrind will load them - and not\nyour system-wide files, which may differ.</p>\n</div>\n<div id=\"annotated-code\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Annotated code</a></h3>\n<p>Human-readable output, but can become difficult to use with large programs.</p>\n<pre>$ pprofile demo/threads.py\n</pre>\n</div>\n</div>\n<div id=\"profiling-modes\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Profiling modes</a></h2>\n<div id=\"deterministic-profiling\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Deterministic profiling</a></h3>\n<p>In deterministic profiling mode, pprofile gets notified of each executed line.\nThis mode generates very detailed reports, but at the cost of a large overhead.\nAlso, profiling hooks being per-thread, either profiling must be enable before\nspawning threads (if you want to profile more than just the current thread),\nor profiled application must provide ways of enabling profiling afterwards\n- which is not very convenient.</p>\n<pre>$ pprofile --threads 0 demo/threads.py\nCommand line: ['demo/threads.py']\nTotal duration: 1.00573s\nFile: demo/threads.py\nFile duration: 1.00168s (99.60%)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n     1|         2|  3.21865e-05|  1.60933e-05|  0.00%|import threading\n     2|         1|  5.96046e-06|  5.96046e-06|  0.00%|import time\n     3|         0|            0|            0|  0.00%|\n     4|         2|   1.5974e-05|  7.98702e-06|  0.00%|def func():\n     5|         1|      1.00111|      1.00111| 99.54%|  time.sleep(1)\n     6|         0|            0|            0|  0.00%|\n     7|         2|  2.00272e-05|  1.00136e-05|  0.00%|def func2():\n     8|         1|  1.69277e-05|  1.69277e-05|  0.00%|  pass\n     9|         0|            0|            0|  0.00%|\n    10|         1|  1.81198e-05|  1.81198e-05|  0.00%|t1 = threading.Thread(target=func)\n(call)|         1|  0.000610828|  0.000610828|  0.06%|# /usr/lib/python2.7/threading.py:436 __init__\n    11|         1|  1.52588e-05|  1.52588e-05|  0.00%|t2 = threading.Thread(target=func)\n(call)|         1|  0.000438929|  0.000438929|  0.04%|# /usr/lib/python2.7/threading.py:436 __init__\n    12|         1|  4.79221e-05|  4.79221e-05|  0.00%|t1.start()\n(call)|         1|  0.000843048|  0.000843048|  0.08%|# /usr/lib/python2.7/threading.py:485 start\n    13|         1|  6.48499e-05|  6.48499e-05|  0.01%|t2.start()\n(call)|         1|   0.00115609|   0.00115609|  0.11%|# /usr/lib/python2.7/threading.py:485 start\n    14|         1|  0.000205994|  0.000205994|  0.02%|(func(), func2())\n(call)|         1|      1.00112|      1.00112| 99.54%|# demo/threads.py:4 func\n(call)|         1|  3.09944e-05|  3.09944e-05|  0.00%|# demo/threads.py:7 func2\n    15|         1|  7.62939e-05|  7.62939e-05|  0.01%|t1.join()\n(call)|         1|  0.000423908|  0.000423908|  0.04%|# /usr/lib/python2.7/threading.py:653 join\n    16|         1|  5.26905e-05|  5.26905e-05|  0.01%|t2.join()\n(call)|         1|  0.000320196|  0.000320196|  0.03%|# /usr/lib/python2.7/threading.py:653 join\n</pre>\n<p>Note that time.sleep call is not counted as such. For some reason, python is\nnot generating c_call/c_return/c_exception events (which are ignored by current\ncode, as a result).</p>\n</div>\n<div id=\"statistic-profiling\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Statistic profiling</a></h3>\n<p>In statistic profiling mode, pprofile periodically snapshots the current\ncallstack(s) of current process to see what is being executed.\nAs a result, profiler overhead can be dramatically reduced, making it possible\nto profile real workloads. Also, as statistic profiling acts at the\nwhole-process level, it can be toggled independently of profiled code.</p>\n<p>The downside of statistic profiling is that output lacks timing information,\nwhich makes it harder to understand.</p>\n<pre>$ pprofile --statistic .01 demo/threads.py\nCommand line: ['demo/threads.py']\nTotal duration: 1.0026s\nFile: demo/threads.py\nFile duration: 0s (0.00%)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n     1|         0|            0|            0|  0.00%|import threading\n     2|         0|            0|            0|  0.00%|import time\n     3|         0|            0|            0|  0.00%|\n     4|         0|            0|            0|  0.00%|def func():\n     5|       288|            0|            0|  0.00%|  time.sleep(1)\n     6|         0|            0|            0|  0.00%|\n     7|         0|            0|            0|  0.00%|def func2():\n     8|         0|            0|            0|  0.00%|  pass\n     9|         0|            0|            0|  0.00%|\n    10|         0|            0|            0|  0.00%|t1 = threading.Thread(target=func)\n    11|         0|            0|            0|  0.00%|t2 = threading.Thread(target=func)\n    12|         0|            0|            0|  0.00%|t1.start()\n    13|         0|            0|            0|  0.00%|t2.start()\n    14|         0|            0|            0|  0.00%|(func(), func2())\n(call)|        96|            0|            0|  0.00%|# demo/threads.py:4 func\n    15|         0|            0|            0|  0.00%|t1.join()\n    16|         0|            0|            0|  0.00%|t2.join()\nFile: /usr/lib/python2.7/threading.py\nFile duration: 0s (0.00%)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n[...]\n   308|         0|            0|            0|  0.00%|    def wait(self, timeout=None):\n[...]\n   338|         0|            0|            0|  0.00%|            if timeout is None:\n   339|         1|            0|            0|  0.00%|                waiter.acquire()\n   340|         0|            0|            0|  0.00%|                if __debug__:\n[...]\n   600|         0|            0|            0|  0.00%|    def wait(self, timeout=None):\n[...]\n   617|         0|            0|            0|  0.00%|            if not self.__flag:\n   618|         0|            0|            0|  0.00%|                self.__cond.wait(timeout)\n(call)|         1|            0|            0|  0.00%|# /usr/lib/python2.7/threading.py:308 wait\n[...]\n   724|         0|            0|            0|  0.00%|    def start(self):\n[...]\n   748|         0|            0|            0|  0.00%|        self.__started.wait()\n(call)|         1|            0|            0|  0.00%|# /usr/lib/python2.7/threading.py:600 wait\n   749|         0|            0|            0|  0.00%|\n   750|         0|            0|            0|  0.00%|    def run(self):\n[...]\n   760|         0|            0|            0|  0.00%|            if self.__target:\n   761|         0|            0|            0|  0.00%|                self.__target(*self.__args, **self.__kwargs)\n(call)|       192|            0|            0|  0.00%|# demo/threads.py:4 func\n   762|         0|            0|            0|  0.00%|        finally:\n[...]\n   767|         0|            0|            0|  0.00%|    def __bootstrap(self):\n[...]\n   780|         0|            0|            0|  0.00%|        try:\n   781|         0|            0|            0|  0.00%|            self.__bootstrap_inner()\n(call)|       192|            0|            0|  0.00%|# /usr/lib/python2.7/threading.py:790 __bootstrap_inner\n[...]\n   790|         0|            0|            0|  0.00%|    def __bootstrap_inner(self):\n[...]\n   807|         0|            0|            0|  0.00%|            try:\n   808|         0|            0|            0|  0.00%|                self.run()\n(call)|       192|            0|            0|  0.00%|# /usr/lib/python2.7/threading.py:750 run\n</pre>\n<p>Some details are lost (not all executed lines have a non-null hit-count), but\nthe hot spot is still easily identifiable in this trivial example, and its call\nstack is still visible.</p>\n</div>\n</div>\n<div id=\"thread-aware-profiling\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Thread-aware profiling</a></h2>\n<p><tt>ThreadProfile</tt> class provides the same features as <tt>Profile</tt>, but uses\n<tt>threading.settrace</tt> to propagate tracing to <tt>threading.Thread</tt> threads\nstarted after profiling is enabled.</p>\n<div id=\"limitations\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Limitations</a></h3>\n<p>The time spent in another thread is not discounted from interrupted line.\nOn the long run, it should not be a problem if switches are evenly distributed\namong lines, but threads executing fewer lines will appear as eating more CPU\ntime than they really do.</p>\n<p>This is not specific to simultaneous multi-thread profiling: profiling a single\nthread of a multi-threaded application will also be polluted by time spent in\nother threads.</p>\n<p>Example (lines are reported as taking longer to execute when profiled along\nwith another thread - although the other thread is not profiled):</p>\n<pre>$ demo/embedded.py\nTotal duration: 1.00013s\nFile: demo/embedded.py\nFile duration: 1.00003s (99.99%)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n     1|         0|            0|            0|  0.00%|#!/usr/bin/env python\n     2|         0|            0|            0|  0.00%|import threading\n     3|         0|            0|            0|  0.00%|import pprofile\n     4|         0|            0|            0|  0.00%|import time\n     5|         0|            0|            0|  0.00%|import sys\n     6|         0|            0|            0|  0.00%|\n     7|         1|   1.5974e-05|   1.5974e-05|  0.00%|def func():\n     8|         0|            0|            0|  0.00%|  # Busy loop, so context switches happen\n     9|         1|  1.40667e-05|  1.40667e-05|  0.00%|  end = time.time() + 1\n    10|    146604|     0.511392|  3.48826e-06| 51.13%|  while time.time() &lt; end:\n    11|    146603|      0.48861|  3.33288e-06| 48.85%|    pass\n    12|         0|            0|            0|  0.00%|\n    13|         0|            0|            0|  0.00%|# Single-treaded run\n    14|         0|            0|            0|  0.00%|prof = pprofile.Profile()\n    15|         0|            0|            0|  0.00%|with prof:\n    16|         0|            0|            0|  0.00%|  func()\n(call)|         1|      1.00003|      1.00003| 99.99%|# ./demo/embedded.py:7 func\n    17|         0|            0|            0|  0.00%|prof.annotate(sys.stdout, __file__)\n    18|         0|            0|            0|  0.00%|\n    19|         0|            0|            0|  0.00%|# Dual-threaded run\n    20|         0|            0|            0|  0.00%|t1 = threading.Thread(target=func)\n    21|         0|            0|            0|  0.00%|prof = pprofile.Profile()\n    22|         0|            0|            0|  0.00%|with prof:\n    23|         0|            0|            0|  0.00%|  t1.start()\n    24|         0|            0|            0|  0.00%|  func()\n    25|         0|            0|            0|  0.00%|  t1.join()\n    26|         0|            0|            0|  0.00%|prof.annotate(sys.stdout, __file__)\nTotal duration: 1.00129s\nFile: demo/embedded.py\nFile duration: 1.00004s (99.88%)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n[...]\n     7|         1|  1.50204e-05|  1.50204e-05|  0.00%|def func():\n     8|         0|            0|            0|  0.00%|  # Busy loop, so context switches happen\n     9|         1|  2.38419e-05|  2.38419e-05|  0.00%|  end = time.time() + 1\n    10|     64598|     0.538571|  8.33728e-06| 53.79%|  while time.time() &lt; end:\n    11|     64597|     0.461432|  7.14324e-06| 46.08%|    pass\n[...]\n</pre>\n<p>This also means that the sum of the percentage of all lines can exceed 100%. It\ncan reach the number of concurrent threads (200% with 2 threads being busy for\nthe whole profiled execution time, etc).</p>\n<p>Example with 3 threads:</p>\n<pre>$ pprofile demo/threads.py\nCommand line: ['demo/threads.py']\nTotal duration: 1.00798s\nFile: demo/threads.py\nFile duration: 3.00604s (298.22%)\nLine #|      Hits|         Time| Time per hit|      %|Source code\n------+----------+-------------+-------------+-------+-----------\n     1|         2|  3.21865e-05|  1.60933e-05|  0.00%|import threading\n     2|         1|  6.91414e-06|  6.91414e-06|  0.00%|import time\n     3|         0|            0|            0|  0.00%|\n     4|         4|  3.91006e-05|  9.77516e-06|  0.00%|def func():\n     5|         3|      3.00539|       1.0018|298.16%|  time.sleep(1)\n     6|         0|            0|            0|  0.00%|\n     7|         2|  2.31266e-05|  1.15633e-05|  0.00%|def func2():\n     8|         1|  2.38419e-05|  2.38419e-05|  0.00%|  pass\n     9|         0|            0|            0|  0.00%|\n    10|         1|  1.81198e-05|  1.81198e-05|  0.00%|t1 = threading.Thread(target=func)\n(call)|         1|  0.000612974|  0.000612974|  0.06%|# /usr/lib/python2.7/threading.py:436 __init__\n    11|         1|  1.57356e-05|  1.57356e-05|  0.00%|t2 = threading.Thread(target=func)\n(call)|         1|  0.000438213|  0.000438213|  0.04%|# /usr/lib/python2.7/threading.py:436 __init__\n    12|         1|  6.60419e-05|  6.60419e-05|  0.01%|t1.start()\n(call)|         1|  0.000913858|  0.000913858|  0.09%|# /usr/lib/python2.7/threading.py:485 start\n    13|         1|   6.8903e-05|   6.8903e-05|  0.01%|t2.start()\n(call)|         1|   0.00167513|   0.00167513|  0.17%|# /usr/lib/python2.7/threading.py:485 start\n    14|         1|  0.000200272|  0.000200272|  0.02%|(func(), func2())\n(call)|         1|      1.00274|      1.00274| 99.48%|# demo/threads.py:4 func\n(call)|         1|  4.19617e-05|  4.19617e-05|  0.00%|# demo/threads.py:7 func2\n    15|         1|  9.58443e-05|  9.58443e-05|  0.01%|t1.join()\n(call)|         1|  0.000411987|  0.000411987|  0.04%|# /usr/lib/python2.7/threading.py:653 join\n    16|         1|  5.29289e-05|  5.29289e-05|  0.01%|t2.join()\n(call)|         1|  0.000316143|  0.000316143|  0.03%|# /usr/lib/python2.7/threading.py:653 join\n</pre>\n<p>Note that the call time is not added to file total: it\u2019s already accounted\nfor inside \u201cfunc\u201d.</p>\n</div>\n</div>\n<div id=\"why-another-profiler\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Why another profiler ?</a></h2>\n<p>Python\u2019s standard profiling tools have a callable-level granularity, which\nmeans it is only possible to tell which function is a hot-spot, not which\nlines in that function.</p>\n<p>Robert Kern\u2019s <a href=\"https://github.com/rkern/line_profiler\" rel=\"nofollow\">line_profiler</a> is a very nice alternative providing line-level\nprofiling granularity, but in my opinion it has a few drawbacks which (in\naddition to the attractive technical challenge) made me start pprofile:</p>\n<ul>\n<li>It is not pure-python. This choice makes sense for performance\nbut makes usage with pypy difficult and requires installation (I value\nexecution straight from checkout).</li>\n<li>It requires source code modification to select what should be profiled.\nI prefer to have the option to do an in-depth, non-intrusive profiling.</li>\n<li>As an effect of previous point, it does not have a notion above individual\ncallable, annotating functions but not whole files - preventing module\nimport profiling.</li>\n<li>Profiling recursive code provides unexpected results (recursion cost is\naccumulated on callable\u2019s first line) because it doesn\u2019t track call stack.\nThis may be unintended, and may be fixed at some point in line_profiler.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7051172, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "75d5c1ef54bca1ddb58a458d3296f289", "sha256": "57b93441c1c976457defb75b6b3b5411196419dce45c15ce6788efc7a21b4986"}, "downloads": -1, "filename": "pprofile-1.0.tar.gz", "has_sig": false, "md5_digest": "75d5c1ef54bca1ddb58a458d3296f289", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7494, "upload_time": "2013-04-21T13:25:00", "upload_time_iso_8601": "2013-04-21T13:25:00.555255Z", "url": "https://files.pythonhosted.org/packages/c6/82/cc0be7db74435767870a7189daf3e39886bd85c4cbd4f04278084d65fdf8/pprofile-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "586c1e882736e6fca3244b492d2528f0", "sha256": "4922d7427b4e8aa343d007981cde8bce99a11a17c837fc7c123fc4132bde9d35"}, "downloads": -1, "filename": "pprofile-1.0.1.tar.gz", "has_sig": false, "md5_digest": "586c1e882736e6fca3244b492d2528f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8486, "upload_time": "2013-04-21T14:13:07", "upload_time_iso_8601": "2013-04-21T14:13:07.384647Z", "url": "https://files.pythonhosted.org/packages/f5/aa/aeeb66fca7e051a410a3d564edd7ef78fcf037a32d1b478e6c685696cdaa/pprofile-1.0.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "430521688426e20209c0f8b9444da592", "sha256": "74f58c598066d7430e481f4c2d5e74888192c3e0a1fc2febb9dd44223eeda54a"}, "downloads": -1, "filename": "pprofile-1.1.tar.gz", "has_sig": false, "md5_digest": "430521688426e20209c0f8b9444da592", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8915, "upload_time": "2013-04-21T22:09:55", "upload_time_iso_8601": "2013-04-21T22:09:55.825306Z", "url": "https://files.pythonhosted.org/packages/0c/2f/0c26a384e9501469aed66f4d0788a4e755a01328ac9f65fbdf86f75d6707/pprofile-1.1.tar.gz", "yanked": false}], "1.10.0": [{"comment_text": "", "digests": {"md5": "1cb9e6a7455b2c50f43f5862befb7902", "sha256": "65de8d5761769d6bc4eb78db6e35bc7efd31672c5638690b3609831cb1e5b8a1"}, "downloads": -1, "filename": "pprofile-1.10.0.tar.gz", "has_sig": false, "md5_digest": "1cb9e6a7455b2c50f43f5862befb7902", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28572, "upload_time": "2016-10-17T00:28:16", "upload_time_iso_8601": "2016-10-17T00:28:16.572145Z", "url": "https://files.pythonhosted.org/packages/a2/1a/47fb77efb2a08a6d521d59f6f30cadf7308f735f3028e814afae281e0e7c/pprofile-1.10.0.tar.gz", "yanked": false}], "1.10.1": [{"comment_text": "", "digests": {"md5": "3b648446f5fd9163ceca00f431179833", "sha256": "802dd01c860420b7a9e711be5daf946e8e1332d6fd40496c74fd482ebc59fd24"}, "downloads": -1, "filename": "pprofile-1.10.1.tar.gz", "has_sig": false, "md5_digest": "3b648446f5fd9163ceca00f431179833", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28610, "upload_time": "2017-05-01T23:33:20", "upload_time_iso_8601": "2017-05-01T23:33:20.508944Z", "url": "https://files.pythonhosted.org/packages/01/75/21b017f093b97879f48c01452468b4a2bf70370ba73d2c8e64d75085818f/pprofile-1.10.1.tar.gz", "yanked": false}], "1.11.0": [{"comment_text": "", "digests": {"md5": "43161a27025469eddc5f7147f33a1960", "sha256": "301f465a97cc965c60111a0609552a877a699562b06a3205ee6c291b835c416b"}, "downloads": -1, "filename": "pprofile-1.11.0.tar.gz", "has_sig": false, "md5_digest": "43161a27025469eddc5f7147f33a1960", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29846, "upload_time": "2017-07-24T00:12:23", "upload_time_iso_8601": "2017-07-24T00:12:23.395085Z", "url": "https://files.pythonhosted.org/packages/a9/f6/021be8adb167578fa946d7f83d40383618fdf557a144d02e2e576ad9233f/pprofile-1.11.0.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "b31ac1f22ff08bf19b732ee762135d4c", "sha256": "1851fb7f30ce9141dfc72e4e4d291a0f8e352a21b9622182e99b993ce53630c8"}, "downloads": -1, "filename": "pprofile-1.2.tar.gz", "has_sig": false, "md5_digest": "b31ac1f22ff08bf19b732ee762135d4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10842, "upload_time": "2013-04-24T20:25:40", "upload_time_iso_8601": "2013-04-24T20:25:40.421674Z", "url": "https://files.pythonhosted.org/packages/84/d7/3fb2741617ce1e9fa8a27437ba96f20be9fdc10d1bb75b4f00f9bdc4cb6d/pprofile-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "c055eaca8317086839a9d14c5e1b2e75", "sha256": "e19988bc2af782ca4d7b6e095f57fa78638b5fce8abcd10cd2d0d4cc85b7ea07"}, "downloads": -1, "filename": "pprofile-1.2.1.tar.gz", "has_sig": false, "md5_digest": "c055eaca8317086839a9d14c5e1b2e75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10977, "upload_time": "2013-04-24T21:18:48", "upload_time_iso_8601": "2013-04-24T21:18:48.626333Z", "url": "https://files.pythonhosted.org/packages/4d/e1/a230fb14e3f8fe24dc429b9761ac6f2e3b428434a8e5bd430b3848e0cfd3/pprofile-1.2.1.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "897d5c7dbacdc09821a29b262c72c038", "sha256": "736c14e516d0bd04be673574c2e6fb15d4fbbbd2335a4737967492aa5948b07b"}, "downloads": -1, "filename": "pprofile-1.3.tar.gz", "has_sig": false, "md5_digest": "897d5c7dbacdc09821a29b262c72c038", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10990, "upload_time": "2013-06-08T21:52:58", "upload_time_iso_8601": "2013-06-08T21:52:58.055650Z", "url": "https://files.pythonhosted.org/packages/0b/38/41e576c388b975dc774f34cdabb655ef95c88c87e9866d1bc40ecd3e96b4/pprofile-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "576089a0c1ea90e07bde0b0feebc8da7", "sha256": "c8a391460899bb080c665ae72f148d20b09bb479e5dbc25e47b40798c915aac6"}, "downloads": -1, "filename": "pprofile-1.4.tar.gz", "has_sig": false, "md5_digest": "576089a0c1ea90e07bde0b0feebc8da7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11242, "upload_time": "2013-06-09T08:52:05", "upload_time_iso_8601": "2013-06-09T08:52:05.142418Z", "url": "https://files.pythonhosted.org/packages/ba/8c/546e8b3db4b6521e8ff07cab27de153684c32024959f5549bca7f765f26a/pprofile-1.4.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "67205e3c5389c15f0ad039386891e21b", "sha256": "3e7c9fdcb314793b1c84d741eaaffc8ddcb90d9af3b9014202df929091ebfdb4"}, "downloads": -1, "filename": "pprofile-1.4.1.tar.gz", "has_sig": false, "md5_digest": "67205e3c5389c15f0ad039386891e21b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11259, "upload_time": "2013-06-09T11:26:13", "upload_time_iso_8601": "2013-06-09T11:26:13.151785Z", "url": "https://files.pythonhosted.org/packages/2e/ff/5fd5e08ce59b61c54d67f9c59c3e9d1fa4752e0232beaadaceef5cc6e1ab/pprofile-1.4.1.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "61707c2933bd3753396f4388b566e2b6", "sha256": "e839c1007012da835666f436a615af2763d3a70cbe0b337b314e6d8a362e3fbf"}, "downloads": -1, "filename": "pprofile-1.5.tar.gz", "has_sig": false, "md5_digest": "61707c2933bd3753396f4388b566e2b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11417, "upload_time": "2013-06-10T21:10:10", "upload_time_iso_8601": "2013-06-10T21:10:10.175334Z", "url": "https://files.pythonhosted.org/packages/3b/26/70a0950dd4ef92dce071087c0a05e17477f83fbb580406264680d648285b/pprofile-1.5.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "b4b1d871ea1c17d038eddbdf8e635121", "sha256": "564911e0df2873a253846f6bebadd2bed1c14f585ce40829a7848aa622251d06"}, "downloads": -1, "filename": "pprofile-1.6.tar.gz", "has_sig": false, "md5_digest": "b4b1d871ea1c17d038eddbdf8e635121", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14870, "upload_time": "2013-08-10T14:14:31", "upload_time_iso_8601": "2013-08-10T14:14:31.199275Z", "url": "https://files.pythonhosted.org/packages/f8/84/bad15a73d2513470b3174492b4b037551ee660c41d1a4103590d56e4e701/pprofile-1.6.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "fa31a8721946e3679734cd7991fc6bf7", "sha256": "cfef38a4eb6a1809ba320533566c0fe2f5babd40ef57605a66e750bd1c9b25b1"}, "downloads": -1, "filename": "pprofile-1.6.1.tar.gz", "has_sig": false, "md5_digest": "fa31a8721946e3679734cd7991fc6bf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14859, "upload_time": "2013-08-14T13:38:58", "upload_time_iso_8601": "2013-08-14T13:38:58.694822Z", "url": "https://files.pythonhosted.org/packages/99/9c/c7599572d6adce6342c99a1e8a7fa5176129c331e3d7bd1f4390f415590e/pprofile-1.6.1.tar.gz", "yanked": false}], "1.6.2": [{"comment_text": "", "digests": {"md5": "17ef1092013ec9e21918935179f135dd", "sha256": "2f12089ee94d937c7211d6ea557c2d5152f1a3c822b346d93cd212205c373565"}, "downloads": -1, "filename": "pprofile-1.6.2.tar.gz", "has_sig": false, "md5_digest": "17ef1092013ec9e21918935179f135dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14295, "upload_time": "2013-08-25T20:49:26", "upload_time_iso_8601": "2013-08-25T20:49:26.315146Z", "url": "https://files.pythonhosted.org/packages/c0/e4/9b6e607ebe677fc489333b8b2ad70c3b91a5cba845740b326a5ac1b63bc8/pprofile-1.6.2.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "2ae240c5836782af52841abb75ca06dd", "sha256": "6346530b3c616bf7c9053e65799a25aedafe77e388d0945c4167a5d458e0258a"}, "downloads": -1, "filename": "pprofile-1.7.tar.gz", "has_sig": false, "md5_digest": "2ae240c5836782af52841abb75ca06dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15591, "upload_time": "2013-12-12T21:30:27", "upload_time_iso_8601": "2013-12-12T21:30:27.374761Z", "url": "https://files.pythonhosted.org/packages/16/ad/570434c007921bc1e857304f3e28c24b35ab1703e940d8bae1232761587f/pprofile-1.7.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "1f94a53890414b4524be5d9b13b3847a", "sha256": "694a6f0b913ba9a1c1207697e174a0901c59136ec80de0c59c6655db6826ef39"}, "downloads": -1, "filename": "pprofile-1.7.1.tar.gz", "has_sig": false, "md5_digest": "1f94a53890414b4524be5d9b13b3847a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16087, "upload_time": "2013-12-18T10:06:56", "upload_time_iso_8601": "2013-12-18T10:06:56.612232Z", "url": "https://files.pythonhosted.org/packages/dd/b7/21c788df6f0027410b5678192826064dceb9ef23f36c2c07ca718bbda065/pprofile-1.7.1.tar.gz", "yanked": false}], "1.7.2": [{"comment_text": "", "digests": {"md5": "54c9cebd083e16849727a0fae7ae5508", "sha256": "55eca9e51ac9b12e5cc53d024461263080f6730483555aa7cefa6288e727a03a"}, "downloads": -1, "filename": "pprofile-1.7.2.tar.gz", "has_sig": false, "md5_digest": "54c9cebd083e16849727a0fae7ae5508", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16094, "upload_time": "2014-05-06T15:02:03", "upload_time_iso_8601": "2014-05-06T15:02:03.560259Z", "url": "https://files.pythonhosted.org/packages/54/13/744c9f4fc8453eb1f2c19131ac9d9b53c71e191a2ee0698d8575f682c0f0/pprofile-1.7.2.tar.gz", "yanked": false}], "1.7.3": [{"comment_text": "", "digests": {"md5": "b2f2bc32600bed3336910b6887259a28", "sha256": "c3a6b35e331d394968e2cbe3da43b67ab813f9f97edd479dfacc0e90733da08a"}, "downloads": -1, "filename": "pprofile-1.7.3.tar.gz", "has_sig": false, "md5_digest": "b2f2bc32600bed3336910b6887259a28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15923, "upload_time": "2015-05-02T14:55:53", "upload_time_iso_8601": "2015-05-02T14:55:53.279924Z", "url": "https://files.pythonhosted.org/packages/0b/09/c021d9710c73d036316afc077c957cfe5c8def5eb6ec4470bb7493c9072d/pprofile-1.7.3.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "752b8135d23dfd4ca5b753c4dd2715ef", "sha256": "74087c5f50c72898553ac1e4caffb0321d1baf2c0b76a4a8fb429fab01f7e909"}, "downloads": -1, "filename": "pprofile-1.8.tar.gz", "has_sig": false, "md5_digest": "752b8135d23dfd4ca5b753c4dd2715ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20907, "upload_time": "2016-02-19T11:42:59", "upload_time_iso_8601": "2016-02-19T11:42:59.656341Z", "url": "https://files.pythonhosted.org/packages/01/d0/10b4843eb9f436340285e3aecd7976a27d935c61d49b70cc40cd4a0d8403/pprofile-1.8.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "3a058f45ae09dcd53311a87011df0380", "sha256": "3985904eeda7c906bccbf851eb1a7deaf3ca81256be19fba43149b118c8ff5b6"}, "downloads": -1, "filename": "pprofile-1.8.1.tar.gz", "has_sig": false, "md5_digest": "3a058f45ae09dcd53311a87011df0380", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20945, "upload_time": "2016-03-23T11:16:53", "upload_time_iso_8601": "2016-03-23T11:16:53.930893Z", "url": "https://files.pythonhosted.org/packages/d4/61/c8024fbffbf2fb3c69a28057c64f9d020b348a29667ca7798d38ae4320d3/pprofile-1.8.1.tar.gz", "yanked": false}], "1.8.2": [{"comment_text": "", "digests": {"md5": "533e5e50b4db7b020cda5ca18680834a", "sha256": "1deca6811d50209e8d637851012e8737c11f5c38836f29feb280bf89ad0663e4"}, "downloads": -1, "filename": "pprofile-1.8.2.tar.gz", "has_sig": false, "md5_digest": "533e5e50b4db7b020cda5ca18680834a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23251, "upload_time": "2016-05-10T01:18:51", "upload_time_iso_8601": "2016-05-10T01:18:51.644518Z", "url": "https://files.pythonhosted.org/packages/0d/54/0808e548b09c7b7540947489fce48f0a1710b412696068fa3dfbe20ebefd/pprofile-1.8.2.tar.gz", "yanked": false}], "1.8.3": [{"comment_text": "", "digests": {"md5": "e38dea210a6eccda0a3b342217467f9d", "sha256": "13124775e4b09c2618d5f82d202bc7bcdbb2c663dbd2978952dfa9d3b4f0b7a4"}, "downloads": -1, "filename": "pprofile-1.8.3.tar.gz", "has_sig": false, "md5_digest": "e38dea210a6eccda0a3b342217467f9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23247, "upload_time": "2016-05-10T01:26:35", "upload_time_iso_8601": "2016-05-10T01:26:35.071200Z", "url": "https://files.pythonhosted.org/packages/7c/c2/8826e0c62a1718613d1d7f3e0bf3996652f8aaf10da9367bc293fa567460/pprofile-1.8.3.tar.gz", "yanked": false}], "1.9": [{"comment_text": "", "digests": {"md5": "2b4f1e5c7f8658e4607c396868555c33", "sha256": "07d999c5a02fde39eb245f296a2b19e12f2e8ee8eb62e0221958556fb16a100a"}, "downloads": -1, "filename": "pprofile-1.9.tar.gz", "has_sig": false, "md5_digest": "2b4f1e5c7f8658e4607c396868555c33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20847, "upload_time": "2016-06-19T07:57:18", "upload_time_iso_8601": "2016-06-19T07:57:18.105634Z", "url": "https://files.pythonhosted.org/packages/44/b5/fd96d9db2254a765a8fb80942bf0bb8d1a00d3271114c22ae03fad82f7cf/pprofile-1.9.tar.gz", "yanked": false}], "1.9.1": [{"comment_text": "", "digests": {"md5": "a7f47675eb82db5c041c8c05c64d0aa8", "sha256": "ae3a5f413bbe694b520de3268a82af7dd5226030c536f1488edff193f95665b8"}, "downloads": -1, "filename": "pprofile-1.9.1.tar.gz", "has_sig": false, "md5_digest": "a7f47675eb82db5c041c8c05c64d0aa8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20855, "upload_time": "2016-06-26T22:12:32", "upload_time_iso_8601": "2016-06-26T22:12:32.039421Z", "url": "https://files.pythonhosted.org/packages/cd/e6/8f9301a3026c810b31a37d704f776caa95fbe2889609aea12fc3433833de/pprofile-1.9.1.tar.gz", "yanked": false}], "1.9.2": [{"comment_text": "", "digests": {"md5": "2279c194515286c93ab96ffb5d68d49e", "sha256": "98ec97bbbf524ee9af0b73738f70b02e8f049f7edcd86f6c96d1b9470483831a"}, "downloads": -1, "filename": "pprofile-1.9.2.tar.gz", "has_sig": false, "md5_digest": "2279c194515286c93ab96ffb5d68d49e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21044, "upload_time": "2016-09-08T13:08:30", "upload_time_iso_8601": "2016-09-08T13:08:30.631265Z", "url": "https://files.pythonhosted.org/packages/de/a4/edf805f08da9f14a11d675ce2c7b3376a6d5c197516a6ded79d7a1bc72b3/pprofile-1.9.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "bc2e3bbd9e18ebf8f7eac4e82b999090", "sha256": "1750aa78105ac3f2d46855c8a49157356ed14b0beda858056850e3da87896ba0"}, "downloads": -1, "filename": "pprofile-2.0.0.tar.gz", "has_sig": false, "md5_digest": "bc2e3bbd9e18ebf8f7eac4e82b999090", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42925, "upload_time": "2018-09-26T05:34:14", "upload_time_iso_8601": "2018-09-26T05:34:14.699642Z", "url": "https://files.pythonhosted.org/packages/cf/b1/91c85361dada816dd1047f1b817982c9ca53a2e5c77e3d4724677c1cc19e/pprofile-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "3124895479fe2a38d2778ccd60fcd48a", "sha256": "7e67abe16457aeab9e275c6c87b1603d61d92f301bbc425b097e787404fdf9f1"}, "downloads": -1, "filename": "pprofile-2.0.1.tar.gz", "has_sig": false, "md5_digest": "3124895479fe2a38d2778ccd60fcd48a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42971, "upload_time": "2018-10-05T07:50:41", "upload_time_iso_8601": "2018-10-05T07:50:41.061520Z", "url": "https://files.pythonhosted.org/packages/5c/ab/b2fc5f2872598cc24b23afac558265fd0f184c464efc79fabffc503a7403/pprofile-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "b165e13658d8233405bcc3b207fb09de", "sha256": "3469102f462f9fc2d889970afcf73d89c0d89a36c49a4c262c3edc302b4a22da"}, "downloads": -1, "filename": "pprofile-2.0.2.tar.gz", "has_sig": false, "md5_digest": "b165e13658d8233405bcc3b207fb09de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35188, "upload_time": "2018-10-10T14:47:43", "upload_time_iso_8601": "2018-10-10T14:47:43.845146Z", "url": "https://files.pythonhosted.org/packages/35/d9/360f4483f735cbd4f1ac7316f3bdbee06b5872355963b913f1a53871ac72/pprofile-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "0b1c778970f5626c7af151821c887b6c", "sha256": "91d1d5b700c9c9ff741361d2da6ab71a1b42a03a2936a01f71328c6d7db585f9"}, "downloads": -1, "filename": "pprofile-2.0.3.tar.gz", "has_sig": false, "md5_digest": "0b1c778970f5626c7af151821c887b6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54824, "upload_time": "2020-04-19T01:37:32", "upload_time_iso_8601": "2020-04-19T01:37:32.806164Z", "url": "https://files.pythonhosted.org/packages/3d/3c/f1b89f65ca95dcd59551380e19851137dc3824d6f04df8e740010cbaa066/pprofile-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "ad5cd50992339c748beff9adb253932e", "sha256": "2036522d201188641ab6766b3fea105ddeb72d3b752a7d6da695be7e7ba21656"}, "downloads": -1, "filename": "pprofile-2.0.4.tar.gz", "has_sig": false, "md5_digest": "ad5cd50992339c748beff9adb253932e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54749, "upload_time": "2020-04-19T02:44:03", "upload_time_iso_8601": "2020-04-19T02:44:03.012293Z", "url": "https://files.pythonhosted.org/packages/4e/93/62c4ff1eda5975526e2c22e3545ac087cbb34747c0acd884e53b48828db0/pprofile-2.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ad5cd50992339c748beff9adb253932e", "sha256": "2036522d201188641ab6766b3fea105ddeb72d3b752a7d6da695be7e7ba21656"}, "downloads": -1, "filename": "pprofile-2.0.4.tar.gz", "has_sig": false, "md5_digest": "ad5cd50992339c748beff9adb253932e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54749, "upload_time": "2020-04-19T02:44:03", "upload_time_iso_8601": "2020-04-19T02:44:03.012293Z", "url": "https://files.pythonhosted.org/packages/4e/93/62c4ff1eda5975526e2c22e3545ac087cbb34747c0acd884e53b48828db0/pprofile-2.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:24 2020"}