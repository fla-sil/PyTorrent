{"info": {"author": "Daniel Schwabacher", "author_email": "danielschwabacher@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3"], "description": "\ufeffCranberry\n===============================\n[![PyPI version](https://badge.fury.io/py/cranberry.svg)\t](https://pypi.python.org/pypi/cranberry/1.0.0)[![dls](https://img.shields.io/github/downloads/danielschwabacher/cranberry/total.svg)\t](\nhttp://github.com/danielschwabacher/cranberry)[![release](https://img.shields.io/github/release/danielschwabacher/cranberry/all.svg)\t](https://github.com/danielschwabacher/cranberry)\n\nCranberry is a flexible solution for batch downloading music. It sits atop [youtube-dl](https://github.com/rg3/youtube-dl) and accepts plaintext files specifying music to download. Cranberry is user friendly and highly extensible. The ultimate goal of this project is to provide a versatile and customizable music downloading experience through a simple and universal medium (plaintext files).\n\nOverview\n--------\nCranberry parses plaintexts files for music. After it finds song names in these files, it searches youtube (or another video service) for the matching video. Cranberry then uploads the relevant URLs to youtube-dl, which downloads and converts the video to an MP3. \n\n\nInstallation\n--------------------\nCranberry is distributed via a PyPi. The current PyPi index, along with the tar distros can be found here: https://pypi.python.org/pypi/cranberry/1.0.1\n\nThe easier way to install cranberry is with pip. Simply run the folllowing:\n```pip install cranberry```\n\n\nBasic Usage Guide\n-------------\nCranberry is a command line interface (CLI) meaning that, once installed, the program can be invoked via a command line by running the command: ```cranberry```.  This will print a help menu and then exit. \n\nCranberry Sessions\n-------\n A cranberry session requires two arguments to run. \n\n 1.) A source file, denoted by ```-s``` \n  * This is a plaintext file containing a list of songs to download. \n  * If left unspecified, cranberry will look for songs in the file ```~/songsList.txt```\n  * The format of this song file is detailed in the section **Song Files**.\n\n 2.) An output directory, denoted by ```-o```\n * This is the directory which cranberry will download the MP3s to\n * If left unspecified, cranberry will download the songs to ```~/CranberryMusic```\n\n### Basic usage \nThe following example shows how to download music contained in the file **songs.txt** to the directory **~/music**:\n* ```cranberry -s songs.txt -o ~/music```\n\n\n### More options\n\n##### Append \"audio\" <a id=\"append\"></a>\n\nSometimes, especially on Youtube, appending the text \"audio\" to your search queries results in more accurate matches. Cranberry has a handy flag to automatically append this to your searches, to run cranberry in append mode, use the ```-a``` flag\n* ```cranberry -a -s songs.txt -o ~/music```\n\n##### Delay requests <a id=\"delay\"></a>\nYoutube may throttle or deny your requests if you spam the site with a lot of requests in a short period of time. Cranberry has a flag (```-r NUM_SECONDS``` ) to add a delay, in seconds, to your requests to mitigate this issue.\n* ```cranberry -r 2 -s songs.txt -o ~/music```\n* This will run cranberry with a 2 second delay between Youtube requests\n* Note that higher values may significantly increase  the time cranberry takes to finish\n\nFor more rigorous pattern matching and parsing options, see the section entitled **Sensors**\n\nSong Files\n----------\nSong files are simply .txt files which may contain individual song names, artists, albums, etc. In cranberry's default mode, each line, delimited by the newline character (return), will be searched on Youtube. The first result of each search will be downloaded as a MP3 file. \n\nFor example, suppose you want to download all of Beethoven's first 5 symphonies. To do this, you'd construct a file, \n**Beethoven_songs.txt**, containing: \n\n**Beethoven_songs.txt**\n\n| Beethoven Symphony No. 1 |\n\n| Beethoven Symphony No. 2 |\n\n| Beethoven Symphony No. 3 |\n\n| Beethoven Symphony No. 4 |\n\n| Beethoven Symphony No. 5 |\n\n\nCranberry works best when your song file contains specific enough queries such that the first Youtube search result is what you're looking for. Again, using the [append](#append) flag can help ensure you download the expected content. \n\nSensors\n---------\nSensors are the backbone of cranberry. They specify parsing and search patterns. Cranberry downloads the first result returned by Youtube's search. Using the right sensor can ensure the first Youtube search result is the most relevant one to your use case. \n\n#### Default sensor\nThe default sensor simply removes numbers and colons from each search query. For example, if your song file contains timestamps along with song names, only the song names will be uploaded to the Youtube search. The following table may help illustrate:\n\n|Actual Song File Text  | Uploaded to Youtube |\n|-----------------------|---------------------|\n|  10:15 SONG_NAME      |       SONG_NAME     |\n|  Beethoven No. 1      |       Beethoven No. |\n\n\nThe default sensor is not a good choice for downloading songs which contain numbers (like the symphonies), as the numbers won't be reflected in the Youtube search. \n\n#### Other sensors\nCurrently, cranberry just has the one default sensor. I'll be adding more in the future to handle more use cases. \n\n#### Custom sensors\nSensors can, technically, be anything, from simply regex pattern matches to artificially intelligent systems which best pick out which items to search. Cranberry will support custom, user-defined sensors. The architecture for this system is currently a work in progress. \n\n\nTroubleshooting\n-------------------\nThe most likely problem you'll experience with cranberry is Youtube blocking your requests for long song files. To help remedy this, specify a reasonable number of seconds between requests using the [delay](#delay)  flag. \n\nContributing\n---------\nContributions are very welcome. Feel free to fork this repository and add some features. \n\nA final disclaimer\n-----------\nThere is a lot of non-copyrighted, free, and good music on Youtube. Cranberry was developed to make downloading this music less tedious. Without cranberry, the best option is often to upload individual Youtube URLs to a music downloading service (for example, http://youtubemp3.to/). This takes a long time. \n\nYou shouldn't use cranberry to download copyrighted works. And, by using this software, you agree that I will not be held responsible for any implications of you downloading or distributing copyrighted work through cranberry.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/danielschwabacher/cranberry/tarball/1.0.3", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danielschwabacher/cranberry", "keywords": "automation music youtube-dl", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "cranberry", "package_url": "https://pypi.org/project/cranberry/", "platform": "", "project_url": "https://pypi.org/project/cranberry/", "project_urls": {"Download": "https://github.com/danielschwabacher/cranberry/tarball/1.0.3", "Homepage": "https://github.com/danielschwabacher/cranberry"}, "release_url": "https://pypi.org/project/cranberry/1.0.3/", "requires_dist": ["sphinx", "sphinx-rtd-theme", "nose", "coverage", "pypi-publisher", "youtube-dl", "fake-useragent"], "requires_python": "", "summary": "An automated music downloading service", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            \ufeffCranberry<br>===============================<br>[![PyPI version](https://badge.fury.io/py/cranberry.svg)\t](https://pypi.python.org/pypi/cranberry/1.0.0)[![dls](https://img.shields.io/github/downloads/danielschwabacher/cranberry/total.svg)\t](<br>http://github.com/danielschwabacher/cranberry)[![release](https://img.shields.io/github/release/danielschwabacher/cranberry/all.svg)\t](https://github.com/danielschwabacher/cranberry)<br><br>Cranberry is a flexible solution for batch downloading music. It sits atop [youtube-dl](https://github.com/rg3/youtube-dl) and accepts plaintext files specifying music to download. Cranberry is user friendly and highly extensible. The ultimate goal of this project is to provide a versatile and customizable music downloading experience through a simple and universal medium (plaintext files).<br><br>Overview<br>--------<br>Cranberry parses plaintexts files for music. After it finds song names in these files, it searches youtube (or another video service) for the matching video. Cranberry then uploads the relevant URLs to youtube-dl, which downloads and converts the video to an MP3. <br><br><br>Installation<br>--------------------<br>Cranberry is distributed via a PyPi. The current PyPi index, along with the tar distros can be found here: https://pypi.python.org/pypi/cranberry/1.0.1<br><br>The easier way to install cranberry is with pip. Simply run the folllowing:<br>```pip install cranberry```<br><br><br>Basic Usage Guide<br>-------------<br>Cranberry is a command line interface (CLI) meaning that, once installed, the program can be invoked via a command line by running the command: ```cranberry```.  This will print a help menu and then exit. <br><br>Cranberry Sessions<br>-------<br> A cranberry session requires two arguments to run. <br><br> 1.) A source file, denoted by ```-s``` <br>  * This is a plaintext file containing a list of songs to download. <br>  * If left unspecified, cranberry will look for songs in the file ```~/songsList.txt```<br>  * The format of this song file is detailed in the section **Song Files**.<br><br> 2.) An output directory, denoted by ```-o```<br> * This is the directory which cranberry will download the MP3s to<br> * If left unspecified, cranberry will download the songs to ```~/CranberryMusic```<br><br>### Basic usage <br>The following example shows how to download music contained in the file **songs.txt** to the directory **~/music**:<br>* ```cranberry -s songs.txt -o ~/music```<br><br><br>### More options<br><br>##### Append \"audio\" &lt;a id=\"append\"&gt;&lt;/a&gt;<br><br>Sometimes, especially on Youtube, appending the text \"audio\" to your search queries results in more accurate matches. Cranberry has a handy flag to automatically append this to your searches, to run cranberry in append mode, use the ```-a``` flag<br>* ```cranberry -a -s songs.txt -o ~/music```<br><br>##### Delay requests &lt;a id=\"delay\"&gt;&lt;/a&gt;<br>Youtube may throttle or deny your requests if you spam the site with a lot of requests in a short period of time. Cranberry has a flag (```-r NUM_SECONDS``` ) to add a delay, in seconds, to your requests to mitigate this issue.<br>* ```cranberry -r 2 -s songs.txt -o ~/music```<br>* This will run cranberry with a 2 second delay between Youtube requests<br>* Note that higher values may significantly increase  the time cranberry takes to finish<br><br>For more rigorous pattern matching and parsing options, see the section entitled **Sensors**<br><br>Song Files<br>----------<br>Song files are simply .txt files which may contain individual song names, artists, albums, etc. In cranberry's default mode, each line, delimited by the newline character (return), will be searched on Youtube. The first result of each search will be downloaded as a MP3 file. <br><br>For example, suppose you want to download all of Beethoven's first 5 symphonies. To do this, you'd construct a file, <br>**Beethoven_songs.txt**, containing: <br><br>**Beethoven_songs.txt**<br><br>| Beethoven Symphony No. 1 |<br><br>| Beethoven Symphony No. 2 |<br><br>| Beethoven Symphony No. 3 |<br><br>| Beethoven Symphony No. 4 |<br><br>| Beethoven Symphony No. 5 |<br><br><br>Cranberry works best when your song file contains specific enough queries such that the first Youtube search result is what you're looking for. Again, using the [append](#append) flag can help ensure you download the expected content. <br><br>Sensors<br>---------<br>Sensors are the backbone of cranberry. They specify parsing and search patterns. Cranberry downloads the first result returned by Youtube's search. Using the right sensor can ensure the first Youtube search result is the most relevant one to your use case. <br><br>#### Default sensor<br>The default sensor simply removes numbers and colons from each search query. For example, if your song file contains timestamps along with song names, only the song names will be uploaded to the Youtube search. The following table may help illustrate:<br><br>|Actual Song File Text  | Uploaded to Youtube |<br>|-----------------------|---------------------|<br>|  10:15 SONG_NAME      |       SONG_NAME     |<br>|  Beethoven No. 1      |       Beethoven No. |<br><br><br>The default sensor is not a good choice for downloading songs which contain numbers (like the symphonies), as the numbers won't be reflected in the Youtube search. <br><br>#### Other sensors<br>Currently, cranberry just has the one default sensor. I'll be adding more in the future to handle more use cases. <br><br>#### Custom sensors<br>Sensors can, technically, be anything, from simply regex pattern matches to artificially intelligent systems which best pick out which items to search. Cranberry will support custom, user-defined sensors. The architecture for this system is currently a work in progress. <br><br><br>Troubleshooting<br>-------------------<br>The most likely problem you'll experience with cranberry is Youtube blocking your requests for long song files. To help remedy this, specify a reasonable number of seconds between requests using the [delay](#delay)  flag. <br><br>Contributing<br>---------<br>Contributions are very welcome. Feel free to fork this repository and add some features. <br><br>A final disclaimer<br>-----------<br>There is a lot of non-copyrighted, free, and good music on Youtube. Cranberry was developed to make downloading this music less tedious. Without cranberry, the best option is often to upload individual Youtube URLs to a music downloading service (for example, http://youtubemp3.to/). This takes a long time. <br><br>You shouldn't use cranberry to download copyrighted works. And, by using this software, you agree that I will not be held responsible for any implications of you downloading or distributing copyrighted work through cranberry.<br><br><br>\n          </div>"}, "last_serial": 4553121, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "9239c74d99f47b979b95ceb342125188", "sha256": "cdc08c74b977fed349c91160fbf022bfd6cd264025818eee14ffc62f18af584b"}, "downloads": -1, "filename": "cranberry-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9239c74d99f47b979b95ceb342125188", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7147, "upload_time": "2016-09-03T23:26:15", "upload_time_iso_8601": "2016-09-03T23:26:15.995063Z", "url": "https://files.pythonhosted.org/packages/12/d5/52ba5fe21ab5762df7485e4cff44d86dcbae0f7e343b6ed675233cd96b7c/cranberry-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "f4fd0e1906c273f0031dc7f6fe233b4c", "sha256": "7070a238893d3e29b815e23e2703d8d997afbb9653559b6e2a1adab2f5809945"}, "downloads": -1, "filename": "cranberry-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f4fd0e1906c273f0031dc7f6fe233b4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7360, "upload_time": "2016-12-06T08:44:00", "upload_time_iso_8601": "2016-12-06T08:44:00.525091Z", "url": "https://files.pythonhosted.org/packages/9e/cb/69a6bf186ffba57bab69ee542cf51d4072d8470b545e18a7c25a7e4421ad/cranberry-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "11a6ece0ada0a6ef5ffc210258d7d4c3", "sha256": "c3724ac31f9606c5c80369e88bd107ee27767f9eddfbce2c8c74e9d40fe59e1a"}, "downloads": -1, "filename": "cranberry-1.0.0.tar.gz", "has_sig": false, "md5_digest": "11a6ece0ada0a6ef5ffc210258d7d4c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7975, "upload_time": "2017-11-20T05:47:06", "upload_time_iso_8601": "2017-11-20T05:47:06.460790Z", "url": "https://files.pythonhosted.org/packages/36/b1/255d264d9bee37f68d858991fb4c5471e49e7c2996603b0b8c9db48fbc31/cranberry-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7288024d5ef175a029f7d79584bdadda", "sha256": "eb76e7ebcd2a0efcf4faf646ab575ee36453a0c6d0d7b5fd48693d805ffcfa6f"}, "downloads": -1, "filename": "cranberry-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7288024d5ef175a029f7d79584bdadda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10101, "upload_time": "2018-02-24T08:58:15", "upload_time_iso_8601": "2018-02-24T08:58:15.673782Z", "url": "https://files.pythonhosted.org/packages/41/cc/5920b043de83b6e3f2397043075ab72563b0b714833d6708b4cc3081dd29/cranberry-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "70671a44ac1961695e181bf2261f269a", "sha256": "95a799e36c405ca75a3bf0121b046180d8870d9c7cb70d5ea23f8ce299805b0f"}, "downloads": -1, "filename": "cranberry-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "70671a44ac1961695e181bf2261f269a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16127, "upload_time": "2018-12-02T18:59:47", "upload_time_iso_8601": "2018-12-02T18:59:47.072327Z", "url": "https://files.pythonhosted.org/packages/aa/22/349ffc11d55f1f998ef4bf30c339bcb91f760619532820d01e087bc5d753/cranberry-1.0.2-py2.py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "5a28d7d4d83ddfdde6fefb56cae87008", "sha256": "062613cb303f91d23e3b23da0dfc33a56499a6acf9b4ff8708dfe8c03218af9e"}, "downloads": -1, "filename": "cranberry-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5a28d7d4d83ddfdde6fefb56cae87008", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16215, "upload_time": "2018-12-02T19:35:54", "upload_time_iso_8601": "2018-12-02T19:35:54.009454Z", "url": "https://files.pythonhosted.org/packages/6f/77/57672d32d83dae0bea9e4b016e38e901218c89f34e389429a9124e6459ac/cranberry-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "646354307f366a8c651f38b501d5794d", "sha256": "7ff106a40ae7af858fd3708c97e6d244d21256e0ee4063e07a0c189f7ccce0e3"}, "downloads": -1, "filename": "cranberry-1.0.3.tar.gz", "has_sig": false, "md5_digest": "646354307f366a8c651f38b501d5794d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10142, "upload_time": "2018-12-02T19:35:55", "upload_time_iso_8601": "2018-12-02T19:35:55.539694Z", "url": "https://files.pythonhosted.org/packages/e3/6c/c26c45a0e93c65ea428f6c38837682039d944bee9e7684fb529f3d6bb732/cranberry-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5a28d7d4d83ddfdde6fefb56cae87008", "sha256": "062613cb303f91d23e3b23da0dfc33a56499a6acf9b4ff8708dfe8c03218af9e"}, "downloads": -1, "filename": "cranberry-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5a28d7d4d83ddfdde6fefb56cae87008", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16215, "upload_time": "2018-12-02T19:35:54", "upload_time_iso_8601": "2018-12-02T19:35:54.009454Z", "url": "https://files.pythonhosted.org/packages/6f/77/57672d32d83dae0bea9e4b016e38e901218c89f34e389429a9124e6459ac/cranberry-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "646354307f366a8c651f38b501d5794d", "sha256": "7ff106a40ae7af858fd3708c97e6d244d21256e0ee4063e07a0c189f7ccce0e3"}, "downloads": -1, "filename": "cranberry-1.0.3.tar.gz", "has_sig": false, "md5_digest": "646354307f366a8c651f38b501d5794d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10142, "upload_time": "2018-12-02T19:35:55", "upload_time_iso_8601": "2018-12-02T19:35:55.539694Z", "url": "https://files.pythonhosted.org/packages/e3/6c/c26c45a0e93c65ea428f6c38837682039d944bee9e7684fb529f3d6bb732/cranberry-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:28 2020"}