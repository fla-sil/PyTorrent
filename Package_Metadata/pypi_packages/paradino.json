{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "envmgr |pypi| |travis| |appveyor| |dockerautomated| |dockerpulls|\n=================================================================\n\nA cross-platform CLI client for `Environment\nManager <https://github.com/trainline/environment-manager>`__\n\n.. figure:: https://github.com/trainline/envmgr-cli/raw/master/example.gif\n   :alt: envmgr example\n\n\nInstall\n-------\n\n::\n\n    pip install envmgr-cli\n\n\nSee `Configuration`_ for further install instructions.\n\n\nUsage\n-----\n\n*envmgr* is designed to provide an intuitive, human readable interface\naround the lower level `Environment Manager Python\nLibrary <https://github.com/trainline/python-environment_manager/>`__\n\nAll ``envmgr`` commands are exposed behind a set of verbs (*get* a\nstatus, *schedule* some downtime, *wait* for an ASG, etc). Verbs are\nalways the first value provided to ``envmgr`` and there is only ever one\nverb per command.\n\ndocopt\n^^^^^^\n\nThe cli interface is described in `docopt <http://docopt.org/%5D>`__.\nThe easiest way to discover and understand the different usage patterns\navailable is to simply run\n\n::\n\n    envmgr --help\n\nOutput\n^^^^^^\n\nBy default, ``envmgr`` commands will output a human friendly response\nuseful for testing single commands at a time. To help scripting or\nchaining results together, all commands also accept a ``--json``\nargument which will return the raw JSON response from Environment\nManager:\n\n::\n\n    >> envmgr schedule asg my-asg on in prod\n    Scheduled 1 instance in my-asg to: ON\n\n    >> envmgr schedule asg my-asg on in prod --json\n    {\"ChangedInstances\": [\"i-0afe2276909859130\"], \"ChangedAutoScalingGroups\": [\"my-asg\"]}\n\nExamples\n--------\n\n*In the examples below, assume that 'prod-1' is an environment, 'AwesomeService' is a\nservice and 'my-asg' is an ASG, all of which are already registered in\nEnvironment Manager.*\n\n.. code-block:: bash\n\n    # Get the health status of all instances of AwesomeService, in all slices:\n    envmgr get AwesomeService health in prod-1\n\n    # Get the the active slice information for the AwesomeService service in prod-1 environment:\n    envmgr get AwesomeService active slice in prod-1\n\n    # Get the status of the my-asg ASG in the prod-1 environment. Status is calculated as an aggregate of all instances in the ASG:\n    envmgr get asg my-asg status in prod-1\n\n    # Get the schedule value set on the my-asg ASG in the prod-1 environment. Note this will tell you what the schedule is configured to - not the current state according to the schedule:\n    envmgr get asg my-asg schedule in prod-1\n\n    # Get the current status of the deployment with ID a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994:\n    envmgr get deploy status a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994\n\n    # Block and wait until the deployment with ID a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994 either succeeds or fails:\n    envmgr wait-for deploy a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994\n\n    # Block and wait until all instances in the ASG my-asg are ready fordeployment (In Service):\n    envmgr wait-for asg my-asg in prod-1\n\n    # Block and wait until the service AwesomeService is running with all healthchecks passing:\n    envmgr wait-for healthy AwesomeService in prod-1\n\n    # Set the schedule of the ASG my-asg in prod-1 to be off permanently until further notice:\n    envmgr schedule asg my-asg off in prod-1\n\n    # Publish the file build-22.zip as version 1.2.9 of AwesomeService:\n    envmgr publish build-22.zip as AwesomeService 1.2.9\n\n    # Deploy the published version 1.2.9 of AwesomeService into the prod-1 environment:\n    envmgr deploy AwesomeService 1.2.9 in prod-1\n\n    # Toggle the upstreams for AwesomeService in the prod-1 environment:\n    envmgr toggle AwesomeService in prod-1\n\n    # Get the Windows patch status for servers belonging to A-Team in prod-1:\n    envmgr get A-team patch status in prod-1\n\n\n\nConfiguration\n-------------\n\nAuthentication\n^^^^^^^^^^^^^^\n\nAll calls to Environment Manager require authentication, which can be\nprovided in 1 of 2 ways.\n\nEither export your credentials as environment variables:\n\n::\n\n    ENVMGR_USER=myusername\n    ENVMGR_PASS=mypa$$word\n\nOr provide a ``--user`` and ``--pass`` value to each commad:\n\n::\n\n    envmgr get MyService health in prod --user=\"sarah\" --pass=\"pa$$word\"\n\n*Note: It's recommended to only use this method in CI environments.*\n\nHost Config\n^^^^^^^^^^^\n\nThe hostname of your Environment Manager instance is configured\nsimilarly to your credentials:\n\nExport your hostname as an environment variable:\n\n::\n\n    ENVMGR_HOST=environmentmanager.acme.com\n\nOr provide the hostname with each command:\n\n::\n\n    envmgr get MyService health in prod --host=environmentmanager.acme.com\n\n\nDevelopment\n-----------\nTo install all test dependencies and run all tests, simply run:\n\n::\n\n    python setup.py test [--adopts -v]\n\n\nFor convenience this is also available via the included `makefile`:\n\n::\n\n    make test\n\n\nDocker\n------\n\nIf you want, you can use our automated container builds\n\nUsage\n^^^^^\n\n::\n\n    docker run -it --rm \\\n    -e ENVMGR_USER=user\n    -e ENVMGR_PASS=password\n    -e ENVMGR_HOST=foo.bar\n    trainline/envmgr-cli:latest envmgr {YOUR_ARGS}\n\n\nExample\n^^^^^^^\n\n::\n\n    ~$ docker run -it --rm trainline/envmgr-cli envmgr --version\n    1.9.1\n\n\nBuild\n^^^^^\n\n::\n\n    docker build -t {YOUR_NAME}/envmgr-cli .\n\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/w50g5yb1fh4qh3rq/branch/master?svg=true\n    :target: https://ci.appveyor.com/project/duncanhall/envmgr-cli/branch/master\n\n.. |travis| image:: https://travis-ci.org/trainline/envmgr-cli.svg?branch=master\n    :target: https://travis-ci.org/trainline/envmgr-cli\n\n.. |pypi| image:: https://img.shields.io/badge/python-2.7%2C%203.4%2C%203.5%2C%203.6-blue.svg\n    :target: https://pypi.python.org/pypi/envmgr-cli\n\n.. |dockerautomated| image:: https://img.shields.io/docker/automated/trainline/envmgr-cli.svg\n    :target: https://hub.docker.com/r/trainline/envmgr-cli\n\n.. |dockerpulls| image:: https://img.shields.io/docker/pulls/trainline/envmgr-cli.svg\n    :target: https://hub.docker.com/r/trainline/envmgr-cli\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "paradino", "package_url": "https://pypi.org/project/paradino/", "platform": "", "project_url": "https://pypi.org/project/paradino/", "project_urls": null, "release_url": "https://pypi.org/project/paradino/2.0.0/", "requires_dist": ["docopt (~=0.6.2)", "simplejson (~=3.11.1)", "tabulate (~=0.7.7)", "future (~=0.16.0)", "semver (~=2.7.7)", "appdirs (~=1.4.3)", "progressbar2 (~=3.30.2)", "clingmerv-lib (==0.3.0)", "requests (==2.21.0)", "envmgr-lib (==0.3.0)"], "requires_python": "", "summary": "", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A cross-platform CLI client for <a href=\"https://github.com/trainline/environment-manager\" rel=\"nofollow\">Environment\nManager</a></p>\n<div>\n<img alt=\"envmgr example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab8bcabb8d1e2f3e367750d4a76302c3f589ddc0/68747470733a2f2f6769746875622e636f6d2f747261696e6c696e652f656e766d67722d636c692f7261772f6d61737465722f6578616d706c652e676966\">\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install envmgr-cli\n</pre>\n<p>See <a href=\"#configuration\" rel=\"nofollow\">Configuration</a> for further install instructions.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><em>envmgr</em> is designed to provide an intuitive, human readable interface\naround the lower level <a href=\"https://github.com/trainline/python-environment_manager/\" rel=\"nofollow\">Environment Manager Python\nLibrary</a></p>\n<p>All <tt>envmgr</tt> commands are exposed behind a set of verbs (<em>get</em> a\nstatus, <em>schedule</em> some downtime, <em>wait</em> for an ASG, etc). Verbs are\nalways the first value provided to <tt>envmgr</tt> and there is only ever one\nverb per command.</p>\n<div id=\"docopt\">\n<h3>docopt</h3>\n<p>The cli interface is described in <a href=\"http://docopt.org/%5D\" rel=\"nofollow\">docopt</a>.\nThe easiest way to discover and understand the different usage patterns\navailable is to simply run</p>\n<pre>envmgr --help\n</pre>\n</div>\n<div id=\"output\">\n<h3>Output</h3>\n<p>By default, <tt>envmgr</tt> commands will output a human friendly response\nuseful for testing single commands at a time. To help scripting or\nchaining results together, all commands also accept a <tt><span class=\"pre\">--json</span></tt>\nargument which will return the raw JSON response from Environment\nManager:</p>\n<pre>&gt;&gt; envmgr schedule asg my-asg on in prod\nScheduled 1 instance in my-asg to: ON\n\n&gt;&gt; envmgr schedule asg my-asg on in prod --json\n{\"ChangedInstances\": [\"i-0afe2276909859130\"], \"ChangedAutoScalingGroups\": [\"my-asg\"]}\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p><em>In the examples below, assume that \u2018prod-1\u2019 is an environment, \u2018AwesomeService\u2019 is a\nservice and \u2018my-asg\u2019 is an ASG, all of which are already registered in\nEnvironment Manager.</em></p>\n<pre><span class=\"c1\"># Get the health status of all instances of AwesomeService, in all slices:\n</span>envmgr get AwesomeService health in prod-1\n\n<span class=\"c1\"># Get the the active slice information for the AwesomeService service in prod-1 environment:\n</span>envmgr get AwesomeService active slice in prod-1\n\n<span class=\"c1\"># Get the status of the my-asg ASG in the prod-1 environment. Status is calculated as an aggregate of all instances in the ASG:\n</span>envmgr get asg my-asg status in prod-1\n\n<span class=\"c1\"># Get the schedule value set on the my-asg ASG in the prod-1 environment. Note this will tell you what the schedule is configured to - not the current state according to the schedule:\n</span>envmgr get asg my-asg schedule in prod-1\n\n<span class=\"c1\"># Get the current status of the deployment with ID a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994:\n</span>envmgr get deploy status a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994\n\n<span class=\"c1\"># Block and wait until the deployment with ID a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994 either succeeds or fails:\n</span>envmgr wait-for deploy a2fbb0c0-ed4c-11e6-85b1-2b6d1cb68994\n\n<span class=\"c1\"># Block and wait until all instances in the ASG my-asg are ready fordeployment (In Service):\n</span>envmgr wait-for asg my-asg in prod-1\n\n<span class=\"c1\"># Block and wait until the service AwesomeService is running with all healthchecks passing:\n</span>envmgr wait-for healthy AwesomeService in prod-1\n\n<span class=\"c1\"># Set the schedule of the ASG my-asg in prod-1 to be off permanently until further notice:\n</span>envmgr schedule asg my-asg off in prod-1\n\n<span class=\"c1\"># Publish the file build-22.zip as version 1.2.9 of AwesomeService:\n</span>envmgr publish build-22.zip as AwesomeService <span class=\"m\">1</span>.2.9\n\n<span class=\"c1\"># Deploy the published version 1.2.9 of AwesomeService into the prod-1 environment:\n</span>envmgr deploy AwesomeService <span class=\"m\">1</span>.2.9 in prod-1\n\n<span class=\"c1\"># Toggle the upstreams for AwesomeService in the prod-1 environment:\n</span>envmgr toggle AwesomeService in prod-1\n\n<span class=\"c1\"># Get the Windows patch status for servers belonging to A-Team in prod-1:\n</span>envmgr get A-team patch status in prod-1\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<div id=\"authentication\">\n<h3>Authentication</h3>\n<p>All calls to Environment Manager require authentication, which can be\nprovided in 1 of 2 ways.</p>\n<p>Either export your credentials as environment variables:</p>\n<pre>ENVMGR_USER=myusername\nENVMGR_PASS=mypa$$word\n</pre>\n<p>Or provide a <tt><span class=\"pre\">--user</span></tt> and <tt><span class=\"pre\">--pass</span></tt> value to each commad:</p>\n<pre>envmgr get MyService health in prod --user=\"sarah\" --pass=\"pa$$word\"\n</pre>\n<p><em>Note: It\u2019s recommended to only use this method in CI environments.</em></p>\n</div>\n<div id=\"host-config\">\n<h3>Host Config</h3>\n<p>The hostname of your Environment Manager instance is configured\nsimilarly to your credentials:</p>\n<p>Export your hostname as an environment variable:</p>\n<pre>ENVMGR_HOST=environmentmanager.acme.com\n</pre>\n<p>Or provide the hostname with each command:</p>\n<pre>envmgr get MyService health in prod --host=environmentmanager.acme.com\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>To install all test dependencies and run all tests, simply run:</p>\n<pre>python setup.py test [--adopts -v]\n</pre>\n<p>For convenience this is also available via the included <cite>makefile</cite>:</p>\n<pre>make test\n</pre>\n</div>\n<div id=\"docker\">\n<h2>Docker</h2>\n<p>If you want, you can use our automated container builds</p>\n<div id=\"id1\">\n<h3>Usage</h3>\n<pre>docker run -it --rm \\\n-e ENVMGR_USER=user\n-e ENVMGR_PASS=password\n-e ENVMGR_HOST=foo.bar\ntrainline/envmgr-cli:latest envmgr {YOUR_ARGS}\n</pre>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<pre>~$ docker run -it --rm trainline/envmgr-cli envmgr --version\n1.9.1\n</pre>\n</div>\n<div id=\"build\">\n<h3>Build</h3>\n<pre>docker build -t {YOUR_NAME}/envmgr-cli .\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4590081, "releases": {"1.12.1": [{"comment_text": "", "digests": {"md5": "ffd2164f4e6de39d4a3d5e14408c395c", "sha256": "a3c2a0c1316a12afa9122964e14d0138962599cb0533ef4918df732f33acacae"}, "downloads": -1, "filename": "paradino-1.12.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ffd2164f4e6de39d4a3d5e14408c395c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 32983, "upload_time": "2018-01-25T22:51:54", "upload_time_iso_8601": "2018-01-25T22:51:54.970268Z", "url": "https://files.pythonhosted.org/packages/9b/c1/93bb62f3a355626a8f06b096a4193aa58f1896234754a39fd69ccce7e0c5/paradino-1.12.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a78617abde9c65f3cc63f10b4d4d741", "sha256": "ce5c996fae3382a42d07972ddf3f846f4fda1240b9115d646f13be7346d14816"}, "downloads": -1, "filename": "paradino-1.12.1.tar.gz", "has_sig": false, "md5_digest": "8a78617abde9c65f3cc63f10b4d4d741", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20221, "upload_time": "2018-01-25T22:51:57", "upload_time_iso_8601": "2018-01-25T22:51:57.011965Z", "url": "https://files.pythonhosted.org/packages/10/ba/efdd64a8b9d98fe624ecc9f0527400090aebcb16eaa771cd0796e77ecfdb/paradino-1.12.1.tar.gz", "yanked": false}], "1.14.0": [{"comment_text": "", "digests": {"md5": "3e3cd30e50f229c9d4bb84dd9de8b65a", "sha256": "8ed7d957a3005d3a4bfb47385600cde53036d70b5e9917fb198e5f1feee88f6b"}, "downloads": -1, "filename": "paradino-1.14.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3e3cd30e50f229c9d4bb84dd9de8b65a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 32986, "upload_time": "2018-01-25T22:58:47", "upload_time_iso_8601": "2018-01-25T22:58:47.475267Z", "url": "https://files.pythonhosted.org/packages/33/dc/d0123530089193745cc375f581c6f40a8e9273327e092d8d09644dfa7317/paradino-1.14.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "369b3030108a61239968ba2ba4cd7d8c", "sha256": "0d42d39573d7768244c5d19ed8006691f502a53cef117eb565104c30d8f3ac17"}, "downloads": -1, "filename": "paradino-1.14.0.tar.gz", "has_sig": false, "md5_digest": "369b3030108a61239968ba2ba4cd7d8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20231, "upload_time": "2018-01-25T22:58:48", "upload_time_iso_8601": "2018-01-25T22:58:48.934460Z", "url": "https://files.pythonhosted.org/packages/68/34/6b45533e266a350102a1adff108c01cdc6e624ae2282beb85ad4a413d68a/paradino-1.14.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "33ab7c985879d3245a4ac6a58785a976", "sha256": "693b51e60c8db3dab9488753ba6693f13ee72872d723f651c5d8d28cf5d882cc"}, "downloads": -1, "filename": "paradino-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "33ab7c985879d3245a4ac6a58785a976", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33000, "upload_time": "2018-12-12T12:33:07", "upload_time_iso_8601": "2018-12-12T12:33:07.676027Z", "url": "https://files.pythonhosted.org/packages/95/7c/f774e9ad05bee150fb6dd2bcef1f540008760086e750370b97bf3e402170/paradino-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f28a06da9f022264664373c3fb2287d7", "sha256": "b4b9b3ca3ad53453ecd821e3461a07db439f04ee7178e5fffe1e7d76206f1251"}, "downloads": -1, "filename": "paradino-2.0.0.tar.gz", "has_sig": false, "md5_digest": "f28a06da9f022264664373c3fb2287d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20266, "upload_time": "2018-12-12T12:33:09", "upload_time_iso_8601": "2018-12-12T12:33:09.090583Z", "url": "https://files.pythonhosted.org/packages/4e/b0/5a2fe45e277cb22f4129f360ce96c155659680f775f4f4fc01a3d87b7709/paradino-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "33ab7c985879d3245a4ac6a58785a976", "sha256": "693b51e60c8db3dab9488753ba6693f13ee72872d723f651c5d8d28cf5d882cc"}, "downloads": -1, "filename": "paradino-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "33ab7c985879d3245a4ac6a58785a976", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33000, "upload_time": "2018-12-12T12:33:07", "upload_time_iso_8601": "2018-12-12T12:33:07.676027Z", "url": "https://files.pythonhosted.org/packages/95/7c/f774e9ad05bee150fb6dd2bcef1f540008760086e750370b97bf3e402170/paradino-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f28a06da9f022264664373c3fb2287d7", "sha256": "b4b9b3ca3ad53453ecd821e3461a07db439f04ee7178e5fffe1e7d76206f1251"}, "downloads": -1, "filename": "paradino-2.0.0.tar.gz", "has_sig": false, "md5_digest": "f28a06da9f022264664373c3fb2287d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20266, "upload_time": "2018-12-12T12:33:09", "upload_time_iso_8601": "2018-12-12T12:33:09.090583Z", "url": "https://files.pythonhosted.org/packages/4e/b0/5a2fe45e277cb22f4129f360ce96c155659680f775f4f4fc01a3d87b7709/paradino-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:41 2020"}