{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# :construction: PFB Python SDK :construction:\n\nPython SDK to create, explore and modify PFB (Portable Format for Biomedical Data) files.\n\n\n## PyPFB Overview\n\nPyPFB is a python sdk to create, explore, and modify PFB (Portable Format for Bioinformatics) files.\n\nThese files start from a Gen3 data dictionary. These can be made from either json hosted on a cloud storage service, like s3, or from a local directory. See PyPFB From Schema for an example.\n\nOnce we have a PFB file created from a schema we can start to add data to the file. This is done using JSON files from local directory. We create them in the style of our data-simulator https://github.com/uc-cdis/data-simulator/ Once we have them we can use PFB From JSON to import the structured json into our Serialized PFB file.\n\nAt this point we have a PFB file with married schema and serialized data. Now we have a few options for modifying these PFB files. These are good options for breaking changes within the dictionary. This allows a commons operator to export the entire structured database, make modifications to fix the breaking changes, and then re import the file back to the commons. \n\nChanges that are already supported by this SDK are renames (enum and nodes) and adds of records data.\n\n\n## PFB Schema\n\n[![metadata][1]][1]\n\n## Installation\n\n* From PyPI:\n\n```bash\npip install pypfb[gen3]\n```\n\n(The optional `gen3` dependencies add the ability to convert a Gen3 data dictionary into\na PFB file.)\n\n* From source code:\n\n```bash\npipenv install\n```\n\n(Also add `--dev` for development.)\n\n\n## Usage\n\n### Main\n\n    Usage: pfb [OPTIONS] COMMAND [ARGS]...\n\n      PFB: Portable Format for Biomedical Data.\n\n    Commands:\n      add     Add records into a PFB file.\n      from    Generate PFB from other data formats.\n      make    Make a blank record for add.\n      rename  Rename different parts of schema.\n      show    Show different parts of a PFB file.\n      to      Convert PFB into other data formats.\n\n### Show different parts of PFB\n\n    Usage: pfb show [OPTIONS] COMMAND [ARGS]...\n\n      Show records of the PFB file.\n\n      Specify a sub-command to show other information.\n\n    Options:\n      -i, --input FILENAME  The PFB file.  [default: <stdin>]\n      -n, --limit INTEGER   How many records to show, ignored for sub-commands.\n                            [default: no limit]\n\n    Commands:\n      metadata  Show the metadata of the PFB file.\n      nodes     Show all the node names in the PFB file.\n      schema    Show the schema of the PFB file.\n\n    Examples:\n      schema:\n        pfb show -i data.avro schema\n      nodes:\n        pfb show -i data.avro nodes\n      metadata:\n        pfb show -i data.avro metadata\n      records:\n        pfb show -i data.avro -n 5\n\n### Convert Gen3 data dictionary into PFB schema\n\n    Usage: pfb from [PARENT OPTIONS] dict DICTIONARY\n\n      Convert Gen3 data DICTIONARY into a PFB file.\n\n      If DICTIONARY is a HTTP URL, it will be downloaded and parsed as JSON; or\n      it will be treated as a local path to a directory containing YAML files.\n\n    Parent Options:\n      -o, --output FILENAME  The output PFB file.  [default: <stdout>]\n\n    Examples:\n      URL:\n        pfb from -o thing.avro dict https://s3.amazonaws.com/dictionary-artifacts/gtexdictionary/3.2.2/schema.json\n      Directory:\n        pfb from -o gdc.avro dict /path/to/dictionary/schemas/\n\n### Convert JSON for corresponding datadictionary to PFB\n\n    Usage: pfb from [PARENT OPTIONS] json [OPTIONS] [PATH]\n\n      Convert JSON files under PATH into a PFB file.\n\n    Parent Options:\n      -o, --output FILENAME  The output PFB file.  [default: <stdout>]\n\n    Options:\n      -s, --schema FILENAME  The PFB file to load the schema from.  [required]\n      --program TEXT         Name of the program.  [required]\n      --project TEXT         Name of the project.  [required]\n\n    Example:\n      pfb from -o data.avro json -s schema.avro --program DEV --project test /path/to/data/json/\n\n### Make new blank record\n\n    Usage: pfb make [OPTIONS] NAME\n\n      Make a blank record according to given NODE schema in the PFB file.\n\n    Options:\n      -i, --input PFB  Read schema from this PFB file.  [default: <stdin>]\n\n    Example:\n      pfb make -i test.avro demographic > empty_demographic.json\n\n### Add new record to PFB\n\n    Usage: pfb add [OPTIONS] PFB\n\n      Add records from a minified JSON file to the PFB file.\n\n    Options:\n      -i, --input JSON  The JSON file to add.  [default: <stdin>]\n\n    Example:\n      pfb add -i new_record.json pfb.avro \n\n### Rename different parts of PFB (schema evolution)\n\n    Usage: pfb rename [OPTIONS] COMMAND [ARGS]...\n\n      Rename different parts of schema.\n\n    Options:\n      -i, --input FILENAME   Source PFB file.  [default: <stdin>]\n      -o, --output FILENAME  Destination PFB file.  [default: <stdout>]\n\n    Commands:\n      enum  Rename enum.\n      node  Rename node.\n      type  Rename type (not implemented).\n\n    Examples:\n      enum:\n        pfb rename -i data.avro -o data_enum.avro enum demographic_ethnicity old_enum new_enum\n      node:\n        pfb rename -i data.avro -o data_update.avro node demographic information\n\n### Rename node\n\n    Usage: pfb rename [PARENT OPTIONS] node [OPTIONS] OLD NEW\n\n      Rename node from OLD to NEW.\n\n### Rename enum\n\n    Usage: pfb rename [PARENT OPTIONS] enum [OPTIONS] FIELD OLD NEW\n\n      Rename enum of FIELD from OLD to NEW.\n\n### Convert PFB into Neptune (bulk load format for Gremlin)\n\n    Usage: pfb to [PARENT OPTIONS] gremlin [OPTIONS] [OUTPUT]\n\n      Convert PFB into CSV files under OUTPUT for Neptune bulk load (Gremlin).\n\n      The default OUTPUT is ./gremlin/.\n\n    Options:\n      --gzip / --no-gzip  Whether gzip the output.  [default: yes]\n\n    Example:\n      pfb to -i data.avro gremlin\n\n\n## Examples\n\n    pfb from dict http://s3.amazonaws.com/dictionary-artifacts/kf-dictionary/1.1.0/schema.json > ./tests/schema/kf.avro\n    \n    pfb from json ./tests/data -s ./tests/schema/kf.avro --program DEV --project test > tests/pfb-data/test.avro\n\n    cat tests/pfb-data/test.avro | pfb rename node slide slide_test > tests/pfb-data/rename_test.avro\n    \n    cat tests/pfb-data/test.avro | pfb rename enum state validated validated_test > tests/pfb-data/rename_test.avro\n    \n    cat tests/pfb-data/test.avro | pfb show -n 1 | jq\n\n    cat tests/pfb-data/test.avro | pfb show --schema | jq\n\n    cat tests/pfb-data/test.avro | pfb to gremlin ./output/\n\n\n  [1]: ./doc/schema.svg", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/uc-cdis/pypfb", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pypfb", "package_url": "https://pypi.org/project/pypfb/", "platform": "", "project_url": "https://pypi.org/project/pypfb/", "project_urls": {"Homepage": "https://github.com/uc-cdis/pypfb"}, "release_url": "https://pypi.org/project/pypfb/0.4.2/", "requires_dist": null, "requires_python": "", "summary": "Python SDK for PFB format", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># :construction: PFB Python SDK :construction:</p>\n<p>Python SDK to create, explore and modify PFB (Portable Format for Biomedical Data) files.</p>\n<p>## PyPFB Overview</p>\n<p>PyPFB is a python sdk to create, explore, and modify PFB (Portable Format for Bioinformatics) files.</p>\n<p>These files start from a Gen3 data dictionary. These can be made from either json hosted on a cloud storage service, like s3, or from a local directory. See PyPFB From Schema for an example.</p>\n<p>Once we have a PFB file created from a schema we can start to add data to the file. This is done using JSON files from local directory. We create them in the style of our data-simulator <a href=\"https://github.com/uc-cdis/data-simulator/\" rel=\"nofollow\">https://github.com/uc-cdis/data-simulator/</a> Once we have them we can use PFB From JSON to import the structured json into our Serialized PFB file.</p>\n<p>At this point we have a PFB file with married schema and serialized data. Now we have a few options for modifying these PFB files. These are good options for breaking changes within the dictionary. This allows a commons operator to export the entire structured database, make modifications to fix the breaking changes, and then re import the file back to the commons.</p>\n<p>Changes that are already supported by this SDK are renames (enum and nodes) and adds of records data.</p>\n<p>## PFB Schema</p>\n<p>[![metadata][1]][1]</p>\n<p>## Installation</p>\n<ul>\n<li>From PyPI:</li>\n</ul>\n<p><tt>`bash\npip install pypfb[gen3]\n`</tt></p>\n<p>(The optional <cite>gen3</cite> dependencies add the ability to convert a Gen3 data dictionary into\na PFB file.)</p>\n<ul>\n<li>From source code:</li>\n</ul>\n<p><tt>`bash\npipenv install\n`</tt></p>\n<p>(Also add <cite>\u2013dev</cite> for development.)</p>\n<p>## Usage</p>\n<p>### Main</p>\n<blockquote>\n<p>Usage: pfb [OPTIONS] COMMAND [ARGS]\u2026</p>\n<blockquote>\nPFB: Portable Format for Biomedical Data.</blockquote>\n<dl>\n<dt>Commands:</dt>\n<dd>add     Add records into a PFB file.\nfrom    Generate PFB from other data formats.\nmake    Make a blank record for add.\nrename  Rename different parts of schema.\nshow    Show different parts of a PFB file.\nto      Convert PFB into other data formats.</dd>\n</dl>\n</blockquote>\n<p>### Show different parts of PFB</p>\n<blockquote>\n<p>Usage: pfb show [OPTIONS] COMMAND [ARGS]\u2026</p>\n<blockquote>\n<p>Show records of the PFB file.</p>\n<p>Specify a sub-command to show other information.</p>\n</blockquote>\n<dl>\n<dt>Options:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-i</span>, <span class=\"option\">--input <var>FILENAME</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>The PFB file.  [default: &lt;stdin&gt;]</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-n</span>, <span class=\"option\">--limit <var>INTEGER</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>How many records to show, ignored for sub-commands.\n[default: no limit]</td></tr>\n</tbody>\n</table>\n</dd>\n<dt>Commands:</dt>\n<dd>metadata  Show the metadata of the PFB file.\nnodes     Show all the node names in the PFB file.\nschema    Show the schema of the PFB file.</dd>\n<dt>Examples:</dt>\n<dd><dl>\n<dt>schema:</dt>\n<dd>pfb show -i data.avro schema</dd>\n<dt>nodes:</dt>\n<dd>pfb show -i data.avro nodes</dd>\n<dt>metadata:</dt>\n<dd>pfb show -i data.avro metadata</dd>\n<dt>records:</dt>\n<dd>pfb show -i data.avro -n 5</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n<p>### Convert Gen3 data dictionary into PFB schema</p>\n<blockquote>\n<p>Usage: pfb from [PARENT OPTIONS] dict DICTIONARY</p>\n<blockquote>\n<p>Convert Gen3 data DICTIONARY into a PFB file.</p>\n<p>If DICTIONARY is a HTTP URL, it will be downloaded and parsed as JSON; or\nit will be treated as a local path to a directory containing YAML files.</p>\n</blockquote>\n<dl>\n<dt>Parent Options:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-o</span>, <span class=\"option\">--output <var>FILENAME</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>The output PFB file.  [default: &lt;stdout&gt;]</td></tr>\n</tbody>\n</table>\n</dd>\n<dt>Examples:</dt>\n<dd><dl>\n<dt>URL:</dt>\n<dd>pfb from -o thing.avro dict <a href=\"https://s3.amazonaws.com/dictionary-artifacts/gtexdictionary/3.2.2/schema.json\" rel=\"nofollow\">https://s3.amazonaws.com/dictionary-artifacts/gtexdictionary/3.2.2/schema.json</a></dd>\n<dt>Directory:</dt>\n<dd>pfb from -o gdc.avro dict /path/to/dictionary/schemas/</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n<p>### Convert JSON for corresponding datadictionary to PFB</p>\n<blockquote>\n<p>Usage: pfb from [PARENT OPTIONS] json [OPTIONS] [PATH]</p>\n<blockquote>\nConvert JSON files under PATH into a PFB file.</blockquote>\n<dl>\n<dt>Parent Options:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-o</span>, <span class=\"option\">--output <var>FILENAME</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>The output PFB file.  [default: &lt;stdout&gt;]</td></tr>\n</tbody>\n</table>\n</dd>\n<dt>Options:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-s</span>, <span class=\"option\">--schema <var>FILENAME</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>The PFB file to load the schema from.  [required]</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--program <var>TEXT</var></span></kbd></td>\n<td>Name of the program.  [required]</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--project <var>TEXT</var></span></kbd></td>\n<td>Name of the project.  [required]</td></tr>\n</tbody>\n</table>\n</dd>\n<dt>Example:</dt>\n<dd>pfb from -o data.avro json -s schema.avro \u2013program DEV \u2013project test /path/to/data/json/</dd>\n</dl>\n</blockquote>\n<p>### Make new blank record</p>\n<blockquote>\n<p>Usage: pfb make [OPTIONS] NAME</p>\n<blockquote>\nMake a blank record according to given NODE schema in the PFB file.</blockquote>\n<dl>\n<dt>Options:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-i</span>, <span class=\"option\">--input <var>PFB</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Read schema from this PFB file.  [default: &lt;stdin&gt;]</td></tr>\n</tbody>\n</table>\n</dd>\n<dt>Example:</dt>\n<dd>pfb make -i test.avro demographic &gt; empty_demographic.json</dd>\n</dl>\n</blockquote>\n<p>### Add new record to PFB</p>\n<blockquote>\n<p>Usage: pfb add [OPTIONS] PFB</p>\n<blockquote>\nAdd records from a minified JSON file to the PFB file.</blockquote>\n<dl>\n<dt>Options:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-i</span>, <span class=\"option\">--input <var>JSON</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>The JSON file to add.  [default: &lt;stdin&gt;]</td></tr>\n</tbody>\n</table>\n</dd>\n<dt>Example:</dt>\n<dd>pfb add -i new_record.json pfb.avro</dd>\n</dl>\n</blockquote>\n<p>### Rename different parts of PFB (schema evolution)</p>\n<blockquote>\n<p>Usage: pfb rename [OPTIONS] COMMAND [ARGS]\u2026</p>\n<blockquote>\nRename different parts of schema.</blockquote>\n<dl>\n<dt>Options:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-i</span>, <span class=\"option\">--input <var>FILENAME</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Source PFB file.  [default: &lt;stdin&gt;]</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-o</span>, <span class=\"option\">--output <var>FILENAME</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Destination PFB file.  [default: &lt;stdout&gt;]</td></tr>\n</tbody>\n</table>\n</dd>\n<dt>Commands:</dt>\n<dd>enum  Rename enum.\nnode  Rename node.\ntype  Rename type (not implemented).</dd>\n<dt>Examples:</dt>\n<dd><dl>\n<dt>enum:</dt>\n<dd>pfb rename -i data.avro -o data_enum.avro enum demographic_ethnicity old_enum new_enum</dd>\n<dt>node:</dt>\n<dd>pfb rename -i data.avro -o data_update.avro node demographic information</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n<p>### Rename node</p>\n<blockquote>\n<p>Usage: pfb rename [PARENT OPTIONS] node [OPTIONS] OLD NEW</p>\n<blockquote>\nRename node from OLD to NEW.</blockquote>\n</blockquote>\n<p>### Rename enum</p>\n<blockquote>\n<p>Usage: pfb rename [PARENT OPTIONS] enum [OPTIONS] FIELD OLD NEW</p>\n<blockquote>\nRename enum of FIELD from OLD to NEW.</blockquote>\n</blockquote>\n<p>### Convert PFB into Neptune (bulk load format for Gremlin)</p>\n<blockquote>\n<p>Usage: pfb to [PARENT OPTIONS] gremlin [OPTIONS] [OUTPUT]</p>\n<blockquote>\n<p>Convert PFB into CSV files under OUTPUT for Neptune bulk load (Gremlin).</p>\n<p>The default OUTPUT is ./gremlin/.</p>\n</blockquote>\n<dl>\n<dt>Options:</dt>\n<dd>\u2013gzip / \u2013no-gzip  Whether gzip the output.  [default: yes]</dd>\n<dt>Example:</dt>\n<dd>pfb to -i data.avro gremlin</dd>\n</dl>\n</blockquote>\n<p>## Examples</p>\n<blockquote>\n<blockquote>\n<p>pfb from dict <a href=\"http://s3.amazonaws.com/dictionary-artifacts/kf-dictionary/1.1.0/schema.json\" rel=\"nofollow\">http://s3.amazonaws.com/dictionary-artifacts/kf-dictionary/1.1.0/schema.json</a> &gt; ./tests/schema/kf.avro</p>\n<p>pfb from json ./tests/data -s ./tests/schema/kf.avro \u2013program DEV \u2013project test &gt; tests/pfb-data/test.avro</p>\n<p>cat tests/pfb-data/test.avro | pfb rename node slide slide_test &gt; tests/pfb-data/rename_test.avro</p>\n<p>cat tests/pfb-data/test.avro | pfb rename enum state validated validated_test &gt; tests/pfb-data/rename_test.avro</p>\n<p>cat tests/pfb-data/test.avro | pfb show -n 1 | jq</p>\n<p>cat tests/pfb-data/test.avro | pfb show \u2013schema | jq</p>\n<p>cat tests/pfb-data/test.avro | pfb to gremlin ./output/</p>\n</blockquote>\n<p>[1]: ./doc/schema.svg</p>\n</blockquote>\n\n          </div>"}, "last_serial": 6320986, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8a9908c6ab147631116ba5fafc798f09", "sha256": "8183202dec102f788f90a29aa6057bf1e8e337b19ef70dc70ee450144fec1594"}, "downloads": -1, "filename": "pypfb-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "8a9908c6ab147631116ba5fafc798f09", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 36795, "upload_time": "2019-11-06T20:59:54", "upload_time_iso_8601": "2019-11-06T20:59:54.936807Z", "url": "https://files.pythonhosted.org/packages/b4/19/30b7a17a826b7c43a3318f11428ddfd4b5ca84fd1b114dfc02c63560bcfb/pypfb-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1338f0c68a881dae95e4411df2c0b4cc", "sha256": "f711d69792ca5f8816a3f6b4a944446336b6da586ab958d69b15c37272df8973"}, "downloads": -1, "filename": "pypfb-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1338f0c68a881dae95e4411df2c0b4cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36799, "upload_time": "2019-11-06T21:00:05", "upload_time_iso_8601": "2019-11-06T21:00:05.573812Z", "url": "https://files.pythonhosted.org/packages/8f/de/f9bab77931a80c627376eb32906c3b897c1af5142cb0e91014ce66f0f31d/pypfb-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b3bd1cc3d55f2770866e6e5bd0b602e", "sha256": "58712a1311c17d486776eeba377aee3432d6dedd52a2bb5cdcdf9921fcb984ca"}, "downloads": -1, "filename": "pypfb-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1b3bd1cc3d55f2770866e6e5bd0b602e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31929, "upload_time": "2019-11-06T20:59:56", "upload_time_iso_8601": "2019-11-06T20:59:56.551007Z", "url": "https://files.pythonhosted.org/packages/0f/9b/a531dd4b4c1de2d139b6bfb0f2b7ac3cf09199d4752b2ba2001166aa0cdb/pypfb-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "bcc12fc2f69982156cab3cd2c628b42b", "sha256": "79922231cdd2316d673ef33e89506b129205dbdc234bbcd6b091e23ad7873893"}, "downloads": -1, "filename": "pypfb-0.2.0-py2.7.egg", "has_sig": false, "md5_digest": "bcc12fc2f69982156cab3cd2c628b42b", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 44726, "upload_time": "2019-11-06T20:54:24", "upload_time_iso_8601": "2019-11-06T20:54:24.015021Z", "url": "https://files.pythonhosted.org/packages/4f/6f/719edb99e44fbf0b9384a12e980b4045798ae45c2f224bc9c75c8a01391c/pypfb-0.2.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c0388d9743fe76ca392adddb7acede7", "sha256": "fc0632b3f87e62a0ec5ff70e35580cc596c1fff4d60b1c19b1c7e1a0204a0966"}, "downloads": -1, "filename": "pypfb-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2c0388d9743fe76ca392adddb7acede7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21060, "upload_time": "2019-08-14T16:44:20", "upload_time_iso_8601": "2019-08-14T16:44:20.110986Z", "url": "https://files.pythonhosted.org/packages/71/22/b9267d39672cd6cb9d28f0bf098f9a846882352d6d77619e23425b028eb6/pypfb-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2ab4eca84d6d243935aa23c43d747e2d", "sha256": "059f7728e1a3cdc2b357748c9770e6e64a677b553c4c3abce9dbd5d47546d45a"}, "downloads": -1, "filename": "pypfb-0.3.0-py2-none-any.whl", "has_sig": false, "md5_digest": "2ab4eca84d6d243935aa23c43d747e2d", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 25048, "upload_time": "2019-11-06T20:50:00", "upload_time_iso_8601": "2019-11-06T20:50:00.971933Z", "url": "https://files.pythonhosted.org/packages/cb/b2/aeaadd205752c8a14b5b9d1facbfc703b11cd6312426e5251b8a4bf8a618/pypfb-0.3.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5bb8180a90beae39155a93248ca444a4", "sha256": "d0f8b6843ede56d02a5edaedc6a4e06ab38bf494fa6a42264c57c0c5273b4b03"}, "downloads": -1, "filename": "pypfb-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5bb8180a90beae39155a93248ca444a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25048, "upload_time": "2019-11-07T20:38:34", "upload_time_iso_8601": "2019-11-07T20:38:34.223000Z", "url": "https://files.pythonhosted.org/packages/9c/1d/5475071da7d4e55c7c4f3bb9e71252265e439a2bdbb6d309d19230313155/pypfb-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "436b5f1392843bc1beeadea8e2ba7866", "sha256": "f73cce6b79226e251ae2142fdacff6194fc1113da3d6c75c19186f5391c796e5"}, "downloads": -1, "filename": "pypfb-0.3.0.tar.gz", "has_sig": false, "md5_digest": "436b5f1392843bc1beeadea8e2ba7866", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22944, "upload_time": "2019-11-06T20:50:02", "upload_time_iso_8601": "2019-11-06T20:50:02.749832Z", "url": "https://files.pythonhosted.org/packages/a8/37/e4cec96e5cdf62ccb37d4c851b4d6e9cba2be47e8f4bdf45ee65c07f667b/pypfb-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "d24e177fd809e8a3b9f56088dbcd4a6b", "sha256": "14f850377329430c7f4365d4fcd30f7fcf067d89b5d4576d7eb684c1fee86f8c"}, "downloads": -1, "filename": "pypfb-0.3.1.tar.gz", "has_sig": false, "md5_digest": "d24e177fd809e8a3b9f56088dbcd4a6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22588, "upload_time": "2019-11-15T18:46:16", "upload_time_iso_8601": "2019-11-15T18:46:16.956499Z", "url": "https://files.pythonhosted.org/packages/b0/72/169683c9a959efa2e5a15b373919a16eca3427dee3d515351b97e6244519/pypfb-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "2f0860fd1947464df00838b30d700a8c", "sha256": "f8aa157f06ba6fb25803a97c9e029de94a0f6407458fc047ffde2695f14bb2d0"}, "downloads": -1, "filename": "pypfb-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2f0860fd1947464df00838b30d700a8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22697, "upload_time": "2019-12-12T17:05:38", "upload_time_iso_8601": "2019-12-12T17:05:38.676658Z", "url": "https://files.pythonhosted.org/packages/7c/48/39e1e9de0ecac908ae21d68ec21401316387a0fc82f0c7d51f31fac9b19f/pypfb-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "60f46966038649cf4755683b67edda17", "sha256": "0e14281fff26ffbe2c1819e7b854649bbbb563c989de442003d8604a4df7cac7"}, "downloads": -1, "filename": "pypfb-0.4.1.tar.gz", "has_sig": false, "md5_digest": "60f46966038649cf4755683b67edda17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22717, "upload_time": "2019-12-13T21:27:05", "upload_time_iso_8601": "2019-12-13T21:27:05.412082Z", "url": "https://files.pythonhosted.org/packages/a5/6a/ae0e961a49540188dcb84ffc35893f9d732ac51dbf17b1e3b8a084e9f3b7/pypfb-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "a2d74206100c1e9e7689059c488afa18", "sha256": "2879e826dc1f6a4ab9cb1688007306225f86913629d404f45c0e2d73ed9f1dcd"}, "downloads": -1, "filename": "pypfb-0.4.2.tar.gz", "has_sig": false, "md5_digest": "a2d74206100c1e9e7689059c488afa18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22840, "upload_time": "2019-12-17T22:24:32", "upload_time_iso_8601": "2019-12-17T22:24:32.677235Z", "url": "https://files.pythonhosted.org/packages/bd/55/a882e37b0948d9af6b9d7de24ebdc1844656b5f233bf181a8c83146325ac/pypfb-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a2d74206100c1e9e7689059c488afa18", "sha256": "2879e826dc1f6a4ab9cb1688007306225f86913629d404f45c0e2d73ed9f1dcd"}, "downloads": -1, "filename": "pypfb-0.4.2.tar.gz", "has_sig": false, "md5_digest": "a2d74206100c1e9e7689059c488afa18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22840, "upload_time": "2019-12-17T22:24:32", "upload_time_iso_8601": "2019-12-17T22:24:32.677235Z", "url": "https://files.pythonhosted.org/packages/bd/55/a882e37b0948d9af6b9d7de24ebdc1844656b5f233bf181a8c83146325ac/pypfb-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:41 2020"}