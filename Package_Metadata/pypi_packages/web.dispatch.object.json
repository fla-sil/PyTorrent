{"info": {"author": "Alice Bevan-McGregor", "author_email": "alice@gothcandy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===================\nweb.dispatch.object\n===================\n\n    \u00a9 2009-2019 Alice Bevan-McGregor and contributors.\n\n..\n\n    https://github.com/marrow/web.dispatch.object\n\n..\n\n    |latestversion| |ghtag| |downloads| |masterstatus| |mastercover| |masterreq| |ghwatch| |ghstar|\n\n\n\nIntroduction\n============\n\nDispatch is the process of taking some starting point and a path, then resolving the object that path refers to. This\nprocess is common to almost every web application framework (transforming URLs into controllers), RPC system, and even\nfilesystem shell. Other terms for this process include: \"traversal\", \"routing\", or \"lookup\".\n\nObject dispatch is a particular flavour of dispatch that attempts to resolve path elements as a chain of object\nattributes.  This is similar to how Python's ``import`` machinery would work, with modules being just another object.\nA simplified analogy for object dispatch would be that of a filesystem, with \"objects\" as directories, and\n\"attributes\" as files.\n\nThis package speaks a standardized `dispatch protocol <https://github.com/marrow/WebCore/wiki/Dispatch-Protocol>`_ and\nis not entirely intended for direct use by most developers. The target audience is instead the authors of frameworks\nthat may require such modular dispatch for use by their own users.\n\n\nInstallation\n============\n\nInstalling ``web.dispatch.object`` is easy, just execute the following in a terminal::\n\n    pip install web.dispatch.object\n\n**Note:** We *strongly* recommend always using a container, virtualization, or sandboxing environment of some kind when\ndeveloping using Python; installing things system-wide is yucky (for a variety of reasons) nine times out of ten.  We\nprefer light-weight `virtualenv <https://virtualenv.pypa.io/en/latest/virtualenv.html>`_, others prefer solutions as\nrobust as `Vagrant <http://www.vagrantup.com>`_.\n\nIf you add ``web.dispatch.object`` to the ``install_requires`` argument of the call to ``setup()`` in your\napplication's ``setup.py`` file, this dispatcher will be automatically installed and made available when your own\napplication or library is installed.  We recommend using \"less than\" version numbers to ensure there are no\nunintentional side-effects when updating.  Use ``web.dispatch.object<3.1`` to get all bugfixes for the current release,\nand ``web.dispatch.object<4.0`` to get bugfixes and feature updates while ensuring that large breaking changes are not\ninstalled.\n\n\nDevelopment Version\n-------------------\n\n    |developstatus| |developcover| |ghsince| |issuecount| |ghfork|\n\nDevelopment takes place on `GitHub <https://github.com/>`_ in the \n`web.dispatch.object <https://github.com/marrow/web.dispatch.object/>`_ project.  Issue tracking, documentation, and\ndownloads are provided there.\n\nInstalling the current development version requires `Git <http://git-scm.com/>`_, a distributed source code management\nsystem.  If you have Git you can run the following to download and *link* the development version into your Python\nruntime::\n\n    git clone https://github.com/marrow/web.dispatch.object.git\n    pip install -e 'web.dispatch.object[development]'\n\nYou can then upgrade to the latest version at any time::\n\n    (cd web.dispatch.object; git pull; pip install -e .)\n\nIf you would like to make changes and contribute them back to the project, fork the GitHub project, make your changes,\nand submit a pull request.  This process is beyond the scope of this documentation; for more information see\n`GitHub's documentation <http://help.github.com/>`_.\n\n\nUsage\n=====\n\nThis section is split to cover framework authors who will need to integrate the overall protocol into their systems,\nand the object interactions this form of dispatch provides for end users.\n\n\nFramework Use\n-------------\n\nAt the most basic level, in order to resolve paths against a tree of objects one must first insantiate the dispatcher::\n\n    from web.dispatch.object import ObjectDispatch\n\n    dispatch = ObjectDispatch()  # Opportunity to pass configuration options here.\n\nThe object dispatcher currently only has one configurable option: ``protect``. This defaults to ``True``, and will\nprematurely end dispatch in the event it encounters a path element beginning with an underscore. This protects Python\nmagic attributes (such as ``__name__``), mangled \"private\" methods (such as ``__foo``), and protected-by-convention\nsingle underscore prefixed attributes (such as ``_foo``). Python ordinarily does not enforce such protections,\nexcepting the \"mangling\" feature which is only `security through obscurity <http://s.webcore.io/image/1X3T0p2h3O0K>`_.\n\nNow that you have a prepared dispatcher, and presuming you have some \"base object\" to start dispatch from, you'll need\nto prepare the path according to the protocol::\n\n    path = \"/foo/bar/baz\"  # Initial path, i.e. an HTTP request's PATH_INFO.\n    path = path.split('/')  # Find the path components.\n    path = path[1:]  # Skip the singular leading slash; see the API specification.\n    path = deque(path)  # Provide the path as a deque instance, allowing popleft.\n\nOf course, the above is rarely split apart like that. We split apart the invidiual steps of path processing here to\nmore clearly illustrate. In a web framework the above would happen once per request that uses dispatch. This, of\ncourse, frees your framework to use whatever internal or public representation of path you want: choices of\nseparators, and the ability for deque to consume arbitrary iterables. An RPC system might ``split`` on a period and\nsimply not have the possibility of leading separators. Etc.\n\nYou can now call the dispatcher and iterate the dispatch events::\n\n    for segment, handler, endpoint, *meta in dispatch(None, some_object, path):\n        print(segment, handler, endpoint)  # Do something with this information.\n\nThe initial ``None`` value there represents the \"context\" to pass along to initializers of classes encountered during\ndispatch.  If the value ``None`` is provided, classes won't be instantiated with any arguments. If a context is\nprovided it will be passed as the first positional argument to instantiation.\n\nAfter completing iteration, check the final ``endpoint``.  If it is ``True`` then the path was successfully mapped to\nthe object referenced by the ``handler`` variable, otherwise it represents the deepest object that was able to be\nfound. While some dispatchers might not support partial path resolution and may instead raise ``LookupError`` or a\nsubclass, such as ``AttriuteError`` or ``KeyError``, object dispatch does not do this. This is to allow the framework\nmaking use of object dispatch to decide for itself how to proceed in the event of failed or partial lookup, in a\nsomewhat cleaner way than extensive exception handling within a loop.\n\nIn the context of a web framework, dispatch being an iterable process makes a lot of sense. In the simplest use of\niteration, path elements would be moved from ``PATH_INFO`` to ``SCRIPT_NAME`` as dispatch progresses, or to build up a\n\"bread crumb list\" of accessible controllers.\n\nYou can always just skip straight to the answer if you so choose::\n\n    segment, handler, endpoint, *meta = list(dispatch(None, some_object, path))[-1]\n\nHowever, providing some mechanism for callbacks or notifications of dispatch is often far more generally useful.\n\n**Note:** It is entirely permissable for dispatchers to return ``None`` as a processed path segment. Object dispatch\nwill do this to announce the starting point of dispatch. This is especially useful if you need to know if the initial\nobject was a class that was instantiated.  (In that event ``handler`` will be an instance of ``some_object`` during\nthe first iteration instead of being literally ``some_object``.)  Other dispatchers may return ``None`` at other\ntimes, such as to indicate multiple steps of intermediate processing.\n\nPython 2 & 3 Compatibility\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe dispatch protocol is designed to be extendable in the future by using ``namedtuple`` subclasses, however this has\nan impact on usage as you may have noticed the ``*meta`` in there. This syntax, introduced in Python 3, will gather\nany extraneous tuple elements into a separate list. If you actually care about the metadata do not unpack the tuple\nthis way.  Instead::\n\n    for meta in dispatch(None, some_object, path):\n        segment, handler, endpoint = step[:3]  # Unpack, but preserve.\n        print(segment, handler, endpoint, meta)  # Do something with this information.\n\nThis document is written from the perspective of modern Python 3, and throwing away the metadata within the ``for``\nstatement itself provides more compact examples. The above method of unpacking the first three values is the truly\nportable way to do this across versions.\n\n\nDispatchable Objects\n--------------------\n\nEvery object, of every built-in or third-party class in Python, supports object dispatch. This is because this form\nof dispatch is implemented as a series of basic ``getattr()`` calls happening in a loop. In theory, you can dispatch\nagainst anything. In practice, there are certain expectations and protocols you will have to work within. The first of\nthese notes is extremely important to keep in mind:\n\n* Bare classes are instantiated with zero or one positional argument, depending on the presence of a context.\n* You can override ``getattr()`` by providing a ``__getattr__(self, name)`` method in your object's class.\n* Python has no particular distinction between a \"real\" attribute and one generated by ``__getattr__``, so if\n  protection is enabled dispatch would stop and your ``__getattr__`` method would never be called when\n  encountering protected path elements.\n* If a callable routine is encountered, it is considered the endpoint regardless of the presence of additional path\n  elements. This does not extend to classes with ``__call__`` methods, allowing mixed use in that situation.\n\nWith those elements out of the way, we'll work up from the simplest possible example, a single function::\n\n    def hola():\n        pass\n\nAny path resolved against a plain function will resolve to that plain function. You can't \"descend\" past any routine;\nthey are, by definition, endpoints. In this instance there will be only a single dispatch event.\n\nA slightly more complex example involves a class with callable instances::\n\n    class Thing:\n        def __call__(self):\n            pass\n\nSimilar to an isolated function, an instance of the ``Thing`` class will be the endpoint for all paths. As a note,\nmore specific attributes are preferred over the instance-level ``__call__``, however an empty path (in this example)\nwill always use the instance as the endpoint, and missing attributes will also use the instance as the endpoint. It is\nup to the framework you are using to determine if this is a problem or not, i.e. to allow unprocessed path elements.\n\nIn the following example::\n\n    class Thing:\n        class foo:\n            def bar(self):\n                pass\n\nOnly dispatch to the paths ``/``, ``/foo``, and ``/foo/bar`` will resolve, and only ``/foo/bar`` finds a recognizable\nendpoint. For a somewhat real-world example, the following would successfully represent a database-backed collection\nof things, each with their own set of endpoints::\n\n    class Thing:\n        def __init__(self, identifier):\n            self._thing = identifier  # This might look it up from the DB.\n\n        def __call__(self):\n            pass  # Handle direct access to an identified thing.\n\n        def action(self):\n            pass  # This will match any path in the form /<identifier>/action\n\n    class Things:\n        def __call__(self):\n            pass  # This will only handle the path /\n\n        def __getattr__(self, identifier):\n            return Thing(identifier)\n\nBecause there is a ``__getattr__`` method and it does not raise an ``AttributeError`` all first path segments are\nvalid on the ``Things`` class, giving you such paths as::\n\n    / - Things.__call__\n    /foo - Thing.__call__\n    /foo/action - Thing.action\n    /bar - Thing.__call__\n    /bar/action - Thing.action\n\nEt cetera.\n\n\nVersion History\n===============\n\nVersion 3.0\n-----------\n\n* Python 2 support removed and Python 2 specific code eliminated.\n* Updated to utilize Python 3 namespace packaging. **Critical Note**: This is not compatible with any Marrow package\n  that is backwards compatible with Python 2.\n\nVersion 2.1\n-----------\n\n* Massive simplification and conformance to common dispatch protocol.\n\nVersion 2.0\n-----------\n\n* Extract of the object dispatch mechanism from WebCore.\n\nVersion 1.x\n-----------\n\n* Process fully integrated in the WebCore web framework.\n\n\nLicense\n=======\n\nweb.dispatch.object has been released under the MIT Open Source license.\n\nThe MIT License\n---------------\n\nCopyright \u00a9 2009-2019 Alice Bevan-McGregor and contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n.. |ghwatch| image:: https://img.shields.io/github/watchers/marrow/web.dispatch.object.svg?style=social&label=Watch\n    :target: https://github.com/marrow/web.dispatch.object/subscription\n    :alt: Subscribe to project activity on Github.\n\n.. |ghstar| image:: https://img.shields.io/github/stars/marrow/web.dispatch.object.svg?style=social&label=Star\n    :target: https://github.com/marrow/web.dispatch.object/subscription\n    :alt: Star this project on Github.\n\n.. |ghfork| image:: https://img.shields.io/github/forks/marrow/web.dispatch.object.svg?style=social&label=Fork\n    :target: https://github.com/marrow/web.dispatch.object/fork\n    :alt: Fork this project on Github.\n\n.. |masterstatus| image:: http://img.shields.io/travis/marrow/web.dispatch.object/master.svg?style=flat\n    :target: https://travis-ci.org/marrow/web.dispatch.object/branches\n    :alt: Release build status.\n\n.. |mastercover| image:: http://img.shields.io/codecov/c/github/marrow/web.dispatch.object/master.svg?style=flat\n    :target: https://codecov.io/github/marrow/web.dispatch.object?branch=master\n    :alt: Release test coverage.\n\n.. |masterreq| image:: https://img.shields.io/requires/github/marrow/web.dispatch.object.svg\n    :target: https://requires.io/github/marrow/web.dispatch.object/requirements/?branch=master\n    :alt: Status of release dependencies.\n\n.. |developstatus| image:: http://img.shields.io/travis/marrow/web.dispatch.object/develop.svg?style=flat\n    :target: https://travis-ci.org/marrow/web.dispatch.object/branches\n    :alt: Development build status.\n\n.. |developcover| image:: http://img.shields.io/codecov/c/github/marrow/web.dispatch.object/develop.svg?style=flat\n    :target: https://codecov.io/github/marrow/web.dispatch.object?branch=develop\n    :alt: Development test coverage.\n\n.. |developreq| image:: https://img.shields.io/requires/github/marrow/web.dispatch.object.svg\n    :target: https://requires.io/github/marrow/web.dispatch.object/requirements/?branch=develop\n    :alt: Status of development dependencies.\n\n.. |issuecount| image:: http://img.shields.io/github/issues-raw/marrow/web.dispatch.object.svg?style=flat\n    :target: https://github.com/marrow/web.dispatch.object/issues\n    :alt: Github Issues\n\n.. |ghsince| image:: https://img.shields.io/github/commits-since/marrow/web.dispatch.object/2.1.0.svg\n    :target: https://github.com/marrow/web.dispatch.object/commits/develop\n    :alt: Changes since last release.\n\n.. |ghtag| image:: https://img.shields.io/github/tag/marrow/web.dispatch.object.svg\n    :target: https://github.com/marrow/web.dispatch.object/tree/2.1.0\n    :alt: Latest Github tagged release.\n\n.. |latestversion| image:: http://img.shields.io/pypi/v/web.dispatch.object.svg?style=flat\n    :target: https://pypi.python.org/pypi/web.dispatch.object\n    :alt: Latest released version.\n\n.. |downloads| image:: http://img.shields.io/pypi/dw/web.dispatch.object.svg?style=flat\n    :target: https://pypi.python.org/pypi/web.dispatch.object\n    :alt: Downloads per week.\n\n.. |cake| image:: http://img.shields.io/badge/cake-lie-1b87fb.svg?style=flat\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.org/project/web.dispatch.object/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marrow/web.dispatch.object", "keywords": "marrow,dispatch,web.dispatch,object dispatch,endpoint discovery,WebCore", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "web.dispatch.object", "package_url": "https://pypi.org/project/web.dispatch.object/", "platform": "", "project_url": "https://pypi.org/project/web.dispatch.object/", "project_urls": {"Documentation": "https://github.com/marrow/web.dispatch.object/#readme", "Download": "https://pypi.org/project/web.dispatch.object/releases", "Funding": "https://www.patreon.com/GothAlice", "Homepage": "https://github.com/marrow/web.dispatch.object", "Issue Tracker": "https://github.com/marrow/web.dispatch.object/issues", "Repository": "https://github.com/marrow/web.dispatch.object/"}, "release_url": "https://pypi.org/project/web.dispatch.object/3.0.0/", "requires_dist": ["web.dispatch (~=3.0.1)", "pytest ; extra == 'development'", "pytest-cov ; extra == 'development'", "pytest-flakes ; extra == 'development'", "pytest-isort ; extra == 'development'", "pre-commit ; extra == 'development'"], "requires_python": "~=3.6", "summary": "Object dispatch; a method to resolve path components to Python objects using directed attribute access.", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n\u00a9 2009-2019 Alice Bevan-McGregor and contributors.</blockquote>\n<blockquote>\n<a href=\"https://github.com/marrow/web.dispatch.object\" rel=\"nofollow\">https://github.com/marrow/web.dispatch.object</a></blockquote>\n<blockquote>\n<a href=\"https://pypi.python.org/pypi/web.dispatch.object\" rel=\"nofollow\"><img alt=\"Latest released version.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f316f3d86edee40271d6544868adb78093fd8524/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f7765622e64697370617463682e6f626a6563742e7376673f7374796c653d666c6174\"></a> <a href=\"https://github.com/marrow/web.dispatch.object/tree/2.1.0\" rel=\"nofollow\"><img alt=\"Latest Github tagged release.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43a6db947117efc6cf539588750ba22a7ebc1ad1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f6d6172726f772f7765622e64697370617463682e6f626a6563742e737667\"></a> <a href=\"https://pypi.python.org/pypi/web.dispatch.object\" rel=\"nofollow\"><img alt=\"Downloads per week.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e4eee7cc25402c8bd185009ec7de45a694aded5/687474703a2f2f696d672e736869656c64732e696f2f707970692f64772f7765622e64697370617463682e6f626a6563742e7376673f7374796c653d666c6174\"></a> <a href=\"https://travis-ci.org/marrow/web.dispatch.object/branches\" rel=\"nofollow\"><img alt=\"Release build status.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40b08eac573d7e0575c7a1d74abdceb214e3e64e/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6d6172726f772f7765622e64697370617463682e6f626a6563742f6d61737465722e7376673f7374796c653d666c6174\"></a> <a href=\"https://codecov.io/github/marrow/web.dispatch.object?branch=master\" rel=\"nofollow\"><img alt=\"Release test coverage.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a3e16523022b42bcaacd915aaee824241786273/687474703a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d6172726f772f7765622e64697370617463682e6f626a6563742f6d61737465722e7376673f7374796c653d666c6174\"></a> <a href=\"https://requires.io/github/marrow/web.dispatch.object/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Status of release dependencies.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d1b3c73f0b30927edcab7e4cc41154d6f075e5f/68747470733a2f2f696d672e736869656c64732e696f2f72657175697265732f6769746875622f6d6172726f772f7765622e64697370617463682e6f626a6563742e737667\"></a> <a href=\"https://github.com/marrow/web.dispatch.object/subscription\" rel=\"nofollow\"><img alt=\"Subscribe to project activity on Github.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e50a9f5134acfa8958af78c854850f111b94b479/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f6d6172726f772f7765622e64697370617463682e6f626a6563742e7376673f7374796c653d736f6369616c266c6162656c3d5761746368\"></a> <a href=\"https://github.com/marrow/web.dispatch.object/subscription\" rel=\"nofollow\"><img alt=\"Star this project on Github.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/374d74f0725312b1a4f5353e30c1d50ae0622694/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6d6172726f772f7765622e64697370617463682e6f626a6563742e7376673f7374796c653d736f6369616c266c6162656c3d53746172\"></a></blockquote>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Dispatch is the process of taking some starting point and a path, then resolving the object that path refers to. This\nprocess is common to almost every web application framework (transforming URLs into controllers), RPC system, and even\nfilesystem shell. Other terms for this process include: \u201ctraversal\u201d, \u201crouting\u201d, or \u201clookup\u201d.</p>\n<p>Object dispatch is a particular flavour of dispatch that attempts to resolve path elements as a chain of object\nattributes.  This is similar to how Python\u2019s <tt>import</tt> machinery would work, with modules being just another object.\nA simplified analogy for object dispatch would be that of a filesystem, with \u201cobjects\u201d as directories, and\n\u201cattributes\u201d as files.</p>\n<p>This package speaks a standardized <a href=\"https://github.com/marrow/WebCore/wiki/Dispatch-Protocol\" rel=\"nofollow\">dispatch protocol</a> and\nis not entirely intended for direct use by most developers. The target audience is instead the authors of frameworks\nthat may require such modular dispatch for use by their own users.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installing <tt>web.dispatch.object</tt> is easy, just execute the following in a terminal:</p>\n<pre>pip install web.dispatch.object\n</pre>\n<p><strong>Note:</strong> We <em>strongly</em> recommend always using a container, virtualization, or sandboxing environment of some kind when\ndeveloping using Python; installing things system-wide is yucky (for a variety of reasons) nine times out of ten.  We\nprefer light-weight <a href=\"https://virtualenv.pypa.io/en/latest/virtualenv.html\" rel=\"nofollow\">virtualenv</a>, others prefer solutions as\nrobust as <a href=\"http://www.vagrantup.com\" rel=\"nofollow\">Vagrant</a>.</p>\n<p>If you add <tt>web.dispatch.object</tt> to the <tt>install_requires</tt> argument of the call to <tt>setup()</tt> in your\napplication\u2019s <tt>setup.py</tt> file, this dispatcher will be automatically installed and made available when your own\napplication or library is installed.  We recommend using \u201cless than\u201d version numbers to ensure there are no\nunintentional side-effects when updating.  Use <tt>web.dispatch.object&lt;3.1</tt> to get all bugfixes for the current release,\nand <tt>web.dispatch.object&lt;4.0</tt> to get bugfixes and feature updates while ensuring that large breaking changes are not\ninstalled.</p>\n<div id=\"development-version\">\n<h3>Development Version</h3>\n<blockquote>\n<a href=\"https://travis-ci.org/marrow/web.dispatch.object/branches\" rel=\"nofollow\"><img alt=\"Development build status.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ce9f55a4273d2136c9b7e74da5016125215b5fa/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6d6172726f772f7765622e64697370617463682e6f626a6563742f646576656c6f702e7376673f7374796c653d666c6174\"></a> <a href=\"https://codecov.io/github/marrow/web.dispatch.object?branch=develop\" rel=\"nofollow\"><img alt=\"Development test coverage.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3d9a5aec7e34b7efa17e879a6cca0590dd36141/687474703a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d6172726f772f7765622e64697370617463682e6f626a6563742f646576656c6f702e7376673f7374796c653d666c6174\"></a> <a href=\"https://github.com/marrow/web.dispatch.object/commits/develop\" rel=\"nofollow\"><img alt=\"Changes since last release.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b012663fcf9ce4430d3f968e93a3a50225890f8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f6d6172726f772f7765622e64697370617463682e6f626a6563742f322e312e302e737667\"></a> <a href=\"https://github.com/marrow/web.dispatch.object/issues\" rel=\"nofollow\"><img alt=\"Github Issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ebc13ebdb0bdd865682b782e4a3f1c6cbe826cd/687474703a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f6d6172726f772f7765622e64697370617463682e6f626a6563742e7376673f7374796c653d666c6174\"></a> <a href=\"https://github.com/marrow/web.dispatch.object/fork\" rel=\"nofollow\"><img alt=\"Fork this project on Github.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e77db95f9001caf9d72165d5b1a0b8d304fe69cf/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6d6172726f772f7765622e64697370617463682e6f626a6563742e7376673f7374796c653d736f6369616c266c6162656c3d466f726b\"></a></blockquote>\n<p>Development takes place on <a href=\"https://github.com/\" rel=\"nofollow\">GitHub</a> in the\n<a href=\"https://github.com/marrow/web.dispatch.object/\" rel=\"nofollow\">web.dispatch.object</a> project.  Issue tracking, documentation, and\ndownloads are provided there.</p>\n<p>Installing the current development version requires <a href=\"http://git-scm.com/\" rel=\"nofollow\">Git</a>, a distributed source code management\nsystem.  If you have Git you can run the following to download and <em>link</em> the development version into your Python\nruntime:</p>\n<pre>git clone https://github.com/marrow/web.dispatch.object.git\npip install -e 'web.dispatch.object[development]'\n</pre>\n<p>You can then upgrade to the latest version at any time:</p>\n<pre>(cd web.dispatch.object; git pull; pip install -e .)\n</pre>\n<p>If you would like to make changes and contribute them back to the project, fork the GitHub project, make your changes,\nand submit a pull request.  This process is beyond the scope of this documentation; for more information see\n<a href=\"http://help.github.com/\" rel=\"nofollow\">GitHub\u2019s documentation</a>.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>This section is split to cover framework authors who will need to integrate the overall protocol into their systems,\nand the object interactions this form of dispatch provides for end users.</p>\n<div id=\"framework-use\">\n<h3>Framework Use</h3>\n<p>At the most basic level, in order to resolve paths against a tree of objects one must first insantiate the dispatcher:</p>\n<pre>from web.dispatch.object import ObjectDispatch\n\ndispatch = ObjectDispatch()  # Opportunity to pass configuration options here.\n</pre>\n<p>The object dispatcher currently only has one configurable option: <tt>protect</tt>. This defaults to <tt>True</tt>, and will\nprematurely end dispatch in the event it encounters a path element beginning with an underscore. This protects Python\nmagic attributes (such as <tt>__name__</tt>), mangled \u201cprivate\u201d methods (such as <tt>__foo</tt>), and protected-by-convention\nsingle underscore prefixed attributes (such as <tt>_foo</tt>). Python ordinarily does not enforce such protections,\nexcepting the \u201cmangling\u201d feature which is only <a href=\"http://s.webcore.io/image/1X3T0p2h3O0K\" rel=\"nofollow\">security through obscurity</a>.</p>\n<p>Now that you have a prepared dispatcher, and presuming you have some \u201cbase object\u201d to start dispatch from, you\u2019ll need\nto prepare the path according to the protocol:</p>\n<pre>path = \"/foo/bar/baz\"  # Initial path, i.e. an HTTP request's PATH_INFO.\npath = path.split('/')  # Find the path components.\npath = path[1:]  # Skip the singular leading slash; see the API specification.\npath = deque(path)  # Provide the path as a deque instance, allowing popleft.\n</pre>\n<p>Of course, the above is rarely split apart like that. We split apart the invidiual steps of path processing here to\nmore clearly illustrate. In a web framework the above would happen once per request that uses dispatch. This, of\ncourse, frees your framework to use whatever internal or public representation of path you want: choices of\nseparators, and the ability for deque to consume arbitrary iterables. An RPC system might <tt>split</tt> on a period and\nsimply not have the possibility of leading separators. Etc.</p>\n<p>You can now call the dispatcher and iterate the dispatch events:</p>\n<pre>for segment, handler, endpoint, *meta in dispatch(None, some_object, path):\n    print(segment, handler, endpoint)  # Do something with this information.\n</pre>\n<p>The initial <tt>None</tt> value there represents the \u201ccontext\u201d to pass along to initializers of classes encountered during\ndispatch.  If the value <tt>None</tt> is provided, classes won\u2019t be instantiated with any arguments. If a context is\nprovided it will be passed as the first positional argument to instantiation.</p>\n<p>After completing iteration, check the final <tt>endpoint</tt>.  If it is <tt>True</tt> then the path was successfully mapped to\nthe object referenced by the <tt>handler</tt> variable, otherwise it represents the deepest object that was able to be\nfound. While some dispatchers might not support partial path resolution and may instead raise <tt>LookupError</tt> or a\nsubclass, such as <tt>AttriuteError</tt> or <tt>KeyError</tt>, object dispatch does not do this. This is to allow the framework\nmaking use of object dispatch to decide for itself how to proceed in the event of failed or partial lookup, in a\nsomewhat cleaner way than extensive exception handling within a loop.</p>\n<p>In the context of a web framework, dispatch being an iterable process makes a lot of sense. In the simplest use of\niteration, path elements would be moved from <tt>PATH_INFO</tt> to <tt>SCRIPT_NAME</tt> as dispatch progresses, or to build up a\n\u201cbread crumb list\u201d of accessible controllers.</p>\n<p>You can always just skip straight to the answer if you so choose:</p>\n<pre>segment, handler, endpoint, *meta = list(dispatch(None, some_object, path))[-1]\n</pre>\n<p>However, providing some mechanism for callbacks or notifications of dispatch is often far more generally useful.</p>\n<p><strong>Note:</strong> It is entirely permissable for dispatchers to return <tt>None</tt> as a processed path segment. Object dispatch\nwill do this to announce the starting point of dispatch. This is especially useful if you need to know if the initial\nobject was a class that was instantiated.  (In that event <tt>handler</tt> will be an instance of <tt>some_object</tt> during\nthe first iteration instead of being literally <tt>some_object</tt>.)  Other dispatchers may return <tt>None</tt> at other\ntimes, such as to indicate multiple steps of intermediate processing.</p>\n<div id=\"python-2-3-compatibility\">\n<h4>Python 2 &amp; 3 Compatibility</h4>\n<p>The dispatch protocol is designed to be extendable in the future by using <tt>namedtuple</tt> subclasses, however this has\nan impact on usage as you may have noticed the <tt>*meta</tt> in there. This syntax, introduced in Python 3, will gather\nany extraneous tuple elements into a separate list. If you actually care about the metadata do not unpack the tuple\nthis way.  Instead:</p>\n<pre>for meta in dispatch(None, some_object, path):\n    segment, handler, endpoint = step[:3]  # Unpack, but preserve.\n    print(segment, handler, endpoint, meta)  # Do something with this information.\n</pre>\n<p>This document is written from the perspective of modern Python 3, and throwing away the metadata within the <tt>for</tt>\nstatement itself provides more compact examples. The above method of unpacking the first three values is the truly\nportable way to do this across versions.</p>\n</div>\n</div>\n<div id=\"dispatchable-objects\">\n<h3>Dispatchable Objects</h3>\n<p>Every object, of every built-in or third-party class in Python, supports object dispatch. This is because this form\nof dispatch is implemented as a series of basic <tt>getattr()</tt> calls happening in a loop. In theory, you can dispatch\nagainst anything. In practice, there are certain expectations and protocols you will have to work within. The first of\nthese notes is extremely important to keep in mind:</p>\n<ul>\n<li>Bare classes are instantiated with zero or one positional argument, depending on the presence of a context.</li>\n<li>You can override <tt>getattr()</tt> by providing a <tt>__getattr__(self, name)</tt> method in your object\u2019s class.</li>\n<li>Python has no particular distinction between a \u201creal\u201d attribute and one generated by <tt>__getattr__</tt>, so if\nprotection is enabled dispatch would stop and your <tt>__getattr__</tt> method would never be called when\nencountering protected path elements.</li>\n<li>If a callable routine is encountered, it is considered the endpoint regardless of the presence of additional path\nelements. This does not extend to classes with <tt>__call__</tt> methods, allowing mixed use in that situation.</li>\n</ul>\n<p>With those elements out of the way, we\u2019ll work up from the simplest possible example, a single function:</p>\n<pre>def hola():\n    pass\n</pre>\n<p>Any path resolved against a plain function will resolve to that plain function. You can\u2019t \u201cdescend\u201d past any routine;\nthey are, by definition, endpoints. In this instance there will be only a single dispatch event.</p>\n<p>A slightly more complex example involves a class with callable instances:</p>\n<pre>class Thing:\n    def __call__(self):\n        pass\n</pre>\n<p>Similar to an isolated function, an instance of the <tt>Thing</tt> class will be the endpoint for all paths. As a note,\nmore specific attributes are preferred over the instance-level <tt>__call__</tt>, however an empty path (in this example)\nwill always use the instance as the endpoint, and missing attributes will also use the instance as the endpoint. It is\nup to the framework you are using to determine if this is a problem or not, i.e. to allow unprocessed path elements.</p>\n<p>In the following example:</p>\n<pre>class Thing:\n    class foo:\n        def bar(self):\n            pass\n</pre>\n<p>Only dispatch to the paths <tt>/</tt>, <tt>/foo</tt>, and <tt>/foo/bar</tt> will resolve, and only <tt>/foo/bar</tt> finds a recognizable\nendpoint. For a somewhat real-world example, the following would successfully represent a database-backed collection\nof things, each with their own set of endpoints:</p>\n<pre>class Thing:\n    def __init__(self, identifier):\n        self._thing = identifier  # This might look it up from the DB.\n\n    def __call__(self):\n        pass  # Handle direct access to an identified thing.\n\n    def action(self):\n        pass  # This will match any path in the form /&lt;identifier&gt;/action\n\nclass Things:\n    def __call__(self):\n        pass  # This will only handle the path /\n\n    def __getattr__(self, identifier):\n        return Thing(identifier)\n</pre>\n<p>Because there is a <tt>__getattr__</tt> method and it does not raise an <tt>AttributeError</tt> all first path segments are\nvalid on the <tt>Things</tt> class, giving you such paths as:</p>\n<pre>/ - Things.__call__\n/foo - Thing.__call__\n/foo/action - Thing.action\n/bar - Thing.__call__\n/bar/action - Thing.action\n</pre>\n<p>Et cetera.</p>\n</div>\n</div>\n<div id=\"version-history\">\n<h2>Version History</h2>\n<div id=\"version-3-0\">\n<h3>Version 3.0</h3>\n<ul>\n<li>Python 2 support removed and Python 2 specific code eliminated.</li>\n<li>Updated to utilize Python 3 namespace packaging. <strong>Critical Note</strong>: This is not compatible with any Marrow package\nthat is backwards compatible with Python 2.</li>\n</ul>\n</div>\n<div id=\"version-2-1\">\n<h3>Version 2.1</h3>\n<ul>\n<li>Massive simplification and conformance to common dispatch protocol.</li>\n</ul>\n</div>\n<div id=\"version-2-0\">\n<h3>Version 2.0</h3>\n<ul>\n<li>Extract of the object dispatch mechanism from WebCore.</li>\n</ul>\n</div>\n<div id=\"version-1-x\">\n<h3>Version 1.x</h3>\n<ul>\n<li>Process fully integrated in the WebCore web framework.</li>\n</ul>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>web.dispatch.object has been released under the MIT Open Source license.</p>\n<div id=\"the-mit-license\">\n<h3>The MIT License</h3>\n<p>Copyright \u00a9 2009-2019 Alice Bevan-McGregor and contributors.</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5382743, "releases": {"2.1.0": [{"comment_text": "", "digests": {"md5": "8c3cd1b6eb3a9f7237056b44ab24a7f0", "sha256": "72e2ad673372585ec242d4dc36ca1b6f30c8b3a4ca71278f7f559f70d9e55407"}, "downloads": -1, "filename": "web.dispatch.object-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8c3cd1b6eb3a9f7237056b44ab24a7f0", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 19113, "upload_time": "2016-02-15T01:45:53", "upload_time_iso_8601": "2016-02-15T01:45:53.253400Z", "url": "https://files.pythonhosted.org/packages/37/48/e87ceaef966ea8a1b11c411cf878ab58a943ee16177e99536f4b1ce635a3/web.dispatch.object-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "087d24adb365994d67ff80b9d0f9ac34", "sha256": "91fe3868864ab26bc2eef091b47cb8dd601dab61cfc29a012b0a1baac6b42254"}, "downloads": -1, "filename": "web.dispatch.object-2.1.0-py3.5.egg", "has_sig": false, "md5_digest": "087d24adb365994d67ff80b9d0f9ac34", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 15744, "upload_time": "2016-02-15T01:45:46", "upload_time_iso_8601": "2016-02-15T01:45:46.502144Z", "url": "https://files.pythonhosted.org/packages/c8/a0/707e20d567150aff41495902461e6dad979c390851c9aa9f057ed72b8756/web.dispatch.object-2.1.0-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b9a6b1288659751322b36bff1a74e48", "sha256": "e4556ef68f57f3da2cc0dedc48309c1c9280119abbc1626efef4fa2113c6448e"}, "downloads": -1, "filename": "web.dispatch.object-2.1.0.tar.gz", "has_sig": false, "md5_digest": "2b9a6b1288659751322b36bff1a74e48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18869, "upload_time": "2016-02-15T01:45:41", "upload_time_iso_8601": "2016-02-15T01:45:41.540397Z", "url": "https://files.pythonhosted.org/packages/57/05/56a2a48ca8c09192fe724875d4a0610250898ca86e35fa7d24d9afe570d0/web.dispatch.object-2.1.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "d355d4c3fb2ad19439989827df01cb31", "sha256": "a352e4de0a9cf1e73c1f497344bca773ddacee85bbe974ed1ef21cd19132fdd6"}, "downloads": -1, "filename": "web.dispatch.object-3.0.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "d355d4c3fb2ad19439989827df01cb31", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "~=3.6", "size": 15040, "upload_time": "2019-06-10T17:44:10", "upload_time_iso_8601": "2019-06-10T17:44:10.089540Z", "url": "https://files.pythonhosted.org/packages/87/2c/33b9b8fbac472481b4516f905607e63d5c48fc02d945405850846bdd83c2/web.dispatch.object-3.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f73ddc5f738f187237f12b16aa0c424f", "sha256": "a458b09b72cddff2aaf200ba312decb32c83d6618ec5a2c7ff7cfafccf637784"}, "downloads": -1, "filename": "web.dispatch.object-3.0.0.tar.gz", "has_sig": true, "md5_digest": "f73ddc5f738f187237f12b16aa0c424f", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 20212, "upload_time": "2019-06-10T17:44:11", "upload_time_iso_8601": "2019-06-10T17:44:11.915258Z", "url": "https://files.pythonhosted.org/packages/b2/4f/3eed5795a19267d3d3f8c3e60ab46632c527b7a7d00f422d69e6a957a293/web.dispatch.object-3.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d355d4c3fb2ad19439989827df01cb31", "sha256": "a352e4de0a9cf1e73c1f497344bca773ddacee85bbe974ed1ef21cd19132fdd6"}, "downloads": -1, "filename": "web.dispatch.object-3.0.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "d355d4c3fb2ad19439989827df01cb31", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "~=3.6", "size": 15040, "upload_time": "2019-06-10T17:44:10", "upload_time_iso_8601": "2019-06-10T17:44:10.089540Z", "url": "https://files.pythonhosted.org/packages/87/2c/33b9b8fbac472481b4516f905607e63d5c48fc02d945405850846bdd83c2/web.dispatch.object-3.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f73ddc5f738f187237f12b16aa0c424f", "sha256": "a458b09b72cddff2aaf200ba312decb32c83d6618ec5a2c7ff7cfafccf637784"}, "downloads": -1, "filename": "web.dispatch.object-3.0.0.tar.gz", "has_sig": true, "md5_digest": "f73ddc5f738f187237f12b16aa0c424f", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 20212, "upload_time": "2019-06-10T17:44:11", "upload_time_iso_8601": "2019-06-10T17:44:11.915258Z", "url": "https://files.pythonhosted.org/packages/b2/4f/3eed5795a19267d3d3f8c3e60ab46632c527b7a7d00f422d69e6a957a293/web.dispatch.object-3.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:16 2020"}