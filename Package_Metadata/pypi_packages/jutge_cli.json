{"info": {"author": "Aleix Bon\u00e9 (Leix_b)", "author_email": "abone9999@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Education", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3 :: Only", "Topic :: Education"], "description": "jutge\\_cli: a command line interface for `jutge.org`_\n=========================================================================\n\n#. `Intro`_\n#. `Installation`_\n\n    #. `Global installation (root)`_\n    #. `Archlinux PKGBUILD`_\n    #. `Installation using virtualenv (no root)`_\n\n#. `Usage`_\n#. `Configuration`_\n\n    #. `Basic options`_\n    #. `Problem sets`_\n    #. `Login credentials`_\n\n#. `Authenticate to jutge`_\n\n    #. `login command`_\n    #. `cookie command`_\n    #. `cookie flag`_\n\n#. `Commands`_\n\n    #. `add-test (add)`_\n    #. `archive`_\n    #. `check`_\n    #. `cookie`_\n    #. `download (down)`_\n    #. `login`_\n    #. `new`_\n    #. `show`_\n    #. `test`_\n    #. `import`_\n    #. `upload (up)`_\n\n#. `License`_\n\nIntro\n-----\n\n``jutge_cli`` is a python3 console application that aims to automate common\ntasks when working with `jutge.org`_ problems. Those tasks\ninclude:\n\n* Creating new files named after problem title given the problem code\n* Displaying statement and public test cases of a given problem\n* Compiling and testing a program against public test cases\n* Uploading program solutions to `jutge.org`_\n* Checking `jutge.org`_ results for last submissions or for\n  a specific problem.\n* Adding ant testing against custom test cases to a problem\n* Batch uploading problems from a given problem set\n* Batch creating new files of a given problem set\n* Extract and rename problem solutions from a `jutge.org`_ zip file export\n  to a specific folder.\n\n\nInstallation\n------------\n\n``jutge_cli`` is included in `pypi <https://pypi.org/project/jutge_cli/>`_\nand as such, it can be installed through ``pip3``.\n\n\nGlobal installation (root)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo install python module run:\n\n.. code:: sh\n\n    sudo pip3 install jutge_cli\n\nThis should install all dependencies and create an executable named\n``jutge`` in ``/usr/bin/jutge``.\n\n\nArchlinux PKGBUILD\n~~~~~~~~~~~~~~~~~~\n\nThere is also a ``PKGBUILD`` included in the repository for arch linux users.\n\n\nInstallation using virtualenv (no root)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can install this program inside of a python3\n`virtualenv <https://virtualenv.pypa.io/>`_:\n\n.. code:: sh\n\n    virtualenv -p /usr/bin/python3 jutge_cli_venv && cd jutge_cli_venv\n    source bin/activate\n    pip3 install jutge_cli\n\nOnce the above commands complete successfully, the ``jutge`` will be installed\ninside the ``bin`` folder of the virtualenv. It is recommended to link it to\nthe user ``bin`` folder and add it to your ``$PATH``.\n\n.. code:: sh\n\n    mkdir ~/bin\n    ln -s bin/jutge ~/bin/jutge\n\nRemember to add bin to your path by adding the following line to ``.bashrc``\nor equivalent:\n\n.. code:: sh\n\n    export PATH=$PATH:~/bin\n\n\nUsage\n-----\n\nTo use ``jutge_cli`` run the command ``jutge`` followed by the\nsubcommand you want to execute:\n\n.. code:: sh\n\n    jutge [SUBCOMMAND] [SUBCOMMAND_OPTIONS]\n\nFor the program to work you will have to either specify the code of the\nproblem you want to test (``-c`` flag) or rename the program file so\nthat it begins with the code. The code must match the following regular\nexpression: ``[PGQX]\\d{5}_(ca|en|es)`` (note that the code includes the\nlanguage although it is not mandatory).\n\n\nConfiguration\n-------------\n\nYou can configure default parameters through the YAML configuration file:\n``~/.jutge_cli.yaml``.\n\nBasic options\n~~~~~~~~~~~~~\n\nThe following example lists all the basic options and\ntheir default values:\n\n.. code:: yaml\n\n    database : ~/Documents/jutge/DB\n    regex : '[PGQX]\\d{5}_(ca|en|es)'\n    diff-prog : diff\n    diff-flags : -y\n    inp-suffix : inp\n    cor-suffix : cor\n    folder : ~/Documents/jutge/Done\n\nThose options can also be specified using the flags with the same name.\n\nAlthough you can change the regex it is **not** recommended to do so since bad\nregex may break correct functionality.\n\n\nProblem sets\n~~~~~~~~~~~~\n\nYou can also add problem sets with the ``problem_sets`` group. These will\nmake the commands ``new``, ``archive`` and ``update`` classify problems into\nfolders:\n\n.. code:: yaml\n\n    problem_sets:\n        P1: [P19724, P34279, P37297, P37469, P42042, P51126, P51352, P61634, P66529, P67171, P70955, P82374, P89265, P92351, P98960, P99182, X54725, X59678, X64734, X89070]\n        P2: [P27341, P28754, P29448, P32046, P34451, P35547, P37500, P55622, P59539, P59875, P60816, P64976, P65171, P74398, P79784, P85370, P97156, X30229, X32391, X80452]\n        P3: [P13623, P19991, P29973, P32533, P61061, P79817, P80660, P87323, P96767, X01646, X08783, X26853, X29759, X59091, X84338, X98097]\n\nThe above configuration file will save problems ``P19724, P34279...`` into\nfolder ``P1``, problems ``P27341, P28754...`` into ``P2`` and so on.\n\n\nLogin credentials\n~~~~~~~~~~~~~~~~~\n\nYou can also provide login credentials in the configuration file inside\nthe group ``login``:\n\n.. code:: yaml\n\n    login:\n        email: myemail@mydomain.com\n        password: mypassword\n\nYou can omit either email, password or both and the login command will\nprompt the user for input when issued.\n\n\nAuthenticate to jutge\n---------------------\n\nTo upload problem solutions or to access private problems (the ones which code\nstarts with ``X``) you must be logged in into `jutge.org`_.\nThe preferred method to login is through the ``jutge login`` command although\nthere are 2 more methods involving cookies.\n\n\nlogin command\n~~~~~~~~~~~~~\n\nIssuing the command ``jutge login`` will prompt the user for their email and\npassword and save the session cookie for next use. If email or\npassword are already provided in `Login credentials`_ it will not prompt the\nuser to input them. For more details on the command see `login`_\n\n\ncookie command\n~~~~~~~~~~~~~~\n\nThe command ``jutge cookie`` accepts a cookie as a parameter and will\nstore it for next use. For more details on the command see `cookie`_\n\n\ncookie flag\n~~~~~~~~~~~\n\nYou can also explicitly provide a cookie to each subcommand call through the\n``--cookie`` flag:\n\n.. code:: sh\n\n    jutge --cookie MY_COOKIE download -c X00000\n\n\nGlobal flags\n------------\n\nMost of the flags depend on the subcommands, but there are some global\nflags that effect all subcommands. Those are:\n\n-  ``--regex MY_REGEX`` regular expression used to extract codes from filenames\n-  ``--cookie MY_COOKIE`` Cookie used to connect to `jutge.org`_\n-  ``--database FOLDER`` Change database location\n-  ``--no-download`` If this flag is provided, ``jutge_cli`` will not attempt\n   to connect to the internet\n\n\nCommands\n--------\n\n#. `add-test (add)`_\n#. `archive`_\n#. `check`_\n#. `cookie`_\n#. `download (down)`_\n#. `login`_\n#. `new`_\n#. `show`_\n#. `test`_\n#. `import`_\n#. `upload (up)`_\n\nadd-test (add)\n~~~~~~~~~~~~~~\n\nThis command adds a custom test case into the database. A test case consists\nof two files, the input that will be feed to the program and the expected\noutput or solution. Those files can be provided through the flags ``-i``\n(input) and ``-o`` (expected output) or if omitted the user will be prompted to\ninput them manually through stdin.\n\nThe following example will add the contents of files ``inp`` and ``cor`` to\nthe database as test cases for the problem ``P00001_ca``\n\n.. code:: sh\n\n    # Add the contents of inp and cor to the database for problem P00001_ca:\n    jutge add-test -i inp -o cor P00001_ca_prog.cpp\n\n    # Prompt the user to enter the input and expected output and add them to\n    # the database for problem P00001_ca:\n    jutge add-test P00001_ca_prog.cpp\n\n\narchive\n~~~~~~~\n\nMove problem file to the archive folder. This folder can be\nchanged through the ``-f`` flag. To overwrite files already in the folder\nuse the ``--overwrite`` flag.\n\nThe default behaviour is to move the file to the folder, if you want to copy\nit instead use the ``--copy`` flag.\n\nThe following example will move the file ``P00001_ca_prog.cpp`` to the\nfolder ``Accepted`` and overwrite if already in the folder.\n\n.. code:: sh\n\n    jutge archive --folder Accepted/ P00001_ca_prog.cpp --overwrite\n\n\ncheck\n~~~~~\n\nChecks submissions to `jutge.org`_\nand displays them in the terminal. The program will return 0 if the last\nsubmission's verdict is ``AC`` or ``100/100``  and 1 otherwise.\n\nThis subcommand accepts 3 flags:\n\n* ``--last`` show only the last submission\n* ``--reverse`` order the output so that the last submission is on top\n* ``--code`` check if a given problem code is accepted, rejected or not done\n  yet\n\n\ncookie\n~~~~~~\n\nAdd cookie provided as first argument to a temporary directory so it is used\nfor next commands. If the first argument is ``delete`` the current cookie\nwill be deleted and if the argument is ``print`` or ``show`` it will\noutput the current saved cookie.\n\nThe command will check that the provided cookie is valid before saving the\nvalue, to skip this check use the flag ``--skip-check``.\n\n\ndownload (down)\n~~~~~~~~~~~~~~~\n\nThis command will attempt to download the html page and zip file corresponding\nto the given problem from `jutge.org`_ and add them to the\ndatabase. Either a code flag (``-c``) or a program file (``-p``) must be\nprovided.\n\nNote that other commands that depend on the database files will\nautomatically try to download them if they don't exist and therefore\nthis command is only useful when populating the database in advance.\n\nThe following example will populate the local database for problem\n``P00001_en``:\n\n.. code:: sh\n\n    jutge download P00001_en\n\n\nlogin\n~~~~~\n\nPrompt the user to input their credentials and login to `jutge.org`_. If\ncredentials are already specified in the configuration file (`Login\ncredentials`_) it will not prompt for them.\n\nThe flags ``--email`` and ``--password`` can be used to specify the credentials\nwithout prompting and to override the ones specified in the configuration file.\n\n\nnew\n~~~\n\nThis command must be followed by a code. It will fetch the problem title\nfrom the code and create a new file whose name is the code followed by\nthe title. The ``--extension`` or ``-e`` flag can be used to specify the\nextension of the file (defaults to ``cpp``).\n\nIf flag ``--problem-set`` is provided, all programs in the specified problem\nset will be created inside a folder named after the problem set.\n\nThe following example will populate create a new python file named\n``P87523_ca_-_Hola-ad\u00e9u.py``\n\n.. code:: sh\n\n    jutge new P87523_ca --extension py\n\n\nshow\n~~~~\n\nThis command provides 3 sub commands to print information about the problem.\nThose are:\n\n-  ``title`` print problem title\n-  ``stat`` print statement\n-  ``cases`` print test cases in database\n\nBy default ``stat`` will parse the problem statement through ``pypandoc`` to\noptimize the output for terminal if you prefer raw HTML or ``pypandoc`` takes\nto much time to parse the output you can use the flag ``--html``.\n\nThe following example will print all cases in the database for the problem\n``P87523_ca`` (if any).\n\n.. code:: sh\n\n    jutge show cases P87523_ca\n\n\ntest\n~~~~\n\nThis is the most useful command in the tool set. It allows to test your\ncode against all the test cases found in the database and output side by\nside differences using ``diff``.\n\nThe command takes a file that can be either an executable or source file or\nscript of a supported language executable file as parameter and tests it\nagainst the test cases in the database folder. Note that if the program if a\nsource file that needs to be compiled, ``jutge_cli`` will compile it to\na file named after the original name with extension ``.x``.\n\nYou can specify an other program to act as ``diff`` (such as ``colordiff``) and\nits flags (separated by commas) through ``--diff-prog`` and ``--diff-flags``.\n\nThe following example will test the executable ``P87523_ca_prog.x`` against\nthe test cases for problem P87523\\_ca. The expected output and the output of\nthe program will be shown side by side using ``colordiff``.\n\n.. code:: sh\n\n    jutge test P87523_ca_prog.x --diff-prog colordiff\n\n\nimport\n~~~~~~\n\nThis command extracts all accepted submissions from a `jutge.org`_ zip file,\nrenames them according to their title and adds them to the archive folder\nthat can be specified through the ``-f`` flag or in the main configuration\nfile. Note that the zip file must be the one downloaded from your\n`jutge.org`_ profile.\n\n.. code:: sh\n\n    jutge import problems.zip\n\n\nupload (up)\n~~~~~~~~~~~\n\nThis command uploads a file to `jutge.org`_ to be\nevaluated. Note that you must have a valid cookie previously saved by ``jutge\ncookie PHPSSID`` or you can provide it through the ``--cookie`` flag. As of\nnow, the program cannot report if the upload was successful so you will have to\ncheck your submissions page manually. The compiler to use will be determined by\nthe filename extension but you can specify another one through the\n``--compiler`` flag.\n\n.. code:: sh\n\n    jutge upload P00001_ca_prog.cpp --compiler 'G++'\n\nIf the flag ``--problem-set`` the command will upload all problems from the\nspecified set found in the current working directory or in the set folder in\nthe current working directory. (Keep in mind that `jutge.org`_ limits the\nnumber of submissions to 20 per hour so it is discouraged to use this flag\nwith large problem sets)\n\nBy default upload will test all problems against public test cases in the\ndatabase (not including custom ones). You can skip those checks with the flag\n``--skip-test``\n\nIf you want to check the submitted problem verdict directly after upload, use\nthe flag ``--check`` which will wait for the judge verdict and output it.\n\nLicense\n-------\n\nThis software is licensed under the `GPL v3 license\n<http://www.gnu.org/copyleft/gpl.html>`_.\n\n.. _jutge.org: https://jutge.org\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Leixb/jutge_cli", "keywords": "jutge jutge.org jutge_cli", "license": "GPL3", "maintainer": "", "maintainer_email": "", "name": "jutge_cli", "package_url": "https://pypi.org/project/jutge_cli/", "platform": "", "project_url": "https://pypi.org/project/jutge_cli/", "project_urls": {"Homepage": "http://github.com/Leixb/jutge_cli"}, "release_url": "https://pypi.org/project/jutge_cli/2.2.3/", "requires_dist": null, "requires_python": "", "summary": "CLI to automate tests for jutge.org problems", "version": "2.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ol>\n<li><p><a href=\"#intro\" rel=\"nofollow\">Intro</a></p>\n</li>\n<li><p><a href=\"#installation\" rel=\"nofollow\">Installation</a></p>\n<blockquote>\n<ol>\n<li><a href=\"#global-installation-root\" rel=\"nofollow\">Global installation (root)</a></li>\n<li><a href=\"#archlinux-pkgbuild\" rel=\"nofollow\">Archlinux PKGBUILD</a></li>\n<li><a href=\"#installation-using-virtualenv-no-root\" rel=\"nofollow\">Installation using virtualenv (no root)</a></li>\n</ol>\n</blockquote>\n</li>\n<li><p><a href=\"#usage\" rel=\"nofollow\">Usage</a></p>\n</li>\n<li><p><a href=\"#configuration\" rel=\"nofollow\">Configuration</a></p>\n<blockquote>\n<ol>\n<li><a href=\"#basic-options\" rel=\"nofollow\">Basic options</a></li>\n<li><a href=\"#problem-sets\" rel=\"nofollow\">Problem sets</a></li>\n<li><a href=\"#login-credentials\" rel=\"nofollow\">Login credentials</a></li>\n</ol>\n</blockquote>\n</li>\n<li><p><a href=\"#authenticate-to-jutge\" rel=\"nofollow\">Authenticate to jutge</a></p>\n<blockquote>\n<ol>\n<li><a href=\"#login-command\" rel=\"nofollow\">login command</a></li>\n<li><a href=\"#cookie-command\" rel=\"nofollow\">cookie command</a></li>\n<li><a href=\"#cookie-flag\" rel=\"nofollow\">cookie flag</a></li>\n</ol>\n</blockquote>\n</li>\n<li><p><a href=\"#commands\" rel=\"nofollow\">Commands</a></p>\n<blockquote>\n<ol>\n<li><a href=\"#add-test-add\" rel=\"nofollow\">add-test (add)</a></li>\n<li><a href=\"#archive\" rel=\"nofollow\">archive</a></li>\n<li><a href=\"#check\" rel=\"nofollow\">check</a></li>\n<li><a href=\"#cookie\" rel=\"nofollow\">cookie</a></li>\n<li><a href=\"#download-down\" rel=\"nofollow\">download (down)</a></li>\n<li><a href=\"#login\" rel=\"nofollow\">login</a></li>\n<li><a href=\"#new\" rel=\"nofollow\">new</a></li>\n<li><a href=\"#show\" rel=\"nofollow\">show</a></li>\n<li><a href=\"#test\" rel=\"nofollow\">test</a></li>\n<li><a href=\"#import\" rel=\"nofollow\">import</a></li>\n<li><a href=\"#upload-up\" rel=\"nofollow\">upload (up)</a></li>\n</ol>\n</blockquote>\n</li>\n<li><p><a href=\"#license\" rel=\"nofollow\">License</a></p>\n</li>\n</ol>\n<div id=\"intro\">\n<h2>Intro</h2>\n<p><tt>jutge_cli</tt> is a python3 console application that aims to automate common\ntasks when working with <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a> problems. Those tasks\ninclude:</p>\n<ul>\n<li>Creating new files named after problem title given the problem code</li>\n<li>Displaying statement and public test cases of a given problem</li>\n<li>Compiling and testing a program against public test cases</li>\n<li>Uploading program solutions to <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a></li>\n<li>Checking <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a> results for last submissions or for\na specific problem.</li>\n<li>Adding ant testing against custom test cases to a problem</li>\n<li>Batch uploading problems from a given problem set</li>\n<li>Batch creating new files of a given problem set</li>\n<li>Extract and rename problem solutions from a <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a> zip file export\nto a specific folder.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>jutge_cli</tt> is included in <a href=\"https://pypi.org/project/jutge_cli/\" rel=\"nofollow\">pypi</a>\nand as such, it can be installed through <tt>pip3</tt>.</p>\n<div id=\"global-installation-root\">\n<h3>Global installation (root)</h3>\n<p>To install python module run:</p>\n<pre>sudo pip3 install jutge_cli\n</pre>\n<p>This should install all dependencies and create an executable named\n<tt>jutge</tt> in <tt>/usr/bin/jutge</tt>.</p>\n</div>\n<div id=\"archlinux-pkgbuild\">\n<h3>Archlinux PKGBUILD</h3>\n<p>There is also a <tt>PKGBUILD</tt> included in the repository for arch linux users.</p>\n</div>\n<div id=\"installation-using-virtualenv-no-root\">\n<h3>Installation using virtualenv (no root)</h3>\n<p>You can install this program inside of a python3\n<a href=\"https://virtualenv.pypa.io/\" rel=\"nofollow\">virtualenv</a>:</p>\n<pre>virtualenv -p /usr/bin/python3 jutge_cli_venv <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> jutge_cli_venv\n<span class=\"nb\">source</span> bin/activate\npip3 install jutge_cli\n</pre>\n<p>Once the above commands complete successfully, the <tt>jutge</tt> will be installed\ninside the <tt>bin</tt> folder of the virtualenv. It is recommended to link it to\nthe user <tt>bin</tt> folder and add it to your <tt>$PATH</tt>.</p>\n<pre>mkdir ~/bin\nln -s bin/jutge ~/bin/jutge\n</pre>\n<p>Remember to add bin to your path by adding the following line to <tt>.bashrc</tt>\nor equivalent:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">PATH</span><span class=\"o\">=</span><span class=\"nv\">$PATH</span>:~/bin\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use <tt>jutge_cli</tt> run the command <tt>jutge</tt> followed by the\nsubcommand you want to execute:</p>\n<pre>jutge <span class=\"o\">[</span>SUBCOMMAND<span class=\"o\">]</span> <span class=\"o\">[</span>SUBCOMMAND_OPTIONS<span class=\"o\">]</span>\n</pre>\n<p>For the program to work you will have to either specify the code of the\nproblem you want to test (<tt><span class=\"pre\">-c</span></tt> flag) or rename the program file so\nthat it begins with the code. The code must match the following regular\nexpression: <tt><span class=\"pre\">[PGQX]\\d{5}_(ca|en|es)</span></tt> (note that the code includes the\nlanguage although it is not mandatory).</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>You can configure default parameters through the YAML configuration file:\n<tt><span class=\"pre\">~/.jutge_cli.yaml</span></tt>.</p>\n<div id=\"basic-options\">\n<h3>Basic options</h3>\n<p>The following example lists all the basic options and\ntheir default values:</p>\n<pre><span class=\"nt\">database </span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">~/Documents/jutge/DB</span>\n<span class=\"nt\">regex </span><span class=\"p\">:</span> <span class=\"s\">'[PGQX]\\d{5}_(ca|en|es)'</span>\n<span class=\"nt\">diff-prog </span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">diff</span>\n<span class=\"nt\">diff-flags </span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">-y</span>\n<span class=\"nt\">inp-suffix </span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">inp</span>\n<span class=\"nt\">cor-suffix </span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">cor</span>\n<span class=\"nt\">folder </span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">~/Documents/jutge/Done</span>\n</pre>\n<p>Those options can also be specified using the flags with the same name.</p>\n<p>Although you can change the regex it is <strong>not</strong> recommended to do so since bad\nregex may break correct functionality.</p>\n</div>\n<div id=\"problem-sets\">\n<h3>Problem sets</h3>\n<p>You can also add problem sets with the <tt>problem_sets</tt> group. These will\nmake the commands <tt>new</tt>, <tt>archive</tt> and <tt>update</tt> classify problems into\nfolders:</p>\n<pre><span class=\"nt\">problem_sets</span><span class=\"p\">:</span>\n    <span class=\"nt\">P1</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">P19724</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P34279</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P37297</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P37469</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P42042</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P51126</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P51352</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P61634</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P66529</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P67171</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P70955</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P82374</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P89265</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P92351</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P98960</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P99182</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X54725</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X59678</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X64734</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X89070</span><span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">P2</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">P27341</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P28754</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P29448</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P32046</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P34451</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P35547</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P37500</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P55622</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P59539</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P59875</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P60816</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P64976</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P65171</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P74398</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P79784</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P85370</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P97156</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X30229</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X32391</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X80452</span><span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">P3</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">P13623</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P19991</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P29973</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P32533</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P61061</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P79817</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P80660</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P87323</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">P96767</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X01646</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X08783</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X26853</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X29759</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X59091</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X84338</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">X98097</span><span class=\"p-Indicator\">]</span>\n</pre>\n<p>The above configuration file will save problems <tt>P19724, <span class=\"pre\">P34279...</span></tt> into\nfolder <tt>P1</tt>, problems <tt>P27341, <span class=\"pre\">P28754...</span></tt> into <tt>P2</tt> and so on.</p>\n</div>\n<div id=\"login-credentials\">\n<h3>Login credentials</h3>\n<p>You can also provide login credentials in the configuration file inside\nthe group <tt>login</tt>:</p>\n<pre><span class=\"nt\">login</span><span class=\"p\">:</span>\n    <span class=\"nt\">email</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">myemail@mydomain.com</span>\n    <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">mypassword</span>\n</pre>\n<p>You can omit either email, password or both and the login command will\nprompt the user for input when issued.</p>\n</div>\n</div>\n<div id=\"authenticate-to-jutge\">\n<h2>Authenticate to jutge</h2>\n<p>To upload problem solutions or to access private problems (the ones which code\nstarts with <tt>X</tt>) you must be logged in into <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a>.\nThe preferred method to login is through the <tt>jutge login</tt> command although\nthere are 2 more methods involving cookies.</p>\n<div id=\"login-command\">\n<h3>login command</h3>\n<p>Issuing the command <tt>jutge login</tt> will prompt the user for their email and\npassword and save the session cookie for next use. If email or\npassword are already provided in <a href=\"#login-credentials\" rel=\"nofollow\">Login credentials</a> it will not prompt the\nuser to input them. For more details on the command see <a href=\"#login\" rel=\"nofollow\">login</a></p>\n</div>\n<div id=\"cookie-command\">\n<h3>cookie command</h3>\n<p>The command <tt>jutge cookie</tt> accepts a cookie as a parameter and will\nstore it for next use. For more details on the command see <a href=\"#cookie\" rel=\"nofollow\">cookie</a></p>\n</div>\n<div id=\"cookie-flag\">\n<h3>cookie flag</h3>\n<p>You can also explicitly provide a cookie to each subcommand call through the\n<tt><span class=\"pre\">--cookie</span></tt> flag:</p>\n<pre>jutge --cookie MY_COOKIE download -c X00000\n</pre>\n</div>\n</div>\n<div id=\"global-flags\">\n<h2>Global flags</h2>\n<p>Most of the flags depend on the subcommands, but there are some global\nflags that effect all subcommands. Those are:</p>\n<ul>\n<li><tt><span class=\"pre\">--regex</span> MY_REGEX</tt> regular expression used to extract codes from filenames</li>\n<li><tt><span class=\"pre\">--cookie</span> MY_COOKIE</tt> Cookie used to connect to <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a></li>\n<li><tt><span class=\"pre\">--database</span> FOLDER</tt> Change database location</li>\n<li><tt><span class=\"pre\">--no-download</span></tt> If this flag is provided, <tt>jutge_cli</tt> will not attempt\nto connect to the internet</li>\n</ul>\n</div>\n<div id=\"commands\">\n<h2>Commands</h2>\n<ol>\n<li><a href=\"#add-test-add\" rel=\"nofollow\">add-test (add)</a></li>\n<li><a href=\"#archive\" rel=\"nofollow\">archive</a></li>\n<li><a href=\"#check\" rel=\"nofollow\">check</a></li>\n<li><a href=\"#cookie\" rel=\"nofollow\">cookie</a></li>\n<li><a href=\"#download-down\" rel=\"nofollow\">download (down)</a></li>\n<li><a href=\"#login\" rel=\"nofollow\">login</a></li>\n<li><a href=\"#new\" rel=\"nofollow\">new</a></li>\n<li><a href=\"#show\" rel=\"nofollow\">show</a></li>\n<li><a href=\"#test\" rel=\"nofollow\">test</a></li>\n<li><a href=\"#import\" rel=\"nofollow\">import</a></li>\n<li><a href=\"#upload-up\" rel=\"nofollow\">upload (up)</a></li>\n</ol>\n<div id=\"add-test-add\">\n<h3>add-test (add)</h3>\n<p>This command adds a custom test case into the database. A test case consists\nof two files, the input that will be feed to the program and the expected\noutput or solution. Those files can be provided through the flags <tt><span class=\"pre\">-i</span></tt>\n(input) and <tt><span class=\"pre\">-o</span></tt> (expected output) or if omitted the user will be prompted to\ninput them manually through stdin.</p>\n<p>The following example will add the contents of files <tt>inp</tt> and <tt>cor</tt> to\nthe database as test cases for the problem <tt>P00001_ca</tt></p>\n<pre><span class=\"c1\"># Add the contents of inp and cor to the database for problem P00001_ca:\n</span>jutge add-test -i inp -o cor P00001_ca_prog.cpp\n\n<span class=\"c1\"># Prompt the user to enter the input and expected output and add them to\n# the database for problem P00001_ca:\n</span>jutge add-test P00001_ca_prog.cpp\n</pre>\n</div>\n<div id=\"archive\">\n<h3>archive</h3>\n<p>Move problem file to the archive folder. This folder can be\nchanged through the <tt><span class=\"pre\">-f</span></tt> flag. To overwrite files already in the folder\nuse the <tt><span class=\"pre\">--overwrite</span></tt> flag.</p>\n<p>The default behaviour is to move the file to the folder, if you want to copy\nit instead use the <tt><span class=\"pre\">--copy</span></tt> flag.</p>\n<p>The following example will move the file <tt>P00001_ca_prog.cpp</tt> to the\nfolder <tt>Accepted</tt> and overwrite if already in the folder.</p>\n<pre>jutge archive --folder Accepted/ P00001_ca_prog.cpp --overwrite\n</pre>\n</div>\n<div id=\"check\">\n<h3>check</h3>\n<p>Checks submissions to <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a>\nand displays them in the terminal. The program will return 0 if the last\nsubmission\u2019s verdict is <tt>AC</tt> or <tt>100/100</tt>  and 1 otherwise.</p>\n<p>This subcommand accepts 3 flags:</p>\n<ul>\n<li><tt><span class=\"pre\">--last</span></tt> show only the last submission</li>\n<li><tt><span class=\"pre\">--reverse</span></tt> order the output so that the last submission is on top</li>\n<li><tt><span class=\"pre\">--code</span></tt> check if a given problem code is accepted, rejected or not done\nyet</li>\n</ul>\n</div>\n<div id=\"cookie\">\n<h3>cookie</h3>\n<p>Add cookie provided as first argument to a temporary directory so it is used\nfor next commands. If the first argument is <tt>delete</tt> the current cookie\nwill be deleted and if the argument is <tt>print</tt> or <tt>show</tt> it will\noutput the current saved cookie.</p>\n<p>The command will check that the provided cookie is valid before saving the\nvalue, to skip this check use the flag <tt><span class=\"pre\">--skip-check</span></tt>.</p>\n</div>\n<div id=\"download-down\">\n<h3>download (down)</h3>\n<p>This command will attempt to download the html page and zip file corresponding\nto the given problem from <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a> and add them to the\ndatabase. Either a code flag (<tt><span class=\"pre\">-c</span></tt>) or a program file (<tt><span class=\"pre\">-p</span></tt>) must be\nprovided.</p>\n<p>Note that other commands that depend on the database files will\nautomatically try to download them if they don\u2019t exist and therefore\nthis command is only useful when populating the database in advance.</p>\n<p>The following example will populate the local database for problem\n<tt>P00001_en</tt>:</p>\n<pre>jutge download P00001_en\n</pre>\n</div>\n<div id=\"login\">\n<h3>login</h3>\n<p>Prompt the user to input their credentials and login to <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a>. If\ncredentials are already specified in the configuration file (<a href=\"#login-credentials\" rel=\"nofollow\">Login\ncredentials</a>) it will not prompt for them.</p>\n<p>The flags <tt><span class=\"pre\">--email</span></tt> and <tt><span class=\"pre\">--password</span></tt> can be used to specify the credentials\nwithout prompting and to override the ones specified in the configuration file.</p>\n</div>\n<div id=\"new\">\n<h3>new</h3>\n<p>This command must be followed by a code. It will fetch the problem title\nfrom the code and create a new file whose name is the code followed by\nthe title. The <tt><span class=\"pre\">--extension</span></tt> or <tt><span class=\"pre\">-e</span></tt> flag can be used to specify the\nextension of the file (defaults to <tt>cpp</tt>).</p>\n<p>If flag <tt><span class=\"pre\">--problem-set</span></tt> is provided, all programs in the specified problem\nset will be created inside a folder named after the problem set.</p>\n<p>The following example will populate create a new python file named\n<tt><span class=\"pre\">P87523_ca_-_Hola-ad\u00e9u.py</span></tt></p>\n<pre>jutge new P87523_ca --extension py\n</pre>\n</div>\n<div id=\"show\">\n<h3>show</h3>\n<p>This command provides 3 sub commands to print information about the problem.\nThose are:</p>\n<ul>\n<li><tt>title</tt> print problem title</li>\n<li><tt>stat</tt> print statement</li>\n<li><tt>cases</tt> print test cases in database</li>\n</ul>\n<p>By default <tt>stat</tt> will parse the problem statement through <tt>pypandoc</tt> to\noptimize the output for terminal if you prefer raw HTML or <tt>pypandoc</tt> takes\nto much time to parse the output you can use the flag <tt><span class=\"pre\">--html</span></tt>.</p>\n<p>The following example will print all cases in the database for the problem\n<tt>P87523_ca</tt> (if any).</p>\n<pre>jutge show cases P87523_ca\n</pre>\n</div>\n<div id=\"test\">\n<h3>test</h3>\n<p>This is the most useful command in the tool set. It allows to test your\ncode against all the test cases found in the database and output side by\nside differences using <tt>diff</tt>.</p>\n<p>The command takes a file that can be either an executable or source file or\nscript of a supported language executable file as parameter and tests it\nagainst the test cases in the database folder. Note that if the program if a\nsource file that needs to be compiled, <tt>jutge_cli</tt> will compile it to\na file named after the original name with extension <tt>.x</tt>.</p>\n<p>You can specify an other program to act as <tt>diff</tt> (such as <tt>colordiff</tt>) and\nits flags (separated by commas) through <tt><span class=\"pre\">--diff-prog</span></tt> and <tt><span class=\"pre\">--diff-flags</span></tt>.</p>\n<p>The following example will test the executable <tt>P87523_ca_prog.x</tt> against\nthe test cases for problem P87523_ca. The expected output and the output of\nthe program will be shown side by side using <tt>colordiff</tt>.</p>\n<pre>jutge <span class=\"nb\">test</span> P87523_ca_prog.x --diff-prog colordiff\n</pre>\n</div>\n<div id=\"import\">\n<h3>import</h3>\n<p>This command extracts all accepted submissions from a <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a> zip file,\nrenames them according to their title and adds them to the archive folder\nthat can be specified through the <tt><span class=\"pre\">-f</span></tt> flag or in the main configuration\nfile. Note that the zip file must be the one downloaded from your\n<a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a> profile.</p>\n<pre>jutge import problems.zip\n</pre>\n</div>\n<div id=\"upload-up\">\n<h3>upload (up)</h3>\n<p>This command uploads a file to <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a> to be\nevaluated. Note that you must have a valid cookie previously saved by <tt>jutge\ncookie PHPSSID</tt> or you can provide it through the <tt><span class=\"pre\">--cookie</span></tt> flag. As of\nnow, the program cannot report if the upload was successful so you will have to\ncheck your submissions page manually. The compiler to use will be determined by\nthe filename extension but you can specify another one through the\n<tt><span class=\"pre\">--compiler</span></tt> flag.</p>\n<pre>jutge upload P00001_ca_prog.cpp --compiler <span class=\"s1\">'G++'</span>\n</pre>\n<p>If the flag <tt><span class=\"pre\">--problem-set</span></tt> the command will upload all problems from the\nspecified set found in the current working directory or in the set folder in\nthe current working directory. (Keep in mind that <a href=\"https://jutge.org\" rel=\"nofollow\">jutge.org</a> limits the\nnumber of submissions to 20 per hour so it is discouraged to use this flag\nwith large problem sets)</p>\n<p>By default upload will test all problems against public test cases in the\ndatabase (not including custom ones). You can skip those checks with the flag\n<tt><span class=\"pre\">--skip-test</span></tt></p>\n<p>If you want to check the submitted problem verdict directly after upload, use\nthe flag <tt><span class=\"pre\">--check</span></tt> which will wait for the judge verdict and output it.</p>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This software is licensed under the <a href=\"http://www.gnu.org/copyleft/gpl.html\" rel=\"nofollow\">GPL v3 license</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3897691, "releases": {"2.1.10": [{"comment_text": "", "digests": {"md5": "2782a82fa12c53481520cc9d270944c3", "sha256": "120fbf51d2b6cc834a1649e5b6f5da18dab1063cd2ebcb6176cf85054e09e382"}, "downloads": -1, "filename": "jutge_cli-2.1.10.tar.gz", "has_sig": false, "md5_digest": "2782a82fa12c53481520cc9d270944c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42085, "upload_time": "2017-12-23T17:26:26", "upload_time_iso_8601": "2017-12-23T17:26:26.903382Z", "url": "https://files.pythonhosted.org/packages/2c/75/80373e798eaa87d76ceae4009687ab95cb15d1de3c3581ddce130d207cb2/jutge_cli-2.1.10.tar.gz", "yanked": false}], "2.1.11": [{"comment_text": "", "digests": {"md5": "8093fcc680226b3517cc68fb3deec95f", "sha256": "ba9b25424d5fe196e3354aa1384a24ab0249e489595a3ee1adfd84e39df2eeec"}, "downloads": -1, "filename": "jutge_cli-2.1.11.tar.gz", "has_sig": false, "md5_digest": "8093fcc680226b3517cc68fb3deec95f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42165, "upload_time": "2017-12-29T11:22:40", "upload_time_iso_8601": "2017-12-29T11:22:40.304376Z", "url": "https://files.pythonhosted.org/packages/e0/09/811a3c0371c679dbab91a9211f06d4b2ca05a45804ce70c4e39c4011dfd5/jutge_cli-2.1.11.tar.gz", "yanked": false}], "2.1.7": [{"comment_text": "", "digests": {"md5": "990d41557bd3716429ee56f9fa20f5ec", "sha256": "83ab5c421e2c436d394a6b5a69d5f7bf0cdbafdb1ca5f002286823674283f75d"}, "downloads": -1, "filename": "jutge_cli-2.1.7.tar.gz", "has_sig": false, "md5_digest": "990d41557bd3716429ee56f9fa20f5ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41812, "upload_time": "2017-10-30T19:23:41", "upload_time_iso_8601": "2017-10-30T19:23:41.056308Z", "url": "https://files.pythonhosted.org/packages/7c/15/8a2eca67543f5e55be19c5eca4733877a9e089a410fd04f475b21d411c54/jutge_cli-2.1.7.tar.gz", "yanked": false}], "2.1.8": [{"comment_text": "", "digests": {"md5": "b9fa34f92a9f09d191c51695b1d8bf52", "sha256": "29d1e109b476e0c9e515f9b1e5c84e7d5602addce75b13886a44b62af447c044"}, "downloads": -1, "filename": "jutge_cli-2.1.8.tar.gz", "has_sig": false, "md5_digest": "b9fa34f92a9f09d191c51695b1d8bf52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41861, "upload_time": "2017-11-19T22:46:25", "upload_time_iso_8601": "2017-11-19T22:46:25.908221Z", "url": "https://files.pythonhosted.org/packages/a0/b9/2c6eda889e5c986a6a005b34462ffe5b98fe912f870a51547d9c7d452a3a/jutge_cli-2.1.8.tar.gz", "yanked": false}], "2.1.9": [{"comment_text": "", "digests": {"md5": "26b82dd72c75d929566a943bbb283eeb", "sha256": "c1e9539088387fd77edcddd198e34037d632eac5b1cb489b587c40de04d824b4"}, "downloads": -1, "filename": "jutge_cli-2.1.9.tar.gz", "has_sig": false, "md5_digest": "26b82dd72c75d929566a943bbb283eeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41952, "upload_time": "2017-12-22T11:26:02", "upload_time_iso_8601": "2017-12-22T11:26:02.181421Z", "url": "https://files.pythonhosted.org/packages/9c/7e/206d5ed8e2a709ce109ae3243e60987feba58cfbc90e791072ca337edb5e/jutge_cli-2.1.9.tar.gz", "yanked": false}], "2.1.9.post1": [{"comment_text": "", "digests": {"md5": "3eae2534822525ee578006df3985f20f", "sha256": "dfb47eb531f0cda1d9c821312a9fe42beca0998fac6a8717a55e447d5708b394"}, "downloads": -1, "filename": "jutge_cli-2.1.9.post1.tar.gz", "has_sig": false, "md5_digest": "3eae2534822525ee578006df3985f20f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41967, "upload_time": "2017-12-22T11:34:51", "upload_time_iso_8601": "2017-12-22T11:34:51.783433Z", "url": "https://files.pythonhosted.org/packages/a1/4b/b7914eb6ee5c55700ffc3f384995c4e0cdc4d143bb818dee8e253f8ffc7c/jutge_cli-2.1.9.post1.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "aee48b02800b608028240d3f771b2cea", "sha256": "b8a28c0ff244350e8fde51735734845790fec0cbf39e3a013964fc32d5a8f50c"}, "downloads": -1, "filename": "jutge_cli-2.2.0.tar.gz", "has_sig": false, "md5_digest": "aee48b02800b608028240d3f771b2cea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42164, "upload_time": "2017-12-31T15:03:25", "upload_time_iso_8601": "2017-12-31T15:03:25.556493Z", "url": "https://files.pythonhosted.org/packages/14/be/74f12efb68d6e981c37c7098458202e84e6403525acf48652eb870f5a125/jutge_cli-2.2.0.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "131fffb25e0abc88132c2773044839af", "sha256": "d07d3d25173605a4e96aad85d61c663a305d8c4453a11e98a5eae37d9246e152"}, "downloads": -1, "filename": "jutge_cli-2.2.3.tar.gz", "has_sig": false, "md5_digest": "131fffb25e0abc88132c2773044839af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42464, "upload_time": "2018-05-25T06:14:59", "upload_time_iso_8601": "2018-05-25T06:14:59.835226Z", "url": "https://files.pythonhosted.org/packages/88/fd/af6849f3f6359bef26e5d60b3b1d27bbf9e917cce8a7cab4045e9184cbf4/jutge_cli-2.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "131fffb25e0abc88132c2773044839af", "sha256": "d07d3d25173605a4e96aad85d61c663a305d8c4453a11e98a5eae37d9246e152"}, "downloads": -1, "filename": "jutge_cli-2.2.3.tar.gz", "has_sig": false, "md5_digest": "131fffb25e0abc88132c2773044839af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42464, "upload_time": "2018-05-25T06:14:59", "upload_time_iso_8601": "2018-05-25T06:14:59.835226Z", "url": "https://files.pythonhosted.org/packages/88/fd/af6849f3f6359bef26e5d60b3b1d27bbf9e917cce8a7cab4045e9184cbf4/jutge_cli-2.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:01 2020"}