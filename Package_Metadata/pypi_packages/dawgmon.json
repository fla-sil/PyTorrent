{"info": {"author": "Anvil Ventures", "author_email": "info@anvilventures.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Operating System :: POSIX :: Linux", "Operating System :: POSIX :: Other", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3 :: Only", "Topic :: System :: Monitoring", "Topic :: System :: Systems Administration"], "description": "dawgmon - Dawg the Hallway Monitor\n\nSUMMARY\n\nThe name of this tool is based upon an episode (season 10, episode 10) of South\nPark in which Cartman is Dawg the Hallway Monitor patrolling the hallways of\nhis school.  It's a tool which helps one to monitor changes which have taken\nplace on a Linux-based system since the previous time the tool was ran. \n\nOne way to use it is to use something like the included sample cronjob to run\ndawgmon on a regular interval and email the results to the system\nadministrator. This can help with identifying machines upon which nefarious\nthings are happening and monitor who's installing what and where. Please note\nthat any serious kernel backdoor will easily be able to hide itself from this\ntool and as such it's just one added tool in one's toolkit but it should not\nrelied upon for full security monitoring of Linux machines. It's just one extra\noption in one's toolbox.\n\nThe other way it's useful is by generating a baseline before installing a piece\nof software. Then after installing this piece of software one will run the tool\nagain and then it's easy to see which changes were made on the system. An\nexample after establishing a baseline and then installing virtualbox on a\nmachine might yield something like this:\n\n# ./dawgmon -gfA\n1 change detected (0 warnings)            \n+ systemd property NNames changed from 259 to 261\n# apt install virtualbox-5.1\n[...]\n# ./dawgmon -gfA\n33 changes detected (0 warnings)          \n+ size of file /etc/group changed from 937 to 954\n+ file /etc/group got modified on 2017-09-14 19:29:51.804811 +0200\n+ size of file /etc/group- changed from 934 to 937\n+ file /etc/group- got modified on 2017-09-14 19:29:14.000000 +0200\n+ file /etc/gshadow got modified on 2017-09-14 19:29:51.812811 +0200\n+ size of file /etc/gshadow- changed from 777 to 794\n+ size of file /etc/mailcap changed from 40777 to 41063\n+ file /etc/mailcap got modified on 2017-09-14 19:29:51.632812 +0200\n+ file /etc/systemd/system/multi-user.target.wants/vboxautostart-service.service got created (owner=root, group=root, perm=lrwxrwxrwx, size=49)\n+ file /etc/systemd/system/multi-user.target.wants/vboxballoonctrl-service.service got created (owner=root, group=root, perm=lrwxrwxrwx, size=51)\n+ file /etc/systemd/system/multi-user.target.wants/vboxdrv.service got created (owner=root, group=root, perm=lrwxrwxrwx, size=35)\n+ file /etc/systemd/system/multi-user.target.wants/vboxweb-service.service got created (owner=root, group=root, perm=lrwxrwxrwx, size=43)\n+ file /etc/udev/rules.d/60-vboxdrv.rules got created (owner=root, group=root, perm=-rw-r--r--, size=747)\n+ group vboxusers added\n+ package virtualbox-5.1 is to be installed\n+ suid binary /usr/lib/virtualbox/VBoxHeadless got created (owner=root, group=root, perm=-r-s--x--x, size=158304)\n+ suid binary /usr/lib/virtualbox/VBoxNetAdpCtl got created (owner=root, group=root, perm=-r-s--x--x, size=23144)\n+ suid binary /usr/lib/virtualbox/VBoxNetDHCP got created (owner=root, group=root, perm=-r-s--x--x, size=158304)\n+ suid binary /usr/lib/virtualbox/VBoxNetNAT got created (owner=root, group=root, perm=-r-s--x--x, size=158304)\n+ suid binary /usr/lib/virtualbox/VBoxSDL got created (owner=root, group=root, perm=-r-s--x--x, size=158296)\n+ suid binary /usr/lib/virtualbox/VBoxVolInfo got created (owner=root, group=root, perm=-r-s--x--x, size=10472)\n+ suid binary /usr/lib/virtualbox/VirtualBox got created (owner=root, group=root, perm=-r-s--x--x, size=158304)\n+ i-node for listening UNIX socket /run/systemd/private changed from 3428734 to 3452848\n+ systemd property NInstalledJobs changed from 8392199 to 3238035463\n+ systemd property NNames changed from 261 to 263\n+ systemd unit file vboxautostart-service.service added\n+ systemd unit file vboxballoonctrl-service.service added\n+ systemd unit file vboxdrv.service added\n+ systemd unit file vboxweb-service.service added\n+ systemd unit 'vboxautostart-service.service' added\n+ systemd unit 'vboxballoonctrl-service.service' added\n+ systemd unit 'vboxdrv.service' added\n+ systemd unit 'vboxweb-service.service' added\n\nThe above helps with now doing a thorough security review of virtualbox. The\ninstalled suid binaries are obvious points of entry and the run services are\ninteresting.\n\nAnother example run which correctly detects TCP ports opening and closing:\n\n# ./dawgmon -gfA\n0 changes detected (0 warnings)           \n# nc -l -p 4455 &\n[1] 12489\n# ./dawgmon -gfA\n1 change detected (0 warnings)            \n+ port 4455 tcp opened\n# fg\nnc -l -p 4455\n^C\n# ./dawgmon -gfA\n1 change detected (0 warnings)            \n+ port 4455 tcp closed\n# \n\nThe tool is not meant for complete accuracy. There are very serious\nrecommendations normally to not rely on the output of GNU core-utils such as ls\nfor tool input. In other words; one should rarely build tools to parse and rely\non this type of output as it can change all the time. Realistically the output\nof these tools is relatively stable as a lot of people and automatic tools\nalready rely on their outputs for all kinds of purposes.\n\nHowever the tradeoff for dawgmon is the following; we would need to implement a\nlot of logic to do file system monitoring ourselves, build complex binaries\nthat include libraries to do the parsing and monitoring of block devices, the\nnetwork interfaces and what not more. This will also make the tool way more\ncomplex and less maintainable. On projects right now one can add a new command\nincluding change detection in very little time as the main dawgmon tool already\ntakes care of caching, executing the command and then supplying the previous\nand current output when running a comparision to a command implementation. This\nmeans that on time-constrained projects one can very quickly add a new command\nand run analysises including those new commands.\n\nA command can be added by simply inheriting from the Command class. This class\nis defined in commands/__init__.py. That file contains also the master list of\ncommands (and the order in which they're executed when doing a full analysis).\nThen the properties like 'name', 'shell', 'command' and 'desc' will have to be\nset and two methods 'parse()' and 'compare()' will have to be implemented.\nEnough commands are included to get a good idea on how to implement and add new\nones. \n\n\nUSAGE\n\nFor best results run the tool as root. For help type -h/--help and for version\ninformation type -v/--version.\n\nA main action will always have to be specified. These actions are:\n-A: analyze the system\n-C: compare cache entries\n-E: list available commands\n-L: list cache entries\n\n# runs an analysis\ndawgmon -A\n\n# runs an analysis but only with a few commands\ndawgmon -A -e list_suids -e list_tcpudp_ports\n\n# shows the list of available commands\ndawgmon -E\n\n# shows available cache entries for comparison\ndawgmon -L\n\n# compare old cache entry 3 with new cache entry 5\ndawgmon -C 3 5\n\nFurther options to help with the analysis are:\n\n-d: show debug output\n-e: execute a specific command (can be used multiple times)\n-f: force a run without warning about running as root\n-g: colorize the output\n-l: location of the database cache to use\n-m: maximum amount of cache entries to allow in cache (if cache has more\nentries than this amount it will truncate the database) \n-t: do not output timestamp information per detected anomaly.\n\nFor more usage information run the tool with -h.\n\n\nLIMITATIONS\n\nThe tool parses output of commandline tools and relies on GNU core-utils\nspecific options for some of it.  There's no specific reason why this tool and\nthe command implementations cannot be quickly ported to other operating systems\nsuch as the BSD's but right now no Operating System detection is taking place\nnor is there a classification of commands based on Operating System support\nbeing done. That would have to be implemented first.\n\nRegarding the finding of pipes, UNIX sockets, files in /boot, /etc and more one\nshould note that the usage of -xdev passed to 'find' means that not all\nfilesystems mounted under the start directory will be traversed. This means\nthat for example /boot will be properly scanned but /boot/efi might not be.\nSome smarter approach will have to be used here in the future.\n\nThe timestamps when doing a current analysis might be a bit confusing. By\ndefault a timestamp for a warning, normal or debug anomaly message will be the\ntimestamp of its generation time (as can be seen in commands/__init__.py). The\nanomalies are generated after a full commandline scan has been done. So the\noutput upon which this detection works was generated earlier and subsequently\nthe timestamps for individual anomalies show a time after the time of the scan.\nWhen comparing cache entries the timestamp of the scan is being used to output\nthe time at which the detection happend as that makes logically simply more\nsense.\n\n\nABOUT\n\nAll rights reserved. Copyright (C) 2017-2019 by Anvil Ventures Inc.\nFor licensing information see LICENSE.\nFor more information contact Vincent Berg <gvb@anvilventures.com>\n\nTo find updated source code or to contribute patches go to the following URL:\nhttps://github.com/anvilventures/dawgmon/\n\n\n", "description_content_type": "text/plain", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/anvilventures/dawgmon", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dawgmon", "package_url": "https://pypi.org/project/dawgmon/", "platform": "", "project_url": "https://pypi.org/project/dawgmon/", "project_urls": {"Homepage": "https://github.com/anvilventures/dawgmon"}, "release_url": "https://pypi.org/project/dawgmon/1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Monitor operating system changes and analyze introduced attack surface when installing software", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            dawgmon - Dawg the Hallway Monitor<br><br>SUMMARY<br><br>The name of this tool is based upon an episode (season 10, episode 10) of South<br>Park in which Cartman is Dawg the Hallway Monitor patrolling the hallways of<br>his school.  It's a tool which helps one to monitor changes which have taken<br>place on a Linux-based system since the previous time the tool was ran. <br><br>One way to use it is to use something like the included sample cronjob to run<br>dawgmon on a regular interval and email the results to the system<br>administrator. This can help with identifying machines upon which nefarious<br>things are happening and monitor who's installing what and where. Please note<br>that any serious kernel backdoor will easily be able to hide itself from this<br>tool and as such it's just one added tool in one's toolkit but it should not<br>relied upon for full security monitoring of Linux machines. It's just one extra<br>option in one's toolbox.<br><br>The other way it's useful is by generating a baseline before installing a piece<br>of software. Then after installing this piece of software one will run the tool<br>again and then it's easy to see which changes were made on the system. An<br>example after establishing a baseline and then installing virtualbox on a<br>machine might yield something like this:<br><br># ./dawgmon -gfA<br>1 change detected (0 warnings)            <br>+ systemd property NNames changed from 259 to 261<br># apt install virtualbox-5.1<br>[...]<br># ./dawgmon -gfA<br>33 changes detected (0 warnings)          <br>+ size of file /etc/group changed from 937 to 954<br>+ file /etc/group got modified on 2017-09-14 19:29:51.804811 +0200<br>+ size of file /etc/group- changed from 934 to 937<br>+ file /etc/group- got modified on 2017-09-14 19:29:14.000000 +0200<br>+ file /etc/gshadow got modified on 2017-09-14 19:29:51.812811 +0200<br>+ size of file /etc/gshadow- changed from 777 to 794<br>+ size of file /etc/mailcap changed from 40777 to 41063<br>+ file /etc/mailcap got modified on 2017-09-14 19:29:51.632812 +0200<br>+ file /etc/systemd/system/multi-user.target.wants/vboxautostart-service.service got created (owner=root, group=root, perm=lrwxrwxrwx, size=49)<br>+ file /etc/systemd/system/multi-user.target.wants/vboxballoonctrl-service.service got created (owner=root, group=root, perm=lrwxrwxrwx, size=51)<br>+ file /etc/systemd/system/multi-user.target.wants/vboxdrv.service got created (owner=root, group=root, perm=lrwxrwxrwx, size=35)<br>+ file /etc/systemd/system/multi-user.target.wants/vboxweb-service.service got created (owner=root, group=root, perm=lrwxrwxrwx, size=43)<br>+ file /etc/udev/rules.d/60-vboxdrv.rules got created (owner=root, group=root, perm=-rw-r--r--, size=747)<br>+ group vboxusers added<br>+ package virtualbox-5.1 is to be installed<br>+ suid binary /usr/lib/virtualbox/VBoxHeadless got created (owner=root, group=root, perm=-r-s--x--x, size=158304)<br>+ suid binary /usr/lib/virtualbox/VBoxNetAdpCtl got created (owner=root, group=root, perm=-r-s--x--x, size=23144)<br>+ suid binary /usr/lib/virtualbox/VBoxNetDHCP got created (owner=root, group=root, perm=-r-s--x--x, size=158304)<br>+ suid binary /usr/lib/virtualbox/VBoxNetNAT got created (owner=root, group=root, perm=-r-s--x--x, size=158304)<br>+ suid binary /usr/lib/virtualbox/VBoxSDL got created (owner=root, group=root, perm=-r-s--x--x, size=158296)<br>+ suid binary /usr/lib/virtualbox/VBoxVolInfo got created (owner=root, group=root, perm=-r-s--x--x, size=10472)<br>+ suid binary /usr/lib/virtualbox/VirtualBox got created (owner=root, group=root, perm=-r-s--x--x, size=158304)<br>+ i-node for listening UNIX socket /run/systemd/private changed from 3428734 to 3452848<br>+ systemd property NInstalledJobs changed from 8392199 to 3238035463<br>+ systemd property NNames changed from 261 to 263<br>+ systemd unit file vboxautostart-service.service added<br>+ systemd unit file vboxballoonctrl-service.service added<br>+ systemd unit file vboxdrv.service added<br>+ systemd unit file vboxweb-service.service added<br>+ systemd unit 'vboxautostart-service.service' added<br>+ systemd unit 'vboxballoonctrl-service.service' added<br>+ systemd unit 'vboxdrv.service' added<br>+ systemd unit 'vboxweb-service.service' added<br><br>The above helps with now doing a thorough security review of virtualbox. The<br>installed suid binaries are obvious points of entry and the run services are<br>interesting.<br><br>Another example run which correctly detects TCP ports opening and closing:<br><br># ./dawgmon -gfA<br>0 changes detected (0 warnings)           <br># nc -l -p 4455 &amp;<br>[1] 12489<br># ./dawgmon -gfA<br>1 change detected (0 warnings)            <br>+ port 4455 tcp opened<br># fg<br>nc -l -p 4455<br>^C<br># ./dawgmon -gfA<br>1 change detected (0 warnings)            <br>+ port 4455 tcp closed<br># <br><br>The tool is not meant for complete accuracy. There are very serious<br>recommendations normally to not rely on the output of GNU core-utils such as ls<br>for tool input. In other words; one should rarely build tools to parse and rely<br>on this type of output as it can change all the time. Realistically the output<br>of these tools is relatively stable as a lot of people and automatic tools<br>already rely on their outputs for all kinds of purposes.<br><br>However the tradeoff for dawgmon is the following; we would need to implement a<br>lot of logic to do file system monitoring ourselves, build complex binaries<br>that include libraries to do the parsing and monitoring of block devices, the<br>network interfaces and what not more. This will also make the tool way more<br>complex and less maintainable. On projects right now one can add a new command<br>including change detection in very little time as the main dawgmon tool already<br>takes care of caching, executing the command and then supplying the previous<br>and current output when running a comparision to a command implementation. This<br>means that on time-constrained projects one can very quickly add a new command<br>and run analysises including those new commands.<br><br>A command can be added by simply inheriting from the Command class. This class<br>is defined in commands/__init__.py. That file contains also the master list of<br>commands (and the order in which they're executed when doing a full analysis).<br>Then the properties like 'name', 'shell', 'command' and 'desc' will have to be<br>set and two methods 'parse()' and 'compare()' will have to be implemented.<br>Enough commands are included to get a good idea on how to implement and add new<br>ones. <br><br><br>USAGE<br><br>For best results run the tool as root. For help type -h/--help and for version<br>information type -v/--version.<br><br>A main action will always have to be specified. These actions are:<br>-A: analyze the system<br>-C: compare cache entries<br>-E: list available commands<br>-L: list cache entries<br><br># runs an analysis<br>dawgmon -A<br><br># runs an analysis but only with a few commands<br>dawgmon -A -e list_suids -e list_tcpudp_ports<br><br># shows the list of available commands<br>dawgmon -E<br><br># shows available cache entries for comparison<br>dawgmon -L<br><br># compare old cache entry 3 with new cache entry 5<br>dawgmon -C 3 5<br><br>Further options to help with the analysis are:<br><br>-d: show debug output<br>-e: execute a specific command (can be used multiple times)<br>-f: force a run without warning about running as root<br>-g: colorize the output<br>-l: location of the database cache to use<br>-m: maximum amount of cache entries to allow in cache (if cache has more<br>entries than this amount it will truncate the database) <br>-t: do not output timestamp information per detected anomaly.<br><br>For more usage information run the tool with -h.<br><br><br>LIMITATIONS<br><br>The tool parses output of commandline tools and relies on GNU core-utils<br>specific options for some of it.  There's no specific reason why this tool and<br>the command implementations cannot be quickly ported to other operating systems<br>such as the BSD's but right now no Operating System detection is taking place<br>nor is there a classification of commands based on Operating System support<br>being done. That would have to be implemented first.<br><br>Regarding the finding of pipes, UNIX sockets, files in /boot, /etc and more one<br>should note that the usage of -xdev passed to 'find' means that not all<br>filesystems mounted under the start directory will be traversed. This means<br>that for example /boot will be properly scanned but /boot/efi might not be.<br>Some smarter approach will have to be used here in the future.<br><br>The timestamps when doing a current analysis might be a bit confusing. By<br>default a timestamp for a warning, normal or debug anomaly message will be the<br>timestamp of its generation time (as can be seen in commands/__init__.py). The<br>anomalies are generated after a full commandline scan has been done. So the<br>output upon which this detection works was generated earlier and subsequently<br>the timestamps for individual anomalies show a time after the time of the scan.<br>When comparing cache entries the timestamp of the scan is being used to output<br>the time at which the detection happend as that makes logically simply more<br>sense.<br><br><br>ABOUT<br><br>All rights reserved. Copyright (C) 2017-2019 by Anvil Ventures Inc.<br>For licensing information see LICENSE.<br>For more information contact Vincent Berg &lt;gvb@anvilventures.com&gt;<br><br>To find updated source code or to contribute patches go to the following URL:<br>https://github.com/anvilventures/dawgmon/<br><br><br>\n          </div>"}, "last_serial": 6136951, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "6449e9385b3b2b1e87f8245da4c62dbb", "sha256": "7bb56f9a1f1f40575e92d14263bb4c2ca264774d93cf1ae378efdff4fcae17af"}, "downloads": -1, "filename": "dawgmon-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6449e9385b3b2b1e87f8245da4c62dbb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28637, "upload_time": "2019-11-14T14:45:51", "upload_time_iso_8601": "2019-11-14T14:45:51.205646Z", "url": "https://files.pythonhosted.org/packages/34/f8/f0040984bfa2416726216ccc90567ca53577aa610cd268a0ad1e42e49408/dawgmon-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92489fd52a9a4a9ae91ad925fefd266a", "sha256": "8cb5720e7b4a1b9fb37bd6c986b8e0c076ddd9550939e36823dcfccb0e9fc89d"}, "downloads": -1, "filename": "dawgmon-1.1.tar.gz", "has_sig": false, "md5_digest": "92489fd52a9a4a9ae91ad925fefd266a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23963, "upload_time": "2019-11-14T14:45:53", "upload_time_iso_8601": "2019-11-14T14:45:53.633450Z", "url": "https://files.pythonhosted.org/packages/33/c0/9a8cfd614eefa271e0c9cbfb3051912c960d7ebc46b1676ffc6efb7fad98/dawgmon-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6449e9385b3b2b1e87f8245da4c62dbb", "sha256": "7bb56f9a1f1f40575e92d14263bb4c2ca264774d93cf1ae378efdff4fcae17af"}, "downloads": -1, "filename": "dawgmon-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6449e9385b3b2b1e87f8245da4c62dbb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28637, "upload_time": "2019-11-14T14:45:51", "upload_time_iso_8601": "2019-11-14T14:45:51.205646Z", "url": "https://files.pythonhosted.org/packages/34/f8/f0040984bfa2416726216ccc90567ca53577aa610cd268a0ad1e42e49408/dawgmon-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92489fd52a9a4a9ae91ad925fefd266a", "sha256": "8cb5720e7b4a1b9fb37bd6c986b8e0c076ddd9550939e36823dcfccb0e9fc89d"}, "downloads": -1, "filename": "dawgmon-1.1.tar.gz", "has_sig": false, "md5_digest": "92489fd52a9a4a9ae91ad925fefd266a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23963, "upload_time": "2019-11-14T14:45:53", "upload_time_iso_8601": "2019-11-14T14:45:53.633450Z", "url": "https://files.pythonhosted.org/packages/33/c0/9a8cfd614eefa271e0c9cbfb3051912c960d7ebc46b1676ffc6efb7fad98/dawgmon-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:01 2020"}