{"info": {"author": "Lindon Roberts", "author_email": "lindon.roberts@anu.edu.au", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Framework :: IPython", "Framework :: Jupyter", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Mathematics"], "description": "===========================================\ntrustregion: Trust-region subproblem solver\n===========================================\n\n.. image::  https://travis-ci.org/lindonroberts/trust-region.svg?branch=master\n   :target: https://travis-ci.org/lindonroberts/trust-region\n   :alt: Build Status\n\n.. image::  https://img.shields.io/badge/License-GPL%20v3-blue.svg\n   :target: https://www.gnu.org/licenses/gpl-3.0\n   :alt: GNU GPL v3 License\n\nThis package provides Python routines for solving the trust-region subproblem from nonlinear, nonconvex optimization. For more details on trust-region methods, see the book: A. R. Conn, N. I. M. Gould and Ph. L. Toint (2000), Trust-Region Methods, MPS-SIAM Series on Optimization.\n\nThe trust-region subproblem we solve is\n\n.. code-block::\n\n   min_{s in R^n}  g^T s + 0.5 s^T H s, subject to ||s||_2 <= delta (and sl <= s <= su)\n\n**Quick install**\n\n .. code-block:: bash\n\n    $ sudo apt-get install gfortran\n    $ pip install --user numpy\n    $ pip install --user trustregion\n\nFor more details, see below. Note that NumPy must be installed first, as it is used to compile the Fortran-linked modules.\n\n**Interface** \n\nThe Python package :code:`trustregion` provides one routine, :code:`solve`, with interface:\n\n .. code-block:: python\n\n    import trustregion\n    s               = trustregion.solve(g, H, delta, sl=None, su=None, verbose_output=False)\n    s, gnew, crvmin = trustregion.solve(g, H, delta, sl=None, su=None, verbose_output=True)\n\nwhere the inputs are\n\n* :code:`g`, the gradient of the objective (as a 1D NumPy array)\n* :code:`H`, the symmetric Hessian matrix of the objective (as a 2D square NumPy array) - this can be :code:`None` if the model is linear\n* :code:`delta`, the trust-region radius (non-negative float)\n* :code:`sl`, the lower bounds on the step (as a 1D NumPy array) - this can be :code:`None` if not present, but :code:`sl` and :code:`su` must either be both :code:`None` or both set\n* :code:`su`, the upper bounds on the step (as a 1D NumPy array) - this can be :code:`None` if not present, but :code:`sl` and :code:`su` must either be both :code:`None` or both set\n* :code:`verbose_output`, a flag indicating which outputs to return.\n\nThe outputs are:\n\n* :code:`s`, an approximate minimizer of the subproblem (as a 1D NumPy array)\n* :code:`gnew`, the gradient of the objective at the solution :code:`s` (i.e. :code:`gnew = g + H.dot(s)`)\n* :code:`crvmin`, a float giving information about the curvature of the problem. If :code:`s` is on the trust-region boundary (given by :code:`delta`), then :code:`crvmin=0`. If :code:`s` is constrained in all directions by the box constraints, then :code:`crvmin=-1`. Otherwise, :code:`crvmin>0` is the smallest curvature seen in the Hessian.\n\n**Example Usage** \n\nExamples for the use of :code:`trustregion.solve` can be found in the `examples <https://github.com/lindonroberts/trust-region/tree/master/examples>`_ directory on Github.\n\n**Algorithms**\n\n:code:`trustregion` implements three different methods for solving the subproblem, based on the problem class (in Fortran 90, wrapped to Python):\n\n* :code:`trslin.f90` solves the linear objective case (where :code:`H=None` or :code:`H=0`), using Algorithm B.1 from: L. Roberts (2019), `Derivative-Free Algorithms for Nonlinear Optimisation Problems <https://ora.ox.ac.uk/objects/uuid:ec76e895-6eee-491a-88ed-b4ed10fa6003>`_, PhD Thesis, University of Oxford.\n* :code:`trsapp.f90` solves the quadratic case without box constraints. It is a minor modification of the routine of the same name in :code:`NEWUOA` [M. J. D. Powell (2004), `The NEWUOA software for unconstrained optimization without derivatives <http://www.damtp.cam.ac.uk/user/na/NA_papers/NA2004_08.pdf>`_, technical report DAMTP 2004/NA05, University of Cambridge].\n* :code:`trsbox.f90` solves the quadratic case with box constraints. It is a minor modification of the routine of the same name in :code:`BOBYQA` [M. J. D. Powell (2009), `The BOBYQA algorithm for bound constrained optimization without derivatives <http://www.damtp.cam.ac.uk/user/na/NA_papers/NA2009_06.pdf>`_, technical report DAMTP 2009/NA06, University of Cambridge].\n\nIn the linear case, an active-set method is used to solve the resulting convex problem. In the quadratic cases, a modification of the Steihaug-Toint/conjugate gradient method is used. For more details, see the relevant references above.\n\nRequirements\n------------\n:code:`trustregion` requires the following software to be installed:\n\n* Fortran compiler (e.g. gfortran)\n* Python 2.7 or Python 3 (http://www.python.org/)\n\nAdditionally, the following python packages should be installed (these will be installed automatically if using *pip*, see `Installation using pip`_):\n\n* NumPy 1.11 or higher (http://www.numpy.org/)\n\nInstallation using pip\n----------------------\nFor easy installation, use `pip <http://www.pip-installer.org/>`_ as root:\n\n .. code-block:: bash\n\n    $ [sudo] pip install numpy\n    $ [sudo] pip install trustregion\n\nNote that NumPy should be installed before :code:`trustregion`, as it is used to compile the Fortran modules.\n\nIf you do not have root privileges or you want to install :code:`trustregion` for your private use, you can use:\n\n .. code-block:: bash\n\n    $ pip install --user numpy\n    $ pip install --user trustregion\n\nwhich will install :code:`trustregion` in your home directory.\n\nNote that if an older install of :code:`trustregion` is present on your system you can use:\n\n .. code-block:: bash\n\n    $ [sudo] pip install --upgrade trustregion\n\nto upgrade :code:`trustregion` to the latest version.\n\nManual installation\n-------------------\nAlternatively, you can download the source code from `Github <https://github.com/lindonroberts/trust-region>`_ and unpack as follows:\n\n .. code-block:: bash\n\n    $ git clone https://github.com/lindonroberts/trust-region\n    $ cd trust-region\n\nTo upgrade :code:`trustregion` to the latest version, navigate to the top-level directory (i.e. the one containing :code:`setup.py`) and rerun the installation using :code:`pip`, as above:\n\n .. code-block:: bash\n\n    $ git pull\n    $ [sudo] pip install .  # with admin privileges\n\nTesting\n-------\nIf you installed :code:`trustregion` manually, you can test your installation by running:\n\n .. code-block:: bash\n\n    $ python setup.py test\n\nAlternatively, the documentation provides some simple examples of how to run :code:`trustregion`.\n\nUninstallation\n--------------\nIf :code:`trustregion` was installed using *pip* you can uninstall as follows:\n\n .. code-block:: bash\n\n    $ [sudo] pip uninstall trustregion\n\nIf :code:`trustregion` was installed manually you have to remove the installed files by hand (located in your python site-packages directory).\n\nBugs\n----\nPlease report any bugs using GitHub's issue tracker.\n\nLicense\n-------\nThis algorithm is released under the GNU GPL license.\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/lindonroberts/trust-region/archive/v1.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lindonroberts/trust-region", "keywords": "mathematics nonlinear nonconvex optimization trust-region", "license": "GNU GPL", "maintainer": "", "maintainer_email": "", "name": "trustregion", "package_url": "https://pypi.org/project/trustregion/", "platform": "", "project_url": "https://pypi.org/project/trustregion/", "project_urls": {"Download": "https://github.com/lindonroberts/trust-region/archive/v1.1.tar.gz", "Homepage": "https://github.com/lindonroberts/trust-region"}, "release_url": "https://pypi.org/project/trustregion/1.1/", "requires_dist": null, "requires_python": "", "summary": "Trust-region subproblem solvers for nonlinear/nonconvex optimization", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/lindonroberts/trust-region\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4894662fb43519d592912b48ef5a4082c621d3f6/68747470733a2f2f7472617669732d63692e6f72672f6c696e646f6e726f62657274732f74727573742d726567696f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://www.gnu.org/licenses/gpl-3.0\" rel=\"nofollow\"><img alt=\"GNU GPL v3 License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b8e7bd0619920735e058483fd428ecbeb267eb7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c25323076332d626c75652e737667\"></a>\n<p>This package provides Python routines for solving the trust-region subproblem from nonlinear, nonconvex optimization. For more details on trust-region methods, see the book: A. R. Conn, N. I. M. Gould and Ph. L. Toint (2000), Trust-Region Methods, MPS-SIAM Series on Optimization.</p>\n<p>The trust-region subproblem we solve is</p>\n<pre>min_{s in R^n}  g^T s + 0.5 s^T H s, subject to ||s||_2 &lt;= delta (and sl &lt;= s &lt;= su)\n</pre>\n<p><strong>Quick install</strong></p>\n<blockquote>\n<pre>$ sudo apt-get install gfortran\n$ pip install --user numpy\n$ pip install --user trustregion\n</pre>\n</blockquote>\n<p>For more details, see below. Note that NumPy must be installed first, as it is used to compile the Fortran-linked modules.</p>\n<p><strong>Interface</strong></p>\n<p>The Python package <code>trustregion</code> provides one routine, <code>solve</code>, with interface:</p>\n<blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">trustregion</span>\n<span class=\"n\">s</span>               <span class=\"o\">=</span> <span class=\"n\">trustregion</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"p\">,</span> <span class=\"n\">sl</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">su</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose_output</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">gnew</span><span class=\"p\">,</span> <span class=\"n\">crvmin</span> <span class=\"o\">=</span> <span class=\"n\">trustregion</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"p\">,</span> <span class=\"n\">sl</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">su</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose_output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>where the inputs are</p>\n<ul>\n<li><code>g</code>, the gradient of the objective (as a 1D NumPy array)</li>\n<li><code>H</code>, the symmetric Hessian matrix of the objective (as a 2D square NumPy array) - this can be <code>None</code> if the model is linear</li>\n<li><code>delta</code>, the trust-region radius (non-negative float)</li>\n<li><code>sl</code>, the lower bounds on the step (as a 1D NumPy array) - this can be <code>None</code> if not present, but <code>sl</code> and <code>su</code> must either be both <code>None</code> or both set</li>\n<li><code>su</code>, the upper bounds on the step (as a 1D NumPy array) - this can be <code>None</code> if not present, but <code>sl</code> and <code>su</code> must either be both <code>None</code> or both set</li>\n<li><code>verbose_output</code>, a flag indicating which outputs to return.</li>\n</ul>\n<p>The outputs are:</p>\n<ul>\n<li><code>s</code>, an approximate minimizer of the subproblem (as a 1D NumPy array)</li>\n<li><code>gnew</code>, the gradient of the objective at the solution <code>s</code> (i.e. <code>gnew = g + H.dot(s)</code>)</li>\n<li><code>crvmin</code>, a float giving information about the curvature of the problem. If <code>s</code> is on the trust-region boundary (given by <code>delta</code>), then <code>crvmin=0</code>. If <code>s</code> is constrained in all directions by the box constraints, then <code>crvmin=-1</code>. Otherwise, <code>crvmin&gt;0</code> is the smallest curvature seen in the Hessian.</li>\n</ul>\n<p><strong>Example Usage</strong></p>\n<p>Examples for the use of <code>trustregion.solve</code> can be found in the <a href=\"https://github.com/lindonroberts/trust-region/tree/master/examples\" rel=\"nofollow\">examples</a> directory on Github.</p>\n<p><strong>Algorithms</strong></p>\n<p><code>trustregion</code> implements three different methods for solving the subproblem, based on the problem class (in Fortran 90, wrapped to Python):</p>\n<ul>\n<li><code>trslin.f90</code> solves the linear objective case (where <code>H=None</code> or <code>H=0</code>), using Algorithm B.1 from: L. Roberts (2019), <a href=\"https://ora.ox.ac.uk/objects/uuid:ec76e895-6eee-491a-88ed-b4ed10fa6003\" rel=\"nofollow\">Derivative-Free Algorithms for Nonlinear Optimisation Problems</a>, PhD Thesis, University of Oxford.</li>\n<li><code>trsapp.f90</code> solves the quadratic case without box constraints. It is a minor modification of the routine of the same name in <code>NEWUOA</code> [M. J. D. Powell (2004), <a href=\"http://www.damtp.cam.ac.uk/user/na/NA_papers/NA2004_08.pdf\" rel=\"nofollow\">The NEWUOA software for unconstrained optimization without derivatives</a>, technical report DAMTP 2004/NA05, University of Cambridge].</li>\n<li><code>trsbox.f90</code> solves the quadratic case with box constraints. It is a minor modification of the routine of the same name in <code>BOBYQA</code> [M. J. D. Powell (2009), <a href=\"http://www.damtp.cam.ac.uk/user/na/NA_papers/NA2009_06.pdf\" rel=\"nofollow\">The BOBYQA algorithm for bound constrained optimization without derivatives</a>, technical report DAMTP 2009/NA06, University of Cambridge].</li>\n</ul>\n<p>In the linear case, an active-set method is used to solve the resulting convex problem. In the quadratic cases, a modification of the Steihaug-Toint/conjugate gradient method is used. For more details, see the relevant references above.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p><code>trustregion</code> requires the following software to be installed:</p>\n<ul>\n<li>Fortran compiler (e.g. gfortran)</li>\n<li>Python 2.7 or Python 3 (<a href=\"http://www.python.org/\" rel=\"nofollow\">http://www.python.org/</a>)</li>\n</ul>\n<p>Additionally, the following python packages should be installed (these will be installed automatically if using <em>pip</em>, see <a href=\"#installation-using-pip\" rel=\"nofollow\">Installation using pip</a>):</p>\n<ul>\n<li>NumPy 1.11 or higher (<a href=\"http://www.numpy.org/\" rel=\"nofollow\">http://www.numpy.org/</a>)</li>\n</ul>\n</div>\n<div id=\"installation-using-pip\">\n<h2>Installation using pip</h2>\n<p>For easy installation, use <a href=\"http://www.pip-installer.org/\" rel=\"nofollow\">pip</a> as root:</p>\n<blockquote>\n<pre>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install numpy\n$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install trustregion\n</pre>\n</blockquote>\n<p>Note that NumPy should be installed before <code>trustregion</code>, as it is used to compile the Fortran modules.</p>\n<p>If you do not have root privileges or you want to install <code>trustregion</code> for your private use, you can use:</p>\n<blockquote>\n<pre>$ pip install --user numpy\n$ pip install --user trustregion\n</pre>\n</blockquote>\n<p>which will install <code>trustregion</code> in your home directory.</p>\n<p>Note that if an older install of <code>trustregion</code> is present on your system you can use:</p>\n<blockquote>\n<pre>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install --upgrade trustregion\n</pre>\n</blockquote>\n<p>to upgrade <code>trustregion</code> to the latest version.</p>\n</div>\n<div id=\"manual-installation\">\n<h2>Manual installation</h2>\n<p>Alternatively, you can download the source code from <a href=\"https://github.com/lindonroberts/trust-region\" rel=\"nofollow\">Github</a> and unpack as follows:</p>\n<blockquote>\n<pre>$ git clone https://github.com/lindonroberts/trust-region\n$ <span class=\"nb\">cd</span> trust-region\n</pre>\n</blockquote>\n<p>To upgrade <code>trustregion</code> to the latest version, navigate to the top-level directory (i.e. the one containing <code>setup.py</code>) and rerun the installation using <code>pip</code>, as above:</p>\n<blockquote>\n<pre>$ git pull\n$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install .  <span class=\"c1\"># with admin privileges</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>If you installed <code>trustregion</code> manually, you can test your installation by running:</p>\n<blockquote>\n<pre>$ python setup.py <span class=\"nb\">test</span>\n</pre>\n</blockquote>\n<p>Alternatively, the documentation provides some simple examples of how to run <code>trustregion</code>.</p>\n</div>\n<div id=\"uninstallation\">\n<h2>Uninstallation</h2>\n<p>If <code>trustregion</code> was installed using <em>pip</em> you can uninstall as follows:</p>\n<blockquote>\n<pre>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip uninstall trustregion\n</pre>\n</blockquote>\n<p>If <code>trustregion</code> was installed manually you have to remove the installed files by hand (located in your python site-packages directory).</p>\n</div>\n<div id=\"bugs\">\n<h2>Bugs</h2>\n<p>Please report any bugs using GitHub\u2019s issue tracker.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This algorithm is released under the GNU GPL license.</p>\n</div>\n\n          </div>"}, "last_serial": 6244435, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "a2bd39e52cc1acb7f8de233e705fb8ab", "sha256": "5d567070a818a6a81aa002ecc10342848353e621bb9346b6950008d5c864bd78"}, "downloads": -1, "filename": "trustregion-1.0.tar.gz", "has_sig": false, "md5_digest": "a2bd39e52cc1acb7f8de233e705fb8ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15879, "upload_time": "2019-12-04T02:23:11", "upload_time_iso_8601": "2019-12-04T02:23:11.287467Z", "url": "https://files.pythonhosted.org/packages/42/bb/fefbce36d84988b66c2f80535c9ebbcc05ada90ca4234d9af4c2eb38ee45/trustregion-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "1b59fd0ac39765f1a74d6b5ee1913b0a", "sha256": "fc62ff6b0d4bd107c4fe5d26c997c5a7541d054a9ff7a4b5f74bbc08a6f74076"}, "downloads": -1, "filename": "trustregion-1.1.tar.gz", "has_sig": false, "md5_digest": "1b59fd0ac39765f1a74d6b5ee1913b0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16344, "upload_time": "2019-12-05T00:01:33", "upload_time_iso_8601": "2019-12-05T00:01:33.942654Z", "url": "https://files.pythonhosted.org/packages/a2/fd/41f85d1ef77ef32425cff34cfc2d5c73eb32bbbabaadcb28348b78254fa6/trustregion-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1b59fd0ac39765f1a74d6b5ee1913b0a", "sha256": "fc62ff6b0d4bd107c4fe5d26c997c5a7541d054a9ff7a4b5f74bbc08a6f74076"}, "downloads": -1, "filename": "trustregion-1.1.tar.gz", "has_sig": false, "md5_digest": "1b59fd0ac39765f1a74d6b5ee1913b0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16344, "upload_time": "2019-12-05T00:01:33", "upload_time_iso_8601": "2019-12-05T00:01:33.942654Z", "url": "https://files.pythonhosted.org/packages/a2/fd/41f85d1ef77ef32425cff34cfc2d5c73eb32bbbabaadcb28348b78254fa6/trustregion-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:46:32 2020"}