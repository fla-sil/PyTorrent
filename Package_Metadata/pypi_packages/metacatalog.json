{"info": {"author": "Mirko M\u00e4licke", "author_email": "mirko.maelicke@kit.edu", "bugtrack_url": null, "classifiers": [], "description": "# metacatalog\n\nManagement tool for the V-FOR-WaTer metadata database application.\n\n## Install\n\nThere are two different use-cases. Either you want to connect to an \nexisting instance of the database, or you need to install the database itself as well.\nIn both cases you need to install the python package.\n\nA) Install from PyPI\n\n```bash\npip install metacatalog\n```\n\nB) Install from Github\n\nRight now, the version on Github is newer, as the package is under heavy development. \nTherefore, until a stable version 1.0 is released, it is recommended to install the package via \nGithub.\n\n```bash\ngit clone https://github.com/vforwater/metacatalog.git\ncd metacatalog\npython setup.py install\n```\n\nIn either case, you can use the cli to save a default connection into a file in your home folder.\n**Be aware that any password saved along with the default connection is saved in clear-text!!**\n\n```bash\nmetacatalog connection --save postgresql://postgres:<masterpassword>@localhost:5432/metacatalog\n```\n\nIn may be not the best idea to save the postgres user password in cleartext. You can of course\ncreate a new user with limited rights and save this information. Alternatively, the connection can \nbe specified on each call of the cli. This way there is no password saving.\n\nNow, you are ready to use the cli. In case you need to install the database itself as well, follow the \ninstructions below:\n\n## Install the database\n\nFirst you need to install PostgreSQL and the PostGIS extension. There are preinstalled binaries \nfor windows. \nOn Linux the commands might look similar to:\n\n```bash\nsudo apt install postgresql postgis\n```\n\nPostGIS will in many cases be a rather outdated version. This is up to now not a big issue, as \nmetacatalog uses only a limited amount of spatial functions. Anything > v2.0 should be fine.\n\nNext, you need to install the database and create the extension. The database name should fit \nthe one specified in the connection string above (or change the string). You can open a SQL\nconsole to postgresql or use psql:\n\n```SQL\ncreate database metacatalog with encoding='UTF8';\ncreate extension postgis;\n```\n\nNow, you are ready to go and let the CLI create all neccessary tables.\n\n## Using metacatalog on Windows\n\nOn one of my Windows systems the setuptools scripts does not get recognized \nproperly and thus the CLI does not work properly if not called by full path.\nTherefore with version 0.1.4 the CLI is implemented the module main entrypoint.\n**Wherever the docs call the metacatalog script, you can use the module, like:**\n\nInstead of:\n```bash\nmetacatalog [options] <commad>\n```\nyou can use:\n```bash\npython -m metacatalog [options] <command>\n```\nThis should work cross-platform. Tested on Ubuntu 18, debian 9, Windows 7 and \nWindows 10. \n\n\n## Create Tables and load Defaults\n\nThe `create`command can be used to create all needed tables in the connected database.\nYou can specify the connection string using the `--connection` flag. If not supplied, the\nCLI will search for a saved 'default' connection string. In case there is none, the CLI will \nerror.\n\n```bash\nmetacatalog create --connection postgresql://postgres:<password>@localhost:5432/metacatalog\n```\n\nwill output:\n\n```\nCreating Tables.\nDone.\n```\n\nThe next step is to populate the tables with some useful default data. \nThis step is optional, but recommended. As of this writing, the `populate`\ncommand will load records into the `units`, `variables`, `licenses` and `keywords`.\n\n```bash\nmetacatalog populate\n```\n\nwill output:\n\n```bash\nPopulating datasource_types\nFinished datasource_types\nPopulating units\nFinished units\nPopulating variables\nFinished variables\nPopulating licenses\nFinished licenses\nPopulating person_roles\nFinished person_roles\nPopulating keywords\nFinished keywords\n```\n\nThe `--ignore` flag can be used to omit one or many tables from population.\nInstead of using `create` and `populate`, the `init` will run both in only \none step. The `init` command will accept the same flags.\nCreating a new instance in a test database can be initialized like:\n\n```bash\nmetacatalog init -C postgresql://postgres:<password>@localhost:5432/test --ignore units variables\n```\n\nThis will create the same structure and data in the `test` database. The `variables` and `units` table will, however, be empty.\n\n## Find data\n\nBefore storing your actual metadata into the database, it makes sense to \nlearn how auxiliary information can be found in the database. The CLI exposes an `find` command to find records on exact matches. In a future release, a `search` endpoint will be added as well. \n\nNote: As of this writing the `find` command can not operate on all tables.\n\nWe can find all stored licenses by `find`ing them without any filter:\n\n```bash\nmetacatalog find licenses\n```\n```\nOpen Data Commons Open Database License <ID=1>\nOpen Data Commons Attribution License v1.0 <ID=2>\nOpen Data Commons Public Domain Dedication and License <ID=3>\n```\n\nA filter can be added using the `--by` flag. This flag expects two values, the column to match and the actual value. We can use this to find all keywords that include `SOIL TEMPERATURE` on any level. The keywords are \nimplemented self-referential and hold the keyword name in an attribute called `value`.\n\n```bash\nmetacatalog find keywords --by value \"SOIL TEMPERATURE\"\n```\n```\nEARTH SCIENCE > AGRICULTURE > SOILS > SOIL TEMPERATURE\nEARTH SCIENCE > CLIMATE INDICATORS > LAND SURFACE/AGRICULTURE INDICATORS > SOIL TEMPERATURE\nEARTH SCIENCE > CRYOSPHERE > FROZEN GROUND > SOIL TEMPERATURE\nEARTH SCIENCE > LAND SURFACE > FROZEN GROUND > SOIL TEMPERATURE\nEARTH SCIENCE > LAND SURFACE > SOILS > SOIL TEMPERATURE\n```\n\nAny of these keywords might be suitable to append them to your metadata to make your soil temperature data set findable on that keyword.\n\n## Add data\n\nThe CLI and API can also be used to add new data into the database. This does not work for all entity types yet. If the API is used, \nthe objects need to be created as Python dictionaries. The CLI accepts three different data origin flags:\n\n```bash\nmetacatalog add -h\n```\n```\nusage: metacatalog add [-h] [--version] [--connection CONNECTION] [--verbose]\n                       [--csv CSV] [--txt TXT] [--json JSON]\n                       entity\n\npositional arguments:\n  entity                Name of the record entity to be added.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version, -v         Returns the module version\n  --connection CONNECTION, -C CONNECTION\n                        Connection string to the database instance.Follows the\n                        syntax: driver://user:password@host:port/database\n  --verbose, -V         Activate extended output.\n  --csv CSV             Data Origin Flag. Pass a CSV filename or content\n                        containing the data. Column header have to match the\n                        ADD API keywords.\n  --txt TXT             Data Origin Flag. Pass a text filename or content\n                        containing whitespace separated key=value pairs where\n                        key has to match the ADD API keywords. If used\n                        directly remember to quote accordingly.\n  --json JSON           Data Origin Flag. Pass a JSON filename or content\n                        containing the data. Must contain a list of objects\n                        matchin the ADD API keywords.\n```\n\nTo add a new unit, we can use the `show` cli action to read the available attributes of the `units` table:\n\n```bash\nmetacatalog show attributes --table units --names-only\n```\n```\nAttributes of units\n-------------------\nid\nname\nsymbol\nsi\n```\n\nThe `si` attribute is optional. Let's create a few new units, using a csv syntax. \nFor the `---csv` flag, we can specify a file name or give the data directly:\n\n```bash\nmetacatalog add unit --csv 'name,symbol\\nnfoo,F\\nbar,B'\n```\n```\nAdded 2 unit records.\nDone.\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "GPL v3", "maintainer": "", "maintainer_email": "", "name": "metacatalog", "package_url": "https://pypi.org/project/metacatalog/", "platform": "", "project_url": "https://pypi.org/project/metacatalog/", "project_urls": null, "release_url": "https://pypi.org/project/metacatalog/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "Metadata model management module.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>metacatalog</h1>\n<p>Management tool for the V-FOR-WaTer metadata database application.</p>\n<h2>Install</h2>\n<p>There are two different use-cases. Either you want to connect to an\nexisting instance of the database, or you need to install the database itself as well.\nIn both cases you need to install the python package.</p>\n<p>A) Install from PyPI</p>\n<pre>pip install metacatalog\n</pre>\n<p>B) Install from Github</p>\n<p>Right now, the version on Github is newer, as the package is under heavy development.\nTherefore, until a stable version 1.0 is released, it is recommended to install the package via\nGithub.</p>\n<pre>git clone https://github.com/vforwater/metacatalog.git\n<span class=\"nb\">cd</span> metacatalog\npython setup.py install\n</pre>\n<p>In either case, you can use the cli to save a default connection into a file in your home folder.\n<strong>Be aware that any password saved along with the default connection is saved in clear-text!!</strong></p>\n<pre>metacatalog connection --save postgresql://postgres:&lt;masterpassword&gt;@localhost:5432/metacatalog\n</pre>\n<p>In may be not the best idea to save the postgres user password in cleartext. You can of course\ncreate a new user with limited rights and save this information. Alternatively, the connection can\nbe specified on each call of the cli. This way there is no password saving.</p>\n<p>Now, you are ready to use the cli. In case you need to install the database itself as well, follow the\ninstructions below:</p>\n<h2>Install the database</h2>\n<p>First you need to install PostgreSQL and the PostGIS extension. There are preinstalled binaries\nfor windows.\nOn Linux the commands might look similar to:</p>\n<pre>sudo apt install postgresql postgis\n</pre>\n<p>PostGIS will in many cases be a rather outdated version. This is up to now not a big issue, as\nmetacatalog uses only a limited amount of spatial functions. Anything &gt; v2.0 should be fine.</p>\n<p>Next, you need to install the database and create the extension. The database name should fit\nthe one specified in the connection string above (or change the string). You can open a SQL\nconsole to postgresql or use psql:</p>\n<pre><span class=\"k\">create</span> <span class=\"k\">database</span> <span class=\"n\">metacatalog</span> <span class=\"k\">with</span> <span class=\"k\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'UTF8'</span><span class=\"p\">;</span>\n<span class=\"k\">create</span> <span class=\"n\">extension</span> <span class=\"n\">postgis</span><span class=\"p\">;</span>\n</pre>\n<p>Now, you are ready to go and let the CLI create all neccessary tables.</p>\n<h2>Using metacatalog on Windows</h2>\n<p>On one of my Windows systems the setuptools scripts does not get recognized\nproperly and thus the CLI does not work properly if not called by full path.\nTherefore with version 0.1.4 the CLI is implemented the module main entrypoint.\n<strong>Wherever the docs call the metacatalog script, you can use the module, like:</strong></p>\n<p>Instead of:</p>\n<pre>metacatalog <span class=\"o\">[</span>options<span class=\"o\">]</span> &lt;commad&gt;\n</pre>\n<p>you can use:</p>\n<pre>python -m metacatalog <span class=\"o\">[</span>options<span class=\"o\">]</span> &lt;command&gt;\n</pre>\n<p>This should work cross-platform. Tested on Ubuntu 18, debian 9, Windows 7 and\nWindows 10.</p>\n<h2>Create Tables and load Defaults</h2>\n<p>The <code>create</code>command can be used to create all needed tables in the connected database.\nYou can specify the connection string using the <code>--connection</code> flag. If not supplied, the\nCLI will search for a saved 'default' connection string. In case there is none, the CLI will\nerror.</p>\n<pre>metacatalog create --connection postgresql://postgres:&lt;password&gt;@localhost:5432/metacatalog\n</pre>\n<p>will output:</p>\n<pre><code>Creating Tables.\nDone.\n</code></pre>\n<p>The next step is to populate the tables with some useful default data.\nThis step is optional, but recommended. As of this writing, the <code>populate</code>\ncommand will load records into the <code>units</code>, <code>variables</code>, <code>licenses</code> and <code>keywords</code>.</p>\n<pre>metacatalog populate\n</pre>\n<p>will output:</p>\n<pre>Populating datasource_types\nFinished datasource_types\nPopulating units\nFinished units\nPopulating variables\nFinished variables\nPopulating licenses\nFinished licenses\nPopulating person_roles\nFinished person_roles\nPopulating keywords\nFinished keywords\n</pre>\n<p>The <code>--ignore</code> flag can be used to omit one or many tables from population.\nInstead of using <code>create</code> and <code>populate</code>, the <code>init</code> will run both in only\none step. The <code>init</code> command will accept the same flags.\nCreating a new instance in a test database can be initialized like:</p>\n<pre>metacatalog init -C postgresql://postgres:&lt;password&gt;@localhost:5432/test --ignore units variables\n</pre>\n<p>This will create the same structure and data in the <code>test</code> database. The <code>variables</code> and <code>units</code> table will, however, be empty.</p>\n<h2>Find data</h2>\n<p>Before storing your actual metadata into the database, it makes sense to\nlearn how auxiliary information can be found in the database. The CLI exposes an <code>find</code> command to find records on exact matches. In a future release, a <code>search</code> endpoint will be added as well.</p>\n<p>Note: As of this writing the <code>find</code> command can not operate on all tables.</p>\n<p>We can find all stored licenses by <code>find</code>ing them without any filter:</p>\n<pre>metacatalog find licenses\n</pre>\n<pre><code>Open Data Commons Open Database License &lt;ID=1&gt;\nOpen Data Commons Attribution License v1.0 &lt;ID=2&gt;\nOpen Data Commons Public Domain Dedication and License &lt;ID=3&gt;\n</code></pre>\n<p>A filter can be added using the <code>--by</code> flag. This flag expects two values, the column to match and the actual value. We can use this to find all keywords that include <code>SOIL TEMPERATURE</code> on any level. The keywords are\nimplemented self-referential and hold the keyword name in an attribute called <code>value</code>.</p>\n<pre>metacatalog find keywords --by value <span class=\"s2\">\"SOIL TEMPERATURE\"</span>\n</pre>\n<pre><code>EARTH SCIENCE &gt; AGRICULTURE &gt; SOILS &gt; SOIL TEMPERATURE\nEARTH SCIENCE &gt; CLIMATE INDICATORS &gt; LAND SURFACE/AGRICULTURE INDICATORS &gt; SOIL TEMPERATURE\nEARTH SCIENCE &gt; CRYOSPHERE &gt; FROZEN GROUND &gt; SOIL TEMPERATURE\nEARTH SCIENCE &gt; LAND SURFACE &gt; FROZEN GROUND &gt; SOIL TEMPERATURE\nEARTH SCIENCE &gt; LAND SURFACE &gt; SOILS &gt; SOIL TEMPERATURE\n</code></pre>\n<p>Any of these keywords might be suitable to append them to your metadata to make your soil temperature data set findable on that keyword.</p>\n<h2>Add data</h2>\n<p>The CLI and API can also be used to add new data into the database. This does not work for all entity types yet. If the API is used,\nthe objects need to be created as Python dictionaries. The CLI accepts three different data origin flags:</p>\n<pre>metacatalog add -h\n</pre>\n<pre><code>usage: metacatalog add [-h] [--version] [--connection CONNECTION] [--verbose]\n                       [--csv CSV] [--txt TXT] [--json JSON]\n                       entity\n\npositional arguments:\n  entity                Name of the record entity to be added.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version, -v         Returns the module version\n  --connection CONNECTION, -C CONNECTION\n                        Connection string to the database instance.Follows the\n                        syntax: driver://user:password@host:port/database\n  --verbose, -V         Activate extended output.\n  --csv CSV             Data Origin Flag. Pass a CSV filename or content\n                        containing the data. Column header have to match the\n                        ADD API keywords.\n  --txt TXT             Data Origin Flag. Pass a text filename or content\n                        containing whitespace separated key=value pairs where\n                        key has to match the ADD API keywords. If used\n                        directly remember to quote accordingly.\n  --json JSON           Data Origin Flag. Pass a JSON filename or content\n                        containing the data. Must contain a list of objects\n                        matchin the ADD API keywords.\n</code></pre>\n<p>To add a new unit, we can use the <code>show</code> cli action to read the available attributes of the <code>units</code> table:</p>\n<pre>metacatalog show attributes --table units --names-only\n</pre>\n<pre><code>Attributes of units\n-------------------\nid\nname\nsymbol\nsi\n</code></pre>\n<p>The <code>si</code> attribute is optional. Let's create a few new units, using a csv syntax.\nFor the <code>---csv</code> flag, we can specify a file name or give the data directly:</p>\n<pre>metacatalog add unit --csv <span class=\"s1\">'name,symbol\\nnfoo,F\\nbar,B'</span>\n</pre>\n<pre><code>Added 2 unit records.\nDone.\n</code></pre>\n\n          </div>"}, "last_serial": 6247765, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "45e87ea8b7b86c3bb9a3b4988adb94bf", "sha256": "b2dbaec328559510204d7a21ed54d10969bf9dd4356c7f5ad7c0043bcce2f544"}, "downloads": -1, "filename": "metacatalog-0.1.tar.gz", "has_sig": false, "md5_digest": "45e87ea8b7b86c3bb9a3b4988adb94bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17370, "upload_time": "2019-08-20T18:56:05", "upload_time_iso_8601": "2019-08-20T18:56:05.376364Z", "url": "https://files.pythonhosted.org/packages/a3/70/9e1d5f6905cb331c079741df5b4a6ad3419f49d2e1495715940adbabb1fe/metacatalog-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "01cd9ab979cb1b4119de2d7a0ad41225", "sha256": "c7ee85ea3e3902729c7cb08890d9d56549b9f12abf70b4a53583851e2d7bed5d"}, "downloads": -1, "filename": "metacatalog-0.1.1.tar.gz", "has_sig": false, "md5_digest": "01cd9ab979cb1b4119de2d7a0ad41225", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27415, "upload_time": "2019-09-05T10:39:39", "upload_time_iso_8601": "2019-09-05T10:39:39.744798Z", "url": "https://files.pythonhosted.org/packages/b1/d8/6422e64acd61865184cbf2fdf1c0a4709cfbefdba1e1dfe56d993935bf6c/metacatalog-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ee58d7bc5a63ba48a7904627413b140d", "sha256": "b80d383ecc5a3ef9f1b44658aaa154c51d28e5e3329d260fe85e2995c31f4d01"}, "downloads": -1, "filename": "metacatalog-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ee58d7bc5a63ba48a7904627413b140d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31918, "upload_time": "2019-09-12T11:03:31", "upload_time_iso_8601": "2019-09-12T11:03:31.636777Z", "url": "https://files.pythonhosted.org/packages/0f/ce/d9b143c87b5185b4a1478600345d0edb7c7c151247d25a98aa4cef26d794/metacatalog-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "23899d9033820c0eb0bcd058eda85c68", "sha256": "e359d72d5b53e39f45b8774a4b9b9bb511ec57f9ee4385c56e5750addb80a6ce"}, "downloads": -1, "filename": "metacatalog-0.1.3.tar.gz", "has_sig": false, "md5_digest": "23899d9033820c0eb0bcd058eda85c68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35469, "upload_time": "2019-11-14T17:54:13", "upload_time_iso_8601": "2019-11-14T17:54:13.530505Z", "url": "https://files.pythonhosted.org/packages/4a/6b/494f2373056faa8cbae0c33704902d77ba6b82db1bfc2dfa2032e0883a3e/metacatalog-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "27f6abf13a880f178f7f436849ef6ffc", "sha256": "2f9d15a573dd7c43d04e0124bca08efac3208324005ca951cc6b5d8e4278be50"}, "downloads": -1, "filename": "metacatalog-0.1.4.tar.gz", "has_sig": false, "md5_digest": "27f6abf13a880f178f7f436849ef6ffc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39026, "upload_time": "2019-11-20T10:24:58", "upload_time_iso_8601": "2019-11-20T10:24:58.178782Z", "url": "https://files.pythonhosted.org/packages/f5/4a/aa4d353eb7843f3e2421ab737eb0e3a783123c894169fa4f83ff92243c1f/metacatalog-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "f412234bb22624b18ac5773548f51e3a", "sha256": "4f413b351f09e2fb1b5eda5c7ccc6046b7056f58fea4a0ee61e44db4cb018b7e"}, "downloads": -1, "filename": "metacatalog-0.1.5.tar.gz", "has_sig": false, "md5_digest": "f412234bb22624b18ac5773548f51e3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40855, "upload_time": "2019-12-05T14:46:57", "upload_time_iso_8601": "2019-12-05T14:46:57.256883Z", "url": "https://files.pythonhosted.org/packages/19/26/0268c51325eacfbbfd000a6161c36ff17bd244e8a50f7922ba9e46780ec3/metacatalog-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f412234bb22624b18ac5773548f51e3a", "sha256": "4f413b351f09e2fb1b5eda5c7ccc6046b7056f58fea4a0ee61e44db4cb018b7e"}, "downloads": -1, "filename": "metacatalog-0.1.5.tar.gz", "has_sig": false, "md5_digest": "f412234bb22624b18ac5773548f51e3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40855, "upload_time": "2019-12-05T14:46:57", "upload_time_iso_8601": "2019-12-05T14:46:57.256883Z", "url": "https://files.pythonhosted.org/packages/19/26/0268c51325eacfbbfd000a6161c36ff17bd244e8a50f7922ba9e46780ec3/metacatalog-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:59 2020"}