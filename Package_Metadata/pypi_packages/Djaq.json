{"info": {"author": "Paul Wolf", "author_email": "paul.wolf@yewleaf.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Djaq provides a query language for Django. In contrast to the QuerySet\nclass that provides a Python API, Djaq queries are strings. A query\nstring might look like this:\n\n::\n\n   (b.name as title, b.publisher.name as publisher) Book b\n\nThis retrieves a list of book titles with book publisher. You can send\nDjaq queries from any language, Java, Javascript, golang, etc. to a\nDjango application and get results as JSON.\n\nOf course, there is a common way to do this already by using frameworks\nlike Django REST Framework (DRF), GraphQL, Django views, etc. The\nadvantage of Djaq is you can immediately provide access without writing\nserver side code except for security as explained below. Djaq is a good\nfit if you want:\n\n-  Microservice communication where some services don\u2019t have access to\n   the Django ORM or are not implemented with Python\n\n-  Fast local UI development\n\n-  Fast development of Proof of Concepts\n\nDjaq sits on top of the Django ORM. It can happily be used alongside\nQuerySets and sometimes calling a Djaq query even locally might be\npreferable to constructing a Queryset, although Djaq is not a\nreplacement for QuerySets.\n\nFeatures you might appreciate:\n\n-  Immediate gratification with zero or minimal server-side code. There\n   is minimal setup. And therefore, there is minimal wasted effort if\n   you later move to another framework, like GraphQL or DRF.\n\n-  Djaq uses a syntax that lets you compose queries using Python-like\n   expressions. The query format and syntax is chosen to be written by\n   hand quickly. Readability is a key goal.\n\n-  Fast cursor semantics and explicit retrieval. It only gets data you\n   asked for.\n\n-  Obvious performance behaviour. It will trigger a query in one obvious\n   way through one of the generator methods: ``.dict()``, ``.tuples()``,\n   ``.json()``.\n\n-  Complex expressions let you push computation down to the database\n   layer from the client.\n\n-  A ready-to-go CRUD API that is easy to use. You can send requests to\n   have an arbitrary number of Create, Read, Write, Delete operations\n   done in a single request.\n\n-  Customisable behaviour using your own functions and data validators.\n\n-  A handy user interface for trying out queries on your data models.\n\nDjaq provides whitelisting of apps and models you want to expose. It\nalso provides a simple permissions scheme via settings.\n\n   Note that Djaq is still in an early phase of development. No\n   warranties about reliability, security or that it will work exactly\n   as described.\n\n.. figure:: bookshop/screenshots/djaq_ui.png?raw=true\n   :alt: Djaq UI\n\n   Djaq UI\n\nLimitations\n-----------\n\nCompared to other frameworks like GraphQL and DRF, you can\u2019t easily\nimplement complex business rules on the server. This might be a deal\nbreaker for your application. In particular, if you want to restrict\naccess from untrusted clients to prevent them accessing some rows of\nyour DB, this is more work than just installing Djaq. In that case, you\nmight look at one of those other solutions or Plain Old Django Views.\n\nDjaq only supports Postgresql at this time.\n\nValues in the ``choices`` argument of fields that take only a limited\nset of values will not be retrieved. Instead you get the raw field\nvalue. These are not accessible to Djaq which only retrieves what is\navailable via SQL.\n\nQuickstart\n----------\n\nYou need Python 3.6 or higher and Django 2.1 or higher.\n\nInstall:\n\n::\n\n   pip install Djaq\n\nThe bleeding edge experience:\n\n::\n\n   pip install https://github.com/paul-wolf/djaq/archive/master.zip\n\nUse:\n\n.. code:: python\n\n   from djaq.query import DjangoQuery as DQ\n\n   print(list(DQ(\"(b.name as title, b.publisher.name as publisher) Book b\").dicts()))\n\n   [{'title': 'Name grow along.', 'publisher': 'Long, Lewis and Wright'}, {'title': 'We pay single record.', 'publisher': 'Long, Lewis and Wright'}, {'title': 'Natural develop available manager.', 'publisher': 'Long, Lewis and Wright'}, {'title': 'Fight task international.', 'publisher': 'Long, Lewis and Wright'}, {'title': 'Discover floor phone.', 'publisher': 'Long, Lewis and Wright'}]\n\nProviding an API\n----------------\n\nWe\u2019ll assume below you are installing the Djaq UI. This is not required\nto provide an API but is very useful to try things out.\n\nInstall the API and UI in settings:\n\n.. code:: python\n\n   INSTALLED_APPS = (\n       ...\n       djaq.djaq_api,\n       djaq.djaq_ui,\n   )\n\nConfigure urls in urls.py:\n\n.. code:: python\n\n   urlpatterns = [\n       ...\n       path(\"dquery/\", include(\"djaq.djaq_ui.urls\")),`\n       path(\"djaq/\", include(\"djaq.djaq_api.urls\")),`\n   ]\n\nYou are done. You can start sending requests to:\n\n::\n\n   /djaq/api/request/\n\nThe UI will be available at:\n\n::\n\n   /dquery\n\nNote the UI will send requests to the API endpoint so will not work\nwithout that being configured. You send a request in this form to the\napi endpoint:\n\n.. code:: python\n\n   {\n    \"queries\": [\n     {\n      \"q\": \"(b.id,b.name,b.pages,b.price,b.rating,b.publisher,b.alt_publisher,b.pubdate,b.in_print,) books.Book b\",\n      \"context\": {},\n      \"limit\": \"100\",\n      \"offset\": \"0\"\n     }\n    ]\n   }\n\nThe UI will create this JSON for you if you want to avoid typing it.\n\nYou can also create objects, update them and delete them:\n\n.. code:: python\n\n   {\n      \"queries\": [\n       {\n         \"q\": \"(b.id,b.name,b.pages,b.price,b.rating,b.publisher,b.alt_publisher,b.pubdate,b.in_print,) books.Book b\",\n         \"context\": {},\n         \"limit\": \"100\",\n         \"offset\": \"0\"\n       }\n      ],\n     \"creates\":[{\n        \"_model\":\"Book\"\n        \"name\":\"my new book\",\n        }],\n     \"updates\":[{\n        \"_model\":\"Book\"\n        \"_pk\": 37,\n        \"name\":\"my new title\",\n        }],\n     \"deletes\":[{\n        \"_model\":\"Book\"\n          \"_pk\": 37,\n        }]\n   }\n\nYou can send multiple ``queries``, ``creates``, ``updates``, ``deletes``\noperations in a single request.\n\nSettings\n--------\n\nThe API and UI will use two settings:\n\n-  DJAQ_WHITELIST: a list of apps/models that the user is permitted to\n   include in queries.\n\n-  DJAQ_PERMISSIONS: permissions required for staff and superuser.\n\nIn the following example, we allow the models from \u2018books\u2019 to be exposed\nas well as the ``User`` model. We also require the caller to be both a\nstaff member and superuser:\n\n::\n\n   DJAQ_WHITELIST = {\n       \"django.contrib.auth\": [\"User\"],\n       \"books\": [\n           \"Profile\",\n           \"Author\",\n           \"Consortium\",\n           \"Publisher\",\n           \"Book_authors\",\n           \"Book\",\n           \"Store_books\",\n           \"Store\",\n       ],\n   }\n   DJAQ_UI_URL = None\n   DJAQ_API_URL = None\n   DJAQ_PERMISSIONS = {\n       \"creates\": True,\n       \"updates\": True,\n       \"deletes\": True,\n       \"staff\": True,\n       \"superuser\": True,\n   }\n\nIf we want to allow all models for an app, we can leave away the list of\nmodels. This will have the same effect as the setting above.\n\n::\n\n   DJAQ_WHITELIST = {\n       \"django.contrib.auth\": [\"User\"],\n       \"books\": [],\n   }\n\nFor permissions, you can optionally require any requesting user to be\nstaff and/or superuser. And you can deny or allow update operations. If\nyou do not provide explicit permissions for update operations, the API\nwill respond with 401 if one of those operations is attempted.\n\nCustom API\n----------\n\nYou can write your own custom API endpoint. Here is what a view function\nfor your data layer might look like with Djaq:\n\n.. code:: python\n\n   @login_required\n   def djaq_view(request):\n       data = json.loads(request.body.decode(\"utf-8\"))\n       query_string = data.get(\"q\")\n       offset = int(data.get(\"offset\", 0))\n       limit = int(data.get(\"limit\", 0))\n       context = data.get(\"context\", {})\n       return JsonResponse(\n           {\n              \"result\": list(\n                  DQ(query_string)\n                  .context(context)\n                  .limit(limit)\n                  .offset(offset)\n                  .dicts()\n              )\n           }\n       )\n\nYou can now query any models in your entire Django deployment remotely,\nprovided the authentication underlying the ``login_required`` is\nsatisfied. This is a good solution if your endpoint is only available to\ntrusted clients who hold a valid authentication token or to clients\nwithout authentication who are in your own network and over which you\nhave complete control. It is a bad solution on its own for any public\naccess since it exposes Django framework models, like users,\npermissions, etc.\n\nMost likely you want to control access in two ways:\n\n-  Allow access to only some apps/models\n\n-  Allow access to only some rows in each table and possibly only some\n   fields.\n\nFor controlling access to models, use the whitelist parameter in\nconstructing the DjangoQuery:\n\n.. code:: python\n\n   DQ(query_string, whitelist={\"books\": [\"Book\", \"Publisher\",],})\n     .context(context)\n     .limit(limit)\n     .offset(offset)\n     .dicts()\n\nThis restricts access to only the ``book`` app models, Book and Publish.\n\nYou probably need a couple more things if you want to expose this to a\nbrowser. But this gives an idea of what you can do. The caller now has\naccess to any authorised model resource. Serialisation is all taken care\nof. Djaq comes already with a view similar to the above. You can just\nstart calling and retrieving any data you wish. It\u2019s an instant API to\nyour application provided you trust the client or have sufficient access\ncontrol in place.\n\nPerformance\n-----------\n\nOnce the query is parsed, it is about the same overhead as calling this:\n\n::\n\n   conn = connections['default']\n   cursor = conn.cursor()\n   self.cursor = self.connection.cursor()\n   self.cursor.execute(sql)\n\nParsing is pretty fast:\n\n::\n\n   In [12]: %timeit list(DQ(\"(b.name) Book{ilike(b.name, 'A%')} b\").parse())\n   314 \u00b5s \u00b1 4.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n\nand might be a negligible factor if you are parsing during a remote call\nas part of a view function.\n\nBut if you want to iterate over, say, a dictionary of variables locally,\nyou\u2019ll want to parse once:\n\n.. code:: python\n\n   dq = DQ(\"(b.name) Book{ilike(b.name, '$(namestart)')} b\")\n   dq.parse()\n   for vars in var_list:\n       results = list(dq.context(vars).tuples())\n       <do something with results>\n\nNote that each call of ``context()`` causes the cursor to execute again\nwhen ``tuples()`` is iterated.\n\nQuery usage guide\n-----------------\n\nThroughout, we use models somewhat like those from Django\u2019s bookshop\nexample:\n\n.. code:: python\n\n   from django.db import models\n\n   class Author(models.Model):\n       name = models.CharField(max_length=100)\n       age = models.IntegerField()\n\n   class Publisher(models.Model):\n       name = models.CharField(max_length=300)\n\n   class Book(models.Model):\n       name = models.CharField(max_length=300)\n       pages = models.IntegerField()\n       price = models.DecimalField(max_digits=10, decimal_places=2)\n       rating = models.FloatField()\n       authors = models.ManyToManyField(Author)\n       publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)\n       pubdate = models.DateField()\n\n   class Store(models.Model):\n       name = models.CharField(max_length=300)\n       books = models.ManyToManyField(Book)\n\nThese examples use auto-generated titles and names and we have a\nslightly more complicated set of models than shown above.\n\nLet\u2019s get book title (name), price, discounted price, amount of discount\nand publisher name wherever the price is over 50.\n\n.. code:: python\n\n   result = \\\n     list(DQ(\"\"\"(b.name,\n          b.price as price,\n          0.2 as discount,\n          b.price * 0.2 as discount_price,\n          b.price - (b.price*0.2) as diff,\n          Publisher.name\n         ) Book{b.price > 50} b\"\"\").dicts())\n\n``result`` now contains a list of dicts each of which is a row in the\nresult set. One example:\n\n.. code:: python\n\n   [{'b_name': 'Address such conference.',\n     'price': Decimal('99.01'),\n     'discount': Decimal('0.2'),\n     'discount_price': Decimal('19.802'),\n     'diff': Decimal('79.208'),\n     'publisher_name': 'Arnold Inc'}]\n\nHere is the structure of the syntax:\n\n::\n\n   (<field_exp1>, ...) <ModelName>{<filter_expression>} <alias> order by (<field_exp1>, ...)\n\nWhitespace does not matter too much. You could put things on separate\nlines:\n\n.. code:: python\n\n   (\n      b.name, b.price,\n      Publisher.name\n   )\n   Book{p.price > 50} b\n\nAlways start with column expressions you want to return in parens:\n\n::\n\n   (b.name, b.price, Publisher.name)\n\nThese expressions can be Django Model fields or arithmetic expressions\nor any expression supported by functions of your underlying database.\nColumns are automatically given names. But you can give them your own\nname:\n\n::\n\n   (b.name as title, b.price as price, Publisher.name as publisher)\n\nNext is the model alias declaration:\n\n::\n\n   Book b\n\nor if we want to filter and get only books over 50 in price:\n\n::\n\n   Book{b.price > 50} b\n\n``Book`` is the Django Model name. ``b`` is an alias we can use as an\nabbreviation in the filter or returned column expressions. We put the\nfilter in curly braces, ``{}``, between the model name and alias. Use\nPython syntax to express the filter. Also use Python syntax to express\nthe data to return. You don\u2019t have access to the Python Standard\nLibrary. This is basically the intersection of SQL and Python:\n\nThe following filter:\n\n::\n\n   {b.price > 50 and ilike(Publisher.name, 'A%')}\n\nwill be translated to SQL:\n\n::\n\n   b.price > 50 AND publisher.name ILIKE 'A%'\n\nThe expressions are fully parsed so they are not subject to SQL\ninjection. Trying to do so will cause an exception.\n\nYou might notice in the above examples, Publisher does not use an alias.\nIf you wanted an alias for Publisher, you could use a more complicated\nsyntax:\n\n::\n\n   (b.name, b.price) Book b\n   -> (p.name) Publisher.name p\n\nNotice, we use the ``->`` symbol to add another aliased relationship.\nThis is one of three options: ``->``, ``<-``, ``<>`` that indicate you\nwant to explicitly join via an SQL LEFT, RIGHT or INNER join\nrespectively. But you don\u2019t need to do this. LEFT joins will always be\nimplicit. We did not even need to refer to the Publisher model directly.\nWe could have done this:\n\n::\n\n   (b.name, b.price, b.publisher.name as publisher)\n   Book{p.price > 50} b\n\nOur example model also has an owner model called \u201cConsortium\u201d that is\nthe owner of the publisher:\n\n.. code:: python\n\n   In [16]: print(list(DQ(\"(b.name, b.price, b.publisher.name, b.publisher.owner.name) Book b\").limit(1).dicts()))\n   Out[16]: [{'b_name': 'Range total author impact.', 'b_price': Decimal('12.00'), 'b_publisher_name': 'Wright, Taylor and Fitzpatrick', 'b_publisher_owner_name': 'Publishers Group'}]\n\nTo recap, there are three alternative patterns to follow to get the\npublisher name in the result set:\n\n.. code:: python\n\n   In [13]: print(list(DQ(\"(b.name, b.price) Book b -> (p.name)Publisher p\").limit(1).dicts()))\n\n   In [14]: print(list(DQ(\"(b.name, b.price, Publisher.name) Book b\").limit(1).dicts()))\n\n   In [15]: print(list(DQ(\"(b.name, b.price, b.publisher.name) Book b\").limit(1).dicts()))\n\nNote that the above will each produce slightly different auto-generated\noutput names unless you provide your own aliases.\n\nSignal that you want to summarise results using an aggregate function:\n\n.. code:: python\n\n   list(DQ(\"(b.publisher.name as publisher, count(b.id) as book_count) Book b\").dicts())\n\n   [\n       {\n           \"publisher\": \"Martinez, Clark and Banks\",\n           \"book_count\": 6\n       },\n       {\n           \"publisher\": \"Fischer-Casey\",\n           \"book_count\": 9\n       },\n       etc.\n   ]\n\nOrder by name:\n\n::\n\n   (b.name, b.price, b.publisher.name as publisher)\n   Book{p.price > 50} b\n   order by b.name\n\nGet average, minimum and maximum prices:\n\n.. code:: python\n\n   list(DQ(\"(avg(b.price) as average, min(b.price) as minimum, max(b.price) as maximum) Book b).dicts())\n   [\n      {\n         \"average\": \"18.5287169247794985\",\n         \"minimum\": \"3.00\",\n         \"maximum\": \"99.01\"\n      }\n   ]\n\nCount all books:\n\n.. code:: python\n\n   list(DQ(\"(count(b.id)) Book b\").dicts())\n\n   [\n       {\n           \"countb_id\": 149999\n       }\n   ]\n\nYou can qualify model names with the app name or registered app path:\n\n::\n\n   (b.name, b.publisher.name) books.Book b\n\nYou\u2019ll need this if you have models from different apps with the same\nname.\n\nTo pass parameters, use variables in your query, like ``'$(myvar)'``:\n\n.. code:: python\n\n   In [30]: oldest = '2018-12-20'\n       ...: list(DQ(\"(b.name, b.pubdate) Book{b.pubdate >= '$(oldest)'} b\").context({\"oldest\": oldest}).limit(5).tuples())\n   Out[30]:\n   [('Available exactly blood.', datetime.date(2018, 12, 20)),\n    ('Indicate Congress none always.', datetime.date(2018, 12, 24)),\n    ('Old beautiful three program.', datetime.date(2018, 12, 25)),\n    ('Oil onto mission.', datetime.date(2018, 12, 21)),\n    ('Key same effect me.', datetime.date(2018, 12, 23))]\n\nNotice that the variable holder, ``$()``, *must* be in single quotes.\n\nQuery UI\n~~~~~~~~\n\nYou can optionally install a query user interface to try out queries on\nyour own data set:\n\n-  After installing djaq, add ``djaq.djaq_ui`` to INSTALLED_APPS\n\n-  Add ``path(\"dquery/\", include(\"djaq.djaq_ui.urls\")),`` to\n   ``urlpattenrs   in the sites``\\ urls.py\\`\n\nNavigate to \\`/dquery/\u2019 in your app and you should be able to try out\nqueries.\n\nFunctions\n---------\n\nIf a function is not defined by DjangoQuery, then the function name is\npassed without further intervention to the underlying SQL. A user can\ndefine new functions at any time by adding to the custom functions.\nHere\u2019s an example of adding a regex matching function:\n\n.. code:: python\n\n   DjangoQuery.functions[\"REGEX\"] = \"{} ~ {}\"\n\nNow find all book names starting with \u2018B\u2019:\n\n.. code:: python\n\n   DQ(\"(b.name) Book{regex(b.name, 'B.*')} b\")\n\nWe always want to use upper case for the function name when defining the\nfunction. Usage of a function is then case-insensitive. You may wish to\nmake sure you are not over-writing existing functions. \u201cREGEX\u201d already\nexists, for instance.\n\nYou can also provide a ``callable`` to ``DjangoQuery.functions``. The\ncallable needs to take two arguments: the function name and a list of\npositional parameters and it must return SQL as a string that can either\nrepresent a column expression or some value expression from the\nunderlying backend.\n\nIn the following:\n\n.. code:: python\n\n   DQ(\"(b.name) Book{like(upper(b.name), upper('$(name_search)'))} b\")\n\n``like()`` is a Djaq-defined function that is converted to\n``field LIKE string``. Whereas ``upper()`` is sent to the underlying\ndatabase because it\u2019s a common SQL function. Any function can be created\nor existing functions mutated by updating the ``DjangoQuery.functions``\ndict where the key is the upper case function name and the value is a\ntemplate string with ``{}`` placeholders. Arguments are positionally\ninterpolated.\n\nAbove, we provided this example:\n\n.. code:: python\n\n   DQ(\"\"\"(\n      sum(iif(b.rating < 5, b.rating, 0)) as below_5,\n      sum(iif(b.rating >= 5, b.rating, 0)) as above_5\n   ) Book b\"\"\")\n\nWe can simplify further by creating a new function. The IIF function is\ndefined like this:\n\n::\n\n   \"CASE WHEN {} THEN {} ELSE {} END\"\n\nWe can create a ``SUMIF`` function like this:\n\n::\n\n   DjangoQuery.functions['SUMIF'] = \"SUM(CASE WHEN {} THEN {} ELSE {} END)\"\n\nNow we can rewrite the above like this:\n\n.. code:: python\n\n   DQ(\"\"\"(\n       sumif(b.rating < 5, b.rating, 0) as below_5,\n       sumif(b.rating >= 5, b.rating, 0) as above_5\n       ) Book b\"\"\")\n\nHere\u2019s an example providing a function:\n\n.. code:: python\n\n   def concat(funcname, args):\n       \"\"\"Return args spliced by sql concat operator.\"\"\"\n       return \" || \".join(args)\n\n   DjangoQuery.functions['CONCAT'] = concat\n\nParameters\n----------\n\nWe call the Django connection cursor approximately like this:\n\n.. code:: python\n\n   from django.db import connections\n   cursor = connections['default']\n   cursor.execute(sql, context_dict)\n\nWhen we execute the resulting SQL query, named parameters are used. You\n*must* name your parameters. Positional parameters are not passed:\n\n.. code:: python\n\n   oldest = '2000-01-01'\n   DQ(\"(b.id) Book{b.pub_date >= '$(oldest)'} b\").context({\"oldest\": oldest}).tuples()\n\nNotice that any parameterised value must be represented in the query\nexpression in single quotes:\n\n::\n\n   '$(myparam)'\n\nTherefore, when you add subqueries, their parameters have to be supplied\nat the same time.\n\nNote what is happening here:\n\n::\n\n   name_search = 'Bar.*'\n   DQ(\"(b.id) Book{regex(b.name, '%(name_search)')} b\").context(locals()).tuples()\n\nTo get all books starting with \u2018Bar\u2019. Or:\n\n.. code:: python\n\n   DQ(\"(b.name) Book{like(upper(b.name), upper('$(name_search)'))} b\").context(request.POST)\n\nProvided that ``request.POST`` has a ``name_search`` key/value.\n\nYou can provide a validation class that will return context variables.\nThe default class used is called ``ContextValidator()``. You can\noverride this to provide a validator that raises exceptions if data is\nnot valid or mutates the context data, like coercing types from ``str``\nto ``int``:\n\n.. code:: python\n\n   class MyContextValidator(ContextValidator):\n       def get(self, key, value):\n           if key == 'order_no':\n               return int(value)\n           return value\n\n       def context(self):\n           if not 'order_no' in self.data:\n               raise Exception(\"Need order no\")\n           self.super().context()\n\nThen add the validator:\n\n.. code:: python\n\n   order_no = \"12345\"\n   DQ(\"(o.order_no, o.customer) Orders{o.order_no == '%(order_no)')} b\")\n       .validator(MyContextValidator)\n       .context(locals())\n       .tuples()\n\nYou can set your own validator class in Django settings:\n\n::\n\n   DJAQ_VALIDATOR = MyValidator\n\nThe ``request`` parameter of the API view is added to the context and\nwill be available to the validator as ``request``.\n\nColumn expressions\n------------------\n\nDoing column arithmetic is supported directly in the query syntax:\n\n.. code:: python\n\n   DQ(\"\"\"(b.name,\n       b.price as price,\n       0.2 as discount,\n       b.price*0.2 as discount_price,\n       b.price - (b.price*0.2) as diff\n       ) Book b\"\"\")\n\nYou can use constants:\n\n.. code:: python\n\n   In [60]: list(DQ(\"(b.name, 'great read') Book b\").limit(1).tuples())\n   Out[60]: [('Range total author impact.', 'great read')]\n\nYou can use the common operators and functions of your underlying db.\n\nThe usual arithmetic:\n\n.. code:: python\n\n   In [36]: list(DQ(\"(b.name, 1+1) Book b\").limit(1).tuples())\n   Out[36]: [('Range total author impact.', 2)]\n   In [38]: list(DQ(\"(b.name, 2.0/4) Book b\").limit(1).tuples())\n   Out[38]: [('Range total author impact.', Decimal('0.50000000000000000000'))]\n   In [44]: list(DQ(\"(2*3) Book b\").limit(1).tuples())\n   Out[44]: [(6,)]\n\nModulo:\n\n.. code:: python\n\n   In [55]: list(DQ(\"(mod(4.0,3)) Book b\").limit(1).tuples())\n   Out[55]: [(Decimal('1.0'),)]\n\nComparison as a boolean expression:\n\n.. code:: python\n\n   In [45]: list(DQ(\"(2 > 3) Book b\").limit(1).tuples())\n   Out[45]: [(False,)]\n\nWhile the syntax has a superficial resemblance to Python, you do not\nhave access to any functions of the Python Standard Libary.\n\nSubqueries and ``in`` clause\n----------------------------\n\nYou can reference subqueries within a Djaq expression using\n\n-  Another DjangoQuery\n-  A Queryset\n-  A list\n\nThe two most useful cases are using a subquery in the filter condition:\n\n::\n\n   DQ('(b.id, b.name) Book{b.id in [\"(Book.id)\"]} b')\n\nAnd using a subquery in the selected columns expression:\n\n::\n\n   DQ('(p.name, [\"(count(b.id)) Book{Publisher.id == b.publisher} b\"]) Publisher p')\n\nYou can use an IN clause with the keyword ``in`` (note lower case) If\nyou are writing queries via the Python API. Create one DjangoQuery and\nreference it with ``@queryname``:\n\n::\n\n   DQ(\"(b.id) Book{name == 'B*'} b\", name='dq_sub')\n   dq = DQ(\"(b.name, b.price) Book{id in '@dq_sub'} b\")\n\nNote that you have to pass a name to the DjangoQuery to reference it\nlater. We can also use the ``data`` parameter to pass a QuerySet to the\nDjangoQuery:\n\n::\n\n   qs = Book.objects.filter(name__startswith=\"B\").only('id')\n   dq = DQ(\"(b.name, b.price) Book{id in '@qs_sub'} b\", names={\"qs_sub\": qs})\n\n   qs = Book.objects.filter(name__startswith=\"B\").only('id')\n   ids = [rec.id for rec in qs]\n   dq = DQ(\"(b.name, b.price) Book{id in '@qs_sub'} b\", names={\"qs_sub\": ids})\n\nAs with QuerySets it is nearly always faster to generate a sub query\nthan use an itemised list.\n\nOrder by\n--------\n\nYou can order_by like this:\n\n::\n\n   DQ(\"(b.id) Book{b.price > 20} b order by (b.name)\")\n\nDescending order:\n\n::\n\n   DQ(\"(b.id) Book{b.price > 20} b order by (-b.name)\")\n\nYou can have multple order by expressions.\n\n::\n\n   DQ(\"(b.name, Publisher.name) Book{b.price > 20} b order by (-b.name, b.publisher.name)\")\n\nCount\n-----\n\nThere are a couple ways to count results. These both return the exact\nsame thing:\n\n::\n\n   DQ(\"(Book.id)\").count()\n\n   DQ(\"(count(Book.id)) Book\").value()\n\nDatetimes\n---------\n\nDatetimes are provided as strings in the iso format that your backend\nexpects, like \u20182019-01-01 18:00:00\u2019.\n\nConstants\n---------\n\n``None``, ``True``, ``False`` are replaced in SQL with ``NULL``,\n``TRUE``, ``FALSE``. All of the following work:\n\n::\n\n   DQ(\"(b.id, b.name) Book{in_print is True} b\")\n   DQ(\"(b.id, b.name) Book{in_print is not True} b\")\n   DQ(\"(b.id, b.name) Book{in_print is False} b\")\n   DQ(\"(b.id, b.name) Book{in_print == True} b\")\n\nSlicing\n-------\n\nYou cannot slice a DjangoQuery because this would frustrate a design\ngoal of Djaq to provide the performance advantages of cursor-like\nbehaviour.\n\nYou can use ``limit()`` and ``offset()``:\n\n::\n\n   DjangoQuery(\"...\").offset(1000).limit(100).tuples()\n\nWhich will provide you with the first hundred results starting from the\n1000th record.\n\nRewind cursor\n-------------\n\nYou can rewind the cursor but this is just executing the SQL again:\n\n::\n\n   list(dq.tuples())\n\n   # now, calling `dq.tuples()` returns nothing\n\n   list(dq.rewind().tuples())\n\n   # you will again see results\n\nIf you call ``DjangoQuery.context(data)``, that will effectively rewind\nthe cursor since an entirely new query is created and the implementation\ncurrently doesn\u2019t care if ``data`` is the same context as previously\nsupplied.\n\nSchema\n------\n\nThere is a function to get the schema available to a calling client:\n\n.. code:: python\n\n   from djaq.app_utils import get_schema\n   print(get_schema())\n\nPass the same whitelist you use for exposing the query endpoint:\n\n.. code:: python\n\n   wl = {\"books\": []}\n   print(get_schema(whitelist=wl))\n\nComparing to Django QuerySets\n-----------------------------\n\nDjaq queries can be sent over the wire as a string. That is the main\ndifference with Quersets. Even then, Djaq is not a replacement for\nQuerysets. Querysets are highly integrated with Django and have been\ndeveloped over 15 years by many developers. It is a very well thought\nout framework that is the best choice working within a service based on\nDjango\u2019s ORM. This section is intended to highlight differences for\nusers with high familiarity with the ``QuerySet`` class for the purpose\nof understanding limitations and capabilities of DjangoQuery.\n\nDjango provides significant options for adjusting query generation to\nfit a specific use case, ``only()``, ``select_related()``,\n``prefetch_related()`` are all useful for different cases. Here\u2019s a\npoint-by-point comparison with Djaq:\n\n-  ``only()``: Djaq always works in \u201conly\u201d mode. Only explicitly\n   requested fields are returned.\n\n-  ``select_related()``: The select clause only returns those columns\n   explicitly defined. This feature makes loading of related fields\n   non-lazy. In contrast, queries are always non-lazy in Djaq.\n\n-  ``prefetch_related()``: When you have a m2m field as a column\n   expression, the model hosting that field is repeated in results as\n   many times as necessary. Another way is to use a separate query for\n   the m2m related records. In anycase, this is not required in Djaq.\n\n-  F expressions: These are workarounds for not being able to write\n   expressions in the query for things like column value arithmetic and\n   other expressions you want to have the db calculate. Djaq lets you\n   write these directly and naturally as part of its syntax.\n\n-  To aggregate with Querysets, you use ``aggregate()``, whereas Djaq\n   aggregates results whenever an aggregate function appears in the\n   column expressions.\n\n-  Model instances with QuerySets exactly represent the corresponding\n   Django model. Djaq\u2019s usual return formats, like ``dicts()``,\n   ``tuples()``, etc. are more akin to ``QuerySet.value_list()``.\n\nLet\u2019s look at some direct query comparisons:\n\nGet the average price of books:\n\n::\n\n   DQ(\"(avg(b.price)) Book b\")\n\ncompared to QuerySet:\n\n::\n\n   Book.objects.all().aggregate(Avg('price'))\n\nGet the difference off the maximum price:\n\n::\n\n   DQ(\"(Publisher.name, max(Book.price) - avg(Book.price) as price_diff) Book b\")\n\ncompared to QuerySet:\n\n::\n\n   Book.objects.aggregate(price_diff=Max('price', output_field=FloatField()) - Avg('price'))\n\nCount books per publisher:\n\n::\n\n   DQ(\"(Publisher.name, count(Book.id) as num_books) Book b\")\n\ncompared to QuerySet:\n\n::\n\n   Publisher.objects.annotate(num_books=Count(\"book\"))\n\nCount books with ratings up to and over 5:\n\n.. code:: python\n\n   DQ(\"\"\"(sum(iif(b.rating < 5, b.rating, 0)) as below_5,\n       sum(iif(b.rating >= 5, b.rating, 0)) as above_5)\n       Book b\"\"\")\n\ncompared to QuerySet:\n\n.. code:: python\n\n   above_5 = Count('book', filter=Q(book__rating__gt=5))\n   below_5 = Count('book', filter=Q(book__rating__lte=5))\n   Publisher.objects.annotate(below_5=below_5).annotate(above_5=above_5)\n\nGet average, maximum, minimum price of books:\n\n.. code:: python\n\n   DQ(\"(avg(b.price), max(b.price), min(b.price)) Book b\")\n\ncompared to QuerySet:\n\n::\n\n   Book.objects.aggregate(Avg('price'), Max('price'), Min('price'))\n\nJust as there is a ModelInstance class in Django, we have a DQResult\nclass:\n\n``objs()``: return a DQResult for each result row, basically a namespace\nfor the object:\n\n.. code:: python\n\n   dq = DQ(\"(b.id, b.name, Publisher.name as publisher) Book b\")\n   for book in dq.objs():\n       title = book.name\n       publisher = book.publisher\n       ...\n\nNote that by default, you iterate using a generator. You cannot slice a\ngenerator.\n\nSimple counts:\n\n``DjangoQuery.value()``: when you know the result is a single row with a\nsingle value, you can immediately access it without further iterations:\n\n.. code:: python\n\n   DQ(\"(count(b.id)) Book b\").value()\n\nwill return a single integer value representing the count of books.\n\nDjango Subquery and OuterRef\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following do pretty much the same thing:\n\n::\n\n   # QuerySet\n   pubs = Publisher.objects.filter(pk=OuterRef('publisher')).only('pk')\n   Book.objects.filter(publisher__in=Subquery(pubs))\n\n   # Djaq\n   DQ(\"(p.id) Publisher p\", name='pubs')\n   DQ(\"(b.name) Book{publisher in '@pubs'} b\")\n\nObviously, in both cases, you would be filtering Publisher to make it\nactually useful, but the effect and verbosity can be extrapolated from\nthe above.\n\nMost importantly, sending a query request over the wire, you can\nreference the outer scope:\n\n::\n\n   DQ('(p.name, [\"(count(b.id)) Book{Publisher.id == b.publisher} b\"]) Publisher p')\n\nthe subquery output expression references the outer scope. It evaluates\nto the following SQL:\n\n.. code:: sql\n\n   SELECT\n      \"books_publisher\".\"name\",\n      (SELECT count(\"books_book\".\"id\") FROM books_book WHERE \"books_publisher\".\"id\" = \"books_book\".\"publisher_id\")\n   FROM books_publisher\n\nThere are some constraints on using subqueries like this. The subquery\ncannot contain any joins.\n\nSample Project\n--------------\n\nIf you want to use Djaq right away in your own test project and you feel\nconfident, crack on. In that case skip the following instructions for\nusing the sample Bookshop project. Or, if you want to try the sample\nproject, clone the django repo:\n\n::\n\n   git clone git@github.com:paul-wolf/djaq.git\n   cd djaq/bookshop\n\nIf you clone the repo and use the sample project, you don\u2019t need to\ninclude Djaq as a requirement because it\u2019s included as a module by a\nsoftlink. Create the virtualenv:\n\n::\n\n   python -m venv .venv\n\nActivate the virtual environment:\n\n::\n\n   source .venv/bin/activate\n\nThe module itself does not install Django and there are no further\nrequirements. To install dependencies for the sample application:\n\n::\n\n   pip install -r requirements.txt\n\nNow make sure there is a Postgresql instance running. The settings are\nlike this:\n\n.. code:: python\n\n   DATABASES = {\n       'default': {\n           'ENGINE': 'django.db.backends.postgresql_psycopg2',\n           'NAME': 'bookshop',\n       },\n\nSo, it assumes peer authentication. Change to suite your needs. Now you\ncan migrate. Make sure the virtualenv is activated!\n\n::\n\n   ./manage.py migrate\n\nWe provide a script to create some sample data:\n\n::\n\n   ./manage.py build_data --book-count 2000\n\nThis creates 2000 books and associated data.\n\nThe example app comes with a management command to run queries:\n\n::\n\n   ./manage.py djaq \"(Publisher.name, max(Book.price) - round(avg(Book.price)) as diff) Book b\"  --format json\n\nOutput of the command should look like this:\n\n::\n\n   \u25b6 ./manage.py djaq \"(Publisher.name, max(Book.price) - round(avg(Book.price)) as diff) Book b\"  --format json\n   SELECT books_publisher.name, (max(books_book.price) - round(avg(books_book.price))) FROM books_book LEFT JOIN books_publisher ON (books_book.publisher_id = books_publisher.id)  GROUP BY books_publisher.name LIMIT 10\n   {\"publisher_name\": \"Avila, Garza and Ward\", \"diff\": 14.0}\n   {\"publisher_name\": \"Boyer-Clements\", \"diff\": 16.0}\n   {\"publisher_name\": \"Clark, Garza and York\", \"diff\": 15.0}\n   {\"publisher_name\": \"Clarke PLC\", \"diff\": 14.0}\n   {\"publisher_name\": \"Griffin-Blake\", \"diff\": 16.0}\n   {\"publisher_name\": \"Hampton-Davis\", \"diff\": 13.0}\n   {\"publisher_name\": \"Jones LLC\", \"diff\": 15.0}\n   {\"publisher_name\": \"Lane-Kim\", \"diff\": 15.0}\n   {\"publisher_name\": \"Norris-Bennett\", \"diff\": 14.0}\n   {\"publisher_name\": \"Singleton-King\", \"diff\": 17.0}\n\nNotice the SQL used to retrieve data is printed first.\n\nThe best approach now would be to trial various queries using the Djaq\nUI as explained above.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/paul-wolf/djaq", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Djaq", "package_url": "https://pypi.org/project/Djaq/", "platform": "", "project_url": "https://pypi.org/project/Djaq/", "project_urls": {"Homepage": "https://github.com/paul-wolf/djaq"}, "release_url": "https://pypi.org/project/Djaq/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "A string-based Django query language", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Djaq provides a query language for Django. In contrast to the QuerySet\nclass that provides a Python API, Djaq queries are strings. A query\nstring might look like this:</p>\n<pre>(b.name as title, b.publisher.name as publisher) Book b\n</pre>\n<p>This retrieves a list of book titles with book publisher. You can send\nDjaq queries from any language, Java, Javascript, golang, etc. to a\nDjango application and get results as JSON.</p>\n<p>Of course, there is a common way to do this already by using frameworks\nlike Django REST Framework (DRF), GraphQL, Django views, etc. The\nadvantage of Djaq is you can immediately provide access without writing\nserver side code except for security as explained below. Djaq is a good\nfit if you want:</p>\n<ul>\n<li>Microservice communication where some services don\u2019t have access to\nthe Django ORM or are not implemented with Python</li>\n<li>Fast local UI development</li>\n<li>Fast development of Proof of Concepts</li>\n</ul>\n<p>Djaq sits on top of the Django ORM. It can happily be used alongside\nQuerySets and sometimes calling a Djaq query even locally might be\npreferable to constructing a Queryset, although Djaq is not a\nreplacement for QuerySets.</p>\n<p>Features you might appreciate:</p>\n<ul>\n<li>Immediate gratification with zero or minimal server-side code. There\nis minimal setup. And therefore, there is minimal wasted effort if\nyou later move to another framework, like GraphQL or DRF.</li>\n<li>Djaq uses a syntax that lets you compose queries using Python-like\nexpressions. The query format and syntax is chosen to be written by\nhand quickly. Readability is a key goal.</li>\n<li>Fast cursor semantics and explicit retrieval. It only gets data you\nasked for.</li>\n<li>Obvious performance behaviour. It will trigger a query in one obvious\nway through one of the generator methods: <tt>.dict()</tt>, <tt>.tuples()</tt>,\n<tt>.json()</tt>.</li>\n<li>Complex expressions let you push computation down to the database\nlayer from the client.</li>\n<li>A ready-to-go CRUD API that is easy to use. You can send requests to\nhave an arbitrary number of Create, Read, Write, Delete operations\ndone in a single request.</li>\n<li>Customisable behaviour using your own functions and data validators.</li>\n<li>A handy user interface for trying out queries on your data models.</li>\n</ul>\n<p>Djaq provides whitelisting of apps and models you want to expose. It\nalso provides a simple permissions scheme via settings.</p>\n<blockquote>\nNote that Djaq is still in an early phase of development. No\nwarranties about reliability, security or that it will work exactly\nas described.</blockquote>\n<div>\n<img alt=\"Djaq UI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb8ab92be9349c75ebba6a10d5c13b8d77cda4f5/626f6f6b73686f702f73637265656e73686f74732f646a61715f75692e706e673f7261773d74727565\">\n<p>Djaq UI</p>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>Compared to other frameworks like GraphQL and DRF, you can\u2019t easily\nimplement complex business rules on the server. This might be a deal\nbreaker for your application. In particular, if you want to restrict\naccess from untrusted clients to prevent them accessing some rows of\nyour DB, this is more work than just installing Djaq. In that case, you\nmight look at one of those other solutions or Plain Old Django Views.</p>\n<p>Djaq only supports Postgresql at this time.</p>\n<p>Values in the <tt>choices</tt> argument of fields that take only a limited\nset of values will not be retrieved. Instead you get the raw field\nvalue. These are not accessible to Djaq which only retrieves what is\navailable via SQL.</p>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>You need Python 3.6 or higher and Django 2.1 or higher.</p>\n<p>Install:</p>\n<pre>pip install Djaq\n</pre>\n<p>The bleeding edge experience:</p>\n<pre>pip install https://github.com/paul-wolf/djaq/archive/master.zip\n</pre>\n<p>Use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djaq.query</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoQuery</span> <span class=\"k\">as</span> <span class=\"n\">DQ</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name as title, b.publisher.name as publisher) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dicts</span><span class=\"p\">()))</span>\n\n<span class=\"p\">[{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Name grow along.'</span><span class=\"p\">,</span> <span class=\"s1\">'publisher'</span><span class=\"p\">:</span> <span class=\"s1\">'Long, Lewis and Wright'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'We pay single record.'</span><span class=\"p\">,</span> <span class=\"s1\">'publisher'</span><span class=\"p\">:</span> <span class=\"s1\">'Long, Lewis and Wright'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Natural develop available manager.'</span><span class=\"p\">,</span> <span class=\"s1\">'publisher'</span><span class=\"p\">:</span> <span class=\"s1\">'Long, Lewis and Wright'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Fight task international.'</span><span class=\"p\">,</span> <span class=\"s1\">'publisher'</span><span class=\"p\">:</span> <span class=\"s1\">'Long, Lewis and Wright'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Discover floor phone.'</span><span class=\"p\">,</span> <span class=\"s1\">'publisher'</span><span class=\"p\">:</span> <span class=\"s1\">'Long, Lewis and Wright'</span><span class=\"p\">}]</span>\n</pre>\n</div>\n<div id=\"providing-an-api\">\n<h2>Providing an API</h2>\n<p>We\u2019ll assume below you are installing the Djaq UI. This is not required\nto provide an API but is very useful to try things out.</p>\n<p>Install the API and UI in settings:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">djaq</span><span class=\"o\">.</span><span class=\"n\">djaq_api</span><span class=\"p\">,</span>\n    <span class=\"n\">djaq</span><span class=\"o\">.</span><span class=\"n\">djaq_ui</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Configure urls in urls.py:</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">\"dquery/\"</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">\"djaq.djaq_ui.urls\"</span><span class=\"p\">)),</span><span class=\"err\">`</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">\"djaq/\"</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">\"djaq.djaq_api.urls\"</span><span class=\"p\">)),</span><span class=\"err\">`</span>\n<span class=\"p\">]</span>\n</pre>\n<p>You are done. You can start sending requests to:</p>\n<pre>/djaq/api/request/\n</pre>\n<p>The UI will be available at:</p>\n<pre>/dquery\n</pre>\n<p>Note the UI will send requests to the API endpoint so will not work\nwithout that being configured. You send a request in this form to the\napi endpoint:</p>\n<pre><span class=\"p\">{</span>\n <span class=\"s2\">\"queries\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n   <span class=\"s2\">\"q\"</span><span class=\"p\">:</span> <span class=\"s2\">\"(b.id,b.name,b.pages,b.price,b.rating,b.publisher,b.alt_publisher,b.pubdate,b.in_print,) books.Book b\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n   <span class=\"s2\">\"limit\"</span><span class=\"p\">:</span> <span class=\"s2\">\"100\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"offset\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span>\n  <span class=\"p\">}</span>\n <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The UI will create this JSON for you if you want to avoid typing it.</p>\n<p>You can also create objects, update them and delete them:</p>\n<pre><span class=\"p\">{</span>\n   <span class=\"s2\">\"queries\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"q\"</span><span class=\"p\">:</span> <span class=\"s2\">\"(b.id,b.name,b.pages,b.price,b.rating,b.publisher,b.alt_publisher,b.pubdate,b.in_print,) books.Book b\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n      <span class=\"s2\">\"limit\"</span><span class=\"p\">:</span> <span class=\"s2\">\"100\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"offset\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span>\n    <span class=\"p\">}</span>\n   <span class=\"p\">],</span>\n  <span class=\"s2\">\"creates\"</span><span class=\"p\">:[{</span>\n     <span class=\"s2\">\"_model\"</span><span class=\"p\">:</span><span class=\"s2\">\"Book\"</span>\n     <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"my new book\"</span><span class=\"p\">,</span>\n     <span class=\"p\">}],</span>\n  <span class=\"s2\">\"updates\"</span><span class=\"p\">:[{</span>\n     <span class=\"s2\">\"_model\"</span><span class=\"p\">:</span><span class=\"s2\">\"Book\"</span>\n     <span class=\"s2\">\"_pk\"</span><span class=\"p\">:</span> <span class=\"mi\">37</span><span class=\"p\">,</span>\n     <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"my new title\"</span><span class=\"p\">,</span>\n     <span class=\"p\">}],</span>\n  <span class=\"s2\">\"deletes\"</span><span class=\"p\">:[{</span>\n     <span class=\"s2\">\"_model\"</span><span class=\"p\">:</span><span class=\"s2\">\"Book\"</span>\n       <span class=\"s2\">\"_pk\"</span><span class=\"p\">:</span> <span class=\"mi\">37</span><span class=\"p\">,</span>\n     <span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can send multiple <tt>queries</tt>, <tt>creates</tt>, <tt>updates</tt>, <tt>deletes</tt>\noperations in a single request.</p>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>The API and UI will use two settings:</p>\n<ul>\n<li>DJAQ_WHITELIST: a list of apps/models that the user is permitted to\ninclude in queries.</li>\n<li>DJAQ_PERMISSIONS: permissions required for staff and superuser.</li>\n</ul>\n<p>In the following example, we allow the models from \u2018books\u2019 to be exposed\nas well as the <tt>User</tt> model. We also require the caller to be both a\nstaff member and superuser:</p>\n<pre>DJAQ_WHITELIST = {\n    \"django.contrib.auth\": [\"User\"],\n    \"books\": [\n        \"Profile\",\n        \"Author\",\n        \"Consortium\",\n        \"Publisher\",\n        \"Book_authors\",\n        \"Book\",\n        \"Store_books\",\n        \"Store\",\n    ],\n}\nDJAQ_UI_URL = None\nDJAQ_API_URL = None\nDJAQ_PERMISSIONS = {\n    \"creates\": True,\n    \"updates\": True,\n    \"deletes\": True,\n    \"staff\": True,\n    \"superuser\": True,\n}\n</pre>\n<p>If we want to allow all models for an app, we can leave away the list of\nmodels. This will have the same effect as the setting above.</p>\n<pre>DJAQ_WHITELIST = {\n    \"django.contrib.auth\": [\"User\"],\n    \"books\": [],\n}\n</pre>\n<p>For permissions, you can optionally require any requesting user to be\nstaff and/or superuser. And you can deny or allow update operations. If\nyou do not provide explicit permissions for update operations, the API\nwill respond with 401 if one of those operations is attempted.</p>\n</div>\n<div id=\"custom-api\">\n<h2>Custom API</h2>\n<p>You can write your own custom API endpoint. Here is what a view function\nfor your data layer might look like with Djaq:</p>\n<pre><span class=\"nd\">@login_required</span>\n<span class=\"k\">def</span> <span class=\"nf\">djaq_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">))</span>\n    <span class=\"n\">query_string</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"q\"</span><span class=\"p\">)</span>\n    <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"offset\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"limit\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"context\"</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n    <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span>\n           <span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n               <span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"n\">query_string</span><span class=\"p\">)</span>\n               <span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n               <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"p\">)</span>\n               <span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n               <span class=\"o\">.</span><span class=\"n\">dicts</span><span class=\"p\">()</span>\n           <span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>You can now query any models in your entire Django deployment remotely,\nprovided the authentication underlying the <tt>login_required</tt> is\nsatisfied. This is a good solution if your endpoint is only available to\ntrusted clients who hold a valid authentication token or to clients\nwithout authentication who are in your own network and over which you\nhave complete control. It is a bad solution on its own for any public\naccess since it exposes Django framework models, like users,\npermissions, etc.</p>\n<p>Most likely you want to control access in two ways:</p>\n<ul>\n<li>Allow access to only some apps/models</li>\n<li>Allow access to only some rows in each table and possibly only some\nfields.</li>\n</ul>\n<p>For controlling access to models, use the whitelist parameter in\nconstructing the DjangoQuery:</p>\n<pre><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"n\">query_string</span><span class=\"p\">,</span> <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"books\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Book\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Publisher\"</span><span class=\"p\">,],})</span>\n  <span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">dicts</span><span class=\"p\">()</span>\n</pre>\n<p>This restricts access to only the <tt>book</tt> app models, Book and Publish.</p>\n<p>You probably need a couple more things if you want to expose this to a\nbrowser. But this gives an idea of what you can do. The caller now has\naccess to any authorised model resource. Serialisation is all taken care\nof. Djaq comes already with a view similar to the above. You can just\nstart calling and retrieving any data you wish. It\u2019s an instant API to\nyour application provided you trust the client or have sufficient access\ncontrol in place.</p>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>Once the query is parsed, it is about the same overhead as calling this:</p>\n<pre>conn = connections['default']\ncursor = conn.cursor()\nself.cursor = self.connection.cursor()\nself.cursor.execute(sql)\n</pre>\n<p>Parsing is pretty fast:</p>\n<pre>In [12]: %timeit list(DQ(\"(b.name) Book{ilike(b.name, 'A%')} b\").parse())\n314 \u00b5s \u00b1 4.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</pre>\n<p>and might be a negligible factor if you are parsing during a remote call\nas part of a view function.</p>\n<p>But if you want to iterate over, say, a dictionary of variables locally,\nyou\u2019ll want to parse once:</p>\n<pre><span class=\"n\">dq</span> <span class=\"o\">=</span> <span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name) Book{ilike(b.name, '$(namestart)')} b\"</span><span class=\"p\">)</span>\n<span class=\"n\">dq</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"nb\">vars</span> <span class=\"ow\">in</span> <span class=\"n\">var_list</span><span class=\"p\">:</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dq</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tuples</span><span class=\"p\">())</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">do</span> <span class=\"n\">something</span> <span class=\"k\">with</span> <span class=\"n\">results</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Note that each call of <tt>context()</tt> causes the cursor to execute again\nwhen <tt>tuples()</tt> is iterated.</p>\n</div>\n<div id=\"query-usage-guide\">\n<h2>Query usage guide</h2>\n<p>Throughout, we use models somewhat like those from Django\u2019s bookshop\nexample:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Author</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Publisher</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DecimalField</span><span class=\"p\">(</span><span class=\"n\">max_digits</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">decimal_places</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">()</span>\n    <span class=\"n\">authors</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Author</span><span class=\"p\">)</span>\n    <span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Publisher</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">pubdate</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Store</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n    <span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">)</span>\n</pre>\n<p>These examples use auto-generated titles and names and we have a\nslightly more complicated set of models than shown above.</p>\n<p>Let\u2019s get book title (name), price, discounted price, amount of discount\nand publisher name wherever the price is over 50.</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> \\\n  <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"(b.name,\n       b.price as price,\n       0.2 as discount,\n       b.price * 0.2 as discount_price,\n       b.price - (b.price*0.2) as diff,\n       Publisher.name\n      ) Book{b.price &gt; 50} b\"\"\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dicts</span><span class=\"p\">())</span>\n</pre>\n<p><tt>result</tt> now contains a list of dicts each of which is a row in the\nresult set. One example:</p>\n<pre><span class=\"p\">[{</span><span class=\"s1\">'b_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Address such conference.'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'price'</span><span class=\"p\">:</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'99.01'</span><span class=\"p\">),</span>\n  <span class=\"s1\">'discount'</span><span class=\"p\">:</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'0.2'</span><span class=\"p\">),</span>\n  <span class=\"s1\">'discount_price'</span><span class=\"p\">:</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'19.802'</span><span class=\"p\">),</span>\n  <span class=\"s1\">'diff'</span><span class=\"p\">:</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'79.208'</span><span class=\"p\">),</span>\n  <span class=\"s1\">'publisher_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Arnold Inc'</span><span class=\"p\">}]</span>\n</pre>\n<p>Here is the structure of the syntax:</p>\n<pre>(&lt;field_exp1&gt;, ...) &lt;ModelName&gt;{&lt;filter_expression&gt;} &lt;alias&gt; order by (&lt;field_exp1&gt;, ...)\n</pre>\n<p>Whitespace does not matter too much. You could put things on separate\nlines:</p>\n<pre><span class=\"p\">(</span>\n   <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">,</span>\n   <span class=\"n\">Publisher</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"p\">)</span>\n<span class=\"n\">Book</span><span class=\"p\">{</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">price</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50</span><span class=\"p\">}</span> <span class=\"n\">b</span>\n</pre>\n<p>Always start with column expressions you want to return in parens:</p>\n<pre>(b.name, b.price, Publisher.name)\n</pre>\n<p>These expressions can be Django Model fields or arithmetic expressions\nor any expression supported by functions of your underlying database.\nColumns are automatically given names. But you can give them your own\nname:</p>\n<pre>(b.name as title, b.price as price, Publisher.name as publisher)\n</pre>\n<p>Next is the model alias declaration:</p>\n<pre>Book b\n</pre>\n<p>or if we want to filter and get only books over 50 in price:</p>\n<pre>Book{b.price &gt; 50} b\n</pre>\n<p><tt>Book</tt> is the Django Model name. <tt>b</tt> is an alias we can use as an\nabbreviation in the filter or returned column expressions. We put the\nfilter in curly braces, <tt>{}</tt>, between the model name and alias. Use\nPython syntax to express the filter. Also use Python syntax to express\nthe data to return. You don\u2019t have access to the Python Standard\nLibrary. This is basically the intersection of SQL and Python:</p>\n<p>The following filter:</p>\n<pre>{b.price &gt; 50 and ilike(Publisher.name, 'A%')}\n</pre>\n<p>will be translated to SQL:</p>\n<pre>b.price &gt; 50 AND publisher.name ILIKE 'A%'\n</pre>\n<p>The expressions are fully parsed so they are not subject to SQL\ninjection. Trying to do so will cause an exception.</p>\n<p>You might notice in the above examples, Publisher does not use an alias.\nIf you wanted an alias for Publisher, you could use a more complicated\nsyntax:</p>\n<pre>(b.name, b.price) Book b\n-&gt; (p.name) Publisher.name p\n</pre>\n<p>Notice, we use the <tt><span class=\"pre\">-&gt;</span></tt> symbol to add another aliased relationship.\nThis is one of three options: <tt><span class=\"pre\">-&gt;</span></tt>, <tt>&lt;-</tt>, <tt>&lt;&gt;</tt> that indicate you\nwant to explicitly join via an SQL LEFT, RIGHT or INNER join\nrespectively. But you don\u2019t need to do this. LEFT joins will always be\nimplicit. We did not even need to refer to the Publisher model directly.\nWe could have done this:</p>\n<pre>(b.name, b.price, b.publisher.name as publisher)\nBook{p.price &gt; 50} b\n</pre>\n<p>Our example model also has an owner model called \u201cConsortium\u201d that is\nthe owner of the publisher:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name, b.price, b.publisher.name, b.publisher.owner.name) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dicts</span><span class=\"p\">()))</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]:</span> <span class=\"p\">[{</span><span class=\"s1\">'b_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Range total author impact.'</span><span class=\"p\">,</span> <span class=\"s1\">'b_price'</span><span class=\"p\">:</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'12.00'</span><span class=\"p\">),</span> <span class=\"s1\">'b_publisher_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Wright, Taylor and Fitzpatrick'</span><span class=\"p\">,</span> <span class=\"s1\">'b_publisher_owner_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Publishers Group'</span><span class=\"p\">}]</span>\n</pre>\n<p>To recap, there are three alternative patterns to follow to get the\npublisher name in the result set:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name, b.price) Book b -&gt; (p.name)Publisher p\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dicts</span><span class=\"p\">()))</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name, b.price, Publisher.name) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dicts</span><span class=\"p\">()))</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name, b.price, b.publisher.name) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dicts</span><span class=\"p\">()))</span>\n</pre>\n<p>Note that the above will each produce slightly different auto-generated\noutput names unless you provide your own aliases.</p>\n<p>Signal that you want to summarise results using an aggregate function:</p>\n<pre><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.publisher.name as publisher, count(b.id) as book_count) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dicts</span><span class=\"p\">())</span>\n\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"publisher\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Martinez, Clark and Banks\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"book_count\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"publisher\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Fischer-Casey\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"book_count\"</span><span class=\"p\">:</span> <span class=\"mi\">9</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">etc</span><span class=\"o\">.</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Order by name:</p>\n<pre>(b.name, b.price, b.publisher.name as publisher)\nBook{p.price &gt; 50} b\norder by b.name\n</pre>\n<p>Get average, minimum and maximum prices:</p>\n<pre><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(avg(b.price) as average, min(b.price) as minimum, max(b.price) as maximum) Book b).dicts())</span>\n<span class=\"p\">[</span>\n   <span class=\"p\">{</span>\n      <span class=\"s2\">\"average\"</span><span class=\"p\">:</span> <span class=\"s2\">\"18.5287169247794985\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"minimum\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3.00\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"maximum\"</span><span class=\"p\">:</span> <span class=\"s2\">\"99.01\"</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Count all books:</p>\n<pre><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(count(b.id)) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dicts</span><span class=\"p\">())</span>\n\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"countb_id\"</span><span class=\"p\">:</span> <span class=\"mi\">149999</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>You can qualify model names with the app name or registered app path:</p>\n<pre>(b.name, b.publisher.name) books.Book b\n</pre>\n<p>You\u2019ll need this if you have models from different apps with the same\nname.</p>\n<p>To pass parameters, use variables in your query, like <tt><span class=\"pre\">'$(myvar)'</span></tt>:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">]:</span> <span class=\"n\">oldest</span> <span class=\"o\">=</span> <span class=\"s1\">'2018-12-20'</span>\n    <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name, b.pubdate) Book{b.pubdate &gt;= '$(oldest)'} b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">({</span><span class=\"s2\">\"oldest\"</span><span class=\"p\">:</span> <span class=\"n\">oldest</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tuples</span><span class=\"p\">())</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">]:</span>\n<span class=\"p\">[(</span><span class=\"s1\">'Available exactly blood.'</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s1\">'Indicate Congress none always.'</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s1\">'Old beautiful three program.'</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s1\">'Oil onto mission.'</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)),</span>\n <span class=\"p\">(</span><span class=\"s1\">'Key same effect me.'</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">))]</span>\n</pre>\n<p>Notice that the variable holder, <tt>$()</tt>, <em>must</em> be in single quotes.</p>\n<div id=\"query-ui\">\n<h3>Query UI</h3>\n<p>You can optionally install a query user interface to try out queries on\nyour own data set:</p>\n<ul>\n<li>After installing djaq, add <tt>djaq.djaq_ui</tt> to INSTALLED_APPS</li>\n<li>Add <tt><span class=\"pre\">path(\"dquery/\",</span> <span class=\"pre\">include(\"djaq.djaq_ui.urls\")),</span></tt> to\n<tt>urlpattenrs\u00a0\u00a0 in the sites</tt>urls.py`</li>\n</ul>\n<p>Navigate to `/dquery/\u2019 in your app and you should be able to try out\nqueries.</p>\n</div>\n</div>\n<div id=\"functions\">\n<h2>Functions</h2>\n<p>If a function is not defined by DjangoQuery, then the function name is\npassed without further intervention to the underlying SQL. A user can\ndefine new functions at any time by adding to the custom functions.\nHere\u2019s an example of adding a regex matching function:</p>\n<pre><span class=\"n\">DjangoQuery</span><span class=\"o\">.</span><span class=\"n\">functions</span><span class=\"p\">[</span><span class=\"s2\">\"REGEX\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\"> ~ </span><span class=\"si\">{}</span><span class=\"s2\">\"</span>\n</pre>\n<p>Now find all book names starting with \u2018B\u2019:</p>\n<pre><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name) Book{regex(b.name, 'B.*')} b\"</span><span class=\"p\">)</span>\n</pre>\n<p>We always want to use upper case for the function name when defining the\nfunction. Usage of a function is then case-insensitive. You may wish to\nmake sure you are not over-writing existing functions. \u201cREGEX\u201d already\nexists, for instance.</p>\n<p>You can also provide a <tt>callable</tt> to <tt>DjangoQuery.functions</tt>. The\ncallable needs to take two arguments: the function name and a list of\npositional parameters and it must return SQL as a string that can either\nrepresent a column expression or some value expression from the\nunderlying backend.</p>\n<p>In the following:</p>\n<pre><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name) Book{like(upper(b.name), upper('$(name_search)'))} b\"</span><span class=\"p\">)</span>\n</pre>\n<p><tt>like()</tt> is a Djaq-defined function that is converted to\n<tt>field LIKE string</tt>. Whereas <tt>upper()</tt> is sent to the underlying\ndatabase because it\u2019s a common SQL function. Any function can be created\nor existing functions mutated by updating the <tt>DjangoQuery.functions</tt>\ndict where the key is the upper case function name and the value is a\ntemplate string with <tt>{}</tt> placeholders. Arguments are positionally\ninterpolated.</p>\n<p>Above, we provided this example:</p>\n<pre><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"(\n   sum(iif(b.rating &lt; 5, b.rating, 0)) as below_5,\n   sum(iif(b.rating &gt;= 5, b.rating, 0)) as above_5\n) Book b\"\"\"</span><span class=\"p\">)</span>\n</pre>\n<p>We can simplify further by creating a new function. The IIF function is\ndefined like this:</p>\n<pre>\"CASE WHEN {} THEN {} ELSE {} END\"\n</pre>\n<p>We can create a <tt>SUMIF</tt> function like this:</p>\n<pre>DjangoQuery.functions['SUMIF'] = \"SUM(CASE WHEN {} THEN {} ELSE {} END)\"\n</pre>\n<p>Now we can rewrite the above like this:</p>\n<pre><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"(\n    sumif(b.rating &lt; 5, b.rating, 0) as below_5,\n    sumif(b.rating &gt;= 5, b.rating, 0) as above_5\n    ) Book b\"\"\"</span><span class=\"p\">)</span>\n</pre>\n<p>Here\u2019s an example providing a function:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">concat</span><span class=\"p\">(</span><span class=\"n\">funcname</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Return args spliced by sql concat operator.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\" || \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n<span class=\"n\">DjangoQuery</span><span class=\"o\">.</span><span class=\"n\">functions</span><span class=\"p\">[</span><span class=\"s1\">'CONCAT'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">concat</span>\n</pre>\n</div>\n<div id=\"parameters\">\n<h2>Parameters</h2>\n<p>We call the Django connection cursor approximately like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">connections</span>\n<span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"s1\">'default'</span><span class=\"p\">]</span>\n<span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">context_dict</span><span class=\"p\">)</span>\n</pre>\n<p>When we execute the resulting SQL query, named parameters are used. You\n<em>must</em> name your parameters. Positional parameters are not passed:</p>\n<pre><span class=\"n\">oldest</span> <span class=\"o\">=</span> <span class=\"s1\">'2000-01-01'</span>\n<span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.id) Book{b.pub_date &gt;= '$(oldest)'} b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">({</span><span class=\"s2\">\"oldest\"</span><span class=\"p\">:</span> <span class=\"n\">oldest</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">tuples</span><span class=\"p\">()</span>\n</pre>\n<p>Notice that any parameterised value must be represented in the query\nexpression in single quotes:</p>\n<pre>'$(myparam)'\n</pre>\n<p>Therefore, when you add subqueries, their parameters have to be supplied\nat the same time.</p>\n<p>Note what is happening here:</p>\n<pre>name_search = 'Bar.*'\nDQ(\"(b.id) Book{regex(b.name, '%(name_search)')} b\").context(locals()).tuples()\n</pre>\n<p>To get all books starting with \u2018Bar\u2019. Or:</p>\n<pre><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name) Book{like(upper(b.name), upper('$(name_search)'))} b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">)</span>\n</pre>\n<p>Provided that <tt>request.POST</tt> has a <tt>name_search</tt> key/value.</p>\n<p>You can provide a validation class that will return context variables.\nThe default class used is called <tt>ContextValidator()</tt>. You can\noverride this to provide a validator that raises exceptions if data is\nnot valid or mutates the context data, like coercing types from <tt>str</tt>\nto <tt>int</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyContextValidator</span><span class=\"p\">(</span><span class=\"n\">ContextValidator</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"o\">==</span> <span class=\"s1\">'order_no'</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"s1\">'order_no'</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"Need order no\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">()</span>\n</pre>\n<p>Then add the validator:</p>\n<pre><span class=\"n\">order_no</span> <span class=\"o\">=</span> <span class=\"s2\">\"12345\"</span>\n<span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(o.order_no, o.customer) Orders{o.order_no == '%(order_no)')} b\"</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">validator</span><span class=\"p\">(</span><span class=\"n\">MyContextValidator</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">())</span>\n    <span class=\"o\">.</span><span class=\"n\">tuples</span><span class=\"p\">()</span>\n</pre>\n<p>You can set your own validator class in Django settings:</p>\n<pre>DJAQ_VALIDATOR = MyValidator\n</pre>\n<p>The <tt>request</tt> parameter of the API view is added to the context and\nwill be available to the validator as <tt>request</tt>.</p>\n</div>\n<div id=\"column-expressions\">\n<h2>Column expressions</h2>\n<p>Doing column arithmetic is supported directly in the query syntax:</p>\n<pre><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"(b.name,\n    b.price as price,\n    0.2 as discount,\n    b.price*0.2 as discount_price,\n    b.price - (b.price*0.2) as diff\n    ) Book b\"\"\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can use constants:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">]:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name, 'great read') Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tuples</span><span class=\"p\">())</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"s1\">'Range total author impact.'</span><span class=\"p\">,</span> <span class=\"s1\">'great read'</span><span class=\"p\">)]</span>\n</pre>\n<p>You can use the common operators and functions of your underlying db.</p>\n<p>The usual arithmetic:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">36</span><span class=\"p\">]:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name, 1+1) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tuples</span><span class=\"p\">())</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">36</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"s1\">'Range total author impact.'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">38</span><span class=\"p\">]:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.name, 2.0/4) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tuples</span><span class=\"p\">())</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">38</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"s1\">'Range total author impact.'</span><span class=\"p\">,</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'0.50000000000000000000'</span><span class=\"p\">))]</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">]:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(2*3) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tuples</span><span class=\"p\">())</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">44</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"mi\">6</span><span class=\"p\">,)]</span>\n</pre>\n<p>Modulo:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">55</span><span class=\"p\">]:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(mod(4.0,3)) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tuples</span><span class=\"p\">())</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">55</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'1.0'</span><span class=\"p\">),)]</span>\n</pre>\n<p>Comparison as a boolean expression:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">45</span><span class=\"p\">]:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(2 &gt; 3) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tuples</span><span class=\"p\">())</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">45</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"kc\">False</span><span class=\"p\">,)]</span>\n</pre>\n<p>While the syntax has a superficial resemblance to Python, you do not\nhave access to any functions of the Python Standard Libary.</p>\n</div>\n<div id=\"subqueries-and-in-clause\">\n<h2>Subqueries and <tt>in</tt> clause</h2>\n<p>You can reference subqueries within a Djaq expression using</p>\n<ul>\n<li>Another DjangoQuery</li>\n<li>A Queryset</li>\n<li>A list</li>\n</ul>\n<p>The two most useful cases are using a subquery in the filter condition:</p>\n<pre>DQ('(b.id, b.name) Book{b.id in [\"(Book.id)\"]} b')\n</pre>\n<p>And using a subquery in the selected columns expression:</p>\n<pre>DQ('(p.name, [\"(count(b.id)) Book{Publisher.id == b.publisher} b\"]) Publisher p')\n</pre>\n<p>You can use an IN clause with the keyword <tt>in</tt> (note lower case) If\nyou are writing queries via the Python API. Create one DjangoQuery and\nreference it with <tt>@queryname</tt>:</p>\n<pre>DQ(\"(b.id) Book{name == 'B*'} b\", name='dq_sub')\ndq = DQ(\"(b.name, b.price) Book{id in '@dq_sub'} b\")\n</pre>\n<p>Note that you have to pass a name to the DjangoQuery to reference it\nlater. We can also use the <tt>data</tt> parameter to pass a QuerySet to the\nDjangoQuery:</p>\n<pre>qs = Book.objects.filter(name__startswith=\"B\").only('id')\ndq = DQ(\"(b.name, b.price) Book{id in '@qs_sub'} b\", names={\"qs_sub\": qs})\n\nqs = Book.objects.filter(name__startswith=\"B\").only('id')\nids = [rec.id for rec in qs]\ndq = DQ(\"(b.name, b.price) Book{id in '@qs_sub'} b\", names={\"qs_sub\": ids})\n</pre>\n<p>As with QuerySets it is nearly always faster to generate a sub query\nthan use an itemised list.</p>\n</div>\n<div id=\"order-by\">\n<h2>Order by</h2>\n<p>You can order_by like this:</p>\n<pre>DQ(\"(b.id) Book{b.price &gt; 20} b order by (b.name)\")\n</pre>\n<p>Descending order:</p>\n<pre>DQ(\"(b.id) Book{b.price &gt; 20} b order by (-b.name)\")\n</pre>\n<p>You can have multple order by expressions.</p>\n<pre>DQ(\"(b.name, Publisher.name) Book{b.price &gt; 20} b order by (-b.name, b.publisher.name)\")\n</pre>\n</div>\n<div id=\"count\">\n<h2>Count</h2>\n<p>There are a couple ways to count results. These both return the exact\nsame thing:</p>\n<pre>DQ(\"(Book.id)\").count()\n\nDQ(\"(count(Book.id)) Book\").value()\n</pre>\n</div>\n<div id=\"datetimes\">\n<h2>Datetimes</h2>\n<p>Datetimes are provided as strings in the iso format that your backend\nexpects, like \u20182019-01-01 18:00:00\u2019.</p>\n</div>\n<div id=\"constants\">\n<h2>Constants</h2>\n<p><tt>None</tt>, <tt>True</tt>, <tt>False</tt> are replaced in SQL with <tt>NULL</tt>,\n<tt>TRUE</tt>, <tt>FALSE</tt>. All of the following work:</p>\n<pre>DQ(\"(b.id, b.name) Book{in_print is True} b\")\nDQ(\"(b.id, b.name) Book{in_print is not True} b\")\nDQ(\"(b.id, b.name) Book{in_print is False} b\")\nDQ(\"(b.id, b.name) Book{in_print == True} b\")\n</pre>\n</div>\n<div id=\"slicing\">\n<h2>Slicing</h2>\n<p>You cannot slice a DjangoQuery because this would frustrate a design\ngoal of Djaq to provide the performance advantages of cursor-like\nbehaviour.</p>\n<p>You can use <tt>limit()</tt> and <tt>offset()</tt>:</p>\n<pre>DjangoQuery(\"...\").offset(1000).limit(100).tuples()\n</pre>\n<p>Which will provide you with the first hundred results starting from the\n1000th record.</p>\n</div>\n<div id=\"rewind-cursor\">\n<h2>Rewind cursor</h2>\n<p>You can rewind the cursor but this is just executing the SQL again:</p>\n<pre>list(dq.tuples())\n\n# now, calling `dq.tuples()` returns nothing\n\nlist(dq.rewind().tuples())\n\n# you will again see results\n</pre>\n<p>If you call <tt>DjangoQuery.context(data)</tt>, that will effectively rewind\nthe cursor since an entirely new query is created and the implementation\ncurrently doesn\u2019t care if <tt>data</tt> is the same context as previously\nsupplied.</p>\n</div>\n<div id=\"schema\">\n<h2>Schema</h2>\n<p>There is a function to get the schema available to a calling client:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djaq.app_utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_schema</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_schema</span><span class=\"p\">())</span>\n</pre>\n<p>Pass the same whitelist you use for exposing the query endpoint:</p>\n<pre><span class=\"n\">wl</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"books\"</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_schema</span><span class=\"p\">(</span><span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"n\">wl</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"comparing-to-django-querysets\">\n<h2>Comparing to Django QuerySets</h2>\n<p>Djaq queries can be sent over the wire as a string. That is the main\ndifference with Quersets. Even then, Djaq is not a replacement for\nQuerysets. Querysets are highly integrated with Django and have been\ndeveloped over 15 years by many developers. It is a very well thought\nout framework that is the best choice working within a service based on\nDjango\u2019s ORM. This section is intended to highlight differences for\nusers with high familiarity with the <tt>QuerySet</tt> class for the purpose\nof understanding limitations and capabilities of DjangoQuery.</p>\n<p>Django provides significant options for adjusting query generation to\nfit a specific use case, <tt>only()</tt>, <tt>select_related()</tt>,\n<tt>prefetch_related()</tt> are all useful for different cases. Here\u2019s a\npoint-by-point comparison with Djaq:</p>\n<ul>\n<li><tt>only()</tt>: Djaq always works in \u201conly\u201d mode. Only explicitly\nrequested fields are returned.</li>\n<li><tt>select_related()</tt>: The select clause only returns those columns\nexplicitly defined. This feature makes loading of related fields\nnon-lazy. In contrast, queries are always non-lazy in Djaq.</li>\n<li><tt>prefetch_related()</tt>: When you have a m2m field as a column\nexpression, the model hosting that field is repeated in results as\nmany times as necessary. Another way is to use a separate query for\nthe m2m related records. In anycase, this is not required in Djaq.</li>\n<li>F expressions: These are workarounds for not being able to write\nexpressions in the query for things like column value arithmetic and\nother expressions you want to have the db calculate. Djaq lets you\nwrite these directly and naturally as part of its syntax.</li>\n<li>To aggregate with Querysets, you use <tt>aggregate()</tt>, whereas Djaq\naggregates results whenever an aggregate function appears in the\ncolumn expressions.</li>\n<li>Model instances with QuerySets exactly represent the corresponding\nDjango model. Djaq\u2019s usual return formats, like <tt>dicts()</tt>,\n<tt>tuples()</tt>, etc. are more akin to <tt>QuerySet.value_list()</tt>.</li>\n</ul>\n<p>Let\u2019s look at some direct query comparisons:</p>\n<p>Get the average price of books:</p>\n<pre>DQ(\"(avg(b.price)) Book b\")\n</pre>\n<p>compared to QuerySet:</p>\n<pre>Book.objects.all().aggregate(Avg('price'))\n</pre>\n<p>Get the difference off the maximum price:</p>\n<pre>DQ(\"(Publisher.name, max(Book.price) - avg(Book.price) as price_diff) Book b\")\n</pre>\n<p>compared to QuerySet:</p>\n<pre>Book.objects.aggregate(price_diff=Max('price', output_field=FloatField()) - Avg('price'))\n</pre>\n<p>Count books per publisher:</p>\n<pre>DQ(\"(Publisher.name, count(Book.id) as num_books) Book b\")\n</pre>\n<p>compared to QuerySet:</p>\n<pre>Publisher.objects.annotate(num_books=Count(\"book\"))\n</pre>\n<p>Count books with ratings up to and over 5:</p>\n<pre><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"(sum(iif(b.rating &lt; 5, b.rating, 0)) as below_5,\n    sum(iif(b.rating &gt;= 5, b.rating, 0)) as above_5)\n    Book b\"\"\"</span><span class=\"p\">)</span>\n</pre>\n<p>compared to QuerySet:</p>\n<pre><span class=\"n\">above_5</span> <span class=\"o\">=</span> <span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s1\">'book'</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">book__rating__gt</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">below_5</span> <span class=\"o\">=</span> <span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s1\">'book'</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">book__rating__lte</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">Publisher</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">below_5</span><span class=\"o\">=</span><span class=\"n\">below_5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">above_5</span><span class=\"o\">=</span><span class=\"n\">above_5</span><span class=\"p\">)</span>\n</pre>\n<p>Get average, maximum, minimum price of books:</p>\n<pre><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(avg(b.price), max(b.price), min(b.price)) Book b\"</span><span class=\"p\">)</span>\n</pre>\n<p>compared to QuerySet:</p>\n<pre>Book.objects.aggregate(Avg('price'), Max('price'), Min('price'))\n</pre>\n<p>Just as there is a ModelInstance class in Django, we have a DQResult\nclass:</p>\n<p><tt>objs()</tt>: return a DQResult for each result row, basically a namespace\nfor the object:</p>\n<pre><span class=\"n\">dq</span> <span class=\"o\">=</span> <span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(b.id, b.name, Publisher.name as publisher) Book b\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">book</span> <span class=\"ow\">in</span> <span class=\"n\">dq</span><span class=\"o\">.</span><span class=\"n\">objs</span><span class=\"p\">():</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">publisher</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Note that by default, you iterate using a generator. You cannot slice a\ngenerator.</p>\n<p>Simple counts:</p>\n<p><tt>DjangoQuery.value()</tt>: when you know the result is a single row with a\nsingle value, you can immediately access it without further iterations:</p>\n<pre><span class=\"n\">DQ</span><span class=\"p\">(</span><span class=\"s2\">\"(count(b.id)) Book b\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">()</span>\n</pre>\n<p>will return a single integer value representing the count of books.</p>\n<div id=\"django-subquery-and-outerref\">\n<h3>Django Subquery and OuterRef</h3>\n<p>The following do pretty much the same thing:</p>\n<pre># QuerySet\npubs = Publisher.objects.filter(pk=OuterRef('publisher')).only('pk')\nBook.objects.filter(publisher__in=Subquery(pubs))\n\n# Djaq\nDQ(\"(p.id) Publisher p\", name='pubs')\nDQ(\"(b.name) Book{publisher in '@pubs'} b\")\n</pre>\n<p>Obviously, in both cases, you would be filtering Publisher to make it\nactually useful, but the effect and verbosity can be extrapolated from\nthe above.</p>\n<p>Most importantly, sending a query request over the wire, you can\nreference the outer scope:</p>\n<pre>DQ('(p.name, [\"(count(b.id)) Book{Publisher.id == b.publisher} b\"]) Publisher p')\n</pre>\n<p>the subquery output expression references the outer scope. It evaluates\nto the following SQL:</p>\n<pre><span class=\"k\">SELECT</span>\n   <span class=\"ss\">\"books_publisher\"</span><span class=\"p\">.</span><span class=\"ss\">\"name\"</span><span class=\"p\">,</span>\n   <span class=\"p\">(</span><span class=\"k\">SELECT</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"ss\">\"books_book\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span><span class=\"p\">)</span> <span class=\"k\">FROM</span> <span class=\"n\">books_book</span> <span class=\"k\">WHERE</span> <span class=\"ss\">\"books_publisher\"</span><span class=\"p\">.</span><span class=\"ss\">\"id\"</span> <span class=\"o\">=</span> <span class=\"ss\">\"books_book\"</span><span class=\"p\">.</span><span class=\"ss\">\"publisher_id\"</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span> <span class=\"n\">books_publisher</span>\n</pre>\n<p>There are some constraints on using subqueries like this. The subquery\ncannot contain any joins.</p>\n</div>\n</div>\n<div id=\"sample-project\">\n<h2>Sample Project</h2>\n<p>If you want to use Djaq right away in your own test project and you feel\nconfident, crack on. In that case skip the following instructions for\nusing the sample Bookshop project. Or, if you want to try the sample\nproject, clone the django repo:</p>\n<pre>git clone git@github.com:paul-wolf/djaq.git\ncd djaq/bookshop\n</pre>\n<p>If you clone the repo and use the sample project, you don\u2019t need to\ninclude Djaq as a requirement because it\u2019s included as a module by a\nsoftlink. Create the virtualenv:</p>\n<pre>python -m venv .venv\n</pre>\n<p>Activate the virtual environment:</p>\n<pre>source .venv/bin/activate\n</pre>\n<p>The module itself does not install Django and there are no further\nrequirements. To install dependencies for the sample application:</p>\n<pre>pip install -r requirements.txt\n</pre>\n<p>Now make sure there is a Postgresql instance running. The settings are\nlike this:</p>\n<pre><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.postgresql_psycopg2'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'bookshop'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n</pre>\n<p>So, it assumes peer authentication. Change to suite your needs. Now you\ncan migrate. Make sure the virtualenv is activated!</p>\n<pre>./manage.py migrate\n</pre>\n<p>We provide a script to create some sample data:</p>\n<pre>./manage.py build_data --book-count 2000\n</pre>\n<p>This creates 2000 books and associated data.</p>\n<p>The example app comes with a management command to run queries:</p>\n<pre>./manage.py djaq \"(Publisher.name, max(Book.price) - round(avg(Book.price)) as diff) Book b\"  --format json\n</pre>\n<p>Output of the command should look like this:</p>\n<pre>\u25b6 ./manage.py djaq \"(Publisher.name, max(Book.price) - round(avg(Book.price)) as diff) Book b\"  --format json\nSELECT books_publisher.name, (max(books_book.price) - round(avg(books_book.price))) FROM books_book LEFT JOIN books_publisher ON (books_book.publisher_id = books_publisher.id)  GROUP BY books_publisher.name LIMIT 10\n{\"publisher_name\": \"Avila, Garza and Ward\", \"diff\": 14.0}\n{\"publisher_name\": \"Boyer-Clements\", \"diff\": 16.0}\n{\"publisher_name\": \"Clark, Garza and York\", \"diff\": 15.0}\n{\"publisher_name\": \"Clarke PLC\", \"diff\": 14.0}\n{\"publisher_name\": \"Griffin-Blake\", \"diff\": 16.0}\n{\"publisher_name\": \"Hampton-Davis\", \"diff\": 13.0}\n{\"publisher_name\": \"Jones LLC\", \"diff\": 15.0}\n{\"publisher_name\": \"Lane-Kim\", \"diff\": 15.0}\n{\"publisher_name\": \"Norris-Bennett\", \"diff\": 14.0}\n{\"publisher_name\": \"Singleton-King\", \"diff\": 17.0}\n</pre>\n<p>Notice the SQL used to retrieve data is printed first.</p>\n<p>The best approach now would be to trial various queries using the Djaq\nUI as explained above.</p>\n</div>\n\n          </div>"}, "last_serial": 7188012, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "0dbb455db0c1f19832ff583564c56d1b", "sha256": "018cfe670ff03bcfa5d15fca6e229f1983569e994e1d2dac0ba89dcdbc20a450"}, "downloads": -1, "filename": "Djaq-0.0.0.tar.gz", "has_sig": false, "md5_digest": "0dbb455db0c1f19832ff583564c56d1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13896, "upload_time": "2019-01-05T10:47:47", "upload_time_iso_8601": "2019-01-05T10:47:47.520826Z", "url": "https://files.pythonhosted.org/packages/55/ef/527df93f4b50dcb22e7e0b977e3c71757bd066782c340fcf2b944b7a7192/Djaq-0.0.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "a14ac773fd63f6675d86d06a53951f82", "sha256": "d8aa73d91bf19485cc3bc55aba82ea02998d9e7530ebf3f23efd34a2c5b35dd3"}, "downloads": -1, "filename": "Djaq-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a14ac773fd63f6675d86d06a53951f82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51832, "upload_time": "2020-05-02T09:27:30", "upload_time_iso_8601": "2020-05-02T09:27:30.580837Z", "url": "https://files.pythonhosted.org/packages/16/bc/e3db4db0bccd2ff55a41cf12308e8db9de63c8e67c5f6036d084dbf2a5b4/Djaq-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "073028e4fa2beccf09ff30dca389a334", "sha256": "b61fe67cc6d9baf0afc35af97dcc2289b67cf32575f90523ea49bed43e789886"}, "downloads": -1, "filename": "Djaq-0.1.1.tar.gz", "has_sig": false, "md5_digest": "073028e4fa2beccf09ff30dca389a334", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57410, "upload_time": "2020-05-07T12:20:07", "upload_time_iso_8601": "2020-05-07T12:20:07.529910Z", "url": "https://files.pythonhosted.org/packages/ef/41/09d9a8ece593096767e7754f5c49ac8716f6101f663d54969106db450a80/Djaq-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "073028e4fa2beccf09ff30dca389a334", "sha256": "b61fe67cc6d9baf0afc35af97dcc2289b67cf32575f90523ea49bed43e789886"}, "downloads": -1, "filename": "Djaq-0.1.1.tar.gz", "has_sig": false, "md5_digest": "073028e4fa2beccf09ff30dca389a334", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57410, "upload_time": "2020-05-07T12:20:07", "upload_time_iso_8601": "2020-05-07T12:20:07.529910Z", "url": "https://files.pythonhosted.org/packages/ef/41/09d9a8ece593096767e7754f5c49ac8716f6101f663d54969106db450a80/Djaq-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:41 2020"}