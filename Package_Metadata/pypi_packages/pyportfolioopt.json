{"info": {"author": "Robert Andrew Martin", "author_email": "martin.robertandrew@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Office/Business :: Financial", "Topic :: Office/Business :: Financial :: Investment", "Topic :: Scientific/Engineering :: Mathematics"], "description": "<p align=\"center\">\n    <img width=60% src=\"https://github.com/robertmartin8/PyPortfolioOpt/blob/master/media/logo_v1.png\">\n</p>\n\n<!-- buttons -->\n<p align=\"center\">\n    <a href=\"https://www.python.org/\">\n        <img src=\"https://img.shields.io/badge/python-v3-brightgreen.svg\"\n            alt=\"python\"></a> &nbsp;\n    <a href=\"https://pypi.org/project/PyPortfolioOpt/\">\n        <img src=\"https://img.shields.io/badge/pypi-v1-brightgreen.svg\"\n            alt=\"pypi\"></a> &nbsp;\n    <a href=\"https://opensource.org/licenses/MIT\">\n        <img src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg\"\n            alt=\"MIT license\"></a> &nbsp;\n    <a href=\"https://github.com/robertmartin8/PyPortfolioOpt/graphs/commit-activity\">\n        <img src=\"https://img.shields.io/badge/Maintained%3F-yes-brightgreen.svg\"\n            alt=\"issues\"></a> &nbsp;\n    <a href=\"https://pyportfolioopt.readthedocs.io/en/latest/\">\n        <img src=\"https://img.shields.io/badge/docs-passing-brightgreen.svg\"\n            alt=\"docs\"></a> &nbsp;\n    <a href=\"https://travis-ci.org/robertmartin8/PyPortfolioOpt\">\n        <img src=\"https://travis-ci.org/robertmartin8/PyPortfolioOpt.svg?branch=master\"\n            alt=\"travis\"></a> &nbsp;\n</p>\n\n<!-- content -->\n\nPyPortfolioOpt is a library that implements portfolio optimisation methods, including\nclassical mean-variance optimisation techniques and Black-Litterman allocation, as well as more\nrecent developments in the field like shrinkage and Hierarchical Risk Parity, along with\nsome novel experimental features like exponentially-weighted covariance matrices.\n\nIt is **extensive** yet easily **extensible**, and can be useful for both the casual investor and the serious practitioner. Whether you are a fundamentals-oriented investor who has identified a\nhandful of undervalued picks, or an algorithmic trader who has a basket of\ninteresting signals, PyPortfolioOpt can help you combine your alpha streams\nin a risk-efficient way.\n\nHead over to the [documentation on ReadTheDocs](https://pyportfolioopt.readthedocs.io/en/latest/) to get an in-depth look at the project, or continue below to check out some examples.\n\n<center>\n<img src=\"https://github.com/robertmartin8/PyPortfolioOpt/blob/master/media/conceptual_flowchart_v2.png\" style=\"width:70%;\"/>\n</center>\n\n## Table of contents\n\n- [Table of contents](#table-of-contents)\n- [Getting started](#getting-started)\n  - [For development](#for-development)\n- [A quick example](#a-quick-example)\n- [What's new](#whats-new)\n- [An overview of classical portfolio optimisation methods](#an-overview-of-classical-portfolio-optimisation-methods)\n- [Features](#features)\n  - [Expected returns](#expected-returns)\n  - [Risk models (covariance)](#risk-models-covariance)\n  - [Objective functions](#objective-functions)\n  - [Adding constraints or different objectives](#adding-constraints-or-different-objectives)\n  - [Black-Litterman allocation](#black-litterman-allocation)\n  - [Other optimisers](#other-optimisers)\n- [Advantages over existing implementations](#advantages-over-existing-implementations)\n- [Project principles and design decisions](#project-principles-and-design-decisions)\n- [Roadmap](#roadmap)\n- [Testing](#testing)\n- [Contributing](#contributing)\n- [Getting in touch](#getting-in-touch)\n\n## Getting started\n\n*Note: if you are on windows, you first need to installl C++. ([download](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16), [install instructions](https://drive.google.com/file/d/0B4GsMXCRaSSIOWpYQkstajlYZ0tPVkNQSElmTWh1dXFaYkJr/view)*\n\nThis project is available on PyPI, meaning that you can just:\n\n```bash\npip install PyPortfolioOpt\n```\n\nHowever, it is best practice to use a dependency manager within a virtual environment.\nMy current recommendation is to get yourself set up with [poetry](https://github.com/sdispater/poetry) then just run\n\n```bash\npoetry add PyPortfolioOpt\n```\n\nOtherwise, clone/download the project and in the project directory run:\n\n```bash\npython setup.py install\n```\n\nThanks to Thomas Schmelzer, PyPortfolioOpt now supports Docker (requires **make**, **docker**, **docker-compose**). Build your first container with `make build`; run tests with `make test`. For more information, please read [this guide](https://docker-curriculum.com/#introduction).\n\n### For development\n\nIf you would like to make major changes to integrate this with your proprietary system, it probably makes sense to clone this repository and to just use the source code.\n\n```bash\ngit clone https://github.com/robertmartin8/PyPortfolioOpt\n```\n\nAlternatively, you could try:\n\n```bash\npip install -e git+https://github.com/robertmartin8/PyPortfolioOpt.git\n```\n\n## A quick example\n\nHere is an example on real life stock data, demonstrating how easy it is to find the long-only portfolio that maximises the Sharpe ratio (a measure of risk-adjusted returns).\n\n```python\nimport pandas as pd\nfrom pypfopt import EfficientFrontier\nfrom pypfopt import risk_models\nfrom pypfopt import expected_returns\n\n# Read in price data\ndf = pd.read_csv(\"tests/resources/stock_prices.csv\", parse_dates=True, index_col=\"date\")\n\n# Calculate expected returns and sample covariance\nmu = expected_returns.mean_historical_return(df)\nS = risk_models.sample_cov(df)\n\n# Optimise for maximal Sharpe ratio\nef = EfficientFrontier(mu, S)\nraw_weights = ef.max_sharpe()\ncleaned_weights = ef.clean_weights()\nef.save_weights_to_file(\"weights.csv\")  # saves to file\nprint(cleaned_weights)\nef.portfolio_performance(verbose=True)\n```\n\nThis outputs the following weights:\n\n```txt\n{'GOOG': 0.01269,\n 'AAPL': 0.09202,\n 'FB': 0.19856,\n 'BABA': 0.09642,\n 'AMZN': 0.07158,\n 'GE': 0.0,\n 'AMD': 0.0,\n 'WMT': 0.0,\n 'BAC': 0.0,\n 'GM': 0.0,\n 'T': 0.0,\n 'UAA': 0.0,\n 'SHLD': 0.0,\n 'XOM': 0.0,\n 'RRC': 0.0,\n 'BBY': 0.06129,\n 'MA': 0.24562,\n 'PFE': 0.18413,\n 'JPM': 0.0,\n 'SBUX': 0.03769}\n\nExpected annual return: 33.0%\nAnnual volatility: 21.7%\nSharpe Ratio: 1.43\n```\n\nThis is interesting but not useful in itself. However, PyPortfolioOpt provides a method which allows you to convert the above continuous weights to an actual allocation that you could buy. Just enter the most recent prices, and the desired portfolio size ($10,000 in this example):\n\n```python\nfrom pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices\n\n\nlatest_prices = get_latest_prices(df)\n\nda = DiscreteAllocation(weights, latest_prices, total_portfolio_value=10000)\nallocation, leftover = da.lp_portfolio()\nprint(\"Discrete allocation:\", allocation)\nprint(\"Funds remaining: ${:.2f}\".format(leftover))\n```\n\n```txt\n11 out of 20 tickers were removed\nDiscrete allocation: {'GOOG': 0, 'AAPL': 5, 'FB': 11, 'BABA': 5, 'AMZN': 1,\n                      'BBY': 7, 'MA': 14, 'PFE': 50, 'SBUX': 5}\nFunds remaining: $8.42\n```\n\n*Disclaimer: nothing about this project constitues investment advice, and the author bears no responsibiltiy for your subsequent investment decisions. Please refer to the [license](https://github.com/robertmartin8/PyPortfolioOpt/blob/master/LICENSE.txt) for more information.*\n\n## What's new\n\nAs of v1.2.0:\n\n- Docker support\n- Idzorek's method for specifying Black-Litterman views using percentage confidences.\n- Industry constraints: limit your sector exposure.\n- Multiple additions and improvements to `risk_models`:\n  - Introduced a new API, in which the function `risk_models.risk_matrix(method=\"...\")` allows\n    all the different risk models to be called. This should make testing easier.\n  - All methods now accept returns data instead of prices, if you set the flag `returns_data=True`.\n- Automatically fix non-positive semidefinite covariance matrices!\n- Additions and improvements to `expected_returns`:\n  - Introduced a new API, in which the function `expected_returns.return_model(method=\"...\")` allows\n    all the different return models to be called. This should make testing easier.\n  - Added option to 'properly' compound returns.\n  - James-Stein shrinkage estimator\n  - CAPM return model.\n- `from pypfopt import Plotting`: moved all plotting functionality into a new class and added\n  new plots. All other plotting functions (scattered in different classes) have been retained,\n  but are now deprecated.\n\n## An overview of classical portfolio optimisation methods\n\nHarry Markowitz's 1952 paper is the undeniable classic, which turned portfolio optimisation from an art into a science. The key insight is that by combining assets with different expected returns and volatilities, one can decide on a mathematically optimal allocation which minimises the risk for a target return \u2013 the set of all such optimal portfolios is referred to as the **efficient frontier**.\n\n<center>\n<img src=\"https://github.com/robertmartin8/PyPortfolioOpt/blob/master/media/efficient_frontier_white.png\" style=\"width:60%;\"/>\n</center>\n\nAlthough much development has been made in the subject, more than half a century later, Markowitz's core ideas are still fundamentally important and see daily use in many portfolio management firms.\nThe main drawback of mean-variance optimisation is that the theoretical treatment requires knowledge of the expected returns and the future risk-characteristics (covariance) of the assets. Obviously, if we knew the expected returns of a stock life would be much easier, but the whole game is that stock returns are notoriously hard to forecast. As a substitute, we can derive estimates of the expected return and covariance based on historical data \u2013 though we do lose the theoretical guarantees provided by Markowitz, the closer our estimates are to the real values, the better our portfolio will be.\n\nThus this project provides four major sets of functionality (though of course they are intimately related)\n\n- Estimates of expected returns\n- Estimates of risk (i.e covariance of asset returns)\n- Objective functions to be optimised\n- Optimisers.\n\nA key design goal of PyPortfolioOpt is **modularity** \u2013 the user should be able to swap in their\ncomponents while still making use of the framework that PyPortfolioOpt provides.\n\n## Features\n\nIn this section, we detail PyPortfolioOpt's current available functionality as per the above breakdown. More examples are offered in `examples.py`, but in my opinion the best resource\nto understand PyPortfolioOpt is the [tests](https://github.com/robertmartin8/PyPortfolioOpt/tree/master/tests).\n\nA far more comprehensive version of this can be found on [ReadTheDocs](https://pyportfolioopt.readthedocs.io/en/latest/), as well as possible extensions for more advanced users.\n\n### Expected returns\n\n- Mean historical returns:\n    - the simplest and most common approach, which states that the expected return of each asset is equal to the mean of its historical returns.\n    - easily interpretable and very intuitive\n- Exponentially weighted mean historical returns:\n    - similar to mean historical returns, except it gives exponentially more weight to recent prices\n    - it is likely the case that an asset's most recent returns hold more weight than returns from 10 years ago when it comes to estimating future returns.\n- James-Stein shrinkage:\n    - a slightly more robust estimate of future returns\n    - by shrinking mean returns to the grand average, we can reduce loss.\n- Capital Asset Pricing Model (CAPM):\n    - a simple model to predict returns based on the beta to the market\n    - this is used all over finance!\n\n### Risk models (covariance)\n\nThe covariance matrix encodes not just the volatility of an asset, but also how it correlated to other assets. This is important because in order to reap the benefits of diversification (and thus increase return per unit risk), the assets in the portfolio should be as uncorrelated as possible.\n\n- Sample covariance matrix:\n    - an unbiased estimate of the covariance matrix\n    - relatively easy to compute\n    - the de facto standard for many years\n    - however, it has a high estimation error, which is particularly dangerous in mean-variance optimisation because the optimiser is likely to give excess weight to these erroneous estimates.\n- Semicovariance: a measure of risk that focuses on downside variation.\n- Exponential covariance: an improvement over sample covariance that gives more weight to recent data\n- Covariance shrinkage: techniques that involve combining the sample covariance matrix with a structured estimator, to reduce the effect of erroneous weights. PyPortfolioOpt provides wrappers around the efficient vectorised implementations provided by `sklearn.covariance`.\n    - manual shrinkage\n    - Ledoit Wolf shrinkage, which chooses an optimal shrinkage parameter. We offer three shrinkage targets: `constant_variance`, `single_factor`, and `constant_correlation`.\n    - Oracle Approximating Shrinkage\n- Minimum Covariance Determinant:\n    - a robust estimate of the covariance\n    - implemented in `sklearn.covariance`\n\n<p align=\"center\">\n    <img width=60% src=\"https://github.com/robertmartin8/PyPortfolioOpt/blob/master/media/corrplot_white.png\">\n</p>\n\n(This plot was generated using `Plotting.plot_covariance`)\n\n### Objective functions\n\n- Maximum Sharpe ratio: this results in a *tangency portfolio* because on a graph of returns vs risk, this portfolio corresponds to the tangent of the efficient frontier that has a y-intercept equal to the risk-free rate. This is the default option because it finds the optimal return per unit risk.\n- Minimum volatility. This may be useful if you're trying to get an idea of how low the volatility *could* be, but in practice it makes a lot more sense to me to use the portfolio that maximises the Sharpe ratio.\n- Efficient return, a.k.a. the Markowitz portfolio, which minimises risk for a given target return \u2013 this was the main focus of Markowitz 1952\n- Efficient risk: the Sharpe-maximising portfolio for a given target risk.\n- Maximum quadratic utility. You can provide your own risk-aversion level and compute the appropriate portfolio.\n\n### Adding constraints or different objectives\n\n- Long/short: by default all of the mean-variance optimisation methods in PyPortfolioOpt are long-only, but they can be initialised to allow for short positions by changing the weight bounds:\n\n```python\nef = EfficientFrontier(mu, S, weight_bounds=(-1, 1))\n```\n\n- Market neutrality: for the `efficient_risk` and `efficient_return` methods, PyPortfolioOpt provides an option to form a market-neutral portfolio (i.e weights sum to zero). This is not possible for the max Sharpe portfolio and the min volatility portfolio because in those cases because they are not invariant with respect to leverage. Market neutrality requires negative weights:\n\n```python\nef = EfficientFrontier(mu, S, weight_bounds=(-1, 1))\nef.efficient_return(target_return=0.2, market_neutral=True)\n```\n\n- Minimum/maximum position size: it may be the case that you want no security to form more than 10% of your portfolio. This is easy to encode:\n\n```python\nef = EfficientFrontier(mu, S, weight_bounds=(0, 0.1))\n```\n\nOne issue with mean-variance optimisation is that it leads to many zero-weights. While these are\n\"optimal\" in-sample, there is a large body of research showing that this characteristic leads\nmean-variance portfolios to underperform out-of-sample. To that end, I have introduced an\nobjective function that can reduce the number of negligible weights for any of the objective functions. Essentially, it adds a penalty (parameterised by `gamma`) on small weights, with a term that looks just like L2 regularisation in machine learning. It may be necessary to try several `gamma` values to achieve the desired number of non-negligible weights. For the test portfolio of 20 securities, `gamma ~ 1` is sufficient\n\n```python\nef = EfficientFrontier(mu, S)\nef.add_objective(objective_functions.L2_reg, gamma=1)\nef.max_sharpe()\n```\n\n### Black-Litterman allocation\n\nAs of v0.5.0, we now support Black-Litterman asset allocation, which allows you to combine\na prior estimate of returns (e.g the market-implied returns) with your own views to form a\nposterior estimate. This results in much better estimates of expected returns than just using\nthe mean historical return. Check out the [docs](https://pyportfolioopt.readthedocs.io/en/latest/BlackLitterman.html) for a discussion of the theory, as well as advice\non formatting inputs.\n\n```python\nS = risk_models.sample_cov(df)\nviewdict = {\"AAPL\": 0.20, \"BBY\": -0.30, \"BAC\": 0, \"SBUX\": -0.2, \"T\": 0.131321}\nbl = BlackLittermanModel(S, absolute_views=viewdict)\nrets = bl.bl_returns()\n\nef = EfficientFrontier(rets, S)\nef.max_sharpe()\n```\n\n### Other optimisers\n\nThe features above mostly pertain to solving efficient frontier optimisation problems via quadratic programming (though this is taken care of by `cvxpy`). However, we offer different optimisers as well:\n\n- Hierarchical Risk Parity, using clustering algorithms to choose uncorrelated assets\n- Markowitz's critical line algorithm (CLA)\n\nPlease refer to the [documentation](https://pyportfolioopt.readthedocs.io/en/latest/OtherOptimisers.html) for more.\n\n## Advantages over existing implementations\n\n- Includes both classical methods (Markowitz 1952 and Black-Litterman), suggested best practices\n  (e.g covariance shrinkage), along with many recent developments and novel\n  features, like L2 regularisation, shrunk covariance, hierarchical risk parity.\n- Native support for pandas dataframes: easily input your daily prices data.\n- Extensive practical tests, which use real-life data.\n- Easy to combine with your proprietary strategies and models.\n- Robust to missing data, and price-series of different lengths (e.g FB data\n  only goes back to 2012 whereas AAPL data goes back to 1980).\n\n## Project principles and design decisions\n\n- It should be easy to swap out individual components of the optimisation process\n  with the user's proprietary improvements.\n- Usability is everything: it is better to be self-explanatory than consistent.\n- There is no point in portfolio optimisation unless it can be practically\n  applied to real asset prices.\n- Everything that has been implemented should be tested.\n- Inline documentation is good: dedicated (separate) documentation is better.\n  The two are not mutually exclusive.\n- Formatting should never get in the way of coding: because of this,\n  I have deferred **all** formatting decisions to [Black](https://github.com/ambv/black).\n\n## Roadmap\n\nFeel free to raise an issue requesting any new features \u2013 here are some of the things I want to implement:\n\n- Optimising for higher moments (i.e skew and kurtosis)\n- Factor modelling: doable but not sure if it fits within the API.\n- Proper CVaR optimisation \u2013 remove NoisyOpt and use linear programming\n- More objective functions, including the Calmar Ratio, Sortino Ratio, etc.\n- Monte Carlo optimisation with custom distributions\n- Open-source backtests using either `Backtrader <https://www.backtrader.com/>`_ or\n  `Zipline <https://github.com/quantopian/zipline>`_.\n- Further support for different risk/return models\n\n## Testing\n\nTests are written in pytest (much more intuitive than `unittest` and the variants in my opinion), and I have tried to ensure close to 100% coverage. Run the tests by navigating to the package directory and simply running `pytest` on the command line.\n\nPyPortfolioOpt provides a test dataset of daily returns for 20 tickers:\n\n```python\n['GOOG', 'AAPL', 'FB', 'BABA', 'AMZN', 'GE', 'AMD', 'WMT', 'BAC', 'GM',\n'T', 'UAA', 'SHLD', 'XOM', 'RRC', 'BBY', 'MA', 'PFE', 'JPM', 'SBUX']\n```\n\n These tickers have been informally selected to meet several criteria:\n\n- reasonably liquid\n- different performances and volatilities\n- different amounts of data to test robustness\n\nCurrently, the tests have not explored all of the edge cases and combinations\nof objective functions and parameters. However, each method and parameter has\nbeen tested to work as intended.\n\n## Contributing\n\nContributions are *most welcome*. Have a look at the [Contribution Guide](https://github.com/robertmartin8/PyPortfolioOpt/blob/master/CONTRIBUTING.md) for more.\n\n## Getting in touch\n\nIf you would like to reach out for any reason, be it consulting opportunities or just for a chat, please do so via the [form](https://reasonabledeviations.com/about/) on my website.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/robertmartin8/PyPortfolioOpt", "keywords": "finance,portfolio,optimization,quant,investing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyportfolioopt", "package_url": "https://pypi.org/project/pyportfolioopt/", "platform": "", "project_url": "https://pypi.org/project/pyportfolioopt/", "project_urls": {"Documentation": "https://pyportfolioopt.readthedocs.io/en/latest/", "Homepage": "https://github.com/robertmartin8/PyPortfolioOpt", "Issues": "https://github.com/robertmartin8/PyPortfolioOpt/issues", "Personal website": "https://reasonabledeviations.com", "Repository": "https://github.com/robertmartin8/PyPortfolioOpt"}, "release_url": "https://pypi.org/project/pyportfolioopt/1.2.1/", "requires_dist": ["numpy", "scipy", "pandas (>=0.25.3,<0.26.0)", "cvxpy (>=1.0.28,<2.0.0)"], "requires_python": ">=3.6.0,<4.0.0", "summary": "Financial portfolio optimisation in python", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68b58f4080c3c1a5c6d3d12c8297c61f25c0b39b/68747470733a2f2f6769746875622e636f6d2f726f626572746d617274696e382f5079506f7274666f6c696f4f70742f626c6f622f6d61737465722f6d656469612f6c6f676f5f76312e706e67\" width=\"60%\">\n</p>\n\n<p align=\"center\">\n    <a href=\"https://www.python.org/\" rel=\"nofollow\">\n        <img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/263a975ee7a7ab857aa083c69106879f47280bd1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d76332d627269676874677265656e2e737667\"></a> \u00a0\n    <a href=\"https://pypi.org/project/PyPortfolioOpt/\" rel=\"nofollow\">\n        <img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f0313fab010da30b75e4de09af3bfe8db9575ee/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707970692d76312d627269676874677265656e2e737667\"></a> \u00a0\n    <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">\n        <img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28c5b39bdf2da9ce3c367dcfe49e46905cf7d242/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e737667\"></a> \u00a0\n    <a href=\"https://github.com/robertmartin8/PyPortfolioOpt/graphs/commit-activity\" rel=\"nofollow\">\n        <img alt=\"issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/324e8be75ed1fa15f3b3eff23c43cb9c1b155f1c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d61696e7461696e65642533462d7965732d627269676874677265656e2e737667\"></a> \u00a0\n    <a href=\"https://pyportfolioopt.readthedocs.io/en/latest/\" rel=\"nofollow\">\n        <img alt=\"docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0a325716db49cd1643978115d783c4048a974ac/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d70617373696e672d627269676874677265656e2e737667\"></a> \u00a0\n    <a href=\"https://travis-ci.org/robertmartin8/PyPortfolioOpt\" rel=\"nofollow\">\n        <img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60f44adca564102d9353e34df80270e8319675c8/68747470733a2f2f7472617669732d63692e6f72672f726f626572746d617274696e382f5079506f7274666f6c696f4f70742e7376673f6272616e63683d6d6173746572\"></a> \u00a0\n</p>\n\n<p>PyPortfolioOpt is a library that implements portfolio optimisation methods, including\nclassical mean-variance optimisation techniques and Black-Litterman allocation, as well as more\nrecent developments in the field like shrinkage and Hierarchical Risk Parity, along with\nsome novel experimental features like exponentially-weighted covariance matrices.</p>\n<p>It is <strong>extensive</strong> yet easily <strong>extensible</strong>, and can be useful for both the casual investor and the serious practitioner. Whether you are a fundamentals-oriented investor who has identified a\nhandful of undervalued picks, or an algorithmic trader who has a basket of\ninteresting signals, PyPortfolioOpt can help you combine your alpha streams\nin a risk-efficient way.</p>\n<p>Head over to the <a href=\"https://pyportfolioopt.readthedocs.io/en/latest/\" rel=\"nofollow\">documentation on ReadTheDocs</a> to get an in-depth look at the project, or continue below to check out some examples.</p>\n&lt;center&gt;\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40c21f7a41f989b9ad0151bada918325a4228c48/68747470733a2f2f6769746875622e636f6d2f726f626572746d617274696e382f5079506f7274666f6c696f4f70742f626c6f622f6d61737465722f6d656469612f636f6e6365707475616c5f666c6f7763686172745f76322e706e67\">\n&lt;/center&gt;\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#table-of-contents\" rel=\"nofollow\">Table of contents</a></li>\n<li><a href=\"#getting-started\" rel=\"nofollow\">Getting started</a>\n<ul>\n<li><a href=\"#for-development\" rel=\"nofollow\">For development</a></li>\n</ul>\n</li>\n<li><a href=\"#a-quick-example\" rel=\"nofollow\">A quick example</a></li>\n<li><a href=\"#whats-new\" rel=\"nofollow\">What's new</a></li>\n<li><a href=\"#an-overview-of-classical-portfolio-optimisation-methods\" rel=\"nofollow\">An overview of classical portfolio optimisation methods</a></li>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a>\n<ul>\n<li><a href=\"#expected-returns\" rel=\"nofollow\">Expected returns</a></li>\n<li><a href=\"#risk-models-covariance\" rel=\"nofollow\">Risk models (covariance)</a></li>\n<li><a href=\"#objective-functions\" rel=\"nofollow\">Objective functions</a></li>\n<li><a href=\"#adding-constraints-or-different-objectives\" rel=\"nofollow\">Adding constraints or different objectives</a></li>\n<li><a href=\"#black-litterman-allocation\" rel=\"nofollow\">Black-Litterman allocation</a></li>\n<li><a href=\"#other-optimisers\" rel=\"nofollow\">Other optimisers</a></li>\n</ul>\n</li>\n<li><a href=\"#advantages-over-existing-implementations\" rel=\"nofollow\">Advantages over existing implementations</a></li>\n<li><a href=\"#project-principles-and-design-decisions\" rel=\"nofollow\">Project principles and design decisions</a></li>\n<li><a href=\"#roadmap\" rel=\"nofollow\">Roadmap</a></li>\n<li><a href=\"#testing\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#getting-in-touch\" rel=\"nofollow\">Getting in touch</a></li>\n</ul>\n<h2>Getting started</h2>\n<p><em>Note: if you are on windows, you first need to installl C++. (<a href=\"https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;rel=16\" rel=\"nofollow\">download</a>, <a href=\"https://drive.google.com/file/d/0B4GsMXCRaSSIOWpYQkstajlYZ0tPVkNQSElmTWh1dXFaYkJr/view\" rel=\"nofollow\">install instructions</a></em></p>\n<p>This project is available on PyPI, meaning that you can just:</p>\n<pre>pip install PyPortfolioOpt\n</pre>\n<p>However, it is best practice to use a dependency manager within a virtual environment.\nMy current recommendation is to get yourself set up with <a href=\"https://github.com/sdispater/poetry\" rel=\"nofollow\">poetry</a> then just run</p>\n<pre>poetry add PyPortfolioOpt\n</pre>\n<p>Otherwise, clone/download the project and in the project directory run:</p>\n<pre>python setup.py install\n</pre>\n<p>Thanks to Thomas Schmelzer, PyPortfolioOpt now supports Docker (requires <strong>make</strong>, <strong>docker</strong>, <strong>docker-compose</strong>). Build your first container with <code>make build</code>; run tests with <code>make test</code>. For more information, please read <a href=\"https://docker-curriculum.com/#introduction\" rel=\"nofollow\">this guide</a>.</p>\n<h3>For development</h3>\n<p>If you would like to make major changes to integrate this with your proprietary system, it probably makes sense to clone this repository and to just use the source code.</p>\n<pre>git clone https://github.com/robertmartin8/PyPortfolioOpt\n</pre>\n<p>Alternatively, you could try:</p>\n<pre>pip install -e git+https://github.com/robertmartin8/PyPortfolioOpt.git\n</pre>\n<h2>A quick example</h2>\n<p>Here is an example on real life stock data, demonstrating how easy it is to find the long-only portfolio that maximises the Sharpe ratio (a measure of risk-adjusted returns).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pypfopt</span> <span class=\"kn\">import</span> <span class=\"n\">EfficientFrontier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pypfopt</span> <span class=\"kn\">import</span> <span class=\"n\">risk_models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pypfopt</span> <span class=\"kn\">import</span> <span class=\"n\">expected_returns</span>\n\n<span class=\"c1\"># Read in price data</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"tests/resources/stock_prices.csv\"</span><span class=\"p\">,</span> <span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"s2\">\"date\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate expected returns and sample covariance</span>\n<span class=\"n\">mu</span> <span class=\"o\">=</span> <span class=\"n\">expected_returns</span><span class=\"o\">.</span><span class=\"n\">mean_historical_return</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">risk_models</span><span class=\"o\">.</span><span class=\"n\">sample_cov</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Optimise for maximal Sharpe ratio</span>\n<span class=\"n\">ef</span> <span class=\"o\">=</span> <span class=\"n\">EfficientFrontier</span><span class=\"p\">(</span><span class=\"n\">mu</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">)</span>\n<span class=\"n\">raw_weights</span> <span class=\"o\">=</span> <span class=\"n\">ef</span><span class=\"o\">.</span><span class=\"n\">max_sharpe</span><span class=\"p\">()</span>\n<span class=\"n\">cleaned_weights</span> <span class=\"o\">=</span> <span class=\"n\">ef</span><span class=\"o\">.</span><span class=\"n\">clean_weights</span><span class=\"p\">()</span>\n<span class=\"n\">ef</span><span class=\"o\">.</span><span class=\"n\">save_weights_to_file</span><span class=\"p\">(</span><span class=\"s2\">\"weights.csv\"</span><span class=\"p\">)</span>  <span class=\"c1\"># saves to file</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cleaned_weights</span><span class=\"p\">)</span>\n<span class=\"n\">ef</span><span class=\"o\">.</span><span class=\"n\">portfolio_performance</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>This outputs the following weights:</p>\n<pre>{'GOOG': 0.01269,\n 'AAPL': 0.09202,\n 'FB': 0.19856,\n 'BABA': 0.09642,\n 'AMZN': 0.07158,\n 'GE': 0.0,\n 'AMD': 0.0,\n 'WMT': 0.0,\n 'BAC': 0.0,\n 'GM': 0.0,\n 'T': 0.0,\n 'UAA': 0.0,\n 'SHLD': 0.0,\n 'XOM': 0.0,\n 'RRC': 0.0,\n 'BBY': 0.06129,\n 'MA': 0.24562,\n 'PFE': 0.18413,\n 'JPM': 0.0,\n 'SBUX': 0.03769}\n\nExpected annual return: 33.0%\nAnnual volatility: 21.7%\nSharpe Ratio: 1.43\n</pre>\n<p>This is interesting but not useful in itself. However, PyPortfolioOpt provides a method which allows you to convert the above continuous weights to an actual allocation that you could buy. Just enter the most recent prices, and the desired portfolio size ($10,000 in this example):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pypfopt.discrete_allocation</span> <span class=\"kn\">import</span> <span class=\"n\">DiscreteAllocation</span><span class=\"p\">,</span> <span class=\"n\">get_latest_prices</span>\n\n\n<span class=\"n\">latest_prices</span> <span class=\"o\">=</span> <span class=\"n\">get_latest_prices</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"n\">da</span> <span class=\"o\">=</span> <span class=\"n\">DiscreteAllocation</span><span class=\"p\">(</span><span class=\"n\">weights</span><span class=\"p\">,</span> <span class=\"n\">latest_prices</span><span class=\"p\">,</span> <span class=\"n\">total_portfolio_value</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"n\">allocation</span><span class=\"p\">,</span> <span class=\"n\">leftover</span> <span class=\"o\">=</span> <span class=\"n\">da</span><span class=\"o\">.</span><span class=\"n\">lp_portfolio</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Discrete allocation:\"</span><span class=\"p\">,</span> <span class=\"n\">allocation</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Funds remaining: $</span><span class=\"si\">{:.2f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">leftover</span><span class=\"p\">))</span>\n</pre>\n<pre>11 out of 20 tickers were removed\nDiscrete allocation: {'GOOG': 0, 'AAPL': 5, 'FB': 11, 'BABA': 5, 'AMZN': 1,\n                      'BBY': 7, 'MA': 14, 'PFE': 50, 'SBUX': 5}\nFunds remaining: $8.42\n</pre>\n<p><em>Disclaimer: nothing about this project constitues investment advice, and the author bears no responsibiltiy for your subsequent investment decisions. Please refer to the <a href=\"https://github.com/robertmartin8/PyPortfolioOpt/blob/master/LICENSE.txt\" rel=\"nofollow\">license</a> for more information.</em></p>\n<h2>What's new</h2>\n<p>As of v1.2.0:</p>\n<ul>\n<li>Docker support</li>\n<li>Idzorek's method for specifying Black-Litterman views using percentage confidences.</li>\n<li>Industry constraints: limit your sector exposure.</li>\n<li>Multiple additions and improvements to <code>risk_models</code>:\n<ul>\n<li>Introduced a new API, in which the function <code>risk_models.risk_matrix(method=\"...\")</code> allows\nall the different risk models to be called. This should make testing easier.</li>\n<li>All methods now accept returns data instead of prices, if you set the flag <code>returns_data=True</code>.</li>\n</ul>\n</li>\n<li>Automatically fix non-positive semidefinite covariance matrices!</li>\n<li>Additions and improvements to <code>expected_returns</code>:\n<ul>\n<li>Introduced a new API, in which the function <code>expected_returns.return_model(method=\"...\")</code> allows\nall the different return models to be called. This should make testing easier.</li>\n<li>Added option to 'properly' compound returns.</li>\n<li>James-Stein shrinkage estimator</li>\n<li>CAPM return model.</li>\n</ul>\n</li>\n<li><code>from pypfopt import Plotting</code>: moved all plotting functionality into a new class and added\nnew plots. All other plotting functions (scattered in different classes) have been retained,\nbut are now deprecated.</li>\n</ul>\n<h2>An overview of classical portfolio optimisation methods</h2>\n<p>Harry Markowitz's 1952 paper is the undeniable classic, which turned portfolio optimisation from an art into a science. The key insight is that by combining assets with different expected returns and volatilities, one can decide on a mathematically optimal allocation which minimises the risk for a target return \u2013 the set of all such optimal portfolios is referred to as the <strong>efficient frontier</strong>.</p>\n&lt;center&gt;\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b563eead97ffecb95e1aed10c1128c6eca0e8df/68747470733a2f2f6769746875622e636f6d2f726f626572746d617274696e382f5079506f7274666f6c696f4f70742f626c6f622f6d61737465722f6d656469612f656666696369656e745f66726f6e746965725f77686974652e706e67\">\n&lt;/center&gt;\n<p>Although much development has been made in the subject, more than half a century later, Markowitz's core ideas are still fundamentally important and see daily use in many portfolio management firms.\nThe main drawback of mean-variance optimisation is that the theoretical treatment requires knowledge of the expected returns and the future risk-characteristics (covariance) of the assets. Obviously, if we knew the expected returns of a stock life would be much easier, but the whole game is that stock returns are notoriously hard to forecast. As a substitute, we can derive estimates of the expected return and covariance based on historical data \u2013 though we do lose the theoretical guarantees provided by Markowitz, the closer our estimates are to the real values, the better our portfolio will be.</p>\n<p>Thus this project provides four major sets of functionality (though of course they are intimately related)</p>\n<ul>\n<li>Estimates of expected returns</li>\n<li>Estimates of risk (i.e covariance of asset returns)</li>\n<li>Objective functions to be optimised</li>\n<li>Optimisers.</li>\n</ul>\n<p>A key design goal of PyPortfolioOpt is <strong>modularity</strong> \u2013 the user should be able to swap in their\ncomponents while still making use of the framework that PyPortfolioOpt provides.</p>\n<h2>Features</h2>\n<p>In this section, we detail PyPortfolioOpt's current available functionality as per the above breakdown. More examples are offered in <code>examples.py</code>, but in my opinion the best resource\nto understand PyPortfolioOpt is the <a href=\"https://github.com/robertmartin8/PyPortfolioOpt/tree/master/tests\" rel=\"nofollow\">tests</a>.</p>\n<p>A far more comprehensive version of this can be found on <a href=\"https://pyportfolioopt.readthedocs.io/en/latest/\" rel=\"nofollow\">ReadTheDocs</a>, as well as possible extensions for more advanced users.</p>\n<h3>Expected returns</h3>\n<ul>\n<li>Mean historical returns:\n<ul>\n<li>the simplest and most common approach, which states that the expected return of each asset is equal to the mean of its historical returns.</li>\n<li>easily interpretable and very intuitive</li>\n</ul>\n</li>\n<li>Exponentially weighted mean historical returns:\n<ul>\n<li>similar to mean historical returns, except it gives exponentially more weight to recent prices</li>\n<li>it is likely the case that an asset's most recent returns hold more weight than returns from 10 years ago when it comes to estimating future returns.</li>\n</ul>\n</li>\n<li>James-Stein shrinkage:\n<ul>\n<li>a slightly more robust estimate of future returns</li>\n<li>by shrinking mean returns to the grand average, we can reduce loss.</li>\n</ul>\n</li>\n<li>Capital Asset Pricing Model (CAPM):\n<ul>\n<li>a simple model to predict returns based on the beta to the market</li>\n<li>this is used all over finance!</li>\n</ul>\n</li>\n</ul>\n<h3>Risk models (covariance)</h3>\n<p>The covariance matrix encodes not just the volatility of an asset, but also how it correlated to other assets. This is important because in order to reap the benefits of diversification (and thus increase return per unit risk), the assets in the portfolio should be as uncorrelated as possible.</p>\n<ul>\n<li>Sample covariance matrix:\n<ul>\n<li>an unbiased estimate of the covariance matrix</li>\n<li>relatively easy to compute</li>\n<li>the de facto standard for many years</li>\n<li>however, it has a high estimation error, which is particularly dangerous in mean-variance optimisation because the optimiser is likely to give excess weight to these erroneous estimates.</li>\n</ul>\n</li>\n<li>Semicovariance: a measure of risk that focuses on downside variation.</li>\n<li>Exponential covariance: an improvement over sample covariance that gives more weight to recent data</li>\n<li>Covariance shrinkage: techniques that involve combining the sample covariance matrix with a structured estimator, to reduce the effect of erroneous weights. PyPortfolioOpt provides wrappers around the efficient vectorised implementations provided by <code>sklearn.covariance</code>.\n<ul>\n<li>manual shrinkage</li>\n<li>Ledoit Wolf shrinkage, which chooses an optimal shrinkage parameter. We offer three shrinkage targets: <code>constant_variance</code>, <code>single_factor</code>, and <code>constant_correlation</code>.</li>\n<li>Oracle Approximating Shrinkage</li>\n</ul>\n</li>\n<li>Minimum Covariance Determinant:\n<ul>\n<li>a robust estimate of the covariance</li>\n<li>implemented in <code>sklearn.covariance</code></li>\n</ul>\n</li>\n</ul>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ebaff8c214a86e509d198755b7794e6fcf80be1/68747470733a2f2f6769746875622e636f6d2f726f626572746d617274696e382f5079506f7274666f6c696f4f70742f626c6f622f6d61737465722f6d656469612f636f7272706c6f745f77686974652e706e67\" width=\"60%\">\n</p>\n<p>(This plot was generated using <code>Plotting.plot_covariance</code>)</p>\n<h3>Objective functions</h3>\n<ul>\n<li>Maximum Sharpe ratio: this results in a <em>tangency portfolio</em> because on a graph of returns vs risk, this portfolio corresponds to the tangent of the efficient frontier that has a y-intercept equal to the risk-free rate. This is the default option because it finds the optimal return per unit risk.</li>\n<li>Minimum volatility. This may be useful if you're trying to get an idea of how low the volatility <em>could</em> be, but in practice it makes a lot more sense to me to use the portfolio that maximises the Sharpe ratio.</li>\n<li>Efficient return, a.k.a. the Markowitz portfolio, which minimises risk for a given target return \u2013 this was the main focus of Markowitz 1952</li>\n<li>Efficient risk: the Sharpe-maximising portfolio for a given target risk.</li>\n<li>Maximum quadratic utility. You can provide your own risk-aversion level and compute the appropriate portfolio.</li>\n</ul>\n<h3>Adding constraints or different objectives</h3>\n<ul>\n<li>Long/short: by default all of the mean-variance optimisation methods in PyPortfolioOpt are long-only, but they can be initialised to allow for short positions by changing the weight bounds:</li>\n</ul>\n<pre><span class=\"n\">ef</span> <span class=\"o\">=</span> <span class=\"n\">EfficientFrontier</span><span class=\"p\">(</span><span class=\"n\">mu</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">weight_bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre>\n<ul>\n<li>Market neutrality: for the <code>efficient_risk</code> and <code>efficient_return</code> methods, PyPortfolioOpt provides an option to form a market-neutral portfolio (i.e weights sum to zero). This is not possible for the max Sharpe portfolio and the min volatility portfolio because in those cases because they are not invariant with respect to leverage. Market neutrality requires negative weights:</li>\n</ul>\n<pre><span class=\"n\">ef</span> <span class=\"o\">=</span> <span class=\"n\">EfficientFrontier</span><span class=\"p\">(</span><span class=\"n\">mu</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">weight_bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">ef</span><span class=\"o\">.</span><span class=\"n\">efficient_return</span><span class=\"p\">(</span><span class=\"n\">target_return</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">market_neutral</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Minimum/maximum position size: it may be the case that you want no security to form more than 10% of your portfolio. This is easy to encode:</li>\n</ul>\n<pre><span class=\"n\">ef</span> <span class=\"o\">=</span> <span class=\"n\">EfficientFrontier</span><span class=\"p\">(</span><span class=\"n\">mu</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">weight_bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">))</span>\n</pre>\n<p>One issue with mean-variance optimisation is that it leads to many zero-weights. While these are\n\"optimal\" in-sample, there is a large body of research showing that this characteristic leads\nmean-variance portfolios to underperform out-of-sample. To that end, I have introduced an\nobjective function that can reduce the number of negligible weights for any of the objective functions. Essentially, it adds a penalty (parameterised by <code>gamma</code>) on small weights, with a term that looks just like L2 regularisation in machine learning. It may be necessary to try several <code>gamma</code> values to achieve the desired number of non-negligible weights. For the test portfolio of 20 securities, <code>gamma ~ 1</code> is sufficient</p>\n<pre><span class=\"n\">ef</span> <span class=\"o\">=</span> <span class=\"n\">EfficientFrontier</span><span class=\"p\">(</span><span class=\"n\">mu</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">)</span>\n<span class=\"n\">ef</span><span class=\"o\">.</span><span class=\"n\">add_objective</span><span class=\"p\">(</span><span class=\"n\">objective_functions</span><span class=\"o\">.</span><span class=\"n\">L2_reg</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ef</span><span class=\"o\">.</span><span class=\"n\">max_sharpe</span><span class=\"p\">()</span>\n</pre>\n<h3>Black-Litterman allocation</h3>\n<p>As of v0.5.0, we now support Black-Litterman asset allocation, which allows you to combine\na prior estimate of returns (e.g the market-implied returns) with your own views to form a\nposterior estimate. This results in much better estimates of expected returns than just using\nthe mean historical return. Check out the <a href=\"https://pyportfolioopt.readthedocs.io/en/latest/BlackLitterman.html\" rel=\"nofollow\">docs</a> for a discussion of the theory, as well as advice\non formatting inputs.</p>\n<pre><span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">risk_models</span><span class=\"o\">.</span><span class=\"n\">sample_cov</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"n\">viewdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"AAPL\"</span><span class=\"p\">:</span> <span class=\"mf\">0.20</span><span class=\"p\">,</span> <span class=\"s2\">\"BBY\"</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.30</span><span class=\"p\">,</span> <span class=\"s2\">\"BAC\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"SBUX\"</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"s2\">\"T\"</span><span class=\"p\">:</span> <span class=\"mf\">0.131321</span><span class=\"p\">}</span>\n<span class=\"n\">bl</span> <span class=\"o\">=</span> <span class=\"n\">BlackLittermanModel</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">absolute_views</span><span class=\"o\">=</span><span class=\"n\">viewdict</span><span class=\"p\">)</span>\n<span class=\"n\">rets</span> <span class=\"o\">=</span> <span class=\"n\">bl</span><span class=\"o\">.</span><span class=\"n\">bl_returns</span><span class=\"p\">()</span>\n\n<span class=\"n\">ef</span> <span class=\"o\">=</span> <span class=\"n\">EfficientFrontier</span><span class=\"p\">(</span><span class=\"n\">rets</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">)</span>\n<span class=\"n\">ef</span><span class=\"o\">.</span><span class=\"n\">max_sharpe</span><span class=\"p\">()</span>\n</pre>\n<h3>Other optimisers</h3>\n<p>The features above mostly pertain to solving efficient frontier optimisation problems via quadratic programming (though this is taken care of by <code>cvxpy</code>). However, we offer different optimisers as well:</p>\n<ul>\n<li>Hierarchical Risk Parity, using clustering algorithms to choose uncorrelated assets</li>\n<li>Markowitz's critical line algorithm (CLA)</li>\n</ul>\n<p>Please refer to the <a href=\"https://pyportfolioopt.readthedocs.io/en/latest/OtherOptimisers.html\" rel=\"nofollow\">documentation</a> for more.</p>\n<h2>Advantages over existing implementations</h2>\n<ul>\n<li>Includes both classical methods (Markowitz 1952 and Black-Litterman), suggested best practices\n(e.g covariance shrinkage), along with many recent developments and novel\nfeatures, like L2 regularisation, shrunk covariance, hierarchical risk parity.</li>\n<li>Native support for pandas dataframes: easily input your daily prices data.</li>\n<li>Extensive practical tests, which use real-life data.</li>\n<li>Easy to combine with your proprietary strategies and models.</li>\n<li>Robust to missing data, and price-series of different lengths (e.g FB data\nonly goes back to 2012 whereas AAPL data goes back to 1980).</li>\n</ul>\n<h2>Project principles and design decisions</h2>\n<ul>\n<li>It should be easy to swap out individual components of the optimisation process\nwith the user's proprietary improvements.</li>\n<li>Usability is everything: it is better to be self-explanatory than consistent.</li>\n<li>There is no point in portfolio optimisation unless it can be practically\napplied to real asset prices.</li>\n<li>Everything that has been implemented should be tested.</li>\n<li>Inline documentation is good: dedicated (separate) documentation is better.\nThe two are not mutually exclusive.</li>\n<li>Formatting should never get in the way of coding: because of this,\nI have deferred <strong>all</strong> formatting decisions to <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">Black</a>.</li>\n</ul>\n<h2>Roadmap</h2>\n<p>Feel free to raise an issue requesting any new features \u2013 here are some of the things I want to implement:</p>\n<ul>\n<li>Optimising for higher moments (i.e skew and kurtosis)</li>\n<li>Factor modelling: doable but not sure if it fits within the API.</li>\n<li>Proper CVaR optimisation \u2013 remove NoisyOpt and use linear programming</li>\n<li>More objective functions, including the Calmar Ratio, Sortino Ratio, etc.</li>\n<li>Monte Carlo optimisation with custom distributions</li>\n<li>Open-source backtests using either <code>Backtrader &lt;https://www.backtrader.com/&gt;</code>_ or\n<code>Zipline &lt;https://github.com/quantopian/zipline&gt;</code>_.</li>\n<li>Further support for different risk/return models</li>\n</ul>\n<h2>Testing</h2>\n<p>Tests are written in pytest (much more intuitive than <code>unittest</code> and the variants in my opinion), and I have tried to ensure close to 100% coverage. Run the tests by navigating to the package directory and simply running <code>pytest</code> on the command line.</p>\n<p>PyPortfolioOpt provides a test dataset of daily returns for 20 tickers:</p>\n<pre><span class=\"p\">[</span><span class=\"s1\">'GOOG'</span><span class=\"p\">,</span> <span class=\"s1\">'AAPL'</span><span class=\"p\">,</span> <span class=\"s1\">'FB'</span><span class=\"p\">,</span> <span class=\"s1\">'BABA'</span><span class=\"p\">,</span> <span class=\"s1\">'AMZN'</span><span class=\"p\">,</span> <span class=\"s1\">'GE'</span><span class=\"p\">,</span> <span class=\"s1\">'AMD'</span><span class=\"p\">,</span> <span class=\"s1\">'WMT'</span><span class=\"p\">,</span> <span class=\"s1\">'BAC'</span><span class=\"p\">,</span> <span class=\"s1\">'GM'</span><span class=\"p\">,</span>\n<span class=\"s1\">'T'</span><span class=\"p\">,</span> <span class=\"s1\">'UAA'</span><span class=\"p\">,</span> <span class=\"s1\">'SHLD'</span><span class=\"p\">,</span> <span class=\"s1\">'XOM'</span><span class=\"p\">,</span> <span class=\"s1\">'RRC'</span><span class=\"p\">,</span> <span class=\"s1\">'BBY'</span><span class=\"p\">,</span> <span class=\"s1\">'MA'</span><span class=\"p\">,</span> <span class=\"s1\">'PFE'</span><span class=\"p\">,</span> <span class=\"s1\">'JPM'</span><span class=\"p\">,</span> <span class=\"s1\">'SBUX'</span><span class=\"p\">]</span>\n</pre>\n<p>These tickers have been informally selected to meet several criteria:</p>\n<ul>\n<li>reasonably liquid</li>\n<li>different performances and volatilities</li>\n<li>different amounts of data to test robustness</li>\n</ul>\n<p>Currently, the tests have not explored all of the edge cases and combinations\nof objective functions and parameters. However, each method and parameter has\nbeen tested to work as intended.</p>\n<h2>Contributing</h2>\n<p>Contributions are <em>most welcome</em>. Have a look at the <a href=\"https://github.com/robertmartin8/PyPortfolioOpt/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">Contribution Guide</a> for more.</p>\n<h2>Getting in touch</h2>\n<p>If you would like to reach out for any reason, be it consulting opportunities or just for a chat, please do so via the <a href=\"https://reasonabledeviations.com/about/\" rel=\"nofollow\">form</a> on my website.</p>\n\n          </div>"}, "last_serial": 7124752, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "04a4923dc372c91fc4be128943a188ec", "sha256": "d0af4391bcb517c5379a5c7b98e66607ab9576ee5e8fdb2dcc995b04c03a79ea"}, "downloads": -1, "filename": "PyPortfolioOpt-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "04a4923dc372c91fc4be128943a188ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 16707, "upload_time": "2018-06-11T01:05:21", "upload_time_iso_8601": "2018-06-11T01:05:21.953159Z", "url": "https://files.pythonhosted.org/packages/59/96/228868bcb78b87c7ab85ce3ae639baa99ac12d81ff23dcd550c37693b50c/PyPortfolioOpt-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34106eb34076bf0075c670497bcfa348", "sha256": "dfb4e0cbbff7dd1b7f751ad49d8f1c0c0164f26e9c2e7dbaecccb83bdc6af820"}, "downloads": -1, "filename": "PyPortfolioOpt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "34106eb34076bf0075c670497bcfa348", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 20535, "upload_time": "2018-06-11T01:05:24", "upload_time_iso_8601": "2018-06-11T01:05:24.733662Z", "url": "https://files.pythonhosted.org/packages/4a/2f/2cdf4cf6ab5baa69a2710e63a43f0fbaf538b3e9198db0cc53fad9c1a401/PyPortfolioOpt-0.1.0.tar.gz", "yanked": false}], "0.1.0rc1": [{"comment_text": "", "digests": {"md5": "65fc97374afa704905bd70cad1568417", "sha256": "e2e2a767eb51f385a3b00780480538209fed0535212740c38161c079c3799599"}, "downloads": -1, "filename": "PyPortfolioOpt-0.1.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "65fc97374afa704905bd70cad1568417", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 16734, "upload_time": "2018-06-10T03:06:27", "upload_time_iso_8601": "2018-06-10T03:06:27.967124Z", "url": "https://files.pythonhosted.org/packages/c3/ea/0d18eb0f15eb1d66ce0d27f3d71267114630842c52e2f13c0a7223d6f3d1/PyPortfolioOpt-0.1.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0cb621078b9f5bf8c7da3fc25db36e1a", "sha256": "bec50c2384bc8f3252f436a510aaf05a1fb56eec03cd561125304854ef2fbdcb"}, "downloads": -1, "filename": "PyPortfolioOpt-0.1.0rc1.tar.gz", "has_sig": false, "md5_digest": "0cb621078b9f5bf8c7da3fc25db36e1a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 20392, "upload_time": "2018-06-10T03:06:29", "upload_time_iso_8601": "2018-06-10T03:06:29.749375Z", "url": "https://files.pythonhosted.org/packages/1e/44/1cf3e6a5f7da4eb7f0c7714429678eb7d72f00a05d9c6b6d91aa174e5d71/PyPortfolioOpt-0.1.0rc1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5c26b56db8a429b856eb0618d656aaa1", "sha256": "7d04b105e0e510a543d6cdb095e1fc59c307ccf9af930d0a798a3ddd7de1db3c"}, "downloads": -1, "filename": "PyPortfolioOpt-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c26b56db8a429b856eb0618d656aaa1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 16695, "upload_time": "2018-06-11T01:10:45", "upload_time_iso_8601": "2018-06-11T01:10:45.342565Z", "url": "https://files.pythonhosted.org/packages/12/37/356bfe9386ee14fe26b6696d94867fc34ed897f62260ccb1ca333684f4df/PyPortfolioOpt-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af6b45fb5030a385df357588721f2288", "sha256": "31a5a098cb6badde5538d2f21e8e88214d1eb28e575e282572a8b4d4c0925f37"}, "downloads": -1, "filename": "PyPortfolioOpt-0.1.1.tar.gz", "has_sig": false, "md5_digest": "af6b45fb5030a385df357588721f2288", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 20507, "upload_time": "2018-06-11T01:10:47", "upload_time_iso_8601": "2018-06-11T01:10:47.258923Z", "url": "https://files.pythonhosted.org/packages/c0/68/569f90efb3d1f204acfe2649e61c44b072f04e5d3c6ec32dae400ef22b93/PyPortfolioOpt-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b5caa60f8649ca50ebbe51d3e703492d", "sha256": "76e8b025c0c2773e562d524fd80de2e7bbcae63b7b6cdd70fe91b299ff69fd26"}, "downloads": -1, "filename": "PyPortfolioOpt-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b5caa60f8649ca50ebbe51d3e703492d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21638, "upload_time": "2018-09-23T13:28:40", "upload_time_iso_8601": "2018-09-23T13:28:40.714551Z", "url": "https://files.pythonhosted.org/packages/12/d4/6d616ceb238c16d863d84cb24a45d76914242a21d09b32bd9ce785f06b78/PyPortfolioOpt-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9cf9eb57883efcb59a8b574d3da1cdf", "sha256": "1597850dec8ac69dff46493f56b0f9ec03855adace4ea263b435f2c1ceac569d"}, "downloads": -1, "filename": "PyPortfolioOpt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a9cf9eb57883efcb59a8b574d3da1cdf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24364, "upload_time": "2018-09-23T13:28:42", "upload_time_iso_8601": "2018-09-23T13:28:42.713072Z", "url": "https://files.pythonhosted.org/packages/c5/74/61b4db2bc3df24984cb45e49990a009be7f7cc0364e8966a2bfde47633c7/PyPortfolioOpt-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "0a7f9f3d811d499dff086eaa96c4395f", "sha256": "7129203301998463c122fd120fbd637e24b3a718378d86adbb5283b370322236"}, "downloads": -1, "filename": "PyPortfolioOpt-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0a7f9f3d811d499dff086eaa96c4395f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 28127, "upload_time": "2019-03-20T21:18:12", "upload_time_iso_8601": "2019-03-20T21:18:12.407917Z", "url": "https://files.pythonhosted.org/packages/7f/90/3a1318836cc1ad03283feef4ebb9d62378f44d031591a49ad26edd8ce5bc/PyPortfolioOpt-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a20f52c1a20418520eca0faf33e37521", "sha256": "47d80f948dc8b8fff7d33ee6f17c63e94471c858bee26f64317f8807046b86f1"}, "downloads": -1, "filename": "PyPortfolioOpt-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a20f52c1a20418520eca0faf33e37521", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24969, "upload_time": "2019-03-20T21:18:14", "upload_time_iso_8601": "2019-03-20T21:18:14.014788Z", "url": "https://files.pythonhosted.org/packages/4f/c5/b881cb950b8d8bb4bce0ec91536378e53edbafada8ac7840caa26e3bdc7f/PyPortfolioOpt-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "3494a860ab83b65cfdccbf9cf9161710", "sha256": "7e43371a56b37eeaae3b8a13260d45382ffd09a3dfbb83df667a8de3c1aa00a0"}, "downloads": -1, "filename": "PyPortfolioOpt-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3494a860ab83b65cfdccbf9cf9161710", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 29295, "upload_time": "2019-03-26T20:42:03", "upload_time_iso_8601": "2019-03-26T20:42:03.815854Z", "url": "https://files.pythonhosted.org/packages/c2/61/cd9387559625208f7915665d3cf05343bf1c36a2710c2ca789af08350f47/PyPortfolioOpt-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "523ce01026a27ab7979e6721306e8615", "sha256": "63220f18560ac3f349354e49c7117c6664bf5513faf1042d8e19487998dde637"}, "downloads": -1, "filename": "PyPortfolioOpt-0.3.1.tar.gz", "has_sig": false, "md5_digest": "523ce01026a27ab7979e6721306e8615", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 26172, "upload_time": "2019-03-26T20:42:05", "upload_time_iso_8601": "2019-03-26T20:42:05.545121Z", "url": "https://files.pythonhosted.org/packages/26/75/b853db7ec7966f98f0ff2e06b254be6f82e877a216049044dde78d81c453/PyPortfolioOpt-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "94ab105cf99bf91b24b289bad2837cfd", "sha256": "d838f863b33c1c2b01a951fccd2ee8a00810b8f4da64e2218320856399300720"}, "downloads": -1, "filename": "PyPortfolioOpt-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "94ab105cf99bf91b24b289bad2837cfd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 28914, "upload_time": "2019-06-29T05:27:17", "upload_time_iso_8601": "2019-06-29T05:27:17.899774Z", "url": "https://files.pythonhosted.org/packages/cd/be/7c1cd349c9b209dfeeeee38c6eb4572d59c3d308e83b2131628b293edfb1/PyPortfolioOpt-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a762e275462a641882b1f4ca91898e16", "sha256": "ca0437afca4bdec9cfc8f5847e095fd0c775d5f18ade2682df8ecf3824e0489a"}, "downloads": -1, "filename": "PyPortfolioOpt-0.3.2.tar.gz", "has_sig": false, "md5_digest": "a762e275462a641882b1f4ca91898e16", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 30278, "upload_time": "2019-06-29T05:27:20", "upload_time_iso_8601": "2019-06-29T05:27:20.305164Z", "url": "https://files.pythonhosted.org/packages/10/f0/94a8296b045f642caa749bc105c8f39dceb32339dc5982230aa80f7f5dea/PyPortfolioOpt-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "473da63c7995d7c5ee846a63b20ad331", "sha256": "f991e14f969b91459972387273bf5e6ac6c939bcda83da43ce6bb02dd306441f"}, "downloads": -1, "filename": "PyPortfolioOpt-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "473da63c7995d7c5ee846a63b20ad331", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 28535, "upload_time": "2019-06-29T05:51:53", "upload_time_iso_8601": "2019-06-29T05:51:53.684008Z", "url": "https://files.pythonhosted.org/packages/a9/1c/905c912bda46c6c9408c46b3dddb1f52192803cdc571d4d8fe8a5ae0064d/PyPortfolioOpt-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7ff9ab6bbfb5e8ebf33057a64138f2e", "sha256": "4dea61661277588016e36468308f5fbbd907e6a4c32c44240bf6a13a1ff48754"}, "downloads": -1, "filename": "PyPortfolioOpt-0.3.3.tar.gz", "has_sig": false, "md5_digest": "b7ff9ab6bbfb5e8ebf33057a64138f2e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 29370, "upload_time": "2019-06-29T05:51:55", "upload_time_iso_8601": "2019-06-29T05:51:55.734603Z", "url": "https://files.pythonhosted.org/packages/51/a8/5c18c18976d0905183e5e5eaee46eb2977943279434214f06e58a23c4429/PyPortfolioOpt-0.3.3.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f13bb6aac0af64745aa9181510dd3ad9", "sha256": "66b39e6c79fad831caf1679895253e852c9281c5d0e4ee45a9e60c66d0372686"}, "downloads": -1, "filename": "PyPortfolioOpt-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f13bb6aac0af64745aa9181510dd3ad9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 25630, "upload_time": "2019-07-03T06:01:48", "upload_time_iso_8601": "2019-07-03T06:01:48.970773Z", "url": "https://files.pythonhosted.org/packages/b0/87/121a0406e0de9f53a1c289dd46e7992c45f38fbc5a165d83aff0ec82001d/PyPortfolioOpt-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00d5767c85954a05502674221dcb9bd7", "sha256": "eb6c45f5480a73c30423d8673edc04941a8a1a308c2af072a334f88c7674213b"}, "downloads": -1, "filename": "PyPortfolioOpt-0.4.0.tar.gz", "has_sig": false, "md5_digest": "00d5767c85954a05502674221dcb9bd7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 27805, "upload_time": "2019-07-03T06:01:51", "upload_time_iso_8601": "2019-07-03T06:01:51.290552Z", "url": "https://files.pythonhosted.org/packages/d6/48/12da37e09a4261368529b4c9cb47b087a5994d0c5691a0954016a6386b22/PyPortfolioOpt-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "043c28836a28227f9af85ed88a8ccd2b", "sha256": "e6166825fe46aba5e51f5f203e7847a4495773a30ea55e2f17d3585e7b54b4ab"}, "downloads": -1, "filename": "PyPortfolioOpt-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "043c28836a28227f9af85ed88a8ccd2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 29832, "upload_time": "2019-07-11T03:06:13", "upload_time_iso_8601": "2019-07-11T03:06:13.326370Z", "url": "https://files.pythonhosted.org/packages/eb/ce/6026d60c74296da5eebf1b210f0b292a6253b7d78b4d6f1934b2b6aecf40/PyPortfolioOpt-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00077cb5e9525544468a5c99dc805182", "sha256": "226b6ba6e270672b8c8d4a3a6434b4a19579a6c5631ec7a8bdcec3c345088371"}, "downloads": -1, "filename": "PyPortfolioOpt-0.4.1.tar.gz", "has_sig": false, "md5_digest": "00077cb5e9525544468a5c99dc805182", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 31218, "upload_time": "2019-07-11T03:06:15", "upload_time_iso_8601": "2019-07-11T03:06:15.546860Z", "url": "https://files.pythonhosted.org/packages/5a/49/4ce0335727674c57870959c40d736ef80911fe41946e3de65de80a544fc6/PyPortfolioOpt-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "13cde6571ba11aa21dd3e197773fe653", "sha256": "9e96e6550e3374e6a6cd1a10a311cc8e877c37351ef502c0227251f0f91fe4d6"}, "downloads": -1, "filename": "PyPortfolioOpt-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "13cde6571ba11aa21dd3e197773fe653", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 30623, "upload_time": "2019-07-30T02:46:42", "upload_time_iso_8601": "2019-07-30T02:46:42.591497Z", "url": "https://files.pythonhosted.org/packages/03/93/0f62d25bc8e50371d47d5440ad7aaba3216abfbcac6f15e6f08d745ff774/PyPortfolioOpt-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f05a9628885357fe5bc06cddcf382e77", "sha256": "ec4fbfdbae3b610380cb1ef6d881402f2e745433f6898aee5e52225c9b07d4ad"}, "downloads": -1, "filename": "PyPortfolioOpt-0.4.2.tar.gz", "has_sig": false, "md5_digest": "f05a9628885357fe5bc06cddcf382e77", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 32057, "upload_time": "2019-07-30T02:46:44", "upload_time_iso_8601": "2019-07-30T02:46:44.442181Z", "url": "https://files.pythonhosted.org/packages/2b/92/10916b8b876099140973a2e322cc9cce8a547ddfafba5c9f6cebebbe0fb1/PyPortfolioOpt-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "fc7574cfc971d9a7dae74399cdf18dcb", "sha256": "b2d5f6a5777c48505aeef17bd8f18ff3b150950e336596eb7409bdadadf52046"}, "downloads": -1, "filename": "PyPortfolioOpt-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fc7574cfc971d9a7dae74399cdf18dcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 30672, "upload_time": "2019-08-11T10:02:26", "upload_time_iso_8601": "2019-08-11T10:02:26.820892Z", "url": "https://files.pythonhosted.org/packages/48/ba/08eb982ebf954de66364b5e595090a2f8c3e91dd5f21d83cbb92ca31ef67/PyPortfolioOpt-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eda3bf4a0697f1fb248f656bf95b5ca2", "sha256": "2f6183403c3b7b6f51e8b64c5853ca5c285e8ab9532adcba474e666c07fbbcac"}, "downloads": -1, "filename": "PyPortfolioOpt-0.4.3.tar.gz", "has_sig": false, "md5_digest": "eda3bf4a0697f1fb248f656bf95b5ca2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 32232, "upload_time": "2019-08-11T10:02:28", "upload_time_iso_8601": "2019-08-11T10:02:28.317649Z", "url": "https://files.pythonhosted.org/packages/17/11/c518122cc297dd653438e3c7471d7c1f97029839191d6e55789b3d247237/PyPortfolioOpt-0.4.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "633e2042f8081d4dd82a19f680b64678", "sha256": "4743f7e3be6de74f3cbb6fe0f9d9d3b4799c8c4f6234c3cd55c4c067fa558b02"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "633e2042f8081d4dd82a19f680b64678", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 37431, "upload_time": "2019-12-12T11:37:23", "upload_time_iso_8601": "2019-12-12T11:37:23.584361Z", "url": "https://files.pythonhosted.org/packages/41/df/f439f6f6a593ec6aad5fad07899a60257f7e6da1c5dcfcfb24d51437fbd8/PyPortfolioOpt-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a7c09740426721bbc7ee52197c64084", "sha256": "034801d0b35b9b94ac152291f75d91a3bbca7378ec5c8006ca1452e34c94cbc6"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.0.tar.gz", "has_sig": false, "md5_digest": "9a7c09740426721bbc7ee52197c64084", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 37839, "upload_time": "2019-12-12T11:37:25", "upload_time_iso_8601": "2019-12-12T11:37:25.715211Z", "url": "https://files.pythonhosted.org/packages/9c/8d/ffdb02e9a9f9dca50a244d35a52b8cdeb7859c86bb519b96b7f478eb3cc8/PyPortfolioOpt-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "9f7081ef4a162cf211d819e4825aee49", "sha256": "50c3da5cb1062e1eb4cc01981975af215567ad3f7e73b1e089aa0b6b5c17e802"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9f7081ef4a162cf211d819e4825aee49", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3,<4.0.0", "size": 37396, "upload_time": "2019-12-19T04:36:35", "upload_time_iso_8601": "2019-12-19T04:36:35.752103Z", "url": "https://files.pythonhosted.org/packages/e0/99/a17f85617fc96e5d01343c319ca5869408806454bb5094cb75fd0e12f299/PyPortfolioOpt-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81a31daf56243ca20cdc23434973944d", "sha256": "fc59d240b8511a704e34d6de8f6bcc1d45a53591bde3863e82f0eede02ccd8c5"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.1.tar.gz", "has_sig": false, "md5_digest": "81a31daf56243ca20cdc23434973944d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3,<4.0.0", "size": 37589, "upload_time": "2019-12-19T04:36:38", "upload_time_iso_8601": "2019-12-19T04:36:38.130332Z", "url": "https://files.pythonhosted.org/packages/ed/c8/59fdf0940ca1d3b863efb5237e1a60ba9758048c42c3ec43fbd6b7e67910/PyPortfolioOpt-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "7340ca94b8e931ed4ffddf1f2ef87df4", "sha256": "15e78c392196d29dfc6159a6eaf0d5f578b9865a7160ee00eba0a01cb6dfe23d"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7340ca94b8e931ed4ffddf1f2ef87df4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3,<4.0.0", "size": 37652, "upload_time": "2020-01-12T09:45:14", "upload_time_iso_8601": "2020-01-12T09:45:14.105794Z", "url": "https://files.pythonhosted.org/packages/01/1f/2554b802f2eb7369cee231877d68ca19f4c788aaca8b3373c232d8ecb835/PyPortfolioOpt-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61cff673e76468bf9e155099ef06fc23", "sha256": "0ff2c91da576fa269d99e3cd761eb5c66adb704b19ffea60b27ac7593e8741ea"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.2.tar.gz", "has_sig": false, "md5_digest": "61cff673e76468bf9e155099ef06fc23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3,<4.0.0", "size": 37971, "upload_time": "2020-01-12T09:45:16", "upload_time_iso_8601": "2020-01-12T09:45:16.267352Z", "url": "https://files.pythonhosted.org/packages/e2/a7/3068226d4bb4a4da8c6afe06ad202ee1998901e3e4ced02da3a76516f740/PyPortfolioOpt-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "680a6102d032550c0d875af9ee23583c", "sha256": "487dc332e2db1dd2e597c0f98513428aa206b49f09ef1c934684a353c2104c17"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "680a6102d032550c0d875af9ee23583c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3,<4.0.0", "size": 37839, "upload_time": "2020-01-21T09:30:44", "upload_time_iso_8601": "2020-01-21T09:30:44.652663Z", "url": "https://files.pythonhosted.org/packages/dc/83/274c988ef4b16221b388e0c8e91d229a35eddb6b83702a8419ed3f812e98/PyPortfolioOpt-0.5.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d92e52b34852f011f15ff46eaf405886", "sha256": "416ede074d786dbcf6cdebdd0b49a632dfb48eafa171fb8db9f6235cb93ec6e0"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.3.tar.gz", "has_sig": false, "md5_digest": "d92e52b34852f011f15ff46eaf405886", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3,<4.0.0", "size": 38186, "upload_time": "2020-01-21T09:30:46", "upload_time_iso_8601": "2020-01-21T09:30:46.177957Z", "url": "https://files.pythonhosted.org/packages/df/63/4268380d6be47db370c20568a48510362b163c6498fd83a3185281bacf44/PyPortfolioOpt-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "80c57fb154ed0478f4de49f88929b45f", "sha256": "b3a6fdecb7028770ce277a419485fd49f27d9d41d1e708977aa8416aabd9e47a"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.4-py3-none-any.whl", "has_sig": false, "md5_digest": "80c57fb154ed0478f4de49f88929b45f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 37796, "upload_time": "2020-02-25T21:28:45", "upload_time_iso_8601": "2020-02-25T21:28:45.777623Z", "url": "https://files.pythonhosted.org/packages/cd/7d/f5688c89ca2a71628630392f9da192eb05288573252c59cd380e92055f30/PyPortfolioOpt-0.5.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3be3a59daf1ee9c540b8ea93817f1a4", "sha256": "4120dcc3592c8c53dd7ebb1f4da54c8a51bc7381b274a3c419cd355ae906a513"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.4.tar.gz", "has_sig": false, "md5_digest": "c3be3a59daf1ee9c540b8ea93817f1a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 38110, "upload_time": "2020-02-25T21:28:47", "upload_time_iso_8601": "2020-02-25T21:28:47.580979Z", "url": "https://files.pythonhosted.org/packages/4c/92/b00f25a56d04535b6c0e269cbabf0f5066130fc600d8d40d1d07e6b32386/PyPortfolioOpt-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "c717bea7dc02b4f68d7ea5e5dcd2c9d8", "sha256": "4aa44136bf4e763110e14b0d3b793c2feea8e5e7f22130d50b97f7e28daef8ed"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c717bea7dc02b4f68d7ea5e5dcd2c9d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 38106, "upload_time": "2020-03-13T17:09:01", "upload_time_iso_8601": "2020-03-13T17:09:01.045307Z", "url": "https://files.pythonhosted.org/packages/29/fd/d508bd6265800baf4a8bfce38b371bfab4cc3cc2f75fa335e99aff87938e/PyPortfolioOpt-0.5.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84a6950e2da6b26415d7a29e9b7b7e7e", "sha256": "d5e7b6f71eede02a06250df1c4efb970514a511c92965ed1294af2ae3e24ebbb"}, "downloads": -1, "filename": "PyPortfolioOpt-0.5.5.tar.gz", "has_sig": false, "md5_digest": "84a6950e2da6b26415d7a29e9b7b7e7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 37857, "upload_time": "2020-03-13T17:09:02", "upload_time_iso_8601": "2020-03-13T17:09:02.924150Z", "url": "https://files.pythonhosted.org/packages/70/bd/83e57c91fff7f5538d60ac626ec8ea7ff80fd955435bd3a6dbbeb6ad2a31/PyPortfolioOpt-0.5.5.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "d24f5ac0e862635ec1e46e03e3afa18f", "sha256": "296197032f83836195f5dc62573ce0dd958ec740beb607fbfa23e0171e02df88"}, "downloads": -1, "filename": "PyPortfolioOpt-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d24f5ac0e862635ec1e46e03e3afa18f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 41874, "upload_time": "2020-03-18T23:27:05", "upload_time_iso_8601": "2020-03-18T23:27:05.963390Z", "url": "https://files.pythonhosted.org/packages/22/9e/0612886b9223039c2618c3c2f1090cfeb441a44025e36f9d84cd71f7b332/PyPortfolioOpt-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56ef24c93cd058c1be7445e5a2df850f", "sha256": "6445301aa88ae1c5aea7fd19d0c02763f348c5d75e88fe66c9429b675ffca986"}, "downloads": -1, "filename": "PyPortfolioOpt-1.0.0.tar.gz", "has_sig": false, "md5_digest": "56ef24c93cd058c1be7445e5a2df850f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 42771, "upload_time": "2020-03-18T23:27:07", "upload_time_iso_8601": "2020-03-18T23:27:07.472413Z", "url": "https://files.pythonhosted.org/packages/b2/04/6ca956e947f280380cdc3025b0bb9928e0444a3000252e5d4a0a8252f847/PyPortfolioOpt-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6f9ad0c74e9dc6ba375fce803d8a78ed", "sha256": "6a09c9ef8f10be025f486e8d639b8f7f66bf15811ab1204bbda04895aa9596a0"}, "downloads": -1, "filename": "PyPortfolioOpt-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6f9ad0c74e9dc6ba375fce803d8a78ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 41897, "upload_time": "2020-03-26T02:59:11", "upload_time_iso_8601": "2020-03-26T02:59:11.590845Z", "url": "https://files.pythonhosted.org/packages/a3/0d/c38bd0f15bedec9c0cffa1aba21e25bb09f4e31078133216d87d6ed89dd7/PyPortfolioOpt-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25f489ba19312afa161a6a2023b3ef59", "sha256": "bebe42431f35d1a04b8994a36b5b10ff27f2b9d565cc1b79fd2959684e13a397"}, "downloads": -1, "filename": "PyPortfolioOpt-1.0.1.tar.gz", "has_sig": false, "md5_digest": "25f489ba19312afa161a6a2023b3ef59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 42759, "upload_time": "2020-03-26T02:59:13", "upload_time_iso_8601": "2020-03-26T02:59:13.226780Z", "url": "https://files.pythonhosted.org/packages/b1/37/83b47f504c36424602a052e7cdf5efbac4f06ecf9ad7d33097fb6f91f426/PyPortfolioOpt-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "7c39011fd6b1322c142c5b456606f375", "sha256": "28d5561f0bc885cdb7d4d9ac9ecc83b83d228878b5bcc779e1b79129c9cbe112"}, "downloads": -1, "filename": "PyPortfolioOpt-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7c39011fd6b1322c142c5b456606f375", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 41945, "upload_time": "2020-04-10T03:09:19", "upload_time_iso_8601": "2020-04-10T03:09:19.906051Z", "url": "https://files.pythonhosted.org/packages/40/41/7ac10eedecbeecf370b63785c1651ced6b4e4b203fdb448037db324f9689/PyPortfolioOpt-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "197532b954e0f969862dbf0630ce916c", "sha256": "ac0582fb43c3d2cc3026fb12dd64127cb472f0634a3b7aeda85d9feff2da7982"}, "downloads": -1, "filename": "PyPortfolioOpt-1.0.2.tar.gz", "has_sig": false, "md5_digest": "197532b954e0f969862dbf0630ce916c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 42823, "upload_time": "2020-04-10T03:09:21", "upload_time_iso_8601": "2020-04-10T03:09:21.604455Z", "url": "https://files.pythonhosted.org/packages/18/d7/bffefbc3f275e0412d9c40aff929c7b6a33005d0499ec8c95957199c8db7/PyPortfolioOpt-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "caeda5723ced972d66f4ad81be13b27f", "sha256": "3f15c5a920ca8832042204fb01df2f832120d9743b9e3424b6a77533a287475b"}, "downloads": -1, "filename": "PyPortfolioOpt-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "caeda5723ced972d66f4ad81be13b27f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 46843, "upload_time": "2020-04-14T14:51:12", "upload_time_iso_8601": "2020-04-14T14:51:12.351520Z", "url": "https://files.pythonhosted.org/packages/f4/13/cfc5dec4182361973d54e49f5f137a2156fa9b8e425119760a3ced5d607d/PyPortfolioOpt-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e76166cf572937722236a38f496ec4d", "sha256": "ca6caddacefef099093598b5450cc94e9cfa8989859456ebe903b6344bd57998"}, "downloads": -1, "filename": "PyPortfolioOpt-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4e76166cf572937722236a38f496ec4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 47719, "upload_time": "2020-04-14T14:51:14", "upload_time_iso_8601": "2020-04-14T14:51:14.262619Z", "url": "https://files.pythonhosted.org/packages/31/7c/5106e28bae932e7b2fbc37d374bb8e148e6929c8d6cbebcc843abe163a49/PyPortfolioOpt-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "253ec958a31332eef19ed59b10ef3c96", "sha256": "63f1758574f7ed18c0e23fed3dc17b6a81d8d5467494db454e45cad60ac9e88e"}, "downloads": -1, "filename": "PyPortfolioOpt-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "253ec958a31332eef19ed59b10ef3c96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 48641, "upload_time": "2020-04-28T09:35:02", "upload_time_iso_8601": "2020-04-28T09:35:02.861954Z", "url": "https://files.pythonhosted.org/packages/2d/b4/2661eb33fd1136c87fa6db611326ae92c60b3ebc937c6c0e069d565c694d/PyPortfolioOpt-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "498e05670171c58c18929401f660f20a", "sha256": "32a9a195f1239100b1c412aaec266d916175676629dfcae65b85d06c584e00bd"}, "downloads": -1, "filename": "PyPortfolioOpt-1.2.0.tar.gz", "has_sig": false, "md5_digest": "498e05670171c58c18929401f660f20a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 49786, "upload_time": "2020-04-28T09:35:05", "upload_time_iso_8601": "2020-04-28T09:35:05.022700Z", "url": "https://files.pythonhosted.org/packages/99/b7/7c2e2de6b65308bb021b50f80d196f74194939b3cf10f927c08b735d24dd/PyPortfolioOpt-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "9f2064006d91d09c25036f0872ec60f4", "sha256": "e59b43bee639db2b99aa6aa507b352fbd41d84306a1c745c3990ea2c136c0ea0"}, "downloads": -1, "filename": "PyPortfolioOpt-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9f2064006d91d09c25036f0872ec60f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 49044, "upload_time": "2020-04-29T01:18:01", "upload_time_iso_8601": "2020-04-29T01:18:01.670818Z", "url": "https://files.pythonhosted.org/packages/a9/ec/6a74a210ab1971f2bd5e22bac235d722ee1e47e6f0fb0cc20863c5ee5f14/PyPortfolioOpt-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9ac3e3bc244fddb4918cd1c70e835d7", "sha256": "4ecb4196218670d9a2d5376aff1c4a40b619ce770085cd215eccb87f694ee6b7"}, "downloads": -1, "filename": "PyPortfolioOpt-1.2.1.tar.gz", "has_sig": false, "md5_digest": "b9ac3e3bc244fddb4918cd1c70e835d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 50384, "upload_time": "2020-04-29T01:18:03", "upload_time_iso_8601": "2020-04-29T01:18:03.490249Z", "url": "https://files.pythonhosted.org/packages/c1/be/626b36830cf142e39b76e10c4e3024a26e1a87407c48b982edb186107ed3/PyPortfolioOpt-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f2064006d91d09c25036f0872ec60f4", "sha256": "e59b43bee639db2b99aa6aa507b352fbd41d84306a1c745c3990ea2c136c0ea0"}, "downloads": -1, "filename": "PyPortfolioOpt-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9f2064006d91d09c25036f0872ec60f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 49044, "upload_time": "2020-04-29T01:18:01", "upload_time_iso_8601": "2020-04-29T01:18:01.670818Z", "url": "https://files.pythonhosted.org/packages/a9/ec/6a74a210ab1971f2bd5e22bac235d722ee1e47e6f0fb0cc20863c5ee5f14/PyPortfolioOpt-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9ac3e3bc244fddb4918cd1c70e835d7", "sha256": "4ecb4196218670d9a2d5376aff1c4a40b619ce770085cd215eccb87f694ee6b7"}, "downloads": -1, "filename": "PyPortfolioOpt-1.2.1.tar.gz", "has_sig": false, "md5_digest": "b9ac3e3bc244fddb4918cd1c70e835d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 50384, "upload_time": "2020-04-29T01:18:03", "upload_time_iso_8601": "2020-04-29T01:18:03.490249Z", "url": "https://files.pythonhosted.org/packages/c1/be/626b36830cf142e39b76e10c4e3024a26e1a87407c48b982edb186107ed3/PyPortfolioOpt-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:16 2020"}