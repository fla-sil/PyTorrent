{"info": {"author": "Omar Bohsali", "author_email": "me@omarish.com", "bugtrack_url": null, "classifiers": [], "description": "# Mutations\n\n[![pypi-version]][pypi]\n\nCompose your business logic into commands that sanitize and validate input.\n\n## Install\n\n```bash\n$ pip install mutations\n```\n\n## How it Works:\n\n1. Subclass `mutations.Mutation`\n2. Define your inputs.\n3. Define an `execute` method in your command.\n4. Run it, like this: `SimpleMutation.run(foo='bar')`\n\nTo learn more, see [this blog post](https://omarish.com/2018/02/17/mutations.html).\n\n## Example\n\n```python\nimport mutations\n\nclass UserSignup(mutations.Mutation):\n    \"\"\"Define the inputs to your mutation here. \"\"\"\n    email = mutations.fields.CharField(required=True)\n    full_name = mutations.fields.CharField(required=True)\n    send_welcome_email = mutations.fields.Boolean(required=False, default=True)\n\n    def validate_email_address(self):\n        \"\"\"Custom validation for a field.\n\n        If you encounter any validation errors and want to raise, you should\n        raise mutation.ValidationError or some sublcass thereof. Otherwise, it\n        assumes there were no problems.\n\n        Any function beginning with `validate_` is assumed to be a validator\n        function and will be run before the mutation can execute.\n        \"\"\"\n        if not self.email.is_valid():\n            raise mutations.ValidationError(\"email_not_valid\", \"Email is not valid.\")\n\n    def execute(self):\n        \"\"\"Executes the mutation.\n\n        This method does the heavy lifting. You can call it by calling .run() on\n        your mutation class.\n        \"\"\"\n        user = User.objects.create(email=self.email, name=self.full_name)\n        if self.send_welcome_email:\n            EmailServer.deliver(recipient = self.email)\n        return user\n```\n\n## Calling Commands\n\n```python\n>>> result = UserSignup.run(email=email, full_name=\"Bob Boblob\")\n>>> result.success\nTrue\n>>> result.return_value\n<User id=...>\n>>> result.errors\n\nresult = ...\n\n```\n\n```python\n>>> result = UserSignup.run(email=None)\n>>> result.success\nFalse\n>>> result.errors\nmutations.ErrorDict({\n  'email': ['email_not_valid']\n})\n>>> result.value\nNone\n```\n\n## Only Run Validations\n\n```python\n>>> result = UserSignup.validate(email=email, full_name=\"Bob Boblob\")\n>>> result.is_valid\nTrue\n```\n\n## Testing\n\n```bash\n$ make tests\n```\n\nWhen you're ready to do a release, please make sure tests pass across both 2.7\nand 3.6 by running tox:\n\n```bash\n$ tox\n```\n\n# Versioning\n\nThis project uses [Semantic Versioning][semver].\n\n# Thanks\n\nThanks to Cypriss for the excellent Ruby [Mutations Gem][1]. I created this library because I was looking for something similar for Python.\n\n[1]: https://github.com/cypriss/mutations\n[semver]: https://semver.org/\n[pypi-version]: https://img.shields.io/pypi/v/mutations.svg\n[pypi]: https://pypi.org/project/mutations/", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/omarish/mutations", "keywords": "business logic,django,fat models,thin models,input validation,commands,validation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mutations", "package_url": "https://pypi.org/project/mutations/", "platform": "", "project_url": "https://pypi.org/project/mutations/", "project_urls": {"Homepage": "http://github.com/omarish/mutations"}, "release_url": "https://pypi.org/project/mutations/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Encapsulate your business logic in command classes.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mutations</h1>\n<p><a href=\"https://pypi.org/project/mutations/\" rel=\"nofollow\"><img alt=\"pypi-version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf5273405521e4f7da62b10ccdd11d08658e27d8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d75746174696f6e732e737667\"></a></p>\n<p>Compose your business logic into commands that sanitize and validate input.</p>\n<h2>Install</h2>\n<pre>$ pip install mutations\n</pre>\n<h2>How it Works:</h2>\n<ol>\n<li>Subclass <code>mutations.Mutation</code></li>\n<li>Define your inputs.</li>\n<li>Define an <code>execute</code> method in your command.</li>\n<li>Run it, like this: <code>SimpleMutation.run(foo='bar')</code></li>\n</ol>\n<p>To learn more, see <a href=\"https://omarish.com/2018/02/17/mutations.html\" rel=\"nofollow\">this blog post</a>.</p>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mutations</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserSignup</span><span class=\"p\">(</span><span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">Mutation</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Define the inputs to your mutation here. \"\"\"</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">send_welcome_email</span> <span class=\"o\">=</span> <span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">validate_email_address</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Custom validation for a field.</span>\n\n<span class=\"sd\">        If you encounter any validation errors and want to raise, you should</span>\n<span class=\"sd\">        raise mutation.ValidationError or some sublcass thereof. Otherwise, it</span>\n<span class=\"sd\">        assumes there were no problems.</span>\n\n<span class=\"sd\">        Any function beginning with `validate_` is assumed to be a validator</span>\n<span class=\"sd\">        function and will be run before the mutation can execute.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"s2\">\"email_not_valid\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Email is not valid.\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Executes the mutation.</span>\n\n<span class=\"sd\">        This method does the heavy lifting. You can call it by calling .run() on</span>\n<span class=\"sd\">        your mutation class.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">full_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">send_welcome_email</span><span class=\"p\">:</span>\n            <span class=\"n\">EmailServer</span><span class=\"o\">.</span><span class=\"n\">deliver</span><span class=\"p\">(</span><span class=\"n\">recipient</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">user</span>\n</pre>\n<h2>Calling Commands</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">UserSignup</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">full_name</span><span class=\"o\">=</span><span class=\"s2\">\"Bob Boblob\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">success</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">return_value</span>\n<span class=\"o\">&lt;</span><span class=\"n\">User</span> <span class=\"nb\">id</span><span class=\"o\">=...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">UserSignup</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">success</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span>\n<span class=\"n\">mutations</span><span class=\"o\">.</span><span class=\"n\">ErrorDict</span><span class=\"p\">({</span>\n  <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'email_not_valid'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"kc\">None</span>\n</pre>\n<h2>Only Run Validations</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">UserSignup</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">full_name</span><span class=\"o\">=</span><span class=\"s2\">\"Bob Boblob\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">is_valid</span>\n<span class=\"kc\">True</span>\n</pre>\n<h2>Testing</h2>\n<pre>$ make tests\n</pre>\n<p>When you're ready to do a release, please make sure tests pass across both 2.7\nand 3.6 by running tox:</p>\n<pre>$ tox\n</pre>\n<h1>Versioning</h1>\n<p>This project uses <a href=\"https://semver.org/\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<h1>Thanks</h1>\n<p>Thanks to Cypriss for the excellent Ruby <a href=\"https://github.com/cypriss/mutations\" rel=\"nofollow\">Mutations Gem</a>. I created this library because I was looking for something similar for Python.</p>\n\n          </div>"}, "last_serial": 4212334, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "597d69a491cfe2d164e7440a8ffa2392", "sha256": "3f789829ad8e105b017a56d3db0e76f1a4f870a8a6dc3776103d19b933d2bcf6"}, "downloads": -1, "filename": "mutations-0.2.tar.gz", "has_sig": false, "md5_digest": "597d69a491cfe2d164e7440a8ffa2392", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2973, "upload_time": "2018-02-09T17:43:38", "upload_time_iso_8601": "2018-02-09T17:43:38.741215Z", "url": "https://files.pythonhosted.org/packages/59/68/56f0f7cfd218f32a1249bbe89c172836c60665803df9a3e95bbc85531138/mutations-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "490e80715fedf54e545888461a31fcf1", "sha256": "46293fd66c1dd8410d79d8c8eb06b538de615573c79147a116f9e730627cb504"}, "downloads": -1, "filename": "mutations-0.2.1.tar.gz", "has_sig": false, "md5_digest": "490e80715fedf54e545888461a31fcf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3001, "upload_time": "2018-02-09T17:50:17", "upload_time_iso_8601": "2018-02-09T17:50:17.454448Z", "url": "https://files.pythonhosted.org/packages/dc/0c/810e1c2c1167291c12f49d1908d7e2b563cdc7d979803bdac50bfc0e9069/mutations-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "93b534a82e2f6dc103595abce539b77c", "sha256": "d47ae58b5c370107fa7ab75aaaf1d42ce9a8dc6bb3aa734c89a620f3be22d665"}, "downloads": -1, "filename": "mutations-0.2.2.tar.gz", "has_sig": false, "md5_digest": "93b534a82e2f6dc103595abce539b77c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2995, "upload_time": "2018-02-20T21:01:15", "upload_time_iso_8601": "2018-02-20T21:01:15.828116Z", "url": "https://files.pythonhosted.org/packages/09/76/17501c7faf70a9fc1806f5f3b4e45a2c9ae559671bbd31ce88310d94223a/mutations-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "0a4adc2673c13f93dd3235e3f15d5f33", "sha256": "0c7bc91fdb5dc4605582e3c503ab2c71438c70fc2eba213351fdb6b6db534804"}, "downloads": -1, "filename": "mutations-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0a4adc2673c13f93dd3235e3f15d5f33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3648, "upload_time": "2018-05-30T19:46:36", "upload_time_iso_8601": "2018-05-30T19:46:36.183371Z", "url": "https://files.pythonhosted.org/packages/4c/28/c7df43eb5d63724e30afb2ed8586aa2c3d32fcef051f742b640b854f760e/mutations-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "bbe06b558737d0853884679ae681977d", "sha256": "01d7066a5cfccf1b3e32f89b2feef0cb26120dfe258d50890f1c63255c0ef2c0"}, "downloads": -1, "filename": "mutations-0.3.1.tar.gz", "has_sig": false, "md5_digest": "bbe06b558737d0853884679ae681977d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5318, "upload_time": "2018-06-01T15:26:13", "upload_time_iso_8601": "2018-06-01T15:26:13.845612Z", "url": "https://files.pythonhosted.org/packages/d8/c5/5f57c7d77982ebf6f4120511fc5c528ff4e26d3ba771e1e571b2f6ca2eaa/mutations-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "e05c3658f3c859d68824388152b06ba8", "sha256": "813d57b48adaeb643d0d8c66f4b0bb7f74a26452cdc4ceaca312daca92572a00"}, "downloads": -1, "filename": "mutations-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e05c3658f3c859d68824388152b06ba8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5507, "upload_time": "2018-08-27T19:42:18", "upload_time_iso_8601": "2018-08-27T19:42:18.601892Z", "url": "https://files.pythonhosted.org/packages/e9/2c/db7144437418ccd7137cb5075f808e10df9068773265bbf6544dfc93e66c/mutations-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e05c3658f3c859d68824388152b06ba8", "sha256": "813d57b48adaeb643d0d8c66f4b0bb7f74a26452cdc4ceaca312daca92572a00"}, "downloads": -1, "filename": "mutations-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e05c3658f3c859d68824388152b06ba8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5507, "upload_time": "2018-08-27T19:42:18", "upload_time_iso_8601": "2018-08-27T19:42:18.601892Z", "url": "https://files.pythonhosted.org/packages/e9/2c/db7144437418ccd7137cb5075f808e10df9068773265bbf6544dfc93e66c/mutations-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:03 2020"}