{"info": {"author": "W. Trevor King", "author_email": "wking@drexel.edu", "bugtrack_url": null, "classifiers": [], "description": "Sawsim is a force-spectroscopy simulator.  See the manual for more\ndetails.\n\n\nPackages\n--------\n\nGentoo\n~~~~~~\n\nI've packaged sawsim for Gentoo_ as sci-physics/sawsim in my `wtk\noverlay`_.  To install, run::\n\n  # emerge -av app-portage/layman\n  # layman --add wtk\n  # emerge -av sci-physics/sawsim\n\nTo stay current, follow the sawsim `Atom`_ or `RSS`_ feed, and\nre-emerge when there are interesting changes.\n\nYou can skip the Compiling_ and Upgrading_ sections of this README ;).\n\n.. _Gentoo: http://www.gentoo.org/\n.. _wtk overlay: http://blog.tremily.us/posts/Gentoo_overlay/\n.. _Layman: http://www.gentoo.org/proj/en/overlays/userguide.xml\n.. _Atom: http://git.tremily.us/?p=sawsim.git;a=atom\n.. _RSS: http://git.tremily.us/?p=sawsim.git;a=rss\n\n\nCompiling\n---------\n\nCheck out the source::\n\n  $ git clone git://tremily.us/sawsim.git\n  $ cd sawsim\n\nSawsim is written in noweb_.  Extract the `Makefile` and compile with::\n\n  $ notangle -Rmakefile src/sawsim.nw | sed 's/        /\\t/' > Makefile\n  $ make\n\nRun the unit tests with::\n\n  $ make check\n\nIf you're using the Python bindings (`pysawsim` or `bin/*.py`), you\nshould run the `pysawsim` unit tests with::\n\n  $ ./misc/hooks/pre-commit-pysawsim-check\n\n\nUpgrading\n~~~~~~~~~\n\nUpgrade to the most recent version::\n\n  sawsim$ git pull\n  sawsim$ make && make check && ./misc/hooks/pre-commit-pysawsim-check\n\n\nDependencies\n------------\n\n============  =====================  =================  ======================\nPackage       Purpose                Debian             Gentoo\n============  =====================  =================  ======================\ngit_          version control        git-core           dev-vcs/git\nnoweb_        source code framework  noweb              app-text/noweb\nGSL_          sawsim dependency      libgsl0-dev        sci-libs/gsl\ncheck_        sawsim unit tests      check              dev-libs/check\npython_ 2.5+  pysawsim execution     python             dev-lang/python\nnose_         pysawsim testing       python-nose        dev-python/nose\nmatplotlib_   pysawsim execution     python-matplotlib  dev-python/matplotlib\nnumpy_        pysawsim execution     python-numpy       dev-python/numpy\nscipy_        pysawsim execution     python-scipy       sci-libs/scipy\nmpi4py_       pysawsim mpi manager   [1]_               dev-python/mpi4py\npbs-python_   pysawsim pbs manager   [2]_               sys-cluster/pbs-python\n============  =====================  =================  ======================\n\n.. _git: http://git-scm.com/\n.. _noweb: http://www.eecs.harvard.edu/~nr/noweb/\n.. _GSL: http://www.gnu.org/software/gsl/\n.. _check: http://check.sourceforge.net/\n.. _python: http://www.python.org/\n.. _nose: http://somethingaboutorange.com/mrl/projects/nose/0.11.2/\n.. _matplotlib: http://matplotlib.sourceforge.net/\n.. _numpy: http://numpy.scipy.org/\n.. _scipy: http://www.scipy.org/\n.. _mpi4py: http://mpi4py.scipy.org/\n.. _pbs-python homepage:\n.. _pbs-python: http://subtrac.sara.nl/oss/pbs_python\n\n.. [1] mpi4py has no Debian package, but you can install it with\n   distribute_ (a `setuptools` fork) (Debian: python-distribute,\n   Gentoo: setuptools/setuptools) via::\n\n     $ easy_install --user mpi4py\n\n   For systems with earlier versions of `distribute`/`setuptools`,\n   which lack the `--user` option, try something along the lines of::\n\n     $ easy_install --user mpi4py\n     $ easy_install --prefix $HOME/.local/ mpi4py\n\n.. [2] pbs-python has no Debian package, but you can install it from\n   source.  See the `pbs-python homepage`_.\n\n.. _distribute: http://pypi.python.org/pypi/distribute\n\n\nPYTHONPATH\n~~~~~~~~~~\n\nIf you install Python packages at the user level (vs. system-wide\ninstalls) you may need to setup a `PYTHONPATH` environmental variable\nso Python can find the packages.  You'll probably want to add a line\nalong the lines of::\n\n    export PYTHONPATH=\".:$HOME/.local/lib/python2.6/site-packages\"\n\nto your `~/.bashrc` file to ensure that the new `PYTHONPATH` is setup\nfor all future logins.\n\n\nPython wrapper\n--------------\n\nThe `sawsim` binary only runs a single pull, but you'll probably want\nto run many repetitions to generate enough data for significant\nstatistical analysis.  To facilitate this, we provide the `pysawsim`\nmodule which provides a higher level interface to `sawsim`.\n\nEnsure that . is in your PYTHONPATH_, and run the pysawsim tests::\n\n  sawsim$ ./misc/hooks/pre-commit-pysawsim-check\n\nSeveral `pysawsim` submodules have scripts (`bin/*.py`) providing\ncommand-line access to their functionality.  Many users will probably\nonly need a single call to `bin/sawsim_hist_scan.py` to fit their\nunfolding force histograms to a particular model.\n\n\nJob managers\n~~~~~~~~~~~~\n\nFor the `--manager` option, use whatever job scheduling system is most\nappropriate for your host.  For example:\n\n========================================================  =======\nHost description                                          Manager\n========================================================  =======\nSMP machine with many processors                          subproc\nCluster with the Torque/Maui portable batch queue system  pbs\nBunch of machines which can host message-passing daemons  mpi\nMy wimpy single-processor, single-core netbook            thread\n========================================================  =======\n\n\nCaching\n~~~~~~~\n\nBy default, the python wrappers do not cache the results of previous\nruns.  However, if you are repeatedly running sawsim with the same\nparameters, you probably want to enable caching (`-C/--use-cache`).\nThe output of each `sawsim` run will be stored in your cache directory\n(`-d/--cache-dir`) and recycled for future runs with the same sawsim\nparameters.  For example, if you place 200 runs in the cache::\n\n  $ bin/sawsim_hist.py -s bin/sawsim -N 200 --use-cache\n\nAnd then generate another histogram with the same `sawsim` parameters::\n\n  $ bin/sawsim_hist.py -s bin/sawsim -N 300 --use-cache\n\nThe second call will only execute an additional 100 `sawsim` runs.\n\nIf you ask for *fewer* runs than are contained in the cache, e.g.::\n\n  $ bin/sawsim_hist.py -s bin/sawsim -N 100 --use-cache\n\nYou will not run *any* new `sawsim` runs.  All 100 runs will be drawn\nat random from the cache.\n\n\nHelp\n----\n\nAs always, run::\n\n  sawim$ bin/<whatever> --help\n\nfor more details.\n\n\nLicense\n-------\n\nSaswim is released under the GNU GPLv3+.  See `COPYING` for details.", "description_content_type": null, "docs_url": null, "download_url": "http://git.tremily.us/?p=sawsim.git;a=snapshot;h=v0.10;sf=tgz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://blog.tremily.us/posts/sawsim/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pysawsim", "package_url": "https://pypi.org/project/pysawsim/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pysawsim/", "project_urls": {"Download": "http://git.tremily.us/?p=sawsim.git;a=snapshot;h=v0.10;sf=tgz", "Homepage": "http://blog.tremily.us/posts/sawsim/"}, "release_url": "https://pypi.org/project/pysawsim/0.10/", "requires_dist": null, "requires_python": null, "summary": "Python framework for the sawsim force spectroscopy simulator.", "version": "0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Sawsim is a force-spectroscopy simulator.  See the manual for more\ndetails.</p>\n<div id=\"packages\">\n<h2>Packages</h2>\n<h2 id=\"gentoo\"><span class=\"section-subtitle\">Gentoo</span></h2>\n<p>I\u2019ve packaged sawsim for <a href=\"http://www.gentoo.org/\" rel=\"nofollow\">Gentoo</a> as sci-physics/sawsim in my <a href=\"http://blog.tremily.us/posts/Gentoo_overlay/\" rel=\"nofollow\">wtk\noverlay</a>.  To install, run:</p>\n<pre># emerge -av app-portage/layman\n# layman --add wtk\n# emerge -av sci-physics/sawsim\n</pre>\n<p>To stay current, follow the sawsim <a href=\"http://git.tremily.us/?p=sawsim.git;a=atom\" rel=\"nofollow\">Atom</a> or <a href=\"http://git.tremily.us/?p=sawsim.git;a=rss\" rel=\"nofollow\">RSS</a> feed, and\nre-emerge when there are interesting changes.</p>\n<p>You can skip the <a href=\"#compiling\" rel=\"nofollow\">Compiling</a> and <a href=\"#upgrading\" rel=\"nofollow\">Upgrading</a> sections of this README ;).</p>\n</div>\n<div id=\"compiling\">\n<h2>Compiling</h2>\n<p>Check out the source:</p>\n<pre>$ git clone git://tremily.us/sawsim.git\n$ cd sawsim\n</pre>\n<p>Sawsim is written in <a href=\"http://www.eecs.harvard.edu/~nr/noweb/\" rel=\"nofollow\">noweb</a>.  Extract the <cite>Makefile</cite> and compile with:</p>\n<pre>$ notangle -Rmakefile src/sawsim.nw | sed 's/        /\\t/' &gt; Makefile\n$ make\n</pre>\n<p>Run the unit tests with:</p>\n<pre>$ make check\n</pre>\n<p>If you\u2019re using the Python bindings (<cite>pysawsim</cite> or <cite>bin/*.py</cite>), you\nshould run the <cite>pysawsim</cite> unit tests with:</p>\n<pre>$ ./misc/hooks/pre-commit-pysawsim-check\n</pre>\n<div id=\"upgrading\">\n<h3>Upgrading</h3>\n<p>Upgrade to the most recent version:</p>\n<pre>sawsim$ git pull\nsawsim$ make &amp;&amp; make check &amp;&amp; ./misc/hooks/pre-commit-pysawsim-check\n</pre>\n</div>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Package</th>\n<th>Purpose</th>\n<th>Debian</th>\n<th>Gentoo</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><a href=\"http://git-scm.com/\" rel=\"nofollow\">git</a></td>\n<td>version control</td>\n<td>git-core</td>\n<td>dev-vcs/git</td>\n</tr>\n<tr><td><a href=\"http://www.eecs.harvard.edu/~nr/noweb/\" rel=\"nofollow\">noweb</a></td>\n<td>source code framework</td>\n<td>noweb</td>\n<td>app-text/noweb</td>\n</tr>\n<tr><td><a href=\"http://www.gnu.org/software/gsl/\" rel=\"nofollow\">GSL</a></td>\n<td>sawsim dependency</td>\n<td>libgsl0-dev</td>\n<td>sci-libs/gsl</td>\n</tr>\n<tr><td><a href=\"http://check.sourceforge.net/\" rel=\"nofollow\">check</a></td>\n<td>sawsim unit tests</td>\n<td>check</td>\n<td>dev-libs/check</td>\n</tr>\n<tr><td><a href=\"http://www.python.org/\" rel=\"nofollow\">python</a> 2.5+</td>\n<td>pysawsim execution</td>\n<td>python</td>\n<td>dev-lang/python</td>\n</tr>\n<tr><td><a href=\"http://somethingaboutorange.com/mrl/projects/nose/0.11.2/\" rel=\"nofollow\">nose</a></td>\n<td>pysawsim testing</td>\n<td>python-nose</td>\n<td>dev-python/nose</td>\n</tr>\n<tr><td><a href=\"http://matplotlib.sourceforge.net/\" rel=\"nofollow\">matplotlib</a></td>\n<td>pysawsim execution</td>\n<td>python-matplotlib</td>\n<td>dev-python/matplotlib</td>\n</tr>\n<tr><td><a href=\"http://numpy.scipy.org/\" rel=\"nofollow\">numpy</a></td>\n<td>pysawsim execution</td>\n<td>python-numpy</td>\n<td>dev-python/numpy</td>\n</tr>\n<tr><td><a href=\"http://www.scipy.org/\" rel=\"nofollow\">scipy</a></td>\n<td>pysawsim execution</td>\n<td>python-scipy</td>\n<td>sci-libs/scipy</td>\n</tr>\n<tr><td><a href=\"http://mpi4py.scipy.org/\" rel=\"nofollow\">mpi4py</a></td>\n<td>pysawsim mpi manager</td>\n<td><a href=\"#id4\" id=\"id2\" rel=\"nofollow\">[1]</a></td>\n<td>dev-python/mpi4py</td>\n</tr>\n<tr><td><a href=\"http://subtrac.sara.nl/oss/pbs_python\" rel=\"nofollow\">pbs-python</a></td>\n<td>pysawsim pbs manager</td>\n<td><a href=\"#id5\" id=\"id3\" rel=\"nofollow\">[2]</a></td>\n<td>sys-cluster/pbs-python</td>\n</tr>\n</tbody>\n</table>\n<table id=\"id4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[1]</a></td><td><p>mpi4py has no Debian package, but you can install it with\n<a href=\"http://pypi.python.org/pypi/distribute\" rel=\"nofollow\">distribute</a> (a <cite>setuptools</cite> fork) (Debian: python-distribute,\nGentoo: setuptools/setuptools) via:</p>\n<pre>\n$ easy_install --user mpi4py\n</pre>\n<p>For systems with earlier versions of <cite>distribute</cite>/<cite>setuptools</cite>,\nwhich lack the <cite>\u2013user</cite> option, try something along the lines of:</p>\n<pre>\n$ easy_install --user mpi4py\n$ easy_install --prefix $HOME/.local/ mpi4py\n</pre>\n</td></tr>\n</tbody>\n</table>\n<table id=\"id5\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[2]</a></td><td>pbs-python has no Debian package, but you can install it from\nsource.  See the <a href=\"http://subtrac.sara.nl/oss/pbs_python\" rel=\"nofollow\">pbs-python homepage</a>.</td></tr>\n</tbody>\n</table>\n<div id=\"pythonpath\">\n<h3>PYTHONPATH</h3>\n<p>If you install Python packages at the user level (vs. system-wide\ninstalls) you may need to setup a <cite>PYTHONPATH</cite> environmental variable\nso Python can find the packages.  You\u2019ll probably want to add a line\nalong the lines of:</p>\n<pre>export PYTHONPATH=\".:$HOME/.local/lib/python2.6/site-packages\"\n</pre>\n<p>to your <cite>~/.bashrc</cite> file to ensure that the new <cite>PYTHONPATH</cite> is setup\nfor all future logins.</p>\n</div>\n</div>\n<div id=\"python-wrapper\">\n<h2>Python wrapper</h2>\n<p>The <cite>sawsim</cite> binary only runs a single pull, but you\u2019ll probably want\nto run many repetitions to generate enough data for significant\nstatistical analysis.  To facilitate this, we provide the <cite>pysawsim</cite>\nmodule which provides a higher level interface to <cite>sawsim</cite>.</p>\n<p>Ensure that . is in your <a href=\"#pythonpath\" rel=\"nofollow\">PYTHONPATH</a>, and run the pysawsim tests:</p>\n<pre>sawsim$ ./misc/hooks/pre-commit-pysawsim-check\n</pre>\n<p>Several <cite>pysawsim</cite> submodules have scripts (<cite>bin/*.py</cite>) providing\ncommand-line access to their functionality.  Many users will probably\nonly need a single call to <cite>bin/sawsim_hist_scan.py</cite> to fit their\nunfolding force histograms to a particular model.</p>\n<div id=\"job-managers\">\n<h3>Job managers</h3>\n<p>For the <cite>\u2013manager</cite> option, use whatever job scheduling system is most\nappropriate for your host.  For example:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Host description</th>\n<th>Manager</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>SMP machine with many processors</td>\n<td>subproc</td>\n</tr>\n<tr><td>Cluster with the Torque/Maui portable batch queue system</td>\n<td>pbs</td>\n</tr>\n<tr><td>Bunch of machines which can host message-passing daemons</td>\n<td>mpi</td>\n</tr>\n<tr><td>My wimpy single-processor, single-core netbook</td>\n<td>thread</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"caching\">\n<h3>Caching</h3>\n<p>By default, the python wrappers do not cache the results of previous\nruns.  However, if you are repeatedly running sawsim with the same\nparameters, you probably want to enable caching (<cite>-C/\u2013use-cache</cite>).\nThe output of each <cite>sawsim</cite> run will be stored in your cache directory\n(<cite>-d/\u2013cache-dir</cite>) and recycled for future runs with the same sawsim\nparameters.  For example, if you place 200 runs in the cache:</p>\n<pre>$ bin/sawsim_hist.py -s bin/sawsim -N 200 --use-cache\n</pre>\n<p>And then generate another histogram with the same <cite>sawsim</cite> parameters:</p>\n<pre>$ bin/sawsim_hist.py -s bin/sawsim -N 300 --use-cache\n</pre>\n<p>The second call will only execute an additional 100 <cite>sawsim</cite> runs.</p>\n<p>If you ask for <em>fewer</em> runs than are contained in the cache, e.g.:</p>\n<pre>$ bin/sawsim_hist.py -s bin/sawsim -N 100 --use-cache\n</pre>\n<p>You will not run <em>any</em> new <cite>sawsim</cite> runs.  All 100 runs will be drawn\nat random from the cache.</p>\n</div>\n</div>\n<div id=\"help\">\n<h2>Help</h2>\n<p>As always, run:</p>\n<pre>sawim$ bin/&lt;whatever&gt; --help\n</pre>\n<p>for more details.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Saswim is released under the GNU GPLv3+.  See <cite>COPYING</cite> for details.</p>\n</div>\n\n          </div>"}, "last_serial": 380997, "releases": {"0.10": []}, "urls": [], "timestamp": "Fri May  8 02:57:22 2020"}