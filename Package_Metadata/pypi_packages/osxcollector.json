{"info": {"author": "Yelp Security", "author_email": "opensource@yelp.com", "bugtrack_url": null, "classifiers": [], "description": "![osxcollector](https://raw.githubusercontent.com/Yelp/osxcollector/master/osx-github.png)\n\n[![Stories in Ready](https://badge.waffle.io/Yelp/osxcollector.png?label=ready&title=Ready)](https://waffle.io/Yelp/osxcollector)\n[![Stories in In Progress](https://badge.waffle.io/Yelp/osxcollector.png?label=in%20progress&title=In%20Progress)](https://waffle.io/Yelp/osxcollector)\n[![Build Status](https://travis-ci.org/Yelp/osxcollector.svg)](https://travis-ci.org/Yelp/osxcollector)\n[![PyPI](https://img.shields.io/pypi/v/osxcollector.svg)](https://pypi.python.org/pypi/osxcollector)\n\n# OSXCollector Manual\nOSXCollector is a forensic evidence collection & analysis toolkit for OSX.\n\n#### Forensic Collection\nThe collection script runs on a potentially infected machine and outputs a JSON file that describes the target machine. OSXCollector gathers information from plists, SQLite databases and the local file system.\n\n#### Forensic Analysis\nArmed with the forensic collection, an analyst can answer the question like:\n* _Is this machine infected?_\n* _How'd that malware get there?_\n* _How can I prevent and detect further infection?_\n\nYelp automates the analysis of most OSXCollector runs converting its output into an easily readable and actionable summary of _just the suspicious stuff_. Check out [OSXCollector Output Filters project](https://github.com/Yelp/osxcollector_output_filters) to learn how to make the most of the automated OSXCollector output analysis.\n\n## Performing Collection\n[`osxcollector.py`](https://raw.githubusercontent.com/Yelp/osxcollector/master/osxcollector/osxcollector.py) is a single Python file that runs without any dependencies on a standard OSX machine. This makes it really easy to run collection on any machine - no fussing with brew, pip, config files, or environment variables. Just copy the single file onto the machine and run it:\n\n`sudo osxcollector.py` is all it takes.\n\n```shell\n$ sudo osxcollector.py\nWrote 35394 lines.\nOutput in osxcollect-2014_12_21-08_49_39.tar.gz\n```\n\nIf you have just cloned the GitHub repository, `osxcollector.py` is inside `osxcollector/` directory, so you need to run it as:\n\n```shell\n$ sudo osxcollector/osxcollector.py\n```\n\n**IMPORTANT:** please make sure that `python` command on your Mac OS X machine uses the default Python interpreter shipped with the system and is not overridden, e.g. by the Python version installed through brew. OSXCollector relies on a couple of native Python bindings for OS X libraries, which might be not available in other Python versions than the one originally installed on your system.\nAlternatively, you can run `osxcollector.py` explicitly specifying the Python version you would like to use:\n\n```shell\n$ sudo /usr/bin/python2.7 osxcollector/osxcollector.py\n```\n\nThe JSON output of the collector, along with some helpful files like system logs, has been bundled into a .tar.gz for hand-off to an analyst.\n\n`osxcollector.py` also has a lot of useful options to change how collection works:\n* `-i INCIDENT_PREFIX`/`--id=INCIDENT_PREFIX`:\n  Sets an identifier which is used as the prefix of the output file. The default value is `osxcollect`.\n  ```shell\n  $ sudo osxcollector.py -i IncontinentSealord\n  Wrote 35394 lines.\n  Output in IncontinentSealord-2014_12_21-08_49_39.tar.gz\n  ```\n  Get creative with incident names, it makes it easier to laugh through the pain.\n\n* `-p ROOTPATH`/`--path=ROOTPATH`:\n  Sets the path to the root of the filesystem to run collection on. The default value is `/`. This is great for running collection on the image of a disk.\n  ```shell\n  $ sudo osxcollector.py -p '/mnt/powned'\n  ```\n\n* `-s SECTION`/`--section=SECTION`:\n  Runs only a portion of the full collection. Can be specified more than once. The full list of sections and subsections is:\n  * `version`\n  * `system_info`\n  * `kext`\n  * `startup`\n    * `launch_agents`\n    * `scripting_additions`\n    * `startup_items`\n    * `login_items`\n  * `applications`\n    * `applications`\n    * `install_history`\n  * `quarantines`\n  * `downloads`\n    * `downloads`\n    * `email_downloads`\n    * `old_email_downloads`\n  * `chrome`\n    * `history`\n    * `archived_history`\n    * `cookies`\n    * `login_data`\n    * `top_sites`\n    * `web_data`\n    * `databases`\n    * `local_storage`\n    * `preferences`\n  * `firefox`\n    * `cookies`\n    * `downloads`\n    * `formhistory`\n    * `history`\n    * `signons`\n    * `permissions`\n    * `addons`\n    * `extension`\n    * `content_prefs`\n    * `health_report`\n    * `webapps_store`\n    * `json_files`\n  * `safari`\n    * `downloads`\n    * `history`\n    * `extensions`\n    * `databases`\n    * `localstorage`\n    * `extension_files`\n  * `accounts`\n    * `system_admins`\n    * `system_users`\n    * `social_accounts`\n    * `recent_items`\n  * `mail`\n  * `full_hash`\n\n  ```shell\n  $ sudo osxcollector.py -s 'startup' -s 'downloads'\n  ```\n\n* `-c`/`--collect-cookies`:\n  Collect cookies' value.\n  By default OSXCollector does not dump the value of a cookie, as it may contain sensitive information (e.g. session id).\n\n* `-l`/`--collect-local-storage`:\n  Collect the values stored in web browsers' local storage.\n  By default OSXCollector does not dump the values as they may contain sensitive information.\n\n* `-d`/`--debug`:\n  Enables verbose output and python breakpoints. If something is wrong with OSXCollector, try this.\n\n  ```shell\n  $ sudo osxcollector.py -d\n  ```\n\n## Details of Collection\nThe collector outputs a `.tar.gz` containing all the collected artifacts. The archive contains a JSON file with the majority of information.  Additionally, a set of useful logs from the target system logs are included.\n\n#### Common Keys\n\n##### Every Record\nEach line of the JSON file records 1 _piece of information_.  There are some common keys that appear in every JSON record:\n* `osxcollector_incident_id`: A unique ID shared by every record.\n* `osxcollector_section`: The _section_ or type of data this record holds.\n* `osxcollector_subsection`: The _subsection_ or more detailed descriptor of the type of data this record holds.\n\n##### File Records\nFor records representing files there are a bunch of useful keys:\n* `atime`: The file accessed time.\n* `ctime`: The file creation time.\n* `mtime`: The file modified time.\n* `file_path`: The absolute path to the file.\n* `md5`: MD5 hash of the file contents.\n* `sha1`: SHA1 hash of the file contents.\n* `sha2`: SHA2 hash of the file contents.\n\nFor records representing downloaded files:\n* `xattr-wherefrom`: A list containing the source and referrer URLs for the downloaded file.\n* `xattr-quarantines`: A string describing which application downloaded the file.\n\n##### SQLite Records\nFor records representing a row of a SQLite database:\n* `osxcollector_table_name`: The table name the row comes from.\n* `osxcollector_db_path`: The absolute path to the SQLite file.\n\nFor records that represent data associated with a specific user:\n* `osxcollector_username`: The name of the user\n\n#### Timestamps\nOSXCollector attempts to convert timestamps to human readable date/time strings in the format `YYYY-mm-dd hh:MM:ss`. It uses heuristics to automatically identify various timestamps:\n* seconds since epoch\n* milliseconds since epoch\n* seconds since 2001-01-01\n* seconds since 1601-01-01\n\n#### Sections\n##### `version` section\n\nThe current version of OSXCollector.\n\n##### `system_info` section\n\nCollects basic information about the system:\n\n - system name\n - node name\n - release\n - version\n - machine\n\n##### `kext` section\n\nCollects the Kernel extensions from:\n- `/System/Library/Extensions`\n- `/Library/Extensions`\n\n##### `startup` section\n\nCollects information about the\n[LaunchAgents](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/launchd.plist.5.html),\nLaunchDaemons, ScriptingAdditions,\n[StartupItems](https://developer.apple.com/library/mac/documentation/macosx/conceptual/bpsystemstartup/chapters/StartupItems.html)\nand other login items from:\n\n - `/System/Library/LaunchAgents`\n - `/System/Library/LaunchDaemons`\n - `/Library/LaunchAgents`\n - `~/Library/LaunchAgents`\n - `/Library/LaunchDaemons`\n - `/System/Library/ScriptingAdditions`\n - `/Library/ScriptingAdditions`\n - `/System/Library/StartupItems`\n - `/Library/StartupItems`\n - `~/Library/Preferences/com.apple.loginitems.plist`\n\nMore information about the Max OS X startup can be found here:\nhttp://www.malicious-streams.com/article/Mac_OSX_Startup.pdf\n\n##### `applications` section\n\nHashes installed applications and gathers install history from:\n\n - `/Applications`\n - `~/Applications`\n - `/Library/Receipts/InstallHistory.plist`\n\n##### `quarantines` section\n\nQuarantines are basically the info necessary to show the 'Are you sure you wanna run this?' when a user is trying to open a file downloaded from the Internet.\nFor some more details, checkout the Apple Support explanation of Quarantines:\nhttp://support.apple.com/kb/HT3662\n\nThis section collects also information from XProtect hash-based malware check\nfor quarantines files. The plist is at:\n`/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/XProtect.plist`\n\nXProtect also add minimum versions for Internet Plugins. That plist is at:\n`/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/XProtect.meta.plist`\n\n##### `downloads` section\n\nHashes all users' downloaded files from:\n\n - `~/Downloads`\n - `~/Library/Mail Downloads`\n - `~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads`\n\n##### `chrome` section\n\nCollects following information from Google Chrome web browser:\n\n - History\n - Archived History\n - Cookies\n - Extensions\n - Login Data\n - Top Sites\n - Web Data\n\nThis data is extracted from `~/Library/Application Support/Google/Chrome/Default`\n\n##### `firefox` section\n\nCollects information from the different SQLite databases in a Firefox profile:\n\n - Cookies\n - Downloads\n - Form History\n - History\n - Signons\n - Permissions\n - Addons\n - Extensions\n - Content Preferences\n - Health Report\n - Webapps Store\n\nThis information is extracted from `~/Library/Application Support/Firefox/Profiles`\n\nFor more details about Firefox profile folder see\nhttp://kb.mozillazine.org/Profile_folder_-_Firefox\n\n##### `safari` section\n\nCollects information from the different plists and SQLite databases in a Safari\nprofile:\n\n - Downloads\n - History\n - Extensions\n - Databases\n - Local Storage\n\n##### `accounts` section\nCollects information about users' accounts:\n\n - system admins: `/private/var/db/dslocal/nodes/Default/groups/admin.plist`\n - system users: `/private/var/db/dslocal/nodes/Default/users`\n - social accounts: `~/Library/Accounts/Accounts3.sqlite`\n - users' recent items: `~/Library/Preferences/com.apple.recentitems.plist`\n\n##### `mail` section\nHashes files in the mail app directories:\n\n - `~/Library/Mail`\n - `~/Library/Mail Downloads`\n\n##### `full_hash` section\nHashes all the files on disk. All of 'em. This does not run by default. It must be triggered with:\n```shell\n$ sudo osxcollector.py -s full_hash\n```\n\n## Basic Manual Analysis\nForensic analysis is a bit of art and a bit of science. Every analyst will see a bit of a different story when reading the output from OSXCollector. That's part of what makes analysis fun.\n\nGenerally, collection is performed on a target machine because something is hinky: anti-virus found a file it doesn't like, deep packet inspect observed a callout, endpoint monitoring noticed a new startup item. The details of this initial alert - a file path, a timestamp, a hash, a domain, an IP, etc. - that's enough to get going.\n\n#### Timestamps\nSimply greping a few minutes before and after a timestamp works great:\n\n```shell\n$ cat INCIDENT32.json | grep '2014-01-01 11:3[2-8]'\n```\n\n#### Browser History\nIt's in there. A tool like [jq](http://stedolan.github.io/jq/) can be very helpful to do some fancy output:\n\n```shell\n$ cat INCIDENT32.json | grep '2014-01-01 11:3[2-8]' | jq 'select(has(\"url\"))|.url'\n```\n\n#### A Single User\n```shell\n$ cat INCIDENT32.json | jq 'select(.osxcollector_username==\"ivanlei\")|.'\n```\n\n## Automated Analysis\nThe [OSXCollector Output Filters project](https://github.com/Yelp/osxcollector_output_filters) contains filters that process and transform the output of OSXCollector. The goal of filters is to make it easy to analyze OSXCollector output.\n\n#### Development Tips\nThe functionality of OSXCollector is stored in a single file: `osxcollector.py`. The collector should run on a naked install of OS X without any additional packages or dependencies.\n\nEnsure that all of the OSXCollector tests pass before editing the source code. You can run the tests using: `make test`\n\nAfter making changes to the source code, run `make test` again to verify that your changes did not break any of the tests.\n\n## License\nThis work is licensed under the GNU General Public License and a derivation of [https://github.com/jipegit/OSXAuditor](https://github.com/jipegit/OSXAuditor)\n\n## Blog post\n\n* [OSXCollector: Forensic Collection and Automated Analysis for OS X](http://engineeringblog.yelp.com/2015/01/osxcollector-forensic-collection-and-automated-analysis-for-os-x.html) by Ivan Leichtling\n\n## Presentations\n\n* [OSXCollector: Automated forensic evidence collection & analysis for OS X](https://www.youtube.com/watch?v=l-lhyPcSd6I) by Kuba Sendor @ BruCON 0x07\n* [Squashing Rotten Apples: Automated forensics & analysis for Mac OS X with OSXCollector](https://www.youtube.com/watch?v=XeeCO8moyeE) by Kuba Sendor @ BSides Manchester 2015\n* [OSXCollector](http://macbrained.org/recap-august15-yelp/) by Ivan Leichtling @ Macbrained's August Meet-Up\n* [OSXCollector - Automated Forensic Evidence Collection & Analysis for OS X](https://www.youtube.com/watch?v=Yqny1rMTfyY) by Ivan Leichtling @ OpenNSM\n* [OSXCollector - Automated Forensic Evidence Collection & Analysis for OS X](https://www.youtube.com/watch?v=DfANq2ncaKU) by Ivan Leichtling @ Duo Tech Talk ([blog post](https://www.duosecurity.com/blog/duo-tech-talk-osxcollector-automated-forensic-evidence-collection-and-analysis-for-os-x))\n\n## External Presentations\n\n* [OSX Archaeology: Becoming Indiana Jones with OSXCollector and Strata](https://www.youtube.com/watch?v=9wvhOoXl2Os) by Chris Henderson & Justin Larson @ SAINTCon 2015\n\n## Resources\nWant to learn more about OS X forensics?\n* [Sarah Edward's mac4n6.com](http://www.mac4n6.com/) - The best presentations on Mac forensics.\n\nA couple of other interesting tools:\n* [KnockKnock](https://github.com/synack/knockknock) - KnockKnock is a command line python script that displays persistent OS X binaries that are set to execute automatically at each boot.\n* [Grr](https://github.com/google/grr) - Google Rapid Response: remote live forensics for incident response\n* [osquery](https://github.com/facebook/osquery) - SQL powered operating system instrumentation, monitoring, and analytics\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Yelp/osxcollector", "keywords": "", "license": "GNU General Public License", "maintainer": "", "maintainer_email": "", "name": "osxcollector", "package_url": "https://pypi.org/project/osxcollector/", "platform": "", "project_url": "https://pypi.org/project/osxcollector/", "project_urls": {"Homepage": "https://github.com/Yelp/osxcollector"}, "release_url": "https://pypi.org/project/osxcollector/1.12/", "requires_dist": ["macholib (>=1.7)", "pyobjc (>=3.0.4)", "xattr (>=0.8.0)"], "requires_python": "", "summary": "A tool for answering \"How'd that malware get there?\"", "version": "1.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"osxcollector\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f0bca92553c53d2a2f3a20d0df4d16ccca3ae96/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f59656c702f6f7378636f6c6c6563746f722f6d61737465722f6f73782d6769746875622e706e67\"></p>\n<p><a href=\"https://waffle.io/Yelp/osxcollector\" rel=\"nofollow\"><img alt=\"Stories in Ready\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f61c8e5795eac70062ce4b7e35086cfa942703c/68747470733a2f2f62616467652e776166666c652e696f2f59656c702f6f7378636f6c6c6563746f722e706e673f6c6162656c3d7265616479267469746c653d5265616479\"></a>\n<a href=\"https://waffle.io/Yelp/osxcollector\" rel=\"nofollow\"><img alt=\"Stories in In Progress\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18bc4d923d37333ea91492a58e8e849a299afa89/68747470733a2f2f62616467652e776166666c652e696f2f59656c702f6f7378636f6c6c6563746f722e706e673f6c6162656c3d696e25323070726f6772657373267469746c653d496e25323050726f6772657373\"></a>\n<a href=\"https://travis-ci.org/Yelp/osxcollector\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c7f6b85b6e9ebbe140cc6b1cff57fb5db238cecb/68747470733a2f2f7472617669732d63692e6f72672f59656c702f6f7378636f6c6c6563746f722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/osxcollector\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9fd3ffa08ed3f363d82d0610d45eacb35413c3d8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6f7378636f6c6c6563746f722e737667\"></a></p>\n<h1>OSXCollector Manual</h1>\n<p>OSXCollector is a forensic evidence collection &amp; analysis toolkit for OSX.</p>\n<h4>Forensic Collection</h4>\n<p>The collection script runs on a potentially infected machine and outputs a JSON file that describes the target machine. OSXCollector gathers information from plists, SQLite databases and the local file system.</p>\n<h4>Forensic Analysis</h4>\n<p>Armed with the forensic collection, an analyst can answer the question like:</p>\n<ul>\n<li><em>Is this machine infected?</em></li>\n<li><em>How'd that malware get there?</em></li>\n<li><em>How can I prevent and detect further infection?</em></li>\n</ul>\n<p>Yelp automates the analysis of most OSXCollector runs converting its output into an easily readable and actionable summary of <em>just the suspicious stuff</em>. Check out <a href=\"https://github.com/Yelp/osxcollector_output_filters\" rel=\"nofollow\">OSXCollector Output Filters project</a> to learn how to make the most of the automated OSXCollector output analysis.</p>\n<h2>Performing Collection</h2>\n<p><a href=\"https://raw.githubusercontent.com/Yelp/osxcollector/master/osxcollector/osxcollector.py\" rel=\"nofollow\"><code>osxcollector.py</code></a> is a single Python file that runs without any dependencies on a standard OSX machine. This makes it really easy to run collection on any machine - no fussing with brew, pip, config files, or environment variables. Just copy the single file onto the machine and run it:</p>\n<p><code>sudo osxcollector.py</code> is all it takes.</p>\n<pre>$ sudo osxcollector.py\nWrote <span class=\"m\">35394</span> lines.\nOutput in osxcollect-2014_12_21-08_49_39.tar.gz\n</pre>\n<p>If you have just cloned the GitHub repository, <code>osxcollector.py</code> is inside <code>osxcollector/</code> directory, so you need to run it as:</p>\n<pre>$ sudo osxcollector/osxcollector.py\n</pre>\n<p><strong>IMPORTANT:</strong> please make sure that <code>python</code> command on your Mac OS X machine uses the default Python interpreter shipped with the system and is not overridden, e.g. by the Python version installed through brew. OSXCollector relies on a couple of native Python bindings for OS X libraries, which might be not available in other Python versions than the one originally installed on your system.\nAlternatively, you can run <code>osxcollector.py</code> explicitly specifying the Python version you would like to use:</p>\n<pre>$ sudo /usr/bin/python2.7 osxcollector/osxcollector.py\n</pre>\n<p>The JSON output of the collector, along with some helpful files like system logs, has been bundled into a .tar.gz for hand-off to an analyst.</p>\n<p><code>osxcollector.py</code> also has a lot of useful options to change how collection works:</p>\n<ul>\n<li>\n<p><code>-i INCIDENT_PREFIX</code>/<code>--id=INCIDENT_PREFIX</code>:\nSets an identifier which is used as the prefix of the output file. The default value is <code>osxcollect</code>.</p>\n<pre>$ sudo osxcollector.py -i IncontinentSealord\nWrote <span class=\"m\">35394</span> lines.\nOutput in IncontinentSealord-2014_12_21-08_49_39.tar.gz\n</pre>\n<p>Get creative with incident names, it makes it easier to laugh through the pain.</p>\n</li>\n<li>\n<p><code>-p ROOTPATH</code>/<code>--path=ROOTPATH</code>:\nSets the path to the root of the filesystem to run collection on. The default value is <code>/</code>. This is great for running collection on the image of a disk.</p>\n<pre>$ sudo osxcollector.py -p <span class=\"s1\">'/mnt/powned'</span>\n</pre>\n</li>\n<li>\n<p><code>-s SECTION</code>/<code>--section=SECTION</code>:\nRuns only a portion of the full collection. Can be specified more than once. The full list of sections and subsections is:</p>\n<ul>\n<li><code>version</code></li>\n<li><code>system_info</code></li>\n<li><code>kext</code></li>\n<li><code>startup</code>\n<ul>\n<li><code>launch_agents</code></li>\n<li><code>scripting_additions</code></li>\n<li><code>startup_items</code></li>\n<li><code>login_items</code></li>\n</ul>\n</li>\n<li><code>applications</code>\n<ul>\n<li><code>applications</code></li>\n<li><code>install_history</code></li>\n</ul>\n</li>\n<li><code>quarantines</code></li>\n<li><code>downloads</code>\n<ul>\n<li><code>downloads</code></li>\n<li><code>email_downloads</code></li>\n<li><code>old_email_downloads</code></li>\n</ul>\n</li>\n<li><code>chrome</code>\n<ul>\n<li><code>history</code></li>\n<li><code>archived_history</code></li>\n<li><code>cookies</code></li>\n<li><code>login_data</code></li>\n<li><code>top_sites</code></li>\n<li><code>web_data</code></li>\n<li><code>databases</code></li>\n<li><code>local_storage</code></li>\n<li><code>preferences</code></li>\n</ul>\n</li>\n<li><code>firefox</code>\n<ul>\n<li><code>cookies</code></li>\n<li><code>downloads</code></li>\n<li><code>formhistory</code></li>\n<li><code>history</code></li>\n<li><code>signons</code></li>\n<li><code>permissions</code></li>\n<li><code>addons</code></li>\n<li><code>extension</code></li>\n<li><code>content_prefs</code></li>\n<li><code>health_report</code></li>\n<li><code>webapps_store</code></li>\n<li><code>json_files</code></li>\n</ul>\n</li>\n<li><code>safari</code>\n<ul>\n<li><code>downloads</code></li>\n<li><code>history</code></li>\n<li><code>extensions</code></li>\n<li><code>databases</code></li>\n<li><code>localstorage</code></li>\n<li><code>extension_files</code></li>\n</ul>\n</li>\n<li><code>accounts</code>\n<ul>\n<li><code>system_admins</code></li>\n<li><code>system_users</code></li>\n<li><code>social_accounts</code></li>\n<li><code>recent_items</code></li>\n</ul>\n</li>\n<li><code>mail</code></li>\n<li><code>full_hash</code></li>\n</ul>\n<pre>$ sudo osxcollector.py -s <span class=\"s1\">'startup'</span> -s <span class=\"s1\">'downloads'</span>\n</pre>\n</li>\n<li>\n<p><code>-c</code>/<code>--collect-cookies</code>:\nCollect cookies' value.\nBy default OSXCollector does not dump the value of a cookie, as it may contain sensitive information (e.g. session id).</p>\n</li>\n<li>\n<p><code>-l</code>/<code>--collect-local-storage</code>:\nCollect the values stored in web browsers' local storage.\nBy default OSXCollector does not dump the values as they may contain sensitive information.</p>\n</li>\n<li>\n<p><code>-d</code>/<code>--debug</code>:\nEnables verbose output and python breakpoints. If something is wrong with OSXCollector, try this.</p>\n<pre>$ sudo osxcollector.py -d\n</pre>\n</li>\n</ul>\n<h2>Details of Collection</h2>\n<p>The collector outputs a <code>.tar.gz</code> containing all the collected artifacts. The archive contains a JSON file with the majority of information.  Additionally, a set of useful logs from the target system logs are included.</p>\n<h4>Common Keys</h4>\n<h5>Every Record</h5>\n<p>Each line of the JSON file records 1 <em>piece of information</em>.  There are some common keys that appear in every JSON record:</p>\n<ul>\n<li><code>osxcollector_incident_id</code>: A unique ID shared by every record.</li>\n<li><code>osxcollector_section</code>: The <em>section</em> or type of data this record holds.</li>\n<li><code>osxcollector_subsection</code>: The <em>subsection</em> or more detailed descriptor of the type of data this record holds.</li>\n</ul>\n<h5>File Records</h5>\n<p>For records representing files there are a bunch of useful keys:</p>\n<ul>\n<li><code>atime</code>: The file accessed time.</li>\n<li><code>ctime</code>: The file creation time.</li>\n<li><code>mtime</code>: The file modified time.</li>\n<li><code>file_path</code>: The absolute path to the file.</li>\n<li><code>md5</code>: MD5 hash of the file contents.</li>\n<li><code>sha1</code>: SHA1 hash of the file contents.</li>\n<li><code>sha2</code>: SHA2 hash of the file contents.</li>\n</ul>\n<p>For records representing downloaded files:</p>\n<ul>\n<li><code>xattr-wherefrom</code>: A list containing the source and referrer URLs for the downloaded file.</li>\n<li><code>xattr-quarantines</code>: A string describing which application downloaded the file.</li>\n</ul>\n<h5>SQLite Records</h5>\n<p>For records representing a row of a SQLite database:</p>\n<ul>\n<li><code>osxcollector_table_name</code>: The table name the row comes from.</li>\n<li><code>osxcollector_db_path</code>: The absolute path to the SQLite file.</li>\n</ul>\n<p>For records that represent data associated with a specific user:</p>\n<ul>\n<li><code>osxcollector_username</code>: The name of the user</li>\n</ul>\n<h4>Timestamps</h4>\n<p>OSXCollector attempts to convert timestamps to human readable date/time strings in the format <code>YYYY-mm-dd hh:MM:ss</code>. It uses heuristics to automatically identify various timestamps:</p>\n<ul>\n<li>seconds since epoch</li>\n<li>milliseconds since epoch</li>\n<li>seconds since 2001-01-01</li>\n<li>seconds since 1601-01-01</li>\n</ul>\n<h4>Sections</h4>\n<h5><code>version</code> section</h5>\n<p>The current version of OSXCollector.</p>\n<h5><code>system_info</code> section</h5>\n<p>Collects basic information about the system:</p>\n<ul>\n<li>system name</li>\n<li>node name</li>\n<li>release</li>\n<li>version</li>\n<li>machine</li>\n</ul>\n<h5><code>kext</code> section</h5>\n<p>Collects the Kernel extensions from:</p>\n<ul>\n<li><code>/System/Library/Extensions</code></li>\n<li><code>/Library/Extensions</code></li>\n</ul>\n<h5><code>startup</code> section</h5>\n<p>Collects information about the\n<a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/launchd.plist.5.html\" rel=\"nofollow\">LaunchAgents</a>,\nLaunchDaemons, ScriptingAdditions,\n<a href=\"https://developer.apple.com/library/mac/documentation/macosx/conceptual/bpsystemstartup/chapters/StartupItems.html\" rel=\"nofollow\">StartupItems</a>\nand other login items from:</p>\n<ul>\n<li><code>/System/Library/LaunchAgents</code></li>\n<li><code>/System/Library/LaunchDaemons</code></li>\n<li><code>/Library/LaunchAgents</code></li>\n<li><code>~/Library/LaunchAgents</code></li>\n<li><code>/Library/LaunchDaemons</code></li>\n<li><code>/System/Library/ScriptingAdditions</code></li>\n<li><code>/Library/ScriptingAdditions</code></li>\n<li><code>/System/Library/StartupItems</code></li>\n<li><code>/Library/StartupItems</code></li>\n<li><code>~/Library/Preferences/com.apple.loginitems.plist</code></li>\n</ul>\n<p>More information about the Max OS X startup can be found here:\n<a href=\"http://www.malicious-streams.com/article/Mac_OSX_Startup.pdf\" rel=\"nofollow\">http://www.malicious-streams.com/article/Mac_OSX_Startup.pdf</a></p>\n<h5><code>applications</code> section</h5>\n<p>Hashes installed applications and gathers install history from:</p>\n<ul>\n<li><code>/Applications</code></li>\n<li><code>~/Applications</code></li>\n<li><code>/Library/Receipts/InstallHistory.plist</code></li>\n</ul>\n<h5><code>quarantines</code> section</h5>\n<p>Quarantines are basically the info necessary to show the 'Are you sure you wanna run this?' when a user is trying to open a file downloaded from the Internet.\nFor some more details, checkout the Apple Support explanation of Quarantines:\n<a href=\"http://support.apple.com/kb/HT3662\" rel=\"nofollow\">http://support.apple.com/kb/HT3662</a></p>\n<p>This section collects also information from XProtect hash-based malware check\nfor quarantines files. The plist is at:\n<code>/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/XProtect.plist</code></p>\n<p>XProtect also add minimum versions for Internet Plugins. That plist is at:\n<code>/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/XProtect.meta.plist</code></p>\n<h5><code>downloads</code> section</h5>\n<p>Hashes all users' downloaded files from:</p>\n<ul>\n<li><code>~/Downloads</code></li>\n<li><code>~/Library/Mail Downloads</code></li>\n<li><code>~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads</code></li>\n</ul>\n<h5><code>chrome</code> section</h5>\n<p>Collects following information from Google Chrome web browser:</p>\n<ul>\n<li>History</li>\n<li>Archived History</li>\n<li>Cookies</li>\n<li>Extensions</li>\n<li>Login Data</li>\n<li>Top Sites</li>\n<li>Web Data</li>\n</ul>\n<p>This data is extracted from <code>~/Library/Application Support/Google/Chrome/Default</code></p>\n<h5><code>firefox</code> section</h5>\n<p>Collects information from the different SQLite databases in a Firefox profile:</p>\n<ul>\n<li>Cookies</li>\n<li>Downloads</li>\n<li>Form History</li>\n<li>History</li>\n<li>Signons</li>\n<li>Permissions</li>\n<li>Addons</li>\n<li>Extensions</li>\n<li>Content Preferences</li>\n<li>Health Report</li>\n<li>Webapps Store</li>\n</ul>\n<p>This information is extracted from <code>~/Library/Application Support/Firefox/Profiles</code></p>\n<p>For more details about Firefox profile folder see\n<a href=\"http://kb.mozillazine.org/Profile_folder_-_Firefox\" rel=\"nofollow\">http://kb.mozillazine.org/Profile_folder_-_Firefox</a></p>\n<h5><code>safari</code> section</h5>\n<p>Collects information from the different plists and SQLite databases in a Safari\nprofile:</p>\n<ul>\n<li>Downloads</li>\n<li>History</li>\n<li>Extensions</li>\n<li>Databases</li>\n<li>Local Storage</li>\n</ul>\n<h5><code>accounts</code> section</h5>\n<p>Collects information about users' accounts:</p>\n<ul>\n<li>system admins: <code>/private/var/db/dslocal/nodes/Default/groups/admin.plist</code></li>\n<li>system users: <code>/private/var/db/dslocal/nodes/Default/users</code></li>\n<li>social accounts: <code>~/Library/Accounts/Accounts3.sqlite</code></li>\n<li>users' recent items: <code>~/Library/Preferences/com.apple.recentitems.plist</code></li>\n</ul>\n<h5><code>mail</code> section</h5>\n<p>Hashes files in the mail app directories:</p>\n<ul>\n<li><code>~/Library/Mail</code></li>\n<li><code>~/Library/Mail Downloads</code></li>\n</ul>\n<h5><code>full_hash</code> section</h5>\n<p>Hashes all the files on disk. All of 'em. This does not run by default. It must be triggered with:</p>\n<pre>$ sudo osxcollector.py -s full_hash\n</pre>\n<h2>Basic Manual Analysis</h2>\n<p>Forensic analysis is a bit of art and a bit of science. Every analyst will see a bit of a different story when reading the output from OSXCollector. That's part of what makes analysis fun.</p>\n<p>Generally, collection is performed on a target machine because something is hinky: anti-virus found a file it doesn't like, deep packet inspect observed a callout, endpoint monitoring noticed a new startup item. The details of this initial alert - a file path, a timestamp, a hash, a domain, an IP, etc. - that's enough to get going.</p>\n<h4>Timestamps</h4>\n<p>Simply greping a few minutes before and after a timestamp works great:</p>\n<pre>$ cat INCIDENT32.json <span class=\"p\">|</span> grep <span class=\"s1\">'2014-01-01 11:3[2-8]'</span>\n</pre>\n<h4>Browser History</h4>\n<p>It's in there. A tool like <a href=\"http://stedolan.github.io/jq/\" rel=\"nofollow\">jq</a> can be very helpful to do some fancy output:</p>\n<pre>$ cat INCIDENT32.json <span class=\"p\">|</span> grep <span class=\"s1\">'2014-01-01 11:3[2-8]'</span> <span class=\"p\">|</span> jq <span class=\"s1\">'select(has(\"url\"))|.url'</span>\n</pre>\n<h4>A Single User</h4>\n<pre>$ cat INCIDENT32.json <span class=\"p\">|</span> jq <span class=\"s1\">'select(.osxcollector_username==\"ivanlei\")|.'</span>\n</pre>\n<h2>Automated Analysis</h2>\n<p>The <a href=\"https://github.com/Yelp/osxcollector_output_filters\" rel=\"nofollow\">OSXCollector Output Filters project</a> contains filters that process and transform the output of OSXCollector. The goal of filters is to make it easy to analyze OSXCollector output.</p>\n<h4>Development Tips</h4>\n<p>The functionality of OSXCollector is stored in a single file: <code>osxcollector.py</code>. The collector should run on a naked install of OS X without any additional packages or dependencies.</p>\n<p>Ensure that all of the OSXCollector tests pass before editing the source code. You can run the tests using: <code>make test</code></p>\n<p>After making changes to the source code, run <code>make test</code> again to verify that your changes did not break any of the tests.</p>\n<h2>License</h2>\n<p>This work is licensed under the GNU General Public License and a derivation of <a href=\"https://github.com/jipegit/OSXAuditor\" rel=\"nofollow\">https://github.com/jipegit/OSXAuditor</a></p>\n<h2>Blog post</h2>\n<ul>\n<li><a href=\"http://engineeringblog.yelp.com/2015/01/osxcollector-forensic-collection-and-automated-analysis-for-os-x.html\" rel=\"nofollow\">OSXCollector: Forensic Collection and Automated Analysis for OS X</a> by Ivan Leichtling</li>\n</ul>\n<h2>Presentations</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=l-lhyPcSd6I\" rel=\"nofollow\">OSXCollector: Automated forensic evidence collection &amp; analysis for OS X</a> by Kuba Sendor @ BruCON 0x07</li>\n<li><a href=\"https://www.youtube.com/watch?v=XeeCO8moyeE\" rel=\"nofollow\">Squashing Rotten Apples: Automated forensics &amp; analysis for Mac OS X with OSXCollector</a> by Kuba Sendor @ BSides Manchester 2015</li>\n<li><a href=\"http://macbrained.org/recap-august15-yelp/\" rel=\"nofollow\">OSXCollector</a> by Ivan Leichtling @ Macbrained's August Meet-Up</li>\n<li><a href=\"https://www.youtube.com/watch?v=Yqny1rMTfyY\" rel=\"nofollow\">OSXCollector - Automated Forensic Evidence Collection &amp; Analysis for OS X</a> by Ivan Leichtling @ OpenNSM</li>\n<li><a href=\"https://www.youtube.com/watch?v=DfANq2ncaKU\" rel=\"nofollow\">OSXCollector - Automated Forensic Evidence Collection &amp; Analysis for OS X</a> by Ivan Leichtling @ Duo Tech Talk (<a href=\"https://www.duosecurity.com/blog/duo-tech-talk-osxcollector-automated-forensic-evidence-collection-and-analysis-for-os-x\" rel=\"nofollow\">blog post</a>)</li>\n</ul>\n<h2>External Presentations</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=9wvhOoXl2Os\" rel=\"nofollow\">OSX Archaeology: Becoming Indiana Jones with OSXCollector and Strata</a> by Chris Henderson &amp; Justin Larson @ SAINTCon 2015</li>\n</ul>\n<h2>Resources</h2>\n<p>Want to learn more about OS X forensics?</p>\n<ul>\n<li><a href=\"http://www.mac4n6.com/\" rel=\"nofollow\">Sarah Edward's mac4n6.com</a> - The best presentations on Mac forensics.</li>\n</ul>\n<p>A couple of other interesting tools:</p>\n<ul>\n<li><a href=\"https://github.com/synack/knockknock\" rel=\"nofollow\">KnockKnock</a> - KnockKnock is a command line python script that displays persistent OS X binaries that are set to execute automatically at each boot.</li>\n<li><a href=\"https://github.com/google/grr\" rel=\"nofollow\">Grr</a> - Google Rapid Response: remote live forensics for incident response</li>\n<li><a href=\"https://github.com/facebook/osquery\" rel=\"nofollow\">osquery</a> - SQL powered operating system instrumentation, monitoring, and analytics</li>\n</ul>\n\n          </div>"}, "last_serial": 6184853, "releases": {"1.11": [{"comment_text": "", "digests": {"md5": "d4c17d8754ceb151e382493becb3aa49", "sha256": "60ba68f7e707e6a9ee5ea9588273c0a8c71891c133862fe4ef2cd927802076df"}, "downloads": -1, "filename": "osxcollector-1.11-py2-none-any.whl", "has_sig": false, "md5_digest": "d4c17d8754ceb151e382493becb3aa49", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 22705, "upload_time": "2019-04-05T15:00:11", "upload_time_iso_8601": "2019-04-05T15:00:11.759731Z", "url": "https://files.pythonhosted.org/packages/1a/ba/b4e37ac787712194e81970750a963546cd216e9c7e828afd50f619b13ea2/osxcollector-1.11-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4824960cf5c8a30ccbe4fd145a23f7d", "sha256": "95a707c080c312493825133ea7a6a6a267b1bb2bb13ec55885466b3031d03752"}, "downloads": -1, "filename": "osxcollector-1.11.tar.gz", "has_sig": false, "md5_digest": "e4824960cf5c8a30ccbe4fd145a23f7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22458, "upload_time": "2019-04-05T15:00:12", "upload_time_iso_8601": "2019-04-05T15:00:12.972762Z", "url": "https://files.pythonhosted.org/packages/d3/f3/ec5c71c1e5a5e04217935be3e870bcb08166090a788930f683a5489a874a/osxcollector-1.11.tar.gz", "yanked": false}], "1.12": [{"comment_text": "", "digests": {"md5": "959fea0021ba4cf2697bae8722d1c073", "sha256": "ccb7e7e064aa1365de37dc1fea7b112f31881ca53f51ca85f8f2741c1177d5c5"}, "downloads": -1, "filename": "osxcollector-1.12-py2-none-any.whl", "has_sig": false, "md5_digest": "959fea0021ba4cf2697bae8722d1c073", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 22734, "upload_time": "2019-04-10T11:12:24", "upload_time_iso_8601": "2019-04-10T11:12:24.067728Z", "url": "https://files.pythonhosted.org/packages/81/14/6eef941f882dc1f3b8746e1f76d385c0ee614976d1cc4769c558cc45821a/osxcollector-1.12-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2343b9aa9d2498956711ef61d79e254", "sha256": "e66ef8f6c7b8e7fe4abbfd23b23477c4690e5e6eae4929adf836d78413d793d8"}, "downloads": -1, "filename": "osxcollector-1.12.tar.gz", "has_sig": false, "md5_digest": "e2343b9aa9d2498956711ef61d79e254", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23080, "upload_time": "2019-04-10T11:12:25", "upload_time_iso_8601": "2019-04-10T11:12:25.220779Z", "url": "https://files.pythonhosted.org/packages/03/62/e980de55c4b75def24ea2e5f9d4a41f9bc6b4e2c7ca2916de5b6c83f5e73/osxcollector-1.12.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "c4c7af07446d9700fcbacf5c259756cd", "sha256": "1160112990df2a2540cd83be86067338ebd3854ac420fd7f6a89c2d1caf36465"}, "downloads": -1, "filename": "osxcollector-1.7-py2-none-any.whl", "has_sig": false, "md5_digest": "c4c7af07446d9700fcbacf5c259756cd", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17021, "upload_time": "2015-12-22T17:21:02", "upload_time_iso_8601": "2015-12-22T17:21:02.590672Z", "url": "https://files.pythonhosted.org/packages/71/a7/49d73ea6a6a7a4891691bd2d20903a992d823cd90ec35fc71a5c04764f78/osxcollector-1.7-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22184e28b8ac08889fc282de472f6156", "sha256": "ea275d0760afc29709605978d74854a67f589803354e52dea97abe1ab2c9c251"}, "downloads": -1, "filename": "osxcollector-1.7.tar.gz", "has_sig": false, "md5_digest": "22184e28b8ac08889fc282de472f6156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15551, "upload_time": "2015-12-22T17:21:08", "upload_time_iso_8601": "2015-12-22T17:21:08.926257Z", "url": "https://files.pythonhosted.org/packages/5b/f7/093081faf6371561969d65aec05eb2ee45f9f9c83b774cfb8ae886005642/osxcollector-1.7.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "038a512b33ac719b3135c1ff30639e71", "sha256": "def96c099ef04c560277527d6443414fe25134d3cf46192c5f2a382fccde19a6"}, "downloads": -1, "filename": "osxcollector-1.8.tar.gz", "has_sig": false, "md5_digest": "038a512b33ac719b3135c1ff30639e71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17640, "upload_time": "2016-04-28T21:00:19", "upload_time_iso_8601": "2016-04-28T21:00:19.882394Z", "url": "https://files.pythonhosted.org/packages/e6/1a/e7c9852dab54c5d9d92c53adf95283a5c78f0088305652f85fa8eb7fcd65/osxcollector-1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "959fea0021ba4cf2697bae8722d1c073", "sha256": "ccb7e7e064aa1365de37dc1fea7b112f31881ca53f51ca85f8f2741c1177d5c5"}, "downloads": -1, "filename": "osxcollector-1.12-py2-none-any.whl", "has_sig": false, "md5_digest": "959fea0021ba4cf2697bae8722d1c073", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 22734, "upload_time": "2019-04-10T11:12:24", "upload_time_iso_8601": "2019-04-10T11:12:24.067728Z", "url": "https://files.pythonhosted.org/packages/81/14/6eef941f882dc1f3b8746e1f76d385c0ee614976d1cc4769c558cc45821a/osxcollector-1.12-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2343b9aa9d2498956711ef61d79e254", "sha256": "e66ef8f6c7b8e7fe4abbfd23b23477c4690e5e6eae4929adf836d78413d793d8"}, "downloads": -1, "filename": "osxcollector-1.12.tar.gz", "has_sig": false, "md5_digest": "e2343b9aa9d2498956711ef61d79e254", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23080, "upload_time": "2019-04-10T11:12:25", "upload_time_iso_8601": "2019-04-10T11:12:25.220779Z", "url": "https://files.pythonhosted.org/packages/03/62/e980de55c4b75def24ea2e5f9d4a41f9bc6b4e2c7ca2916de5b6c83f5e73/osxcollector-1.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:53 2020"}