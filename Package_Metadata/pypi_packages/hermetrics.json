{"info": {"author": "kampamocha", "author_email": "diego.campos.sobrino@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# hermetrics\nPython library for distance and similarity metrics\n\n## Install\n\nFrom pypi:\n\n```bash\npip install hermetrics\n```\n\n## Overview\nHermetrics is a library designed for use in experimentation with string metrics. The library features a base class *Metric* which is highly configurable and can be used to implement custom metrics.\n\nBased on *Metric* are some common string metrics already implemented to compute the *distance* between two strings. Some common edit distance metrics such as *Levenshtein* can be parametrized with different costs for each edit operation, althought have been only thorougly tested with costs equal to 1. Also, the implemented metrics can be used to compare any iterable in addition to strings, but more tests are needed.\n\nA metric has three main methods *distance*, *normalized_distance* and *similarity*. In general the *distance* method computes the absolute distance between two strings, whereas *normalized_distance* can be used to scale the distance to a particular range, usually (0,1), and the *similarity* method being normally defined as (1-*normalized_distance*).\n\nThe normalization of the distance can be customized overriding the auxiliary methods for its computation. Those methods are *max_distance*, *min_distance* and *normalize*.\n\n## *Metric* class\n\n*Metric* is a base class that can receive as arguments six specific functions to be used as methods for the metric being implemented. The class constructor just assign the functions received as parameters to the class methods. If ypu omit some parameter then a default method is used, which allows you to implement metrics without the need to rewrite some of the functionality that is common among metrics.\n\n```python\nclass Metric:\n    \"\"\"Class for metric implementations\"\"\"\n\n    def __init__(self, distance=None, max_distance=None, min_distance=None, normalize=None, normalized_distance=None,  similarity=None, name='Generic'):\n        \"\"\"Class constructor - receives a function for distance or similarity evaluation\"\"\"\n        self.name = name\n        self.distance = distance or self.distance\n        self.max_distance = max_distance or self.max_distance\n        self.min_distance = min_distance or self.min_distance\n        self.normalize = normalize or self.normalize        \n        self.normalized_distance = normalized_distance or self.normalized_distance\n        self.similarity = similarity or self.similarity\n```  \n### Default methods\nDescription of default methods for the *Metric* class.\n\nIn general a method of a metric receives three parameters:\n* *source*. The source string or iterable to compare.\n* *target*. The target string or iterable to compare.\n* *cost=1*. If a number, the unit cost for any edit operations. If a tuple, the cost for edit operations in the following order (deletion, insertion, substitution, transposition).\n\n#### distance\nThe *distance* method computes the total cost of transforming the *source* string on the *target* string. The default method just return 0 if the strings are equal and 1 otherwise.\n\n#### max_distance\nReturns the maximum value of the distance between *source* and *target* given a specific *cost* for edit operations. The default method just return 1 given *source* and *target* don't have both length=0, in that case just return 0.\n\n#### min_distance\nReturn 0.\n\n#### normalize\nThis method is used to scale a value between two limits, usually those obtained by *max_distance* and *min_distance*, to the (0,1) range. Unlike the other methods, *normalize* doesn't receive the usual arguments (*source*, *target* and *cost*), instead receive the following:\n\n* *x*. The value to be normalized.\n* *low=0*. The minimum value for the normalization, usually obtained with *min_distance* method.\n* *high=1*. The maximum value for the normalization, usually obtained with *max_distance* method.\n\n#### normalized distance\nScale the distance between *source* and *target* for specific *cost* to the (0,1) range using *max_distance*, *min_distance* and *normalize*.\n\n#### similarity\nComputes how similar are *source* and *target* given a specific *cost*. By default defined as 1 - *normalized_distance* so the result is also in the (0,1) range.\n\n## Metrics\n\nFor the time being the following metrics have been implemented:\n\n### Hamming\n\nThe Hamming distance count the positions where two strings differ. Normally the Hamming distance is only defined for strings of equal size but in this implementation strings of different size can be compared counting the difference in size as part of the distance.\n\n```python\nfrom hermetrics.hamming import Hamming\n\nham = Hamming()\n\nham.distance('abcd', 'abce') # 1\nham.normalized_distance('abcd', 'abce') # 0.25\nham.similarity('abcd', 'abce') # 0.75\n```  \n\n### Levenshtein\n\nLevenshtein distance is usually known as \"the\" edit distance. It is defined as the minimum number of edit operations (*deletion*, *insertion* and *substitution*) to transform the source string into the target string. The algorithm for distance computation is implemented using the dynamic programming approach with the full matrix construction, althought there are optimizations for time and space complexity those are not implemented here.\n\n```python\nfrom hermetrics.levenshtein import Levenshtein\n\nlev = Levenshtein()\n\nlev.distance('ace', 'abcde') # 2\nlev.normalized_distance('ace', 'abcde') # 0.4\nlev.similarity('ace', 'abcde') # 0.6\n\n# With cost=2\nlev.distance('ace', 'abcde', 2) # 4\nlev.normalized_distance('ace', 'abcde', 2) # 0.4\nlev.similarity('ace', 'abcde', 2) # 0.6\n\n# With different costs for deletion, insertion and substituion\nlev.distance('ace', 'abcde', (1, 1.25, 1.5)) # 2.5\nlev.normalized_distance('ace', 'abcde', (1, 1.25, 1.5)) # 0.3571\nlev.similarity('ace', 'abcde', (1, 1.25, 1.5)) # 0.6429\n```  \n\n### OSA (Optimal String Alignment)\n\nThe *OSA* distance is based on the *Levenshtein* distance but counting the *transposition* as a valid edit operation with the restriction that no substring can be transposed more than once.\n\n```python\nfrom hermetrics.osa import Osa\n\nosa = Osa()\n\nosa.distance('abcd', 'abdc') # 1\nosa.normalized_distance('abcd', 'abdc') # 0.25\nosa.similarity('abcd', 'abdc') # 0.75\n\n# With different costs for deletion, insertion, substituion and transposition\nosa.distance('ace', 'abcde', (0.75, 1, 1.25, 1.5)) # 2\nosa.normalized_distance('ace', 'abcde',  (0.75, 1, 1.25, 1.5)) # 0.3478\nosa.similarity('ace', 'abcde',  (0.75, 1, 1.25, 1.5)) # 0.6522\n``` \n\n### Damerau-Levenshtein\n\nThe *Damerau-Levenshtein* distance is like *OSA* but without the restriction on the number of transpositions for the same substring.\n\n```python\nfrom hermetrics.damerau_levenshtein import DamerauLevenshtein\n\ndam = DamerauLevenshtein()\n\ndam.distance('abcd', 'cbad') # 2\ndam.normalized_distance('abcd', 'cbad') # 0.5\ndam.similarity('abcd', 'cbad') # 0.5\n\n# With different costs for deletion, insertion, substituion and transposition\ndam.distance('ace', 'abcde', (0.75, 1, 1.25, 1.5)) # 2\ndam.normalized_distance('ace', 'abcde',  (0.75, 1, 1.25, 1.5)) # 0.3478\ndam.similarity('ace', 'abcde', (0.75, 1, 1.25, 1.5)) # 0.6522\n``` \n\n### Jaccard\n\nThe *Jaccard* index considers the strings as a *bag-of-characters* set and computes the cardinality of the intersection over the cardinality of the union. The distance function for *Jaccard* index is already normalized.\n\n```python\nfrom hermetrics.jaccard import Jaccard\n\njac = Jaccard()\n\njac.distance('abcd', 'abce') # 0.4 \njac.similarity('abcd', 'abce') # 0.6\n``` \n\n### Dice (Sorenson-Dice)\n\nIs related to *Jaccard* index in the following manner:\n\n<img src=\"https://latex.codecogs.com/svg.latex?\\Large&space;D=\\frac{2J}{1+J}\"/>\n\n```python\nfrom hermetrics.dice import Dice\n\ndic = Dice()\n\ndic.distance('abcd', 'abce') # 0.25\ndic.similarity('abcd', 'abce') # 0.75\n``` \n\n### Jaro\n\n*Jaro* distance is based on the *matching* characters present on two strings and the number of transpositions between them. A *matching* occurs when a character of a string is present on the other string but in a position no further away that certain threshold based on the lenght of the strings. The *Jaro* distance is normalized.\n\n```python\nfrom hermetrics.jaro import Jaro\n\njar = Jaro()\n\njar.distance('abcd', 'abe') # 0.278\njar.similarity('abcd', 'abe') # 0.722\n``` \n\n### Jaro-Winkler\n\nExtension of *Jaro* distance with emphasis on the first characters of the strings, so strings that have *matching* characters on the beginning have more similarity than those that have *matching* characters at the end. This metric depends on an additional parameter *p* (with *0<=p<=0.25* and default *p=0.1*) that is a weighting factor for additional score obtained for matching characters at the beginning of the strings..\n\n```python\nfrom hermetrics.jaro_winkler import JaroWinkler\n\njaw = JaroWinkler()\n\njaw.distance('abcd', 'abe') # 0.222\njaw.similarity('abcd', 'abe') # 0.778\n\njaw.similarity('abcd', 'abe', p=0.05) # 0.750\njaw.similarity('abcd', 'abe', p=0.15) # 0.806\njaw.similarity('abcd', 'abe', p=0.25) # 0.861\n``` \n\n## To Do\n\n* Use \\**kwargs instead of cost tuples\n* Weighted Levenshtein\n* Show matrix for Levenshtein like distances\n* Allow variable maximun prefix length in Jaro-Winkler\n* Implement backtracking of operations\n* More metrics\n* Type hints?\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kampamocha/hermetrics", "keywords": "string metric distance similarity", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "hermetrics", "package_url": "https://pypi.org/project/hermetrics/", "platform": "", "project_url": "https://pypi.org/project/hermetrics/", "project_urls": {"Homepage": "https://github.com/kampamocha/hermetrics"}, "release_url": "https://pypi.org/project/hermetrics/0.1.13/", "requires_dist": null, "requires_python": ">=3.0", "summary": "A package for string distance and similarity metrics", "version": "0.1.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>hermetrics</h1>\n<p>Python library for distance and similarity metrics</p>\n<h2>Install</h2>\n<p>From pypi:</p>\n<pre>pip install hermetrics\n</pre>\n<h2>Overview</h2>\n<p>Hermetrics is a library designed for use in experimentation with string metrics. The library features a base class <em>Metric</em> which is highly configurable and can be used to implement custom metrics.</p>\n<p>Based on <em>Metric</em> are some common string metrics already implemented to compute the <em>distance</em> between two strings. Some common edit distance metrics such as <em>Levenshtein</em> can be parametrized with different costs for each edit operation, althought have been only thorougly tested with costs equal to 1. Also, the implemented metrics can be used to compare any iterable in addition to strings, but more tests are needed.</p>\n<p>A metric has three main methods <em>distance</em>, <em>normalized_distance</em> and <em>similarity</em>. In general the <em>distance</em> method computes the absolute distance between two strings, whereas <em>normalized_distance</em> can be used to scale the distance to a particular range, usually (0,1), and the <em>similarity</em> method being normally defined as (1-<em>normalized_distance</em>).</p>\n<p>The normalization of the distance can be customized overriding the auxiliary methods for its computation. Those methods are <em>max_distance</em>, <em>min_distance</em> and <em>normalize</em>.</p>\n<h2><em>Metric</em> class</h2>\n<p><em>Metric</em> is a base class that can receive as arguments six specific functions to be used as methods for the metric being implemented. The class constructor just assign the functions received as parameters to the class methods. If ypu omit some parameter then a default method is used, which allows you to implement metrics without the need to rewrite some of the functionality that is common among metrics.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Metric</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Class for metric implementations\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">max_distance</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">min_distance</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">normalized_distance</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"n\">similarity</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Generic'</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Class constructor - receives a function for distance or similarity evaluation\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">distance</span> <span class=\"o\">=</span> <span class=\"n\">distance</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">distance</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_distance</span> <span class=\"o\">=</span> <span class=\"n\">max_distance</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_distance</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_distance</span> <span class=\"o\">=</span> <span class=\"n\">min_distance</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_distance</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">normalize</span> <span class=\"o\">=</span> <span class=\"n\">normalize</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">normalize</span>        \n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">normalized_distance</span> <span class=\"o\">=</span> <span class=\"n\">normalized_distance</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">normalized_distance</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">similarity</span> <span class=\"o\">=</span> <span class=\"n\">similarity</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">similarity</span>\n</pre>\n<h3>Default methods</h3>\n<p>Description of default methods for the <em>Metric</em> class.</p>\n<p>In general a method of a metric receives three parameters:</p>\n<ul>\n<li><em>source</em>. The source string or iterable to compare.</li>\n<li><em>target</em>. The target string or iterable to compare.</li>\n<li><em>cost=1</em>. If a number, the unit cost for any edit operations. If a tuple, the cost for edit operations in the following order (deletion, insertion, substitution, transposition).</li>\n</ul>\n<h4>distance</h4>\n<p>The <em>distance</em> method computes the total cost of transforming the <em>source</em> string on the <em>target</em> string. The default method just return 0 if the strings are equal and 1 otherwise.</p>\n<h4>max_distance</h4>\n<p>Returns the maximum value of the distance between <em>source</em> and <em>target</em> given a specific <em>cost</em> for edit operations. The default method just return 1 given <em>source</em> and <em>target</em> don't have both length=0, in that case just return 0.</p>\n<h4>min_distance</h4>\n<p>Return 0.</p>\n<h4>normalize</h4>\n<p>This method is used to scale a value between two limits, usually those obtained by <em>max_distance</em> and <em>min_distance</em>, to the (0,1) range. Unlike the other methods, <em>normalize</em> doesn't receive the usual arguments (<em>source</em>, <em>target</em> and <em>cost</em>), instead receive the following:</p>\n<ul>\n<li><em>x</em>. The value to be normalized.</li>\n<li><em>low=0</em>. The minimum value for the normalization, usually obtained with <em>min_distance</em> method.</li>\n<li><em>high=1</em>. The maximum value for the normalization, usually obtained with <em>max_distance</em> method.</li>\n</ul>\n<h4>normalized distance</h4>\n<p>Scale the distance between <em>source</em> and <em>target</em> for specific <em>cost</em> to the (0,1) range using <em>max_distance</em>, <em>min_distance</em> and <em>normalize</em>.</p>\n<h4>similarity</h4>\n<p>Computes how similar are <em>source</em> and <em>target</em> given a specific <em>cost</em>. By default defined as 1 - <em>normalized_distance</em> so the result is also in the (0,1) range.</p>\n<h2>Metrics</h2>\n<p>For the time being the following metrics have been implemented:</p>\n<h3>Hamming</h3>\n<p>The Hamming distance count the positions where two strings differ. Normally the Hamming distance is only defined for strings of equal size but in this implementation strings of different size can be compared counting the difference in size as part of the distance.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hermetrics.hamming</span> <span class=\"kn\">import</span> <span class=\"n\">Hamming</span>\n\n<span class=\"n\">ham</span> <span class=\"o\">=</span> <span class=\"n\">Hamming</span><span class=\"p\">()</span>\n\n<span class=\"n\">ham</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abce'</span><span class=\"p\">)</span> <span class=\"c1\"># 1</span>\n<span class=\"n\">ham</span><span class=\"o\">.</span><span class=\"n\">normalized_distance</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abce'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.25</span>\n<span class=\"n\">ham</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abce'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.75</span>\n</pre>\n<h3>Levenshtein</h3>\n<p>Levenshtein distance is usually known as \"the\" edit distance. It is defined as the minimum number of edit operations (<em>deletion</em>, <em>insertion</em> and <em>substitution</em>) to transform the source string into the target string. The algorithm for distance computation is implemented using the dynamic programming approach with the full matrix construction, althought there are optimizations for time and space complexity those are not implemented here.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hermetrics.levenshtein</span> <span class=\"kn\">import</span> <span class=\"n\">Levenshtein</span>\n\n<span class=\"n\">lev</span> <span class=\"o\">=</span> <span class=\"n\">Levenshtein</span><span class=\"p\">()</span>\n\n<span class=\"n\">lev</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">)</span> <span class=\"c1\"># 2</span>\n<span class=\"n\">lev</span><span class=\"o\">.</span><span class=\"n\">normalized_distance</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.4</span>\n<span class=\"n\">lev</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.6</span>\n\n<span class=\"c1\"># With cost=2</span>\n<span class=\"n\">lev</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># 4</span>\n<span class=\"n\">lev</span><span class=\"o\">.</span><span class=\"n\">normalized_distance</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># 0.4</span>\n<span class=\"n\">lev</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># 0.6</span>\n\n<span class=\"c1\"># With different costs for deletion, insertion and substituion</span>\n<span class=\"n\">lev</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span> <span class=\"c1\"># 2.5</span>\n<span class=\"n\">lev</span><span class=\"o\">.</span><span class=\"n\">normalized_distance</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span> <span class=\"c1\"># 0.3571</span>\n<span class=\"n\">lev</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span> <span class=\"c1\"># 0.6429</span>\n</pre>\n<h3>OSA (Optimal String Alignment)</h3>\n<p>The <em>OSA</em> distance is based on the <em>Levenshtein</em> distance but counting the <em>transposition</em> as a valid edit operation with the restriction that no substring can be transposed more than once.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hermetrics.osa</span> <span class=\"kn\">import</span> <span class=\"n\">Osa</span>\n\n<span class=\"n\">osa</span> <span class=\"o\">=</span> <span class=\"n\">Osa</span><span class=\"p\">()</span>\n\n<span class=\"n\">osa</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abdc'</span><span class=\"p\">)</span> <span class=\"c1\"># 1</span>\n<span class=\"n\">osa</span><span class=\"o\">.</span><span class=\"n\">normalized_distance</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abdc'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.25</span>\n<span class=\"n\">osa</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abdc'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.75</span>\n\n<span class=\"c1\"># With different costs for deletion, insertion, substituion and transposition</span>\n<span class=\"n\">osa</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span> <span class=\"c1\"># 2</span>\n<span class=\"n\">osa</span><span class=\"o\">.</span><span class=\"n\">normalized_distance</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span>  <span class=\"p\">(</span><span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span> <span class=\"c1\"># 0.3478</span>\n<span class=\"n\">osa</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span>  <span class=\"p\">(</span><span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span> <span class=\"c1\"># 0.6522</span>\n</pre>\n<h3>Damerau-Levenshtein</h3>\n<p>The <em>Damerau-Levenshtein</em> distance is like <em>OSA</em> but without the restriction on the number of transpositions for the same substring.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hermetrics.damerau_levenshtein</span> <span class=\"kn\">import</span> <span class=\"n\">DamerauLevenshtein</span>\n\n<span class=\"n\">dam</span> <span class=\"o\">=</span> <span class=\"n\">DamerauLevenshtein</span><span class=\"p\">()</span>\n\n<span class=\"n\">dam</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'cbad'</span><span class=\"p\">)</span> <span class=\"c1\"># 2</span>\n<span class=\"n\">dam</span><span class=\"o\">.</span><span class=\"n\">normalized_distance</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'cbad'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.5</span>\n<span class=\"n\">dam</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'cbad'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.5</span>\n\n<span class=\"c1\"># With different costs for deletion, insertion, substituion and transposition</span>\n<span class=\"n\">dam</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span> <span class=\"c1\"># 2</span>\n<span class=\"n\">dam</span><span class=\"o\">.</span><span class=\"n\">normalized_distance</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span>  <span class=\"p\">(</span><span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span> <span class=\"c1\"># 0.3478</span>\n<span class=\"n\">dam</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'ace'</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span> <span class=\"c1\"># 0.6522</span>\n</pre>\n<h3>Jaccard</h3>\n<p>The <em>Jaccard</em> index considers the strings as a <em>bag-of-characters</em> set and computes the cardinality of the intersection over the cardinality of the union. The distance function for <em>Jaccard</em> index is already normalized.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hermetrics.jaccard</span> <span class=\"kn\">import</span> <span class=\"n\">Jaccard</span>\n\n<span class=\"n\">jac</span> <span class=\"o\">=</span> <span class=\"n\">Jaccard</span><span class=\"p\">()</span>\n\n<span class=\"n\">jac</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abce'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.4 </span>\n<span class=\"n\">jac</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abce'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.6</span>\n</pre>\n<h3>Dice (Sorenson-Dice)</h3>\n<p>Is related to <em>Jaccard</em> index in the following manner:</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a846ecc2e45107eeab631ba07115c47daeadd1a/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b443d5c667261637b324a7d7b312b4a7d\">\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hermetrics.dice</span> <span class=\"kn\">import</span> <span class=\"n\">Dice</span>\n\n<span class=\"n\">dic</span> <span class=\"o\">=</span> <span class=\"n\">Dice</span><span class=\"p\">()</span>\n\n<span class=\"n\">dic</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abce'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.25</span>\n<span class=\"n\">dic</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abce'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.75</span>\n</pre>\n<h3>Jaro</h3>\n<p><em>Jaro</em> distance is based on the <em>matching</em> characters present on two strings and the number of transpositions between them. A <em>matching</em> occurs when a character of a string is present on the other string but in a position no further away that certain threshold based on the lenght of the strings. The <em>Jaro</em> distance is normalized.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hermetrics.jaro</span> <span class=\"kn\">import</span> <span class=\"n\">Jaro</span>\n\n<span class=\"n\">jar</span> <span class=\"o\">=</span> <span class=\"n\">Jaro</span><span class=\"p\">()</span>\n\n<span class=\"n\">jar</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abe'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.278</span>\n<span class=\"n\">jar</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abe'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.722</span>\n</pre>\n<h3>Jaro-Winkler</h3>\n<p>Extension of <em>Jaro</em> distance with emphasis on the first characters of the strings, so strings that have <em>matching</em> characters on the beginning have more similarity than those that have <em>matching</em> characters at the end. This metric depends on an additional parameter <em>p</em> (with <em>0&lt;=p&lt;=0.25</em> and default <em>p=0.1</em>) that is a weighting factor for additional score obtained for matching characters at the beginning of the strings..</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hermetrics.jaro_winkler</span> <span class=\"kn\">import</span> <span class=\"n\">JaroWinkler</span>\n\n<span class=\"n\">jaw</span> <span class=\"o\">=</span> <span class=\"n\">JaroWinkler</span><span class=\"p\">()</span>\n\n<span class=\"n\">jaw</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abe'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.222</span>\n<span class=\"n\">jaw</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abe'</span><span class=\"p\">)</span> <span class=\"c1\"># 0.778</span>\n\n<span class=\"n\">jaw</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abe'</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">)</span> <span class=\"c1\"># 0.750</span>\n<span class=\"n\">jaw</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abe'</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.15</span><span class=\"p\">)</span> <span class=\"c1\"># 0.806</span>\n<span class=\"n\">jaw</span><span class=\"o\">.</span><span class=\"n\">similarity</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span> <span class=\"s1\">'abe'</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.25</span><span class=\"p\">)</span> <span class=\"c1\"># 0.861</span>\n</pre>\n<h2>To Do</h2>\n<ul>\n<li>Use **kwargs instead of cost tuples</li>\n<li>Weighted Levenshtein</li>\n<li>Show matrix for Levenshtein like distances</li>\n<li>Allow variable maximun prefix length in Jaro-Winkler</li>\n<li>Implement backtracking of operations</li>\n<li>More metrics</li>\n<li>Type hints?</li>\n</ul>\n\n          </div>"}, "last_serial": 6125723, "releases": {"0.1.13": [{"comment_text": "", "digests": {"md5": "3dcd16b1c0667d99c4d5ed4060165123", "sha256": "bd9de76b36f5351cd7eda56b1e971ca89f89a7c07c50dbac55a54828f1180ebf"}, "downloads": -1, "filename": "hermetrics-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "3dcd16b1c0667d99c4d5ed4060165123", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 19193, "upload_time": "2019-11-12T18:34:00", "upload_time_iso_8601": "2019-11-12T18:34:00.465633Z", "url": "https://files.pythonhosted.org/packages/d2/e6/086fc1e10844898e219e511f807378d0401cf56233339f6135f05092e144/hermetrics-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4918dc025d3e991bef23e988fd87bdc6", "sha256": "dbc0e3e401c5d583c6c2ee3f0f39604144ac993abf3172e4577bff0220104321"}, "downloads": -1, "filename": "hermetrics-0.1.13.tar.gz", "has_sig": false, "md5_digest": "4918dc025d3e991bef23e988fd87bdc6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 10338, "upload_time": "2019-11-12T18:34:02", "upload_time_iso_8601": "2019-11-12T18:34:02.886503Z", "url": "https://files.pythonhosted.org/packages/a1/7d/43d7f8c7921cd3c718f89beacf7cc87d2fd185e0e4220841290d2915b654/hermetrics-0.1.13.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3dcd16b1c0667d99c4d5ed4060165123", "sha256": "bd9de76b36f5351cd7eda56b1e971ca89f89a7c07c50dbac55a54828f1180ebf"}, "downloads": -1, "filename": "hermetrics-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "3dcd16b1c0667d99c4d5ed4060165123", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 19193, "upload_time": "2019-11-12T18:34:00", "upload_time_iso_8601": "2019-11-12T18:34:00.465633Z", "url": "https://files.pythonhosted.org/packages/d2/e6/086fc1e10844898e219e511f807378d0401cf56233339f6135f05092e144/hermetrics-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4918dc025d3e991bef23e988fd87bdc6", "sha256": "dbc0e3e401c5d583c6c2ee3f0f39604144ac993abf3172e4577bff0220104321"}, "downloads": -1, "filename": "hermetrics-0.1.13.tar.gz", "has_sig": false, "md5_digest": "4918dc025d3e991bef23e988fd87bdc6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 10338, "upload_time": "2019-11-12T18:34:02", "upload_time_iso_8601": "2019-11-12T18:34:02.886503Z", "url": "https://files.pythonhosted.org/packages/a1/7d/43d7f8c7921cd3c718f89beacf7cc87d2fd185e0e4220841290d2915b654/hermetrics-0.1.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:32 2020"}