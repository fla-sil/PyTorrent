{"info": {"author": "Andrea Dittadi", "author_email": "andrea.dittadi@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Multi-object datasets\n\nTools to generate and use multi-object datasets.\nThe datasets consist of images and a dictionary of labels, where each image is\nlabeled with 1) the number of objects in it and 2) each object's attributes. \n\nUsing datasets only requires `numpy` as datasets are `.npz`. \nGenerating sprites requires `scikit-image`. Tools for using the\ndatasets in PyTorch are provided, with usage examples.\n\n## Basic usage (pip package)\n\n1) Either download one of the [datasets](#available-datasets) in `generated/`, \n   or [generate a new one](#generating-a-new-dataset).\n2) Place the `.npz` dataset in \n   `/path/to/data/`. \n3) `pip install multiobject`\n4) Usage in PyTorch:\n\t```python\n\tfrom multiobject.pytorch import MultiObjectDataLoader, MultiObjectDataset\n\tdataset_path = '/path/to/data/some_dataset.npz'\n\ttrain_set = MultiObjectDataset(dataset_path, train=True)\n\ttest_set = MultiObjectDataset(dataset_path, train=False)\n\ttrain_loader = MultiObjectDataLoader(train_set, batch_size=batch_size, shuffle=True)\n\ttest_loader = MultiObjectDataLoader(test_set, batch_size=test_batch_size)\n\t```\n\n\n#### Run demos\n```\nconda create --name multiobject python=3.7\nconda activate multiobject\npip install -r requirements.txt\nCUDA_VISIBLE_DEVICES=0 python demo_vae.py\nCUDA_VISIBLE_DEVICES=0 python demo_count.py\n```\n\n\n## Available datasets\n\nDatasets are available as `.npz` files in `./generated/`.\n\n#### dSprites<sup id=\"a1\">[1](#f1)</sup>\n\nBinary 64x64 RGB images with monochromatic dSprites on a black canvas. \nSprites are 18x18 and 7 different colors, and they can overlap (sum and clip).\n- 100k images with 1 sprite per image [10.6 MB]\n- 100k images with 1 sprite per image, larger sprites (max 28x28) [12.4 MB]\n- 100k images with 0, 1, or 2 (uniformly) sprites per image [11 MB]\n\n![generated generated_dsprites](_readme_figs/generated_dsprites.png)\n\n#### Binarized MNIST\n\nBinary 64x64 single-channel images with MNIST digits on a black canvas.\nDigits are rescaled to 18x18 and binarized, and they can overlap (sum and clip).\nOnly digits from the MNIST training set are used (60k).\n- 100k images with 1 digit per image [4.5 MB]\n- 100k images with 0, 1, or 2 (uniformly) digits per image [4.8 MB]\n\n![generated mnist](_readme_figs/generated_mnist.png)\n\n\n## Generating a new dataset\n\n1) Clone this repo.\n\n2) See [requirements](#requirements), or set up a virtual environment as follows:\n\t```\n\tconda create --name multiobject python=3.7\n\tconda activate multiobject\n\tpip install -r requirements.txt\n\t```\n\n3) Optional: generate a new type of sprites:\n\t1) create a file `sprites/xyz.py` containing a function \n\t`generate_xyz()`, where \"xyz\" denotes the new sprite type\n\t2) in `generate_dataset.py`, add a call to `generate_xyz()` to generate the\n\tcorrect sprites, and add `'xyz'` to the list of supported sprites\n\n4) Call `generate_dataset.py` with the desired sprite type as `--type` argument. \nExample:\n    ```\n    python generate_dataset.py --type dsprites\n    ```\n\nThe sprite attributes are managed automatically when generating a dataset from a set \nof sprites that have per-sprite labels. However, since they are dataset-specific,\nthey have to be defined when creating the sprites.\n\n**Note.** For now, the following parameters have to be customized in `generate_dataset.py` directly:\n- probability distribution over number of objects\n- image size\n- sprite size\n- dataset size\n- whether sprites can overlap\n\n\n## Requirements\n\nTo generate datasets:\n```\nnumpy==1.18.1\nmatplotlib==3.1.2\nscikit_image==0.16.2\ntqdm==4.41.1\npillow==7.0.0\n```\n\nTo run the examples or use the pytorch tools:\n```\ntorch==1.4.0\ntorchvision==0.5.0\n```\n\n\n## Footnotes\n\n<b id=\"f1\"><sup>1</sup></b> This is actually an extension of the original [dSprites](https://github.com/deepmind/dsprites-dataset)\ndataset to many objects and to color images. [\u21a9](#a1)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/addtt/multi-object-datasets", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "multiobject", "package_url": "https://pypi.org/project/multiobject/", "platform": "", "project_url": "https://pypi.org/project/multiobject/", "project_urls": {"Homepage": "https://github.com/addtt/multi-object-datasets"}, "release_url": "https://pypi.org/project/multiobject/0.0.3/", "requires_dist": ["numpy (>=1.17)", "torch (>=1.4)", "tqdm"], "requires_python": ">=3.6", "summary": "Tools to generate and use multi-object datasets", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Multi-object datasets</h1>\n<p>Tools to generate and use multi-object datasets.\nThe datasets consist of images and a dictionary of labels, where each image is\nlabeled with 1) the number of objects in it and 2) each object's attributes.</p>\n<p>Using datasets only requires <code>numpy</code> as datasets are <code>.npz</code>.\nGenerating sprites requires <code>scikit-image</code>. Tools for using the\ndatasets in PyTorch are provided, with usage examples.</p>\n<h2>Basic usage (pip package)</h2>\n<ol>\n<li>Either download one of the <a href=\"#available-datasets\" rel=\"nofollow\">datasets</a> in <code>generated/</code>,\nor <a href=\"#generating-a-new-dataset\" rel=\"nofollow\">generate a new one</a>.</li>\n<li>Place the <code>.npz</code> dataset in\n<code>/path/to/data/</code>.</li>\n<li><code>pip install multiobject</code></li>\n<li>Usage in PyTorch:\n<pre><span class=\"kn\">from</span> <span class=\"nn\">multiobject.pytorch</span> <span class=\"kn\">import</span> <span class=\"n\">MultiObjectDataLoader</span><span class=\"p\">,</span> <span class=\"n\">MultiObjectDataset</span>\n<span class=\"n\">dataset_path</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/data/some_dataset.npz'</span>\n<span class=\"n\">train_set</span> <span class=\"o\">=</span> <span class=\"n\">MultiObjectDataset</span><span class=\"p\">(</span><span class=\"n\">dataset_path</span><span class=\"p\">,</span> <span class=\"n\">train</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">test_set</span> <span class=\"o\">=</span> <span class=\"n\">MultiObjectDataset</span><span class=\"p\">(</span><span class=\"n\">dataset_path</span><span class=\"p\">,</span> <span class=\"n\">train</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">train_loader</span> <span class=\"o\">=</span> <span class=\"n\">MultiObjectDataLoader</span><span class=\"p\">(</span><span class=\"n\">train_set</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">test_loader</span> <span class=\"o\">=</span> <span class=\"n\">MultiObjectDataLoader</span><span class=\"p\">(</span><span class=\"n\">test_set</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">test_batch_size</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<h4>Run demos</h4>\n<pre><code>conda create --name multiobject python=3.7\nconda activate multiobject\npip install -r requirements.txt\nCUDA_VISIBLE_DEVICES=0 python demo_vae.py\nCUDA_VISIBLE_DEVICES=0 python demo_count.py\n</code></pre>\n<h2>Available datasets</h2>\n<p>Datasets are available as <code>.npz</code> files in <code>./generated/</code>.</p>\n<h4>dSprites<sup id=\"a1\"><a href=\"#f1\" rel=\"nofollow\">1</a></sup></h4>\n<p>Binary 64x64 RGB images with monochromatic dSprites on a black canvas.\nSprites are 18x18 and 7 different colors, and they can overlap (sum and clip).</p>\n<ul>\n<li>100k images with 1 sprite per image [10.6 MB]</li>\n<li>100k images with 1 sprite per image, larger sprites (max 28x28) [12.4 MB]</li>\n<li>100k images with 0, 1, or 2 (uniformly) sprites per image [11 MB]</li>\n</ul>\n<p><img alt=\"generated generated_dsprites\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d584001ba7edb70ff9043f2604856e96b09f9ef/5f726561646d655f666967732f67656e6572617465645f64737072697465732e706e67\"></p>\n<h4>Binarized MNIST</h4>\n<p>Binary 64x64 single-channel images with MNIST digits on a black canvas.\nDigits are rescaled to 18x18 and binarized, and they can overlap (sum and clip).\nOnly digits from the MNIST training set are used (60k).</p>\n<ul>\n<li>100k images with 1 digit per image [4.5 MB]</li>\n<li>100k images with 0, 1, or 2 (uniformly) digits per image [4.8 MB]</li>\n</ul>\n<p><img alt=\"generated mnist\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a17f94ee9db7e9943e95d332dfd945c61c954b5e/5f726561646d655f666967732f67656e6572617465645f6d6e6973742e706e67\"></p>\n<h2>Generating a new dataset</h2>\n<ol>\n<li>\n<p>Clone this repo.</p>\n</li>\n<li>\n<p>See <a href=\"#requirements\" rel=\"nofollow\">requirements</a>, or set up a virtual environment as follows:</p>\n<pre><code>conda create --name multiobject python=3.7\nconda activate multiobject\npip install -r requirements.txt\n</code></pre>\n</li>\n<li>\n<p>Optional: generate a new type of sprites:</p>\n<ol>\n<li>create a file <code>sprites/xyz.py</code> containing a function\n<code>generate_xyz()</code>, where \"xyz\" denotes the new sprite type</li>\n<li>in <code>generate_dataset.py</code>, add a call to <code>generate_xyz()</code> to generate the\ncorrect sprites, and add <code>'xyz'</code> to the list of supported sprites</li>\n</ol>\n</li>\n<li>\n<p>Call <code>generate_dataset.py</code> with the desired sprite type as <code>--type</code> argument.\nExample:</p>\n<pre><code>python generate_dataset.py --type dsprites\n</code></pre>\n</li>\n</ol>\n<p>The sprite attributes are managed automatically when generating a dataset from a set\nof sprites that have per-sprite labels. However, since they are dataset-specific,\nthey have to be defined when creating the sprites.</p>\n<p><strong>Note.</strong> For now, the following parameters have to be customized in <code>generate_dataset.py</code> directly:</p>\n<ul>\n<li>probability distribution over number of objects</li>\n<li>image size</li>\n<li>sprite size</li>\n<li>dataset size</li>\n<li>whether sprites can overlap</li>\n</ul>\n<h2>Requirements</h2>\n<p>To generate datasets:</p>\n<pre><code>numpy==1.18.1\nmatplotlib==3.1.2\nscikit_image==0.16.2\ntqdm==4.41.1\npillow==7.0.0\n</code></pre>\n<p>To run the examples or use the pytorch tools:</p>\n<pre><code>torch==1.4.0\ntorchvision==0.5.0\n</code></pre>\n<h2>Footnotes</h2>\n<p><b id=\"f1\"><sup>1</sup></b> This is actually an extension of the original <a href=\"https://github.com/deepmind/dsprites-dataset\" rel=\"nofollow\">dSprites</a>\ndataset to many objects and to color images. <a href=\"#a1\" rel=\"nofollow\">\u21a9</a></p>\n\n          </div>"}, "last_serial": 6647869, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "f0d643b399592a4e4a91c55ee8f3c548", "sha256": "0a062b186886fcca12da8fdeacb0535b183efebcac74ddcd082b968f178f93cd"}, "downloads": -1, "filename": "multiobject-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f0d643b399592a4e4a91c55ee8f3c548", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8137, "upload_time": "2020-02-17T17:31:55", "upload_time_iso_8601": "2020-02-17T17:31:55.724950Z", "url": "https://files.pythonhosted.org/packages/65/2f/7a029462782459b99895104ffe8a56fa8ceb6a63929ab7b4a30dd8394344/multiobject-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bfd947cd01081b73fd5fbf2755e9c5c", "sha256": "4459d8a61e9bc3cae2c2166c0da1d09dc2986dd3605e4eceed690dffdcd56991"}, "downloads": -1, "filename": "multiobject-0.0.3.tar.gz", "has_sig": false, "md5_digest": "7bfd947cd01081b73fd5fbf2755e9c5c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6922, "upload_time": "2020-02-17T17:31:58", "upload_time_iso_8601": "2020-02-17T17:31:58.255380Z", "url": "https://files.pythonhosted.org/packages/6d/13/7608269c70b3ef47d4f5deaab0a0f783319e0db32285971a8828f81b2949/multiobject-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f0d643b399592a4e4a91c55ee8f3c548", "sha256": "0a062b186886fcca12da8fdeacb0535b183efebcac74ddcd082b968f178f93cd"}, "downloads": -1, "filename": "multiobject-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f0d643b399592a4e4a91c55ee8f3c548", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8137, "upload_time": "2020-02-17T17:31:55", "upload_time_iso_8601": "2020-02-17T17:31:55.724950Z", "url": "https://files.pythonhosted.org/packages/65/2f/7a029462782459b99895104ffe8a56fa8ceb6a63929ab7b4a30dd8394344/multiobject-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bfd947cd01081b73fd5fbf2755e9c5c", "sha256": "4459d8a61e9bc3cae2c2166c0da1d09dc2986dd3605e4eceed690dffdcd56991"}, "downloads": -1, "filename": "multiobject-0.0.3.tar.gz", "has_sig": false, "md5_digest": "7bfd947cd01081b73fd5fbf2755e9c5c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6922, "upload_time": "2020-02-17T17:31:58", "upload_time_iso_8601": "2020-02-17T17:31:58.255380Z", "url": "https://files.pythonhosted.org/packages/6d/13/7608269c70b3ef47d4f5deaab0a0f783319e0db32285971a8828f81b2949/multiobject-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:23 2020"}