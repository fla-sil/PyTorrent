{"info": {"author": "Sylvain Boureliou", "author_email": "sylvain.boureliou@makina-corpus.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Zope2", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\r\n============\r\nThis package contains several blueprints for collective.transmogrifier\r\npipelines, dedicated to the Plone product collective.dancing.\r\n \r\n.. contents::\r\n\r\nCredits\r\n======================================\r\n|makinacom|_\r\n\r\n* `Planet Makina Corpus <http://www.makina-corpus.org>`_\r\n* `Contact us <mailto:python@makina-corpus.org>`_\r\n\r\n.. |makinacom| image:: http://depot.makina-corpus.org/public/logo.gif\r\n.. _makinacom:  http://www.makina-corpus.com\r\n\r\n\r\ncollective.blueprint.dancing Installation\r\n===========================================\r\n\r\n * When you're reading this you have probably already run\r\n   ``easy_install collective.blueprint.dancing``. Find out how to install\r\n   setuptools (and EasyInstall) here:\r\n   http://peak.telecommunity.com/DevCenter/EasyInstall\r\n\r\n * Create a file called ``collective.blueprint.dancing-configure.zcml`` in the\r\n   ``/path/to/instance/etc/package-includes`` directory.  The file\r\n   should only contain this::\r\n\r\n       <include package=\"collective.blueprint.dancing\" />\r\n\r\n\r\nAlternatively, if you are using zc.buildout and the plone.recipe.zope2instance\r\nrecipe to manage your project, you can do this:\r\n\r\n * Add ``collective.blueprint.dancing`` to the list of eggs to install, e.g.::\r\n\r\n    [buildout]\r\n    ...\r\n    eggs =\r\n        ...\r\n        collective.blueprint.dancing\r\n\r\n  * Tell the plone.recipe.zope2instance recipe to install a ZCML slug::\r\n\r\n        [instance]\r\n        recipe = plone.recipe.zope2instance\r\n        ...\r\n        zcml =\r\n            collective.blueprint.dancing\r\n\r\n  * Re-run buildout, e.g. with::\r\n\r\n    $ ./bin/buildout\r\n\r\nYou can skip the ZCML slug if you are going to explicitly include the package\r\nfrom another package's configure.zcml file.\r\n\r\nRequirements\r\n------------\r\n * Singing & Dancing - http://pypi.python.org/pypi/collective.dancing\r\n * tested with Plone 3.3.4\r\n\r\n\r\nDetailed Documentation\r\n======================\r\n\r\nImportSubscriber section\r\n==========================\r\n\r\nA ImportSubscriber section allows you to add subscribers to a collective.dancing\r\nchannel.\r\n\r\nThe ImportSubscriber blueprint name is\r\n``collective.blueprint.dancing.importsubscriber``.\r\n\r\nTo determine the subscriber informations, the ImportSubscriber section inspects\r\neach item and looks for the keys email, channel-id and composer-id, as described\r\nbelow. Any item missing the ``email`` keys will be skipped.\r\n\r\nIf the key ``channel-id`` is missing, the ImportSubscriber section looks for the\r\noption ``default-channel-id``. This option defaults to ``default-channel``.\r\n\r\nIf the key ``composer-id`` is missing, the ImportSubscriber section looks for\r\nthe option ``default-composer-id``. This option defaults to ``html``.\r\n\r\nFor each key, the corresponding information will be found among the following:\r\n\r\n* ``_collective.blueprint.dancing.importsubscriber_[sectionname]_[key]``\r\n* ``_collective.blueprint.dancing.importsubscriber_[key]``\r\n* ``_[sectionname]_[key]``\r\n* ``_[key]``\r\n\r\nwhere ``[sectionname]`` is replaced with the name given to the current section,\r\nand ``[key]`` is replaced by ``email``, ``channel-id`` or ``composer-id``. This\r\nallows you to target the right section precisely if needed.\r\n\r\nAlternatively, you can specify what key to use for each information by\r\nspecifying the``[key]-key`` option, which should be a list of keys to try (one\r\nkey per line; use a ``re:`` or ``regexp:`` prefix to specify regular\r\nexpressions).\r\n\r\n    >>> import pprint\r\n\r\n    >>> importsubscriber = \"\"\"\r\n    ... [transmogrifier]\r\n    ... pipeline =\r\n    ...     source\r\n    ...     importsubscriber\r\n    ...     importsubscriber2\r\n    ...     printer\r\n    ...\r\n    ... [source]\r\n    ... blueprint = collective.blueprint.dancing.tests.importsubscribersource\r\n    ...\r\n    ... [importsubscriber]\r\n    ... blueprint = collective.blueprint.dancing.importsubscriber\r\n    ...\r\n    ... [importsubscriber2]\r\n    ... blueprint = collective.blueprint.dancing.importsubscriber\r\n    ... default-channel-id=mychannel\r\n    ... default-composer-id=mycomposer\r\n    ...\r\n    ... [printer]\r\n    ... blueprint = collective.transmogrifier.sections.tests.pprinter\r\n    ... \"\"\"\r\n    >>> registerConfig(u'collective.blueprint.dancing.tests.importsubscriber',\r\n    ...                importsubscriber)\r\n\r\n    >>> transmogrifier(u'collective.blueprint.dancing.tests.importsubscriber')\r\n    [('_email', 'foo@foo.com')]\r\n    [('_email', 'bar@bar.com')]\r\n    [('_email', 'existing@email.com')]\r\n\r\n    >>> pprint.pprint(plone.subscribers)\r\n    (u'foo@foo.com -channel:default-channel - composer:html',\r\n     u'foo@foo.com -channel:mychannel - composer:mycomposer',\r\n     u'bar@bar.com -channel:default-channel - composer:html',\r\n     u'bar@bar.com -channel:mychannel - composer:mycomposer')\r\n\r\n\r\nChange History\r\n=====================\r\n\r\n(name of developer listed in brackets)\r\n\r\n0.2 - (unreleased)\r\n--------------------\r\n\r\n0.1 - 2009-02-10\r\n------------------\r\n- Added ImportSubscriber section. See importsubscriber.txt.\r\n  [sylvainb]\r\n\r\n\r\nDownload\r\n==========\r\n`collective.blueprint.dancing-0.1.zip\r\n<http://pypi.python.org/packages/source/c/collective.blueprint.dancing/collective.blueprint.dancing-0.1.zip#md5=5c08a7a8962f75117b222aa2ed8f7541>`_\r\n(`md5\r\n<http://pypi.python.org/pypi?:action=show_md5&digest=5c08a7a8962f75117b222aa2ed8f7541>`_)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.makina-corpus.com", "keywords": "plone dancing blueprints transmogrifier", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "collective.blueprint.dancing", "package_url": "https://pypi.org/project/collective.blueprint.dancing/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.blueprint.dancing/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.makina-corpus.com"}, "release_url": "https://pypi.org/project/collective.blueprint.dancing/0.2/", "requires_dist": null, "requires_python": null, "summary": "collective.dancing blueprints for collective.transmogrifier pipelines by Makina Corpus", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Introduction</a></h2>\n<p>This package contains several blueprints for collective.transmogrifier\npipelines, dedicated to the Plone product collective.dancing.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id2\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#credits\" id=\"id3\" rel=\"nofollow\">Credits</a></li>\n<li><a href=\"#collective-blueprint-dancing-installation\" id=\"id4\" rel=\"nofollow\">collective.blueprint.dancing Installation</a><ul>\n<li><a href=\"#requirements\" id=\"id5\" rel=\"nofollow\">Requirements</a></li>\n</ul>\n</li>\n<li><a href=\"#detailed-documentation\" id=\"id6\" rel=\"nofollow\">Detailed Documentation</a></li>\n<li><a href=\"#importsubscriber-section\" id=\"id7\" rel=\"nofollow\">ImportSubscriber section</a></li>\n<li><a href=\"#change-history\" id=\"id8\" rel=\"nofollow\">Change History</a><ul>\n<li><a href=\"#unreleased\" id=\"id9\" rel=\"nofollow\">0.2 - (unreleased)</a></li>\n<li><a href=\"#id1\" id=\"id10\" rel=\"nofollow\">0.1 - 2009-02-10</a></li>\n</ul>\n</li>\n<li><a href=\"#download\" id=\"id11\" rel=\"nofollow\">Download</a></li>\n</ul>\n</div>\n</div>\n<div id=\"credits\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Credits</a></h2>\n<p><a href=\"http://www.makina-corpus.com\" rel=\"nofollow\"><img alt=\"makinacom\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a7ff2c6fc5ab8cd2f425946f19dbfbf0aa4c1d7/687474703a2f2f6465706f742e6d616b696e612d636f727075732e6f72672f7075626c69632f6c6f676f2e676966\"></a></p>\n<ul>\n<li><a href=\"http://www.makina-corpus.org\" rel=\"nofollow\">Planet Makina Corpus</a></li>\n<li><a href=\"mailto:python%40makina-corpus.org\">Contact us</a></li>\n</ul>\n</div>\n<div id=\"collective-blueprint-dancing-installation\">\n<h2><a href=\"#id4\" rel=\"nofollow\">collective.blueprint.dancing Installation</a></h2>\n<blockquote>\n<ul>\n<li><p>When you\u2019re reading this you have probably already run\n<tt>easy_install collective.blueprint.dancing</tt>. Find out how to install\nsetuptools (and EasyInstall) here:\n<a href=\"http://peak.telecommunity.com/DevCenter/EasyInstall\" rel=\"nofollow\">http://peak.telecommunity.com/DevCenter/EasyInstall</a></p>\n</li>\n<li><p>Create a file called <tt><span class=\"pre\">collective.blueprint.dancing-configure.zcml</span></tt> in the\n<tt><span class=\"pre\">/path/to/instance/etc/package-includes</span></tt> directory.  The file\nshould only contain this:</p>\n<pre>&lt;include package=\"collective.blueprint.dancing\" /&gt;\n</pre>\n</li>\n</ul>\n</blockquote>\n<p>Alternatively, if you are using zc.buildout and the plone.recipe.zope2instance\nrecipe to manage your project, you can do this:</p>\n<blockquote>\n<ul>\n<li><p>Add <tt>collective.blueprint.dancing</tt> to the list of eggs to install, e.g.:</p>\n<pre>[buildout]\n...\neggs =\n    ...\n    collective.blueprint.dancing\n</pre>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li><p>Tell the plone.recipe.zope2instance recipe to install a ZCML slug:</p>\n<pre>[instance]\nrecipe = plone.recipe.zope2instance\n...\nzcml =\n    collective.blueprint.dancing\n</pre>\n</li>\n<li><p>Re-run buildout, e.g. with:</p>\n<pre>$ ./bin/buildout\n</pre>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>You can skip the ZCML slug if you are going to explicitly include the package\nfrom another package\u2019s configure.zcml file.</p>\n<div id=\"requirements\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Requirements</a></h3>\n<blockquote>\n<ul>\n<li>Singing &amp; Dancing - <a href=\"http://pypi.python.org/pypi/collective.dancing\" rel=\"nofollow\">http://pypi.python.org/pypi/collective.dancing</a></li>\n<li>tested with Plone 3.3.4</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"detailed-documentation\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Detailed Documentation</a></h2>\n</div>\n<div id=\"importsubscriber-section\">\n<h2><a href=\"#id7\" rel=\"nofollow\">ImportSubscriber section</a></h2>\n<p>A ImportSubscriber section allows you to add subscribers to a collective.dancing\nchannel.</p>\n<p>The ImportSubscriber blueprint name is\n<tt>collective.blueprint.dancing.importsubscriber</tt>.</p>\n<p>To determine the subscriber informations, the ImportSubscriber section inspects\neach item and looks for the keys email, channel-id and composer-id, as described\nbelow. Any item missing the <tt>email</tt> keys will be skipped.</p>\n<p>If the key <tt><span class=\"pre\">channel-id</span></tt> is missing, the ImportSubscriber section looks for the\noption <tt><span class=\"pre\">default-channel-id</span></tt>. This option defaults to <tt><span class=\"pre\">default-channel</span></tt>.</p>\n<p>If the key <tt><span class=\"pre\">composer-id</span></tt> is missing, the ImportSubscriber section looks for\nthe option <tt><span class=\"pre\">default-composer-id</span></tt>. This option defaults to <tt>html</tt>.</p>\n<p>For each key, the corresponding information will be found among the following:</p>\n<ul>\n<li><tt>_collective.blueprint.dancing.importsubscriber_[sectionname]_[key]</tt></li>\n<li><tt>_collective.blueprint.dancing.importsubscriber_[key]</tt></li>\n<li><tt>_[sectionname]_[key]</tt></li>\n<li><tt>_[key]</tt></li>\n</ul>\n<p>where <tt>[sectionname]</tt> is replaced with the name given to the current section,\nand <tt>[key]</tt> is replaced by <tt>email</tt>, <tt><span class=\"pre\">channel-id</span></tt> or <tt><span class=\"pre\">composer-id</span></tt>. This\nallows you to target the right section precisely if needed.</p>\n<p>Alternatively, you can specify what key to use for each information by\nspecifying the``[key]-key`` option, which should be a list of keys to try (one\nkey per line; use a <tt>re:</tt> or <tt>regexp:</tt> prefix to specify regular\nexpressions).</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import pprint\n</pre>\n<pre>&gt;&gt;&gt; importsubscriber = \"\"\"\n... [transmogrifier]\n... pipeline =\n...     source\n...     importsubscriber\n...     importsubscriber2\n...     printer\n...\n... [source]\n... blueprint = collective.blueprint.dancing.tests.importsubscribersource\n...\n... [importsubscriber]\n... blueprint = collective.blueprint.dancing.importsubscriber\n...\n... [importsubscriber2]\n... blueprint = collective.blueprint.dancing.importsubscriber\n... default-channel-id=mychannel\n... default-composer-id=mycomposer\n...\n... [printer]\n... blueprint = collective.transmogrifier.sections.tests.pprinter\n... \"\"\"\n&gt;&gt;&gt; registerConfig(u'collective.blueprint.dancing.tests.importsubscriber',\n...                importsubscriber)\n</pre>\n<pre>&gt;&gt;&gt; transmogrifier(u'collective.blueprint.dancing.tests.importsubscriber')\n[('_email', 'foo@foo.com')]\n[('_email', 'bar@bar.com')]\n[('_email', 'existing@email.com')]\n</pre>\n<pre>&gt;&gt;&gt; pprint.pprint(plone.subscribers)\n(u'foo@foo.com -channel:default-channel - composer:html',\n u'foo@foo.com -channel:mychannel - composer:mycomposer',\n u'bar@bar.com -channel:default-channel - composer:html',\n u'bar@bar.com -channel:mychannel - composer:mycomposer')\n</pre>\n</blockquote>\n</div>\n<div id=\"change-history\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Change History</a></h2>\n<p>(name of developer listed in brackets)</p>\n<div id=\"unreleased\">\n<h3><a href=\"#id9\" rel=\"nofollow\">0.2 - (unreleased)</a></h3>\n</div>\n<div id=\"id1\">\n<h3><a href=\"#id10\" rel=\"nofollow\">0.1 - 2009-02-10</a></h3>\n<ul>\n<li>Added ImportSubscriber section. See importsubscriber.txt.\n[sylvainb]</li>\n</ul>\n</div>\n</div>\n<div id=\"download\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Download</a></h2>\n<p><a href=\"http://pypi.python.org/packages/source/c/collective.blueprint.dancing/collective.blueprint.dancing-0.1.zip#md5=5c08a7a8962f75117b222aa2ed8f7541\" rel=\"nofollow\">collective.blueprint.dancing-0.1.zip</a>\n(<a href=\"http://pypi.python.org/pypi?:action=show_md5&amp;digest=5c08a7a8962f75117b222aa2ed8f7541\" rel=\"nofollow\">md5</a>)</p>\n</div>\n\n          </div>"}, "last_serial": 752386, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5c08a7a8962f75117b222aa2ed8f7541", "sha256": "774c1054b69fe271fe0f5fe0388caff8d34b1aad503468d79cc183ba17f2bd8e"}, "downloads": -1, "filename": "collective.blueprint.dancing-0.1.zip", "has_sig": false, "md5_digest": "5c08a7a8962f75117b222aa2ed8f7541", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19855, "upload_time": "2010-02-10T17:06:47", "upload_time_iso_8601": "2010-02-10T17:06:47.816191Z", "url": "https://files.pythonhosted.org/packages/bd/95/81e0422bbf613d0e1e70cee274009ffcd1d6b91d243ac7d976f2e7550980/collective.blueprint.dancing-0.1.zip", "yanked": false}], "0.2": []}, "urls": [], "timestamp": "Thu May  7 22:18:00 2020"}