{"info": {"author": "Ben Mather", "author_email": "brmather1@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Conduction\n\nImplicit heat conduction solver on a structured grid written in Python. It interfaces with PETSc to provide highly scalable meshes and solve the steady-state heat equation using direct or iterative methods.\n\n## Dependencies\n\n- Python 2.7 and above\n- Numpy 1.9 and above\n- Scipy 0.14 and above\n- [mpi4py](http://pythonhosted.org/mpi4py/usrman/index.html)\n- [petsc4py](https://pythonhosted.org/petsc4py/usrman/install.html)\n- [h5py](http://docs.h5py.org/en/latest/mpi.html#building-against-parallel-hdf5) (optional - for saving parallel data)\n- Matplotlib (optional - for visualisation)\n\n### PETSc installation\n\nPETSc is used extensively via the Python frontend, petsc4py. It is required that PETSc be configured and installed on your local machine prior to using this module. You can use pip to install petsc4py and its dependencies.\n\n```shell\npip install [--user] numpy mpi4py\npip install [--user] petsc petsc4py\n```\n\nIf that fails, you must [compile](https://git.dias.ie/itherc/conduction/blob/master/COMPILE.md) these dependencies manually.\n\n## Usage\n\nAll of the scripts in the *tests* directory can be run in parallel, e.g.\n\n```\nmpirun -np 4 python conduction3d_benchmark.py\n```\n\nwhere the number after the `np` flag specifies the number of processors.\n\n### API\n\nA `ConductionND` object can be defined based on the extent of the domain and the number of cells. The simplified use-case below outlines the following tasks:\n\n1. Define a mesh on which to solve the heat equation\n2. Populate the thermal conductivity and heat production fields\n3. Set boundary conditions on the top and bottom walls\n4. Solve for temperature\n\n```python\nfrom conduction import ConductionND\n\n# define the mesh\nminX, minY, minZ = 0.0, 0.0, 0.0\nmaxX, maxY, maxZ = 1.0, 1.0, 1.0\nresX, resY, resZ = 10, 10, 10\n\nmesh = ConductionND((minX, minY, minZ), (maxX, maxY, maxZ), (resX, resY, resZ))\n\n# populate thermal conductivity and heat production fields\nn = resX*resY*resZ\nk = np.ones(n)\nH = np.ones(n)\n\nmesh.update_properties(k, H)\n\n# set boundary conditions\nmesh.boundary_condition(\"maxZ\", 0.0, flux=False) # Dirichlet BC\nmesh.boundary_condition(\"minZ\", 1.0, flux=True) # Neumann BC\n\n# solve temperature\nT = mesh.solve()\n```\n\nMore complex examples can be found in the `Examples` directory.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brmather/conduction", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "conduction", "package_url": "https://pypi.org/project/conduction/", "platform": "", "project_url": "https://pypi.org/project/conduction/", "project_urls": {"Homepage": "https://github.com/brmather/conduction"}, "release_url": "https://pypi.org/project/conduction/0.1/", "requires_dist": null, "requires_python": ">=2.7, >=3.5", "summary": "Python package for solving implicit heat conduction", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Conduction</h1>\n<p>Implicit heat conduction solver on a structured grid written in Python. It interfaces with PETSc to provide highly scalable meshes and solve the steady-state heat equation using direct or iterative methods.</p>\n<h2>Dependencies</h2>\n<ul>\n<li>Python 2.7 and above</li>\n<li>Numpy 1.9 and above</li>\n<li>Scipy 0.14 and above</li>\n<li><a href=\"http://pythonhosted.org/mpi4py/usrman/index.html\" rel=\"nofollow\">mpi4py</a></li>\n<li><a href=\"https://pythonhosted.org/petsc4py/usrman/install.html\" rel=\"nofollow\">petsc4py</a></li>\n<li><a href=\"http://docs.h5py.org/en/latest/mpi.html#building-against-parallel-hdf5\" rel=\"nofollow\">h5py</a> (optional - for saving parallel data)</li>\n<li>Matplotlib (optional - for visualisation)</li>\n</ul>\n<h3>PETSc installation</h3>\n<p>PETSc is used extensively via the Python frontend, petsc4py. It is required that PETSc be configured and installed on your local machine prior to using this module. You can use pip to install petsc4py and its dependencies.</p>\n<pre>pip install <span class=\"o\">[</span>--user<span class=\"o\">]</span> numpy mpi4py\npip install <span class=\"o\">[</span>--user<span class=\"o\">]</span> petsc petsc4py\n</pre>\n<p>If that fails, you must <a href=\"https://git.dias.ie/itherc/conduction/blob/master/COMPILE.md\" rel=\"nofollow\">compile</a> these dependencies manually.</p>\n<h2>Usage</h2>\n<p>All of the scripts in the <em>tests</em> directory can be run in parallel, e.g.</p>\n<pre><code>mpirun -np 4 python conduction3d_benchmark.py\n</code></pre>\n<p>where the number after the <code>np</code> flag specifies the number of processors.</p>\n<h3>API</h3>\n<p>A <code>ConductionND</code> object can be defined based on the extent of the domain and the number of cells. The simplified use-case below outlines the following tasks:</p>\n<ol>\n<li>Define a mesh on which to solve the heat equation</li>\n<li>Populate the thermal conductivity and heat production fields</li>\n<li>Set boundary conditions on the top and bottom walls</li>\n<li>Solve for temperature</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conduction</span> <span class=\"kn\">import</span> <span class=\"n\">ConductionND</span>\n\n<span class=\"c1\"># define the mesh</span>\n<span class=\"n\">minX</span><span class=\"p\">,</span> <span class=\"n\">minY</span><span class=\"p\">,</span> <span class=\"n\">minZ</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span>\n<span class=\"n\">maxX</span><span class=\"p\">,</span> <span class=\"n\">maxY</span><span class=\"p\">,</span> <span class=\"n\">maxZ</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span>\n<span class=\"n\">resX</span><span class=\"p\">,</span> <span class=\"n\">resY</span><span class=\"p\">,</span> <span class=\"n\">resZ</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span>\n\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">ConductionND</span><span class=\"p\">((</span><span class=\"n\">minX</span><span class=\"p\">,</span> <span class=\"n\">minY</span><span class=\"p\">,</span> <span class=\"n\">minZ</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">maxX</span><span class=\"p\">,</span> <span class=\"n\">maxY</span><span class=\"p\">,</span> <span class=\"n\">maxZ</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">resX</span><span class=\"p\">,</span> <span class=\"n\">resY</span><span class=\"p\">,</span> <span class=\"n\">resZ</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># populate thermal conductivity and heat production fields</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">resX</span><span class=\"o\">*</span><span class=\"n\">resY</span><span class=\"o\">*</span><span class=\"n\">resZ</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">update_properties</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set boundary conditions</span>\n<span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">boundary_condition</span><span class=\"p\">(</span><span class=\"s2\">\"maxZ\"</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">flux</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"c1\"># Dirichlet BC</span>\n<span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">boundary_condition</span><span class=\"p\">(</span><span class=\"s2\">\"minZ\"</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">flux</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># Neumann BC</span>\n\n<span class=\"c1\"># solve temperature</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">mesh</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">()</span>\n</pre>\n<p>More complex examples can be found in the <code>Examples</code> directory.</p>\n\n          </div>"}, "last_serial": 6556217, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ac1e996d07667389f3283d8af96111e1", "sha256": "ba3d82ba5570c53fbd6e9496d06ffb59aafcc2dde99591cd9e3dceeca3d8df25"}, "downloads": -1, "filename": "conduction-0.1.tar.gz", "has_sig": false, "md5_digest": "ac1e996d07667389f3283d8af96111e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, >=3.5", "size": 315813, "upload_time": "2020-02-01T23:56:24", "upload_time_iso_8601": "2020-02-01T23:56:24.103087Z", "url": "https://files.pythonhosted.org/packages/0d/a0/db2e682842ad0449869199b9cab5f09d4a2407622897e600131fc35e9eb3/conduction-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac1e996d07667389f3283d8af96111e1", "sha256": "ba3d82ba5570c53fbd6e9496d06ffb59aafcc2dde99591cd9e3dceeca3d8df25"}, "downloads": -1, "filename": "conduction-0.1.tar.gz", "has_sig": false, "md5_digest": "ac1e996d07667389f3283d8af96111e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, >=3.5", "size": 315813, "upload_time": "2020-02-01T23:56:24", "upload_time_iso_8601": "2020-02-01T23:56:24.103087Z", "url": "https://files.pythonhosted.org/packages/0d/a0/db2e682842ad0449869199b9cab5f09d4a2407622897e600131fc35e9eb3/conduction-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:01 2020"}