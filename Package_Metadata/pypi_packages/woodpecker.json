{"info": {"author": "Stefano Romano'", "author_email": "rumix87@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Information Technology", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing :: Traffic Generation", "Topic :: System :: Networking"], "description": "==========\nWoodpecker\n==========\n\n.. image:: https://codeclimate.com/github/steromano87/Woodpecker/badges/gpa.svg\n    :target: https://codeclimate.com/github/steromano87/Woodpecker\n    :alt: Code Climate\n\n.. image:: https://badge.fury.io/py/woodpecker.svg\n    :target: https://badge.fury.io/py/woodpecker\n\n\nWoodpecker is a Python package that aims to be a lightweight --- but complete --- load generator and analysis tool for various environments.\n\nWhile other far more famous tools like HP LoadRunner(R) or Apache JMeter either propose a complex and heavy application to perform load tests or require a very expensive license to work, Woodpecker's main focus is on easiness of use, small memory footprint and smartness in data analysis --- and, most of all, it is an Open Source Software since is released under the GNU LGPL version 3 license.\n\nThis project is still in development phase, but first benchmarks shows that the memory footprint for each Virtual User (here called *spawn*) is about 516 Kb. When the first development phase will be completed, this package will become publicly available for download from PyPi.\n\n\n------------\nRequirements\n------------\nAt the moment the libraries required to run Woodpecker are the following:\n\n- python-dateutil\n\n- colorama\n\n- click\n\n- psutil\n\n- requests\n\nAll of them are hosted on PyPi and can be installed using ``pip`` or ``easy_install``:\n\n``pip install -r requirements.txt``\n\n\n----------------\nPlanned features\n----------------\n- Command-line interface to initialize scenarios, create transactions from HAR files, start/stop controller and remote spawners and analyze results\n- Fully portable results storage in a single SQLite3 file\n- Generic load profile generation by combination of basic ramp elements\n- Capability to generate load on\\:\n    - Web pages using HTTP protocol\n    - SOA services\n    - Databases\n    - Web Video Streams\n    - Sockets\n- Powerful HTML report creation using the Jinja2 templating engine (with PDF output, too)\n- SLA support and real-time or *a posteriori* check\n- Easy parameters retrieval and reuse, also in different transactions\n- Custom transactions support\n- Requests result assertions\n- Different spawning logic (using threads or sub-processes) to optimize memory consumption different architectures\n- Easily switch between different load configurations by changing one parameter in command-line invocation\n- Embedded system monitor (CPU and memory usage) for both controller and spawners", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/steromano87/Woodpecker", "keywords": "load test http analysis loadrunner jmeter transaction", "license": "LGPLv3", "maintainer": null, "maintainer_email": null, "name": "woodpecker", "package_url": "https://pypi.org/project/woodpecker/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/woodpecker/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/steromano87/Woodpecker"}, "release_url": "https://pypi.org/project/woodpecker/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Lightweight Load Test and Analysis Tool", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://codeclimate.com/github/steromano87/Woodpecker\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57ef35ba045a3020b287dcda5dfe528caa2291f2/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f737465726f6d616e6f38372f576f6f647065636b65722f6261646765732f6770612e737667\"></a>\n<a href=\"https://badge.fury.io/py/woodpecker\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/woodpecker.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0cadde233ddf1ca3080868d833f84e9d1492f474/68747470733a2f2f62616467652e667572792e696f2f70792f776f6f647065636b65722e737667\"></a>\n<p>Woodpecker is a Python package that aims to be a lightweight \u2014 but complete \u2014 load generator and analysis tool for various environments.</p>\n<p>While other far more famous tools like HP LoadRunner(R) or Apache JMeter either propose a complex and heavy application to perform load tests or require a very expensive license to work, Woodpecker\u2019s main focus is on easiness of use, small memory footprint and smartness in data analysis \u2014 and, most of all, it is an Open Source Software since is released under the GNU LGPL version 3 license.</p>\n<p>This project is still in development phase, but first benchmarks shows that the memory footprint for each Virtual User (here called <em>spawn</em>) is about 516 Kb. When the first development phase will be completed, this package will become publicly available for download from PyPi.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>At the moment the libraries required to run Woodpecker are the following:</p>\n<ul>\n<li>python-dateutil</li>\n<li>colorama</li>\n<li>click</li>\n<li>psutil</li>\n<li>requests</li>\n</ul>\n<p>All of them are hosted on PyPi and can be installed using <tt>pip</tt> or <tt>easy_install</tt>:</p>\n<p><tt>pip install <span class=\"pre\">-r</span> requirements.txt</tt></p>\n</div>\n<div id=\"planned-features\">\n<h2>Planned features</h2>\n<ul>\n<li>Command-line interface to initialize scenarios, create transactions from HAR files, start/stop controller and remote spawners and analyze results</li>\n<li>Fully portable results storage in a single SQLite3 file</li>\n<li>Generic load profile generation by combination of basic ramp elements</li>\n<li><dl>\n<dt>Capability to generate load on:</dt>\n<dd><ul>\n<li>Web pages using HTTP protocol</li>\n<li>SOA services</li>\n<li>Databases</li>\n<li>Web Video Streams</li>\n<li>Sockets</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>Powerful HTML report creation using the Jinja2 templating engine (with PDF output, too)</li>\n<li>SLA support and real-time or <em>a posteriori</em> check</li>\n<li>Easy parameters retrieval and reuse, also in different transactions</li>\n<li>Custom transactions support</li>\n<li>Requests result assertions</li>\n<li>Different spawning logic (using threads or sub-processes) to optimize memory consumption different architectures</li>\n<li>Easily switch between different load configurations by changing one parameter in command-line invocation</li>\n<li>Embedded system monitor (CPU and memory usage) for both controller and spawners</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1813968, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 03:28:09 2020"}