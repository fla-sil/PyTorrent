{"info": {"author": "BlueBrain Project, EPFL", "author_email": "tristan.carel@epfl.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console :: Curses", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: C++", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Database :: Database Engines/Servers"], "description": "![basalt logo](https://github.com/BlueBrain/basalt/raw/master/doc/source/_static/basalt-logo-400.png)\n\n# Basalt - Graph Storage API for C++ and Python\n\nBasalt is a graph storage API powered by RocksDB persistent\nkey-value store for fast storage like NVMe technologies.\n\n[![DOI](https://zenodo.org/badge/158816247.svg)](https://zenodo.org/badge/latestdoi/158816247)\n[![Build Status](https://api.travis-ci.com/BlueBrain/basalt.svg?token=p3ijqmiSc83uPHF74Ay8&branch=master)](https://travis-ci.org/BlueBrain/basalt)\n\nDocumentation is currently hosted on GitHub: [https://bluebrain.github.io/basalt]\n\n# Development stage\n\nThe C++ and Python APIs of Basalt are stable already, but substantial additions might come in the future. Thus this library development status is still beta.\n\n# Usage\n\n## Python\n\n### Graph Topology API\n\n```python\nclass PLInfluences(basalt.GraphTopology):\n    \"\"\"A directed graph where vertices are programming languages.\n    \"\"\"\n    directed(True)\n\n    class Vertex(Enum):\n        LANGUAGE = 1\n\n    # Declare a vertex type\n    vertex(\"language\", Vertex.LANGUAGE)\n    # Declare a directed edge between 2 programming languages\n    # to represent how they relate.\n    edge(Vertex.LANGUAGE, Vertex.LANGUAGE, name=\"influenced\", plural=\"influenced\")\n\n    @classmethod\n    def load_from_dbpedia(cls):\n        # [...]\n\ng = PLInfluences.load_from_dbpedia(\"/path/on/disk\")\n# Iterate over all vertices of type \"languages\"\nfor language in g.languages:\n  print(language.id, language.data())\n  # Iterate over all vertices connected to vertex `language`\n  # through the `influenced` edge type.\n  for influenced in language.influenced:\n    print(\"  \", influenced.data())\n```\n\n### Low-level Python bindings\n\n```python\n# Load or initialize a graph on disk\ng = basalt.UndirectedGraph(\"/path/on/disk\")\n# Add one vertex of type 0 and identifier 1\ng.vertices.add((0, 1))\n# Insert 10 vertices at once\n# (10, 0), (10, 1), ... (10, 10)\ng.vertices.add(numpy.full((10,), 1, dtype=numpy.int32), # types\n               numpy.arange(10, dtype=numpy.int64)) # ids\n# Connect 2 vertices\ng.edges.add((0, 1), (1, 0))\n# Connect vertex (0, 1) to several vertices at once\n# (0,1)->(1,0), (0,1)->(1,1), ... (0,1)->(1,9)\ng.edges.add((0, 1),\n            numpy.full((9,), 1, dtype=numpy.int32),\n            numpy.arange(9, dtype=numpy.int64)\n# Commit changes on disk\ng.commit()\n```\n\n## C++ API\n\n```cpp\n// Load or initialize a graph on disk\nbasalt::UndirectedGraph g(\"/path/on/disk\");\n// Add one vertex of type 0 and identifier 1\ng.vertices().insert({0, 1});\n// Add one vertex of type 0 and identifier 2\ng.vertices().insert({0, 2});\n// Iterate over vertices\nfor (const auto& vertex: g.vertices()) {\n  std::clog << vertex << '\\n';\n}\n// Connect both vertices\ng.edges().insert({0, 1}, {0, 2}));\nfor (const auto& edge: g.edges()) {\n  std::clog << edge.first << \" -> \" << edge.second << '\\n';\n}\n// Commit changes on disk\ng.commit();\n```\n\n# Installation\n\n## C++ API\n\n### Conan package\n\nThis repository provides a [Conan](https://conan.io/) package to ease integration into your existing projects.\n\n### CMake\n\nIt is also possible to build and install the library using CMake, see [build section](#manual-build-and-installation-instructions) below.\n\n## Python API\n\n### Pypi\n\nPython bindings of Basalt are available on [Pypi](https://pypi.org/simple/basalt).\n\n### Blue Brain 5 supercomputer\n\nBasalt is currently released as module on Blue Brain 5 supercomputer:\n\n```bash\n$ module purge\n$ . /gpfs/bbp.cscs.ch/apps/hpc/jenkins/config/modules.sh\n$ module load py-basalt\n$ python3\nPython 3.6.3 (default, Oct  3 2017, 07:47:49)\n[GCC 6.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import basalt\n>>> basalt.__version__\n'0.2.2'\n>>> basalt.__rocksdb_version__\n'5.17.2'\n```\n\n# Manual build and installation instructions\n\n## Requirements\n\n* [CMake](https://cmake.org) build system, version 3.5.1 or higher.\n* [RocksDB](https://rocksdb.org/), a persistent key-value store,\n  version 4.1.1 or higher.\n* [Python 3](https://python.org/), version 3.5 or higher.\n\n## Getting the code\n\nThis repository grabs a few third-party libraries as *git modules*.\nTo clone them when you clone basalt, use `git clone --recursive` option.\n\nIf you have already cloned basalt, you can get the git submodules with\nthe command:\n`git submodule update --recursive --init`\n\n## Building the library 101\n\n### C++ Library only\n\nTo build the basalt C++ shared library and run the tests:\n```sh\ncd /path/to/basalt\nmkdir build\npushd build\ncmake ..\nCTEST_OUTPUT_ON_FAILURE=1 make all test\n```\n\nTo install the library:\n```sh\npushd build\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local .\nmake all install\n```\n\n### Python 3 bindings\n\nTo build and run the tests:\n\n```sh\ncd /path/to/basalt\npython3 setup.py test\n```\n\nTo install the package:\n* with _pip_: `pip3 install -U .`\n* with _distutils_: `python3 setup.py install`\n* to create binary tarballs:\n  * most simple: `python3 setup.py bdist`\n  * [wheel](https://www.python.org/dev/peps/pep-0427/): `pip3 install wheel; python3 setup.py bdist_wheel`\n  * relocatable archive: `python3 setup.py bdist_dumb --relative`\n\n## CMake variables and targets\n\nMain CMake variables:\n\n* `Basalt_FORMATTING:BOOL`: provide the build target `clang-format` to check C++ code formatting\n* `Basalt_STATIC_ANALYSIS:BOOL`: provide the build target `clang-tidy` to perform static analysis of the C++ code\n* `Basalt_ARCH`: value given to the `-m` compiler option. \"native\" for instance\n* `Basalt_PRECOMMIT:BOOL`: Enable automatic checks before git commits\n* `Basalt_CXX_OPTIMIZE:BOOL`: Compile C++ with optimization\n* `Basalt_CXX_SYMBOLS:BOOL`: Compile C++ with debug symbols\n* `Basalt_CXX_WARNINGS:BOOL=ON`: Compile C++ with warnings\n\nFor a more detailed list, please refer to file `CMakeCache.txt` in CMake build directory.\n\nCMake targets:\n\n* `basalt`: build the pure C++ library (without Python bindings)\n* `_basalt`: build the C++ library with Python bindings\n* `unit-tests`: build a C++ executable testing the C++ pure library\n* `all`: build the 3 targets above\n* `test`: execute the tests. It is recommended to execute the command `ctest --output-on-failure -VV` instead\n* `install`: install the pure C++ library and the CMake configuration required to easily use basalt\n  in another CMake project\n\n## Python setuptools commands\n\nHere are the main Python  setuptools commands available.\n\n* `build`: build native library\n* `test`: build and test the package. It also executes the C++ unit-tests as well as the code snippets in the Sphinx documentation.\n* `install`: install the Python package\n* `doctest`: execute the code snippets in the Sphinx documentation\n* `build_sphinx`: build the Sphinx documentation\n\nFor instance: `python3 setup.py build_sphinx`\n\n# Files Layout\n\n```\n\u251c\u2500\u2500 basalt ................... python code of the package\n\u251c\u2500\u2500 cmake\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hpc-coding-conventions git module for C++ code guidelines\n\u251c\u2500\u2500 dev ...................... development related scripts\n\u251c\u2500\u2500 doc ...................... sphinx documentation source code\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 basalt ............... public headers of the C++ library\n\u251c\u2500\u2500 README.md ................ that's me!\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 basalt ............... C++ library implementation\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 third_party .......... C++ libraries (mostly as git modules)\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 benchmarks ........... scripts to execute before creating a git tag\n    \u251c\u2500\u2500 py ................... python unit-tests\n    \u2514\u2500\u2500 unit ................. C++ unit-tests using Catch2\n```\n\n# Embedded third-parties\n\nExternal libraries are including either by copy/paste or git submodules\nin `src/third_party` directory.\n\n* [Catch2](https://github.com/catchorg/Catch2):\n  modern, C++-native, header-only, test framework for unit-tests, TDD\n  and BDD unit-test library.\n* [fmt](https://github.com/fmtlib/fmt): A modern formatting library\n  **(not part of CMake build yet)**\n* [pybind11](https://pybind11.rtfd.io): Seamless operability between C++11 and Python\n* [SpdLog](https://github.com/gabime/spdlog): Fast C++ logging library.\n\n# Contributing\n\nIf you want to improve the project or you see any issue, every contribution is welcome.\nPlease check [contribution guidelines](CONTRIBUTING.md) for more information.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "basalt", "package_url": "https://pypi.org/project/basalt/", "platform": "", "project_url": "https://pypi.org/project/basalt/", "project_urls": null, "release_url": "https://pypi.org/project/basalt/0.2.9/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Graph API powered by RocksDB persistent key-value store for fast storage", "version": "0.2.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"basalt logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e144fb111bf3ba083a948d129bc1fd5ea26a2134/68747470733a2f2f6769746875622e636f6d2f426c7565427261696e2f626173616c742f7261772f6d61737465722f646f632f736f757263652f5f7374617469632f626173616c742d6c6f676f2d3430302e706e67\"></p>\n<h1>Basalt - Graph Storage API for C++ and Python</h1>\n<p>Basalt is a graph storage API powered by RocksDB persistent\nkey-value store for fast storage like NVMe technologies.</p>\n<p><a href=\"https://zenodo.org/badge/latestdoi/158816247\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/279b154eee274a21006393df8caa71e2c016e60b/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3135383831363234372e737667\"></a>\n<a href=\"https://travis-ci.org/BlueBrain/basalt\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d36022a3ba4305e7f7e202b62d95b3ce026a533e/68747470733a2f2f6170692e7472617669732d63692e636f6d2f426c7565427261696e2f626173616c742e7376673f746f6b656e3d7033696a716d6953633833755048463734417938266272616e63683d6d6173746572\"></a></p>\n<p>Documentation is currently hosted on GitHub: [https://bluebrain.github.io/basalt]</p>\n<h1>Development stage</h1>\n<p>The C++ and Python APIs of Basalt are stable already, but substantial additions might come in the future. Thus this library development status is still beta.</p>\n<h1>Usage</h1>\n<h2>Python</h2>\n<h3>Graph Topology API</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PLInfluences</span><span class=\"p\">(</span><span class=\"n\">basalt</span><span class=\"o\">.</span><span class=\"n\">GraphTopology</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"A directed graph where vertices are programming languages.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">directed</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Vertex</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n        <span class=\"n\">LANGUAGE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n    <span class=\"c1\"># Declare a vertex type</span>\n    <span class=\"n\">vertex</span><span class=\"p\">(</span><span class=\"s2\">\"language\"</span><span class=\"p\">,</span> <span class=\"n\">Vertex</span><span class=\"o\">.</span><span class=\"n\">LANGUAGE</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Declare a directed edge between 2 programming languages</span>\n    <span class=\"c1\"># to represent how they relate.</span>\n    <span class=\"n\">edge</span><span class=\"p\">(</span><span class=\"n\">Vertex</span><span class=\"o\">.</span><span class=\"n\">LANGUAGE</span><span class=\"p\">,</span> <span class=\"n\">Vertex</span><span class=\"o\">.</span><span class=\"n\">LANGUAGE</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"influenced\"</span><span class=\"p\">,</span> <span class=\"n\">plural</span><span class=\"o\">=</span><span class=\"s2\">\"influenced\"</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">load_from_dbpedia</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"c1\"># [...]</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">PLInfluences</span><span class=\"o\">.</span><span class=\"n\">load_from_dbpedia</span><span class=\"p\">(</span><span class=\"s2\">\"/path/on/disk\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Iterate over all vertices of type \"languages\"</span>\n<span class=\"k\">for</span> <span class=\"n\">language</span> <span class=\"ow\">in</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">languages</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">())</span>\n  <span class=\"c1\"># Iterate over all vertices connected to vertex `language`</span>\n  <span class=\"c1\"># through the `influenced` edge type.</span>\n  <span class=\"k\">for</span> <span class=\"n\">influenced</span> <span class=\"ow\">in</span> <span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">influenced</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"  \"</span><span class=\"p\">,</span> <span class=\"n\">influenced</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">())</span>\n</pre>\n<h3>Low-level Python bindings</h3>\n<pre><span class=\"c1\"># Load or initialize a graph on disk</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">basalt</span><span class=\"o\">.</span><span class=\"n\">UndirectedGraph</span><span class=\"p\">(</span><span class=\"s2\">\"/path/on/disk\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Add one vertex of type 0 and identifier 1</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"c1\"># Insert 10 vertices at once</span>\n<span class=\"c1\"># (10, 0), (10, 1), ... (10, 10)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">),</span> <span class=\"c1\"># types</span>\n               <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">int64</span><span class=\"p\">))</span> <span class=\"c1\"># ids</span>\n<span class=\"c1\"># Connect 2 vertices</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"c1\"># Connect vertex (0, 1) to several vertices at once</span>\n<span class=\"c1\"># (0,1)-&gt;(1,0), (0,1)-&gt;(1,1), ... (0,1)-&gt;(1,9)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">((</span><span class=\"mi\">9</span><span class=\"p\">,),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">),</span>\n            <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">int64</span><span class=\"p\">)</span>\n<span class=\"c1\"># Commit changes on disk</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<h2>C++ API</h2>\n<pre><span class=\"c1\">// Load or initialize a graph on disk</span>\n<span class=\"n\">basalt</span><span class=\"o\">::</span><span class=\"n\">UndirectedGraph</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"s\">\"/path/on/disk\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// Add one vertex of type 0 and identifier 1</span>\n<span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">vertices</span><span class=\"p\">().</span><span class=\"n\">insert</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">});</span>\n<span class=\"c1\">// Add one vertex of type 0 and identifier 2</span>\n<span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">vertices</span><span class=\"p\">().</span><span class=\"n\">insert</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">});</span>\n<span class=\"c1\">// Iterate over vertices</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"nl\">vertex</span><span class=\"p\">:</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">vertices</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">clog</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">vertex</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// Connect both vertices</span>\n<span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">edges</span><span class=\"p\">().</span><span class=\"n\">insert</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">}));</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"nl\">edge</span><span class=\"p\">:</span> <span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">edges</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">clog</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">edge</span><span class=\"p\">.</span><span class=\"n\">first</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" -&gt; \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">edge</span><span class=\"p\">.</span><span class=\"n\">second</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// Commit changes on disk</span>\n<span class=\"n\">g</span><span class=\"p\">.</span><span class=\"n\">commit</span><span class=\"p\">();</span>\n</pre>\n<h1>Installation</h1>\n<h2>C++ API</h2>\n<h3>Conan package</h3>\n<p>This repository provides a <a href=\"https://conan.io/\" rel=\"nofollow\">Conan</a> package to ease integration into your existing projects.</p>\n<h3>CMake</h3>\n<p>It is also possible to build and install the library using CMake, see <a href=\"#manual-build-and-installation-instructions\" rel=\"nofollow\">build section</a> below.</p>\n<h2>Python API</h2>\n<h3>Pypi</h3>\n<p>Python bindings of Basalt are available on <a href=\"https://pypi.org/simple/basalt\" rel=\"nofollow\">Pypi</a>.</p>\n<h3>Blue Brain 5 supercomputer</h3>\n<p>Basalt is currently released as module on Blue Brain 5 supercomputer:</p>\n<pre>$ module purge\n$ . /gpfs/bbp.cscs.ch/apps/hpc/jenkins/config/modules.sh\n$ module load py-basalt\n$ python3\nPython <span class=\"m\">3</span>.6.3 <span class=\"o\">(</span>default, Oct  <span class=\"m\">3</span> <span class=\"m\">2017</span>, <span class=\"m\">07</span>:47:49<span class=\"o\">)</span>\n<span class=\"o\">[</span>GCC <span class=\"m\">6</span>.4.0<span class=\"o\">]</span> on linux\nType <span class=\"s2\">\"help\"</span>, <span class=\"s2\">\"copyright\"</span>, <span class=\"s2\">\"credits\"</span> or <span class=\"s2\">\"license\"</span> <span class=\"k\">for</span> more information.\n&gt;&gt;&gt; import basalt\n&gt;&gt;&gt; basalt.__version__\n<span class=\"s1\">'0.2.2'</span>\n&gt;&gt;&gt; basalt.__rocksdb_version__\n<span class=\"s1\">'5.17.2'</span>\n</pre>\n<h1>Manual build and installation instructions</h1>\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://cmake.org\" rel=\"nofollow\">CMake</a> build system, version 3.5.1 or higher.</li>\n<li><a href=\"https://rocksdb.org/\" rel=\"nofollow\">RocksDB</a>, a persistent key-value store,\nversion 4.1.1 or higher.</li>\n<li><a href=\"https://python.org/\" rel=\"nofollow\">Python 3</a>, version 3.5 or higher.</li>\n</ul>\n<h2>Getting the code</h2>\n<p>This repository grabs a few third-party libraries as <em>git modules</em>.\nTo clone them when you clone basalt, use <code>git clone --recursive</code> option.</p>\n<p>If you have already cloned basalt, you can get the git submodules with\nthe command:\n<code>git submodule update --recursive --init</code></p>\n<h2>Building the library 101</h2>\n<h3>C++ Library only</h3>\n<p>To build the basalt C++ shared library and run the tests:</p>\n<pre><span class=\"nb\">cd</span> /path/to/basalt\nmkdir build\n<span class=\"nb\">pushd</span> build\ncmake ..\n<span class=\"nv\">CTEST_OUTPUT_ON_FAILURE</span><span class=\"o\">=</span><span class=\"m\">1</span> make all <span class=\"nb\">test</span>\n</pre>\n<p>To install the library:</p>\n<pre><span class=\"nb\">pushd</span> build\ncmake -DCMAKE_INSTALL_PREFIX<span class=\"o\">=</span>/usr/local .\nmake all install\n</pre>\n<h3>Python 3 bindings</h3>\n<p>To build and run the tests:</p>\n<pre><span class=\"nb\">cd</span> /path/to/basalt\npython3 setup.py <span class=\"nb\">test</span>\n</pre>\n<p>To install the package:</p>\n<ul>\n<li>with <em>pip</em>: <code>pip3 install -U .</code></li>\n<li>with <em>distutils</em>: <code>python3 setup.py install</code></li>\n<li>to create binary tarballs:\n<ul>\n<li>most simple: <code>python3 setup.py bdist</code></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0427/\" rel=\"nofollow\">wheel</a>: <code>pip3 install wheel; python3 setup.py bdist_wheel</code></li>\n<li>relocatable archive: <code>python3 setup.py bdist_dumb --relative</code></li>\n</ul>\n</li>\n</ul>\n<h2>CMake variables and targets</h2>\n<p>Main CMake variables:</p>\n<ul>\n<li><code>Basalt_FORMATTING:BOOL</code>: provide the build target <code>clang-format</code> to check C++ code formatting</li>\n<li><code>Basalt_STATIC_ANALYSIS:BOOL</code>: provide the build target <code>clang-tidy</code> to perform static analysis of the C++ code</li>\n<li><code>Basalt_ARCH</code>: value given to the <code>-m</code> compiler option. \"native\" for instance</li>\n<li><code>Basalt_PRECOMMIT:BOOL</code>: Enable automatic checks before git commits</li>\n<li><code>Basalt_CXX_OPTIMIZE:BOOL</code>: Compile C++ with optimization</li>\n<li><code>Basalt_CXX_SYMBOLS:BOOL</code>: Compile C++ with debug symbols</li>\n<li><code>Basalt_CXX_WARNINGS:BOOL=ON</code>: Compile C++ with warnings</li>\n</ul>\n<p>For a more detailed list, please refer to file <code>CMakeCache.txt</code> in CMake build directory.</p>\n<p>CMake targets:</p>\n<ul>\n<li><code>basalt</code>: build the pure C++ library (without Python bindings)</li>\n<li><code>_basalt</code>: build the C++ library with Python bindings</li>\n<li><code>unit-tests</code>: build a C++ executable testing the C++ pure library</li>\n<li><code>all</code>: build the 3 targets above</li>\n<li><code>test</code>: execute the tests. It is recommended to execute the command <code>ctest --output-on-failure -VV</code> instead</li>\n<li><code>install</code>: install the pure C++ library and the CMake configuration required to easily use basalt\nin another CMake project</li>\n</ul>\n<h2>Python setuptools commands</h2>\n<p>Here are the main Python  setuptools commands available.</p>\n<ul>\n<li><code>build</code>: build native library</li>\n<li><code>test</code>: build and test the package. It also executes the C++ unit-tests as well as the code snippets in the Sphinx documentation.</li>\n<li><code>install</code>: install the Python package</li>\n<li><code>doctest</code>: execute the code snippets in the Sphinx documentation</li>\n<li><code>build_sphinx</code>: build the Sphinx documentation</li>\n</ul>\n<p>For instance: <code>python3 setup.py build_sphinx</code></p>\n<h1>Files Layout</h1>\n<pre><code>\u251c\u2500\u2500 basalt ................... python code of the package\n\u251c\u2500\u2500 cmake\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hpc-coding-conventions git module for C++ code guidelines\n\u251c\u2500\u2500 dev ...................... development related scripts\n\u251c\u2500\u2500 doc ...................... sphinx documentation source code\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 basalt ............... public headers of the C++ library\n\u251c\u2500\u2500 README.md ................ that's me!\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 basalt ............... C++ library implementation\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 third_party .......... C++ libraries (mostly as git modules)\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 benchmarks ........... scripts to execute before creating a git tag\n    \u251c\u2500\u2500 py ................... python unit-tests\n    \u2514\u2500\u2500 unit ................. C++ unit-tests using Catch2\n</code></pre>\n<h1>Embedded third-parties</h1>\n<p>External libraries are including either by copy/paste or git submodules\nin <code>src/third_party</code> directory.</p>\n<ul>\n<li><a href=\"https://github.com/catchorg/Catch2\" rel=\"nofollow\">Catch2</a>:\nmodern, C++-native, header-only, test framework for unit-tests, TDD\nand BDD unit-test library.</li>\n<li><a href=\"https://github.com/fmtlib/fmt\" rel=\"nofollow\">fmt</a>: A modern formatting library\n<strong>(not part of CMake build yet)</strong></li>\n<li><a href=\"https://pybind11.rtfd.io\" rel=\"nofollow\">pybind11</a>: Seamless operability between C++11 and Python</li>\n<li><a href=\"https://github.com/gabime/spdlog\" rel=\"nofollow\">SpdLog</a>: Fast C++ logging library.</li>\n</ul>\n<h1>Contributing</h1>\n<p>If you want to improve the project or you see any issue, every contribution is welcome.\nPlease check <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">contribution guidelines</a> for more information.</p>\n\n          </div>"}, "last_serial": 6661528, "releases": {"0.2.6": [{"comment_text": "", "digests": {"md5": "10c775ec83349952a8a03e370f409c46", "sha256": "d1d3f3dba5142175f5c9cec3d7927c7ce9f4eaffd2bc9079c6f1e23702c63494"}, "downloads": -1, "filename": "basalt-0.2.6.tar.gz", "has_sig": true, "md5_digest": "10c775ec83349952a8a03e370f409c46", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 929885, "upload_time": "2019-08-15T10:04:28", "upload_time_iso_8601": "2019-08-15T10:04:28.407609Z", "url": "https://files.pythonhosted.org/packages/59/9e/7b0a9bce0c49ec565013b56e8822953742a9138ddba378cf95ac0ac71112/basalt-0.2.6.tar.gz", "yanked": false}], "0.2.6.post1": [{"comment_text": "", "digests": {"md5": "1f19cc0ea2a7f11e6f948d5e6af7dd77", "sha256": "a8a375e57d346775ac58e61f826d3df0d5b52199fa5d035015cfda7800735add"}, "downloads": -1, "filename": "basalt-0.2.6.post1.tar.gz", "has_sig": true, "md5_digest": "1f19cc0ea2a7f11e6f948d5e6af7dd77", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1033636, "upload_time": "2019-08-15T12:53:20", "upload_time_iso_8601": "2019-08-15T12:53:20.919367Z", "url": "https://files.pythonhosted.org/packages/69/46/3d8b9e7077aa34d3b2dc762980e6c3b0a0281b2529f6faa7d379a1752ffd/basalt-0.2.6.post1.tar.gz", "yanked": false}], "0.2.6.post2": [{"comment_text": "", "digests": {"md5": "7fead9c8c79878dfc6f81ad31b0452a3", "sha256": "4864af33260bc9fd4ed1a82a00572f439d8fa753f4d32caf7049e7ac18d59c4b"}, "downloads": -1, "filename": "basalt-0.2.6.post2.tar.gz", "has_sig": false, "md5_digest": "7fead9c8c79878dfc6f81ad31b0452a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 930337, "upload_time": "2019-08-15T13:23:01", "upload_time_iso_8601": "2019-08-15T13:23:01.616023Z", "url": "https://files.pythonhosted.org/packages/12/93/45c0a1b5edb7fc3a126f3422d89b911fb3f211e7f01edc78dac5209dc68c/basalt-0.2.6.post2.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "b156b4948b0cb84b996cad89e70f70a6", "sha256": "08302aa0910b343dd39a4ee77770a7ec61e6038be4b060d19b9d1610aa534820"}, "downloads": -1, "filename": "basalt-0.2.7.tar.gz", "has_sig": true, "md5_digest": "b156b4948b0cb84b996cad89e70f70a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1182634, "upload_time": "2019-09-14T23:45:01", "upload_time_iso_8601": "2019-09-14T23:45:01.820800Z", "url": "https://files.pythonhosted.org/packages/9d/29/bb3e9687cd12deee7b030a17728fd6a5be6ffaa5c3f836e4ab74c5697ec9/basalt-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "630e13c18bdbeed9deacbad989ba1521", "sha256": "6fae1b0ea1c5a8462812d820298f91218583d072479ae8b911581f454051c63d"}, "downloads": -1, "filename": "basalt-0.2.8.tar.gz", "has_sig": true, "md5_digest": "630e13c18bdbeed9deacbad989ba1521", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1184657, "upload_time": "2019-11-15T09:13:29", "upload_time_iso_8601": "2019-11-15T09:13:29.050912Z", "url": "https://files.pythonhosted.org/packages/2a/54/5af262bf2e50569e603059253020761d276ce80d221ff86ad7b42ab8d3c2/basalt-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "615738a7cd4b30b083b9c2a24fd9e66d", "sha256": "6769485d62eaf3ee1e8e4900489a0465e9da6be96fa2884921058fc537e4195d"}, "downloads": -1, "filename": "basalt-0.2.9.tar.gz", "has_sig": true, "md5_digest": "615738a7cd4b30b083b9c2a24fd9e66d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1159395, "upload_time": "2020-02-19T15:10:59", "upload_time_iso_8601": "2020-02-19T15:10:59.755485Z", "url": "https://files.pythonhosted.org/packages/fa/e9/4d3b8eff717ca54616dce28139a7597e9cd2233fcda7c95c268a1e69b081/basalt-0.2.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "615738a7cd4b30b083b9c2a24fd9e66d", "sha256": "6769485d62eaf3ee1e8e4900489a0465e9da6be96fa2884921058fc537e4195d"}, "downloads": -1, "filename": "basalt-0.2.9.tar.gz", "has_sig": true, "md5_digest": "615738a7cd4b30b083b9c2a24fd9e66d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1159395, "upload_time": "2020-02-19T15:10:59", "upload_time_iso_8601": "2020-02-19T15:10:59.755485Z", "url": "https://files.pythonhosted.org/packages/fa/e9/4d3b8eff717ca54616dce28139a7597e9cd2233fcda7c95c268a1e69b081/basalt-0.2.9.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:51 2020"}