{"info": {"author": "cymoo", "author_email": "wakenee@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Database", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# Monom: An object mapper for MongoDB with type hints\n\n## Installation\n\n```bash\n$ pip install monom\n```\n\n## About\n\nMonom is designed to manage your models clearly and easily, which is as simple and thin as possible.\n\n* schema declaration using type hints\n\n* document validation on insert and update\n\n* default value, field alias, index declaration, custom converter and validator\n\n* minimum api, least memory burden\n\n-----\n\n## A Quick Example\n\n```python\nfrom monom import *\n\nclass User(EmbeddedModel):\n    name: str\n    email: str\n\nclass Post(Model):\n    user: User\n    title: str\n    content: str\n    tags: List[str]\n    rank: int\n    visible: bool = True\n    created_on: datetime = datetime.utcnow\n    placeholder: Any\n\n    class Meta:\n        required = ['user', 'title']\n        indexes = ['title']\n        converters = {\n            'title': lambda x: x.capitalize()\n        }\n        validators = {\n            'title': lambda x: len(x) > 5\n        }\n\n    @property\n    def url(self):\n        return '/posts/' + str(self.pk)\n\n    @classmethod\n    def find_posts_by_lucy(cls):\n        return Post.find({'user.name': 'Lucy'}).sort('created_on')\n\ndb = MongoClient().get_database('demo')\nPost.set_db(db)\npost = Post(\n    user={'name': 'Lucy', 'email': 'foo@example.com'},\n    # same as the above\n    # user=User(name='Lucy', email='foo@example.com'),\n    title='hello world',\n    content='monom is awesome...',\n    tags=['life', 'art']\n)\npost.save()\nassert post.visible is True\nassert isinstance(post.user, User)\nassert post.user.name == 'Lucy'\n```\n\n-----\n\n## Guide\n\n### Connection\n\nNo extra connection methods. Just pass pymongo's `Database` instance to your model.\n\n```python\nfrom monom import Model, MongoClient\n\nclass MyModel(Model):\n    pass\n\ndb = MongoClient().get_database('demo')\nMyModel.set_db(db)\n```\n\n-----\n\n### Field Type\n\n* `str`, `int`, `float`, `bool`, `bytes`, `datetime`, `ObjectId`: you are familiar with them already\n\n* `dict`: accepts a `dict` regardless of its items\n\n* `list`: accepts a `list` regardless of its items\n\n* subclass of `EmbeddedModel`: represents MongoDB's embedded document\n\n* `List`: `List`[*the above type*] or `List`[`List`[*the above type*]] or any nested depth\n\n* `Any`: any type that can be saved into MongoDB\n\n-----\n\n### Model\n\n#### Model Instance\n\nTo create a new model object, provide values for its fields as constructor keyword arguments.\nMonom will convert and validate these values when constructing the new instance.\n\n```python\nfrom monom import Model\n\nclass User(Model):\n    name: str\n    visible: bool = True\n\nuser = User(name='foo')\n```\n\nYou can declare a field with an initial value, which acts as the field's default value.\nIf the value is a `callable`, it will be called on each saving or inserting.\n\n#### Methods\n\n* `save(full_update=False, *kw)`\n\nSave the data into MongoDB.\n\n1. The new document will be inserted into MongoDB.\n\n2. The existing document will be updated atomically using operator '$set' and '$unset'.\n\n3. `list` mutation cannot be tracked; but you can pass an keyword argument `full_update=True` to perform a full update.\n\n```python\nfrom monom import *\n\nclass User(Model):\n    name: str\n    email: str\n    hobbits: List[str]\n    active: bool = True\n    created_on: datetime = datetime.utcnow\n\n# connect to mongodb\nUser.set_db(MongoClient().get_database('demo'))\n\n# insert a doc\nUser(name='Lucy', email='lucy@foo.com', hobbits=['music', 'sport']).save()\n\n# find a doc filtering out some fields\nuser = User.find_one({}, {'created_on': False})\n\nuser.name = 'foobar'\ndel user.email\n\n# saved with an atomic update\nuser.save()\n\nuser.hobbits.append('programming')\n# to save a doc with changed list items, you should set `full_update=True`\nuser.save(full_update=True)\n\n```\n\n* `delete(**kw)`\n\nDelete the data from MongoDB.\n\n* `pk`\n\nAn alias for the primary key (`_id` in MongoDB).\n\n* `to_dict()`\n\nReturn an ordered dict containing the instance's data with the same order as the field definition order.\n\n* `to_json(**kw)`\n\nReturn a json string. Some specific types (`ObjectId`, `datetime`, etc.) will be handled correctly.\n\n* `get(name, default=None)`\n\nReturn the value for name or default.\n\n#### Class Methods\n\n* `set_db(db)`\n\nPass a `pymongo.database.Database` to the model.\n\n* `set_collection(collection)`\n\nPass a string or a `pymongo.collection.Collection` to the model.\n\nIf it isn't called explicitly, plural form of the model's name will be the collection name.\n\n* `get_db()`\n\n* `get_collection()`\n\n#### CRUD Methods\n\nMonom adds no extra methods to operate MongoDB.\n\nIt proxies a subset of methods in `pymongo.collection:Collection`, which will perform data cleaning and convert the data from query operations to the model object.\n\n* `insert_one`, `insert_many`, `replace_one`, `update_one`, `update_many`, `find_one_and_update`, `find_one_and_replace` will perform data conversion and validation.\n\n* `find_one`, `find`, `find_one_and_delete`, `find_one_and_replace`, `find_one_and_update` will convert query results to the corresponding model instance.\n\n__`find` returns a `Cursor` of model instances instead of dicts. Before dump your documents to json, remember to do a small conversion.__\n\n```python\nfrom monom import *\n\nclass BinData(Model):\n    name: str\n    data: bytes\n\nBinData.set_db(MongoClient().get_database('demo'))\nBinData(name='foo', data=b'abc').save()\nBinData(name='bar', data=b'xyz').save()\n\njson_dumps([bd.to_dict() for bd in BinData.find()])\n# or call pymongo's methods directly\njson_dumps(BinData.get_collection().find())\n```\n\n-----\n\n#### Meta\n\nYou can add extra constraints for your models by defining an inner class named `Meta` in your model or embedded model.\n\n* `required`: the field must exist in your data\n\n```python\nfrom monom import Model\n\nclass User(Model):\n    name: str\n    email: str\n\n    class Meta:\n        required = ['name']\n```\n\n* `validators` and `converters`\n\n```python\nfrom monom import Model\n\nclass User(Model):\n    name: str\n    age: int\n\n    class Meta:\n        validators = {\n            'age': lambda x: x < 200\n        }\n        converters = {\n            'name': lambda x: x.strip()\n        }\n```\n\n* `aliases`: sometimes you may want to save some fields in another names\n\n```python\nfrom monom import Model\n\nclass User(Model):\n    id: int\n    first_name: str\n\n    class Meta:\n        aliases = [\n            ('id', '_id'),\n            ('first_name', 'firstName'),\n        ]\n\nuser = User(id=42, first_name='Lucy')\nuser.id\n# 42\nuser.to_dict()\n# {'_id': 42, 'firstName': 'Lucy'}\n```\n\n* `Indexes`\n\n```python\nfrom monom import Model, DESCENDING\n\nclass FancyModel(Model):\n    class Meta:\n        indexes = [\n            'f1',  # a single key ascending index\n            ('f2', DESCENDING),  # a single key descending index\n            ['f3', 'f4'],  # a compound index both ascending\n            ['f5', ('f6', DESCENDING)],  # a compound index on 'f5' ascending and 'f6' descending\n            [('f7', DESCENDING), ('f8', DESCENDING)],  # a compound index both descending\n            {'key': 'f9', 'expire_after_seconds': 3600, 'unique': True}  # a single key ascending index with ttl and unique property\n        ]\n```\n\n__Index declaration cannot appear in embedded model.__\n\n-----\n\n#### Options\n\n* `dict_class`\n\nThe underlying data of model instance are saved in an ordered dict. You may change it to `bson.son.SON` or other compatible types.\nDefault value is `collections.OrderedDict`.\n\n* `warn_extra_data`\n\nWhether checks extra data that aren't declared in the model and emits some warnings.\nDefault value is `True`.\n\n* `auto_build_index`\n\nWhether enables auto index creation or deletion.\nYou may disable it when in production because index management may be performed as part of a deployment system.\nDefault value is `True`.\n\n__Theses options can be set on `Model` or the subclass of `Model`; if set on `Model`, all subclasses will inherit them.__\n\n```python\nfrom monom import Model\nfrom bson.son import SON\n\nModel.dict_class = SON\n\nclass User(Model):\n    name: str\n\nuser = User(name='foo')\nassert isinstance(user.to_dict(), SON)\n```\n\n-----\n\n### Helpers\n\n* `switch_db`: switch to a different database temporarily\n\n```python\nfrom monom import Model, MongoClient, switch_db\n\nclass FancyModel(Model):\n    pass\n\nfoo_db = MongoClient().get_database('foo')\nFancyModel.set_db(foo_db)\n\nbar_db = MongoClient().get_database('bar')\n\nwith switch_db(FancyModel, bar_db):\n    assert FancyModel.get_db().name == 'bar'\n```\n\n* `switch_collection`: switch to a different collection temporarily\n\n```python\nfrom monom import Model, MongoClient, switch_collection\n\nclass FancyModel(Model):\n    pass\n\ndb = MongoClient().get_database('my-db')\nFancyModel.set_db(db)\n\nwith switch_collection(FancyModel, 'foobar'):\n    assert FancyModel.get_collection().name == 'foobar'\n```\n\n### Logging\n\nIn several cases, some warnings will be emitted. If that's annoying, you can change the logger level or set a new logger.\n\n```python\nimport logging\nfrom monom import get_logger, set_logger\n\n# change level\nget_logger().setLevel(logging.ERROR)\n\n# or set a new logger\nset_logger(logging.getLogger('foobar'))\n```\n\n-----\n\n### Good Old Django-Style\n\nIf you like the classical style, here you are.\n\n```python\nfrom monom.fields import *\nfrom monom import Model, EmbeddedModel, datetime\n\nclass Comment(EmbeddedModel):\n    content = StringField()\n    created_on = DateTimeField(default=datetime.utcnow)\n\nclass Post(Model):\n    id = ObjectIdField(name='_id')\n    title = StringField(required=True, converter=lambda x: x.capitalize())\n    content = StringField(validator=lambda x: len(x) > 50)\n    comments = ArrayField(EmbeddedField(Comment))\n    rank = IntField(max_value=100)\n    visible = BooleanField(default=True)\n```\n\nUsing this style, you can pass `name` (`alias` aka), `required`, `default`, `converter`, `validator` as constructor keyword arguments.\n\n#### One-to-one match with type hints\n\n* `str` -> `StringField`\n\n* `int` -> `IntField`\n\n* `float` -> `FloatField`\n\n* `bool` -> `BooleanField`\n\n* `bytes` -> `BytesField`\n\n* `datetime` -> `DateTimeField`\n\n* `ObjectId` -> `ObjectIdField`\n\n* `dict` -> `DictField`\n\n* subclass of `EmbeddedModel` -> `EmbeddedField`\n\n* `list` -> `ListField`\n\n* `List` -> `ArrayField`\n\n* `Any` -> `AnyField`\n\n-----\n\n### Caveats\n\n* Inheritance of fields through class inheritance cannot work, for it will cause confusing relationships between model and embedded model.\n\n* You'd better not mix type-hints style with django-orm style; if you insist on that the field definition order may not be reserved.\n\n## Tests\n\nTo run the test suite, ensure you are running a local MongoDB instance on the default port and have pytest installed.\n\n```bash\n$ pytest\n```\n\n## Dependencies\n\n* Python >= 3.6\n* pymongo >= 3.7\n\n## License\n\nMIT\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cymoo/monom", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "monom", "package_url": "https://pypi.org/project/monom/", "platform": "any", "project_url": "https://pypi.org/project/monom/", "project_urls": {"Homepage": "https://github.com/cymoo/monom"}, "release_url": "https://pypi.org/project/monom/1.1.0/", "requires_dist": ["pymongo (>=3.7)", "pytest ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "An object mapper for MongoDB with type hints.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Monom: An object mapper for MongoDB with type hints</h1>\n<h2>Installation</h2>\n<pre>$ pip install monom\n</pre>\n<h2>About</h2>\n<p>Monom is designed to manage your models clearly and easily, which is as simple and thin as possible.</p>\n<ul>\n<li>\n<p>schema declaration using type hints</p>\n</li>\n<li>\n<p>document validation on insert and update</p>\n</li>\n<li>\n<p>default value, field alias, index declaration, custom converter and validator</p>\n</li>\n<li>\n<p>minimum api, least memory burden</p>\n</li>\n</ul>\n<hr>\n<h2>A Quick Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">EmbeddedModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">User</span>\n    <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n    <span class=\"n\">rank</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">visible</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">created_on</span><span class=\"p\">:</span> <span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span>\n    <span class=\"n\">placeholder</span><span class=\"p\">:</span> <span class=\"n\">Any</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">]</span>\n        <span class=\"n\">indexes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span>\n        <span class=\"n\">converters</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">capitalize</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">validators</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'/posts/'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find_posts_by_lucy</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({</span><span class=\"s1\">'user.name'</span><span class=\"p\">:</span> <span class=\"s1\">'Lucy'</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"s1\">'created_on'</span><span class=\"p\">)</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">MongoClient</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_database</span><span class=\"p\">(</span><span class=\"s1\">'demo'</span><span class=\"p\">)</span>\n<span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">set_db</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n<span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"p\">(</span>\n    <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Lucy'</span><span class=\"p\">,</span> <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'foo@example.com'</span><span class=\"p\">},</span>\n    <span class=\"c1\"># same as the above</span>\n    <span class=\"c1\"># user=User(name='Lucy', email='foo@example.com'),</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">,</span>\n    <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"s1\">'monom is awesome...'</span><span class=\"p\">,</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'life'</span><span class=\"p\">,</span> <span class=\"s1\">'art'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">visible</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">User</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'Lucy'</span>\n</pre>\n<hr>\n<h2>Guide</h2>\n<h3>Connection</h3>\n<p>No extra connection methods. Just pass pymongo's <code>Database</code> instance to your model.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">MongoClient</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">MongoClient</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_database</span><span class=\"p\">(</span><span class=\"s1\">'demo'</span><span class=\"p\">)</span>\n<span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">set_db</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>Field Type</h3>\n<ul>\n<li>\n<p><code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>bytes</code>, <code>datetime</code>, <code>ObjectId</code>: you are familiar with them already</p>\n</li>\n<li>\n<p><code>dict</code>: accepts a <code>dict</code> regardless of its items</p>\n</li>\n<li>\n<p><code>list</code>: accepts a <code>list</code> regardless of its items</p>\n</li>\n<li>\n<p>subclass of <code>EmbeddedModel</code>: represents MongoDB's embedded document</p>\n</li>\n<li>\n<p><code>List</code>: <code>List</code>[<em>the above type</em>] or <code>List</code>[<code>List</code>[<em>the above type</em>]] or any nested depth</p>\n</li>\n<li>\n<p><code>Any</code>: any type that can be saved into MongoDB</p>\n</li>\n</ul>\n<hr>\n<h3>Model</h3>\n<h4>Model Instance</h4>\n<p>To create a new model object, provide values for its fields as constructor keyword arguments.\nMonom will convert and validate these values when constructing the new instance.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">visible</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n</pre>\n<p>You can declare a field with an initial value, which acts as the field's default value.\nIf the value is a <code>callable</code>, it will be called on each saving or inserting.</p>\n<h4>Methods</h4>\n<ul>\n<li><code>save(full_update=False, *kw)</code></li>\n</ul>\n<p>Save the data into MongoDB.</p>\n<ol>\n<li>\n<p>The new document will be inserted into MongoDB.</p>\n</li>\n<li>\n<p>The existing document will be updated atomically using operator '$set' and '$unset'.</p>\n</li>\n<li>\n<p><code>list</code> mutation cannot be tracked; but you can pass an keyword argument <code>full_update=True</code> to perform a full update.</p>\n</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">hobbits</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n    <span class=\"n\">active</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">created_on</span><span class=\"p\">:</span> <span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span>\n\n<span class=\"c1\"># connect to mongodb</span>\n<span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">set_db</span><span class=\"p\">(</span><span class=\"n\">MongoClient</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_database</span><span class=\"p\">(</span><span class=\"s1\">'demo'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># insert a doc</span>\n<span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Lucy'</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'lucy@foo.com'</span><span class=\"p\">,</span> <span class=\"n\">hobbits</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'music'</span><span class=\"p\">,</span> <span class=\"s1\">'sport'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># find a doc filtering out some fields</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">({},</span> <span class=\"p\">{</span><span class=\"s1\">'created_on'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">})</span>\n\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'foobar'</span>\n<span class=\"k\">del</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span>\n\n<span class=\"c1\"># saved with an atomic update</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">hobbits</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'programming'</span><span class=\"p\">)</span>\n<span class=\"c1\"># to save a doc with changed list items, you should set `full_update=True`</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">full_update</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>delete(**kw)</code></li>\n</ul>\n<p>Delete the data from MongoDB.</p>\n<ul>\n<li><code>pk</code></li>\n</ul>\n<p>An alias for the primary key (<code>_id</code> in MongoDB).</p>\n<ul>\n<li><code>to_dict()</code></li>\n</ul>\n<p>Return an ordered dict containing the instance's data with the same order as the field definition order.</p>\n<ul>\n<li><code>to_json(**kw)</code></li>\n</ul>\n<p>Return a json string. Some specific types (<code>ObjectId</code>, <code>datetime</code>, etc.) will be handled correctly.</p>\n<ul>\n<li><code>get(name, default=None)</code></li>\n</ul>\n<p>Return the value for name or default.</p>\n<h4>Class Methods</h4>\n<ul>\n<li><code>set_db(db)</code></li>\n</ul>\n<p>Pass a <code>pymongo.database.Database</code> to the model.</p>\n<ul>\n<li><code>set_collection(collection)</code></li>\n</ul>\n<p>Pass a string or a <code>pymongo.collection.Collection</code> to the model.</p>\n<p>If it isn't called explicitly, plural form of the model's name will be the collection name.</p>\n<ul>\n<li>\n<p><code>get_db()</code></p>\n</li>\n<li>\n<p><code>get_collection()</code></p>\n</li>\n</ul>\n<h4>CRUD Methods</h4>\n<p>Monom adds no extra methods to operate MongoDB.</p>\n<p>It proxies a subset of methods in <code>pymongo.collection:Collection</code>, which will perform data cleaning and convert the data from query operations to the model object.</p>\n<ul>\n<li>\n<p><code>insert_one</code>, <code>insert_many</code>, <code>replace_one</code>, <code>update_one</code>, <code>update_many</code>, <code>find_one_and_update</code>, <code>find_one_and_replace</code> will perform data conversion and validation.</p>\n</li>\n<li>\n<p><code>find_one</code>, <code>find</code>, <code>find_one_and_delete</code>, <code>find_one_and_replace</code>, <code>find_one_and_update</code> will convert query results to the corresponding model instance.</p>\n</li>\n</ul>\n<p><strong><code>find</code> returns a <code>Cursor</code> of model instances instead of dicts. Before dump your documents to json, remember to do a small conversion.</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BinData</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span>\n\n<span class=\"n\">BinData</span><span class=\"o\">.</span><span class=\"n\">set_db</span><span class=\"p\">(</span><span class=\"n\">MongoClient</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_database</span><span class=\"p\">(</span><span class=\"s1\">'demo'</span><span class=\"p\">))</span>\n<span class=\"n\">BinData</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'abc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"n\">BinData</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'xyz'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"n\">json_dumps</span><span class=\"p\">([</span><span class=\"n\">bd</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">bd</span> <span class=\"ow\">in</span> <span class=\"n\">BinData</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">()])</span>\n<span class=\"c1\"># or call pymongo's methods directly</span>\n<span class=\"n\">json_dumps</span><span class=\"p\">(</span><span class=\"n\">BinData</span><span class=\"o\">.</span><span class=\"n\">get_collection</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span>\n</pre>\n<hr>\n<h4>Meta</h4>\n<p>You can add extra constraints for your models by defining an inner class named <code>Meta</code> in your model or embedded model.</p>\n<ul>\n<li><code>required</code>: the field must exist in your data</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span>\n</pre>\n<ul>\n<li><code>validators</code> and <code>converters</code></li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">validators</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">converters</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n</pre>\n<ul>\n<li><code>aliases</code>: sometimes you may want to save some fields in another names</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">first_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">aliases</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'_id'</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">'first_name'</span><span class=\"p\">,</span> <span class=\"s1\">'firstName'</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">'Lucy'</span><span class=\"p\">)</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span>\n<span class=\"c1\"># 42</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n<span class=\"c1\"># {'_id': 42, 'firstName': 'Lucy'}</span>\n</pre>\n<ul>\n<li><code>Indexes</code></li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">DESCENDING</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FancyModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">indexes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'f1'</span><span class=\"p\">,</span>  <span class=\"c1\"># a single key ascending index</span>\n            <span class=\"p\">(</span><span class=\"s1\">'f2'</span><span class=\"p\">,</span> <span class=\"n\">DESCENDING</span><span class=\"p\">),</span>  <span class=\"c1\"># a single key descending index</span>\n            <span class=\"p\">[</span><span class=\"s1\">'f3'</span><span class=\"p\">,</span> <span class=\"s1\">'f4'</span><span class=\"p\">],</span>  <span class=\"c1\"># a compound index both ascending</span>\n            <span class=\"p\">[</span><span class=\"s1\">'f5'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'f6'</span><span class=\"p\">,</span> <span class=\"n\">DESCENDING</span><span class=\"p\">)],</span>  <span class=\"c1\"># a compound index on 'f5' ascending and 'f6' descending</span>\n            <span class=\"p\">[(</span><span class=\"s1\">'f7'</span><span class=\"p\">,</span> <span class=\"n\">DESCENDING</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'f8'</span><span class=\"p\">,</span> <span class=\"n\">DESCENDING</span><span class=\"p\">)],</span>  <span class=\"c1\"># a compound index both descending</span>\n            <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'f9'</span><span class=\"p\">,</span> <span class=\"s1\">'expire_after_seconds'</span><span class=\"p\">:</span> <span class=\"mi\">3600</span><span class=\"p\">,</span> <span class=\"s1\">'unique'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>  <span class=\"c1\"># a single key ascending index with ttl and unique property</span>\n        <span class=\"p\">]</span>\n</pre>\n<p><strong>Index declaration cannot appear in embedded model.</strong></p>\n<hr>\n<h4>Options</h4>\n<ul>\n<li><code>dict_class</code></li>\n</ul>\n<p>The underlying data of model instance are saved in an ordered dict. You may change it to <code>bson.son.SON</code> or other compatible types.\nDefault value is <code>collections.OrderedDict</code>.</p>\n<ul>\n<li><code>warn_extra_data</code></li>\n</ul>\n<p>Whether checks extra data that aren't declared in the model and emits some warnings.\nDefault value is <code>True</code>.</p>\n<ul>\n<li><code>auto_build_index</code></li>\n</ul>\n<p>Whether enables auto index creation or deletion.\nYou may disable it when in production because index management may be performed as part of a deployment system.\nDefault value is <code>True</code>.</p>\n<p><strong>Theses options can be set on <code>Model</code> or the subclass of <code>Model</code>; if set on <code>Model</code>, all subclasses will inherit them.</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bson.son</span> <span class=\"kn\">import</span> <span class=\"n\">SON</span>\n\n<span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">dict_class</span> <span class=\"o\">=</span> <span class=\"n\">SON</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(),</span> <span class=\"n\">SON</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>Helpers</h3>\n<ul>\n<li><code>switch_db</code>: switch to a different database temporarily</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">MongoClient</span><span class=\"p\">,</span> <span class=\"n\">switch_db</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FancyModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">foo_db</span> <span class=\"o\">=</span> <span class=\"n\">MongoClient</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_database</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"n\">FancyModel</span><span class=\"o\">.</span><span class=\"n\">set_db</span><span class=\"p\">(</span><span class=\"n\">foo_db</span><span class=\"p\">)</span>\n\n<span class=\"n\">bar_db</span> <span class=\"o\">=</span> <span class=\"n\">MongoClient</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_database</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">switch_db</span><span class=\"p\">(</span><span class=\"n\">FancyModel</span><span class=\"p\">,</span> <span class=\"n\">bar_db</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">FancyModel</span><span class=\"o\">.</span><span class=\"n\">get_db</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'bar'</span>\n</pre>\n<ul>\n<li><code>switch_collection</code>: switch to a different collection temporarily</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">MongoClient</span><span class=\"p\">,</span> <span class=\"n\">switch_collection</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FancyModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">MongoClient</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_database</span><span class=\"p\">(</span><span class=\"s1\">'my-db'</span><span class=\"p\">)</span>\n<span class=\"n\">FancyModel</span><span class=\"o\">.</span><span class=\"n\">set_db</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">switch_collection</span><span class=\"p\">(</span><span class=\"n\">FancyModel</span><span class=\"p\">,</span> <span class=\"s1\">'foobar'</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">FancyModel</span><span class=\"o\">.</span><span class=\"n\">get_collection</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'foobar'</span>\n</pre>\n<h3>Logging</h3>\n<p>In several cases, some warnings will be emitted. If that's annoying, you can change the logger level or set a new logger.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span><span class=\"p\">,</span> <span class=\"n\">set_logger</span>\n\n<span class=\"c1\"># change level</span>\n<span class=\"n\">get_logger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or set a new logger</span>\n<span class=\"n\">set_logger</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'foobar'</span><span class=\"p\">))</span>\n</pre>\n<hr>\n<h3>Good Old Django-Style</h3>\n<p>If you like the classical style, here you are.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monom.fields</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">monom</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">EmbeddedModel</span><span class=\"p\">,</span> <span class=\"n\">datetime</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Comment</span><span class=\"p\">(</span><span class=\"n\">EmbeddedModel</span><span class=\"p\">):</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_on</span> <span class=\"o\">=</span> <span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">ObjectIdField</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'_id'</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">converter</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">capitalize</span><span class=\"p\">())</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"n\">ArrayField</span><span class=\"p\">(</span><span class=\"n\">EmbeddedField</span><span class=\"p\">(</span><span class=\"n\">Comment</span><span class=\"p\">))</span>\n    <span class=\"n\">rank</span> <span class=\"o\">=</span> <span class=\"n\">IntField</span><span class=\"p\">(</span><span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">visible</span> <span class=\"o\">=</span> <span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Using this style, you can pass <code>name</code> (<code>alias</code> aka), <code>required</code>, <code>default</code>, <code>converter</code>, <code>validator</code> as constructor keyword arguments.</p>\n<h4>One-to-one match with type hints</h4>\n<ul>\n<li>\n<p><code>str</code> -&gt; <code>StringField</code></p>\n</li>\n<li>\n<p><code>int</code> -&gt; <code>IntField</code></p>\n</li>\n<li>\n<p><code>float</code> -&gt; <code>FloatField</code></p>\n</li>\n<li>\n<p><code>bool</code> -&gt; <code>BooleanField</code></p>\n</li>\n<li>\n<p><code>bytes</code> -&gt; <code>BytesField</code></p>\n</li>\n<li>\n<p><code>datetime</code> -&gt; <code>DateTimeField</code></p>\n</li>\n<li>\n<p><code>ObjectId</code> -&gt; <code>ObjectIdField</code></p>\n</li>\n<li>\n<p><code>dict</code> -&gt; <code>DictField</code></p>\n</li>\n<li>\n<p>subclass of <code>EmbeddedModel</code> -&gt; <code>EmbeddedField</code></p>\n</li>\n<li>\n<p><code>list</code> -&gt; <code>ListField</code></p>\n</li>\n<li>\n<p><code>List</code> -&gt; <code>ArrayField</code></p>\n</li>\n<li>\n<p><code>Any</code> -&gt; <code>AnyField</code></p>\n</li>\n</ul>\n<hr>\n<h3>Caveats</h3>\n<ul>\n<li>\n<p>Inheritance of fields through class inheritance cannot work, for it will cause confusing relationships between model and embedded model.</p>\n</li>\n<li>\n<p>You'd better not mix type-hints style with django-orm style; if you insist on that the field definition order may not be reserved.</p>\n</li>\n</ul>\n<h2>Tests</h2>\n<p>To run the test suite, ensure you are running a local MongoDB instance on the default port and have pytest installed.</p>\n<pre>$ pytest\n</pre>\n<h2>Dependencies</h2>\n<ul>\n<li>Python &gt;= 3.6</li>\n<li>pymongo &gt;= 3.7</li>\n</ul>\n<h2>License</h2>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 6689450, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "eb783c6b93ff1f695c4cc210ff2b0103", "sha256": "68eea5235af037e6762ca405fa126905534681078e114bd56b2f1f0b88e9b649"}, "downloads": -1, "filename": "monom-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb783c6b93ff1f695c4cc210ff2b0103", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21136, "upload_time": "2020-02-21T12:25:44", "upload_time_iso_8601": "2020-02-21T12:25:44.134513Z", "url": "https://files.pythonhosted.org/packages/8b/aa/0c98abcf8e3360fa4acd04a009e2f122674d2e4293ec1b73d0388f0c3e0d/monom-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c07b36ba8c1bbb539362fb7515da11d1", "sha256": "ed2182db4501ab83248768ffeac47f87ab8e8bc409e1feb07af8333a944459a0"}, "downloads": -1, "filename": "monom-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c07b36ba8c1bbb539362fb7515da11d1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23324, "upload_time": "2020-02-21T12:25:47", "upload_time_iso_8601": "2020-02-21T12:25:47.615574Z", "url": "https://files.pythonhosted.org/packages/e3/b9/147ce8b704d812a43b5f0d21e7ecd3fe7eb05b49d6c393b2038c3ee85542/monom-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "fe27a8489b10181d39c84060e8fa97e5", "sha256": "157e3e94ee8d0a3dee131ddd0133c6704cb51cd1a03dd6f31a7621a1b8babeb4"}, "downloads": -1, "filename": "monom-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fe27a8489b10181d39c84060e8fa97e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21131, "upload_time": "2020-02-24T16:09:31", "upload_time_iso_8601": "2020-02-24T16:09:31.719638Z", "url": "https://files.pythonhosted.org/packages/44/7d/03bdfd3ac245d3f07d980f879f43bff84d4274bf7a88b4c73149cbf9314d/monom-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a0112d4f359063659b82d8b58ec0d7d", "sha256": "e621de6caf5b2a00deef30e53dccb087265b40c204e5ced699bbb96541db0a09"}, "downloads": -1, "filename": "monom-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6a0112d4f359063659b82d8b58ec0d7d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23305, "upload_time": "2020-02-24T16:09:34", "upload_time_iso_8601": "2020-02-24T16:09:34.314099Z", "url": "https://files.pythonhosted.org/packages/8b/5a/a57fdb8b0f71765afa7699b1fad1ac98abf7d09e78b3bc04a0edbd95bc17/monom-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe27a8489b10181d39c84060e8fa97e5", "sha256": "157e3e94ee8d0a3dee131ddd0133c6704cb51cd1a03dd6f31a7621a1b8babeb4"}, "downloads": -1, "filename": "monom-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fe27a8489b10181d39c84060e8fa97e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21131, "upload_time": "2020-02-24T16:09:31", "upload_time_iso_8601": "2020-02-24T16:09:31.719638Z", "url": "https://files.pythonhosted.org/packages/44/7d/03bdfd3ac245d3f07d980f879f43bff84d4274bf7a88b4c73149cbf9314d/monom-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a0112d4f359063659b82d8b58ec0d7d", "sha256": "e621de6caf5b2a00deef30e53dccb087265b40c204e5ced699bbb96541db0a09"}, "downloads": -1, "filename": "monom-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6a0112d4f359063659b82d8b58ec0d7d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23305, "upload_time": "2020-02-24T16:09:34", "upload_time_iso_8601": "2020-02-24T16:09:34.314099Z", "url": "https://files.pythonhosted.org/packages/8b/5a/a57fdb8b0f71765afa7699b1fad1ac98abf7d09e78b3bc04a0edbd95bc17/monom-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:07 2020"}