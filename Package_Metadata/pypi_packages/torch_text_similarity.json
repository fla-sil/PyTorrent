{"info": {"author": "ZHANG Zack", "author_email": "850734033@qq.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Topic :: Text Processing :: Linguistic"], "description": "torch-text-similarity\n=====================\n\nImplementations of models and metrics for semantic text similarity.\nIncludes fine-tuning and prediction of models. Thanks for the elegent\nimplementations of @Andriy Mulyar, who has published a lot of useful\ncodes.\n\nInstallation\n============\n\nInstall with pip:\n\n::\n\n    pip install torch-text-similarity\n\nUse\n===\n\nMaps batches of sentence pairs to real-valued scores in the range [0,5]\n\n.. code:: python\n\n    import torch\n\n    from torch_text_similarity import TextSimilarityLearner\n    from torch_text_similarity.data import train_eval_sts_a_dataset\n\n    learner = TextSimilarityLearner(batch_size=10,\n                                    model_name='web-bert-similarity',\n                                    loss_func=torch.nn.MSELoss(),\n                                    learning_rate=5e-5,\n                                    weight_decay=0,\n                                    device=torch.device('cuda:0'))\n\n    train_dataset, eval_dataset = train_eval_sts_a_dataset(learner.bert_tokenizer, path='./data/train.csv')\n\n    learner.load_train_data(train_dataset)\n    learner.train(epoch=1)\n\n    predictions = learner.predict([('The patient is sick.', 'Grass is green.'),\n                                   ('A prescription of acetaminophen 325 mg was given.', ' The patient was given Tylenol.')\n                                   ])\n\n    print(predictions)\n\nMake submission to a semantic text similarity competition\n\n.. code:: python\n\n    import torch\n    import pandas as pd\n\n    from torch_text_similarity import TextSimilarityLearner\n    from torch_text_similarity.data import train_eval_sts_a_dataset\n\n    learner = TextSimilarityLearner(batch_size=10,\n                                    model_name='web-bert-similarity',\n                                    loss_func=torch.nn.MSELoss(),\n                                    learning_rate=5e-5,\n                                    weight_decay=0,\n                                    device=torch.device('cuda:0'))\n\n    train_dataset, eval_dataset = train_eval_sts_a_dataset(learner.bert_tokenizer, path='/home/temp/Data/kaggle/data/train.csv')\n\n    learner.load_train_data(train_dataset)\n    learner.train(epoch=1)\n\n    test_data = pd.read_csv('./data/test.csv')\n    preds_list = []\n    for i, row in test_data.iterrows():\n        text_a = row['text_a']\n        text_b = row['text_b']\n        preds = learner.predict([(text_a, text_b)])[0]\n        preds_list.append(preds)\n\n    submission = pd.DataFrame({\"id\": range(len(preds_list)), \"label\": preds_list})\n    submission.to_csv('./submission.csv', index=False, header=False)\n\nMore `examples </examples>`__.\n\nInstallation\n============\n\nThe data sets in the examples can be found in Google Cloud Drive:\n\n-  `train.csv <https://drive.google.com/open?id=1-qqNudszBOboQHNvQwHp6-hyBPxjGH1I>`__\n-  `test.csv <https://drive.google.com/open?id=1Ph8F0d-JE61MAQicKx24GK29hRXciws9>`__\n-  `sts-train.csv <https://drive.google.com/open?id=1BJCDxzKZDyvxzdtTFBP-gQzcZWmwClGX>`__\n-  `sts-test.csv <https://drive.google.com/open?id=1NGrIg3DnbSjl4uKciL9WsiCFzK8Q726X>`__\n-  `sts-dev.csv <https://drive.google.com/open?id=1OZxOC4Y9XU-ZTXVf78_DPu9edTZaYFRX>`__\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tczhangzhi/torch-text-similarity", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "torch_text_similarity", "package_url": "https://pypi.org/project/torch_text_similarity/", "platform": "", "project_url": "https://pypi.org/project/torch_text_similarity/", "project_urls": {"Homepage": "https://github.com/tczhangzhi/torch-text-similarity"}, "release_url": "https://pypi.org/project/torch_text_similarity/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "Implementations of models and metrics for semantic text similarity. Includes fine-tuning and prediction of models", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"torch-text-similarity\">\n<h2>torch-text-similarity</h2>\n<p>Implementations of models and metrics for semantic text similarity.\nIncludes fine-tuning and prediction of models. Thanks for the elegent\nimplementations of @Andriy Mulyar, who has published a lot of useful\ncodes.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install with pip:</p>\n<pre>pip install torch-text-similarity\n</pre>\n</div>\n<div id=\"use\">\n<h2>Use</h2>\n<p>Maps batches of sentence pairs to real-valued scores in the range [0,5]</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">torch_text_similarity</span> <span class=\"kn\">import</span> <span class=\"n\">TextSimilarityLearner</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch_text_similarity.data</span> <span class=\"kn\">import</span> <span class=\"n\">train_eval_sts_a_dataset</span>\n\n<span class=\"n\">learner</span> <span class=\"o\">=</span> <span class=\"n\">TextSimilarityLearner</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                                <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s1\">'web-bert-similarity'</span><span class=\"p\">,</span>\n                                <span class=\"n\">loss_func</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">MSELoss</span><span class=\"p\">(),</span>\n                                <span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">5e-5</span><span class=\"p\">,</span>\n                                <span class=\"n\">weight_decay</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"s1\">'cuda:0'</span><span class=\"p\">))</span>\n\n<span class=\"n\">train_dataset</span><span class=\"p\">,</span> <span class=\"n\">eval_dataset</span> <span class=\"o\">=</span> <span class=\"n\">train_eval_sts_a_dataset</span><span class=\"p\">(</span><span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">bert_tokenizer</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'./data/train.csv'</span><span class=\"p\">)</span>\n\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">load_train_data</span><span class=\"p\">(</span><span class=\"n\">train_dataset</span><span class=\"p\">)</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">epoch</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">([(</span><span class=\"s1\">'The patient is sick.'</span><span class=\"p\">,</span> <span class=\"s1\">'Grass is green.'</span><span class=\"p\">),</span>\n                               <span class=\"p\">(</span><span class=\"s1\">'A prescription of acetaminophen 325 mg was given.'</span><span class=\"p\">,</span> <span class=\"s1\">' The patient was given Tylenol.'</span><span class=\"p\">)</span>\n                               <span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">predictions</span><span class=\"p\">)</span>\n</pre>\n<p>Make submission to a semantic text similarity competition</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">torch_text_similarity</span> <span class=\"kn\">import</span> <span class=\"n\">TextSimilarityLearner</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch_text_similarity.data</span> <span class=\"kn\">import</span> <span class=\"n\">train_eval_sts_a_dataset</span>\n\n<span class=\"n\">learner</span> <span class=\"o\">=</span> <span class=\"n\">TextSimilarityLearner</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                                <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s1\">'web-bert-similarity'</span><span class=\"p\">,</span>\n                                <span class=\"n\">loss_func</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">MSELoss</span><span class=\"p\">(),</span>\n                                <span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">5e-5</span><span class=\"p\">,</span>\n                                <span class=\"n\">weight_decay</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"s1\">'cuda:0'</span><span class=\"p\">))</span>\n\n<span class=\"n\">train_dataset</span><span class=\"p\">,</span> <span class=\"n\">eval_dataset</span> <span class=\"o\">=</span> <span class=\"n\">train_eval_sts_a_dataset</span><span class=\"p\">(</span><span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">bert_tokenizer</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/home/temp/Data/kaggle/data/train.csv'</span><span class=\"p\">)</span>\n\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">load_train_data</span><span class=\"p\">(</span><span class=\"n\">train_dataset</span><span class=\"p\">)</span>\n<span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">epoch</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">test_data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'./data/test.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">preds_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">test_data</span><span class=\"o\">.</span><span class=\"n\">iterrows</span><span class=\"p\">():</span>\n    <span class=\"n\">text_a</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'text_a'</span><span class=\"p\">]</span>\n    <span class=\"n\">text_b</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'text_b'</span><span class=\"p\">]</span>\n    <span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">([(</span><span class=\"n\">text_a</span><span class=\"p\">,</span> <span class=\"n\">text_b</span><span class=\"p\">)])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">preds_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">)</span>\n\n<span class=\"n\">submission</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">preds_list</span><span class=\"p\">)),</span> <span class=\"s2\">\"label\"</span><span class=\"p\">:</span> <span class=\"n\">preds_list</span><span class=\"p\">})</span>\n<span class=\"n\">submission</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s1\">'./submission.csv'</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>More <a href=\"/examples\" rel=\"nofollow\">examples</a>.</p>\n</div>\n<div id=\"id1\">\n<h2>Installation</h2>\n<p>The data sets in the examples can be found in Google Cloud Drive:</p>\n<ul>\n<li><a href=\"https://drive.google.com/open?id=1-qqNudszBOboQHNvQwHp6-hyBPxjGH1I\" rel=\"nofollow\">train.csv</a></li>\n<li><a href=\"https://drive.google.com/open?id=1Ph8F0d-JE61MAQicKx24GK29hRXciws9\" rel=\"nofollow\">test.csv</a></li>\n<li><a href=\"https://drive.google.com/open?id=1BJCDxzKZDyvxzdtTFBP-gQzcZWmwClGX\" rel=\"nofollow\">sts-train.csv</a></li>\n<li><a href=\"https://drive.google.com/open?id=1NGrIg3DnbSjl4uKciL9WsiCFzK8Q726X\" rel=\"nofollow\">sts-test.csv</a></li>\n<li><a href=\"https://drive.google.com/open?id=1OZxOC4Y9XU-ZTXVf78_DPu9edTZaYFRX\" rel=\"nofollow\">sts-dev.csv</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7030253, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "c92bc077e08cbf34ff3e6ff24a5ac1f4", "sha256": "e6a53bb503c4711ccf3fb6ba7c80f7d588f36f3dd56e919790daf7ebcf8af94e"}, "downloads": -1, "filename": "torch_text_similarity-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c92bc077e08cbf34ff3e6ff24a5ac1f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8053, "upload_time": "2020-04-14T10:58:56", "upload_time_iso_8601": "2020-04-14T10:58:56.504169Z", "url": "https://files.pythonhosted.org/packages/77/73/b156df7d183144b1c51be9d945ae27662418a2535d6c2c3f9629e603085b/torch_text_similarity-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2ac3b89cab9e7956efca659bc7ef5d24", "sha256": "c70d5b2cd0e25841c72027b776b922b481aada20b7f02fd82f73e9849e55a9aa"}, "downloads": -1, "filename": "torch_text_similarity-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2ac3b89cab9e7956efca659bc7ef5d24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8052, "upload_time": "2020-04-14T11:42:10", "upload_time_iso_8601": "2020-04-14T11:42:10.228883Z", "url": "https://files.pythonhosted.org/packages/2e/ec/6e748b7d6e355d5f4360408a101b08fdc1adcc33a16ad56511a9c555f15d/torch_text_similarity-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "bbeaec10cadf08f45bf289ca6bee0500", "sha256": "949ca10ae8f87d6a265378fea5d206b8f7a8df72d917f5737a04571f9c116f78"}, "downloads": -1, "filename": "torch_text_similarity-1.0.4.tar.gz", "has_sig": false, "md5_digest": "bbeaec10cadf08f45bf289ca6bee0500", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8188, "upload_time": "2020-04-16T07:49:56", "upload_time_iso_8601": "2020-04-16T07:49:56.897194Z", "url": "https://files.pythonhosted.org/packages/9f/9a/4fd0e59b8075121fd34e02904e3ce8b6a946c866fa3b322d93acc8463644/torch_text_similarity-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bbeaec10cadf08f45bf289ca6bee0500", "sha256": "949ca10ae8f87d6a265378fea5d206b8f7a8df72d917f5737a04571f9c116f78"}, "downloads": -1, "filename": "torch_text_similarity-1.0.4.tar.gz", "has_sig": false, "md5_digest": "bbeaec10cadf08f45bf289ca6bee0500", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8188, "upload_time": "2020-04-16T07:49:56", "upload_time_iso_8601": "2020-04-16T07:49:56.897194Z", "url": "https://files.pythonhosted.org/packages/9f/9a/4fd0e59b8075121fd34e02904e3ce8b6a946c866fa3b322d93acc8463644/torch_text_similarity-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:50:08 2020"}