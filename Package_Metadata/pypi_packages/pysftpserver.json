{"info": {"author": "Unbit", "author_email": "info@unbit.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Environment :: Other Environment", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Internet :: File Transfer Protocol (FTP)", "Topic :: System :: Shells", "Topic :: System :: System Shells", "Topic :: Utilities"], "description": "#pysftpserver\nAn OpenSSH SFTP wrapper written in Python.\n\n##Features\n* Possibility to [automatically jail users](#authorized_keys_magic) in a virtual chroot environment as soon as they login.\n* Possibility to [automatically forward SFTP requests to another server](#usage).\n* Compatible with both Python 2 and Python 3.\n* Fully extensible and customizable (examples below).\n* Totally conforms to the [SFTP RFC](https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt).\n\n##Installation\nSimply install pysftpserver with pip:\n```bash\n$ pip install pysftpserver # add the --user flag to install it just for you\n```\n\n**Note**: if you'd like to use the [automatic forwarding storage](#usage) you have to explicitly specify the paramiko dependency:\n```bash\n$ pip install pysftpserver[pysftpproxy]\n```\n\nOtherwise, you could always clone this repository and manually launch `setup.py`:\n```bash\n$ git clone https://github.com/unbit/pysftpserver.git\n$ cd pysftpserver\n$ python setup.py install\n```\n\n##Usage\nWe provide a couple of fully working examples:\n\n* **pysftpjail**: an SFTP storage that jails users in a virtual chroot environment.\n* **pysftpproxy**: an SFTP storage that acts as a proxy, forwarding each request to another SFTP server.\n\nYou'll find both our storages in your `$PATH` after the installation, so you can simply launch them by using the appropriate command line executable / arguments:\n\n```\n$ pysftpjail -h\n\nusage: pysftpjail [-h] [--logfile LOGFILE] [--umask UMASK] chroot\n\nAn OpenSSH SFTP server wrapper that jails the user in a chroot directory.\n\npositional arguments:\n  chroot                the path of the chroot jail\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --logfile LOGFILE, -l LOGFILE\n                        path to the logfile\n  --umask UMASK, -u UMASK\n                        set the umask of the SFTP server\n```\n\n```\n$ pysftpproxy -h\n\nusage: pysftpproxy [-h] [-l LOGFILE] [-k private-key-path] [-p PORT] [-a]\n                   [-c ssh config path] [-n known_hosts path] [-d]\n                   user[:password]@hostname\n\nAn OpenSSH SFTP server proxy that forwards each request to a remote server.\n\npositional arguments:\n  user[:password]@hostname\n                        the ssh-url ([user[:password]@]hostname) of the remote\n                        server. The hostname can be specified as a\n                        ssh_config's hostname too. Every missing information\n                        will be gathered from there\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l LOGFILE, --logfile LOGFILE\n                        path to the logfile\n  -k private-key-path, --key private-key-path\n                        private key identity path (defaults to ~/.ssh/id_rsa)\n  -p PORT, --port PORT  SSH remote port (defaults to 22)\n  -a, --ssh-agent       enable ssh-agent support\n  -c ssh config path, --ssh-config ssh config path\n                        path to the ssh-configuration file (default to\n                        ~/.ssh/config)\n  -n known_hosts path, --known-hosts known_hosts path\n                        path to the openSSH known_hosts file\n  -d, --disable-known-hosts\n                        disable known_hosts fingerprint checking (security\n                        warning!)\n```\n\n###authorized_keys magic\nWith `pysftpjail` you can jail any user in the virtual chroot as soon as she connects to the SFTP server.\nYou can do it by simply prepending the `pysftpjail` command to the user entry in your SSH `authorized_keys` file, e.g.:\n```\ncommand=\"pysftpjail path_to_your_jail\" ssh-rsa AAAAB3[... and so on]\n```\n\nProbably, you'll want to add the following options too:\n```\nno-port-forwarding,no-x11-forwarding,no-agent-forwarding\n```\n\nAchieving as final result:\n```\ncommand=\"pysftpjail path_to_your_jail\",no-port-forwarding,no-x11-forwarding,no-agent-forwarding ssh-rsa AAAAB3[... and so on]\n```\n\nObviusly, you could do the same with `pysftpproxy`.\n\n##Customization\nWe provide two complete examples of SFTP storage: simple and jailed.\nAnyway, you can subclass our [generic abstract storage](pysftpserver/abstractstorage.py) and you can adapt it to your needs.\nAny contribution is welcomed, as always. :+1:\n\n###Real world customization: MongoDB / GridFS storage\n[MongoDB](http://www.mongodb.org/) is an open, NOSQL, document database.\n[GridFS](http://docs.mongodb.org/manual/core/gridfs/) is a specification for storing and retrieving arbitrary files in a MongoDB database.\nThe following example will show how to build a storage that handles files in a MongoDB / GridFS database.\n\n####Preliminary requirements\nI assume you already have a MongoDB database running somewhere and you are using a [`virtualenv`](https://virtualenv.readthedocs.org/en/latest/virtualenv.html).\nLet's install the MongoDB Python driver, `pymongo`, with:\n```bash\n$ pip install pymongo\n```\n\nNow clone this project's repository and install the base package in development mode.\n```bash\n$ git clone https://github.com/unbit/pysftpserver.git\n$ cd pysftpserver\n$ python setup.py develop\n```\n*Info for those who are asking:* development mode will let us modify the source of the packages and use it globally without needing to reinstall it.\n\nNow you're ready to create the storage.\n\n####New storage class\nLet's create a new storage (save it as `pysftpserver/mongostorage.py`) that subclasses the [abstract storage](pysftpserver/abstractstorage.py) class.\n\n```python\n\"\"\"MongoDB GridFS SFTP storage.\"\"\"\n\nfrom pysftpserver.abstractstorage import SFTPAbstractServerStorage\nfrom pysftpserver.pysftpexceptions import SFTPNotFound\nimport pymongo\nimport gridfs\n\n\nclass SFTPServerMongoStorage(SFTPAbstractServerStorage):\n    \"\"\"MongoDB GridFS SFTP storage class.\"\"\"\n\n    def __init__(self, home, remote, port, db_name):\n        \"\"\"Home sweet home.\n\n        NOTE: you should set your home to something reasonable.\n        Instruct the client to connect to your MongoDB.\n        \"\"\"\n        self.home = \"/\"\n        client = pymongo.MongoClient(remote, port)\n        db = client[db_name]\n        self.gridfs = gridfs.GridFS(db)\n\n    def open(self, filename, flags, mode):\n        \"\"\"Return the file handle.\"\"\"\n        filename = filename.decode()  # needed in Python 3\n        if self.gridfs.exists(filename=filename):\n            return self.gridfs.find({'filename': filename})[0]\n\n        raise SFTPNotFound\n\n    def read(self, handle, off, size):\n        \"\"\"Read size from the handle. Offset is ignored.\"\"\"\n        return handle.read(size)\n\n    def close(self, handle):\n        \"\"\"Close the file handle.\"\"\"\n        handle.close()\n\n    \"\"\"\n    Warning: \n        this implementation is incomplete, many required methods are missing.\n    \"\"\"\n```\n\nAs you can see, it's all pretty straight-forward.\n\nIn the `init` method, we initialize the MongoDB client, select the database to use and then we initialize GridFS.\nThen, in the `open` method, we check if the file exists and return it's handler; in the `read` and `close` methods we simply forward the calls to the GridFS.\n\n####Testing the new storage\nI strongly encourage you to test your newly created storage. \nHere's an example (save it as `pysftpserver/tests/test_server_mongo.py`):\n\n```python\nimport unittest\nimport os\nfrom shutil import rmtree\n\nimport pymongo\nimport gridfs\n\nfrom pysftpserver.server import *\nfrom pysftpserver.mongostorage import SFTPServerMongoStorage\nfrom pysftpserver.tests.utils import *\n\n\"\"\"To run this tests you must have an instance of MongoDB running somewhere.\"\"\"\nREMOTE = \"localhost\"\nPORT = 1727\nDB_NAME = \"mydb\"\n\n\nclass Test(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(cls):\n        client = pymongo.MongoClient(REMOTE, PORT)\n        db = client[DB_NAME]\n        cls.gridfs = gridfs.GridFS(db)\n\n    def setUp(self):\n        os.chdir(t_path())\n        self.home = 'home'\n\n        if not os.path.isdir(self.home):\n            os.mkdir(self.home)\n\n        self.server = SFTPServer(\n            SFTPServerMongoStorage(REMOTE, PORT, DB_NAME),\n            logfile=t_path('log'),\n            raise_on_error=True\n        )\n\n    def tearDown(self):\n        os.chdir(t_path())\n        rmtree(self.home)\n\n    def test_read(self):\n        s = b\"This is a test file.\"\n        f_name = \"test\"  # put expects a non byte string!\n        b_f_name = b\"test\"\n\n        f = self.gridfs.put(s, filename=f_name)\n        self.server.input_queue = sftpcmd(\n            SSH2_FXP_OPEN,\n            sftpstring(b_f_name),\n            sftpint(SSH2_FXF_CREAT),\n            sftpint(0)\n        )\n        self.server.process()\n        handle = get_sftphandle(self.server.output_queue)\n\n        self.server.output_queue = b''  # reset the output queue\n        self.server.input_queue = sftpcmd(\n            SSH2_FXP_READ,\n            sftpstring(handle),\n            sftpint64(0),\n            sftpint(len(s)),\n        )\n        self.server.process()\n        data = get_sftpdata(self.server.output_queue)\n\n        self.assertEqual(s, data)\n\n        self.server.output_queue = b''  # reset output queue\n        self.server.input_queue = sftpcmd(\n            SSH2_FXP_CLOSE,\n            sftpstring(handle)\n        )\n        self.server.process()\n\n        # Cleanup!\n        self.gridfs.delete(f)\n\n    @classmethod\n    def tearDownClass(cls):\n        os.unlink(t_path(\"log\"))  # comment me to see the log!\n        rmtree(t_path(\"home\"), ignore_errors=True)\n```\n\n####Final results\nFinally, you can create a binary to comfortably launch the server using the created storage.\nSave it as `bin/pysftpmongo`.\n\n```python\n#!/usr/bin/env python\n\"\"\"pysftpmongo executable.\"\"\"\n\nimport argparse\nfrom pysftpserver.server import SFTPServer\nfrom pysftpserver.mongostorage import SFTPServerMongoStorage\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description='An OpenSSH SFTP server wrapper that uses a MongoDB/GridFS storage.'\n    )\n\n    parser.add_argument('remote', type=str,\n                        help='the remote address of the MongoDB instance')\n    parser.add_argument('port', type=int,\n                        help='the remote port of the MongoDB instance')\n    parser.add_argument('db_name', type=str,\n                        help='the name of the DB to use')\n    parser.add_argument('--logfile', '-l', dest='logfile',\n                        help='path to the logfile')\n\n    args = parser.parse_args()\n    SFTPServer(\n        storage=SFTPServerMongoStorage(\n            args.remote,\n            args.port,\n            args.db_name\n        ),\n        logfile=args.logfile\n    ).run()\n\n\nif __name__ == '__main__':\n    main()\n```\n\nNow, `chmod` the binary and check that it starts without a hitch:\n```bash\n$ chmod +x bin/pysftpmongo\n$ bin/pysftpmongo \"localhost\" 1727 \"mydb\"\n```\n\nFinally, you should edit the `setup.py` `scripts` field to include your new binary. \nNow, running `python setup.py install` will put it somewhere in your `$PATH`, for later ease: e.g. when [using it in the authorized_keys file](#authorized_keys_magic).\n\nA sneak peek of the final result (in the `authorized_keys` file):\n```\ncommand=\"pysftpmongo REMOTE_TO_YOUR_DB REMOTE_PORT DB_NAME\",no-port-forwarding,no-x11-forwarding,no-agent-forwarding ssh-rsa AAAAB3[... and so on]\n```\n\nThat's it!\n\n####Code used in this example\nAll the code used in this example can be found in the [`examples/mongodb_gridfs`](examples/mongodb_gridfs/) directory of this repository.\n\n##FileZilla compatibility\nFileZilla requires the `longname` returned with each `SSH2_FXP_NAME` response (e.g. each time `readdir` is called) to be a string of the same format of the output of `ls -l` (`-rw-r--r--  1 aldur staff 9596 Dec 29 18:36 README.md`).\n\nSo, if you want to keep compatibility with FileZilla, be sure to include a proper `longname` field to the stats dictionary you return from your storage, as we do [here](pysftpserver/storage.py#L78).\n\n##Tests\nYou can use [nose](https://nose.readthedocs.org/en/latest/) for tests.\nFrom the project directory, simply run:\n```bash\n$ nosetests\n$ python setup.py test # alternatively\n```", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/unbit/pysftpserver", "keywords": "pysftpserver,sftp,openssh,ssh,jail", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pysftpserver", "package_url": "https://pypi.org/project/pysftpserver/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pysftpserver/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/unbit/pysftpserver"}, "release_url": "https://pypi.org/project/pysftpserver/1.4.0/", "requires_dist": null, "requires_python": null, "summary": "An OpenSSH SFTP wrapper in Python.", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            #pysftpserver<br>An OpenSSH SFTP wrapper written in Python.<br><br>##Features<br>* Possibility to [automatically jail users](#authorized_keys_magic) in a virtual chroot environment as soon as they login.<br>* Possibility to [automatically forward SFTP requests to another server](#usage).<br>* Compatible with both Python 2 and Python 3.<br>* Fully extensible and customizable (examples below).<br>* Totally conforms to the [SFTP RFC](https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt).<br><br>##Installation<br>Simply install pysftpserver with pip:<br>```bash<br>$ pip install pysftpserver # add the --user flag to install it just for you<br>```<br><br>**Note**: if you'd like to use the [automatic forwarding storage](#usage) you have to explicitly specify the paramiko dependency:<br>```bash<br>$ pip install pysftpserver[pysftpproxy]<br>```<br><br>Otherwise, you could always clone this repository and manually launch `setup.py`:<br>```bash<br>$ git clone https://github.com/unbit/pysftpserver.git<br>$ cd pysftpserver<br>$ python setup.py install<br>```<br><br>##Usage<br>We provide a couple of fully working examples:<br><br>* **pysftpjail**: an SFTP storage that jails users in a virtual chroot environment.<br>* **pysftpproxy**: an SFTP storage that acts as a proxy, forwarding each request to another SFTP server.<br><br>You'll find both our storages in your `$PATH` after the installation, so you can simply launch them by using the appropriate command line executable / arguments:<br><br>```<br>$ pysftpjail -h<br><br>usage: pysftpjail [-h] [--logfile LOGFILE] [--umask UMASK] chroot<br><br>An OpenSSH SFTP server wrapper that jails the user in a chroot directory.<br><br>positional arguments:<br>  chroot                the path of the chroot jail<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br>  --logfile LOGFILE, -l LOGFILE<br>                        path to the logfile<br>  --umask UMASK, -u UMASK<br>                        set the umask of the SFTP server<br>```<br><br>```<br>$ pysftpproxy -h<br><br>usage: pysftpproxy [-h] [-l LOGFILE] [-k private-key-path] [-p PORT] [-a]<br>                   [-c ssh config path] [-n known_hosts path] [-d]<br>                   user[:password]@hostname<br><br>An OpenSSH SFTP server proxy that forwards each request to a remote server.<br><br>positional arguments:<br>  user[:password]@hostname<br>                        the ssh-url ([user[:password]@]hostname) of the remote<br>                        server. The hostname can be specified as a<br>                        ssh_config's hostname too. Every missing information<br>                        will be gathered from there<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br>  -l LOGFILE, --logfile LOGFILE<br>                        path to the logfile<br>  -k private-key-path, --key private-key-path<br>                        private key identity path (defaults to ~/.ssh/id_rsa)<br>  -p PORT, --port PORT  SSH remote port (defaults to 22)<br>  -a, --ssh-agent       enable ssh-agent support<br>  -c ssh config path, --ssh-config ssh config path<br>                        path to the ssh-configuration file (default to<br>                        ~/.ssh/config)<br>  -n known_hosts path, --known-hosts known_hosts path<br>                        path to the openSSH known_hosts file<br>  -d, --disable-known-hosts<br>                        disable known_hosts fingerprint checking (security<br>                        warning!)<br>```<br><br>###authorized_keys magic<br>With `pysftpjail` you can jail any user in the virtual chroot as soon as she connects to the SFTP server.<br>You can do it by simply prepending the `pysftpjail` command to the user entry in your SSH `authorized_keys` file, e.g.:<br>```<br>command=\"pysftpjail path_to_your_jail\" ssh-rsa AAAAB3[... and so on]<br>```<br><br>Probably, you'll want to add the following options too:<br>```<br>no-port-forwarding,no-x11-forwarding,no-agent-forwarding<br>```<br><br>Achieving as final result:<br>```<br>command=\"pysftpjail path_to_your_jail\",no-port-forwarding,no-x11-forwarding,no-agent-forwarding ssh-rsa AAAAB3[... and so on]<br>```<br><br>Obviusly, you could do the same with `pysftpproxy`.<br><br>##Customization<br>We provide two complete examples of SFTP storage: simple and jailed.<br>Anyway, you can subclass our [generic abstract storage](pysftpserver/abstractstorage.py) and you can adapt it to your needs.<br>Any contribution is welcomed, as always. :+1:<br><br>###Real world customization: MongoDB / GridFS storage<br>[MongoDB](http://www.mongodb.org/) is an open, NOSQL, document database.<br>[GridFS](http://docs.mongodb.org/manual/core/gridfs/) is a specification for storing and retrieving arbitrary files in a MongoDB database.<br>The following example will show how to build a storage that handles files in a MongoDB / GridFS database.<br><br>####Preliminary requirements<br>I assume you already have a MongoDB database running somewhere and you are using a [`virtualenv`](https://virtualenv.readthedocs.org/en/latest/virtualenv.html).<br>Let's install the MongoDB Python driver, `pymongo`, with:<br>```bash<br>$ pip install pymongo<br>```<br><br>Now clone this project's repository and install the base package in development mode.<br>```bash<br>$ git clone https://github.com/unbit/pysftpserver.git<br>$ cd pysftpserver<br>$ python setup.py develop<br>```<br>*Info for those who are asking:* development mode will let us modify the source of the packages and use it globally without needing to reinstall it.<br><br>Now you're ready to create the storage.<br><br>####New storage class<br>Let's create a new storage (save it as `pysftpserver/mongostorage.py`) that subclasses the [abstract storage](pysftpserver/abstractstorage.py) class.<br><br>```python<br>\"\"\"MongoDB GridFS SFTP storage.\"\"\"<br><br>from pysftpserver.abstractstorage import SFTPAbstractServerStorage<br>from pysftpserver.pysftpexceptions import SFTPNotFound<br>import pymongo<br>import gridfs<br><br><br>class SFTPServerMongoStorage(SFTPAbstractServerStorage):<br>    \"\"\"MongoDB GridFS SFTP storage class.\"\"\"<br><br>    def __init__(self, home, remote, port, db_name):<br>        \"\"\"Home sweet home.<br><br>        NOTE: you should set your home to something reasonable.<br>        Instruct the client to connect to your MongoDB.<br>        \"\"\"<br>        self.home = \"/\"<br>        client = pymongo.MongoClient(remote, port)<br>        db = client[db_name]<br>        self.gridfs = gridfs.GridFS(db)<br><br>    def open(self, filename, flags, mode):<br>        \"\"\"Return the file handle.\"\"\"<br>        filename = filename.decode()  # needed in Python 3<br>        if self.gridfs.exists(filename=filename):<br>            return self.gridfs.find({'filename': filename})[0]<br><br>        raise SFTPNotFound<br><br>    def read(self, handle, off, size):<br>        \"\"\"Read size from the handle. Offset is ignored.\"\"\"<br>        return handle.read(size)<br><br>    def close(self, handle):<br>        \"\"\"Close the file handle.\"\"\"<br>        handle.close()<br><br>    \"\"\"<br>    Warning: <br>        this implementation is incomplete, many required methods are missing.<br>    \"\"\"<br>```<br><br>As you can see, it's all pretty straight-forward.<br><br>In the `init` method, we initialize the MongoDB client, select the database to use and then we initialize GridFS.<br>Then, in the `open` method, we check if the file exists and return it's handler; in the `read` and `close` methods we simply forward the calls to the GridFS.<br><br>####Testing the new storage<br>I strongly encourage you to test your newly created storage. <br>Here's an example (save it as `pysftpserver/tests/test_server_mongo.py`):<br><br>```python<br>import unittest<br>import os<br>from shutil import rmtree<br><br>import pymongo<br>import gridfs<br><br>from pysftpserver.server import *<br>from pysftpserver.mongostorage import SFTPServerMongoStorage<br>from pysftpserver.tests.utils import *<br><br>\"\"\"To run this tests you must have an instance of MongoDB running somewhere.\"\"\"<br>REMOTE = \"localhost\"<br>PORT = 1727<br>DB_NAME = \"mydb\"<br><br><br>class Test(unittest.TestCase):<br><br>    @classmethod<br>    def setUpClass(cls):<br>        client = pymongo.MongoClient(REMOTE, PORT)<br>        db = client[DB_NAME]<br>        cls.gridfs = gridfs.GridFS(db)<br><br>    def setUp(self):<br>        os.chdir(t_path())<br>        self.home = 'home'<br><br>        if not os.path.isdir(self.home):<br>            os.mkdir(self.home)<br><br>        self.server = SFTPServer(<br>            SFTPServerMongoStorage(REMOTE, PORT, DB_NAME),<br>            logfile=t_path('log'),<br>            raise_on_error=True<br>        )<br><br>    def tearDown(self):<br>        os.chdir(t_path())<br>        rmtree(self.home)<br><br>    def test_read(self):<br>        s = b\"This is a test file.\"<br>        f_name = \"test\"  # put expects a non byte string!<br>        b_f_name = b\"test\"<br><br>        f = self.gridfs.put(s, filename=f_name)<br>        self.server.input_queue = sftpcmd(<br>            SSH2_FXP_OPEN,<br>            sftpstring(b_f_name),<br>            sftpint(SSH2_FXF_CREAT),<br>            sftpint(0)<br>        )<br>        self.server.process()<br>        handle = get_sftphandle(self.server.output_queue)<br><br>        self.server.output_queue = b''  # reset the output queue<br>        self.server.input_queue = sftpcmd(<br>            SSH2_FXP_READ,<br>            sftpstring(handle),<br>            sftpint64(0),<br>            sftpint(len(s)),<br>        )<br>        self.server.process()<br>        data = get_sftpdata(self.server.output_queue)<br><br>        self.assertEqual(s, data)<br><br>        self.server.output_queue = b''  # reset output queue<br>        self.server.input_queue = sftpcmd(<br>            SSH2_FXP_CLOSE,<br>            sftpstring(handle)<br>        )<br>        self.server.process()<br><br>        # Cleanup!<br>        self.gridfs.delete(f)<br><br>    @classmethod<br>    def tearDownClass(cls):<br>        os.unlink(t_path(\"log\"))  # comment me to see the log!<br>        rmtree(t_path(\"home\"), ignore_errors=True)<br>```<br><br>####Final results<br>Finally, you can create a binary to comfortably launch the server using the created storage.<br>Save it as `bin/pysftpmongo`.<br><br>```python<br>#!/usr/bin/env python<br>\"\"\"pysftpmongo executable.\"\"\"<br><br>import argparse<br>from pysftpserver.server import SFTPServer<br>from pysftpserver.mongostorage import SFTPServerMongoStorage<br><br><br>def main():<br>    parser = argparse.ArgumentParser(<br>        description='An OpenSSH SFTP server wrapper that uses a MongoDB/GridFS storage.'<br>    )<br><br>    parser.add_argument('remote', type=str,<br>                        help='the remote address of the MongoDB instance')<br>    parser.add_argument('port', type=int,<br>                        help='the remote port of the MongoDB instance')<br>    parser.add_argument('db_name', type=str,<br>                        help='the name of the DB to use')<br>    parser.add_argument('--logfile', '-l', dest='logfile',<br>                        help='path to the logfile')<br><br>    args = parser.parse_args()<br>    SFTPServer(<br>        storage=SFTPServerMongoStorage(<br>            args.remote,<br>            args.port,<br>            args.db_name<br>        ),<br>        logfile=args.logfile<br>    ).run()<br><br><br>if __name__ == '__main__':<br>    main()<br>```<br><br>Now, `chmod` the binary and check that it starts without a hitch:<br>```bash<br>$ chmod +x bin/pysftpmongo<br>$ bin/pysftpmongo \"localhost\" 1727 \"mydb\"<br>```<br><br>Finally, you should edit the `setup.py` `scripts` field to include your new binary. <br>Now, running `python setup.py install` will put it somewhere in your `$PATH`, for later ease: e.g. when [using it in the authorized_keys file](#authorized_keys_magic).<br><br>A sneak peek of the final result (in the `authorized_keys` file):<br>```<br>command=\"pysftpmongo REMOTE_TO_YOUR_DB REMOTE_PORT DB_NAME\",no-port-forwarding,no-x11-forwarding,no-agent-forwarding ssh-rsa AAAAB3[... and so on]<br>```<br><br>That's it!<br><br>####Code used in this example<br>All the code used in this example can be found in the [`examples/mongodb_gridfs`](examples/mongodb_gridfs/) directory of this repository.<br><br>##FileZilla compatibility<br>FileZilla requires the `longname` returned with each `SSH2_FXP_NAME` response (e.g. each time `readdir` is called) to be a string of the same format of the output of `ls -l` (`-rw-r--r--  1 aldur staff 9596 Dec 29 18:36 README.md`).<br><br>So, if you want to keep compatibility with FileZilla, be sure to include a proper `longname` field to the stats dictionary you return from your storage, as we do [here](pysftpserver/storage.py#L78).<br><br>##Tests<br>You can use [nose](https://nose.readthedocs.org/en/latest/) for tests.<br>From the project directory, simply run:<br>```bash<br>$ nosetests<br>$ python setup.py test # alternatively<br>```\n          </div>"}, "last_serial": 1382265, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "92fce5652411bc90594413ed72e76bb3", "sha256": "8596a7a4e875fb3e4419b8f6c53a9caad7e4dc4e4db4a22a3b2c3353ce302a28"}, "downloads": -1, "filename": "pysftpserver-1.0.0.tar.gz", "has_sig": false, "md5_digest": "92fce5652411bc90594413ed72e76bb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7664, "upload_time": "2014-12-05T15:59:23", "upload_time_iso_8601": "2014-12-05T15:59:23.426071Z", "url": "https://files.pythonhosted.org/packages/12/46/97d21db944cf64bb81b9623fc8bd5578b60cadd3e9628e37e1a068c06c85/pysftpserver-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "0b22064dd6ac8938f1ff62b2053fe5d4", "sha256": "caf07cd9d326af903d7e724a52b572c2d6b04332c48b8848a519597b5d07eb56"}, "downloads": -1, "filename": "pysftpserver-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0b22064dd6ac8938f1ff62b2053fe5d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14462, "upload_time": "2014-12-17T14:21:52", "upload_time_iso_8601": "2014-12-17T14:21:52.698645Z", "url": "https://files.pythonhosted.org/packages/8d/c6/5fe907d4913a1b1786b78b37725475470992167f97b3780690b0bae2a130/pysftpserver-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bb44a32bbe934a829d4f1f1164909918", "sha256": "b192772ff56f6dd6cc5fe7fcc9c7eb6d20bc68c976d2900cb606f06548088b13"}, "downloads": -1, "filename": "pysftpserver-1.2.0.tar.gz", "has_sig": false, "md5_digest": "bb44a32bbe934a829d4f1f1164909918", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15572, "upload_time": "2014-12-23T15:39:30", "upload_time_iso_8601": "2014-12-23T15:39:30.962737Z", "url": "https://files.pythonhosted.org/packages/2b/dd/9896320a578b2a4b6650a4d75b41b66e69700c6857451346d0c238765c11/pysftpserver-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "7edfc7e07961e7c5eb362fb53db92d24", "sha256": "d4e1bc01001941c7aeb83a40fc8675bcaea86146ce3718c96f42778b85fc1f5f"}, "downloads": -1, "filename": "pysftpserver-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7edfc7e07961e7c5eb362fb53db92d24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17032, "upload_time": "2014-12-29T19:24:48", "upload_time_iso_8601": "2014-12-29T19:24:48.777220Z", "url": "https://files.pythonhosted.org/packages/f4/a3/3e25575c4a6d3f0317a9418109c88a972b159de5f660dae0076ef0bd316d/pysftpserver-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "4fd943f26b079751cf0f414ebe86d6fa", "sha256": "c201be762bdae65a74808536c4c77cdc31ec7203dd85576637b703ab06b62bd9"}, "downloads": -1, "filename": "pysftpserver-1.4.0.tar.gz", "has_sig": false, "md5_digest": "4fd943f26b079751cf0f414ebe86d6fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20937, "upload_time": "2015-01-14T14:59:58", "upload_time_iso_8601": "2015-01-14T14:59:58.974250Z", "url": "https://files.pythonhosted.org/packages/1b/e0/716c229b29731ae63f2679f319aa7d50315063880a083f5d383a465a970b/pysftpserver-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4fd943f26b079751cf0f414ebe86d6fa", "sha256": "c201be762bdae65a74808536c4c77cdc31ec7203dd85576637b703ab06b62bd9"}, "downloads": -1, "filename": "pysftpserver-1.4.0.tar.gz", "has_sig": false, "md5_digest": "4fd943f26b079751cf0f414ebe86d6fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20937, "upload_time": "2015-01-14T14:59:58", "upload_time_iso_8601": "2015-01-14T14:59:58.974250Z", "url": "https://files.pythonhosted.org/packages/1b/e0/716c229b29731ae63f2679f319aa7d50315063880a083f5d383a465a970b/pysftpserver-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:02 2020"}