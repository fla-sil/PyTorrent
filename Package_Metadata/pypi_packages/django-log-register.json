{"info": {"author": "Leandro Gomez", "author_email": "leandro.gz73@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "Log Register Documentation\r\n==========================\r\n\r\n:Author:\r\n    Leandro Gomez <leandro.gz73@gmail.com>\r\n:Version: 0.0.3\r\n\r\n::\r\n\r\n    pip install django-log-register==0.0.3\r\n\r\n\r\nDjango Log Register is a simple application for Django.\r\nIt's a simple way to save this error, warning, success, info, and debug log; everything in database.\r\nYou can reference to another model in database, to be able to know who makes you system fails.\r\n\r\n``Lot``: It's a lot of logs where you can register error, warning, info, debug or success logs (See details below).\r\n``Log``: This is a error, a warning or another message level (by default the same of django message) with the reason.\r\n\r\n``Examples:``\r\n\r\nSuppose that you want to register each successful creation of a model, or its fail if it's not created\r\n\r\n    creation_logs = Lot()\r\n    for n in range(10):\r\n        try:\r\n            obj = SomeModel(attr=1, attr=2)\r\n            obj.save()\r\n            creation_logs.success(\"A obj has been created!\") #Only the reason param is required!\r\n        except Exception as e:\r\n            creation_logs.error(\"A obj has not been created!\")\r\n    creation_logs.close() #Don't forget to close the Lot, this can indicate you if the process finished fine.\r\n\r\nNow suppose the same context, but you want the real exception and some context to can find a solution.\r\n\r\n    creation_logs = Lot()\r\n    for n in range(10):\r\n        try:\r\n            attr1 = some_calculated_value()\r\n            attr2 = 20\r\n            obj = SomeModel(attr1=attr1, attr2=attr2)\r\n            obj.save()\r\n            creation_logs.success(\r\n                        \"A obj has been created!\",\r\n                        \"with attr1=%(attr1)s and attr2=%(attr2)s\" % dict(attr1=attr1, attr2=attr2)\r\n                        ) #You can add some extra_data if you wish or need it\r\n\r\n        except Exception as e:\r\n            context = \"attr1=%(attr1)s and attr2=%(attr2)s\" % dict(attr1=attr1, attr2=attr2)\r\n            creation_logs.error(str(e), context)\r\n            #make a str(e) is my favourite way to register a error log, and let the extra_data provide me\r\n            # what I need to solve the problem.\r\n    creation_logs.close()\r\n\r\nNow suppose that you are updating many instances of models, and can register which model update has fail.\r\n\r\n    creation_logs = Lot()\r\n        for id in range(5):\r\n            try:\r\n                obj = MyModel.objects.get(id=id)\r\n                making_something(obj)\r\n                creation_logs.success(\"A obj has been update!\")\r\n            except SomeException as e:\r\n                context = \"model=%(model)s and id=%(id)s\" % dict(model=model, id=id)\r\n                if 'obj' in locals()::\r\n                    creation_logs.error(str(e), context, log_object=obj)\r\n                else:\r\n                    creation_logs.error(str(e), context)\r\n    creation_logs.close()\r\n\r\nBut you maybe want to even logs for a object in the same Lot; so... you can make this:\r\n\r\n    from lot_register.actions import get_lot_for_objects\r\n\r\n    obj1 = MyModel()\r\n    onj2 = MySecondModel()\r\n\r\n    lot = get_lot_for_objects(obj1)\r\n\r\n    # make something with obj1 and obj2\r\n    lot.log(\"I make something with my obj1 with another obj2!!\", \"some extra data\",log_object=obj2)\r\n    #or...\r\n    try:\r\n        obj1.make_something(obj2)\r\n    except:\r\n        lot.error(\"Something went wrong\", log_object=obj2)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lalo73/django-log-register", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "django-log-register", "package_url": "https://pypi.org/project/django-log-register/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-log-register/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/lalo73/django-log-register"}, "release_url": "https://pypi.org/project/django-log-register/0.0.3/", "requires_dist": null, "requires_python": null, "summary": "A simple Django app to register log and save them.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            Log Register Documentation\n<br>==========================\n<br>\n<br>:Author:\n<br>    Leandro Gomez &lt;leandro.gz73@gmail.com&gt;\n<br>:Version: 0.0.3\n<br>\n<br>::\n<br>\n<br>    pip install django-log-register==0.0.3\n<br>\n<br>\n<br>Django Log Register is a simple application for Django.\n<br>It's a simple way to save this error, warning, success, info, and debug log; everything in database.\n<br>You can reference to another model in database, to be able to know who makes you system fails.\n<br>\n<br>``Lot``: It's a lot of logs where you can register error, warning, info, debug or success logs (See details below).\n<br>``Log``: This is a error, a warning or another message level (by default the same of django message) with the reason.\n<br>\n<br>``Examples:``\n<br>\n<br>Suppose that you want to register each successful creation of a model, or its fail if it's not created\n<br>\n<br>    creation_logs = Lot()\n<br>    for n in range(10):\n<br>        try:\n<br>            obj = SomeModel(attr=1, attr=2)\n<br>            obj.save()\n<br>            creation_logs.success(\"A obj has been created!\") #Only the reason param is required!\n<br>        except Exception as e:\n<br>            creation_logs.error(\"A obj has not been created!\")\n<br>    creation_logs.close() #Don't forget to close the Lot, this can indicate you if the process finished fine.\n<br>\n<br>Now suppose the same context, but you want the real exception and some context to can find a solution.\n<br>\n<br>    creation_logs = Lot()\n<br>    for n in range(10):\n<br>        try:\n<br>            attr1 = some_calculated_value()\n<br>            attr2 = 20\n<br>            obj = SomeModel(attr1=attr1, attr2=attr2)\n<br>            obj.save()\n<br>            creation_logs.success(\n<br>                        \"A obj has been created!\",\n<br>                        \"with attr1=%(attr1)s and attr2=%(attr2)s\" % dict(attr1=attr1, attr2=attr2)\n<br>                        ) #You can add some extra_data if you wish or need it\n<br>\n<br>        except Exception as e:\n<br>            context = \"attr1=%(attr1)s and attr2=%(attr2)s\" % dict(attr1=attr1, attr2=attr2)\n<br>            creation_logs.error(str(e), context)\n<br>            #make a str(e) is my favourite way to register a error log, and let the extra_data provide me\n<br>            # what I need to solve the problem.\n<br>    creation_logs.close()\n<br>\n<br>Now suppose that you are updating many instances of models, and can register which model update has fail.\n<br>\n<br>    creation_logs = Lot()\n<br>        for id in range(5):\n<br>            try:\n<br>                obj = MyModel.objects.get(id=id)\n<br>                making_something(obj)\n<br>                creation_logs.success(\"A obj has been update!\")\n<br>            except SomeException as e:\n<br>                context = \"model=%(model)s and id=%(id)s\" % dict(model=model, id=id)\n<br>                if 'obj' in locals()::\n<br>                    creation_logs.error(str(e), context, log_object=obj)\n<br>                else:\n<br>                    creation_logs.error(str(e), context)\n<br>    creation_logs.close()\n<br>\n<br>But you maybe want to even logs for a object in the same Lot; so... you can make this:\n<br>\n<br>    from lot_register.actions import get_lot_for_objects\n<br>\n<br>    obj1 = MyModel()\n<br>    onj2 = MySecondModel()\n<br>\n<br>    lot = get_lot_for_objects(obj1)\n<br>\n<br>    # make something with obj1 and obj2\n<br>    lot.log(\"I make something with my obj1 with another obj2!!\", \"some extra data\",log_object=obj2)\n<br>    #or...\n<br>    try:\n<br>        obj1.make_something(obj2)\n<br>    except:\n<br>        lot.error(\"Something went wrong\", log_object=obj2)\n          </div>"}, "last_serial": 790005, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c79ad98b0bf4c47160fc242286a839da", "sha256": "c0473feb80f918130bdc19fe88ff8cbf25fa5850f5a7e37f86519573145737de"}, "downloads": -1, "filename": "django-log-register-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c79ad98b0bf4c47160fc242286a839da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7377, "upload_time": "2013-03-07T03:09:07", "upload_time_iso_8601": "2013-03-07T03:09:07.769164Z", "url": "https://files.pythonhosted.org/packages/49/a8/cc9f17f978f081a49bef87cd715acb16221a41971874c88a90171cc6f417/django-log-register-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d1601403724386ab11d4a500a16b7e82", "sha256": "f57497480c1ad63ffaf7b831cfd71bc2769662ab714b347dacc725ce4d3af9fd"}, "downloads": -1, "filename": "django-log-register-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d1601403724386ab11d4a500a16b7e82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7536, "upload_time": "2013-03-07T03:19:03", "upload_time_iso_8601": "2013-03-07T03:19:03.768437Z", "url": "https://files.pythonhosted.org/packages/87/ae/a84b289b3764e19b3bc071b0fdafab33364b21586e84b7086b680add4265/django-log-register-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d1601403724386ab11d4a500a16b7e82", "sha256": "f57497480c1ad63ffaf7b831cfd71bc2769662ab714b347dacc725ce4d3af9fd"}, "downloads": -1, "filename": "django-log-register-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d1601403724386ab11d4a500a16b7e82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7536, "upload_time": "2013-03-07T03:19:03", "upload_time_iso_8601": "2013-03-07T03:19:03.768437Z", "url": "https://files.pythonhosted.org/packages/87/ae/a84b289b3764e19b3bc071b0fdafab33364b21586e84b7086b680add4265/django-log-register-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:16 2020"}