{"info": {"author": "Tommy Yu", "author_email": "tommy.yu@auckland.ac.nz", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Plugins", "Framework :: Setuptools Plugin", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Build Tools", "Topic :: System :: Software Distribution", "Topic :: Utilities"], "description": "calmjs.sassy\n============\n\nPackage for extending the `Calmjs framework`_ to support the declaration\nand usage of |sass|_ in a manner that crosses Python package boundaries\nby exposing an ``import`` system that mimics the package namespaces\navailable within the current Python environment, such that styling rules\ncan be more easily propagated to their dependants.  This facilitates the\nreuse of styling rules declared by Python packages' dependencies in a\nmanner more familiar to users of the given Python environments by\nreusing the same names as the namespaces they may be using.\n\n.. image:: https://travis-ci.org/calmjs/calmjs.sassy.svg?branch=1.0.2\n    :target: https://travis-ci.org/calmjs/calmjs.sassy\n.. image:: https://ci.appveyor.com/api/projects/status/1gei512socwe8nho/branch/1.0.2?svg=true\n    :target: https://ci.appveyor.com/project/metatoaster/calmjs-sassy/branch/1.0.2\n.. image:: https://coveralls.io/repos/github/calmjs/calmjs.sassy/badge.svg?branch=1.0.2\n    :target: https://coveralls.io/github/calmjs/calmjs.sassy?branch=1.0.2\n\n.. |calmjs| replace:: ``calmjs``\n.. |calmjs.rjs| replace:: ``calmjs.rjs``\n.. |calmjs.sassy| replace:: ``calmjs.sassy``\n.. |calmjs.webpack| replace:: ``calmjs.webpack``\n.. |libsass-python| replace:: ``libsass-python``\n.. |npm| replace:: ``npm``\n.. |sass| replace:: ``sass``\n.. _Calmjs framework: https://pypi.python.org/pypi/calmjs\n.. _calmjs: https://pypi.python.org/pypi/calmjs\n.. _calmjs.rjs: https://pypi.python.org/pypi/calmjs.rjs\n.. _calmjs.webpack: https://pypi.python.org/pypi/calmjs.webpack\n.. _libsass-python: https://sass.github.io/libsass-python/\n.. _npm: https://www.npmjs.com/\n.. _sass: https://sass-lang.com/\n\nIntroduction\n------------\n\nWhile the |calmjs|_ framework can support the production of deployable\nartifacts for web applications (through packages such as |calmjs.rjs|_\nand |calmjs.webpack|_), the styling of the application would be\nincomplete without exposing the relevant stylesheets to dependant\npackages.\n\nWith the usage of the extensibility of the calmjs framework, a registry\ndedicated for |sass| may be declared.  Tools that make use of these\ndeclarations may also be integrated to generate a single (or a set of)\nstylesheets for use with the library or the application.\n\n\nFeatures\n--------\n\nThis package provides:\n\n- A base registry that finds all ``.scss`` files declared in a Python\n  package.\n- A basic toolchain for linking all the ``.scss`` files exported by a\n  given Python package(s) and their dependencies, plus optionally their\n  Node.js/npm dependencies discovered through the dependency graph with\n  the aid of |calmjs|_, for the generation of ``.css`` files for use by\n  the application or export to other libraries.  A specific\n  implementation that links against |libsass-python|_ is provided.\n- A calmjs runtime that makes use of the |libsass-python| toolchain for\n  end-user one-off CSS generation.\n\n\nInstallation\n------------\n\nTo install |calmjs.sassy| into a given Python environment, the base\npackage may be installed directly from PyPI with the following command:\n\n.. code:: sh\n\n    $ pip install calmjs.sassy\n\nIf support for the usage of |libsass-python| is desired, the\ninstallation command will be the following:\n\n.. code:: sh\n\n    $ pip install calmjs.sassy[libsass]\n\nIf this package is used as part of the build process, and the default\n|libsass-python| toolchain is used for CSS artifact generation, the\ndependency may be declared like so in the package's ``setup.py`` file:\n\n.. code:: python\n\n    setup(\n        ...\n        setup_requires=[\n            'calmjs.sassy[libsass]>=1.0.0,<2',\n            # plus other packages required for generating the package.\n        ],\n        install_requires=[\n            # actual dependencies required for the usage of the package.\n        ],\n    )\n\nAlternative installation methods (advanced users)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDevelopment is still ongoing with |calmjs.sassy|; the development\nversion may be installed through git like so:\n\n.. code:: sh\n\n    $ pip install calmjs\n    $ pip install git+https://github.com/calmjs/calmjs.sassy.git#egg=calmjs.sassy\n\nAlternatively, the git repository can be cloned directly and execute\n``pip install -e .`` while inside the root of the source directory.\n\nNewer versions of ``pip`` and ``setuptools`` may omit the initial manual\ninstallation of the |calmjs| package.\n\nIf ``setup.py`` within the |calmjs.sassy| source tree is used directly,\nplease keep in mind that |calmjs| MUST be available before that is\nexecuted, so that all the required package metadata may be generated\ncorrectly.  Alternatively, please execute ``python setup.py egg_info``\nif any message about ``Unknown distribution option:`` is noted during\nthe invocation of ``setup.py``.\n\nAs |calmjs| is declared as both namespace and package, there are certain\nlow-level setup that is required on the working Python environment to\nensure that all modules within can be located correctly.  However,\nversions of ``setuptools`` earlier than `v31.0.0`__ does not create the\nrequired package namespace declarations when a package is installed\nusing this development installation method when mixed with ``pip\ninstall`` within the same namespace.  As a result, inconsistent import\nfailures can happen for any modules under the |calmjs| namespace.  As an\nexample:\n\n.. __: https://setuptools.readthedocs.io/en/latest/history.html#v31-0-0\n\n.. code:: python\n\n    >>> import calmjs.sassy\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ImportError: No module named 'calmjs.sassy'\n    >>> import calmjs.base\n    >>> import calmjs.sassy\n    >>>\n\nIf this behavior (and workaround) is undesirable, please ensure the\ninstallation of all |calmjs| related packages follow the same method\n(i.e. either ``python setup.py develop`` for all packages, or using the\nwheels acquired through ``pip``), or upgrade ``setuptools`` to version\n31 or greater and reinstall all affected packages.\n\nTesting the installation\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nFinally, to verify for the successful installation of |calmjs.sassy|,\nthe included tests may be executed through this command:\n\n.. code:: sh\n\n    $ python -m unittest calmjs.sassy.tests.make_suite\n\n\nUsage\n-----\n\nTo generate the ``.css`` artifact for given package(s) that have\nexported ``.scss`` styles through the Calmjs module registry system, and\nthat the package |libsass-python| is available, the following command\nmay be executed:\n\n.. code:: sh\n\n    $ calmjs scss example.package\n\nThe following sections will provide an overview on how this export\nsystem may be enabled for Python packages.  For a more detailed\nexplanation on how the module registry works or how Calmjs works in\ngeneral, please refer to the README provided by the |calmjs|_ package,\nunder the section `Export JavaScript code from Python packages`__.\n\n.. __: https://pypi.python.org/pypi/calmjs/#export-javascript-code-from-python-packages\n\nThe default runtime also exposes a number of tuneable features as flags\nthat are documented below; the specifics may be found by running\n``calmjs scss --help``.\n\nDeclaring SCSS files to export for a given Python package\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSCSS files embedded within a Python package can be exposed to the\n``calmjs.scss`` registry which is provided by this package.  For\nexample, given the the following entry points for that registry defined\nby a package named ``example``:\n\n.. code:: ini\n\n    [calmjs.scss]\n    example = example\n\nThis is the most basic declaration that works for packages that share\nthe same name as the import location provided.\n\nThe following is am example for packages that have nested submodules\n(called ``example.lib`` and ``example.app``):\n\n.. code:: ini\n\n    [calmjs.scss]\n    example.lib = example.lib\n    example.app = example.app\n\nWhile the import locations declared looks exactly like a Python module\n(as per the rules of a Python entry point), the ``calmjs.scss``\nregistry will present them using the CommonJS/ES6 style import paths\n(i.e.  ``'example/lib'`` and ``'example/app'``), so users that need\nthose style rules need to be ensure that they ``import`` those strings.\n\nPlease also note that the default source extractor will extract all\n``*.scss`` files within those directories.\n\nPutting the second example together, the ``setup.py`` file should\ncontain the following:\n\n.. code:: Python\n\n    setup(\n        name='example',\n        setup_requires=[\n            'calmjs.scss',\n            # plus other setup level requirements\n        ],\n        # the entry points are required to allow calmjs to pick this up\n        entry_points=\"\"\"\n        [calmjs.scss]\n        example.lib = example.lib\n        example.app = example.app\n        \"\"\",\n    )\n\nEnsure the SCSS is structured in the supported manner for reuse\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor proper generation of the resulting ``.css`` and the management of\nthe ``.scss`` usage and exports, the default |libsass-python| toolchain\nimposes a small number of fixed constraints when default settings are\nused.  The main constraint is that a specific entry point file must be\ndeclared to be used to acquire the styling rules for the specified\npackages for the generation of the stylesheet artifact(s).  This\nparameter typically defaults to ``index.scss``, but this may be\nspecified to a different value to generate different styling rules, for\nexample for usage with different application end points.\n\nIn essence, this allow the package to create an artifact with just the\nexplicit imports and styling rules defined within it, while exporting\nthe rules it defines to their dependants piecemeal so that they may be\nable to import them using the similar package namespace and module\nnames.  This enables general communication of exports and reusability of\nthose styling rules without forcing dependants to explicitly declare\ntheir required styles multiple times (i.e. only the ``@import``\nstatement is needed in the stylesheet itself, and no need to declare\nan explicit entry against something outside the package).\n\nFor example, inside an ``example.package`` there may be this layout::\n\n    .\n    \u251c\u2500\u2500 example\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 package\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 colors.scss\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 content.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 form.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 form.scss\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 index.scss\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 ui.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 ui.scss\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 widget.js\n    \u2514\u2500\u2500 setup.py\n\nThe entry point declaration to export the ``.scss`` files within the\nexample package will be this:\n\n.. code:: ini\n\n    [calmjs.scss]\n    example.package = example.package\n\nNote that the ``index.scss`` (the default entry point name) for this\npackage may contain the following:\n\n.. code:: css\n\n    @import \"example/package/colors\";\n    @import \"example/package/form\";\n    @import \"example/package/ui\";\n\nWhich are simply imports of all the ``.scss`` modules provided by the\npackage itself.  For an ``example.dependant`` package that depends on\n``example.package`` and exports their own styling rules, it will need\nto declare its dependency through the ``install_requires`` keyword in\nits ``setup.py`` and declare the following entry point to expose the\nstyles defined:\n\n.. code:: ini\n\n    [calmjs.scss]\n    example.dependant = example.dependant\n\nPutting it all together:\n\n.. code:: python\n\n    setup(\n        name='example.dependant',\n        install_requires=[\n            'example.package',\n            # ... plus other dependencies\n        ],\n        entry_points=\"\"\"\n        [calmjs.scss]\n        example.dependant = example.dependant\n        \"\"\",\n        # ... plus other declarations\n    )\n\nNote that the entry specific to its dependency ``example.package`` is\nalready declared already by that package.  For the main entry point\n``index.scss`` of ``example.dependant``, it may contain the following:\n\n.. code:: css\n\n    @import \"example/dependant/colors\";\n    @import \"example/dependant/full_ui\";\n    @import \"example/package/form\";\n\nIn this example, only the ``form.scss`` styles exported by the\n``example.package`` was included, while omitting ``colors.scss`` and\n``ui.scss`` as it could clash with the definitions required and\nimplemented by the other styles it shipped in that dependant package\n(e.g. ``colors`` and ``full_ui``).  Other dependants of this\n``example.dependant`` package may then declare usage of any of these\nexported styles as per their owners' preferences.  This is one method to\nprovide extensible styles that are reusable in a piecemeal manner by\npackage dependants.\n\nNaturally, there are parameters to specify entry points other than\n``index.scss`` for a given package, if necessary (for example, multiple\nstylesheets may need to be exported for use with different workflows\nprovided by the given package).\n\nInclude .scss files in Node.js package repositories\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAs the integration with Node.js was the goal of the Calmjs framework, it\nis possible to declare linkage with Node.js packages that ship with\n``.scss`` files from package repositories such as |npm|_.  The actual\nusage is very similar to the typical integration through Calmjs, where\nthe difference lies in the keywords to be specified.\n\nFor example, a ``setup.py`` may contain the following:\n\n.. code:: Python\n\n    setup(\n        name=\"example.package\"\n        package_json={\n            \"dependencies\": {\n                \"bootstrap\": \"~4.0.0\",\n            },\n        },\n        extras_calmjs_scss={\n            'node_modules': {\n                'bootstrap': 'bootstrap/scss',\n            }\n        },\n    )\n\nThe declaration above with simply expose all the ``.scss`` files inside\nthe ``bootstrap`` package from ``npm`` as the directory was declared to\nbe used for the build process.  Importing the desired module from that\ndependency is simply:\n\n.. code:: css\n\n    @import \"bootstrap/nav\";\n    @import \"bootstrap/navbar\";\n\nWould work seamlessly, much like the usage of JavaScript code.\n\nComplete artifacts from ``npm`` may also be explicitly specified to\nexport under a specific identifier.\n\nDeclaring prebuilt, standard CSS bundle for the Python package\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFinally, to complete the Python package deployment story, the process\nshould include the automatic generation and inclusion of the stylesheet\nartifacts in the resulting Python wheel.  This can be achieved by\nspecifying an entry in the ``calmjs.artifacts`` registry, with the key\nbeing the filename of the artifact and the value being the import\nlocation to a builder.  A default builder function provided at\n``calmjs.sassy.artifact:complete_css`` will enable the generation\nof a complete stylesheet, based on the default toolchain and settings,\nwith ``calmjs.sassy.artifact:complete_compressed_css`` provide a spec\nthat will produced compressed style output.  Note that both these\nbuilders make use of the ``libsass-python`` toolchain.\n\nAn example entry point configuration that only produce the complete css\nartifact (without compression):\n\n.. code:: ini\n\n    [calmjs.artifacts]\n    example.bundle.css = calmjs.sassy.artifact:complete_css\n\nOnce those entry points are installed, running ``calmjs artifact build\nexample.package`` will make use of the SCSS toolchain and build the\nartifact at ``example.bundle.css`` inside the ``calmjs_artifacts``\ndirectory within the metadata directory for ``example.package``.\nAlternatively, for solution more integrated with ``setuptools``, the\n``setup`` function in ``setup.py`` should also enable the\n``build_calmjs_artifacts`` flag such that ``setup.py build`` will also\ntrigger the building process.  This is useful for automatically\ngenerating and including the artifact as part of the wheel building\nprocess.\n\nA more complete definition that generates both form of the artifacts may\nlook like the following ``setup.py``:\n\n.. code:: Python\n\n    setup(\n        name='example.package',\n        # to enable calmjs artifact generation integration w/ setuptools\n        build_calmjs_artifacts=True,\n        entry_points=\"\"\"\n        # ... other entry points truncated\n        [calmjs.module]\n        example.package = example.package\n\n        [calmjs.artifacts]\n        example.bundle.css = calmjs.sassy.artifact:complete_css\n        example.bundle.min.css = calmjs.sassy.artifact:complete_compressed_css\n        \"\"\",\n        # ... other required fields truncated\n    )\n\nBuilding the wheel using ``setup.py`` may result in something like this.\n\n.. code::\n\n    $ python setup.py bdist_wheel\n    automatically picked registries ['calmjs.scss'] for sourcepaths\n    ...\n    invoking 'sass.compile' on entry point module at '/tmp/tmpwb5bhmd0/build/__calmjs_sassy__/index.scss'\n    wrote export css file at '/home/user/example.package/src/example.package.egg-info/calmjs_artifacts/example.bundle.css'\n    installing to build/bdist.linux-x86_64/wheel\n    ...\n\nWith both ``example.bundle.css`` and ``example.bundle.min.css``\navailable under the ``calmjs_artifacts`` sub-directory inside the\npackage metadata directory inside the Python wheel that was generated.\n\nAlso note that the default builder specifies ``index`` as the default\nentry point.  If other ones need to be provided or other options are\nrequired, simply create a new builder function that return a ``Spec``\nobject with the desired values.\n\nThe end result is that end-users of this package will be able to make\nuse of the complete features provided without having to go through a\nseparate build step, while retaining the ability for regenerating all\nthe required artifacts with just the build dependencies installed,\nwithout having to further acquire the original configuration files (or\neven the source files) from the original repository that are required\nfor the production of these artifacts as they are part of the package\n(provided that the original sources are also packaged into the wheel).\n\nUsing registered .scss with other Calmjs Node.js/JavaScript toolchains\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhile the registry system is designed to be as extensible and reuseable\nas much as possible, those specific underlying tools may expect a\ndifferent complete module name as they may require specific loader\nstring prepended to the stylesheet.  This topic will require more\nexploration for better overall integration, despite the building blocks\nto acheive this is available in the base/generic form.\n\n\nTroubleshooting\n---------------\n\nUserWarning: Unknown distribution option:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDuring setup and installation using the development method, if this\nwarning message is shown, please ensure the egg metadata is correctly\ngenerated by running ``python setup.py egg_info`` in the source\ndirectory, as the package |calmjs| was not available when the setup\nscript was initially executed.\n\nCalmjsSassyRuntimeError: missing required package 'libsass'\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease install the |libsass-python| package; this can be achieved by\nrunning:\n\n.. code:: sh\n\n    $ pip install libsass\n\nCalmjsSassyRuntimeError: failed to compile with libsass\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis can be caused by syntax errors within the styling rules, which\nshould be reported as part of the output.  Generation using the built-in\n``calmjs scss`` runtime may return more detailed debugging information\nusing the relevant flags as documented by the ``--help`` flag.\n\nInternal Error: Data context created with empty source string\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhile using the libsass interfacing runtime or toolchain (e.g. the\ndefault ``calmjs scss`` runtime), if the provided package does not\ninclude (export) a ``.scss`` file for the specified entry point name\n(the default is ``index``, and so the package must export a\n``index.scss`` file at the location registered in the ``calmjs.scss``\nregistry), nothing will be imported thus the source string will be\nempty, resulting in ``libsass`` aborting the execution.\n\n\nContribute\n----------\n\n.. _issue tracker:\n\n- Issue Tracker: https://github.com/calmjs/calmjs.sassy/issues\n- Source Code: https://github.com/calmjs/calmjs.sassy\n\n\nLegal\n-----\n\nThe |calmjs.sassy| package is part of the calmjs project.\n\nThe calmjs project is copyright (c) 2016 Auckland Bioengineering\nInstitute, University of Auckland.  |calmjs.sassy| is licensed under\nthe terms of the GPLv2 or later.\n\nChangelog\n=========\n\n1.0.2 (2020-04-23)\n------------------\n\n- Use ``self.opener`` for writing file manipulation inside toolchain.\n\n1.0.1 (2018-05-23)\n------------------\n\n- Minor text fixes.\n\n1.0.0 (2018-05-23)\n------------------\n\n- Initial release of the Sassy CSS integration for Calmjs.\n- Provide a base ``calmjs.scss`` registry to allow Python packages to\n  export ``.scss`` files for their dependants to utilize.\n- Provide a base ``calmjs scss`` runtime to interface with the default\n  ``libsass-python`` toolchain for the production of ``.css`` artifacts\n  for any given Python packages.\n- Provide a couple artifact builders that integrates with the calmjs\n  artifact production framework.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/calmjs/calmjs.sassy", "keywords": "", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "calmjs.sassy", "package_url": "https://pypi.org/project/calmjs.sassy/", "platform": "", "project_url": "https://pypi.org/project/calmjs.sassy/", "project_urls": {"Homepage": "https://github.com/calmjs/calmjs.sassy"}, "release_url": "https://pypi.org/project/calmjs.sassy/1.0.2/", "requires_dist": ["calmjs (>=3.2.0)", "libsass (>=0.11.0); extra == 'libsass'"], "requires_python": "", "summary": "Package for extending the Calmjs framework to support the usage of sass in a manner that crosses Python package boundaries by exposing an import system that mimics the package namespaces available within a given Python environment.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"calmjs-sassy\">\n<h2>calmjs.sassy</h2>\n<p>Package for extending the <a href=\"https://pypi.python.org/pypi/calmjs\" rel=\"nofollow\">Calmjs framework</a> to support the declaration\nand usage of <a href=\"https://sass-lang.com/\" rel=\"nofollow\"><tt>sass</tt></a> in a manner that crosses Python package boundaries\nby exposing an <tt>import</tt> system that mimics the package namespaces\navailable within the current Python environment, such that styling rules\ncan be more easily propagated to their dependants.  This facilitates the\nreuse of styling rules declared by Python packages\u2019 dependencies in a\nmanner more familiar to users of the given Python environments by\nreusing the same names as the namespaces they may be using.</p>\n<a href=\"https://travis-ci.org/calmjs/calmjs.sassy\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/calmjs/calmjs.sassy.svg?branch=1.0.2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2109dfcfab7a8a44d1f0fc4abebe00d850e7dd5/68747470733a2f2f7472617669732d63692e6f72672f63616c6d6a732f63616c6d6a732e73617373792e7376673f6272616e63683d312e302e32\"></a>\n<a href=\"https://ci.appveyor.com/project/metatoaster/calmjs-sassy/branch/1.0.2\" rel=\"nofollow\"><img alt=\"https://ci.appveyor.com/api/projects/status/1gei512socwe8nho/branch/1.0.2?svg=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c9e9874c8dbeb7a06959b2d4b25eed73265cdeb/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f31676569353132736f637765386e686f2f6272616e63682f312e302e323f7376673d74727565\"></a>\n<a href=\"https://coveralls.io/github/calmjs/calmjs.sassy?branch=1.0.2\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/calmjs/calmjs.sassy/badge.svg?branch=1.0.2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96c341ae1155a98b40cc4057749d82dd064e237f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f63616c6d6a732f63616c6d6a732e73617373792f62616467652e7376673f6272616e63683d312e302e32\"></a>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>While the <a href=\"https://pypi.python.org/pypi/calmjs\" rel=\"nofollow\"><tt>calmjs</tt></a> framework can support the production of deployable\nartifacts for web applications (through packages such as <a href=\"https://pypi.python.org/pypi/calmjs.rjs\" rel=\"nofollow\"><tt>calmjs.rjs</tt></a>\nand <a href=\"https://pypi.python.org/pypi/calmjs.webpack\" rel=\"nofollow\"><tt>calmjs.webpack</tt></a>), the styling of the application would be\nincomplete without exposing the relevant stylesheets to dependant\npackages.</p>\n<p>With the usage of the extensibility of the calmjs framework, a registry\ndedicated for <tt>sass</tt> may be declared.  Tools that make use of these\ndeclarations may also be integrated to generate a single (or a set of)\nstylesheets for use with the library or the application.</p>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<p>This package provides:</p>\n<ul>\n<li>A base registry that finds all <tt>.scss</tt> files declared in a Python\npackage.</li>\n<li>A basic toolchain for linking all the <tt>.scss</tt> files exported by a\ngiven Python package(s) and their dependencies, plus optionally their\nNode.js/npm dependencies discovered through the dependency graph with\nthe aid of <a href=\"https://pypi.python.org/pypi/calmjs\" rel=\"nofollow\"><tt>calmjs</tt></a>, for the generation of <tt>.css</tt> files for use by\nthe application or export to other libraries.  A specific\nimplementation that links against <a href=\"https://sass.github.io/libsass-python/\" rel=\"nofollow\"><tt><span class=\"pre\">libsass-python</span></tt></a> is provided.</li>\n<li>A calmjs runtime that makes use of the <tt><span class=\"pre\">libsass-python</span></tt> toolchain for\nend-user one-off CSS generation.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install <tt>calmjs.sassy</tt> into a given Python environment, the base\npackage may be installed directly from PyPI with the following command:</p>\n<pre>$ pip install calmjs.sassy\n</pre>\n<p>If support for the usage of <tt><span class=\"pre\">libsass-python</span></tt> is desired, the\ninstallation command will be the following:</p>\n<pre>$ pip install calmjs.sassy<span class=\"o\">[</span>libsass<span class=\"o\">]</span>\n</pre>\n<p>If this package is used as part of the build process, and the default\n<tt><span class=\"pre\">libsass-python</span></tt> toolchain is used for CSS artifact generation, the\ndependency may be declared like so in the package\u2019s <tt>setup.py</tt> file:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">setup_requires</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">'calmjs.sassy[libsass]&gt;=1.0.0,&lt;2'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># plus other packages required for generating the package.</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"c1\"># actual dependencies required for the usage of the package.</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre>\n<div id=\"alternative-installation-methods-advanced-users\">\n<h4>Alternative installation methods (advanced users)</h4>\n<p>Development is still ongoing with <tt>calmjs.sassy</tt>; the development\nversion may be installed through git like so:</p>\n<pre>$ pip install calmjs\n$ pip install git+https://github.com/calmjs/calmjs.sassy.git#egg<span class=\"o\">=</span>calmjs.sassy\n</pre>\n<p>Alternatively, the git repository can be cloned directly and execute\n<tt>pip install <span class=\"pre\">-e</span> .</tt> while inside the root of the source directory.</p>\n<p>Newer versions of <tt>pip</tt> and <tt>setuptools</tt> may omit the initial manual\ninstallation of the <tt>calmjs</tt> package.</p>\n<p>If <tt>setup.py</tt> within the <tt>calmjs.sassy</tt> source tree is used directly,\nplease keep in mind that <tt>calmjs</tt> MUST be available before that is\nexecuted, so that all the required package metadata may be generated\ncorrectly.  Alternatively, please execute <tt>python setup.py egg_info</tt>\nif any message about <tt>Unknown distribution option:</tt> is noted during\nthe invocation of <tt>setup.py</tt>.</p>\n<p>As <tt>calmjs</tt> is declared as both namespace and package, there are certain\nlow-level setup that is required on the working Python environment to\nensure that all modules within can be located correctly.  However,\nversions of <tt>setuptools</tt> earlier than <a href=\"https://setuptools.readthedocs.io/en/latest/history.html#v31-0-0\" rel=\"nofollow\">v31.0.0</a> does not create the\nrequired package namespace declarations when a package is installed\nusing this development installation method when mixed with <tt>pip\ninstall</tt> within the same namespace.  As a result, inconsistent import\nfailures can happen for any modules under the <tt>calmjs</tt> namespace.  As an\nexample:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">calmjs.sassy</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"ne\">ImportError</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">module</span> <span class=\"n\">named</span> <span class=\"s1\">'calmjs.sassy'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">calmjs.base</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">calmjs.sassy</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>If this behavior (and workaround) is undesirable, please ensure the\ninstallation of all <tt>calmjs</tt> related packages follow the same method\n(i.e. either <tt>python setup.py develop</tt> for all packages, or using the\nwheels acquired through <tt>pip</tt>), or upgrade <tt>setuptools</tt> to version\n31 or greater and reinstall all affected packages.</p>\n</div>\n<div id=\"testing-the-installation\">\n<h4>Testing the installation</h4>\n<p>Finally, to verify for the successful installation of <tt>calmjs.sassy</tt>,\nthe included tests may be executed through this command:</p>\n<pre>$ python -m unittest calmjs.sassy.tests.make_suite\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>To generate the <tt>.css</tt> artifact for given package(s) that have\nexported <tt>.scss</tt> styles through the Calmjs module registry system, and\nthat the package <tt><span class=\"pre\">libsass-python</span></tt> is available, the following command\nmay be executed:</p>\n<pre>$ calmjs scss example.package\n</pre>\n<p>The following sections will provide an overview on how this export\nsystem may be enabled for Python packages.  For a more detailed\nexplanation on how the module registry works or how Calmjs works in\ngeneral, please refer to the README provided by the <a href=\"https://pypi.python.org/pypi/calmjs\" rel=\"nofollow\"><tt>calmjs</tt></a> package,\nunder the section <a href=\"https://pypi.python.org/pypi/calmjs/#export-javascript-code-from-python-packages\" rel=\"nofollow\">Export JavaScript code from Python packages</a>.</p>\n<p>The default runtime also exposes a number of tuneable features as flags\nthat are documented below; the specifics may be found by running\n<tt>calmjs scss <span class=\"pre\">--help</span></tt>.</p>\n<div id=\"declaring-scss-files-to-export-for-a-given-python-package\">\n<h4>Declaring SCSS files to export for a given Python package</h4>\n<p>SCSS files embedded within a Python package can be exposed to the\n<tt>calmjs.scss</tt> registry which is provided by this package.  For\nexample, given the the following entry points for that registry defined\nby a package named <tt>example</tt>:</p>\n<pre><span class=\"k\">[calmjs.scss]</span>\n<span class=\"na\">example</span> <span class=\"o\">=</span> <span class=\"s\">example</span>\n</pre>\n<p>This is the most basic declaration that works for packages that share\nthe same name as the import location provided.</p>\n<p>The following is am example for packages that have nested submodules\n(called <tt>example.lib</tt> and <tt>example.app</tt>):</p>\n<pre><span class=\"k\">[calmjs.scss]</span>\n<span class=\"na\">example.lib</span> <span class=\"o\">=</span> <span class=\"s\">example.lib</span>\n<span class=\"na\">example.app</span> <span class=\"o\">=</span> <span class=\"s\">example.app</span>\n</pre>\n<p>While the import locations declared looks exactly like a Python module\n(as per the rules of a Python entry point), the <tt>calmjs.scss</tt>\nregistry will present them using the CommonJS/ES6 style import paths\n(i.e.  <tt>'example/lib'</tt> and <tt>'example/app'</tt>), so users that need\nthose style rules need to be ensure that they <tt>import</tt> those strings.</p>\n<p>Please also note that the default source extractor will extract all\n<tt>*.scss</tt> files within those directories.</p>\n<p>Putting the second example together, the <tt>setup.py</tt> file should\ncontain the following:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'example'</span><span class=\"p\">,</span>\n    <span class=\"n\">setup_requires</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">'calmjs.scss'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># plus other setup level requirements</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\"># the entry points are required to allow calmjs to pick this up</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"\n    [calmjs.scss]\n    example.lib = example.lib\n    example.app = example.app\n    \"\"\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"ensure-the-scss-is-structured-in-the-supported-manner-for-reuse\">\n<h4>Ensure the SCSS is structured in the supported manner for reuse</h4>\n<p>For proper generation of the resulting <tt>.css</tt> and the management of\nthe <tt>.scss</tt> usage and exports, the default <tt><span class=\"pre\">libsass-python</span></tt> toolchain\nimposes a small number of fixed constraints when default settings are\nused.  The main constraint is that a specific entry point file must be\ndeclared to be used to acquire the styling rules for the specified\npackages for the generation of the stylesheet artifact(s).  This\nparameter typically defaults to <tt>index.scss</tt>, but this may be\nspecified to a different value to generate different styling rules, for\nexample for usage with different application end points.</p>\n<p>In essence, this allow the package to create an artifact with just the\nexplicit imports and styling rules defined within it, while exporting\nthe rules it defines to their dependants piecemeal so that they may be\nable to import them using the similar package namespace and module\nnames.  This enables general communication of exports and reusability of\nthose styling rules without forcing dependants to explicitly declare\ntheir required styles multiple times (i.e. only the <tt>@import</tt>\nstatement is needed in the stylesheet itself, and no need to declare\nan explicit entry against something outside the package).</p>\n<p>For example, inside an <tt>example.package</tt> there may be this layout:</p>\n<pre>.\n\u251c\u2500\u2500 example\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 package\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 colors.scss\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 content.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 form.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 form.scss\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 index.scss\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 ui.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 ui.scss\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 widget.js\n\u2514\u2500\u2500 setup.py\n</pre>\n<p>The entry point declaration to export the <tt>.scss</tt> files within the\nexample package will be this:</p>\n<pre><span class=\"k\">[calmjs.scss]</span>\n<span class=\"na\">example.package</span> <span class=\"o\">=</span> <span class=\"s\">example.package</span>\n</pre>\n<p>Note that the <tt>index.scss</tt> (the default entry point name) for this\npackage may contain the following:</p>\n<pre><span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s2\">\"example/package/colors\"</span><span class=\"p\">;</span>\n<span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s2\">\"example/package/form\"</span><span class=\"p\">;</span>\n<span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s2\">\"example/package/ui\"</span><span class=\"p\">;</span>\n</pre>\n<p>Which are simply imports of all the <tt>.scss</tt> modules provided by the\npackage itself.  For an <tt>example.dependant</tt> package that depends on\n<tt>example.package</tt> and exports their own styling rules, it will need\nto declare its dependency through the <tt>install_requires</tt> keyword in\nits <tt>setup.py</tt> and declare the following entry point to expose the\nstyles defined:</p>\n<pre><span class=\"k\">[calmjs.scss]</span>\n<span class=\"na\">example.dependant</span> <span class=\"o\">=</span> <span class=\"s\">example.dependant</span>\n</pre>\n<p>Putting it all together:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'example.dependant'</span><span class=\"p\">,</span>\n    <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">'example.package'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># ... plus other dependencies</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"\n    [calmjs.scss]\n    example.dependant = example.dependant\n    \"\"\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ... plus other declarations</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Note that the entry specific to its dependency <tt>example.package</tt> is\nalready declared already by that package.  For the main entry point\n<tt>index.scss</tt> of <tt>example.dependant</tt>, it may contain the following:</p>\n<pre><span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s2\">\"example/dependant/colors\"</span><span class=\"p\">;</span>\n<span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s2\">\"example/dependant/full_ui\"</span><span class=\"p\">;</span>\n<span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s2\">\"example/package/form\"</span><span class=\"p\">;</span>\n</pre>\n<p>In this example, only the <tt>form.scss</tt> styles exported by the\n<tt>example.package</tt> was included, while omitting <tt>colors.scss</tt> and\n<tt>ui.scss</tt> as it could clash with the definitions required and\nimplemented by the other styles it shipped in that dependant package\n(e.g. <tt>colors</tt> and <tt>full_ui</tt>).  Other dependants of this\n<tt>example.dependant</tt> package may then declare usage of any of these\nexported styles as per their owners\u2019 preferences.  This is one method to\nprovide extensible styles that are reusable in a piecemeal manner by\npackage dependants.</p>\n<p>Naturally, there are parameters to specify entry points other than\n<tt>index.scss</tt> for a given package, if necessary (for example, multiple\nstylesheets may need to be exported for use with different workflows\nprovided by the given package).</p>\n</div>\n<div id=\"include-scss-files-in-node-js-package-repositories\">\n<h4>Include .scss files in Node.js package repositories</h4>\n<p>As the integration with Node.js was the goal of the Calmjs framework, it\nis possible to declare linkage with Node.js packages that ship with\n<tt>.scss</tt> files from package repositories such as <a href=\"https://www.npmjs.com/\" rel=\"nofollow\"><tt>npm</tt></a>.  The actual\nusage is very similar to the typical integration through Calmjs, where\nthe difference lies in the keywords to be specified.</p>\n<p>For example, a <tt>setup.py</tt> may contain the following:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"example.package\"</span>\n    <span class=\"n\">package_json</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"bootstrap\"</span><span class=\"p\">:</span> <span class=\"s2\">\"~4.0.0\"</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">extras_calmjs_scss</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'node_modules'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'bootstrap'</span><span class=\"p\">:</span> <span class=\"s1\">'bootstrap/scss'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The declaration above with simply expose all the <tt>.scss</tt> files inside\nthe <tt>bootstrap</tt> package from <tt>npm</tt> as the directory was declared to\nbe used for the build process.  Importing the desired module from that\ndependency is simply:</p>\n<pre><span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s2\">\"bootstrap/nav\"</span><span class=\"p\">;</span>\n<span class=\"p\">@</span><span class=\"k\">import</span> <span class=\"s2\">\"bootstrap/navbar\"</span><span class=\"p\">;</span>\n</pre>\n<p>Would work seamlessly, much like the usage of JavaScript code.</p>\n<p>Complete artifacts from <tt>npm</tt> may also be explicitly specified to\nexport under a specific identifier.</p>\n</div>\n<div id=\"declaring-prebuilt-standard-css-bundle-for-the-python-package\">\n<h4>Declaring prebuilt, standard CSS bundle for the Python package</h4>\n<p>Finally, to complete the Python package deployment story, the process\nshould include the automatic generation and inclusion of the stylesheet\nartifacts in the resulting Python wheel.  This can be achieved by\nspecifying an entry in the <tt>calmjs.artifacts</tt> registry, with the key\nbeing the filename of the artifact and the value being the import\nlocation to a builder.  A default builder function provided at\n<tt>calmjs.sassy.artifact:complete_css</tt> will enable the generation\nof a complete stylesheet, based on the default toolchain and settings,\nwith <tt>calmjs.sassy.artifact:complete_compressed_css</tt> provide a spec\nthat will produced compressed style output.  Note that both these\nbuilders make use of the <tt><span class=\"pre\">libsass-python</span></tt> toolchain.</p>\n<p>An example entry point configuration that only produce the complete css\nartifact (without compression):</p>\n<pre><span class=\"k\">[calmjs.artifacts]</span>\n<span class=\"na\">example.bundle.css</span> <span class=\"o\">=</span> <span class=\"s\">calmjs.sassy.artifact:complete_css</span>\n</pre>\n<p>Once those entry points are installed, running <tt>calmjs artifact build\nexample.package</tt> will make use of the SCSS toolchain and build the\nartifact at <tt>example.bundle.css</tt> inside the <tt>calmjs_artifacts</tt>\ndirectory within the metadata directory for <tt>example.package</tt>.\nAlternatively, for solution more integrated with <tt>setuptools</tt>, the\n<tt>setup</tt> function in <tt>setup.py</tt> should also enable the\n<tt>build_calmjs_artifacts</tt> flag such that <tt>setup.py build</tt> will also\ntrigger the building process.  This is useful for automatically\ngenerating and including the artifact as part of the wheel building\nprocess.</p>\n<p>A more complete definition that generates both form of the artifacts may\nlook like the following <tt>setup.py</tt>:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'example.package'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># to enable calmjs artifact generation integration w/ setuptools</span>\n    <span class=\"n\">build_calmjs_artifacts</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"\n    # ... other entry points truncated\n    [calmjs.module]\n    example.package = example.package\n\n    [calmjs.artifacts]\n    example.bundle.css = calmjs.sassy.artifact:complete_css\n    example.bundle.min.css = calmjs.sassy.artifact:complete_compressed_css\n    \"\"\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ... other required fields truncated</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Building the wheel using <tt>setup.py</tt> may result in something like this.</p>\n<pre>$ python setup.py bdist_wheel\nautomatically picked registries ['calmjs.scss'] for sourcepaths\n...\ninvoking 'sass.compile' on entry point module at '/tmp/tmpwb5bhmd0/build/__calmjs_sassy__/index.scss'\nwrote export css file at '/home/user/example.package/src/example.package.egg-info/calmjs_artifacts/example.bundle.css'\ninstalling to build/bdist.linux-x86_64/wheel\n...\n</pre>\n<p>With both <tt>example.bundle.css</tt> and <tt>example.bundle.min.css</tt>\navailable under the <tt>calmjs_artifacts</tt> sub-directory inside the\npackage metadata directory inside the Python wheel that was generated.</p>\n<p>Also note that the default builder specifies <tt>index</tt> as the default\nentry point.  If other ones need to be provided or other options are\nrequired, simply create a new builder function that return a <tt>Spec</tt>\nobject with the desired values.</p>\n<p>The end result is that end-users of this package will be able to make\nuse of the complete features provided without having to go through a\nseparate build step, while retaining the ability for regenerating all\nthe required artifacts with just the build dependencies installed,\nwithout having to further acquire the original configuration files (or\neven the source files) from the original repository that are required\nfor the production of these artifacts as they are part of the package\n(provided that the original sources are also packaged into the wheel).</p>\n</div>\n<div id=\"using-registered-scss-with-other-calmjs-node-js-javascript-toolchains\">\n<h4>Using registered .scss with other Calmjs Node.js/JavaScript toolchains</h4>\n<p>While the registry system is designed to be as extensible and reuseable\nas much as possible, those specific underlying tools may expect a\ndifferent complete module name as they may require specific loader\nstring prepended to the stylesheet.  This topic will require more\nexploration for better overall integration, despite the building blocks\nto acheive this is available in the base/generic form.</p>\n</div>\n</div>\n<div id=\"troubleshooting\">\n<h3>Troubleshooting</h3>\n<div id=\"userwarning-unknown-distribution-option\">\n<h4>UserWarning: Unknown distribution option:</h4>\n<p>During setup and installation using the development method, if this\nwarning message is shown, please ensure the egg metadata is correctly\ngenerated by running <tt>python setup.py egg_info</tt> in the source\ndirectory, as the package <tt>calmjs</tt> was not available when the setup\nscript was initially executed.</p>\n</div>\n<div id=\"calmjssassyruntimeerror-missing-required-package-libsass\">\n<h4>CalmjsSassyRuntimeError: missing required package \u2018libsass\u2019</h4>\n<p>Please install the <tt><span class=\"pre\">libsass-python</span></tt> package; this can be achieved by\nrunning:</p>\n<pre>$ pip install libsass\n</pre>\n</div>\n<div id=\"calmjssassyruntimeerror-failed-to-compile-with-libsass\">\n<h4>CalmjsSassyRuntimeError: failed to compile with libsass</h4>\n<p>This can be caused by syntax errors within the styling rules, which\nshould be reported as part of the output.  Generation using the built-in\n<tt>calmjs scss</tt> runtime may return more detailed debugging information\nusing the relevant flags as documented by the <tt><span class=\"pre\">--help</span></tt> flag.</p>\n</div>\n<div id=\"internal-error-data-context-created-with-empty-source-string\">\n<h4>Internal Error: Data context created with empty source string</h4>\n<p>While using the libsass interfacing runtime or toolchain (e.g. the\ndefault <tt>calmjs scss</tt> runtime), if the provided package does not\ninclude (export) a <tt>.scss</tt> file for the specified entry point name\n(the default is <tt>index</tt>, and so the package must export a\n<tt>index.scss</tt> file at the location registered in the <tt>calmjs.scss</tt>\nregistry), nothing will be imported thus the source string will be\nempty, resulting in <tt>libsass</tt> aborting the execution.</p>\n</div>\n</div>\n<div id=\"contribute\">\n<h3>Contribute</h3>\n<ul id=\"issue-tracker\">\n<li>Issue Tracker: <a href=\"https://github.com/calmjs/calmjs.sassy/issues\" rel=\"nofollow\">https://github.com/calmjs/calmjs.sassy/issues</a></li>\n<li>Source Code: <a href=\"https://github.com/calmjs/calmjs.sassy\" rel=\"nofollow\">https://github.com/calmjs/calmjs.sassy</a></li>\n</ul>\n</div>\n<div id=\"legal\">\n<h3>Legal</h3>\n<p>The <tt>calmjs.sassy</tt> package is part of the calmjs project.</p>\n<p>The calmjs project is copyright (c) 2016 Auckland Bioengineering\nInstitute, University of Auckland.  <tt>calmjs.sassy</tt> is licensed under\nthe terms of the GPLv2 or later.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id3\">\n<h3>1.0.2 (2020-04-23)</h3>\n<ul>\n<li>Use <tt>self.opener</tt> for writing file manipulation inside toolchain.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0.1 (2018-05-23)</h3>\n<ul>\n<li>Minor text fixes.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.0.0 (2018-05-23)</h3>\n<ul>\n<li>Initial release of the Sassy CSS integration for Calmjs.</li>\n<li>Provide a base <tt>calmjs.scss</tt> registry to allow Python packages to\nexport <tt>.scss</tt> files for their dependants to utilize.</li>\n<li>Provide a base <tt>calmjs scss</tt> runtime to interface with the default\n<tt><span class=\"pre\">libsass-python</span></tt> toolchain for the production of <tt>.css</tt> artifacts\nfor any given Python packages.</li>\n<li>Provide a couple artifact builders that integrates with the calmjs\nartifact production framework.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7083395, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "34e66928779e661d5bde355788b67861", "sha256": "b8550097488d9251da1f1ae67857841c1460eeb690758b7a5371ebb19202399d"}, "downloads": -1, "filename": "calmjs.sassy-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "34e66928779e661d5bde355788b67861", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31450, "upload_time": "2018-05-23T05:35:03", "upload_time_iso_8601": "2018-05-23T05:35:03.185346Z", "url": "https://files.pythonhosted.org/packages/0a/71/fa85392a73c4346ef22d2f9e694fd99202541f4500f191eaf013456a9d74/calmjs.sassy-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f92af9d9967d75474f94cc3ad9e35cb", "sha256": "025f60df433751e56eebf74449fbae5f592f0792e57ae08e2c98e8f918c4e8ca"}, "downloads": -1, "filename": "calmjs.sassy-1.0.0.zip", "has_sig": false, "md5_digest": "2f92af9d9967d75474f94cc3ad9e35cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49178, "upload_time": "2018-05-23T05:35:05", "upload_time_iso_8601": "2018-05-23T05:35:05.399130Z", "url": "https://files.pythonhosted.org/packages/94/15/db0a421d70f7f81d43e99fc901c8807bb55a837cae1f0a492ddc449b303b/calmjs.sassy-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8bcef3740dda78e4ebc20e7bbac9ae98", "sha256": "f47f6d9b7e81d294f073fa9d7ce0bf795e09e8563f016518ad0c7f1a2a2d923e"}, "downloads": -1, "filename": "calmjs.sassy-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8bcef3740dda78e4ebc20e7bbac9ae98", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31466, "upload_time": "2018-05-23T07:46:26", "upload_time_iso_8601": "2018-05-23T07:46:26.795483Z", "url": "https://files.pythonhosted.org/packages/a4/22/fbd039bda174422c2e6030b150b4867345bde2199f5af8b348ba7d68f99f/calmjs.sassy-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64933066337656bc8e6168a7d361348f", "sha256": "b8c1a17ad8533a9568ed68b9f7ccb4fab37976fd467f7700395e5e9c0d37e9f2"}, "downloads": -1, "filename": "calmjs.sassy-1.0.1.zip", "has_sig": false, "md5_digest": "64933066337656bc8e6168a7d361348f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49232, "upload_time": "2018-05-23T07:46:27", "upload_time_iso_8601": "2018-05-23T07:46:27.885620Z", "url": "https://files.pythonhosted.org/packages/b1/ea/3b0608d67181a0d59ce2cd106eb81fdc352956f38a9af8dc5aa62ad32477/calmjs.sassy-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "4a6b3fa5554b54b4f48e33b6f457b16e", "sha256": "7abab4e1143d133f45bfe678eeee5386cb7badbc9782598236bce97c4da4be26"}, "downloads": -1, "filename": "calmjs.sassy-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4a6b3fa5554b54b4f48e33b6f457b16e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31522, "upload_time": "2020-04-23T10:14:52", "upload_time_iso_8601": "2020-04-23T10:14:52.739239Z", "url": "https://files.pythonhosted.org/packages/60/e2/38d10c2b2382d839fceaa0e81843688b891b1cf343d57ccad0a0013d7e90/calmjs.sassy-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25d3084fe770e7dfb535011a041da82e", "sha256": "ffc9146004a05479c38299dde66d1502b3ffb0f6afe446775386077fd6e3cff6"}, "downloads": -1, "filename": "calmjs.sassy-1.0.2.zip", "has_sig": false, "md5_digest": "25d3084fe770e7dfb535011a041da82e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49386, "upload_time": "2020-04-23T10:14:54", "upload_time_iso_8601": "2020-04-23T10:14:54.624767Z", "url": "https://files.pythonhosted.org/packages/e7/91/ef89d4b2038bf170ed817a082655087bd53037a6be78f18ac8b5b7403032/calmjs.sassy-1.0.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a6b3fa5554b54b4f48e33b6f457b16e", "sha256": "7abab4e1143d133f45bfe678eeee5386cb7badbc9782598236bce97c4da4be26"}, "downloads": -1, "filename": "calmjs.sassy-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4a6b3fa5554b54b4f48e33b6f457b16e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31522, "upload_time": "2020-04-23T10:14:52", "upload_time_iso_8601": "2020-04-23T10:14:52.739239Z", "url": "https://files.pythonhosted.org/packages/60/e2/38d10c2b2382d839fceaa0e81843688b891b1cf343d57ccad0a0013d7e90/calmjs.sassy-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25d3084fe770e7dfb535011a041da82e", "sha256": "ffc9146004a05479c38299dde66d1502b3ffb0f6afe446775386077fd6e3cff6"}, "downloads": -1, "filename": "calmjs.sassy-1.0.2.zip", "has_sig": false, "md5_digest": "25d3084fe770e7dfb535011a041da82e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49386, "upload_time": "2020-04-23T10:14:54", "upload_time_iso_8601": "2020-04-23T10:14:54.624767Z", "url": "https://files.pythonhosted.org/packages/e7/91/ef89d4b2038bf170ed817a082655087bd53037a6be78f18ac8b5b7403032/calmjs.sassy-1.0.2.zip", "yanked": false}], "timestamp": "Thu May  7 22:35:36 2020"}