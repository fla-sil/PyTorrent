{"info": {"author": "Globo.com", "author_email": "timecore@corp.globo.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3"], "description": "alf-auth0  \n===\n\n.. image:: https://travis-ci.org/globocom/alf.svg?branch=master\n    :target: https://travis-ci.org/globocom/alf\n\nPython OAuth 2 Client\n---------------------\n\n`alf` is an OAuth 2 Client based on `requests.Session\n<http://docs.python-requests.org/en/latest/user/advanced/#session-objects>`_\nwith seamless support for the `Client Credentials Flow\n<http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-1.3.4>`_.\n\n.. image:: /assets/alf.jpeg?raw=true\n\nFeatures\n--------\n\n* Automatic token retrieving and renewing\n* Token expiration control\n* Automatic token storage\n* Automatic retry on status 401 (UNAUTHORIZED)\n* Works with Auth0 Client Credentials Flow\n\nUsage\n-----\n\nInitialize the client and use it as a `requests.Session\n<http://docs.python-requests.org/en/latest/user/advanced/#session-objects>`_\nobject.\n\n.. code-block:: python\n\n    from alf.client import Client\n\n    alf = Client(\n        token_endpoint='http://example.com/token',\n        client_id='client-id',\n        client_secret='secret')\n\n    resource_uri = 'http://example.com/resource'\n\n    alf.put(\n        resource_uri, data='{\"name\": \"alf\"}',\n        headers={'Content-Type': 'application/json'})\n\n    alf.get(resource_uri)\n\n    alf.delete(resource_uri)\n\nUsing your custom token storage\n-------------------------------\n\nNow passing an object with get and set attributes you can store or retrieve a token.\n\nThis object can be a Redis, Memcache or your custom object.\n\n.. code-block:: python\n\n    from alf.client import Client\n    from redis import StrictRedis\n\n    redis = StrictRedis(host='localhost', port=6379, db=0)\n\n    alf = Client(\n        token_endpoint='http://example.com/token',\n        client_id='client-id',\n        client_secret='secret',\n        token_storage=redis)\n\n    resource_uri = 'http://example.com/resource'\n\n    alf.put(\n        resource_uri, data='{\"name\": \"alf\"}',\n        headers={'Content-Type': 'application/json'})\n\n    alf.get(resource_uri)\n\n    alf.delete(resource_uri)\n\n\nUsing alf with Auth0\n-------------------------------\n\nFor the Client to work with Auth0 you need to initialize it with\n``audience`` and ``token_default_expire_in``.  \n\nAuth0 is not returning ``expires_in`` when you call authentication endpoint. As a result you should\nset ``token_default_expire_in`` as the same value (or a bit smaller, to be safe) that you \nhave set it in Auth0 management console > APIs > <your_api_name> > Settings > \nToken Expiration (Seconds) field   \n\n``Audience`` should be set as your API Identifier in Auth0.\n\n.. code-block:: python\n\n    from alf.client import Client\n\n    alf = Client(\n        token_endpoint='http://example.com/token',\n        audience='http://api.example.com/my-api/',\n        token_default_expire_in=86400\n        client_id='client-id',\n        client_secret='secret')\n\n    resource_uri = 'http://example.com/resource'\n\n\nHow does it work?\n-----------------\n\nBefore the request, a token will be requested on the authentication endpoint\nand a JSON response with the ``access_token`` and ``expires_in`` keys will be\nexpected.\n\nMultiple attempts will be issued after an error response from the endpoint if\nthe ``token_retries`` argument is used. Check `token-retrying`_ for more info.\n\n``alf`` keeps the token until it is expired according to the ``expires_in``\nvalue.\n\nThe token will be used on a `Bearer authorization\nheader <http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-7.1>`_ for\nthe original request.\n\n.. code-block::\n\n    GET /resource/1 HTTP/1.1\n    Host: example.com\n    Authorization: Bearer token-12312\n\nIf the request fails with a 401 (UNAUTHORIZED) status, a new token is retrieved\nfrom the endpoint and the request is retried. This happens only once, if it\nfails again the error response is returned.\n\nThe token will be reused for every following request until it is expired.\n\n\n.. _token-retrying:\n\nToken Retrying\n--------------\n\nThe client supports the `retry interface from urllib3 <https://urllib3.readthedocs.org/en/latest/helpers.html?highlight=retry#module-urllib3.util.retry>`_ to repeat attempts to\nretrieve the token from the endpoint.\n\nThe following code will retry the token request 5 times when the response status\nis 500 and it will wait 0.3 seconds longer after each error (known as\n`backoff <https://en.wikipedia.org/wiki/Exponential_backoff>`_).\n\n.. code-block:: python\n\n    from requests.packages.urllib3.util import Retry\n    from alf.client import Client\n\n    alf = Client(\n        token_endpoint='http://example.com/token',\n        client_id='client-id',\n        client_secret='secret',\n        token_retry=Retry(total=5, status_forcelist=[500], backoff_factor=0.3))\n\nWorkflow\n--------\n\n.. image:: /assets/workflow.png?raw=true\n\nTroubleshooting\n---------------\n\nIn case of an error retrieving a token, the error response will be returned,\nthe real request won't happen.\n\n\nRelated projects\n----------------\n\n`djalf <https://github.com/viniciuschagas/djalf>`_\n''''''''''''''''''''''''''''''''''''''''''''''''''\n\nAn extended client that uses Django's cache backend to share tokens between\nserver instances.\n\n\n`tornado-alf <https://github.com/globocom/tornado-alf>`_\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\nA port of the `alf` client using tornado's `AsyncHTTPClient`.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/globocom/alf", "keywords": "oauth client client_credentials requests auth0", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "alf-auth0", "package_url": "https://pypi.org/project/alf-auth0/", "platform": "", "project_url": "https://pypi.org/project/alf-auth0/", "project_urls": {"Homepage": "https://github.com/globocom/alf"}, "release_url": "https://pypi.org/project/alf-auth0/0.8.1/", "requires_dist": ["requests (>=1.2.3)"], "requires_python": "", "summary": "OAuth Client adapted to work with Auth0", "version": "0.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>alf-auth0\n===</p>\n<a href=\"https://travis-ci.org/globocom/alf\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/globocom/alf.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b4849965e6056ebac8822f84035a6dadb4b2645/68747470733a2f2f7472617669732d63692e6f72672f676c6f626f636f6d2f616c662e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"python-oauth-2-client\">\n<h2>Python OAuth 2 Client</h2>\n<p><cite>alf</cite> is an OAuth 2 Client based on <a href=\"http://docs.python-requests.org/en/latest/user/advanced/#session-objects\" rel=\"nofollow\">requests.Session</a>\nwith seamless support for the <a href=\"http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-1.3.4\" rel=\"nofollow\">Client Credentials Flow</a>.</p>\n<img alt=\"/assets/alf.jpeg?raw=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75e75ccbb2fbae507ecdbf2ff9e0ce8f997f85ad/2f6173736574732f616c662e6a7065673f7261773d74727565\">\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Automatic token retrieving and renewing</li>\n<li>Token expiration control</li>\n<li>Automatic token storage</li>\n<li>Automatic retry on status 401 (UNAUTHORIZED)</li>\n<li>Works with Auth0 Client Credentials Flow</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Initialize the client and use it as a <a href=\"http://docs.python-requests.org/en/latest/user/advanced/#session-objects\" rel=\"nofollow\">requests.Session</a>\nobject.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">alf.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">alf</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">token_endpoint</span><span class=\"o\">=</span><span class=\"s1\">'http://example.com/token'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'client-id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'secret'</span><span class=\"p\">)</span>\n\n<span class=\"n\">resource_uri</span> <span class=\"o\">=</span> <span class=\"s1\">'http://example.com/resource'</span>\n\n<span class=\"n\">alf</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span>\n    <span class=\"n\">resource_uri</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s1\">'{\"name\": \"alf\"}'</span><span class=\"p\">,</span>\n    <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">})</span>\n\n<span class=\"n\">alf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">resource_uri</span><span class=\"p\">)</span>\n\n<span class=\"n\">alf</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">resource_uri</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-your-custom-token-storage\">\n<h2>Using your custom token storage</h2>\n<p>Now passing an object with get and set attributes you can store or retrieve a token.</p>\n<p>This object can be a Redis, Memcache or your custom object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">alf.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">StrictRedis</span>\n\n<span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">StrictRedis</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">6379</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">alf</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">token_endpoint</span><span class=\"o\">=</span><span class=\"s1\">'http://example.com/token'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'client-id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'secret'</span><span class=\"p\">,</span>\n    <span class=\"n\">token_storage</span><span class=\"o\">=</span><span class=\"n\">redis</span><span class=\"p\">)</span>\n\n<span class=\"n\">resource_uri</span> <span class=\"o\">=</span> <span class=\"s1\">'http://example.com/resource'</span>\n\n<span class=\"n\">alf</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span>\n    <span class=\"n\">resource_uri</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s1\">'{\"name\": \"alf\"}'</span><span class=\"p\">,</span>\n    <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">})</span>\n\n<span class=\"n\">alf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">resource_uri</span><span class=\"p\">)</span>\n\n<span class=\"n\">alf</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">resource_uri</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-alf-with-auth0\">\n<h2>Using alf with Auth0</h2>\n<p>For the Client to work with Auth0 you need to initialize it with\n<tt>audience</tt> and <tt>token_default_expire_in</tt>.</p>\n<p>Auth0 is not returning <tt>expires_in</tt> when you call authentication endpoint. As a result you should\nset <tt>token_default_expire_in</tt> as the same value (or a bit smaller, to be safe) that you\nhave set it in Auth0 management console &gt; APIs &gt; &lt;your_api_name&gt; &gt; Settings &gt;\nToken Expiration (Seconds) field</p>\n<p><tt>Audience</tt> should be set as your API Identifier in Auth0.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">alf.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">alf</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">token_endpoint</span><span class=\"o\">=</span><span class=\"s1\">'http://example.com/token'</span><span class=\"p\">,</span>\n    <span class=\"n\">audience</span><span class=\"o\">=</span><span class=\"s1\">'http://api.example.com/my-api/'</span><span class=\"p\">,</span>\n    <span class=\"n\">token_default_expire_in</span><span class=\"o\">=</span><span class=\"mi\">86400</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'client-id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'secret'</span><span class=\"p\">)</span>\n\n<span class=\"n\">resource_uri</span> <span class=\"o\">=</span> <span class=\"s1\">'http://example.com/resource'</span>\n</pre>\n</div>\n<div id=\"how-does-it-work\">\n<h2>How does it work?</h2>\n<p>Before the request, a token will be requested on the authentication endpoint\nand a JSON response with the <tt>access_token</tt> and <tt>expires_in</tt> keys will be\nexpected.</p>\n<p>Multiple attempts will be issued after an error response from the endpoint if\nthe <tt>token_retries</tt> argument is used. Check <a href=\"#token-retrying\" rel=\"nofollow\">token-retrying</a> for more info.</p>\n<p><tt>alf</tt> keeps the token until it is expired according to the <tt>expires_in</tt>\nvalue.</p>\n<p>The token will be used on a <a href=\"http://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-7.1\" rel=\"nofollow\">Bearer authorization\nheader</a> for\nthe original request.</p>\n<pre>GET /resource/1 HTTP/1.1\nHost: example.com\nAuthorization: Bearer token-12312\n</pre>\n<p>If the request fails with a 401 (UNAUTHORIZED) status, a new token is retrieved\nfrom the endpoint and the request is retried. This happens only once, if it\nfails again the error response is returned.</p>\n<p>The token will be reused for every following request until it is expired.</p>\n</div>\n<div id=\"id2\">\n<span id=\"token-retrying\"></span><h2>Token Retrying</h2>\n<p>The client supports the <a href=\"https://urllib3.readthedocs.org/en/latest/helpers.html?highlight=retry#module-urllib3.util.retry\" rel=\"nofollow\">retry interface from urllib3</a> to repeat attempts to\nretrieve the token from the endpoint.</p>\n<p>The following code will retry the token request 5 times when the response status\nis 500 and it will wait 0.3 seconds longer after each error (known as\n<a href=\"https://en.wikipedia.org/wiki/Exponential_backoff\" rel=\"nofollow\">backoff</a>).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">requests.packages.urllib3.util</span> <span class=\"kn\">import</span> <span class=\"n\">Retry</span>\n<span class=\"kn\">from</span> <span class=\"nn\">alf.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">alf</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">token_endpoint</span><span class=\"o\">=</span><span class=\"s1\">'http://example.com/token'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'client-id'</span><span class=\"p\">,</span>\n    <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'secret'</span><span class=\"p\">,</span>\n    <span class=\"n\">token_retry</span><span class=\"o\">=</span><span class=\"n\">Retry</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">status_forcelist</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">500</span><span class=\"p\">],</span> <span class=\"n\">backoff_factor</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"workflow\">\n<h2>Workflow</h2>\n<img alt=\"/assets/workflow.png?raw=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e9da770cdd88c54ec4544184715aaafadc7ea04/2f6173736574732f776f726b666c6f772e706e673f7261773d74727565\">\n</div>\n<div id=\"troubleshooting\">\n<h2>Troubleshooting</h2>\n<p>In case of an error retrieving a token, the error response will be returned,\nthe real request won\u2019t happen.</p>\n</div>\n<div id=\"related-projects\">\n<h2>Related projects</h2>\n<div id=\"id3\">\n<h3><a href=\"https://github.com/viniciuschagas/djalf\" rel=\"nofollow\">djalf</a></h3>\n<p>An extended client that uses Django\u2019s cache backend to share tokens between\nserver instances.</p>\n</div>\n<div id=\"id4\">\n<h3><a href=\"https://github.com/globocom/tornado-alf\" rel=\"nofollow\">tornado-alf</a></h3>\n<p>A port of the <cite>alf</cite> client using tornado\u2019s <cite>AsyncHTTPClient</cite>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4000139, "releases": {"0.8.1": [{"comment_text": "", "digests": {"md5": "e1da9c852df7a962022dc8e8ae688042", "sha256": "0107c7d0e03a59560b96373af624d5965d98ddb5e87ebce0dc481e1e178da10b"}, "downloads": -1, "filename": "alf_auth0-0.8.1-py2-none-any.whl", "has_sig": false, "md5_digest": "e1da9c852df7a962022dc8e8ae688042", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 11568, "upload_time": "2018-06-25T12:38:42", "upload_time_iso_8601": "2018-06-25T12:38:42.072647Z", "url": "https://files.pythonhosted.org/packages/f7/09/2322e080f4d6ecac713b95813ef417e91d6d3e9b6a534cb227f6da5b7cab/alf_auth0-0.8.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c28ba716b52d9802a3516f9ee3f29efe", "sha256": "c6fdd807f3789d6002e9956f72058394484cd6dd9fd80e47c5c15d4ace339a04"}, "downloads": -1, "filename": "alf-auth0-0.8.1.tar.gz", "has_sig": false, "md5_digest": "c28ba716b52d9802a3516f9ee3f29efe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8373, "upload_time": "2018-06-25T12:38:43", "upload_time_iso_8601": "2018-06-25T12:38:43.398815Z", "url": "https://files.pythonhosted.org/packages/84/52/57451728225f480bd1de17a4d1eec2130fe3a4a1c0e9f02cc1647c17b764/alf-auth0-0.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1da9c852df7a962022dc8e8ae688042", "sha256": "0107c7d0e03a59560b96373af624d5965d98ddb5e87ebce0dc481e1e178da10b"}, "downloads": -1, "filename": "alf_auth0-0.8.1-py2-none-any.whl", "has_sig": false, "md5_digest": "e1da9c852df7a962022dc8e8ae688042", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 11568, "upload_time": "2018-06-25T12:38:42", "upload_time_iso_8601": "2018-06-25T12:38:42.072647Z", "url": "https://files.pythonhosted.org/packages/f7/09/2322e080f4d6ecac713b95813ef417e91d6d3e9b6a534cb227f6da5b7cab/alf_auth0-0.8.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c28ba716b52d9802a3516f9ee3f29efe", "sha256": "c6fdd807f3789d6002e9956f72058394484cd6dd9fd80e47c5c15d4ace339a04"}, "downloads": -1, "filename": "alf-auth0-0.8.1.tar.gz", "has_sig": false, "md5_digest": "c28ba716b52d9802a3516f9ee3f29efe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8373, "upload_time": "2018-06-25T12:38:43", "upload_time_iso_8601": "2018-06-25T12:38:43.398815Z", "url": "https://files.pythonhosted.org/packages/84/52/57451728225f480bd1de17a4d1eec2130fe3a4a1c0e9f02cc1647c17b764/alf-auth0-0.8.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:54 2020"}