{"info": {"author": "Chris Billington", "author_email": "chrisjbillington@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Debuggers", "Topic :: Software Development :: Testing", "Topic :: System :: Benchmark", "Topic :: Utilities"], "description": "\nbprofile 1.3\n************\n\n`Chris Billington <mailto:chrisjbillington@gmail.com>`_, February 28, 2015\n\n*bprofile* is a wrapper around *cProfile*, *gprof2dot* and *graphviz*,\nproviding a simple context manager for profiling sections of Python\ncode and producing visual graphs of profiling results. It works on\nWindows and Unix.\n\n`View on PyPI <http://pypi.python.org/pypi/bprofile>`_\n| `Get the source from BitBucket <http://bitbucket.org/cbillington/bprofile>`_\n| `Read the docs at readthedocs <http://bprofile.readthedocs.org>`_\n\n\nInstallation\n============\n\nto install *bprofile*, run:\n\n::\n\n   $ pip install bprofile\n\nor to install from source:\n\n::\n\n   $ python setup.py install\n\nNote:\n  *bprofile* requires graphviz to be installed. *bprofile* looks for a\n  *graphviz* installation folder in ``C:\\Program Files`` or\n  ``C:\\Program Files (x86)`` on Windows, and for *graphviz*\n  executables in the ``PATH`` on Unix.\n\n\nIntroduction\n============\n\nEvery time I need to profile some Python code I go through the same\nsteps: looking up *cProfile*'s docs, and then reading about\n*gprof2dot* and *graphviz*. And then it turns out the code I want to\nprofile is a GUI callback or something, and I don't want to profile\nthe whole program because it spends most of its time doing nothing.\n\n*cProfile* certainly has this functionality, which I took one look at,\nand thought: *This should be a context manager, and when it exits, it\nshould call gprof2dot and graphviz automatically so I don't have to\nremember their command line arguments, and so I don't accidentally\nprint a .png to standard output and have to listen to all the ASCII\nbeep characters.*\n\n``BProfile`` provides this functionality.\n\n\nExample usage\n=============\n\n::\n\n   # example.py\n\n   import os\n   import time\n   import pylab as pl\n   from bprofile import BProfile\n\n   def do_some_stuff():\n       for i in range(100):\n           time.sleep(.01)\n\n   def do_some_stuff_that_wont_be_profiled():\n       os.system('ping -c 5 google.com')\n\n   def do_some_more_stuff(n):\n       x = pl.rand(100000)\n       for i in range(100):\n           time.sleep(.01)\n           x = pl.fft(x)\n\n\n   profiler = BProfile('example.png')\n\n   with profiler:\n       do_some_stuff()\n\n   do_some_stuff_that_wont_be_profiled()\n\n   with profiler:\n       do_some_more_stuff(5)\n\nThe above outputs the following image ``example.png`` in the current\nworking directory:\n\n.. image:: https://bitbucket.org/cbillington/bprofile/raw/default/doc/example.png\n\nsee  ``BProfile`` for more information on usage.\n\n\nClass reference\n===============\n\n**class bprofile.BProfile(output_path, threshold_percent=2.5,\nreport_interval=5, enabled=True)**\n\n   A profiling context manager.\n\n   A context manager that after it exits, outputs a .png file of a\n   graph made via cProfile, gprof2dot and graphviz. The context\n   manager can be used multiple times, and if used repeatedly,\n   regularly updates its output to include cumulative results.\n\n   An instance can also be used as a decorator, it will simply wrap\n   calls to the decorated method in the profiling context.\n\n   :Parameters:\n      * **output_path** (*str*) -- The name of the .png report file\n        you would like to output. '.png' will be appended if not\n        present.\n\n      * **threshold_percent** (*int or float*) -- Nodes in which\n        execution spends less than this percentage of the total\n        profiled execution time will not be included in the output.\n\n      * **report_interval** (*int or float*) -- The minimum time, in\n        seconds, in between output file generation. If the context\n        manager exits and it has not been at least this long since the\n        last output was generated, output generation will be delayed\n        until it has been. More profiling can run in the meantime.\n        This is to decrease overhead on your program, (even though\n        this overhead will only be incurred when no code is being\n        profiled), while allowing you to have ongoing results of the\n        profiling while your code is still running. If you only use\n        the context manager once, then this argument has no effect. If\n        you set it to zero, output will be produced after every exit\n        of the context.\n\n      * **enabled** (*bool*) -- Whether the profiler is enabled or\n        not. Equivalent to calling ``set_enabled()`` with this\n        argument after instantiation. Useful for enabling and\n        disabling profiling with a global flag when you do not have\n        easy access to the instance - for example when using as a\n        decorator.\n\n   -[ Notes ]-\n\n   The profiler will return immediately after the context manager, and\n   will generate its .png report in a separate thread. If the same\n   context manager is used multiple times output will be generated at\n   most every ``report_interval`` seconds (default: 5). The delay is\n   to allow blocks to execute many times in between reports, rather\n   than slowing your program down with generating graphs all the time.\n   This means that if your profile block is running rapidly and\n   repeatedly, a new report will be produced every ``report_interval``\n   seconds.\n\n   Pending reports will be generated at interpreter shutdown.\n\n   Note that even if ``report_interval`` is short, reporting will not\n   interfere with the profiling results themselves, as a lock is\n   acquired that will prevent profiled code from running at the same\n   time as the report generation code. So the overhead produced by\n   report generation does not affect the results of profiling - this\n   overhead will only affect portions of your code that are not being\n   profiled.\n\n   The lock is shared between instances, and so you can freely\n   instantiate many ``BProfile`` instances to profile different parts\n   of your code. Instances with the same ``output_path`` will share an\n   underlying cProfile profiler, and so their reports will be\n   combined. Profile objects are thread safe, so a single instance can\n   be shared as well anywhere in your program.\n\n   Warning:\n     Since only one profiler can be running at a time, two profiled\n     pieces of code in different threads waiting on each other in any\n     way will deadlock.\n\n   **__call__(function)**\n\n      Returns a wrapped version of ``function`` with profiling.\n      Intended for use as a decorator.\n\n   **do_report()**\n\n      Collect statistics and output a .png file of the profiling\n      report.\n\n      -[ Notes ]-\n\n      This occurs automatically at a rate of ``report_interval``, but\n      one can call this method to report results sooner. The report\n      will include results from all ``BProfile`` instances that have\n      the same ``output_path`` and no more automatic reports (if\n      further profiling is done) will be produced until after the\n      minimum ``report_interval`` of those instances.\n\n      This method can be called at any time and is threadsafe. It is\n      not advisable to call it during profiling however as this will\n      incur overhead that will affect the profiling results. Only\n      automatic reports are guaranteed to be generated when no\n      profiling is taking place.\n\n   **set_enabled(enabled)**\n\n      Set whether profiling is enabled.\n\n      if enabled==True, all methods work as normal. Otherwise\n      ``start()``, ``stop()``, and ``do_report()`` become dummy\n      methods that do nothing. This is useful for having a global\n      variable to turn profiling on or off, based on whether one is\n      debugging or not, or to enable or disable profiling of different\n      parts of code selectively.\n\n      If profiling is running when this method is called to disable\n      it, the profiling will be stopped.\n\n   **start()**\n\n      Begin profiling.\n\n   **stop()**\n\n      Stop profiling.\n\n      Stop profiling and outptut a profiling report, if at least\n      ``report_interval`` has elapsed since the last report. Otherwise\n      output the report after a delay.\n\n      Does not preclude starting profiling again at a  later time.\n      Results are cumulative.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/cbillington/bprofile", "keywords": null, "license": "simplified BSD", "maintainer": null, "maintainer_email": null, "name": "bprofile", "package_url": "https://pypi.org/project/bprofile/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bprofile/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/cbillington/bprofile"}, "release_url": "https://pypi.org/project/bprofile/1.3.4/", "requires_dist": null, "requires_python": null, "summary": "A wrapper around profile/cProfile, gprof2dot and dot,\nproviding a simple context manager for profiling sections\nof Python code and producing visual graphs of profiling results.", "version": "1.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"mailto:chrisjbillington%40gmail.com\">Chris Billington</a>, February 28, 2015</p>\n<p><em>bprofile</em> is a wrapper around <em>cProfile</em>, <em>gprof2dot</em> and <em>graphviz</em>,\nproviding a simple context manager for profiling sections of Python\ncode and producing visual graphs of profiling results. It works on\nWindows and Unix.</p>\n<p><a href=\"http://pypi.python.org/pypi/bprofile\" rel=\"nofollow\">View on PyPI</a>\n| <a href=\"http://bitbucket.org/cbillington/bprofile\" rel=\"nofollow\">Get the source from BitBucket</a>\n| <a href=\"http://bprofile.readthedocs.org\" rel=\"nofollow\">Read the docs at readthedocs</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>to install <em>bprofile</em>, run:</p>\n<pre>$ pip install bprofile\n</pre>\n<p>or to install from source:</p>\n<pre>$ python setup.py install\n</pre>\n<dl>\n<dt>Note:</dt>\n<dd><em>bprofile</em> requires graphviz to be installed. <em>bprofile</em> looks for a\n<em>graphviz</em> installation folder in <tt><span class=\"pre\">C:\\Program</span> Files</tt> or\n<tt><span class=\"pre\">C:\\Program</span> Files (x86)</tt> on Windows, and for <em>graphviz</em>\nexecutables in the <tt>PATH</tt> on Unix.</dd>\n</dl>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Every time I need to profile some Python code I go through the same\nsteps: looking up <em>cProfile</em>\u2019s docs, and then reading about\n<em>gprof2dot</em> and <em>graphviz</em>. And then it turns out the code I want to\nprofile is a GUI callback or something, and I don\u2019t want to profile\nthe whole program because it spends most of its time doing nothing.</p>\n<p><em>cProfile</em> certainly has this functionality, which I took one look at,\nand thought: <em>This should be a context manager, and when it exits, it\nshould call gprof2dot and graphviz automatically so I don\u2019t have to\nremember their command line arguments, and so I don\u2019t accidentally\nprint a .png to standard output and have to listen to all the ASCII\nbeep characters.</em></p>\n<p><tt>BProfile</tt> provides this functionality.</p>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<pre># example.py\n\nimport os\nimport time\nimport pylab as pl\nfrom bprofile import BProfile\n\ndef do_some_stuff():\n    for i in range(100):\n        time.sleep(.01)\n\ndef do_some_stuff_that_wont_be_profiled():\n    os.system('ping -c 5 google.com')\n\ndef do_some_more_stuff(n):\n    x = pl.rand(100000)\n    for i in range(100):\n        time.sleep(.01)\n        x = pl.fft(x)\n\n\nprofiler = BProfile('example.png')\n\nwith profiler:\n    do_some_stuff()\n\ndo_some_stuff_that_wont_be_profiled()\n\nwith profiler:\n    do_some_more_stuff(5)\n</pre>\n<p>The above outputs the following image <tt>example.png</tt> in the current\nworking directory:</p>\n<img alt=\"https://bitbucket.org/cbillington/bprofile/raw/default/doc/example.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d0f65ca18bb48a2af61cfcda9e016fde21bded2/68747470733a2f2f6269746275636b65742e6f72672f6362696c6c696e67746f6e2f6270726f66696c652f7261772f64656661756c742f646f632f6578616d706c652e706e67\">\n<p>see  <tt>BProfile</tt> for more information on usage.</p>\n</div>\n<div id=\"class-reference\">\n<h2>Class reference</h2>\n<p><strong>class bprofile.BProfile(output_path, threshold_percent=2.5,\nreport_interval=5, enabled=True)</strong></p>\n<blockquote>\n<p>A profiling context manager.</p>\n<p>A context manager that after it exits, outputs a .png file of a\ngraph made via cProfile, gprof2dot and graphviz. The context\nmanager can be used multiple times, and if used repeatedly,\nregularly updates its output to include cumulative results.</p>\n<p>An instance can also be used as a decorator, it will simply wrap\ncalls to the decorated method in the profiling context.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Parameters:</th><td><ul>\n<li><strong>output_path</strong> (<em>str</em>) \u2013 The name of the .png report file\nyou would like to output. \u2018.png\u2019 will be appended if not\npresent.</li>\n<li><strong>threshold_percent</strong> (<em>int or float</em>) \u2013 Nodes in which\nexecution spends less than this percentage of the total\nprofiled execution time will not be included in the output.</li>\n<li><strong>report_interval</strong> (<em>int or float</em>) \u2013 The minimum time, in\nseconds, in between output file generation. If the context\nmanager exits and it has not been at least this long since the\nlast output was generated, output generation will be delayed\nuntil it has been. More profiling can run in the meantime.\nThis is to decrease overhead on your program, (even though\nthis overhead will only be incurred when no code is being\nprofiled), while allowing you to have ongoing results of the\nprofiling while your code is still running. If you only use\nthe context manager once, then this argument has no effect. If\nyou set it to zero, output will be produced after every exit\nof the context.</li>\n<li><strong>enabled</strong> (<em>bool</em>) \u2013 Whether the profiler is enabled or\nnot. Equivalent to calling <tt>set_enabled()</tt> with this\nargument after instantiation. Useful for enabling and\ndisabling profiling with a global flag when you do not have\neasy access to the instance - for example when using as a\ndecorator.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>-[ Notes ]-</p>\n<p>The profiler will return immediately after the context manager, and\nwill generate its .png report in a separate thread. If the same\ncontext manager is used multiple times output will be generated at\nmost every <tt>report_interval</tt> seconds (default: 5). The delay is\nto allow blocks to execute many times in between reports, rather\nthan slowing your program down with generating graphs all the time.\nThis means that if your profile block is running rapidly and\nrepeatedly, a new report will be produced every <tt>report_interval</tt>\nseconds.</p>\n<p>Pending reports will be generated at interpreter shutdown.</p>\n<p>Note that even if <tt>report_interval</tt> is short, reporting will not\ninterfere with the profiling results themselves, as a lock is\nacquired that will prevent profiled code from running at the same\ntime as the report generation code. So the overhead produced by\nreport generation does not affect the results of profiling - this\noverhead will only affect portions of your code that are not being\nprofiled.</p>\n<p>The lock is shared between instances, and so you can freely\ninstantiate many <tt>BProfile</tt> instances to profile different parts\nof your code. Instances with the same <tt>output_path</tt> will share an\nunderlying cProfile profiler, and so their reports will be\ncombined. Profile objects are thread safe, so a single instance can\nbe shared as well anywhere in your program.</p>\n<dl>\n<dt>Warning:</dt>\n<dd>Since only one profiler can be running at a time, two profiled\npieces of code in different threads waiting on each other in any\nway will deadlock.</dd>\n</dl>\n<p><strong>__call__(function)</strong></p>\n<blockquote>\nReturns a wrapped version of <tt>function</tt> with profiling.\nIntended for use as a decorator.</blockquote>\n<p><strong>do_report()</strong></p>\n<blockquote>\n<p>Collect statistics and output a .png file of the profiling\nreport.</p>\n<p>-[ Notes ]-</p>\n<p>This occurs automatically at a rate of <tt>report_interval</tt>, but\none can call this method to report results sooner. The report\nwill include results from all <tt>BProfile</tt> instances that have\nthe same <tt>output_path</tt> and no more automatic reports (if\nfurther profiling is done) will be produced until after the\nminimum <tt>report_interval</tt> of those instances.</p>\n<p>This method can be called at any time and is threadsafe. It is\nnot advisable to call it during profiling however as this will\nincur overhead that will affect the profiling results. Only\nautomatic reports are guaranteed to be generated when no\nprofiling is taking place.</p>\n</blockquote>\n<p><strong>set_enabled(enabled)</strong></p>\n<blockquote>\n<p>Set whether profiling is enabled.</p>\n<p>if enabled==True, all methods work as normal. Otherwise\n<tt>start()</tt>, <tt>stop()</tt>, and <tt>do_report()</tt> become dummy\nmethods that do nothing. This is useful for having a global\nvariable to turn profiling on or off, based on whether one is\ndebugging or not, or to enable or disable profiling of different\nparts of code selectively.</p>\n<p>If profiling is running when this method is called to disable\nit, the profiling will be stopped.</p>\n</blockquote>\n<p><strong>start()</strong></p>\n<blockquote>\nBegin profiling.</blockquote>\n<p><strong>stop()</strong></p>\n<blockquote>\n<p>Stop profiling.</p>\n<p>Stop profiling and outptut a profiling report, if at least\n<tt>report_interval</tt> has elapsed since the last report. Otherwise\noutput the report after a delay.</p>\n<p>Does not preclude starting profiling again at a  later time.\nResults are cumulative.</p>\n</blockquote>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 2881098, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "685de1627139dd408140d9c02f45f80f", "sha256": "8de8dee3e3dad2548a4835aa2f51ffcd7824d9a46777b7797d607a54b0f79043"}, "downloads": -1, "filename": "bprofile-0.1.0.zip", "has_sig": false, "md5_digest": "685de1627139dd408140d9c02f45f80f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28317, "upload_time": "2014-10-08T21:46:18", "upload_time_iso_8601": "2014-10-08T21:46:18.191976Z", "url": "https://files.pythonhosted.org/packages/e8/30/3fee02c9e9af1587459bc0fb2c795817003eaa50d6fbcb239fc8e3a0ca31/bprofile-0.1.0.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "7485bb9356d47265b45b39625079c60a", "sha256": "0f6f030bdec4571919016bb6a3bf9c3db3309664f8aef47c84b3e6f12e6d6fe5"}, "downloads": -1, "filename": "bprofile-1.0.0.zip", "has_sig": false, "md5_digest": "7485bb9356d47265b45b39625079c60a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28351, "upload_time": "2014-10-08T21:53:09", "upload_time_iso_8601": "2014-10-08T21:53:09.622792Z", "url": "https://files.pythonhosted.org/packages/55/90/fd5e435a2b2e06eb88570124a7e2fabfa9d520f12c61f2f053c6ad020b60/bprofile-1.0.0.zip", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "b2a9d805d64233fa25960fee5acfc1aa", "sha256": "262d29ef3cc59b24ce8246e65bddcdd8e036bc89a7bd35493e7d562c0e1e45a5"}, "downloads": -1, "filename": "bprofile-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b2a9d805d64233fa25960fee5acfc1aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27233, "upload_time": "2014-10-09T04:57:36", "upload_time_iso_8601": "2014-10-09T04:57:36.316349Z", "url": "https://files.pythonhosted.org/packages/73/7e/66126bbab4609aedad3b25df405d8183ffe2da6a096a8e10473ef64ac995/bprofile-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "0e0a520b9ad35c98a78fe1216093b64f", "sha256": "17b5c0877da57ab985a6f6ee3a4c91ade3796f5e4a93c70cad1c2491e50a812a"}, "downloads": -1, "filename": "bprofile-1.1.1.tar.gz", "has_sig": false, "md5_digest": "0e0a520b9ad35c98a78fe1216093b64f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27230, "upload_time": "2014-10-09T05:00:29", "upload_time_iso_8601": "2014-10-09T05:00:29.926665Z", "url": "https://files.pythonhosted.org/packages/c0/9a/d1b5080bf78cbd3a7658a912557dceaf93ad35e316324f8d7f54de9af876/bprofile-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "7d7eceb5a4385d2d5fe4263b9c9c15ce", "sha256": "ee90a3f374269001b9704c9f208de7104ba9c3fb093adb65fb5eaa4c8b50ff4d"}, "downloads": -1, "filename": "bprofile-1.1.2.tar.gz", "has_sig": false, "md5_digest": "7d7eceb5a4385d2d5fe4263b9c9c15ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29127, "upload_time": "2014-10-10T01:52:39", "upload_time_iso_8601": "2014-10-10T01:52:39.977349Z", "url": "https://files.pythonhosted.org/packages/a6/f8/5d8ddd9696b2a02ce88e664279823c8e9e156c2b0101494e1ae222139892/bprofile-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "9f7a9906f2bfc7cd9df83d714babaeeb", "sha256": "38eb0da205635c8bc47279090dbf884a8a235f35334b285f34539a47c6564114"}, "downloads": -1, "filename": "bprofile-1.1.3.tar.gz", "has_sig": false, "md5_digest": "9f7a9906f2bfc7cd9df83d714babaeeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29156, "upload_time": "2014-10-10T02:35:44", "upload_time_iso_8601": "2014-10-10T02:35:44.192182Z", "url": "https://files.pythonhosted.org/packages/52/56/5fc06ff11f97b605a9f8530592b60a7ee716ff7b827897ffb6d14bda57f6/bprofile-1.1.3.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "864fd4db66e5dacde8ce2ac1f2ab9bf9", "sha256": "354c022f0b7e1b89cc56048262a617ec09f53fee82c7cbeaf756d0b2022e3d35"}, "downloads": -1, "filename": "bprofile-1.2.0.tar.gz", "has_sig": false, "md5_digest": "864fd4db66e5dacde8ce2ac1f2ab9bf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30028, "upload_time": "2014-10-21T05:05:11", "upload_time_iso_8601": "2014-10-21T05:05:11.194023Z", "url": "https://files.pythonhosted.org/packages/8a/65/58bbd7cfb0258c60b9154896788bbd1cd3d6c39bbe46b7abdee1c5d50b8f/bprofile-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "c6a280e2f87f6aa1fb2429aa8542b1e2", "sha256": "0220409583a1795d155aeb256f73cf5a30dd78b9c3666d0e17b7cf738b81415d"}, "downloads": -1, "filename": "bprofile-1.3.0.zip", "has_sig": false, "md5_digest": "c6a280e2f87f6aa1fb2429aa8542b1e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32301, "upload_time": "2014-10-29T15:42:38", "upload_time_iso_8601": "2014-10-29T15:42:38.945932Z", "url": "https://files.pythonhosted.org/packages/79/84/f716aaaf0e163deed838b5ff40bac105a68077867fc4aca2521837a8efab/bprofile-1.3.0.zip", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "783b339d09486f935dae1951fc9a22f4", "sha256": "de596bc03b675fbbed6ceee9abd73fc30be2a364e11b292e3b54ccefa3dcd661"}, "downloads": -1, "filename": "bprofile-1.3.1.zip", "has_sig": false, "md5_digest": "783b339d09486f935dae1951fc9a22f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32489, "upload_time": "2014-10-31T17:37:52", "upload_time_iso_8601": "2014-10-31T17:37:52.816761Z", "url": "https://files.pythonhosted.org/packages/77/3f/0c2d8674c9c7046a59b3d929536857948f798179b7112be45b0b7bc82cce/bprofile-1.3.1.zip", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "db6048663b04df9867cf80746cd2b7fd", "sha256": "e5522ae5093496e4f40dcd39c788c255b3392b021b92c32c506a018e7fdf890b"}, "downloads": -1, "filename": "bprofile-1.3.2.tar.gz", "has_sig": false, "md5_digest": "db6048663b04df9867cf80746cd2b7fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30667, "upload_time": "2015-02-27T02:48:20", "upload_time_iso_8601": "2015-02-27T02:48:20.185751Z", "url": "https://files.pythonhosted.org/packages/94/aa/07df44f95925c25f7f122233c4321a83e940c6b01f83cf0a6427fdd70c73/bprofile-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "1dd67a2aa360a2c8bfc8ab3713e4d7c2", "sha256": "2b88d7f35562175fc802d44a4f098d9d3323cea6be31e7fe98f550b8522f53d3"}, "downloads": -1, "filename": "bprofile-1.3.3.tar.gz", "has_sig": false, "md5_digest": "1dd67a2aa360a2c8bfc8ab3713e4d7c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31110, "upload_time": "2016-03-07T00:12:56", "upload_time_iso_8601": "2016-03-07T00:12:56.934067Z", "url": "https://files.pythonhosted.org/packages/50/46/f5d27e5ffe4957e6641f07afc85480d7b7f51f156dd9221b028eaa48fa09/bprofile-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "61bbcc2038b5fadde5133695ab02314f", "sha256": "a9c7c3a1cd803f8af715dc6f16c67aafbc9fe62e6894efd14fe2351578153fdf"}, "downloads": -1, "filename": "bprofile-1.3.4.tar.gz", "has_sig": false, "md5_digest": "61bbcc2038b5fadde5133695ab02314f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30472, "upload_time": "2017-05-17T17:19:22", "upload_time_iso_8601": "2017-05-17T17:19:22.321522Z", "url": "https://files.pythonhosted.org/packages/d0/8f/7405934e51b89ab5af0014ca85585c4f9713258c7b16ad5f409e417762cb/bprofile-1.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "61bbcc2038b5fadde5133695ab02314f", "sha256": "a9c7c3a1cd803f8af715dc6f16c67aafbc9fe62e6894efd14fe2351578153fdf"}, "downloads": -1, "filename": "bprofile-1.3.4.tar.gz", "has_sig": false, "md5_digest": "61bbcc2038b5fadde5133695ab02314f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30472, "upload_time": "2017-05-17T17:19:22", "upload_time_iso_8601": "2017-05-17T17:19:22.321522Z", "url": "https://files.pythonhosted.org/packages/d0/8f/7405934e51b89ab5af0014ca85585c4f9713258c7b16ad5f409e417762cb/bprofile-1.3.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:27 2020"}