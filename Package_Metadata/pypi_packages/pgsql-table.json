{"info": {"author": "Vakhtang Zardiashvili", "author_email": "hazardland@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "<!-- MarkdownTOC levels=\"1,2,3\" autolink=\"true\" -->\n\n- [Installing](#installing)\n- [Introduction](#introduction)\n    - [Define class](#define-class)\n    - [Define table](#define-table)\n    - [Create table](#create-table)\n- [Usage](#usage)\n    - [Insert](#insert)\n        - [Using](#using)\n        - [Invalid value handling](#invalid-value-handling)\n    - [Select](#select)\n        - [Getting by id](#getting-by-id)\n        - [Getting by filter criterias](#getting-by-filter-criterias)\n        - [Filtering options](#filtering-options)\n\n<!-- /MarkdownTOC -->\n\n# Installing\n```\npip install pgsql-table\n```\nImporting\n```python\nimport sql\n\nclass Foo:\n    def __init__(id=None, name=None):\n        self.id = id\n        self.name = name\n\nclass Table(sql.Table)\n    type = Foo\n    fields = {\n        \"name\": {}\n    }\n```\n\n# Introduction\n\nImagine you have to store in database user profile object. You get following JSON as input from API endpoint:\n```python\n{\n    \"nickname\": \"XXX_()_XXX\",\n    \"gender\": \"female\", #Allowed value one from \"male\", \"female\", \"other\"\n    \"interested_in\": [\"friendship\", \"dating\"], #Allowed values many from \"friendship\", \"dating\", \"relationship\"\n    \"height\": 170, #Allowed values min 100 max 200 integer\n    \"birthday\": \"2001-07-17\", #Only valid dates\n    \"weight\": 69.9, #Allowed floats,\n    \"has_cats\": False\n}\n```\n\n## Define class\nFirst of all let us describe our profile object. Every time we select data from user profile we want to return objects of this class:\n```python\nclass Profile:\n    def __init__(\n            self,\n            id=None,\n            nickname=None,\n            gender=None,\n            interested_in=None,\n            birthday=None,\n            height=None,\n            weight=None,\n            has_cats=None\n        ):\n        self.id = id, #Just avoiding \"id\" as it is builtin function\n        self.nickname = nickname\n        self.gender = gender\n        self.interested_in = interested_in\n        self.birthday = birthday\n        self.height = height\n        self.weight = weight\n        self.has_cats = has_cats\n```\n\n## Define table\nNow let us describe the table in JSON:\n```python\nimport sql\n\nclass Table(sql.Table):\n    schema = 'test'\n    name = 'user_profile' #Actual table name\n    type = Profile #The class we described above\n    fields = {\n        \"id\":{\n            \"field\": \"id\", #Object property is \"id\" but in table column is \"id\"\n            \"type\": \"int\",\n            \"insert\": False,\n            \"update\": False\n        },\n        \"nickname\": {\n        },\n        \"gender\": {\n            \"options\":{\n                \"male\",\n                \"female\",\n                \"other\"\n            }\n        },\n        \"interested_in\": {\n            \"options\": {\n                \"dating\",\n                \"friendship\",\n                \"relationship\"\n            },\n            \"array\": True #This allows to accept multiple values for this field\n        },\n        \"height\": {\n            \"type\": \"int\", #Default was string, only int between range accepted\n            \"min\": 100,\n            \"max\": 200\n        },\n        \"birthday\": {\n            \"type\": \"date\" #Only valid date is accepted\n        },\n        \"weight\": {\n            \"type\": \"float\" #Only castable to float accepted\n        },\n        \"has_cats\": {\n            \"type\": \"bool\"\n        }\n    }\n```\n\n## Create table\nThat is not all. Now we need to create actual table:\n```sql\nSET search_path TO test;\n\n-- THIS IS LIST OF AVAILABE VALUES FOR THE gender FIELD\nCREATE TYPE USER_PROFILE_GENDER AS ENUM\n(\n    'female',\n    'other',\n    'male'\n);\n\n-- AND THIS IS FOR interedted_in FIELD\nCREATE TYPE USER_PROFILE_INTERESTED_IN AS ENUM\n(\n    'dating',\n    'relationship',\n    'friendship'\n);\n\nCREATE TABLE user_profile\n(\n    /**\n        IN REAL WORLD I WOULD HAVE ONLY FOLLOWING FIELD IN user_profile:\n            user_id BIGINT NOT NULL REFERENCES users(id) PRIMARY KEY,\n        BUT LET US PRETEND IT IS NOT user_profile TABLE AND HAS ITS OWN id\n    **/\n    id BIGSERIAL PRIMARY KEY,\n    nickname TEXT,\n    gender USER_PROFILE_GENDER, -- ONLY AVAILABLE VALUE\n    interested_in USER_PROFILE_INTERESTED_IN[], -- SPOT THE [] THIS MEANS MULTIPLE AVAILABE VALUES\n    height INT,\n    birthday TIMESTAMP WITHOUT TIME ZONE,\n    weight TEXT,\n    has_cats BOOL\n);\n```\n\n# Usage\n## Insert\nAnd finally we can advance to usage, let us create a function which creates a user profile:\n```python\nfrom sql import Error #I am not sure about this yet\n#get_db and put_db are just hipotethical functions releasing free db connection from connection pool\nfrom config import get_db, put_db\n\ndef create(data):\n    try:\n        insert = Table.insert(data)\n    except Exception as error:\n        raise error\n\n    try:\n        db = get_db()\n        cursor = db.cursor()\n        cursor.execute(\"INSERT INTO \"+Table+\" (\"+insert.fields()+\") \" #List all insert fields\n                       \"VALUES(\"+insert.fields('%s')+\") \" #Instead of insert fields generate '%s' for fields\n                       \"RETURNING \"+Table.select(), #Table.select() lists all fields having select=True (default)\n                       insert.values())\n        profile = Table.create(cursor.fetchone()) #Create Profile object with what we have inserted\n    except Exception as error:\n        raise Error('general_error')\n    finally:\n        db.commit()\n        put_db(db)\n\n    return profile\n```\n\n```insert.fields()``` generates ```nickname, gender, interested_in, height, birthday, weight, has_cats``` string\n\n```insert.fields('%')``` generates ```%s, %s, %s, %s, %s, %s, %s``` (One %s for each insert field)\n\n```Table.select()``` generates ```user_profile.nickname, user_profile.gender, user_profile.interested_in, user_profile.height, user_profile.birthday, user_profile.weight, user_profile.has_cats``` string\n\n```Table.create(cursor.fetchone())``` creates object of class Profile and fills in values from table row. As you will see in the usage example insert is returning actual Profile object and all this is done with a single query! (Without writing a single field name)\n\n### Using\nWe should call this function now, pretend the data came from API call:\n```python\nprofile = create({\n    \"nickname\": \"XXX_()_XXX\",\n    #\"gender\": \"female\", #We skipped gender\n    \"interested_in\": [\"friendship\", \"dating\"],\n    \"birthday\": \"2001-07-17\",\n    \"height\": 169.99,\n    \"weight\": 69.99,\n    \"has_cats\": False,\n    \"something\": \"that_we_dont_have\"\n    })\nprint(profile.__dict__)\n```\nThis will print ```{'id': 20, 'nickname': 'XXX_()_XXX', 'gender': None, 'interested_in': ['friendship', 'dating'], 'birthday': datetime.datetime(2001, 7, 17, 0, 0), 'height': 169, 'weight': '69.99', 'has_cats': False}```\n\n### Invalid value handling\nAllowed value checks:\n```python\ntry:\n    profile = create({\n        \"gender\": \"zebra\"\n        })\nexcept Error as error:\n    print(error.code, error.message)\n```\nPrints ```invalid_value Invalid value zebra for field gender```\n```python\ntry:\n    profile = create({\n        \"interested_in\": [\"being_sober\"]\n        })\nexcept Error as error:\n    print(error.code, error.message)\n```\nPrints ```invalid_value Invalid value being_sober for field gender```\n\n## Select\n### Getting by id\n\n```python\ndef get(id):\n    if not id:\n        raise Error('missing_input')\n\n    try:\n        db = get_db()\n        cursor = db.cursor()\n        cursor.execute(\"SELECT \"+Table.select()+\" FROM \"+Table+\" WHERE \"+Table('id')+\"=%s\", (id,))\n        profile = Table.create(cursor.fetchone())\n    except Exception as error:\n        raise Error('general_error')\n    finally:\n        db.commit()\n        put_db(db)\n\n    return profile\n```\nThe module used for executing queries is ```psycopg2``` which is well known library for working with PostgreSQL in Python. We use parametrized query with a single parameter. One thing I want to note is **never forget comma in ```(id,)``` after single parameter or you will kill database!**\n\nA little usage of ```get``` function:\n```python\ntry:\n    profile = get(20)\n    print(profile.interested_in)\n    #prints ['friendship', 'dating']\nexcept Exception as error:\n    # In case nothing found\n    print(error)\n```\n\n### Getting by filter criterias\nJSON definition allows to filter table data with any field within allowed values:\n```python\ndef get_all(criterias={}, order={}):\n\n    where = Table.where(criterias)\n    print(where.fields())\n    print(where.values())\n\n    total = None\n    result = []\n    try:\n        db = get_db()\n        cursor = db.cursor()\n        cursor.execute(\"SELECT \"+Table.select()+\", COUNT(*) OVER() \"\n                       \"FROM \"+Table+\" \"\n                       \"WHERE \" + where.fields() + ' ' + # AND something=something\n                       \"ORDER BY \" + Table.order('id', 'desc', order), #New order, default order field, default order method\n                       where.values())\n\n        while True:\n            try:\n                data = cursor.fetchone()\n                if total is None:\n                    total = data[Table.offset()]\n                profile = Table.create(data)\n                result.append(profile)\n            except TypeError:\n                return result\n    except Exception as error:\n        raise Error('general_error')\n    finally:\n        db.commit()\n        put_db(db)\n\n    #return total, result\n    return result\n```\n\nThis is the usage of get_all with filter criterias\n```python\n# This section is for only JSON dumping our result\nimport json\nimport datetime\ndef json_dump(value):\n    if isinstance(value, datetime.date):\n        return str(value)\n    elif hasattr(value, 'json') and callable(value.json):\n        return value.json()\n    return value.__dict__\n\n#This is usage of get_all method\nresult = get_all({\n        \"weight\":{\n            \"from\": 45,\n            \"to\": 71\n        },\n        \"birthday\":{\n            \"to\": \"2002-01-01\"\n        },\n        \"gender\": \"female\",\n        \"interested_in\": [\"friendship\", \"dating\"]\n    })\n\n#This is dumping in JSON\nprint(json.dumps(result, default=json_dump))\n\n#It will print\n#[{\"id\": [48], \"nickname\": \"XXX_()_XXX\", \"gender\": null, \"interested_in\": [\"friendship\", \"dating\"], \"birthday\": \"2001-07-17 00:00:00\", \"height\": 169, \"weight\": \"69.99\", \"has_cats\": false}, {\"id\": [50], \"nickname\": \"XXX_()_XXX\", \"gender\": null, \"interested_in\": [\"friendship\", \"dating\"], \"birthday\": \"2001-07-17 00:00:00\", \"height\": 169, \"weight\": \"69.99\", \"has_cats\": false}]\n```\n\nWhat does where.fields() do:\n```python\nwhere = Table.where(data)\nprint(where.fields()\n```\n\nIf data is empty it will output ```1=1```. This is useful for not breaking query in case if generated where clause is followed by your custom ```AND my_custom=criteria```\n\nIf data is not empty, in case of our previous example it will output:\n```\nuser_profile.\"gender\"=%s AND %s = ANY(user_profile.\"interested_in\") AND %s = ANY(user_profile.\"interested_in\") AND user_profile.\"birthday\"<=%s AND user_profile.\"weight\">=%s AND user_profile.\"weight\"<=%s\n```\n\nFor the same filter criteria data ```where.values()``` will output:\n```\n['female', 'friendship', 'dating', '2002-01-01 00:00:00', '45.0', '71.0']\n```\nAs a result every ```%s``` in generated where clause has its own value.\n\n### Filtering options\n```int```, ```float``` and ```date``` require ```\"field_name\":{\"from\":from_value, \"to\":to_value}```, or at least ```from``` or ```to```\n\nFields with single option value require that value matched one of defined options: \"field_name\": \"allowed_option_value\"\n\nFields with option arrays require that value was array and array items where allowed option values: ```\"field_name\":[\"allowed_value1\", \"allowed_value2\"]```, even single value requires array to be passed\n\nIn case of optionless strings LIKE 'my_value%' expression is used and if we have \"field_name\":\"abc\", every value is selected which starts with 'abc'\n\nEvery value is casted in field type before using, cast errors also protect while processing unknown input.\n\n### Ordering\nFor order we dedicated second parameter in our ```get_all``` function:\n```python\nresult = get_all(order={'birthday','desc'})\n```\nIn case you do not pass order we have default order criteria specified in our select query as\n```python\nTable.order('id', 'desc', order)\n```\nWhere id is our field name. One of those keys defined in ```Table.fields``` (Not actual table field name, in case of id, id is table column name and id is property name of Profile object)\n\n## Update\n### Creating update function\nFunction will update only provided available fields with update permission and will return updated row on success. It will also execute only single query.\n```python\ndef save(id, data):\n    try:\n        print(data)\n        update = Table.update(data)\n    except Exception as error:\n        raise error\n\n    try:\n        db = get_db()\n        cursor = db.cursor()\n        cursor.execute(\"UPDATE \"+Table+\" \"\n                       \"SET \"+update.fields()+\" \"\n                       \"WHERE \"+Table('id')+\"=%s \"\n                       \"RETURNING \"+Table.select(),\n                       update.values(id))\n        profile = Table.create(cursor.fetchone())\n    except Exception as error:\n        raise Error('general_error')\n    finally:\n        db.commit()\n        put_db(db)\n\n    return profile\n```\n\n### Using update\nTake a note that only two fields are specified for update:\n```python\ntry:\n    profile = save(20, {\"gender\":\"female\", \"weight\":45})\n    print(profile.__dict__)\n    #{'id': (20,), 'nickname': 'XXX_()_XXX', 'gender': 'female', 'interested_in': ['friendship', 'dating'], 'birthday': datetime.datetime(2001, 7, 17, 0, 0), 'height': 169, 'weight': '45.0', 'has_cats': False}\nexcept Exception as error:\n    # In case nothing updated\n    print(error)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hazardland/sql.py", "keywords": "orm,pgsql,postgresql,model", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pgsql-table", "package_url": "https://pypi.org/project/pgsql-table/", "platform": "", "project_url": "https://pypi.org/project/pgsql-table/", "project_urls": {"Homepage": "https://github.com/hazardland/sql.py"}, "release_url": "https://pypi.org/project/pgsql-table/0.2.2/", "requires_dist": ["python-dateutil"], "requires_python": ">=3.6", "summary": "JSON definition based light ORM for PosgreSQL", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li><a href=\"#installing\" rel=\"nofollow\">Installing</a></li>\n<li><a href=\"#introduction\" rel=\"nofollow\">Introduction</a>\n<ul>\n<li><a href=\"#define-class\" rel=\"nofollow\">Define class</a></li>\n<li><a href=\"#define-table\" rel=\"nofollow\">Define table</a></li>\n<li><a href=\"#create-table\" rel=\"nofollow\">Create table</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#insert\" rel=\"nofollow\">Insert</a>\n<ul>\n<li><a href=\"#using\" rel=\"nofollow\">Using</a></li>\n<li><a href=\"#invalid-value-handling\" rel=\"nofollow\">Invalid value handling</a></li>\n</ul>\n</li>\n<li><a href=\"#select\" rel=\"nofollow\">Select</a>\n<ul>\n<li><a href=\"#getting-by-id\" rel=\"nofollow\">Getting by id</a></li>\n<li><a href=\"#getting-by-filter-criterias\" rel=\"nofollow\">Getting by filter criterias</a></li>\n<li><a href=\"#filtering-options\" rel=\"nofollow\">Filtering options</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h1>Installing</h1>\n<pre><code>pip install pgsql-table\n</code></pre>\n<p>Importing</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sql</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Table</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">)</span>\n    <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n    <span class=\"p\">}</span>\n</pre>\n<h1>Introduction</h1>\n<p>Imagine you have to store in database user profile object. You get following JSON as input from API endpoint:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"nickname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXX_()_XXX\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"female\"</span><span class=\"p\">,</span> <span class=\"c1\">#Allowed value one from \"male\", \"female\", \"other\"</span>\n    <span class=\"s2\">\"interested_in\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"friendship\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dating\"</span><span class=\"p\">],</span> <span class=\"c1\">#Allowed values many from \"friendship\", \"dating\", \"relationship\"</span>\n    <span class=\"s2\">\"height\"</span><span class=\"p\">:</span> <span class=\"mi\">170</span><span class=\"p\">,</span> <span class=\"c1\">#Allowed values min 100 max 200 integer</span>\n    <span class=\"s2\">\"birthday\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2001-07-17\"</span><span class=\"p\">,</span> <span class=\"c1\">#Only valid dates</span>\n    <span class=\"s2\">\"weight\"</span><span class=\"p\">:</span> <span class=\"mf\">69.9</span><span class=\"p\">,</span> <span class=\"c1\">#Allowed floats,</span>\n    <span class=\"s2\">\"has_cats\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Define class</h2>\n<p>First of all let us describe our profile object. Every time we select data from user profile we want to return objects of this class:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Profile</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">nickname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">interested_in</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">birthday</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">has_cats</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n        <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"c1\">#Just avoiding \"id\" as it is builtin function</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nickname</span> <span class=\"o\">=</span> <span class=\"n\">nickname</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"n\">gender</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">interested_in</span> <span class=\"o\">=</span> <span class=\"n\">interested_in</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">birthday</span> <span class=\"o\">=</span> <span class=\"n\">birthday</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">height</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">weight</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">has_cats</span> <span class=\"o\">=</span> <span class=\"n\">has_cats</span>\n</pre>\n<h2>Define table</h2>\n<p>Now let us describe the table in JSON:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sql</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Table</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'user_profile'</span> <span class=\"c1\">#Actual table name</span>\n    <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"n\">Profile</span> <span class=\"c1\">#The class we described above</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"id\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"id\"</span><span class=\"p\">,</span> <span class=\"c1\">#Object property is \"id\" but in table column is \"id\"</span>\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"int\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"insert\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"update\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"nickname\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"options\"</span><span class=\"p\">:{</span>\n                <span class=\"s2\">\"male\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"female\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"other\"</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"interested_in\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"options\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"dating\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"friendship\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"relationship\"</span>\n            <span class=\"p\">},</span>\n            <span class=\"s2\">\"array\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span> <span class=\"c1\">#This allows to accept multiple values for this field</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"height\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"int\"</span><span class=\"p\">,</span> <span class=\"c1\">#Default was string, only int between range accepted</span>\n            <span class=\"s2\">\"min\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"max\"</span><span class=\"p\">:</span> <span class=\"mi\">200</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"birthday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"date\"</span> <span class=\"c1\">#Only valid date is accepted</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"weight\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"float\"</span> <span class=\"c1\">#Only castable to float accepted</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"has_cats\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bool\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</pre>\n<h2>Create table</h2>\n<p>That is not all. Now we need to create actual table:</p>\n<pre><span class=\"k\">SET</span> <span class=\"n\">search_path</span> <span class=\"k\">TO</span> <span class=\"n\">test</span><span class=\"p\">;</span>\n\n<span class=\"c1\">-- THIS IS LIST OF AVAILABE VALUES FOR THE gender FIELD</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">TYPE</span> <span class=\"n\">USER_PROFILE_GENDER</span> <span class=\"k\">AS</span> <span class=\"n\">ENUM</span>\n<span class=\"p\">(</span>\n    <span class=\"s1\">'female'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'other'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'male'</span>\n<span class=\"p\">);</span>\n\n<span class=\"c1\">-- AND THIS IS FOR interedted_in FIELD</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">TYPE</span> <span class=\"n\">USER_PROFILE_INTERESTED_IN</span> <span class=\"k\">AS</span> <span class=\"n\">ENUM</span>\n<span class=\"p\">(</span>\n    <span class=\"s1\">'dating'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'relationship'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'friendship'</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">user_profile</span>\n<span class=\"p\">(</span>\n    <span class=\"cm\">/**</span>\n<span class=\"cm\">        IN REAL WORLD I WOULD HAVE ONLY FOLLOWING FIELD IN user_profile:</span>\n<span class=\"cm\">            user_id BIGINT NOT NULL REFERENCES users(id) PRIMARY KEY,</span>\n<span class=\"cm\">        BUT LET US PRETEND IT IS NOT user_profile TABLE AND HAS ITS OWN id</span>\n<span class=\"cm\">    **/</span>\n    <span class=\"n\">id</span> <span class=\"n\">BIGSERIAL</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span><span class=\"p\">,</span>\n    <span class=\"n\">nickname</span> <span class=\"nb\">TEXT</span><span class=\"p\">,</span>\n    <span class=\"n\">gender</span> <span class=\"n\">USER_PROFILE_GENDER</span><span class=\"p\">,</span> <span class=\"c1\">-- ONLY AVAILABLE VALUE</span>\n    <span class=\"n\">interested_in</span> <span class=\"n\">USER_PROFILE_INTERESTED_IN</span><span class=\"p\">[],</span> <span class=\"c1\">-- SPOT THE [] THIS MEANS MULTIPLE AVAILABE VALUES</span>\n    <span class=\"n\">height</span> <span class=\"nb\">INT</span><span class=\"p\">,</span>\n    <span class=\"n\">birthday</span> <span class=\"k\">TIMESTAMP</span> <span class=\"k\">WITHOUT</span> <span class=\"k\">TIME</span> <span class=\"k\">ZONE</span><span class=\"p\">,</span>\n    <span class=\"n\">weight</span> <span class=\"nb\">TEXT</span><span class=\"p\">,</span>\n    <span class=\"n\">has_cats</span> <span class=\"n\">BOOL</span>\n<span class=\"p\">);</span>\n</pre>\n<h1>Usage</h1>\n<h2>Insert</h2>\n<p>And finally we can advance to usage, let us create a function which creates a user profile:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sql</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span> <span class=\"c1\">#I am not sure about this yet</span>\n<span class=\"c1\">#get_db and put_db are just hipotethical functions releasing free db connection from connection pool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">get_db</span><span class=\"p\">,</span> <span class=\"n\">put_db</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">insert</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">error</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">get_db</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"INSERT INTO \"</span><span class=\"o\">+</span><span class=\"n\">Table</span><span class=\"o\">+</span><span class=\"s2\">\" (\"</span><span class=\"o\">+</span><span class=\"n\">insert</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s2\">\") \"</span> <span class=\"c1\">#List all insert fields</span>\n                       <span class=\"s2\">\"VALUES(\"</span><span class=\"o\">+</span><span class=\"n\">insert</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"s2\">\") \"</span> <span class=\"c1\">#Instead of insert fields generate '%s' for fields</span>\n                       <span class=\"s2\">\"RETURNING \"</span><span class=\"o\">+</span><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(),</span> <span class=\"c1\">#Table.select() lists all fields having select=True (default)</span>\n                       <span class=\"n\">insert</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n        <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">())</span> <span class=\"c1\">#Create Profile object with what we have inserted</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"s1\">'general_error'</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n        <span class=\"n\">put_db</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">profile</span>\n</pre>\n<p><code>insert.fields()</code> generates <code>nickname, gender, interested_in, height, birthday, weight, has_cats</code> string</p>\n<p><code>insert.fields('%')</code> generates <code>%s, %s, %s, %s, %s, %s, %s</code> (One %s for each insert field)</p>\n<p><code>Table.select()</code> generates <code>user_profile.nickname, user_profile.gender, user_profile.interested_in, user_profile.height, user_profile.birthday, user_profile.weight, user_profile.has_cats</code> string</p>\n<p><code>Table.create(cursor.fetchone())</code> creates object of class Profile and fills in values from table row. As you will see in the usage example insert is returning actual Profile object and all this is done with a single query! (Without writing a single field name)</p>\n<h3>Using</h3>\n<p>We should call this function now, pretend the data came from API call:</p>\n<pre><span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"nickname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXX_()_XXX\"</span><span class=\"p\">,</span>\n    <span class=\"c1\">#\"gender\": \"female\", #We skipped gender</span>\n    <span class=\"s2\">\"interested_in\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"friendship\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dating\"</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"birthday\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2001-07-17\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"height\"</span><span class=\"p\">:</span> <span class=\"mf\">169.99</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"weight\"</span><span class=\"p\">:</span> <span class=\"mf\">69.99</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"has_cats\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"something\"</span><span class=\"p\">:</span> <span class=\"s2\">\"that_we_dont_have\"</span>\n    <span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n</pre>\n<p>This will print <code>{'id': 20, 'nickname': 'XXX_()_XXX', 'gender': None, 'interested_in': ['friendship', 'dating'], 'birthday': datetime.datetime(2001, 7, 17, 0, 0), 'height': 169, 'weight': '69.99', 'has_cats': False}</code></p>\n<h3>Invalid value handling</h3>\n<p>Allowed value checks:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"zebra\"</span>\n        <span class=\"p\">})</span>\n<span class=\"k\">except</span> <span class=\"n\">Error</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<p>Prints <code>invalid_value Invalid value zebra for field gender</code></p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">create</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"interested_in\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"being_sober\"</span><span class=\"p\">]</span>\n        <span class=\"p\">})</span>\n<span class=\"k\">except</span> <span class=\"n\">Error</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<p>Prints <code>invalid_value Invalid value being_sober for field gender</code></p>\n<h2>Select</h2>\n<h3>Getting by id</h3>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">id</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"s1\">'missing_input'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">get_db</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT \"</span><span class=\"o\">+</span><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s2\">\" FROM \"</span><span class=\"o\">+</span><span class=\"n\">Table</span><span class=\"o\">+</span><span class=\"s2\">\" WHERE \"</span><span class=\"o\">+</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"s2\">\"=</span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,))</span>\n        <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"s1\">'general_error'</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n        <span class=\"n\">put_db</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">profile</span>\n</pre>\n<p>The module used for executing queries is <code>psycopg2</code> which is well known library for working with PostgreSQL in Python. We use parametrized query with a single parameter. One thing I want to note is <strong>never forget comma in <code>(id,)</code> after single parameter or you will kill database!</strong></p>\n<p>A little usage of <code>get</code> function:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">interested_in</span><span class=\"p\">)</span>\n    <span class=\"c1\">#prints ['friendship', 'dating']</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n    <span class=\"c1\"># In case nothing found</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n</pre>\n<h3>Getting by filter criterias</h3>\n<p>JSON definition allows to filter table data with any field within allowed values:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_all</span><span class=\"p\">(</span><span class=\"n\">criterias</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n\n    <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">criterias</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n\n    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">get_db</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT \"</span><span class=\"o\">+</span><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s2\">\", COUNT(*) OVER() \"</span>\n                       <span class=\"s2\">\"FROM \"</span><span class=\"o\">+</span><span class=\"n\">Table</span><span class=\"o\">+</span><span class=\"s2\">\" \"</span>\n                       <span class=\"s2\">\"WHERE \"</span> <span class=\"o\">+</span> <span class=\"n\">where</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"c1\"># AND something=something</span>\n                       <span class=\"s2\">\"ORDER BY \"</span> <span class=\"o\">+</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'desc'</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">),</span> <span class=\"c1\">#New order, default order field, default order method</span>\n                       <span class=\"n\">where</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">total</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">()]</span>\n                <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">result</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"s1\">'general_error'</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n        <span class=\"n\">put_db</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#return total, result</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre>\n<p>This is the usage of get_all with filter criterias</p>\n<pre><span class=\"c1\"># This section is for only JSON dumping our result</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"k\">def</span> <span class=\"nf\">json_dump</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s1\">'json'</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n\n<span class=\"c1\">#This is usage of get_all method</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">get_all</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"weight\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"from\"</span><span class=\"p\">:</span> <span class=\"mi\">45</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"mi\">71</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"birthday\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2002-01-01\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"female\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"interested_in\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"friendship\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dating\"</span><span class=\"p\">]</span>\n    <span class=\"p\">})</span>\n\n<span class=\"c1\">#This is dumping in JSON</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">json_dump</span><span class=\"p\">))</span>\n\n<span class=\"c1\">#It will print</span>\n<span class=\"c1\">#[{\"id\": [48], \"nickname\": \"XXX_()_XXX\", \"gender\": null, \"interested_in\": [\"friendship\", \"dating\"], \"birthday\": \"2001-07-17 00:00:00\", \"height\": 169, \"weight\": \"69.99\", \"has_cats\": false}, {\"id\": [50], \"nickname\": \"XXX_()_XXX\", \"gender\": null, \"interested_in\": [\"friendship\", \"dating\"], \"birthday\": \"2001-07-17 00:00:00\", \"height\": 169, \"weight\": \"69.99\", \"has_cats\": false}]</span>\n</pre>\n<p>What does where.fields() do:</p>\n<pre><span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">()</span>\n</pre>\n<p>If data is empty it will output <code>1=1</code>. This is useful for not breaking query in case if generated where clause is followed by your custom <code>AND my_custom=criteria</code></p>\n<p>If data is not empty, in case of our previous example it will output:</p>\n<pre><code>user_profile.\"gender\"=%s AND %s = ANY(user_profile.\"interested_in\") AND %s = ANY(user_profile.\"interested_in\") AND user_profile.\"birthday\"&lt;=%s AND user_profile.\"weight\"&gt;=%s AND user_profile.\"weight\"&lt;=%s\n</code></pre>\n<p>For the same filter criteria data <code>where.values()</code> will output:</p>\n<pre><code>['female', 'friendship', 'dating', '2002-01-01 00:00:00', '45.0', '71.0']\n</code></pre>\n<p>As a result every <code>%s</code> in generated where clause has its own value.</p>\n<h3>Filtering options</h3>\n<p><code>int</code>, <code>float</code> and <code>date</code> require <code>\"field_name\":{\"from\":from_value, \"to\":to_value}</code>, or at least <code>from</code> or <code>to</code></p>\n<p>Fields with single option value require that value matched one of defined options: \"field_name\": \"allowed_option_value\"</p>\n<p>Fields with option arrays require that value was array and array items where allowed option values: <code>\"field_name\":[\"allowed_value1\", \"allowed_value2\"]</code>, even single value requires array to be passed</p>\n<p>In case of optionless strings LIKE 'my_value%' expression is used and if we have \"field_name\":\"abc\", every value is selected which starts with 'abc'</p>\n<p>Every value is casted in field type before using, cast errors also protect while processing unknown input.</p>\n<h3>Ordering</h3>\n<p>For order we dedicated second parameter in our <code>get_all</code> function:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">get_all</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'birthday'</span><span class=\"p\">,</span><span class=\"s1\">'desc'</span><span class=\"p\">})</span>\n</pre>\n<p>In case you do not pass order we have default order criteria specified in our select query as</p>\n<pre><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'desc'</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">)</span>\n</pre>\n<p>Where id is our field name. One of those keys defined in <code>Table.fields</code> (Not actual table field name, in case of id, id is table column name and id is property name of Profile object)</p>\n<h2>Update</h2>\n<h3>Creating update function</h3>\n<p>Function will update only provided available fields with update permission and will return updated row on success. It will also execute only single query.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"n\">update</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">error</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">get_db</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"UPDATE \"</span><span class=\"o\">+</span><span class=\"n\">Table</span><span class=\"o\">+</span><span class=\"s2\">\" \"</span>\n                       <span class=\"s2\">\"SET \"</span><span class=\"o\">+</span><span class=\"n\">update</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s2\">\" \"</span>\n                       <span class=\"s2\">\"WHERE \"</span><span class=\"o\">+</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"s2\">\"=</span><span class=\"si\">%s</span><span class=\"s2\"> \"</span>\n                       <span class=\"s2\">\"RETURNING \"</span><span class=\"o\">+</span><span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(),</span>\n                       <span class=\"n\">update</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">))</span>\n        <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"s1\">'general_error'</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n        <span class=\"n\">put_db</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">profile</span>\n</pre>\n<h3>Using update</h3>\n<p>Take a note that only two fields are specified for update:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">save</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"gender\"</span><span class=\"p\">:</span><span class=\"s2\">\"female\"</span><span class=\"p\">,</span> <span class=\"s2\">\"weight\"</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">})</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n    <span class=\"c1\">#{'id': (20,), 'nickname': 'XXX_()_XXX', 'gender': 'female', 'interested_in': ['friendship', 'dating'], 'birthday': datetime.datetime(2001, 7, 17, 0, 0), 'height': 169, 'weight': '45.0', 'has_cats': False}</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n    <span class=\"c1\"># In case nothing updated</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7107597, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "00a454d218232fcb138d0ecc77967e45", "sha256": "756ee698e30a9585253273eea26feedef5bf61bd8ef7cd0f890ac77377881608"}, "downloads": -1, "filename": "pgsql_table-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "00a454d218232fcb138d0ecc77967e45", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8691, "upload_time": "2020-02-08T20:01:04", "upload_time_iso_8601": "2020-02-08T20:01:04.218115Z", "url": "https://files.pythonhosted.org/packages/cc/f0/8920a0435c7994d93c90ef5f79040ae3c7473b839707ea41ddd5c48c2280/pgsql_table-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8536b4b83259f573ec34a929e46c94af", "sha256": "480937ae376b7217ba36e2b5ae9c5cbd088646707c081d3009d1dbe91f1d30a4"}, "downloads": -1, "filename": "pgsql-table-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8536b4b83259f573ec34a929e46c94af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9755, "upload_time": "2020-02-08T20:01:06", "upload_time_iso_8601": "2020-02-08T20:01:06.755183Z", "url": "https://files.pythonhosted.org/packages/40/58/012c83894c6854b07e824466c18ad756392697a7d5649739bdcb448a9faa/pgsql-table-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "1bc8c6d5e93a8879768395c42bdc9dbe", "sha256": "33a3ce41525905305cfa8e148d443069ae24dd82b57ba1ab97b88b7aea3e355b"}, "downloads": -1, "filename": "pgsql_table-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1bc8c6d5e93a8879768395c42bdc9dbe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8709, "upload_time": "2020-02-08T20:28:09", "upload_time_iso_8601": "2020-02-08T20:28:09.627581Z", "url": "https://files.pythonhosted.org/packages/0c/ff/a36fb5167b8dc93fdf709ca6784a9f041b109b707b0361f2ac0d67db592d/pgsql_table-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d5babf33c6b8d75831e78f5ae6c8a2f", "sha256": "d9d8b97931c7e72ba028149a960e5f39bf78495509bd77bf00441dcb89b95565"}, "downloads": -1, "filename": "pgsql-table-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7d5babf33c6b8d75831e78f5ae6c8a2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9813, "upload_time": "2020-02-08T20:28:11", "upload_time_iso_8601": "2020-02-08T20:28:11.494438Z", "url": "https://files.pythonhosted.org/packages/f8/a8/8f2d6242400a89f993e4610dea97fbcd84e466deef54759c912d54fc38ae/pgsql-table-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "12827eee0e13564a6b7d118d958ed020", "sha256": "ce19946d52449ae4d484cbea66a63f1191e8492e9961f92b39387811a282c422"}, "downloads": -1, "filename": "pgsql_table-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "12827eee0e13564a6b7d118d958ed020", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8694, "upload_time": "2020-02-08T20:32:05", "upload_time_iso_8601": "2020-02-08T20:32:05.065146Z", "url": "https://files.pythonhosted.org/packages/01/1e/b8b5695b56ea974b847f5544c4b86877b7e88052fe658f1230e7a9164a6a/pgsql_table-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5008150bb9b1150d5d9acd2510c1d84a", "sha256": "461d46a9e37aa0de767abfde81fbc1a4bf51d27e36df60b8c140d77801b891f2"}, "downloads": -1, "filename": "pgsql-table-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5008150bb9b1150d5d9acd2510c1d84a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9776, "upload_time": "2020-02-08T20:32:06", "upload_time_iso_8601": "2020-02-08T20:32:06.950802Z", "url": "https://files.pythonhosted.org/packages/de/67/eb3fb8590afdf1d46651f02a7c4dd31b52023dbfcc87ff0af66dee7ac280/pgsql-table-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "461512017f0528b03b03a53dc1d8d6cf", "sha256": "9614a7e814e6c187566f1a8b6bf47108a6fda1807c15ceb972c7627a04e31a3b"}, "downloads": -1, "filename": "pgsql_table-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "461512017f0528b03b03a53dc1d8d6cf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8682, "upload_time": "2020-02-08T20:44:02", "upload_time_iso_8601": "2020-02-08T20:44:02.894638Z", "url": "https://files.pythonhosted.org/packages/41/5f/660b48abda89d762f67025ab0dae3fb38ce87c856e81a068c483e86c7712/pgsql_table-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00e37f3838f7a1cae0ca63d4463c2121", "sha256": "c66c05750db531c100f036735641fbf3bd01c38be85df81261f9f6a4e9e2ac05"}, "downloads": -1, "filename": "pgsql-table-0.1.4.tar.gz", "has_sig": false, "md5_digest": "00e37f3838f7a1cae0ca63d4463c2121", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9771, "upload_time": "2020-02-08T20:44:04", "upload_time_iso_8601": "2020-02-08T20:44:04.331138Z", "url": "https://files.pythonhosted.org/packages/18/dd/de06491e15c58973e075f948093a57c7e9a0981360dfb22a8620f59afa70/pgsql-table-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "912d10ccc50f0fb3f3875989a1d578f1", "sha256": "d196292a0fca3a6c6268f48ca26176a64fd0d5aa98c13319d577ef674a525778"}, "downloads": -1, "filename": "pgsql_table-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "912d10ccc50f0fb3f3875989a1d578f1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8685, "upload_time": "2020-02-08T20:48:08", "upload_time_iso_8601": "2020-02-08T20:48:08.864879Z", "url": "https://files.pythonhosted.org/packages/61/af/54155442c584a8bf9a89bf8bbe74beb45c799b030063f1aa7d7fe7a58079/pgsql_table-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afe1cd67b3900e02159b1a5c88dd2ce1", "sha256": "90057219775d747551e377d800850c1ae3ccf97b17886b8dda15dc1f703b00fc"}, "downloads": -1, "filename": "pgsql-table-0.1.5.tar.gz", "has_sig": false, "md5_digest": "afe1cd67b3900e02159b1a5c88dd2ce1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9764, "upload_time": "2020-02-08T20:48:10", "upload_time_iso_8601": "2020-02-08T20:48:10.437103Z", "url": "https://files.pythonhosted.org/packages/be/90/ce39ab2d675f2f37a52af67f906fdfb1ee31c70821f22de4dcb9d99893f7/pgsql-table-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "3c67b9e827197955af7caf5ba1aa4059", "sha256": "13ddd492140fa8d2c245abacceada2d4bd9055f8508cbad3d90b60e0a1090396"}, "downloads": -1, "filename": "pgsql_table-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c67b9e827197955af7caf5ba1aa4059", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8749, "upload_time": "2020-02-08T21:01:34", "upload_time_iso_8601": "2020-02-08T21:01:34.242786Z", "url": "https://files.pythonhosted.org/packages/ac/82/f7ce2fc657fcc1db054fb3551f99496f9c388066723b97ca25b6bf102d52/pgsql_table-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "670f07f907ef563562cdc017382a43b1", "sha256": "74f8e3d86833d83e697922f33aeb535b011b0f332038f532a9d1138dc857d278"}, "downloads": -1, "filename": "pgsql-table-0.1.6.tar.gz", "has_sig": false, "md5_digest": "670f07f907ef563562cdc017382a43b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9870, "upload_time": "2020-02-08T21:01:36", "upload_time_iso_8601": "2020-02-08T21:01:36.356462Z", "url": "https://files.pythonhosted.org/packages/6a/b5/6a289eeb187d558e7d45326c0fd20ac26e5094b122a9ec1fa9ab81aaeb70/pgsql-table-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "785efb61c361393bceedd674686b2eda", "sha256": "55245e0c5675398a70044fbfaa8dfa0c9da130e43ed696141099290ed998deed"}, "downloads": -1, "filename": "pgsql_table-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "785efb61c361393bceedd674686b2eda", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8782, "upload_time": "2020-02-12T21:00:50", "upload_time_iso_8601": "2020-02-12T21:00:50.976346Z", "url": "https://files.pythonhosted.org/packages/cf/02/93d55ed9da1b411d2adbab31e5d57c9c8497a606dad49c7116709baca7be/pgsql_table-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee2346ee2423d636f41eb7ec138733ef", "sha256": "1682637ac34928ae6afceae651155b0fc3c2d5102e206b6f7c99347aa8da3211"}, "downloads": -1, "filename": "pgsql-table-0.1.7.tar.gz", "has_sig": false, "md5_digest": "ee2346ee2423d636f41eb7ec138733ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9898, "upload_time": "2020-02-12T21:00:53", "upload_time_iso_8601": "2020-02-12T21:00:53.010200Z", "url": "https://files.pythonhosted.org/packages/ff/54/078a537dd7bbca7367f66eb48d136644f6727a87718f17ec48ed44b66f52/pgsql-table-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "be1e2860ecd8622677c38a561e268140", "sha256": "d5e6c5a50b6d1ea4dc61ee4b3c201a858dd744c981a5074054c9dbada4a87506"}, "downloads": -1, "filename": "pgsql_table-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "be1e2860ecd8622677c38a561e268140", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8793, "upload_time": "2020-02-13T21:40:38", "upload_time_iso_8601": "2020-02-13T21:40:38.678722Z", "url": "https://files.pythonhosted.org/packages/74/16/d94c39b7bfea4105e341f94931c66085b23bcae903bc1d0d46fa069904a4/pgsql_table-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5d554658abdec1d3c811cd681f447ee", "sha256": "27bd87a81fb0047452025504f70d3858326496dc70e5d9805d5595f82d74987f"}, "downloads": -1, "filename": "pgsql-table-0.1.8.tar.gz", "has_sig": false, "md5_digest": "a5d554658abdec1d3c811cd681f447ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9926, "upload_time": "2020-02-13T21:40:40", "upload_time_iso_8601": "2020-02-13T21:40:40.327197Z", "url": "https://files.pythonhosted.org/packages/1b/4a/9d54e1f1ba64019d61aaef155388c4ca66a9468c7450061b2521dfb9d983/pgsql-table-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "d1d61f957b371d44d25b2a498777ed19", "sha256": "ff262e2b7186b7737cb338e843ed89f92ba01ad3f5e0f5a93464a6b99a077cc5"}, "downloads": -1, "filename": "pgsql_table-0.1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d1d61f957b371d44d25b2a498777ed19", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8813, "upload_time": "2020-03-04T21:52:45", "upload_time_iso_8601": "2020-03-04T21:52:45.700887Z", "url": "https://files.pythonhosted.org/packages/f7/c1/194ddfab3aad80d9cd32cd42d3bfda3c2ca57593f576e5a3eb77bcbe251d/pgsql_table-0.1.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70d406c08d4c5224259499ad402c5576", "sha256": "c75697520b0cee2c0c4f41558e08bc5efad536a8bda074a5af6a5844676bd83e"}, "downloads": -1, "filename": "pgsql-table-0.1.9.tar.gz", "has_sig": false, "md5_digest": "70d406c08d4c5224259499ad402c5576", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9945, "upload_time": "2020-03-04T21:52:47", "upload_time_iso_8601": "2020-03-04T21:52:47.661963Z", "url": "https://files.pythonhosted.org/packages/4a/b7/a9bfdfa400d27704ad5eb8d154b97f66197a294473726892cffca288b99d/pgsql-table-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9c86c7d748e5cd5b681756d4f01531d0", "sha256": "411878f000d97312b784b147b0961f7afcbc022c2f90c570b7b3e85bd5523d1e"}, "downloads": -1, "filename": "pgsql_table-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9c86c7d748e5cd5b681756d4f01531d0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 8867, "upload_time": "2020-04-12T15:52:33", "upload_time_iso_8601": "2020-04-12T15:52:33.456734Z", "url": "https://files.pythonhosted.org/packages/b6/79/ddfe63c57d05fc56d9161dc9fbc6cee158d352bd7fac1d6a747e1bd088be/pgsql_table-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18a95cce4c2aeab0da7e732e6514fd11", "sha256": "33a038ef6cd0afa9b7742fc79ed4d1d8e7e101f057c4d7509fc0ea677a0ce5f6"}, "downloads": -1, "filename": "pgsql-table-0.2.0.tar.gz", "has_sig": false, "md5_digest": "18a95cce4c2aeab0da7e732e6514fd11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9996, "upload_time": "2020-04-12T15:52:35", "upload_time_iso_8601": "2020-04-12T15:52:35.312299Z", "url": "https://files.pythonhosted.org/packages/9a/9c/6fc9108710959ba4bdbfc0f67902c68f0cd02a2eaac134a423042220085a/pgsql-table-0.2.0.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "310fc461d36091e370916b12ec0f67b5", "sha256": "ffd447eafaed46436a91634432db0466a33d28c3cc1c7641f70087d8486b53cb"}, "downloads": -1, "filename": "pgsql_table-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "310fc461d36091e370916b12ec0f67b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 9016, "upload_time": "2020-04-26T23:17:34", "upload_time_iso_8601": "2020-04-26T23:17:34.491175Z", "url": "https://files.pythonhosted.org/packages/37/f9/020aaf98adc88c22a813d2d068ac81b659de4ffd9981485817e6999893d8/pgsql_table-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "440406e32d907371a64925e9acd8b857", "sha256": "440d8eceeb32dc86e63267de18264d396be02a578052d70cd84e6806b9db1740"}, "downloads": -1, "filename": "pgsql-table-0.2.2.tar.gz", "has_sig": false, "md5_digest": "440406e32d907371a64925e9acd8b857", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10126, "upload_time": "2020-04-26T23:17:35", "upload_time_iso_8601": "2020-04-26T23:17:35.723268Z", "url": "https://files.pythonhosted.org/packages/b6/76/8b62381a749dfa053a0709d5d295885c19263538e69d2407f84a87f2d4b2/pgsql-table-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "310fc461d36091e370916b12ec0f67b5", "sha256": "ffd447eafaed46436a91634432db0466a33d28c3cc1c7641f70087d8486b53cb"}, "downloads": -1, "filename": "pgsql_table-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "310fc461d36091e370916b12ec0f67b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 9016, "upload_time": "2020-04-26T23:17:34", "upload_time_iso_8601": "2020-04-26T23:17:34.491175Z", "url": "https://files.pythonhosted.org/packages/37/f9/020aaf98adc88c22a813d2d068ac81b659de4ffd9981485817e6999893d8/pgsql_table-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "440406e32d907371a64925e9acd8b857", "sha256": "440d8eceeb32dc86e63267de18264d396be02a578052d70cd84e6806b9db1740"}, "downloads": -1, "filename": "pgsql-table-0.2.2.tar.gz", "has_sig": false, "md5_digest": "440406e32d907371a64925e9acd8b857", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10126, "upload_time": "2020-04-26T23:17:35", "upload_time_iso_8601": "2020-04-26T23:17:35.723268Z", "url": "https://files.pythonhosted.org/packages/b6/76/8b62381a749dfa053a0709d5d295885c19263538e69d2407f84a87f2d4b2/pgsql-table-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:41 2020"}