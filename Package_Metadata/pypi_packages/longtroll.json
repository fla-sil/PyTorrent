{"info": {"author": "Will Haldean Brown", "author_email": "will.h.brown@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: MacOS X", "Environment :: No Input/Output (Daemon)", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Topic :: System", "Topic :: System :: Monitoring", "Topic :: System :: Shells", "Topic :: Text Processing :: Markup :: XML"], "description": "``longtroll``\r\n===========\r\n*Detect long-running processes and notify you when they're done.*\r\n\r\nUsing ``longtroll``\r\n-----------------\r\n\r\n``longtroll`` pretty much does what it says on the box. In order to start\r\ndetecting long-running processes, run ``longtroll.py bind`` in your shell. From\r\nthen on, when a long-running process in that shell finishes, your notification\r\ncommand will be called.\r\n\r\nBefore you start using ``longtroll``, you need to create a configuration file.\r\nA sample configuration file can be found in the repository as\r\n``longtrollrc-sample``. Copy this file to ``~/.longtrollrc``, or create your own.\r\nThe configuration file takes two options: ``seconds`` and ``notify``, as\r\nfollows::\r\n  \r\n    seconds 10\r\n    notify echo <cmd> (pid <pid>) completed | wall\r\n\r\n``seconds`` is the number of seconds that a process has to live before it is\r\nconsidered \"long-running\". ``notify`` is a command that will be run when your\r\nprocess completes. The tokens ``<cmd>`` and ``<pid>`` will automatically be replaced\r\nby the command and the PID of the process that completed.\r\n\r\nRoadmap\r\n-------\r\n\r\n* Add a ``longtroll.py unbind`` command\r\n\r\n* Allow configuration of the poll time\r\n\r\n* Some kind of notification method for when a long-running process is detected", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/haldean/longtroll", "keywords": "shell unix process notify long running", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "longtroll", "package_url": "https://pypi.org/project/longtroll/", "platform": "", "project_url": "https://pypi.org/project/longtroll/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/haldean/longtroll"}, "release_url": "https://pypi.org/project/longtroll/1.0/", "requires_dist": null, "requires_python": null, "summary": "Detect long-running processes and notify you when they're done.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ``longtroll``\n<br>===========\n<br>*Detect long-running processes and notify you when they're done.*\n<br>\n<br>Using ``longtroll``\n<br>-----------------\n<br>\n<br>``longtroll`` pretty much does what it says on the box. In order to start\n<br>detecting long-running processes, run ``longtroll.py bind`` in your shell. From\n<br>then on, when a long-running process in that shell finishes, your notification\n<br>command will be called.\n<br>\n<br>Before you start using ``longtroll``, you need to create a configuration file.\n<br>A sample configuration file can be found in the repository as\n<br>``longtrollrc-sample``. Copy this file to ``~/.longtrollrc``, or create your own.\n<br>The configuration file takes two options: ``seconds`` and ``notify``, as\n<br>follows::\n<br>  \n<br>    seconds 10\n<br>    notify echo &lt;cmd&gt; (pid &lt;pid&gt;) completed | wall\n<br>\n<br>``seconds`` is the number of seconds that a process has to live before it is\n<br>considered \"long-running\". ``notify`` is a command that will be run when your\n<br>process completes. The tokens ``&lt;cmd&gt;`` and ``&lt;pid&gt;`` will automatically be replaced\n<br>by the command and the PID of the process that completed.\n<br>\n<br>Roadmap\n<br>-------\n<br>\n<br>* Add a ``longtroll.py unbind`` command\n<br>\n<br>* Allow configuration of the poll time\n<br>\n<br>* Some kind of notification method for when a long-running process is detected\n          </div>"}, "last_serial": 794350, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "fde34e837507f9f5d70d0fbdf15d5f55", "sha256": "319f326ebab170af3a9d1d9eeebe322cb6df9986d7d1aa207352156e65407f6e"}, "downloads": -1, "filename": "longtroll-1.0.tar.gz", "has_sig": false, "md5_digest": "fde34e837507f9f5d70d0fbdf15d5f55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2763, "upload_time": "2012-08-01T03:21:01", "upload_time_iso_8601": "2012-08-01T03:21:01.812904Z", "url": "https://files.pythonhosted.org/packages/61/12/8b709efa50a41326760a1ababb9339db6840331422952e9f7a34a1952e38/longtroll-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fde34e837507f9f5d70d0fbdf15d5f55", "sha256": "319f326ebab170af3a9d1d9eeebe322cb6df9986d7d1aa207352156e65407f6e"}, "downloads": -1, "filename": "longtroll-1.0.tar.gz", "has_sig": false, "md5_digest": "fde34e837507f9f5d70d0fbdf15d5f55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2763, "upload_time": "2012-08-01T03:21:01", "upload_time_iso_8601": "2012-08-01T03:21:01.812904Z", "url": "https://files.pythonhosted.org/packages/61/12/8b709efa50a41326760a1ababb9339db6840331422952e9f7a34a1952e38/longtroll-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:56 2020"}