{"info": {"author": "S Mishu Ashiqul Islam", "author_email": "m0islam@ucsd.edu", "bugtrack_url": null, "classifiers": [], "description": "[![Docs](https://img.shields.io/badge/docs-latest-blue.svg)](https://osf.io/t6j7u/wiki/home/) \n[![License](https://img.shields.io/badge/License-BSD\\%202--Clause-orange.svg)](https://opensource.org/licenses/BSD-2-Clause)\n[![Build Status](https://travis-ci.com/AlexandrovLab/SigProfilerExtractor.svg?branch=master)](https://travis-ci.com/AlexandrovLab/SigProfilerExtractor)\n\n# SigProfilerExtractor\nSigProfilerExtractor allows de novo extraction of mutational signatures from data generated in a matrix format. \nThe tool identifies the number of operative mutational signatures, their activities in each sample, and the probability \nfor each signature to cause a specific mutation type in a cancer sample. The tool makes use of SigProfilerMatrixGenerator \nand SigProfilerPlotting. \n\n## INSTALLATION\nIn the commandline, please type the following line:\n```\n$pip install SigProfilerExtractor\n```\nInstall your desired reference genome from the command line/terminal as follows (available reference genomes are: GRCh37, GRCh38, mm9, and mm10):\n```\n$ python\n>> from SigProfilerMatrixGenerator import install as genInstall\n>> genInstall.install('GRCh37')\n```\nThis will install the human 37 assembly as a reference genome. You may install as many genomes as you wish.\n\nopen a python interpreter and import the SigProfilerExtractor module. Please see the examples of the functions. \n\n## FUNCTIONS\n\n### importdata \n\n\n    Imports the path of example data.\n\n    importdata(datatype=\"matrix\")\n\n    Example: \n    -------\n    >>> from SigProfilerExtractor import sigpro as sig\n    >>> path_to_example_table = sig.importdata(\"matrix\")\n    >>> data = path_to_example_table \n    This \"data\" variable can be used as a parameter of the \"project\" argument of the sigProfilerExtractor function.\n\n    To get help on the parameters and outputs of the \"importdata\" function, please write down the following line:\n\n    >>> help(sig.importdata)\n\n\n### sigProfilerExtractor \n\n\nExtracts mutational signatures from an array of samples.\n\nsigProfilerExtractor(input_type, out_put, input_data, reference_genome=\"GRCh37\", opportunity_genome = \"GRCh37\", context_type = \"default\", exome = False, \n                         minimum_signatures=1, maximum_signatures=10, nmf_replicates=100, resample = True, batch_size=1, cpu=-1, gpu=False, \n                         nmf_init=\"alexandrov-lab-custom\", precision= \"single\", matrix_normalization= \"100X\", seeds= \"none\", \n                         min_nmf_iterations= 10000, max_nmf_iterations=1000000, nmf_test_conv= 10000, nmf_tolerance= 1e-15, nnls_penalty=0.05, get_all_signature_matrices= False): \n\n\nINPUT DATA:-\n\n    **input_type**: A string. Type of input. The type of input should be one of the following:\n            - \"vcf\": used for vcf format inputs.\n            - \"matrix\": used for table format inputs using a tab seperated file.\n\n\n    **out_put**: A string. The name of the output folder. The output folder will be generated in the current working directory. \n\n    **input_data**: A string. Name of the input folder (in case of \"vcf\" type input) or the input file (in case of \"table\"  type input). The project file or folder should be inside the current working directory. For the \"vcf\" type input,the project has to be a folder which will contain the vcf files in vcf format or text formats. The \"text\"type projects have to be a file.   \n\n    **reference_genome**: A string, optional. The name of the reference genome. The default reference genome is \"GRCh37\". This parameter is applicable only if the input_type is \"vcf\".\n\n    **opportunity_genome**: The build or version of the reference signatures for the reference genome. The default opportunity genome is GRCh37. If the input_type is \"vcf\", the genome_build automatically matches the input reference genome value.    \n\n    **exome**: Boolean, optional. Defines if the exomes will be extracted. The default value is \"False\".\n\n\n    NMF REPLICATES:-\n\n    **minimum_signatures**: A positive integer, optional. The minimum number of signatures to be extracted. The default value is 1 \n\n    **maximum_signatures**: A positive integer, optional. The maximum number of signatures to be extracted. The default value is 25\n\n    **nmf_replicates**: A positive integer, optional. The number of iteration to be performed to extract each number signature. The default value is 100\n\n    **resample**: Boolean, optional. Default is True. If True, add poisson noise to samples by resampling.  \n\n    **seeds**: A string. It can be used to get reproducible resamples for the NMF replicates. A path of a tab separated .txt file containing the replicated id and preset seeds in a two columns dataframe can be passed through this parameter. The Seeds.txt file in the results folder from a previous analysis can be used for the seeds parameter in a new analysis. The Default value for this parameter is \"none\". When \"none\", the seeds for resampling will be random for different analysis.\n\n\n    NMF ENGINES:-\n\n    **matrix_normalization**: A string. Method of normalizing the genome matrix before it is analyzed by NMF. Default is value is \"100X\". Other options are \"gmm\", \"log2\", \"custom\" or \"none\".           \n\n    **nmf_init**: A String. The initialization algorithm for W and H matrix of NMF. Options are 'random', 'nndsvd', 'nndsvda', 'nndsvdar' and 'alexandrov-lab-custom'\n              Default is 'alexandrov-lab-custom'.\n\n    **precision**: A string. Values should be single or double. Default is single.\n\n    **min_nmf_iterations**: An integer. Value defines the minimum number of iterations to be completed before NMF converges. Default is 10000.\n\n    **max_nmf_iterations**: An integer. Value defines the maximum number of iterations to be completed before NMF converges. Default is 1000000.\n\n    **nmf_test_conv**: An integer. Value definer the number number of iterations to done between checking next convergence. Default is 10000.\n\n    **nmf_tolerance**: A float. Value defines the tolerance to achieve to converge. Default is 1e-15.\n\n\n    EXECUTION:-\n\n    **cpu**: An integer, optional. The number of processors to be used to extract the signatures. The default value is -1 which will use all available processors. \n\n    **gpu**:Boolean, optional. Defines if the GPU resource will used if available. Default is False. If True, the GPU resources will be used in the computation.\n\n    **batch_size**: An integer. Will be effective only if the GPU is used. Defines the number of NMF replicates to be performed by each CPU during the parallel processing. Default is 1.\n\n\n    COSMIC:-\n\n    **nnls_penalty**: Float, optional. Takes any positive float. Default is 0.05. Defines the thresh-hold cutoff to be assigned signatures to a sample. \n\n      **context_type**: A list of strings, optional. The items in the list defines the mutational contexts to be considered to extract the signatures. The default value is [\"96\", \"DINUC\" , \"ID\"], where \"96\" is the SBS96 context, \"DINUC\"\n            is the DINULEOTIDE context and ID is INDEL context. \n\n    OTHERS:-\n\n    **get_all_signature_matrices**: A Boolean. If true, the Ws and Hs from all the NMF iterations are generated in the output.\n\n    Returns\n    -------\n    To learn about the output, please visit https://osf.io/t6j7u/wiki/home/\n\nReturns\n-------\nTo learn about the output, please visit https://osf.io/t6j7u/wiki/home/  \n\n```    \n    Examples\n    --------\n\n    >>> from SigProfilerExtractor import sigpro as sig\n\n    # to get input from vcf files\n    >>> path_to_example_folder_containing_vcf_files = sig.importdata(\"vcf\")\n    >>> data = path_to_example_folder_containing_vcf_files # you can put the path to your folder containing the vcf samples\n    >>> sig.sigProfilerExtractor(\"vcf\", \"example_output\", data, minimum_signatures=1, maximum_signatures=3)\n\n    Wait untill the excecution is finished. The process may a couple of hours based on the size of the data.\n    Check the current working directory for the \"example_output\" folder.\n\n    # to get input from table format (mutation catalog matrix)\n    >>> path_to_example_table = sig.importdata(\"matrix\")\n    >>> data = path_to_example_table # you can put the path to your tab delimited file containing the mutational catalog         matrix/table\n    >>> sig.sigProfilerExtractor(\"matrix\", \"example_output\", data, opportunity_genome=\"GRCh38\", minimum_signatures=1, maximum_signatures=3)\n\n    To get help on the parameters and outputs of the \"sigProfilerExtractor\" function, please write down the following line:\n\n    >>> help(sig.sigProfilerExtractor)\n```\n\n### decompose\n    Decomposes the De Novo Signatures into COSMIC Signatures and assigns COSMIC signatures into samples\n\n    Parameters: \n\n        signatures: A string. Path to a  tab delimited file that contains the signaure table where the rows are mutation                         types and colunms are signature IDs. \n        activities: A string. Path to a tab delimilted file that contains the activity table where the rows are sample IDs                       and colunms are signature IDs.\n        samples: A string. Path to a tab delimilted file that contains the activity table where the rows are mutation types                  and colunms are sample IDs.\n        output: A string. Path to the output folder.\n        genome_build = A string. The genome type. Example: \"GRCh37\", \"GRCh38\", \"mm9\", \"mm10\". The default value is \"GRCh37\"\n        verbose = Boolean. Prints statements. Default value is False. \n\n    Example:\n         >>>from SigProfilerExtractor import decomposition as decomp\n         >>>signatures = \"path/to/dDe_Novo_Solution_Signatures.txt\"\n         >>>activities=\"path/to/De_Novo_Solution_Activities.txt\"\n         >>>samples=\"path/to/Samples.txt\"\n         >>>output=\"name or path/to/output.txt\"\n         >>>decomp.decompose(signatures, activities, samples, output, genome_build=\"GRCh37\", verbose=False)   \n\n     Values:\n        The files below will be generated in the output folder--\n\n        Cluster_of_Samples.txt\n        comparison_with_global_ID_signatures.csv\n        Decomposed_Solution_Activities.txt\n        Decomposed_Solution_Samples_stats.txt\n        Decomposed_Solution_Signatures.txt\n        decomposition_logfile.txt\n        dendogram.pdf\n        Mutation_Probabilities.txt\n        Signature_assaignment_logfile.txt\n        Signature_plot[MutatutionContext]_plots_Decomposed_Solution.pdf\n\n### GPU support\n```\nIf CUDA out of memory exceptions occur, it will be necessary to reduce the number of CPU processes used (the `cpu` parameter).\n\n## For more information, help and examples, please visit: https://osf.io/t6j7u/wiki/home/\n\n## COPYRIGHT\nThis software and its documentation are copyright 2018 as a part of the sigProfiler project. The SigProfilerExtractor framework is free software and is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n## CONTACT INFORMATION\nPlease address any queries or bug reports to S M Ashiqul Islam (Mishu) at m0islam@ucsd.edu\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AlexandrovLab/SigProfilerExtractor.git", "keywords": "", "license": "UCSD", "maintainer": "", "maintainer_email": "", "name": "SigProfilerExtractor", "package_url": "https://pypi.org/project/SigProfilerExtractor/", "platform": "", "project_url": "https://pypi.org/project/SigProfilerExtractor/", "project_urls": {"Homepage": "https://github.com/AlexandrovLab/SigProfilerExtractor.git"}, "release_url": "https://pypi.org/project/SigProfilerExtractor/1.0.9/", "requires_dist": ["matplotlib (>=2.2.2)", "scipy (>=1.3.3)", "torch (>=1.1.0)", "numpy (>=1.17.4)", "pandas (>=0.25.3)", "nimfa (>=1.1.0)", "SigProfilerMatrixGenerator (>=1.1.13)", "sigProfilerPlotting (>=1.1.5)", "pillow", "statsmodels (>=0.9.0)", "scikit-learn (>=0.22)", "psutil (>=5.6.1)", "reportlab (>=3.5.34)", "xlrd (>=1.0.0)"], "requires_python": "", "summary": "Extracts mutational signatures from mutational catalogues", "version": "1.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://osf.io/t6j7u/wiki/home/\" rel=\"nofollow\"><img alt=\"Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35e0b9e630dbc347bd4718399aa51fb3bb2bb889/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667\"></a>\n<a href=\"https://opensource.org/licenses/BSD-2-Clause\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7113cf74173470380bf04b021010808d24630d65/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230322d2d436c617573652d6f72616e67652e737667\"></a>\n<a href=\"https://travis-ci.com/AlexandrovLab/SigProfilerExtractor\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b999f743d12c60e67157d002cd0405681f12b5eb/68747470733a2f2f7472617669732d63692e636f6d2f416c6578616e64726f764c61622f53696750726f66696c6572457874726163746f722e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>SigProfilerExtractor</h1>\n<p>SigProfilerExtractor allows de novo extraction of mutational signatures from data generated in a matrix format.\nThe tool identifies the number of operative mutational signatures, their activities in each sample, and the probability\nfor each signature to cause a specific mutation type in a cancer sample. The tool makes use of SigProfilerMatrixGenerator\nand SigProfilerPlotting.</p>\n<h2>INSTALLATION</h2>\n<p>In the commandline, please type the following line:</p>\n<pre><code>$pip install SigProfilerExtractor\n</code></pre>\n<p>Install your desired reference genome from the command line/terminal as follows (available reference genomes are: GRCh37, GRCh38, mm9, and mm10):</p>\n<pre><code>$ python\n&gt;&gt; from SigProfilerMatrixGenerator import install as genInstall\n&gt;&gt; genInstall.install('GRCh37')\n</code></pre>\n<p>This will install the human 37 assembly as a reference genome. You may install as many genomes as you wish.</p>\n<p>open a python interpreter and import the SigProfilerExtractor module. Please see the examples of the functions.</p>\n<h2>FUNCTIONS</h2>\n<h3>importdata</h3>\n<pre><code>Imports the path of example data.\n\nimportdata(datatype=\"matrix\")\n\nExample: \n-------\n&gt;&gt;&gt; from SigProfilerExtractor import sigpro as sig\n&gt;&gt;&gt; path_to_example_table = sig.importdata(\"matrix\")\n&gt;&gt;&gt; data = path_to_example_table \nThis \"data\" variable can be used as a parameter of the \"project\" argument of the sigProfilerExtractor function.\n\nTo get help on the parameters and outputs of the \"importdata\" function, please write down the following line:\n\n&gt;&gt;&gt; help(sig.importdata)\n</code></pre>\n<h3>sigProfilerExtractor</h3>\n<p>Extracts mutational signatures from an array of samples.</p>\n<p>sigProfilerExtractor(input_type, out_put, input_data, reference_genome=\"GRCh37\", opportunity_genome = \"GRCh37\", context_type = \"default\", exome = False,\nminimum_signatures=1, maximum_signatures=10, nmf_replicates=100, resample = True, batch_size=1, cpu=-1, gpu=False,\nnmf_init=\"alexandrov-lab-custom\", precision= \"single\", matrix_normalization= \"100X\", seeds= \"none\",\nmin_nmf_iterations= 10000, max_nmf_iterations=1000000, nmf_test_conv= 10000, nmf_tolerance= 1e-15, nnls_penalty=0.05, get_all_signature_matrices= False):</p>\n<p>INPUT DATA:-</p>\n<pre><code>**input_type**: A string. Type of input. The type of input should be one of the following:\n        - \"vcf\": used for vcf format inputs.\n        - \"matrix\": used for table format inputs using a tab seperated file.\n\n\n**out_put**: A string. The name of the output folder. The output folder will be generated in the current working directory. \n\n**input_data**: A string. Name of the input folder (in case of \"vcf\" type input) or the input file (in case of \"table\"  type input). The project file or folder should be inside the current working directory. For the \"vcf\" type input,the project has to be a folder which will contain the vcf files in vcf format or text formats. The \"text\"type projects have to be a file.   \n\n**reference_genome**: A string, optional. The name of the reference genome. The default reference genome is \"GRCh37\". This parameter is applicable only if the input_type is \"vcf\".\n\n**opportunity_genome**: The build or version of the reference signatures for the reference genome. The default opportunity genome is GRCh37. If the input_type is \"vcf\", the genome_build automatically matches the input reference genome value.    \n\n**exome**: Boolean, optional. Defines if the exomes will be extracted. The default value is \"False\".\n\n\nNMF REPLICATES:-\n\n**minimum_signatures**: A positive integer, optional. The minimum number of signatures to be extracted. The default value is 1 \n\n**maximum_signatures**: A positive integer, optional. The maximum number of signatures to be extracted. The default value is 25\n\n**nmf_replicates**: A positive integer, optional. The number of iteration to be performed to extract each number signature. The default value is 100\n\n**resample**: Boolean, optional. Default is True. If True, add poisson noise to samples by resampling.  \n\n**seeds**: A string. It can be used to get reproducible resamples for the NMF replicates. A path of a tab separated .txt file containing the replicated id and preset seeds in a two columns dataframe can be passed through this parameter. The Seeds.txt file in the results folder from a previous analysis can be used for the seeds parameter in a new analysis. The Default value for this parameter is \"none\". When \"none\", the seeds for resampling will be random for different analysis.\n\n\nNMF ENGINES:-\n\n**matrix_normalization**: A string. Method of normalizing the genome matrix before it is analyzed by NMF. Default is value is \"100X\". Other options are \"gmm\", \"log2\", \"custom\" or \"none\".           \n\n**nmf_init**: A String. The initialization algorithm for W and H matrix of NMF. Options are 'random', 'nndsvd', 'nndsvda', 'nndsvdar' and 'alexandrov-lab-custom'\n          Default is 'alexandrov-lab-custom'.\n\n**precision**: A string. Values should be single or double. Default is single.\n\n**min_nmf_iterations**: An integer. Value defines the minimum number of iterations to be completed before NMF converges. Default is 10000.\n\n**max_nmf_iterations**: An integer. Value defines the maximum number of iterations to be completed before NMF converges. Default is 1000000.\n\n**nmf_test_conv**: An integer. Value definer the number number of iterations to done between checking next convergence. Default is 10000.\n\n**nmf_tolerance**: A float. Value defines the tolerance to achieve to converge. Default is 1e-15.\n\n\nEXECUTION:-\n\n**cpu**: An integer, optional. The number of processors to be used to extract the signatures. The default value is -1 which will use all available processors. \n\n**gpu**:Boolean, optional. Defines if the GPU resource will used if available. Default is False. If True, the GPU resources will be used in the computation.\n\n**batch_size**: An integer. Will be effective only if the GPU is used. Defines the number of NMF replicates to be performed by each CPU during the parallel processing. Default is 1.\n\n\nCOSMIC:-\n\n**nnls_penalty**: Float, optional. Takes any positive float. Default is 0.05. Defines the thresh-hold cutoff to be assigned signatures to a sample. \n\n  **context_type**: A list of strings, optional. The items in the list defines the mutational contexts to be considered to extract the signatures. The default value is [\"96\", \"DINUC\" , \"ID\"], where \"96\" is the SBS96 context, \"DINUC\"\n        is the DINULEOTIDE context and ID is INDEL context. \n\nOTHERS:-\n\n**get_all_signature_matrices**: A Boolean. If true, the Ws and Hs from all the NMF iterations are generated in the output.\n\nReturns\n-------\nTo learn about the output, please visit https://osf.io/t6j7u/wiki/home/\n</code></pre>\n<h2>Returns</h2>\n<p>To learn about the output, please visit <a href=\"https://osf.io/t6j7u/wiki/home/\" rel=\"nofollow\">https://osf.io/t6j7u/wiki/home/</a></p>\n<pre><code>    Examples\n    --------\n\n    &gt;&gt;&gt; from SigProfilerExtractor import sigpro as sig\n\n    # to get input from vcf files\n    &gt;&gt;&gt; path_to_example_folder_containing_vcf_files = sig.importdata(\"vcf\")\n    &gt;&gt;&gt; data = path_to_example_folder_containing_vcf_files # you can put the path to your folder containing the vcf samples\n    &gt;&gt;&gt; sig.sigProfilerExtractor(\"vcf\", \"example_output\", data, minimum_signatures=1, maximum_signatures=3)\n\n    Wait untill the excecution is finished. The process may a couple of hours based on the size of the data.\n    Check the current working directory for the \"example_output\" folder.\n\n    # to get input from table format (mutation catalog matrix)\n    &gt;&gt;&gt; path_to_example_table = sig.importdata(\"matrix\")\n    &gt;&gt;&gt; data = path_to_example_table # you can put the path to your tab delimited file containing the mutational catalog         matrix/table\n    &gt;&gt;&gt; sig.sigProfilerExtractor(\"matrix\", \"example_output\", data, opportunity_genome=\"GRCh38\", minimum_signatures=1, maximum_signatures=3)\n\n    To get help on the parameters and outputs of the \"sigProfilerExtractor\" function, please write down the following line:\n\n    &gt;&gt;&gt; help(sig.sigProfilerExtractor)\n</code></pre>\n<h3>decompose</h3>\n<pre><code>Decomposes the De Novo Signatures into COSMIC Signatures and assigns COSMIC signatures into samples\n\nParameters: \n\n    signatures: A string. Path to a  tab delimited file that contains the signaure table where the rows are mutation                         types and colunms are signature IDs. \n    activities: A string. Path to a tab delimilted file that contains the activity table where the rows are sample IDs                       and colunms are signature IDs.\n    samples: A string. Path to a tab delimilted file that contains the activity table where the rows are mutation types                  and colunms are sample IDs.\n    output: A string. Path to the output folder.\n    genome_build = A string. The genome type. Example: \"GRCh37\", \"GRCh38\", \"mm9\", \"mm10\". The default value is \"GRCh37\"\n    verbose = Boolean. Prints statements. Default value is False. \n\nExample:\n     &gt;&gt;&gt;from SigProfilerExtractor import decomposition as decomp\n     &gt;&gt;&gt;signatures = \"path/to/dDe_Novo_Solution_Signatures.txt\"\n     &gt;&gt;&gt;activities=\"path/to/De_Novo_Solution_Activities.txt\"\n     &gt;&gt;&gt;samples=\"path/to/Samples.txt\"\n     &gt;&gt;&gt;output=\"name or path/to/output.txt\"\n     &gt;&gt;&gt;decomp.decompose(signatures, activities, samples, output, genome_build=\"GRCh37\", verbose=False)   \n\n Values:\n    The files below will be generated in the output folder--\n\n    Cluster_of_Samples.txt\n    comparison_with_global_ID_signatures.csv\n    Decomposed_Solution_Activities.txt\n    Decomposed_Solution_Samples_stats.txt\n    Decomposed_Solution_Signatures.txt\n    decomposition_logfile.txt\n    dendogram.pdf\n    Mutation_Probabilities.txt\n    Signature_assaignment_logfile.txt\n    Signature_plot[MutatutionContext]_plots_Decomposed_Solution.pdf\n</code></pre>\n<h3>GPU support</h3>\n<pre><code>If CUDA out of memory exceptions occur, it will be necessary to reduce the number of CPU processes used (the `cpu` parameter).\n\n## For more information, help and examples, please visit: https://osf.io/t6j7u/wiki/home/\n\n## COPYRIGHT\nThis software and its documentation are copyright 2018 as a part of the sigProfiler project. The SigProfilerExtractor framework is free software and is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n## CONTACT INFORMATION\nPlease address any queries or bug reports to S M Ashiqul Islam (Mishu) at m0islam@ucsd.edu\n\n\n</code></pre>\n\n          </div>"}, "last_serial": 7097147, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "883ff2c8e26f0cd4aa70af95555477d7", "sha256": "b42cc22d6077a6718da14ca915a9ec327d6395e698b29801b7cdbec332e9e532"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "883ff2c8e26f0cd4aa70af95555477d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34683206, "upload_time": "2019-12-09T19:53:59", "upload_time_iso_8601": "2019-12-09T19:53:59.562198Z", "url": "https://files.pythonhosted.org/packages/74/a2/469cb623225d3ed8ebb6ea27ddaf19153e1c132546fa6abcef1725899a7a/SigProfilerExtractor-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "166dccdddf851642805836fb4d256102", "sha256": "2cae2dac7c885fc1d960fd1f41bd9dd4fca7d86739daf781d713081fa9d86622"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "166dccdddf851642805836fb4d256102", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34266479, "upload_time": "2019-12-09T19:54:07", "upload_time_iso_8601": "2019-12-09T19:54:07.560133Z", "url": "https://files.pythonhosted.org/packages/32/ca/6f42ec4d57f8dde78ca0ac5a6836eaff6fef7283117babb261ca7bb6b050/SigProfilerExtractor-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e9f4f95163db8b4652eaf708c047edc6", "sha256": "5bdf9e02e7f8914a5d8a2cb6793b741b634c5597088f43759ed3986bbcbf2f84"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e9f4f95163db8b4652eaf708c047edc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34683355, "upload_time": "2019-12-10T19:11:41", "upload_time_iso_8601": "2019-12-10T19:11:41.079235Z", "url": "https://files.pythonhosted.org/packages/b4/1b/17bbe1bb2f7f14ffe41e4ca3e2500eab74b6588265b868c2a542327a22a2/SigProfilerExtractor-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4d4dbed20298287635bfe20c1f2a914", "sha256": "96dc2091d48436977fa5ce76d0f92b3eb09dafea6f2d2125055e8e8571d68474"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c4d4dbed20298287635bfe20c1f2a914", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34266613, "upload_time": "2019-12-10T19:11:49", "upload_time_iso_8601": "2019-12-10T19:11:49.851724Z", "url": "https://files.pythonhosted.org/packages/12/c8/855116233101d3e73087c3d6ad8e428b67a1fc3523a52b50ed2b2df4b26b/SigProfilerExtractor-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "fb42cf42ecb0a9ad59716adccb99219a", "sha256": "8f27253aa062baab78860eab84532376662cb05e7e2db4b6e109ef8897f0e9bf"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fb42cf42ecb0a9ad59716adccb99219a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34683443, "upload_time": "2019-12-14T01:29:52", "upload_time_iso_8601": "2019-12-14T01:29:52.844006Z", "url": "https://files.pythonhosted.org/packages/c1/65/f8aaaab1e173e2a2f55a6c4925e3192a75b3670cc691df7a4cda9d3aef42/SigProfilerExtractor-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8da58785c9a125146980113d227f2cea", "sha256": "d5aadf5646763db1512802e61cc58d200452434cd7057f5930028d30bc7846d2"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8da58785c9a125146980113d227f2cea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34266779, "upload_time": "2019-12-14T01:29:59", "upload_time_iso_8601": "2019-12-14T01:29:59.672037Z", "url": "https://files.pythonhosted.org/packages/9f/55/13838fd2bff7c51aa05a63b72646f5ed42c0090e390d5b119a78a06a2d60/SigProfilerExtractor-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "ef1598707903fd5c389fbea323819131", "sha256": "a236fa3e39f7b6d70e6b5879b90e3f691004efc97711eeb9e749f318f116a869"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ef1598707903fd5c389fbea323819131", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34683396, "upload_time": "2019-12-23T20:30:33", "upload_time_iso_8601": "2019-12-23T20:30:33.185872Z", "url": "https://files.pythonhosted.org/packages/93/1e/2479c8267a188f8531e0cb6d20bf0b3e11cefc9e34484c332783ac271ffc/SigProfilerExtractor-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39618c72838762341ae31d5a96f89e53", "sha256": "c2e383b8def31aa2f8fb3fd7fc27c4e32a7a349e72f10b26fc1e2911225fa9e1"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.3.tar.gz", "has_sig": false, "md5_digest": "39618c72838762341ae31d5a96f89e53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34266650, "upload_time": "2019-12-23T20:34:34", "upload_time_iso_8601": "2019-12-23T20:34:34.823926Z", "url": "https://files.pythonhosted.org/packages/75/59/563c45dc097a0bb02ee8fc7c2340872cf5a0b975f05ba6c784fa7aa7a15b/SigProfilerExtractor-1.0.3.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "3066d035672a72d590864b494ba18408", "sha256": "047cd30ced288bf85a08c36e597325973730182b57f101f53ac73261136c0487"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3066d035672a72d590864b494ba18408", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1660591, "upload_time": "2020-02-20T20:23:30", "upload_time_iso_8601": "2020-02-20T20:23:30.457589Z", "url": "https://files.pythonhosted.org/packages/a7/0b/2e6abaaf50a5f8b497e07bbd26596e570d917b423b5a8506391087d6e87b/SigProfilerExtractor-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a224669bad1bba92100a7aa1e68a2947", "sha256": "84189c3478feb18013c5ec70eccb1edabfc5991f690efb5207c5acb1b3d9b9a1"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.5.tar.gz", "has_sig": false, "md5_digest": "a224669bad1bba92100a7aa1e68a2947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1636034, "upload_time": "2020-02-20T20:23:32", "upload_time_iso_8601": "2020-02-20T20:23:32.025207Z", "url": "https://files.pythonhosted.org/packages/d6/0d/80c4c1fb59b50531187562d8ee24c1a8b1054fb2acc0c4d1cf313ee85127/SigProfilerExtractor-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "8ce199179f877b61a064265c4258e68e", "sha256": "ad80550dfe5de72f71e6bf2da48a783027316715ad040aa9d5dbf1a5961e578a"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "8ce199179f877b61a064265c4258e68e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1693902, "upload_time": "2020-03-08T21:34:39", "upload_time_iso_8601": "2020-03-08T21:34:39.320106Z", "url": "https://files.pythonhosted.org/packages/e6/9e/2ace9ae9982fdcd6154e153c91a47056d822cbc58b952d5e45b00bf28d51/SigProfilerExtractor-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48cfc6c4984cac71d1ce5b95bb79c530", "sha256": "0b704175c09958f42eb4fb25aa2ffeaac32c183635fd63cb6d2a09ff7e705eaf"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.6.tar.gz", "has_sig": false, "md5_digest": "48cfc6c4984cac71d1ce5b95bb79c530", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1659065, "upload_time": "2020-03-08T21:34:46", "upload_time_iso_8601": "2020-03-08T21:34:46.831024Z", "url": "https://files.pythonhosted.org/packages/6c/98/76b01b09b161ff74c9c1e7207ac93c0424a8411b7e87c2f1b7f9e6457cd0/SigProfilerExtractor-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "6e2f2ada3f15efaa897b05096acf3c95", "sha256": "1763d3f0c69a863dd54e255ba6d8c4659a6d0cfb907a1188f053ca42cbc27034"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "6e2f2ada3f15efaa897b05096acf3c95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1703677, "upload_time": "2020-04-10T03:26:12", "upload_time_iso_8601": "2020-04-10T03:26:12.520067Z", "url": "https://files.pythonhosted.org/packages/0b/64/acf4495d9f1e3b90340026ca31c7261cf4ef2bb8d997db3ba3673f0db4ed/SigProfilerExtractor-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50dc3a6d76fcf1e49bc80f1c936beff0", "sha256": "d919ac08674f0e97a7097d2c3d4ccdb7957a510648fb210462e2ad8bf6e44deb"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.7.tar.gz", "has_sig": false, "md5_digest": "50dc3a6d76fcf1e49bc80f1c936beff0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1667631, "upload_time": "2020-04-10T03:26:25", "upload_time_iso_8601": "2020-04-10T03:26:25.951390Z", "url": "https://files.pythonhosted.org/packages/3f/cd/5b341d858b182879aa7d99a957154bae72dbea23788e21de0716cfede89a/SigProfilerExtractor-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "69fd741e33824cf3eb259909eaaf132b", "sha256": "9240905ca757e3cf9092953daecfae8e6768934799b53bd7de8efb383e7e1287"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "69fd741e33824cf3eb259909eaaf132b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1703577, "upload_time": "2020-04-17T18:54:03", "upload_time_iso_8601": "2020-04-17T18:54:03.270312Z", "url": "https://files.pythonhosted.org/packages/dd/f6/d0ca45cca2bf649a7295cfb164b4d267b543e339d06529bc0e5f75edf226/SigProfilerExtractor-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6692c4a2f1b4d2bdad95ba71dd713409", "sha256": "87b7cc343ce7e1f72d9405a5c5fab6fd118af14f48caea062bb5e50e0520a330"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.8.tar.gz", "has_sig": false, "md5_digest": "6692c4a2f1b4d2bdad95ba71dd713409", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1667545, "upload_time": "2020-04-17T18:54:06", "upload_time_iso_8601": "2020-04-17T18:54:06.272088Z", "url": "https://files.pythonhosted.org/packages/76/c3/e0aa85a9a2facd4d8b211e1ae19c1a4b5376ca157843d863d146e5752cb4/SigProfilerExtractor-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "9cb63a2b08d5825103fa72270f76551a", "sha256": "8fbd7e1d7a24dfbe6a28535a83db73b9b2ea5b162f7d6952121a981ca59d1ae1"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "9cb63a2b08d5825103fa72270f76551a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1703894, "upload_time": "2020-04-25T00:42:02", "upload_time_iso_8601": "2020-04-25T00:42:02.511053Z", "url": "https://files.pythonhosted.org/packages/e6/c8/b14a70caacf2ec8fd733ec7a947d963804d230bd06c18e7a356731d87794/SigProfilerExtractor-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92663e3910b4fd7b21636d5624b690bb", "sha256": "8703e76bd29d99a49116b64141d0572026b66ad893ff4a8498743a62cefe89b2"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.9.tar.gz", "has_sig": false, "md5_digest": "92663e3910b4fd7b21636d5624b690bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1667893, "upload_time": "2020-04-25T00:42:04", "upload_time_iso_8601": "2020-04-25T00:42:04.847687Z", "url": "https://files.pythonhosted.org/packages/28/93/af53a160bfcbd0d3fbdb893d65bf7007bfd90f586f172ebd053f0d8977cb/SigProfilerExtractor-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9cb63a2b08d5825103fa72270f76551a", "sha256": "8fbd7e1d7a24dfbe6a28535a83db73b9b2ea5b162f7d6952121a981ca59d1ae1"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "9cb63a2b08d5825103fa72270f76551a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1703894, "upload_time": "2020-04-25T00:42:02", "upload_time_iso_8601": "2020-04-25T00:42:02.511053Z", "url": "https://files.pythonhosted.org/packages/e6/c8/b14a70caacf2ec8fd733ec7a947d963804d230bd06c18e7a356731d87794/SigProfilerExtractor-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92663e3910b4fd7b21636d5624b690bb", "sha256": "8703e76bd29d99a49116b64141d0572026b66ad893ff4a8498743a62cefe89b2"}, "downloads": -1, "filename": "SigProfilerExtractor-1.0.9.tar.gz", "has_sig": false, "md5_digest": "92663e3910b4fd7b21636d5624b690bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1667893, "upload_time": "2020-04-25T00:42:04", "upload_time_iso_8601": "2020-04-25T00:42:04.847687Z", "url": "https://files.pythonhosted.org/packages/28/93/af53a160bfcbd0d3fbdb893d65bf7007bfd90f586f172ebd053f0d8977cb/SigProfilerExtractor-1.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:35 2020"}