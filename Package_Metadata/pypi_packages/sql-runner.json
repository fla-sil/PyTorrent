{"info": {"author": "sql-runner contributors", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "## DEPT SQL runner\n\nThe DEPT SQL runner has three basic functionalities\n\n* executing SQL code in a specific order\n```\nrunner --execute {RUNNER_FILE_1}, {RUNNER_FILE_2} ..\n```\n* executing SQL code in a specific order, in staging mode (on test schema, \ntables and data)\n```\nrunner --staging {RUNNER_FILE_1}, {RUNNER_FILE_2} ..\n```\n\n* quickly testing SQL code through temporary creation of views\n```\nrunner --test {RUNNER_FILE_1}, {RUNNER_FILE_2} ..\n```\n* plotting of a dependency graph\n```\nrunner --deps\n```\n\nAn alias for the `runner` command is `sqlrunner`, for legacy purposes.\n\nUsing `run_sql` will run in interactive mode. `run_sql /path/to/config.json`\n\nThe supported databases are Redshift, Snowflake and Postgres.\n\n### Installation\n\nSQL-Runner has the following optional dependencies that have to be mentioned when needed, during the installation process with pip:\n* `azuredwh` - for work with Azure SQL Data Warehouse\n* `snowflake` - for working with Snowflake DB\n* `redshift` - for working with AWS Redshift\n* `bigquery` - for working with Google BigQuery\n* `s3` - for enabling AWS S3 API access (for saving dependencies SVG graph)\n\nAdditionally for Azure DWH, it's required to install the [Microsoft ODBC Driver](https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017). For Ubuntu 18.04 this is sufficient:\n```sh\n# In case any of these gest stuck, simply run `sudo su` once, to cache the password, then exit using Ctrl+D\ncurl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\ncurl https://packages.microsoft.com/config/ubuntu/18.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list > /dev/null\nsudo apt-get update\nsudo ACCEPT_EULA=Y apt-get install msodbcsql17\nsudo apt-get install unixodbc-dev\n```\n\nAnother dependency is graphviz:\n```sh\nsudo apt install graphviz\n```\n\nIt is highly recommend it to install it in a virtual environment.\n\nTo create a virtual environment, run this:\n```sh\nsudo apt-get install python3-virtualenv\npython3 -m virtualenv -p python3 venv\n```\n\nTo install in a virtual environment, run this:\n```sh\nsource venv/bin/activate\n# Install with dependencies, ex. s3 and azuredwh\npip install git+https://github.com/leroi-marketing/sql-runner.git#egg=sql-runner[azuredwh]\n```\n\nBut if you really want to install it globally, run this:\n```sh\nsudo apt install python3-pip\n# Install with dependencies, ex. s3 and azuredwh\nsudo pip install git+https://github.com/leroi-marketing/sql-runner.git#egg=sql-runner[azuredwh]\n```\n\n### Configuration\nTwo configuration files are needed to use the sqlrunner.\n* A config.json file that specifies all the necessary configuration variables. The default path is `auth/config.json` relative to the directory that this is run from.\n```\n{\n    \"sql_path\": \"{PATH}\",\n    \"database_type\": \"[snowflake|redshift|postgres|bigquery|azuredwh]\",\n    \"auth\": {\n        // For Azure Synapse Analytics only\n        \"server\": \"url.of.azuredwh.server\",\n        // for BigQuery only\n        \"credentials_path\": \"/path/to/google-generated-credentials.json\",\n\n        // for Snowflake only\n        \"account\": \"{SNOWFLAKE_ACCOUNT}\",\n\n        // Azure Synapse Analytics DB, or Snowflake DB, or BigQuery DB\n        \"database\": \"{DATABASE}\",\n\n        // Postgresql or Redshift\n        \"dbname\": \"{POSTGRES_DATABASE} OR {REDSHIFT_DATABASE}\",\n        \"host\": \"{POSTGRES_HOSTNAME} OR {REDSHIFT_HOSTNAME}\",\n        \"port\": \"{POSTGRES_PORT} OR {REDSHIFT_PORT}\"\n\n        // Snowflake, postgres, redshift\n        \"user\": \"{USERNAME}\",\n        // Azure Synapse Analytics\n        \"username\": \"{USERNAME}\",\n\n        // All except Google BigQuery\n        \"password\": \"{PASSWORD}\",\n    },\n    // configure staging environments as database suffix for all but the source data objects\n    \"staging\": {\n      \"override\": {\n        \"database\": {\n          \"suffix\": \"_STAGING1\"\n        }\n      },\n      // python3 code that exposes `re` - regular expressions module, `database`, `schema`, `relation` being referenced\n      \"except\": \"not re.match('dwh', database.lower()) or re.search('^x', schema)\"\n    },\n    // configure test schema creation locations as a schema prefix for all but the source data objects\n    \"test\": {\n      \"override\": {\n        \"schema\": {\n          \"prefix\": \"zz_\"\n        }\n      },\n      // python3 code that exposes `re` - regular expressions module, `database`, `schema`, `relation` being referenced\n      \"except\": \"not re.match('dwh', database.lower()) or re.search('^x', schema)\"\n    },\n    // Add a dependency cache file, to speed up run initialization\n    \"deps_cache\": {\n      \"type\": \"filesystem\",\n      \"location\": \"/path/to/local/cache/dependencies.csv\"\n    },\n    \"deps_schema\": \"{DEPENDENCY_SCHEMA_NAME}\",\n    \"exclude_dependencies\": [\n        \"EXCLUDED_SCHEMA_1\",\n        \"EXCLUDED_SCHEMA_2\"\n    ],\n    \"graphviz_path\": \"{GRAPHVIZ_PATH_FOR_WINDOWS}\"\n}\n```\n* One or more csv files specifying the name of the the tables and views and their respective schemas.\n ```\n {SCHEMA_1};{SQL_FILENAME_1};e\n {SCHEMA_1};{SQL_FILENAME_2};e\n {SCHEMA_1};{SQL_FILENAME_3};e\n {SCHEMA_2};{SQL_FILENAME_4};e\n {SCHEMA_3};{SQL_FILENAME_5};e\n ..\n ```\nPer schema one directory is expected. The name of the SQL files should correspond to thename of the respective table or view. The last columns specifies the desired action.\n ```\n e: execute the query\n t: create table\n v: create view\n m: materialize view\n check: run assertions on query result\n ```\n\n### Development\n\nTo set up dependencies locally for development:\n```sh\n# Install virtualenv (if your default python is python2, specify also `-p python3`)\npython3 -m virtualenv -p python3 venv\nsource venv/bin/activate\npip install -e .[azuredwh] # and other optional dependencies\n\n# Run local (non-build) version:\npython debug.py [arg1 arg2 ...]\n```\n\n## Functional comments\n\nQueries can have functional comments on the top. These comments can either specify data distribution for Azure Synapse Analytics or RedShift, or can contain assertions for `check` queries.\n\n*This needs better documentation, but for now you can check the source code for the DB-specific Query classes in sql_runner/db.*\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "sql-runner", "package_url": "https://pypi.org/project/sql-runner/", "platform": "", "project_url": "https://pypi.org/project/sql-runner/", "project_urls": null, "release_url": "https://pypi.org/project/sql-runner/0.4.3/", "requires_dist": ["networkx (==2.2)", "pydot (==1.4.1)", "graphviz (==0.10.1)", "pythondialog", "sqlparse", "pyodbc ; extra == 'azuredwh'", "google-cloud-bigquery (==1.23.1) ; extra == 'bigquery'", "psycopg2-binary ; extra == 'postgres'", "psycopg2-binary ; extra == 'redshift'", "boto3 ; extra == 's3'", "snowflake-connector-python (==2.0.4) ; extra == 'snowflake'"], "requires_python": "~=3.6", "summary": "DEPT SQL runner", "version": "0.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>DEPT SQL runner</h2>\n<p>The DEPT SQL runner has three basic functionalities</p>\n<ul>\n<li>executing SQL code in a specific order</li>\n</ul>\n<pre><code>runner --execute {RUNNER_FILE_1}, {RUNNER_FILE_2} ..\n</code></pre>\n<ul>\n<li>executing SQL code in a specific order, in staging mode (on test schema,\ntables and data)</li>\n</ul>\n<pre><code>runner --staging {RUNNER_FILE_1}, {RUNNER_FILE_2} ..\n</code></pre>\n<ul>\n<li>quickly testing SQL code through temporary creation of views</li>\n</ul>\n<pre><code>runner --test {RUNNER_FILE_1}, {RUNNER_FILE_2} ..\n</code></pre>\n<ul>\n<li>plotting of a dependency graph</li>\n</ul>\n<pre><code>runner --deps\n</code></pre>\n<p>An alias for the <code>runner</code> command is <code>sqlrunner</code>, for legacy purposes.</p>\n<p>Using <code>run_sql</code> will run in interactive mode. <code>run_sql /path/to/config.json</code></p>\n<p>The supported databases are Redshift, Snowflake and Postgres.</p>\n<h3>Installation</h3>\n<p>SQL-Runner has the following optional dependencies that have to be mentioned when needed, during the installation process with pip:</p>\n<ul>\n<li><code>azuredwh</code> - for work with Azure SQL Data Warehouse</li>\n<li><code>snowflake</code> - for working with Snowflake DB</li>\n<li><code>redshift</code> - for working with AWS Redshift</li>\n<li><code>bigquery</code> - for working with Google BigQuery</li>\n<li><code>s3</code> - for enabling AWS S3 API access (for saving dependencies SVG graph)</li>\n</ul>\n<p>Additionally for Azure DWH, it's required to install the <a href=\"https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017\" rel=\"nofollow\">Microsoft ODBC Driver</a>. For Ubuntu 18.04 this is sufficient:</p>\n<pre><span class=\"c1\"># In case any of these gest stuck, simply run `sudo su` once, to cache the password, then exit using Ctrl+D</span>\ncurl https://packages.microsoft.com/keys/microsoft.asc <span class=\"p\">|</span> sudo apt-key add -\ncurl https://packages.microsoft.com/config/ubuntu/18.04/prod.list <span class=\"p\">|</span> sudo tee /etc/apt/sources.list.d/mssql-release.list &gt; /dev/null\nsudo apt-get update\nsudo <span class=\"nv\">ACCEPT_EULA</span><span class=\"o\">=</span>Y apt-get install msodbcsql17\nsudo apt-get install unixodbc-dev\n</pre>\n<p>Another dependency is graphviz:</p>\n<pre>sudo apt install graphviz\n</pre>\n<p>It is highly recommend it to install it in a virtual environment.</p>\n<p>To create a virtual environment, run this:</p>\n<pre>sudo apt-get install python3-virtualenv\npython3 -m virtualenv -p python3 venv\n</pre>\n<p>To install in a virtual environment, run this:</p>\n<pre><span class=\"nb\">source</span> venv/bin/activate\n<span class=\"c1\"># Install with dependencies, ex. s3 and azuredwh</span>\npip install git+https://github.com/leroi-marketing/sql-runner.git#egg<span class=\"o\">=</span>sql-runner<span class=\"o\">[</span>azuredwh<span class=\"o\">]</span>\n</pre>\n<p>But if you really want to install it globally, run this:</p>\n<pre>sudo apt install python3-pip\n<span class=\"c1\"># Install with dependencies, ex. s3 and azuredwh</span>\nsudo pip install git+https://github.com/leroi-marketing/sql-runner.git#egg<span class=\"o\">=</span>sql-runner<span class=\"o\">[</span>azuredwh<span class=\"o\">]</span>\n</pre>\n<h3>Configuration</h3>\n<p>Two configuration files are needed to use the sqlrunner.</p>\n<ul>\n<li>A config.json file that specifies all the necessary configuration variables. The default path is <code>auth/config.json</code> relative to the directory that this is run from.</li>\n</ul>\n<pre><code>{\n    \"sql_path\": \"{PATH}\",\n    \"database_type\": \"[snowflake|redshift|postgres|bigquery|azuredwh]\",\n    \"auth\": {\n        // For Azure Synapse Analytics only\n        \"server\": \"url.of.azuredwh.server\",\n        // for BigQuery only\n        \"credentials_path\": \"/path/to/google-generated-credentials.json\",\n\n        // for Snowflake only\n        \"account\": \"{SNOWFLAKE_ACCOUNT}\",\n\n        // Azure Synapse Analytics DB, or Snowflake DB, or BigQuery DB\n        \"database\": \"{DATABASE}\",\n\n        // Postgresql or Redshift\n        \"dbname\": \"{POSTGRES_DATABASE} OR {REDSHIFT_DATABASE}\",\n        \"host\": \"{POSTGRES_HOSTNAME} OR {REDSHIFT_HOSTNAME}\",\n        \"port\": \"{POSTGRES_PORT} OR {REDSHIFT_PORT}\"\n\n        // Snowflake, postgres, redshift\n        \"user\": \"{USERNAME}\",\n        // Azure Synapse Analytics\n        \"username\": \"{USERNAME}\",\n\n        // All except Google BigQuery\n        \"password\": \"{PASSWORD}\",\n    },\n    // configure staging environments as database suffix for all but the source data objects\n    \"staging\": {\n      \"override\": {\n        \"database\": {\n          \"suffix\": \"_STAGING1\"\n        }\n      },\n      // python3 code that exposes `re` - regular expressions module, `database`, `schema`, `relation` being referenced\n      \"except\": \"not re.match('dwh', database.lower()) or re.search('^x', schema)\"\n    },\n    // configure test schema creation locations as a schema prefix for all but the source data objects\n    \"test\": {\n      \"override\": {\n        \"schema\": {\n          \"prefix\": \"zz_\"\n        }\n      },\n      // python3 code that exposes `re` - regular expressions module, `database`, `schema`, `relation` being referenced\n      \"except\": \"not re.match('dwh', database.lower()) or re.search('^x', schema)\"\n    },\n    // Add a dependency cache file, to speed up run initialization\n    \"deps_cache\": {\n      \"type\": \"filesystem\",\n      \"location\": \"/path/to/local/cache/dependencies.csv\"\n    },\n    \"deps_schema\": \"{DEPENDENCY_SCHEMA_NAME}\",\n    \"exclude_dependencies\": [\n        \"EXCLUDED_SCHEMA_1\",\n        \"EXCLUDED_SCHEMA_2\"\n    ],\n    \"graphviz_path\": \"{GRAPHVIZ_PATH_FOR_WINDOWS}\"\n}\n</code></pre>\n<ul>\n<li>One or more csv files specifying the name of the the tables and views and their respective schemas.</li>\n</ul>\n<pre><code>{SCHEMA_1};{SQL_FILENAME_1};e\n{SCHEMA_1};{SQL_FILENAME_2};e\n{SCHEMA_1};{SQL_FILENAME_3};e\n{SCHEMA_2};{SQL_FILENAME_4};e\n{SCHEMA_3};{SQL_FILENAME_5};e\n..\n</code></pre>\n<p>Per schema one directory is expected. The name of the SQL files should correspond to thename of the respective table or view. The last columns specifies the desired action.</p>\n<pre><code>e: execute the query\nt: create table\nv: create view\nm: materialize view\ncheck: run assertions on query result\n</code></pre>\n<h3>Development</h3>\n<p>To set up dependencies locally for development:</p>\n<pre><span class=\"c1\"># Install virtualenv (if your default python is python2, specify also `-p python3`)</span>\npython3 -m virtualenv -p python3 venv\n<span class=\"nb\">source</span> venv/bin/activate\npip install -e .<span class=\"o\">[</span>azuredwh<span class=\"o\">]</span> <span class=\"c1\"># and other optional dependencies</span>\n\n<span class=\"c1\"># Run local (non-build) version:</span>\npython debug.py <span class=\"o\">[</span>arg1 arg2 ...<span class=\"o\">]</span>\n</pre>\n<h2>Functional comments</h2>\n<p>Queries can have functional comments on the top. These comments can either specify data distribution for Azure Synapse Analytics or RedShift, or can contain assertions for <code>check</code> queries.</p>\n<p><em>This needs better documentation, but for now you can check the source code for the DB-specific Query classes in sql_runner/db.</em></p>\n\n          </div>"}, "last_serial": 7060369, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "348e20564f95bc17c948d7640210befa", "sha256": "2ce3c62ed0edd4527fe0525c8b7c45c35e3d30a86e9cdabd4463da7eb1ea5ed1"}, "downloads": -1, "filename": "sql_runner-0.2.0-py3.7.egg", "has_sig": false, "md5_digest": "348e20564f95bc17c948d7640210befa", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": "~=3.6", "size": 31946, "upload_time": "2020-04-16T14:34:38", "upload_time_iso_8601": "2020-04-16T14:34:38.727058Z", "url": "https://files.pythonhosted.org/packages/5c/7e/1b0c4f17235a61ae467d1a56aa1f598abdcbac5e50e9e9a5bc821a86971a/sql_runner-0.2.0-py3.7.egg", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "513e2f894b36b7a5e22ed731938f1e37", "sha256": "97fc600668769c7b163be765ef3b2129a44d455d7b4ac531fa49845389eb029c"}, "downloads": -1, "filename": "sql_runner-0.2.1-py3.6.egg", "has_sig": false, "md5_digest": "513e2f894b36b7a5e22ed731938f1e37", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": "~=3.6", "size": 32130, "upload_time": "2020-04-16T14:34:40", "upload_time_iso_8601": "2020-04-16T14:34:40.279648Z", "url": "https://files.pythonhosted.org/packages/56/14/e2a3e2985a2aef8df48ac5504f51d1460515f9f2f9214df2fd89ad2228e5/sql_runner-0.2.1-py3.6.egg", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "22769e812d22d92cf8716ffdf0a10d63", "sha256": "c61e13e7ed08b55e5d88757f17fef0d10ba5a17d81c49594db267e705b17c60e"}, "downloads": -1, "filename": "sql_runner-0.2.2-py3.6.egg", "has_sig": false, "md5_digest": "22769e812d22d92cf8716ffdf0a10d63", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": "~=3.6", "size": 34225, "upload_time": "2020-04-16T14:34:41", "upload_time_iso_8601": "2020-04-16T14:34:41.586349Z", "url": "https://files.pythonhosted.org/packages/ff/d7/0e1cfdf93b1b958dd390fa6e5868d6c3820a7a9984b0e03ab7c5f43dad9b/sql_runner-0.2.2-py3.6.egg", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "940fea9ad7d99d7829dedf3ea2cc1775", "sha256": "faff919192925ccb202bc2a6e366a0cab3eab3636bba6ab99d4f453c8c795c12"}, "downloads": -1, "filename": "sql_runner-0.2.3-py3.6.egg", "has_sig": false, "md5_digest": "940fea9ad7d99d7829dedf3ea2cc1775", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": "~=3.6", "size": 35523, "upload_time": "2020-04-16T14:34:42", "upload_time_iso_8601": "2020-04-16T14:34:42.818217Z", "url": "https://files.pythonhosted.org/packages/c3/5c/d2b675e1bf49091cd07c60c346dd4dd6d671ee58e0845dfb81dba1b08e13/sql_runner-0.2.3-py3.6.egg", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "d711cb55bf08354b9a2c869e5627ab8e", "sha256": "e358ec1952ed4c82233164df203c01c265647af92ca4cf776705ed1fbf06ac1b"}, "downloads": -1, "filename": "sql_runner-0.2.5-py3.6.egg", "has_sig": false, "md5_digest": "d711cb55bf08354b9a2c869e5627ab8e", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": "~=3.6", "size": 37445, "upload_time": "2020-04-16T14:34:44", "upload_time_iso_8601": "2020-04-16T14:34:44.179272Z", "url": "https://files.pythonhosted.org/packages/5e/b4/7a6a8f97f83931a45259ed634d815ad8b43ad9d1f6b5f6e45c58a7522692/sql_runner-0.2.5-py3.6.egg", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "5a3105754375f9145f92950dcff0516e", "sha256": "e735dc08df90751069f470f7bb427877274d0feed13f977ce1581fce366a2161"}, "downloads": -1, "filename": "sql_runner-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5a3105754375f9145f92950dcff0516e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 46062, "upload_time": "2020-04-16T14:34:36", "upload_time_iso_8601": "2020-04-16T14:34:36.517083Z", "url": "https://files.pythonhosted.org/packages/e5/8c/1ca9c3413c0f5463d1256454ceebcc8988dc7773b6d9552265d0bade3574/sql_runner-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "853f0a19a6c6c3f6d28bf38cbbcddcf5", "sha256": "55f9662d1ff7f63f932e5ec2b337f17de0963d1f0425c1e0636e4536bab55bb9"}, "downloads": -1, "filename": "sql-runner-0.4.2.tar.gz", "has_sig": false, "md5_digest": "853f0a19a6c6c3f6d28bf38cbbcddcf5", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 21813, "upload_time": "2020-04-16T14:34:45", "upload_time_iso_8601": "2020-04-16T14:34:45.344557Z", "url": "https://files.pythonhosted.org/packages/46/8b/688f0c04b08d31590d5410d683b18f63efb5146cfa50296156a117b61ccd/sql-runner-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "09c2f93e458d902d001e2c608500dac0", "sha256": "9fe3227bb1497ea52b20218db05f8b01f4dc535af578e79a4b896a044d273cce"}, "downloads": -1, "filename": "sql_runner-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "09c2f93e458d902d001e2c608500dac0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 46627, "upload_time": "2020-04-20T14:11:54", "upload_time_iso_8601": "2020-04-20T14:11:54.736413Z", "url": "https://files.pythonhosted.org/packages/06/49/2731a659294dde4658608f32448e8da0ae8c76d0fcb6b5e3fcb1b48bbfcb/sql_runner-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ea9bb1c4292edb0e5fb59c1f7fbce31", "sha256": "5b9174bb65c6b3645a00ece68fbdad3f5d5d4564a363dd6ae3413ef95145a90a"}, "downloads": -1, "filename": "sql-runner-0.4.3.tar.gz", "has_sig": false, "md5_digest": "1ea9bb1c4292edb0e5fb59c1f7fbce31", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 22367, "upload_time": "2020-04-20T14:11:59", "upload_time_iso_8601": "2020-04-20T14:11:59.745985Z", "url": "https://files.pythonhosted.org/packages/2b/bb/e239807c6a34ba00696c94df83f7dcf4438e4eef6075614ad4be7e2f7283/sql-runner-0.4.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09c2f93e458d902d001e2c608500dac0", "sha256": "9fe3227bb1497ea52b20218db05f8b01f4dc535af578e79a4b896a044d273cce"}, "downloads": -1, "filename": "sql_runner-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "09c2f93e458d902d001e2c608500dac0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 46627, "upload_time": "2020-04-20T14:11:54", "upload_time_iso_8601": "2020-04-20T14:11:54.736413Z", "url": "https://files.pythonhosted.org/packages/06/49/2731a659294dde4658608f32448e8da0ae8c76d0fcb6b5e3fcb1b48bbfcb/sql_runner-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ea9bb1c4292edb0e5fb59c1f7fbce31", "sha256": "5b9174bb65c6b3645a00ece68fbdad3f5d5d4564a363dd6ae3413ef95145a90a"}, "downloads": -1, "filename": "sql-runner-0.4.3.tar.gz", "has_sig": false, "md5_digest": "1ea9bb1c4292edb0e5fb59c1f7fbce31", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 22367, "upload_time": "2020-04-20T14:11:59", "upload_time_iso_8601": "2020-04-20T14:11:59.745985Z", "url": "https://files.pythonhosted.org/packages/2b/bb/e239807c6a34ba00696c94df83f7dcf4438e4eef6075614ad4be7e2f7283/sql-runner-0.4.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:34 2020"}