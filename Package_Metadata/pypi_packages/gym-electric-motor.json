{"info": {"author": "Praneeth Balakrishna, Gerrit Book, Wilhelm Kirchg\u00e4ssner, Max Schenke, Arne Traue, Oliver Wallscheid", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "![](docs/plots/Motor_Logo.png)\n\n[![Build Status](https://travis-ci.org/upb-lea/gym-electric-motor.svg?branch=master)](https://travis-ci.org/upb-lea/gym-electric-motor)\n[![codecov](https://codecov.io/gh/upb-lea/gym-electric-motor/branch/master/graph/badge.svg)](https://codecov.io/gh/upb-lea/gym-electric-motor)\n[![PyPI version shields.io](https://img.shields.io/pypi/v/gym-electric-motor.svg)](https://pypi.python.org/pypi/gym-electric-motor/)\n[![License](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/upb-lea/gym-electric-motor/blob/master/LICENSE)\n\n__The gym-electric-motor (GEM) package is a software toolbox for the\nsimulation of\ndifferent electric motors.__ \n\nThe toolbox is built upon the [OpenAI Gym Environments](https://gym.openai.com/) for reinforcement learning. \nTherefore, the toolbox is specifically designed for running reinforcement \nlearning algorithms to train agents controlling electric motors.\n\n[Read the detailed docs!](https://upb-lea.github.io/gym-electric-motor/)\n\nSo far, several DC-motor models and the three-phase motors permanent magnet synchronous motor (PMSM), \nsynchronous reluctance motor (SynRM), squirrel cage induction motor (SCIM) and doubly-fed induction \nmotor (DFIM) are available.\nBeside electrical motors, also converters and load models are implemented. The converters can be driven by means of a duty cycle (continuous mode) or \nswitching commands (discrete mode). \nThe figure shows the basic scheme of the converter, motor and load. \n### Physical Structure of the Environment's Components\n![](docs/plots/SCML_Setting.svg)\n### Control Flow of a Step Cycle of the Environment \n![](docs/plots/CycleScheme.svg)\n\n### Citation\nA whitepaper for this framework is available under [arxiv.org/abs/1910.09434\n](https://arxiv.org/abs/1910.09434). Please use the following BibTeX entry for citing us:\n```\n@misc{traue2019reinforcement,\n    title={Towards a Reinforcement Learning Environment Toolbox for Intelligent Electric Motor Control},\n    author={Arne Traue and Gerrit Book and Wilhelm Kirchg\u00e4ssner and Oliver Wallscheid},\n    year={2019},\n    eprint={1910.09434},\n    archivePrefix={arXiv},\n    primaryClass={eess.SY}\n}\n```\n\n### Installing\n\n- Install gym-electric-motor from PyPI (recommended):\n\n```\npip install gym-electric-motor\n```\n\n- Install from Github source:\n\n```\ngit clone git@github.com:upb-lea/gym-electric-motor.git \ncd gym-electric-motor\n# Then either\npython setup.py install\n# or alternatively\npip install -e .\n```\n### Authors\nPraneeth Balakrishna,\nGerrit Book,\nWilhelm Kirchg\u00e4ssner,\nMaximilian Schenke,\nArne Traue,\nOliver Wallscheid\n\n### Getting started\nLike every gym environment, the basic user interface consists of four main functions.\n* `import gym_electric_motor as gem`  \n    Import of the package. \n\n* `env = gem.make(environment-id, **kwargs)`  \n    Returns an instantiated motor environment. Call this function at the beginning.\n    The `gem.make()` method is equal to the `gym.make()`. By using `gem.make()`you can avoid importing gym additionally. \n\n* `(initial_state, initial_reference) = env.reset()`  \n    Resets the motor. This includes a new initial state and new reference trajectories.\n    Call this function before a new episode starts. \n\n* `(state, reference), reward, done, _ = env.step(action)`      \n    Simulate one single time step on the motor with an action.\n    Call this function iteratively until termination is reached.\n\n* `env.render()`    \n    Update the visualization of the motor states.\n\n### GEM Make Call\nThe make function takes the environment-ids and several constructor arguments.\nEvery environment also works without further parameters with default values.\nThese default parameters can be looked up in the API-documentation of every GEM-environment.\nWith the environment-id you select a certain motor type and action type (continuous or discrete) and with the further \nconstructor arguments you can parametrize the environment to your control problem.\n\n##### Environment Ids\n\n* DC Motors\n\n    * `'DcExtExCont-v1'`     \n        Externally excited DC motor with continuous actions.\n\n    * `'DcExtExDisc-v1'`   \n        Externally excited DC motor with discrete actions.\n\n    * `'DcPermExCont-v1'`    \n        Permanently excited DC motor with continuous actions.\n\n    * `'DcPermexDisc-v1'`    \n        Permanently excited DC motor with discrete actions.\n\n    * `'DcShuntCont-v1'`    \n        DC shunt motor with continuous actions.\n\n    * `'DcShuntDisc-v1'`    \n        DC shunt motor with discrete actions.\n\n    * `'DcSeriesCont-v1'`    \n        DC series motor with continuous actions.\n\n    * `'DcSeriesDisc-v1'`  \n        DC series motor with discrete actions.\n\n* Synchronous Motors\n\n    * `'PMSMCont-v1'`:  \n        Permanent magnet synchronous motor with continuous actions.\n\n    * `'PMSMDisc-v1'`:  \n        Permanent magnet synchronous motor with discrete actions.\n\n    * `'SynRMCont-v1'`:  \n        Synchronous reluctance motor with continuous actions.\n\n    * `'SynRMDisc-v1'`:  \n        Synchronous reluctance motor with discrete actions.\n\n* Induction Motors\n\n    * `'SCIMCont-v1'`:  \n        Squirrel cage induction motor with continuous actions.\n\n    * `'SCIMDisc-v1'`:  \n        Squirrel cage induction motor with discrete actions.\n\n    * `'DFIMCont-v1'`:  \n        Doubly fed induction motor with continuous actions.\n\n    * `'DFIMDisc-v1'`:  \n        Doubly fed induction motor with discrete actions.\n\n#### Make Keyword-Arguments\nUsing the keyword arguments in the `gem.make(id, **kwargs)` function you can select different function modules for the \nenvironment and parametrize these modules. \nThe main level modules of each GEM-environment consists of four function modules:\n\n* Physical System\n    * keyword: `physical_system`\n    * Specification and simulation of the system model.\n* Reference Generator\n    * keyword: `reference_generator`\n    * Generation of references that the physical system has to follow.\n* Reward Function\n    * keyword: `reward_function`\n    * Reward calculation based on the current state and reference.\n* Visualization    \n    * keyword: `visualization`\n    * Visualization of the physical systems state, reference and rewards.\n* State Filter\n    * keyword: `state_filter`\n    * Selection of states that shall be shown to the agent.\n\nThese function modules can be selected in three ways:\n\n* Passing a keystring (and further keyword arguments for the class) :\n     * `reference_generator='SinusoidalReference', amplitude_range=(0.2, 0.8)`\n\n* Passing a class pointer (and further keyword arguments for the class)\n    * `reference_generator=SinusoidalReferenceGenerator, amplitude_range=(0.2,0.8)`\n\n* Passing an instantiated object\n  * `reference_generator = SinusoidalReferenceGenerator(amplitude_range=(0.2,0.8)`\n\nFurthermore, the internal function modules of the physical systems like the converter, motor, load can be selected in\nthe make keyword-arguments in the same way. \n\nThe available modules and specific keyword-arguments for each module can be looked up in the API-documentation.\n### Reset\nThe reset function determines new references, new initial values and resets the visualization.\nCall this function before a new episode begins.\nThe parameters of the motor, converter and load will be those during instantiation.\n\n### Step\nThis function performs one action on the environment for one time step.\nIt simulates the motor and needs to be called in every time step. It takes the action as parameter only.\nFirst the input voltage to the motor from the converter is determined and afterwards an integrator is used to compute \nthe next state. \nEventually, the reward is evaluated and returned together with the next observation and a flag indicating termination.\nSeveral reward functions are available.\n\n### Render\nThe visualization contains graphs of the motor quantities 'speed, voltages, currents, torque' for one episode. \nWhat should be shown is to be specified in the configuration-parameter.\nThe quantities that should be displayed can be specified in the constructor-parameters.\nAll visualizations are optional and recommended to be disabled for increased speed of training.\n\n### Examples\n\n- Conventional PI controller as speed controller on a dc series motor [(jump to source)](examples/pi_series_omega_control.py).\n\n- Training and testing of a [Keras-rl](https://github.com/keras-rl/keras-rl) DDPG-Agent as a speed controller on a dc series motor [(jump to source)](examples/ddpg_series_omega_control.py).\n\n### Physical System Models\nThe following electrical motor , converter and mechanical load models are included. More detailed descriptions can be found in the corresponding classes.\n\n##### Motor Models\nThe following motor models are included:\n\nFour DC motors:\n\n- permanently excited motor\n- externally excited motor\n- series motor\n- shunt motor\n\nTwo three phase motors:\n\n- PMSM (permanent magnet synchronous motor)\n- SynRM (synchronous reluctance motor)\n\nTwo variants of the induction motor:\n\n- SCIM (squirrel cage induction motor)\n- DFIM (doubly fed induction motor)\n\n##### Converter\nFollowing converters are included:\n\n- 1 quadrant converter (1QC)\n\n- 2 quadrant converter (2QC) as an asymmetric half bridge with both current polarities\n\n- 4 quadrant converter (4QC)\n\n- B6 Bridge Converter (B6C)\n\nAll converters can consider interlocking times and a dead time of one sampling interval.\nFurthermore, they can be controlled with a discrete action space or a continuous action space.\n\nDiscrete actions are the direct switching states of the transistors.\nContinuous actions are the duty cycles for a pulse width modulation on the transistors. \n\n##### Load\nThe load model consists of a quadratic load function, with user defined coefficients. \nFurthermore the moment of inertia of the load attached to the motor can be specified.\n\n### Notes about the states and value ranges\nThe included states for each motor are summarized and briefly described in the [Motor Dashboard](visualizations/motor_dashboard.html).\nEvery state that can be plotted can also be used in the state filter or as observed state.\nThe actions are basically understood as the desired duty cycles. The actual applied voltage can be taken from the observations.\nThe observations are normalized to their physical limits that can be accessed with `env.limits`.\nTherefore, all values are typically in a range of [0, 1] or [-1, 1] without limit violation.\n\n\n\n### Notes about the Parameters\nAll nominal values of voltages and currents are DC values in the case of a DC motor and peak phase values for the PMSM.\nTherefore, data sheet values for line voltage and phase currents of a PMSM has to be transformed with:\n\n![](docs/plots/voltagetransformation.svg)\n\nFurthermore, the angular velocity is the mechanical one and not the electrical: \n\n![](docs/plots/omegame.svg)\n\nThe mechanical one is needed for speed controller.\nThe included angle is the electrical one due to its usage in the rotational transformation for three phase motors.\n\n\n### Running Unit Tests with Pytest\nTo run the unit tests ''pytest'' is required.\nAll tests can be found in the ''tests'' folder.\nExecute pytest in the project's root folder:\n```\n>>> pytest\n```\nor with test coverage:\n```\n>>> pytest --cov=./\n```\nAll tests shall pass.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/upb-lea/gym-electric-motor", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gym-electric-motor", "package_url": "https://pypi.org/project/gym-electric-motor/", "platform": "", "project_url": "https://pypi.org/project/gym-electric-motor/", "project_urls": {"Homepage": "https://github.com/upb-lea/gym-electric-motor"}, "release_url": "https://pypi.org/project/gym-electric-motor/0.2.0/", "requires_dist": ["matplotlib (>=3.1.0)", "numpy (>=1.16.4)", "scipy (>=1.4.1)", "gym (>=0.15.4)", "pytest (>=5.2.2)", "pytest-cov", "PyQT5 (==5.9.2)", "keras-rl2 (>=1.0.3) ; extra == 'examples'"], "requires_python": "", "summary": "An OpenAI gym environment for electric motor control.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b5a16a0cf0653ddf26d9bdf39fbfb68533e17cf/646f63732f706c6f74732f4d6f746f725f4c6f676f2e706e67\"></p>\n<p><a href=\"https://travis-ci.org/upb-lea/gym-electric-motor\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53091617e289062680b27fed465025a165745175/68747470733a2f2f7472617669732d63692e6f72672f7570622d6c65612f67796d2d656c6563747269632d6d6f746f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/upb-lea/gym-electric-motor\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/930489b7416d4f4191c448fe60a17497f58f436c/68747470733a2f2f636f6465636f762e696f2f67682f7570622d6c65612f67796d2d656c6563747269632d6d6f746f722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/gym-electric-motor/\" rel=\"nofollow\"><img alt=\"PyPI version shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d016a56e4394486512cbb5239187bfe47b57df55/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f67796d2d656c6563747269632d6d6f746f722e737667\"></a>\n<a href=\"https://github.com/upb-lea/gym-electric-motor/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae646c9f8bcc796bfc74debf7ac2c93ee374c6ef/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e7376673f6d61784167653d32353932303030\"></a></p>\n<p><strong>The gym-electric-motor (GEM) package is a software toolbox for the\nsimulation of\ndifferent electric motors.</strong></p>\n<p>The toolbox is built upon the <a href=\"https://gym.openai.com/\" rel=\"nofollow\">OpenAI Gym Environments</a> for reinforcement learning.\nTherefore, the toolbox is specifically designed for running reinforcement\nlearning algorithms to train agents controlling electric motors.</p>\n<p><a href=\"https://upb-lea.github.io/gym-electric-motor/\" rel=\"nofollow\">Read the detailed docs!</a></p>\n<p>So far, several DC-motor models and the three-phase motors permanent magnet synchronous motor (PMSM),\nsynchronous reluctance motor (SynRM), squirrel cage induction motor (SCIM) and doubly-fed induction\nmotor (DFIM) are available.\nBeside electrical motors, also converters and load models are implemented. The converters can be driven by means of a duty cycle (continuous mode) or\nswitching commands (discrete mode).\nThe figure shows the basic scheme of the converter, motor and load.</p>\n<h3>Physical Structure of the Environment's Components</h3>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd7c8615ba70845829bb57204e2cd57c1e0b956a/646f63732f706c6f74732f53434d4c5f53657474696e672e737667\"></p>\n<h3>Control Flow of a Step Cycle of the Environment</h3>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b993e048a9c02cb829a7df203c80ea4f291a8859/646f63732f706c6f74732f4379636c65536368656d652e737667\"></p>\n<h3>Citation</h3>\n<p>A whitepaper for this framework is available under <a href=\"https://arxiv.org/abs/1910.09434\" rel=\"nofollow\">arxiv.org/abs/1910.09434\n</a>. Please use the following BibTeX entry for citing us:</p>\n<pre><code>@misc{traue2019reinforcement,\n    title={Towards a Reinforcement Learning Environment Toolbox for Intelligent Electric Motor Control},\n    author={Arne Traue and Gerrit Book and Wilhelm Kirchg\u00e4ssner and Oliver Wallscheid},\n    year={2019},\n    eprint={1910.09434},\n    archivePrefix={arXiv},\n    primaryClass={eess.SY}\n}\n</code></pre>\n<h3>Installing</h3>\n<ul>\n<li>Install gym-electric-motor from PyPI (recommended):</li>\n</ul>\n<pre><code>pip install gym-electric-motor\n</code></pre>\n<ul>\n<li>Install from Github source:</li>\n</ul>\n<pre><code>git clone git@github.com:upb-lea/gym-electric-motor.git \ncd gym-electric-motor\n# Then either\npython setup.py install\n# or alternatively\npip install -e .\n</code></pre>\n<h3>Authors</h3>\n<p>Praneeth Balakrishna,\nGerrit Book,\nWilhelm Kirchg\u00e4ssner,\nMaximilian Schenke,\nArne Traue,\nOliver Wallscheid</p>\n<h3>Getting started</h3>\n<p>Like every gym environment, the basic user interface consists of four main functions.</p>\n<ul>\n<li>\n<p><code>import gym_electric_motor as gem</code><br>\nImport of the package.</p>\n</li>\n<li>\n<p><code>env = gem.make(environment-id, **kwargs)</code><br>\nReturns an instantiated motor environment. Call this function at the beginning.\nThe <code>gem.make()</code> method is equal to the <code>gym.make()</code>. By using <code>gem.make()</code>you can avoid importing gym additionally.</p>\n</li>\n<li>\n<p><code>(initial_state, initial_reference) = env.reset()</code><br>\nResets the motor. This includes a new initial state and new reference trajectories.\nCall this function before a new episode starts.</p>\n</li>\n<li>\n<p><code>(state, reference), reward, done, _ = env.step(action)</code><br>\nSimulate one single time step on the motor with an action.\nCall this function iteratively until termination is reached.</p>\n</li>\n<li>\n<p><code>env.render()</code><br>\nUpdate the visualization of the motor states.</p>\n</li>\n</ul>\n<h3>GEM Make Call</h3>\n<p>The make function takes the environment-ids and several constructor arguments.\nEvery environment also works without further parameters with default values.\nThese default parameters can be looked up in the API-documentation of every GEM-environment.\nWith the environment-id you select a certain motor type and action type (continuous or discrete) and with the further\nconstructor arguments you can parametrize the environment to your control problem.</p>\n<h5>Environment Ids</h5>\n<ul>\n<li>\n<p>DC Motors</p>\n<ul>\n<li>\n<p><code>'DcExtExCont-v1'</code><br>\nExternally excited DC motor with continuous actions.</p>\n</li>\n<li>\n<p><code>'DcExtExDisc-v1'</code><br>\nExternally excited DC motor with discrete actions.</p>\n</li>\n<li>\n<p><code>'DcPermExCont-v1'</code><br>\nPermanently excited DC motor with continuous actions.</p>\n</li>\n<li>\n<p><code>'DcPermexDisc-v1'</code><br>\nPermanently excited DC motor with discrete actions.</p>\n</li>\n<li>\n<p><code>'DcShuntCont-v1'</code><br>\nDC shunt motor with continuous actions.</p>\n</li>\n<li>\n<p><code>'DcShuntDisc-v1'</code><br>\nDC shunt motor with discrete actions.</p>\n</li>\n<li>\n<p><code>'DcSeriesCont-v1'</code><br>\nDC series motor with continuous actions.</p>\n</li>\n<li>\n<p><code>'DcSeriesDisc-v1'</code><br>\nDC series motor with discrete actions.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Synchronous Motors</p>\n<ul>\n<li>\n<p><code>'PMSMCont-v1'</code>:<br>\nPermanent magnet synchronous motor with continuous actions.</p>\n</li>\n<li>\n<p><code>'PMSMDisc-v1'</code>:<br>\nPermanent magnet synchronous motor with discrete actions.</p>\n</li>\n<li>\n<p><code>'SynRMCont-v1'</code>:<br>\nSynchronous reluctance motor with continuous actions.</p>\n</li>\n<li>\n<p><code>'SynRMDisc-v1'</code>:<br>\nSynchronous reluctance motor with discrete actions.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Induction Motors</p>\n<ul>\n<li>\n<p><code>'SCIMCont-v1'</code>:<br>\nSquirrel cage induction motor with continuous actions.</p>\n</li>\n<li>\n<p><code>'SCIMDisc-v1'</code>:<br>\nSquirrel cage induction motor with discrete actions.</p>\n</li>\n<li>\n<p><code>'DFIMCont-v1'</code>:<br>\nDoubly fed induction motor with continuous actions.</p>\n</li>\n<li>\n<p><code>'DFIMDisc-v1'</code>:<br>\nDoubly fed induction motor with discrete actions.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Make Keyword-Arguments</h4>\n<p>Using the keyword arguments in the <code>gem.make(id, **kwargs)</code> function you can select different function modules for the\nenvironment and parametrize these modules.\nThe main level modules of each GEM-environment consists of four function modules:</p>\n<ul>\n<li>Physical System\n<ul>\n<li>keyword: <code>physical_system</code></li>\n<li>Specification and simulation of the system model.</li>\n</ul>\n</li>\n<li>Reference Generator\n<ul>\n<li>keyword: <code>reference_generator</code></li>\n<li>Generation of references that the physical system has to follow.</li>\n</ul>\n</li>\n<li>Reward Function\n<ul>\n<li>keyword: <code>reward_function</code></li>\n<li>Reward calculation based on the current state and reference.</li>\n</ul>\n</li>\n<li>Visualization\n<ul>\n<li>keyword: <code>visualization</code></li>\n<li>Visualization of the physical systems state, reference and rewards.</li>\n</ul>\n</li>\n<li>State Filter\n<ul>\n<li>keyword: <code>state_filter</code></li>\n<li>Selection of states that shall be shown to the agent.</li>\n</ul>\n</li>\n</ul>\n<p>These function modules can be selected in three ways:</p>\n<ul>\n<li>\n<p>Passing a keystring (and further keyword arguments for the class) :</p>\n<ul>\n<li><code>reference_generator='SinusoidalReference', amplitude_range=(0.2, 0.8)</code></li>\n</ul>\n</li>\n<li>\n<p>Passing a class pointer (and further keyword arguments for the class)</p>\n<ul>\n<li><code>reference_generator=SinusoidalReferenceGenerator, amplitude_range=(0.2,0.8)</code></li>\n</ul>\n</li>\n<li>\n<p>Passing an instantiated object</p>\n<ul>\n<li><code>reference_generator = SinusoidalReferenceGenerator(amplitude_range=(0.2,0.8)</code></li>\n</ul>\n</li>\n</ul>\n<p>Furthermore, the internal function modules of the physical systems like the converter, motor, load can be selected in\nthe make keyword-arguments in the same way.</p>\n<p>The available modules and specific keyword-arguments for each module can be looked up in the API-documentation.</p>\n<h3>Reset</h3>\n<p>The reset function determines new references, new initial values and resets the visualization.\nCall this function before a new episode begins.\nThe parameters of the motor, converter and load will be those during instantiation.</p>\n<h3>Step</h3>\n<p>This function performs one action on the environment for one time step.\nIt simulates the motor and needs to be called in every time step. It takes the action as parameter only.\nFirst the input voltage to the motor from the converter is determined and afterwards an integrator is used to compute\nthe next state.\nEventually, the reward is evaluated and returned together with the next observation and a flag indicating termination.\nSeveral reward functions are available.</p>\n<h3>Render</h3>\n<p>The visualization contains graphs of the motor quantities 'speed, voltages, currents, torque' for one episode.\nWhat should be shown is to be specified in the configuration-parameter.\nThe quantities that should be displayed can be specified in the constructor-parameters.\nAll visualizations are optional and recommended to be disabled for increased speed of training.</p>\n<h3>Examples</h3>\n<ul>\n<li>\n<p>Conventional PI controller as speed controller on a dc series motor <a href=\"examples/pi_series_omega_control.py\" rel=\"nofollow\">(jump to source)</a>.</p>\n</li>\n<li>\n<p>Training and testing of a <a href=\"https://github.com/keras-rl/keras-rl\" rel=\"nofollow\">Keras-rl</a> DDPG-Agent as a speed controller on a dc series motor <a href=\"examples/ddpg_series_omega_control.py\" rel=\"nofollow\">(jump to source)</a>.</p>\n</li>\n</ul>\n<h3>Physical System Models</h3>\n<p>The following electrical motor , converter and mechanical load models are included. More detailed descriptions can be found in the corresponding classes.</p>\n<h5>Motor Models</h5>\n<p>The following motor models are included:</p>\n<p>Four DC motors:</p>\n<ul>\n<li>permanently excited motor</li>\n<li>externally excited motor</li>\n<li>series motor</li>\n<li>shunt motor</li>\n</ul>\n<p>Two three phase motors:</p>\n<ul>\n<li>PMSM (permanent magnet synchronous motor)</li>\n<li>SynRM (synchronous reluctance motor)</li>\n</ul>\n<p>Two variants of the induction motor:</p>\n<ul>\n<li>SCIM (squirrel cage induction motor)</li>\n<li>DFIM (doubly fed induction motor)</li>\n</ul>\n<h5>Converter</h5>\n<p>Following converters are included:</p>\n<ul>\n<li>\n<p>1 quadrant converter (1QC)</p>\n</li>\n<li>\n<p>2 quadrant converter (2QC) as an asymmetric half bridge with both current polarities</p>\n</li>\n<li>\n<p>4 quadrant converter (4QC)</p>\n</li>\n<li>\n<p>B6 Bridge Converter (B6C)</p>\n</li>\n</ul>\n<p>All converters can consider interlocking times and a dead time of one sampling interval.\nFurthermore, they can be controlled with a discrete action space or a continuous action space.</p>\n<p>Discrete actions are the direct switching states of the transistors.\nContinuous actions are the duty cycles for a pulse width modulation on the transistors.</p>\n<h5>Load</h5>\n<p>The load model consists of a quadratic load function, with user defined coefficients.\nFurthermore the moment of inertia of the load attached to the motor can be specified.</p>\n<h3>Notes about the states and value ranges</h3>\n<p>The included states for each motor are summarized and briefly described in the <a href=\"visualizations/motor_dashboard.html\" rel=\"nofollow\">Motor Dashboard</a>.\nEvery state that can be plotted can also be used in the state filter or as observed state.\nThe actions are basically understood as the desired duty cycles. The actual applied voltage can be taken from the observations.\nThe observations are normalized to their physical limits that can be accessed with <code>env.limits</code>.\nTherefore, all values are typically in a range of [0, 1] or [-1, 1] without limit violation.</p>\n<h3>Notes about the Parameters</h3>\n<p>All nominal values of voltages and currents are DC values in the case of a DC motor and peak phase values for the PMSM.\nTherefore, data sheet values for line voltage and phase currents of a PMSM has to be transformed with:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09f093df9e2d28ac174ca77adcce57d81d39d825/646f63732f706c6f74732f766f6c746167657472616e73666f726d6174696f6e2e737667\"></p>\n<p>Furthermore, the angular velocity is the mechanical one and not the electrical:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a37afa1ed8897b2515407cf46f8983a52484651e/646f63732f706c6f74732f6f6d6567616d652e737667\"></p>\n<p>The mechanical one is needed for speed controller.\nThe included angle is the electrical one due to its usage in the rotational transformation for three phase motors.</p>\n<h3>Running Unit Tests with Pytest</h3>\n<p>To run the unit tests ''pytest'' is required.\nAll tests can be found in the ''tests'' folder.\nExecute pytest in the project's root folder:</p>\n<pre><code>&gt;&gt;&gt; pytest\n</code></pre>\n<p>or with test coverage:</p>\n<pre><code>&gt;&gt;&gt; pytest --cov=./\n</code></pre>\n<p>All tests shall pass.</p>\n\n          </div>"}, "last_serial": 7138033, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "05fbe0650c39ea1c1f2ec023e6448a21", "sha256": "544847eaab4da6edc4eda2173bea4a578cfbab4409f546c3dca520323b819f9c"}, "downloads": -1, "filename": "gym_electric_motor-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "05fbe0650c39ea1c1f2ec023e6448a21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2036, "upload_time": "2019-10-21T14:18:48", "upload_time_iso_8601": "2019-10-21T14:18:48.390788Z", "url": "https://files.pythonhosted.org/packages/07/67/f126488b6c6f2547536e1dae0865e9af9431934dd56b83c859c0b27fa575/gym_electric_motor-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bf2cd48bc40e88a617d02648f833f75", "sha256": "5995f0d885d2cecc63f93e11c86021064aa67a6e560234cb36e8949a04ac4ead"}, "downloads": -1, "filename": "gym_electric_motor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4bf2cd48bc40e88a617d02648f833f75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3211, "upload_time": "2019-10-21T14:18:51", "upload_time_iso_8601": "2019-10-21T14:18:51.838779Z", "url": "https://files.pythonhosted.org/packages/10/c7/3afe5d4fe0201298b5e2f07e4b1838dd70507337c44e54a6e3cb3024ccad/gym_electric_motor-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f3940023e8b8eb9355dea85b1ead65ef", "sha256": "d8ee5bd123d46de069225d8399e200b4b71549ba8dd8584c3558d7c4e496ef8d"}, "downloads": -1, "filename": "gym_electric_motor-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f3940023e8b8eb9355dea85b1ead65ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2054, "upload_time": "2020-02-04T10:21:21", "upload_time_iso_8601": "2020-02-04T10:21:21.816195Z", "url": "https://files.pythonhosted.org/packages/87/58/1df8c7f6a29a9d79b06e9fc788b29bd155c8a2b40067ed9d7b0d53d0a7f4/gym_electric_motor-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "77af00e08c9424a9e09fdc8509709e61", "sha256": "7046b3b849ba25de134ece107dc8a124becaee8f2e7067887e91cfb359b1dbbb"}, "downloads": -1, "filename": "gym_electric_motor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "77af00e08c9424a9e09fdc8509709e61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4407, "upload_time": "2020-02-04T10:21:23", "upload_time_iso_8601": "2020-02-04T10:21:23.537409Z", "url": "https://files.pythonhosted.org/packages/1f/40/7406398e537582b55702f7f054219ac49582867cc7137ffea28baed1b117/gym_electric_motor-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "64a8050cee563dc74fb482c6a6ed87ea", "sha256": "4f7c1922ce77a4c2745e0a3d2e464ed913a4ee992a283c37dacdf780d2939dbe"}, "downloads": -1, "filename": "gym_electric_motor-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "64a8050cee563dc74fb482c6a6ed87ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122504, "upload_time": "2020-02-08T10:14:47", "upload_time_iso_8601": "2020-02-08T10:14:47.385530Z", "url": "https://files.pythonhosted.org/packages/20/df/f29e9445364804ebf612ff738b83e59c69bf0fe3827e1e4d379542253ca6/gym_electric_motor-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "992a43d179ea82a8b721f70fb0b2acf9", "sha256": "51c2f09361e5689e774d83fc3010088dc97459d05078b0a474ca0cae416ee24b"}, "downloads": -1, "filename": "gym_electric_motor-0.0.4.tar.gz", "has_sig": false, "md5_digest": "992a43d179ea82a8b721f70fb0b2acf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 95727, "upload_time": "2020-02-08T10:14:49", "upload_time_iso_8601": "2020-02-08T10:14:49.490781Z", "url": "https://files.pythonhosted.org/packages/54/96/8a6214c97ddf8b19336929b04b10600e51f9b127c57b2804f24f1fbff8c2/gym_electric_motor-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "ac083c74c13cd65bb0c0a9d7b0131186", "sha256": "a434454d6495835e0aadd52a193bd72aec4fc69c4bb165c0e0c23bcfb6d52eb3"}, "downloads": -1, "filename": "gym_electric_motor-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ac083c74c13cd65bb0c0a9d7b0131186", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 131241, "upload_time": "2020-04-24T07:17:21", "upload_time_iso_8601": "2020-04-24T07:17:21.383519Z", "url": "https://files.pythonhosted.org/packages/bb/63/e569c4722e1d8bc8cae5a74ffe88238056756732647bcd3120e639455fa7/gym_electric_motor-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95e495e299a41e3753bc2227d3a942db", "sha256": "5be4599274806cedcf36fefc2746592d6ea0fb03558a6ba8fdc9315a0de996b9"}, "downloads": -1, "filename": "gym_electric_motor-0.1.0.tar.gz", "has_sig": false, "md5_digest": "95e495e299a41e3753bc2227d3a942db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100630, "upload_time": "2020-04-24T07:17:23", "upload_time_iso_8601": "2020-04-24T07:17:23.051877Z", "url": "https://files.pythonhosted.org/packages/1d/89/63c16d44bbc1f040160200b06433385d384d81a8356888fddfd76adb879c/gym_electric_motor-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ed52799f7a268c86882576ef1c9d73ef", "sha256": "e8ba29b6c5386d09fa50885031db4e5fa3bea322403e48a7a69bd8f23025218e"}, "downloads": -1, "filename": "gym_electric_motor-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ed52799f7a268c86882576ef1c9d73ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 131276, "upload_time": "2020-04-29T09:36:03", "upload_time_iso_8601": "2020-04-29T09:36:03.700305Z", "url": "https://files.pythonhosted.org/packages/0e/ec/34d75b645d4c4f062d3c3fe95386d2a95ddd3e20722614db17aacc6aa3bd/gym_electric_motor-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5a6d244fda36ead4924d9295a947a32", "sha256": "b811c18ac13fe07c7b2fbead2ca690f94f43c7bbccdffc5227caed10bc5758dd"}, "downloads": -1, "filename": "gym_electric_motor-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e5a6d244fda36ead4924d9295a947a32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100850, "upload_time": "2020-04-29T09:36:05", "upload_time_iso_8601": "2020-04-29T09:36:05.919245Z", "url": "https://files.pythonhosted.org/packages/e1/cf/7527f18009abc45b1a3447d69d324b4b567c0a5be6aaf1ed28d9689a9c47/gym_electric_motor-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f9601861cb93742c23cdf296636fcbf1", "sha256": "264b8c9f9b986c5c547b486961c642b8314647195fb9ed56431c6a3d080cf64e"}, "downloads": -1, "filename": "gym_electric_motor-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f9601861cb93742c23cdf296636fcbf1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 141164, "upload_time": "2020-04-30T15:02:11", "upload_time_iso_8601": "2020-04-30T15:02:11.844327Z", "url": "https://files.pythonhosted.org/packages/9e/34/13223c7fd5348ee09649aa20747c1fe8a02385c351dc40c0aa74bae61aa2/gym_electric_motor-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe719a0e2a266de9995ef695ccfa8709", "sha256": "674f95f9b792765198b41bf70ea1382af7027af014db8116735deb174f53bba6"}, "downloads": -1, "filename": "gym_electric_motor-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fe719a0e2a266de9995ef695ccfa8709", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108961, "upload_time": "2020-04-30T15:02:13", "upload_time_iso_8601": "2020-04-30T15:02:13.734027Z", "url": "https://files.pythonhosted.org/packages/5d/8a/12a9548d87fa17f9bf1ff55056ab103e2340f037d68f9fda9b9380d1ab0a/gym_electric_motor-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f9601861cb93742c23cdf296636fcbf1", "sha256": "264b8c9f9b986c5c547b486961c642b8314647195fb9ed56431c6a3d080cf64e"}, "downloads": -1, "filename": "gym_electric_motor-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f9601861cb93742c23cdf296636fcbf1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 141164, "upload_time": "2020-04-30T15:02:11", "upload_time_iso_8601": "2020-04-30T15:02:11.844327Z", "url": "https://files.pythonhosted.org/packages/9e/34/13223c7fd5348ee09649aa20747c1fe8a02385c351dc40c0aa74bae61aa2/gym_electric_motor-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe719a0e2a266de9995ef695ccfa8709", "sha256": "674f95f9b792765198b41bf70ea1382af7027af014db8116735deb174f53bba6"}, "downloads": -1, "filename": "gym_electric_motor-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fe719a0e2a266de9995ef695ccfa8709", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108961, "upload_time": "2020-04-30T15:02:13", "upload_time_iso_8601": "2020-04-30T15:02:13.734027Z", "url": "https://files.pythonhosted.org/packages/5d/8a/12a9548d87fa17f9bf1ff55056ab103e2340f037d68f9fda9b9380d1ab0a/gym_electric_motor-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:02 2020"}