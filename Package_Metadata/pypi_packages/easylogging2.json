{"info": {"author": "ALI B OTHMAN", "author_email": "alosh.othman55@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# easylogging2\n###### Simple and Easy Logging lib for python V2\n\n[![easylogging2](https://img.shields.io/badge/build-passing-brightgreen.svg)]()\n[![version](https://img.shields.io/badge/version-2.0.5-green.svg)]()\n[![status](https://img.shields.io/badge/status-stable-brightgreen.svg)]()\n[![python](https://img.shields.io/badge/python-3-blue.svg)](http://www.python.org/download/)\n[![windows](https://img.shields.io/badge/windows-tested-brightgreen.svg)]()\n[![linux](https://img.shields.io/badge/linux-tested-brightgreen.svg)]()\n[![license](https://img.shields.io/badge/license-GNU-blue.svg)](https://github.com/AI35/easylogging2/blob/master/LICENSE)\n\n## REQUIREMENTS\n- Python-3 --> http://www.python.org/download/\n\n## Notes\n- After 9 months this library has returned better and more useful.\n- This library is very simple so it is not better than a logging library and it is derived from it.\n- This library was created because I wanted a simple and easy logging library.\n\n## Installation\n\n- Clone this repo:\n\n\t```\n\t$ git clone https://github.com/AI35/easylogging2\n\t```\n- Using pip:\n\n\t```\n\t$ pip install easylogging2\n\t```\n\n## Usage\n- First you need import lib and Set name :\n  ```\n    import easylogging2\n\n    log = easylogging2.logname(__file__)\n  ```\n- Use the functions you need:\n  - log.critical(msg)\n  - log.error(msg, exc_info) **default: exc_info=False**\n  - log.warning(msg)\n  - log.info(msg)\n  - log.debug(msg)\n- You can start logging from Cmd or PowerShell :\n  ```\n    $ Python yourfile.py --logging --logfile\n\n    usage: youefile.py [--logging] [--logfile]\n\n    optional arguments:\n      --logging            Display log in Console\n      --logfile            Create log file\n  ```\n- After first run you will see new file **logging.conf** :\n  - Change **level** number to display log in console **without** --logging (0 display all level).\n  \t```\n  \t  level=50\n  \t```\n  - Change **file_level** number to set level in log file **with** --logfile (50 hide all level).\n  \t###### - This option work on --logfile without use --logging (if you use --logging ,The file will write all levels)\n  \t```\n   \t  file_level=0\n  \t```\n - Show and hide error info from **logging.conf** :\n  \t###### - Show Error info (easylogging.error(msg, exc_info))\n\t###### - True or False or None\n\t###### - * (None) means that exc_info takes the value entered from the user, example: easylogging.error(msg, exc_info=True)\n  \t```\n  \t  exc_info=None\n  \t```\n\n - You can run the **test.py** file to see how it works.\n - You can use all logging functions from this lib (ex: easylogging.logging.**function**)\n\n - **formatter** :\n    ###### - You can use all defaults logging formats.\n  \t```\n\t  formatter = %(asctime)s - %(name)s - %(levelname)s - %(message)s\n\t```\n\t###### - From logging formatter function :\n\t```\n    Formatter instances are used to convert a LogRecord to text.\n    Formatters need to know how a LogRecord is constructed. They are\n    responsible for converting a LogRecord to (usually) a string which can\n    be interpreted by either a human or an external system. The base Formatter\n    allows a formatting string to be specified. If none is supplied, the\n    the style-dependent default value, \"%(message)s\", \"{message}\", or\n    \"${message}\", is used.\n    The Formatter can be initialized with a format string which makes use of\n    knowledge of the LogRecord attributes - e.g. the default value mentioned\n    above makes use of the fact that the user's message and arguments are pre-\n    formatted into a LogRecord's message attribute. Currently, the useful\n    attributes in a LogRecord are described by:\n    %(name)s            Name of the logger (logging channel)\n    %(levelno)s         Numeric logging level for the message (DEBUG, INFO,\n                        WARNING, ERROR, CRITICAL)\n    %(levelname)s       Text logging level for the message (\"DEBUG\", \"INFO\",\n                        \"WARNING\", \"ERROR\", \"CRITICAL\")\n    %(pathname)s        Full pathname of the source file where the logging\n                        call was issued (if available)\n    %(filename)s        Filename portion of pathname\n    %(module)s          Module (name portion of filename)\n    %(lineno)d          Source line number where the logging call was issued\n                        (if available)\n    %(funcName)s        Function name\n    %(created)f         Time when the LogRecord was created (time.time()\n                        return value)\n    %(asctime)s         Textual time when the LogRecord was created\n    %(msecs)d           Millisecond portion of the creation time\n    %(relativeCreated)d Time in milliseconds when the LogRecord was created,\n                        relative to the time the logging module was loaded\n                        (typically at application startup time)\n    %(thread)d          Thread ID (if available)\n    %(threadName)s      Thread name (if available)\n    %(process)d         Process ID (if available)\n    %(message)s         The result of record.getMessage(), computed just as\n                        the record is emitted\n\t```\n## Changlog\n### V 2.0.5 Some fixes:\n###### - Make some variables private.\n\n### V 2.0.1 Performance:\n###### - Increase performance.\n\n##\n - Level table :\n\n    | Level  | Numeric value |\n    | ------------- | ------------- |\n    | CRITICAL  | < 50  |\n    | ERROR  | < 40  |\n    | WARNING  | < 30  |\n    | INFO  | < 20  |\n    | DEBUG  | < 10  |\n    | NOTSET  | 0  |\n\n\n\n\n## LICENSE\n```\nCopyright 2019 LinePY - ALI B OTHMAN(AI35), Inc.\n\neasylogging2\n\n   Licensed under the GNU License , you may not use this\n   file except in compliance with the License.\n   You may obtain a copy of the License at :\n\n   https://github.com/AI35/easylogging2/blob/master/LICENSE\n```\n###### ALI .B .OTH - ORG : LinePY  \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AI35/easylogging2", "keywords": "logging logger log python", "license": "GNU v3.0", "maintainer": "", "maintainer_email": "", "name": "easylogging2", "package_url": "https://pypi.org/project/easylogging2/", "platform": "", "project_url": "https://pypi.org/project/easylogging2/", "project_urls": {"Bug Reports": "https://github.com/AI35/easylogging2/issues", "Homepage": "https://github.com/AI35/easylogging2", "Source": "https://github.com/AI35/easylogging2"}, "release_url": "https://pypi.org/project/easylogging2/2.0.5/", "requires_dist": ["configparser (>=3.5.0)"], "requires_python": ">=3", "summary": "Simple Python logging lib", "version": "2.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>easylogging2</h1>\n<h6>Simple and Easy Logging lib for python V2</h6>\n<p><a href=\"\" rel=\"nofollow\"><img alt=\"easylogging2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/036675e54b7104cf9270c5746467dc9d4ca8aafb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d627269676874677265656e2e737667\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8a8d59ea9a71b6e7df1154512c0215972692618/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657273696f6e2d322e302e352d677265656e2e737667\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f3d599a2e469188813548940699131ff2492b36/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374617475732d737461626c652d627269676874677265656e2e737667\"></a>\n<a href=\"http://www.python.org/download/\" rel=\"nofollow\"><img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab19740527af5cf7db635873a78fc8895b2ea71e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332d626c75652e737667\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"windows\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d0157744047ebf74b1f2ca16f4cbb8fb0f5a11b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f77696e646f77732d7465737465642d627269676874677265656e2e737667\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"linux\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b7ad4ec508bc70fad350eb4850258c99c30e20d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c696e75782d7465737465642d627269676874677265656e2e737667\"></a>\n<a href=\"https://github.com/AI35/easylogging2/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e27e6331d3f74b0a406edc5d745a4a65c1cf4cca/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d474e552d626c75652e737667\"></a></p>\n<h2>REQUIREMENTS</h2>\n<ul>\n<li>Python-3 --&gt; <a href=\"http://www.python.org/download/\" rel=\"nofollow\">http://www.python.org/download/</a></li>\n</ul>\n<h2>Notes</h2>\n<ul>\n<li>After 9 months this library has returned better and more useful.</li>\n<li>This library is very simple so it is not better than a logging library and it is derived from it.</li>\n<li>This library was created because I wanted a simple and easy logging library.</li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>\n<p>Clone this repo:</p>\n<pre><code> $ git clone https://github.com/AI35/easylogging2\n</code></pre>\n</li>\n<li>\n<p>Using pip:</p>\n<pre><code> $ pip install easylogging2\n</code></pre>\n</li>\n</ul>\n<h2>Usage</h2>\n<ul>\n<li>\n<p>First you need import lib and Set name :</p>\n<pre><code>  import easylogging2\n\n  log = easylogging2.logname(__file__)\n</code></pre>\n</li>\n<li>\n<p>Use the functions you need:</p>\n<ul>\n<li>log.critical(msg)</li>\n<li>log.error(msg, exc_info) <strong>default: exc_info=False</strong></li>\n<li>log.warning(msg)</li>\n<li>log.info(msg)</li>\n<li>log.debug(msg)</li>\n</ul>\n</li>\n<li>\n<p>You can start logging from Cmd or PowerShell :</p>\n<pre><code>  $ Python yourfile.py --logging --logfile\n\n  usage: youefile.py [--logging] [--logfile]\n\n  optional arguments:\n    --logging            Display log in Console\n    --logfile            Create log file\n</code></pre>\n</li>\n<li>\n<p>After first run you will see new file <strong>logging.conf</strong> :</p>\n<ul>\n<li>Change <strong>level</strong> number to display log in console <strong>without</strong> --logging (0 display all level).\n<pre><code>  level=50\n</code></pre>\n</li>\n<li>Change <strong>file_level</strong> number to set level in log file <strong>with</strong> --logfile (50 hide all level).\n<h6>- This option work on --logfile without use --logging (if you use --logging ,The file will write all levels)</h6>\n<pre><code>  file_level=0\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Show and hide error info from <strong>logging.conf</strong> :</p>\n<h6>- Show Error info (easylogging.error(msg, exc_info))</h6>\n<h6>- True or False or None</h6>\n<h6>- * (None) means that exc_info takes the value entered from the user, example: easylogging.error(msg, exc_info=True)</h6>\n<pre><code>  exc_info=None\n</code></pre>\n</li>\n<li>\n<p>You can run the <strong>test.py</strong> file to see how it works.</p>\n</li>\n<li>\n<p>You can use all logging functions from this lib (ex: easylogging.logging.<strong>function</strong>)</p>\n</li>\n<li>\n<p><strong>formatter</strong> :</p>\n<h6>- You can use all defaults logging formats.</h6>\n<pre><code>  formatter = %(asctime)s - %(name)s - %(levelname)s - %(message)s\n</code></pre>\n<h6>- From logging formatter function :</h6>\n<pre><code>Formatter instances are used to convert a LogRecord to text.\nFormatters need to know how a LogRecord is constructed. They are\nresponsible for converting a LogRecord to (usually) a string which can\nbe interpreted by either a human or an external system. The base Formatter\nallows a formatting string to be specified. If none is supplied, the\nthe style-dependent default value, \"%(message)s\", \"{message}\", or\n\"${message}\", is used.\nThe Formatter can be initialized with a format string which makes use of\nknowledge of the LogRecord attributes - e.g. the default value mentioned\nabove makes use of the fact that the user's message and arguments are pre-\nformatted into a LogRecord's message attribute. Currently, the useful\nattributes in a LogRecord are described by:\n%(name)s            Name of the logger (logging channel)\n%(levelno)s         Numeric logging level for the message (DEBUG, INFO,\n                    WARNING, ERROR, CRITICAL)\n%(levelname)s       Text logging level for the message (\"DEBUG\", \"INFO\",\n                    \"WARNING\", \"ERROR\", \"CRITICAL\")\n%(pathname)s        Full pathname of the source file where the logging\n                    call was issued (if available)\n%(filename)s        Filename portion of pathname\n%(module)s          Module (name portion of filename)\n%(lineno)d          Source line number where the logging call was issued\n                    (if available)\n%(funcName)s        Function name\n%(created)f         Time when the LogRecord was created (time.time()\n                    return value)\n%(asctime)s         Textual time when the LogRecord was created\n%(msecs)d           Millisecond portion of the creation time\n%(relativeCreated)d Time in milliseconds when the LogRecord was created,\n                    relative to the time the logging module was loaded\n                    (typically at application startup time)\n%(thread)d          Thread ID (if available)\n%(threadName)s      Thread name (if available)\n%(process)d         Process ID (if available)\n%(message)s         The result of record.getMessage(), computed just as\n                    the record is emitted\n</code></pre>\n</li>\n</ul>\n<h2>Changlog</h2>\n<h3>V 2.0.5 Some fixes:</h3>\n<h6>- Make some variables private.</h6>\n<h3>V 2.0.1 Performance:</h3>\n<h6>- Increase performance.</h6>\n<h2></h2>\n<ul>\n<li>\n<p>Level table :</p>\n<table>\n<thead>\n<tr>\n<th>Level</th>\n<th>Numeric value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CRITICAL</td>\n<td>&lt; 50</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>&lt; 40</td>\n</tr>\n<tr>\n<td>WARNING</td>\n<td>&lt; 30</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>&lt; 20</td>\n</tr>\n<tr>\n<td>DEBUG</td>\n<td>&lt; 10</td>\n</tr>\n<tr>\n<td>NOTSET</td>\n<td>0</td>\n</tr></tbody></table>\n</li>\n</ul>\n<h2>LICENSE</h2>\n<pre><code>Copyright 2019 LinePY - ALI B OTHMAN(AI35), Inc.\n\neasylogging2\n\n   Licensed under the GNU License , you may not use this\n   file except in compliance with the License.\n   You may obtain a copy of the License at :\n\n   https://github.com/AI35/easylogging2/blob/master/LICENSE\n</code></pre>\n<h6>ALI .B .OTH - ORG : LinePY</h6>\n\n          </div>"}, "last_serial": 6564696, "releases": {"2.0.1": [{"comment_text": "", "digests": {"md5": "201331512130137e51ac3f69af4ed335", "sha256": "423866f118673c6c9a73afc296f3c4044dfb7e53c56bc5084352cf4aae78a014"}, "downloads": -1, "filename": "easylogging2-2.0.1.tar.gz", "has_sig": false, "md5_digest": "201331512130137e51ac3f69af4ed335", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3927, "upload_time": "2019-07-14T14:22:22", "upload_time_iso_8601": "2019-07-14T14:22:22.443980Z", "url": "https://files.pythonhosted.org/packages/e4/27/37a19937e6de269b608a7e5d20071f4ba8581c9e95fc16d54e66e44ec8f4/easylogging2-2.0.1.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "53d386a6e2fd249dc580c26772e54ed6", "sha256": "b06e3956bb9ee4a84f671c1f7a87363afe70df9c3d75676643f5a4b6ffe7d2f2"}, "downloads": -1, "filename": "easylogging2-2.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "53d386a6e2fd249dc580c26772e54ed6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4940, "upload_time": "2020-02-03T20:40:35", "upload_time_iso_8601": "2020-02-03T20:40:35.765833Z", "url": "https://files.pythonhosted.org/packages/a0/fc/8d77c16367d28b104d8036048428e97aeeabd8442aceaeef1cc56bf637a6/easylogging2-2.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17c21b1332c6acb4ad4bbea95616136b", "sha256": "d27a4a3b2d356f9e63a7f7ce9d7031c75cd66fb46f6b4310244d9fad632bfbae"}, "downloads": -1, "filename": "easylogging2-2.0.5.tar.gz", "has_sig": false, "md5_digest": "17c21b1332c6acb4ad4bbea95616136b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5065, "upload_time": "2020-02-03T20:40:37", "upload_time_iso_8601": "2020-02-03T20:40:37.400017Z", "url": "https://files.pythonhosted.org/packages/4e/d5/32069df2ae01e0786fb98de2fe4d34ffa85c98b7326952e5c73eb108c0a7/easylogging2-2.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "53d386a6e2fd249dc580c26772e54ed6", "sha256": "b06e3956bb9ee4a84f671c1f7a87363afe70df9c3d75676643f5a4b6ffe7d2f2"}, "downloads": -1, "filename": "easylogging2-2.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "53d386a6e2fd249dc580c26772e54ed6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4940, "upload_time": "2020-02-03T20:40:35", "upload_time_iso_8601": "2020-02-03T20:40:35.765833Z", "url": "https://files.pythonhosted.org/packages/a0/fc/8d77c16367d28b104d8036048428e97aeeabd8442aceaeef1cc56bf637a6/easylogging2-2.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17c21b1332c6acb4ad4bbea95616136b", "sha256": "d27a4a3b2d356f9e63a7f7ce9d7031c75cd66fb46f6b4310244d9fad632bfbae"}, "downloads": -1, "filename": "easylogging2-2.0.5.tar.gz", "has_sig": false, "md5_digest": "17c21b1332c6acb4ad4bbea95616136b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5065, "upload_time": "2020-02-03T20:40:37", "upload_time_iso_8601": "2020-02-03T20:40:37.400017Z", "url": "https://files.pythonhosted.org/packages/4e/d5/32069df2ae01e0786fb98de2fe4d34ffa85c98b7326952e5c73eb108c0a7/easylogging2-2.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:20 2020"}