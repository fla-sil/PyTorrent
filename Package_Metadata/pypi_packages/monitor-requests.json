{"info": {"author": "Dan Pozmanter", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing"], "description": "monitor requests\n================\n\n|Build Status| |PyPI|\n\nA tool to check for remote calls via the `requests`_ module.\n\nFind out which external apis your code is calling.\n\nOptionally:\n    * Find where calls are taking place.\n    * Capture the responses and response status codes.\n    * Filter by domain\n    * Run as a server for parallel tests\n\n2.x Notes:\n    * Now mocks the `send()` method on requests' HTTPAdapter class.\n    * Now `monitor-requests` instead of `MonitorRequests`\n\n**Installation**\n\n.. code:: bash\n\n    pip install monitor-requests\n\n**Usage**\n\n.. code:: python\n\n    import unittest\n    import monitor_requests\n    from example import example_method\n\n    class ExampleTestCase(unittest.TestCase):\n\n        @classmethod\n        def setUpClass(cls):\n            cls.monitor = monitor_requests.Monitor()\n\n        @classmethod\n        def tearDownClass(cls):\n            print('External calls for example:')\n            # Optionally pass tracebacks=False to skip outputing tracebacks\n            # Report will call .stop() by default.\n            cls.monitor.report(tracebacks=False)\n\n        def test_example_method(self):\n            result = example_method()\n            self.assertEqual(result.status_code, 200)\n\n    if __name__ == 'main':\n        unittest.main()\n\n\nTo filter what domains are captured:\n\n.. code:: python\n\n    # Only capture facebook and google requests:\n    monitor = monitor_requests.Monitor(\n        domains=['facebook\\.com', 'google\\.com']\n    )\n\nTo set this up inside a django test runner:\n(This will only work at the suite level if running tests in serial. Depending on your setup you may need to run with --parallel=1). Alternatively there are instructions further down on how to use `Server Moder` to push data asynchronously to an included `tornado`_ data server.\n\n.. code:: python\n\n    def run_suite(self, suite, **kwargs):\n        monitor = monitor_requests.Monitor()\n        test_result = super(ReelioTestRunner, self).run_suite(suite, **kwargs)\n        monitor.report()\n        return test_result\n\nTo set up inside a py.test session fixture:\n\n.. code:: python\n\n    @pytest.fixture(scope='session')\n    def session_fixture():\n        monitor = monitor_requests.Monitor()\n        yield\n        monitor.report()\n\nTo write to a file:\n\n.. code:: python\n\n        @classmethod\n        def tearDownClass(cls):\n            with open('output.txt', 'w') as f:\n                cls.monitor.report(output=f)\n\nFor finer tuned control over output:\n\n* Use `debug=True` to show urls, responses, and tracebacks.\n* Use `urls=True` to show urls.\n* Use `tracebacks=True` or `respones=True` to show tracebacks or responses (urls will be shown as well, as both tracebacks and responses are organized by url).\n\n***Server Mode***\n\nIf you want to activate monitor_requests for an entire test suite running parallel, you can run the included `tornado`_ server to persist request data:\n\n.. code:: bash\n\n    monitor_requests_server --port=9003\n\n.. code:: python\n\n    def run_suite(self, suite, **kwargs):\n        # Make sure to turn off mocking at the suit or session level.\n        monitor = monitor_requests.Monitor(server_port=9003, mocking=False)\n        test_result = super(ReelioTestRunner, self).run_suite(suite, **kwargs)\n        monitor.report()\n        return test_result\n\nYou will need to do additional calls in your TestCase classes:\n\n.. code:: python\n\n    class ExampleTestCase(unittest.TestCase):\n\n        @classmethod\n        def setUpClass(cls):\n            # Same port, and same domain filtering if applicable.\n            cls.monitor = monitor_requests.Monitor(server_port=9003)\n\n        @classmethod\n        def tearDownClass(cls):\n            # Make sure to stop the mocking in the tear down.\n            cls.monitor.stop()\n\nNote that here there is no tearDownClass and no call to either stop() or report().\nThat only happens at the session level.\n\n**Example Output**\n\nWith `debug=True`:\n\n\n.. code:: text\n\n    __________URLS__________\n\n    __________URL________\n    URL:      http://facebook.com?param=test\n    Methods:  GET\n    Requests: 1\n    ______Tracebacks_____\n    File \"example.py\", line 22, in <module>\n        run()\n      File \"example.py\", line 18, in run\n        get_function_fb()\n      File \"example.py\", line 12, in get_function_fb\n        return requests.get('http://facebook.com?param=test')\n    _______Responses______\n    <StatusCode>200</StatusCode>\n    <Content><!DOCTYPE html>\n    <html lang=\"en\" id=\"facebook\" class=\"no_js\">Etc/Etc</html></Content>\n\n    __________URL________\n    URL:      http://google.com\n    Methods:  GET\n    Requests: 1\n    ______Tracebacks_____\n    File \"example.py\", line 22, in <module>\n        run()\n      File \"example.py\", line 17, in run\n        get_function()\n      File \"example.py\", line 7, in get_function\n        return requests.get('http://google.com')\n    _______Responses______\n    <StatusCode>200</StatusCode>\n    <Content><!doctype html><html itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"en\">Etc/Etc</html></Content>\n\n    ___________Analysis__________\n\n    Total Requests: 2\n    Time (Seconds): 1.16714\n    URL Count:      2\n    Domain Count:   2\n    Domains:        facebook.com, google.com\n\nWith `debug=False`:\n\n\n.. code:: text\n\n    ___________Analysis__________\n\n    Total Requests: 2\n    Time (Seconds): 1.08454\n    URL Count:      2\n    Domain Count:   2\n    Domains:        facebook.com, google.com\n\n\n.. _requests: https://github.com/requests/requests\n.. _tornado: https://github.com/tornadoweb/tornado\n.. |Build Status| image:: https://travis-ci.org/danpozmanter/monitor_requests.svg?branch=master\n   :target: https://travis-ci.org/danpozmanter/monitor_requests\n.. |PyPI| image:: https://img.shields.io/pypi/v/monitor_requests.svg\n   :target: https://pypi.python.org/pypi/monitor_requests/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danpozmanter/monitor_requests", "keywords": "requests testing monitoring", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "monitor-requests", "package_url": "https://pypi.org/project/monitor-requests/", "platform": "", "project_url": "https://pypi.org/project/monitor-requests/", "project_urls": {"Homepage": "https://github.com/danpozmanter/monitor_requests"}, "release_url": "https://pypi.org/project/monitor-requests/2.1.1/", "requires_dist": null, "requires_python": "", "summary": "Check remote calls via request", "version": "2.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/danpozmanter/monitor_requests\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87119bcd95826a56110220d3ae4138defce27024/68747470733a2f2f7472617669732d63692e6f72672f64616e706f7a6d616e7465722f6d6f6e69746f725f72657175657374732e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/monitor_requests/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e8c6bb6b0a3185d9d04d2668b96cea436aca2b3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6f6e69746f725f72657175657374732e737667\"></a></p>\n<p>A tool to check for remote calls via the <a href=\"https://github.com/requests/requests\" rel=\"nofollow\">requests</a> module.</p>\n<p>Find out which external apis your code is calling.</p>\n<dl>\n<dt>Optionally:</dt>\n<dd><ul>\n<li>Find where calls are taking place.</li>\n<li>Capture the responses and response status codes.</li>\n<li>Filter by domain</li>\n<li>Run as a server for parallel tests</li>\n</ul>\n</dd>\n<dt>2.x Notes:</dt>\n<dd><ul>\n<li>Now mocks the <cite>send()</cite> method on requests\u2019 HTTPAdapter class.</li>\n<li>Now <cite>monitor-requests</cite> instead of <cite>MonitorRequests</cite></li>\n</ul>\n</dd>\n</dl>\n<p><strong>Installation</strong></p>\n<pre>pip install monitor-requests\n</pre>\n<p><strong>Usage</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">monitor_requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">example</span> <span class=\"kn\">import</span> <span class=\"n\">example_method</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUpClass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">monitor</span> <span class=\"o\">=</span> <span class=\"n\">monitor_requests</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tearDownClass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'External calls for example:'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Optionally pass tracebacks=False to skip outputing tracebacks</span>\n        <span class=\"c1\"># Report will call .stop() by default.</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">(</span><span class=\"n\">tracebacks</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_example_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">example_method</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'main'</span><span class=\"p\">:</span>\n    <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>To filter what domains are captured:</p>\n<pre><span class=\"c1\"># Only capture facebook and google requests:</span>\n<span class=\"n\">monitor</span> <span class=\"o\">=</span> <span class=\"n\">monitor_requests</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span>\n    <span class=\"n\">domains</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'facebook\\.com'</span><span class=\"p\">,</span> <span class=\"s1\">'google\\.com'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To set this up inside a django test runner:\n(This will only work at the suite level if running tests in serial. Depending on your setup you may need to run with \u2013parallel=1). Alternatively there are instructions further down on how to use <cite>Server Moder</cite> to push data asynchronously to an included <a href=\"https://github.com/tornadoweb/tornado\" rel=\"nofollow\">tornado</a> data server.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">run_suite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">suite</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">monitor</span> <span class=\"o\">=</span> <span class=\"n\">monitor_requests</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">()</span>\n    <span class=\"n\">test_result</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ReelioTestRunner</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run_suite</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">test_result</span>\n</pre>\n<p>To set up inside a py.test session fixture:</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s1\">'session'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">session_fixture</span><span class=\"p\">():</span>\n    <span class=\"n\">monitor</span> <span class=\"o\">=</span> <span class=\"n\">monitor_requests</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span>\n    <span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span>\n</pre>\n<p>To write to a file:</p>\n<pre><span class=\"nd\">@classmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">tearDownClass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'output.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>For finer tuned control over output:</p>\n<ul>\n<li>Use <cite>debug=True</cite> to show urls, responses, and tracebacks.</li>\n<li>Use <cite>urls=True</cite> to show urls.</li>\n<li>Use <cite>tracebacks=True</cite> or <cite>respones=True</cite> to show tracebacks or responses (urls will be shown as well, as both tracebacks and responses are organized by url).</li>\n</ul>\n<p><strong>*Server Mode*</strong></p>\n<p>If you want to activate monitor_requests for an entire test suite running parallel, you can run the included <a href=\"https://github.com/tornadoweb/tornado\" rel=\"nofollow\">tornado</a> server to persist request data:</p>\n<pre>monitor_requests_server --port<span class=\"o\">=</span><span class=\"m\">9003</span>\n</pre>\n<pre><span class=\"k\">def</span> <span class=\"nf\">run_suite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">suite</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Make sure to turn off mocking at the suit or session level.</span>\n    <span class=\"n\">monitor</span> <span class=\"o\">=</span> <span class=\"n\">monitor_requests</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"n\">server_port</span><span class=\"o\">=</span><span class=\"mi\">9003</span><span class=\"p\">,</span> <span class=\"n\">mocking</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">test_result</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ReelioTestRunner</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run_suite</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">test_result</span>\n</pre>\n<p>You will need to do additional calls in your TestCase classes:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUpClass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Same port, and same domain filtering if applicable.</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">monitor</span> <span class=\"o\">=</span> <span class=\"n\">monitor_requests</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"n\">server_port</span><span class=\"o\">=</span><span class=\"mi\">9003</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tearDownClass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Make sure to stop the mocking in the tear down.</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<p>Note that here there is no tearDownClass and no call to either stop() or report().\nThat only happens at the session level.</p>\n<p><strong>Example Output</strong></p>\n<p>With <cite>debug=True</cite>:</p>\n<pre>__________URLS__________\n\n__________URL________\nURL:      http://facebook.com?param=test\nMethods:  GET\nRequests: 1\n______Tracebacks_____\nFile \"example.py\", line 22, in &lt;module&gt;\n    run()\n  File \"example.py\", line 18, in run\n    get_function_fb()\n  File \"example.py\", line 12, in get_function_fb\n    return requests.get('http://facebook.com?param=test')\n_______Responses______\n&lt;StatusCode&gt;200&lt;/StatusCode&gt;\n&lt;Content&gt;&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\" id=\"facebook\" class=\"no_js\"&gt;Etc/Etc&lt;/html&gt;&lt;/Content&gt;\n\n__________URL________\nURL:      http://google.com\nMethods:  GET\nRequests: 1\n______Tracebacks_____\nFile \"example.py\", line 22, in &lt;module&gt;\n    run()\n  File \"example.py\", line 17, in run\n    get_function()\n  File \"example.py\", line 7, in get_function\n    return requests.get('http://google.com')\n_______Responses______\n&lt;StatusCode&gt;200&lt;/StatusCode&gt;\n&lt;Content&gt;&lt;!doctype html&gt;&lt;html itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"en\"&gt;Etc/Etc&lt;/html&gt;&lt;/Content&gt;\n\n___________Analysis__________\n\nTotal Requests: 2\nTime (Seconds): 1.16714\nURL Count:      2\nDomain Count:   2\nDomains:        facebook.com, google.com\n</pre>\n<p>With <cite>debug=False</cite>:</p>\n<pre>___________Analysis__________\n\nTotal Requests: 2\nTime (Seconds): 1.08454\nURL Count:      2\nDomain Count:   2\nDomains:        facebook.com, google.com\n</pre>\n\n          </div>"}, "last_serial": 4495498, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "fc2f5d762a9fbfa996acf8dd1cc65263", "sha256": "166d67f0b241f5f818cdfcd91e614ba9b7f93f5e355320e52b75f407a700dd9e"}, "downloads": -1, "filename": "monitor_requests-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fc2f5d762a9fbfa996acf8dd1cc65263", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9756, "upload_time": "2018-11-16T19:50:37", "upload_time_iso_8601": "2018-11-16T19:50:37.517149Z", "url": "https://files.pythonhosted.org/packages/8c/e3/5df5fd1e7c5cf5cb085600f416fe5fee15638ecc76cf7f159ed6d18e38d9/monitor_requests-2.0.0-py2.py3-none-any.whl", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "6267f2be4aeb61404261e8d87f9f1fa0", "sha256": "f082ef01e6c57fe3d3d2f15ec7778ecc9bd84a53b0403332094bd6acdc9fd2c2"}, "downloads": -1, "filename": "monitor_requests-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6267f2be4aeb61404261e8d87f9f1fa0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9749, "upload_time": "2018-11-16T21:33:05", "upload_time_iso_8601": "2018-11-16T21:33:05.034670Z", "url": "https://files.pythonhosted.org/packages/0a/71/66bf749f6e295a1e0b16178d50826e9e2fd2147ca2d8dcc1993515b57287/monitor_requests-2.0.1-py2.py3-none-any.whl", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "9c75a9eb45ae36d1cf8c1ba24ee0c7d4", "sha256": "75bcf92b0505042a3bae682dfd5af4c194b86f378d43fe1313eba5c8c0beffb4"}, "downloads": -1, "filename": "monitor_requests-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9c75a9eb45ae36d1cf8c1ba24ee0c7d4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9893, "upload_time": "2018-11-16T23:06:28", "upload_time_iso_8601": "2018-11-16T23:06:28.823484Z", "url": "https://files.pythonhosted.org/packages/19/4d/ccf04474e8bc5eca4e4afc1e7a81292311cd856a0c0459b853de67af1959/monitor_requests-2.1.0-py2.py3-none-any.whl", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "32a11870bc084c08de6c78ed553b20d3", "sha256": "bc218cce72405477cfa9804fc85bbb033b8c5261b432ca11dcbc1996f75c31fa"}, "downloads": -1, "filename": "monitor_requests-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32a11870bc084c08de6c78ed553b20d3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9937, "upload_time": "2018-11-16T23:56:09", "upload_time_iso_8601": "2018-11-16T23:56:09.357957Z", "url": "https://files.pythonhosted.org/packages/0f/10/26c6f5192c6eab929851738597478bcc45002aec655d8a0fd45a2d7a738f/monitor_requests-2.1.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "32a11870bc084c08de6c78ed553b20d3", "sha256": "bc218cce72405477cfa9804fc85bbb033b8c5261b432ca11dcbc1996f75c31fa"}, "downloads": -1, "filename": "monitor_requests-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32a11870bc084c08de6c78ed553b20d3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9937, "upload_time": "2018-11-16T23:56:09", "upload_time_iso_8601": "2018-11-16T23:56:09.357957Z", "url": "https://files.pythonhosted.org/packages/0f/10/26c6f5192c6eab929851738597478bcc45002aec655d8a0fd45a2d7a738f/monitor_requests-2.1.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:52:10 2020"}