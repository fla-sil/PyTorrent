{"info": {"author": "RegioHelden GmbH", "author_email": "entwicklung@regiohelden.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Security", "Topic :: Software Development"], "description": "# Django Scrubber\n\n[![Build Status](https://travis-ci.org/RegioHelden/django-scrubber.svg?branch=master)](https://travis-ci.org/RegioHelden/django-scrubber)\n[![PyPI](https://img.shields.io/pypi/v/django-scrubber.svg)](https://pypi.org/project/django-scrubber/)\n\n`django_scrubber` is a django app meant to help you anonymize your project's database data. It destructively alters data directly on the DB and therefore **should not be used on production**.\n\nThe main use case is providing developers with realistic data to use during development, without having to distribute your customers' or users' potentially sensitive information.\nTo accomplish this, `django_scrubber` should be plugged in a step during the creation of your database dumps.\n\nSimply mark the fields you want to anonymize and call the `scrub_data` management command. Data will be replaced based on different *scrubbers* (see below), which define how the anonymous content will be generated.\n\n## Installation\n\nSimply run:\n```\npip install django-scrubber\n```\n\nAnd add `django_scrubber` to your django `INSTALLED_APPS`. I.e.: in `settings.py` add:\n```\nINSTALLED_APPS = [\n  ...\n  'django_scrubber',\n  ...\n]\n```\n\n## Scrubbing data\n\nIn order to scrub data, i.e.: to replace DB data with anonymized versions, `django-scrubber` must know which models and fields it should act on, and how the data should be replaced.\n\nThere are a few different ways to select which data should be scrubbed, namely: explicitly per model field; or globally per name or field type.\n\nAdding scrubbers directly to model, matching scrubbers to fields by name:\n```python\nclass MyModel(Model):\n    somefield = CharField()\n\n    class Scrubbers:\n      somefield = scrubbers.Hash('somefield')\n```\n\nAdding scrubbers globally, either by field name or field type:\n\n```python\n# (in settings.py)\n\nSCRUBBER_GLOBAL_SCRUBBERS = {\n    'name': scrubbers.Hash,\n    EmailField: scrubbers.Hash,\n}\n```\n\nModel scrubbers override field-name scrubbers, which in turn override field-type scrubbers.\n\nTo disable global scrubbing in some specific model, simply set the respective field scrubber to `None`.\n\nWhich mechanism will be used to scrub the selected data is determined by using one of the provided scrubbers in `django_scrubber.scrubbers`. See below for a list.\nAlternatively, values may be anything that can be used as a value in a `QuerySet.update()` call (like `Func` instances, string literals, etc), or any `callable` that returns such an object when called with a `Field` object as argument.\n\nBy default, `django_scrubber` will affect all models from all registered apps. This may lead to issues with third-party apps if the global scrubbers are too general. This can be avoided with the `SCRUBBER_APPS_LIST` setting. Using this, you might for instance split your `INSTALLED_APPS` into multiple `SYSTEM_APPS` and `LOCAL_APPS`, then set `SCRUBBER_APPS_LIST = LOCAL_APPS`, to scrub only your own apps.\n\nFinally just run `./manage.py scrub_data` to **destructively** scrub the registered fields.\n\n## Built-In scrubbers\n\n### Empty/Null\n\nThe simplest scrubbers: replace the field's content with the empty string or `NULL`, respectively.\n```python\nclass Scrubbers:\n    somefield = scrubbers.Empty\n    someother = scrubbers.Null\n```\n\nThese scrubbers have no options.\n\n### Hash\n\nSimple hashing of content:\n```python\nclass Scrubbers:\n  somefield = scrubbers.Hash  # will use the field itself as source\n  someotherfield = scrubbers.Hash('somefield')  # can optionally pass a different field name as hashing source\n```\n\nCurrently this uses the MD5 hash which is supported in a wide variety of DB engines. Additionally, since security is not the main objective, a shorter hash length has a lower risk of being longer than whatever field it is supposed to replace.\n\n### Lorem\n\nSimple scrubber meant to replace `TextField` with a static block of text. Has no options.\n```python\nclass Scrubbers:\n  somefield = scrubbers.Lorem\n```\n\n### Concat\n\nWrapper around `django.db.functions.Concat` to enable simple concatenation of scrubbers. This is useful if you want to ensure a fields uniqueness through composition of, for instance, the `Hash` and `Faker` (see below) scrubbers. \n\nThe following will generate random email addresses by hashing the user-part and using `faker` for the domain part:\n```python\nclass Scrubbers:\n  email = scrubbers.Concat(scrubbers.Hash('email'), models.Value('@'), scrubbers.Faker('domain_name'))\n```\n\n### Faker\n\nReplaces content with the help of [faker](https://pypi.python.org/pypi/Faker).\n\n```python\nclass Scrubbers:\n  first_name = scrubbers.Faker('first_name')\n  last_name = scrubbers.Faker('last_name')\n  past_date = scrubbers.Faker('past_date', start_date=\"-30d\", tzinfo=None)\n```\n\nThe replacements are done on the database-level and should therefore be able to cope with large amounts of data with reasonable performance.\n\nThe `Faker` scrubber requires at least one argument: the faker provider used to generate random data. All [faker providers](https://faker.readthedocs.io/en/latest/providers.html) are supported and you can also register your own custom providers.<br />\nAny remaining arguments will be passed through to that provider. Please refer to the faker docs if a provider accepts arguments and what to do with them.\n\n#### Locales\n\nFaker will be initialized with the current django `LANGUAGE_CODE` and will populate the DB with localized data. If you want localized scrubbing, simply set it to some other value.\n\n#### Idempotency\n\nBy default, the faker instance used to populate the DB uses a fixed random seed, in order to ensure different scrubbings of the same data generate the same output. This is particularly useful if the scrubbed data is imported as a dump by developers, since changing data during troubleshooting would otherwise be confusing.\n\nThis behaviour can be changed by setting `SCRUBBER_RANDOM_SEED=None`, which ensures every scrubbing will generate random source data.\n\n#### Limitations\n\nScrubbing unique fields may lead to `IntegrityError`s, since there is no guarantee that the random content will not be repeated. Playing with different settings for `SCRUBBER_RANDOM_SEED` and `SCRUBBER_ENTRIES_PER_PROVIDER` may alleviate the problem.\nUnfortunately, for performance reasons, the source data for scrubbing with faker is added to the database, and arbitrarily increasing `SCRUBBER_ENTRIES_PER_PROVIDER` will significantly slow down scrubbing (besides still not guaranteeing uniqueness).\n\nWhen using `django < 2.1` and working on `sqlite` a bug within django causes field-specific scrubbing (e.g. `date_object`) to fail. Please consider using a different database backend or upgrade to the latest django version.\n\n## Settings\n\n### `SCRUBBER_GLOBAL_SCRUBBERS`:\nDictionary of global scrubbers. Keys should be either field names as strings or field type classes. Values should be one of the scrubbers provided in `django_scrubber.scrubbers`. \n\nExample:\n```python\nSCRUBBER_GLOBAL_SCRUBBERS = {\n    'name': scrubbers.Hash,\n    EmailField: scrubbers.Hash,\n}\n```\n\n### `SCRUBBER_RANDOM_SEED`:\nThe seed used when generating random content by the Faker scrubber. Setting this to `None` means each scrubbing will generate different data.\n\n(default: 42)\n\n### `SCRUBBER_ENTRIES_PER_PROVIDER`:\nNumber of entries to use as source for Faker scrubber. Increasing this value will increase the randomness of generated data, but decrease performance. \n\n(default: 1000)\n\n### `SCRUBBER_SKIP_UNMANAGED`:\nDo not attempt to scrub models which are not managed by the ORM.\n\n(default: True)\n\n### `SCRUBBER_APPS_LIST`:\nOnly scrub models belonging to these specific django apps. If unset, will scrub all installed apps.\n\n(default: None)\n\n### `SCRUBBER_ADDITIONAL_FAKER_PROVIDERS`:\nAdd additional fake providers to be used by Faker. Must be noted as full dotted path to the provider class.\n\n(default: empty list) \n\n## Making a new release\n\n[bumpversion](https://github.com/peritus/bumpversion) is used to manage releases.\n\nAdd your changes to the [CHANGELOG](./CHANGELOG.md) and run `bumpversion <major|minor|patch>`, then push (including tags)\n\n\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n<!--\n## [Unreleased]\n-->\n\n## [0.4.4] - 2019-12-11\n### Fixed\n- add the same version restrictions on faker to setup.py\n\n## [0.4.3] - 2019-12-04\n### Added\n- add empty and null scrubbers\n\n### Changed\n- make `Lorem` scrubber lazy, matching README\n\n### Fixed\n- set more stringent version requirements (faker >= 3 breaks builds)\n\n## [0.4.1] - 2019-11-16\n### Fixed\n- correctly clear fake data model to fix successive calls to `scrub_data` (thanks [Benedikt Bauer](https://github.com/mastacheata))\n\n## [0.4.0] - 2019-11-13\n### Added\n- `Faker` scrubber now supports passing arbitrary arguments to faker providers and also non-text fields (thanks [Benedikt Bauer](https://github.com/mastacheata) and [Ronny Vedrilla](https://github.com/GitRon))\n\n## [0.3.1] - 2018-09-10\n### Fixed\n- [#9](https://github.com/RegioHelden/django-scrubber/pull/9) `Hash` scrubber choking on fields with `max_length=None` - Thanks to [Charlie Denton](https://github.com/meshy)\n\n## [0.3.0] - 2018-09-06\n### Added\n- Finally added some basic tests (thanks [Marco De Felice](https://github.com/md-f))\n- `Hash` scrubber can now also be used on sqlite\n\n### Changed\n- **BREAKING**: scrubbers that are lazily initialized now receive `Field` instances as parameters, instead of field\n  names. If you have custom scrubbers depending on the previous behavior, these should be updated. Accessing the\n  field's name from the object instance is trivial: `field_instance.name`. E.g.: if you have `some_field = MyCustomScrubber`\n  in any of your models' `Scrubbers`, this class must accept a `Field` instance as first parameter.\n  Note that explicitly intializing any of the built-in scrubbers with field names is still supported, so if you were\n  just using built-in scrubbers, you should not be affected by this change.\n- related to the above, `FuncField` derived classes can now do connection-based setup by implementing the\n  `connection_setup` method. This is mostly useful for doing different things based on the DB vendor, and is used to\n  implement `MD5()` on sqlite (see added feature above)\n- Ignore proxy models when scrubbing (thanks [Marco De Felice](https://github.com/md-f))\n- Expand tests to include python 3.7 and django 2.1\n\n## [0.2.1] - 2018-08-14\n### Added\n- Option to scrub only one model from the management command\n- Support loading additional faker providers by config setting SCRUBBER\\_ADDITIONAL\\_FAKER\\_PROVIDERS\n\n### Changed\n- Switched changelog format to the one proposed on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\n\n## [0.2.0] - 2018-08-13\n### Added\n- scrubbers.Concat to make simple concatenation of scrubbers possible\n\n## [0.1.4] - 2018-08-13\n### Changed\n- Make our README look beautiful on PyPI\n\n## [0.1.3] - 2018-08-13\n### Fixed\n- [#1](https://github.com/RegioHelden/django-scrubber/pull/1) badly timed import - Thanks to [Charlie Denton](https://github.com/meshy)\n\n## [0.1.2] - 2018-06-22\n### Changed\n- Use bumpversion and travis to make new releases\n- rename project: django\\_scrubber \u2192 django-scrubber\n\n## [0.1.0] - 2018-06-22\n### Added\n- Initial release", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/regiohelden/django-scrubber", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-scrubber", "package_url": "https://pypi.org/project/django-scrubber/", "platform": "", "project_url": "https://pypi.org/project/django-scrubber/", "project_urls": {"Homepage": "https://github.com/regiohelden/django-scrubber"}, "release_url": "https://pypi.org/project/django-scrubber/0.4.4/", "requires_dist": null, "requires_python": "", "summary": "Data Anonymizer for Django", "version": "0.4.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Scrubber</h1>\n<p><a href=\"https://travis-ci.org/RegioHelden/django-scrubber\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/25a104f1ea6dae660ffd83033a232d5890452dfd/68747470733a2f2f7472617669732d63692e6f72672f526567696f48656c64656e2f646a616e676f2d73637275626265722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/django-scrubber/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e39784090691f7ed8cb07938cf110635aabee445/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d73637275626265722e737667\"></a></p>\n<p><code>django_scrubber</code> is a django app meant to help you anonymize your project's database data. It destructively alters data directly on the DB and therefore <strong>should not be used on production</strong>.</p>\n<p>The main use case is providing developers with realistic data to use during development, without having to distribute your customers' or users' potentially sensitive information.\nTo accomplish this, <code>django_scrubber</code> should be plugged in a step during the creation of your database dumps.</p>\n<p>Simply mark the fields you want to anonymize and call the <code>scrub_data</code> management command. Data will be replaced based on different <em>scrubbers</em> (see below), which define how the anonymous content will be generated.</p>\n<h2>Installation</h2>\n<p>Simply run:</p>\n<pre><code>pip install django-scrubber\n</code></pre>\n<p>And add <code>django_scrubber</code> to your django <code>INSTALLED_APPS</code>. I.e.: in <code>settings.py</code> add:</p>\n<pre><code>INSTALLED_APPS = [\n  ...\n  'django_scrubber',\n  ...\n]\n</code></pre>\n<h2>Scrubbing data</h2>\n<p>In order to scrub data, i.e.: to replace DB data with anonymized versions, <code>django-scrubber</code> must know which models and fields it should act on, and how the data should be replaced.</p>\n<p>There are a few different ways to select which data should be scrubbed, namely: explicitly per model field; or globally per name or field type.</p>\n<p>Adding scrubbers directly to model, matching scrubbers to fields by name:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">somefield</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Scrubbers</span><span class=\"p\">:</span>\n      <span class=\"n\">somefield</span> <span class=\"o\">=</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">(</span><span class=\"s1\">'somefield'</span><span class=\"p\">)</span>\n</pre>\n<p>Adding scrubbers globally, either by field name or field type:</p>\n<pre><span class=\"c1\"># (in settings.py)</span>\n\n<span class=\"n\">SCRUBBER_GLOBAL_SCRUBBERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">,</span>\n    <span class=\"n\">EmailField</span><span class=\"p\">:</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Model scrubbers override field-name scrubbers, which in turn override field-type scrubbers.</p>\n<p>To disable global scrubbing in some specific model, simply set the respective field scrubber to <code>None</code>.</p>\n<p>Which mechanism will be used to scrub the selected data is determined by using one of the provided scrubbers in <code>django_scrubber.scrubbers</code>. See below for a list.\nAlternatively, values may be anything that can be used as a value in a <code>QuerySet.update()</code> call (like <code>Func</code> instances, string literals, etc), or any <code>callable</code> that returns such an object when called with a <code>Field</code> object as argument.</p>\n<p>By default, <code>django_scrubber</code> will affect all models from all registered apps. This may lead to issues with third-party apps if the global scrubbers are too general. This can be avoided with the <code>SCRUBBER_APPS_LIST</code> setting. Using this, you might for instance split your <code>INSTALLED_APPS</code> into multiple <code>SYSTEM_APPS</code> and <code>LOCAL_APPS</code>, then set <code>SCRUBBER_APPS_LIST = LOCAL_APPS</code>, to scrub only your own apps.</p>\n<p>Finally just run <code>./manage.py scrub_data</code> to <strong>destructively</strong> scrub the registered fields.</p>\n<h2>Built-In scrubbers</h2>\n<h3>Empty/Null</h3>\n<p>The simplest scrubbers: replace the field's content with the empty string or <code>NULL</code>, respectively.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Scrubbers</span><span class=\"p\">:</span>\n    <span class=\"n\">somefield</span> <span class=\"o\">=</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Empty</span>\n    <span class=\"n\">someother</span> <span class=\"o\">=</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Null</span>\n</pre>\n<p>These scrubbers have no options.</p>\n<h3>Hash</h3>\n<p>Simple hashing of content:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Scrubbers</span><span class=\"p\">:</span>\n  <span class=\"n\">somefield</span> <span class=\"o\">=</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Hash</span>  <span class=\"c1\"># will use the field itself as source</span>\n  <span class=\"n\">someotherfield</span> <span class=\"o\">=</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">(</span><span class=\"s1\">'somefield'</span><span class=\"p\">)</span>  <span class=\"c1\"># can optionally pass a different field name as hashing source</span>\n</pre>\n<p>Currently this uses the MD5 hash which is supported in a wide variety of DB engines. Additionally, since security is not the main objective, a shorter hash length has a lower risk of being longer than whatever field it is supposed to replace.</p>\n<h3>Lorem</h3>\n<p>Simple scrubber meant to replace <code>TextField</code> with a static block of text. Has no options.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Scrubbers</span><span class=\"p\">:</span>\n  <span class=\"n\">somefield</span> <span class=\"o\">=</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Lorem</span>\n</pre>\n<h3>Concat</h3>\n<p>Wrapper around <code>django.db.functions.Concat</code> to enable simple concatenation of scrubbers. This is useful if you want to ensure a fields uniqueness through composition of, for instance, the <code>Hash</code> and <code>Faker</code> (see below) scrubbers.</p>\n<p>The following will generate random email addresses by hashing the user-part and using <code>faker</code> for the domain part:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Scrubbers</span><span class=\"p\">:</span>\n  <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Concat</span><span class=\"p\">(</span><span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">(</span><span class=\"s1\">'email'</span><span class=\"p\">),</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s1\">'@'</span><span class=\"p\">),</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Faker</span><span class=\"p\">(</span><span class=\"s1\">'domain_name'</span><span class=\"p\">))</span>\n</pre>\n<h3>Faker</h3>\n<p>Replaces content with the help of <a href=\"https://pypi.python.org/pypi/Faker\" rel=\"nofollow\">faker</a>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Scrubbers</span><span class=\"p\">:</span>\n  <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Faker</span><span class=\"p\">(</span><span class=\"s1\">'first_name'</span><span class=\"p\">)</span>\n  <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Faker</span><span class=\"p\">(</span><span class=\"s1\">'last_name'</span><span class=\"p\">)</span>\n  <span class=\"n\">past_date</span> <span class=\"o\">=</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Faker</span><span class=\"p\">(</span><span class=\"s1\">'past_date'</span><span class=\"p\">,</span> <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"s2\">\"-30d\"</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>The replacements are done on the database-level and should therefore be able to cope with large amounts of data with reasonable performance.</p>\n<p>The <code>Faker</code> scrubber requires at least one argument: the faker provider used to generate random data. All <a href=\"https://faker.readthedocs.io/en/latest/providers.html\" rel=\"nofollow\">faker providers</a> are supported and you can also register your own custom providers.<br>\nAny remaining arguments will be passed through to that provider. Please refer to the faker docs if a provider accepts arguments and what to do with them.</p>\n<h4>Locales</h4>\n<p>Faker will be initialized with the current django <code>LANGUAGE_CODE</code> and will populate the DB with localized data. If you want localized scrubbing, simply set it to some other value.</p>\n<h4>Idempotency</h4>\n<p>By default, the faker instance used to populate the DB uses a fixed random seed, in order to ensure different scrubbings of the same data generate the same output. This is particularly useful if the scrubbed data is imported as a dump by developers, since changing data during troubleshooting would otherwise be confusing.</p>\n<p>This behaviour can be changed by setting <code>SCRUBBER_RANDOM_SEED=None</code>, which ensures every scrubbing will generate random source data.</p>\n<h4>Limitations</h4>\n<p>Scrubbing unique fields may lead to <code>IntegrityError</code>s, since there is no guarantee that the random content will not be repeated. Playing with different settings for <code>SCRUBBER_RANDOM_SEED</code> and <code>SCRUBBER_ENTRIES_PER_PROVIDER</code> may alleviate the problem.\nUnfortunately, for performance reasons, the source data for scrubbing with faker is added to the database, and arbitrarily increasing <code>SCRUBBER_ENTRIES_PER_PROVIDER</code> will significantly slow down scrubbing (besides still not guaranteeing uniqueness).</p>\n<p>When using <code>django &lt; 2.1</code> and working on <code>sqlite</code> a bug within django causes field-specific scrubbing (e.g. <code>date_object</code>) to fail. Please consider using a different database backend or upgrade to the latest django version.</p>\n<h2>Settings</h2>\n<h3><code>SCRUBBER_GLOBAL_SCRUBBERS</code>:</h3>\n<p>Dictionary of global scrubbers. Keys should be either field names as strings or field type classes. Values should be one of the scrubbers provided in <code>django_scrubber.scrubbers</code>.</p>\n<p>Example:</p>\n<pre><span class=\"n\">SCRUBBER_GLOBAL_SCRUBBERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">,</span>\n    <span class=\"n\">EmailField</span><span class=\"p\">:</span> <span class=\"n\">scrubbers</span><span class=\"o\">.</span><span class=\"n\">Hash</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h3><code>SCRUBBER_RANDOM_SEED</code>:</h3>\n<p>The seed used when generating random content by the Faker scrubber. Setting this to <code>None</code> means each scrubbing will generate different data.</p>\n<p>(default: 42)</p>\n<h3><code>SCRUBBER_ENTRIES_PER_PROVIDER</code>:</h3>\n<p>Number of entries to use as source for Faker scrubber. Increasing this value will increase the randomness of generated data, but decrease performance.</p>\n<p>(default: 1000)</p>\n<h3><code>SCRUBBER_SKIP_UNMANAGED</code>:</h3>\n<p>Do not attempt to scrub models which are not managed by the ORM.</p>\n<p>(default: True)</p>\n<h3><code>SCRUBBER_APPS_LIST</code>:</h3>\n<p>Only scrub models belonging to these specific django apps. If unset, will scrub all installed apps.</p>\n<p>(default: None)</p>\n<h3><code>SCRUBBER_ADDITIONAL_FAKER_PROVIDERS</code>:</h3>\n<p>Add additional fake providers to be used by Faker. Must be noted as full dotted path to the provider class.</p>\n<p>(default: empty list)</p>\n<h2>Making a new release</h2>\n<p><a href=\"https://github.com/peritus/bumpversion\" rel=\"nofollow\">bumpversion</a> is used to manage releases.</p>\n<p>Add your changes to the <a href=\"./CHANGELOG.md\" rel=\"nofollow\">CHANGELOG</a> and run <code>bumpversion &lt;major|minor|patch&gt;</code>, then push (including tags)</p>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>The format is based on <a href=\"http://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a>\nand this project adheres to <a href=\"http://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n\n<h2>[0.4.4] - 2019-12-11</h2>\n<h3>Fixed</h3>\n<ul>\n<li>add the same version restrictions on faker to setup.py</li>\n</ul>\n<h2>[0.4.3] - 2019-12-04</h2>\n<h3>Added</h3>\n<ul>\n<li>add empty and null scrubbers</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>make <code>Lorem</code> scrubber lazy, matching README</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>set more stringent version requirements (faker &gt;= 3 breaks builds)</li>\n</ul>\n<h2>[0.4.1] - 2019-11-16</h2>\n<h3>Fixed</h3>\n<ul>\n<li>correctly clear fake data model to fix successive calls to <code>scrub_data</code> (thanks <a href=\"https://github.com/mastacheata\" rel=\"nofollow\">Benedikt Bauer</a>)</li>\n</ul>\n<h2>[0.4.0] - 2019-11-13</h2>\n<h3>Added</h3>\n<ul>\n<li><code>Faker</code> scrubber now supports passing arbitrary arguments to faker providers and also non-text fields (thanks <a href=\"https://github.com/mastacheata\" rel=\"nofollow\">Benedikt Bauer</a> and <a href=\"https://github.com/GitRon\" rel=\"nofollow\">Ronny Vedrilla</a>)</li>\n</ul>\n<h2>[0.3.1] - 2018-09-10</h2>\n<h3>Fixed</h3>\n<ul>\n<li><a href=\"https://github.com/RegioHelden/django-scrubber/pull/9\" rel=\"nofollow\">#9</a> <code>Hash</code> scrubber choking on fields with <code>max_length=None</code> - Thanks to <a href=\"https://github.com/meshy\" rel=\"nofollow\">Charlie Denton</a></li>\n</ul>\n<h2>[0.3.0] - 2018-09-06</h2>\n<h3>Added</h3>\n<ul>\n<li>Finally added some basic tests (thanks <a href=\"https://github.com/md-f\" rel=\"nofollow\">Marco De Felice</a>)</li>\n<li><code>Hash</code> scrubber can now also be used on sqlite</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li><strong>BREAKING</strong>: scrubbers that are lazily initialized now receive <code>Field</code> instances as parameters, instead of field\nnames. If you have custom scrubbers depending on the previous behavior, these should be updated. Accessing the\nfield's name from the object instance is trivial: <code>field_instance.name</code>. E.g.: if you have <code>some_field = MyCustomScrubber</code>\nin any of your models' <code>Scrubbers</code>, this class must accept a <code>Field</code> instance as first parameter.\nNote that explicitly intializing any of the built-in scrubbers with field names is still supported, so if you were\njust using built-in scrubbers, you should not be affected by this change.</li>\n<li>related to the above, <code>FuncField</code> derived classes can now do connection-based setup by implementing the\n<code>connection_setup</code> method. This is mostly useful for doing different things based on the DB vendor, and is used to\nimplement <code>MD5()</code> on sqlite (see added feature above)</li>\n<li>Ignore proxy models when scrubbing (thanks <a href=\"https://github.com/md-f\" rel=\"nofollow\">Marco De Felice</a>)</li>\n<li>Expand tests to include python 3.7 and django 2.1</li>\n</ul>\n<h2>[0.2.1] - 2018-08-14</h2>\n<h3>Added</h3>\n<ul>\n<li>Option to scrub only one model from the management command</li>\n<li>Support loading additional faker providers by config setting SCRUBBER_ADDITIONAL_FAKER_PROVIDERS</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Switched changelog format to the one proposed on <a href=\"http://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a></li>\n</ul>\n<h2>[0.2.0] - 2018-08-13</h2>\n<h3>Added</h3>\n<ul>\n<li>scrubbers.Concat to make simple concatenation of scrubbers possible</li>\n</ul>\n<h2>[0.1.4] - 2018-08-13</h2>\n<h3>Changed</h3>\n<ul>\n<li>Make our README look beautiful on PyPI</li>\n</ul>\n<h2>[0.1.3] - 2018-08-13</h2>\n<h3>Fixed</h3>\n<ul>\n<li><a href=\"https://github.com/RegioHelden/django-scrubber/pull/1\" rel=\"nofollow\">#1</a> badly timed import - Thanks to <a href=\"https://github.com/meshy\" rel=\"nofollow\">Charlie Denton</a></li>\n</ul>\n<h2>[0.1.2] - 2018-06-22</h2>\n<h3>Changed</h3>\n<ul>\n<li>Use bumpversion and travis to make new releases</li>\n<li>rename project: django_scrubber \u2192 django-scrubber</li>\n</ul>\n<h2>[0.1.0] - 2018-06-22</h2>\n<h3>Added</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n\n          </div>"}, "last_serial": 6276218, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7127a9c8f433c86326796aed8a1a51a6", "sha256": "2f8d20c8c26b0263b7b3324557b4b1f1cac9b02b3f51900203004668f4c6f40f"}, "downloads": -1, "filename": "django-scrubber-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7127a9c8f433c86326796aed8a1a51a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12803, "upload_time": "2018-06-22T14:59:29", "upload_time_iso_8601": "2018-06-22T14:59:29.156520Z", "url": "https://files.pythonhosted.org/packages/54/64/e174a9339244b7fbc23e2e3a48738c413cc8a8a5ef4cf9d57614c5c52379/django-scrubber-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "1d021f622a1f17a27d45e22411d420e1", "sha256": "7c086fdbdf33d702da7a64e847d9eee89750a915b669d1c986a62411d201f40f"}, "downloads": -1, "filename": "django-scrubber-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1d021f622a1f17a27d45e22411d420e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8935, "upload_time": "2018-06-22T15:30:23", "upload_time_iso_8601": "2018-06-22T15:30:23.967527Z", "url": "https://files.pythonhosted.org/packages/87/f4/30ce6c16065bcb55f400c1ccdc8192e01f8b0a4192bb4da7773be6dd82cf/django-scrubber-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "6a960e4505dbff0a021f91df9e4ef695", "sha256": "88c31ad60f5ca6acf204211672eae360604ab245fd081ff5613f9bd1716e96e1"}, "downloads": -1, "filename": "django-scrubber-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6a960e4505dbff0a021f91df9e4ef695", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9167, "upload_time": "2018-08-12T20:14:26", "upload_time_iso_8601": "2018-08-12T20:14:26.663360Z", "url": "https://files.pythonhosted.org/packages/a4/71/8f82b3558167af82f1411370d401b6a8840225ec6b02a34455706dc3093c/django-scrubber-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "c48f8c420c01e32824b73ff3b9008c9b", "sha256": "3da4b401a4b31a5ab3ed90a208e8d7d5073136139ae86908ce26c03e00fb6961"}, "downloads": -1, "filename": "django-scrubber-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c48f8c420c01e32824b73ff3b9008c9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9248, "upload_time": "2018-08-12T20:24:20", "upload_time_iso_8601": "2018-08-12T20:24:20.857263Z", "url": "https://files.pythonhosted.org/packages/b4/ec/787bfa419492aeeea2f16df10a0377bfc8640b65ae5f2bc26a59638b43ef/django-scrubber-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0deab5798d31e5f93281ef8f21d28e62", "sha256": "b1a80d9c071ac8ef2b7f135cd84cb9506e9dc43b53573e86a9a9d7f6c98a205b"}, "downloads": -1, "filename": "django-scrubber-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0deab5798d31e5f93281ef8f21d28e62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10394, "upload_time": "2018-08-13T16:07:23", "upload_time_iso_8601": "2018-08-13T16:07:23.389190Z", "url": "https://files.pythonhosted.org/packages/68/fb/7557204800febff0f3dad8009701a494bbc910060cda66f0be4e9252875a/django-scrubber-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e1396c39fa17856866834c83a732327b", "sha256": "73f36f3559dca72f5809a95ecd83704e1d0c7e0c8380efcebfa352eed185af3d"}, "downloads": -1, "filename": "django-scrubber-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e1396c39fa17856866834c83a732327b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11171, "upload_time": "2018-08-14T17:00:39", "upload_time_iso_8601": "2018-08-14T17:00:39.789807Z", "url": "https://files.pythonhosted.org/packages/13/6b/f79836585af87ca5f3ae8a04331c246813abe92748631841cb0f8eeea97a/django-scrubber-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "d7130135305c8a16902507ffe158a940", "sha256": "04063973b02e0d75e2c7d6be80f026b5fe5ce4a833f4588acbe8dd79cbb6111f"}, "downloads": -1, "filename": "django-scrubber-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d7130135305c8a16902507ffe158a940", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12917, "upload_time": "2018-09-07T10:44:20", "upload_time_iso_8601": "2018-09-07T10:44:20.718774Z", "url": "https://files.pythonhosted.org/packages/5b/e6/aee22659a898827a7845bdee767c965d322eb3c15c42f037efa1821b9e5d/django-scrubber-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "cf3b6312a8d5a4441ef0debdcc3f4c70", "sha256": "fe5c760f22b61edddb0f2515cdcbabaca5ac0d92747b31583bfb1d55df2de197"}, "downloads": -1, "filename": "django-scrubber-0.3.1.tar.gz", "has_sig": false, "md5_digest": "cf3b6312a8d5a4441ef0debdcc3f4c70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12980, "upload_time": "2018-09-10T12:14:30", "upload_time_iso_8601": "2018-09-10T12:14:30.128913Z", "url": "https://files.pythonhosted.org/packages/48/a1/2a5d03094c42414ff83f8592c64f3acf5673e259ad05af4508656d87b8fe/django-scrubber-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "a2473bcb98d8d576459a1c5232dc32f8", "sha256": "97e3c3eff54c063557b002ff616ad0d620c25f17daf437e2836d99beba69d04b"}, "downloads": -1, "filename": "django-scrubber-0.4.0.tar.gz", "has_sig": false, "md5_digest": "a2473bcb98d8d576459a1c5232dc32f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15688, "upload_time": "2019-11-13T19:16:12", "upload_time_iso_8601": "2019-11-13T19:16:12.467787Z", "url": "https://files.pythonhosted.org/packages/70/1f/38de8492983f80bada3851828d9f6a8cd9b70033e88790ffdd9bb115adf5/django-scrubber-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "590f2ff64fe3347b32f4aac449b98884", "sha256": "c6d0d86fe151da72c880623339ab82f44d3a41bde7a060ca64d93cbb70e4fbfb"}, "downloads": -1, "filename": "django-scrubber-0.4.1.tar.gz", "has_sig": false, "md5_digest": "590f2ff64fe3347b32f4aac449b98884", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15828, "upload_time": "2019-11-15T23:38:43", "upload_time_iso_8601": "2019-11-15T23:38:43.001821Z", "url": "https://files.pythonhosted.org/packages/95/d6/d935461f041cb65ace8657e13fc38b0cd83c8537e80659a4a4babfcb0c04/django-scrubber-0.4.1.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "cbc1b5e56dd6ae0ea9be688d78392c6d", "sha256": "8147c446507695c6eb551920a526286852eac616933482ab92656680e26e96c8"}, "downloads": -1, "filename": "django-scrubber-0.4.3.tar.gz", "has_sig": false, "md5_digest": "cbc1b5e56dd6ae0ea9be688d78392c6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16172, "upload_time": "2019-12-04T18:36:17", "upload_time_iso_8601": "2019-12-04T18:36:17.310578Z", "url": "https://files.pythonhosted.org/packages/a3/1e/63a635ee2ddd765f8f3dc5fe36474933bccf24e0535df9c4271d42201799/django-scrubber-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "92427c4c5ef9c6cd4e8adcc51e3f2c02", "sha256": "2ba39ecaa2b63879c4616c02868d767606691b246bb27686af3519e2618a59cb"}, "downloads": -1, "filename": "django-scrubber-0.4.4.tar.gz", "has_sig": false, "md5_digest": "92427c4c5ef9c6cd4e8adcc51e3f2c02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16353, "upload_time": "2019-12-10T23:48:51", "upload_time_iso_8601": "2019-12-10T23:48:51.143451Z", "url": "https://files.pythonhosted.org/packages/8f/c9/872c3343b979196d89794f76ee867d51e4e71e9a32fc8490de0327ea661e/django-scrubber-0.4.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "92427c4c5ef9c6cd4e8adcc51e3f2c02", "sha256": "2ba39ecaa2b63879c4616c02868d767606691b246bb27686af3519e2618a59cb"}, "downloads": -1, "filename": "django-scrubber-0.4.4.tar.gz", "has_sig": false, "md5_digest": "92427c4c5ef9c6cd4e8adcc51e3f2c02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16353, "upload_time": "2019-12-10T23:48:51", "upload_time_iso_8601": "2019-12-10T23:48:51.143451Z", "url": "https://files.pythonhosted.org/packages/8f/c9/872c3343b979196d89794f76ee867d51e4e71e9a32fc8490de0327ea661e/django-scrubber-0.4.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:43 2020"}