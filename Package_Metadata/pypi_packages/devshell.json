{"info": {"author": "Matthew Miguel", "author_email": "mmiguel6288code@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython"], "description": "# devshell\n\ndevshell is a tool to make python development easier.\n\n## Key Features\n1. Enables entering an interactive session tied to the docstring of a particular python object. Inputs and responses are automatically recorded and inserted into the docstring as doctests.\n2. Shell-like tool for navigating, inspecting, testing, and making doctests for python objects defined in a project \n\n## What are doctests and why should I care?\nDoctests are snippets of text that resemble a Python interactive mode session.\nDoctests can be embedded in the docstrings within your code in order to serve two purposes:\n\n1. To provide executable examples to users so they can better understand how to use your code\n\n2. To support automated testing by running these lines and confirming the expected outputs are produced\n\n\nA docstring is a block of inline text within your code at the start of a module, class, or function to document the function. When the builtin help() function is called on an object, the docstrings for that object's class and methods are displayed. Additionally there are a number of tools, such as sphinx or pdoc that generate polished documentation files by scanning docstrings within a project.\n\n## How to use devshell\nFirst open a shell or command line window and navigate to the folder containing the packages and/or modules of interest.\nThen run:\n\n    ```\n    $ python -m devshell\n\n    Starting devshell command line interface...\n    Welcome to the devshell shell. Type help or ? to list commands.\n\n    (devshell)$\n    ```\n\nYou will then enter the devshell shell, which was designed to look and feel very similar to a unix shell.\nThe big difference is that instead of navigating through actual files/directories, the devshell shell navigates through python packages, modules, classes, and functions. Tab-completion is supported.\n\nIn the shell, you can type help to list all the commands.\n\n    ```\n    (devshell)$ help\n    Documented commands (type help <topic>):\n    ========================================\n    EOF       cp       devshell  h            ls     pwd     quit    run   \n    cd        debug    edit        help         mkdir  pytest  read    source\n    chdir     doc      exit        interactive  mv     python  rm    \n    coverage  doctest  getcwd      listdir      pip    q       rmtree\n    ```\n\nYou can also type help followed by a command to get information about that particular command:\n\n    ```\n    (devshell)$ help ls\n\n        Help: (devshell)$ ls\n            This will show all items contained within the currently targeted item.\n                e.g. for a package, this would list the modules\n                e.g. for a module, this would list the functions and classes\n                etc\n            Note that using this command may result in importing the module containing the currently targeted item.\n            Note that setup.py files will be purposefully excluded because importing/inspecting them without providing commands results in terminating python.k\n    ```\n\nUse the pwd, cd, and ls commands to navigate through different items:\n\n    ```\n    devshell)$ ls\n        devshell          package             directory\n        test_pkg            package             directory\n        tests               package             directory\n    (devshell)$ cd test_pkg\n    (devshell)$ cd test_subpkg.test_mod.f\n    (devshell)$ pwd\n    /test_pkg.test_subpkg.test_mod.f\n    ```\n\nOnce you are navigated to the item of interest, run the devshell command to enter a recorded interactive python session. All items from the containing module of the targeted item will automatically be imported. You essentially just type the doctest inputs, and the interactive session will evaluate them and display the outputs. When done, press Ctrl+D to exit the interactive session. At this point, devshell will write the recorded actions into the docstring of the targeted object. Afterwards, it will run doctests on that object to ensure there are no issues. If any issues are encountered, the original file will be restored and the problematic file will be saved with a special suffix in the same folder.\n\n    ```\n    (devshell)$ devshell\n    Testing doctest execution of original file\n    ...done: Fail count = 0, Total count = 0\n    Entering interactive console\n    Doctest insertion targeting object test_pkg.test_subpkg.test_mod.f within /home/mtm/interspace/devshell/test_pkg/test_subpkg/test_mod.py\n    Press Ctrl+D to stop writing code and incorporate session into the docstring of the targeted object\n    To abort this session without writing anything into the targeted file, call the exit() function\n    >>> from test_pkg.test_subpkg.test_mod import * # automatic import by devshell\n    >>> f(20)\n    20\n    >>>\n    Writing doctest lines to file\n    Testing doctest execution of new file\n    ...done: Fail count = 0 (old=0), Total count = 1 (old=0)\n    File successfully updated\n\n    ```\n\nYou can use the doc or source commands to verify the doctest was written in:\n\n    ```\n    (devshell)$ doc\n    >>> f(20)\n    20\n\n    (devshell)$ source\n    File: /home/mtm/interspace/devshell/test_pkg/test_subpkg/test_mod.py\n    def f(x):\n    \"\"\"\n    >>> f(20)\n    20\n    \"\"\"\n    return x\n\n    ```\n\nYou can also change the current working directory that the devshell shell is scanning for modules and packages with.\nYou can navigate the filestystem using chdir, listdir, and getcwd, which do the same things as the standard python os module methods of the same name.\nTab-completion is supported for chdir and listdir.\n\nTo exit the doctest shell, just press Ctrl+D or type the quit command.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mmiguel6288code/devshell", "keywords": "doctest,doctests,docstring,docstrings,tests,testing,test,shell,inspect,inspection,creating,create,run,running,interactive,coverage,pytest", "license": "MIT", "maintainer": "Matthew Miguel", "maintainer_email": "mmiguel6288code@gmail.com", "name": "devshell", "package_url": "https://pypi.org/project/devshell/", "platform": "", "project_url": "https://pypi.org/project/devshell/", "project_urls": {"Homepage": "https://github.com/mmiguel6288code/devshell"}, "release_url": "https://pypi.org/project/devshell/0.0.2/", "requires_dist": ["pypager", "pytest", "coverage"], "requires_python": "", "summary": "Shell-like tool to make it easier to develop python code", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>devshell</h1>\n<p>devshell is a tool to make python development easier.</p>\n<h2>Key Features</h2>\n<ol>\n<li>Enables entering an interactive session tied to the docstring of a particular python object. Inputs and responses are automatically recorded and inserted into the docstring as doctests.</li>\n<li>Shell-like tool for navigating, inspecting, testing, and making doctests for python objects defined in a project</li>\n</ol>\n<h2>What are doctests and why should I care?</h2>\n<p>Doctests are snippets of text that resemble a Python interactive mode session.\nDoctests can be embedded in the docstrings within your code in order to serve two purposes:</p>\n<ol>\n<li>\n<p>To provide executable examples to users so they can better understand how to use your code</p>\n</li>\n<li>\n<p>To support automated testing by running these lines and confirming the expected outputs are produced</p>\n</li>\n</ol>\n<p>A docstring is a block of inline text within your code at the start of a module, class, or function to document the function. When the builtin help() function is called on an object, the docstrings for that object's class and methods are displayed. Additionally there are a number of tools, such as sphinx or pdoc that generate polished documentation files by scanning docstrings within a project.</p>\n<h2>How to use devshell</h2>\n<p>First open a shell or command line window and navigate to the folder containing the packages and/or modules of interest.\nThen run:</p>\n<pre><code>```\n$ python -m devshell\n\nStarting devshell command line interface...\nWelcome to the devshell shell. Type help or ? to list commands.\n\n(devshell)$\n```\n</code></pre>\n<p>You will then enter the devshell shell, which was designed to look and feel very similar to a unix shell.\nThe big difference is that instead of navigating through actual files/directories, the devshell shell navigates through python packages, modules, classes, and functions. Tab-completion is supported.</p>\n<p>In the shell, you can type help to list all the commands.</p>\n<pre><code>```\n(devshell)$ help\nDocumented commands (type help &lt;topic&gt;):\n========================================\nEOF       cp       devshell  h            ls     pwd     quit    run   \ncd        debug    edit        help         mkdir  pytest  read    source\nchdir     doc      exit        interactive  mv     python  rm    \ncoverage  doctest  getcwd      listdir      pip    q       rmtree\n```\n</code></pre>\n<p>You can also type help followed by a command to get information about that particular command:</p>\n<pre><code>```\n(devshell)$ help ls\n\n    Help: (devshell)$ ls\n        This will show all items contained within the currently targeted item.\n            e.g. for a package, this would list the modules\n            e.g. for a module, this would list the functions and classes\n            etc\n        Note that using this command may result in importing the module containing the currently targeted item.\n        Note that setup.py files will be purposefully excluded because importing/inspecting them without providing commands results in terminating python.k\n```\n</code></pre>\n<p>Use the pwd, cd, and ls commands to navigate through different items:</p>\n<pre><code>```\ndevshell)$ ls\n    devshell          package             directory\n    test_pkg            package             directory\n    tests               package             directory\n(devshell)$ cd test_pkg\n(devshell)$ cd test_subpkg.test_mod.f\n(devshell)$ pwd\n/test_pkg.test_subpkg.test_mod.f\n```\n</code></pre>\n<p>Once you are navigated to the item of interest, run the devshell command to enter a recorded interactive python session. All items from the containing module of the targeted item will automatically be imported. You essentially just type the doctest inputs, and the interactive session will evaluate them and display the outputs. When done, press Ctrl+D to exit the interactive session. At this point, devshell will write the recorded actions into the docstring of the targeted object. Afterwards, it will run doctests on that object to ensure there are no issues. If any issues are encountered, the original file will be restored and the problematic file will be saved with a special suffix in the same folder.</p>\n<pre><code>```\n(devshell)$ devshell\nTesting doctest execution of original file\n...done: Fail count = 0, Total count = 0\nEntering interactive console\nDoctest insertion targeting object test_pkg.test_subpkg.test_mod.f within /home/mtm/interspace/devshell/test_pkg/test_subpkg/test_mod.py\nPress Ctrl+D to stop writing code and incorporate session into the docstring of the targeted object\nTo abort this session without writing anything into the targeted file, call the exit() function\n&gt;&gt;&gt; from test_pkg.test_subpkg.test_mod import * # automatic import by devshell\n&gt;&gt;&gt; f(20)\n20\n&gt;&gt;&gt;\nWriting doctest lines to file\nTesting doctest execution of new file\n...done: Fail count = 0 (old=0), Total count = 1 (old=0)\nFile successfully updated\n\n```\n</code></pre>\n<p>You can use the doc or source commands to verify the doctest was written in:</p>\n<pre><code>```\n(devshell)$ doc\n&gt;&gt;&gt; f(20)\n20\n\n(devshell)$ source\nFile: /home/mtm/interspace/devshell/test_pkg/test_subpkg/test_mod.py\ndef f(x):\n\"\"\"\n&gt;&gt;&gt; f(20)\n20\n\"\"\"\nreturn x\n\n```\n</code></pre>\n<p>You can also change the current working directory that the devshell shell is scanning for modules and packages with.\nYou can navigate the filestystem using chdir, listdir, and getcwd, which do the same things as the standard python os module methods of the same name.\nTab-completion is supported for chdir and listdir.</p>\n<p>To exit the doctest shell, just press Ctrl+D or type the quit command.</p>\n\n          </div>"}, "last_serial": 7045217, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e7e6de835bd5783e161f6d074234e4c6", "sha256": "f072b1bcb10e2707037ca3fa70f1617241175756df0addc1672d3bac869a1e18"}, "downloads": -1, "filename": "devshell-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e7e6de835bd5783e161f6d074234e4c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4208, "upload_time": "2020-04-18T00:51:03", "upload_time_iso_8601": "2020-04-18T00:51:03.038603Z", "url": "https://files.pythonhosted.org/packages/b4/bf/61583887162d63d95843efdb93c550284f098a3d41bedd2cd3d77aa5d42d/devshell-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb40f0974bcddf0e074e98de4fe4aa62", "sha256": "4b4c2f819752ccd2d64fc04dc5b064e7318f17cf5d334585cffe256f42231e1a"}, "downloads": -1, "filename": "devshell-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fb40f0974bcddf0e074e98de4fe4aa62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3969, "upload_time": "2020-04-18T00:51:05", "upload_time_iso_8601": "2020-04-18T00:51:05.321648Z", "url": "https://files.pythonhosted.org/packages/cc/ec/248925e3bbf41e38298060a97f4417bb78bf7b09add07aacf940bfd4352c/devshell-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0fda238d5d800ec18f2e3ab083f4568f", "sha256": "a21d9bbcd120b1905c8f5da156673fdfb463794b19e15d21867057ee2cd03e66"}, "downloads": -1, "filename": "devshell-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0fda238d5d800ec18f2e3ab083f4568f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17406, "upload_time": "2020-04-18T01:01:58", "upload_time_iso_8601": "2020-04-18T01:01:58.306167Z", "url": "https://files.pythonhosted.org/packages/54/c2/c5d8d80116266651d88a0ae15bd9556a23778b2cb646b0a8d7e325f3e85c/devshell-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfd8f1fc6c972a470ab63e8467afc474", "sha256": "b14f9b8e4e2130f39b661564be0a5f8e789eae95424b09224f9f2e8d72c339ab"}, "downloads": -1, "filename": "devshell-0.0.2.tar.gz", "has_sig": false, "md5_digest": "cfd8f1fc6c972a470ab63e8467afc474", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15522, "upload_time": "2020-04-18T01:01:59", "upload_time_iso_8601": "2020-04-18T01:01:59.729928Z", "url": "https://files.pythonhosted.org/packages/0c/8e/82f3f4089b7a670621bb84c24ea86a2faecff0179c9f940977e3fdbc5638/devshell-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0fda238d5d800ec18f2e3ab083f4568f", "sha256": "a21d9bbcd120b1905c8f5da156673fdfb463794b19e15d21867057ee2cd03e66"}, "downloads": -1, "filename": "devshell-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0fda238d5d800ec18f2e3ab083f4568f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17406, "upload_time": "2020-04-18T01:01:58", "upload_time_iso_8601": "2020-04-18T01:01:58.306167Z", "url": "https://files.pythonhosted.org/packages/54/c2/c5d8d80116266651d88a0ae15bd9556a23778b2cb646b0a8d7e325f3e85c/devshell-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfd8f1fc6c972a470ab63e8467afc474", "sha256": "b14f9b8e4e2130f39b661564be0a5f8e789eae95424b09224f9f2e8d72c339ab"}, "downloads": -1, "filename": "devshell-0.0.2.tar.gz", "has_sig": false, "md5_digest": "cfd8f1fc6c972a470ab63e8467afc474", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15522, "upload_time": "2020-04-18T01:01:59", "upload_time_iso_8601": "2020-04-18T01:01:59.729928Z", "url": "https://files.pythonhosted.org/packages/0c/8e/82f3f4089b7a670621bb84c24ea86a2faecff0179c9f940977e3fdbc5638/devshell-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:49 2020"}