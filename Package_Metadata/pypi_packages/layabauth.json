{"info": {"author": "Colin Bounouar", "author_email": "colin.bounouar.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "<h2 align=\"center\">Handle OAuth2 authentication for REST APIs</h2>\n\n<p align=\"center\">\n<a href=\"https://pypi.org/project/layabauth/\"><img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/layabauth\"></a>\n<a href=\"https://travis-ci.com/Colin-b/layabauth\"><img alt=\"Build status\" src=\"https://api.travis-ci.com/Colin-b/layabauth.svg?branch=master\"></a>\n<a href=\"https://travis-ci.com/Colin-b/layabauth\"><img alt=\"Coverage\" src=\"https://img.shields.io/badge/coverage-100%25-brightgreen\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://travis-ci.com/Colin-b/layabauth\"><img alt=\"Number of tests\" src=\"https://img.shields.io/badge/tests-20 passed-blue\"></a>\n<a href=\"https://pypi.org/project/layabauth/\"><img alt=\"Number of downloads\" src=\"https://img.shields.io/pypi/dm/layabauth\"></a>\n</p>\n\nAs expected by the HTTP specification, token is extracted from `Authorization` header and must be prefixed with `Bearer `.\n\nToken will then be validated and in case it is valid, you will be able to access the raw token (as string) and the decoded token body (as dictionary).\n\n## Starlette\n\nProvides a [Starlette authentication backend](https://www.starlette.io/authentication/): `layabauth.starlette.OAuth2IdTokenBackend`.\n\n3 arguments are required:\n* The [JWKs](https://tools.ietf.org/html/rfc7517) URI as defined in .well-known.\n - Azure Active Directory: `https://sts.windows.net/common/discovery/keys`\n - Microsoft Identity Platform: `https://sts.windows.net/common/discovery/keys`\n* A callable to create the [authenticated user](https://www.starlette.io/authentication/#users) based on received token.\n* A callable to returns [authenticated user scopes](https://www.starlette.io/authentication/#permissions) based on received token.\n\nBelow is a sample `Starlette` application with an endpoint requesting a Microsoft issued OAuth2 token.\n\n```python\nimport starlette.applications\nfrom starlette.authentication import SimpleUser, requires\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.authentication import AuthenticationMiddleware\nfrom starlette.responses import PlainTextResponse\n\nimport layabauth.starlette\n\nbackend = layabauth.starlette.OAuth2IdTokenBackend(\n    jwks_uri=\"https://sts.windows.net/common/discovery/keys\",\n    create_user=lambda token, token_body: SimpleUser(token_body[\"name\"]),\n    scopes=lambda token, token_body: [\"my_scope\"]\n)\napp = starlette.applications.Starlette(middleware=[Middleware(AuthenticationMiddleware, backend=backend)])\n\n@app.route(\"/my_endpoint\")\n@requires('my_scope')\nasync def my_endpoint(request):\n    return PlainTextResponse(request.user.display_name)\n```\n\n## Flask\n\nProvides a decorator `layabauth.flask.requires_authentication` to ensure that, in a context of a `Flask` application, a valid OAuth2 token was received.\n\nThe [JWKs](https://tools.ietf.org/html/rfc7517) URI as defined in .well-known is the only required argument.\n- Azure Active Directory: `https://sts.windows.net/common/discovery/keys`\n- Microsoft Identity Platform: `https://sts.windows.net/common/discovery/keys`\n\nIf validation fails, an `werkzeug.exceptions.Unauthorized` exception is raised.\nOtherwise token is stored in `flask.g.token` and decoded token body is stored in `flask.g.token_body`.\n\nDecorator works fine on `flask-restplus` methods as well.\n\nBelow is a sample `Flask` application with an endpoint requesting a Microsoft issued OAuth2 token.\n\n```python\nimport flask\nimport layabauth.flask\n\napp = flask.Flask(__name__)\n\n@app.route(\"/my_endpoint\")\n@layabauth.flask.requires_authentication(\"https://sts.windows.net/common/discovery/keys\")\ndef my_endpoint():\n    # Return the content of the name entry within the decoded token body.\n    return flask.Response(flask.g.token_body[\"name\"])\n\napp.run()\n```\n\n## OpenAPI\n\nYou can generate OpenAPI 2.0 `security` definition thanks to `layabauth.authorizations`.\n\nYou can generate OpenAPI 2.0 `method security` thanks to `layabauth.method_authorizations`\n\n## Testing\n\nAuthentication can be mocked using `layabauth.testing.auth_mock` `pytest` fixture.\n\n`token_body` `pytest` fixture returning the decoded token body used in tests must be provided.\n`jwks_uri` `pytest` fixture returning the jwks_uri used in tests must be provided.\n\n```python\nfrom layabauth.testing import *\n\n\n@pytest.fixture\ndef jwks_uri():\n    return \"https://sts.windows.net/common/discovery/keys\"\n\n\n@pytest.fixture\ndef token_body():\n    return {\"name\": \"TEST@email.com\"}\n\n\ndef test_authentication(auth_mock, client):\n    response = client.get(\"/my_endpoint\", headers={\"Authentication\": \"Bearer mocked_token\"})\n    assert response.text == \"TEST@email.com\"\n```\n\n## How to install\n1. [python 3.6+](https://www.python.org/downloads/) must be installed\n2. Use pip to install module:\n```sh\npython -m pip install layabauth\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/layabauth/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://colin-b.github.io/layabauth/", "keywords": "flask,starlette,auth", "license": "MIT", "maintainer": "Colin Bounouar", "maintainer_email": "colin.bounouar.dev@gmail.com", "name": "layabauth", "package_url": "https://pypi.org/project/layabauth/", "platform": "Windows", "project_url": "https://pypi.org/project/layabauth/", "project_urls": {"Changelog": "https://github.com/Colin-b/layabauth/blob/master/CHANGELOG.md", "Download": "https://pypi.org/project/layabauth/", "GitHub": "https://github.com/Colin-b/layabauth", "Homepage": "https://colin-b.github.io/layabauth/", "Issues": "https://github.com/Colin-b/layabauth/issues"}, "release_url": "https://pypi.org/project/layabauth/4.0.1/", "requires_dist": ["requests (==2.*)", "python-jose (==3.*)", "flask-restx (==0.2.*) ; extra == 'testing'", "pytest-flask (==1.*) ; extra == 'testing'", "starlette (==0.13.*) ; extra == 'testing'", "requests (==2.*) ; extra == 'testing'", "pytest-responses (==0.4.*) ; extra == 'testing'", "pytest-cov (==2.*) ; extra == 'testing'"], "requires_python": ">=3.6", "summary": "Handle OAuth2 authentication for REST APIs", "version": "4.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Handle OAuth2 authentication for REST APIs</h2>\n<p align=\"center\">\n<a href=\"https://pypi.org/project/layabauth/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e24c5b0bcbbeb288ef6afda12c54bfd89f034c5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c6179616261757468\"></a>\n<a href=\"https://travis-ci.com/Colin-b/layabauth\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec3b48da731d5dbca5d27d5f4abe19e0ea1991c0/68747470733a2f2f6170692e7472617669732d63692e636f6d2f436f6c696e2d622f6c61796162617574682e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://travis-ci.com/Colin-b/layabauth\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0280f255d36847e3743058a68bedfb93626e993f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d627269676874677265656e\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://travis-ci.com/Colin-b/layabauth\" rel=\"nofollow\"><img alt=\"Number of tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3dbe77e6d45efb2ebf647c5b700418fd14d1f272/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f74657374732d3230207061737365642d626c7565\"></a>\n<a href=\"https://pypi.org/project/layabauth/\" rel=\"nofollow\"><img alt=\"Number of downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af029e4a97e78e244a6c4c405111ba32f2d05e3a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6c6179616261757468\"></a>\n</p>\n<p>As expected by the HTTP specification, token is extracted from <code>Authorization</code> header and must be prefixed with <code>Bearer</code>.</p>\n<p>Token will then be validated and in case it is valid, you will be able to access the raw token (as string) and the decoded token body (as dictionary).</p>\n<h2>Starlette</h2>\n<p>Provides a <a href=\"https://www.starlette.io/authentication/\" rel=\"nofollow\">Starlette authentication backend</a>: <code>layabauth.starlette.OAuth2IdTokenBackend</code>.</p>\n<p>3 arguments are required:</p>\n<ul>\n<li>The <a href=\"https://tools.ietf.org/html/rfc7517\" rel=\"nofollow\">JWKs</a> URI as defined in .well-known.</li>\n</ul>\n<ul>\n<li>Azure Active Directory: <code>https://sts.windows.net/common/discovery/keys</code></li>\n<li>Microsoft Identity Platform: <code>https://sts.windows.net/common/discovery/keys</code></li>\n</ul>\n<ul>\n<li>A callable to create the <a href=\"https://www.starlette.io/authentication/#users\" rel=\"nofollow\">authenticated user</a> based on received token.</li>\n<li>A callable to returns <a href=\"https://www.starlette.io/authentication/#permissions\" rel=\"nofollow\">authenticated user scopes</a> based on received token.</li>\n</ul>\n<p>Below is a sample <code>Starlette</code> application with an endpoint requesting a Microsoft issued OAuth2 token.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starlette.applications</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.authentication</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleUser</span><span class=\"p\">,</span> <span class=\"n\">requires</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">Middleware</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.middleware.authentication</span> <span class=\"kn\">import</span> <span class=\"n\">AuthenticationMiddleware</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">PlainTextResponse</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">layabauth.starlette</span>\n\n<span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">layabauth</span><span class=\"o\">.</span><span class=\"n\">starlette</span><span class=\"o\">.</span><span class=\"n\">OAuth2IdTokenBackend</span><span class=\"p\">(</span>\n    <span class=\"n\">jwks_uri</span><span class=\"o\">=</span><span class=\"s2\">\"https://sts.windows.net/common/discovery/keys\"</span><span class=\"p\">,</span>\n    <span class=\"n\">create_user</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">token_body</span><span class=\"p\">:</span> <span class=\"n\">SimpleUser</span><span class=\"p\">(</span><span class=\"n\">token_body</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]),</span>\n    <span class=\"n\">scopes</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">token_body</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"my_scope\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">starlette</span><span class=\"o\">.</span><span class=\"n\">applications</span><span class=\"o\">.</span><span class=\"n\">Starlette</span><span class=\"p\">(</span><span class=\"n\">middleware</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Middleware</span><span class=\"p\">(</span><span class=\"n\">AuthenticationMiddleware</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"n\">backend</span><span class=\"p\">)])</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/my_endpoint\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@requires</span><span class=\"p\">(</span><span class=\"s1\">'my_scope'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">my_endpoint</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">PlainTextResponse</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">display_name</span><span class=\"p\">)</span>\n</pre>\n<h2>Flask</h2>\n<p>Provides a decorator <code>layabauth.flask.requires_authentication</code> to ensure that, in a context of a <code>Flask</code> application, a valid OAuth2 token was received.</p>\n<p>The <a href=\"https://tools.ietf.org/html/rfc7517\" rel=\"nofollow\">JWKs</a> URI as defined in .well-known is the only required argument.</p>\n<ul>\n<li>Azure Active Directory: <code>https://sts.windows.net/common/discovery/keys</code></li>\n<li>Microsoft Identity Platform: <code>https://sts.windows.net/common/discovery/keys</code></li>\n</ul>\n<p>If validation fails, an <code>werkzeug.exceptions.Unauthorized</code> exception is raised.\nOtherwise token is stored in <code>flask.g.token</code> and decoded token body is stored in <code>flask.g.token_body</code>.</p>\n<p>Decorator works fine on <code>flask-restplus</code> methods as well.</p>\n<p>Below is a sample <code>Flask</code> application with an endpoint requesting a Microsoft issued OAuth2 token.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">flask</span>\n<span class=\"kn\">import</span> <span class=\"nn\">layabauth.flask</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/my_endpoint\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@layabauth</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">requires_authentication</span><span class=\"p\">(</span><span class=\"s2\">\"https://sts.windows.net/common/discovery/keys\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_endpoint</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Return the content of the name entry within the decoded token body.</span>\n    <span class=\"k\">return</span> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">token_body</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">])</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h2>OpenAPI</h2>\n<p>You can generate OpenAPI 2.0 <code>security</code> definition thanks to <code>layabauth.authorizations</code>.</p>\n<p>You can generate OpenAPI 2.0 <code>method security</code> thanks to <code>layabauth.method_authorizations</code></p>\n<h2>Testing</h2>\n<p>Authentication can be mocked using <code>layabauth.testing.auth_mock</code> <code>pytest</code> fixture.</p>\n<p><code>token_body</code> <code>pytest</code> fixture returning the decoded token body used in tests must be provided.\n<code>jwks_uri</code> <code>pytest</code> fixture returning the jwks_uri used in tests must be provided.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">layabauth.testing</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">jwks_uri</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"https://sts.windows.net/common/discovery/keys\"</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">token_body</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"TEST@email.com\"</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_authentication</span><span class=\"p\">(</span><span class=\"n\">auth_mock</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/my_endpoint\"</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"Authentication\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bearer mocked_token\"</span><span class=\"p\">})</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s2\">\"TEST@email.com\"</span>\n</pre>\n<h2>How to install</h2>\n<ol>\n<li><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">python 3.6+</a> must be installed</li>\n<li>Use pip to install module:</li>\n</ol>\n<pre>python -m pip install layabauth\n</pre>\n\n          </div>"}, "last_serial": 7119504, "releases": {"3.2.0": [{"comment_text": "", "digests": {"md5": "99772b3dba3328cdea80e2512f238f4a", "sha256": "4997c89b95a601921603709e810bbedfbff6040cf3105aa09bece5b9acfeb037"}, "downloads": -1, "filename": "layabauth-3.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "99772b3dba3328cdea80e2512f238f4a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5392, "upload_time": "2019-12-02T23:24:48", "upload_time_iso_8601": "2019-12-02T23:24:48.388570Z", "url": "https://files.pythonhosted.org/packages/89/73/8114bf4ebb2750ba33faf8ea895eecb52278291db554786d7376324eaed7/layabauth-3.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42dea635d74eb44772c95aea92fc1d78", "sha256": "bab3e1cdc32c6e905f7ce2b774381d183edd963e1b18560fc7cb8dbc0143bfa9"}, "downloads": -1, "filename": "layabauth-3.2.0.tar.gz", "has_sig": false, "md5_digest": "42dea635d74eb44772c95aea92fc1d78", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4377, "upload_time": "2019-12-02T23:24:50", "upload_time_iso_8601": "2019-12-02T23:24:50.441859Z", "url": "https://files.pythonhosted.org/packages/19/c6/2b464105fc615b8f64b0bb52c8795dd82f68b29233fd653d8c5d33bca45b/layabauth-3.2.0.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "c395acf6ff6772032af0457975db4a54", "sha256": "ac8e6ba9040e0237498b2339665fcc7f8871df0d67543b5c5fa342208b4d41e5"}, "downloads": -1, "filename": "layabauth-4.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c395acf6ff6772032af0457975db4a54", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7162, "upload_time": "2020-04-20T12:09:20", "upload_time_iso_8601": "2020-04-20T12:09:20.068515Z", "url": "https://files.pythonhosted.org/packages/d6/1d/44496d0557fdd823b25baf7d8f3e6688320b5d9a87b5746db171da6b2785/layabauth-4.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "872fd02c719ecb0dd5268a6800af9187", "sha256": "883617ee45f32d80e0586a950d721b890c49a5f6aeccee7fba3a34e8dce9e57b"}, "downloads": -1, "filename": "layabauth-4.0.0.tar.gz", "has_sig": false, "md5_digest": "872fd02c719ecb0dd5268a6800af9187", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5223, "upload_time": "2020-04-20T12:09:21", "upload_time_iso_8601": "2020-04-20T12:09:21.293868Z", "url": "https://files.pythonhosted.org/packages/20/b2/df14c07b67f883c43f8f9bef740498b6f981c1bd1dcf49b4c9f59440d82b/layabauth-4.0.0.tar.gz", "yanked": false}], "4.0.1": [{"comment_text": "", "digests": {"md5": "d5f6764c07cb1098dec62baa8bf4f8a8", "sha256": "f6614e8fd3e0629fde3a66542d0519e9f05f8149d8f2c6aaed4493895cb278ab"}, "downloads": -1, "filename": "layabauth-4.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d5f6764c07cb1098dec62baa8bf4f8a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8009, "upload_time": "2020-04-28T11:56:18", "upload_time_iso_8601": "2020-04-28T11:56:18.551721Z", "url": "https://files.pythonhosted.org/packages/89/f5/d84ad7b976d5d2093bfdcc7059672a7dcbe8ad7dc257959bb2d233af32ae/layabauth-4.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86b61492ee79f1edd21c5245eb9796f1", "sha256": "9d066c5ae4cbb4dd74a85746e51036034ff314cebbf8106795119919b7cf4dd7"}, "downloads": -1, "filename": "layabauth-4.0.1.tar.gz", "has_sig": false, "md5_digest": "86b61492ee79f1edd21c5245eb9796f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5812, "upload_time": "2020-04-28T11:56:19", "upload_time_iso_8601": "2020-04-28T11:56:19.563526Z", "url": "https://files.pythonhosted.org/packages/35/da/4fbaf9726d51939fe35249a1801e8afa2f3d0a0663ef554c9525c70d9c44/layabauth-4.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d5f6764c07cb1098dec62baa8bf4f8a8", "sha256": "f6614e8fd3e0629fde3a66542d0519e9f05f8149d8f2c6aaed4493895cb278ab"}, "downloads": -1, "filename": "layabauth-4.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d5f6764c07cb1098dec62baa8bf4f8a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8009, "upload_time": "2020-04-28T11:56:18", "upload_time_iso_8601": "2020-04-28T11:56:18.551721Z", "url": "https://files.pythonhosted.org/packages/89/f5/d84ad7b976d5d2093bfdcc7059672a7dcbe8ad7dc257959bb2d233af32ae/layabauth-4.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86b61492ee79f1edd21c5245eb9796f1", "sha256": "9d066c5ae4cbb4dd74a85746e51036034ff314cebbf8106795119919b7cf4dd7"}, "downloads": -1, "filename": "layabauth-4.0.1.tar.gz", "has_sig": false, "md5_digest": "86b61492ee79f1edd21c5245eb9796f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5812, "upload_time": "2020-04-28T11:56:19", "upload_time_iso_8601": "2020-04-28T11:56:19.563526Z", "url": "https://files.pythonhosted.org/packages/35/da/4fbaf9726d51939fe35249a1801e8afa2f3d0a0663ef554c9525c70d9c44/layabauth-4.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:40 2020"}