{"info": {"author": "Axel Voitier", "author_email": "axel.voitier@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Object Brokering", "Typing :: Typed"], "description": "[![PyPI version shields.io](https://img.shields.io/pypi/v/lookups?style=for-the-badge)](https://pypi.python.org/pypi/lookups)\n[![PyPI download shields.io](https://img.shields.io/pypi/dm/lookups?style=for-the-badge)](https://pypi.python.org/pypi/lookups)\n[![PyPI Python version shields.io](https://img.shields.io/pypi/pyversions/lookups?style=for-the-badge)](https://pypi.python.org/pypi/lookups)\n[![GitHub license shields.io](https://img.shields.io/github/license/AxelVoitier/lookups?style=for-the-badge)](https://github.com/AxelVoitier/lookups/blob/master/LICENSE)\n\n[![GitHub commits since shields.io](https://img.shields.io/github/commits-since/AxelVoitier/lookups/0.1.0?style=for-the-badge)](https://github.com/AxelVoitier/lookups/commits/master)\n[![GitHub build shields.io](https://img.shields.io/github/workflow/status/AxelVoitier/lookups/Python%20package?style=for-the-badge)](https://github.com/AxelVoitier/lookups/actions)\n[![Codecov shields.io](https://img.shields.io/codecov/c/gh/AxelVoitier/lookups?style=for-the-badge)](https://codecov.io/gh/AxelVoitier/lookups)\n\n# lookups - Find object instances\n\n[DCI](https://en.wikipedia.org/wiki/Data,_context_and_interaction) lookups for Python (inspired by Netbeans Platform [Lookups API](http://wiki.netbeans.org/DevFaqLookup))\n\n## Principle\n\nA lookup is like a dict where you can store object instances as values. And the search keys are their type classes.\n\nSimply.\n\nBut `lookups` implements a bit more than that:\n* You can also lookup by parent class and not just the most subclasses of an instance.\n* You can get hold of a `lookups.Result`, which allows you to register a listener for a given class search. You will be notified when an instance of that class is added/removed from the lookup.\n* Deferred instanciation with `lookups.Convertor`. That is, an 'instance' can appear in a lookup but not be instanciated until it is actually used (ie. looked up). Useful for heavy objects or plugins.\n* `lookups.Item` can provide you with additional info on an instance: display string, persistence ID string, type, and instance itself.\n\n## `lookups.GenericLookup`\n\nThis is the most basic but versatile and dynamic lookup. (HINT: For Java folks, it corresponds to your AbstractLookup ;-) ).\n\nIt comes in two main parts:\n- `lookups.InstanceContent` provide write-access to the lookup: add/set/remove instances.\n- `lookups.GenericLookup` provide read-access to search in the lookup.\n\n```python\nfrom lookups import InstanceContent, GenericLookup\n\nmy_content = InstanceContent()\nmy_lookup = GenericLookup(my_content)\n\n# Adds some objects\nclass ParentClass:\n    pass\n\nclass ChildClass(ParentClass):\n    pass\n\nparent = ParentClass()\nmy_content.add(parent)\nchild1 = ChildClass()\nmy_content.add(child1)\nchild2 = ChildClass()\nmy_content.add(child2)\n\n...\n\n# lookup(cls): get first matching instance\n# a_match will be any of parent, child1 or child2\na_parent_match = my_lookup.lookup(ParentClass)\n\n# lookup_all(cls): get all matching instances\n# all_parent_matches is an immutable sequence\n#     of parent, child1 and child2\nall_parent_matches = my_lookup.lookup_all(ParentClass)\n# all_children_matches is an immutable sequence\n#     of child1 and child2\nall_children_matches = my_lookup.lookup_all(ChildClass)\n\n# lookup_result(cls): get a Result object for the searched class\nparent_result = my_lookup.lookup_result(ParentClass)\n# all_instances(): all instances corresponding to the searched\n#     class (ie. similar to plain lookup_all())\nparent_result.all_instances()\n# all_classes(): Immutable set of all types in the result.\n#     Here it would be set(ParentClass, ChildClass)\nparent_result.all_classes()\n\n# Lookup result listener\ndef call_me_back(result):\n    print('Result changed. Instances are now', result.all_instances())\n\nparent_result.add_lookup_listener(call_me_back)\n\n...\n\nmy_content.remove(child1)\n# -> This will invoke call_me_back()\n# You can also provide a `concurrent.futures.Executor` when\n# creating the content to control how the listeners are called:\n#     InstanceContent(notify_in: Executor = None).\n```\n\n## Other lookups\n\n* `lookups.fixed`: Simple unmodifiable lookup. Content is set at creation time.\n* `lookups.singleton`: Unmodifiable lookup that contains just one fixed object.\n* `lookups.EmptyLookup`: A lookup containing nothing.\n\n\nIndividual Contributors\n=======================\n\nA list of people who have contributed to Lookups in order of their first\ncontribution.\n\nFormat: ```Name-or-Well-known-alias <email@domain.tld> (url)```\n\n* Axel Voitier <axel.voitier@gmail.com>\n\nPlease, add yourself when you contribute!\n\nOriginal Netbeans authors of Lookup API\n=======================================\n\n* Jaroslav Tulach - Lookup API, AbstractLookup, InstanceContent, ArrayStorage\n* Marian Petras - Singleton lookup\n* David Strupl - Common lookup implementations\n\n\nCHANGELOG\n=========\n\n0.2.0 - 06 February 2020\n--------------------\n\n- Provides GenericLookup and InstanceContent, based on SetStorage. These are the first dynamic\n  lookups. They are based on Netbeans' AbstractLookup, InstanceContent and ArrayStorage.\n- Lookup listeners are just simple callables now.\n- Follows PEP 561 for packages providing typing information.\n- Improved quality assurance process (using Github Workflow as CI).\n- First (proto-)documentation.\n\n0.1.0 - 18 May 2019\n-------------------\n\n- Initial dump of code.\n- Defines the public API for lookups.\n- Provides fixed lookup: members are defined at instantiation time and never change.\n- Provides singleton lookup: only one member defined at instantiation time and never change.\n- Provides empty lookup: a special lookup with nothing in it.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AxelVoitier/lookups", "keywords": "lookup lookups dci", "license": "MPL-2.0", "maintainer": "", "maintainer_email": "", "name": "lookups", "package_url": "https://pypi.org/project/lookups/", "platform": "", "project_url": "https://pypi.org/project/lookups/", "project_urls": {"Homepage": "https://github.com/AxelVoitier/lookups"}, "release_url": "https://pypi.org/project/lookups/0.2.0/", "requires_dist": ["observable"], "requires_python": "~=3.7", "summary": "DCI lookups in Python (inspired by Netbeans Platform Lookups API)", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/lookups\" rel=\"nofollow\"><img alt=\"PyPI version shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c964e8920ab4c3956216f7291d9740239b6b0e3b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c6f6f6b7570733f7374796c653d666f722d7468652d6261646765\"></a>\n<a href=\"https://pypi.python.org/pypi/lookups\" rel=\"nofollow\"><img alt=\"PyPI download shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b74296fe0ffe4dcf5054a4d03bcc33342318c08/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6c6f6f6b7570733f7374796c653d666f722d7468652d6261646765\"></a>\n<a href=\"https://pypi.python.org/pypi/lookups\" rel=\"nofollow\"><img alt=\"PyPI Python version shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9532c307d285ceee89c8b955276f687f1edabcc4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6c6f6f6b7570733f7374796c653d666f722d7468652d6261646765\"></a>\n<a href=\"https://github.com/AxelVoitier/lookups/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd634398b605c973dae2a332d639c3b28b070bca/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4178656c566f69746965722f6c6f6f6b7570733f7374796c653d666f722d7468652d6261646765\"></a></p>\n<p><a href=\"https://github.com/AxelVoitier/lookups/commits/master\" rel=\"nofollow\"><img alt=\"GitHub commits since shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f89484255bfcf1ebcb4f9315faf18cfb16abd67/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f4178656c566f69746965722f6c6f6f6b7570732f302e312e303f7374796c653d666f722d7468652d6261646765\"></a>\n<a href=\"https://github.com/AxelVoitier/lookups/actions\" rel=\"nofollow\"><img alt=\"GitHub build shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c954a276321f62b3afbffcb8f5c24be49e55411/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f4178656c566f69746965722f6c6f6f6b7570732f507974686f6e2532307061636b6167653f7374796c653d666f722d7468652d6261646765\"></a>\n<a href=\"https://codecov.io/gh/AxelVoitier/lookups\" rel=\"nofollow\"><img alt=\"Codecov shields.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6633b485c292f4879891efd339c32e3b34f55156/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f4178656c566f69746965722f6c6f6f6b7570733f7374796c653d666f722d7468652d6261646765\"></a></p>\n<h1>lookups - Find object instances</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/Data,_context_and_interaction\" rel=\"nofollow\">DCI</a> lookups for Python (inspired by Netbeans Platform <a href=\"http://wiki.netbeans.org/DevFaqLookup\" rel=\"nofollow\">Lookups API</a>)</p>\n<h2>Principle</h2>\n<p>A lookup is like a dict where you can store object instances as values. And the search keys are their type classes.</p>\n<p>Simply.</p>\n<p>But <code>lookups</code> implements a bit more than that:</p>\n<ul>\n<li>You can also lookup by parent class and not just the most subclasses of an instance.</li>\n<li>You can get hold of a <code>lookups.Result</code>, which allows you to register a listener for a given class search. You will be notified when an instance of that class is added/removed from the lookup.</li>\n<li>Deferred instanciation with <code>lookups.Convertor</code>. That is, an 'instance' can appear in a lookup but not be instanciated until it is actually used (ie. looked up). Useful for heavy objects or plugins.</li>\n<li><code>lookups.Item</code> can provide you with additional info on an instance: display string, persistence ID string, type, and instance itself.</li>\n</ul>\n<h2><code>lookups.GenericLookup</code></h2>\n<p>This is the most basic but versatile and dynamic lookup. (HINT: For Java folks, it corresponds to your AbstractLookup ;-) ).</p>\n<p>It comes in two main parts:</p>\n<ul>\n<li><code>lookups.InstanceContent</code> provide write-access to the lookup: add/set/remove instances.</li>\n<li><code>lookups.GenericLookup</code> provide read-access to search in the lookup.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lookups</span> <span class=\"kn\">import</span> <span class=\"n\">InstanceContent</span><span class=\"p\">,</span> <span class=\"n\">GenericLookup</span>\n\n<span class=\"n\">my_content</span> <span class=\"o\">=</span> <span class=\"n\">InstanceContent</span><span class=\"p\">()</span>\n<span class=\"n\">my_lookup</span> <span class=\"o\">=</span> <span class=\"n\">GenericLookup</span><span class=\"p\">(</span><span class=\"n\">my_content</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adds some objects</span>\n<span class=\"k\">class</span> <span class=\"nc\">ParentClass</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ChildClass</span><span class=\"p\">(</span><span class=\"n\">ParentClass</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">ParentClass</span><span class=\"p\">()</span>\n<span class=\"n\">my_content</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n<span class=\"n\">child1</span> <span class=\"o\">=</span> <span class=\"n\">ChildClass</span><span class=\"p\">()</span>\n<span class=\"n\">my_content</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">child1</span><span class=\"p\">)</span>\n<span class=\"n\">child2</span> <span class=\"o\">=</span> <span class=\"n\">ChildClass</span><span class=\"p\">()</span>\n<span class=\"n\">my_content</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">child2</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># lookup(cls): get first matching instance</span>\n<span class=\"c1\"># a_match will be any of parent, child1 or child2</span>\n<span class=\"n\">a_parent_match</span> <span class=\"o\">=</span> <span class=\"n\">my_lookup</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"p\">(</span><span class=\"n\">ParentClass</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># lookup_all(cls): get all matching instances</span>\n<span class=\"c1\"># all_parent_matches is an immutable sequence</span>\n<span class=\"c1\">#     of parent, child1 and child2</span>\n<span class=\"n\">all_parent_matches</span> <span class=\"o\">=</span> <span class=\"n\">my_lookup</span><span class=\"o\">.</span><span class=\"n\">lookup_all</span><span class=\"p\">(</span><span class=\"n\">ParentClass</span><span class=\"p\">)</span>\n<span class=\"c1\"># all_children_matches is an immutable sequence</span>\n<span class=\"c1\">#     of child1 and child2</span>\n<span class=\"n\">all_children_matches</span> <span class=\"o\">=</span> <span class=\"n\">my_lookup</span><span class=\"o\">.</span><span class=\"n\">lookup_all</span><span class=\"p\">(</span><span class=\"n\">ChildClass</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># lookup_result(cls): get a Result object for the searched class</span>\n<span class=\"n\">parent_result</span> <span class=\"o\">=</span> <span class=\"n\">my_lookup</span><span class=\"o\">.</span><span class=\"n\">lookup_result</span><span class=\"p\">(</span><span class=\"n\">ParentClass</span><span class=\"p\">)</span>\n<span class=\"c1\"># all_instances(): all instances corresponding to the searched</span>\n<span class=\"c1\">#     class (ie. similar to plain lookup_all())</span>\n<span class=\"n\">parent_result</span><span class=\"o\">.</span><span class=\"n\">all_instances</span><span class=\"p\">()</span>\n<span class=\"c1\"># all_classes(): Immutable set of all types in the result.</span>\n<span class=\"c1\">#     Here it would be set(ParentClass, ChildClass)</span>\n<span class=\"n\">parent_result</span><span class=\"o\">.</span><span class=\"n\">all_classes</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Lookup result listener</span>\n<span class=\"k\">def</span> <span class=\"nf\">call_me_back</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Result changed. Instances are now'</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">all_instances</span><span class=\"p\">())</span>\n\n<span class=\"n\">parent_result</span><span class=\"o\">.</span><span class=\"n\">add_lookup_listener</span><span class=\"p\">(</span><span class=\"n\">call_me_back</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">my_content</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">child1</span><span class=\"p\">)</span>\n<span class=\"c1\"># -&gt; This will invoke call_me_back()</span>\n<span class=\"c1\"># You can also provide a `concurrent.futures.Executor` when</span>\n<span class=\"c1\"># creating the content to control how the listeners are called:</span>\n<span class=\"c1\">#     InstanceContent(notify_in: Executor = None).</span>\n</pre>\n<h2>Other lookups</h2>\n<ul>\n<li><code>lookups.fixed</code>: Simple unmodifiable lookup. Content is set at creation time.</li>\n<li><code>lookups.singleton</code>: Unmodifiable lookup that contains just one fixed object.</li>\n<li><code>lookups.EmptyLookup</code>: A lookup containing nothing.</li>\n</ul>\n<h1>Individual Contributors</h1>\n<p>A list of people who have contributed to Lookups in order of their first\ncontribution.</p>\n<p>Format: <code>Name-or-Well-known-alias &lt;email@domain.tld&gt; (url)</code></p>\n<ul>\n<li>Axel Voitier <a href=\"mailto:axel.voitier@gmail.com\">axel.voitier@gmail.com</a></li>\n</ul>\n<p>Please, add yourself when you contribute!</p>\n<h1>Original Netbeans authors of Lookup API</h1>\n<ul>\n<li>Jaroslav Tulach - Lookup API, AbstractLookup, InstanceContent, ArrayStorage</li>\n<li>Marian Petras - Singleton lookup</li>\n<li>David Strupl - Common lookup implementations</li>\n</ul>\n<h1>CHANGELOG</h1>\n<h2>0.2.0 - 06 February 2020</h2>\n<ul>\n<li>Provides GenericLookup and InstanceContent, based on SetStorage. These are the first dynamic\nlookups. They are based on Netbeans' AbstractLookup, InstanceContent and ArrayStorage.</li>\n<li>Lookup listeners are just simple callables now.</li>\n<li>Follows PEP 561 for packages providing typing information.</li>\n<li>Improved quality assurance process (using Github Workflow as CI).</li>\n<li>First (proto-)documentation.</li>\n</ul>\n<h2>0.1.0 - 18 May 2019</h2>\n<ul>\n<li>Initial dump of code.</li>\n<li>Defines the public API for lookups.</li>\n<li>Provides fixed lookup: members are defined at instantiation time and never change.</li>\n<li>Provides singleton lookup: only one member defined at instantiation time and never change.</li>\n<li>Provides empty lookup: a special lookup with nothing in it.</li>\n</ul>\n\n          </div>"}, "last_serial": 6584222, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "63031e585dcdfc5ef710841d298508be", "sha256": "94900a51bded7171ea2e04b9056a4b261d3da70dbcb41862b40c100fe68dc89a"}, "downloads": -1, "filename": "lookups-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "63031e585dcdfc5ef710841d298508be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 14204, "upload_time": "2019-05-18T14:48:02", "upload_time_iso_8601": "2019-05-18T14:48:02.611043Z", "url": "https://files.pythonhosted.org/packages/25/1f/5d4829bfed132e006d17ef6f0333ff96c5198b2ec8a1af9d341fc44452a8/lookups-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b72f8166b4ba4060b976d02521081065", "sha256": "06d150478c62753933f26d5a083aa789602dc46a31117fbe9bd1fa9feb70f3e2"}, "downloads": -1, "filename": "lookups-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b72f8166b4ba4060b976d02521081065", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 19483, "upload_time": "2019-05-18T14:48:05", "upload_time_iso_8601": "2019-05-18T14:48:05.255202Z", "url": "https://files.pythonhosted.org/packages/94/32/6e321edfe7e51c51d68b16c0d6a23721669591b4c043ca8ec0622a0c8b69/lookups-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "db994a04035263cd0a7743fc338e21dd", "sha256": "3674f29cc9aae034c8970293754d9abe53bc607416e3b8e4790ab5c83a3f50d4"}, "downloads": -1, "filename": "lookups-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "db994a04035263cd0a7743fc338e21dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 23819, "upload_time": "2020-02-06T20:28:04", "upload_time_iso_8601": "2020-02-06T20:28:04.196746Z", "url": "https://files.pythonhosted.org/packages/a8/9c/d06af1eb0c63f5adb448ca26f1f1354effe78db30b155aadf44a3f06171a/lookups-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b10d11e082f1740aabc5a2d846e2beda", "sha256": "74646f8ae049dff5e5dbad1a78d01bf6cf1b3aa3529bb61b8cf967a3b2387829"}, "downloads": -1, "filename": "lookups-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b10d11e082f1740aabc5a2d846e2beda", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 35320, "upload_time": "2020-02-06T20:28:05", "upload_time_iso_8601": "2020-02-06T20:28:05.994310Z", "url": "https://files.pythonhosted.org/packages/6b/c4/0eef9fbf2626e9c606d4c237ac347bb278b6771958af0a5212a487575afb/lookups-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db994a04035263cd0a7743fc338e21dd", "sha256": "3674f29cc9aae034c8970293754d9abe53bc607416e3b8e4790ab5c83a3f50d4"}, "downloads": -1, "filename": "lookups-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "db994a04035263cd0a7743fc338e21dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 23819, "upload_time": "2020-02-06T20:28:04", "upload_time_iso_8601": "2020-02-06T20:28:04.196746Z", "url": "https://files.pythonhosted.org/packages/a8/9c/d06af1eb0c63f5adb448ca26f1f1354effe78db30b155aadf44a3f06171a/lookups-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b10d11e082f1740aabc5a2d846e2beda", "sha256": "74646f8ae049dff5e5dbad1a78d01bf6cf1b3aa3529bb61b8cf967a3b2387829"}, "downloads": -1, "filename": "lookups-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b10d11e082f1740aabc5a2d846e2beda", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 35320, "upload_time": "2020-02-06T20:28:05", "upload_time_iso_8601": "2020-02-06T20:28:05.994310Z", "url": "https://files.pythonhosted.org/packages/6b/c4/0eef9fbf2626e9c606d4c237ac347bb278b6771958af0a5212a487575afb/lookups-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:53 2020"}