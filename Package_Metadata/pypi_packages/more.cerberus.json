{"info": {"author": "Henri Hulski", "author_email": "henri.hulski@gazeta.pl", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy"], "description": "more.cerberus: validation and normalization support for Morepath\n================================================================\n\nThis package provides Morepath integration for the Cerberus_ data validation\nlibrary:\n\n.. _Cerberus: http://python-cerberus.org\n\nCerberus can automate user input validation and normalization in a HTTP API.\n\n\nSchema\n------\n\nYou can define a schema simply as a Python dict:\n\n.. code-block:: python\n\n  user_schema = {\n    'name': {'type': 'string', 'minlength' : 3, 'required': True},\n    'age': {'type': 'integer', 'min': 0, 'required': True}\n  }\n\nAltenatively you can define the schema in yaml and load it\nwith pyyaml:\n\n.. code-block:: yaml\n\n    user:\n      name:\n        type: string\n        minlength: 3\n        required: true\n      age:\n        type: integer\n        min: 0\n        required: true\n\n\n.. code-block:: python\n\n  import yaml\n\n  with open('schema.yml') as schema:\n      schema = yaml.load(schema)\n\n  user_schema = schema['user']\n\n\nValidate\n--------\n\nThe ``more.cerberus`` integration helps\nwith validation of the request body as it is POSTed or PUT to a view.\nFirst we must create a loader for our schema:\n\n.. code-block:: python\n\n  from more.cerberus import loader\n\n  user_schema_load = loader(user_schema)\n\nWe can use this loader to handle a PUT or POST request for instance:\n\n.. code-block:: python\n\n  @App.json(model=User, request_method='POST', load=user_schema_load)\n  def user_post(self, request, json):\n      # json is now a validated and normalized dict of whatever got\n      # POST onto this view that you can use to update\n      # self\n\n\nUpdate models\n-------------\n\nBy default in PUT or PATCH requests the ``load`` function\nsets the ``update`` flag of the ``validate()`` method to ``True``,\nso required fields won\u2019t be checked. For other requests like\nPOST ``update`` is ``False``.\n\nYou can set this manually by passing the ``update`` argument\nto the ``load`` function:\n\n.. code-block:: python\n\n  user_schema_load = loader(user_schema, update=False)\n\n  @App.json(model=User, request_method='PUT', load=user_schema_load)\n  def user_put(self, request, json):\n\n\nCustomize the Validator\n-----------------------\n\nWith Cerberus you can customize the rules, data types, validators,\ncoercers (for normalization) and default setters by subclassing\nCerberusValidator:\n\n.. code-block:: python\n\n  import re\n  from more.cerberus import CerberusValidator\n\n  class CustomValidator(CerberusValidator):\n      def _check_with_validate_email(self, field, value):\n        match = re.match(\n          '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$',value\n        )\n        if match == None:\n          self._error(field, 'Not valid email')\n\n      def _normalize_coerce_normalize_email(self, value):\n          parts = value.split('@')\n          if len(parts) != 2:\n            return value\n          else:\n            domain = parts[1].lower\n            if domain == 'googlemail.com':\n              domain = 'gmail.com'\n            return parts[0] + '@' + domain\n\nYou have to pass the custom Validator class to the ``load`` function:\n\n.. code-block:: python\n\n  user_schema_load = loader(user_schema, validator=CustomValidator)\n\nNow you can use the new email validator and normalizer in your schema:\n\n.. code-block:: python\n\n  user_schema = {\n    'name': {\n      'type': 'string',\n      'minlength' : 3,\n      'required': True,\n    },\n    'email': {\n      'type': 'string',\n      'check_with': 'validate_email',\n      'coerce': 'normalize_email',\n      'required': True,\n    }\n  }\n\nor with YAML:\n\n.. code-block:: yaml\n\n  user:\n    name:\n      type: string\n      minlength: 3\n      required: true\n    email:\n      type: string\n      check_with: validate_email\n      coerce: normalize_email\n      required: true\n\nFor more information how to customize the Validator take a look at the\n`Cerberus documentation`_.\n\n.. _Cerberus documentation:\n    http://docs.python-cerberus.org/en/stable/customize.html\n\n\nUse the request or app instance in your custom validator\n--------------------------------------------------------\n\nIn ``CerberusValidator`` you can access the ``request`` through\n``self.request`` and the ``app`` through ``self.request.app``.\nLike this you can use e.g. Morepath settings and services when\nextending rules.\n\nHere an example from `auth-boilerplate`_ for custom email validation and\nnormalization using a service based on `email_validator`_:\n\n.. _auth-boilerplate: https://github.com/yacoma/auth-boilerplate\n.. _email_validator: https://github.com/JoshData/python-email-validator\n\n.. code-block:: python\n\n  from more.cerberus import CerberusValidator\n  from email_validator import EmailSyntaxError, EmailUndeliverableError\n\n\n  class Validator(CerberusValidator):\n      def _check_with_verify_email(self, field, value):\n          email_validation_service = self.request.app.service(\n              name='email_validation'\n          )\n          try:\n              email_validation_service.verify(value)\n\n          except EmailSyntaxError:\n              self._error(field, 'Not valid email')\n\n          except EmailUndeliverableError:\n              self._error(field, 'Email could not be delivered')\n\n      def _normalize_coerce_normalize_email(self, value):\n          email_validation_service = self.request.app.service(\n              name='email_validation'\n          )\n          return email_validation_service.normalize(value)\n\n\nError handling\n--------------\n\nIf validation fails due to a validation error (a required field is\nmissing, or a field is of the wrong datatype, for instance), you want\nto show some kind of error message. The ``load`` function created by\n``more.cerberus`` raises the ``more.cerberus.ValidationError`` exception\nin case of errors.\n\nThis exception object has an ``errors`` attribute with the validation errors.\nYou must define an exception view for it, otherwise validation errors are\nreturned as \"500 internal server error\" to API users.\n\nThis package provides a default exception view implementation. If you subclass\nyour application from ``more.cerberus.CerberusApp`` then you get a default\nerror view for ``ValidationError`` that has a 422 status code with a JSON\nresponse with the Cerberus errors structure:\n\n.. code-block:: python\n\n  from more.cerberus import CerberusApp\n\n  class App(CerberusApp):\n      pass\n\nNow your app has reasonable error handling built-in.\n\nIf you want a different error view you can instead create it\nby yourself, e.g.:\n\n.. code-block:: python\n\n  from more.cerberus.error import ValidationError\n\n  from .app import App\n\n\n  @App.json(model=ValidationError)\n  def validation_error(self, request):\n      @request.after\n      def set_status(response):\n          response.status = 422\n\n      errors = list(self.errors.values())[0][0]\n\n      return {\n          'errors': errors\n      }\n\nThis could be used to extract the errors from a schema wrapped into\na dictionary like:\n\n.. code-block:: yaml\n\n  article-schema:\n    article:\n      type: dict\n      schema:\n        title:\n          type: string\n          required: true\n        body:\n          type: string\n          required: true\n\n\nCHANGES\n=======\n\n0.3 (2020-04-26)\n----------------\n\n- **Removed**: Removed support for Python 2.\n\n  You have to upgrade to Python 3 if you want to use this version.\n\n- Added support for Python 3.7 and 3.8 and PyPy 3.6.\n\n- Make Python 3.7 the default testing environment.\n\n- Upgrade Cerberus to version 1.3.2.\n\n- Add integration for the Black code formatter.\n\n\n0.2 (2018-02-11)\n----------------\n\n- Add Python 3.6 support.\n- Add example for creating a custom error view to README.\n- Some smaller fixes.\n\n\n0.1 (2017-03-17)\n----------------\n\n- initial public release.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/morepath/more.cerberus", "keywords": "morepath validation", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "more.cerberus", "package_url": "https://pypi.org/project/more.cerberus/", "platform": "", "project_url": "https://pypi.org/project/more.cerberus/", "project_urls": {"Homepage": "https://github.com/morepath/more.cerberus"}, "release_url": "https://pypi.org/project/more.cerberus/0.3/", "requires_dist": ["morepath (>=0.19)", "cerberus (<2.0.0,>=1.3.2)", "pytest-cov ; extra == 'coverage'", "flake8 ; extra == 'pep8'", "black ; extra == 'pep8'", "pytest (>=2.9.1) ; extra == 'test'", "pytest-remove-stale-bytecode ; extra == 'test'", "webtest ; extra == 'test'"], "requires_python": "", "summary": "Cerberus validation support for Morepath", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"more-cerberus-validation-and-normalization-support-for-morepath\">\n<h2>more.cerberus: validation and normalization support for Morepath</h2>\n<p>This package provides Morepath integration for the <a href=\"http://python-cerberus.org\" rel=\"nofollow\">Cerberus</a> data validation\nlibrary:</p>\n<p>Cerberus can automate user input validation and normalization in a HTTP API.</p>\n<div id=\"schema\">\n<h3>Schema</h3>\n<p>You can define a schema simply as a Python dict:</p>\n<pre><span class=\"n\">user_schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> <span class=\"s1\">'minlength'</span> <span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n  <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">,</span> <span class=\"s1\">'min'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Altenatively you can define the schema in yaml and load it\nwith pyyaml:</p>\n<pre><span class=\"nt\">user</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">string</span>\n    <span class=\"nt\">minlength</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">3</span>\n    <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n  <span class=\"nt\">age</span><span class=\"p\">:</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">integer</span>\n    <span class=\"nt\">min</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">0</span>\n    <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'schema.yml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">schema</span><span class=\"p\">:</span>\n    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n\n<span class=\"n\">user_schema</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"validate\">\n<h3>Validate</h3>\n<p>The <tt>more.cerberus</tt> integration helps\nwith validation of the request body as it is POSTed or PUT to a view.\nFirst we must create a loader for our schema:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">more.cerberus</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span>\n\n<span class=\"n\">user_schema_load</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"p\">(</span><span class=\"n\">user_schema</span><span class=\"p\">)</span>\n</pre>\n<p>We can use this loader to handle a PUT or POST request for instance:</p>\n<pre><span class=\"nd\">@App</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">request_method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"n\">load</span><span class=\"o\">=</span><span class=\"n\">user_schema_load</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"p\">):</span>\n    <span class=\"c1\"># json is now a validated and normalized dict of whatever got</span>\n    <span class=\"c1\"># POST onto this view that you can use to update</span>\n    <span class=\"c1\"># self</span>\n</pre>\n</div>\n<div id=\"update-models\">\n<h3>Update models</h3>\n<p>By default in PUT or PATCH requests the <tt>load</tt> function\nsets the <tt>update</tt> flag of the <tt>validate()</tt> method to <tt>True</tt>,\nso required fields won\u2019t be checked. For other requests like\nPOST <tt>update</tt> is <tt>False</tt>.</p>\n<p>You can set this manually by passing the <tt>update</tt> argument\nto the <tt>load</tt> function:</p>\n<pre><span class=\"n\">user_schema_load</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"p\">(</span><span class=\"n\">user_schema</span><span class=\"p\">,</span> <span class=\"n\">update</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@App</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">request_method</span><span class=\"o\">=</span><span class=\"s1\">'PUT'</span><span class=\"p\">,</span> <span class=\"n\">load</span><span class=\"o\">=</span><span class=\"n\">user_schema_load</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_put</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"p\">):</span>\n</pre>\n</div>\n<div id=\"customize-the-validator\">\n<h3>Customize the Validator</h3>\n<p>With Cerberus you can customize the rules, data types, validators,\ncoercers (for normalization) and default setters by subclassing\nCerberusValidator:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">more.cerberus</span> <span class=\"kn\">import</span> <span class=\"n\">CerberusValidator</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomValidator</span><span class=\"p\">(</span><span class=\"n\">CerberusValidator</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_with_validate_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n      <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span>\n        <span class=\"s1\">'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'</span><span class=\"p\">,</span><span class=\"n\">value</span>\n      <span class=\"p\">)</span>\n      <span class=\"k\">if</span> <span class=\"n\">match</span> <span class=\"o\">==</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_error</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"s1\">'Not valid email'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_normalize_coerce_normalize_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'@'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n          <span class=\"k\">return</span> <span class=\"n\">value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n          <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span>\n          <span class=\"k\">if</span> <span class=\"n\">domain</span> <span class=\"o\">==</span> <span class=\"s1\">'googlemail.com'</span><span class=\"p\">:</span>\n            <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"s1\">'gmail.com'</span>\n          <span class=\"k\">return</span> <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s1\">'@'</span> <span class=\"o\">+</span> <span class=\"n\">domain</span>\n</pre>\n<p>You have to pass the custom Validator class to the <tt>load</tt> function:</p>\n<pre><span class=\"n\">user_schema_load</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"p\">(</span><span class=\"n\">user_schema</span><span class=\"p\">,</span> <span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">CustomValidator</span><span class=\"p\">)</span>\n</pre>\n<p>Now you can use the new email validator and normalizer in your schema:</p>\n<pre><span class=\"n\">user_schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'minlength'</span> <span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'check_with'</span><span class=\"p\">:</span> <span class=\"s1\">'validate_email'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'coerce'</span><span class=\"p\">:</span> <span class=\"s1\">'normalize_email'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>or with YAML:</p>\n<pre><span class=\"nt\">user</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">string</span>\n    <span class=\"nt\">minlength</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">3</span>\n    <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n  <span class=\"nt\">email</span><span class=\"p\">:</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">string</span>\n    <span class=\"nt\">check_with</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">validate_email</span>\n    <span class=\"nt\">coerce</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">normalize_email</span>\n    <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n</pre>\n<p>For more information how to customize the Validator take a look at the\n<a href=\"http://docs.python-cerberus.org/en/stable/customize.html\" rel=\"nofollow\">Cerberus documentation</a>.</p>\n</div>\n<div id=\"use-the-request-or-app-instance-in-your-custom-validator\">\n<h3>Use the request or app instance in your custom validator</h3>\n<p>In <tt>CerberusValidator</tt> you can access the <tt>request</tt> through\n<tt>self.request</tt> and the <tt>app</tt> through <tt>self.request.app</tt>.\nLike this you can use e.g. Morepath settings and services when\nextending rules.</p>\n<p>Here an example from <a href=\"https://github.com/yacoma/auth-boilerplate\" rel=\"nofollow\">auth-boilerplate</a> for custom email validation and\nnormalization using a service based on <a href=\"https://github.com/JoshData/python-email-validator\" rel=\"nofollow\">email_validator</a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">more.cerberus</span> <span class=\"kn\">import</span> <span class=\"n\">CerberusValidator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">email_validator</span> <span class=\"kn\">import</span> <span class=\"n\">EmailSyntaxError</span><span class=\"p\">,</span> <span class=\"n\">EmailUndeliverableError</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Validator</span><span class=\"p\">(</span><span class=\"n\">CerberusValidator</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_check_with_verify_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">email_validation_service</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'email_validation'</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">email_validation_service</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"n\">EmailSyntaxError</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_error</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"s1\">'Not valid email'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">except</span> <span class=\"n\">EmailUndeliverableError</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_error</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"s1\">'Email could not be delivered'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_normalize_coerce_normalize_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">email_validation_service</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'email_validation'</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">email_validation_service</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"error-handling\">\n<h3>Error handling</h3>\n<p>If validation fails due to a validation error (a required field is\nmissing, or a field is of the wrong datatype, for instance), you want\nto show some kind of error message. The <tt>load</tt> function created by\n<tt>more.cerberus</tt> raises the <tt>more.cerberus.ValidationError</tt> exception\nin case of errors.</p>\n<p>This exception object has an <tt>errors</tt> attribute with the validation errors.\nYou must define an exception view for it, otherwise validation errors are\nreturned as \u201c500 internal server error\u201d to API users.</p>\n<p>This package provides a default exception view implementation. If you subclass\nyour application from <tt>more.cerberus.CerberusApp</tt> then you get a default\nerror view for <tt>ValidationError</tt> that has a 422 status code with a JSON\nresponse with the Cerberus errors structure:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">more.cerberus</span> <span class=\"kn\">import</span> <span class=\"n\">CerberusApp</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">(</span><span class=\"n\">CerberusApp</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Now your app has reasonable error handling built-in.</p>\n<p>If you want a different error view you can instead create it\nby yourself, e.g.:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">more.cerberus.error</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.app</span> <span class=\"kn\">import</span> <span class=\"n\">App</span>\n\n\n<span class=\"nd\">@App</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">ValidationError</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">validation_error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"nd\">@request</span><span class=\"o\">.</span><span class=\"n\">after</span>\n    <span class=\"k\">def</span> <span class=\"nf\">set_status</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">422</span>\n\n    <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'errors'</span><span class=\"p\">:</span> <span class=\"n\">errors</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>This could be used to extract the errors from a schema wrapped into\na dictionary like:</p>\n<pre><span class=\"nt\">article-schema</span><span class=\"p\">:</span>\n  <span class=\"nt\">article</span><span class=\"p\">:</span>\n    <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">dict</span>\n    <span class=\"nt\">schema</span><span class=\"p\">:</span>\n      <span class=\"nt\">title</span><span class=\"p\">:</span>\n        <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">string</span>\n        <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n      <span class=\"nt\">body</span><span class=\"p\">:</span>\n        <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">string</span>\n        <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n</pre>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>0.3 (2020-04-26)</h3>\n<ul>\n<li><p><strong>Removed</strong>: Removed support for Python 2.</p>\n<p>You have to upgrade to Python 3 if you want to use this version.</p>\n</li>\n<li><p>Added support for Python 3.7 and 3.8 and PyPy 3.6.</p>\n</li>\n<li><p>Make Python 3.7 the default testing environment.</p>\n</li>\n<li><p>Upgrade Cerberus to version 1.3.2.</p>\n</li>\n<li><p>Add integration for the Black code formatter.</p>\n</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2 (2018-02-11)</h3>\n<ul>\n<li>Add Python 3.6 support.</li>\n<li>Add example for creating a custom error view to README.</li>\n<li>Some smaller fixes.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1 (2017-03-17)</h3>\n<ul>\n<li>initial public release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7104792, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "16cadc2b9cdc16deb79e3b848c0c081d", "sha256": "a7f4176b6d4f462516ad0e79fbb288ce9147beeb357205dedd43945d67d8b375"}, "downloads": -1, "filename": "more.cerberus-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "16cadc2b9cdc16deb79e3b848c0c081d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10534, "upload_time": "2017-03-17T18:21:06", "upload_time_iso_8601": "2017-03-17T18:21:06.570155Z", "url": "https://files.pythonhosted.org/packages/ca/bd/d0c9e2cf7049e0e1c27bf0327301ab16d66ca416c04d903a0675cfab3a23/more.cerberus-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e38ef044d5fd477738d1f3343fa86f4", "sha256": "4777184454424ea3ae6af0281f551ef94ac63561f325d6f314d85785e897cae5"}, "downloads": -1, "filename": "more.cerberus-0.1.tar.gz", "has_sig": false, "md5_digest": "3e38ef044d5fd477738d1f3343fa86f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7431, "upload_time": "2017-03-17T18:21:10", "upload_time_iso_8601": "2017-03-17T18:21:10.843740Z", "url": "https://files.pythonhosted.org/packages/d8/5a/f411786086840f903d4da852268761104c740ed3068daf161f2f0437ed68/more.cerberus-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3d0cb7fc6e2975f8a5639a9e5b073eb8", "sha256": "070812796f37549d2c19d103b3934349c080d9e71888d63e8269bd9e8b58d16b"}, "downloads": -1, "filename": "more.cerberus-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3d0cb7fc6e2975f8a5639a9e5b073eb8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11133, "upload_time": "2018-02-11T11:40:45", "upload_time_iso_8601": "2018-02-11T11:40:45.399515Z", "url": "https://files.pythonhosted.org/packages/8b/fb/c2b7981665cf0c6e6e6a157bb80841bbd280f845dfb8bce5369c16d7a42e/more.cerberus-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00ce2922befd599f13511f7fbec0eaf1", "sha256": "eb893f72162c5f29b6e3e23af24fd79c2c7f0b960492f243422c3779134ee4da"}, "downloads": -1, "filename": "more.cerberus-0.2.tar.gz", "has_sig": false, "md5_digest": "00ce2922befd599f13511f7fbec0eaf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7858, "upload_time": "2018-02-11T11:40:47", "upload_time_iso_8601": "2018-02-11T11:40:47.507703Z", "url": "https://files.pythonhosted.org/packages/e4/fe/a23ba56e85347c84a5fdab353fa09cf3d885ec982a5d8620d8917149fb1c/more.cerberus-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "6916872f6cc4075913b5894509189582", "sha256": "b40d46c9f0a428680dd6ef33bfd525004beafe6087c3330f67d98234e4137cae"}, "downloads": -1, "filename": "more.cerberus-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6916872f6cc4075913b5894509189582", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8858, "upload_time": "2020-04-26T12:34:43", "upload_time_iso_8601": "2020-04-26T12:34:43.607867Z", "url": "https://files.pythonhosted.org/packages/12/e4/c6512f6aeed0510d31d5155aba6406c8c7da86808293053ee50a1159e07b/more.cerberus-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24eca2fe7083beaf47e90b4fbca7bded", "sha256": "08753d33cf1f1832b1fe4efc56a3f9da0e7c97f9bc9764e53f585f200f64f2c9"}, "downloads": -1, "filename": "more.cerberus-0.3.tar.gz", "has_sig": false, "md5_digest": "24eca2fe7083beaf47e90b4fbca7bded", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9588, "upload_time": "2020-04-26T12:34:45", "upload_time_iso_8601": "2020-04-26T12:34:45.584639Z", "url": "https://files.pythonhosted.org/packages/54/ef/b626250917be2074b66f445f9621fd3cfaabe5eab1cb52b60ec712101837/more.cerberus-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6916872f6cc4075913b5894509189582", "sha256": "b40d46c9f0a428680dd6ef33bfd525004beafe6087c3330f67d98234e4137cae"}, "downloads": -1, "filename": "more.cerberus-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6916872f6cc4075913b5894509189582", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8858, "upload_time": "2020-04-26T12:34:43", "upload_time_iso_8601": "2020-04-26T12:34:43.607867Z", "url": "https://files.pythonhosted.org/packages/12/e4/c6512f6aeed0510d31d5155aba6406c8c7da86808293053ee50a1159e07b/more.cerberus-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24eca2fe7083beaf47e90b4fbca7bded", "sha256": "08753d33cf1f1832b1fe4efc56a3f9da0e7c97f9bc9764e53f585f200f64f2c9"}, "downloads": -1, "filename": "more.cerberus-0.3.tar.gz", "has_sig": false, "md5_digest": "24eca2fe7083beaf47e90b4fbca7bded", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9588, "upload_time": "2020-04-26T12:34:45", "upload_time_iso_8601": "2020-04-26T12:34:45.584639Z", "url": "https://files.pythonhosted.org/packages/54/ef/b626250917be2074b66f445f9621fd3cfaabe5eab1cb52b60ec712101837/more.cerberus-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:51 2020"}