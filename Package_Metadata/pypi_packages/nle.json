{"info": {"author": "The NLE Dev Team", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Nethack General Public License", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: C", "Programming Language :: C++", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Games/Entertainment", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "![NetHack Learning Environment (NLE)](dat/nle/logo.png)\n\n--------------------------------------------------------------------------------\n\nThe NetHack Learning Environment (NLE) is a Reinforcement Learning environment\nbased on [NetHack 3.6.6](https://github.com/NetHack/NetHack/tree/NetHack-3.6.6_PostRelease).\nNLE is designed to provide a standard RL interface to the game, and comes with\ntasks that function as a first step to evaluate agents on this new environment.\n\nNetHack is one of the oldest and arguably most impactful videogames in history,\nas well as being one of the hardest roguelikes currently being played by humans.\nIt is procedurally generated, rich in entities and dynamics, and overall an\nextremely challing environment for current state-of-the-art RL agents, while\nbeing much cheaper to run compared to other challenging testbeds. Through NLE,\nwe wish to establish NetHack as one of the next challenges for research in\ndecision making and machine learning.\n\nYou can read more about NetHack in its [original README](./README.nh), at\n[nethack.org](https://nethack.org/), and on the [NetHack\nwiki](https://nethackwiki.com).\n\n![Example of an agent running on NLE](dat/nle/example_run.gif)\n\n\n## NetHack Gym Environment\n\nStarting with NLE environments is extremely simple, provided one is familiar\nwith other gym environments:\n\n```python\n>>> import gym\n>>> import nle\n>>> env = gym.make(\"NetHackScore-v0\")\n>>> env.reset()  # each reset generates a new dungeon\n>>> env.step(1)  # move agent '@' north\n>>> env.render()\n```\n\n\n## Installation\n\nNLE requires `python>=3.7`, `libzmq`, and `flatbuffers` to be installed and\navailable to the system. The easiest way of getting them is to use Conda:\n\n```bash\n$ conda create -n nle python=3.7\n$ conda activate nle\n$ conda install zeromq flatbuffers\n$ pip install nle\n```\n\nOn **MacOS**, one can use `Homebrew` as follows:\n\n``` bash\n$ brew install flatbuffers zeromq\n$ sudo wget https://raw.githubusercontent.com/zeromq/cppzmq/v4.3.0/zmq.hpp -P \\\n     /usr/local/include\n```\n\nOn plain **Ubuntu 18.04** `flatbuffers` can be installed by doing:\n\n```bash\n# zmq, python, and build deps\n$ sudo apt-get install -y build-essential autoconf libtool pkg-config \\\n    python3-dev python3-pip python3-numpy git cmake libncurses5-dev \\\n    libzmq3-dev flex bison\n# building flatbuffers\n$ git clone https://github.com/google/flatbuffers.git\n$ cd flatbuffers\n$ cmake -G \"Unix Makefiles\"\n$ make\n$ sudo make install\n```\n\nIf you want to extend / develop NLE, please also setup the system as follows:\n\n``` bash\n$ git clone git@github.com:facebookresearch/nle\n$ pip install -e \".[dev]\"\n$ pre-commit install\n```\n\n\n## Trying it out\n\nNLE comes with a few scripts that allow to get some environment rollouts, and\nplay with the action space:\n\n```bash\n# Play NetHackStaircase-v0 as a human\n$ python -m nle.scripts.play\n\n# Use a random agent\n$ python -m nle.scripts.play --mode random\n\n# Play the full game using directly the NetHack internal interface\n# (Useful for debugging outside of the gym environment)\n$ python -m nle.scripts.play --env nethack  # works with random agent too\n\n# See all the options\n$ python -m nle.scripts.play --help\n```\n\nNote that `nle.scripts.play` can also be run with `nle-play`, if the package\nhas been properly installed.\n\nAdditionally, a [TorchBeast](https://github.com/facebookresearch/torchbeast)\nagent is bundled in `nle.agent` together with a simple model to provide a\nstarting point for experiments:\n\n``` bash\n$ pip install \"nle[agent]\"\n$ python -m nle.agent.agent --num_actors 80 --batch_size 32 --unroll_length 80 --learning_rate 0.0001 --entropy_cost 0.0001 --use_lstm --total_steps 1000000000\n```\n\nPlot the mean return over the last 100 episodes:\n```bash\n$ python -m nle.scripts.plot \n```\n```\n                              averaged episode return\n\n  140 +---------------------------------------------------------------------+\n      |             +             +            ++-+ ++++++++++++++++++++++++|\n      |             :             :          ++++++++||||||||||||||||||||||||\n  120 |-+...........:.............:...+-+.++++|||||||||||||||||||||||||||||||\n      |             :        +++++++++++++++||||||||||AAAAAAAAAAAAAAAAAAAAAA|\n      |            +++++++++++++||||||||||||||AAAAAAAAAAAA|||||||||||||||||||\n  100 |-+......+++++|+|||||||||||||||||||||||AA||||||||||||||||||||||||||||||\n      |       +++|||||||||||||||AAAAAAAAAAAAAA|||||||||||+++++++++++++++++++|\n      |    ++++|||||AAAAAAAAAAAAAA||||||||||||++++++++++++++-+:             |\n   80 |-++++|||||AAAAAA|||||||||||||||||||||+++++-+...........:...........+-|\n      | ++|||||AAA|||||||||||||||++++++++++++-+ :             :             |\n   60 |++||AAAAA|||||+++++++++++++-+............:.............:...........+-|\n      |++|AA||||++++++-|-+        :             :             :             |\n      |+|AA|||+++-+ :             :             :             :             |\n   40 |+|A+++++-+...:.............:.............:.............:...........+-|\n      |+AA+-+       :             :             :             :             |\n      |AA-+         :             :             :             :             |\n   20 |AA-+.........:.............:.............:.............:...........+-|\n      |++-+         :             :             :             :             |\n      |+-+          :             :             :             :             |\n    0 |-+...........:.............:.............:.............:...........+-|\n      |+            :             :             :             :             |\n      |+            +             +             +             +             |\n  -20 +---------------------------------------------------------------------+\n      0           2e+08         4e+08         6e+08         8e+08         1e+09\n                                       steps\n```\n\n\n## Related Environments\n- [gym\\_nethack](http://campbelljc.com/research/gym_nethack/)\n- [rogueinabox](https://github.com/rogueinabox/rogueinabox)\n- [rogue-gym](https://github.com/kngwyu/rogue-gym)\n- [MiniGrid](https://github.com/maximecb/gym-minigrid)\n- [CoinRun](https://github.com/openai/coinrun)\n- [Project Malmo](https://www.microsoft.com/en-us/research/project/project-malmo/)\n- [OpenAI Procgen Benchmark](https://openai.com/blog/procgen-benchmark/)\n- [Obstacle Tower](https://github.com/Unity-Technologies/obstacle-tower-env)\n\n\n## Citation\n```\n@inproceedings{kuettler2020nethack,\n  title={{The NetHack Learning Environment}},\n  author={Heinrich K\\\"{u}ttler and Nantas Nardelli and Roberta Raileanu and Marco Selvatici and Edward Grefenstette and Tim Rockt\\\"{a}schel},\n  year={2020},\n  booktitle={Workshop on Beyond Tabula Rasa in Reinforcement Learning (BeTR-RL)},\n  url={https://github.com/facebookresearch/nle},\n}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/facebookresearch/nle", "keywords": "", "license": "NetHack General Public License", "maintainer": "", "maintainer_email": "", "name": "nle", "package_url": "https://pypi.org/project/nle/", "platform": "", "project_url": "https://pypi.org/project/nle/", "project_urls": {"Homepage": "https://github.com/facebookresearch/nle"}, "release_url": "https://pypi.org/project/nle/0.1.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "The NetHack Learning Environment (NLE): a reinforcement learning environment based on NetHack", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"NetHack Learning Environment (NLE)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d8e8f6ed8094c1ee6766b4070df7fade3076e03/6461742f6e6c652f6c6f676f2e706e67\"></p>\n<hr>\n<p>The NetHack Learning Environment (NLE) is a Reinforcement Learning environment\nbased on <a href=\"https://github.com/NetHack/NetHack/tree/NetHack-3.6.6_PostRelease\" rel=\"nofollow\">NetHack 3.6.6</a>.\nNLE is designed to provide a standard RL interface to the game, and comes with\ntasks that function as a first step to evaluate agents on this new environment.</p>\n<p>NetHack is one of the oldest and arguably most impactful videogames in history,\nas well as being one of the hardest roguelikes currently being played by humans.\nIt is procedurally generated, rich in entities and dynamics, and overall an\nextremely challing environment for current state-of-the-art RL agents, while\nbeing much cheaper to run compared to other challenging testbeds. Through NLE,\nwe wish to establish NetHack as one of the next challenges for research in\ndecision making and machine learning.</p>\n<p>You can read more about NetHack in its <a href=\"./README.nh\" rel=\"nofollow\">original README</a>, at\n<a href=\"https://nethack.org/\" rel=\"nofollow\">nethack.org</a>, and on the <a href=\"https://nethackwiki.com\" rel=\"nofollow\">NetHack\nwiki</a>.</p>\n<p><img alt=\"Example of an agent running on NLE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97b122d0916f71ccd1d5754d84e7be0370ce1ba4/6461742f6e6c652f6578616d706c655f72756e2e676966\"></p>\n<h2>NetHack Gym Environment</h2>\n<p>Starting with NLE environments is extremely simple, provided one is familiar\nwith other gym environments:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">gym</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">nle</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">gym</span><span class=\"o\">.</span><span class=\"n\">make</span><span class=\"p\">(</span><span class=\"s2\">\"NetHackScore-v0\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>  <span class=\"c1\"># each reset generates a new dungeon</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># move agent '@' north</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">()</span>\n</pre>\n<h2>Installation</h2>\n<p>NLE requires <code>python&gt;=3.7</code>, <code>libzmq</code>, and <code>flatbuffers</code> to be installed and\navailable to the system. The easiest way of getting them is to use Conda:</p>\n<pre>$ conda create -n nle <span class=\"nv\">python</span><span class=\"o\">=</span><span class=\"m\">3</span>.7\n$ conda activate nle\n$ conda install zeromq flatbuffers\n$ pip install nle\n</pre>\n<p>On <strong>MacOS</strong>, one can use <code>Homebrew</code> as follows:</p>\n<pre>$ brew install flatbuffers zeromq\n$ sudo wget https://raw.githubusercontent.com/zeromq/cppzmq/v4.3.0/zmq.hpp -P <span class=\"se\">\\</span>\n     /usr/local/include\n</pre>\n<p>On plain <strong>Ubuntu 18.04</strong> <code>flatbuffers</code> can be installed by doing:</p>\n<pre><span class=\"c1\"># zmq, python, and build deps</span>\n$ sudo apt-get install -y build-essential autoconf libtool pkg-config <span class=\"se\">\\</span>\n    python3-dev python3-pip python3-numpy git cmake libncurses5-dev <span class=\"se\">\\</span>\n    libzmq3-dev flex bison\n<span class=\"c1\"># building flatbuffers</span>\n$ git clone https://github.com/google/flatbuffers.git\n$ <span class=\"nb\">cd</span> flatbuffers\n$ cmake -G <span class=\"s2\">\"Unix Makefiles\"</span>\n$ make\n$ sudo make install\n</pre>\n<p>If you want to extend / develop NLE, please also setup the system as follows:</p>\n<pre>$ git clone git@github.com:facebookresearch/nle\n$ pip install -e <span class=\"s2\">\".[dev]\"</span>\n$ pre-commit install\n</pre>\n<h2>Trying it out</h2>\n<p>NLE comes with a few scripts that allow to get some environment rollouts, and\nplay with the action space:</p>\n<pre><span class=\"c1\"># Play NetHackStaircase-v0 as a human</span>\n$ python -m nle.scripts.play\n\n<span class=\"c1\"># Use a random agent</span>\n$ python -m nle.scripts.play --mode random\n\n<span class=\"c1\"># Play the full game using directly the NetHack internal interface</span>\n<span class=\"c1\"># (Useful for debugging outside of the gym environment)</span>\n$ python -m nle.scripts.play --env nethack  <span class=\"c1\"># works with random agent too</span>\n\n<span class=\"c1\"># See all the options</span>\n$ python -m nle.scripts.play --help\n</pre>\n<p>Note that <code>nle.scripts.play</code> can also be run with <code>nle-play</code>, if the package\nhas been properly installed.</p>\n<p>Additionally, a <a href=\"https://github.com/facebookresearch/torchbeast\" rel=\"nofollow\">TorchBeast</a>\nagent is bundled in <code>nle.agent</code> together with a simple model to provide a\nstarting point for experiments:</p>\n<pre>$ pip install <span class=\"s2\">\"nle[agent]\"</span>\n$ python -m nle.agent.agent --num_actors <span class=\"m\">80</span> --batch_size <span class=\"m\">32</span> --unroll_length <span class=\"m\">80</span> --learning_rate <span class=\"m\">0</span>.0001 --entropy_cost <span class=\"m\">0</span>.0001 --use_lstm --total_steps <span class=\"m\">1000000000</span>\n</pre>\n<p>Plot the mean return over the last 100 episodes:</p>\n<pre>$ python -m nle.scripts.plot \n</pre>\n<pre><code>                              averaged episode return\n\n  140 +---------------------------------------------------------------------+\n      |             +             +            ++-+ ++++++++++++++++++++++++|\n      |             :             :          ++++++++||||||||||||||||||||||||\n  120 |-+...........:.............:...+-+.++++|||||||||||||||||||||||||||||||\n      |             :        +++++++++++++++||||||||||AAAAAAAAAAAAAAAAAAAAAA|\n      |            +++++++++++++||||||||||||||AAAAAAAAAAAA|||||||||||||||||||\n  100 |-+......+++++|+|||||||||||||||||||||||AA||||||||||||||||||||||||||||||\n      |       +++|||||||||||||||AAAAAAAAAAAAAA|||||||||||+++++++++++++++++++|\n      |    ++++|||||AAAAAAAAAAAAAA||||||||||||++++++++++++++-+:             |\n   80 |-++++|||||AAAAAA|||||||||||||||||||||+++++-+...........:...........+-|\n      | ++|||||AAA|||||||||||||||++++++++++++-+ :             :             |\n   60 |++||AAAAA|||||+++++++++++++-+............:.............:...........+-|\n      |++|AA||||++++++-|-+        :             :             :             |\n      |+|AA|||+++-+ :             :             :             :             |\n   40 |+|A+++++-+...:.............:.............:.............:...........+-|\n      |+AA+-+       :             :             :             :             |\n      |AA-+         :             :             :             :             |\n   20 |AA-+.........:.............:.............:.............:...........+-|\n      |++-+         :             :             :             :             |\n      |+-+          :             :             :             :             |\n    0 |-+...........:.............:.............:.............:...........+-|\n      |+            :             :             :             :             |\n      |+            +             +             +             +             |\n  -20 +---------------------------------------------------------------------+\n      0           2e+08         4e+08         6e+08         8e+08         1e+09\n                                       steps\n</code></pre>\n<h2>Related Environments</h2>\n<ul>\n<li><a href=\"http://campbelljc.com/research/gym_nethack/\" rel=\"nofollow\">gym_nethack</a></li>\n<li><a href=\"https://github.com/rogueinabox/rogueinabox\" rel=\"nofollow\">rogueinabox</a></li>\n<li><a href=\"https://github.com/kngwyu/rogue-gym\" rel=\"nofollow\">rogue-gym</a></li>\n<li><a href=\"https://github.com/maximecb/gym-minigrid\" rel=\"nofollow\">MiniGrid</a></li>\n<li><a href=\"https://github.com/openai/coinrun\" rel=\"nofollow\">CoinRun</a></li>\n<li><a href=\"https://www.microsoft.com/en-us/research/project/project-malmo/\" rel=\"nofollow\">Project Malmo</a></li>\n<li><a href=\"https://openai.com/blog/procgen-benchmark/\" rel=\"nofollow\">OpenAI Procgen Benchmark</a></li>\n<li><a href=\"https://github.com/Unity-Technologies/obstacle-tower-env\" rel=\"nofollow\">Obstacle Tower</a></li>\n</ul>\n<h2>Citation</h2>\n<pre><code>@inproceedings{kuettler2020nethack,\n  title={{The NetHack Learning Environment}},\n  author={Heinrich K\\\"{u}ttler and Nantas Nardelli and Roberta Raileanu and Marco Selvatici and Edward Grefenstette and Tim Rockt\\\"{a}schel},\n  year={2020},\n  booktitle={Workshop on Beyond Tabula Rasa in Reinforcement Learning (BeTR-RL)},\n  url={https://github.com/facebookresearch/nle},\n}\n</code></pre>\n\n          </div>"}, "last_serial": 7174114, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "db736c27568f7ab958d5d2479728c63e", "sha256": "ffb77dd45fd9c43a31500843a0a9a53939e662c4412315227a5b7cf767d7bd5d"}, "downloads": -1, "filename": "nle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "db736c27568f7ab958d5d2479728c63e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6934487, "upload_time": "2020-05-05T17:22:59", "upload_time_iso_8601": "2020-05-05T17:22:59.809115Z", "url": "https://files.pythonhosted.org/packages/95/02/e8a6228bdf9cbdad50b2eb2192cdc539127e5a62bcaa030b2ced09dd4040/nle-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db736c27568f7ab958d5d2479728c63e", "sha256": "ffb77dd45fd9c43a31500843a0a9a53939e662c4412315227a5b7cf767d7bd5d"}, "downloads": -1, "filename": "nle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "db736c27568f7ab958d5d2479728c63e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6934487, "upload_time": "2020-05-05T17:22:59", "upload_time_iso_8601": "2020-05-05T17:22:59.809115Z", "url": "https://files.pythonhosted.org/packages/95/02/e8a6228bdf9cbdad50b2eb2192cdc539127e5a62bcaa030b2ced09dd4040/nle-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:13 2020"}