{"info": {"author": "Victor Makarov", "author_email": "vitja.makarov@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "DictObject\n==========\n\nSubclassing this type you can declare your object model. `DictObject` itself is\n`dict` subclass so you can access object properties as attribute or as an item:\n\n .. code-block:: python\n\n    class Foo(dicty.DictObject):\n        foo = dicty.Field()\n\n    obj = Foo(foo='bar')\n    obj.foo     # 'bar'\n    obj['foo']  # 'bar'\n\nObject constructor accepts properties as keyword arguments, or you can create\ninstance with `fromjson()` classmethod that takes object dictionary (e.g. result\n`json.loads()`) as an argument:\n\n .. code-block:: python\n\n    obj = Foo(foo='bar')\n    obj = Foo.fromjson({'foo': 'bar'})\n\nYou can pass `DictObject` instance directly to json library or call `jsonize()`\nmethod first that will return plain dict version of your object with only\ndeclared fields left:\n\n .. code-block:: python\n\n    obj = Foo.fromjson({'foo': 123, 'bar': 123})\n    obj == {'foo': 123, 'bar': 123}\n    obj.jsonize() == {'foo': 123}\n\nName aliasing\n-------------\n\nIf you don't like naming scheme in JSON objects, API and so on. Dicty allows to\nchoose whatever python name you like while manually specify dictionary key. For\ninstance map camel-case keys to their underscore counterparts:\n\n .. code-block:: python\n\n    class Foo(dicty.DictObject):\n        prop_foo = dicty.Field('propFoo')\n\n    obj = Foo(prop_foo=123)\n    obj = Foo.fromjson({'propFoo': 123})\n    obj.prop_foo\n    obj['propFoo']\n\n\nSubclassing\n-----------\n\n`DictObject` supports subclassing:\n\n  .. code-block:: python\n\n    class Foo(dicty.DictObject):\n        foo = dicty.Field()\n\n\n    class Bar(Foo):\n        bar = dicty.Field()\n\n\n    obj = Bar.fromjson({'foo': 1, 'bar': 2})\n    print obj.jsonize()  # {'foo': 1, 'bar': 2}\n\nMixins are supported as well:\n\n  .. code-block:: python\n\n    class FooMixIn(object):\n        foo = dicty.Field()\n\n\n    class Bar(dicty.DictObject, FooMixIn):\n        bar = dicty.Field()\n\n\n    obj = Bar.fromjson({'foo': 1, 'bar': 2})\n    print obj.jsonize()  # {'foo': 1, 'bar': 2}\n\n\nFields\n======\n\n`dicty.Field` is baseclass for all dicty fields. You can use itself directly to\ndeclare a field with no special type info.\n\nOptional fields and default values\n----------------------------------\n\nAccessing field that is not set will lead to `AttributeError`:\nYou can specify default value for your field:\n\n .. code-block:: python\n\n    class Foo(dicty.DictObject):\n        foo = dicty.Field()\n\n    obj = Foo()\n    obj.foo  # raises AttributeError\n\nYou can mark field as optional, in this case `None` will be returned if it was\nnot set before:\n\n .. code-block:: python\n\n    class Foo(dicty.DictObject):\n        foo = dicty.Field(optional=True)\n\n    obj = Foo()\n    obj.foo  # None\n\nFor optional fields you can specify default value other than `None` with\n`default` argument:\n\n .. code-block:: python\n\n    class Foo(dicty.DictObject):\n        foo = dicty.Field(optional=True, default=123)\n\n    obj = Foo()\n    obj.foo  # 123\n    obj == {}\n\nPlease note that default value does not affect internal dictionary. But if\ndefault value is NOT hashable dict key will be set on `getattr` access.\n\nThere is also an option to suply `default_func` it's get default value for\nobject's field. It takes object instance as an argument. Value returned by\n`default_func` is always stored in dict:\n\n .. code-block:: python\n\n    class Foo(dicty.DictObject):\n        id = dicty.Field(optional=True, default_func=lambda obj: uuid.uuid4().hex)\n\n    obj = Foo()\n    obj == {}\n    obj.id  # Would be populated with newly generated UUID\n    obj == {'id': '07d0af8affaf46c885cc251e17dbc37a'}\n\n\nAvailable Fields\n----------------\n\nDicty is shipped with the follwing:\n\n`BooleanField`\n\n`DateField`\n\n`DatetimeField`\n\n`DictField`\n\n`FloatField`\n\n`IntegerField`\n\n`ListField`\n\n`NativeDateField`\n\n`NativeDatetimeField`\n\n`NumberField`\n\n`RegexpStringField`\n\n`StringField`\n\n`TypedDictField`\n\n`TypedListField`\n\n`TypedObjectField`\n\n\nSample usage\n============\n\nWith dicty you can easily describe your data model and then use it to encode/decode JSON objects. It supports\ndata validataion, optional parameters, default values, nested objects and so on. \n\n\n .. code-block:: python\n\n    import dicty\n\n\n    class MyDoc(dicty.DictObject):\n        prop1 = dicty.StringField()\n        prop2 = dicty.IntegerField()\n\n    # Regular constructor\n    doc = MyDoc(prop1='foo', prop2=123)\n    print doc.prop1     # you can access values as attributes\n    print doc['prop2']  # as well as dictionary items\n\n    print json.dumps(doc)\n    print json.dumps(doc.jsonify()) # Jsonify will clean and validate output data\n\n    # Create instance from dictionary\n    doc = MyDoc.fromjson({'prop1': 'foo', 'prop2': 123})\n\n    # would raise dicty.FieldError here\n    doc = MyDoc.fromjson({'prop1': 123, 'prop2': 123})\n\n\nNested Objects\n==============\n\n .. code-block:: python\n\n    import dicty\n\n\n    class Foo(dicty.DictObject):\n        class Bar(dicty.DictObject):\n            prop = dicty.StringField()\n\n        bar = dicty.TypedObjectField(Bar)\n\n    obj = Foo()\n    obj.bar.prop = 123\n    print obj # {'bar': {'prop': 123}}\n\n\n.. _CornerApp: https://cornerapp.com/\n\n\nMongo-style key pathes\n======================\n\nDicty allows to build key pathes that can be used to create mongo query:\n\n .. code-block:: python\n\n    class Foo(dicty.DictObject):\n        bar = dicty.Field('myBar')\n\n    print Foo.bar         # 'myBar' full path to the item\n    print Foo.bar.key     # 'myBar' only leaf key\n    print Foo.bar.attname # 'bar' python attribute name\n\n\nNested object:\n\n .. code-block:: python\n\n    class Bar(dicty.DictObject):\n        foo = dicty.TypedObjectField(Foo)\n\n    print Bar.foo            # 'foo'\n    print Bar.foo.bar        # 'foo.myBar'\n\nList of objects:\n\n .. code-block:: python\n\n    class Bar(dicty.DictObject):\n        items = dicty.TypedListField(Foo)\n\n    print Bar.items.foo        # 'items.myBar' without index\n    print Bar.items[0].foo     # 'items.0.myBar' indexed path\n\nDict of objects:\n\n .. code-block:: python\n\n    class Bar(dicty.DictObject):\n        items = dicty.TypedDictField(Foo)\n\n    # With index\n    print Bar.items['maurice'].bar  # 'items.maurice.myBar'\n\n    # Would raise IndexError\n    print Bar.items['x.y'].bar", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vitek/dicty", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "dicty", "package_url": "https://pypi.org/project/dicty/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dicty/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/vitek/dicty"}, "release_url": "https://pypi.org/project/dicty/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "A library for mapping dictionaries to Python objects", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"dictobject\">\n<h2>DictObject</h2>\n<p>Subclassing this type you can declare your object model. <cite>DictObject</cite> itself is\n<cite>dict</cite> subclass so you can access object properties as attribute or as an item:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">foo</span>     <span class=\"c1\"># 'bar'</span>\n<span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>  <span class=\"c1\"># 'bar'</span>\n</pre>\n</blockquote>\n<p>Object constructor accepts properties as keyword arguments, or you can create\ninstance with <cite>fromjson()</cite> classmethod that takes object dictionary (e.g. result\n<cite>json.loads()</cite>) as an argument:</p>\n<blockquote>\n<pre><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">fromjson</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">})</span>\n</pre>\n</blockquote>\n<p>You can pass <cite>DictObject</cite> instance directly to json library or call <cite>jsonize()</cite>\nmethod first that will return plain dict version of your object with only\ndeclared fields left:</p>\n<blockquote>\n<pre><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">fromjson</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">})</span>\n<span class=\"n\">obj</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">}</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">jsonize</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">}</span>\n</pre>\n</blockquote>\n<div id=\"name-aliasing\">\n<h3>Name aliasing</h3>\n<p>If you don\u2019t like naming scheme in JSON objects, API and so on. Dicty allows to\nchoose whatever python name you like while manually specify dictionary key. For\ninstance map camel-case keys to their underscore counterparts:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">prop_foo</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'propFoo'</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">prop_foo</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">fromjson</span><span class=\"p\">({</span><span class=\"s1\">'propFoo'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">})</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">prop_foo</span>\n<span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"s1\">'propFoo'</span><span class=\"p\">]</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"subclassing\">\n<h3>Subclassing</h3>\n<p><cite>DictObject</cite> supports subclassing:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">):</span>\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Bar</span><span class=\"o\">.</span><span class=\"n\">fromjson</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">jsonize</span><span class=\"p\">()</span>  <span class=\"c1\"># {'foo': 1, 'bar': 2}</span>\n</pre>\n</blockquote>\n<p>Mixins are supported as well:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FooMixIn</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">,</span> <span class=\"n\">FooMixIn</span><span class=\"p\">):</span>\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Bar</span><span class=\"o\">.</span><span class=\"n\">fromjson</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">jsonize</span><span class=\"p\">()</span>  <span class=\"c1\"># {'foo': 1, 'bar': 2}</span>\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"fields\">\n<h2>Fields</h2>\n<p><cite>dicty.Field</cite> is baseclass for all dicty fields. You can use itself directly to\ndeclare a field with no special type info.</p>\n<div id=\"optional-fields-and-default-values\">\n<h3>Optional fields and default values</h3>\n<p>Accessing field that is not set will lead to <cite>AttributeError</cite>:\nYou can specify default value for your field:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">foo</span>  <span class=\"c1\"># raises AttributeError</span>\n</pre>\n</blockquote>\n<p>You can mark field as optional, in this case <cite>None</cite> will be returned if it was\nnot set before:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">foo</span>  <span class=\"c1\"># None</span>\n</pre>\n</blockquote>\n<p>For optional fields you can specify default value other than <cite>None</cite> with\n<cite>default</cite> argument:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">foo</span>  <span class=\"c1\"># 123</span>\n<span class=\"n\">obj</span> <span class=\"o\">==</span> <span class=\"p\">{}</span>\n</pre>\n</blockquote>\n<p>Please note that default value does not affect internal dictionary. But if\ndefault value is NOT hashable dict key will be set on <cite>getattr</cite> access.</p>\n<p>There is also an option to suply <cite>default_func</cite> it\u2019s get default value for\nobject\u2019s field. It takes object instance as an argument. Value returned by\n<cite>default_func</cite> is always stored in dict:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default_func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span> <span class=\"o\">==</span> <span class=\"p\">{}</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">id</span>  <span class=\"c1\"># Would be populated with newly generated UUID</span>\n<span class=\"n\">obj</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'07d0af8affaf46c885cc251e17dbc37a'</span><span class=\"p\">}</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"available-fields\">\n<h3>Available Fields</h3>\n<p>Dicty is shipped with the follwing:</p>\n<p><cite>BooleanField</cite></p>\n<p><cite>DateField</cite></p>\n<p><cite>DatetimeField</cite></p>\n<p><cite>DictField</cite></p>\n<p><cite>FloatField</cite></p>\n<p><cite>IntegerField</cite></p>\n<p><cite>ListField</cite></p>\n<p><cite>NativeDateField</cite></p>\n<p><cite>NativeDatetimeField</cite></p>\n<p><cite>NumberField</cite></p>\n<p><cite>RegexpStringField</cite></p>\n<p><cite>StringField</cite></p>\n<p><cite>TypedDictField</cite></p>\n<p><cite>TypedListField</cite></p>\n<p><cite>TypedObjectField</cite></p>\n</div>\n</div>\n<div id=\"sample-usage\">\n<h2>Sample usage</h2>\n<p>With dicty you can easily describe your data model and then use it to encode/decode JSON objects. It supports\ndata validataion, optional parameters, default values, nested objects and so on.</p>\n<blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dicty</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyDoc</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">prop1</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">StringField</span><span class=\"p\">()</span>\n    <span class=\"n\">prop2</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Regular constructor</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">MyDoc</span><span class=\"p\">(</span><span class=\"n\">prop1</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">prop2</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">prop1</span>     <span class=\"c1\"># you can access values as attributes</span>\n<span class=\"nb\">print</span> <span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"s1\">'prop2'</span><span class=\"p\">]</span>  <span class=\"c1\"># as well as dictionary items</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">jsonify</span><span class=\"p\">())</span> <span class=\"c1\"># Jsonify will clean and validate output data</span>\n\n<span class=\"c1\"># Create instance from dictionary</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">MyDoc</span><span class=\"o\">.</span><span class=\"n\">fromjson</span><span class=\"p\">({</span><span class=\"s1\">'prop1'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'prop2'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># would raise dicty.FieldError here</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">MyDoc</span><span class=\"o\">.</span><span class=\"n\">fromjson</span><span class=\"p\">({</span><span class=\"s1\">'prop1'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s1\">'prop2'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">})</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"nested-objects\">\n<h2>Nested Objects</h2>\n<blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dicty</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n        <span class=\"n\">prop</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">StringField</span><span class=\"p\">()</span>\n\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">TypedObjectField</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"o\">.</span><span class=\"n\">prop</span> <span class=\"o\">=</span> <span class=\"mi\">123</span>\n<span class=\"nb\">print</span> <span class=\"n\">obj</span> <span class=\"c1\"># {'bar': {'prop': 123}}</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"mongo-style-key-pathes\">\n<h2>Mongo-style key pathes</h2>\n<p>Dicty allows to build key pathes that can be used to create mongo query:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'myBar'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">bar</span>         <span class=\"c1\"># 'myBar' full path to the item</span>\n<span class=\"nb\">print</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"o\">.</span><span class=\"n\">key</span>     <span class=\"c1\"># 'myBar' only leaf key</span>\n<span class=\"nb\">print</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"o\">.</span><span class=\"n\">attname</span> <span class=\"c1\"># 'bar' python attribute name</span>\n</pre>\n</blockquote>\n<p>Nested object:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">TypedObjectField</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">Bar</span><span class=\"o\">.</span><span class=\"n\">foo</span>            <span class=\"c1\"># 'foo'</span>\n<span class=\"nb\">print</span> <span class=\"n\">Bar</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span>        <span class=\"c1\"># 'foo.myBar'</span>\n</pre>\n</blockquote>\n<p>List of objects:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">TypedListField</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">Bar</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">foo</span>        <span class=\"c1\"># 'items.myBar' without index</span>\n<span class=\"nb\">print</span> <span class=\"n\">Bar</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">foo</span>     <span class=\"c1\"># 'items.0.myBar' indexed path</span>\n</pre>\n</blockquote>\n<p>Dict of objects:</p>\n<blockquote>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">DictObject</span><span class=\"p\">):</span>\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">dicty</span><span class=\"o\">.</span><span class=\"n\">TypedDictField</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># With index</span>\n<span class=\"nb\">print</span> <span class=\"n\">Bar</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"s1\">'maurice'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">bar</span>  <span class=\"c1\"># 'items.maurice.myBar'</span>\n\n<span class=\"c1\"># Would raise IndexError</span>\n<span class=\"nb\">print</span> <span class=\"n\">Bar</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">[</span><span class=\"s1\">'x.y'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">bar</span>\n</pre>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 2855468, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "578b6f8e928dcc5d910d7c4234f5004b", "sha256": "d35cbc091e89946f7f8840c4560e31de9b44e7daee4c286fa4d0745b0ffd00c2"}, "downloads": -1, "filename": "dicty-0.1.tar.gz", "has_sig": false, "md5_digest": "578b6f8e928dcc5d910d7c4234f5004b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3868, "upload_time": "2016-06-07T04:55:52", "upload_time_iso_8601": "2016-06-07T04:55:52.302784Z", "url": "https://files.pythonhosted.org/packages/21/95/ea620c42414401c9656ae34bf41264c03359f5720eb8339fd595c78c56e2/dicty-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cd2f2fa7a0f4c703db01325950bb9bae", "sha256": "32302f627e9c4990031bc20cb364b139b6f384da3147c77c3165a3cacc71545e"}, "downloads": -1, "filename": "dicty-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cd2f2fa7a0f4c703db01325950bb9bae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6493, "upload_time": "2017-05-06T07:13:29", "upload_time_iso_8601": "2017-05-06T07:13:29.600107Z", "url": "https://files.pythonhosted.org/packages/7e/17/f25df974c6fae8cb86f7e57eedf01c9b60ce47b51f094aa25856a0acee60/dicty-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd2f2fa7a0f4c703db01325950bb9bae", "sha256": "32302f627e9c4990031bc20cb364b139b6f384da3147c77c3165a3cacc71545e"}, "downloads": -1, "filename": "dicty-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cd2f2fa7a0f4c703db01325950bb9bae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6493, "upload_time": "2017-05-06T07:13:29", "upload_time_iso_8601": "2017-05-06T07:13:29.600107Z", "url": "https://files.pythonhosted.org/packages/7e/17/f25df974c6fae8cb86f7e57eedf01c9b60ce47b51f094aa25856a0acee60/dicty-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:30 2020"}