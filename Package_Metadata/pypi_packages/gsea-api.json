{"info": {"author": "Michal Krassowski", "author_email": "krassowski.michal+pypi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "GSEA API for Pandas\n===================\n\n|Build Status| |MIT License| |DOI|\n\nPandas API for Gene Set Enrichment Analysis in Python (GSEApy, cudaGSEA,\nGSEA)\n\n-  aims to provide a unified API for various GSEA implementations; uses\n   pandas DataFrames and a hierarchy of Pythonic classes.\n-  file exports (exporting input for GSEA) use low-level numpy functions\n   and are much faster than in pandas\n-  aims to allow researchers to easily compare different implementations\n   of GSEA, and to integrate those in projects which require\n   high-performance GSEA (e.g.\u00a0massive screening for drug-repositioning)\n-  provides useful utilities for work with GMT files, or gene sets and\n   pathways in general in Python\n\nInstallation\n------------\n\nTo install the API use:\n\n.. code:: bash\n\n   pip3 install gsea_api\n\nSee `below <#Installing-GSEA-implementations>`__ for the instructions on\ninstallation of specific GSEA implementations.\n\nExample usage\n-------------\n\n.. code:: python\n\n   from pandas import read_table\n   from gsea_api.expression_set import ExpressionSet\n   from gsea_api.gsea import GSEADesktop\n   from gsea_api.molecular_signatures_db import GeneSets\n\n   reactome_pathways = GeneSets.from_gmt('ReactomePathways.gmt')\n\n   gsea = GSEADesktop()\n\n   design = ['Disease', 'Disease', 'Disease', 'Control', 'Control', 'Control']\n   matrix = read_table('expression_data.tsv', index_col='Gene')\n\n   result = gsea.run(\n       # note: contrast() is not necessary in this simple case\n       ExpressionSet(matrix, design).contrast('Disease', 'Control'),\n       reactome_pathways,\n       metric='Signal2Noise',\n       permutations=1000\n   )\n\nWhere ``expression_data.tsv`` is in the following format:\n\n::\n\n   Gene    Patient_1   Patient_2   Patient_3   Patient_4   Patient_5   Patient_6\n   TACC2   0.2 0.1 0.4 0.6 0.7 2.1\n   TP53    2.3 0.2 2.1 2.0 0.3 0.6\n\nMSigDB integration\n~~~~~~~~~~~~~~~~~~\n\n`Molecular Signatures\nDatabase <https://www.gsea-msigdb.org/gsea/msigdb/index.jsp>`__ (MSigDB)\ncan be downloaded from the `Broad Institute GSEA\nwebsite <https://www.gsea-msigdb.org/gsea/downloads.jsp>`__. It provides\nexpert-curated gene set collections, as well as curated subset of\npathway databases (Reactome, KEGG, Biocarta, Gene Ontology) trimmed to\nremove redundant, overlapping and and otherwise little-value terms (if\nneeded).\n\nYou can download all the pathways collections at once (search for\n``ZIPped MSigDB`` on the download page). After downloading and\nun-zipping (e.g.\u00a0to a local directory named ``msigdb``), you can access\nthe gene sets from MSigDB with:\n\n.. code:: python\n\n   from gsea_api.molecular_signatures_db import MolecularSignaturesDatabase\n\n   msigdb = MolecularSignaturesDatabase('msigdb', version=7.1)\n   msigdb.gene_sets\n\n``msigdb.gene_sets`` returns a list of dictionaries describing\nauto-detected pathways:\n\n.. code:: python\n\n   [\n       {'name': 'c1.all', 'id_type': 'symbols'},\n       {'name': 'c1.all', 'id_type': 'entrez'},\n       {'name': 'c2.cp.reactome', 'id_type': 'symbols'},\n       {'name': 'c2.cp.reactome', 'id_type': 'entrez'}\n       # etc..\n   ]\n\nInformation about the location on disk and version are avilable in\n``msigdb.path`` and ``msigdb.version``.\n\n``msigdb.load`` loads the specific collection into a ``GeneSets``\nobject:\n\n.. code:: python\n\n   > kegg_pathways = msigdb.load('c2.cp.kegg', 'symbols')\n   > print(kegg_pathways)\n   <GeneSets 'c2.cp.kegg' with 186 gene sets>\n\nThis object can be passed to any of the supporteed GSEA implementations;\nplease see below for a detailed description of the ``GeneSets`` object.\n\n``GeneSets`` objects\n~~~~~~~~~~~~~~~~~~~~\n\n``GeneSets`` represents a collection of sets of genes, where each set is\nrepresented as ``GeneSet`` object.\n\nYou can check the number of sets contained within a collection with:\n\n.. code:: python\n\n   > len(kegg_pathways)\n   186\n\nThe gene sets are accessible with ``gene_sets`` (tuple) and\n``gene_sets_by_name`` (dict) properties:\n\n.. code:: python\n\n   > kegg_pathways.gene_sets[:2]\n   (<GeneSet 'KEGG_TIGHT_JUNCTION' with 132 genes>, <GeneSet 'KEGG_RNA_DEGRADATION' with 59 genes>)\n   > kegg_pathways.gene_sets_by_name\n   {\n       'KEGG_TIGHT_JUNCTION': <GeneSet 'KEGG_TIGHT_JUNCTION' with 132 genes>,\n       'KEGG_RNA_DEGRADATION': <GeneSet 'KEGG_RNA_DEGRADATION' with 59 genes>\n       # etc.\n    }\n\nSubseting collections\n^^^^^^^^^^^^^^^^^^^^^\n\nSometimes only a subset of genes is measured in an experiment. You can\nremove gene sets which do not contain any of the measured genes from the\ncollection:\n\n.. code:: python\n\n   > measured_genes = {'APOE', 'CYB5R1', 'FCER1G', 'PVR', 'HK2'}\n   > measured_subset = kegg_pathways.subset(measured_genes)\n   > print(measured_subset)\n   <GeneSets with 12 gene sets>\n\nThe skipped gene sets are accessible in\n``measured_subset.empty_gene_sets`` for inspection.\n\nTrimmming collections\n^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   > kegg_pathways.trim(min_genes=10, max_genes=20)\n   <GeneSets with 21 gene sets>\n\nPrettify names\n^^^^^^^^^^^^^^\n\n.. code:: python\n\n   def prettify_kegg_name(name):\n       return name.replace('KEGG_', '').replace('_', ' ')\n\n   kegg_pathways_pretty = kegg_pathways.format_names(prettify_kegg_name)\n   kegg_pathways_pretty.gene_sets[:2]\n   # (<GeneSet 'TIGHT JUNCTION' with 132 genes>, <GeneSet 'RNA DEGRADATION' with 59 genes>)\n\nOther properties\n^^^^^^^^^^^^^^^^\n\nOther properties and methods offered by ``GeneSets`` include: -\n``all_genes``: return a set of all genes which are covered by the gene\nsets in the collection - ``name``: the name of the collection -\n``to_frame()`` return a pandas ``DataFrame`` describing membership of\nthe genes (gene sets = rows, genes = columns), which can be used for\nUpSet visualisation (e.g.\u00a0with\n`ComplexUpset <https://github.com/krassowski/complex-upset>`__) -\n``to_gmt(path: str)`` exports the gene set to a GMT (Gene Matrix\nTransposed) file\n\nInstalling GSEA implementations\n-------------------------------\n\nFollowing GSEA implementations are supported:\n\nGSEA from Broad Institute\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLogin/register on `the official GSEA\nwebsite <http://software.broadinstitute.org/gsea/login.jsp>`__ and\ndownload the ``gsea_3.0.jar`` file (or a newer version).\n\nProvide the location of the downloaded file to ``GSEADesktop()`` using\n``gsea_jar_path`` argument, e.g.:\n\n.. code:: python\n\n   gsea = GSEADesktop(gsea_jar_path='downloads/gsea_3.0.jar')\n\nGSEApy\n~~~~~~\n\nTo use gsea.py please install it with:\n\n::\n\n   pip3 install gseapy\n\nUse it with:\n\n.. code:: python\n\n   from gsea_api.gsea import GSEApy\n\n   gsea = GSEApy()\n\ncudaGSEA\n~~~~~~~~\n\nPlease clone this fork of cudaGSEA to thirdparty directory and compile\nthe binary version (using the instructions from `this\nrepository <https://github.com/krassowski/cudaGSEA>`__):\n\n.. code:: bash\n\n   git clone https://github.com/krassowski/cudaGSEA\n\nor use `the original version <https://github.com/gravitino/cudaGSEA>`__,\nwhich does not implement FDR calculations.\n\nUse it with:\n\n.. code:: python\n\n   from gsea_api.gsea import cudaGSEA\n\n   # CPU implementation can be used with use_cpu=True\n   gsea = cudaGSEA(fdr='full', use_cpu=False)\n\nCitation\n--------\n\n|DOI|\n\nPlease also cite the authors of the wrapped tools that you use.\n\nReferences\n----------\n\nThe initial version of this code was written for a `Master thesis\nproject <https://github.com/krassowski/drug-disease-profile-matching>`__\nat Imperial College London.\n\n.. |Build Status| image:: https://travis-ci.com/krassowski/gsea-api.svg?branch=master\n   :target: https://travis-ci.com/krassowski/gsea-api\n.. |MIT License| image:: https://img.shields.io/badge/license-MIT-blue.svg?style=flat\n   :target: http://choosealicense.com/licenses/mit/\n.. |DOI| image:: https://zenodo.org/badge/188071398.svg\n   :target: https://zenodo.org/badge/latestdoi/188071398", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/krassowski/gsea-api", "keywords": "gsea,gene,set,enrichment,cuda,pandas,api,GSEApy,cudaGSEA", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gsea-api", "package_url": "https://pypi.org/project/gsea-api/", "platform": "", "project_url": "https://pypi.org/project/gsea-api/", "project_urls": {"Homepage": "https://github.com/krassowski/gsea-api"}, "release_url": "https://pypi.org/project/gsea-api/0.3.4/", "requires_dist": null, "requires_python": "", "summary": "Pandas API for Gene Set Enrichment Analysis in Python (GSEApy, cudaGSEA, GSEA)", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/krassowski/gsea-api\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/122a2c48c7a45c39ed4e88d8a7d0a09335adb1c7/68747470733a2f2f7472617669732d63692e636f6d2f6b726173736f77736b692f677365612d6170692e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://choosealicense.com/licenses/mit/\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e5be039daf9eba6b6bc47b88defd227ac24d66b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c6174\"></a> <a href=\"https://zenodo.org/badge/latestdoi/188071398\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee6436bc8984402410f014126c71d0d0584e8f8d/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3138383037313339382e737667\"></a></p>\n<p>Pandas API for Gene Set Enrichment Analysis in Python (GSEApy, cudaGSEA,\nGSEA)</p>\n<ul>\n<li>aims to provide a unified API for various GSEA implementations; uses\npandas DataFrames and a hierarchy of Pythonic classes.</li>\n<li>file exports (exporting input for GSEA) use low-level numpy functions\nand are much faster than in pandas</li>\n<li>aims to allow researchers to easily compare different implementations\nof GSEA, and to integrate those in projects which require\nhigh-performance GSEA (e.g.\u00a0massive screening for drug-repositioning)</li>\n<li>provides useful utilities for work with GMT files, or gene sets and\npathways in general in Python</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install the API use:</p>\n<pre>pip3 install gsea_api\n</pre>\n<p>See <a href=\"#Installing-GSEA-implementations\" rel=\"nofollow\">below</a> for the instructions on\ninstallation of specific GSEA implementations.</p>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pandas</span> <span class=\"kn\">import</span> <span class=\"n\">read_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gsea_api.expression_set</span> <span class=\"kn\">import</span> <span class=\"n\">ExpressionSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gsea_api.gsea</span> <span class=\"kn\">import</span> <span class=\"n\">GSEADesktop</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gsea_api.molecular_signatures_db</span> <span class=\"kn\">import</span> <span class=\"n\">GeneSets</span>\n\n<span class=\"n\">reactome_pathways</span> <span class=\"o\">=</span> <span class=\"n\">GeneSets</span><span class=\"o\">.</span><span class=\"n\">from_gmt</span><span class=\"p\">(</span><span class=\"s1\">'ReactomePathways.gmt'</span><span class=\"p\">)</span>\n\n<span class=\"n\">gsea</span> <span class=\"o\">=</span> <span class=\"n\">GSEADesktop</span><span class=\"p\">()</span>\n\n<span class=\"n\">design</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Disease'</span><span class=\"p\">,</span> <span class=\"s1\">'Disease'</span><span class=\"p\">,</span> <span class=\"s1\">'Disease'</span><span class=\"p\">,</span> <span class=\"s1\">'Control'</span><span class=\"p\">,</span> <span class=\"s1\">'Control'</span><span class=\"p\">,</span> <span class=\"s1\">'Control'</span><span class=\"p\">]</span>\n<span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"n\">read_table</span><span class=\"p\">(</span><span class=\"s1\">'expression_data.tsv'</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"s1\">'Gene'</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">gsea</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n    <span class=\"c1\"># note: contrast() is not necessary in this simple case</span>\n    <span class=\"n\">ExpressionSet</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">design</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">contrast</span><span class=\"p\">(</span><span class=\"s1\">'Disease'</span><span class=\"p\">,</span> <span class=\"s1\">'Control'</span><span class=\"p\">),</span>\n    <span class=\"n\">reactome_pathways</span><span class=\"p\">,</span>\n    <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">'Signal2Noise'</span><span class=\"p\">,</span>\n    <span class=\"n\">permutations</span><span class=\"o\">=</span><span class=\"mi\">1000</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Where <tt>expression_data.tsv</tt> is in the following format:</p>\n<pre>Gene    Patient_1   Patient_2   Patient_3   Patient_4   Patient_5   Patient_6\nTACC2   0.2 0.1 0.4 0.6 0.7 2.1\nTP53    2.3 0.2 2.1 2.0 0.3 0.6\n</pre>\n<div id=\"msigdb-integration\">\n<h3>MSigDB integration</h3>\n<p><a href=\"https://www.gsea-msigdb.org/gsea/msigdb/index.jsp\" rel=\"nofollow\">Molecular Signatures\nDatabase</a> (MSigDB)\ncan be downloaded from the <a href=\"https://www.gsea-msigdb.org/gsea/downloads.jsp\" rel=\"nofollow\">Broad Institute GSEA\nwebsite</a>. It provides\nexpert-curated gene set collections, as well as curated subset of\npathway databases (Reactome, KEGG, Biocarta, Gene Ontology) trimmed to\nremove redundant, overlapping and and otherwise little-value terms (if\nneeded).</p>\n<p>You can download all the pathways collections at once (search for\n<tt>ZIPped MSigDB</tt> on the download page). After downloading and\nun-zipping (e.g.\u00a0to a local directory named <tt>msigdb</tt>), you can access\nthe gene sets from MSigDB with:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gsea_api.molecular_signatures_db</span> <span class=\"kn\">import</span> <span class=\"n\">MolecularSignaturesDatabase</span>\n\n<span class=\"n\">msigdb</span> <span class=\"o\">=</span> <span class=\"n\">MolecularSignaturesDatabase</span><span class=\"p\">(</span><span class=\"s1\">'msigdb'</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mf\">7.1</span><span class=\"p\">)</span>\n<span class=\"n\">msigdb</span><span class=\"o\">.</span><span class=\"n\">gene_sets</span>\n</pre>\n<p><tt>msigdb.gene_sets</tt> returns a list of dictionaries describing\nauto-detected pathways:</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'c1.all'</span><span class=\"p\">,</span> <span class=\"s1\">'id_type'</span><span class=\"p\">:</span> <span class=\"s1\">'symbols'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'c1.all'</span><span class=\"p\">,</span> <span class=\"s1\">'id_type'</span><span class=\"p\">:</span> <span class=\"s1\">'entrez'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'c2.cp.reactome'</span><span class=\"p\">,</span> <span class=\"s1\">'id_type'</span><span class=\"p\">:</span> <span class=\"s1\">'symbols'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'c2.cp.reactome'</span><span class=\"p\">,</span> <span class=\"s1\">'id_type'</span><span class=\"p\">:</span> <span class=\"s1\">'entrez'</span><span class=\"p\">}</span>\n    <span class=\"c1\"># etc..</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Information about the location on disk and version are avilable in\n<tt>msigdb.path</tt> and <tt>msigdb.version</tt>.</p>\n<p><tt>msigdb.load</tt> loads the specific collection into a <tt>GeneSets</tt>\nobject:</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"n\">kegg_pathways</span> <span class=\"o\">=</span> <span class=\"n\">msigdb</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'c2.cp.kegg'</span><span class=\"p\">,</span> <span class=\"s1\">'symbols'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kegg_pathways</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">GeneSets</span> <span class=\"s1\">'c2.cp.kegg'</span> <span class=\"k\">with</span> <span class=\"mi\">186</span> <span class=\"n\">gene</span> <span class=\"n\">sets</span><span class=\"o\">&gt;</span>\n</pre>\n<p>This object can be passed to any of the supporteed GSEA implementations;\nplease see below for a detailed description of the <tt>GeneSets</tt> object.</p>\n</div>\n<div id=\"genesets-objects\">\n<h3><tt>GeneSets</tt> objects</h3>\n<p><tt>GeneSets</tt> represents a collection of sets of genes, where each set is\nrepresented as <tt>GeneSet</tt> object.</p>\n<p>You can check the number of sets contained within a collection with:</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">kegg_pathways</span><span class=\"p\">)</span>\n<span class=\"mi\">186</span>\n</pre>\n<p>The gene sets are accessible with <tt>gene_sets</tt> (tuple) and\n<tt>gene_sets_by_name</tt> (dict) properties:</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"n\">kegg_pathways</span><span class=\"o\">.</span><span class=\"n\">gene_sets</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">GeneSet</span> <span class=\"s1\">'KEGG_TIGHT_JUNCTION'</span> <span class=\"k\">with</span> <span class=\"mi\">132</span> <span class=\"n\">genes</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">GeneSet</span> <span class=\"s1\">'KEGG_RNA_DEGRADATION'</span> <span class=\"k\">with</span> <span class=\"mi\">59</span> <span class=\"n\">genes</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">kegg_pathways</span><span class=\"o\">.</span><span class=\"n\">gene_sets_by_name</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'KEGG_TIGHT_JUNCTION'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">GeneSet</span> <span class=\"s1\">'KEGG_TIGHT_JUNCTION'</span> <span class=\"k\">with</span> <span class=\"mi\">132</span> <span class=\"n\">genes</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"s1\">'KEGG_RNA_DEGRADATION'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">GeneSet</span> <span class=\"s1\">'KEGG_RNA_DEGRADATION'</span> <span class=\"k\">with</span> <span class=\"mi\">59</span> <span class=\"n\">genes</span><span class=\"o\">&gt;</span>\n    <span class=\"c1\"># etc.</span>\n <span class=\"p\">}</span>\n</pre>\n<div id=\"subseting-collections\">\n<h4>Subseting collections</h4>\n<p>Sometimes only a subset of genes is measured in an experiment. You can\nremove gene sets which do not contain any of the measured genes from the\ncollection:</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"n\">measured_genes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'APOE'</span><span class=\"p\">,</span> <span class=\"s1\">'CYB5R1'</span><span class=\"p\">,</span> <span class=\"s1\">'FCER1G'</span><span class=\"p\">,</span> <span class=\"s1\">'PVR'</span><span class=\"p\">,</span> <span class=\"s1\">'HK2'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">measured_subset</span> <span class=\"o\">=</span> <span class=\"n\">kegg_pathways</span><span class=\"o\">.</span><span class=\"n\">subset</span><span class=\"p\">(</span><span class=\"n\">measured_genes</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">measured_subset</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">GeneSets</span> <span class=\"k\">with</span> <span class=\"mi\">12</span> <span class=\"n\">gene</span> <span class=\"n\">sets</span><span class=\"o\">&gt;</span>\n</pre>\n<p>The skipped gene sets are accessible in\n<tt>measured_subset.empty_gene_sets</tt> for inspection.</p>\n</div>\n<div id=\"trimmming-collections\">\n<h4>Trimmming collections</h4>\n<pre><span class=\"o\">&gt;</span> <span class=\"n\">kegg_pathways</span><span class=\"o\">.</span><span class=\"n\">trim</span><span class=\"p\">(</span><span class=\"n\">min_genes</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">max_genes</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">GeneSets</span> <span class=\"k\">with</span> <span class=\"mi\">21</span> <span class=\"n\">gene</span> <span class=\"n\">sets</span><span class=\"o\">&gt;</span>\n</pre>\n</div>\n<div id=\"prettify-names\">\n<h4>Prettify names</h4>\n<pre><span class=\"k\">def</span> <span class=\"nf\">prettify_kegg_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'KEGG_'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'_'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">)</span>\n\n<span class=\"n\">kegg_pathways_pretty</span> <span class=\"o\">=</span> <span class=\"n\">kegg_pathways</span><span class=\"o\">.</span><span class=\"n\">format_names</span><span class=\"p\">(</span><span class=\"n\">prettify_kegg_name</span><span class=\"p\">)</span>\n<span class=\"n\">kegg_pathways_pretty</span><span class=\"o\">.</span><span class=\"n\">gene_sets</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"c1\"># (&lt;GeneSet 'TIGHT JUNCTION' with 132 genes&gt;, &lt;GeneSet 'RNA DEGRADATION' with 59 genes&gt;)</span>\n</pre>\n</div>\n<div id=\"other-properties\">\n<h4>Other properties</h4>\n<p>Other properties and methods offered by <tt>GeneSets</tt> include: -\n<tt>all_genes</tt>: return a set of all genes which are covered by the gene\nsets in the collection - <tt>name</tt>: the name of the collection -\n<tt>to_frame()</tt> return a pandas <tt>DataFrame</tt> describing membership of\nthe genes (gene sets = rows, genes = columns), which can be used for\nUpSet visualisation (e.g.\u00a0with\n<a href=\"https://github.com/krassowski/complex-upset\" rel=\"nofollow\">ComplexUpset</a>) -\n<tt>to_gmt(path: str)</tt> exports the gene set to a GMT (Gene Matrix\nTransposed) file</p>\n</div>\n</div>\n</div>\n<div id=\"installing-gsea-implementations\">\n<h2>Installing GSEA implementations</h2>\n<p>Following GSEA implementations are supported:</p>\n<div id=\"gsea-from-broad-institute\">\n<h3>GSEA from Broad Institute</h3>\n<p>Login/register on <a href=\"http://software.broadinstitute.org/gsea/login.jsp\" rel=\"nofollow\">the official GSEA\nwebsite</a> and\ndownload the <tt>gsea_3.0.jar</tt> file (or a newer version).</p>\n<p>Provide the location of the downloaded file to <tt>GSEADesktop()</tt> using\n<tt>gsea_jar_path</tt> argument, e.g.:</p>\n<pre><span class=\"n\">gsea</span> <span class=\"o\">=</span> <span class=\"n\">GSEADesktop</span><span class=\"p\">(</span><span class=\"n\">gsea_jar_path</span><span class=\"o\">=</span><span class=\"s1\">'downloads/gsea_3.0.jar'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"gseapy\">\n<h3>GSEApy</h3>\n<p>To use gsea.py please install it with:</p>\n<pre>pip3 install gseapy\n</pre>\n<p>Use it with:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gsea_api.gsea</span> <span class=\"kn\">import</span> <span class=\"n\">GSEApy</span>\n\n<span class=\"n\">gsea</span> <span class=\"o\">=</span> <span class=\"n\">GSEApy</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"cudagsea\">\n<h3>cudaGSEA</h3>\n<p>Please clone this fork of cudaGSEA to thirdparty directory and compile\nthe binary version (using the instructions from <a href=\"https://github.com/krassowski/cudaGSEA\" rel=\"nofollow\">this\nrepository</a>):</p>\n<pre>git clone https://github.com/krassowski/cudaGSEA\n</pre>\n<p>or use <a href=\"https://github.com/gravitino/cudaGSEA\" rel=\"nofollow\">the original version</a>,\nwhich does not implement FDR calculations.</p>\n<p>Use it with:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gsea_api.gsea</span> <span class=\"kn\">import</span> <span class=\"n\">cudaGSEA</span>\n\n<span class=\"c1\"># CPU implementation can be used with use_cpu=True</span>\n<span class=\"n\">gsea</span> <span class=\"o\">=</span> <span class=\"n\">cudaGSEA</span><span class=\"p\">(</span><span class=\"n\">fdr</span><span class=\"o\">=</span><span class=\"s1\">'full'</span><span class=\"p\">,</span> <span class=\"n\">use_cpu</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"citation\">\n<h2>Citation</h2>\n<p><a href=\"https://zenodo.org/badge/latestdoi/188071398\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee6436bc8984402410f014126c71d0d0584e8f8d/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3138383037313339382e737667\"></a></p>\n<p>Please also cite the authors of the wrapped tools that you use.</p>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<p>The initial version of this code was written for a <a href=\"https://github.com/krassowski/drug-disease-profile-matching\" rel=\"nofollow\">Master thesis\nproject</a>\nat Imperial College London.</p>\n</div>\n\n          </div>"}, "last_serial": 7101883, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "643b98fd0f357c69085c0939a239ef68", "sha256": "e4d2b95dc224c879e9cd3b8d39ab097e6181b6506bad4b65f2c1c08bb0be8221"}, "downloads": -1, "filename": "gsea_api-0.1.tar.gz", "has_sig": false, "md5_digest": "643b98fd0f357c69085c0939a239ef68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10957, "upload_time": "2019-07-11T18:46:25", "upload_time_iso_8601": "2019-07-11T18:46:25.557131Z", "url": "https://files.pythonhosted.org/packages/63/5f/e41aa8eee976d6037390c4531b8bab89a8011c77b74868305017d944efe6/gsea_api-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1cb99dbe077df581ec8731b4724308ad", "sha256": "0a6b5c240c7dec4236edcd10da322be85ebd1b023c053345843f5433a4448e27"}, "downloads": -1, "filename": "gsea_api-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1cb99dbe077df581ec8731b4724308ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10992, "upload_time": "2019-07-11T18:47:40", "upload_time_iso_8601": "2019-07-11T18:47:40.859985Z", "url": "https://files.pythonhosted.org/packages/c4/fe/a9236912d737b56d2fc36cc72f96f6cb3a2d380abe28c3e4b09ce10f2229/gsea_api-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "cbd05a920faf0e7c90b588fb38eb1b47", "sha256": "5c17610aff8691a7b111e9615776e28067e4e975725ac6076b20ed6fb6e7fbe6"}, "downloads": -1, "filename": "gsea_api-0.2.tar.gz", "has_sig": false, "md5_digest": "cbd05a920faf0e7c90b588fb38eb1b47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12312, "upload_time": "2020-03-08T17:48:33", "upload_time_iso_8601": "2020-03-08T17:48:33.216373Z", "url": "https://files.pythonhosted.org/packages/ad/e6/dd00907bdb834f73e4002843913588ffab18460e333db439910a67804af9/gsea_api-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "0eaefa164a2ac9feab5622de5eb2d37c", "sha256": "326359b824fae56ac03f653101f0f4f87917dca2e1c81743df0196b4e281b3d7"}, "downloads": -1, "filename": "gsea_api-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0eaefa164a2ac9feab5622de5eb2d37c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12351, "upload_time": "2020-03-09T21:33:17", "upload_time_iso_8601": "2020-03-09T21:33:17.720140Z", "url": "https://files.pythonhosted.org/packages/3d/82/30b869d2294c924845206868959b7c204304ad59c92f6761564ab6679d93/gsea_api-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "6a4d1087477c99df6e3fd9a1bb7bf1bc", "sha256": "1fd1f84c1f10547b5b3a0287044922579c8deefcb0a9fa19f37553d155e1ac99"}, "downloads": -1, "filename": "gsea_api-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6a4d1087477c99df6e3fd9a1bb7bf1bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12653, "upload_time": "2020-03-09T22:05:02", "upload_time_iso_8601": "2020-03-09T22:05:02.552587Z", "url": "https://files.pythonhosted.org/packages/79/62/60ed48ee83b39a5ab23096c2a102c5b80969a4f762960cbbb0e903381055/gsea_api-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "9c071600f55d36970edc99f1b4376671", "sha256": "c72ef71623d462a92063aa7667d35a960bd2ee5be6780d56a929dc4857c9d0f7"}, "downloads": -1, "filename": "gsea_api-0.2.3.tar.gz", "has_sig": false, "md5_digest": "9c071600f55d36970edc99f1b4376671", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12740, "upload_time": "2020-03-09T22:26:37", "upload_time_iso_8601": "2020-03-09T22:26:37.546607Z", "url": "https://files.pythonhosted.org/packages/f0/0f/624f0ad3cefb33e096bb665774054662a3d30d591ce1b5548635ce28a744/gsea_api-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "01c0df97e0158d46ef3cb308e47b348a", "sha256": "a2ff0d6ee9089c92e16c6f0241b21af90579b2571602fa4d2da0c9ffdb466798"}, "downloads": -1, "filename": "gsea_api-0.2.4.tar.gz", "has_sig": false, "md5_digest": "01c0df97e0158d46ef3cb308e47b348a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12741, "upload_time": "2020-03-09T22:39:56", "upload_time_iso_8601": "2020-03-09T22:39:56.340040Z", "url": "https://files.pythonhosted.org/packages/a4/45/bfa76819d87eb645fe6811750f303224b888d102d6838d90974ff0e68154/gsea_api-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "d6560eace5268c478fe378b5e8f7f6bf", "sha256": "6fb5dd2f58abf07b34e8024499de0f80840a18e44a7a46bd0783b54a0abf030a"}, "downloads": -1, "filename": "gsea_api-0.2.5.tar.gz", "has_sig": false, "md5_digest": "d6560eace5268c478fe378b5e8f7f6bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12990, "upload_time": "2020-04-16T01:04:13", "upload_time_iso_8601": "2020-04-16T01:04:13.913137Z", "url": "https://files.pythonhosted.org/packages/94/10/829529ba4a72d54612e32e418a7fe2ebb4b7a5032a96cb334b5aaad6eb84/gsea_api-0.2.5.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "1449d369bdf0724039d57a1fc2861ea4", "sha256": "c8cfb6674bf4ea53d2535b1945d01a704bfab75178a7aab83c06020731fba208"}, "downloads": -1, "filename": "gsea_api-0.3.tar.gz", "has_sig": false, "md5_digest": "1449d369bdf0724039d57a1fc2861ea4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13185, "upload_time": "2020-04-16T17:14:37", "upload_time_iso_8601": "2020-04-16T17:14:37.567255Z", "url": "https://files.pythonhosted.org/packages/a3/37/248aed2210d9020c5c4aee3a34810187291859c7600640caf93ae66d84a4/gsea_api-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "118f95a99b03c4c55b7a6d8b681fbe63", "sha256": "c8f7f9458fdc5417214359644e12741270f02783fbd8f7851044b2795bf71306"}, "downloads": -1, "filename": "gsea_api-0.3.1.tar.gz", "has_sig": false, "md5_digest": "118f95a99b03c4c55b7a6d8b681fbe63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13194, "upload_time": "2020-04-16T17:22:04", "upload_time_iso_8601": "2020-04-16T17:22:04.054901Z", "url": "https://files.pythonhosted.org/packages/f9/47/248417345f783226ec1cdf271cb61bf7222c9410aed9a5fa0f197d2cee5a/gsea_api-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "8304f94c7550213ed296b8e649783194", "sha256": "3066b512a5b139155090d02e99dffbba6e0986585f46d91d87464c4fc8d00061"}, "downloads": -1, "filename": "gsea_api-0.3.2.tar.gz", "has_sig": false, "md5_digest": "8304f94c7550213ed296b8e649783194", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13209, "upload_time": "2020-04-21T15:35:29", "upload_time_iso_8601": "2020-04-21T15:35:29.561275Z", "url": "https://files.pythonhosted.org/packages/69/38/36515c8db1837c9973d9cdb91a9481a3f1aa06e5080ff1979163738ae432/gsea_api-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "495ceca72186d53aa988aaae11158292", "sha256": "7d45d754ff7b04b7c34750d4289191307a7fda71300981553ea603eb7fe72576"}, "downloads": -1, "filename": "gsea_api-0.3.3.tar.gz", "has_sig": false, "md5_digest": "495ceca72186d53aa988aaae11158292", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16700, "upload_time": "2020-04-25T20:26:21", "upload_time_iso_8601": "2020-04-25T20:26:21.995368Z", "url": "https://files.pythonhosted.org/packages/45/a7/ec5318c33abe622e03d4dba4bbcdd62456d905f05e17748deaf404bde746/gsea_api-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "7d0ab2f4b2ef40ec4b525521ad31f8c0", "sha256": "d2dcf0a0d86ef5e90fc7a6e6168a5abd0447f07ddbae3d7c0aafd5068f138928"}, "downloads": -1, "filename": "gsea_api-0.3.4.tar.gz", "has_sig": false, "md5_digest": "7d0ab2f4b2ef40ec4b525521ad31f8c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16610, "upload_time": "2020-04-25T23:57:57", "upload_time_iso_8601": "2020-04-25T23:57:57.137401Z", "url": "https://files.pythonhosted.org/packages/fd/aa/61d32beb63da52ee32efbdfeb66dde13cf6720dfefa060a4ccfe2da6d095/gsea_api-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d0ab2f4b2ef40ec4b525521ad31f8c0", "sha256": "d2dcf0a0d86ef5e90fc7a6e6168a5abd0447f07ddbae3d7c0aafd5068f138928"}, "downloads": -1, "filename": "gsea_api-0.3.4.tar.gz", "has_sig": false, "md5_digest": "7d0ab2f4b2ef40ec4b525521ad31f8c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16610, "upload_time": "2020-04-25T23:57:57", "upload_time_iso_8601": "2020-04-25T23:57:57.137401Z", "url": "https://files.pythonhosted.org/packages/fd/aa/61d32beb63da52ee32efbdfeb66dde13cf6720dfefa060a4ccfe2da6d095/gsea_api-0.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:42 2020"}