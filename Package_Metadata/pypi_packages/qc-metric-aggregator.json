{"info": {"author": "Adam Coffman", "author_email": "acoffman@wustl.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# qc-metric-aggregator\n\n[![Build Status](https://travis-ci.org/genome/qc-metric-aggregator.svg?branch=master)](https://travis-ci.org/genome/qc-metric-aggregator)\n\nParse individual metrics out of a directory of QC results for genomic data and output a report containing the desired metrics and the overall PASS/FAIL status of the sample.\n\n\n#### Installation\n\n------------\n\n`pip install qc-metric-aggregator`\n\n------------\n\n#### Usage\n\n------------\n\n    usage: aggregate-qc-metrics [-h]\n                                sample_name metrics_dir output_file threshold_file\n\n    positional arguments:\n      sample_name     The sample name or id for which the QC metrics apply\n      metrics_dir     The directory to search for metric files, often a cromwell\n                      run directory\n      output_file     File path to store the finalized mertrics TSV\n      threshold_file  Path to the yml thresholds file to validate against\n\n    optional arguments:\n      -h, --help      show this help message and exit\n\n\nExample invocation:\n\n    aggregate-qc-metrics HG00096 /opt/qc/results/HG00096/WholeGenomeSingleSampleQc /opt/qc/scores/qc_results.tsv thresholds.yml\n\n------------\n**Output formats**\n\n\nComing soon...\n\n------------\n**Threshold file**\n\nYou will need to pass in a YAML file containing pass/fail threshold tests for the metrics you are interested in. The file format consists of a list of objects each containing the following keys:\n\n| Key | Value | Comments |\n| --------------- | --------------- | --------------- |\n| `metric_name`| Name of the metric to check| This can be any [supported metric](https://github.com/genome/qc-metric-aggregator/tree/master/process_metrics/metrics) and should be the value returned by `name`. |\n| `operator` | Which operation to use to compare the metric value to the PASS/FAIL threshold| `<`,`<=`,`>`,`>=`, and `=` are all supported. If you instead specify `report` the metric will be reported in the final output, but not factored into the PASS/FAIL status. |\n| `value` | The PASS/FAIL threshold to compare the metric value to | This field is optional if `report` is specified for the `operator`.|\n\nAn example can be [found here](https://github.com/genome/qc-metric-aggregator/blob/master/thresholds.yml.example)\n\n\n------------\n**Supported Metrics**\n\n| Name  |  Description | Originating Tool  |\n|---|---|---|\n| FREEMIX | Freemix  |  VerifyBamId2 |\n| Q20_BASES  |  Total bases with Q20 or higher | Picard CollectQualityYieldMetrics   |\n| MEAN_COVERAGE  | Haploid Coverage  | Picard CollectWgsMetrics  |\n| PCT_10X  | Percent coverage at 10x  | Picard CollectWgsMetrics  |\n| PCT_20X  | Percent coverage at 20x  | Picard CollectWgsMetrics  |\n| PCT_30X  | Percent coverage at 30x |  Picard CollectWgsMetrics |\n| PCT_CHIMERAS   | Percent chimeras (PAIR)   | Picard CollectAlignmentSummaryMetrics  |\n| READ1_PF_MISMATCH_RATE  |  Read 1 base mismatch rate | Picard CollectAlignmentSummaryMetrics  |\n| READ2_PF_MISMATCH_RATE  |  Read 2 base mismatch rate |  Picard CollectAlignmentSummaryMetrics |\n| MEDIAN_INSERT_SIZE  | Library insert size median  | Picard CollectInsertSizeMetrics  |\n| MEDIAN_ABSOLUTE_DEVIATION  | Library insert size mad  | Picard CollectInsertSizeMetrics |\n| PERCENT_DUPLICATION  | Percent duplicate marked reads  | Picard CollectDuplicateMetrics  |\n\n\n------------\n**Adding Additional Metrics**\n\n\nTo add support for additional metrics you simply need to subclass [Metric](https://github.com/genome/qc-metric-aggregator/blob/master/process_metrics/metrics/metric.py) and register it in [AvailableMetrics](https://github.com/genome/qc-metric-aggregator/blob/master/process_metrics/metrics/available_metrics.py)\n\nBecause many QC metrics are output in TSV format, there is a helper class [TSVMetric](https://github.com/genome/qc-metric-aggregator/blob/master/process_metrics/metrics/tsv_metric.py) that you can inherent from in addition to `Metric` that will make that easier. All of the currently supported metrics use this helper, so you should be able to look to them for examples.\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/genome/qc-metric-aggregator", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "qc-metric-aggregator", "package_url": "https://pypi.org/project/qc-metric-aggregator/", "platform": "", "project_url": "https://pypi.org/project/qc-metric-aggregator/", "project_urls": {"Homepage": "https://github.com/genome/qc-metric-aggregator"}, "release_url": "https://pypi.org/project/qc-metric-aggregator/0.1.2/", "requires_dist": ["pyyaml"], "requires_python": "", "summary": "Given the output directory of a QC pipeline and a threshold config file, parse out the desired metrics and evalute them against the thresholds.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>qc-metric-aggregator</h1>\n<p><a href=\"https://travis-ci.org/genome/qc-metric-aggregator\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f58aba3fc21960a78ead4576b8da3628547092b8/68747470733a2f2f7472617669732d63692e6f72672f67656e6f6d652f71632d6d65747269632d61676772656761746f722e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Parse individual metrics out of a directory of QC results for genomic data and output a report containing the desired metrics and the overall PASS/FAIL status of the sample.</p>\n<h4>Installation</h4>\n<hr>\n<p><code>pip install qc-metric-aggregator</code></p>\n<hr>\n<h4>Usage</h4>\n<hr>\n<pre><code>usage: aggregate-qc-metrics [-h]\n                            sample_name metrics_dir output_file threshold_file\n\npositional arguments:\n  sample_name     The sample name or id for which the QC metrics apply\n  metrics_dir     The directory to search for metric files, often a cromwell\n                  run directory\n  output_file     File path to store the finalized mertrics TSV\n  threshold_file  Path to the yml thresholds file to validate against\n\noptional arguments:\n  -h, --help      show this help message and exit\n</code></pre>\n<p>Example invocation:</p>\n<pre><code>aggregate-qc-metrics HG00096 /opt/qc/results/HG00096/WholeGenomeSingleSampleQc /opt/qc/scores/qc_results.tsv thresholds.yml\n</code></pre>\n<hr>\n<p><strong>Output formats</strong></p>\n<p>Coming soon...</p>\n<hr>\n<p><strong>Threshold file</strong></p>\n<p>You will need to pass in a YAML file containing pass/fail threshold tests for the metrics you are interested in. The file format consists of a list of objects each containing the following keys:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>metric_name</code></td>\n<td>Name of the metric to check</td>\n<td>This can be any <a href=\"https://github.com/genome/qc-metric-aggregator/tree/master/process_metrics/metrics\" rel=\"nofollow\">supported metric</a> and should be the value returned by <code>name</code>.</td>\n</tr>\n<tr>\n<td><code>operator</code></td>\n<td>Which operation to use to compare the metric value to the PASS/FAIL threshold</td>\n<td><code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>,<code>&gt;=</code>, and <code>=</code> are all supported. If you instead specify <code>report</code> the metric will be reported in the final output, but not factored into the PASS/FAIL status.</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>The PASS/FAIL threshold to compare the metric value to</td>\n<td>This field is optional if <code>report</code> is specified for the <code>operator</code>.</td>\n</tr></tbody></table>\n<p>An example can be <a href=\"https://github.com/genome/qc-metric-aggregator/blob/master/thresholds.yml.example\" rel=\"nofollow\">found here</a></p>\n<hr>\n<p><strong>Supported Metrics</strong></p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Originating Tool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FREEMIX</td>\n<td>Freemix</td>\n<td>VerifyBamId2</td>\n</tr>\n<tr>\n<td>Q20_BASES</td>\n<td>Total bases with Q20 or higher</td>\n<td>Picard CollectQualityYieldMetrics</td>\n</tr>\n<tr>\n<td>MEAN_COVERAGE</td>\n<td>Haploid Coverage</td>\n<td>Picard CollectWgsMetrics</td>\n</tr>\n<tr>\n<td>PCT_10X</td>\n<td>Percent coverage at 10x</td>\n<td>Picard CollectWgsMetrics</td>\n</tr>\n<tr>\n<td>PCT_20X</td>\n<td>Percent coverage at 20x</td>\n<td>Picard CollectWgsMetrics</td>\n</tr>\n<tr>\n<td>PCT_30X</td>\n<td>Percent coverage at 30x</td>\n<td>Picard CollectWgsMetrics</td>\n</tr>\n<tr>\n<td>PCT_CHIMERAS</td>\n<td>Percent chimeras (PAIR)</td>\n<td>Picard CollectAlignmentSummaryMetrics</td>\n</tr>\n<tr>\n<td>READ1_PF_MISMATCH_RATE</td>\n<td>Read 1 base mismatch rate</td>\n<td>Picard CollectAlignmentSummaryMetrics</td>\n</tr>\n<tr>\n<td>READ2_PF_MISMATCH_RATE</td>\n<td>Read 2 base mismatch rate</td>\n<td>Picard CollectAlignmentSummaryMetrics</td>\n</tr>\n<tr>\n<td>MEDIAN_INSERT_SIZE</td>\n<td>Library insert size median</td>\n<td>Picard CollectInsertSizeMetrics</td>\n</tr>\n<tr>\n<td>MEDIAN_ABSOLUTE_DEVIATION</td>\n<td>Library insert size mad</td>\n<td>Picard CollectInsertSizeMetrics</td>\n</tr>\n<tr>\n<td>PERCENT_DUPLICATION</td>\n<td>Percent duplicate marked reads</td>\n<td>Picard CollectDuplicateMetrics</td>\n</tr></tbody></table>\n<hr>\n<p><strong>Adding Additional Metrics</strong></p>\n<p>To add support for additional metrics you simply need to subclass <a href=\"https://github.com/genome/qc-metric-aggregator/blob/master/process_metrics/metrics/metric.py\" rel=\"nofollow\">Metric</a> and register it in <a href=\"https://github.com/genome/qc-metric-aggregator/blob/master/process_metrics/metrics/available_metrics.py\" rel=\"nofollow\">AvailableMetrics</a></p>\n<p>Because many QC metrics are output in TSV format, there is a helper class <a href=\"https://github.com/genome/qc-metric-aggregator/blob/master/process_metrics/metrics/tsv_metric.py\" rel=\"nofollow\">TSVMetric</a> that you can inherent from in addition to <code>Metric</code> that will make that easier. All of the currently supported metrics use this helper, so you should be able to look to them for examples.</p>\n\n          </div>"}, "last_serial": 6884270, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "b676376fb8874795d003dfd9ee32bda7", "sha256": "73cccd89d6388559b092aab6c2ae23254ffb37f95a9aba1fef200d66c421b326"}, "downloads": -1, "filename": "qc_metric_aggregator-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b676376fb8874795d003dfd9ee32bda7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15675, "upload_time": "2020-03-25T20:00:37", "upload_time_iso_8601": "2020-03-25T20:00:37.339038Z", "url": "https://files.pythonhosted.org/packages/76/b0/04b2354c36b2e401eeb983e9fed3a1e487332704adac97f6fc8007c808b2/qc_metric_aggregator-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7e4276a0250986b34602f5d1eacca88", "sha256": "768a82df3f2a5ab523a41f2c1ce9d0cb2663e2dc99a047fbc962603764bde164"}, "downloads": -1, "filename": "qc-metric-aggregator-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c7e4276a0250986b34602f5d1eacca88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8409, "upload_time": "2020-03-25T20:00:38", "upload_time_iso_8601": "2020-03-25T20:00:38.293512Z", "url": "https://files.pythonhosted.org/packages/6f/cc/6f4a72d08cc2e67a9bdb9150a17f53e6ec224c301a96258691b4ac1cff33/qc-metric-aggregator-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b676376fb8874795d003dfd9ee32bda7", "sha256": "73cccd89d6388559b092aab6c2ae23254ffb37f95a9aba1fef200d66c421b326"}, "downloads": -1, "filename": "qc_metric_aggregator-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b676376fb8874795d003dfd9ee32bda7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15675, "upload_time": "2020-03-25T20:00:37", "upload_time_iso_8601": "2020-03-25T20:00:37.339038Z", "url": "https://files.pythonhosted.org/packages/76/b0/04b2354c36b2e401eeb983e9fed3a1e487332704adac97f6fc8007c808b2/qc_metric_aggregator-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7e4276a0250986b34602f5d1eacca88", "sha256": "768a82df3f2a5ab523a41f2c1ce9d0cb2663e2dc99a047fbc962603764bde164"}, "downloads": -1, "filename": "qc-metric-aggregator-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c7e4276a0250986b34602f5d1eacca88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8409, "upload_time": "2020-03-25T20:00:38", "upload_time_iso_8601": "2020-03-25T20:00:38.293512Z", "url": "https://files.pythonhosted.org/packages/6f/cc/6f4a72d08cc2e67a9bdb9150a17f53e6ec224c301a96258691b4ac1cff33/qc-metric-aggregator-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:59 2020"}