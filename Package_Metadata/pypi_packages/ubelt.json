{"info": {"author": "Jon Crall", "author_email": "erotemic@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "|ReadTheDocs| |Pypi| |Downloads| |Codecov| |CircleCI| |Travis| |Appveyor| |CodeQuality|\n\n\n.. The large version wont work because github strips rst image rescaling. https://i.imgur.com/AcWVroL.png\n.. image:: https://i.imgur.com/PoYIsWE.png\n   :height: 100px\n   :align: left\n\n\n..   .. raw:: html\n..       <img src=\"https://i.imgur.com/AcWVroL.png\" height=\"100px\">\n\nUbelt is a small library of robust, tested, documented, and simple functions\nthat extend the Python standard library. It has a flat API that all behaves\nsimilarly on Windows, Mac, and Linux (up to some small unavoidable\ndifferences).  Almost every function in ``ubelt`` was written with a doctest.\nThis provides helpful documentation and example usage as well as helping\nachieve 100% test coverage (with minor exceptions for Python2, Windows,\netc...). \n\n* Goal: provide simple functions that accomplish common tasks not yet addressed by the python standard library.\n\n* Constraints: Must be low-impact pure python; it should be easy to install and use.\n\n* Method: All functions are written with docstrings and doctests to ensure that a baseline level of documentation and testing always exists (even if functions are copy/pasted into other libraries)\n\n* Motto: Good utilities lift all codes. \n\n\nRead the docs here: http://ubelt.readthedocs.io/en/latest/\n\nThese are some of the tasks that ubelt's API enables:\n\n  - hash common data structures\n\n  - hash files\n\n  - cache a block of code \n\n  - time a block of code\n\n  - download a file\n\n  - run shell commands\n\n  - string-format nested data structures\n\n  - make a directory if it doesn't exist\n\n  - expand environment variables and tildes in path strings\n\n  - map a function over the keys or values of a dictionary\n\n  - perform set operations on dictionaries\n\n  - perform dictionary operations like histogram, duplicates, and inversion \n\n  - delete a file or directory\n\n  - import a module using the path to that module \n\n  - check if a particular flag or value is on the command line\n\n  - color text with ANSI tags\n\n  - get paths to cross platform data/cache/config directories\n\n  - create cross platform symlinks \n\n  - horizontally concatenate multiline strings\n\n  - access defaultdict and OrderedDict by ddict and odict aliases\n\n  - build ordered sets\n\n  - memoize functions\n\n  - argmax/min/sort on dictionaries\n\nUbelt is small. Its top-level API is defined using roughly 40 lines:\n\n.. code:: python\n\n    from ubelt.util_arg import (argflag, argval,)\n    from ubelt.util_cache import (CacheStamp, Cacher,)\n    from ubelt.util_colors import (color_text, highlight_code,)\n    from ubelt.util_const import (NoParam,)\n    from ubelt.util_cmd import (cmd,)\n    from ubelt.util_dict import (AutoDict, AutoOrderedDict, ddict, dict_diff,\n                                 dict_hist, dict_isect, dict_subset, dict_union,\n                                 dzip, find_duplicates, group_items, invert_dict,\n                                 map_keys, map_vals, odict, sorted_keys,\n                                 sorted_vals,)\n    from ubelt.util_download import (download, grabdata,)\n    from ubelt.util_func import (identity, inject_method,)\n    from ubelt.util_format import (FormatterExtensions, repr2,)\n    from ubelt.util_io import (delete, readfrom, touch, writeto,)\n    from ubelt.util_links import (symlink,)\n    from ubelt.util_list import (allsame, argmax, argmin, argsort, argunique,\n                                 boolmask, chunks, compress, flatten, iter_window,\n                                 iterable, peek, take, unique, unique_flags,)\n    from ubelt.util_hash import (hash_data, hash_file,)\n    from ubelt.util_import import (import_module_from_name,\n                                   import_module_from_path, modname_to_modpath,\n                                   modpath_to_modname, split_modpath,)\n    from ubelt.util_memoize import (memoize, memoize_method, memoize_property,)\n    from ubelt.util_mixins import (NiceRepr,)\n    from ubelt.util_path import (TempDir, augpath, ensuredir, expandpath,\n                                 shrinkuser, userhome,)\n    from ubelt.util_platform import (DARWIN, LINUX, POSIX, WIN32,\n                                     ensure_app_cache_dir, ensure_app_config_dir,\n                                     ensure_app_data_dir, find_exe, find_path,\n                                     get_app_cache_dir, get_app_config_dir,\n                                     get_app_data_dir, platform_cache_dir,\n                                     platform_config_dir, platform_data_dir,)\n    from ubelt.util_str import (codeblock, ensure_unicode, hzcat, indent,\n                                paragraph,)\n    from ubelt.util_stream import (CaptureStdout, CaptureStream, TeeStringIO,)\n    from ubelt.util_time import (timestamp,)\n    from ubelt.orderedset import (OrderedSet, oset,)\n    from ubelt.progiter import (ProgIter,)\n    from ubelt.timerit import (Timer, Timerit,)\n\n\nInstallation:\n=============\n\nUbelt is distributed on pypi as a universal wheel and can be pip installed on\nPython 2.7, Python 3.4+. Installations are tested on CPython and PyPy\nimplementations.\n\n::\n\n    pip install ubelt\n\nNote that our distributions on pypi are signed with GPG. The signing public key\nis ``D297D757``; this should agree with the value in `dev/public_gpg_key`.\n\n\nIt is also possible to simply install it from source.\n\n::\n\n    pip install git+https://github.com/Erotemic/ubelt.git\n\n\nHistory:\n========\n\nUbelt is a migration of the most useful parts of\n``utool``\\ (https://github.com/Erotemic/utool) into a standalone module\nwith minimal dependencies.\n\nThe ``utool`` library contains a number of useful utility functions, but it\nalso contained non-useful functions, as well as the kitchen sink. A number of\nthe functions were too specific or not well documented. The ``ubelt`` is a port\nof the simplest and most useful parts of ``utool``.\n\nNote that there are other cool things in ``utool`` that are not in ``ubelt``.\nNotably, the doctest harness ultimately became `xdoctest <https://github.com/Erotemic/xdoctest>`__. \nCode introspection and dynamic analysis tools were ported to `xinspect <https://github.com/Erotemic/xinspect>`__.\nThe more IPython-y tools were ported to `xdev <https://github.com/Erotemic/xdev>`__.\nParts of it made their way into `scriptconfig <https://gitlab.kitware.com/utils/scriptconfig>`__.\nThe init-file generation was moved to `mkinit <https://github.com/Erotemic/mkinit>`__.\nSome vim and system-y things can be found in `vimtk <https://github.com/Erotemic/vimtk>`__.\n\n\nFunction Usefulness \n===================\n\nWhen I had to hand pick a set of functions that I thought were the most useful\nI chose these and provided some comment on why:\n\n.. code:: python\n\n    import ubelt as ub\n\n    ub.ensuredir  # os.makedirs(exist_ok=True) is 3 only and too verbose\n    ub.Timerit  # powerful multiline alternative to timeit\n    ub.Cacher  # configuration based on-disk cachine\n    ub.cmd  # combines the best of subprocess.Popen and os.system\n    ub.hash_data  # extremely useful with Cacher to config strings\n    ub.repr2  # readable representations of nested data structures\n    ub.download  # why is this not a one liner --- also see grabdata for the same thing, but builtin caching.\n    ub.AutoDict  # one of the most useful tools in Perl, \n    ub.modname_to_modpath  # (works via static analysis)\n    ub.modpath_to_modname  # (works via static analysis)\n    ub.import_module_from_path  # (Unlike importlib, this does not break pytest)\n    ub.import_module_from_name  # (Unlike importlib, this does not break pytest)\n\n\nBut a better way might to objectively measure the frequency of usage and built\na histogram of usefulness. I generated this histogram using ``python dev/count_usage_freq.py``.\n\n.. code:: python\n\n    {\n    'repr2': 1209,\n    'ProgIter': 250,\n    'odict': 210,\n    'take': 209,\n    'dzip': 180,\n    'ensuredir': 168,\n    'expandpath': 168,\n    'argval': 148,\n    'map_vals': 132,\n    'flatten': 129,\n    'Timerit': 113,\n    'NoParam': 104,\n    'NiceRepr': 102,\n    'cmd': 102,\n    'hzcat': 95,\n    'argflag': 95,\n    'ddict': 92,\n    'codeblock': 87,\n    'iterable': 82,\n    'dict_hist': 78,\n    'hash_data': 67,\n    'group_items': 65,\n    'compress': 64,\n    'grabdata': 63,\n    'color_text': 58,\n    'augpath': 48,\n    'allsame': 48,\n    'delete': 48,\n    'Cacher': 42,\n    'invert_dict': 39,\n    'peek': 39,\n    'chunks': 38,\n    'writeto': 38,\n    'argsort': 37,\n    'Timer': 37,\n    'timestamp': 30,\n    'find_duplicates': 27,\n    'indent': 26,\n    'unique': 23,\n    'map_keys': 23,\n    'iter_window': 22,\n    'memoize': 21,\n    'ensure_unicode': 21,\n    'readfrom': 21,\n    'identity': 19,\n    'oset': 18,\n    'modname_to_modpath': 16,\n    'dict_subset': 15,\n    'memoize_method': 14,\n    'highlight_code': 14,\n    'argmax': 13,\n    'memoize_property': 13,\n    'find_exe': 12,\n    'touch': 12,\n    'hash_file': 11,\n    'import_module_from_path': 10,\n    'dict_isect': 9,\n    'inject_method': 8,\n    'AutoDict': 6,\n    'argmin': 6,\n    'dict_union': 6,\n    'symlink': 6,\n    'split_modpath': 5,\n    'CaptureStdout': 4,\n    'dict_diff': 4,\n    'import_module_from_name': 4,\n    'download': 3,\n    'modpath_to_modname': 3,\n    'paragraph': 3,\n    'CacheStamp': 3,\n    'AutoOrderedDict': 2,\n    'unique_flags': 2,\n    'find_path': 2,\n    }\n    \n   \n\n\nExamples\n========\n\nBe sure to checkout the new Jupyter notebook: https://github.com/Erotemic/ubelt/blob/master/docs/notebooks/Ubelt%20Demo.ipynb\n\nHere are some examples of some features inside ``ubelt``\n\n\nTiming\n------\n\nQuickly time a single line.\n\n.. code:: python\n\n    >>> import math\n    >>> import ubelt as ub\n    >>> timer = ub.Timer('Timer demo!', verbose=1)\n    >>> with timer:\n    >>>     math.factorial(100000)\n    tic('Timer demo!')\n    ...toc('Timer demo!')=0.1453s\n\n\nRobust Timing and Benchmarking\n------------------------------\n\nEasily do robust timings on existing blocks of code by simply indenting\nthem. There is no need to refactor into a string representation or\nconvert to a single line. With ``ub.Timerit`` there is no need to resort\nto the ``timeit`` module!\n\nThe quick and dirty way just requires one indent.\n\nNote: Timerit is also defined in a standalone module: ``pip install timerit``)\n\n.. code:: python\n\n    >>> import math\n    >>> import ubelt as ub\n    >>> for _ in ub.Timerit(num=200, verbose=3):\n    >>>     math.factorial(10000)\n    Timing for 200 loops\n    Timed for: 200 loops, best of 3\n        time per loop: best=2.055 ms, mean=2.145 \u00b1 0.083 ms\n\nUse the loop variable as a context manager for more accurate timings or\nto incorporate an setup phase that is not timed. You can also access\nproperties of the ``ub.Timerit`` class to programmatically use results.\n\n.. code:: python\n\n    >>> import math\n    >>> import ubelt as ub\n    >>> t1 = ub.Timerit(num=200, verbose=2)\n    >>> for timer in t1:\n    >>>     setup_vars = 10000\n    >>>     with timer:\n    >>>         math.factorial(setup_vars)\n    >>> print('t1.total_time = %r' % (t1.total_time,))\n    Timing for 200 loops\n    Timed for: 200 loops, best of 3\n        time per loop: best=2.064 ms, mean=2.115 \u00b1 0.05 ms\n    t1.total_time = 0.4427177629695507\n\n\nLoop Progress\n-------------\n\n``ProgIter`` is a no-threads attached Progress meter that writes to stdout.  It\nis a mostly drop-in alternative to `tqdm\n<https://pypi.python.org/pypi/tqdm>`__. \n*The advantage of ``ProgIter`` is that it does not use any python threading*,\nand therefore can be safer with code that makes heavy use of multiprocessing.\n\nNote: ``ProgIter`` is also defined in a standalone module: ``pip install progiter``)\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> def is_prime(n):\n    ...     return n >= 2 and not any(n % i == 0 for i in range(2, n))\n    >>> for n in ub.ProgIter(range(1000), verbose=2):\n    >>>     # do some work\n    >>>     is_prime(n)\n        0/1000... rate=0.00 Hz, eta=?, total=0:00:00, wall=14:05 EST \n        1/1000... rate=82241.25 Hz, eta=0:00:00, total=0:00:00, wall=14:05 EST \n      257/1000... rate=177204.69 Hz, eta=0:00:00, total=0:00:00, wall=14:05 EST \n      642/1000... rate=94099.22 Hz, eta=0:00:00, total=0:00:00, wall=14:05 EST \n     1000/1000... rate=71886.74 Hz, eta=0:00:00, total=0:00:00, wall=14:05 EST \n\n\nCaching\n-------\n\nCache intermediate results in a script with minimal boilerplate. \nIt looks like 4 lines of boilerplate is the best you can do with Python 3.8 syntax.\nSee <https://raw.githubusercontent.com/Erotemic/ubelt/master/ubelt/util_cache.py>`__ for details.\n\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> cfgstr = 'repr-of-params-that-uniquely-determine-the-process'\n    >>> cacher = ub.Cacher('test_process', cfgstr)\n    >>> data = cacher.tryload()\n    >>> if data is None:\n    >>>     myvar1 = 'result of expensive process'\n    >>>     myvar2 = 'another result'\n    >>>     data = myvar1, myvar2\n    >>>     cacher.save(data)\n    >>> myvar1, myvar2 = data\n\nHashing\n-------\n\nThe ``ub.hash_data`` constructs a hash corresponding to a (mostly)\narbitrary ordered python object. A common use case for this function is\nto construct the ``cfgstr`` mentioned in the example for ``ub.Cacher``.\nInstead of returning a hex, string, ``ub.hash_data`` encodes the hash\ndigest using the 26 lowercase letters in the roman alphabet. This makes\nthe result easy to use as a filename suffix.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> data = [('arg1', 5), ('lr', .01), ('augmenters', ['flip', 'translate'])]\n    >>> ub.hash_data(data)[0:8]\n    5f5fda5e\n\nThere exists an undocumented plugin architecture to extend this function\nto arbitrary types. See ``ubelt/util_hash.py`` for details.\n\nCommand Line Interaction\n------------------------\n\nThe builtin Python ``subprocess.Popen`` module is great, but it can be a\nbit clunky at times. The ``os.system`` command is easy to use, but it\ndoesn't have much flexibility. The ``ub.cmd`` function aims to fix this.\nIt is as simple to run as ``os.system``, but it returns a dictionary\ncontaining the return code, standard out, standard error, and the\n``Popen`` object used under the hood.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> info = ub.cmd('gcc --version')\n    >>> print(ub.repr2(info))\n    {\n        'command': 'gcc --version',\n        'err': '',\n        'out': 'gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\\nCopyright (C) 2015 Free Software Foundation, Inc.\\nThis is free software; see the source for copying conditions.  There is NO\\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n',\n        'proc': <subprocess.Popen object at 0x7ff98b310390>,\n        'ret': 0,\n    }\n\nAlso note the use of ``ub.repr2`` to nicely format the output\ndictionary.\n\nAdditionally, if you specify ``verbose=True``, ``ub.cmd`` will\nsimultaneously capture the standard output and display it in real time.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> info = ub.cmd('gcc --version', verbose=True)\n    gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\n    Copyright (C) 2015 Free Software Foundation, Inc.\n    This is free software; see the source for copying conditions.  There is NO\n    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nA common use case for ``ub.cmd`` is parsing version numbers of programs\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> cmake_version = ub.cmd('cmake --version')['out'].splitlines()[0].split()[-1]\n    >>> print('cmake_version = {!r}'.format(cmake_version))\n    cmake_version = 3.11.0-rc2\n\nThis allows you to easily run a command line executable as part of a\npython process, see what it is doing, and then do something based on its\noutput, just as you would if you were interacting with the command line\nitself.\n\nLastly, ``ub.cmd`` removes the need to think about if you need to pass a\nlist of args, or a string. Both will work. This utility has been tested\non both Windows and Linux.\n\nCross-Platform Resource and Cache Directories\n---------------------------------------------\n\nIf you have an application which writes configuration or cache files,\nthe standard place to dump those files differs depending if you are on\nWindows, Linux, or Mac. Ubelt offers a unified functions for determining\nwhat these paths are.\n\nThe ``ub.ensure_app_cache_dir`` and ``ub.ensure_app_resource_dir``\nfunctions find the correct platform-specific location for these files\nand ensures that the directories exist. (Note: replacing \"ensure\" with\n\"get\" will simply return the path, but not ensure that it exists)\n\nThe resource root directory is ``~/AppData/Roaming`` on Windows,\n``~/.config`` on Linux and ``~/Library/Application Support`` on Mac. The\ncache root directory is ``~/AppData/Local`` on Windows, ``~/.config`` on\nLinux and ``~/Library/Caches`` on Mac.\n\nExample usage on Linux might look like this:\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> print(ub.compressuser(ub.ensure_app_cache_dir('my_app')))\n    ~/.cache/my_app\n    >>> print(ub.compressuser(ub.ensure_app_resource_dir('my_app')))\n    ~/.config/my_app\n\nSymlinks\n--------\n\nThe ``ub.symlink`` function will create a symlink similar to\n``os.symlink``. The main differences are that 1) it will not error if\nthe symlink exists and already points to the correct location. 2) it\nworks\\* on Windows (\\*hard links and junctions are used if real symlinks\nare not available)\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> dpath = ub.ensure_app_cache_dir('ubelt', 'demo_symlink')\n    >>> real_path = join(dpath, 'real_file.txt')\n    >>> link_path = join(dpath, 'link_file.txt')\n    >>> ub.writeto(real_path, 'foo')\n    >>> ub.symlink(real_path, link_path)\n\nDownloading Files\n-----------------\n\nThe function ``ub.download`` provides a simple interface to download a\nURL and save its data to a file.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> url = 'http://i.imgur.com/rqwaDag.png'\n    >>> fpath = ub.download(url, verbose=0)\n    >>> print(ub.compressuser(fpath))\n    ~/.cache/ubelt/rqwaDag.png\n\nThe function ``ub.grabdata`` works similarly to ``ub.download``, but\nwhereas ``ub.download`` will always re-download the file,\n``ub.grabdata`` will check if the file exists and only re-download it if\nit needs to.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> url = 'http://i.imgur.com/rqwaDag.png'\n    >>> fpath = ub.grabdata(url, verbose=0, hash_prefix='944389a39')\n    >>> print(ub.compressuser(fpath))\n    ~/.cache/ubelt/rqwaDag.png\n\n\nNew in version 0.4.0: both functions now accepts the ``hash_prefix`` keyword\nargument, which if specified will check that the hash of the file matches the\nprovided value. The ``hasher`` keyword argument can be used to change which\nhashing algorithm is used (it defaults to ``\"sha512\"``).\n\nGrouping\n--------\n\nGroup items in a sequence into a dictionary by a second id list\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> item_list    = ['ham',     'jam',   'spam',     'eggs',    'cheese', 'bannana']\n    >>> groupid_list = ['protein', 'fruit', 'protein',  'protein', 'dairy',  'fruit']\n    >>> ub.group_items(item_list, groupid_list)\n    {'dairy': ['cheese'], 'fruit': ['jam', 'bannana'], 'protein': ['ham', 'spam', 'eggs']}\n\nDictionary Histogram\n--------------------\n\nFind the frequency of items in a sequence\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> item_list = [1, 2, 39, 900, 1232, 900, 1232, 2, 2, 2, 900]\n    >>> ub.dict_hist(item_list)\n    {1232: 2, 1: 1, 2: 4, 900: 3, 39: 1}\n\nFind Duplicates\n---------------\n\nFind all duplicate items in a list. More specifically,\n``ub.find_duplicates`` searches for items that appear more than ``k``\ntimes, and returns a mapping from each duplicate item to the positions\nit appeared in.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> items = [0, 0, 1, 2, 3, 3, 0, 12, 2, 9]\n    >>> ub.find_duplicates(items, k=2)\n    {0: [0, 1, 6], 2: [3, 8], 3: [4, 5]}\n\nDictionary Manipulation\n-----------------------\n\nTake a subset of a dictionary.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> dict_ = {'K': 3, 'dcvs_clip_max': 0.2, 'p': 0.1}\n    >>> subdict_ = ub.dict_subset(dict_, ['K', 'dcvs_clip_max'])\n    >>> print(subdict_)\n    {'K': 3, 'dcvs_clip_max': 0.2}\n\nTake only the values, optionally specify a default value.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> dict_ = {1: 'a', 2: 'b', 3: 'c'}\n    >>> print(list(ub.take(dict_, [1, 2, 3, 4, 5], default=None)))\n    ['a', 'b', 'c', None, None]\n\nApply a function to each value in the dictionary (see also\n``ub.map_keys``).\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> dict_ = {'a': [1, 2, 3], 'b': []}\n    >>> newdict = ub.map_vals(len, dict_)\n    >>> print(newdict)\n    {'a': 3, 'b': 0}\n\nInvert the mapping defined by a dictionary. By default ``invert_dict``\nassumes that all dictionary values are distinct (i.e. the mapping is\none-to-one / injective).\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> mapping = {0: 'a', 1: 'b', 2: 'c', 3: 'd'}\n    >>> ub.invert_dict(mapping)\n    {'a': 0, 'b': 1, 'c': 2, 'd': 3}\n\nHowever, by specifying ``unique_vals=False`` the inverted dictionary\nbuilds a set of keys that were associated with each value.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> mapping = {'a': 0, 'A': 0, 'b': 1, 'c': 2, 'C': 2, 'd': 3}\n    >>> ub.invert_dict(mapping, unique_vals=False)\n    {0: {'A', 'a'}, 1: {'b'}, 2: {'C', 'c'}, 3: {'d'}}\n\nAutoDict - Autovivification\n---------------------------\n\nWhile the ``collections.defaultdict`` is nice, it is sometimes more\nconvenient to have an infinitely nested dictionary of dictionaries.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> auto = ub.AutoDict()\n    >>> print('auto = {!r}'.format(auto))\n    auto = {}\n    >>> auto[0][10][100] = None\n    >>> print('auto = {!r}'.format(auto))\n    auto = {0: {10: {100: None}}}\n    >>> auto[0][1] = 'hello'\n    >>> print('auto = {!r}'.format(auto))\n    auto = {0: {1: 'hello', 10: {100: None}}}\n\nString-based imports\n--------------------\n\nUbelt contains functions to import modules dynamically without using the\npython ``import`` statement. While ``importlib`` exists, the ``ubelt``\nimplementation is simpler to user and does not have the disadvantage of\nbreaking ``pytest``.\n\nNote ``ubelt`` simply provides an interface to this functionality, the\ncore implementation is in ``xdoctest`` (over as of version ``0.7.0``, \nthe code is statically copied into an autogenerated file such that ``ubelt``\ndoes not actually depend on ``xdoctest`` during runtime).\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> module = ub.import_module_from_path(ub.truepath('~/code/ubelt/ubelt'))\n    >>> print('module = {!r}'.format(module))\n    module = <module 'ubelt' from '/home/joncrall/code/ubelt/ubelt/__init__.py'>\n    >>> module = ub.import_module_from_name('ubelt')\n    >>> print('module = {!r}'.format(module))\n    module = <module 'ubelt' from '/home/joncrall/code/ubelt/ubelt/__init__.py'>\n\nRelated to this functionality are the functions\n``ub.modpath_to_modname`` and ``ub.modname_to_modpath``, which\n*statically* transform (i.e. no code in the target modules is imported\nor executed) between module names (e.g. ``ubelt.util_import``) and\nmodule paths (e.g.\n``~/.local/conda/envs/cenv3/lib/python3.5/site-packages/ubelt/util_import.py``).\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> modpath = ub.util_import.__file__\n    >>> print(ub.modpath_to_modname(modpath))\n    ubelt.util_import\n    >>> modname = ub.util_import.__name__\n    >>> assert ub.truepath(ub.modname_to_modpath(modname)) == modpath\n\nHorizontal String Concatenation\n-------------------------------\n\nSometimes its just prettier to horizontally concatenate two blocks of\ntext.\n\n.. code:: python\n\n    >>> import ubelt as ub\n    >>> B = ub.repr2([[1, 2], [3, 4]], nl=1, cbr=True, trailsep=False)\n    >>> C = ub.repr2([[5, 6], [7, 8]], nl=1, cbr=True, trailsep=False)\n    >>> print(ub.hzcat(['A = ', B, ' * ', C]))\n    A = [[1, 2], * [[5, 6],\n         [3, 4]]    [7, 8]]\n\nExternal tools.\n---------------\n\nSome of the tools in ``ubelt`` also exist as standalone modules. I haven't\ndecided if its best to statically copy them into ubelt or require on pypi to\nsatisfy the dependency. There are some tools that are not used by default \nunless you explicitly allow for them. \n\nCode that is currently statically included:\n\n-  ProgIter - https://github.com/Erotemic/progiter\n-  Timerit - https://github.com/Erotemic/timerit\n\nCode that is currently linked via pypi:\n\n-  OrderedSet - https://github.com/LuminosoInsight/ordered-set\n\n\nCode that is completely optional, and only used in specific cases:\n\n- Numpy - ``ub.repr2`` will format a numpy array nicely by default\n- xxhash - this can be specified as a hasher to ``ub.hash_data``\n- Pygments - used by the ``util_color`` module.\n\n\nAlso, in the future some of the functionality in ubelt may be ported and integrated\ninto the ``boltons`` project: https://github.com/mahmoud/boltons.\n\n\nNotes.\n------\nUbelt will support Python2 for the foreseeable future (at least until the\nprojects I work on are off it followed by a probation period).\n\nPRs are welcome. If you have a utility function that you think is useful then\nwrite a PR. I'm likely to respond promptly.\n\nAlso check out my other projects (many of which are powered by ubelt):\n\n-  ProgIter https://github.com/Erotemic/progiter\n-  Timerit https://github.com/Erotemic/timerit\n-  mkinit https://github.com/Erotemic/mkinit\n-  xdoctest https://github.com/Erotemic/xdoctest\n-  xinspect https://github.com/Erotemic/xinspect\n-  xdev https://github.com/Erotemic/xdev\n-  vimtk https://github.com/Erotemic/vimtk\n-  graphid https://github.com/Erotemic/graphid\n-  ibeis https://github.com/Erotemic/ibeis\n  \n\n.. |CircleCI| image:: https://circleci.com/gh/Erotemic/ubelt.svg?style=svg\n    :target: https://circleci.com/gh/Erotemic/ubelt\n.. |Travis| image:: https://img.shields.io/travis/Erotemic/ubelt/master.svg?label=Travis%20CI\n   :target: https://travis-ci.org/Erotemic/ubelt?branch=master\n.. |Appveyor| image:: https://ci.appveyor.com/api/projects/status/github/Erotemic/ubelt?branch=master&svg=True\n   :target: https://ci.appveyor.com/project/Erotemic/ubelt/branch/master\n.. |Codecov| image:: https://codecov.io/github/Erotemic/ubelt/badge.svg?branch=master&service=github\n   :target: https://codecov.io/github/Erotemic/ubelt?branch=master\n.. |Pypi| image:: https://img.shields.io/pypi/v/ubelt.svg\n   :target: https://pypi.python.org/pypi/ubelt\n.. |Downloads| image:: https://img.shields.io/pypi/dm/ubelt.svg\n   :target: https://pypistats.org/packages/ubelt\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/ubelt/badge/?version=latest\n    :target: http://ubelt.readthedocs.io/en/latest/\n.. |CodeQuality| image:: https://api.codacy.com/project/badge/Grade/4d815305fc014202ba7dea09c4676343   \n    :target: https://www.codacy.com/manual/Erotemic/ubelt?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Erotemic/ubelt&amp;utm_campaign=Badge_Grade", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Erotemic/ubelt", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "ubelt", "package_url": "https://pypi.org/project/ubelt/", "platform": "", "project_url": "https://pypi.org/project/ubelt/", "project_urls": {"Homepage": "https://github.com/Erotemic/ubelt"}, "release_url": "https://pypi.org/project/ubelt/0.9.1/", "requires_dist": null, "requires_python": "", "summary": "A Python utility belt containing simple tools, a stdlib like feel, and extra batteries.", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://ubelt.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"ReadTheDocs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2fb1e64f4a5749628a17f2c0363bc3c67939557f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7562656c742f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://pypi.python.org/pypi/ubelt\" rel=\"nofollow\"><img alt=\"Pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8bb1e2c4732957927b96287b8c6e3b40db97223/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7562656c742e737667\"></a> <a href=\"https://pypistats.org/packages/ubelt\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc0f90c4be918a27f86bfd2ebe3fc091c88e5336/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7562656c742e737667\"></a> <a href=\"https://codecov.io/github/Erotemic/ubelt?branch=master\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b75e1ab6016d56b8b6036df1cdb6767fe258a154/68747470733a2f2f636f6465636f762e696f2f6769746875622f45726f74656d69632f7562656c742f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a> <a href=\"https://circleci.com/gh/Erotemic/ubelt\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45e56426b7b69bc83c4763e1df011d38a40e52c6/68747470733a2f2f636972636c6563692e636f6d2f67682f45726f74656d69632f7562656c742e7376673f7374796c653d737667\"></a> <a href=\"https://travis-ci.org/Erotemic/ubelt?branch=master\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ad64074d1efa478267310f4a17eb3ca994a836d/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f45726f74656d69632f7562656c742f6d61737465722e7376673f6c6162656c3d5472617669732532304349\"></a> <a href=\"https://ci.appveyor.com/project/Erotemic/ubelt/branch/master\" rel=\"nofollow\"><img alt=\"Appveyor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/796ab2572653e2c42df6a62010f194c913c8123b/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f45726f74656d69632f7562656c743f6272616e63683d6d6173746572267376673d54727565\"></a> <a href=\"https://www.codacy.com/manual/Erotemic/ubelt?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=Erotemic/ubelt&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"CodeQuality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80d67877a7e63c40191f43a8552040ed885030a0/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3464383135333035666330313432303262613764656130396334363736333433\"></a></p>\n<img alt=\"https://i.imgur.com/PoYIsWE.png\" class=\"align-left\" height=\"100px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e08201b1fe9a057cf231e192d872d55535bd92b5/68747470733a2f2f692e696d6775722e636f6d2f506f59497357452e706e67\">\n<p>Ubelt is a small library of robust, tested, documented, and simple functions\nthat extend the Python standard library. It has a flat API that all behaves\nsimilarly on Windows, Mac, and Linux (up to some small unavoidable\ndifferences).  Almost every function in <tt>ubelt</tt> was written with a doctest.\nThis provides helpful documentation and example usage as well as helping\nachieve 100% test coverage (with minor exceptions for Python2, Windows,\netc\u2026).</p>\n<ul>\n<li>Goal: provide simple functions that accomplish common tasks not yet addressed by the python standard library.</li>\n<li>Constraints: Must be low-impact pure python; it should be easy to install and use.</li>\n<li>Method: All functions are written with docstrings and doctests to ensure that a baseline level of documentation and testing always exists (even if functions are copy/pasted into other libraries)</li>\n<li>Motto: Good utilities lift all codes.</li>\n</ul>\n<p>Read the docs here: <a href=\"http://ubelt.readthedocs.io/en/latest/\" rel=\"nofollow\">http://ubelt.readthedocs.io/en/latest/</a></p>\n<p>These are some of the tasks that ubelt\u2019s API enables:</p>\n<blockquote>\n<ul>\n<li>hash common data structures</li>\n<li>hash files</li>\n<li>cache a block of code</li>\n<li>time a block of code</li>\n<li>download a file</li>\n<li>run shell commands</li>\n<li>string-format nested data structures</li>\n<li>make a directory if it doesn\u2019t exist</li>\n<li>expand environment variables and tildes in path strings</li>\n<li>map a function over the keys or values of a dictionary</li>\n<li>perform set operations on dictionaries</li>\n<li>perform dictionary operations like histogram, duplicates, and inversion</li>\n<li>delete a file or directory</li>\n<li>import a module using the path to that module</li>\n<li>check if a particular flag or value is on the command line</li>\n<li>color text with ANSI tags</li>\n<li>get paths to cross platform data/cache/config directories</li>\n<li>create cross platform symlinks</li>\n<li>horizontally concatenate multiline strings</li>\n<li>access defaultdict and OrderedDict by ddict and odict aliases</li>\n<li>build ordered sets</li>\n<li>memoize functions</li>\n<li>argmax/min/sort on dictionaries</li>\n</ul>\n</blockquote>\n<p>Ubelt is small. Its top-level API is defined using roughly 40 lines:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_arg</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">argflag</span><span class=\"p\">,</span> <span class=\"n\">argval</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_cache</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">CacheStamp</span><span class=\"p\">,</span> <span class=\"n\">Cacher</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_colors</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">color_text</span><span class=\"p\">,</span> <span class=\"n\">highlight_code</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_const</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">NoParam</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_cmd</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_dict</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">AutoDict</span><span class=\"p\">,</span> <span class=\"n\">AutoOrderedDict</span><span class=\"p\">,</span> <span class=\"n\">ddict</span><span class=\"p\">,</span> <span class=\"n\">dict_diff</span><span class=\"p\">,</span>\n                             <span class=\"n\">dict_hist</span><span class=\"p\">,</span> <span class=\"n\">dict_isect</span><span class=\"p\">,</span> <span class=\"n\">dict_subset</span><span class=\"p\">,</span> <span class=\"n\">dict_union</span><span class=\"p\">,</span>\n                             <span class=\"n\">dzip</span><span class=\"p\">,</span> <span class=\"n\">find_duplicates</span><span class=\"p\">,</span> <span class=\"n\">group_items</span><span class=\"p\">,</span> <span class=\"n\">invert_dict</span><span class=\"p\">,</span>\n                             <span class=\"n\">map_keys</span><span class=\"p\">,</span> <span class=\"n\">map_vals</span><span class=\"p\">,</span> <span class=\"n\">odict</span><span class=\"p\">,</span> <span class=\"n\">sorted_keys</span><span class=\"p\">,</span>\n                             <span class=\"n\">sorted_vals</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_download</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">download</span><span class=\"p\">,</span> <span class=\"n\">grabdata</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_func</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">,</span> <span class=\"n\">inject_method</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_format</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">FormatterExtensions</span><span class=\"p\">,</span> <span class=\"n\">repr2</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_io</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">delete</span><span class=\"p\">,</span> <span class=\"n\">readfrom</span><span class=\"p\">,</span> <span class=\"n\">touch</span><span class=\"p\">,</span> <span class=\"n\">writeto</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_links</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">symlink</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_list</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">allsame</span><span class=\"p\">,</span> <span class=\"n\">argmax</span><span class=\"p\">,</span> <span class=\"n\">argmin</span><span class=\"p\">,</span> <span class=\"n\">argsort</span><span class=\"p\">,</span> <span class=\"n\">argunique</span><span class=\"p\">,</span>\n                             <span class=\"n\">boolmask</span><span class=\"p\">,</span> <span class=\"n\">chunks</span><span class=\"p\">,</span> <span class=\"n\">compress</span><span class=\"p\">,</span> <span class=\"n\">flatten</span><span class=\"p\">,</span> <span class=\"n\">iter_window</span><span class=\"p\">,</span>\n                             <span class=\"n\">iterable</span><span class=\"p\">,</span> <span class=\"n\">peek</span><span class=\"p\">,</span> <span class=\"n\">take</span><span class=\"p\">,</span> <span class=\"n\">unique</span><span class=\"p\">,</span> <span class=\"n\">unique_flags</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_hash</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">hash_data</span><span class=\"p\">,</span> <span class=\"n\">hash_file</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_import</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">import_module_from_name</span><span class=\"p\">,</span>\n                               <span class=\"n\">import_module_from_path</span><span class=\"p\">,</span> <span class=\"n\">modname_to_modpath</span><span class=\"p\">,</span>\n                               <span class=\"n\">modpath_to_modname</span><span class=\"p\">,</span> <span class=\"n\">split_modpath</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_memoize</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">memoize</span><span class=\"p\">,</span> <span class=\"n\">memoize_method</span><span class=\"p\">,</span> <span class=\"n\">memoize_property</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_mixins</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">NiceRepr</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_path</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">TempDir</span><span class=\"p\">,</span> <span class=\"n\">augpath</span><span class=\"p\">,</span> <span class=\"n\">ensuredir</span><span class=\"p\">,</span> <span class=\"n\">expandpath</span><span class=\"p\">,</span>\n                             <span class=\"n\">shrinkuser</span><span class=\"p\">,</span> <span class=\"n\">userhome</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_platform</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">DARWIN</span><span class=\"p\">,</span> <span class=\"n\">LINUX</span><span class=\"p\">,</span> <span class=\"n\">POSIX</span><span class=\"p\">,</span> <span class=\"n\">WIN32</span><span class=\"p\">,</span>\n                                 <span class=\"n\">ensure_app_cache_dir</span><span class=\"p\">,</span> <span class=\"n\">ensure_app_config_dir</span><span class=\"p\">,</span>\n                                 <span class=\"n\">ensure_app_data_dir</span><span class=\"p\">,</span> <span class=\"n\">find_exe</span><span class=\"p\">,</span> <span class=\"n\">find_path</span><span class=\"p\">,</span>\n                                 <span class=\"n\">get_app_cache_dir</span><span class=\"p\">,</span> <span class=\"n\">get_app_config_dir</span><span class=\"p\">,</span>\n                                 <span class=\"n\">get_app_data_dir</span><span class=\"p\">,</span> <span class=\"n\">platform_cache_dir</span><span class=\"p\">,</span>\n                                 <span class=\"n\">platform_config_dir</span><span class=\"p\">,</span> <span class=\"n\">platform_data_dir</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_str</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">codeblock</span><span class=\"p\">,</span> <span class=\"n\">ensure_unicode</span><span class=\"p\">,</span> <span class=\"n\">hzcat</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"p\">,</span>\n                            <span class=\"n\">paragraph</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_stream</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">CaptureStdout</span><span class=\"p\">,</span> <span class=\"n\">CaptureStream</span><span class=\"p\">,</span> <span class=\"n\">TeeStringIO</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.util_time</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">timestamp</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.orderedset</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">OrderedSet</span><span class=\"p\">,</span> <span class=\"n\">oset</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.progiter</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">ProgIter</span><span class=\"p\">,)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ubelt.timerit</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">Timer</span><span class=\"p\">,</span> <span class=\"n\">Timerit</span><span class=\"p\">,)</span>\n</pre>\n<div id=\"installation\">\n<h2>Installation:</h2>\n<p>Ubelt is distributed on pypi as a universal wheel and can be pip installed on\nPython 2.7, Python 3.4+. Installations are tested on CPython and PyPy\nimplementations.</p>\n<pre>pip install ubelt\n</pre>\n<p>Note that our distributions on pypi are signed with GPG. The signing public key\nis <tt>D297D757</tt>; this should agree with the value in <cite>dev/public_gpg_key</cite>.</p>\n<p>It is also possible to simply install it from source.</p>\n<pre>pip install git+https://github.com/Erotemic/ubelt.git\n</pre>\n</div>\n<div id=\"history\">\n<h2>History:</h2>\n<p>Ubelt is a migration of the most useful parts of\n<tt>utool</tt>(<a href=\"https://github.com/Erotemic/utool\" rel=\"nofollow\">https://github.com/Erotemic/utool</a>) into a standalone module\nwith minimal dependencies.</p>\n<p>The <tt>utool</tt> library contains a number of useful utility functions, but it\nalso contained non-useful functions, as well as the kitchen sink. A number of\nthe functions were too specific or not well documented. The <tt>ubelt</tt> is a port\nof the simplest and most useful parts of <tt>utool</tt>.</p>\n<p>Note that there are other cool things in <tt>utool</tt> that are not in <tt>ubelt</tt>.\nNotably, the doctest harness ultimately became <a href=\"https://github.com/Erotemic/xdoctest\" rel=\"nofollow\">xdoctest</a>.\nCode introspection and dynamic analysis tools were ported to <a href=\"https://github.com/Erotemic/xinspect\" rel=\"nofollow\">xinspect</a>.\nThe more IPython-y tools were ported to <a href=\"https://github.com/Erotemic/xdev\" rel=\"nofollow\">xdev</a>.\nParts of it made their way into <a href=\"https://gitlab.kitware.com/utils/scriptconfig\" rel=\"nofollow\">scriptconfig</a>.\nThe init-file generation was moved to <a href=\"https://github.com/Erotemic/mkinit\" rel=\"nofollow\">mkinit</a>.\nSome vim and system-y things can be found in <a href=\"https://github.com/Erotemic/vimtk\" rel=\"nofollow\">vimtk</a>.</p>\n</div>\n<div id=\"function-usefulness\">\n<h2>Function Usefulness</h2>\n<p>When I had to hand pick a set of functions that I thought were the most useful\nI chose these and provided some comment on why:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">ensuredir</span>  <span class=\"c1\"># os.makedirs(exist_ok=True) is 3 only and too verbose</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">Timerit</span>  <span class=\"c1\"># powerful multiline alternative to timeit</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">Cacher</span>  <span class=\"c1\"># configuration based on-disk cachine</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">cmd</span>  <span class=\"c1\"># combines the best of subprocess.Popen and os.system</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">hash_data</span>  <span class=\"c1\"># extremely useful with Cacher to config strings</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">repr2</span>  <span class=\"c1\"># readable representations of nested data structures</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">download</span>  <span class=\"c1\"># why is this not a one liner --- also see grabdata for the same thing, but builtin caching.</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">AutoDict</span>  <span class=\"c1\"># one of the most useful tools in Perl,</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">modname_to_modpath</span>  <span class=\"c1\"># (works via static analysis)</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">modpath_to_modname</span>  <span class=\"c1\"># (works via static analysis)</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">import_module_from_path</span>  <span class=\"c1\"># (Unlike importlib, this does not break pytest)</span>\n<span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">import_module_from_name</span>  <span class=\"c1\"># (Unlike importlib, this does not break pytest)</span>\n</pre>\n<p>But a better way might to objectively measure the frequency of usage and built\na histogram of usefulness. I generated this histogram using <tt>python dev/count_usage_freq.py</tt>.</p>\n<pre><span class=\"p\">{</span>\n<span class=\"s1\">'repr2'</span><span class=\"p\">:</span> <span class=\"mi\">1209</span><span class=\"p\">,</span>\n<span class=\"s1\">'ProgIter'</span><span class=\"p\">:</span> <span class=\"mi\">250</span><span class=\"p\">,</span>\n<span class=\"s1\">'odict'</span><span class=\"p\">:</span> <span class=\"mi\">210</span><span class=\"p\">,</span>\n<span class=\"s1\">'take'</span><span class=\"p\">:</span> <span class=\"mi\">209</span><span class=\"p\">,</span>\n<span class=\"s1\">'dzip'</span><span class=\"p\">:</span> <span class=\"mi\">180</span><span class=\"p\">,</span>\n<span class=\"s1\">'ensuredir'</span><span class=\"p\">:</span> <span class=\"mi\">168</span><span class=\"p\">,</span>\n<span class=\"s1\">'expandpath'</span><span class=\"p\">:</span> <span class=\"mi\">168</span><span class=\"p\">,</span>\n<span class=\"s1\">'argval'</span><span class=\"p\">:</span> <span class=\"mi\">148</span><span class=\"p\">,</span>\n<span class=\"s1\">'map_vals'</span><span class=\"p\">:</span> <span class=\"mi\">132</span><span class=\"p\">,</span>\n<span class=\"s1\">'flatten'</span><span class=\"p\">:</span> <span class=\"mi\">129</span><span class=\"p\">,</span>\n<span class=\"s1\">'Timerit'</span><span class=\"p\">:</span> <span class=\"mi\">113</span><span class=\"p\">,</span>\n<span class=\"s1\">'NoParam'</span><span class=\"p\">:</span> <span class=\"mi\">104</span><span class=\"p\">,</span>\n<span class=\"s1\">'NiceRepr'</span><span class=\"p\">:</span> <span class=\"mi\">102</span><span class=\"p\">,</span>\n<span class=\"s1\">'cmd'</span><span class=\"p\">:</span> <span class=\"mi\">102</span><span class=\"p\">,</span>\n<span class=\"s1\">'hzcat'</span><span class=\"p\">:</span> <span class=\"mi\">95</span><span class=\"p\">,</span>\n<span class=\"s1\">'argflag'</span><span class=\"p\">:</span> <span class=\"mi\">95</span><span class=\"p\">,</span>\n<span class=\"s1\">'ddict'</span><span class=\"p\">:</span> <span class=\"mi\">92</span><span class=\"p\">,</span>\n<span class=\"s1\">'codeblock'</span><span class=\"p\">:</span> <span class=\"mi\">87</span><span class=\"p\">,</span>\n<span class=\"s1\">'iterable'</span><span class=\"p\">:</span> <span class=\"mi\">82</span><span class=\"p\">,</span>\n<span class=\"s1\">'dict_hist'</span><span class=\"p\">:</span> <span class=\"mi\">78</span><span class=\"p\">,</span>\n<span class=\"s1\">'hash_data'</span><span class=\"p\">:</span> <span class=\"mi\">67</span><span class=\"p\">,</span>\n<span class=\"s1\">'group_items'</span><span class=\"p\">:</span> <span class=\"mi\">65</span><span class=\"p\">,</span>\n<span class=\"s1\">'compress'</span><span class=\"p\">:</span> <span class=\"mi\">64</span><span class=\"p\">,</span>\n<span class=\"s1\">'grabdata'</span><span class=\"p\">:</span> <span class=\"mi\">63</span><span class=\"p\">,</span>\n<span class=\"s1\">'color_text'</span><span class=\"p\">:</span> <span class=\"mi\">58</span><span class=\"p\">,</span>\n<span class=\"s1\">'augpath'</span><span class=\"p\">:</span> <span class=\"mi\">48</span><span class=\"p\">,</span>\n<span class=\"s1\">'allsame'</span><span class=\"p\">:</span> <span class=\"mi\">48</span><span class=\"p\">,</span>\n<span class=\"s1\">'delete'</span><span class=\"p\">:</span> <span class=\"mi\">48</span><span class=\"p\">,</span>\n<span class=\"s1\">'Cacher'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n<span class=\"s1\">'invert_dict'</span><span class=\"p\">:</span> <span class=\"mi\">39</span><span class=\"p\">,</span>\n<span class=\"s1\">'peek'</span><span class=\"p\">:</span> <span class=\"mi\">39</span><span class=\"p\">,</span>\n<span class=\"s1\">'chunks'</span><span class=\"p\">:</span> <span class=\"mi\">38</span><span class=\"p\">,</span>\n<span class=\"s1\">'writeto'</span><span class=\"p\">:</span> <span class=\"mi\">38</span><span class=\"p\">,</span>\n<span class=\"s1\">'argsort'</span><span class=\"p\">:</span> <span class=\"mi\">37</span><span class=\"p\">,</span>\n<span class=\"s1\">'Timer'</span><span class=\"p\">:</span> <span class=\"mi\">37</span><span class=\"p\">,</span>\n<span class=\"s1\">'timestamp'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n<span class=\"s1\">'find_duplicates'</span><span class=\"p\">:</span> <span class=\"mi\">27</span><span class=\"p\">,</span>\n<span class=\"s1\">'indent'</span><span class=\"p\">:</span> <span class=\"mi\">26</span><span class=\"p\">,</span>\n<span class=\"s1\">'unique'</span><span class=\"p\">:</span> <span class=\"mi\">23</span><span class=\"p\">,</span>\n<span class=\"s1\">'map_keys'</span><span class=\"p\">:</span> <span class=\"mi\">23</span><span class=\"p\">,</span>\n<span class=\"s1\">'iter_window'</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">,</span>\n<span class=\"s1\">'memoize'</span><span class=\"p\">:</span> <span class=\"mi\">21</span><span class=\"p\">,</span>\n<span class=\"s1\">'ensure_unicode'</span><span class=\"p\">:</span> <span class=\"mi\">21</span><span class=\"p\">,</span>\n<span class=\"s1\">'readfrom'</span><span class=\"p\">:</span> <span class=\"mi\">21</span><span class=\"p\">,</span>\n<span class=\"s1\">'identity'</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">,</span>\n<span class=\"s1\">'oset'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span>\n<span class=\"s1\">'modname_to_modpath'</span><span class=\"p\">:</span> <span class=\"mi\">16</span><span class=\"p\">,</span>\n<span class=\"s1\">'dict_subset'</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span>\n<span class=\"s1\">'memoize_method'</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"p\">,</span>\n<span class=\"s1\">'highlight_code'</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"p\">,</span>\n<span class=\"s1\">'argmax'</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span>\n<span class=\"s1\">'memoize_property'</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span>\n<span class=\"s1\">'find_exe'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n<span class=\"s1\">'touch'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n<span class=\"s1\">'hash_file'</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\n<span class=\"s1\">'import_module_from_path'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"s1\">'dict_isect'</span><span class=\"p\">:</span> <span class=\"mi\">9</span><span class=\"p\">,</span>\n<span class=\"s1\">'inject_method'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span>\n<span class=\"s1\">'AutoDict'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n<span class=\"s1\">'argmin'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n<span class=\"s1\">'dict_union'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n<span class=\"s1\">'symlink'</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n<span class=\"s1\">'split_modpath'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n<span class=\"s1\">'CaptureStdout'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n<span class=\"s1\">'dict_diff'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n<span class=\"s1\">'import_module_from_name'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n<span class=\"s1\">'download'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"s1\">'modpath_to_modname'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"s1\">'paragraph'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"s1\">'CacheStamp'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"s1\">'AutoOrderedDict'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"s1\">'unique_flags'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"s1\">'find_path'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Be sure to checkout the new Jupyter notebook: <a href=\"https://github.com/Erotemic/ubelt/blob/master/docs/notebooks/Ubelt%20Demo.ipynb\" rel=\"nofollow\">https://github.com/Erotemic/ubelt/blob/master/docs/notebooks/Ubelt%20Demo.ipynb</a></p>\n<p>Here are some examples of some features inside <tt>ubelt</tt></p>\n<div id=\"timing\">\n<h3>Timing</h3>\n<p>Quickly time a single line.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"s1\">'Timer demo!'</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">timer</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">)</span>\n<span class=\"n\">tic</span><span class=\"p\">(</span><span class=\"s1\">'Timer demo!'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"n\">toc</span><span class=\"p\">(</span><span class=\"s1\">'Timer demo!'</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"mf\">0.1453</span><span class=\"n\">s</span>\n</pre>\n</div>\n<div id=\"robust-timing-and-benchmarking\">\n<h3>Robust Timing and Benchmarking</h3>\n<p>Easily do robust timings on existing blocks of code by simply indenting\nthem. There is no need to refactor into a string representation or\nconvert to a single line. With <tt>ub.Timerit</tt> there is no need to resort\nto the <tt>timeit</tt> module!</p>\n<p>The quick and dirty way just requires one indent.</p>\n<p>Note: Timerit is also defined in a standalone module: <tt>pip install timerit</tt>)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">Timerit</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"n\">Timing</span> <span class=\"k\">for</span> <span class=\"mi\">200</span> <span class=\"n\">loops</span>\n<span class=\"n\">Timed</span> <span class=\"k\">for</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span>\n    <span class=\"n\">time</span> <span class=\"n\">per</span> <span class=\"n\">loop</span><span class=\"p\">:</span> <span class=\"n\">best</span><span class=\"o\">=</span><span class=\"mf\">2.055</span> <span class=\"n\">ms</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mf\">2.145</span> <span class=\"err\">\u00b1</span> <span class=\"mf\">0.083</span> <span class=\"n\">ms</span>\n</pre>\n<p>Use the loop variable as a context manager for more accurate timings or\nto incorporate an setup phase that is not timed. You can also access\nproperties of the <tt>ub.Timerit</tt> class to programmatically use results.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">Timerit</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">timer</span> <span class=\"ow\">in</span> <span class=\"n\">t1</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">setup_vars</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"k\">with</span> <span class=\"n\">timer</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">setup_vars</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'t1.total_time = </span><span class=\"si\">%r</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">total_time</span><span class=\"p\">,))</span>\n<span class=\"n\">Timing</span> <span class=\"k\">for</span> <span class=\"mi\">200</span> <span class=\"n\">loops</span>\n<span class=\"n\">Timed</span> <span class=\"k\">for</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span>\n    <span class=\"n\">time</span> <span class=\"n\">per</span> <span class=\"n\">loop</span><span class=\"p\">:</span> <span class=\"n\">best</span><span class=\"o\">=</span><span class=\"mf\">2.064</span> <span class=\"n\">ms</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"o\">=</span><span class=\"mf\">2.115</span> <span class=\"err\">\u00b1</span> <span class=\"mf\">0.05</span> <span class=\"n\">ms</span>\n<span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"n\">total_time</span> <span class=\"o\">=</span> <span class=\"mf\">0.4427177629695507</span>\n</pre>\n</div>\n<div id=\"loop-progress\">\n<h3>Loop Progress</h3>\n<p><tt>ProgIter</tt> is a no-threads attached Progress meter that writes to stdout.  It\nis a mostly drop-in alternative to <a href=\"https://pypi.python.org/pypi/tqdm\" rel=\"nofollow\">tqdm</a>.\n<em>The advantage of ``ProgIter`` is that it does not use any python threading</em>,\nand therefore can be safer with code that makes heavy use of multiprocessing.</p>\n<p>Note: <tt>ProgIter</tt> is also defined in a standalone module: <tt>pip install progiter</tt>)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">is_prime</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">ProgIter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"c1\"># do some work</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">is_prime</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"mf\">1000.</span><span class=\"o\">..</span> <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mf\">0.00</span> <span class=\"n\">Hz</span><span class=\"p\">,</span> <span class=\"n\">eta</span><span class=\"o\">=</span><span class=\"err\">?</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"n\">EST</span>\n    <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mf\">1000.</span><span class=\"o\">..</span> <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mf\">82241.25</span> <span class=\"n\">Hz</span><span class=\"p\">,</span> <span class=\"n\">eta</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"n\">EST</span>\n  <span class=\"mi\">257</span><span class=\"o\">/</span><span class=\"mf\">1000.</span><span class=\"o\">..</span> <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mf\">177204.69</span> <span class=\"n\">Hz</span><span class=\"p\">,</span> <span class=\"n\">eta</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"n\">EST</span>\n  <span class=\"mi\">642</span><span class=\"o\">/</span><span class=\"mf\">1000.</span><span class=\"o\">..</span> <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mf\">94099.22</span> <span class=\"n\">Hz</span><span class=\"p\">,</span> <span class=\"n\">eta</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"n\">EST</span>\n <span class=\"mi\">1000</span><span class=\"o\">/</span><span class=\"mf\">1000.</span><span class=\"o\">..</span> <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mf\">71886.74</span> <span class=\"n\">Hz</span><span class=\"p\">,</span> <span class=\"n\">eta</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">wall</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"n\">EST</span>\n</pre>\n</div>\n<div id=\"caching\">\n<h3>Caching</h3>\n<p>Cache intermediate results in a script with minimal boilerplate.\nIt looks like 4 lines of boilerplate is the best you can do with Python 3.8 syntax.\nSee &lt;<a href=\"https://raw.githubusercontent.com/Erotemic/ubelt/master/ubelt/util_cache.py\" rel=\"nofollow\">https://raw.githubusercontent.com/Erotemic/ubelt/master/ubelt/util_cache.py</a>&gt;`__ for details.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfgstr</span> <span class=\"o\">=</span> <span class=\"s1\">'repr-of-params-that-uniquely-determine-the-process'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cacher</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">Cacher</span><span class=\"p\">(</span><span class=\"s1\">'test_process'</span><span class=\"p\">,</span> <span class=\"n\">cfgstr</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">cacher</span><span class=\"o\">.</span><span class=\"n\">tryload</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">myvar1</span> <span class=\"o\">=</span> <span class=\"s1\">'result of expensive process'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">myvar2</span> <span class=\"o\">=</span> <span class=\"s1\">'another result'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">myvar1</span><span class=\"p\">,</span> <span class=\"n\">myvar2</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">cacher</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">myvar1</span><span class=\"p\">,</span> <span class=\"n\">myvar2</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n</pre>\n</div>\n<div id=\"hashing\">\n<h3>Hashing</h3>\n<p>The <tt>ub.hash_data</tt> constructs a hash corresponding to a (mostly)\narbitrary ordered python object. A common use case for this function is\nto construct the <tt>cfgstr</tt> mentioned in the example for <tt>ub.Cacher</tt>.\nInstead of returning a hex, string, <tt>ub.hash_data</tt> encodes the hash\ndigest using the 26 lowercase letters in the roman alphabet. This makes\nthe result easy to use as a filename suffix.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'arg1'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'lr'</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">01</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'augmenters'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'flip'</span><span class=\"p\">,</span> <span class=\"s1\">'translate'</span><span class=\"p\">])]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">hash_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"mi\">5</span><span class=\"n\">f5fda5e</span>\n</pre>\n<p>There exists an undocumented plugin architecture to extend this function\nto arbitrary types. See <tt>ubelt/util_hash.py</tt> for details.</p>\n</div>\n<div id=\"command-line-interaction\">\n<h3>Command Line Interaction</h3>\n<p>The builtin Python <tt>subprocess.Popen</tt> module is great, but it can be a\nbit clunky at times. The <tt>os.system</tt> command is easy to use, but it\ndoesn\u2019t have much flexibility. The <tt>ub.cmd</tt> function aims to fix this.\nIt is as simple to run as <tt>os.system</tt>, but it returns a dictionary\ncontaining the return code, standard out, standard error, and the\n<tt>Popen</tt> object used under the hood.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'gcc --version'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'command'</span><span class=\"p\">:</span> <span class=\"s1\">'gcc --version'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'err'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"s1\">'out'</span><span class=\"p\">:</span> <span class=\"s1\">'gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609</span><span class=\"se\">\\n</span><span class=\"s1\">Copyright (C) 2015 Free Software Foundation, Inc.</span><span class=\"se\">\\n</span><span class=\"s1\">This is free software; see the source for copying conditions.  There is NO</span><span class=\"se\">\\n</span><span class=\"s1\">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><span class=\"se\">\\n\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'proc'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7ff98b310390</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"s1\">'ret'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Also note the use of <tt>ub.repr2</tt> to nicely format the output\ndictionary.</p>\n<p>Additionally, if you specify <tt>verbose=True</tt>, <tt>ub.cmd</tt> will\nsimultaneously capture the standard output and display it in real time.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'gcc --version'</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">gcc</span> <span class=\"p\">(</span><span class=\"n\">Ubuntu</span> <span class=\"mf\">5.4</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"n\">ubuntu1</span><span class=\"o\">~</span><span class=\"mf\">16.04</span><span class=\"o\">.</span><span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"mf\">5.4</span><span class=\"o\">.</span><span class=\"mi\">0</span> <span class=\"mi\">20160609</span>\n<span class=\"n\">Copyright</span> <span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span> <span class=\"mi\">2015</span> <span class=\"n\">Free</span> <span class=\"n\">Software</span> <span class=\"n\">Foundation</span><span class=\"p\">,</span> <span class=\"n\">Inc</span><span class=\"o\">.</span>\n<span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">free</span> <span class=\"n\">software</span><span class=\"p\">;</span> <span class=\"n\">see</span> <span class=\"n\">the</span> <span class=\"n\">source</span> <span class=\"k\">for</span> <span class=\"n\">copying</span> <span class=\"n\">conditions</span><span class=\"o\">.</span>  <span class=\"n\">There</span> <span class=\"ow\">is</span> <span class=\"n\">NO</span>\n<span class=\"n\">warranty</span><span class=\"p\">;</span> <span class=\"ow\">not</span> <span class=\"n\">even</span> <span class=\"k\">for</span> <span class=\"n\">MERCHANTABILITY</span> <span class=\"ow\">or</span> <span class=\"n\">FITNESS</span> <span class=\"n\">FOR</span> <span class=\"n\">A</span> <span class=\"n\">PARTICULAR</span> <span class=\"n\">PURPOSE</span><span class=\"o\">.</span>\n</pre>\n<p>A common use case for <tt>ub.cmd</tt> is parsing version numbers of programs</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cmake_version</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'cmake --version'</span><span class=\"p\">)[</span><span class=\"s1\">'out'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'cmake_version = </span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cmake_version</span><span class=\"p\">))</span>\n<span class=\"n\">cmake_version</span> <span class=\"o\">=</span> <span class=\"mf\">3.11</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"n\">rc2</span>\n</pre>\n<p>This allows you to easily run a command line executable as part of a\npython process, see what it is doing, and then do something based on its\noutput, just as you would if you were interacting with the command line\nitself.</p>\n<p>Lastly, <tt>ub.cmd</tt> removes the need to think about if you need to pass a\nlist of args, or a string. Both will work. This utility has been tested\non both Windows and Linux.</p>\n</div>\n<div id=\"cross-platform-resource-and-cache-directories\">\n<h3>Cross-Platform Resource and Cache Directories</h3>\n<p>If you have an application which writes configuration or cache files,\nthe standard place to dump those files differs depending if you are on\nWindows, Linux, or Mac. Ubelt offers a unified functions for determining\nwhat these paths are.</p>\n<p>The <tt>ub.ensure_app_cache_dir</tt> and <tt>ub.ensure_app_resource_dir</tt>\nfunctions find the correct platform-specific location for these files\nand ensures that the directories exist. (Note: replacing \u201censure\u201d with\n\u201cget\u201d will simply return the path, but not ensure that it exists)</p>\n<p>The resource root directory is <tt>~/AppData/Roaming</tt> on Windows,\n<tt><span class=\"pre\">~/.config</span></tt> on Linux and <tt>~/Library/Application Support</tt> on Mac. The\ncache root directory is <tt>~/AppData/Local</tt> on Windows, <tt><span class=\"pre\">~/.config</span></tt> on\nLinux and <tt>~/Library/Caches</tt> on Mac.</p>\n<p>Example usage on Linux might look like this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">compressuser</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">ensure_app_cache_dir</span><span class=\"p\">(</span><span class=\"s1\">'my_app'</span><span class=\"p\">)))</span>\n<span class=\"o\">~/.</span><span class=\"n\">cache</span><span class=\"o\">/</span><span class=\"n\">my_app</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">compressuser</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">ensure_app_resource_dir</span><span class=\"p\">(</span><span class=\"s1\">'my_app'</span><span class=\"p\">)))</span>\n<span class=\"o\">~/.</span><span class=\"n\">config</span><span class=\"o\">/</span><span class=\"n\">my_app</span>\n</pre>\n</div>\n<div id=\"symlinks\">\n<h3>Symlinks</h3>\n<p>The <tt>ub.symlink</tt> function will create a symlink similar to\n<tt>os.symlink</tt>. The main differences are that 1) it will not error if\nthe symlink exists and already points to the correct location. 2) it\nworks* on Windows (*hard links and junctions are used if real symlinks\nare not available)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dpath</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">ensure_app_cache_dir</span><span class=\"p\">(</span><span class=\"s1\">'ubelt'</span><span class=\"p\">,</span> <span class=\"s1\">'demo_symlink'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">real_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"s1\">'real_file.txt'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">link_path</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dpath</span><span class=\"p\">,</span> <span class=\"s1\">'link_file.txt'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">writeto</span><span class=\"p\">(</span><span class=\"n\">real_path</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">symlink</span><span class=\"p\">(</span><span class=\"n\">real_path</span><span class=\"p\">,</span> <span class=\"n\">link_path</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"downloading-files\">\n<h3>Downloading Files</h3>\n<p>The function <tt>ub.download</tt> provides a simple interface to download a\nURL and save its data to a file.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://i.imgur.com/rqwaDag.png'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">compressuser</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">))</span>\n<span class=\"o\">~/.</span><span class=\"n\">cache</span><span class=\"o\">/</span><span class=\"n\">ubelt</span><span class=\"o\">/</span><span class=\"n\">rqwaDag</span><span class=\"o\">.</span><span class=\"n\">png</span>\n</pre>\n<p>The function <tt>ub.grabdata</tt> works similarly to <tt>ub.download</tt>, but\nwhereas <tt>ub.download</tt> will always re-download the file,\n<tt>ub.grabdata</tt> will check if the file exists and only re-download it if\nit needs to.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://i.imgur.com/rqwaDag.png'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fpath</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">grabdata</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">hash_prefix</span><span class=\"o\">=</span><span class=\"s1\">'944389a39'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">compressuser</span><span class=\"p\">(</span><span class=\"n\">fpath</span><span class=\"p\">))</span>\n<span class=\"o\">~/.</span><span class=\"n\">cache</span><span class=\"o\">/</span><span class=\"n\">ubelt</span><span class=\"o\">/</span><span class=\"n\">rqwaDag</span><span class=\"o\">.</span><span class=\"n\">png</span>\n</pre>\n<p>New in version 0.4.0: both functions now accepts the <tt>hash_prefix</tt> keyword\nargument, which if specified will check that the hash of the file matches the\nprovided value. The <tt>hasher</tt> keyword argument can be used to change which\nhashing algorithm is used (it defaults to <tt>\"sha512\"</tt>).</p>\n</div>\n<div id=\"grouping\">\n<h3>Grouping</h3>\n<p>Group items in a sequence into a dictionary by a second id list</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">item_list</span>    <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'ham'</span><span class=\"p\">,</span>     <span class=\"s1\">'jam'</span><span class=\"p\">,</span>   <span class=\"s1\">'spam'</span><span class=\"p\">,</span>     <span class=\"s1\">'eggs'</span><span class=\"p\">,</span>    <span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"s1\">'bannana'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">groupid_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'protein'</span><span class=\"p\">,</span> <span class=\"s1\">'fruit'</span><span class=\"p\">,</span> <span class=\"s1\">'protein'</span><span class=\"p\">,</span>  <span class=\"s1\">'protein'</span><span class=\"p\">,</span> <span class=\"s1\">'dairy'</span><span class=\"p\">,</span>  <span class=\"s1\">'fruit'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">group_items</span><span class=\"p\">(</span><span class=\"n\">item_list</span><span class=\"p\">,</span> <span class=\"n\">groupid_list</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'dairy'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'cheese'</span><span class=\"p\">],</span> <span class=\"s1\">'fruit'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'jam'</span><span class=\"p\">,</span> <span class=\"s1\">'bannana'</span><span class=\"p\">],</span> <span class=\"s1\">'protein'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'ham'</span><span class=\"p\">,</span> <span class=\"s1\">'spam'</span><span class=\"p\">,</span> <span class=\"s1\">'eggs'</span><span class=\"p\">]}</span>\n</pre>\n</div>\n<div id=\"dictionary-histogram\">\n<h3>Dictionary Histogram</h3>\n<p>Find the frequency of items in a sequence</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">item_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">1232</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">1232</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">dict_hist</span><span class=\"p\">(</span><span class=\"n\">item_list</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"mi\">1232</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"find-duplicates\">\n<h3>Find Duplicates</h3>\n<p>Find all duplicate items in a list. More specifically,\n<tt>ub.find_duplicates</tt> searches for items that appear more than <tt>k</tt>\ntimes, and returns a mapping from each duplicate item to the positions\nit appeared in.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]}</span>\n</pre>\n</div>\n<div id=\"dictionary-manipulation\">\n<h3>Dictionary Manipulation</h3>\n<p>Take a subset of a dictionary.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dict_</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'K'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'dcvs_clip_max'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"s1\">'p'</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">subdict_</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">dict_subset</span><span class=\"p\">(</span><span class=\"n\">dict_</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'K'</span><span class=\"p\">,</span> <span class=\"s1\">'dcvs_clip_max'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">subdict_</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'K'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'dcvs_clip_max'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">}</span>\n</pre>\n<p>Take only the values, optionally specify a default value.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dict_</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"n\">dict_</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)))</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n</pre>\n<p>Apply a function to each value in the dictionary (see also\n<tt>ub.map_keys</tt>).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dict_</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">newdict</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">map_vals</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">dict_</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">newdict</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n</pre>\n<p>Invert the mapping defined by a dictionary. By default <tt>invert_dict</tt>\nassumes that all dictionary values are distinct (i.e. the mapping is\none-to-one / injective).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"s1\">'d'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">invert_dict</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</pre>\n<p>However, by specifying <tt>unique_vals=False</tt> the inverted dictionary\nbuilds a set of keys that were associated with each value.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mapping</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">invert_dict</span><span class=\"p\">(</span><span class=\"n\">mapping</span><span class=\"p\">,</span> <span class=\"n\">unique_vals</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">},</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">},</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">},</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'d'</span><span class=\"p\">}}</span>\n</pre>\n</div>\n<div id=\"autodict-autovivification\">\n<h3>AutoDict - Autovivification</h3>\n<p>While the <tt>collections.defaultdict</tt> is nice, it is sometimes more\nconvenient to have an infinitely nested dictionary of dictionaries.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">auto</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">AutoDict</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'auto = </span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"p\">))</span>\n<span class=\"n\">auto</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">auto</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">10</span><span class=\"p\">][</span><span class=\"mi\">100</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'auto = </span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"p\">))</span>\n<span class=\"n\">auto</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">100</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}}}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">auto</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'hello'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'auto = </span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">auto</span><span class=\"p\">))</span>\n<span class=\"n\">auto</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"mi\">100</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}}}</span>\n</pre>\n</div>\n<div id=\"string-based-imports\">\n<h3>String-based imports</h3>\n<p>Ubelt contains functions to import modules dynamically without using the\npython <tt>import</tt> statement. While <tt>importlib</tt> exists, the <tt>ubelt</tt>\nimplementation is simpler to user and does not have the disadvantage of\nbreaking <tt>pytest</tt>.</p>\n<p>Note <tt>ubelt</tt> simply provides an interface to this functionality, the\ncore implementation is in <tt>xdoctest</tt> (over as of version <tt>0.7.0</tt>,\nthe code is statically copied into an autogenerated file such that <tt>ubelt</tt>\ndoes not actually depend on <tt>xdoctest</tt> during runtime).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">import_module_from_path</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"s1\">'~/code/ubelt/ubelt'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'module = </span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">))</span>\n<span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">'ubelt'</span> <span class=\"kn\">from</span> <span class=\"s1\">'/home/joncrall/code/ubelt/ubelt/__init__.py'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">import_module_from_name</span><span class=\"p\">(</span><span class=\"s1\">'ubelt'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'module = </span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">))</span>\n<span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">'ubelt'</span> <span class=\"kn\">from</span> <span class=\"s1\">'/home/joncrall/code/ubelt/ubelt/__init__.py'</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Related to this functionality are the functions\n<tt>ub.modpath_to_modname</tt> and <tt>ub.modname_to_modpath</tt>, which\n<em>statically</em> transform (i.e. no code in the target modules is imported\nor executed) between module names (e.g. <tt>ubelt.util_import</tt>) and\nmodule paths (e.g.\n<tt><span class=\"pre\">~/.local/conda/envs/cenv3/lib/python3.5/site-packages/ubelt/util_import.py</span></tt>).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">modpath</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">util_import</span><span class=\"o\">.</span><span class=\"vm\">__file__</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">modpath_to_modname</span><span class=\"p\">(</span><span class=\"n\">modpath</span><span class=\"p\">))</span>\n<span class=\"n\">ubelt</span><span class=\"o\">.</span><span class=\"n\">util_import</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">modname</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">util_import</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">assert</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">truepath</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">modname_to_modpath</span><span class=\"p\">(</span><span class=\"n\">modname</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"n\">modpath</span>\n</pre>\n</div>\n<div id=\"horizontal-string-concatenation\">\n<h3>Horizontal String Concatenation</h3>\n<p>Sometimes its just prettier to horizontally concatenate two blocks of\ntext.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ubelt</span> <span class=\"k\">as</span> <span class=\"nn\">ub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]],</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cbr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">trailsep</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">repr2</span><span class=\"p\">([[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]],</span> <span class=\"n\">nl</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cbr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">trailsep</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">hzcat</span><span class=\"p\">([</span><span class=\"s1\">'A = '</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"s1\">' * '</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">]))</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"o\">*</span> <span class=\"p\">[[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n     <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span>    <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]]</span>\n</pre>\n</div>\n<div id=\"external-tools\">\n<h3>External tools.</h3>\n<p>Some of the tools in <tt>ubelt</tt> also exist as standalone modules. I haven\u2019t\ndecided if its best to statically copy them into ubelt or require on pypi to\nsatisfy the dependency. There are some tools that are not used by default\nunless you explicitly allow for them.</p>\n<p>Code that is currently statically included:</p>\n<ul>\n<li>ProgIter - <a href=\"https://github.com/Erotemic/progiter\" rel=\"nofollow\">https://github.com/Erotemic/progiter</a></li>\n<li>Timerit - <a href=\"https://github.com/Erotemic/timerit\" rel=\"nofollow\">https://github.com/Erotemic/timerit</a></li>\n</ul>\n<p>Code that is currently linked via pypi:</p>\n<ul>\n<li>OrderedSet - <a href=\"https://github.com/LuminosoInsight/ordered-set\" rel=\"nofollow\">https://github.com/LuminosoInsight/ordered-set</a></li>\n</ul>\n<p>Code that is completely optional, and only used in specific cases:</p>\n<ul>\n<li>Numpy - <tt>ub.repr2</tt> will format a numpy array nicely by default</li>\n<li>xxhash - this can be specified as a hasher to <tt>ub.hash_data</tt></li>\n<li>Pygments - used by the <tt>util_color</tt> module.</li>\n</ul>\n<p>Also, in the future some of the functionality in ubelt may be ported and integrated\ninto the <tt>boltons</tt> project: <a href=\"https://github.com/mahmoud/boltons\" rel=\"nofollow\">https://github.com/mahmoud/boltons</a>.</p>\n</div>\n<div id=\"notes\">\n<h3>Notes.</h3>\n<p>Ubelt will support Python2 for the foreseeable future (at least until the\nprojects I work on are off it followed by a probation period).</p>\n<p>PRs are welcome. If you have a utility function that you think is useful then\nwrite a PR. I\u2019m likely to respond promptly.</p>\n<p>Also check out my other projects (many of which are powered by ubelt):</p>\n<ul>\n<li>ProgIter <a href=\"https://github.com/Erotemic/progiter\" rel=\"nofollow\">https://github.com/Erotemic/progiter</a></li>\n<li>Timerit <a href=\"https://github.com/Erotemic/timerit\" rel=\"nofollow\">https://github.com/Erotemic/timerit</a></li>\n<li>mkinit <a href=\"https://github.com/Erotemic/mkinit\" rel=\"nofollow\">https://github.com/Erotemic/mkinit</a></li>\n<li>xdoctest <a href=\"https://github.com/Erotemic/xdoctest\" rel=\"nofollow\">https://github.com/Erotemic/xdoctest</a></li>\n<li>xinspect <a href=\"https://github.com/Erotemic/xinspect\" rel=\"nofollow\">https://github.com/Erotemic/xinspect</a></li>\n<li>xdev <a href=\"https://github.com/Erotemic/xdev\" rel=\"nofollow\">https://github.com/Erotemic/xdev</a></li>\n<li>vimtk <a href=\"https://github.com/Erotemic/vimtk\" rel=\"nofollow\">https://github.com/Erotemic/vimtk</a></li>\n<li>graphid <a href=\"https://github.com/Erotemic/graphid\" rel=\"nofollow\">https://github.com/Erotemic/graphid</a></li>\n<li>ibeis <a href=\"https://github.com/Erotemic/ibeis\" rel=\"nofollow\">https://github.com/Erotemic/ibeis</a></li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6913219, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c5aa0655479700e9818f1dba49e40ea0", "sha256": "3fcdeb5ed1676da7994d1f393082514dad3d6ce5bad0d1ad2f50703ee6e4e7c5"}, "downloads": -1, "filename": "ubelt-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c5aa0655479700e9818f1dba49e40ea0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4725, "upload_time": "2017-02-01T15:12:20", "upload_time_iso_8601": "2017-02-01T15:12:20.748007Z", "url": "https://files.pythonhosted.org/packages/44/c9/7ba359ad7fca59da27412630c4808a921911bfe7f16c810d8b0a32771708/ubelt-0.0.1.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "0eb074810c989c4fae43610960684a2c", "sha256": "192e2bf2ecce0be4b3b29155d884fb48db7ab08d73059b3c809738781194be26"}, "downloads": -1, "filename": "ubelt-0.0.11.tar.gz", "has_sig": false, "md5_digest": "0eb074810c989c4fae43610960684a2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6358, "upload_time": "2017-02-01T16:15:20", "upload_time_iso_8601": "2017-02-01T16:15:20.462186Z", "url": "https://files.pythonhosted.org/packages/bf/1a/120d98231bf083e2155e3b55270e2cbe4fc8f49ad0d23221b94dd4475603/ubelt-0.0.11.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "29657b502bb22be0b1a789b93074bafe", "sha256": "9c1dfe271a525624e5b7b7206453bff8b316481fab1c3c58d7f2bf8ff6402a09"}, "downloads": -1, "filename": "ubelt-0.0.16.tar.gz", "has_sig": false, "md5_digest": "29657b502bb22be0b1a789b93074bafe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22880, "upload_time": "2017-04-05T22:03:00", "upload_time_iso_8601": "2017-04-05T22:03:00.515150Z", "url": "https://files.pythonhosted.org/packages/92/cd/51a0abefd9934bd9eb3e3ff18a833db8de74c108371152b5f8e51e5388fb/ubelt-0.0.16.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "fc86edfb5e0d61d6043af5d98acbe174", "sha256": "79bba0d0e134624d0affd55260b3df1ce78147a79561f44b2450b50e3cc32f25"}, "downloads": -1, "filename": "ubelt-0.0.17.tar.gz", "has_sig": false, "md5_digest": "fc86edfb5e0d61d6043af5d98acbe174", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31565, "upload_time": "2017-04-05T22:08:49", "upload_time_iso_8601": "2017-04-05T22:08:49.614205Z", "url": "https://files.pythonhosted.org/packages/6b/16/f2ddec7ebdc2e3f93b927fad06826ced9304f4bcdd55adaf89dd962fafb6/ubelt-0.0.17.tar.gz", "yanked": false}], "0.0.22": [{"comment_text": "", "digests": {"md5": "3758e2bfa538972134724b3b23999f1d", "sha256": "a657c2628991bbc3ed45bbee285bf5393e6ce569bc8d15c097f6d7eb8cf08975"}, "downloads": -1, "filename": "ubelt-0.0.22.tar.gz", "has_sig": false, "md5_digest": "3758e2bfa538972134724b3b23999f1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37143, "upload_time": "2017-07-02T20:07:48", "upload_time_iso_8601": "2017-07-02T20:07:48.798995Z", "url": "https://files.pythonhosted.org/packages/e9/ea/f34171a2e8e8fae3ba8aeb434c3769a36904e466b4e46c3b1febf9971490/ubelt-0.0.22.tar.gz", "yanked": false}], "0.0.25": [{"comment_text": "", "digests": {"md5": "ce36ac48fa34a04bec9645465644646d", "sha256": "eaed089bb7f12a844e722fedb8839303800fa047abb6d669ab5d59e0e99443ab"}, "downloads": -1, "filename": "ubelt-0.0.25-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce36ac48fa34a04bec9645465644646d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 44035, "upload_time": "2017-07-02T21:02:27", "upload_time_iso_8601": "2017-07-02T21:02:27.601529Z", "url": "https://files.pythonhosted.org/packages/58/cd/a828e6543c01716a81c1f0b261d0d449ea8c24b2a73fb9d74c0ae8070931/ubelt-0.0.25-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e72ec5ec05c35ae23c2a04788141421b", "sha256": "e66286a39a5396e97fc9a3cd77f455b20223dabbf1e3080e2c6b3ca30599d726"}, "downloads": -1, "filename": "ubelt-0.0.25-py3-none-any.whl", "has_sig": false, "md5_digest": "e72ec5ec05c35ae23c2a04788141421b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44030, "upload_time": "2017-07-02T21:02:28", "upload_time_iso_8601": "2017-07-02T21:02:28.753654Z", "url": "https://files.pythonhosted.org/packages/86/0d/317be3723ce7fba488bfb3618260f1f20a3dfbaef5db5666a432b0b6922f/ubelt-0.0.25-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af73bd73699190ba4c9558409272bf69", "sha256": "0ec45fb145eec46a1ce65c4bc0192e5611102ad2c5afa48cbd5d7f50c7872e05"}, "downloads": -1, "filename": "ubelt-0.0.25.tar.gz", "has_sig": false, "md5_digest": "af73bd73699190ba4c9558409272bf69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35161, "upload_time": "2017-07-02T20:53:40", "upload_time_iso_8601": "2017-07-02T20:53:40.724037Z", "url": "https://files.pythonhosted.org/packages/26/0d/0b6bac0553da6766d4ece7509789eb8b2fcb3047e2dc5a9d168c2a752a8a/ubelt-0.0.25.tar.gz", "yanked": false}], "0.0.26": [{"comment_text": "", "digests": {"md5": "f3d7dbb1798dd0ed7f07cf1c65b2d099", "sha256": "fd7b352bdff055fa3c2cd9dd33b4ff49e118c091afce42e97fdf26cb90f1740b"}, "downloads": -1, "filename": "ubelt-0.0.26-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3d7dbb1798dd0ed7f07cf1c65b2d099", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 48807, "upload_time": "2017-07-02T21:15:44", "upload_time_iso_8601": "2017-07-02T21:15:44.906257Z", "url": "https://files.pythonhosted.org/packages/62/7e/2ab2c5113b8ba1d711a90c0c5a543698875485d722261d2c22fab7399784/ubelt-0.0.26-py2.py3-none-any.whl", "yanked": false}], "0.0.27": [{"comment_text": "", "digests": {"md5": "6c3e6d2afd202f4848db82b2d42d2980", "sha256": "ddad93c566def2a95dddd712a52f8c9eb80b1f1018874c7a9d6a3b9d90c37a58"}, "downloads": -1, "filename": "ubelt-0.0.27-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6c3e6d2afd202f4848db82b2d42d2980", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 44730, "upload_time": "2017-07-02T21:19:21", "upload_time_iso_8601": "2017-07-02T21:19:21.680170Z", "url": "https://files.pythonhosted.org/packages/f3/62/c51f311fa6719fd7db6d2d490e1f20098217a4baf1aef8bab7d66ea2c31f/ubelt-0.0.27-py2.py3-none-any.whl", "yanked": false}], "0.0.28": [{"comment_text": "", "digests": {"md5": "b822899ca990338c3adf04260a3e1a5d", "sha256": "b999a45e7646795594e3d1bd77fc429a81fa4ceab9952d26ceb4e209b36512c4"}, "downloads": -1, "filename": "ubelt-0.0.28-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b822899ca990338c3adf04260a3e1a5d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45336, "upload_time": "2017-07-05T18:21:23", "upload_time_iso_8601": "2017-07-05T18:21:23.474880Z", "url": "https://files.pythonhosted.org/packages/c9/84/556c62aa0d22f4fd0a6ac6b0bcf5e42c77ac126b4e5b802eb93f3d9c6047/ubelt-0.0.28-py2.py3-none-any.whl", "yanked": false}], "0.0.30": [{"comment_text": "", "digests": {"md5": "d456508242bef5af978ba0dffbe394b5", "sha256": "abc85b0ed3acecf4efc02844fc3279e502f8f326054ffd058bb1b8a62c0af8ac"}, "downloads": -1, "filename": "ubelt-0.0.30-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d456508242bef5af978ba0dffbe394b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 48646, "upload_time": "2017-08-21T22:45:37", "upload_time_iso_8601": "2017-08-21T22:45:37.290580Z", "url": "https://files.pythonhosted.org/packages/8b/7e/fd980f8c9e63a7319c1752a91412df0a11cfa2e077e7edc17547d4f64b4e/ubelt-0.0.30-py2.py3-none-any.whl", "yanked": false}], "0.0.31": [{"comment_text": "", "digests": {"md5": "530646c41ba529c9001d964eb19ff798", "sha256": "115cc64520293803b024222dc2b0ee887aa8c6b169c58e3f31fdcaddda8eb9a6"}, "downloads": -1, "filename": "ubelt-0.0.31-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "530646c41ba529c9001d964eb19ff798", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 40584, "upload_time": "2017-09-04T21:40:45", "upload_time_iso_8601": "2017-09-04T21:40:45.639521Z", "url": "https://files.pythonhosted.org/packages/84/e0/cd7be73505ac1362f0c9eeb9acee3508349a595f65a5345238262312fe49/ubelt-0.0.31-py2.py3-none-any.whl", "yanked": false}], "0.0.32": [{"comment_text": "", "digests": {"md5": "f2498882d097982eedcdb708b098e190", "sha256": "89d248a12c62d0892f1b2f9b1169b14777295e6415b677c56ea869e9d02650a6"}, "downloads": -1, "filename": "ubelt-0.0.32-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f2498882d097982eedcdb708b098e190", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 40582, "upload_time": "2017-09-04T21:40:46", "upload_time_iso_8601": "2017-09-04T21:40:46.965440Z", "url": "https://files.pythonhosted.org/packages/07/9f/1a489bf28a532dd380996cce1aabbd6108e0b7516e4c3035821843ea0a5b/ubelt-0.0.32-py2.py3-none-any.whl", "yanked": false}], "0.0.33": [{"comment_text": "", "digests": {"md5": "326eeedb9921bd424288534abca9c198", "sha256": "24d125fd8beb9f4771e58728feb833cf2b6a904ae93699f17264916b8904887d"}, "downloads": -1, "filename": "ubelt-0.0.33-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "326eeedb9921bd424288534abca9c198", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 58158, "upload_time": "2017-09-13T22:32:48", "upload_time_iso_8601": "2017-09-13T22:32:48.196684Z", "url": "https://files.pythonhosted.org/packages/db/d1/df9eec41c53f731ed3da273da611950d760d05c446e8d9b74190fd65a18d/ubelt-0.0.33-py2.py3-none-any.whl", "yanked": false}], "0.0.34": [{"comment_text": "", "digests": {"md5": "d9b50a582ec0e8da0d287341d905da24", "sha256": "64758cda532170824769c9c7e20708b455201c05c0cce2aaf0ddd582993e94f3"}, "downloads": -1, "filename": "ubelt-0.0.34-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d9b50a582ec0e8da0d287341d905da24", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 61731, "upload_time": "2017-11-11T22:47:30", "upload_time_iso_8601": "2017-11-11T22:47:30.324157Z", "url": "https://files.pythonhosted.org/packages/bb/b2/b7b233b1d4a7e1fea429706484ec9d2ebce401a0adec4aa08b3fae99048a/ubelt-0.0.34-py2.py3-none-any.whl", "yanked": false}], "0.0.35": [{"comment_text": "", "digests": {"md5": "d0d87e9c03a33140010c0320eea9dae7", "sha256": "0c2f2311cffc94d0795485cf4b64a2f2c0acd94d4d51987d58de5094b7a2ed10"}, "downloads": -1, "filename": "ubelt-0.0.35-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d0d87e9c03a33140010c0320eea9dae7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 125690, "upload_time": "2017-12-12T22:24:22", "upload_time_iso_8601": "2017-12-12T22:24:22.347533Z", "url": "https://files.pythonhosted.org/packages/a1/1c/b1ad8fa68deba04d2dd1379ebc23e03409254b593888cbd0c8af7823e38c/ubelt-0.0.35-py2.py3-none-any.whl", "yanked": false}], "0.0.36": [{"comment_text": "", "digests": {"md5": "f6cfa874395370a009bce2eb07477814", "sha256": "5990c3816476109a9bf2730713fc203072dd69d7a3386bb17238be3480ad6bf3"}, "downloads": -1, "filename": "ubelt-0.0.36-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6cfa874395370a009bce2eb07477814", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 126183, "upload_time": "2017-12-20T23:13:37", "upload_time_iso_8601": "2017-12-20T23:13:37.808430Z", "url": "https://files.pythonhosted.org/packages/e8/27/76c4147e7c7f97cc05ae419de901db6f39a02a30e3f2af08e8fcd6259100/ubelt-0.0.36-py2.py3-none-any.whl", "yanked": false}], "0.0.38": [{"comment_text": "", "digests": {"md5": "f2e42e69208111c97654d7da56a0be4d", "sha256": "3f166fe6757841d65509c1cae6461ea77edf05e8b7e7d487eed0de44078f2a95"}, "downloads": -1, "filename": "ubelt-0.0.38-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f2e42e69208111c97654d7da56a0be4d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 68649, "upload_time": "2017-12-31T20:20:37", "upload_time_iso_8601": "2017-12-31T20:20:37.740600Z", "url": "https://files.pythonhosted.org/packages/27/f4/7696ba9114627b7e3c544badaee252e9afdbd76590d941bc23ed559ee27c/ubelt-0.0.38-py2.py3-none-any.whl", "yanked": false}], "0.0.39": [{"comment_text": "", "digests": {"md5": "d71a6ba96f3a454bec10548873d31da1", "sha256": "486d3d8830ce23f4eaa703aca3623cb12e1aad625d5293c039b790802684a71a"}, "downloads": -1, "filename": "ubelt-0.0.39-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d71a6ba96f3a454bec10548873d31da1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 137993, "upload_time": "2018-01-18T22:05:09", "upload_time_iso_8601": "2018-01-18T22:05:09.082182Z", "url": "https://files.pythonhosted.org/packages/2c/bc/330ddc671fbbf9329a39154af20cc6e510e64b231613a029e95e3e5eada7/ubelt-0.0.39-py2.py3-none-any.whl", "yanked": false}], "0.0.40": [{"comment_text": "", "digests": {"md5": "e58df95a62ac7618b4387d3cd417b7ab", "sha256": "00ccfbbffe640568b12b567d1fd16b6b32142b3d1e4f825cf0dd82687febb4a9"}, "downloads": -1, "filename": "ubelt-0.0.40-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e58df95a62ac7618b4387d3cd417b7ab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 72765, "upload_time": "2018-02-05T03:25:36", "upload_time_iso_8601": "2018-02-05T03:25:36.898606Z", "url": "https://files.pythonhosted.org/packages/18/c3/f593bd71e2a24729d4e1851197be5875a6d0934e638793eb119bd91a3201/ubelt-0.0.40-py2.py3-none-any.whl", "yanked": false}], "0.0.42": [{"comment_text": "", "digests": {"md5": "15bdc29454d4d59f57e8b94a336cd2f1", "sha256": "d850cd7f1aa2557688a352659e50488cf2c859e0b514948dc2492aae1ec55999"}, "downloads": -1, "filename": "ubelt-0.0.42-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "15bdc29454d4d59f57e8b94a336cd2f1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 150414, "upload_time": "2018-02-26T20:05:21", "upload_time_iso_8601": "2018-02-26T20:05:21.176153Z", "url": "https://files.pythonhosted.org/packages/8c/22/632dc8ad520242e594e2f90295fdf8986b664ac56a165420f9a4a7f46067/ubelt-0.0.42-py2.py3-none-any.whl", "yanked": false}], "0.0.43": [{"comment_text": "", "digests": {"md5": "eb8bb4f846728a8312e2cf0019ab0ad6", "sha256": "b2b8e868db616dfd3f6069463ae77f1ec6c84b0d9540bc568aeb1c01dee4571c"}, "downloads": -1, "filename": "ubelt-0.0.43-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eb8bb4f846728a8312e2cf0019ab0ad6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 150505, "upload_time": "2018-03-09T15:08:37", "upload_time_iso_8601": "2018-03-09T15:08:37.083701Z", "url": "https://files.pythonhosted.org/packages/95/a2/6c6ef95bb86c33988d334064f09c9bc5720d0cc001f9ac72863e9544c6ce/ubelt-0.0.43-py2.py3-none-any.whl", "yanked": false}], "0.0.44": [{"comment_text": "", "digests": {"md5": "26443c98edd2a119851281a9ffa6da36", "sha256": "b4cf6de232ac5890f9733392688958e51662120f96adc47439408782bbea92fc"}, "downloads": -1, "filename": "ubelt-0.0.44-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "26443c98edd2a119851281a9ffa6da36", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 84275, "upload_time": "2018-03-12T15:45:20", "upload_time_iso_8601": "2018-03-12T15:45:20.812782Z", "url": "https://files.pythonhosted.org/packages/58/1d/00fab1244d9216ce766760cdb8e91dafdb44e686453901f82024168af5c3/ubelt-0.0.44-py2.py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "166dfec1dff80b35f036145cce4c0e8f", "sha256": "171bc2f6e4064198879ab0997f918ee73f6530093b81d32d179fb643756d1263"}, "downloads": -1, "filename": "ubelt-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "166dfec1dff80b35f036145cce4c0e8f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 155839, "upload_time": "2018-04-02T20:15:00", "upload_time_iso_8601": "2018-04-02T20:15:00.573113Z", "url": "https://files.pythonhosted.org/packages/f9/6c/3ea501394518696784ddfedca562e5424ee44cf4b9eaafc1dbc45037ab22/ubelt-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "041752e2b49d86f6bbb32afeddf08e58", "sha256": "5f451c86d829c8acf67febd57b9db5266e9ed887ebdd6447451a18e885dbfe93"}, "downloads": -1, "filename": "ubelt-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "041752e2b49d86f6bbb32afeddf08e58", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 96955, "upload_time": "2018-04-21T02:25:32", "upload_time_iso_8601": "2018-04-21T02:25:32.243490Z", "url": "https://files.pythonhosted.org/packages/d8/4c/a9e1950f1867fb0c5e755f7254a7170745a68cae3ea4417a26e4f139c26c/ubelt-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "155c9e89a12ba8833eb2b7598319fcc4", "sha256": "a241d693c51ad5c6f4cdc5e5b08d93f20c657bc65127cd53e32de11c9be2ea41"}, "downloads": -1, "filename": "ubelt-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "155c9e89a12ba8833eb2b7598319fcc4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 89935, "upload_time": "2018-05-05T09:23:02", "upload_time_iso_8601": "2018-05-05T09:23:02.277232Z", "url": "https://files.pythonhosted.org/packages/f8/57/650ced1632f9467e3b06207e4cebf48d55a909552b59ffb07db71cc8e18a/ubelt-0.2.0-py2.py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c74ec5824106e3ae0bce12ed1c99da20", "sha256": "67cce3b8d7c451fe6ef73279bee50fea8dc6ee583d8d3801872ffb45921852b0"}, "downloads": -1, "filename": "ubelt-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c74ec5824106e3ae0bce12ed1c99da20", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 76935, "upload_time": "2018-06-12T14:59:45", "upload_time_iso_8601": "2018-06-12T14:59:45.469948Z", "url": "https://files.pythonhosted.org/packages/3d/36/b095998aceaccf23a26f0a89f8c534c2767502f093d7a1ac215a115c73ad/ubelt-0.3.0-py2.py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "edb5ddff7fdd00b148604778eb2ebeaa", "sha256": "7bcd7e4c74422dc862ca136e1f423781ba8dc44d5815319f53e0ff41385db4d3"}, "downloads": -1, "filename": "ubelt-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "edb5ddff7fdd00b148604778eb2ebeaa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 79441, "upload_time": "2018-07-12T16:17:35", "upload_time_iso_8601": "2018-07-12T16:17:35.125757Z", "url": "https://files.pythonhosted.org/packages/d8/fb/a1416684d9b6ba8d7d1da52504bbef3ee58291940205b34b6fe6f1918cf8/ubelt-0.4.0-py2.py3-none-any.whl", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "2a9e577555b1b1a36a9ec66370450925", "sha256": "0d3756e0bd57ce954d4393bec5b726b74be681bb531a4ee448203b40d93d6547"}, "downloads": -1, "filename": "ubelt-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2a9e577555b1b1a36a9ec66370450925", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 106417, "upload_time": "2018-07-23T04:08:00", "upload_time_iso_8601": "2018-07-23T04:08:00.791339Z", "url": "https://files.pythonhosted.org/packages/94/b0/0a1eae3d01cf4fa27c39c528d77926c8b743c4ac8cae6d0d902c3ba693bc/ubelt-0.5.0-py2.py3-none-any.whl", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "e79d67e2e898f615078cca9d9c7f23c1", "sha256": "c3fa1b0baa87fbb0c720300cef4927246b269b1cf7f13b929b6bda5b97d09cfb"}, "downloads": -1, "filename": "ubelt-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e79d67e2e898f615078cca9d9c7f23c1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 106279, "upload_time": "2018-07-23T04:11:27", "upload_time_iso_8601": "2018-07-23T04:11:27.083747Z", "url": "https://files.pythonhosted.org/packages/7c/be/178ef3e51eb69c343667d10a134eb50d69a71aa982f4b13f6c56b897e3cd/ubelt-0.5.1-py2.py3-none-any.whl", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "32b79fc847f6a3c2d4b02d4e34846baa", "sha256": "c6f2421deb4e4ecfcf2748deed278eb675a9b6ab5f05af18a7478074fe127074"}, "downloads": -1, "filename": "ubelt-0.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32b79fc847f6a3c2d4b02d4e34846baa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 107078, "upload_time": "2018-09-05T02:16:08", "upload_time_iso_8601": "2018-09-05T02:16:08.415722Z", "url": "https://files.pythonhosted.org/packages/cf/1e/3ebcbc40549ee4927afe280ee1dd66d3e7e34516a8ee6046befeac8eb6fd/ubelt-0.5.2-py2.py3-none-any.whl", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "8b8d882f33d059b5ed5d3ac74271c9eb", "sha256": "a5cc3670f4d9ae1c631038b5dcd15bf3ea5df33a95d32bf81e2131307c2f4212"}, "downloads": -1, "filename": "ubelt-0.5.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8b8d882f33d059b5ed5d3ac74271c9eb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 170943, "upload_time": "2018-10-24T04:29:11", "upload_time_iso_8601": "2018-10-24T04:29:11.406313Z", "url": "https://files.pythonhosted.org/packages/b0/aa/3bb8f1e54506c2edccf0834182d2953dbf2fb9318a76014229235d9a8a23/ubelt-0.5.3-py2.py3-none-any.whl", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "7248a699a9facb73e01e3608b53a4dcd", "sha256": "2310780fdbd07506270306cba6d02934d0b606bf1d780d695251b28d1252432c"}, "downloads": -1, "filename": "ubelt-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7248a699a9facb73e01e3608b53a4dcd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 109026, "upload_time": "2018-11-11T00:52:26", "upload_time_iso_8601": "2018-11-11T00:52:26.519414Z", "url": "https://files.pythonhosted.org/packages/80/4c/679dd4ab69076848b07c0d028ef5e3b3857ae68eb6c40b9129014ec44ff1/ubelt-0.6.0-py2.py3-none-any.whl", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "0a5c7c39c0334a4465deafdddb624d22", "sha256": "9ed2e3a548f77769857123cdb9157905c2be0b022fa677be06b320e2304460a7"}, "downloads": -1, "filename": "ubelt-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0a5c7c39c0334a4465deafdddb624d22", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 111454, "upload_time": "2019-01-08T23:50:59", "upload_time_iso_8601": "2019-01-08T23:50:59.269741Z", "url": "https://files.pythonhosted.org/packages/09/35/68f6af4f8687194e960d5daa298b74e324180b414d2c383efedc44f79015/ubelt-0.6.1-py2.py3-none-any.whl", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "a4500a5847f371993e6c047e3a90f973", "sha256": "ef2f9383842a19532447361efcfae57289b3334fd8df3019412fbcb9c81c4f65"}, "downloads": -1, "filename": "ubelt-0.6.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a4500a5847f371993e6c047e3a90f973", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 87326, "upload_time": "2019-02-14T14:53:37", "upload_time_iso_8601": "2019-02-14T14:53:37.529765Z", "url": "https://files.pythonhosted.org/packages/ac/9f/fa2000cee14119361c830b58439403b8f553adab249bff8c828a514e5549/ubelt-0.6.2-py2.py3-none-any.whl", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "b8783cf27f7f917ad285db66e6c02830", "sha256": "70f786d42679ebf596468dcd1378b1d667c9b4dc145e8d12331f8e5d48722a06"}, "downloads": -1, "filename": "ubelt-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b8783cf27f7f917ad285db66e6c02830", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 121115, "upload_time": "2019-03-13T02:46:52", "upload_time_iso_8601": "2019-03-13T02:46:52.567291Z", "url": "https://files.pythonhosted.org/packages/48/e9/cd71ea6ab218e8f2b3b17e720c193da89ba989b9272ef758ed24a9bf90ea/ubelt-0.7.0-py2.py3-none-any.whl", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "1e146f734c7c072173ae615e62061463", "sha256": "b24a313836c592d777f2b31147d092c4a893351558cfedc0c60457fe6cd68a4b"}, "downloads": -1, "filename": "ubelt-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e146f734c7c072173ae615e62061463", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 121134, "upload_time": "2019-03-19T23:08:37", "upload_time_iso_8601": "2019-03-19T23:08:37.397635Z", "url": "https://files.pythonhosted.org/packages/25/bc/3b61766d92c75b942ba93b984efc1de31ee93eccc3c03c27256241fc5e72/ubelt-0.7.1-py2.py3-none-any.whl", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "19a70db9231bd0f5f059c20145c8c4b5", "sha256": "2cd15517c9faa0a89a0ef0655d54e7bd05043c98e85eaa7723be228c67edbf7d"}, "downloads": -1, "filename": "ubelt-0.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "19a70db9231bd0f5f059c20145c8c4b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 125827, "upload_time": "2019-05-13T02:44:00", "upload_time_iso_8601": "2019-05-13T02:44:00.464589Z", "url": "https://files.pythonhosted.org/packages/a7/a9/72176eb64f845be030a14b2548ea52fe3759704313183625cce40dbacd9f/ubelt-0.8.0-py2.py3-none-any.whl", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "540b41c0d6a364ab845669c9710d9986", "sha256": "a7907f5b04367ef3a456ff5e6985e59769a0ccb6ba3175da9ea9af452eef788b"}, "downloads": -1, "filename": "ubelt-0.8.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "540b41c0d6a364ab845669c9710d9986", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 125874, "upload_time": "2019-05-24T23:29:53", "upload_time_iso_8601": "2019-05-24T23:29:53.096599Z", "url": "https://files.pythonhosted.org/packages/26/d6/869ccbfced2e3049709c2ff4711214837affc2d137529facd1d83a690a94/ubelt-0.8.1-py2.py3-none-any.whl", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "3414bc76f14574e0af15a9c8fe4b12bf", "sha256": "fbc9bea30fafa57a04d755bb70ed2589bceadbc5aa844dfecc25df952fa1ca9b"}, "downloads": -1, "filename": "ubelt-0.8.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "3414bc76f14574e0af15a9c8fe4b12bf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 104243, "upload_time": "2019-07-11T20:20:34", "upload_time_iso_8601": "2019-07-11T20:20:34.472587Z", "url": "https://files.pythonhosted.org/packages/35/3c/14f58f4bc1e0d691652f5e30bb84b55798a299c23a7dc4dca02da2a8809b/ubelt-0.8.2-py2.py3-none-any.whl", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "d2cb332b0e99946de78c11d88ddb3079", "sha256": "4b8b75c38f5ee02ac93215cea761ccc2c8174abe8f58c462f84ac80f3c69453a"}, "downloads": -1, "filename": "ubelt-0.8.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "d2cb332b0e99946de78c11d88ddb3079", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 105302, "upload_time": "2019-11-07T02:13:13", "upload_time_iso_8601": "2019-11-07T02:13:13.819949Z", "url": "https://files.pythonhosted.org/packages/d7/e6/db4106d2397967c78cdc7d0cb4b9ad2646e29c27412b294b4329eea32958/ubelt-0.8.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69ac68f3a31eb3055e1242fdd3cc1036", "sha256": "c3fc0453c48604b401d59519be2d065fbbe0f11cde9b2c6580b9eed27b81df09"}, "downloads": -1, "filename": "ubelt-0.8.3.tar.gz", "has_sig": true, "md5_digest": "69ac68f3a31eb3055e1242fdd3cc1036", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107237, "upload_time": "2019-11-07T02:13:17", "upload_time_iso_8601": "2019-11-07T02:13:17.241855Z", "url": "https://files.pythonhosted.org/packages/de/0a/9c14793e73516a9e065193a91fb38d2105eb56ff09fed5ff4ead5d800c3d/ubelt-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "050b089fded163dd0d7794cae9a579d3", "sha256": "6089e395784732f380191007559f8172c377cae22c6d6c4e77d71d23050fda1b"}, "downloads": -1, "filename": "ubelt-0.8.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "050b089fded163dd0d7794cae9a579d3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 118064, "upload_time": "2019-11-21T05:17:01", "upload_time_iso_8601": "2019-11-21T05:17:01.049216Z", "url": "https://files.pythonhosted.org/packages/d8/6b/79c47fa167251ca43b9a14bf1ee427ff23efdaff410326214addada1ed54/ubelt-0.8.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86addbbb37eecfae414ed156cc4ed182", "sha256": "5d055978fa7de4dcabae77b2fb3bf1d6590897d1e213ea8989890714e1785852"}, "downloads": -1, "filename": "ubelt-0.8.4.tar.gz", "has_sig": true, "md5_digest": "86addbbb37eecfae414ed156cc4ed182", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118850, "upload_time": "2019-11-21T05:17:04", "upload_time_iso_8601": "2019-11-21T05:17:04.551583Z", "url": "https://files.pythonhosted.org/packages/65/2a/bc1c94f78adc5dc4a0466d506f2a594c011208eea34a46b96159c33ef8da/ubelt-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "a992ea105655fe8f4b453664201bf785", "sha256": "ef098a586f29bab576abfd16893f42e363b12539e75c1b9dab41210d1e74610f"}, "downloads": -1, "filename": "ubelt-0.8.5-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a992ea105655fe8f4b453664201bf785", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 123147, "upload_time": "2019-11-27T03:37:43", "upload_time_iso_8601": "2019-11-27T03:37:43.693393Z", "url": "https://files.pythonhosted.org/packages/2a/fc/5d97cee171b5561e193cda0575251823c9a525619382ad344d18cbcb05ab/ubelt-0.8.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "118484fadf41f98dc0cc534fa1ac5bef", "sha256": "77fc2e68c83646ad646d53efe4a6e92765b00f164ac2654ae7cc07636c3166ee"}, "downloads": -1, "filename": "ubelt-0.8.5.tar.gz", "has_sig": true, "md5_digest": "118484fadf41f98dc0cc534fa1ac5bef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123565, "upload_time": "2019-11-27T03:37:47", "upload_time_iso_8601": "2019-11-27T03:37:47.273325Z", "url": "https://files.pythonhosted.org/packages/85/6e/e428ec81b7627662d556b16ee52e6a5782f0ba0d9846f99f28b7cb632f44/ubelt-0.8.5.tar.gz", "yanked": false}], "0.8.6": [{"comment_text": "", "digests": {"md5": "d847a6922c9ab215da69b3c3b569b2b5", "sha256": "a78f62894575c5a663ad89e6fca0412ebf68ecbf0c0d3aee0fd7890bcffcde1b"}, "downloads": -1, "filename": "ubelt-0.8.6-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "d847a6922c9ab215da69b3c3b569b2b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 119022, "upload_time": "2019-12-06T04:08:46", "upload_time_iso_8601": "2019-12-06T04:08:46.726001Z", "url": "https://files.pythonhosted.org/packages/23/94/f56aa6614307e80ae56b8109dda9e9815a781e33e9c623bb5130438585f9/ubelt-0.8.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73f887b1213fb97803652949ad410e80", "sha256": "4aace8c3159df44a4339bdcf2487a033a6ed66417e6ee3a00966d1da06a56ba9"}, "downloads": -1, "filename": "ubelt-0.8.6.tar.gz", "has_sig": true, "md5_digest": "73f887b1213fb97803652949ad410e80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119730, "upload_time": "2019-12-06T04:08:50", "upload_time_iso_8601": "2019-12-06T04:08:50.117729Z", "url": "https://files.pythonhosted.org/packages/be/07/523156b16dcb9dbb7768d405156da21c2e3e788e7325944b6b81e5011532/ubelt-0.8.6.tar.gz", "yanked": false}], "0.8.7": [{"comment_text": "", "digests": {"md5": "7e97fbace4e98c0839657660939f711d", "sha256": "167df3b8f4b7c17bbd43c0112f190933ec9a4b2778813ea7892fcf8b53bb7411"}, "downloads": -1, "filename": "ubelt-0.8.7-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "7e97fbace4e98c0839657660939f711d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 119088, "upload_time": "2019-12-06T19:56:49", "upload_time_iso_8601": "2019-12-06T19:56:49.377800Z", "url": "https://files.pythonhosted.org/packages/73/f0/dcf76c2b8b15ad45112b92bbf37354610262471e7ff9d3198cc6dbfc3cbf/ubelt-0.8.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "687333c02a8390b914af228d07aa7702", "sha256": "727b1c6b084367161e9342c6a5ea16c7f0ac4f2fc468cc6ca10aa41edc80495a"}, "downloads": -1, "filename": "ubelt-0.8.7.tar.gz", "has_sig": true, "md5_digest": "687333c02a8390b914af228d07aa7702", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 174456, "upload_time": "2019-12-06T19:56:52", "upload_time_iso_8601": "2019-12-06T19:56:52.972452Z", "url": "https://files.pythonhosted.org/packages/4d/15/c63f6e2324d9d0ec1ac87ae8dbcf37ffea563967b5bfde6569f963206686/ubelt-0.8.7.tar.gz", "yanked": false}], "0.8.8": [{"comment_text": "", "digests": {"md5": "657576a801dea1e748e98c18af9ebd92", "sha256": "835e3de957efc849222c28faa622ef34853b09cea2a7c0174eaae2846042e889"}, "downloads": -1, "filename": "ubelt-0.8.8-py2-none-any.whl", "has_sig": true, "md5_digest": "657576a801dea1e748e98c18af9ebd92", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 125193, "upload_time": "2020-01-12T21:13:09", "upload_time_iso_8601": "2020-01-12T21:13:09.437243Z", "url": "https://files.pythonhosted.org/packages/cb/64/a4829dabbfac43efa4f9a03fcf85e2ef1e4b245ddf807310deea106f17a2/ubelt-0.8.8-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a27e75a830fb23c208e3240878826021", "sha256": "884215976140fd125286aa1ca255e601a9a58612cf9bcda4124c8b0d4f66550b"}, "downloads": -1, "filename": "ubelt-0.8.8-py3-none-any.whl", "has_sig": true, "md5_digest": "a27e75a830fb23c208e3240878826021", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 125193, "upload_time": "2020-01-12T21:13:21", "upload_time_iso_8601": "2020-01-12T21:13:21.679722Z", "url": "https://files.pythonhosted.org/packages/79/fa/7ad620f9bb952a74785811f80117d16cc379616478851b5af25bf75e4b71/ubelt-0.8.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb31e041d397030fed48110c00544b9b", "sha256": "4cd3e0ca5184f24d8bb8400aa4d679f38312a23581521c61cce4a92c24546da2"}, "downloads": -1, "filename": "ubelt-0.8.8.tar.gz", "has_sig": true, "md5_digest": "eb31e041d397030fed48110c00544b9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125832, "upload_time": "2020-01-12T21:13:06", "upload_time_iso_8601": "2020-01-12T21:13:06.031528Z", "url": "https://files.pythonhosted.org/packages/0d/23/eedf606f12e051058917807571b8bb5bfc611a7a0d60b0b3ea7a4a9c4516/ubelt-0.8.8.tar.gz", "yanked": false}], "0.8.9": [{"comment_text": "", "digests": {"md5": "87a48c3ebb1388124d2e4807a0b2fde4", "sha256": "c0cd5aad37649dde6117bd3fcfb3ca86063607cc69117fee97d8a62920e52b11"}, "downloads": -1, "filename": "ubelt-0.8.9-py2-none-any.whl", "has_sig": true, "md5_digest": "87a48c3ebb1388124d2e4807a0b2fde4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 14977, "upload_time": "2020-02-21T04:05:44", "upload_time_iso_8601": "2020-02-21T04:05:44.321939Z", "url": "https://files.pythonhosted.org/packages/4b/13/ba04e4b51beeb56024e3ecdea81135e4dbbaef979aac412bc57e7d274dfc/ubelt-0.8.9-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d544a886eae2f1b1123b855ba42860f", "sha256": "fd9b2a724b14f6b54c3cb4c003569cadd0df5d76f3d7e831e88897e7f3276489"}, "downloads": -1, "filename": "ubelt-0.8.9-py3-none-any.whl", "has_sig": true, "md5_digest": "4d544a886eae2f1b1123b855ba42860f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14976, "upload_time": "2020-02-21T04:05:56", "upload_time_iso_8601": "2020-02-21T04:05:56.249815Z", "url": "https://files.pythonhosted.org/packages/32/52/445a3e9bc4155869aa37ca452843ba261a834684cbad712f4a2e9680412f/ubelt-0.8.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f28f808260138c8d0a7bf0e48c26bbc1", "sha256": "a022f1bba32e83e3b0f1ada50f6891360f913d8601c01ea924d91c52ac7a66d3"}, "downloads": -1, "filename": "ubelt-0.8.9.tar.gz", "has_sig": true, "md5_digest": "f28f808260138c8d0a7bf0e48c26bbc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31173, "upload_time": "2020-02-21T04:05:41", "upload_time_iso_8601": "2020-02-21T04:05:41.221424Z", "url": "https://files.pythonhosted.org/packages/c8/69/c24fb02723b324ee3b543d7cf776c661459fd3819b7de2f900b211613429/ubelt-0.8.9.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "0f8558cf45ff9d1ae60c87a2327f0360", "sha256": "821b3f7aa7a92f705a6cb9385f19e27cb9471fe9383859f512645f83832f5061"}, "downloads": -1, "filename": "ubelt-0.9.0-py2-none-any.whl", "has_sig": true, "md5_digest": "0f8558cf45ff9d1ae60c87a2327f0360", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 126118, "upload_time": "2020-02-23T03:21:48", "upload_time_iso_8601": "2020-02-23T03:21:48.139366Z", "url": "https://files.pythonhosted.org/packages/16/d2/f1a4dcb96a3b226b8aae54ce48182e96ebdf6bd2d0af6c1ef7350da1e550/ubelt-0.9.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eaa975adb9c0207e01a614c42e3475b0", "sha256": "3643d01a85299266ad5d5bee74998815f73471378745513a9707000ce59f21ae"}, "downloads": -1, "filename": "ubelt-0.9.0-py3-none-any.whl", "has_sig": true, "md5_digest": "eaa975adb9c0207e01a614c42e3475b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 126120, "upload_time": "2020-02-23T03:21:57", "upload_time_iso_8601": "2020-02-23T03:21:57.781529Z", "url": "https://files.pythonhosted.org/packages/a5/c1/653fbcfb1dcbe12e79d08f2e35acec968129c79fd9c04cf1afdbc7c9f2de/ubelt-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2330afacd157e72d0f21dc2ef43234c9", "sha256": "235f13ebc81c13ae2f52c72866e21690bf1bec18da8057acf6a56aef988217ad"}, "downloads": -1, "filename": "ubelt-0.9.0.tar.gz", "has_sig": true, "md5_digest": "2330afacd157e72d0f21dc2ef43234c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127098, "upload_time": "2020-02-23T03:21:45", "upload_time_iso_8601": "2020-02-23T03:21:45.480350Z", "url": "https://files.pythonhosted.org/packages/92/82/1d0e7573e7d3c9a8b70a903f89d12f4be947a9b074ef2d4fa42790327621/ubelt-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "6ec314122fefae7cde16194b1d69e27e", "sha256": "16b1ba0fe1be209d04a3e29644e3fffc5c050ed9dd8cc8c1411af29758624bc0"}, "downloads": -1, "filename": "ubelt-0.9.1-py2-none-any.whl", "has_sig": true, "md5_digest": "6ec314122fefae7cde16194b1d69e27e", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 126585, "upload_time": "2020-03-30T14:15:02", "upload_time_iso_8601": "2020-03-30T14:15:02.459430Z", "url": "https://files.pythonhosted.org/packages/5f/c4/faa4103bd69079ec3a13300630dbddd7852b09db9b97b878d780a66dfcb9/ubelt-0.9.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "613f67f7f298f4b873b7f6f504c66004", "sha256": "f6009d1712e13a9b8bffe6818655f680615936c2de450efed77845049182067d"}, "downloads": -1, "filename": "ubelt-0.9.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "613f67f7f298f4b873b7f6f504c66004", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 126589, "upload_time": "2020-03-30T14:05:38", "upload_time_iso_8601": "2020-03-30T14:05:38.526142Z", "url": "https://files.pythonhosted.org/packages/73/68/00fcb8848f067be3942156c708d70d7c3a5f3231a7d0a6bea7c3d9069ee4/ubelt-0.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e135a17094bbc413d84d5acb70f3f642", "sha256": "5ea60f26205c3f4cf750c70e4355af8a419f5ff950e3628353518387be74431d"}, "downloads": -1, "filename": "ubelt-0.9.1-py3-none-any.whl", "has_sig": true, "md5_digest": "e135a17094bbc413d84d5acb70f3f642", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 126586, "upload_time": "2020-03-30T14:05:41", "upload_time_iso_8601": "2020-03-30T14:05:41.507778Z", "url": "https://files.pythonhosted.org/packages/66/78/040894f533932f84881617bf16c8769f578768c82eab6010785e08395359/ubelt-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b983684e69de0534ae83eef75110dc41", "sha256": "37576938a75138e976d20b4f738a487f887a39fe9e6ed61628cfe65a0e41dddd"}, "downloads": -1, "filename": "ubelt-0.9.1.tar.gz", "has_sig": true, "md5_digest": "b983684e69de0534ae83eef75110dc41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125473, "upload_time": "2020-03-30T14:05:35", "upload_time_iso_8601": "2020-03-30T14:05:35.226728Z", "url": "https://files.pythonhosted.org/packages/01/d2/2321866d671e1ed82ba09166f99a74116fc38dda151bd8eceec3babbb819/ubelt-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ec314122fefae7cde16194b1d69e27e", "sha256": "16b1ba0fe1be209d04a3e29644e3fffc5c050ed9dd8cc8c1411af29758624bc0"}, "downloads": -1, "filename": "ubelt-0.9.1-py2-none-any.whl", "has_sig": true, "md5_digest": "6ec314122fefae7cde16194b1d69e27e", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 126585, "upload_time": "2020-03-30T14:15:02", "upload_time_iso_8601": "2020-03-30T14:15:02.459430Z", "url": "https://files.pythonhosted.org/packages/5f/c4/faa4103bd69079ec3a13300630dbddd7852b09db9b97b878d780a66dfcb9/ubelt-0.9.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "613f67f7f298f4b873b7f6f504c66004", "sha256": "f6009d1712e13a9b8bffe6818655f680615936c2de450efed77845049182067d"}, "downloads": -1, "filename": "ubelt-0.9.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "613f67f7f298f4b873b7f6f504c66004", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 126589, "upload_time": "2020-03-30T14:05:38", "upload_time_iso_8601": "2020-03-30T14:05:38.526142Z", "url": "https://files.pythonhosted.org/packages/73/68/00fcb8848f067be3942156c708d70d7c3a5f3231a7d0a6bea7c3d9069ee4/ubelt-0.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e135a17094bbc413d84d5acb70f3f642", "sha256": "5ea60f26205c3f4cf750c70e4355af8a419f5ff950e3628353518387be74431d"}, "downloads": -1, "filename": "ubelt-0.9.1-py3-none-any.whl", "has_sig": true, "md5_digest": "e135a17094bbc413d84d5acb70f3f642", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 126586, "upload_time": "2020-03-30T14:05:41", "upload_time_iso_8601": "2020-03-30T14:05:41.507778Z", "url": "https://files.pythonhosted.org/packages/66/78/040894f533932f84881617bf16c8769f578768c82eab6010785e08395359/ubelt-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b983684e69de0534ae83eef75110dc41", "sha256": "37576938a75138e976d20b4f738a487f887a39fe9e6ed61628cfe65a0e41dddd"}, "downloads": -1, "filename": "ubelt-0.9.1.tar.gz", "has_sig": true, "md5_digest": "b983684e69de0534ae83eef75110dc41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125473, "upload_time": "2020-03-30T14:05:35", "upload_time_iso_8601": "2020-03-30T14:05:35.226728Z", "url": "https://files.pythonhosted.org/packages/01/d2/2321866d671e1ed82ba09166f99a74116fc38dda151bd8eceec3babbb819/ubelt-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:21 2020"}