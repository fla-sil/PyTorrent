{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "Home-page: http://github.com/nfelsen/graphite-beacon\nAuthor: Kirill Klenov\nAuthor-email: horneds@gmail.com\nLicense: MIT\nDescription: graphite-beacon\n        ===============\n        \n        ![logo](https://raw.github.com/klen/graphite-beacon/develop/beacon.png)\n        \n        Simple alerting system for [Graphite](http://graphite.wikidot.com/) metrics.\n        \n        Features:\n        \n        - Simple installation\n        - No software dependencies (Databases, AMQP and etc)\n        - Light and fully asynchronous\n        - SMTP, HipChat, Slack, PagerDuty, HTTP handlers (PRs for additional handlers are welcome!)\n        - Easily configurable and supports historical values\n        \n        [![Build status](http://img.shields.io/travis/klen/graphite-beacon.svg?style=flat-square)](http://travis-ci.org/klen/graphite-beacon)\n        [![Coverage](http://img.shields.io/coveralls/klen/graphite-beacon.svg?style=flat-square)](https://coveralls.io/r/klen/graphite-beacon)\n        [![Version](http://img.shields.io/pypi/v/graphite-beacon.svg?style=flat-square)](https://pypi.python.org/pypi/graphite_beacon)\n        [![License](http://img.shields.io/pypi/l/graphite-beacon.svg?style=flat-square)](https://pypi.python.org/pypi/graphite_beacon)\n        [![Downloads](http://img.shields.io/pypi/dm/graphite-beacon.svg?style=flat-square)](https://pypi.python.org/pypi/graphite_beacon)\n        \n        Example:\n        ```js\n        {\n        \"graphite_url\": \"http://g.server.org\",\n        \"smtp\": {\n            \"from\": \"beacon@server.org\",\n            \"to\": [\"me@gmail.com\"]\n        },\n        \"alerts\": [\n            {   \"name\": \"MEM\",\n                \"format\": \"bytes\",\n                \"query\": \"aliasByNode(sumSeriesWithWildcards(collectd.*.memory.{memory-free,memory-cached}, 3), 1)\",\n                \"rules\": [\"critical: < 200MB\", \"warning: < 400MB\", \"warning: < historical / 2\"] },\n            {   \"name\": \"CPU\",\n                \"format\": \"percent\",\n                \"query\": \"aliasByNode(sumSeriesWithWildcards(collectd.*.cpu-*.cpu-user, 2), 1)\",\n                \"rules\": [\"critical: >= 80%\", \"warning: >= 70%\"] }\n        ]}\n        ```\n        \n        Requirements\n        ------------\n        \n        - python (2.7, 3.3, 3.4)\n        - tornado\n        - funcparserlib\n        - pyyaml\n        \n        \n        Installation\n        ------------\n        \n        ### Python package\n        \n        **graphite-beacon** can be installed using pip:\n        \n            pip install graphite-beacon\n        \n        ### Debian package\n        \n        Using the command line, add the following to your /etc/apt/sources.list system config file:\n        \n            echo \"deb http://dl.bintray.com/klen/deb /\" | sudo tee -a /etc/apt/sources.list\n            echo \"deb-src http://dl.bintray.com/klen/deb /\" | sudo tee -a /etc/apt/sources.list\n        \n        Install the package using apt-get:\n        \n            apt-get update\n            apt-get install graphite-beacon\n        \n        ### Ansible role\n        \n        There is an ansible role to install the package: https://github.com/Stouts/Stouts.graphite-beacon\n        \n        ## Docker\n        \n        Build a config.json file and run :\n        \n            docker run -v /path/to/config.json:/srv/alerting/etc/config.json deliverous/graphite-beacon\n        \n        \n        Usage\n        -----\n        \n        Just run `graphite-beacon`:\n        \n            $ graphite-beacon\n            [I 141025 11:16:23 core:141] Read configuration\n            [I 141025 11:16:23 core:55] Memory (10minute): init\n            [I 141025 11:16:23 core:166] Loaded with options:\n            ...\n        \n        ### Configuration\n        \n        ___\n        \n        Time units:\n        \n        > '2second', '3.5minute', '4hour', '5.2day', '6week', '7month', '8year'\n        \n        > short formats are: '2s', '3m', '4.1h' ...\n        \n        Value units:\n        \n        > short: '2K', '3Mil', '4Bil', '5Tri'\n        \n        > bytes: '2KB', '3MB', '4GB'\n        \n        > bits: '2Kb', '3Mb', '4Gb'\n        \n        > bps: '2Kbps', '3Mbps', '4Gbps'\n        \n        > time: '2s', '3m', '4h', '5d'\n        \n        The default options are:\n        \n        > Note: comments are not allowed in JSON, but graphite-beacon strips them\n        \n        ```js\n        \n            {\n                // Graphite server URL\n                \"graphite_url\": \"http://localhost\",\n        \n                // Public graphite server URL\n                // Used when notifying handlers, defaults to graphite_url\n                \"public_graphite_url\": null,\n        \n                // HTTP AUTH username\n                \"auth_username\": null,\n        \n                // HTTP AUTH password\n                \"auth_password\": null,\n        \n                // Path to a pidfile\n                \"pidfile\": null,\n        \n                // Default values format (none, bytes, s, ms, short)\n                // Can be redefined for each alert.\n                \"format\": \"short\",\n        \n                // Default query interval\n                // Can be redefined for each alert.\n                \"interval\": \"10minute\",\n        \n                // Default time window for Graphite queries\n                // Defaults to query interval, can be redefined for each alert.\n                \"time_window\": \"10minute\",\n        \n                // Notification repeat interval\n                // If an alert is failed, its notification will be repeated with the interval below\n                \"repeat_interval\": \"2hour\",\n        \n                // Default end time for Graphite queries\n                // Defaults to the current time, can be redefined for each alert.\n                \"until\": \"0second\",\n        \n                // Default loglevel\n                \"logging\": \"info\",\n        \n                // Default method (average, last_value, sum, minimum, maximum).\n                // Can be redefined for each alert.\n                \"method\": \"average\",\n        \n                // Default alert to send when no data received (normal = no alert)\n                // Can be redefined for each alert\n                \"no_data\": \"critical\",\n        \n                // Default alert to send when loading failed (timeout, server error, etc)\n                // (normal = no alert)\n                // Can be redefined for each alert\n                \"loading_error\": \"critical\"\n        \n                // Default prefix (used for notifications)\n                \"prefix\": \"[BEACON]\",\n        \n                // Default handlers (log, smtp, hipchat, http, slack, pagerduty)\n                \"critical_handlers\": [\"log\", \"smtp\"],\n                \"warning_handlers\": [\"log\", \"smtp\"],\n                \"normal_handlers\": [\"log\", \"smtp\"],\n        \n                // Send initial values (Send current values when reactor starts)\n                \"send_initial\": true,\n        \n                // used together to ignore the missing value\n                \"default_nan_value\": -1,\n                \"ignore_nan\": false,\n        \n                // Default alerts (see configuration below)\n                \"alerts\": [],\n        \n                // Path to other configuration files to include\n                \"include\": []\n            }\n        ```\n        \n        You can setup options with a configuration file. See examples for\n        [JSON](examples/example-config.json) and\n        [YAML](examples/example-config.yml).\n        \n        A `config.json` file in the same directory that you run `graphite-beacon`\n        from will be used automatically.\n        \n        #### Setup alerts\n        \n        Currently two types of alerts are supported:\n        - Graphite alert (default) - check graphite metrics\n        - URL alert - load http and check status\n        \n        > Note: comments are not allowed in JSON, but graphite-beacon strips them\n        \n        ```js\n        \n          \"alerts\": [\n            {\n              // (required) Alert name\n              \"name\": \"Memory\",\n        \n              // (required) Alert query\n              \"query\": \"*.memory.memory-free\",\n        \n              // (optional) Alert type (graphite, url)\n              \"source\": \"graphite\",\n        \n              // (optional) Default values format (none, bytes, s, ms, short)\n              \"format\": \"bytes\",\n        \n              // (optional) Alert method (average, last_value, sum, minimum, maximum)\n              \"method\": \"average\",\n        \n              // (optional) Alert interval [eg. 15second, 30minute, 2hour, 1day, 3month, 1year]\n              \"interval\": \"1minute\",\n        \n              // (optional) What kind of alert to send when no data received (normal = no alert)\n              \"no_data\": \"warning\",\n        \n              // (optional) Alert interval end time (see \"Alert interval\" for examples)\n              \"until\": \"5second\",\n        \n              // (required) Alert rules\n              // Rule format: \"{level}: {operator} {value}\"\n              // Level one of [critical, warning, normal]\n              // Operator one of [>, <, >=, <=, ==, !=]\n              // Value (absolute value: 3000000 or short form like 3MB/12minute)\n              // Multiple conditions can be separated by AND or OR conditions\n              \"rules\": [ \"critical: < 200MB\", \"warning: < 300MB\" ]\n            }\n          ]\n        ```\n        \n        ##### Historical values\n        \n        graphite-beacon supports \"historical\" values for a rule.\n        For example you may want to get warning when CPU usage is greater than 150% of normal usage:\n        \n            \"warning: > historical * 1.5\"\n        \n        Or memory is less than half the usual value:\n        \n            \"warning: < historical / 2\"\n        \n        \n        Historical values for each query are kept. A historical value\n        represents the average of all values in history. Rules using a historical value will\n        only work after enough values have been collected (see `history_size`).\n        \n        History values are kept for 1 day by default. You can change this with the `history_size`\n        option.\n        \n        See the below example for how to send a warning when today's new user count is\n        less than 80% of the last 10 day average:\n        \n        ```js\n        alerts: [\n          {\n            \"name\": \"Registrations\",\n            // Run once per day\n            \"interval\": \"1day\",\n            \"query\": \"Your graphite query here\",\n            // Get average for last 10 days\n            \"history_size\": \"10day\",\n            \"rules\": [\n              // Warning if today's new user less than 80% of average for 10 days\n              \"warning: < historical * 0.8\",\n             // Critical if today's new user less than 50% of average for 10 days\n              \"critical: < historical * 0.5\"\n            ]\n          }\n        ],\n        ```\n        \n        ### Handlers\n        \n        Handlers allow for notifying an external service or process of an alert firing.\n        \n        #### Email Handler\n        \n        Sends an email (enabled by default).\n        \n        ```js\n        {\n            // SMTP default options\n            \"smtp\": {\n                \"from\": \"beacon@graphite\",\n                \"to\": [],                   // List of email addresses to send to\n                \"host\": \"localhost\",        // SMTP host\n                \"port\": 25,                 // SMTP port\n                \"username\": null,           // SMTP user (optional)\n                \"password\": null,           // SMTP password (optional)\n                \"use_tls\": false,           // Use TLS?\n                \"html\": true,               // Send HTML emails?\n        \n                // Graphite link for emails (By default is equal to main graphite_url)\n                \"graphite_url\": null\n            }\n        }\n        ```\n        \n        #### HipChat Handler\n        \n        Sends a message to a HipChat room.\n        \n        ```js\n        {\n            \"hipchat\": {\n                // (optional) Custom HipChat URL\n                \"url\": 'https://api.custom.hipchat.my',\n        \n                \"room\": \"myroom\",\n                \"key\": \"mykey\"\n            }\n        }\n        ```\n        \n        #### Webhook Handler (HTTP)\n        \n        Triggers a webhook.\n        \n        ```js\n        {\n            \"http\": {\n                \"url\": \"http://myhook.com\",\n                \"params\": {},                 // (optional) Additional query(data) params\n                \"method\": \"GET\"               // (optional) HTTP method\n            }\n        }\n        ```\n        \n        #### Slack Handler\n        \n        Sends a message to a user or channel on Slack.\n        \n        ```js\n        {\n            \"slack\": {\n                \"webhook\": \"https://hooks.slack.com/services/...\",\n                \"channel\": \"#general\",          // #channel or @user (optional)\n                \"username\": \"graphite-beacon\",\n            }\n        }\n        ```\n        \n        #### Command Line Handler\n        \n        Runs a command.\n        \n        ```js\n        {\n            \"cli\": {\n                // Command to run (required)\n                // Several variables that will be substituted by values are allowed:\n                //  ${level} -- alert level\n                //  ${name} -- alert name\n                //  ${value} -- current metrics value\n                //  ${limit_value} -- metrics limit value\n                \"command\": \"./myscript ${level} ${name} ${value} ...\",\n        \n                // Whitelist of alerts that will trigger this handler (optional)\n                // All alerts will trigger this handler if absent.\n                \"alerts_whitelist\": [\"...\"]\n            }\n        }\n        ```\n        \n        #### PagerDuty Handler\n        \n        Triggers a PagerDuty incident.\n        \n        ```js\n        {\n            \"pagerduty\": {\n                \"subdomain\": \"yoursubdomain\",\n                \"apitoken\": \"apitoken\",\n                \"service_key\": \"servicekey\",\n            }\n        }\n        ```\n        \n        #### Telegram Handler\n        \n        Sends a Telegram message.\n        \n        ```js\n        {\n            \"telegram\": {\n                \"token\": \"telegram bot token\",\n                \"bot_ident\": \"token you choose to activate bot in a group\"\n                \"chatfile\": \"path to file where chat ids are saved, optional field\"\n            }\n        }\n        ```\n        \n        ### Command Line Usage\n        \n        ```\n          $ graphite-beacon --help\n          Usage: graphite-beacon [OPTIONS]\n        \n          Options:\n        \n            --config                         Path to an configuration file (JSON/YAML)\n                                             (default config.json)\n            --graphite_url                   Graphite URL (default http://localhost)\n            --help                           show this help information\n            --pidfile                        Set pid file\n        \n            --log_file_max_size              max size of log files before rollover\n                                             (default 100000000)\n            --log_file_num_backups           number of log files to keep (default 10)\n            --log_file_prefix=PATH           Path prefix for log files. Note that if you\n                                             are running multiple tornado processes,\n                                             log_file_prefix must be different for each\n                                             of them (e.g. include the port number)\n            --log_to_stderr                  Send log output to stderr (colorized if\n                                             possible). By default use stderr if\n                                             --log_file_prefix is not set and no other\n                                             logging is configured.\n            --logging=debug|info|warning|error|none\n                                             Set the Python log level. If 'none', tornado\n                                             won't touch the logging configuration.\n                                             (default info)\n        ```\n        \n        Bug tracker\n        -----------\n        \n        If you have any suggestions, bug reports or annoyances please report them to\n        the issue tracker at https://github.com/klen/graphite-beacon/issues\n        \n        Contributors\n        -------------\n        \n        * Andrej Kuro\u010denko (https://github.com/kurochenko)\n        * Cody Soyland (https://github.com/codysoyland)\n        * Garrett Heel (https://github.com/GarrettHeel)\n        * George Ionita (https://github.com/georgeionita)\n        * James Yuzawa (https://github.com/yuzawa-san)\n        * Kirill Klenov (https://github.com/klen)\n        * Konstantin Bakulin (https://github.com/kbakulin)\n        * Lammert Hellinga (https://github.com/Kogelvis)\n        * Miguel Moll (https://github.com/MiguelMoll)\n        * Nick Pillitteri (https://github.com/56quarters)\n        * Niku Toivola (https://github.com/nikut)\n        * Olli-Pekka Puolitaival (https://github.com/OPpuolitaival)\n        * Phillip Hagedorn (https://github.com/phagedorn)\n        * Raine Virta (https://github.com/raine)\n        * Scott Nonnenberg (https://github.com/scottnonnenberg)\n        * Sean Johnson (https://github.com/pirogoeth)\n        * Terry Peng (https://github.com/tpeng)\n        * Thomas Clavier (https://github.com/tclavier)\n        * Yuriy Ilyin (https://github.com/YuriyIlyin)\n        * dugeem (https://github.com/dugeem)\n        * Joakim (https://github.com/VibyJocke)\n        \n        License\n        --------\n        \n        Licensed under a [MIT license](http://www.linfo.org/mitlicense.html)\n        \n        If you wish to express your appreciation for the role, you are welcome to send\n        a postcard to:\n        \n            Kirill Klenov\n            pos. Severny 8-3\n            MO, Istra, 143500\n            Russia\n        \nKeywords: graphite,alerts,monitoring,system\nPlatform: Any\nClassifier: Development Status :: 4 - Beta\nClassifier: Intended Audience :: Developers\nClassifier: License :: OSI Approved :: MIT License\nClassifier: Natural Language :: English\nClassifier: Natural Language :: Russian\nClassifier: Operating System :: OS Independent\nClassifier: Programming Language :: Python :: 2\nClassifier: Programming Language :: Python :: 3\nClassifier: Programming Language :: Python\nClassifier: Topic :: Software Development :: Libraries :: Python Modules\nClassifier: Topic :: Software Development :: Testing\nClassifier: Topic :: Utilities\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "graphite-beacon-opsgenie-v2", "package_url": "https://pypi.org/project/graphite-beacon-opsgenie-v2/", "platform": "", "project_url": "https://pypi.org/project/graphite-beacon-opsgenie-v2/", "project_urls": null, "release_url": "https://pypi.org/project/graphite-beacon-opsgenie-v2/0.27.3/", "requires_dist": null, "requires_python": "", "summary": "Simple alerting system for Graphite metrics.", "version": "0.27.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            Home-page: http://github.com/nfelsen/graphite-beacon<br>Author: Kirill Klenov<br>Author-email: horneds@gmail.com<br>License: MIT<br>Description: graphite-beacon<br>        ===============<br>        <br>        ![logo](https://raw.github.com/klen/graphite-beacon/develop/beacon.png)<br>        <br>        Simple alerting system for [Graphite](http://graphite.wikidot.com/) metrics.<br>        <br>        Features:<br>        <br>        - Simple installation<br>        - No software dependencies (Databases, AMQP and etc)<br>        - Light and fully asynchronous<br>        - SMTP, HipChat, Slack, PagerDuty, HTTP handlers (PRs for additional handlers are welcome!)<br>        - Easily configurable and supports historical values<br>        <br>        [![Build status](http://img.shields.io/travis/klen/graphite-beacon.svg?style=flat-square)](http://travis-ci.org/klen/graphite-beacon)<br>        [![Coverage](http://img.shields.io/coveralls/klen/graphite-beacon.svg?style=flat-square)](https://coveralls.io/r/klen/graphite-beacon)<br>        [![Version](http://img.shields.io/pypi/v/graphite-beacon.svg?style=flat-square)](https://pypi.python.org/pypi/graphite_beacon)<br>        [![License](http://img.shields.io/pypi/l/graphite-beacon.svg?style=flat-square)](https://pypi.python.org/pypi/graphite_beacon)<br>        [![Downloads](http://img.shields.io/pypi/dm/graphite-beacon.svg?style=flat-square)](https://pypi.python.org/pypi/graphite_beacon)<br>        <br>        Example:<br>        ```js<br>        {<br>        \"graphite_url\": \"http://g.server.org\",<br>        \"smtp\": {<br>            \"from\": \"beacon@server.org\",<br>            \"to\": [\"me@gmail.com\"]<br>        },<br>        \"alerts\": [<br>            {   \"name\": \"MEM\",<br>                \"format\": \"bytes\",<br>                \"query\": \"aliasByNode(sumSeriesWithWildcards(collectd.*.memory.{memory-free,memory-cached}, 3), 1)\",<br>                \"rules\": [\"critical: &lt; 200MB\", \"warning: &lt; 400MB\", \"warning: &lt; historical / 2\"] },<br>            {   \"name\": \"CPU\",<br>                \"format\": \"percent\",<br>                \"query\": \"aliasByNode(sumSeriesWithWildcards(collectd.*.cpu-*.cpu-user, 2), 1)\",<br>                \"rules\": [\"critical: &gt;= 80%\", \"warning: &gt;= 70%\"] }<br>        ]}<br>        ```<br>        <br>        Requirements<br>        ------------<br>        <br>        - python (2.7, 3.3, 3.4)<br>        - tornado<br>        - funcparserlib<br>        - pyyaml<br>        <br>        <br>        Installation<br>        ------------<br>        <br>        ### Python package<br>        <br>        **graphite-beacon** can be installed using pip:<br>        <br>            pip install graphite-beacon<br>        <br>        ### Debian package<br>        <br>        Using the command line, add the following to your /etc/apt/sources.list system config file:<br>        <br>            echo \"deb http://dl.bintray.com/klen/deb /\" | sudo tee -a /etc/apt/sources.list<br>            echo \"deb-src http://dl.bintray.com/klen/deb /\" | sudo tee -a /etc/apt/sources.list<br>        <br>        Install the package using apt-get:<br>        <br>            apt-get update<br>            apt-get install graphite-beacon<br>        <br>        ### Ansible role<br>        <br>        There is an ansible role to install the package: https://github.com/Stouts/Stouts.graphite-beacon<br>        <br>        ## Docker<br>        <br>        Build a config.json file and run :<br>        <br>            docker run -v /path/to/config.json:/srv/alerting/etc/config.json deliverous/graphite-beacon<br>        <br>        <br>        Usage<br>        -----<br>        <br>        Just run `graphite-beacon`:<br>        <br>            $ graphite-beacon<br>            [I 141025 11:16:23 core:141] Read configuration<br>            [I 141025 11:16:23 core:55] Memory (10minute): init<br>            [I 141025 11:16:23 core:166] Loaded with options:<br>            ...<br>        <br>        ### Configuration<br>        <br>        ___<br>        <br>        Time units:<br>        <br>        &gt; '2second', '3.5minute', '4hour', '5.2day', '6week', '7month', '8year'<br>        <br>        &gt; short formats are: '2s', '3m', '4.1h' ...<br>        <br>        Value units:<br>        <br>        &gt; short: '2K', '3Mil', '4Bil', '5Tri'<br>        <br>        &gt; bytes: '2KB', '3MB', '4GB'<br>        <br>        &gt; bits: '2Kb', '3Mb', '4Gb'<br>        <br>        &gt; bps: '2Kbps', '3Mbps', '4Gbps'<br>        <br>        &gt; time: '2s', '3m', '4h', '5d'<br>        <br>        The default options are:<br>        <br>        &gt; Note: comments are not allowed in JSON, but graphite-beacon strips them<br>        <br>        ```js<br>        <br>            {<br>                // Graphite server URL<br>                \"graphite_url\": \"http://localhost\",<br>        <br>                // Public graphite server URL<br>                // Used when notifying handlers, defaults to graphite_url<br>                \"public_graphite_url\": null,<br>        <br>                // HTTP AUTH username<br>                \"auth_username\": null,<br>        <br>                // HTTP AUTH password<br>                \"auth_password\": null,<br>        <br>                // Path to a pidfile<br>                \"pidfile\": null,<br>        <br>                // Default values format (none, bytes, s, ms, short)<br>                // Can be redefined for each alert.<br>                \"format\": \"short\",<br>        <br>                // Default query interval<br>                // Can be redefined for each alert.<br>                \"interval\": \"10minute\",<br>        <br>                // Default time window for Graphite queries<br>                // Defaults to query interval, can be redefined for each alert.<br>                \"time_window\": \"10minute\",<br>        <br>                // Notification repeat interval<br>                // If an alert is failed, its notification will be repeated with the interval below<br>                \"repeat_interval\": \"2hour\",<br>        <br>                // Default end time for Graphite queries<br>                // Defaults to the current time, can be redefined for each alert.<br>                \"until\": \"0second\",<br>        <br>                // Default loglevel<br>                \"logging\": \"info\",<br>        <br>                // Default method (average, last_value, sum, minimum, maximum).<br>                // Can be redefined for each alert.<br>                \"method\": \"average\",<br>        <br>                // Default alert to send when no data received (normal = no alert)<br>                // Can be redefined for each alert<br>                \"no_data\": \"critical\",<br>        <br>                // Default alert to send when loading failed (timeout, server error, etc)<br>                // (normal = no alert)<br>                // Can be redefined for each alert<br>                \"loading_error\": \"critical\"<br>        <br>                // Default prefix (used for notifications)<br>                \"prefix\": \"[BEACON]\",<br>        <br>                // Default handlers (log, smtp, hipchat, http, slack, pagerduty)<br>                \"critical_handlers\": [\"log\", \"smtp\"],<br>                \"warning_handlers\": [\"log\", \"smtp\"],<br>                \"normal_handlers\": [\"log\", \"smtp\"],<br>        <br>                // Send initial values (Send current values when reactor starts)<br>                \"send_initial\": true,<br>        <br>                // used together to ignore the missing value<br>                \"default_nan_value\": -1,<br>                \"ignore_nan\": false,<br>        <br>                // Default alerts (see configuration below)<br>                \"alerts\": [],<br>        <br>                // Path to other configuration files to include<br>                \"include\": []<br>            }<br>        ```<br>        <br>        You can setup options with a configuration file. See examples for<br>        [JSON](examples/example-config.json) and<br>        [YAML](examples/example-config.yml).<br>        <br>        A `config.json` file in the same directory that you run `graphite-beacon`<br>        from will be used automatically.<br>        <br>        #### Setup alerts<br>        <br>        Currently two types of alerts are supported:<br>        - Graphite alert (default) - check graphite metrics<br>        - URL alert - load http and check status<br>        <br>        &gt; Note: comments are not allowed in JSON, but graphite-beacon strips them<br>        <br>        ```js<br>        <br>          \"alerts\": [<br>            {<br>              // (required) Alert name<br>              \"name\": \"Memory\",<br>        <br>              // (required) Alert query<br>              \"query\": \"*.memory.memory-free\",<br>        <br>              // (optional) Alert type (graphite, url)<br>              \"source\": \"graphite\",<br>        <br>              // (optional) Default values format (none, bytes, s, ms, short)<br>              \"format\": \"bytes\",<br>        <br>              // (optional) Alert method (average, last_value, sum, minimum, maximum)<br>              \"method\": \"average\",<br>        <br>              // (optional) Alert interval [eg. 15second, 30minute, 2hour, 1day, 3month, 1year]<br>              \"interval\": \"1minute\",<br>        <br>              // (optional) What kind of alert to send when no data received (normal = no alert)<br>              \"no_data\": \"warning\",<br>        <br>              // (optional) Alert interval end time (see \"Alert interval\" for examples)<br>              \"until\": \"5second\",<br>        <br>              // (required) Alert rules<br>              // Rule format: \"{level}: {operator} {value}\"<br>              // Level one of [critical, warning, normal]<br>              // Operator one of [&gt;, &lt;, &gt;=, &lt;=, ==, !=]<br>              // Value (absolute value: 3000000 or short form like 3MB/12minute)<br>              // Multiple conditions can be separated by AND or OR conditions<br>              \"rules\": [ \"critical: &lt; 200MB\", \"warning: &lt; 300MB\" ]<br>            }<br>          ]<br>        ```<br>        <br>        ##### Historical values<br>        <br>        graphite-beacon supports \"historical\" values for a rule.<br>        For example you may want to get warning when CPU usage is greater than 150% of normal usage:<br>        <br>            \"warning: &gt; historical * 1.5\"<br>        <br>        Or memory is less than half the usual value:<br>        <br>            \"warning: &lt; historical / 2\"<br>        <br>        <br>        Historical values for each query are kept. A historical value<br>        represents the average of all values in history. Rules using a historical value will<br>        only work after enough values have been collected (see `history_size`).<br>        <br>        History values are kept for 1 day by default. You can change this with the `history_size`<br>        option.<br>        <br>        See the below example for how to send a warning when today's new user count is<br>        less than 80% of the last 10 day average:<br>        <br>        ```js<br>        alerts: [<br>          {<br>            \"name\": \"Registrations\",<br>            // Run once per day<br>            \"interval\": \"1day\",<br>            \"query\": \"Your graphite query here\",<br>            // Get average for last 10 days<br>            \"history_size\": \"10day\",<br>            \"rules\": [<br>              // Warning if today's new user less than 80% of average for 10 days<br>              \"warning: &lt; historical * 0.8\",<br>             // Critical if today's new user less than 50% of average for 10 days<br>              \"critical: &lt; historical * 0.5\"<br>            ]<br>          }<br>        ],<br>        ```<br>        <br>        ### Handlers<br>        <br>        Handlers allow for notifying an external service or process of an alert firing.<br>        <br>        #### Email Handler<br>        <br>        Sends an email (enabled by default).<br>        <br>        ```js<br>        {<br>            // SMTP default options<br>            \"smtp\": {<br>                \"from\": \"beacon@graphite\",<br>                \"to\": [],                   // List of email addresses to send to<br>                \"host\": \"localhost\",        // SMTP host<br>                \"port\": 25,                 // SMTP port<br>                \"username\": null,           // SMTP user (optional)<br>                \"password\": null,           // SMTP password (optional)<br>                \"use_tls\": false,           // Use TLS?<br>                \"html\": true,               // Send HTML emails?<br>        <br>                // Graphite link for emails (By default is equal to main graphite_url)<br>                \"graphite_url\": null<br>            }<br>        }<br>        ```<br>        <br>        #### HipChat Handler<br>        <br>        Sends a message to a HipChat room.<br>        <br>        ```js<br>        {<br>            \"hipchat\": {<br>                // (optional) Custom HipChat URL<br>                \"url\": 'https://api.custom.hipchat.my',<br>        <br>                \"room\": \"myroom\",<br>                \"key\": \"mykey\"<br>            }<br>        }<br>        ```<br>        <br>        #### Webhook Handler (HTTP)<br>        <br>        Triggers a webhook.<br>        <br>        ```js<br>        {<br>            \"http\": {<br>                \"url\": \"http://myhook.com\",<br>                \"params\": {},                 // (optional) Additional query(data) params<br>                \"method\": \"GET\"               // (optional) HTTP method<br>            }<br>        }<br>        ```<br>        <br>        #### Slack Handler<br>        <br>        Sends a message to a user or channel on Slack.<br>        <br>        ```js<br>        {<br>            \"slack\": {<br>                \"webhook\": \"https://hooks.slack.com/services/...\",<br>                \"channel\": \"#general\",          // #channel or @user (optional)<br>                \"username\": \"graphite-beacon\",<br>            }<br>        }<br>        ```<br>        <br>        #### Command Line Handler<br>        <br>        Runs a command.<br>        <br>        ```js<br>        {<br>            \"cli\": {<br>                // Command to run (required)<br>                // Several variables that will be substituted by values are allowed:<br>                //  ${level} -- alert level<br>                //  ${name} -- alert name<br>                //  ${value} -- current metrics value<br>                //  ${limit_value} -- metrics limit value<br>                \"command\": \"./myscript ${level} ${name} ${value} ...\",<br>        <br>                // Whitelist of alerts that will trigger this handler (optional)<br>                // All alerts will trigger this handler if absent.<br>                \"alerts_whitelist\": [\"...\"]<br>            }<br>        }<br>        ```<br>        <br>        #### PagerDuty Handler<br>        <br>        Triggers a PagerDuty incident.<br>        <br>        ```js<br>        {<br>            \"pagerduty\": {<br>                \"subdomain\": \"yoursubdomain\",<br>                \"apitoken\": \"apitoken\",<br>                \"service_key\": \"servicekey\",<br>            }<br>        }<br>        ```<br>        <br>        #### Telegram Handler<br>        <br>        Sends a Telegram message.<br>        <br>        ```js<br>        {<br>            \"telegram\": {<br>                \"token\": \"telegram bot token\",<br>                \"bot_ident\": \"token you choose to activate bot in a group\"<br>                \"chatfile\": \"path to file where chat ids are saved, optional field\"<br>            }<br>        }<br>        ```<br>        <br>        ### Command Line Usage<br>        <br>        ```<br>          $ graphite-beacon --help<br>          Usage: graphite-beacon [OPTIONS]<br>        <br>          Options:<br>        <br>            --config                         Path to an configuration file (JSON/YAML)<br>                                             (default config.json)<br>            --graphite_url                   Graphite URL (default http://localhost)<br>            --help                           show this help information<br>            --pidfile                        Set pid file<br>        <br>            --log_file_max_size              max size of log files before rollover<br>                                             (default 100000000)<br>            --log_file_num_backups           number of log files to keep (default 10)<br>            --log_file_prefix=PATH           Path prefix for log files. Note that if you<br>                                             are running multiple tornado processes,<br>                                             log_file_prefix must be different for each<br>                                             of them (e.g. include the port number)<br>            --log_to_stderr                  Send log output to stderr (colorized if<br>                                             possible). By default use stderr if<br>                                             --log_file_prefix is not set and no other<br>                                             logging is configured.<br>            --logging=debug|info|warning|error|none<br>                                             Set the Python log level. If 'none', tornado<br>                                             won't touch the logging configuration.<br>                                             (default info)<br>        ```<br>        <br>        Bug tracker<br>        -----------<br>        <br>        If you have any suggestions, bug reports or annoyances please report them to<br>        the issue tracker at https://github.com/klen/graphite-beacon/issues<br>        <br>        Contributors<br>        -------------<br>        <br>        * Andrej Kuro\u010denko (https://github.com/kurochenko)<br>        * Cody Soyland (https://github.com/codysoyland)<br>        * Garrett Heel (https://github.com/GarrettHeel)<br>        * George Ionita (https://github.com/georgeionita)<br>        * James Yuzawa (https://github.com/yuzawa-san)<br>        * Kirill Klenov (https://github.com/klen)<br>        * Konstantin Bakulin (https://github.com/kbakulin)<br>        * Lammert Hellinga (https://github.com/Kogelvis)<br>        * Miguel Moll (https://github.com/MiguelMoll)<br>        * Nick Pillitteri (https://github.com/56quarters)<br>        * Niku Toivola (https://github.com/nikut)<br>        * Olli-Pekka Puolitaival (https://github.com/OPpuolitaival)<br>        * Phillip Hagedorn (https://github.com/phagedorn)<br>        * Raine Virta (https://github.com/raine)<br>        * Scott Nonnenberg (https://github.com/scottnonnenberg)<br>        * Sean Johnson (https://github.com/pirogoeth)<br>        * Terry Peng (https://github.com/tpeng)<br>        * Thomas Clavier (https://github.com/tclavier)<br>        * Yuriy Ilyin (https://github.com/YuriyIlyin)<br>        * dugeem (https://github.com/dugeem)<br>        * Joakim (https://github.com/VibyJocke)<br>        <br>        License<br>        --------<br>        <br>        Licensed under a [MIT license](http://www.linfo.org/mitlicense.html)<br>        <br>        If you wish to express your appreciation for the role, you are welcome to send<br>        a postcard to:<br>        <br>            Kirill Klenov<br>            pos. Severny 8-3<br>            MO, Istra, 143500<br>            Russia<br>        <br>Keywords: graphite,alerts,monitoring,system<br>Platform: Any<br>Classifier: Development Status :: 4 - Beta<br>Classifier: Intended Audience :: Developers<br>Classifier: License :: OSI Approved :: MIT License<br>Classifier: Natural Language :: English<br>Classifier: Natural Language :: Russian<br>Classifier: Operating System :: OS Independent<br>Classifier: Programming Language :: Python :: 2<br>Classifier: Programming Language :: Python :: 3<br>Classifier: Programming Language :: Python<br>Classifier: Topic :: Software Development :: Libraries :: Python Modules<br>Classifier: Topic :: Software Development :: Testing<br>Classifier: Topic :: Utilities<br>\n          </div>"}, "last_serial": 4110892, "releases": {"0.27.3": [{"comment_text": "", "digests": {"md5": "d2f93bc3a3f6f51a30e982287bad98ce", "sha256": "07633ee1a3956a132329868469ecc90abd7c2d03100fab600d9c981587d3e074"}, "downloads": -1, "filename": "graphite_beacon_opsgenie_v2-0.27.3.tar.gz", "has_sig": false, "md5_digest": "d2f93bc3a3f6f51a30e982287bad98ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27567, "upload_time": "2018-07-28T03:44:07", "upload_time_iso_8601": "2018-07-28T03:44:07.506606Z", "url": "https://files.pythonhosted.org/packages/6b/7b/9bba3f8890d0eb41cc02a6221b01ba058a908eca3a8d6bc58e76986c3b00/graphite_beacon_opsgenie_v2-0.27.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2f93bc3a3f6f51a30e982287bad98ce", "sha256": "07633ee1a3956a132329868469ecc90abd7c2d03100fab600d9c981587d3e074"}, "downloads": -1, "filename": "graphite_beacon_opsgenie_v2-0.27.3.tar.gz", "has_sig": false, "md5_digest": "d2f93bc3a3f6f51a30e982287bad98ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27567, "upload_time": "2018-07-28T03:44:07", "upload_time_iso_8601": "2018-07-28T03:44:07.506606Z", "url": "https://files.pythonhosted.org/packages/6b/7b/9bba3f8890d0eb41cc02a6221b01ba058a908eca3a8d6bc58e76986c3b00/graphite_beacon_opsgenie_v2-0.27.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:38 2020"}