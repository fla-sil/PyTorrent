{"info": {"author": "Brendan Hasz", "author_email": "winsto99@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "ProbFlow\n========\n\n|Version Badge|  |Build Badge|  |Docs Badge|  |Coverage Badge|\n\n.. |Version Badge| image:: https://img.shields.io/pypi/v/probflow\n    :target: https://pypi.org/project/probflow/\n\n.. |Build Badge| image:: https://travis-ci.com/brendanhasz/probflow.svg\n    :target: https://travis-ci.com/brendanhasz/probflow\n\n.. |Docs Badge| image:: https://readthedocs.org/projects/probflow/badge/\n    :target: http://probflow.readthedocs.io\n\n.. |Coverage Badge| image:: https://codecov.io/gh/brendanhasz/probflow/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/brendanhasz/probflow\n\n\nProbFlow is a Python package for building probabilistic Bayesian models with `TensorFlow 2.0 <http://www.tensorflow.org/beta>`_ or `PyTorch <http://pytorch.org>`_, performing stochastic variational inference with those models, and evaluating the models' inferences.  It provides both high-level modules for building Bayesian neural networks, as well as low-level parameters and distributions for constructing custom Bayesian models.\n\nIt's very much still a work in progress.\n\n- **Git repository:** http://github.com/brendanhasz/probflow\n- **Documentation:** http://probflow.readthedocs.io\n- **Bug reports:** http://github.com/brendanhasz/probflow/issues\n\n\nGetting Started\n---------------\n\n**ProbFlow** allows you to quickly and less painfully build, fit, and evaluate custom Bayesian models (or `ready-made <http://probflow.readthedocs.io/en/latest/api_applications.html>`_ ones!) which run on top of either `TensorFlow 2.0 <http://www.tensorflow.org/beta>`_ and `TensorFlow Probability <http://www.tensorflow.org/probability>`_ or `PyTorch <http://pytorch.org>`_.\n\nWith ProbFlow, the core building blocks of a Bayesian model are parameters and probability distributions (and, of course, the input data).  Parameters define how the independent variables (the features) predict the probability distribution of the dependent variables (the target).\n\nFor example, a simple Bayesian linear regression\n\n.. image:: https://raw.githubusercontent.com/brendanhasz/probflow/master/docs/img/readme/regression_equation.svg?sanitize=true\n   :width: 30 %\n   :align: center\n\ncan be built by creating a ProbFlow Model:\n\n.. code-block:: python\n\n    import probflow as pf\n    import tensorflow as tf\n\n    class LinearRegression(pf.ContinuousModel):\n\n        def __init__(self):\n            self.weight = pf.Parameter(name='weight')\n            self.bias = pf.Parameter(name='bias')\n            self.std = pf.ScaleParameter(name='sigma')\n\n        def __call__(self, x):\n            return pf.Normal(x*self.weight()+self.bias(), self.std())\n\n    model = LinearRegression()\n\nThen, the model can be fit using stochastic variational inference, in *one line*:\n\n.. code-block:: python\n\n    # x and y are Numpy arrays or pandas DataFrame/Series\n    model.fit(x, y)\n\nYou can generate predictions for new data:\n\n.. code-block:: pycon\n\n    # x_test is a Numpy array or pandas DataFrame\n    >>> model.predict(x_test)\n    [0.983]\n\nCompute *probabilistic* predictions for new data, with 95% confidence intervals:\n\n.. code-block:: python\n\n    model.pred_dist_plot(x_test, ci=0.95)\n\n.. image:: https://raw.githubusercontent.com/brendanhasz/probflow/master/docs/img/readme/pred_dist.svg?sanitize=true\n   :width: 90 %\n   :align: center\n\nEvaluate your model's performance using metrics:\n\n.. code-block:: pycon\n\n    >>> model.metric('mse', x_test, y_test)\n    0.217\n\nInspect the posterior distributions of your fit model's parameters, with 95% confidence intervals:\n\n.. code-block:: python\n\n    model.posterior_plot(ci=0.95)\n\n.. image:: https://raw.githubusercontent.com/brendanhasz/probflow/master/docs/img/readme/posteriors.svg?sanitize=true\n   :width: 90 %\n   :align: center\n\nInvestigate how well your model is capturing uncertainty by examining how accurate its predictive intervals are:\n\n.. code-block:: pycon\n\n    >>> model.pred_dist_coverage(ci=0.95)\n    0.903\n\nand diagnose *where* your model is having problems capturing uncertainty:\n\n.. code-block:: python\n\n    model.coverage_by(ci=0.95)\n\n.. image:: https://raw.githubusercontent.com/brendanhasz/probflow/master/docs/img/readme/coverage.svg?sanitize=true\n   :width: 90 %\n   :align: center\n\nProbFlow also provides more complex modules, such as those required for building Bayesian neural networks.  Also, you can mix ProbFlow with TensorFlow (or PyTorch!) code.  For example, even a somewhat complex multi-layer Bayesian neural network like this:\n\n.. image:: https://raw.githubusercontent.com/brendanhasz/probflow/master/docs/img/readme/dual_headed_net.svg?sanitize=true\n   :width: 99 %\n   :align: center\n\nCan be built and fit with ProbFlow in only a few lines:  \n\n.. code-block:: python\n\n    class DensityNetwork(pf.ContinuousModel):\n\n        def __init__(self, units, head_units):\n            self.core = pf.DenseNetwork(units)\n            self.mean = pf.DenseNetwork(head_units)\n            self.std  = pf.DenseNetwork(head_units)\n\n        def __call__(self, x):\n            x = self.core(x)\n            return pf.Normal(self.mean(x), tf.exp(self.std(x)))\n\n    # Create the model\n    model = DensityNetwork([x.shape[1], 256, 128], [128, 64, 32, 1])\n\n    # Fit it!\n    model.fit(x, y)\n\n\nFor convenience, ProbFlow also includes several `pre-built models <http://probflow.readthedocs.io/en/latest/api_applications.html>`_ for standard tasks (such as linear regressions, logistic regressions, and multi-layer dense neural networks).  For example, the above linear regression example could have been done with much less work by using ProbFlow's ready-made LinearRegression model:\n\n.. code-block:: python\n\n    model = pf.LinearRegression(x.shape[1])\n    model.fit(x, y)\n\nAnd a multi-layer Bayesian neural net can be made easily using ProbFlow's ready-made DenseRegression model:\n\n.. code-block:: python\n\n    model = pf.DenseRegression([x.shape[1], 128, 64, 1])\n    model.fit(x, y)\n\nUsing parameters and distributions as simple building blocks, ProbFlow allows for the painless creation of more complicated Bayesian models like \n`generalized linear models <http://probflow.readthedocs.io/en/latest/example_glm.html>`_,\n`deep time-to-event models <http://probflow.readthedocs.io/en/latest/example_time_to_event.html>`_, \n`neural matrix factorization <http://probflow.readthedocs.io/en/latest/example_nmf.html>`_ models, and \n`Gaussian mixture models <http://probflow.readthedocs.io/en/latest/example_gmm.html>`_.  Take a look at the `examples <http://probflow.readthedocs.io/en/latest/examples.html>`_ and the `user guide <http://probflow.readthedocs.io/en/latest/user_guide.html>`_ for more!\n\n\nInstallation\n------------\n\nBefore installing ProbFlow, you'll first need to install either PyTorch, or TensorFlow 2.0 and TensorFlow Probability.  See `more details here <http://probflow.readthedocs.io/en/latest/#installation>`_.\n\nThen, you can install ProbFlow itself:\n\n.. code-block:: bash\n\n    pip install probflow\n\n\nSupport\n-------\n\nPost bug reports, feature requests, and tutorial requests in `GitHub issues <http://github.com/brendanhasz/probflow/issues>`_.\n\n\nContributing\n------------\n\n`Pull requests <http://github.com/brendanhasz/probflow/pulls>`_ are totally welcome!  Any contribution would be appreciated, from things as minor as pointing out typos to things as major as writing new applications and distributions.\n\n\nWhy the name, ProbFlow?\n-----------------------\n\nBecause it's a package for probabilistic modeling, and it was built on TensorFlow.  \u00af\\\\_(\u30c4)_/\u00af\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brendanhasz/probflow", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "probflow", "package_url": "https://pypi.org/project/probflow/", "platform": "", "project_url": "https://pypi.org/project/probflow/", "project_urls": {"Homepage": "https://github.com/brendanhasz/probflow"}, "release_url": "https://pypi.org/project/probflow/2.0.0a2/", "requires_dist": ["tensorflow (==2.0.0) ; extra == 'docs'", "tensorflow-probability (==0.8.0) ; extra == 'docs'", "sphinx-tabs ; extra == 'docs'", "tensorflow (==2.0.0) ; extra == 'tests'", "tensorflow-probability (==0.8.0) ; extra == 'tests'", "torch (>=1.2.0) ; extra == 'tests'", "pytest (>=5.1.2) ; extra == 'tests'", "pytest-cov (>=2.7.1) ; extra == 'tests'", "pylint (>=2.3.1) ; extra == 'tests'"], "requires_python": "", "summary": "A Python package for building Bayesian models with TensorFlow or PyTorch", "version": "2.0.0a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/probflow/\" rel=\"nofollow\"><img alt=\"Version Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4687d1884f0f34d61c7f92d4ccd3461bdf0a524/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70726f62666c6f77\"></a>  <a href=\"https://travis-ci.com/brendanhasz/probflow\" rel=\"nofollow\"><img alt=\"Build Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/581c84df261da917ab5c16225a43bfa941944ae3/68747470733a2f2f7472617669732d63692e636f6d2f6272656e64616e6861737a2f70726f62666c6f772e737667\"></a>  <a href=\"http://probflow.readthedocs.io\" rel=\"nofollow\"><img alt=\"Docs Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b15a63bff50c17f6324483392edfa326ce5f6183/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70726f62666c6f772f62616467652f\"></a>  <a href=\"https://codecov.io/gh/brendanhasz/probflow\" rel=\"nofollow\"><img alt=\"Coverage Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ebf47f3e2184aa92c7315c51b7d13d58e6f6720/68747470733a2f2f636f6465636f762e696f2f67682f6272656e64616e6861737a2f70726f62666c6f772f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>ProbFlow is a Python package for building probabilistic Bayesian models with <a href=\"http://www.tensorflow.org/beta\" rel=\"nofollow\">TensorFlow 2.0</a> or <a href=\"http://pytorch.org\" rel=\"nofollow\">PyTorch</a>, performing stochastic variational inference with those models, and evaluating the models\u2019 inferences.  It provides both high-level modules for building Bayesian neural networks, as well as low-level parameters and distributions for constructing custom Bayesian models.</p>\n<p>It\u2019s very much still a work in progress.</p>\n<ul>\n<li><strong>Git repository:</strong> <a href=\"http://github.com/brendanhasz/probflow\" rel=\"nofollow\">http://github.com/brendanhasz/probflow</a></li>\n<li><strong>Documentation:</strong> <a href=\"http://probflow.readthedocs.io\" rel=\"nofollow\">http://probflow.readthedocs.io</a></li>\n<li><strong>Bug reports:</strong> <a href=\"http://github.com/brendanhasz/probflow/issues\" rel=\"nofollow\">http://github.com/brendanhasz/probflow/issues</a></li>\n</ul>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p><strong>ProbFlow</strong> allows you to quickly and less painfully build, fit, and evaluate custom Bayesian models (or <a href=\"http://probflow.readthedocs.io/en/latest/api_applications.html\" rel=\"nofollow\">ready-made</a> ones!) which run on top of either <a href=\"http://www.tensorflow.org/beta\" rel=\"nofollow\">TensorFlow 2.0</a> and <a href=\"http://www.tensorflow.org/probability\" rel=\"nofollow\">TensorFlow Probability</a> or <a href=\"http://pytorch.org\" rel=\"nofollow\">PyTorch</a>.</p>\n<p>With ProbFlow, the core building blocks of a Bayesian model are parameters and probability distributions (and, of course, the input data).  Parameters define how the independent variables (the features) predict the probability distribution of the dependent variables (the target).</p>\n<p>For example, a simple Bayesian linear regression</p>\n<img alt=\"https://raw.githubusercontent.com/brendanhasz/probflow/master/docs/img/readme/regression_equation.svg?sanitize=true\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef9aaebc787ac55d48078acd44852bf19cd8da17/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6272656e64616e6861737a2f70726f62666c6f772f6d61737465722f646f63732f696d672f726561646d652f72656772657373696f6e5f6571756174696f6e2e7376673f73616e6974697a653d74727565\" width=\"30%\">\n<p>can be built by creating a ProbFlow Model:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">probflow</span> <span class=\"k\">as</span> <span class=\"nn\">pf</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LinearRegression</span><span class=\"p\">(</span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">ContinuousModel</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'weight'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bias</span> <span class=\"o\">=</span> <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'bias'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">std</span> <span class=\"o\">=</span> <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">ScaleParameter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'sigma'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bias</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">())</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n</pre>\n<p>Then, the model can be fit using stochastic variational inference, in <em>one line</em>:</p>\n<pre><span class=\"c1\"># x and y are Numpy arrays or pandas DataFrame/Series</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>You can generate predictions for new data:</p>\n<pre><span class=\"go\"># x_test is a Numpy array or pandas DataFrame\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">)</span>\n<span class=\"go\">[0.983]</span>\n</pre>\n<p>Compute <em>probabilistic</em> predictions for new data, with 95% confidence intervals:</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">pred_dist_plot</span><span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">ci</span><span class=\"o\">=</span><span class=\"mf\">0.95</span><span class=\"p\">)</span>\n</pre>\n<img alt=\"https://raw.githubusercontent.com/brendanhasz/probflow/master/docs/img/readme/pred_dist.svg?sanitize=true\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e97a7e99a8a43f5fcc5050c48808084e656e1ccc/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6272656e64616e6861737a2f70726f62666c6f772f6d61737465722f646f63732f696d672f726561646d652f707265645f646973742e7376673f73616e6974697a653d74727565\" width=\"90%\">\n<p>Evaluate your model\u2019s performance using metrics:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">metric</span><span class=\"p\">(</span><span class=\"s1\">'mse'</span><span class=\"p\">,</span> <span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"go\">0.217</span>\n</pre>\n<p>Inspect the posterior distributions of your fit model\u2019s parameters, with 95% confidence intervals:</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">posterior_plot</span><span class=\"p\">(</span><span class=\"n\">ci</span><span class=\"o\">=</span><span class=\"mf\">0.95</span><span class=\"p\">)</span>\n</pre>\n<img alt=\"https://raw.githubusercontent.com/brendanhasz/probflow/master/docs/img/readme/posteriors.svg?sanitize=true\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/928a8689cc03f6ace9523b95fb54c2a65f1b7e22/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6272656e64616e6861737a2f70726f62666c6f772f6d61737465722f646f63732f696d672f726561646d652f706f73746572696f72732e7376673f73616e6974697a653d74727565\" width=\"90%\">\n<p>Investigate how well your model is capturing uncertainty by examining how accurate its predictive intervals are:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">pred_dist_coverage</span><span class=\"p\">(</span><span class=\"n\">ci</span><span class=\"o\">=</span><span class=\"mf\">0.95</span><span class=\"p\">)</span>\n<span class=\"go\">0.903</span>\n</pre>\n<p>and diagnose <em>where</em> your model is having problems capturing uncertainty:</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">coverage_by</span><span class=\"p\">(</span><span class=\"n\">ci</span><span class=\"o\">=</span><span class=\"mf\">0.95</span><span class=\"p\">)</span>\n</pre>\n<img alt=\"https://raw.githubusercontent.com/brendanhasz/probflow/master/docs/img/readme/coverage.svg?sanitize=true\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d35b673e3617fa9cc81a2e6db7e7ec647baf933/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6272656e64616e6861737a2f70726f62666c6f772f6d61737465722f646f63732f696d672f726561646d652f636f7665726167652e7376673f73616e6974697a653d74727565\" width=\"90%\">\n<p>ProbFlow also provides more complex modules, such as those required for building Bayesian neural networks.  Also, you can mix ProbFlow with TensorFlow (or PyTorch!) code.  For example, even a somewhat complex multi-layer Bayesian neural network like this:</p>\n<img alt=\"https://raw.githubusercontent.com/brendanhasz/probflow/master/docs/img/readme/dual_headed_net.svg?sanitize=true\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/baf9e804f00057c700822b2eaa6213ca8bbc5e12/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6272656e64616e6861737a2f70726f62666c6f772f6d61737465722f646f63732f696d672f726561646d652f6475616c5f6865616465645f6e65742e7376673f73616e6974697a653d74727565\" width=\"99%\">\n<p>Can be built and fit with ProbFlow in only a few lines:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">DensityNetwork</span><span class=\"p\">(</span><span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">ContinuousModel</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">,</span> <span class=\"n\">head_units</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">core</span> <span class=\"o\">=</span> <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">DenseNetwork</span><span class=\"p\">(</span><span class=\"n\">units</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mean</span> <span class=\"o\">=</span> <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">DenseNetwork</span><span class=\"p\">(</span><span class=\"n\">head_units</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">std</span>  <span class=\"o\">=</span> <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">DenseNetwork</span><span class=\"p\">(</span><span class=\"n\">head_units</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">Normal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Create the model</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">DensityNetwork</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Fit it!</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>For convenience, ProbFlow also includes several <a href=\"http://probflow.readthedocs.io/en/latest/api_applications.html\" rel=\"nofollow\">pre-built models</a> for standard tasks (such as linear regressions, logistic regressions, and multi-layer dense neural networks).  For example, the above linear regression example could have been done with much less work by using ProbFlow\u2019s ready-made LinearRegression model:</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">LinearRegression</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>And a multi-layer Bayesian neural net can be made easily using ProbFlow\u2019s ready-made DenseRegression model:</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">DenseRegression</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>Using parameters and distributions as simple building blocks, ProbFlow allows for the painless creation of more complicated Bayesian models like\n<a href=\"http://probflow.readthedocs.io/en/latest/example_glm.html\" rel=\"nofollow\">generalized linear models</a>,\n<a href=\"http://probflow.readthedocs.io/en/latest/example_time_to_event.html\" rel=\"nofollow\">deep time-to-event models</a>,\n<a href=\"http://probflow.readthedocs.io/en/latest/example_nmf.html\" rel=\"nofollow\">neural matrix factorization</a> models, and\n<a href=\"http://probflow.readthedocs.io/en/latest/example_gmm.html\" rel=\"nofollow\">Gaussian mixture models</a>.  Take a look at the <a href=\"http://probflow.readthedocs.io/en/latest/examples.html\" rel=\"nofollow\">examples</a> and the <a href=\"http://probflow.readthedocs.io/en/latest/user_guide.html\" rel=\"nofollow\">user guide</a> for more!</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Before installing ProbFlow, you\u2019ll first need to install either PyTorch, or TensorFlow 2.0 and TensorFlow Probability.  See <a href=\"http://probflow.readthedocs.io/en/latest/#installation\" rel=\"nofollow\">more details here</a>.</p>\n<p>Then, you can install ProbFlow itself:</p>\n<pre>pip install probflow\n</pre>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>Post bug reports, feature requests, and tutorial requests in <a href=\"http://github.com/brendanhasz/probflow/issues\" rel=\"nofollow\">GitHub issues</a>.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p><a href=\"http://github.com/brendanhasz/probflow/pulls\" rel=\"nofollow\">Pull requests</a> are totally welcome!  Any contribution would be appreciated, from things as minor as pointing out typos to things as major as writing new applications and distributions.</p>\n</div>\n<div id=\"why-the-name-probflow\">\n<h2>Why the name, ProbFlow?</h2>\n<p>Because it\u2019s a package for probabilistic modeling, and it was built on TensorFlow.  \u00af\\_(\u30c4)_/\u00af</p>\n</div>\n\n          </div>"}, "last_serial": 6172946, "releases": {"2.0.0a0": [{"comment_text": "", "digests": {"md5": "cd8ec93782c8a6936262a4dd3c520f20", "sha256": "fe133d607ebdb48c314742bc17d205570c916cae5ea4844fbb0eab06163ba795"}, "downloads": -1, "filename": "probflow-2.0.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "cd8ec93782c8a6936262a4dd3c520f20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44646, "upload_time": "2019-09-19T08:11:48", "upload_time_iso_8601": "2019-09-19T08:11:48.266780Z", "url": "https://files.pythonhosted.org/packages/9d/d4/77f85be9b780225059c7317a5a84684be4c92c19feb59026ad0ad9ec7110/probflow-2.0.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cfed74df4988339e83484305342d0bd", "sha256": "00c6548ba626b2730df2b02745edc35202813165a72a1eb885a58a83bcd709ee"}, "downloads": -1, "filename": "probflow-2.0.0a0.tar.gz", "has_sig": false, "md5_digest": "4cfed74df4988339e83484305342d0bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39914, "upload_time": "2019-09-19T08:11:53", "upload_time_iso_8601": "2019-09-19T08:11:53.096938Z", "url": "https://files.pythonhosted.org/packages/42/15/c5e89c08cd4b9aff85c21f5eaff8d7ce86f9fe97b1352b02028734e5dd27/probflow-2.0.0a0.tar.gz", "yanked": false}], "2.0.0a1": [{"comment_text": "", "digests": {"md5": "c158461acbafeeb2b783006e09af982e", "sha256": "dcf90eef0319a3e996107cbe5a558c1efc6a6f00aa0a38ef8528917c4b789eb8"}, "downloads": -1, "filename": "probflow-2.0.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "c158461acbafeeb2b783006e09af982e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48970, "upload_time": "2019-10-17T19:46:47", "upload_time_iso_8601": "2019-10-17T19:46:47.908172Z", "url": "https://files.pythonhosted.org/packages/a7/5d/e648b612715fbdd5423bf30480908b90093d7c62b6697cc5862811f0b5dd/probflow-2.0.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bddbe266d96ffc94b530ef7903c4bf3", "sha256": "a4c2a746f883963bae6c51c368afc7ce0d28968ecd05383f55c2d0226bfa8daf"}, "downloads": -1, "filename": "probflow-2.0.0a1.tar.gz", "has_sig": false, "md5_digest": "7bddbe266d96ffc94b530ef7903c4bf3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43702, "upload_time": "2019-10-17T19:46:49", "upload_time_iso_8601": "2019-10-17T19:46:49.760400Z", "url": "https://files.pythonhosted.org/packages/a4/e9/525cfdecc373e07e2deefcadfc146d8dd8671b43299fdb2064a4e0074bcd/probflow-2.0.0a1.tar.gz", "yanked": false}], "2.0.0a2": [{"comment_text": "", "digests": {"md5": "9bbc63fb0af8bb0e19e5081d81518725", "sha256": "5ee07fbdaf395c8a2fba6664f6549ba140b4a08d2ba35b95feca837910f81183"}, "downloads": -1, "filename": "probflow-2.0.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "9bbc63fb0af8bb0e19e5081d81518725", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49824, "upload_time": "2019-11-21T04:18:49", "upload_time_iso_8601": "2019-11-21T04:18:49.146852Z", "url": "https://files.pythonhosted.org/packages/24/6f/5509d8f6c4a8f6bd70e9b1ae6530356f8b1d84baab582eb26efa973075ea/probflow-2.0.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e078aad6266feb3d6fb8049d091ca600", "sha256": "c65d68f3223b9ee687472699c45ddd8a7d76fcd162d0b2c9343b3e5135bd68c4"}, "downloads": -1, "filename": "probflow-2.0.0a2.tar.gz", "has_sig": false, "md5_digest": "e078aad6266feb3d6fb8049d091ca600", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44742, "upload_time": "2019-11-21T04:18:52", "upload_time_iso_8601": "2019-11-21T04:18:52.218003Z", "url": "https://files.pythonhosted.org/packages/33/34/686394fba5048e0e4f7f1ce0f0bd787c38767349fa4aefb49f774abcb2d1/probflow-2.0.0a2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9bbc63fb0af8bb0e19e5081d81518725", "sha256": "5ee07fbdaf395c8a2fba6664f6549ba140b4a08d2ba35b95feca837910f81183"}, "downloads": -1, "filename": "probflow-2.0.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "9bbc63fb0af8bb0e19e5081d81518725", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49824, "upload_time": "2019-11-21T04:18:49", "upload_time_iso_8601": "2019-11-21T04:18:49.146852Z", "url": "https://files.pythonhosted.org/packages/24/6f/5509d8f6c4a8f6bd70e9b1ae6530356f8b1d84baab582eb26efa973075ea/probflow-2.0.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e078aad6266feb3d6fb8049d091ca600", "sha256": "c65d68f3223b9ee687472699c45ddd8a7d76fcd162d0b2c9343b3e5135bd68c4"}, "downloads": -1, "filename": "probflow-2.0.0a2.tar.gz", "has_sig": false, "md5_digest": "e078aad6266feb3d6fb8049d091ca600", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44742, "upload_time": "2019-11-21T04:18:52", "upload_time_iso_8601": "2019-11-21T04:18:52.218003Z", "url": "https://files.pythonhosted.org/packages/33/34/686394fba5048e0e4f7f1ce0f0bd787c38767349fa4aefb49f774abcb2d1/probflow-2.0.0a2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:59 2020"}