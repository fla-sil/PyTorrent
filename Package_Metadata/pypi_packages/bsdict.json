{"info": {"author": "Andrei Dubovik", "author_email": "andrei@dubovik.eu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# About\nBSDict is a dictionary for Python that supports the following objects as keys:\n\n* None,\n* bool, int, float (including math.nan), complex,\n* str, bytes, bytearray,\n* list, tuple, dict, set, frozenset,\n* numpy.ndarray (bool, int, float, complex).\n\nInternally, a total lexicographical order is defined over all supported objects. A sorted array is then used for storage, and binary search is used for element lookup.\n\nBSDict can be initialized in-memory or on-disc (persistent storage). If BSDict is initialized on-disc, then keys and values are stored in memory only as long as the client application has any references to them. So, the dictionary can be larger than available RAM.\n\n\n# Basic Usage\n\nIn-memory dictionary:\n\n```python\nfrom bsdict import bsdict\nimport numpy as np\ndata = bsdict()\nkey = {'s1': np.array([1.0, 10.0, np.nan])}\ndata[key] = 5\ndata\n```\n\nOn-disc dictionary:\n\n```python\nfrom bsdict import bsdict\ndata = bsdict(datadir = 'cache')\n# ...\ndata.clear()\n```\n\n# Memoization\n\nBSDict has been originally written to help memoize functions that accept complex data structures, including floating-point data, as arguments. (Such functions are common in data analysis.) This package includes a simple memoization wrapper that uses BSDict for caching the results.\n\n```python\nfrom time import sleep\nfrom bsdict import memoizer\n\ncached = memoizer(verbose = True)\n\n# Persistent memoization\n#cached = memoizer(datadir = 'cache', verbose = True)\n\n@cached\ndef mysum(x, y):\n    print(\"Computing a challenging math problem...\")\n    sleep(1)\n    return x + y\n\nz = mysum(1, 2)\nz = mysum(1, 2)\n```\n\n# Warning\n\nThis is the first official release. Bug reports are welcome. (There are extensive test suits in the package, however.)\n\n# Technical Notes\n\nA simpler way to support arbitrary keys would be to pickle them and store their binary representation in a dictionary. There are two minor issues with approach. Firstly, identical dictionaries and sets might be serialized differently depending on the order in which they were composed (So they need to be recursively sorted). Secondly, numerical algorithms than run on multiple processes or on multiple machines might break floating-point determinism. If it desirable to consider nearly identical numbers as the same number, then with binary search that would possible, while with serialization that won't work. Then again, lexicographical ordering of vectors in inconsistent with near-match lookups, meaning that it would work fine often but not always. If you need near-match lookups, let me know, I'll add them as an option then.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andrei-dubovik/bsdict", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bsdict", "package_url": "https://pypi.org/project/bsdict/", "platform": "", "project_url": "https://pypi.org/project/bsdict/", "project_urls": {"Homepage": "https://github.com/andrei-dubovik/bsdict"}, "release_url": "https://pypi.org/project/bsdict/0.1.0/", "requires_dist": null, "requires_python": ">=3.7", "summary": "A python dictionary where keys could be lists, dictionaris, numpy arrays, etc.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>About</h1>\n<p>BSDict is a dictionary for Python that supports the following objects as keys:</p>\n<ul>\n<li>None,</li>\n<li>bool, int, float (including math.nan), complex,</li>\n<li>str, bytes, bytearray,</li>\n<li>list, tuple, dict, set, frozenset,</li>\n<li>numpy.ndarray (bool, int, float, complex).</li>\n</ul>\n<p>Internally, a total lexicographical order is defined over all supported objects. A sorted array is then used for storage, and binary search is used for element lookup.</p>\n<p>BSDict can be initialized in-memory or on-disc (persistent storage). If BSDict is initialized on-disc, then keys and values are stored in memory only as long as the client application has any references to them. So, the dictionary can be larger than available RAM.</p>\n<h1>Basic Usage</h1>\n<p>In-memory dictionary:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bsdict</span> <span class=\"kn\">import</span> <span class=\"n\">bsdict</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">bsdict</span><span class=\"p\">()</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'s1'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])}</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">data</span>\n</pre>\n<p>On-disc dictionary:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bsdict</span> <span class=\"kn\">import</span> <span class=\"n\">bsdict</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">bsdict</span><span class=\"p\">(</span><span class=\"n\">datadir</span> <span class=\"o\">=</span> <span class=\"s1\">'cache'</span><span class=\"p\">)</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n<h1>Memoization</h1>\n<p>BSDict has been originally written to help memoize functions that accept complex data structures, including floating-point data, as arguments. (Such functions are common in data analysis.) This package includes a simple memoization wrapper that uses BSDict for caching the results.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bsdict</span> <span class=\"kn\">import</span> <span class=\"n\">memoizer</span>\n\n<span class=\"n\">cached</span> <span class=\"o\">=</span> <span class=\"n\">memoizer</span><span class=\"p\">(</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Persistent memoization</span>\n<span class=\"c1\">#cached = memoizer(datadir = 'cache', verbose = True)</span>\n\n<span class=\"nd\">@cached</span>\n<span class=\"k\">def</span> <span class=\"nf\">mysum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Computing a challenging math problem...\"</span><span class=\"p\">)</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">mysum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">mysum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<h1>Warning</h1>\n<p>This is the first official release. Bug reports are welcome. (There are extensive test suits in the package, however.)</p>\n<h1>Technical Notes</h1>\n<p>A simpler way to support arbitrary keys would be to pickle them and store their binary representation in a dictionary. There are two minor issues with approach. Firstly, identical dictionaries and sets might be serialized differently depending on the order in which they were composed (So they need to be recursively sorted). Secondly, numerical algorithms than run on multiple processes or on multiple machines might break floating-point determinism. If it desirable to consider nearly identical numbers as the same number, then with binary search that would possible, while with serialization that won't work. Then again, lexicographical ordering of vectors in inconsistent with near-match lookups, meaning that it would work fine often but not always. If you need near-match lookups, let me know, I'll add them as an option then.</p>\n\n          </div>"}, "last_serial": 6576594, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c9acc6db83ce0a5d8255ecf204373256", "sha256": "d0012aa5c2e766ebd1e9918978738cfc131d30ac7904101a86deecab2dcd17a4"}, "downloads": -1, "filename": "bsdict-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c9acc6db83ce0a5d8255ecf204373256", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10044, "upload_time": "2020-02-05T15:41:29", "upload_time_iso_8601": "2020-02-05T15:41:29.230347Z", "url": "https://files.pythonhosted.org/packages/1f/79/98b51270cef2415347ad3bd32d61e78837c3d8ab483320f28c0357c6df33/bsdict-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8869386d6180d766894d4932623f4787", "sha256": "d6898c8983b494cb1e33bac0140503e8cbf40627fda3a6a23fc6772b2d724e98"}, "downloads": -1, "filename": "bsdict-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8869386d6180d766894d4932623f4787", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7726, "upload_time": "2020-02-05T15:41:31", "upload_time_iso_8601": "2020-02-05T15:41:31.978779Z", "url": "https://files.pythonhosted.org/packages/6a/26/b1230ebe7ec91fe548d28909bc194626bf1e91439daa1a29e627dfba2371/bsdict-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c9acc6db83ce0a5d8255ecf204373256", "sha256": "d0012aa5c2e766ebd1e9918978738cfc131d30ac7904101a86deecab2dcd17a4"}, "downloads": -1, "filename": "bsdict-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c9acc6db83ce0a5d8255ecf204373256", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10044, "upload_time": "2020-02-05T15:41:29", "upload_time_iso_8601": "2020-02-05T15:41:29.230347Z", "url": "https://files.pythonhosted.org/packages/1f/79/98b51270cef2415347ad3bd32d61e78837c3d8ab483320f28c0357c6df33/bsdict-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8869386d6180d766894d4932623f4787", "sha256": "d6898c8983b494cb1e33bac0140503e8cbf40627fda3a6a23fc6772b2d724e98"}, "downloads": -1, "filename": "bsdict-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8869386d6180d766894d4932623f4787", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7726, "upload_time": "2020-02-05T15:41:31", "upload_time_iso_8601": "2020-02-05T15:41:31.978779Z", "url": "https://files.pythonhosted.org/packages/6a/26/b1230ebe7ec91fe548d28909bc194626bf1e91439daa1a29e627dfba2371/bsdict-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:12 2020"}