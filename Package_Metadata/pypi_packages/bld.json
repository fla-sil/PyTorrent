{"info": {"author": "Olivier Sechet", "author_email": "osechet@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Build Tools"], "description": "# Bld\n\n[![Build Status](https://travis-ci.org/osechet/bld.svg?branch=master)](https://travis-ci.org/osechet/bld)\n[![codecov](https://codecov.io/gh/osechet/bld/branch/master/graph/badge.svg)](https://codecov.io/gh/osechet/bld)\n\nBld (pronouced /b\u026ald/ as build) is a project build helper. It is mainly aimed at complex project composed by modules with different languages.\n\nA typical project example is a client/server project where the server is coded with one language (C++, Go, Python...) and the client in another (Java, Javascript...). Both modules uses their own build system that can rarely be the same. To build the whole project, you end by creating a lot of scripts that cover the main situations.\n\nBld can be used to avoid the creation of all those scripts. Just create a Python module for each project's module where you describe how to build it.\n\n## Installation\n\n* From source:\n```bash\ngit clone https://github.com/osechet/bld\ncd bld\npython setup.py install\n```\n\n## Usage\n\n* At the root of your project, create a `projectfile.py` file:\n```python\n\"\"\"\nProject definition.\n\"\"\"\n\nNAME = 'super-project'\nVERSION = '0.1.0-dev'\nMODULES = ['client', 'server']\nBUILD_DIR = 'build'\n```\n\n* Set the `PROJECT_HOME` environment variable to define the root directory of your project:\n```bash\nexport PROJECT_HOME=\"/path/to/super-project\"\n```\n\n* Create a script for each project module in the `${PROJECT_HOME}/bld` directory:\n\nclient.py:\n```python\n\"\"\"\nThe client module.\n\"\"\"\n\nimport os\n\ndef build(project, args):\n    \"\"\"\n    Build the module.\n    \"\"\"\n    # Aliases\n    run = project.run\n\n    module_dir = os.path.join(project.root_dir, 'client')\n    with project.chdir(module_dir):\n        with project.step('client:build', \"Build\"):\n            run('echo \"Building...\"')\n            run('sleep 2')\n```\n\nserver.py:\n```python\n\"\"\"\nThe server module.\n\"\"\"\n\nimport os\nimport platform\n\ndef build(project, args):\n    \"\"\"\n    Build the module.\n    \"\"\"\n    # Aliases\n    run = project.run\n\n    module_dir = os.path.join(project.root_dir, 'server')\n    with project.chdir(module_dir):\n        with project.step('server:build', \"Build\"):\n            run('echo \"Building...\"')\n            run('sleep 3')\n```\n\n* Call `bld` to build the whole project or `bld <module>` to build a specific module.\n\n### Reports\n\nBld automatically monitor the time execution of the build. The result is stored at the end of the build in the `reports/time.csv` file. The project's `step()` method can be used to monitor a specific block of code. The time report list all the executed steps by name but also the total build execution:\n```csv\nclient:build,server:build,total\n2.015258717990946,3.018017319991486,5.0884078509989195\n```\n\n## Development\n\nNote: It is advised to work inside a virtual environment. In this section, we'll work with venv.\n\n* Create the virtual environement:\n```bash\npython3 -m venv ./venv\n```\n\n* Later to open the virtual environment:\n```\n. ./venv/bin/activate\n```\n\n* Install requirements (once in virtual environment):\n```bash\npython -m pip install -r requirements.txt\npython -m pip install -r requirements_dev.txt\n```\n\n* Run the `bld` command:\n```bash\n./bldlib/bld.py -h\n```\n\n### Unit tests\n\nTo run unit tests, call `pytest`. For code coverage, run `pytest --cov=bldlib`.\n\n### Tests\n\nTo install the package being developed, run `pip install -e .` from the project's root directory. You can then uninstall it with `pip uninstall bld`.\n\n### Publishing\n\n```bash\nrm -rf dist\npython setup.py sdist\ntwine upload dist/*\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/osechet/bld", "keywords": "build,project,developer,tool", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bld", "package_url": "https://pypi.org/project/bld/", "platform": "", "project_url": "https://pypi.org/project/bld/", "project_urls": {"Homepage": "https://github.com/osechet/bld"}, "release_url": "https://pypi.org/project/bld/0.8.1/", "requires_dist": null, "requires_python": "", "summary": "Bld project build helper", "version": "0.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Bld</h1>\n<p><a href=\"https://travis-ci.org/osechet/bld\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b86d6b346a6a82268d2676177ef4f55292796e7f/68747470733a2f2f7472617669732d63692e6f72672f6f7365636865742f626c642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/osechet/bld\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42cc69b6ebb56060ff27795377f2fec7f96172d1/68747470733a2f2f636f6465636f762e696f2f67682f6f7365636865742f626c642f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Bld (pronouced /b\u026ald/ as build) is a project build helper. It is mainly aimed at complex project composed by modules with different languages.</p>\n<p>A typical project example is a client/server project where the server is coded with one language (C++, Go, Python...) and the client in another (Java, Javascript...). Both modules uses their own build system that can rarely be the same. To build the whole project, you end by creating a lot of scripts that cover the main situations.</p>\n<p>Bld can be used to avoid the creation of all those scripts. Just create a Python module for each project's module where you describe how to build it.</p>\n<h2>Installation</h2>\n<ul>\n<li>From source:</li>\n</ul>\n<pre>git clone https://github.com/osechet/bld\n<span class=\"nb\">cd</span> bld\npython setup.py install\n</pre>\n<h2>Usage</h2>\n<ul>\n<li>At the root of your project, create a <code>projectfile.py</code> file:</li>\n</ul>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Project definition.</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"n\">NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'super-project'</span>\n<span class=\"n\">VERSION</span> <span class=\"o\">=</span> <span class=\"s1\">'0.1.0-dev'</span>\n<span class=\"n\">MODULES</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'client'</span><span class=\"p\">,</span> <span class=\"s1\">'server'</span><span class=\"p\">]</span>\n<span class=\"n\">BUILD_DIR</span> <span class=\"o\">=</span> <span class=\"s1\">'build'</span>\n</pre>\n<ul>\n<li>Set the <code>PROJECT_HOME</code> environment variable to define the root directory of your project:</li>\n</ul>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">PROJECT_HOME</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/super-project\"</span>\n</pre>\n<ul>\n<li>Create a script for each project module in the <code>${PROJECT_HOME}/bld</code> directory:</li>\n</ul>\n<p>client.py:</p>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">The client module.</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Build the module.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># Aliases</span>\n    <span class=\"n\">run</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">run</span>\n\n    <span class=\"n\">module_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">root_dir</span><span class=\"p\">,</span> <span class=\"s1\">'client'</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"n\">module_dir</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"s1\">'client:build'</span><span class=\"p\">,</span> <span class=\"s2\">\"Build\"</span><span class=\"p\">):</span>\n            <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'echo \"Building...\"'</span><span class=\"p\">)</span>\n            <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'sleep 2'</span><span class=\"p\">)</span>\n</pre>\n<p>server.py:</p>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">The server module.</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">platform</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Build the module.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># Aliases</span>\n    <span class=\"n\">run</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">run</span>\n\n    <span class=\"n\">module_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">root_dir</span><span class=\"p\">,</span> <span class=\"s1\">'server'</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"n\">module_dir</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"s1\">'server:build'</span><span class=\"p\">,</span> <span class=\"s2\">\"Build\"</span><span class=\"p\">):</span>\n            <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'echo \"Building...\"'</span><span class=\"p\">)</span>\n            <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'sleep 3'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Call <code>bld</code> to build the whole project or <code>bld &lt;module&gt;</code> to build a specific module.</li>\n</ul>\n<h3>Reports</h3>\n<p>Bld automatically monitor the time execution of the build. The result is stored at the end of the build in the <code>reports/time.csv</code> file. The project's <code>step()</code> method can be used to monitor a specific block of code. The time report list all the executed steps by name but also the total build execution:</p>\n<pre>client:build,server:build,total\n2.015258717990946,3.018017319991486,5.0884078509989195\n</pre>\n<h2>Development</h2>\n<p>Note: It is advised to work inside a virtual environment. In this section, we'll work with venv.</p>\n<ul>\n<li>Create the virtual environement:</li>\n</ul>\n<pre>python3 -m venv ./venv\n</pre>\n<ul>\n<li>Later to open the virtual environment:</li>\n</ul>\n<pre><code>. ./venv/bin/activate\n</code></pre>\n<ul>\n<li>Install requirements (once in virtual environment):</li>\n</ul>\n<pre>python -m pip install -r requirements.txt\npython -m pip install -r requirements_dev.txt\n</pre>\n<ul>\n<li>Run the <code>bld</code> command:</li>\n</ul>\n<pre>./bldlib/bld.py -h\n</pre>\n<h3>Unit tests</h3>\n<p>To run unit tests, call <code>pytest</code>. For code coverage, run <code>pytest --cov=bldlib</code>.</p>\n<h3>Tests</h3>\n<p>To install the package being developed, run <code>pip install -e .</code> from the project's root directory. You can then uninstall it with <code>pip uninstall bld</code>.</p>\n<h3>Publishing</h3>\n<pre>rm -rf dist\npython setup.py sdist\ntwine upload dist/*\n</pre>\n\n          </div>"}, "last_serial": 7069288, "releases": {"0.8.0": [{"comment_text": "", "digests": {"md5": "c6742e31128a0319cb25000e4fcc048e", "sha256": "8ea9ee5fcd06b8aa0dd5c4193761349b76b7915f6486e691cbe5d156368a4f35"}, "downloads": -1, "filename": "bld-0.8.0.tar.gz", "has_sig": false, "md5_digest": "c6742e31128a0319cb25000e4fcc048e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18000, "upload_time": "2020-04-15T09:55:15", "upload_time_iso_8601": "2020-04-15T09:55:15.231943Z", "url": "https://files.pythonhosted.org/packages/fe/da/07f4b09a69148e4690f0e95df0e1ea0cc91a79923b26c40c53f9315a6141/bld-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "8ef0d6f300163c2a0d5b3c317bf9ca09", "sha256": "d1e47a164ba3136d6eb9ae07600b9e30447aab404d7b3b5a7aaeef6a5ffba184"}, "downloads": -1, "filename": "bld-0.8.1.tar.gz", "has_sig": false, "md5_digest": "8ef0d6f300163c2a0d5b3c317bf9ca09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18037, "upload_time": "2020-04-21T16:41:20", "upload_time_iso_8601": "2020-04-21T16:41:20.773081Z", "url": "https://files.pythonhosted.org/packages/3a/4b/5b4f207ed03fae2c73dfcb4c538eaf3ab06d28560f755862e460b53828b2/bld-0.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ef0d6f300163c2a0d5b3c317bf9ca09", "sha256": "d1e47a164ba3136d6eb9ae07600b9e30447aab404d7b3b5a7aaeef6a5ffba184"}, "downloads": -1, "filename": "bld-0.8.1.tar.gz", "has_sig": false, "md5_digest": "8ef0d6f300163c2a0d5b3c317bf9ca09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18037, "upload_time": "2020-04-21T16:41:20", "upload_time_iso_8601": "2020-04-21T16:41:20.773081Z", "url": "https://files.pythonhosted.org/packages/3a/4b/5b4f207ed03fae2c73dfcb4c538eaf3ab06d28560f755862e460b53828b2/bld-0.8.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:07 2020"}