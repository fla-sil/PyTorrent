{"info": {"author": "LiamConnell", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Config Object\n\n## Motivation\nIt's common for ML projects to use a large configuration object with all parameters in one place. There are two broad requirements of a configuration object:\n1. It should be able to easily represent the parameters of different runtime situations, such as `testing` and `production`.\n2. It should be available for all modules \n\nIn order to achieve the first requirement, the object should be somehow constructed (and done so only once in the codebase). \n\nIn order to achieve the second requirement, we could have a `config.py` file with all configuration parameters as attributes. This could be imported into other modules and used ad hoc. \n\nHowever, in order to achieve *both requirements*, we would seemingly have to construct the config object once and inject the constructed `config` into all other objects in the codebase. This clutters the codebase. \n\nThe `one_config` module attempts to resolve this problem by using the singleton pattern.\n\nA `one_config` object is constructed *once and only once* by a method parametrized with the path to a yaml file. Once constructed, the object will contain all parameters *_even if accessed by another module_*.\n\nAlthough the code in `config.py` may be opaque to many readers (and others might disagree about how \"pythonic\" it is), its implementation should be straightforward and it should be very useful for maintaining clean code in any project.\n\n## How to use it\n\nCreate a `.yaml` file in an appropriate place and add some parameters:\n```yaml\n# my_config.yaml\nmy:\n  nested:\n    - param1\n    - param2\n```\nThen, at the entry-point(s) of your python package, initialize the `CONFIG` object with the path to the `.yaml` file:\n```python\n# run.py\nimport one_config\none_config.build_config().from_yaml('path/to/my_config.yaml')\n```\nIn any other module, you can import the `CONFIG` object and the parameters from the yaml file will be present.\n```python\n# my_module.py\nimport one_config\nCONFIG = one_config.get_config()\nparam1 = CONFIG.my.nested.param1\n```\nNotice how the nested parameters are accessed as nested attributes. \n\n### Named configs\nIt is also possible to name a config in order to have multiple config environments simultaneously:  \n\n```python\n# run.py\nimport one_config\none_config.build_config('private').from_yaml('private_env.yaml')\n```\n```python\n# my_module.py\nimport one_config\nPRIVATE_ENV = one_config.get_config('private')\nkey = PRIVATE_ENV.my.super.secret.key\n```\n\n## A note on the Singleton Pattern\n\nThe singleton pattern is one of the more controversial design patterns. It is often ridiculed and seen as the \"bad\" pattern of the Gang of Four. On stack oveflow, the consensus seems to be that the singleton is either an anti-pattern or is useless in a language like python. \n\nIn its original form, the Singleton might be all of those things. However, if we expand our definition of singleton to include any object whose state will be the same everywhere in the entire code base, we notice that we encounter singletons all the time in python. A python module is a singleton. \n\nOur singleton is simply an extension of the typical module singeton that allows us to easily add attributes based on an external file. \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LiamConnell/one-config", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "one-config", "package_url": "https://pypi.org/project/one-config/", "platform": "", "project_url": "https://pypi.org/project/one-config/", "project_urls": {"Homepage": "https://github.com/LiamConnell/one-config"}, "release_url": "https://pypi.org/project/one-config/0.2.1/", "requires_dist": ["PyYAML"], "requires_python": "", "summary": "A universally accessible config object that only has to be constructed once", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Config Object</h1>\n<h2>Motivation</h2>\n<p>It's common for ML projects to use a large configuration object with all parameters in one place. There are two broad requirements of a configuration object:</p>\n<ol>\n<li>It should be able to easily represent the parameters of different runtime situations, such as <code>testing</code> and <code>production</code>.</li>\n<li>It should be available for all modules</li>\n</ol>\n<p>In order to achieve the first requirement, the object should be somehow constructed (and done so only once in the codebase).</p>\n<p>In order to achieve the second requirement, we could have a <code>config.py</code> file with all configuration parameters as attributes. This could be imported into other modules and used ad hoc.</p>\n<p>However, in order to achieve <em>both requirements</em>, we would seemingly have to construct the config object once and inject the constructed <code>config</code> into all other objects in the codebase. This clutters the codebase.</p>\n<p>The <code>one_config</code> module attempts to resolve this problem by using the singleton pattern.</p>\n<p>A <code>one_config</code> object is constructed <em>once and only once</em> by a method parametrized with the path to a yaml file. Once constructed, the object will contain all parameters <em><em>even if accessed by another module</em></em>.</p>\n<p>Although the code in <code>config.py</code> may be opaque to many readers (and others might disagree about how \"pythonic\" it is), its implementation should be straightforward and it should be very useful for maintaining clean code in any project.</p>\n<h2>How to use it</h2>\n<p>Create a <code>.yaml</code> file in an appropriate place and add some parameters:</p>\n<pre><span class=\"c1\"># my_config.yaml</span>\n<span class=\"nt\">my</span><span class=\"p\">:</span>\n  <span class=\"nt\">nested</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">param1</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">param2</span>\n</pre>\n<p>Then, at the entry-point(s) of your python package, initialize the <code>CONFIG</code> object with the path to the <code>.yaml</code> file:</p>\n<pre><span class=\"c1\"># run.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">one_config</span>\n<span class=\"n\">one_config</span><span class=\"o\">.</span><span class=\"n\">build_config</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"s1\">'path/to/my_config.yaml'</span><span class=\"p\">)</span>\n</pre>\n<p>In any other module, you can import the <code>CONFIG</code> object and the parameters from the yaml file will be present.</p>\n<pre><span class=\"c1\"># my_module.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">one_config</span>\n<span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">one_config</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span>\n<span class=\"n\">param1</span> <span class=\"o\">=</span> <span class=\"n\">CONFIG</span><span class=\"o\">.</span><span class=\"n\">my</span><span class=\"o\">.</span><span class=\"n\">nested</span><span class=\"o\">.</span><span class=\"n\">param1</span>\n</pre>\n<p>Notice how the nested parameters are accessed as nested attributes.</p>\n<h3>Named configs</h3>\n<p>It is also possible to name a config in order to have multiple config environments simultaneously:</p>\n<pre><span class=\"c1\"># run.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">one_config</span>\n<span class=\"n\">one_config</span><span class=\"o\">.</span><span class=\"n\">build_config</span><span class=\"p\">(</span><span class=\"s1\">'private'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"s1\">'private_env.yaml'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># my_module.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">one_config</span>\n<span class=\"n\">PRIVATE_ENV</span> <span class=\"o\">=</span> <span class=\"n\">one_config</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">(</span><span class=\"s1\">'private'</span><span class=\"p\">)</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">PRIVATE_ENV</span><span class=\"o\">.</span><span class=\"n\">my</span><span class=\"o\">.</span><span class=\"n\">super</span><span class=\"o\">.</span><span class=\"n\">secret</span><span class=\"o\">.</span><span class=\"n\">key</span>\n</pre>\n<h2>A note on the Singleton Pattern</h2>\n<p>The singleton pattern is one of the more controversial design patterns. It is often ridiculed and seen as the \"bad\" pattern of the Gang of Four. On stack oveflow, the consensus seems to be that the singleton is either an anti-pattern or is useless in a language like python.</p>\n<p>In its original form, the Singleton might be all of those things. However, if we expand our definition of singleton to include any object whose state will be the same everywhere in the entire code base, we notice that we encounter singletons all the time in python. A python module is a singleton.</p>\n<p>Our singleton is simply an extension of the typical module singeton that allows us to easily add attributes based on an external file.</p>\n\n          </div>"}, "last_serial": 6765743, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ba656c87927489bb3c35e1a14b8a94c6", "sha256": "6523b2eb2c725a078f7b352ad6ce0aaa1b7ae9e45e38edb60c409d24cdae9ec0"}, "downloads": -1, "filename": "one_config-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ba656c87927489bb3c35e1a14b8a94c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4029, "upload_time": "2020-03-06T19:39:17", "upload_time_iso_8601": "2020-03-06T19:39:17.683147Z", "url": "https://files.pythonhosted.org/packages/e5/07/3f4604e3e527d7b0c7c687b85e862d5be4fc728565a4ad230543efd31043/one_config-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a935c8b10ff548a19515185ae3bf2c27", "sha256": "6ca63311dbbd18622f6d918d766f0c04fd3f79acdc7e857a24a1d34de769170e"}, "downloads": -1, "filename": "one-config-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a935c8b10ff548a19515185ae3bf2c27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2924, "upload_time": "2020-03-06T19:39:19", "upload_time_iso_8601": "2020-03-06T19:39:19.822788Z", "url": "https://files.pythonhosted.org/packages/f4/4c/aa8a3f22a2eac257d998b815e400f2fa5ad4d6bbbd51b7b4e0405a53930a/one-config-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3ca47234f7c24bd3bdf21dda8914dbe2", "sha256": "f96f7ff4136f862f7851e42de46818d720636384273f0577044ddb4b7fb14680"}, "downloads": -1, "filename": "one_config-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3ca47234f7c24bd3bdf21dda8914dbe2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3720, "upload_time": "2020-03-06T20:56:16", "upload_time_iso_8601": "2020-03-06T20:56:16.540561Z", "url": "https://files.pythonhosted.org/packages/96/b7/a2ccf86de68cc51b9e62dc0690332056580577e8d0a6328e16716fec8835/one_config-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e14632bdb34f2cec3d64689c8eeabfeb", "sha256": "2780e1c926f2054c5dd5393bf9fc5858c83b6c9e54abb783ce74a4c54e8a3e50"}, "downloads": -1, "filename": "one-config-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e14632bdb34f2cec3d64689c8eeabfeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2718, "upload_time": "2020-03-06T20:56:18", "upload_time_iso_8601": "2020-03-06T20:56:18.405157Z", "url": "https://files.pythonhosted.org/packages/d0/24/42b4183df3be574c71c402ad756b600ed0adc223778c5bf7a2b059ff1456/one-config-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ff05917892e9e0dc97ea53fe19ec5af4", "sha256": "69148eb0aa46885c3304e6a90137e2c663eca666224d18ea3f7d34375e6f8f12"}, "downloads": -1, "filename": "one_config-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ff05917892e9e0dc97ea53fe19ec5af4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4201, "upload_time": "2020-03-06T23:27:23", "upload_time_iso_8601": "2020-03-06T23:27:23.640556Z", "url": "https://files.pythonhosted.org/packages/89/1f/3d7028906154066c7af503e5f90741a3980d8f4ecd25bd8df3c94aafab42/one_config-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52271043715d47a143631675e9a5862c", "sha256": "5d444716d96d307704729dcfd7b2e1439a10c4010c88ad9acf399e10d7241cff"}, "downloads": -1, "filename": "one-config-0.2.1.tar.gz", "has_sig": false, "md5_digest": "52271043715d47a143631675e9a5862c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3268, "upload_time": "2020-03-06T23:27:24", "upload_time_iso_8601": "2020-03-06T23:27:24.680869Z", "url": "https://files.pythonhosted.org/packages/07/86/776624386abdd03423af85de142485f15272d8c456b887e5915b74ddd85b/one-config-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ff05917892e9e0dc97ea53fe19ec5af4", "sha256": "69148eb0aa46885c3304e6a90137e2c663eca666224d18ea3f7d34375e6f8f12"}, "downloads": -1, "filename": "one_config-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ff05917892e9e0dc97ea53fe19ec5af4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4201, "upload_time": "2020-03-06T23:27:23", "upload_time_iso_8601": "2020-03-06T23:27:23.640556Z", "url": "https://files.pythonhosted.org/packages/89/1f/3d7028906154066c7af503e5f90741a3980d8f4ecd25bd8df3c94aafab42/one_config-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52271043715d47a143631675e9a5862c", "sha256": "5d444716d96d307704729dcfd7b2e1439a10c4010c88ad9acf399e10d7241cff"}, "downloads": -1, "filename": "one-config-0.2.1.tar.gz", "has_sig": false, "md5_digest": "52271043715d47a143631675e9a5862c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3268, "upload_time": "2020-03-06T23:27:24", "upload_time_iso_8601": "2020-03-06T23:27:24.680869Z", "url": "https://files.pythonhosted.org/packages/07/86/776624386abdd03423af85de142485f15272d8c456b887e5915b74ddd85b/one-config-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:21 2020"}