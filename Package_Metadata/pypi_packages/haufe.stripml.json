{"info": {"author": "Tobias Rodaebel", "author_email": "rodaebel@users.sourceforge.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: OS Independent", "Programming Language :: C++", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup :: HTML", "Topic :: Text Processing :: Markup :: SGML", "Topic :: Text Processing :: Markup :: XML"], "description": "=====================\nPackage haufe.stripml\n=====================\n\nPython extension for stripping HTML markup from text.\n\nThis package simply removes HTML-like markup from text in a very quick and\nbrutal manner. It could quite easily be used to strip XML or SGML from text as\nwell. It does not do any syntax checking.\n\nThe core functionalities are implemented with the C++ programming language, and\nthus much quicker than using SGMLParser or regular expressions for the same\ntask.\n\n\nCopyright\n---------\nhaufe.stripml is (C) Tobias Rodaebel & Haufe Mediengruppe, D-79111 Freiburg, Germany\n\n\nLicence\n-------\nThis package is released under the LGPL 3 See LICENSE.txt.\n\n\nInstallation\n------------\n\nUse easy_install::\n\n  easy_install haufe.stripml\n\n\nTesting\n-------\n\nhaufe.stripml can be tested by typing::\n\n  python setup.py test -m haufe.stripml.tests\n\n\nCredits\n-------\nThanks to Gottfried Ganssauge for translating to the C++ programming language.\n\n\nFirst we want to test the stripml method.\n\n    >>> from haufe.stripml import stripml\n    >>> stripml.__doc__\n    'stripml(s) -> string'\n\nThe one and only argument is a string.\n\n    >>> stripml('foo')\n    'foo'\n    >>> type(stripml('foo')) == type('')\n    True\n\nThe stripml method supports unicode, too.\n\n    >>> stripml(u'bar')\n    u'bar'\n    >>> type(stripml(u'foo')) == type(u'')\n    True\n\nTrying an integer as first argument. A TypeError should be raised.\n\n    >>> try:\n    ...     stripml(10)\n    ... except TypeError, strerror:\n    ...     print strerror\n    String or unicode string required.\n\nEmpty script\n\n    >>> stripml ('<script>')\n    ''\n    >>> stripml (u'<script>')\n    u''\n    >>> stripml ('<script></script>')\n    ''\n    >>> stripml (u'<script></script>')\n    u''\n\nTry some huge element name\n\n    >>> stripml ('<some-very-long-element-name-longer-than-foreseeable>')\n    ''\n    >>> stripml (u'<some-very-long-element-name-longer-than-foreseeable>')\n    u''\n\nNow we try some dumb HTML ...\n\n    >>> stripml('<b>foo</b>')\n    'foo'\n    >>> stripml('foo <i>bar</i>.')\n    'foo bar.'\n    >>> stripml('''<font size = 12><b>Really <i>big</i> string\n    ... </b></font>''')\n    'Really big string\\n'\n\n... and now as unicode.\n\n    >>> stripml(u'<b>foo</b>')\n    u'foo'\n    >>> stripml(u'foo <i>bar</i>.')\n    u'foo bar.'\n    >>> stripml(u'''<font size = 12><b>Really <i>big</i> string\n    ... </b></font>''')\n    u'Really big string\\n'\n\nSometimes we have `script` tags, which contents nobody needs.\n\n    >>> stripml('''We have a script in here <script language=\"JavaScript\"\n    ... type=\"text/javascript\">alert('Hello, World!');</script>, dude.''')\n    'We have a script in here , dude.'\n\nUnicode.\n\n    >>> stripml(u'''We have a script in here <script language=\"JavaScript\"\n    ... type=\"text/javascript\">alert('Hello, World!');</script>, dude.''')\n    u'We have a script in here , dude.'\n\nBut on the other hand the contents of `scrip`-Tags (without the trailing 't')\nshould not be stripped\n\n    >>> stripml('<scrip>KEEP THIS</scrip>')\n    'KEEP THIS'\n    >>> stripml(u'<scrip>KEEP THIS</scrip>')\n    u'KEEP THIS'\n\nAnd neither should `scripting`-Tags\n\n    >>> stripml('<scripting>KEEP THIS</scripting>')\n    'KEEP THIS'\n    >>> stripml(u'<scripting>KEEP THIS</scripting>')\n    u'KEEP THIS'\n\nHow about forgotten </script>-Tags\n    >>> stripml('KEEP <script>DO NOT KEEP THIS</script></script>THIS')\n    'KEEP THIS'\n    >>> stripml(u'KEEP <script>DO NOT KEEP THIS</script></script>THIS')\n    u'KEEP THIS'\n\nA much longer string.\n\n    >>> result = stripml(u'''\n    ... <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    ... <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n    ... <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-US\" lang=\"en-US\">\n    ... <head>\n    ... <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    ... <meta name=\"generator\" content=\"\" />\n    ... <meta name=\"keywords\" content=\"\" />\n    ... <meta name=\"description\" content=\"\" />\n    ... <title>Test document</title>\n    ... <script language=\"JavaScript\" type=\"text/javascript\">\n    ... var foo=1;\n    ... function getFoo() {\n    ...     return foo;\n    ... }\n    ... </script>\n    ... </head>\n    ... <body onLoad=\"alert('Hello, World!');\">\n    ...   <h1>Test document</h1>\n    ...   <p>This document is<br /> <i>only for testing</i>!</p>\n    ...   <script>getFoo();</script>\n    ... </body>\n    ... </html>\n    ... ''')\n    >>> result.strip()\n    u'Test document\\n\\n\\n\\n  Test document\\n  This document is only for testing!'\n    >>> type(result)\n    <type 'unicode'>\n\nA single 'less then' or 'greater then' will be passed through.\n\n    >>> stripml(u'<strong>hundred < thousand < million.</strong>')\n    u'hundred < thousand < million.'\n    >>> stripml(u'<strong>thousand > hundred.</strong>')\n    u'thousand > hundred.'\n    >>> stripml('<strong>hundred < thousand < million.</strong>')\n    'hundred < thousand < million.'\n    >>> stripml('<strong>thousand > hundred.</strong>')\n    'thousand > hundred.'\n\nLet's see if a really long string can be handled well.\n\n    >>> s = 5000 * u'<p>This is <span>a span within a paragraph.</span><!-- And this is a comment --></p>\\n'\n    >>> stripml(s) == 5000 * u'This is a span within a paragraph.\\n'\n    True\n\nAnd we should have a look at entities and encodings.\n\n    >>> stripml(u'In Stra&szlig;e und &Uuml;berf&uuml;hrung haben wir Umlaute.')\n    u'In Stra&szlig;e und &Uuml;berf&uuml;hrung haben wir Umlaute.'\n    >>> stripml('In Stra&szlig;e und &Uuml;berf&uuml;hrung haben wir Umlaute.')\n    'In Stra&szlig;e und &Uuml;berf&uuml;hrung haben wir Umlaute.'\n    >>> print stripml(u'In Stra\u00dfe und \u00dcberf\u00fchrung haben wir Umlaute.').encode('ISO-8859-1') == u'In Stra\u00dfe und \u00dcberf\u00fchrung haben wir Umlaute.'.encode('ISO-8859-1')\n    True\n\n=======\nChanges\n=======\n\n1.2.2 (2012-11-07)\n------------------\n- support for visual studio 2010 by M.Honeck\n\n1.2.1 (2008-03-20)\n------------------\n- added nose testrunner support\n\n1.2.0 (2007-10-23)\n------------------\n- First public release.\n- License added.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/haufe.stripml", "keywords": "SGML,HTML,XML,XHTML", "license": "LGPL 3", "maintainer": null, "maintainer_email": null, "name": "haufe.stripml", "package_url": "https://pypi.org/project/haufe.stripml/", "platform": "All", "project_url": "https://pypi.org/project/haufe.stripml/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/haufe.stripml"}, "release_url": "https://pypi.org/project/haufe.stripml/1.2.2/", "requires_dist": null, "requires_python": null, "summary": "Python extension for removing markup from strings.", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"package-haufe-stripml\">\n<h2>Package haufe.stripml</h2>\n<p>Python extension for stripping HTML markup from text.</p>\n<p>This package simply removes HTML-like markup from text in a very quick and\nbrutal manner. It could quite easily be used to strip XML or SGML from text as\nwell. It does not do any syntax checking.</p>\n<p>The core functionalities are implemented with the C++ programming language, and\nthus much quicker than using SGMLParser or regular expressions for the same\ntask.</p>\n<div id=\"copyright\">\n<h3>Copyright</h3>\n<p>haufe.stripml is (C) Tobias Rodaebel &amp; Haufe Mediengruppe, D-79111 Freiburg, Germany</p>\n</div>\n<div id=\"licence\">\n<h3>Licence</h3>\n<p>This package is released under the LGPL 3 See LICENSE.txt.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Use easy_install:</p>\n<pre>easy_install haufe.stripml\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>haufe.stripml can be tested by typing:</p>\n<pre>python setup.py test -m haufe.stripml.tests\n</pre>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>Thanks to Gottfried Ganssauge for translating to the C++ programming language.</p>\n<p>First we want to test the stripml method.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from haufe.stripml import stripml\n&gt;&gt;&gt; stripml.__doc__\n'stripml(s) -&gt; string'\n</pre>\n</blockquote>\n<p>The one and only argument is a string.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml('foo')\n'foo'\n&gt;&gt;&gt; type(stripml('foo')) == type('')\nTrue\n</pre>\n</blockquote>\n<p>The stripml method supports unicode, too.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml(u'bar')\nu'bar'\n&gt;&gt;&gt; type(stripml(u'foo')) == type(u'')\nTrue\n</pre>\n</blockquote>\n<p>Trying an integer as first argument. A TypeError should be raised.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; try:\n...     stripml(10)\n... except TypeError, strerror:\n...     print strerror\nString or unicode string required.\n</pre>\n</blockquote>\n<p>Empty script</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml ('&lt;script&gt;')\n''\n&gt;&gt;&gt; stripml (u'&lt;script&gt;')\nu''\n&gt;&gt;&gt; stripml ('&lt;script&gt;&lt;/script&gt;')\n''\n&gt;&gt;&gt; stripml (u'&lt;script&gt;&lt;/script&gt;')\nu''\n</pre>\n</blockquote>\n<p>Try some huge element name</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml ('&lt;some-very-long-element-name-longer-than-foreseeable&gt;')\n''\n&gt;&gt;&gt; stripml (u'&lt;some-very-long-element-name-longer-than-foreseeable&gt;')\nu''\n</pre>\n</blockquote>\n<p>Now we try some dumb HTML \u2026</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml('&lt;b&gt;foo&lt;/b&gt;')\n'foo'\n&gt;&gt;&gt; stripml('foo &lt;i&gt;bar&lt;/i&gt;.')\n'foo bar.'\n&gt;&gt;&gt; stripml('''&lt;font size = 12&gt;&lt;b&gt;Really &lt;i&gt;big&lt;/i&gt; string\n... &lt;/b&gt;&lt;/font&gt;''')\n'Really big string\\n'\n</pre>\n</blockquote>\n<p>\u2026 and now as unicode.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml(u'&lt;b&gt;foo&lt;/b&gt;')\nu'foo'\n&gt;&gt;&gt; stripml(u'foo &lt;i&gt;bar&lt;/i&gt;.')\nu'foo bar.'\n&gt;&gt;&gt; stripml(u'''&lt;font size = 12&gt;&lt;b&gt;Really &lt;i&gt;big&lt;/i&gt; string\n... &lt;/b&gt;&lt;/font&gt;''')\nu'Really big string\\n'\n</pre>\n</blockquote>\n<p>Sometimes we have <cite>script</cite> tags, which contents nobody needs.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml('''We have a script in here &lt;script language=\"JavaScript\"\n... type=\"text/javascript\"&gt;alert('Hello, World!');&lt;/script&gt;, dude.''')\n'We have a script in here , dude.'\n</pre>\n</blockquote>\n<p>Unicode.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml(u'''We have a script in here &lt;script language=\"JavaScript\"\n... type=\"text/javascript\"&gt;alert('Hello, World!');&lt;/script&gt;, dude.''')\nu'We have a script in here , dude.'\n</pre>\n</blockquote>\n<p>But on the other hand the contents of <cite>scrip</cite>-Tags (without the trailing \u2018t\u2019)\nshould not be stripped</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml('&lt;scrip&gt;KEEP THIS&lt;/scrip&gt;')\n'KEEP THIS'\n&gt;&gt;&gt; stripml(u'&lt;scrip&gt;KEEP THIS&lt;/scrip&gt;')\nu'KEEP THIS'\n</pre>\n</blockquote>\n<p>And neither should <cite>scripting</cite>-Tags</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml('&lt;scripting&gt;KEEP THIS&lt;/scripting&gt;')\n'KEEP THIS'\n&gt;&gt;&gt; stripml(u'&lt;scripting&gt;KEEP THIS&lt;/scripting&gt;')\nu'KEEP THIS'\n</pre>\n</blockquote>\n<dl>\n<dt>How about forgotten &lt;/script&gt;-Tags</dt>\n<dd><pre>&gt;&gt;&gt; stripml('KEEP &lt;script&gt;DO NOT KEEP THIS&lt;/script&gt;&lt;/script&gt;THIS')\n'KEEP THIS'\n&gt;&gt;&gt; stripml(u'KEEP &lt;script&gt;DO NOT KEEP THIS&lt;/script&gt;&lt;/script&gt;THIS')\nu'KEEP THIS'\n</pre>\n</dd>\n</dl>\n<p>A much longer string.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; result = stripml(u'''\n... &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n... &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n... &lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-US\" lang=\"en-US\"&gt;\n... &lt;head&gt;\n... &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n... &lt;meta name=\"generator\" content=\"\" /&gt;\n... &lt;meta name=\"keywords\" content=\"\" /&gt;\n... &lt;meta name=\"description\" content=\"\" /&gt;\n... &lt;title&gt;Test document&lt;/title&gt;\n... &lt;script language=\"JavaScript\" type=\"text/javascript\"&gt;\n... var foo=1;\n... function getFoo() {\n...     return foo;\n... }\n... &lt;/script&gt;\n... &lt;/head&gt;\n... &lt;body onLoad=\"alert('Hello, World!');\"&gt;\n...   &lt;h1&gt;Test document&lt;/h1&gt;\n...   &lt;p&gt;This document is&lt;br /&gt; &lt;i&gt;only for testing&lt;/i&gt;!&lt;/p&gt;\n...   &lt;script&gt;getFoo();&lt;/script&gt;\n... &lt;/body&gt;\n... &lt;/html&gt;\n... ''')\n&gt;&gt;&gt; result.strip()\nu'Test document\\n\\n\\n\\n  Test document\\n  This document is only for testing!'\n&gt;&gt;&gt; type(result)\n&lt;type 'unicode'&gt;\n</pre>\n</blockquote>\n<p>A single \u2018less then\u2019 or \u2018greater then\u2019 will be passed through.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml(u'&lt;strong&gt;hundred &lt; thousand &lt; million.&lt;/strong&gt;')\nu'hundred &lt; thousand &lt; million.'\n&gt;&gt;&gt; stripml(u'&lt;strong&gt;thousand &gt; hundred.&lt;/strong&gt;')\nu'thousand &gt; hundred.'\n&gt;&gt;&gt; stripml('&lt;strong&gt;hundred &lt; thousand &lt; million.&lt;/strong&gt;')\n'hundred &lt; thousand &lt; million.'\n&gt;&gt;&gt; stripml('&lt;strong&gt;thousand &gt; hundred.&lt;/strong&gt;')\n'thousand &gt; hundred.'\n</pre>\n</blockquote>\n<p>Let\u2019s see if a really long string can be handled well.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; s = 5000 * u'&lt;p&gt;This is &lt;span&gt;a span within a paragraph.&lt;/span&gt;&lt;!-- And this is a comment --&gt;&lt;/p&gt;\\n'\n&gt;&gt;&gt; stripml(s) == 5000 * u'This is a span within a paragraph.\\n'\nTrue\n</pre>\n</blockquote>\n<p>And we should have a look at entities and encodings.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; stripml(u'In Stra&amp;szlig;e und &amp;Uuml;berf&amp;uuml;hrung haben wir Umlaute.')\nu'In Stra&amp;szlig;e und &amp;Uuml;berf&amp;uuml;hrung haben wir Umlaute.'\n&gt;&gt;&gt; stripml('In Stra&amp;szlig;e und &amp;Uuml;berf&amp;uuml;hrung haben wir Umlaute.')\n'In Stra&amp;szlig;e und &amp;Uuml;berf&amp;uuml;hrung haben wir Umlaute.'\n&gt;&gt;&gt; print stripml(u'In Stra\u00dfe und \u00dcberf\u00fchrung haben wir Umlaute.').encode('ISO-8859-1') == u'In Stra\u00dfe und \u00dcberf\u00fchrung haben wir Umlaute.'.encode('ISO-8859-1')\nTrue\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>1.2.2 (2012-11-07)</h3>\n<ul>\n<li>support for visual studio 2010 by M.Honeck</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.2.1 (2008-03-20)</h3>\n<ul>\n<li>added nose testrunner support</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.2.0 (2007-10-23)</h3>\n<ul>\n<li>First public release.</li>\n<li>License added.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 792846, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "5d3cb912d09b0f761b2ddb2227ebd038", "sha256": "e5624d46e678bcfedae40b37bfb2e8c864ec2832fb8356d6e3e0f1f2ae69d0ce"}, "downloads": -1, "filename": "haufe.stripml-1.2.0.tar.gz", "has_sig": false, "md5_digest": "5d3cb912d09b0f761b2ddb2227ebd038", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10677, "upload_time": "2007-10-24T08:58:08", "upload_time_iso_8601": "2007-10-24T08:58:08Z", "url": "https://files.pythonhosted.org/packages/62/ff/c61ee96eb49327f4d324c5dcbc2c70acae6187936c647449e725aab7969d/haufe.stripml-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "70ae33048944924bac91ea74fadd35df", "sha256": "517d6cf73766b45c368d40d86cd93dd2dfe1376326d412d8798d5014cf894bbf"}, "downloads": -1, "filename": "haufe.stripml-1.2.1.tar.gz", "has_sig": false, "md5_digest": "70ae33048944924bac91ea74fadd35df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11911, "upload_time": "2009-03-17T08:51:28", "upload_time_iso_8601": "2009-03-17T08:51:28.938550Z", "url": "https://files.pythonhosted.org/packages/94/33/0981a9e7b9c751a25216033cee5241554d5bd5368e1f3bdce0456ee18564/haufe.stripml-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "bdbddeef52c80f83c299fb25d502cfab", "sha256": "288223fc8ea690171892dde354c282a215b130e9fe3d40fa96e32a98e068a8a2"}, "downloads": -1, "filename": "haufe.stripml-1.2.2.tar.gz", "has_sig": false, "md5_digest": "bdbddeef52c80f83c299fb25d502cfab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12098, "upload_time": "2012-11-08T09:23:04", "upload_time_iso_8601": "2012-11-08T09:23:04.216067Z", "url": "https://files.pythonhosted.org/packages/4c/d3/bc60d301db4d5ad080e59bfaffdf0f98d6c495e303e80fb4a7f90f32379c/haufe.stripml-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdbddeef52c80f83c299fb25d502cfab", "sha256": "288223fc8ea690171892dde354c282a215b130e9fe3d40fa96e32a98e068a8a2"}, "downloads": -1, "filename": "haufe.stripml-1.2.2.tar.gz", "has_sig": false, "md5_digest": "bdbddeef52c80f83c299fb25d502cfab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12098, "upload_time": "2012-11-08T09:23:04", "upload_time_iso_8601": "2012-11-08T09:23:04.216067Z", "url": "https://files.pythonhosted.org/packages/4c/d3/bc60d301db4d5ad080e59bfaffdf0f98d6c495e303e80fb4a7f90f32379c/haufe.stripml-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:14 2020"}