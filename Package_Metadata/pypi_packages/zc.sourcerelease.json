{"info": {"author": "Jim Fulton", "author_email": "jim@zope.com", "bugtrack_url": null, "classifiers": [], "description": ".. contents::\n\nCreating Source Releases from Buildouts\n=======================================\n\nThe zc.sourcerelease package provides a script,\nbuildout-source-release, that generates a source release from a\nbuildout.  The source release, is in the form of a gzipped tar archive\n[#zip_in_future]_.  The generated source release can be used as the\nbasis for higher-level releases, such as RPMs or\nconfigure-make-make-install releases.\n\nThe source releases includes data that would normally be installed in\na download cache, such as Python distributions, or downloads performed\nby the zc.recipe.cmmi recipe.  If a buildout uses a recipe that\ndownloads data but does not store the downloaded data in the buildout\ndownload cache, then the data will not be included in the source\nrelease and will have to be downloaded when the source release is\ninstalled.\n\nThe source release includes a Python install script.  It is not\nexecutable and must be run with the desired Python, which must be the\nsame version of Python used when making the release.  The install\nscript runs the buildout in place.  This means that the source release\nwill need to be extracted to and the install script run in the final install\nlocation [#separate_install_step]_.  While the install script can be\nused directly, it will more commonly be used by system-packaging\n(e.g. RPM) build scripts or make files.\n\nInstallation\n------------\n\nYou can install the buildout-source-release script with easy install::\n\n  easy_install zc.sourcerelease\n\nor you can install it into a buildout using zc.buildout.\n\nUsage\n-----\n\nTo create a source release, simply run the buildout-source-release\nscript, passing a file URL or a subversion URL\n[#other_source_code_control_systems]_ and the name of the\nconfiguration file to use.  File URLs are useful for testing and can\nbe used with non-subversion source-code control systems.\n\nLet's look at an example.  We have a server with some distributions on\nit.\n\n    >>> index_content = get(link_server)\n    >>> if 'distribute' in index_content:\n    ...     lines = index_content.splitlines()\n    ...     distribute_line = lines.pop(1)\n    ...     lines.insert(4, distribute_line)\n    ...     index_content = '\\n'.join(lines)\n    >>> print index_content,\n    <html><body>\n    <a href=\"index/\">index/</a><br>\n    <a href=\"sample1-1.0.zip\">sample1-1.0.zip</a><br>\n    <a href=\"sample2-1.0.zip\">sample2-1.0.zip</a><br>\n    <a href=\"setuptools-0.6c7-py2.4.egg\">setuptools-0.6-py2.4.egg</a><br>\n    <a href=\"zc.buildout-1.0-py2.4.egg\">zc.buildout-1.0-py2.4.egg</a><br>\n    <a href=\"zc.buildout-99.99-pyN.N.egg\">zc.buildout-99.99-pyN.N.egg</a><br>\n    <a href=\"zc.recipe.egg-1.0-py2.4.egg\">zc.recipe.egg-1.0-py2.4.egg</a><br>\n    </body></html>\n\nWe have the buildout-source-release installed in a local bin\ndirectory.  We'll create another buildout that we'll use for our\nsource release.\n\n    >>> mkdir('sample')\n    >>> sample = join(sample_buildout, 'sample')\n    >>> write(sample, 'buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = sample\n    ... find-links = %(link_server)s\n    ...\n    ... [sample]\n    ... recipe = zc.recipe.egg\n    ... eggs = sample1\n    ... ''' % globals())\n\nWe'll run the release script against this sample directory:\n\n    >>> print system(join('bin', 'buildout-source-release')\n    ...        +' file://'+sample+' buildout.cfg'),\n    ... # doctest: +ELLIPSIS\n    Creating source release in sample.tgz\n    ...\n\nWe end up with a tar file:\n\n    >>> ls('.')\n    -  .installed.cfg\n    d  bin\n    -  buildout.cfg\n    d  develop-eggs\n    d  eggs\n    d  parts\n    d  sample\n    -  sample.tgz\n\nIf we want to give the file a custom name, in this case something other than\nsample.tgz, we can use the '-n' or '--name' option to specify one:\n\n    >>> print system(join('bin', 'buildout-source-release')\n    ...        +' file://'+sample+' buildout.cfg -n custom_name_one'),\n    ... # doctest: +ELLIPSIS\n    Creating source release in custom_name_one.tgz\n    ...\n\n    >>> print system(join('bin', 'buildout-source-release')\n    ...        +' file://'+sample+' buildout.cfg --name custom_name_two'),\n    ... # doctest: +ELLIPSIS\n    Creating source release in custom_name_two.tgz\n    ...\n\n    >>> ls('.')\n    -  .installed.cfg\n    d  bin\n    -  buildout.cfg\n    -  custom_name_one.tgz\n    -  custom_name_two.tgz\n    d  develop-eggs\n    d  eggs\n    d  parts\n    d  sample\n    -  sample.tgz\n\nLet's continue with the example using sample.tgz. Extract the tar file to a\ntemporary directory:\n\n    >>> mkdir('test')\n    >>> import tarfile\n    >>> tf = tarfile.open('sample.tgz', 'r:gz')\n    >>> for name in tf.getnames():\n    ...   tf.extract(name, 'test')\n    >>> tf.close()\n\n    >>> ls('test')\n    d  sample\n\n    >>> ls('test', 'sample')\n    -  buildout.cfg\n    d  eggs\n    -  install.py\n    d  release-distributions\n\nThe extracted sample directory has eggs for buildout and setuptools:\n\n    >>> ls('test', 'sample', 'eggs')\n    -  setuptools-0.6c7-py2.4.egg\n    d  zc.buildout-99.99-py2.4.egg\n\nNote that version 99.99 of zc.buildout was used because it was the\nmost recent version on the link server.  This happens to be different\nthan the version of buildout used by the source-release script.\n\nIt has a release-distributions directory containing distributions\nneeded to install the buildout:\n\n    >>> ls('test', 'sample', 'release-distributions', 'dist')\n    -  sample1-1.0.zip\n    -  sample2-1.0.zip\n    -  zc.buildout-99.99-pyN.N.egg\n    -  zc.recipe.egg-1.0.0b6-py2.4.egg\n\n(There normally aren't distributions for buildout and setuptools, etc.\nbecause these are pre-installed in the eggs directory of the source\nrelease. In this case, we have a release for zc.buildout because it\nwas downloaded from the link server.  Anything that we downloaded is\nincluded.)\n\nSo, now that we've extracted the source release we built, we can try\nto install it.  To do this, we'll to run the installer. Before we do,\nhowever, we'll remove the data used by the link server:\n\n    >>> import os\n    >>> mkdir('sample_eggs_aside')\n    >>> for p in os.listdir(sample_eggs):\n    ...     os.rename(join(sample_eggs, p), join('sample_eggs_aside', p))\n    >>> print get(link_server),\n    <html><body>\n    </body></html>\n\nThis way, we know that when we run the source release, the\ndistributions will come from the release, not from the link\nserver. Now, let's run the installer:\n\n    >>> import sys\n\n    >>> print system(sys.executable+' '+join('test', 'sample', 'install.py')),\n    ... # doctest: +ELLIPSIS\n    Creating directory ...\n\n\nRunning the installer simply builds out the saved buildout, using the\nrelease-distribution as the source for installable eggs.  In our case,\nwe get a sample script that we can run:\n\n    >>> print system(join('test', 'sample', 'bin', 'sample1')),\n    Hello. My name is  sample1\n\nNote that the sample bin directory doesn't contain a buildout script:\n\n    >>> ls('test', 'sample', 'bin')\n    -  sample1\n\nIf we want one, we can run the install script again with an argument\nof 'bootstrap'.\n\n    >>> print system(sys.executable+\n    ...        ' '+join('test', 'sample', 'install.py bootstrap')),\n    Generated script '/sample-buildout/test/sample/bin/buildout'.\n\n    >>> ls('test', 'sample', 'bin')\n    -  buildout\n    -  sample1\n\nNote that the install script is a specialized buildout script, so\nother buildout options can be provided, although this shouldn't\nnormally be necessary.\n\nOften, we'll use file URLs for testing, but store the buildouts to be\nreleased in a source code repository like subversion.  We've created a\nsimple sample in subversion. Let's try to install it:\n\n    >>> print system(join('bin', 'buildout-source-release')+' '+\n    ...     'svn://svn.zope.org/repos/main/zc.sourcerelease/svnsample'+\n    ...     ' release.cfg'),\n    ... # doctest: +ELLIPSIS\n    Creating source release in svnsample.tgz\n    ... The referenced section, 'repos', was not defined.\n\nThe svnsample config, release.cfg, has::\n\n  find-links = ${repos:svnsample}\n\nHere, the expectation is that the value will be provided by a user's\ndefault.cfg.  We'll provide a value that points to our link\nserver. First, we'll put the sample eggs back on the link server:\n\n    >>> for p in os.listdir('sample_eggs_aside'):\n    ...     os.rename(join('sample_eggs_aside', p), join(sample_eggs, p))\n    >>> remove('sample_eggs_aside')\n\n    >>> print system(join('bin', 'buildout-source-release')+' '+\n    ...     'svn://svn.zope.org/repos/main/zc.sourcerelease/svnsample'+\n    ...     ' release.cfg'+\n    ...     ' repos:svnsample='+link_server),\n    ... # doctest: +ELLIPSIS\n    Creating source release in svnsample.tgz\n    ...\n\n    >>> ls('.')\n    -  .installed.cfg\n    d  bin\n    -  buildout.cfg\n    -  custom_name_one.tgz\n    -  custom_name_two.tgz\n    d  develop-eggs\n    d  eggs\n    d  parts\n    d  sample\n    -  sample.tgz\n    -  svnsample.tgz\n    d  test\n\n    >>> mkdir('svntest')\n    >>> import tarfile\n    >>> tf = tarfile.open('svnsample.tgz', 'r:gz')\n    >>> for name in tf.getnames():\n    ...   tf.extract(name, 'svntest')\n    >>> tf.close()\n\n    >>> print system(sys.executable\n    ...              +' '+join('svntest', 'svnsample', 'install.py')),\n    ... # doctest: +ELLIPSIS\n    Creating directory ...\n\n    >>> print system(join('svntest', 'svnsample', 'bin', 'sample')),\n    sample from svn called\n\nYou can specify a different configuration file of course.  Let's\ncreate one with an error as it contains an absolute path for the\neggs-directory.\n\n    >>> write(sample, 'wrong.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = sample\n    ... find-links = %(link_server)s\n    ... eggs-directory = /somewhere/shared-eggs\n    ...\n    ... [sample]\n    ... recipe = zc.recipe.egg\n    ... eggs = sample1\n    ... ''' % globals())\n\nWe'll run the release script against this configuration file:\n\n    >>> print system(join('bin', 'buildout-source-release')\n    ...        +' file://'+sample+' wrong.cfg'),\n    ... # doctest: +ELLIPSIS\n    Creating source release in sample.tgz\n    Invalid eggs directory (perhaps not a relative path) /somewhere/shared-eggs\n\n.. [#zip_in_future] It is possible that an option will be added in the\n  future to generate zip files rather than tar archives.\n\n.. [#separate_install_step] In the future, it is likely that we'll\n  also support a model in which the install script can install to a\n  separate location.  Buildouts will have to take this into account,\n  providing for copying necessary files, other than just scripts and\n  eggs, into the destination directory.\n\n.. [#other_source_code_control_systems] Other source\n  code control systems may be supported in the future. In the mean\n  time, you can check a project out to a directory and then use a file\n  URL to get the buildout-source-release script to use it.\n\nRelease History\n===============\n\n0.4.0 (2012-12-17)\n------------------\n\n- Added distribute support.\n- Symbolic links in projects are preserved.\n\n\n0.3.1 (2009-09-25)\n------------------\n\nFixed a latent bug that was exposed by recent changes to zc.buildout.\n\nThe bug causes installation scripts included in source releases to fail.\n\n0.3.0 (2008-11-21)\n------------------\n\nNew Features\n++++++++++++\n\nYou can now use a --name (or -n) option to specify the name for a\ngenerated release.\n\nBugs Fixed\n++++++++++\n\nHaving an absolute eggs-directory in buildout.cfg will now give an\nerror instead of running forever trying to find a relative path.\n\n0.2 (2007-10-25)\n----------------\n\nNew Features\n++++++++++++\n\nAdded support for passing buildout option settings as command-line\noptions when building sources to supply values normally provided by\n~/.buildout/default.cfg.\n\nBugs Fixed\n++++++++++\n\nNon-standard eggs-directory settings weren't handled correctly.\n\n0.1 (2007-10-24)\n----------------\n\nInitial release\n\nDownload\n========", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.python.org/pypi/zc.sourcerelease", "keywords": null, "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "zc.sourcerelease", "package_url": "https://pypi.org/project/zc.sourcerelease/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zc.sourcerelease/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.python.org/pypi/zc.sourcerelease"}, "release_url": "https://pypi.org/project/zc.sourcerelease/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "Utility script to create source releases from buildouts", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#creating-source-releases-from-buildouts\" id=\"id11\" rel=\"nofollow\">Creating Source Releases from Buildouts</a><ul>\n<li><a href=\"#installation\" id=\"id12\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id13\" rel=\"nofollow\">Usage</a></li>\n</ul>\n</li>\n<li><a href=\"#release-history\" id=\"id14\" rel=\"nofollow\">Release History</a><ul>\n<li><a href=\"#id4\" id=\"id15\" rel=\"nofollow\">0.4.0 (2012-12-17)</a></li>\n<li><a href=\"#id5\" id=\"id16\" rel=\"nofollow\">0.3.1 (2009-09-25)</a></li>\n<li><a href=\"#id6\" id=\"id17\" rel=\"nofollow\">0.3.0 (2008-11-21)</a><ul>\n<li><a href=\"#new-features\" id=\"id18\" rel=\"nofollow\">New Features</a></li>\n<li><a href=\"#bugs-fixed\" id=\"id19\" rel=\"nofollow\">Bugs Fixed</a></li>\n</ul>\n</li>\n<li><a href=\"#id7\" id=\"id20\" rel=\"nofollow\">0.2 (2007-10-25)</a><ul>\n<li><a href=\"#id8\" id=\"id21\" rel=\"nofollow\">New Features</a></li>\n<li><a href=\"#id9\" id=\"id22\" rel=\"nofollow\">Bugs Fixed</a></li>\n</ul>\n</li>\n<li><a href=\"#id10\" id=\"id23\" rel=\"nofollow\">0.1 (2007-10-24)</a></li>\n</ul>\n</li>\n<li><a href=\"#download\" id=\"id24\" rel=\"nofollow\">Download</a></li>\n</ul>\n</div>\n<div id=\"creating-source-releases-from-buildouts\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Creating Source Releases from Buildouts</a></h2>\n<p>The zc.sourcerelease package provides a script,\nbuildout-source-release, that generates a source release from a\nbuildout.  The source release, is in the form of a gzipped tar archive\n<a href=\"#zip-in-future\" id=\"id1\" rel=\"nofollow\">[1]</a>.  The generated source release can be used as the\nbasis for higher-level releases, such as RPMs or\nconfigure-make-make-install releases.</p>\n<p>The source releases includes data that would normally be installed in\na download cache, such as Python distributions, or downloads performed\nby the zc.recipe.cmmi recipe.  If a buildout uses a recipe that\ndownloads data but does not store the downloaded data in the buildout\ndownload cache, then the data will not be included in the source\nrelease and will have to be downloaded when the source release is\ninstalled.</p>\n<p>The source release includes a Python install script.  It is not\nexecutable and must be run with the desired Python, which must be the\nsame version of Python used when making the release.  The install\nscript runs the buildout in place.  This means that the source release\nwill need to be extracted to and the install script run in the final install\nlocation <a href=\"#separate-install-step\" id=\"id2\" rel=\"nofollow\">[2]</a>.  While the install script can be\nused directly, it will more commonly be used by system-packaging\n(e.g. RPM) build scripts or make files.</p>\n<div id=\"installation\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Installation</a></h3>\n<p>You can install the buildout-source-release script with easy install:</p>\n<pre>easy_install zc.sourcerelease\n</pre>\n<p>or you can install it into a buildout using zc.buildout.</p>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Usage</a></h3>\n<p>To create a source release, simply run the buildout-source-release\nscript, passing a file URL or a subversion URL\n<a href=\"#other-source-code-control-systems\" id=\"id3\" rel=\"nofollow\">[3]</a> and the name of the\nconfiguration file to use.  File URLs are useful for testing and can\nbe used with non-subversion source-code control systems.</p>\n<p>Let\u2019s look at an example.  We have a server with some distributions on\nit.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; index_content = get(link_server)\n&gt;&gt;&gt; if 'distribute' in index_content:\n...     lines = index_content.splitlines()\n...     distribute_line = lines.pop(1)\n...     lines.insert(4, distribute_line)\n...     index_content = '\\n'.join(lines)\n&gt;&gt;&gt; print index_content,\n&lt;html&gt;&lt;body&gt;\n&lt;a href=\"index/\"&gt;index/&lt;/a&gt;&lt;br&gt;\n&lt;a href=\"sample1-1.0.zip\"&gt;sample1-1.0.zip&lt;/a&gt;&lt;br&gt;\n&lt;a href=\"sample2-1.0.zip\"&gt;sample2-1.0.zip&lt;/a&gt;&lt;br&gt;\n&lt;a href=\"setuptools-0.6c7-py2.4.egg\"&gt;setuptools-0.6-py2.4.egg&lt;/a&gt;&lt;br&gt;\n&lt;a href=\"zc.buildout-1.0-py2.4.egg\"&gt;zc.buildout-1.0-py2.4.egg&lt;/a&gt;&lt;br&gt;\n&lt;a href=\"zc.buildout-99.99-pyN.N.egg\"&gt;zc.buildout-99.99-pyN.N.egg&lt;/a&gt;&lt;br&gt;\n&lt;a href=\"zc.recipe.egg-1.0-py2.4.egg\"&gt;zc.recipe.egg-1.0-py2.4.egg&lt;/a&gt;&lt;br&gt;\n&lt;/body&gt;&lt;/html&gt;\n</pre>\n</blockquote>\n<p>We have the buildout-source-release installed in a local bin\ndirectory.  We\u2019ll create another buildout that we\u2019ll use for our\nsource release.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; mkdir('sample')\n&gt;&gt;&gt; sample = join(sample_buildout, 'sample')\n&gt;&gt;&gt; write(sample, 'buildout.cfg',\n... '''\n... [buildout]\n... parts = sample\n... find-links = %(link_server)s\n...\n... [sample]\n... recipe = zc.recipe.egg\n... eggs = sample1\n... ''' % globals())\n</pre>\n</blockquote>\n<p>We\u2019ll run the release script against this sample directory:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print system(join('bin', 'buildout-source-release')\n...        +' file://'+sample+' buildout.cfg'),\n... # doctest: +ELLIPSIS\nCreating source release in sample.tgz\n...\n</pre>\n</blockquote>\n<p>We end up with a tar file:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ls('.')\n-  .installed.cfg\nd  bin\n-  buildout.cfg\nd  develop-eggs\nd  eggs\nd  parts\nd  sample\n-  sample.tgz\n</pre>\n</blockquote>\n<p>If we want to give the file a custom name, in this case something other than\nsample.tgz, we can use the \u2018-n\u2019 or \u2018\u2013name\u2019 option to specify one:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print system(join('bin', 'buildout-source-release')\n...        +' file://'+sample+' buildout.cfg -n custom_name_one'),\n... # doctest: +ELLIPSIS\nCreating source release in custom_name_one.tgz\n...\n</pre>\n<pre>&gt;&gt;&gt; print system(join('bin', 'buildout-source-release')\n...        +' file://'+sample+' buildout.cfg --name custom_name_two'),\n... # doctest: +ELLIPSIS\nCreating source release in custom_name_two.tgz\n...\n</pre>\n<pre>&gt;&gt;&gt; ls('.')\n-  .installed.cfg\nd  bin\n-  buildout.cfg\n-  custom_name_one.tgz\n-  custom_name_two.tgz\nd  develop-eggs\nd  eggs\nd  parts\nd  sample\n-  sample.tgz\n</pre>\n</blockquote>\n<p>Let\u2019s continue with the example using sample.tgz. Extract the tar file to a\ntemporary directory:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; mkdir('test')\n&gt;&gt;&gt; import tarfile\n&gt;&gt;&gt; tf = tarfile.open('sample.tgz', 'r:gz')\n&gt;&gt;&gt; for name in tf.getnames():\n...   tf.extract(name, 'test')\n&gt;&gt;&gt; tf.close()\n</pre>\n<pre>&gt;&gt;&gt; ls('test')\nd  sample\n</pre>\n<pre>&gt;&gt;&gt; ls('test', 'sample')\n-  buildout.cfg\nd  eggs\n-  install.py\nd  release-distributions\n</pre>\n</blockquote>\n<p>The extracted sample directory has eggs for buildout and setuptools:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ls('test', 'sample', 'eggs')\n-  setuptools-0.6c7-py2.4.egg\nd  zc.buildout-99.99-py2.4.egg\n</pre>\n</blockquote>\n<p>Note that version 99.99 of zc.buildout was used because it was the\nmost recent version on the link server.  This happens to be different\nthan the version of buildout used by the source-release script.</p>\n<p>It has a release-distributions directory containing distributions\nneeded to install the buildout:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ls('test', 'sample', 'release-distributions', 'dist')\n-  sample1-1.0.zip\n-  sample2-1.0.zip\n-  zc.buildout-99.99-pyN.N.egg\n-  zc.recipe.egg-1.0.0b6-py2.4.egg\n</pre>\n</blockquote>\n<p>(There normally aren\u2019t distributions for buildout and setuptools, etc.\nbecause these are pre-installed in the eggs directory of the source\nrelease. In this case, we have a release for zc.buildout because it\nwas downloaded from the link server.  Anything that we downloaded is\nincluded.)</p>\n<p>So, now that we\u2019ve extracted the source release we built, we can try\nto install it.  To do this, we\u2019ll to run the installer. Before we do,\nhowever, we\u2019ll remove the data used by the link server:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import os\n&gt;&gt;&gt; mkdir('sample_eggs_aside')\n&gt;&gt;&gt; for p in os.listdir(sample_eggs):\n...     os.rename(join(sample_eggs, p), join('sample_eggs_aside', p))\n&gt;&gt;&gt; print get(link_server),\n&lt;html&gt;&lt;body&gt;\n&lt;/body&gt;&lt;/html&gt;\n</pre>\n</blockquote>\n<p>This way, we know that when we run the source release, the\ndistributions will come from the release, not from the link\nserver. Now, let\u2019s run the installer:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import sys\n</pre>\n<pre>&gt;&gt;&gt; print system(sys.executable+' '+join('test', 'sample', 'install.py')),\n... # doctest: +ELLIPSIS\nCreating directory ...\n</pre>\n</blockquote>\n<p>Running the installer simply builds out the saved buildout, using the\nrelease-distribution as the source for installable eggs.  In our case,\nwe get a sample script that we can run:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print system(join('test', 'sample', 'bin', 'sample1')),\nHello. My name is  sample1\n</pre>\n</blockquote>\n<p>Note that the sample bin directory doesn\u2019t contain a buildout script:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ls('test', 'sample', 'bin')\n-  sample1\n</pre>\n</blockquote>\n<p>If we want one, we can run the install script again with an argument\nof \u2018bootstrap\u2019.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print system(sys.executable+\n...        ' '+join('test', 'sample', 'install.py bootstrap')),\nGenerated script '/sample-buildout/test/sample/bin/buildout'.\n</pre>\n<pre>&gt;&gt;&gt; ls('test', 'sample', 'bin')\n-  buildout\n-  sample1\n</pre>\n</blockquote>\n<p>Note that the install script is a specialized buildout script, so\nother buildout options can be provided, although this shouldn\u2019t\nnormally be necessary.</p>\n<p>Often, we\u2019ll use file URLs for testing, but store the buildouts to be\nreleased in a source code repository like subversion.  We\u2019ve created a\nsimple sample in subversion. Let\u2019s try to install it:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print system(join('bin', 'buildout-source-release')+' '+\n...     'svn://svn.zope.org/repos/main/zc.sourcerelease/svnsample'+\n...     ' release.cfg'),\n... # doctest: +ELLIPSIS\nCreating source release in svnsample.tgz\n... The referenced section, 'repos', was not defined.\n</pre>\n</blockquote>\n<p>The svnsample config, release.cfg, has:</p>\n<pre>find-links = ${repos:svnsample}\n</pre>\n<p>Here, the expectation is that the value will be provided by a user\u2019s\ndefault.cfg.  We\u2019ll provide a value that points to our link\nserver. First, we\u2019ll put the sample eggs back on the link server:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for p in os.listdir('sample_eggs_aside'):\n...     os.rename(join('sample_eggs_aside', p), join(sample_eggs, p))\n&gt;&gt;&gt; remove('sample_eggs_aside')\n</pre>\n<pre>&gt;&gt;&gt; print system(join('bin', 'buildout-source-release')+' '+\n...     'svn://svn.zope.org/repos/main/zc.sourcerelease/svnsample'+\n...     ' release.cfg'+\n...     ' repos:svnsample='+link_server),\n... # doctest: +ELLIPSIS\nCreating source release in svnsample.tgz\n...\n</pre>\n<pre>&gt;&gt;&gt; ls('.')\n-  .installed.cfg\nd  bin\n-  buildout.cfg\n-  custom_name_one.tgz\n-  custom_name_two.tgz\nd  develop-eggs\nd  eggs\nd  parts\nd  sample\n-  sample.tgz\n-  svnsample.tgz\nd  test\n</pre>\n<pre>&gt;&gt;&gt; mkdir('svntest')\n&gt;&gt;&gt; import tarfile\n&gt;&gt;&gt; tf = tarfile.open('svnsample.tgz', 'r:gz')\n&gt;&gt;&gt; for name in tf.getnames():\n...   tf.extract(name, 'svntest')\n&gt;&gt;&gt; tf.close()\n</pre>\n<pre>&gt;&gt;&gt; print system(sys.executable\n...              +' '+join('svntest', 'svnsample', 'install.py')),\n... # doctest: +ELLIPSIS\nCreating directory ...\n</pre>\n<pre>&gt;&gt;&gt; print system(join('svntest', 'svnsample', 'bin', 'sample')),\nsample from svn called\n</pre>\n</blockquote>\n<p>You can specify a different configuration file of course.  Let\u2019s\ncreate one with an error as it contains an absolute path for the\neggs-directory.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample, 'wrong.cfg',\n... '''\n... [buildout]\n... parts = sample\n... find-links = %(link_server)s\n... eggs-directory = /somewhere/shared-eggs\n...\n... [sample]\n... recipe = zc.recipe.egg\n... eggs = sample1\n... ''' % globals())\n</pre>\n</blockquote>\n<p>We\u2019ll run the release script against this configuration file:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print system(join('bin', 'buildout-source-release')\n...        +' file://'+sample+' wrong.cfg'),\n... # doctest: +ELLIPSIS\nCreating source release in sample.tgz\nInvalid eggs directory (perhaps not a relative path) /somewhere/shared-eggs\n</pre>\n</blockquote>\n<table id=\"zip-in-future\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>It is possible that an option will be added in the\nfuture to generate zip files rather than tar archives.</td></tr>\n</tbody>\n</table>\n<table id=\"separate-install-step\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td>In the future, it is likely that we\u2019ll\nalso support a model in which the install script can install to a\nseparate location.  Buildouts will have to take this into account,\nproviding for copying necessary files, other than just scripts and\neggs, into the destination directory.</td></tr>\n</tbody>\n</table>\n<table id=\"other-source-code-control-systems\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[3]</a></td><td>Other source\ncode control systems may be supported in the future. In the mean\ntime, you can check a project out to a directory and then use a file\nURL to get the buildout-source-release script to use it.</td></tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"release-history\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Release History</a></h2>\n<div id=\"id4\">\n<h3><a href=\"#id15\" rel=\"nofollow\">0.4.0 (2012-12-17)</a></h3>\n<ul>\n<li>Added distribute support.</li>\n<li>Symbolic links in projects are preserved.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id16\" rel=\"nofollow\">0.3.1 (2009-09-25)</a></h3>\n<p>Fixed a latent bug that was exposed by recent changes to zc.buildout.</p>\n<p>The bug causes installation scripts included in source releases to fail.</p>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id17\" rel=\"nofollow\">0.3.0 (2008-11-21)</a></h3>\n<div id=\"new-features\">\n<h4><a href=\"#id18\" rel=\"nofollow\">New Features</a></h4>\n<p>You can now use a \u2013name (or -n) option to specify the name for a\ngenerated release.</p>\n</div>\n<div id=\"bugs-fixed\">\n<h4><a href=\"#id19\" rel=\"nofollow\">Bugs Fixed</a></h4>\n<p>Having an absolute eggs-directory in buildout.cfg will now give an\nerror instead of running forever trying to find a relative path.</p>\n</div>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id20\" rel=\"nofollow\">0.2 (2007-10-25)</a></h3>\n<div id=\"id8\">\n<h4><a href=\"#id21\" rel=\"nofollow\">New Features</a></h4>\n<p>Added support for passing buildout option settings as command-line\noptions when building sources to supply values normally provided by\n~/.buildout/default.cfg.</p>\n</div>\n<div id=\"id9\">\n<h4><a href=\"#id22\" rel=\"nofollow\">Bugs Fixed</a></h4>\n<p>Non-standard eggs-directory settings weren\u2019t handled correctly.</p>\n</div>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id23\" rel=\"nofollow\">0.1 (2007-10-24)</a></h3>\n<p>Initial release</p>\n</div>\n</div>\n<div id=\"download\">\n<h2><a href=\"#id24\" rel=\"nofollow\">Download</a></h2>\n</div>\n\n          </div>"}, "last_serial": 802208, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7341aa79322eafcc9282b8a71939af9f", "sha256": "f82cd5085424129de6f0a2be09ebb8bab13cb4fe94a9ed3dc7ef75de23e2a56e"}, "downloads": -1, "filename": "zc.sourcerelease-0.1.tar.gz", "has_sig": false, "md5_digest": "7341aa79322eafcc9282b8a71939af9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7220, "upload_time": "2007-10-24T22:34:40", "upload_time_iso_8601": "2007-10-24T22:34:40Z", "url": "https://files.pythonhosted.org/packages/e7/b8/cb5d5ea810157bb1b6bbaf1cdcbd07d39cb90e0b722c034b32f24071e90b/zc.sourcerelease-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "4b501d3e83c03b79dcd4e7589f3bdfc9", "sha256": "3ca73d9981028a70884dd88fa7a2b1c01b025fd224b45231652e954007137dab"}, "downloads": -1, "filename": "zc.sourcerelease-0.2.tar.gz", "has_sig": false, "md5_digest": "4b501d3e83c03b79dcd4e7589f3bdfc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8197, "upload_time": "2007-10-25T20:37:26", "upload_time_iso_8601": "2007-10-25T20:37:26Z", "url": "https://files.pythonhosted.org/packages/d2/22/a764960a35f685ea06b949e95709ca7a9b1619cf816f0d3bf9647d21720b/zc.sourcerelease-0.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "bb0a9013c0795a49ea120ced75f1442f", "sha256": "ed63dd1a479f268d6d64b63c9976787c1e24ddec480315de50913210932a71f0"}, "downloads": -1, "filename": "zc.sourcerelease-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bb0a9013c0795a49ea120ced75f1442f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8958, "upload_time": "2008-11-21T22:02:19", "upload_time_iso_8601": "2008-11-21T22:02:19Z", "url": "https://files.pythonhosted.org/packages/81/86/592faf3203d3b7981126f3cad3b17b853c9c5512cfa12a8a25c865bfb53c/zc.sourcerelease-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "c67a87e1cc180ce2f50e3559467cfdf0", "sha256": "525046cda250884c77d3b15f3cb8c3437e3ab3480e28ad50bdb244ddd64894fd"}, "downloads": -1, "filename": "zc.sourcerelease-0.3.1.tar.gz", "has_sig": false, "md5_digest": "c67a87e1cc180ce2f50e3559467cfdf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9218, "upload_time": "2009-09-25T17:29:24", "upload_time_iso_8601": "2009-09-25T17:29:24.125982Z", "url": "https://files.pythonhosted.org/packages/26/4a/b70483768699b48ba4849bf69d5266cdb2b23fe169abc651fc620a4d9745/zc.sourcerelease-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "7d756a7d039afd2a7a2fe02817317330", "sha256": "13c9766c1d9d6276a4d5be0960a7c2a19a94693948ff860d45979485d5e32eea"}, "downloads": -1, "filename": "zc.sourcerelease-0.4.0.tar.gz", "has_sig": false, "md5_digest": "7d756a7d039afd2a7a2fe02817317330", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10510, "upload_time": "2012-12-18T15:20:04", "upload_time_iso_8601": "2012-12-18T15:20:04.372939Z", "url": "https://files.pythonhosted.org/packages/04/17/10c423c86ae7f71923c1bb7159e54660ab2e23bf0cdcf96bac1116a5fcc0/zc.sourcerelease-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d756a7d039afd2a7a2fe02817317330", "sha256": "13c9766c1d9d6276a4d5be0960a7c2a19a94693948ff860d45979485d5e32eea"}, "downloads": -1, "filename": "zc.sourcerelease-0.4.0.tar.gz", "has_sig": false, "md5_digest": "7d756a7d039afd2a7a2fe02817317330", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10510, "upload_time": "2012-12-18T15:20:04", "upload_time_iso_8601": "2012-12-18T15:20:04.372939Z", "url": "https://files.pythonhosted.org/packages/04/17/10c423c86ae7f71923c1bb7159e54660ab2e23bf0cdcf96bac1116a5fcc0/zc.sourcerelease-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:55 2020"}