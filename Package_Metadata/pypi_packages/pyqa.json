{"info": {"author": "Juho Veps\u00c3\u00a4l\u00c3\u00a4inen", "author_email": "bebraw@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "pyqa -- Configuration generator\n===============================\n\npyqa makes it easier to write terminal based tools which ask the user a\nbunch of questions and then generate some configuration file based on\nthe answers.\n\nUsage\n-----\n\nSee /demos for some working examples.\n\npyqa provides single function, \"ask\". It expects a set of questions\ngiven in a specific format. The following description is in YAML but you\nare free to use any other markup language as long as the output matches:\n\n::\n\n    ---\n    id: project_name # id to use at the template\n    q: Could you please give the project name? # question shown to the user\n    ---\n    id: license\n    q: Please pick a license for your project?\n    choices: # if choices field is used, the user will see these as numbered choice\n        - BSD\n        - GPL\n        - MIT\n    ---\n    id: use_fizzler\n    q: Are you sure you want to use fizzler?\n    type: boolean -- this will accept either true or false answer and emits True/False\n\nNote that keywords \"Yes\" and \"No\" seem to be converted to booleans by\nYAML. If you need to use those within choices, remember to use explicit\nform (ie. \"Yes\" instead of Yes).\n\nAfter the user has finished answering \"ask\" will return the results in a\nformat like this:\n\n::\n\n    {'project_name': 'myproject', 'license': 'BSD', 'use_fizzler': True}\n\nThis format happens to be compatible with\n`pystache <https://github.com/defunkt/pystache>`_ (Python version of\n`mustache <http://mustache.github.com/>`_) and no doubt with many other\ntemplate engines. Just pass that data to your favorite engine, render\nand output the file somewhere. Voil\u00e1!\n\nLicense\n-------\n\npyqa is available under MIT license. See LICENSE for more details.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/bebraw/pyqa", "keywords": "scripting,utility,configuration", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pyqa", "package_url": "https://pypi.org/project/pyqa/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyqa/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/bebraw/pyqa"}, "release_url": "https://pypi.org/project/pyqa/0.6.1/", "requires_dist": null, "requires_python": null, "summary": "pyqa makes it easy to write conversational scripts that generate configuration", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>pyqa makes it easier to write terminal based tools which ask the user a\nbunch of questions and then generate some configuration file based on\nthe answers.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>See /demos for some working examples.</p>\n<p>pyqa provides single function, \u201cask\u201d. It expects a set of questions\ngiven in a specific format. The following description is in YAML but you\nare free to use any other markup language as long as the output matches:</p>\n<pre>---\nid: project_name # id to use at the template\nq: Could you please give the project name? # question shown to the user\n---\nid: license\nq: Please pick a license for your project?\nchoices: # if choices field is used, the user will see these as numbered choice\n    - BSD\n    - GPL\n    - MIT\n---\nid: use_fizzler\nq: Are you sure you want to use fizzler?\ntype: boolean -- this will accept either true or false answer and emits True/False\n</pre>\n<p>Note that keywords \u201cYes\u201d and \u201cNo\u201d seem to be converted to booleans by\nYAML. If you need to use those within choices, remember to use explicit\nform (ie. \u201cYes\u201d instead of Yes).</p>\n<p>After the user has finished answering \u201cask\u201d will return the results in a\nformat like this:</p>\n<pre>{'project_name': 'myproject', 'license': 'BSD', 'use_fizzler': True}\n</pre>\n<p>This format happens to be compatible with\n<a href=\"https://github.com/defunkt/pystache\" rel=\"nofollow\">pystache</a> (Python version of\n<a href=\"http://mustache.github.com/\" rel=\"nofollow\">mustache</a>) and no doubt with many other\ntemplate engines. Just pass that data to your favorite engine, render\nand output the file somewhere. Voil\u00e1!</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>pyqa is available under MIT license. See LICENSE for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 731474, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "1a8539a913912aa17deea37076f779be", "sha256": "09928719663311ee5d642e9df542ac83e977f1d6e555e42cb092aab532d1b4d6"}, "downloads": -1, "filename": "pyqa-0.5.0.tar.gz", "has_sig": false, "md5_digest": "1a8539a913912aa17deea37076f779be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2906, "upload_time": "2011-11-11T10:33:19", "upload_time_iso_8601": "2011-11-11T10:33:19.945192Z", "url": "https://files.pythonhosted.org/packages/27/d6/04235c15d026b6ac4e9836b0710ec14ed2451f1cf5a0f3a7e7e21accd9a7/pyqa-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "bd3f24045eb69c243f16fecb86b28dff", "sha256": "42c55bffdd294c5de5ae9a83564a5689817f10650f9921e4b44adfe0bb6d9a93"}, "downloads": -1, "filename": "pyqa-0.5.1.tar.gz", "has_sig": false, "md5_digest": "bd3f24045eb69c243f16fecb86b28dff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2985, "upload_time": "2011-11-12T10:12:33", "upload_time_iso_8601": "2011-11-12T10:12:33.872287Z", "url": "https://files.pythonhosted.org/packages/09/d3/4b45429408790537e319638ce5dbd6cfbe0bc8f9226bebfad29598d92a5b/pyqa-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "9168ec02bc98d1c84586775747999153", "sha256": "40242878f028730fa2ec0025c29c3e72737f3f4f062410a8405b85fc5b5645b2"}, "downloads": -1, "filename": "pyqa-0.5.2.tar.gz", "has_sig": false, "md5_digest": "9168ec02bc98d1c84586775747999153", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3317, "upload_time": "2011-11-12T12:01:02", "upload_time_iso_8601": "2011-11-12T12:01:02.192394Z", "url": "https://files.pythonhosted.org/packages/79/8b/f7985e80dcdf82e3f62f071e3e38ec0597241b030e304a45fe0247a316b8/pyqa-0.5.2.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "edb775499580f2be14cf1fd20486ca0b", "sha256": "5f2f2395b639a64996ea5f60ee214a0230af73080c2935fe80944c1910d95b50"}, "downloads": -1, "filename": "pyqa-0.6.1.tar.gz", "has_sig": false, "md5_digest": "edb775499580f2be14cf1fd20486ca0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3418, "upload_time": "2011-11-16T15:34:27", "upload_time_iso_8601": "2011-11-16T15:34:27.192394Z", "url": "https://files.pythonhosted.org/packages/f0/47/11aa4b554e7f4732e97dcb998a334de783e2f7bc5926fe2dca9edab81e02/pyqa-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "edb775499580f2be14cf1fd20486ca0b", "sha256": "5f2f2395b639a64996ea5f60ee214a0230af73080c2935fe80944c1910d95b50"}, "downloads": -1, "filename": "pyqa-0.6.1.tar.gz", "has_sig": false, "md5_digest": "edb775499580f2be14cf1fd20486ca0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3418, "upload_time": "2011-11-16T15:34:27", "upload_time_iso_8601": "2011-11-16T15:34:27.192394Z", "url": "https://files.pythonhosted.org/packages/f0/47/11aa4b554e7f4732e97dcb998a334de783e2f7bc5926fe2dca9edab81e02/pyqa-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:53 2020"}