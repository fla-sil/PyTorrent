{"info": {"author": "Konrad Ja\u0142owiecki", "author_email": "dexter2206@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.org/dexter2206/dimod-mock.svg?branch=master)](https://travis-ci.org/dexter2206/dimod-mock)\n\n# dimod-mock\n\ndimod-mock is a package for mocking dimod-based samplers, including the structured ones.\nIt lets you easily test your routines before trying them out on sophisticated samplers or real hardware.\n\n# Installation\n\nTo install run\n\n```\npip install dimodmock\n```\n\n# Usage\n\n## Mocking simple samplers\n\nSuppose you created some instance of your sampler (derived from `dimod.Sampler`). This is how you create its mock\n\n```python\nimport dimodmock\n\nsampler = ... # Create your sampler here\nmock = dimodmock.SamplerMock.from_sampler(sampler)\n```\n\nThe mock object created this way has the following properties identical to the source sampler\n- `properties`\n- `parameters`\n\nThe following methods are implemented:\n- `sample`\n- `sample_qubo`\n- `sample_ising`\n\nand have the same interface as the source sampler. In particular, call to those methods will fail\nif unknown parameters are passed as keyword arguments. The returned samples are choosen randomly at uniform.\nBy default, the returned samplesets have one sample. See below for overriding this behaviour.\n\n## Mocking structured samplers\n\nYou can also mock structured samplers. In this case use `dimodmock.StructuredMock.from_sampler`.\nIn addition to the characteristics described above, the `StructuredMock` has also the following properties, identical\nto the source sampler:\n- `edgelist`\n- `nodelist`\n\nAlso, `sample`, `sample_qubo`, `sample_ising` methods respect the samplers structure, so trying to solve\nmismatching instance will fail.\n\n## Support for `num_reads`\n\nBy default, samplesets returned by all mocks contain only one sample. However, if the source sampler supports `num_reads`\nproperty (which is true in particular for `DWaveSampler`), it will be respected by the mock and the correct number\nof samples will be returned.\n\n## Advanced usage\nIt is also possible to create mocks by specifying their properties in their initializer. For `SimpleMock` you need to specify \n`properties` and `parameters`. For `StructuredMock` you also need to specify `edgelist` and `nodelist`.\n\nFor instance, suppose you want to create a mock of a structured sampler defined on full graph of 3 nodes,\nhaving a `max_num_reads` property and `num_reads` parameter. Here is how to do it:\n\n```python\nfrom dimodmock import StructuredSampler\n\nmock = StructuredSampler(\n    nodelist=[0, 1, 2], \n    edgelist=[(0, 1), (1, 2), (2, 0)], \n    properties={\"max_num_reads\": 10},\n    parameters={\"num_reads\": [\"max_num_reads\"]},\n)\n```\n\n\n# Caveats\n\nCurrently mocks don't validate keyword arguments passed to `sample*` methods. \nSo, in the example above, mock will happily accept `num_reads=100`. In the future, additional validation might be\nimplemented.\n\n\n# Reporting issues\nPlease report any issues you encounter using Github's issue tracker.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "dimod mock testing", "license": "", "maintainer": "", "maintainer_email": "", "name": "dimodmock", "package_url": "https://pypi.org/project/dimodmock/", "platform": "", "project_url": "https://pypi.org/project/dimodmock/", "project_urls": null, "release_url": "https://pypi.org/project/dimodmock/1.0.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Utilities for mocking dimod Samplers", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/dexter2206/dimod-mock\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39a5a79294b4b859dbfaa26dff3835ca4655d760/68747470733a2f2f7472617669732d63692e6f72672f646578746572323230362f64696d6f642d6d6f636b2e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>dimod-mock</h1>\n<p>dimod-mock is a package for mocking dimod-based samplers, including the structured ones.\nIt lets you easily test your routines before trying them out on sophisticated samplers or real hardware.</p>\n<h1>Installation</h1>\n<p>To install run</p>\n<pre><code>pip install dimodmock\n</code></pre>\n<h1>Usage</h1>\n<h2>Mocking simple samplers</h2>\n<p>Suppose you created some instance of your sampler (derived from <code>dimod.Sampler</code>). This is how you create its mock</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dimodmock</span>\n\n<span class=\"n\">sampler</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"c1\"># Create your sampler here</span>\n<span class=\"n\">mock</span> <span class=\"o\">=</span> <span class=\"n\">dimodmock</span><span class=\"o\">.</span><span class=\"n\">SamplerMock</span><span class=\"o\">.</span><span class=\"n\">from_sampler</span><span class=\"p\">(</span><span class=\"n\">sampler</span><span class=\"p\">)</span>\n</pre>\n<p>The mock object created this way has the following properties identical to the source sampler</p>\n<ul>\n<li><code>properties</code></li>\n<li><code>parameters</code></li>\n</ul>\n<p>The following methods are implemented:</p>\n<ul>\n<li><code>sample</code></li>\n<li><code>sample_qubo</code></li>\n<li><code>sample_ising</code></li>\n</ul>\n<p>and have the same interface as the source sampler. In particular, call to those methods will fail\nif unknown parameters are passed as keyword arguments. The returned samples are choosen randomly at uniform.\nBy default, the returned samplesets have one sample. See below for overriding this behaviour.</p>\n<h2>Mocking structured samplers</h2>\n<p>You can also mock structured samplers. In this case use <code>dimodmock.StructuredMock.from_sampler</code>.\nIn addition to the characteristics described above, the <code>StructuredMock</code> has also the following properties, identical\nto the source sampler:</p>\n<ul>\n<li><code>edgelist</code></li>\n<li><code>nodelist</code></li>\n</ul>\n<p>Also, <code>sample</code>, <code>sample_qubo</code>, <code>sample_ising</code> methods respect the samplers structure, so trying to solve\nmismatching instance will fail.</p>\n<h2>Support for <code>num_reads</code></h2>\n<p>By default, samplesets returned by all mocks contain only one sample. However, if the source sampler supports <code>num_reads</code>\nproperty (which is true in particular for <code>DWaveSampler</code>), it will be respected by the mock and the correct number\nof samples will be returned.</p>\n<h2>Advanced usage</h2>\n<p>It is also possible to create mocks by specifying their properties in their initializer. For <code>SimpleMock</code> you need to specify\n<code>properties</code> and <code>parameters</code>. For <code>StructuredMock</code> you also need to specify <code>edgelist</code> and <code>nodelist</code>.</p>\n<p>For instance, suppose you want to create a mock of a structured sampler defined on full graph of 3 nodes,\nhaving a <code>max_num_reads</code> property and <code>num_reads</code> parameter. Here is how to do it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dimodmock</span> <span class=\"kn\">import</span> <span class=\"n\">StructuredSampler</span>\n\n<span class=\"n\">mock</span> <span class=\"o\">=</span> <span class=\"n\">StructuredSampler</span><span class=\"p\">(</span>\n    <span class=\"n\">nodelist</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> \n    <span class=\"n\">edgelist</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)],</span> \n    <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"max_num_reads\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span>\n    <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"num_reads\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"max_num_reads\"</span><span class=\"p\">]},</span>\n<span class=\"p\">)</span>\n</pre>\n<h1>Caveats</h1>\n<p>Currently mocks don't validate keyword arguments passed to <code>sample*</code> methods.\nSo, in the example above, mock will happily accept <code>num_reads=100</code>. In the future, additional validation might be\nimplemented.</p>\n<h1>Reporting issues</h1>\n<p>Please report any issues you encounter using Github's issue tracker.</p>\n\n          </div>"}, "last_serial": 5960856, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "51ea43fe1af1ca0a308bca212ae59e66", "sha256": "47a8f4c61487d1e20d8cf11b749423b8c02a865ebc2d7ed4a7155f0de4957b10"}, "downloads": -1, "filename": "dimodmock-1.0.0.tar.gz", "has_sig": false, "md5_digest": "51ea43fe1af1ca0a308bca212ae59e66", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6691, "upload_time": "2019-10-11T15:27:41", "upload_time_iso_8601": "2019-10-11T15:27:41.365008Z", "url": "https://files.pythonhosted.org/packages/a9/e9/6eab709cce4ad22393456e4308500dd903c66b2e0542a0d4de3e45034421/dimodmock-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51ea43fe1af1ca0a308bca212ae59e66", "sha256": "47a8f4c61487d1e20d8cf11b749423b8c02a865ebc2d7ed4a7155f0de4957b10"}, "downloads": -1, "filename": "dimodmock-1.0.0.tar.gz", "has_sig": false, "md5_digest": "51ea43fe1af1ca0a308bca212ae59e66", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6691, "upload_time": "2019-10-11T15:27:41", "upload_time_iso_8601": "2019-10-11T15:27:41.365008Z", "url": "https://files.pythonhosted.org/packages/a9/e9/6eab709cce4ad22393456e4308500dd903c66b2e0542a0d4de3e45034421/dimodmock-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:21 2020"}