{"info": {"author": "rmotr.com", "author_email": "questions@rmotr.com", "bugtrack_url": null, "classifiers": [], "description": "[pyp-w3] Jobs Detector\n======================\n\nToday we will develop a command line tool which aims to parse certain\nwebsites looking for job statistics based on given keywords. In this\nvery first version of the tool, we will only implement a parser for the\nHackerNews blog, which includes a monthly report of \"Who is hiring?\".\nExample: https://news.ycombinator.com/item?id=11814828\n\nCommand usage\n-------------\n\nThe command line tool must be accessible by calling ``jobs_detector``\ncommand. A ``hacker_news`` subcommand must be also available as part of\nthis implementation.\n\nTo see the whole list of optional and mandatory parameters, you can\nexecute the command using the ``--help`` flag.\n\n.. code:: bash\n\n    $ jobs_detector hacker_news --help\n    Options:\n      -i, --post-id TEXT       [required]\n      -k, --keywords TEXT\n      -c, --combinations TEXT\n      --help                   Show this message and exit.\n\nDefault arguments\n~~~~~~~~~~~~~~~~~\n\nTo request jobs statistics using a default set of keywords, just call\nthe ``hacker_news`` subcommand providing a valid HN post id (see the\nlast part of the sample URL above), like this:\n\n.. code:: bash\n\n    $ jobs_detector hacker_news -i 11814828\n    Total job posts: 888\n\n    Keywords:\n    Remote: 174 (19%)\n    Postgres: 81 (9%)\n    Python: 144 (16%)\n    Javascript: 118 (13%)\n    React: 133 (14%)\n    Pandas: 5 (0%)\n\nKeywords filtering\n~~~~~~~~~~~~~~~~~~\n\nFor statistics about a sub set of the default keywords, or even custom\nkeywords out of the default set you can specify the ``-k`` or\n``--keywords`` options, as a comma separated list of values.\n\n.. code:: bash\n\n    $ jobs_detector hacker_news -i 11814828 -k python,django,ruby\n    Total job posts: 889\n\n    Keywords:\n    Python: 144 (16%)\n    Ruby: 80 (8%)\n    Django: 36 (4%)\n\nCombination stats\n~~~~~~~~~~~~~~~~~\n\nIt's also possible to request statistics of certain combination of\nkeywords. For example, how many offers are asking for \"remote\",\n\"python\", and \"flask\" at the same time?. To do that, use the ``-c`` or\n``-combinations`` option.\n\n.. code:: bash\n\n    $ jobs_detector hacker_news -i 11814828 -c remote-python-flask,remote-django\n    Total job posts: 888\n\n    Keywords:\n    Remote: 174 (19%)\n    Postgres: 81 (9%)\n    Python: 144 (16%)\n    Javascript: 118 (13%)\n    React: 133 (14%)\n    Pandas: 5 (0%)\n\n    Combinations:\n    Remote-Python-Flask: 2 (0%)\n    Remote-Django: 6 (0%)\n\nFeel free to extend the functionality of this command by adding extra\nparameters or even more subcommands to parse different websites.\n\nYour command available in pypi\n------------------------------\n\nFinally, to wrap up this group work, you must make your command tool\navailable in pypi (Python Package Index). Any person out there must be\nable to use the ``pip`` command and install a local version of your\nproject. To do this, we will follow some naming conventions so we don't\nhave conflicts between each other. This is the naming convention you\nmust follow for your package: ``rmotr-bX-cY-gZ-jobs-detector``, where\n``X``, ``Y`` and ``Z`` are the batch number, course number and group\nnumber respectively.\n\nAnyone should be able to install the package by executing, for example:\n``pip install rmotr-b6-c1-g3-jobs-detector``.\n\nHere you have a very detailed guide about how to upload things to pypi:\nhttps://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "CC BY-SA 4.0 License", "maintainer": "", "maintainer_email": "", "name": "rmotr-b13-c1-g1-jobs-detector", "package_url": "https://pypi.org/project/rmotr-b13-c1-g1-jobs-detector/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rmotr-b13-c1-g1-jobs-detector/", "project_urls": null, "release_url": "https://pypi.org/project/rmotr-b13-c1-g1-jobs-detector/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "rmotr.com Group Project | Jobs Detector", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Today we will develop a command line tool which aims to parse certain\nwebsites looking for job statistics based on given keywords. In this\nvery first version of the tool, we will only implement a parser for the\nHackerNews blog, which includes a monthly report of \u201cWho is hiring?\u201d.\nExample: <a href=\"https://news.ycombinator.com/item?id=11814828\" rel=\"nofollow\">https://news.ycombinator.com/item?id=11814828</a></p>\n<div id=\"command-usage\">\n<h2>Command usage</h2>\n<p>The command line tool must be accessible by calling <tt>jobs_detector</tt>\ncommand. A <tt>hacker_news</tt> subcommand must be also available as part of\nthis implementation.</p>\n<p>To see the whole list of optional and mandatory parameters, you can\nexecute the command using the <tt><span class=\"pre\">--help</span></tt> flag.</p>\n<pre>$ jobs_detector hacker_news --help\nOptions:\n  -i, --post-id TEXT       <span class=\"o\">[</span>required<span class=\"o\">]</span>\n  -k, --keywords TEXT\n  -c, --combinations TEXT\n  --help                   Show this message and exit.\n</pre>\n<div id=\"default-arguments\">\n<h3>Default arguments</h3>\n<p>To request jobs statistics using a default set of keywords, just call\nthe <tt>hacker_news</tt> subcommand providing a valid HN post id (see the\nlast part of the sample URL above), like this:</p>\n<pre>$ jobs_detector hacker_news -i <span class=\"m\">11814828</span>\nTotal job posts: <span class=\"m\">888</span>\n\nKeywords:\nRemote: <span class=\"m\">174</span> <span class=\"o\">(</span><span class=\"m\">19</span>%<span class=\"o\">)</span>\nPostgres: <span class=\"m\">81</span> <span class=\"o\">(</span><span class=\"m\">9</span>%<span class=\"o\">)</span>\nPython: <span class=\"m\">144</span> <span class=\"o\">(</span><span class=\"m\">16</span>%<span class=\"o\">)</span>\nJavascript: <span class=\"m\">118</span> <span class=\"o\">(</span><span class=\"m\">13</span>%<span class=\"o\">)</span>\nReact: <span class=\"m\">133</span> <span class=\"o\">(</span><span class=\"m\">14</span>%<span class=\"o\">)</span>\nPandas: <span class=\"m\">5</span> <span class=\"o\">(</span><span class=\"m\">0</span>%<span class=\"o\">)</span>\n</pre>\n</div>\n<div id=\"keywords-filtering\">\n<h3>Keywords filtering</h3>\n<p>For statistics about a sub set of the default keywords, or even custom\nkeywords out of the default set you can specify the <tt><span class=\"pre\">-k</span></tt> or\n<tt><span class=\"pre\">--keywords</span></tt> options, as a comma separated list of values.</p>\n<pre>$ jobs_detector hacker_news -i <span class=\"m\">11814828</span> -k python,django,ruby\nTotal job posts: <span class=\"m\">889</span>\n\nKeywords:\nPython: <span class=\"m\">144</span> <span class=\"o\">(</span><span class=\"m\">16</span>%<span class=\"o\">)</span>\nRuby: <span class=\"m\">80</span> <span class=\"o\">(</span><span class=\"m\">8</span>%<span class=\"o\">)</span>\nDjango: <span class=\"m\">36</span> <span class=\"o\">(</span><span class=\"m\">4</span>%<span class=\"o\">)</span>\n</pre>\n</div>\n<div id=\"combination-stats\">\n<h3>Combination stats</h3>\n<p>It\u2019s also possible to request statistics of certain combination of\nkeywords. For example, how many offers are asking for \u201cremote\u201d,\n\u201cpython\u201d, and \u201cflask\u201d at the same time?. To do that, use the <tt><span class=\"pre\">-c</span></tt> or\n<tt><span class=\"pre\">-combinations</span></tt> option.</p>\n<pre>$ jobs_detector hacker_news -i <span class=\"m\">11814828</span> -c remote-python-flask,remote-django\nTotal job posts: <span class=\"m\">888</span>\n\nKeywords:\nRemote: <span class=\"m\">174</span> <span class=\"o\">(</span><span class=\"m\">19</span>%<span class=\"o\">)</span>\nPostgres: <span class=\"m\">81</span> <span class=\"o\">(</span><span class=\"m\">9</span>%<span class=\"o\">)</span>\nPython: <span class=\"m\">144</span> <span class=\"o\">(</span><span class=\"m\">16</span>%<span class=\"o\">)</span>\nJavascript: <span class=\"m\">118</span> <span class=\"o\">(</span><span class=\"m\">13</span>%<span class=\"o\">)</span>\nReact: <span class=\"m\">133</span> <span class=\"o\">(</span><span class=\"m\">14</span>%<span class=\"o\">)</span>\nPandas: <span class=\"m\">5</span> <span class=\"o\">(</span><span class=\"m\">0</span>%<span class=\"o\">)</span>\n\nCombinations:\nRemote-Python-Flask: <span class=\"m\">2</span> <span class=\"o\">(</span><span class=\"m\">0</span>%<span class=\"o\">)</span>\nRemote-Django: <span class=\"m\">6</span> <span class=\"o\">(</span><span class=\"m\">0</span>%<span class=\"o\">)</span>\n</pre>\n<p>Feel free to extend the functionality of this command by adding extra\nparameters or even more subcommands to parse different websites.</p>\n</div>\n</div>\n<div id=\"your-command-available-in-pypi\">\n<h2>Your command available in pypi</h2>\n<p>Finally, to wrap up this group work, you must make your command tool\navailable in pypi (Python Package Index). Any person out there must be\nable to use the <tt>pip</tt> command and install a local version of your\nproject. To do this, we will follow some naming conventions so we don\u2019t\nhave conflicts between each other. This is the naming convention you\nmust follow for your package: <tt><span class=\"pre\">rmotr-bX-cY-gZ-jobs-detector</span></tt>, where\n<tt>X</tt>, <tt>Y</tt> and <tt>Z</tt> are the batch number, course number and group\nnumber respectively.</p>\n<p>Anyone should be able to install the package by executing, for example:\n<tt>pip install <span class=\"pre\">rmotr-b6-c1-g3-jobs-detector</span></tt>.</p>\n<p>Here you have a very detailed guide about how to upload things to pypi:\n<a href=\"https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/\" rel=\"nofollow\">https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/</a></p>\n</div>\n\n          </div>"}, "last_serial": 2882176, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "867f900ff41b7cbcb93d84ab207650ad", "sha256": "35bd05294a0cbee39229cebdd23ccb6692778288d592fc3ddfda93a2529d553a"}, "downloads": -1, "filename": "rmotr-b13-c1-g1-jobs-detector-0.0.1.tar.gz", "has_sig": false, "md5_digest": "867f900ff41b7cbcb93d84ab207650ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3814, "upload_time": "2017-05-18T02:21:41", "upload_time_iso_8601": "2017-05-18T02:21:41.038773Z", "url": "https://files.pythonhosted.org/packages/23/30/c261a9d219d293b6b6f7f1553cca02415f2fcac7ea6536c7fedb4fbf1f79/rmotr-b13-c1-g1-jobs-detector-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "867f900ff41b7cbcb93d84ab207650ad", "sha256": "35bd05294a0cbee39229cebdd23ccb6692778288d592fc3ddfda93a2529d553a"}, "downloads": -1, "filename": "rmotr-b13-c1-g1-jobs-detector-0.0.1.tar.gz", "has_sig": false, "md5_digest": "867f900ff41b7cbcb93d84ab207650ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3814, "upload_time": "2017-05-18T02:21:41", "upload_time_iso_8601": "2017-05-18T02:21:41.038773Z", "url": "https://files.pythonhosted.org/packages/23/30/c261a9d219d293b6b6f7f1553cca02415f2fcac7ea6536c7fedb4fbf1f79/rmotr-b13-c1-g1-jobs-detector-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:12 2020"}