{"info": {"author": "Ed J", "author_email": "mohawk2@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "========================\nsqlalchemy-csv-normalise\n========================\n\n\n.. image:: https://img.shields.io/pypi/v/sqlalchemy-csv-normalise.svg\n        :target: https://pypi.python.org/pypi/sqlalchemy-csv-normalise\n\n.. image:: https://travis-ci.com/mohawk2/sqlalchemy-csv-normalise.svg?branch=master\n        :target: https://travis-ci.com/mohawk2/sqlalchemy-csv-normalise\n\n.. image:: https://readthedocs.org/projects/sqlalchemy-csv-normalise/badge/?version=latest\n        :target: https://sqlalchemy-csv-normalise.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n.. image:: https://pyup.io/repos/github/mohawk2/sqlalchemy-csv-normalise/shield.svg\n     :target: https://pyup.io/repos/github/mohawk2/sqlalchemy-csv-normalise/\n     :alt: Updates\n\n\n\nSQLAlchemy utilities for normalising / denormalising table data, useful for CSV\n\n\nWhere a table is normalised to have \"lookup tables\" of values\nreferred to by e.g. a numeric foreign-key ID, these functions will\nenable extraction of the data (or conversely, loading from such)\nwith the looked-up values substituted in. Among other things, this\nallows more human-friendly data editing in e.g. a spreadsheet.\n\nExample::\n\n    from sqlalchemy_csv_normalise import denormalise_prepare\n    q, col_names = denormalise_prepare(db.session, table)\n    filename = table_to_filename(table)\n    with open(filename, 'w', newline='') as csv_file:\n        csv_file_writer = csv.writer(csv_file)\n        csv_file_writer.writerow(col_names)\n        csv_file_writer.writerows(q.all())\n\n    from sqlalchemy_csv_normalise import renormalise_prepare, empty_deleter,\\\n        type_coercer\n    row_maker = renormalise_prepare(db.session, table)\n    row_cleaner = empty_deleter(table)\n    row_coercer = type_coercer(table)\n    filename = table_to_filename(table)\n    with open(filename, newline='') as csv_file:\n        for d in csv.DictReader(csv_file):\n            row = row_coercer(row_cleaner(row_maker(d)))\n            db.session.add(table(**row))\n    db.session.commit()\n\n\n* Free software: MIT license\n* Documentation: https://sqlalchemy-csv-normalise.readthedocs.io.\n\n\nFeatures\n--------\n\n* denormalise_prepare(session, table, colname_tidier)\n\nReturns SQLAlchemy query, and the column-names it will return.\nThe query will denormalise any foreign keys (FKs) if they refer to a\ntable with a unique column that is not its primary key.\n\nThe names of any FK columns will have `_id` taken off the end\nas a simple heuristic. Override this by providing a `colname_tidier`.\n\n\n* empty_deleter(table)\n\nReturns function that returns given dict minus empty strings for nullable\ncolumns.\nUseful because CSV has no way to record NULL.\n\n* type_coercer(table)\n\nReturns function that given a row dict will coerce values.\nWorks on dates and booleans.\nWill only operate on strings, so if you have pass in a row that has already\ngot non-string values, they will not be affected.\n\n* renormalise_prepare(session, table, colname_tidier)\n\nReturns function that will renormalise given dictionary\nDoes the inverse of denormalise_prepare.\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.1 (2020-02-01)\n------------------\n\n* First release on PyPI.\n\n0.1.2 (2020-02-01)\n------------------\n\n* make type_coercer only affect string values\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mohawk2/sqlalchemy-csv-normalise", "keywords": "sqlalchemy-csv-normalise", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "sqlalchemy-csv-normalise", "package_url": "https://pypi.org/project/sqlalchemy-csv-normalise/", "platform": "", "project_url": "https://pypi.org/project/sqlalchemy-csv-normalise/", "project_urls": {"Homepage": "https://github.com/mohawk2/sqlalchemy-csv-normalise"}, "release_url": "https://pypi.org/project/sqlalchemy-csv-normalise/0.1.2/", "requires_dist": ["SQLAlchemy (>=1.3.8)", "python-dateutil (>=2.8.1)"], "requires_python": ">=3.5", "summary": "SQLAlchemy utilities for normalising / denormalising table data, useful for CSV", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"sqlalchemy-csv-normalise\">\n<h2>sqlalchemy-csv-normalise</h2>\n<a href=\"https://pypi.python.org/pypi/sqlalchemy-csv-normalise\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/sqlalchemy-csv-normalise.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf516788be0fd4cfa218d7e83b8c0a1f4f8a86a8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73716c616c6368656d792d6373762d6e6f726d616c6973652e737667\"></a>\n<a href=\"https://travis-ci.com/mohawk2/sqlalchemy-csv-normalise\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/mohawk2/sqlalchemy-csv-normalise.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/005bb46ba67bc5887850ead2d377e13a6ab93fea/68747470733a2f2f7472617669732d63692e636f6d2f6d6f6861776b322f73716c616c6368656d792d6373762d6e6f726d616c6973652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://sqlalchemy-csv-normalise.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d05f8db7f0099ffbbbaa033261f108e0e372e3d5/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73716c616c6368656d792d6373762d6e6f726d616c6973652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pyup.io/repos/github/mohawk2/sqlalchemy-csv-normalise/\" rel=\"nofollow\"><img alt=\"Updates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/245ef4aaa59b3d56265ffe21b5a04d7894b69fe8/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f6d6f6861776b322f73716c616c6368656d792d6373762d6e6f726d616c6973652f736869656c642e737667\"></a>\n<p>SQLAlchemy utilities for normalising / denormalising table data, useful for CSV</p>\n<p>Where a table is normalised to have \u201clookup tables\u201d of values\nreferred to by e.g. a numeric foreign-key ID, these functions will\nenable extraction of the data (or conversely, loading from such)\nwith the looked-up values substituted in. Among other things, this\nallows more human-friendly data editing in e.g. a spreadsheet.</p>\n<p>Example:</p>\n<pre>from sqlalchemy_csv_normalise import denormalise_prepare\nq, col_names = denormalise_prepare(db.session, table)\nfilename = table_to_filename(table)\nwith open(filename, 'w', newline='') as csv_file:\n    csv_file_writer = csv.writer(csv_file)\n    csv_file_writer.writerow(col_names)\n    csv_file_writer.writerows(q.all())\n\nfrom sqlalchemy_csv_normalise import renormalise_prepare, empty_deleter,\\\n    type_coercer\nrow_maker = renormalise_prepare(db.session, table)\nrow_cleaner = empty_deleter(table)\nrow_coercer = type_coercer(table)\nfilename = table_to_filename(table)\nwith open(filename, newline='') as csv_file:\n    for d in csv.DictReader(csv_file):\n        row = row_coercer(row_cleaner(row_maker(d)))\n        db.session.add(table(**row))\ndb.session.commit()\n</pre>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://sqlalchemy-csv-normalise.readthedocs.io\" rel=\"nofollow\">https://sqlalchemy-csv-normalise.readthedocs.io</a>.</li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>denormalise_prepare(session, table, colname_tidier)</li>\n</ul>\n<p>Returns SQLAlchemy query, and the column-names it will return.\nThe query will denormalise any foreign keys (FKs) if they refer to a\ntable with a unique column that is not its primary key.</p>\n<p>The names of any FK columns will have <cite>_id</cite> taken off the end\nas a simple heuristic. Override this by providing a <cite>colname_tidier</cite>.</p>\n<ul>\n<li>empty_deleter(table)</li>\n</ul>\n<p>Returns function that returns given dict minus empty strings for nullable\ncolumns.\nUseful because CSV has no way to record NULL.</p>\n<ul>\n<li>type_coercer(table)</li>\n</ul>\n<p>Returns function that given a row dict will coerce values.\nWorks on dates and booleans.\nWill only operate on strings, so if you have pass in a row that has already\ngot non-string values, they will not be affected.</p>\n<ul>\n<li>renormalise_prepare(session, table, colname_tidier)</li>\n</ul>\n<p>Returns function that will renormalise given dictionary\nDoes the inverse of denormalise_prepare.</p>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.1.1 (2020-02-01)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.2 (2020-02-01)</h3>\n<ul>\n<li>make type_coercer only affect string values</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6556242, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "e1183bc27c5b4d4015984351c8ca7d87", "sha256": "6091ceb7781d9a4bb1a0fef6fa281b752467fba3dc5ed4835c6992c23cb2f787"}, "downloads": -1, "filename": "sqlalchemy_csv_normalise-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e1183bc27c5b4d4015984351c8ca7d87", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 6034, "upload_time": "2020-02-01T22:15:22", "upload_time_iso_8601": "2020-02-01T22:15:22.690668Z", "url": "https://files.pythonhosted.org/packages/36/fa/de1723f48bd565e4a354a54b8a911757de7293228c128e088d339a2b6e9b/sqlalchemy_csv_normalise-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c98f3d5f5ffad0351962aea16eab93f", "sha256": "a3427a26b6b3ed2ff06c1b5d887f4a93542add5af0461a5104676ccf050856fa"}, "downloads": -1, "filename": "sqlalchemy-csv-normalise-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1c98f3d5f5ffad0351962aea16eab93f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11071, "upload_time": "2020-02-01T22:15:24", "upload_time_iso_8601": "2020-02-01T22:15:24.254225Z", "url": "https://files.pythonhosted.org/packages/9b/a6/3f4c2b7796ab6d8d2777779d3125f54612ac43f80de01612ad9f68a5d4ca/sqlalchemy-csv-normalise-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2a9f42c29bb73c17f28d863bce5b4cef", "sha256": "3c479a22ca5a4149c7f8606ef16a71d40948bc63d136441fa9575f40b00ae11b"}, "downloads": -1, "filename": "sqlalchemy_csv_normalise-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2a9f42c29bb73c17f28d863bce5b4cef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 6195, "upload_time": "2020-02-02T00:01:01", "upload_time_iso_8601": "2020-02-02T00:01:01.784175Z", "url": "https://files.pythonhosted.org/packages/0b/c2/df068dd89c2eb336a8beca39bb6c5bf2ff86d8ede59905a8f81fd2e9667e/sqlalchemy_csv_normalise-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00505d8d44af15acba674ced2ea7f675", "sha256": "b6b90762ec8d0f7a2a0be714c7b0ec37bccd7f9288951c3a3b98531adddc80a6"}, "downloads": -1, "filename": "sqlalchemy-csv-normalise-0.1.2.tar.gz", "has_sig": false, "md5_digest": "00505d8d44af15acba674ced2ea7f675", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11222, "upload_time": "2020-02-02T00:01:03", "upload_time_iso_8601": "2020-02-02T00:01:03.017424Z", "url": "https://files.pythonhosted.org/packages/4d/ae/13a73d0c0f09482e27432a933599c77f73446665244da62819ed8c2dd069/sqlalchemy-csv-normalise-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2a9f42c29bb73c17f28d863bce5b4cef", "sha256": "3c479a22ca5a4149c7f8606ef16a71d40948bc63d136441fa9575f40b00ae11b"}, "downloads": -1, "filename": "sqlalchemy_csv_normalise-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2a9f42c29bb73c17f28d863bce5b4cef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 6195, "upload_time": "2020-02-02T00:01:01", "upload_time_iso_8601": "2020-02-02T00:01:01.784175Z", "url": "https://files.pythonhosted.org/packages/0b/c2/df068dd89c2eb336a8beca39bb6c5bf2ff86d8ede59905a8f81fd2e9667e/sqlalchemy_csv_normalise-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00505d8d44af15acba674ced2ea7f675", "sha256": "b6b90762ec8d0f7a2a0be714c7b0ec37bccd7f9288951c3a3b98531adddc80a6"}, "downloads": -1, "filename": "sqlalchemy-csv-normalise-0.1.2.tar.gz", "has_sig": false, "md5_digest": "00505d8d44af15acba674ced2ea7f675", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11222, "upload_time": "2020-02-02T00:01:03", "upload_time_iso_8601": "2020-02-02T00:01:03.017424Z", "url": "https://files.pythonhosted.org/packages/4d/ae/13a73d0c0f09482e27432a933599c77f73446665244da62819ed8c2dd069/sqlalchemy-csv-normalise-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:59 2020"}