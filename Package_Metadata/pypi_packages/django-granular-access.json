{"info": {"author": "Kirill Sibirev", "author_email": "k.sibirev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "Granular access is django app for giving permissions on set of models for users\nor groups.\n\n\nQuick start\n-----------\n\n1. Add \"granular_access\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = (\n        ...\n        'granular_access',\n    )\n\n2. Run south command for createing tables in database::\n\n      ./manage.py migrate granular_access\n\n3. Create permission for user or group on some set of models via admin or using\n`create_permission` function::\n\n    >>> from granular_settings import create_permission\n    >>> create_permission(user=joker, action='kill_and_rob', app_label='auth',\n    ...     model_name='user', conditions=[{'username__startswith': 'victim'}])\n\nYou can find more examples in tests.\n\n4. Filter available models using filter_available function::\n\n    >>> from granular_settings import filter_available\n    >>> available_users = filter_available(to=joker, action='kill_and_rob',\n    ...     queryset=User.objects.all())\n\n5. Profit.\n\n\nSettings\n--------\n\nYou can define some settings for customize app behaviour:\n\n  * GRANULAR_ACCESS_USER_MODEL -- user model in your project for assigning\n    permissions.\n\n    Example: 'users.Profile'.\n    Default: 'auth.User'.\n\n  * GRANULAR_ACCESS_GROUP_MODEL -- group model in your project for assigning\n    permissions.\n\n    Example: 'groups.UserGroup'.\n    Default: 'auth.Group'.\n\n  * GRANULAR_ACCESS_USER_GROUP_RELATED_NAME -- related name in user model for\n    relatinon with groups. So you can get user groups by calling\n    >>> user_instance.related_name.all()\n\n    It will be used if GRANULAR_ACCESS_GET_USER_GROUPS_FUNCTION settings is not\n    set or set to None.\n\n    Example: 'user_groups'.\n    Default: 'groups'.\n\n  * GRANULAR_ACCESS_GET_USER_GROUPS_FUNCTION -- path to function, witch receives\n    user instance as first argument and return iterable with groups or group\n    ids. You can use this function if you have more complex logic for gettings\n    user groups, than via related_name.\n\n    Example: 'project_name.users_app.helpers.get_user_groups'.\n    Default: None.\n\n  * GRANULAR_ACCESS_CONSIDER_SUPERUSER -- boolean value, which indicates should\n    superusers get all permissions on all models or not.\n\n    Default: True.\n\n\nExtras\n------\n\nYou can use AccessManager in your model::\n\n    from granular_access import AccessManager\n\n    class MyModel(models.Model):\n        objects = AccessManager()\n\nOr if you already have some special manager for your model, you can use\nAccessManagerMixin in it.\n\n\nALso you can utilize AccessQuerySet or AccessQuerySetMixin.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/l0kix2/django-granular-access", "keywords": "django,permissions", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-granular-access", "package_url": "https://pypi.org/project/django-granular-access/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-granular-access/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/l0kix2/django-granular-access"}, "release_url": "https://pypi.org/project/django-granular-access/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Flexible permission system for Django.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Granular access is django app for giving permissions on set of models for users\nor groups.</p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li><p>Add \u201cgranular_access\u201d to your INSTALLED_APPS setting like this:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'granular_access',\n)\n</pre>\n</li>\n<li><p>Run south command for createing tables in database:</p>\n<pre>./manage.py migrate granular_access\n</pre>\n</li>\n</ol>\n<p>3. Create permission for user or group on some set of models via admin or using\n<cite>create_permission</cite> function:</p>\n<pre>&gt;&gt;&gt; from granular_settings import create_permission\n&gt;&gt;&gt; create_permission(user=joker, action='kill_and_rob', app_label='auth',\n...     model_name='user', conditions=[{'username__startswith': 'victim'}])\n</pre>\n<p>You can find more examples in tests.</p>\n<ol>\n<li><p>Filter available models using filter_available function:</p>\n<pre>&gt;&gt;&gt; from granular_settings import filter_available\n&gt;&gt;&gt; available_users = filter_available(to=joker, action='kill_and_rob',\n...     queryset=User.objects.all())\n</pre>\n</li>\n<li><p>Profit.</p>\n</li>\n</ol>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>You can define some settings for customize app behaviour:</p>\n<blockquote>\n<ul>\n<li><p>GRANULAR_ACCESS_USER_MODEL \u2013 user model in your project for assigning\npermissions.</p>\n<p>Example: \u2018users.Profile\u2019.\nDefault: \u2018auth.User\u2019.</p>\n</li>\n<li><p>GRANULAR_ACCESS_GROUP_MODEL \u2013 group model in your project for assigning\npermissions.</p>\n<p>Example: \u2018groups.UserGroup\u2019.\nDefault: \u2018auth.Group\u2019.</p>\n</li>\n<li><p>GRANULAR_ACCESS_USER_GROUP_RELATED_NAME \u2013 related name in user model for\nrelatinon with groups. So you can get user groups by calling\n&gt;&gt;&gt; user_instance.related_name.all()</p>\n<p>It will be used if GRANULAR_ACCESS_GET_USER_GROUPS_FUNCTION settings is not\nset or set to None.</p>\n<p>Example: \u2018user_groups\u2019.\nDefault: \u2018groups\u2019.</p>\n</li>\n<li><p>GRANULAR_ACCESS_GET_USER_GROUPS_FUNCTION \u2013 path to function, witch receives\nuser instance as first argument and return iterable with groups or group\nids. You can use this function if you have more complex logic for gettings\nuser groups, than via related_name.</p>\n<p>Example: \u2018project_name.users_app.helpers.get_user_groups\u2019.\nDefault: None.</p>\n</li>\n<li><p>GRANULAR_ACCESS_CONSIDER_SUPERUSER \u2013 boolean value, which indicates should\nsuperusers get all permissions on all models or not.</p>\n<p>Default: True.</p>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"extras\">\n<h2>Extras</h2>\n<p>You can use AccessManager in your model:</p>\n<pre>from granular_access import AccessManager\n\nclass MyModel(models.Model):\n    objects = AccessManager()\n</pre>\n<p>Or if you already have some special manager for your model, you can use\nAccessManagerMixin in it.</p>\n<p>ALso you can utilize AccessQuerySet or AccessQuerySetMixin.</p>\n</div>\n\n          </div>"}, "last_serial": 749586, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f21145d5be4b0e742351bfc34f44493f", "sha256": "acd5ccd355f61ff7d385933c71b80f8d67af72e873c2df49100e50668ac3a7cc"}, "downloads": -1, "filename": "django-granular-access-0.1.tar.gz", "has_sig": false, "md5_digest": "f21145d5be4b0e742351bfc34f44493f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6974, "upload_time": "2012-11-17T16:00:52", "upload_time_iso_8601": "2012-11-17T16:00:52.102252Z", "url": "https://files.pythonhosted.org/packages/02/0e/efc3cf829dd510a4558ca070cdcb7befe6fb6f9059b8b8c75f7103a5a1ad/django-granular-access-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6d6d2f60422ce553beb277dee29dcc93", "sha256": "4c5589e597097575d2aa7037e96b3d9aec3d6f8785ff1a89f69189754170cbe3"}, "downloads": -1, "filename": "django-granular-access-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6d6d2f60422ce553beb277dee29dcc93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6598, "upload_time": "2012-11-25T14:30:51", "upload_time_iso_8601": "2012-11-25T14:30:51.675109Z", "url": "https://files.pythonhosted.org/packages/a4/cb/b43a83b42c354ab0a1d31035014f0cc12939f41befa7f21464ffe4b108b0/django-granular-access-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d6d2f60422ce553beb277dee29dcc93", "sha256": "4c5589e597097575d2aa7037e96b3d9aec3d6f8785ff1a89f69189754170cbe3"}, "downloads": -1, "filename": "django-granular-access-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6d6d2f60422ce553beb277dee29dcc93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6598, "upload_time": "2012-11-25T14:30:51", "upload_time_iso_8601": "2012-11-25T14:30:51.675109Z", "url": "https://files.pythonhosted.org/packages/a4/cb/b43a83b42c354ab0a1d31035014f0cc12939f41befa7f21464ffe4b108b0/django-granular-access-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:48 2020"}