{"info": {"author": "Hyuntak Joo", "author_email": "momamene@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "===============================\ndjango-reinhardt\n===============================\n\n\n.. image:: https://img.shields.io/pypi/v/django-reinhardt.svg\n        :target: https://pypi.python.org/pypi/django-reinhardt\n\n.. image:: https://img.shields.io/travis/momamene/django-reinhardt.svg\n        :target: https://travis-ci.org/momamene/django-reinhardt\n\n.. image:: https://readthedocs.org/projects/django-reinhardt/badge/?version=latest\n        :target: https://django-reinhardt.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/momamene/django-reinhardt/shield.svg\n        :target: https://pyup.io/repos/github/momamene/django-reinhardt/\n        :alt: Updates\n\n\nThere are many object permission backends like `django-guardian <https://github.com/django-guardian/django-guardian>`_ or `django-permission <https://github.com/lambdalisue/django-permission>`_.\n\nBut some time, it is needed to define permissions as not just object-user relationship.\n\n`django-reinhardt <https://github.com/momamene/django-reinhardt>`_ make you handle object permissions by defining methods in your django model\n\n* Free software: MIT license\n* Documentation: https://django-reinhardt.readthedocs.io.\n\n\nInstallation\n------------\nUse pip_ like::\n\n    $ pip install django-reinhardt\n\n.. _pip:  https://pypi.python.org/pypi/pip\n\nUsage\n-----\nAdd extra authorization backends in your settings.py::\n\n    AUTHENTICATION_BACKENDS = (\n        'django.contrib.auth.backends.ModelBackend', # default\n        'reinhardt.backends.PermissionBackend',\n    )\n\nIt's done. you don't need to add any app or migrate anything.\n\nAssume that ``Inquiry`` model needs to have two permission: ``change_inqury``, ``view_inquiry``  ::\n\n    class Inquiry(models.Model):\n\n        writer = models.ForeignKey(settings.AUTH_USER_MODEL)\n        text = models.TextField()\n        pub_date = models.DateTimeField(auto_now_add=True)\n\n        @object_permission(codename='change_inquiry')\n        def is_changeable_by(self, user):\n            return self.writer == user or user.is_staff\n\n        @object_permission(codename='view_inquiry')\n        def is_viewable_by(self, user):\n            return self.writer == user\n\nThen you can just define methods having ``user`` parameter, decorated by ``object_permission``.\n\nNow the following codes will work as expected: ::\n\n    user1 = get_user_model().objects.create(\n        username='nanase'\n    )\n    user2 = get_user_model().objects.create(\n        username='maiyan'\n    )\n    user3 = get_user_model().objects.create(\n        username='ikuta'\n    )\n    inquiry = Inquiry.objects.create(\n        writer=self.user1,\n        text='How can I delete my account?'\n    )\n\n    assert user1.has_perm('yourapp.change_inquiry', obj=inquiry) == True\n    assert user2.has_perm('yourapp.view_inquiry', obj=inquiry) == False\n    assert user3.has_perm('yourapp.change_inquiry', obj=inquiry) == False\n    assert user3.has_perm('yourapp.view_inquiry', obj=inquiry) == True\n\n\nCredits\n---------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.2.0 (2016-08-2)\n------------------\n\n* Change the way how to distinguish permission-related method from others.\n* Now you should use ``object_permission`` decorator instead of ``can_`` prefix to define permission methods.\n\n\n0.1.0 (2016-07-19)\n------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/momamene/django-reinhardt/tags", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/momamene/django-reinhardt", "keywords": "django object logical permission auth authentication reinhardt", "license": "MIT license", "maintainer": null, "maintainer_email": null, "name": "django-reinhardt", "package_url": "https://pypi.org/project/django-reinhardt/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-reinhardt/", "project_urls": {"Download": "https://github.com/momamene/django-reinhardt/tags", "Homepage": "https://github.com/momamene/django-reinhardt"}, "release_url": "https://pypi.org/project/django-reinhardt/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Manage object permissions by defining methods in Django Model", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-reinhardt\">\n<h2>django-reinhardt</h2>\n<a href=\"https://pypi.python.org/pypi/django-reinhardt\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/django-reinhardt.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44a7e421f0da09feb6acf8c414dca7e44e4a3ac2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d7265696e68617264742e737667\"></a>\n<a href=\"https://travis-ci.org/momamene/django-reinhardt\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/momamene/django-reinhardt.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1bc40de75125c2d992ee232439bad03b50e0b4b1/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d6f6d616d656e652f646a616e676f2d7265696e68617264742e737667\"></a>\n<a href=\"https://django-reinhardt.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36341d3e69fc3a16ad6d748195995382d053732e/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646a616e676f2d7265696e68617264742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pyup.io/repos/github/momamene/django-reinhardt/\" rel=\"nofollow\"><img alt=\"Updates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a02500d89b376351beab1a62d57e77f98d3487c/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f6d6f6d616d656e652f646a616e676f2d7265696e68617264742f736869656c642e737667\"></a>\n<p>There are many object permission backends like <a href=\"https://github.com/django-guardian/django-guardian\" rel=\"nofollow\">django-guardian</a> or <a href=\"https://github.com/lambdalisue/django-permission\" rel=\"nofollow\">django-permission</a>.</p>\n<p>But some time, it is needed to define permissions as not just object-user relationship.</p>\n<p><a href=\"https://github.com/momamene/django-reinhardt\" rel=\"nofollow\">django-reinhardt</a> make you handle object permissions by defining methods in your django model</p>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://django-reinhardt.readthedocs.io\" rel=\"nofollow\">https://django-reinhardt.readthedocs.io</a>.</li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Use <a href=\"https://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a> like:</p>\n<pre>$ pip install django-reinhardt\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Add extra authorization backends in your settings.py:</p>\n<pre>AUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend', # default\n    'reinhardt.backends.PermissionBackend',\n)\n</pre>\n<p>It\u2019s done. you don\u2019t need to add any app or migrate anything.</p>\n<p>Assume that <tt>Inquiry</tt> model needs to have two permission: <tt>change_inqury</tt>, <tt>view_inquiry</tt></p>\n<pre>class Inquiry(models.Model):\n\n    writer = models.ForeignKey(settings.AUTH_USER_MODEL)\n    text = models.TextField()\n    pub_date = models.DateTimeField(auto_now_add=True)\n\n    @object_permission(codename='change_inquiry')\n    def is_changeable_by(self, user):\n        return self.writer == user or user.is_staff\n\n    @object_permission(codename='view_inquiry')\n    def is_viewable_by(self, user):\n        return self.writer == user\n</pre>\n<p>Then you can just define methods having <tt>user</tt> parameter, decorated by <tt>object_permission</tt>.</p>\n<p>Now the following codes will work as expected:</p>\n<pre>user1 = get_user_model().objects.create(\n    username='nanase'\n)\nuser2 = get_user_model().objects.create(\n    username='maiyan'\n)\nuser3 = get_user_model().objects.create(\n    username='ikuta'\n)\ninquiry = Inquiry.objects.create(\n    writer=self.user1,\n    text='How can I delete my account?'\n)\n\nassert user1.has_perm('yourapp.change_inquiry', obj=inquiry) == True\nassert user2.has_perm('yourapp.view_inquiry', obj=inquiry) == False\nassert user3.has_perm('yourapp.change_inquiry', obj=inquiry) == False\nassert user3.has_perm('yourapp.view_inquiry', obj=inquiry) == True\n</pre>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id2\">\n<h3>0.2.0 (2016-08-2)</h3>\n<ul>\n<li>Change the way how to distinguish permission-related method from others.</li>\n<li>Now you should use <tt>object_permission</tt> decorator instead of <tt>can_</tt> prefix to define permission methods.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0 (2016-07-19)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2257464, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "860f94a295ab9dce42daa512149d9992", "sha256": "a23ce1e39e2999e7babc805860bd5006655b33ad6acecb2530259ddbff9f1ef6"}, "downloads": -1, "filename": "django-reinhardt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "860f94a295ab9dce42daa512149d9992", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12187, "upload_time": "2016-08-02T00:38:08", "upload_time_iso_8601": "2016-08-02T00:38:08.595972Z", "url": "https://files.pythonhosted.org/packages/4e/eb/c19e03e42789033795ab2de455e99409f23c0457d8ecf743c156e0dd8f8c/django-reinhardt-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1ebb5843344360f8fb336ed399878f79", "sha256": "5bde8b05b5122a736b9a59399155caa9788a8a1a6d07a85d8d9b336a32038988"}, "downloads": -1, "filename": "django-reinhardt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1ebb5843344360f8fb336ed399878f79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12706, "upload_time": "2016-08-02T11:22:11", "upload_time_iso_8601": "2016-08-02T11:22:11.090175Z", "url": "https://files.pythonhosted.org/packages/44/24/8979fce65bb8f30d375d865c65950a6a73bb826df663efc70db69382732a/django-reinhardt-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ebb5843344360f8fb336ed399878f79", "sha256": "5bde8b05b5122a736b9a59399155caa9788a8a1a6d07a85d8d9b336a32038988"}, "downloads": -1, "filename": "django-reinhardt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1ebb5843344360f8fb336ed399878f79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12706, "upload_time": "2016-08-02T11:22:11", "upload_time_iso_8601": "2016-08-02T11:22:11.090175Z", "url": "https://files.pythonhosted.org/packages/44/24/8979fce65bb8f30d375d865c65950a6a73bb826df663efc70db69382732a/django-reinhardt-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:18 2020"}