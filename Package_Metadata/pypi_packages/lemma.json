{"info": {"author": "Ben Denham", "author_email": "ben@denham.nz", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics"], "description": "```\n     ##### /\n  ######  /\n /#   /  /\n/    /  /\n    /  /\n   ## ##              /##    ### /### /###    ### /### /###       /###\n   ## ##             / ###    ##/ ###/ /##  /  ##/ ###/ /##  /   / ###  /\n   ## ##            /   ###    ##  ###/ ###/    ##  ###/ ###/   /   ###/\n   ## ##           ##    ###   ##   ##   ##     ##   ##   ##   ##    ##\n   ## ##           ########    ##   ##   ##     ##   ##   ##   ##    ##\n   #  ##           #######     ##   ##   ##     ##   ##   ##   ##    ##\n      /            ##          ##   ##   ##     ##   ##   ##   ##    ##\n  /##/           / ####    /   ##   ##   ##     ##   ##   ##   ##    /#\n /  ############/   ######/    ###  ###  ###    ###  ###  ###   ####/ ##\n/     #########      #####      ###  ###  ###    ###  ###  ###   ###   ##\n#\n ##\n```\n\nAn extensible mini-language to generate mathematical notation for\nexecutable and testable Python.\n\n## Le Quick Start\n\nTry the Demo on Binder:\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/ben-denham/lemma/master?filepath=notebooks%2FLemmaDemo.ipynb)\n\nOr get it from PyPi:\n\n```\npip install lemma\n```\n\n[![PyPI version](https://badge.fury.io/py/lemma.svg)](https://badge.fury.io/py/lemma)\n\n## Le Features\n\n* Define mathematical formulae that can be formatted as LaTeX and\n  executed as functions.\n* Check all of the steps in your equation transformations produce the\n  same results in software.\n* Runs on Python - you can use defined formulae in your existing\n  Python projects, and use Python libraries from your formulae.\n* Fully extensible - built with Hy (a Lisp running on Python) to\n  provide powerful tools for defining your own mathematical\n  operations.\n\n## Le Use Cases\n\n* Supports reproducible research by ensuring the notation in your\n  paper matches the behaviour of your (testable) code.\n* Enables developers to work through math in a more exploratory\n  way. Use an equation to record the steps in your step-by-step\n  algebraic transformations, and write test-cases to check your\n  working. Then, get the LaTeX to document your work.\n* Bridges the gap between mathematical notation and code to simplify\n  teaching in domains that depend on both.\n\n## Le Similar Projects\n\n* [Mathematica/Wolfram Language](https://www.wolfram.com/language/)\n  * The Wolfram Language has similar motivations to Lemma around\n    bridging the gap between mathematical notation and executable\n    code. You can generate LaTeX from your code, but it's a\n    proprietary language. Also, because Lemma is built on top of\n    Python, it can work with your existing Python code and libraries.\n* [SymPy](https://docs.sympy.org/latest/index.html)\n  * Like the Wolfram Language, SymPy is designed for symbolic\n    computation. You can generate LaTeX from your expressions, but it\n    seems that control over the notation is limited (expressions are\n    automatically simplified, and LaTeX formatting options are\n    controlled by keyword arguments that apply to the entire\n    expression). Lemma is designed to be extensible so that you can\n    define exactly how you want the LaTeX to be generated for your use\n    case, and so that you can provide notation for any Python code you\n    like (not just symbolic computation). A library for using SymPy's\n    symbolic computation powers from Lemma would be a good extension\n    though...\n* [pytexit](https://pytexit.readthedocs.io/en/latest/)\n  * Translates a string of Python code to LaTeX. Limited features\n    supported, and requires managing Python code in strings.\n* [LaTeXCalc](http://latexcalc.sourceforge.net/doc.php)\n  * Interprets and executes LaTeX math notation. Limited library of\n    math functions available.\n\n## Le TODO\n\n* Complete `algebra.hy`\n* Improve precedence numbering.\n* Commenting and some refactoring\n* Generate docstrings\n* Examples with pdoc3 and pytest\n* Documentation (tutorial, API reference)\n\n## Le Dev Environment\n\n### Dependencies\n\nIn order to run this project, you must have the following dependencies\ninstalled on your host:\n\n* [Docker Community Edition](https://docs.docker.com/get-docker/) (>= 17.09)\n* [Docker Compose](https://docs.docker.com/compose/install/) (>= 1.17)\n  (Included with Docker Desktop on Mac/Windows)\n* [Make](https://www.gnu.org/software/make/) (technically optional if\n  you don't mind running the commands in the Makefile directly)\n\n**Note:** If you use [Git bash](https://git-scm.com/downloads) on\nWindows and also\n[install `make`](https://gist.github.com/evanwill/0207876c3243bbb6863e65ec5dc3f058)\ninto Git bash, then you should be able to run this project on Windows.\n\n## Basic Usage\n\n1. Run `make run` in this directory.\n   * This will perform all Docker image build steps and dependency\n     installations every time you run it, so that you can never forget\n     to rebuild. The first time you run this, it make take some time\n     for the base Docker image and other dependencies to be\n     downloaded.\n2. Browse to http://localhost:7777 and enter the token displayed in\n   the terminal (or just follow the link in the terminal).\n3. Work in Python notebooks, with the ability to import code from your\n   the lemma module.\n\n### Linting\n\nYou can run [flake8](http://flake8.pycqa.org/en/latest/) linting on\nyour modules with: `make lint`.\n\n### Testing\n\nYou can run [pytest](https://docs.pytest.org/en/latest/) unit tests\nlinting contained in your modules with: `make test`.\n\nAn HTML code-coverage reported will be generated for each module at:\n`<module-dir>/test/coverage/index.html`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ben-denham/lemma", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "lemma", "package_url": "https://pypi.org/project/lemma/", "platform": "", "project_url": "https://pypi.org/project/lemma/", "project_urls": {"Homepage": "https://github.com/ben-denham/lemma"}, "release_url": "https://pypi.org/project/lemma/0.1.dev0/", "requires_dist": ["hy (>=0.18.0)", "flake8 (>=3.7.9) ; extra == 'dev'", "pytest (>=5.2.2) ; extra == 'dev'", "pytest-cov (>=2.8.1) ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "An extensible mini-language to generate mathematical notation for executable and testable Python.", "version": "0.1.dev0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre><code>     ##### /\n  ######  /\n /#   /  /\n/    /  /\n    /  /\n   ## ##              /##    ### /### /###    ### /### /###       /###\n   ## ##             / ###    ##/ ###/ /##  /  ##/ ###/ /##  /   / ###  /\n   ## ##            /   ###    ##  ###/ ###/    ##  ###/ ###/   /   ###/\n   ## ##           ##    ###   ##   ##   ##     ##   ##   ##   ##    ##\n   ## ##           ########    ##   ##   ##     ##   ##   ##   ##    ##\n   #  ##           #######     ##   ##   ##     ##   ##   ##   ##    ##\n      /            ##          ##   ##   ##     ##   ##   ##   ##    ##\n  /##/           / ####    /   ##   ##   ##     ##   ##   ##   ##    /#\n /  ############/   ######/    ###  ###  ###    ###  ###  ###   ####/ ##\n/     #########      #####      ###  ###  ###    ###  ###  ###   ###   ##\n#\n ##\n</code></pre>\n<p>An extensible mini-language to generate mathematical notation for\nexecutable and testable Python.</p>\n<h2>Le Quick Start</h2>\n<p>Try the Demo on Binder:</p>\n<p><a href=\"https://mybinder.org/v2/gh/ben-denham/lemma/master?filepath=notebooks%2FLemmaDemo.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<p>Or get it from PyPi:</p>\n<pre><code>pip install lemma\n</code></pre>\n<p><a href=\"https://badge.fury.io/py/lemma\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f37d112c12c62ac7b9bc396e65d90243e29f52b9/68747470733a2f2f62616467652e667572792e696f2f70792f6c656d6d612e737667\"></a></p>\n<h2>Le Features</h2>\n<ul>\n<li>Define mathematical formulae that can be formatted as LaTeX and\nexecuted as functions.</li>\n<li>Check all of the steps in your equation transformations produce the\nsame results in software.</li>\n<li>Runs on Python - you can use defined formulae in your existing\nPython projects, and use Python libraries from your formulae.</li>\n<li>Fully extensible - built with Hy (a Lisp running on Python) to\nprovide powerful tools for defining your own mathematical\noperations.</li>\n</ul>\n<h2>Le Use Cases</h2>\n<ul>\n<li>Supports reproducible research by ensuring the notation in your\npaper matches the behaviour of your (testable) code.</li>\n<li>Enables developers to work through math in a more exploratory\nway. Use an equation to record the steps in your step-by-step\nalgebraic transformations, and write test-cases to check your\nworking. Then, get the LaTeX to document your work.</li>\n<li>Bridges the gap between mathematical notation and code to simplify\nteaching in domains that depend on both.</li>\n</ul>\n<h2>Le Similar Projects</h2>\n<ul>\n<li><a href=\"https://www.wolfram.com/language/\" rel=\"nofollow\">Mathematica/Wolfram Language</a>\n<ul>\n<li>The Wolfram Language has similar motivations to Lemma around\nbridging the gap between mathematical notation and executable\ncode. You can generate LaTeX from your code, but it's a\nproprietary language. Also, because Lemma is built on top of\nPython, it can work with your existing Python code and libraries.</li>\n</ul>\n</li>\n<li><a href=\"https://docs.sympy.org/latest/index.html\" rel=\"nofollow\">SymPy</a>\n<ul>\n<li>Like the Wolfram Language, SymPy is designed for symbolic\ncomputation. You can generate LaTeX from your expressions, but it\nseems that control over the notation is limited (expressions are\nautomatically simplified, and LaTeX formatting options are\ncontrolled by keyword arguments that apply to the entire\nexpression). Lemma is designed to be extensible so that you can\ndefine exactly how you want the LaTeX to be generated for your use\ncase, and so that you can provide notation for any Python code you\nlike (not just symbolic computation). A library for using SymPy's\nsymbolic computation powers from Lemma would be a good extension\nthough...</li>\n</ul>\n</li>\n<li><a href=\"https://pytexit.readthedocs.io/en/latest/\" rel=\"nofollow\">pytexit</a>\n<ul>\n<li>Translates a string of Python code to LaTeX. Limited features\nsupported, and requires managing Python code in strings.</li>\n</ul>\n</li>\n<li><a href=\"http://latexcalc.sourceforge.net/doc.php\" rel=\"nofollow\">LaTeXCalc</a>\n<ul>\n<li>Interprets and executes LaTeX math notation. Limited library of\nmath functions available.</li>\n</ul>\n</li>\n</ul>\n<h2>Le TODO</h2>\n<ul>\n<li>Complete <code>algebra.hy</code></li>\n<li>Improve precedence numbering.</li>\n<li>Commenting and some refactoring</li>\n<li>Generate docstrings</li>\n<li>Examples with pdoc3 and pytest</li>\n<li>Documentation (tutorial, API reference)</li>\n</ul>\n<h2>Le Dev Environment</h2>\n<h3>Dependencies</h3>\n<p>In order to run this project, you must have the following dependencies\ninstalled on your host:</p>\n<ul>\n<li><a href=\"https://docs.docker.com/get-docker/\" rel=\"nofollow\">Docker Community Edition</a> (&gt;= 17.09)</li>\n<li><a href=\"https://docs.docker.com/compose/install/\" rel=\"nofollow\">Docker Compose</a> (&gt;= 1.17)\n(Included with Docker Desktop on Mac/Windows)</li>\n<li><a href=\"https://www.gnu.org/software/make/\" rel=\"nofollow\">Make</a> (technically optional if\nyou don't mind running the commands in the Makefile directly)</li>\n</ul>\n<p><strong>Note:</strong> If you use <a href=\"https://git-scm.com/downloads\" rel=\"nofollow\">Git bash</a> on\nWindows and also\n<a href=\"https://gist.github.com/evanwill/0207876c3243bbb6863e65ec5dc3f058\" rel=\"nofollow\">install <code>make</code></a>\ninto Git bash, then you should be able to run this project on Windows.</p>\n<h2>Basic Usage</h2>\n<ol>\n<li>Run <code>make run</code> in this directory.\n<ul>\n<li>This will perform all Docker image build steps and dependency\ninstallations every time you run it, so that you can never forget\nto rebuild. The first time you run this, it make take some time\nfor the base Docker image and other dependencies to be\ndownloaded.</li>\n</ul>\n</li>\n<li>Browse to <a href=\"http://localhost:7777\" rel=\"nofollow\">http://localhost:7777</a> and enter the token displayed in\nthe terminal (or just follow the link in the terminal).</li>\n<li>Work in Python notebooks, with the ability to import code from your\nthe lemma module.</li>\n</ol>\n<h3>Linting</h3>\n<p>You can run <a href=\"http://flake8.pycqa.org/en/latest/\" rel=\"nofollow\">flake8</a> linting on\nyour modules with: <code>make lint</code>.</p>\n<h3>Testing</h3>\n<p>You can run <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a> unit tests\nlinting contained in your modules with: <code>make test</code>.</p>\n<p>An HTML code-coverage reported will be generated for each module at:\n<code>&lt;module-dir&gt;/test/coverage/index.html</code>.</p>\n\n          </div>"}, "last_serial": 7007182, "releases": {"0.1.dev0": [{"comment_text": "", "digests": {"md5": "980d5a64ef97ef902d9ebf560baa75f6", "sha256": "92825a605e1a9f727eeb4cf40887c1c74c466fe12d441ebfb795cb7a7ef497f3"}, "downloads": -1, "filename": "lemma-0.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "980d5a64ef97ef902d9ebf560baa75f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27696, "upload_time": "2020-04-13T01:54:17", "upload_time_iso_8601": "2020-04-13T01:54:17.376217Z", "url": "https://files.pythonhosted.org/packages/02/dd/4091e57116e28f8f38fd356ce177210a743a043ab23a0285d1b707fc8b7c/lemma-0.1.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89ae6acd0adac887847e897d7b5adfaf", "sha256": "273184ab4bc8cfa299a295c40f9530b27bd3bc4d7e9017db4f66038f562f7ffc"}, "downloads": -1, "filename": "lemma-0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "89ae6acd0adac887847e897d7b5adfaf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26905, "upload_time": "2020-04-13T01:54:19", "upload_time_iso_8601": "2020-04-13T01:54:19.647521Z", "url": "https://files.pythonhosted.org/packages/5f/e9/8092f4713eb8d3d0e220b5a486bf276832a958f9ca3715f6bb92b8d46990/lemma-0.1.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "980d5a64ef97ef902d9ebf560baa75f6", "sha256": "92825a605e1a9f727eeb4cf40887c1c74c466fe12d441ebfb795cb7a7ef497f3"}, "downloads": -1, "filename": "lemma-0.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "980d5a64ef97ef902d9ebf560baa75f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27696, "upload_time": "2020-04-13T01:54:17", "upload_time_iso_8601": "2020-04-13T01:54:17.376217Z", "url": "https://files.pythonhosted.org/packages/02/dd/4091e57116e28f8f38fd356ce177210a743a043ab23a0285d1b707fc8b7c/lemma-0.1.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89ae6acd0adac887847e897d7b5adfaf", "sha256": "273184ab4bc8cfa299a295c40f9530b27bd3bc4d7e9017db4f66038f562f7ffc"}, "downloads": -1, "filename": "lemma-0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "89ae6acd0adac887847e897d7b5adfaf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26905, "upload_time": "2020-04-13T01:54:19", "upload_time_iso_8601": "2020-04-13T01:54:19.647521Z", "url": "https://files.pythonhosted.org/packages/5f/e9/8092f4713eb8d3d0e220b5a486bf276832a958f9ca3715f6bb92b8d46990/lemma-0.1.dev0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:04 2020"}