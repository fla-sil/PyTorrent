{"info": {"author": "Werner Robitza", "author_email": "werner.robitza@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Multimedia :: Video"], "description": "``ffmpeg_debug_qp``\n===================\n\n|Build status|\n\nAuthors: Werner Robitza, Steve G\u00f6ring, Pierre Lebreton, Nathan Trevivian\n\nSynopsis: Prints QP values of input sequence on a per-frame,\nper-macroblock basis to STDERR.\n\n-  `Requirements <requirements>`__\n\n   -  `UNIX platform <unix_platform>`__\n   -  `Windows platform <windows_platform>`__\n   -  `Supported scenarios <supported_scenarios>`__\n\n-  `Building <building>`__\n\n   -  `UNIX platform <unix_platform>`__\n   -  `Windows platform <windows_platform>`__\n\n-  `Usage <usage>`__\n-  `Acknowledgement <acknowledgement>`__\n-  `License <license>`__\n\nRequirements\n============\n\nYou need Python 3 and the ``ffmpeg_debug_qp`` binary, which you have to\nbuild yourself.\n\nFor Windows, you can use the pre-built binary for the master branch,\nwhich can be found here:\nhttps://ci.appveyor.com/api/projects/slhck/ffmpeg-debug-qp/artifacts/build.zip).\nAlso download the DLL files from ``build/dll.zip`` and unzip them.\n\nUNIX platform\n-------------\n\nFor building:\n\n-  libavdevice, libavformat, libavfilter, libavcodec, libswresample,\n   libswscale, libavutil\n-  C compiler\n\nFor example on Ubuntu:\n\n::\n\n   sudo apt update && apt install libavdevice-dev libavformat-dev libavfilter-dev libavcodec-dev libswresample-dev libswscale-dev libavutil-dev build-essential pkg-config\n\nWindows platform\n----------------\n\nFor building:\n\n-  Visual Studio >= 2015 with C/C++ compiler installed with 64 bit\n   support\n-  Depending libraries (FFmpeg) are provided along the project,\n   therefore no extra libraries are needed.\n\nSupported scenarios\n===================\n\nSupported input:\n\n-  MPEG-2\n-  MPEG-4 Part 2\n-  H.264 / MPEG-4 Part 10 (AVC)\n\nSupported formats:\n\n-  MPEG-4 Part 14\n-  H.264 Annex B bytestreams\n\nBuilding\n========\n\n.. _unix-platform-1:\n\nUNIX platform\n-------------\n\nRun the command ``make``.\n\n.. _windows-platform-1:\n\nWindows platform\n----------------\n\n-  Open the solution file \u201cffmpeg-debug-qp.sln\u201d which can be found in\n   ``build\\ffmpeg-debug-qp\\``\n-  Make sure to compile in release mode (See the dropdown on the top\n   menu bar. This is not necessary per-se, but beneficial for speed at\n   runtime)\n-  Build the tool ctrl+shift+B\n-  The binary will be available in ``build\\bin\\``, required DLL files\n   can be found in the 7zip archive which can be found in\n   ``build\\bin.7z``\n-  Copy DLL and binary to the root of the folder ``ffmpeg-debug-qp`` so\n   depending scripts such as ``parse-qp-output.py`` can find the binary.\n\nUsage\n=====\n\nThe main tool is a python library that first calls to ffmpeg-debug-qp\nand then parses and outputs the results.\n\nYou can run the library directly via\n``python3 -m ffmpeg_debug_qp_parser``, or install it with ``pip``:\n\n::\n\n   pip3 install --user ffmpeg_debug_qp_parser\n\nThe tool options are as follows:\n\n::\n\n   usage: __main__.py [-h] [-f] [-of OUTPUT_FORMAT] [-p PATH_TO_TOOL] [-l | -k]\n                      [-m | -a]\n                      video|logfile output\n\n   Parse QP values from ffmpeg-debug-qp\n\n   positional arguments:\n     video|logfile         Video file to generate output for, or existing logfile\n     output                Output file\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     -f, --force           Overwrite output\n     -of OUTPUT_FORMAT, --output-format OUTPUT_FORMAT\n                           Output format, one of: ld-json (default), json or csv\n     -p PATH_TO_TOOL, --path-to-tool PATH_TO_TOOL\n                           Path to ffmpeg-debug-qp (defaults to /usr/local/bin/)\n     -l, --use-logfile     Use precalculated logfile instead of the video\n     -k, --keep-logfile    Don't remove the temporary logfile 'video.debug'\n     -m, --include-macroblock-data\n                           Include macroblock-level data, such as: type,\n                           interlaced and segmentation\n     -a, --compute-averages-only\n                           Only compute the frame-average QPs\n\nExample\n-------\n\nTo run a basic example:\n\n::\n\n   ffmpeg_debug_qp_parser input.mp4 output_file.json -m -of json\n\nThis reads the file ``input.mp4`` and produces a JSON file\n``output_file.json``, with a list of frames and each of their\nmacroblocks in the format:\n\n::\n\n     [\n         {\n             \"frameType\": \"I\",\n             \"frameSize\": 7787,\n             \"qpAvg\": 26.87280701754386,\n             \"qpValues\": [\n                 {\n                     \"qp\": 25,\n                     \"type\": \"i\",\n                     \"segmentation\": \"\",\n                     \"interlaced\": \"\"\n                 },\n                 {\n                     \"qp\": 26,\n                     \"type\": \"i\",\n                     \"segmentation\": \"\",\n                     \"interlaced\": \"\"\n                 }, ...\n\nThe frame and macroblock types are as per ffmpeg debug information. Same\ngoes for segmentation and interlaced values.\n\nFor example outputs, see:\n\n-  Line-delimited JSON\n\n   -  `Averages only <examples/example-avgs.ldjson>`__\n   -  `Macroblock data <examples/example-mbdata.ldjson>`__\n\n-  JSON\n\n   -  `Averages only <examples/example-avgs.json>`__\n   -  `Macroblock data <examples/example-mbdata.json>`__\n\n-  CSV\n\n   -  `Averages only <examples/example-avgs.csv>`__\n   -  `Macroblock data <examples/example-mbdata.csv>`__\n\nAcknowledgement\n===============\n\nThis code is based on:\n\n-  the code from `Fredrik\n   Pihl <https://gist.github.com/figgis/ea9ac513cdd99a10abf1>`__\n-  which is adapted from the code example ``demuxing_decoding.c`` by\n   Stefano Sabatini\n\nSee also `this\nthread <https://ffmpeg.org/pipermail/libav-user/2015-May/008122.html>`__\non the libav-user mailing list.\n\nTest video part of Big Buck Bunny (c) copyright 2008, Blender Foundation\n/ www.bigbuckbunny.org\n\nLicense\n=======\n\nMIT License\n\nCopyright (c) 2016-2020 Werner Robitza, Steve G\u00f6ring, Fredrik Pihl,\nStefano Sabatini, Nathan Trevivian\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nFFmpeg libraries are licensed under the GNU Lesser General Public\nLicense, version 2.1.\n\n.. |Build status| image:: https://ci.appveyor.com/api/projects/status/u4w9c6bas9bblbqw/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/slhck/ffmpeg-debug-qp/branch/master\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/slhck/ffmpeg-debug-qp", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ffmpeg-debug-qp-parser", "package_url": "https://pypi.org/project/ffmpeg-debug-qp-parser/", "platform": "", "project_url": "https://pypi.org/project/ffmpeg-debug-qp-parser/", "project_urls": {"Homepage": "https://github.com/slhck/ffmpeg-debug-qp"}, "release_url": "https://pypi.org/project/ffmpeg-debug-qp-parser/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Extract QP values of input video", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ffmpeg-debug-qp\">\n<h2><tt>ffmpeg_debug_qp</tt></h2>\n<p><a href=\"https://ci.appveyor.com/project/slhck/ffmpeg-debug-qp/branch/master\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c3fb78e6d39d60658acd5a4b76e86b2ed9cbcee/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7534773963366261733962626c6271772f6272616e63682f6d61737465723f7376673d74727565\"></a></p>\n<p>Authors: Werner Robitza, Steve G\u00f6ring, Pierre Lebreton, Nathan Trevivian</p>\n<p>Synopsis: Prints QP values of input sequence on a per-frame,\nper-macroblock basis to STDERR.</p>\n<ul>\n<li><a href=\"requirements\" rel=\"nofollow\">Requirements</a><ul>\n<li><a href=\"unix_platform\" rel=\"nofollow\">UNIX platform</a></li>\n<li><a href=\"windows_platform\" rel=\"nofollow\">Windows platform</a></li>\n<li><a href=\"supported_scenarios\" rel=\"nofollow\">Supported scenarios</a></li>\n</ul>\n</li>\n<li><a href=\"building\" rel=\"nofollow\">Building</a><ul>\n<li><a href=\"unix_platform\" rel=\"nofollow\">UNIX platform</a></li>\n<li><a href=\"windows_platform\" rel=\"nofollow\">Windows platform</a></li>\n</ul>\n</li>\n<li><a href=\"usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"acknowledgement\" rel=\"nofollow\">Acknowledgement</a></li>\n<li><a href=\"license\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>You need Python 3 and the <tt>ffmpeg_debug_qp</tt> binary, which you have to\nbuild yourself.</p>\n<p>For Windows, you can use the pre-built binary for the master branch,\nwhich can be found here:\n<a href=\"https://ci.appveyor.com/api/projects/slhck/ffmpeg-debug-qp/artifacts/build.zip\" rel=\"nofollow\">https://ci.appveyor.com/api/projects/slhck/ffmpeg-debug-qp/artifacts/build.zip</a>).\nAlso download the DLL files from <tt>build/dll.zip</tt> and unzip them.</p>\n<div id=\"unix-platform\">\n<h3>UNIX platform</h3>\n<p>For building:</p>\n<ul>\n<li>libavdevice, libavformat, libavfilter, libavcodec, libswresample,\nlibswscale, libavutil</li>\n<li>C compiler</li>\n</ul>\n<p>For example on Ubuntu:</p>\n<pre>sudo apt update &amp;&amp; apt install libavdevice-dev libavformat-dev libavfilter-dev libavcodec-dev libswresample-dev libswscale-dev libavutil-dev build-essential pkg-config\n</pre>\n</div>\n<div id=\"windows-platform\">\n<h3>Windows platform</h3>\n<p>For building:</p>\n<ul>\n<li>Visual Studio &gt;= 2015 with C/C++ compiler installed with 64 bit\nsupport</li>\n<li>Depending libraries (FFmpeg) are provided along the project,\ntherefore no extra libraries are needed.</li>\n</ul>\n</div>\n</div>\n<div id=\"supported-scenarios\">\n<h2>Supported scenarios</h2>\n<p>Supported input:</p>\n<ul>\n<li>MPEG-2</li>\n<li>MPEG-4 Part 2</li>\n<li>H.264 / MPEG-4 Part 10 (AVC)</li>\n</ul>\n<p>Supported formats:</p>\n<ul>\n<li>MPEG-4 Part 14</li>\n<li>H.264 Annex B bytestreams</li>\n</ul>\n</div>\n<div id=\"building\">\n<h2>Building</h2>\n<div id=\"id1\">\n<span id=\"unix-platform-1\"></span><h3>UNIX platform</h3>\n<p>Run the command <tt>make</tt>.</p>\n</div>\n<div id=\"id2\">\n<span id=\"windows-platform-1\"></span><h3>Windows platform</h3>\n<ul>\n<li>Open the solution file \u201cffmpeg-debug-qp.sln\u201d which can be found in\n<tt><span class=\"pre\">build\\ffmpeg-debug-qp\\</span></tt></li>\n<li>Make sure to compile in release mode (See the dropdown on the top\nmenu bar. This is not necessary per-se, but beneficial for speed at\nruntime)</li>\n<li>Build the tool ctrl+shift+B</li>\n<li>The binary will be available in <tt>build\\bin\\</tt>, required DLL files\ncan be found in the 7zip archive which can be found in\n<tt>build\\bin.7z</tt></li>\n<li>Copy DLL and binary to the root of the folder <tt><span class=\"pre\">ffmpeg-debug-qp</span></tt> so\ndepending scripts such as <tt><span class=\"pre\">parse-qp-output.py</span></tt> can find the binary.</li>\n</ul>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The main tool is a python library that first calls to ffmpeg-debug-qp\nand then parses and outputs the results.</p>\n<p>You can run the library directly via\n<tt>python3 <span class=\"pre\">-m</span> ffmpeg_debug_qp_parser</tt>, or install it with <tt>pip</tt>:</p>\n<pre>pip3 install --user ffmpeg_debug_qp_parser\n</pre>\n<p>The tool options are as follows:</p>\n<pre>usage: __main__.py [-h] [-f] [-of OUTPUT_FORMAT] [-p PATH_TO_TOOL] [-l | -k]\n                   [-m | -a]\n                   video|logfile output\n\nParse QP values from ffmpeg-debug-qp\n\npositional arguments:\n  video|logfile         Video file to generate output for, or existing logfile\n  output                Output file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f, --force           Overwrite output\n  -of OUTPUT_FORMAT, --output-format OUTPUT_FORMAT\n                        Output format, one of: ld-json (default), json or csv\n  -p PATH_TO_TOOL, --path-to-tool PATH_TO_TOOL\n                        Path to ffmpeg-debug-qp (defaults to /usr/local/bin/)\n  -l, --use-logfile     Use precalculated logfile instead of the video\n  -k, --keep-logfile    Don't remove the temporary logfile 'video.debug'\n  -m, --include-macroblock-data\n                        Include macroblock-level data, such as: type,\n                        interlaced and segmentation\n  -a, --compute-averages-only\n                        Only compute the frame-average QPs\n</pre>\n<div id=\"example\">\n<h3>Example</h3>\n<p>To run a basic example:</p>\n<pre>ffmpeg_debug_qp_parser input.mp4 output_file.json -m -of json\n</pre>\n<p>This reads the file <tt>input.mp4</tt> and produces a JSON file\n<tt>output_file.json</tt>, with a list of frames and each of their\nmacroblocks in the format:</p>\n<pre>[\n    {\n        \"frameType\": \"I\",\n        \"frameSize\": 7787,\n        \"qpAvg\": 26.87280701754386,\n        \"qpValues\": [\n            {\n                \"qp\": 25,\n                \"type\": \"i\",\n                \"segmentation\": \"\",\n                \"interlaced\": \"\"\n            },\n            {\n                \"qp\": 26,\n                \"type\": \"i\",\n                \"segmentation\": \"\",\n                \"interlaced\": \"\"\n            }, ...\n</pre>\n<p>The frame and macroblock types are as per ffmpeg debug information. Same\ngoes for segmentation and interlaced values.</p>\n<p>For example outputs, see:</p>\n<ul>\n<li>Line-delimited JSON<ul>\n<li><a href=\"examples/example-avgs.ldjson\" rel=\"nofollow\">Averages only</a></li>\n<li><a href=\"examples/example-mbdata.ldjson\" rel=\"nofollow\">Macroblock data</a></li>\n</ul>\n</li>\n<li>JSON<ul>\n<li><a href=\"examples/example-avgs.json\" rel=\"nofollow\">Averages only</a></li>\n<li><a href=\"examples/example-mbdata.json\" rel=\"nofollow\">Macroblock data</a></li>\n</ul>\n</li>\n<li>CSV<ul>\n<li><a href=\"examples/example-avgs.csv\" rel=\"nofollow\">Averages only</a></li>\n<li><a href=\"examples/example-mbdata.csv\" rel=\"nofollow\">Macroblock data</a></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"acknowledgement\">\n<h2>Acknowledgement</h2>\n<p>This code is based on:</p>\n<ul>\n<li>the code from <a href=\"https://gist.github.com/figgis/ea9ac513cdd99a10abf1\" rel=\"nofollow\">Fredrik\nPihl</a></li>\n<li>which is adapted from the code example <tt>demuxing_decoding.c</tt> by\nStefano Sabatini</li>\n</ul>\n<p>See also <a href=\"https://ffmpeg.org/pipermail/libav-user/2015-May/008122.html\" rel=\"nofollow\">this\nthread</a>\non the libav-user mailing list.</p>\n<p>Test video part of Big Buck Bunny (c) copyright 2008, Blender Foundation\n/ www.bigbuckbunny.org</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT License</p>\n<p>Copyright (c) 2016-2020 Werner Robitza, Steve G\u00f6ring, Fredrik Pihl,\nStefano Sabatini, Nathan Trevivian</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n<p>FFmpeg libraries are licensed under the GNU Lesser General Public\nLicense, version 2.1.</p>\n</div>\n\n          </div>"}, "last_serial": 6816041, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "017627764a1da5b4f2f0de514995e130", "sha256": "848c9799807695182bc61161e2917c4cf90778979915b6a57b023155cabfcd27"}, "downloads": -1, "filename": "ffmpeg_debug_qp_parser-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "017627764a1da5b4f2f0de514995e130", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 626078, "upload_time": "2020-03-15T15:52:26", "upload_time_iso_8601": "2020-03-15T15:52:26.217850Z", "url": "https://files.pythonhosted.org/packages/45/17/bc292968eefe15db41b8b15df21a8d9078b85128630443457a7fb4b4e79d/ffmpeg_debug_qp_parser-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00b8900cd37d2df872fd88b6527bb206", "sha256": "e16d220240221690b76f4b84842e7f89a9c777ebc2870f6454af0d30e2416b92"}, "downloads": -1, "filename": "ffmpeg_debug_qp_parser-0.1.1.tar.gz", "has_sig": false, "md5_digest": "00b8900cd37d2df872fd88b6527bb206", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11452, "upload_time": "2020-03-15T15:52:29", "upload_time_iso_8601": "2020-03-15T15:52:29.190781Z", "url": "https://files.pythonhosted.org/packages/b8/f8/e845db29e6765cc6213251e5b12064fc7404eff30a323aacba374f17d64e/ffmpeg_debug_qp_parser-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "017627764a1da5b4f2f0de514995e130", "sha256": "848c9799807695182bc61161e2917c4cf90778979915b6a57b023155cabfcd27"}, "downloads": -1, "filename": "ffmpeg_debug_qp_parser-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "017627764a1da5b4f2f0de514995e130", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 626078, "upload_time": "2020-03-15T15:52:26", "upload_time_iso_8601": "2020-03-15T15:52:26.217850Z", "url": "https://files.pythonhosted.org/packages/45/17/bc292968eefe15db41b8b15df21a8d9078b85128630443457a7fb4b4e79d/ffmpeg_debug_qp_parser-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00b8900cd37d2df872fd88b6527bb206", "sha256": "e16d220240221690b76f4b84842e7f89a9c777ebc2870f6454af0d30e2416b92"}, "downloads": -1, "filename": "ffmpeg_debug_qp_parser-0.1.1.tar.gz", "has_sig": false, "md5_digest": "00b8900cd37d2df872fd88b6527bb206", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11452, "upload_time": "2020-03-15T15:52:29", "upload_time_iso_8601": "2020-03-15T15:52:29.190781Z", "url": "https://files.pythonhosted.org/packages/b8/f8/e845db29e6765cc6213251e5b12064fc7404eff30a323aacba374f17d64e/ffmpeg_debug_qp_parser-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:48 2020"}