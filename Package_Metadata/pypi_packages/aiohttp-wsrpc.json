{"info": {"author": "Dmitry Orlov <me@mosquito.su>", "author_email": "me@mosquito.su", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Programming Language :: Python"], "description": "WSRPC Tornado\n=============\n\n.. image:: https://travis-ci.org/mosquito/wsrpc.svg\n    :target: https://travis-ci.org/mosquito/wsrpc\n\nRemote Procedure call through WebSocket between browser and tornado.\n\nFeatures\n--------\n\n* Initiating call client function from server side.\n* Calling the server method from the client.\n* Transferring any exceptions from a client side to the server side and vise versa.\n* The frontend-library are well done for usage without any modification.\n* Fully asynchronous server-side functions.\n* Thread-based websocket handler for writing fully-synchronous code (for synchronous database drivers etc.)\n* Protected server-side methods (starts with underline never will be call from clients-side directly)\n* Asynchronous connection protocol. Server or client can call multiple methods with unpredictable ordering of answers.\n\n\nInstallation\n------------\n\nInstall via pip::\n\n    pip install wsrpc-tornado\n\n\nInstall ujson if you want::\n\n    pip install ujson\n\n\n\nSimple usage\n------------\n\nAdd the backend side\n\n\n.. code-block:: python\n\n    from time import time\n    ## If you want write async tornado code import it\n    # from from wsrpc import WebSocketRoute, WebSocket, wsrpc_static\n    ## else you should use thread-base handler\n    from wsrpc import WebSocketRoute, WebSocketThreaded as WebSocket, wsrpc_static\n\n    tornado.web.Application((\n        # js static files will available as \"/js/wsrpc.min.js\".\n        wsrpc_static(r'/js/(.*)'),\n        # WebSocket handler. Client will connect here.\n        (r\"/ws/\", WebSocket),\n        # Serve other static files\n        (r'/(.*)', tornado.web.StaticFileHandler, {\n             'path': os.path.join(project_root, 'static'),\n             'default_filename': 'index.html'\n        }),\n    ))\n\n    # This class should be call by client.\n    # Connection object will be have the instance of this class when will call route-alias.\n    class TestRoute(WebSocketRoute):\n        # This method will be executed when client will call route-alias first time.\n        def init(self, **kwargs):\n            # the python __init__ must be return \"self\". This method might return anything.\n            return kwargs\n\n        def getEpoch(self):\n            # this method named by camelCase because the client can call it.\n            return time()\n\n    # stateful request\n    # this is the route alias TestRoute as \"test1\"\n    WebSocket.ROUTES['test1'] = TestRoute\n\n    # stateless request\n    WebSocket.ROUTES['test2'] = lambda *a, **kw: True\n\n    # initialize ThreadPool. Needed when using WebSocketThreaded.\n    WebSocket.init_pool()\n\n\n\nAdd the frontend side\n\n\n.. code-block:: HTML\n\n    <script type=\"text/javascript\" src=\"/js/q.min.js\"></script>\n    <script type=\"text/javascript\" src=\"/js/wsrpc.min.js\"></script>\n    <script>\n        var url = window.location.protocol===\"https:\"?\"wss://\":\"ws://\" + window.location.host + '/ws/';\n        RPC = WSRPC(url, 5000);\n        RPC.addRoute('test', function (data) { return \"Test called\"; });\n        RPC.connect();\n\n        RPC.call('test1.getEpoch').then(function (data) {\n            console.log(data);\n        }, function (error) {\n            alert(error);\n        }).done();\n\n        RPC.call('test2').then(function (data) { console.log(data); }).done();\n    </script>\n\n\n\nExample\n+++++++\n\nExample running there demo_.\n\n\n.. _demo: http://wsrpc.mosquito.su/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aiohttp_wsrpc/aiohttp_wsrpc-tornado", "keywords": null, "license": "LGPLv3", "maintainer": null, "maintainer_email": null, "name": "aiohttp-wsrpc", "package_url": "https://pypi.org/project/aiohttp-wsrpc/", "platform": "all", "project_url": "https://pypi.org/project/aiohttp-wsrpc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/aiohttp_wsrpc/aiohttp_wsrpc-tornado"}, "release_url": "https://pypi.org/project/aiohttp-wsrpc/0.5.3/", "requires_dist": null, "requires_python": null, "summary": "WSRPC WebSocket RPC for tornado", "version": "0.5.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/mosquito/wsrpc\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/mosquito/wsrpc.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5f40c9b9e48ad4b2fe73bf6aedf3d086505eb14/68747470733a2f2f7472617669732d63692e6f72672f6d6f73717569746f2f77737270632e737667\"></a>\n<p>Remote Procedure call through WebSocket between browser and tornado.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Initiating call client function from server side.</li>\n<li>Calling the server method from the client.</li>\n<li>Transferring any exceptions from a client side to the server side and vise versa.</li>\n<li>The frontend-library are well done for usage without any modification.</li>\n<li>Fully asynchronous server-side functions.</li>\n<li>Thread-based websocket handler for writing fully-synchronous code (for synchronous database drivers etc.)</li>\n<li>Protected server-side methods (starts with underline never will be call from clients-side directly)</li>\n<li>Asynchronous connection protocol. Server or client can call multiple methods with unpredictable ordering of answers.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install via pip:</p>\n<pre>pip install wsrpc-tornado\n</pre>\n<p>Install ujson if you want:</p>\n<pre>pip install ujson\n</pre>\n</div>\n<div id=\"simple-usage\">\n<h2>Simple usage</h2>\n<p>Add the backend side</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n<span class=\"c1\">## If you want write async tornado code import it</span>\n<span class=\"c1\"># from from wsrpc import WebSocketRoute, WebSocket, wsrpc_static</span>\n<span class=\"c1\">## else you should use thread-base handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wsrpc</span> <span class=\"kn\">import</span> <span class=\"n\">WebSocketRoute</span><span class=\"p\">,</span> <span class=\"n\">WebSocketThreaded</span> <span class=\"k\">as</span> <span class=\"n\">WebSocket</span><span class=\"p\">,</span> <span class=\"n\">wsrpc_static</span>\n\n<span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">((</span>\n    <span class=\"c1\"># js static files will available as \"/js/wsrpc.min.js\".</span>\n    <span class=\"n\">wsrpc_static</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'/js/(.*)'</span><span class=\"p\">),</span>\n    <span class=\"c1\"># WebSocket handler. Client will connect here.</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"/ws/\"</span><span class=\"p\">,</span> <span class=\"n\">WebSocket</span><span class=\"p\">),</span>\n    <span class=\"c1\"># Serve other static files</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'/(.*)'</span><span class=\"p\">,</span> <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">StaticFileHandler</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n         <span class=\"s1\">'path'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">project_root</span><span class=\"p\">,</span> <span class=\"s1\">'static'</span><span class=\"p\">),</span>\n         <span class=\"s1\">'default_filename'</span><span class=\"p\">:</span> <span class=\"s1\">'index.html'</span>\n    <span class=\"p\">}),</span>\n<span class=\"p\">))</span>\n\n<span class=\"c1\"># This class should be call by client.</span>\n<span class=\"c1\"># Connection object will be have the instance of this class when will call route-alias.</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestRoute</span><span class=\"p\">(</span><span class=\"n\">WebSocketRoute</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This method will be executed when client will call route-alias first time.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># the python __init__ must be return \"self\". This method might return anything.</span>\n        <span class=\"k\">return</span> <span class=\"n\">kwargs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">getEpoch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># this method named by camelCase because the client can call it.</span>\n        <span class=\"k\">return</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># stateful request</span>\n<span class=\"c1\"># this is the route alias TestRoute as \"test1\"</span>\n<span class=\"n\">WebSocket</span><span class=\"o\">.</span><span class=\"n\">ROUTES</span><span class=\"p\">[</span><span class=\"s1\">'test1'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">TestRoute</span>\n\n<span class=\"c1\"># stateless request</span>\n<span class=\"n\">WebSocket</span><span class=\"o\">.</span><span class=\"n\">ROUTES</span><span class=\"p\">[</span><span class=\"s1\">'test2'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># initialize ThreadPool. Needed when using WebSocketThreaded.</span>\n<span class=\"n\">WebSocket</span><span class=\"o\">.</span><span class=\"n\">init_pool</span><span class=\"p\">()</span>\n</pre>\n<p>Add the frontend side</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"/js/q.min.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"/js/wsrpc.min.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">protocol</span><span class=\"o\">===</span><span class=\"s2\">\"https:\"</span><span class=\"o\">?</span><span class=\"s2\">\"wss://\"</span><span class=\"o\">:</span><span class=\"s2\">\"ws://\"</span> <span class=\"o\">+</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">host</span> <span class=\"o\">+</span> <span class=\"s1\">'/ws/'</span><span class=\"p\">;</span>\n    <span class=\"nx\">RPC</span> <span class=\"o\">=</span> <span class=\"nx\">WSRPC</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">);</span>\n    <span class=\"nx\">RPC</span><span class=\"p\">.</span><span class=\"nx\">addRoute</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"s2\">\"Test called\"</span><span class=\"p\">;</span> <span class=\"p\">});</span>\n    <span class=\"nx\">RPC</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">RPC</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"s1\">'test1.getEpoch'</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n    <span class=\"p\">}).</span><span class=\"nx\">done</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">RPC</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"s1\">'test2'</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span> <span class=\"p\">}).</span><span class=\"nx\">done</span><span class=\"p\">();</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<div id=\"example\">\n<h3>Example</h3>\n<p>Example running there <a href=\"http://wsrpc.mosquito.su/\" rel=\"nofollow\">demo</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2323401, "releases": {"0.5.3": []}, "urls": [], "timestamp": "Thu May  7 16:21:13 2020"}