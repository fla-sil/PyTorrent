{"info": {"author": "Jaka Hudoklin", "author_email": "jakahudoklin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License (GPL)", "Topic :: Utilities"], "description": "ROCKETEER - Advanced app launcher and manager\n=============================================\n\nDescription\n-----------\nRocketeer is very smart remote process launcher, watchdog and manager. It has abilty to start user commands from templates, to which you can pass parameters, to controle those processes and parse statuses. The main power is remote xml-rpc interface.\n\nInstallation\n-----------\nThis app works with python2.7, i didn't test with other python versions.\n\n- Install newest stable ffmpeg from git with whatever support you want.\n- Install liblirc if you want to control streams with your remote.\n- python setup.py install\n\nUsage:\n------\nThere are two cli commands(add --help for more info):\n\n- pstream3d - xml-rpc app server.\n- pstream3_client - command line client for server.\n- pstream3_client_lirc - lirc client for server.\n\nAPI:\n----\nInterface is xml-rpc on whatever port and host you set to daemon.\n\nYou can access it on url \"http://host:port/\"\n\nFirst you should create app from list of avalible apps. You can get list of avalible apps with **GetApps**. \nThen you can create app using **CreateApp** and it will return instance id of newly created app. \nYou can get all app instances using **GetAppInstances**. \nYou can destroy instance using **DestroyInstance** or to destroy all instances, call **DestroyInstances**.\n\nIf you want to know more open server.py.\n\nYou can access any instance you created on uri \"http://host:port/instance_id/\".\nYou can get app status using **GetAppStatus**, which returns list of status vars, like fps, time,... \nYou can get app run status you can call **GetAppRunStatus**, which returns 0 for stopped, 1 for running, 2 for error, 3 for ended and 4 for unknown. \nOf course you can start app using **StartApp** and stop using **StopApp**. \nTo get app value call **GetAppValue** and to set one call **SetAppValue**. \nThe only usefull value right now is auto_restart set to one. \nThis values gets also passed to templates.\n\nif you want to know more open app.py\n\nHow to create new app template:\n------------------------------------\nGo to templates folder and you can see sample_template.py and sample_template.tpl. In your py file you define what varibales get passed to template, and in tpl file is template. It is based on mustache templating engine. You must remember that __init__ function of template gets values you set using SetAppValue as key value.\n\nYou must also register your newly created app in server.py, using RegisterApp.\n\nTODO:\n-----\n- Add documentation\n- Add logging\n\nLicense:\n--------\nRocketeer is Copyright (C) 2011 Jaka Hudoklin.\n\nRocketeer is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.\n\nRocketeer is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/offlinehacker/rocketeer", "keywords": "process launcher remote ffmpeg", "license": "GNU", "maintainer": null, "maintainer_email": null, "name": "rocketeer", "package_url": "https://pypi.org/project/rocketeer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rocketeer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/offlinehacker/rocketeer"}, "release_url": "https://pypi.org/project/rocketeer/0.2/", "requires_dist": null, "requires_python": null, "summary": "Advanced remote process launcher, watchdog and manager.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            ROCKETEER - Advanced app launcher and manager<br>=============================================<br><br>Description<br>-----------<br>Rocketeer is very smart remote process launcher, watchdog and manager. It has abilty to start user commands from templates, to which you can pass parameters, to controle those processes and parse statuses. The main power is remote xml-rpc interface.<br><br>Installation<br>-----------<br>This app works with python2.7, i didn't test with other python versions.<br><br>- Install newest stable ffmpeg from git with whatever support you want.<br>- Install liblirc if you want to control streams with your remote.<br>- python setup.py install<br><br>Usage:<br>------<br>There are two cli commands(add --help for more info):<br><br>- pstream3d - xml-rpc app server.<br>- pstream3_client - command line client for server.<br>- pstream3_client_lirc - lirc client for server.<br><br>API:<br>----<br>Interface is xml-rpc on whatever port and host you set to daemon.<br><br>You can access it on url \"http://host:port/\"<br><br>First you should create app from list of avalible apps. You can get list of avalible apps with **GetApps**. <br>Then you can create app using **CreateApp** and it will return instance id of newly created app. <br>You can get all app instances using **GetAppInstances**. <br>You can destroy instance using **DestroyInstance** or to destroy all instances, call **DestroyInstances**.<br><br>If you want to know more open server.py.<br><br>You can access any instance you created on uri \"http://host:port/instance_id/\".<br>You can get app status using **GetAppStatus**, which returns list of status vars, like fps, time,... <br>You can get app run status you can call **GetAppRunStatus**, which returns 0 for stopped, 1 for running, 2 for error, 3 for ended and 4 for unknown. <br>Of course you can start app using **StartApp** and stop using **StopApp**. <br>To get app value call **GetAppValue** and to set one call **SetAppValue**. <br>The only usefull value right now is auto_restart set to one. <br>This values gets also passed to templates.<br><br>if you want to know more open app.py<br><br>How to create new app template:<br>------------------------------------<br>Go to templates folder and you can see sample_template.py and sample_template.tpl. In your py file you define what varibales get passed to template, and in tpl file is template. It is based on mustache templating engine. You must remember that __init__ function of template gets values you set using SetAppValue as key value.<br><br>You must also register your newly created app in server.py, using RegisterApp.<br><br>TODO:<br>-----<br>- Add documentation<br>- Add logging<br><br>License:<br>--------<br>Rocketeer is Copyright (C) 2011 Jaka Hudoklin.<br><br>Rocketeer is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation.<br><br>Rocketeer is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.<br><br>You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n          </div>"}, "last_serial": 799009, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "87f2c9d249d8de86582bad10c91becbc", "sha256": "e310471cbd4a5766748cadcd5ca85b1f0d2bc582cc180efc54e80ace9feea68a"}, "downloads": -1, "filename": "rocketeer-0.2.tar.gz", "has_sig": false, "md5_digest": "87f2c9d249d8de86582bad10c91becbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12624, "upload_time": "2011-11-17T10:17:49", "upload_time_iso_8601": "2011-11-17T10:17:49.261606Z", "url": "https://files.pythonhosted.org/packages/9c/46/5b76756e505d6adc9401cc10d94bc004e223951468b3cfcca830d3272959/rocketeer-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87f2c9d249d8de86582bad10c91becbc", "sha256": "e310471cbd4a5766748cadcd5ca85b1f0d2bc582cc180efc54e80ace9feea68a"}, "downloads": -1, "filename": "rocketeer-0.2.tar.gz", "has_sig": false, "md5_digest": "87f2c9d249d8de86582bad10c91becbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12624, "upload_time": "2011-11-17T10:17:49", "upload_time_iso_8601": "2011-11-17T10:17:49.261606Z", "url": "https://files.pythonhosted.org/packages/9c/46/5b76756e505d6adc9401cc10d94bc004e223951468b3cfcca830d3272959/rocketeer-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:35 2020"}