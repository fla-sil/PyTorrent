{"info": {"author": "Samuel Colvin", "author_email": "s@muelcolvin.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: MacOS X", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# watchgod\n\n[![BuildStatus](https://travis-ci.org/samuelcolvin/watchgod.svg?branch=master)](https://travis-ci.org/samuelcolvin/watchgod)\n[![Coverage](https://codecov.io/gh/samuelcolvin/watchgod/branch/master/graph/badge.svg)](https://codecov.io/gh/samuelcolvin/watchgod)\n[![pypi](https://img.shields.io/pypi/v/watchgod.svg)](https://pypi.python.org/pypi/watchgod)\n\nSimple, modern file watching and code reload in python.\n\n*(watchgod is inspired by [watchdog](https://pythonhosted.org/watchdog/), hence the name, but tries to fix\nsome of the frustrations I found with watchdog, namely: separate approaches for each OS, an inelegant approach to\nconcurrency using threading, challenges around debouncing changes and bugs which weren't being fixed)*\n\n## Usage\n\nTo watch for changes in a directory:\n\n```python\nfrom watchgod import watch\n\nfor changes in watch('./path/to/dir'):\n   print(changes)\n```\n\nTo run a function and restart it when code changes:\n\n```python\nfrom watchgod import run_process\n\ndef foobar(a, b, c):\n   ...\n\nrun_process('./path/to/dir', foobar, args=(1, 2, 3))\n```\n\n`run_process` uses `PythonWatcher` so only changes to python files will prompt a\nreload, see **custom watchers** below.\n\nIf you need notifications about change events as well as to restart a process you can\nuse the `callback` argument to pass a function which will be called on every file change\nwith one argument: the set of file changes.\n\n## Asynchronous Methods\n\n*watchgod* comes with an asynchronous equivalents of `watch`: `awatch` which uses\na `ThreadPoolExecutor` to iterate over files.\n\n```python\nimport asyncio\nfrom watchgod import awatch\n\nasync def main():\n   async for changes in awatch('/path/to/dir'):\n       print(changes)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\nThere's also an asynchronous equivalents of `run_process`: `arun_process` which in turn\nuses `awatch`:\n\n```python\nimport asyncio\nfrom watchgod import arun_process\n\ndef foobar(a, b, c):\n   ...\n\nasync def main():\n   await arun_process('./path/to/dir', foobar, args=(1, 2, 3))\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```\n\n`arun_process` uses `PythonWatcher` so only changes to python files will prompt a\nreload, see **custom watchers** below.\n\nThe signature of `arun_process` is almost identical to `run_process` except that\nthe optional `callback` argument must be a coroutine, not a function.\n\n## Custom Watchers\n\n\n*watchgod* comes with the following watcher classes which can be used via the `watcher_cls`\nkeyword argument to any of the methods above.\n\nFor more details, checkout\n`watcher.py <https://github.com/samuelcolvin/watchgod/blob/master/watchgod/watcher.py>`_,\nit's pretty simple.\n\n* **AllWatcher** The base watcher, all files are checked for changes.\n\n* **DefaultWatcher** The watcher used by default by `watch` and `awatch`, commonly ignored files\n  like `*.swp`, `*.pyc` and `*~` are ignored along with directories like\n  `.git`.\n\n* **PythonWatcher** Specific to python files, only `*.py`, `*.pyx` and `*.pyd` files are watched.\n\n* **DefaultDirWatcher** Is the base for `DefaultWatcher` and `DefaultDirWatcher`. It takes care of ignoring\n  some regular directories.\n\n\nIf these classes aren't sufficient you can define your own watcher, in particular\nyou will want to override `should_watch_dir` and `should_watch_file`. Unless you're\ndoing something very odd, you'll want to inherit from `DefaultDirWatcher`.\n\n## CLI\n\n*watchgod* also comes with a CLI for running and reloading python code.\n\nLets say you have `foobar.py`:\n\n```python\nfrom aiohttp import web\n\nasync def handle(request):\n   return web.Response(text='testing')\n\napp = web.Application()\napp.router.add_get('/', handle)\n\ndef main():\n   web.run_app(app, port=8000)\n```\n\nYou could run this and reload it when any file in the current directory changes with::\n\n    watchgod foobar.main\n\nRun `watchgod --help` for more options. *watchgod* is also available as a python executable module\nvia `python -m watchgod ...`.\n\n## Why no inotify / kqueue / fsevent / winapi support\n\n*watchgod* (for now) uses file polling rather than the OS's built in file change notifications.\n\nThis is not an oversight, it's a decision with the following rationale:\n\n1. Polling is \"fast enough\", particularly since PEP 471 introduced fast `scandir`.\n  For reasonably large projects like the TutorCruncher code base with 850 files and 300k lines\n  of code, *watchgod* can scan the entire tree in ~24ms. With a scan interval of 400ms that is roughly\n  5% of one CPU - perfectly acceptable load during development.\n2. The clue is in the title, there are at least 4 different file notification systems to integrate\n  with, most of them not trivial. That is all before we get to changes between different OS versions.\n3. Polling works well when you want to group or \"debounce\" changes.\n  Let's say you're running a dev server and you change branch in git, 100 files change.\n  Do you want to reload the dev server 100 times or once? Right.\n  Polling periodically will likely group these changes into one event. If you're receiving a\n  stream of events you need to delay execution of the reload when you receive the first event\n  to see if it's part of a group of file changes. This is not trivial.\n\nAll that said, I might still use rust's \"notify\" crate to do the heavy lifting of file watching,\nsee[#25](https://github.com/samuelcolvin/watchgod/issues/25).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/samuelcolvin/watchgod", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "watchgod", "package_url": "https://pypi.org/project/watchgod/", "platform": "", "project_url": "https://pypi.org/project/watchgod/", "project_urls": {"Homepage": "https://github.com/samuelcolvin/watchgod"}, "release_url": "https://pypi.org/project/watchgod/0.6/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Simple, modern file watching and code reload in python.", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>watchgod</h1>\n<p><a href=\"https://travis-ci.org/samuelcolvin/watchgod\" rel=\"nofollow\"><img alt=\"BuildStatus\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/184b235f42fdb375eab250e53644714147352062/68747470733a2f2f7472617669732d63692e6f72672f73616d75656c636f6c76696e2f7761746368676f642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/samuelcolvin/watchgod\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2353ad97b3f21505b5949fa9718542a324b8333/68747470733a2f2f636f6465636f762e696f2f67682f73616d75656c636f6c76696e2f7761746368676f642f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/watchgod\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c95ce9a07740de199b38337cdb8e1f70eba7e1c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7761746368676f642e737667\"></a></p>\n<p>Simple, modern file watching and code reload in python.</p>\n<p><em>(watchgod is inspired by <a href=\"https://pythonhosted.org/watchdog/\" rel=\"nofollow\">watchdog</a>, hence the name, but tries to fix\nsome of the frustrations I found with watchdog, namely: separate approaches for each OS, an inelegant approach to\nconcurrency using threading, challenges around debouncing changes and bugs which weren't being fixed)</em></p>\n<h2>Usage</h2>\n<p>To watch for changes in a directory:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">watchgod</span> <span class=\"kn\">import</span> <span class=\"n\">watch</span>\n\n<span class=\"k\">for</span> <span class=\"n\">changes</span> <span class=\"ow\">in</span> <span class=\"n\">watch</span><span class=\"p\">(</span><span class=\"s1\">'./path/to/dir'</span><span class=\"p\">):</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">changes</span><span class=\"p\">)</span>\n</pre>\n<p>To run a function and restart it when code changes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">watchgod</span> <span class=\"kn\">import</span> <span class=\"n\">run_process</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foobar</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span>\n\n<span class=\"n\">run_process</span><span class=\"p\">(</span><span class=\"s1\">'./path/to/dir'</span><span class=\"p\">,</span> <span class=\"n\">foobar</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</pre>\n<p><code>run_process</code> uses <code>PythonWatcher</code> so only changes to python files will prompt a\nreload, see <strong>custom watchers</strong> below.</p>\n<p>If you need notifications about change events as well as to restart a process you can\nuse the <code>callback</code> argument to pass a function which will be called on every file change\nwith one argument: the set of file changes.</p>\n<h2>Asynchronous Methods</h2>\n<p><em>watchgod</em> comes with an asynchronous equivalents of <code>watch</code>: <code>awatch</code> which uses\na <code>ThreadPoolExecutor</code> to iterate over files.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">watchgod</span> <span class=\"kn\">import</span> <span class=\"n\">awatch</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n   <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">changes</span> <span class=\"ow\">in</span> <span class=\"n\">awatch</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/dir'</span><span class=\"p\">):</span>\n       <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">changes</span><span class=\"p\">)</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>There's also an asynchronous equivalents of <code>run_process</code>: <code>arun_process</code> which in turn\nuses <code>awatch</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">watchgod</span> <span class=\"kn\">import</span> <span class=\"n\">arun_process</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foobar</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n   <span class=\"k\">await</span> <span class=\"n\">arun_process</span><span class=\"p\">(</span><span class=\"s1\">'./path/to/dir'</span><span class=\"p\">,</span> <span class=\"n\">foobar</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p><code>arun_process</code> uses <code>PythonWatcher</code> so only changes to python files will prompt a\nreload, see <strong>custom watchers</strong> below.</p>\n<p>The signature of <code>arun_process</code> is almost identical to <code>run_process</code> except that\nthe optional <code>callback</code> argument must be a coroutine, not a function.</p>\n<h2>Custom Watchers</h2>\n<p><em>watchgod</em> comes with the following watcher classes which can be used via the <code>watcher_cls</code>\nkeyword argument to any of the methods above.</p>\n<p>For more details, checkout\n<code>watcher.py &lt;https://github.com/samuelcolvin/watchgod/blob/master/watchgod/watcher.py&gt;</code>_,\nit's pretty simple.</p>\n<ul>\n<li>\n<p><strong>AllWatcher</strong> The base watcher, all files are checked for changes.</p>\n</li>\n<li>\n<p><strong>DefaultWatcher</strong> The watcher used by default by <code>watch</code> and <code>awatch</code>, commonly ignored files\nlike <code>*.swp</code>, <code>*.pyc</code> and <code>*~</code> are ignored along with directories like\n<code>.git</code>.</p>\n</li>\n<li>\n<p><strong>PythonWatcher</strong> Specific to python files, only <code>*.py</code>, <code>*.pyx</code> and <code>*.pyd</code> files are watched.</p>\n</li>\n<li>\n<p><strong>DefaultDirWatcher</strong> Is the base for <code>DefaultWatcher</code> and <code>DefaultDirWatcher</code>. It takes care of ignoring\nsome regular directories.</p>\n</li>\n</ul>\n<p>If these classes aren't sufficient you can define your own watcher, in particular\nyou will want to override <code>should_watch_dir</code> and <code>should_watch_file</code>. Unless you're\ndoing something very odd, you'll want to inherit from <code>DefaultDirWatcher</code>.</p>\n<h2>CLI</h2>\n<p><em>watchgod</em> also comes with a CLI for running and reloading python code.</p>\n<p>Lets say you have <code>foobar.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n   <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'testing'</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">handle</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n   <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">)</span>\n</pre>\n<p>You could run this and reload it when any file in the current directory changes with::</p>\n<pre><code>watchgod foobar.main\n</code></pre>\n<p>Run <code>watchgod --help</code> for more options. <em>watchgod</em> is also available as a python executable module\nvia <code>python -m watchgod ...</code>.</p>\n<h2>Why no inotify / kqueue / fsevent / winapi support</h2>\n<p><em>watchgod</em> (for now) uses file polling rather than the OS's built in file change notifications.</p>\n<p>This is not an oversight, it's a decision with the following rationale:</p>\n<ol>\n<li>Polling is \"fast enough\", particularly since PEP 471 introduced fast <code>scandir</code>.\nFor reasonably large projects like the TutorCruncher code base with 850 files and 300k lines\nof code, <em>watchgod</em> can scan the entire tree in ~24ms. With a scan interval of 400ms that is roughly\n5% of one CPU - perfectly acceptable load during development.</li>\n<li>The clue is in the title, there are at least 4 different file notification systems to integrate\nwith, most of them not trivial. That is all before we get to changes between different OS versions.</li>\n<li>Polling works well when you want to group or \"debounce\" changes.\nLet's say you're running a dev server and you change branch in git, 100 files change.\nDo you want to reload the dev server 100 times or once? Right.\nPolling periodically will likely group these changes into one event. If you're receiving a\nstream of events you need to delay execution of the reload when you receive the first event\nto see if it's part of a group of file changes. This is not trivial.</li>\n</ol>\n<p>All that said, I might still use rust's \"notify\" crate to do the heavy lifting of file watching,\nsee<a href=\"https://github.com/samuelcolvin/watchgod/issues/25\" rel=\"nofollow\">#25</a>.</p>\n\n          </div>"}, "last_serial": 6773167, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e6b6f856e181d9cabb4ed66a2598e578", "sha256": "d1bed30f8a3564cc70a535e52fc3f66420dfb07433d3bc2572bd6ba8d709c7c0"}, "downloads": -1, "filename": "watchgod-0.0.1-py35,py36-none-any.whl", "has_sig": false, "md5_digest": "e6b6f856e181d9cabb4ed66a2598e578", "packagetype": "bdist_wheel", "python_version": "py35,py36", "requires_python": ">=3.5", "size": 9435, "upload_time": "2017-10-17T17:44:55", "upload_time_iso_8601": "2017-10-17T17:44:55.459137Z", "url": "https://files.pythonhosted.org/packages/42/a2/177d9b564f4df3ccfa764f1e2235af518e0b21f7f028f4346aea60bade50/watchgod-0.0.1-py35,py36-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66dd288c649aa5c33ba44dc29195003b", "sha256": "a49d846c094a734fc1a4bca46172885ca0b5c1278c0d0f45c54e81ae749cb93d"}, "downloads": -1, "filename": "watchgod-0.0.1.tar.gz", "has_sig": false, "md5_digest": "66dd288c649aa5c33ba44dc29195003b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6168, "upload_time": "2017-10-17T17:44:56", "upload_time_iso_8601": "2017-10-17T17:44:56.535125Z", "url": "https://files.pythonhosted.org/packages/12/0d/69e08a213c0d096c74b57b419511b9e3443b6246caceadc05d8a78364360/watchgod-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "88b9e7d92ccf3eb99ed77e1feeb5d74e", "sha256": "d34e0ba0a7378dbd7f32862bbaeb89913c0413cec177ba3109f4e69e084d0368"}, "downloads": -1, "filename": "watchgod-0.0.2-py35,py36-none-any.whl", "has_sig": false, "md5_digest": "88b9e7d92ccf3eb99ed77e1feeb5d74e", "packagetype": "bdist_wheel", "python_version": "py35,py36", "requires_python": ">=3.5", "size": 9474, "upload_time": "2017-10-18T11:47:31", "upload_time_iso_8601": "2017-10-18T11:47:31.176898Z", "url": "https://files.pythonhosted.org/packages/5a/21/f0bf6b3265f7b075fa07da286557e62d335ee1bd49f0b6e29f470fe19535/watchgod-0.0.2-py35,py36-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76c18ef4f32b29bb2f2b238cd11101c3", "sha256": "af26c1b08e4dc5cf7a8c01db07541ec082b6b8e6dea206037450d091a7417d21"}, "downloads": -1, "filename": "watchgod-0.0.2.tar.gz", "has_sig": false, "md5_digest": "76c18ef4f32b29bb2f2b238cd11101c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6200, "upload_time": "2017-10-18T11:47:32", "upload_time_iso_8601": "2017-10-18T11:47:32.233006Z", "url": "https://files.pythonhosted.org/packages/59/6e/10ceb513b6cb5fcc442dab9e16018623d5bff0112414bfb69a8ba68dd6ee/watchgod-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "859962249acf21ac031ea3ba507effcd", "sha256": "d6936cd43a25c2c194091e5b64ef20697fc3344278f92845db1b6a2470cbb87f"}, "downloads": -1, "filename": "watchgod-0.0.3-py35,py36-none-any.whl", "has_sig": false, "md5_digest": "859962249acf21ac031ea3ba507effcd", "packagetype": "bdist_wheel", "python_version": "py35,py36", "requires_python": ">=3.5", "size": 11885, "upload_time": "2017-10-19T11:14:46", "upload_time_iso_8601": "2017-10-19T11:14:46.058506Z", "url": "https://files.pythonhosted.org/packages/6f/3b/503fe7f9129ccf9f60a7bc8eac8372d5b263ba913536018eae202f4ed357/watchgod-0.0.3-py35,py36-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e1efd1cc40ce4331df4c6dfdd029e1c", "sha256": "8fa55479f8ab13288f1e471f10903d254ffbe5a496fc31a4324fad02e7c781a9"}, "downloads": -1, "filename": "watchgod-0.0.3.tar.gz", "has_sig": false, "md5_digest": "8e1efd1cc40ce4331df4c6dfdd029e1c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7703, "upload_time": "2017-10-19T11:14:48", "upload_time_iso_8601": "2017-10-19T11:14:48.585789Z", "url": "https://files.pythonhosted.org/packages/22/9f/4b29d954426651492f9858273e33468e998da2ef0fe34dd2558355fc0e00/watchgod-0.0.3.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "1d19cac0b535a931f55b380bba21edaa", "sha256": "0fae0e814558aca3b68964a364bdb5d2abcae3f2d62846aceea26a03bdaff698"}, "downloads": -1, "filename": "watchgod-0.1-py35,py36-none-any.whl", "has_sig": false, "md5_digest": "1d19cac0b535a931f55b380bba21edaa", "packagetype": "bdist_wheel", "python_version": "py35,py36", "requires_python": ">=3.5", "size": 8644, "upload_time": "2018-04-06T18:58:23", "upload_time_iso_8601": "2018-04-06T18:58:23.112051Z", "url": "https://files.pythonhosted.org/packages/4b/3f/9cebb3d5261e6670ddbae9a0e52216efb4be61c9c1c0d783af2749c7b2b4/watchgod-0.1-py35,py36-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "644cc906fd74f3184a7e58d43cc0a8b4", "sha256": "b118bea02b065696207262ca7e714ccd95b49f64f7cb7606c17567bd71071d2a"}, "downloads": -1, "filename": "watchgod-0.1.tar.gz", "has_sig": false, "md5_digest": "644cc906fd74f3184a7e58d43cc0a8b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7788, "upload_time": "2018-04-06T18:58:24", "upload_time_iso_8601": "2018-04-06T18:58:24.074101Z", "url": "https://files.pythonhosted.org/packages/f1/31/7039e337d34b83c8ad9ebc2f571f438465db1abc8bb556434e4d8b855c1e/watchgod-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a4782e1e42e59425bec47acbc278dabb", "sha256": "77a96e5fb916d689b30b5036c9aafb20731dd4760bbe9528b449ad23a9505100"}, "downloads": -1, "filename": "watchgod-0.1.1-py35,py36-none-any.whl", "has_sig": false, "md5_digest": "a4782e1e42e59425bec47acbc278dabb", "packagetype": "bdist_wheel", "python_version": "py35,py36", "requires_python": ">=3.5", "size": 8772, "upload_time": "2018-04-06T21:38:57", "upload_time_iso_8601": "2018-04-06T21:38:57.539335Z", "url": "https://files.pythonhosted.org/packages/fb/8c/1607b6eee8714a8e442c6357b033fa8b562ba4d5532dcce14a49350b91fc/watchgod-0.1.1-py35,py36-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0acb1d0bf0c8eeb0b42c52b526ebccfa", "sha256": "a5a502c8c87c973534e74b2c5f0cd8ba15f061f4a4cd444c8add28fa29f83897"}, "downloads": -1, "filename": "watchgod-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0acb1d0bf0c8eeb0b42c52b526ebccfa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7887, "upload_time": "2018-04-06T21:38:58", "upload_time_iso_8601": "2018-04-06T21:38:58.462129Z", "url": "https://files.pythonhosted.org/packages/1b/2e/a7667627e57c012ab83da01288f6bc2f3182d545ffa25350a82eba50db84/watchgod-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e49142fc9e1a291defa6237d621a4649", "sha256": "d4c9e47526328fa91635d01560c4914f87904b8b835584a57db1245289dd2d65"}, "downloads": -1, "filename": "watchgod-0.2-py35,py36-none-any.whl", "has_sig": false, "md5_digest": "e49142fc9e1a291defa6237d621a4649", "packagetype": "bdist_wheel", "python_version": "py35,py36", "requires_python": ">=3.5", "size": 9018, "upload_time": "2018-05-11T16:15:59", "upload_time_iso_8601": "2018-05-11T16:15:59.600246Z", "url": "https://files.pythonhosted.org/packages/48/3a/f74dfa513114f4455b7d02b3d1bd996b626280129f1c3cce98c19e60b73e/watchgod-0.2-py35,py36-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1056b7d8fc6b49027fae65e3db3be7a", "sha256": "b491f816fe9e69d8164cbe569596ccf855339ff773d46d7aad2b6ef44f778e46"}, "downloads": -1, "filename": "watchgod-0.2.tar.gz", "has_sig": false, "md5_digest": "a1056b7d8fc6b49027fae65e3db3be7a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8108, "upload_time": "2018-05-11T16:16:00", "upload_time_iso_8601": "2018-05-11T16:16:00.703017Z", "url": "https://files.pythonhosted.org/packages/bf/27/6257bc04776b8fb118420886e1af542d9d4ec1882382cd147cc835e45264/watchgod-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "312c629ff308619fedfac8dff07cbe5d", "sha256": "137bfbfaa24c686aff3f269f6a9b19262c667c673125df789fd58a331ea695e5"}, "downloads": -1, "filename": "watchgod-0.3-py35,py36-none-any.whl", "has_sig": false, "md5_digest": "312c629ff308619fedfac8dff07cbe5d", "packagetype": "bdist_wheel", "python_version": "py35,py36", "requires_python": ">=3.5", "size": 9974, "upload_time": "2018-11-15T22:40:10", "upload_time_iso_8601": "2018-11-15T22:40:10.302567Z", "url": "https://files.pythonhosted.org/packages/22/b5/26672d4f418454410653722a7e1d4c16133b94a0364f8e31548dafa56a9b/watchgod-0.3-py35,py36-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c28588b509f924b584afbebcbb4ca33", "sha256": "d788cc49fd20be1b3fb52fba46e462882423177a0a792d01dc99979a3ed9ebaf"}, "downloads": -1, "filename": "watchgod-0.3.tar.gz", "has_sig": false, "md5_digest": "0c28588b509f924b584afbebcbb4ca33", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8358, "upload_time": "2018-11-15T22:40:11", "upload_time_iso_8601": "2018-11-15T22:40:11.610840Z", "url": "https://files.pythonhosted.org/packages/9e/2c/10f314807941215bd59112f764e78ac88fad306676c16b9f03c2b1e3367b/watchgod-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "1ed1e634a7e09e90929546b4577f0c73", "sha256": "0795e9221b147ba1799326f98c643d0cd928c327bd7ab54c781ac16f509fb9f0"}, "downloads": -1, "filename": "watchgod-0.4-py35,py36-none-any.whl", "has_sig": false, "md5_digest": "1ed1e634a7e09e90929546b4577f0c73", "packagetype": "bdist_wheel", "python_version": "py35,py36", "requires_python": ">=3.5", "size": 9977, "upload_time": "2018-12-07T09:22:29", "upload_time_iso_8601": "2018-12-07T09:22:29.576998Z", "url": "https://files.pythonhosted.org/packages/37/96/53762aa3faf1fec4691e4f9c7b204d3fceed846ddb6361035f532b8a5750/watchgod-0.4-py35,py36-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84cdf79d9350d52a88c61c7012703558", "sha256": "7e71db5d327b4285f86c5729e737b2c75fb59915402842db1e4623fc60191dcf"}, "downloads": -1, "filename": "watchgod-0.4.tar.gz", "has_sig": false, "md5_digest": "84cdf79d9350d52a88c61c7012703558", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8360, "upload_time": "2018-12-07T09:22:31", "upload_time_iso_8601": "2018-12-07T09:22:31.167437Z", "url": "https://files.pythonhosted.org/packages/67/a2/519e8a0b410b74c99f65564178babe92f9880646a9caa97f6d20c8bbee90/watchgod-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "ded13bf6896edb10933771c8909fb22c", "sha256": "30ffb90c692e0797d23a39d695928c57d8c01a4a9708434e9dca16d7bd4e24c7"}, "downloads": -1, "filename": "watchgod-0.5-py35.py36.py37-none-any.whl", "has_sig": false, "md5_digest": "ded13bf6896edb10933771c8909fb22c", "packagetype": "bdist_wheel", "python_version": "py35.py36.py37", "requires_python": ">=3.5", "size": 10108, "upload_time": "2019-08-29T12:10:58", "upload_time_iso_8601": "2019-08-29T12:10:58.428330Z", "url": "https://files.pythonhosted.org/packages/5c/a2/a3c50820206ad9771a22e1f06dc1a212a5cc3ea8acc14a3953465d6b9bad/watchgod-0.5-py35.py36.py37-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54ac825669108d66ead8d7a893bad837", "sha256": "78d44cbacf4fbbf7573d10fcf0f156f1b0d71598d32477c34f8cf66001bafc1f"}, "downloads": -1, "filename": "watchgod-0.5.tar.gz", "has_sig": false, "md5_digest": "54ac825669108d66ead8d7a893bad837", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10163, "upload_time": "2019-08-29T12:10:59", "upload_time_iso_8601": "2019-08-29T12:10:59.860386Z", "url": "https://files.pythonhosted.org/packages/c3/99/5f6830868033454b526fd51800a044850c3942c9d4965183da22900d3244/watchgod-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "688cca836c082bc3aaa199ac9cd63f19", "sha256": "59700dab7445aa8e6067a5b94f37bae90fc367554549b1ed2e9d0f4f38a90d2a"}, "downloads": -1, "filename": "watchgod-0.6-py35.py36.py37-none-any.whl", "has_sig": false, "md5_digest": "688cca836c082bc3aaa199ac9cd63f19", "packagetype": "bdist_wheel", "python_version": "py35.py36.py37", "requires_python": ">=3.5", "size": 10540, "upload_time": "2020-03-08T19:04:18", "upload_time_iso_8601": "2020-03-08T19:04:18.074307Z", "url": "https://files.pythonhosted.org/packages/3f/36/5972c4f59e41592e6c481ee1cbc6eab2a5a220e3e3ea3370c2448f932578/watchgod-0.6-py35.py36.py37-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55cf34d921b87b12499381c32ee0fe42", "sha256": "e9cca0ab9c63f17fc85df9fd8bd18156ff00aff04ebe5976cee473f4968c6858"}, "downloads": -1, "filename": "watchgod-0.6.tar.gz", "has_sig": false, "md5_digest": "55cf34d921b87b12499381c32ee0fe42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10812, "upload_time": "2020-03-08T19:04:19", "upload_time_iso_8601": "2020-03-08T19:04:19.482780Z", "url": "https://files.pythonhosted.org/packages/bd/13/c195740e6816ea190b23fe824b01ae44836a3983f613f16d40ef674a5570/watchgod-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "688cca836c082bc3aaa199ac9cd63f19", "sha256": "59700dab7445aa8e6067a5b94f37bae90fc367554549b1ed2e9d0f4f38a90d2a"}, "downloads": -1, "filename": "watchgod-0.6-py35.py36.py37-none-any.whl", "has_sig": false, "md5_digest": "688cca836c082bc3aaa199ac9cd63f19", "packagetype": "bdist_wheel", "python_version": "py35.py36.py37", "requires_python": ">=3.5", "size": 10540, "upload_time": "2020-03-08T19:04:18", "upload_time_iso_8601": "2020-03-08T19:04:18.074307Z", "url": "https://files.pythonhosted.org/packages/3f/36/5972c4f59e41592e6c481ee1cbc6eab2a5a220e3e3ea3370c2448f932578/watchgod-0.6-py35.py36.py37-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55cf34d921b87b12499381c32ee0fe42", "sha256": "e9cca0ab9c63f17fc85df9fd8bd18156ff00aff04ebe5976cee473f4968c6858"}, "downloads": -1, "filename": "watchgod-0.6.tar.gz", "has_sig": false, "md5_digest": "55cf34d921b87b12499381c32ee0fe42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10812, "upload_time": "2020-03-08T19:04:19", "upload_time_iso_8601": "2020-03-08T19:04:19.482780Z", "url": "https://files.pythonhosted.org/packages/bd/13/c195740e6816ea190b23fe824b01ae44836a3983f613f16d40ef674a5570/watchgod-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:12 2020"}