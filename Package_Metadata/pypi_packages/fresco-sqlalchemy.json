{"info": {"author": "Oliver Cope", "author_email": "oliver@redgecko.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"], "description": "SQLAlchemy support for Fresco\n=============================\n\nAdding SQLAlchemy to your application\n-------------------------------------\n\nUse ``fresco_sqlalchemy.SQLAlchemy`` to configure your application for use with\nSQLAlchemy. By default this reads database connection configuration from\napp, and adds WSGI middleware into your application to manage SQLAlchemy\nsessions::\n\n    from fresco import FrescoApp\n    from fresco_sqlalchemy import SQLAlchemy\n\n    # Create a new Fresco app\n    app = FrescoApp()\n\n    # Connection info is loaded from your application configuration\n    app.options.SQLALCHEMY = {\n        'default': 'driver://user:password@localhost/database',\n    }\n\n    sqlalchemy = SQLAlchemy(app)\n\n\nYou can call your configuration variable something else if you prefer::\n\n    app.options.DATABASES = {\n        'default': 'driver://user:password@localhost/database',\n    }\n    sqlalchemy = SQLAlchemy(app, options_key='DATABASES')\n\n\nOr skip this step entirely and provide database configuration directly to the\nconstructor::\n\n    sqlalchemy = SQLAlchemy(\n        app,\n        databases={'default': 'driver://user:password@localhost/database',})\n\n\nAccessing sessions\n------------------\n\n\nYou can access sqlalchemy sessions directly on the ``SQLAlchemy`` object::\n\n    sqlalchemy = SQLAlchemy(app)\n    session = sqlalchemy.getsession()\n    session.query(...)\n\n\nOr via ``fresco.context``::\n\n    from fresco import context\n    session = context.sqlalchemy.default\n    session.query(...)\n\n\nMultiple connection support\n---------------------------\n\nYou can specify as many database connection URLs as you want::\n\n    app.options.SQLALCHEMY = {\n        'staging': 'driver://user:password@localhost/staging_db',\n        'production': 'driver://user:password@localhost/production_db',\n    }\n\nThese can be accessed by name, using ``getsession``::\n\n    sqlalchemy = SQLAlchemy(app)\n    sqlalchemy.getsession('staging')\n\nOr from ``fresco.context``::\n\n    default_session = context.sqlalchemy.staging\n    cms_session = context.sqlalchemy.production\n\n\nEngine configuration\n--------------------\n\nExtra arguments to the SQLAlchemy constructor are passed to SQLAlchemy's\n``create_engine`` function. This makes it possible to specify options such as\n``echo=True`` to log all SQL queries produced by SQLAlchemy::\n\n    sqlalchemy = SQLAlchemy(app, echo=True)\n\n\n0.1 (released 2016-06-30)\n-------------------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/ollyc/fresco-sqlalchemy", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "fresco-sqlalchemy", "package_url": "https://pypi.org/project/fresco-sqlalchemy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fresco-sqlalchemy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/ollyc/fresco-sqlalchemy"}, "release_url": "https://pypi.org/project/fresco-sqlalchemy/0.1/", "requires_dist": null, "requires_python": null, "summary": "Fresco/SQLAlchemy integration", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"adding-sqlalchemy-to-your-application\">\n<h2>Adding SQLAlchemy to your application</h2>\n<p>Use <tt>fresco_sqlalchemy.SQLAlchemy</tt> to configure your application for use with\nSQLAlchemy. By default this reads database connection configuration from\napp, and adds WSGI middleware into your application to manage SQLAlchemy\nsessions:</p>\n<pre>from fresco import FrescoApp\nfrom fresco_sqlalchemy import SQLAlchemy\n\n# Create a new Fresco app\napp = FrescoApp()\n\n# Connection info is loaded from your application configuration\napp.options.SQLALCHEMY = {\n    'default': 'driver://user:password@localhost/database',\n}\n\nsqlalchemy = SQLAlchemy(app)\n</pre>\n<p>You can call your configuration variable something else if you prefer:</p>\n<pre>app.options.DATABASES = {\n    'default': 'driver://user:password@localhost/database',\n}\nsqlalchemy = SQLAlchemy(app, options_key='DATABASES')\n</pre>\n<p>Or skip this step entirely and provide database configuration directly to the\nconstructor:</p>\n<pre>sqlalchemy = SQLAlchemy(\n    app,\n    databases={'default': 'driver://user:password@localhost/database',})\n</pre>\n</div>\n<div id=\"accessing-sessions\">\n<h2>Accessing sessions</h2>\n<p>You can access sqlalchemy sessions directly on the <tt>SQLAlchemy</tt> object:</p>\n<pre>sqlalchemy = SQLAlchemy(app)\nsession = sqlalchemy.getsession()\nsession.query(...)\n</pre>\n<p>Or via <tt>fresco.context</tt>:</p>\n<pre>from fresco import context\nsession = context.sqlalchemy.default\nsession.query(...)\n</pre>\n</div>\n<div id=\"multiple-connection-support\">\n<h2>Multiple connection support</h2>\n<p>You can specify as many database connection URLs as you want:</p>\n<pre>app.options.SQLALCHEMY = {\n    'staging': 'driver://user:password@localhost/staging_db',\n    'production': 'driver://user:password@localhost/production_db',\n}\n</pre>\n<p>These can be accessed by name, using <tt>getsession</tt>:</p>\n<pre>sqlalchemy = SQLAlchemy(app)\nsqlalchemy.getsession('staging')\n</pre>\n<p>Or from <tt>fresco.context</tt>:</p>\n<pre>default_session = context.sqlalchemy.staging\ncms_session = context.sqlalchemy.production\n</pre>\n</div>\n<div id=\"engine-configuration\">\n<h2>Engine configuration</h2>\n<p>Extra arguments to the SQLAlchemy constructor are passed to SQLAlchemy\u2019s\n<tt>create_engine</tt> function. This makes it possible to specify options such as\n<tt>echo=True</tt> to log all SQL queries produced by SQLAlchemy:</p>\n<pre>sqlalchemy = SQLAlchemy(app, echo=True)\n</pre>\n</div>\n<div id=\"released-2016-06-30\">\n<h2>0.1 (released 2016-06-30)</h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2195469, "releases": {"0": [], "0.1": [{"comment_text": "", "digests": {"md5": "1c7c45e192b395da7fd5bc4dd8652b27", "sha256": "7e852801e8f6f6edcf3d93bc11531ee68ded49c33dac7f074448a2dca33ba776"}, "downloads": -1, "filename": "fresco-sqlalchemy-0.1.tar.gz", "has_sig": false, "md5_digest": "1c7c45e192b395da7fd5bc4dd8652b27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4939, "upload_time": "2016-06-30T09:17:11", "upload_time_iso_8601": "2016-06-30T09:17:11.070013Z", "url": "https://files.pythonhosted.org/packages/0d/2e/4593294c1ff7c951c66d3cfaf8145621d3b38be12e1f5d55111b50697ebf/fresco-sqlalchemy-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c7c45e192b395da7fd5bc4dd8652b27", "sha256": "7e852801e8f6f6edcf3d93bc11531ee68ded49c33dac7f074448a2dca33ba776"}, "downloads": -1, "filename": "fresco-sqlalchemy-0.1.tar.gz", "has_sig": false, "md5_digest": "1c7c45e192b395da7fd5bc4dd8652b27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4939, "upload_time": "2016-06-30T09:17:11", "upload_time_iso_8601": "2016-06-30T09:17:11.070013Z", "url": "https://files.pythonhosted.org/packages/0d/2e/4593294c1ff7c951c66d3cfaf8145621d3b38be12e1f5d55111b50697ebf/fresco-sqlalchemy-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:25 2020"}