{"info": {"author": "Dustin Oprea", "author_email": "myselfasunder@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "|Build\\_Status|\n|Coverage\\_Status|\n\n========\nOverview\n========\n\n*inotify* functionality is available from the Linux kernel and allows you to register one or more directories for watching, and to simply block and wait for notification events. This is obviously far more efficient than polling one or more directories to determine if anything has changed. This is available in the Linux kernel as of version 2.6 .\n\nWe've designed this library to act as a generator. All you have to do is loop, and you'll see one event at a time and block in-between. After each cycle (all notified events were processed, or no events were received), you'll get a *None*. You may use this as an opportunity to perform other tasks, if your application is being primarily driven by *inotify* events. By default, we'll only block for one-second on queries to the kernel. This may be set to something else by passing a seconds-value into the constructor as *block_duration_s*.\n\n**This project is unrelated to the *PyInotify* project that existed prior to this one (this project began in 2015). That project is defunct and no longer available.**\n\n\n==========\nInstalling\n==========\n\nInstall via *pip*::\n\n    $ sudo pip install inotify\n\n\n=======\nExample\n=======\n\nCode for monitoring a simple, flat path (see \"Recursive Watching\" for watching a hierarchical structure)::\n\n    import inotify.adapters\n\n    def _main():\n        i = inotify.adapters.Inotify()\n\n        i.add_watch('/tmp')\n\n        with open('/tmp/test_file', 'w'):\n            pass\n\n        for event in i.event_gen(yield_nones=False):\n            (_, type_names, path, filename) = event\n\n            print(\"PATH=[{}] FILENAME=[{}] EVENT_TYPES={}\".format(\n                  path, filename, type_names))\n\n    if __name__ == '__main__':\n        _main()\n\nOutput::\n\n    PATH=[/tmp] FILENAME=[test_file] EVENT_TYPES=['IN_MODIFY']\n    PATH=[/tmp] FILENAME=[test_file] EVENT_TYPES=['IN_OPEN']\n    PATH=[/tmp] FILENAME=[test_file] EVENT_TYPES=['IN_CLOSE_WRITE']\n    ^CTraceback (most recent call last):\n      File \"inotify_test.py\", line 18, in <module>\n        _main()\n      File \"inotify_test.py\", line 11, in _main\n        for event in i.event_gen(yield_nones=False):\n      File \"/home/dustin/development/python/pyinotify/inotify/adapters.py\", line 202, in event_gen\n        events = self.__epoll.poll(block_duration_s)\n    KeyboardInterrupt\n\nNote that this works quite nicely, but, in the event that you don't want to be driven by the loop, you can also provide a timeout and then even flatten the output of the generator directly to a list::\n\n    import inotify.adapters\n\n    def _main():\n        i = inotify.adapters.Inotify()\n\n        i.add_watch('/tmp')\n\n        with open('/tmp/test_file', 'w'):\n            pass\n\n        events = i.event_gen(yield_nones=False, timeout_s=1)\n        events = list(events)\n\n        print(events)\n\n    if __name__ == '__main__':\n        _main()\n\nThis will return everything that's happened since the last time you ran it (artificially formatted here)::\n\n    [\n        (_INOTIFY_EVENT(wd=1, mask=2, cookie=0, len=16), ['IN_MODIFY'], '/tmp', u'test_file'),\n        (_INOTIFY_EVENT(wd=1, mask=32, cookie=0, len=16), ['IN_OPEN'], '/tmp', u'test_file'),\n        (_INOTIFY_EVENT(wd=1, mask=8, cookie=0, len=16), ['IN_CLOSE_WRITE'], '/tmp', u'test_file')\n    ]\n\n**Note that the event-loop will automatically register new directories to be watched, so, if you will create new directories and then potentially delete them, between calls, and are only retrieving the events in batches (like above) then you might experience issues. See the parameters for `event_gen()` for options to handle this scenario.**\n\n\n==================\nRecursive Watching\n==================\n\nThere is also the ability to add a recursive watch on a path.\n\nExample::\n\n    i = inotify.adapters.InotifyTree('/tmp/watch_tree')\n\n    for event in i.event_gen():\n        # Do stuff...\n\n        pass\n\nThis will immediately recurse through the directory tree and add watches on all subdirectories. New directories will automatically have watches added for them and deleted directories will be cleaned-up.\n\nThe other differences from the standard functionality:\n\n- You can't remove a watch since watches are automatically managed.\n- Even if you provide a very restrictive mask that doesn't allow for directory create/delete events, the *IN_ISDIR*, *IN_CREATE*, and *IN_DELETE* flags will still be seen.\n\n\n=====\nNotes\n=====\n\n- **IMPORTANT:** Recursively monitoring paths is **not** a functionality provided by the kernel. Rather, we artificially implement it. As directory-created events are received, we create watches for the child directories on-the-fly. This means that there is potential for a race condition: if a directory is created and a file or directory is created inside before you (using the `event_gen()` loop) have a chance to observe it, then you are going to have a problem: If it is a file, then you will miss the events related to its creation, but, if it is a directory, then not only will you miss those creation events but this library will also miss them and not be able to add a watch for them. If you are dealing with a **large number of hierarchical directory creations** and have the ability to be aware new directories via a secondary channel with some lead time before any files are populated *into* them, you can take advantage of this and call `add_watch()` manually. In this case there is limited value in using `InotifyTree()`/`InotifyTree()` instead of just `Inotify()` but this choice is left to you.\n\n- *epoll* is used to audit for *inotify* kernel events.\n\n- **The earlier versions of this project had only partial Python 3 compatibility (string related). This required doing the string<->bytes conversions outside of this project. As of the current version, this has been fixed. However, this means that Python 3 users may experience breakages until this is compensated-for on their end. It will obviously be trivial for this project to detect the type of the arguments that are passed but there'd be no concrete way of knowing which type to return. Better to just fix it completely now and move forward.**\n\n- You may also choose to pass the list of directories to watch via the *paths* parameter of the constructor. This would work best in situations where your list of paths is static.\n\n- Calling `remove_watch()` is not strictly necessary. The *inotify* resources is automatically cleaned-up, which would clean-up all watch resources as well.\n\n\n=======\nTesting\n=======\n\nCall \"test.sh\" to run the tests::\n\n    $ ./test.sh\n    test__cycle (tests.test_inotify.TestInotify) ... ok\n    test__get_event_names (tests.test_inotify.TestInotify) ... ok\n    test__international_naming_python2 (tests.test_inotify.TestInotify) ... SKIP: Not in Python 2\n    test__international_naming_python3 (tests.test_inotify.TestInotify) ... ok\n    test__automatic_new_watches_on_existing_paths (tests.test_inotify.TestInotifyTree) ... ok\n    test__automatic_new_watches_on_new_paths (tests.test_inotify.TestInotifyTree) ... ok\n    test__cycle (tests.test_inotify.TestInotifyTree) ... ok\n    test__renames (tests.test_inotify.TestInotifyTree) ... ok\n    test__cycle (tests.test_inotify.TestInotifyTrees) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 9 tests in 12.039s\n\n    OK (SKIP=1)\n\n.. |Build_Status| image:: https://travis-ci.org/dsoprea/PyInotify.svg?branch=master\n   :target: https://travis-ci.org/dsoprea/PyInotify\n.. |Coverage_Status| image:: https://coveralls.io/repos/github/dsoprea/PyInotify/badge.svg?branch=master\n   :target: https://coveralls.io/github/dsoprea/PyInotify?branch=master\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dsoprea/PyInotify", "keywords": "inotify", "license": "GPL 2", "maintainer": "", "maintainer_email": "", "name": "inotify", "package_url": "https://pypi.org/project/inotify/", "platform": "", "project_url": "https://pypi.org/project/inotify/", "project_urls": {"Homepage": "https://github.com/dsoprea/PyInotify"}, "release_url": "https://pypi.org/project/inotify/0.2.10/", "requires_dist": ["nose"], "requires_python": "", "summary": "An adapter to Linux kernel support for inotify directory-watching.", "version": "0.2.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/dsoprea/PyInotify\" rel=\"nofollow\"><img alt=\"Build_Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db985fbdba3201749ba4b967a97ba4ef7f3375f5/68747470733a2f2f7472617669732d63692e6f72672f64736f707265612f5079496e6f746966792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/dsoprea/PyInotify?branch=master\" rel=\"nofollow\"><img alt=\"Coverage_Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/641392f52f9065f3c8bab30a6eebcfc4cf8b2d17/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f64736f707265612f5079496e6f746966792f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p><em>inotify</em> functionality is available from the Linux kernel and allows you to register one or more directories for watching, and to simply block and wait for notification events. This is obviously far more efficient than polling one or more directories to determine if anything has changed. This is available in the Linux kernel as of version 2.6 .</p>\n<p>We\u2019ve designed this library to act as a generator. All you have to do is loop, and you\u2019ll see one event at a time and block in-between. After each cycle (all notified events were processed, or no events were received), you\u2019ll get a <em>None</em>. You may use this as an opportunity to perform other tasks, if your application is being primarily driven by <em>inotify</em> events. By default, we\u2019ll only block for one-second on queries to the kernel. This may be set to something else by passing a seconds-value into the constructor as <em>block_duration_s</em>.</p>\n<p><strong>This project is unrelated to the *PyInotify* project that existed prior to this one (this project began in 2015). That project is defunct and no longer available.</strong></p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install via <em>pip</em>:</p>\n<pre>$ sudo pip install inotify\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Code for monitoring a simple, flat path (see \u201cRecursive Watching\u201d for watching a hierarchical structure):</p>\n<pre>import inotify.adapters\n\ndef _main():\n    i = inotify.adapters.Inotify()\n\n    i.add_watch('/tmp')\n\n    with open('/tmp/test_file', 'w'):\n        pass\n\n    for event in i.event_gen(yield_nones=False):\n        (_, type_names, path, filename) = event\n\n        print(\"PATH=[{}] FILENAME=[{}] EVENT_TYPES={}\".format(\n              path, filename, type_names))\n\nif __name__ == '__main__':\n    _main()\n</pre>\n<p>Output:</p>\n<pre>PATH=[/tmp] FILENAME=[test_file] EVENT_TYPES=['IN_MODIFY']\nPATH=[/tmp] FILENAME=[test_file] EVENT_TYPES=['IN_OPEN']\nPATH=[/tmp] FILENAME=[test_file] EVENT_TYPES=['IN_CLOSE_WRITE']\n^CTraceback (most recent call last):\n  File \"inotify_test.py\", line 18, in &lt;module&gt;\n    _main()\n  File \"inotify_test.py\", line 11, in _main\n    for event in i.event_gen(yield_nones=False):\n  File \"/home/dustin/development/python/pyinotify/inotify/adapters.py\", line 202, in event_gen\n    events = self.__epoll.poll(block_duration_s)\nKeyboardInterrupt\n</pre>\n<p>Note that this works quite nicely, but, in the event that you don\u2019t want to be driven by the loop, you can also provide a timeout and then even flatten the output of the generator directly to a list:</p>\n<pre>import inotify.adapters\n\ndef _main():\n    i = inotify.adapters.Inotify()\n\n    i.add_watch('/tmp')\n\n    with open('/tmp/test_file', 'w'):\n        pass\n\n    events = i.event_gen(yield_nones=False, timeout_s=1)\n    events = list(events)\n\n    print(events)\n\nif __name__ == '__main__':\n    _main()\n</pre>\n<p>This will return everything that\u2019s happened since the last time you ran it (artificially formatted here):</p>\n<pre>[\n    (_INOTIFY_EVENT(wd=1, mask=2, cookie=0, len=16), ['IN_MODIFY'], '/tmp', u'test_file'),\n    (_INOTIFY_EVENT(wd=1, mask=32, cookie=0, len=16), ['IN_OPEN'], '/tmp', u'test_file'),\n    (_INOTIFY_EVENT(wd=1, mask=8, cookie=0, len=16), ['IN_CLOSE_WRITE'], '/tmp', u'test_file')\n]\n</pre>\n<p><strong>Note that the event-loop will automatically register new directories to be watched, so, if you will create new directories and then potentially delete them, between calls, and are only retrieving the events in batches (like above) then you might experience issues. See the parameters for `event_gen()` for options to handle this scenario.</strong></p>\n</div>\n<div id=\"recursive-watching\">\n<h2>Recursive Watching</h2>\n<p>There is also the ability to add a recursive watch on a path.</p>\n<p>Example:</p>\n<pre>i = inotify.adapters.InotifyTree('/tmp/watch_tree')\n\nfor event in i.event_gen():\n    # Do stuff...\n\n    pass\n</pre>\n<p>This will immediately recurse through the directory tree and add watches on all subdirectories. New directories will automatically have watches added for them and deleted directories will be cleaned-up.</p>\n<p>The other differences from the standard functionality:</p>\n<ul>\n<li>You can\u2019t remove a watch since watches are automatically managed.</li>\n<li>Even if you provide a very restrictive mask that doesn\u2019t allow for directory create/delete events, the <em>IN_ISDIR</em>, <em>IN_CREATE</em>, and <em>IN_DELETE</em> flags will still be seen.</li>\n</ul>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<ul>\n<li><strong>IMPORTANT:</strong> Recursively monitoring paths is <strong>not</strong> a functionality provided by the kernel. Rather, we artificially implement it. As directory-created events are received, we create watches for the child directories on-the-fly. This means that there is potential for a race condition: if a directory is created and a file or directory is created inside before you (using the <cite>event_gen()</cite> loop) have a chance to observe it, then you are going to have a problem: If it is a file, then you will miss the events related to its creation, but, if it is a directory, then not only will you miss those creation events but this library will also miss them and not be able to add a watch for them. If you are dealing with a <strong>large number of hierarchical directory creations</strong> and have the ability to be aware new directories via a secondary channel with some lead time before any files are populated <em>into</em> them, you can take advantage of this and call <cite>add_watch()</cite> manually. In this case there is limited value in using <cite>InotifyTree()</cite>/<cite>InotifyTree()</cite> instead of just <cite>Inotify()</cite> but this choice is left to you.</li>\n<li><em>epoll</em> is used to audit for <em>inotify</em> kernel events.</li>\n<li><strong>The earlier versions of this project had only partial Python 3 compatibility (string related). This required doing the string&lt;-&gt;bytes conversions outside of this project. As of the current version, this has been fixed. However, this means that Python 3 users may experience breakages until this is compensated-for on their end. It will obviously be trivial for this project to detect the type of the arguments that are passed but there\u2019d be no concrete way of knowing which type to return. Better to just fix it completely now and move forward.</strong></li>\n<li>You may also choose to pass the list of directories to watch via the <em>paths</em> parameter of the constructor. This would work best in situations where your list of paths is static.</li>\n<li>Calling <cite>remove_watch()</cite> is not strictly necessary. The <em>inotify</em> resources is automatically cleaned-up, which would clean-up all watch resources as well.</li>\n</ul>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Call \u201ctest.sh\u201d to run the tests:</p>\n<pre>$ ./test.sh\ntest__cycle (tests.test_inotify.TestInotify) ... ok\ntest__get_event_names (tests.test_inotify.TestInotify) ... ok\ntest__international_naming_python2 (tests.test_inotify.TestInotify) ... SKIP: Not in Python 2\ntest__international_naming_python3 (tests.test_inotify.TestInotify) ... ok\ntest__automatic_new_watches_on_existing_paths (tests.test_inotify.TestInotifyTree) ... ok\ntest__automatic_new_watches_on_new_paths (tests.test_inotify.TestInotifyTree) ... ok\ntest__cycle (tests.test_inotify.TestInotifyTree) ... ok\ntest__renames (tests.test_inotify.TestInotifyTree) ... ok\ntest__cycle (tests.test_inotify.TestInotifyTrees) ... ok\n\n----------------------------------------------------------------------\nRan 9 tests in 12.039s\n\nOK (SKIP=1)\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4038541, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "9e96ababa1af430c75604157d5910b19", "sha256": "9c1aa8f905401394a2a0342dbb9f545da93cf78963f6275d435c5ff0284d47a2"}, "downloads": -1, "filename": "inotify-0.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "9e96ababa1af430c75604157d5910b19", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10656, "upload_time": "2015-04-24T05:23:48", "upload_time_iso_8601": "2015-04-24T05:23:48.944179Z", "url": "https://files.pythonhosted.org/packages/37/1f/7388f4aca3be58eed87674b17d0c83f2a4e3fc515f24a9edd8cbca27c19c/inotify-0.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95d162520704bb888901feb8c757d649", "sha256": "2504557e1c80c1f828fdcb23d536baa3ccdf74a08b3321a2bd08eec656c2b781"}, "downloads": -1, "filename": "inotify-0.2.0.tar.gz", "has_sig": false, "md5_digest": "95d162520704bb888901feb8c757d649", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5610, "upload_time": "2015-04-24T05:23:46", "upload_time_iso_8601": "2015-04-24T05:23:46.259030Z", "url": "https://files.pythonhosted.org/packages/8e/eb/d0823c88a9f837b1cf2c6650471b3cd58b076f141533394e94c6a21baee7/inotify-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4283c6822b6653482442e980dd135def", "sha256": "6cc87aa64b78b483a9008ce806498fe525e931f0a4df668fcc2372f5b425c1d3"}, "downloads": -1, "filename": "inotify-0.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "4283c6822b6653482442e980dd135def", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10657, "upload_time": "2015-04-24T05:24:54", "upload_time_iso_8601": "2015-04-24T05:24:54.310023Z", "url": "https://files.pythonhosted.org/packages/fc/bc/e4e3b011a5b742cba49722b2c0ceed8ad9f435a0fcce7b7c59d8c5fd65a2/inotify-0.2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78a832f62a80a9b934c85f13f5f2a252", "sha256": "3d45a6b15f5c77c17eff9ae6cda9a98f5f6cc38d8dcc448121cc83accdc8b6e7"}, "downloads": -1, "filename": "inotify-0.2.1.tar.gz", "has_sig": false, "md5_digest": "78a832f62a80a9b934c85f13f5f2a252", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5609, "upload_time": "2015-04-24T05:24:51", "upload_time_iso_8601": "2015-04-24T05:24:51.131493Z", "url": "https://files.pythonhosted.org/packages/9f/18/0e76867b1fb358d1d4b88f92bfd1640f3e205d2f9905c9291f45f171992a/inotify-0.2.1.tar.gz", "yanked": false}], "0.2.10": [{"comment_text": "", "digests": {"md5": "2c088ccb0ee31be9ee26e6aeb78e88d1", "sha256": "397f8785450e41f606fe4eb6f5e8e0a1c70b354b56495225fc6c6fe7e07db0c9"}, "downloads": -1, "filename": "inotify-0.2.10-py2-none-any.whl", "has_sig": false, "md5_digest": "2c088ccb0ee31be9ee26e6aeb78e88d1", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17175, "upload_time": "2018-07-07T06:46:44", "upload_time_iso_8601": "2018-07-07T06:46:44.767989Z", "url": "https://files.pythonhosted.org/packages/c7/fc/9728f1f708ecd5981007abe133d44fdcddf40915f8d13e12a140b77376ae/inotify-0.2.10-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33c7ee4a7cde60036a2d2a1a55c7c7c8", "sha256": "974a623a338482b62e16d4eb705fb863ed33ec178680fc3e96ccdf0df6c02a07"}, "downloads": -1, "filename": "inotify-0.2.10.tar.gz", "has_sig": false, "md5_digest": "33c7ee4a7cde60036a2d2a1a55c7c7c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9905, "upload_time": "2018-07-07T06:46:46", "upload_time_iso_8601": "2018-07-07T06:46:46.084659Z", "url": "https://files.pythonhosted.org/packages/35/cb/6d564f8a3f25d9516298dce151670d01e43a4b3b769c1c15f40453179cd5/inotify-0.2.10.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "a35b6f2be252d9338d2ff44b481bc3d6", "sha256": "f7a6dba50dbfa8e84f316d3aecc2effe6e30bb7083840f348d95fda31b29d5ec"}, "downloads": -1, "filename": "inotify-0.2.2-py2-none-any.whl", "has_sig": false, "md5_digest": "a35b6f2be252d9338d2ff44b481bc3d6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13127, "upload_time": "2015-04-24T08:20:09", "upload_time_iso_8601": "2015-04-24T08:20:09.422040Z", "url": "https://files.pythonhosted.org/packages/14/86/d159e13b9329258fdbbd92057b3142b82c47a81a37c36dbbb74bb8681b71/inotify-0.2.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "811cdd13aaa49a1237d853643faea992", "sha256": "795020bfee04af89d75d55c3087e5260f700b107bd00de7c25ef6db72f6ff96c"}, "downloads": -1, "filename": "inotify-0.2.2.tar.gz", "has_sig": false, "md5_digest": "811cdd13aaa49a1237d853643faea992", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7034, "upload_time": "2015-04-24T08:20:06", "upload_time_iso_8601": "2015-04-24T08:20:06.265386Z", "url": "https://files.pythonhosted.org/packages/61/73/cd6406496544d231305c17a29b9f2f8f02c4edb093052d129d307acddccb/inotify-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "33165ce83c6091f5fe7237699b1d02d5", "sha256": "c1581aa16940ee84329ba6005230a2222037a6d47f983ba2b363027102e35905"}, "downloads": -1, "filename": "inotify-0.2.3-py2-none-any.whl", "has_sig": false, "md5_digest": "33165ce83c6091f5fe7237699b1d02d5", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 12992, "upload_time": "2015-04-25T21:50:18", "upload_time_iso_8601": "2015-04-25T21:50:18.161113Z", "url": "https://files.pythonhosted.org/packages/fa/fa/0e66a48b2ec573472a8b8fbe26caaf4536349900cc059f957fd98452eccf/inotify-0.2.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9d42daeba534094d9bdcf6c36a98eeb", "sha256": "34ae589e4ff2f923eb569eafd24c8622e7fd5085168da7cf94731f62d1c04c10"}, "downloads": -1, "filename": "inotify-0.2.3.tar.gz", "has_sig": false, "md5_digest": "d9d42daeba534094d9bdcf6c36a98eeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6982, "upload_time": "2015-04-25T21:50:14", "upload_time_iso_8601": "2015-04-25T21:50:14.963554Z", "url": "https://files.pythonhosted.org/packages/d6/51/9035f4d1274b443877325aba17ac1c4c481242b09a4cc2140e75744f7c1c/inotify-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "8c7a245f6334e6562f96115ecaa307a6", "sha256": "62a401daeeaba55f80190dc59c1825f51e76ebe760c920bd235fda0b304e5fd7"}, "downloads": -1, "filename": "inotify-0.2.4-py2-none-any.whl", "has_sig": false, "md5_digest": "8c7a245f6334e6562f96115ecaa307a6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 12959, "upload_time": "2015-06-22T03:32:43", "upload_time_iso_8601": "2015-06-22T03:32:43.033084Z", "url": "https://files.pythonhosted.org/packages/1f/19/81802e31e3ee1ce0501722e3d5adee832f6e7afa625f1e14112ba49d6856/inotify-0.2.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "887589b712af64eeac55f2c089fe95ce", "sha256": "7c7d1f30e2a05db758f72df26fa016d5551c684dc979b3ba6017c90ed40788ce"}, "downloads": -1, "filename": "inotify-0.2.4.tar.gz", "has_sig": false, "md5_digest": "887589b712af64eeac55f2c089fe95ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6923, "upload_time": "2015-06-22T03:32:39", "upload_time_iso_8601": "2015-06-22T03:32:39.923401Z", "url": "https://files.pythonhosted.org/packages/0c/4f/959ce1f011c9e2747e6f2a28ecc92c6a80c4cb2133c68f8b2325a8696ddd/inotify-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "d849b7f692fe5a66cfc4cdb2bc25ceb8", "sha256": "3ce73aa2be7d92af7aa2cce1ba5c865b4238bad95f9881485d96958646b79292"}, "downloads": -1, "filename": "inotify-0.2.5-py2-none-any.whl", "has_sig": false, "md5_digest": "d849b7f692fe5a66cfc4cdb2bc25ceb8", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13347, "upload_time": "2016-06-07T12:21:51", "upload_time_iso_8601": "2016-06-07T12:21:51.551274Z", "url": "https://files.pythonhosted.org/packages/46/76/7e2524268f7ff1a6574a8bf3e1a93658afb08ab55dd7355ac52bc6bda097/inotify-0.2.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a427a4e8cce2e01a86fa26ab4d1c33ec", "sha256": "8b065f6066f743e960f82fc711b61b08d69eefa96fcf3cfb4016c04302d38692"}, "downloads": -1, "filename": "inotify-0.2.5.tar.gz", "has_sig": false, "md5_digest": "a427a4e8cce2e01a86fa26ab4d1c33ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7189, "upload_time": "2016-06-07T12:21:45", "upload_time_iso_8601": "2016-06-07T12:21:45.735471Z", "url": "https://files.pythonhosted.org/packages/81/d7/8f7621f29fb54585adfc73e25d3ac26bd7c649b65a7cae1c427294ae7aea/inotify-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "c3013f3900208134abe22d0cac59f836", "sha256": "adc12b638746aa0b626e2e5f464385ec7306c05a881fb4ca2c6c95b23c896cbf"}, "downloads": -1, "filename": "inotify-0.2.6-py2-none-any.whl", "has_sig": false, "md5_digest": "c3013f3900208134abe22d0cac59f836", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13347, "upload_time": "2016-06-09T03:00:25", "upload_time_iso_8601": "2016-06-09T03:00:25.113712Z", "url": "https://files.pythonhosted.org/packages/e0/70/63e761b9556b89563fcf859ed809a3a4a3f3a4868f5663d4c0cd9292827b/inotify-0.2.6-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17db71fc34e8d2cc4f8d3bc43a958a7c", "sha256": "1b3b8e8387bdd1a9deb392baec0b51371917c8af4dfa1125cfeded4568baca13"}, "downloads": -1, "filename": "inotify-0.2.6.tar.gz", "has_sig": false, "md5_digest": "17db71fc34e8d2cc4f8d3bc43a958a7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7192, "upload_time": "2016-06-09T03:00:20", "upload_time_iso_8601": "2016-06-09T03:00:20.472453Z", "url": "https://files.pythonhosted.org/packages/07/6c/bb24af2ae9ad51d178f0fe4f86bcef16d6ce0dcf9d4fcea278b1792509fe/inotify-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "2ba6f620469e3ce0a910a49dcbff2b70", "sha256": "51f67230eb61c60b98f5085675c1ee88bdfc166fb06c013b54535b8e91e63593"}, "downloads": -1, "filename": "inotify-0.2.7-py2-none-any.whl", "has_sig": false, "md5_digest": "2ba6f620469e3ce0a910a49dcbff2b70", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13770, "upload_time": "2016-07-16T15:03:58", "upload_time_iso_8601": "2016-07-16T15:03:58.916345Z", "url": "https://files.pythonhosted.org/packages/3b/b9/e22bd3dc1c4e947efc6375414000b94334e0d7fa254b26fdb6e4cea186a1/inotify-0.2.7-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ced4c0469f9fd64170d9d907e4aec208", "sha256": "4d2c5209ace99c5eeb39243715303dcfcb7a9de2ceb236819ac141277b6b233f"}, "downloads": -1, "filename": "inotify-0.2.7.tar.gz", "has_sig": false, "md5_digest": "ced4c0469f9fd64170d9d907e4aec208", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7313, "upload_time": "2016-07-16T15:03:56", "upload_time_iso_8601": "2016-07-16T15:03:56.740764Z", "url": "https://files.pythonhosted.org/packages/10/7b/515a83f4077ba43e86dade5bcf2e2eb19430a5d853217ea39e9bae1b9967/inotify-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "ce5c305b68670416e8e7cf2c90cf262d", "sha256": "8ee963fa5059b6a5af67384503607c3143d43d95a8fc0591dbc11aed83bc06b0"}, "downloads": -1, "filename": "inotify-0.2.8-py2-none-any.whl", "has_sig": false, "md5_digest": "ce5c305b68670416e8e7cf2c90cf262d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13971, "upload_time": "2016-09-07T01:10:53", "upload_time_iso_8601": "2016-09-07T01:10:53.565366Z", "url": "https://files.pythonhosted.org/packages/69/95/0235949da48d79608b5d34df31a33748b5bb331abf63c3c8401f51ecfa5f/inotify-0.2.8-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab4ba68c9aa831271d1249902d8d1a67", "sha256": "837638060997c2c1a87c015f56479f0e05d8403a47c6fe729aacd3746b885fe9"}, "downloads": -1, "filename": "inotify-0.2.8.tar.gz", "has_sig": false, "md5_digest": "ab4ba68c9aa831271d1249902d8d1a67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7576, "upload_time": "2016-09-07T01:10:51", "upload_time_iso_8601": "2016-09-07T01:10:51.081256Z", "url": "https://files.pythonhosted.org/packages/ab/3b/ad48cb45af4af32341fc6bf28497081a885d1e23777d2827f3c61d734f02/inotify-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "94f0f4e5dcace1d8873963cf71f6176c", "sha256": "f6ffb1c7355ec274dba10bd472662cf5b9ffbabedcce142c74443184535d7a10"}, "downloads": -1, "filename": "inotify-0.2.9.tar.gz", "has_sig": false, "md5_digest": "94f0f4e5dcace1d8873963cf71f6176c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9877, "upload_time": "2017-12-22T10:26:35", "upload_time_iso_8601": "2017-12-22T10:26:35.117617Z", "url": "https://files.pythonhosted.org/packages/38/ce/f73b72c2852b819025b0e826b0dc28dddd3ecc9c58c77a47432570d77679/inotify-0.2.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2c088ccb0ee31be9ee26e6aeb78e88d1", "sha256": "397f8785450e41f606fe4eb6f5e8e0a1c70b354b56495225fc6c6fe7e07db0c9"}, "downloads": -1, "filename": "inotify-0.2.10-py2-none-any.whl", "has_sig": false, "md5_digest": "2c088ccb0ee31be9ee26e6aeb78e88d1", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17175, "upload_time": "2018-07-07T06:46:44", "upload_time_iso_8601": "2018-07-07T06:46:44.767989Z", "url": "https://files.pythonhosted.org/packages/c7/fc/9728f1f708ecd5981007abe133d44fdcddf40915f8d13e12a140b77376ae/inotify-0.2.10-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33c7ee4a7cde60036a2d2a1a55c7c7c8", "sha256": "974a623a338482b62e16d4eb705fb863ed33ec178680fc3e96ccdf0df6c02a07"}, "downloads": -1, "filename": "inotify-0.2.10.tar.gz", "has_sig": false, "md5_digest": "33c7ee4a7cde60036a2d2a1a55c7c7c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9905, "upload_time": "2018-07-07T06:46:46", "upload_time_iso_8601": "2018-07-07T06:46:46.084659Z", "url": "https://files.pythonhosted.org/packages/35/cb/6d564f8a3f25d9516298dce151670d01e43a4b3b769c1c15f40453179cd5/inotify-0.2.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:53 2020"}