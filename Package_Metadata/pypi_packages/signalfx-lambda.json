{"info": {"author": "SignalFx, Inc", "author_email": "info@signalfx.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python"], "description": "SignalFx Python Lambda Wrapper\n==============================\n\nSignalFx Python Lambda Wrapper.\n\nUsage\n-----\n\nThe SignalFx Python Lambda Wrapper is a wrapper around an AWS Lambda\nPython function handler, used to instrument execution of the function\nand send metrics and traces to SignalFx.\n\nInstallation\n~~~~~~~~~~~~\n\nTo install from PyPi\n\n.. code::\n\n    pip install signalfx_lambda\n\nConfiguring the ingest endpoint\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, this function wrapper will send to the ``us0`` realm. If you are\nnot in this realm you will need to set the ``SIGNALFX_INGEST_ENDPOINT`` environment\nvariable to the correct realm ingest endpoint (``https://ingest.{REALM}.signalfx.com``).\nTo determine what realm you are in, check your profile page in the SignalFx\nweb application (click the avatar in the upper right and click My Profile).\n\n\nEnvironment Variables\n~~~~~~~~~~~~~~~~~~~~~\n\n**Note: the environment variables ``SIGNALFX_INGEST_ENDPOINT`` and ``SIGNALFX_AUTH_TOKEN`` are being deprecated and will not be supported in future releases.**\n\n.. code:: bash\n\n    SIGNALFX_ACCESS_TOKEN=access token\n\n    # endpoint for both metrics and tracer. Overridden by SIGNALFX_METRICS_URL\n    # and SIGNALFX_TRACING_URL if set\n    SIGNALFX_ENDPOINT_URL=http://<my_gateway>:8080\n\n    # optional metrics and tracing configuration\n\n    SIGNALFX_METRICS_URL=ingest endpoint [ default: https://pops.signalfx.com ]\n    SIGNALFX_SEND_TIMEOUT=timeout in seconds for sending datapoint [ default: 0.3 ]\n\n    SIGNALFX_TRACING_URL=tracing endpoint [ default: https://ingest.signalfx.com/v1/trace ]\n\n``SIGNALFX_ENDPOINT_URL`` can be used to configure a common endpoint for metrics and\ntraces, as is the case when forwarding with the Smart Gateway. The path ``/v1/trace``\nwill automatically be added to the endpoint for traces.\n\nIf either ``SIGNALFX_TRACING_URL`` or ``SIGNALFX_METRICS_URL`` are set, they will take\nprecendence over ``SIGNALFX_ENDPOINT_URL`` for their respective components.\n\nFor example, if only ``SIGNALFX_ENDPOINT_URL`` is set:\n\n.. code:: bash\n\n    SIGNALFX_ENDPOINT_URL=http://<my_gateway>:8080\n\nBoth metrics and traces will be sent to the gateway address.\n\nIf ``SIGNALFX_ENDPOINT_URL`` and ``SIGNALFX_METRICS_URL`` are set:\n\n.. code:: bash\n\n    SIGNALFX_METRICS_URL=https://pops.signalfx.com\n    SIGNALFX_ENDPOINT_URL=http://<my_gateway>:8080\n\nTraces will be sent to the gateway and metrics will go through POPS.\n\nWrapping a function\n~~~~~~~~~~~~~~~~~~~\n\nThere are two wrappers provided.\n\nFor metrics, decorate your handler with @signalfx_lambda.emits_metrics\n\n.. code:: python\n\n    import signalfx_lambda\n\n    @signalfx_lambda.emits_metrics\n    def handler(event, context):\n        # your code\n\nFor tracing, use the @signalfx_lambda.is_traced decorator\n\n.. code:: python\n\n    import signalfx_lambda\n\n    @signalfx_lambda.is_traced\n    def handler(event, context):\n        # your code\n\nThe decorators can be used individually or together.\n\nMetrics and dimensions sent by the metrics wrapper\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe Lambda wrapper sends the following metrics to SignalFx:\n\n+-----------------------+-----------------------+-----------------------+\n| Metric Name           | Type                  | Description           |\n+=======================+=======================+=======================+\n| function.invocations  | Counter               | Count number of       |\n|                       |                       | Lambda invocations    |\n+-----------------------+-----------------------+-----------------------+\n| function.cold_starts  | Counter               | Count number of cold  |\n|                       |                       | starts                |\n+-----------------------+-----------------------+-----------------------+\n| function.errors       | Counter               | Count number of       |\n|                       |                       | errors from           |\n|                       |                       | underlying Lambda     |\n|                       |                       | handler               |\n+-----------------------+-----------------------+-----------------------+\n| function.duration     | Gauge                 | Milliseconds in       |\n|                       |                       | execution time of     |\n|                       |                       | underlying Lambda     |\n|                       |                       | handler               |\n+-----------------------+-----------------------+-----------------------+\n\nThe Lambda wrapper adds the following dimensions to all data points sent\nto SignalFx:\n\n+----------------------------------+----------------------------------+\n| Dimension                        | Description                      |\n+==================================+==================================+\n| lambda_arn                       | ARN of the Lambda function       |\n|                                  | instance                         |\n+----------------------------------+----------------------------------+\n| aws_region                       | AWS Region                       |\n+----------------------------------+----------------------------------+\n| aws_account_id                   | AWS Account ID                   |\n+----------------------------------+----------------------------------+\n| aws_function_name                | AWS Function Name                |\n+----------------------------------+----------------------------------+\n| aws_function_version             | AWS Function Version             |\n+----------------------------------+----------------------------------+\n| aws_function_qualifier           | AWS Function Version Qualifier   |\n|                                  | (version or version alias if it  |\n|                                  | is not an event source mapping   |\n|                                  | Lambda invocation)               |\n+----------------------------------+----------------------------------+\n| event_source_mappings            | AWS Function Name (if it is an   |\n|                                  | event source mapping Lambda      |\n|                                  | invocation)                      |\n+----------------------------------+----------------------------------+\n| aws_execution_env                | AWS execution environment        |\n|                                  | (e.g.\u00a0AWS_Lambda_python3.6)      |\n+----------------------------------+----------------------------------+\n| function_wrapper_version         | SignalFx function wrapper        |\n|                                  | qualifier                        |\n|                                  | (e.g.\u00a0signalfx_lambda_0.0.2)     |\n+----------------------------------+----------------------------------+\n| metric_source                    | The literal value of             |\n|                                  | \u2018lambda_wrapper\u2019                 |\n+----------------------------------+----------------------------------+\n\nTraces and tags sent by the Tracing wrapper\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe tracing wrapper creates a span for the wrapper handler. This span has the following tags:\n\n+----------------------------------+----------------------------------+\n| Tag                              | Description                      |\n+==================================+==================================+\n| aws_request_id                   | AWS Request ID                   |\n+----------------------------------+----------------------------------+\n| lambda_arn                       | ARN of the Lambda function       |\n|                                  | instance                         |\n+----------------------------------+----------------------------------+\n| aws_region                       | AWS Region                       |\n+----------------------------------+----------------------------------+\n| aws_account_id                   | AWS Account ID                   |\n+----------------------------------+----------------------------------+\n| aws_function_name                | AWS Function Name                |\n+----------------------------------+----------------------------------+\n| aws_function_version             | AWS Function Version             |\n+----------------------------------+----------------------------------+\n| aws_function_qualifier           | AWS Function Version Qualifier   |\n|                                  | (version or version alias if it  |\n|                                  | is not an event source mapping   |\n|                                  | Lambda invocation)               |\n+----------------------------------+----------------------------------+\n| event_source_mappings            | AWS Function Name (if it is an   |\n|                                  | event source mapping Lambda      |\n|                                  | invocation)                      |\n+----------------------------------+----------------------------------+\n| aws_execution_env                | AWS execution environment        |\n|                                  | (e.g.\u00a0AWS_Lambda_python3.6)      |\n+----------------------------------+----------------------------------+\n| function_wrapper_version         | SignalFx function wrapper        |\n|                                  | qualifier                        |\n|                                  | (e.g.\u00a0signalfx_lambda_0.0.2)     |\n+----------------------------------+----------------------------------+\n| component                        | The literal value of             |\n|                                  | \u2018python-lambda-wrapper\u2019          |\n+----------------------------------+----------------------------------+\n\nSending custom metric from the Lambda function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    import signalfx_lambda\n\n    # sending application_performance metric with value 100 and dimension abc:def\n    signalfx_lambda.send_gauge('application_performance', 100, {'abc':'def'})\n\n    # sending counter metric with no dimension\n    signalfx_lambda.send_counter('database_calls', 1)\n\nAdding manual tracing to the Lambda function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nManual instrumentation can be added to trace critical parts of your handler\nfunction.\n\n.. code:: python\n\n    import opentracing\n\n    tracer = opentracing.tracer\n\n    def some_function():\n        with tracer.start_active_span(\"span_name\", tags=tags) as scope:\n\n            # do some work\n\n            span = scope.span\n            span.set_tag(\"example_tag\", \"example_value\")\n\nMore examples and usage information can be found in the Jaeger Python Tracer\n`documentation <https://github.com/signalfx/jaeger-client-python>`_.\n\nTesting it out locally\n~~~~~~~~~~~~~~~~~~~~~~\n\nUse python-lambda-local\n\n.. code::\n\n    pip install python-lambda-local\n\n.. code::\n\n    python-lambda-local tests/test.py tests/event.json -a 'arn:aws:lambda:us-east-1:accountId:function:functionNamePython:$LATEST'\n\nPackaging\n~~~~~~~~~\n\n.. code::\n\n    python setup.py bdist_wheel --universal\n\nLicense\n~~~~~~~\n\nApache Software License v2. Copyright \u00a9 2014-2019 SignalFx\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/signalfx/lambda-python", "keywords": "", "license": "Apache Software License v2", "maintainer": "", "maintainer_email": "", "name": "signalfx-lambda", "package_url": "https://pypi.org/project/signalfx-lambda/", "platform": "", "project_url": "https://pypi.org/project/signalfx-lambda/", "project_urls": {"Homepage": "https://github.com/signalfx/lambda-python"}, "release_url": "https://pypi.org/project/signalfx-lambda/0.2.1/", "requires_dist": ["signalfx (>=1.0.16)", "sfx-jaeger-client (>=3.13.1.dev0)", "six (>=1.4.0)"], "requires_python": "", "summary": "SignalFx Lambda Python Wrapper", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>SignalFx Python Lambda Wrapper.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The SignalFx Python Lambda Wrapper is a wrapper around an AWS Lambda\nPython function handler, used to instrument execution of the function\nand send metrics and traces to SignalFx.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install from PyPi</p>\n<pre>pip install signalfx_lambda\n</pre>\n</div>\n<div id=\"configuring-the-ingest-endpoint\">\n<h3>Configuring the ingest endpoint</h3>\n<p>By default, this function wrapper will send to the <tt>us0</tt> realm. If you are\nnot in this realm you will need to set the <tt>SIGNALFX_INGEST_ENDPOINT</tt> environment\nvariable to the correct realm ingest endpoint (<tt><span class=\"pre\">https://ingest.{REALM}.signalfx.com</span></tt>).\nTo determine what realm you are in, check your profile page in the SignalFx\nweb application (click the avatar in the upper right and click My Profile).</p>\n</div>\n<div id=\"environment-variables\">\n<h3>Environment Variables</h3>\n<p><strong>Note: the environment variables ``SIGNALFX_INGEST_ENDPOINT`` and ``SIGNALFX_AUTH_TOKEN`` are being deprecated and will not be supported in future releases.</strong></p>\n<pre><span class=\"nv\">SIGNALFX_ACCESS_TOKEN</span><span class=\"o\">=</span>access token\n\n<span class=\"c1\"># endpoint for both metrics and tracer. Overridden by SIGNALFX_METRICS_URL\n# and SIGNALFX_TRACING_URL if set\n</span><span class=\"nv\">SIGNALFX_ENDPOINT_URL</span><span class=\"o\">=</span>http://&lt;my_gateway&gt;:8080\n\n<span class=\"c1\"># optional metrics and tracing configuration\n</span>\n<span class=\"nv\">SIGNALFX_METRICS_URL</span><span class=\"o\">=</span>ingest endpoint <span class=\"o\">[</span> default: https://pops.signalfx.com <span class=\"o\">]</span>\n<span class=\"nv\">SIGNALFX_SEND_TIMEOUT</span><span class=\"o\">=</span>timeout in seconds <span class=\"k\">for</span> sending datapoint <span class=\"o\">[</span> default: <span class=\"m\">0</span>.3 <span class=\"o\">]</span>\n\n<span class=\"nv\">SIGNALFX_TRACING_URL</span><span class=\"o\">=</span>tracing endpoint <span class=\"o\">[</span> default: https://ingest.signalfx.com/v1/trace <span class=\"o\">]</span>\n</pre>\n<p><tt>SIGNALFX_ENDPOINT_URL</tt> can be used to configure a common endpoint for metrics and\ntraces, as is the case when forwarding with the Smart Gateway. The path <tt>/v1/trace</tt>\nwill automatically be added to the endpoint for traces.</p>\n<p>If either <tt>SIGNALFX_TRACING_URL</tt> or <tt>SIGNALFX_METRICS_URL</tt> are set, they will take\nprecendence over <tt>SIGNALFX_ENDPOINT_URL</tt> for their respective components.</p>\n<p>For example, if only <tt>SIGNALFX_ENDPOINT_URL</tt> is set:</p>\n<pre><span class=\"nv\">SIGNALFX_ENDPOINT_URL</span><span class=\"o\">=</span>http://&lt;my_gateway&gt;:8080\n</pre>\n<p>Both metrics and traces will be sent to the gateway address.</p>\n<p>If <tt>SIGNALFX_ENDPOINT_URL</tt> and <tt>SIGNALFX_METRICS_URL</tt> are set:</p>\n<pre><span class=\"nv\">SIGNALFX_METRICS_URL</span><span class=\"o\">=</span>https://pops.signalfx.com\n<span class=\"nv\">SIGNALFX_ENDPOINT_URL</span><span class=\"o\">=</span>http://&lt;my_gateway&gt;:8080\n</pre>\n<p>Traces will be sent to the gateway and metrics will go through POPS.</p>\n</div>\n<div id=\"wrapping-a-function\">\n<h3>Wrapping a function</h3>\n<p>There are two wrappers provided.</p>\n<p>For metrics, decorate your handler with @signalfx_lambda.emits_metrics</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">signalfx_lambda</span>\n\n<span class=\"nd\">@signalfx_lambda</span><span class=\"o\">.</span><span class=\"n\">emits_metrics</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># your code</span>\n</pre>\n<p>For tracing, use the @signalfx_lambda.is_traced decorator</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">signalfx_lambda</span>\n\n<span class=\"nd\">@signalfx_lambda</span><span class=\"o\">.</span><span class=\"n\">is_traced</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># your code</span>\n</pre>\n<p>The decorators can be used individually or together.</p>\n</div>\n<div id=\"metrics-and-dimensions-sent-by-the-metrics-wrapper\">\n<h3>Metrics and dimensions sent by the metrics wrapper</h3>\n<p>The Lambda wrapper sends the following metrics to SignalFx:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Metric Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>function.invocations</td>\n<td>Counter</td>\n<td>Count number of\nLambda invocations</td>\n</tr>\n<tr><td>function.cold_starts</td>\n<td>Counter</td>\n<td>Count number of cold\nstarts</td>\n</tr>\n<tr><td>function.errors</td>\n<td>Counter</td>\n<td>Count number of\nerrors from\nunderlying Lambda\nhandler</td>\n</tr>\n<tr><td>function.duration</td>\n<td>Gauge</td>\n<td>Milliseconds in\nexecution time of\nunderlying Lambda\nhandler</td>\n</tr>\n</tbody>\n</table>\n<p>The Lambda wrapper adds the following dimensions to all data points sent\nto SignalFx:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Dimension</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>lambda_arn</td>\n<td>ARN of the Lambda function\ninstance</td>\n</tr>\n<tr><td>aws_region</td>\n<td>AWS Region</td>\n</tr>\n<tr><td>aws_account_id</td>\n<td>AWS Account ID</td>\n</tr>\n<tr><td>aws_function_name</td>\n<td>AWS Function Name</td>\n</tr>\n<tr><td>aws_function_version</td>\n<td>AWS Function Version</td>\n</tr>\n<tr><td>aws_function_qualifier</td>\n<td>AWS Function Version Qualifier\n(version or version alias if it\nis not an event source mapping\nLambda invocation)</td>\n</tr>\n<tr><td>event_source_mappings</td>\n<td>AWS Function Name (if it is an\nevent source mapping Lambda\ninvocation)</td>\n</tr>\n<tr><td>aws_execution_env</td>\n<td>AWS execution environment\n(e.g.\u00a0AWS_Lambda_python3.6)</td>\n</tr>\n<tr><td>function_wrapper_version</td>\n<td>SignalFx function wrapper\nqualifier\n(e.g.\u00a0signalfx_lambda_0.0.2)</td>\n</tr>\n<tr><td>metric_source</td>\n<td>The literal value of\n\u2018lambda_wrapper\u2019</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"traces-and-tags-sent-by-the-tracing-wrapper\">\n<h3>Traces and tags sent by the Tracing wrapper</h3>\n<p>The tracing wrapper creates a span for the wrapper handler. This span has the following tags:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Tag</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>aws_request_id</td>\n<td>AWS Request ID</td>\n</tr>\n<tr><td>lambda_arn</td>\n<td>ARN of the Lambda function\ninstance</td>\n</tr>\n<tr><td>aws_region</td>\n<td>AWS Region</td>\n</tr>\n<tr><td>aws_account_id</td>\n<td>AWS Account ID</td>\n</tr>\n<tr><td>aws_function_name</td>\n<td>AWS Function Name</td>\n</tr>\n<tr><td>aws_function_version</td>\n<td>AWS Function Version</td>\n</tr>\n<tr><td>aws_function_qualifier</td>\n<td>AWS Function Version Qualifier\n(version or version alias if it\nis not an event source mapping\nLambda invocation)</td>\n</tr>\n<tr><td>event_source_mappings</td>\n<td>AWS Function Name (if it is an\nevent source mapping Lambda\ninvocation)</td>\n</tr>\n<tr><td>aws_execution_env</td>\n<td>AWS execution environment\n(e.g.\u00a0AWS_Lambda_python3.6)</td>\n</tr>\n<tr><td>function_wrapper_version</td>\n<td>SignalFx function wrapper\nqualifier\n(e.g.\u00a0signalfx_lambda_0.0.2)</td>\n</tr>\n<tr><td>component</td>\n<td>The literal value of\n\u2018python-lambda-wrapper\u2019</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"sending-custom-metric-from-the-lambda-function\">\n<h3>Sending custom metric from the Lambda function</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">signalfx_lambda</span>\n\n<span class=\"c1\"># sending application_performance metric with value 100 and dimension abc:def</span>\n<span class=\"n\">signalfx_lambda</span><span class=\"o\">.</span><span class=\"n\">send_gauge</span><span class=\"p\">(</span><span class=\"s1\">'application_performance'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'abc'</span><span class=\"p\">:</span><span class=\"s1\">'def'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># sending counter metric with no dimension</span>\n<span class=\"n\">signalfx_lambda</span><span class=\"o\">.</span><span class=\"n\">send_counter</span><span class=\"p\">(</span><span class=\"s1\">'database_calls'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"adding-manual-tracing-to-the-lambda-function\">\n<h3>Adding manual tracing to the Lambda function</h3>\n<p>Manual instrumentation can be added to trace critical parts of your handler\nfunction.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">opentracing</span>\n\n<span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"n\">opentracing</span><span class=\"o\">.</span><span class=\"n\">tracer</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">some_function</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">start_active_span</span><span class=\"p\">(</span><span class=\"s2\">\"span_name\"</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">tags</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">scope</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># do some work</span>\n\n        <span class=\"n\">span</span> <span class=\"o\">=</span> <span class=\"n\">scope</span><span class=\"o\">.</span><span class=\"n\">span</span>\n        <span class=\"n\">span</span><span class=\"o\">.</span><span class=\"n\">set_tag</span><span class=\"p\">(</span><span class=\"s2\">\"example_tag\"</span><span class=\"p\">,</span> <span class=\"s2\">\"example_value\"</span><span class=\"p\">)</span>\n</pre>\n<p>More examples and usage information can be found in the Jaeger Python Tracer\n<a href=\"https://github.com/signalfx/jaeger-client-python\" rel=\"nofollow\">documentation</a>.</p>\n</div>\n<div id=\"testing-it-out-locally\">\n<h3>Testing it out locally</h3>\n<p>Use python-lambda-local</p>\n<pre>pip install python-lambda-local\n</pre>\n<pre>python-lambda-local tests/test.py tests/event.json -a 'arn:aws:lambda:us-east-1:accountId:function:functionNamePython:$LATEST'\n</pre>\n</div>\n<div id=\"packaging\">\n<h3>Packaging</h3>\n<pre>python setup.py bdist_wheel --universal\n</pre>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Apache Software License v2. Copyright \u00a9 2014-2019 SignalFx</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6293848, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "8a42f2c99fbeb4b431b1c4d2bdcc1e7a", "sha256": "8149ab5b26090022a468259f93c171950e419bfd983d7d5b25ca3c5efaf7b9f0"}, "downloads": -1, "filename": "signalfx_lambda-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8a42f2c99fbeb4b431b1c4d2bdcc1e7a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6388, "upload_time": "2017-11-15T05:01:54", "upload_time_iso_8601": "2017-11-15T05:01:54.454508Z", "url": "https://files.pythonhosted.org/packages/56/39/d11b0b8be0780ae5508778084803d7aa269ca430c99ada4040552e80d32b/signalfx_lambda-0.0.4-py2.py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "2fe6f5eba35064a4469c0066d59bb5cf", "sha256": "fedb8cc2cd56399a51e7ecc7b60a4409f209c932adf910ab03b9940243d92dce"}, "downloads": -1, "filename": "signalfx_lambda-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2fe6f5eba35064a4469c0066d59bb5cf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15131, "upload_time": "2019-03-11T15:08:25", "upload_time_iso_8601": "2019-03-11T15:08:25.281548Z", "url": "https://files.pythonhosted.org/packages/8c/38/80356e23e252779526fd194d7ede928f344f8a68fe21043b66e0efe4b8eb/signalfx_lambda-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.0.1": [{"comment_text": "", "digests": {"md5": "6d2de069db62f4476ab40882686080d9", "sha256": "0717dbcf26985e1202f59277764b6009a9c8eb89bb90d927dbcfc04abdf22b73"}, "downloads": -1, "filename": "signalfx_lambda-0.1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d2de069db62f4476ab40882686080d9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15161, "upload_time": "2019-03-11T20:21:34", "upload_time_iso_8601": "2019-03-11T20:21:34.321282Z", "url": "https://files.pythonhosted.org/packages/11/22/229dc9245d35e6644b9c3ff857c6aed70e527a011185f3b3f38c6df77640/signalfx_lambda-0.1.0.1-py2.py3-none-any.whl", "yanked": false}], "0.1.1.1": [{"comment_text": "", "digests": {"md5": "82ab8e3907d9fa5f766948d72bec32ff", "sha256": "0db3aaecec7a7851bffaa293c402eed727d5041f3069d1f69c629640c6311640"}, "downloads": -1, "filename": "signalfx_lambda-0.1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "82ab8e3907d9fa5f766948d72bec32ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15336, "upload_time": "2019-03-19T17:39:16", "upload_time_iso_8601": "2019-03-19T17:39:16.616284Z", "url": "https://files.pythonhosted.org/packages/93/ea/64ab798e0beb08ea3dbe3f89b2a17d474c18df1564f2fb55f98eda613181/signalfx_lambda-0.1.1.1-py2.py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d81ed47b68af36bbc87234c3ca39ce97", "sha256": "78e1e9bba5e43ed0a6adca36a46ac834445ce83501e6c2b6ff369fae7277daaa"}, "downloads": -1, "filename": "signalfx_lambda-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d81ed47b68af36bbc87234c3ca39ce97", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15347, "upload_time": "2019-04-02T11:47:16", "upload_time_iso_8601": "2019-04-02T11:47:16.151004Z", "url": "https://files.pythonhosted.org/packages/67/b3/61b9f633bbec83c997ff403cace908e204f058fa04d9e229ddb9a5089b78/signalfx_lambda-0.1.2-py2.py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "27c86c7a0e138228fe5ca51676375c8b", "sha256": "72b2045d4a14023f386bab12a2904ad273baa927467f06cc018784ac384ef1a3"}, "downloads": -1, "filename": "signalfx_lambda-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "27c86c7a0e138228fe5ca51676375c8b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15324, "upload_time": "2019-06-11T18:18:53", "upload_time_iso_8601": "2019-06-11T18:18:53.304055Z", "url": "https://files.pythonhosted.org/packages/ae/41/497a63229fb4223b4b6cefa860018eb808888ce514972432a747e7d860f7/signalfx_lambda-0.1.3-py2.py3-none-any.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a66ab524909bb23a39ed54fa0eaf87b3", "sha256": "37f030cfa462f15d3bdf6e3e4ec1afd5ee91974fd8b9ca5d91f6acabb5117cb4"}, "downloads": -1, "filename": "signalfx_lambda-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a66ab524909bb23a39ed54fa0eaf87b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11807, "upload_time": "2019-07-26T15:42:40", "upload_time_iso_8601": "2019-07-26T15:42:40.186634Z", "url": "https://files.pythonhosted.org/packages/cc/9d/1a12b40cde5688955f5e6e36d966f0f49fe18fb1635de6c2614847afbae5/signalfx_lambda-0.1.4-py2.py3-none-any.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "c9b960dbbf61cd7ba162a3caec5cfff1", "sha256": "4ba8b7f27fbffb3a90f4073243a5d39927f5037f43bd9b3a34ba404e105a6a65"}, "downloads": -1, "filename": "signalfx_lambda-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c9b960dbbf61cd7ba162a3caec5cfff1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11793, "upload_time": "2019-08-08T17:33:11", "upload_time_iso_8601": "2019-08-08T17:33:11.661729Z", "url": "https://files.pythonhosted.org/packages/9e/b6/84adff6fffbe30b61abc12c348d5de3e9e298434ad3ea31d2b8da12cb8e3/signalfx_lambda-0.1.5-py2.py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "28f6e56026e5c810f132da66da3ad90a", "sha256": "5d4fe8c1e352904a5820eb3990e3a95d406cf9e7cbce6975d56e1d9ca2ef8844"}, "downloads": -1, "filename": "signalfx_lambda-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "28f6e56026e5c810f132da66da3ad90a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11858, "upload_time": "2019-12-06T17:59:12", "upload_time_iso_8601": "2019-12-06T17:59:12.480337Z", "url": "https://files.pythonhosted.org/packages/35/4d/367bb59ff8f773ab0c1df7a82cd3058f51ce37a5a9800e289949335fcf5e/signalfx_lambda-0.2.0-py2.py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4a7d332b7adaa6e4f5d52ef52015d065", "sha256": "f4179af5ac1ccfdef685662ef5559a4d31c1db5e7d4567cb640d07a2f815b721"}, "downloads": -1, "filename": "signalfx_lambda-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4a7d332b7adaa6e4f5d52ef52015d065", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11835, "upload_time": "2019-12-13T15:53:48", "upload_time_iso_8601": "2019-12-13T15:53:48.777193Z", "url": "https://files.pythonhosted.org/packages/8b/58/7c29f9f5d3e6bec3e32a67a859fa007636449d08167d23b361ce1932d10e/signalfx_lambda-0.2.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a7d332b7adaa6e4f5d52ef52015d065", "sha256": "f4179af5ac1ccfdef685662ef5559a4d31c1db5e7d4567cb640d07a2f815b721"}, "downloads": -1, "filename": "signalfx_lambda-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4a7d332b7adaa6e4f5d52ef52015d065", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11835, "upload_time": "2019-12-13T15:53:48", "upload_time_iso_8601": "2019-12-13T15:53:48.777193Z", "url": "https://files.pythonhosted.org/packages/8b/58/7c29f9f5d3e6bec3e32a67a859fa007636449d08167d23b361ce1932d10e/signalfx_lambda-0.2.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:11:46 2020"}