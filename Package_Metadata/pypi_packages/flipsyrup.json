{"info": {"author": "Shinya Takamaeda-Yamazaki", "author_email": "shinya.takamaeda_at_gmail_com", "bugtrack_url": null, "classifiers": [], "description": "flipSyrup\r\n=========\r\n\r\nCycle-Accurate Hardware Simulation Framework on Abstract FPGA Platforms\r\n\r\nCopyright (C) 2013, Shinya Takamaeda-Yamazaki\r\n\r\nE-mail: shinya\\_at\\_is.naist.jp\r\n\r\nLicense\r\n=======\r\n\r\nApache License 2.0 (http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\nWhat's flipSyrup?\r\n=================\r\n\r\nflipSyrup is an FPGA-based prototyping framework on modern FPGA\r\nplatforms.\r\n\r\nflipSyrup genrates an AXI4 IP-core package from your prototyping target\r\nRTL design implemented under the resource abstraction of FPGA platform\r\ngiven by flipSyrup. The generated IP-core can be used as a standard\r\nIP-core with other common IP-cores together.\r\n\r\nflipSyrup supports both single FPGA platform and multi-FPGA platform.\r\nYou can implement a cycle-accurate prototyping system on both\r\nsituations.\r\n\r\nflipSyrup employs two resources abstractions that an FPGA platform has.\r\n\r\n-  Syrup Memory\r\n\r\n   -  Memory system abstraction.\r\n   -  Prototyping target logic can use this abstract memory as an ideal\r\n      single-cycle memory.\r\n   -  flipSyrup compiler automatically synthesizes a cache-based memory\r\n      system to simulate cycle-accurately the taget behavior.\r\n\r\n-  Syrup Channel\r\n\r\n   -  Inter-FPGA interconnection abstraction for multi-FPGA platform\r\n      based prototyping.\r\n   -  Prototyping target logic can use this abstrct channel as a\r\n      register to be connected to its neighbor FPGA.\r\n   -  flipSyrup compiler automatically synthesizes a FIFO-based\r\n      synchronizatoin system to communicate with neighbor FPGAs.\r\n\r\nRequirements\r\n============\r\n\r\nSoftware\r\n--------\r\n\r\n-  Python (2.7 or later, 3.3 or later)\r\n-  Icarus Verilog (0.9.6 or later)\r\n-  'iverilog -E' command is used for the preprocessor.\r\n-  Jinja2 (2.7 or later)\r\n-  The code generator uses Jinja2 template engine.\r\n-  'pip install jinja2' (for Python 2.x) or 'pip3 install jinja2' (for\r\n   Python 3.x)\r\n\r\n-  Pyverilog (Python-based Verilog HDL Design Processing Toolkit) is\r\n   already included in this package.\r\n\r\nfor RTL simulation\r\n~~~~~~~~~~~~~~~~~~\r\n\r\n-  Icarus Verilog or Synopsys VCS\r\n-  Icarus Verilog is an open-sourced Verilog simulator\r\n-  VCS is a very fast commercial Verilog simulator\r\n\r\nFor synthesis of an FPGA circuit design (bit-file)\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n-  Xilinx Platform Studio (14.6 or later)\r\n\r\n(Recommended) FPGA Board\r\n------------------------\r\n\r\nSingle FPGA Platform\r\n~~~~~~~~~~~~~~~~~~~~\r\n\r\n-  Digilent Atlys (Spartan-6)\r\n-  Xilinx ML605 (Virtex-6)\r\n-  Xilinx VC707 (Virtex-7)\r\n\r\nMulti-FPGA Platform\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\n-  ScalableCore System (Spartan-6)\r\n\r\nInstallation\r\n============\r\n\r\nIf you want to use flipSyrup as a general library, you can install on\r\nyour environment by using setup.py.\r\n\r\nIf Python 2.7 is used,\r\n\r\n::\r\n\r\n    python setup.py install\r\n\r\nIf Python 3.x is used,\r\n\r\n::\r\n\r\n    python3 setup.py install\r\n\r\nThen you can use the flipSyrup command from your console (the version\r\nnumber depends on your environment).\r\n\r\n::\r\n\r\n    flipsyrup-0.8.0-py3.4.1\r\n\r\nGetting Started\r\n===============\r\n\r\nFirst, please make sure TARGET in 'base.mk' in 'input' is correctly\r\ndefined. If you use the installed pycoram command on your environment,\r\nplease modify 'TARGET' in base.mk as below (the version number depends\r\non your environment)\r\n\r\n::\r\n\r\n    TARGET=flipsyrup-0.8.0-py3.4.1\r\n\r\nYou can find the sample input projects in 'input/tests/singleport'.\r\n\r\n-  userlogic.v : User-defined Verilog code using Syrup memory blocks\r\n\r\nThen type 'make' and 'make run' to simulate sample system.\r\n\r\n::\r\n\r\n    make build\r\n    make sim\r\n\r\nOr type commands as below directly.\r\n\r\n::\r\n\r\n    python flipsyrup/flipsyrup.py input/sample.config -t userlogic -I include/ --usertest=input/tests/singleport/testbench.v input/tests/singleport/userlogic.v \r\n    iverilog -I syrup_userlogic_v1_00_a/hdl/verilog/ syrup_userlogic_v1_00_a/test/testbench_userlogic.v \r\n    ./a.out\r\n\r\nflipSyrup compiler generates a directory for IP-core\r\n(syrup\\_userlogic\\_v1\\_00\\_a, in this example).\r\n\r\n'syrup\\_userlogic\\_v1\\_00\\_a.v' includes \\* IP-core RTL design\r\n(hdl/verilog/syrup\\_userlogic.v) \\* Test bench\r\n(test/testbench\\_userlogic.v) \\* XPS setting files\r\n(syrup\\_userlogic\\_v2\\_1\\_0.{mpd,pao,tcl})\r\n\r\nA bit-stream can be synthesized by using Xilinx Platform Studio. Please\r\ncopy the generated IP-core into 'pcores' directory of XPS project.\r\n\r\nThis software has some sample project in 'input'. To build them, please\r\nmodify 'Makefile', so that the corresponding files and parameters are\r\nselected (especially INPUT, MEMIMG and USERTEST)\r\n\r\nflipSyrup Command Options\r\n=========================\r\n\r\nCommand\r\n-------\r\n\r\n::\r\n\r\n    python flipsyrup.py [config] [-t topmodule] [-I includepath]+ [--memimg=filename] [--usertest=filename] [file]+\r\n\r\nDescription\r\n-----------\r\n\r\n-  file\r\n\r\n   -  User-logic Verilog file (.v) and FPGA system memory specification\r\n      (.config). Automatically, .v file is recognized as a user-logic\r\n      Verilog file, and .config file recongnized as a memory\r\n      specification of used FPGA system, respectively.\r\n\r\n-  config\r\n\r\n   -  Configuration file which includes memory and device specification\r\n\r\n-  -t\r\n\r\n   -  Name of user-defined top module, default is \"userlogic\".\r\n\r\n-  -I\r\n\r\n   -  Include path for input Verilog HDL files.\r\n\r\n-  --memimg\r\n\r\n   -  DRAM image file in HEX DRAM (option, if you need). The file is\r\n      copied into test directory. If no file is assigned, the array is\r\n      initialized with incremental values.\r\n\r\n-  --usertest\r\n\r\n   -  User-defined test code file (option, if you need). The code is\r\n      copied into testbench script.\r\n\r\nPublication\r\n===========\r\n\r\n-  Shinya Takamaeda-Yamazaki and Kenji Kise: flipSyrup: Cycle-Accurate\r\n   Hardware Simulation Framework on Abstract FPGA Platforms, 24th\r\n   International Conference on Field Programmable Logic and Applications\r\n   (FPL 2014) (Poster), September 2014.\r\n\r\nRelated Project\r\n===============\r\n\r\n`Pyverilog <http://shtaxxx.github.io/Pyverilog/>`__ - Python-based\r\nHardware Design Processing Toolkit for Verilog HDL - Used as basic code\r\nanalyser and generator", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://shtaxxx.github.io/flipSyrup/", "keywords": "FPGA,Verilog HDL,Memory System Abstraction,IP-core,AMBA AXI4, FPGA-based Rapid Prototyping, Cycle-Accurate Simulation", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "flipsyrup", "package_url": "https://pypi.org/project/flipsyrup/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/flipsyrup/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://shtaxxx.github.io/flipSyrup/"}, "release_url": "https://pypi.org/project/flipsyrup/0.9.0/", "requires_dist": null, "requires_python": null, "summary": "Cycle-Accurate Hardware Simulation Framework on Abstract FPGA Platforms", "version": "0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"flipsyrup\">\n<h2>flipSyrup</h2>\n<p>Cycle-Accurate Hardware Simulation Framework on Abstract FPGA Platforms</p>\n<p>Copyright (C) 2013, Shinya Takamaeda-Yamazaki</p>\n<p>E-mail: shinya_at_is.naist.jp</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Apache License 2.0 (<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a>)</p>\n</div>\n<div id=\"what-s-flipsyrup\">\n<h2>What\u2019s flipSyrup?</h2>\n<p>flipSyrup is an FPGA-based prototyping framework on modern FPGA\nplatforms.</p>\n<p>flipSyrup genrates an AXI4 IP-core package from your prototyping target\nRTL design implemented under the resource abstraction of FPGA platform\ngiven by flipSyrup. The generated IP-core can be used as a standard\nIP-core with other common IP-cores together.</p>\n<p>flipSyrup supports both single FPGA platform and multi-FPGA platform.\nYou can implement a cycle-accurate prototyping system on both\nsituations.</p>\n<p>flipSyrup employs two resources abstractions that an FPGA platform has.</p>\n<ul>\n<li>Syrup Memory<ul>\n<li>Memory system abstraction.</li>\n<li>Prototyping target logic can use this abstract memory as an ideal\nsingle-cycle memory.</li>\n<li>flipSyrup compiler automatically synthesizes a cache-based memory\nsystem to simulate cycle-accurately the taget behavior.</li>\n</ul>\n</li>\n<li>Syrup Channel<ul>\n<li>Inter-FPGA interconnection abstraction for multi-FPGA platform\nbased prototyping.</li>\n<li>Prototyping target logic can use this abstrct channel as a\nregister to be connected to its neighbor FPGA.</li>\n<li>flipSyrup compiler automatically synthesizes a FIFO-based\nsynchronizatoin system to communicate with neighbor FPGAs.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<div id=\"software\">\n<h3>Software</h3>\n<ul>\n<li>Python (2.7 or later, 3.3 or later)</li>\n<li>Icarus Verilog (0.9.6 or later)</li>\n<li>\u2018iverilog -E\u2019 command is used for the preprocessor.</li>\n<li>Jinja2 (2.7 or later)</li>\n<li>The code generator uses Jinja2 template engine.</li>\n<li>\u2018pip install jinja2\u2019 (for Python 2.x) or \u2018pip3 install jinja2\u2019 (for\nPython 3.x)</li>\n<li>Pyverilog (Python-based Verilog HDL Design Processing Toolkit) is\nalready included in this package.</li>\n</ul>\n<div id=\"for-rtl-simulation\">\n<h4>for RTL simulation</h4>\n<ul>\n<li>Icarus Verilog or Synopsys VCS</li>\n<li>Icarus Verilog is an open-sourced Verilog simulator</li>\n<li>VCS is a very fast commercial Verilog simulator</li>\n</ul>\n</div>\n<div id=\"for-synthesis-of-an-fpga-circuit-design-bit-file\">\n<h4>For synthesis of an FPGA circuit design (bit-file)</h4>\n<ul>\n<li>Xilinx Platform Studio (14.6 or later)</li>\n</ul>\n</div>\n</div>\n<div id=\"recommended-fpga-board\">\n<h3>(Recommended) FPGA Board</h3>\n<div id=\"single-fpga-platform\">\n<h4>Single FPGA Platform</h4>\n<ul>\n<li>Digilent Atlys (Spartan-6)</li>\n<li>Xilinx ML605 (Virtex-6)</li>\n<li>Xilinx VC707 (Virtex-7)</li>\n</ul>\n</div>\n<div id=\"multi-fpga-platform\">\n<h4>Multi-FPGA Platform</h4>\n<ul>\n<li>ScalableCore System (Spartan-6)</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>If you want to use flipSyrup as a general library, you can install on\nyour environment by using setup.py.</p>\n<p>If Python 2.7 is used,</p>\n<pre>python setup.py install\n</pre>\n<p>If Python 3.x is used,</p>\n<pre>python3 setup.py install\n</pre>\n<p>Then you can use the flipSyrup command from your console (the version\nnumber depends on your environment).</p>\n<pre>flipsyrup-0.8.0-py3.4.1\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>First, please make sure TARGET in \u2018base.mk\u2019 in \u2018input\u2019 is correctly\ndefined. If you use the installed pycoram command on your environment,\nplease modify \u2018TARGET\u2019 in base.mk as below (the version number depends\non your environment)</p>\n<pre>TARGET=flipsyrup-0.8.0-py3.4.1\n</pre>\n<p>You can find the sample input projects in \u2018input/tests/singleport\u2019.</p>\n<ul>\n<li>userlogic.v : User-defined Verilog code using Syrup memory blocks</li>\n</ul>\n<p>Then type \u2018make\u2019 and \u2018make run\u2019 to simulate sample system.</p>\n<pre>make build\nmake sim\n</pre>\n<p>Or type commands as below directly.</p>\n<pre>python flipsyrup/flipsyrup.py input/sample.config -t userlogic -I include/ --usertest=input/tests/singleport/testbench.v input/tests/singleport/userlogic.v\niverilog -I syrup_userlogic_v1_00_a/hdl/verilog/ syrup_userlogic_v1_00_a/test/testbench_userlogic.v\n./a.out\n</pre>\n<p>flipSyrup compiler generates a directory for IP-core\n(syrup_userlogic_v1_00_a, in this example).</p>\n<p>\u2018syrup_userlogic_v1_00_a.v\u2019 includes * IP-core RTL design\n(hdl/verilog/syrup_userlogic.v) * Test bench\n(test/testbench_userlogic.v) * XPS setting files\n(syrup_userlogic_v2_1_0.{mpd,pao,tcl})</p>\n<p>A bit-stream can be synthesized by using Xilinx Platform Studio. Please\ncopy the generated IP-core into \u2018pcores\u2019 directory of XPS project.</p>\n<p>This software has some sample project in \u2018input\u2019. To build them, please\nmodify \u2018Makefile\u2019, so that the corresponding files and parameters are\nselected (especially INPUT, MEMIMG and USERTEST)</p>\n</div>\n<div id=\"flipsyrup-command-options\">\n<h2>flipSyrup Command Options</h2>\n<div id=\"command\">\n<h3>Command</h3>\n<pre>python flipsyrup.py [config] [-t topmodule] [-I includepath]+ [--memimg=filename] [--usertest=filename] [file]+\n</pre>\n</div>\n<div id=\"description\">\n<h3>Description</h3>\n<ul>\n<li>file<ul>\n<li>User-logic Verilog file (.v) and FPGA system memory specification\n(.config). Automatically, .v file is recognized as a user-logic\nVerilog file, and .config file recongnized as a memory\nspecification of used FPGA system, respectively.</li>\n</ul>\n</li>\n<li>config<ul>\n<li>Configuration file which includes memory and device specification</li>\n</ul>\n</li>\n<li>-t<ul>\n<li>Name of user-defined top module, default is \u201cuserlogic\u201d.</li>\n</ul>\n</li>\n<li>-I<ul>\n<li>Include path for input Verilog HDL files.</li>\n</ul>\n</li>\n<li>\u2013memimg<ul>\n<li>DRAM image file in HEX DRAM (option, if you need). The file is\ncopied into test directory. If no file is assigned, the array is\ninitialized with incremental values.</li>\n</ul>\n</li>\n<li>\u2013usertest<ul>\n<li>User-defined test code file (option, if you need). The code is\ncopied into testbench script.</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"publication\">\n<h2>Publication</h2>\n<ul>\n<li>Shinya Takamaeda-Yamazaki and Kenji Kise: flipSyrup: Cycle-Accurate\nHardware Simulation Framework on Abstract FPGA Platforms, 24th\nInternational Conference on Field Programmable Logic and Applications\n(FPL 2014) (Poster), September 2014.</li>\n</ul>\n</div>\n<div id=\"related-project\">\n<h2>Related Project</h2>\n<p><a href=\"http://shtaxxx.github.io/Pyverilog/\" rel=\"nofollow\">Pyverilog</a> - Python-based\nHardware Design Processing Toolkit for Verilog HDL - Used as basic code\nanalyser and generator</p>\n</div>\n\n          </div>"}, "last_serial": 1304038, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "a70d1e086447fc21e075560c2606c424", "sha256": "55d9f5337881491a3c1c913e05c9050ff473aa760e0993c08e6743561c44dc11"}, "downloads": -1, "filename": "flipsyrup-0.9.0.tar.gz", "has_sig": false, "md5_digest": "a70d1e086447fc21e075560c2606c424", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159171, "upload_time": "2014-11-12T14:36:18", "upload_time_iso_8601": "2014-11-12T14:36:18.301858Z", "url": "https://files.pythonhosted.org/packages/50/ae/0e957d30bc8da8de88841c932229b35f43039ac9b96476b1eb9822ae5ace/flipsyrup-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a70d1e086447fc21e075560c2606c424", "sha256": "55d9f5337881491a3c1c913e05c9050ff473aa760e0993c08e6743561c44dc11"}, "downloads": -1, "filename": "flipsyrup-0.9.0.tar.gz", "has_sig": false, "md5_digest": "a70d1e086447fc21e075560c2606c424", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159171, "upload_time": "2014-11-12T14:36:18", "upload_time_iso_8601": "2014-11-12T14:36:18.301858Z", "url": "https://files.pythonhosted.org/packages/50/ae/0e957d30bc8da8de88841c932229b35f43039ac9b96476b1eb9822ae5ace/flipsyrup-0.9.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:49 2020"}