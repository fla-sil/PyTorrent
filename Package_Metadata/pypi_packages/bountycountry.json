{"info": {"author": "Bounty Country", "author_email": "support@bountycountry.com", "bugtrack_url": null, "classifiers": [], "description": "# bountycountry-python\nPython library for the Bounty Country API\n\nThe Bounty Country Python library provides convenient access to the Bounty Country API for applications written in the Python language. \n\n## Documentation\n\nSee the [Python API docs](https://bountycountry.com/apidocs/).\n\n## Installation\n\nYou don't need this source code unless you want to modify the package. If you just\nwant to use the package, just run:\n\n    pip install --upgrade bountycountry\n\nInstall from source with:\n\n    python setup.py install\n\n### Requirements\n\n- Python 3+ \n- Requests >= 2.20\n\n## Usage\n\nThe library needs to be configured with your account's public key and secret key which are\navailable in your [Bounty Country Dashboard](https://bountycountry.com/api). \n\nSet `bountycountry.BC_PUBLIC_KEY` to your public key value. \nSet `bountycountry.BC_SECRET_KEY` to your secret key value. \n\n\n```python\nimport bountycountry\n\nbountycountry.BC_PUBLIC_KEY = \"....your.public.key.here....\"\nbountycountry.BC_SECRET_KEY = \"....your.secret.key.here....\"\n```\n\n\n### Stream a live dataset\n\nThe stream data is returned in JSON batches via a **python generator**. You can iterate over each batch/page of items returned using any loop. By default a batch will consist of 250 items.  \n\n```python\nresults = bountycountry.getLiveStream('dataset-id-goes-here')\n\nfor batch in results:\n    #do something with each batch of results\n    print(batch)\n```\nBatch Format\n```python\n{'Items':[\n    {'ttl':1550188588,\n    'upload_timestamp':1550102188.420983,\n    'item_data':'the actual data goes here as a string or JSON object'\n    },\n    {'ttl':1550189000,\n    'upload_timestamp':1550109000.420456,\n    'item_data':{\"somekey\":\"somevalue\",\"somelist\":[204, 306, 99]}\n    },    \n    ]\n}   \n```\n\nThe `getLiveStream` function will indefinitely poll Bounty Country for the latest data and implement an exponential backoff (starting with a 2 second wait) if there is no new data before retrying. By default, the function will also attempt to minimize the requests used (and resultant costs to the user) by introducing additional waits if the result set returned is less than the BatchSize (which is set to the maximum of 250 items by default). \n\nYou can also cap your request expenditure rate by setting the MaxHourlyRequests parameter. \n\n#### OPTIONS\n* **BatchSize** - the number of results to return per request/page (maximum of 250, default=250, format = integer)\n* **MinimizeRequests** - whether to reduce request frequency to maximize result set size (reduce cost). Set to False if you have a strong requirement for minimal data latency and are less concerned by cost. (default=True)\n* **MaxHourlyRequests** - the maximum number of requests to perform per hour, if exceeded the function will sleep for OnMaxWait seconds (default=None, format = integer)\n* **OnMaxWait** - the number of seconds to wait if MaxHourlyRequests is exceeded (default = 0, format = integer)\n\n\n### Get a specific time range within a stream \n\nA specific time range in the last 24 hours of data in a stream can be queried using `bountycountry.getStreamRange`. \n\nTimestamps must be expressed in EpochTime format integers:\n```python\nimport time \n\n# get the current time as integer epochtime\ncurrenttime = int(time.time())\n\n# convert ISO8601 time stamp to integer epochtime \nepochtime = int(time.mktime(time.strptime(\"2019-04-01 19:20:00\", \"%Y-%m-%d %H:%M:%S\")))\n\n```\n\nThe Stream Range is a **python generator** so you can iterate over each batch/page of items returned using any loop. \nBy default a batch will return up to 250 items.   \n\n```python\n# create generator\nresults = bountycountry.getStreamRange('dataset-id-goes-here', FromTime = 1554106800, ToTime = 1554109000)\n\n# iterate over batches/pages and print the raw data of each item \nfor batch in results:\n    for item in batch['Items']:\n        print(item['item_data'])\n```\n#### OPTIONS\nIf a FromTime and ToTime are not provided the function returns the 250 newest items in the stream\n* **FromTime** - epoch timestamp of the earliest point in time to query\n* **ToTime** - epoch timestamp of the latest point in time to query\n* **Order** - the order in which to return results (options = 'Newest','Oldest', default = 'Newest')\n* **Limit** - function will stop when Limit number of items have been returned (default = None, format = integer)\n* **Last** - instead of passing a 'ToTime' or 'FromTime' you can manually pass the 'Last' result timestamp to get the next batch/page of results (format = integer epoch timestamp)\n* **BatchSize** - the number of results to return per request/page (maximum of 250, default=250, format = integer)\n\n\n\n### Post items to a Stream\n\nThe `getLiveStream` function will upload your items in batches of 25. Items can be accepted in one of three formats specified in the **format** parameter:\n* **'array'** - accepts a python array of strings or objects. Objects will be json-serialized.\n* **'lines'** - reads a file (provide a string path) line by line and uploads each line as an individual item\n* **'dir'** - reads all files in a directory (provide a string path) and uploads the text contexts. Non-utf-8 encoded files are skipped.\n\n```python\nitems = [\n    {\"somekey\":[{\"something nested\":\"value\",\"somethingelsenested\":\"somevalue\"}],\n    \"a string\",\n    \"another string\",\n    \"final string\"\n]\n\nbountycountry.postStream('dataset-id-goes-here', items, format='array')\n```\n\n<!--\n# vim: set tw=79:\n-->\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bounty-country/bountycountry-python", "keywords": "bounty bountycountry", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bountycountry", "package_url": "https://pypi.org/project/bountycountry/", "platform": "", "project_url": "https://pypi.org/project/bountycountry/", "project_urls": {"Documentation": "https://bountycountry.com/apidocs", "Homepage": "https://github.com/bounty-country/bountycountry-python", "Source Code": "https://github.com/bounty-country/bountycountry-python"}, "release_url": "https://pypi.org/project/bountycountry/1.6.0/", "requires_dist": ["requests"], "requires_python": ">=3", "summary": "A light weight client library for accessing the Bounty Country API", "version": "1.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bountycountry-python</h1>\n<p>Python library for the Bounty Country API</p>\n<p>The Bounty Country Python library provides convenient access to the Bounty Country API for applications written in the Python language.</p>\n<h2>Documentation</h2>\n<p>See the <a href=\"https://bountycountry.com/apidocs/\" rel=\"nofollow\">Python API docs</a>.</p>\n<h2>Installation</h2>\n<p>You don't need this source code unless you want to modify the package. If you just\nwant to use the package, just run:</p>\n<pre><code>pip install --upgrade bountycountry\n</code></pre>\n<p>Install from source with:</p>\n<pre><code>python setup.py install\n</code></pre>\n<h3>Requirements</h3>\n<ul>\n<li>Python 3+</li>\n<li>Requests &gt;= 2.20</li>\n</ul>\n<h2>Usage</h2>\n<p>The library needs to be configured with your account's public key and secret key which are\navailable in your <a href=\"https://bountycountry.com/api\" rel=\"nofollow\">Bounty Country Dashboard</a>.</p>\n<p>Set <code>bountycountry.BC_PUBLIC_KEY</code> to your public key value.\nSet <code>bountycountry.BC_SECRET_KEY</code> to your secret key value.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bountycountry</span>\n\n<span class=\"n\">bountycountry</span><span class=\"o\">.</span><span class=\"n\">BC_PUBLIC_KEY</span> <span class=\"o\">=</span> <span class=\"s2\">\"....your.public.key.here....\"</span>\n<span class=\"n\">bountycountry</span><span class=\"o\">.</span><span class=\"n\">BC_SECRET_KEY</span> <span class=\"o\">=</span> <span class=\"s2\">\"....your.secret.key.here....\"</span>\n</pre>\n<h3>Stream a live dataset</h3>\n<p>The stream data is returned in JSON batches via a <strong>python generator</strong>. You can iterate over each batch/page of items returned using any loop. By default a batch will consist of 250 items.</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">bountycountry</span><span class=\"o\">.</span><span class=\"n\">getLiveStream</span><span class=\"p\">(</span><span class=\"s1\">'dataset-id-goes-here'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">batch</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n    <span class=\"c1\">#do something with each batch of results</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">)</span>\n</pre>\n<p>Batch Format</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'Items'</span><span class=\"p\">:[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'ttl'</span><span class=\"p\">:</span><span class=\"mi\">1550188588</span><span class=\"p\">,</span>\n    <span class=\"s1\">'upload_timestamp'</span><span class=\"p\">:</span><span class=\"mf\">1550102188.420983</span><span class=\"p\">,</span>\n    <span class=\"s1\">'item_data'</span><span class=\"p\">:</span><span class=\"s1\">'the actual data goes here as a string or JSON object'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'ttl'</span><span class=\"p\">:</span><span class=\"mi\">1550189000</span><span class=\"p\">,</span>\n    <span class=\"s1\">'upload_timestamp'</span><span class=\"p\">:</span><span class=\"mf\">1550109000.420456</span><span class=\"p\">,</span>\n    <span class=\"s1\">'item_data'</span><span class=\"p\">:{</span><span class=\"s2\">\"somekey\"</span><span class=\"p\">:</span><span class=\"s2\">\"somevalue\"</span><span class=\"p\">,</span><span class=\"s2\">\"somelist\"</span><span class=\"p\">:[</span><span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"mi\">306</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">]}</span>\n    <span class=\"p\">},</span>    \n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>   \n</pre>\n<p>The <code>getLiveStream</code> function will indefinitely poll Bounty Country for the latest data and implement an exponential backoff (starting with a 2 second wait) if there is no new data before retrying. By default, the function will also attempt to minimize the requests used (and resultant costs to the user) by introducing additional waits if the result set returned is less than the BatchSize (which is set to the maximum of 250 items by default).</p>\n<p>You can also cap your request expenditure rate by setting the MaxHourlyRequests parameter.</p>\n<h4>OPTIONS</h4>\n<ul>\n<li><strong>BatchSize</strong> - the number of results to return per request/page (maximum of 250, default=250, format = integer)</li>\n<li><strong>MinimizeRequests</strong> - whether to reduce request frequency to maximize result set size (reduce cost). Set to False if you have a strong requirement for minimal data latency and are less concerned by cost. (default=True)</li>\n<li><strong>MaxHourlyRequests</strong> - the maximum number of requests to perform per hour, if exceeded the function will sleep for OnMaxWait seconds (default=None, format = integer)</li>\n<li><strong>OnMaxWait</strong> - the number of seconds to wait if MaxHourlyRequests is exceeded (default = 0, format = integer)</li>\n</ul>\n<h3>Get a specific time range within a stream</h3>\n<p>A specific time range in the last 24 hours of data in a stream can be queried using <code>bountycountry.getStreamRange</code>.</p>\n<p>Timestamps must be expressed in EpochTime format integers:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span> \n\n<span class=\"c1\"># get the current time as integer epochtime</span>\n<span class=\"n\">currenttime</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># convert ISO8601 time stamp to integer epochtime </span>\n<span class=\"n\">epochtime</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">mktime</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"s2\">\"2019-04-01 19:20:00\"</span><span class=\"p\">,</span> <span class=\"s2\">\"%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\"> %H:%M:%S\"</span><span class=\"p\">)))</span>\n</pre>\n<p>The Stream Range is a <strong>python generator</strong> so you can iterate over each batch/page of items returned using any loop.\nBy default a batch will return up to 250 items.</p>\n<pre><span class=\"c1\"># create generator</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">bountycountry</span><span class=\"o\">.</span><span class=\"n\">getStreamRange</span><span class=\"p\">(</span><span class=\"s1\">'dataset-id-goes-here'</span><span class=\"p\">,</span> <span class=\"n\">FromTime</span> <span class=\"o\">=</span> <span class=\"mi\">1554106800</span><span class=\"p\">,</span> <span class=\"n\">ToTime</span> <span class=\"o\">=</span> <span class=\"mi\">1554109000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># iterate over batches/pages and print the raw data of each item </span>\n<span class=\"k\">for</span> <span class=\"n\">batch</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">batch</span><span class=\"p\">[</span><span class=\"s1\">'Items'</span><span class=\"p\">]:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">'item_data'</span><span class=\"p\">])</span>\n</pre>\n<h4>OPTIONS</h4>\n<p>If a FromTime and ToTime are not provided the function returns the 250 newest items in the stream</p>\n<ul>\n<li><strong>FromTime</strong> - epoch timestamp of the earliest point in time to query</li>\n<li><strong>ToTime</strong> - epoch timestamp of the latest point in time to query</li>\n<li><strong>Order</strong> - the order in which to return results (options = 'Newest','Oldest', default = 'Newest')</li>\n<li><strong>Limit</strong> - function will stop when Limit number of items have been returned (default = None, format = integer)</li>\n<li><strong>Last</strong> - instead of passing a 'ToTime' or 'FromTime' you can manually pass the 'Last' result timestamp to get the next batch/page of results (format = integer epoch timestamp)</li>\n<li><strong>BatchSize</strong> - the number of results to return per request/page (maximum of 250, default=250, format = integer)</li>\n</ul>\n<h3>Post items to a Stream</h3>\n<p>The <code>getLiveStream</code> function will upload your items in batches of 25. Items can be accepted in one of three formats specified in the <strong>format</strong> parameter:</p>\n<ul>\n<li><strong>'array'</strong> - accepts a python array of strings or objects. Objects will be json-serialized.</li>\n<li><strong>'lines'</strong> - reads a file (provide a string path) line by line and uploads each line as an individual item</li>\n<li><strong>'dir'</strong> - reads all files in a directory (provide a string path) and uploads the text contexts. Non-utf-8 encoded files are skipped.</li>\n</ul>\n<pre><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"somekey\"</span><span class=\"p\">:[{</span><span class=\"s2\">\"something nested\"</span><span class=\"p\">:</span><span class=\"s2\">\"value\"</span><span class=\"p\">,</span><span class=\"s2\">\"somethingelsenested\"</span><span class=\"p\">:</span><span class=\"s2\">\"somevalue\"</span><span class=\"p\">}],</span>\n    <span class=\"s2\">\"a string\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"another string\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"final string\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">bountycountry</span><span class=\"o\">.</span><span class=\"n\">postStream</span><span class=\"p\">(</span><span class=\"s1\">'dataset-id-goes-here'</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'array'</span><span class=\"p\">)</span>\n</pre>\n\n\n          </div>"}, "last_serial": 4877219, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "1cf6331a65334bdc4f5000b14257b3f7", "sha256": "5ed2f5887299f61bb40a9e8a39b05b293dd24a28481b464c06b898b72bc4e8cb"}, "downloads": -1, "filename": "bountycountry-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1cf6331a65334bdc4f5000b14257b3f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 6634, "upload_time": "2019-02-13T04:26:25", "upload_time_iso_8601": "2019-02-13T04:26:25.460962Z", "url": "https://files.pythonhosted.org/packages/1e/39/8366ad3cab715060318e6c0e0e1ba2769e7582ec07dd88a77da3dc3e4ace/bountycountry-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55a997de868020d085d4aac71b36ed4c", "sha256": "ac0ee3da44dad341a18d8fd7932f4b3cd7866addda13b50aede7119f3601fe24"}, "downloads": -1, "filename": "bountycountry-1.2.0.tar.gz", "has_sig": false, "md5_digest": "55a997de868020d085d4aac71b36ed4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5484, "upload_time": "2019-02-13T04:26:27", "upload_time_iso_8601": "2019-02-13T04:26:27.528198Z", "url": "https://files.pythonhosted.org/packages/17/e5/01da0527c021859d49a330da7ddb9151f5bf4521575ef4c66c13f061ecb1/bountycountry-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "96b2b0e18c5813ad9e13f1d984f59762", "sha256": "a0a46461b1a87ae4144bc7df798c20d8eb8b470bed58f0f1f4561f8064319a65"}, "downloads": -1, "filename": "bountycountry-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "96b2b0e18c5813ad9e13f1d984f59762", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 6609, "upload_time": "2019-02-13T04:32:23", "upload_time_iso_8601": "2019-02-13T04:32:23.274096Z", "url": "https://files.pythonhosted.org/packages/9b/5a/cef11ab0d6fe092b65235a28313fe8247e71ecd10c14a8e4342c9636a9b7/bountycountry-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1f4f796bc21ac7332ebae09cf7c00fc", "sha256": "d342f2ed80d245a1fb684070af82ae4c28d110cde75b7cbd4428aeb89039f65d"}, "downloads": -1, "filename": "bountycountry-1.2.1.tar.gz", "has_sig": false, "md5_digest": "e1f4f796bc21ac7332ebae09cf7c00fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5460, "upload_time": "2019-02-13T04:32:24", "upload_time_iso_8601": "2019-02-13T04:32:24.734859Z", "url": "https://files.pythonhosted.org/packages/51/74/d6e4c494d54fe190c288061913f997dfea3259e879d841ff615f6365da3e/bountycountry-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "dcf93491237d7c8ad35cdcca326b77d6", "sha256": "2a073efd07f8af37cea74441b49c381678414f65cbdebd96081bd9335fe6511a"}, "downloads": -1, "filename": "bountycountry-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dcf93491237d7c8ad35cdcca326b77d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7040, "upload_time": "2019-02-14T00:27:16", "upload_time_iso_8601": "2019-02-14T00:27:16.701698Z", "url": "https://files.pythonhosted.org/packages/59/c9/c4d89776bf3c8fd11d229544b3dfe3ae360e46bc747a4e9e4d7f2a44c6cf/bountycountry-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d19b08fdc29a1c9346150767d07f0ee7", "sha256": "af23c4311e269c466ed0df6d7ccccc2cc49c81f145e3a44c0e005dbe00184ae8"}, "downloads": -1, "filename": "bountycountry-1.3.0.tar.gz", "has_sig": false, "md5_digest": "d19b08fdc29a1c9346150767d07f0ee7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6009, "upload_time": "2019-02-14T00:27:18", "upload_time_iso_8601": "2019-02-14T00:27:18.050247Z", "url": "https://files.pythonhosted.org/packages/6a/8e/68e6000634c349dc729a39b485f1794b3ef140c81ef593548b25d8839efe/bountycountry-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "ed9bcb61beed647be0510f686294b298", "sha256": "6a0058dd46a4900eb545b36e8f50edf13d605efa33e5d4b80216ac4e6aaa4bee"}, "downloads": -1, "filename": "bountycountry-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ed9bcb61beed647be0510f686294b298", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7386, "upload_time": "2019-02-14T00:29:16", "upload_time_iso_8601": "2019-02-14T00:29:16.248333Z", "url": "https://files.pythonhosted.org/packages/27/85/3e4954ecbef494566f0b59cd918df239722b2cce11864dd62b71745c7d31/bountycountry-1.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4ebe92d492eb4f7d5248c2bf4bfd5c2", "sha256": "e40c00e0bd7ddfbcd55b6609dc85b2152fbb37190baf1f8698094fe577f299da"}, "downloads": -1, "filename": "bountycountry-1.3.1.tar.gz", "has_sig": false, "md5_digest": "d4ebe92d492eb4f7d5248c2bf4bfd5c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6302, "upload_time": "2019-02-14T00:29:17", "upload_time_iso_8601": "2019-02-14T00:29:17.705258Z", "url": "https://files.pythonhosted.org/packages/b0/c5/7bb4a0ff25714be049d30609fdd607d8cfab059b81420f1cb7d4da31b1cf/bountycountry-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "80f8d73ca957cd409217b267b9e6cbe0", "sha256": "ded38765b7ceff63f7981660ee5af96a25dd535a9f9fbed0571b48ae80528553"}, "downloads": -1, "filename": "bountycountry-1.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "80f8d73ca957cd409217b267b9e6cbe0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7391, "upload_time": "2019-02-16T08:32:36", "upload_time_iso_8601": "2019-02-16T08:32:36.943661Z", "url": "https://files.pythonhosted.org/packages/9c/e6/a0c79a01e46b6e1b196eb3a254cc5a31adeb97bf1de3bd3fa403d3801ad6/bountycountry-1.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a5534e87bbc38bd582f774dd64f63fc", "sha256": "3dc840364345c02ba34c2c389fb1b55b17c3609e0835302b1b7d4f14cf447872"}, "downloads": -1, "filename": "bountycountry-1.3.2.tar.gz", "has_sig": false, "md5_digest": "6a5534e87bbc38bd582f774dd64f63fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6311, "upload_time": "2019-02-16T08:32:38", "upload_time_iso_8601": "2019-02-16T08:32:38.768971Z", "url": "https://files.pythonhosted.org/packages/4c/8c/7e277051123b5d9a328ba072ebe18913c772bff6f79597e27cdf00cdc14f/bountycountry-1.3.2.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "b8cabfcc9663bd5629881ca745dc73f7", "sha256": "276bab2d93c54162a85e0c84b9605dfe3e50974f93bd32e773d5410d053e09bd"}, "downloads": -1, "filename": "bountycountry-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b8cabfcc9663bd5629881ca745dc73f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7379, "upload_time": "2019-02-21T23:21:31", "upload_time_iso_8601": "2019-02-21T23:21:31.399143Z", "url": "https://files.pythonhosted.org/packages/c8/38/416624473922f444d07374f11ce97617423e3f180b6642beda7893f65720/bountycountry-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18fbc808250890cb197f05c51a90adc2", "sha256": "5ea4cde0a5da5c208b0211622e065d869c2e25f9251c731aad55a57a5451d084"}, "downloads": -1, "filename": "bountycountry-1.4.0.tar.gz", "has_sig": false, "md5_digest": "18fbc808250890cb197f05c51a90adc2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6301, "upload_time": "2019-02-21T23:21:33", "upload_time_iso_8601": "2019-02-21T23:21:33.613874Z", "url": "https://files.pythonhosted.org/packages/cb/6a/437913c5601215e5fbc79173c33846ea7ea25e5523a623df77bfae64749a/bountycountry-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "aa0fb1606625554e79d5dee74bfab041", "sha256": "94f7da2e5c9b24d4266ed60471adfe0d9256f9d8168dc80f81184518a65a6065"}, "downloads": -1, "filename": "bountycountry-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa0fb1606625554e79d5dee74bfab041", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7412, "upload_time": "2019-02-27T03:12:20", "upload_time_iso_8601": "2019-02-27T03:12:20.153863Z", "url": "https://files.pythonhosted.org/packages/69/0a/7e6c9a5e46950787b15988972258fa9241407d20bc17f129ca3d6b8e907a/bountycountry-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c5cb3f386f47d45f09c533f38f2aaaf", "sha256": "9ff460af715f193704cb8cf939b24a6db8a5b411bf27c6dd18551b1d6a6be5dd"}, "downloads": -1, "filename": "bountycountry-1.5.0.tar.gz", "has_sig": false, "md5_digest": "9c5cb3f386f47d45f09c533f38f2aaaf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6327, "upload_time": "2019-02-27T03:12:21", "upload_time_iso_8601": "2019-02-27T03:12:21.777317Z", "url": "https://files.pythonhosted.org/packages/2b/b3/0c53a8caf241843dfa339731e5e92c66affd7b305cdd0c57e2fdfb275172/bountycountry-1.5.0.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "bf7e4f6cc88abb577b42270daa49daed", "sha256": "3fb6b73f7d8d73b4034518d6d3adff691c23a2bd52460369488a13eb67851588"}, "downloads": -1, "filename": "bountycountry-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bf7e4f6cc88abb577b42270daa49daed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7412, "upload_time": "2019-02-28T03:28:35", "upload_time_iso_8601": "2019-02-28T03:28:35.307803Z", "url": "https://files.pythonhosted.org/packages/aa/03/649ea8c82b6477f2ec32a0fc96d4cd66644cc4893dd2cea34676bdc733d6/bountycountry-1.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fc0005b4ad2061caeef090c5c308e83", "sha256": "96761a0fbb7be232a2a557f0e39dbc4b413cc673f5ebc4e41daccd796b5ac705"}, "downloads": -1, "filename": "bountycountry-1.6.0.tar.gz", "has_sig": false, "md5_digest": "7fc0005b4ad2061caeef090c5c308e83", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6441, "upload_time": "2019-02-28T03:28:36", "upload_time_iso_8601": "2019-02-28T03:28:36.765662Z", "url": "https://files.pythonhosted.org/packages/fe/a5/fc1a2a306b8062d8657d31130927e9004b3b6cd7222aee87f57f0e03d592/bountycountry-1.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bf7e4f6cc88abb577b42270daa49daed", "sha256": "3fb6b73f7d8d73b4034518d6d3adff691c23a2bd52460369488a13eb67851588"}, "downloads": -1, "filename": "bountycountry-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bf7e4f6cc88abb577b42270daa49daed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7412, "upload_time": "2019-02-28T03:28:35", "upload_time_iso_8601": "2019-02-28T03:28:35.307803Z", "url": "https://files.pythonhosted.org/packages/aa/03/649ea8c82b6477f2ec32a0fc96d4cd66644cc4893dd2cea34676bdc733d6/bountycountry-1.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fc0005b4ad2061caeef090c5c308e83", "sha256": "96761a0fbb7be232a2a557f0e39dbc4b413cc673f5ebc4e41daccd796b5ac705"}, "downloads": -1, "filename": "bountycountry-1.6.0.tar.gz", "has_sig": false, "md5_digest": "7fc0005b4ad2061caeef090c5c308e83", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6441, "upload_time": "2019-02-28T03:28:36", "upload_time_iso_8601": "2019-02-28T03:28:36.765662Z", "url": "https://files.pythonhosted.org/packages/fe/a5/fc1a2a306b8062d8657d31130927e9004b3b6cd7222aee87f57f0e03d592/bountycountry-1.6.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:31 2020"}