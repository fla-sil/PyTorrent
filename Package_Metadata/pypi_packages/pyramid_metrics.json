{"info": {"author": "Pior Bastida", "author_email": "pior@pbastida.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pyramid", "Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP :: WSGI"], "description": "===============\nPyramid_metrics\n===============\n\nPerformance metrics for Pyramid using StatsD. The project aims at providing\nways to instrument a Pyramid application in the least intrusive way.\n\n* PyPI: https://pypi.python.org/pypi/pyramid_metrics\n* Github: https://github.com/ludia/pyramid_metrics\n* |travis|\n\n.. |travis| image::\n   https://travis-ci.org/ludia/pyramid_metrics.svg?branch=master\n   :target: https://travis-ci.org/ludia/pyramid_metrics\n   :alt: Tests on TravisCI\n\n\nInstallation\n============\n\nInstall using setuptools, e.g. (within a virtualenv)::\n\n  $ pip install pyramid_metrics\n\n\nSetup\n=====\n\nOnce ``pyramid_metrics`` is installed, you must use the ``config.include``\nmechanism to include it into your Pyramid project's configuration.  In your\nPyramid project's ``__init__.py``:\n\n.. code-block:: python\n\n   config = Configurator(.....)\n   config.include('pyramid_metrics')\n\nAlternately you can use the ``pyramid.includes`` configuration value in your\n``.ini`` file:\n\n.. code-block:: ini\n\n   [app:myapp]\n   pyramid.includes = pyramid_metrics\n\n\nUsage\n=====\n\nPyramid_metrics configuration (values are defaults):\n\n.. code-block:: ini\n\n   [app:myapp]\n   metrics.host = localhost\n   metrics.port = 8125\n\n   metrics.prefix = application.stage\n\n   metrics.route_performance = true\n\n\nRoute performance\n=================\n\nIf enabled, the route performance feature will time the request processing.\nBy using the StatsD Timer type metric, pre-aggregation will provide information\non latency, rate and total number. The information is sent two times: per route\nand globally.\n\nThe key name is composed of the route name,\nthe HTTP method and the outcome (as HTTP status code or 'exc' for exception).\n\n- Global key ``request.<HTTP_METHOD>.<STATUS_CODE_OR_EXC>``\n- Per route key ``route.<ROUTE_NAME>.request.<HTTP_METHOD>.<STATUS_CODE_OR_EXC>``\n\n\nAPI\n===\n\nCounter\n-------\n\nStatsD type:\nhttps://github.com/etsy/statsd/blob/master/docs/metric_types.md#counting\n\n.. code-block:: python\n\n   # Increment a counter named cache.hit by 1\n   request.metrics.incr('cache.hit')\n\n   # Increment by N\n   request.metrics.incr(('cache.hit.read.total', count=len(cacheresult)))\n\n   # Stat names can be composed from list or tuple\n   request.metrics.incr(('cache', cache_action))\n\n\nGauge\n-----\n\nStatsD type:\nhttps://github.com/etsy/statsd/blob/master/docs/metric_types.md#gauges\n\n.. code-block:: python\n\n   # Set the number of SQL connections to 8\n   request.metrics.gauge('sql.connections', 8)\n\n   # Increase the value of the metrics by some amount\n   request.metrics.gauge('network.egress', 34118, delta=True)\n\n\nTimer\n-----\n\nStatsD type:\nhttps://github.com/etsy/statsd/blob/master/docs/metric_types.md#timing\n\n.. code-block:: python\n\n   # Simple timing\n   time_in_ms = requests.get('http://example.net').elapsed.microseconds/1000\n   request.metrics.timing('net.example.responsetime', time_in_ms)\n\n   # Using the time marker mechanism\n   request.metrics.marker_start('something_slow')\n   httpclient.get('http://example.net')\n   request.metrics.marker_stop('something_slow')\n\n   # Measure different outcome\n   request.metrics.marker_start('something_slow')\n   try:\n       httpclient.get('http://example.net').raise_for_status()\n   except:\n       # Send measure to key 'something_slow.error'\n       request.metrics.marker_stop('something_slow', suffix='error')\n   else:\n       # Send measure to key 'something_slow.ok'\n       request.metrics.marker_stop('something_slow', suffix='ok')\n\n   # Using the context manager\n   with request.metrics.timer(['longprocess', processname]):\n      run_longprocess(processname)\n      # Send measure to 'longprocess.foobar' or 'longprocess.foobar.exc'\n\nCurrently implemented\n=====================\n\n- Collection utility as a request method\n- Ability to send metrics per Pyramid route\n- Simple time marker mechanism\n- Simple counter\n- Context manager for Timing metric type\n\n\nTODO\n====\n\n- Full StatsD metric types\n- Extensions for automatic metrology (SQLAlchemy, MongoDB, Requests...)\n- Whitelist/blacklist of metrics\n- Time allocation per subsystem (using the time marker mechanism)\n\n\nConsiderations\n==============\n\n- The general error policy is: always failsafe. Pyramid_metrics should NEVER\n  break your application.\n- The DNS resolution is done during configuration to avoid recurring latencies.\n\nDevelopment\n===========\n\nRun tests\n---------\n\nThe tests are run by nose and all dependencies are in requirements-test.txt.\n\n.. code-block:: shell\n\n   $ pip install -r requirements-test\n   ...\n\n   $ nosetests\n   ...\n\n\nRun tests with tox\n------------------\n\n.. code-block:: shell\n\n   $ pip install tox\n   ...\n\n   $ tox          # Run on python 2.7 and python 3.4\n   ...\n\n   $ tox -e py34  # Run on python 3.4 only\n\n\nContributors\n============\n\n- Pior Bastida (@pior)\n- Philippe Gauthier (@deuxpi)\n- Hadrien David (@hadrien)\n- Jay R. Wren (@jrwren)", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ludia/pyramid_metrics", "keywords": "wsgi pylons pyramid statsd metric tween handler", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pyramid_metrics", "package_url": "https://pypi.org/project/pyramid_metrics/", "platform": "", "project_url": "https://pypi.org/project/pyramid_metrics/", "project_urls": {"Homepage": "https://github.com/ludia/pyramid_metrics"}, "release_url": "https://pypi.org/project/pyramid_metrics/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "Performance metrics for Pyramid using StatsD", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Performance metrics for Pyramid using StatsD. The project aims at providing\nways to instrument a Pyramid application in the least intrusive way.</p>\n<ul>\n<li>PyPI: <a href=\"https://pypi.python.org/pypi/pyramid_metrics\" rel=\"nofollow\">https://pypi.python.org/pypi/pyramid_metrics</a></li>\n<li>Github: <a href=\"https://github.com/ludia/pyramid_metrics\" rel=\"nofollow\">https://github.com/ludia/pyramid_metrics</a></li>\n<li><a href=\"https://travis-ci.org/ludia/pyramid_metrics\" rel=\"nofollow\"><img alt=\"Tests on TravisCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d425d5f8967d1d787b1a1ffa1765f5d534085354/68747470733a2f2f7472617669732d63692e6f72672f6c756469612f707972616d69645f6d6574726963732e7376673f6272616e63683d6d6173746572\"></a></li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install using setuptools, e.g. (within a virtualenv):</p>\n<pre>$ pip install pyramid_metrics\n</pre>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>Once <tt>pyramid_metrics</tt> is installed, you must use the <tt>config.include</tt>\nmechanism to include it into your Pyramid project\u2019s configuration.  In your\nPyramid project\u2019s <tt>__init__.py</tt>:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configurator</span><span class=\"p\">(</span><span class=\"o\">.....</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'pyramid_metrics'</span><span class=\"p\">)</span>\n</pre>\n<p>Alternately you can use the <tt>pyramid.includes</tt> configuration value in your\n<tt>.ini</tt> file:</p>\n<pre><span class=\"k\">[app:myapp]</span>\n<span class=\"na\">pyramid.includes</span> <span class=\"o\">=</span> <span class=\"s\">pyramid_metrics</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Pyramid_metrics configuration (values are defaults):</p>\n<pre><span class=\"k\">[app:myapp]</span>\n<span class=\"na\">metrics.host</span> <span class=\"o\">=</span> <span class=\"s\">localhost</span>\n<span class=\"na\">metrics.port</span> <span class=\"o\">=</span> <span class=\"s\">8125</span>\n\n<span class=\"na\">metrics.prefix</span> <span class=\"o\">=</span> <span class=\"s\">application.stage</span>\n\n<span class=\"na\">metrics.route_performance</span> <span class=\"o\">=</span> <span class=\"s\">true</span>\n</pre>\n</div>\n<div id=\"route-performance\">\n<h2>Route performance</h2>\n<p>If enabled, the route performance feature will time the request processing.\nBy using the StatsD Timer type metric, pre-aggregation will provide information\non latency, rate and total number. The information is sent two times: per route\nand globally.</p>\n<p>The key name is composed of the route name,\nthe HTTP method and the outcome (as HTTP status code or \u2018exc\u2019 for exception).</p>\n<ul>\n<li>Global key <tt><span class=\"pre\">request.&lt;HTTP_METHOD&gt;.&lt;STATUS_CODE_OR_EXC&gt;</span></tt></li>\n<li>Per route key <tt><span class=\"pre\">route.&lt;ROUTE_NAME&gt;.request.&lt;HTTP_METHOD&gt;.&lt;STATUS_CODE_OR_EXC&gt;</span></tt></li>\n</ul>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<div id=\"counter\">\n<h3>Counter</h3>\n<p>StatsD type:\n<a href=\"https://github.com/etsy/statsd/blob/master/docs/metric_types.md#counting\" rel=\"nofollow\">https://github.com/etsy/statsd/blob/master/docs/metric_types.md#counting</a></p>\n<pre><span class=\"c1\"># Increment a counter named cache.hit by 1</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">(</span><span class=\"s1\">'cache.hit'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Increment by N</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">((</span><span class=\"s1\">'cache.hit.read.total'</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cacheresult</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Stat names can be composed from list or tuple</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">((</span><span class=\"s1\">'cache'</span><span class=\"p\">,</span> <span class=\"n\">cache_action</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"gauge\">\n<h3>Gauge</h3>\n<p>StatsD type:\n<a href=\"https://github.com/etsy/statsd/blob/master/docs/metric_types.md#gauges\" rel=\"nofollow\">https://github.com/etsy/statsd/blob/master/docs/metric_types.md#gauges</a></p>\n<pre><span class=\"c1\"># Set the number of SQL connections to 8</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">gauge</span><span class=\"p\">(</span><span class=\"s1\">'sql.connections'</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Increase the value of the metrics by some amount</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">gauge</span><span class=\"p\">(</span><span class=\"s1\">'network.egress'</span><span class=\"p\">,</span> <span class=\"mi\">34118</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"timer\">\n<h3>Timer</h3>\n<p>StatsD type:\n<a href=\"https://github.com/etsy/statsd/blob/master/docs/metric_types.md#timing\" rel=\"nofollow\">https://github.com/etsy/statsd/blob/master/docs/metric_types.md#timing</a></p>\n<pre><span class=\"c1\"># Simple timing</span>\n<span class=\"n\">time_in_ms</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://example.net'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">elapsed</span><span class=\"o\">.</span><span class=\"n\">microseconds</span><span class=\"o\">/</span><span class=\"mi\">1000</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">timing</span><span class=\"p\">(</span><span class=\"s1\">'net.example.responsetime'</span><span class=\"p\">,</span> <span class=\"n\">time_in_ms</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using the time marker mechanism</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">marker_start</span><span class=\"p\">(</span><span class=\"s1\">'something_slow'</span><span class=\"p\">)</span>\n<span class=\"n\">httpclient</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://example.net'</span><span class=\"p\">)</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">marker_stop</span><span class=\"p\">(</span><span class=\"s1\">'something_slow'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Measure different outcome</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">marker_start</span><span class=\"p\">(</span><span class=\"s1\">'something_slow'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">httpclient</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://example.net'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Send measure to key 'something_slow.error'</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">marker_stop</span><span class=\"p\">(</span><span class=\"s1\">'something_slow'</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">'error'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Send measure to key 'something_slow.ok'</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">marker_stop</span><span class=\"p\">(</span><span class=\"s1\">'something_slow'</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">'ok'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using the context manager</span>\n<span class=\"k\">with</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">timer</span><span class=\"p\">([</span><span class=\"s1\">'longprocess'</span><span class=\"p\">,</span> <span class=\"n\">processname</span><span class=\"p\">]):</span>\n   <span class=\"n\">run_longprocess</span><span class=\"p\">(</span><span class=\"n\">processname</span><span class=\"p\">)</span>\n   <span class=\"c1\"># Send measure to 'longprocess.foobar' or 'longprocess.foobar.exc'</span>\n</pre>\n</div>\n</div>\n<div id=\"currently-implemented\">\n<h2>Currently implemented</h2>\n<ul>\n<li>Collection utility as a request method</li>\n<li>Ability to send metrics per Pyramid route</li>\n<li>Simple time marker mechanism</li>\n<li>Simple counter</li>\n<li>Context manager for Timing metric type</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Full StatsD metric types</li>\n<li>Extensions for automatic metrology (SQLAlchemy, MongoDB, Requests\u2026)</li>\n<li>Whitelist/blacklist of metrics</li>\n<li>Time allocation per subsystem (using the time marker mechanism)</li>\n</ul>\n</div>\n<div id=\"considerations\">\n<h2>Considerations</h2>\n<ul>\n<li>The general error policy is: always failsafe. Pyramid_metrics should NEVER\nbreak your application.</li>\n<li>The DNS resolution is done during configuration to avoid recurring latencies.</li>\n</ul>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<div id=\"run-tests\">\n<h3>Run tests</h3>\n<p>The tests are run by nose and all dependencies are in requirements-test.txt.</p>\n<pre>$ pip install -r requirements-test\n...\n\n$ nosetests\n...\n</pre>\n</div>\n<div id=\"run-tests-with-tox\">\n<h3>Run tests with tox</h3>\n<pre>$ pip install tox\n...\n\n$ tox          <span class=\"c1\"># Run on python 2.7 and python 3.4\n</span>...\n\n$ tox -e py34  <span class=\"c1\"># Run on python 3.4 only</span>\n</pre>\n</div>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>Pior Bastida (@pior)</li>\n<li>Philippe Gauthier (@deuxpi)</li>\n<li>Hadrien David (@hadrien)</li>\n<li>Jay R. Wren (@jrwren)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3043509, "releases": {"0.0.1.dev1": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "695fab49abd3d57110e6e62994d0c5ed", "sha256": "b4cb55e6cf006f2336edd54e86ae14979ccc5b1b9977ce343112ab66ec73866f"}, "downloads": -1, "filename": "pyramid_metrics-0.1.0.tar.gz", "has_sig": false, "md5_digest": "695fab49abd3d57110e6e62994d0c5ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6173, "upload_time": "2014-05-06T19:58:05", "upload_time_iso_8601": "2014-05-06T19:58:05.729347Z", "url": "https://files.pythonhosted.org/packages/92/17/617358e399529541bee7e54ec7c14eee913ab3895fe3d757a6f9ab6d1c98/pyramid_metrics-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b327c7c0ca865190357c282d505ef9dc", "sha256": "26221a96735d499ec03cbc4db65b96379a35b86d43cee7dc49ac2a822256d025"}, "downloads": -1, "filename": "pyramid_metrics-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b327c7c0ca865190357c282d505ef9dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6186, "upload_time": "2014-05-06T20:24:40", "upload_time_iso_8601": "2014-05-06T20:24:40.933935Z", "url": "https://files.pythonhosted.org/packages/c0/20/793ef6a41cc090f7b90244c819bacb3313ed2adabfb8c6e0076872118af2/pyramid_metrics-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "10f0964964d63168c5f96e3b5e48fbc9", "sha256": "f2cfdb4d99f0b75e06b954aa5d2399aa7f4136cb5c67fb121eb1284fec558a6a"}, "downloads": -1, "filename": "pyramid_metrics-0.1.2.tar.gz", "has_sig": false, "md5_digest": "10f0964964d63168c5f96e3b5e48fbc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6321, "upload_time": "2014-05-07T16:33:59", "upload_time_iso_8601": "2014-05-07T16:33:59.615412Z", "url": "https://files.pythonhosted.org/packages/96/b7/8a001f03b9af20fa02021a8d5d3a6b4ee9e7ca76093c0caafa7f83d7403e/pyramid_metrics-0.1.2.tar.gz", "yanked": false}], "0.1.3": [], "0.1.4": [{"comment_text": "", "digests": {"md5": "2f96f8b5c76f8df9ae90a1e4223e7eb3", "sha256": "f90a066320328f766b6c9a0175248489641da3f6f0390c882ea50d7c02197209"}, "downloads": -1, "filename": "pyramid_metrics-0.1.4.tar.gz", "has_sig": false, "md5_digest": "2f96f8b5c76f8df9ae90a1e4223e7eb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8698, "upload_time": "2014-05-08T14:58:24", "upload_time_iso_8601": "2014-05-08T14:58:24.577182Z", "url": "https://files.pythonhosted.org/packages/4c/39/a40643ab7c3892f8256fc8b5965086608c90f861230f0351da7eb8bcff53/pyramid_metrics-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "97e1470d6fdd452fed8376d784e232be", "sha256": "849314cecdea161e7e61df4c4cbd7b0a631b240b6b0becaf727d9104129302aa"}, "downloads": -1, "filename": "pyramid_metrics-0.1.5.tar.gz", "has_sig": false, "md5_digest": "97e1470d6fdd452fed8376d784e232be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8896, "upload_time": "2014-05-30T16:38:49", "upload_time_iso_8601": "2014-05-30T16:38:49.166536Z", "url": "https://files.pythonhosted.org/packages/5d/1c/302199adf3b10388c3bdc841bad4aa01a9733a3f519d641489eb4b92fb54/pyramid_metrics-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "13e105bf01ec88b132f0dc5e09d7bb26", "sha256": "9338cb4bf35c08b04e3f8855584ae0b71a32344f268d359a352283a38dd9beaf"}, "downloads": -1, "filename": "pyramid_metrics-0.2.0.tar.gz", "has_sig": false, "md5_digest": "13e105bf01ec88b132f0dc5e09d7bb26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9774, "upload_time": "2014-08-19T18:27:33", "upload_time_iso_8601": "2014-08-19T18:27:33.359785Z", "url": "https://files.pythonhosted.org/packages/dc/64/78d80f1deea976a50696dbcc501b5fd2533c2cf099404e6fdb83bed4e548/pyramid_metrics-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "12fc0b5bd6bf7502788bf359803c90fd", "sha256": "09464a5aa5773abb49f95a1ac4044ae7f0f418135a2ae4e6a35d6afe2206ea77"}, "downloads": -1, "filename": "pyramid_metrics-0.3.0.tar.gz", "has_sig": false, "md5_digest": "12fc0b5bd6bf7502788bf359803c90fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9370, "upload_time": "2015-06-06T20:18:22", "upload_time_iso_8601": "2015-06-06T20:18:22.715545Z", "url": "https://files.pythonhosted.org/packages/b1/62/77451de259e92500b5fed3866778ca6e8d869de853b0111087b4f631dd65/pyramid_metrics-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "1c3aee42891847fbc22029fba82d2ea3", "sha256": "923426cfcd70eb3c4e7af690c5ac4d989fc33f2dd46b5ed2440924656e9814ec"}, "downloads": -1, "filename": "pyramid_metrics-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c3aee42891847fbc22029fba82d2ea3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14653, "upload_time": "2017-07-23T19:56:06", "upload_time_iso_8601": "2017-07-23T19:56:06.615009Z", "url": "https://files.pythonhosted.org/packages/ad/e1/76492184d57c859b6ba18b334111ca55b48d36b60a8eae8f7afff928c29c/pyramid_metrics-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ddd84babecf40161346861fbe77da9f2", "sha256": "2d6f89e49788c76ce351affd2974110ffe6138f78dc788c6755e2c27b9e7a6a5"}, "downloads": -1, "filename": "pyramid_metrics-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ddd84babecf40161346861fbe77da9f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10712, "upload_time": "2017-07-23T19:54:17", "upload_time_iso_8601": "2017-07-23T19:54:17.745985Z", "url": "https://files.pythonhosted.org/packages/f7/d4/a81709341e8d9c36e40727f05d80b52dfc731430e132627d440d290989f4/pyramid_metrics-0.3.1.tar.gz", "yanked": false}], "0.3.1.dev0": [{"comment_text": "", "digests": {"md5": "62c1bd974b8977018062216fd83c97de", "sha256": "741a353772db36f36cfbcc343cf47c3d64fedf403524183f1cf12e0210a8cd20"}, "downloads": -1, "filename": "pyramid_metrics-0.3.1.dev0.tar.gz", "has_sig": false, "md5_digest": "62c1bd974b8977018062216fd83c97de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10694, "upload_time": "2017-07-23T18:56:39", "upload_time_iso_8601": "2017-07-23T18:56:39.751663Z", "url": "https://files.pythonhosted.org/packages/7b/ae/65105b004f79a8b4c5e4212d77b2ec496abb04ed71de1a1ecd9590d73975/pyramid_metrics-0.3.1.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c3aee42891847fbc22029fba82d2ea3", "sha256": "923426cfcd70eb3c4e7af690c5ac4d989fc33f2dd46b5ed2440924656e9814ec"}, "downloads": -1, "filename": "pyramid_metrics-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c3aee42891847fbc22029fba82d2ea3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14653, "upload_time": "2017-07-23T19:56:06", "upload_time_iso_8601": "2017-07-23T19:56:06.615009Z", "url": "https://files.pythonhosted.org/packages/ad/e1/76492184d57c859b6ba18b334111ca55b48d36b60a8eae8f7afff928c29c/pyramid_metrics-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ddd84babecf40161346861fbe77da9f2", "sha256": "2d6f89e49788c76ce351affd2974110ffe6138f78dc788c6755e2c27b9e7a6a5"}, "downloads": -1, "filename": "pyramid_metrics-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ddd84babecf40161346861fbe77da9f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10712, "upload_time": "2017-07-23T19:54:17", "upload_time_iso_8601": "2017-07-23T19:54:17.745985Z", "url": "https://files.pythonhosted.org/packages/f7/d4/a81709341e8d9c36e40727f05d80b52dfc731430e132627d440d290989f4/pyramid_metrics-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:23 2020"}