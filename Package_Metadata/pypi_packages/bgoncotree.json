{"info": {"author": "Barcelona Biomedical Genomics Lab", "author_email": "bbglab@irbbarcelona.org", "bugtrack_url": null, "classifiers": [], "description": "BGOncoTree\n==========\n\n.. |ot| replace:: **BGOncoTree**\n.. |tree| replace:: *oncotree*\n\n|ot| is a Python package to standardize the use of the OncoTree within the BBGLab.\n\n\nInstallation\n------------\n\n|ot| works with Python 3.5+ and can be installed with pip::\n\n\tpip install bgoncotree\n\n\n\nUsage\n-----\n\nAny use of |ot| requires to initialize the tree:\n\n.. code:: python\n\n\tfrom bgoncotree.main import BGOncoTree\n\n\ttree = BGOncoTree()\n\n|ot| accepts a file as argument if you want to `provide your own tree`_.\n\nEach node is composed by:\n\n- ``id``: short identifier of the node (e.g. ``ALL``)\n- ``parent``: ancestor node\n- ``children``: list of descendent nodes\n- ``synonyms``: list of alternative names that can be used to search for this node\n- ``name``: first provided synonym or node id\n\n\n\nPython\n******\n\nThe first thing to do is **initialize** the *BGOncoTree* object:\n\n.. code:: python\n\n\ttree = BGOncoTree()\n\nThe *BGOncoTree* object is a *dictionary* that you can query to **get\neach node**:\n\n.. code:: python\n\n\tnode = tree['CANCER']\n\nUsing the ID of the node or any synonym you can ``find`` the node:\n\n.. code:: python\n\n\tnode = tree.find('clear cell sarcoma')\n\n\nTo **explore** the tree, you can use the ``iter_from`` method:\n\n.. code:: python\n\n\tfor node, level in tree.iter_from(tree['ALL'], descending=True):\n\t\t...\n\nThe `level` is simply an integer indicating the level of nested with respect\nto the ``starting_node``.\nIf you want to explore the full tree, you can get the **root node** as:\n\n.. code:: python\n\n\troot_node = tree.root\n\n\nThe methods ``descendants`` and ``ancestors`` do the same as ``iter_from``\nbut you do not need to indicate the ``descending`` flag, the ``level`` is not\nreturned and node can also be a string. E.g.:\n\n.. code:: python\n\n\tfor node in tree.descendants('ALL'):\n\t\t...\n\n\n.. important:: `iter_from``, ``descendants`` and ``ancestors`` methods\n   return the starting node.\n\n\nThere are two other methods that you can make use of.\n``search`` can be used to **search** for all nodes containing a word\nin their names. E.g.:\n\n.. code:: python\n\n\tfor node in tree.search('acute'):\n\t\t...\n\nThe ``get`` method is useful if you expect only one result from a search.\nE.g.:\n\n.. code:: python\n\n\tnode = tree.get('Cholangiocarcinoma')\n\nThis method will raise an exception if none or more than 1 items are found.\n\n\nCommand line\n************\n\nThe command line provides two utilities to explore the tree\n``bgoncotree ancestors`` and ``bgoncotree descendants``.\nOutput can be formatted in json, and you can also set a recursion limit.\n\nSee first one level of childs of ``HEMATO`` node:\n\n.. code:: bash\n\n\tbgoncotree descendants --node HEMATO --json --limit 2\n\n\nIn addition, the same ``search`` function as in Python can be called\nfrom the command line as::\n\n\tbgoncotree search acute\n\n\nTab completion can be enabled adding\n``eval \"$(_BGONCOTREE_COMPLETE=source bgoncotree)\"`` to your ``.bashrc``\nfile as explained in the\n`bash completion section of Click <https://click.palletsprojects.com/en/7.x/bashcomplete/>`_\n\n\n\n.. _provide your own tree:\n\nDefining your own tree\n----------------------\n\n|ot| uses `bgdata <https://pypi.org/project/bgdata/>`_ to get the most recent\nversion of the |tree| used in the lab.\nHowever, you can pass a file with your own |tree|::\n\n\tfrom bgoncotree.main import BGOncoTree\n\n\ttree = BGOncoTree(file)\n\nIf you are interested in creating your own |tree|,\nyou need a ``tsv`` file with 2 columns: ``ID`` and ``PARENT``.\nEach node can only have 1 parent, and there must but one node without a\nparent: the root node.\n\nYou can provide an additional extra column ``NAMES`` with a comma separated\nlist of synonyms for each node. The first name will be used as the\nname to display.\n\nYou can **validate** your tree using the command line::\n\n\tbgoncotree validate my_tree.tsv", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/bgframework/bgoncotree", "keywords": "", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "bgoncotree", "package_url": "https://pypi.org/project/bgoncotree/", "platform": "", "project_url": "https://pypi.org/project/bgoncotree/", "project_urls": {"Homepage": "https://bitbucket.org/bgframework/bgoncotree"}, "release_url": "https://pypi.org/project/bgoncotree/0.2/", "requires_dist": null, "requires_python": "", "summary": "BBGLab interface for an OncoTree", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>BGOncoTree</strong> is a Python package to standardize the use of the OncoTree within the BBGLab.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><strong>BGOncoTree</strong> works with Python 3.5+ and can be installed with pip:</p>\n<pre>pip install bgoncotree\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Any use of <strong>BGOncoTree</strong> requires to initialize the tree:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bgoncotree.main</span> <span class=\"kn\">import</span> <span class=\"n\">BGOncoTree</span>\n\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">BGOncoTree</span><span class=\"p\">()</span>\n</pre>\n<p><strong>BGOncoTree</strong> accepts a file as argument if you want to <a href=\"#provide-your-own-tree\" rel=\"nofollow\">provide your own tree</a>.</p>\n<p>Each node is composed by:</p>\n<ul>\n<li><tt>id</tt>: short identifier of the node (e.g. <tt>ALL</tt>)</li>\n<li><tt>parent</tt>: ancestor node</li>\n<li><tt>children</tt>: list of descendent nodes</li>\n<li><tt>synonyms</tt>: list of alternative names that can be used to search for this node</li>\n<li><tt>name</tt>: first provided synonym or node id</li>\n</ul>\n<div id=\"python\">\n<h3>Python</h3>\n<p>The first thing to do is <strong>initialize</strong> the <em>BGOncoTree</em> object:</p>\n<pre><span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">BGOncoTree</span><span class=\"p\">()</span>\n</pre>\n<p>The <em>BGOncoTree</em> object is a <em>dictionary</em> that you can query to <strong>get\neach node</strong>:</p>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"s1\">'CANCER'</span><span class=\"p\">]</span>\n</pre>\n<p>Using the ID of the node or any synonym you can <tt>find</tt> the node:</p>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'clear cell sarcoma'</span><span class=\"p\">)</span>\n</pre>\n<p>To <strong>explore</strong> the tree, you can use the <tt>iter_from</tt> method:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">level</span> <span class=\"ow\">in</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">iter_from</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"s1\">'ALL'</span><span class=\"p\">],</span> <span class=\"n\">descending</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>The <cite>level</cite> is simply an integer indicating the level of nested with respect\nto the <tt>starting_node</tt>.\nIf you want to explore the full tree, you can get the <strong>root node</strong> as:</p>\n<pre><span class=\"n\">root_node</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">root</span>\n</pre>\n<p>The methods <tt>descendants</tt> and <tt>ancestors</tt> do the same as <tt>iter_from</tt>\nbut you do not need to indicate the <tt>descending</tt> flag, the <tt>level</tt> is not\nreturned and node can also be a string. E.g.:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">descendants</span><span class=\"p\">(</span><span class=\"s1\">'ALL'</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre>\n<div>\n<p>Important</p>\n<p><cite>iter_from`</cite>, <tt>descendants</tt> and <tt>ancestors</tt> methods\nreturn the starting node.</p>\n</div>\n<p>There are two other methods that you can make use of.\n<tt>search</tt> can be used to <strong>search</strong> for all nodes containing a word\nin their names. E.g.:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">'acute'</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>The <tt>get</tt> method is useful if you expect only one result from a search.\nE.g.:</p>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'Cholangiocarcinoma'</span><span class=\"p\">)</span>\n</pre>\n<p>This method will raise an exception if none or more than 1 items are found.</p>\n</div>\n<div id=\"command-line\">\n<h3>Command line</h3>\n<p>The command line provides two utilities to explore the tree\n<tt>bgoncotree ancestors</tt> and <tt>bgoncotree descendants</tt>.\nOutput can be formatted in json, and you can also set a recursion limit.</p>\n<p>See first one level of childs of <tt>HEMATO</tt> node:</p>\n<pre>bgoncotree descendants --node HEMATO --json --limit <span class=\"m\">2</span>\n</pre>\n<p>In addition, the same <tt>search</tt> function as in Python can be called\nfrom the command line as:</p>\n<pre>bgoncotree search acute\n</pre>\n<p>Tab completion can be enabled adding\n<tt>eval <span class=\"pre\">\"$(_BGONCOTREE_COMPLETE=source</span> bgoncotree)\"</tt> to your <tt>.bashrc</tt>\nfile as explained in the\n<a href=\"https://click.palletsprojects.com/en/7.x/bashcomplete/\" rel=\"nofollow\">bash completion section of Click</a></p>\n</div>\n</div>\n<div id=\"defining-your-own-tree\">\n<span id=\"provide-your-own-tree\"></span><h2>Defining your own tree</h2>\n<p><strong>BGOncoTree</strong> uses <a href=\"https://pypi.org/project/bgdata/\" rel=\"nofollow\">bgdata</a> to get the most recent\nversion of the <em>oncotree</em> used in the lab.\nHowever, you can pass a file with your own <em>oncotree</em>:</p>\n<pre>from bgoncotree.main import BGOncoTree\n\ntree = BGOncoTree(file)\n</pre>\n<p>If you are interested in creating your own <em>oncotree</em>,\nyou need a <tt>tsv</tt> file with 2 columns: <tt>ID</tt> and <tt>PARENT</tt>.\nEach node can only have 1 parent, and there must but one node without a\nparent: the root node.</p>\n<p>You can provide an additional extra column <tt>NAMES</tt> with a comma separated\nlist of synonyms for each node. The first name will be used as the\nname to display.</p>\n<p>You can <strong>validate</strong> your tree using the command line:</p>\n<pre>bgoncotree validate my_tree.tsv\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6602414, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d23afa331c3496e4f1c7c9627254af1e", "sha256": "81ef5f7a99323857f2966eff12ff5558c76671bf22c736e75ba3cd53d00105fd"}, "downloads": -1, "filename": "bgoncotree-0.1.tar.gz", "has_sig": false, "md5_digest": "d23afa331c3496e4f1c7c9627254af1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7191, "upload_time": "2019-12-04T12:53:04", "upload_time_iso_8601": "2019-12-04T12:53:04.170204Z", "url": "https://files.pythonhosted.org/packages/f1/e6/4a156a752014baa7446bb51992198ad790b805523f49618e3a100e2bdfdd/bgoncotree-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "bde57d0fadd0732c43865bd16bf0dc17", "sha256": "72aaedf92222b23ecdbb52c7fd948847dc33cef77848cd5f4506b5b610f1132b"}, "downloads": -1, "filename": "bgoncotree-0.2.tar.gz", "has_sig": false, "md5_digest": "bde57d0fadd0732c43865bd16bf0dc17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7333, "upload_time": "2020-02-10T13:26:36", "upload_time_iso_8601": "2020-02-10T13:26:36.526484Z", "url": "https://files.pythonhosted.org/packages/ba/8c/3e2110912b2e6ebf3d6845da6af482e724d6883262f3acc73af409085fff/bgoncotree-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bde57d0fadd0732c43865bd16bf0dc17", "sha256": "72aaedf92222b23ecdbb52c7fd948847dc33cef77848cd5f4506b5b610f1132b"}, "downloads": -1, "filename": "bgoncotree-0.2.tar.gz", "has_sig": false, "md5_digest": "bde57d0fadd0732c43865bd16bf0dc17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7333, "upload_time": "2020-02-10T13:26:36", "upload_time_iso_8601": "2020-02-10T13:26:36.526484Z", "url": "https://files.pythonhosted.org/packages/ba/8c/3e2110912b2e6ebf3d6845da6af482e724d6883262f3acc73af409085fff/bgoncotree-0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:39 2020"}