{"info": {"author": "Michael Privat", "author_email": "mprivat@majorspot.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![mprivat](https://circleci.com/gh/mprivat/pyllk.svg?style=shield)](https://app.circleci.com/pipelines/github/mprivat/pyllk)\n[![codecov](https://codecov.io/gh/mprivat/pyllk/branch/master/graph/badge.svg)](https://codecov.io/gh/mprivat/pyllk)\n\n# Pyllk\n\nA python LL(k) parser with a twist where tokens can be any arbitrary objects. The current implementation uses the backtracking algorithm. I'll eventually implement predictive parsing but the API is designed to remain backward compatible.\n\n## Example. A simple calculator\n\nThis is an example of the typical calculator. In this case, we use characters as tokens. The idea is to parse things like `((10+2)*15)/(7-2)` and be able to pull the result.\n\nFor now, the grammar cannot be expressed in BNF notation so the production rules have to be created in code. It'll change in the future but using non-character tokens complicate things with BNF when representing terminals.\n\nThere are 3 steps involved in the example:\n\n1. Create actions that get executed when production rules are matched. Actions are optional but often necessary if you want to do anything useful with what you've parsed. The function must accept a single parameter of type `ExecutionContext` which will give you access to:\n\n    - The parser. That's useful if you want to access global configurations like the log level.\n    - The production rule. That's the rule that was just matched.\n    - The list of tokens that where matched to the production rule.\n    - The context given to the parser at the beginning. This is a dictionary containing anything you want to keep around. The example below put a stack inside it to keep track of parentheses in the expression. You can put anything you need in there.\n\n1. Create the production rules. A grammar is made of production rules that derives terminal and non-terminal tokens. If you don't know what I'm talking about here, stop right now and go read this first: https://en.wikipedia.org/wiki/Context-free_grammar.\n\n1. Execute.\n    - Take the production rules and construct a grammar and a parser.\n    - Push your input into the parser.\n    - Collect the results in the `context` object.\n\n### Create actions\n\n```python\ndef action_make_number(ec):\n    s = \"\"\n    for token in ec.tokens:\n        s = s + token.representation\n    ec.context['stack'].append(float(s))\n\n\ndef add(e):\n    b = e.context['stack'].pop()\n    a = e.context['stack'].pop()\n    e.parser.log(\"Ex: {} + {}\".format(a, b))\n    e.context['stack'].append(a + b)\n\n\ndef sub(e):\n    b = e.context['stack'].pop()\n    a = e.context['stack'].pop()\n    e.parser.log(\"Ex: {} - {}\".format(a, b))\n    e.context['stack'].append(a - b)\n\n\ndef mul(e):\n    b = e.context['stack'].pop()\n    a = e.context['stack'].pop()\n    e.parser.log(\"Ex: {} x {}\".format(a, b))\n    e.context['stack'].append(a * b)\n\n\ndef div(e):\n    b = e.context['stack'].pop()\n    a = e.context['stack'].pop()\n    e.parser.log(\"Ex: {} / {}\".format(a, b))\n    e.context['stack'].append(a / b)\n```\n\n### Production rules\n\n```python\ncalculator_rules_with_context = []\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"ROOT\"), [NonTerminalToken(\"expr\"), TerminalToken(\"+\"), NonTerminalToken(\"expr\")], add))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"ROOT\"), [NonTerminalToken(\"expr\"), TerminalToken(\"-\"), NonTerminalToken(\"expr\")], sub))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"ROOT\"), [NonTerminalToken(\"expr\"), TerminalToken(\"/\"), NonTerminalToken(\"expr\")], div))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"ROOT\"), [NonTerminalToken(\"expr\"), TerminalToken(\"*\"), NonTerminalToken(\"expr\")], mul))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"expr\"), [TerminalToken(\"(\"), NonTerminalToken(\"ROOT\"), TerminalToken(\")\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"expr\"), [NonTerminalToken(\"number\")], action_make_number))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"number\"), [TerminalToken(\"0\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"number\"), [TerminalToken(\"1\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"number\"), [TerminalToken(\"2\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"number\"), [TerminalToken(\"3\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"number\"), [TerminalToken(\"4\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"number\"), [TerminalToken(\"5\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"number\"), [TerminalToken(\"6\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"number\"), [TerminalToken(\"7\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"number\"), [TerminalToken(\"8\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"number\"), [TerminalToken(\"9\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"digit_or_empty\"), [TerminalToken(\"0\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"digit_or_empty\"), [TerminalToken(\"2\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"digit_or_empty\"), [TerminalToken(\"3\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"digit_or_empty\"), [TerminalToken(\"4\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"digit_or_empty\"), [TerminalToken(\"5\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"digit_or_empty\"), [TerminalToken(\"6\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"digit_or_empty\"), [TerminalToken(\"7\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"digit_or_empty\"), [TerminalToken(\"8\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"digit_or_empty\"), [TerminalToken(\"9\"), NonTerminalToken(\"digit_or_empty\")]))\ncalculator_rules_with_context.append(ProductionRule(NonTerminalToken(\"digit_or_empty\"), [TerminalToken(\"\")]))\n```\n\n### Create a grammar and a parser\n\n```python\ng = Grammar(calculator_rules_with_context)\nparser = Parser(g)\n\ncontext = {\n    'stack': []\n}\nparser.parse_string(\"((10+2)*15)/(7-2)\", context)\nresult = context['stack'].pop()\n```\n\nresult will contain 36.0\n\n## Non-character input\n\nAlthough character-tokens are the default, nothing prevents you from creating non-character tokens. Here is an example of terminal tokens that are meant to be fed by spaCy, a python NLP library.\n\n```python\nimport json\n\nclass SpacyToken(TerminalToken):\n    def __init__(self):\n        super().__init__(representation = {})\n\n    def text(self, text):\n        self.representation['TEXT'] = text\n        return self\n\n    def lemma(self, text):\n        self.representation['LEMMA'] = text\n        return self\n\n    def dependency(self, text):\n        self.representation['DEP'] = text\n        return self\n\n    def part_of_speech(self, text):\n        self.representation['POS'] = text\n        return self\n\n    def tag(self, text):\n        self.representation['TAG'] = text\n        return self\n\n    def entity(self, text):\n        self.representation['ENTITY'] = text\n        return self\n\n\n    def matches(self, obj):\n        match = True\n\n        if 'TEXT' in self.representation:\n            match &= (self.representation['TEXT'] == obj.text)\n\n        if 'LEMMA' in self.representation:\n            match &= (self.representation['LEMMA'] == obj.lemma_)\n\n        if 'DEP' in self.representation:\n            match &= (self.representation['DEP'] == obj.dep_)\n\n        if 'POS' in self.representation:\n            match &= (self.representation['POS'] == obj.pos_)\n\n        if 'TAG' in self.representation:\n            match &= (self.representation['TAG'] == obj.tag_)\n\n        if 'ENTITY' in self.representation:\n            match &= (self.representation['ENTITY'] == obj.ent_type_)\n\n        return match\n\n    def __str__(self):\n        return json.dumps(self.representation)\n```\n\nWhen you write your production rules, you can use the `SpacyToken` class where before you'd use the default `TerminalToken`:\n\n```python\nrules.append(ProductionRule(NonTerminalToken('SOME_PRODUCTION_RULE'), [SpacyToken().dependency(\"pobj\")], record))\n```\n\n## Dev setup\n\nRun `make init`\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mprivat/pyllk", "keywords": "parser ll(k) lex yacc", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyllk", "package_url": "https://pypi.org/project/pyllk/", "platform": "", "project_url": "https://pypi.org/project/pyllk/", "project_urls": {"Homepage": "https://github.com/mprivat/pyllk"}, "release_url": "https://pypi.org/project/pyllk/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A python LL(k) parser with a twist where tokens can be any arbitrary objects.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://app.circleci.com/pipelines/github/mprivat/pyllk\" rel=\"nofollow\"><img alt=\"mprivat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0fa15774787a0f8b81b68cd85efd38ec5912085a/68747470733a2f2f636972636c6563692e636f6d2f67682f6d7072697661742f70796c6c6b2e7376673f7374796c653d736869656c64\"></a>\n<a href=\"https://codecov.io/gh/mprivat/pyllk\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f976b8c47721e69abb112ea07011c92d4e6349f8/68747470733a2f2f636f6465636f762e696f2f67682f6d7072697661742f70796c6c6b2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>Pyllk</h1>\n<p>A python LL(k) parser with a twist where tokens can be any arbitrary objects. The current implementation uses the backtracking algorithm. I'll eventually implement predictive parsing but the API is designed to remain backward compatible.</p>\n<h2>Example. A simple calculator</h2>\n<p>This is an example of the typical calculator. In this case, we use characters as tokens. The idea is to parse things like <code>((10+2)*15)/(7-2)</code> and be able to pull the result.</p>\n<p>For now, the grammar cannot be expressed in BNF notation so the production rules have to be created in code. It'll change in the future but using non-character tokens complicate things with BNF when representing terminals.</p>\n<p>There are 3 steps involved in the example:</p>\n<ol>\n<li>\n<p>Create actions that get executed when production rules are matched. Actions are optional but often necessary if you want to do anything useful with what you've parsed. The function must accept a single parameter of type <code>ExecutionContext</code> which will give you access to:</p>\n<ul>\n<li>The parser. That's useful if you want to access global configurations like the log level.</li>\n<li>The production rule. That's the rule that was just matched.</li>\n<li>The list of tokens that where matched to the production rule.</li>\n<li>The context given to the parser at the beginning. This is a dictionary containing anything you want to keep around. The example below put a stack inside it to keep track of parentheses in the expression. You can put anything you need in there.</li>\n</ul>\n</li>\n<li>\n<p>Create the production rules. A grammar is made of production rules that derives terminal and non-terminal tokens. If you don't know what I'm talking about here, stop right now and go read this first: <a href=\"https://en.wikipedia.org/wiki/Context-free_grammar\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Context-free_grammar</a>.</p>\n</li>\n<li>\n<p>Execute.</p>\n<ul>\n<li>Take the production rules and construct a grammar and a parser.</li>\n<li>Push your input into the parser.</li>\n<li>Collect the results in the <code>context</code> object.</li>\n</ul>\n</li>\n</ol>\n<h3>Create actions</h3>\n<pre><span class=\"k\">def</span> <span class=\"nf\">action_make_number</span><span class=\"p\">(</span><span class=\"n\">ec</span><span class=\"p\">):</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">ec</span><span class=\"o\">.</span><span class=\"n\">tokens</span><span class=\"p\">:</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">representation</span>\n    <span class=\"n\">ec</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Ex: </span><span class=\"si\">{}</span><span class=\"s2\"> + </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">sub</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Ex: </span><span class=\"si\">{}</span><span class=\"s2\"> - </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Ex: </span><span class=\"si\">{}</span><span class=\"s2\"> x </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">div</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Ex: </span><span class=\"si\">{}</span><span class=\"s2\"> / </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n<h3>Production rules</h3>\n<pre><span class=\"n\">calculator_rules_with_context</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"ROOT\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">),</span> <span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"+\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">)],</span> <span class=\"n\">add</span><span class=\"p\">))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"ROOT\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">),</span> <span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">)],</span> <span class=\"n\">sub</span><span class=\"p\">))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"ROOT\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">),</span> <span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">)],</span> <span class=\"n\">div</span><span class=\"p\">))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"ROOT\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">),</span> <span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">)],</span> <span class=\"n\">mul</span><span class=\"p\">))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"(\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"ROOT\"</span><span class=\"p\">),</span> <span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\")\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"expr\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">)],</span> <span class=\"n\">action_make_number</span><span class=\"p\">))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"0\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"1\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"2\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"3\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"4\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"5\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"6\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"7\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"8\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"9\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"0\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"2\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"3\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"4\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"5\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"6\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"7\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"8\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"9\"</span><span class=\"p\">),</span> <span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">)]))</span>\n<span class=\"n\">calculator_rules_with_context</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"digit_or_empty\"</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">TerminalToken</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)]))</span>\n</pre>\n<h3>Create a grammar and a parser</h3>\n<pre><span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">Grammar</span><span class=\"p\">(</span><span class=\"n\">calculator_rules_with_context</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">Parser</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'stack'</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_string</span><span class=\"p\">(</span><span class=\"s2\">\"((10+2)*15)/(7-2)\"</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'stack'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n</pre>\n<p>result will contain 36.0</p>\n<h2>Non-character input</h2>\n<p>Although character-tokens are the default, nothing prevents you from creating non-character tokens. Here is an example of terminal tokens that are meant to be fed by spaCy, a python NLP library.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SpacyToken</span><span class=\"p\">(</span><span class=\"n\">TerminalToken</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">representation</span> <span class=\"o\">=</span> <span class=\"p\">{})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'TEXT'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">text</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">lemma</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'LEMMA'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">text</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dependency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'DEP'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">text</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">part_of_speech</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'POS'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">text</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'TAG'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">text</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">entity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'ENTITY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">text</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">matches</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"s1\">'TEXT'</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span> <span class=\"o\">&amp;=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'TEXT'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"s1\">'LEMMA'</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span> <span class=\"o\">&amp;=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'LEMMA'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">lemma_</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"s1\">'DEP'</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span> <span class=\"o\">&amp;=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'DEP'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">dep_</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"s1\">'POS'</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span> <span class=\"o\">&amp;=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'POS'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">pos_</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"s1\">'TAG'</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span> <span class=\"o\">&amp;=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'TAG'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">tag_</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"s1\">'ENTITY'</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span> <span class=\"o\">&amp;=</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">[</span><span class=\"s1\">'ENTITY'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">ent_type_</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">match</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">representation</span><span class=\"p\">)</span>\n</pre>\n<p>When you write your production rules, you can use the <code>SpacyToken</code> class where before you'd use the default <code>TerminalToken</code>:</p>\n<pre><span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ProductionRule</span><span class=\"p\">(</span><span class=\"n\">NonTerminalToken</span><span class=\"p\">(</span><span class=\"s1\">'SOME_PRODUCTION_RULE'</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">SpacyToken</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dependency</span><span class=\"p\">(</span><span class=\"s2\">\"pobj\"</span><span class=\"p\">)],</span> <span class=\"n\">record</span><span class=\"p\">))</span>\n</pre>\n<h2>Dev setup</h2>\n<p>Run <code>make init</code></p>\n\n          </div>"}, "last_serial": 7008649, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "25b87a987469be7d129abcc9fdf22ac3", "sha256": "9ae62972c5a8cf8f2801be8472d437bb2bb91ef83dca05993541e085a42caece"}, "downloads": -1, "filename": "pyllk-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "25b87a987469be7d129abcc9fdf22ac3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7265, "upload_time": "2020-04-13T09:20:13", "upload_time_iso_8601": "2020-04-13T09:20:13.966971Z", "url": "https://files.pythonhosted.org/packages/b8/9f/ec4cc75fbb84a182a256ec4e2d87b2d0a7ed700afaa23ceec330ba0fa84f/pyllk-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b744b565ba31dfec9c6fd4285fd2c331", "sha256": "b22d46b1afd86aee41d05cfeef2df8f4681a702ea40954dbf5fcab72f7397fea"}, "downloads": -1, "filename": "pyllk-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b744b565ba31dfec9c6fd4285fd2c331", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6943, "upload_time": "2020-04-13T09:20:16", "upload_time_iso_8601": "2020-04-13T09:20:16.335008Z", "url": "https://files.pythonhosted.org/packages/2e/d1/8ccd78c7f5d3ef2875280733985cb8414ef8b0d70bda1dd15573c4d08f2b/pyllk-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25b87a987469be7d129abcc9fdf22ac3", "sha256": "9ae62972c5a8cf8f2801be8472d437bb2bb91ef83dca05993541e085a42caece"}, "downloads": -1, "filename": "pyllk-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "25b87a987469be7d129abcc9fdf22ac3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7265, "upload_time": "2020-04-13T09:20:13", "upload_time_iso_8601": "2020-04-13T09:20:13.966971Z", "url": "https://files.pythonhosted.org/packages/b8/9f/ec4cc75fbb84a182a256ec4e2d87b2d0a7ed700afaa23ceec330ba0fa84f/pyllk-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b744b565ba31dfec9c6fd4285fd2c331", "sha256": "b22d46b1afd86aee41d05cfeef2df8f4681a702ea40954dbf5fcab72f7397fea"}, "downloads": -1, "filename": "pyllk-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b744b565ba31dfec9c6fd4285fd2c331", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6943, "upload_time": "2020-04-13T09:20:16", "upload_time_iso_8601": "2020-04-13T09:20:16.335008Z", "url": "https://files.pythonhosted.org/packages/2e/d1/8ccd78c7f5d3ef2875280733985cb8414ef8b0d70bda1dd15573c4d08f2b/pyllk-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:56 2020"}