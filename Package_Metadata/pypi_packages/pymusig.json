{"info": {"author": "rage-proof", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# MuSig multisignatures for Python\n\nThis is a Python implementation of the [MuSig](https://eprint.iacr.org/2018/068) multisignature scheme, proposed by several Bitcoin contributors.\nIt's a scheme to create aggregated multisignatures securly and trustlessly between different signing participants. The signature scheme in use is the schnorr signature scheme.\nChanges that will happen in the future to the draft or the reference implementation will be adjusted here.\n\nThe schnorr specification is defined in BIP-340 and the code and test vectors are used from [here](https://github.com/bitcoin/bips/tree/master/bip-0340).\n\nThe MuSig code is following the implementation for libsecp256k1 as well as the test vectors are extracted from that [implementation](https://github.com/jonasnick/secp256k1-zkp).\n\n**Note: Use this package only for testing and learning, but not for live use cases.**\n**Don't risk funds, probably errors exist.**\n\n\n## Installing\nPython 3 is required.\n\n**Github:**\n\n```sh\ngit clone git://github.com/rage-proof/MuSig.git\ncd MuSig\npython3 setup.py install\n```\n\n**or PyPI:**\n\n```sh\npip3 install pymusig\n```\n\n## Usage\n\n\n```python\n\n# multiple signer can create aggregated signature on a combined public key\n# signer Alice and Bob doing the same steps in parallel \n\n#Alice's session:\nimport os\nfrom pymusig import CombinedPubkey, MuSigSession, schnorr_verify\n# count signer\nN_SIGNERS = 2\n# id from signer Alice\ni_alice = 0\n\n#set the message and list of pubkeys\npubkeys = [pubkey_alice, pubkey_bob]\nmsg = sha256(b'Some Message')\n\n#create combined pubkey\ncombined_pk = CombinedPubkey(pubkeys)\n\n#create session\n#WARNING:every session needs a new random session ID, otherwise a malicious signer can extract the secret key\nsession_id_alice = os.urandom(32)\nsession_alice = MuSigSession(session_id_alice, N_SIGNERS, i_alice, seckey_alice, combined_pk.get_key(), combined_pk.get_pre_session(), msg)\n\n#Three rounds of communication are necessary\n#1. Round: receive and exchange Nonce commitments\nnonce_commitment_alice = session_alice.get_nonce_commitment()\nnonce_commitments = [nonce_commitment_alice, nonce_commitment_bob]\n\n#2. Round: receive and exchange Nonces\nnonce_alice = session_alice.get_public_nonce(nonce_commitments)\nnonces = [nonce_alice, nonce_bob]\nif session_alice.set_nonce(nonces)\n\n#create combined Nonce and partial signature for Alice\nif session_alice.combine_nonces()\nsignature_alice = session_alice.partial_sign()\n\n#3. Round: exchange and validate partial signatures, create a combined signature\nif session_alice.partial_sig_verify(signature_bob, pubkey_bob, i_bob)\nsigs = [signature_alice, signature_bob]\nfinal_sig = session_alice.partial_sig_combine(sigs)\n\n#verify the schnorr signature\nif schnorr_verify(msg, combined_pk.get_key(), final_sig)\n\n```\nA detailed example of a signature with three parties can be found under `/tests/test_musig.py`\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pymusig", "package_url": "https://pypi.org/project/pymusig/", "platform": "", "project_url": "https://pypi.org/project/pymusig/", "project_urls": null, "release_url": "https://pypi.org/project/pymusig/0.0.1/", "requires_dist": ["chacha20poly1305 (==0.0.3)"], "requires_python": ">=3.5", "summary": "Implementation of the MuSig multisignature protocol for python", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MuSig multisignatures for Python</h1>\n<p>This is a Python implementation of the <a href=\"https://eprint.iacr.org/2018/068\" rel=\"nofollow\">MuSig</a> multisignature scheme, proposed by several Bitcoin contributors.\nIt's a scheme to create aggregated multisignatures securly and trustlessly between different signing participants. The signature scheme in use is the schnorr signature scheme.\nChanges that will happen in the future to the draft or the reference implementation will be adjusted here.</p>\n<p>The schnorr specification is defined in BIP-340 and the code and test vectors are used from <a href=\"https://github.com/bitcoin/bips/tree/master/bip-0340\" rel=\"nofollow\">here</a>.</p>\n<p>The MuSig code is following the implementation for libsecp256k1 as well as the test vectors are extracted from that <a href=\"https://github.com/jonasnick/secp256k1-zkp\" rel=\"nofollow\">implementation</a>.</p>\n<p><strong>Note: Use this package only for testing and learning, but not for live use cases.</strong>\n<strong>Don't risk funds, probably errors exist.</strong></p>\n<h2>Installing</h2>\n<p>Python 3 is required.</p>\n<p><strong>Github:</strong></p>\n<pre>git clone git://github.com/rage-proof/MuSig.git\n<span class=\"nb\">cd</span> MuSig\npython3 setup.py install\n</pre>\n<p><strong>or PyPI:</strong></p>\n<pre>pip3 install pymusig\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"c1\"># multiple signer can create aggregated signature on a combined public key</span>\n<span class=\"c1\"># signer Alice and Bob doing the same steps in parallel </span>\n\n<span class=\"c1\">#Alice's session:</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pymusig</span> <span class=\"kn\">import</span> <span class=\"n\">CombinedPubkey</span><span class=\"p\">,</span> <span class=\"n\">MuSigSession</span><span class=\"p\">,</span> <span class=\"n\">schnorr_verify</span>\n<span class=\"c1\"># count signer</span>\n<span class=\"n\">N_SIGNERS</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"c1\"># id from signer Alice</span>\n<span class=\"n\">i_alice</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">#set the message and list of pubkeys</span>\n<span class=\"n\">pubkeys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pubkey_alice</span><span class=\"p\">,</span> <span class=\"n\">pubkey_bob</span><span class=\"p\">]</span>\n<span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">sha256</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'Some Message'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#create combined pubkey</span>\n<span class=\"n\">combined_pk</span> <span class=\"o\">=</span> <span class=\"n\">CombinedPubkey</span><span class=\"p\">(</span><span class=\"n\">pubkeys</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#create session</span>\n<span class=\"c1\">#WARNING:every session needs a new random session ID, otherwise a malicious signer can extract the secret key</span>\n<span class=\"n\">session_id_alice</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">urandom</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"n\">session_alice</span> <span class=\"o\">=</span> <span class=\"n\">MuSigSession</span><span class=\"p\">(</span><span class=\"n\">session_id_alice</span><span class=\"p\">,</span> <span class=\"n\">N_SIGNERS</span><span class=\"p\">,</span> <span class=\"n\">i_alice</span><span class=\"p\">,</span> <span class=\"n\">seckey_alice</span><span class=\"p\">,</span> <span class=\"n\">combined_pk</span><span class=\"o\">.</span><span class=\"n\">get_key</span><span class=\"p\">(),</span> <span class=\"n\">combined_pk</span><span class=\"o\">.</span><span class=\"n\">get_pre_session</span><span class=\"p\">(),</span> <span class=\"n\">msg</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Three rounds of communication are necessary</span>\n<span class=\"c1\">#1. Round: receive and exchange Nonce commitments</span>\n<span class=\"n\">nonce_commitment_alice</span> <span class=\"o\">=</span> <span class=\"n\">session_alice</span><span class=\"o\">.</span><span class=\"n\">get_nonce_commitment</span><span class=\"p\">()</span>\n<span class=\"n\">nonce_commitments</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nonce_commitment_alice</span><span class=\"p\">,</span> <span class=\"n\">nonce_commitment_bob</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#2. Round: receive and exchange Nonces</span>\n<span class=\"n\">nonce_alice</span> <span class=\"o\">=</span> <span class=\"n\">session_alice</span><span class=\"o\">.</span><span class=\"n\">get_public_nonce</span><span class=\"p\">(</span><span class=\"n\">nonce_commitments</span><span class=\"p\">)</span>\n<span class=\"n\">nonces</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">nonce_alice</span><span class=\"p\">,</span> <span class=\"n\">nonce_bob</span><span class=\"p\">]</span>\n<span class=\"k\">if</span> <span class=\"n\">session_alice</span><span class=\"o\">.</span><span class=\"n\">set_nonce</span><span class=\"p\">(</span><span class=\"n\">nonces</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#create combined Nonce and partial signature for Alice</span>\n<span class=\"k\">if</span> <span class=\"n\">session_alice</span><span class=\"o\">.</span><span class=\"n\">combine_nonces</span><span class=\"p\">()</span>\n<span class=\"n\">signature_alice</span> <span class=\"o\">=</span> <span class=\"n\">session_alice</span><span class=\"o\">.</span><span class=\"n\">partial_sign</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#3. Round: exchange and validate partial signatures, create a combined signature</span>\n<span class=\"k\">if</span> <span class=\"n\">session_alice</span><span class=\"o\">.</span><span class=\"n\">partial_sig_verify</span><span class=\"p\">(</span><span class=\"n\">signature_bob</span><span class=\"p\">,</span> <span class=\"n\">pubkey_bob</span><span class=\"p\">,</span> <span class=\"n\">i_bob</span><span class=\"p\">)</span>\n<span class=\"n\">sigs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">signature_alice</span><span class=\"p\">,</span> <span class=\"n\">signature_bob</span><span class=\"p\">]</span>\n<span class=\"n\">final_sig</span> <span class=\"o\">=</span> <span class=\"n\">session_alice</span><span class=\"o\">.</span><span class=\"n\">partial_sig_combine</span><span class=\"p\">(</span><span class=\"n\">sigs</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#verify the schnorr signature</span>\n<span class=\"k\">if</span> <span class=\"n\">schnorr_verify</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">combined_pk</span><span class=\"o\">.</span><span class=\"n\">get_key</span><span class=\"p\">(),</span> <span class=\"n\">final_sig</span><span class=\"p\">)</span>\n</pre>\n<p>A detailed example of a signature with three parties can be found under <code>/tests/test_musig.py</code></p>\n\n          </div>"}, "last_serial": 6861864, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "253b2689c6ef42f8084c1637ccd00167", "sha256": "e110733e4e25f6af668f357a12c14b5945b3a0a0c2e5257ac9a1f4802e0f7e32"}, "downloads": -1, "filename": "pymusig-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "253b2689c6ef42f8084c1637ccd00167", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9590, "upload_time": "2020-03-22T21:23:15", "upload_time_iso_8601": "2020-03-22T21:23:15.369122Z", "url": "https://files.pythonhosted.org/packages/16/ad/6978e9d6eaea37bffa2b2a8fb041f0cfc515379d9e15bde70b4cf7c28fa3/pymusig-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3203872a2e09f4708d4d16b21eada557", "sha256": "d8f8daf13aec7de443d2411a10077b343ba1026fd323d4117e203e2a32eeb8b2"}, "downloads": -1, "filename": "pymusig-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3203872a2e09f4708d4d16b21eada557", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7518, "upload_time": "2020-03-22T21:23:17", "upload_time_iso_8601": "2020-03-22T21:23:17.479509Z", "url": "https://files.pythonhosted.org/packages/2a/1b/a517141c5ecccf86d109191c46c5bc2664b6faee229e8d12f8c3e2cb7211/pymusig-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "253b2689c6ef42f8084c1637ccd00167", "sha256": "e110733e4e25f6af668f357a12c14b5945b3a0a0c2e5257ac9a1f4802e0f7e32"}, "downloads": -1, "filename": "pymusig-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "253b2689c6ef42f8084c1637ccd00167", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9590, "upload_time": "2020-03-22T21:23:15", "upload_time_iso_8601": "2020-03-22T21:23:15.369122Z", "url": "https://files.pythonhosted.org/packages/16/ad/6978e9d6eaea37bffa2b2a8fb041f0cfc515379d9e15bde70b4cf7c28fa3/pymusig-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3203872a2e09f4708d4d16b21eada557", "sha256": "d8f8daf13aec7de443d2411a10077b343ba1026fd323d4117e203e2a32eeb8b2"}, "downloads": -1, "filename": "pymusig-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3203872a2e09f4708d4d16b21eada557", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7518, "upload_time": "2020-03-22T21:23:17", "upload_time_iso_8601": "2020-03-22T21:23:17.479509Z", "url": "https://files.pythonhosted.org/packages/2a/1b/a517141c5ecccf86d109191c46c5bc2664b6faee229e8d12f8c3e2cb7211/pymusig-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:29 2020"}