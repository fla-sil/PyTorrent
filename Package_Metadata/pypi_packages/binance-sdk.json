{"info": {"author": "Kael Zhang", "author_email": "i+pypi@kael.me", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![](https://travis-ci.org/kaelzhang/python-binance-sdk.svg?branch=master)](https://travis-ci.org/kaelzhang/python-binance-sdk)\n[![](https://codecov.io/gh/kaelzhang/python-binance-sdk/branch/master/graph/badge.svg)](https://codecov.io/gh/kaelzhang/python-binance-sdk)\n[![](https://img.shields.io/pypi/v/binance-sdk.svg)](https://pypi.org/project/binance-sdk/)\n[![](https://img.shields.io/pypi/pyversions/binance-sdk.svg)](https://pypi.org/project/binance-sdk/)\n[![](https://img.shields.io/pypi/l/binance-sdk.svg)](https://github.com/kaelzhang/python-binance-sdk)\n\n# [binance-sdk](https://github.com/kaelzhang/python-binance-sdk)\n\n`binance-sdk` is an another unofficial Binance SDK for python 3.7+, which:\n\n- Based on [Binance Official API Docs v3](https://github.com/binance-exchange/binance-official-api-docs).\n- Uses Binance's new websocket stream which supports live pub/sub so that we only need **ONE** websocket connection.\n- Has an optional `pandas.DataFrame` support. If `pandas` is installed, columns of all stream data frames are renamed for readability.\n- Based on python `async`/`await`\n- Manages the order book for you (handled by `OrderBookHandlerBase`), so that you need not to worry about websocket reconnection and message losses. For details, see the section [`OrderBookHandlerBase`](#orderbookhandlerbasekwargs)\n- Supports to change API endpoints, so that we could use faster API hosts.\n\n## Install\n\n```sh\n# Without pandas support\npip install binance-sdk\n```\n\nor\n\n```sh\n# With pandas support\npip install binance-sdk[pandas]\n```\n\n## Basic Usage\n\n```py\n#!/usr/bin/env python\n\nimport asyncio\nfrom binance import Client\n\nclient = Client()\n\nasync def main():\n    print(await client.get_exchange_info())\n\nasyncio.run(main())\n```\n\n## Handling messages\n\nBinance-sdk provides handler-based APIs to handle all websocket messages, and you are able to not worry about websockets.\n\n```py\n#!/usr/bin/env python\n\nfrom binance import Client, TickerHandlerBase, SubType\n\nclient = Client(api_key)\n\nasync def main():\n    # Implement your own TickerHandler.\n    class TickerPrinter(TickerHandlerBase):\n        async def receive(self, payload):\n            \"\"\"The function to receive ticker streams.\n            The function could either be sync or async\n\n            Args:\n                payload (dict): the raw stream payload which is\n                message['data'] of the original stream message\n            \"\"\"\n\n            # If binance-sdk is installed with pandas support, then\n            #   `ticker` will be a `DataFrame` with columns renamed\n            # Otherwise, it is unnecessary to call `super().receive`.\n            ticker_df = super().receive(payload)\n\n            # Just print the ticker\n            print(ticker_df)\n\n    # Register the handler for `SubType.TICKER`\n    client.handler(TickerPrinter())\n\n    # Subscribe to ticker change for symbol BTCUSDT\n    await client.subscribe(SubType.TICKER, 'BTCUSDT')\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n\n# Run the loop forever to keep receiving messages\nloop.run_forever()\n\n# It prints a pandas.DataFrame for each message\n\n#    type        event_time     symbol   open            high            low            ...\n# 0  24hrTicker  1581597461196  BTCUSDT  10328.26000000  10491.00000000  10080.00000000 ...\n\n# ...(to be continued)\n```\n\n### Subscribe to more symbol pairs and types\n\n```py\n# This will subscribe to\n# - bnbusdt@aggTrade\n# - bnbusdt@depth\n# - bnbbtc@aggTrade\n# - bnbbtc@depth\nawait client.subscribe(\n    # We could also subscribe multiple types\n    #   for both `BNBUSDT` and 'BNBBTC'\n    [\n        SubType.AGG_TRADE,\n        SubType.ORDER_BOOK\n    ],\n    # We could subscribe more than one symbol pairs at a time\n    [\n        # Which is equivalent to `BNBUSDT`\n        'BNB_USDT',\n        'BNBBTC'\n    ]\n)\n```\n\nAnd since we subscribe to **THREE** new types of messages, we need to set the handlers each of which should `isinstance()` of one of\n- `TradeHandlerBase`\n- `AggTradeHandlerBase`\n- `OrderBookHandlerBase`\n- `KlineHandlerBase`\n- `MiniTickerHandlerBase`\n- `TickerHandlerBase`\n- `AllMarketMiniTickersHandlerBase`\n- `AllMarketTickersHandlerBase`\n- `AccountInfoHandlerBase`\n- `AccountPositionHandlerBase`\n- `BalanceUpdateHandlerBase`\n- `OrderUpdateHandlerBase`\n- `OrderListStatusHandlerBase`\n- `HandlerExceptionHandlerBase` a special handler to handle stream exceptions\n\n```py\nclient.handler(MyTradeHandler(), MyOrderBookHandler(), MyKlineHandler())\n```\n\n### Subscribe to user streams\n\n```py\n# Before subscribe to user stream, you need to provide `api_secret` (and also `api_key`)\nclient.secret(api_secret)\n\n# Or, you should provide `api_secret` when initialize the client\n# ```\n# client = Client(api_key, api_secret)\n# ```\n\n# binance-sdk will handle user listen key internally without your concern\nawait client.subscribe(SubType.USER)\n```\n\n### Subscribe to handler exceptions\n\n`Binance-sdk` receives stream messages in background tasks, so sometimes it is difficult to detect the exceptions raised in `receive` function of user handlers.\n\nFortunately, we could use `HandlerExceptionHandlerBase`\n\n```py\nfrom binance import (\n    HandlerExceptionHandlerBase,\n    KlineHandlerBase\n)\n\nclass KlineHandler(KlineHandlerBase):\n    def receive(self, payload):\n        raise RuntimeError('this will ruin my day')\n\nclass HandlerExceptionHandler(HandlerExceptionHandlerBase):\n    async def receive(self, exception):\n        # By calling `super().receive(exception)`,\n        # it will print the error stack.\n        super().receive(exception)\n\n        await send_to_monitor(exception)\n\nclient.handler(KlineHandler())\nclient.handler(HandlerExceptionHandler())\n```\n\nIf you just want to print error stacks, we could:\n\n```py\nclient.handler(HandlerExceptionHandlerBase())\n```\n\n# APIs\n\n## Client(**kwargs)\n\nAll arguments of the constructor Client are keyworded arguments and all optional.\n\n- **api_key?** `str=None` binance api key\n- **api_secret?** `str=None` binance api secret\n- **request_params?** `dict=None` global request params for aiohttp\n- **stream_retry_policy?** `Callable[[int], Tuple[bool, int, bool]]` retry policy for websocket stream. For details, see [RetryPolicy](#retrypolicy)\n- **stream_timeout?** `int=5` seconds util the stream reach an timeout error\n- **api_host?** `str='https://api.binance.com'` to specify another API host for rest API requests. \u8fd9\u4e2a\u53c2\u6570\u7684\u5b58\u5728\u610f\u4e49\uff0c\u4f7f\u7528\u65b9\u6cd5\uff0c\u4e0d\u7d2f\u8ff0\uff0c\u4f60\u61c2\u7684\u3002\n- **stream_host?** `str='wss://stream.binance.com'` to specify another stream host for websocket connections.\n\nCreate a binance client.\n\nThen with `client`, you could call\n- [Rest APIs](https://github.com/kaelzhang/python-binance-sdk/blob/master/binance/apis/rest.py#L225)\n- [Withdraw APIs](https://github.com/kaelzhang/python-binance-sdk/blob/master/binance/apis/wapi.py#L144).\n\nEach API method accepts only keyworded arguments (kwargs) and has verbosed Python doc strings (Google style) which you could check out when you are coding.\n\nThe following example shows how to create a new order.\n\n```py\nfrom binance import (\n    OrderSide,\n    OrderType,\n    TimeInForce\n)\n\n# All arguments are keyworded arguments.\nawait client.create_order(\n    symbol='BTCUSDT',\n\n    # You could use string `BUY` (NOT recommended) instead of\n    # the built-in enum types of Binance-sdk.\n\n    # But it is a good practise to use enums which could help\n    # us to avoid spelling mistakes, and save our money.\n    side=OrderSide.BUY,\n    type=OrderType.LIMIT,\n    timeInForce=TimeInForce.GTC,\n\n    # Binance-sdk will not handle Decimals for you,\n    # so you'd better to know how to deal with python float precisions.\n    # Or you could use string-type quantity.\n    quantity=10.,\n\n    # It is better to use string type instead of float.\n    # The same as `quantity`\n    price='7000.1'\n)\n```\n\n### client.key(api_key) -> self\n\nDefine or change api key. This method is unnecessary if we only request APIs of [`SecurityType.NONE`](https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#endpoint-security-type)\n\n### client.secret(api_secret) -> self\n\nDefine or change api secret, especially when we have not define api secret in `Client` constructor.\n\n`api_secret` is not always required for using binance-sdk. See [Endpoint security type](https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#endpoint-security-type)\n\n### await client.get(uri, **kwargs)\n### await client.post(uri, **kwargs)\n### await client.put(uri, **kwargs)\n### await client.delete(uri, **kwargs)\n\n- **uri** `str` the request url\n- **security_type?** `SecurityType` endpoint security type. Defaults to `SecurityType.NONE`.\n\nSend a GET/POST/PUT/DELETE HTTPs request.\n\n### await client.subscribe(subtype, *subtype_params) -> None\n### await client.subscribe(*subscriptions) -> None\n\n- **subtype** `str` subscription type, should be one of `SubType.*`s. For details, see [SubType](#subtype)\n- **subtype_params** `List` params for a certain `subtype`\n- **subscriptions** `List[Tuple]` a pack of subscriptions each of which is a tuple of `subtype` and `*subtype_params`.\n\nSubscribe to a stream or multiple streams. If no websocket connection is made up, `client.subscribe` will also create a websocket connection.\n\n```py\nfrom binance import SubType, KlineInterval\n\nawait client.subscribe(SubType.TICKER, 'BNBUSDT')\n\n# SubType.ALL_MARKET_MINI_TICKERS with default param\nawait client.subscribe(SubType.ALL_MARKET_MINI_TICKERS)\n\n# SubType.ALL_MARKET_MINI_TICKERS with update interval 3000ms\nawait client.subscribe(SubType.ALL_MARKET_MINI_TICKERS, 3000)\n\n# Subcribe to multiple types\nawait client.subscribe(\n    (SubType.KLINE, 'BTC_USDT', KlineInterval.DAY),\n    (SubType.TICKER, 'BNBUSDT'),\n    (\n        [\n            SubType.ORDER_BOOK,\n            SubType.TRADE\n        ],\n        ['BNBUSDT', 'BTCUSDT']\n    ),\n    (SubType.ALL_MARKET_MINI_TICKERS,) # <-- PAY ATTENTION to the `,` here\n)\n```\n\nPossible exceptions:\n- `InvalidSubParamsException`\n- `UnsupportedSubTypeException`\n- `InvalidSubTypeParamException`\n- `StreamAbandonedException`\n\n### client.start() -> self\n\nStart receiving streams\n\n### client.stop() -> self\n\nStop receiving streams\n\n### await client.close(code=4999) -> None\n\n- **code** `int=4999` the custom close code for websocket. It should be in the [range 4000 - 4999](https://tools.ietf.org/html/rfc6455#section-7.4.2)\n\nClose stream connection, clear all stream subscriptions and clear all handlers.\n\n### client.handler(*handlers) -> self\n\n- **handlers** `List[Union[HandlerExceptionHandler,TradeHandlerBase,...]]`\n\nRegister message handlers for streams. If we've subscribed to a stream of a certain `subtype` with no corresponding handler provided, the messages of `subtype` will not be handled.\n\nExcept for `HandlerExceptionHandler`, handlers each of whose name ends with `Base` should be inherited before use.\n\nTypically, we need to override the `def receive(self, payload)` method.\n\n```py\nclass MyTradeHandler(TradeHandlerBase):\n    async def receive(self, payload):\n        # If pandas is installed, then `payload` is a `pandas.DataFrame`,\n        #   otherwise is a dict.\n        df = super().receive(payload)\n\n        # If you don't want the `pandas.DataFrame`, use `payload` directly\n\n        await saveTrade(df)\n\nclient.handler(MyTradeHandler())\n```\n\nWe could also register multiple handlers at one time\n\n```py\nclient.handler(MyTradeHandler(), MyTickerHandler())\n```\n\nIf we register an invalid handler, an `InvalidHandlerException` exception will be raised.\n\n## SubType\n\nIn this section, we will note the parameters for each `subtypes`\n\n### `SubType` with parameters `symbol` and `interval`\n\n- `SubType.KLINE`\n\nAnd `interval` should be one of the `KlineInterval` enumerables\n\n### `SubType`s with a param `symbol`\n\n- `SubType.TRADE`\n- `SubType.AGG_TRADE`\n- `SubType.MINI_TICKER`\n- `SubType.TICKER`\n- `SubType.ORDER_BOOK`\n\n### `SubType`s with an optional param `updateInterval=1000` (ms)\n\n- `SubType.ALL_MARKET_MINI_TICKERS`\n- `SubType.ALL_MARKET_TICKERS`\n\n### `Subtype` with no param\n\n- `SubType.USER`\n\n## RetryPolicy\n\nRetry policy is used by binance-sdk to determine what to do next after the client fails to do some certain thing.\n\n```py\nabandon, delay, reset = stream_retry_policy(retries)\n\n# `retries` is the counter number of\n#   how many times has the stream retried to reconnect.\n# If the stream is disconnected just now for the first time, `retries` will be `0`\n\n# If abandon is `True`, then the client will give up reconnecting.\n# Otherwise:\n# - The client will asyncio.sleep `delay` seconds before reconnecting.\n# - If reset is `True`, the client will reset the retry counter to `0`\n```\n\n## OrderBookHandlerBase(**kwargs)\n\n- **kwargs**\n  - **limit?** `int=100` the limit of the depth snapshot\n  - **retry_policy?** `Callable=`\n\nBy default, binance-sdk maintains the orderbook for you according to the rules of [the official documentation](https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#how-to-manage-a-local-order-book-correctly).\n\nSpecifically, `OrderBookHandlerBase` does the job.\n\nWe could get the managed `OrderBook` object by method `handler.orderbook(symbol)`.\n\n```py\nasync def main():\n    client = Client(api_key)\n\n    # Unlike other handlers, we usually do not need to inherit `OrderBookHandlerBase`,\n    #   unless we need to receive the raw payload of 'depthUpdate' message\n    handler = OrderBookHandlerBase()\n\n    client.handler(handler)\n    await client.subscribe(SubType.ORDER_BOOK, 'BTCUSDT')\n\n    # Get the reference of OrderBook object for 'BTCUSDT'\n    orderbook = handler.orderbook('BTCUSDT')\n\n    while True:\n        # If the `retry_policy` never abandon a retry,\n        #   the 'try' block could be emitted\n        try:\n            await orderbook.updated()\n        except Exception as e:\n            print('exception occurred')\n        else:\n            await doSomethingWith(orderbook.asks, orderbook.bids)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n\nloop.run_forever()\n```\n\n## OrderBook(symbol, **kwargs)\n\n- **symbol** `str` the symbol name\n- **kwargs**\n  - **limit?** `int=100` limit of the orderbook\n  - **client** `Client=None` the instance of `binance.Client`\n  - **retry_policy?** `Callable[[int], (bool, int, bool)]` retry policy for depth snapshot which has the same mechanism as `Client::stream_retry_policy`\n\n`OrderBook` is another public class that we could import from binance-sdk and you could also construct your own `OrderBook` instance.\n\n```py\nasync def main():\n    # PAY attention that `orderbook` should be run in an event loop\n    orderbook = OrderBook('BTCUSDT', client=client)\n\n    await orderbook.updated()\n\n    print(orderbook.asks)\n```\n\n### orderbook.set_client(client) -> None\n\n- **client** `Client` the instance of `binance.Client`\n\nSet the client. If `client` is not specified in the constructor, then executing this method will make the orderbook to fetch the snapshot for the first time.\n\n### orderbook.set_limit(limit) -> None\n\n- **limit** `int`\n\nSet depth limit which is used by [binance reset api](https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book).\n\n### orderbook.set_retry_policy(retry_policy) -> None\n\n- **retry_policy** `Callable`\n\nSet retry policy of the certain orderbook\n\n### property `orderbook.ready` -> bool\n\nThere is a property getter in `orderbook` to detect whether the asks and bids are updated in the orderbook.\n\nIf there is a network malfunction of the stream which causing the gap between two depth update messages, `orderbook` will fetch a new snapshot from the server, and during that time and before we merge the snapshot, `orderbook.ready` is `False`.\n\n### property `orderbook.asks` -> list\n### property `orderbook.bids` -> list\n\nGet asks and bids in ascending order.\n\n### orderbook.update(payload) -> bool\n\n- **payload** `dict` the data payload of the `depthUpdate` stream message\n\nReturns `True` if the payload is valid and is updated to the orderbook, otherwise `False`\n\nIf the return value is `False`, the orderbook will automatically start fetching the snapshot\n\n### await orderbook.fetch() -> None\n\nManually fetch the snapshot.\n\nFor most scenarios, you need **NOT** to call this method because once\nthere is an invalid payload, the orderbook will fetch the snapshot itself.\n\n### await orderbook.updated() -> None\n\nWait for the next update of the orderbook.\n\nWe could also await `orderbook.updated()` to make sure the orderbook is ready.\n\nIf the orderbook fails to fetch depth snapshot for so many times which means the fetching is abanboned by the `retry_policy`, an `aiohttp` exception will be raised.\n\n#### Listen to the updates of `orderbook`\n\n```py\nasync def start_listening_updates(orderbook):\n    # This is an infinite loop\n    while True:\n        await orderbook.updated()\n        # do something\n\ndef start():\n    return asyncio.create_task(start_listening_updates(orderbook))\n\ntask = start()\n\n# If we want to stop listening\ntask.cancel()\n```\n\n## License\n\n[MIT](../LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kaelzhang/python-binance-sdk", "keywords": "binance exchange sdk rest api bitcoin btc bnb ethereum eth neo", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "binance-sdk", "package_url": "https://pypi.org/project/binance-sdk/", "platform": "", "project_url": "https://pypi.org/project/binance-sdk/", "project_urls": {"Homepage": "https://github.com/kaelzhang/python-binance-sdk"}, "release_url": "https://pypi.org/project/binance-sdk/1.1.0/", "requires_dist": ["aiohttp", "aioretry", "websockets", "pandas ; extra == 'pandas'"], "requires_python": ">=3.7", "summary": "Binance Python SDK", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/kaelzhang/python-binance-sdk\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b92440676000c87e7b99f2a619a2ef84a59c7cf/68747470733a2f2f7472617669732d63692e6f72672f6b61656c7a68616e672f707974686f6e2d62696e616e63652d73646b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/kaelzhang/python-binance-sdk\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b272abdb503fbff9c6dfc141484540f59bd4a223/68747470733a2f2f636f6465636f762e696f2f67682f6b61656c7a68616e672f707974686f6e2d62696e616e63652d73646b2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/binance-sdk/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00a983deae03b89f8dffd0897282830cff39650a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f62696e616e63652d73646b2e737667\"></a>\n<a href=\"https://pypi.org/project/binance-sdk/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7904bfaefbddf8552fc6f575b4b6c590e279f484/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f62696e616e63652d73646b2e737667\"></a>\n<a href=\"https://github.com/kaelzhang/python-binance-sdk\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50965e36ab37b8ded89583570b6605e1ad749144/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f62696e616e63652d73646b2e737667\"></a></p>\n<h1><a href=\"https://github.com/kaelzhang/python-binance-sdk\" rel=\"nofollow\">binance-sdk</a></h1>\n<p><code>binance-sdk</code> is an another unofficial Binance SDK for python 3.7+, which:</p>\n<ul>\n<li>Based on <a href=\"https://github.com/binance-exchange/binance-official-api-docs\" rel=\"nofollow\">Binance Official API Docs v3</a>.</li>\n<li>Uses Binance's new websocket stream which supports live pub/sub so that we only need <strong>ONE</strong> websocket connection.</li>\n<li>Has an optional <code>pandas.DataFrame</code> support. If <code>pandas</code> is installed, columns of all stream data frames are renamed for readability.</li>\n<li>Based on python <code>async</code>/<code>await</code></li>\n<li>Manages the order book for you (handled by <code>OrderBookHandlerBase</code>), so that you need not to worry about websocket reconnection and message losses. For details, see the section <a href=\"#orderbookhandlerbasekwargs\" rel=\"nofollow\"><code>OrderBookHandlerBase</code></a></li>\n<li>Supports to change API endpoints, so that we could use faster API hosts.</li>\n</ul>\n<h2>Install</h2>\n<pre><span class=\"c1\"># Without pandas support</span>\npip install binance-sdk\n</pre>\n<p>or</p>\n<pre><span class=\"c1\"># With pandas support</span>\npip install binance-sdk<span class=\"o\">[</span>pandas<span class=\"o\">]</span>\n</pre>\n<h2>Basic Usage</h2>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">binance</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_exchange_info</span><span class=\"p\">())</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h2>Handling messages</h2>\n<p>Binance-sdk provides handler-based APIs to handle all websocket messages, and you are able to not worry about websockets.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">binance</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">TickerHandlerBase</span><span class=\"p\">,</span> <span class=\"n\">SubType</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Implement your own TickerHandler.</span>\n    <span class=\"k\">class</span> <span class=\"nc\">TickerPrinter</span><span class=\"p\">(</span><span class=\"n\">TickerHandlerBase</span><span class=\"p\">):</span>\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">receive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">):</span>\n            <span class=\"sd\">\"\"\"The function to receive ticker streams.</span>\n<span class=\"sd\">            The function could either be sync or async</span>\n\n<span class=\"sd\">            Args:</span>\n<span class=\"sd\">                payload (dict): the raw stream payload which is</span>\n<span class=\"sd\">                message['data'] of the original stream message</span>\n<span class=\"sd\">            \"\"\"</span>\n\n            <span class=\"c1\"># If binance-sdk is installed with pandas support, then</span>\n            <span class=\"c1\">#   `ticker` will be a `DataFrame` with columns renamed</span>\n            <span class=\"c1\"># Otherwise, it is unnecessary to call `super().receive`.</span>\n            <span class=\"n\">ticker_df</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">receive</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Just print the ticker</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ticker_df</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Register the handler for `SubType.TICKER`</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">TickerPrinter</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># Subscribe to ticker change for symbol BTCUSDT</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">TICKER</span><span class=\"p\">,</span> <span class=\"s1\">'BTCUSDT'</span><span class=\"p\">)</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Run the loop forever to keep receiving messages</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># It prints a pandas.DataFrame for each message</span>\n\n<span class=\"c1\">#    type        event_time     symbol   open            high            low            ...</span>\n<span class=\"c1\"># 0  24hrTicker  1581597461196  BTCUSDT  10328.26000000  10491.00000000  10080.00000000 ...</span>\n\n<span class=\"c1\"># ...(to be continued)</span>\n</pre>\n<h3>Subscribe to more symbol pairs and types</h3>\n<pre><span class=\"c1\"># This will subscribe to</span>\n<span class=\"c1\"># - bnbusdt@aggTrade</span>\n<span class=\"c1\"># - bnbusdt@depth</span>\n<span class=\"c1\"># - bnbbtc@aggTrade</span>\n<span class=\"c1\"># - bnbbtc@depth</span>\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span>\n    <span class=\"c1\"># We could also subscribe multiple types</span>\n    <span class=\"c1\">#   for both `BNBUSDT` and 'BNBBTC'</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">AGG_TRADE</span><span class=\"p\">,</span>\n        <span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">ORDER_BOOK</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\"># We could subscribe more than one symbol pairs at a time</span>\n    <span class=\"p\">[</span>\n        <span class=\"c1\"># Which is equivalent to `BNBUSDT`</span>\n        <span class=\"s1\">'BNB_USDT'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'BNBBTC'</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>And since we subscribe to <strong>THREE</strong> new types of messages, we need to set the handlers each of which should <code>isinstance()</code> of one of</p>\n<ul>\n<li><code>TradeHandlerBase</code></li>\n<li><code>AggTradeHandlerBase</code></li>\n<li><code>OrderBookHandlerBase</code></li>\n<li><code>KlineHandlerBase</code></li>\n<li><code>MiniTickerHandlerBase</code></li>\n<li><code>TickerHandlerBase</code></li>\n<li><code>AllMarketMiniTickersHandlerBase</code></li>\n<li><code>AllMarketTickersHandlerBase</code></li>\n<li><code>AccountInfoHandlerBase</code></li>\n<li><code>AccountPositionHandlerBase</code></li>\n<li><code>BalanceUpdateHandlerBase</code></li>\n<li><code>OrderUpdateHandlerBase</code></li>\n<li><code>OrderListStatusHandlerBase</code></li>\n<li><code>HandlerExceptionHandlerBase</code> a special handler to handle stream exceptions</li>\n</ul>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">MyTradeHandler</span><span class=\"p\">(),</span> <span class=\"n\">MyOrderBookHandler</span><span class=\"p\">(),</span> <span class=\"n\">MyKlineHandler</span><span class=\"p\">())</span>\n</pre>\n<h3>Subscribe to user streams</h3>\n<pre><span class=\"c1\"># Before subscribe to user stream, you need to provide `api_secret` (and also `api_key`)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">secret</span><span class=\"p\">(</span><span class=\"n\">api_secret</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or, you should provide `api_secret` when initialize the client</span>\n<span class=\"c1\"># ```</span>\n<span class=\"c1\"># client = Client(api_key, api_secret)</span>\n<span class=\"c1\"># ```</span>\n\n<span class=\"c1\"># binance-sdk will handle user listen key internally without your concern</span>\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">USER</span><span class=\"p\">)</span>\n</pre>\n<h3>Subscribe to handler exceptions</h3>\n<p><code>Binance-sdk</code> receives stream messages in background tasks, so sometimes it is difficult to detect the exceptions raised in <code>receive</code> function of user handlers.</p>\n<p>Fortunately, we could use <code>HandlerExceptionHandlerBase</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">binance</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">HandlerExceptionHandlerBase</span><span class=\"p\">,</span>\n    <span class=\"n\">KlineHandlerBase</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">KlineHandler</span><span class=\"p\">(</span><span class=\"n\">KlineHandlerBase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">receive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'this will ruin my day'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HandlerExceptionHandler</span><span class=\"p\">(</span><span class=\"n\">HandlerExceptionHandlerBase</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">receive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exception</span><span class=\"p\">):</span>\n        <span class=\"c1\"># By calling `super().receive(exception)`,</span>\n        <span class=\"c1\"># it will print the error stack.</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">receive</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">)</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">send_to_monitor</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">KlineHandler</span><span class=\"p\">())</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">HandlerExceptionHandler</span><span class=\"p\">())</span>\n</pre>\n<p>If you just want to print error stacks, we could:</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">HandlerExceptionHandlerBase</span><span class=\"p\">())</span>\n</pre>\n<h1>APIs</h1>\n<h2>Client(**kwargs)</h2>\n<p>All arguments of the constructor Client are keyworded arguments and all optional.</p>\n<ul>\n<li><strong>api_key?</strong> <code>str=None</code> binance api key</li>\n<li><strong>api_secret?</strong> <code>str=None</code> binance api secret</li>\n<li><strong>request_params?</strong> <code>dict=None</code> global request params for aiohttp</li>\n<li><strong>stream_retry_policy?</strong> <code>Callable[[int], Tuple[bool, int, bool]]</code> retry policy for websocket stream. For details, see <a href=\"#retrypolicy\" rel=\"nofollow\">RetryPolicy</a></li>\n<li><strong>stream_timeout?</strong> <code>int=5</code> seconds util the stream reach an timeout error</li>\n<li><strong>api_host?</strong> <code>str='https://api.binance.com'</code> to specify another API host for rest API requests. \u8fd9\u4e2a\u53c2\u6570\u7684\u5b58\u5728\u610f\u4e49\uff0c\u4f7f\u7528\u65b9\u6cd5\uff0c\u4e0d\u7d2f\u8ff0\uff0c\u4f60\u61c2\u7684\u3002</li>\n<li><strong>stream_host?</strong> <code>str='wss://stream.binance.com'</code> to specify another stream host for websocket connections.</li>\n</ul>\n<p>Create a binance client.</p>\n<p>Then with <code>client</code>, you could call</p>\n<ul>\n<li><a href=\"https://github.com/kaelzhang/python-binance-sdk/blob/master/binance/apis/rest.py#L225\" rel=\"nofollow\">Rest APIs</a></li>\n<li><a href=\"https://github.com/kaelzhang/python-binance-sdk/blob/master/binance/apis/wapi.py#L144\" rel=\"nofollow\">Withdraw APIs</a>.</li>\n</ul>\n<p>Each API method accepts only keyworded arguments (kwargs) and has verbosed Python doc strings (Google style) which you could check out when you are coding.</p>\n<p>The following example shows how to create a new order.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">binance</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">OrderSide</span><span class=\"p\">,</span>\n    <span class=\"n\">OrderType</span><span class=\"p\">,</span>\n    <span class=\"n\">TimeInForce</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># All arguments are keyworded arguments.</span>\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_order</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'BTCUSDT'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># You could use string `BUY` (NOT recommended) instead of</span>\n    <span class=\"c1\"># the built-in enum types of Binance-sdk.</span>\n\n    <span class=\"c1\"># But it is a good practise to use enums which could help</span>\n    <span class=\"c1\"># us to avoid spelling mistakes, and save our money.</span>\n    <span class=\"n\">side</span><span class=\"o\">=</span><span class=\"n\">OrderSide</span><span class=\"o\">.</span><span class=\"n\">BUY</span><span class=\"p\">,</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">OrderType</span><span class=\"o\">.</span><span class=\"n\">LIMIT</span><span class=\"p\">,</span>\n    <span class=\"n\">timeInForce</span><span class=\"o\">=</span><span class=\"n\">TimeInForce</span><span class=\"o\">.</span><span class=\"n\">GTC</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Binance-sdk will not handle Decimals for you,</span>\n    <span class=\"c1\"># so you'd better to know how to deal with python float precisions.</span>\n    <span class=\"c1\"># Or you could use string-type quantity.</span>\n    <span class=\"n\">quantity</span><span class=\"o\">=</span><span class=\"mf\">10.</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># It is better to use string type instead of float.</span>\n    <span class=\"c1\"># The same as `quantity`</span>\n    <span class=\"n\">price</span><span class=\"o\">=</span><span class=\"s1\">'7000.1'</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>client.key(api_key) -&gt; self</h3>\n<p>Define or change api key. This method is unnecessary if we only request APIs of <a href=\"https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#endpoint-security-type\" rel=\"nofollow\"><code>SecurityType.NONE</code></a></p>\n<h3>client.secret(api_secret) -&gt; self</h3>\n<p>Define or change api secret, especially when we have not define api secret in <code>Client</code> constructor.</p>\n<p><code>api_secret</code> is not always required for using binance-sdk. See <a href=\"https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#endpoint-security-type\" rel=\"nofollow\">Endpoint security type</a></p>\n<h3>await client.get(uri, **kwargs)</h3>\n<h3>await client.post(uri, **kwargs)</h3>\n<h3>await client.put(uri, **kwargs)</h3>\n<h3>await client.delete(uri, **kwargs)</h3>\n<ul>\n<li><strong>uri</strong> <code>str</code> the request url</li>\n<li><strong>security_type?</strong> <code>SecurityType</code> endpoint security type. Defaults to <code>SecurityType.NONE</code>.</li>\n</ul>\n<p>Send a GET/POST/PUT/DELETE HTTPs request.</p>\n<h3>await client.subscribe(subtype, *subtype_params) -&gt; None</h3>\n<h3>await client.subscribe(*subscriptions) -&gt; None</h3>\n<ul>\n<li><strong>subtype</strong> <code>str</code> subscription type, should be one of <code>SubType.*</code>s. For details, see <a href=\"#subtype\" rel=\"nofollow\">SubType</a></li>\n<li><strong>subtype_params</strong> <code>List</code> params for a certain <code>subtype</code></li>\n<li><strong>subscriptions</strong> <code>List[Tuple]</code> a pack of subscriptions each of which is a tuple of <code>subtype</code> and <code>*subtype_params</code>.</li>\n</ul>\n<p>Subscribe to a stream or multiple streams. If no websocket connection is made up, <code>client.subscribe</code> will also create a websocket connection.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">binance</span> <span class=\"kn\">import</span> <span class=\"n\">SubType</span><span class=\"p\">,</span> <span class=\"n\">KlineInterval</span>\n\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">TICKER</span><span class=\"p\">,</span> <span class=\"s1\">'BNBUSDT'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SubType.ALL_MARKET_MINI_TICKERS with default param</span>\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">ALL_MARKET_MINI_TICKERS</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SubType.ALL_MARKET_MINI_TICKERS with update interval 3000ms</span>\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">ALL_MARKET_MINI_TICKERS</span><span class=\"p\">,</span> <span class=\"mi\">3000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Subcribe to multiple types</span>\n<span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">KLINE</span><span class=\"p\">,</span> <span class=\"s1\">'BTC_USDT'</span><span class=\"p\">,</span> <span class=\"n\">KlineInterval</span><span class=\"o\">.</span><span class=\"n\">DAY</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">TICKER</span><span class=\"p\">,</span> <span class=\"s1\">'BNBUSDT'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">ORDER_BOOK</span><span class=\"p\">,</span>\n            <span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">TRADE</span>\n        <span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">'BNBUSDT'</span><span class=\"p\">,</span> <span class=\"s1\">'BTCUSDT'</span><span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">ALL_MARKET_MINI_TICKERS</span><span class=\"p\">,)</span> <span class=\"c1\"># &lt;-- PAY ATTENTION to the `,` here</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Possible exceptions:</p>\n<ul>\n<li><code>InvalidSubParamsException</code></li>\n<li><code>UnsupportedSubTypeException</code></li>\n<li><code>InvalidSubTypeParamException</code></li>\n<li><code>StreamAbandonedException</code></li>\n</ul>\n<h3>client.start() -&gt; self</h3>\n<p>Start receiving streams</p>\n<h3>client.stop() -&gt; self</h3>\n<p>Stop receiving streams</p>\n<h3>await client.close(code=4999) -&gt; None</h3>\n<ul>\n<li><strong>code</strong> <code>int=4999</code> the custom close code for websocket. It should be in the <a href=\"https://tools.ietf.org/html/rfc6455#section-7.4.2\" rel=\"nofollow\">range 4000 - 4999</a></li>\n</ul>\n<p>Close stream connection, clear all stream subscriptions and clear all handlers.</p>\n<h3>client.handler(*handlers) -&gt; self</h3>\n<ul>\n<li><strong>handlers</strong> <code>List[Union[HandlerExceptionHandler,TradeHandlerBase,...]]</code></li>\n</ul>\n<p>Register message handlers for streams. If we've subscribed to a stream of a certain <code>subtype</code> with no corresponding handler provided, the messages of <code>subtype</code> will not be handled.</p>\n<p>Except for <code>HandlerExceptionHandler</code>, handlers each of whose name ends with <code>Base</code> should be inherited before use.</p>\n<p>Typically, we need to override the <code>def receive(self, payload)</code> method.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyTradeHandler</span><span class=\"p\">(</span><span class=\"n\">TradeHandlerBase</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">receive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">):</span>\n        <span class=\"c1\"># If pandas is installed, then `payload` is a `pandas.DataFrame`,</span>\n        <span class=\"c1\">#   otherwise is a dict.</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">receive</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If you don't want the `pandas.DataFrame`, use `payload` directly</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">saveTrade</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">MyTradeHandler</span><span class=\"p\">())</span>\n</pre>\n<p>We could also register multiple handlers at one time</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">MyTradeHandler</span><span class=\"p\">(),</span> <span class=\"n\">MyTickerHandler</span><span class=\"p\">())</span>\n</pre>\n<p>If we register an invalid handler, an <code>InvalidHandlerException</code> exception will be raised.</p>\n<h2>SubType</h2>\n<p>In this section, we will note the parameters for each <code>subtypes</code></p>\n<h3><code>SubType</code> with parameters <code>symbol</code> and <code>interval</code></h3>\n<ul>\n<li><code>SubType.KLINE</code></li>\n</ul>\n<p>And <code>interval</code> should be one of the <code>KlineInterval</code> enumerables</p>\n<h3><code>SubType</code>s with a param <code>symbol</code></h3>\n<ul>\n<li><code>SubType.TRADE</code></li>\n<li><code>SubType.AGG_TRADE</code></li>\n<li><code>SubType.MINI_TICKER</code></li>\n<li><code>SubType.TICKER</code></li>\n<li><code>SubType.ORDER_BOOK</code></li>\n</ul>\n<h3><code>SubType</code>s with an optional param <code>updateInterval=1000</code> (ms)</h3>\n<ul>\n<li><code>SubType.ALL_MARKET_MINI_TICKERS</code></li>\n<li><code>SubType.ALL_MARKET_TICKERS</code></li>\n</ul>\n<h3><code>Subtype</code> with no param</h3>\n<ul>\n<li><code>SubType.USER</code></li>\n</ul>\n<h2>RetryPolicy</h2>\n<p>Retry policy is used by binance-sdk to determine what to do next after the client fails to do some certain thing.</p>\n<pre><span class=\"n\">abandon</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"p\">,</span> <span class=\"n\">reset</span> <span class=\"o\">=</span> <span class=\"n\">stream_retry_policy</span><span class=\"p\">(</span><span class=\"n\">retries</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># `retries` is the counter number of</span>\n<span class=\"c1\">#   how many times has the stream retried to reconnect.</span>\n<span class=\"c1\"># If the stream is disconnected just now for the first time, `retries` will be `0`</span>\n\n<span class=\"c1\"># If abandon is `True`, then the client will give up reconnecting.</span>\n<span class=\"c1\"># Otherwise:</span>\n<span class=\"c1\"># - The client will asyncio.sleep `delay` seconds before reconnecting.</span>\n<span class=\"c1\"># - If reset is `True`, the client will reset the retry counter to `0`</span>\n</pre>\n<h2>OrderBookHandlerBase(**kwargs)</h2>\n<ul>\n<li><strong>kwargs</strong>\n<ul>\n<li><strong>limit?</strong> <code>int=100</code> the limit of the depth snapshot</li>\n<li><strong>retry_policy?</strong> <code>Callable=</code></li>\n</ul>\n</li>\n</ul>\n<p>By default, binance-sdk maintains the orderbook for you according to the rules of <a href=\"https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#how-to-manage-a-local-order-book-correctly\" rel=\"nofollow\">the official documentation</a>.</p>\n<p>Specifically, <code>OrderBookHandlerBase</code> does the job.</p>\n<p>We could get the managed <code>OrderBook</code> object by method <code>handler.orderbook(symbol)</code>.</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Unlike other handlers, we usually do not need to inherit `OrderBookHandlerBase`,</span>\n    <span class=\"c1\">#   unless we need to receive the raw payload of 'depthUpdate' message</span>\n    <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">OrderBookHandlerBase</span><span class=\"p\">()</span>\n\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">SubType</span><span class=\"o\">.</span><span class=\"n\">ORDER_BOOK</span><span class=\"p\">,</span> <span class=\"s1\">'BTCUSDT'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Get the reference of OrderBook object for 'BTCUSDT'</span>\n    <span class=\"n\">orderbook</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">orderbook</span><span class=\"p\">(</span><span class=\"s1\">'BTCUSDT'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If the `retry_policy` never abandon a retry,</span>\n        <span class=\"c1\">#   the 'try' block could be emitted</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">orderbook</span><span class=\"o\">.</span><span class=\"n\">updated</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'exception occurred'</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">doSomethingWith</span><span class=\"p\">(</span><span class=\"n\">orderbook</span><span class=\"o\">.</span><span class=\"n\">asks</span><span class=\"p\">,</span> <span class=\"n\">orderbook</span><span class=\"o\">.</span><span class=\"n\">bids</span><span class=\"p\">)</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n<h2>OrderBook(symbol, **kwargs)</h2>\n<ul>\n<li><strong>symbol</strong> <code>str</code> the symbol name</li>\n<li><strong>kwargs</strong>\n<ul>\n<li><strong>limit?</strong> <code>int=100</code> limit of the orderbook</li>\n<li><strong>client</strong> <code>Client=None</code> the instance of <code>binance.Client</code></li>\n<li><strong>retry_policy?</strong> <code>Callable[[int], (bool, int, bool)]</code> retry policy for depth snapshot which has the same mechanism as <code>Client::stream_retry_policy</code></li>\n</ul>\n</li>\n</ul>\n<p><code>OrderBook</code> is another public class that we could import from binance-sdk and you could also construct your own <code>OrderBook</code> instance.</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># PAY attention that `orderbook` should be run in an event loop</span>\n    <span class=\"n\">orderbook</span> <span class=\"o\">=</span> <span class=\"n\">OrderBook</span><span class=\"p\">(</span><span class=\"s1\">'BTCUSDT'</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">orderbook</span><span class=\"o\">.</span><span class=\"n\">updated</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">orderbook</span><span class=\"o\">.</span><span class=\"n\">asks</span><span class=\"p\">)</span>\n</pre>\n<h3>orderbook.set_client(client) -&gt; None</h3>\n<ul>\n<li><strong>client</strong> <code>Client</code> the instance of <code>binance.Client</code></li>\n</ul>\n<p>Set the client. If <code>client</code> is not specified in the constructor, then executing this method will make the orderbook to fetch the snapshot for the first time.</p>\n<h3>orderbook.set_limit(limit) -&gt; None</h3>\n<ul>\n<li><strong>limit</strong> <code>int</code></li>\n</ul>\n<p>Set depth limit which is used by <a href=\"https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book\" rel=\"nofollow\">binance reset api</a>.</p>\n<h3>orderbook.set_retry_policy(retry_policy) -&gt; None</h3>\n<ul>\n<li><strong>retry_policy</strong> <code>Callable</code></li>\n</ul>\n<p>Set retry policy of the certain orderbook</p>\n<h3>property <code>orderbook.ready</code> -&gt; bool</h3>\n<p>There is a property getter in <code>orderbook</code> to detect whether the asks and bids are updated in the orderbook.</p>\n<p>If there is a network malfunction of the stream which causing the gap between two depth update messages, <code>orderbook</code> will fetch a new snapshot from the server, and during that time and before we merge the snapshot, <code>orderbook.ready</code> is <code>False</code>.</p>\n<h3>property <code>orderbook.asks</code> -&gt; list</h3>\n<h3>property <code>orderbook.bids</code> -&gt; list</h3>\n<p>Get asks and bids in ascending order.</p>\n<h3>orderbook.update(payload) -&gt; bool</h3>\n<ul>\n<li><strong>payload</strong> <code>dict</code> the data payload of the <code>depthUpdate</code> stream message</li>\n</ul>\n<p>Returns <code>True</code> if the payload is valid and is updated to the orderbook, otherwise <code>False</code></p>\n<p>If the return value is <code>False</code>, the orderbook will automatically start fetching the snapshot</p>\n<h3>await orderbook.fetch() -&gt; None</h3>\n<p>Manually fetch the snapshot.</p>\n<p>For most scenarios, you need <strong>NOT</strong> to call this method because once\nthere is an invalid payload, the orderbook will fetch the snapshot itself.</p>\n<h3>await orderbook.updated() -&gt; None</h3>\n<p>Wait for the next update of the orderbook.</p>\n<p>We could also await <code>orderbook.updated()</code> to make sure the orderbook is ready.</p>\n<p>If the orderbook fails to fetch depth snapshot for so many times which means the fetching is abanboned by the <code>retry_policy</code>, an <code>aiohttp</code> exception will be raised.</p>\n<h4>Listen to the updates of <code>orderbook</code></h4>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start_listening_updates</span><span class=\"p\">(</span><span class=\"n\">orderbook</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This is an infinite loop</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">orderbook</span><span class=\"o\">.</span><span class=\"n\">updated</span><span class=\"p\">()</span>\n        <span class=\"c1\"># do something</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">start_listening_updates</span><span class=\"p\">(</span><span class=\"n\">orderbook</span><span class=\"p\">))</span>\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># If we want to stop listening</span>\n<span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n</pre>\n<h2>License</h2>\n<p><a href=\"../LICENSE\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 7100246, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "1ce304de311998542bea10d1e7445f00", "sha256": "311d5cc7ddaa54ab1fa6c3245b18845e7c06599bc8ecf133d36f4fddef6c5e6a"}, "downloads": -1, "filename": "binance-sdk-0.0.0.tar.gz", "has_sig": false, "md5_digest": "1ce304de311998542bea10d1e7445f00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1971, "upload_time": "2020-01-27T03:15:03", "upload_time_iso_8601": "2020-01-27T03:15:03.332388Z", "url": "https://files.pythonhosted.org/packages/81/72/cb3e375244e0826d53d66c3067336f706a243eede182b9e4aafddcb2cd67/binance-sdk-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "6ac3e703e1a8f76af2db92a7cd95f5cd", "sha256": "cb84d017e6605194d327f703cd915accefa8261234e4510e86209a2fa9faae6d"}, "downloads": -1, "filename": "binance-sdk-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6ac3e703e1a8f76af2db92a7cd95f5cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3678, "upload_time": "2020-02-07T07:33:45", "upload_time_iso_8601": "2020-02-07T07:33:45.589312Z", "url": "https://files.pythonhosted.org/packages/77/22/e2bb72a9f127e72e42144eb535a32bea6df5ad6480f9e95954ca5a544805/binance-sdk-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "dcdb43c792991364a9af4522d418df2c", "sha256": "a3da767682365a7cc60bdf2c38e04537012de0e5158103991466478fce3a5bbe"}, "downloads": -1, "filename": "binance_sdk-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "dcdb43c792991364a9af4522d418df2c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 43683, "upload_time": "2020-02-28T11:09:29", "upload_time_iso_8601": "2020-02-28T11:09:29.617418Z", "url": "https://files.pythonhosted.org/packages/8f/98/2a4b0b0c71aaf9a501fed3e4320b95da8eb1c80b342dd8090c14ab361eba/binance_sdk-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7f74fe0f70a1466725eeb8a0060899b", "sha256": "079cea6e7264422e2f5fa3af747f42761142e9c8616c373e6693984125b36b94"}, "downloads": -1, "filename": "binance-sdk-0.0.10.tar.gz", "has_sig": false, "md5_digest": "f7f74fe0f70a1466725eeb8a0060899b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 42974, "upload_time": "2020-02-28T11:09:32", "upload_time_iso_8601": "2020-02-28T11:09:32.702151Z", "url": "https://files.pythonhosted.org/packages/dd/40/b9ffd442b0d613f40bb23cc0368963fc43eb93faf6406d7e3b71904f5661/binance-sdk-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "e9099b4f0c1b23f145c178746b6c8498", "sha256": "932b89227b97421869fb7fff09009849bfcf9572e6d8b7345be33d6db5fec331"}, "downloads": -1, "filename": "binance_sdk-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "e9099b4f0c1b23f145c178746b6c8498", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 42921, "upload_time": "2020-03-24T10:38:27", "upload_time_iso_8601": "2020-03-24T10:38:27.454810Z", "url": "https://files.pythonhosted.org/packages/93/cb/10a4a4a46b7b02d566d4c4e2166ad4673e155706b2617872fe54e0b26012/binance_sdk-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18c5afb5e58b84dbfcb9755ad7251316", "sha256": "529657ad4f672c1f0d40f8289fbc815d540017762339a9426233606f4bdb08b9"}, "downloads": -1, "filename": "binance-sdk-0.0.11.tar.gz", "has_sig": false, "md5_digest": "18c5afb5e58b84dbfcb9755ad7251316", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 42374, "upload_time": "2020-03-24T10:38:30", "upload_time_iso_8601": "2020-03-24T10:38:30.138058Z", "url": "https://files.pythonhosted.org/packages/1b/b1/8d66a96b353b55627d5df9c773b91a7b099715932b202ad4cf4d64b45b86/binance-sdk-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "a802c61c81e94c5a4d29e78b0c722690", "sha256": "428e4454b2d85577831af1d2eca811603fcb340148934676820db5f7c003da1f"}, "downloads": -1, "filename": "binance_sdk-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "a802c61c81e94c5a4d29e78b0c722690", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 42911, "upload_time": "2020-03-24T10:41:29", "upload_time_iso_8601": "2020-03-24T10:41:29.601792Z", "url": "https://files.pythonhosted.org/packages/0d/ca/245ea33ecc9796841d89f953f143f589bc6c9a8ab920e27ff97e797f758d/binance_sdk-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81d1726f061b1261c7f8cb2fdf9876e9", "sha256": "ed0e84d925d2646035c7bce737307bb986b7ec4ca92f4a51aca3d77795e64d2f"}, "downloads": -1, "filename": "binance-sdk-0.0.12.tar.gz", "has_sig": false, "md5_digest": "81d1726f061b1261c7f8cb2fdf9876e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 42362, "upload_time": "2020-03-24T10:41:31", "upload_time_iso_8601": "2020-03-24T10:41:31.524830Z", "url": "https://files.pythonhosted.org/packages/68/8e/07af78a7aa77f36ed6d5ce2bb84fa265630ca34ca5a2134ff23324300d12/binance-sdk-0.0.12.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "cc044c1fa622a56749b39ab2a16345c0", "sha256": "a3dd96309b0fade21198087277ec289067f1cb4e16b6b7c7f1142f453e2bb29a"}, "downloads": -1, "filename": "binance_sdk-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cc044c1fa622a56749b39ab2a16345c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6873, "upload_time": "2020-02-21T03:09:32", "upload_time_iso_8601": "2020-02-21T03:09:32.031940Z", "url": "https://files.pythonhosted.org/packages/16/0f/b5c851550dae92fa4abf5ead6c567102e0b1213053cc1cd2c792220caee5/binance_sdk-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a4a7945b3073d2058df43688d1fd768", "sha256": "a85186ebfe8f7ab1b4c2ca18d207cfa13a577e7a2126f0359ff77fc903c12338"}, "downloads": -1, "filename": "binance-sdk-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0a4a7945b3073d2058df43688d1fd768", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 12695, "upload_time": "2020-02-21T03:09:33", "upload_time_iso_8601": "2020-02-21T03:09:33.432493Z", "url": "https://files.pythonhosted.org/packages/35/84/85e20fbc491122b38865c4bcfbc609e0ab7ea04d9ac8870ab1610c7bb293/binance-sdk-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "0e04efa782473687841bceb88ee0ca5b", "sha256": "17af2ce9d575e01625da8b267918481fe45fe5cbc1e8c6b821f05f1b06bb6402"}, "downloads": -1, "filename": "binance_sdk-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0e04efa782473687841bceb88ee0ca5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 7106, "upload_time": "2020-02-22T11:10:49", "upload_time_iso_8601": "2020-02-22T11:10:49.592823Z", "url": "https://files.pythonhosted.org/packages/7a/4c/b1c1b60ac4d87794cc3795a69badcdb35bd9554c01ff7800573065b900f9/binance_sdk-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7394c6d92bceb015900cd7916d88281", "sha256": "7eef58ae57a8ac2002884ed2f5e07cb14cfa0ba4df7eecbe78fc7d4f8ba43d62"}, "downloads": -1, "filename": "binance-sdk-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c7394c6d92bceb015900cd7916d88281", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13425, "upload_time": "2020-02-22T11:10:52", "upload_time_iso_8601": "2020-02-22T11:10:52.931393Z", "url": "https://files.pythonhosted.org/packages/6f/5b/54059dfc4870b0fd7003037f595cdfc75f8781a12b1a237812ef26369b2f/binance-sdk-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "43bd0253e9c503b322cb9f7d183d8f97", "sha256": "1302cc521b6ef7e56e3d9f9a4c3f4de7c3937b29a537a5cfd68b348e1d4449c3"}, "downloads": -1, "filename": "binance_sdk-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "43bd0253e9c503b322cb9f7d183d8f97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 7156, "upload_time": "2020-02-23T13:25:53", "upload_time_iso_8601": "2020-02-23T13:25:53.397663Z", "url": "https://files.pythonhosted.org/packages/8e/48/3b6d04b60f948cfc4506547e9b1bb0ccf895a324cbf9c28dda08d73e215a/binance_sdk-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfc87f5a0426f9502c6d9ed9317bc17b", "sha256": "31ae7278e8487e13bb8e64d57a47881a572e5aeee6dc92c62cfd33215d81c1c8"}, "downloads": -1, "filename": "binance-sdk-0.0.5.tar.gz", "has_sig": false, "md5_digest": "bfc87f5a0426f9502c6d9ed9317bc17b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13487, "upload_time": "2020-02-23T13:25:55", "upload_time_iso_8601": "2020-02-23T13:25:55.326378Z", "url": "https://files.pythonhosted.org/packages/bb/c6/e1b903fcc8c5c5736a3e85ff339b03ceb39bce45b99004deb84f01f2ec55/binance-sdk-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "89098b1ea5b2f6c49620c48d418f9743", "sha256": "b3cd829ae51b8ed8ba10330ecb04ad58acbca08dec438f9de982cdb72af5306d"}, "downloads": -1, "filename": "binance_sdk-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "89098b1ea5b2f6c49620c48d418f9743", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 7205, "upload_time": "2020-02-23T13:53:34", "upload_time_iso_8601": "2020-02-23T13:53:34.838619Z", "url": "https://files.pythonhosted.org/packages/d1/b9/b5f67557e5d30f0489863ba5894aebb7b0c5abe1fed6a0289fccf9f5218c/binance_sdk-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a34bf5ff3590286e1f9df163f2fb1644", "sha256": "c38a625cbb9be75d454385ee081adae1591755398dd4bbc4852b9ad810de59d5"}, "downloads": -1, "filename": "binance-sdk-0.0.6.tar.gz", "has_sig": false, "md5_digest": "a34bf5ff3590286e1f9df163f2fb1644", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13557, "upload_time": "2020-02-23T13:53:36", "upload_time_iso_8601": "2020-02-23T13:53:36.712544Z", "url": "https://files.pythonhosted.org/packages/24/14/740f9bd8ae6981b01450f394159b5f0af7cca476d6bbb2ed81c0c62fa7e9/binance-sdk-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "9f388e3dac0e8cd0d1599c852119934c", "sha256": "48f9a16740de3c4b8f3fa64be1444d50cba6e7671f1d41a01b12f319aa17135e"}, "downloads": -1, "filename": "binance_sdk-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "9f388e3dac0e8cd0d1599c852119934c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 7200, "upload_time": "2020-02-24T07:05:55", "upload_time_iso_8601": "2020-02-24T07:05:55.784857Z", "url": "https://files.pythonhosted.org/packages/b4/c8/bde0cf85244aefb3279a791ffeb0c069a2215bbd5ba328b245562dbcaa8a/binance_sdk-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "684a5f9ad7b73c6b6cbbb95ff629a65c", "sha256": "000a2823853a11ca11b75b2c97cae7b59856480892323cd0ba681cbbc98a6a72"}, "downloads": -1, "filename": "binance-sdk-0.0.7.tar.gz", "has_sig": false, "md5_digest": "684a5f9ad7b73c6b6cbbb95ff629a65c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13599, "upload_time": "2020-02-24T07:05:58", "upload_time_iso_8601": "2020-02-24T07:05:58.242581Z", "url": "https://files.pythonhosted.org/packages/5d/76/7c324dc786ec5cd4672c2d5ba1aa9894d2c7e6a204ff1309c5f1a5919cda/binance-sdk-0.0.7.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "dd034003ab826829b3154f6592e7b67d", "sha256": "c1c134447601b8395df7f56be49cb01d700cd188f7897263d671d7f487f10f8a"}, "downloads": -1, "filename": "binance_sdk-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "dd034003ab826829b3154f6592e7b67d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 7175, "upload_time": "2020-02-28T10:28:41", "upload_time_iso_8601": "2020-02-28T10:28:41.217445Z", "url": "https://files.pythonhosted.org/packages/e2/83/7c68e4e9eca9a39f06fcc7d78d592d48fe4b733f200d5b73ad1730a783f0/binance_sdk-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24d759558efd431b1f38d7bcd77ee490", "sha256": "cdcc75e9580ecd1bcd991fc972db76c29637247cf83586e0c75795ef36c1fae0"}, "downloads": -1, "filename": "binance-sdk-0.0.9.tar.gz", "has_sig": false, "md5_digest": "24d759558efd431b1f38d7bcd77ee490", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13728, "upload_time": "2020-02-28T10:28:43", "upload_time_iso_8601": "2020-02-28T10:28:43.622325Z", "url": "https://files.pythonhosted.org/packages/df/7d/f3f2825a34f596344a9975a0f8c5760b73c97e5d886ecbb3d8d6ff0749e4/binance-sdk-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "7dcb4946421e125af17c76fcef42fa10", "sha256": "e67e62f3f230fe7ff074cca52202d927a0c86f1625bb66d8626ca5baccb26175"}, "downloads": -1, "filename": "binance_sdk-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7dcb4946421e125af17c76fcef42fa10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 43572, "upload_time": "2020-04-04T07:52:29", "upload_time_iso_8601": "2020-04-04T07:52:29.848449Z", "url": "https://files.pythonhosted.org/packages/cf/8f/4dcf8a7f05df75c648cb1115b88c33df5361834f3f9643432f0d2bf680e0/binance_sdk-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84f5e32ca3406e3eb80f9faad7d6f890", "sha256": "2fec6ff9db19ee91de493544d7ced8117d74404b55e3a1d64f28ee68550f1471"}, "downloads": -1, "filename": "binance-sdk-0.1.0.tar.gz", "has_sig": false, "md5_digest": "84f5e32ca3406e3eb80f9faad7d6f890", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 44838, "upload_time": "2020-04-04T07:52:32", "upload_time_iso_8601": "2020-04-04T07:52:32.351575Z", "url": "https://files.pythonhosted.org/packages/fe/29/b19e5b7e64b25839cde5969ed8cc1051dd35096862c665f4f3f6f3e22dfd/binance-sdk-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "19aebcba5db729319d87ea8e31a5cff3", "sha256": "ec944315ef08885f9a8232212e7fe1fb77189554f3c7ae1b92a1fb9f07d28307"}, "downloads": -1, "filename": "binance_sdk-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "19aebcba5db729319d87ea8e31a5cff3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 41154, "upload_time": "2020-04-04T08:02:26", "upload_time_iso_8601": "2020-04-04T08:02:26.396833Z", "url": "https://files.pythonhosted.org/packages/5e/cb/16f25112c42e0b3457cabf61e19a41ea308c983c45538ad1cc7385902e3a/binance_sdk-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd12bafeb7c9c67ffdb241b8509bc97e", "sha256": "9ea3aca835beb2f5a6a61496485939c3185053419777ead520aaaa24d9edcb8d"}, "downloads": -1, "filename": "binance-sdk-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cd12bafeb7c9c67ffdb241b8509bc97e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 56805, "upload_time": "2020-04-04T08:02:29", "upload_time_iso_8601": "2020-04-04T08:02:29.013519Z", "url": "https://files.pythonhosted.org/packages/b4/13/b45d7575730fc3c0740e36bb0520455f7c0c5f35f8d40e7068500bd063e7/binance-sdk-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "732e7dbdeada52c5e2e1f9e2840d4218", "sha256": "1cef445966a74b4adf4ed76f11a1ce889017948fb0b495d371fe361043c206f8"}, "downloads": -1, "filename": "binance_sdk-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "732e7dbdeada52c5e2e1f9e2840d4218", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 41177, "upload_time": "2020-04-05T09:34:39", "upload_time_iso_8601": "2020-04-05T09:34:39.178087Z", "url": "https://files.pythonhosted.org/packages/50/8d/c8b659fb119594b2e8c5833021ca4f32cb3a95e56bc163e85f7c4c089e89/binance_sdk-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f9ce35ef87d58115152ca7dfd64faa7", "sha256": "921781ba006a92d9f9764f3364c102e161d6bdd93325f598847dd88c965a4a38"}, "downloads": -1, "filename": "binance-sdk-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0f9ce35ef87d58115152ca7dfd64faa7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 56843, "upload_time": "2020-04-05T09:34:41", "upload_time_iso_8601": "2020-04-05T09:34:41.657566Z", "url": "https://files.pythonhosted.org/packages/c3/59/c0bad1ba4e97c7f02e7aa8694fea65f2341eac07579534ce2fd969ad0d48/binance-sdk-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d93033205d3200d98ce86332aaed8073", "sha256": "21d90449900249dc02827d703c421de75182b47b3644d3f6aee8b5142bbc16dc"}, "downloads": -1, "filename": "binance_sdk-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d93033205d3200d98ce86332aaed8073", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 41230, "upload_time": "2020-04-07T04:17:42", "upload_time_iso_8601": "2020-04-07T04:17:42.218486Z", "url": "https://files.pythonhosted.org/packages/53/86/798b402c330a8f900d27adc22ffae4aeee4f34202883ee6c503913887a70/binance_sdk-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e934ceedee3237d09ec8828587233d93", "sha256": "2a6a96238c959525eae3fd474573ece9e94e54d7c0fe1d671a6e588ea935cad3"}, "downloads": -1, "filename": "binance-sdk-0.1.3.tar.gz", "has_sig": false, "md5_digest": "e934ceedee3237d09ec8828587233d93", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 56842, "upload_time": "2020-04-07T04:17:44", "upload_time_iso_8601": "2020-04-07T04:17:44.890807Z", "url": "https://files.pythonhosted.org/packages/93/87/77a6251e2ea6adff3bddb72307272fedccbf4611913d7b846522d89a2b33/binance-sdk-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "0663e8c0235955a7b6f5f0e9401fbfc1", "sha256": "acfbcf666ff7eb3b9a36f5b32ea8c74909f981976a3ba3af6b3980cf7a1bdc64"}, "downloads": -1, "filename": "binance_sdk-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0663e8c0235955a7b6f5f0e9401fbfc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 41246, "upload_time": "2020-04-07T04:24:13", "upload_time_iso_8601": "2020-04-07T04:24:13.681193Z", "url": "https://files.pythonhosted.org/packages/2e/5d/759ee400376886f7020538712821dfaf4c8aee091cbfc617d4714acedbfe/binance_sdk-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47343e3e398986353ea18c5129b251b9", "sha256": "8b45b23f6f6ce26b1edaf190aca6848e0493ea0b341c1fb0add06abbfdc02ace"}, "downloads": -1, "filename": "binance-sdk-0.1.4.tar.gz", "has_sig": false, "md5_digest": "47343e3e398986353ea18c5129b251b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 56871, "upload_time": "2020-04-07T04:24:15", "upload_time_iso_8601": "2020-04-07T04:24:15.839874Z", "url": "https://files.pythonhosted.org/packages/97/2c/a3bc35514b7a47e01b003d53810421c1c24382b17fdb2b4ec259da9e6e69/binance-sdk-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "fe233cb55e3e7372967361375d2ce18f", "sha256": "d8a9ec2d441d412976c0c5e11bd5494d38601a205762f91fc2feb9ad7896afcb"}, "downloads": -1, "filename": "binance_sdk-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fe233cb55e3e7372967361375d2ce18f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 41249, "upload_time": "2020-04-07T04:25:34", "upload_time_iso_8601": "2020-04-07T04:25:34.778407Z", "url": "https://files.pythonhosted.org/packages/6b/a1/0a89b3ded7a93b25aa8cb5e91a2497906e2d2b303c02487730660f9d2ab0/binance_sdk-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae65c2c1f27f6ab4a038ac156d6d01e3", "sha256": "58958168c64b078b2bd555c9f2c518bd05c14da054c5c5cfa5deb878ae5136d2"}, "downloads": -1, "filename": "binance-sdk-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ae65c2c1f27f6ab4a038ac156d6d01e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 56868, "upload_time": "2020-04-07T04:25:36", "upload_time_iso_8601": "2020-04-07T04:25:36.804831Z", "url": "https://files.pythonhosted.org/packages/51/65/d48b4cb5b0aaffe2a231b299e865a100608e259f4c765f7f1d08b73081a8/binance-sdk-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "b0d1a48b26882b43b70e5906937497ed", "sha256": "77e63e51e83ad012f0c3c997aab4a7d1cd2297e6a98029b7f24c1835d7b19baa"}, "downloads": -1, "filename": "binance_sdk-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "b0d1a48b26882b43b70e5906937497ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 41866, "upload_time": "2020-04-08T13:27:18", "upload_time_iso_8601": "2020-04-08T13:27:18.890117Z", "url": "https://files.pythonhosted.org/packages/6c/62/61b8dceb070f6f1b867445896922055cb4b6f220b1c99069ec30ddbe2a55/binance_sdk-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc1c87c690bef124735222477644f833", "sha256": "bb45c27f6f3a7faab58784e31f3d51576e0fb26c3000a80c6cb9a72b03725fc9"}, "downloads": -1, "filename": "binance-sdk-0.1.6.tar.gz", "has_sig": false, "md5_digest": "bc1c87c690bef124735222477644f833", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 58220, "upload_time": "2020-04-08T13:27:21", "upload_time_iso_8601": "2020-04-08T13:27:21.255684Z", "url": "https://files.pythonhosted.org/packages/3b/46/b44e2724f5c085aff74f8e7adb2ce7f0e42b8898e074c24c9b1cc957bb15/binance-sdk-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "c72cc4cc8aba46e458536f108123680a", "sha256": "3acb21fc7a80eb11a715344cd86a94ca41a4b95919c3526446d97f1fc7dbe2a6"}, "downloads": -1, "filename": "binance_sdk-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c72cc4cc8aba46e458536f108123680a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 41878, "upload_time": "2020-04-08T13:31:41", "upload_time_iso_8601": "2020-04-08T13:31:41.521211Z", "url": "https://files.pythonhosted.org/packages/ce/ce/b38ed6d99a315ba88c6504aaf197eac0d3d5e4f7a5f772942f83eab3a6c5/binance_sdk-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5d522b23c48c0b94e3b5a3127ab077a", "sha256": "1b7b57128bbc4bcfde4fc7473712f8a4cd5449dd8a481f71ad6510cc113bbd9f"}, "downloads": -1, "filename": "binance-sdk-0.1.7.tar.gz", "has_sig": false, "md5_digest": "f5d522b23c48c0b94e3b5a3127ab077a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 58250, "upload_time": "2020-04-08T13:31:44", "upload_time_iso_8601": "2020-04-08T13:31:44.549203Z", "url": "https://files.pythonhosted.org/packages/66/aa/9a424f3f804cf01d4921ad1e4cc6ca7d41513d9a1278e224a57f1d394a43/binance-sdk-0.1.7.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "cff0623ae9570b84e9d09eded8765278", "sha256": "2d2bd04ad49668b4f957d87cafdb6f2f3eaffd0d14eeacb23662c3ab6d1a70cb"}, "downloads": -1, "filename": "binance_sdk-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cff0623ae9570b84e9d09eded8765278", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 42817, "upload_time": "2020-04-08T15:29:55", "upload_time_iso_8601": "2020-04-08T15:29:55.691381Z", "url": "https://files.pythonhosted.org/packages/b6/31/30d0b108cb0dbcd70b1c23f0766b21f144676e93af9853dd8d5e2daf1d58/binance_sdk-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b0149c80976ee7ac2836e5463a177b0", "sha256": "2d03b0f72d912175be1323bdee69aff3aa5c92d4e6859e6d4a3161a18b7e50a9"}, "downloads": -1, "filename": "binance-sdk-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4b0149c80976ee7ac2836e5463a177b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 59011, "upload_time": "2020-04-08T15:29:58", "upload_time_iso_8601": "2020-04-08T15:29:58.266740Z", "url": "https://files.pythonhosted.org/packages/91/96/1e1d4dc1ca1b9659f0879696faac0dfa4f901ae05932b74c72e77ab22277/binance-sdk-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c20da335e105586a368be4df5c186dde", "sha256": "f5b131ffe885736ff57ce8a8429a60e0683c66864f666443d9b849caa2b4e4e3"}, "downloads": -1, "filename": "binance_sdk-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c20da335e105586a368be4df5c186dde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 42887, "upload_time": "2020-04-09T13:58:13", "upload_time_iso_8601": "2020-04-09T13:58:13.258597Z", "url": "https://files.pythonhosted.org/packages/d9/f8/265693083ec1a5977bcc0c83b624d5e5e7315e1d10fa030d51c0f4f2390a/binance_sdk-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f41d37cdcedc34c3894d04cf02d8985a", "sha256": "68970d9980cdc7ce5f126d7215fef9440b1ef12fd8ea75e2e1690547423a958b"}, "downloads": -1, "filename": "binance-sdk-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f41d37cdcedc34c3894d04cf02d8985a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 59052, "upload_time": "2020-04-09T13:58:16", "upload_time_iso_8601": "2020-04-09T13:58:16.593626Z", "url": "https://files.pythonhosted.org/packages/07/86/d2c849b27b5f3585a988ffab2f5568c16f6d17808828a62e3cac7a8c5d2d/binance-sdk-0.2.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "26936fd2d4b85d4a2119c8578cc5b6e1", "sha256": "da360815fa7a5d16cb9d8ed88b7a0675b66a90091781946b7ffc81ed39a9e109"}, "downloads": -1, "filename": "binance_sdk-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "26936fd2d4b85d4a2119c8578cc5b6e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 43277, "upload_time": "2020-04-20T15:10:56", "upload_time_iso_8601": "2020-04-20T15:10:56.619083Z", "url": "https://files.pythonhosted.org/packages/4e/30/f7816c574610c4975a9eaa4f2f0fa0810d5b2ee87f19d747e20022b93e18/binance_sdk-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "382b56c6beababb6452203686c79558e", "sha256": "005da8e59013e11f36b345691f49d4c14ca2a29c960094999c24d39eb7c3f987"}, "downloads": -1, "filename": "binance-sdk-1.0.0.tar.gz", "has_sig": false, "md5_digest": "382b56c6beababb6452203686c79558e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 59512, "upload_time": "2020-04-20T15:11:00", "upload_time_iso_8601": "2020-04-20T15:11:00.053343Z", "url": "https://files.pythonhosted.org/packages/72/77/72c9ba802d302f5c29edaecb80c4a6f8085e436189db83a6b68e235688f0/binance-sdk-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0ae2aef571b10e7eff965f5530bd8863", "sha256": "fc1eb00528883c381fea3d24770bd9f6e56fa5061e39b1ccf92d10554f136c3f"}, "downloads": -1, "filename": "binance_sdk-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0ae2aef571b10e7eff965f5530bd8863", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 43283, "upload_time": "2020-04-20T15:54:12", "upload_time_iso_8601": "2020-04-20T15:54:12.455808Z", "url": "https://files.pythonhosted.org/packages/d5/34/d0a48d00c12726c538f1b055197d6d485c4ad798b238721a44b0b3832871/binance_sdk-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d86451b94a9e08fa67492ac2aedd8547", "sha256": "1cd720c0577cc4efc89d0c2d87adb94362b47c06aa1c1b393ac022af07243785"}, "downloads": -1, "filename": "binance-sdk-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d86451b94a9e08fa67492ac2aedd8547", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 59568, "upload_time": "2020-04-20T15:54:15", "upload_time_iso_8601": "2020-04-20T15:54:15.396327Z", "url": "https://files.pythonhosted.org/packages/8a/0e/b698ecab448a57ef693784fd08fd3aebc2f3e916a981220972ed2c42b390/binance-sdk-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "359e2bc067fc7a1cc3b6c7506c6d1452", "sha256": "4c70b0eafe56a851f4a996ca9109ba80a695ff9fa45472de535f294571144755"}, "downloads": -1, "filename": "binance_sdk-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "359e2bc067fc7a1cc3b6c7506c6d1452", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 46558, "upload_time": "2020-04-25T16:26:26", "upload_time_iso_8601": "2020-04-25T16:26:26.685019Z", "url": "https://files.pythonhosted.org/packages/56/ba/c79f3facd4a7871a42231bc158a57e073d2a838448ca0691f5704ce0597e/binance_sdk-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0083369552412e56c0b6aba504b4a49", "sha256": "6c134efef0c4cbc09c4f8246218fa56dd4019a892ae1e6f46b8f64c036391f6f"}, "downloads": -1, "filename": "binance-sdk-1.1.0.tar.gz", "has_sig": false, "md5_digest": "f0083369552412e56c0b6aba504b4a49", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 60602, "upload_time": "2020-04-25T16:26:29", "upload_time_iso_8601": "2020-04-25T16:26:29.042410Z", "url": "https://files.pythonhosted.org/packages/f2/27/26d3a0910d57b69d3e3722418fb3922850baa13570696b449fa47cb6070b/binance-sdk-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "359e2bc067fc7a1cc3b6c7506c6d1452", "sha256": "4c70b0eafe56a851f4a996ca9109ba80a695ff9fa45472de535f294571144755"}, "downloads": -1, "filename": "binance_sdk-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "359e2bc067fc7a1cc3b6c7506c6d1452", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 46558, "upload_time": "2020-04-25T16:26:26", "upload_time_iso_8601": "2020-04-25T16:26:26.685019Z", "url": "https://files.pythonhosted.org/packages/56/ba/c79f3facd4a7871a42231bc158a57e073d2a838448ca0691f5704ce0597e/binance_sdk-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0083369552412e56c0b6aba504b4a49", "sha256": "6c134efef0c4cbc09c4f8246218fa56dd4019a892ae1e6f46b8f64c036391f6f"}, "downloads": -1, "filename": "binance-sdk-1.1.0.tar.gz", "has_sig": false, "md5_digest": "f0083369552412e56c0b6aba504b4a49", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 60602, "upload_time": "2020-04-25T16:26:29", "upload_time_iso_8601": "2020-04-25T16:26:29.042410Z", "url": "https://files.pythonhosted.org/packages/f2/27/26d3a0910d57b69d3e3722418fb3922850baa13570696b449fa47cb6070b/binance-sdk-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:30 2020"}