{"info": {"author": "Ahmet Bakan", "author_email": "ahb12 at pitt dot edu", "bugtrack_url": null, "classifiers": ["Development Status :: 7 - Inactive"], "description": "************************************\r\nPyGNM: Python Gaussian Network Model\r\n************************************\r\n\r\nA Python module for Gaussian Network Model calculations with integrated plotting functions.\r\n\r\nPython is an object oriented scripting language with powerful standard and rich third-party libraries. It is suitable for rapid and flexible code development. If you are not familiar with Python, but know programming, you can learn enough to use this package in a couple of hours by following Python Tutorial.\r\n\r\nPyGNM is pure Pyton code depending on widely used numeric and graphics packages. All GNM convenience and plotting functions are documented and illustrated in the tutorial. PyGNM can be used to analyze a single protein structure (see tutorial) and to perform automated analysis of multiple structures (with of course some more Python code).\r\n\r\nReferences\r\n==========\r\n\r\n* Direct evaluation of thermal fluctuations in proteins using a single parameter harmonic potential\r\n  I. Bahar, A. R. Atilgan, and B. Erman Folding & Design 2, 173-181, 1997.\r\n* Gaussian dynamics of folded proteins\r\n  Haliloglu, T. Bahar, I. & Erman, B. Phys. Rev. Lett. 79, 3090-3093, 1997.\r\n* `Wikipedia article <http://en.wikipedia.org/wiki/Gaussian_network_model>`_\r\n\r\nLicense\r\n=======\r\nThis Python package is distributed under GNU General Public License.\r\n\r\nDependencies\r\n============\r\nBiopython\r\nNumpy\r\nScipy\r\nMatplotlib (Optional, but needed for plotting capability.)\r\n\r\nInstallation\r\n============\r\n\r\nLinux\r\n-----\r\n\r\nExtract tarball contents and run setup.py as follows:\r\ntar -xzf ppygnm-0.x.tar.gz\r\ncd pygnm-0.x\r\npython setup.py install\r\nYou may need root access for the last step.\r\n\r\nWindows\r\n-------\r\nUse executable to install PyGNM.\r\n\r\nTutorial\r\n========\r\nThis tutorial is also contained in the PyGNM package.\r\n\r\n::\r\n\r\n  \"\"\"This is an example use of PyGNM, and is distributed with PyGNM package.\r\n\r\n  This example assumes that you have installed Matplotlib.\r\n  A ubiquitin structureis used in this example.\r\n  (PDB id 2BWF, Lowe et al., 2006 Acta Crystallogr., Sect. D 62:177)\r\n\r\n  \"\"\"\r\n  # Import plotting library\r\n  >>> import matplotlib.pyplot as pl\r\n\r\n  # Import GNM module from pygnm package\r\n  >>> from pygnm import GNM\r\n\r\n  # Initialize a GNM object\r\n  # Please make sure that the PDB file is in the current working directory\r\n  # You may need to download this, or another, PDB file\r\n  # Both .pdb and pdb.gz extensions are handled\r\n  >>> gnm = GNM('2BWF.pdb.gz')\r\n\r\n  # Select residues to be included in the model\r\n  # Some examples are\r\n  #\t \"*\" and \"*:*\"\r\n  #\t   select all chains and residues\r\n  #\r\n  #\t \"A:x,y-z,w D:k-l G:*\"\r\n  #\t   select residues x, y to z (inclusive),\r\n  #\t                and w in chain A\r\n  #\t   and residues k to l (inclusive) in chain D\r\n  #\t   and all residues in chain G\r\n  #\r\n  #\t \"A B\"\r\n  #\t   select all residues in chains A and B\r\n  #\r\n  #\t \"*:5-25,50-100\"\r\n  #\t   select same set of residues in all chains\r\n  >>> gnm.select_residues('A:1-70')\r\n\r\n  # Build Kirchhoff matrix\r\n  #   cutoff=10., gamma=1.0 are default values, and may be omitted\r\n  >>> gnm.set_kirchhoff(cutoff=10., gamma=1.0)\r\n\r\n  # Calculate GNM modes\r\n  #   An optional parameter is n_modes\r\n  #   If you want to see only 20 nonzero modes, you can set n_modes=20\r\n  #   gnm.calculate_modes(n_modes=20)  \r\n  >>> gnm.calculate_modes()\r\n\r\n  # CONVENIENCE FUNCTIONS\r\n  # Get first 20 eigenvalues, including the zero eigenvalue\r\n  >>> gnm.get_eigenvalues( range(20) )\r\n  # Get first eigenvector with a nonzero eigenvalue\r\n  >>> gnm.get_eigenvectors(1)\r\n  # Get first and second modes (eigenvector^2) with nonzero eigenvalues\r\n  >>> gnm.get_modes( [1, 2] )\r\n  # Get covariance matrix (pseudo-inverse of Kirchhoff)\r\n  >>> gnm.get_covariance()\r\n  # Get cross-correlations calclated using first 9 modes (w/ nonzero eigenvalues)\r\n  >>> gnm.get_cross_correlations( range(1, 10))\r\n\r\n  # PLOTTING FUNCTIONS\r\n  # Note that before each plot command, pl.figure() function is called\r\n  # to prevent plotting over the previous figure.\r\n  # Plot eigenvector shape\r\n  >>> pl.figure()\r\n  >>> gnm.plot_eigenvector(1)\r\n\r\n  # Plot mode shape\r\n  >>> pl.figure()\r\n  >>> gnm.plot_mode(1)\r\n\r\n  # Plot bfactors from PDB file\r\n  >>> pl.figure()\r\n  >>> gnm.plot_bfactors()\r\n\r\n  # Plot GNM square-fluctuations\r\n  >>> pl.figure()\r\n  >>> gnm.plot_square_fluctuations()\r\n\r\n  # Plot GNM square-fluctuations for low frequence nonzero 10 modes\r\n  >>> pl.figure()\r\n  >>> gnm.plot_square_fluctuations(indices=range(1, 11))\r\n\r\n  # Plot GNM cross-correlations\r\n  >>> pl.figure()\r\n  >>> gnm.show_cross_correlations()\r\n\r\n  # Plot GNM cross-correlations for low frequence nonzero 10 modes\r\n  >>> pl.figure()\r\n  >>> gnm.show_cross_correlations(indices=range(1, 11))\r\n\r\n  # WRITE PDB \r\n  # Write a PDB file with square fluctuations on beta column\r\n  >>> gnm.write_pdb( bfactors=gnm.get_square_fluctuations(indices=range(1, 11)) )", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "Gaussian network model,GNM,protein,dynamics", "license": "GNU General Public License", "maintainer": "", "maintainer_email": "", "name": "pygnm", "package_url": "https://pypi.org/project/pygnm/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pygnm/", "project_urls": null, "release_url": "https://pypi.org/project/pygnm/0.1/", "requires_dist": null, "requires_python": null, "summary": "Python Gaussian Network Model", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Python module for Gaussian Network Model calculations with integrated plotting functions.</p>\n<p>Python is an object oriented scripting language with powerful standard and rich third-party libraries. It is suitable for rapid and flexible code development. If you are not familiar with Python, but know programming, you can learn enough to use this package in a couple of hours by following Python Tutorial.</p>\n<p>PyGNM is pure Pyton code depending on widely used numeric and graphics packages. All GNM convenience and plotting functions are documented and illustrated in the tutorial. PyGNM can be used to analyze a single protein structure (see tutorial) and to perform automated analysis of multiple structures (with of course some more Python code).</p>\n<div id=\"references\">\n<h2>References</h2>\n<ul>\n<li>Direct evaluation of thermal fluctuations in proteins using a single parameter harmonic potential\nI. Bahar, A. R. Atilgan, and B. Erman Folding &amp; Design 2, 173-181, 1997.</li>\n<li>Gaussian dynamics of folded proteins\nHaliloglu, T. Bahar, I. &amp; Erman, B. Phys. Rev. Lett. 79, 3090-3093, 1997.</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Gaussian_network_model\" rel=\"nofollow\">Wikipedia article</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This Python package is distributed under GNU General Public License.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>Biopython\nNumpy\nScipy\nMatplotlib (Optional, but needed for plotting capability.)</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"linux\">\n<h3>Linux</h3>\n<p>Extract tarball contents and run setup.py as follows:\ntar -xzf ppygnm-0.x.tar.gz\ncd pygnm-0.x\npython setup.py install\nYou may need root access for the last step.</p>\n</div>\n<div id=\"windows\">\n<h3>Windows</h3>\n<p>Use executable to install PyGNM.</p>\n</div>\n</div>\n<div id=\"tutorial\">\n<h2>Tutorial</h2>\n<p>This tutorial is also contained in the PyGNM package.</p>\n<pre>\"\"\"This is an example use of PyGNM, and is distributed with PyGNM package.\n\nThis example assumes that you have installed Matplotlib.\nA ubiquitin structureis used in this example.\n(PDB id 2BWF, Lowe et al., 2006 Acta Crystallogr., Sect. D 62:177)\n\n\"\"\"\n# Import plotting library\n&gt;&gt;&gt; import matplotlib.pyplot as pl\n\n# Import GNM module from pygnm package\n&gt;&gt;&gt; from pygnm import GNM\n\n# Initialize a GNM object\n# Please make sure that the PDB file is in the current working directory\n# You may need to download this, or another, PDB file\n# Both .pdb and pdb.gz extensions are handled\n&gt;&gt;&gt; gnm = GNM('2BWF.pdb.gz')\n\n# Select residues to be included in the model\n# Some examples are\n#      \"*\" and \"*:*\"\n#        select all chains and residues\n#\n#      \"A:x,y-z,w D:k-l G:*\"\n#        select residues x, y to z (inclusive),\n#                     and w in chain A\n#        and residues k to l (inclusive) in chain D\n#        and all residues in chain G\n#\n#      \"A B\"\n#        select all residues in chains A and B\n#\n#      \"*:5-25,50-100\"\n#        select same set of residues in all chains\n&gt;&gt;&gt; gnm.select_residues('A:1-70')\n\n# Build Kirchhoff matrix\n#   cutoff=10., gamma=1.0 are default values, and may be omitted\n&gt;&gt;&gt; gnm.set_kirchhoff(cutoff=10., gamma=1.0)\n\n# Calculate GNM modes\n#   An optional parameter is n_modes\n#   If you want to see only 20 nonzero modes, you can set n_modes=20\n#   gnm.calculate_modes(n_modes=20)\n&gt;&gt;&gt; gnm.calculate_modes()\n\n# CONVENIENCE FUNCTIONS\n# Get first 20 eigenvalues, including the zero eigenvalue\n&gt;&gt;&gt; gnm.get_eigenvalues( range(20) )\n# Get first eigenvector with a nonzero eigenvalue\n&gt;&gt;&gt; gnm.get_eigenvectors(1)\n# Get first and second modes (eigenvector^2) with nonzero eigenvalues\n&gt;&gt;&gt; gnm.get_modes( [1, 2] )\n# Get covariance matrix (pseudo-inverse of Kirchhoff)\n&gt;&gt;&gt; gnm.get_covariance()\n# Get cross-correlations calclated using first 9 modes (w/ nonzero eigenvalues)\n&gt;&gt;&gt; gnm.get_cross_correlations( range(1, 10))\n\n# PLOTTING FUNCTIONS\n# Note that before each plot command, pl.figure() function is called\n# to prevent plotting over the previous figure.\n# Plot eigenvector shape\n&gt;&gt;&gt; pl.figure()\n&gt;&gt;&gt; gnm.plot_eigenvector(1)\n\n# Plot mode shape\n&gt;&gt;&gt; pl.figure()\n&gt;&gt;&gt; gnm.plot_mode(1)\n\n# Plot bfactors from PDB file\n&gt;&gt;&gt; pl.figure()\n&gt;&gt;&gt; gnm.plot_bfactors()\n\n# Plot GNM square-fluctuations\n&gt;&gt;&gt; pl.figure()\n&gt;&gt;&gt; gnm.plot_square_fluctuations()\n\n# Plot GNM square-fluctuations for low frequence nonzero 10 modes\n&gt;&gt;&gt; pl.figure()\n&gt;&gt;&gt; gnm.plot_square_fluctuations(indices=range(1, 11))\n\n# Plot GNM cross-correlations\n&gt;&gt;&gt; pl.figure()\n&gt;&gt;&gt; gnm.show_cross_correlations()\n\n# Plot GNM cross-correlations for low frequence nonzero 10 modes\n&gt;&gt;&gt; pl.figure()\n&gt;&gt;&gt; gnm.show_cross_correlations(indices=range(1, 11))\n\n# WRITE PDB\n# Write a PDB file with square fluctuations on beta column\n&gt;&gt;&gt; gnm.write_pdb( bfactors=gnm.get_square_fluctuations(indices=range(1, 11)) )\n</pre>\n</div>\n\n          </div>"}, "last_serial": 945946, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b833c2da12ecde5e2380b8ac770ec54a", "sha256": "8a301d6035dfb9b0a31b20752e2aaf531efc76b4e70f9a56a0920ef5c45f0b2d"}, "downloads": -1, "filename": "pygnm-0.1.tar.gz", "has_sig": false, "md5_digest": "b833c2da12ecde5e2380b8ac770ec54a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81311, "upload_time": "2010-02-20T18:06:02", "upload_time_iso_8601": "2010-02-20T18:06:02.032702Z", "url": "https://files.pythonhosted.org/packages/7d/eb/90354942b74a3798bc60fd04a3f5850c56b61fda778072adf32af243c8ea/pygnm-0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "f50028cf124f88dc683108065d362cb9", "sha256": "c245550b2fe998dba6bfbf8133706082eb2ebb0adfe53131956a2999b4ba05d5"}, "downloads": -1, "filename": "pygnm-0.1.win32.exe", "has_sig": false, "md5_digest": "f50028cf124f88dc683108065d362cb9", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 202699, "upload_time": "2010-02-20T18:06:23", "upload_time_iso_8601": "2010-02-20T18:06:23.918162Z", "url": "https://files.pythonhosted.org/packages/44/50/4cccd843c95d0c3466bbdcd4bdc438bfbc50f2d5448965e551ea29569e70/pygnm-0.1.win32.exe", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b833c2da12ecde5e2380b8ac770ec54a", "sha256": "8a301d6035dfb9b0a31b20752e2aaf531efc76b4e70f9a56a0920ef5c45f0b2d"}, "downloads": -1, "filename": "pygnm-0.1.tar.gz", "has_sig": false, "md5_digest": "b833c2da12ecde5e2380b8ac770ec54a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81311, "upload_time": "2010-02-20T18:06:02", "upload_time_iso_8601": "2010-02-20T18:06:02.032702Z", "url": "https://files.pythonhosted.org/packages/7d/eb/90354942b74a3798bc60fd04a3f5850c56b61fda778072adf32af243c8ea/pygnm-0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "f50028cf124f88dc683108065d362cb9", "sha256": "c245550b2fe998dba6bfbf8133706082eb2ebb0adfe53131956a2999b4ba05d5"}, "downloads": -1, "filename": "pygnm-0.1.win32.exe", "has_sig": false, "md5_digest": "f50028cf124f88dc683108065d362cb9", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 202699, "upload_time": "2010-02-20T18:06:23", "upload_time_iso_8601": "2010-02-20T18:06:23.918162Z", "url": "https://files.pythonhosted.org/packages/44/50/4cccd843c95d0c3466bbdcd4bdc438bfbc50f2d5448965e551ea29569e70/pygnm-0.1.win32.exe", "yanked": false}], "timestamp": "Fri May  8 03:04:49 2020"}