{"info": {"author": "Wieland Hoffmann", "author_email": "themineo@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.3"], "description": "So, what does this do?\n\n`automp` allows you to automatically append options or use different keybinding\ndepending on the file you're playing.\nThis is great if you want to skip the intro at the beginning (by providing an\n`-ss xx:xx` option) without doing anything or skipping something with a known\nlength in the middle of the file at the press of a button(by providing a\n`key=seek xx.xx` mapping)\nTo use it, just type `automp` every time you want to start mplayer instead of\n`mplayer` or use an alias.\n\nThe config file (which can be found in\n`$XDG_CONFIG_HOME/mplayer-autocmd-config`) is a file that's parsed by Pythons\n`configparser` module, for a description of the terminology and it's\npossibilities look at `the documentation`_.\n\nThe section name is used as a \"profile name\", it has no special meaning except\nfor showing you which profile has been chosen.\n\nThere are only three supported options (or keys):\n\ncall_after_playing\n    An application to call after the file has been played. If the application\n    needs any arguments, separate them with commas from each other and the\n    applications name.\n\noptions\n    A string containg the arguments to pass to mplayer for this profile.\n\nregex\n    A regular expression that has to match the filename using Pythons\n    `re.search`_ function in order for the other stuff in the section to be\n    applied.\n\nremove_after_playing\n    If this is a True value according to `the documentation for getboolean`_\n    the file will be removed after it has been played.\n\nEvery other option is treated as a key (like on your keyboard) with the\nvalue being the command the key is bound to.\nFor a list of all possible keys, use `mplayer --input=keylist`.\nFor a list of all possible commands, use `mplayer --input=cmdlist`.\n\nAn example config file called `example.config` is part of `the git\nrepository`_.\n\n.. _the documentation: http://docs.python.org/3.3/library/configparser.html#supported-ini-file-structure\n\n.. _re.search: http://docs.python.org/3.3/library/re.html#re.search\n\n.. _the git repository: https://github.com/mineo/mplayer-autocmd\n\n.. _the documentation for getboolean: http://docs.python.org/3.3/library/configparser.html?highlight=configparser#configparser.ConfigParser.getboolean", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/mineo/mplayer-autocmd/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mineo/mplayer-autocmd", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "mplayer-autocmd", "package_url": "https://pypi.org/project/mplayer-autocmd/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mplayer-autocmd/", "project_urls": {"Download": "https://github.com/mineo/mplayer-autocmd/tarball/master", "Homepage": "http://github.com/mineo/mplayer-autocmd"}, "release_url": "https://pypi.org/project/mplayer-autocmd/4/", "requires_dist": null, "requires_python": null, "summary": "mplayer wrapper providing per-file options & keybinding", "version": "4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>So, what does this do?</p>\n<p><cite>automp</cite> allows you to automatically append options or use different keybinding\ndepending on the file you\u2019re playing.\nThis is great if you want to skip the intro at the beginning (by providing an\n<cite>-ss xx:xx</cite> option) without doing anything or skipping something with a known\nlength in the middle of the file at the press of a button(by providing a\n<cite>key=seek xx.xx</cite> mapping)\nTo use it, just type <cite>automp</cite> every time you want to start mplayer instead of\n<cite>mplayer</cite> or use an alias.</p>\n<p>The config file (which can be found in\n<cite>$XDG_CONFIG_HOME/mplayer-autocmd-config</cite>) is a file that\u2019s parsed by Pythons\n<cite>configparser</cite> module, for a description of the terminology and it\u2019s\npossibilities look at <a href=\"http://docs.python.org/3.3/library/configparser.html#supported-ini-file-structure\" rel=\"nofollow\">the documentation</a>.</p>\n<p>The section name is used as a \u201cprofile name\u201d, it has no special meaning except\nfor showing you which profile has been chosen.</p>\n<p>There are only three supported options (or keys):</p>\n<dl>\n<dt>call_after_playing</dt>\n<dd>An application to call after the file has been played. If the application\nneeds any arguments, separate them with commas from each other and the\napplications name.</dd>\n<dt>options</dt>\n<dd>A string containg the arguments to pass to mplayer for this profile.</dd>\n<dt>regex</dt>\n<dd>A regular expression that has to match the filename using Pythons\n<a href=\"http://docs.python.org/3.3/library/re.html#re.search\" rel=\"nofollow\">re.search</a> function in order for the other stuff in the section to be\napplied.</dd>\n<dt>remove_after_playing</dt>\n<dd>If this is a True value according to <a href=\"http://docs.python.org/3.3/library/configparser.html?highlight=configparser#configparser.ConfigParser.getboolean\" rel=\"nofollow\">the documentation for getboolean</a>\nthe file will be removed after it has been played.</dd>\n</dl>\n<p>Every other option is treated as a key (like on your keyboard) with the\nvalue being the command the key is bound to.\nFor a list of all possible keys, use <cite>mplayer \u2013input=keylist</cite>.\nFor a list of all possible commands, use <cite>mplayer \u2013input=cmdlist</cite>.</p>\n<p>An example config file called <cite>example.config</cite> is part of <a href=\"https://github.com/mineo/mplayer-autocmd\" rel=\"nofollow\">the git\nrepository</a>.</p>\n\n          </div>"}, "last_serial": 849465, "releases": {"1": [{"comment_text": "", "digests": {"md5": "2c0aba9212227b75659a151cf068ccfb", "sha256": "41e978e629fe9bb891949fce60aec157850b1992f8bd922bbf42c8be8fbf4740"}, "downloads": -1, "filename": "mplayer-autocmd-1.tar.gz", "has_sig": false, "md5_digest": "2c0aba9212227b75659a151cf068ccfb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3211, "upload_time": "2013-01-09T18:14:13", "upload_time_iso_8601": "2013-01-09T18:14:13.300898Z", "url": "https://files.pythonhosted.org/packages/b8/d9/ac08d660147dabf629e67755b4ba0df6f37213273bb17c37197585dc2d2a/mplayer-autocmd-1.tar.gz", "yanked": false}], "2": [{"comment_text": "", "digests": {"md5": "985831bf92b165bb4a4d134dff35fe9a", "sha256": "41d4cbd078d67873e5a16e3ef73229d7c538139830115e380bebc0767393142d"}, "downloads": -1, "filename": "mplayer-autocmd-2.tar.gz", "has_sig": true, "md5_digest": "985831bf92b165bb4a4d134dff35fe9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3222, "upload_time": "2013-02-20T21:28:52", "upload_time_iso_8601": "2013-02-20T21:28:52.501393Z", "url": "https://files.pythonhosted.org/packages/d0/d2/6c3b4c82770fcd6f5d964c4eb0fe9bb1a1524379dee413fe030ccc915dec/mplayer-autocmd-2.tar.gz", "yanked": false}], "3": [{"comment_text": "", "digests": {"md5": "044005f9bfb60e42c422cb6489f18d69", "sha256": "f577adc154f22a232fc8890d050b6ade30d42bf8329890d5bb32e2019c5aa97c"}, "downloads": -1, "filename": "mplayer-autocmd-3.tar.gz", "has_sig": false, "md5_digest": "044005f9bfb60e42c422cb6489f18d69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3447, "upload_time": "2013-07-04T19:55:20", "upload_time_iso_8601": "2013-07-04T19:55:20.383856Z", "url": "https://files.pythonhosted.org/packages/61/af/c9cc8dca7027dc641f08e3e4dc8ad0760a5830281981ac3bcd0685431977/mplayer-autocmd-3.tar.gz", "yanked": false}], "4": [{"comment_text": "", "digests": {"md5": "bc5a9b9e89b218ebc4e380290efe9673", "sha256": "7b154fecd0f085732a273732f6384fcc3144f5ca03bb12cbefd520236745361c"}, "downloads": -1, "filename": "mplayer-autocmd-4.tar.gz", "has_sig": false, "md5_digest": "bc5a9b9e89b218ebc4e380290efe9673", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3656, "upload_time": "2013-08-26T16:40:57", "upload_time_iso_8601": "2013-08-26T16:40:57.149144Z", "url": "https://files.pythonhosted.org/packages/7c/94/1c27aff017cdf4d318e16eb86beafb5d6e7986c88ed475551da84b63d288/mplayer-autocmd-4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc5a9b9e89b218ebc4e380290efe9673", "sha256": "7b154fecd0f085732a273732f6384fcc3144f5ca03bb12cbefd520236745361c"}, "downloads": -1, "filename": "mplayer-autocmd-4.tar.gz", "has_sig": false, "md5_digest": "bc5a9b9e89b218ebc4e380290efe9673", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3656, "upload_time": "2013-08-26T16:40:57", "upload_time_iso_8601": "2013-08-26T16:40:57.149144Z", "url": "https://files.pythonhosted.org/packages/7c/94/1c27aff017cdf4d318e16eb86beafb5d6e7986c88ed475551da84b63d288/mplayer-autocmd-4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:14 2020"}