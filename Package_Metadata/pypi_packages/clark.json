{"info": {"author": "Carl Sverre", "author_email": "accounts@carlsverre.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7"], "description": "=====\nClark\n=====\n\n.. code:: bash\n\n    pip install clark\n\nTesting\n=======\n\n.. image:: https://travis-ci.org/carlsverre/clark.png\n    :target: https://travis-ci.org/carlsverre/clark\n\nRun tests by executing :code:`python setup.py test`.\n\nClasses\n=======\n\nSuper ArgParser\n---------------\nA nicer way to deal with config files and argparser:\n\nconfig_file.cnf:\n\n.. code:: text\n\n    test = 1\n    debug\n\nYour app:\n\n.. code:: python\n\n    from clark import SuperArgParser, ConfigFileAction\n\n    parser = SuperArgParser()\n\n    parser.add_argument('-c', action=ConfigFileAction)\n    parser.add_argument('--debug', action='store_true')\n    parser.add_argument('--test', type=int)\n    parser.add_argument('--engage')\n\n    options = parser.parse_args([\n        '--engage', 'foo',\n        '-c', 'config_file.cnf'\n    ])\n\n    assert options.test == 1\n    assert options.engage == 'foo'\n    assert options.debug is True\n\nSuper Enum\n---------------\nA simple Enum class with lots of nice properties.\n\n.. code:: python\n\n    from clark import SuperEnum\n\n    class Colors(SuperEnum):\n        red = SuperEnum.E\n        blue = SuperEnum.E\n        green = SuperEnum.E\n\n    class OtherColors(SuperEnum):\n        yellow = SuperEnum.E\n        red = SuperEnum.E\n\n    red = Colors['red']\n    red = Colors.red\n\n    assert red in Colors\n\n    assert str(red) == 'red'\n    assert red == Colors.red\n\n    assert Colors.red != OtherColors.red\n\n    class Foo(object):\n        class Colors(SuperEnum):\n            blue = SuperEnum.Element\n\n    assert Foo.Colors.blue != Colors.blue\n\nSuper JSON\n----------\nMake simplejson slightly better (don't crash on datetime objects)\n\n.. code:: python\n\n    from clark import super_json\n    \n    now = datetime.datetime.now()\n    x = super_json.loads(super_json.dumps({ 'a': now }))\n    assert x['a'] == now.isoformat()\n\nSuper PidFile\n-------------\nA simple PidFile class.  Instantiate when you boot up, and close it when you exit.\n\n.. code:: python\n\n    from clark import SuperPidFile\n    \n    pidfile = SuperPidFile()\n    try:\n        ... run your app ...\n    finally:\n        pidfile.close()\n\nSuper Thread\n------------\nThreads that terminate nicely and are awesome.\n\n.. code:: python\n\n    from clark import SuperThread\n    \n    class T(SuperThread):\n        def bootstrap(self):\n            self.i = 0\n\n        def sleep(self):\n            time.sleep(0.01)\n\n        def work(self):\n            self.i += 1\n\n        def cleanup(self):\n            assert self.i > 0\n            \n    t = T()\n    t.start()\n    \n    time.sleep(1)\n    \n    t.terminate()\n    t.join()\n    \n    assert not t.is_alive()", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/carlsverre/clark", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "clark", "package_url": "https://pypi.org/project/clark/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/clark/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/carlsverre/clark"}, "release_url": "https://pypi.org/project/clark/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Utility library.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre>pip install clark\n</pre>\n<div id=\"testing\">\n<h2>Testing</h2>\n<a href=\"https://travis-ci.org/carlsverre/clark\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/carlsverre/clark.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6d544b0d7ecba60dc1dc96d414082af39534d3f/68747470733a2f2f7472617669732d63692e6f72672f6361726c7376657272652f636c61726b2e706e67\"></a>\n<p>Run tests by executing <code>python setup.py test</code>.</p>\n</div>\n<div id=\"classes\">\n<h2>Classes</h2>\n<div id=\"super-argparser\">\n<h3>Super ArgParser</h3>\n<p>A nicer way to deal with config files and argparser:</p>\n<p>config_file.cnf:</p>\n<pre>test = 1\ndebug\n</pre>\n<p>Your app:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clark</span> <span class=\"kn\">import</span> <span class=\"n\">SuperArgParser</span><span class=\"p\">,</span> <span class=\"n\">ConfigFileAction</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">SuperArgParser</span><span class=\"p\">()</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'-c'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ConfigFileAction</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--debug'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_true'</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--test'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--engage'</span><span class=\"p\">)</span>\n\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span>\n    <span class=\"s1\">'--engage'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-c'</span><span class=\"p\">,</span> <span class=\"s1\">'config_file.cnf'</span>\n<span class=\"p\">])</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">test</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n<span class=\"k\">assert</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">engage</span> <span class=\"o\">==</span> <span class=\"s1\">'foo'</span>\n<span class=\"k\">assert</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"super-enum\">\n<h3>Super Enum</h3>\n<p>A simple Enum class with lots of nice properties.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clark</span> <span class=\"kn\">import</span> <span class=\"n\">SuperEnum</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Colors</span><span class=\"p\">(</span><span class=\"n\">SuperEnum</span><span class=\"p\">):</span>\n    <span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">SuperEnum</span><span class=\"o\">.</span><span class=\"n\">E</span>\n    <span class=\"n\">blue</span> <span class=\"o\">=</span> <span class=\"n\">SuperEnum</span><span class=\"o\">.</span><span class=\"n\">E</span>\n    <span class=\"n\">green</span> <span class=\"o\">=</span> <span class=\"n\">SuperEnum</span><span class=\"o\">.</span><span class=\"n\">E</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">OtherColors</span><span class=\"p\">(</span><span class=\"n\">SuperEnum</span><span class=\"p\">):</span>\n    <span class=\"n\">yellow</span> <span class=\"o\">=</span> <span class=\"n\">SuperEnum</span><span class=\"o\">.</span><span class=\"n\">E</span>\n    <span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">SuperEnum</span><span class=\"o\">.</span><span class=\"n\">E</span>\n\n<span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Colors</span><span class=\"p\">[</span><span class=\"s1\">'red'</span><span class=\"p\">]</span>\n<span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"n\">red</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">red</span> <span class=\"ow\">in</span> <span class=\"n\">Colors</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'red'</span>\n<span class=\"k\">assert</span> <span class=\"n\">red</span> <span class=\"o\">==</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"n\">red</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"n\">red</span> <span class=\"o\">!=</span> <span class=\"n\">OtherColors</span><span class=\"o\">.</span><span class=\"n\">red</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Colors</span><span class=\"p\">(</span><span class=\"n\">SuperEnum</span><span class=\"p\">):</span>\n        <span class=\"n\">blue</span> <span class=\"o\">=</span> <span class=\"n\">SuperEnum</span><span class=\"o\">.</span><span class=\"n\">Element</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"n\">blue</span> <span class=\"o\">!=</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"n\">blue</span>\n</pre>\n</div>\n<div id=\"super-json\">\n<h3>Super JSON</h3>\n<p>Make simplejson slightly better (don\u2019t crash on datetime objects)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clark</span> <span class=\"kn\">import</span> <span class=\"n\">super_json</span>\n\n<span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">super_json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">super_json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span> <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"n\">now</span> <span class=\"p\">}))</span>\n<span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">now</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"super-pidfile\">\n<h3>Super PidFile</h3>\n<p>A simple PidFile class.  Instantiate when you boot up, and close it when you exit.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clark</span> <span class=\"kn\">import</span> <span class=\"n\">SuperPidFile</span>\n\n<span class=\"n\">pidfile</span> <span class=\"o\">=</span> <span class=\"n\">SuperPidFile</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span> <span class=\"n\">run</span> <span class=\"n\">your</span> <span class=\"n\">app</span> <span class=\"o\">...</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">pidfile</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"super-thread\">\n<h3>Super Thread</h3>\n<p>Threads that terminate nicely and are awesome.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clark</span> <span class=\"kn\">import</span> <span class=\"n\">SuperThread</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"p\">(</span><span class=\"n\">SuperThread</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bootstrap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">sleep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">work</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">cleanup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">is_alive</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1024291, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "558770431faed802e9f1c521935873ed", "sha256": "537fb4b8bc0f97158331835502fbadd23d980fd1e4076bf74546d58a7e6e28ce"}, "downloads": -1, "filename": "clark-0.1.0.tar.gz", "has_sig": false, "md5_digest": "558770431faed802e9f1c521935873ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5440, "upload_time": "2014-03-10T00:09:50", "upload_time_iso_8601": "2014-03-10T00:09:50.345475Z", "url": "https://files.pythonhosted.org/packages/1a/42/fbb8ef57e7fe67e68884ba4a1ccb5af7bf4bee962573cd860ef00733725d/clark-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "558770431faed802e9f1c521935873ed", "sha256": "537fb4b8bc0f97158331835502fbadd23d980fd1e4076bf74546d58a7e6e28ce"}, "downloads": -1, "filename": "clark-0.1.0.tar.gz", "has_sig": false, "md5_digest": "558770431faed802e9f1c521935873ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5440, "upload_time": "2014-03-10T00:09:50", "upload_time_iso_8601": "2014-03-10T00:09:50.345475Z", "url": "https://files.pythonhosted.org/packages/1a/42/fbb8ef57e7fe67e68884ba4a1ccb5af7bf4bee962573cd860ef00733725d/clark-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:10 2020"}