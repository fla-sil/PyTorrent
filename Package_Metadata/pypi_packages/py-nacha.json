{"info": {"author": "DisruptiveLabs", "author_email": "team+nacha@comanage.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7"], "description": "=====\nnacha\n=====\n\n.. image:: https://travis-ci.org/DisruptiveLabs/nacha.png\n   :target: https://travis-ci.org/DisruptiveLabs/nacha\n\n.. image:: https://coveralls.io/repos/DisruptiveLabs/nacha/badge.png?branch=master\n  :target: https://coveralls.io/r/DisruptiveLabs/nacha?branch=master\n\n`NACHA <http://www.regaltek.com/docs/NACHA Format.pdf>`_ is a fixed sized\nrecord format used to represent financial transactions composed like this:\n\n.. code::\n\n    FileHeader\n        CompanyBatchHeader\n            EntryDetail\n                EntryDetailAddendum\n                ...\n            ...\n        CompanyBatchControl\n        ...\n    FileControl\n\nwhich we express using `bryl <https://github.com/balanced/bryl/>`_. Writing is\ndone like this:\n\n.. code:: python\n\n    with open('sample.nacha', 'w') as fo:\n        writer = nacha.Writer(fo)\n        with writer.begin_file(\n             ...\n             ):\n             with writer.begin_company_batch(\n                  ...\n                  ):\n                 writer.entry(...):\n                 ...\n            ...\n\nReading is done by iterating records like this:\n\n.. code:: python\n\n    with open('sample.nacha', 'r') as fo:\n        reader = Reader(fo, include_terminal=True)\n        for record, terminal in reader:\n            ...\n\nOr structured like this:\n\n.. code:: python\n\n    with open('sample.nacha', 'r') as fo:\n        reader = Reader(fo)\n        reader.file_header()\n        for company_batch_header in reader.company_batches():\n            for entry_detail, entry_addenda in reader.entries():\n                ...\n            reader.company_batch_control()\n        reader.file_control()\n\n===\nuse\n===\n\n.. code:: bash\n\n   $ pip install py-nacha\n\n===\ndev\n===\n\n.. code:: bash\n\n   $ git clone git@github.com:DisruptiveLabs/nacha.git\n   $ cd nacha\n   $ mkvirtualenv nacha\n   (nacha)$ pip install -e .[tests]\n   (nacha)$ py.test tests.py --cov=nacha --cov-report term-missing \n\n=======\nrelease\n=======\n\nNow that all tests are passing:\n\n- Update ``nacha.__version__`` to new ``{version}``.\n- Commit that ``git commit -am \"Release v{version}\"``\n- Tag it ``git tag -a v{version} -v  v{version}``\n- Push it ``git push origin --tags``\n\nand `travis <https://travis-ci.org/DisruptiveLabs/nacha>`_ will take it from there.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DisruptiveLabs/nacha", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "py-nacha", "package_url": "https://pypi.org/project/py-nacha/", "platform": "any", "project_url": "https://pypi.org/project/py-nacha/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/DisruptiveLabs/nacha"}, "release_url": "https://pypi.org/project/py-nacha/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "NACHA File Generation", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"nacha\">\n<h2>nacha</h2>\n<a href=\"https://travis-ci.org/DisruptiveLabs/nacha\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/DisruptiveLabs/nacha.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8bd48b87cce24a06e90e73d8497f604747c884a5/68747470733a2f2f7472617669732d63692e6f72672f446973727570746976654c6162732f6e616368612e706e67\"></a>\n<a href=\"https://coveralls.io/r/DisruptiveLabs/nacha?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/DisruptiveLabs/nacha/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37facda4f27a275b3945524c8bdf046ffd27eeb5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f446973727570746976654c6162732f6e616368612f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<p><a href=\"http://www.regaltek.com/docs/NACHAFormat.pdf\" rel=\"nofollow\">NACHA</a> is a fixed sized\nrecord format used to represent financial transactions composed like this:</p>\n<pre>FileHeader\n    CompanyBatchHeader\n        EntryDetail\n            EntryDetailAddendum\n            ...\n        ...\n    CompanyBatchControl\n    ...\nFileControl\n</pre>\n<p>which we express using <a href=\"https://github.com/balanced/bryl/\" rel=\"nofollow\">bryl</a>. Writing is\ndone like this:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'sample.nacha'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fo</span><span class=\"p\">:</span>\n    <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">nacha</span><span class=\"o\">.</span><span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"n\">fo</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">begin_file</span><span class=\"p\">(</span>\n         <span class=\"o\">...</span>\n         <span class=\"p\">):</span>\n         <span class=\"k\">with</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">begin_company_batch</span><span class=\"p\">(</span>\n              <span class=\"o\">...</span>\n              <span class=\"p\">):</span>\n             <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">entry</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n             <span class=\"o\">...</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>Reading is done by iterating records like this:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'sample.nacha'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fo</span><span class=\"p\">:</span>\n    <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">Reader</span><span class=\"p\">(</span><span class=\"n\">fo</span><span class=\"p\">,</span> <span class=\"n\">include_terminal</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"n\">terminal</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>Or structured like this:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'sample.nacha'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fo</span><span class=\"p\">:</span>\n    <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">Reader</span><span class=\"p\">(</span><span class=\"n\">fo</span><span class=\"p\">)</span>\n    <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">file_header</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">company_batch_header</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">company_batches</span><span class=\"p\">():</span>\n        <span class=\"k\">for</span> <span class=\"n\">entry_detail</span><span class=\"p\">,</span> <span class=\"n\">entry_addenda</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">entries</span><span class=\"p\">():</span>\n            <span class=\"o\">...</span>\n        <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">company_batch_control</span><span class=\"p\">()</span>\n    <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">file_control</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"use\">\n<h2>use</h2>\n<pre>$ pip install py-nacha\n</pre>\n</div>\n<div id=\"dev\">\n<h2>dev</h2>\n<pre>$ git clone git@github.com:DisruptiveLabs/nacha.git\n$ <span class=\"nb\">cd</span> nacha\n$ mkvirtualenv nacha\n<span class=\"o\">(</span>nacha<span class=\"o\">)</span>$ pip install -e .<span class=\"o\">[</span>tests<span class=\"o\">]</span>\n<span class=\"o\">(</span>nacha<span class=\"o\">)</span>$ py.test tests.py --cov<span class=\"o\">=</span>nacha --cov-report term-missing\n</pre>\n</div>\n<div id=\"release\">\n<h2>release</h2>\n<p>Now that all tests are passing:</p>\n<ul>\n<li>Update <tt>nacha.__version__</tt> to new <tt>{version}</tt>.</li>\n<li>Commit that <tt>git commit <span class=\"pre\">-am</span> \"Release v{version}\"</tt></li>\n<li>Tag it <tt>git tag <span class=\"pre\">-a</span> v{version} <span class=\"pre\">-v</span>\u00a0 v{version}</tt></li>\n<li>Push it <tt>git push origin <span class=\"pre\">--tags</span></tt></li>\n</ul>\n<p>and <a href=\"https://travis-ci.org/DisruptiveLabs/nacha\" rel=\"nofollow\">travis</a> will take it from there.</p>\n</div>\n\n          </div>"}, "last_serial": 1598017, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "65868f2d83b2737c2267c11ef0ed89de", "sha256": "5658485faf8541d9a428ae8e89e21f59402f2a416ea87e3c20f6b87fa3838047"}, "downloads": -1, "filename": "py-nacha-0.1.2.tar.gz", "has_sig": false, "md5_digest": "65868f2d83b2737c2267c11ef0ed89de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7476, "upload_time": "2015-06-12T21:26:18", "upload_time_iso_8601": "2015-06-12T21:26:18.622020Z", "url": "https://files.pythonhosted.org/packages/72/db/f7f94800df893b77978cad84d2477faca9374d21cd21d9e4fe2268da48cb/py-nacha-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "720015f26fd8ee74fc6a29df39df553b", "sha256": "96bf98ecc1af3ebb268f6123b7d7d33752e1f2e27e8701fe2e38ff461cab8720"}, "downloads": -1, "filename": "py-nacha-0.1.3.tar.gz", "has_sig": false, "md5_digest": "720015f26fd8ee74fc6a29df39df553b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7533, "upload_time": "2015-06-18T19:09:46", "upload_time_iso_8601": "2015-06-18T19:09:46.085420Z", "url": "https://files.pythonhosted.org/packages/b8/a7/f787a26191cc8beb4eb4111f6d5fbc0e7bd90ba2ca4e41d912ba2cb55156/py-nacha-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "720015f26fd8ee74fc6a29df39df553b", "sha256": "96bf98ecc1af3ebb268f6123b7d7d33752e1f2e27e8701fe2e38ff461cab8720"}, "downloads": -1, "filename": "py-nacha-0.1.3.tar.gz", "has_sig": false, "md5_digest": "720015f26fd8ee74fc6a29df39df553b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7533, "upload_time": "2015-06-18T19:09:46", "upload_time_iso_8601": "2015-06-18T19:09:46.085420Z", "url": "https://files.pythonhosted.org/packages/b8/a7/f787a26191cc8beb4eb4111f6d5fbc0e7bd90ba2ca4e41d912ba2cb55156/py-nacha-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:26 2020"}