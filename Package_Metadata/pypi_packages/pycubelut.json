{"info": {"author": "Yoonsik Park", "author_email": "park.yoonsik@icloud.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# pycubelut\n[![GitHub license](https://img.shields.io/github/license/yoonsikp/pycubelut.svg)](https://github.com/yoonsikp/pycubelut/blob/master/LICENSE)\n\nStop wasting time with sloppy 'gram filters, and use `pycubelut` to easily add that *pro* feel to your images!\n\n## Quick Start\nDownload one of many free `.cube` LUTs online \\[[1](https://luts.iwltbap.com/#freeware), [2](https://www.freepresets.com/product/free-luts-cali-vibes/)\\]. Then, run the following with your downloaded LUT and image.\n\n```\n$ sudo pip3 install pycubelut\n$ cubelut F-8700-V2-STD.cube P1040326.jpg -v\nINFO: Processing image: P1040326.jpg\nINFO: Completed in  6.71s\n```\n\n## Sample Image\n<p align=\"center\">\n  <img src=https://github.com/yoonsikp/pycubelut/blob/master/sample.jpg?raw=true width=100%>\n</p>\n\n## Overview\nMany professionals apply 3D LUTs to obtain a certain look and feel to their images and videos, which is usually done with proprietary software such as Adobe Photoshop or Final Cut Pro. `pycubelut` was created to be the first easy to use, open-source, command-line tool to apply Adobe Cube LUTs to images.\n\nIn the context of images, a Lookup Table (LUT) is a table describing a transformation of RGB values. There are multiple types of LUTs used in image processing, most common being 1D LUTs and 3D LUTs. A 1D LUT contains an independent transformation for each colour channel, meaning there would be three 1D LUTs defined (for Red, Green, and Blue). However, a 3D LUT has every colour in RGB space directly mapped to another specified colour (\u211d\u00b3 -> \u211d\u00b3), allowing for powerful and arbitrary transformations, such as greyscale, false colour, and hue shifts. All colour effects, such as gamma, contrast, brightness, etc. can be encoded as a 3D LUT.\n\n3D LUTs are essentially grids in the shape of cubes (hence Adobe used `.cube` for their LUT file extension). In order to encode a lossless transformation of the complete 8 bit RGB space, 256x256x256 mappings are needed. However, the Cube format allows for interpolation of values from a LUT defined with fewer points, commonly 33x33x33 mappings.\n\n## Usage\nWarning: If your input image is in a Log colorspace, make sure to choose a Log LUT!\n```\n$ cubelut --help\nusage: cubelut [-h] [-o OUT] [-g] [-v] [-t [THUMB]] [-j JOBS] LUT INPUT\n\nTool for applying Adobe Cube LUTs to images\n\npositional arguments:\n  LUT                   Cube LUT filename/folder\n  INPUT                 input image filename/folder\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUT, --out OUT     output image folder\n  -g, --log             convert to Log before LUT\n  -v, --verbose         control verbosity and info messages\n  -t [THUMB], --thumb [THUMB]\n                        resizes to <= 500px, optionally specify max size\n  -j JOBS, --jobs JOBS  number of processes to spawn, defaults to number of\n                        logical CPUs\n```\n\n### Multiple LUTs\nApplies all `.cube` files in the folder to the image(s)\n```\n$ cubelut ./my_luts/ P1040326.jpg -v\n```\n\n### Batch Image Processing\nProcesses all images in the input folder, and outputs to a specified folder\n```\n$ cubelut ./my_luts/ ./my_images/ -o ./new_images/ -v\n```\n\n### Thumbnail Mode\nResizes images for a huge speedup, useful for multiple LUTs\n```\n$ cubelut ./my_luts/ P1040326.jpg -v -t\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yoonsikp/pycubelut", "keywords": "cube,lut,cubelut,3d,python", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pycubelut", "package_url": "https://pypi.org/project/pycubelut/", "platform": "", "project_url": "https://pypi.org/project/pycubelut/", "project_urls": {"Homepage": "https://github.com/yoonsikp/pycubelut", "Repository": "https://github.com/yoonsikp/pycubelut"}, "release_url": "https://pypi.org/project/pycubelut/0.2.2/", "requires_dist": ["scipy (>=1.4.1,<2.0.0)", "colour-science (>=0.3.14,<0.4.0)", "numpy (==1.17.3)", "pillow (>=6.2.1,<7.0.0)"], "requires_python": ">=3.5,<4.0", "summary": "Tool for Applying Adobe Cube LUTs to Images", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pycubelut</h1>\n<p><a href=\"https://github.com/yoonsikp/pycubelut/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8063abdf6434e60d34d99e460ccc8c85ca09cb8d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f796f6f6e73696b702f7079637562656c75742e737667\"></a></p>\n<p>Stop wasting time with sloppy 'gram filters, and use <code>pycubelut</code> to easily add that <em>pro</em> feel to your images!</p>\n<h2>Quick Start</h2>\n<p>Download one of many free <code>.cube</code> LUTs online [<a href=\"https://luts.iwltbap.com/#freeware\" rel=\"nofollow\">1</a>, <a href=\"https://www.freepresets.com/product/free-luts-cali-vibes/\" rel=\"nofollow\">2</a>]. Then, run the following with your downloaded LUT and image.</p>\n<pre><code>$ sudo pip3 install pycubelut\n$ cubelut F-8700-V2-STD.cube P1040326.jpg -v\nINFO: Processing image: P1040326.jpg\nINFO: Completed in  6.71s\n</code></pre>\n<h2>Sample Image</h2>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13b0717c82199d8d463f62949b6a165fc44e70d3/68747470733a2f2f6769746875622e636f6d2f796f6f6e73696b702f7079637562656c75742f626c6f622f6d61737465722f73616d706c652e6a70673f7261773d74727565\" width=\"100%\">\n</p>\n<h2>Overview</h2>\n<p>Many professionals apply 3D LUTs to obtain a certain look and feel to their images and videos, which is usually done with proprietary software such as Adobe Photoshop or Final Cut Pro. <code>pycubelut</code> was created to be the first easy to use, open-source, command-line tool to apply Adobe Cube LUTs to images.</p>\n<p>In the context of images, a Lookup Table (LUT) is a table describing a transformation of RGB values. There are multiple types of LUTs used in image processing, most common being 1D LUTs and 3D LUTs. A 1D LUT contains an independent transformation for each colour channel, meaning there would be three 1D LUTs defined (for Red, Green, and Blue). However, a 3D LUT has every colour in RGB space directly mapped to another specified colour (\u211d\u00b3 -&gt; \u211d\u00b3), allowing for powerful and arbitrary transformations, such as greyscale, false colour, and hue shifts. All colour effects, such as gamma, contrast, brightness, etc. can be encoded as a 3D LUT.</p>\n<p>3D LUTs are essentially grids in the shape of cubes (hence Adobe used <code>.cube</code> for their LUT file extension). In order to encode a lossless transformation of the complete 8 bit RGB space, 256x256x256 mappings are needed. However, the Cube format allows for interpolation of values from a LUT defined with fewer points, commonly 33x33x33 mappings.</p>\n<h2>Usage</h2>\n<p>Warning: If your input image is in a Log colorspace, make sure to choose a Log LUT!</p>\n<pre><code>$ cubelut --help\nusage: cubelut [-h] [-o OUT] [-g] [-v] [-t [THUMB]] [-j JOBS] LUT INPUT\n\nTool for applying Adobe Cube LUTs to images\n\npositional arguments:\n  LUT                   Cube LUT filename/folder\n  INPUT                 input image filename/folder\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUT, --out OUT     output image folder\n  -g, --log             convert to Log before LUT\n  -v, --verbose         control verbosity and info messages\n  -t [THUMB], --thumb [THUMB]\n                        resizes to &lt;= 500px, optionally specify max size\n  -j JOBS, --jobs JOBS  number of processes to spawn, defaults to number of\n                        logical CPUs\n</code></pre>\n<h3>Multiple LUTs</h3>\n<p>Applies all <code>.cube</code> files in the folder to the image(s)</p>\n<pre><code>$ cubelut ./my_luts/ P1040326.jpg -v\n</code></pre>\n<h3>Batch Image Processing</h3>\n<p>Processes all images in the input folder, and outputs to a specified folder</p>\n<pre><code>$ cubelut ./my_luts/ ./my_images/ -o ./new_images/ -v\n</code></pre>\n<h3>Thumbnail Mode</h3>\n<p>Resizes images for a huge speedup, useful for multiple LUTs</p>\n<pre><code>$ cubelut ./my_luts/ P1040326.jpg -v -t\n</code></pre>\n\n          </div>"}, "last_serial": 6383900, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "147e6b51ac2778d16ec957f36e1bed8a", "sha256": "efb571f5afee4ec4769a77cbedd4e4305eee426b1e333308cab9511b205555ae"}, "downloads": -1, "filename": "pycubelut-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "147e6b51ac2778d16ec957f36e1bed8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 5802, "upload_time": "2020-01-02T00:44:04", "upload_time_iso_8601": "2020-01-02T00:44:04.177969Z", "url": "https://files.pythonhosted.org/packages/c3/3b/6020425a0d57c6458e245ac349e91424f27a4d7d0cf8e188b3c4693158b8/pycubelut-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "294cacbd5ec3d001774607394a30a620", "sha256": "8cf272009d08b85d5230a938d641b342052b5d19886a9e19c50ef6aa29f6ab78"}, "downloads": -1, "filename": "pycubelut-0.2.0.tar.gz", "has_sig": false, "md5_digest": "294cacbd5ec3d001774607394a30a620", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 5308, "upload_time": "2020-01-02T00:44:06", "upload_time_iso_8601": "2020-01-02T00:44:06.083275Z", "url": "https://files.pythonhosted.org/packages/65/ec/a2e6c8f5aac353d85b3b28f94a0bd4a587f51254615d9bd8156034d79483/pycubelut-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b73925787a913e56cd4fe43f8f970486", "sha256": "2d69085522be63bb58fd29acf9ad2205011570e7f4f15c169fb3d0f6c3cb73b8"}, "downloads": -1, "filename": "pycubelut-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b73925787a913e56cd4fe43f8f970486", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 7444, "upload_time": "2020-01-02T00:48:42", "upload_time_iso_8601": "2020-01-02T00:48:42.653787Z", "url": "https://files.pythonhosted.org/packages/af/85/35df52516ab0777587a194ba3e25600439b09eda1ca121a56e839f858e0c/pycubelut-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "072bc2270c4fc382ba7c90aa941a6653", "sha256": "61f717263297f49689ad471c8c0aff8755acdddbc657fbe08cfb6e3aa81d3d0d"}, "downloads": -1, "filename": "pycubelut-0.2.1.tar.gz", "has_sig": false, "md5_digest": "072bc2270c4fc382ba7c90aa941a6653", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 7195, "upload_time": "2020-01-02T00:48:43", "upload_time_iso_8601": "2020-01-02T00:48:43.884240Z", "url": "https://files.pythonhosted.org/packages/5f/01/bf77dbb27927fc7cc71807c029e4cabdd6db12289620acdb75c80c47bdeb/pycubelut-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "c95e68be0a5a9c54fe7d2fb8446dfc44", "sha256": "0c2dbf257d1187cc4e19b32927d1113a1199550872bc03ef283ec1c3a25faea6"}, "downloads": -1, "filename": "pycubelut-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c95e68be0a5a9c54fe7d2fb8446dfc44", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 7450, "upload_time": "2020-01-02T00:55:51", "upload_time_iso_8601": "2020-01-02T00:55:51.509280Z", "url": "https://files.pythonhosted.org/packages/37/e6/8e91cbe6ff12931d3b7e8400156fdde66931674dc035a1e936537fa8e58a/pycubelut-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "370f61c3cef363f22dd76db7fb11c047", "sha256": "1b56d0646b52f2e442b3f9a1a70ccf2019c0fdfb5c0d184408586352c81ef984"}, "downloads": -1, "filename": "pycubelut-0.2.2.tar.gz", "has_sig": false, "md5_digest": "370f61c3cef363f22dd76db7fb11c047", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 7191, "upload_time": "2020-01-02T00:55:53", "upload_time_iso_8601": "2020-01-02T00:55:53.349657Z", "url": "https://files.pythonhosted.org/packages/bf/3f/96002763b57dc933c0276362d096f65a7e99bfc3b827e47848c83408bf61/pycubelut-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c95e68be0a5a9c54fe7d2fb8446dfc44", "sha256": "0c2dbf257d1187cc4e19b32927d1113a1199550872bc03ef283ec1c3a25faea6"}, "downloads": -1, "filename": "pycubelut-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c95e68be0a5a9c54fe7d2fb8446dfc44", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 7450, "upload_time": "2020-01-02T00:55:51", "upload_time_iso_8601": "2020-01-02T00:55:51.509280Z", "url": "https://files.pythonhosted.org/packages/37/e6/8e91cbe6ff12931d3b7e8400156fdde66931674dc035a1e936537fa8e58a/pycubelut-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "370f61c3cef363f22dd76db7fb11c047", "sha256": "1b56d0646b52f2e442b3f9a1a70ccf2019c0fdfb5c0d184408586352c81ef984"}, "downloads": -1, "filename": "pycubelut-0.2.2.tar.gz", "has_sig": false, "md5_digest": "370f61c3cef363f22dd76db7fb11c047", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 7191, "upload_time": "2020-01-02T00:55:53", "upload_time_iso_8601": "2020-01-02T00:55:53.349657Z", "url": "https://files.pythonhosted.org/packages/bf/3f/96002763b57dc933c0276362d096f65a7e99bfc3b827e47848c83408bf61/pycubelut-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:35 2020"}