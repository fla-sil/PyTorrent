{"info": {"author": "RicterZ", "author_email": "ricterzheng@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Other Audience", "License :: OSI Approved :: MIT License", "Natural Language :: Chinese (Traditional)", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "BGmi\n====\nBGmi is a cli tool for subscribed bangumi.\n\n`\u4e2d\u6587\u8bf4\u660e <./README.cn.md>`_\n\n|pypi|\n|pypistats|\n|travis|\n|coverage|\n|license|\n\n====\nTODO\n====\n\n\n==========\nUpdate Log\n==========\n+ remove python 3.4 support as it has reached its end-of-life\n+ The BGmi version you saw will be the last version that support Python2.\n+ Transmission rpc authentication configuration\n+ New download delegate `deluge-rpc <https://www.deluge-torrent.org/>`_\n+ You can filter search results by min and max episode\n\n=======\nFeature\n=======\n+ Multi data sources supported: `bangumi_moe <https://bangumi.moe>`_, `mikan_project <https://mikanani.me>`_ or `dmhy <https://share.dmhy.org/>`_\n+ Use aria2, transmission or xunlei-lixian to download bangumi\n+ Web interface to manage bangumi with HTTP API\n+ Play bangumi online with danmaku\n+ RSS feed for uTorrent, ICS calendar for mobile devices\n+ Bangumi Script: Write your own bangumi parser!\n+ Bangumi calendar / episode information\n+ Keyword, subtitle group, regular expression filters for download bangumi\n+ Windows, Linux and Router system supported, BGmi everywhere\n\n.. image:: ./images/bgmi_cli.png?raw=true\n    :alt: BGmi\n    :align: center\n.. image:: ./images/bgmi_http.png?raw=true\n    :alt: BGmi HTTP Service\n    :align: center\n.. image:: ./images/bgmi_player.png?raw=true\n    :alt: BGmi HTTP Service\n    :align: center\n.. image:: ./images/bgmi_admin.png?raw=true\n    :alt: BGmi HTTP Service\n    :align: center\n\n============\nInstallation\n============\n\nFor **Mac OS X / Linux / Windows**:\n\n.. code-block:: bash\n\n    git clone https://github.com/BGmi/BGmi\n    cd BGmi\n    python setup.py install\n\nOr use pip:\n\n.. code-block:: bash\n\n    pip install bgmi\n\nInit BGmi database and install BGmi web interface:\n\n.. code-block:: bash\n\n    bgmi install\n\n============\nUpgrade\n============\n.. code-block:: bash\n\n    pip install bgmi -U\n    bgmi upgrade\n\nMake sure to run :code:`bgmi upgrade` after you upgrade your bgmi\n\n======\nDocker\n======\nBuild Docker:\n\n.. code-block:: bash\n\n    git clone https://github.com/BGmi/BGmi\n    cd BGmi\n    docker build -t bgmi .\n    docker run -p127.0.0.1:8888:80 -p6800:6800 -d -v $HOME/.bgmi:$HOME/.bgmi bgmi\n\nYou can use bgmi command at host to add / remove bangumi, or get into the docker container to manage bangumi.\n\nOr just:\n\n.. code-block:: bash\n\n    docker pull ricterz/bgmi\n    docker run -p127.0.0.1:8888:80 -p6800:6800 -d -v $HOME/.bgmi:$HOME/.bgmi ricterz/bgmi\n\nConfigure BGmi docker:\n\n.. code-block:: bash\n\n    # bgmi config ARIA2_RPC_TOKEN token:TOKEN_OF_ARIA2_RPC\n    # docker exec -it <CONTAINER ID> ln -s ~/.bgmi/ /bgmi\n    # docker exec -it <CONTAINER ID> bash -c 'echo rpc-secret=TOKEN_OF_ARIA2_RPC >> /root/aria2c.conf'\n    # docker exec -it <CONTAINER ID> supervisorctl\n    supervisor> restart bgmi:aria2c\n    supervisor> quit\n\n=============\nUsage of bgmi\n=============\nCli completion(bash and zsh. Shell was detected from your env $SHELL)\n\n.. code-block:: bash\n\n    eval \"$(bgmi complete)\"\n\nSetup custom BGMI_PATH:\n\n.. code-block:: bash\n\n    BGMI_PATH=/bgmi bgmi -h\n\nOr add this code to your .bashrc file:\n\n.. code-block:: bash\n\n    alias bgmi='BGMI_PATH=/tmp bgmi'\n\nSupported data source:\n\n+ `bangumi_moe(default) <https://bangumi.moe>`_\n+ `mikan_project_ <https://mikanani.me>`_\n+ `dmhy_ <https://share.dmhy.org/>`_\n\nChange data source:\n\n**All bangumi in database will be deleted when changing data source!** but scripts won't be affected\n\nvideo files will still store on the disk, but won't be shown on website.\n\n\n.. code-block:: bash\n\n    bgmi source mikan_project\n\nShow bangumi calendar:\n\n.. code-block:: bash\n\n    bgmi cal\n\n\nSubscribe bangumi:\n\n.. code-block:: bash\n\n    bgmi add \"Re:CREATORS\" \"\u590f\u76ee\u53cb\u4eba\u5e10 \u9646\" \"\u8fdb\u51fb\u7684\u5de8\u4eba season 2\"\n    bgmi add \"\u6a31\u82b1\u4efb\u52a1\" --episode 0\n\n\nUnsubscribe bangumi:\n\n.. code-block:: bash\n\n    bgmi delete --name \"Re:CREATORS\"\n\n\nUpdate bangumi database which locates at ~/.bgmi/bangumi.db acquiescently:\n\n.. code-block:: bash\n\n    bgmi update --download\n    bgmi update \"\u4ece\u96f6\u5f00\u59cb\u7684\u9b54\u6cd5\u4e66\" --download 2 3\n    bgmi update \"\u65f6\u949f\u673a\u5173\u4e4b\u661f\" --download\n\n\nSet up the bangumi subtitle group filter and fetch entries:\n\n.. code-block:: bash\n\n    bgmi list\n    bgmi fetch \"Re:CREATORS\"\n    bgmi filter \"Re:CREATORS\" --subtitle \"DHR\u52d5\u7814\u5b57\u5e55\u7d44,\u8c4c\u8c46\u5b57\u5e55\u7ec4\" --include 720P --exclude BIG5\n    bgmi fetch \"Re:CREATORS\"\n    # remove subtitle, include and exclude keyword filter and add regex filter\n    bgmi filter \"Re:CREATORS\" --subtitle \"\" --include \"\" --exclude \"\" --regex\n    bgmi filter \"Re:CREATORS\" --regex \"(DHR\u52d5\u7814\u5b57\u5e55\u7d44|\u8c4c\u8c46\u5b57\u5e55\u7ec4).*(720P)\"\n    bgmi fetch \"Re:CREATORS\"\n\n\nSearch bangumi and download:\n\n.. code-block:: bash\n\n    bgmi search '\u4e3a\u7f8e\u597d\u7684\u4e16\u754c\u732e\u4e0a\u795d\u798f\uff01' --regex-filter '.*\u52a8\u6f2b\u56fd\u5b57\u5e55\u7ec4.*\u4e3a\u7f8e\u597d\u7684\u4e16\u754c\u732e\u4e0a\u795d\u798f\uff01].*720P.*'\n    # download\n    bgmi search '\u4e3a\u7f8e\u597d\u7684\u4e16\u754c\u732e\u4e0a\u795d\u798f\uff01' --regex-filter '.*\u5408\u96c6.*' --download\n\n\nModify bangumi episode:\n\n.. code-block:: bash\n\n    bgmi list\n    bgmi mark \"Re:CREATORS\" 1\n\n\nManage download items:\n\n.. code-block:: bash\n\n    bgmi download --list\n    bgmi download --list --status 0\n    bgmi download --mark 1 --status 2\n\nStatus code:\n\n+ 0 - Not downloaded items\n+ 1 - Downloading items\n+ 2 - Downloaded items\n\nShow BGmi configure and modify it:\n\n.. code-block:: bash\n\n    bgmi config\n    bgmi config ARIA2_RPC_TOKEN 'token:token233'\n\nFields of configure file:\n\nBGmi configure:\n\n+ :code:`BANGUMI_MOE_URL`: url of bangumi.moe mirror\n+ :code:`BGMI_SAVE_PATH`: bangumi saving path\n+ :code:`DOWNLOAD_DELEGATE`: the ways of downloading bangumi (aria2-rpc, transmission-rpc, xunlei)\n+ :code:`MAX_PAGE`: max page for fetching bangumi information\n+ :code:`BGMI_TMP_PATH`: just a temporary path\n+ :code:`DANMAKU_API_URL`: url of danmaku api\n+ :code:`LANG`: language\n\nAria2-rpc configure:\n\n+ :code:`ARIA2_RPC_URL`: aria2c daemon RPC url, not jsonrpc url.(\"http://localhost:6800/rpc\" for localhost)\n+ :code:`ARIA2_RPC_TOKEN`: aria2c daemon RPC token(\"token:\" for no token)\n\nXunlei configure:\n\nXunleiLixian is deprecated, please choose aria2-rpc or transmission-rpc.\n\n+ :code:`XUNLEI_LX_PATH`: path of xunlei-lixian binary\n\nTransmission-rpc configure:\n\n+ :code:`TRANSMISSION_RPC_URL`: transmission rpc host\n+ :code:`TRANSMISSION_RPC_PORT`: transmission rpc port\n+ :code:`TRANSMISSION_RPC_USERNAME`: transmission rpc username (leave it default if you don't set rpc authentication)\n+ :code:`TRANSMISSION_RPC_PASSWORD`: transmission rpc password (leave it default if you don't set rpc authentication)\n\nDeluge-rpc configure:\n\n+ :code:`DELUGE_RPC_URL`: deluge rpc url\n+ :code:`DELUGE_RPC_PASSWORD`: deluge rpc password\n\n==================\nUsage of bgmi_http\n==================\nDownload all bangumi cover:\n\n.. code-block:: bash\n\n    bgmi cal --download-cover\n\nDownload frontend static files(you may have done it before):\n\n.. code-block:: bash\n\n    bgmi install\n\nStart BGmi HTTP Service bind on :code:`0.0.0.0:8888`:\n\n.. code-block:: bash\n\n    bgmi_http --port=8888 --address=0.0.0.0\n\nUse bgmi_http on Windows\n------------------------\nJust start your bgmi_http and open `http://localhost:8888/ <http://localhost:8888/>`_ in your browser.\n\nConsider most people won't use Nginx on Windows, bgmi_http use tornado.web.StaticFileHandler to serve static files(frontend, bangumi covers, bangumi files) without Nginx.\n\nUse bgmi_http on Linux\n----------------------\nGenerate Nginx config\n\n.. code-block:: bash\n\n    bgmi gen nginx.conf --server-name bgmi.whatever.com > bgmi.whatever.com\n\nOr write your config file manually.\n\n.. code-block:: bash\n\n    server {\n        listen 80;\n        server_name bgmi;\n\n        root /path/to/bgmi;\n        autoindex on;\n        charset utf-8;\n\n        location /bangumi {\n            # ~/.bgmi/bangumi\n            alias /path/to/bangumi;\n        }\n\n        location /api {\n            proxy_pass http://127.0.0.1:8888;\n            # Requests to api/update may take more than 60s\n            proxy_connect_timeout 500s;\n            proxy_read_timeout 500s;\n            proxy_send_timeout 500s;\n        }\n\n        location /resource {\n            proxy_pass http://127.0.0.1:8888;\n        }\n\n        location / {\n            # ~/.bgmi/front_static/;\n            alias /path/to/front_static/;\n        }\n\n    }\n\nOf cause you can use `yaaw <https://github.com/binux/yaaw/>`_ to manage download items if you use aria2c to download bangumi.\n\n.. code-block:: bash\n\n    ...\n    location /yaaw {\n        alias /path/to/yaaw;\n    }\n\n    location /jsonrpc {\n        # aria2c rpc\n        proxy_pass http://127.0.0.1:6800;\n    }\n    ...\n\nExample file: `bgmi.conf <https://github.com/BGmi/BGmi/blob/dev/bgmi.conf>`_\n\nmacOS launchctl service controller\n----------------------------------\nsee `issue #77 <https://github.com/BGmi/BGmi/pull/77>`_\n\n`me.ricterz.bgmi.plist <https://github.com/BGmi/BGmi/blob/master/bgmi/others/me.ricterz.bgmi.plist>`_\n\n===================\nDPlayer and Danmaku\n===================\n\nBGmi use `DPlayer <https://github.com/DIYgod/DPlayer>`_ to play bangumi.\n\nFirst, setup nginx to access bangumi files.\nSecond, choose one danmaku backend at `DPlayer#related-projects <https://github.com/DIYgod/DPlayer#related-projects>`_.\n\nUse :code:`bgmi config` to setup the url of danmaku api.\n\n.. code-block:: bash\n\n    bgmi config DANMAKU_API_URL https://api.prprpr.me/dplayer/ # This api is provided by dplayer official\n\n...restart your :code:`bgmi_http` and enjoy :D\n\n==============\nBangumi Script\n==============\n\nBangumi Script is a script which you can write the bangumi parser own.\nBGmi will load the script and call the method you write before the native functionality.\n\nBangumi Script Runner will catch the data you returned, update the database, and download the bangumi.\nYou only just write the parser and return the data.\n\nBangumi Script is located at :code:`BGMI_PATH/script`, inherited :code:`ScriptBase` class. There is an example:\n\n.. code-block:: python\n\n    # coding=utf-8\n    from __future__ import print_function, unicode_literals\n\n    import re\n    import json\n    import requests\n    import urllib\n\n    from bgmi.utils import parse_episode\n    from bgmi.script import ScriptBase\n    from bgmi.utils import print_error\n    from bgmi.config import IS_PYTHON3\n\n\n    if IS_PYTHON3:\n        unquote = urllib.parse.unquote\n    else:\n        unquote = urllib.unquote\n\n\n    class Script(ScriptBase):\n\n        # \u5b9a\u4e49 Model, \u6b64\u5904 Model \u4e3a\u663e\u793a\u5728 BGmi HTTP \u4ee5\u53ca\u5176\u4ed6\u5730\u65b9\u7684\u540d\u79f0\u3001\u5c01\u9762\u53ca\u5176\u5b83\u4fe1\u606f\n        class Model(ScriptBase.Model):\n            bangumi_name = '\u731c\u8c1c\u738b(BGmi Script)' # \u540d\u79f0, \u968f\u610f\u586b\u5199\u5373\u53ef\n            cover = 'COVER URL' # \u5c01\u9762\u7684 URL\n            update_time = 'Tue' # \u6bcf\u5468\u51e0\u66f4\u65b0\n\n        def get_download_url(self):\n            \"\"\"Get the download url, and return a dict of episode and the url.\n            Download url also can be magnet link.\n            For example:\n            ```\n                {\n                    1: 'http://example.com/Bangumi/1/1.mp4'\n                    2: 'http://example.com/Bangumi/1/2.mp4'\n                    3: 'http://example.com/Bangumi/1/3.mp4'\n                }\n            ```\n            The keys `1`, `2`, `3` is the episode, the value is the url of bangumi.\n            :return: dict\n            \"\"\"\n            # fetch and return dict\n            resp = requests.get('http://www.kirikiri.tv/?m=vod-play-id-4414-src-1-num-2.html').text\n            data = re.findall(\"mac_url=unescape\\('(.*)?'\\)\", resp)\n            if not data:\n                print_error('No data found, maybe the script is out-of-date.', exit_=False)\n                return {}\n\n            data = unquote(json.loads('[\"{}\"]'.format(data[0].replace('%u', '\\\\u')))[0])\n\n            ret = {}\n            for i in data.split('#'):\n                title, url = i.split('$')\n                # parse_episode \u4e3a\u5185\u7f6e\u7684\u89e3\u6790\u96c6\u6570\u7684\u65b9\u6cd5, \u53ef\u4ee5\u5e94\u5bf9\u5927\u591a\u6570\u60c5\u51b5\u3002\u5982\u82e5\u4e0d\u53ef\u7528, \u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\u89e3\u6790\n                ret[parse_episode(title)] = url\n\n            return ret\n\nAnother example:\n\n.. code-block:: python\n\n    # coding=utf-8\n    from __future__ import print_function, unicode_literals\n\n    import re\n    import requests\n    from bs4 import BeautifulSoup as bs\n\n    from bgmi.utils import parse_episode\n    from bgmi.script import ScriptBase\n    from bgmi.utils import print_error\n    from bgmi.config import IS_PYTHON3\n\n\n    class Script(ScriptBase):\n\n        class Model(ScriptBase.Model):\n            bangumi_name = 'Rick and Morty Season 3'\n            cover = 'http://img.itvfans.com/wp-content/uploads/31346.jpg'\n            update_time = 'Mon'\n\n        def get_download_url(self):\n            # fetch and return dict\n            resp = requests.get('http://www.itvfans.com/fenji/313463.html').text\n            html = bs(resp, 'lxml')\n\n            data = html.find(attrs={'id': '31346-3-720p'})\n\n            if not data:\n                print_error('No data found, maybe the script is out-of-date.', exit_=False)\n                return {}\n\n            ret = {}\n            match_episode = re.compile('Rick\\.and\\.Morty\\.S03E(\\d+)\\.720p')\n            for row in data.find_all('a', attrs={'type': 'magnet'}):\n                link = row.attrs['href']\n                episode = match_episode.findall(link)\n                if episode:\n                    ret[int(episode[0])] = link\n\n            return ret\n\n\n    if __name__ == '__main__':\n        s = Script()\n        print(s.get_download_url())\n\n\nThe returned dict as follows.\n\n.. code-block:: bash\n\n    {\n        1: 'http://example.com/Bangumi/1/1.mp4'\n        2: 'http://example.com/Bangumi/1/2.mp4'\n        3: 'http://example.com/Bangumi/1/3.mp4'\n    }\n\nThe keys `1`, `2`, `3` is the episode, the value is the url of bangumi.\n\n================\nBGmi Data Source\n================\nYou can easily add your own BGmi data source by extending BGmi website base class and implement all the method.\n\n.. code-block:: python\n\n    class DataSource(bgmi.website.base.BaseWebsite)\n        cover_url=''\n\n        def search_by_keyword(self, keyword, count):\n            \"\"\"\n            return a list of dict with at least 4 key: download, name, title, episode\n            example:\n            ```\n                [\n                    {\n                        'name':\"\u8def\u4eba\u5973\u4e3b\u7684\u517b\u6210\u65b9\u6cd5\",\n                        'download': 'magnet:?xt=urn:btih:what ever',\n                        'title': \"[\u6f84\u7a7a\u5b66\u56ed] \u8def\u4eba\u5973\u4e3b\u7684\u517b\u6210\u65b9\u6cd5 \u7b2c12\u8bdd MP4 720p  \u5b8c\",\n                        'episode': 12\n                    },\n                ]\n\n            :param keyword: search key word\n            :type keyword: str\n            :param count: how many page to fetch from website\n            :type count: int\n\n            :return: list of episode search result\n            :rtype: list[dict]\n            \"\"\"\n            raise NotImplementedError\n\n        def fetch_bangumi_calendar_and_subtitle_group(self):\n            \"\"\"\n            return a list of all bangumi and a list of all subtitle group\n\n            list of bangumi dict:\n            update time should be one of ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n            example:\n            ```\n                [\n                    {\n                        \"status\": 0,\n                        \"subtitle_group\": [\n                            \"123\",\n                            \"456\"\n                        ],\n                        \"name\": \"\u540d\u4fa6\u63a2\u67ef\u5357\",\n                        \"keyword\": \"1234\", #bangumi id\n                        \"update_time\": \"Sat\",\n                        \"cover\": \"data/images/cover1.jpg\"\n                    },\n                ]\n            ```\n            when downloading cover images, BGmi will try to get `self.cover_url + bangumi['cover']`\n\n\n            list of subtitle group dict:\n            example:\n            ```\n                [\n                    {\n                        'id': '233',\n                        'name': 'bgmi\u5b57\u5e55\u7ec4'\n                    }\n                ]\n            ```\n\n\n            :return: list of bangumi, list of subtitile group\n            :rtype: (list[dict], list[dict])\n            \"\"\"\n            raise NotImplementedError\n\n        def fetch_episode_of_bangumi(self, bangumi_id, subtitle_list=None, max_page=MAX_PAGE):\n            \"\"\"\n            get all episode by bangumi id\n            example\n            ```\n                [\n                    {\n                        \"download\": \"magnet:?xt=urn:btih:e43b3b6b53dd9fd6af1199e112d3c7ff15cab82c\",\n                        \"subtitle_group\": \"58a9c1c9f5dc363606ab42ec\",\n                        \"title\": \"\u3010\u55b5\u840c\u5976\u8336\u5c4b\u3011\u2605\u4e03\u6708\u65b0\u756a\u2605[\u6765\u81ea\u6df1\u6e0a/Made in Abyss][07][GB][720P]\",\n                        \"episode\": 0,\n                        \"time\": 1503301292\n                    },\n                ]\n            ```\n\n            :param bangumi_id: bangumi_id\n            :param subtitle_list: list of subtitle group\n            :type subtitle_list: list\n            :param max_page: how many page you want to crawl if there is no subtitle list\n            :type max_page: int\n            :return: list of bangumi\n            :rtype: list[dict]\n            \"\"\"\n            raise NotImplementedError\n\n\n===================\nDebug\n===================\nSet env :code:`BGMI_LOG` to :code:`debug`, :code:`info`, :code:`warning`, :code:`error` for different log level\n\nlog file will locate at :code:`{TMP_PATH}/bgmi.log`\n\n\n===================\nUninstall\n===================\nScheduled task will not be delete automatically, you will have to remove them manually.\n\n\\*nix:\n    remove them from your crontab\n\nwindows:\n\n.. code-block:: bash\n\n \u00a0 \u00a0 schtasks /Delete /TN 'bgmi updater'\n\n=======\nLicense\n=======\nThe MIT License (MIT)\n\nCopyright (c) 2017 BGmi Developer Team (https://github.com/BGmi)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/bgmi.svg\n   :target: https://pypi.python.org/pypi/bgmi\n\n.. |travis| image:: https://travis-ci.org/BGmi/BGmi.svg?branch=master\n   :target: https://travis-ci.org/BGmi/BGmi\n\n.. |coverage| image:: https://codecov.io/gh/BGmi/BGmi/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/BGmi/BGmi\n\n.. |license| image:: https://img.shields.io/badge/License-MIT-blue.svg\n   :target: https://github.com/BGmi/BGmi/blob/master/LICENSE\n\n.. |pypistats| image::  https://img.shields.io/pypi/dm/bgmi.svg\n   :target: https://pypi.python.org/pypi/bgmi", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/BGmi/BGmi/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BGmi/BGmi", "keywords": "bangumi,bgmi,feed", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "bgmi", "package_url": "https://pypi.org/project/bgmi/", "platform": "", "project_url": "https://pypi.org/project/bgmi/", "project_urls": {"Download": "https://github.com/BGmi/BGmi/tarball/master", "Homepage": "https://github.com/BGmi/BGmi"}, "release_url": "https://pypi.org/project/bgmi/2.1.3/", "requires_dist": null, "requires_python": "", "summary": "BGmi is a cli tool for subscribed bangumi.", "version": "2.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>BGmi is a cli tool for subscribed bangumi.</p>\n<p><a href=\"./README.cn.md\" rel=\"nofollow\">\u4e2d\u6587\u8bf4\u660e</a></p>\n<p><a href=\"https://pypi.python.org/pypi/bgmi\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9faba8964a20064f75c4d75eae09ee42d96f3234/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f62676d692e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/bgmi\" rel=\"nofollow\"><img alt=\"pypistats\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41fd3b187106791bf9155961cd743d7791998af1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f62676d692e737667\"></a>\n<a href=\"https://travis-ci.org/BGmi/BGmi\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f74c95b09af2c3b310cc73b193c0c803925aebe/68747470733a2f2f7472617669732d63692e6f72672f42476d692f42476d692e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/BGmi/BGmi\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/054b6611c48392287b6bd59d2d63873efe1d67eb/68747470733a2f2f636f6465636f762e696f2f67682f42476d692f42476d692f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://github.com/BGmi/BGmi/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a></p>\n<div id=\"todo\">\n<h2>TODO</h2>\n</div>\n<div id=\"update-log\">\n<h2>Update Log</h2>\n<ul>\n<li>remove python 3.4 support as it has reached its end-of-life</li>\n<li>The BGmi version you saw will be the last version that support Python2.</li>\n<li>Transmission rpc authentication configuration</li>\n<li>New download delegate <a href=\"https://www.deluge-torrent.org/\" rel=\"nofollow\">deluge-rpc</a></li>\n<li>You can filter search results by min and max episode</li>\n</ul>\n</div>\n<div id=\"feature\">\n<h2>Feature</h2>\n<ul>\n<li>Multi data sources supported: <a href=\"https://bangumi.moe\" rel=\"nofollow\">bangumi_moe</a>, <a href=\"https://mikanani.me\" rel=\"nofollow\">mikan_project</a> or <a href=\"https://share.dmhy.org/\" rel=\"nofollow\">dmhy</a></li>\n<li>Use aria2, transmission or xunlei-lixian to download bangumi</li>\n<li>Web interface to manage bangumi with HTTP API</li>\n<li>Play bangumi online with danmaku</li>\n<li>RSS feed for uTorrent, ICS calendar for mobile devices</li>\n<li>Bangumi Script: Write your own bangumi parser!</li>\n<li>Bangumi calendar / episode information</li>\n<li>Keyword, subtitle group, regular expression filters for download bangumi</li>\n<li>Windows, Linux and Router system supported, BGmi everywhere</li>\n</ul>\n<img alt=\"BGmi\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d2801e672d5413724d7c344e9d08b08d4fa2e57/2e2f696d616765732f62676d695f636c692e706e673f7261773d74727565\">\n<img alt=\"BGmi HTTP Service\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84c1549906dbcf13b16a345a4fff381777658b8a/2e2f696d616765732f62676d695f687474702e706e673f7261773d74727565\">\n<img alt=\"BGmi HTTP Service\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69d9b46cb5c5a4964d60852dffb28c6051361596/2e2f696d616765732f62676d695f706c617965722e706e673f7261773d74727565\">\n<img alt=\"BGmi HTTP Service\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/257da9894d81ad96da4a596485da609e85b4a8c3/2e2f696d616765732f62676d695f61646d696e2e706e673f7261773d74727565\">\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>For <strong>Mac OS X / Linux / Windows</strong>:</p>\n<pre>git clone https://github.com/BGmi/BGmi\n<span class=\"nb\">cd</span> BGmi\npython setup.py install\n</pre>\n<p>Or use pip:</p>\n<pre>pip install bgmi\n</pre>\n<p>Init BGmi database and install BGmi web interface:</p>\n<pre>bgmi install\n</pre>\n</div>\n<div id=\"upgrade\">\n<h2>Upgrade</h2>\n<pre>pip install bgmi -U\nbgmi upgrade\n</pre>\n<p>Make sure to run <code>bgmi upgrade</code> after you upgrade your bgmi</p>\n</div>\n<div id=\"docker\">\n<h2>Docker</h2>\n<p>Build Docker:</p>\n<pre>git clone https://github.com/BGmi/BGmi\n<span class=\"nb\">cd</span> BGmi\ndocker build -t bgmi .\ndocker run -p127.0.0.1:8888:80 -p6800:6800 -d -v <span class=\"nv\">$HOME</span>/.bgmi:<span class=\"nv\">$HOME</span>/.bgmi bgmi\n</pre>\n<p>You can use bgmi command at host to add / remove bangumi, or get into the docker container to manage bangumi.</p>\n<p>Or just:</p>\n<pre>docker pull ricterz/bgmi\ndocker run -p127.0.0.1:8888:80 -p6800:6800 -d -v <span class=\"nv\">$HOME</span>/.bgmi:<span class=\"nv\">$HOME</span>/.bgmi ricterz/bgmi\n</pre>\n<p>Configure BGmi docker:</p>\n<pre><span class=\"c1\"># bgmi config ARIA2_RPC_TOKEN token:TOKEN_OF_ARIA2_RPC\n# docker exec -it &lt;CONTAINER ID&gt; ln -s ~/.bgmi/ /bgmi\n# docker exec -it &lt;CONTAINER ID&gt; bash -c 'echo rpc-secret=TOKEN_OF_ARIA2_RPC &gt;&gt; /root/aria2c.conf'\n# docker exec -it &lt;CONTAINER ID&gt; supervisorctl\n</span>supervisor&gt; restart bgmi:aria2c\nsupervisor&gt; quit\n</pre>\n</div>\n<div id=\"usage-of-bgmi\">\n<h2>Usage of bgmi</h2>\n<p>Cli completion(bash and zsh. Shell was detected from your env $SHELL)</p>\n<pre><span class=\"nb\">eval</span> <span class=\"s2\">\"</span><span class=\"k\">$(</span>bgmi <span class=\"nb\">complete</span><span class=\"k\">)</span><span class=\"s2\">\"</span>\n</pre>\n<p>Setup custom BGMI_PATH:</p>\n<pre><span class=\"nv\">BGMI_PATH</span><span class=\"o\">=</span>/bgmi bgmi -h\n</pre>\n<p>Or add this code to your .bashrc file:</p>\n<pre><span class=\"nb\">alias</span> <span class=\"nv\">bgmi</span><span class=\"o\">=</span><span class=\"s1\">'BGMI_PATH=/tmp bgmi'</span>\n</pre>\n<p>Supported data source:</p>\n<ul>\n<li><a href=\"https://bangumi.moe\" rel=\"nofollow\">bangumi_moe(default)</a></li>\n<li><a href=\"https://mikanani.me\" rel=\"nofollow\">mikan_project_</a></li>\n<li><a href=\"https://share.dmhy.org/\" rel=\"nofollow\">dmhy_</a></li>\n</ul>\n<p>Change data source:</p>\n<p><strong>All bangumi in database will be deleted when changing data source!</strong> but scripts won\u2019t be affected</p>\n<p>video files will still store on the disk, but won\u2019t be shown on website.</p>\n<pre>bgmi <span class=\"nb\">source</span> mikan_project\n</pre>\n<p>Show bangumi calendar:</p>\n<pre>bgmi cal\n</pre>\n<p>Subscribe bangumi:</p>\n<pre>bgmi add <span class=\"s2\">\"Re:CREATORS\"</span> <span class=\"s2\">\"\u590f\u76ee\u53cb\u4eba\u5e10 \u9646\"</span> <span class=\"s2\">\"\u8fdb\u51fb\u7684\u5de8\u4eba season 2\"</span>\nbgmi add <span class=\"s2\">\"\u6a31\u82b1\u4efb\u52a1\"</span> --episode <span class=\"m\">0</span>\n</pre>\n<p>Unsubscribe bangumi:</p>\n<pre>bgmi delete --name <span class=\"s2\">\"Re:CREATORS\"</span>\n</pre>\n<p>Update bangumi database which locates at ~/.bgmi/bangumi.db acquiescently:</p>\n<pre>bgmi update --download\nbgmi update <span class=\"s2\">\"\u4ece\u96f6\u5f00\u59cb\u7684\u9b54\u6cd5\u4e66\"</span> --download <span class=\"m\">2</span> <span class=\"m\">3</span>\nbgmi update <span class=\"s2\">\"\u65f6\u949f\u673a\u5173\u4e4b\u661f\"</span> --download\n</pre>\n<p>Set up the bangumi subtitle group filter and fetch entries:</p>\n<pre>bgmi list\nbgmi fetch <span class=\"s2\">\"Re:CREATORS\"</span>\nbgmi filter <span class=\"s2\">\"Re:CREATORS\"</span> --subtitle <span class=\"s2\">\"DHR\u52d5\u7814\u5b57\u5e55\u7d44,\u8c4c\u8c46\u5b57\u5e55\u7ec4\"</span> --include 720P --exclude BIG5\nbgmi fetch <span class=\"s2\">\"Re:CREATORS\"</span>\n<span class=\"c1\"># remove subtitle, include and exclude keyword filter and add regex filter\n</span>bgmi filter <span class=\"s2\">\"Re:CREATORS\"</span> --subtitle <span class=\"s2\">\"\"</span> --include <span class=\"s2\">\"\"</span> --exclude <span class=\"s2\">\"\"</span> --regex\nbgmi filter <span class=\"s2\">\"Re:CREATORS\"</span> --regex <span class=\"s2\">\"(DHR\u52d5\u7814\u5b57\u5e55\u7d44|\u8c4c\u8c46\u5b57\u5e55\u7ec4).*(720P)\"</span>\nbgmi fetch <span class=\"s2\">\"Re:CREATORS\"</span>\n</pre>\n<p>Search bangumi and download:</p>\n<pre>bgmi search <span class=\"s1\">'\u4e3a\u7f8e\u597d\u7684\u4e16\u754c\u732e\u4e0a\u795d\u798f\uff01'</span> --regex-filter <span class=\"s1\">'.*\u52a8\u6f2b\u56fd\u5b57\u5e55\u7ec4.*\u4e3a\u7f8e\u597d\u7684\u4e16\u754c\u732e\u4e0a\u795d\u798f\uff01].*720P.*'</span>\n<span class=\"c1\"># download\n</span>bgmi search <span class=\"s1\">'\u4e3a\u7f8e\u597d\u7684\u4e16\u754c\u732e\u4e0a\u795d\u798f\uff01'</span> --regex-filter <span class=\"s1\">'.*\u5408\u96c6.*'</span> --download\n</pre>\n<p>Modify bangumi episode:</p>\n<pre>bgmi list\nbgmi mark <span class=\"s2\">\"Re:CREATORS\"</span> <span class=\"m\">1</span>\n</pre>\n<p>Manage download items:</p>\n<pre>bgmi download --list\nbgmi download --list --status <span class=\"m\">0</span>\nbgmi download --mark <span class=\"m\">1</span> --status <span class=\"m\">2</span>\n</pre>\n<p>Status code:</p>\n<ul>\n<li>0 - Not downloaded items</li>\n<li>1 - Downloading items</li>\n<li>2 - Downloaded items</li>\n</ul>\n<p>Show BGmi configure and modify it:</p>\n<pre>bgmi config\nbgmi config ARIA2_RPC_TOKEN <span class=\"s1\">'token:token233'</span>\n</pre>\n<p>Fields of configure file:</p>\n<p>BGmi configure:</p>\n<ul>\n<li><code>BANGUMI_MOE_URL</code>: url of bangumi.moe mirror</li>\n<li><code>BGMI_SAVE_PATH</code>: bangumi saving path</li>\n<li><code>DOWNLOAD_DELEGATE</code>: the ways of downloading bangumi (aria2-rpc, transmission-rpc, xunlei)</li>\n<li><code>MAX_PAGE</code>: max page for fetching bangumi information</li>\n<li><code>BGMI_TMP_PATH</code>: just a temporary path</li>\n<li><code>DANMAKU_API_URL</code>: url of danmaku api</li>\n<li><code>LANG</code>: language</li>\n</ul>\n<p>Aria2-rpc configure:</p>\n<ul>\n<li><code>ARIA2_RPC_URL</code>: aria2c daemon RPC url, not jsonrpc url.(\u201c<a href=\"http://localhost:6800/rpc\" rel=\"nofollow\">http://localhost:6800/rpc</a>\u201d for localhost)</li>\n<li><code>ARIA2_RPC_TOKEN</code>: aria2c daemon RPC token(\u201ctoken:\u201d for no token)</li>\n</ul>\n<p>Xunlei configure:</p>\n<p>XunleiLixian is deprecated, please choose aria2-rpc or transmission-rpc.</p>\n<ul>\n<li><code>XUNLEI_LX_PATH</code>: path of xunlei-lixian binary</li>\n</ul>\n<p>Transmission-rpc configure:</p>\n<ul>\n<li><code>TRANSMISSION_RPC_URL</code>: transmission rpc host</li>\n<li><code>TRANSMISSION_RPC_PORT</code>: transmission rpc port</li>\n<li><code>TRANSMISSION_RPC_USERNAME</code>: transmission rpc username (leave it default if you don\u2019t set rpc authentication)</li>\n<li><code>TRANSMISSION_RPC_PASSWORD</code>: transmission rpc password (leave it default if you don\u2019t set rpc authentication)</li>\n</ul>\n<p>Deluge-rpc configure:</p>\n<ul>\n<li><code>DELUGE_RPC_URL</code>: deluge rpc url</li>\n<li><code>DELUGE_RPC_PASSWORD</code>: deluge rpc password</li>\n</ul>\n</div>\n<div id=\"usage-of-bgmi-http\">\n<h2>Usage of bgmi_http</h2>\n<p>Download all bangumi cover:</p>\n<pre>bgmi cal --download-cover\n</pre>\n<p>Download frontend static files(you may have done it before):</p>\n<pre>bgmi install\n</pre>\n<p>Start BGmi HTTP Service bind on <code>0.0.0.0:8888</code>:</p>\n<pre>bgmi_http --port<span class=\"o\">=</span><span class=\"m\">8888</span> --address<span class=\"o\">=</span><span class=\"m\">0</span>.0.0.0\n</pre>\n<div id=\"use-bgmi-http-on-windows\">\n<h3>Use bgmi_http on Windows</h3>\n<p>Just start your bgmi_http and open <a href=\"http://localhost:8888/\" rel=\"nofollow\">http://localhost:8888/</a> in your browser.</p>\n<p>Consider most people won\u2019t use Nginx on Windows, bgmi_http use tornado.web.StaticFileHandler to serve static files(frontend, bangumi covers, bangumi files) without Nginx.</p>\n</div>\n<div id=\"use-bgmi-http-on-linux\">\n<h3>Use bgmi_http on Linux</h3>\n<p>Generate Nginx config</p>\n<pre>bgmi gen nginx.conf --server-name bgmi.whatever.com &gt; bgmi.whatever.com\n</pre>\n<p>Or write your config file manually.</p>\n<pre>server <span class=\"o\">{</span>\n    listen <span class=\"m\">80</span><span class=\"p\">;</span>\n    server_name bgmi<span class=\"p\">;</span>\n\n    root /path/to/bgmi<span class=\"p\">;</span>\n    autoindex on<span class=\"p\">;</span>\n    charset utf-8<span class=\"p\">;</span>\n\n    location /bangumi <span class=\"o\">{</span>\n        <span class=\"c1\"># ~/.bgmi/bangumi\n</span>        <span class=\"nb\">alias</span> /path/to/bangumi<span class=\"p\">;</span>\n    <span class=\"o\">}</span>\n\n    location /api <span class=\"o\">{</span>\n        proxy_pass http://127.0.0.1:8888<span class=\"p\">;</span>\n        <span class=\"c1\"># Requests to api/update may take more than 60s\n</span>        proxy_connect_timeout 500s<span class=\"p\">;</span>\n        proxy_read_timeout 500s<span class=\"p\">;</span>\n        proxy_send_timeout 500s<span class=\"p\">;</span>\n    <span class=\"o\">}</span>\n\n    location /resource <span class=\"o\">{</span>\n        proxy_pass http://127.0.0.1:8888<span class=\"p\">;</span>\n    <span class=\"o\">}</span>\n\n    location / <span class=\"o\">{</span>\n        <span class=\"c1\"># ~/.bgmi/front_static/;\n</span>        <span class=\"nb\">alias</span> /path/to/front_static/<span class=\"p\">;</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</pre>\n<p>Of cause you can use <a href=\"https://github.com/binux/yaaw/\" rel=\"nofollow\">yaaw</a> to manage download items if you use aria2c to download bangumi.</p>\n<pre>...\nlocation /yaaw <span class=\"o\">{</span>\n    <span class=\"nb\">alias</span> /path/to/yaaw<span class=\"p\">;</span>\n<span class=\"o\">}</span>\n\nlocation /jsonrpc <span class=\"o\">{</span>\n    <span class=\"c1\"># aria2c rpc\n</span>    proxy_pass http://127.0.0.1:6800<span class=\"p\">;</span>\n<span class=\"o\">}</span>\n...\n</pre>\n<p>Example file: <a href=\"https://github.com/BGmi/BGmi/blob/dev/bgmi.conf\" rel=\"nofollow\">bgmi.conf</a></p>\n</div>\n<div id=\"macos-launchctl-service-controller\">\n<h3>macOS launchctl service controller</h3>\n<p>see <a href=\"https://github.com/BGmi/BGmi/pull/77\" rel=\"nofollow\">issue #77</a></p>\n<p><a href=\"https://github.com/BGmi/BGmi/blob/master/bgmi/others/me.ricterz.bgmi.plist\" rel=\"nofollow\">me.ricterz.bgmi.plist</a></p>\n</div>\n</div>\n<div id=\"dplayer-and-danmaku\">\n<h2>DPlayer and Danmaku</h2>\n<p>BGmi use <a href=\"https://github.com/DIYgod/DPlayer\" rel=\"nofollow\">DPlayer</a> to play bangumi.</p>\n<p>First, setup nginx to access bangumi files.\nSecond, choose one danmaku backend at <a href=\"https://github.com/DIYgod/DPlayer#related-projects\" rel=\"nofollow\">DPlayer#related-projects</a>.</p>\n<p>Use <code>bgmi config</code> to setup the url of danmaku api.</p>\n<pre>bgmi config DANMAKU_API_URL https://api.prprpr.me/dplayer/ <span class=\"c1\"># This api is provided by dplayer official</span>\n</pre>\n<p>\u2026restart your <code>bgmi_http</code> and enjoy :D</p>\n</div>\n<div id=\"bangumi-script\">\n<h2>Bangumi Script</h2>\n<p>Bangumi Script is a script which you can write the bangumi parser own.\nBGmi will load the script and call the method you write before the native functionality.</p>\n<p>Bangumi Script Runner will catch the data you returned, update the database, and download the bangumi.\nYou only just write the parser and return the data.</p>\n<p>Bangumi Script is located at <code>BGMI_PATH/script</code>, inherited <code>ScriptBase</code> class. There is an example:</p>\n<pre><span class=\"c1\"># coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">urllib</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">bgmi.utils</span> <span class=\"kn\">import</span> <span class=\"n\">parse_episode</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bgmi.script</span> <span class=\"kn\">import</span> <span class=\"n\">ScriptBase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bgmi.utils</span> <span class=\"kn\">import</span> <span class=\"n\">print_error</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bgmi.config</span> <span class=\"kn\">import</span> <span class=\"n\">IS_PYTHON3</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">IS_PYTHON3</span><span class=\"p\">:</span>\n    <span class=\"n\">unquote</span> <span class=\"o\">=</span> <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"n\">unquote</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">unquote</span> <span class=\"o\">=</span> <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">unquote</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Script</span><span class=\"p\">(</span><span class=\"n\">ScriptBase</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># \u5b9a\u4e49 Model, \u6b64\u5904 Model \u4e3a\u663e\u793a\u5728 BGmi HTTP \u4ee5\u53ca\u5176\u4ed6\u5730\u65b9\u7684\u540d\u79f0\u3001\u5c01\u9762\u53ca\u5176\u5b83\u4fe1\u606f</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Model</span><span class=\"p\">(</span><span class=\"n\">ScriptBase</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n        <span class=\"n\">bangumi_name</span> <span class=\"o\">=</span> <span class=\"s1\">'\u731c\u8c1c\u738b(BGmi Script)'</span> <span class=\"c1\"># \u540d\u79f0, \u968f\u610f\u586b\u5199\u5373\u53ef</span>\n        <span class=\"n\">cover</span> <span class=\"o\">=</span> <span class=\"s1\">'COVER URL'</span> <span class=\"c1\"># \u5c01\u9762\u7684 URL</span>\n        <span class=\"n\">update_time</span> <span class=\"o\">=</span> <span class=\"s1\">'Tue'</span> <span class=\"c1\"># \u6bcf\u5468\u51e0\u66f4\u65b0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_download_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Get the download url, and return a dict of episode and the url.\n        Download url also can be magnet link.\n        For example:\n        ```\n            {\n                1: 'http://example.com/Bangumi/1/1.mp4'\n                2: 'http://example.com/Bangumi/1/2.mp4'\n                3: 'http://example.com/Bangumi/1/3.mp4'\n            }\n        ```\n        The keys `1`, `2`, `3` is the episode, the value is the url of bangumi.\n        :return: dict\n        \"\"\"</span>\n        <span class=\"c1\"># fetch and return dict</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.kirikiri.tv/?m=vod-play-id-4414-src-1-num-2.html'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"s2\">\"mac_url=unescape\\('(.*)?'\\)\"</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n            <span class=\"n\">print_error</span><span class=\"p\">(</span><span class=\"s1\">'No data found, maybe the script is out-of-date.'</span><span class=\"p\">,</span> <span class=\"n\">exit_</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">unquote</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'[\"</span><span class=\"si\">{}</span><span class=\"s1\">\"]'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%u</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">u'</span><span class=\"p\">)))[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'#'</span><span class=\"p\">):</span>\n            <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'$'</span><span class=\"p\">)</span>\n            <span class=\"c1\"># parse_episode \u4e3a\u5185\u7f6e\u7684\u89e3\u6790\u96c6\u6570\u7684\u65b9\u6cd5, \u53ef\u4ee5\u5e94\u5bf9\u5927\u591a\u6570\u60c5\u51b5\u3002\u5982\u82e5\u4e0d\u53ef\u7528, \u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\u89e3\u6790</span>\n            <span class=\"n\">ret</span><span class=\"p\">[</span><span class=\"n\">parse_episode</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">url</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ret</span>\n</pre>\n<p>Another example:</p>\n<pre><span class=\"c1\"># coding=utf-8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bs4</span> <span class=\"kn\">import</span> <span class=\"n\">BeautifulSoup</span> <span class=\"k\">as</span> <span class=\"n\">bs</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">bgmi.utils</span> <span class=\"kn\">import</span> <span class=\"n\">parse_episode</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bgmi.script</span> <span class=\"kn\">import</span> <span class=\"n\">ScriptBase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bgmi.utils</span> <span class=\"kn\">import</span> <span class=\"n\">print_error</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bgmi.config</span> <span class=\"kn\">import</span> <span class=\"n\">IS_PYTHON3</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Script</span><span class=\"p\">(</span><span class=\"n\">ScriptBase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Model</span><span class=\"p\">(</span><span class=\"n\">ScriptBase</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n        <span class=\"n\">bangumi_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Rick and Morty Season 3'</span>\n        <span class=\"n\">cover</span> <span class=\"o\">=</span> <span class=\"s1\">'http://img.itvfans.com/wp-content/uploads/31346.jpg'</span>\n        <span class=\"n\">update_time</span> <span class=\"o\">=</span> <span class=\"s1\">'Mon'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_download_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># fetch and return dict</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.itvfans.com/fenji/313463.html'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span>\n        <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">bs</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"s1\">'lxml'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'31346-3-720p'</span><span class=\"p\">})</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n            <span class=\"n\">print_error</span><span class=\"p\">(</span><span class=\"s1\">'No data found, maybe the script is out-of-date.'</span><span class=\"p\">,</span> <span class=\"n\">exit_</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">match_episode</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s1\">'Rick\\.and\\.Morty\\.S03E(\\d+)\\.720p'</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'magnet'</span><span class=\"p\">}):</span>\n            <span class=\"n\">link</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">'href'</span><span class=\"p\">]</span>\n            <span class=\"n\">episode</span> <span class=\"o\">=</span> <span class=\"n\">match_episode</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"n\">link</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">episode</span><span class=\"p\">:</span>\n                <span class=\"n\">ret</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">episode</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span> <span class=\"o\">=</span> <span class=\"n\">link</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ret</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Script</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get_download_url</span><span class=\"p\">())</span>\n</pre>\n<p>The returned dict as follows.</p>\n<pre><span class=\"o\">{</span>\n    <span class=\"m\">1</span>: <span class=\"s1\">'http://example.com/Bangumi/1/1.mp4'</span>\n    <span class=\"m\">2</span>: <span class=\"s1\">'http://example.com/Bangumi/1/2.mp4'</span>\n    <span class=\"m\">3</span>: <span class=\"s1\">'http://example.com/Bangumi/1/3.mp4'</span>\n<span class=\"o\">}</span>\n</pre>\n<p>The keys <cite>1</cite>, <cite>2</cite>, <cite>3</cite> is the episode, the value is the url of bangumi.</p>\n</div>\n<div id=\"bgmi-data-source\">\n<h2>BGmi Data Source</h2>\n<p>You can easily add your own BGmi data source by extending BGmi website base class and implement all the method.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">DataSource</span><span class=\"p\">(</span><span class=\"n\">bgmi</span><span class=\"o\">.</span><span class=\"n\">website</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseWebsite</span><span class=\"p\">)</span>\n    <span class=\"n\">cover_url</span><span class=\"o\">=</span><span class=\"s1\">''</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">search_by_keyword</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"\n        return a list of dict with at least 4 key: download, name, title, episode\n        example:\n        ```\n            [\n                {\n                    'name':\"\u8def\u4eba\u5973\u4e3b\u7684\u517b\u6210\u65b9\u6cd5\",\n                    'download': 'magnet:?xt=urn:btih:what ever',\n                    'title': \"[\u6f84\u7a7a\u5b66\u56ed] \u8def\u4eba\u5973\u4e3b\u7684\u517b\u6210\u65b9\u6cd5 \u7b2c12\u8bdd MP4 720p  \u5b8c\",\n                    'episode': 12\n                },\n            ]\n\n        :param keyword: search key word\n        :type keyword: str\n        :param count: how many page to fetch from website\n        :type count: int\n\n        :return: list of episode search result\n        :rtype: list[dict]\n        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fetch_bangumi_calendar_and_subtitle_group</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"\n        return a list of all bangumi and a list of all subtitle group\n\n        list of bangumi dict:\n        update time should be one of ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n        example:\n        ```\n            [\n                {\n                    \"status\": 0,\n                    \"subtitle_group\": [\n                        \"123\",\n                        \"456\"\n                    ],\n                    \"name\": \"\u540d\u4fa6\u63a2\u67ef\u5357\",\n                    \"keyword\": \"1234\", #bangumi id\n                    \"update_time\": \"Sat\",\n                    \"cover\": \"data/images/cover1.jpg\"\n                },\n            ]\n        ```\n        when downloading cover images, BGmi will try to get `self.cover_url + bangumi['cover']`\n\n\n        list of subtitle group dict:\n        example:\n        ```\n            [\n                {\n                    'id': '233',\n                    'name': 'bgmi\u5b57\u5e55\u7ec4'\n                }\n            ]\n        ```\n\n\n        :return: list of bangumi, list of subtitile group\n        :rtype: (list[dict], list[dict])\n        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fetch_episode_of_bangumi</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bangumi_id</span><span class=\"p\">,</span> <span class=\"n\">subtitle_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">max_page</span><span class=\"o\">=</span><span class=\"n\">MAX_PAGE</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"\n        get all episode by bangumi id\n        example\n        ```\n            [\n                {\n                    \"download\": \"magnet:?xt=urn:btih:e43b3b6b53dd9fd6af1199e112d3c7ff15cab82c\",\n                    \"subtitle_group\": \"58a9c1c9f5dc363606ab42ec\",\n                    \"title\": \"\u3010\u55b5\u840c\u5976\u8336\u5c4b\u3011\u2605\u4e03\u6708\u65b0\u756a\u2605[\u6765\u81ea\u6df1\u6e0a/Made in Abyss][07][GB][720P]\",\n                    \"episode\": 0,\n                    \"time\": 1503301292\n                },\n            ]\n        ```\n\n        :param bangumi_id: bangumi_id\n        :param subtitle_list: list of subtitle group\n        :type subtitle_list: list\n        :param max_page: how many page you want to crawl if there is no subtitle list\n        :type max_page: int\n        :return: list of bangumi\n        :rtype: list[dict]\n        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n</pre>\n</div>\n<div id=\"debug\">\n<h2>Debug</h2>\n<p>Set env <code>BGMI_LOG</code> to <code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code> for different log level</p>\n<p>log file will locate at <code>{TMP_PATH}/bgmi.log</code></p>\n</div>\n<div id=\"uninstall\">\n<h2>Uninstall</h2>\n<p>Scheduled task will not be delete automatically, you will have to remove them manually.</p>\n<dl>\n<dt>*nix:</dt>\n<dd>remove them from your crontab</dd>\n</dl>\n<p>windows:</p>\n<pre>schtasks /Delete /TN <span class=\"s1\">'bgmi updater'</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The MIT License (MIT)</p>\n<p>Copyright (c) 2017 BGmi Developer Team (<a href=\"https://github.com/BGmi\" rel=\"nofollow\">https://github.com/BGmi</a>)</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \u201cSoftware\u201d), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n</div>\n\n          </div>"}, "last_serial": 6843695, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "4b66029259920c4e7174a0b5123c2533", "sha256": "2431d658cac34b99640ec0cd508c21edab8d1ebe2fb8613681bd2ef104d0b66f"}, "downloads": -1, "filename": "bgmi-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4b66029259920c4e7174a0b5123c2533", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 774147, "upload_time": "2016-10-19T08:03:14", "upload_time_iso_8601": "2016-10-19T08:03:14.534495Z", "url": "https://files.pythonhosted.org/packages/98/24/841cdf219676598fe289d388fbe093e567bd27a0b11ac6d2813f1f791709/bgmi-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "47e610ed0d806a1c116076e8a08e851b", "sha256": "360448d4282824781cf539a813aea407e3abbda6fd16bf34f1b47cd39886ab06"}, "downloads": -1, "filename": "bgmi-1.0.10.tar.gz", "has_sig": false, "md5_digest": "47e610ed0d806a1c116076e8a08e851b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 770239, "upload_time": "2016-11-18T14:30:11", "upload_time_iso_8601": "2016-11-18T14:30:11.449738Z", "url": "https://files.pythonhosted.org/packages/20/a2/590be838b27bd7ba25cc9e4c87abd934080de23f11f709e7ab24e777328a/bgmi-1.0.10.tar.gz", "yanked": false}], "1.0.11": [{"comment_text": "", "digests": {"md5": "bbc7d14f7a5fa0216bd48c326dab3efd", "sha256": "5af6b24d8b9bae4f35a2897ec3604c7c33d343e8fc6f10b54d50534027c35950"}, "downloads": -1, "filename": "bgmi-1.0.11.tar.gz", "has_sig": false, "md5_digest": "bbc7d14f7a5fa0216bd48c326dab3efd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 770364, "upload_time": "2016-11-24T06:40:55", "upload_time_iso_8601": "2016-11-24T06:40:55.126643Z", "url": "https://files.pythonhosted.org/packages/46/93/ee05f104605cf573b8ce6d10130e282d8d6e66bc8a07fa21888c7c242cbc/bgmi-1.0.11.tar.gz", "yanked": false}], "1.0.12": [{"comment_text": "", "digests": {"md5": "a15c9fc8620dec2d76a85c5c83c93dc6", "sha256": "7994c37d285289fa76f8969a69b67779947499ff3937142e7b9afe4932aa5a8c"}, "downloads": -1, "filename": "bgmi-1.0.12.tar.gz", "has_sig": false, "md5_digest": "a15c9fc8620dec2d76a85c5c83c93dc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 770458, "upload_time": "2016-12-04T02:09:10", "upload_time_iso_8601": "2016-12-04T02:09:10.461041Z", "url": "https://files.pythonhosted.org/packages/18/16/7b621905700becfc02d247c0d8261ea44d961118599381d1231becff1fd0/bgmi-1.0.12.tar.gz", "yanked": false}], "1.0.13": [{"comment_text": "", "digests": {"md5": "62275a4843364de949395a3090f0bbec", "sha256": "eb10f6c577a6a31988d68e7688d282d4edd312b5c738dc8b3d1a86f2f145892a"}, "downloads": -1, "filename": "bgmi-1.0.13.tar.gz", "has_sig": false, "md5_digest": "62275a4843364de949395a3090f0bbec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 770505, "upload_time": "2016-12-04T02:08:51", "upload_time_iso_8601": "2016-12-04T02:08:51.593946Z", "url": "https://files.pythonhosted.org/packages/3b/00/167cfecfe6189f2100a33d653f8dbbe87cd9d64fd561e3137bbf49297e03/bgmi-1.0.13.tar.gz", "yanked": false}], "1.0.14": [{"comment_text": "", "digests": {"md5": "e76ddc819f3f43e3895f94179dde9d26", "sha256": "de3239c6edc6bbd59e467490fa933515d2e059990de7431609e4356341f1565e"}, "downloads": -1, "filename": "bgmi-1.0.14.tar.gz", "has_sig": false, "md5_digest": "e76ddc819f3f43e3895f94179dde9d26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 770508, "upload_time": "2016-12-04T02:48:26", "upload_time_iso_8601": "2016-12-04T02:48:26.208566Z", "url": "https://files.pythonhosted.org/packages/cc/40/7367bb9c8c58c34d622ea0784c68683c22510f8141c21f1bd95218ec55a4/bgmi-1.0.14.tar.gz", "yanked": false}], "1.0.15": [{"comment_text": "", "digests": {"md5": "3572574efb3f2d4512376fd126f61f08", "sha256": "fae1bb39c048cec1a781f047aa4451f733e321131d6eff862ccf01c1b8595cca"}, "downloads": -1, "filename": "bgmi-1.0.15.tar.gz", "has_sig": false, "md5_digest": "3572574efb3f2d4512376fd126f61f08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 770608, "upload_time": "2016-12-20T15:37:32", "upload_time_iso_8601": "2016-12-20T15:37:32.963404Z", "url": "https://files.pythonhosted.org/packages/f3/50/f92100b7dce2c36bdc387d1b3f33ee57ac3c36c821b9eaac2ea59d2f9807/bgmi-1.0.15.tar.gz", "yanked": false}], "1.0.16": [{"comment_text": "", "digests": {"md5": "d32442ab596bc1f04b720910cdead4a1", "sha256": "f7bd9fb44ac18cf2e7f7457c8af7e12a2f2930a90ac6e06eb760b13d472b95d5"}, "downloads": -1, "filename": "bgmi-1.0.16.tar.gz", "has_sig": false, "md5_digest": "d32442ab596bc1f04b720910cdead4a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 770648, "upload_time": "2016-12-20T17:24:33", "upload_time_iso_8601": "2016-12-20T17:24:33.082694Z", "url": "https://files.pythonhosted.org/packages/4b/96/1ac9cbd58798ea5d08a7f9e6e6398b0f24e31f7d4bd461900e598ce57712/bgmi-1.0.16.tar.gz", "yanked": false}], "1.0.17": [{"comment_text": "", "digests": {"md5": "9f3176cc1e5ec46aaa8a63dd264ab923", "sha256": "a1f50ec9327b729e94447b0c3e0478eab33a83cb5d6ff644c6cb0e537fae82f5"}, "downloads": -1, "filename": "bgmi-1.0.17.tar.gz", "has_sig": false, "md5_digest": "9f3176cc1e5ec46aaa8a63dd264ab923", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 770737, "upload_time": "2017-01-03T09:23:28", "upload_time_iso_8601": "2017-01-03T09:23:28.002108Z", "url": "https://files.pythonhosted.org/packages/83/b1/a3e0b3aa93ab8fa75cf30ce2585480638ee77c3c2fb2b89d63de010f07b1/bgmi-1.0.17.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "edc6da06f296f6d5634283866402f56a", "sha256": "4422f7a779978162c4677b95affb43ac277d17f9481e36720ab344bd072eac95"}, "downloads": -1, "filename": "bgmi-1.0.2.tar.gz", "has_sig": false, "md5_digest": "edc6da06f296f6d5634283866402f56a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 774730, "upload_time": "2016-10-21T01:07:24", "upload_time_iso_8601": "2016-10-21T01:07:24.719459Z", "url": "https://files.pythonhosted.org/packages/36/6f/6605361649d2a57d5cdd40d29d48738b178815b07ec7dcfaa7bbb4dbc0b3/bgmi-1.0.2.tar.gz", "yanked": false}], "1.0.20": [{"comment_text": "", "digests": {"md5": "7d77f6af0e80557fff3ae3ad16b5dc33", "sha256": "71b96ba399ae409c10ed85b72c032dddc1aa4313f89d90a3576fcb6c138231ae"}, "downloads": -1, "filename": "bgmi-1.0.20.tar.gz", "has_sig": false, "md5_digest": "7d77f6af0e80557fff3ae3ad16b5dc33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 771599, "upload_time": "2017-01-19T09:25:05", "upload_time_iso_8601": "2017-01-19T09:25:05.472642Z", "url": "https://files.pythonhosted.org/packages/f8/88/b5371c39597b905b434cc03fdc5a75892cecc58e21e3d2c3b102716b6113/bgmi-1.0.20.tar.gz", "yanked": false}], "1.0.21": [{"comment_text": "", "digests": {"md5": "9ba144ac2f9859bdb9e939562eb18089", "sha256": "f92a424b957456d32649d8200528e9be07ef66cdfdb09b107ecf05fb04caa8d1"}, "downloads": -1, "filename": "bgmi-1.0.21.tar.gz", "has_sig": false, "md5_digest": "9ba144ac2f9859bdb9e939562eb18089", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 771601, "upload_time": "2017-01-22T16:23:35", "upload_time_iso_8601": "2017-01-22T16:23:35.653637Z", "url": "https://files.pythonhosted.org/packages/24/58/f7f1789e6ae85b91cf0d832cf9afd79f1efa325f9d07cb61d65d1d005c80/bgmi-1.0.21.tar.gz", "yanked": false}], "1.0.22": [{"comment_text": "", "digests": {"md5": "f997de367ba5af9ea55fcd26d59057b8", "sha256": "3cb2656eaa9536bad13b9a7e9818e1f341fef353f6404724d80499c07175b03a"}, "downloads": -1, "filename": "bgmi-1.0.22.tar.gz", "has_sig": false, "md5_digest": "f997de367ba5af9ea55fcd26d59057b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 771686, "upload_time": "2017-01-23T04:30:43", "upload_time_iso_8601": "2017-01-23T04:30:43.684678Z", "url": "https://files.pythonhosted.org/packages/8b/f6/899162d11c7c2c0ae8e7cebe1f31d8320bae9b6e5d02bb8dff47ea087b29/bgmi-1.0.22.tar.gz", "yanked": false}], "1.0.23": [{"comment_text": "", "digests": {"md5": "e2825bb462dd7d7d95a62cdaa0316ca5", "sha256": "7b61eed3be1e80c343847c2efcd7dc0f8e00322330e32b6ee33cef0d543cb0fb"}, "downloads": -1, "filename": "bgmi-1.0.23.tar.gz", "has_sig": false, "md5_digest": "e2825bb462dd7d7d95a62cdaa0316ca5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 771685, "upload_time": "2017-01-25T08:14:48", "upload_time_iso_8601": "2017-01-25T08:14:48.255304Z", "url": "https://files.pythonhosted.org/packages/96/e6/10280d4f52b345a4fea00ed4253edc12efd472182b7f4282267b406ecf15/bgmi-1.0.23.tar.gz", "yanked": false}], "1.0.24": [{"comment_text": "", "digests": {"md5": "1d5e9db90a43a0fe93b4764ae0029033", "sha256": "64357ceeabe31bf357ed9133b51f76aee09b8b0c0bf4a59fa490f36a0682b122"}, "downloads": -1, "filename": "bgmi-1.0.24.tar.gz", "has_sig": false, "md5_digest": "1d5e9db90a43a0fe93b4764ae0029033", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 771831, "upload_time": "2017-02-11T06:52:02", "upload_time_iso_8601": "2017-02-11T06:52:02.475494Z", "url": "https://files.pythonhosted.org/packages/be/df/43af9b5c2314a5827e4e7a635526175f3ed2c1d83f3f52934cb42327ea7a/bgmi-1.0.24.tar.gz", "yanked": false}], "1.0.25": [{"comment_text": "", "digests": {"md5": "05b4fec3bf09727155f8ef7f925777fc", "sha256": "7fdbb3dad5fbbc195ba1d2e51fcde341c746218289eacc15b1649c4ec9d3f00d"}, "downloads": -1, "filename": "bgmi-1.0.25.tar.gz", "has_sig": false, "md5_digest": "05b4fec3bf09727155f8ef7f925777fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 772818, "upload_time": "2017-02-11T14:57:12", "upload_time_iso_8601": "2017-02-11T14:57:12.790087Z", "url": "https://files.pythonhosted.org/packages/a4/d3/4af3719e7e5e296d6a8c802677bb5e400dbe7c137742f461c4e5795c4236/bgmi-1.0.25.tar.gz", "yanked": false}], "1.0.26": [{"comment_text": "", "digests": {"md5": "5c2c93fe481be67c65b75341b046d77d", "sha256": "255b43ac5bafc3abe41fe47411cb615ff05ec530742cf2a729ad9c5c7e92172c"}, "downloads": -1, "filename": "bgmi-1.0.26.tar.gz", "has_sig": false, "md5_digest": "5c2c93fe481be67c65b75341b046d77d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 772838, "upload_time": "2017-02-17T02:54:25", "upload_time_iso_8601": "2017-02-17T02:54:25.657194Z", "url": "https://files.pythonhosted.org/packages/c3/10/ade97c867e913defc11a1123f43baa67a3891fcfbcf8b9db10d6cfb5caf1/bgmi-1.0.26.tar.gz", "yanked": false}], "1.0.28": [], "1.0.29": [{"comment_text": "", "digests": {"md5": "cb8b0b31f789c6f7d1afcc68a43c73cf", "sha256": "c55a7db029a6a21f25cede84847a2b18df93b052d48fd0bf827bacd7f2b647fc"}, "downloads": -1, "filename": "bgmi-1.0.29.tar.gz", "has_sig": false, "md5_digest": "cb8b0b31f789c6f7d1afcc68a43c73cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 648588, "upload_time": "2017-03-09T01:14:45", "upload_time_iso_8601": "2017-03-09T01:14:45.482350Z", "url": "https://files.pythonhosted.org/packages/d2/f0/2fddabdf5e068ae38c2eae9e89687c928f90ed0c1b6ccb77de7ed7f03eaa/bgmi-1.0.29.tar.gz", "yanked": false}], "1.0.3": [], "1.0.4": [{"comment_text": "", "digests": {"md5": "b2b410a1208607a570b1661c4d67f507", "sha256": "fb7228944272c3897b046bbd09a48b93b364e7227f4be50f3cf59b782d141448"}, "downloads": -1, "filename": "bgmi-1.0.4.tar.gz", "has_sig": false, "md5_digest": "b2b410a1208607a570b1661c4d67f507", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 774771, "upload_time": "2016-10-23T14:13:09", "upload_time_iso_8601": "2016-10-23T14:13:09.679276Z", "url": "https://files.pythonhosted.org/packages/7e/fd/29b6c5e50f910a2181bb7ccf8ecd3b3a71580561e0ad18901bf2fa8c3843/bgmi-1.0.4.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "eb4cac563ad24b85754b7abddf89c631", "sha256": "56ea06a1931bc5ed4cfa9c1b3b02a63dfd78ac7726758eb8f0ecb64992445f43"}, "downloads": -1, "filename": "bgmi-1.0.7.tar.gz", "has_sig": false, "md5_digest": "eb4cac563ad24b85754b7abddf89c631", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 770228, "upload_time": "2016-11-02T06:13:06", "upload_time_iso_8601": "2016-11-02T06:13:06.344750Z", "url": "https://files.pythonhosted.org/packages/bc/87/7c0def2988b6ddb700c12a42864b3aca9922a48ae343ecc5b64cc343dd71/bgmi-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "09ef5c2fa0468b5700be3ae86122d96c", "sha256": "cc9fa378c10d9dac8523e8ca37f16331c769e2e5ddb07def2cb76c88ef01ff30"}, "downloads": -1, "filename": "bgmi-1.0.8.tar.gz", "has_sig": false, "md5_digest": "09ef5c2fa0468b5700be3ae86122d96c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 770246, "upload_time": "2016-11-17T05:13:34", "upload_time_iso_8601": "2016-11-17T05:13:34.835851Z", "url": "https://files.pythonhosted.org/packages/b5/e3/d2df3151020b8efc2ba3811b7da8074570845c6cfdbd935f4a7257bc3774/bgmi-1.0.8.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "24bfb35596623e8b1010374e43940a72", "sha256": "29089de96439445b19e3e0233441c0154d23d67beaf7012f52c9c8d7f2457664"}, "downloads": -1, "filename": "bgmi-1.2.0.tar.gz", "has_sig": false, "md5_digest": "24bfb35596623e8b1010374e43940a72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 592297, "upload_time": "2017-04-11T01:29:59", "upload_time_iso_8601": "2017-04-11T01:29:59.947578Z", "url": "https://files.pythonhosted.org/packages/0a/7c/1272942a8b96f74ca22e149e6f7c54c6e7d2a3ca76df2a20c50a53a33fd9/bgmi-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "730f798d7371ff49c4db97c20c41de83", "sha256": "a2af4c1361bbec19df5cd8107938f63a38e6df7d277e902edbbf9e9165794266"}, "downloads": -1, "filename": "bgmi-1.2.1.tar.gz", "has_sig": false, "md5_digest": "730f798d7371ff49c4db97c20c41de83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 591583, "upload_time": "2017-04-25T12:08:54", "upload_time_iso_8601": "2017-04-25T12:08:54.753423Z", "url": "https://files.pythonhosted.org/packages/a9/c4/966d8e0fc12325f72751e0d9538257547df6a4beef6a243035c1510c25da/bgmi-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "5adfe8b85b10c659d01fca93bfbe040b", "sha256": "370992ac430a8f4b5117819bd867c132baddaffc3bf4acae6cfea026bb1b06d4"}, "downloads": -1, "filename": "bgmi-1.2.2.tar.gz", "has_sig": false, "md5_digest": "5adfe8b85b10c659d01fca93bfbe040b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 592282, "upload_time": "2017-05-30T09:19:12", "upload_time_iso_8601": "2017-05-30T09:19:12.119919Z", "url": "https://files.pythonhosted.org/packages/78/9b/dda3555f670db3d6377b4e12555f2d6d8f4af73b4a176dac8157a7a5f249/bgmi-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "532fe8772a08b9beea19b237f10adc5b", "sha256": "64e979bac38164313c831c7570a5f380f675adc7bea8fda4d95bfc2190b26c94"}, "downloads": -1, "filename": "bgmi-1.2.3.tar.gz", "has_sig": false, "md5_digest": "532fe8772a08b9beea19b237f10adc5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 592293, "upload_time": "2017-05-31T02:29:52", "upload_time_iso_8601": "2017-05-31T02:29:52.338894Z", "url": "https://files.pythonhosted.org/packages/cd/f2/677abb73d6036cd718687fbccee46cef97b94fd4f6bc312aa0bd103e0fea/bgmi-1.2.3.tar.gz", "yanked": false}], "1.3.0b0": [], "1.3.0b1": [{"comment_text": "", "digests": {"md5": "8cb15555a18fd109601239c31347c8b8", "sha256": "ecc705603636df83a0eb69114a13960140d502001eaeee806a008a4b813de54e"}, "downloads": -1, "filename": "bgmi-1.3.0b1.tar.gz", "has_sig": false, "md5_digest": "8cb15555a18fd109601239c31347c8b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 594270, "upload_time": "2017-06-14T12:19:22", "upload_time_iso_8601": "2017-06-14T12:19:22.123725Z", "url": "https://files.pythonhosted.org/packages/34/45/e28642de4d957cebf417dee761827862555fd0c28516a966315697eec67e/bgmi-1.3.0b1.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "ea06a696546bde41692b67d0ddf4c4f8", "sha256": "5b90a4397b097ba61e6df1f56f1a8c2ba016dcf1e048c1b7e529f496c744e6c9"}, "downloads": -1, "filename": "bgmi-1.3.1.tar.gz", "has_sig": false, "md5_digest": "ea06a696546bde41692b67d0ddf4c4f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 600715, "upload_time": "2017-07-03T15:43:44", "upload_time_iso_8601": "2017-07-03T15:43:44.848496Z", "url": "https://files.pythonhosted.org/packages/4d/d7/d011528062fd76f2555e3bc731cb683b790b4af0f3af6923222945ab17ec/bgmi-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "ac42db9c298f7c2d275711007ef88886", "sha256": "f833fafb40af31f213b71e0d362a4774af3f6a10a25ecda62ece8fcae6f70ddd"}, "downloads": -1, "filename": "bgmi-1.3.2.tar.gz", "has_sig": false, "md5_digest": "ac42db9c298f7c2d275711007ef88886", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 600712, "upload_time": "2017-07-03T16:13:29", "upload_time_iso_8601": "2017-07-03T16:13:29.270815Z", "url": "https://files.pythonhosted.org/packages/16/e8/942b78175aa85837ccbf13d123def6881383517f1475a05337cc51194010/bgmi-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "5521a653ffbb137a8160298d4f2dfa12", "sha256": "b34eae87ca5b6d6d750cd5aa636677ee9af35f01420498e3f793a3e996d0db9f"}, "downloads": -1, "filename": "bgmi-1.3.3.tar.gz", "has_sig": false, "md5_digest": "5521a653ffbb137a8160298d4f2dfa12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 600795, "upload_time": "2017-07-05T07:57:01", "upload_time_iso_8601": "2017-07-05T07:57:01.272485Z", "url": "https://files.pythonhosted.org/packages/21/f6/fc38a2e50a2b633de731ba07a2ae60b588f1368614e3c5fe36768b453c6d/bgmi-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "b48ca8c193aadf2dd314d8b0610ad520", "sha256": "6fe0267fa75dadb5324a468f4d42328c31de98e88f9d875685cc94815cf703d3"}, "downloads": -1, "filename": "bgmi-1.3.4.tar.gz", "has_sig": false, "md5_digest": "b48ca8c193aadf2dd314d8b0610ad520", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 601154, "upload_time": "2017-07-05T14:33:31", "upload_time_iso_8601": "2017-07-05T14:33:31.855028Z", "url": "https://files.pythonhosted.org/packages/83/0e/e40cc2effa185f6db6f4e2aa347caaca7198dcdce372d0b2d1e99869d385/bgmi-1.3.4.tar.gz", "yanked": false}], "1.3.5": [{"comment_text": "", "digests": {"md5": "e62b0d7014ca84cfa238d3db141fe079", "sha256": "48fe06c8d3397ad9637a37fcf664f245abcc1bfa6e623877d0c5d897c2fcce1e"}, "downloads": -1, "filename": "bgmi-1.3.5.tar.gz", "has_sig": false, "md5_digest": "e62b0d7014ca84cfa238d3db141fe079", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 622416, "upload_time": "2017-07-06T13:36:05", "upload_time_iso_8601": "2017-07-06T13:36:05.904295Z", "url": "https://files.pythonhosted.org/packages/8e/ec/1f0d934c093faa0000161291d849a9703a63c0a64838de1087b66f8f8ffb/bgmi-1.3.5.tar.gz", "yanked": false}], "1.3.5b1": [{"comment_text": "", "digests": {"md5": "f1628797448876b0fea36433197a1525", "sha256": "00de2d3268d5f7439b63e27da1899534e3135a11b06d34fd7636086544d61281"}, "downloads": -1, "filename": "bgmi-1.3.5b1.tar.gz", "has_sig": false, "md5_digest": "f1628797448876b0fea36433197a1525", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 601283, "upload_time": "2017-07-06T10:53:53", "upload_time_iso_8601": "2017-07-06T10:53:53.537287Z", "url": "https://files.pythonhosted.org/packages/c1/da/eddc469be3d34cc7995edb34a22aa81448fa435af37117a58371e01ba9a5/bgmi-1.3.5b1.tar.gz", "yanked": false}], "1.3.5b2": [{"comment_text": "", "digests": {"md5": "35aa4880049d36f50b1311dad8441c63", "sha256": "a718f35d6478c7c8f8d44570b9a0b66837de97c577c06739fd1c3959f1a25e96"}, "downloads": -1, "filename": "bgmi-1.3.5b2.tar.gz", "has_sig": false, "md5_digest": "35aa4880049d36f50b1311dad8441c63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 600923, "upload_time": "2017-07-06T11:00:58", "upload_time_iso_8601": "2017-07-06T11:00:58.880781Z", "url": "https://files.pythonhosted.org/packages/96/47/cb78226f7c76c944ae2a7cbb19ac534871a062c8c6f56b799c587668ed69/bgmi-1.3.5b2.tar.gz", "yanked": false}], "1.3.5b3": [{"comment_text": "", "digests": {"md5": "db37496b3aff6dfabf74555c2ed50441", "sha256": "6b37d8be179dfbc66eaad1b78ff091d186872b52f616f9da709fbb3315735d98"}, "downloads": -1, "filename": "bgmi-1.3.5b3.tar.gz", "has_sig": false, "md5_digest": "db37496b3aff6dfabf74555c2ed50441", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 622456, "upload_time": "2017-07-06T11:28:19", "upload_time_iso_8601": "2017-07-06T11:28:19.544153Z", "url": "https://files.pythonhosted.org/packages/16/4a/67a09e325ca8467796a620dcd5038c68f6f228f8e4f20d2596907305c7c5/bgmi-1.3.5b3.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "b08af6e0027bea0e01d2480083a1b4f6", "sha256": "406163133a7c0a99111e8bc4e4835b33f5f3223d43855ef7f41ddcc747329cf3"}, "downloads": -1, "filename": "bgmi-1.4.3.tar.gz", "has_sig": false, "md5_digest": "b08af6e0027bea0e01d2480083a1b4f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 642176, "upload_time": "2017-09-10T09:19:52", "upload_time_iso_8601": "2017-09-10T09:19:52.590686Z", "url": "https://files.pythonhosted.org/packages/b6/ba/1d9631cd9f78039817497309a694a9f8c837126be0765f24ae870d8ed29d/bgmi-1.4.3.tar.gz", "yanked": false}], "1.4.4": [{"comment_text": "", "digests": {"md5": "03ed6dc3ddcbc7f1623bb724f6433242", "sha256": "2a3a2f83f137d3befe0ac5882091182df831f970a2e40e884efc4d944b078373"}, "downloads": -1, "filename": "bgmi-1.4.4.tar.gz", "has_sig": false, "md5_digest": "03ed6dc3ddcbc7f1623bb724f6433242", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 642032, "upload_time": "2017-09-11T01:41:05", "upload_time_iso_8601": "2017-09-11T01:41:05.746516Z", "url": "https://files.pythonhosted.org/packages/bc/78/f1f08516792dbfa0643808af12667b72318b69638897bafdcf3ac8a0e377/bgmi-1.4.4.tar.gz", "yanked": false}], "1.4.5": [{"comment_text": "", "digests": {"md5": "6ec2b2f1cf89dd52bc563d2dbeb361c5", "sha256": "64f390dd5c1c55be614d603ca5e5ea12d4c2034a4ec1bde154c499927943f5a1"}, "downloads": -1, "filename": "bgmi-1.4.5.tar.gz", "has_sig": false, "md5_digest": "6ec2b2f1cf89dd52bc563d2dbeb361c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 642633, "upload_time": "2017-09-11T12:43:21", "upload_time_iso_8601": "2017-09-11T12:43:21.875702Z", "url": "https://files.pythonhosted.org/packages/d5/08/83a880f3556945cf1e4a8954b1a6d09c72f3b0f59889945209cd090443f6/bgmi-1.4.5.tar.gz", "yanked": false}], "1.4.6": [{"comment_text": "", "digests": {"md5": "8fb0433a60c5b944ab204e9395de5d36", "sha256": "0e07cafa6b9d7f0779d6684d62a8d817b378e279a6172b9c0e6423b1575379a7"}, "downloads": -1, "filename": "bgmi-1.4.6.tar.gz", "has_sig": false, "md5_digest": "8fb0433a60c5b944ab204e9395de5d36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 642484, "upload_time": "2017-09-11T22:04:00", "upload_time_iso_8601": "2017-09-11T22:04:00.502892Z", "url": "https://files.pythonhosted.org/packages/ad/b5/7a34f3a9dccabf6730076fa8977c92f888b7e9aaefd90a7228e11f663c88/bgmi-1.4.6.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "48d47e4254f38a2c7a15bb7e230569a9", "sha256": "43ba28c4495faa2792017c7f1701df8a320c0c297939959dba80c170b48c4dd2"}, "downloads": -1, "filename": "bgmi-2.0.0.tar.gz", "has_sig": false, "md5_digest": "48d47e4254f38a2c7a15bb7e230569a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92803, "upload_time": "2017-10-10T15:38:25", "upload_time_iso_8601": "2017-10-10T15:38:25.326254Z", "url": "https://files.pythonhosted.org/packages/82/b0/1b01a0845f9eaa3313f61dcf852bf549741d2ac0480b3f25d71086ea0abd/bgmi-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "b7de164b94b0e2d80912bf152c89a85e", "sha256": "bc293561451068bea0763e94484fb0fd1201a98ac06641821f6ca434b0dce5a9"}, "downloads": -1, "filename": "bgmi-2.0.1.tar.gz", "has_sig": false, "md5_digest": "b7de164b94b0e2d80912bf152c89a85e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92865, "upload_time": "2017-10-11T12:54:31", "upload_time_iso_8601": "2017-10-11T12:54:31.610780Z", "url": "https://files.pythonhosted.org/packages/b1/d8/018cf76cb862937b302122bfc909d41854e360065a25a7885db1eacff100/bgmi-2.0.1.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "388bee18b623633900d778016aee4a28", "sha256": "50a6c5cf9b37ff5e7306231c44c55d09a938d04dba1a123a1851496a9e203bd8"}, "downloads": -1, "filename": "bgmi-2.0.3.tar.gz", "has_sig": false, "md5_digest": "388bee18b623633900d778016aee4a28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 90635, "upload_time": "2018-01-10T11:15:11", "upload_time_iso_8601": "2018-01-10T11:15:11.980051Z", "url": "https://files.pythonhosted.org/packages/99/0f/346f77969e227911fdd0603b383e82ad405e212f0c3c1b1ba4aab295c3ac/bgmi-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "88fb908da870993c1b16ab53897c03cf", "sha256": "c7052c7bda9d3316c50a8906df931ff9650191e3f79ea281e955a0c81fc4628f"}, "downloads": -1, "filename": "bgmi-2.0.4.tar.gz", "has_sig": false, "md5_digest": "88fb908da870993c1b16ab53897c03cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 152645, "upload_time": "2018-02-19T01:54:09", "upload_time_iso_8601": "2018-02-19T01:54:09.739938Z", "url": "https://files.pythonhosted.org/packages/66/68/b333e5bb5d37f07c3453a1a4e971341435a7e4ad374aef22592b2978c2d3/bgmi-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "5ed1cbfb359591bdc9a9ed931e4813af", "sha256": "c5294c588575b9e2793e76bbe683a51902176956043cb4bfe1626bd67861f5da"}, "downloads": -1, "filename": "bgmi-2.0.5.tar.gz", "has_sig": false, "md5_digest": "5ed1cbfb359591bdc9a9ed931e4813af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 96032, "upload_time": "2018-03-19T15:15:36", "upload_time_iso_8601": "2018-03-19T15:15:36.884501Z", "url": "https://files.pythonhosted.org/packages/8c/59/1e04e290823e54a4b54d52ac773ebbcf75c48c3dfb5f7bbf95b8c3cfd773/bgmi-2.0.5.tar.gz", "yanked": false}], "2.0.6": [{"comment_text": "", "digests": {"md5": "7fd7080141d8956d1e0683f8c0e4a833", "sha256": "b2a0fdbf0e49b3a39671e32acbdbdf337fbd4972ee8e18a9aac7327db803d8cb"}, "downloads": -1, "filename": "bgmi-2.0.6.tar.gz", "has_sig": false, "md5_digest": "7fd7080141d8956d1e0683f8c0e4a833", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 156450, "upload_time": "2018-05-15T15:22:03", "upload_time_iso_8601": "2018-05-15T15:22:03.775910Z", "url": "https://files.pythonhosted.org/packages/7f/1d/0d9e4bc8c5e7ed750c8927b2e107158ffda8e7c45a4adbf30d61eb5f3c7f/bgmi-2.0.6.tar.gz", "yanked": false}], "2.1.0b0": [{"comment_text": "", "digests": {"md5": "90572cfa9756b6bac68ea15716d7c0d2", "sha256": "f5eed8d1601b7a342047ee83abacfd394f357e39f7bc78a614786d5d6653b04d"}, "downloads": -1, "filename": "bgmi-2.1.0b0.tar.gz", "has_sig": false, "md5_digest": "90572cfa9756b6bac68ea15716d7c0d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118018, "upload_time": "2018-10-07T09:07:19", "upload_time_iso_8601": "2018-10-07T09:07:19.836510Z", "url": "https://files.pythonhosted.org/packages/fe/1a/6be16dda34fa5d06ffaf9a718a500c07c56f2262064b446e69df961e0ecc/bgmi-2.1.0b0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "94ddf877420710325cb6b7be2ef11f8b", "sha256": "d2a40f7ebf9823cdb2e7557705addc17a2919dd34805a6a43ce59b3d6c6dca91"}, "downloads": -1, "filename": "bgmi-2.1.1.tar.gz", "has_sig": false, "md5_digest": "94ddf877420710325cb6b7be2ef11f8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119372, "upload_time": "2019-04-24T19:43:10", "upload_time_iso_8601": "2019-04-24T19:43:10.898781Z", "url": "https://files.pythonhosted.org/packages/2a/87/17a1bfc5cce46aa12f045d18b1f62fd83d60303ada237a7faae3460acd01/bgmi-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "5b8bbf065e268650c0bb7733a2c8b24b", "sha256": "b6e43423ba1a9dfb3f1b022635f57f23e6a9187affb0c5c02879bd2dda82b044"}, "downloads": -1, "filename": "bgmi-2.1.2.tar.gz", "has_sig": false, "md5_digest": "5b8bbf065e268650c0bb7733a2c8b24b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60395, "upload_time": "2020-01-02T02:21:06", "upload_time_iso_8601": "2020-01-02T02:21:06.541406Z", "url": "https://files.pythonhosted.org/packages/a0/da/db5edb356fdc08f3247cc87195c59b292927593072f96970f09451eacb56/bgmi-2.1.2.tar.gz", "yanked": false}], "2.1.3": [{"comment_text": "", "digests": {"md5": "43c69acd50afcd0306734350b3d32729", "sha256": "8a76fc38825590c0016f98be33eb3afe9b18decfe541c3c709e3a9097037758c"}, "downloads": -1, "filename": "bgmi-2.1.3.tar.gz", "has_sig": false, "md5_digest": "43c69acd50afcd0306734350b3d32729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60178, "upload_time": "2020-03-19T14:58:09", "upload_time_iso_8601": "2020-03-19T14:58:09.445948Z", "url": "https://files.pythonhosted.org/packages/ee/57/6a737f90d04f31966a6502bdad489559d8cc29578c29efaf17e305f031a2/bgmi-2.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "43c69acd50afcd0306734350b3d32729", "sha256": "8a76fc38825590c0016f98be33eb3afe9b18decfe541c3c709e3a9097037758c"}, "downloads": -1, "filename": "bgmi-2.1.3.tar.gz", "has_sig": false, "md5_digest": "43c69acd50afcd0306734350b3d32729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60178, "upload_time": "2020-03-19T14:58:09", "upload_time_iso_8601": "2020-03-19T14:58:09.445948Z", "url": "https://files.pythonhosted.org/packages/ee/57/6a737f90d04f31966a6502bdad489559d8cc29578c29efaf17e305f031a2/bgmi-2.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:39 2020"}