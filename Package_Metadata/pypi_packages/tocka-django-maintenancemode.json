{"info": {"author": "Fran Hrzenjak", "author_email": "fran.hrzenjak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": "======================\ndjango-maintenancemode\n======================\n\n.. image:: https://travis-ci.org/frnhr/django-maintenancemode.svg\n\ndjango-maintenancemode is a middleware that allows you to temporary shutdown\nyour site for maintenance work.\n\nWhen site is in maintenance mode, some user can still access the regular site:\n - logged in users having staff credentials, and\n - users visiting the site from an ip address defined in Django's `INTERNAL_IPS`.\n\nThe two points above are just the defaults, configured in `PERMISSION_PROCESSORS` setting\n(see below). Custom rules are easy to plug in.\n\ndjango-maintenancemode works the same way as handling 404 or 500 errors in\nDjango work. It adds a handler503 which you can override in your main urls.py\nor you can add a 503.html to your templates directory.\n\nForking history:\n - This fork adds the permission processors framework.\n - Older fork moved the maintenance mode property and ignored urls out of settings.py\n   and into your database.\n\n\nRequirements\n============\ndjango.contrib.sites\n\nSites must have at least one domain to work properly.\n\nPlugin is fully tested with:\n - Django 1.7.8\n - Django 1.8.2\n - Python 2.7.9\n - Python 3.4.2\n\n\nInstallation\n============\n\n* Install using `pip install tocka-django-maintenancemode`\n* Or if you no like pip: download the source and `python setup.py install`\n* In your Django settings file add maintenancemode to your `MIDDLEWARE_CLASSES`.\n  Make sure it comes after Django's AuthenticationMiddleware. Like so::\n\n   MIDDLEWARE_CLASSES = (\n       # ...\n   \n       'maintenancemode.middleware.MaintenanceModeMiddleware',\n   )\n   \n* Add ``maintenancemode`` to your `INSTALLED_APPS`.\n   \n* Run manage.py migrate to create the necessary tables.\n\n* Adding the middleware and running your site creates the necessary records in the database\n  to enable/disable maintenance mode and ignored URL patterns.\n\n\nConfiguration\n=============\n\nConfig section is not up-to-date :(\n\n\n``MAINTENANCE MODE``\n--------------------\nMaintenance mode will create a database record per site, read from the domains you have in the\nSites app. There is a boolean property on each Maintenance model, \"is_being_performed\" that takes\nthe place of putting the site into \"maintnenace mode\" from settings.py\n\n``MAINTENANCE IGNORE URLS``\n---------------------------\nPatterns to ignore are registered as an inline model for each maintenance record created when the\nsite is first run. Patterns should begin with a forward slash: /, but can end any way you'd like.\n\n\nTodo\n====\n\n* document configuration\n* document permission processors\n* sort out the ignored urls feature\n* tests for admin interface?\n* pypi package\n* omg make this readme in markdown\n\n\nChanges\n== == == =\n\ndevelopement\n- - - - - - - - - - - -\n\n0.9.4\n- - - - -\n- Tests for changes from 0.9.3\n- Django 1.7 and 1.8 compatibility\n- Pluggable permissions schema\n\n0.9.3\n- - - - -\n- Moved maintenance mode and ignored url patterns from settings.py to database backed storage.\n\n\n0.9.2\n- - - - -\n- Fixed an issue with setuptools, thanks for reporting this ksato9700\n\n0.9.1\n- - - - -\n\n- Tested django - maintenancemode with django - 1.0 release (following the 1.0.X release branch)\n- Bundled buildout.cfg and bootstrap with the source version of the project, allowing repeatable buildout\n- The middleware now uses its own default config file, thanks to a patch by semente\n- Use INTERNAL_IPS to check for users that need access. user.is_staff will stay in place for backwards incompatibility. Thanks for the idea Joshua Works\n- Have setup.py sdist only distribute maintenancemode itself, no longer distribute tests and buildout stuff\n- Use README and CHANGES in setup.py's long_description, stolen from Jeroen's djangorecipe :)\n- Updated the documentation and now use pypi as the documentation source (link there from google code)\n\n0.9\n- - - - -\n\nFirst release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/frnhr/django-maintenancemode/", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "tocka-django-maintenancemode", "package_url": "https://pypi.org/project/tocka-django-maintenancemode/", "platform": "any", "project_url": "https://pypi.org/project/tocka-django-maintenancemode/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/frnhr/django-maintenancemode/"}, "release_url": "https://pypi.org/project/tocka-django-maintenancemode/0.9.4.1/", "requires_dist": null, "requires_python": null, "summary": "Django-maintenancemode allows you to temporary shutdown your site for maintenance work", "version": "0.9.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://travis-ci.org/frnhr/django-maintenancemode.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22604cd857799e168b919fbb636cf6bcd83507a3/68747470733a2f2f7472617669732d63692e6f72672f66726e68722f646a616e676f2d6d61696e74656e616e63656d6f64652e737667\">\n<p>django-maintenancemode is a middleware that allows you to temporary shutdown\nyour site for maintenance work.</p>\n<dl>\n<dt>When site is in maintenance mode, some user can still access the regular site:</dt>\n<dd><ul>\n<li>logged in users having staff credentials, and</li>\n<li>users visiting the site from an ip address defined in Django\u2019s <cite>INTERNAL_IPS</cite>.</li>\n</ul>\n</dd>\n</dl>\n<p>The two points above are just the defaults, configured in <cite>PERMISSION_PROCESSORS</cite> setting\n(see below). Custom rules are easy to plug in.</p>\n<p>django-maintenancemode works the same way as handling 404 or 500 errors in\nDjango work. It adds a handler503 which you can override in your main urls.py\nor you can add a 503.html to your templates directory.</p>\n<dl>\n<dt>Forking history:</dt>\n<dd><ul>\n<li>This fork adds the permission processors framework.</li>\n<li>Older fork moved the maintenance mode property and ignored urls out of settings.py\nand into your database.</li>\n</ul>\n</dd>\n</dl>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>django.contrib.sites</p>\n<p>Sites must have at least one domain to work properly.</p>\n<dl>\n<dt>Plugin is fully tested with:</dt>\n<dd><ul>\n<li>Django 1.7.8</li>\n<li>Django 1.8.2</li>\n<li>Python 2.7.9</li>\n<li>Python 3.4.2</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li><p>Install using <cite>pip install tocka-django-maintenancemode</cite></p>\n</li>\n<li><p>Or if you no like pip: download the source and <cite>python setup.py install</cite></p>\n</li>\n<li><p>In your Django settings file add maintenancemode to your <cite>MIDDLEWARE_CLASSES</cite>.\nMake sure it comes after Django\u2019s AuthenticationMiddleware. Like so:</p>\n<pre>MIDDLEWARE_CLASSES = (\n    # ...\n\n    'maintenancemode.middleware.MaintenanceModeMiddleware',\n)\n</pre>\n</li>\n<li><p>Add <tt>maintenancemode</tt> to your <cite>INSTALLED_APPS</cite>.</p>\n</li>\n<li><p>Run manage.py migrate to create the necessary tables.</p>\n</li>\n<li><p>Adding the middleware and running your site creates the necessary records in the database\nto enable/disable maintenance mode and ignored URL patterns.</p>\n</li>\n</ul>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Config section is not up-to-date :(</p>\n<div id=\"maintenance-mode\">\n<h3><tt>MAINTENANCE MODE</tt></h3>\n<p>Maintenance mode will create a database record per site, read from the domains you have in the\nSites app. There is a boolean property on each Maintenance model, \u201cis_being_performed\u201d that takes\nthe place of putting the site into \u201cmaintnenace mode\u201d from settings.py</p>\n</div>\n<div id=\"maintenance-ignore-urls\">\n<h3><tt>MAINTENANCE IGNORE URLS</tt></h3>\n<p>Patterns to ignore are registered as an inline model for each maintenance record created when the\nsite is first run. Patterns should begin with a forward slash: /, but can end any way you\u2019d like.</p>\n</div>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>document configuration</li>\n<li>document permission processors</li>\n<li>sort out the ignored urls feature</li>\n<li>tests for admin interface?</li>\n<li>pypi package</li>\n<li>omg make this readme in markdown</li>\n</ul>\n<p>Changes\n== == == =</p>\n<p>developement\n- - - - - - - - - - - -</p>\n<p>0.9.4\n- - - - -\n- Tests for changes from 0.9.3\n- Django 1.7 and 1.8 compatibility\n- Pluggable permissions schema</p>\n<p>0.9.3\n- - - - -\n- Moved maintenance mode and ignored url patterns from settings.py to database backed storage.</p>\n<p>0.9.2\n- - - - -\n- Fixed an issue with setuptools, thanks for reporting this ksato9700</p>\n<p>0.9.1\n- - - - -</p>\n<ul>\n<li>Tested django - maintenancemode with django - 1.0 release (following the 1.0.X release branch)</li>\n<li>Bundled buildout.cfg and bootstrap with the source version of the project, allowing repeatable buildout</li>\n<li>The middleware now uses its own default config file, thanks to a patch by semente</li>\n<li>Use INTERNAL_IPS to check for users that need access. user.is_staff will stay in place for backwards incompatibility. Thanks for the idea Joshua Works</li>\n<li>Have setup.py sdist only distribute maintenancemode itself, no longer distribute tests and buildout stuff</li>\n<li>Use README and CHANGES in setup.py\u2019s long_description, stolen from Jeroen\u2019s djangorecipe :)</li>\n<li>Updated the documentation and now use pypi as the documentation source (link there from google code)</li>\n</ul>\n<p>0.9\n- - - - -</p>\n<p>First release</p>\n</div>\n\n          </div>"}, "last_serial": 1628345, "releases": {"0.9.4.1": [{"comment_text": "", "digests": {"md5": "507fba9c9d9f8c35dd52778adcd72d7a", "sha256": "0ea1b128aa99feaa003274da97c82df5bd0eed4222a0a304e69f33fc297924cc"}, "downloads": -1, "filename": "tocka-django-maintenancemode-0.9.4.1.tar.gz", "has_sig": false, "md5_digest": "507fba9c9d9f8c35dd52778adcd72d7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6438, "upload_time": "2015-07-10T00:31:38", "upload_time_iso_8601": "2015-07-10T00:31:38.433575Z", "url": "https://files.pythonhosted.org/packages/e4/9d/74c3dedfb5a224801311072980b6e4107e3987640e0d24fad105db158d41/tocka-django-maintenancemode-0.9.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "507fba9c9d9f8c35dd52778adcd72d7a", "sha256": "0ea1b128aa99feaa003274da97c82df5bd0eed4222a0a304e69f33fc297924cc"}, "downloads": -1, "filename": "tocka-django-maintenancemode-0.9.4.1.tar.gz", "has_sig": false, "md5_digest": "507fba9c9d9f8c35dd52778adcd72d7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6438, "upload_time": "2015-07-10T00:31:38", "upload_time_iso_8601": "2015-07-10T00:31:38.433575Z", "url": "https://files.pythonhosted.org/packages/e4/9d/74c3dedfb5a224801311072980b6e4107e3987640e0d24fad105db158d41/tocka-django-maintenancemode-0.9.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:51:54 2020"}