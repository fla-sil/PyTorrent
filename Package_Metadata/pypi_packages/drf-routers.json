{"info": {"author": "V.Anh Tran", "author_email": "tranvietanh1991@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "drf-routers\n=====================\n\nSourcecode of this package is based from: https://github.com/alanjds/drf-nested-routers\n\nThis package provides routers and fields to create grouped/nested resources in the [Django Rest Framework](http://django-rest-framework.org/)\n\nNested resources are needed for full REST URL structure, if one resource lives inside another.\nGrouped resources allow you to group multiple resource to show in a single root api view.\n\nThe following example is about Domains and DNS Nameservers. \nThere are many domains, and each domain has many nameservers. The \"nameserver\" resource does not\nexist without a domain, so you need it \"nested\" inside the domain.\n\nInstallation\n------------\n\nYou can install this library using pip:\n\n```pip install drf-routers```\n\nQuickstart\n----------\n\nThe desired URL signatures are:\n```\n\\domain\\ <- Domains list\n\\domain\\{pk}\\ <- One domain, from {pk}\n\\domain\\{domain_pk}\\nameservers\\ <- Nameservers of domain from {domain_pk}\n\\domain\\{domain_pk}\\nameservers\\{pk} <- Specific nameserver from {pk}, of domain from {domain_pk}\n```\n\nHow to do it (example):\n```python\n# urls.py\nfrom drf_routers import routers\nfrom views import DomainViewSet, NameserverViewSet\n(...)\n\nrouter = routers.SimpleRouter()\nrouter.register(r'domains', DomainViewSet)\n\ndomains_router = routers.NestedRouter(router, r'domains', lookup='domain')\ndomains_router.register(r'nameservers', NameserverViewSet, base_name='domain-nameservers')\n# 'base_name' is optional. Needed only if the same viewset is registered more than once\n# Official DRF docs on this option: http://www.django-rest-framework.org/api-guide/routers/\n\nurlpatterns = patterns('',\n    url(r'^', include(router.urls)),\n    url(r'^', include(domains_router.urls)),\n)\n```\n```python\n# views.py\nclass NameserverViewSet(viewsets.ViewSet):\n    def list(self, request, domain_pk=None):\n        nameservers = self.queryset.filter(domain=domain_pk)\n        (...)\n        return Response([...])\n\n    def retrieve(self, request, pk=None, domain_pk=None):\n        nameservers = self.queryset.get(pk=pk, domain=domain_pk)\n        (...)\n        return Response(serializer.data)\n```\n\n(optional) If you need hyperlinks for nested relations, you need need a custom serializer.\n```python\n# serializers.py\n# (needed only if you want hyperlinks for nested relations on API)\nfrom drf_routers.relations import NestedHyperlinkedRelatedField\n\nclass DomainSerializer(HyperlinkedModelSerializer):\n    class Meta:\n        model = Domain\n\n    nameservers = HyperlinkedIdentityField(\n        view_name='domain-nameservers-list',\n        lookup_url_kwarg='domain_pk'\n    )\n    \n\t## OR ##\n    \n    nameservers = NestedHyperlinkedRelatedField(\n        many=True,\n        read_only=True,   # Or add a queryset\n        view_name='domain-nameservers-detail'\n        parent_lookup_url_kwarg='domain_pk'\n    )\n```\n\n\nExample of nested router 3 levels deep.  You can use this same logic to nest routers as deep as you need.  This example accomplishes the below URL patterns. \n```\n/clients/\n/clients/{pk}/\n/clients/{client_pk}/maildrops/\n/clients/{client_pk}/maildrops/{maildrop_pk}/\n/clients/{client_pk}/maildrops/{maildrop_pk}/recipients/\n/clients/{client_pk}/maildrops/{maildrop_pk}/recipients/{pk}/\n```\n\n```python\n# urls.py\nrouter = DefaultRouter()\nrouter.register(r'clients', ClientViewSet, base_name='clients')\n\nclient_router = routers.NestedRouter(router, r'clients', lookup='client')\nclient_router.register(r'maildrops', MailDropViewSet, base_name='maildrops')\n\nmaildrops_router = routers.NestedRouter(client_router, r'maildrops', lookup='maildrop')\nmaildrops_router.register(r'recipients', MailRecipientViewSet, base_name='recipients')\n\nurlpatterns = patterns (\n    '',\n    url(r'^', include(router.urls)),\n    url(r'^', include(client_router.urls)),\n    url(r'^', include(maildrops_router.urls)),\n)\n```\n\n```python\n# views.py\nclass ClientViewSet(viewsets.ViewSet):\n    serializer_class = ClientSerializer\n\n    def list(self, request,):\n        queryset = Client.objects.filter()\n        serializer = ClientSerializer(queryset, many=True)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None):\n        queryset = Client.objects.filter()\n        client = get_object_or_404(queryset, pk=pk)\n        serializer = ClientSerializer(client)\n        return Response(serializer.data)\n        \nclass MailDropViewSet(viewsets.ViewSet):\n    serializer_class = MailDropSerializer\n\n    def list(self, request, client_pk=None):\n        queryset = MailDrop.objects.filter(client=client_pk)\n        serializer = MailDropSerializer(queryset, many=True)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None, client_pk=None):\n        queryset = MailDrop.objects.filter(pk=pk, client=client_pk)\n        maildrop = get_object_or_404(queryset, pk=pk)\n        serializer = MailDropSerializer(maildrop)\n        return Response(serializer.data)\n        \nclass MailRecipientViewSet(viewsets.ViewSet):\n    serializer_class = MailRecipientSerializer\n\n    def list(self, request, client_pk=None, maildrop_pk=None):\n        queryset = MailRecipient.objects.filter(mail_drop__client=client_pk, mail_drop=maildrop_pk)\n        serializer = MailRecipientSerializer(queryset, many=True)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None, client_pk=None, maildrop_pk=None):\n        queryset = MailRecipient.objects.filter(pk=pk, mail_drop=maildrop_pk, mail_drop__client=client_pk)\n        maildrop = get_object_or_404(queryset, pk=pk)\n        serializer = MailRecipientSerializer(maildrop)\n        return Response(serializer.data)\n```", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/tranvietanh1991/drf-routers/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tranvietanh1991/drf-routers", "keywords": "django,rest,drf,django-rest-framwork,router,nested,grouped", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "drf-routers", "package_url": "https://pypi.org/project/drf-routers/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/drf-routers/", "project_urls": {"Download": "https://github.com/tranvietanh1991/drf-routers/archive/master.zip", "Homepage": "https://github.com/tranvietanh1991/drf-routers"}, "release_url": "https://pypi.org/project/drf-routers/0.2/", "requires_dist": null, "requires_python": null, "summary": "Grouped/Nested resources for the Django Rest Framework", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            drf-routers<br>=====================<br><br>Sourcecode of this package is based from: https://github.com/alanjds/drf-nested-routers<br><br>This package provides routers and fields to create grouped/nested resources in the [Django Rest Framework](http://django-rest-framework.org/)<br><br>Nested resources are needed for full REST URL structure, if one resource lives inside another.<br>Grouped resources allow you to group multiple resource to show in a single root api view.<br><br>The following example is about Domains and DNS Nameservers. <br>There are many domains, and each domain has many nameservers. The \"nameserver\" resource does not<br>exist without a domain, so you need it \"nested\" inside the domain.<br><br>Installation<br>------------<br><br>You can install this library using pip:<br><br>```pip install drf-routers```<br><br>Quickstart<br>----------<br><br>The desired URL signatures are:<br>```<br>\\domain\\ &lt;- Domains list<br>\\domain\\{pk}\\ &lt;- One domain, from {pk}<br>\\domain\\{domain_pk}\\nameservers\\ &lt;- Nameservers of domain from {domain_pk}<br>\\domain\\{domain_pk}\\nameservers\\{pk} &lt;- Specific nameserver from {pk}, of domain from {domain_pk}<br>```<br><br>How to do it (example):<br>```python<br># urls.py<br>from drf_routers import routers<br>from views import DomainViewSet, NameserverViewSet<br>(...)<br><br>router = routers.SimpleRouter()<br>router.register(r'domains', DomainViewSet)<br><br>domains_router = routers.NestedRouter(router, r'domains', lookup='domain')<br>domains_router.register(r'nameservers', NameserverViewSet, base_name='domain-nameservers')<br># 'base_name' is optional. Needed only if the same viewset is registered more than once<br># Official DRF docs on this option: http://www.django-rest-framework.org/api-guide/routers/<br><br>urlpatterns = patterns('',<br>    url(r'^', include(router.urls)),<br>    url(r'^', include(domains_router.urls)),<br>)<br>```<br>```python<br># views.py<br>class NameserverViewSet(viewsets.ViewSet):<br>    def list(self, request, domain_pk=None):<br>        nameservers = self.queryset.filter(domain=domain_pk)<br>        (...)<br>        return Response([...])<br><br>    def retrieve(self, request, pk=None, domain_pk=None):<br>        nameservers = self.queryset.get(pk=pk, domain=domain_pk)<br>        (...)<br>        return Response(serializer.data)<br>```<br><br>(optional) If you need hyperlinks for nested relations, you need need a custom serializer.<br>```python<br># serializers.py<br># (needed only if you want hyperlinks for nested relations on API)<br>from drf_routers.relations import NestedHyperlinkedRelatedField<br><br>class DomainSerializer(HyperlinkedModelSerializer):<br>    class Meta:<br>        model = Domain<br><br>    nameservers = HyperlinkedIdentityField(<br>        view_name='domain-nameservers-list',<br>        lookup_url_kwarg='domain_pk'<br>    )<br>    <br>\t## OR ##<br>    <br>    nameservers = NestedHyperlinkedRelatedField(<br>        many=True,<br>        read_only=True,   # Or add a queryset<br>        view_name='domain-nameservers-detail'<br>        parent_lookup_url_kwarg='domain_pk'<br>    )<br>```<br><br><br>Example of nested router 3 levels deep.  You can use this same logic to nest routers as deep as you need.  This example accomplishes the below URL patterns. <br>```<br>/clients/<br>/clients/{pk}/<br>/clients/{client_pk}/maildrops/<br>/clients/{client_pk}/maildrops/{maildrop_pk}/<br>/clients/{client_pk}/maildrops/{maildrop_pk}/recipients/<br>/clients/{client_pk}/maildrops/{maildrop_pk}/recipients/{pk}/<br>```<br><br>```python<br># urls.py<br>router = DefaultRouter()<br>router.register(r'clients', ClientViewSet, base_name='clients')<br><br>client_router = routers.NestedRouter(router, r'clients', lookup='client')<br>client_router.register(r'maildrops', MailDropViewSet, base_name='maildrops')<br><br>maildrops_router = routers.NestedRouter(client_router, r'maildrops', lookup='maildrop')<br>maildrops_router.register(r'recipients', MailRecipientViewSet, base_name='recipients')<br><br>urlpatterns = patterns (<br>    '',<br>    url(r'^', include(router.urls)),<br>    url(r'^', include(client_router.urls)),<br>    url(r'^', include(maildrops_router.urls)),<br>)<br>```<br><br>```python<br># views.py<br>class ClientViewSet(viewsets.ViewSet):<br>    serializer_class = ClientSerializer<br><br>    def list(self, request,):<br>        queryset = Client.objects.filter()<br>        serializer = ClientSerializer(queryset, many=True)<br>        return Response(serializer.data)<br><br>    def retrieve(self, request, pk=None):<br>        queryset = Client.objects.filter()<br>        client = get_object_or_404(queryset, pk=pk)<br>        serializer = ClientSerializer(client)<br>        return Response(serializer.data)<br>        <br>class MailDropViewSet(viewsets.ViewSet):<br>    serializer_class = MailDropSerializer<br><br>    def list(self, request, client_pk=None):<br>        queryset = MailDrop.objects.filter(client=client_pk)<br>        serializer = MailDropSerializer(queryset, many=True)<br>        return Response(serializer.data)<br><br>    def retrieve(self, request, pk=None, client_pk=None):<br>        queryset = MailDrop.objects.filter(pk=pk, client=client_pk)<br>        maildrop = get_object_or_404(queryset, pk=pk)<br>        serializer = MailDropSerializer(maildrop)<br>        return Response(serializer.data)<br>        <br>class MailRecipientViewSet(viewsets.ViewSet):<br>    serializer_class = MailRecipientSerializer<br><br>    def list(self, request, client_pk=None, maildrop_pk=None):<br>        queryset = MailRecipient.objects.filter(mail_drop__client=client_pk, mail_drop=maildrop_pk)<br>        serializer = MailRecipientSerializer(queryset, many=True)<br>        return Response(serializer.data)<br><br>    def retrieve(self, request, pk=None, client_pk=None, maildrop_pk=None):<br>        queryset = MailRecipient.objects.filter(pk=pk, mail_drop=maildrop_pk, mail_drop__client=client_pk)<br>        maildrop = get_object_or_404(queryset, pk=pk)<br>        serializer = MailRecipientSerializer(maildrop)<br>        return Response(serializer.data)<br>```\n          </div>"}, "last_serial": 2248620, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2176ca6ecedbfe91f5e261df855187ff", "sha256": "a702fd04f55b147fde409ec8553f892b12cf8abf95af1196ac9e0d5de4e59bd4"}, "downloads": -1, "filename": "drf-routers-0.1.tar.gz", "has_sig": false, "md5_digest": "2176ca6ecedbfe91f5e261df855187ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11303, "upload_time": "2016-04-19T16:59:58", "upload_time_iso_8601": "2016-04-19T16:59:58.794986Z", "url": "https://files.pythonhosted.org/packages/ca/4f/a47ec53d92c9d6b9bd3077785b262d036ccf304af7a28e901270aa65eb50/drf-routers-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "fcd46ba80d4291031ce2b2ac235bebea", "sha256": "6329f209e19119df0cab4d19be3fef7948654eac38df3ec28d0f74d7e82544f2"}, "downloads": -1, "filename": "drf-routers-0.2.tar.gz", "has_sig": false, "md5_digest": "fcd46ba80d4291031ce2b2ac235bebea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11478, "upload_time": "2016-07-28T09:44:40", "upload_time_iso_8601": "2016-07-28T09:44:40.619111Z", "url": "https://files.pythonhosted.org/packages/b5/05/7a117aeef93e792957a6b9e63e39657fd173abaeffe70091e42c3e3350d3/drf-routers-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fcd46ba80d4291031ce2b2ac235bebea", "sha256": "6329f209e19119df0cab4d19be3fef7948654eac38df3ec28d0f74d7e82544f2"}, "downloads": -1, "filename": "drf-routers-0.2.tar.gz", "has_sig": false, "md5_digest": "fcd46ba80d4291031ce2b2ac235bebea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11478, "upload_time": "2016-07-28T09:44:40", "upload_time_iso_8601": "2016-07-28T09:44:40.619111Z", "url": "https://files.pythonhosted.org/packages/b5/05/7a117aeef93e792957a6b9e63e39657fd173abaeffe70091e42c3e3350d3/drf-routers-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:41 2020"}