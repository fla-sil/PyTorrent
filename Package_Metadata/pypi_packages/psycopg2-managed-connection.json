{"info": {"author": "Ted Kaemming, Disqus", "author_email": "ted@disqus.com", "bugtrack_url": null, "classifiers": [], "description": "psycopg2-managed-connection\n###########################\n\nThis package includes a managed connection for psycopg2_ that provides\nthread-safe exclusive access to an underlying ``psycopg2.connection`` object.\n\nThis allows many threads to share the same connection instance (avoiding the\nTCP and process startup cost associated with establishing a new PostgreSQL\nconnection) and ensures that threads do not release the connection with a\ntransaction still in progress -- either due to developer error, or an unhandled\nexception while a thread is interacting with the database.\n\n``ManagedConnection`` also will ensure that a connection that is closed upon\nentering the managed context will be opened.\n\nUsage\n=====\n\nCreating a Managed Connection\n-----------------------------\n\n.. code:: python\n\n    >>> from pgmanagedconnection import ManagedConnection\n    >>>\n    >>> dsn = 'postgres:///postgres'  # a libpq connection string\n    >>> manager = ManagedConnection(dsn)\n    >>> manager\n    <ManagedConnection: postgres:///postgres (closed)>\n\nMaking Queries\n--------------\n\n.. code:: python\n\n    >>> with manager() as connection:\n    ...     cursor = connection.cursor()\n    ...     cursor.execute('SELECT 1')\n    ...     cursor.fetchone()\n    ...     connection.commit()\n    (1,)\n\nDealing with Uncommitted Transactions\n-------------------------------------\n\nLeaving a transaction open when exiting the context manager will lead to a\n``RuntimeError``. This also results in any open transactions implicitly being\nrolled back.\n\n.. code:: python\n\n    >>> with manager() as connection:\n    ...    cursor = connection.cursor()\n    ...    cursor.execute('SELECT 1')\n    Traceback (most recent call last):\n        ...\n    RuntimeError: Did not commit or rollback open transaction before releasing connection.\n\nDealing with Errors\n-------------------\n\nThe currently open transaction will be rolled back if an unhandled exception is\nencountered.\n\n.. code:: python\n\n    >>> import psycopg2\n    >>> with manager() as connection:\n    ...    cursor = connection.cursor()\n    ...    cursor.execute('SELECT 1')\n    ...    assert manager.status is psycopg2.extensions.TRANSACTION_STATUS_INTRANS\n    ...    raise NotImplementedError()\n    Traceback (most recent call last):\n        ...\n    NotImplementedError\n    >>> manager.status is psycopg2.extensions.TRANSACTION_STATUS_IDLE\n    True\n\nDevelopment\n===========\n\nTesting\n-------\n\nThe test suite can be run with ``make test``.\n\nIt assumes a running and accessible PostgreSQL server. The connection details\nare deferred to the underlying ``libpq`` implementation, and default values can\nbe specified using `libpq environment variables`_.\n\ntox_ is also supported as a test runner (if installed.)\n\nTesting with Docker\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    $ export PGPORT=5432\n    $ docker run -dp $PGPORT:5432 postgres\n    $ PGUSER=postgres make test\n\nIf using boot2docker_, the ``PGHOST`` environment variable will also need to be\nset to the virtual machine IP address.\n\n.. code:: bash\n\n    $ PGUSER=postgres PGHOST=$(boot2docker ip) make test\n\n\n.. _boot2docker: https://github.com/boot2docker/boot2docker\n.. _psycopg2: https://pypi.python.org/pypi/psycopg2/\n.. _`libpq environment variables`: http://www.postgresql.org/docs/9.3/static/libpq-envars.html\n.. _tox: https://pypi.python.org/pypi/tox\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "psycopg2-managed-connection", "package_url": "https://pypi.org/project/psycopg2-managed-connection/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/psycopg2-managed-connection/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/psycopg2-managed-connection/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Thread-safe connection manager for psycopg2 connections.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package includes a managed connection for <a href=\"https://pypi.python.org/pypi/psycopg2/\" rel=\"nofollow\">psycopg2</a> that provides\nthread-safe exclusive access to an underlying <tt>psycopg2.connection</tt> object.</p>\n<p>This allows many threads to share the same connection instance (avoiding the\nTCP and process startup cost associated with establishing a new PostgreSQL\nconnection) and ensures that threads do not release the connection with a\ntransaction still in progress \u2013 either due to developer error, or an unhandled\nexception while a thread is interacting with the database.</p>\n<p><tt>ManagedConnection</tt> also will ensure that a connection that is closed upon\nentering the managed context will be opened.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"creating-a-managed-connection\">\n<h3>Creating a Managed Connection</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pgmanagedconnection</span> <span class=\"kn\">import</span> <span class=\"n\">ManagedConnection</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dsn</span> <span class=\"o\">=</span> <span class=\"s1\">'postgres:///postgres'</span>  <span class=\"c1\"># a libpq connection string</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">ManagedConnection</span><span class=\"p\">(</span><span class=\"n\">dsn</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">manager</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ManagedConnection</span><span class=\"p\">:</span> <span class=\"n\">postgres</span><span class=\"p\">:</span><span class=\"o\">///</span><span class=\"n\">postgres</span> <span class=\"p\">(</span><span class=\"n\">closed</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n</pre>\n</div>\n<div id=\"making-queries\">\n<h3>Making Queries</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">manager</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">connection</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT 1'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,)</span>\n</pre>\n</div>\n<div id=\"dealing-with-uncommitted-transactions\">\n<h3>Dealing with Uncommitted Transactions</h3>\n<p>Leaving a transaction open when exiting the context manager will lead to a\n<tt>RuntimeError</tt>. This also results in any open transactions implicitly being\nrolled back.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">manager</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">connection</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>    <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT 1'</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">RuntimeError</span><span class=\"p\">:</span> <span class=\"n\">Did</span> <span class=\"ow\">not</span> <span class=\"n\">commit</span> <span class=\"ow\">or</span> <span class=\"n\">rollback</span> <span class=\"nb\">open</span> <span class=\"n\">transaction</span> <span class=\"n\">before</span> <span class=\"n\">releasing</span> <span class=\"n\">connection</span><span class=\"o\">.</span>\n</pre>\n</div>\n<div id=\"dealing-with-errors\">\n<h3>Dealing with Errors</h3>\n<p>The currently open transaction will be rolled back if an unhandled exception is\nencountered.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">psycopg2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">manager</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">connection</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>    <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT 1'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>    <span class=\"k\">assert</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"ow\">is</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">extensions</span><span class=\"o\">.</span><span class=\"n\">TRANSACTION_STATUS_INTRANS</span>\n<span class=\"o\">...</span>    <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">NotImplementedError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"ow\">is</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">extensions</span><span class=\"o\">.</span><span class=\"n\">TRANSACTION_STATUS_IDLE</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<h2 id=\"testing\"><span class=\"section-subtitle\">Testing</span></h2>\n<p>The test suite can be run with <tt>make test</tt>.</p>\n<p>It assumes a running and accessible PostgreSQL server. The connection details\nare deferred to the underlying <tt>libpq</tt> implementation, and default values can\nbe specified using <a href=\"http://www.postgresql.org/docs/9.3/static/libpq-envars.html\" rel=\"nofollow\">libpq environment variables</a>.</p>\n<p><a href=\"https://pypi.python.org/pypi/tox\" rel=\"nofollow\">tox</a> is also supported as a test runner (if installed.)</p>\n<div id=\"testing-with-docker\">\n<h3>Testing with Docker</h3>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">PGPORT</span><span class=\"o\">=</span><span class=\"m\">5432</span>\n$ docker run -dp <span class=\"nv\">$PGPORT</span>:5432 postgres\n$ <span class=\"nv\">PGUSER</span><span class=\"o\">=</span>postgres make <span class=\"nb\">test</span>\n</pre>\n<p>If using <a href=\"https://github.com/boot2docker/boot2docker\" rel=\"nofollow\">boot2docker</a>, the <tt>PGHOST</tt> environment variable will also need to be\nset to the virtual machine IP address.</p>\n<pre>$ <span class=\"nv\">PGUSER</span><span class=\"o\">=</span>postgres <span class=\"nv\">PGHOST</span><span class=\"o\">=</span><span class=\"k\">$(</span>boot2docker ip<span class=\"k\">)</span> make <span class=\"nb\">test</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2243438, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8874d826b1fe51981829e997ff7fa550", "sha256": "5159e4ffaf9bb102c5d7d0e2a7bfff8e7e422aa9a06c282558db5b456d6a1215"}, "downloads": -1, "filename": "psycopg2-managed-connection-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8874d826b1fe51981829e997ff7fa550", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3426, "upload_time": "2015-07-02T23:14:20", "upload_time_iso_8601": "2015-07-02T23:14:20.987369Z", "url": "https://files.pythonhosted.org/packages/51/7e/23a9b380daeda1ebc1fe127cc4d1fe49eba87aaae853e904f05ede820972/psycopg2-managed-connection-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8874d826b1fe51981829e997ff7fa550", "sha256": "5159e4ffaf9bb102c5d7d0e2a7bfff8e7e422aa9a06c282558db5b456d6a1215"}, "downloads": -1, "filename": "psycopg2-managed-connection-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8874d826b1fe51981829e997ff7fa550", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3426, "upload_time": "2015-07-02T23:14:20", "upload_time_iso_8601": "2015-07-02T23:14:20.987369Z", "url": "https://files.pythonhosted.org/packages/51/7e/23a9b380daeda1ebc1fe127cc4d1fe49eba87aaae853e904f05ede820972/psycopg2-managed-connection-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:29 2020"}