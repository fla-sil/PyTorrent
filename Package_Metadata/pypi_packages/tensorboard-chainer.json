{"info": {"author": "nake nat", "author_email": "nakanat.stock@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/neka-nat/tensorboard-chainer.svg?branch=master)](https://travis-ci.org/neka-nat/tensorboard-chainer)\n[![codecov](https://codecov.io/gh/neka-nat/tensorboard-chainer/branch/master/graph/badge.svg)](https://codecov.io/gh/neka-nat/tensorboard-chainer)\n\n[![Code Climate](https://codeclimate.com/github/neka-nat/tensorboard-chainer/badges/gpa.svg)](https://codeclimate.com/github/neka-nat/tensorboard-chainer)\n\n[![PyPI version](https://badge.fury.io/py/tensorboard-chainer.svg)](https://badge.fury.io/py/tensorboard-chainer)\n\n# tensorboard-chainer\n\nWrite tensorboard events with simple command.\nincluding scalar, image, histogram, audio, text, graph and embedding.\n\nThis is based on [tensorboard-pytorch](https://github.com/lanpa/tensorboard-pytorch).\n\n## Usage\n\nInstall tensorflow.\n\n```\npip install tensorflow\n```\n\nExecute demo.py and tensorboard.\nAccess \"localhost:6006\" in your browser.\n\n```\ncd examples\npython demo.py\ntensorboard --logdir runs\n```\n\n## Scalar example\n\n![graph](https://raw.githubusercontent.com/neka-nat/tensorboard-chainer/master/screenshots/scalar.png)\n\n## Histogram example\n\n![graph](https://raw.githubusercontent.com/neka-nat/tensorboard-chainer/master/screenshots/histogram.png)\n\n## Graph example\n\n![graph](https://raw.githubusercontent.com/neka-nat/tensorboard-chainer/master/screenshots/graph.gif)\n\n## Name scope\n\nLike tensorflow, nodes in the graph can be grouped together in the namespace to make it easy to see.\n\n```python\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom tb_chainer import name_scope, within_name_scope\n\nclass MLP(chainer.Chain):\n    def __init__(self, n_units, n_out):\n        super(MLP, self).__init__()\n        with self.init_scope():\n            self.l1 = L.Linear(None, n_units)  # n_in -> n_units\n            self.l2 = L.Linear(None, n_units)  # n_units -> n_units\n            self.l3 = L.Linear(None, n_out)  # n_units -> n_out\n\n    @within_name_scope('MLP')\n    def __call__(self, x):\n        with name_scope('linear1', self.l1.params()):\n            h1 = F.relu(self.l1(x))\n        with name_scope('linear2', self.l2.params()):\n            h2 = F.relu(self.l2(h1))\n        with name_scope('linear3', self.l3.params()):\n            o = self.l3(h2)\n        return o\n```\n\nHow to save the logs using this model is shown below.\n`add_all_variable_images` is the function that saves the Variable's data in the model that matches the pattern as an images.\n`add_all_parameter_histograms` is the function that save histograms of the Parameter's data in the model that match the pattern.\n\n```python\nfrom datetime import datetime\nfrom tb_chainer import SummaryWriter\n\nmodel = L.Classifier(MLP(1000, 10))\n\nres = model(chainer.Variable(np.random.rand(1, 784).astype(np.float32)),\n            chainer.Variable(np.random.rand(1).astype(np.int32)))\n\nwriter = SummaryWriter('runs/'+datetime.now().strftime('%B%d  %H:%M:%S'))\nwriter.add_graph([res])\nwriter.add_all_variable_images([res], pattern='.*MLP.*')\nwriter.add_all_parameter_histograms([res], pattern='.*MLP.*')\n\nwriter.close()\n```\n\n## Reference\n\n* [tensorboard-pytorch](https://github.com/lanpa/tensorboard-pytorch)\n* [tensorboard_logger](https://github.com/TeamHG-Memex/tensorboard_logger)\n* [tfchain](https://github.com/mitmul/tfchain)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/neka-nat/tensorboard-chainer", "keywords": "", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "tensorboard-chainer", "package_url": "https://pypi.org/project/tensorboard-chainer/", "platform": "", "project_url": "https://pypi.org/project/tensorboard-chainer/", "project_urls": {"Homepage": "https://github.com/neka-nat/tensorboard-chainer"}, "release_url": "https://pypi.org/project/tensorboard-chainer/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Log TensorBoard events with chainer", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/neka-nat/tensorboard-chainer\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3fd930ebccaf61565f8d2286a1fbfbb578c6566/68747470733a2f2f7472617669732d63692e6f72672f6e656b612d6e61742f74656e736f72626f6172642d636861696e65722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/neka-nat/tensorboard-chainer\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4578826e9ad1ee2890c79fe180d24da7017a80f/68747470733a2f2f636f6465636f762e696f2f67682f6e656b612d6e61742f74656e736f72626f6172642d636861696e65722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p><a href=\"https://codeclimate.com/github/neka-nat/tensorboard-chainer\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdf27821a8cfdcbfd01fbc33c81b296853fc3120/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6e656b612d6e61742f74656e736f72626f6172642d636861696e65722f6261646765732f6770612e737667\"></a></p>\n<p><a href=\"https://badge.fury.io/py/tensorboard-chainer\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96f50b5d7ff9d085729a1dab7ff6212a30e07014/68747470733a2f2f62616467652e667572792e696f2f70792f74656e736f72626f6172642d636861696e65722e737667\"></a></p>\n<h1>tensorboard-chainer</h1>\n<p>Write tensorboard events with simple command.\nincluding scalar, image, histogram, audio, text, graph and embedding.</p>\n<p>This is based on <a href=\"https://github.com/lanpa/tensorboard-pytorch\" rel=\"nofollow\">tensorboard-pytorch</a>.</p>\n<h2>Usage</h2>\n<p>Install tensorflow.</p>\n<pre><code>pip install tensorflow\n</code></pre>\n<p>Execute demo.py and tensorboard.\nAccess \"localhost:6006\" in your browser.</p>\n<pre><code>cd examples\npython demo.py\ntensorboard --logdir runs\n</code></pre>\n<h2>Scalar example</h2>\n<p><img alt=\"graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/477aab4e7acb8b592d11bc32f46ef8eff31313a7/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6e656b612d6e61742f74656e736f72626f6172642d636861696e65722f6d61737465722f73637265656e73686f74732f7363616c61722e706e67\"></p>\n<h2>Histogram example</h2>\n<p><img alt=\"graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/862d74199b80544c4772817a55d129752e0de9b4/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6e656b612d6e61742f74656e736f72626f6172642d636861696e65722f6d61737465722f73637265656e73686f74732f686973746f6772616d2e706e67\"></p>\n<h2>Graph example</h2>\n<p><img alt=\"graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/581c3259181ab6c38930e7a289584a83e2d2e04b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6e656b612d6e61742f74656e736f72626f6172642d636861696e65722f6d61737465722f73637265656e73686f74732f67726170682e676966\"></p>\n<h2>Name scope</h2>\n<p>Like tensorflow, nodes in the graph can be grouped together in the namespace to make it easy to see.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">chainer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">chainer.functions</span> <span class=\"k\">as</span> <span class=\"nn\">F</span>\n<span class=\"kn\">import</span> <span class=\"nn\">chainer.links</span> <span class=\"k\">as</span> <span class=\"nn\">L</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tb_chainer</span> <span class=\"kn\">import</span> <span class=\"n\">name_scope</span><span class=\"p\">,</span> <span class=\"n\">within_name_scope</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MLP</span><span class=\"p\">(</span><span class=\"n\">chainer</span><span class=\"o\">.</span><span class=\"n\">Chain</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n_units</span><span class=\"p\">,</span> <span class=\"n\">n_out</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MLP</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">init_scope</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l1</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">n_units</span><span class=\"p\">)</span>  <span class=\"c1\"># n_in -&gt; n_units</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l2</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">n_units</span><span class=\"p\">)</span>  <span class=\"c1\"># n_units -&gt; n_units</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l3</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">n_out</span><span class=\"p\">)</span>  <span class=\"c1\"># n_units -&gt; n_out</span>\n\n    <span class=\"nd\">@within_name_scope</span><span class=\"p\">(</span><span class=\"s1\">'MLP'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"n\">name_scope</span><span class=\"p\">(</span><span class=\"s1\">'linear1'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">()):</span>\n            <span class=\"n\">h1</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n        <span class=\"k\">with</span> <span class=\"n\">name_scope</span><span class=\"p\">(</span><span class=\"s1\">'linear2'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l2</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">()):</span>\n            <span class=\"n\">h2</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l2</span><span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"p\">))</span>\n        <span class=\"k\">with</span> <span class=\"n\">name_scope</span><span class=\"p\">(</span><span class=\"s1\">'linear3'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l3</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">()):</span>\n            <span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">l3</span><span class=\"p\">(</span><span class=\"n\">h2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">o</span>\n</pre>\n<p>How to save the logs using this model is shown below.\n<code>add_all_variable_images</code> is the function that saves the Variable's data in the model that matches the pattern as an images.\n<code>add_all_parameter_histograms</code> is the function that save histograms of the Parameter's data in the model that match the pattern.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tb_chainer</span> <span class=\"kn\">import</span> <span class=\"n\">SummaryWriter</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Classifier</span><span class=\"p\">(</span><span class=\"n\">MLP</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">chainer</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">784</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)),</span>\n            <span class=\"n\">chainer</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)))</span>\n\n<span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">SummaryWriter</span><span class=\"p\">(</span><span class=\"s1\">'runs/'</span><span class=\"o\">+</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'%B</span><span class=\"si\">%d</span><span class=\"s1\">  %H:%M:%S'</span><span class=\"p\">))</span>\n<span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">add_graph</span><span class=\"p\">([</span><span class=\"n\">res</span><span class=\"p\">])</span>\n<span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">add_all_variable_images</span><span class=\"p\">([</span><span class=\"n\">res</span><span class=\"p\">],</span> <span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s1\">'.*MLP.*'</span><span class=\"p\">)</span>\n<span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">add_all_parameter_histograms</span><span class=\"p\">([</span><span class=\"n\">res</span><span class=\"p\">],</span> <span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s1\">'.*MLP.*'</span><span class=\"p\">)</span>\n\n<span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"https://github.com/lanpa/tensorboard-pytorch\" rel=\"nofollow\">tensorboard-pytorch</a></li>\n<li><a href=\"https://github.com/TeamHG-Memex/tensorboard_logger\" rel=\"nofollow\">tensorboard_logger</a></li>\n<li><a href=\"https://github.com/mitmul/tfchain\" rel=\"nofollow\">tfchain</a></li>\n</ul>\n\n          </div>"}, "last_serial": 4918760, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "19bd0536e2c57ca3e523bf61afaef85d", "sha256": "2e8ca269f60e7d455ed41cce6a8c529eed4055d07ba675a366702b8cecc0a1ed"}, "downloads": -1, "filename": "tensorboard-chainer-0.4.0.tar.gz", "has_sig": false, "md5_digest": "19bd0536e2c57ca3e523bf61afaef85d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28383, "upload_time": "2019-03-09T13:07:30", "upload_time_iso_8601": "2019-03-09T13:07:30.183858Z", "url": "https://files.pythonhosted.org/packages/08/ab/17dbc4b86b3d9dfc77b3a0e19c0b40ae4ea4e6f1c476ffce07ce3cf0d576/tensorboard-chainer-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19bd0536e2c57ca3e523bf61afaef85d", "sha256": "2e8ca269f60e7d455ed41cce6a8c529eed4055d07ba675a366702b8cecc0a1ed"}, "downloads": -1, "filename": "tensorboard-chainer-0.4.0.tar.gz", "has_sig": false, "md5_digest": "19bd0536e2c57ca3e523bf61afaef85d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28383, "upload_time": "2019-03-09T13:07:30", "upload_time_iso_8601": "2019-03-09T13:07:30.183858Z", "url": "https://files.pythonhosted.org/packages/08/ab/17dbc4b86b3d9dfc77b3a0e19c0b40ae4ea4e6f1c476ffce07ce3cf0d576/tensorboard-chainer-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:28 2020"}