{"info": {"author": "Waterbear Cloud", "author_email": "hello@waterbear.cloud", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Programming Language :: Python", "Programming Language :: Python :: 3.7"], "description": "## AIM\n\nAIM: Application Infrastructure Manager is an all-in-one AWS infrastructure orchestration tool.\nIt has a command-line interface for managing complete, working environments based on declarative,\nsemantic YAML files.\n\nAIM has the following benefits for managing your Infrastructure as Code projects:\n\n\n - All-in-one: work at the highest levels of abstraction possible. You don't need learn how\n   to cobble together a collection of tools. Replace several different languages with a single\n   directory of YAML files.\n\n - Declarative configuration: declarative configuration gives your infrastructure\n   repeatability and predictability.\n\n - DRY configuration: Environments are described with hiearchical YAML structures that override\n   base network and application defaults. You can see at a glance exactly which configuration is\n   different between your staging and production environments. You can override configuration for\n   a whole environment, or for multi-region environments, have per-region overrides.\n\n - Time saving features: Want to alert when instances are in swap? Simply declare a swap metric\n   and swap alarm for your application and AIM will ensure an agent is configured and installed\n   on your instances, as well as auto-generating an IAM Policy to allow your instances to report\n   metrics to CloudWatch.\n\n - Intelligent references remove cumbersome glue code: AIM configuration can refer to other configuration\n   objects. Networks refer to just a human-readable name of the account they are provisioned in.\n   When a Lambda declares a subscription to an SNS Topic, AIM can auto-generate an IAM Polciy to allow that.\n\n - Validate all the things: AIM configuration has a hierarchical structure with an explicit schema. Add the\n   ability for configuration to reference other objects and you can validate that you have sane configuration\n   before you even try to deploy anything to AWS.\n\n - Multi-region, multi-account: you can provision an application to multiple regions,\n   but also to multiple accounts. You can even quickly provision new child accounts\n   that will have delegate role access from an admin role in your parent account.\n\n - Metadata everywhere: When problems happen with configuration or provisioning, or when an alarm\n   fires, every resource knows exactly how it fits into the system. Alarm and error messages have\n   full structured information about their account, region, environment and application.\n\n# Resources\n\n - [Documentation](https://aim.waterbear.cloud)\n\n - [PyPI Package](https://pypi.org/project/aim/)\n\n# Credits\n\nAIM is developed by [Waterbear Cloud](https://waterbear.cloud) and used to support their Waterbear Cloud platform.\n\n\n\nChangelog for aim\n=================\n\n3.1.0 (2019-11-06)\n------------------\n\n### Added\n\n- DBParameterGroups template.\n\n- LogGroups template adds MetricFilters if present.\n\n- Respect the `global_role_names` field for the IAM Role RoleName.\n\n- Alarms can be provisioned at the Application level without being specific to a Resoure context.\n\n- Route53HealthChecks can be provisioned. These are global resources with the application region\n  suffixed to the health check name. The CloudFormation template and CLoudWatch Alarm are provisioned\n  in us-east-1, as that is where the metrics are hard-coded to by AWS.\n\n- Lambda template will grant Lambda permissions to an Events Rule in the same application that\n  references it as a Target.\n\n- New Events Rule template.\n\n- Added change_protected support to Cloudfront, IAM Managed Policies, and IAM Role templates.\n\n- Added a CodeBuild IAM Permission for IAM Users\n\n- Added the EIP Application Resource and a support 'eip' field to the ASG resource for associating an EIP with a single instance ASG.\n\n- Added `cftemplate_iam_user_delegates_2019_10_02` legacy flag to make user delegate role stack names consistent with others.\n\n- Added support to allow ASG to launch into a single subnet.\n\n- Added ResourceGroupid to the ElastiCache Application Resource\n\n- Added caching to instance AMI ID function.ref lookups.\n\n- Added swap, wget installer, and get tag value helper functions to the EC2 Launch manager and moved all of its scripts to a separate file that is copied from S3 and executed.\n\n- Added VPC Associations to the VPC private hosted zone.\n\n- Added VpcConfig to the Lambda function cftemplate.\n\n- Added `secrets_manager` to Network Environments.\n\n- Added support for !Ref and !Sub to yaml.py\n\n- Added a 'Nested StackGroup' feature to StackGroups. This allows us to nest a StackGroup in the place of a Stack within a StackGroup. This was needed to allow Route53 RecordSets to be created in order, but to allow a different Stack name from the current StackGroup being populated.\n\n- Added the Route53RecordSet CFTemplate and ctl_route53.add_record_set() method.\n\n- Added the EBS Application Resources.\n  Added `ebs_volume_mounts` to IASG to mount volumes to single instance groups.\n  Added the EBS Launch Bundle to implement `ebs_volume_mounts`\n\n### Changed\n\n- Fixed bug where if a AssumeRolePolicyDocument has both `service` and `aws` fields for the Principal,\n  the `aws` field was ignored.\n\n- Improvements to the CLI. Verbose flag is now respected.\n  Yes/no questions are consistent and can be answered with 'y', 'n', 'yes' or 'no'.\n  Clean-up to formatting. Only prompt for provision changes when running the provision\n  sub-command.\n\n- ALB Alarms now provision with an `LBApplication` suffix and match the Resoruce.type field.\n\n- Made IAM Users default password more complex to satisfy password contraints.\n\n- Updated some of the cookiecutter templates for `aim init project`.\n\n- Ported the Route53 CFTemplate to troposphere and separated zones into their own stacks.\n  Added the legacy flag `route53_hosted_zone_2019_10_12` for this change.\n\n- Cleaned up expired token handling in Stack() by consolidating duplicate code into a single method.\n\n- Refactor of EC2 Launch Manager user data script management. Common functions are now stored in S3 to reduce user data size.\n\n- Modifed LogGroup names to include the Network Environment name.\n\n- Refactored how Route53 RecordSets are being created. The previous design created RecordSets right in the resource's template. The new design uses the Route53 Controller to create RecordSets in their own stack using an account global name . The reason is that CloudFormation does not allow you to modify RecordSets unless you are modifying the stack that created it. This made it impossible to move DNS between resources without first deleting the record and recreating it. With a global controller, we can simple rewrite the RecordSets to new values.\n  Added `route53_record_set_2019_10_16` legacy flag to deal with pre-existing RecordSets\n\n- Moved app_engine.get_stack_from_ref to StackGroup\n\n### Fixed\n\n- Fixed a couple of AWS token expiry retries from failing.\n\n- AWS session caching was not properly caching.\n\n- NotificationGroups controller was not setting up refs correctly, nor resolving them correctly.\n\n3.0.0 (2019-09-27)\n------------------\n\n### Added\n\n- New directory `aimdata` is created within an AIM Project by AIM. This is used to record state\n  of AIM provisioning. CloudFormation templates used to create stacks in AWS are cached as well\n  as the last copy of the AIM Project YAML files. These files are used to speed up subsequent\n  runs and more importantly can show you what is changed between AIM runs to make it easier to\n  review new changes before they are actaully made to AWS.\n\n- CLI: Display a diff of changes from last AIM run and new run in the AIM Project YAML configuration.\n  The `-d`, `--disable-validation` flag can be used to\n\n- CLI: Display changes and ask for verification before updating CF templates. This can be disabled\n  with the `-y` flag.\n\n- CLI: Offer to delete a stack in a CREATE FAILED state so that a new stack can be provisioned in it's place.\n\n- AWS credentials can now be set to live for up to 12 hours. You can set the .credentials field to\n `mfa_session_expiry_secs: 43200 # 12 hours` to enable this. The default is still one hour.\n\n- Resources with the `change_protected` flag set to true will not have their CloudFormation stacks\n  updated.\n\n- API Gateway REST API can now have models, methods and stages. It supports Lambda integration\n  with either 'AWS_PROXY' via an assumed Role or 'AWS' via a Lambda Permission.\n\n- S3Bucket has NotificationConfiguration for Lambdas. Lambda will detect if an S3Bucket within the\n  same application notifies the lambda and will automatically add a Lambda permission to allow S3 to\n  invoke the lambda.\n\n- Lambda AWS::SNS::Subscription resources now have a Region property.\n\n- CloudWatchAlarms template has a `notification_region` class attribute that can be set if\n  notificationgroup subscriptions need to go to a single region.\n\n- CloudFront has Origin ID support.\n\n- EFS Resource support.\n\n### Changed\n\n- Breaking! CF Template names have been\u00a0refactored so that they are more user friendly when listed in the\n  AWS Console. This requires deletion and reprovisioning of AWS resources. Templates now have new\n  consistent ways to create their names, so this should be the last time this change happens.\n\n- CLI: References to NetworkEnvironments now use consistent `aim.ref` syntax, e.g.\n  `aim provision netenv <ne>.<env>.<region>`\n\n- All stacks are created with Termination Protection set.\n\n- CF template base class `aim.cftemplates.cftemplates.CFTemplate` has new methods for creating consistent\n  AWS names: `create_resource_name()`, `create_resoruce_name_join()`, `create_cfn_logical_id()`,\n  and `create_cfn_logical_id_join()`.\n\n- Console messages reworked to show relevant information in columns.\n\n- CF template base class method `gen_parameter` renamed to `create_cfn_parameter`.\n\n- S3 controller now relies on the bucket name to come from the S3Bucket model object.\n\n- Lambda code.s3_bucket field can now be an aim.ref or a plain bucket name.\n\n- You can provision without specifying the region and it will include all regions in an env.\n\n- NotificationGroups are loaded from project['resource']['notificationgroups']\n\n### Fixed\n\n- CloudTrail generates it's own CloudWatch LogGroup if needed. Outputs for CloudTrail and CloudWatch LogGroup.\n\n- APIGateway, SNSTopics and Lambda now respect the `enabled` field.\n\n2.0.0 (2019-08-26)\n------------------\n\n### Fixed\n\n- snstopic output ref and lambda alarm ref fixes.\n\n- Added IAM Users feature for creating IAM Users and configuring console access\n  assigning permissions, and access keys.\n\n### Added\n\n- Moved aim reference generation into the Model. Model objects now have .aim_ref and\n  .aim_ref_parts properties which contain their aim.ref reference.\n\n- Added StackOutputsManger(). This now creates and maintains $AIM_HOME/ResourceMap.yaml\n  which will include a complete list of all stack outputs that are referenced using the\n  yaml dictionary path of the resource.\n\n- ALB Outputs includes TargetGroup Fullname.\n\n- Minimal APIGatewayRestApi template.\n\n- Added external_resource support to the ACM\n\n- Added ReadOnly support to the Administrator IAMUserPermission\n\n### Changed\n\n- Automated CloudFront Parameter lists for things like security group and target arn lists.\n\n- Consolidated CFTemplates and Stack's and other Stack cleanups.\n\n- CloudWatch Alarms multi-Dimension Alarms now expect an aim.ref. CloudWatch Alarms are now Troposphere.\n\n\n1.4.0 (2019-08-21)\n------------------\n\n### Added\n\n- CloudTrail resource adds basic CloudTrail provisioning.\n\n- LogGroups are created for all groups that the CloudWatch Agent will require.\n  Uses the new Logging schema in aim.models.\n\n- Added CloudFront application Resource\n\n- Added VPC Peering application resource.\n\n- Automated the glue of passing outputs from a stack to the parameter of another stack.\n\n1.3.1 (2019-08-07)\n------------------\n\n### Fixed\n\n- Python packaging, also include version.txt.\n\n\n1.3.0 (2019-08-07)\n------------------\n\n### Changed\n\n- CloudWatchAlarms now check for namespace and dimesions fields, that\n  can be used to override the default of one primary dimension and the resource_name.\n\n### Fixed\n\n- Python dist did not include README.md and CHANGELOG.md\n\n1.2.0 (2019-08-06)\n------------------\n\n### Added\n\n- Deleting resources can leave dangling CloudFormation templates in your\n  account. Controllers for NetworkEnvironments now keep track of templates\n  they've provisioned and warn you about unused templates.\n\n- NotificationGroups can be provisioned as SNS Topics and subscriptions.\n  Use ``aim provision notificationgroups``.\n\n- CloudWatch Alarm descriptions are JSON with metadata about the environment,\n  region, application, resource group and resource that the alarm is for.\n\n- CloudWatch Alarms will not notify the SNS Topics that they are subscribed to.\n\n- Rewrote commands with consistent way of passing arguments to controllers.\n  Controllers args can now be all lower case.\n\n- Added Account initialization to 'aim init project'.\n\n### Changed\n\n - AIM references have a new format! It's simpler and more consistent.\n   Every ref now starts with ``aim.ref ``.\n\n - Created ``aim.utils`` to clean up AimContext object.\n\n1.1.0 (2019-07-24)\n------------------\n\n### Added\n\n- Logging functionality added to monitoring. Logs will be ingested by a configured\n  CloudWatch Agent and sent to a CloudWatch Log Group.\n\n- Added --nocache to cli to force updates to stacks.\n\n- CLI reports human readable validation errors from AIM project configuration files\n\n- \"aim ftest\" command added to run functional tests on the \"aim init project\"\n  templates. This command will be expanded in the future so you can test your\n  own aim projects.\n\n- Resources/S3.yaml is now functional: eg. aim validate S3\n\n- Added Region to cftemplates so we can do inline replace of <account> and <region>.\n\n- Added LambdaPermission and CWEventRule cftemplates.\n\n- Added CloudWatchController and LambdaController.\n\n### Fixed\n\n - cookiecutter generated .credentials file was not in git repo as, the cookiecutter\n   .gitignore file was causing it to be ignored.\n\n\n1.0.0 (2019-07-06)\n------------------\n\n### Added\n\n- Initial documentation with AIM project site at https://aim.waterbear.cloud/en/latest/\n\n- Added init command with ability to create starting templates for AIM projects\n  with the cookiecutter project under the hood.\n\n- Added redirect to Listner rules in the ALB\n\n### Changed\n\n- Document and refactor AIM CLI.\n\n- Moved yaml.py to aim.core\n\n- Refactored S3 Controller\n\n- Ported Route53 config to the model\n\n- Ported CodeCommit config to the model\n\n- Refactored S3 to use Application StackGroup\n\n- CPBD artifacts s3 bucket now uses S3 Resource in NetEnv yaml instead\n\n- Converted the ALB's listener and listener rules to dicts from lists\n\n### Removed\n\n- Removed deprecated configuration\n\n\n0.6.0 (2019-06-21)\n-----------------------\n\n- Document and clean-up AIM CLI\n\n- Validate and Provision functioning after cleanup\n\n\n0.5.0 (2019-06-21)\n------------------\n\n- First open source release", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/waterbear-cloud/aim", "keywords": "AWS,Waterbear,Cloud,Infrastructure-as-Code", "license": "", "maintainer": "", "maintainer_email": "", "name": "aim", "package_url": "https://pypi.org/project/aim/", "platform": "", "project_url": "https://pypi.org/project/aim/", "project_urls": {"Homepage": "https://github.com/waterbear-cloud/aim"}, "release_url": "https://pypi.org/project/aim/3.1.0/", "requires_dist": null, "requires_python": "", "summary": "AIM: Application Infrastructure Manager", "version": "3.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>AIM</h2>\n<p>AIM: Application Infrastructure Manager is an all-in-one AWS infrastructure orchestration tool.\nIt has a command-line interface for managing complete, working environments based on declarative,\nsemantic YAML files.</p>\n<p>AIM has the following benefits for managing your Infrastructure as Code projects:</p>\n<ul>\n<li>\n<p>All-in-one: work at the highest levels of abstraction possible. You don't need learn how\nto cobble together a collection of tools. Replace several different languages with a single\ndirectory of YAML files.</p>\n</li>\n<li>\n<p>Declarative configuration: declarative configuration gives your infrastructure\nrepeatability and predictability.</p>\n</li>\n<li>\n<p>DRY configuration: Environments are described with hiearchical YAML structures that override\nbase network and application defaults. You can see at a glance exactly which configuration is\ndifferent between your staging and production environments. You can override configuration for\na whole environment, or for multi-region environments, have per-region overrides.</p>\n</li>\n<li>\n<p>Time saving features: Want to alert when instances are in swap? Simply declare a swap metric\nand swap alarm for your application and AIM will ensure an agent is configured and installed\non your instances, as well as auto-generating an IAM Policy to allow your instances to report\nmetrics to CloudWatch.</p>\n</li>\n<li>\n<p>Intelligent references remove cumbersome glue code: AIM configuration can refer to other configuration\nobjects. Networks refer to just a human-readable name of the account they are provisioned in.\nWhen a Lambda declares a subscription to an SNS Topic, AIM can auto-generate an IAM Polciy to allow that.</p>\n</li>\n<li>\n<p>Validate all the things: AIM configuration has a hierarchical structure with an explicit schema. Add the\nability for configuration to reference other objects and you can validate that you have sane configuration\nbefore you even try to deploy anything to AWS.</p>\n</li>\n<li>\n<p>Multi-region, multi-account: you can provision an application to multiple regions,\nbut also to multiple accounts. You can even quickly provision new child accounts\nthat will have delegate role access from an admin role in your parent account.</p>\n</li>\n<li>\n<p>Metadata everywhere: When problems happen with configuration or provisioning, or when an alarm\nfires, every resource knows exactly how it fits into the system. Alarm and error messages have\nfull structured information about their account, region, environment and application.</p>\n</li>\n</ul>\n<h1>Resources</h1>\n<ul>\n<li>\n<p><a href=\"https://aim.waterbear.cloud\" rel=\"nofollow\">Documentation</a></p>\n</li>\n<li>\n<p><a href=\"https://pypi.org/project/aim/\" rel=\"nofollow\">PyPI Package</a></p>\n</li>\n</ul>\n<h1>Credits</h1>\n<p>AIM is developed by <a href=\"https://waterbear.cloud\" rel=\"nofollow\">Waterbear Cloud</a> and used to support their Waterbear Cloud platform.</p>\n<h1>Changelog for aim</h1>\n<h2>3.1.0 (2019-11-06)</h2>\n<h3>Added</h3>\n<ul>\n<li>\n<p>DBParameterGroups template.</p>\n</li>\n<li>\n<p>LogGroups template adds MetricFilters if present.</p>\n</li>\n<li>\n<p>Respect the <code>global_role_names</code> field for the IAM Role RoleName.</p>\n</li>\n<li>\n<p>Alarms can be provisioned at the Application level without being specific to a Resoure context.</p>\n</li>\n<li>\n<p>Route53HealthChecks can be provisioned. These are global resources with the application region\nsuffixed to the health check name. The CloudFormation template and CLoudWatch Alarm are provisioned\nin us-east-1, as that is where the metrics are hard-coded to by AWS.</p>\n</li>\n<li>\n<p>Lambda template will grant Lambda permissions to an Events Rule in the same application that\nreferences it as a Target.</p>\n</li>\n<li>\n<p>New Events Rule template.</p>\n</li>\n<li>\n<p>Added change_protected support to Cloudfront, IAM Managed Policies, and IAM Role templates.</p>\n</li>\n<li>\n<p>Added a CodeBuild IAM Permission for IAM Users</p>\n</li>\n<li>\n<p>Added the EIP Application Resource and a support 'eip' field to the ASG resource for associating an EIP with a single instance ASG.</p>\n</li>\n<li>\n<p>Added <code>cftemplate_iam_user_delegates_2019_10_02</code> legacy flag to make user delegate role stack names consistent with others.</p>\n</li>\n<li>\n<p>Added support to allow ASG to launch into a single subnet.</p>\n</li>\n<li>\n<p>Added ResourceGroupid to the ElastiCache Application Resource</p>\n</li>\n<li>\n<p>Added caching to instance AMI ID function.ref lookups.</p>\n</li>\n<li>\n<p>Added swap, wget installer, and get tag value helper functions to the EC2 Launch manager and moved all of its scripts to a separate file that is copied from S3 and executed.</p>\n</li>\n<li>\n<p>Added VPC Associations to the VPC private hosted zone.</p>\n</li>\n<li>\n<p>Added VpcConfig to the Lambda function cftemplate.</p>\n</li>\n<li>\n<p>Added <code>secrets_manager</code> to Network Environments.</p>\n</li>\n<li>\n<p>Added support for !Ref and !Sub to yaml.py</p>\n</li>\n<li>\n<p>Added a 'Nested StackGroup' feature to StackGroups. This allows us to nest a StackGroup in the place of a Stack within a StackGroup. This was needed to allow Route53 RecordSets to be created in order, but to allow a different Stack name from the current StackGroup being populated.</p>\n</li>\n<li>\n<p>Added the Route53RecordSet CFTemplate and ctl_route53.add_record_set() method.</p>\n</li>\n<li>\n<p>Added the EBS Application Resources.\nAdded <code>ebs_volume_mounts</code> to IASG to mount volumes to single instance groups.\nAdded the EBS Launch Bundle to implement <code>ebs_volume_mounts</code></p>\n</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>\n<p>Fixed bug where if a AssumeRolePolicyDocument has both <code>service</code> and <code>aws</code> fields for the Principal,\nthe <code>aws</code> field was ignored.</p>\n</li>\n<li>\n<p>Improvements to the CLI. Verbose flag is now respected.\nYes/no questions are consistent and can be answered with 'y', 'n', 'yes' or 'no'.\nClean-up to formatting. Only prompt for provision changes when running the provision\nsub-command.</p>\n</li>\n<li>\n<p>ALB Alarms now provision with an <code>LBApplication</code> suffix and match the Resoruce.type field.</p>\n</li>\n<li>\n<p>Made IAM Users default password more complex to satisfy password contraints.</p>\n</li>\n<li>\n<p>Updated some of the cookiecutter templates for <code>aim init project</code>.</p>\n</li>\n<li>\n<p>Ported the Route53 CFTemplate to troposphere and separated zones into their own stacks.\nAdded the legacy flag <code>route53_hosted_zone_2019_10_12</code> for this change.</p>\n</li>\n<li>\n<p>Cleaned up expired token handling in Stack() by consolidating duplicate code into a single method.</p>\n</li>\n<li>\n<p>Refactor of EC2 Launch Manager user data script management. Common functions are now stored in S3 to reduce user data size.</p>\n</li>\n<li>\n<p>Modifed LogGroup names to include the Network Environment name.</p>\n</li>\n<li>\n<p>Refactored how Route53 RecordSets are being created. The previous design created RecordSets right in the resource's template. The new design uses the Route53 Controller to create RecordSets in their own stack using an account global name . The reason is that CloudFormation does not allow you to modify RecordSets unless you are modifying the stack that created it. This made it impossible to move DNS between resources without first deleting the record and recreating it. With a global controller, we can simple rewrite the RecordSets to new values.\nAdded <code>route53_record_set_2019_10_16</code> legacy flag to deal with pre-existing RecordSets</p>\n</li>\n<li>\n<p>Moved app_engine.get_stack_from_ref to StackGroup</p>\n</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>\n<p>Fixed a couple of AWS token expiry retries from failing.</p>\n</li>\n<li>\n<p>AWS session caching was not properly caching.</p>\n</li>\n<li>\n<p>NotificationGroups controller was not setting up refs correctly, nor resolving them correctly.</p>\n</li>\n</ul>\n<h2>3.0.0 (2019-09-27)</h2>\n<h3>Added</h3>\n<ul>\n<li>\n<p>New directory <code>aimdata</code> is created within an AIM Project by AIM. This is used to record state\nof AIM provisioning. CloudFormation templates used to create stacks in AWS are cached as well\nas the last copy of the AIM Project YAML files. These files are used to speed up subsequent\nruns and more importantly can show you what is changed between AIM runs to make it easier to\nreview new changes before they are actaully made to AWS.</p>\n</li>\n<li>\n<p>CLI: Display a diff of changes from last AIM run and new run in the AIM Project YAML configuration.\nThe <code>-d</code>, <code>--disable-validation</code> flag can be used to</p>\n</li>\n<li>\n<p>CLI: Display changes and ask for verification before updating CF templates. This can be disabled\nwith the <code>-y</code> flag.</p>\n</li>\n<li>\n<p>CLI: Offer to delete a stack in a CREATE FAILED state so that a new stack can be provisioned in it's place.</p>\n</li>\n<li>\n<p>AWS credentials can now be set to live for up to 12 hours. You can set the .credentials field to\n<code>mfa_session_expiry_secs: 43200 # 12 hours</code> to enable this. The default is still one hour.</p>\n</li>\n<li>\n<p>Resources with the <code>change_protected</code> flag set to true will not have their CloudFormation stacks\nupdated.</p>\n</li>\n<li>\n<p>API Gateway REST API can now have models, methods and stages. It supports Lambda integration\nwith either 'AWS_PROXY' via an assumed Role or 'AWS' via a Lambda Permission.</p>\n</li>\n<li>\n<p>S3Bucket has NotificationConfiguration for Lambdas. Lambda will detect if an S3Bucket within the\nsame application notifies the lambda and will automatically add a Lambda permission to allow S3 to\ninvoke the lambda.</p>\n</li>\n<li>\n<p>Lambda AWS::SNS::Subscription resources now have a Region property.</p>\n</li>\n<li>\n<p>CloudWatchAlarms template has a <code>notification_region</code> class attribute that can be set if\nnotificationgroup subscriptions need to go to a single region.</p>\n</li>\n<li>\n<p>CloudFront has Origin ID support.</p>\n</li>\n<li>\n<p>EFS Resource support.</p>\n</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>\n<p>Breaking! CF Template names have been\u00a0refactored so that they are more user friendly when listed in the\nAWS Console. This requires deletion and reprovisioning of AWS resources. Templates now have new\nconsistent ways to create their names, so this should be the last time this change happens.</p>\n</li>\n<li>\n<p>CLI: References to NetworkEnvironments now use consistent <code>aim.ref</code> syntax, e.g.\n<code>aim provision netenv &lt;ne&gt;.&lt;env&gt;.&lt;region&gt;</code></p>\n</li>\n<li>\n<p>All stacks are created with Termination Protection set.</p>\n</li>\n<li>\n<p>CF template base class <code>aim.cftemplates.cftemplates.CFTemplate</code> has new methods for creating consistent\nAWS names: <code>create_resource_name()</code>, <code>create_resoruce_name_join()</code>, <code>create_cfn_logical_id()</code>,\nand <code>create_cfn_logical_id_join()</code>.</p>\n</li>\n<li>\n<p>Console messages reworked to show relevant information in columns.</p>\n</li>\n<li>\n<p>CF template base class method <code>gen_parameter</code> renamed to <code>create_cfn_parameter</code>.</p>\n</li>\n<li>\n<p>S3 controller now relies on the bucket name to come from the S3Bucket model object.</p>\n</li>\n<li>\n<p>Lambda code.s3_bucket field can now be an aim.ref or a plain bucket name.</p>\n</li>\n<li>\n<p>You can provision without specifying the region and it will include all regions in an env.</p>\n</li>\n<li>\n<p>NotificationGroups are loaded from project['resource']['notificationgroups']</p>\n</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>\n<p>CloudTrail generates it's own CloudWatch LogGroup if needed. Outputs for CloudTrail and CloudWatch LogGroup.</p>\n</li>\n<li>\n<p>APIGateway, SNSTopics and Lambda now respect the <code>enabled</code> field.</p>\n</li>\n</ul>\n<h2>2.0.0 (2019-08-26)</h2>\n<h3>Fixed</h3>\n<ul>\n<li>\n<p>snstopic output ref and lambda alarm ref fixes.</p>\n</li>\n<li>\n<p>Added IAM Users feature for creating IAM Users and configuring console access\nassigning permissions, and access keys.</p>\n</li>\n</ul>\n<h3>Added</h3>\n<ul>\n<li>\n<p>Moved aim reference generation into the Model. Model objects now have .aim_ref and\n.aim_ref_parts properties which contain their aim.ref reference.</p>\n</li>\n<li>\n<p>Added StackOutputsManger(). This now creates and maintains $AIM_HOME/ResourceMap.yaml\nwhich will include a complete list of all stack outputs that are referenced using the\nyaml dictionary path of the resource.</p>\n</li>\n<li>\n<p>ALB Outputs includes TargetGroup Fullname.</p>\n</li>\n<li>\n<p>Minimal APIGatewayRestApi template.</p>\n</li>\n<li>\n<p>Added external_resource support to the ACM</p>\n</li>\n<li>\n<p>Added ReadOnly support to the Administrator IAMUserPermission</p>\n</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>\n<p>Automated CloudFront Parameter lists for things like security group and target arn lists.</p>\n</li>\n<li>\n<p>Consolidated CFTemplates and Stack's and other Stack cleanups.</p>\n</li>\n<li>\n<p>CloudWatch Alarms multi-Dimension Alarms now expect an aim.ref. CloudWatch Alarms are now Troposphere.</p>\n</li>\n</ul>\n<h2>1.4.0 (2019-08-21)</h2>\n<h3>Added</h3>\n<ul>\n<li>\n<p>CloudTrail resource adds basic CloudTrail provisioning.</p>\n</li>\n<li>\n<p>LogGroups are created for all groups that the CloudWatch Agent will require.\nUses the new Logging schema in aim.models.</p>\n</li>\n<li>\n<p>Added CloudFront application Resource</p>\n</li>\n<li>\n<p>Added VPC Peering application resource.</p>\n</li>\n<li>\n<p>Automated the glue of passing outputs from a stack to the parameter of another stack.</p>\n</li>\n</ul>\n<h2>1.3.1 (2019-08-07)</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Python packaging, also include version.txt.</li>\n</ul>\n<h2>1.3.0 (2019-08-07)</h2>\n<h3>Changed</h3>\n<ul>\n<li>CloudWatchAlarms now check for namespace and dimesions fields, that\ncan be used to override the default of one primary dimension and the resource_name.</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>Python dist did not include README.md and CHANGELOG.md</li>\n</ul>\n<h2>1.2.0 (2019-08-06)</h2>\n<h3>Added</h3>\n<ul>\n<li>\n<p>Deleting resources can leave dangling CloudFormation templates in your\naccount. Controllers for NetworkEnvironments now keep track of templates\nthey've provisioned and warn you about unused templates.</p>\n</li>\n<li>\n<p>NotificationGroups can be provisioned as SNS Topics and subscriptions.\nUse <code>aim provision notificationgroups</code>.</p>\n</li>\n<li>\n<p>CloudWatch Alarm descriptions are JSON with metadata about the environment,\nregion, application, resource group and resource that the alarm is for.</p>\n</li>\n<li>\n<p>CloudWatch Alarms will not notify the SNS Topics that they are subscribed to.</p>\n</li>\n<li>\n<p>Rewrote commands with consistent way of passing arguments to controllers.\nControllers args can now be all lower case.</p>\n</li>\n<li>\n<p>Added Account initialization to 'aim init project'.</p>\n</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>\n<p>AIM references have a new format! It's simpler and more consistent.\nEvery ref now starts with <code>aim.ref</code>.</p>\n</li>\n<li>\n<p>Created <code>aim.utils</code> to clean up AimContext object.</p>\n</li>\n</ul>\n<h2>1.1.0 (2019-07-24)</h2>\n<h3>Added</h3>\n<ul>\n<li>\n<p>Logging functionality added to monitoring. Logs will be ingested by a configured\nCloudWatch Agent and sent to a CloudWatch Log Group.</p>\n</li>\n<li>\n<p>Added --nocache to cli to force updates to stacks.</p>\n</li>\n<li>\n<p>CLI reports human readable validation errors from AIM project configuration files</p>\n</li>\n<li>\n<p>\"aim ftest\" command added to run functional tests on the \"aim init project\"\ntemplates. This command will be expanded in the future so you can test your\nown aim projects.</p>\n</li>\n<li>\n<p>Resources/S3.yaml is now functional: eg. aim validate S3</p>\n</li>\n<li>\n<p>Added Region to cftemplates so we can do inline replace of &lt;account&gt; and &lt;region&gt;.</p>\n</li>\n<li>\n<p>Added LambdaPermission and CWEventRule cftemplates.</p>\n</li>\n<li>\n<p>Added CloudWatchController and LambdaController.</p>\n</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>cookiecutter generated .credentials file was not in git repo as, the cookiecutter\n.gitignore file was causing it to be ignored.</li>\n</ul>\n<h2>1.0.0 (2019-07-06)</h2>\n<h3>Added</h3>\n<ul>\n<li>\n<p>Initial documentation with AIM project site at <a href=\"https://aim.waterbear.cloud/en/latest/\" rel=\"nofollow\">https://aim.waterbear.cloud/en/latest/</a></p>\n</li>\n<li>\n<p>Added init command with ability to create starting templates for AIM projects\nwith the cookiecutter project under the hood.</p>\n</li>\n<li>\n<p>Added redirect to Listner rules in the ALB</p>\n</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>\n<p>Document and refactor AIM CLI.</p>\n</li>\n<li>\n<p>Moved yaml.py to aim.core</p>\n</li>\n<li>\n<p>Refactored S3 Controller</p>\n</li>\n<li>\n<p>Ported Route53 config to the model</p>\n</li>\n<li>\n<p>Ported CodeCommit config to the model</p>\n</li>\n<li>\n<p>Refactored S3 to use Application StackGroup</p>\n</li>\n<li>\n<p>CPBD artifacts s3 bucket now uses S3 Resource in NetEnv yaml instead</p>\n</li>\n<li>\n<p>Converted the ALB's listener and listener rules to dicts from lists</p>\n</li>\n</ul>\n<h3>Removed</h3>\n<ul>\n<li>Removed deprecated configuration</li>\n</ul>\n<h2>0.6.0 (2019-06-21)</h2>\n<ul>\n<li>\n<p>Document and clean-up AIM CLI</p>\n</li>\n<li>\n<p>Validate and Provision functioning after cleanup</p>\n</li>\n</ul>\n<h2>0.5.0 (2019-06-21)</h2>\n<ul>\n<li>First open source release</li>\n</ul>\n\n          </div>"}, "last_serial": 6085874, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "9f397b396b6eca17c43113f095cabe20", "sha256": "52387a455c73764437aafde8a07cd2d943ffc7315bc9dafd825a76238962a241"}, "downloads": -1, "filename": "aim-0.5.0.tar.gz", "has_sig": false, "md5_digest": "9f397b396b6eca17c43113f095cabe20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 76309, "upload_time": "2019-06-21T19:03:19", "upload_time_iso_8601": "2019-06-21T19:03:19.448635Z", "url": "https://files.pythonhosted.org/packages/1c/8f/90402ab45347ab3f078c67c71f1646a3920f07ed923baa1f8dc6f85b0202/aim-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "74c1c2cec167cecc0cdcb81f648624cc", "sha256": "d238925eea4a2f6f63090e0ffe19003506b06749775215501e112d2b6c238396"}, "downloads": -1, "filename": "aim-0.6.0.tar.gz", "has_sig": false, "md5_digest": "74c1c2cec167cecc0cdcb81f648624cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75860, "upload_time": "2019-06-22T04:54:19", "upload_time_iso_8601": "2019-06-22T04:54:19.393437Z", "url": "https://files.pythonhosted.org/packages/8b/46/c8af74ac1a3b2c3766342e4f87c5803989635e3311270cc7ae992e48f048/aim-0.6.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2749b1214eabd801df2ec918eadfa4ea", "sha256": "15e1c26f29ad759ddf7db44a4b3438e49f079fb9a1b0da07eb29d6ed7487902e"}, "downloads": -1, "filename": "aim-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2749b1214eabd801df2ec918eadfa4ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82700, "upload_time": "2019-07-06T19:16:33", "upload_time_iso_8601": "2019-07-06T19:16:33.930607Z", "url": "https://files.pythonhosted.org/packages/fe/c1/b76e245d777f99b24ddf372cb7614326da14e5f539a461d2e91e7939a1bc/aim-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "7a18a421e525c917de15260790cd80d5", "sha256": "abcc5c413aa6087cd3949ece704a75d05029f28805cb9817270011f479fb1bd1"}, "downloads": -1, "filename": "aim-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7a18a421e525c917de15260790cd80d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 90514, "upload_time": "2019-07-25T01:35:51", "upload_time_iso_8601": "2019-07-25T01:35:51.535443Z", "url": "https://files.pythonhosted.org/packages/40/69/bebd1b82195f9c998d43084bbaa6258df5a9e9ad0509e77f4df0c79b74ce/aim-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "16edbaee88a6d32c5737c1d8e49b266a", "sha256": "054ab4096da0c28043d424afad0117c59aaabe65d333578a45285630ccfb3258"}, "downloads": -1, "filename": "aim-1.2.0.tar.gz", "has_sig": false, "md5_digest": "16edbaee88a6d32c5737c1d8e49b266a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99617, "upload_time": "2019-08-06T20:48:43", "upload_time_iso_8601": "2019-08-06T20:48:43.329340Z", "url": "https://files.pythonhosted.org/packages/66/0c/3f4a0bed286e92394b134834dd2001d651ea9e59cc13f9149af22aedc5d0/aim-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "795eb043e6a49a84a49a1acf3b3e2f58", "sha256": "7967bf3eced805a1fd6b6bd703c43641d1fbc56062bc45d3839c9707316684e2"}, "downloads": -1, "filename": "aim-1.3.0.tar.gz", "has_sig": false, "md5_digest": "795eb043e6a49a84a49a1acf3b3e2f58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100958, "upload_time": "2019-08-07T22:29:52", "upload_time_iso_8601": "2019-08-07T22:29:52.460177Z", "url": "https://files.pythonhosted.org/packages/f2/56/3876bfeafcedff1f5aa71071f5ea094dd438142ad3e13b1d33a7086a03ec/aim-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "892696e99de7a2eab37c4468c9792669", "sha256": "8076568e3578e23571bf8481b10bfa7c29a7971c00975fa77cb2fed4f95f0cb3"}, "downloads": -1, "filename": "aim-1.3.1.tar.gz", "has_sig": false, "md5_digest": "892696e99de7a2eab37c4468c9792669", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101017, "upload_time": "2019-08-07T22:42:31", "upload_time_iso_8601": "2019-08-07T22:42:31.765484Z", "url": "https://files.pythonhosted.org/packages/bf/7b/dea781bbc9f7703ceaf7ab6f25c7049a00a9996a0277cc9bd595dd9574c7/aim-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "801551981946176cece60a11610e5495", "sha256": "210e6d3f3ca81ab353905469d7e3abd53d66dbf11c140494d57fc8accfe3fc84"}, "downloads": -1, "filename": "aim-1.4.0.tar.gz", "has_sig": false, "md5_digest": "801551981946176cece60a11610e5495", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111994, "upload_time": "2019-08-21T18:49:09", "upload_time_iso_8601": "2019-08-21T18:49:09.373704Z", "url": "https://files.pythonhosted.org/packages/04/1a/76512a95e641286c85cdc283e88614c801af4af257a7d6caadfdcb97e6e4/aim-1.4.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "1aac8b847f230ce44dcf2ca748230e2e", "sha256": "48174229c013d31015241c30214f93ee989cc0d2ee6c2e891c082e6b63a92afd"}, "downloads": -1, "filename": "aim-2.0.0.tar.gz", "has_sig": false, "md5_digest": "1aac8b847f230ce44dcf2ca748230e2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117082, "upload_time": "2019-08-26T20:16:41", "upload_time_iso_8601": "2019-08-26T20:16:41.242794Z", "url": "https://files.pythonhosted.org/packages/33/6d/1ccad609b0ecd4374fce876c55a689f16c10ea225b38005d3bb61dd2863b/aim-2.0.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "014e291a8ee029360797ce90a4a6968c", "sha256": "3c6015d65ae379c5c6262ffec4b67700a8b327bc335988cc7b2828724d60a938"}, "downloads": -1, "filename": "aim-3.0.0.tar.gz", "has_sig": false, "md5_digest": "014e291a8ee029360797ce90a4a6968c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 142651, "upload_time": "2019-09-27T08:09:23", "upload_time_iso_8601": "2019-09-27T08:09:23.278864Z", "url": "https://files.pythonhosted.org/packages/42/73/02dda17f44053d37e0976e290ab6c0f6924fd4b8dbf9a81658f1ec6a3f0a/aim-3.0.0.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "1c2481fac5a2f0c117321a60a74b1fe9", "sha256": "a2e00828b45a78507367a110c224339eeb2c9f0439d301c90d498b6370e117ea"}, "downloads": -1, "filename": "aim-3.1.0.tar.gz", "has_sig": false, "md5_digest": "1c2481fac5a2f0c117321a60a74b1fe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 160196, "upload_time": "2019-11-06T08:06:11", "upload_time_iso_8601": "2019-11-06T08:06:11.049042Z", "url": "https://files.pythonhosted.org/packages/ea/0f/7c7a3d5bff171bea1f8e52a32b40eb2121e0bc37c97f88b8189d0d653373/aim-3.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c2481fac5a2f0c117321a60a74b1fe9", "sha256": "a2e00828b45a78507367a110c224339eeb2c9f0439d301c90d498b6370e117ea"}, "downloads": -1, "filename": "aim-3.1.0.tar.gz", "has_sig": false, "md5_digest": "1c2481fac5a2f0c117321a60a74b1fe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 160196, "upload_time": "2019-11-06T08:06:11", "upload_time_iso_8601": "2019-11-06T08:06:11.049042Z", "url": "https://files.pythonhosted.org/packages/ea/0f/7c7a3d5bff171bea1f8e52a32b40eb2121e0bc37c97f88b8189d0d653373/aim-3.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:57 2020"}