{"info": {"author": "Mark Bell", "author_email": "mcbell@illinois.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Mathematics"], "description": "WhatIfMachine\n=============\n\nThe WhatIfMachine is a Python profiler which allows you to see what would happen to a profile if its functions ran in different amounts of time.\n\nIt officially supports 3.6 -- 3.8.\n\nQuickstart\n----------\n\nGet the WhatIfMachine from `PyPI`_::\n\n    $ pip install whatifmachine --user --upgrade\n\nUse it to profile a script with arguments::\n\n    $ whatifmachine script.py arg1 arg2 arg3\n\nFullstart\n---------\n\nHere's a little script ``test.py``::\n\n    def f(n):\n        for i in range(5):\n            h(n)\n            try:\n                g(i + n)\n            except ValueError:\n                pass\n\n    def g(n, k=100_000):\n        n = h(n, k)\n        if n < 10**30106:\n            raise ValueError('n is too small')\n        return n\n\n    def h(n, k=100_000):\n        for _ in range(k):\n            n = 2 * n\n        return n\n\n    f(1000)\n\nWe can profile this using the WhatIfMachine::\n\n    $ whatifmachine -f test test.py\n             19 function calls in 4.189 seconds\n\n       Ordered by: standard name\n       List reduced from 6 to 4 due to restriction <'test'>\n\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n            5    0.011    0.002    2.112    0.422 test.py:11(g)\n           10    4.178    0.418    4.178    0.418 test.py:17(h)\n            1    0.000    0.000    4.189    4.189 test.py:2(<module>)\n            1    0.000    0.000    4.189    4.189 test.py:2(f)\n\nNote that we use the ``-f test`` option to filter the output to only show lines matching ``test``.\n\nBut WhatIfMachine provides the ``whatif(...)`` decorator, which can be used to change how a function appears when profiled.\nFor example, we can add the decorator with the ``factor=0.5`` argument to ``g``::\n\n    @whatif(factor=0.5)\n    def g(n, k=100_000):\n        n = h(n, k)\n        if n < 10**30106:\n            raise ValueError('n is too small')\n        return n\n\nThis allows us to see what the impact would be if ``g`` only took half the time to run::\n\n    $ whatifmachine -f test test.py\n             41 function calls in 3.049 seconds\n\n       Ordered by: standard name\n       List reduced from 14 to 4 due to restriction <'test'>\n\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n            5    0.004    0.001    1.030    0.206 test.py:10(g)\n           10    3.044    0.304    3.044    0.304 test.py:17(h)\n            1    0.000    0.000    3.049    3.049 test.py:2(<module>)\n            1    0.000    0.000    3.049    3.049 test.py:2(f)\n\nSo we can see that making ``g`` 100% faster would only make the script 37% faster.\nBy comparison, the WhatIfMachine allows us to discover that the same effect can be achieved by making ``h`` just 40% faster.\n\nThis is the impact of `Amdahl's law <https://en.wikipedia.org/wiki/Amdahl%27s_law>`_.\nSo although the WhatIfMachine can't actually make your code run any faster, it can indicate where investing your effort in optimising your code can have the biggest payoff.\n\nDecorator\n---------\n\nThe WhatIfMachine's ``whatif`` decorator can be given any function that maps floats to floats, for example ``@whatif(lambda x: x*x)``.\nBefore this it also applies (in order):\n\n - a maximum amount of time that the call would take (``@whatif(maximum=0.1)``)\n - a multiplicative factor (``@whatif(factor=0.9)``)\n - an additive bias (``@whatif(bias=-0.05)``)\n\nThese can be combined.\nFor example, suppose a function is decorated with ``@whatif(abs, factor=2, bias=-0.1)``.\nThen the WhatIfMachine reports ``t`` seconds passing within this function as ``abs(2*t - 0.1)`` seconds, whatever use that is.\n\nBe careful, there is nothing to stop you from distorting time in a way which results in functions appearing to take zero or even a negative amount of time to run.\nGood luck understanding those profile reports.\n\nExternal Links\n--------------\n\n* `PyPI`_\n* `GitHub`_\n\n.. _GitHub: https://github.com/MarkCBell/whatifmachine\n.. _PyPI: https://pypi.org/project/whatifmachine", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MarkCBell/whatifmachine", "keywords": "profiling", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "whatifmachine", "package_url": "https://pypi.org/project/whatifmachine/", "platform": "", "project_url": "https://pypi.org/project/whatifmachine/", "project_urls": {"Homepage": "https://github.com/MarkCBell/whatifmachine"}, "release_url": "https://pypi.org/project/whatifmachine/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The WhatIfMachine is a Python profiler which allows you to see what would happen to a profile if its functions ran in different amounts of time.</p>\n<p>It officially supports 3.6 \u2013 3.8.</p>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Get the WhatIfMachine from <a href=\"https://pypi.org/project/whatifmachine\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install whatifmachine --user --upgrade\n</pre>\n<p>Use it to profile a script with arguments:</p>\n<pre>$ whatifmachine script.py arg1 arg2 arg3\n</pre>\n</div>\n<div id=\"fullstart\">\n<h2>Fullstart</h2>\n<p>Here\u2019s a little script <tt>test.py</tt>:</p>\n<pre>def f(n):\n    for i in range(5):\n        h(n)\n        try:\n            g(i + n)\n        except ValueError:\n            pass\n\ndef g(n, k=100_000):\n    n = h(n, k)\n    if n &lt; 10**30106:\n        raise ValueError('n is too small')\n    return n\n\ndef h(n, k=100_000):\n    for _ in range(k):\n        n = 2 * n\n    return n\n\nf(1000)\n</pre>\n<p>We can profile this using the WhatIfMachine:</p>\n<pre>$ whatifmachine -f test test.py\n         19 function calls in 4.189 seconds\n\n   Ordered by: standard name\n   List reduced from 6 to 4 due to restriction &lt;'test'&gt;\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        5    0.011    0.002    2.112    0.422 test.py:11(g)\n       10    4.178    0.418    4.178    0.418 test.py:17(h)\n        1    0.000    0.000    4.189    4.189 test.py:2(&lt;module&gt;)\n        1    0.000    0.000    4.189    4.189 test.py:2(f)\n</pre>\n<p>Note that we use the <tt><span class=\"pre\">-f</span> test</tt> option to filter the output to only show lines matching <tt>test</tt>.</p>\n<p>But WhatIfMachine provides the <tt><span class=\"pre\">whatif(...)</span></tt> decorator, which can be used to change how a function appears when profiled.\nFor example, we can add the decorator with the <tt>factor=0.5</tt> argument to <tt>g</tt>:</p>\n<pre>@whatif(factor=0.5)\ndef g(n, k=100_000):\n    n = h(n, k)\n    if n &lt; 10**30106:\n        raise ValueError('n is too small')\n    return n\n</pre>\n<p>This allows us to see what the impact would be if <tt>g</tt> only took half the time to run:</p>\n<pre>$ whatifmachine -f test test.py\n         41 function calls in 3.049 seconds\n\n   Ordered by: standard name\n   List reduced from 14 to 4 due to restriction &lt;'test'&gt;\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        5    0.004    0.001    1.030    0.206 test.py:10(g)\n       10    3.044    0.304    3.044    0.304 test.py:17(h)\n        1    0.000    0.000    3.049    3.049 test.py:2(&lt;module&gt;)\n        1    0.000    0.000    3.049    3.049 test.py:2(f)\n</pre>\n<p>So we can see that making <tt>g</tt> 100% faster would only make the script 37% faster.\nBy comparison, the WhatIfMachine allows us to discover that the same effect can be achieved by making <tt>h</tt> just 40% faster.</p>\n<p>This is the impact of <a href=\"https://en.wikipedia.org/wiki/Amdahl%27s_law\" rel=\"nofollow\">Amdahl\u2019s law</a>.\nSo although the WhatIfMachine can\u2019t actually make your code run any faster, it can indicate where investing your effort in optimising your code can have the biggest payoff.</p>\n</div>\n<div id=\"decorator\">\n<h2>Decorator</h2>\n<p>The WhatIfMachine\u2019s <tt>whatif</tt> decorator can be given any function that maps floats to floats, for example <tt>@whatif(lambda x: x*x)</tt>.\nBefore this it also applies (in order):</p>\n<blockquote>\n<ul>\n<li>a maximum amount of time that the call would take (<tt>@whatif(maximum=0.1)</tt>)</li>\n<li>a multiplicative factor (<tt>@whatif(factor=0.9)</tt>)</li>\n<li>an additive bias (<tt><span class=\"pre\">@whatif(bias=-0.05)</span></tt>)</li>\n</ul>\n</blockquote>\n<p>These can be combined.\nFor example, suppose a function is decorated with <tt>@whatif(abs, factor=2, <span class=\"pre\">bias=-0.1)</span></tt>.\nThen the WhatIfMachine reports <tt>t</tt> seconds passing within this function as <tt>abs(2*t - 0.1)</tt> seconds, whatever use that is.</p>\n<p>Be careful, there is nothing to stop you from distorting time in a way which results in functions appearing to take zero or even a negative amount of time to run.\nGood luck understanding those profile reports.</p>\n</div>\n<div id=\"external-links\">\n<h2>External Links</h2>\n<ul>\n<li><a href=\"https://pypi.org/project/whatifmachine\" rel=\"nofollow\">PyPI</a></li>\n<li><a href=\"https://github.com/MarkCBell/whatifmachine\" rel=\"nofollow\">GitHub</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7139482, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "98c43c82320b753299295b625bc66c0d", "sha256": "05e21c4349b49eef28cc748ccde05b70843819168449be9130714d3f4fdc3571"}, "downloads": -1, "filename": "whatifmachine-0.1.0.tar.gz", "has_sig": false, "md5_digest": "98c43c82320b753299295b625bc66c0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6769, "upload_time": "2020-04-30T18:28:00", "upload_time_iso_8601": "2020-04-30T18:28:00.958818Z", "url": "https://files.pythonhosted.org/packages/39/13/4a1aa65ae73a07db209c21d7364d1209323379826a116bf93efe082e3304/whatifmachine-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "98c43c82320b753299295b625bc66c0d", "sha256": "05e21c4349b49eef28cc748ccde05b70843819168449be9130714d3f4fdc3571"}, "downloads": -1, "filename": "whatifmachine-0.1.0.tar.gz", "has_sig": false, "md5_digest": "98c43c82320b753299295b625bc66c0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6769, "upload_time": "2020-04-30T18:28:00", "upload_time_iso_8601": "2020-04-30T18:28:00.958818Z", "url": "https://files.pythonhosted.org/packages/39/13/4a1aa65ae73a07db209c21d7364d1209323379826a116bf93efe082e3304/whatifmachine-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:29:57 2020"}