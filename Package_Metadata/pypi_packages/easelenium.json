{"info": {"author": "Kirill Strelkov", "author_email": "kirillstrelkov@users.noreply.github.com", "bugtrack_url": null, "classifiers": [], "description": "# easelenium\n\n[![Build Status](https://travis-ci.org/kirillstrelkov/easelenium.svg?branch=master)](https://travis-ci.org/kirillstrelkov/easelenium)\n\nFramework based on Selenium WebDriver. Contains wrapper around Selenium WebDriver functionaly and UI to facilitate in development.\n\nFeatures:\n\n- Supports Firefox, Chrome, IE, Opera and PhantomJS.\n- Supports [PageObject pattern](https://code.google.com/p/selenium/wiki/PageObjects)\n- Supports Continuous Integration\n- Suits for novice users.\n- Supports only Python 3.6+(for older python versions check `0.3` tag)\n\nFramework can be used as standalone framework with UI and/or as a library.\nSupportive classes:\n\n- [browser.py](/easelenium/browser.py)\n- [base_page_object.py](/easelenium/base_page_object.py)\n- [base_test.py](/easelenium/base_test.py)\n\nGUI [easelenium_ui.py](/easelenium/scripts/easelenium_ui.py):\n\n- Generator\n- Editor\n- Test runner\n\n## Dependencies\n\n1. Python\n2. wxPython\n3. Selenium WebDriver\n4. pytest\n5. pytest-html\n6. pytest-dotenv\n\n## Simple usage\n\nMost of `Browser` functions support both `WebElement` object and tuple/list which represents html element. This tuple/list object should contain selector/locator as first element and value as a second element. Example: `input = (By.NAME, 'q')`\n\nHere is simple example:\n\n```python\n>>> from selenium.webdriver.common.by import By\n>>> from easelenium.browser import Browser\n>>> browser = Browser('ff') # initilizing browser\n>>> browser.get('http://www.google.com') # going to google\n>>> # creating variables for page elements:\n>>> input = (By.NAME, 'q') # input element\n>>> search_btn = (By.NAME, 'btnG') # search button element\n>>> result = (By.CSS_SELECTOR, '.r') # found results titles' elements\n>>> # back to action\n>>> browser.type(input, u'selenium') # typing 'selenium' into search field\n>>> browser.click(search_btn) # clicking search button\n>>> browser.get_text(result) # getting first found title\nu'Selenium - Web Browser Automation'\n>>> browser.quit() # closing browser\n```\n\nCheck [browser_test.py](/easelenium/test/browser_test.py) for more examples.\n\n## Continuous Integration\n\nDone via command line script [easelenium_cli.py](/easelenium/scripts/easelenium_cli.py)\n\n## Installation\n\n### Using `pip`\n\n```shell\npip install easelenium\n```\n\n### Manual\n\n1. Download latest code from GitHub\n2. Extract it\n3. Open terminal or command line console\n4. Navigate to extracted folder\n5. Install all required libraries\n\n```shell\npython -m pip install -r requirements.txt\n```\n\n6. Go to `easelenium` folder and install with command:\n\n```shell\npython setup.py install\n```\n\n## License\n\nMIT License [easelenium_license.txt](/easelenium/licenses/easelenium_license.txt)\n\n## Tutorial\n\n1. [Introduction](https://kirillstrelkov.blogspot.de/2016/03/test-automation-with-selenium-webdriver.html)\n2. [Setup](https://kirillstrelkov.blogspot.de/2016/03/test-automation-with-selenium-webdriver_28.html)\n3. [Test creation](https://kirillstrelkov.blogspot.de/2016/03/test-automation-tutorial-with-selenium.html)\n4. [Continuous Integration](https://kirillstrelkov.blogspot.com/2018/04/test-automation-tutorial-with-selenium.html)\n\n## More information\n\n[Presentation](https://www.dropbox.com/s/4y877giru9qwx3b/present_Kirill_Strelkov.pdf?dl=0)\n\n[Thesis which contains description of the framework](https://www.dropbox.com/s/l65o69wvzjf1bue/Kirill_Strelkov_073639_BAK.pdf?dl=0)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kirillstrelkov/easelenium", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "easelenium", "package_url": "https://pypi.org/project/easelenium/", "platform": "", "project_url": "https://pypi.org/project/easelenium/", "project_urls": {"Homepage": "https://github.com/kirillstrelkov/easelenium"}, "release_url": "https://pypi.org/project/easelenium/0.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "easelenium - Selenium-based Test Automation Framework", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>easelenium</h1>\n<p><a href=\"https://travis-ci.org/kirillstrelkov/easelenium\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc943a5a28a17148654bebd997ea576849dd2f53/68747470733a2f2f7472617669732d63692e6f72672f6b6972696c6c737472656c6b6f762f656173656c656e69756d2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Framework based on Selenium WebDriver. Contains wrapper around Selenium WebDriver functionaly and UI to facilitate in development.</p>\n<p>Features:</p>\n<ul>\n<li>Supports Firefox, Chrome, IE, Opera and PhantomJS.</li>\n<li>Supports <a href=\"https://code.google.com/p/selenium/wiki/PageObjects\" rel=\"nofollow\">PageObject pattern</a></li>\n<li>Supports Continuous Integration</li>\n<li>Suits for novice users.</li>\n<li>Supports only Python 3.6+(for older python versions check <code>0.3</code> tag)</li>\n</ul>\n<p>Framework can be used as standalone framework with UI and/or as a library.\nSupportive classes:</p>\n<ul>\n<li><a href=\"/easelenium/browser.py\" rel=\"nofollow\">browser.py</a></li>\n<li><a href=\"/easelenium/base_page_object.py\" rel=\"nofollow\">base_page_object.py</a></li>\n<li><a href=\"/easelenium/base_test.py\" rel=\"nofollow\">base_test.py</a></li>\n</ul>\n<p>GUI <a href=\"/easelenium/scripts/easelenium_ui.py\" rel=\"nofollow\">easelenium_ui.py</a>:</p>\n<ul>\n<li>Generator</li>\n<li>Editor</li>\n<li>Test runner</li>\n</ul>\n<h2>Dependencies</h2>\n<ol>\n<li>Python</li>\n<li>wxPython</li>\n<li>Selenium WebDriver</li>\n<li>pytest</li>\n<li>pytest-html</li>\n<li>pytest-dotenv</li>\n</ol>\n<h2>Simple usage</h2>\n<p>Most of <code>Browser</code> functions support both <code>WebElement</code> object and tuple/list which represents html element. This tuple/list object should contain selector/locator as first element and value as a second element. Example: <code>input = (By.NAME, 'q')</code></p>\n<p>Here is simple example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.common.by</span> <span class=\"kn\">import</span> <span class=\"n\">By</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">easelenium.browser</span> <span class=\"kn\">import</span> <span class=\"n\">Browser</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">browser</span> <span class=\"o\">=</span> <span class=\"n\">Browser</span><span class=\"p\">(</span><span class=\"s1\">'ff'</span><span class=\"p\">)</span> <span class=\"c1\"># initilizing browser</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://www.google.com'</span><span class=\"p\">)</span> <span class=\"c1\"># going to google</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># creating variables for page elements:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">NAME</span><span class=\"p\">,</span> <span class=\"s1\">'q'</span><span class=\"p\">)</span> <span class=\"c1\"># input element</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">search_btn</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">NAME</span><span class=\"p\">,</span> <span class=\"s1\">'btnG'</span><span class=\"p\">)</span> <span class=\"c1\"># search button element</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">CSS_SELECTOR</span><span class=\"p\">,</span> <span class=\"s1\">'.r'</span><span class=\"p\">)</span> <span class=\"c1\"># found results titles' elements</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># back to action</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'selenium'</span><span class=\"p\">)</span> <span class=\"c1\"># typing 'selenium' into search field</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">(</span><span class=\"n\">search_btn</span><span class=\"p\">)</span> <span class=\"c1\"># clicking search button</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">get_text</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\"># getting first found title</span>\n<span class=\"sa\">u</span><span class=\"s1\">'Selenium - Web Browser Automation'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">browser</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">()</span> <span class=\"c1\"># closing browser</span>\n</pre>\n<p>Check <a href=\"/easelenium/test/browser_test.py\" rel=\"nofollow\">browser_test.py</a> for more examples.</p>\n<h2>Continuous Integration</h2>\n<p>Done via command line script <a href=\"/easelenium/scripts/easelenium_cli.py\" rel=\"nofollow\">easelenium_cli.py</a></p>\n<h2>Installation</h2>\n<h3>Using <code>pip</code></h3>\n<pre>pip install easelenium\n</pre>\n<h3>Manual</h3>\n<ol>\n<li>Download latest code from GitHub</li>\n<li>Extract it</li>\n<li>Open terminal or command line console</li>\n<li>Navigate to extracted folder</li>\n<li>Install all required libraries</li>\n</ol>\n<pre>python -m pip install -r requirements.txt\n</pre>\n<ol>\n<li>Go to <code>easelenium</code> folder and install with command:</li>\n</ol>\n<pre>python setup.py install\n</pre>\n<h2>License</h2>\n<p>MIT License <a href=\"/easelenium/licenses/easelenium_license.txt\" rel=\"nofollow\">easelenium_license.txt</a></p>\n<h2>Tutorial</h2>\n<ol>\n<li><a href=\"https://kirillstrelkov.blogspot.de/2016/03/test-automation-with-selenium-webdriver.html\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"https://kirillstrelkov.blogspot.de/2016/03/test-automation-with-selenium-webdriver_28.html\" rel=\"nofollow\">Setup</a></li>\n<li><a href=\"https://kirillstrelkov.blogspot.de/2016/03/test-automation-tutorial-with-selenium.html\" rel=\"nofollow\">Test creation</a></li>\n<li><a href=\"https://kirillstrelkov.blogspot.com/2018/04/test-automation-tutorial-with-selenium.html\" rel=\"nofollow\">Continuous Integration</a></li>\n</ol>\n<h2>More information</h2>\n<p><a href=\"https://www.dropbox.com/s/4y877giru9qwx3b/present_Kirill_Strelkov.pdf?dl=0\" rel=\"nofollow\">Presentation</a></p>\n<p><a href=\"https://www.dropbox.com/s/l65o69wvzjf1bue/Kirill_Strelkov_073639_BAK.pdf?dl=0\" rel=\"nofollow\">Thesis which contains description of the framework</a></p>\n\n          </div>"}, "last_serial": 7158222, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "d4dfae2634c4275fc2a6180a449cc0c9", "sha256": "687abd206cbc0dae737a27944ecc18f62056b1eb15dc320b6aa7d06afbc5a4b1"}, "downloads": -1, "filename": "easelenium-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d4dfae2634c4275fc2a6180a449cc0c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 85717, "upload_time": "2020-05-03T17:12:05", "upload_time_iso_8601": "2020-05-03T17:12:05.157410Z", "url": "https://files.pythonhosted.org/packages/1f/a3/d1d2d9fcdaa5132ae61aa48016a179eb0dda982982c64423d9ed0637e1cf/easelenium-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e1332730db28c81f41281904b119198", "sha256": "a6c4981c6167dfdc69955ca73a2666db7bdb7d38f7f151032ee14c18af1c4403"}, "downloads": -1, "filename": "easelenium-0.5.tar.gz", "has_sig": false, "md5_digest": "6e1332730db28c81f41281904b119198", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 34236, "upload_time": "2020-05-03T17:12:07", "upload_time_iso_8601": "2020-05-03T17:12:07.791879Z", "url": "https://files.pythonhosted.org/packages/dd/fe/8b7adea015d1329baf16c84acd0230c8b49f04f4d9a6761e438919d51c0c/easelenium-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d4dfae2634c4275fc2a6180a449cc0c9", "sha256": "687abd206cbc0dae737a27944ecc18f62056b1eb15dc320b6aa7d06afbc5a4b1"}, "downloads": -1, "filename": "easelenium-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d4dfae2634c4275fc2a6180a449cc0c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 85717, "upload_time": "2020-05-03T17:12:05", "upload_time_iso_8601": "2020-05-03T17:12:05.157410Z", "url": "https://files.pythonhosted.org/packages/1f/a3/d1d2d9fcdaa5132ae61aa48016a179eb0dda982982c64423d9ed0637e1cf/easelenium-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e1332730db28c81f41281904b119198", "sha256": "a6c4981c6167dfdc69955ca73a2666db7bdb7d38f7f151032ee14c18af1c4403"}, "downloads": -1, "filename": "easelenium-0.5.tar.gz", "has_sig": false, "md5_digest": "6e1332730db28c81f41281904b119198", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 34236, "upload_time": "2020-05-03T17:12:07", "upload_time_iso_8601": "2020-05-03T17:12:07.791879Z", "url": "https://files.pythonhosted.org/packages/dd/fe/8b7adea015d1329baf16c84acd0230c8b49f04f4d9a6761e438919d51c0c/easelenium-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:29 2020"}