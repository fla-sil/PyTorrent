{"info": {"author": "Krzysztof Grzywocz", "author_email": "kgrzywocz@wp.pl", "bugtrack_url": null, "classifiers": [], "description": "# Markdown Test (mdtest)\n\nFramework for verifying/testing documentation in markdown format. It can be used to do Behavior Test Driven Development (BTDD).  This document is also a living example of self verified documentation (some kind of SSOT - single source of truth). Syntax is inspired by [Concordion](https://concordion.org) and it's [syntax](https://concordion.org/instrumenting/java/markdown/). Implementation based on [python-markdown](https://python-markdown.github.io/).\n\n**NOTICE:** Project is still in very early stage of development!!! It might be unstable and a lot of things will probably change (At least output and traceability)\n\n## [How to run](- \"cli\")\n\nJust install python package. Then in the project root run:\n\n    mdtest\n\nIt will search for ```README.md``` and markdown files(ending on ```.md```) in ```doc/``` for a valid test (or \"example\" in Concordion language). For this project it will [Ran 12 tests](- \"c:assert-contain=run_shell(#code1 +' --skip='+ #TEST_NAME)\") + this test (it is skipped here to avoid recursion).\n\nFor more details about command options see [doc/CLI.md](https://github.com/kgrzywocz/mdtest/blob/master/doc/CLI.md).\n\n## Concordion Syntax\n\nYou can easily start by looking at [doc/BasicConcordionExample.md](https://github.com/kgrzywocz/mdtest/blob/master/doc/BasicConcordionExample.md). It is a ```mdtest``` instrumented version of [Concordion Getting Started](https://concordion.org/tutorial/java/markdown/), which I recommend you to follow ;).\n\n```mdtest``` aims to use the same syntax as [Concordion](https://concordion.org/) - it just provides different fixture implementation - python is a bit be more 'lightweight'.\n\nBasic instrumentation syntax relays on commands, which are special markdown links:\n\n    # [Test case](- \"basic\")\n\n    Normal text and [text which might be verified](- \"with some command\")\n\nThis defines \"Test Case\" that runs \"with some command\" command (see \"Commands examples\" section for details).\n\n**Notice:** commands links are always \"-\".\n\n**Notice2:** This test case uses buildin fixture ```fixture_basic.py```. More details in section \"Fixtures\".\n\n### [Commands examples](- \"basic\")\n\n- assign text to variable ```[text will be value](- \"#some_variable\")``` [text will be value](- \"#some_variable\")\n- assert variable value ```[text will be value](- \"?=#some_variable\")``` [text will be value](- \"?=#some_variable\")\n- run some command from fixture```[text](- \"?=get_first_word(#some_variable)\")``` [text](- \"?=get_first_word(#some_variable)\")\n\nMore details which syntax is supported can be found in [doc/ConcordionSupport.md](https://github.com/kgrzywocz/mdtest/blob/master/doc/ConcordionSupport.md)\n\n## Fixtures\n\nTest cases definition contains annotation which fixture to be used:\n\n    # [Test case](- \"python_functions\")\n\nThis makes mdtest look for a given fixture (in this case ```fixture_pythonfunctions.py```) in any path contains markdown files and builtin fixtures (like ```basic``` or ```cli```). Fixtures are just a python files, which may contain some useful function for instrumenting documentation. For details and examples see buildin [fixtures](mdtest/fixture) or just see ```fixture_*.py``` in this documentation doc file.\n\n## [Changes to Concordion Syntax](- \"basic\")\n\nSome additions to original syntax includes:\n\n- Each ```block``` is assigned to variable ```codeX``` where X is sequence number in testcase, so [block is value of code1](- \"'block'==code1\"). This is useful for verifying some bigger blocks.\n- \"==\" provides assert useful with blocks. See example above.\n- Limited python syntax support\n\nExample and more details can be found in [doc/ConcordionExtentions.md](https://github.com/kgrzywocz/mdtest/blob/master/doc/ConcordionExtentions.md)\n\n## Other notices and practice hits\n\n- To see how your files are rendered against different engines you can use [babelmark](https://babelmark.github.io/)\n- Some useful practices can be found on [keepSpecsSimple](https://concordion.org/technique/java/markdown/#keepSpecsSimple) by Concordion\n\nAs a rule of thumb I would use this project for some high level verification(on integrating whole product only) and to keep the documentation/specification up to date. More use cases should be implemented as integration and unit tests. I will try to keep this project as an example, but I am only human and some mistakes are unavoidable - If you know how to make things better - let me know ;)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/kgrzywocz/mdtest", "keywords": "", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "mdtest", "package_url": "https://pypi.org/project/mdtest/", "platform": "", "project_url": "https://pypi.org/project/mdtest/", "project_urls": {"Homepage": "http://github.com/kgrzywocz/mdtest"}, "release_url": "https://pypi.org/project/mdtest/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Framework for running tests embedded in markdown files.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Markdown Test (mdtest)</h1>\n<p>Framework for verifying/testing documentation in markdown format. It can be used to do Behavior Test Driven Development (BTDD).  This document is also a living example of self verified documentation (some kind of SSOT - single source of truth). Syntax is inspired by <a href=\"https://concordion.org\" rel=\"nofollow\">Concordion</a> and it's <a href=\"https://concordion.org/instrumenting/java/markdown/\" rel=\"nofollow\">syntax</a>. Implementation based on <a href=\"https://python-markdown.github.io/\" rel=\"nofollow\">python-markdown</a>.</p>\n<p><strong>NOTICE:</strong> Project is still in very early stage of development!!! It might be unstable and a lot of things will probably change (At least output and traceability)</p>\n<h2><a href=\"-\" rel=\"nofollow\" title=\"cli\">How to run</a></h2>\n<p>Just install python package. Then in the project root run:</p>\n<pre><code>mdtest\n</code></pre>\n<p>It will search for <code>README.md</code> and markdown files(ending on <code>.md</code>) in <code>doc/</code> for a valid test (or \"example\" in Concordion language). For this project it will <a href=\"-\" rel=\"nofollow\" title=\"c:assert-contain=run_shell(#code1 +' --skip='+ #TEST_NAME)\">Ran 12 tests</a> + this test (it is skipped here to avoid recursion).</p>\n<p>For more details about command options see <a href=\"https://github.com/kgrzywocz/mdtest/blob/master/doc/CLI.md\" rel=\"nofollow\">doc/CLI.md</a>.</p>\n<h2>Concordion Syntax</h2>\n<p>You can easily start by looking at <a href=\"https://github.com/kgrzywocz/mdtest/blob/master/doc/BasicConcordionExample.md\" rel=\"nofollow\">doc/BasicConcordionExample.md</a>. It is a <code>mdtest</code> instrumented version of <a href=\"https://concordion.org/tutorial/java/markdown/\" rel=\"nofollow\">Concordion Getting Started</a>, which I recommend you to follow ;).</p>\n<p><code>mdtest</code> aims to use the same syntax as <a href=\"https://concordion.org/\" rel=\"nofollow\">Concordion</a> - it just provides different fixture implementation - python is a bit be more 'lightweight'.</p>\n<p>Basic instrumentation syntax relays on commands, which are special markdown links:</p>\n<pre><code># [Test case](- \"basic\")\n\nNormal text and [text which might be verified](- \"with some command\")\n</code></pre>\n<p>This defines \"Test Case\" that runs \"with some command\" command (see \"Commands examples\" section for details).</p>\n<p><strong>Notice:</strong> commands links are always \"-\".</p>\n<p><strong>Notice2:</strong> This test case uses buildin fixture <code>fixture_basic.py</code>. More details in section \"Fixtures\".</p>\n<h3><a href=\"-\" rel=\"nofollow\" title=\"basic\">Commands examples</a></h3>\n<ul>\n<li>assign text to variable <code>[text will be value](- \"#some_variable\")</code> <a href=\"-\" rel=\"nofollow\" title=\"#some_variable\">text will be value</a></li>\n<li>assert variable value <code>[text will be value](- \"?=#some_variable\")</code> <a href=\"-\" rel=\"nofollow\" title=\"?=#some_variable\">text will be value</a></li>\n<li>run some command from fixture<code>[text](- \"?=get_first_word(#some_variable)\")</code> <a href=\"-\" rel=\"nofollow\" title=\"?=get_first_word(#some_variable)\">text</a></li>\n</ul>\n<p>More details which syntax is supported can be found in <a href=\"https://github.com/kgrzywocz/mdtest/blob/master/doc/ConcordionSupport.md\" rel=\"nofollow\">doc/ConcordionSupport.md</a></p>\n<h2>Fixtures</h2>\n<p>Test cases definition contains annotation which fixture to be used:</p>\n<pre><code># [Test case](- \"python_functions\")\n</code></pre>\n<p>This makes mdtest look for a given fixture (in this case <code>fixture_pythonfunctions.py</code>) in any path contains markdown files and builtin fixtures (like <code>basic</code> or <code>cli</code>). Fixtures are just a python files, which may contain some useful function for instrumenting documentation. For details and examples see buildin <a href=\"mdtest/fixture\" rel=\"nofollow\">fixtures</a> or just see <code>fixture_*.py</code> in this documentation doc file.</p>\n<h2><a href=\"-\" rel=\"nofollow\" title=\"basic\">Changes to Concordion Syntax</a></h2>\n<p>Some additions to original syntax includes:</p>\n<ul>\n<li>Each <code>block</code> is assigned to variable <code>codeX</code> where X is sequence number in testcase, so <a href=\"-\" rel=\"nofollow\" title=\"'block'==code1\">block is value of code1</a>. This is useful for verifying some bigger blocks.</li>\n<li>\"==\" provides assert useful with blocks. See example above.</li>\n<li>Limited python syntax support</li>\n</ul>\n<p>Example and more details can be found in <a href=\"https://github.com/kgrzywocz/mdtest/blob/master/doc/ConcordionExtentions.md\" rel=\"nofollow\">doc/ConcordionExtentions.md</a></p>\n<h2>Other notices and practice hits</h2>\n<ul>\n<li>To see how your files are rendered against different engines you can use <a href=\"https://babelmark.github.io/\" rel=\"nofollow\">babelmark</a></li>\n<li>Some useful practices can be found on <a href=\"https://concordion.org/technique/java/markdown/#keepSpecsSimple\" rel=\"nofollow\">keepSpecsSimple</a> by Concordion</li>\n</ul>\n<p>As a rule of thumb I would use this project for some high level verification(on integrating whole product only) and to keep the documentation/specification up to date. More use cases should be implemented as integration and unit tests. I will try to keep this project as an example, but I am only human and some mistakes are unavoidable - If you know how to make things better - let me know ;)</p>\n\n          </div>"}, "last_serial": 6354025, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9ec0255aeb7453f7fbad88c6e1862575", "sha256": "e01c205932cc15d4fdf83b8b7fdb318597d45c348cd738ce2b16e31933a11b06"}, "downloads": -1, "filename": "mdtest-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9ec0255aeb7453f7fbad88c6e1862575", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13956, "upload_time": "2019-12-23T20:31:32", "upload_time_iso_8601": "2019-12-23T20:31:32.419250Z", "url": "https://files.pythonhosted.org/packages/d0/fd/a67a62dd358ee5bf5a7e09a3b3003d558ba4bf1bb166b0fb0cf5cd481412/mdtest-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26fde7461f82aba9ad6adb107e104073", "sha256": "7c01f79c2a6e1358386cffb402472e40b8369152051b0b6b185bd8afa6e2e282"}, "downloads": -1, "filename": "mdtest-0.0.1.tar.gz", "has_sig": false, "md5_digest": "26fde7461f82aba9ad6adb107e104073", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9099, "upload_time": "2019-12-23T20:32:25", "upload_time_iso_8601": "2019-12-23T20:32:25.170501Z", "url": "https://files.pythonhosted.org/packages/bc/6f/bb2c0e33840e10fe44260c73e3c22af5c46772b0e35711ab1255e6988a3c/mdtest-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "3742fb5f6ca96b85b8bbd59066cceca2", "sha256": "4378b714d675b65bc80dec5d75ad207cfbc49e315899179054b4f03947cf6e52"}, "downloads": -1, "filename": "mdtest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3742fb5f6ca96b85b8bbd59066cceca2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9098, "upload_time": "2019-12-23T20:53:04", "upload_time_iso_8601": "2019-12-23T20:53:04.916149Z", "url": "https://files.pythonhosted.org/packages/5c/4b/1fe102cdc6709bdf50516cda1201a489b77656bb0770618bdfc1e4278329/mdtest-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d9bfe9ab58c06723cc535e3cf4c3330a", "sha256": "846edb654b74f75d039a7df8f72594f30228a8420fc2b08c0e7e6a35ceebc244"}, "downloads": -1, "filename": "mdtest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d9bfe9ab58c06723cc535e3cf4c3330a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11134, "upload_time": "2019-12-23T21:00:21", "upload_time_iso_8601": "2019-12-23T21:00:21.855159Z", "url": "https://files.pythonhosted.org/packages/8b/fc/1130271347eb1e28e5c5e5bf1d66f27b54ecdd56e2cd2c56003c227e4e08/mdtest-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3f08852f2b71402d5cdc518bc2092004", "sha256": "6b93be03f9a0a15b7534a1e95b962b18c27e7095894885e98070caadc4b32506"}, "downloads": -1, "filename": "mdtest-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3f08852f2b71402d5cdc518bc2092004", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11209, "upload_time": "2019-12-24T06:38:37", "upload_time_iso_8601": "2019-12-24T06:38:37.125458Z", "url": "https://files.pythonhosted.org/packages/bd/f1/747887493b74aa5886cd5676fb416663cf44aedd0a074701c1090f7480b1/mdtest-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f08852f2b71402d5cdc518bc2092004", "sha256": "6b93be03f9a0a15b7534a1e95b962b18c27e7095894885e98070caadc4b32506"}, "downloads": -1, "filename": "mdtest-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3f08852f2b71402d5cdc518bc2092004", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11209, "upload_time": "2019-12-24T06:38:37", "upload_time_iso_8601": "2019-12-24T06:38:37.125458Z", "url": "https://files.pythonhosted.org/packages/bd/f1/747887493b74aa5886cd5676fb416663cf44aedd0a074701c1090f7480b1/mdtest-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:46 2020"}