{"info": {"author": "Roy Keene", "author_email": "pypi@rkeene.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Python LimitlessLED via RF\n\nControl LimitlessLED bulbs through a directly attached radio.  The radio object must have an interface with a \"`transmit`\" method that formats messages as an LT8900 would over the air.\n\n## API\n\n### Synopsis\n\n    limitlessled_rf.Remote(radio, remote_type, remote_id, message_id = None, config = None) -> instance\n    limitlessled_rf.Remote.raw_send_button(button_info) -> value\n    limitlessled_rf.Remote.raw_read_button() -> dictionary\n    limitlessled_rf.Remote.set_brightness(brightness, zone = None) -> boolean\n    limitlessled_rf.Remote.set_color(rgb, zone = None) -> boolean\n    limitlessled_rf.Remote.set_temperature(kelvins, zone = None) -> boolean\n    limitlessled_rf.Remote.on(zone = None) -> boolean\n    limitlessled_rf.Remote.off(zone = None, dim = True) -> boolean\n    limitlessled_rf.Remote.max_brightness(zone = None) -> boolean\n    limitlessled_rf.Remote.white(zone = None) -> boolean\n    limitlessled_rf.Remote.pair(zone) -> boolean\n    limitlessled_rf.Remote.unpair(zone) -> boolean\n    limitlessled_rf.Remote.get_zone_ids() -> list of ints\n    limitlessled_rf.Remote.get_type() -> string\n    limitlessled_rf.Remote.get_id() -> int\n    limitlessled_rf.Remote.get_message_id() -> int\n    limitlessled_rf.Remote.get_brightness_range() -> list of ints\n    limitlessled_rf.Remote.get_temperature_range() -> llist of ints\n\n### Constructor\n\nConstruct a LimitlessLED object that uses the specified radio to act as a specific numeric remote for a specific type of LimitlessLED bulb system.\n\nThe \"`radio`\" object is an LT8900 compatible radio interface -- for example the \"`lt8900_spi`\" package.\n\nThe \"`remote_type`\" parameter is a string which refers to the type of LimitlessLED bulb this remote can control.  Valid values are: \"rgbw\" or \"cct\".\n\nThe \"`message_id`\" parameter allows you to set a default initial message\\_id.  If this is not supplied a random value is generated.\n\nThe \"`config`\" parameter allows for overriding a bulbs configuration.  Valid keys can be found in the \"`_remote_type_parameters_map`\" map.\n\n### instance.raw\\_send\\_button\n\nSend a button event directly via the locally connected radio to a remote bulb.\n\nThe \"`button_info`\" dictionary contains at least the \"`button`\" key which identifies the button by name.  Additional keys may be needed depending on the particular button.\n\n### instance.raw\\_read\\_button\n\nWait for a button to be pressed that the locally connected radio can read and then return that as a parsed \"`button_info`\" dictionary.\n\n### instance\\.set\\_brightness\n\nSet the brightness for the bulbs paired to the specified zone.  Brightness ranges from 0 (off) to 255 (maximum brightness).\n\nIf no zone is specified all bulbs attached to the remote are updated.\n\n### instance.set\\_color\n\nSet the color for the bulbs paired to the specified zone.  The \"`rgb`\" parameter is a 16-bit true-color value ranging from 0x000000 (black) to 0xffffff (white).  Since LimitlessLED bulbs\nare not actually true-color, this will get mapped to a nearby color before sending it to the bulb.  If the color sent is a shade of white, and the bulb supports white it will be\ntranslated into a brightness.  Otherwise, brightness will not be altered.\n\nIf no zone is specified all bulbs attached to the remote are updated.\n\n### instance.set\\_temperature\n\nSet the color temperature for the bulbs paired to the specified zone.  The \"`kelvins`\" parameter refers to the color temperature, in kelvins, that the bulb should be configured to display.\nSince LimitlessLED bulbs do not support infinite color temperatures, it will clamped to the range supported and to the nearest color temperature supported before sending the command\nto the bulb.\n\nIf no zone is specified all bulbs attached to the remote are updated.\n\n### instance.on\n\nTurn on bulbs in the specified zone.\n\nIf no zone is specified all bulbs attached to the remote are updated.\n\n### instance.off\n\nTurn off bulbs in the specified zone.\n\nIf no zone is specified all bulbs attached to the remote are updated.\n\n### instance.white\n\nTurn the bulbs in the specified zone to their white mode.\n\nIf no zone is specified all bulbs attached to the remote are updated.\n\n### instance.pair\n\nIssue the bulb-specific kind of pairing sequence to pair a newly powered-on bulb to this remote on the specified zone.\n\n### instance.unpair\n\nIssue the bulb-specific kind of unpairing sequence to unpair a newly powered-on bulb from this remote on the specified zone.  The bulb must already be paired with this remote and in\nthe zone before it can be unpaired.  Once a bulb is unpaired from a given remote, it is unpaired from all remotes.\n\n## Example\n\n    #! /usr/bin/env python3\n\n    import random\n    import time\n\n    import gpiozero\n    import limitlessled_rf\n    import lt8900_spi\n\n    def init_radio():\n    \t# Need to keep this attached to drive the line high -- if the object disappears then\n    \t# the GPIO port gets reconfigured as an input port\n    \t# Note: broadcom pin numbers are used\n    \treset_gpio = gpiozero.LED(24)\n    \treset_gpio.on()\n    \tdef reset_module_via_gpio():\n    \t\treset_gpio.off()\n    \t\ttime.sleep(0.1)\n    \t\treset_gpio.on()\n    \t\ttime.sleep(0.1)\n\n    \t# LT8900 compatible radio\n    \tradio = lt8900_spi.Radio(0, 0, {\n    \t\t'reset_command': reset_module_via_gpio,\n    \t\t'reset_command_gpio': reset_gpio\n    \t})\n\n    \tif not radio.initialize():\n    \t\treturn None\n\n    \treturn radio\n\n    radio = init_radio()\n    remote = limitlessled_rf.Remote(radio, 'rgbw', 0x51F0)\n\n    while True:\n    \tremote.set_color(random.randint(0, 0xffffff))\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://chiselapp.com/user/rkeene/repository/limitlessled_rf/", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "limitlessled-rf", "package_url": "https://pypi.org/project/limitlessled-rf/", "platform": "", "project_url": "https://pypi.org/project/limitlessled-rf/", "project_urls": {"Homepage": "https://chiselapp.com/user/rkeene/repository/limitlessled_rf/"}, "release_url": "https://pypi.org/project/limitlessled-rf/0.11/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Python LimitlessLED via RF", "version": "0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python LimitlessLED via RF</h1>\n<p>Control LimitlessLED bulbs through a directly attached radio.  The radio object must have an interface with a \"<code>transmit</code>\" method that formats messages as an LT8900 would over the air.</p>\n<h2>API</h2>\n<h3>Synopsis</h3>\n<pre><code>limitlessled_rf.Remote(radio, remote_type, remote_id, message_id = None, config = None) -&gt; instance\nlimitlessled_rf.Remote.raw_send_button(button_info) -&gt; value\nlimitlessled_rf.Remote.raw_read_button() -&gt; dictionary\nlimitlessled_rf.Remote.set_brightness(brightness, zone = None) -&gt; boolean\nlimitlessled_rf.Remote.set_color(rgb, zone = None) -&gt; boolean\nlimitlessled_rf.Remote.set_temperature(kelvins, zone = None) -&gt; boolean\nlimitlessled_rf.Remote.on(zone = None) -&gt; boolean\nlimitlessled_rf.Remote.off(zone = None, dim = True) -&gt; boolean\nlimitlessled_rf.Remote.max_brightness(zone = None) -&gt; boolean\nlimitlessled_rf.Remote.white(zone = None) -&gt; boolean\nlimitlessled_rf.Remote.pair(zone) -&gt; boolean\nlimitlessled_rf.Remote.unpair(zone) -&gt; boolean\nlimitlessled_rf.Remote.get_zone_ids() -&gt; list of ints\nlimitlessled_rf.Remote.get_type() -&gt; string\nlimitlessled_rf.Remote.get_id() -&gt; int\nlimitlessled_rf.Remote.get_message_id() -&gt; int\nlimitlessled_rf.Remote.get_brightness_range() -&gt; list of ints\nlimitlessled_rf.Remote.get_temperature_range() -&gt; llist of ints\n</code></pre>\n<h3>Constructor</h3>\n<p>Construct a LimitlessLED object that uses the specified radio to act as a specific numeric remote for a specific type of LimitlessLED bulb system.</p>\n<p>The \"<code>radio</code>\" object is an LT8900 compatible radio interface -- for example the \"<code>lt8900_spi</code>\" package.</p>\n<p>The \"<code>remote_type</code>\" parameter is a string which refers to the type of LimitlessLED bulb this remote can control.  Valid values are: \"rgbw\" or \"cct\".</p>\n<p>The \"<code>message_id</code>\" parameter allows you to set a default initial message_id.  If this is not supplied a random value is generated.</p>\n<p>The \"<code>config</code>\" parameter allows for overriding a bulbs configuration.  Valid keys can be found in the \"<code>_remote_type_parameters_map</code>\" map.</p>\n<h3>instance.raw_send_button</h3>\n<p>Send a button event directly via the locally connected radio to a remote bulb.</p>\n<p>The \"<code>button_info</code>\" dictionary contains at least the \"<code>button</code>\" key which identifies the button by name.  Additional keys may be needed depending on the particular button.</p>\n<h3>instance.raw_read_button</h3>\n<p>Wait for a button to be pressed that the locally connected radio can read and then return that as a parsed \"<code>button_info</code>\" dictionary.</p>\n<h3>instance.set_brightness</h3>\n<p>Set the brightness for the bulbs paired to the specified zone.  Brightness ranges from 0 (off) to 255 (maximum brightness).</p>\n<p>If no zone is specified all bulbs attached to the remote are updated.</p>\n<h3>instance.set_color</h3>\n<p>Set the color for the bulbs paired to the specified zone.  The \"<code>rgb</code>\" parameter is a 16-bit true-color value ranging from 0x000000 (black) to 0xffffff (white).  Since LimitlessLED bulbs\nare not actually true-color, this will get mapped to a nearby color before sending it to the bulb.  If the color sent is a shade of white, and the bulb supports white it will be\ntranslated into a brightness.  Otherwise, brightness will not be altered.</p>\n<p>If no zone is specified all bulbs attached to the remote are updated.</p>\n<h3>instance.set_temperature</h3>\n<p>Set the color temperature for the bulbs paired to the specified zone.  The \"<code>kelvins</code>\" parameter refers to the color temperature, in kelvins, that the bulb should be configured to display.\nSince LimitlessLED bulbs do not support infinite color temperatures, it will clamped to the range supported and to the nearest color temperature supported before sending the command\nto the bulb.</p>\n<p>If no zone is specified all bulbs attached to the remote are updated.</p>\n<h3>instance.on</h3>\n<p>Turn on bulbs in the specified zone.</p>\n<p>If no zone is specified all bulbs attached to the remote are updated.</p>\n<h3>instance.off</h3>\n<p>Turn off bulbs in the specified zone.</p>\n<p>If no zone is specified all bulbs attached to the remote are updated.</p>\n<h3>instance.white</h3>\n<p>Turn the bulbs in the specified zone to their white mode.</p>\n<p>If no zone is specified all bulbs attached to the remote are updated.</p>\n<h3>instance.pair</h3>\n<p>Issue the bulb-specific kind of pairing sequence to pair a newly powered-on bulb to this remote on the specified zone.</p>\n<h3>instance.unpair</h3>\n<p>Issue the bulb-specific kind of unpairing sequence to unpair a newly powered-on bulb from this remote on the specified zone.  The bulb must already be paired with this remote and in\nthe zone before it can be unpaired.  Once a bulb is unpaired from a given remote, it is unpaired from all remotes.</p>\n<h2>Example</h2>\n<pre><code>#! /usr/bin/env python3\n\nimport random\nimport time\n\nimport gpiozero\nimport limitlessled_rf\nimport lt8900_spi\n\ndef init_radio():\n\t# Need to keep this attached to drive the line high -- if the object disappears then\n\t# the GPIO port gets reconfigured as an input port\n\t# Note: broadcom pin numbers are used\n\treset_gpio = gpiozero.LED(24)\n\treset_gpio.on()\n\tdef reset_module_via_gpio():\n\t\treset_gpio.off()\n\t\ttime.sleep(0.1)\n\t\treset_gpio.on()\n\t\ttime.sleep(0.1)\n\n\t# LT8900 compatible radio\n\tradio = lt8900_spi.Radio(0, 0, {\n\t\t'reset_command': reset_module_via_gpio,\n\t\t'reset_command_gpio': reset_gpio\n\t})\n\n\tif not radio.initialize():\n\t\treturn None\n\n\treturn radio\n\nradio = init_radio()\nremote = limitlessled_rf.Remote(radio, 'rgbw', 0x51F0)\n\nwhile True:\n\tremote.set_color(random.randint(0, 0xffffff))\n</code></pre>\n\n          </div>"}, "last_serial": 7191150, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "9fd5fcf78e3ae0e27f3db9a4a6816bac", "sha256": "9d9367fc06502101bfb586231fc93101b89354890cfb4c4eac5f9d90a599e2a8"}, "downloads": -1, "filename": "limitlessled_rf-0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "9fd5fcf78e3ae0e27f3db9a4a6816bac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9257, "upload_time": "2020-05-02T15:12:27", "upload_time_iso_8601": "2020-05-02T15:12:27.486395Z", "url": "https://files.pythonhosted.org/packages/6e/1b/f3664598e0a1d005c27255bf99506ab129a69b8fd53f9def0d7e256e481e/limitlessled_rf-0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd3f9cd5c014f654760188ff0d6c4327", "sha256": "32ffea807dd111637266172a9eca97bfae7c63615bda529d3d3692cef2f5476d"}, "downloads": -1, "filename": "limitlessled_rf-0.10.tar.gz", "has_sig": false, "md5_digest": "cd3f9cd5c014f654760188ff0d6c4327", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8907, "upload_time": "2020-05-02T15:12:29", "upload_time_iso_8601": "2020-05-02T15:12:29.071741Z", "url": "https://files.pythonhosted.org/packages/7c/95/c19fbcff04c1f7f20e1c7be51daeaf3642c91fa30c10c89936d45d4bd171/limitlessled_rf-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "8723958067c33e65640469b277052e93", "sha256": "b648283d2bf4804efcd85bbe2a48e89e390e7d119b1df5300578358f4f2edd4d"}, "downloads": -1, "filename": "limitlessled_rf-0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "8723958067c33e65640469b277052e93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9389, "upload_time": "2020-05-07T19:23:22", "upload_time_iso_8601": "2020-05-07T19:23:22.353080Z", "url": "https://files.pythonhosted.org/packages/dc/32/5c95f1a2a02413c3c602724f8454f6f9d6c4acb012781488b61fb7da2c06/limitlessled_rf-0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ca3e56e8905b09c350a321ae97b0f89", "sha256": "ccadbf7416a8a486d48fdde927d669908619387d77d041452a37ccab616d5c5b"}, "downloads": -1, "filename": "limitlessled_rf-0.11.tar.gz", "has_sig": false, "md5_digest": "4ca3e56e8905b09c350a321ae97b0f89", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9097, "upload_time": "2020-05-07T19:23:23", "upload_time_iso_8601": "2020-05-07T19:23:23.402831Z", "url": "https://files.pythonhosted.org/packages/0b/a2/6e234e9a57721b4b2238fb3e976246f68e4ad5b0ddd39a2ef49e663f1d99/limitlessled_rf-0.11.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b6844d1220053fc1c16b0b148e401d59", "sha256": "afe45422d82fa167af8e5accb15810cba167e1798928ad9c55411125916b0b3e"}, "downloads": -1, "filename": "limitlessled_rf-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b6844d1220053fc1c16b0b148e401d59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8675, "upload_time": "2020-04-29T00:41:43", "upload_time_iso_8601": "2020-04-29T00:41:43.309917Z", "url": "https://files.pythonhosted.org/packages/e5/74/f44be5c8d2c30507bee0fb1ef8b36fa5ad4edbfd1a303d15b878b1bcdd13/limitlessled_rf-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ee3f86c58f0bbf937361099ac4d1dc5", "sha256": "168d2432c0481586c4db196edba41ee88ceb46f2a941c54a628ebc79d400492c"}, "downloads": -1, "filename": "limitlessled_rf-0.2.tar.gz", "has_sig": false, "md5_digest": "5ee3f86c58f0bbf937361099ac4d1dc5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8323, "upload_time": "2020-04-29T00:41:45", "upload_time_iso_8601": "2020-04-29T00:41:45.451029Z", "url": "https://files.pythonhosted.org/packages/25/d2/4d02ff169688afea50cb82bf0d8fb99235969850b4be1dee7c00a952d079/limitlessled_rf-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4a393e74a0795dbc192889d82e1d8058", "sha256": "2e6b02aadc4ee51b68aeb71af1ba96e2dc5974e499109606a80bc4a82b475bdc"}, "downloads": -1, "filename": "limitlessled_rf-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4a393e74a0795dbc192889d82e1d8058", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8673, "upload_time": "2020-04-29T00:49:34", "upload_time_iso_8601": "2020-04-29T00:49:34.282171Z", "url": "https://files.pythonhosted.org/packages/4b/60/4859a46bff3bf96e71de9f46c9d3a33b0429abe922a6f243e9af760119dc/limitlessled_rf-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cd718f660f3f534a07a460880754627", "sha256": "64cf68b2f1c31599ffc08db9058c46d752ef651cb103391f90343c2716f3c69d"}, "downloads": -1, "filename": "limitlessled_rf-0.3.tar.gz", "has_sig": false, "md5_digest": "9cd718f660f3f534a07a460880754627", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8319, "upload_time": "2020-04-29T00:49:35", "upload_time_iso_8601": "2020-04-29T00:49:35.854023Z", "url": "https://files.pythonhosted.org/packages/8b/b9/9b38cb55e5bd55020671289f6f0e8a9504e938c05ab6b20aa5e8074a800f/limitlessled_rf-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "0b94c1b900ca0f5d77db63abcfc0231d", "sha256": "5aed2180e05a175971aa5f6c208e75f1270e3c3f9d496f0a7c84734771459113"}, "downloads": -1, "filename": "limitlessled_rf-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0b94c1b900ca0f5d77db63abcfc0231d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8955, "upload_time": "2020-04-29T13:53:17", "upload_time_iso_8601": "2020-04-29T13:53:17.954651Z", "url": "https://files.pythonhosted.org/packages/6d/54/485da9188ac0e44be2976914a3d2f6ead1b3c43142a7f65c24e0fbb8648c/limitlessled_rf-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee0b9bfa1b47fd8420c1f33ce4481610", "sha256": "0891e292453c4ddf01f0b07d5496985ff81213d3bde1e230824097d78bf23cb4"}, "downloads": -1, "filename": "limitlessled_rf-0.4.tar.gz", "has_sig": false, "md5_digest": "ee0b9bfa1b47fd8420c1f33ce4481610", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8628, "upload_time": "2020-04-29T13:53:19", "upload_time_iso_8601": "2020-04-29T13:53:19.011202Z", "url": "https://files.pythonhosted.org/packages/7f/74/a8f18fa498fa786c03c3f54d4aed4ee849d25a5c43670763b5a34c5900d1/limitlessled_rf-0.4.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "c6133006362c29f5adc0786db087a036", "sha256": "161a916d23d75d2b1f3d63870647957810e5fece7c16c5443ff39ae822ec6876"}, "downloads": -1, "filename": "limitlessled_rf-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "c6133006362c29f5adc0786db087a036", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9166, "upload_time": "2020-04-30T03:32:45", "upload_time_iso_8601": "2020-04-30T03:32:45.989935Z", "url": "https://files.pythonhosted.org/packages/b8/24/dbf57521627c602f01d514dcbdb9c48719b9c8e5a08e08246eae261507a6/limitlessled_rf-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8973b470e4cc3a9e6a6644b12256147", "sha256": "2407a39b592d5912e30c600251c12b319c03a5c075e8cef866295524e51c3340"}, "downloads": -1, "filename": "limitlessled_rf-0.9.tar.gz", "has_sig": false, "md5_digest": "c8973b470e4cc3a9e6a6644b12256147", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8823, "upload_time": "2020-04-30T03:32:47", "upload_time_iso_8601": "2020-04-30T03:32:47.389859Z", "url": "https://files.pythonhosted.org/packages/91/77/538c866f75ccc314f53373f016f47d23cb49173211a8b66fd3588d20896f/limitlessled_rf-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8723958067c33e65640469b277052e93", "sha256": "b648283d2bf4804efcd85bbe2a48e89e390e7d119b1df5300578358f4f2edd4d"}, "downloads": -1, "filename": "limitlessled_rf-0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "8723958067c33e65640469b277052e93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9389, "upload_time": "2020-05-07T19:23:22", "upload_time_iso_8601": "2020-05-07T19:23:22.353080Z", "url": "https://files.pythonhosted.org/packages/dc/32/5c95f1a2a02413c3c602724f8454f6f9d6c4acb012781488b61fb7da2c06/limitlessled_rf-0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ca3e56e8905b09c350a321ae97b0f89", "sha256": "ccadbf7416a8a486d48fdde927d669908619387d77d041452a37ccab616d5c5b"}, "downloads": -1, "filename": "limitlessled_rf-0.11.tar.gz", "has_sig": false, "md5_digest": "4ca3e56e8905b09c350a321ae97b0f89", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9097, "upload_time": "2020-05-07T19:23:23", "upload_time_iso_8601": "2020-05-07T19:23:23.402831Z", "url": "https://files.pythonhosted.org/packages/0b/a2/6e234e9a57721b4b2238fb3e976246f68e4ad5b0ddd39a2ef49e663f1d99/limitlessled_rf-0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:51 2020"}