{"info": {"author": "Rafael Oliveira", "author_email": "rafaelbco@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "================\nrbco.caseclasses\n================\n\n.. image:: https://travis-ci.org/rafaelbco/rbco.caseclasses.svg?branch=master\n   :target: https://travis-ci.org/rafaelbco/rbco.caseclasses\n   :alt: Build status\n\n.. image:: https://coveralls.io/repos/rafaelbco/rbco.caseclasses/badge.png\n   :target: https://coveralls.io/r/rafaelbco/rbco.caseclasses\n   :alt: Coverage\n\n.. .. image:: https://img.shields.io/pypi/dm/rbco.caseclasses.svg\n   :target: https://pypi.python.org/pypi/rbco.caseclasses/\n   :alt: Downloads\n\n.. image:: https://img.shields.io/pypi/v/rbco.caseclasses.svg\n   :target: https://pypi.python.org/pypi/rbco.caseclasses/\n   :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/l/rbco.caseclasses.svg\n    :target: https://raw.githubusercontent.com/rafaelbco/rbco.caseclasses/master/docs/LICENSE.txt\n    :alt: License\n\n.. contents::\n\nOverview\n========\n\nProvide a compact syntax to define simple \"struct-like\" (or \"record-like\", \"bean-like\") classes.\nThe resulting classes are very similar to namedtuple_, but mutable, with a nicer syntax, more\nflexibility and more features.\n\nHere's a summary of the features:\n\n- It's possible to define default values for fields.\n- Useful ``__repr__`` and ``__str__`` implementations.\n- Structural equality, i.e, useful ``__eq__`` and ``__ne__`` implementations.\n- ``copy`` method (copy-constructor).\n- Conversion from/to dictionary and tuple.\n- `__slots__`_ declaration to improve performance and prevent assignment on unknown fields.\n- It's possible to define custom methods.\n- Supports inheritance.\n\nSee also the motivation_ section for other implementations of the concept, specially MacroPy_\nwhich was the inspiration for this project and uses a very different approach.\n\n\nCompatibility\n=============\n\nCurrently only Python 2.7 is supported.\n\n\nInstalation\n===========\n\nThe usual::\n\n    pip install rbco.caseclasses\n\nOr::\n\n    easy_install rbco.caseclasses\n\n\nUsage\n=====\n\nBasics\n------\n\nLet's start by creating a simple case class:\n\n.. code:: python\n\n    >>> from rbco.caseclasses import case\n    >>>\n    >>> @case\n    ... class Person(object):\n    ...     \"\"\"Represent a person.\"\"\"\n    ...     def __init__(self, name, age=None, gender=None): pass\n\nThe declared ``__init__`` is just a stub. The parameters defines which fields the class will have\nand its default values. The ``__init__`` method is replaced by a new one, which takes care of\nassigning the values of the fields.\n\nThe constructor works as expected, according to the provided ``__init__`` stub:\n\n.. code:: python\n\n    >>> Person('John')\n    Person(name='John', age=None, gender=None)\n    >>> Person('John', 30, 'm')\n    Person(name='John', age=30, gender='m')\n    >>> Person(name='John', age=30, gender='m')\n    Person(name='John', age=30, gender='m')\n    >>> Person('John', gender='m')\n    Person(name='John', age=None, gender='m')\n\nNote that in the string representation the fields are in the same order as defined in the\nconstructor.\n\nThe docstring of the class is preserved:\n\n.. code:: python\n\n    >>> Person.__doc__\n    'Represent a person.'\n\nThe signature of the constructor is not preserved. The resulting ``__init__`` method signature\nis a generic one, taking only ``*args`` and ``**kwargs``:\n\n.. code:: python\n\n    >>> from inspect import getargspec\n    >>> getargspec(Person.__init__)\n    ArgSpec(args=['self'], varargs='args', keywords='kwargs', defaults=None)\n\nHowever the docstring contains the original signature:\n\n.. code:: python\n\n    >>> Person.__init__.__doc__\n    'Original signature: (self, name, age=None, gender=None)'\n\nIt's not possible to create a case class without a constructor:\n\n.. code:: python\n\n    >>> from rbco.caseclasses import case\n    >>>\n    >>> @case\n    ... class Foo(object): pass\n    Traceback (most recent call last):\n    ...\n    RuntimeError: Case class must define a constructor.\n\n\nMutability and __slots__\n------------------------\n\nInstances are mutable:\n\n.. code:: python\n\n    >>> p = Person('John')\n    >>> p\n    Person(name='John', age=None, gender=None)\n    >>> p.name = 'Bob'\n    >>> p.age = 35\n    >>> p\n    Person(name='Bob', age=35, gender=None)\n\nHowever it's not possible to assign to unknown attributes:\n\n.. code:: python\n\n    >>> p.department = 'sales'\n    Traceback (most recent call last):\n    ...\n    AttributeError: 'Person' object has no attribute 'department'\n\nThis is because of the `__slots__`_ declaration:\n\n.. code:: python\n\n    >>> p.__slots__\n    ['name', 'age', 'gender']\n\n\nStructural equality\n-------------------\n\nStructural equality is supported:\n\n.. code:: python\n\n    >>> p1 = Person('John', 30)\n    >>> p2 = Person('Bob', 25)\n    >>> p1 == p2\n    False\n    >>> p1 != p2\n    True\n    >>> p2.name = 'John'\n    >>> p2.age = 30\n    >>> p1 == p2\n    True\n    >>> p1 != p2\n    False\n    >>> p2.gender = 'm'\n    >>> p1 == p2\n    False\n\n\nCopy-constructor\n----------------\n\nA copy-constructor is provided:\n\n.. code:: python\n\n    >>> p1 = Person('John', 30)\n    >>> copy_of_p1 = p1.copy()\n    >>> p1\n    Person(name='John', age=30, gender=None)\n    >>> copy_of_p1\n    Person(name='John', age=30, gender=None)\n    >>> p1 is copy_of_p1\n    False\n    >>> p2 = p1.copy(name='Bob', gender='m')\n    >>> p2\n    Person(name='Bob', age=30, gender='m')\n\n\nConversion from/to dictionary and tuple\n---------------------------------------\n\nConversion from/to dictionary is easy. The ``as_dict`` method return an ``OrderedDict``:\n\n.. code:: python\n\n    >>> p1 = Person('Mary', 33)\n    >>> p1\n    Person(name='Mary', age=33, gender=None)\n    >>> p1.as_dict()\n    OrderedDict([('name', 'Mary'), ('age', 33), ('gender', None)])\n    >>> Person(**p1.as_dict())\n    Person(name='Mary', age=33, gender=None)\n\nConversion from/to tuple is also possible:\n\n.. code:: python\n\n    >>> p1 = Person('John', 30)\n    >>> p1\n    Person(name='John', age=30, gender=None)\n    >>> p1.as_tuple()\n    ('John', 30, None)\n    >>> Person(*p1.as_tuple())\n    Person(name='John', age=30, gender=None)\n\n\n.. _`custom members`:\n\nCustom members\n--------------\n\nCase classes are very much like regular classes. It's possible to define any kind of custom\nmembers.\n\nThe most common case should be adding a custom instance method:\n\n.. code:: python\n\n    >>> import math\n    >>> @case\n    ... class Point(object):\n    ...     def __init__(self, x, y): pass\n    ...\n    ...     def distance(self, other):\n    ...         return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)\n    >>> p1 = Point(0, 0)\n    >>> p2 = Point(10, 0)\n    >>> p1.distance(p2)\n    10.0\n\nOther kinds of class members are supported as well:\n\n.. code:: python\n\n    >>> @case\n    ... class Example(object):\n    ...     class_attribute = 'some value'\n    ...\n    ...     def __init__(self, field1): pass\n    ...\n    ...     @staticmethod\n    ...     def static_method():\n    ...         print 'This is an static method.'\n    ...\n    ...     @classmethod\n    ...     def class_method(cls):\n    ...         print 'This is a class method of the class {}.'.format(cls.__name__)\n    ...\n    >>> e = Example('example')\n    >>> Example.class_attribute\n    'some value'\n    >>> e.class_attribute\n    'some value'\n    >>> Example.static_method()\n    This is an static method.\n    >>> Example.class_method()\n    This is a class method of the class Example.\n\n\nInheritance\n-----------\n\nLet's create a base case class and a derived one:\n\n.. code:: python\n\n    >>> @case\n    ... class Person(object):\n    ...     def __init__(self, name, age=None, gender=None): pass\n    ...\n    ...     def present(self):\n    ...         print \"I'm {}, {} years old and my gender is '{}'.\".format(\n    ...             self.name,\n    ...             self.age,\n    ...             self.gender\n    ...         )\n    ...\n    >>> @case\n    ... class Employee(Person):\n    ...     def __init__(self, name, age=None, gender=None, department=None): pass\n\nIt's necessary to repeat the fields of the base class, but you would have to do that anyway if\nyou were implementing the case classes manually.\n\nMethods from the base class are inherited:\n\n.. code:: python\n\n    >>> p = Person('John', 30, 'm')\n    >>> p.present()\n    I'm John, 30 years old and my gender is 'm'.\n    >>> e = Employee('Mary', 33, 'f', 'sales')\n    >>> e.present()\n    I'm Mary, 33 years old and my gender is 'f'.\n\nInstances of ``Person`` and ``Employee`` will always be considered different, since employees\nhave an extra field:\n\n.. code:: python\n\n    >>> p = Person('John')\n    >>> e = Employee('John')\n    >>> p == e\n    False\n\nOverriding a base class method works as expected:\n\n.. code:: python\n\n    >>> @case\n    ... class ImprovedEmployee(Employee):\n    ...     def present(self):\n    ...         super(ImprovedEmployee, self).present()\n    ...         print 'I work at the {} department.'.format(self.department)\n    ...\n    >>> ie = ImprovedEmployee(name='Mary', department='marketing', age=33, gender='f')\n    >>> ie.present()\n    I'm Mary, 33 years old and my gender is 'f'.\n    I work at the marketing department.\n\n\nOverriding case class behavior\n------------------------------\n\nIt's possible to override the standard case class methods (``__repr__``, ``__eq__``, etc).\nFor example:\n\n.. code:: python\n\n    >>> @case\n    ... class Foo(object):\n    ...     def __init__(self, bar): pass\n    ...\n    ...     def __eq__(self, other):\n    ...         return True  # All `Foo`s are equal.\n    ...\n    >>> Foo('bar') == Foo('baz')\n    True\n\nIt's even possible to call the original version on the subclass method:\n\n.. code:: python\n\n    >>> @case\n    ... class Foo(object):\n    ...     def __init__(self, bar):\n    ...         pass\n    ...\n    ...     def __repr__(self):\n    ...         return 'This is my string representation: ' + super(Foo, self).__repr__()\n    ...\n    >>> Foo('bar')\n    This is my string representation: Foo(bar='bar')\n\nIt's not possible to override the ``__init__`` method, because it's replaced when the ``@case``\ndecorator is applied. If a custom constructor is needed using the CaseClassMixin_ can be\na solution.\n\n\n.. _CaseClassMixin:\n\nUsing ``CaseClassMixin`` for more flexibility\n---------------------------------------------\n\nThe classes created by the ``@case`` decorator inherits from ``CaseClassMixin``.\n\n.. code:: python\n\n    >>> from rbco.caseclasses import CaseClassMixin\n    >>> issubclass(Person, CaseClassMixin)\n    True\n\nThe ``CaseClassMixin`` provides all the \"case class\" behavior, except for the constructor.\nTo use ``CaseClassMixin`` directly the only requirement the subclass must match is to provide a\n``__fields__`` attribute, containing a sequence of field names.\n\nThis can be useful if greater flexibility is required. In the following example we create a case\nclass with a custom constructor:\n\n.. code:: python\n\n    >>> class Foo(CaseClassMixin):\n    ...     __fields__ = ('field1', 'field2')\n    ...\n    ...     def __init__(self, field1, *args):\n    ...         self.field1 = field1 + '_modified'\n    ...         self.field2 = list(args)\n    ...\n    >>> Foo('bar', 1, 2)\n    Foo(field1='bar_modified', field2=[1, 2])\n\n\nLimitations\n===========\n\n- The constructor of a case class cannot be customized because it's replaced when the ``@case``\n  decorator is applied. See the section about CaseClassMixin_ for an alternative.\n\n- It's not possible to assign to unknow fields because of the ``__slots__`` declaration.\n\n- The constructor cannot take ``*args`` or ``**kwargs``:\n\n  .. code:: python\n\n    >>> @case\n    ... class Foo(object):\n    ...     def __init__(self, **kwargs): pass\n    Traceback (most recent call last):\n    ...\n    RuntimeError: Case class constructor cannot take *args or **kwargs.\n\n  See the section about CaseClassMixin_ for an alternative.\n\n\n.. _motivation:\n\nMotivation, design decisions and other implementations\n======================================================\n\nComparison with MacroPy\n-----------------------\n\nThe idea for this project came from MacroPy_. It provides an implementation of case classes using\nsyntactic macros, which results in a very elegant way to define the case classes.\nThe motivation was to provide similar functionality without resorting to syntactic macros nor\nstring evaluation (`the approach took by namedtuple`__). In other words: to provide the best\nimplementation possible without using much magic.\n\n__ `namedtuple source code`_\n\nThe comparison to MacroPy_ can be summarized as follows:\n\nAdvantages:\n\n- No magic.\n- Allows any kind of `custom members`_, including instance methods.\n- Since case classes are just regular classes, any kind of inheritance is allowed.\n\nDisadvantages:\n\n- MacroPy syntax is much nicer. The ``__init__`` stub thing can be considered kind of ugly\n  in comparison.\n- Do not support custom initialization logic. This can be achieved by using CaseClassMixin_ but\n  additional work will have to be done by the programmer.\n- Do not support ``*args`` and ``**kwargs`` in the constructor. Again, this can be achieved by\n  using CaseClassMixin_ at the expense of doing more work.\n\n\nOther implementations\n---------------------\n\nOther implementations of the \"case class\" concept (or similar) in Python exists:\n\n- The constructor stub mechanism idea was stole from `this implementation`__ by hwiechers.\n\n__ `hwiechers`_\n\n- A simple implementation by Brian Wickman can be found in `this Gist`__.\n\n__ `wickman gist`_\n\n- `This discussion`__ on stackoverflow has some implementation ideas.\n\n__ `stackoverflow discussion`_\n\n\nDiscarded implementation ideas\n------------------------------\n\nSome implementation ideas were considered but discarded afterwards. Here some of them are\ndiscussed.\n\nFunctional syntax\n^^^^^^^^^^^^^^^^^\n\nThis means using a function to generate the class. This would be something like this:\n\n.. code:: python\n\n    Person = case_class('Person', 'name', age=None, gender=None)\n\nThe first problem with this idea is that there's no way to preserve the order of the fields.\nThe ``case_class`` function would have to be defined like this:\n\n.. code:: python\n\n    def case_class(__name__, *args, **kwargs):\n        ...\n\n``**kwargs`` is a unordered dictionary, so the order of the fields is lost.\n\nTo overcome this the following syntax could be used:\n\n.. code:: python\n\n    Person = case_class('Person', 'name', 'age', 'gender', age=None, gender=None)\n\nI thinks this syntax is not elegant enough. I don't like the repetition of field names and to have\nfield names represented as both strings and parameter names.\n\nPerhaps something like this would work too:\n\n.. code:: python\n\n    Person = case_class('Person', ['name', 'age', 'gender'], {'age': None, 'gender': None})\n\nBut again I think the syntax is not elegant.\n\nAlso, some functionalities would be difficult to support using this syntax, namely:\n\n- *Custom members*. This would mean complicate the signature of the ``case_class`` function or\n  add the custom members after the class is created. Like this:\n\n    .. code:: python\n\n        Person = case_class('Person', ...)\n\n        def present(self):\n            print ...\n\n        Person.present = present\n\n  Not very elegant.\n\n- *Inheritance*. This would require a new parameter to the ``case_class`` function, to allow to\n  pass in a base class.\n\n\nFields specification as parameters to the class decorator\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis would end the necessity to define an empty constructor. The syntax would be like this:\n\n.. code:: python\n\n    @case(name, age=None, gender=None)\n    class Person(object):\n        'Represent a person.'\n\nThe same problem faced by the function syntax arises: field ordering is not preserved, since\nthe ``case`` function would have to accept a ``**kwargs`` argument, which is an unordered dict.\n\nAlternate syntaxes, similar to the ones presented for the functional syntax, could overcome the\nfield ordering problem. However I think the solution using a ``__init__`` stub to define the\nfields is more elegant.\n\n\nFields specification as class attributes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe syntax would be like this:\n\n.. code:: python\n\n    @case\n    class Person(object):\n        name = NO_DEFAULT_VALUE\n        age = None\n        gender = None\n\nAgain, there's no way to preserve the order of the fields. The ``case`` function would have to\nretrieve the class attributes from ``Person.__dic__``, which is unordered.\n\nMaybe something like this would work:\n\n.. code:: python\n\n    @case\n    class Person(object):\n        __fields__ = (\n            ('name', NO_DEFAULT_VALUE),\n            ('age', None),\n            ('gender', None)\n        )\n\nHowever I think the solution using a ``__init__`` stub to define the fields is more elegant.\n\nContributing\n============\n\nPlease fork this project and submit a pull request if you would like to contribute.\nThanks in advance !\n\n\n.. Refer\u00eancias:\n.. _namedtuple: https://docs.python.org/2/library/collections.html#collections.namedtuple\n.. _`__slots__`: https://docs.python.org/2/reference/datamodel.html?highlight=__slots__#__slots__\n.. _MacroPy: https://github.com/lihaoyi/macropy#case-classes\n.. _`namedtuple source code`: https://github.com/python/cpython/blob/2.7/Lib/collections.py\n.. _`wickman gist`: https://gist.github.com/wickman/857930\n.. _`stackoverflow discussion`: http://stackoverflow.com/questions/1264833/python-class-factory-to-produce-simple-struct-like-classes\n.. _`hwiechers`: http://hwiechers.blogspot.com.br/2010/08/case-classes-in-python.html\n\nChangelog\n=========\n\n1.0.2 (2020-04-27)\n------------------\n\n- Allow to use more recent versions of ``funcsigs``.\n  [ale-rt]\n- Minor doc tweaks.\n  [rafaelbco]\n- Improve docstrings.\n  [rafaelbco]\n\n\n1.0.1 (2014-05-09)\n------------------\n\n- Improve documentation.\n- Minor refactoring.\n\n\n1.0.0 (2014-05-09)\n------------------\n\n- First release.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rafaelbco/rbco.caseclasses", "keywords": "caseclasses", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rbco.caseclasses", "package_url": "https://pypi.org/project/rbco.caseclasses/", "platform": "", "project_url": "https://pypi.org/project/rbco.caseclasses/", "project_urls": {"Homepage": "https://github.com/rafaelbco/rbco.caseclasses"}, "release_url": "https://pypi.org/project/rbco.caseclasses/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Compact syntax to define simple \"struct-like\" (or \"record-like\", \"bean-like\") classes.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/rafaelbco/rbco.caseclasses\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15e9ba82def712a4bab914409cfa8c79dcc21890/68747470733a2f2f7472617669732d63692e6f72672f72616661656c62636f2f7262636f2e63617365636c61737365732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/rafaelbco/rbco.caseclasses\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ffaa6a31b523a6015339c128ef34b2eea9016f2a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f72616661656c62636f2f7262636f2e63617365636c61737365732f62616467652e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/rbco.caseclasses/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81bcc3d911aea4e9c0f811b77e4bf1304bf660c8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7262636f2e63617365636c61737365732e737667\"></a>\n<a href=\"https://raw.githubusercontent.com/rafaelbco/rbco.caseclasses/master/docs/LICENSE.txt\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ebd059948b836c0542597721a27ce090d54d1f3e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7262636f2e63617365636c61737365732e737667\"></a>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id9\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#compatibility\" id=\"id10\" rel=\"nofollow\">Compatibility</a></li>\n<li><a href=\"#instalation\" id=\"id11\" rel=\"nofollow\">Instalation</a></li>\n<li><a href=\"#usage\" id=\"id12\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#basics\" id=\"id13\" rel=\"nofollow\">Basics</a></li>\n<li><a href=\"#mutability-and-slots\" id=\"id14\" rel=\"nofollow\">Mutability and __slots__</a></li>\n<li><a href=\"#structural-equality\" id=\"id15\" rel=\"nofollow\">Structural equality</a></li>\n<li><a href=\"#copy-constructor\" id=\"id16\" rel=\"nofollow\">Copy-constructor</a></li>\n<li><a href=\"#conversion-from-to-dictionary-and-tuple\" id=\"id17\" rel=\"nofollow\">Conversion from/to dictionary and tuple</a></li>\n<li><a href=\"#id1\" id=\"id18\" rel=\"nofollow\">Custom members</a></li>\n<li><a href=\"#inheritance\" id=\"id19\" rel=\"nofollow\">Inheritance</a></li>\n<li><a href=\"#overriding-case-class-behavior\" id=\"id20\" rel=\"nofollow\">Overriding case class behavior</a></li>\n<li><a href=\"#using-caseclassmixin-for-more-flexibility\" id=\"id21\" rel=\"nofollow\">Using <tt>CaseClassMixin</tt> for more flexibility</a></li>\n</ul>\n</li>\n<li><a href=\"#limitations\" id=\"id22\" rel=\"nofollow\">Limitations</a></li>\n<li><a href=\"#motivation-design-decisions-and-other-implementations\" id=\"id23\" rel=\"nofollow\">Motivation, design decisions and other implementations</a><ul>\n<li><a href=\"#comparison-with-macropy\" id=\"id24\" rel=\"nofollow\">Comparison with MacroPy</a></li>\n<li><a href=\"#other-implementations\" id=\"id25\" rel=\"nofollow\">Other implementations</a></li>\n<li><a href=\"#discarded-implementation-ideas\" id=\"id26\" rel=\"nofollow\">Discarded implementation ideas</a><ul>\n<li><a href=\"#functional-syntax\" id=\"id27\" rel=\"nofollow\">Functional syntax</a></li>\n<li><a href=\"#fields-specification-as-parameters-to-the-class-decorator\" id=\"id28\" rel=\"nofollow\">Fields specification as parameters to the class decorator</a></li>\n<li><a href=\"#fields-specification-as-class-attributes\" id=\"id29\" rel=\"nofollow\">Fields specification as class attributes</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#contributing\" id=\"id30\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#changelog\" id=\"id31\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id6\" id=\"id32\" rel=\"nofollow\">1.0.2 (2020-04-27)</a></li>\n<li><a href=\"#id7\" id=\"id33\" rel=\"nofollow\">1.0.1 (2014-05-09)</a></li>\n<li><a href=\"#id8\" id=\"id34\" rel=\"nofollow\">1.0.0 (2014-05-09)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Overview</a></h2>\n<p>Provide a compact syntax to define simple \u201cstruct-like\u201d (or \u201crecord-like\u201d, \u201cbean-like\u201d) classes.\nThe resulting classes are very similar to <a href=\"https://docs.python.org/2/library/collections.html#collections.namedtuple\" rel=\"nofollow\">namedtuple</a>, but mutable, with a nicer syntax, more\nflexibility and more features.</p>\n<p>Here\u2019s a summary of the features:</p>\n<ul>\n<li>It\u2019s possible to define default values for fields.</li>\n<li>Useful <tt>__repr__</tt> and <tt>__str__</tt> implementations.</li>\n<li>Structural equality, i.e, useful <tt>__eq__</tt> and <tt>__ne__</tt> implementations.</li>\n<li><tt>copy</tt> method (copy-constructor).</li>\n<li>Conversion from/to dictionary and tuple.</li>\n<li><a href=\"https://docs.python.org/2/reference/datamodel.html?highlight=__slots__#__slots__\" rel=\"nofollow\">__slots__</a> declaration to improve performance and prevent assignment on unknown fields.</li>\n<li>It\u2019s possible to define custom methods.</li>\n<li>Supports inheritance.</li>\n</ul>\n<p>See also the <a href=\"#motivation\" rel=\"nofollow\">motivation</a> section for other implementations of the concept, specially <a href=\"https://github.com/lihaoyi/macropy#case-classes\" rel=\"nofollow\">MacroPy</a>\nwhich was the inspiration for this project and uses a very different approach.</p>\n</div>\n<div id=\"compatibility\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Compatibility</a></h2>\n<p>Currently only Python 2.7 is supported.</p>\n</div>\n<div id=\"instalation\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Instalation</a></h2>\n<p>The usual:</p>\n<pre>pip install rbco.caseclasses\n</pre>\n<p>Or:</p>\n<pre>easy_install rbco.caseclasses\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"basics\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Basics</a></h3>\n<p>Let\u2019s start by creating a simple case class:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">rbco.caseclasses</span> <span class=\"kn\">import</span> <span class=\"n\">case</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@case</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"\"\"Represent a person.\"\"\"</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</pre>\n<p>The declared <tt>__init__</tt> is just a stub. The parameters defines which fields the class will have\nand its default values. The <tt>__init__</tt> method is replaced by a new one, which takes care of\nassigning the values of the fields.</p>\n<p>The constructor works as expected, according to the provided <tt>__init__</tt> stub:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">)</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'m'</span><span class=\"p\">)</span>\n</pre>\n<p>Note that in the string representation the fields are in the same order as defined in the\nconstructor.</p>\n<p>The docstring of the class is preserved:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span>\n<span class=\"s1\">'Represent a person.'</span>\n</pre>\n<p>The signature of the constructor is not preserved. The resulting <tt>__init__</tt> method signature\nis a generic one, taking only <tt>*args</tt> and <tt>**kwargs</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">inspect</span> <span class=\"kn\">import</span> <span class=\"n\">getargspec</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">getargspec</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">)</span>\n<span class=\"n\">ArgSpec</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'self'</span><span class=\"p\">],</span> <span class=\"n\">varargs</span><span class=\"o\">=</span><span class=\"s1\">'args'</span><span class=\"p\">,</span> <span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"s1\">'kwargs'</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>However the docstring contains the original signature:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span>\n<span class=\"s1\">'Original signature: (self, name, age=None, gender=None)'</span>\n</pre>\n<p>It\u2019s not possible to create a case class without a constructor:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">rbco.caseclasses</span> <span class=\"kn\">import</span> <span class=\"n\">case</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@case</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">RuntimeError</span><span class=\"p\">:</span> <span class=\"n\">Case</span> <span class=\"k\">class</span> <span class=\"nc\">must</span> <span class=\"n\">define</span> <span class=\"n\">a</span> <span class=\"n\">constructor</span><span class=\"o\">.</span>\n</pre>\n</div>\n<div id=\"mutability-and-slots\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Mutability and __slots__</a></h3>\n<p>Instances are mutable:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Bob'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">35</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>However it\u2019s not possible to assign to unknown attributes:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">department</span> <span class=\"o\">=</span> <span class=\"s1\">'sales'</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">'Person'</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">'department'</span>\n</pre>\n<p>This is because of the <a href=\"https://docs.python.org/2/reference/datamodel.html?highlight=__slots__#__slots__\" rel=\"nofollow\">__slots__</a> declaration:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"vm\">__slots__</span>\n<span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'gender'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"structural-equality\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Structural equality</a></h3>\n<p>Structural equality is supported:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'John'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"o\">!=</span> <span class=\"n\">p2</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"s1\">'m'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"o\">==</span> <span class=\"n\">p2</span>\n<span class=\"kc\">False</span>\n</pre>\n</div>\n<div id=\"copy-constructor\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Copy-constructor</a></h3>\n<p>A copy-constructor is provided:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">copy_of_p1</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">copy_of_p1</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"ow\">is</span> <span class=\"n\">copy_of_p1</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p2</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'m'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"conversion-from-to-dictionary-and-tuple\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Conversion from/to dictionary and tuple</a></h3>\n<p>Conversion from/to dictionary is easy. The <tt>as_dict</tt> method return an <tt>OrderedDict</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'Mary'</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Mary'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">()</span>\n<span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'Mary'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">())</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Mary'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Conversion from/to tuple is also possible:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">as_tuple</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">as_tuple</span><span class=\"p\">())</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id1\">\n<span id=\"custom-members\"></span><h3><a href=\"#id18\" rel=\"nofollow\">Custom members</a></h3>\n<p>Case classes are very much like regular classes. It\u2019s possible to define any kind of custom\nmembers.</p>\n<p>The most common case should be adding a custom instance method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@case</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">distance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">(</span><span class=\"n\">p2</span><span class=\"p\">)</span>\n<span class=\"mf\">10.0</span>\n</pre>\n<p>Other kinds of class members are supported as well:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@case</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">class_attribute</span> <span class=\"o\">=</span> <span class=\"s1\">'some value'</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field1</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@staticmethod</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">static_method</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span> <span class=\"s1\">'This is an static method.'</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@classmethod</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">class_method</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span> <span class=\"s1\">'This is a class method of the class </span><span class=\"si\">{}</span><span class=\"s1\">.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Example</span><span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Example</span><span class=\"o\">.</span><span class=\"n\">class_attribute</span>\n<span class=\"s1\">'some value'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">class_attribute</span>\n<span class=\"s1\">'some value'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Example</span><span class=\"o\">.</span><span class=\"n\">static_method</span><span class=\"p\">()</span>\n<span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">an</span> <span class=\"n\">static</span> <span class=\"n\">method</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Example</span><span class=\"o\">.</span><span class=\"n\">class_method</span><span class=\"p\">()</span>\n<span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">a</span> <span class=\"k\">class</span> <span class=\"nc\">method</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"o\">.</span>\n</pre>\n</div>\n<div id=\"inheritance\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Inheritance</a></h3>\n<p>Let\u2019s create a base case class and a derived one:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@case</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">present</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span> <span class=\"s2\">\"I'm </span><span class=\"si\">{}</span><span class=\"s2\">, </span><span class=\"si\">{}</span><span class=\"s2\"> years old and my gender is '</span><span class=\"si\">{}</span><span class=\"s2\">'.\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>             <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>             <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>             <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gender</span>\n<span class=\"o\">...</span>         <span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@case</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Employee</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">department</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</pre>\n<p>It\u2019s necessary to repeat the fields of the base class, but you would have to do that anyway if\nyou were implementing the case classes manually.</p>\n<p>Methods from the base class are inherited:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"s1\">'m'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">present</span><span class=\"p\">()</span>\n<span class=\"n\">I</span><span class=\"s1\">'m John, 30 years old and my gender is '</span><span class=\"n\">m</span><span class=\"s1\">'.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Employee</span><span class=\"p\">(</span><span class=\"s1\">'Mary'</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"s1\">'f'</span><span class=\"p\">,</span> <span class=\"s1\">'sales'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">present</span><span class=\"p\">()</span>\n<span class=\"n\">I</span><span class=\"s1\">'m Mary, 33 years old and my gender is '</span><span class=\"sa\">f</span><span class=\"s1\">'.</span>\n</pre>\n<p>Instances of <tt>Person</tt> and <tt>Employee</tt> will always be considered different, since employees\nhave an extra field:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Employee</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"n\">e</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>Overriding a base class method works as expected:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@case</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">ImprovedEmployee</span><span class=\"p\">(</span><span class=\"n\">Employee</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">present</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ImprovedEmployee</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">present</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span> <span class=\"s1\">'I work at the </span><span class=\"si\">{}</span><span class=\"s1\"> department.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ie</span> <span class=\"o\">=</span> <span class=\"n\">ImprovedEmployee</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Mary'</span><span class=\"p\">,</span> <span class=\"n\">department</span><span class=\"o\">=</span><span class=\"s1\">'marketing'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s1\">'f'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ie</span><span class=\"o\">.</span><span class=\"n\">present</span><span class=\"p\">()</span>\n<span class=\"n\">I</span><span class=\"s1\">'m Mary, 33 years old and my gender is '</span><span class=\"sa\">f</span><span class=\"s1\">'.</span>\n<span class=\"n\">I</span> <span class=\"n\">work</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"n\">marketing</span> <span class=\"n\">department</span><span class=\"o\">.</span>\n</pre>\n</div>\n<div id=\"overriding-case-class-behavior\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Overriding case class behavior</a></h3>\n<p>It\u2019s possible to override the standard case class methods (<tt>__repr__</tt>, <tt>__eq__</tt>, etc).\nFor example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@case</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"kc\">True</span>  <span class=\"c1\"># All `Foo`s are equal.</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>It\u2019s even possible to call the original version on the subclass method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@case</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s1\">'This is my string representation: '</span> <span class=\"o\">+</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__repr__</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">my</span> <span class=\"n\">string</span> <span class=\"n\">representation</span><span class=\"p\">:</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n</pre>\n<p>It\u2019s not possible to override the <tt>__init__</tt> method, because it\u2019s replaced when the <tt>@case</tt>\ndecorator is applied. If a custom constructor is needed using the <a href=\"#caseclassmixin\" rel=\"nofollow\">CaseClassMixin</a> can be\na solution.</p>\n</div>\n<div id=\"using-caseclassmixin-for-more-flexibility\">\n<span id=\"caseclassmixin\"></span><h3><a href=\"#id21\" rel=\"nofollow\">Using <tt>CaseClassMixin</tt> for more flexibility</a></h3>\n<p>The classes created by the <tt>@case</tt> decorator inherits from <tt>CaseClassMixin</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">rbco.caseclasses</span> <span class=\"kn\">import</span> <span class=\"n\">CaseClassMixin</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">CaseClassMixin</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>The <tt>CaseClassMixin</tt> provides all the \u201ccase class\u201d behavior, except for the constructor.\nTo use <tt>CaseClassMixin</tt> directly the only requirement the subclass must match is to provide a\n<tt>__fields__</tt> attribute, containing a sequence of field names.</p>\n<p>This can be useful if greater flexibility is required. In the following example we create a case\nclass with a custom constructor:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">CaseClassMixin</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">__fields__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'field1'</span><span class=\"p\">,</span> <span class=\"s1\">'field2'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field1</span> <span class=\"o\">=</span> <span class=\"n\">field1</span> <span class=\"o\">+</span> <span class=\"s1\">'_modified'</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"s1\">'bar_modified'</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre>\n</div>\n</div>\n<div id=\"limitations\">\n<h2><a href=\"#id22\" rel=\"nofollow\">Limitations</a></h2>\n<ul>\n<li><p>The constructor of a case class cannot be customized because it\u2019s replaced when the <tt>@case</tt>\ndecorator is applied. See the section about <a href=\"#caseclassmixin\" rel=\"nofollow\">CaseClassMixin</a> for an alternative.</p>\n</li>\n<li><p>It\u2019s not possible to assign to unknow fields because of the <tt>__slots__</tt> declaration.</p>\n</li>\n<li><p>The constructor cannot take <tt>*args</tt> or <tt>**kwargs</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@case</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">RuntimeError</span><span class=\"p\">:</span> <span class=\"n\">Case</span> <span class=\"k\">class</span> <span class=\"nc\">constructor</span> <span class=\"n\">cannot</span> <span class=\"n\">take</span> <span class=\"o\">*</span><span class=\"n\">args</span> <span class=\"ow\">or</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"o\">.</span>\n</pre>\n<p>See the section about <a href=\"#caseclassmixin\" rel=\"nofollow\">CaseClassMixin</a> for an alternative.</p>\n</li>\n</ul>\n</div>\n<div id=\"motivation-design-decisions-and-other-implementations\">\n<span id=\"motivation\"></span><h2><a href=\"#id23\" rel=\"nofollow\">Motivation, design decisions and other implementations</a></h2>\n<div id=\"comparison-with-macropy\">\n<h3><a href=\"#id24\" rel=\"nofollow\">Comparison with MacroPy</a></h3>\n<p>The idea for this project came from <a href=\"https://github.com/lihaoyi/macropy#case-classes\" rel=\"nofollow\">MacroPy</a>. It provides an implementation of case classes using\nsyntactic macros, which results in a very elegant way to define the case classes.\nThe motivation was to provide similar functionality without resorting to syntactic macros nor\nstring evaluation (<a href=\"https://github.com/python/cpython/blob/2.7/Lib/collections.py\" rel=\"nofollow\">the approach took by namedtuple</a>). In other words: to provide the best\nimplementation possible without using much magic.</p>\n<p>The comparison to <a href=\"https://github.com/lihaoyi/macropy#case-classes\" rel=\"nofollow\">MacroPy</a> can be summarized as follows:</p>\n<p>Advantages:</p>\n<ul>\n<li>No magic.</li>\n<li>Allows any kind of <a href=\"#custom-members\" rel=\"nofollow\">custom members</a>, including instance methods.</li>\n<li>Since case classes are just regular classes, any kind of inheritance is allowed.</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>MacroPy syntax is much nicer. The <tt>__init__</tt> stub thing can be considered kind of ugly\nin comparison.</li>\n<li>Do not support custom initialization logic. This can be achieved by using <a href=\"#caseclassmixin\" rel=\"nofollow\">CaseClassMixin</a> but\nadditional work will have to be done by the programmer.</li>\n<li>Do not support <tt>*args</tt> and <tt>**kwargs</tt> in the constructor. Again, this can be achieved by\nusing <a href=\"#caseclassmixin\" rel=\"nofollow\">CaseClassMixin</a> at the expense of doing more work.</li>\n</ul>\n</div>\n<div id=\"other-implementations\">\n<h3><a href=\"#id25\" rel=\"nofollow\">Other implementations</a></h3>\n<p>Other implementations of the \u201ccase class\u201d concept (or similar) in Python exists:</p>\n<ul>\n<li>The constructor stub mechanism idea was stole from <a href=\"http://hwiechers.blogspot.com.br/2010/08/case-classes-in-python.html\" rel=\"nofollow\">this implementation</a> by hwiechers.</li>\n</ul>\n<ul>\n<li>A simple implementation by Brian Wickman can be found in <a href=\"https://gist.github.com/wickman/857930\" rel=\"nofollow\">this Gist</a>.</li>\n</ul>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1264833/python-class-factory-to-produce-simple-struct-like-classes\" rel=\"nofollow\">This discussion</a> on stackoverflow has some implementation ideas.</li>\n</ul>\n</div>\n<div id=\"discarded-implementation-ideas\">\n<h3><a href=\"#id26\" rel=\"nofollow\">Discarded implementation ideas</a></h3>\n<p>Some implementation ideas were considered but discarded afterwards. Here some of them are\ndiscussed.</p>\n<div id=\"functional-syntax\">\n<h4><a href=\"#id27\" rel=\"nofollow\">Functional syntax</a></h4>\n<p>This means using a function to generate the class. This would be something like this:</p>\n<pre><span class=\"n\">Person</span> <span class=\"o\">=</span> <span class=\"n\">case_class</span><span class=\"p\">(</span><span class=\"s1\">'Person'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>The first problem with this idea is that there\u2019s no way to preserve the order of the fields.\nThe <tt>case_class</tt> function would have to be defined like this:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">case_class</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p><tt>**kwargs</tt> is a unordered dictionary, so the order of the fields is lost.</p>\n<p>To overcome this the following syntax could be used:</p>\n<pre><span class=\"n\">Person</span> <span class=\"o\">=</span> <span class=\"n\">case_class</span><span class=\"p\">(</span><span class=\"s1\">'Person'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>I thinks this syntax is not elegant enough. I don\u2019t like the repetition of field names and to have\nfield names represented as both strings and parameter names.</p>\n<p>Perhaps something like this would work too:</p>\n<pre><span class=\"n\">Person</span> <span class=\"o\">=</span> <span class=\"n\">case_class</span><span class=\"p\">(</span><span class=\"s1\">'Person'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'gender'</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'gender'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">})</span>\n</pre>\n<p>But again I think the syntax is not elegant.</p>\n<p>Also, some functionalities would be difficult to support using this syntax, namely:</p>\n<ul>\n<li><p><em>Custom members</em>. This would mean complicate the signature of the <tt>case_class</tt> function or\nadd the custom members after the class is created. Like this:</p>\n<blockquote>\n<pre><span class=\"n\">Person</span> <span class=\"o\">=</span> <span class=\"n\">case_class</span><span class=\"p\">(</span><span class=\"s1\">'Person'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">present</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"o\">...</span>\n\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">present</span> <span class=\"o\">=</span> <span class=\"n\">present</span>\n</pre>\n</blockquote>\n<p>Not very elegant.</p>\n</li>\n<li><p><em>Inheritance</em>. This would require a new parameter to the <tt>case_class</tt> function, to allow to\npass in a base class.</p>\n</li>\n</ul>\n</div>\n<div id=\"fields-specification-as-parameters-to-the-class-decorator\">\n<h4><a href=\"#id28\" rel=\"nofollow\">Fields specification as parameters to the class decorator</a></h4>\n<p>This would end the necessity to define an empty constructor. The syntax would be like this:</p>\n<pre><span class=\"nd\">@case</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"s1\">'Represent a person.'</span>\n</pre>\n<p>The same problem faced by the function syntax arises: field ordering is not preserved, since\nthe <tt>case</tt> function would have to accept a <tt>**kwargs</tt> argument, which is an unordered dict.</p>\n<p>Alternate syntaxes, similar to the ones presented for the functional syntax, could overcome the\nfield ordering problem. However I think the solution using a <tt>__init__</tt> stub to define the\nfields is more elegant.</p>\n</div>\n<div id=\"fields-specification-as-class-attributes\">\n<h4><a href=\"#id29\" rel=\"nofollow\">Fields specification as class attributes</a></h4>\n<p>The syntax would be like this:</p>\n<pre><span class=\"nd\">@case</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">NO_DEFAULT_VALUE</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre>\n<p>Again, there\u2019s no way to preserve the order of the fields. The <tt>case</tt> function would have to\nretrieve the class attributes from <tt>Person.__dic__</tt>, which is unordered.</p>\n<p>Maybe something like this would work:</p>\n<pre><span class=\"nd\">@case</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">__fields__</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">NO_DEFAULT_VALUE</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>However I think the solution using a <tt>__init__</tt> stub to define the fields is more elegant.</p>\n</div>\n</div>\n</div>\n<div id=\"contributing\">\n<h2><a href=\"#id30\" rel=\"nofollow\">Contributing</a></h2>\n<p>Please fork this project and submit a pull request if you would like to contribute.\nThanks in advance !</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id31\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id6\">\n<h3><a href=\"#id32\" rel=\"nofollow\">1.0.2 (2020-04-27)</a></h3>\n<ul>\n<li>Allow to use more recent versions of <tt>funcsigs</tt>.\n[ale-rt]</li>\n<li>Minor doc tweaks.\n[rafaelbco]</li>\n<li>Improve docstrings.\n[rafaelbco]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id33\" rel=\"nofollow\">1.0.1 (2014-05-09)</a></h3>\n<ul>\n<li>Improve documentation.</li>\n<li>Minor refactoring.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id34\" rel=\"nofollow\">1.0.0 (2014-05-09)</a></h3>\n<ul>\n<li>First release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7116277, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2e8786a011da94e47161afadc9d1b940", "sha256": "98c377908daf3896bff4a5995537ac3936d11704917414a5ffd4866898542b32"}, "downloads": -1, "filename": "rbco.caseclasses-1.0.0.zip", "has_sig": false, "md5_digest": "2e8786a011da94e47161afadc9d1b940", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27189, "upload_time": "2014-05-09T17:09:05", "upload_time_iso_8601": "2014-05-09T17:09:05.227917Z", "url": "https://files.pythonhosted.org/packages/50/0e/481cee458804ac9ecac53b078c6601ad812d25216826203146359da7f51f/rbco.caseclasses-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6a6cbdaa52e7b45ca0eae10bee551a22", "sha256": "af329a63598ce578e57412ac037ec5106a111bcf9b5bc4b8fb66c9749f957b62"}, "downloads": -1, "filename": "rbco.caseclasses-1.0.1.zip", "has_sig": false, "md5_digest": "6a6cbdaa52e7b45ca0eae10bee551a22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27656, "upload_time": "2014-05-09T17:57:12", "upload_time_iso_8601": "2014-05-09T17:57:12.016986Z", "url": "https://files.pythonhosted.org/packages/65/11/f2fa8e53933dd9b8b626adcf2b1cf917ddc0bb30c2ba685b0b1227870f20/rbco.caseclasses-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "9ab5625f6b5a66d9ddf8948662424b84", "sha256": "75cde1b8487122e9b22dee2e02d74b561e3a373b44501c1bccb5be35485abfba"}, "downloads": -1, "filename": "rbco.caseclasses-1.0.2.zip", "has_sig": false, "md5_digest": "9ab5625f6b5a66d9ddf8948662424b84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28703, "upload_time": "2020-04-28T01:02:04", "upload_time_iso_8601": "2020-04-28T01:02:04.772571Z", "url": "https://files.pythonhosted.org/packages/6d/a0/e0bfc08a7a54f46fdcbce3ac3b3c3f2a353abb969ecb048b30f4fdb6f32f/rbco.caseclasses-1.0.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9ab5625f6b5a66d9ddf8948662424b84", "sha256": "75cde1b8487122e9b22dee2e02d74b561e3a373b44501c1bccb5be35485abfba"}, "downloads": -1, "filename": "rbco.caseclasses-1.0.2.zip", "has_sig": false, "md5_digest": "9ab5625f6b5a66d9ddf8948662424b84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28703, "upload_time": "2020-04-28T01:02:04", "upload_time_iso_8601": "2020-04-28T01:02:04.772571Z", "url": "https://files.pythonhosted.org/packages/6d/a0/e0bfc08a7a54f46fdcbce3ac3b3c3f2a353abb969ecb048b30f4fdb6f32f/rbco.caseclasses-1.0.2.zip", "yanked": false}], "timestamp": "Fri May  8 03:06:52 2020"}