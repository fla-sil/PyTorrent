{"info": {"author": "Alexandru Gandrabur", "author_email": "alexandru.gandrabur@tremend.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# python-nabto-client\n\nPython Wrapper for Nabto Client\n\n## Requirements\n\n* Python 3.6+\n* `python3-dev` package for Debian distributions\n\n## Installation\n\nInstall using `pip`...\n\n    pip install -i https://test.pypi.org/simple/ nabto-client\n\n## Example\n\nLet's take a look at a quick example of using `nabto_client` to open a session and a tunnel.\n\n    import nabto_client\n    \n    NABTO_HOME_DIRECTORY = \"/home/nabto/example\"\n\n    USER = \"user\"\n    PASSWORD = \"password\"\n    \n    LOCAL_PORT = 7000\n    NABTO_HOST = \"example.appmyproduct.com\"\n    REMOTE_HOST = \"localhost\"\n    REMOTE_PORT = 8000\n\n    # Initializes the Nabto client API\n    nabto_client.startup(NABTO_HOME_DIRECTORY)\n    \n    # Creates a Nabto self signed profile\n    nabto_client.createSelfSignedProfile(USER, PASSWORD)\n    \n    with nabto_client.NabtoSession(USER, PASSWORD) as session:\n        with nabto_client.NabtoTunnel(session, LOCAL_PORT, NABTO_HOST, REMOTE_HOST, REMOTE_PORT) as port:\n            print(f'Opened tunnel on port {port}')\n            ...\n            \n    # Releases any resources held by the Nabto client API\n    nabto_client.shutdown()\n\n### Tunnel status\nThe example above doesn't allow to query the current status of the tunnel because the context manager returns the port not the tunnel object.\n\nIf you want to query the tunnel status, don't use the context manager, instead create and open a tunnel like this:\n\n    tunnel = nabto_client.NabtoTunnel(session, LOCAL_PORT, NABTO_HOST, REMOTE_HOST, REMOTE_PORT)\n    print(f'Tunnel status is {tunnel.status()}') # -1 or TunnelStatus.CLOSED\n    port = tunnel.openTcp()\n    print(f'Opened tunnel on port {port}')\n    print(f'Tunnel status is {tunnel.status()}') # 3 or TunnelStatus.LOCAL\n    # ... do something with the tunnel\n    tunnel.close()\n    if nabto_client.TunnelStatus.CLOSED == tunnel.status():\n        print(f'Tunnel is closed')\n\nYou can also run `example/cli.py` for an interactive example.\n\n    python example/cli.py --device example.appmyproduct.com", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.nabto.com/developer", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nabto-client", "package_url": "https://pypi.org/project/nabto-client/", "platform": "", "project_url": "https://pypi.org/project/nabto-client/", "project_urls": {"Homepage": "https://www.nabto.com/developer"}, "release_url": "https://pypi.org/project/nabto-client/1.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Nabto Client Wrapper for Python", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-nabto-client</h1>\n<p>Python Wrapper for Nabto Client</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6+</li>\n<li><code>python3-dev</code> package for Debian distributions</li>\n</ul>\n<h2>Installation</h2>\n<p>Install using <code>pip</code>...</p>\n<pre><code>pip install -i https://test.pypi.org/simple/ nabto-client\n</code></pre>\n<h2>Example</h2>\n<p>Let's take a look at a quick example of using <code>nabto_client</code> to open a session and a tunnel.</p>\n<pre><code>import nabto_client\n\nNABTO_HOME_DIRECTORY = \"/home/nabto/example\"\n\nUSER = \"user\"\nPASSWORD = \"password\"\n\nLOCAL_PORT = 7000\nNABTO_HOST = \"example.appmyproduct.com\"\nREMOTE_HOST = \"localhost\"\nREMOTE_PORT = 8000\n\n# Initializes the Nabto client API\nnabto_client.startup(NABTO_HOME_DIRECTORY)\n\n# Creates a Nabto self signed profile\nnabto_client.createSelfSignedProfile(USER, PASSWORD)\n\nwith nabto_client.NabtoSession(USER, PASSWORD) as session:\n    with nabto_client.NabtoTunnel(session, LOCAL_PORT, NABTO_HOST, REMOTE_HOST, REMOTE_PORT) as port:\n        print(f'Opened tunnel on port {port}')\n        ...\n        \n# Releases any resources held by the Nabto client API\nnabto_client.shutdown()\n</code></pre>\n<h3>Tunnel status</h3>\n<p>The example above doesn't allow to query the current status of the tunnel because the context manager returns the port not the tunnel object.</p>\n<p>If you want to query the tunnel status, don't use the context manager, instead create and open a tunnel like this:</p>\n<pre><code>tunnel = nabto_client.NabtoTunnel(session, LOCAL_PORT, NABTO_HOST, REMOTE_HOST, REMOTE_PORT)\nprint(f'Tunnel status is {tunnel.status()}') # -1 or TunnelStatus.CLOSED\nport = tunnel.openTcp()\nprint(f'Opened tunnel on port {port}')\nprint(f'Tunnel status is {tunnel.status()}') # 3 or TunnelStatus.LOCAL\n# ... do something with the tunnel\ntunnel.close()\nif nabto_client.TunnelStatus.CLOSED == tunnel.status():\n    print(f'Tunnel is closed')\n</code></pre>\n<p>You can also run <code>example/cli.py</code> for an interactive example.</p>\n<pre><code>python example/cli.py --device example.appmyproduct.com\n</code></pre>\n\n          </div>"}, "last_serial": 6569267, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "5940fd2fb99ecc3d0cf1056983ed3a53", "sha256": "f47159ee3f5f48ca0f37ea59c3032b66faaab83fd1e3ad4a274d2346e3de4ec0"}, "downloads": -1, "filename": "nabto_client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5940fd2fb99ecc3d0cf1056983ed3a53", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23503710, "upload_time": "2020-01-31T10:26:52", "upload_time_iso_8601": "2020-01-31T10:26:52.827277Z", "url": "https://files.pythonhosted.org/packages/e1/aa/bd5bb7f87c2f54f1449fbf29e874962fe1127c95d5740d4b170cd61e1deb/nabto_client-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "382ae672e276e34369b04f72271c7169", "sha256": "8464aab4622834c0fbc5b20595526c471e20040cdf8c481ba38f6beff6db280c"}, "downloads": -1, "filename": "nabto_client-1.0.1.tar.gz", "has_sig": false, "md5_digest": "382ae672e276e34369b04f72271c7169", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31681413, "upload_time": "2020-02-04T15:05:11", "upload_time_iso_8601": "2020-02-04T15:05:11.020959Z", "url": "https://files.pythonhosted.org/packages/e1/81/bd74ab64a9484e480e2c7cec27d71093bbb3f705a926f2453ff912b4fac9/nabto_client-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "382ae672e276e34369b04f72271c7169", "sha256": "8464aab4622834c0fbc5b20595526c471e20040cdf8c481ba38f6beff6db280c"}, "downloads": -1, "filename": "nabto_client-1.0.1.tar.gz", "has_sig": false, "md5_digest": "382ae672e276e34369b04f72271c7169", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31681413, "upload_time": "2020-02-04T15:05:11", "upload_time_iso_8601": "2020-02-04T15:05:11.020959Z", "url": "https://files.pythonhosted.org/packages/e1/81/bd74ab64a9484e480e2c7cec27d71093bbb3f705a926f2453ff912b4fac9/nabto_client-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:54 2020"}