{"info": {"author": "Krisztian Szucs", "author_email": "szucs.krisztian@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Daskathon\n=========\n\n|Build Status| |Gitential|\n\n.. |Build Status| image:: https://travis-ci.org/daskos/daskathon.svg\n   :target: https://travis-ci.org/daskos/daskathon\n\n.. |Gitential| image:: https://api.gitential.com/accounts/6/projects/116/badges/coding-hours.svg\n   :alt: Gitential Coding Hours\n   :target: https://gitential.com/accounts/6/projects/116/share?uuid=8e3a1985-db2f-4923-885b-8555047f63be&utm_source=shield&utm_medium=shield&utm_campaign=116\n\nDeploy ``dask-worker`` processes on Marathon in response to load on a Dask\nscheduler.  This creates a Marathon application of dask-worker processes.  It\nwatches a Dask Scheduler object in the local process and, based on current\nrequested load, scales the Marathon application up and down.\n\n\nRun\n---\n\nIt's not yet clear how to expose all of the necessary options to a command line\ninterface.  For now we're doing everything manually.\n\nMake an IOLoop running in a separate thread:\n\n.. code-block:: python\n\n    with MarathonCluster(marathon='http://localhost:8080',\n                         cpus=1, mem=512, adaptive=True) as mc:\n        with Client(mc.scheduler_address) as c:\n            x = c.submit(lambda x: x + 1, 1)\n            assert x.result() == 2\n\n\nCreate a Client and submit work to the scheduler.  Marathon will scale workers\nup and down as neccessary in response to current workload.\n\n.. code-block:: python\n\n   from distributed import Client\n   c = Client(s.address)\n\n   future = c.submit(lambda x: x + 1, 10)\n\n\nTODO\n----\n\n- [x] Deploy the scheduler on the cluster\n- [x] Support a command line interface\n\n\nDocker Testing Harness\n----------------------\n\nThis sets up a docker cluster of one Mesos master and two Mesos agents using\ndocker-compose.\n\n**Requires**:\n\n- docker version >= 1.11.1\n- docker-compose version >= 1.7.1\n\n::\n\n   docker-compose up\n\nRun py.test::\n\n   py.test dask-marathon\n\n\nWeb UIs\n~~~~~~~\n\n- http://localhost:5050/ for Mesos master UI\n- http://localhost:5051/ for the first Mesos agent UI\n- http://localhost:8080/ for Marathon UI\n\n\nHistory\n~~~~~~~\n\nDask-marathon originally forked from https://github.com/mrocklin/dask-marathon\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/daskos/daskathon/", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "daskathon", "package_url": "https://pypi.org/project/daskathon/", "platform": "", "project_url": "https://pypi.org/project/daskathon/", "project_urls": {"Homepage": "http://github.com/daskos/daskathon/"}, "release_url": "https://pypi.org/project/daskathon/1.3.1/", "requires_dist": null, "requires_python": "", "summary": "Deploy Dask on Marathon", "version": "1.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/daskos/daskathon\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86db0a8d64250384b4d6df9954a7ca1ded1abd6b/68747470733a2f2f7472617669732d63692e6f72672f6461736b6f732f6461736b6174686f6e2e737667\"></a> <a href=\"https://gitential.com/accounts/6/projects/116/share?uuid=8e3a1985-db2f-4923-885b-8555047f63be&amp;utm_source=shield&amp;utm_medium=shield&amp;utm_campaign=116\" rel=\"nofollow\"><img alt=\"Gitential Coding Hours\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e562005eae083649e44c838135c82e6f4b7445ea/68747470733a2f2f6170692e676974656e7469616c2e636f6d2f6163636f756e74732f362f70726f6a656374732f3131362f6261646765732f636f64696e672d686f7572732e737667\"></a></p>\n<p>Deploy <tt><span class=\"pre\">dask-worker</span></tt> processes on Marathon in response to load on a Dask\nscheduler.  This creates a Marathon application of dask-worker processes.  It\nwatches a Dask Scheduler object in the local process and, based on current\nrequested load, scales the Marathon application up and down.</p>\n<div id=\"run\">\n<h2>Run</h2>\n<p>It\u2019s not yet clear how to expose all of the necessary options to a command line\ninterface.  For now we\u2019re doing everything manually.</p>\n<p>Make an IOLoop running in a separate thread:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">MarathonCluster</span><span class=\"p\">(</span><span class=\"n\">marathon</span><span class=\"o\">=</span><span class=\"s1\">'http://localhost:8080'</span><span class=\"p\">,</span>\n                     <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">adaptive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">mc</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">mc</span><span class=\"o\">.</span><span class=\"n\">scheduler_address</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</pre>\n<p>Create a Client and submit work to the scheduler.  Marathon will scale workers\nup and down as neccessary in response to current workload.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">distributed</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">)</span>\n\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>[x] Deploy the scheduler on the cluster</li>\n<li>[x] Support a command line interface</li>\n</ul>\n</div>\n<div id=\"docker-testing-harness\">\n<h2>Docker Testing Harness</h2>\n<p>This sets up a docker cluster of one Mesos master and two Mesos agents using\ndocker-compose.</p>\n<p><strong>Requires</strong>:</p>\n<ul>\n<li>docker version &gt;= 1.11.1</li>\n<li>docker-compose version &gt;= 1.7.1</li>\n</ul>\n<pre>docker-compose up\n</pre>\n<p>Run py.test:</p>\n<pre>py.test dask-marathon\n</pre>\n<div id=\"web-uis\">\n<h3>Web UIs</h3>\n<ul>\n<li><a href=\"http://localhost:5050/\" rel=\"nofollow\">http://localhost:5050/</a> for Mesos master UI</li>\n<li><a href=\"http://localhost:5051/\" rel=\"nofollow\">http://localhost:5051/</a> for the first Mesos agent UI</li>\n<li><a href=\"http://localhost:8080/\" rel=\"nofollow\">http://localhost:8080/</a> for Marathon UI</li>\n</ul>\n</div>\n<div id=\"history\">\n<h3>History</h3>\n<p>Dask-marathon originally forked from <a href=\"https://github.com/mrocklin/dask-marathon\" rel=\"nofollow\">https://github.com/mrocklin/dask-marathon</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3377810, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "19e99efa53853049603249e8fab4352a", "sha256": "7e88075efd42125ef1bc5a13eb5bee7bafa28897db0913dae1eb78e0ac8a36fc"}, "downloads": -1, "filename": "daskathon-1.0.tar.gz", "has_sig": false, "md5_digest": "19e99efa53853049603249e8fab4352a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5566, "upload_time": "2017-03-24T13:55:59", "upload_time_iso_8601": "2017-03-24T13:55:59.980624Z", "url": "https://files.pythonhosted.org/packages/86/95/9f740d12fa0032463b839030e17a025e1335ac0543498eea77f3e420acc5/daskathon-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "957227237c23fd27c09c69dd6493b364", "sha256": "bc6c1d15965d30a475d0fe466061c710923a07b0bd9e457050cd7ce83112fd01"}, "downloads": -1, "filename": "daskathon-1.1.tar.gz", "has_sig": false, "md5_digest": "957227237c23fd27c09c69dd6493b364", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5567, "upload_time": "2017-03-30T13:48:29", "upload_time_iso_8601": "2017-03-30T13:48:29.644251Z", "url": "https://files.pythonhosted.org/packages/7d/fa/3fc75bf8dc8e888a2e12b5bc1a8635630b44aced0e8f11d9bcfb8b52b5a7/daskathon-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "0c969f6f797f6fbac6ca1c0a77911f3e", "sha256": "cfec753f2e92c527567e041a4d662737eb205b7feead95dfa7ae8b755b420e4a"}, "downloads": -1, "filename": "daskathon-1.1.1.tar.gz", "has_sig": false, "md5_digest": "0c969f6f797f6fbac6ca1c0a77911f3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5431, "upload_time": "2017-04-20T10:39:35", "upload_time_iso_8601": "2017-04-20T10:39:35.649932Z", "url": "https://files.pythonhosted.org/packages/45/cc/5bd9d75f2bfaa43f58e2632d4ce6eb44d812920dcfedd9fb230b363af78c/daskathon-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "c80c6f054a1c571385caab1082c591fc", "sha256": "ce5740dc5fe8e4f0cc2f584075a78950b649422b34d1d5dc4e0970d55358f46a"}, "downloads": -1, "filename": "daskathon-1.1.2.tar.gz", "has_sig": false, "md5_digest": "c80c6f054a1c571385caab1082c591fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5413, "upload_time": "2017-04-20T15:35:41", "upload_time_iso_8601": "2017-04-20T15:35:41.776103Z", "url": "https://files.pythonhosted.org/packages/5a/8e/e37f3745f9e0e3fb9412083323970f2c992bb3e855084dd7b5e15e79fe51/daskathon-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "9d95604c32e1c914aff6558b12affd4e", "sha256": "9801a7d930fee5a85940050d47124548a3d5edd5fa1bd0c0f4692a2f6b24854f"}, "downloads": -1, "filename": "daskathon-1.1.3.tar.gz", "has_sig": false, "md5_digest": "9d95604c32e1c914aff6558b12affd4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5651, "upload_time": "2017-05-19T14:06:19", "upload_time_iso_8601": "2017-05-19T14:06:19.491074Z", "url": "https://files.pythonhosted.org/packages/fa/2e/c940fd3ef67de4af200c78750627d98d580bc756cac6f1c445df41307d2d/daskathon-1.1.3.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bf9404fe36ec0233e05adcf966ba00d2", "sha256": "86867c987eea2c9d71c62e6ce9388342e9c82957a0d552d815f9879b515b9619"}, "downloads": -1, "filename": "daskathon-1.2.0.tar.gz", "has_sig": false, "md5_digest": "bf9404fe36ec0233e05adcf966ba00d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5796, "upload_time": "2017-06-02T09:41:50", "upload_time_iso_8601": "2017-06-02T09:41:50.105792Z", "url": "https://files.pythonhosted.org/packages/6e/f4/70fd8a3d125a53df5b63880346009af7ab19b98d143e741e708096c03d4b/daskathon-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "9ee397471ce86b7a0d15bbc0653bfbb0", "sha256": "0db55a9f6a599dd29071ee8547850f4f48c2d6f8b91099b4bede0e372b31caa3"}, "downloads": -1, "filename": "daskathon-1.3.0.tar.gz", "has_sig": false, "md5_digest": "9ee397471ce86b7a0d15bbc0653bfbb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22260, "upload_time": "2017-10-25T08:05:29", "upload_time_iso_8601": "2017-10-25T08:05:29.868598Z", "url": "https://files.pythonhosted.org/packages/58/f2/561184bd65971f0e80e3f119303954f9c6ed00dc011cb6e96395955ba140/daskathon-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "9f81d543d74e00aa7525dbbb04bd4c30", "sha256": "1dfb096965e61337d0825ba578c787acd50022de5e96c31ee0a4cf4a82835f70"}, "downloads": -1, "filename": "daskathon-1.3.1.tar.gz", "has_sig": false, "md5_digest": "9f81d543d74e00aa7525dbbb04bd4c30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23345, "upload_time": "2017-11-30T16:07:10", "upload_time_iso_8601": "2017-11-30T16:07:10.768742Z", "url": "https://files.pythonhosted.org/packages/79/3e/de77ae23ae88d4ab03c5f0575316987d3e758a824d914c2a12bc1805c22a/daskathon-1.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f81d543d74e00aa7525dbbb04bd4c30", "sha256": "1dfb096965e61337d0825ba578c787acd50022de5e96c31ee0a4cf4a82835f70"}, "downloads": -1, "filename": "daskathon-1.3.1.tar.gz", "has_sig": false, "md5_digest": "9f81d543d74e00aa7525dbbb04bd4c30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23345, "upload_time": "2017-11-30T16:07:10", "upload_time_iso_8601": "2017-11-30T16:07:10.768742Z", "url": "https://files.pythonhosted.org/packages/79/3e/de77ae23ae88d4ab03c5f0575316987d3e758a824d914c2a12bc1805c22a/daskathon-1.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:34 2020"}