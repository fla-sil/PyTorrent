{"info": {"author": "Boltenhagen Mathilde", "author_email": "boltenhagen@lsv.fr", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": ">Author : Boltenhagen Mathilde with Thomas Chatain and Josep Carmona<br>\n>Date : 09.2019<br>\n\n## INTRODUCTION \n\nThis project implements **Process Mining** algorithms with  _SAT encodings_ to get optimal results in case of verification problems.\nBoolean formulas are first created, then converted to CNF and solved with SAT solvers, thanks to  `pysat`.\nThis librairy used `pm4py` Objects. \n\nThe project is a translation of the Ocaml version `darksider` created by Thomas Chatain and Mathilde Boltenhagen. \n\n### Scientific papers\n\n- _Encoding Conformance Checking Artefacts in SAT_ by Mathilde Boltenhagen, Thomas Chatain, Josep Carmona <br>\n- _Anti-alignments in conformance checking\u2013the dark side of process models_ by Thomas Chatain, Josep Carmona\n\n#### To be implemented soon\n\n- (Ocaml version exists) _Generalized Alignment-Based Trace Clustering of Process Behavior_ by Mathilde Boltenhagen, Thomas Chatain, Josep Carmona\n\n## ENVIRONNEMENT & INSTALLATION\n\n `python 3.7.x `\n\n Simply run : \n `pip install da4py`\n\n (https://pypi.org/project/da4py/0.0.1/)\n\n\n## USAGE\n\nThe librairie uses pm4py. \n\n```python\npm4py.objects.petri import importer\npm4py.objects.log.importer.xes import factory as xes_importer\nfrom da4py.src.main.conformanceArtefacts import ConformanceArtefacts  \n# get the data with pm4py \nmodel, m0, mf = importer.pnml.import_net('<PATH_TO_MODEL>')\ntraces = xes_importer.import_log('<PATH_TO_LOG>')\n```\n### Anti-alignment\n> Formal definition : \n> Given a finite collection $L$ of log traces and a model $N$, an anti-alignment is a run $u \\in Runs(N)$ which maximizes its distance $\\min_{\\sigma \\in L} dist(\\sigma,u)$ to the log. \n\n\n\nThis launches the main module. This object, the model and the traces must be reloaded for each experimentation. This is an issue that will be fix soon. \n```python\nartefacts = ConformanceArtefacts()\n```\nWe can to set the size of the anti-alignment we want (usefull for prefix) : \n```python\nartefacts.setSize_of_run(10)\n```\nFor execution times or memory problems, we can set the maximum number of difference that will be tried. \n```python\nartefacts.setMax_d(10)\n```\n\nTwo types of distances are available : \n- Hamming distance\n- Edit distance\n\n```python\nartefacts.setDistance_type(\"edit\")\n```\nThen an anti-alignment can be found by running : \n```python\nartefacts.antiAlignment(model,m0,mf,traces)\nprint(artefacts.getRun())\nprint(artefacts.getTracesWithDistances())\n```\n\n### Precision \nThen we can compute precision :\n```python\nprint(artefacts.getPrecision())\n```\n\n### Other features \n\nOne can add silent transition label that will not cost in the distances :\n```python\nartefacts.setSilentLabel(\"tau\")\n```\n\nWe can also compute sum instead of min :\n```python\nartefacts.setOptimizeMin(False)\n```\n\n### Multi-alignment\nThe same features (not precision) also work for multi-alignment: \n```python\nmodel, m0, mf = importer.pnml.import_net('<PATH_TO_MODEL>')\ntraces = xes_importer.import_log('<PATH_TO_LOG>')\nartefacts = ConformanceArtefacts()\nartefacts.setSilentLabel(\"tau\")\nartefacts.setDistance_type(\"hamming\")\nartefacts.setOptimizeMin(True)\nartefacts.setSize_of_run(10)\nartefacts.setMax_d(10)\n\n# run a multi-Alignment\nartefacts.multiAlignment(model,m0,mf,traces)\nprint(artefacts.getRun())\nprint(artefacts.getTracesWithDistances())\n```\n\n\n## ACKNOWLEDGEMENT \n\nAffiliations : LSV, CNRS, ENS Paris-Saclay, Inria, Universit\u00e9 Paris-Saclay\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BoltMaud/da4py", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "da4py", "package_url": "https://pypi.org/project/da4py/", "platform": "", "project_url": "https://pypi.org/project/da4py/", "project_urls": {"Homepage": "https://github.com/BoltMaud/da4py"}, "release_url": "https://pypi.org/project/da4py/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "da4py implements state-of-the-art Process Mining methods over SAT encoding. An Ocaml version is Darksider.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n<p>Author : Boltenhagen Mathilde with Thomas Chatain and Josep Carmona<br>\nDate : 09.2019<br></p>\n</blockquote>\n<h2>INTRODUCTION</h2>\n<p>This project implements <strong>Process Mining</strong> algorithms with  <em>SAT encodings</em> to get optimal results in case of verification problems.\nBoolean formulas are first created, then converted to CNF and solved with SAT solvers, thanks to  <code>pysat</code>.\nThis librairy used <code>pm4py</code> Objects.</p>\n<p>The project is a translation of the Ocaml version <code>darksider</code> created by Thomas Chatain and Mathilde Boltenhagen.</p>\n<h3>Scientific papers</h3>\n<ul>\n<li><em>Encoding Conformance Checking Artefacts in SAT</em> by Mathilde Boltenhagen, Thomas Chatain, Josep Carmona <br></li>\n<li><em>Anti-alignments in conformance checking\u2013the dark side of process models</em> by Thomas Chatain, Josep Carmona</li>\n</ul>\n<h4>To be implemented soon</h4>\n<ul>\n<li>(Ocaml version exists) <em>Generalized Alignment-Based Trace Clustering of Process Behavior</em> by Mathilde Boltenhagen, Thomas Chatain, Josep Carmona</li>\n</ul>\n<h2>ENVIRONNEMENT &amp; INSTALLATION</h2>\n<p><code>python 3.7.x</code></p>\n<p>Simply run :\n<code>pip install da4py</code></p>\n<p>(<a href=\"https://pypi.org/project/da4py/0.0.1/\" rel=\"nofollow\">https://pypi.org/project/da4py/0.0.1/</a>)</p>\n<h2>USAGE</h2>\n<p>The librairie uses pm4py.</p>\n<pre><span class=\"n\">pm4py</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">petri</span> <span class=\"kn\">import</span> <span class=\"nn\">importer</span>\n<span class=\"n\">pm4py</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">importer</span><span class=\"o\">.</span><span class=\"n\">xes</span> <span class=\"kn\">import</span> <span class=\"nn\">factory</span> <span class=\"k\">as</span> <span class=\"nn\">xes_importer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">da4py.src.main.conformanceArtefacts</span> <span class=\"kn\">import</span> <span class=\"n\">ConformanceArtefacts</span>  \n<span class=\"c1\"># get the data with pm4py </span>\n<span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">m0</span><span class=\"p\">,</span> <span class=\"n\">mf</span> <span class=\"o\">=</span> <span class=\"n\">importer</span><span class=\"o\">.</span><span class=\"n\">pnml</span><span class=\"o\">.</span><span class=\"n\">import_net</span><span class=\"p\">(</span><span class=\"s1\">'&lt;PATH_TO_MODEL&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">traces</span> <span class=\"o\">=</span> <span class=\"n\">xes_importer</span><span class=\"o\">.</span><span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">'&lt;PATH_TO_LOG&gt;'</span><span class=\"p\">)</span>\n</pre>\n<h3>Anti-alignment</h3>\n<blockquote>\n<p>Formal definition :\nGiven a finite collection $L$ of log traces and a model $N$, an anti-alignment is a run $u \\in Runs(N)$ which maximizes its distance $\\min_{\\sigma \\in L} dist(\\sigma,u)$ to the log.</p>\n</blockquote>\n<p>This launches the main module. This object, the model and the traces must be reloaded for each experimentation. This is an issue that will be fix soon.</p>\n<pre><span class=\"n\">artefacts</span> <span class=\"o\">=</span> <span class=\"n\">ConformanceArtefacts</span><span class=\"p\">()</span>\n</pre>\n<p>We can to set the size of the anti-alignment we want (usefull for prefix) :</p>\n<pre><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">setSize_of_run</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>For execution times or memory problems, we can set the maximum number of difference that will be tried.</p>\n<pre><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">setMax_d</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>Two types of distances are available :</p>\n<ul>\n<li>Hamming distance</li>\n<li>Edit distance</li>\n</ul>\n<pre><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">setDistance_type</span><span class=\"p\">(</span><span class=\"s2\">\"edit\"</span><span class=\"p\">)</span>\n</pre>\n<p>Then an anti-alignment can be found by running :</p>\n<pre><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">antiAlignment</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"n\">m0</span><span class=\"p\">,</span><span class=\"n\">mf</span><span class=\"p\">,</span><span class=\"n\">traces</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">getRun</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">getTracesWithDistances</span><span class=\"p\">())</span>\n</pre>\n<h3>Precision</h3>\n<p>Then we can compute precision :</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">getPrecision</span><span class=\"p\">())</span>\n</pre>\n<h3>Other features</h3>\n<p>One can add silent transition label that will not cost in the distances :</p>\n<pre><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">setSilentLabel</span><span class=\"p\">(</span><span class=\"s2\">\"tau\"</span><span class=\"p\">)</span>\n</pre>\n<p>We can also compute sum instead of min :</p>\n<pre><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">setOptimizeMin</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h3>Multi-alignment</h3>\n<p>The same features (not precision) also work for multi-alignment:</p>\n<pre><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">m0</span><span class=\"p\">,</span> <span class=\"n\">mf</span> <span class=\"o\">=</span> <span class=\"n\">importer</span><span class=\"o\">.</span><span class=\"n\">pnml</span><span class=\"o\">.</span><span class=\"n\">import_net</span><span class=\"p\">(</span><span class=\"s1\">'&lt;PATH_TO_MODEL&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">traces</span> <span class=\"o\">=</span> <span class=\"n\">xes_importer</span><span class=\"o\">.</span><span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">'&lt;PATH_TO_LOG&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">artefacts</span> <span class=\"o\">=</span> <span class=\"n\">ConformanceArtefacts</span><span class=\"p\">()</span>\n<span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">setSilentLabel</span><span class=\"p\">(</span><span class=\"s2\">\"tau\"</span><span class=\"p\">)</span>\n<span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">setDistance_type</span><span class=\"p\">(</span><span class=\"s2\">\"hamming\"</span><span class=\"p\">)</span>\n<span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">setOptimizeMin</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">setSize_of_run</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">setMax_d</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># run a multi-Alignment</span>\n<span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">multiAlignment</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"n\">m0</span><span class=\"p\">,</span><span class=\"n\">mf</span><span class=\"p\">,</span><span class=\"n\">traces</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">getRun</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">artefacts</span><span class=\"o\">.</span><span class=\"n\">getTracesWithDistances</span><span class=\"p\">())</span>\n</pre>\n<h2>ACKNOWLEDGEMENT</h2>\n<p>Affiliations : LSV, CNRS, ENS Paris-Saclay, Inria, Universit\u00e9 Paris-Saclay</p>\n\n          </div>"}, "last_serial": 6082946, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "bc4db923a7741e7ef333692d1c4dba06", "sha256": "266d6a80a0715f58c9770be0c37cd0f030b7ab4b1c3faefeb427158d43bfd284"}, "downloads": -1, "filename": "da4py-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bc4db923a7741e7ef333692d1c4dba06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22519, "upload_time": "2019-11-05T18:47:13", "upload_time_iso_8601": "2019-11-05T18:47:13.952142Z", "url": "https://files.pythonhosted.org/packages/f6/ac/94a83f59d6b437a9bcbf90620e4293fc66a01065b68a01abaf33ce437eea/da4py-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e66e3b6c44d640dac5034f0089b76eb5", "sha256": "8087227a159d21a88dec17d3f67c59dc2f6fdc5a0fa6269565beafc7e1cb6778"}, "downloads": -1, "filename": "da4py-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e66e3b6c44d640dac5034f0089b76eb5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16763, "upload_time": "2019-11-05T18:47:16", "upload_time_iso_8601": "2019-11-05T18:47:16.559959Z", "url": "https://files.pythonhosted.org/packages/a6/f2/a56c6e363190b6fdb11dae44fc2dd1579af55d6fc93b3aae6e978ec01be6/da4py-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c78064994a64333c5a2740a89e7bdd61", "sha256": "ce0f903b73f23a6f34f43b10775f0260882fa6370c9826367c0ef4a6ac31c525"}, "downloads": -1, "filename": "da4py-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c78064994a64333c5a2740a89e7bdd61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23087, "upload_time": "2019-11-05T20:46:32", "upload_time_iso_8601": "2019-11-05T20:46:32.299403Z", "url": "https://files.pythonhosted.org/packages/b9/66/c0a6a1ce595fba529066028b0bc4c6cfd0d50d9c5c0c282a563c79d3e575/da4py-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0e2798aea616a709786e49019160bb9", "sha256": "b68673771dba51fc6d6696306ada61e3d9a6b5bc87b6ae9d171abc7c522ff943"}, "downloads": -1, "filename": "da4py-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b0e2798aea616a709786e49019160bb9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17918, "upload_time": "2019-11-05T20:46:33", "upload_time_iso_8601": "2019-11-05T20:46:33.934803Z", "url": "https://files.pythonhosted.org/packages/db/0f/dc962eacfd0d000c14b20182ce506d4dbc03302e2773c8a525f54cae26b8/da4py-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c78064994a64333c5a2740a89e7bdd61", "sha256": "ce0f903b73f23a6f34f43b10775f0260882fa6370c9826367c0ef4a6ac31c525"}, "downloads": -1, "filename": "da4py-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c78064994a64333c5a2740a89e7bdd61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23087, "upload_time": "2019-11-05T20:46:32", "upload_time_iso_8601": "2019-11-05T20:46:32.299403Z", "url": "https://files.pythonhosted.org/packages/b9/66/c0a6a1ce595fba529066028b0bc4c6cfd0d50d9c5c0c282a563c79d3e575/da4py-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0e2798aea616a709786e49019160bb9", "sha256": "b68673771dba51fc6d6696306ada61e3d9a6b5bc87b6ae9d171abc7c522ff943"}, "downloads": -1, "filename": "da4py-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b0e2798aea616a709786e49019160bb9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17918, "upload_time": "2019-11-05T20:46:33", "upload_time_iso_8601": "2019-11-05T20:46:33.934803Z", "url": "https://files.pythonhosted.org/packages/db/0f/dc962eacfd0d000c14b20182ce506d4dbc03302e2773c8a525f54cae26b8/da4py-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:57 2020"}