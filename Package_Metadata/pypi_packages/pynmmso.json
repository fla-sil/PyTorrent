{"info": {"author": "Ally Hume", "author_email": "a.hume@epcc.ed.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering"], "description": "***********************************************************\nNiching Migratory Multi-Swarm Optimser for Python (pynmmso)\n***********************************************************\n\nPython implementation of the Niching Migratory Multi-Swarm Optimser, described\nin: \"*Running Up Those Hills: Multi-Modal Search with the Niching Migratory Multi-Swarm Optimiser*\"\nby Jonathan E. Fieldsend published in Proceedings of the IEEE Congress on Evolutionary Computation, \npages 2593-2600, 2014 (http://hdl.handle.net/10871/15247)\n\nPlease reference this paper if you undertake work utilising this code.\n\nDocumentation for pynmmso can be found at: https://github.com/EPCCed/pynmmso/wiki\n\nInstall pynmmso\n===============\n\nThe Python implementation of NMMSO requires Python 3 and Numpy (https://www.numpy.org/).  \n\nYou can install pynmmso using pip::\n\n    pip install pynmmso\n\nUsing NMMSO\n===========\n\nWe will demonstrate using NMMSO to solve a one-dimensional optimisation problem. The function will we optimise is:\n\n-x\\ :sup:`4` + x\\ :sup:`3` + 3x\\ :sup:`2`\n\nPlotting this function with x in the range [-2, 3] gives:\n\n.. image:: https://github.com/EPCCed/pynmmso/wiki/images/1D-function.png\n\nThis function has two optima (one global and one local).  We can use NMMSO to find these optima.\n\nFirst we need to write Python code that captures the problem we wish to solve. Problems must be written as a Python class that implements two functions: ``fitness`` and ``get_bounds``.\n\nThe ``fitness`` function takes one argument. This argument is a 1D Numpy array containing a value for each parameter of the problem.  Since our problem is one dimensional this array will contain a single value. The function must return a single scalar value which is the *fitness* for the given parameter values.  This is where we implement the function to be optimised.\n\nThe ``get_bounds`` function takes no arguments and returns two Python lists that define the bounds of the parameter search.  The first list specifies the minimum value for each parameter, the second list specifies the maximum value for each parameter.  As our problem is one dimensional there will only be one value in each list.\n\nThe implementation of our problem in Python is therefore:\n\n.. code-block:: python\n\n  class MyProblem:\n    @staticmethod\n    def fitness(params):\n      x = params[0]\n      return -x**4 + x**3 + 3 * x**2\n\n    @staticmethod\n    def get_bounds():\n      return [-2], [3]\n\nThe following code uses NMMSO to solve this problem. The ``Nmmso`` object is constructed with an instance of the problem class.  The algorithm is then run and will stop at the end of the iteration where the number of fitness function evaluations exceeds the given\namount. When run the algorithm returns a list of objects that contain the location and value for each of the discovered modes.\n\n.. code-block:: python\n\n  from pynmmso import Nmmso\n\n\n  class MyProblem:\n      @staticmethod\n      def fitness(params):\n          x = params[0]\n          return -x**4 + x**3 + 3 * x**2\n\n      @staticmethod\n      def get_bounds():\n          return [-2], [3]\n\n\n  def main():\n      number_of_fitness_evaluations = 1000\n\n      nmmso = Nmmso(MyProblem())\n      my_result = nmmso.run(number_of_fitness_evaluations)\n      for mode_result in my_result:\n          print(\"Mode at {} has value {}\".format(mode_result.location, mode_result.value))\n\n\n  if __name__ == \"__main__\":\n      main()\n\n\nRunning this code produces output similar to the following:\n\n.. code-block:: python\n\n  Mode at [1.65586203] has value 5.247909824656198\n  Mode at [-0.90586887] has value 1.0450589249496887\n\nIt has correctly found the two peaks in the graph.\n\nFurther documentation is describing more advanced usage is available at: https://github.com/EPCCed/pynmmso/wiki", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/EPCCed/pynmmso/wiki", "keywords": "optimization,optimisation,optimizer,optimiser,multimodal,multi-modal,GA,genetic", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pynmmso", "package_url": "https://pypi.org/project/pynmmso/", "platform": "", "project_url": "https://pypi.org/project/pynmmso/", "project_urls": {"Homepage": "https://github.com/EPCCed/pynmmso/wiki"}, "release_url": "https://pypi.org/project/pynmmso/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Multi-Modal Search with the Niching Migratory Multi-Swarm Optimizer", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python implementation of the Niching Migratory Multi-Swarm Optimser, described\nin: \u201c<em>Running Up Those Hills: Multi-Modal Search with the Niching Migratory Multi-Swarm Optimiser</em>\u201d\nby Jonathan E. Fieldsend published in Proceedings of the IEEE Congress on Evolutionary Computation,\npages 2593-2600, 2014 (<a href=\"http://hdl.handle.net/10871/15247\" rel=\"nofollow\">http://hdl.handle.net/10871/15247</a>)</p>\n<p>Please reference this paper if you undertake work utilising this code.</p>\n<p>Documentation for pynmmso can be found at: <a href=\"https://github.com/EPCCed/pynmmso/wiki\" rel=\"nofollow\">https://github.com/EPCCed/pynmmso/wiki</a></p>\n<div id=\"install-pynmmso\">\n<h2>Install pynmmso</h2>\n<p>The Python implementation of NMMSO requires Python 3 and Numpy (<a href=\"https://www.numpy.org/\" rel=\"nofollow\">https://www.numpy.org/</a>).</p>\n<p>You can install pynmmso using pip:</p>\n<pre>pip install pynmmso\n</pre>\n</div>\n<div id=\"using-nmmso\">\n<h2>Using NMMSO</h2>\n<p>We will demonstrate using NMMSO to solve a one-dimensional optimisation problem. The function will we optimise is:</p>\n<p>-x<sup>4</sup> + x<sup>3</sup> + 3x<sup>2</sup></p>\n<p>Plotting this function with x in the range [-2, 3] gives:</p>\n<img alt=\"https://github.com/EPCCed/pynmmso/wiki/images/1D-function.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c8fd1aada8d921454a4ce2554e377aeb45a13b0/68747470733a2f2f6769746875622e636f6d2f4550434365642f70796e6d6d736f2f77696b692f696d616765732f31442d66756e6374696f6e2e706e67\">\n<p>This function has two optima (one global and one local).  We can use NMMSO to find these optima.</p>\n<p>First we need to write Python code that captures the problem we wish to solve. Problems must be written as a Python class that implements two functions: <tt>fitness</tt> and <tt>get_bounds</tt>.</p>\n<p>The <tt>fitness</tt> function takes one argument. This argument is a 1D Numpy array containing a value for each parameter of the problem.  Since our problem is one dimensional this array will contain a single value. The function must return a single scalar value which is the <em>fitness</em> for the given parameter values.  This is where we implement the function to be optimised.</p>\n<p>The <tt>get_bounds</tt> function takes no arguments and returns two Python lists that define the bounds of the parameter search.  The first list specifies the minimum value for each parameter, the second list specifies the maximum value for each parameter.  As our problem is one dimensional there will only be one value in each list.</p>\n<p>The implementation of our problem in Python is therefore:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyProblem</span><span class=\"p\">:</span>\n  <span class=\"nd\">@staticmethod</span>\n  <span class=\"k\">def</span> <span class=\"nf\">fitness</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n  <span class=\"nd\">@staticmethod</span>\n  <span class=\"k\">def</span> <span class=\"nf\">get_bounds</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<p>The following code uses NMMSO to solve this problem. The <tt>Nmmso</tt> object is constructed with an instance of the problem class.  The algorithm is then run and will stop at the end of the iteration where the number of fitness function evaluations exceeds the given\namount. When run the algorithm returns a list of objects that contain the location and value for each of the discovered modes.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pynmmso</span> <span class=\"kn\">import</span> <span class=\"n\">Nmmso</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyProblem</span><span class=\"p\">:</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fitness</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_bounds</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">number_of_fitness_evaluations</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n\n    <span class=\"n\">nmmso</span> <span class=\"o\">=</span> <span class=\"n\">Nmmso</span><span class=\"p\">(</span><span class=\"n\">MyProblem</span><span class=\"p\">())</span>\n    <span class=\"n\">my_result</span> <span class=\"o\">=</span> <span class=\"n\">nmmso</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">number_of_fitness_evaluations</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">mode_result</span> <span class=\"ow\">in</span> <span class=\"n\">my_result</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Mode at </span><span class=\"si\">{}</span><span class=\"s2\"> has value </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">mode_result</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"p\">,</span> <span class=\"n\">mode_result</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Running this code produces output similar to the following:</p>\n<pre><span class=\"n\">Mode</span> <span class=\"n\">at</span> <span class=\"p\">[</span><span class=\"mf\">1.65586203</span><span class=\"p\">]</span> <span class=\"n\">has</span> <span class=\"n\">value</span> <span class=\"mf\">5.247909824656198</span>\n<span class=\"n\">Mode</span> <span class=\"n\">at</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.90586887</span><span class=\"p\">]</span> <span class=\"n\">has</span> <span class=\"n\">value</span> <span class=\"mf\">1.0450589249496887</span>\n</pre>\n<p>It has correctly found the two peaks in the graph.</p>\n<p>Further documentation is describing more advanced usage is available at: <a href=\"https://github.com/EPCCed/pynmmso/wiki\" rel=\"nofollow\">https://github.com/EPCCed/pynmmso/wiki</a></p>\n</div>\n\n          </div>"}, "last_serial": 6354488, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9418b4d546e5238d2f8d1a8e38e93de9", "sha256": "41bee2b99bfebfc7ca6a19c5147864854a9affbb713746e0fd5a3606521ec1ce"}, "downloads": -1, "filename": "pynmmso-0.1.tar.gz", "has_sig": false, "md5_digest": "9418b4d546e5238d2f8d1a8e38e93de9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14558, "upload_time": "2019-05-22T09:38:04", "upload_time_iso_8601": "2019-05-22T09:38:04.282785Z", "url": "https://files.pythonhosted.org/packages/7b/f4/dc1932c52b7579c385e1be1018da923b4d42a5712edda162c63dd88f45a2/pynmmso-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b7b19dcedcc90c7912d3b92d9a4c5f33", "sha256": "bf8b679c9b2f5325a1a602b63001fa2ed2ca3de85635671ed18b713d29adb51c"}, "downloads": -1, "filename": "pynmmso-0.2.tar.gz", "has_sig": false, "md5_digest": "b7b19dcedcc90c7912d3b92d9a4c5f33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16992, "upload_time": "2019-05-22T14:47:51", "upload_time_iso_8601": "2019-05-22T14:47:51.153775Z", "url": "https://files.pythonhosted.org/packages/1a/e6/29305498ec7f1acc412f77ace8d14b20e845fdb979898217c802de2ccd25/pynmmso-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "89054541d2c816367b667e14ddabed09", "sha256": "037705f70a8da72d0bd782ed4936d7280a54a60d159030b7cc3ad7662d3a2f6f"}, "downloads": -1, "filename": "pynmmso-0.3.tar.gz", "has_sig": false, "md5_digest": "89054541d2c816367b667e14ddabed09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17005, "upload_time": "2019-06-11T13:48:57", "upload_time_iso_8601": "2019-06-11T13:48:57.881208Z", "url": "https://files.pythonhosted.org/packages/9f/39/95e6ba49834ce2a780a90e7f96129112b16a880446a95a3fcfe6decbbc7d/pynmmso-0.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "f7afb199254da05253782eda4385e86b", "sha256": "dda30f96aef6b16d9f806109295a79f0628bfaa6e3b8cffefa02817fd65cf478"}, "downloads": -1, "filename": "pynmmso-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f7afb199254da05253782eda4385e86b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17884, "upload_time": "2019-07-10T12:51:06", "upload_time_iso_8601": "2019-07-10T12:51:06.838198Z", "url": "https://files.pythonhosted.org/packages/4c/39/9343eaf85cf4814281c3daffd323906b5d35244b74d82705bc5a04cb48ca/pynmmso-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ae28005e7045c2da46ef765bc6acf7f1", "sha256": "2fcf215397747abfc355aec0eb203ad387b73e92a7a8f7fb1ee3e1067dcbaef3"}, "downloads": -1, "filename": "pynmmso-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ae28005e7045c2da46ef765bc6acf7f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17866, "upload_time": "2019-12-24T09:15:02", "upload_time_iso_8601": "2019-12-24T09:15:02.303016Z", "url": "https://files.pythonhosted.org/packages/22/36/bddb5a5f47b6b6b44f51ade5192cd03f853ffba5273f3945b38315d70717/pynmmso-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae28005e7045c2da46ef765bc6acf7f1", "sha256": "2fcf215397747abfc355aec0eb203ad387b73e92a7a8f7fb1ee3e1067dcbaef3"}, "downloads": -1, "filename": "pynmmso-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ae28005e7045c2da46ef765bc6acf7f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17866, "upload_time": "2019-12-24T09:15:02", "upload_time_iso_8601": "2019-12-24T09:15:02.303016Z", "url": "https://files.pythonhosted.org/packages/22/36/bddb5a5f47b6b6b44f51ade5192cd03f853ffba5273f3945b38315d70717/pynmmso-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:08 2020"}