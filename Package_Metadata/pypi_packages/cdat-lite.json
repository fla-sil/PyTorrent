{"info": {"author": "Ag Stephens", "author_email": "ag.stephens@stfc.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Science/Research", "License :: Other/Proprietary License", "Operating System :: POSIX :: Linux", "Topic :: Scientific/Engineering :: Atmospheric Science"], "description": "=========\ncdat-lite\n=========\n\n.. contents::\n\n.. sectnum::\n\nCdat-lite is a Python package for managing and analysing climate\nscience data.  It is a subset of the Climate Data Analysis Tools\n(CDAT_) developed by PCMDI_ at Lawrence Livermore National Laboratory.\n\nCdat-lite aims to complement CDAT by focusing on its core data\nmanagement and analysis components and by offering a radically\ndifferent installation system to CDAT.  As a result it is much more\nlightweight (hence the name): CDAT's source distribution is the order\nof 1Gb whereas cdat-lite is under 5Mb.\n\nCdat-lite is designed to work with the `CF checker`_ package.\n\n.. _CDAT: http://www2-pcmdi.llnl.gov/cdat\n.. _PCMDI: http://www2-pcmdi.llnl.gov/\n.. _`CF checker`: http://pypi.python.org/pypi/cfchecker\n\n\ncdat-lite versioning\n====================\n\nCdat-lite is a project that tracks versions of 2 other projects (CDAT\nand cdunifpp).  From version 6.0rc1 the cdat-lite version will not be\nbased directly on the CDAT version.  This is because CDAT updates its\nversion very seldom and stays as an \"alpha\" distribution for long\nperiods when the parts included in cdat-lite are generally stable.\n\nFull details of which versions of CDAT and cdunifpp a cdat-lite\ndistribution includes is available in the setup.py file and the\nPKG_INFO metadata.\n\nInstalling cdat-lite\n====================\n\ncdat-lite is distributed as a tarball available from the `cdat-lite\nhomepage`_ on the `NERC Data Grid wiki` .  It is also installable\nusing the ``easy_install`` tool.  If you are familiar with\n``easy_install`` try this super-quick installation recipe::\n\n  $ export NETCDF_HOME=/usr/local/netcdf\n  # Required if using a NetCDF4 compiled with HDF5\n  $ export HDF5_HOME=/usr/local/hdf5\n  $ easy_install cdat_lite \n\n\nDependencies\n------------\n\nTo install cdat-lite you will need:\n\n 1. `Python 2.5.x`_.  cdat-lite has not been tested on 2.6 but may\n work (feedback would be gratefully received).  It is unlikely to work on 3.0.\n\n 2. `setuptools`_.  cdat-lite will attempt to download and install\n setuptools if it is missing but it is safer to install it first.\n\n 3. `NetCDF-3.x`_ or greater.  cdat-lite should work with any\n relatively modern NetCDF3 installation on your system provided it is\n compiled as a shared library.  It will also work with NetCDF4\n configured in various different ways, including embedded OPeNDAP\n mode.\n\n 4. If you want to run the short test suite you will need nose_\n\n.. _`Python 2.5.x`: http://www.python.org/download/releases/2.5.4\n.. _`setuptools`: http://pypi.python/org/setuptools\n.. _`NetCDF-3.x`: http://www.unidata.ucar.edu/software/netcdf/\n.. _nose: http://somethingaboutorange.com/mrl/projects/nose/\n\nSelecting your NetCDF installation\n----------------------------------\n\ncdat-lite will work with NetCDF3 or NetCDF4 but because it is\nreferenced by shared libraries (the python C extension modules) it\nmust be compiled as position independent code.  If you have a NetCDF4\ninstallation you almost certainly are using shared libraries and even\nif you wish to use NetCDF3 it is probably easiest to install NetCDF as\na shared library (use ``--enable-shared`` in the NetCDF ``configure``\nscript).  Alternatively, you can configure NetCDF with::\n\n  $ ./configure --with-pic ...\n\nIf you are using NetCDF4 you will also need to configure HDF5 with ``--enable-shared`` or ``--with-pic``.\n\nIf you have the command ``nc-config`` in your path cdat-lite will\ndetect all library and include dependencies.  Otherwise cdat-lite will\nlook for a NetCDF installation in several places.\n\nIf your NetCDF is installed somewhere unusual, or if you want to\nselect a specific installation, set the NETCDF_HOME variable.  E.g.::\n\n  # sh users\n  $ export NETCDF_HOME=/usr/local/netcdf\n  # csh users\n  $ setenv NETCDF_HOME /usr/local/netcdf\n\nIf you are using NetCDF4 cdat-lite will also look for your HDF5\ninstallation which you can configure in a similar way::\n\n  # sh users\n  $ export HDF5_HOME=/usr/local/hdf5\n  # csh users\n  $ setenv HDF5_HOME /usr/local/hdf5\n\nFor compatibility with the ``netcdf4-python`` package cdat-lite also accepts ``NETCDF4_DIR`` AND ``HDF5_DIR`` as synonims for these environment variables.\n\nNote, you don't need these environment variables set to run cdat_lite,\nalthough the libraries must be findable by your system's dynamic\nlinker.  This can be configured by setting ``LD_LIBRARY_PATH`` or using ``ldconfig``.\n\nRunning the installer\n---------------------\n\nIf you have all the dependencies in place you can try using\n``easy_install`` to automatically download and install cdat_lite.  Make sure you have access to the internet, with the appropriate HTTP proxy settings, and do::\n\n  $ easy_install cdat-lite\n\nAlternatively you might want to see what you are installing :-).  In\nthis case either download the tarball__ or use ``easy_install`` to do it for you::\n\n  $ easy_install -eb . cdat-lite\n  # The cdat-lite tarball will be downloaded unpacked into you current directory\n\nNow from the distribution directory run the build and install steps separately::\n\n  $ python setup.py bdist_egg\n  $ easy_install dist/cdat-lite*.egg\n\n__ `cdat-lite homepage`_\n\n\n.. _`installing locally`:\n\nInstalling as an unprivileged user\n----------------------------------\n\nIf you don't have write access to your python distribution you can use\nthe tool virtualenv_ to create a local python environment with\nits own ``easy_install`` executable which you can then use to install\ncdat-lite.  In combination with ``NETCDF_HOME``, ``HDF5_HOME`` and\n``LD_LIBRARY_PATH`` it should be possible to install all dependencies\nof cdat-lite locally.  See the virtualenv_ for details on\ninstallation or try this recipe after downloading the virtualenv::\n\n  # From virtualenv distribution directory\n  $ ./virtualenv.py <virtualenv-path>\n  $ cd <virtualenv-path>\n  $ source bin/activate\n  (venv)$ easy_install cdat-lite\n\n.. _virtualenv: http://pypi.python.org/pypi/virtualenv\n\n\nPlatform-specific installation notes\n------------------------------------\n\nOS X\n''''\n\nChristopher Lee contributed the following experiences installing on OS X 10.6.7.\n\nMy particular Macbook has an Intel CPU, and the default on the Mac is\nto compile for the architecture x86_64. In order to override this\n(because python is 32 bit, and the netcdf libraries I use are also 32\nbit) I needed to pass in \"-arch i386\" to the compiler. I also needed\nthe little endian flag '-DBYTESWAP' when compiling the netcdf\ninterface (inside libcdms). The -DBYTESWAP flag should be included by\nthe libcdms configure script, where there is a section for 'darwin'\n(OS X), but it's currently configured without BYTESWAP (line\n6182). The problem here is that OS X used to run on PowerPC CPUs,\nwhich don't need the BYTESWAP flag. I'm not sure if this is your\nconfigure script or if it's from the cdat package.\n\nI included the -arch i386 and -DBYTESWAP in the setup.py in the\nlibcdms section, and the setup works fine.\n\nAfter running python setup.py build ; python setup.py install ; I\nstill get an error when importing cdms2. This problem is caused by the\nway that libcdms is linked to the netcdf libraries. The 'normal' Mac\nmethod is to link with absolute paths, but libcdms is linked with\nrelative paths (the libraries are references with @rpath). The result\nis that LD_LIBRARY_PATH environment variable is often empty. I'm not\nsure how to fix this in the 'Mac' way with absolute paths, but I added\nmy $NETCDF_HOME/lib directory to the variable and cdms2 now imports\nwithout error.\n\n\nTesting the installation\n========================\n\ncdat-lite ships with a small set of tests designed to verify that it\nhas been built successfuly.  These tests require the testing framework\nnose_.  Once cdat-lite is installed just run::\n\n  $ nosetests cdat_lite\n\nWhen run from cdat-lite's distribution directory nosetests will run\nslightly differently, running some tests that are known to fail at the\nmoment.  To disable this behaviour do:\n\n  $ nosetests --config=''\n\n.. _`cdat-lite homepage`: http://proj.badc.rl.ac.uk/ndg/wiki/CdatLite\n.. _`NERC Data Grid wiki`: http://proj.badc.rl.ac.uk/ndg/wiki\n\n\n\nFAQ\n===\n\nWhat is CDAT?\n-------------\n\nCDAT_ is a large suite of open source tools distributed by PCMDI_ for\nthe management and analysis of climate data.  It includes several\nvisualisation components and the graphical user interface VCDAT.\n\nWhat is the difference between CDAT and cdat-lite?\n--------------------------------------------------\n\nDifferences between CDAT and cdat-lite can be classified as\ndifferences in scope, i.e. which packages are included, and installation system.\n\ncdat-lite contains the 'cdms2' package and a few related\npackages.  It does not include the 'vcs' visualisation package or the\nVCDAT graphical user interface.  As of v5.1.1-0.3pre3 the included\npackages are:\n\n * cdms2\n\n * cdtime\n\n * cdutil\n\n * genutil\n\n * ncml\n\n * Properties\n\n * regrid2\n\n * unidataa\n\n * xmgrace\n\nCDAT bundles virtually all dependencies together in its source\ndistribution -- even Python itself.  This has its advantages as it\nsimplifies satisfying dependencies and avoids version conflicts\nbetween dependencies.  However, if you want to integrate CDAT's data\nmanagement components into your existing Python architecture CDAT can\nbe overkill.\n\n\nWhat has changed between cdat-lite-4.x and cdat-lite-5.x?\n---------------------------------------------------------\n\nIf you are a cdat-lite-4 user (or a CDAT 4 user) you have a big\nmigration job on your hands.  CDAT-4 uses the ``Numeric`` package for\narrays which has been out of date and unmaintained for a long time\nnow.  It is known to have problems on 64bit architectures.\n\nHow does cdat-lite track changes to CDAT?\n-----------------------------------------\n\ncdat-lite tries to release major new versions shortly after new\nversions of CDAT.  Sometimes CDAT-trunk contains important fixes that\nshould be applied so that the latest cdat_lite can run ahead of\nofficial CDAT releases (although sometimes CDAT recommends you build\nfrom trunk anyway).\n\nThe one exception is the UK Met. Office PP file support which is\nusually updated in cdat_lite before CDAT.  In all cases the exact\nbuild versions of CDAT and cdunifpp will be stated in the\ndistribution's ``setup.py`` file.\n\nHow can I use CMOR2 with cdat-lite?\n-----------------------------------\n\nWe are interested to hear any with experience of using CMOR2 with\ncdat-lite but it should be as simple as downloading the distribution\nand installing it in parallel with::\n\n  # From the CMOR install directory\n  $ python setup.py install\n\nHow can I use OPeNDAP with cdat-lite?\n-------------------------------------\n\nOPeNDAP support is an experimental feature of cdat-lite at the moment.\nUnlike CDAT you don't select OPeNDAP explicitly during installation\nbut cdat-lite will inherit any OPeNDAP support embedded into the\nNetCDF4 library.  Recent beta releases of NetCDF4 provides a switch to\ntransparently use OPeNDAP.\n\nHow do I install cdat-lite as an unprivileged user?\n---------------------------------------------------\n\nSee `installing locally`_\n\nWhich versions of NetCDF does cdat-lite support?\n------------------------------------------------\n\nTODO", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://proj.badc.rl.ac.uk/cedaservices/wiki/CdatLite", "keywords": null, "license": "http://www-pcmdi.llnl.gov/software-portal/cdat/docs/cdat-license", "maintainer": null, "maintainer_email": null, "name": "cdat-lite", "package_url": "https://pypi.org/project/cdat-lite/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cdat-lite/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://proj.badc.rl.ac.uk/cedaservices/wiki/CdatLite"}, "release_url": "https://pypi.org/project/cdat-lite/6.0.1/", "requires_dist": null, "requires_python": null, "summary": "Core components of the Climate Data Analysis tools.  This software is based on CDAT-6.0.alpha-g82e6c52 and cdunfpp0.13.", "version": "6.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#cdat-lite-versioning\" id=\"id2\" rel=\"nofollow\">1\u00a0\u00a0\u00a0cdat-lite versioning</a></li>\n<li><a href=\"#installing-cdat-lite\" id=\"id3\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Installing cdat-lite</a><ul>\n<li><a href=\"#dependencies\" id=\"id4\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0Dependencies</a></li>\n<li><a href=\"#selecting-your-netcdf-installation\" id=\"id5\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0Selecting your NetCDF installation</a></li>\n<li><a href=\"#running-the-installer\" id=\"id6\" rel=\"nofollow\">2.3\u00a0\u00a0\u00a0Running the installer</a></li>\n<li><a href=\"#installing-as-an-unprivileged-user\" id=\"id7\" rel=\"nofollow\">2.4\u00a0\u00a0\u00a0Installing as an unprivileged user</a></li>\n<li><a href=\"#platform-specific-installation-notes\" id=\"id8\" rel=\"nofollow\">2.5\u00a0\u00a0\u00a0Platform-specific installation notes</a></li>\n</ul>\n</li>\n<li><a href=\"#testing-the-installation\" id=\"id9\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Testing the installation</a></li>\n<li><a href=\"#faq\" id=\"id10\" rel=\"nofollow\">4\u00a0\u00a0\u00a0FAQ</a><ul>\n<li><a href=\"#what-is-cdat\" id=\"id11\" rel=\"nofollow\">4.1\u00a0\u00a0\u00a0What is CDAT?</a></li>\n<li><a href=\"#what-is-the-difference-between-cdat-and-cdat-lite\" id=\"id12\" rel=\"nofollow\">4.2\u00a0\u00a0\u00a0What is the difference between CDAT and cdat-lite?</a></li>\n<li><a href=\"#what-has-changed-between-cdat-lite-4-x-and-cdat-lite-5-x\" id=\"id13\" rel=\"nofollow\">4.3\u00a0\u00a0\u00a0What has changed between cdat-lite-4.x and cdat-lite-5.x?</a></li>\n<li><a href=\"#how-does-cdat-lite-track-changes-to-cdat\" id=\"id14\" rel=\"nofollow\">4.4\u00a0\u00a0\u00a0How does cdat-lite track changes to CDAT?</a></li>\n<li><a href=\"#how-can-i-use-cmor2-with-cdat-lite\" id=\"id15\" rel=\"nofollow\">4.5\u00a0\u00a0\u00a0How can I use CMOR2 with cdat-lite?</a></li>\n<li><a href=\"#how-can-i-use-opendap-with-cdat-lite\" id=\"id16\" rel=\"nofollow\">4.6\u00a0\u00a0\u00a0How can I use OPeNDAP with cdat-lite?</a></li>\n<li><a href=\"#how-do-i-install-cdat-lite-as-an-unprivileged-user\" id=\"id17\" rel=\"nofollow\">4.7\u00a0\u00a0\u00a0How do I install cdat-lite as an unprivileged user?</a></li>\n<li><a href=\"#which-versions-of-netcdf-does-cdat-lite-support\" id=\"id18\" rel=\"nofollow\">4.8\u00a0\u00a0\u00a0Which versions of NetCDF does cdat-lite support?</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p>Cdat-lite is a Python package for managing and analysing climate\nscience data.  It is a subset of the Climate Data Analysis Tools\n(<a href=\"http://www2-pcmdi.llnl.gov/cdat\" rel=\"nofollow\">CDAT</a>) developed by <a href=\"http://www2-pcmdi.llnl.gov/\" rel=\"nofollow\">PCMDI</a> at Lawrence Livermore National Laboratory.</p>\n<p>Cdat-lite aims to complement CDAT by focusing on its core data\nmanagement and analysis components and by offering a radically\ndifferent installation system to CDAT.  As a result it is much more\nlightweight (hence the name): CDAT\u2019s source distribution is the order\nof 1Gb whereas cdat-lite is under 5Mb.</p>\n<p>Cdat-lite is designed to work with the <a href=\"http://pypi.python.org/pypi/cfchecker\" rel=\"nofollow\">CF checker</a> package.</p>\n<div id=\"cdat-lite-versioning\">\n<h2><a href=\"#id2\" rel=\"nofollow\">1\u00a0\u00a0\u00a0cdat-lite versioning</a></h2>\n<p>Cdat-lite is a project that tracks versions of 2 other projects (CDAT\nand cdunifpp).  From version 6.0rc1 the cdat-lite version will not be\nbased directly on the CDAT version.  This is because CDAT updates its\nversion very seldom and stays as an \u201calpha\u201d distribution for long\nperiods when the parts included in cdat-lite are generally stable.</p>\n<p>Full details of which versions of CDAT and cdunifpp a cdat-lite\ndistribution includes is available in the setup.py file and the\nPKG_INFO metadata.</p>\n</div>\n<div id=\"installing-cdat-lite\">\n<h2><a href=\"#id3\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Installing cdat-lite</a></h2>\n<p>cdat-lite is distributed as a tarball available from the <a href=\"http://proj.badc.rl.ac.uk/ndg/wiki/CdatLite\" rel=\"nofollow\">cdat-lite\nhomepage</a> on the <cite>NERC Data Grid wiki</cite> .  It is also installable\nusing the <tt>easy_install</tt> tool.  If you are familiar with\n<tt>easy_install</tt> try this super-quick installation recipe:</p>\n<pre>$ export NETCDF_HOME=/usr/local/netcdf\n# Required if using a NetCDF4 compiled with HDF5\n$ export HDF5_HOME=/usr/local/hdf5\n$ easy_install cdat_lite\n</pre>\n<div id=\"dependencies\">\n<h3><a href=\"#id4\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0Dependencies</a></h3>\n<p>To install cdat-lite you will need:</p>\n<blockquote>\n<p>1. <a href=\"http://www.python.org/download/releases/2.5.4\" rel=\"nofollow\">Python 2.5.x</a>.  cdat-lite has not been tested on 2.6 but may\nwork (feedback would be gratefully received).  It is unlikely to work on 3.0.</p>\n<p>2. <a href=\"http://pypi.python/org/setuptools\" rel=\"nofollow\">setuptools</a>.  cdat-lite will attempt to download and install\nsetuptools if it is missing but it is safer to install it first.</p>\n<p>3. <a href=\"http://www.unidata.ucar.edu/software/netcdf/\" rel=\"nofollow\">NetCDF-3.x</a> or greater.  cdat-lite should work with any\nrelatively modern NetCDF3 installation on your system provided it is\ncompiled as a shared library.  It will also work with NetCDF4\nconfigured in various different ways, including embedded OPeNDAP\nmode.</p>\n<ol>\n<li>If you want to run the short test suite you will need <a href=\"http://somethingaboutorange.com/mrl/projects/nose/\" rel=\"nofollow\">nose</a></li>\n</ol>\n</blockquote>\n</div>\n<div id=\"selecting-your-netcdf-installation\">\n<h3><a href=\"#id5\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0Selecting your NetCDF installation</a></h3>\n<p>cdat-lite will work with NetCDF3 or NetCDF4 but because it is\nreferenced by shared libraries (the python C extension modules) it\nmust be compiled as position independent code.  If you have a NetCDF4\ninstallation you almost certainly are using shared libraries and even\nif you wish to use NetCDF3 it is probably easiest to install NetCDF as\na shared library (use <tt><span class=\"pre\">--enable-shared</span></tt> in the NetCDF <tt>configure</tt>\nscript).  Alternatively, you can configure NetCDF with:</p>\n<pre>$ ./configure --with-pic ...\n</pre>\n<p>If you are using NetCDF4 you will also need to configure HDF5 with <tt><span class=\"pre\">--enable-shared</span></tt> or <tt><span class=\"pre\">--with-pic</span></tt>.</p>\n<p>If you have the command <tt><span class=\"pre\">nc-config</span></tt> in your path cdat-lite will\ndetect all library and include dependencies.  Otherwise cdat-lite will\nlook for a NetCDF installation in several places.</p>\n<p>If your NetCDF is installed somewhere unusual, or if you want to\nselect a specific installation, set the NETCDF_HOME variable.  E.g.:</p>\n<pre># sh users\n$ export NETCDF_HOME=/usr/local/netcdf\n# csh users\n$ setenv NETCDF_HOME /usr/local/netcdf\n</pre>\n<p>If you are using NetCDF4 cdat-lite will also look for your HDF5\ninstallation which you can configure in a similar way:</p>\n<pre># sh users\n$ export HDF5_HOME=/usr/local/hdf5\n# csh users\n$ setenv HDF5_HOME /usr/local/hdf5\n</pre>\n<p>For compatibility with the <tt><span class=\"pre\">netcdf4-python</span></tt> package cdat-lite also accepts <tt>NETCDF4_DIR</tt> AND <tt>HDF5_DIR</tt> as synonims for these environment variables.</p>\n<p>Note, you don\u2019t need these environment variables set to run cdat_lite,\nalthough the libraries must be findable by your system\u2019s dynamic\nlinker.  This can be configured by setting <tt>LD_LIBRARY_PATH</tt> or using <tt>ldconfig</tt>.</p>\n</div>\n<div id=\"running-the-installer\">\n<h3><a href=\"#id6\" rel=\"nofollow\">2.3\u00a0\u00a0\u00a0Running the installer</a></h3>\n<p>If you have all the dependencies in place you can try using\n<tt>easy_install</tt> to automatically download and install cdat_lite.  Make sure you have access to the internet, with the appropriate HTTP proxy settings, and do:</p>\n<pre>$ easy_install cdat-lite\n</pre>\n<p>Alternatively you might want to see what you are installing :-).  In\nthis case either download the <a href=\"http://proj.badc.rl.ac.uk/ndg/wiki/CdatLite\" rel=\"nofollow\">tarball</a> or use <tt>easy_install</tt> to do it for you:</p>\n<pre>$ easy_install -eb . cdat-lite\n# The cdat-lite tarball will be downloaded unpacked into you current directory\n</pre>\n<p>Now from the distribution directory run the build and install steps separately:</p>\n<pre>$ python setup.py bdist_egg\n$ easy_install dist/cdat-lite*.egg\n</pre>\n</div>\n<div id=\"installing-as-an-unprivileged-user\">\n<span id=\"installing-locally\"></span><h3><a href=\"#id7\" rel=\"nofollow\">2.4\u00a0\u00a0\u00a0Installing as an unprivileged user</a></h3>\n<p>If you don\u2019t have write access to your python distribution you can use\nthe tool <a href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\">virtualenv</a> to create a local python environment with\nits own <tt>easy_install</tt> executable which you can then use to install\ncdat-lite.  In combination with <tt>NETCDF_HOME</tt>, <tt>HDF5_HOME</tt> and\n<tt>LD_LIBRARY_PATH</tt> it should be possible to install all dependencies\nof cdat-lite locally.  See the <a href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\">virtualenv</a> for details on\ninstallation or try this recipe after downloading the virtualenv:</p>\n<pre># From virtualenv distribution directory\n$ ./virtualenv.py &lt;virtualenv-path&gt;\n$ cd &lt;virtualenv-path&gt;\n$ source bin/activate\n(venv)$ easy_install cdat-lite\n</pre>\n</div>\n<div id=\"platform-specific-installation-notes\">\n<h3><a href=\"#id8\" rel=\"nofollow\">2.5\u00a0\u00a0\u00a0Platform-specific installation notes</a></h3>\n<h3 id=\"os-x\"><span class=\"section-subtitle\">OS X</span></h3>\n<p>Christopher Lee contributed the following experiences installing on OS X 10.6.7.</p>\n<p>My particular Macbook has an Intel CPU, and the default on the Mac is\nto compile for the architecture x86_64. In order to override this\n(because python is 32 bit, and the netcdf libraries I use are also 32\nbit) I needed to pass in \u201c-arch i386\u201d to the compiler. I also needed\nthe little endian flag \u2018-DBYTESWAP\u2019 when compiling the netcdf\ninterface (inside libcdms). The -DBYTESWAP flag should be included by\nthe libcdms configure script, where there is a section for \u2018darwin\u2019\n(OS X), but it\u2019s currently configured without BYTESWAP (line\n6182). The problem here is that OS X used to run on PowerPC CPUs,\nwhich don\u2019t need the BYTESWAP flag. I\u2019m not sure if this is your\nconfigure script or if it\u2019s from the cdat package.</p>\n<p>I included the -arch i386 and -DBYTESWAP in the setup.py in the\nlibcdms section, and the setup works fine.</p>\n<p>After running python setup.py build ; python setup.py install ; I\nstill get an error when importing cdms2. This problem is caused by the\nway that libcdms is linked to the netcdf libraries. The \u2018normal\u2019 Mac\nmethod is to link with absolute paths, but libcdms is linked with\nrelative paths (the libraries are references with @rpath). The result\nis that LD_LIBRARY_PATH environment variable is often empty. I\u2019m not\nsure how to fix this in the \u2018Mac\u2019 way with absolute paths, but I added\nmy $NETCDF_HOME/lib directory to the variable and cdms2 now imports\nwithout error.</p>\n</div>\n</div>\n<div id=\"testing-the-installation\">\n<h2><a href=\"#id9\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Testing the installation</a></h2>\n<p>cdat-lite ships with a small set of tests designed to verify that it\nhas been built successfuly.  These tests require the testing framework\n<a href=\"http://somethingaboutorange.com/mrl/projects/nose/\" rel=\"nofollow\">nose</a>.  Once cdat-lite is installed just run:</p>\n<pre>$ nosetests cdat_lite\n</pre>\n<p>When run from cdat-lite\u2019s distribution directory nosetests will run\nslightly differently, running some tests that are known to fail at the\nmoment.  To disable this behaviour do:</p>\n<blockquote>\n$ nosetests \u2013config=\u2019\u2019</blockquote>\n</div>\n<div id=\"faq\">\n<h2><a href=\"#id10\" rel=\"nofollow\">4\u00a0\u00a0\u00a0FAQ</a></h2>\n<div id=\"what-is-cdat\">\n<h3><a href=\"#id11\" rel=\"nofollow\">4.1\u00a0\u00a0\u00a0What is CDAT?</a></h3>\n<p><a href=\"http://www2-pcmdi.llnl.gov/cdat\" rel=\"nofollow\">CDAT</a> is a large suite of open source tools distributed by <a href=\"http://www2-pcmdi.llnl.gov/\" rel=\"nofollow\">PCMDI</a> for\nthe management and analysis of climate data.  It includes several\nvisualisation components and the graphical user interface VCDAT.</p>\n</div>\n<div id=\"what-is-the-difference-between-cdat-and-cdat-lite\">\n<h3><a href=\"#id12\" rel=\"nofollow\">4.2\u00a0\u00a0\u00a0What is the difference between CDAT and cdat-lite?</a></h3>\n<p>Differences between CDAT and cdat-lite can be classified as\ndifferences in scope, i.e. which packages are included, and installation system.</p>\n<p>cdat-lite contains the \u2018cdms2\u2019 package and a few related\npackages.  It does not include the \u2018vcs\u2019 visualisation package or the\nVCDAT graphical user interface.  As of v5.1.1-0.3pre3 the included\npackages are:</p>\n<blockquote>\n<ul>\n<li>cdms2</li>\n<li>cdtime</li>\n<li>cdutil</li>\n<li>genutil</li>\n<li>ncml</li>\n<li>Properties</li>\n<li>regrid2</li>\n<li>unidataa</li>\n<li>xmgrace</li>\n</ul>\n</blockquote>\n<p>CDAT bundles virtually all dependencies together in its source\ndistribution \u2013 even Python itself.  This has its advantages as it\nsimplifies satisfying dependencies and avoids version conflicts\nbetween dependencies.  However, if you want to integrate CDAT\u2019s data\nmanagement components into your existing Python architecture CDAT can\nbe overkill.</p>\n</div>\n<div id=\"what-has-changed-between-cdat-lite-4-x-and-cdat-lite-5-x\">\n<h3><a href=\"#id13\" rel=\"nofollow\">4.3\u00a0\u00a0\u00a0What has changed between cdat-lite-4.x and cdat-lite-5.x?</a></h3>\n<p>If you are a cdat-lite-4 user (or a CDAT 4 user) you have a big\nmigration job on your hands.  CDAT-4 uses the <tt>Numeric</tt> package for\narrays which has been out of date and unmaintained for a long time\nnow.  It is known to have problems on 64bit architectures.</p>\n</div>\n<div id=\"how-does-cdat-lite-track-changes-to-cdat\">\n<h3><a href=\"#id14\" rel=\"nofollow\">4.4\u00a0\u00a0\u00a0How does cdat-lite track changes to CDAT?</a></h3>\n<p>cdat-lite tries to release major new versions shortly after new\nversions of CDAT.  Sometimes CDAT-trunk contains important fixes that\nshould be applied so that the latest cdat_lite can run ahead of\nofficial CDAT releases (although sometimes CDAT recommends you build\nfrom trunk anyway).</p>\n<p>The one exception is the UK Met. Office PP file support which is\nusually updated in cdat_lite before CDAT.  In all cases the exact\nbuild versions of CDAT and cdunifpp will be stated in the\ndistribution\u2019s <tt>setup.py</tt> file.</p>\n</div>\n<div id=\"how-can-i-use-cmor2-with-cdat-lite\">\n<h3><a href=\"#id15\" rel=\"nofollow\">4.5\u00a0\u00a0\u00a0How can I use CMOR2 with cdat-lite?</a></h3>\n<p>We are interested to hear any with experience of using CMOR2 with\ncdat-lite but it should be as simple as downloading the distribution\nand installing it in parallel with:</p>\n<pre># From the CMOR install directory\n$ python setup.py install\n</pre>\n</div>\n<div id=\"how-can-i-use-opendap-with-cdat-lite\">\n<h3><a href=\"#id16\" rel=\"nofollow\">4.6\u00a0\u00a0\u00a0How can I use OPeNDAP with cdat-lite?</a></h3>\n<p>OPeNDAP support is an experimental feature of cdat-lite at the moment.\nUnlike CDAT you don\u2019t select OPeNDAP explicitly during installation\nbut cdat-lite will inherit any OPeNDAP support embedded into the\nNetCDF4 library.  Recent beta releases of NetCDF4 provides a switch to\ntransparently use OPeNDAP.</p>\n</div>\n<div id=\"how-do-i-install-cdat-lite-as-an-unprivileged-user\">\n<h3><a href=\"#id17\" rel=\"nofollow\">4.7\u00a0\u00a0\u00a0How do I install cdat-lite as an unprivileged user?</a></h3>\n<p>See <a href=\"#installing-locally\" rel=\"nofollow\">installing locally</a></p>\n</div>\n<div id=\"which-versions-of-netcdf-does-cdat-lite-support\">\n<h3><a href=\"#id18\" rel=\"nofollow\">4.8\u00a0\u00a0\u00a0Which versions of NetCDF does cdat-lite support?</a></h3>\n<p>TODO</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1865852, "releases": {"4.1.2-0.2.1": [], "5.2": [], "5.2rc1": [{"comment_text": "", "digests": {"md5": "068853f87e0fd5d0a84dfbe30a6676e8", "sha256": "a8e95b68320033e9260f0a251772149ed306ea58557fca2e8b54b6dfdf852c15"}, "downloads": -1, "filename": "cdat_lite-5.2rc1.tar.gz", "has_sig": false, "md5_digest": "068853f87e0fd5d0a84dfbe30a6676e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3474765, "upload_time": "2009-09-15T17:22:32", "upload_time_iso_8601": "2009-09-15T17:22:32.513129Z", "url": "https://files.pythonhosted.org/packages/05/92/7bf70573a4d43922089ff8f352eddb8903de1b7995b7a9ef15f2d513d5fa/cdat_lite-5.2rc1.tar.gz", "yanked": false}], "6.0.1": [{"comment_text": "", "digests": {"md5": "6d5a6e86f15ce15291d25feab8793248", "sha256": "092ae4ff1fb03dee00096e8dd595b769b422759ce972d96525950adf8e1c9374"}, "downloads": -1, "filename": "cdat-lite-6.0.1.tar.gz", "has_sig": false, "md5_digest": "6d5a6e86f15ce15291d25feab8793248", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4042646, "upload_time": "2015-12-16T22:43:59", "upload_time_iso_8601": "2015-12-16T22:43:59.182545Z", "url": "https://files.pythonhosted.org/packages/27/0f/793dc6c152b4281613417243728ff580c691b68d710544e06118f6eed4b5/cdat-lite-6.0.1.tar.gz", "yanked": false}], "6.0.alpha-3": [], "6.0.alpha-4": [], "6.0rc1": [], "6.0rc2": [], "6.0rc3": [{"comment_text": "", "digests": {"md5": "e90bce0a6180c44a2a2008dfd0b9e683", "sha256": "df3fe842711389ea62c327772fbd951a860e2b91db93a9da29b0700104d718e9"}, "downloads": -1, "filename": "cdat-lite-6.0rc3.tar.gz", "has_sig": false, "md5_digest": "e90bce0a6180c44a2a2008dfd0b9e683", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4042762, "upload_time": "2015-12-16T22:37:47", "upload_time_iso_8601": "2015-12-16T22:37:47.311673Z", "url": "https://files.pythonhosted.org/packages/1f/08/5ce5263037587e656eb723f5a9766ff943170bdc0038711a9f91ebd66f09/cdat-lite-6.0rc3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d5a6e86f15ce15291d25feab8793248", "sha256": "092ae4ff1fb03dee00096e8dd595b769b422759ce972d96525950adf8e1c9374"}, "downloads": -1, "filename": "cdat-lite-6.0.1.tar.gz", "has_sig": false, "md5_digest": "6d5a6e86f15ce15291d25feab8793248", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4042646, "upload_time": "2015-12-16T22:43:59", "upload_time_iso_8601": "2015-12-16T22:43:59.182545Z", "url": "https://files.pythonhosted.org/packages/27/0f/793dc6c152b4281613417243728ff580c691b68d710544e06118f6eed4b5/cdat-lite-6.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:58 2020"}