{"info": {"author": "Opal Symes", "author_email": "python@opal.codes", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# A Python port of GitHub's [Octicons](https://octicons.github.com/) for [Django](https://www.djangoproject.com/).\n\nOcticons version: [v9.1.0](https://github.com/primer/octicons/releases/tag/v9.1.0)\n\nInstall this package from [PyPI](https://pypi.org/project/octicons/) using `pip` or your favorite Python package manager:\n\n```\n$ pip install octicons\n```\n\n## API\n\nThis package comes with the Octicons `data.json` built-in but you are not limited to using it.\n\n### `octicons.store.default_store`\n\nThis is an `OcticonsStore` instance that loads the built-in data set. Use this unless you *really* need to use another.\n\n### `octicons.octicons.OcticonStore`\n\nThis object handles creating and aliasing individual `Octicons`. You won't need to create an instance of this unless you have a special use-case, or are loading your own `data.json` file. \n\n- `OcticonStore.from_file(file=None)`(classmethod) -- Create an `OcticonsStore` instance by loading the given file(or the built-in file in `file` is not given). \n- `OcticonStore(data_dict, *, Octicon=Octicon)` -- Create an `OcticonsStore` instance using the `data_dict` given. Here you can also override the `Octicons` class used to create each icon instance. \n\n- `store.get_icon(name)`, `store[name]` -- Get the octicon with the name or alias of `name`. Returns an `Octicons` instance.\n- `store.get_as_html(name, **opts)` -- A convenience method which gets the icon's instance; then calls `as_html` on that instance; passing any keyword arguments through to that call.\n\n### `octicons.octicons.Octicon`\n\nThis is an instance of a single icon. Instances are built as part of the `__init__` method of `OcticonsStore`.\n\n- `Octicons(data)` -- Create an icon instance using the information contained in the `data` dictionary.\n\n- `icon.width`, `icon.height` -- The floating-point width and height the output SVG should be.\n- `icon.path` -- A string representing the SVG path that creates the icon.\n- `icon.name` -- Used to construct the correct `class` when generating the HTML.\n- `icon.keywords` -- A list of the supported icon aliases.\n- `icon.size_ratio` -- The ratio(`width/height`) between the width and the height of the icon. This is used when only one of `width` or `height` are specified to `as_html`.\n\n- `icon.as_html(**opts)` -- Build HTML from the icon's information and the given options:\n  - `width`/`height` -- If none are given; then use the icons width/height. If one is given; use it to calculate the missing dimension such that it maintains the aspect ratio. If both are given then use those values exactly.\n  - `class`, `classes` -- Either a string or an iterable of strings to *append* to the default classes(`octicons` and `octicons-{self.name}`)\n  - `aria_label` -- Makes the icon visible to screen-readers and changes the icon's role to `img`.\n  - All other arguments will have `_`s replaced with `-` and added to the `<svg>` tag\n\nExamples(paths snipped for brevity):\n```\n>>> from octicons.store import default_store\n>>> default_store.get_as_html('like', id=\"my-like-button\")\n'<svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-thumbsup\" aria-hidden=\"true\" id=\"my-like-button\"><path ...snip.../></svg>'\n>>> default_store.get_as_html('like', classes=\"special\", width=200)\n'<svg version=\"1.1\" width=\"200\" height=\"200.0\" viewBox=\"0 0 16 16\" class=\"octicon octicon-thumbsup special\" aria-hidden=\"true\"><path ...snip.../></svg>'\n>>> default_store.get_as_html('like', width=20, height=400, aria_label=\"Tall like button\")\n'<svg version=\"1.1\" width=\"20\" height=\"400\" viewBox=\"0 0 16 16\" class=\"octicon octicon-thumbsup\" aria-label=\"Tall like button\" role=\"img\"><path ...snip.../></svg>'\n```\n\n## Django API\n\nTo use, add `'octicons'` to your `INSTALLED_APPS` list; then in your templates:\n\n```\n{% load octicons %}\n\n{% octicon 'check' %}\n<br />\n{% octicon 'like' width=100 color=\"blue\" class=\"facebook-like\" %}\n<br />\n{% octicon 'gift' height=\"10\" aria_label='This is a gift for you <3' %}\n```\n\nThis is exactly equivalent to importing the `default_store` and calling `get_as_html`. Check that method's documentation for information on how it handles arguments.\n\n## Overriding the default `data.json` file\n\nThere may be circumstances where the built-in data file is not what you're after. In that case you can use `OpticonStore.from_file` to load another `data.json` file. To get the `data.json` file for a specific version of Octicons you can copy it from the `build/data.json` of the [`octicons` npm package](https://www.npmjs.com/package/octicons). Have a look at the `update_data_json.sh` file for how to do that.\n\n## Extending\n\nObviously the name and the naming scheme implies tight integration with Octicons; however this is not necessarily the case. All that is needed is a JSON file with a dictionary of icons, for example:\n\n```\n{\n  \"plus\": {\n    \"name\": \"plus\",\n    \"keywords\": [\"add\", \"new\", \"more\"],\n    \"width\":12,\n    \"height\":16,\n    \"path\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M12 9H7v5H5V9H0V7h5V2h2v5h5v2z\\\"/>\"\n  },\n  ...\n}\n```\n\n## Versioning\n\nThis project follows Semantic versioning, ish. Due to the need to track 2 separate versions, the API and the Octicons themselves, versioning will be as follows: `MAJOR.OCTICONS_MINOR.OCTICONS_PATCH.PATCH`\n\nBreaking changes such as changing either the Django or Python API will increment the `MAJOR` version. As will upgrading Octicons to a new major version(e.g. Octicons 9.x.x). The `MINOR.PATCH` will use the Octicons minor and patch as that is the most useful information. The final field will be added when bug-fixes or patches are made that don't change the Octicons version.\n\nIf you have a better solution feel free to open an issue/PR. Chances are it'll be better than this franken-versioning scheme I came up with.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/leesdolphin/octicons", "keywords": "", "license": "LGPLv3+", "maintainer": "", "maintainer_email": "", "name": "octicons", "package_url": "https://pypi.org/project/octicons/", "platform": "", "project_url": "https://pypi.org/project/octicons/", "project_urls": {"Homepage": "https://github.com/leesdolphin/octicons"}, "release_url": "https://pypi.org/project/octicons/2.1.0/", "requires_dist": null, "requires_python": ">=3.4", "summary": "A Python port of GitHub's Octicons, with Django support", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>A Python port of GitHub's <a href=\"https://octicons.github.com/\" rel=\"nofollow\">Octicons</a> for <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a>.</h1>\n<p>Octicons version: <a href=\"https://github.com/primer/octicons/releases/tag/v9.1.0\" rel=\"nofollow\">v9.1.0</a></p>\n<p>Install this package from <a href=\"https://pypi.org/project/octicons/\" rel=\"nofollow\">PyPI</a> using <code>pip</code> or your favorite Python package manager:</p>\n<pre><code>$ pip install octicons\n</code></pre>\n<h2>API</h2>\n<p>This package comes with the Octicons <code>data.json</code> built-in but you are not limited to using it.</p>\n<h3><code>octicons.store.default_store</code></h3>\n<p>This is an <code>OcticonsStore</code> instance that loads the built-in data set. Use this unless you <em>really</em> need to use another.</p>\n<h3><code>octicons.octicons.OcticonStore</code></h3>\n<p>This object handles creating and aliasing individual <code>Octicons</code>. You won't need to create an instance of this unless you have a special use-case, or are loading your own <code>data.json</code> file.</p>\n<ul>\n<li>\n<p><code>OcticonStore.from_file(file=None)</code>(classmethod) -- Create an <code>OcticonsStore</code> instance by loading the given file(or the built-in file in <code>file</code> is not given).</p>\n</li>\n<li>\n<p><code>OcticonStore(data_dict, *, Octicon=Octicon)</code> -- Create an <code>OcticonsStore</code> instance using the <code>data_dict</code> given. Here you can also override the <code>Octicons</code> class used to create each icon instance.</p>\n</li>\n<li>\n<p><code>store.get_icon(name)</code>, <code>store[name]</code> -- Get the octicon with the name or alias of <code>name</code>. Returns an <code>Octicons</code> instance.</p>\n</li>\n<li>\n<p><code>store.get_as_html(name, **opts)</code> -- A convenience method which gets the icon's instance; then calls <code>as_html</code> on that instance; passing any keyword arguments through to that call.</p>\n</li>\n</ul>\n<h3><code>octicons.octicons.Octicon</code></h3>\n<p>This is an instance of a single icon. Instances are built as part of the <code>__init__</code> method of <code>OcticonsStore</code>.</p>\n<ul>\n<li>\n<p><code>Octicons(data)</code> -- Create an icon instance using the information contained in the <code>data</code> dictionary.</p>\n</li>\n<li>\n<p><code>icon.width</code>, <code>icon.height</code> -- The floating-point width and height the output SVG should be.</p>\n</li>\n<li>\n<p><code>icon.path</code> -- A string representing the SVG path that creates the icon.</p>\n</li>\n<li>\n<p><code>icon.name</code> -- Used to construct the correct <code>class</code> when generating the HTML.</p>\n</li>\n<li>\n<p><code>icon.keywords</code> -- A list of the supported icon aliases.</p>\n</li>\n<li>\n<p><code>icon.size_ratio</code> -- The ratio(<code>width/height</code>) between the width and the height of the icon. This is used when only one of <code>width</code> or <code>height</code> are specified to <code>as_html</code>.</p>\n</li>\n<li>\n<p><code>icon.as_html(**opts)</code> -- Build HTML from the icon's information and the given options:</p>\n<ul>\n<li><code>width</code>/<code>height</code> -- If none are given; then use the icons width/height. If one is given; use it to calculate the missing dimension such that it maintains the aspect ratio. If both are given then use those values exactly.</li>\n<li><code>class</code>, <code>classes</code> -- Either a string or an iterable of strings to <em>append</em> to the default classes(<code>octicons</code> and <code>octicons-{self.name}</code>)</li>\n<li><code>aria_label</code> -- Makes the icon visible to screen-readers and changes the icon's role to <code>img</code>.</li>\n<li>All other arguments will have <code>_</code>s replaced with <code>-</code> and added to the <code>&lt;svg&gt;</code> tag</li>\n</ul>\n</li>\n</ul>\n<p>Examples(paths snipped for brevity):</p>\n<pre><code>&gt;&gt;&gt; from octicons.store import default_store\n&gt;&gt;&gt; default_store.get_as_html('like', id=\"my-like-button\")\n'&lt;svg version=\"1.1\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"octicon octicon-thumbsup\" aria-hidden=\"true\" id=\"my-like-button\"&gt;&lt;path ...snip.../&gt;&lt;/svg&gt;'\n&gt;&gt;&gt; default_store.get_as_html('like', classes=\"special\", width=200)\n'&lt;svg version=\"1.1\" width=\"200\" height=\"200.0\" viewBox=\"0 0 16 16\" class=\"octicon octicon-thumbsup special\" aria-hidden=\"true\"&gt;&lt;path ...snip.../&gt;&lt;/svg&gt;'\n&gt;&gt;&gt; default_store.get_as_html('like', width=20, height=400, aria_label=\"Tall like button\")\n'&lt;svg version=\"1.1\" width=\"20\" height=\"400\" viewBox=\"0 0 16 16\" class=\"octicon octicon-thumbsup\" aria-label=\"Tall like button\" role=\"img\"&gt;&lt;path ...snip.../&gt;&lt;/svg&gt;'\n</code></pre>\n<h2>Django API</h2>\n<p>To use, add <code>'octicons'</code> to your <code>INSTALLED_APPS</code> list; then in your templates:</p>\n<pre><code>{% load octicons %}\n\n{% octicon 'check' %}\n&lt;br /&gt;\n{% octicon 'like' width=100 color=\"blue\" class=\"facebook-like\" %}\n&lt;br /&gt;\n{% octicon 'gift' height=\"10\" aria_label='This is a gift for you &lt;3' %}\n</code></pre>\n<p>This is exactly equivalent to importing the <code>default_store</code> and calling <code>get_as_html</code>. Check that method's documentation for information on how it handles arguments.</p>\n<h2>Overriding the default <code>data.json</code> file</h2>\n<p>There may be circumstances where the built-in data file is not what you're after. In that case you can use <code>OpticonStore.from_file</code> to load another <code>data.json</code> file. To get the <code>data.json</code> file for a specific version of Octicons you can copy it from the <code>build/data.json</code> of the <a href=\"https://www.npmjs.com/package/octicons\" rel=\"nofollow\"><code>octicons</code> npm package</a>. Have a look at the <code>update_data_json.sh</code> file for how to do that.</p>\n<h2>Extending</h2>\n<p>Obviously the name and the naming scheme implies tight integration with Octicons; however this is not necessarily the case. All that is needed is a JSON file with a dictionary of icons, for example:</p>\n<pre><code>{\n  \"plus\": {\n    \"name\": \"plus\",\n    \"keywords\": [\"add\", \"new\", \"more\"],\n    \"width\":12,\n    \"height\":16,\n    \"path\":\"&lt;path fill-rule=\\\"evenodd\\\" d=\\\"M12 9H7v5H5V9H0V7h5V2h2v5h5v2z\\\"/&gt;\"\n  },\n  ...\n}\n</code></pre>\n<h2>Versioning</h2>\n<p>This project follows Semantic versioning, ish. Due to the need to track 2 separate versions, the API and the Octicons themselves, versioning will be as follows: <code>MAJOR.OCTICONS_MINOR.OCTICONS_PATCH.PATCH</code></p>\n<p>Breaking changes such as changing either the Django or Python API will increment the <code>MAJOR</code> version. As will upgrading Octicons to a new major version(e.g. Octicons 9.x.x). The <code>MINOR.PATCH</code> will use the Octicons minor and patch as that is the most useful information. The final field will be added when bug-fixes or patches are made that don't change the Octicons version.</p>\n<p>If you have a better solution feel free to open an issue/PR. Chances are it'll be better than this franken-versioning scheme I came up with.</p>\n\n          </div>"}, "last_serial": 5422774, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b628f6dc5d68c58a1e696088fed9f2c7", "sha256": "9a5be41ef2ab69e7a944a93c7d1760258d5023f5e0fed16ea3845d557132be4e"}, "downloads": -1, "filename": "octicons-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b628f6dc5d68c58a1e696088fed9f2c7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 29924, "upload_time": "2018-08-28T06:55:46", "upload_time_iso_8601": "2018-08-28T06:55:46.561335Z", "url": "https://files.pythonhosted.org/packages/4f/3a/82fc0d7b93d0576f2a7810cac9bf45eb3dd8a9a8c7c0bd7e2df8b4d54a43/octicons-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ea0fd03fe67df36dc5e7042e54f6b63", "sha256": "19f5d6367921627eb8ac706a6f2296fc26ff49e23fd5dc21cb9fc0e3d48484f9"}, "downloads": -1, "filename": "octicons-0.1.tar.gz", "has_sig": false, "md5_digest": "4ea0fd03fe67df36dc5e7042e54f6b63", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 29625, "upload_time": "2018-08-28T06:55:48", "upload_time_iso_8601": "2018-08-28T06:55:48.290438Z", "url": "https://files.pythonhosted.org/packages/25/c9/53f3dcec106d89490b3776b63c302dde8ae312b2755423c930f693015afd/octicons-0.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "844d195cade877bb128d4f72faaf7395", "sha256": "a3396dbc8676e312fa3853baea7ffaac811f7865c19dedd4c9738cc1f9b5db5b"}, "downloads": -1, "filename": "octicons-1.4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "844d195cade877bb128d4f72faaf7395", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 32537, "upload_time": "2019-02-21T06:47:42", "upload_time_iso_8601": "2019-02-21T06:47:42.318935Z", "url": "https://files.pythonhosted.org/packages/26/17/430a40d313eca07628a24e65b03bf8898ff4f5c6435db8b96b7e9fc09aa1/octicons-1.4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a908443766bfe2aee533819c0a52b657", "sha256": "2a1a3041c9a3e450123940d25486e66f1e1f3d1de0b439c64709d3c8b2e4849a"}, "downloads": -1, "filename": "octicons-1.4.2.tar.gz", "has_sig": false, "md5_digest": "a908443766bfe2aee533819c0a52b657", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 34917, "upload_time": "2019-02-21T06:47:44", "upload_time_iso_8601": "2019-02-21T06:47:44.177402Z", "url": "https://files.pythonhosted.org/packages/01/f1/6dfcc5a9ffd53494dd719542a0288647bcdfdcc5c3ddf5f806ec246d5141/octicons-1.4.2.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "fc3333717913eb389ad486fcd10f66b0", "sha256": "f9b79045431bf99ada579b1778ec1588f2a6e8baa5ad6a4d3ae0c55c2e5cd00d"}, "downloads": -1, "filename": "octicons-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fc3333717913eb389ad486fcd10f66b0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 33404, "upload_time": "2019-06-19T21:31:27", "upload_time_iso_8601": "2019-06-19T21:31:27.291039Z", "url": "https://files.pythonhosted.org/packages/a9/d2/1ec3250adee5c554ba44cd752319a56812a9684ed5c770df096f8f25c5bc/octicons-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8d165555bbfc7ea99ad3e74c9005e9f", "sha256": "0ecb592a60c78e40d21d81d66966088e8f308e53cc018c6d66bd208932418c35"}, "downloads": -1, "filename": "octicons-2.1.0.tar.gz", "has_sig": false, "md5_digest": "f8d165555bbfc7ea99ad3e74c9005e9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 35622, "upload_time": "2019-06-19T21:31:29", "upload_time_iso_8601": "2019-06-19T21:31:29.347298Z", "url": "https://files.pythonhosted.org/packages/6e/11/0d80044db76476431e38a0d1c0f95dd165321c8094eb32a11217be7ff6ae/octicons-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fc3333717913eb389ad486fcd10f66b0", "sha256": "f9b79045431bf99ada579b1778ec1588f2a6e8baa5ad6a4d3ae0c55c2e5cd00d"}, "downloads": -1, "filename": "octicons-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fc3333717913eb389ad486fcd10f66b0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 33404, "upload_time": "2019-06-19T21:31:27", "upload_time_iso_8601": "2019-06-19T21:31:27.291039Z", "url": "https://files.pythonhosted.org/packages/a9/d2/1ec3250adee5c554ba44cd752319a56812a9684ed5c770df096f8f25c5bc/octicons-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8d165555bbfc7ea99ad3e74c9005e9f", "sha256": "0ecb592a60c78e40d21d81d66966088e8f308e53cc018c6d66bd208932418c35"}, "downloads": -1, "filename": "octicons-2.1.0.tar.gz", "has_sig": false, "md5_digest": "f8d165555bbfc7ea99ad3e74c9005e9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 35622, "upload_time": "2019-06-19T21:31:29", "upload_time_iso_8601": "2019-06-19T21:31:29.347298Z", "url": "https://files.pythonhosted.org/packages/6e/11/0d80044db76476431e38a0d1c0f95dd165321c8094eb32a11217be7ff6ae/octicons-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:36 2020"}