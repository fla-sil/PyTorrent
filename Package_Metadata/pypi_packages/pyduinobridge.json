{"info": {"author": "Daniel Saromo", "author_email": "danielsaromo@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PyDuino Bridge [![Build Status](https://travis-ci.com/DanielSaromo/PyDuinoBridge.svg?branch=master)](https://travis-ci.com/DanielSaromo/PyDuinoBridge) ![PyPI](https://img.shields.io/pypi/v/pyduinobridge)\nLibrary for bi-directional communication between Python and Arduino.\n\nConnect Python and Arduino as easily as sending a list of variables from one platform and receiving it on the other one. With PyDuino Bridge, you can bi-directionally send a string, a list of integers, and a list of floats. Thus, you can bring the Python computational power and flexibility to the real-world interfacing capability of Arduino.\n\nThe library is built on the [code](https://forum.arduino.cc/index.php?topic=566897.0) posted in the Arduino forum by Robin2, who gave me his permission to use it. The main objective of PyDuino Bridge is to allow a high-level and straightforward connection between Python and Arduino.\n\n## Instalation\n\nYou need to install `pyduinobridge` in both Arduino IDE and Python.\n\n### In Python:\nPyDuino Bridge is on the [Python Package Index](https://pypi.org/project/pyduinobridge/ \"PyDuinoBridge page on PyPI\").\nTo install the library, first install `pip` and then use the command `pip install pyduinobridge`.\n\nThe PyDuino Bridge library requires PySerial library. You can install it with the command `pip install pyserial`.\n\nThe library uses Python>=3.6 and has been tested on different platforms (Windows, Ubuntu, Raspberry Pi, and Jetson Nano).\n\nTo use the library in your Python code, use the command `from pyduinobridge import Bridge_py`.\n\n#### \\[Linux\\] Port opening error due to permission requirements:\n\nTo solve this error, follow [this tutorial](https://www.arduino.cc/en/guide/linux#toc6) from the Arduino official page. Remember that you can log out of your Linux session with the command `gnome-session-quit`.\n\nIf the problem persists, you may execute the command `sudo chmod 666 /dev/ttyACM0` (as suggested [here](https://stackoverflow.com/questions/27858041/oserror-errno-13-permission-denied-dev-ttyacm0-using-pyserial-from-pyth)). For the example command given, I assume that your Arduino board is connected to the port `ttyACM0`.\n\n### In Arduino:\n\nYou need to manually add the files `src/pyduino_bridge.h` and `src/pyduino_bridge.cpp` to your `.../Arduino/libraries/` folder.\n\nTo use the library in your Arduino code, add `#include <pyduino_bridge.h>` in the header.\n\n\n## Example of use\n\nOnce the libraries are installed, execute`python_example.py` on the Python device.\n\nAlso, upload `examples/arduino_example/arduino_example.ino` to your Arduino board. Connect the devices physically through their serial port. You can use a USB cable or maybe a serial Bluetooth module to achieve wireless connectivity. The example code has been tested on Arduino Nano and UNO boards with Python running on Windows, Ubuntu, Raspberry Pi, and Jetson Nano.\n\n## Configuration considerations\n\nBy default, the maximum number of characters allowed in the messages between Arduino and Python is 40. If you want to change this buffer size, you have to put the same value in both the Python (change the value `buffSize` when using the `begin` method) and the Arduino code (change the line `#define buffSize 40` in the `pyduino_bridge.h` and `pyduino_bridge.cpp`).\n\nAlso, verify that the same `numIntValues_FromPy` and `numFloatsValues_FromPy` values are configured in your Python code according to the Arduino library files (before uploading, change the lines `#define numIntValues_FromPy 1` and `#define numFloatValues_FromPy 1` in the `pyduino_bridge.h` and `pyduino_bridge.cpp` files). By default, PyDuino Bridge is configured to send and receive a list of one integer and a list of one float (besides the header and the time information).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DanielSaromo/PyDuinoBridge", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyduinobridge", "package_url": "https://pypi.org/project/pyduinobridge/", "platform": "", "project_url": "https://pypi.org/project/pyduinobridge/", "project_urls": {"Homepage": "https://github.com/DanielSaromo/PyDuinoBridge"}, "release_url": "https://pypi.org/project/pyduinobridge/1.0.6/", "requires_dist": null, "requires_python": ">=3", "summary": "A transparent library for communication between Python and Arduino", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyDuino Bridge <a href=\"https://travis-ci.com/DanielSaromo/PyDuinoBridge\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d89b902910abe98183a39cb2e0571e520047071/68747470733a2f2f7472617669732d63692e636f6d2f44616e69656c5361726f6d6f2f50794475696e6f4272696467652e7376673f6272616e63683d6d6173746572\"></a> <img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ce46da775c50061e7e5b034449c03d103f8fa12/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70796475696e6f627269646765\"></h1>\n<p>Library for bi-directional communication between Python and Arduino.</p>\n<p>Connect Python and Arduino as easily as sending a list of variables from one platform and receiving it on the other one. With PyDuino Bridge, you can bi-directionally send a string, a list of integers, and a list of floats. Thus, you can bring the Python computational power and flexibility to the real-world interfacing capability of Arduino.</p>\n<p>The library is built on the <a href=\"https://forum.arduino.cc/index.php?topic=566897.0\" rel=\"nofollow\">code</a> posted in the Arduino forum by Robin2, who gave me his permission to use it. The main objective of PyDuino Bridge is to allow a high-level and straightforward connection between Python and Arduino.</p>\n<h2>Instalation</h2>\n<p>You need to install <code>pyduinobridge</code> in both Arduino IDE and Python.</p>\n<h3>In Python:</h3>\n<p>PyDuino Bridge is on the <a href=\"https://pypi.org/project/pyduinobridge/\" rel=\"nofollow\" title=\"PyDuinoBridge page on PyPI\">Python Package Index</a>.\nTo install the library, first install <code>pip</code> and then use the command <code>pip install pyduinobridge</code>.</p>\n<p>The PyDuino Bridge library requires PySerial library. You can install it with the command <code>pip install pyserial</code>.</p>\n<p>The library uses Python&gt;=3.6 and has been tested on different platforms (Windows, Ubuntu, Raspberry Pi, and Jetson Nano).</p>\n<p>To use the library in your Python code, use the command <code>from pyduinobridge import Bridge_py</code>.</p>\n<h4>[Linux] Port opening error due to permission requirements:</h4>\n<p>To solve this error, follow <a href=\"https://www.arduino.cc/en/guide/linux#toc6\" rel=\"nofollow\">this tutorial</a> from the Arduino official page. Remember that you can log out of your Linux session with the command <code>gnome-session-quit</code>.</p>\n<p>If the problem persists, you may execute the command <code>sudo chmod 666 /dev/ttyACM0</code> (as suggested <a href=\"https://stackoverflow.com/questions/27858041/oserror-errno-13-permission-denied-dev-ttyacm0-using-pyserial-from-pyth\" rel=\"nofollow\">here</a>). For the example command given, I assume that your Arduino board is connected to the port <code>ttyACM0</code>.</p>\n<h3>In Arduino:</h3>\n<p>You need to manually add the files <code>src/pyduino_bridge.h</code> and <code>src/pyduino_bridge.cpp</code> to your <code>.../Arduino/libraries/</code> folder.</p>\n<p>To use the library in your Arduino code, add <code>#include &lt;pyduino_bridge.h&gt;</code> in the header.</p>\n<h2>Example of use</h2>\n<p>Once the libraries are installed, execute<code>python_example.py</code> on the Python device.</p>\n<p>Also, upload <code>examples/arduino_example/arduino_example.ino</code> to your Arduino board. Connect the devices physically through their serial port. You can use a USB cable or maybe a serial Bluetooth module to achieve wireless connectivity. The example code has been tested on Arduino Nano and UNO boards with Python running on Windows, Ubuntu, Raspberry Pi, and Jetson Nano.</p>\n<h2>Configuration considerations</h2>\n<p>By default, the maximum number of characters allowed in the messages between Arduino and Python is 40. If you want to change this buffer size, you have to put the same value in both the Python (change the value <code>buffSize</code> when using the <code>begin</code> method) and the Arduino code (change the line <code>#define buffSize 40</code> in the <code>pyduino_bridge.h</code> and <code>pyduino_bridge.cpp</code>).</p>\n<p>Also, verify that the same <code>numIntValues_FromPy</code> and <code>numFloatsValues_FromPy</code> values are configured in your Python code according to the Arduino library files (before uploading, change the lines <code>#define numIntValues_FromPy 1</code> and <code>#define numFloatValues_FromPy 1</code> in the <code>pyduino_bridge.h</code> and <code>pyduino_bridge.cpp</code> files). By default, PyDuino Bridge is configured to send and receive a list of one integer and a list of one float (besides the header and the time information).</p>\n\n          </div>"}, "last_serial": 7129838, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "c23e066527446f6c9d8a91cfc623fe46", "sha256": "5f6244482481f3c80cdc179c8056912335fc951ce1aab7da76077b96aab47f58"}, "downloads": -1, "filename": "pyduinobridge-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c23e066527446f6c9d8a91cfc623fe46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15557, "upload_time": "2020-04-25T01:13:37", "upload_time_iso_8601": "2020-04-25T01:13:37.014710Z", "url": "https://files.pythonhosted.org/packages/07/cd/735ec9fcf8586f082aa3d29138a259544b1516d3655044b15904c36ccaf2/pyduinobridge-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "037354df60cd0d132fd915a26fd68379", "sha256": "568ed5bbf590e26f9f20382372aad515b5b97645a8a636aff42e20c1432032da"}, "downloads": -1, "filename": "pyduinobridge-1.0.3.tar.gz", "has_sig": false, "md5_digest": "037354df60cd0d132fd915a26fd68379", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4231, "upload_time": "2020-04-25T01:13:37", "upload_time_iso_8601": "2020-04-25T01:13:37.865429Z", "url": "https://files.pythonhosted.org/packages/ec/bd/d2b2f2160224d04975d08581977f32066558ff576c5ac9e83cf4d2e71802/pyduinobridge-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "a383254f88a644f602e533501c1a883e", "sha256": "8856191f388aad5eebc12c74d2cf4c142830326711343357c343f9b0e413e01e"}, "downloads": -1, "filename": "pyduinobridge-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a383254f88a644f602e533501c1a883e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17396, "upload_time": "2020-04-25T22:40:40", "upload_time_iso_8601": "2020-04-25T22:40:40.244172Z", "url": "https://files.pythonhosted.org/packages/d3/c6/e78129f3343226ec238946e75b1f652fbf1b9b3e268cb781525945d6e405/pyduinobridge-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fe8d331b6657c9adecb832982fbda5a", "sha256": "8fc43fb351b204f26471010b9cc57b0e599050894b020aeb6752d06721a38649"}, "downloads": -1, "filename": "pyduinobridge-1.0.4.tar.gz", "has_sig": false, "md5_digest": "7fe8d331b6657c9adecb832982fbda5a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5883, "upload_time": "2020-04-25T22:40:41", "upload_time_iso_8601": "2020-04-25T22:40:41.366380Z", "url": "https://files.pythonhosted.org/packages/ad/96/f48a60007dca2c8012e4c3421f3b5c3d7e14618f8d6fe1fbd974439b822d/pyduinobridge-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "6f0dc23555ff1ad80095925f50ebec56", "sha256": "80f7d5a7291fff036cf0f58cf31b37aa8e4e02c9c4756a9315eb9fdfa34fe6d3"}, "downloads": -1, "filename": "pyduinobridge-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "6f0dc23555ff1ad80095925f50ebec56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 17392, "upload_time": "2020-04-29T15:35:26", "upload_time_iso_8601": "2020-04-29T15:35:26.720636Z", "url": "https://files.pythonhosted.org/packages/3e/f5/6d9cc959676e4397d1b06896e2cb26cfd1b572cda5b30994700560192c14/pyduinobridge-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c91d4fbb799d328a2db1ea47bb6e9eaf", "sha256": "1b82f4541c31240c1e7d6519dd2a168d1e48a48a05484616c74b07f207850be8"}, "downloads": -1, "filename": "pyduinobridge-1.0.5.tar.gz", "has_sig": false, "md5_digest": "c91d4fbb799d328a2db1ea47bb6e9eaf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5887, "upload_time": "2020-04-29T15:35:27", "upload_time_iso_8601": "2020-04-29T15:35:27.645347Z", "url": "https://files.pythonhosted.org/packages/cb/e8/235f377601f205676f9898f09d349dedf804e32b52f8a703c6806776a4da/pyduinobridge-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "8b88ac9f3190f082abed7c3d4f087dae", "sha256": "aa7c114def9ddb567e2ca92a10450f5d66e19f928439118460f85dc070582833"}, "downloads": -1, "filename": "pyduinobridge-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "8b88ac9f3190f082abed7c3d4f087dae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 17568, "upload_time": "2020-04-29T15:39:28", "upload_time_iso_8601": "2020-04-29T15:39:28.277327Z", "url": "https://files.pythonhosted.org/packages/17/5e/639bfb9932c826c3cdac56e7b430dbf61070a3f9b318ced62d82e11919f8/pyduinobridge-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70103e9f41752e31f1f18f0aa0fe0cdf", "sha256": "cef42f230eb08b903dc64290087aeb8d80c6bb65129ee3ce44055719a3fbe7a3"}, "downloads": -1, "filename": "pyduinobridge-1.0.6.tar.gz", "has_sig": false, "md5_digest": "70103e9f41752e31f1f18f0aa0fe0cdf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6073, "upload_time": "2020-04-29T15:39:29", "upload_time_iso_8601": "2020-04-29T15:39:29.365742Z", "url": "https://files.pythonhosted.org/packages/03/15/e2082c877c6cc1f5ce5bf118029eed006993d844b4fe4c4f81aeafe771ac/pyduinobridge-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8b88ac9f3190f082abed7c3d4f087dae", "sha256": "aa7c114def9ddb567e2ca92a10450f5d66e19f928439118460f85dc070582833"}, "downloads": -1, "filename": "pyduinobridge-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "8b88ac9f3190f082abed7c3d4f087dae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 17568, "upload_time": "2020-04-29T15:39:28", "upload_time_iso_8601": "2020-04-29T15:39:28.277327Z", "url": "https://files.pythonhosted.org/packages/17/5e/639bfb9932c826c3cdac56e7b430dbf61070a3f9b318ced62d82e11919f8/pyduinobridge-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70103e9f41752e31f1f18f0aa0fe0cdf", "sha256": "cef42f230eb08b903dc64290087aeb8d80c6bb65129ee3ce44055719a3fbe7a3"}, "downloads": -1, "filename": "pyduinobridge-1.0.6.tar.gz", "has_sig": false, "md5_digest": "70103e9f41752e31f1f18f0aa0fe0cdf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6073, "upload_time": "2020-04-29T15:39:29", "upload_time_iso_8601": "2020-04-29T15:39:29.365742Z", "url": "https://files.pythonhosted.org/packages/03/15/e2082c877c6cc1f5ce5bf118029eed006993d844b4fe4c4f81aeafe771ac/pyduinobridge-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:41 2020"}