{"info": {"author": "Roland Puntaier", "author_email": "roland.puntaier@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Education", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development"], "description": "If called from command line, this encodes a binary file into base128.\nIf imported from python it provides a base128 class to do the same.\n\nAn instance of base128 can be used to convert to and from base128 encoding.\n\nEncoding: The python package bitarray is used to insert a 0 bit every 8\nbits of the data.  Bitarray cares to shift the bits to make room for the\nnew bit.  This is done in chunks.  \nThe length in bits mod 8 can become greater than zero for chunks of size\nnot equal to a multiple of 7. So ``chunksize`` must be a multiple of 7.\nEven if ``chunksize`` is a multiple of 7 the last chunk \nlikely has to be padded to reach a multiple of 8 after encoding.\nThe amount of padding can be expressed as a function of the original data\nlength mod ``chunksize`` (``modchunk``). ``modchunk`` is added as an\nadditional byte at the end of the encoding.  To make this byte also\nbase128, we require ``chunksize``<=128.\n\nIf ``chars`` is provided, the resulting 7-bit numbers are \nused as indices to map to entries of ``chars``. \nWith bytes ``chars`` the resulting chunks will be integer lists \nand possibly still need to be typed to bytes for further processing::\n\n    with open('tstenc.txt','wb') as f: f.write(b'\\n'.join([bytes(x) for x in encoded]))\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rpuntaie/base128", "keywords": "encoding, base128, iso-8859", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "base128", "package_url": "https://pypi.org/project/base128/", "platform": "", "project_url": "https://pypi.org/project/base128/", "project_urls": {"Homepage": "https://github.com/rpuntaie/base128"}, "release_url": "https://pypi.org/project/base128/0.1.1/", "requires_dist": ["bitarray (>=0.8.1)"], "requires_python": ">3.3", "summary": "Encodes to and decodes from base128.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            If called from command line, this encodes a binary file into base128.<br>If imported from python it provides a base128 class to do the same.<br><br>An instance of base128 can be used to convert to and from base128 encoding.<br><br>Encoding: The python package bitarray is used to insert a 0 bit every 8<br>bits of the data.  Bitarray cares to shift the bits to make room for the<br>new bit.  This is done in chunks.  <br>The length in bits mod 8 can become greater than zero for chunks of size<br>not equal to a multiple of 7. So ``chunksize`` must be a multiple of 7.<br>Even if ``chunksize`` is a multiple of 7 the last chunk <br>likely has to be padded to reach a multiple of 8 after encoding.<br>The amount of padding can be expressed as a function of the original data<br>length mod ``chunksize`` (``modchunk``). ``modchunk`` is added as an<br>additional byte at the end of the encoding.  To make this byte also<br>base128, we require ``chunksize``&lt;=128.<br><br>If ``chars`` is provided, the resulting 7-bit numbers are <br>used as indices to map to entries of ``chars``. <br>With bytes ``chars`` the resulting chunks will be integer lists <br>and possibly still need to be typed to bytes for further processing::<br><br>    with open('tstenc.txt','wb') as f: f.write(b'\\n'.join([bytes(x) for x in encoded]))<br><br><br><br>\n          </div>"}, "last_serial": 3198509, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "90b0a17237575e81c41f4a2c2bba74a1", "sha256": "dca2f830612899967838be7f9fc4da21f156c5f2bf55f6fc2393ff1e6c7dd938"}, "downloads": -1, "filename": "base128-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "90b0a17237575e81c41f4a2c2bba74a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.3", "size": 8277, "upload_time": "2017-09-17T22:08:36", "upload_time_iso_8601": "2017-09-17T22:08:36.346973Z", "url": "https://files.pythonhosted.org/packages/b5/93/709af5f7daf56e6ab23eb818c9c898379cdc9c566a51240d046bde8de61f/base128-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4f1bd45599ef619aa68a72dea99cff71", "sha256": "36453b3af0939404bd40519802b3cc2138db93b52761a0d57d87b47f29009e56"}, "downloads": -1, "filename": "base128-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4f1bd45599ef619aa68a72dea99cff71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.3", "size": 8281, "upload_time": "2017-09-24T12:30:47", "upload_time_iso_8601": "2017-09-24T12:30:47.953360Z", "url": "https://files.pythonhosted.org/packages/05/ae/633ad839c7ac80b94b3483066e93ad4c4a2f8e201cc02f96028c93a70915/base128-0.1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f1bd45599ef619aa68a72dea99cff71", "sha256": "36453b3af0939404bd40519802b3cc2138db93b52761a0d57d87b47f29009e56"}, "downloads": -1, "filename": "base128-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4f1bd45599ef619aa68a72dea99cff71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.3", "size": 8281, "upload_time": "2017-09-24T12:30:47", "upload_time_iso_8601": "2017-09-24T12:30:47.953360Z", "url": "https://files.pythonhosted.org/packages/05/ae/633ad839c7ac80b94b3483066e93ad4c4a2f8e201cc02f96028c93a70915/base128-0.1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:14:51 2020"}