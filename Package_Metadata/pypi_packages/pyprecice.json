{"info": {"author": "the preCICE developers", "author_email": "info@precice.org", "bugtrack_url": null, "classifiers": [], "description": "Python language bindings for the C++ library preCICE\n----------------------------------------------------\n\n<a style=\"text-decoration: none\" href=\"https://travis-ci.org/precice/python-bindings\" target=\"_blank\">\n    <img src=\"https://travis-ci.org/precice/python-bindings.svg?branch=develop\" alt=\"Build status\">\n</a>\n\n[![Upload Python Package](https://github.com/precice/python-bindings/workflows/Upload%20Python%20Package/badge.svg?branch=master)](https://pypi.org/project/pyprecice/)\n\nThis package provides python language bindings for the C++ library [preCICE](https://github.com/precice/precice). Note that the first three digits of the version number of the bindings indicate the preCICE version that the bindings support. The last digit represents the version of the bindings. Example: `v2.0.0.1` and `v2.0.0.2` of the bindings represent versions `1` and `2` of the bindings that are compatible with preCICE `v2.0.0`.\n\n# Required dependencies\n\n**preCICE**: Refer to [the preCICE wiki](https://github.com/precice/precice/wiki#1-get-precice) for information on building and installation.\n\n**MPI**: `mpi4py` requires MPI to be installed on your system.\n\n# Installing the package\n\nWe recommend using pip3 (version 19.0 or newer) for the sake of simplicity. You can check your pip3 version via `pip3 --version`. To update pip3, use the following line:\n```\n$ pip3 install --upgrade pip\n```\n\n## Using pip3\n\n### preCICE system installs\n\nFor system installs of preCICE, installation works out of the box. There are different ways how pip can be used to install pyprecice. pip will fetch cython and other build-time dependencies, compile the bindings and finally install the package pyprecice.\n\n* (recommended) install [pyprecice from PyPI](https://pypi.org/project/pyprecice/)\n\n  ```\n  $ pip3 install --user pyprecice\n  ```\n\n* provide the link to this repository to pip (replace `<branch>` with the branch you want to use, preferably `master` or `develop`)\n\n  ```\n  $ pip3 install --user https://github.com/precice/python-bindings/archive/<branch>.zip\n  ```\n\n* if you already cloned this repository, execute the following command from this directory:\n\n  ```\n  $ pip3 install --user .\n  ```\n  *note the dot at the end of the line*\n\n### preCICE at custom location (setting PATHS)\n\nIf preCICE (the C++ library) was installed in a custom prefix, or only built but not installed at all, you have to extend the following environment variables:\n\n- `LIBRARY_PATH`, `LD_LIBRARY_PATH` to the library location, or `$prefix/lib`\n- `CPATH` either to the `src` directory or the `$prefix/include`\n\nThe precice wiki provides more informaiton on [linking preCICE](https://github.com/precice/precice/wiki/Linking-to-preCICE).\n\n## Using setup.py\n\n### preCICE system installs\n\nIn this directory, execute:\n```\n$ python3 setup.py install --user\n```\n\n### preCICE at custom location (setting PATHS)\n\nsee above. Then run\n```\n$ python3 setup.py install --user\n```\n\n### preCICE at custom location (explicit include path, library path)\n\n1. Install cython and other dependencies via pip3\n   ```\n   $ pip3 install --user setuptools wheel cython packaging numpy\n   ```\n2. Open terminal in this folder.\n3. Build the bindings\n   ```\n   $ python3 setup.py build_ext --include-dirs=$PRECICE_ROOT/src --library-dirs=$PRECICE_ROOT/build/last\n   ```\n\n  **Options:**\n  - `--include-dirs=`, default: `''` \n    Path to the headers of preCICE, point to the sources `$PRECICE_ROOT/src`, or the your custom install prefix `$prefix/include`.\n  \n  **NOTES:**\n  \n  - If you have built preCICE using CMake, you can pass the path to the CMake binary directory using `--library-dirs`.\n  - It is recommended to use preCICE as a shared library here.\n\n4. Install the bindings\n   ```\n   $ python3 setup.py install --user\n   ```\n\n5. Clean-up _optional_\n   ```\n   $ python3 setup.py clean --all\n   ```\n\n# Test the installation\n\nUpdate `LD_LIBRARY_PATH` such that python can find `precice.so`\n\n```\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PRECICE_ROOT/build/last\n```\n\nRun the following to test the installation:\n\n```\n$ python3 -c \"import precice\"\n```\n\n## Unit tests\n\n1. Clean-up __mandatory__ (because we must not link against the real `precice.so`, but we use a mocked version)\n   ```\n   $ python3 setup.py clean --all\n   ```\n\n2. Set `CPLUS_INCLUDE_PATH` (we cannot use `build_ext` and the `--include-dirs` option here)\n   ```\n   $ export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$PRECICE_ROOT/src\n   ```\n\n3. Run tests with\n   ```\n   $ python3 setup.py test\n   ```\n\n# Usage\n\nYou can find the documentation of the implemented interface in the file `precice.pyx`. For an example of how `pyprecice` can be used please refer to the [1D elastic tube example](https://github.com/precice/precice/wiki/1D-elastic-tube-using-the-Python-API). \n\n**Note** The python package that is installed is called `pyprecice`. It provides the python module `precice` that can be use in your code via `import precice`, for example.\n\n# Troubleshooting & miscellaneous\n\n### preCICE is not found\n\nThe following error shows up during installation, if preCICE is not found:\n\n```\n  /tmp/pip-install-d_fjyo1h/pyprecice/precice.cpp:643:10: fatal error: precice/SolverInterface.hpp: No such file or directory\n    643 | #include \"precice/SolverInterface.hpp\"\n        |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  compilation terminated.\n  error: command 'x86_64-linux-gnu-gcc' failed with exit status 1\n  ----------------------------------------\n  ERROR: Failed building wheel for pyprecice\nFailed to build pyprecice\nERROR: Could not build wheels for pyprecice which use PEP 517 and cannot be installed directly\n```\n\nThere are two possible reasons, why preCICE is not found:\n\n1. preCICE is not installed. Please download and install the C++ library preCICE. See [above](https://github.com/precice/python-bindings/blob/develop/README.md#required-dependencies).\n2. preCICE is installed, but cannot be found. Please make sure that preCICE can be found during the installation process. See our wiki page on [linking to preCICE](https://github.com/precice/precice/wiki/Linking-to-preCICE) and [the instructions above](https://github.com/precice/python-bindings/blob/develop/README.md#precice-at-custom-location-setting-paths).\n\n### Version of Cython is too old\n\nIn case the compilation fails with `shared_ptr.pxd not found` messages, check if you use the latest version of Cython.\n\n### Version of pip3 is too old\n\nIf you see the following error\n```\nerror: option --single-version-externally-managed not recognized\n```\nyour version of pip might be too old. Please update pip and try again. One possible way for updating pip is to run the following commands:\n```\nwget -q https://bootstrap.pypa.io/get-pip.py -O get-pip.py && python3 get-pip.py\n```\n*Be aware that `python3 get-pip.py` might require root privileges.*\n\nCheck your version of pip via `pip3 --version`. For version 8.1.1 and 9.0.1 we know that this problem occurs. *Remark:* you get versions 8.1.1 of pip if you use `sudo apt install python3-pip` on Ubuntu 16.04 (pip version 9.0.1 on Ubuntu 18.04)\n\n### Build-time dependencies (Cython, numpy...) defined in `pyproject.toml` are not installed automatically\n\nIf you see the following error\n```\nCollecting pyprecice\n  Using cached https://files.pythonhosted.org/packages/a6/fb/66f78168394afa2adca62ecd9079a98e741fbf3c6a96845719641ea27912/pyprecice-2.0.0.1.tar.gz\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n      File \"/tmp/pip-build-ebyoc0sq/pyprecice/setup.py\", line 7, in <module>\n        from Cython.Distutils.extension import Extension\n    ModuleNotFoundError: No module named 'Cython'\n```\nyour pip might be too old and therefore it does not use the information from `pyproject.toml`. You can update your pip via\n```\npip3 install --upgrade pip\n```\nthen try to install `pyprecice`, again.\n\n### `Python.h` missing\n\n```\n$ python3 -m pip install pyprecice\nCollecting pyprecice\n...\n  /tmp/pip-build-7rj4_h93/pyprecice/precice.cpp:25:20: fatal error: Python.h: No such file or directory\n  compilation terminated.\n  error: command 'x86_64-linux-gnu-gcc' failed with exit status 1\n\n  ----------------------------------------\n  Failed building wheel for pyprecice \n```\n\nPlease try to install `python3-dev`. E.g. via `apt install python3-dev`. Please make sure that you use the correct version (e.g. `python3.5-dev` or `python3.6-dev`). You can check your version via `python3 --version`.\n\n### `libprecice.so` is not found at runtime\n\n```\n$ python3 -c \"import precice\"\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nImportError: libprecice.so.2: cannot open shared object file: No such file or directory\n```\n\nMake sure that your `LD_LIBRARY_PATH` includes the directory that contains `libprecice.so`. The actual path depends on how you installed preCICE. Example: If preCICE was installed using `sudo make install` and you did not define a `CMAKE_INSTALL_PREFIX` the library path is `/usr/local/lib`. This means you have to `export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH`.\n\n### I'm using preCICE < 2.0.0, but there is no matching version of the bindings. What can I do?\n\nIf you want to use the old experimental python bindings (released with preCICE version < 2.0.0), please refer to the corresponding preCICE version. Example: for preCICE v1.6.1 there are three different versions of the python bindings: [`precice_future`](https://github.com/precice/precice/tree/v1.6.1/src/precice/bindings/python_future), [`precice`](https://github.com/precice/precice/tree/v1.6.1/src/precice/bindings/python) and [`PySolverInterface`](https://github.com/precice/precice/tree/v1.6.1/src/precice/bindings/PySolverInterface). Installation instructions can be found in the corresponding `README` files.\n\n### Installing the python bindings for Python 2.7.17\n\n*Note that the instructions in this section are outdated and refer to the deprecated python bindings. Until we have updated information on the installation procedure for the python bindings under this use-case, we will keep these instructions, since they might still be very useful* (Originally contributed by [huangq1234553](https://github.com/huangq1234553) to the precice wiki in [`precice/precice/wiki:8bb74b7`](https://github.com/precice/precice/wiki/Dependencies/8bb74b78a7ebc54983f4822af82fb3d638021faa).)\n\n<details><summary>show details</summary>\n\nThis guide provides steps to install python bindings for precice-1.6.1 for a conda environment Python 2.7.17 on the CoolMUC. Note that preCICE no longer supports Python 2 after v1.4.0. Hence, some modifications to the python setup code was necessary. Most steps are similar if not identical to the basic guide without petsc or python above. This guide assumes that the Eigen dependencies have already been installed.\n\nLoad the prerequisite libraries:\n```\nmodule load gcc/7\nmodule unload mpi.intel\nmodule load mpi.intel/2018_gcc\nmodule load cmake/3.12.1\n```\nAt the time of this writing `module load boost/1.68.0` is no longer available. Instead\nboost 1.65.1 was installed per the `boost and yaml-cpp` guide above. \n\nIn order to have the right python dependencies, a packaged conda environment was transferred to\nSuperMUC. The following dependencies were installed:\n- numpy\n- mpi4py\n\nWith the python environment active, we have to feed the right python file directories to the cmake command.\nNote that -DPYTHON_LIBRARY expects a python shared library. You can likely modify the version to fit what is required.\n```\nmkdir build && cd build\ncmake -DBUILD_SHARED_LIBS=ON -DPRECICE_PETScMapping=OFF -DPRECICE_PythonActions=ON -DCMAKE_INSTALL_PREFIX=/path/to/precice -DCMAKE_BUILD_TYPE=Debug .. -DPYTHON_INCLUDE_DIR=$(python -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\")  -DPYTHON_LIBRARY=$(python -c \"import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR')+'/libpython2.7.so')\") -DNumPy_INCLUDE_DIR=$(python -c \"import numpy; print(numpy.get_include())\")\nmake -j 12\nmake install\n```\nAfter installing, make sure you add the preCICE installation paths to your `.bashrc`, so that other programs can find it:\n```\nexport PRECICE_ROOT=\"path/to/precice_install\"\nexport PKG_CONFIG_PATH=\"path/to/precice_install/lib/pkgconfig:${PKG_CONFIG_PATH}\"\nexport CPLUS_INCLUDE_PATH=\"path/to/precice_install/include:${CPLUS_INCLUDE_PATH}\"\nexport LD_LIBRARY_PATH=\"path/to/precice_install/lib:${LD_LIBRARY_PATH}\"\n```\nThen, navigate to the python_future bindings script.\n```\ncd /path/to/precice/src/precice/bindings/python_future\n```\nAppend the following to the head of the file to allow Python2 to run Python3 code. Note that\nimporting `unicode_literals` from `future` will cause errors in `setuptools` methods as string literals \nin code are interpreted as `unicode` with this import.\n```\nfrom __future__ import (absolute_import, division,\n                        print_function)\nfrom builtins import (\n         bytes, dict, int, list, object, range, str,\n         ascii, chr, hex, input, next, oct, open,\n         pow, round, super,\n         filter, map, zip)\n```\nModify `mpicompiler_default = \"mpic++\"` to `mpicompiler_default = \"mpicxx\"` in line 100.\nRun the setup file using the default Python 2.7.17.\n```\npython setup.py install --user\n```\n</details>\n\n# Contributors\n\n* [Benjamin R\u00fcth](https://github.com/BenjaminRueth)\n* [Ishaan Desai](https://github.com/IshaanDesai)\n* [Saumitra Vinay Joshi](https://github.com/saumiJ) contributed first working prototype in [`3db9c9` on `precice/precice`](https://github.com/precice/precice/commit/3db9c95e527db1e1cacb2fd116a5ce13ee877513)\n* [Fr\u00e9d\u00e9ric Simonis](https://github.com/fsimonis)\n* [Florian Lindner](https://github.com/floli)\n* [Benjamin Uekermann](https://github.com/uekerman)\n* [Gerasimos Chourdakis](https://github.com/MakisH)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/precice/python-bindings", "keywords": "", "license": "LGPL-3.0", "maintainer": "", "maintainer_email": "", "name": "pyprecice", "package_url": "https://pypi.org/project/pyprecice/", "platform": "", "project_url": "https://pypi.org/project/pyprecice/", "project_urls": {"Homepage": "https://github.com/precice/python-bindings"}, "release_url": "https://pypi.org/project/pyprecice/2.0.2.1/", "requires_dist": null, "requires_python": ">=3", "summary": "Python language bindings for the preCICE coupling library", "version": "2.0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Python language bindings for the C++ library preCICE</h2>\n<a href=\"https://travis-ci.org/precice/python-bindings\" rel=\"nofollow\">\n    <img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea4e03f349eafe9dde47042d7f15c306abe5a518/68747470733a2f2f7472617669732d63692e6f72672f707265636963652f707974686f6e2d62696e64696e67732e7376673f6272616e63683d646576656c6f70\">\n</a>\n<p><a href=\"https://pypi.org/project/pyprecice/\" rel=\"nofollow\"><img alt=\"Upload Python Package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ac8b4998dc0d362c1184baa50804d3395369000/68747470733a2f2f6769746875622e636f6d2f707265636963652f707974686f6e2d62696e64696e67732f776f726b666c6f77732f55706c6f6164253230507974686f6e2532305061636b6167652f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>This package provides python language bindings for the C++ library <a href=\"https://github.com/precice/precice\" rel=\"nofollow\">preCICE</a>. Note that the first three digits of the version number of the bindings indicate the preCICE version that the bindings support. The last digit represents the version of the bindings. Example: <code>v2.0.0.1</code> and <code>v2.0.0.2</code> of the bindings represent versions <code>1</code> and <code>2</code> of the bindings that are compatible with preCICE <code>v2.0.0</code>.</p>\n<h1>Required dependencies</h1>\n<p><strong>preCICE</strong>: Refer to <a href=\"https://github.com/precice/precice/wiki#1-get-precice\" rel=\"nofollow\">the preCICE wiki</a> for information on building and installation.</p>\n<p><strong>MPI</strong>: <code>mpi4py</code> requires MPI to be installed on your system.</p>\n<h1>Installing the package</h1>\n<p>We recommend using pip3 (version 19.0 or newer) for the sake of simplicity. You can check your pip3 version via <code>pip3 --version</code>. To update pip3, use the following line:</p>\n<pre><code>$ pip3 install --upgrade pip\n</code></pre>\n<h2>Using pip3</h2>\n<h3>preCICE system installs</h3>\n<p>For system installs of preCICE, installation works out of the box. There are different ways how pip can be used to install pyprecice. pip will fetch cython and other build-time dependencies, compile the bindings and finally install the package pyprecice.</p>\n<ul>\n<li>\n<p>(recommended) install <a href=\"https://pypi.org/project/pyprecice/\" rel=\"nofollow\">pyprecice from PyPI</a></p>\n<pre><code>$ pip3 install --user pyprecice\n</code></pre>\n</li>\n<li>\n<p>provide the link to this repository to pip (replace <code>&lt;branch&gt;</code> with the branch you want to use, preferably <code>master</code> or <code>develop</code>)</p>\n<pre><code>$ pip3 install --user https://github.com/precice/python-bindings/archive/&lt;branch&gt;.zip\n</code></pre>\n</li>\n<li>\n<p>if you already cloned this repository, execute the following command from this directory:</p>\n<pre><code>$ pip3 install --user .\n</code></pre>\n<p><em>note the dot at the end of the line</em></p>\n</li>\n</ul>\n<h3>preCICE at custom location (setting PATHS)</h3>\n<p>If preCICE (the C++ library) was installed in a custom prefix, or only built but not installed at all, you have to extend the following environment variables:</p>\n<ul>\n<li><code>LIBRARY_PATH</code>, <code>LD_LIBRARY_PATH</code> to the library location, or <code>$prefix/lib</code></li>\n<li><code>CPATH</code> either to the <code>src</code> directory or the <code>$prefix/include</code></li>\n</ul>\n<p>The precice wiki provides more informaiton on <a href=\"https://github.com/precice/precice/wiki/Linking-to-preCICE\" rel=\"nofollow\">linking preCICE</a>.</p>\n<h2>Using setup.py</h2>\n<h3>preCICE system installs</h3>\n<p>In this directory, execute:</p>\n<pre><code>$ python3 setup.py install --user\n</code></pre>\n<h3>preCICE at custom location (setting PATHS)</h3>\n<p>see above. Then run</p>\n<pre><code>$ python3 setup.py install --user\n</code></pre>\n<h3>preCICE at custom location (explicit include path, library path)</h3>\n<ol>\n<li>Install cython and other dependencies via pip3\n<pre><code>$ pip3 install --user setuptools wheel cython packaging numpy\n</code></pre>\n</li>\n<li>Open terminal in this folder.</li>\n<li>Build the bindings\n<pre><code>$ python3 setup.py build_ext --include-dirs=$PRECICE_ROOT/src --library-dirs=$PRECICE_ROOT/build/last\n</code></pre>\n</li>\n</ol>\n<p><strong>Options:</strong></p>\n<ul>\n<li><code>--include-dirs=</code>, default: <code>''</code>\nPath to the headers of preCICE, point to the sources <code>$PRECICE_ROOT/src</code>, or the your custom install prefix <code>$prefix/include</code>.</li>\n</ul>\n<p><strong>NOTES:</strong></p>\n<ul>\n<li>If you have built preCICE using CMake, you can pass the path to the CMake binary directory using <code>--library-dirs</code>.</li>\n<li>It is recommended to use preCICE as a shared library here.</li>\n</ul>\n<ol>\n<li>\n<p>Install the bindings</p>\n<pre><code>$ python3 setup.py install --user\n</code></pre>\n</li>\n<li>\n<p>Clean-up <em>optional</em></p>\n<pre><code>$ python3 setup.py clean --all\n</code></pre>\n</li>\n</ol>\n<h1>Test the installation</h1>\n<p>Update <code>LD_LIBRARY_PATH</code> such that python can find <code>precice.so</code></p>\n<pre><code>$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PRECICE_ROOT/build/last\n</code></pre>\n<p>Run the following to test the installation:</p>\n<pre><code>$ python3 -c \"import precice\"\n</code></pre>\n<h2>Unit tests</h2>\n<ol>\n<li>\n<p>Clean-up <strong>mandatory</strong> (because we must not link against the real <code>precice.so</code>, but we use a mocked version)</p>\n<pre><code>$ python3 setup.py clean --all\n</code></pre>\n</li>\n<li>\n<p>Set <code>CPLUS_INCLUDE_PATH</code> (we cannot use <code>build_ext</code> and the <code>--include-dirs</code> option here)</p>\n<pre><code>$ export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$PRECICE_ROOT/src\n</code></pre>\n</li>\n<li>\n<p>Run tests with</p>\n<pre><code>$ python3 setup.py test\n</code></pre>\n</li>\n</ol>\n<h1>Usage</h1>\n<p>You can find the documentation of the implemented interface in the file <code>precice.pyx</code>. For an example of how <code>pyprecice</code> can be used please refer to the <a href=\"https://github.com/precice/precice/wiki/1D-elastic-tube-using-the-Python-API\" rel=\"nofollow\">1D elastic tube example</a>.</p>\n<p><strong>Note</strong> The python package that is installed is called <code>pyprecice</code>. It provides the python module <code>precice</code> that can be use in your code via <code>import precice</code>, for example.</p>\n<h1>Troubleshooting &amp; miscellaneous</h1>\n<h3>preCICE is not found</h3>\n<p>The following error shows up during installation, if preCICE is not found:</p>\n<pre><code>  /tmp/pip-install-d_fjyo1h/pyprecice/precice.cpp:643:10: fatal error: precice/SolverInterface.hpp: No such file or directory\n    643 | #include \"precice/SolverInterface.hpp\"\n        |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  compilation terminated.\n  error: command 'x86_64-linux-gnu-gcc' failed with exit status 1\n  ----------------------------------------\n  ERROR: Failed building wheel for pyprecice\nFailed to build pyprecice\nERROR: Could not build wheels for pyprecice which use PEP 517 and cannot be installed directly\n</code></pre>\n<p>There are two possible reasons, why preCICE is not found:</p>\n<ol>\n<li>preCICE is not installed. Please download and install the C++ library preCICE. See <a href=\"https://github.com/precice/python-bindings/blob/develop/README.md#required-dependencies\" rel=\"nofollow\">above</a>.</li>\n<li>preCICE is installed, but cannot be found. Please make sure that preCICE can be found during the installation process. See our wiki page on <a href=\"https://github.com/precice/precice/wiki/Linking-to-preCICE\" rel=\"nofollow\">linking to preCICE</a> and <a href=\"https://github.com/precice/python-bindings/blob/develop/README.md#precice-at-custom-location-setting-paths\" rel=\"nofollow\">the instructions above</a>.</li>\n</ol>\n<h3>Version of Cython is too old</h3>\n<p>In case the compilation fails with <code>shared_ptr.pxd not found</code> messages, check if you use the latest version of Cython.</p>\n<h3>Version of pip3 is too old</h3>\n<p>If you see the following error</p>\n<pre><code>error: option --single-version-externally-managed not recognized\n</code></pre>\n<p>your version of pip might be too old. Please update pip and try again. One possible way for updating pip is to run the following commands:</p>\n<pre><code>wget -q https://bootstrap.pypa.io/get-pip.py -O get-pip.py &amp;&amp; python3 get-pip.py\n</code></pre>\n<p><em>Be aware that <code>python3 get-pip.py</code> might require root privileges.</em></p>\n<p>Check your version of pip via <code>pip3 --version</code>. For version 8.1.1 and 9.0.1 we know that this problem occurs. <em>Remark:</em> you get versions 8.1.1 of pip if you use <code>sudo apt install python3-pip</code> on Ubuntu 16.04 (pip version 9.0.1 on Ubuntu 18.04)</p>\n<h3>Build-time dependencies (Cython, numpy...) defined in <code>pyproject.toml</code> are not installed automatically</h3>\n<p>If you see the following error</p>\n<pre><code>Collecting pyprecice\n  Using cached https://files.pythonhosted.org/packages/a6/fb/66f78168394afa2adca62ecd9079a98e741fbf3c6a96845719641ea27912/pyprecice-2.0.0.1.tar.gz\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n      File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n      File \"/tmp/pip-build-ebyoc0sq/pyprecice/setup.py\", line 7, in &lt;module&gt;\n        from Cython.Distutils.extension import Extension\n    ModuleNotFoundError: No module named 'Cython'\n</code></pre>\n<p>your pip might be too old and therefore it does not use the information from <code>pyproject.toml</code>. You can update your pip via</p>\n<pre><code>pip3 install --upgrade pip\n</code></pre>\n<p>then try to install <code>pyprecice</code>, again.</p>\n<h3><code>Python.h</code> missing</h3>\n<pre><code>$ python3 -m pip install pyprecice\nCollecting pyprecice\n...\n  /tmp/pip-build-7rj4_h93/pyprecice/precice.cpp:25:20: fatal error: Python.h: No such file or directory\n  compilation terminated.\n  error: command 'x86_64-linux-gnu-gcc' failed with exit status 1\n\n  ----------------------------------------\n  Failed building wheel for pyprecice \n</code></pre>\n<p>Please try to install <code>python3-dev</code>. E.g. via <code>apt install python3-dev</code>. Please make sure that you use the correct version (e.g. <code>python3.5-dev</code> or <code>python3.6-dev</code>). You can check your version via <code>python3 --version</code>.</p>\n<h3><code>libprecice.so</code> is not found at runtime</h3>\n<pre><code>$ python3 -c \"import precice\"\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nImportError: libprecice.so.2: cannot open shared object file: No such file or directory\n</code></pre>\n<p>Make sure that your <code>LD_LIBRARY_PATH</code> includes the directory that contains <code>libprecice.so</code>. The actual path depends on how you installed preCICE. Example: If preCICE was installed using <code>sudo make install</code> and you did not define a <code>CMAKE_INSTALL_PREFIX</code> the library path is <code>/usr/local/lib</code>. This means you have to <code>export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH</code>.</p>\n<h3>I'm using preCICE &lt; 2.0.0, but there is no matching version of the bindings. What can I do?</h3>\n<p>If you want to use the old experimental python bindings (released with preCICE version &lt; 2.0.0), please refer to the corresponding preCICE version. Example: for preCICE v1.6.1 there are three different versions of the python bindings: <a href=\"https://github.com/precice/precice/tree/v1.6.1/src/precice/bindings/python_future\" rel=\"nofollow\"><code>precice_future</code></a>, <a href=\"https://github.com/precice/precice/tree/v1.6.1/src/precice/bindings/python\" rel=\"nofollow\"><code>precice</code></a> and <a href=\"https://github.com/precice/precice/tree/v1.6.1/src/precice/bindings/PySolverInterface\" rel=\"nofollow\"><code>PySolverInterface</code></a>. Installation instructions can be found in the corresponding <code>README</code> files.</p>\n<h3>Installing the python bindings for Python 2.7.17</h3>\n<p><em>Note that the instructions in this section are outdated and refer to the deprecated python bindings. Until we have updated information on the installation procedure for the python bindings under this use-case, we will keep these instructions, since they might still be very useful</em> (Originally contributed by <a href=\"https://github.com/huangq1234553\" rel=\"nofollow\">huangq1234553</a> to the precice wiki in <a href=\"https://github.com/precice/precice/wiki/Dependencies/8bb74b78a7ebc54983f4822af82fb3d638021faa\" rel=\"nofollow\"><code>precice/precice/wiki:8bb74b7</code></a>.)</p>\n<details><summary>show details</summary>\n<p>This guide provides steps to install python bindings for precice-1.6.1 for a conda environment Python 2.7.17 on the CoolMUC. Note that preCICE no longer supports Python 2 after v1.4.0. Hence, some modifications to the python setup code was necessary. Most steps are similar if not identical to the basic guide without petsc or python above. This guide assumes that the Eigen dependencies have already been installed.</p>\n<p>Load the prerequisite libraries:</p>\n<pre><code>module load gcc/7\nmodule unload mpi.intel\nmodule load mpi.intel/2018_gcc\nmodule load cmake/3.12.1\n</code></pre>\n<p>At the time of this writing <code>module load boost/1.68.0</code> is no longer available. Instead\nboost 1.65.1 was installed per the <code>boost and yaml-cpp</code> guide above.</p>\n<p>In order to have the right python dependencies, a packaged conda environment was transferred to\nSuperMUC. The following dependencies were installed:</p>\n<ul>\n<li>numpy</li>\n<li>mpi4py</li>\n</ul>\n<p>With the python environment active, we have to feed the right python file directories to the cmake command.\nNote that -DPYTHON_LIBRARY expects a python shared library. You can likely modify the version to fit what is required.</p>\n<pre><code>mkdir build &amp;&amp; cd build\ncmake -DBUILD_SHARED_LIBS=ON -DPRECICE_PETScMapping=OFF -DPRECICE_PythonActions=ON -DCMAKE_INSTALL_PREFIX=/path/to/precice -DCMAKE_BUILD_TYPE=Debug .. -DPYTHON_INCLUDE_DIR=$(python -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\")  -DPYTHON_LIBRARY=$(python -c \"import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR')+'/libpython2.7.so')\") -DNumPy_INCLUDE_DIR=$(python -c \"import numpy; print(numpy.get_include())\")\nmake -j 12\nmake install\n</code></pre>\n<p>After installing, make sure you add the preCICE installation paths to your <code>.bashrc</code>, so that other programs can find it:</p>\n<pre><code>export PRECICE_ROOT=\"path/to/precice_install\"\nexport PKG_CONFIG_PATH=\"path/to/precice_install/lib/pkgconfig:${PKG_CONFIG_PATH}\"\nexport CPLUS_INCLUDE_PATH=\"path/to/precice_install/include:${CPLUS_INCLUDE_PATH}\"\nexport LD_LIBRARY_PATH=\"path/to/precice_install/lib:${LD_LIBRARY_PATH}\"\n</code></pre>\n<p>Then, navigate to the python_future bindings script.</p>\n<pre><code>cd /path/to/precice/src/precice/bindings/python_future\n</code></pre>\n<p>Append the following to the head of the file to allow Python2 to run Python3 code. Note that\nimporting <code>unicode_literals</code> from <code>future</code> will cause errors in <code>setuptools</code> methods as string literals\nin code are interpreted as <code>unicode</code> with this import.</p>\n<pre><code>from __future__ import (absolute_import, division,\n                        print_function)\nfrom builtins import (\n         bytes, dict, int, list, object, range, str,\n         ascii, chr, hex, input, next, oct, open,\n         pow, round, super,\n         filter, map, zip)\n</code></pre>\n<p>Modify <code>mpicompiler_default = \"mpic++\"</code> to <code>mpicompiler_default = \"mpicxx\"</code> in line 100.\nRun the setup file using the default Python 2.7.17.</p>\n<pre><code>python setup.py install --user\n</code></pre>\n</details>\n<h1>Contributors</h1>\n<ul>\n<li><a href=\"https://github.com/BenjaminRueth\" rel=\"nofollow\">Benjamin R\u00fcth</a></li>\n<li><a href=\"https://github.com/IshaanDesai\" rel=\"nofollow\">Ishaan Desai</a></li>\n<li><a href=\"https://github.com/saumiJ\" rel=\"nofollow\">Saumitra Vinay Joshi</a> contributed first working prototype in <a href=\"https://github.com/precice/precice/commit/3db9c95e527db1e1cacb2fd116a5ce13ee877513\" rel=\"nofollow\"><code>3db9c9</code> on <code>precice/precice</code></a></li>\n<li><a href=\"https://github.com/fsimonis\" rel=\"nofollow\">Fr\u00e9d\u00e9ric Simonis</a></li>\n<li><a href=\"https://github.com/floli\" rel=\"nofollow\">Florian Lindner</a></li>\n<li><a href=\"https://github.com/uekerman\" rel=\"nofollow\">Benjamin Uekermann</a></li>\n<li><a href=\"https://github.com/MakisH\" rel=\"nofollow\">Gerasimos Chourdakis</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7152650, "releases": {"2.0.0.1": [{"comment_text": "", "digests": {"md5": "1a934d44eef51a182780379b5a247f15", "sha256": "2102c1c258fc769754239ec0682a3ab5ea1092b63b81c876fcef6646f4c6cf3f"}, "downloads": -1, "filename": "pyprecice-2.0.0.1.tar.gz", "has_sig": false, "md5_digest": "1a934d44eef51a182780379b5a247f15", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 18226, "upload_time": "2020-02-12T21:57:53", "upload_time_iso_8601": "2020-02-12T21:57:53.639119Z", "url": "https://files.pythonhosted.org/packages/a6/fb/66f78168394afa2adca62ecd9079a98e741fbf3c6a96845719641ea27912/pyprecice-2.0.0.1.tar.gz", "yanked": false}], "2.0.0.2": [{"comment_text": "", "digests": {"md5": "b6aeb5052c6d74a0d8ceeecc9a86bdb5", "sha256": "0291926761117e32c3f39fda8561753ba5a8ddb0c96fe4e96b398dba14bd7642"}, "downloads": -1, "filename": "pyprecice-2.0.0.2.tar.gz", "has_sig": false, "md5_digest": "b6aeb5052c6d74a0d8ceeecc9a86bdb5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24571, "upload_time": "2020-02-13T09:43:32", "upload_time_iso_8601": "2020-02-13T09:43:32.365742Z", "url": "https://files.pythonhosted.org/packages/c2/f1/053aa3c781f25a72c774e017a233426f6e328e8a7065a75d9f5d4467ea31/pyprecice-2.0.0.2.tar.gz", "yanked": false}], "2.0.0.2rc1": [{"comment_text": "", "digests": {"md5": "74274bca612daf0761c88bb239521eed", "sha256": "3bb560d4b5ebc7299a9b125e379a04798024b71e2448622e0bdecf9a36879898"}, "downloads": -1, "filename": "pyprecice-2.0.0.2rc1.tar.gz", "has_sig": false, "md5_digest": "74274bca612daf0761c88bb239521eed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 23072, "upload_time": "2020-02-12T22:43:39", "upload_time_iso_8601": "2020-02-12T22:43:39.409773Z", "url": "https://files.pythonhosted.org/packages/e5/ed/42e0717f2df3de924f9b9394e26cfe26dee34ce2b4c89e7c01faa761a057/pyprecice-2.0.0.2rc1.tar.gz", "yanked": false}], "2.0.0.2rc2": [{"comment_text": "", "digests": {"md5": "61bc17565cb07d2c0184bc4ac401c1eb", "sha256": "3f3e76433e9a7aac7016bf38fe573185ef2004e3af22fce5a9f3d84f1ef8694e"}, "downloads": -1, "filename": "pyprecice-2.0.0.2rc2.tar.gz", "has_sig": false, "md5_digest": "61bc17565cb07d2c0184bc4ac401c1eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24562, "upload_time": "2020-02-13T09:15:54", "upload_time_iso_8601": "2020-02-13T09:15:54.442318Z", "url": "https://files.pythonhosted.org/packages/4d/a3/cac9c5f76f9b91957c9290b07e9fc7b84b51448e4a375f3d1fb0c7a3baf6/pyprecice-2.0.0.2rc2.tar.gz", "yanked": false}], "2.0.1.1": [{"comment_text": "", "digests": {"md5": "9796a55f2765d2fce0499f850773a5ba", "sha256": "816783c11b2bb23784c19486b725d8a3bef822b906ed23e40caa98e9c3535951"}, "downloads": -1, "filename": "pyprecice-2.0.1.1.tar.gz", "has_sig": false, "md5_digest": "9796a55f2765d2fce0499f850773a5ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 25330, "upload_time": "2020-03-06T12:36:07", "upload_time_iso_8601": "2020-03-06T12:36:07.033314Z", "url": "https://files.pythonhosted.org/packages/99/f8/523751a118a706d6cd18011c1048b9aa54e54b7d2db394752b4b6777032d/pyprecice-2.0.1.1.tar.gz", "yanked": false}], "2.0.2.1": [{"comment_text": "", "digests": {"md5": "328c8702e3c29e3f5e73228f801ad446", "sha256": "180bf9d57b9d19b546033ad7d796d8ca187257e3ef391d5fb5fc4ed510bcdbad"}, "downloads": -1, "filename": "pyprecice-2.0.2.1.tar.gz", "has_sig": false, "md5_digest": "328c8702e3c29e3f5e73228f801ad446", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 25474, "upload_time": "2020-05-02T17:44:30", "upload_time_iso_8601": "2020-05-02T17:44:30.051997Z", "url": "https://files.pythonhosted.org/packages/82/c9/34246e96ddbf51a69947b80015a3f4c284bb6d6fa21a1ed470ac12f6f581/pyprecice-2.0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "328c8702e3c29e3f5e73228f801ad446", "sha256": "180bf9d57b9d19b546033ad7d796d8ca187257e3ef391d5fb5fc4ed510bcdbad"}, "downloads": -1, "filename": "pyprecice-2.0.2.1.tar.gz", "has_sig": false, "md5_digest": "328c8702e3c29e3f5e73228f801ad446", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 25474, "upload_time": "2020-05-02T17:44:30", "upload_time_iso_8601": "2020-05-02T17:44:30.051997Z", "url": "https://files.pythonhosted.org/packages/82/c9/34246e96ddbf51a69947b80015a3f4c284bb6d6fa21a1ed470ac12f6f581/pyprecice-2.0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:10 2020"}