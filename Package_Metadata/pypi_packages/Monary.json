{"info": {"author": "David J. C. Beach", "author_email": "info@djcinnovations.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: Microsoft :: Windows", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Database"], "description": "Introduction\r\n============\r\n\r\nMongoDB is a document-oriented database, organized for quick access to records\r\n(or rows) of data.  When doing analytics on a large data set, it is often\r\ndesirable to have it in a column-oriented format.  Columns of data may be\r\nthought of as mathematical vectors, and a wealth of techniques exist for\r\ngathering statistics about data that is stored in vector form.\r\n\r\nFor *small to medium* sized collections, it is possible to materialize several\r\ncolumns of data in the memory of a modern PC.  For example, an array of 100\r\nmillion double-precision numbers consumes 800 million bytes, or about 0.75 GB.\r\nFor larger problems, it's still possible to materialize a substantial portion\r\nof the data, or to work with data in multiple segments.  (Very large problems\r\nrequire more powerful weapons, such as map/reduce.)\r\n\r\nExtracting column data from MongoDB using Python is fairly straightforward.  In\r\nPyMongo, ``collection.find()`` generates a sequence of dictionary objects.\r\nWhen dealing with millions of records, the trick is not to keep these\r\ndictionaries in memory, as they tend to be large.  Fortunately, it's easy to\r\nmove the data in to arrays as it is loaded.\r\n\r\nFirst, let's create 3.5 million rows of test data:\r\n\r\n.. code-block:: python\r\n\r\n    #!/usr/bin/env python\r\n    import random\r\n    import pymongo\r\n\r\n    NUM_BATCHES = 3500\r\n    BATCH_SIZE = 1000\r\n    # 3500 batches * 1000 per batch = 3.5 million records\r\n\r\n    c = pymongo.MongoClient()\r\n    collection = c.mydb.collection\r\n\r\n    for i in xrange(NUM_BATCHES):\r\n        stuff = [ ]\r\n        for j in xrange(BATCH_SIZE):\r\n            record = dict(x1=random.uniform(0, 1),\r\n                          x2=random.uniform(0, 2),\r\n                          x3=random.uniform(0, 3),\r\n                          x4=random.uniform(0, 4),\r\n                          x5=random.uniform(0, 5)\r\n                     )\r\n            stuff.append(record)\r\n        collection.insert(stuff)\r\n\r\nHere's an example that uses numpy arrays:\r\n\r\n.. code-block:: python\r\n\r\n    #!/usr/bin/env python\r\n    import numpy\r\n    import pymongo\r\n\r\n    c = pymongo.MongoClient()\r\n    collection = c.mydb.collection\r\n    num = collection.count()\r\n    arrays = [ numpy.zeros(num) for i in range(5) ]\r\n\r\n    for i, record in enumerate(collection.find()):\r\n        for x in range(5):\r\n            arrays[x][i] = record[\"x%i\" % x+1]\r\n\r\n    for array in arrays: # prove that we did something...\r\n        print numpy.mean(array)\r\n\r\nWith 3.5 million records, this query takes 85 seconds on an EC2 Large instance\r\nrunning Ubuntu 10.10 64-bit, and takes 88 seconds on my MacBook Pro (2.66 GHz\r\nIntel Core 2 Duo with 8 GB RAM).\r\n\r\nThese timings might seem impressive, given that they're loading 200,000+ values\r\nper second.  However, closer examination reveals that much of that time is\r\nspent by pymongo as it reads each query result and transforms the BSON result\r\nto a Python dictionary.  (If you watch the CPU usage, you'll see Python is\r\nusing 90% or more of the CPU.)\r\n\r\nMonary\r\n======\r\n\r\nIt is possible to get (much) more speed from the query if we bypass the PyMongo\r\ndriver.  To demonstrate this, I've developed *monary*, a simple C library and\r\naccompanying Python wrapper which make use of MongoDB C driver.  The code is\r\ndesigned to accept a list of desired fields, and to load exactly those fields\r\nfrom the BSON results into some provided array storage.\r\n\r\nHere's an example of the same query using monary:\r\n\r\n.. code-block:: python\r\n\r\n    #!/usr/bin/env python\r\n\r\n    from monary import Monary\r\n    import numpy\r\n\r\n    with Monary(\"127.0.0.1\") as monary:\r\n        arrays = monary.query(\r\n            \"mydb\",                         # database name\r\n            \"collection\",                   # collection name\r\n            {},                             # query spec\r\n            [\"x1\", \"x2\", \"x3\", \"x4\", \"x5\"], # field names (in Mongo record)\r\n            [\"float64\"] * 5                 # Monary field types (see below)\r\n        )\r\n\r\n    for array in arrays:                    # prove that we did something...\r\n        print numpy.mean(array)\r\n\r\nMonary is able to perform the same query in 4 seconds flat, for a rate of about\r\n4 million values per second (20 times faster!)  Here's a quick summary of how\r\nthis Monary query stacks up against PyMongo:\r\n\r\n* PyMongo Insert -- EC2: 102 s -- Mac: 76 s\r\n* PyMongo Query -- EC2: 85 s -- Mac: 88 s\r\n* Monary Query -- EC2: 5.4 s -- Mac: 3.8 s\r\n\r\nOf course, this test has created some fairly ideal circumstances:  It's\r\nquerying for every record in the collection, the records contain only the\r\nqueried data (plus ObjectIDs), and the database is running locally.  The\r\nperformance may degrade if we used a remote server, if the records were larger,\r\nor if queried for a only subset of the records (requiring either that more\r\nrecords be scanned, or that an index be used).\r\n\r\nMonary now knows about the following types:\r\n\r\n* id (Mongo's 12-byte ObjectId)\r\n* int8\r\n* int16\r\n* int32\r\n* int64\r\n* float32\r\n* float64\r\n* bool\r\n* date (stored as int64, milliseconds since epoch)\r\n\r\nMonary's source code is available on bitbucket.  It includes a copy of the\r\nMongo C driver, and requires compilation and installation, which can be done\r\nvia the included \"setup.py\" file.  (The installation script works, but is in a\r\nsomewhat rough state.  Any help from a distutils guru would be greatly\r\nappreciated!)  To run Monary from Python, you will need to have the pymongo and\r\nnumpy packages installed.\r\n\r\nMonary has been slowly gaining functionality (including the recent additions of\r\nmore numeric types and the date type). Here are some planned future\r\nimprovements:\r\n\r\n* Support for string / binary types\r\n \r\n  (I hope to develop Monary to support some reasonable mapping of most BSON\r\n  types onto array storage.)\r\n\r\n* Support for fetching nested fields (e.g. \"x.y\")\r\n\r\n* Remove dependencies on PyMongo and NumPy (possibly)\r\n\r\n  (Currently these must be installed in order to use Monary.)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/djcbeach/monary/", "keywords": "monary pymongo mongo mongodb numpy array", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "Monary", "package_url": "https://pypi.org/project/Monary/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Monary/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/djcbeach/monary/"}, "release_url": "https://pypi.org/project/Monary/0.5.0/", "requires_dist": null, "requires_python": null, "summary": "Monary performs high-performance column queries on MongoDB", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>MongoDB is a document-oriented database, organized for quick access to records\n(or rows) of data.  When doing analytics on a large data set, it is often\ndesirable to have it in a column-oriented format.  Columns of data may be\nthought of as mathematical vectors, and a wealth of techniques exist for\ngathering statistics about data that is stored in vector form.</p>\n<p>For <em>small to medium</em> sized collections, it is possible to materialize several\ncolumns of data in the memory of a modern PC.  For example, an array of 100\nmillion double-precision numbers consumes 800 million bytes, or about 0.75 GB.\nFor larger problems, it\u2019s still possible to materialize a substantial portion\nof the data, or to work with data in multiple segments.  (Very large problems\nrequire more powerful weapons, such as map/reduce.)</p>\n<p>Extracting column data from MongoDB using Python is fairly straightforward.  In\nPyMongo, <tt>collection.find()</tt> generates a sequence of dictionary objects.\nWhen dealing with millions of records, the trick is not to keep these\ndictionaries in memory, as they tend to be large.  Fortunately, it\u2019s easy to\nmove the data in to arrays as it is loaded.</p>\n<p>First, let\u2019s create 3.5 million rows of test data:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pymongo</span>\n\n<span class=\"n\">NUM_BATCHES</span> <span class=\"o\">=</span> <span class=\"mi\">3500</span>\n<span class=\"n\">BATCH_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"c1\"># 3500 batches * 1000 per batch = 3.5 million records</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">pymongo</span><span class=\"o\">.</span><span class=\"n\">MongoClient</span><span class=\"p\">()</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">mydb</span><span class=\"o\">.</span><span class=\"n\">collection</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">xrange</span><span class=\"p\">(</span><span class=\"n\">NUM_BATCHES</span><span class=\"p\">):</span>\n    <span class=\"n\">stuff</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">xrange</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">):</span>\n        <span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"o\">=</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n                      <span class=\"n\">x2</span><span class=\"o\">=</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n                      <span class=\"n\">x3</span><span class=\"o\">=</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>\n                      <span class=\"n\">x4</span><span class=\"o\">=</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n                      <span class=\"n\">x5</span><span class=\"o\">=</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n                 <span class=\"p\">)</span>\n        <span class=\"n\">stuff</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">)</span>\n    <span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">stuff</span><span class=\"p\">)</span>\n</pre>\n<p>Here\u2019s an example that uses numpy arrays:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pymongo</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">pymongo</span><span class=\"o\">.</span><span class=\"n\">MongoClient</span><span class=\"p\">()</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">mydb</span><span class=\"o\">.</span><span class=\"n\">collection</span>\n<span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"n\">arrays</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">()):</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"n\">arrays</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">record</span><span class=\"p\">[</span><span class=\"s2\">\"x</span><span class=\"si\">%i</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">array</span> <span class=\"ow\">in</span> <span class=\"n\">arrays</span><span class=\"p\">:</span> <span class=\"c1\"># prove that we did something...</span>\n    <span class=\"nb\">print</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">)</span>\n</pre>\n<p>With 3.5 million records, this query takes 85 seconds on an EC2 Large instance\nrunning Ubuntu 10.10 64-bit, and takes 88 seconds on my MacBook Pro (2.66 GHz\nIntel Core 2 Duo with 8 GB RAM).</p>\n<p>These timings might seem impressive, given that they\u2019re loading 200,000+ values\nper second.  However, closer examination reveals that much of that time is\nspent by pymongo as it reads each query result and transforms the BSON result\nto a Python dictionary.  (If you watch the CPU usage, you\u2019ll see Python is\nusing 90% or more of the CPU.)</p>\n</div>\n<div id=\"monary\">\n<h2>Monary</h2>\n<p>It is possible to get (much) more speed from the query if we bypass the PyMongo\ndriver.  To demonstrate this, I\u2019ve developed <em>monary</em>, a simple C library and\naccompanying Python wrapper which make use of MongoDB C driver.  The code is\ndesigned to accept a list of desired fields, and to load exactly those fields\nfrom the BSON results into some provided array storage.</p>\n<p>Here\u2019s an example of the same query using monary:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">monary</span> <span class=\"kn\">import</span> <span class=\"n\">Monary</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Monary</span><span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">monary</span><span class=\"p\">:</span>\n    <span class=\"n\">arrays</span> <span class=\"o\">=</span> <span class=\"n\">monary</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"mydb\"</span><span class=\"p\">,</span>                         <span class=\"c1\"># database name</span>\n        <span class=\"s2\">\"collection\"</span><span class=\"p\">,</span>                   <span class=\"c1\"># collection name</span>\n        <span class=\"p\">{},</span>                             <span class=\"c1\"># query spec</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"x1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"x2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"x3\"</span><span class=\"p\">,</span> <span class=\"s2\">\"x4\"</span><span class=\"p\">,</span> <span class=\"s2\">\"x5\"</span><span class=\"p\">],</span> <span class=\"c1\"># field names (in Mongo record)</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"float64\"</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">5</span>                 <span class=\"c1\"># Monary field types (see below)</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">array</span> <span class=\"ow\">in</span> <span class=\"n\">arrays</span><span class=\"p\">:</span>                    <span class=\"c1\"># prove that we did something...</span>\n    <span class=\"nb\">print</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">)</span>\n</pre>\n<p>Monary is able to perform the same query in 4 seconds flat, for a rate of about\n4 million values per second (20 times faster!)  Here\u2019s a quick summary of how\nthis Monary query stacks up against PyMongo:</p>\n<ul>\n<li>PyMongo Insert \u2013 EC2: 102 s \u2013 Mac: 76 s</li>\n<li>PyMongo Query \u2013 EC2: 85 s \u2013 Mac: 88 s</li>\n<li>Monary Query \u2013 EC2: 5.4 s \u2013 Mac: 3.8 s</li>\n</ul>\n<p>Of course, this test has created some fairly ideal circumstances:  It\u2019s\nquerying for every record in the collection, the records contain only the\nqueried data (plus ObjectIDs), and the database is running locally.  The\nperformance may degrade if we used a remote server, if the records were larger,\nor if queried for a only subset of the records (requiring either that more\nrecords be scanned, or that an index be used).</p>\n<p>Monary now knows about the following types:</p>\n<ul>\n<li>id (Mongo\u2019s 12-byte ObjectId)</li>\n<li>int8</li>\n<li>int16</li>\n<li>int32</li>\n<li>int64</li>\n<li>float32</li>\n<li>float64</li>\n<li>bool</li>\n<li>date (stored as int64, milliseconds since epoch)</li>\n</ul>\n<p>Monary\u2019s source code is available on bitbucket.  It includes a copy of the\nMongo C driver, and requires compilation and installation, which can be done\nvia the included \u201csetup.py\u201d file.  (The installation script works, but is in a\nsomewhat rough state.  Any help from a distutils guru would be greatly\nappreciated!)  To run Monary from Python, you will need to have the pymongo and\nnumpy packages installed.</p>\n<p>Monary has been slowly gaining functionality (including the recent additions of\nmore numeric types and the date type). Here are some planned future\nimprovements:</p>\n<ul>\n<li><p>Support for string / binary types</p>\n<p>(I hope to develop Monary to support some reasonable mapping of most BSON\ntypes onto array storage.)</p>\n</li>\n<li><p>Support for fetching nested fields (e.g. \u201cx.y\u201d)</p>\n</li>\n<li><p>Remove dependencies on PyMongo and NumPy (possibly)</p>\n<p>(Currently these must be installed in order to use Monary.)</p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2280777, "releases": {"0.4.0": [], "0.4.0.post1": [{"comment_text": "", "digests": {"md5": "929122d8050e5f711d8235b91a849a35", "sha256": "576db023c8cff19952c04460d1bca59f481d39b966272d281209fa1ba8af8d91"}, "downloads": -1, "filename": "Monary-0.4.0.post1.tar.gz", "has_sig": false, "md5_digest": "929122d8050e5f711d8235b91a849a35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33770, "upload_time": "2015-04-30T21:52:49", "upload_time_iso_8601": "2015-04-30T21:52:49.823387Z", "url": "https://files.pythonhosted.org/packages/42/d7/dcd17c167f21c5f1890d8039ea74c9a6fb16a1656ee6d6a07ae409cd0f86/Monary-0.4.0.post1.tar.gz", "yanked": false}], "0.4.0.post2": [{"comment_text": "", "digests": {"md5": "c9b145bb9c7b2aa4efaac7d851a074e1", "sha256": "4df96c5f84968694575cff3c9d30818ce02665449c28039d2596c141303a5574"}, "downloads": -1, "filename": "Monary-0.4.0.post2.tar.gz", "has_sig": false, "md5_digest": "c9b145bb9c7b2aa4efaac7d851a074e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33777, "upload_time": "2015-04-30T22:19:44", "upload_time_iso_8601": "2015-04-30T22:19:44.704836Z", "url": "https://files.pythonhosted.org/packages/88/8c/ba8cb641dfc500e511356ddc0861d3e1bc1ee24698bffd4306b7d03b5d9a/Monary-0.4.0.post2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "0baf204f6bea7f0406d47f1bf57b03bd", "sha256": "a69a3f9ddd493958432b0a57f37d6efed757bb0493ecc8d6c271685cc6505268"}, "downloads": -1, "filename": "Monary-0.5.0.tar.gz", "has_sig": false, "md5_digest": "0baf204f6bea7f0406d47f1bf57b03bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33797, "upload_time": "2016-08-14T16:15:23", "upload_time_iso_8601": "2016-08-14T16:15:23.990558Z", "url": "https://files.pythonhosted.org/packages/35/b6/230a3ec114337e324f372106b83a88efe2043f9adda551292ff57cc1262d/Monary-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0baf204f6bea7f0406d47f1bf57b03bd", "sha256": "a69a3f9ddd493958432b0a57f37d6efed757bb0493ecc8d6c271685cc6505268"}, "downloads": -1, "filename": "Monary-0.5.0.tar.gz", "has_sig": false, "md5_digest": "0baf204f6bea7f0406d47f1bf57b03bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33797, "upload_time": "2016-08-14T16:15:23", "upload_time_iso_8601": "2016-08-14T16:15:23.990558Z", "url": "https://files.pythonhosted.org/packages/35/b6/230a3ec114337e324f372106b83a88efe2043f9adda551292ff57cc1262d/Monary-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:27 2020"}