{"info": {"author": "Foreseeti AB", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3 :: Only", "Topic :: Security", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# securiCAD Vanguard SDK\n> Automated threat modeling and attack simulations in your CI/CD pipeline\n\nA Python SDK for [foreseeti's securiCAD Vanguard](https://foreseeti.com/securicad-vanguard-for-aws/). Sign up for an account at [AWS Marketplace](https://aws.amazon.com/marketplace/pp/B08424ZMPS).\n\n## Getting started\n\n### Sign up for a securiCAD Vanguard account\nGo to [AWS Marketplace](https://aws.amazon.com/marketplace/pp/B08424ZMPS) and sign up to securiCAD Vanguard and verify your account.\n\n### Download and setup the SDK\nInstall `securicad-vanguard` with pip:\n```shell\npip install securicad-vanguard\n```\n\n### Get the required AWS credentials\nThe securiCAD Vanguard SDK requires AWS credentials to be able to fetch data from AWS and run the simulations on your environment. The easiest way is to create an IAM User with the required permissions and generate access keys for that IAM User:\n* [Create an IAM user](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html) with this [IAM policy](https://vanguard.securicad.com/iam_policy.json)\n* [Generate access keys](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html) for the IAM user\n\nCross-account role access and local model generation will be available soon.\n\n### Run your first simulation\nThe following snippet runs a simulation on an AWS environment where the high value asset is an EC2 instance with id `i-1a2b3c4d5e6f7` and prints the results. Please note, never store your credentials in source code, this is just an example.\n```python\nimport json\nfrom securicad import vanguard\n\n# Your vanguard credentials\nemail = \"your vanguard email\"\npassword = \"your vanguard password\"\n\n# AWS credentials for IAM user\naccess_key = \"aws access key id\"\nsecret_key = \"aws secret key\"\nregion = \"your aws region\" # e.g., us-east-1\n\n# Create an authenticated vanguard client\nclient = vanguard.client(username=email, password=password)\n\n# Generate a model from your AWS environment\nmodel = client.get_model(access_key=access_key, secret_key=secret_key, region=region)\n\n# Set high value assets\nmodel.set_high_value_assets(instances=[\"i-1a2b3c4d5e6f7\"])\n\n# Simulate and print the results\nresults = client.simulate(model, profile=vanguard.Profile.CYBERCRIMINAL)\nprint(json.dumps(results, indent=2))\n\n```\n\nIf you wish to run securiCAD Vanguard with a local file, replace the `client.get_model()` call in the above example with:\n\n```python\nwith open('data.json', mode='r', encoding='utf-8') as json_file:\n    data = json.load(json_file)\nmodel = client.get_model(data=data)\n\n```\n\nThe results will be returned as a `dict` with your high value asset identifiers as keys and sorted under object type. For example:\n```json\n{\n    \"EC2Instance\": {\n        \"i-1a2b3c4d5e6f7\": {\n            \"attackstep\": \"HighPrivilegeAccess\",\n            \"id\": \"i-1a2b3c4d5e6f7\",\n            \"metaconcept\": \"EC2Instance\",\n            \"name\": \"web-server\",\n            \"probability\": 0.65,\n            \"ttc\": 42\n        }\n    }\n}\n```\nCheck out `example.py` for a more detailed example.\n\n## High value assets\nThe securiCAD Vanguard SDK features a set of predefined parameters for settings high value assets for certain AWS services as well as a more comprehensive option.\n### Predefined parameters\nPredefined parameters can be used to set high value assets in a model with the function `model.set_high_value_assets()`\n- **EC2 instances**\nUse the `instances` parameter to set a list of EC2 instance ids as high value assets. For example: `instances=[\"i-1a2b3c4d5e6f\", \"i-9i8u7y6t5r4e\"]`\n- **S3 buckets**\nUse the `buckets` parameter to set a list of S3 bucket names as high value assets. For example: `buckets=[\"vanguard/bucket1\", \"vanguard/bucket2\"]`\n- **RDS instances**\nUse the `dbinstances` parameter to set a list of RDS db instance identifers as high value assets. For example: `dbinstances=[\"aurora-db-instance\"]`\n- **DynamoDB tables**\nUse the `dynamodb_tables` parameter to set a list of dynamodb table names as high value assets. For example: `dynamodb_tables=[\"vanguardTable\"]`\n\n### Advanced\nAny object and attack step in the model can be set as a high value asset but it requires knowledge about the underlying model and concepts. Use `model.set_high_value_assets()` with the `high_value_assets` parameter and set your high value assets by specifying the object type `metaconcept`, object identifier `id` and target `attackstep` as a list of dicts:\n```python\n[\n    {\n        \"metaconcept\": \"EC2Instance\",\n        \"attackstep\": \"HighPrivilegeAccess\",\n         \"id\": {\"type\": \"tag\", \"key\": \"owner\", \"value\": \"erik\"}\n    },    \n    {\n        \"metaconcept\": \"S3Bucket\",\n        \"attackstep\": \"AuthenticatedWrite\",\n        \"id\": {\"type\": \"arn\", \"value\": \"arn:aws:s3:::my_corporate_bucket/\"}  \n    },\n    {\n        \"metaconcept\": \"DynamoDBTable\",\n        \"attackstep\": \"AuthenticatedRead\",\n        \"id\": {\"type\": \"name\", \"value\": \"VanguardTable\"}\n    }\n]\n```\n`id` is used to match objects in the model with the high value assets. The supported `type` are currently `name`, `arn` and `tag`.\n\n## Examples\nBelow are a few examples of how you can use `boto3` to automatically collect name or ids for your high value assets.\n\n### Get EC2 instance ids\nGet all EC2 instance ids where the instance is running and has the tag `owner` with value `erik`.\n\n```python\nimport boto3\n\nsession = boto3.Session()\nec2 = session.resource('ec2')\n\n# List all running EC2 instances with the owner-tag erik\ninstances = ec2.instances.filter(\n    Filters=[\n        {\"Name\": \"tag:owner\", \"Values\": [\"erik\"]},\n        {'Name': 'instance-state-name', 'Values': ['running']}\n    ]\n)\n# Get the instance-id of each filtered instance\ninstance_ids = [instance.id for instance in instances]\n\n```\n\n### Get RDS instance identifiers\nGet all RDS instances and their identifiers.\n\n```python\nimport boto3\n\nsession = boto3.Session()\nrds = session.client('rds')\n\n# Get all RDS instance identifers with a paginator\ndbinstances = []\npaginator = rds.get_paginator('describe_db_instances').paginate()\nfor page in paginator:\n    for db in page.get('DBInstances'):\n        dbinstances.append(db['DBInstanceIdentifier'])\n\n```\n\n### Get S3 buckets\nGet all S3 buckets where the bucket name contains the string `erik`.\n\n```python\nimport boto3\n\nsession = boto3.Session()\ns3 = session.resource('s3')\n\n# Get all s3 buckets where `erik` is in the bucket name\nbuckets = []\nfor bucket in s3.buckets.all():\n    if 'erik' in bucket.name:\n        buckets.append(bucket.name)\n\n```\n\n## Links\n\nAdditional information can be found at:\n\n- About [foreseeti](https://foreseeti.com/)\n- securiCAD Vanguard on [AWS Marketplace](https://aws.amazon.com/marketplace/pp/foreseeti-securiCAD-Vanguard/B08424ZMPS)\n- Related projects:\n  - [https://mal-lang.org/](https://mal-lang.org/)\n\n## Licensing\n\n\"The code in this project is licensed under Apache-2.0.\"\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/foreseeti/securicad-vanguard-sdk", "keywords": "securicad vanguard threat modeling", "license": "The Apache Software License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "securicad-vanguard", "package_url": "https://pypi.org/project/securicad-vanguard/", "platform": "", "project_url": "https://pypi.org/project/securicad-vanguard/", "project_urls": {"Homepage": "https://github.com/foreseeti/securicad-vanguard-sdk"}, "release_url": "https://pypi.org/project/securicad-vanguard/0.0.2/", "requires_dist": ["boto3", "botocore", "pycognito", "requests"], "requires_python": ">=3.6", "summary": "A Python SDK for foreseeti's securiCAD Vanguard", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>securiCAD Vanguard SDK</h1>\n<blockquote>\n<p>Automated threat modeling and attack simulations in your CI/CD pipeline</p>\n</blockquote>\n<p>A Python SDK for <a href=\"https://foreseeti.com/securicad-vanguard-for-aws/\" rel=\"nofollow\">foreseeti's securiCAD Vanguard</a>. Sign up for an account at <a href=\"https://aws.amazon.com/marketplace/pp/B08424ZMPS\" rel=\"nofollow\">AWS Marketplace</a>.</p>\n<h2>Getting started</h2>\n<h3>Sign up for a securiCAD Vanguard account</h3>\n<p>Go to <a href=\"https://aws.amazon.com/marketplace/pp/B08424ZMPS\" rel=\"nofollow\">AWS Marketplace</a> and sign up to securiCAD Vanguard and verify your account.</p>\n<h3>Download and setup the SDK</h3>\n<p>Install <code>securicad-vanguard</code> with pip:</p>\n<pre>pip install securicad-vanguard\n</pre>\n<h3>Get the required AWS credentials</h3>\n<p>The securiCAD Vanguard SDK requires AWS credentials to be able to fetch data from AWS and run the simulations on your environment. The easiest way is to create an IAM User with the required permissions and generate access keys for that IAM User:</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html\" rel=\"nofollow\">Create an IAM user</a> with this <a href=\"https://vanguard.securicad.com/iam_policy.json\" rel=\"nofollow\">IAM policy</a></li>\n<li><a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html\" rel=\"nofollow\">Generate access keys</a> for the IAM user</li>\n</ul>\n<p>Cross-account role access and local model generation will be available soon.</p>\n<h3>Run your first simulation</h3>\n<p>The following snippet runs a simulation on an AWS environment where the high value asset is an EC2 instance with id <code>i-1a2b3c4d5e6f7</code> and prints the results. Please note, never store your credentials in source code, this is just an example.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">securicad</span> <span class=\"kn\">import</span> <span class=\"n\">vanguard</span>\n\n<span class=\"c1\"># Your vanguard credentials</span>\n<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s2\">\"your vanguard email\"</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s2\">\"your vanguard password\"</span>\n\n<span class=\"c1\"># AWS credentials for IAM user</span>\n<span class=\"n\">access_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"aws access key id\"</span>\n<span class=\"n\">secret_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"aws secret key\"</span>\n<span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"s2\">\"your aws region\"</span> <span class=\"c1\"># e.g., us-east-1</span>\n\n<span class=\"c1\"># Create an authenticated vanguard client</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">vanguard</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate a model from your AWS environment</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"n\">access_key</span><span class=\"o\">=</span><span class=\"n\">access_key</span><span class=\"p\">,</span> <span class=\"n\">secret_key</span><span class=\"o\">=</span><span class=\"n\">secret_key</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"n\">region</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set high value assets</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">set_high_value_assets</span><span class=\"p\">(</span><span class=\"n\">instances</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"i-1a2b3c4d5e6f7\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Simulate and print the results</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">simulate</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">vanguard</span><span class=\"o\">.</span><span class=\"n\">Profile</span><span class=\"o\">.</span><span class=\"n\">CYBERCRIMINAL</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</pre>\n<p>If you wish to run securiCAD Vanguard with a local file, replace the <code>client.get_model()</code> call in the above example with:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'data.json'</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">json_file</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"p\">)</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>The results will be returned as a <code>dict</code> with your high value asset identifiers as keys and sorted under object type. For example:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"EC2Instance\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"i-1a2b3c4d5e6f7\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"attackstep\"</span><span class=\"p\">:</span> <span class=\"s2\">\"HighPrivilegeAccess\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"i-1a2b3c4d5e6f7\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"metaconcept\"</span><span class=\"p\">:</span> <span class=\"s2\">\"EC2Instance\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"web-server\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"probability\"</span><span class=\"p\">:</span> <span class=\"mf\">0.65</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"ttc\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Check out <code>example.py</code> for a more detailed example.</p>\n<h2>High value assets</h2>\n<p>The securiCAD Vanguard SDK features a set of predefined parameters for settings high value assets for certain AWS services as well as a more comprehensive option.</p>\n<h3>Predefined parameters</h3>\n<p>Predefined parameters can be used to set high value assets in a model with the function <code>model.set_high_value_assets()</code></p>\n<ul>\n<li><strong>EC2 instances</strong>\nUse the <code>instances</code> parameter to set a list of EC2 instance ids as high value assets. For example: <code>instances=[\"i-1a2b3c4d5e6f\", \"i-9i8u7y6t5r4e\"]</code></li>\n<li><strong>S3 buckets</strong>\nUse the <code>buckets</code> parameter to set a list of S3 bucket names as high value assets. For example: <code>buckets=[\"vanguard/bucket1\", \"vanguard/bucket2\"]</code></li>\n<li><strong>RDS instances</strong>\nUse the <code>dbinstances</code> parameter to set a list of RDS db instance identifers as high value assets. For example: <code>dbinstances=[\"aurora-db-instance\"]</code></li>\n<li><strong>DynamoDB tables</strong>\nUse the <code>dynamodb_tables</code> parameter to set a list of dynamodb table names as high value assets. For example: <code>dynamodb_tables=[\"vanguardTable\"]</code></li>\n</ul>\n<h3>Advanced</h3>\n<p>Any object and attack step in the model can be set as a high value asset but it requires knowledge about the underlying model and concepts. Use <code>model.set_high_value_assets()</code> with the <code>high_value_assets</code> parameter and set your high value assets by specifying the object type <code>metaconcept</code>, object identifier <code>id</code> and target <code>attackstep</code> as a list of dicts:</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"metaconcept\"</span><span class=\"p\">:</span> <span class=\"s2\">\"EC2Instance\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"attackstep\"</span><span class=\"p\">:</span> <span class=\"s2\">\"HighPrivilegeAccess\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"tag\"</span><span class=\"p\">,</span> <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"owner\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"erik\"</span><span class=\"p\">}</span>\n    <span class=\"p\">},</span>    \n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"metaconcept\"</span><span class=\"p\">:</span> <span class=\"s2\">\"S3Bucket\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"attackstep\"</span><span class=\"p\">:</span> <span class=\"s2\">\"AuthenticatedWrite\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"arn\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"arn:aws:s3:::my_corporate_bucket/\"</span><span class=\"p\">}</span>  \n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"metaconcept\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DynamoDBTable\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"attackstep\"</span><span class=\"p\">:</span> <span class=\"s2\">\"AuthenticatedRead\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"VanguardTable\"</span><span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p><code>id</code> is used to match objects in the model with the high value assets. The supported <code>type</code> are currently <code>name</code>, <code>arn</code> and <code>tag</code>.</p>\n<h2>Examples</h2>\n<p>Below are a few examples of how you can use <code>boto3</code> to automatically collect name or ids for your high value assets.</p>\n<h3>Get EC2 instance ids</h3>\n<p>Get all EC2 instance ids where the instance is running and has the tag <code>owner</code> with value <code>erik</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span>\n<span class=\"n\">ec2</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s1\">'ec2'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># List all running EC2 instances with the owner-tag erik</span>\n<span class=\"n\">instances</span> <span class=\"o\">=</span> <span class=\"n\">ec2</span><span class=\"o\">.</span><span class=\"n\">instances</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n    <span class=\"n\">Filters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"Name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"tag:owner\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Values\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"erik\"</span><span class=\"p\">]},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'Name'</span><span class=\"p\">:</span> <span class=\"s1\">'instance-state-name'</span><span class=\"p\">,</span> <span class=\"s1\">'Values'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'running'</span><span class=\"p\">]}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Get the instance-id of each filtered instance</span>\n<span class=\"n\">instance_ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"k\">for</span> <span class=\"n\">instance</span> <span class=\"ow\">in</span> <span class=\"n\">instances</span><span class=\"p\">]</span>\n</pre>\n<h3>Get RDS instance identifiers</h3>\n<p>Get all RDS instances and their identifiers.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span>\n<span class=\"n\">rds</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s1\">'rds'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get all RDS instance identifers with a paginator</span>\n<span class=\"n\">dbinstances</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">paginator</span> <span class=\"o\">=</span> <span class=\"n\">rds</span><span class=\"o\">.</span><span class=\"n\">get_paginator</span><span class=\"p\">(</span><span class=\"s1\">'describe_db_instances'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">paginate</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">page</span> <span class=\"ow\">in</span> <span class=\"n\">paginator</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">db</span> <span class=\"ow\">in</span> <span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'DBInstances'</span><span class=\"p\">):</span>\n        <span class=\"n\">dbinstances</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">[</span><span class=\"s1\">'DBInstanceIdentifier'</span><span class=\"p\">])</span>\n</pre>\n<h3>Get S3 buckets</h3>\n<p>Get all S3 buckets where the bucket name contains the string <code>erik</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span>\n<span class=\"n\">s3</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s1\">'s3'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get all s3 buckets where `erik` is in the bucket name</span>\n<span class=\"n\">buckets</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">bucket</span> <span class=\"ow\">in</span> <span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"n\">buckets</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"s1\">'erik'</span> <span class=\"ow\">in</span> <span class=\"n\">bucket</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n        <span class=\"n\">buckets</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<h2>Links</h2>\n<p>Additional information can be found at:</p>\n<ul>\n<li>About <a href=\"https://foreseeti.com/\" rel=\"nofollow\">foreseeti</a></li>\n<li>securiCAD Vanguard on <a href=\"https://aws.amazon.com/marketplace/pp/foreseeti-securiCAD-Vanguard/B08424ZMPS\" rel=\"nofollow\">AWS Marketplace</a></li>\n<li>Related projects:\n<ul>\n<li><a href=\"https://mal-lang.org/\" rel=\"nofollow\">https://mal-lang.org/</a></li>\n</ul>\n</li>\n</ul>\n<h2>Licensing</h2>\n<p>\"The code in this project is licensed under Apache-2.0.\"</p>\n\n          </div>"}, "last_serial": 7060629, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3c45e35e0e03361cd910a468bdf0a113", "sha256": "476b96b50234f0b256bde36770afce8bdf590fab665d264383e9be7149c29246"}, "downloads": -1, "filename": "securicad_vanguard-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3c45e35e0e03361cd910a468bdf0a113", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11758, "upload_time": "2020-03-19T14:25:37", "upload_time_iso_8601": "2020-03-19T14:25:37.867439Z", "url": "https://files.pythonhosted.org/packages/ca/95/58229ab673dce0663e90054be0a4761c6ddcc81e4b2e23815abe11a6b89f/securicad_vanguard-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "db95d0e64c0c97c14fe2fdfd184c0318", "sha256": "6f91aba179715517844ec176259f3423f4ce25c7699a24f46f4034a5270f058f"}, "downloads": -1, "filename": "securicad_vanguard-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "db95d0e64c0c97c14fe2fdfd184c0318", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12709, "upload_time": "2020-04-20T14:39:41", "upload_time_iso_8601": "2020-04-20T14:39:41.195543Z", "url": "https://files.pythonhosted.org/packages/79/3b/9adabfb0b6cbf8cd668b12a8d87794d203752fa5f7509d45b9e64e424705/securicad_vanguard-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54f50294f980026c5f8f46ba84509f52", "sha256": "86a95fa0e2367599503ef2b594f8815810b462f6fed6772a92708b22321840ad"}, "downloads": -1, "filename": "securicad-vanguard-0.0.2.tar.gz", "has_sig": false, "md5_digest": "54f50294f980026c5f8f46ba84509f52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12815, "upload_time": "2020-04-20T14:39:42", "upload_time_iso_8601": "2020-04-20T14:39:42.416740Z", "url": "https://files.pythonhosted.org/packages/56/8c/70b2fc82ecee2dba711a44fec0ed53aff654dbd336168d44fa6912c0a305/securicad-vanguard-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db95d0e64c0c97c14fe2fdfd184c0318", "sha256": "6f91aba179715517844ec176259f3423f4ce25c7699a24f46f4034a5270f058f"}, "downloads": -1, "filename": "securicad_vanguard-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "db95d0e64c0c97c14fe2fdfd184c0318", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12709, "upload_time": "2020-04-20T14:39:41", "upload_time_iso_8601": "2020-04-20T14:39:41.195543Z", "url": "https://files.pythonhosted.org/packages/79/3b/9adabfb0b6cbf8cd668b12a8d87794d203752fa5f7509d45b9e64e424705/securicad_vanguard-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54f50294f980026c5f8f46ba84509f52", "sha256": "86a95fa0e2367599503ef2b594f8815810b462f6fed6772a92708b22321840ad"}, "downloads": -1, "filename": "securicad-vanguard-0.0.2.tar.gz", "has_sig": false, "md5_digest": "54f50294f980026c5f8f46ba84509f52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12815, "upload_time": "2020-04-20T14:39:42", "upload_time_iso_8601": "2020-04-20T14:39:42.416740Z", "url": "https://files.pythonhosted.org/packages/56/8c/70b2fc82ecee2dba711a44fec0ed53aff654dbd336168d44fa6912c0a305/securicad-vanguard-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:54 2020"}