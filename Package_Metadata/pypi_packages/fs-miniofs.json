{"info": {"author": "Max Klein", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: System :: Filesystems"], "description": "MINIOFS\n=======\n\nMINIOFS is a `PyFilesystem <https://www.pyfilesystem.org/>`__ interface to\nAmazon S3 cloud storage.\n\nAs a PyFilesystem concrete class,\n`MINIOFS <http://fs-miniofs.readthedocs.io/en/latest/>`__ allows you to work\nwith S3 in the same way as any other supported filesystem.\n\nInstalling\n----------\n\nYou can install MINIOFS from pip as follows:\n\n::\n\n    pip install fs-miniofs\n\nOpening a MINIOFS\n-----------------\n\nOpen an MINIOFS by explicitly using the constructor:\n\n.. code:: python\n\n    from fs_miniofs import MINIOFS\n    miniofs = MINIOFS('mybucket')\n\nOr with a FS URL:\n\n.. code:: python\n\n      from fs import open_fs\n      miniofs = open_fs('minio://mybucket')\n\nDownloading Files\n-----------------\n\nTo *download* files from an S3 bucket, open a file on the S3 filesystem\nfor reading, then write the data to a file on the local filesystem.\nHere's an example that copies a file ``example.mov`` from S3 to your HD:\n\n.. code:: python\n\n    from fs.tools import copy_file_data\n    with miniofs.open('example.mov', 'rb') as remote_file:\n        with open('example.mov', 'wb') as local_file:\n            copy_file_data(remote_file, local_file)\n\nAlthough it is preferable to use the higher-level functionality in the\n``fs.copy`` module. Here's an example:\n\n.. code:: python\n\n    from fs.copy import copy_file\n    copy_file(miniofs, 'example.mov', './', 'example.mov')\n\nUploading Files\n---------------\n\nYou can *upload* files in the same way. Simply copy a file from a source\nfilesystem to the S3 filesystem. See `Moving and\nCopying <https://docs.pyfilesystem.org/en/latest/guide.html#moving-and-copying>`__\nfor more information.\n\nExtraArgs\n---------\n\nS3 objects have additional properties, beyond a traditional filesystem.\nThese options can be set using the ``upload_args`` and ``download_args``\nproperties. which are handed to upload and download methods, as\nappropriate, for the lifetime of the filesystem instance.\n\nFor example, to set the ``cache-control`` header of all objects uploaded\nto a bucket:\n\n.. code:: python\n\n    import fs, fs.mirror\n    miniofs = MINIOFS('example', upload_args={\"CacheControl\": \"max-age=2592000\", \"ACL\": \"public-read\"})\n    fs.mirror.mirror('/path/to/mirror', miniofs)\n\nsee `the Boto3\ndocs <https://boto3.readthedocs.io/en/latest/reference/customizations/s3.html#boto3.s3.transfer.S3Transfer.ALLOWED_UPLOAD_ARGS>`__\nfor more information.\n\n``acl`` and ``cache_control`` are exposed explicitly for convenience,\nand can be used in URLs. It is important to URL-Escape the\n``cache_control`` value in a URL, as it may contain special characters.\n\n.. code:: python\n\n    import fs, fs.mirror\n    with open fs.open_fs('s3://example?acl=public-read&cache_control=max-age%3D2592000%2Cpublic') as miniofs\n        fs.mirror.mirror('/path/to/mirror', miniofs)\n\nS3 URLs\n-------\n\nYou can get a public URL to a file on a S3 bucket as follows:\n\n.. code:: python\n\n    movie_url = miniofs.geturl('example.mov')\n\nDocumentation\n-------------\n\n-  `PyFilesystem Wiki <https://www.pyfilesystem.org>`__\n-  `MINIOFS Reference <http://fs-miniofs.readthedocs.io/en/latest/>`__\n-  `PyFilesystem\n   Reference <https://docs.pyfilesystem.org/en/latest/reference/base.html>`__\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/telamonian/miniofs", "keywords": "pyfilesystem,MinIO,s3", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fs-miniofs", "package_url": "https://pypi.org/project/fs-miniofs/", "platform": "any", "project_url": "https://pypi.org/project/fs-miniofs/", "project_urls": {"Homepage": "https://github.com/telamonian/miniofs"}, "release_url": "https://pypi.org/project/fs-miniofs/1.1.2/", "requires_dist": ["boto3 (~=1.9)", "fs (~=2.4)", "six (~=1.10)"], "requires_python": "", "summary": "MinIO S3 filesystem for PyFilesystem2", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>MINIOFS is a <a href=\"https://www.pyfilesystem.org/\" rel=\"nofollow\">PyFilesystem</a> interface to\nAmazon S3 cloud storage.</p>\n<p>As a PyFilesystem concrete class,\n<a href=\"http://fs-miniofs.readthedocs.io/en/latest/\" rel=\"nofollow\">MINIOFS</a> allows you to work\nwith S3 in the same way as any other supported filesystem.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>You can install MINIOFS from pip as follows:</p>\n<pre>pip install fs-miniofs\n</pre>\n</div>\n<div id=\"opening-a-miniofs\">\n<h2>Opening a MINIOFS</h2>\n<p>Open an MINIOFS by explicitly using the constructor:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fs_miniofs</span> <span class=\"kn\">import</span> <span class=\"n\">MINIOFS</span>\n<span class=\"n\">miniofs</span> <span class=\"o\">=</span> <span class=\"n\">MINIOFS</span><span class=\"p\">(</span><span class=\"s1\">'mybucket'</span><span class=\"p\">)</span>\n</pre>\n<p>Or with a FS URL:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fs</span> <span class=\"kn\">import</span> <span class=\"n\">open_fs</span>\n<span class=\"n\">miniofs</span> <span class=\"o\">=</span> <span class=\"n\">open_fs</span><span class=\"p\">(</span><span class=\"s1\">'minio://mybucket'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"downloading-files\">\n<h2>Downloading Files</h2>\n<p>To <em>download</em> files from an S3 bucket, open a file on the S3 filesystem\nfor reading, then write the data to a file on the local filesystem.\nHere\u2019s an example that copies a file <tt>example.mov</tt> from S3 to your HD:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fs.tools</span> <span class=\"kn\">import</span> <span class=\"n\">copy_file_data</span>\n<span class=\"k\">with</span> <span class=\"n\">miniofs</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'example.mov'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">remote_file</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'example.mov'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">local_file</span><span class=\"p\">:</span>\n        <span class=\"n\">copy_file_data</span><span class=\"p\">(</span><span class=\"n\">remote_file</span><span class=\"p\">,</span> <span class=\"n\">local_file</span><span class=\"p\">)</span>\n</pre>\n<p>Although it is preferable to use the higher-level functionality in the\n<tt>fs.copy</tt> module. Here\u2019s an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fs.copy</span> <span class=\"kn\">import</span> <span class=\"n\">copy_file</span>\n<span class=\"n\">copy_file</span><span class=\"p\">(</span><span class=\"n\">miniofs</span><span class=\"p\">,</span> <span class=\"s1\">'example.mov'</span><span class=\"p\">,</span> <span class=\"s1\">'./'</span><span class=\"p\">,</span> <span class=\"s1\">'example.mov'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"uploading-files\">\n<h2>Uploading Files</h2>\n<p>You can <em>upload</em> files in the same way. Simply copy a file from a source\nfilesystem to the S3 filesystem. See <a href=\"https://docs.pyfilesystem.org/en/latest/guide.html#moving-and-copying\" rel=\"nofollow\">Moving and\nCopying</a>\nfor more information.</p>\n</div>\n<div id=\"extraargs\">\n<h2>ExtraArgs</h2>\n<p>S3 objects have additional properties, beyond a traditional filesystem.\nThese options can be set using the <tt>upload_args</tt> and <tt>download_args</tt>\nproperties. which are handed to upload and download methods, as\nappropriate, for the lifetime of the filesystem instance.</p>\n<p>For example, to set the <tt><span class=\"pre\">cache-control</span></tt> header of all objects uploaded\nto a bucket:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fs</span><span class=\"o\">,</span> <span class=\"nn\">fs.mirror</span>\n<span class=\"n\">miniofs</span> <span class=\"o\">=</span> <span class=\"n\">MINIOFS</span><span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"n\">upload_args</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"CacheControl\"</span><span class=\"p\">:</span> <span class=\"s2\">\"max-age=2592000\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ACL\"</span><span class=\"p\">:</span> <span class=\"s2\">\"public-read\"</span><span class=\"p\">})</span>\n<span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">mirror</span><span class=\"o\">.</span><span class=\"n\">mirror</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/mirror'</span><span class=\"p\">,</span> <span class=\"n\">miniofs</span><span class=\"p\">)</span>\n</pre>\n<p>see <a href=\"https://boto3.readthedocs.io/en/latest/reference/customizations/s3.html#boto3.s3.transfer.S3Transfer.ALLOWED_UPLOAD_ARGS\" rel=\"nofollow\">the Boto3\ndocs</a>\nfor more information.</p>\n<p><tt>acl</tt> and <tt>cache_control</tt> are exposed explicitly for convenience,\nand can be used in URLs. It is important to URL-Escape the\n<tt>cache_control</tt> value in a URL, as it may contain special characters.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fs</span><span class=\"o\">,</span> <span class=\"nn\">fs.mirror</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span> <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">open_fs</span><span class=\"p\">(</span><span class=\"s1\">'s3://example?acl=public-read&amp;cache_control=max-age%3D2592000%2Cpublic'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">miniofs</span>\n    <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">mirror</span><span class=\"o\">.</span><span class=\"n\">mirror</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/mirror'</span><span class=\"p\">,</span> <span class=\"n\">miniofs</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"s3-urls\">\n<h2>S3 URLs</h2>\n<p>You can get a public URL to a file on a S3 bucket as follows:</p>\n<pre><span class=\"n\">movie_url</span> <span class=\"o\">=</span> <span class=\"n\">miniofs</span><span class=\"o\">.</span><span class=\"n\">geturl</span><span class=\"p\">(</span><span class=\"s1\">'example.mov'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<ul>\n<li><a href=\"https://www.pyfilesystem.org\" rel=\"nofollow\">PyFilesystem Wiki</a></li>\n<li><a href=\"http://fs-miniofs.readthedocs.io/en/latest/\" rel=\"nofollow\">MINIOFS Reference</a></li>\n<li><a href=\"https://docs.pyfilesystem.org/en/latest/reference/base.html\" rel=\"nofollow\">PyFilesystem\nReference</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6846589, "releases": {"1.1.1": [{"comment_text": "", "digests": {"md5": "2057e97334f7b6d3338992bcf22a3e1c", "sha256": "96eca29e1be10a2468faea321a60d86b5c0f933282c0cbb28154b0a988c5909c"}, "downloads": -1, "filename": "fs_miniofs-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2057e97334f7b6d3338992bcf22a3e1c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10591, "upload_time": "2020-03-19T22:47:01", "upload_time_iso_8601": "2020-03-19T22:47:01.235290Z", "url": "https://files.pythonhosted.org/packages/89/6f/209db1577008e97b4c803872a5a83b36dae6239b450f74fa3d9f358a2028/fs_miniofs-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b794e82cef65698f1567189eb7606d1e", "sha256": "9718b7b9176aa960b165dd91ed38b1125b5bf6a905ef457e1d2a8127d70a62a8"}, "downloads": -1, "filename": "fs-miniofs-1.1.1.tar.gz", "has_sig": false, "md5_digest": "b794e82cef65698f1567189eb7606d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10383, "upload_time": "2020-03-19T22:47:03", "upload_time_iso_8601": "2020-03-19T22:47:03.782787Z", "url": "https://files.pythonhosted.org/packages/81/89/0c8fdac0ab78a1462d8d21b6eb870c80f1f9c395e113219adf9ab51895d9/fs-miniofs-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "2534fab3e4c95e3ece7ab208f113f1a7", "sha256": "3ceae023ad9cd67bf30517f6514ea95c543497c274e7966c385219431e180c9b"}, "downloads": -1, "filename": "fs_miniofs-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2534fab3e4c95e3ece7ab208f113f1a7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10631, "upload_time": "2020-03-19T22:55:26", "upload_time_iso_8601": "2020-03-19T22:55:26.229931Z", "url": "https://files.pythonhosted.org/packages/37/06/9801f6e13bd07f7c523784e9aa39ef4926d7fb9953ded36e1a3bf71cd7cc/fs_miniofs-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eba437b916736c1ec084c58cf8377003", "sha256": "726ed3ec950c62aae2e2de64f4aefcfc6835ee00e3a3e5678054aa552f77d465"}, "downloads": -1, "filename": "fs-miniofs-1.1.2.tar.gz", "has_sig": false, "md5_digest": "eba437b916736c1ec084c58cf8377003", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10425, "upload_time": "2020-03-19T22:55:27", "upload_time_iso_8601": "2020-03-19T22:55:27.766886Z", "url": "https://files.pythonhosted.org/packages/35/36/ae666c05f929876aed87cbac395e342fa3fc0a57c3115a2026fa5eaa40c2/fs-miniofs-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2534fab3e4c95e3ece7ab208f113f1a7", "sha256": "3ceae023ad9cd67bf30517f6514ea95c543497c274e7966c385219431e180c9b"}, "downloads": -1, "filename": "fs_miniofs-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2534fab3e4c95e3ece7ab208f113f1a7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10631, "upload_time": "2020-03-19T22:55:26", "upload_time_iso_8601": "2020-03-19T22:55:26.229931Z", "url": "https://files.pythonhosted.org/packages/37/06/9801f6e13bd07f7c523784e9aa39ef4926d7fb9953ded36e1a3bf71cd7cc/fs_miniofs-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eba437b916736c1ec084c58cf8377003", "sha256": "726ed3ec950c62aae2e2de64f4aefcfc6835ee00e3a3e5678054aa552f77d465"}, "downloads": -1, "filename": "fs-miniofs-1.1.2.tar.gz", "has_sig": false, "md5_digest": "eba437b916736c1ec084c58cf8377003", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10425, "upload_time": "2020-03-19T22:55:27", "upload_time_iso_8601": "2020-03-19T22:55:27.766886Z", "url": "https://files.pythonhosted.org/packages/35/36/ae666c05f929876aed87cbac395e342fa3fc0a57c3115a2026fa5eaa40c2/fs-miniofs-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:04 2020"}