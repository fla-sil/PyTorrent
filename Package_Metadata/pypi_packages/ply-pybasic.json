{"info": {"author": "Hou Rui", "author_email": "13244639785@163.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python :: 3", "Topic :: Software Development :: Interpreters"], "description": "# pybasic\n\nA structured BASIC interpreter written in Python.\n\n```plain\n\nusage: pybasic.py [-h] [-a] [-s AST_PATH] [program_name]\n\nExecute pybasic programs, or start an REPL session.\n\npositional arguments:\n\n  program_name          The path of the source program to execute. If not\n                        specified, an REPL session will be started.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a, --ast             Execute a binary abstract syntax tree file rather than\n                        a source program. This will be ignored in REPL mode.\n  -s AST_PATH, --save AST_PATH\n                        Save the binary abstract syntax tree of the source\n                        program to the given path. The source program will not\n                        be executed. This will be ignored in REPL mode.\n```\n\n#### expressions\n\nSupported expressions:\n\n- `<expression>`: Math expressions. Support operators: `+`, `-`, `*`,\n`/`, `\\`(exact division), `MOD`\n- `<rel_expression>`: Logic expressions. Support operators: `AND`,\n`OR`, `NOT`, `=`(equals to), `<>`\n\nPlease notice `=` in `<rel_expression>` is different from `=` in assignment statement.\n\nLiteral values and function calls are also treated as `<expression>`. For example:\n\n```basic\n123                ' 123\n123.5              ' 123.5\n\"123!\"             ' \"123!\"\n{1, 2, 3}          ' [1, 2, 3]\nSQR(5)             ' 2.23606797749979\n```\n\n#### assignments\n\nUse `LET <id> = <expression>` or simply `<id> = <expression>`.\n\nDeclarations are not required, for a variable are defined immediately before it is assigned for the first time. However, you can still use `DIM` to create an array filled with initial values. For example:\n\n```basic\nDIM A(5) AS INTEGER\nPRINT A     ' [0, 0, 0, 0, 0]\n```\n\n#### control structures\n\nSupported control structures:\n\n- `WHILE <rel_expression> ... END WHILE / WEND`\n- `DO ... LOOP`\n- `DO ... LOOP WHILE / UNTIL <rel_expression>`\n- `FOR <id> = <expression> TO <expression> ... NEXT <id> / END FOR`\n\nPlease notice that `GOTO` is not supported.\n\n#### data types\n\nSupported data types:\n\n- `INTEGER` (mapped to Python type `int`)\n- `DECIMAL` (mapped to Python type `float`)\n- `STRING` (mapped to Python type `str`)\n\nPlease notice that pybasic does not actually store data types, which means the type of variables can be modified at runtime.\n\nUse `AS` operator to do type conversions. For example:\n\n```basic\n2.5 AS INTEGER       ' 2\n2.5 AS STRING        ' \"2.5\"\n```\n\n#### functions\n\nSome inner functions are provided, like `SQR()` and etc.\n\nSingle-line functions can be defined with `DEFUN`. For example:\n\n```basic\nDEFUN F(x) = x * x\nPRINT F(5)          ' 25\n```\n\nMulti-line functions can be defined with `SUB ... END SUB` or `FUNCTION ... END FUNCTION`.\n\nFunctions can be called directly by using the function name as an order. For example:\n\n```basic\nDEFUN PRTYES(s) = PRINT(\"yes! \" + s)\nSUB PRTYEAH(s)\n    PRINT \"yeah! \" + s\nEND SUB\nPRTYES \"pybasic\"           ' \"yes! pybasic\"\nPRTYEAH \"pybasic\"          ' \"yeah! pybasic\"\n```\n\n#### I/O\n\nUnlike most BASIC dialects, pybasic provides `PRINT()` and `INPUT()` functions instead of statements. For example:\n\n```basic\nA = INPUT() AS INTEGER    ' input 17\nPRINT \"My age is \" + A    ' \"My age is 17\"\n\n```\n\n#### modules\n\nUse ```USE``` to import a Python module or another pybasic program. Pybasic will try finding a file ended with ```.bas``` or ```.py``` following the module's name in the current working directory. If no such file is finded, an error will be raised. For example:\n\n```basic\n' HELLO.bas\nFUNCTION PRTHELLO(A)\n    PRINT \"Hello, \" + A\nEND FUNCTION\n```\n\n```python\n# MORNING.py\nfrom pybasic import global_table\n\n@global_table.reflect('PRTMORN')\ndef print_morning(a):\n    print('Good morning, %s' % a)\n```\n\n```basic\n' MAIN.bas\nUSE HELLO\nUSE MORNING\n\nPRTHELLO \"Jack\" ' Hello, Jack\nPRTMORN \"Mary\"  ' Good morning, Mary\n```\n\nAny code in the module will be executed. If the module is python-based, it will be executed at runtime; if it is pybasic-based, it will be compiled into the main program before being executed.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Hou-Rui/pybasic", "keywords": "ply python BASIC interpreter", "license": "", "maintainer": "", "maintainer_email": "", "name": "ply-pybasic", "package_url": "https://pypi.org/project/ply-pybasic/", "platform": "", "project_url": "https://pypi.org/project/ply-pybasic/", "project_urls": {"Homepage": "https://github.com/Hou-Rui/pybasic"}, "release_url": "https://pypi.org/project/ply-pybasic/1.0/", "requires_dist": null, "requires_python": "", "summary": "", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # pybasic<br><br>A structured BASIC interpreter written in Python.<br><br>```plain<br><br>usage: pybasic.py [-h] [-a] [-s AST_PATH] [program_name]<br><br>Execute pybasic programs, or start an REPL session.<br><br>positional arguments:<br><br>  program_name          The path of the source program to execute. If not<br>                        specified, an REPL session will be started.<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br>  -a, --ast             Execute a binary abstract syntax tree file rather than<br>                        a source program. This will be ignored in REPL mode.<br>  -s AST_PATH, --save AST_PATH<br>                        Save the binary abstract syntax tree of the source<br>                        program to the given path. The source program will not<br>                        be executed. This will be ignored in REPL mode.<br>```<br><br>#### expressions<br><br>Supported expressions:<br><br>- `&lt;expression&gt;`: Math expressions. Support operators: `+`, `-`, `*`,<br>`/`, `\\`(exact division), `MOD`<br>- `&lt;rel_expression&gt;`: Logic expressions. Support operators: `AND`,<br>`OR`, `NOT`, `=`(equals to), `&lt;&gt;`<br><br>Please notice `=` in `&lt;rel_expression&gt;` is different from `=` in assignment statement.<br><br>Literal values and function calls are also treated as `&lt;expression&gt;`. For example:<br><br>```basic<br>123                ' 123<br>123.5              ' 123.5<br>\"123!\"             ' \"123!\"<br>{1, 2, 3}          ' [1, 2, 3]<br>SQR(5)             ' 2.23606797749979<br>```<br><br>#### assignments<br><br>Use `LET &lt;id&gt; = &lt;expression&gt;` or simply `&lt;id&gt; = &lt;expression&gt;`.<br><br>Declarations are not required, for a variable are defined immediately before it is assigned for the first time. However, you can still use `DIM` to create an array filled with initial values. For example:<br><br>```basic<br>DIM A(5) AS INTEGER<br>PRINT A     ' [0, 0, 0, 0, 0]<br>```<br><br>#### control structures<br><br>Supported control structures:<br><br>- `WHILE &lt;rel_expression&gt; ... END WHILE / WEND`<br>- `DO ... LOOP`<br>- `DO ... LOOP WHILE / UNTIL &lt;rel_expression&gt;`<br>- `FOR &lt;id&gt; = &lt;expression&gt; TO &lt;expression&gt; ... NEXT &lt;id&gt; / END FOR`<br><br>Please notice that `GOTO` is not supported.<br><br>#### data types<br><br>Supported data types:<br><br>- `INTEGER` (mapped to Python type `int`)<br>- `DECIMAL` (mapped to Python type `float`)<br>- `STRING` (mapped to Python type `str`)<br><br>Please notice that pybasic does not actually store data types, which means the type of variables can be modified at runtime.<br><br>Use `AS` operator to do type conversions. For example:<br><br>```basic<br>2.5 AS INTEGER       ' 2<br>2.5 AS STRING        ' \"2.5\"<br>```<br><br>#### functions<br><br>Some inner functions are provided, like `SQR()` and etc.<br><br>Single-line functions can be defined with `DEFUN`. For example:<br><br>```basic<br>DEFUN F(x) = x * x<br>PRINT F(5)          ' 25<br>```<br><br>Multi-line functions can be defined with `SUB ... END SUB` or `FUNCTION ... END FUNCTION`.<br><br>Functions can be called directly by using the function name as an order. For example:<br><br>```basic<br>DEFUN PRTYES(s) = PRINT(\"yes! \" + s)<br>SUB PRTYEAH(s)<br>    PRINT \"yeah! \" + s<br>END SUB<br>PRTYES \"pybasic\"           ' \"yes! pybasic\"<br>PRTYEAH \"pybasic\"          ' \"yeah! pybasic\"<br>```<br><br>#### I/O<br><br>Unlike most BASIC dialects, pybasic provides `PRINT()` and `INPUT()` functions instead of statements. For example:<br><br>```basic<br>A = INPUT() AS INTEGER    ' input 17<br>PRINT \"My age is \" + A    ' \"My age is 17\"<br><br>```<br><br>#### modules<br><br>Use ```USE``` to import a Python module or another pybasic program. Pybasic will try finding a file ended with ```.bas``` or ```.py``` following the module's name in the current working directory. If no such file is finded, an error will be raised. For example:<br><br>```basic<br>' HELLO.bas<br>FUNCTION PRTHELLO(A)<br>    PRINT \"Hello, \" + A<br>END FUNCTION<br>```<br><br>```python<br># MORNING.py<br>from pybasic import global_table<br><br>@global_table.reflect('PRTMORN')<br>def print_morning(a):<br>    print('Good morning, %s' % a)<br>```<br><br>```basic<br>' MAIN.bas<br>USE HELLO<br>USE MORNING<br><br>PRTHELLO \"Jack\" ' Hello, Jack<br>PRTMORN \"Mary\"  ' Good morning, Mary<br>```<br><br>Any code in the module will be executed. If the module is python-based, it will be executed at runtime; if it is pybasic-based, it will be compiled into the main program before being executed.\n          </div>"}, "last_serial": 5169496, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "bdf35a9781f99a291c92cc2a7afa19fb", "sha256": "f25f882be5edfd194c28c15d209b754afa62188ceb8a73b3bbdc2222a40011db"}, "downloads": -1, "filename": "ply_pybasic-1.0-py3.7.egg", "has_sig": false, "md5_digest": "bdf35a9781f99a291c92cc2a7afa19fb", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 39774, "upload_time": "2019-04-21T09:57:07", "upload_time_iso_8601": "2019-04-21T09:57:07.837523Z", "url": "https://files.pythonhosted.org/packages/a7/fa/6f215b1d6825db2b5650b79c074f3f6d3a505b6e3a46bc8375be340bddab/ply_pybasic-1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8008ea0fa663b638f949378e24bea69", "sha256": "da682d9d1fa70bf8cf752e1df169efcda55a162929e998027a860386e5de47da"}, "downloads": -1, "filename": "ply-pybasic-1.0.tar.gz", "has_sig": false, "md5_digest": "d8008ea0fa663b638f949378e24bea69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14475, "upload_time": "2019-04-21T09:57:04", "upload_time_iso_8601": "2019-04-21T09:57:04.172602Z", "url": "https://files.pythonhosted.org/packages/eb/e5/409a36b9bac8b87a96181a78719667293dc6cbbaf5fbb92ea7b5f17dc30f/ply-pybasic-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdf35a9781f99a291c92cc2a7afa19fb", "sha256": "f25f882be5edfd194c28c15d209b754afa62188ceb8a73b3bbdc2222a40011db"}, "downloads": -1, "filename": "ply_pybasic-1.0-py3.7.egg", "has_sig": false, "md5_digest": "bdf35a9781f99a291c92cc2a7afa19fb", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 39774, "upload_time": "2019-04-21T09:57:07", "upload_time_iso_8601": "2019-04-21T09:57:07.837523Z", "url": "https://files.pythonhosted.org/packages/a7/fa/6f215b1d6825db2b5650b79c074f3f6d3a505b6e3a46bc8375be340bddab/ply_pybasic-1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8008ea0fa663b638f949378e24bea69", "sha256": "da682d9d1fa70bf8cf752e1df169efcda55a162929e998027a860386e5de47da"}, "downloads": -1, "filename": "ply-pybasic-1.0.tar.gz", "has_sig": false, "md5_digest": "d8008ea0fa663b638f949378e24bea69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14475, "upload_time": "2019-04-21T09:57:04", "upload_time_iso_8601": "2019-04-21T09:57:04.172602Z", "url": "https://files.pythonhosted.org/packages/eb/e5/409a36b9bac8b87a96181a78719667293dc6cbbaf5fbb92ea7b5f17dc30f/ply-pybasic-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:22 2020"}